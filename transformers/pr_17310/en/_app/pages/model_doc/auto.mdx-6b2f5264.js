import{S as dLt,i as cLt,s as fLt,e as a,k as l,w as F,t as o,M as mLt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,F as e,g as b,y as M,q as E,o as C,B as w,v as gLt,L as I}from"../../chunks/vendor-6b77c823.js";import{T as bDr}from"../../chunks/Tip-39098574.js";import{D as R}from"../../chunks/Docstring-1088f2fb.js";import{C as P}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as oe}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as B}from"../../chunks/ExampleCodeBlock-5212b321.js";function hLt(L){let g,v,p,m,u,d,h,Mo,ci,hf,rt,fi,mi,a6,pf,je,We,gi,yn,n6,Ln,xn,s6,hi,$n,l6,pi,uf,Ca;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),u=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),ci=a("code"),hf=o("model_type"),rt=o(" attribute is set to the same key you use when registering the config (here "),fi=a("code"),mi=o('"new-model"'),a6=o(")."),pf=l(),je=a("p"),We=o("Likewise, if your "),gi=a("code"),yn=o("NewModel"),n6=o(" is a subclass of "),Ln=a("a"),xn=o("PreTrainedModel"),s6=o(`, make sure its
`),hi=a("code"),$n=o("config_class"),l6=o(` attribute is set to the same class you use when registering the model (here
`),pi=a("code"),uf=o("NewModelConfig"),Ca=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var w$=s(p);m=r(w$,"NewModelConfig"),w$.forEach(t),u=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var ui=s(d);h=r(ui,"PretrainedConfig"),ui.forEach(t),Mo=r(Ae,`, make sure its
`),ci=n(Ae,"CODE",{});var A$=s(ci);hf=r(A$,"model_type"),A$.forEach(t),rt=r(Ae," attribute is set to the same key you use when registering the config (here "),fi=n(Ae,"CODE",{});var y$=s(fi);mi=r(y$,'"new-model"'),y$.forEach(t),a6=r(Ae,")."),Ae.forEach(t),pf=i(Qe),je=n(Qe,"P",{});var Eo=s(je);We=r(Eo,"Likewise, if your "),gi=n(Eo,"CODE",{});var wa=s(gi);yn=r(wa,"NewModel"),wa.forEach(t),n6=r(Eo," is a subclass of "),Ln=n(Eo,"A",{href:!0});var L$=s(Ln);xn=r(L$,"PreTrainedModel"),L$.forEach(t),s6=r(Eo,`, make sure its
`),hi=n(Eo,"CODE",{});var _f=s(hi);$n=r(_f,"config_class"),_f.forEach(t),l6=r(Eo,` attribute is set to the same class you use when registering the model (here
`),pi=n(Eo,"CODE",{});var x$=s(pi);uf=r(x$,"NewModelConfig"),x$.forEach(t),Ca=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(Ln,"href","/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,p),e(p,m),e(g,u),e(g,d),e(d,h),e(g,Mo),e(g,ci),e(ci,hf),e(g,rt),e(g,fi),e(fi,mi),e(g,a6),b(Qe,pf,Ae),b(Qe,je,Ae),e(je,We),e(je,gi),e(gi,yn),e(je,n6),e(je,Ln),e(Ln,xn),e(je,s6),e(je,hi),e(hi,$n),e(je,l6),e(je,pi),e(pi,uf),e(je,Ca)},d(Qe){Qe&&t(g),Qe&&t(pf),Qe&&t(je)}}}function pLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Lt(L){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function bLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vLt(L){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function FLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ELt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ALt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Lt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ILt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ULt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZLt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function e8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function o8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function r8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function t8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function a8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function n8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function s8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function l8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function i8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function d8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function c8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function f8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function m8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function g8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function h8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function p8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function u8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function b8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function v8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function F8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function T8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function M8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function E8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function C8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function w8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function A8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function y8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function L8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function x8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function k8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function S8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function R8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function P8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function B8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function I8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function q8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function N8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function j8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function D8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function G8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function O8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function V8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function X8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function z8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function W8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Q8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function H8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function U8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function J8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Y8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function K8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Z8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ext(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function txt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function axt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ixt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fxt(L){let g,v,p,m,u,d,h,Mo,ci,hf,rt,fi,mi,a6,pf,je,We,gi,yn,n6,Ln,xn,s6,hi,$n,l6,pi,uf,Ca,Qe,Ae,w$,ui,A$,y$,Eo,wa,L$,_f,x$,DDe,xIe,_i,bf,Fee,i6,GDe,Tee,ODe,$Ie,kn,VDe,Mee,XDe,zDe,Eee,WDe,QDe,kIe,d6,SIe,$$,HDe,RIe,vf,PIe,bi,Ff,Cee,c6,UDe,wee,JDe,BIe,Co,f6,YDe,m6,KDe,k$,ZDe,eGe,oGe,g6,rGe,Aee,tGe,aGe,nGe,Er,h6,sGe,yee,lGe,iGe,vi,dGe,Lee,cGe,fGe,xee,mGe,gGe,hGe,A,Tf,$ee,pGe,uGe,S$,_Ge,bGe,vGe,Mf,kee,FGe,TGe,R$,MGe,EGe,CGe,Ef,See,wGe,AGe,P$,yGe,LGe,xGe,Cf,Ree,$Ge,kGe,B$,SGe,RGe,PGe,wf,Pee,BGe,IGe,I$,qGe,NGe,jGe,Af,Bee,DGe,GGe,q$,OGe,VGe,XGe,yf,Iee,zGe,WGe,N$,QGe,HGe,UGe,Lf,qee,JGe,YGe,j$,KGe,ZGe,eOe,xf,Nee,oOe,rOe,D$,tOe,aOe,nOe,$f,jee,sOe,lOe,G$,iOe,dOe,cOe,kf,Dee,fOe,mOe,O$,gOe,hOe,pOe,Sf,Gee,uOe,_Oe,V$,bOe,vOe,FOe,Rf,Oee,TOe,MOe,X$,EOe,COe,wOe,Pf,Vee,AOe,yOe,z$,LOe,xOe,$Oe,Bf,Xee,kOe,SOe,W$,ROe,POe,BOe,If,zee,IOe,qOe,Q$,NOe,jOe,DOe,qf,Wee,GOe,OOe,H$,VOe,XOe,zOe,Nf,Qee,WOe,QOe,U$,HOe,UOe,JOe,jf,Hee,YOe,KOe,J$,ZOe,eVe,oVe,Df,Uee,rVe,tVe,Y$,aVe,nVe,sVe,Gf,Jee,lVe,iVe,K$,dVe,cVe,fVe,Of,Yee,mVe,gVe,Z$,hVe,pVe,uVe,Vf,Kee,_Ve,bVe,ek,vVe,FVe,TVe,Xf,Zee,MVe,EVe,ok,CVe,wVe,AVe,zf,eoe,yVe,LVe,rk,xVe,$Ve,kVe,Wf,ooe,SVe,RVe,tk,PVe,BVe,IVe,Qf,roe,qVe,NVe,ak,jVe,DVe,GVe,Hf,toe,OVe,VVe,nk,XVe,zVe,WVe,Uf,aoe,QVe,HVe,sk,UVe,JVe,YVe,Jf,noe,KVe,ZVe,lk,eXe,oXe,rXe,Yf,soe,tXe,aXe,ik,nXe,sXe,lXe,Kf,loe,iXe,dXe,dk,cXe,fXe,mXe,Zf,ioe,gXe,hXe,ck,pXe,uXe,_Xe,em,doe,bXe,vXe,fk,FXe,TXe,MXe,om,coe,EXe,CXe,mk,wXe,AXe,yXe,rm,foe,LXe,xXe,gk,$Xe,kXe,SXe,tm,moe,RXe,PXe,hk,BXe,IXe,qXe,am,goe,NXe,jXe,pk,DXe,GXe,OXe,nm,hoe,VXe,XXe,uk,zXe,WXe,QXe,sm,poe,HXe,UXe,_k,JXe,YXe,KXe,lm,uoe,ZXe,eze,bk,oze,rze,tze,im,_oe,aze,nze,vk,sze,lze,ize,dm,boe,dze,cze,Fk,fze,mze,gze,cm,voe,hze,pze,Tk,uze,_ze,bze,fm,Foe,vze,Fze,Mk,Tze,Mze,Eze,mm,Toe,Cze,wze,Ek,Aze,yze,Lze,gm,Moe,xze,$ze,Ck,kze,Sze,Rze,hm,Eoe,Pze,Bze,wk,Ize,qze,Nze,pm,Coe,jze,Dze,Ak,Gze,Oze,Vze,um,woe,Xze,zze,yk,Wze,Qze,Hze,_m,Aoe,Uze,Jze,Lk,Yze,Kze,Zze,bm,yoe,eWe,oWe,xk,rWe,tWe,aWe,vm,Loe,nWe,sWe,$k,lWe,iWe,dWe,Fm,xoe,cWe,fWe,kk,mWe,gWe,hWe,Tm,$oe,pWe,uWe,Sk,_We,bWe,vWe,Mm,koe,FWe,TWe,Rk,MWe,EWe,CWe,Em,Soe,wWe,AWe,Pk,yWe,LWe,xWe,Cm,Roe,$We,kWe,Bk,SWe,RWe,PWe,wm,Poe,BWe,IWe,Ik,qWe,NWe,jWe,Am,Boe,DWe,GWe,qk,OWe,VWe,XWe,ym,Ioe,zWe,WWe,Nk,QWe,HWe,UWe,Lm,qoe,JWe,YWe,jk,KWe,ZWe,eQe,xm,Noe,oQe,rQe,Dk,tQe,aQe,nQe,$m,joe,sQe,lQe,Gk,iQe,dQe,cQe,km,Doe,fQe,mQe,Ok,gQe,hQe,pQe,Sm,Goe,uQe,_Qe,Vk,bQe,vQe,FQe,Rm,Ooe,TQe,MQe,Xk,EQe,CQe,wQe,Pm,Voe,AQe,yQe,zk,LQe,xQe,$Qe,Bm,Xoe,kQe,SQe,Wk,RQe,PQe,BQe,Im,zoe,IQe,qQe,Qk,NQe,jQe,DQe,qm,Woe,GQe,OQe,Hk,VQe,XQe,zQe,Nm,Qoe,WQe,QQe,Uk,HQe,UQe,JQe,jm,Hoe,YQe,KQe,Jk,ZQe,eHe,oHe,Dm,Uoe,rHe,tHe,Yk,aHe,nHe,sHe,Gm,Joe,lHe,iHe,Kk,dHe,cHe,fHe,Om,Yoe,mHe,gHe,Zk,hHe,pHe,uHe,Vm,Koe,_He,bHe,eS,vHe,FHe,THe,Xm,Zoe,MHe,EHe,oS,CHe,wHe,AHe,zm,ere,yHe,LHe,rS,xHe,$He,kHe,Wm,ore,SHe,RHe,tS,PHe,BHe,IHe,Qm,rre,qHe,NHe,aS,jHe,DHe,GHe,Hm,tre,OHe,VHe,nS,XHe,zHe,WHe,Um,are,QHe,HHe,sS,UHe,JHe,YHe,Jm,nre,KHe,ZHe,lS,eUe,oUe,rUe,Ym,sre,tUe,aUe,iS,nUe,sUe,lUe,Km,lre,iUe,dUe,dS,cUe,fUe,mUe,Zm,ire,gUe,hUe,cS,pUe,uUe,_Ue,eg,dre,bUe,vUe,fS,FUe,TUe,MUe,og,cre,EUe,CUe,mS,wUe,AUe,yUe,rg,fre,LUe,xUe,gS,$Ue,kUe,SUe,tg,mre,RUe,PUe,hS,BUe,IUe,qUe,ag,gre,NUe,jUe,pS,DUe,GUe,OUe,ng,hre,VUe,XUe,uS,zUe,WUe,QUe,sg,pre,HUe,UUe,_S,JUe,YUe,KUe,lg,ure,ZUe,eJe,bS,oJe,rJe,tJe,ig,_re,aJe,nJe,vS,sJe,lJe,iJe,dg,bre,dJe,cJe,FS,fJe,mJe,gJe,cg,vre,hJe,pJe,TS,uJe,_Je,bJe,fg,Fre,vJe,FJe,MS,TJe,MJe,EJe,mg,Tre,CJe,wJe,ES,AJe,yJe,LJe,gg,Mre,xJe,$Je,CS,kJe,SJe,RJe,hg,Ere,PJe,BJe,wS,IJe,qJe,NJe,pg,Cre,jJe,DJe,AS,GJe,OJe,VJe,ug,wre,XJe,zJe,yS,WJe,QJe,HJe,_g,Are,UJe,JJe,LS,YJe,KJe,ZJe,bg,eYe,vg,p6,oYe,yre,rYe,IIe,Fi,Fg,Lre,u6,tYe,xre,aYe,qIe,wo,_6,nYe,b6,sYe,xS,lYe,iYe,dYe,v6,cYe,$re,fYe,mYe,gYe,Cr,F6,hYe,kre,pYe,uYe,Aa,_Ye,Sre,bYe,vYe,Rre,FYe,TYe,Pre,MYe,EYe,CYe,k,Sn,Bre,wYe,AYe,$S,yYe,LYe,kS,xYe,$Ye,kYe,Rn,Ire,SYe,RYe,SS,PYe,BYe,RS,IYe,qYe,NYe,Pn,qre,jYe,DYe,PS,GYe,OYe,BS,VYe,XYe,zYe,Tg,Nre,WYe,QYe,IS,HYe,UYe,JYe,Bn,jre,YYe,KYe,qS,ZYe,eKe,NS,oKe,rKe,tKe,Mg,Dre,aKe,nKe,jS,sKe,lKe,iKe,Eg,Gre,dKe,cKe,DS,fKe,mKe,gKe,Cg,Ore,hKe,pKe,GS,uKe,_Ke,bKe,In,Vre,vKe,FKe,OS,TKe,MKe,VS,EKe,CKe,wKe,qn,Xre,AKe,yKe,XS,LKe,xKe,zS,$Ke,kKe,SKe,Nn,zre,RKe,PKe,WS,BKe,IKe,QS,qKe,NKe,jKe,wg,Wre,DKe,GKe,HS,OKe,VKe,XKe,Ag,Qre,zKe,WKe,US,QKe,HKe,UKe,jn,Hre,JKe,YKe,JS,KKe,ZKe,YS,eZe,oZe,rZe,yg,Ure,tZe,aZe,KS,nZe,sZe,lZe,Dn,Jre,iZe,dZe,ZS,cZe,fZe,eR,mZe,gZe,hZe,Gn,Yre,pZe,uZe,oR,_Ze,bZe,rR,vZe,FZe,TZe,On,Kre,MZe,EZe,tR,CZe,wZe,aR,AZe,yZe,LZe,Lg,Zre,xZe,$Ze,nR,kZe,SZe,RZe,Vn,ete,PZe,BZe,sR,IZe,qZe,lR,NZe,jZe,DZe,Xn,ote,GZe,OZe,iR,VZe,XZe,dR,zZe,WZe,QZe,zn,rte,HZe,UZe,cR,JZe,YZe,fR,KZe,ZZe,eeo,Wn,tte,oeo,reo,mR,teo,aeo,gR,neo,seo,leo,Qn,ate,ieo,deo,hR,ceo,feo,pR,meo,geo,heo,Hn,nte,peo,ueo,uR,_eo,beo,_R,veo,Feo,Teo,xg,ste,Meo,Eeo,bR,Ceo,weo,Aeo,Un,lte,yeo,Leo,vR,xeo,$eo,FR,keo,Seo,Reo,$g,ite,Peo,Beo,TR,Ieo,qeo,Neo,Jn,dte,jeo,Deo,MR,Geo,Oeo,ER,Veo,Xeo,zeo,Yn,cte,Weo,Qeo,CR,Heo,Ueo,wR,Jeo,Yeo,Keo,Kn,fte,Zeo,eoo,AR,ooo,roo,yR,too,aoo,noo,Zn,mte,soo,loo,LR,ioo,doo,xR,coo,foo,moo,es,gte,goo,hoo,$R,poo,uoo,kR,_oo,boo,voo,kg,hte,Foo,Too,SR,Moo,Eoo,Coo,os,pte,woo,Aoo,RR,yoo,Loo,PR,xoo,$oo,koo,rs,ute,Soo,Roo,BR,Poo,Boo,IR,Ioo,qoo,Noo,ts,_te,joo,Doo,qR,Goo,Ooo,NR,Voo,Xoo,zoo,as,bte,Woo,Qoo,jR,Hoo,Uoo,DR,Joo,Yoo,Koo,ns,vte,Zoo,ero,GR,oro,rro,OR,tro,aro,nro,ss,Fte,sro,lro,VR,iro,dro,XR,cro,fro,mro,Sg,Tte,gro,hro,zR,pro,uro,_ro,ls,Mte,bro,vro,WR,Fro,Tro,QR,Mro,Ero,Cro,Rg,Ete,wro,Aro,HR,yro,Lro,xro,Pg,Cte,$ro,kro,UR,Sro,Rro,Pro,is,wte,Bro,Iro,JR,qro,Nro,YR,jro,Dro,Gro,ds,Ate,Oro,Vro,KR,Xro,zro,ZR,Wro,Qro,Hro,cs,yte,Uro,Jro,eP,Yro,Kro,oP,Zro,eto,oto,Bg,Lte,rto,tto,rP,ato,nto,sto,fs,xte,lto,ito,tP,dto,cto,aP,fto,mto,gto,ms,$te,hto,pto,nP,uto,_to,sP,bto,vto,Fto,gs,kte,Tto,Mto,lP,Eto,Cto,iP,wto,Ato,yto,hs,Ste,Lto,xto,dP,$to,kto,cP,Sto,Rto,Pto,ps,Rte,Bto,Ito,fP,qto,Nto,mP,jto,Dto,Gto,Ig,Pte,Oto,Vto,gP,Xto,zto,Wto,us,Bte,Qto,Hto,hP,Uto,Jto,pP,Yto,Kto,Zto,qg,Ite,eao,oao,uP,rao,tao,aao,Ng,qte,nao,sao,_P,lao,iao,dao,jg,Nte,cao,fao,bP,mao,gao,hao,Dg,jte,pao,uao,vP,_ao,bao,vao,_s,Dte,Fao,Tao,FP,Mao,Eao,TP,Cao,wao,Aao,Gg,Gte,yao,Lao,MP,xao,$ao,kao,bs,Ote,Sao,Rao,EP,Pao,Bao,CP,Iao,qao,Nao,vs,Vte,jao,Dao,wP,Gao,Oao,AP,Vao,Xao,zao,Fs,Xte,Wao,Qao,yP,Hao,Uao,LP,Jao,Yao,Kao,Ts,zte,Zao,eno,xP,ono,rno,$P,tno,ano,nno,Ms,Wte,sno,lno,kP,ino,dno,SP,cno,fno,mno,Es,Qte,gno,hno,RP,pno,uno,PP,_no,bno,vno,Og,Hte,Fno,Tno,BP,Mno,Eno,Cno,Vg,Ute,wno,Ano,IP,yno,Lno,xno,Cs,Jte,$no,kno,qP,Sno,Rno,NP,Pno,Bno,Ino,ws,Yte,qno,Nno,jP,jno,Dno,DP,Gno,Ono,Vno,As,Kte,Xno,zno,GP,Wno,Qno,OP,Hno,Uno,Jno,Xg,Zte,Yno,Kno,VP,Zno,eso,oso,zg,eae,rso,tso,XP,aso,nso,sso,Wg,oae,lso,iso,zP,dso,cso,fso,ys,rae,mso,gso,WP,hso,pso,QP,uso,_so,bso,Qg,tae,vso,Fso,HP,Tso,Mso,Eso,Hg,aae,Cso,wso,UP,Aso,yso,Lso,Ug,nae,xso,$so,JP,kso,Sso,Rso,Ls,sae,Pso,Bso,YP,Iso,qso,KP,Nso,jso,Dso,Jg,lae,Gso,Oso,ZP,Vso,Xso,zso,Yg,iae,Wso,Qso,eB,Hso,Uso,Jso,xs,dae,Yso,Kso,oB,Zso,elo,rB,olo,rlo,tlo,$s,cae,alo,nlo,tB,slo,llo,aB,ilo,dlo,clo,ks,fae,flo,mlo,nB,glo,hlo,sB,plo,ulo,_lo,Ss,mae,blo,vlo,lB,Flo,Tlo,iB,Mlo,Elo,Clo,Kg,wlo,Zg,T6,Alo,gae,ylo,NIe,Ti,eh,hae,M6,Llo,pae,xlo,jIe,Ao,E6,$lo,C6,klo,dB,Slo,Rlo,Plo,w6,Blo,uae,Ilo,qlo,Nlo,He,A6,jlo,_ae,Dlo,Glo,ya,Olo,bae,Vlo,Xlo,vae,zlo,Wlo,Fae,Qlo,Hlo,Ulo,Z,oh,Tae,Jlo,Ylo,cB,Klo,Zlo,eio,rh,Mae,oio,rio,fB,tio,aio,nio,th,Eae,sio,lio,mB,iio,dio,cio,ah,Cae,fio,mio,gB,gio,hio,pio,nh,wae,uio,_io,hB,bio,vio,Fio,sh,Aae,Tio,Mio,pB,Eio,Cio,wio,lh,yae,Aio,yio,uB,Lio,xio,$io,ih,Lae,kio,Sio,_B,Rio,Pio,Bio,dh,xae,Iio,qio,bB,Nio,jio,Dio,ch,$ae,Gio,Oio,vB,Vio,Xio,zio,fh,kae,Wio,Qio,FB,Hio,Uio,Jio,mh,Sae,Yio,Kio,TB,Zio,edo,odo,gh,Rae,rdo,tdo,MB,ado,ndo,sdo,hh,Pae,ldo,ido,EB,ddo,cdo,fdo,ph,Bae,mdo,gdo,CB,hdo,pdo,udo,uh,Iae,_do,bdo,wB,vdo,Fdo,Tdo,_h,qae,Mdo,Edo,AB,Cdo,wdo,Ado,bh,Nae,ydo,Ldo,yB,xdo,$do,kdo,vh,jae,Sdo,Rdo,LB,Pdo,Bdo,Ido,Fh,Dae,qdo,Ndo,xB,jdo,Ddo,Gdo,Th,Gae,Odo,Vdo,$B,Xdo,zdo,Wdo,Mh,Oae,Qdo,Hdo,kB,Udo,Jdo,Ydo,Eh,Vae,Kdo,Zdo,SB,eco,oco,rco,Ch,Xae,tco,aco,RB,nco,sco,lco,wh,zae,ico,dco,PB,cco,fco,mco,Ah,Wae,gco,hco,BB,pco,uco,_co,yh,bco,Lh,vco,xh,y6,Fco,Qae,Tco,DIe,Mi,$h,Hae,L6,Mco,Uae,Eco,GIe,yo,x6,Cco,$6,wco,IB,Aco,yco,Lco,k6,xco,Jae,$co,kco,Sco,Ue,S6,Rco,Yae,Pco,Bco,Ei,Ico,Kae,qco,Nco,Zae,jco,Dco,Gco,pe,kh,ene,Oco,Vco,qB,Xco,zco,Wco,Sh,one,Qco,Hco,rne,Uco,Jco,Yco,Rh,tne,Kco,Zco,NB,efo,ofo,rfo,Ph,ane,tfo,afo,jB,nfo,sfo,lfo,Bh,nne,ifo,dfo,DB,cfo,ffo,mfo,Ih,sne,gfo,hfo,GB,pfo,ufo,_fo,qh,lne,bfo,vfo,OB,Ffo,Tfo,Mfo,Nh,ine,Efo,Cfo,VB,wfo,Afo,yfo,jh,dne,Lfo,xfo,XB,$fo,kfo,Sfo,Dh,cne,Rfo,Pfo,zB,Bfo,Ifo,qfo,Gh,fne,Nfo,jfo,WB,Dfo,Gfo,Ofo,Oh,mne,Vfo,Xfo,QB,zfo,Wfo,Qfo,Vh,gne,Hfo,Ufo,HB,Jfo,Yfo,Kfo,Xh,hne,Zfo,emo,UB,omo,rmo,tmo,zh,pne,amo,nmo,JB,smo,lmo,imo,Wh,une,dmo,cmo,YB,fmo,mmo,gmo,Qh,hmo,Hh,pmo,Uh,R6,umo,_ne,_mo,OIe,Ci,Jh,bne,P6,bmo,vne,vmo,VIe,Lo,B6,Fmo,wi,Tmo,KB,Mmo,Emo,ZB,Cmo,wmo,Amo,I6,ymo,Fne,Lmo,xmo,$mo,tt,q6,kmo,Tne,Smo,Rmo,Ai,Pmo,Mne,Bmo,Imo,eI,qmo,Nmo,jmo,Yh,Dmo,Je,N6,Gmo,Ene,Omo,Vmo,La,Xmo,Cne,zmo,Wmo,wne,Qmo,Hmo,Ane,Umo,Jmo,Ymo,x,Kh,yne,Kmo,Zmo,oI,ego,ogo,rgo,Zh,Lne,tgo,ago,rI,ngo,sgo,lgo,ep,xne,igo,dgo,tI,cgo,fgo,mgo,op,$ne,ggo,hgo,aI,pgo,ugo,_go,rp,kne,bgo,vgo,nI,Fgo,Tgo,Mgo,tp,Sne,Ego,Cgo,sI,wgo,Ago,ygo,ap,Rne,Lgo,xgo,lI,$go,kgo,Sgo,np,Pne,Rgo,Pgo,iI,Bgo,Igo,qgo,sp,Bne,Ngo,jgo,dI,Dgo,Ggo,Ogo,lp,Ine,Vgo,Xgo,cI,zgo,Wgo,Qgo,ip,qne,Hgo,Ugo,fI,Jgo,Ygo,Kgo,dp,Nne,Zgo,eho,mI,oho,rho,tho,cp,jne,aho,nho,gI,sho,lho,iho,fp,Dne,dho,cho,hI,fho,mho,gho,mp,Gne,hho,pho,pI,uho,_ho,bho,gp,One,vho,Fho,uI,Tho,Mho,Eho,hp,Vne,Cho,who,_I,Aho,yho,Lho,pp,Xne,xho,$ho,bI,kho,Sho,Rho,up,zne,Pho,Bho,vI,Iho,qho,Nho,_p,Wne,jho,Dho,FI,Gho,Oho,Vho,bp,Qne,Xho,zho,TI,Who,Qho,Hho,vp,Hne,Uho,Jho,MI,Yho,Kho,Zho,Fp,Une,epo,opo,EI,rpo,tpo,apo,Tp,Jne,npo,spo,CI,lpo,ipo,dpo,Mp,Yne,cpo,fpo,wI,mpo,gpo,hpo,Ep,Kne,ppo,upo,AI,_po,bpo,vpo,Cp,Zne,Fpo,Tpo,yI,Mpo,Epo,Cpo,wp,ese,wpo,Apo,LI,ypo,Lpo,xpo,Ap,ose,$po,kpo,xI,Spo,Rpo,Ppo,yp,rse,Bpo,Ipo,$I,qpo,Npo,jpo,Lp,tse,Dpo,Gpo,kI,Opo,Vpo,Xpo,Rs,ase,zpo,Wpo,SI,Qpo,Hpo,RI,Upo,Jpo,Ypo,xp,nse,Kpo,Zpo,PI,euo,ouo,ruo,$p,sse,tuo,auo,BI,nuo,suo,luo,kp,lse,iuo,duo,II,cuo,fuo,muo,Sp,ise,guo,huo,qI,puo,uuo,_uo,Rp,dse,buo,vuo,NI,Fuo,Tuo,Muo,Pp,cse,Euo,Cuo,jI,wuo,Auo,yuo,Bp,fse,Luo,xuo,DI,$uo,kuo,Suo,Ip,mse,Ruo,Puo,GI,Buo,Iuo,quo,qp,gse,Nuo,juo,OI,Duo,Guo,Ouo,Np,hse,Vuo,Xuo,VI,zuo,Wuo,Quo,jp,pse,Huo,Uuo,XI,Juo,Yuo,Kuo,Dp,use,Zuo,e_o,zI,o_o,r_o,t_o,Gp,_se,a_o,n_o,WI,s_o,l_o,i_o,Op,bse,d_o,c_o,QI,f_o,m_o,g_o,Vp,vse,h_o,p_o,HI,u_o,__o,b_o,Xp,Fse,v_o,F_o,UI,T_o,M_o,E_o,zp,Tse,C_o,w_o,JI,A_o,y_o,L_o,Wp,Mse,x_o,$_o,YI,k_o,S_o,R_o,Qp,Ese,P_o,B_o,KI,I_o,q_o,N_o,Hp,Cse,j_o,D_o,ZI,G_o,O_o,V_o,Up,wse,X_o,z_o,eq,W_o,Q_o,H_o,Jp,Ase,U_o,J_o,oq,Y_o,K_o,Z_o,Yp,yse,e1o,o1o,rq,r1o,t1o,a1o,Kp,Lse,n1o,s1o,tq,l1o,i1o,d1o,Zp,xse,c1o,f1o,aq,m1o,g1o,h1o,eu,$se,p1o,u1o,nq,_1o,b1o,v1o,ou,kse,F1o,T1o,sq,M1o,E1o,C1o,ru,Sse,w1o,A1o,lq,y1o,L1o,x1o,tu,Rse,$1o,k1o,iq,S1o,R1o,P1o,au,Pse,B1o,I1o,dq,q1o,N1o,j1o,nu,Bse,D1o,G1o,cq,O1o,V1o,X1o,su,Ise,z1o,W1o,fq,Q1o,H1o,U1o,lu,qse,J1o,Y1o,mq,K1o,Z1o,ebo,iu,Nse,obo,rbo,gq,tbo,abo,nbo,du,jse,sbo,lbo,hq,ibo,dbo,cbo,cu,Dse,fbo,mbo,pq,gbo,hbo,pbo,fu,Gse,ubo,_bo,uq,bbo,vbo,Fbo,mu,Ose,Tbo,Mbo,_q,Ebo,Cbo,wbo,gu,Vse,Abo,ybo,bq,Lbo,xbo,$bo,hu,Xse,kbo,Sbo,vq,Rbo,Pbo,Bbo,pu,zse,Ibo,qbo,Fq,Nbo,jbo,Dbo,uu,Wse,Gbo,Obo,Tq,Vbo,Xbo,zbo,_u,Qse,Wbo,Qbo,Mq,Hbo,Ubo,Jbo,bu,Hse,Ybo,Kbo,Eq,Zbo,e2o,o2o,vu,Use,r2o,t2o,Cq,a2o,n2o,s2o,Fu,Jse,l2o,i2o,wq,d2o,c2o,f2o,Tu,Yse,m2o,g2o,Aq,h2o,p2o,u2o,Mu,Kse,_2o,b2o,yq,v2o,F2o,T2o,Eu,Zse,M2o,E2o,Lq,C2o,w2o,A2o,Cu,ele,y2o,L2o,xq,x2o,$2o,k2o,wu,ole,S2o,R2o,$q,P2o,B2o,I2o,Au,rle,q2o,N2o,kq,j2o,D2o,G2o,yu,tle,O2o,V2o,Sq,X2o,z2o,W2o,Lu,ale,Q2o,H2o,Rq,U2o,J2o,Y2o,xu,nle,K2o,Z2o,Pq,evo,ovo,rvo,$u,sle,tvo,avo,Bq,nvo,svo,lvo,ku,lle,ivo,dvo,Iq,cvo,fvo,mvo,Su,ile,gvo,hvo,qq,pvo,uvo,_vo,Ru,dle,bvo,vvo,Nq,Fvo,Tvo,Mvo,Pu,cle,Evo,Cvo,jq,wvo,Avo,yvo,Bu,fle,Lvo,xvo,Dq,$vo,kvo,Svo,Iu,mle,Rvo,Pvo,Gq,Bvo,Ivo,qvo,qu,gle,Nvo,jvo,Oq,Dvo,Gvo,Ovo,Nu,hle,Vvo,Xvo,Vq,zvo,Wvo,Qvo,ju,ple,Hvo,Uvo,Xq,Jvo,Yvo,Kvo,Du,ule,Zvo,e3o,zq,o3o,r3o,t3o,Gu,a3o,_le,n3o,s3o,ble,l3o,i3o,Ou,XIe,yi,Vu,vle,j6,d3o,Fle,c3o,zIe,xo,D6,f3o,Li,m3o,Wq,g3o,h3o,Qq,p3o,u3o,_3o,G6,b3o,Tle,v3o,F3o,T3o,at,O6,M3o,Mle,E3o,C3o,xi,w3o,Ele,A3o,y3o,Hq,L3o,x3o,$3o,Xu,k3o,Ye,V6,S3o,Cle,R3o,P3o,xa,B3o,wle,I3o,q3o,Ale,N3o,j3o,yle,D3o,G3o,O3o,G,zu,Lle,V3o,X3o,Uq,z3o,W3o,Q3o,Wu,xle,H3o,U3o,Jq,J3o,Y3o,K3o,Qu,$le,Z3o,eFo,Yq,oFo,rFo,tFo,Hu,kle,aFo,nFo,Kq,sFo,lFo,iFo,Uu,Sle,dFo,cFo,Zq,fFo,mFo,gFo,Ju,Rle,hFo,pFo,eN,uFo,_Fo,bFo,Yu,Ple,vFo,FFo,oN,TFo,MFo,EFo,Ku,Ble,CFo,wFo,rN,AFo,yFo,LFo,Zu,Ile,xFo,$Fo,tN,kFo,SFo,RFo,e_,qle,PFo,BFo,aN,IFo,qFo,NFo,o_,Nle,jFo,DFo,nN,GFo,OFo,VFo,r_,jle,XFo,zFo,sN,WFo,QFo,HFo,t_,Dle,UFo,JFo,lN,YFo,KFo,ZFo,a_,Gle,e0o,o0o,iN,r0o,t0o,a0o,n_,Ole,n0o,s0o,dN,l0o,i0o,d0o,s_,Vle,c0o,f0o,cN,m0o,g0o,h0o,l_,Xle,p0o,u0o,fN,_0o,b0o,v0o,i_,zle,F0o,T0o,mN,M0o,E0o,C0o,d_,Wle,w0o,A0o,gN,y0o,L0o,x0o,c_,Qle,$0o,k0o,hN,S0o,R0o,P0o,f_,Hle,B0o,I0o,pN,q0o,N0o,j0o,m_,Ule,D0o,G0o,uN,O0o,V0o,X0o,g_,Jle,z0o,W0o,_N,Q0o,H0o,U0o,h_,Yle,J0o,Y0o,bN,K0o,Z0o,eTo,p_,Kle,oTo,rTo,vN,tTo,aTo,nTo,u_,Zle,sTo,lTo,FN,iTo,dTo,cTo,__,eie,fTo,mTo,TN,gTo,hTo,pTo,b_,oie,uTo,_To,MN,bTo,vTo,FTo,v_,rie,TTo,MTo,EN,ETo,CTo,wTo,F_,tie,ATo,yTo,CN,LTo,xTo,$To,T_,aie,kTo,STo,wN,RTo,PTo,BTo,M_,nie,ITo,qTo,AN,NTo,jTo,DTo,E_,sie,GTo,OTo,yN,VTo,XTo,zTo,C_,lie,WTo,QTo,LN,HTo,UTo,JTo,w_,iie,YTo,KTo,xN,ZTo,e7o,o7o,A_,die,r7o,t7o,$N,a7o,n7o,s7o,y_,cie,l7o,i7o,kN,d7o,c7o,f7o,L_,fie,m7o,g7o,SN,h7o,p7o,u7o,x_,mie,_7o,b7o,RN,v7o,F7o,T7o,$_,gie,M7o,E7o,PN,C7o,w7o,A7o,k_,hie,y7o,L7o,BN,x7o,$7o,k7o,S_,pie,S7o,R7o,IN,P7o,B7o,I7o,R_,q7o,uie,N7o,j7o,_ie,D7o,G7o,P_,WIe,$i,B_,bie,X6,O7o,vie,V7o,QIe,$o,z6,X7o,ki,z7o,qN,W7o,Q7o,NN,H7o,U7o,J7o,W6,Y7o,Fie,K7o,Z7o,eMo,nt,Q6,oMo,Tie,rMo,tMo,Si,aMo,Mie,nMo,sMo,jN,lMo,iMo,dMo,I_,cMo,Ke,H6,fMo,Eie,mMo,gMo,$a,hMo,Cie,pMo,uMo,wie,_Mo,bMo,Aie,vMo,FMo,TMo,z,q_,yie,MMo,EMo,DN,CMo,wMo,AMo,N_,Lie,yMo,LMo,GN,xMo,$Mo,kMo,j_,xie,SMo,RMo,ON,PMo,BMo,IMo,D_,$ie,qMo,NMo,VN,jMo,DMo,GMo,G_,kie,OMo,VMo,XN,XMo,zMo,WMo,O_,Sie,QMo,HMo,zN,UMo,JMo,YMo,V_,Rie,KMo,ZMo,WN,e4o,o4o,r4o,X_,Pie,t4o,a4o,QN,n4o,s4o,l4o,z_,Bie,i4o,d4o,HN,c4o,f4o,m4o,W_,Iie,g4o,h4o,UN,p4o,u4o,_4o,Q_,qie,b4o,v4o,JN,F4o,T4o,M4o,H_,Nie,E4o,C4o,YN,w4o,A4o,y4o,U_,jie,L4o,x4o,KN,$4o,k4o,S4o,J_,Die,R4o,P4o,ZN,B4o,I4o,q4o,Y_,Gie,N4o,j4o,ej,D4o,G4o,O4o,K_,Oie,V4o,X4o,oj,z4o,W4o,Q4o,Z_,Vie,H4o,U4o,rj,J4o,Y4o,K4o,e1,Xie,Z4o,eEo,tj,oEo,rEo,tEo,o1,zie,aEo,nEo,aj,sEo,lEo,iEo,r1,Wie,dEo,cEo,nj,fEo,mEo,gEo,t1,Qie,hEo,pEo,sj,uEo,_Eo,bEo,a1,Hie,vEo,FEo,lj,TEo,MEo,EEo,n1,Uie,CEo,wEo,ij,AEo,yEo,LEo,s1,Jie,xEo,$Eo,dj,kEo,SEo,REo,l1,Yie,PEo,BEo,cj,IEo,qEo,NEo,i1,Kie,jEo,DEo,fj,GEo,OEo,VEo,d1,Zie,XEo,zEo,mj,WEo,QEo,HEo,c1,ede,UEo,JEo,gj,YEo,KEo,ZEo,f1,ode,eCo,oCo,hj,rCo,tCo,aCo,m1,rde,nCo,sCo,pj,lCo,iCo,dCo,g1,tde,cCo,fCo,uj,mCo,gCo,hCo,h1,ade,pCo,uCo,_j,_Co,bCo,vCo,p1,nde,FCo,TCo,bj,MCo,ECo,CCo,u1,sde,wCo,ACo,vj,yCo,LCo,xCo,_1,lde,$Co,kCo,Fj,SCo,RCo,PCo,b1,ide,BCo,ICo,Tj,qCo,NCo,jCo,v1,DCo,dde,GCo,OCo,cde,VCo,XCo,F1,HIe,Ri,T1,fde,U6,zCo,mde,WCo,UIe,ko,J6,QCo,Pi,HCo,Mj,UCo,JCo,Ej,YCo,KCo,ZCo,Y6,e5o,gde,o5o,r5o,t5o,st,K6,a5o,hde,n5o,s5o,Bi,l5o,pde,i5o,d5o,Cj,c5o,f5o,m5o,M1,g5o,Ze,Z6,h5o,ude,p5o,u5o,ka,_5o,_de,b5o,v5o,bde,F5o,T5o,vde,M5o,E5o,C5o,W,E1,Fde,w5o,A5o,wj,y5o,L5o,x5o,C1,Tde,$5o,k5o,Aj,S5o,R5o,P5o,w1,Mde,B5o,I5o,yj,q5o,N5o,j5o,A1,Ede,D5o,G5o,Lj,O5o,V5o,X5o,y1,Cde,z5o,W5o,xj,Q5o,H5o,U5o,L1,wde,J5o,Y5o,$j,K5o,Z5o,ewo,x1,Ade,owo,rwo,kj,two,awo,nwo,$1,yde,swo,lwo,Sj,iwo,dwo,cwo,k1,Lde,fwo,mwo,Rj,gwo,hwo,pwo,S1,xde,uwo,_wo,Pj,bwo,vwo,Fwo,R1,$de,Two,Mwo,Bj,Ewo,Cwo,wwo,P1,kde,Awo,ywo,Ij,Lwo,xwo,$wo,B1,Sde,kwo,Swo,qj,Rwo,Pwo,Bwo,I1,Rde,Iwo,qwo,Nj,Nwo,jwo,Dwo,q1,Pde,Gwo,Owo,jj,Vwo,Xwo,zwo,N1,Bde,Wwo,Qwo,Dj,Hwo,Uwo,Jwo,j1,Ide,Ywo,Kwo,Gj,Zwo,eAo,oAo,D1,qde,rAo,tAo,Oj,aAo,nAo,sAo,G1,Nde,lAo,iAo,Vj,dAo,cAo,fAo,O1,jde,mAo,gAo,Xj,hAo,pAo,uAo,V1,Dde,_Ao,bAo,zj,vAo,FAo,TAo,X1,Gde,MAo,EAo,Wj,CAo,wAo,AAo,z1,Ode,yAo,LAo,Qj,xAo,$Ao,kAo,W1,Vde,SAo,RAo,Hj,PAo,BAo,IAo,Q1,Xde,qAo,NAo,Uj,jAo,DAo,GAo,H1,zde,OAo,VAo,Jj,XAo,zAo,WAo,U1,Wde,QAo,HAo,Yj,UAo,JAo,YAo,J1,Qde,KAo,ZAo,Kj,e6o,o6o,r6o,Y1,Hde,t6o,a6o,Zj,n6o,s6o,l6o,K1,Ude,i6o,d6o,eD,c6o,f6o,m6o,Z1,Jde,g6o,h6o,Yde,p6o,u6o,_6o,eb,Kde,b6o,v6o,oD,F6o,T6o,M6o,ob,Zde,E6o,C6o,rD,w6o,A6o,y6o,rb,ece,L6o,x6o,tD,$6o,k6o,S6o,tb,oce,R6o,P6o,aD,B6o,I6o,q6o,ab,N6o,rce,j6o,D6o,tce,G6o,O6o,nb,JIe,Ii,sb,ace,ey,V6o,nce,X6o,YIe,So,oy,z6o,qi,W6o,nD,Q6o,H6o,sD,U6o,J6o,Y6o,ry,K6o,sce,Z6o,eyo,oyo,lt,ty,ryo,lce,tyo,ayo,Ni,nyo,ice,syo,lyo,lD,iyo,dyo,cyo,lb,fyo,eo,ay,myo,dce,gyo,hyo,Sa,pyo,cce,uyo,_yo,fce,byo,vyo,mce,Fyo,Tyo,Myo,ue,ib,gce,Eyo,Cyo,iD,wyo,Ayo,yyo,db,hce,Lyo,xyo,dD,$yo,kyo,Syo,cb,pce,Ryo,Pyo,cD,Byo,Iyo,qyo,fb,uce,Nyo,jyo,fD,Dyo,Gyo,Oyo,mb,_ce,Vyo,Xyo,mD,zyo,Wyo,Qyo,gb,bce,Hyo,Uyo,gD,Jyo,Yyo,Kyo,hb,vce,Zyo,eLo,hD,oLo,rLo,tLo,pb,Fce,aLo,nLo,pD,sLo,lLo,iLo,ub,Tce,dLo,cLo,uD,fLo,mLo,gLo,_b,Mce,hLo,pLo,_D,uLo,_Lo,bLo,bb,Ece,vLo,FLo,bD,TLo,MLo,ELo,vb,Cce,CLo,wLo,vD,ALo,yLo,LLo,Fb,wce,xLo,$Lo,FD,kLo,SLo,RLo,Tb,Ace,PLo,BLo,TD,ILo,qLo,NLo,Mb,yce,jLo,DLo,MD,GLo,OLo,VLo,Eb,Lce,XLo,zLo,ED,WLo,QLo,HLo,Cb,ULo,xce,JLo,YLo,$ce,KLo,ZLo,wb,KIe,ji,Ab,kce,ny,e8o,Sce,o8o,ZIe,Ro,sy,r8o,Di,t8o,CD,a8o,n8o,wD,s8o,l8o,i8o,ly,d8o,Rce,c8o,f8o,m8o,it,iy,g8o,Pce,h8o,p8o,Gi,u8o,Bce,_8o,b8o,AD,v8o,F8o,T8o,yb,M8o,oo,dy,E8o,Ice,C8o,w8o,Ra,A8o,qce,y8o,L8o,Nce,x8o,$8o,jce,k8o,S8o,R8o,q,Lb,Dce,P8o,B8o,yD,I8o,q8o,N8o,xb,Gce,j8o,D8o,LD,G8o,O8o,V8o,$b,Oce,X8o,z8o,xD,W8o,Q8o,H8o,kb,Vce,U8o,J8o,$D,Y8o,K8o,Z8o,Sb,Xce,exo,oxo,kD,rxo,txo,axo,Rb,zce,nxo,sxo,SD,lxo,ixo,dxo,Pb,Wce,cxo,fxo,RD,mxo,gxo,hxo,Bb,Qce,pxo,uxo,PD,_xo,bxo,vxo,Ib,Hce,Fxo,Txo,BD,Mxo,Exo,Cxo,qb,Uce,wxo,Axo,ID,yxo,Lxo,xxo,Nb,Jce,$xo,kxo,qD,Sxo,Rxo,Pxo,jb,Yce,Bxo,Ixo,ND,qxo,Nxo,jxo,Db,Kce,Dxo,Gxo,jD,Oxo,Vxo,Xxo,Gb,Zce,zxo,Wxo,DD,Qxo,Hxo,Uxo,Ob,efe,Jxo,Yxo,GD,Kxo,Zxo,e9o,Vb,ofe,o9o,r9o,OD,t9o,a9o,n9o,Xb,rfe,s9o,l9o,VD,i9o,d9o,c9o,zb,tfe,f9o,m9o,XD,g9o,h9o,p9o,Wb,afe,u9o,_9o,zD,b9o,v9o,F9o,Qb,nfe,T9o,M9o,WD,E9o,C9o,w9o,Hb,sfe,A9o,y9o,QD,L9o,x9o,$9o,Ub,lfe,k9o,S9o,HD,R9o,P9o,B9o,Jb,ife,I9o,q9o,UD,N9o,j9o,D9o,Yb,dfe,G9o,O9o,JD,V9o,X9o,z9o,Kb,cfe,W9o,Q9o,YD,H9o,U9o,J9o,Zb,ffe,Y9o,K9o,KD,Z9o,e$o,o$o,e2,mfe,r$o,t$o,ZD,a$o,n$o,s$o,o2,gfe,l$o,i$o,eG,d$o,c$o,f$o,r2,hfe,m$o,g$o,oG,h$o,p$o,u$o,t2,pfe,_$o,b$o,rG,v$o,F$o,T$o,a2,ufe,M$o,E$o,tG,C$o,w$o,A$o,n2,_fe,y$o,L$o,aG,x$o,$$o,k$o,s2,bfe,S$o,R$o,nG,P$o,B$o,I$o,l2,vfe,q$o,N$o,sG,j$o,D$o,G$o,i2,Ffe,O$o,V$o,lG,X$o,z$o,W$o,d2,Tfe,Q$o,H$o,iG,U$o,J$o,Y$o,c2,Mfe,K$o,Z$o,dG,eko,oko,rko,f2,Efe,tko,ako,cG,nko,sko,lko,m2,Cfe,iko,dko,fG,cko,fko,mko,g2,wfe,gko,hko,mG,pko,uko,_ko,h2,Afe,bko,vko,gG,Fko,Tko,Mko,p2,yfe,Eko,Cko,hG,wko,Ako,yko,u2,Lfe,Lko,xko,pG,$ko,kko,Sko,_2,xfe,Rko,Pko,uG,Bko,Iko,qko,b2,$fe,Nko,jko,_G,Dko,Gko,Oko,v2,kfe,Vko,Xko,bG,zko,Wko,Qko,F2,Hko,Sfe,Uko,Jko,Rfe,Yko,Kko,T2,eqe,Oi,M2,Pfe,cy,Zko,Bfe,eSo,oqe,Po,fy,oSo,Vi,rSo,vG,tSo,aSo,FG,nSo,sSo,lSo,my,iSo,Ife,dSo,cSo,fSo,dt,gy,mSo,qfe,gSo,hSo,Xi,pSo,Nfe,uSo,_So,TG,bSo,vSo,FSo,E2,TSo,ro,hy,MSo,jfe,ESo,CSo,Pa,wSo,Dfe,ASo,ySo,Gfe,LSo,xSo,Ofe,$So,kSo,SSo,Y,C2,Vfe,RSo,PSo,MG,BSo,ISo,qSo,w2,Xfe,NSo,jSo,EG,DSo,GSo,OSo,A2,zfe,VSo,XSo,CG,zSo,WSo,QSo,y2,Wfe,HSo,USo,wG,JSo,YSo,KSo,L2,Qfe,ZSo,eRo,AG,oRo,rRo,tRo,x2,Hfe,aRo,nRo,yG,sRo,lRo,iRo,$2,Ufe,dRo,cRo,LG,fRo,mRo,gRo,k2,Jfe,hRo,pRo,xG,uRo,_Ro,bRo,S2,Yfe,vRo,FRo,$G,TRo,MRo,ERo,R2,Kfe,CRo,wRo,kG,ARo,yRo,LRo,P2,Zfe,xRo,$Ro,SG,kRo,SRo,RRo,B2,eme,PRo,BRo,RG,IRo,qRo,NRo,I2,ome,jRo,DRo,PG,GRo,ORo,VRo,q2,rme,XRo,zRo,BG,WRo,QRo,HRo,N2,tme,URo,JRo,IG,YRo,KRo,ZRo,j2,ame,ePo,oPo,qG,rPo,tPo,aPo,D2,nme,nPo,sPo,NG,lPo,iPo,dPo,G2,sme,cPo,fPo,jG,mPo,gPo,hPo,O2,lme,pPo,uPo,DG,_Po,bPo,vPo,V2,ime,FPo,TPo,GG,MPo,EPo,CPo,X2,dme,wPo,APo,OG,yPo,LPo,xPo,z2,cme,$Po,kPo,VG,SPo,RPo,PPo,W2,fme,BPo,IPo,XG,qPo,NPo,jPo,Q2,mme,DPo,GPo,zG,OPo,VPo,XPo,H2,gme,zPo,WPo,WG,QPo,HPo,UPo,U2,hme,JPo,YPo,QG,KPo,ZPo,eBo,J2,pme,oBo,rBo,HG,tBo,aBo,nBo,Y2,ume,sBo,lBo,UG,iBo,dBo,cBo,K2,_me,fBo,mBo,JG,gBo,hBo,pBo,Z2,uBo,bme,_Bo,bBo,vme,vBo,FBo,ev,rqe,zi,ov,Fme,py,TBo,Tme,MBo,tqe,Bo,uy,EBo,Wi,CBo,YG,wBo,ABo,KG,yBo,LBo,xBo,_y,$Bo,Mme,kBo,SBo,RBo,ct,by,PBo,Eme,BBo,IBo,Qi,qBo,Cme,NBo,jBo,ZG,DBo,GBo,OBo,rv,VBo,to,vy,XBo,wme,zBo,WBo,Ba,QBo,Ame,HBo,UBo,yme,JBo,YBo,Lme,KBo,ZBo,eIo,Yr,tv,xme,oIo,rIo,eO,tIo,aIo,nIo,av,$me,sIo,lIo,oO,iIo,dIo,cIo,nv,kme,fIo,mIo,rO,gIo,hIo,pIo,sv,Sme,uIo,_Io,tO,bIo,vIo,FIo,lv,Rme,TIo,MIo,aO,EIo,CIo,wIo,iv,AIo,Pme,yIo,LIo,Bme,xIo,$Io,dv,aqe,Hi,cv,Ime,Fy,kIo,qme,SIo,nqe,Io,Ty,RIo,Ui,PIo,nO,BIo,IIo,sO,qIo,NIo,jIo,My,DIo,Nme,GIo,OIo,VIo,ft,Ey,XIo,jme,zIo,WIo,Ji,QIo,Dme,HIo,UIo,lO,JIo,YIo,KIo,fv,ZIo,ao,Cy,eqo,Gme,oqo,rqo,Ia,tqo,Ome,aqo,nqo,Vme,sqo,lqo,Xme,iqo,dqo,cqo,U,mv,zme,fqo,mqo,iO,gqo,hqo,pqo,gv,Wme,uqo,_qo,dO,bqo,vqo,Fqo,hv,Qme,Tqo,Mqo,cO,Eqo,Cqo,wqo,pv,Hme,Aqo,yqo,fO,Lqo,xqo,$qo,uv,Ume,kqo,Sqo,mO,Rqo,Pqo,Bqo,_v,Jme,Iqo,qqo,gO,Nqo,jqo,Dqo,bv,Yme,Gqo,Oqo,hO,Vqo,Xqo,zqo,vv,Kme,Wqo,Qqo,pO,Hqo,Uqo,Jqo,Fv,Zme,Yqo,Kqo,uO,Zqo,eNo,oNo,Tv,ege,rNo,tNo,_O,aNo,nNo,sNo,Mv,oge,lNo,iNo,bO,dNo,cNo,fNo,Ev,rge,mNo,gNo,vO,hNo,pNo,uNo,Cv,tge,_No,bNo,FO,vNo,FNo,TNo,wv,age,MNo,ENo,TO,CNo,wNo,ANo,Av,nge,yNo,LNo,MO,xNo,$No,kNo,yv,sge,SNo,RNo,EO,PNo,BNo,INo,Lv,lge,qNo,NNo,CO,jNo,DNo,GNo,xv,ige,ONo,VNo,wO,XNo,zNo,WNo,$v,dge,QNo,HNo,AO,UNo,JNo,YNo,kv,cge,KNo,ZNo,yO,ejo,ojo,rjo,Sv,fge,tjo,ajo,LO,njo,sjo,ljo,Rv,mge,ijo,djo,xO,cjo,fjo,mjo,Pv,gge,gjo,hjo,$O,pjo,ujo,_jo,Bv,hge,bjo,vjo,kO,Fjo,Tjo,Mjo,Iv,pge,Ejo,Cjo,SO,wjo,Ajo,yjo,qv,uge,Ljo,xjo,RO,$jo,kjo,Sjo,Nv,_ge,Rjo,Pjo,PO,Bjo,Ijo,qjo,jv,bge,Njo,jjo,BO,Djo,Gjo,Ojo,Dv,vge,Vjo,Xjo,IO,zjo,Wjo,Qjo,Gv,Fge,Hjo,Ujo,qO,Jjo,Yjo,Kjo,Ov,Tge,Zjo,eDo,NO,oDo,rDo,tDo,Vv,Mge,aDo,nDo,jO,sDo,lDo,iDo,Xv,Ege,dDo,cDo,DO,fDo,mDo,gDo,zv,hDo,Cge,pDo,uDo,wge,_Do,bDo,Wv,sqe,Yi,Qv,Age,wy,vDo,yge,FDo,lqe,qo,Ay,TDo,Ki,MDo,GO,EDo,CDo,OO,wDo,ADo,yDo,yy,LDo,Lge,xDo,$Do,kDo,mt,Ly,SDo,xge,RDo,PDo,Zi,BDo,$ge,IDo,qDo,VO,NDo,jDo,DDo,Hv,GDo,no,xy,ODo,kge,VDo,XDo,qa,zDo,Sge,WDo,QDo,Rge,HDo,UDo,Pge,JDo,YDo,KDo,V,Uv,Bge,ZDo,eGo,XO,oGo,rGo,tGo,Jv,Ige,aGo,nGo,zO,sGo,lGo,iGo,Yv,qge,dGo,cGo,WO,fGo,mGo,gGo,Kv,Nge,hGo,pGo,QO,uGo,_Go,bGo,Zv,jge,vGo,FGo,HO,TGo,MGo,EGo,e3,Dge,CGo,wGo,UO,AGo,yGo,LGo,o3,Gge,xGo,$Go,JO,kGo,SGo,RGo,r3,Oge,PGo,BGo,YO,IGo,qGo,NGo,t3,Vge,jGo,DGo,KO,GGo,OGo,VGo,a3,Xge,XGo,zGo,ZO,WGo,QGo,HGo,n3,zge,UGo,JGo,eV,YGo,KGo,ZGo,s3,Wge,eOo,oOo,oV,rOo,tOo,aOo,l3,Qge,nOo,sOo,rV,lOo,iOo,dOo,i3,Hge,cOo,fOo,tV,mOo,gOo,hOo,d3,Uge,pOo,uOo,aV,_Oo,bOo,vOo,c3,Jge,FOo,TOo,nV,MOo,EOo,COo,f3,Yge,wOo,AOo,sV,yOo,LOo,xOo,m3,Kge,$Oo,kOo,lV,SOo,ROo,POo,g3,Zge,BOo,IOo,iV,qOo,NOo,jOo,h3,ehe,DOo,GOo,dV,OOo,VOo,XOo,p3,ohe,zOo,WOo,cV,QOo,HOo,UOo,u3,rhe,JOo,YOo,fV,KOo,ZOo,eVo,_3,the,oVo,rVo,mV,tVo,aVo,nVo,b3,ahe,sVo,lVo,gV,iVo,dVo,cVo,v3,nhe,fVo,mVo,hV,gVo,hVo,pVo,F3,she,uVo,_Vo,pV,bVo,vVo,FVo,T3,lhe,TVo,MVo,uV,EVo,CVo,wVo,M3,ihe,AVo,yVo,_V,LVo,xVo,$Vo,E3,dhe,kVo,SVo,bV,RVo,PVo,BVo,C3,che,IVo,qVo,vV,NVo,jVo,DVo,w3,fhe,GVo,OVo,FV,VVo,XVo,zVo,A3,mhe,WVo,QVo,TV,HVo,UVo,JVo,y3,ghe,YVo,KVo,MV,ZVo,eXo,oXo,L3,hhe,rXo,tXo,EV,aXo,nXo,sXo,x3,phe,lXo,iXo,CV,dXo,cXo,fXo,$3,uhe,mXo,gXo,wV,hXo,pXo,uXo,k3,_he,_Xo,bXo,AV,vXo,FXo,TXo,S3,bhe,MXo,EXo,yV,CXo,wXo,AXo,R3,vhe,yXo,LXo,LV,xXo,$Xo,kXo,P3,SXo,Fhe,RXo,PXo,The,BXo,IXo,B3,iqe,ed,I3,Mhe,$y,qXo,Ehe,NXo,dqe,No,ky,jXo,od,DXo,xV,GXo,OXo,$V,VXo,XXo,zXo,Sy,WXo,Che,QXo,HXo,UXo,gt,Ry,JXo,whe,YXo,KXo,rd,ZXo,Ahe,ezo,ozo,kV,rzo,tzo,azo,q3,nzo,so,Py,szo,yhe,lzo,izo,Na,dzo,Lhe,czo,fzo,xhe,mzo,gzo,$he,hzo,pzo,uzo,khe,N3,She,_zo,bzo,SV,vzo,Fzo,Tzo,j3,Mzo,Rhe,Ezo,Czo,Phe,wzo,Azo,D3,cqe,td,G3,Bhe,By,yzo,Ihe,Lzo,fqe,jo,Iy,xzo,ad,$zo,RV,kzo,Szo,PV,Rzo,Pzo,Bzo,qy,Izo,qhe,qzo,Nzo,jzo,ht,Ny,Dzo,Nhe,Gzo,Ozo,nd,Vzo,jhe,Xzo,zzo,BV,Wzo,Qzo,Hzo,O3,Uzo,lo,jy,Jzo,Dhe,Yzo,Kzo,ja,Zzo,Ghe,eWo,oWo,Ohe,rWo,tWo,Vhe,aWo,nWo,sWo,Fe,V3,Xhe,lWo,iWo,IV,dWo,cWo,fWo,X3,zhe,mWo,gWo,qV,hWo,pWo,uWo,z3,Whe,_Wo,bWo,NV,vWo,FWo,TWo,Ps,Qhe,MWo,EWo,jV,CWo,wWo,DV,AWo,yWo,LWo,W3,Hhe,xWo,$Wo,GV,kWo,SWo,RWo,pt,Uhe,PWo,BWo,OV,IWo,qWo,VV,NWo,jWo,XV,DWo,GWo,OWo,Q3,Jhe,VWo,XWo,zV,zWo,WWo,QWo,H3,Yhe,HWo,UWo,WV,JWo,YWo,KWo,U3,Khe,ZWo,eQo,QV,oQo,rQo,tQo,J3,Zhe,aQo,nQo,HV,sQo,lQo,iQo,Y3,epe,dQo,cQo,UV,fQo,mQo,gQo,K3,ope,hQo,pQo,JV,uQo,_Qo,bQo,Z3,rpe,vQo,FQo,YV,TQo,MQo,EQo,eF,CQo,tpe,wQo,AQo,ape,yQo,LQo,oF,mqe,sd,rF,npe,Dy,xQo,spe,$Qo,gqe,Do,Gy,kQo,ld,SQo,KV,RQo,PQo,ZV,BQo,IQo,qQo,Oy,NQo,lpe,jQo,DQo,GQo,ut,Vy,OQo,ipe,VQo,XQo,id,zQo,dpe,WQo,QQo,eX,HQo,UQo,JQo,tF,YQo,io,Xy,KQo,cpe,ZQo,eHo,Da,oHo,fpe,rHo,tHo,mpe,aHo,nHo,gpe,sHo,lHo,iHo,hpe,aF,ppe,dHo,cHo,oX,fHo,mHo,gHo,nF,hHo,upe,pHo,uHo,_pe,_Ho,bHo,sF,hqe,dd,lF,bpe,zy,vHo,vpe,FHo,pqe,Go,Wy,THo,cd,MHo,rX,EHo,CHo,tX,wHo,AHo,yHo,Qy,LHo,Fpe,xHo,$Ho,kHo,_t,Hy,SHo,Tpe,RHo,PHo,fd,BHo,Mpe,IHo,qHo,aX,NHo,jHo,DHo,iF,GHo,co,Uy,OHo,Epe,VHo,XHo,Ga,zHo,Cpe,WHo,QHo,wpe,HHo,UHo,Ape,JHo,YHo,KHo,ke,dF,ype,ZHo,eUo,nX,oUo,rUo,tUo,cF,Lpe,aUo,nUo,sX,sUo,lUo,iUo,fF,xpe,dUo,cUo,lX,fUo,mUo,gUo,mF,$pe,hUo,pUo,iX,uUo,_Uo,bUo,gF,kpe,vUo,FUo,dX,TUo,MUo,EUo,hF,Spe,CUo,wUo,cX,AUo,yUo,LUo,pF,Rpe,xUo,$Uo,fX,kUo,SUo,RUo,uF,Ppe,PUo,BUo,mX,IUo,qUo,NUo,_F,Bpe,jUo,DUo,gX,GUo,OUo,VUo,bF,XUo,Ipe,zUo,WUo,qpe,QUo,HUo,vF,uqe,md,FF,Npe,Jy,UUo,jpe,JUo,_qe,Oo,Yy,YUo,gd,KUo,hX,ZUo,eJo,pX,oJo,rJo,tJo,Ky,aJo,Dpe,nJo,sJo,lJo,bt,Zy,iJo,Gpe,dJo,cJo,hd,fJo,Ope,mJo,gJo,uX,hJo,pJo,uJo,TF,_Jo,fo,eL,bJo,Vpe,vJo,FJo,Oa,TJo,Xpe,MJo,EJo,zpe,CJo,wJo,Wpe,AJo,yJo,LJo,Kr,MF,Qpe,xJo,$Jo,_X,kJo,SJo,RJo,EF,Hpe,PJo,BJo,bX,IJo,qJo,NJo,CF,Upe,jJo,DJo,vX,GJo,OJo,VJo,wF,Jpe,XJo,zJo,FX,WJo,QJo,HJo,AF,Ype,UJo,JJo,TX,YJo,KJo,ZJo,yF,eYo,Kpe,oYo,rYo,Zpe,tYo,aYo,LF,bqe,pd,xF,eue,oL,nYo,oue,sYo,vqe,Vo,rL,lYo,ud,iYo,MX,dYo,cYo,EX,fYo,mYo,gYo,tL,hYo,rue,pYo,uYo,_Yo,vt,aL,bYo,tue,vYo,FYo,_d,TYo,aue,MYo,EYo,CX,CYo,wYo,AYo,$F,yYo,mo,nL,LYo,nue,xYo,$Yo,Va,kYo,sue,SYo,RYo,lue,PYo,BYo,iue,IYo,qYo,NYo,Se,kF,due,jYo,DYo,wX,GYo,OYo,VYo,SF,cue,XYo,zYo,AX,WYo,QYo,HYo,RF,fue,UYo,JYo,yX,YYo,KYo,ZYo,PF,mue,eKo,oKo,LX,rKo,tKo,aKo,BF,gue,nKo,sKo,xX,lKo,iKo,dKo,IF,hue,cKo,fKo,$X,mKo,gKo,hKo,qF,pue,pKo,uKo,kX,_Ko,bKo,vKo,NF,uue,FKo,TKo,SX,MKo,EKo,CKo,jF,_ue,wKo,AKo,RX,yKo,LKo,xKo,DF,$Ko,bue,kKo,SKo,vue,RKo,PKo,GF,Fqe,bd,OF,Fue,sL,BKo,Tue,IKo,Tqe,Xo,lL,qKo,vd,NKo,PX,jKo,DKo,BX,GKo,OKo,VKo,iL,XKo,Mue,zKo,WKo,QKo,Ft,dL,HKo,Eue,UKo,JKo,Fd,YKo,Cue,KKo,ZKo,IX,eZo,oZo,rZo,VF,tZo,go,cL,aZo,wue,nZo,sZo,Xa,lZo,Aue,iZo,dZo,yue,cZo,fZo,Lue,mZo,gZo,hZo,fL,XF,xue,pZo,uZo,qX,_Zo,bZo,vZo,zF,$ue,FZo,TZo,NX,MZo,EZo,CZo,WF,wZo,kue,AZo,yZo,Sue,LZo,xZo,QF,Mqe,Td,HF,Rue,mL,$Zo,Pue,kZo,Eqe,zo,gL,SZo,Md,RZo,jX,PZo,BZo,DX,IZo,qZo,NZo,hL,jZo,Bue,DZo,GZo,OZo,Tt,pL,VZo,Iue,XZo,zZo,Ed,WZo,que,QZo,HZo,GX,UZo,JZo,YZo,UF,KZo,ho,uL,ZZo,Nue,eer,oer,za,rer,jue,ter,aer,Due,ner,ser,Gue,ler,ier,der,Zr,JF,Oue,cer,fer,OX,mer,ger,her,YF,Vue,per,uer,VX,_er,ber,ver,KF,Xue,Fer,Ter,XX,Mer,Eer,Cer,ZF,zue,wer,Aer,zX,yer,Ler,xer,e0,Wue,$er,ker,WX,Ser,Rer,Per,o0,Ber,Que,Ier,qer,Hue,Ner,jer,r0,Cqe,Cd,t0,Uue,_L,Der,Jue,Ger,wqe,Wo,bL,Oer,wd,Ver,QX,Xer,zer,HX,Wer,Qer,Her,vL,Uer,Yue,Jer,Yer,Ker,Mt,FL,Zer,Kue,eor,oor,Ad,ror,Zue,tor,aor,UX,nor,sor,lor,a0,ior,po,TL,dor,e_e,cor,mor,Wa,gor,o_e,hor,por,r_e,uor,_or,t_e,bor,vor,For,yd,n0,a_e,Tor,Mor,JX,Eor,Cor,wor,s0,n_e,Aor,yor,YX,Lor,xor,$or,l0,s_e,kor,Sor,KX,Ror,Por,Bor,i0,Ior,l_e,qor,Nor,i_e,jor,Dor,d0,Aqe,Ld,c0,d_e,ML,Gor,c_e,Oor,yqe,Qo,EL,Vor,xd,Xor,ZX,zor,Wor,ez,Qor,Hor,Uor,CL,Jor,f_e,Yor,Kor,Zor,Et,wL,err,m_e,orr,rrr,$d,trr,g_e,arr,nrr,oz,srr,lrr,irr,f0,drr,uo,AL,crr,h_e,frr,mrr,Qa,grr,p_e,hrr,prr,u_e,urr,_rr,__e,brr,vrr,Frr,yL,m0,b_e,Trr,Mrr,rz,Err,Crr,wrr,g0,v_e,Arr,yrr,tz,Lrr,xrr,$rr,h0,krr,F_e,Srr,Rrr,T_e,Prr,Brr,p0,Lqe,kd,u0,M_e,LL,Irr,E_e,qrr,xqe,Ho,xL,Nrr,Sd,jrr,az,Drr,Grr,nz,Orr,Vrr,Xrr,$L,zrr,C_e,Wrr,Qrr,Hrr,Ct,kL,Urr,w_e,Jrr,Yrr,Rd,Krr,A_e,Zrr,etr,sz,otr,rtr,ttr,_0,atr,_o,SL,ntr,y_e,str,ltr,Ha,itr,L_e,dtr,ctr,x_e,ftr,mtr,$_e,gtr,htr,ptr,k_e,b0,S_e,utr,_tr,lz,btr,vtr,Ftr,v0,Ttr,R_e,Mtr,Etr,P_e,Ctr,wtr,F0,$qe,Pd,T0,B_e,RL,Atr,I_e,ytr,kqe,Uo,PL,Ltr,Bd,xtr,iz,$tr,ktr,dz,Str,Rtr,Ptr,BL,Btr,q_e,Itr,qtr,Ntr,wt,IL,jtr,N_e,Dtr,Gtr,Id,Otr,j_e,Vtr,Xtr,cz,ztr,Wtr,Qtr,M0,Htr,bo,qL,Utr,D_e,Jtr,Ytr,Ua,Ktr,G_e,Ztr,ear,O_e,oar,rar,V_e,tar,aar,nar,Ja,E0,X_e,sar,lar,fz,iar,dar,car,C0,z_e,far,mar,mz,gar,har,par,w0,W_e,uar,_ar,gz,bar,Far,Tar,A0,Q_e,Mar,Ear,hz,Car,war,Aar,y0,yar,H_e,Lar,xar,U_e,$ar,kar,L0,Sqe,qd,x0,J_e,NL,Sar,Y_e,Rar,Rqe,Jo,jL,Par,Nd,Bar,pz,Iar,qar,uz,Nar,jar,Dar,DL,Gar,K_e,Oar,Var,Xar,At,GL,zar,Z_e,War,Qar,jd,Har,e1e,Uar,Jar,_z,Yar,Kar,Zar,$0,enr,vo,OL,onr,o1e,rnr,tnr,Ya,anr,r1e,nnr,snr,t1e,lnr,inr,a1e,dnr,cnr,fnr,n1e,k0,s1e,mnr,gnr,bz,hnr,pnr,unr,S0,_nr,l1e,bnr,vnr,i1e,Fnr,Tnr,R0,Pqe,Dd,P0,d1e,VL,Mnr,c1e,Enr,Bqe,Yo,XL,Cnr,Gd,wnr,vz,Anr,ynr,Fz,Lnr,xnr,$nr,zL,knr,f1e,Snr,Rnr,Pnr,yt,WL,Bnr,m1e,Inr,qnr,Od,Nnr,g1e,jnr,Dnr,Tz,Gnr,Onr,Vnr,B0,Xnr,wr,QL,znr,h1e,Wnr,Qnr,Ka,Hnr,p1e,Unr,Jnr,u1e,Ynr,Knr,_1e,Znr,esr,osr,N,I0,b1e,rsr,tsr,Mz,asr,nsr,ssr,q0,v1e,lsr,isr,Ez,dsr,csr,fsr,N0,F1e,msr,gsr,Cz,hsr,psr,usr,j0,T1e,_sr,bsr,wz,vsr,Fsr,Tsr,D0,M1e,Msr,Esr,Az,Csr,wsr,Asr,G0,E1e,ysr,Lsr,yz,xsr,$sr,ksr,O0,C1e,Ssr,Rsr,Lz,Psr,Bsr,Isr,V0,w1e,qsr,Nsr,xz,jsr,Dsr,Gsr,X0,A1e,Osr,Vsr,$z,Xsr,zsr,Wsr,z0,y1e,Qsr,Hsr,kz,Usr,Jsr,Ysr,W0,L1e,Ksr,Zsr,Sz,elr,olr,rlr,Q0,x1e,tlr,alr,Rz,nlr,slr,llr,H0,$1e,ilr,dlr,Pz,clr,flr,mlr,U0,k1e,glr,hlr,Bz,plr,ulr,_lr,J0,S1e,blr,vlr,Iz,Flr,Tlr,Mlr,Y0,R1e,Elr,Clr,qz,wlr,Alr,ylr,K0,P1e,Llr,xlr,Nz,$lr,klr,Slr,Bs,B1e,Rlr,Plr,jz,Blr,Ilr,Dz,qlr,Nlr,jlr,Z0,I1e,Dlr,Glr,Gz,Olr,Vlr,Xlr,eT,q1e,zlr,Wlr,Oz,Qlr,Hlr,Ulr,oT,N1e,Jlr,Ylr,Vz,Klr,Zlr,eir,rT,j1e,oir,rir,Xz,tir,air,nir,tT,D1e,sir,lir,zz,iir,dir,cir,aT,G1e,fir,mir,Wz,gir,hir,pir,nT,O1e,uir,_ir,Qz,bir,vir,Fir,sT,V1e,Tir,Mir,Hz,Eir,Cir,wir,lT,X1e,Air,yir,Uz,Lir,xir,$ir,iT,z1e,kir,Sir,Jz,Rir,Pir,Bir,dT,W1e,Iir,qir,Yz,Nir,jir,Dir,cT,Q1e,Gir,Oir,Kz,Vir,Xir,zir,fT,H1e,Wir,Qir,Zz,Hir,Uir,Jir,mT,U1e,Yir,Kir,eW,Zir,edr,odr,gT,J1e,rdr,tdr,oW,adr,ndr,sdr,hT,Y1e,ldr,idr,rW,ddr,cdr,fdr,pT,K1e,mdr,gdr,tW,hdr,pdr,udr,uT,Z1e,_dr,bdr,aW,vdr,Fdr,Tdr,_T,ebe,Mdr,Edr,nW,Cdr,wdr,Adr,bT,obe,ydr,Ldr,sW,xdr,$dr,kdr,vT,rbe,Sdr,Rdr,lW,Pdr,Bdr,Idr,FT,tbe,qdr,Ndr,iW,jdr,Ddr,Gdr,TT,abe,Odr,Vdr,dW,Xdr,zdr,Wdr,MT,nbe,Qdr,Hdr,cW,Udr,Jdr,Ydr,ET,sbe,Kdr,Zdr,fW,ecr,ocr,rcr,CT,lbe,tcr,acr,mW,ncr,scr,lcr,wT,ibe,icr,dcr,gW,ccr,fcr,mcr,AT,dbe,gcr,hcr,hW,pcr,ucr,_cr,yT,Iqe,Vd,LT,cbe,HL,bcr,fbe,vcr,qqe,Ko,UL,Fcr,Xd,Tcr,pW,Mcr,Ecr,uW,Ccr,wcr,Acr,JL,ycr,mbe,Lcr,xcr,$cr,Lt,YL,kcr,gbe,Scr,Rcr,zd,Pcr,hbe,Bcr,Icr,_W,qcr,Ncr,jcr,xT,Dcr,Ar,KL,Gcr,pbe,Ocr,Vcr,Za,Xcr,ube,zcr,Wcr,_be,Qcr,Hcr,bbe,Ucr,Jcr,Ycr,se,$T,vbe,Kcr,Zcr,bW,efr,ofr,rfr,kT,Fbe,tfr,afr,vW,nfr,sfr,lfr,ST,Tbe,ifr,dfr,FW,cfr,ffr,mfr,RT,Mbe,gfr,hfr,TW,pfr,ufr,_fr,PT,Ebe,bfr,vfr,MW,Ffr,Tfr,Mfr,BT,Cbe,Efr,Cfr,EW,wfr,Afr,yfr,IT,wbe,Lfr,xfr,CW,$fr,kfr,Sfr,qT,Abe,Rfr,Pfr,wW,Bfr,Ifr,qfr,NT,ybe,Nfr,jfr,AW,Dfr,Gfr,Ofr,jT,Lbe,Vfr,Xfr,yW,zfr,Wfr,Qfr,DT,xbe,Hfr,Ufr,LW,Jfr,Yfr,Kfr,GT,$be,Zfr,emr,xW,omr,rmr,tmr,OT,kbe,amr,nmr,$W,smr,lmr,imr,VT,Sbe,dmr,cmr,kW,fmr,mmr,gmr,XT,Rbe,hmr,pmr,SW,umr,_mr,bmr,zT,Pbe,vmr,Fmr,RW,Tmr,Mmr,Emr,WT,Bbe,Cmr,wmr,PW,Amr,ymr,Lmr,QT,Ibe,xmr,$mr,BW,kmr,Smr,Rmr,HT,qbe,Pmr,Bmr,IW,Imr,qmr,Nmr,UT,Nbe,jmr,Dmr,qW,Gmr,Omr,Vmr,JT,jbe,Xmr,zmr,NW,Wmr,Qmr,Hmr,YT,Dbe,Umr,Jmr,jW,Ymr,Kmr,Zmr,KT,Gbe,egr,ogr,DW,rgr,tgr,agr,ZT,Nqe,Wd,e7,Obe,ZL,ngr,Vbe,sgr,jqe,Zo,e8,lgr,Qd,igr,GW,dgr,cgr,OW,fgr,mgr,ggr,o8,hgr,Xbe,pgr,ugr,_gr,xt,r8,bgr,zbe,vgr,Fgr,Hd,Tgr,Wbe,Mgr,Egr,VW,Cgr,wgr,Agr,o7,ygr,yr,t8,Lgr,Qbe,xgr,$gr,en,kgr,Hbe,Sgr,Rgr,Ube,Pgr,Bgr,Jbe,Igr,qgr,Ngr,Te,r7,Ybe,jgr,Dgr,XW,Ggr,Ogr,Vgr,t7,Kbe,Xgr,zgr,zW,Wgr,Qgr,Hgr,a7,Zbe,Ugr,Jgr,WW,Ygr,Kgr,Zgr,n7,e2e,ehr,ohr,QW,rhr,thr,ahr,s7,o2e,nhr,shr,HW,lhr,ihr,dhr,l7,r2e,chr,fhr,UW,mhr,ghr,hhr,i7,t2e,phr,uhr,JW,_hr,bhr,vhr,d7,a2e,Fhr,Thr,YW,Mhr,Ehr,Chr,c7,n2e,whr,Ahr,KW,yhr,Lhr,xhr,f7,s2e,$hr,khr,ZW,Shr,Rhr,Phr,m7,l2e,Bhr,Ihr,eQ,qhr,Nhr,jhr,g7,i2e,Dhr,Ghr,oQ,Ohr,Vhr,Xhr,h7,Dqe,Ud,p7,d2e,a8,zhr,c2e,Whr,Gqe,er,n8,Qhr,Jd,Hhr,rQ,Uhr,Jhr,tQ,Yhr,Khr,Zhr,s8,epr,f2e,opr,rpr,tpr,$t,l8,apr,m2e,npr,spr,Yd,lpr,g2e,ipr,dpr,aQ,cpr,fpr,mpr,u7,gpr,Lr,i8,hpr,h2e,ppr,upr,on,_pr,p2e,bpr,vpr,u2e,Fpr,Tpr,_2e,Mpr,Epr,Cpr,rn,_7,b2e,wpr,Apr,nQ,ypr,Lpr,xpr,b7,v2e,$pr,kpr,sQ,Spr,Rpr,Ppr,v7,F2e,Bpr,Ipr,lQ,qpr,Npr,jpr,F7,T2e,Dpr,Gpr,iQ,Opr,Vpr,Xpr,T7,Oqe,Kd,M7,M2e,d8,zpr,E2e,Wpr,Vqe,or,c8,Qpr,Zd,Hpr,dQ,Upr,Jpr,cQ,Ypr,Kpr,Zpr,f8,eur,C2e,our,rur,tur,kt,m8,aur,w2e,nur,sur,ec,lur,A2e,iur,dur,fQ,cur,fur,mur,E7,gur,xr,g8,hur,y2e,pur,uur,tn,_ur,L2e,bur,vur,x2e,Fur,Tur,$2e,Mur,Eur,Cur,ie,C7,k2e,wur,Aur,mQ,yur,Lur,xur,w7,S2e,$ur,kur,gQ,Sur,Rur,Pur,A7,R2e,Bur,Iur,hQ,qur,Nur,jur,y7,P2e,Dur,Gur,pQ,Our,Vur,Xur,L7,B2e,zur,Wur,uQ,Qur,Hur,Uur,x7,I2e,Jur,Yur,_Q,Kur,Zur,e_r,$7,q2e,o_r,r_r,bQ,t_r,a_r,n_r,k7,N2e,s_r,l_r,vQ,i_r,d_r,c_r,S7,j2e,f_r,m_r,FQ,g_r,h_r,p_r,R7,D2e,u_r,__r,TQ,b_r,v_r,F_r,P7,G2e,T_r,M_r,MQ,E_r,C_r,w_r,B7,O2e,A_r,y_r,EQ,L_r,x_r,$_r,I7,V2e,k_r,S_r,CQ,R_r,P_r,B_r,q7,X2e,I_r,q_r,wQ,N_r,j_r,D_r,N7,z2e,G_r,O_r,AQ,V_r,X_r,z_r,j7,W2e,W_r,Q_r,yQ,H_r,U_r,J_r,D7,Q2e,Y_r,K_r,LQ,Z_r,e1r,o1r,G7,H2e,r1r,t1r,xQ,a1r,n1r,s1r,O7,U2e,l1r,i1r,$Q,d1r,c1r,f1r,V7,J2e,m1r,g1r,kQ,h1r,p1r,u1r,X7,Xqe,oc,z7,Y2e,h8,_1r,K2e,b1r,zqe,rr,p8,v1r,rc,F1r,SQ,T1r,M1r,RQ,E1r,C1r,w1r,u8,A1r,Z2e,y1r,L1r,x1r,St,_8,$1r,eve,k1r,S1r,tc,R1r,ove,P1r,B1r,PQ,I1r,q1r,N1r,W7,j1r,$r,b8,D1r,rve,G1r,O1r,an,V1r,tve,X1r,z1r,ave,W1r,Q1r,nve,H1r,U1r,J1r,ye,Q7,sve,Y1r,K1r,BQ,Z1r,ebr,obr,H7,lve,rbr,tbr,IQ,abr,nbr,sbr,U7,ive,lbr,ibr,qQ,dbr,cbr,fbr,J7,dve,mbr,gbr,NQ,hbr,pbr,ubr,Y7,cve,_br,bbr,jQ,vbr,Fbr,Tbr,K7,fve,Mbr,Ebr,DQ,Cbr,wbr,Abr,Z7,mve,ybr,Lbr,GQ,xbr,$br,kbr,eM,gve,Sbr,Rbr,OQ,Pbr,Bbr,Ibr,oM,hve,qbr,Nbr,VQ,jbr,Dbr,Gbr,rM,pve,Obr,Vbr,XQ,Xbr,zbr,Wbr,tM,Wqe,ac,aM,uve,v8,Qbr,_ve,Hbr,Qqe,tr,F8,Ubr,nc,Jbr,zQ,Ybr,Kbr,WQ,Zbr,e2r,o2r,T8,r2r,bve,t2r,a2r,n2r,Rt,M8,s2r,vve,l2r,i2r,sc,d2r,Fve,c2r,f2r,QQ,m2r,g2r,h2r,nM,p2r,kr,E8,u2r,Tve,_2r,b2r,nn,v2r,Mve,F2r,T2r,Eve,M2r,E2r,Cve,C2r,w2r,A2r,ee,sM,wve,y2r,L2r,HQ,x2r,$2r,k2r,lM,Ave,S2r,R2r,UQ,P2r,B2r,I2r,iM,yve,q2r,N2r,JQ,j2r,D2r,G2r,dM,Lve,O2r,V2r,YQ,X2r,z2r,W2r,cM,xve,Q2r,H2r,KQ,U2r,J2r,Y2r,fM,$ve,K2r,Z2r,ZQ,evr,ovr,rvr,mM,kve,tvr,avr,eH,nvr,svr,lvr,gM,Sve,ivr,dvr,oH,cvr,fvr,mvr,hM,Rve,gvr,hvr,rH,pvr,uvr,_vr,pM,Pve,bvr,vvr,tH,Fvr,Tvr,Mvr,uM,Bve,Evr,Cvr,aH,wvr,Avr,yvr,_M,Ive,Lvr,xvr,nH,$vr,kvr,Svr,bM,qve,Rvr,Pvr,sH,Bvr,Ivr,qvr,vM,Nve,Nvr,jvr,lH,Dvr,Gvr,Ovr,FM,jve,Vvr,Xvr,iH,zvr,Wvr,Qvr,TM,Dve,Hvr,Uvr,dH,Jvr,Yvr,Kvr,MM,Gve,Zvr,e3r,cH,o3r,r3r,t3r,EM,Ove,a3r,n3r,fH,s3r,l3r,i3r,CM,Vve,d3r,c3r,mH,f3r,m3r,g3r,wM,Xve,h3r,p3r,gH,u3r,_3r,b3r,AM,zve,v3r,F3r,hH,T3r,M3r,E3r,yM,Wve,C3r,w3r,pH,A3r,y3r,L3r,LM,Qve,x3r,$3r,uH,k3r,S3r,R3r,xM,Hve,P3r,B3r,_H,I3r,q3r,N3r,$M,Uve,j3r,D3r,bH,G3r,O3r,V3r,kM,Jve,X3r,z3r,vH,W3r,Q3r,H3r,SM,Hqe,lc,RM,Yve,C8,U3r,Kve,J3r,Uqe,ar,w8,Y3r,ic,K3r,FH,Z3r,eFr,TH,oFr,rFr,tFr,A8,aFr,Zve,nFr,sFr,lFr,Pt,y8,iFr,e3e,dFr,cFr,dc,fFr,o3e,mFr,gFr,MH,hFr,pFr,uFr,PM,_Fr,Sr,L8,bFr,r3e,vFr,FFr,sn,TFr,t3e,MFr,EFr,a3e,CFr,wFr,n3e,AFr,yFr,LFr,he,BM,s3e,xFr,$Fr,EH,kFr,SFr,RFr,IM,l3e,PFr,BFr,CH,IFr,qFr,NFr,qM,i3e,jFr,DFr,wH,GFr,OFr,VFr,NM,d3e,XFr,zFr,AH,WFr,QFr,HFr,jM,c3e,UFr,JFr,yH,YFr,KFr,ZFr,DM,f3e,e0r,o0r,LH,r0r,t0r,a0r,GM,m3e,n0r,s0r,xH,l0r,i0r,d0r,OM,g3e,c0r,f0r,$H,m0r,g0r,h0r,VM,h3e,p0r,u0r,kH,_0r,b0r,v0r,XM,p3e,F0r,T0r,SH,M0r,E0r,C0r,zM,u3e,w0r,A0r,RH,y0r,L0r,x0r,WM,_3e,$0r,k0r,PH,S0r,R0r,P0r,QM,b3e,B0r,I0r,BH,q0r,N0r,j0r,HM,v3e,D0r,G0r,IH,O0r,V0r,X0r,UM,F3e,z0r,W0r,qH,Q0r,H0r,U0r,JM,T3e,J0r,Y0r,NH,K0r,Z0r,eTr,YM,M3e,oTr,rTr,jH,tTr,aTr,nTr,KM,Jqe,cc,ZM,E3e,x8,sTr,C3e,lTr,Yqe,nr,$8,iTr,fc,dTr,DH,cTr,fTr,GH,mTr,gTr,hTr,k8,pTr,w3e,uTr,_Tr,bTr,Bt,S8,vTr,A3e,FTr,TTr,mc,MTr,y3e,ETr,CTr,OH,wTr,ATr,yTr,e4,LTr,Rr,R8,xTr,L3e,$Tr,kTr,ln,STr,x3e,RTr,PTr,$3e,BTr,ITr,k3e,qTr,NTr,jTr,P8,o4,S3e,DTr,GTr,VH,OTr,VTr,XTr,r4,R3e,zTr,WTr,XH,QTr,HTr,UTr,t4,Kqe,gc,a4,P3e,B8,JTr,B3e,YTr,Zqe,sr,I8,KTr,hc,ZTr,zH,e7r,o7r,WH,r7r,t7r,a7r,q8,n7r,I3e,s7r,l7r,i7r,It,N8,d7r,q3e,c7r,f7r,pc,m7r,N3e,g7r,h7r,QH,p7r,u7r,_7r,n4,b7r,Pr,j8,v7r,j3e,F7r,T7r,dn,M7r,D3e,E7r,C7r,G3e,w7r,A7r,O3e,y7r,L7r,x7r,V3e,s4,X3e,$7r,k7r,HH,S7r,R7r,P7r,l4,eNe,uc,i4,z3e,D8,B7r,W3e,I7r,oNe,lr,G8,q7r,_c,N7r,UH,j7r,D7r,JH,G7r,O7r,V7r,O8,X7r,Q3e,z7r,W7r,Q7r,qt,V8,H7r,H3e,U7r,J7r,bc,Y7r,U3e,K7r,Z7r,YH,eMr,oMr,rMr,d4,tMr,Br,X8,aMr,J3e,nMr,sMr,cn,lMr,Y3e,iMr,dMr,K3e,cMr,fMr,Z3e,mMr,gMr,hMr,de,c4,eFe,pMr,uMr,KH,_Mr,bMr,vMr,f4,oFe,FMr,TMr,ZH,MMr,EMr,CMr,m4,rFe,wMr,AMr,eU,yMr,LMr,xMr,g4,tFe,$Mr,kMr,oU,SMr,RMr,PMr,h4,aFe,BMr,IMr,rU,qMr,NMr,jMr,p4,nFe,DMr,GMr,tU,OMr,VMr,XMr,u4,sFe,zMr,WMr,aU,QMr,HMr,UMr,_4,lFe,JMr,YMr,nU,KMr,ZMr,e4r,b4,iFe,o4r,r4r,sU,t4r,a4r,n4r,v4,dFe,s4r,l4r,lU,i4r,d4r,c4r,F4,cFe,f4r,m4r,iU,g4r,h4r,p4r,T4,fFe,u4r,_4r,dU,b4r,v4r,F4r,M4,mFe,T4r,M4r,cU,E4r,C4r,w4r,E4,gFe,A4r,y4r,fU,L4r,x4r,$4r,C4,hFe,k4r,S4r,mU,R4r,P4r,B4r,w4,pFe,I4r,q4r,gU,N4r,j4r,D4r,A4,uFe,G4r,O4r,hU,V4r,X4r,z4r,y4,_Fe,W4r,Q4r,pU,H4r,U4r,J4r,L4,bFe,Y4r,K4r,uU,Z4r,eEr,oEr,x4,vFe,rEr,tEr,_U,aEr,nEr,sEr,$4,rNe,vc,k4,FFe,z8,lEr,TFe,iEr,tNe,ir,W8,dEr,Fc,cEr,bU,fEr,mEr,vU,gEr,hEr,pEr,Q8,uEr,MFe,_Er,bEr,vEr,Nt,H8,FEr,EFe,TEr,MEr,Tc,EEr,CFe,CEr,wEr,FU,AEr,yEr,LEr,S4,xEr,Ir,U8,$Er,wFe,kEr,SEr,fn,REr,AFe,PEr,BEr,yFe,IEr,qEr,LFe,NEr,jEr,DEr,ce,R4,xFe,GEr,OEr,TU,VEr,XEr,zEr,P4,$Fe,WEr,QEr,MU,HEr,UEr,JEr,B4,kFe,YEr,KEr,EU,ZEr,eCr,oCr,I4,SFe,rCr,tCr,CU,aCr,nCr,sCr,q4,RFe,lCr,iCr,wU,dCr,cCr,fCr,N4,PFe,mCr,gCr,AU,hCr,pCr,uCr,j4,BFe,_Cr,bCr,yU,vCr,FCr,TCr,D4,IFe,MCr,ECr,LU,CCr,wCr,ACr,G4,qFe,yCr,LCr,xU,xCr,$Cr,kCr,O4,NFe,SCr,RCr,$U,PCr,BCr,ICr,V4,jFe,qCr,NCr,kU,jCr,DCr,GCr,X4,DFe,OCr,VCr,SU,XCr,zCr,WCr,z4,GFe,QCr,HCr,RU,UCr,JCr,YCr,W4,OFe,KCr,ZCr,PU,e5r,o5r,r5r,Q4,VFe,t5r,a5r,BU,n5r,s5r,l5r,H4,XFe,i5r,d5r,IU,c5r,f5r,m5r,U4,zFe,g5r,h5r,qU,p5r,u5r,_5r,J4,WFe,b5r,v5r,NU,F5r,T5r,M5r,Y4,QFe,E5r,C5r,jU,w5r,A5r,y5r,K4,HFe,L5r,x5r,DU,$5r,k5r,S5r,Z4,aNe,Mc,eE,UFe,J8,R5r,JFe,P5r,nNe,dr,Y8,B5r,Ec,I5r,GU,q5r,N5r,OU,j5r,D5r,G5r,K8,O5r,YFe,V5r,X5r,z5r,jt,Z8,W5r,KFe,Q5r,H5r,Cc,U5r,ZFe,J5r,Y5r,VU,K5r,Z5r,ewr,oE,owr,qr,ex,rwr,e0e,twr,awr,mn,nwr,o0e,swr,lwr,r0e,iwr,dwr,t0e,cwr,fwr,mwr,a0e,rE,n0e,gwr,hwr,XU,pwr,uwr,_wr,tE,sNe,wc,aE,s0e,ox,bwr,l0e,vwr,lNe,cr,rx,Fwr,Ac,Twr,zU,Mwr,Ewr,WU,Cwr,wwr,Awr,tx,ywr,i0e,Lwr,xwr,$wr,Dt,ax,kwr,d0e,Swr,Rwr,yc,Pwr,c0e,Bwr,Iwr,QU,qwr,Nwr,jwr,nE,Dwr,Nr,nx,Gwr,f0e,Owr,Vwr,gn,Xwr,m0e,zwr,Wwr,g0e,Qwr,Hwr,h0e,Uwr,Jwr,Ywr,p0e,sE,u0e,Kwr,Zwr,HU,eAr,oAr,rAr,lE,iNe,Lc,iE,_0e,sx,tAr,b0e,aAr,dNe,fr,lx,nAr,xc,sAr,UU,lAr,iAr,JU,dAr,cAr,fAr,ix,mAr,v0e,gAr,hAr,pAr,Gt,dx,uAr,F0e,_Ar,bAr,$c,vAr,T0e,FAr,TAr,YU,MAr,EAr,CAr,dE,wAr,jr,cx,AAr,M0e,yAr,LAr,hn,xAr,E0e,$Ar,kAr,C0e,SAr,RAr,w0e,PAr,BAr,IAr,re,cE,A0e,qAr,NAr,KU,jAr,DAr,GAr,fE,y0e,OAr,VAr,ZU,XAr,zAr,WAr,mE,L0e,QAr,HAr,eJ,UAr,JAr,YAr,gE,x0e,KAr,ZAr,oJ,e6r,o6r,r6r,hE,$0e,t6r,a6r,rJ,n6r,s6r,l6r,pE,k0e,i6r,d6r,tJ,c6r,f6r,m6r,uE,S0e,g6r,h6r,aJ,p6r,u6r,_6r,_E,R0e,b6r,v6r,nJ,F6r,T6r,M6r,bE,P0e,E6r,C6r,sJ,w6r,A6r,y6r,vE,B0e,L6r,x6r,lJ,$6r,k6r,S6r,FE,I0e,R6r,P6r,iJ,B6r,I6r,q6r,TE,q0e,N6r,j6r,dJ,D6r,G6r,O6r,ME,N0e,V6r,X6r,cJ,z6r,W6r,Q6r,EE,j0e,H6r,U6r,fJ,J6r,Y6r,K6r,CE,D0e,Z6r,eyr,mJ,oyr,ryr,tyr,wE,G0e,ayr,nyr,gJ,syr,lyr,iyr,AE,O0e,dyr,cyr,hJ,fyr,myr,gyr,yE,V0e,hyr,pyr,pJ,uyr,_yr,byr,LE,X0e,vyr,Fyr,uJ,Tyr,Myr,Eyr,xE,z0e,Cyr,wyr,_J,Ayr,yyr,Lyr,$E,W0e,xyr,$yr,bJ,kyr,Syr,Ryr,kE,Q0e,Pyr,Byr,vJ,Iyr,qyr,Nyr,SE,H0e,jyr,Dyr,FJ,Gyr,Oyr,Vyr,RE,U0e,Xyr,zyr,TJ,Wyr,Qyr,Hyr,PE,J0e,Uyr,Jyr,MJ,Yyr,Kyr,Zyr,BE,cNe,kc,IE,Y0e,fx,eLr,K0e,oLr,fNe,mr,mx,rLr,Sc,tLr,EJ,aLr,nLr,CJ,sLr,lLr,iLr,gx,dLr,Z0e,cLr,fLr,mLr,Ot,hx,gLr,eTe,hLr,pLr,Rc,uLr,oTe,_Lr,bLr,wJ,vLr,FLr,TLr,qE,MLr,Dr,px,ELr,rTe,CLr,wLr,pn,ALr,tTe,yLr,LLr,aTe,xLr,$Lr,nTe,kLr,SLr,RLr,Re,NE,sTe,PLr,BLr,AJ,ILr,qLr,NLr,jE,lTe,jLr,DLr,yJ,GLr,OLr,VLr,DE,iTe,XLr,zLr,LJ,WLr,QLr,HLr,GE,dTe,ULr,JLr,xJ,YLr,KLr,ZLr,OE,cTe,e8r,o8r,$J,r8r,t8r,a8r,VE,fTe,n8r,s8r,kJ,l8r,i8r,d8r,XE,mTe,c8r,f8r,SJ,m8r,g8r,h8r,zE,gTe,p8r,u8r,RJ,_8r,b8r,v8r,WE,hTe,F8r,T8r,PJ,M8r,E8r,C8r,QE,mNe,Pc,HE,pTe,ux,w8r,uTe,A8r,gNe,gr,_x,y8r,Bc,L8r,BJ,x8r,$8r,IJ,k8r,S8r,R8r,bx,P8r,_Te,B8r,I8r,q8r,Vt,vx,N8r,bTe,j8r,D8r,Ic,G8r,vTe,O8r,V8r,qJ,X8r,z8r,W8r,UE,Q8r,Gr,Fx,H8r,FTe,U8r,J8r,un,Y8r,TTe,K8r,Z8r,MTe,exr,oxr,ETe,rxr,txr,axr,Me,JE,CTe,nxr,sxr,NJ,lxr,ixr,dxr,YE,wTe,cxr,fxr,jJ,mxr,gxr,hxr,KE,ATe,pxr,uxr,DJ,_xr,bxr,vxr,ZE,yTe,Fxr,Txr,GJ,Mxr,Exr,Cxr,eC,LTe,wxr,Axr,OJ,yxr,Lxr,xxr,oC,xTe,$xr,kxr,VJ,Sxr,Rxr,Pxr,rC,$Te,Bxr,Ixr,XJ,qxr,Nxr,jxr,tC,kTe,Dxr,Gxr,zJ,Oxr,Vxr,Xxr,aC,STe,zxr,Wxr,WJ,Qxr,Hxr,Uxr,nC,RTe,Jxr,Yxr,QJ,Kxr,Zxr,e9r,sC,PTe,o9r,r9r,HJ,t9r,a9r,n9r,lC,BTe,s9r,l9r,UJ,i9r,d9r,c9r,iC,hNe,qc,dC,ITe,Tx,f9r,qTe,m9r,pNe,hr,Mx,g9r,Nc,h9r,JJ,p9r,u9r,YJ,_9r,b9r,v9r,Ex,F9r,NTe,T9r,M9r,E9r,Xt,Cx,C9r,jTe,w9r,A9r,jc,y9r,DTe,L9r,x9r,KJ,$9r,k9r,S9r,cC,R9r,Or,wx,P9r,GTe,B9r,I9r,_n,q9r,OTe,N9r,j9r,VTe,D9r,G9r,XTe,O9r,V9r,X9r,Le,fC,zTe,z9r,W9r,ZJ,Q9r,H9r,U9r,mC,WTe,J9r,Y9r,eY,K9r,Z9r,e$r,gC,QTe,o$r,r$r,oY,t$r,a$r,n$r,hC,HTe,s$r,l$r,rY,i$r,d$r,c$r,pC,UTe,f$r,m$r,tY,g$r,h$r,p$r,uC,JTe,u$r,_$r,aY,b$r,v$r,F$r,_C,YTe,T$r,M$r,nY,E$r,C$r,w$r,bC,KTe,A$r,y$r,sY,L$r,x$r,$$r,vC,ZTe,k$r,S$r,lY,R$r,P$r,B$r,FC,e7e,I$r,q$r,iY,N$r,j$r,D$r,TC,uNe,Dc,MC,o7e,Ax,G$r,r7e,O$r,_Ne,pr,yx,V$r,Gc,X$r,dY,z$r,W$r,cY,Q$r,H$r,U$r,Lx,J$r,t7e,Y$r,K$r,Z$r,zt,xx,ekr,a7e,okr,rkr,Oc,tkr,n7e,akr,nkr,fY,skr,lkr,ikr,EC,dkr,Vr,$x,ckr,s7e,fkr,mkr,bn,gkr,l7e,hkr,pkr,i7e,ukr,_kr,d7e,bkr,vkr,Fkr,Pe,CC,c7e,Tkr,Mkr,mY,Ekr,Ckr,wkr,wC,f7e,Akr,ykr,gY,Lkr,xkr,$kr,AC,m7e,kkr,Skr,hY,Rkr,Pkr,Bkr,yC,g7e,Ikr,qkr,pY,Nkr,jkr,Dkr,LC,h7e,Gkr,Okr,uY,Vkr,Xkr,zkr,xC,p7e,Wkr,Qkr,_Y,Hkr,Ukr,Jkr,$C,u7e,Ykr,Kkr,bY,Zkr,eSr,oSr,kC,_7e,rSr,tSr,vY,aSr,nSr,sSr,SC,b7e,lSr,iSr,FY,dSr,cSr,fSr,RC,bNe,Vc,PC,v7e,kx,mSr,F7e,gSr,vNe,ur,Sx,hSr,Xc,pSr,TY,uSr,_Sr,MY,bSr,vSr,FSr,Rx,TSr,T7e,MSr,ESr,CSr,Wt,Px,wSr,M7e,ASr,ySr,zc,LSr,E7e,xSr,$Sr,EY,kSr,SSr,RSr,BC,PSr,Xr,Bx,BSr,C7e,ISr,qSr,vn,NSr,w7e,jSr,DSr,A7e,GSr,OSr,y7e,VSr,XSr,zSr,xe,IC,L7e,WSr,QSr,CY,HSr,USr,JSr,qC,x7e,YSr,KSr,wY,ZSr,eRr,oRr,NC,$7e,rRr,tRr,AY,aRr,nRr,sRr,jC,k7e,lRr,iRr,yY,dRr,cRr,fRr,DC,S7e,mRr,gRr,LY,hRr,pRr,uRr,GC,R7e,_Rr,bRr,xY,vRr,FRr,TRr,OC,P7e,MRr,ERr,$Y,CRr,wRr,ARr,VC,B7e,yRr,LRr,kY,xRr,$Rr,kRr,XC,I7e,SRr,RRr,SY,PRr,BRr,IRr,zC,q7e,qRr,NRr,RY,jRr,DRr,GRr,WC,FNe,Wc,QC,N7e,Ix,ORr,j7e,VRr,TNe,_r,qx,XRr,Qc,zRr,PY,WRr,QRr,BY,HRr,URr,JRr,Nx,YRr,D7e,KRr,ZRr,ePr,Qt,jx,oPr,G7e,rPr,tPr,Hc,aPr,O7e,nPr,sPr,IY,lPr,iPr,dPr,HC,cPr,zr,Dx,fPr,V7e,mPr,gPr,Fn,hPr,X7e,pPr,uPr,z7e,_Pr,bPr,W7e,vPr,FPr,TPr,$e,UC,Q7e,MPr,EPr,qY,CPr,wPr,APr,JC,H7e,yPr,LPr,NY,xPr,$Pr,kPr,YC,U7e,SPr,RPr,jY,PPr,BPr,IPr,KC,J7e,qPr,NPr,DY,jPr,DPr,GPr,ZC,Y7e,OPr,VPr,GY,XPr,zPr,WPr,e5,K7e,QPr,HPr,OY,UPr,JPr,YPr,o5,Z7e,KPr,ZPr,VY,eBr,oBr,rBr,r5,eMe,tBr,aBr,XY,nBr,sBr,lBr,t5,oMe,iBr,dBr,zY,cBr,fBr,mBr,a5,rMe,gBr,hBr,WY,pBr,uBr,_Br,n5,MNe,Uc,s5,tMe,Gx,bBr,aMe,vBr,ENe,br,Ox,FBr,Jc,TBr,QY,MBr,EBr,HY,CBr,wBr,ABr,Vx,yBr,nMe,LBr,xBr,$Br,Ht,Xx,kBr,sMe,SBr,RBr,Yc,PBr,lMe,BBr,IBr,UY,qBr,NBr,jBr,l5,DBr,Wr,zx,GBr,iMe,OBr,VBr,Tn,XBr,dMe,zBr,WBr,cMe,QBr,HBr,fMe,UBr,JBr,YBr,De,i5,mMe,KBr,ZBr,JY,eIr,oIr,rIr,d5,gMe,tIr,aIr,YY,nIr,sIr,lIr,c5,hMe,iIr,dIr,KY,cIr,fIr,mIr,f5,pMe,gIr,hIr,ZY,pIr,uIr,_Ir,m5,uMe,bIr,vIr,eK,FIr,TIr,MIr,g5,_Me,EIr,CIr,oK,wIr,AIr,yIr,h5,bMe,LIr,xIr,rK,$Ir,kIr,SIr,p5,vMe,RIr,PIr,tK,BIr,IIr,qIr,u5,CNe,Kc,_5,FMe,Wx,NIr,TMe,jIr,wNe,vr,Qx,DIr,Zc,GIr,aK,OIr,VIr,nK,XIr,zIr,WIr,Hx,QIr,MMe,HIr,UIr,JIr,Ut,Ux,YIr,EMe,KIr,ZIr,ef,eqr,CMe,oqr,rqr,sK,tqr,aqr,nqr,b5,sqr,Qr,Jx,lqr,wMe,iqr,dqr,Mn,cqr,AMe,fqr,mqr,yMe,gqr,hqr,LMe,pqr,uqr,_qr,Ge,v5,xMe,bqr,vqr,lK,Fqr,Tqr,Mqr,F5,$Me,Eqr,Cqr,iK,wqr,Aqr,yqr,T5,kMe,Lqr,xqr,dK,$qr,kqr,Sqr,M5,SMe,Rqr,Pqr,cK,Bqr,Iqr,qqr,E5,RMe,Nqr,jqr,fK,Dqr,Gqr,Oqr,C5,PMe,Vqr,Xqr,mK,zqr,Wqr,Qqr,w5,BMe,Hqr,Uqr,gK,Jqr,Yqr,Kqr,A5,IMe,Zqr,eNr,hK,oNr,rNr,tNr,y5,ANe,of,L5,qMe,Yx,aNr,NMe,nNr,yNe,Fr,Kx,sNr,rf,lNr,pK,iNr,dNr,uK,cNr,fNr,mNr,Zx,gNr,jMe,hNr,pNr,uNr,Jt,e9,_Nr,DMe,bNr,vNr,tf,FNr,GMe,TNr,MNr,_K,ENr,CNr,wNr,x5,ANr,Hr,o9,yNr,OMe,LNr,xNr,En,$Nr,VMe,kNr,SNr,XMe,RNr,PNr,zMe,BNr,INr,qNr,WMe,$5,QMe,NNr,jNr,bK,DNr,GNr,ONr,k5,LNe,af,S5,HMe,r9,VNr,UMe,XNr,xNe,Tr,t9,zNr,nf,WNr,vK,QNr,HNr,FK,UNr,JNr,YNr,a9,KNr,JMe,ZNr,ejr,ojr,Yt,n9,rjr,YMe,tjr,ajr,sf,njr,KMe,sjr,ljr,TK,ijr,djr,cjr,R5,fjr,Ur,s9,mjr,ZMe,gjr,hjr,Cn,pjr,e4e,ujr,_jr,o4e,bjr,vjr,r4e,Fjr,Tjr,Mjr,l9,P5,t4e,Ejr,Cjr,MK,wjr,Ajr,yjr,B5,a4e,Ljr,xjr,EK,$jr,kjr,Sjr,I5,$Ne,lf,q5,n4e,i9,Rjr,s4e,Pjr,kNe,Mr,d9,Bjr,df,Ijr,CK,qjr,Njr,wK,jjr,Djr,Gjr,c9,Ojr,l4e,Vjr,Xjr,zjr,Kt,f9,Wjr,i4e,Qjr,Hjr,cf,Ujr,d4e,Jjr,Yjr,AK,Kjr,Zjr,eDr,N5,oDr,Jr,m9,rDr,c4e,tDr,aDr,wn,nDr,f4e,sDr,lDr,m4e,iDr,dDr,g4e,cDr,fDr,mDr,h4e,j5,p4e,gDr,hDr,yK,pDr,uDr,_Dr,D5,SNe;return d=new oe({}),Ca=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),i6=new oe({}),d6=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),vf=new bDr({props:{warning:!0,$$slots:{default:[hLt]},$$scope:{ctx:L}}}),c6=new oe({}),f6=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/configuration_auto.py#L573"}}),h6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/configuration_auto.py#L596"}}),bg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[pLt]},$$scope:{ctx:L}}}),p6=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/configuration_auto.py#L719"}}),u6=new oe({}),_6=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/tokenization_auto.py#L388"}}),F6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17310/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/tokenization_auto.py#L402"}}),Kg=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[uLt]},$$scope:{ctx:L}}}),T6=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/tokenization_auto.py#L598"}}),M6=new oe({}),E6=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/feature_extraction_auto.py#L187"}}),A6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17310/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/feature_extraction_auto.py#L201"}}),yh=new bDr({props:{$$slots:{default:[_Lt]},$$scope:{ctx:L}}}),Lh=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[bLt]},$$scope:{ctx:L}}}),y6=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/feature_extraction_auto.py#L328"}}),L6=new oe({}),x6=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/processing_auto.py#L87"}}),S6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/processing_auto.py#L101"}}),Qh=new bDr({props:{$$slots:{default:[vLt]},$$scope:{ctx:L}}}),Hh=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[FLt]},$$scope:{ctx:L}}}),R6=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/processing_auto.py#L254"}}),P6=new oe({}),B6=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/modeling_auto.py#L726"}}),q6=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17310/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17310/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/auto_factory.py#L389"}}),Yh=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[TLt]},$$scope:{ctx:L}}}),N6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/auto_factory.py#L417"}}),Ou=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[MLt]},$$scope:{ctx:L}}}),j6=new oe({}),D6=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/modeling_auto.py#L733"}}),O6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17310/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/auto_factory.py#L389"}}),Xu=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[ELt]},$$scope:{ctx:L}}}),V6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/auto_factory.py#L417"}}),P_=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[CLt]},$$scope:{ctx:L}}}),X6=new oe({}),z6=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/modeling_auto.py#L748"}}),Q6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17310/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/auto_factory.py#L389"}}),I_=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[wLt]},$$scope:{ctx:L}}}),H6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/auto_factory.py#L417"}}),F1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[ALt]},$$scope:{ctx:L}}}),U6=new oe({}),J6=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/modeling_auto.py#L755"}}),K6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17310/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/auto_factory.py#L389"}}),M1=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[yLt]},$$scope:{ctx:L}}}),Z6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/auto_factory.py#L417"}}),nb=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[LLt]},$$scope:{ctx:L}}}),ey=new oe({}),oy=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/modeling_auto.py#L762"}}),ty=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17310/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/auto_factory.py#L389"}}),lb=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[xLt]},$$scope:{ctx:L}}}),ay=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/auto_factory.py#L417"}}),wb=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[$Lt]},$$scope:{ctx:L}}}),ny=new oe({}),sy=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/modeling_auto.py#L771"}}),iy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17310/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/auto_factory.py#L389"}}),yb=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[kLt]},$$scope:{ctx:L}}}),dy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/auto_factory.py#L417"}}),T2=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[SLt]},$$scope:{ctx:L}}}),cy=new oe({}),fy=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/modeling_auto.py#L805"}}),gy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17310/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/auto_factory.py#L389"}}),E2=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[RLt]},$$scope:{ctx:L}}}),hy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/auto_factory.py#L417"}}),ev=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[PLt]},$$scope:{ctx:L}}}),py=new oe({}),uy=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/modeling_auto.py#L812"}}),by=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17310/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/auto_factory.py#L389"}}),rv=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[BLt]},$$scope:{ctx:L}}}),vy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/auto_factory.py#L417"}}),dv=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[ILt]},$$scope:{ctx:L}}}),Fy=new oe({}),Ty=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/modeling_auto.py#L798"}}),Ey=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17310/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/auto_factory.py#L389"}}),fv=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[qLt]},$$scope:{ctx:L}}}),Cy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/auto_factory.py#L417"}}),Wv=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[NLt]},$$scope:{ctx:L}}}),wy=new oe({}),Ay=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/modeling_auto.py#L780"}}),Ly=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17310/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/auto_factory.py#L389"}}),Hv=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[jLt]},$$scope:{ctx:L}}}),xy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/auto_factory.py#L417"}}),B3=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[DLt]},$$scope:{ctx:L}}}),$y=new oe({}),ky=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/modeling_auto.py#L787"}}),Ry=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17310/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/auto_factory.py#L389"}}),q3=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[GLt]},$$scope:{ctx:L}}}),Py=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/auto_factory.py#L417"}}),D3=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[OLt]},$$scope:{ctx:L}}}),By=new oe({}),Iy=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/modeling_auto.py#L821"}}),Ny=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17310/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17310/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17310/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17310/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/auto_factory.py#L389"}}),O3=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[VLt]},$$scope:{ctx:L}}}),jy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/auto_factory.py#L417"}}),oF=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[XLt]},$$scope:{ctx:L}}}),Dy=new oe({}),Gy=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/modeling_auto.py#L860"}}),Vy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17310/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/auto_factory.py#L389"}}),tF=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[zLt]},$$scope:{ctx:L}}}),Xy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/auto_factory.py#L417"}}),sF=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[WLt]},$$scope:{ctx:L}}}),zy=new oe({}),Wy=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/modeling_auto.py#L867"}}),Hy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17310/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/auto_factory.py#L389"}}),iF=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[QLt]},$$scope:{ctx:L}}}),Uy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/auto_factory.py#L417"}}),vF=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[HLt]},$$scope:{ctx:L}}}),Jy=new oe({}),Yy=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/modeling_auto.py#L890"}}),Zy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17310/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/auto_factory.py#L389"}}),TF=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[ULt]},$$scope:{ctx:L}}}),eL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/auto_factory.py#L417"}}),LF=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[JLt]},$$scope:{ctx:L}}}),oL=new oe({}),rL=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/modeling_auto.py#L874"}}),aL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17310/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/auto_factory.py#L389"}}),$F=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[YLt]},$$scope:{ctx:L}}}),nL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/auto_factory.py#L417"}}),GF=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[KLt]},$$scope:{ctx:L}}}),sL=new oe({}),lL=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/modeling_auto.py#L881"}}),dL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17310/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/auto_factory.py#L389"}}),VF=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[ZLt]},$$scope:{ctx:L}}}),cL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/auto_factory.py#L417"}}),QF=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[e8t]},$$scope:{ctx:L}}}),mL=new oe({}),gL=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/modeling_auto.py#L899"}}),pL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17310/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/auto_factory.py#L389"}}),UF=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[o8t]},$$scope:{ctx:L}}}),uL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/auto_factory.py#L417"}}),r0=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[r8t]},$$scope:{ctx:L}}}),_L=new oe({}),bL=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/modeling_auto.py#L906"}}),FL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17310/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/auto_factory.py#L389"}}),a0=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[t8t]},$$scope:{ctx:L}}}),TL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/auto_factory.py#L417"}}),d0=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[a8t]},$$scope:{ctx:L}}}),ML=new oe({}),EL=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/modeling_auto.py#L853"}}),wL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17310/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/auto_factory.py#L389"}}),f0=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[n8t]},$$scope:{ctx:L}}}),AL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/auto_factory.py#L417"}}),p0=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[s8t]},$$scope:{ctx:L}}}),LL=new oe({}),xL=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/modeling_auto.py#L828"}}),kL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17310/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/auto_factory.py#L389"}}),_0=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[l8t]},$$scope:{ctx:L}}}),SL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/auto_factory.py#L417"}}),F0=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[i8t]},$$scope:{ctx:L}}}),RL=new oe({}),PL=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/modeling_auto.py#L835"}}),IL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17310/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/auto_factory.py#L389"}}),M0=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[d8t]},$$scope:{ctx:L}}}),qL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/auto_factory.py#L417"}}),L0=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[c8t]},$$scope:{ctx:L}}}),NL=new oe({}),jL=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/modeling_auto.py#L844"}}),GL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17310/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/auto_factory.py#L389"}}),$0=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[f8t]},$$scope:{ctx:L}}}),OL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/auto_factory.py#L417"}}),R0=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[m8t]},$$scope:{ctx:L}}}),VL=new oe({}),XL=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/modeling_tf_auto.py#L394"}}),WL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17310/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17310/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/auto_factory.py#L389"}}),B0=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[g8t]},$$scope:{ctx:L}}}),QL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/auto_factory.py#L417"}}),yT=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[h8t]},$$scope:{ctx:L}}}),HL=new oe({}),UL=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/modeling_tf_auto.py#L401"}}),YL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17310/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/auto_factory.py#L389"}}),xT=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[p8t]},$$scope:{ctx:L}}}),KL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/auto_factory.py#L417"}}),ZT=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[u8t]},$$scope:{ctx:L}}}),ZL=new oe({}),e8=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/modeling_tf_auto.py#L416"}}),r8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17310/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/auto_factory.py#L389"}}),o7=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[_8t]},$$scope:{ctx:L}}}),t8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/auto_factory.py#L417"}}),h7=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[b8t]},$$scope:{ctx:L}}}),a8=new oe({}),n8=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/modeling_tf_auto.py#L432"}}),l8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17310/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/auto_factory.py#L389"}}),u7=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[v8t]},$$scope:{ctx:L}}}),i8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/auto_factory.py#L417"}}),T7=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[F8t]},$$scope:{ctx:L}}}),d8=new oe({}),c8=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/modeling_tf_auto.py#L448"}}),m8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17310/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/auto_factory.py#L389"}}),E7=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[T8t]},$$scope:{ctx:L}}}),g8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/auto_factory.py#L417"}}),X7=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[M8t]},$$scope:{ctx:L}}}),h8=new oe({}),p8=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/modeling_tf_auto.py#L455"}}),_8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17310/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/auto_factory.py#L389"}}),W7=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[E8t]},$$scope:{ctx:L}}}),b8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/auto_factory.py#L417"}}),tM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[C8t]},$$scope:{ctx:L}}}),v8=new oe({}),F8=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/modeling_tf_auto.py#L464"}}),M8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17310/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/auto_factory.py#L389"}}),nM=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[w8t]},$$scope:{ctx:L}}}),E8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/auto_factory.py#L417"}}),SM=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[A8t]},$$scope:{ctx:L}}}),C8=new oe({}),w8=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/modeling_tf_auto.py#L500"}}),y8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17310/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/auto_factory.py#L389"}}),PM=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[y8t]},$$scope:{ctx:L}}}),L8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/auto_factory.py#L417"}}),KM=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[L8t]},$$scope:{ctx:L}}}),x8=new oe({}),$8=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/modeling_tf_auto.py#L507"}}),S8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17310/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/auto_factory.py#L389"}}),e4=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[x8t]},$$scope:{ctx:L}}}),R8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/auto_factory.py#L417"}}),t4=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[$8t]},$$scope:{ctx:L}}}),B8=new oe({}),I8=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/modeling_tf_auto.py#L480"}}),N8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17310/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/auto_factory.py#L389"}}),n4=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[k8t]},$$scope:{ctx:L}}}),j8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/auto_factory.py#L417"}}),l4=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[S8t]},$$scope:{ctx:L}}}),D8=new oe({}),G8=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/modeling_tf_auto.py#L491"}}),V8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17310/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/auto_factory.py#L389"}}),d4=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[R8t]},$$scope:{ctx:L}}}),X8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/auto_factory.py#L417"}}),$4=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[P8t]},$$scope:{ctx:L}}}),z8=new oe({}),W8=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/modeling_tf_auto.py#L473"}}),H8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17310/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/auto_factory.py#L389"}}),S4=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[B8t]},$$scope:{ctx:L}}}),U8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/auto_factory.py#L417"}}),Z4=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[I8t]},$$scope:{ctx:L}}}),J8=new oe({}),Y8=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/modeling_tf_auto.py#L441"}}),Z8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17310/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/auto_factory.py#L389"}}),oE=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[q8t]},$$scope:{ctx:L}}}),ex=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/auto_factory.py#L417"}}),tE=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[N8t]},$$scope:{ctx:L}}}),ox=new oe({}),rx=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/modeling_tf_auto.py#L516"}}),ax=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17310/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/auto_factory.py#L389"}}),nE=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[j8t]},$$scope:{ctx:L}}}),nx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/auto_factory.py#L417"}}),lE=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[D8t]},$$scope:{ctx:L}}}),sx=new oe({}),lx=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/modeling_flax_auto.py#L241"}}),dx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17310/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/auto_factory.py#L389"}}),dE=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[G8t]},$$scope:{ctx:L}}}),cx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/auto_factory.py#L417"}}),BE=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[O8t]},$$scope:{ctx:L}}}),fx=new oe({}),mx=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/modeling_flax_auto.py#L255"}}),hx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17310/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/auto_factory.py#L389"}}),qE=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[V8t]},$$scope:{ctx:L}}}),px=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/auto_factory.py#L417"}}),QE=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[X8t]},$$scope:{ctx:L}}}),ux=new oe({}),_x=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/modeling_flax_auto.py#L248"}}),vx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17310/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/auto_factory.py#L389"}}),UE=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[z8t]},$$scope:{ctx:L}}}),Fx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/auto_factory.py#L417"}}),iC=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[W8t]},$$scope:{ctx:L}}}),Tx=new oe({}),Mx=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/modeling_flax_auto.py#L262"}}),Cx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17310/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/auto_factory.py#L389"}}),cC=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[Q8t]},$$scope:{ctx:L}}}),wx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/auto_factory.py#L417"}}),TC=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[H8t]},$$scope:{ctx:L}}}),Ax=new oe({}),yx=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/modeling_flax_auto.py#L269"}}),xx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17310/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/auto_factory.py#L389"}}),EC=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[U8t]},$$scope:{ctx:L}}}),$x=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/auto_factory.py#L417"}}),RC=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[J8t]},$$scope:{ctx:L}}}),kx=new oe({}),Sx=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/modeling_flax_auto.py#L278"}}),Px=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17310/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/auto_factory.py#L389"}}),BC=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[Y8t]},$$scope:{ctx:L}}}),Bx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/auto_factory.py#L417"}}),WC=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[K8t]},$$scope:{ctx:L}}}),Ix=new oe({}),qx=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/modeling_flax_auto.py#L287"}}),jx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17310/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/auto_factory.py#L389"}}),HC=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Z8t]},$$scope:{ctx:L}}}),Dx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/auto_factory.py#L417"}}),n5=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[ext]},$$scope:{ctx:L}}}),Gx=new oe({}),Ox=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/modeling_flax_auto.py#L294"}}),Xx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17310/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/auto_factory.py#L389"}}),l5=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[oxt]},$$scope:{ctx:L}}}),zx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/auto_factory.py#L417"}}),u5=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[rxt]},$$scope:{ctx:L}}}),Wx=new oe({}),Qx=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/modeling_flax_auto.py#L303"}}),Ux=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17310/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/auto_factory.py#L389"}}),b5=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[txt]},$$scope:{ctx:L}}}),Jx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/auto_factory.py#L417"}}),y5=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[axt]},$$scope:{ctx:L}}}),Yx=new oe({}),Kx=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/modeling_flax_auto.py#L310"}}),e9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17310/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/auto_factory.py#L389"}}),x5=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[nxt]},$$scope:{ctx:L}}}),o9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/auto_factory.py#L417"}}),k5=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[sxt]},$$scope:{ctx:L}}}),r9=new oe({}),t9=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/modeling_flax_auto.py#L319"}}),n9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17310/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17310/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/auto_factory.py#L389"}}),R5=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[lxt]},$$scope:{ctx:L}}}),s9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/auto_factory.py#L417"}}),I5=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[ixt]},$$scope:{ctx:L}}}),i9=new oe({}),d9=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/modeling_flax_auto.py#L328"}}),f9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17310/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17310/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/auto_factory.py#L389"}}),N5=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[dxt]},$$scope:{ctx:L}}}),m9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17310/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17310/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17310/src/transformers/models/auto/auto_factory.py#L417"}}),D5=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[cxt]},$$scope:{ctx:L}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),u=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),ci=o("Auto Classes"),hf=l(),rt=a("p"),fi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),mi=a("code"),a6=o("from_pretrained()"),pf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),je=l(),We=a("p"),gi=o("Instantiating one of "),yn=a("a"),n6=o("AutoConfig"),Ln=o(", "),xn=a("a"),s6=o("AutoModel"),hi=o(`, and
`),$n=a("a"),l6=o("AutoTokenizer"),pi=o(" will directly create a class of the relevant architecture. For instance"),uf=l(),F(Ca.$$.fragment),Qe=l(),Ae=a("p"),w$=o("will create a model that is an instance of "),ui=a("a"),A$=o("BertModel"),y$=o("."),Eo=l(),wa=a("p"),L$=o("There is one class of "),_f=a("code"),x$=o("AutoModel"),DDe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),xIe=l(),_i=a("h2"),bf=a("a"),Fee=a("span"),F(i6.$$.fragment),GDe=l(),Tee=a("span"),ODe=o("Extending the Auto Classes"),$Ie=l(),kn=a("p"),VDe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Mee=a("code"),XDe=o("NewModel"),zDe=o(", make sure you have a "),Eee=a("code"),WDe=o("NewModelConfig"),QDe=o(` then you can add those to the auto
classes like this:`),kIe=l(),F(d6.$$.fragment),SIe=l(),$$=a("p"),HDe=o("You will then be able to use the auto classes like you would usually do!"),RIe=l(),F(vf.$$.fragment),PIe=l(),bi=a("h2"),Ff=a("a"),Cee=a("span"),F(c6.$$.fragment),UDe=l(),wee=a("span"),JDe=o("AutoConfig"),BIe=l(),Co=a("div"),F(f6.$$.fragment),YDe=l(),m6=a("p"),KDe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),k$=a("a"),ZDe=o("from_pretrained()"),eGe=o(" class method."),oGe=l(),g6=a("p"),rGe=o("This class cannot be instantiated directly using "),Aee=a("code"),tGe=o("__init__()"),aGe=o(" (throws an error)."),nGe=l(),Er=a("div"),F(h6.$$.fragment),sGe=l(),yee=a("p"),lGe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),iGe=l(),vi=a("p"),dGe=o("The configuration class to instantiate is selected based on the "),Lee=a("code"),cGe=o("model_type"),fGe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),xee=a("code"),mGe=o("pretrained_model_name_or_path"),gGe=o(":"),hGe=l(),A=a("ul"),Tf=a("li"),$ee=a("strong"),pGe=o("albert"),uGe=o(" \u2014 "),S$=a("a"),_Ge=o("AlbertConfig"),bGe=o(" (ALBERT model)"),vGe=l(),Mf=a("li"),kee=a("strong"),FGe=o("bart"),TGe=o(" \u2014 "),R$=a("a"),MGe=o("BartConfig"),EGe=o(" (BART model)"),CGe=l(),Ef=a("li"),See=a("strong"),wGe=o("beit"),AGe=o(" \u2014 "),P$=a("a"),yGe=o("BeitConfig"),LGe=o(" (BEiT model)"),xGe=l(),Cf=a("li"),Ree=a("strong"),$Ge=o("bert"),kGe=o(" \u2014 "),B$=a("a"),SGe=o("BertConfig"),RGe=o(" (BERT model)"),PGe=l(),wf=a("li"),Pee=a("strong"),BGe=o("bert-generation"),IGe=o(" \u2014 "),I$=a("a"),qGe=o("BertGenerationConfig"),NGe=o(" (Bert Generation model)"),jGe=l(),Af=a("li"),Bee=a("strong"),DGe=o("big_bird"),GGe=o(" \u2014 "),q$=a("a"),OGe=o("BigBirdConfig"),VGe=o(" (BigBird model)"),XGe=l(),yf=a("li"),Iee=a("strong"),zGe=o("bigbird_pegasus"),WGe=o(" \u2014 "),N$=a("a"),QGe=o("BigBirdPegasusConfig"),HGe=o(" (BigBirdPegasus model)"),UGe=l(),Lf=a("li"),qee=a("strong"),JGe=o("blenderbot"),YGe=o(" \u2014 "),j$=a("a"),KGe=o("BlenderbotConfig"),ZGe=o(" (Blenderbot model)"),eOe=l(),xf=a("li"),Nee=a("strong"),oOe=o("blenderbot-small"),rOe=o(" \u2014 "),D$=a("a"),tOe=o("BlenderbotSmallConfig"),aOe=o(" (BlenderbotSmall model)"),nOe=l(),$f=a("li"),jee=a("strong"),sOe=o("camembert"),lOe=o(" \u2014 "),G$=a("a"),iOe=o("CamembertConfig"),dOe=o(" (CamemBERT model)"),cOe=l(),kf=a("li"),Dee=a("strong"),fOe=o("canine"),mOe=o(" \u2014 "),O$=a("a"),gOe=o("CanineConfig"),hOe=o(" (Canine model)"),pOe=l(),Sf=a("li"),Gee=a("strong"),uOe=o("clip"),_Oe=o(" \u2014 "),V$=a("a"),bOe=o("CLIPConfig"),vOe=o(" (CLIP model)"),FOe=l(),Rf=a("li"),Oee=a("strong"),TOe=o("convbert"),MOe=o(" \u2014 "),X$=a("a"),EOe=o("ConvBertConfig"),COe=o(" (ConvBERT model)"),wOe=l(),Pf=a("li"),Vee=a("strong"),AOe=o("convnext"),yOe=o(" \u2014 "),z$=a("a"),LOe=o("ConvNextConfig"),xOe=o(" (ConvNext model)"),$Oe=l(),Bf=a("li"),Xee=a("strong"),kOe=o("ctrl"),SOe=o(" \u2014 "),W$=a("a"),ROe=o("CTRLConfig"),POe=o(" (CTRL model)"),BOe=l(),If=a("li"),zee=a("strong"),IOe=o("data2vec-audio"),qOe=o(" \u2014 "),Q$=a("a"),NOe=o("Data2VecAudioConfig"),jOe=o(" (Data2VecAudio model)"),DOe=l(),qf=a("li"),Wee=a("strong"),GOe=o("data2vec-text"),OOe=o(" \u2014 "),H$=a("a"),VOe=o("Data2VecTextConfig"),XOe=o(" (Data2VecText model)"),zOe=l(),Nf=a("li"),Qee=a("strong"),WOe=o("data2vec-vision"),QOe=o(" \u2014 "),U$=a("a"),HOe=o("Data2VecVisionConfig"),UOe=o(" (Data2VecVision model)"),JOe=l(),jf=a("li"),Hee=a("strong"),YOe=o("deberta"),KOe=o(" \u2014 "),J$=a("a"),ZOe=o("DebertaConfig"),eVe=o(" (DeBERTa model)"),oVe=l(),Df=a("li"),Uee=a("strong"),rVe=o("deberta-v2"),tVe=o(" \u2014 "),Y$=a("a"),aVe=o("DebertaV2Config"),nVe=o(" (DeBERTa-v2 model)"),sVe=l(),Gf=a("li"),Jee=a("strong"),lVe=o("decision_transformer"),iVe=o(" \u2014 "),K$=a("a"),dVe=o("DecisionTransformerConfig"),cVe=o(" (Decision Transformer model)"),fVe=l(),Of=a("li"),Yee=a("strong"),mVe=o("deit"),gVe=o(" \u2014 "),Z$=a("a"),hVe=o("DeiTConfig"),pVe=o(" (DeiT model)"),uVe=l(),Vf=a("li"),Kee=a("strong"),_Ve=o("detr"),bVe=o(" \u2014 "),ek=a("a"),vVe=o("DetrConfig"),FVe=o(" (DETR model)"),TVe=l(),Xf=a("li"),Zee=a("strong"),MVe=o("distilbert"),EVe=o(" \u2014 "),ok=a("a"),CVe=o("DistilBertConfig"),wVe=o(" (DistilBERT model)"),AVe=l(),zf=a("li"),eoe=a("strong"),yVe=o("dpr"),LVe=o(" \u2014 "),rk=a("a"),xVe=o("DPRConfig"),$Ve=o(" (DPR model)"),kVe=l(),Wf=a("li"),ooe=a("strong"),SVe=o("dpt"),RVe=o(" \u2014 "),tk=a("a"),PVe=o("DPTConfig"),BVe=o(" (DPT model)"),IVe=l(),Qf=a("li"),roe=a("strong"),qVe=o("electra"),NVe=o(" \u2014 "),ak=a("a"),jVe=o("ElectraConfig"),DVe=o(" (ELECTRA model)"),GVe=l(),Hf=a("li"),toe=a("strong"),OVe=o("encoder-decoder"),VVe=o(" \u2014 "),nk=a("a"),XVe=o("EncoderDecoderConfig"),zVe=o(" (Encoder decoder model)"),WVe=l(),Uf=a("li"),aoe=a("strong"),QVe=o("flaubert"),HVe=o(" \u2014 "),sk=a("a"),UVe=o("FlaubertConfig"),JVe=o(" (FlauBERT model)"),YVe=l(),Jf=a("li"),noe=a("strong"),KVe=o("flava"),ZVe=o(" \u2014 "),lk=a("a"),eXe=o("FlavaConfig"),oXe=o(" (Flava model)"),rXe=l(),Yf=a("li"),soe=a("strong"),tXe=o("fnet"),aXe=o(" \u2014 "),ik=a("a"),nXe=o("FNetConfig"),sXe=o(" (FNet model)"),lXe=l(),Kf=a("li"),loe=a("strong"),iXe=o("fsmt"),dXe=o(" \u2014 "),dk=a("a"),cXe=o("FSMTConfig"),fXe=o(" (FairSeq Machine-Translation model)"),mXe=l(),Zf=a("li"),ioe=a("strong"),gXe=o("funnel"),hXe=o(" \u2014 "),ck=a("a"),pXe=o("FunnelConfig"),uXe=o(" (Funnel Transformer model)"),_Xe=l(),em=a("li"),doe=a("strong"),bXe=o("glpn"),vXe=o(" \u2014 "),fk=a("a"),FXe=o("GLPNConfig"),TXe=o(" (GLPN model)"),MXe=l(),om=a("li"),coe=a("strong"),EXe=o("gpt2"),CXe=o(" \u2014 "),mk=a("a"),wXe=o("GPT2Config"),AXe=o(" (OpenAI GPT-2 model)"),yXe=l(),rm=a("li"),foe=a("strong"),LXe=o("gpt_neo"),xXe=o(" \u2014 "),gk=a("a"),$Xe=o("GPTNeoConfig"),kXe=o(" (GPT Neo model)"),SXe=l(),tm=a("li"),moe=a("strong"),RXe=o("gptj"),PXe=o(" \u2014 "),hk=a("a"),BXe=o("GPTJConfig"),IXe=o(" (GPT-J model)"),qXe=l(),am=a("li"),goe=a("strong"),NXe=o("hubert"),jXe=o(" \u2014 "),pk=a("a"),DXe=o("HubertConfig"),GXe=o(" (Hubert model)"),OXe=l(),nm=a("li"),hoe=a("strong"),VXe=o("ibert"),XXe=o(" \u2014 "),uk=a("a"),zXe=o("IBertConfig"),WXe=o(" (I-BERT model)"),QXe=l(),sm=a("li"),poe=a("strong"),HXe=o("imagegpt"),UXe=o(" \u2014 "),_k=a("a"),JXe=o("ImageGPTConfig"),YXe=o(" (ImageGPT model)"),KXe=l(),lm=a("li"),uoe=a("strong"),ZXe=o("layoutlm"),eze=o(" \u2014 "),bk=a("a"),oze=o("LayoutLMConfig"),rze=o(" (LayoutLM model)"),tze=l(),im=a("li"),_oe=a("strong"),aze=o("layoutlmv2"),nze=o(" \u2014 "),vk=a("a"),sze=o("LayoutLMv2Config"),lze=o(" (LayoutLMv2 model)"),ize=l(),dm=a("li"),boe=a("strong"),dze=o("led"),cze=o(" \u2014 "),Fk=a("a"),fze=o("LEDConfig"),mze=o(" (LED model)"),gze=l(),cm=a("li"),voe=a("strong"),hze=o("longformer"),pze=o(" \u2014 "),Tk=a("a"),uze=o("LongformerConfig"),_ze=o(" (Longformer model)"),bze=l(),fm=a("li"),Foe=a("strong"),vze=o("luke"),Fze=o(" \u2014 "),Mk=a("a"),Tze=o("LukeConfig"),Mze=o(" (LUKE model)"),Eze=l(),mm=a("li"),Toe=a("strong"),Cze=o("lxmert"),wze=o(" \u2014 "),Ek=a("a"),Aze=o("LxmertConfig"),yze=o(" (LXMERT model)"),Lze=l(),gm=a("li"),Moe=a("strong"),xze=o("m2m_100"),$ze=o(" \u2014 "),Ck=a("a"),kze=o("M2M100Config"),Sze=o(" (M2M100 model)"),Rze=l(),hm=a("li"),Eoe=a("strong"),Pze=o("marian"),Bze=o(" \u2014 "),wk=a("a"),Ize=o("MarianConfig"),qze=o(" (Marian model)"),Nze=l(),pm=a("li"),Coe=a("strong"),jze=o("maskformer"),Dze=o(" \u2014 "),Ak=a("a"),Gze=o("MaskFormerConfig"),Oze=o(" (MaskFormer model)"),Vze=l(),um=a("li"),woe=a("strong"),Xze=o("mbart"),zze=o(" \u2014 "),yk=a("a"),Wze=o("MBartConfig"),Qze=o(" (mBART model)"),Hze=l(),_m=a("li"),Aoe=a("strong"),Uze=o("megatron-bert"),Jze=o(" \u2014 "),Lk=a("a"),Yze=o("MegatronBertConfig"),Kze=o(" (MegatronBert model)"),Zze=l(),bm=a("li"),yoe=a("strong"),eWe=o("mobilebert"),oWe=o(" \u2014 "),xk=a("a"),rWe=o("MobileBertConfig"),tWe=o(" (MobileBERT model)"),aWe=l(),vm=a("li"),Loe=a("strong"),nWe=o("mpnet"),sWe=o(" \u2014 "),$k=a("a"),lWe=o("MPNetConfig"),iWe=o(" (MPNet model)"),dWe=l(),Fm=a("li"),xoe=a("strong"),cWe=o("mt5"),fWe=o(" \u2014 "),kk=a("a"),mWe=o("MT5Config"),gWe=o(" (mT5 model)"),hWe=l(),Tm=a("li"),$oe=a("strong"),pWe=o("nystromformer"),uWe=o(" \u2014 "),Sk=a("a"),_We=o("NystromformerConfig"),bWe=o(" (Nystromformer model)"),vWe=l(),Mm=a("li"),koe=a("strong"),FWe=o("openai-gpt"),TWe=o(" \u2014 "),Rk=a("a"),MWe=o("OpenAIGPTConfig"),EWe=o(" (OpenAI GPT model)"),CWe=l(),Em=a("li"),Soe=a("strong"),wWe=o("opt"),AWe=o(" \u2014 "),Pk=a("a"),yWe=o("OPTConfig"),LWe=o(" (OPT model)"),xWe=l(),Cm=a("li"),Roe=a("strong"),$We=o("pegasus"),kWe=o(" \u2014 "),Bk=a("a"),SWe=o("PegasusConfig"),RWe=o(" (Pegasus model)"),PWe=l(),wm=a("li"),Poe=a("strong"),BWe=o("perceiver"),IWe=o(" \u2014 "),Ik=a("a"),qWe=o("PerceiverConfig"),NWe=o(" (Perceiver model)"),jWe=l(),Am=a("li"),Boe=a("strong"),DWe=o("plbart"),GWe=o(" \u2014 "),qk=a("a"),OWe=o("PLBartConfig"),VWe=o(" (PLBart model)"),XWe=l(),ym=a("li"),Ioe=a("strong"),zWe=o("poolformer"),WWe=o(" \u2014 "),Nk=a("a"),QWe=o("PoolFormerConfig"),HWe=o(" (PoolFormer model)"),UWe=l(),Lm=a("li"),qoe=a("strong"),JWe=o("prophetnet"),YWe=o(" \u2014 "),jk=a("a"),KWe=o("ProphetNetConfig"),ZWe=o(" (ProphetNet model)"),eQe=l(),xm=a("li"),Noe=a("strong"),oQe=o("qdqbert"),rQe=o(" \u2014 "),Dk=a("a"),tQe=o("QDQBertConfig"),aQe=o(" (QDQBert model)"),nQe=l(),$m=a("li"),joe=a("strong"),sQe=o("rag"),lQe=o(" \u2014 "),Gk=a("a"),iQe=o("RagConfig"),dQe=o(" (RAG model)"),cQe=l(),km=a("li"),Doe=a("strong"),fQe=o("realm"),mQe=o(" \u2014 "),Ok=a("a"),gQe=o("RealmConfig"),hQe=o(" (Realm model)"),pQe=l(),Sm=a("li"),Goe=a("strong"),uQe=o("reformer"),_Qe=o(" \u2014 "),Vk=a("a"),bQe=o("ReformerConfig"),vQe=o(" (Reformer model)"),FQe=l(),Rm=a("li"),Ooe=a("strong"),TQe=o("regnet"),MQe=o(" \u2014 "),Xk=a("a"),EQe=o("RegNetConfig"),CQe=o(" (RegNet model)"),wQe=l(),Pm=a("li"),Voe=a("strong"),AQe=o("rembert"),yQe=o(" \u2014 "),zk=a("a"),LQe=o("RemBertConfig"),xQe=o(" (RemBERT model)"),$Qe=l(),Bm=a("li"),Xoe=a("strong"),kQe=o("resnet"),SQe=o(" \u2014 "),Wk=a("a"),RQe=o("ResNetConfig"),PQe=o(" (ResNet model)"),BQe=l(),Im=a("li"),zoe=a("strong"),IQe=o("retribert"),qQe=o(" \u2014 "),Qk=a("a"),NQe=o("RetriBertConfig"),jQe=o(" (RetriBERT model)"),DQe=l(),qm=a("li"),Woe=a("strong"),GQe=o("roberta"),OQe=o(" \u2014 "),Hk=a("a"),VQe=o("RobertaConfig"),XQe=o(" (RoBERTa model)"),zQe=l(),Nm=a("li"),Qoe=a("strong"),WQe=o("roformer"),QQe=o(" \u2014 "),Uk=a("a"),HQe=o("RoFormerConfig"),UQe=o(" (RoFormer model)"),JQe=l(),jm=a("li"),Hoe=a("strong"),YQe=o("segformer"),KQe=o(" \u2014 "),Jk=a("a"),ZQe=o("SegformerConfig"),eHe=o(" (SegFormer model)"),oHe=l(),Dm=a("li"),Uoe=a("strong"),rHe=o("sew"),tHe=o(" \u2014 "),Yk=a("a"),aHe=o("SEWConfig"),nHe=o(" (SEW model)"),sHe=l(),Gm=a("li"),Joe=a("strong"),lHe=o("sew-d"),iHe=o(" \u2014 "),Kk=a("a"),dHe=o("SEWDConfig"),cHe=o(" (SEW-D model)"),fHe=l(),Om=a("li"),Yoe=a("strong"),mHe=o("speech-encoder-decoder"),gHe=o(" \u2014 "),Zk=a("a"),hHe=o("SpeechEncoderDecoderConfig"),pHe=o(" (Speech Encoder decoder model)"),uHe=l(),Vm=a("li"),Koe=a("strong"),_He=o("speech_to_text"),bHe=o(" \u2014 "),eS=a("a"),vHe=o("Speech2TextConfig"),FHe=o(" (Speech2Text model)"),THe=l(),Xm=a("li"),Zoe=a("strong"),MHe=o("speech_to_text_2"),EHe=o(" \u2014 "),oS=a("a"),CHe=o("Speech2Text2Config"),wHe=o(" (Speech2Text2 model)"),AHe=l(),zm=a("li"),ere=a("strong"),yHe=o("splinter"),LHe=o(" \u2014 "),rS=a("a"),xHe=o("SplinterConfig"),$He=o(" (Splinter model)"),kHe=l(),Wm=a("li"),ore=a("strong"),SHe=o("squeezebert"),RHe=o(" \u2014 "),tS=a("a"),PHe=o("SqueezeBertConfig"),BHe=o(" (SqueezeBERT model)"),IHe=l(),Qm=a("li"),rre=a("strong"),qHe=o("swin"),NHe=o(" \u2014 "),aS=a("a"),jHe=o("SwinConfig"),DHe=o(" (Swin model)"),GHe=l(),Hm=a("li"),tre=a("strong"),OHe=o("t5"),VHe=o(" \u2014 "),nS=a("a"),XHe=o("T5Config"),zHe=o(" (T5 model)"),WHe=l(),Um=a("li"),are=a("strong"),QHe=o("tapas"),HHe=o(" \u2014 "),sS=a("a"),UHe=o("TapasConfig"),JHe=o(" (TAPAS model)"),YHe=l(),Jm=a("li"),nre=a("strong"),KHe=o("transfo-xl"),ZHe=o(" \u2014 "),lS=a("a"),eUe=o("TransfoXLConfig"),oUe=o(" (Transformer-XL model)"),rUe=l(),Ym=a("li"),sre=a("strong"),tUe=o("trocr"),aUe=o(" \u2014 "),iS=a("a"),nUe=o("TrOCRConfig"),sUe=o(" (TrOCR model)"),lUe=l(),Km=a("li"),lre=a("strong"),iUe=o("unispeech"),dUe=o(" \u2014 "),dS=a("a"),cUe=o("UniSpeechConfig"),fUe=o(" (UniSpeech model)"),mUe=l(),Zm=a("li"),ire=a("strong"),gUe=o("unispeech-sat"),hUe=o(" \u2014 "),cS=a("a"),pUe=o("UniSpeechSatConfig"),uUe=o(" (UniSpeechSat model)"),_Ue=l(),eg=a("li"),dre=a("strong"),bUe=o("van"),vUe=o(" \u2014 "),fS=a("a"),FUe=o("VanConfig"),TUe=o(" (VAN model)"),MUe=l(),og=a("li"),cre=a("strong"),EUe=o("vilt"),CUe=o(" \u2014 "),mS=a("a"),wUe=o("ViltConfig"),AUe=o(" (ViLT model)"),yUe=l(),rg=a("li"),fre=a("strong"),LUe=o("vision-encoder-decoder"),xUe=o(" \u2014 "),gS=a("a"),$Ue=o("VisionEncoderDecoderConfig"),kUe=o(" (Vision Encoder decoder model)"),SUe=l(),tg=a("li"),mre=a("strong"),RUe=o("vision-text-dual-encoder"),PUe=o(" \u2014 "),hS=a("a"),BUe=o("VisionTextDualEncoderConfig"),IUe=o(" (VisionTextDualEncoder model)"),qUe=l(),ag=a("li"),gre=a("strong"),NUe=o("visual_bert"),jUe=o(" \u2014 "),pS=a("a"),DUe=o("VisualBertConfig"),GUe=o(" (VisualBert model)"),OUe=l(),ng=a("li"),hre=a("strong"),VUe=o("vit"),XUe=o(" \u2014 "),uS=a("a"),zUe=o("ViTConfig"),WUe=o(" (ViT model)"),QUe=l(),sg=a("li"),pre=a("strong"),HUe=o("vit_mae"),UUe=o(" \u2014 "),_S=a("a"),JUe=o("ViTMAEConfig"),YUe=o(" (ViTMAE model)"),KUe=l(),lg=a("li"),ure=a("strong"),ZUe=o("wav2vec2"),eJe=o(" \u2014 "),bS=a("a"),oJe=o("Wav2Vec2Config"),rJe=o(" (Wav2Vec2 model)"),tJe=l(),ig=a("li"),_re=a("strong"),aJe=o("wav2vec2-conformer"),nJe=o(" \u2014 "),vS=a("a"),sJe=o("Wav2Vec2ConformerConfig"),lJe=o(" (Wav2Vec2-Conformer model)"),iJe=l(),dg=a("li"),bre=a("strong"),dJe=o("wavlm"),cJe=o(" \u2014 "),FS=a("a"),fJe=o("WavLMConfig"),mJe=o(" (WavLM model)"),gJe=l(),cg=a("li"),vre=a("strong"),hJe=o("xglm"),pJe=o(" \u2014 "),TS=a("a"),uJe=o("XGLMConfig"),_Je=o(" (XGLM model)"),bJe=l(),fg=a("li"),Fre=a("strong"),vJe=o("xlm"),FJe=o(" \u2014 "),MS=a("a"),TJe=o("XLMConfig"),MJe=o(" (XLM model)"),EJe=l(),mg=a("li"),Tre=a("strong"),CJe=o("xlm-prophetnet"),wJe=o(" \u2014 "),ES=a("a"),AJe=o("XLMProphetNetConfig"),yJe=o(" (XLMProphetNet model)"),LJe=l(),gg=a("li"),Mre=a("strong"),xJe=o("xlm-roberta"),$Je=o(" \u2014 "),CS=a("a"),kJe=o("XLMRobertaConfig"),SJe=o(" (XLM-RoBERTa model)"),RJe=l(),hg=a("li"),Ere=a("strong"),PJe=o("xlm-roberta-xl"),BJe=o(" \u2014 "),wS=a("a"),IJe=o("XLMRobertaXLConfig"),qJe=o(" (XLM-RoBERTa-XL model)"),NJe=l(),pg=a("li"),Cre=a("strong"),jJe=o("xlnet"),DJe=o(" \u2014 "),AS=a("a"),GJe=o("XLNetConfig"),OJe=o(" (XLNet model)"),VJe=l(),ug=a("li"),wre=a("strong"),XJe=o("yolos"),zJe=o(" \u2014 "),yS=a("a"),WJe=o("YolosConfig"),QJe=o(" (YOLOS model)"),HJe=l(),_g=a("li"),Are=a("strong"),UJe=o("yoso"),JJe=o(" \u2014 "),LS=a("a"),YJe=o("YosoConfig"),KJe=o(" (YOSO model)"),ZJe=l(),F(bg.$$.fragment),eYe=l(),vg=a("div"),F(p6.$$.fragment),oYe=l(),yre=a("p"),rYe=o("Register a new configuration for this class."),IIe=l(),Fi=a("h2"),Fg=a("a"),Lre=a("span"),F(u6.$$.fragment),tYe=l(),xre=a("span"),aYe=o("AutoTokenizer"),qIe=l(),wo=a("div"),F(_6.$$.fragment),nYe=l(),b6=a("p"),sYe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),xS=a("a"),lYe=o("AutoTokenizer.from_pretrained()"),iYe=o(" class method."),dYe=l(),v6=a("p"),cYe=o("This class cannot be instantiated directly using "),$re=a("code"),fYe=o("__init__()"),mYe=o(" (throws an error)."),gYe=l(),Cr=a("div"),F(F6.$$.fragment),hYe=l(),kre=a("p"),pYe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),uYe=l(),Aa=a("p"),_Ye=o("The tokenizer class to instantiate is selected based on the "),Sre=a("code"),bYe=o("model_type"),vYe=o(` property of the config object (either
passed as an argument or loaded from `),Rre=a("code"),FYe=o("pretrained_model_name_or_path"),TYe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pre=a("code"),MYe=o("pretrained_model_name_or_path"),EYe=o(":"),CYe=l(),k=a("ul"),Sn=a("li"),Bre=a("strong"),wYe=o("albert"),AYe=o(" \u2014 "),$S=a("a"),yYe=o("AlbertTokenizer"),LYe=o(" or "),kS=a("a"),xYe=o("AlbertTokenizerFast"),$Ye=o(" (ALBERT model)"),kYe=l(),Rn=a("li"),Ire=a("strong"),SYe=o("bart"),RYe=o(" \u2014 "),SS=a("a"),PYe=o("BartTokenizer"),BYe=o(" or "),RS=a("a"),IYe=o("BartTokenizerFast"),qYe=o(" (BART model)"),NYe=l(),Pn=a("li"),qre=a("strong"),jYe=o("barthez"),DYe=o(" \u2014 "),PS=a("a"),GYe=o("BarthezTokenizer"),OYe=o(" or "),BS=a("a"),VYe=o("BarthezTokenizerFast"),XYe=o(" (BARThez model)"),zYe=l(),Tg=a("li"),Nre=a("strong"),WYe=o("bartpho"),QYe=o(" \u2014 "),IS=a("a"),HYe=o("BartphoTokenizer"),UYe=o(" (BARTpho model)"),JYe=l(),Bn=a("li"),jre=a("strong"),YYe=o("bert"),KYe=o(" \u2014 "),qS=a("a"),ZYe=o("BertTokenizer"),eKe=o(" or "),NS=a("a"),oKe=o("BertTokenizerFast"),rKe=o(" (BERT model)"),tKe=l(),Mg=a("li"),Dre=a("strong"),aKe=o("bert-generation"),nKe=o(" \u2014 "),jS=a("a"),sKe=o("BertGenerationTokenizer"),lKe=o(" (Bert Generation model)"),iKe=l(),Eg=a("li"),Gre=a("strong"),dKe=o("bert-japanese"),cKe=o(" \u2014 "),DS=a("a"),fKe=o("BertJapaneseTokenizer"),mKe=o(" (BertJapanese model)"),gKe=l(),Cg=a("li"),Ore=a("strong"),hKe=o("bertweet"),pKe=o(" \u2014 "),GS=a("a"),uKe=o("BertweetTokenizer"),_Ke=o(" (Bertweet model)"),bKe=l(),In=a("li"),Vre=a("strong"),vKe=o("big_bird"),FKe=o(" \u2014 "),OS=a("a"),TKe=o("BigBirdTokenizer"),MKe=o(" or "),VS=a("a"),EKe=o("BigBirdTokenizerFast"),CKe=o(" (BigBird model)"),wKe=l(),qn=a("li"),Xre=a("strong"),AKe=o("bigbird_pegasus"),yKe=o(" \u2014 "),XS=a("a"),LKe=o("PegasusTokenizer"),xKe=o(" or "),zS=a("a"),$Ke=o("PegasusTokenizerFast"),kKe=o(" (BigBirdPegasus model)"),SKe=l(),Nn=a("li"),zre=a("strong"),RKe=o("blenderbot"),PKe=o(" \u2014 "),WS=a("a"),BKe=o("BlenderbotTokenizer"),IKe=o(" or "),QS=a("a"),qKe=o("BlenderbotTokenizerFast"),NKe=o(" (Blenderbot model)"),jKe=l(),wg=a("li"),Wre=a("strong"),DKe=o("blenderbot-small"),GKe=o(" \u2014 "),HS=a("a"),OKe=o("BlenderbotSmallTokenizer"),VKe=o(" (BlenderbotSmall model)"),XKe=l(),Ag=a("li"),Qre=a("strong"),zKe=o("byt5"),WKe=o(" \u2014 "),US=a("a"),QKe=o("ByT5Tokenizer"),HKe=o(" (ByT5 model)"),UKe=l(),jn=a("li"),Hre=a("strong"),JKe=o("camembert"),YKe=o(" \u2014 "),JS=a("a"),KKe=o("CamembertTokenizer"),ZKe=o(" or "),YS=a("a"),eZe=o("CamembertTokenizerFast"),oZe=o(" (CamemBERT model)"),rZe=l(),yg=a("li"),Ure=a("strong"),tZe=o("canine"),aZe=o(" \u2014 "),KS=a("a"),nZe=o("CanineTokenizer"),sZe=o(" (Canine model)"),lZe=l(),Dn=a("li"),Jre=a("strong"),iZe=o("clip"),dZe=o(" \u2014 "),ZS=a("a"),cZe=o("CLIPTokenizer"),fZe=o(" or "),eR=a("a"),mZe=o("CLIPTokenizerFast"),gZe=o(" (CLIP model)"),hZe=l(),Gn=a("li"),Yre=a("strong"),pZe=o("convbert"),uZe=o(" \u2014 "),oR=a("a"),_Ze=o("ConvBertTokenizer"),bZe=o(" or "),rR=a("a"),vZe=o("ConvBertTokenizerFast"),FZe=o(" (ConvBERT model)"),TZe=l(),On=a("li"),Kre=a("strong"),MZe=o("cpm"),EZe=o(" \u2014 "),tR=a("a"),CZe=o("CpmTokenizer"),wZe=o(" or "),aR=a("a"),AZe=o("CpmTokenizerFast"),yZe=o(" (CPM model)"),LZe=l(),Lg=a("li"),Zre=a("strong"),xZe=o("ctrl"),$Ze=o(" \u2014 "),nR=a("a"),kZe=o("CTRLTokenizer"),SZe=o(" (CTRL model)"),RZe=l(),Vn=a("li"),ete=a("strong"),PZe=o("data2vec-text"),BZe=o(" \u2014 "),sR=a("a"),IZe=o("RobertaTokenizer"),qZe=o(" or "),lR=a("a"),NZe=o("RobertaTokenizerFast"),jZe=o(" (Data2VecText model)"),DZe=l(),Xn=a("li"),ote=a("strong"),GZe=o("deberta"),OZe=o(" \u2014 "),iR=a("a"),VZe=o("DebertaTokenizer"),XZe=o(" or "),dR=a("a"),zZe=o("DebertaTokenizerFast"),WZe=o(" (DeBERTa model)"),QZe=l(),zn=a("li"),rte=a("strong"),HZe=o("deberta-v2"),UZe=o(" \u2014 "),cR=a("a"),JZe=o("DebertaV2Tokenizer"),YZe=o(" or "),fR=a("a"),KZe=o("DebertaV2TokenizerFast"),ZZe=o(" (DeBERTa-v2 model)"),eeo=l(),Wn=a("li"),tte=a("strong"),oeo=o("distilbert"),reo=o(" \u2014 "),mR=a("a"),teo=o("DistilBertTokenizer"),aeo=o(" or "),gR=a("a"),neo=o("DistilBertTokenizerFast"),seo=o(" (DistilBERT model)"),leo=l(),Qn=a("li"),ate=a("strong"),ieo=o("dpr"),deo=o(" \u2014 "),hR=a("a"),ceo=o("DPRQuestionEncoderTokenizer"),feo=o(" or "),pR=a("a"),meo=o("DPRQuestionEncoderTokenizerFast"),geo=o(" (DPR model)"),heo=l(),Hn=a("li"),nte=a("strong"),peo=o("electra"),ueo=o(" \u2014 "),uR=a("a"),_eo=o("ElectraTokenizer"),beo=o(" or "),_R=a("a"),veo=o("ElectraTokenizerFast"),Feo=o(" (ELECTRA model)"),Teo=l(),xg=a("li"),ste=a("strong"),Meo=o("flaubert"),Eeo=o(" \u2014 "),bR=a("a"),Ceo=o("FlaubertTokenizer"),weo=o(" (FlauBERT model)"),Aeo=l(),Un=a("li"),lte=a("strong"),yeo=o("fnet"),Leo=o(" \u2014 "),vR=a("a"),xeo=o("FNetTokenizer"),$eo=o(" or "),FR=a("a"),keo=o("FNetTokenizerFast"),Seo=o(" (FNet model)"),Reo=l(),$g=a("li"),ite=a("strong"),Peo=o("fsmt"),Beo=o(" \u2014 "),TR=a("a"),Ieo=o("FSMTTokenizer"),qeo=o(" (FairSeq Machine-Translation model)"),Neo=l(),Jn=a("li"),dte=a("strong"),jeo=o("funnel"),Deo=o(" \u2014 "),MR=a("a"),Geo=o("FunnelTokenizer"),Oeo=o(" or "),ER=a("a"),Veo=o("FunnelTokenizerFast"),Xeo=o(" (Funnel Transformer model)"),zeo=l(),Yn=a("li"),cte=a("strong"),Weo=o("gpt2"),Qeo=o(" \u2014 "),CR=a("a"),Heo=o("GPT2Tokenizer"),Ueo=o(" or "),wR=a("a"),Jeo=o("GPT2TokenizerFast"),Yeo=o(" (OpenAI GPT-2 model)"),Keo=l(),Kn=a("li"),fte=a("strong"),Zeo=o("gpt_neo"),eoo=o(" \u2014 "),AR=a("a"),ooo=o("GPT2Tokenizer"),roo=o(" or "),yR=a("a"),too=o("GPT2TokenizerFast"),aoo=o(" (GPT Neo model)"),noo=l(),Zn=a("li"),mte=a("strong"),soo=o("gptj"),loo=o(" \u2014 "),LR=a("a"),ioo=o("GPT2Tokenizer"),doo=o(" or "),xR=a("a"),coo=o("GPT2TokenizerFast"),foo=o(" (GPT-J model)"),moo=l(),es=a("li"),gte=a("strong"),goo=o("herbert"),hoo=o(" \u2014 "),$R=a("a"),poo=o("HerbertTokenizer"),uoo=o(" or "),kR=a("a"),_oo=o("HerbertTokenizerFast"),boo=o(" (HerBERT model)"),voo=l(),kg=a("li"),hte=a("strong"),Foo=o("hubert"),Too=o(" \u2014 "),SR=a("a"),Moo=o("Wav2Vec2CTCTokenizer"),Eoo=o(" (Hubert model)"),Coo=l(),os=a("li"),pte=a("strong"),woo=o("ibert"),Aoo=o(" \u2014 "),RR=a("a"),yoo=o("RobertaTokenizer"),Loo=o(" or "),PR=a("a"),xoo=o("RobertaTokenizerFast"),$oo=o(" (I-BERT model)"),koo=l(),rs=a("li"),ute=a("strong"),Soo=o("layoutlm"),Roo=o(" \u2014 "),BR=a("a"),Poo=o("LayoutLMTokenizer"),Boo=o(" or "),IR=a("a"),Ioo=o("LayoutLMTokenizerFast"),qoo=o(" (LayoutLM model)"),Noo=l(),ts=a("li"),_te=a("strong"),joo=o("layoutlmv2"),Doo=o(" \u2014 "),qR=a("a"),Goo=o("LayoutLMv2Tokenizer"),Ooo=o(" or "),NR=a("a"),Voo=o("LayoutLMv2TokenizerFast"),Xoo=o(" (LayoutLMv2 model)"),zoo=l(),as=a("li"),bte=a("strong"),Woo=o("layoutxlm"),Qoo=o(" \u2014 "),jR=a("a"),Hoo=o("LayoutXLMTokenizer"),Uoo=o(" or "),DR=a("a"),Joo=o("LayoutXLMTokenizerFast"),Yoo=o(" (LayoutXLM model)"),Koo=l(),ns=a("li"),vte=a("strong"),Zoo=o("led"),ero=o(" \u2014 "),GR=a("a"),oro=o("LEDTokenizer"),rro=o(" or "),OR=a("a"),tro=o("LEDTokenizerFast"),aro=o(" (LED model)"),nro=l(),ss=a("li"),Fte=a("strong"),sro=o("longformer"),lro=o(" \u2014 "),VR=a("a"),iro=o("LongformerTokenizer"),dro=o(" or "),XR=a("a"),cro=o("LongformerTokenizerFast"),fro=o(" (Longformer model)"),mro=l(),Sg=a("li"),Tte=a("strong"),gro=o("luke"),hro=o(" \u2014 "),zR=a("a"),pro=o("LukeTokenizer"),uro=o(" (LUKE model)"),_ro=l(),ls=a("li"),Mte=a("strong"),bro=o("lxmert"),vro=o(" \u2014 "),WR=a("a"),Fro=o("LxmertTokenizer"),Tro=o(" or "),QR=a("a"),Mro=o("LxmertTokenizerFast"),Ero=o(" (LXMERT model)"),Cro=l(),Rg=a("li"),Ete=a("strong"),wro=o("m2m_100"),Aro=o(" \u2014 "),HR=a("a"),yro=o("M2M100Tokenizer"),Lro=o(" (M2M100 model)"),xro=l(),Pg=a("li"),Cte=a("strong"),$ro=o("marian"),kro=o(" \u2014 "),UR=a("a"),Sro=o("MarianTokenizer"),Rro=o(" (Marian model)"),Pro=l(),is=a("li"),wte=a("strong"),Bro=o("mbart"),Iro=o(" \u2014 "),JR=a("a"),qro=o("MBartTokenizer"),Nro=o(" or "),YR=a("a"),jro=o("MBartTokenizerFast"),Dro=o(" (mBART model)"),Gro=l(),ds=a("li"),Ate=a("strong"),Oro=o("mbart50"),Vro=o(" \u2014 "),KR=a("a"),Xro=o("MBart50Tokenizer"),zro=o(" or "),ZR=a("a"),Wro=o("MBart50TokenizerFast"),Qro=o(" (mBART-50 model)"),Hro=l(),cs=a("li"),yte=a("strong"),Uro=o("megatron-bert"),Jro=o(" \u2014 "),eP=a("a"),Yro=o("BertTokenizer"),Kro=o(" or "),oP=a("a"),Zro=o("BertTokenizerFast"),eto=o(" (MegatronBert model)"),oto=l(),Bg=a("li"),Lte=a("strong"),rto=o("mluke"),tto=o(" \u2014 "),rP=a("a"),ato=o("MLukeTokenizer"),nto=o(" (mLUKE model)"),sto=l(),fs=a("li"),xte=a("strong"),lto=o("mobilebert"),ito=o(" \u2014 "),tP=a("a"),dto=o("MobileBertTokenizer"),cto=o(" or "),aP=a("a"),fto=o("MobileBertTokenizerFast"),mto=o(" (MobileBERT model)"),gto=l(),ms=a("li"),$te=a("strong"),hto=o("mpnet"),pto=o(" \u2014 "),nP=a("a"),uto=o("MPNetTokenizer"),_to=o(" or "),sP=a("a"),bto=o("MPNetTokenizerFast"),vto=o(" (MPNet model)"),Fto=l(),gs=a("li"),kte=a("strong"),Tto=o("mt5"),Mto=o(" \u2014 "),lP=a("a"),Eto=o("MT5Tokenizer"),Cto=o(" or "),iP=a("a"),wto=o("MT5TokenizerFast"),Ato=o(" (mT5 model)"),yto=l(),hs=a("li"),Ste=a("strong"),Lto=o("nystromformer"),xto=o(" \u2014 "),dP=a("a"),$to=o("AlbertTokenizer"),kto=o(" or "),cP=a("a"),Sto=o("AlbertTokenizerFast"),Rto=o(" (Nystromformer model)"),Pto=l(),ps=a("li"),Rte=a("strong"),Bto=o("openai-gpt"),Ito=o(" \u2014 "),fP=a("a"),qto=o("OpenAIGPTTokenizer"),Nto=o(" or "),mP=a("a"),jto=o("OpenAIGPTTokenizerFast"),Dto=o(" (OpenAI GPT model)"),Gto=l(),Ig=a("li"),Pte=a("strong"),Oto=o("opt"),Vto=o(" \u2014 "),gP=a("a"),Xto=o("GPT2Tokenizer"),zto=o(" (OPT model)"),Wto=l(),us=a("li"),Bte=a("strong"),Qto=o("pegasus"),Hto=o(" \u2014 "),hP=a("a"),Uto=o("PegasusTokenizer"),Jto=o(" or "),pP=a("a"),Yto=o("PegasusTokenizerFast"),Kto=o(" (Pegasus model)"),Zto=l(),qg=a("li"),Ite=a("strong"),eao=o("perceiver"),oao=o(" \u2014 "),uP=a("a"),rao=o("PerceiverTokenizer"),tao=o(" (Perceiver model)"),aao=l(),Ng=a("li"),qte=a("strong"),nao=o("phobert"),sao=o(" \u2014 "),_P=a("a"),lao=o("PhobertTokenizer"),iao=o(" (PhoBERT model)"),dao=l(),jg=a("li"),Nte=a("strong"),cao=o("plbart"),fao=o(" \u2014 "),bP=a("a"),mao=o("PLBartTokenizer"),gao=o(" (PLBart model)"),hao=l(),Dg=a("li"),jte=a("strong"),pao=o("prophetnet"),uao=o(" \u2014 "),vP=a("a"),_ao=o("ProphetNetTokenizer"),bao=o(" (ProphetNet model)"),vao=l(),_s=a("li"),Dte=a("strong"),Fao=o("qdqbert"),Tao=o(" \u2014 "),FP=a("a"),Mao=o("BertTokenizer"),Eao=o(" or "),TP=a("a"),Cao=o("BertTokenizerFast"),wao=o(" (QDQBert model)"),Aao=l(),Gg=a("li"),Gte=a("strong"),yao=o("rag"),Lao=o(" \u2014 "),MP=a("a"),xao=o("RagTokenizer"),$ao=o(" (RAG model)"),kao=l(),bs=a("li"),Ote=a("strong"),Sao=o("realm"),Rao=o(" \u2014 "),EP=a("a"),Pao=o("RealmTokenizer"),Bao=o(" or "),CP=a("a"),Iao=o("RealmTokenizerFast"),qao=o(" (Realm model)"),Nao=l(),vs=a("li"),Vte=a("strong"),jao=o("reformer"),Dao=o(" \u2014 "),wP=a("a"),Gao=o("ReformerTokenizer"),Oao=o(" or "),AP=a("a"),Vao=o("ReformerTokenizerFast"),Xao=o(" (Reformer model)"),zao=l(),Fs=a("li"),Xte=a("strong"),Wao=o("rembert"),Qao=o(" \u2014 "),yP=a("a"),Hao=o("RemBertTokenizer"),Uao=o(" or "),LP=a("a"),Jao=o("RemBertTokenizerFast"),Yao=o(" (RemBERT model)"),Kao=l(),Ts=a("li"),zte=a("strong"),Zao=o("retribert"),eno=o(" \u2014 "),xP=a("a"),ono=o("RetriBertTokenizer"),rno=o(" or "),$P=a("a"),tno=o("RetriBertTokenizerFast"),ano=o(" (RetriBERT model)"),nno=l(),Ms=a("li"),Wte=a("strong"),sno=o("roberta"),lno=o(" \u2014 "),kP=a("a"),ino=o("RobertaTokenizer"),dno=o(" or "),SP=a("a"),cno=o("RobertaTokenizerFast"),fno=o(" (RoBERTa model)"),mno=l(),Es=a("li"),Qte=a("strong"),gno=o("roformer"),hno=o(" \u2014 "),RP=a("a"),pno=o("RoFormerTokenizer"),uno=o(" or "),PP=a("a"),_no=o("RoFormerTokenizerFast"),bno=o(" (RoFormer model)"),vno=l(),Og=a("li"),Hte=a("strong"),Fno=o("speech_to_text"),Tno=o(" \u2014 "),BP=a("a"),Mno=o("Speech2TextTokenizer"),Eno=o(" (Speech2Text model)"),Cno=l(),Vg=a("li"),Ute=a("strong"),wno=o("speech_to_text_2"),Ano=o(" \u2014 "),IP=a("a"),yno=o("Speech2Text2Tokenizer"),Lno=o(" (Speech2Text2 model)"),xno=l(),Cs=a("li"),Jte=a("strong"),$no=o("splinter"),kno=o(" \u2014 "),qP=a("a"),Sno=o("SplinterTokenizer"),Rno=o(" or "),NP=a("a"),Pno=o("SplinterTokenizerFast"),Bno=o(" (Splinter model)"),Ino=l(),ws=a("li"),Yte=a("strong"),qno=o("squeezebert"),Nno=o(" \u2014 "),jP=a("a"),jno=o("SqueezeBertTokenizer"),Dno=o(" or "),DP=a("a"),Gno=o("SqueezeBertTokenizerFast"),Ono=o(" (SqueezeBERT model)"),Vno=l(),As=a("li"),Kte=a("strong"),Xno=o("t5"),zno=o(" \u2014 "),GP=a("a"),Wno=o("T5Tokenizer"),Qno=o(" or "),OP=a("a"),Hno=o("T5TokenizerFast"),Uno=o(" (T5 model)"),Jno=l(),Xg=a("li"),Zte=a("strong"),Yno=o("tapas"),Kno=o(" \u2014 "),VP=a("a"),Zno=o("TapasTokenizer"),eso=o(" (TAPAS model)"),oso=l(),zg=a("li"),eae=a("strong"),rso=o("tapex"),tso=o(" \u2014 "),XP=a("a"),aso=o("TapexTokenizer"),nso=o(" (TAPEX model)"),sso=l(),Wg=a("li"),oae=a("strong"),lso=o("transfo-xl"),iso=o(" \u2014 "),zP=a("a"),dso=o("TransfoXLTokenizer"),cso=o(" (Transformer-XL model)"),fso=l(),ys=a("li"),rae=a("strong"),mso=o("visual_bert"),gso=o(" \u2014 "),WP=a("a"),hso=o("BertTokenizer"),pso=o(" or "),QP=a("a"),uso=o("BertTokenizerFast"),_so=o(" (VisualBert model)"),bso=l(),Qg=a("li"),tae=a("strong"),vso=o("wav2vec2"),Fso=o(" \u2014 "),HP=a("a"),Tso=o("Wav2Vec2CTCTokenizer"),Mso=o(" (Wav2Vec2 model)"),Eso=l(),Hg=a("li"),aae=a("strong"),Cso=o("wav2vec2-conformer"),wso=o(" \u2014 "),UP=a("a"),Aso=o("Wav2Vec2CTCTokenizer"),yso=o(" (Wav2Vec2-Conformer model)"),Lso=l(),Ug=a("li"),nae=a("strong"),xso=o("wav2vec2_phoneme"),$so=o(" \u2014 "),JP=a("a"),kso=o("Wav2Vec2PhonemeCTCTokenizer"),Sso=o(" (Wav2Vec2Phoneme model)"),Rso=l(),Ls=a("li"),sae=a("strong"),Pso=o("xglm"),Bso=o(" \u2014 "),YP=a("a"),Iso=o("XGLMTokenizer"),qso=o(" or "),KP=a("a"),Nso=o("XGLMTokenizerFast"),jso=o(" (XGLM model)"),Dso=l(),Jg=a("li"),lae=a("strong"),Gso=o("xlm"),Oso=o(" \u2014 "),ZP=a("a"),Vso=o("XLMTokenizer"),Xso=o(" (XLM model)"),zso=l(),Yg=a("li"),iae=a("strong"),Wso=o("xlm-prophetnet"),Qso=o(" \u2014 "),eB=a("a"),Hso=o("XLMProphetNetTokenizer"),Uso=o(" (XLMProphetNet model)"),Jso=l(),xs=a("li"),dae=a("strong"),Yso=o("xlm-roberta"),Kso=o(" \u2014 "),oB=a("a"),Zso=o("XLMRobertaTokenizer"),elo=o(" or "),rB=a("a"),olo=o("XLMRobertaTokenizerFast"),rlo=o(" (XLM-RoBERTa model)"),tlo=l(),$s=a("li"),cae=a("strong"),alo=o("xlm-roberta-xl"),nlo=o(" \u2014 "),tB=a("a"),slo=o("RobertaTokenizer"),llo=o(" or "),aB=a("a"),ilo=o("RobertaTokenizerFast"),dlo=o(" (XLM-RoBERTa-XL model)"),clo=l(),ks=a("li"),fae=a("strong"),flo=o("xlnet"),mlo=o(" \u2014 "),nB=a("a"),glo=o("XLNetTokenizer"),hlo=o(" or "),sB=a("a"),plo=o("XLNetTokenizerFast"),ulo=o(" (XLNet model)"),_lo=l(),Ss=a("li"),mae=a("strong"),blo=o("yoso"),vlo=o(" \u2014 "),lB=a("a"),Flo=o("AlbertTokenizer"),Tlo=o(" or "),iB=a("a"),Mlo=o("AlbertTokenizerFast"),Elo=o(" (YOSO model)"),Clo=l(),F(Kg.$$.fragment),wlo=l(),Zg=a("div"),F(T6.$$.fragment),Alo=l(),gae=a("p"),ylo=o("Register a new tokenizer in this mapping."),NIe=l(),Ti=a("h2"),eh=a("a"),hae=a("span"),F(M6.$$.fragment),Llo=l(),pae=a("span"),xlo=o("AutoFeatureExtractor"),jIe=l(),Ao=a("div"),F(E6.$$.fragment),$lo=l(),C6=a("p"),klo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),dB=a("a"),Slo=o("AutoFeatureExtractor.from_pretrained()"),Rlo=o(" class method."),Plo=l(),w6=a("p"),Blo=o("This class cannot be instantiated directly using "),uae=a("code"),Ilo=o("__init__()"),qlo=o(" (throws an error)."),Nlo=l(),He=a("div"),F(A6.$$.fragment),jlo=l(),_ae=a("p"),Dlo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Glo=l(),ya=a("p"),Olo=o("The feature extractor class to instantiate is selected based on the "),bae=a("code"),Vlo=o("model_type"),Xlo=o(` property of the config object
(either passed as an argument or loaded from `),vae=a("code"),zlo=o("pretrained_model_name_or_path"),Wlo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Fae=a("code"),Qlo=o("pretrained_model_name_or_path"),Hlo=o(":"),Ulo=l(),Z=a("ul"),oh=a("li"),Tae=a("strong"),Jlo=o("beit"),Ylo=o(" \u2014 "),cB=a("a"),Klo=o("BeitFeatureExtractor"),Zlo=o(" (BEiT model)"),eio=l(),rh=a("li"),Mae=a("strong"),oio=o("clip"),rio=o(" \u2014 "),fB=a("a"),tio=o("CLIPFeatureExtractor"),aio=o(" (CLIP model)"),nio=l(),th=a("li"),Eae=a("strong"),sio=o("convnext"),lio=o(" \u2014 "),mB=a("a"),iio=o("ConvNextFeatureExtractor"),dio=o(" (ConvNext model)"),cio=l(),ah=a("li"),Cae=a("strong"),fio=o("data2vec-audio"),mio=o(" \u2014 "),gB=a("a"),gio=o("Wav2Vec2FeatureExtractor"),hio=o(" (Data2VecAudio model)"),pio=l(),nh=a("li"),wae=a("strong"),uio=o("data2vec-vision"),_io=o(" \u2014 "),hB=a("a"),bio=o("BeitFeatureExtractor"),vio=o(" (Data2VecVision model)"),Fio=l(),sh=a("li"),Aae=a("strong"),Tio=o("deit"),Mio=o(" \u2014 "),pB=a("a"),Eio=o("DeiTFeatureExtractor"),Cio=o(" (DeiT model)"),wio=l(),lh=a("li"),yae=a("strong"),Aio=o("detr"),yio=o(" \u2014 "),uB=a("a"),Lio=o("DetrFeatureExtractor"),xio=o(" (DETR model)"),$io=l(),ih=a("li"),Lae=a("strong"),kio=o("dpt"),Sio=o(" \u2014 "),_B=a("a"),Rio=o("DPTFeatureExtractor"),Pio=o(" (DPT model)"),Bio=l(),dh=a("li"),xae=a("strong"),Iio=o("flava"),qio=o(" \u2014 "),bB=a("a"),Nio=o("FlavaFeatureExtractor"),jio=o(" (Flava model)"),Dio=l(),ch=a("li"),$ae=a("strong"),Gio=o("glpn"),Oio=o(" \u2014 "),vB=a("a"),Vio=o("GLPNFeatureExtractor"),Xio=o(" (GLPN model)"),zio=l(),fh=a("li"),kae=a("strong"),Wio=o("hubert"),Qio=o(" \u2014 "),FB=a("a"),Hio=o("Wav2Vec2FeatureExtractor"),Uio=o(" (Hubert model)"),Jio=l(),mh=a("li"),Sae=a("strong"),Yio=o("layoutlmv2"),Kio=o(" \u2014 "),TB=a("a"),Zio=o("LayoutLMv2FeatureExtractor"),edo=o(" (LayoutLMv2 model)"),odo=l(),gh=a("li"),Rae=a("strong"),rdo=o("maskformer"),tdo=o(" \u2014 "),MB=a("a"),ado=o("MaskFormerFeatureExtractor"),ndo=o(" (MaskFormer model)"),sdo=l(),hh=a("li"),Pae=a("strong"),ldo=o("perceiver"),ido=o(" \u2014 "),EB=a("a"),ddo=o("PerceiverFeatureExtractor"),cdo=o(" (Perceiver model)"),fdo=l(),ph=a("li"),Bae=a("strong"),mdo=o("poolformer"),gdo=o(" \u2014 "),CB=a("a"),hdo=o("PoolFormerFeatureExtractor"),pdo=o(" (PoolFormer model)"),udo=l(),uh=a("li"),Iae=a("strong"),_do=o("regnet"),bdo=o(" \u2014 "),wB=a("a"),vdo=o("ConvNextFeatureExtractor"),Fdo=o(" (RegNet model)"),Tdo=l(),_h=a("li"),qae=a("strong"),Mdo=o("resnet"),Edo=o(" \u2014 "),AB=a("a"),Cdo=o("ConvNextFeatureExtractor"),wdo=o(" (ResNet model)"),Ado=l(),bh=a("li"),Nae=a("strong"),ydo=o("segformer"),Ldo=o(" \u2014 "),yB=a("a"),xdo=o("SegformerFeatureExtractor"),$do=o(" (SegFormer model)"),kdo=l(),vh=a("li"),jae=a("strong"),Sdo=o("speech_to_text"),Rdo=o(" \u2014 "),LB=a("a"),Pdo=o("Speech2TextFeatureExtractor"),Bdo=o(" (Speech2Text model)"),Ido=l(),Fh=a("li"),Dae=a("strong"),qdo=o("swin"),Ndo=o(" \u2014 "),xB=a("a"),jdo=o("ViTFeatureExtractor"),Ddo=o(" (Swin model)"),Gdo=l(),Th=a("li"),Gae=a("strong"),Odo=o("van"),Vdo=o(" \u2014 "),$B=a("a"),Xdo=o("ConvNextFeatureExtractor"),zdo=o(" (VAN model)"),Wdo=l(),Mh=a("li"),Oae=a("strong"),Qdo=o("vit"),Hdo=o(" \u2014 "),kB=a("a"),Udo=o("ViTFeatureExtractor"),Jdo=o(" (ViT model)"),Ydo=l(),Eh=a("li"),Vae=a("strong"),Kdo=o("vit_mae"),Zdo=o(" \u2014 "),SB=a("a"),eco=o("ViTFeatureExtractor"),oco=o(" (ViTMAE model)"),rco=l(),Ch=a("li"),Xae=a("strong"),tco=o("wav2vec2"),aco=o(" \u2014 "),RB=a("a"),nco=o("Wav2Vec2FeatureExtractor"),sco=o(" (Wav2Vec2 model)"),lco=l(),wh=a("li"),zae=a("strong"),ico=o("wav2vec2-conformer"),dco=o(" \u2014 "),PB=a("a"),cco=o("Wav2Vec2FeatureExtractor"),fco=o(" (Wav2Vec2-Conformer model)"),mco=l(),Ah=a("li"),Wae=a("strong"),gco=o("yolos"),hco=o(" \u2014 "),BB=a("a"),pco=o("YolosFeatureExtractor"),uco=o(" (YOLOS model)"),_co=l(),F(yh.$$.fragment),bco=l(),F(Lh.$$.fragment),vco=l(),xh=a("div"),F(y6.$$.fragment),Fco=l(),Qae=a("p"),Tco=o("Register a new feature extractor for this class."),DIe=l(),Mi=a("h2"),$h=a("a"),Hae=a("span"),F(L6.$$.fragment),Mco=l(),Uae=a("span"),Eco=o("AutoProcessor"),GIe=l(),yo=a("div"),F(x6.$$.fragment),Cco=l(),$6=a("p"),wco=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),IB=a("a"),Aco=o("AutoProcessor.from_pretrained()"),yco=o(" class method."),Lco=l(),k6=a("p"),xco=o("This class cannot be instantiated directly using "),Jae=a("code"),$co=o("__init__()"),kco=o(" (throws an error)."),Sco=l(),Ue=a("div"),F(S6.$$.fragment),Rco=l(),Yae=a("p"),Pco=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Bco=l(),Ei=a("p"),Ico=o("The processor class to instantiate is selected based on the "),Kae=a("code"),qco=o("model_type"),Nco=o(` property of the config object (either
passed as an argument or loaded from `),Zae=a("code"),jco=o("pretrained_model_name_or_path"),Dco=o(" if possible):"),Gco=l(),pe=a("ul"),kh=a("li"),ene=a("strong"),Oco=o("clip"),Vco=o(" \u2014 "),qB=a("a"),Xco=o("CLIPProcessor"),zco=o(" (CLIP model)"),Wco=l(),Sh=a("li"),one=a("strong"),Qco=o("flava"),Hco=o(" \u2014 "),rne=a("code"),Uco=o("FLAVAProcessor"),Jco=o(" (Flava model)"),Yco=l(),Rh=a("li"),tne=a("strong"),Kco=o("layoutlmv2"),Zco=o(" \u2014 "),NB=a("a"),efo=o("LayoutLMv2Processor"),ofo=o(" (LayoutLMv2 model)"),rfo=l(),Ph=a("li"),ane=a("strong"),tfo=o("layoutxlm"),afo=o(" \u2014 "),jB=a("a"),nfo=o("LayoutXLMProcessor"),sfo=o(" (LayoutXLM model)"),lfo=l(),Bh=a("li"),nne=a("strong"),ifo=o("sew"),dfo=o(" \u2014 "),DB=a("a"),cfo=o("Wav2Vec2Processor"),ffo=o(" (SEW model)"),mfo=l(),Ih=a("li"),sne=a("strong"),gfo=o("sew-d"),hfo=o(" \u2014 "),GB=a("a"),pfo=o("Wav2Vec2Processor"),ufo=o(" (SEW-D model)"),_fo=l(),qh=a("li"),lne=a("strong"),bfo=o("speech_to_text"),vfo=o(" \u2014 "),OB=a("a"),Ffo=o("Speech2TextProcessor"),Tfo=o(" (Speech2Text model)"),Mfo=l(),Nh=a("li"),ine=a("strong"),Efo=o("speech_to_text_2"),Cfo=o(" \u2014 "),VB=a("a"),wfo=o("Speech2Text2Processor"),Afo=o(" (Speech2Text2 model)"),yfo=l(),jh=a("li"),dne=a("strong"),Lfo=o("trocr"),xfo=o(" \u2014 "),XB=a("a"),$fo=o("TrOCRProcessor"),kfo=o(" (TrOCR model)"),Sfo=l(),Dh=a("li"),cne=a("strong"),Rfo=o("unispeech"),Pfo=o(" \u2014 "),zB=a("a"),Bfo=o("Wav2Vec2Processor"),Ifo=o(" (UniSpeech model)"),qfo=l(),Gh=a("li"),fne=a("strong"),Nfo=o("unispeech-sat"),jfo=o(" \u2014 "),WB=a("a"),Dfo=o("Wav2Vec2Processor"),Gfo=o(" (UniSpeechSat model)"),Ofo=l(),Oh=a("li"),mne=a("strong"),Vfo=o("vilt"),Xfo=o(" \u2014 "),QB=a("a"),zfo=o("ViltProcessor"),Wfo=o(" (ViLT model)"),Qfo=l(),Vh=a("li"),gne=a("strong"),Hfo=o("vision-text-dual-encoder"),Ufo=o(" \u2014 "),HB=a("a"),Jfo=o("VisionTextDualEncoderProcessor"),Yfo=o(" (VisionTextDualEncoder model)"),Kfo=l(),Xh=a("li"),hne=a("strong"),Zfo=o("wav2vec2"),emo=o(" \u2014 "),UB=a("a"),omo=o("Wav2Vec2Processor"),rmo=o(" (Wav2Vec2 model)"),tmo=l(),zh=a("li"),pne=a("strong"),amo=o("wav2vec2-conformer"),nmo=o(" \u2014 "),JB=a("a"),smo=o("Wav2Vec2Processor"),lmo=o(" (Wav2Vec2-Conformer model)"),imo=l(),Wh=a("li"),une=a("strong"),dmo=o("wavlm"),cmo=o(" \u2014 "),YB=a("a"),fmo=o("Wav2Vec2Processor"),mmo=o(" (WavLM model)"),gmo=l(),F(Qh.$$.fragment),hmo=l(),F(Hh.$$.fragment),pmo=l(),Uh=a("div"),F(R6.$$.fragment),umo=l(),_ne=a("p"),_mo=o("Register a new processor for this class."),OIe=l(),Ci=a("h2"),Jh=a("a"),bne=a("span"),F(P6.$$.fragment),bmo=l(),vne=a("span"),vmo=o("AutoModel"),VIe=l(),Lo=a("div"),F(B6.$$.fragment),Fmo=l(),wi=a("p"),Tmo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),KB=a("a"),Mmo=o("from_pretrained()"),Emo=o(" class method or the "),ZB=a("a"),Cmo=o("from_config()"),wmo=o(` class
method.`),Amo=l(),I6=a("p"),ymo=o("This class cannot be instantiated directly using "),Fne=a("code"),Lmo=o("__init__()"),xmo=o(" (throws an error)."),$mo=l(),tt=a("div"),F(q6.$$.fragment),kmo=l(),Tne=a("p"),Smo=o("Instantiates one of the base model classes of the library from a configuration."),Rmo=l(),Ai=a("p"),Pmo=o(`Note:
Loading a model from its configuration file does `),Mne=a("strong"),Bmo=o("not"),Imo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eI=a("a"),qmo=o("from_pretrained()"),Nmo=o(" to load the model weights."),jmo=l(),F(Yh.$$.fragment),Dmo=l(),Je=a("div"),F(N6.$$.fragment),Gmo=l(),Ene=a("p"),Omo=o("Instantiate one of the base model classes of the library from a pretrained model."),Vmo=l(),La=a("p"),Xmo=o("The model class to instantiate is selected based on the "),Cne=a("code"),zmo=o("model_type"),Wmo=o(` property of the config object (either
passed as an argument or loaded from `),wne=a("code"),Qmo=o("pretrained_model_name_or_path"),Hmo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ane=a("code"),Umo=o("pretrained_model_name_or_path"),Jmo=o(":"),Ymo=l(),x=a("ul"),Kh=a("li"),yne=a("strong"),Kmo=o("albert"),Zmo=o(" \u2014 "),oI=a("a"),ego=o("AlbertModel"),ogo=o(" (ALBERT model)"),rgo=l(),Zh=a("li"),Lne=a("strong"),tgo=o("bart"),ago=o(" \u2014 "),rI=a("a"),ngo=o("BartModel"),sgo=o(" (BART model)"),lgo=l(),ep=a("li"),xne=a("strong"),igo=o("beit"),dgo=o(" \u2014 "),tI=a("a"),cgo=o("BeitModel"),fgo=o(" (BEiT model)"),mgo=l(),op=a("li"),$ne=a("strong"),ggo=o("bert"),hgo=o(" \u2014 "),aI=a("a"),pgo=o("BertModel"),ugo=o(" (BERT model)"),_go=l(),rp=a("li"),kne=a("strong"),bgo=o("bert-generation"),vgo=o(" \u2014 "),nI=a("a"),Fgo=o("BertGenerationEncoder"),Tgo=o(" (Bert Generation model)"),Mgo=l(),tp=a("li"),Sne=a("strong"),Ego=o("big_bird"),Cgo=o(" \u2014 "),sI=a("a"),wgo=o("BigBirdModel"),Ago=o(" (BigBird model)"),ygo=l(),ap=a("li"),Rne=a("strong"),Lgo=o("bigbird_pegasus"),xgo=o(" \u2014 "),lI=a("a"),$go=o("BigBirdPegasusModel"),kgo=o(" (BigBirdPegasus model)"),Sgo=l(),np=a("li"),Pne=a("strong"),Rgo=o("blenderbot"),Pgo=o(" \u2014 "),iI=a("a"),Bgo=o("BlenderbotModel"),Igo=o(" (Blenderbot model)"),qgo=l(),sp=a("li"),Bne=a("strong"),Ngo=o("blenderbot-small"),jgo=o(" \u2014 "),dI=a("a"),Dgo=o("BlenderbotSmallModel"),Ggo=o(" (BlenderbotSmall model)"),Ogo=l(),lp=a("li"),Ine=a("strong"),Vgo=o("camembert"),Xgo=o(" \u2014 "),cI=a("a"),zgo=o("CamembertModel"),Wgo=o(" (CamemBERT model)"),Qgo=l(),ip=a("li"),qne=a("strong"),Hgo=o("canine"),Ugo=o(" \u2014 "),fI=a("a"),Jgo=o("CanineModel"),Ygo=o(" (Canine model)"),Kgo=l(),dp=a("li"),Nne=a("strong"),Zgo=o("clip"),eho=o(" \u2014 "),mI=a("a"),oho=o("CLIPModel"),rho=o(" (CLIP model)"),tho=l(),cp=a("li"),jne=a("strong"),aho=o("convbert"),nho=o(" \u2014 "),gI=a("a"),sho=o("ConvBertModel"),lho=o(" (ConvBERT model)"),iho=l(),fp=a("li"),Dne=a("strong"),dho=o("convnext"),cho=o(" \u2014 "),hI=a("a"),fho=o("ConvNextModel"),mho=o(" (ConvNext model)"),gho=l(),mp=a("li"),Gne=a("strong"),hho=o("ctrl"),pho=o(" \u2014 "),pI=a("a"),uho=o("CTRLModel"),_ho=o(" (CTRL model)"),bho=l(),gp=a("li"),One=a("strong"),vho=o("data2vec-audio"),Fho=o(" \u2014 "),uI=a("a"),Tho=o("Data2VecAudioModel"),Mho=o(" (Data2VecAudio model)"),Eho=l(),hp=a("li"),Vne=a("strong"),Cho=o("data2vec-text"),who=o(" \u2014 "),_I=a("a"),Aho=o("Data2VecTextModel"),yho=o(" (Data2VecText model)"),Lho=l(),pp=a("li"),Xne=a("strong"),xho=o("data2vec-vision"),$ho=o(" \u2014 "),bI=a("a"),kho=o("Data2VecVisionModel"),Sho=o(" (Data2VecVision model)"),Rho=l(),up=a("li"),zne=a("strong"),Pho=o("deberta"),Bho=o(" \u2014 "),vI=a("a"),Iho=o("DebertaModel"),qho=o(" (DeBERTa model)"),Nho=l(),_p=a("li"),Wne=a("strong"),jho=o("deberta-v2"),Dho=o(" \u2014 "),FI=a("a"),Gho=o("DebertaV2Model"),Oho=o(" (DeBERTa-v2 model)"),Vho=l(),bp=a("li"),Qne=a("strong"),Xho=o("decision_transformer"),zho=o(" \u2014 "),TI=a("a"),Who=o("DecisionTransformerModel"),Qho=o(" (Decision Transformer model)"),Hho=l(),vp=a("li"),Hne=a("strong"),Uho=o("deit"),Jho=o(" \u2014 "),MI=a("a"),Yho=o("DeiTModel"),Kho=o(" (DeiT model)"),Zho=l(),Fp=a("li"),Une=a("strong"),epo=o("detr"),opo=o(" \u2014 "),EI=a("a"),rpo=o("DetrModel"),tpo=o(" (DETR model)"),apo=l(),Tp=a("li"),Jne=a("strong"),npo=o("distilbert"),spo=o(" \u2014 "),CI=a("a"),lpo=o("DistilBertModel"),ipo=o(" (DistilBERT model)"),dpo=l(),Mp=a("li"),Yne=a("strong"),cpo=o("dpr"),fpo=o(" \u2014 "),wI=a("a"),mpo=o("DPRQuestionEncoder"),gpo=o(" (DPR model)"),hpo=l(),Ep=a("li"),Kne=a("strong"),ppo=o("dpt"),upo=o(" \u2014 "),AI=a("a"),_po=o("DPTModel"),bpo=o(" (DPT model)"),vpo=l(),Cp=a("li"),Zne=a("strong"),Fpo=o("electra"),Tpo=o(" \u2014 "),yI=a("a"),Mpo=o("ElectraModel"),Epo=o(" (ELECTRA model)"),Cpo=l(),wp=a("li"),ese=a("strong"),wpo=o("flaubert"),Apo=o(" \u2014 "),LI=a("a"),ypo=o("FlaubertModel"),Lpo=o(" (FlauBERT model)"),xpo=l(),Ap=a("li"),ose=a("strong"),$po=o("flava"),kpo=o(" \u2014 "),xI=a("a"),Spo=o("FlavaModel"),Rpo=o(" (Flava model)"),Ppo=l(),yp=a("li"),rse=a("strong"),Bpo=o("fnet"),Ipo=o(" \u2014 "),$I=a("a"),qpo=o("FNetModel"),Npo=o(" (FNet model)"),jpo=l(),Lp=a("li"),tse=a("strong"),Dpo=o("fsmt"),Gpo=o(" \u2014 "),kI=a("a"),Opo=o("FSMTModel"),Vpo=o(" (FairSeq Machine-Translation model)"),Xpo=l(),Rs=a("li"),ase=a("strong"),zpo=o("funnel"),Wpo=o(" \u2014 "),SI=a("a"),Qpo=o("FunnelModel"),Hpo=o(" or "),RI=a("a"),Upo=o("FunnelBaseModel"),Jpo=o(" (Funnel Transformer model)"),Ypo=l(),xp=a("li"),nse=a("strong"),Kpo=o("glpn"),Zpo=o(" \u2014 "),PI=a("a"),euo=o("GLPNModel"),ouo=o(" (GLPN model)"),ruo=l(),$p=a("li"),sse=a("strong"),tuo=o("gpt2"),auo=o(" \u2014 "),BI=a("a"),nuo=o("GPT2Model"),suo=o(" (OpenAI GPT-2 model)"),luo=l(),kp=a("li"),lse=a("strong"),iuo=o("gpt_neo"),duo=o(" \u2014 "),II=a("a"),cuo=o("GPTNeoModel"),fuo=o(" (GPT Neo model)"),muo=l(),Sp=a("li"),ise=a("strong"),guo=o("gptj"),huo=o(" \u2014 "),qI=a("a"),puo=o("GPTJModel"),uuo=o(" (GPT-J model)"),_uo=l(),Rp=a("li"),dse=a("strong"),buo=o("hubert"),vuo=o(" \u2014 "),NI=a("a"),Fuo=o("HubertModel"),Tuo=o(" (Hubert model)"),Muo=l(),Pp=a("li"),cse=a("strong"),Euo=o("ibert"),Cuo=o(" \u2014 "),jI=a("a"),wuo=o("IBertModel"),Auo=o(" (I-BERT model)"),yuo=l(),Bp=a("li"),fse=a("strong"),Luo=o("imagegpt"),xuo=o(" \u2014 "),DI=a("a"),$uo=o("ImageGPTModel"),kuo=o(" (ImageGPT model)"),Suo=l(),Ip=a("li"),mse=a("strong"),Ruo=o("layoutlm"),Puo=o(" \u2014 "),GI=a("a"),Buo=o("LayoutLMModel"),Iuo=o(" (LayoutLM model)"),quo=l(),qp=a("li"),gse=a("strong"),Nuo=o("layoutlmv2"),juo=o(" \u2014 "),OI=a("a"),Duo=o("LayoutLMv2Model"),Guo=o(" (LayoutLMv2 model)"),Ouo=l(),Np=a("li"),hse=a("strong"),Vuo=o("led"),Xuo=o(" \u2014 "),VI=a("a"),zuo=o("LEDModel"),Wuo=o(" (LED model)"),Quo=l(),jp=a("li"),pse=a("strong"),Huo=o("longformer"),Uuo=o(" \u2014 "),XI=a("a"),Juo=o("LongformerModel"),Yuo=o(" (Longformer model)"),Kuo=l(),Dp=a("li"),use=a("strong"),Zuo=o("luke"),e_o=o(" \u2014 "),zI=a("a"),o_o=o("LukeModel"),r_o=o(" (LUKE model)"),t_o=l(),Gp=a("li"),_se=a("strong"),a_o=o("lxmert"),n_o=o(" \u2014 "),WI=a("a"),s_o=o("LxmertModel"),l_o=o(" (LXMERT model)"),i_o=l(),Op=a("li"),bse=a("strong"),d_o=o("m2m_100"),c_o=o(" \u2014 "),QI=a("a"),f_o=o("M2M100Model"),m_o=o(" (M2M100 model)"),g_o=l(),Vp=a("li"),vse=a("strong"),h_o=o("marian"),p_o=o(" \u2014 "),HI=a("a"),u_o=o("MarianModel"),__o=o(" (Marian model)"),b_o=l(),Xp=a("li"),Fse=a("strong"),v_o=o("maskformer"),F_o=o(" \u2014 "),UI=a("a"),T_o=o("MaskFormerModel"),M_o=o(" (MaskFormer model)"),E_o=l(),zp=a("li"),Tse=a("strong"),C_o=o("mbart"),w_o=o(" \u2014 "),JI=a("a"),A_o=o("MBartModel"),y_o=o(" (mBART model)"),L_o=l(),Wp=a("li"),Mse=a("strong"),x_o=o("megatron-bert"),$_o=o(" \u2014 "),YI=a("a"),k_o=o("MegatronBertModel"),S_o=o(" (MegatronBert model)"),R_o=l(),Qp=a("li"),Ese=a("strong"),P_o=o("mobilebert"),B_o=o(" \u2014 "),KI=a("a"),I_o=o("MobileBertModel"),q_o=o(" (MobileBERT model)"),N_o=l(),Hp=a("li"),Cse=a("strong"),j_o=o("mpnet"),D_o=o(" \u2014 "),ZI=a("a"),G_o=o("MPNetModel"),O_o=o(" (MPNet model)"),V_o=l(),Up=a("li"),wse=a("strong"),X_o=o("mt5"),z_o=o(" \u2014 "),eq=a("a"),W_o=o("MT5Model"),Q_o=o(" (mT5 model)"),H_o=l(),Jp=a("li"),Ase=a("strong"),U_o=o("nystromformer"),J_o=o(" \u2014 "),oq=a("a"),Y_o=o("NystromformerModel"),K_o=o(" (Nystromformer model)"),Z_o=l(),Yp=a("li"),yse=a("strong"),e1o=o("openai-gpt"),o1o=o(" \u2014 "),rq=a("a"),r1o=o("OpenAIGPTModel"),t1o=o(" (OpenAI GPT model)"),a1o=l(),Kp=a("li"),Lse=a("strong"),n1o=o("opt"),s1o=o(" \u2014 "),tq=a("a"),l1o=o("OPTModel"),i1o=o(" (OPT model)"),d1o=l(),Zp=a("li"),xse=a("strong"),c1o=o("pegasus"),f1o=o(" \u2014 "),aq=a("a"),m1o=o("PegasusModel"),g1o=o(" (Pegasus model)"),h1o=l(),eu=a("li"),$se=a("strong"),p1o=o("perceiver"),u1o=o(" \u2014 "),nq=a("a"),_1o=o("PerceiverModel"),b1o=o(" (Perceiver model)"),v1o=l(),ou=a("li"),kse=a("strong"),F1o=o("plbart"),T1o=o(" \u2014 "),sq=a("a"),M1o=o("PLBartModel"),E1o=o(" (PLBart model)"),C1o=l(),ru=a("li"),Sse=a("strong"),w1o=o("poolformer"),A1o=o(" \u2014 "),lq=a("a"),y1o=o("PoolFormerModel"),L1o=o(" (PoolFormer model)"),x1o=l(),tu=a("li"),Rse=a("strong"),$1o=o("prophetnet"),k1o=o(" \u2014 "),iq=a("a"),S1o=o("ProphetNetModel"),R1o=o(" (ProphetNet model)"),P1o=l(),au=a("li"),Pse=a("strong"),B1o=o("qdqbert"),I1o=o(" \u2014 "),dq=a("a"),q1o=o("QDQBertModel"),N1o=o(" (QDQBert model)"),j1o=l(),nu=a("li"),Bse=a("strong"),D1o=o("reformer"),G1o=o(" \u2014 "),cq=a("a"),O1o=o("ReformerModel"),V1o=o(" (Reformer model)"),X1o=l(),su=a("li"),Ise=a("strong"),z1o=o("regnet"),W1o=o(" \u2014 "),fq=a("a"),Q1o=o("RegNetModel"),H1o=o(" (RegNet model)"),U1o=l(),lu=a("li"),qse=a("strong"),J1o=o("rembert"),Y1o=o(" \u2014 "),mq=a("a"),K1o=o("RemBertModel"),Z1o=o(" (RemBERT model)"),ebo=l(),iu=a("li"),Nse=a("strong"),obo=o("resnet"),rbo=o(" \u2014 "),gq=a("a"),tbo=o("ResNetModel"),abo=o(" (ResNet model)"),nbo=l(),du=a("li"),jse=a("strong"),sbo=o("retribert"),lbo=o(" \u2014 "),hq=a("a"),ibo=o("RetriBertModel"),dbo=o(" (RetriBERT model)"),cbo=l(),cu=a("li"),Dse=a("strong"),fbo=o("roberta"),mbo=o(" \u2014 "),pq=a("a"),gbo=o("RobertaModel"),hbo=o(" (RoBERTa model)"),pbo=l(),fu=a("li"),Gse=a("strong"),ubo=o("roformer"),_bo=o(" \u2014 "),uq=a("a"),bbo=o("RoFormerModel"),vbo=o(" (RoFormer model)"),Fbo=l(),mu=a("li"),Ose=a("strong"),Tbo=o("segformer"),Mbo=o(" \u2014 "),_q=a("a"),Ebo=o("SegformerModel"),Cbo=o(" (SegFormer model)"),wbo=l(),gu=a("li"),Vse=a("strong"),Abo=o("sew"),ybo=o(" \u2014 "),bq=a("a"),Lbo=o("SEWModel"),xbo=o(" (SEW model)"),$bo=l(),hu=a("li"),Xse=a("strong"),kbo=o("sew-d"),Sbo=o(" \u2014 "),vq=a("a"),Rbo=o("SEWDModel"),Pbo=o(" (SEW-D model)"),Bbo=l(),pu=a("li"),zse=a("strong"),Ibo=o("speech_to_text"),qbo=o(" \u2014 "),Fq=a("a"),Nbo=o("Speech2TextModel"),jbo=o(" (Speech2Text model)"),Dbo=l(),uu=a("li"),Wse=a("strong"),Gbo=o("splinter"),Obo=o(" \u2014 "),Tq=a("a"),Vbo=o("SplinterModel"),Xbo=o(" (Splinter model)"),zbo=l(),_u=a("li"),Qse=a("strong"),Wbo=o("squeezebert"),Qbo=o(" \u2014 "),Mq=a("a"),Hbo=o("SqueezeBertModel"),Ubo=o(" (SqueezeBERT model)"),Jbo=l(),bu=a("li"),Hse=a("strong"),Ybo=o("swin"),Kbo=o(" \u2014 "),Eq=a("a"),Zbo=o("SwinModel"),e2o=o(" (Swin model)"),o2o=l(),vu=a("li"),Use=a("strong"),r2o=o("t5"),t2o=o(" \u2014 "),Cq=a("a"),a2o=o("T5Model"),n2o=o(" (T5 model)"),s2o=l(),Fu=a("li"),Jse=a("strong"),l2o=o("tapas"),i2o=o(" \u2014 "),wq=a("a"),d2o=o("TapasModel"),c2o=o(" (TAPAS model)"),f2o=l(),Tu=a("li"),Yse=a("strong"),m2o=o("transfo-xl"),g2o=o(" \u2014 "),Aq=a("a"),h2o=o("TransfoXLModel"),p2o=o(" (Transformer-XL model)"),u2o=l(),Mu=a("li"),Kse=a("strong"),_2o=o("unispeech"),b2o=o(" \u2014 "),yq=a("a"),v2o=o("UniSpeechModel"),F2o=o(" (UniSpeech model)"),T2o=l(),Eu=a("li"),Zse=a("strong"),M2o=o("unispeech-sat"),E2o=o(" \u2014 "),Lq=a("a"),C2o=o("UniSpeechSatModel"),w2o=o(" (UniSpeechSat model)"),A2o=l(),Cu=a("li"),ele=a("strong"),y2o=o("van"),L2o=o(" \u2014 "),xq=a("a"),x2o=o("VanModel"),$2o=o(" (VAN model)"),k2o=l(),wu=a("li"),ole=a("strong"),S2o=o("vilt"),R2o=o(" \u2014 "),$q=a("a"),P2o=o("ViltModel"),B2o=o(" (ViLT model)"),I2o=l(),Au=a("li"),rle=a("strong"),q2o=o("vision-text-dual-encoder"),N2o=o(" \u2014 "),kq=a("a"),j2o=o("VisionTextDualEncoderModel"),D2o=o(" (VisionTextDualEncoder model)"),G2o=l(),yu=a("li"),tle=a("strong"),O2o=o("visual_bert"),V2o=o(" \u2014 "),Sq=a("a"),X2o=o("VisualBertModel"),z2o=o(" (VisualBert model)"),W2o=l(),Lu=a("li"),ale=a("strong"),Q2o=o("vit"),H2o=o(" \u2014 "),Rq=a("a"),U2o=o("ViTModel"),J2o=o(" (ViT model)"),Y2o=l(),xu=a("li"),nle=a("strong"),K2o=o("vit_mae"),Z2o=o(" \u2014 "),Pq=a("a"),evo=o("ViTMAEModel"),ovo=o(" (ViTMAE model)"),rvo=l(),$u=a("li"),sle=a("strong"),tvo=o("wav2vec2"),avo=o(" \u2014 "),Bq=a("a"),nvo=o("Wav2Vec2Model"),svo=o(" (Wav2Vec2 model)"),lvo=l(),ku=a("li"),lle=a("strong"),ivo=o("wav2vec2-conformer"),dvo=o(" \u2014 "),Iq=a("a"),cvo=o("Wav2Vec2ConformerModel"),fvo=o(" (Wav2Vec2-Conformer model)"),mvo=l(),Su=a("li"),ile=a("strong"),gvo=o("wavlm"),hvo=o(" \u2014 "),qq=a("a"),pvo=o("WavLMModel"),uvo=o(" (WavLM model)"),_vo=l(),Ru=a("li"),dle=a("strong"),bvo=o("xglm"),vvo=o(" \u2014 "),Nq=a("a"),Fvo=o("XGLMModel"),Tvo=o(" (XGLM model)"),Mvo=l(),Pu=a("li"),cle=a("strong"),Evo=o("xlm"),Cvo=o(" \u2014 "),jq=a("a"),wvo=o("XLMModel"),Avo=o(" (XLM model)"),yvo=l(),Bu=a("li"),fle=a("strong"),Lvo=o("xlm-prophetnet"),xvo=o(" \u2014 "),Dq=a("a"),$vo=o("XLMProphetNetModel"),kvo=o(" (XLMProphetNet model)"),Svo=l(),Iu=a("li"),mle=a("strong"),Rvo=o("xlm-roberta"),Pvo=o(" \u2014 "),Gq=a("a"),Bvo=o("XLMRobertaModel"),Ivo=o(" (XLM-RoBERTa model)"),qvo=l(),qu=a("li"),gle=a("strong"),Nvo=o("xlm-roberta-xl"),jvo=o(" \u2014 "),Oq=a("a"),Dvo=o("XLMRobertaXLModel"),Gvo=o(" (XLM-RoBERTa-XL model)"),Ovo=l(),Nu=a("li"),hle=a("strong"),Vvo=o("xlnet"),Xvo=o(" \u2014 "),Vq=a("a"),zvo=o("XLNetModel"),Wvo=o(" (XLNet model)"),Qvo=l(),ju=a("li"),ple=a("strong"),Hvo=o("yolos"),Uvo=o(" \u2014 "),Xq=a("a"),Jvo=o("YolosModel"),Yvo=o(" (YOLOS model)"),Kvo=l(),Du=a("li"),ule=a("strong"),Zvo=o("yoso"),e3o=o(" \u2014 "),zq=a("a"),o3o=o("YosoModel"),r3o=o(" (YOSO model)"),t3o=l(),Gu=a("p"),a3o=o("The model is set in evaluation mode by default using "),_le=a("code"),n3o=o("model.eval()"),s3o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ble=a("code"),l3o=o("model.train()"),i3o=l(),F(Ou.$$.fragment),XIe=l(),yi=a("h2"),Vu=a("a"),vle=a("span"),F(j6.$$.fragment),d3o=l(),Fle=a("span"),c3o=o("AutoModelForPreTraining"),zIe=l(),xo=a("div"),F(D6.$$.fragment),f3o=l(),Li=a("p"),m3o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Wq=a("a"),g3o=o("from_pretrained()"),h3o=o(" class method or the "),Qq=a("a"),p3o=o("from_config()"),u3o=o(` class
method.`),_3o=l(),G6=a("p"),b3o=o("This class cannot be instantiated directly using "),Tle=a("code"),v3o=o("__init__()"),F3o=o(" (throws an error)."),T3o=l(),at=a("div"),F(O6.$$.fragment),M3o=l(),Mle=a("p"),E3o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),C3o=l(),xi=a("p"),w3o=o(`Note:
Loading a model from its configuration file does `),Ele=a("strong"),A3o=o("not"),y3o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Hq=a("a"),L3o=o("from_pretrained()"),x3o=o(" to load the model weights."),$3o=l(),F(Xu.$$.fragment),k3o=l(),Ye=a("div"),F(V6.$$.fragment),S3o=l(),Cle=a("p"),R3o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),P3o=l(),xa=a("p"),B3o=o("The model class to instantiate is selected based on the "),wle=a("code"),I3o=o("model_type"),q3o=o(` property of the config object (either
passed as an argument or loaded from `),Ale=a("code"),N3o=o("pretrained_model_name_or_path"),j3o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yle=a("code"),D3o=o("pretrained_model_name_or_path"),G3o=o(":"),O3o=l(),G=a("ul"),zu=a("li"),Lle=a("strong"),V3o=o("albert"),X3o=o(" \u2014 "),Uq=a("a"),z3o=o("AlbertForPreTraining"),W3o=o(" (ALBERT model)"),Q3o=l(),Wu=a("li"),xle=a("strong"),H3o=o("bart"),U3o=o(" \u2014 "),Jq=a("a"),J3o=o("BartForConditionalGeneration"),Y3o=o(" (BART model)"),K3o=l(),Qu=a("li"),$le=a("strong"),Z3o=o("bert"),eFo=o(" \u2014 "),Yq=a("a"),oFo=o("BertForPreTraining"),rFo=o(" (BERT model)"),tFo=l(),Hu=a("li"),kle=a("strong"),aFo=o("big_bird"),nFo=o(" \u2014 "),Kq=a("a"),sFo=o("BigBirdForPreTraining"),lFo=o(" (BigBird model)"),iFo=l(),Uu=a("li"),Sle=a("strong"),dFo=o("camembert"),cFo=o(" \u2014 "),Zq=a("a"),fFo=o("CamembertForMaskedLM"),mFo=o(" (CamemBERT model)"),gFo=l(),Ju=a("li"),Rle=a("strong"),hFo=o("ctrl"),pFo=o(" \u2014 "),eN=a("a"),uFo=o("CTRLLMHeadModel"),_Fo=o(" (CTRL model)"),bFo=l(),Yu=a("li"),Ple=a("strong"),vFo=o("data2vec-text"),FFo=o(" \u2014 "),oN=a("a"),TFo=o("Data2VecTextForMaskedLM"),MFo=o(" (Data2VecText model)"),EFo=l(),Ku=a("li"),Ble=a("strong"),CFo=o("deberta"),wFo=o(" \u2014 "),rN=a("a"),AFo=o("DebertaForMaskedLM"),yFo=o(" (DeBERTa model)"),LFo=l(),Zu=a("li"),Ile=a("strong"),xFo=o("deberta-v2"),$Fo=o(" \u2014 "),tN=a("a"),kFo=o("DebertaV2ForMaskedLM"),SFo=o(" (DeBERTa-v2 model)"),RFo=l(),e_=a("li"),qle=a("strong"),PFo=o("distilbert"),BFo=o(" \u2014 "),aN=a("a"),IFo=o("DistilBertForMaskedLM"),qFo=o(" (DistilBERT model)"),NFo=l(),o_=a("li"),Nle=a("strong"),jFo=o("electra"),DFo=o(" \u2014 "),nN=a("a"),GFo=o("ElectraForPreTraining"),OFo=o(" (ELECTRA model)"),VFo=l(),r_=a("li"),jle=a("strong"),XFo=o("flaubert"),zFo=o(" \u2014 "),sN=a("a"),WFo=o("FlaubertWithLMHeadModel"),QFo=o(" (FlauBERT model)"),HFo=l(),t_=a("li"),Dle=a("strong"),UFo=o("flava"),JFo=o(" \u2014 "),lN=a("a"),YFo=o("FlavaForPreTraining"),KFo=o(" (Flava model)"),ZFo=l(),a_=a("li"),Gle=a("strong"),e0o=o("fnet"),o0o=o(" \u2014 "),iN=a("a"),r0o=o("FNetForPreTraining"),t0o=o(" (FNet model)"),a0o=l(),n_=a("li"),Ole=a("strong"),n0o=o("fsmt"),s0o=o(" \u2014 "),dN=a("a"),l0o=o("FSMTForConditionalGeneration"),i0o=o(" (FairSeq Machine-Translation model)"),d0o=l(),s_=a("li"),Vle=a("strong"),c0o=o("funnel"),f0o=o(" \u2014 "),cN=a("a"),m0o=o("FunnelForPreTraining"),g0o=o(" (Funnel Transformer model)"),h0o=l(),l_=a("li"),Xle=a("strong"),p0o=o("gpt2"),u0o=o(" \u2014 "),fN=a("a"),_0o=o("GPT2LMHeadModel"),b0o=o(" (OpenAI GPT-2 model)"),v0o=l(),i_=a("li"),zle=a("strong"),F0o=o("ibert"),T0o=o(" \u2014 "),mN=a("a"),M0o=o("IBertForMaskedLM"),E0o=o(" (I-BERT model)"),C0o=l(),d_=a("li"),Wle=a("strong"),w0o=o("layoutlm"),A0o=o(" \u2014 "),gN=a("a"),y0o=o("LayoutLMForMaskedLM"),L0o=o(" (LayoutLM model)"),x0o=l(),c_=a("li"),Qle=a("strong"),$0o=o("longformer"),k0o=o(" \u2014 "),hN=a("a"),S0o=o("LongformerForMaskedLM"),R0o=o(" (Longformer model)"),P0o=l(),f_=a("li"),Hle=a("strong"),B0o=o("lxmert"),I0o=o(" \u2014 "),pN=a("a"),q0o=o("LxmertForPreTraining"),N0o=o(" (LXMERT model)"),j0o=l(),m_=a("li"),Ule=a("strong"),D0o=o("megatron-bert"),G0o=o(" \u2014 "),uN=a("a"),O0o=o("MegatronBertForPreTraining"),V0o=o(" (MegatronBert model)"),X0o=l(),g_=a("li"),Jle=a("strong"),z0o=o("mobilebert"),W0o=o(" \u2014 "),_N=a("a"),Q0o=o("MobileBertForPreTraining"),H0o=o(" (MobileBERT model)"),U0o=l(),h_=a("li"),Yle=a("strong"),J0o=o("mpnet"),Y0o=o(" \u2014 "),bN=a("a"),K0o=o("MPNetForMaskedLM"),Z0o=o(" (MPNet model)"),eTo=l(),p_=a("li"),Kle=a("strong"),oTo=o("openai-gpt"),rTo=o(" \u2014 "),vN=a("a"),tTo=o("OpenAIGPTLMHeadModel"),aTo=o(" (OpenAI GPT model)"),nTo=l(),u_=a("li"),Zle=a("strong"),sTo=o("retribert"),lTo=o(" \u2014 "),FN=a("a"),iTo=o("RetriBertModel"),dTo=o(" (RetriBERT model)"),cTo=l(),__=a("li"),eie=a("strong"),fTo=o("roberta"),mTo=o(" \u2014 "),TN=a("a"),gTo=o("RobertaForMaskedLM"),hTo=o(" (RoBERTa model)"),pTo=l(),b_=a("li"),oie=a("strong"),uTo=o("splinter"),_To=o(" \u2014 "),MN=a("a"),bTo=o("SplinterForPreTraining"),vTo=o(" (Splinter model)"),FTo=l(),v_=a("li"),rie=a("strong"),TTo=o("squeezebert"),MTo=o(" \u2014 "),EN=a("a"),ETo=o("SqueezeBertForMaskedLM"),CTo=o(" (SqueezeBERT model)"),wTo=l(),F_=a("li"),tie=a("strong"),ATo=o("t5"),yTo=o(" \u2014 "),CN=a("a"),LTo=o("T5ForConditionalGeneration"),xTo=o(" (T5 model)"),$To=l(),T_=a("li"),aie=a("strong"),kTo=o("tapas"),STo=o(" \u2014 "),wN=a("a"),RTo=o("TapasForMaskedLM"),PTo=o(" (TAPAS model)"),BTo=l(),M_=a("li"),nie=a("strong"),ITo=o("transfo-xl"),qTo=o(" \u2014 "),AN=a("a"),NTo=o("TransfoXLLMHeadModel"),jTo=o(" (Transformer-XL model)"),DTo=l(),E_=a("li"),sie=a("strong"),GTo=o("unispeech"),OTo=o(" \u2014 "),yN=a("a"),VTo=o("UniSpeechForPreTraining"),XTo=o(" (UniSpeech model)"),zTo=l(),C_=a("li"),lie=a("strong"),WTo=o("unispeech-sat"),QTo=o(" \u2014 "),LN=a("a"),HTo=o("UniSpeechSatForPreTraining"),UTo=o(" (UniSpeechSat model)"),JTo=l(),w_=a("li"),iie=a("strong"),YTo=o("visual_bert"),KTo=o(" \u2014 "),xN=a("a"),ZTo=o("VisualBertForPreTraining"),e7o=o(" (VisualBert model)"),o7o=l(),A_=a("li"),die=a("strong"),r7o=o("vit_mae"),t7o=o(" \u2014 "),$N=a("a"),a7o=o("ViTMAEForPreTraining"),n7o=o(" (ViTMAE model)"),s7o=l(),y_=a("li"),cie=a("strong"),l7o=o("wav2vec2"),i7o=o(" \u2014 "),kN=a("a"),d7o=o("Wav2Vec2ForPreTraining"),c7o=o(" (Wav2Vec2 model)"),f7o=l(),L_=a("li"),fie=a("strong"),m7o=o("wav2vec2-conformer"),g7o=o(" \u2014 "),SN=a("a"),h7o=o("Wav2Vec2ConformerForPreTraining"),p7o=o(" (Wav2Vec2-Conformer model)"),u7o=l(),x_=a("li"),mie=a("strong"),_7o=o("xlm"),b7o=o(" \u2014 "),RN=a("a"),v7o=o("XLMWithLMHeadModel"),F7o=o(" (XLM model)"),T7o=l(),$_=a("li"),gie=a("strong"),M7o=o("xlm-roberta"),E7o=o(" \u2014 "),PN=a("a"),C7o=o("XLMRobertaForMaskedLM"),w7o=o(" (XLM-RoBERTa model)"),A7o=l(),k_=a("li"),hie=a("strong"),y7o=o("xlm-roberta-xl"),L7o=o(" \u2014 "),BN=a("a"),x7o=o("XLMRobertaXLForMaskedLM"),$7o=o(" (XLM-RoBERTa-XL model)"),k7o=l(),S_=a("li"),pie=a("strong"),S7o=o("xlnet"),R7o=o(" \u2014 "),IN=a("a"),P7o=o("XLNetLMHeadModel"),B7o=o(" (XLNet model)"),I7o=l(),R_=a("p"),q7o=o("The model is set in evaluation mode by default using "),uie=a("code"),N7o=o("model.eval()"),j7o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_ie=a("code"),D7o=o("model.train()"),G7o=l(),F(P_.$$.fragment),WIe=l(),$i=a("h2"),B_=a("a"),bie=a("span"),F(X6.$$.fragment),O7o=l(),vie=a("span"),V7o=o("AutoModelForCausalLM"),QIe=l(),$o=a("div"),F(z6.$$.fragment),X7o=l(),ki=a("p"),z7o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),qN=a("a"),W7o=o("from_pretrained()"),Q7o=o(" class method or the "),NN=a("a"),H7o=o("from_config()"),U7o=o(` class
method.`),J7o=l(),W6=a("p"),Y7o=o("This class cannot be instantiated directly using "),Fie=a("code"),K7o=o("__init__()"),Z7o=o(" (throws an error)."),eMo=l(),nt=a("div"),F(Q6.$$.fragment),oMo=l(),Tie=a("p"),rMo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),tMo=l(),Si=a("p"),aMo=o(`Note:
Loading a model from its configuration file does `),Mie=a("strong"),nMo=o("not"),sMo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jN=a("a"),lMo=o("from_pretrained()"),iMo=o(" to load the model weights."),dMo=l(),F(I_.$$.fragment),cMo=l(),Ke=a("div"),F(H6.$$.fragment),fMo=l(),Eie=a("p"),mMo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),gMo=l(),$a=a("p"),hMo=o("The model class to instantiate is selected based on the "),Cie=a("code"),pMo=o("model_type"),uMo=o(` property of the config object (either
passed as an argument or loaded from `),wie=a("code"),_Mo=o("pretrained_model_name_or_path"),bMo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Aie=a("code"),vMo=o("pretrained_model_name_or_path"),FMo=o(":"),TMo=l(),z=a("ul"),q_=a("li"),yie=a("strong"),MMo=o("bart"),EMo=o(" \u2014 "),DN=a("a"),CMo=o("BartForCausalLM"),wMo=o(" (BART model)"),AMo=l(),N_=a("li"),Lie=a("strong"),yMo=o("bert"),LMo=o(" \u2014 "),GN=a("a"),xMo=o("BertLMHeadModel"),$Mo=o(" (BERT model)"),kMo=l(),j_=a("li"),xie=a("strong"),SMo=o("bert-generation"),RMo=o(" \u2014 "),ON=a("a"),PMo=o("BertGenerationDecoder"),BMo=o(" (Bert Generation model)"),IMo=l(),D_=a("li"),$ie=a("strong"),qMo=o("big_bird"),NMo=o(" \u2014 "),VN=a("a"),jMo=o("BigBirdForCausalLM"),DMo=o(" (BigBird model)"),GMo=l(),G_=a("li"),kie=a("strong"),OMo=o("bigbird_pegasus"),VMo=o(" \u2014 "),XN=a("a"),XMo=o("BigBirdPegasusForCausalLM"),zMo=o(" (BigBirdPegasus model)"),WMo=l(),O_=a("li"),Sie=a("strong"),QMo=o("blenderbot"),HMo=o(" \u2014 "),zN=a("a"),UMo=o("BlenderbotForCausalLM"),JMo=o(" (Blenderbot model)"),YMo=l(),V_=a("li"),Rie=a("strong"),KMo=o("blenderbot-small"),ZMo=o(" \u2014 "),WN=a("a"),e4o=o("BlenderbotSmallForCausalLM"),o4o=o(" (BlenderbotSmall model)"),r4o=l(),X_=a("li"),Pie=a("strong"),t4o=o("camembert"),a4o=o(" \u2014 "),QN=a("a"),n4o=o("CamembertForCausalLM"),s4o=o(" (CamemBERT model)"),l4o=l(),z_=a("li"),Bie=a("strong"),i4o=o("ctrl"),d4o=o(" \u2014 "),HN=a("a"),c4o=o("CTRLLMHeadModel"),f4o=o(" (CTRL model)"),m4o=l(),W_=a("li"),Iie=a("strong"),g4o=o("data2vec-text"),h4o=o(" \u2014 "),UN=a("a"),p4o=o("Data2VecTextForCausalLM"),u4o=o(" (Data2VecText model)"),_4o=l(),Q_=a("li"),qie=a("strong"),b4o=o("electra"),v4o=o(" \u2014 "),JN=a("a"),F4o=o("ElectraForCausalLM"),T4o=o(" (ELECTRA model)"),M4o=l(),H_=a("li"),Nie=a("strong"),E4o=o("gpt2"),C4o=o(" \u2014 "),YN=a("a"),w4o=o("GPT2LMHeadModel"),A4o=o(" (OpenAI GPT-2 model)"),y4o=l(),U_=a("li"),jie=a("strong"),L4o=o("gpt_neo"),x4o=o(" \u2014 "),KN=a("a"),$4o=o("GPTNeoForCausalLM"),k4o=o(" (GPT Neo model)"),S4o=l(),J_=a("li"),Die=a("strong"),R4o=o("gptj"),P4o=o(" \u2014 "),ZN=a("a"),B4o=o("GPTJForCausalLM"),I4o=o(" (GPT-J model)"),q4o=l(),Y_=a("li"),Gie=a("strong"),N4o=o("marian"),j4o=o(" \u2014 "),ej=a("a"),D4o=o("MarianForCausalLM"),G4o=o(" (Marian model)"),O4o=l(),K_=a("li"),Oie=a("strong"),V4o=o("mbart"),X4o=o(" \u2014 "),oj=a("a"),z4o=o("MBartForCausalLM"),W4o=o(" (mBART model)"),Q4o=l(),Z_=a("li"),Vie=a("strong"),H4o=o("megatron-bert"),U4o=o(" \u2014 "),rj=a("a"),J4o=o("MegatronBertForCausalLM"),Y4o=o(" (MegatronBert model)"),K4o=l(),e1=a("li"),Xie=a("strong"),Z4o=o("openai-gpt"),eEo=o(" \u2014 "),tj=a("a"),oEo=o("OpenAIGPTLMHeadModel"),rEo=o(" (OpenAI GPT model)"),tEo=l(),o1=a("li"),zie=a("strong"),aEo=o("opt"),nEo=o(" \u2014 "),aj=a("a"),sEo=o("OPTForCausalLM"),lEo=o(" (OPT model)"),iEo=l(),r1=a("li"),Wie=a("strong"),dEo=o("pegasus"),cEo=o(" \u2014 "),nj=a("a"),fEo=o("PegasusForCausalLM"),mEo=o(" (Pegasus model)"),gEo=l(),t1=a("li"),Qie=a("strong"),hEo=o("plbart"),pEo=o(" \u2014 "),sj=a("a"),uEo=o("PLBartForCausalLM"),_Eo=o(" (PLBart model)"),bEo=l(),a1=a("li"),Hie=a("strong"),vEo=o("prophetnet"),FEo=o(" \u2014 "),lj=a("a"),TEo=o("ProphetNetForCausalLM"),MEo=o(" (ProphetNet model)"),EEo=l(),n1=a("li"),Uie=a("strong"),CEo=o("qdqbert"),wEo=o(" \u2014 "),ij=a("a"),AEo=o("QDQBertLMHeadModel"),yEo=o(" (QDQBert model)"),LEo=l(),s1=a("li"),Jie=a("strong"),xEo=o("reformer"),$Eo=o(" \u2014 "),dj=a("a"),kEo=o("ReformerModelWithLMHead"),SEo=o(" (Reformer model)"),REo=l(),l1=a("li"),Yie=a("strong"),PEo=o("rembert"),BEo=o(" \u2014 "),cj=a("a"),IEo=o("RemBertForCausalLM"),qEo=o(" (RemBERT model)"),NEo=l(),i1=a("li"),Kie=a("strong"),jEo=o("roberta"),DEo=o(" \u2014 "),fj=a("a"),GEo=o("RobertaForCausalLM"),OEo=o(" (RoBERTa model)"),VEo=l(),d1=a("li"),Zie=a("strong"),XEo=o("roformer"),zEo=o(" \u2014 "),mj=a("a"),WEo=o("RoFormerForCausalLM"),QEo=o(" (RoFormer model)"),HEo=l(),c1=a("li"),ede=a("strong"),UEo=o("speech_to_text_2"),JEo=o(" \u2014 "),gj=a("a"),YEo=o("Speech2Text2ForCausalLM"),KEo=o(" (Speech2Text2 model)"),ZEo=l(),f1=a("li"),ode=a("strong"),eCo=o("transfo-xl"),oCo=o(" \u2014 "),hj=a("a"),rCo=o("TransfoXLLMHeadModel"),tCo=o(" (Transformer-XL model)"),aCo=l(),m1=a("li"),rde=a("strong"),nCo=o("trocr"),sCo=o(" \u2014 "),pj=a("a"),lCo=o("TrOCRForCausalLM"),iCo=o(" (TrOCR model)"),dCo=l(),g1=a("li"),tde=a("strong"),cCo=o("xglm"),fCo=o(" \u2014 "),uj=a("a"),mCo=o("XGLMForCausalLM"),gCo=o(" (XGLM model)"),hCo=l(),h1=a("li"),ade=a("strong"),pCo=o("xlm"),uCo=o(" \u2014 "),_j=a("a"),_Co=o("XLMWithLMHeadModel"),bCo=o(" (XLM model)"),vCo=l(),p1=a("li"),nde=a("strong"),FCo=o("xlm-prophetnet"),TCo=o(" \u2014 "),bj=a("a"),MCo=o("XLMProphetNetForCausalLM"),ECo=o(" (XLMProphetNet model)"),CCo=l(),u1=a("li"),sde=a("strong"),wCo=o("xlm-roberta"),ACo=o(" \u2014 "),vj=a("a"),yCo=o("XLMRobertaForCausalLM"),LCo=o(" (XLM-RoBERTa model)"),xCo=l(),_1=a("li"),lde=a("strong"),$Co=o("xlm-roberta-xl"),kCo=o(" \u2014 "),Fj=a("a"),SCo=o("XLMRobertaXLForCausalLM"),RCo=o(" (XLM-RoBERTa-XL model)"),PCo=l(),b1=a("li"),ide=a("strong"),BCo=o("xlnet"),ICo=o(" \u2014 "),Tj=a("a"),qCo=o("XLNetLMHeadModel"),NCo=o(" (XLNet model)"),jCo=l(),v1=a("p"),DCo=o("The model is set in evaluation mode by default using "),dde=a("code"),GCo=o("model.eval()"),OCo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cde=a("code"),VCo=o("model.train()"),XCo=l(),F(F1.$$.fragment),HIe=l(),Ri=a("h2"),T1=a("a"),fde=a("span"),F(U6.$$.fragment),zCo=l(),mde=a("span"),WCo=o("AutoModelForMaskedLM"),UIe=l(),ko=a("div"),F(J6.$$.fragment),QCo=l(),Pi=a("p"),HCo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Mj=a("a"),UCo=o("from_pretrained()"),JCo=o(" class method or the "),Ej=a("a"),YCo=o("from_config()"),KCo=o(` class
method.`),ZCo=l(),Y6=a("p"),e5o=o("This class cannot be instantiated directly using "),gde=a("code"),o5o=o("__init__()"),r5o=o(" (throws an error)."),t5o=l(),st=a("div"),F(K6.$$.fragment),a5o=l(),hde=a("p"),n5o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),s5o=l(),Bi=a("p"),l5o=o(`Note:
Loading a model from its configuration file does `),pde=a("strong"),i5o=o("not"),d5o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Cj=a("a"),c5o=o("from_pretrained()"),f5o=o(" to load the model weights."),m5o=l(),F(M1.$$.fragment),g5o=l(),Ze=a("div"),F(Z6.$$.fragment),h5o=l(),ude=a("p"),p5o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),u5o=l(),ka=a("p"),_5o=o("The model class to instantiate is selected based on the "),_de=a("code"),b5o=o("model_type"),v5o=o(` property of the config object (either
passed as an argument or loaded from `),bde=a("code"),F5o=o("pretrained_model_name_or_path"),T5o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vde=a("code"),M5o=o("pretrained_model_name_or_path"),E5o=o(":"),C5o=l(),W=a("ul"),E1=a("li"),Fde=a("strong"),w5o=o("albert"),A5o=o(" \u2014 "),wj=a("a"),y5o=o("AlbertForMaskedLM"),L5o=o(" (ALBERT model)"),x5o=l(),C1=a("li"),Tde=a("strong"),$5o=o("bart"),k5o=o(" \u2014 "),Aj=a("a"),S5o=o("BartForConditionalGeneration"),R5o=o(" (BART model)"),P5o=l(),w1=a("li"),Mde=a("strong"),B5o=o("bert"),I5o=o(" \u2014 "),yj=a("a"),q5o=o("BertForMaskedLM"),N5o=o(" (BERT model)"),j5o=l(),A1=a("li"),Ede=a("strong"),D5o=o("big_bird"),G5o=o(" \u2014 "),Lj=a("a"),O5o=o("BigBirdForMaskedLM"),V5o=o(" (BigBird model)"),X5o=l(),y1=a("li"),Cde=a("strong"),z5o=o("camembert"),W5o=o(" \u2014 "),xj=a("a"),Q5o=o("CamembertForMaskedLM"),H5o=o(" (CamemBERT model)"),U5o=l(),L1=a("li"),wde=a("strong"),J5o=o("convbert"),Y5o=o(" \u2014 "),$j=a("a"),K5o=o("ConvBertForMaskedLM"),Z5o=o(" (ConvBERT model)"),ewo=l(),x1=a("li"),Ade=a("strong"),owo=o("data2vec-text"),rwo=o(" \u2014 "),kj=a("a"),two=o("Data2VecTextForMaskedLM"),awo=o(" (Data2VecText model)"),nwo=l(),$1=a("li"),yde=a("strong"),swo=o("deberta"),lwo=o(" \u2014 "),Sj=a("a"),iwo=o("DebertaForMaskedLM"),dwo=o(" (DeBERTa model)"),cwo=l(),k1=a("li"),Lde=a("strong"),fwo=o("deberta-v2"),mwo=o(" \u2014 "),Rj=a("a"),gwo=o("DebertaV2ForMaskedLM"),hwo=o(" (DeBERTa-v2 model)"),pwo=l(),S1=a("li"),xde=a("strong"),uwo=o("distilbert"),_wo=o(" \u2014 "),Pj=a("a"),bwo=o("DistilBertForMaskedLM"),vwo=o(" (DistilBERT model)"),Fwo=l(),R1=a("li"),$de=a("strong"),Two=o("electra"),Mwo=o(" \u2014 "),Bj=a("a"),Ewo=o("ElectraForMaskedLM"),Cwo=o(" (ELECTRA model)"),wwo=l(),P1=a("li"),kde=a("strong"),Awo=o("flaubert"),ywo=o(" \u2014 "),Ij=a("a"),Lwo=o("FlaubertWithLMHeadModel"),xwo=o(" (FlauBERT model)"),$wo=l(),B1=a("li"),Sde=a("strong"),kwo=o("fnet"),Swo=o(" \u2014 "),qj=a("a"),Rwo=o("FNetForMaskedLM"),Pwo=o(" (FNet model)"),Bwo=l(),I1=a("li"),Rde=a("strong"),Iwo=o("funnel"),qwo=o(" \u2014 "),Nj=a("a"),Nwo=o("FunnelForMaskedLM"),jwo=o(" (Funnel Transformer model)"),Dwo=l(),q1=a("li"),Pde=a("strong"),Gwo=o("ibert"),Owo=o(" \u2014 "),jj=a("a"),Vwo=o("IBertForMaskedLM"),Xwo=o(" (I-BERT model)"),zwo=l(),N1=a("li"),Bde=a("strong"),Wwo=o("layoutlm"),Qwo=o(" \u2014 "),Dj=a("a"),Hwo=o("LayoutLMForMaskedLM"),Uwo=o(" (LayoutLM model)"),Jwo=l(),j1=a("li"),Ide=a("strong"),Ywo=o("longformer"),Kwo=o(" \u2014 "),Gj=a("a"),Zwo=o("LongformerForMaskedLM"),eAo=o(" (Longformer model)"),oAo=l(),D1=a("li"),qde=a("strong"),rAo=o("mbart"),tAo=o(" \u2014 "),Oj=a("a"),aAo=o("MBartForConditionalGeneration"),nAo=o(" (mBART model)"),sAo=l(),G1=a("li"),Nde=a("strong"),lAo=o("megatron-bert"),iAo=o(" \u2014 "),Vj=a("a"),dAo=o("MegatronBertForMaskedLM"),cAo=o(" (MegatronBert model)"),fAo=l(),O1=a("li"),jde=a("strong"),mAo=o("mobilebert"),gAo=o(" \u2014 "),Xj=a("a"),hAo=o("MobileBertForMaskedLM"),pAo=o(" (MobileBERT model)"),uAo=l(),V1=a("li"),Dde=a("strong"),_Ao=o("mpnet"),bAo=o(" \u2014 "),zj=a("a"),vAo=o("MPNetForMaskedLM"),FAo=o(" (MPNet model)"),TAo=l(),X1=a("li"),Gde=a("strong"),MAo=o("nystromformer"),EAo=o(" \u2014 "),Wj=a("a"),CAo=o("NystromformerForMaskedLM"),wAo=o(" (Nystromformer model)"),AAo=l(),z1=a("li"),Ode=a("strong"),yAo=o("perceiver"),LAo=o(" \u2014 "),Qj=a("a"),xAo=o("PerceiverForMaskedLM"),$Ao=o(" (Perceiver model)"),kAo=l(),W1=a("li"),Vde=a("strong"),SAo=o("qdqbert"),RAo=o(" \u2014 "),Hj=a("a"),PAo=o("QDQBertForMaskedLM"),BAo=o(" (QDQBert model)"),IAo=l(),Q1=a("li"),Xde=a("strong"),qAo=o("reformer"),NAo=o(" \u2014 "),Uj=a("a"),jAo=o("ReformerForMaskedLM"),DAo=o(" (Reformer model)"),GAo=l(),H1=a("li"),zde=a("strong"),OAo=o("rembert"),VAo=o(" \u2014 "),Jj=a("a"),XAo=o("RemBertForMaskedLM"),zAo=o(" (RemBERT model)"),WAo=l(),U1=a("li"),Wde=a("strong"),QAo=o("roberta"),HAo=o(" \u2014 "),Yj=a("a"),UAo=o("RobertaForMaskedLM"),JAo=o(" (RoBERTa model)"),YAo=l(),J1=a("li"),Qde=a("strong"),KAo=o("roformer"),ZAo=o(" \u2014 "),Kj=a("a"),e6o=o("RoFormerForMaskedLM"),o6o=o(" (RoFormer model)"),r6o=l(),Y1=a("li"),Hde=a("strong"),t6o=o("squeezebert"),a6o=o(" \u2014 "),Zj=a("a"),n6o=o("SqueezeBertForMaskedLM"),s6o=o(" (SqueezeBERT model)"),l6o=l(),K1=a("li"),Ude=a("strong"),i6o=o("tapas"),d6o=o(" \u2014 "),eD=a("a"),c6o=o("TapasForMaskedLM"),f6o=o(" (TAPAS model)"),m6o=l(),Z1=a("li"),Jde=a("strong"),g6o=o("wav2vec2"),h6o=o(" \u2014 "),Yde=a("code"),p6o=o("Wav2Vec2ForMaskedLM"),u6o=o(" (Wav2Vec2 model)"),_6o=l(),eb=a("li"),Kde=a("strong"),b6o=o("xlm"),v6o=o(" \u2014 "),oD=a("a"),F6o=o("XLMWithLMHeadModel"),T6o=o(" (XLM model)"),M6o=l(),ob=a("li"),Zde=a("strong"),E6o=o("xlm-roberta"),C6o=o(" \u2014 "),rD=a("a"),w6o=o("XLMRobertaForMaskedLM"),A6o=o(" (XLM-RoBERTa model)"),y6o=l(),rb=a("li"),ece=a("strong"),L6o=o("xlm-roberta-xl"),x6o=o(" \u2014 "),tD=a("a"),$6o=o("XLMRobertaXLForMaskedLM"),k6o=o(" (XLM-RoBERTa-XL model)"),S6o=l(),tb=a("li"),oce=a("strong"),R6o=o("yoso"),P6o=o(" \u2014 "),aD=a("a"),B6o=o("YosoForMaskedLM"),I6o=o(" (YOSO model)"),q6o=l(),ab=a("p"),N6o=o("The model is set in evaluation mode by default using "),rce=a("code"),j6o=o("model.eval()"),D6o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tce=a("code"),G6o=o("model.train()"),O6o=l(),F(nb.$$.fragment),JIe=l(),Ii=a("h2"),sb=a("a"),ace=a("span"),F(ey.$$.fragment),V6o=l(),nce=a("span"),X6o=o("AutoModelForSeq2SeqLM"),YIe=l(),So=a("div"),F(oy.$$.fragment),z6o=l(),qi=a("p"),W6o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),nD=a("a"),Q6o=o("from_pretrained()"),H6o=o(" class method or the "),sD=a("a"),U6o=o("from_config()"),J6o=o(` class
method.`),Y6o=l(),ry=a("p"),K6o=o("This class cannot be instantiated directly using "),sce=a("code"),Z6o=o("__init__()"),eyo=o(" (throws an error)."),oyo=l(),lt=a("div"),F(ty.$$.fragment),ryo=l(),lce=a("p"),tyo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),ayo=l(),Ni=a("p"),nyo=o(`Note:
Loading a model from its configuration file does `),ice=a("strong"),syo=o("not"),lyo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lD=a("a"),iyo=o("from_pretrained()"),dyo=o(" to load the model weights."),cyo=l(),F(lb.$$.fragment),fyo=l(),eo=a("div"),F(ay.$$.fragment),myo=l(),dce=a("p"),gyo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),hyo=l(),Sa=a("p"),pyo=o("The model class to instantiate is selected based on the "),cce=a("code"),uyo=o("model_type"),_yo=o(` property of the config object (either
passed as an argument or loaded from `),fce=a("code"),byo=o("pretrained_model_name_or_path"),vyo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mce=a("code"),Fyo=o("pretrained_model_name_or_path"),Tyo=o(":"),Myo=l(),ue=a("ul"),ib=a("li"),gce=a("strong"),Eyo=o("bart"),Cyo=o(" \u2014 "),iD=a("a"),wyo=o("BartForConditionalGeneration"),Ayo=o(" (BART model)"),yyo=l(),db=a("li"),hce=a("strong"),Lyo=o("bigbird_pegasus"),xyo=o(" \u2014 "),dD=a("a"),$yo=o("BigBirdPegasusForConditionalGeneration"),kyo=o(" (BigBirdPegasus model)"),Syo=l(),cb=a("li"),pce=a("strong"),Ryo=o("blenderbot"),Pyo=o(" \u2014 "),cD=a("a"),Byo=o("BlenderbotForConditionalGeneration"),Iyo=o(" (Blenderbot model)"),qyo=l(),fb=a("li"),uce=a("strong"),Nyo=o("blenderbot-small"),jyo=o(" \u2014 "),fD=a("a"),Dyo=o("BlenderbotSmallForConditionalGeneration"),Gyo=o(" (BlenderbotSmall model)"),Oyo=l(),mb=a("li"),_ce=a("strong"),Vyo=o("encoder-decoder"),Xyo=o(" \u2014 "),mD=a("a"),zyo=o("EncoderDecoderModel"),Wyo=o(" (Encoder decoder model)"),Qyo=l(),gb=a("li"),bce=a("strong"),Hyo=o("fsmt"),Uyo=o(" \u2014 "),gD=a("a"),Jyo=o("FSMTForConditionalGeneration"),Yyo=o(" (FairSeq Machine-Translation model)"),Kyo=l(),hb=a("li"),vce=a("strong"),Zyo=o("led"),eLo=o(" \u2014 "),hD=a("a"),oLo=o("LEDForConditionalGeneration"),rLo=o(" (LED model)"),tLo=l(),pb=a("li"),Fce=a("strong"),aLo=o("m2m_100"),nLo=o(" \u2014 "),pD=a("a"),sLo=o("M2M100ForConditionalGeneration"),lLo=o(" (M2M100 model)"),iLo=l(),ub=a("li"),Tce=a("strong"),dLo=o("marian"),cLo=o(" \u2014 "),uD=a("a"),fLo=o("MarianMTModel"),mLo=o(" (Marian model)"),gLo=l(),_b=a("li"),Mce=a("strong"),hLo=o("mbart"),pLo=o(" \u2014 "),_D=a("a"),uLo=o("MBartForConditionalGeneration"),_Lo=o(" (mBART model)"),bLo=l(),bb=a("li"),Ece=a("strong"),vLo=o("mt5"),FLo=o(" \u2014 "),bD=a("a"),TLo=o("MT5ForConditionalGeneration"),MLo=o(" (mT5 model)"),ELo=l(),vb=a("li"),Cce=a("strong"),CLo=o("pegasus"),wLo=o(" \u2014 "),vD=a("a"),ALo=o("PegasusForConditionalGeneration"),yLo=o(" (Pegasus model)"),LLo=l(),Fb=a("li"),wce=a("strong"),xLo=o("plbart"),$Lo=o(" \u2014 "),FD=a("a"),kLo=o("PLBartForConditionalGeneration"),SLo=o(" (PLBart model)"),RLo=l(),Tb=a("li"),Ace=a("strong"),PLo=o("prophetnet"),BLo=o(" \u2014 "),TD=a("a"),ILo=o("ProphetNetForConditionalGeneration"),qLo=o(" (ProphetNet model)"),NLo=l(),Mb=a("li"),yce=a("strong"),jLo=o("t5"),DLo=o(" \u2014 "),MD=a("a"),GLo=o("T5ForConditionalGeneration"),OLo=o(" (T5 model)"),VLo=l(),Eb=a("li"),Lce=a("strong"),XLo=o("xlm-prophetnet"),zLo=o(" \u2014 "),ED=a("a"),WLo=o("XLMProphetNetForConditionalGeneration"),QLo=o(" (XLMProphetNet model)"),HLo=l(),Cb=a("p"),ULo=o("The model is set in evaluation mode by default using "),xce=a("code"),JLo=o("model.eval()"),YLo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$ce=a("code"),KLo=o("model.train()"),ZLo=l(),F(wb.$$.fragment),KIe=l(),ji=a("h2"),Ab=a("a"),kce=a("span"),F(ny.$$.fragment),e8o=l(),Sce=a("span"),o8o=o("AutoModelForSequenceClassification"),ZIe=l(),Ro=a("div"),F(sy.$$.fragment),r8o=l(),Di=a("p"),t8o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),CD=a("a"),a8o=o("from_pretrained()"),n8o=o(" class method or the "),wD=a("a"),s8o=o("from_config()"),l8o=o(` class
method.`),i8o=l(),ly=a("p"),d8o=o("This class cannot be instantiated directly using "),Rce=a("code"),c8o=o("__init__()"),f8o=o(" (throws an error)."),m8o=l(),it=a("div"),F(iy.$$.fragment),g8o=l(),Pce=a("p"),h8o=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),p8o=l(),Gi=a("p"),u8o=o(`Note:
Loading a model from its configuration file does `),Bce=a("strong"),_8o=o("not"),b8o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AD=a("a"),v8o=o("from_pretrained()"),F8o=o(" to load the model weights."),T8o=l(),F(yb.$$.fragment),M8o=l(),oo=a("div"),F(dy.$$.fragment),E8o=l(),Ice=a("p"),C8o=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),w8o=l(),Ra=a("p"),A8o=o("The model class to instantiate is selected based on the "),qce=a("code"),y8o=o("model_type"),L8o=o(` property of the config object (either
passed as an argument or loaded from `),Nce=a("code"),x8o=o("pretrained_model_name_or_path"),$8o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jce=a("code"),k8o=o("pretrained_model_name_or_path"),S8o=o(":"),R8o=l(),q=a("ul"),Lb=a("li"),Dce=a("strong"),P8o=o("albert"),B8o=o(" \u2014 "),yD=a("a"),I8o=o("AlbertForSequenceClassification"),q8o=o(" (ALBERT model)"),N8o=l(),xb=a("li"),Gce=a("strong"),j8o=o("bart"),D8o=o(" \u2014 "),LD=a("a"),G8o=o("BartForSequenceClassification"),O8o=o(" (BART model)"),V8o=l(),$b=a("li"),Oce=a("strong"),X8o=o("bert"),z8o=o(" \u2014 "),xD=a("a"),W8o=o("BertForSequenceClassification"),Q8o=o(" (BERT model)"),H8o=l(),kb=a("li"),Vce=a("strong"),U8o=o("big_bird"),J8o=o(" \u2014 "),$D=a("a"),Y8o=o("BigBirdForSequenceClassification"),K8o=o(" (BigBird model)"),Z8o=l(),Sb=a("li"),Xce=a("strong"),exo=o("bigbird_pegasus"),oxo=o(" \u2014 "),kD=a("a"),rxo=o("BigBirdPegasusForSequenceClassification"),txo=o(" (BigBirdPegasus model)"),axo=l(),Rb=a("li"),zce=a("strong"),nxo=o("camembert"),sxo=o(" \u2014 "),SD=a("a"),lxo=o("CamembertForSequenceClassification"),ixo=o(" (CamemBERT model)"),dxo=l(),Pb=a("li"),Wce=a("strong"),cxo=o("canine"),fxo=o(" \u2014 "),RD=a("a"),mxo=o("CanineForSequenceClassification"),gxo=o(" (Canine model)"),hxo=l(),Bb=a("li"),Qce=a("strong"),pxo=o("convbert"),uxo=o(" \u2014 "),PD=a("a"),_xo=o("ConvBertForSequenceClassification"),bxo=o(" (ConvBERT model)"),vxo=l(),Ib=a("li"),Hce=a("strong"),Fxo=o("ctrl"),Txo=o(" \u2014 "),BD=a("a"),Mxo=o("CTRLForSequenceClassification"),Exo=o(" (CTRL model)"),Cxo=l(),qb=a("li"),Uce=a("strong"),wxo=o("data2vec-text"),Axo=o(" \u2014 "),ID=a("a"),yxo=o("Data2VecTextForSequenceClassification"),Lxo=o(" (Data2VecText model)"),xxo=l(),Nb=a("li"),Jce=a("strong"),$xo=o("deberta"),kxo=o(" \u2014 "),qD=a("a"),Sxo=o("DebertaForSequenceClassification"),Rxo=o(" (DeBERTa model)"),Pxo=l(),jb=a("li"),Yce=a("strong"),Bxo=o("deberta-v2"),Ixo=o(" \u2014 "),ND=a("a"),qxo=o("DebertaV2ForSequenceClassification"),Nxo=o(" (DeBERTa-v2 model)"),jxo=l(),Db=a("li"),Kce=a("strong"),Dxo=o("distilbert"),Gxo=o(" \u2014 "),jD=a("a"),Oxo=o("DistilBertForSequenceClassification"),Vxo=o(" (DistilBERT model)"),Xxo=l(),Gb=a("li"),Zce=a("strong"),zxo=o("electra"),Wxo=o(" \u2014 "),DD=a("a"),Qxo=o("ElectraForSequenceClassification"),Hxo=o(" (ELECTRA model)"),Uxo=l(),Ob=a("li"),efe=a("strong"),Jxo=o("flaubert"),Yxo=o(" \u2014 "),GD=a("a"),Kxo=o("FlaubertForSequenceClassification"),Zxo=o(" (FlauBERT model)"),e9o=l(),Vb=a("li"),ofe=a("strong"),o9o=o("fnet"),r9o=o(" \u2014 "),OD=a("a"),t9o=o("FNetForSequenceClassification"),a9o=o(" (FNet model)"),n9o=l(),Xb=a("li"),rfe=a("strong"),s9o=o("funnel"),l9o=o(" \u2014 "),VD=a("a"),i9o=o("FunnelForSequenceClassification"),d9o=o(" (Funnel Transformer model)"),c9o=l(),zb=a("li"),tfe=a("strong"),f9o=o("gpt2"),m9o=o(" \u2014 "),XD=a("a"),g9o=o("GPT2ForSequenceClassification"),h9o=o(" (OpenAI GPT-2 model)"),p9o=l(),Wb=a("li"),afe=a("strong"),u9o=o("gpt_neo"),_9o=o(" \u2014 "),zD=a("a"),b9o=o("GPTNeoForSequenceClassification"),v9o=o(" (GPT Neo model)"),F9o=l(),Qb=a("li"),nfe=a("strong"),T9o=o("gptj"),M9o=o(" \u2014 "),WD=a("a"),E9o=o("GPTJForSequenceClassification"),C9o=o(" (GPT-J model)"),w9o=l(),Hb=a("li"),sfe=a("strong"),A9o=o("ibert"),y9o=o(" \u2014 "),QD=a("a"),L9o=o("IBertForSequenceClassification"),x9o=o(" (I-BERT model)"),$9o=l(),Ub=a("li"),lfe=a("strong"),k9o=o("layoutlm"),S9o=o(" \u2014 "),HD=a("a"),R9o=o("LayoutLMForSequenceClassification"),P9o=o(" (LayoutLM model)"),B9o=l(),Jb=a("li"),ife=a("strong"),I9o=o("layoutlmv2"),q9o=o(" \u2014 "),UD=a("a"),N9o=o("LayoutLMv2ForSequenceClassification"),j9o=o(" (LayoutLMv2 model)"),D9o=l(),Yb=a("li"),dfe=a("strong"),G9o=o("led"),O9o=o(" \u2014 "),JD=a("a"),V9o=o("LEDForSequenceClassification"),X9o=o(" (LED model)"),z9o=l(),Kb=a("li"),cfe=a("strong"),W9o=o("longformer"),Q9o=o(" \u2014 "),YD=a("a"),H9o=o("LongformerForSequenceClassification"),U9o=o(" (Longformer model)"),J9o=l(),Zb=a("li"),ffe=a("strong"),Y9o=o("mbart"),K9o=o(" \u2014 "),KD=a("a"),Z9o=o("MBartForSequenceClassification"),e$o=o(" (mBART model)"),o$o=l(),e2=a("li"),mfe=a("strong"),r$o=o("megatron-bert"),t$o=o(" \u2014 "),ZD=a("a"),a$o=o("MegatronBertForSequenceClassification"),n$o=o(" (MegatronBert model)"),s$o=l(),o2=a("li"),gfe=a("strong"),l$o=o("mobilebert"),i$o=o(" \u2014 "),eG=a("a"),d$o=o("MobileBertForSequenceClassification"),c$o=o(" (MobileBERT model)"),f$o=l(),r2=a("li"),hfe=a("strong"),m$o=o("mpnet"),g$o=o(" \u2014 "),oG=a("a"),h$o=o("MPNetForSequenceClassification"),p$o=o(" (MPNet model)"),u$o=l(),t2=a("li"),pfe=a("strong"),_$o=o("nystromformer"),b$o=o(" \u2014 "),rG=a("a"),v$o=o("NystromformerForSequenceClassification"),F$o=o(" (Nystromformer model)"),T$o=l(),a2=a("li"),ufe=a("strong"),M$o=o("openai-gpt"),E$o=o(" \u2014 "),tG=a("a"),C$o=o("OpenAIGPTForSequenceClassification"),w$o=o(" (OpenAI GPT model)"),A$o=l(),n2=a("li"),_fe=a("strong"),y$o=o("perceiver"),L$o=o(" \u2014 "),aG=a("a"),x$o=o("PerceiverForSequenceClassification"),$$o=o(" (Perceiver model)"),k$o=l(),s2=a("li"),bfe=a("strong"),S$o=o("plbart"),R$o=o(" \u2014 "),nG=a("a"),P$o=o("PLBartForSequenceClassification"),B$o=o(" (PLBart model)"),I$o=l(),l2=a("li"),vfe=a("strong"),q$o=o("qdqbert"),N$o=o(" \u2014 "),sG=a("a"),j$o=o("QDQBertForSequenceClassification"),D$o=o(" (QDQBert model)"),G$o=l(),i2=a("li"),Ffe=a("strong"),O$o=o("reformer"),V$o=o(" \u2014 "),lG=a("a"),X$o=o("ReformerForSequenceClassification"),z$o=o(" (Reformer model)"),W$o=l(),d2=a("li"),Tfe=a("strong"),Q$o=o("rembert"),H$o=o(" \u2014 "),iG=a("a"),U$o=o("RemBertForSequenceClassification"),J$o=o(" (RemBERT model)"),Y$o=l(),c2=a("li"),Mfe=a("strong"),K$o=o("roberta"),Z$o=o(" \u2014 "),dG=a("a"),eko=o("RobertaForSequenceClassification"),oko=o(" (RoBERTa model)"),rko=l(),f2=a("li"),Efe=a("strong"),tko=o("roformer"),ako=o(" \u2014 "),cG=a("a"),nko=o("RoFormerForSequenceClassification"),sko=o(" (RoFormer model)"),lko=l(),m2=a("li"),Cfe=a("strong"),iko=o("squeezebert"),dko=o(" \u2014 "),fG=a("a"),cko=o("SqueezeBertForSequenceClassification"),fko=o(" (SqueezeBERT model)"),mko=l(),g2=a("li"),wfe=a("strong"),gko=o("tapas"),hko=o(" \u2014 "),mG=a("a"),pko=o("TapasForSequenceClassification"),uko=o(" (TAPAS model)"),_ko=l(),h2=a("li"),Afe=a("strong"),bko=o("transfo-xl"),vko=o(" \u2014 "),gG=a("a"),Fko=o("TransfoXLForSequenceClassification"),Tko=o(" (Transformer-XL model)"),Mko=l(),p2=a("li"),yfe=a("strong"),Eko=o("xlm"),Cko=o(" \u2014 "),hG=a("a"),wko=o("XLMForSequenceClassification"),Ako=o(" (XLM model)"),yko=l(),u2=a("li"),Lfe=a("strong"),Lko=o("xlm-roberta"),xko=o(" \u2014 "),pG=a("a"),$ko=o("XLMRobertaForSequenceClassification"),kko=o(" (XLM-RoBERTa model)"),Sko=l(),_2=a("li"),xfe=a("strong"),Rko=o("xlm-roberta-xl"),Pko=o(" \u2014 "),uG=a("a"),Bko=o("XLMRobertaXLForSequenceClassification"),Iko=o(" (XLM-RoBERTa-XL model)"),qko=l(),b2=a("li"),$fe=a("strong"),Nko=o("xlnet"),jko=o(" \u2014 "),_G=a("a"),Dko=o("XLNetForSequenceClassification"),Gko=o(" (XLNet model)"),Oko=l(),v2=a("li"),kfe=a("strong"),Vko=o("yoso"),Xko=o(" \u2014 "),bG=a("a"),zko=o("YosoForSequenceClassification"),Wko=o(" (YOSO model)"),Qko=l(),F2=a("p"),Hko=o("The model is set in evaluation mode by default using "),Sfe=a("code"),Uko=o("model.eval()"),Jko=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rfe=a("code"),Yko=o("model.train()"),Kko=l(),F(T2.$$.fragment),eqe=l(),Oi=a("h2"),M2=a("a"),Pfe=a("span"),F(cy.$$.fragment),Zko=l(),Bfe=a("span"),eSo=o("AutoModelForMultipleChoice"),oqe=l(),Po=a("div"),F(fy.$$.fragment),oSo=l(),Vi=a("p"),rSo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),vG=a("a"),tSo=o("from_pretrained()"),aSo=o(" class method or the "),FG=a("a"),nSo=o("from_config()"),sSo=o(` class
method.`),lSo=l(),my=a("p"),iSo=o("This class cannot be instantiated directly using "),Ife=a("code"),dSo=o("__init__()"),cSo=o(" (throws an error)."),fSo=l(),dt=a("div"),F(gy.$$.fragment),mSo=l(),qfe=a("p"),gSo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),hSo=l(),Xi=a("p"),pSo=o(`Note:
Loading a model from its configuration file does `),Nfe=a("strong"),uSo=o("not"),_So=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TG=a("a"),bSo=o("from_pretrained()"),vSo=o(" to load the model weights."),FSo=l(),F(E2.$$.fragment),TSo=l(),ro=a("div"),F(hy.$$.fragment),MSo=l(),jfe=a("p"),ESo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),CSo=l(),Pa=a("p"),wSo=o("The model class to instantiate is selected based on the "),Dfe=a("code"),ASo=o("model_type"),ySo=o(` property of the config object (either
passed as an argument or loaded from `),Gfe=a("code"),LSo=o("pretrained_model_name_or_path"),xSo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ofe=a("code"),$So=o("pretrained_model_name_or_path"),kSo=o(":"),SSo=l(),Y=a("ul"),C2=a("li"),Vfe=a("strong"),RSo=o("albert"),PSo=o(" \u2014 "),MG=a("a"),BSo=o("AlbertForMultipleChoice"),ISo=o(" (ALBERT model)"),qSo=l(),w2=a("li"),Xfe=a("strong"),NSo=o("bert"),jSo=o(" \u2014 "),EG=a("a"),DSo=o("BertForMultipleChoice"),GSo=o(" (BERT model)"),OSo=l(),A2=a("li"),zfe=a("strong"),VSo=o("big_bird"),XSo=o(" \u2014 "),CG=a("a"),zSo=o("BigBirdForMultipleChoice"),WSo=o(" (BigBird model)"),QSo=l(),y2=a("li"),Wfe=a("strong"),HSo=o("camembert"),USo=o(" \u2014 "),wG=a("a"),JSo=o("CamembertForMultipleChoice"),YSo=o(" (CamemBERT model)"),KSo=l(),L2=a("li"),Qfe=a("strong"),ZSo=o("canine"),eRo=o(" \u2014 "),AG=a("a"),oRo=o("CanineForMultipleChoice"),rRo=o(" (Canine model)"),tRo=l(),x2=a("li"),Hfe=a("strong"),aRo=o("convbert"),nRo=o(" \u2014 "),yG=a("a"),sRo=o("ConvBertForMultipleChoice"),lRo=o(" (ConvBERT model)"),iRo=l(),$2=a("li"),Ufe=a("strong"),dRo=o("data2vec-text"),cRo=o(" \u2014 "),LG=a("a"),fRo=o("Data2VecTextForMultipleChoice"),mRo=o(" (Data2VecText model)"),gRo=l(),k2=a("li"),Jfe=a("strong"),hRo=o("deberta-v2"),pRo=o(" \u2014 "),xG=a("a"),uRo=o("DebertaV2ForMultipleChoice"),_Ro=o(" (DeBERTa-v2 model)"),bRo=l(),S2=a("li"),Yfe=a("strong"),vRo=o("distilbert"),FRo=o(" \u2014 "),$G=a("a"),TRo=o("DistilBertForMultipleChoice"),MRo=o(" (DistilBERT model)"),ERo=l(),R2=a("li"),Kfe=a("strong"),CRo=o("electra"),wRo=o(" \u2014 "),kG=a("a"),ARo=o("ElectraForMultipleChoice"),yRo=o(" (ELECTRA model)"),LRo=l(),P2=a("li"),Zfe=a("strong"),xRo=o("flaubert"),$Ro=o(" \u2014 "),SG=a("a"),kRo=o("FlaubertForMultipleChoice"),SRo=o(" (FlauBERT model)"),RRo=l(),B2=a("li"),eme=a("strong"),PRo=o("fnet"),BRo=o(" \u2014 "),RG=a("a"),IRo=o("FNetForMultipleChoice"),qRo=o(" (FNet model)"),NRo=l(),I2=a("li"),ome=a("strong"),jRo=o("funnel"),DRo=o(" \u2014 "),PG=a("a"),GRo=o("FunnelForMultipleChoice"),ORo=o(" (Funnel Transformer model)"),VRo=l(),q2=a("li"),rme=a("strong"),XRo=o("ibert"),zRo=o(" \u2014 "),BG=a("a"),WRo=o("IBertForMultipleChoice"),QRo=o(" (I-BERT model)"),HRo=l(),N2=a("li"),tme=a("strong"),URo=o("longformer"),JRo=o(" \u2014 "),IG=a("a"),YRo=o("LongformerForMultipleChoice"),KRo=o(" (Longformer model)"),ZRo=l(),j2=a("li"),ame=a("strong"),ePo=o("megatron-bert"),oPo=o(" \u2014 "),qG=a("a"),rPo=o("MegatronBertForMultipleChoice"),tPo=o(" (MegatronBert model)"),aPo=l(),D2=a("li"),nme=a("strong"),nPo=o("mobilebert"),sPo=o(" \u2014 "),NG=a("a"),lPo=o("MobileBertForMultipleChoice"),iPo=o(" (MobileBERT model)"),dPo=l(),G2=a("li"),sme=a("strong"),cPo=o("mpnet"),fPo=o(" \u2014 "),jG=a("a"),mPo=o("MPNetForMultipleChoice"),gPo=o(" (MPNet model)"),hPo=l(),O2=a("li"),lme=a("strong"),pPo=o("nystromformer"),uPo=o(" \u2014 "),DG=a("a"),_Po=o("NystromformerForMultipleChoice"),bPo=o(" (Nystromformer model)"),vPo=l(),V2=a("li"),ime=a("strong"),FPo=o("qdqbert"),TPo=o(" \u2014 "),GG=a("a"),MPo=o("QDQBertForMultipleChoice"),EPo=o(" (QDQBert model)"),CPo=l(),X2=a("li"),dme=a("strong"),wPo=o("rembert"),APo=o(" \u2014 "),OG=a("a"),yPo=o("RemBertForMultipleChoice"),LPo=o(" (RemBERT model)"),xPo=l(),z2=a("li"),cme=a("strong"),$Po=o("roberta"),kPo=o(" \u2014 "),VG=a("a"),SPo=o("RobertaForMultipleChoice"),RPo=o(" (RoBERTa model)"),PPo=l(),W2=a("li"),fme=a("strong"),BPo=o("roformer"),IPo=o(" \u2014 "),XG=a("a"),qPo=o("RoFormerForMultipleChoice"),NPo=o(" (RoFormer model)"),jPo=l(),Q2=a("li"),mme=a("strong"),DPo=o("squeezebert"),GPo=o(" \u2014 "),zG=a("a"),OPo=o("SqueezeBertForMultipleChoice"),VPo=o(" (SqueezeBERT model)"),XPo=l(),H2=a("li"),gme=a("strong"),zPo=o("xlm"),WPo=o(" \u2014 "),WG=a("a"),QPo=o("XLMForMultipleChoice"),HPo=o(" (XLM model)"),UPo=l(),U2=a("li"),hme=a("strong"),JPo=o("xlm-roberta"),YPo=o(" \u2014 "),QG=a("a"),KPo=o("XLMRobertaForMultipleChoice"),ZPo=o(" (XLM-RoBERTa model)"),eBo=l(),J2=a("li"),pme=a("strong"),oBo=o("xlm-roberta-xl"),rBo=o(" \u2014 "),HG=a("a"),tBo=o("XLMRobertaXLForMultipleChoice"),aBo=o(" (XLM-RoBERTa-XL model)"),nBo=l(),Y2=a("li"),ume=a("strong"),sBo=o("xlnet"),lBo=o(" \u2014 "),UG=a("a"),iBo=o("XLNetForMultipleChoice"),dBo=o(" (XLNet model)"),cBo=l(),K2=a("li"),_me=a("strong"),fBo=o("yoso"),mBo=o(" \u2014 "),JG=a("a"),gBo=o("YosoForMultipleChoice"),hBo=o(" (YOSO model)"),pBo=l(),Z2=a("p"),uBo=o("The model is set in evaluation mode by default using "),bme=a("code"),_Bo=o("model.eval()"),bBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vme=a("code"),vBo=o("model.train()"),FBo=l(),F(ev.$$.fragment),rqe=l(),zi=a("h2"),ov=a("a"),Fme=a("span"),F(py.$$.fragment),TBo=l(),Tme=a("span"),MBo=o("AutoModelForNextSentencePrediction"),tqe=l(),Bo=a("div"),F(uy.$$.fragment),EBo=l(),Wi=a("p"),CBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),YG=a("a"),wBo=o("from_pretrained()"),ABo=o(" class method or the "),KG=a("a"),yBo=o("from_config()"),LBo=o(` class
method.`),xBo=l(),_y=a("p"),$Bo=o("This class cannot be instantiated directly using "),Mme=a("code"),kBo=o("__init__()"),SBo=o(" (throws an error)."),RBo=l(),ct=a("div"),F(by.$$.fragment),PBo=l(),Eme=a("p"),BBo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),IBo=l(),Qi=a("p"),qBo=o(`Note:
Loading a model from its configuration file does `),Cme=a("strong"),NBo=o("not"),jBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZG=a("a"),DBo=o("from_pretrained()"),GBo=o(" to load the model weights."),OBo=l(),F(rv.$$.fragment),VBo=l(),to=a("div"),F(vy.$$.fragment),XBo=l(),wme=a("p"),zBo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),WBo=l(),Ba=a("p"),QBo=o("The model class to instantiate is selected based on the "),Ame=a("code"),HBo=o("model_type"),UBo=o(` property of the config object (either
passed as an argument or loaded from `),yme=a("code"),JBo=o("pretrained_model_name_or_path"),YBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lme=a("code"),KBo=o("pretrained_model_name_or_path"),ZBo=o(":"),eIo=l(),Yr=a("ul"),tv=a("li"),xme=a("strong"),oIo=o("bert"),rIo=o(" \u2014 "),eO=a("a"),tIo=o("BertForNextSentencePrediction"),aIo=o(" (BERT model)"),nIo=l(),av=a("li"),$me=a("strong"),sIo=o("fnet"),lIo=o(" \u2014 "),oO=a("a"),iIo=o("FNetForNextSentencePrediction"),dIo=o(" (FNet model)"),cIo=l(),nv=a("li"),kme=a("strong"),fIo=o("megatron-bert"),mIo=o(" \u2014 "),rO=a("a"),gIo=o("MegatronBertForNextSentencePrediction"),hIo=o(" (MegatronBert model)"),pIo=l(),sv=a("li"),Sme=a("strong"),uIo=o("mobilebert"),_Io=o(" \u2014 "),tO=a("a"),bIo=o("MobileBertForNextSentencePrediction"),vIo=o(" (MobileBERT model)"),FIo=l(),lv=a("li"),Rme=a("strong"),TIo=o("qdqbert"),MIo=o(" \u2014 "),aO=a("a"),EIo=o("QDQBertForNextSentencePrediction"),CIo=o(" (QDQBert model)"),wIo=l(),iv=a("p"),AIo=o("The model is set in evaluation mode by default using "),Pme=a("code"),yIo=o("model.eval()"),LIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bme=a("code"),xIo=o("model.train()"),$Io=l(),F(dv.$$.fragment),aqe=l(),Hi=a("h2"),cv=a("a"),Ime=a("span"),F(Fy.$$.fragment),kIo=l(),qme=a("span"),SIo=o("AutoModelForTokenClassification"),nqe=l(),Io=a("div"),F(Ty.$$.fragment),RIo=l(),Ui=a("p"),PIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),nO=a("a"),BIo=o("from_pretrained()"),IIo=o(" class method or the "),sO=a("a"),qIo=o("from_config()"),NIo=o(` class
method.`),jIo=l(),My=a("p"),DIo=o("This class cannot be instantiated directly using "),Nme=a("code"),GIo=o("__init__()"),OIo=o(" (throws an error)."),VIo=l(),ft=a("div"),F(Ey.$$.fragment),XIo=l(),jme=a("p"),zIo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),WIo=l(),Ji=a("p"),QIo=o(`Note:
Loading a model from its configuration file does `),Dme=a("strong"),HIo=o("not"),UIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lO=a("a"),JIo=o("from_pretrained()"),YIo=o(" to load the model weights."),KIo=l(),F(fv.$$.fragment),ZIo=l(),ao=a("div"),F(Cy.$$.fragment),eqo=l(),Gme=a("p"),oqo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),rqo=l(),Ia=a("p"),tqo=o("The model class to instantiate is selected based on the "),Ome=a("code"),aqo=o("model_type"),nqo=o(` property of the config object (either
passed as an argument or loaded from `),Vme=a("code"),sqo=o("pretrained_model_name_or_path"),lqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xme=a("code"),iqo=o("pretrained_model_name_or_path"),dqo=o(":"),cqo=l(),U=a("ul"),mv=a("li"),zme=a("strong"),fqo=o("albert"),mqo=o(" \u2014 "),iO=a("a"),gqo=o("AlbertForTokenClassification"),hqo=o(" (ALBERT model)"),pqo=l(),gv=a("li"),Wme=a("strong"),uqo=o("bert"),_qo=o(" \u2014 "),dO=a("a"),bqo=o("BertForTokenClassification"),vqo=o(" (BERT model)"),Fqo=l(),hv=a("li"),Qme=a("strong"),Tqo=o("big_bird"),Mqo=o(" \u2014 "),cO=a("a"),Eqo=o("BigBirdForTokenClassification"),Cqo=o(" (BigBird model)"),wqo=l(),pv=a("li"),Hme=a("strong"),Aqo=o("camembert"),yqo=o(" \u2014 "),fO=a("a"),Lqo=o("CamembertForTokenClassification"),xqo=o(" (CamemBERT model)"),$qo=l(),uv=a("li"),Ume=a("strong"),kqo=o("canine"),Sqo=o(" \u2014 "),mO=a("a"),Rqo=o("CanineForTokenClassification"),Pqo=o(" (Canine model)"),Bqo=l(),_v=a("li"),Jme=a("strong"),Iqo=o("convbert"),qqo=o(" \u2014 "),gO=a("a"),Nqo=o("ConvBertForTokenClassification"),jqo=o(" (ConvBERT model)"),Dqo=l(),bv=a("li"),Yme=a("strong"),Gqo=o("data2vec-text"),Oqo=o(" \u2014 "),hO=a("a"),Vqo=o("Data2VecTextForTokenClassification"),Xqo=o(" (Data2VecText model)"),zqo=l(),vv=a("li"),Kme=a("strong"),Wqo=o("deberta"),Qqo=o(" \u2014 "),pO=a("a"),Hqo=o("DebertaForTokenClassification"),Uqo=o(" (DeBERTa model)"),Jqo=l(),Fv=a("li"),Zme=a("strong"),Yqo=o("deberta-v2"),Kqo=o(" \u2014 "),uO=a("a"),Zqo=o("DebertaV2ForTokenClassification"),eNo=o(" (DeBERTa-v2 model)"),oNo=l(),Tv=a("li"),ege=a("strong"),rNo=o("distilbert"),tNo=o(" \u2014 "),_O=a("a"),aNo=o("DistilBertForTokenClassification"),nNo=o(" (DistilBERT model)"),sNo=l(),Mv=a("li"),oge=a("strong"),lNo=o("electra"),iNo=o(" \u2014 "),bO=a("a"),dNo=o("ElectraForTokenClassification"),cNo=o(" (ELECTRA model)"),fNo=l(),Ev=a("li"),rge=a("strong"),mNo=o("flaubert"),gNo=o(" \u2014 "),vO=a("a"),hNo=o("FlaubertForTokenClassification"),pNo=o(" (FlauBERT model)"),uNo=l(),Cv=a("li"),tge=a("strong"),_No=o("fnet"),bNo=o(" \u2014 "),FO=a("a"),vNo=o("FNetForTokenClassification"),FNo=o(" (FNet model)"),TNo=l(),wv=a("li"),age=a("strong"),MNo=o("funnel"),ENo=o(" \u2014 "),TO=a("a"),CNo=o("FunnelForTokenClassification"),wNo=o(" (Funnel Transformer model)"),ANo=l(),Av=a("li"),nge=a("strong"),yNo=o("gpt2"),LNo=o(" \u2014 "),MO=a("a"),xNo=o("GPT2ForTokenClassification"),$No=o(" (OpenAI GPT-2 model)"),kNo=l(),yv=a("li"),sge=a("strong"),SNo=o("ibert"),RNo=o(" \u2014 "),EO=a("a"),PNo=o("IBertForTokenClassification"),BNo=o(" (I-BERT model)"),INo=l(),Lv=a("li"),lge=a("strong"),qNo=o("layoutlm"),NNo=o(" \u2014 "),CO=a("a"),jNo=o("LayoutLMForTokenClassification"),DNo=o(" (LayoutLM model)"),GNo=l(),xv=a("li"),ige=a("strong"),ONo=o("layoutlmv2"),VNo=o(" \u2014 "),wO=a("a"),XNo=o("LayoutLMv2ForTokenClassification"),zNo=o(" (LayoutLMv2 model)"),WNo=l(),$v=a("li"),dge=a("strong"),QNo=o("longformer"),HNo=o(" \u2014 "),AO=a("a"),UNo=o("LongformerForTokenClassification"),JNo=o(" (Longformer model)"),YNo=l(),kv=a("li"),cge=a("strong"),KNo=o("megatron-bert"),ZNo=o(" \u2014 "),yO=a("a"),ejo=o("MegatronBertForTokenClassification"),ojo=o(" (MegatronBert model)"),rjo=l(),Sv=a("li"),fge=a("strong"),tjo=o("mobilebert"),ajo=o(" \u2014 "),LO=a("a"),njo=o("MobileBertForTokenClassification"),sjo=o(" (MobileBERT model)"),ljo=l(),Rv=a("li"),mge=a("strong"),ijo=o("mpnet"),djo=o(" \u2014 "),xO=a("a"),cjo=o("MPNetForTokenClassification"),fjo=o(" (MPNet model)"),mjo=l(),Pv=a("li"),gge=a("strong"),gjo=o("nystromformer"),hjo=o(" \u2014 "),$O=a("a"),pjo=o("NystromformerForTokenClassification"),ujo=o(" (Nystromformer model)"),_jo=l(),Bv=a("li"),hge=a("strong"),bjo=o("qdqbert"),vjo=o(" \u2014 "),kO=a("a"),Fjo=o("QDQBertForTokenClassification"),Tjo=o(" (QDQBert model)"),Mjo=l(),Iv=a("li"),pge=a("strong"),Ejo=o("rembert"),Cjo=o(" \u2014 "),SO=a("a"),wjo=o("RemBertForTokenClassification"),Ajo=o(" (RemBERT model)"),yjo=l(),qv=a("li"),uge=a("strong"),Ljo=o("roberta"),xjo=o(" \u2014 "),RO=a("a"),$jo=o("RobertaForTokenClassification"),kjo=o(" (RoBERTa model)"),Sjo=l(),Nv=a("li"),_ge=a("strong"),Rjo=o("roformer"),Pjo=o(" \u2014 "),PO=a("a"),Bjo=o("RoFormerForTokenClassification"),Ijo=o(" (RoFormer model)"),qjo=l(),jv=a("li"),bge=a("strong"),Njo=o("squeezebert"),jjo=o(" \u2014 "),BO=a("a"),Djo=o("SqueezeBertForTokenClassification"),Gjo=o(" (SqueezeBERT model)"),Ojo=l(),Dv=a("li"),vge=a("strong"),Vjo=o("xlm"),Xjo=o(" \u2014 "),IO=a("a"),zjo=o("XLMForTokenClassification"),Wjo=o(" (XLM model)"),Qjo=l(),Gv=a("li"),Fge=a("strong"),Hjo=o("xlm-roberta"),Ujo=o(" \u2014 "),qO=a("a"),Jjo=o("XLMRobertaForTokenClassification"),Yjo=o(" (XLM-RoBERTa model)"),Kjo=l(),Ov=a("li"),Tge=a("strong"),Zjo=o("xlm-roberta-xl"),eDo=o(" \u2014 "),NO=a("a"),oDo=o("XLMRobertaXLForTokenClassification"),rDo=o(" (XLM-RoBERTa-XL model)"),tDo=l(),Vv=a("li"),Mge=a("strong"),aDo=o("xlnet"),nDo=o(" \u2014 "),jO=a("a"),sDo=o("XLNetForTokenClassification"),lDo=o(" (XLNet model)"),iDo=l(),Xv=a("li"),Ege=a("strong"),dDo=o("yoso"),cDo=o(" \u2014 "),DO=a("a"),fDo=o("YosoForTokenClassification"),mDo=o(" (YOSO model)"),gDo=l(),zv=a("p"),hDo=o("The model is set in evaluation mode by default using "),Cge=a("code"),pDo=o("model.eval()"),uDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wge=a("code"),_Do=o("model.train()"),bDo=l(),F(Wv.$$.fragment),sqe=l(),Yi=a("h2"),Qv=a("a"),Age=a("span"),F(wy.$$.fragment),vDo=l(),yge=a("span"),FDo=o("AutoModelForQuestionAnswering"),lqe=l(),qo=a("div"),F(Ay.$$.fragment),TDo=l(),Ki=a("p"),MDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),GO=a("a"),EDo=o("from_pretrained()"),CDo=o(" class method or the "),OO=a("a"),wDo=o("from_config()"),ADo=o(` class
method.`),yDo=l(),yy=a("p"),LDo=o("This class cannot be instantiated directly using "),Lge=a("code"),xDo=o("__init__()"),$Do=o(" (throws an error)."),kDo=l(),mt=a("div"),F(Ly.$$.fragment),SDo=l(),xge=a("p"),RDo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),PDo=l(),Zi=a("p"),BDo=o(`Note:
Loading a model from its configuration file does `),$ge=a("strong"),IDo=o("not"),qDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VO=a("a"),NDo=o("from_pretrained()"),jDo=o(" to load the model weights."),DDo=l(),F(Hv.$$.fragment),GDo=l(),no=a("div"),F(xy.$$.fragment),ODo=l(),kge=a("p"),VDo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),XDo=l(),qa=a("p"),zDo=o("The model class to instantiate is selected based on the "),Sge=a("code"),WDo=o("model_type"),QDo=o(` property of the config object (either
passed as an argument or loaded from `),Rge=a("code"),HDo=o("pretrained_model_name_or_path"),UDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pge=a("code"),JDo=o("pretrained_model_name_or_path"),YDo=o(":"),KDo=l(),V=a("ul"),Uv=a("li"),Bge=a("strong"),ZDo=o("albert"),eGo=o(" \u2014 "),XO=a("a"),oGo=o("AlbertForQuestionAnswering"),rGo=o(" (ALBERT model)"),tGo=l(),Jv=a("li"),Ige=a("strong"),aGo=o("bart"),nGo=o(" \u2014 "),zO=a("a"),sGo=o("BartForQuestionAnswering"),lGo=o(" (BART model)"),iGo=l(),Yv=a("li"),qge=a("strong"),dGo=o("bert"),cGo=o(" \u2014 "),WO=a("a"),fGo=o("BertForQuestionAnswering"),mGo=o(" (BERT model)"),gGo=l(),Kv=a("li"),Nge=a("strong"),hGo=o("big_bird"),pGo=o(" \u2014 "),QO=a("a"),uGo=o("BigBirdForQuestionAnswering"),_Go=o(" (BigBird model)"),bGo=l(),Zv=a("li"),jge=a("strong"),vGo=o("bigbird_pegasus"),FGo=o(" \u2014 "),HO=a("a"),TGo=o("BigBirdPegasusForQuestionAnswering"),MGo=o(" (BigBirdPegasus model)"),EGo=l(),e3=a("li"),Dge=a("strong"),CGo=o("camembert"),wGo=o(" \u2014 "),UO=a("a"),AGo=o("CamembertForQuestionAnswering"),yGo=o(" (CamemBERT model)"),LGo=l(),o3=a("li"),Gge=a("strong"),xGo=o("canine"),$Go=o(" \u2014 "),JO=a("a"),kGo=o("CanineForQuestionAnswering"),SGo=o(" (Canine model)"),RGo=l(),r3=a("li"),Oge=a("strong"),PGo=o("convbert"),BGo=o(" \u2014 "),YO=a("a"),IGo=o("ConvBertForQuestionAnswering"),qGo=o(" (ConvBERT model)"),NGo=l(),t3=a("li"),Vge=a("strong"),jGo=o("data2vec-text"),DGo=o(" \u2014 "),KO=a("a"),GGo=o("Data2VecTextForQuestionAnswering"),OGo=o(" (Data2VecText model)"),VGo=l(),a3=a("li"),Xge=a("strong"),XGo=o("deberta"),zGo=o(" \u2014 "),ZO=a("a"),WGo=o("DebertaForQuestionAnswering"),QGo=o(" (DeBERTa model)"),HGo=l(),n3=a("li"),zge=a("strong"),UGo=o("deberta-v2"),JGo=o(" \u2014 "),eV=a("a"),YGo=o("DebertaV2ForQuestionAnswering"),KGo=o(" (DeBERTa-v2 model)"),ZGo=l(),s3=a("li"),Wge=a("strong"),eOo=o("distilbert"),oOo=o(" \u2014 "),oV=a("a"),rOo=o("DistilBertForQuestionAnswering"),tOo=o(" (DistilBERT model)"),aOo=l(),l3=a("li"),Qge=a("strong"),nOo=o("electra"),sOo=o(" \u2014 "),rV=a("a"),lOo=o("ElectraForQuestionAnswering"),iOo=o(" (ELECTRA model)"),dOo=l(),i3=a("li"),Hge=a("strong"),cOo=o("flaubert"),fOo=o(" \u2014 "),tV=a("a"),mOo=o("FlaubertForQuestionAnsweringSimple"),gOo=o(" (FlauBERT model)"),hOo=l(),d3=a("li"),Uge=a("strong"),pOo=o("fnet"),uOo=o(" \u2014 "),aV=a("a"),_Oo=o("FNetForQuestionAnswering"),bOo=o(" (FNet model)"),vOo=l(),c3=a("li"),Jge=a("strong"),FOo=o("funnel"),TOo=o(" \u2014 "),nV=a("a"),MOo=o("FunnelForQuestionAnswering"),EOo=o(" (Funnel Transformer model)"),COo=l(),f3=a("li"),Yge=a("strong"),wOo=o("gptj"),AOo=o(" \u2014 "),sV=a("a"),yOo=o("GPTJForQuestionAnswering"),LOo=o(" (GPT-J model)"),xOo=l(),m3=a("li"),Kge=a("strong"),$Oo=o("ibert"),kOo=o(" \u2014 "),lV=a("a"),SOo=o("IBertForQuestionAnswering"),ROo=o(" (I-BERT model)"),POo=l(),g3=a("li"),Zge=a("strong"),BOo=o("layoutlmv2"),IOo=o(" \u2014 "),iV=a("a"),qOo=o("LayoutLMv2ForQuestionAnswering"),NOo=o(" (LayoutLMv2 model)"),jOo=l(),h3=a("li"),ehe=a("strong"),DOo=o("led"),GOo=o(" \u2014 "),dV=a("a"),OOo=o("LEDForQuestionAnswering"),VOo=o(" (LED model)"),XOo=l(),p3=a("li"),ohe=a("strong"),zOo=o("longformer"),WOo=o(" \u2014 "),cV=a("a"),QOo=o("LongformerForQuestionAnswering"),HOo=o(" (Longformer model)"),UOo=l(),u3=a("li"),rhe=a("strong"),JOo=o("lxmert"),YOo=o(" \u2014 "),fV=a("a"),KOo=o("LxmertForQuestionAnswering"),ZOo=o(" (LXMERT model)"),eVo=l(),_3=a("li"),the=a("strong"),oVo=o("mbart"),rVo=o(" \u2014 "),mV=a("a"),tVo=o("MBartForQuestionAnswering"),aVo=o(" (mBART model)"),nVo=l(),b3=a("li"),ahe=a("strong"),sVo=o("megatron-bert"),lVo=o(" \u2014 "),gV=a("a"),iVo=o("MegatronBertForQuestionAnswering"),dVo=o(" (MegatronBert model)"),cVo=l(),v3=a("li"),nhe=a("strong"),fVo=o("mobilebert"),mVo=o(" \u2014 "),hV=a("a"),gVo=o("MobileBertForQuestionAnswering"),hVo=o(" (MobileBERT model)"),pVo=l(),F3=a("li"),she=a("strong"),uVo=o("mpnet"),_Vo=o(" \u2014 "),pV=a("a"),bVo=o("MPNetForQuestionAnswering"),vVo=o(" (MPNet model)"),FVo=l(),T3=a("li"),lhe=a("strong"),TVo=o("nystromformer"),MVo=o(" \u2014 "),uV=a("a"),EVo=o("NystromformerForQuestionAnswering"),CVo=o(" (Nystromformer model)"),wVo=l(),M3=a("li"),ihe=a("strong"),AVo=o("qdqbert"),yVo=o(" \u2014 "),_V=a("a"),LVo=o("QDQBertForQuestionAnswering"),xVo=o(" (QDQBert model)"),$Vo=l(),E3=a("li"),dhe=a("strong"),kVo=o("reformer"),SVo=o(" \u2014 "),bV=a("a"),RVo=o("ReformerForQuestionAnswering"),PVo=o(" (Reformer model)"),BVo=l(),C3=a("li"),che=a("strong"),IVo=o("rembert"),qVo=o(" \u2014 "),vV=a("a"),NVo=o("RemBertForQuestionAnswering"),jVo=o(" (RemBERT model)"),DVo=l(),w3=a("li"),fhe=a("strong"),GVo=o("roberta"),OVo=o(" \u2014 "),FV=a("a"),VVo=o("RobertaForQuestionAnswering"),XVo=o(" (RoBERTa model)"),zVo=l(),A3=a("li"),mhe=a("strong"),WVo=o("roformer"),QVo=o(" \u2014 "),TV=a("a"),HVo=o("RoFormerForQuestionAnswering"),UVo=o(" (RoFormer model)"),JVo=l(),y3=a("li"),ghe=a("strong"),YVo=o("splinter"),KVo=o(" \u2014 "),MV=a("a"),ZVo=o("SplinterForQuestionAnswering"),eXo=o(" (Splinter model)"),oXo=l(),L3=a("li"),hhe=a("strong"),rXo=o("squeezebert"),tXo=o(" \u2014 "),EV=a("a"),aXo=o("SqueezeBertForQuestionAnswering"),nXo=o(" (SqueezeBERT model)"),sXo=l(),x3=a("li"),phe=a("strong"),lXo=o("xlm"),iXo=o(" \u2014 "),CV=a("a"),dXo=o("XLMForQuestionAnsweringSimple"),cXo=o(" (XLM model)"),fXo=l(),$3=a("li"),uhe=a("strong"),mXo=o("xlm-roberta"),gXo=o(" \u2014 "),wV=a("a"),hXo=o("XLMRobertaForQuestionAnswering"),pXo=o(" (XLM-RoBERTa model)"),uXo=l(),k3=a("li"),_he=a("strong"),_Xo=o("xlm-roberta-xl"),bXo=o(" \u2014 "),AV=a("a"),vXo=o("XLMRobertaXLForQuestionAnswering"),FXo=o(" (XLM-RoBERTa-XL model)"),TXo=l(),S3=a("li"),bhe=a("strong"),MXo=o("xlnet"),EXo=o(" \u2014 "),yV=a("a"),CXo=o("XLNetForQuestionAnsweringSimple"),wXo=o(" (XLNet model)"),AXo=l(),R3=a("li"),vhe=a("strong"),yXo=o("yoso"),LXo=o(" \u2014 "),LV=a("a"),xXo=o("YosoForQuestionAnswering"),$Xo=o(" (YOSO model)"),kXo=l(),P3=a("p"),SXo=o("The model is set in evaluation mode by default using "),Fhe=a("code"),RXo=o("model.eval()"),PXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),The=a("code"),BXo=o("model.train()"),IXo=l(),F(B3.$$.fragment),iqe=l(),ed=a("h2"),I3=a("a"),Mhe=a("span"),F($y.$$.fragment),qXo=l(),Ehe=a("span"),NXo=o("AutoModelForTableQuestionAnswering"),dqe=l(),No=a("div"),F(ky.$$.fragment),jXo=l(),od=a("p"),DXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),xV=a("a"),GXo=o("from_pretrained()"),OXo=o(" class method or the "),$V=a("a"),VXo=o("from_config()"),XXo=o(` class
method.`),zXo=l(),Sy=a("p"),WXo=o("This class cannot be instantiated directly using "),Che=a("code"),QXo=o("__init__()"),HXo=o(" (throws an error)."),UXo=l(),gt=a("div"),F(Ry.$$.fragment),JXo=l(),whe=a("p"),YXo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),KXo=l(),rd=a("p"),ZXo=o(`Note:
Loading a model from its configuration file does `),Ahe=a("strong"),ezo=o("not"),ozo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kV=a("a"),rzo=o("from_pretrained()"),tzo=o(" to load the model weights."),azo=l(),F(q3.$$.fragment),nzo=l(),so=a("div"),F(Py.$$.fragment),szo=l(),yhe=a("p"),lzo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),izo=l(),Na=a("p"),dzo=o("The model class to instantiate is selected based on the "),Lhe=a("code"),czo=o("model_type"),fzo=o(` property of the config object (either
passed as an argument or loaded from `),xhe=a("code"),mzo=o("pretrained_model_name_or_path"),gzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$he=a("code"),hzo=o("pretrained_model_name_or_path"),pzo=o(":"),uzo=l(),khe=a("ul"),N3=a("li"),She=a("strong"),_zo=o("tapas"),bzo=o(" \u2014 "),SV=a("a"),vzo=o("TapasForQuestionAnswering"),Fzo=o(" (TAPAS model)"),Tzo=l(),j3=a("p"),Mzo=o("The model is set in evaluation mode by default using "),Rhe=a("code"),Ezo=o("model.eval()"),Czo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Phe=a("code"),wzo=o("model.train()"),Azo=l(),F(D3.$$.fragment),cqe=l(),td=a("h2"),G3=a("a"),Bhe=a("span"),F(By.$$.fragment),yzo=l(),Ihe=a("span"),Lzo=o("AutoModelForImageClassification"),fqe=l(),jo=a("div"),F(Iy.$$.fragment),xzo=l(),ad=a("p"),$zo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),RV=a("a"),kzo=o("from_pretrained()"),Szo=o(" class method or the "),PV=a("a"),Rzo=o("from_config()"),Pzo=o(` class
method.`),Bzo=l(),qy=a("p"),Izo=o("This class cannot be instantiated directly using "),qhe=a("code"),qzo=o("__init__()"),Nzo=o(" (throws an error)."),jzo=l(),ht=a("div"),F(Ny.$$.fragment),Dzo=l(),Nhe=a("p"),Gzo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Ozo=l(),nd=a("p"),Vzo=o(`Note:
Loading a model from its configuration file does `),jhe=a("strong"),Xzo=o("not"),zzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BV=a("a"),Wzo=o("from_pretrained()"),Qzo=o(" to load the model weights."),Hzo=l(),F(O3.$$.fragment),Uzo=l(),lo=a("div"),F(jy.$$.fragment),Jzo=l(),Dhe=a("p"),Yzo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Kzo=l(),ja=a("p"),Zzo=o("The model class to instantiate is selected based on the "),Ghe=a("code"),eWo=o("model_type"),oWo=o(` property of the config object (either
passed as an argument or loaded from `),Ohe=a("code"),rWo=o("pretrained_model_name_or_path"),tWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vhe=a("code"),aWo=o("pretrained_model_name_or_path"),nWo=o(":"),sWo=l(),Fe=a("ul"),V3=a("li"),Xhe=a("strong"),lWo=o("beit"),iWo=o(" \u2014 "),IV=a("a"),dWo=o("BeitForImageClassification"),cWo=o(" (BEiT model)"),fWo=l(),X3=a("li"),zhe=a("strong"),mWo=o("convnext"),gWo=o(" \u2014 "),qV=a("a"),hWo=o("ConvNextForImageClassification"),pWo=o(" (ConvNext model)"),uWo=l(),z3=a("li"),Whe=a("strong"),_Wo=o("data2vec-vision"),bWo=o(" \u2014 "),NV=a("a"),vWo=o("Data2VecVisionForImageClassification"),FWo=o(" (Data2VecVision model)"),TWo=l(),Ps=a("li"),Qhe=a("strong"),MWo=o("deit"),EWo=o(" \u2014 "),jV=a("a"),CWo=o("DeiTForImageClassification"),wWo=o(" or "),DV=a("a"),AWo=o("DeiTForImageClassificationWithTeacher"),yWo=o(" (DeiT model)"),LWo=l(),W3=a("li"),Hhe=a("strong"),xWo=o("imagegpt"),$Wo=o(" \u2014 "),GV=a("a"),kWo=o("ImageGPTForImageClassification"),SWo=o(" (ImageGPT model)"),RWo=l(),pt=a("li"),Uhe=a("strong"),PWo=o("perceiver"),BWo=o(" \u2014 "),OV=a("a"),IWo=o("PerceiverForImageClassificationLearned"),qWo=o(" or "),VV=a("a"),NWo=o("PerceiverForImageClassificationFourier"),jWo=o(" or "),XV=a("a"),DWo=o("PerceiverForImageClassificationConvProcessing"),GWo=o(" (Perceiver model)"),OWo=l(),Q3=a("li"),Jhe=a("strong"),VWo=o("poolformer"),XWo=o(" \u2014 "),zV=a("a"),zWo=o("PoolFormerForImageClassification"),WWo=o(" (PoolFormer model)"),QWo=l(),H3=a("li"),Yhe=a("strong"),HWo=o("regnet"),UWo=o(" \u2014 "),WV=a("a"),JWo=o("RegNetForImageClassification"),YWo=o(" (RegNet model)"),KWo=l(),U3=a("li"),Khe=a("strong"),ZWo=o("resnet"),eQo=o(" \u2014 "),QV=a("a"),oQo=o("ResNetForImageClassification"),rQo=o(" (ResNet model)"),tQo=l(),J3=a("li"),Zhe=a("strong"),aQo=o("segformer"),nQo=o(" \u2014 "),HV=a("a"),sQo=o("SegformerForImageClassification"),lQo=o(" (SegFormer model)"),iQo=l(),Y3=a("li"),epe=a("strong"),dQo=o("swin"),cQo=o(" \u2014 "),UV=a("a"),fQo=o("SwinForImageClassification"),mQo=o(" (Swin model)"),gQo=l(),K3=a("li"),ope=a("strong"),hQo=o("van"),pQo=o(" \u2014 "),JV=a("a"),uQo=o("VanForImageClassification"),_Qo=o(" (VAN model)"),bQo=l(),Z3=a("li"),rpe=a("strong"),vQo=o("vit"),FQo=o(" \u2014 "),YV=a("a"),TQo=o("ViTForImageClassification"),MQo=o(" (ViT model)"),EQo=l(),eF=a("p"),CQo=o("The model is set in evaluation mode by default using "),tpe=a("code"),wQo=o("model.eval()"),AQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ape=a("code"),yQo=o("model.train()"),LQo=l(),F(oF.$$.fragment),mqe=l(),sd=a("h2"),rF=a("a"),npe=a("span"),F(Dy.$$.fragment),xQo=l(),spe=a("span"),$Qo=o("AutoModelForVision2Seq"),gqe=l(),Do=a("div"),F(Gy.$$.fragment),kQo=l(),ld=a("p"),SQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),KV=a("a"),RQo=o("from_pretrained()"),PQo=o(" class method or the "),ZV=a("a"),BQo=o("from_config()"),IQo=o(` class
method.`),qQo=l(),Oy=a("p"),NQo=o("This class cannot be instantiated directly using "),lpe=a("code"),jQo=o("__init__()"),DQo=o(" (throws an error)."),GQo=l(),ut=a("div"),F(Vy.$$.fragment),OQo=l(),ipe=a("p"),VQo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),XQo=l(),id=a("p"),zQo=o(`Note:
Loading a model from its configuration file does `),dpe=a("strong"),WQo=o("not"),QQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eX=a("a"),HQo=o("from_pretrained()"),UQo=o(" to load the model weights."),JQo=l(),F(tF.$$.fragment),YQo=l(),io=a("div"),F(Xy.$$.fragment),KQo=l(),cpe=a("p"),ZQo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),eHo=l(),Da=a("p"),oHo=o("The model class to instantiate is selected based on the "),fpe=a("code"),rHo=o("model_type"),tHo=o(` property of the config object (either
passed as an argument or loaded from `),mpe=a("code"),aHo=o("pretrained_model_name_or_path"),nHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gpe=a("code"),sHo=o("pretrained_model_name_or_path"),lHo=o(":"),iHo=l(),hpe=a("ul"),aF=a("li"),ppe=a("strong"),dHo=o("vision-encoder-decoder"),cHo=o(" \u2014 "),oX=a("a"),fHo=o("VisionEncoderDecoderModel"),mHo=o(" (Vision Encoder decoder model)"),gHo=l(),nF=a("p"),hHo=o("The model is set in evaluation mode by default using "),upe=a("code"),pHo=o("model.eval()"),uHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_pe=a("code"),_Ho=o("model.train()"),bHo=l(),F(sF.$$.fragment),hqe=l(),dd=a("h2"),lF=a("a"),bpe=a("span"),F(zy.$$.fragment),vHo=l(),vpe=a("span"),FHo=o("AutoModelForAudioClassification"),pqe=l(),Go=a("div"),F(Wy.$$.fragment),THo=l(),cd=a("p"),MHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),rX=a("a"),EHo=o("from_pretrained()"),CHo=o(" class method or the "),tX=a("a"),wHo=o("from_config()"),AHo=o(` class
method.`),yHo=l(),Qy=a("p"),LHo=o("This class cannot be instantiated directly using "),Fpe=a("code"),xHo=o("__init__()"),$Ho=o(" (throws an error)."),kHo=l(),_t=a("div"),F(Hy.$$.fragment),SHo=l(),Tpe=a("p"),RHo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),PHo=l(),fd=a("p"),BHo=o(`Note:
Loading a model from its configuration file does `),Mpe=a("strong"),IHo=o("not"),qHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aX=a("a"),NHo=o("from_pretrained()"),jHo=o(" to load the model weights."),DHo=l(),F(iF.$$.fragment),GHo=l(),co=a("div"),F(Uy.$$.fragment),OHo=l(),Epe=a("p"),VHo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),XHo=l(),Ga=a("p"),zHo=o("The model class to instantiate is selected based on the "),Cpe=a("code"),WHo=o("model_type"),QHo=o(` property of the config object (either
passed as an argument or loaded from `),wpe=a("code"),HHo=o("pretrained_model_name_or_path"),UHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ape=a("code"),JHo=o("pretrained_model_name_or_path"),YHo=o(":"),KHo=l(),ke=a("ul"),dF=a("li"),ype=a("strong"),ZHo=o("data2vec-audio"),eUo=o(" \u2014 "),nX=a("a"),oUo=o("Data2VecAudioForSequenceClassification"),rUo=o(" (Data2VecAudio model)"),tUo=l(),cF=a("li"),Lpe=a("strong"),aUo=o("hubert"),nUo=o(" \u2014 "),sX=a("a"),sUo=o("HubertForSequenceClassification"),lUo=o(" (Hubert model)"),iUo=l(),fF=a("li"),xpe=a("strong"),dUo=o("sew"),cUo=o(" \u2014 "),lX=a("a"),fUo=o("SEWForSequenceClassification"),mUo=o(" (SEW model)"),gUo=l(),mF=a("li"),$pe=a("strong"),hUo=o("sew-d"),pUo=o(" \u2014 "),iX=a("a"),uUo=o("SEWDForSequenceClassification"),_Uo=o(" (SEW-D model)"),bUo=l(),gF=a("li"),kpe=a("strong"),vUo=o("unispeech"),FUo=o(" \u2014 "),dX=a("a"),TUo=o("UniSpeechForSequenceClassification"),MUo=o(" (UniSpeech model)"),EUo=l(),hF=a("li"),Spe=a("strong"),CUo=o("unispeech-sat"),wUo=o(" \u2014 "),cX=a("a"),AUo=o("UniSpeechSatForSequenceClassification"),yUo=o(" (UniSpeechSat model)"),LUo=l(),pF=a("li"),Rpe=a("strong"),xUo=o("wav2vec2"),$Uo=o(" \u2014 "),fX=a("a"),kUo=o("Wav2Vec2ForSequenceClassification"),SUo=o(" (Wav2Vec2 model)"),RUo=l(),uF=a("li"),Ppe=a("strong"),PUo=o("wav2vec2-conformer"),BUo=o(" \u2014 "),mX=a("a"),IUo=o("Wav2Vec2ConformerForSequenceClassification"),qUo=o(" (Wav2Vec2-Conformer model)"),NUo=l(),_F=a("li"),Bpe=a("strong"),jUo=o("wavlm"),DUo=o(" \u2014 "),gX=a("a"),GUo=o("WavLMForSequenceClassification"),OUo=o(" (WavLM model)"),VUo=l(),bF=a("p"),XUo=o("The model is set in evaluation mode by default using "),Ipe=a("code"),zUo=o("model.eval()"),WUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qpe=a("code"),QUo=o("model.train()"),HUo=l(),F(vF.$$.fragment),uqe=l(),md=a("h2"),FF=a("a"),Npe=a("span"),F(Jy.$$.fragment),UUo=l(),jpe=a("span"),JUo=o("AutoModelForAudioFrameClassification"),_qe=l(),Oo=a("div"),F(Yy.$$.fragment),YUo=l(),gd=a("p"),KUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),hX=a("a"),ZUo=o("from_pretrained()"),eJo=o(" class method or the "),pX=a("a"),oJo=o("from_config()"),rJo=o(` class
method.`),tJo=l(),Ky=a("p"),aJo=o("This class cannot be instantiated directly using "),Dpe=a("code"),nJo=o("__init__()"),sJo=o(" (throws an error)."),lJo=l(),bt=a("div"),F(Zy.$$.fragment),iJo=l(),Gpe=a("p"),dJo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),cJo=l(),hd=a("p"),fJo=o(`Note:
Loading a model from its configuration file does `),Ope=a("strong"),mJo=o("not"),gJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uX=a("a"),hJo=o("from_pretrained()"),pJo=o(" to load the model weights."),uJo=l(),F(TF.$$.fragment),_Jo=l(),fo=a("div"),F(eL.$$.fragment),bJo=l(),Vpe=a("p"),vJo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),FJo=l(),Oa=a("p"),TJo=o("The model class to instantiate is selected based on the "),Xpe=a("code"),MJo=o("model_type"),EJo=o(` property of the config object (either
passed as an argument or loaded from `),zpe=a("code"),CJo=o("pretrained_model_name_or_path"),wJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wpe=a("code"),AJo=o("pretrained_model_name_or_path"),yJo=o(":"),LJo=l(),Kr=a("ul"),MF=a("li"),Qpe=a("strong"),xJo=o("data2vec-audio"),$Jo=o(" \u2014 "),_X=a("a"),kJo=o("Data2VecAudioForAudioFrameClassification"),SJo=o(" (Data2VecAudio model)"),RJo=l(),EF=a("li"),Hpe=a("strong"),PJo=o("unispeech-sat"),BJo=o(" \u2014 "),bX=a("a"),IJo=o("UniSpeechSatForAudioFrameClassification"),qJo=o(" (UniSpeechSat model)"),NJo=l(),CF=a("li"),Upe=a("strong"),jJo=o("wav2vec2"),DJo=o(" \u2014 "),vX=a("a"),GJo=o("Wav2Vec2ForAudioFrameClassification"),OJo=o(" (Wav2Vec2 model)"),VJo=l(),wF=a("li"),Jpe=a("strong"),XJo=o("wav2vec2-conformer"),zJo=o(" \u2014 "),FX=a("a"),WJo=o("Wav2Vec2ConformerForAudioFrameClassification"),QJo=o(" (Wav2Vec2-Conformer model)"),HJo=l(),AF=a("li"),Ype=a("strong"),UJo=o("wavlm"),JJo=o(" \u2014 "),TX=a("a"),YJo=o("WavLMForAudioFrameClassification"),KJo=o(" (WavLM model)"),ZJo=l(),yF=a("p"),eYo=o("The model is set in evaluation mode by default using "),Kpe=a("code"),oYo=o("model.eval()"),rYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zpe=a("code"),tYo=o("model.train()"),aYo=l(),F(LF.$$.fragment),bqe=l(),pd=a("h2"),xF=a("a"),eue=a("span"),F(oL.$$.fragment),nYo=l(),oue=a("span"),sYo=o("AutoModelForCTC"),vqe=l(),Vo=a("div"),F(rL.$$.fragment),lYo=l(),ud=a("p"),iYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),MX=a("a"),dYo=o("from_pretrained()"),cYo=o(" class method or the "),EX=a("a"),fYo=o("from_config()"),mYo=o(` class
method.`),gYo=l(),tL=a("p"),hYo=o("This class cannot be instantiated directly using "),rue=a("code"),pYo=o("__init__()"),uYo=o(" (throws an error)."),_Yo=l(),vt=a("div"),F(aL.$$.fragment),bYo=l(),tue=a("p"),vYo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),FYo=l(),_d=a("p"),TYo=o(`Note:
Loading a model from its configuration file does `),aue=a("strong"),MYo=o("not"),EYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CX=a("a"),CYo=o("from_pretrained()"),wYo=o(" to load the model weights."),AYo=l(),F($F.$$.fragment),yYo=l(),mo=a("div"),F(nL.$$.fragment),LYo=l(),nue=a("p"),xYo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),$Yo=l(),Va=a("p"),kYo=o("The model class to instantiate is selected based on the "),sue=a("code"),SYo=o("model_type"),RYo=o(` property of the config object (either
passed as an argument or loaded from `),lue=a("code"),PYo=o("pretrained_model_name_or_path"),BYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iue=a("code"),IYo=o("pretrained_model_name_or_path"),qYo=o(":"),NYo=l(),Se=a("ul"),kF=a("li"),due=a("strong"),jYo=o("data2vec-audio"),DYo=o(" \u2014 "),wX=a("a"),GYo=o("Data2VecAudioForCTC"),OYo=o(" (Data2VecAudio model)"),VYo=l(),SF=a("li"),cue=a("strong"),XYo=o("hubert"),zYo=o(" \u2014 "),AX=a("a"),WYo=o("HubertForCTC"),QYo=o(" (Hubert model)"),HYo=l(),RF=a("li"),fue=a("strong"),UYo=o("sew"),JYo=o(" \u2014 "),yX=a("a"),YYo=o("SEWForCTC"),KYo=o(" (SEW model)"),ZYo=l(),PF=a("li"),mue=a("strong"),eKo=o("sew-d"),oKo=o(" \u2014 "),LX=a("a"),rKo=o("SEWDForCTC"),tKo=o(" (SEW-D model)"),aKo=l(),BF=a("li"),gue=a("strong"),nKo=o("unispeech"),sKo=o(" \u2014 "),xX=a("a"),lKo=o("UniSpeechForCTC"),iKo=o(" (UniSpeech model)"),dKo=l(),IF=a("li"),hue=a("strong"),cKo=o("unispeech-sat"),fKo=o(" \u2014 "),$X=a("a"),mKo=o("UniSpeechSatForCTC"),gKo=o(" (UniSpeechSat model)"),hKo=l(),qF=a("li"),pue=a("strong"),pKo=o("wav2vec2"),uKo=o(" \u2014 "),kX=a("a"),_Ko=o("Wav2Vec2ForCTC"),bKo=o(" (Wav2Vec2 model)"),vKo=l(),NF=a("li"),uue=a("strong"),FKo=o("wav2vec2-conformer"),TKo=o(" \u2014 "),SX=a("a"),MKo=o("Wav2Vec2ConformerForCTC"),EKo=o(" (Wav2Vec2-Conformer model)"),CKo=l(),jF=a("li"),_ue=a("strong"),wKo=o("wavlm"),AKo=o(" \u2014 "),RX=a("a"),yKo=o("WavLMForCTC"),LKo=o(" (WavLM model)"),xKo=l(),DF=a("p"),$Ko=o("The model is set in evaluation mode by default using "),bue=a("code"),kKo=o("model.eval()"),SKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vue=a("code"),RKo=o("model.train()"),PKo=l(),F(GF.$$.fragment),Fqe=l(),bd=a("h2"),OF=a("a"),Fue=a("span"),F(sL.$$.fragment),BKo=l(),Tue=a("span"),IKo=o("AutoModelForSpeechSeq2Seq"),Tqe=l(),Xo=a("div"),F(lL.$$.fragment),qKo=l(),vd=a("p"),NKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),PX=a("a"),jKo=o("from_pretrained()"),DKo=o(" class method or the "),BX=a("a"),GKo=o("from_config()"),OKo=o(` class
method.`),VKo=l(),iL=a("p"),XKo=o("This class cannot be instantiated directly using "),Mue=a("code"),zKo=o("__init__()"),WKo=o(" (throws an error)."),QKo=l(),Ft=a("div"),F(dL.$$.fragment),HKo=l(),Eue=a("p"),UKo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),JKo=l(),Fd=a("p"),YKo=o(`Note:
Loading a model from its configuration file does `),Cue=a("strong"),KKo=o("not"),ZKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IX=a("a"),eZo=o("from_pretrained()"),oZo=o(" to load the model weights."),rZo=l(),F(VF.$$.fragment),tZo=l(),go=a("div"),F(cL.$$.fragment),aZo=l(),wue=a("p"),nZo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),sZo=l(),Xa=a("p"),lZo=o("The model class to instantiate is selected based on the "),Aue=a("code"),iZo=o("model_type"),dZo=o(` property of the config object (either
passed as an argument or loaded from `),yue=a("code"),cZo=o("pretrained_model_name_or_path"),fZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lue=a("code"),mZo=o("pretrained_model_name_or_path"),gZo=o(":"),hZo=l(),fL=a("ul"),XF=a("li"),xue=a("strong"),pZo=o("speech-encoder-decoder"),uZo=o(" \u2014 "),qX=a("a"),_Zo=o("SpeechEncoderDecoderModel"),bZo=o(" (Speech Encoder decoder model)"),vZo=l(),zF=a("li"),$ue=a("strong"),FZo=o("speech_to_text"),TZo=o(" \u2014 "),NX=a("a"),MZo=o("Speech2TextForConditionalGeneration"),EZo=o(" (Speech2Text model)"),CZo=l(),WF=a("p"),wZo=o("The model is set in evaluation mode by default using "),kue=a("code"),AZo=o("model.eval()"),yZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sue=a("code"),LZo=o("model.train()"),xZo=l(),F(QF.$$.fragment),Mqe=l(),Td=a("h2"),HF=a("a"),Rue=a("span"),F(mL.$$.fragment),$Zo=l(),Pue=a("span"),kZo=o("AutoModelForAudioXVector"),Eqe=l(),zo=a("div"),F(gL.$$.fragment),SZo=l(),Md=a("p"),RZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),jX=a("a"),PZo=o("from_pretrained()"),BZo=o(" class method or the "),DX=a("a"),IZo=o("from_config()"),qZo=o(` class
method.`),NZo=l(),hL=a("p"),jZo=o("This class cannot be instantiated directly using "),Bue=a("code"),DZo=o("__init__()"),GZo=o(" (throws an error)."),OZo=l(),Tt=a("div"),F(pL.$$.fragment),VZo=l(),Iue=a("p"),XZo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),zZo=l(),Ed=a("p"),WZo=o(`Note:
Loading a model from its configuration file does `),que=a("strong"),QZo=o("not"),HZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GX=a("a"),UZo=o("from_pretrained()"),JZo=o(" to load the model weights."),YZo=l(),F(UF.$$.fragment),KZo=l(),ho=a("div"),F(uL.$$.fragment),ZZo=l(),Nue=a("p"),eer=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),oer=l(),za=a("p"),rer=o("The model class to instantiate is selected based on the "),jue=a("code"),ter=o("model_type"),aer=o(` property of the config object (either
passed as an argument or loaded from `),Due=a("code"),ner=o("pretrained_model_name_or_path"),ser=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gue=a("code"),ler=o("pretrained_model_name_or_path"),ier=o(":"),der=l(),Zr=a("ul"),JF=a("li"),Oue=a("strong"),cer=o("data2vec-audio"),fer=o(" \u2014 "),OX=a("a"),mer=o("Data2VecAudioForXVector"),ger=o(" (Data2VecAudio model)"),her=l(),YF=a("li"),Vue=a("strong"),per=o("unispeech-sat"),uer=o(" \u2014 "),VX=a("a"),_er=o("UniSpeechSatForXVector"),ber=o(" (UniSpeechSat model)"),ver=l(),KF=a("li"),Xue=a("strong"),Fer=o("wav2vec2"),Ter=o(" \u2014 "),XX=a("a"),Mer=o("Wav2Vec2ForXVector"),Eer=o(" (Wav2Vec2 model)"),Cer=l(),ZF=a("li"),zue=a("strong"),wer=o("wav2vec2-conformer"),Aer=o(" \u2014 "),zX=a("a"),yer=o("Wav2Vec2ConformerForXVector"),Ler=o(" (Wav2Vec2-Conformer model)"),xer=l(),e0=a("li"),Wue=a("strong"),$er=o("wavlm"),ker=o(" \u2014 "),WX=a("a"),Ser=o("WavLMForXVector"),Rer=o(" (WavLM model)"),Per=l(),o0=a("p"),Ber=o("The model is set in evaluation mode by default using "),Que=a("code"),Ier=o("model.eval()"),qer=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hue=a("code"),Ner=o("model.train()"),jer=l(),F(r0.$$.fragment),Cqe=l(),Cd=a("h2"),t0=a("a"),Uue=a("span"),F(_L.$$.fragment),Der=l(),Jue=a("span"),Ger=o("AutoModelForMaskedImageModeling"),wqe=l(),Wo=a("div"),F(bL.$$.fragment),Oer=l(),wd=a("p"),Ver=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),QX=a("a"),Xer=o("from_pretrained()"),zer=o(" class method or the "),HX=a("a"),Wer=o("from_config()"),Qer=o(` class
method.`),Her=l(),vL=a("p"),Uer=o("This class cannot be instantiated directly using "),Yue=a("code"),Jer=o("__init__()"),Yer=o(" (throws an error)."),Ker=l(),Mt=a("div"),F(FL.$$.fragment),Zer=l(),Kue=a("p"),eor=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),oor=l(),Ad=a("p"),ror=o(`Note:
Loading a model from its configuration file does `),Zue=a("strong"),tor=o("not"),aor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UX=a("a"),nor=o("from_pretrained()"),sor=o(" to load the model weights."),lor=l(),F(a0.$$.fragment),ior=l(),po=a("div"),F(TL.$$.fragment),dor=l(),e_e=a("p"),cor=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),mor=l(),Wa=a("p"),gor=o("The model class to instantiate is selected based on the "),o_e=a("code"),hor=o("model_type"),por=o(` property of the config object (either
passed as an argument or loaded from `),r_e=a("code"),uor=o("pretrained_model_name_or_path"),_or=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t_e=a("code"),bor=o("pretrained_model_name_or_path"),vor=o(":"),For=l(),yd=a("ul"),n0=a("li"),a_e=a("strong"),Tor=o("deit"),Mor=o(" \u2014 "),JX=a("a"),Eor=o("DeiTForMaskedImageModeling"),Cor=o(" (DeiT model)"),wor=l(),s0=a("li"),n_e=a("strong"),Aor=o("swin"),yor=o(" \u2014 "),YX=a("a"),Lor=o("SwinForMaskedImageModeling"),xor=o(" (Swin model)"),$or=l(),l0=a("li"),s_e=a("strong"),kor=o("vit"),Sor=o(" \u2014 "),KX=a("a"),Ror=o("ViTForMaskedImageModeling"),Por=o(" (ViT model)"),Bor=l(),i0=a("p"),Ior=o("The model is set in evaluation mode by default using "),l_e=a("code"),qor=o("model.eval()"),Nor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),i_e=a("code"),jor=o("model.train()"),Dor=l(),F(d0.$$.fragment),Aqe=l(),Ld=a("h2"),c0=a("a"),d_e=a("span"),F(ML.$$.fragment),Gor=l(),c_e=a("span"),Oor=o("AutoModelForObjectDetection"),yqe=l(),Qo=a("div"),F(EL.$$.fragment),Vor=l(),xd=a("p"),Xor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),ZX=a("a"),zor=o("from_pretrained()"),Wor=o(" class method or the "),ez=a("a"),Qor=o("from_config()"),Hor=o(` class
method.`),Uor=l(),CL=a("p"),Jor=o("This class cannot be instantiated directly using "),f_e=a("code"),Yor=o("__init__()"),Kor=o(" (throws an error)."),Zor=l(),Et=a("div"),F(wL.$$.fragment),err=l(),m_e=a("p"),orr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),rrr=l(),$d=a("p"),trr=o(`Note:
Loading a model from its configuration file does `),g_e=a("strong"),arr=o("not"),nrr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oz=a("a"),srr=o("from_pretrained()"),lrr=o(" to load the model weights."),irr=l(),F(f0.$$.fragment),drr=l(),uo=a("div"),F(AL.$$.fragment),crr=l(),h_e=a("p"),frr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),mrr=l(),Qa=a("p"),grr=o("The model class to instantiate is selected based on the "),p_e=a("code"),hrr=o("model_type"),prr=o(` property of the config object (either
passed as an argument or loaded from `),u_e=a("code"),urr=o("pretrained_model_name_or_path"),_rr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),__e=a("code"),brr=o("pretrained_model_name_or_path"),vrr=o(":"),Frr=l(),yL=a("ul"),m0=a("li"),b_e=a("strong"),Trr=o("detr"),Mrr=o(" \u2014 "),rz=a("a"),Err=o("DetrForObjectDetection"),Crr=o(" (DETR model)"),wrr=l(),g0=a("li"),v_e=a("strong"),Arr=o("yolos"),yrr=o(" \u2014 "),tz=a("a"),Lrr=o("YolosForObjectDetection"),xrr=o(" (YOLOS model)"),$rr=l(),h0=a("p"),krr=o("The model is set in evaluation mode by default using "),F_e=a("code"),Srr=o("model.eval()"),Rrr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),T_e=a("code"),Prr=o("model.train()"),Brr=l(),F(p0.$$.fragment),Lqe=l(),kd=a("h2"),u0=a("a"),M_e=a("span"),F(LL.$$.fragment),Irr=l(),E_e=a("span"),qrr=o("AutoModelForImageSegmentation"),xqe=l(),Ho=a("div"),F(xL.$$.fragment),Nrr=l(),Sd=a("p"),jrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),az=a("a"),Drr=o("from_pretrained()"),Grr=o(" class method or the "),nz=a("a"),Orr=o("from_config()"),Vrr=o(` class
method.`),Xrr=l(),$L=a("p"),zrr=o("This class cannot be instantiated directly using "),C_e=a("code"),Wrr=o("__init__()"),Qrr=o(" (throws an error)."),Hrr=l(),Ct=a("div"),F(kL.$$.fragment),Urr=l(),w_e=a("p"),Jrr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Yrr=l(),Rd=a("p"),Krr=o(`Note:
Loading a model from its configuration file does `),A_e=a("strong"),Zrr=o("not"),etr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sz=a("a"),otr=o("from_pretrained()"),rtr=o(" to load the model weights."),ttr=l(),F(_0.$$.fragment),atr=l(),_o=a("div"),F(SL.$$.fragment),ntr=l(),y_e=a("p"),str=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),ltr=l(),Ha=a("p"),itr=o("The model class to instantiate is selected based on the "),L_e=a("code"),dtr=o("model_type"),ctr=o(` property of the config object (either
passed as an argument or loaded from `),x_e=a("code"),ftr=o("pretrained_model_name_or_path"),mtr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$_e=a("code"),gtr=o("pretrained_model_name_or_path"),htr=o(":"),ptr=l(),k_e=a("ul"),b0=a("li"),S_e=a("strong"),utr=o("detr"),_tr=o(" \u2014 "),lz=a("a"),btr=o("DetrForSegmentation"),vtr=o(" (DETR model)"),Ftr=l(),v0=a("p"),Ttr=o("The model is set in evaluation mode by default using "),R_e=a("code"),Mtr=o("model.eval()"),Etr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),P_e=a("code"),Ctr=o("model.train()"),wtr=l(),F(F0.$$.fragment),$qe=l(),Pd=a("h2"),T0=a("a"),B_e=a("span"),F(RL.$$.fragment),Atr=l(),I_e=a("span"),ytr=o("AutoModelForSemanticSegmentation"),kqe=l(),Uo=a("div"),F(PL.$$.fragment),Ltr=l(),Bd=a("p"),xtr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),iz=a("a"),$tr=o("from_pretrained()"),ktr=o(" class method or the "),dz=a("a"),Str=o("from_config()"),Rtr=o(` class
method.`),Ptr=l(),BL=a("p"),Btr=o("This class cannot be instantiated directly using "),q_e=a("code"),Itr=o("__init__()"),qtr=o(" (throws an error)."),Ntr=l(),wt=a("div"),F(IL.$$.fragment),jtr=l(),N_e=a("p"),Dtr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Gtr=l(),Id=a("p"),Otr=o(`Note:
Loading a model from its configuration file does `),j_e=a("strong"),Vtr=o("not"),Xtr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cz=a("a"),ztr=o("from_pretrained()"),Wtr=o(" to load the model weights."),Qtr=l(),F(M0.$$.fragment),Htr=l(),bo=a("div"),F(qL.$$.fragment),Utr=l(),D_e=a("p"),Jtr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Ytr=l(),Ua=a("p"),Ktr=o("The model class to instantiate is selected based on the "),G_e=a("code"),Ztr=o("model_type"),ear=o(` property of the config object (either
passed as an argument or loaded from `),O_e=a("code"),oar=o("pretrained_model_name_or_path"),rar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V_e=a("code"),tar=o("pretrained_model_name_or_path"),aar=o(":"),nar=l(),Ja=a("ul"),E0=a("li"),X_e=a("strong"),sar=o("beit"),lar=o(" \u2014 "),fz=a("a"),iar=o("BeitForSemanticSegmentation"),dar=o(" (BEiT model)"),car=l(),C0=a("li"),z_e=a("strong"),far=o("data2vec-vision"),mar=o(" \u2014 "),mz=a("a"),gar=o("Data2VecVisionForSemanticSegmentation"),har=o(" (Data2VecVision model)"),par=l(),w0=a("li"),W_e=a("strong"),uar=o("dpt"),_ar=o(" \u2014 "),gz=a("a"),bar=o("DPTForSemanticSegmentation"),Far=o(" (DPT model)"),Tar=l(),A0=a("li"),Q_e=a("strong"),Mar=o("segformer"),Ear=o(" \u2014 "),hz=a("a"),Car=o("SegformerForSemanticSegmentation"),war=o(" (SegFormer model)"),Aar=l(),y0=a("p"),yar=o("The model is set in evaluation mode by default using "),H_e=a("code"),Lar=o("model.eval()"),xar=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),U_e=a("code"),$ar=o("model.train()"),kar=l(),F(L0.$$.fragment),Sqe=l(),qd=a("h2"),x0=a("a"),J_e=a("span"),F(NL.$$.fragment),Sar=l(),Y_e=a("span"),Rar=o("AutoModelForInstanceSegmentation"),Rqe=l(),Jo=a("div"),F(jL.$$.fragment),Par=l(),Nd=a("p"),Bar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),pz=a("a"),Iar=o("from_pretrained()"),qar=o(" class method or the "),uz=a("a"),Nar=o("from_config()"),jar=o(` class
method.`),Dar=l(),DL=a("p"),Gar=o("This class cannot be instantiated directly using "),K_e=a("code"),Oar=o("__init__()"),Var=o(" (throws an error)."),Xar=l(),At=a("div"),F(GL.$$.fragment),zar=l(),Z_e=a("p"),War=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Qar=l(),jd=a("p"),Har=o(`Note:
Loading a model from its configuration file does `),e1e=a("strong"),Uar=o("not"),Jar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_z=a("a"),Yar=o("from_pretrained()"),Kar=o(" to load the model weights."),Zar=l(),F($0.$$.fragment),enr=l(),vo=a("div"),F(OL.$$.fragment),onr=l(),o1e=a("p"),rnr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),tnr=l(),Ya=a("p"),anr=o("The model class to instantiate is selected based on the "),r1e=a("code"),nnr=o("model_type"),snr=o(` property of the config object (either
passed as an argument or loaded from `),t1e=a("code"),lnr=o("pretrained_model_name_or_path"),inr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a1e=a("code"),dnr=o("pretrained_model_name_or_path"),cnr=o(":"),fnr=l(),n1e=a("ul"),k0=a("li"),s1e=a("strong"),mnr=o("maskformer"),gnr=o(" \u2014 "),bz=a("a"),hnr=o("MaskFormerForInstanceSegmentation"),pnr=o(" (MaskFormer model)"),unr=l(),S0=a("p"),_nr=o("The model is set in evaluation mode by default using "),l1e=a("code"),bnr=o("model.eval()"),vnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),i1e=a("code"),Fnr=o("model.train()"),Tnr=l(),F(R0.$$.fragment),Pqe=l(),Dd=a("h2"),P0=a("a"),d1e=a("span"),F(VL.$$.fragment),Mnr=l(),c1e=a("span"),Enr=o("TFAutoModel"),Bqe=l(),Yo=a("div"),F(XL.$$.fragment),Cnr=l(),Gd=a("p"),wnr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),vz=a("a"),Anr=o("from_pretrained()"),ynr=o(" class method or the "),Fz=a("a"),Lnr=o("from_config()"),xnr=o(` class
method.`),$nr=l(),zL=a("p"),knr=o("This class cannot be instantiated directly using "),f1e=a("code"),Snr=o("__init__()"),Rnr=o(" (throws an error)."),Pnr=l(),yt=a("div"),F(WL.$$.fragment),Bnr=l(),m1e=a("p"),Inr=o("Instantiates one of the base model classes of the library from a configuration."),qnr=l(),Od=a("p"),Nnr=o(`Note:
Loading a model from its configuration file does `),g1e=a("strong"),jnr=o("not"),Dnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Tz=a("a"),Gnr=o("from_pretrained()"),Onr=o(" to load the model weights."),Vnr=l(),F(B0.$$.fragment),Xnr=l(),wr=a("div"),F(QL.$$.fragment),znr=l(),h1e=a("p"),Wnr=o("Instantiate one of the base model classes of the library from a pretrained model."),Qnr=l(),Ka=a("p"),Hnr=o("The model class to instantiate is selected based on the "),p1e=a("code"),Unr=o("model_type"),Jnr=o(` property of the config object (either
passed as an argument or loaded from `),u1e=a("code"),Ynr=o("pretrained_model_name_or_path"),Knr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_1e=a("code"),Znr=o("pretrained_model_name_or_path"),esr=o(":"),osr=l(),N=a("ul"),I0=a("li"),b1e=a("strong"),rsr=o("albert"),tsr=o(" \u2014 "),Mz=a("a"),asr=o("TFAlbertModel"),nsr=o(" (ALBERT model)"),ssr=l(),q0=a("li"),v1e=a("strong"),lsr=o("bart"),isr=o(" \u2014 "),Ez=a("a"),dsr=o("TFBartModel"),csr=o(" (BART model)"),fsr=l(),N0=a("li"),F1e=a("strong"),msr=o("bert"),gsr=o(" \u2014 "),Cz=a("a"),hsr=o("TFBertModel"),psr=o(" (BERT model)"),usr=l(),j0=a("li"),T1e=a("strong"),_sr=o("blenderbot"),bsr=o(" \u2014 "),wz=a("a"),vsr=o("TFBlenderbotModel"),Fsr=o(" (Blenderbot model)"),Tsr=l(),D0=a("li"),M1e=a("strong"),Msr=o("blenderbot-small"),Esr=o(" \u2014 "),Az=a("a"),Csr=o("TFBlenderbotSmallModel"),wsr=o(" (BlenderbotSmall model)"),Asr=l(),G0=a("li"),E1e=a("strong"),ysr=o("camembert"),Lsr=o(" \u2014 "),yz=a("a"),xsr=o("TFCamembertModel"),$sr=o(" (CamemBERT model)"),ksr=l(),O0=a("li"),C1e=a("strong"),Ssr=o("clip"),Rsr=o(" \u2014 "),Lz=a("a"),Psr=o("TFCLIPModel"),Bsr=o(" (CLIP model)"),Isr=l(),V0=a("li"),w1e=a("strong"),qsr=o("convbert"),Nsr=o(" \u2014 "),xz=a("a"),jsr=o("TFConvBertModel"),Dsr=o(" (ConvBERT model)"),Gsr=l(),X0=a("li"),A1e=a("strong"),Osr=o("convnext"),Vsr=o(" \u2014 "),$z=a("a"),Xsr=o("TFConvNextModel"),zsr=o(" (ConvNext model)"),Wsr=l(),z0=a("li"),y1e=a("strong"),Qsr=o("ctrl"),Hsr=o(" \u2014 "),kz=a("a"),Usr=o("TFCTRLModel"),Jsr=o(" (CTRL model)"),Ysr=l(),W0=a("li"),L1e=a("strong"),Ksr=o("data2vec-vision"),Zsr=o(" \u2014 "),Sz=a("a"),elr=o("TFData2VecVisionModel"),olr=o(" (Data2VecVision model)"),rlr=l(),Q0=a("li"),x1e=a("strong"),tlr=o("deberta"),alr=o(" \u2014 "),Rz=a("a"),nlr=o("TFDebertaModel"),slr=o(" (DeBERTa model)"),llr=l(),H0=a("li"),$1e=a("strong"),ilr=o("deberta-v2"),dlr=o(" \u2014 "),Pz=a("a"),clr=o("TFDebertaV2Model"),flr=o(" (DeBERTa-v2 model)"),mlr=l(),U0=a("li"),k1e=a("strong"),glr=o("distilbert"),hlr=o(" \u2014 "),Bz=a("a"),plr=o("TFDistilBertModel"),ulr=o(" (DistilBERT model)"),_lr=l(),J0=a("li"),S1e=a("strong"),blr=o("dpr"),vlr=o(" \u2014 "),Iz=a("a"),Flr=o("TFDPRQuestionEncoder"),Tlr=o(" (DPR model)"),Mlr=l(),Y0=a("li"),R1e=a("strong"),Elr=o("electra"),Clr=o(" \u2014 "),qz=a("a"),wlr=o("TFElectraModel"),Alr=o(" (ELECTRA model)"),ylr=l(),K0=a("li"),P1e=a("strong"),Llr=o("flaubert"),xlr=o(" \u2014 "),Nz=a("a"),$lr=o("TFFlaubertModel"),klr=o(" (FlauBERT model)"),Slr=l(),Bs=a("li"),B1e=a("strong"),Rlr=o("funnel"),Plr=o(" \u2014 "),jz=a("a"),Blr=o("TFFunnelModel"),Ilr=o(" or "),Dz=a("a"),qlr=o("TFFunnelBaseModel"),Nlr=o(" (Funnel Transformer model)"),jlr=l(),Z0=a("li"),I1e=a("strong"),Dlr=o("gpt2"),Glr=o(" \u2014 "),Gz=a("a"),Olr=o("TFGPT2Model"),Vlr=o(" (OpenAI GPT-2 model)"),Xlr=l(),eT=a("li"),q1e=a("strong"),zlr=o("gptj"),Wlr=o(" \u2014 "),Oz=a("a"),Qlr=o("TFGPTJModel"),Hlr=o(" (GPT-J model)"),Ulr=l(),oT=a("li"),N1e=a("strong"),Jlr=o("hubert"),Ylr=o(" \u2014 "),Vz=a("a"),Klr=o("TFHubertModel"),Zlr=o(" (Hubert model)"),eir=l(),rT=a("li"),j1e=a("strong"),oir=o("layoutlm"),rir=o(" \u2014 "),Xz=a("a"),tir=o("TFLayoutLMModel"),air=o(" (LayoutLM model)"),nir=l(),tT=a("li"),D1e=a("strong"),sir=o("led"),lir=o(" \u2014 "),zz=a("a"),iir=o("TFLEDModel"),dir=o(" (LED model)"),cir=l(),aT=a("li"),G1e=a("strong"),fir=o("longformer"),mir=o(" \u2014 "),Wz=a("a"),gir=o("TFLongformerModel"),hir=o(" (Longformer model)"),pir=l(),nT=a("li"),O1e=a("strong"),uir=o("lxmert"),_ir=o(" \u2014 "),Qz=a("a"),bir=o("TFLxmertModel"),vir=o(" (LXMERT model)"),Fir=l(),sT=a("li"),V1e=a("strong"),Tir=o("marian"),Mir=o(" \u2014 "),Hz=a("a"),Eir=o("TFMarianModel"),Cir=o(" (Marian model)"),wir=l(),lT=a("li"),X1e=a("strong"),Air=o("mbart"),yir=o(" \u2014 "),Uz=a("a"),Lir=o("TFMBartModel"),xir=o(" (mBART model)"),$ir=l(),iT=a("li"),z1e=a("strong"),kir=o("mobilebert"),Sir=o(" \u2014 "),Jz=a("a"),Rir=o("TFMobileBertModel"),Pir=o(" (MobileBERT model)"),Bir=l(),dT=a("li"),W1e=a("strong"),Iir=o("mpnet"),qir=o(" \u2014 "),Yz=a("a"),Nir=o("TFMPNetModel"),jir=o(" (MPNet model)"),Dir=l(),cT=a("li"),Q1e=a("strong"),Gir=o("mt5"),Oir=o(" \u2014 "),Kz=a("a"),Vir=o("TFMT5Model"),Xir=o(" (mT5 model)"),zir=l(),fT=a("li"),H1e=a("strong"),Wir=o("openai-gpt"),Qir=o(" \u2014 "),Zz=a("a"),Hir=o("TFOpenAIGPTModel"),Uir=o(" (OpenAI GPT model)"),Jir=l(),mT=a("li"),U1e=a("strong"),Yir=o("pegasus"),Kir=o(" \u2014 "),eW=a("a"),Zir=o("TFPegasusModel"),edr=o(" (Pegasus model)"),odr=l(),gT=a("li"),J1e=a("strong"),rdr=o("rembert"),tdr=o(" \u2014 "),oW=a("a"),adr=o("TFRemBertModel"),ndr=o(" (RemBERT model)"),sdr=l(),hT=a("li"),Y1e=a("strong"),ldr=o("roberta"),idr=o(" \u2014 "),rW=a("a"),ddr=o("TFRobertaModel"),cdr=o(" (RoBERTa model)"),fdr=l(),pT=a("li"),K1e=a("strong"),mdr=o("roformer"),gdr=o(" \u2014 "),tW=a("a"),hdr=o("TFRoFormerModel"),pdr=o(" (RoFormer model)"),udr=l(),uT=a("li"),Z1e=a("strong"),_dr=o("speech_to_text"),bdr=o(" \u2014 "),aW=a("a"),vdr=o("TFSpeech2TextModel"),Fdr=o(" (Speech2Text model)"),Tdr=l(),_T=a("li"),ebe=a("strong"),Mdr=o("swin"),Edr=o(" \u2014 "),nW=a("a"),Cdr=o("TFSwinModel"),wdr=o(" (Swin model)"),Adr=l(),bT=a("li"),obe=a("strong"),ydr=o("t5"),Ldr=o(" \u2014 "),sW=a("a"),xdr=o("TFT5Model"),$dr=o(" (T5 model)"),kdr=l(),vT=a("li"),rbe=a("strong"),Sdr=o("tapas"),Rdr=o(" \u2014 "),lW=a("a"),Pdr=o("TFTapasModel"),Bdr=o(" (TAPAS model)"),Idr=l(),FT=a("li"),tbe=a("strong"),qdr=o("transfo-xl"),Ndr=o(" \u2014 "),iW=a("a"),jdr=o("TFTransfoXLModel"),Ddr=o(" (Transformer-XL model)"),Gdr=l(),TT=a("li"),abe=a("strong"),Odr=o("vit"),Vdr=o(" \u2014 "),dW=a("a"),Xdr=o("TFViTModel"),zdr=o(" (ViT model)"),Wdr=l(),MT=a("li"),nbe=a("strong"),Qdr=o("vit_mae"),Hdr=o(" \u2014 "),cW=a("a"),Udr=o("TFViTMAEModel"),Jdr=o(" (ViTMAE model)"),Ydr=l(),ET=a("li"),sbe=a("strong"),Kdr=o("wav2vec2"),Zdr=o(" \u2014 "),fW=a("a"),ecr=o("TFWav2Vec2Model"),ocr=o(" (Wav2Vec2 model)"),rcr=l(),CT=a("li"),lbe=a("strong"),tcr=o("xlm"),acr=o(" \u2014 "),mW=a("a"),ncr=o("TFXLMModel"),scr=o(" (XLM model)"),lcr=l(),wT=a("li"),ibe=a("strong"),icr=o("xlm-roberta"),dcr=o(" \u2014 "),gW=a("a"),ccr=o("TFXLMRobertaModel"),fcr=o(" (XLM-RoBERTa model)"),mcr=l(),AT=a("li"),dbe=a("strong"),gcr=o("xlnet"),hcr=o(" \u2014 "),hW=a("a"),pcr=o("TFXLNetModel"),ucr=o(" (XLNet model)"),_cr=l(),F(yT.$$.fragment),Iqe=l(),Vd=a("h2"),LT=a("a"),cbe=a("span"),F(HL.$$.fragment),bcr=l(),fbe=a("span"),vcr=o("TFAutoModelForPreTraining"),qqe=l(),Ko=a("div"),F(UL.$$.fragment),Fcr=l(),Xd=a("p"),Tcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),pW=a("a"),Mcr=o("from_pretrained()"),Ecr=o(" class method or the "),uW=a("a"),Ccr=o("from_config()"),wcr=o(` class
method.`),Acr=l(),JL=a("p"),ycr=o("This class cannot be instantiated directly using "),mbe=a("code"),Lcr=o("__init__()"),xcr=o(" (throws an error)."),$cr=l(),Lt=a("div"),F(YL.$$.fragment),kcr=l(),gbe=a("p"),Scr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Rcr=l(),zd=a("p"),Pcr=o(`Note:
Loading a model from its configuration file does `),hbe=a("strong"),Bcr=o("not"),Icr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_W=a("a"),qcr=o("from_pretrained()"),Ncr=o(" to load the model weights."),jcr=l(),F(xT.$$.fragment),Dcr=l(),Ar=a("div"),F(KL.$$.fragment),Gcr=l(),pbe=a("p"),Ocr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Vcr=l(),Za=a("p"),Xcr=o("The model class to instantiate is selected based on the "),ube=a("code"),zcr=o("model_type"),Wcr=o(` property of the config object (either
passed as an argument or loaded from `),_be=a("code"),Qcr=o("pretrained_model_name_or_path"),Hcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bbe=a("code"),Ucr=o("pretrained_model_name_or_path"),Jcr=o(":"),Ycr=l(),se=a("ul"),$T=a("li"),vbe=a("strong"),Kcr=o("albert"),Zcr=o(" \u2014 "),bW=a("a"),efr=o("TFAlbertForPreTraining"),ofr=o(" (ALBERT model)"),rfr=l(),kT=a("li"),Fbe=a("strong"),tfr=o("bart"),afr=o(" \u2014 "),vW=a("a"),nfr=o("TFBartForConditionalGeneration"),sfr=o(" (BART model)"),lfr=l(),ST=a("li"),Tbe=a("strong"),ifr=o("bert"),dfr=o(" \u2014 "),FW=a("a"),cfr=o("TFBertForPreTraining"),ffr=o(" (BERT model)"),mfr=l(),RT=a("li"),Mbe=a("strong"),gfr=o("camembert"),hfr=o(" \u2014 "),TW=a("a"),pfr=o("TFCamembertForMaskedLM"),ufr=o(" (CamemBERT model)"),_fr=l(),PT=a("li"),Ebe=a("strong"),bfr=o("ctrl"),vfr=o(" \u2014 "),MW=a("a"),Ffr=o("TFCTRLLMHeadModel"),Tfr=o(" (CTRL model)"),Mfr=l(),BT=a("li"),Cbe=a("strong"),Efr=o("distilbert"),Cfr=o(" \u2014 "),EW=a("a"),wfr=o("TFDistilBertForMaskedLM"),Afr=o(" (DistilBERT model)"),yfr=l(),IT=a("li"),wbe=a("strong"),Lfr=o("electra"),xfr=o(" \u2014 "),CW=a("a"),$fr=o("TFElectraForPreTraining"),kfr=o(" (ELECTRA model)"),Sfr=l(),qT=a("li"),Abe=a("strong"),Rfr=o("flaubert"),Pfr=o(" \u2014 "),wW=a("a"),Bfr=o("TFFlaubertWithLMHeadModel"),Ifr=o(" (FlauBERT model)"),qfr=l(),NT=a("li"),ybe=a("strong"),Nfr=o("funnel"),jfr=o(" \u2014 "),AW=a("a"),Dfr=o("TFFunnelForPreTraining"),Gfr=o(" (Funnel Transformer model)"),Ofr=l(),jT=a("li"),Lbe=a("strong"),Vfr=o("gpt2"),Xfr=o(" \u2014 "),yW=a("a"),zfr=o("TFGPT2LMHeadModel"),Wfr=o(" (OpenAI GPT-2 model)"),Qfr=l(),DT=a("li"),xbe=a("strong"),Hfr=o("layoutlm"),Ufr=o(" \u2014 "),LW=a("a"),Jfr=o("TFLayoutLMForMaskedLM"),Yfr=o(" (LayoutLM model)"),Kfr=l(),GT=a("li"),$be=a("strong"),Zfr=o("lxmert"),emr=o(" \u2014 "),xW=a("a"),omr=o("TFLxmertForPreTraining"),rmr=o(" (LXMERT model)"),tmr=l(),OT=a("li"),kbe=a("strong"),amr=o("mobilebert"),nmr=o(" \u2014 "),$W=a("a"),smr=o("TFMobileBertForPreTraining"),lmr=o(" (MobileBERT model)"),imr=l(),VT=a("li"),Sbe=a("strong"),dmr=o("mpnet"),cmr=o(" \u2014 "),kW=a("a"),fmr=o("TFMPNetForMaskedLM"),mmr=o(" (MPNet model)"),gmr=l(),XT=a("li"),Rbe=a("strong"),hmr=o("openai-gpt"),pmr=o(" \u2014 "),SW=a("a"),umr=o("TFOpenAIGPTLMHeadModel"),_mr=o(" (OpenAI GPT model)"),bmr=l(),zT=a("li"),Pbe=a("strong"),vmr=o("roberta"),Fmr=o(" \u2014 "),RW=a("a"),Tmr=o("TFRobertaForMaskedLM"),Mmr=o(" (RoBERTa model)"),Emr=l(),WT=a("li"),Bbe=a("strong"),Cmr=o("t5"),wmr=o(" \u2014 "),PW=a("a"),Amr=o("TFT5ForConditionalGeneration"),ymr=o(" (T5 model)"),Lmr=l(),QT=a("li"),Ibe=a("strong"),xmr=o("tapas"),$mr=o(" \u2014 "),BW=a("a"),kmr=o("TFTapasForMaskedLM"),Smr=o(" (TAPAS model)"),Rmr=l(),HT=a("li"),qbe=a("strong"),Pmr=o("transfo-xl"),Bmr=o(" \u2014 "),IW=a("a"),Imr=o("TFTransfoXLLMHeadModel"),qmr=o(" (Transformer-XL model)"),Nmr=l(),UT=a("li"),Nbe=a("strong"),jmr=o("vit_mae"),Dmr=o(" \u2014 "),qW=a("a"),Gmr=o("TFViTMAEForPreTraining"),Omr=o(" (ViTMAE model)"),Vmr=l(),JT=a("li"),jbe=a("strong"),Xmr=o("xlm"),zmr=o(" \u2014 "),NW=a("a"),Wmr=o("TFXLMWithLMHeadModel"),Qmr=o(" (XLM model)"),Hmr=l(),YT=a("li"),Dbe=a("strong"),Umr=o("xlm-roberta"),Jmr=o(" \u2014 "),jW=a("a"),Ymr=o("TFXLMRobertaForMaskedLM"),Kmr=o(" (XLM-RoBERTa model)"),Zmr=l(),KT=a("li"),Gbe=a("strong"),egr=o("xlnet"),ogr=o(" \u2014 "),DW=a("a"),rgr=o("TFXLNetLMHeadModel"),tgr=o(" (XLNet model)"),agr=l(),F(ZT.$$.fragment),Nqe=l(),Wd=a("h2"),e7=a("a"),Obe=a("span"),F(ZL.$$.fragment),ngr=l(),Vbe=a("span"),sgr=o("TFAutoModelForCausalLM"),jqe=l(),Zo=a("div"),F(e8.$$.fragment),lgr=l(),Qd=a("p"),igr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),GW=a("a"),dgr=o("from_pretrained()"),cgr=o(" class method or the "),OW=a("a"),fgr=o("from_config()"),mgr=o(` class
method.`),ggr=l(),o8=a("p"),hgr=o("This class cannot be instantiated directly using "),Xbe=a("code"),pgr=o("__init__()"),ugr=o(" (throws an error)."),_gr=l(),xt=a("div"),F(r8.$$.fragment),bgr=l(),zbe=a("p"),vgr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Fgr=l(),Hd=a("p"),Tgr=o(`Note:
Loading a model from its configuration file does `),Wbe=a("strong"),Mgr=o("not"),Egr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VW=a("a"),Cgr=o("from_pretrained()"),wgr=o(" to load the model weights."),Agr=l(),F(o7.$$.fragment),ygr=l(),yr=a("div"),F(t8.$$.fragment),Lgr=l(),Qbe=a("p"),xgr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),$gr=l(),en=a("p"),kgr=o("The model class to instantiate is selected based on the "),Hbe=a("code"),Sgr=o("model_type"),Rgr=o(` property of the config object (either
passed as an argument or loaded from `),Ube=a("code"),Pgr=o("pretrained_model_name_or_path"),Bgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jbe=a("code"),Igr=o("pretrained_model_name_or_path"),qgr=o(":"),Ngr=l(),Te=a("ul"),r7=a("li"),Ybe=a("strong"),jgr=o("bert"),Dgr=o(" \u2014 "),XW=a("a"),Ggr=o("TFBertLMHeadModel"),Ogr=o(" (BERT model)"),Vgr=l(),t7=a("li"),Kbe=a("strong"),Xgr=o("camembert"),zgr=o(" \u2014 "),zW=a("a"),Wgr=o("TFCamembertForCausalLM"),Qgr=o(" (CamemBERT model)"),Hgr=l(),a7=a("li"),Zbe=a("strong"),Ugr=o("ctrl"),Jgr=o(" \u2014 "),WW=a("a"),Ygr=o("TFCTRLLMHeadModel"),Kgr=o(" (CTRL model)"),Zgr=l(),n7=a("li"),e2e=a("strong"),ehr=o("gpt2"),ohr=o(" \u2014 "),QW=a("a"),rhr=o("TFGPT2LMHeadModel"),thr=o(" (OpenAI GPT-2 model)"),ahr=l(),s7=a("li"),o2e=a("strong"),nhr=o("gptj"),shr=o(" \u2014 "),HW=a("a"),lhr=o("TFGPTJForCausalLM"),ihr=o(" (GPT-J model)"),dhr=l(),l7=a("li"),r2e=a("strong"),chr=o("openai-gpt"),fhr=o(" \u2014 "),UW=a("a"),mhr=o("TFOpenAIGPTLMHeadModel"),ghr=o(" (OpenAI GPT model)"),hhr=l(),i7=a("li"),t2e=a("strong"),phr=o("rembert"),uhr=o(" \u2014 "),JW=a("a"),_hr=o("TFRemBertForCausalLM"),bhr=o(" (RemBERT model)"),vhr=l(),d7=a("li"),a2e=a("strong"),Fhr=o("roberta"),Thr=o(" \u2014 "),YW=a("a"),Mhr=o("TFRobertaForCausalLM"),Ehr=o(" (RoBERTa model)"),Chr=l(),c7=a("li"),n2e=a("strong"),whr=o("roformer"),Ahr=o(" \u2014 "),KW=a("a"),yhr=o("TFRoFormerForCausalLM"),Lhr=o(" (RoFormer model)"),xhr=l(),f7=a("li"),s2e=a("strong"),$hr=o("transfo-xl"),khr=o(" \u2014 "),ZW=a("a"),Shr=o("TFTransfoXLLMHeadModel"),Rhr=o(" (Transformer-XL model)"),Phr=l(),m7=a("li"),l2e=a("strong"),Bhr=o("xlm"),Ihr=o(" \u2014 "),eQ=a("a"),qhr=o("TFXLMWithLMHeadModel"),Nhr=o(" (XLM model)"),jhr=l(),g7=a("li"),i2e=a("strong"),Dhr=o("xlnet"),Ghr=o(" \u2014 "),oQ=a("a"),Ohr=o("TFXLNetLMHeadModel"),Vhr=o(" (XLNet model)"),Xhr=l(),F(h7.$$.fragment),Dqe=l(),Ud=a("h2"),p7=a("a"),d2e=a("span"),F(a8.$$.fragment),zhr=l(),c2e=a("span"),Whr=o("TFAutoModelForImageClassification"),Gqe=l(),er=a("div"),F(n8.$$.fragment),Qhr=l(),Jd=a("p"),Hhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),rQ=a("a"),Uhr=o("from_pretrained()"),Jhr=o(" class method or the "),tQ=a("a"),Yhr=o("from_config()"),Khr=o(` class
method.`),Zhr=l(),s8=a("p"),epr=o("This class cannot be instantiated directly using "),f2e=a("code"),opr=o("__init__()"),rpr=o(" (throws an error)."),tpr=l(),$t=a("div"),F(l8.$$.fragment),apr=l(),m2e=a("p"),npr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),spr=l(),Yd=a("p"),lpr=o(`Note:
Loading a model from its configuration file does `),g2e=a("strong"),ipr=o("not"),dpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aQ=a("a"),cpr=o("from_pretrained()"),fpr=o(" to load the model weights."),mpr=l(),F(u7.$$.fragment),gpr=l(),Lr=a("div"),F(i8.$$.fragment),hpr=l(),h2e=a("p"),ppr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),upr=l(),on=a("p"),_pr=o("The model class to instantiate is selected based on the "),p2e=a("code"),bpr=o("model_type"),vpr=o(` property of the config object (either
passed as an argument or loaded from `),u2e=a("code"),Fpr=o("pretrained_model_name_or_path"),Tpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_2e=a("code"),Mpr=o("pretrained_model_name_or_path"),Epr=o(":"),Cpr=l(),rn=a("ul"),_7=a("li"),b2e=a("strong"),wpr=o("convnext"),Apr=o(" \u2014 "),nQ=a("a"),ypr=o("TFConvNextForImageClassification"),Lpr=o(" (ConvNext model)"),xpr=l(),b7=a("li"),v2e=a("strong"),$pr=o("data2vec-vision"),kpr=o(" \u2014 "),sQ=a("a"),Spr=o("TFData2VecVisionForImageClassification"),Rpr=o(" (Data2VecVision model)"),Ppr=l(),v7=a("li"),F2e=a("strong"),Bpr=o("swin"),Ipr=o(" \u2014 "),lQ=a("a"),qpr=o("TFSwinForImageClassification"),Npr=o(" (Swin model)"),jpr=l(),F7=a("li"),T2e=a("strong"),Dpr=o("vit"),Gpr=o(" \u2014 "),iQ=a("a"),Opr=o("TFViTForImageClassification"),Vpr=o(" (ViT model)"),Xpr=l(),F(T7.$$.fragment),Oqe=l(),Kd=a("h2"),M7=a("a"),M2e=a("span"),F(d8.$$.fragment),zpr=l(),E2e=a("span"),Wpr=o("TFAutoModelForMaskedLM"),Vqe=l(),or=a("div"),F(c8.$$.fragment),Qpr=l(),Zd=a("p"),Hpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),dQ=a("a"),Upr=o("from_pretrained()"),Jpr=o(" class method or the "),cQ=a("a"),Ypr=o("from_config()"),Kpr=o(` class
method.`),Zpr=l(),f8=a("p"),eur=o("This class cannot be instantiated directly using "),C2e=a("code"),our=o("__init__()"),rur=o(" (throws an error)."),tur=l(),kt=a("div"),F(m8.$$.fragment),aur=l(),w2e=a("p"),nur=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),sur=l(),ec=a("p"),lur=o(`Note:
Loading a model from its configuration file does `),A2e=a("strong"),iur=o("not"),dur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fQ=a("a"),cur=o("from_pretrained()"),fur=o(" to load the model weights."),mur=l(),F(E7.$$.fragment),gur=l(),xr=a("div"),F(g8.$$.fragment),hur=l(),y2e=a("p"),pur=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),uur=l(),tn=a("p"),_ur=o("The model class to instantiate is selected based on the "),L2e=a("code"),bur=o("model_type"),vur=o(` property of the config object (either
passed as an argument or loaded from `),x2e=a("code"),Fur=o("pretrained_model_name_or_path"),Tur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$2e=a("code"),Mur=o("pretrained_model_name_or_path"),Eur=o(":"),Cur=l(),ie=a("ul"),C7=a("li"),k2e=a("strong"),wur=o("albert"),Aur=o(" \u2014 "),mQ=a("a"),yur=o("TFAlbertForMaskedLM"),Lur=o(" (ALBERT model)"),xur=l(),w7=a("li"),S2e=a("strong"),$ur=o("bert"),kur=o(" \u2014 "),gQ=a("a"),Sur=o("TFBertForMaskedLM"),Rur=o(" (BERT model)"),Pur=l(),A7=a("li"),R2e=a("strong"),Bur=o("camembert"),Iur=o(" \u2014 "),hQ=a("a"),qur=o("TFCamembertForMaskedLM"),Nur=o(" (CamemBERT model)"),jur=l(),y7=a("li"),P2e=a("strong"),Dur=o("convbert"),Gur=o(" \u2014 "),pQ=a("a"),Our=o("TFConvBertForMaskedLM"),Vur=o(" (ConvBERT model)"),Xur=l(),L7=a("li"),B2e=a("strong"),zur=o("deberta"),Wur=o(" \u2014 "),uQ=a("a"),Qur=o("TFDebertaForMaskedLM"),Hur=o(" (DeBERTa model)"),Uur=l(),x7=a("li"),I2e=a("strong"),Jur=o("deberta-v2"),Yur=o(" \u2014 "),_Q=a("a"),Kur=o("TFDebertaV2ForMaskedLM"),Zur=o(" (DeBERTa-v2 model)"),e_r=l(),$7=a("li"),q2e=a("strong"),o_r=o("distilbert"),r_r=o(" \u2014 "),bQ=a("a"),t_r=o("TFDistilBertForMaskedLM"),a_r=o(" (DistilBERT model)"),n_r=l(),k7=a("li"),N2e=a("strong"),s_r=o("electra"),l_r=o(" \u2014 "),vQ=a("a"),i_r=o("TFElectraForMaskedLM"),d_r=o(" (ELECTRA model)"),c_r=l(),S7=a("li"),j2e=a("strong"),f_r=o("flaubert"),m_r=o(" \u2014 "),FQ=a("a"),g_r=o("TFFlaubertWithLMHeadModel"),h_r=o(" (FlauBERT model)"),p_r=l(),R7=a("li"),D2e=a("strong"),u_r=o("funnel"),__r=o(" \u2014 "),TQ=a("a"),b_r=o("TFFunnelForMaskedLM"),v_r=o(" (Funnel Transformer model)"),F_r=l(),P7=a("li"),G2e=a("strong"),T_r=o("layoutlm"),M_r=o(" \u2014 "),MQ=a("a"),E_r=o("TFLayoutLMForMaskedLM"),C_r=o(" (LayoutLM model)"),w_r=l(),B7=a("li"),O2e=a("strong"),A_r=o("longformer"),y_r=o(" \u2014 "),EQ=a("a"),L_r=o("TFLongformerForMaskedLM"),x_r=o(" (Longformer model)"),$_r=l(),I7=a("li"),V2e=a("strong"),k_r=o("mobilebert"),S_r=o(" \u2014 "),CQ=a("a"),R_r=o("TFMobileBertForMaskedLM"),P_r=o(" (MobileBERT model)"),B_r=l(),q7=a("li"),X2e=a("strong"),I_r=o("mpnet"),q_r=o(" \u2014 "),wQ=a("a"),N_r=o("TFMPNetForMaskedLM"),j_r=o(" (MPNet model)"),D_r=l(),N7=a("li"),z2e=a("strong"),G_r=o("rembert"),O_r=o(" \u2014 "),AQ=a("a"),V_r=o("TFRemBertForMaskedLM"),X_r=o(" (RemBERT model)"),z_r=l(),j7=a("li"),W2e=a("strong"),W_r=o("roberta"),Q_r=o(" \u2014 "),yQ=a("a"),H_r=o("TFRobertaForMaskedLM"),U_r=o(" (RoBERTa model)"),J_r=l(),D7=a("li"),Q2e=a("strong"),Y_r=o("roformer"),K_r=o(" \u2014 "),LQ=a("a"),Z_r=o("TFRoFormerForMaskedLM"),e1r=o(" (RoFormer model)"),o1r=l(),G7=a("li"),H2e=a("strong"),r1r=o("tapas"),t1r=o(" \u2014 "),xQ=a("a"),a1r=o("TFTapasForMaskedLM"),n1r=o(" (TAPAS model)"),s1r=l(),O7=a("li"),U2e=a("strong"),l1r=o("xlm"),i1r=o(" \u2014 "),$Q=a("a"),d1r=o("TFXLMWithLMHeadModel"),c1r=o(" (XLM model)"),f1r=l(),V7=a("li"),J2e=a("strong"),m1r=o("xlm-roberta"),g1r=o(" \u2014 "),kQ=a("a"),h1r=o("TFXLMRobertaForMaskedLM"),p1r=o(" (XLM-RoBERTa model)"),u1r=l(),F(X7.$$.fragment),Xqe=l(),oc=a("h2"),z7=a("a"),Y2e=a("span"),F(h8.$$.fragment),_1r=l(),K2e=a("span"),b1r=o("TFAutoModelForSeq2SeqLM"),zqe=l(),rr=a("div"),F(p8.$$.fragment),v1r=l(),rc=a("p"),F1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),SQ=a("a"),T1r=o("from_pretrained()"),M1r=o(" class method or the "),RQ=a("a"),E1r=o("from_config()"),C1r=o(` class
method.`),w1r=l(),u8=a("p"),A1r=o("This class cannot be instantiated directly using "),Z2e=a("code"),y1r=o("__init__()"),L1r=o(" (throws an error)."),x1r=l(),St=a("div"),F(_8.$$.fragment),$1r=l(),eve=a("p"),k1r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),S1r=l(),tc=a("p"),R1r=o(`Note:
Loading a model from its configuration file does `),ove=a("strong"),P1r=o("not"),B1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PQ=a("a"),I1r=o("from_pretrained()"),q1r=o(" to load the model weights."),N1r=l(),F(W7.$$.fragment),j1r=l(),$r=a("div"),F(b8.$$.fragment),D1r=l(),rve=a("p"),G1r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),O1r=l(),an=a("p"),V1r=o("The model class to instantiate is selected based on the "),tve=a("code"),X1r=o("model_type"),z1r=o(` property of the config object (either
passed as an argument or loaded from `),ave=a("code"),W1r=o("pretrained_model_name_or_path"),Q1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nve=a("code"),H1r=o("pretrained_model_name_or_path"),U1r=o(":"),J1r=l(),ye=a("ul"),Q7=a("li"),sve=a("strong"),Y1r=o("bart"),K1r=o(" \u2014 "),BQ=a("a"),Z1r=o("TFBartForConditionalGeneration"),ebr=o(" (BART model)"),obr=l(),H7=a("li"),lve=a("strong"),rbr=o("blenderbot"),tbr=o(" \u2014 "),IQ=a("a"),abr=o("TFBlenderbotForConditionalGeneration"),nbr=o(" (Blenderbot model)"),sbr=l(),U7=a("li"),ive=a("strong"),lbr=o("blenderbot-small"),ibr=o(" \u2014 "),qQ=a("a"),dbr=o("TFBlenderbotSmallForConditionalGeneration"),cbr=o(" (BlenderbotSmall model)"),fbr=l(),J7=a("li"),dve=a("strong"),mbr=o("encoder-decoder"),gbr=o(" \u2014 "),NQ=a("a"),hbr=o("TFEncoderDecoderModel"),pbr=o(" (Encoder decoder model)"),ubr=l(),Y7=a("li"),cve=a("strong"),_br=o("led"),bbr=o(" \u2014 "),jQ=a("a"),vbr=o("TFLEDForConditionalGeneration"),Fbr=o(" (LED model)"),Tbr=l(),K7=a("li"),fve=a("strong"),Mbr=o("marian"),Ebr=o(" \u2014 "),DQ=a("a"),Cbr=o("TFMarianMTModel"),wbr=o(" (Marian model)"),Abr=l(),Z7=a("li"),mve=a("strong"),ybr=o("mbart"),Lbr=o(" \u2014 "),GQ=a("a"),xbr=o("TFMBartForConditionalGeneration"),$br=o(" (mBART model)"),kbr=l(),eM=a("li"),gve=a("strong"),Sbr=o("mt5"),Rbr=o(" \u2014 "),OQ=a("a"),Pbr=o("TFMT5ForConditionalGeneration"),Bbr=o(" (mT5 model)"),Ibr=l(),oM=a("li"),hve=a("strong"),qbr=o("pegasus"),Nbr=o(" \u2014 "),VQ=a("a"),jbr=o("TFPegasusForConditionalGeneration"),Dbr=o(" (Pegasus model)"),Gbr=l(),rM=a("li"),pve=a("strong"),Obr=o("t5"),Vbr=o(" \u2014 "),XQ=a("a"),Xbr=o("TFT5ForConditionalGeneration"),zbr=o(" (T5 model)"),Wbr=l(),F(tM.$$.fragment),Wqe=l(),ac=a("h2"),aM=a("a"),uve=a("span"),F(v8.$$.fragment),Qbr=l(),_ve=a("span"),Hbr=o("TFAutoModelForSequenceClassification"),Qqe=l(),tr=a("div"),F(F8.$$.fragment),Ubr=l(),nc=a("p"),Jbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),zQ=a("a"),Ybr=o("from_pretrained()"),Kbr=o(" class method or the "),WQ=a("a"),Zbr=o("from_config()"),e2r=o(` class
method.`),o2r=l(),T8=a("p"),r2r=o("This class cannot be instantiated directly using "),bve=a("code"),t2r=o("__init__()"),a2r=o(" (throws an error)."),n2r=l(),Rt=a("div"),F(M8.$$.fragment),s2r=l(),vve=a("p"),l2r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),i2r=l(),sc=a("p"),d2r=o(`Note:
Loading a model from its configuration file does `),Fve=a("strong"),c2r=o("not"),f2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QQ=a("a"),m2r=o("from_pretrained()"),g2r=o(" to load the model weights."),h2r=l(),F(nM.$$.fragment),p2r=l(),kr=a("div"),F(E8.$$.fragment),u2r=l(),Tve=a("p"),_2r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),b2r=l(),nn=a("p"),v2r=o("The model class to instantiate is selected based on the "),Mve=a("code"),F2r=o("model_type"),T2r=o(` property of the config object (either
passed as an argument or loaded from `),Eve=a("code"),M2r=o("pretrained_model_name_or_path"),E2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cve=a("code"),C2r=o("pretrained_model_name_or_path"),w2r=o(":"),A2r=l(),ee=a("ul"),sM=a("li"),wve=a("strong"),y2r=o("albert"),L2r=o(" \u2014 "),HQ=a("a"),x2r=o("TFAlbertForSequenceClassification"),$2r=o(" (ALBERT model)"),k2r=l(),lM=a("li"),Ave=a("strong"),S2r=o("bert"),R2r=o(" \u2014 "),UQ=a("a"),P2r=o("TFBertForSequenceClassification"),B2r=o(" (BERT model)"),I2r=l(),iM=a("li"),yve=a("strong"),q2r=o("camembert"),N2r=o(" \u2014 "),JQ=a("a"),j2r=o("TFCamembertForSequenceClassification"),D2r=o(" (CamemBERT model)"),G2r=l(),dM=a("li"),Lve=a("strong"),O2r=o("convbert"),V2r=o(" \u2014 "),YQ=a("a"),X2r=o("TFConvBertForSequenceClassification"),z2r=o(" (ConvBERT model)"),W2r=l(),cM=a("li"),xve=a("strong"),Q2r=o("ctrl"),H2r=o(" \u2014 "),KQ=a("a"),U2r=o("TFCTRLForSequenceClassification"),J2r=o(" (CTRL model)"),Y2r=l(),fM=a("li"),$ve=a("strong"),K2r=o("deberta"),Z2r=o(" \u2014 "),ZQ=a("a"),evr=o("TFDebertaForSequenceClassification"),ovr=o(" (DeBERTa model)"),rvr=l(),mM=a("li"),kve=a("strong"),tvr=o("deberta-v2"),avr=o(" \u2014 "),eH=a("a"),nvr=o("TFDebertaV2ForSequenceClassification"),svr=o(" (DeBERTa-v2 model)"),lvr=l(),gM=a("li"),Sve=a("strong"),ivr=o("distilbert"),dvr=o(" \u2014 "),oH=a("a"),cvr=o("TFDistilBertForSequenceClassification"),fvr=o(" (DistilBERT model)"),mvr=l(),hM=a("li"),Rve=a("strong"),gvr=o("electra"),hvr=o(" \u2014 "),rH=a("a"),pvr=o("TFElectraForSequenceClassification"),uvr=o(" (ELECTRA model)"),_vr=l(),pM=a("li"),Pve=a("strong"),bvr=o("flaubert"),vvr=o(" \u2014 "),tH=a("a"),Fvr=o("TFFlaubertForSequenceClassification"),Tvr=o(" (FlauBERT model)"),Mvr=l(),uM=a("li"),Bve=a("strong"),Evr=o("funnel"),Cvr=o(" \u2014 "),aH=a("a"),wvr=o("TFFunnelForSequenceClassification"),Avr=o(" (Funnel Transformer model)"),yvr=l(),_M=a("li"),Ive=a("strong"),Lvr=o("gpt2"),xvr=o(" \u2014 "),nH=a("a"),$vr=o("TFGPT2ForSequenceClassification"),kvr=o(" (OpenAI GPT-2 model)"),Svr=l(),bM=a("li"),qve=a("strong"),Rvr=o("gptj"),Pvr=o(" \u2014 "),sH=a("a"),Bvr=o("TFGPTJForSequenceClassification"),Ivr=o(" (GPT-J model)"),qvr=l(),vM=a("li"),Nve=a("strong"),Nvr=o("layoutlm"),jvr=o(" \u2014 "),lH=a("a"),Dvr=o("TFLayoutLMForSequenceClassification"),Gvr=o(" (LayoutLM model)"),Ovr=l(),FM=a("li"),jve=a("strong"),Vvr=o("longformer"),Xvr=o(" \u2014 "),iH=a("a"),zvr=o("TFLongformerForSequenceClassification"),Wvr=o(" (Longformer model)"),Qvr=l(),TM=a("li"),Dve=a("strong"),Hvr=o("mobilebert"),Uvr=o(" \u2014 "),dH=a("a"),Jvr=o("TFMobileBertForSequenceClassification"),Yvr=o(" (MobileBERT model)"),Kvr=l(),MM=a("li"),Gve=a("strong"),Zvr=o("mpnet"),e3r=o(" \u2014 "),cH=a("a"),o3r=o("TFMPNetForSequenceClassification"),r3r=o(" (MPNet model)"),t3r=l(),EM=a("li"),Ove=a("strong"),a3r=o("openai-gpt"),n3r=o(" \u2014 "),fH=a("a"),s3r=o("TFOpenAIGPTForSequenceClassification"),l3r=o(" (OpenAI GPT model)"),i3r=l(),CM=a("li"),Vve=a("strong"),d3r=o("rembert"),c3r=o(" \u2014 "),mH=a("a"),f3r=o("TFRemBertForSequenceClassification"),m3r=o(" (RemBERT model)"),g3r=l(),wM=a("li"),Xve=a("strong"),h3r=o("roberta"),p3r=o(" \u2014 "),gH=a("a"),u3r=o("TFRobertaForSequenceClassification"),_3r=o(" (RoBERTa model)"),b3r=l(),AM=a("li"),zve=a("strong"),v3r=o("roformer"),F3r=o(" \u2014 "),hH=a("a"),T3r=o("TFRoFormerForSequenceClassification"),M3r=o(" (RoFormer model)"),E3r=l(),yM=a("li"),Wve=a("strong"),C3r=o("tapas"),w3r=o(" \u2014 "),pH=a("a"),A3r=o("TFTapasForSequenceClassification"),y3r=o(" (TAPAS model)"),L3r=l(),LM=a("li"),Qve=a("strong"),x3r=o("transfo-xl"),$3r=o(" \u2014 "),uH=a("a"),k3r=o("TFTransfoXLForSequenceClassification"),S3r=o(" (Transformer-XL model)"),R3r=l(),xM=a("li"),Hve=a("strong"),P3r=o("xlm"),B3r=o(" \u2014 "),_H=a("a"),I3r=o("TFXLMForSequenceClassification"),q3r=o(" (XLM model)"),N3r=l(),$M=a("li"),Uve=a("strong"),j3r=o("xlm-roberta"),D3r=o(" \u2014 "),bH=a("a"),G3r=o("TFXLMRobertaForSequenceClassification"),O3r=o(" (XLM-RoBERTa model)"),V3r=l(),kM=a("li"),Jve=a("strong"),X3r=o("xlnet"),z3r=o(" \u2014 "),vH=a("a"),W3r=o("TFXLNetForSequenceClassification"),Q3r=o(" (XLNet model)"),H3r=l(),F(SM.$$.fragment),Hqe=l(),lc=a("h2"),RM=a("a"),Yve=a("span"),F(C8.$$.fragment),U3r=l(),Kve=a("span"),J3r=o("TFAutoModelForMultipleChoice"),Uqe=l(),ar=a("div"),F(w8.$$.fragment),Y3r=l(),ic=a("p"),K3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),FH=a("a"),Z3r=o("from_pretrained()"),eFr=o(" class method or the "),TH=a("a"),oFr=o("from_config()"),rFr=o(` class
method.`),tFr=l(),A8=a("p"),aFr=o("This class cannot be instantiated directly using "),Zve=a("code"),nFr=o("__init__()"),sFr=o(" (throws an error)."),lFr=l(),Pt=a("div"),F(y8.$$.fragment),iFr=l(),e3e=a("p"),dFr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),cFr=l(),dc=a("p"),fFr=o(`Note:
Loading a model from its configuration file does `),o3e=a("strong"),mFr=o("not"),gFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MH=a("a"),hFr=o("from_pretrained()"),pFr=o(" to load the model weights."),uFr=l(),F(PM.$$.fragment),_Fr=l(),Sr=a("div"),F(L8.$$.fragment),bFr=l(),r3e=a("p"),vFr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),FFr=l(),sn=a("p"),TFr=o("The model class to instantiate is selected based on the "),t3e=a("code"),MFr=o("model_type"),EFr=o(` property of the config object (either
passed as an argument or loaded from `),a3e=a("code"),CFr=o("pretrained_model_name_or_path"),wFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n3e=a("code"),AFr=o("pretrained_model_name_or_path"),yFr=o(":"),LFr=l(),he=a("ul"),BM=a("li"),s3e=a("strong"),xFr=o("albert"),$Fr=o(" \u2014 "),EH=a("a"),kFr=o("TFAlbertForMultipleChoice"),SFr=o(" (ALBERT model)"),RFr=l(),IM=a("li"),l3e=a("strong"),PFr=o("bert"),BFr=o(" \u2014 "),CH=a("a"),IFr=o("TFBertForMultipleChoice"),qFr=o(" (BERT model)"),NFr=l(),qM=a("li"),i3e=a("strong"),jFr=o("camembert"),DFr=o(" \u2014 "),wH=a("a"),GFr=o("TFCamembertForMultipleChoice"),OFr=o(" (CamemBERT model)"),VFr=l(),NM=a("li"),d3e=a("strong"),XFr=o("convbert"),zFr=o(" \u2014 "),AH=a("a"),WFr=o("TFConvBertForMultipleChoice"),QFr=o(" (ConvBERT model)"),HFr=l(),jM=a("li"),c3e=a("strong"),UFr=o("distilbert"),JFr=o(" \u2014 "),yH=a("a"),YFr=o("TFDistilBertForMultipleChoice"),KFr=o(" (DistilBERT model)"),ZFr=l(),DM=a("li"),f3e=a("strong"),e0r=o("electra"),o0r=o(" \u2014 "),LH=a("a"),r0r=o("TFElectraForMultipleChoice"),t0r=o(" (ELECTRA model)"),a0r=l(),GM=a("li"),m3e=a("strong"),n0r=o("flaubert"),s0r=o(" \u2014 "),xH=a("a"),l0r=o("TFFlaubertForMultipleChoice"),i0r=o(" (FlauBERT model)"),d0r=l(),OM=a("li"),g3e=a("strong"),c0r=o("funnel"),f0r=o(" \u2014 "),$H=a("a"),m0r=o("TFFunnelForMultipleChoice"),g0r=o(" (Funnel Transformer model)"),h0r=l(),VM=a("li"),h3e=a("strong"),p0r=o("longformer"),u0r=o(" \u2014 "),kH=a("a"),_0r=o("TFLongformerForMultipleChoice"),b0r=o(" (Longformer model)"),v0r=l(),XM=a("li"),p3e=a("strong"),F0r=o("mobilebert"),T0r=o(" \u2014 "),SH=a("a"),M0r=o("TFMobileBertForMultipleChoice"),E0r=o(" (MobileBERT model)"),C0r=l(),zM=a("li"),u3e=a("strong"),w0r=o("mpnet"),A0r=o(" \u2014 "),RH=a("a"),y0r=o("TFMPNetForMultipleChoice"),L0r=o(" (MPNet model)"),x0r=l(),WM=a("li"),_3e=a("strong"),$0r=o("rembert"),k0r=o(" \u2014 "),PH=a("a"),S0r=o("TFRemBertForMultipleChoice"),R0r=o(" (RemBERT model)"),P0r=l(),QM=a("li"),b3e=a("strong"),B0r=o("roberta"),I0r=o(" \u2014 "),BH=a("a"),q0r=o("TFRobertaForMultipleChoice"),N0r=o(" (RoBERTa model)"),j0r=l(),HM=a("li"),v3e=a("strong"),D0r=o("roformer"),G0r=o(" \u2014 "),IH=a("a"),O0r=o("TFRoFormerForMultipleChoice"),V0r=o(" (RoFormer model)"),X0r=l(),UM=a("li"),F3e=a("strong"),z0r=o("xlm"),W0r=o(" \u2014 "),qH=a("a"),Q0r=o("TFXLMForMultipleChoice"),H0r=o(" (XLM model)"),U0r=l(),JM=a("li"),T3e=a("strong"),J0r=o("xlm-roberta"),Y0r=o(" \u2014 "),NH=a("a"),K0r=o("TFXLMRobertaForMultipleChoice"),Z0r=o(" (XLM-RoBERTa model)"),eTr=l(),YM=a("li"),M3e=a("strong"),oTr=o("xlnet"),rTr=o(" \u2014 "),jH=a("a"),tTr=o("TFXLNetForMultipleChoice"),aTr=o(" (XLNet model)"),nTr=l(),F(KM.$$.fragment),Jqe=l(),cc=a("h2"),ZM=a("a"),E3e=a("span"),F(x8.$$.fragment),sTr=l(),C3e=a("span"),lTr=o("TFAutoModelForNextSentencePrediction"),Yqe=l(),nr=a("div"),F($8.$$.fragment),iTr=l(),fc=a("p"),dTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),DH=a("a"),cTr=o("from_pretrained()"),fTr=o(" class method or the "),GH=a("a"),mTr=o("from_config()"),gTr=o(` class
method.`),hTr=l(),k8=a("p"),pTr=o("This class cannot be instantiated directly using "),w3e=a("code"),uTr=o("__init__()"),_Tr=o(" (throws an error)."),bTr=l(),Bt=a("div"),F(S8.$$.fragment),vTr=l(),A3e=a("p"),FTr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),TTr=l(),mc=a("p"),MTr=o(`Note:
Loading a model from its configuration file does `),y3e=a("strong"),ETr=o("not"),CTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OH=a("a"),wTr=o("from_pretrained()"),ATr=o(" to load the model weights."),yTr=l(),F(e4.$$.fragment),LTr=l(),Rr=a("div"),F(R8.$$.fragment),xTr=l(),L3e=a("p"),$Tr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),kTr=l(),ln=a("p"),STr=o("The model class to instantiate is selected based on the "),x3e=a("code"),RTr=o("model_type"),PTr=o(` property of the config object (either
passed as an argument or loaded from `),$3e=a("code"),BTr=o("pretrained_model_name_or_path"),ITr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k3e=a("code"),qTr=o("pretrained_model_name_or_path"),NTr=o(":"),jTr=l(),P8=a("ul"),o4=a("li"),S3e=a("strong"),DTr=o("bert"),GTr=o(" \u2014 "),VH=a("a"),OTr=o("TFBertForNextSentencePrediction"),VTr=o(" (BERT model)"),XTr=l(),r4=a("li"),R3e=a("strong"),zTr=o("mobilebert"),WTr=o(" \u2014 "),XH=a("a"),QTr=o("TFMobileBertForNextSentencePrediction"),HTr=o(" (MobileBERT model)"),UTr=l(),F(t4.$$.fragment),Kqe=l(),gc=a("h2"),a4=a("a"),P3e=a("span"),F(B8.$$.fragment),JTr=l(),B3e=a("span"),YTr=o("TFAutoModelForTableQuestionAnswering"),Zqe=l(),sr=a("div"),F(I8.$$.fragment),KTr=l(),hc=a("p"),ZTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),zH=a("a"),e7r=o("from_pretrained()"),o7r=o(" class method or the "),WH=a("a"),r7r=o("from_config()"),t7r=o(` class
method.`),a7r=l(),q8=a("p"),n7r=o("This class cannot be instantiated directly using "),I3e=a("code"),s7r=o("__init__()"),l7r=o(" (throws an error)."),i7r=l(),It=a("div"),F(N8.$$.fragment),d7r=l(),q3e=a("p"),c7r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),f7r=l(),pc=a("p"),m7r=o(`Note:
Loading a model from its configuration file does `),N3e=a("strong"),g7r=o("not"),h7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QH=a("a"),p7r=o("from_pretrained()"),u7r=o(" to load the model weights."),_7r=l(),F(n4.$$.fragment),b7r=l(),Pr=a("div"),F(j8.$$.fragment),v7r=l(),j3e=a("p"),F7r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),T7r=l(),dn=a("p"),M7r=o("The model class to instantiate is selected based on the "),D3e=a("code"),E7r=o("model_type"),C7r=o(` property of the config object (either
passed as an argument or loaded from `),G3e=a("code"),w7r=o("pretrained_model_name_or_path"),A7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O3e=a("code"),y7r=o("pretrained_model_name_or_path"),L7r=o(":"),x7r=l(),V3e=a("ul"),s4=a("li"),X3e=a("strong"),$7r=o("tapas"),k7r=o(" \u2014 "),HH=a("a"),S7r=o("TFTapasForQuestionAnswering"),R7r=o(" (TAPAS model)"),P7r=l(),F(l4.$$.fragment),eNe=l(),uc=a("h2"),i4=a("a"),z3e=a("span"),F(D8.$$.fragment),B7r=l(),W3e=a("span"),I7r=o("TFAutoModelForTokenClassification"),oNe=l(),lr=a("div"),F(G8.$$.fragment),q7r=l(),_c=a("p"),N7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),UH=a("a"),j7r=o("from_pretrained()"),D7r=o(" class method or the "),JH=a("a"),G7r=o("from_config()"),O7r=o(` class
method.`),V7r=l(),O8=a("p"),X7r=o("This class cannot be instantiated directly using "),Q3e=a("code"),z7r=o("__init__()"),W7r=o(" (throws an error)."),Q7r=l(),qt=a("div"),F(V8.$$.fragment),H7r=l(),H3e=a("p"),U7r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),J7r=l(),bc=a("p"),Y7r=o(`Note:
Loading a model from its configuration file does `),U3e=a("strong"),K7r=o("not"),Z7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YH=a("a"),eMr=o("from_pretrained()"),oMr=o(" to load the model weights."),rMr=l(),F(d4.$$.fragment),tMr=l(),Br=a("div"),F(X8.$$.fragment),aMr=l(),J3e=a("p"),nMr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),sMr=l(),cn=a("p"),lMr=o("The model class to instantiate is selected based on the "),Y3e=a("code"),iMr=o("model_type"),dMr=o(` property of the config object (either
passed as an argument or loaded from `),K3e=a("code"),cMr=o("pretrained_model_name_or_path"),fMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z3e=a("code"),mMr=o("pretrained_model_name_or_path"),gMr=o(":"),hMr=l(),de=a("ul"),c4=a("li"),eFe=a("strong"),pMr=o("albert"),uMr=o(" \u2014 "),KH=a("a"),_Mr=o("TFAlbertForTokenClassification"),bMr=o(" (ALBERT model)"),vMr=l(),f4=a("li"),oFe=a("strong"),FMr=o("bert"),TMr=o(" \u2014 "),ZH=a("a"),MMr=o("TFBertForTokenClassification"),EMr=o(" (BERT model)"),CMr=l(),m4=a("li"),rFe=a("strong"),wMr=o("camembert"),AMr=o(" \u2014 "),eU=a("a"),yMr=o("TFCamembertForTokenClassification"),LMr=o(" (CamemBERT model)"),xMr=l(),g4=a("li"),tFe=a("strong"),$Mr=o("convbert"),kMr=o(" \u2014 "),oU=a("a"),SMr=o("TFConvBertForTokenClassification"),RMr=o(" (ConvBERT model)"),PMr=l(),h4=a("li"),aFe=a("strong"),BMr=o("deberta"),IMr=o(" \u2014 "),rU=a("a"),qMr=o("TFDebertaForTokenClassification"),NMr=o(" (DeBERTa model)"),jMr=l(),p4=a("li"),nFe=a("strong"),DMr=o("deberta-v2"),GMr=o(" \u2014 "),tU=a("a"),OMr=o("TFDebertaV2ForTokenClassification"),VMr=o(" (DeBERTa-v2 model)"),XMr=l(),u4=a("li"),sFe=a("strong"),zMr=o("distilbert"),WMr=o(" \u2014 "),aU=a("a"),QMr=o("TFDistilBertForTokenClassification"),HMr=o(" (DistilBERT model)"),UMr=l(),_4=a("li"),lFe=a("strong"),JMr=o("electra"),YMr=o(" \u2014 "),nU=a("a"),KMr=o("TFElectraForTokenClassification"),ZMr=o(" (ELECTRA model)"),e4r=l(),b4=a("li"),iFe=a("strong"),o4r=o("flaubert"),r4r=o(" \u2014 "),sU=a("a"),t4r=o("TFFlaubertForTokenClassification"),a4r=o(" (FlauBERT model)"),n4r=l(),v4=a("li"),dFe=a("strong"),s4r=o("funnel"),l4r=o(" \u2014 "),lU=a("a"),i4r=o("TFFunnelForTokenClassification"),d4r=o(" (Funnel Transformer model)"),c4r=l(),F4=a("li"),cFe=a("strong"),f4r=o("layoutlm"),m4r=o(" \u2014 "),iU=a("a"),g4r=o("TFLayoutLMForTokenClassification"),h4r=o(" (LayoutLM model)"),p4r=l(),T4=a("li"),fFe=a("strong"),u4r=o("longformer"),_4r=o(" \u2014 "),dU=a("a"),b4r=o("TFLongformerForTokenClassification"),v4r=o(" (Longformer model)"),F4r=l(),M4=a("li"),mFe=a("strong"),T4r=o("mobilebert"),M4r=o(" \u2014 "),cU=a("a"),E4r=o("TFMobileBertForTokenClassification"),C4r=o(" (MobileBERT model)"),w4r=l(),E4=a("li"),gFe=a("strong"),A4r=o("mpnet"),y4r=o(" \u2014 "),fU=a("a"),L4r=o("TFMPNetForTokenClassification"),x4r=o(" (MPNet model)"),$4r=l(),C4=a("li"),hFe=a("strong"),k4r=o("rembert"),S4r=o(" \u2014 "),mU=a("a"),R4r=o("TFRemBertForTokenClassification"),P4r=o(" (RemBERT model)"),B4r=l(),w4=a("li"),pFe=a("strong"),I4r=o("roberta"),q4r=o(" \u2014 "),gU=a("a"),N4r=o("TFRobertaForTokenClassification"),j4r=o(" (RoBERTa model)"),D4r=l(),A4=a("li"),uFe=a("strong"),G4r=o("roformer"),O4r=o(" \u2014 "),hU=a("a"),V4r=o("TFRoFormerForTokenClassification"),X4r=o(" (RoFormer model)"),z4r=l(),y4=a("li"),_Fe=a("strong"),W4r=o("xlm"),Q4r=o(" \u2014 "),pU=a("a"),H4r=o("TFXLMForTokenClassification"),U4r=o(" (XLM model)"),J4r=l(),L4=a("li"),bFe=a("strong"),Y4r=o("xlm-roberta"),K4r=o(" \u2014 "),uU=a("a"),Z4r=o("TFXLMRobertaForTokenClassification"),eEr=o(" (XLM-RoBERTa model)"),oEr=l(),x4=a("li"),vFe=a("strong"),rEr=o("xlnet"),tEr=o(" \u2014 "),_U=a("a"),aEr=o("TFXLNetForTokenClassification"),nEr=o(" (XLNet model)"),sEr=l(),F($4.$$.fragment),rNe=l(),vc=a("h2"),k4=a("a"),FFe=a("span"),F(z8.$$.fragment),lEr=l(),TFe=a("span"),iEr=o("TFAutoModelForQuestionAnswering"),tNe=l(),ir=a("div"),F(W8.$$.fragment),dEr=l(),Fc=a("p"),cEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),bU=a("a"),fEr=o("from_pretrained()"),mEr=o(" class method or the "),vU=a("a"),gEr=o("from_config()"),hEr=o(` class
method.`),pEr=l(),Q8=a("p"),uEr=o("This class cannot be instantiated directly using "),MFe=a("code"),_Er=o("__init__()"),bEr=o(" (throws an error)."),vEr=l(),Nt=a("div"),F(H8.$$.fragment),FEr=l(),EFe=a("p"),TEr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),MEr=l(),Tc=a("p"),EEr=o(`Note:
Loading a model from its configuration file does `),CFe=a("strong"),CEr=o("not"),wEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FU=a("a"),AEr=o("from_pretrained()"),yEr=o(" to load the model weights."),LEr=l(),F(S4.$$.fragment),xEr=l(),Ir=a("div"),F(U8.$$.fragment),$Er=l(),wFe=a("p"),kEr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),SEr=l(),fn=a("p"),REr=o("The model class to instantiate is selected based on the "),AFe=a("code"),PEr=o("model_type"),BEr=o(` property of the config object (either
passed as an argument or loaded from `),yFe=a("code"),IEr=o("pretrained_model_name_or_path"),qEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LFe=a("code"),NEr=o("pretrained_model_name_or_path"),jEr=o(":"),DEr=l(),ce=a("ul"),R4=a("li"),xFe=a("strong"),GEr=o("albert"),OEr=o(" \u2014 "),TU=a("a"),VEr=o("TFAlbertForQuestionAnswering"),XEr=o(" (ALBERT model)"),zEr=l(),P4=a("li"),$Fe=a("strong"),WEr=o("bert"),QEr=o(" \u2014 "),MU=a("a"),HEr=o("TFBertForQuestionAnswering"),UEr=o(" (BERT model)"),JEr=l(),B4=a("li"),kFe=a("strong"),YEr=o("camembert"),KEr=o(" \u2014 "),EU=a("a"),ZEr=o("TFCamembertForQuestionAnswering"),eCr=o(" (CamemBERT model)"),oCr=l(),I4=a("li"),SFe=a("strong"),rCr=o("convbert"),tCr=o(" \u2014 "),CU=a("a"),aCr=o("TFConvBertForQuestionAnswering"),nCr=o(" (ConvBERT model)"),sCr=l(),q4=a("li"),RFe=a("strong"),lCr=o("deberta"),iCr=o(" \u2014 "),wU=a("a"),dCr=o("TFDebertaForQuestionAnswering"),cCr=o(" (DeBERTa model)"),fCr=l(),N4=a("li"),PFe=a("strong"),mCr=o("deberta-v2"),gCr=o(" \u2014 "),AU=a("a"),hCr=o("TFDebertaV2ForQuestionAnswering"),pCr=o(" (DeBERTa-v2 model)"),uCr=l(),j4=a("li"),BFe=a("strong"),_Cr=o("distilbert"),bCr=o(" \u2014 "),yU=a("a"),vCr=o("TFDistilBertForQuestionAnswering"),FCr=o(" (DistilBERT model)"),TCr=l(),D4=a("li"),IFe=a("strong"),MCr=o("electra"),ECr=o(" \u2014 "),LU=a("a"),CCr=o("TFElectraForQuestionAnswering"),wCr=o(" (ELECTRA model)"),ACr=l(),G4=a("li"),qFe=a("strong"),yCr=o("flaubert"),LCr=o(" \u2014 "),xU=a("a"),xCr=o("TFFlaubertForQuestionAnsweringSimple"),$Cr=o(" (FlauBERT model)"),kCr=l(),O4=a("li"),NFe=a("strong"),SCr=o("funnel"),RCr=o(" \u2014 "),$U=a("a"),PCr=o("TFFunnelForQuestionAnswering"),BCr=o(" (Funnel Transformer model)"),ICr=l(),V4=a("li"),jFe=a("strong"),qCr=o("gptj"),NCr=o(" \u2014 "),kU=a("a"),jCr=o("TFGPTJForQuestionAnswering"),DCr=o(" (GPT-J model)"),GCr=l(),X4=a("li"),DFe=a("strong"),OCr=o("longformer"),VCr=o(" \u2014 "),SU=a("a"),XCr=o("TFLongformerForQuestionAnswering"),zCr=o(" (Longformer model)"),WCr=l(),z4=a("li"),GFe=a("strong"),QCr=o("mobilebert"),HCr=o(" \u2014 "),RU=a("a"),UCr=o("TFMobileBertForQuestionAnswering"),JCr=o(" (MobileBERT model)"),YCr=l(),W4=a("li"),OFe=a("strong"),KCr=o("mpnet"),ZCr=o(" \u2014 "),PU=a("a"),e5r=o("TFMPNetForQuestionAnswering"),o5r=o(" (MPNet model)"),r5r=l(),Q4=a("li"),VFe=a("strong"),t5r=o("rembert"),a5r=o(" \u2014 "),BU=a("a"),n5r=o("TFRemBertForQuestionAnswering"),s5r=o(" (RemBERT model)"),l5r=l(),H4=a("li"),XFe=a("strong"),i5r=o("roberta"),d5r=o(" \u2014 "),IU=a("a"),c5r=o("TFRobertaForQuestionAnswering"),f5r=o(" (RoBERTa model)"),m5r=l(),U4=a("li"),zFe=a("strong"),g5r=o("roformer"),h5r=o(" \u2014 "),qU=a("a"),p5r=o("TFRoFormerForQuestionAnswering"),u5r=o(" (RoFormer model)"),_5r=l(),J4=a("li"),WFe=a("strong"),b5r=o("xlm"),v5r=o(" \u2014 "),NU=a("a"),F5r=o("TFXLMForQuestionAnsweringSimple"),T5r=o(" (XLM model)"),M5r=l(),Y4=a("li"),QFe=a("strong"),E5r=o("xlm-roberta"),C5r=o(" \u2014 "),jU=a("a"),w5r=o("TFXLMRobertaForQuestionAnswering"),A5r=o(" (XLM-RoBERTa model)"),y5r=l(),K4=a("li"),HFe=a("strong"),L5r=o("xlnet"),x5r=o(" \u2014 "),DU=a("a"),$5r=o("TFXLNetForQuestionAnsweringSimple"),k5r=o(" (XLNet model)"),S5r=l(),F(Z4.$$.fragment),aNe=l(),Mc=a("h2"),eE=a("a"),UFe=a("span"),F(J8.$$.fragment),R5r=l(),JFe=a("span"),P5r=o("TFAutoModelForVision2Seq"),nNe=l(),dr=a("div"),F(Y8.$$.fragment),B5r=l(),Ec=a("p"),I5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),GU=a("a"),q5r=o("from_pretrained()"),N5r=o(" class method or the "),OU=a("a"),j5r=o("from_config()"),D5r=o(` class
method.`),G5r=l(),K8=a("p"),O5r=o("This class cannot be instantiated directly using "),YFe=a("code"),V5r=o("__init__()"),X5r=o(" (throws an error)."),z5r=l(),jt=a("div"),F(Z8.$$.fragment),W5r=l(),KFe=a("p"),Q5r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),H5r=l(),Cc=a("p"),U5r=o(`Note:
Loading a model from its configuration file does `),ZFe=a("strong"),J5r=o("not"),Y5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VU=a("a"),K5r=o("from_pretrained()"),Z5r=o(" to load the model weights."),ewr=l(),F(oE.$$.fragment),owr=l(),qr=a("div"),F(ex.$$.fragment),rwr=l(),e0e=a("p"),twr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),awr=l(),mn=a("p"),nwr=o("The model class to instantiate is selected based on the "),o0e=a("code"),swr=o("model_type"),lwr=o(` property of the config object (either
passed as an argument or loaded from `),r0e=a("code"),iwr=o("pretrained_model_name_or_path"),dwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t0e=a("code"),cwr=o("pretrained_model_name_or_path"),fwr=o(":"),mwr=l(),a0e=a("ul"),rE=a("li"),n0e=a("strong"),gwr=o("vision-encoder-decoder"),hwr=o(" \u2014 "),XU=a("a"),pwr=o("TFVisionEncoderDecoderModel"),uwr=o(" (Vision Encoder decoder model)"),_wr=l(),F(tE.$$.fragment),sNe=l(),wc=a("h2"),aE=a("a"),s0e=a("span"),F(ox.$$.fragment),bwr=l(),l0e=a("span"),vwr=o("TFAutoModelForSpeechSeq2Seq"),lNe=l(),cr=a("div"),F(rx.$$.fragment),Fwr=l(),Ac=a("p"),Twr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),zU=a("a"),Mwr=o("from_pretrained()"),Ewr=o(" class method or the "),WU=a("a"),Cwr=o("from_config()"),wwr=o(` class
method.`),Awr=l(),tx=a("p"),ywr=o("This class cannot be instantiated directly using "),i0e=a("code"),Lwr=o("__init__()"),xwr=o(" (throws an error)."),$wr=l(),Dt=a("div"),F(ax.$$.fragment),kwr=l(),d0e=a("p"),Swr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Rwr=l(),yc=a("p"),Pwr=o(`Note:
Loading a model from its configuration file does `),c0e=a("strong"),Bwr=o("not"),Iwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QU=a("a"),qwr=o("from_pretrained()"),Nwr=o(" to load the model weights."),jwr=l(),F(nE.$$.fragment),Dwr=l(),Nr=a("div"),F(nx.$$.fragment),Gwr=l(),f0e=a("p"),Owr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Vwr=l(),gn=a("p"),Xwr=o("The model class to instantiate is selected based on the "),m0e=a("code"),zwr=o("model_type"),Wwr=o(` property of the config object (either
passed as an argument or loaded from `),g0e=a("code"),Qwr=o("pretrained_model_name_or_path"),Hwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h0e=a("code"),Uwr=o("pretrained_model_name_or_path"),Jwr=o(":"),Ywr=l(),p0e=a("ul"),sE=a("li"),u0e=a("strong"),Kwr=o("speech_to_text"),Zwr=o(" \u2014 "),HU=a("a"),eAr=o("TFSpeech2TextForConditionalGeneration"),oAr=o(" (Speech2Text model)"),rAr=l(),F(lE.$$.fragment),iNe=l(),Lc=a("h2"),iE=a("a"),_0e=a("span"),F(sx.$$.fragment),tAr=l(),b0e=a("span"),aAr=o("FlaxAutoModel"),dNe=l(),fr=a("div"),F(lx.$$.fragment),nAr=l(),xc=a("p"),sAr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),UU=a("a"),lAr=o("from_pretrained()"),iAr=o(" class method or the "),JU=a("a"),dAr=o("from_config()"),cAr=o(` class
method.`),fAr=l(),ix=a("p"),mAr=o("This class cannot be instantiated directly using "),v0e=a("code"),gAr=o("__init__()"),hAr=o(" (throws an error)."),pAr=l(),Gt=a("div"),F(dx.$$.fragment),uAr=l(),F0e=a("p"),_Ar=o("Instantiates one of the base model classes of the library from a configuration."),bAr=l(),$c=a("p"),vAr=o(`Note:
Loading a model from its configuration file does `),T0e=a("strong"),FAr=o("not"),TAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YU=a("a"),MAr=o("from_pretrained()"),EAr=o(" to load the model weights."),CAr=l(),F(dE.$$.fragment),wAr=l(),jr=a("div"),F(cx.$$.fragment),AAr=l(),M0e=a("p"),yAr=o("Instantiate one of the base model classes of the library from a pretrained model."),LAr=l(),hn=a("p"),xAr=o("The model class to instantiate is selected based on the "),E0e=a("code"),$Ar=o("model_type"),kAr=o(` property of the config object (either
passed as an argument or loaded from `),C0e=a("code"),SAr=o("pretrained_model_name_or_path"),RAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w0e=a("code"),PAr=o("pretrained_model_name_or_path"),BAr=o(":"),IAr=l(),re=a("ul"),cE=a("li"),A0e=a("strong"),qAr=o("albert"),NAr=o(" \u2014 "),KU=a("a"),jAr=o("FlaxAlbertModel"),DAr=o(" (ALBERT model)"),GAr=l(),fE=a("li"),y0e=a("strong"),OAr=o("bart"),VAr=o(" \u2014 "),ZU=a("a"),XAr=o("FlaxBartModel"),zAr=o(" (BART model)"),WAr=l(),mE=a("li"),L0e=a("strong"),QAr=o("beit"),HAr=o(" \u2014 "),eJ=a("a"),UAr=o("FlaxBeitModel"),JAr=o(" (BEiT model)"),YAr=l(),gE=a("li"),x0e=a("strong"),KAr=o("bert"),ZAr=o(" \u2014 "),oJ=a("a"),e6r=o("FlaxBertModel"),o6r=o(" (BERT model)"),r6r=l(),hE=a("li"),$0e=a("strong"),t6r=o("big_bird"),a6r=o(" \u2014 "),rJ=a("a"),n6r=o("FlaxBigBirdModel"),s6r=o(" (BigBird model)"),l6r=l(),pE=a("li"),k0e=a("strong"),i6r=o("blenderbot"),d6r=o(" \u2014 "),tJ=a("a"),c6r=o("FlaxBlenderbotModel"),f6r=o(" (Blenderbot model)"),m6r=l(),uE=a("li"),S0e=a("strong"),g6r=o("blenderbot-small"),h6r=o(" \u2014 "),aJ=a("a"),p6r=o("FlaxBlenderbotSmallModel"),u6r=o(" (BlenderbotSmall model)"),_6r=l(),_E=a("li"),R0e=a("strong"),b6r=o("clip"),v6r=o(" \u2014 "),nJ=a("a"),F6r=o("FlaxCLIPModel"),T6r=o(" (CLIP model)"),M6r=l(),bE=a("li"),P0e=a("strong"),E6r=o("distilbert"),C6r=o(" \u2014 "),sJ=a("a"),w6r=o("FlaxDistilBertModel"),A6r=o(" (DistilBERT model)"),y6r=l(),vE=a("li"),B0e=a("strong"),L6r=o("electra"),x6r=o(" \u2014 "),lJ=a("a"),$6r=o("FlaxElectraModel"),k6r=o(" (ELECTRA model)"),S6r=l(),FE=a("li"),I0e=a("strong"),R6r=o("gpt2"),P6r=o(" \u2014 "),iJ=a("a"),B6r=o("FlaxGPT2Model"),I6r=o(" (OpenAI GPT-2 model)"),q6r=l(),TE=a("li"),q0e=a("strong"),N6r=o("gpt_neo"),j6r=o(" \u2014 "),dJ=a("a"),D6r=o("FlaxGPTNeoModel"),G6r=o(" (GPT Neo model)"),O6r=l(),ME=a("li"),N0e=a("strong"),V6r=o("gptj"),X6r=o(" \u2014 "),cJ=a("a"),z6r=o("FlaxGPTJModel"),W6r=o(" (GPT-J model)"),Q6r=l(),EE=a("li"),j0e=a("strong"),H6r=o("marian"),U6r=o(" \u2014 "),fJ=a("a"),J6r=o("FlaxMarianModel"),Y6r=o(" (Marian model)"),K6r=l(),CE=a("li"),D0e=a("strong"),Z6r=o("mbart"),eyr=o(" \u2014 "),mJ=a("a"),oyr=o("FlaxMBartModel"),ryr=o(" (mBART model)"),tyr=l(),wE=a("li"),G0e=a("strong"),ayr=o("mt5"),nyr=o(" \u2014 "),gJ=a("a"),syr=o("FlaxMT5Model"),lyr=o(" (mT5 model)"),iyr=l(),AE=a("li"),O0e=a("strong"),dyr=o("pegasus"),cyr=o(" \u2014 "),hJ=a("a"),fyr=o("FlaxPegasusModel"),myr=o(" (Pegasus model)"),gyr=l(),yE=a("li"),V0e=a("strong"),hyr=o("roberta"),pyr=o(" \u2014 "),pJ=a("a"),uyr=o("FlaxRobertaModel"),_yr=o(" (RoBERTa model)"),byr=l(),LE=a("li"),X0e=a("strong"),vyr=o("roformer"),Fyr=o(" \u2014 "),uJ=a("a"),Tyr=o("FlaxRoFormerModel"),Myr=o(" (RoFormer model)"),Eyr=l(),xE=a("li"),z0e=a("strong"),Cyr=o("t5"),wyr=o(" \u2014 "),_J=a("a"),Ayr=o("FlaxT5Model"),yyr=o(" (T5 model)"),Lyr=l(),$E=a("li"),W0e=a("strong"),xyr=o("vision-text-dual-encoder"),$yr=o(" \u2014 "),bJ=a("a"),kyr=o("FlaxVisionTextDualEncoderModel"),Syr=o(" (VisionTextDualEncoder model)"),Ryr=l(),kE=a("li"),Q0e=a("strong"),Pyr=o("vit"),Byr=o(" \u2014 "),vJ=a("a"),Iyr=o("FlaxViTModel"),qyr=o(" (ViT model)"),Nyr=l(),SE=a("li"),H0e=a("strong"),jyr=o("wav2vec2"),Dyr=o(" \u2014 "),FJ=a("a"),Gyr=o("FlaxWav2Vec2Model"),Oyr=o(" (Wav2Vec2 model)"),Vyr=l(),RE=a("li"),U0e=a("strong"),Xyr=o("xglm"),zyr=o(" \u2014 "),TJ=a("a"),Wyr=o("FlaxXGLMModel"),Qyr=o(" (XGLM model)"),Hyr=l(),PE=a("li"),J0e=a("strong"),Uyr=o("xlm-roberta"),Jyr=o(" \u2014 "),MJ=a("a"),Yyr=o("FlaxXLMRobertaModel"),Kyr=o(" (XLM-RoBERTa model)"),Zyr=l(),F(BE.$$.fragment),cNe=l(),kc=a("h2"),IE=a("a"),Y0e=a("span"),F(fx.$$.fragment),eLr=l(),K0e=a("span"),oLr=o("FlaxAutoModelForCausalLM"),fNe=l(),mr=a("div"),F(mx.$$.fragment),rLr=l(),Sc=a("p"),tLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),EJ=a("a"),aLr=o("from_pretrained()"),nLr=o(" class method or the "),CJ=a("a"),sLr=o("from_config()"),lLr=o(` class
method.`),iLr=l(),gx=a("p"),dLr=o("This class cannot be instantiated directly using "),Z0e=a("code"),cLr=o("__init__()"),fLr=o(" (throws an error)."),mLr=l(),Ot=a("div"),F(hx.$$.fragment),gLr=l(),eTe=a("p"),hLr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),pLr=l(),Rc=a("p"),uLr=o(`Note:
Loading a model from its configuration file does `),oTe=a("strong"),_Lr=o("not"),bLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wJ=a("a"),vLr=o("from_pretrained()"),FLr=o(" to load the model weights."),TLr=l(),F(qE.$$.fragment),MLr=l(),Dr=a("div"),F(px.$$.fragment),ELr=l(),rTe=a("p"),CLr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),wLr=l(),pn=a("p"),ALr=o("The model class to instantiate is selected based on the "),tTe=a("code"),yLr=o("model_type"),LLr=o(` property of the config object (either
passed as an argument or loaded from `),aTe=a("code"),xLr=o("pretrained_model_name_or_path"),$Lr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nTe=a("code"),kLr=o("pretrained_model_name_or_path"),SLr=o(":"),RLr=l(),Re=a("ul"),NE=a("li"),sTe=a("strong"),PLr=o("bart"),BLr=o(" \u2014 "),AJ=a("a"),ILr=o("FlaxBartForCausalLM"),qLr=o(" (BART model)"),NLr=l(),jE=a("li"),lTe=a("strong"),jLr=o("bert"),DLr=o(" \u2014 "),yJ=a("a"),GLr=o("FlaxBertForCausalLM"),OLr=o(" (BERT model)"),VLr=l(),DE=a("li"),iTe=a("strong"),XLr=o("big_bird"),zLr=o(" \u2014 "),LJ=a("a"),WLr=o("FlaxBigBirdForCausalLM"),QLr=o(" (BigBird model)"),HLr=l(),GE=a("li"),dTe=a("strong"),ULr=o("electra"),JLr=o(" \u2014 "),xJ=a("a"),YLr=o("FlaxElectraForCausalLM"),KLr=o(" (ELECTRA model)"),ZLr=l(),OE=a("li"),cTe=a("strong"),e8r=o("gpt2"),o8r=o(" \u2014 "),$J=a("a"),r8r=o("FlaxGPT2LMHeadModel"),t8r=o(" (OpenAI GPT-2 model)"),a8r=l(),VE=a("li"),fTe=a("strong"),n8r=o("gpt_neo"),s8r=o(" \u2014 "),kJ=a("a"),l8r=o("FlaxGPTNeoForCausalLM"),i8r=o(" (GPT Neo model)"),d8r=l(),XE=a("li"),mTe=a("strong"),c8r=o("gptj"),f8r=o(" \u2014 "),SJ=a("a"),m8r=o("FlaxGPTJForCausalLM"),g8r=o(" (GPT-J model)"),h8r=l(),zE=a("li"),gTe=a("strong"),p8r=o("roberta"),u8r=o(" \u2014 "),RJ=a("a"),_8r=o("FlaxRobertaForCausalLM"),b8r=o(" (RoBERTa model)"),v8r=l(),WE=a("li"),hTe=a("strong"),F8r=o("xglm"),T8r=o(" \u2014 "),PJ=a("a"),M8r=o("FlaxXGLMForCausalLM"),E8r=o(" (XGLM model)"),C8r=l(),F(QE.$$.fragment),mNe=l(),Pc=a("h2"),HE=a("a"),pTe=a("span"),F(ux.$$.fragment),w8r=l(),uTe=a("span"),A8r=o("FlaxAutoModelForPreTraining"),gNe=l(),gr=a("div"),F(_x.$$.fragment),y8r=l(),Bc=a("p"),L8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),BJ=a("a"),x8r=o("from_pretrained()"),$8r=o(" class method or the "),IJ=a("a"),k8r=o("from_config()"),S8r=o(` class
method.`),R8r=l(),bx=a("p"),P8r=o("This class cannot be instantiated directly using "),_Te=a("code"),B8r=o("__init__()"),I8r=o(" (throws an error)."),q8r=l(),Vt=a("div"),F(vx.$$.fragment),N8r=l(),bTe=a("p"),j8r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),D8r=l(),Ic=a("p"),G8r=o(`Note:
Loading a model from its configuration file does `),vTe=a("strong"),O8r=o("not"),V8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qJ=a("a"),X8r=o("from_pretrained()"),z8r=o(" to load the model weights."),W8r=l(),F(UE.$$.fragment),Q8r=l(),Gr=a("div"),F(Fx.$$.fragment),H8r=l(),FTe=a("p"),U8r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),J8r=l(),un=a("p"),Y8r=o("The model class to instantiate is selected based on the "),TTe=a("code"),K8r=o("model_type"),Z8r=o(` property of the config object (either
passed as an argument or loaded from `),MTe=a("code"),exr=o("pretrained_model_name_or_path"),oxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ETe=a("code"),rxr=o("pretrained_model_name_or_path"),txr=o(":"),axr=l(),Me=a("ul"),JE=a("li"),CTe=a("strong"),nxr=o("albert"),sxr=o(" \u2014 "),NJ=a("a"),lxr=o("FlaxAlbertForPreTraining"),ixr=o(" (ALBERT model)"),dxr=l(),YE=a("li"),wTe=a("strong"),cxr=o("bart"),fxr=o(" \u2014 "),jJ=a("a"),mxr=o("FlaxBartForConditionalGeneration"),gxr=o(" (BART model)"),hxr=l(),KE=a("li"),ATe=a("strong"),pxr=o("bert"),uxr=o(" \u2014 "),DJ=a("a"),_xr=o("FlaxBertForPreTraining"),bxr=o(" (BERT model)"),vxr=l(),ZE=a("li"),yTe=a("strong"),Fxr=o("big_bird"),Txr=o(" \u2014 "),GJ=a("a"),Mxr=o("FlaxBigBirdForPreTraining"),Exr=o(" (BigBird model)"),Cxr=l(),eC=a("li"),LTe=a("strong"),wxr=o("electra"),Axr=o(" \u2014 "),OJ=a("a"),yxr=o("FlaxElectraForPreTraining"),Lxr=o(" (ELECTRA model)"),xxr=l(),oC=a("li"),xTe=a("strong"),$xr=o("mbart"),kxr=o(" \u2014 "),VJ=a("a"),Sxr=o("FlaxMBartForConditionalGeneration"),Rxr=o(" (mBART model)"),Pxr=l(),rC=a("li"),$Te=a("strong"),Bxr=o("mt5"),Ixr=o(" \u2014 "),XJ=a("a"),qxr=o("FlaxMT5ForConditionalGeneration"),Nxr=o(" (mT5 model)"),jxr=l(),tC=a("li"),kTe=a("strong"),Dxr=o("roberta"),Gxr=o(" \u2014 "),zJ=a("a"),Oxr=o("FlaxRobertaForMaskedLM"),Vxr=o(" (RoBERTa model)"),Xxr=l(),aC=a("li"),STe=a("strong"),zxr=o("roformer"),Wxr=o(" \u2014 "),WJ=a("a"),Qxr=o("FlaxRoFormerForMaskedLM"),Hxr=o(" (RoFormer model)"),Uxr=l(),nC=a("li"),RTe=a("strong"),Jxr=o("t5"),Yxr=o(" \u2014 "),QJ=a("a"),Kxr=o("FlaxT5ForConditionalGeneration"),Zxr=o(" (T5 model)"),e9r=l(),sC=a("li"),PTe=a("strong"),o9r=o("wav2vec2"),r9r=o(" \u2014 "),HJ=a("a"),t9r=o("FlaxWav2Vec2ForPreTraining"),a9r=o(" (Wav2Vec2 model)"),n9r=l(),lC=a("li"),BTe=a("strong"),s9r=o("xlm-roberta"),l9r=o(" \u2014 "),UJ=a("a"),i9r=o("FlaxXLMRobertaForMaskedLM"),d9r=o(" (XLM-RoBERTa model)"),c9r=l(),F(iC.$$.fragment),hNe=l(),qc=a("h2"),dC=a("a"),ITe=a("span"),F(Tx.$$.fragment),f9r=l(),qTe=a("span"),m9r=o("FlaxAutoModelForMaskedLM"),pNe=l(),hr=a("div"),F(Mx.$$.fragment),g9r=l(),Nc=a("p"),h9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),JJ=a("a"),p9r=o("from_pretrained()"),u9r=o(" class method or the "),YJ=a("a"),_9r=o("from_config()"),b9r=o(` class
method.`),v9r=l(),Ex=a("p"),F9r=o("This class cannot be instantiated directly using "),NTe=a("code"),T9r=o("__init__()"),M9r=o(" (throws an error)."),E9r=l(),Xt=a("div"),F(Cx.$$.fragment),C9r=l(),jTe=a("p"),w9r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),A9r=l(),jc=a("p"),y9r=o(`Note:
Loading a model from its configuration file does `),DTe=a("strong"),L9r=o("not"),x9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KJ=a("a"),$9r=o("from_pretrained()"),k9r=o(" to load the model weights."),S9r=l(),F(cC.$$.fragment),R9r=l(),Or=a("div"),F(wx.$$.fragment),P9r=l(),GTe=a("p"),B9r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),I9r=l(),_n=a("p"),q9r=o("The model class to instantiate is selected based on the "),OTe=a("code"),N9r=o("model_type"),j9r=o(` property of the config object (either
passed as an argument or loaded from `),VTe=a("code"),D9r=o("pretrained_model_name_or_path"),G9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XTe=a("code"),O9r=o("pretrained_model_name_or_path"),V9r=o(":"),X9r=l(),Le=a("ul"),fC=a("li"),zTe=a("strong"),z9r=o("albert"),W9r=o(" \u2014 "),ZJ=a("a"),Q9r=o("FlaxAlbertForMaskedLM"),H9r=o(" (ALBERT model)"),U9r=l(),mC=a("li"),WTe=a("strong"),J9r=o("bart"),Y9r=o(" \u2014 "),eY=a("a"),K9r=o("FlaxBartForConditionalGeneration"),Z9r=o(" (BART model)"),e$r=l(),gC=a("li"),QTe=a("strong"),o$r=o("bert"),r$r=o(" \u2014 "),oY=a("a"),t$r=o("FlaxBertForMaskedLM"),a$r=o(" (BERT model)"),n$r=l(),hC=a("li"),HTe=a("strong"),s$r=o("big_bird"),l$r=o(" \u2014 "),rY=a("a"),i$r=o("FlaxBigBirdForMaskedLM"),d$r=o(" (BigBird model)"),c$r=l(),pC=a("li"),UTe=a("strong"),f$r=o("distilbert"),m$r=o(" \u2014 "),tY=a("a"),g$r=o("FlaxDistilBertForMaskedLM"),h$r=o(" (DistilBERT model)"),p$r=l(),uC=a("li"),JTe=a("strong"),u$r=o("electra"),_$r=o(" \u2014 "),aY=a("a"),b$r=o("FlaxElectraForMaskedLM"),v$r=o(" (ELECTRA model)"),F$r=l(),_C=a("li"),YTe=a("strong"),T$r=o("mbart"),M$r=o(" \u2014 "),nY=a("a"),E$r=o("FlaxMBartForConditionalGeneration"),C$r=o(" (mBART model)"),w$r=l(),bC=a("li"),KTe=a("strong"),A$r=o("roberta"),y$r=o(" \u2014 "),sY=a("a"),L$r=o("FlaxRobertaForMaskedLM"),x$r=o(" (RoBERTa model)"),$$r=l(),vC=a("li"),ZTe=a("strong"),k$r=o("roformer"),S$r=o(" \u2014 "),lY=a("a"),R$r=o("FlaxRoFormerForMaskedLM"),P$r=o(" (RoFormer model)"),B$r=l(),FC=a("li"),e7e=a("strong"),I$r=o("xlm-roberta"),q$r=o(" \u2014 "),iY=a("a"),N$r=o("FlaxXLMRobertaForMaskedLM"),j$r=o(" (XLM-RoBERTa model)"),D$r=l(),F(TC.$$.fragment),uNe=l(),Dc=a("h2"),MC=a("a"),o7e=a("span"),F(Ax.$$.fragment),G$r=l(),r7e=a("span"),O$r=o("FlaxAutoModelForSeq2SeqLM"),_Ne=l(),pr=a("div"),F(yx.$$.fragment),V$r=l(),Gc=a("p"),X$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),dY=a("a"),z$r=o("from_pretrained()"),W$r=o(" class method or the "),cY=a("a"),Q$r=o("from_config()"),H$r=o(` class
method.`),U$r=l(),Lx=a("p"),J$r=o("This class cannot be instantiated directly using "),t7e=a("code"),Y$r=o("__init__()"),K$r=o(" (throws an error)."),Z$r=l(),zt=a("div"),F(xx.$$.fragment),ekr=l(),a7e=a("p"),okr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),rkr=l(),Oc=a("p"),tkr=o(`Note:
Loading a model from its configuration file does `),n7e=a("strong"),akr=o("not"),nkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fY=a("a"),skr=o("from_pretrained()"),lkr=o(" to load the model weights."),ikr=l(),F(EC.$$.fragment),dkr=l(),Vr=a("div"),F($x.$$.fragment),ckr=l(),s7e=a("p"),fkr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),mkr=l(),bn=a("p"),gkr=o("The model class to instantiate is selected based on the "),l7e=a("code"),hkr=o("model_type"),pkr=o(` property of the config object (either
passed as an argument or loaded from `),i7e=a("code"),ukr=o("pretrained_model_name_or_path"),_kr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d7e=a("code"),bkr=o("pretrained_model_name_or_path"),vkr=o(":"),Fkr=l(),Pe=a("ul"),CC=a("li"),c7e=a("strong"),Tkr=o("bart"),Mkr=o(" \u2014 "),mY=a("a"),Ekr=o("FlaxBartForConditionalGeneration"),Ckr=o(" (BART model)"),wkr=l(),wC=a("li"),f7e=a("strong"),Akr=o("blenderbot"),ykr=o(" \u2014 "),gY=a("a"),Lkr=o("FlaxBlenderbotForConditionalGeneration"),xkr=o(" (Blenderbot model)"),$kr=l(),AC=a("li"),m7e=a("strong"),kkr=o("blenderbot-small"),Skr=o(" \u2014 "),hY=a("a"),Rkr=o("FlaxBlenderbotSmallForConditionalGeneration"),Pkr=o(" (BlenderbotSmall model)"),Bkr=l(),yC=a("li"),g7e=a("strong"),Ikr=o("encoder-decoder"),qkr=o(" \u2014 "),pY=a("a"),Nkr=o("FlaxEncoderDecoderModel"),jkr=o(" (Encoder decoder model)"),Dkr=l(),LC=a("li"),h7e=a("strong"),Gkr=o("marian"),Okr=o(" \u2014 "),uY=a("a"),Vkr=o("FlaxMarianMTModel"),Xkr=o(" (Marian model)"),zkr=l(),xC=a("li"),p7e=a("strong"),Wkr=o("mbart"),Qkr=o(" \u2014 "),_Y=a("a"),Hkr=o("FlaxMBartForConditionalGeneration"),Ukr=o(" (mBART model)"),Jkr=l(),$C=a("li"),u7e=a("strong"),Ykr=o("mt5"),Kkr=o(" \u2014 "),bY=a("a"),Zkr=o("FlaxMT5ForConditionalGeneration"),eSr=o(" (mT5 model)"),oSr=l(),kC=a("li"),_7e=a("strong"),rSr=o("pegasus"),tSr=o(" \u2014 "),vY=a("a"),aSr=o("FlaxPegasusForConditionalGeneration"),nSr=o(" (Pegasus model)"),sSr=l(),SC=a("li"),b7e=a("strong"),lSr=o("t5"),iSr=o(" \u2014 "),FY=a("a"),dSr=o("FlaxT5ForConditionalGeneration"),cSr=o(" (T5 model)"),fSr=l(),F(RC.$$.fragment),bNe=l(),Vc=a("h2"),PC=a("a"),v7e=a("span"),F(kx.$$.fragment),mSr=l(),F7e=a("span"),gSr=o("FlaxAutoModelForSequenceClassification"),vNe=l(),ur=a("div"),F(Sx.$$.fragment),hSr=l(),Xc=a("p"),pSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),TY=a("a"),uSr=o("from_pretrained()"),_Sr=o(" class method or the "),MY=a("a"),bSr=o("from_config()"),vSr=o(` class
method.`),FSr=l(),Rx=a("p"),TSr=o("This class cannot be instantiated directly using "),T7e=a("code"),MSr=o("__init__()"),ESr=o(" (throws an error)."),CSr=l(),Wt=a("div"),F(Px.$$.fragment),wSr=l(),M7e=a("p"),ASr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),ySr=l(),zc=a("p"),LSr=o(`Note:
Loading a model from its configuration file does `),E7e=a("strong"),xSr=o("not"),$Sr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EY=a("a"),kSr=o("from_pretrained()"),SSr=o(" to load the model weights."),RSr=l(),F(BC.$$.fragment),PSr=l(),Xr=a("div"),F(Bx.$$.fragment),BSr=l(),C7e=a("p"),ISr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),qSr=l(),vn=a("p"),NSr=o("The model class to instantiate is selected based on the "),w7e=a("code"),jSr=o("model_type"),DSr=o(` property of the config object (either
passed as an argument or loaded from `),A7e=a("code"),GSr=o("pretrained_model_name_or_path"),OSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y7e=a("code"),VSr=o("pretrained_model_name_or_path"),XSr=o(":"),zSr=l(),xe=a("ul"),IC=a("li"),L7e=a("strong"),WSr=o("albert"),QSr=o(" \u2014 "),CY=a("a"),HSr=o("FlaxAlbertForSequenceClassification"),USr=o(" (ALBERT model)"),JSr=l(),qC=a("li"),x7e=a("strong"),YSr=o("bart"),KSr=o(" \u2014 "),wY=a("a"),ZSr=o("FlaxBartForSequenceClassification"),eRr=o(" (BART model)"),oRr=l(),NC=a("li"),$7e=a("strong"),rRr=o("bert"),tRr=o(" \u2014 "),AY=a("a"),aRr=o("FlaxBertForSequenceClassification"),nRr=o(" (BERT model)"),sRr=l(),jC=a("li"),k7e=a("strong"),lRr=o("big_bird"),iRr=o(" \u2014 "),yY=a("a"),dRr=o("FlaxBigBirdForSequenceClassification"),cRr=o(" (BigBird model)"),fRr=l(),DC=a("li"),S7e=a("strong"),mRr=o("distilbert"),gRr=o(" \u2014 "),LY=a("a"),hRr=o("FlaxDistilBertForSequenceClassification"),pRr=o(" (DistilBERT model)"),uRr=l(),GC=a("li"),R7e=a("strong"),_Rr=o("electra"),bRr=o(" \u2014 "),xY=a("a"),vRr=o("FlaxElectraForSequenceClassification"),FRr=o(" (ELECTRA model)"),TRr=l(),OC=a("li"),P7e=a("strong"),MRr=o("mbart"),ERr=o(" \u2014 "),$Y=a("a"),CRr=o("FlaxMBartForSequenceClassification"),wRr=o(" (mBART model)"),ARr=l(),VC=a("li"),B7e=a("strong"),yRr=o("roberta"),LRr=o(" \u2014 "),kY=a("a"),xRr=o("FlaxRobertaForSequenceClassification"),$Rr=o(" (RoBERTa model)"),kRr=l(),XC=a("li"),I7e=a("strong"),SRr=o("roformer"),RRr=o(" \u2014 "),SY=a("a"),PRr=o("FlaxRoFormerForSequenceClassification"),BRr=o(" (RoFormer model)"),IRr=l(),zC=a("li"),q7e=a("strong"),qRr=o("xlm-roberta"),NRr=o(" \u2014 "),RY=a("a"),jRr=o("FlaxXLMRobertaForSequenceClassification"),DRr=o(" (XLM-RoBERTa model)"),GRr=l(),F(WC.$$.fragment),FNe=l(),Wc=a("h2"),QC=a("a"),N7e=a("span"),F(Ix.$$.fragment),ORr=l(),j7e=a("span"),VRr=o("FlaxAutoModelForQuestionAnswering"),TNe=l(),_r=a("div"),F(qx.$$.fragment),XRr=l(),Qc=a("p"),zRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),PY=a("a"),WRr=o("from_pretrained()"),QRr=o(" class method or the "),BY=a("a"),HRr=o("from_config()"),URr=o(` class
method.`),JRr=l(),Nx=a("p"),YRr=o("This class cannot be instantiated directly using "),D7e=a("code"),KRr=o("__init__()"),ZRr=o(" (throws an error)."),ePr=l(),Qt=a("div"),F(jx.$$.fragment),oPr=l(),G7e=a("p"),rPr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),tPr=l(),Hc=a("p"),aPr=o(`Note:
Loading a model from its configuration file does `),O7e=a("strong"),nPr=o("not"),sPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IY=a("a"),lPr=o("from_pretrained()"),iPr=o(" to load the model weights."),dPr=l(),F(HC.$$.fragment),cPr=l(),zr=a("div"),F(Dx.$$.fragment),fPr=l(),V7e=a("p"),mPr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),gPr=l(),Fn=a("p"),hPr=o("The model class to instantiate is selected based on the "),X7e=a("code"),pPr=o("model_type"),uPr=o(` property of the config object (either
passed as an argument or loaded from `),z7e=a("code"),_Pr=o("pretrained_model_name_or_path"),bPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W7e=a("code"),vPr=o("pretrained_model_name_or_path"),FPr=o(":"),TPr=l(),$e=a("ul"),UC=a("li"),Q7e=a("strong"),MPr=o("albert"),EPr=o(" \u2014 "),qY=a("a"),CPr=o("FlaxAlbertForQuestionAnswering"),wPr=o(" (ALBERT model)"),APr=l(),JC=a("li"),H7e=a("strong"),yPr=o("bart"),LPr=o(" \u2014 "),NY=a("a"),xPr=o("FlaxBartForQuestionAnswering"),$Pr=o(" (BART model)"),kPr=l(),YC=a("li"),U7e=a("strong"),SPr=o("bert"),RPr=o(" \u2014 "),jY=a("a"),PPr=o("FlaxBertForQuestionAnswering"),BPr=o(" (BERT model)"),IPr=l(),KC=a("li"),J7e=a("strong"),qPr=o("big_bird"),NPr=o(" \u2014 "),DY=a("a"),jPr=o("FlaxBigBirdForQuestionAnswering"),DPr=o(" (BigBird model)"),GPr=l(),ZC=a("li"),Y7e=a("strong"),OPr=o("distilbert"),VPr=o(" \u2014 "),GY=a("a"),XPr=o("FlaxDistilBertForQuestionAnswering"),zPr=o(" (DistilBERT model)"),WPr=l(),e5=a("li"),K7e=a("strong"),QPr=o("electra"),HPr=o(" \u2014 "),OY=a("a"),UPr=o("FlaxElectraForQuestionAnswering"),JPr=o(" (ELECTRA model)"),YPr=l(),o5=a("li"),Z7e=a("strong"),KPr=o("mbart"),ZPr=o(" \u2014 "),VY=a("a"),eBr=o("FlaxMBartForQuestionAnswering"),oBr=o(" (mBART model)"),rBr=l(),r5=a("li"),eMe=a("strong"),tBr=o("roberta"),aBr=o(" \u2014 "),XY=a("a"),nBr=o("FlaxRobertaForQuestionAnswering"),sBr=o(" (RoBERTa model)"),lBr=l(),t5=a("li"),oMe=a("strong"),iBr=o("roformer"),dBr=o(" \u2014 "),zY=a("a"),cBr=o("FlaxRoFormerForQuestionAnswering"),fBr=o(" (RoFormer model)"),mBr=l(),a5=a("li"),rMe=a("strong"),gBr=o("xlm-roberta"),hBr=o(" \u2014 "),WY=a("a"),pBr=o("FlaxXLMRobertaForQuestionAnswering"),uBr=o(" (XLM-RoBERTa model)"),_Br=l(),F(n5.$$.fragment),MNe=l(),Uc=a("h2"),s5=a("a"),tMe=a("span"),F(Gx.$$.fragment),bBr=l(),aMe=a("span"),vBr=o("FlaxAutoModelForTokenClassification"),ENe=l(),br=a("div"),F(Ox.$$.fragment),FBr=l(),Jc=a("p"),TBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),QY=a("a"),MBr=o("from_pretrained()"),EBr=o(" class method or the "),HY=a("a"),CBr=o("from_config()"),wBr=o(` class
method.`),ABr=l(),Vx=a("p"),yBr=o("This class cannot be instantiated directly using "),nMe=a("code"),LBr=o("__init__()"),xBr=o(" (throws an error)."),$Br=l(),Ht=a("div"),F(Xx.$$.fragment),kBr=l(),sMe=a("p"),SBr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),RBr=l(),Yc=a("p"),PBr=o(`Note:
Loading a model from its configuration file does `),lMe=a("strong"),BBr=o("not"),IBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UY=a("a"),qBr=o("from_pretrained()"),NBr=o(" to load the model weights."),jBr=l(),F(l5.$$.fragment),DBr=l(),Wr=a("div"),F(zx.$$.fragment),GBr=l(),iMe=a("p"),OBr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),VBr=l(),Tn=a("p"),XBr=o("The model class to instantiate is selected based on the "),dMe=a("code"),zBr=o("model_type"),WBr=o(` property of the config object (either
passed as an argument or loaded from `),cMe=a("code"),QBr=o("pretrained_model_name_or_path"),HBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fMe=a("code"),UBr=o("pretrained_model_name_or_path"),JBr=o(":"),YBr=l(),De=a("ul"),i5=a("li"),mMe=a("strong"),KBr=o("albert"),ZBr=o(" \u2014 "),JY=a("a"),eIr=o("FlaxAlbertForTokenClassification"),oIr=o(" (ALBERT model)"),rIr=l(),d5=a("li"),gMe=a("strong"),tIr=o("bert"),aIr=o(" \u2014 "),YY=a("a"),nIr=o("FlaxBertForTokenClassification"),sIr=o(" (BERT model)"),lIr=l(),c5=a("li"),hMe=a("strong"),iIr=o("big_bird"),dIr=o(" \u2014 "),KY=a("a"),cIr=o("FlaxBigBirdForTokenClassification"),fIr=o(" (BigBird model)"),mIr=l(),f5=a("li"),pMe=a("strong"),gIr=o("distilbert"),hIr=o(" \u2014 "),ZY=a("a"),pIr=o("FlaxDistilBertForTokenClassification"),uIr=o(" (DistilBERT model)"),_Ir=l(),m5=a("li"),uMe=a("strong"),bIr=o("electra"),vIr=o(" \u2014 "),eK=a("a"),FIr=o("FlaxElectraForTokenClassification"),TIr=o(" (ELECTRA model)"),MIr=l(),g5=a("li"),_Me=a("strong"),EIr=o("roberta"),CIr=o(" \u2014 "),oK=a("a"),wIr=o("FlaxRobertaForTokenClassification"),AIr=o(" (RoBERTa model)"),yIr=l(),h5=a("li"),bMe=a("strong"),LIr=o("roformer"),xIr=o(" \u2014 "),rK=a("a"),$Ir=o("FlaxRoFormerForTokenClassification"),kIr=o(" (RoFormer model)"),SIr=l(),p5=a("li"),vMe=a("strong"),RIr=o("xlm-roberta"),PIr=o(" \u2014 "),tK=a("a"),BIr=o("FlaxXLMRobertaForTokenClassification"),IIr=o(" (XLM-RoBERTa model)"),qIr=l(),F(u5.$$.fragment),CNe=l(),Kc=a("h2"),_5=a("a"),FMe=a("span"),F(Wx.$$.fragment),NIr=l(),TMe=a("span"),jIr=o("FlaxAutoModelForMultipleChoice"),wNe=l(),vr=a("div"),F(Qx.$$.fragment),DIr=l(),Zc=a("p"),GIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),aK=a("a"),OIr=o("from_pretrained()"),VIr=o(" class method or the "),nK=a("a"),XIr=o("from_config()"),zIr=o(` class
method.`),WIr=l(),Hx=a("p"),QIr=o("This class cannot be instantiated directly using "),MMe=a("code"),HIr=o("__init__()"),UIr=o(" (throws an error)."),JIr=l(),Ut=a("div"),F(Ux.$$.fragment),YIr=l(),EMe=a("p"),KIr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),ZIr=l(),ef=a("p"),eqr=o(`Note:
Loading a model from its configuration file does `),CMe=a("strong"),oqr=o("not"),rqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sK=a("a"),tqr=o("from_pretrained()"),aqr=o(" to load the model weights."),nqr=l(),F(b5.$$.fragment),sqr=l(),Qr=a("div"),F(Jx.$$.fragment),lqr=l(),wMe=a("p"),iqr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),dqr=l(),Mn=a("p"),cqr=o("The model class to instantiate is selected based on the "),AMe=a("code"),fqr=o("model_type"),mqr=o(` property of the config object (either
passed as an argument or loaded from `),yMe=a("code"),gqr=o("pretrained_model_name_or_path"),hqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LMe=a("code"),pqr=o("pretrained_model_name_or_path"),uqr=o(":"),_qr=l(),Ge=a("ul"),v5=a("li"),xMe=a("strong"),bqr=o("albert"),vqr=o(" \u2014 "),lK=a("a"),Fqr=o("FlaxAlbertForMultipleChoice"),Tqr=o(" (ALBERT model)"),Mqr=l(),F5=a("li"),$Me=a("strong"),Eqr=o("bert"),Cqr=o(" \u2014 "),iK=a("a"),wqr=o("FlaxBertForMultipleChoice"),Aqr=o(" (BERT model)"),yqr=l(),T5=a("li"),kMe=a("strong"),Lqr=o("big_bird"),xqr=o(" \u2014 "),dK=a("a"),$qr=o("FlaxBigBirdForMultipleChoice"),kqr=o(" (BigBird model)"),Sqr=l(),M5=a("li"),SMe=a("strong"),Rqr=o("distilbert"),Pqr=o(" \u2014 "),cK=a("a"),Bqr=o("FlaxDistilBertForMultipleChoice"),Iqr=o(" (DistilBERT model)"),qqr=l(),E5=a("li"),RMe=a("strong"),Nqr=o("electra"),jqr=o(" \u2014 "),fK=a("a"),Dqr=o("FlaxElectraForMultipleChoice"),Gqr=o(" (ELECTRA model)"),Oqr=l(),C5=a("li"),PMe=a("strong"),Vqr=o("roberta"),Xqr=o(" \u2014 "),mK=a("a"),zqr=o("FlaxRobertaForMultipleChoice"),Wqr=o(" (RoBERTa model)"),Qqr=l(),w5=a("li"),BMe=a("strong"),Hqr=o("roformer"),Uqr=o(" \u2014 "),gK=a("a"),Jqr=o("FlaxRoFormerForMultipleChoice"),Yqr=o(" (RoFormer model)"),Kqr=l(),A5=a("li"),IMe=a("strong"),Zqr=o("xlm-roberta"),eNr=o(" \u2014 "),hK=a("a"),oNr=o("FlaxXLMRobertaForMultipleChoice"),rNr=o(" (XLM-RoBERTa model)"),tNr=l(),F(y5.$$.fragment),ANe=l(),of=a("h2"),L5=a("a"),qMe=a("span"),F(Yx.$$.fragment),aNr=l(),NMe=a("span"),nNr=o("FlaxAutoModelForNextSentencePrediction"),yNe=l(),Fr=a("div"),F(Kx.$$.fragment),sNr=l(),rf=a("p"),lNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),pK=a("a"),iNr=o("from_pretrained()"),dNr=o(" class method or the "),uK=a("a"),cNr=o("from_config()"),fNr=o(` class
method.`),mNr=l(),Zx=a("p"),gNr=o("This class cannot be instantiated directly using "),jMe=a("code"),hNr=o("__init__()"),pNr=o(" (throws an error)."),uNr=l(),Jt=a("div"),F(e9.$$.fragment),_Nr=l(),DMe=a("p"),bNr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),vNr=l(),tf=a("p"),FNr=o(`Note:
Loading a model from its configuration file does `),GMe=a("strong"),TNr=o("not"),MNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_K=a("a"),ENr=o("from_pretrained()"),CNr=o(" to load the model weights."),wNr=l(),F(x5.$$.fragment),ANr=l(),Hr=a("div"),F(o9.$$.fragment),yNr=l(),OMe=a("p"),LNr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),xNr=l(),En=a("p"),$Nr=o("The model class to instantiate is selected based on the "),VMe=a("code"),kNr=o("model_type"),SNr=o(` property of the config object (either
passed as an argument or loaded from `),XMe=a("code"),RNr=o("pretrained_model_name_or_path"),PNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zMe=a("code"),BNr=o("pretrained_model_name_or_path"),INr=o(":"),qNr=l(),WMe=a("ul"),$5=a("li"),QMe=a("strong"),NNr=o("bert"),jNr=o(" \u2014 "),bK=a("a"),DNr=o("FlaxBertForNextSentencePrediction"),GNr=o(" (BERT model)"),ONr=l(),F(k5.$$.fragment),LNe=l(),af=a("h2"),S5=a("a"),HMe=a("span"),F(r9.$$.fragment),VNr=l(),UMe=a("span"),XNr=o("FlaxAutoModelForImageClassification"),xNe=l(),Tr=a("div"),F(t9.$$.fragment),zNr=l(),nf=a("p"),WNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),vK=a("a"),QNr=o("from_pretrained()"),HNr=o(" class method or the "),FK=a("a"),UNr=o("from_config()"),JNr=o(` class
method.`),YNr=l(),a9=a("p"),KNr=o("This class cannot be instantiated directly using "),JMe=a("code"),ZNr=o("__init__()"),ejr=o(" (throws an error)."),ojr=l(),Yt=a("div"),F(n9.$$.fragment),rjr=l(),YMe=a("p"),tjr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),ajr=l(),sf=a("p"),njr=o(`Note:
Loading a model from its configuration file does `),KMe=a("strong"),sjr=o("not"),ljr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TK=a("a"),ijr=o("from_pretrained()"),djr=o(" to load the model weights."),cjr=l(),F(R5.$$.fragment),fjr=l(),Ur=a("div"),F(s9.$$.fragment),mjr=l(),ZMe=a("p"),gjr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),hjr=l(),Cn=a("p"),pjr=o("The model class to instantiate is selected based on the "),e4e=a("code"),ujr=o("model_type"),_jr=o(` property of the config object (either
passed as an argument or loaded from `),o4e=a("code"),bjr=o("pretrained_model_name_or_path"),vjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r4e=a("code"),Fjr=o("pretrained_model_name_or_path"),Tjr=o(":"),Mjr=l(),l9=a("ul"),P5=a("li"),t4e=a("strong"),Ejr=o("beit"),Cjr=o(" \u2014 "),MK=a("a"),wjr=o("FlaxBeitForImageClassification"),Ajr=o(" (BEiT model)"),yjr=l(),B5=a("li"),a4e=a("strong"),Ljr=o("vit"),xjr=o(" \u2014 "),EK=a("a"),$jr=o("FlaxViTForImageClassification"),kjr=o(" (ViT model)"),Sjr=l(),F(I5.$$.fragment),$Ne=l(),lf=a("h2"),q5=a("a"),n4e=a("span"),F(i9.$$.fragment),Rjr=l(),s4e=a("span"),Pjr=o("FlaxAutoModelForVision2Seq"),kNe=l(),Mr=a("div"),F(d9.$$.fragment),Bjr=l(),df=a("p"),Ijr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),CK=a("a"),qjr=o("from_pretrained()"),Njr=o(" class method or the "),wK=a("a"),jjr=o("from_config()"),Djr=o(` class
method.`),Gjr=l(),c9=a("p"),Ojr=o("This class cannot be instantiated directly using "),l4e=a("code"),Vjr=o("__init__()"),Xjr=o(" (throws an error)."),zjr=l(),Kt=a("div"),F(f9.$$.fragment),Wjr=l(),i4e=a("p"),Qjr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Hjr=l(),cf=a("p"),Ujr=o(`Note:
Loading a model from its configuration file does `),d4e=a("strong"),Jjr=o("not"),Yjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AK=a("a"),Kjr=o("from_pretrained()"),Zjr=o(" to load the model weights."),eDr=l(),F(N5.$$.fragment),oDr=l(),Jr=a("div"),F(m9.$$.fragment),rDr=l(),c4e=a("p"),tDr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),aDr=l(),wn=a("p"),nDr=o("The model class to instantiate is selected based on the "),f4e=a("code"),sDr=o("model_type"),lDr=o(` property of the config object (either
passed as an argument or loaded from `),m4e=a("code"),iDr=o("pretrained_model_name_or_path"),dDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g4e=a("code"),cDr=o("pretrained_model_name_or_path"),fDr=o(":"),mDr=l(),h4e=a("ul"),j5=a("li"),p4e=a("strong"),gDr=o("vision-encoder-decoder"),hDr=o(" \u2014 "),yK=a("a"),pDr=o("FlaxVisionEncoderDecoderModel"),uDr=o(" (Vision Encoder decoder model)"),_Dr=l(),F(D5.$$.fragment),this.h()},l(f){const _=mLt('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var g9=s(p);m=n(g9,"A",{id:!0,class:!0,href:!0});var u4e=s(m);u=n(u4e,"SPAN",{});var _4e=s(u);T(d.$$.fragment,_4e),_4e.forEach(t),u4e.forEach(t),h=i(g9),Mo=n(g9,"SPAN",{});var b4e=s(Mo);ci=r(b4e,"Auto Classes"),b4e.forEach(t),g9.forEach(t),hf=i(f),rt=n(f,"P",{});var h9=s(rt);fi=r(h9,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),mi=n(h9,"CODE",{});var v4e=s(mi);a6=r(v4e,"from_pretrained()"),v4e.forEach(t),pf=r(h9,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),h9.forEach(t),je=i(f),We=n(f,"P",{});var An=s(We);gi=r(An,"Instantiating one of "),yn=n(An,"A",{href:!0});var F4e=s(yn);n6=r(F4e,"AutoConfig"),F4e.forEach(t),Ln=r(An,", "),xn=n(An,"A",{href:!0});var T4e=s(xn);s6=r(T4e,"AutoModel"),T4e.forEach(t),hi=r(An,`, and
`),$n=n(An,"A",{href:!0});var M4e=s($n);l6=r(M4e,"AutoTokenizer"),M4e.forEach(t),pi=r(An," will directly create a class of the relevant architecture. For instance"),An.forEach(t),uf=i(f),T(Ca.$$.fragment,f),Qe=i(f),Ae=n(f,"P",{});var p9=s(Ae);w$=r(p9,"will create a model that is an instance of "),ui=n(p9,"A",{href:!0});var E4e=s(ui);A$=r(E4e,"BertModel"),E4e.forEach(t),y$=r(p9,"."),p9.forEach(t),Eo=i(f),wa=n(f,"P",{});var u9=s(wa);L$=r(u9,"There is one class of "),_f=n(u9,"CODE",{});var C4e=s(_f);x$=r(C4e,"AutoModel"),C4e.forEach(t),DDe=r(u9," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),u9.forEach(t),xIe=i(f),_i=n(f,"H2",{class:!0});var _9=s(_i);bf=n(_9,"A",{id:!0,class:!0,href:!0});var w4e=s(bf);Fee=n(w4e,"SPAN",{});var A4e=s(Fee);T(i6.$$.fragment,A4e),A4e.forEach(t),w4e.forEach(t),GDe=i(_9),Tee=n(_9,"SPAN",{});var y4e=s(Tee);ODe=r(y4e,"Extending the Auto Classes"),y4e.forEach(t),_9.forEach(t),$Ie=i(f),kn=n(f,"P",{});var ff=s(kn);VDe=r(ff,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Mee=n(ff,"CODE",{});var L4e=s(Mee);XDe=r(L4e,"NewModel"),L4e.forEach(t),zDe=r(ff,", make sure you have a "),Eee=n(ff,"CODE",{});var x4e=s(Eee);WDe=r(x4e,"NewModelConfig"),x4e.forEach(t),QDe=r(ff,` then you can add those to the auto
classes like this:`),ff.forEach(t),kIe=i(f),T(d6.$$.fragment,f),SIe=i(f),$$=n(f,"P",{});var $4e=s($$);HDe=r($4e,"You will then be able to use the auto classes like you would usually do!"),$4e.forEach(t),RIe=i(f),T(vf.$$.fragment,f),PIe=i(f),bi=n(f,"H2",{class:!0});var b9=s(bi);Ff=n(b9,"A",{id:!0,class:!0,href:!0});var k4e=s(Ff);Cee=n(k4e,"SPAN",{});var S4e=s(Cee);T(c6.$$.fragment,S4e),S4e.forEach(t),k4e.forEach(t),UDe=i(b9),wee=n(b9,"SPAN",{});var R4e=s(wee);JDe=r(R4e,"AutoConfig"),R4e.forEach(t),b9.forEach(t),BIe=i(f),Co=n(f,"DIV",{class:!0});var et=s(Co);T(f6.$$.fragment,et),YDe=i(et),m6=n(et,"P",{});var v9=s(m6);KDe=r(v9,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),k$=n(v9,"A",{href:!0});var P4e=s(k$);ZDe=r(P4e,"from_pretrained()"),P4e.forEach(t),eGe=r(v9," class method."),v9.forEach(t),oGe=i(et),g6=n(et,"P",{});var F9=s(g6);rGe=r(F9,"This class cannot be instantiated directly using "),Aee=n(F9,"CODE",{});var B4e=s(Aee);tGe=r(B4e,"__init__()"),B4e.forEach(t),aGe=r(F9," (throws an error)."),F9.forEach(t),nGe=i(et),Er=n(et,"DIV",{class:!0});var ot=s(Er);T(h6.$$.fragment,ot),sGe=i(ot),yee=n(ot,"P",{});var I4e=s(yee);lGe=r(I4e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),I4e.forEach(t),iGe=i(ot),vi=n(ot,"P",{});var mf=s(vi);dGe=r(mf,"The configuration class to instantiate is selected based on the "),Lee=n(mf,"CODE",{});var q4e=s(Lee);cGe=r(q4e,"model_type"),q4e.forEach(t),fGe=r(mf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),xee=n(mf,"CODE",{});var N4e=s(xee);mGe=r(N4e,"pretrained_model_name_or_path"),N4e.forEach(t),gGe=r(mf,":"),mf.forEach(t),hGe=i(ot),A=n(ot,"UL",{});var y=s(A);Tf=n(y,"LI",{});var G5=s(Tf);$ee=n(G5,"STRONG",{});var j4e=s($ee);pGe=r(j4e,"albert"),j4e.forEach(t),uGe=r(G5," \u2014 "),S$=n(G5,"A",{href:!0});var D4e=s(S$);_Ge=r(D4e,"AlbertConfig"),D4e.forEach(t),bGe=r(G5," (ALBERT model)"),G5.forEach(t),vGe=i(y),Mf=n(y,"LI",{});var O5=s(Mf);kee=n(O5,"STRONG",{});var G4e=s(kee);FGe=r(G4e,"bart"),G4e.forEach(t),TGe=r(O5," \u2014 "),R$=n(O5,"A",{href:!0});var O4e=s(R$);MGe=r(O4e,"BartConfig"),O4e.forEach(t),EGe=r(O5," (BART model)"),O5.forEach(t),CGe=i(y),Ef=n(y,"LI",{});var V5=s(Ef);See=n(V5,"STRONG",{});var V4e=s(See);wGe=r(V4e,"beit"),V4e.forEach(t),AGe=r(V5," \u2014 "),P$=n(V5,"A",{href:!0});var X4e=s(P$);yGe=r(X4e,"BeitConfig"),X4e.forEach(t),LGe=r(V5," (BEiT model)"),V5.forEach(t),xGe=i(y),Cf=n(y,"LI",{});var X5=s(Cf);Ree=n(X5,"STRONG",{});var z4e=s(Ree);$Ge=r(z4e,"bert"),z4e.forEach(t),kGe=r(X5," \u2014 "),B$=n(X5,"A",{href:!0});var W4e=s(B$);SGe=r(W4e,"BertConfig"),W4e.forEach(t),RGe=r(X5," (BERT model)"),X5.forEach(t),PGe=i(y),wf=n(y,"LI",{});var z5=s(wf);Pee=n(z5,"STRONG",{});var Q4e=s(Pee);BGe=r(Q4e,"bert-generation"),Q4e.forEach(t),IGe=r(z5," \u2014 "),I$=n(z5,"A",{href:!0});var H4e=s(I$);qGe=r(H4e,"BertGenerationConfig"),H4e.forEach(t),NGe=r(z5," (Bert Generation model)"),z5.forEach(t),jGe=i(y),Af=n(y,"LI",{});var W5=s(Af);Bee=n(W5,"STRONG",{});var U4e=s(Bee);DGe=r(U4e,"big_bird"),U4e.forEach(t),GGe=r(W5," \u2014 "),q$=n(W5,"A",{href:!0});var J4e=s(q$);OGe=r(J4e,"BigBirdConfig"),J4e.forEach(t),VGe=r(W5," (BigBird model)"),W5.forEach(t),XGe=i(y),yf=n(y,"LI",{});var Q5=s(yf);Iee=n(Q5,"STRONG",{});var Y4e=s(Iee);zGe=r(Y4e,"bigbird_pegasus"),Y4e.forEach(t),WGe=r(Q5," \u2014 "),N$=n(Q5,"A",{href:!0});var K4e=s(N$);QGe=r(K4e,"BigBirdPegasusConfig"),K4e.forEach(t),HGe=r(Q5," (BigBirdPegasus model)"),Q5.forEach(t),UGe=i(y),Lf=n(y,"LI",{});var H5=s(Lf);qee=n(H5,"STRONG",{});var Z4e=s(qee);JGe=r(Z4e,"blenderbot"),Z4e.forEach(t),YGe=r(H5," \u2014 "),j$=n(H5,"A",{href:!0});var eEe=s(j$);KGe=r(eEe,"BlenderbotConfig"),eEe.forEach(t),ZGe=r(H5," (Blenderbot model)"),H5.forEach(t),eOe=i(y),xf=n(y,"LI",{});var U5=s(xf);Nee=n(U5,"STRONG",{});var oEe=s(Nee);oOe=r(oEe,"blenderbot-small"),oEe.forEach(t),rOe=r(U5," \u2014 "),D$=n(U5,"A",{href:!0});var rEe=s(D$);tOe=r(rEe,"BlenderbotSmallConfig"),rEe.forEach(t),aOe=r(U5," (BlenderbotSmall model)"),U5.forEach(t),nOe=i(y),$f=n(y,"LI",{});var J5=s($f);jee=n(J5,"STRONG",{});var tEe=s(jee);sOe=r(tEe,"camembert"),tEe.forEach(t),lOe=r(J5," \u2014 "),G$=n(J5,"A",{href:!0});var aEe=s(G$);iOe=r(aEe,"CamembertConfig"),aEe.forEach(t),dOe=r(J5," (CamemBERT model)"),J5.forEach(t),cOe=i(y),kf=n(y,"LI",{});var Y5=s(kf);Dee=n(Y5,"STRONG",{});var nEe=s(Dee);fOe=r(nEe,"canine"),nEe.forEach(t),mOe=r(Y5," \u2014 "),O$=n(Y5,"A",{href:!0});var sEe=s(O$);gOe=r(sEe,"CanineConfig"),sEe.forEach(t),hOe=r(Y5," (Canine model)"),Y5.forEach(t),pOe=i(y),Sf=n(y,"LI",{});var K5=s(Sf);Gee=n(K5,"STRONG",{});var lEe=s(Gee);uOe=r(lEe,"clip"),lEe.forEach(t),_Oe=r(K5," \u2014 "),V$=n(K5,"A",{href:!0});var iEe=s(V$);bOe=r(iEe,"CLIPConfig"),iEe.forEach(t),vOe=r(K5," (CLIP model)"),K5.forEach(t),FOe=i(y),Rf=n(y,"LI",{});var Z5=s(Rf);Oee=n(Z5,"STRONG",{});var dEe=s(Oee);TOe=r(dEe,"convbert"),dEe.forEach(t),MOe=r(Z5," \u2014 "),X$=n(Z5,"A",{href:!0});var cEe=s(X$);EOe=r(cEe,"ConvBertConfig"),cEe.forEach(t),COe=r(Z5," (ConvBERT model)"),Z5.forEach(t),wOe=i(y),Pf=n(y,"LI",{});var ew=s(Pf);Vee=n(ew,"STRONG",{});var fEe=s(Vee);AOe=r(fEe,"convnext"),fEe.forEach(t),yOe=r(ew," \u2014 "),z$=n(ew,"A",{href:!0});var mEe=s(z$);LOe=r(mEe,"ConvNextConfig"),mEe.forEach(t),xOe=r(ew," (ConvNext model)"),ew.forEach(t),$Oe=i(y),Bf=n(y,"LI",{});var ow=s(Bf);Xee=n(ow,"STRONG",{});var gEe=s(Xee);kOe=r(gEe,"ctrl"),gEe.forEach(t),SOe=r(ow," \u2014 "),W$=n(ow,"A",{href:!0});var hEe=s(W$);ROe=r(hEe,"CTRLConfig"),hEe.forEach(t),POe=r(ow," (CTRL model)"),ow.forEach(t),BOe=i(y),If=n(y,"LI",{});var rw=s(If);zee=n(rw,"STRONG",{});var pEe=s(zee);IOe=r(pEe,"data2vec-audio"),pEe.forEach(t),qOe=r(rw," \u2014 "),Q$=n(rw,"A",{href:!0});var uEe=s(Q$);NOe=r(uEe,"Data2VecAudioConfig"),uEe.forEach(t),jOe=r(rw," (Data2VecAudio model)"),rw.forEach(t),DOe=i(y),qf=n(y,"LI",{});var tw=s(qf);Wee=n(tw,"STRONG",{});var _Ee=s(Wee);GOe=r(_Ee,"data2vec-text"),_Ee.forEach(t),OOe=r(tw," \u2014 "),H$=n(tw,"A",{href:!0});var bEe=s(H$);VOe=r(bEe,"Data2VecTextConfig"),bEe.forEach(t),XOe=r(tw," (Data2VecText model)"),tw.forEach(t),zOe=i(y),Nf=n(y,"LI",{});var aw=s(Nf);Qee=n(aw,"STRONG",{});var vEe=s(Qee);WOe=r(vEe,"data2vec-vision"),vEe.forEach(t),QOe=r(aw," \u2014 "),U$=n(aw,"A",{href:!0});var FEe=s(U$);HOe=r(FEe,"Data2VecVisionConfig"),FEe.forEach(t),UOe=r(aw," (Data2VecVision model)"),aw.forEach(t),JOe=i(y),jf=n(y,"LI",{});var nw=s(jf);Hee=n(nw,"STRONG",{});var TEe=s(Hee);YOe=r(TEe,"deberta"),TEe.forEach(t),KOe=r(nw," \u2014 "),J$=n(nw,"A",{href:!0});var MEe=s(J$);ZOe=r(MEe,"DebertaConfig"),MEe.forEach(t),eVe=r(nw," (DeBERTa model)"),nw.forEach(t),oVe=i(y),Df=n(y,"LI",{});var sw=s(Df);Uee=n(sw,"STRONG",{});var EEe=s(Uee);rVe=r(EEe,"deberta-v2"),EEe.forEach(t),tVe=r(sw," \u2014 "),Y$=n(sw,"A",{href:!0});var CEe=s(Y$);aVe=r(CEe,"DebertaV2Config"),CEe.forEach(t),nVe=r(sw," (DeBERTa-v2 model)"),sw.forEach(t),sVe=i(y),Gf=n(y,"LI",{});var lw=s(Gf);Jee=n(lw,"STRONG",{});var wEe=s(Jee);lVe=r(wEe,"decision_transformer"),wEe.forEach(t),iVe=r(lw," \u2014 "),K$=n(lw,"A",{href:!0});var AEe=s(K$);dVe=r(AEe,"DecisionTransformerConfig"),AEe.forEach(t),cVe=r(lw," (Decision Transformer model)"),lw.forEach(t),fVe=i(y),Of=n(y,"LI",{});var iw=s(Of);Yee=n(iw,"STRONG",{});var yEe=s(Yee);mVe=r(yEe,"deit"),yEe.forEach(t),gVe=r(iw," \u2014 "),Z$=n(iw,"A",{href:!0});var LEe=s(Z$);hVe=r(LEe,"DeiTConfig"),LEe.forEach(t),pVe=r(iw," (DeiT model)"),iw.forEach(t),uVe=i(y),Vf=n(y,"LI",{});var dw=s(Vf);Kee=n(dw,"STRONG",{});var xEe=s(Kee);_Ve=r(xEe,"detr"),xEe.forEach(t),bVe=r(dw," \u2014 "),ek=n(dw,"A",{href:!0});var vDr=s(ek);vVe=r(vDr,"DetrConfig"),vDr.forEach(t),FVe=r(dw," (DETR model)"),dw.forEach(t),TVe=i(y),Xf=n(y,"LI",{});var $Ee=s(Xf);Zee=n($Ee,"STRONG",{});var FDr=s(Zee);MVe=r(FDr,"distilbert"),FDr.forEach(t),EVe=r($Ee," \u2014 "),ok=n($Ee,"A",{href:!0});var TDr=s(ok);CVe=r(TDr,"DistilBertConfig"),TDr.forEach(t),wVe=r($Ee," (DistilBERT model)"),$Ee.forEach(t),AVe=i(y),zf=n(y,"LI",{});var kEe=s(zf);eoe=n(kEe,"STRONG",{});var MDr=s(eoe);yVe=r(MDr,"dpr"),MDr.forEach(t),LVe=r(kEe," \u2014 "),rk=n(kEe,"A",{href:!0});var EDr=s(rk);xVe=r(EDr,"DPRConfig"),EDr.forEach(t),$Ve=r(kEe," (DPR model)"),kEe.forEach(t),kVe=i(y),Wf=n(y,"LI",{});var SEe=s(Wf);ooe=n(SEe,"STRONG",{});var CDr=s(ooe);SVe=r(CDr,"dpt"),CDr.forEach(t),RVe=r(SEe," \u2014 "),tk=n(SEe,"A",{href:!0});var wDr=s(tk);PVe=r(wDr,"DPTConfig"),wDr.forEach(t),BVe=r(SEe," (DPT model)"),SEe.forEach(t),IVe=i(y),Qf=n(y,"LI",{});var REe=s(Qf);roe=n(REe,"STRONG",{});var ADr=s(roe);qVe=r(ADr,"electra"),ADr.forEach(t),NVe=r(REe," \u2014 "),ak=n(REe,"A",{href:!0});var yDr=s(ak);jVe=r(yDr,"ElectraConfig"),yDr.forEach(t),DVe=r(REe," (ELECTRA model)"),REe.forEach(t),GVe=i(y),Hf=n(y,"LI",{});var PEe=s(Hf);toe=n(PEe,"STRONG",{});var LDr=s(toe);OVe=r(LDr,"encoder-decoder"),LDr.forEach(t),VVe=r(PEe," \u2014 "),nk=n(PEe,"A",{href:!0});var xDr=s(nk);XVe=r(xDr,"EncoderDecoderConfig"),xDr.forEach(t),zVe=r(PEe," (Encoder decoder model)"),PEe.forEach(t),WVe=i(y),Uf=n(y,"LI",{});var BEe=s(Uf);aoe=n(BEe,"STRONG",{});var $Dr=s(aoe);QVe=r($Dr,"flaubert"),$Dr.forEach(t),HVe=r(BEe," \u2014 "),sk=n(BEe,"A",{href:!0});var kDr=s(sk);UVe=r(kDr,"FlaubertConfig"),kDr.forEach(t),JVe=r(BEe," (FlauBERT model)"),BEe.forEach(t),YVe=i(y),Jf=n(y,"LI",{});var IEe=s(Jf);noe=n(IEe,"STRONG",{});var SDr=s(noe);KVe=r(SDr,"flava"),SDr.forEach(t),ZVe=r(IEe," \u2014 "),lk=n(IEe,"A",{href:!0});var RDr=s(lk);eXe=r(RDr,"FlavaConfig"),RDr.forEach(t),oXe=r(IEe," (Flava model)"),IEe.forEach(t),rXe=i(y),Yf=n(y,"LI",{});var qEe=s(Yf);soe=n(qEe,"STRONG",{});var PDr=s(soe);tXe=r(PDr,"fnet"),PDr.forEach(t),aXe=r(qEe," \u2014 "),ik=n(qEe,"A",{href:!0});var BDr=s(ik);nXe=r(BDr,"FNetConfig"),BDr.forEach(t),sXe=r(qEe," (FNet model)"),qEe.forEach(t),lXe=i(y),Kf=n(y,"LI",{});var NEe=s(Kf);loe=n(NEe,"STRONG",{});var IDr=s(loe);iXe=r(IDr,"fsmt"),IDr.forEach(t),dXe=r(NEe," \u2014 "),dk=n(NEe,"A",{href:!0});var qDr=s(dk);cXe=r(qDr,"FSMTConfig"),qDr.forEach(t),fXe=r(NEe," (FairSeq Machine-Translation model)"),NEe.forEach(t),mXe=i(y),Zf=n(y,"LI",{});var jEe=s(Zf);ioe=n(jEe,"STRONG",{});var NDr=s(ioe);gXe=r(NDr,"funnel"),NDr.forEach(t),hXe=r(jEe," \u2014 "),ck=n(jEe,"A",{href:!0});var jDr=s(ck);pXe=r(jDr,"FunnelConfig"),jDr.forEach(t),uXe=r(jEe," (Funnel Transformer model)"),jEe.forEach(t),_Xe=i(y),em=n(y,"LI",{});var DEe=s(em);doe=n(DEe,"STRONG",{});var DDr=s(doe);bXe=r(DDr,"glpn"),DDr.forEach(t),vXe=r(DEe," \u2014 "),fk=n(DEe,"A",{href:!0});var GDr=s(fk);FXe=r(GDr,"GLPNConfig"),GDr.forEach(t),TXe=r(DEe," (GLPN model)"),DEe.forEach(t),MXe=i(y),om=n(y,"LI",{});var GEe=s(om);coe=n(GEe,"STRONG",{});var ODr=s(coe);EXe=r(ODr,"gpt2"),ODr.forEach(t),CXe=r(GEe," \u2014 "),mk=n(GEe,"A",{href:!0});var VDr=s(mk);wXe=r(VDr,"GPT2Config"),VDr.forEach(t),AXe=r(GEe," (OpenAI GPT-2 model)"),GEe.forEach(t),yXe=i(y),rm=n(y,"LI",{});var OEe=s(rm);foe=n(OEe,"STRONG",{});var XDr=s(foe);LXe=r(XDr,"gpt_neo"),XDr.forEach(t),xXe=r(OEe," \u2014 "),gk=n(OEe,"A",{href:!0});var zDr=s(gk);$Xe=r(zDr,"GPTNeoConfig"),zDr.forEach(t),kXe=r(OEe," (GPT Neo model)"),OEe.forEach(t),SXe=i(y),tm=n(y,"LI",{});var VEe=s(tm);moe=n(VEe,"STRONG",{});var WDr=s(moe);RXe=r(WDr,"gptj"),WDr.forEach(t),PXe=r(VEe," \u2014 "),hk=n(VEe,"A",{href:!0});var QDr=s(hk);BXe=r(QDr,"GPTJConfig"),QDr.forEach(t),IXe=r(VEe," (GPT-J model)"),VEe.forEach(t),qXe=i(y),am=n(y,"LI",{});var XEe=s(am);goe=n(XEe,"STRONG",{});var HDr=s(goe);NXe=r(HDr,"hubert"),HDr.forEach(t),jXe=r(XEe," \u2014 "),pk=n(XEe,"A",{href:!0});var UDr=s(pk);DXe=r(UDr,"HubertConfig"),UDr.forEach(t),GXe=r(XEe," (Hubert model)"),XEe.forEach(t),OXe=i(y),nm=n(y,"LI",{});var zEe=s(nm);hoe=n(zEe,"STRONG",{});var JDr=s(hoe);VXe=r(JDr,"ibert"),JDr.forEach(t),XXe=r(zEe," \u2014 "),uk=n(zEe,"A",{href:!0});var YDr=s(uk);zXe=r(YDr,"IBertConfig"),YDr.forEach(t),WXe=r(zEe," (I-BERT model)"),zEe.forEach(t),QXe=i(y),sm=n(y,"LI",{});var WEe=s(sm);poe=n(WEe,"STRONG",{});var KDr=s(poe);HXe=r(KDr,"imagegpt"),KDr.forEach(t),UXe=r(WEe," \u2014 "),_k=n(WEe,"A",{href:!0});var ZDr=s(_k);JXe=r(ZDr,"ImageGPTConfig"),ZDr.forEach(t),YXe=r(WEe," (ImageGPT model)"),WEe.forEach(t),KXe=i(y),lm=n(y,"LI",{});var QEe=s(lm);uoe=n(QEe,"STRONG",{});var eGr=s(uoe);ZXe=r(eGr,"layoutlm"),eGr.forEach(t),eze=r(QEe," \u2014 "),bk=n(QEe,"A",{href:!0});var oGr=s(bk);oze=r(oGr,"LayoutLMConfig"),oGr.forEach(t),rze=r(QEe," (LayoutLM model)"),QEe.forEach(t),tze=i(y),im=n(y,"LI",{});var HEe=s(im);_oe=n(HEe,"STRONG",{});var rGr=s(_oe);aze=r(rGr,"layoutlmv2"),rGr.forEach(t),nze=r(HEe," \u2014 "),vk=n(HEe,"A",{href:!0});var tGr=s(vk);sze=r(tGr,"LayoutLMv2Config"),tGr.forEach(t),lze=r(HEe," (LayoutLMv2 model)"),HEe.forEach(t),ize=i(y),dm=n(y,"LI",{});var UEe=s(dm);boe=n(UEe,"STRONG",{});var aGr=s(boe);dze=r(aGr,"led"),aGr.forEach(t),cze=r(UEe," \u2014 "),Fk=n(UEe,"A",{href:!0});var nGr=s(Fk);fze=r(nGr,"LEDConfig"),nGr.forEach(t),mze=r(UEe," (LED model)"),UEe.forEach(t),gze=i(y),cm=n(y,"LI",{});var JEe=s(cm);voe=n(JEe,"STRONG",{});var sGr=s(voe);hze=r(sGr,"longformer"),sGr.forEach(t),pze=r(JEe," \u2014 "),Tk=n(JEe,"A",{href:!0});var lGr=s(Tk);uze=r(lGr,"LongformerConfig"),lGr.forEach(t),_ze=r(JEe," (Longformer model)"),JEe.forEach(t),bze=i(y),fm=n(y,"LI",{});var YEe=s(fm);Foe=n(YEe,"STRONG",{});var iGr=s(Foe);vze=r(iGr,"luke"),iGr.forEach(t),Fze=r(YEe," \u2014 "),Mk=n(YEe,"A",{href:!0});var dGr=s(Mk);Tze=r(dGr,"LukeConfig"),dGr.forEach(t),Mze=r(YEe," (LUKE model)"),YEe.forEach(t),Eze=i(y),mm=n(y,"LI",{});var KEe=s(mm);Toe=n(KEe,"STRONG",{});var cGr=s(Toe);Cze=r(cGr,"lxmert"),cGr.forEach(t),wze=r(KEe," \u2014 "),Ek=n(KEe,"A",{href:!0});var fGr=s(Ek);Aze=r(fGr,"LxmertConfig"),fGr.forEach(t),yze=r(KEe," (LXMERT model)"),KEe.forEach(t),Lze=i(y),gm=n(y,"LI",{});var ZEe=s(gm);Moe=n(ZEe,"STRONG",{});var mGr=s(Moe);xze=r(mGr,"m2m_100"),mGr.forEach(t),$ze=r(ZEe," \u2014 "),Ck=n(ZEe,"A",{href:!0});var gGr=s(Ck);kze=r(gGr,"M2M100Config"),gGr.forEach(t),Sze=r(ZEe," (M2M100 model)"),ZEe.forEach(t),Rze=i(y),hm=n(y,"LI",{});var eCe=s(hm);Eoe=n(eCe,"STRONG",{});var hGr=s(Eoe);Pze=r(hGr,"marian"),hGr.forEach(t),Bze=r(eCe," \u2014 "),wk=n(eCe,"A",{href:!0});var pGr=s(wk);Ize=r(pGr,"MarianConfig"),pGr.forEach(t),qze=r(eCe," (Marian model)"),eCe.forEach(t),Nze=i(y),pm=n(y,"LI",{});var oCe=s(pm);Coe=n(oCe,"STRONG",{});var uGr=s(Coe);jze=r(uGr,"maskformer"),uGr.forEach(t),Dze=r(oCe," \u2014 "),Ak=n(oCe,"A",{href:!0});var _Gr=s(Ak);Gze=r(_Gr,"MaskFormerConfig"),_Gr.forEach(t),Oze=r(oCe," (MaskFormer model)"),oCe.forEach(t),Vze=i(y),um=n(y,"LI",{});var rCe=s(um);woe=n(rCe,"STRONG",{});var bGr=s(woe);Xze=r(bGr,"mbart"),bGr.forEach(t),zze=r(rCe," \u2014 "),yk=n(rCe,"A",{href:!0});var vGr=s(yk);Wze=r(vGr,"MBartConfig"),vGr.forEach(t),Qze=r(rCe," (mBART model)"),rCe.forEach(t),Hze=i(y),_m=n(y,"LI",{});var tCe=s(_m);Aoe=n(tCe,"STRONG",{});var FGr=s(Aoe);Uze=r(FGr,"megatron-bert"),FGr.forEach(t),Jze=r(tCe," \u2014 "),Lk=n(tCe,"A",{href:!0});var TGr=s(Lk);Yze=r(TGr,"MegatronBertConfig"),TGr.forEach(t),Kze=r(tCe," (MegatronBert model)"),tCe.forEach(t),Zze=i(y),bm=n(y,"LI",{});var aCe=s(bm);yoe=n(aCe,"STRONG",{});var MGr=s(yoe);eWe=r(MGr,"mobilebert"),MGr.forEach(t),oWe=r(aCe," \u2014 "),xk=n(aCe,"A",{href:!0});var EGr=s(xk);rWe=r(EGr,"MobileBertConfig"),EGr.forEach(t),tWe=r(aCe," (MobileBERT model)"),aCe.forEach(t),aWe=i(y),vm=n(y,"LI",{});var nCe=s(vm);Loe=n(nCe,"STRONG",{});var CGr=s(Loe);nWe=r(CGr,"mpnet"),CGr.forEach(t),sWe=r(nCe," \u2014 "),$k=n(nCe,"A",{href:!0});var wGr=s($k);lWe=r(wGr,"MPNetConfig"),wGr.forEach(t),iWe=r(nCe," (MPNet model)"),nCe.forEach(t),dWe=i(y),Fm=n(y,"LI",{});var sCe=s(Fm);xoe=n(sCe,"STRONG",{});var AGr=s(xoe);cWe=r(AGr,"mt5"),AGr.forEach(t),fWe=r(sCe," \u2014 "),kk=n(sCe,"A",{href:!0});var yGr=s(kk);mWe=r(yGr,"MT5Config"),yGr.forEach(t),gWe=r(sCe," (mT5 model)"),sCe.forEach(t),hWe=i(y),Tm=n(y,"LI",{});var lCe=s(Tm);$oe=n(lCe,"STRONG",{});var LGr=s($oe);pWe=r(LGr,"nystromformer"),LGr.forEach(t),uWe=r(lCe," \u2014 "),Sk=n(lCe,"A",{href:!0});var xGr=s(Sk);_We=r(xGr,"NystromformerConfig"),xGr.forEach(t),bWe=r(lCe," (Nystromformer model)"),lCe.forEach(t),vWe=i(y),Mm=n(y,"LI",{});var iCe=s(Mm);koe=n(iCe,"STRONG",{});var $Gr=s(koe);FWe=r($Gr,"openai-gpt"),$Gr.forEach(t),TWe=r(iCe," \u2014 "),Rk=n(iCe,"A",{href:!0});var kGr=s(Rk);MWe=r(kGr,"OpenAIGPTConfig"),kGr.forEach(t),EWe=r(iCe," (OpenAI GPT model)"),iCe.forEach(t),CWe=i(y),Em=n(y,"LI",{});var dCe=s(Em);Soe=n(dCe,"STRONG",{});var SGr=s(Soe);wWe=r(SGr,"opt"),SGr.forEach(t),AWe=r(dCe," \u2014 "),Pk=n(dCe,"A",{href:!0});var RGr=s(Pk);yWe=r(RGr,"OPTConfig"),RGr.forEach(t),LWe=r(dCe," (OPT model)"),dCe.forEach(t),xWe=i(y),Cm=n(y,"LI",{});var cCe=s(Cm);Roe=n(cCe,"STRONG",{});var PGr=s(Roe);$We=r(PGr,"pegasus"),PGr.forEach(t),kWe=r(cCe," \u2014 "),Bk=n(cCe,"A",{href:!0});var BGr=s(Bk);SWe=r(BGr,"PegasusConfig"),BGr.forEach(t),RWe=r(cCe," (Pegasus model)"),cCe.forEach(t),PWe=i(y),wm=n(y,"LI",{});var fCe=s(wm);Poe=n(fCe,"STRONG",{});var IGr=s(Poe);BWe=r(IGr,"perceiver"),IGr.forEach(t),IWe=r(fCe," \u2014 "),Ik=n(fCe,"A",{href:!0});var qGr=s(Ik);qWe=r(qGr,"PerceiverConfig"),qGr.forEach(t),NWe=r(fCe," (Perceiver model)"),fCe.forEach(t),jWe=i(y),Am=n(y,"LI",{});var mCe=s(Am);Boe=n(mCe,"STRONG",{});var NGr=s(Boe);DWe=r(NGr,"plbart"),NGr.forEach(t),GWe=r(mCe," \u2014 "),qk=n(mCe,"A",{href:!0});var jGr=s(qk);OWe=r(jGr,"PLBartConfig"),jGr.forEach(t),VWe=r(mCe," (PLBart model)"),mCe.forEach(t),XWe=i(y),ym=n(y,"LI",{});var gCe=s(ym);Ioe=n(gCe,"STRONG",{});var DGr=s(Ioe);zWe=r(DGr,"poolformer"),DGr.forEach(t),WWe=r(gCe," \u2014 "),Nk=n(gCe,"A",{href:!0});var GGr=s(Nk);QWe=r(GGr,"PoolFormerConfig"),GGr.forEach(t),HWe=r(gCe," (PoolFormer model)"),gCe.forEach(t),UWe=i(y),Lm=n(y,"LI",{});var hCe=s(Lm);qoe=n(hCe,"STRONG",{});var OGr=s(qoe);JWe=r(OGr,"prophetnet"),OGr.forEach(t),YWe=r(hCe," \u2014 "),jk=n(hCe,"A",{href:!0});var VGr=s(jk);KWe=r(VGr,"ProphetNetConfig"),VGr.forEach(t),ZWe=r(hCe," (ProphetNet model)"),hCe.forEach(t),eQe=i(y),xm=n(y,"LI",{});var pCe=s(xm);Noe=n(pCe,"STRONG",{});var XGr=s(Noe);oQe=r(XGr,"qdqbert"),XGr.forEach(t),rQe=r(pCe," \u2014 "),Dk=n(pCe,"A",{href:!0});var zGr=s(Dk);tQe=r(zGr,"QDQBertConfig"),zGr.forEach(t),aQe=r(pCe," (QDQBert model)"),pCe.forEach(t),nQe=i(y),$m=n(y,"LI",{});var uCe=s($m);joe=n(uCe,"STRONG",{});var WGr=s(joe);sQe=r(WGr,"rag"),WGr.forEach(t),lQe=r(uCe," \u2014 "),Gk=n(uCe,"A",{href:!0});var QGr=s(Gk);iQe=r(QGr,"RagConfig"),QGr.forEach(t),dQe=r(uCe," (RAG model)"),uCe.forEach(t),cQe=i(y),km=n(y,"LI",{});var _Ce=s(km);Doe=n(_Ce,"STRONG",{});var HGr=s(Doe);fQe=r(HGr,"realm"),HGr.forEach(t),mQe=r(_Ce," \u2014 "),Ok=n(_Ce,"A",{href:!0});var UGr=s(Ok);gQe=r(UGr,"RealmConfig"),UGr.forEach(t),hQe=r(_Ce," (Realm model)"),_Ce.forEach(t),pQe=i(y),Sm=n(y,"LI",{});var bCe=s(Sm);Goe=n(bCe,"STRONG",{});var JGr=s(Goe);uQe=r(JGr,"reformer"),JGr.forEach(t),_Qe=r(bCe," \u2014 "),Vk=n(bCe,"A",{href:!0});var YGr=s(Vk);bQe=r(YGr,"ReformerConfig"),YGr.forEach(t),vQe=r(bCe," (Reformer model)"),bCe.forEach(t),FQe=i(y),Rm=n(y,"LI",{});var vCe=s(Rm);Ooe=n(vCe,"STRONG",{});var KGr=s(Ooe);TQe=r(KGr,"regnet"),KGr.forEach(t),MQe=r(vCe," \u2014 "),Xk=n(vCe,"A",{href:!0});var ZGr=s(Xk);EQe=r(ZGr,"RegNetConfig"),ZGr.forEach(t),CQe=r(vCe," (RegNet model)"),vCe.forEach(t),wQe=i(y),Pm=n(y,"LI",{});var FCe=s(Pm);Voe=n(FCe,"STRONG",{});var eOr=s(Voe);AQe=r(eOr,"rembert"),eOr.forEach(t),yQe=r(FCe," \u2014 "),zk=n(FCe,"A",{href:!0});var oOr=s(zk);LQe=r(oOr,"RemBertConfig"),oOr.forEach(t),xQe=r(FCe," (RemBERT model)"),FCe.forEach(t),$Qe=i(y),Bm=n(y,"LI",{});var TCe=s(Bm);Xoe=n(TCe,"STRONG",{});var rOr=s(Xoe);kQe=r(rOr,"resnet"),rOr.forEach(t),SQe=r(TCe," \u2014 "),Wk=n(TCe,"A",{href:!0});var tOr=s(Wk);RQe=r(tOr,"ResNetConfig"),tOr.forEach(t),PQe=r(TCe," (ResNet model)"),TCe.forEach(t),BQe=i(y),Im=n(y,"LI",{});var MCe=s(Im);zoe=n(MCe,"STRONG",{});var aOr=s(zoe);IQe=r(aOr,"retribert"),aOr.forEach(t),qQe=r(MCe," \u2014 "),Qk=n(MCe,"A",{href:!0});var nOr=s(Qk);NQe=r(nOr,"RetriBertConfig"),nOr.forEach(t),jQe=r(MCe," (RetriBERT model)"),MCe.forEach(t),DQe=i(y),qm=n(y,"LI",{});var ECe=s(qm);Woe=n(ECe,"STRONG",{});var sOr=s(Woe);GQe=r(sOr,"roberta"),sOr.forEach(t),OQe=r(ECe," \u2014 "),Hk=n(ECe,"A",{href:!0});var lOr=s(Hk);VQe=r(lOr,"RobertaConfig"),lOr.forEach(t),XQe=r(ECe," (RoBERTa model)"),ECe.forEach(t),zQe=i(y),Nm=n(y,"LI",{});var CCe=s(Nm);Qoe=n(CCe,"STRONG",{});var iOr=s(Qoe);WQe=r(iOr,"roformer"),iOr.forEach(t),QQe=r(CCe," \u2014 "),Uk=n(CCe,"A",{href:!0});var dOr=s(Uk);HQe=r(dOr,"RoFormerConfig"),dOr.forEach(t),UQe=r(CCe," (RoFormer model)"),CCe.forEach(t),JQe=i(y),jm=n(y,"LI",{});var wCe=s(jm);Hoe=n(wCe,"STRONG",{});var cOr=s(Hoe);YQe=r(cOr,"segformer"),cOr.forEach(t),KQe=r(wCe," \u2014 "),Jk=n(wCe,"A",{href:!0});var fOr=s(Jk);ZQe=r(fOr,"SegformerConfig"),fOr.forEach(t),eHe=r(wCe," (SegFormer model)"),wCe.forEach(t),oHe=i(y),Dm=n(y,"LI",{});var ACe=s(Dm);Uoe=n(ACe,"STRONG",{});var mOr=s(Uoe);rHe=r(mOr,"sew"),mOr.forEach(t),tHe=r(ACe," \u2014 "),Yk=n(ACe,"A",{href:!0});var gOr=s(Yk);aHe=r(gOr,"SEWConfig"),gOr.forEach(t),nHe=r(ACe," (SEW model)"),ACe.forEach(t),sHe=i(y),Gm=n(y,"LI",{});var yCe=s(Gm);Joe=n(yCe,"STRONG",{});var hOr=s(Joe);lHe=r(hOr,"sew-d"),hOr.forEach(t),iHe=r(yCe," \u2014 "),Kk=n(yCe,"A",{href:!0});var pOr=s(Kk);dHe=r(pOr,"SEWDConfig"),pOr.forEach(t),cHe=r(yCe," (SEW-D model)"),yCe.forEach(t),fHe=i(y),Om=n(y,"LI",{});var LCe=s(Om);Yoe=n(LCe,"STRONG",{});var uOr=s(Yoe);mHe=r(uOr,"speech-encoder-decoder"),uOr.forEach(t),gHe=r(LCe," \u2014 "),Zk=n(LCe,"A",{href:!0});var _Or=s(Zk);hHe=r(_Or,"SpeechEncoderDecoderConfig"),_Or.forEach(t),pHe=r(LCe," (Speech Encoder decoder model)"),LCe.forEach(t),uHe=i(y),Vm=n(y,"LI",{});var xCe=s(Vm);Koe=n(xCe,"STRONG",{});var bOr=s(Koe);_He=r(bOr,"speech_to_text"),bOr.forEach(t),bHe=r(xCe," \u2014 "),eS=n(xCe,"A",{href:!0});var vOr=s(eS);vHe=r(vOr,"Speech2TextConfig"),vOr.forEach(t),FHe=r(xCe," (Speech2Text model)"),xCe.forEach(t),THe=i(y),Xm=n(y,"LI",{});var $Ce=s(Xm);Zoe=n($Ce,"STRONG",{});var FOr=s(Zoe);MHe=r(FOr,"speech_to_text_2"),FOr.forEach(t),EHe=r($Ce," \u2014 "),oS=n($Ce,"A",{href:!0});var TOr=s(oS);CHe=r(TOr,"Speech2Text2Config"),TOr.forEach(t),wHe=r($Ce," (Speech2Text2 model)"),$Ce.forEach(t),AHe=i(y),zm=n(y,"LI",{});var kCe=s(zm);ere=n(kCe,"STRONG",{});var MOr=s(ere);yHe=r(MOr,"splinter"),MOr.forEach(t),LHe=r(kCe," \u2014 "),rS=n(kCe,"A",{href:!0});var EOr=s(rS);xHe=r(EOr,"SplinterConfig"),EOr.forEach(t),$He=r(kCe," (Splinter model)"),kCe.forEach(t),kHe=i(y),Wm=n(y,"LI",{});var SCe=s(Wm);ore=n(SCe,"STRONG",{});var COr=s(ore);SHe=r(COr,"squeezebert"),COr.forEach(t),RHe=r(SCe," \u2014 "),tS=n(SCe,"A",{href:!0});var wOr=s(tS);PHe=r(wOr,"SqueezeBertConfig"),wOr.forEach(t),BHe=r(SCe," (SqueezeBERT model)"),SCe.forEach(t),IHe=i(y),Qm=n(y,"LI",{});var RCe=s(Qm);rre=n(RCe,"STRONG",{});var AOr=s(rre);qHe=r(AOr,"swin"),AOr.forEach(t),NHe=r(RCe," \u2014 "),aS=n(RCe,"A",{href:!0});var yOr=s(aS);jHe=r(yOr,"SwinConfig"),yOr.forEach(t),DHe=r(RCe," (Swin model)"),RCe.forEach(t),GHe=i(y),Hm=n(y,"LI",{});var PCe=s(Hm);tre=n(PCe,"STRONG",{});var LOr=s(tre);OHe=r(LOr,"t5"),LOr.forEach(t),VHe=r(PCe," \u2014 "),nS=n(PCe,"A",{href:!0});var xOr=s(nS);XHe=r(xOr,"T5Config"),xOr.forEach(t),zHe=r(PCe," (T5 model)"),PCe.forEach(t),WHe=i(y),Um=n(y,"LI",{});var BCe=s(Um);are=n(BCe,"STRONG",{});var $Or=s(are);QHe=r($Or,"tapas"),$Or.forEach(t),HHe=r(BCe," \u2014 "),sS=n(BCe,"A",{href:!0});var kOr=s(sS);UHe=r(kOr,"TapasConfig"),kOr.forEach(t),JHe=r(BCe," (TAPAS model)"),BCe.forEach(t),YHe=i(y),Jm=n(y,"LI",{});var ICe=s(Jm);nre=n(ICe,"STRONG",{});var SOr=s(nre);KHe=r(SOr,"transfo-xl"),SOr.forEach(t),ZHe=r(ICe," \u2014 "),lS=n(ICe,"A",{href:!0});var ROr=s(lS);eUe=r(ROr,"TransfoXLConfig"),ROr.forEach(t),oUe=r(ICe," (Transformer-XL model)"),ICe.forEach(t),rUe=i(y),Ym=n(y,"LI",{});var qCe=s(Ym);sre=n(qCe,"STRONG",{});var POr=s(sre);tUe=r(POr,"trocr"),POr.forEach(t),aUe=r(qCe," \u2014 "),iS=n(qCe,"A",{href:!0});var BOr=s(iS);nUe=r(BOr,"TrOCRConfig"),BOr.forEach(t),sUe=r(qCe," (TrOCR model)"),qCe.forEach(t),lUe=i(y),Km=n(y,"LI",{});var NCe=s(Km);lre=n(NCe,"STRONG",{});var IOr=s(lre);iUe=r(IOr,"unispeech"),IOr.forEach(t),dUe=r(NCe," \u2014 "),dS=n(NCe,"A",{href:!0});var qOr=s(dS);cUe=r(qOr,"UniSpeechConfig"),qOr.forEach(t),fUe=r(NCe," (UniSpeech model)"),NCe.forEach(t),mUe=i(y),Zm=n(y,"LI",{});var jCe=s(Zm);ire=n(jCe,"STRONG",{});var NOr=s(ire);gUe=r(NOr,"unispeech-sat"),NOr.forEach(t),hUe=r(jCe," \u2014 "),cS=n(jCe,"A",{href:!0});var jOr=s(cS);pUe=r(jOr,"UniSpeechSatConfig"),jOr.forEach(t),uUe=r(jCe," (UniSpeechSat model)"),jCe.forEach(t),_Ue=i(y),eg=n(y,"LI",{});var DCe=s(eg);dre=n(DCe,"STRONG",{});var DOr=s(dre);bUe=r(DOr,"van"),DOr.forEach(t),vUe=r(DCe," \u2014 "),fS=n(DCe,"A",{href:!0});var GOr=s(fS);FUe=r(GOr,"VanConfig"),GOr.forEach(t),TUe=r(DCe," (VAN model)"),DCe.forEach(t),MUe=i(y),og=n(y,"LI",{});var GCe=s(og);cre=n(GCe,"STRONG",{});var OOr=s(cre);EUe=r(OOr,"vilt"),OOr.forEach(t),CUe=r(GCe," \u2014 "),mS=n(GCe,"A",{href:!0});var VOr=s(mS);wUe=r(VOr,"ViltConfig"),VOr.forEach(t),AUe=r(GCe," (ViLT model)"),GCe.forEach(t),yUe=i(y),rg=n(y,"LI",{});var OCe=s(rg);fre=n(OCe,"STRONG",{});var XOr=s(fre);LUe=r(XOr,"vision-encoder-decoder"),XOr.forEach(t),xUe=r(OCe," \u2014 "),gS=n(OCe,"A",{href:!0});var zOr=s(gS);$Ue=r(zOr,"VisionEncoderDecoderConfig"),zOr.forEach(t),kUe=r(OCe," (Vision Encoder decoder model)"),OCe.forEach(t),SUe=i(y),tg=n(y,"LI",{});var VCe=s(tg);mre=n(VCe,"STRONG",{});var WOr=s(mre);RUe=r(WOr,"vision-text-dual-encoder"),WOr.forEach(t),PUe=r(VCe," \u2014 "),hS=n(VCe,"A",{href:!0});var QOr=s(hS);BUe=r(QOr,"VisionTextDualEncoderConfig"),QOr.forEach(t),IUe=r(VCe," (VisionTextDualEncoder model)"),VCe.forEach(t),qUe=i(y),ag=n(y,"LI",{});var XCe=s(ag);gre=n(XCe,"STRONG",{});var HOr=s(gre);NUe=r(HOr,"visual_bert"),HOr.forEach(t),jUe=r(XCe," \u2014 "),pS=n(XCe,"A",{href:!0});var UOr=s(pS);DUe=r(UOr,"VisualBertConfig"),UOr.forEach(t),GUe=r(XCe," (VisualBert model)"),XCe.forEach(t),OUe=i(y),ng=n(y,"LI",{});var zCe=s(ng);hre=n(zCe,"STRONG",{});var JOr=s(hre);VUe=r(JOr,"vit"),JOr.forEach(t),XUe=r(zCe," \u2014 "),uS=n(zCe,"A",{href:!0});var YOr=s(uS);zUe=r(YOr,"ViTConfig"),YOr.forEach(t),WUe=r(zCe," (ViT model)"),zCe.forEach(t),QUe=i(y),sg=n(y,"LI",{});var WCe=s(sg);pre=n(WCe,"STRONG",{});var KOr=s(pre);HUe=r(KOr,"vit_mae"),KOr.forEach(t),UUe=r(WCe," \u2014 "),_S=n(WCe,"A",{href:!0});var ZOr=s(_S);JUe=r(ZOr,"ViTMAEConfig"),ZOr.forEach(t),YUe=r(WCe," (ViTMAE model)"),WCe.forEach(t),KUe=i(y),lg=n(y,"LI",{});var QCe=s(lg);ure=n(QCe,"STRONG",{});var eVr=s(ure);ZUe=r(eVr,"wav2vec2"),eVr.forEach(t),eJe=r(QCe," \u2014 "),bS=n(QCe,"A",{href:!0});var oVr=s(bS);oJe=r(oVr,"Wav2Vec2Config"),oVr.forEach(t),rJe=r(QCe," (Wav2Vec2 model)"),QCe.forEach(t),tJe=i(y),ig=n(y,"LI",{});var HCe=s(ig);_re=n(HCe,"STRONG",{});var rVr=s(_re);aJe=r(rVr,"wav2vec2-conformer"),rVr.forEach(t),nJe=r(HCe," \u2014 "),vS=n(HCe,"A",{href:!0});var tVr=s(vS);sJe=r(tVr,"Wav2Vec2ConformerConfig"),tVr.forEach(t),lJe=r(HCe," (Wav2Vec2-Conformer model)"),HCe.forEach(t),iJe=i(y),dg=n(y,"LI",{});var UCe=s(dg);bre=n(UCe,"STRONG",{});var aVr=s(bre);dJe=r(aVr,"wavlm"),aVr.forEach(t),cJe=r(UCe," \u2014 "),FS=n(UCe,"A",{href:!0});var nVr=s(FS);fJe=r(nVr,"WavLMConfig"),nVr.forEach(t),mJe=r(UCe," (WavLM model)"),UCe.forEach(t),gJe=i(y),cg=n(y,"LI",{});var JCe=s(cg);vre=n(JCe,"STRONG",{});var sVr=s(vre);hJe=r(sVr,"xglm"),sVr.forEach(t),pJe=r(JCe," \u2014 "),TS=n(JCe,"A",{href:!0});var lVr=s(TS);uJe=r(lVr,"XGLMConfig"),lVr.forEach(t),_Je=r(JCe," (XGLM model)"),JCe.forEach(t),bJe=i(y),fg=n(y,"LI",{});var YCe=s(fg);Fre=n(YCe,"STRONG",{});var iVr=s(Fre);vJe=r(iVr,"xlm"),iVr.forEach(t),FJe=r(YCe," \u2014 "),MS=n(YCe,"A",{href:!0});var dVr=s(MS);TJe=r(dVr,"XLMConfig"),dVr.forEach(t),MJe=r(YCe," (XLM model)"),YCe.forEach(t),EJe=i(y),mg=n(y,"LI",{});var KCe=s(mg);Tre=n(KCe,"STRONG",{});var cVr=s(Tre);CJe=r(cVr,"xlm-prophetnet"),cVr.forEach(t),wJe=r(KCe," \u2014 "),ES=n(KCe,"A",{href:!0});var fVr=s(ES);AJe=r(fVr,"XLMProphetNetConfig"),fVr.forEach(t),yJe=r(KCe," (XLMProphetNet model)"),KCe.forEach(t),LJe=i(y),gg=n(y,"LI",{});var ZCe=s(gg);Mre=n(ZCe,"STRONG",{});var mVr=s(Mre);xJe=r(mVr,"xlm-roberta"),mVr.forEach(t),$Je=r(ZCe," \u2014 "),CS=n(ZCe,"A",{href:!0});var gVr=s(CS);kJe=r(gVr,"XLMRobertaConfig"),gVr.forEach(t),SJe=r(ZCe," (XLM-RoBERTa model)"),ZCe.forEach(t),RJe=i(y),hg=n(y,"LI",{});var e5e=s(hg);Ere=n(e5e,"STRONG",{});var hVr=s(Ere);PJe=r(hVr,"xlm-roberta-xl"),hVr.forEach(t),BJe=r(e5e," \u2014 "),wS=n(e5e,"A",{href:!0});var pVr=s(wS);IJe=r(pVr,"XLMRobertaXLConfig"),pVr.forEach(t),qJe=r(e5e," (XLM-RoBERTa-XL model)"),e5e.forEach(t),NJe=i(y),pg=n(y,"LI",{});var o5e=s(pg);Cre=n(o5e,"STRONG",{});var uVr=s(Cre);jJe=r(uVr,"xlnet"),uVr.forEach(t),DJe=r(o5e," \u2014 "),AS=n(o5e,"A",{href:!0});var _Vr=s(AS);GJe=r(_Vr,"XLNetConfig"),_Vr.forEach(t),OJe=r(o5e," (XLNet model)"),o5e.forEach(t),VJe=i(y),ug=n(y,"LI",{});var r5e=s(ug);wre=n(r5e,"STRONG",{});var bVr=s(wre);XJe=r(bVr,"yolos"),bVr.forEach(t),zJe=r(r5e," \u2014 "),yS=n(r5e,"A",{href:!0});var vVr=s(yS);WJe=r(vVr,"YolosConfig"),vVr.forEach(t),QJe=r(r5e," (YOLOS model)"),r5e.forEach(t),HJe=i(y),_g=n(y,"LI",{});var t5e=s(_g);Are=n(t5e,"STRONG",{});var FVr=s(Are);UJe=r(FVr,"yoso"),FVr.forEach(t),JJe=r(t5e," \u2014 "),LS=n(t5e,"A",{href:!0});var TVr=s(LS);YJe=r(TVr,"YosoConfig"),TVr.forEach(t),KJe=r(t5e," (YOSO model)"),t5e.forEach(t),y.forEach(t),ZJe=i(ot),T(bg.$$.fragment,ot),ot.forEach(t),eYe=i(et),vg=n(et,"DIV",{class:!0});var RNe=s(vg);T(p6.$$.fragment,RNe),oYe=i(RNe),yre=n(RNe,"P",{});var MVr=s(yre);rYe=r(MVr,"Register a new configuration for this class."),MVr.forEach(t),RNe.forEach(t),et.forEach(t),IIe=i(f),Fi=n(f,"H2",{class:!0});var PNe=s(Fi);Fg=n(PNe,"A",{id:!0,class:!0,href:!0});var EVr=s(Fg);Lre=n(EVr,"SPAN",{});var CVr=s(Lre);T(u6.$$.fragment,CVr),CVr.forEach(t),EVr.forEach(t),tYe=i(PNe),xre=n(PNe,"SPAN",{});var wVr=s(xre);aYe=r(wVr,"AutoTokenizer"),wVr.forEach(t),PNe.forEach(t),qIe=i(f),wo=n(f,"DIV",{class:!0});var Is=s(wo);T(_6.$$.fragment,Is),nYe=i(Is),b6=n(Is,"P",{});var BNe=s(b6);sYe=r(BNe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),xS=n(BNe,"A",{href:!0});var AVr=s(xS);lYe=r(AVr,"AutoTokenizer.from_pretrained()"),AVr.forEach(t),iYe=r(BNe," class method."),BNe.forEach(t),dYe=i(Is),v6=n(Is,"P",{});var INe=s(v6);cYe=r(INe,"This class cannot be instantiated directly using "),$re=n(INe,"CODE",{});var yVr=s($re);fYe=r(yVr,"__init__()"),yVr.forEach(t),mYe=r(INe," (throws an error)."),INe.forEach(t),gYe=i(Is),Cr=n(Is,"DIV",{class:!0});var qs=s(Cr);T(F6.$$.fragment,qs),hYe=i(qs),kre=n(qs,"P",{});var LVr=s(kre);pYe=r(LVr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),LVr.forEach(t),uYe=i(qs),Aa=n(qs,"P",{});var cw=s(Aa);_Ye=r(cw,"The tokenizer class to instantiate is selected based on the "),Sre=n(cw,"CODE",{});var xVr=s(Sre);bYe=r(xVr,"model_type"),xVr.forEach(t),vYe=r(cw,` property of the config object (either
passed as an argument or loaded from `),Rre=n(cw,"CODE",{});var $Vr=s(Rre);FYe=r($Vr,"pretrained_model_name_or_path"),$Vr.forEach(t),TYe=r(cw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pre=n(cw,"CODE",{});var kVr=s(Pre);MYe=r(kVr,"pretrained_model_name_or_path"),kVr.forEach(t),EYe=r(cw,":"),cw.forEach(t),CYe=i(qs),k=n(qs,"UL",{});var S=s(k);Sn=n(S,"LI",{});var T9=s(Sn);Bre=n(T9,"STRONG",{});var SVr=s(Bre);wYe=r(SVr,"albert"),SVr.forEach(t),AYe=r(T9," \u2014 "),$S=n(T9,"A",{href:!0});var RVr=s($S);yYe=r(RVr,"AlbertTokenizer"),RVr.forEach(t),LYe=r(T9," or "),kS=n(T9,"A",{href:!0});var PVr=s(kS);xYe=r(PVr,"AlbertTokenizerFast"),PVr.forEach(t),$Ye=r(T9," (ALBERT model)"),T9.forEach(t),kYe=i(S),Rn=n(S,"LI",{});var M9=s(Rn);Ire=n(M9,"STRONG",{});var BVr=s(Ire);SYe=r(BVr,"bart"),BVr.forEach(t),RYe=r(M9," \u2014 "),SS=n(M9,"A",{href:!0});var IVr=s(SS);PYe=r(IVr,"BartTokenizer"),IVr.forEach(t),BYe=r(M9," or "),RS=n(M9,"A",{href:!0});var qVr=s(RS);IYe=r(qVr,"BartTokenizerFast"),qVr.forEach(t),qYe=r(M9," (BART model)"),M9.forEach(t),NYe=i(S),Pn=n(S,"LI",{});var E9=s(Pn);qre=n(E9,"STRONG",{});var NVr=s(qre);jYe=r(NVr,"barthez"),NVr.forEach(t),DYe=r(E9," \u2014 "),PS=n(E9,"A",{href:!0});var jVr=s(PS);GYe=r(jVr,"BarthezTokenizer"),jVr.forEach(t),OYe=r(E9," or "),BS=n(E9,"A",{href:!0});var DVr=s(BS);VYe=r(DVr,"BarthezTokenizerFast"),DVr.forEach(t),XYe=r(E9," (BARThez model)"),E9.forEach(t),zYe=i(S),Tg=n(S,"LI",{});var a5e=s(Tg);Nre=n(a5e,"STRONG",{});var GVr=s(Nre);WYe=r(GVr,"bartpho"),GVr.forEach(t),QYe=r(a5e," \u2014 "),IS=n(a5e,"A",{href:!0});var OVr=s(IS);HYe=r(OVr,"BartphoTokenizer"),OVr.forEach(t),UYe=r(a5e," (BARTpho model)"),a5e.forEach(t),JYe=i(S),Bn=n(S,"LI",{});var C9=s(Bn);jre=n(C9,"STRONG",{});var VVr=s(jre);YYe=r(VVr,"bert"),VVr.forEach(t),KYe=r(C9," \u2014 "),qS=n(C9,"A",{href:!0});var XVr=s(qS);ZYe=r(XVr,"BertTokenizer"),XVr.forEach(t),eKe=r(C9," or "),NS=n(C9,"A",{href:!0});var zVr=s(NS);oKe=r(zVr,"BertTokenizerFast"),zVr.forEach(t),rKe=r(C9," (BERT model)"),C9.forEach(t),tKe=i(S),Mg=n(S,"LI",{});var n5e=s(Mg);Dre=n(n5e,"STRONG",{});var WVr=s(Dre);aKe=r(WVr,"bert-generation"),WVr.forEach(t),nKe=r(n5e," \u2014 "),jS=n(n5e,"A",{href:!0});var QVr=s(jS);sKe=r(QVr,"BertGenerationTokenizer"),QVr.forEach(t),lKe=r(n5e," (Bert Generation model)"),n5e.forEach(t),iKe=i(S),Eg=n(S,"LI",{});var s5e=s(Eg);Gre=n(s5e,"STRONG",{});var HVr=s(Gre);dKe=r(HVr,"bert-japanese"),HVr.forEach(t),cKe=r(s5e," \u2014 "),DS=n(s5e,"A",{href:!0});var UVr=s(DS);fKe=r(UVr,"BertJapaneseTokenizer"),UVr.forEach(t),mKe=r(s5e," (BertJapanese model)"),s5e.forEach(t),gKe=i(S),Cg=n(S,"LI",{});var l5e=s(Cg);Ore=n(l5e,"STRONG",{});var JVr=s(Ore);hKe=r(JVr,"bertweet"),JVr.forEach(t),pKe=r(l5e," \u2014 "),GS=n(l5e,"A",{href:!0});var YVr=s(GS);uKe=r(YVr,"BertweetTokenizer"),YVr.forEach(t),_Ke=r(l5e," (Bertweet model)"),l5e.forEach(t),bKe=i(S),In=n(S,"LI",{});var w9=s(In);Vre=n(w9,"STRONG",{});var KVr=s(Vre);vKe=r(KVr,"big_bird"),KVr.forEach(t),FKe=r(w9," \u2014 "),OS=n(w9,"A",{href:!0});var ZVr=s(OS);TKe=r(ZVr,"BigBirdTokenizer"),ZVr.forEach(t),MKe=r(w9," or "),VS=n(w9,"A",{href:!0});var eXr=s(VS);EKe=r(eXr,"BigBirdTokenizerFast"),eXr.forEach(t),CKe=r(w9," (BigBird model)"),w9.forEach(t),wKe=i(S),qn=n(S,"LI",{});var A9=s(qn);Xre=n(A9,"STRONG",{});var oXr=s(Xre);AKe=r(oXr,"bigbird_pegasus"),oXr.forEach(t),yKe=r(A9," \u2014 "),XS=n(A9,"A",{href:!0});var rXr=s(XS);LKe=r(rXr,"PegasusTokenizer"),rXr.forEach(t),xKe=r(A9," or "),zS=n(A9,"A",{href:!0});var tXr=s(zS);$Ke=r(tXr,"PegasusTokenizerFast"),tXr.forEach(t),kKe=r(A9," (BigBirdPegasus model)"),A9.forEach(t),SKe=i(S),Nn=n(S,"LI",{});var y9=s(Nn);zre=n(y9,"STRONG",{});var aXr=s(zre);RKe=r(aXr,"blenderbot"),aXr.forEach(t),PKe=r(y9," \u2014 "),WS=n(y9,"A",{href:!0});var nXr=s(WS);BKe=r(nXr,"BlenderbotTokenizer"),nXr.forEach(t),IKe=r(y9," or "),QS=n(y9,"A",{href:!0});var sXr=s(QS);qKe=r(sXr,"BlenderbotTokenizerFast"),sXr.forEach(t),NKe=r(y9," (Blenderbot model)"),y9.forEach(t),jKe=i(S),wg=n(S,"LI",{});var i5e=s(wg);Wre=n(i5e,"STRONG",{});var lXr=s(Wre);DKe=r(lXr,"blenderbot-small"),lXr.forEach(t),GKe=r(i5e," \u2014 "),HS=n(i5e,"A",{href:!0});var iXr=s(HS);OKe=r(iXr,"BlenderbotSmallTokenizer"),iXr.forEach(t),VKe=r(i5e," (BlenderbotSmall model)"),i5e.forEach(t),XKe=i(S),Ag=n(S,"LI",{});var d5e=s(Ag);Qre=n(d5e,"STRONG",{});var dXr=s(Qre);zKe=r(dXr,"byt5"),dXr.forEach(t),WKe=r(d5e," \u2014 "),US=n(d5e,"A",{href:!0});var cXr=s(US);QKe=r(cXr,"ByT5Tokenizer"),cXr.forEach(t),HKe=r(d5e," (ByT5 model)"),d5e.forEach(t),UKe=i(S),jn=n(S,"LI",{});var L9=s(jn);Hre=n(L9,"STRONG",{});var fXr=s(Hre);JKe=r(fXr,"camembert"),fXr.forEach(t),YKe=r(L9," \u2014 "),JS=n(L9,"A",{href:!0});var mXr=s(JS);KKe=r(mXr,"CamembertTokenizer"),mXr.forEach(t),ZKe=r(L9," or "),YS=n(L9,"A",{href:!0});var gXr=s(YS);eZe=r(gXr,"CamembertTokenizerFast"),gXr.forEach(t),oZe=r(L9," (CamemBERT model)"),L9.forEach(t),rZe=i(S),yg=n(S,"LI",{});var c5e=s(yg);Ure=n(c5e,"STRONG",{});var hXr=s(Ure);tZe=r(hXr,"canine"),hXr.forEach(t),aZe=r(c5e," \u2014 "),KS=n(c5e,"A",{href:!0});var pXr=s(KS);nZe=r(pXr,"CanineTokenizer"),pXr.forEach(t),sZe=r(c5e," (Canine model)"),c5e.forEach(t),lZe=i(S),Dn=n(S,"LI",{});var x9=s(Dn);Jre=n(x9,"STRONG",{});var uXr=s(Jre);iZe=r(uXr,"clip"),uXr.forEach(t),dZe=r(x9," \u2014 "),ZS=n(x9,"A",{href:!0});var _Xr=s(ZS);cZe=r(_Xr,"CLIPTokenizer"),_Xr.forEach(t),fZe=r(x9," or "),eR=n(x9,"A",{href:!0});var bXr=s(eR);mZe=r(bXr,"CLIPTokenizerFast"),bXr.forEach(t),gZe=r(x9," (CLIP model)"),x9.forEach(t),hZe=i(S),Gn=n(S,"LI",{});var $9=s(Gn);Yre=n($9,"STRONG",{});var vXr=s(Yre);pZe=r(vXr,"convbert"),vXr.forEach(t),uZe=r($9," \u2014 "),oR=n($9,"A",{href:!0});var FXr=s(oR);_Ze=r(FXr,"ConvBertTokenizer"),FXr.forEach(t),bZe=r($9," or "),rR=n($9,"A",{href:!0});var TXr=s(rR);vZe=r(TXr,"ConvBertTokenizerFast"),TXr.forEach(t),FZe=r($9," (ConvBERT model)"),$9.forEach(t),TZe=i(S),On=n(S,"LI",{});var k9=s(On);Kre=n(k9,"STRONG",{});var MXr=s(Kre);MZe=r(MXr,"cpm"),MXr.forEach(t),EZe=r(k9," \u2014 "),tR=n(k9,"A",{href:!0});var EXr=s(tR);CZe=r(EXr,"CpmTokenizer"),EXr.forEach(t),wZe=r(k9," or "),aR=n(k9,"A",{href:!0});var CXr=s(aR);AZe=r(CXr,"CpmTokenizerFast"),CXr.forEach(t),yZe=r(k9," (CPM model)"),k9.forEach(t),LZe=i(S),Lg=n(S,"LI",{});var f5e=s(Lg);Zre=n(f5e,"STRONG",{});var wXr=s(Zre);xZe=r(wXr,"ctrl"),wXr.forEach(t),$Ze=r(f5e," \u2014 "),nR=n(f5e,"A",{href:!0});var AXr=s(nR);kZe=r(AXr,"CTRLTokenizer"),AXr.forEach(t),SZe=r(f5e," (CTRL model)"),f5e.forEach(t),RZe=i(S),Vn=n(S,"LI",{});var S9=s(Vn);ete=n(S9,"STRONG",{});var yXr=s(ete);PZe=r(yXr,"data2vec-text"),yXr.forEach(t),BZe=r(S9," \u2014 "),sR=n(S9,"A",{href:!0});var LXr=s(sR);IZe=r(LXr,"RobertaTokenizer"),LXr.forEach(t),qZe=r(S9," or "),lR=n(S9,"A",{href:!0});var xXr=s(lR);NZe=r(xXr,"RobertaTokenizerFast"),xXr.forEach(t),jZe=r(S9," (Data2VecText model)"),S9.forEach(t),DZe=i(S),Xn=n(S,"LI",{});var R9=s(Xn);ote=n(R9,"STRONG",{});var $Xr=s(ote);GZe=r($Xr,"deberta"),$Xr.forEach(t),OZe=r(R9," \u2014 "),iR=n(R9,"A",{href:!0});var kXr=s(iR);VZe=r(kXr,"DebertaTokenizer"),kXr.forEach(t),XZe=r(R9," or "),dR=n(R9,"A",{href:!0});var SXr=s(dR);zZe=r(SXr,"DebertaTokenizerFast"),SXr.forEach(t),WZe=r(R9," (DeBERTa model)"),R9.forEach(t),QZe=i(S),zn=n(S,"LI",{});var P9=s(zn);rte=n(P9,"STRONG",{});var RXr=s(rte);HZe=r(RXr,"deberta-v2"),RXr.forEach(t),UZe=r(P9," \u2014 "),cR=n(P9,"A",{href:!0});var PXr=s(cR);JZe=r(PXr,"DebertaV2Tokenizer"),PXr.forEach(t),YZe=r(P9," or "),fR=n(P9,"A",{href:!0});var BXr=s(fR);KZe=r(BXr,"DebertaV2TokenizerFast"),BXr.forEach(t),ZZe=r(P9," (DeBERTa-v2 model)"),P9.forEach(t),eeo=i(S),Wn=n(S,"LI",{});var B9=s(Wn);tte=n(B9,"STRONG",{});var IXr=s(tte);oeo=r(IXr,"distilbert"),IXr.forEach(t),reo=r(B9," \u2014 "),mR=n(B9,"A",{href:!0});var qXr=s(mR);teo=r(qXr,"DistilBertTokenizer"),qXr.forEach(t),aeo=r(B9," or "),gR=n(B9,"A",{href:!0});var NXr=s(gR);neo=r(NXr,"DistilBertTokenizerFast"),NXr.forEach(t),seo=r(B9," (DistilBERT model)"),B9.forEach(t),leo=i(S),Qn=n(S,"LI",{});var I9=s(Qn);ate=n(I9,"STRONG",{});var jXr=s(ate);ieo=r(jXr,"dpr"),jXr.forEach(t),deo=r(I9," \u2014 "),hR=n(I9,"A",{href:!0});var DXr=s(hR);ceo=r(DXr,"DPRQuestionEncoderTokenizer"),DXr.forEach(t),feo=r(I9," or "),pR=n(I9,"A",{href:!0});var GXr=s(pR);meo=r(GXr,"DPRQuestionEncoderTokenizerFast"),GXr.forEach(t),geo=r(I9," (DPR model)"),I9.forEach(t),heo=i(S),Hn=n(S,"LI",{});var q9=s(Hn);nte=n(q9,"STRONG",{});var OXr=s(nte);peo=r(OXr,"electra"),OXr.forEach(t),ueo=r(q9," \u2014 "),uR=n(q9,"A",{href:!0});var VXr=s(uR);_eo=r(VXr,"ElectraTokenizer"),VXr.forEach(t),beo=r(q9," or "),_R=n(q9,"A",{href:!0});var XXr=s(_R);veo=r(XXr,"ElectraTokenizerFast"),XXr.forEach(t),Feo=r(q9," (ELECTRA model)"),q9.forEach(t),Teo=i(S),xg=n(S,"LI",{});var m5e=s(xg);ste=n(m5e,"STRONG",{});var zXr=s(ste);Meo=r(zXr,"flaubert"),zXr.forEach(t),Eeo=r(m5e," \u2014 "),bR=n(m5e,"A",{href:!0});var WXr=s(bR);Ceo=r(WXr,"FlaubertTokenizer"),WXr.forEach(t),weo=r(m5e," (FlauBERT model)"),m5e.forEach(t),Aeo=i(S),Un=n(S,"LI",{});var N9=s(Un);lte=n(N9,"STRONG",{});var QXr=s(lte);yeo=r(QXr,"fnet"),QXr.forEach(t),Leo=r(N9," \u2014 "),vR=n(N9,"A",{href:!0});var HXr=s(vR);xeo=r(HXr,"FNetTokenizer"),HXr.forEach(t),$eo=r(N9," or "),FR=n(N9,"A",{href:!0});var UXr=s(FR);keo=r(UXr,"FNetTokenizerFast"),UXr.forEach(t),Seo=r(N9," (FNet model)"),N9.forEach(t),Reo=i(S),$g=n(S,"LI",{});var g5e=s($g);ite=n(g5e,"STRONG",{});var JXr=s(ite);Peo=r(JXr,"fsmt"),JXr.forEach(t),Beo=r(g5e," \u2014 "),TR=n(g5e,"A",{href:!0});var YXr=s(TR);Ieo=r(YXr,"FSMTTokenizer"),YXr.forEach(t),qeo=r(g5e," (FairSeq Machine-Translation model)"),g5e.forEach(t),Neo=i(S),Jn=n(S,"LI",{});var j9=s(Jn);dte=n(j9,"STRONG",{});var KXr=s(dte);jeo=r(KXr,"funnel"),KXr.forEach(t),Deo=r(j9," \u2014 "),MR=n(j9,"A",{href:!0});var ZXr=s(MR);Geo=r(ZXr,"FunnelTokenizer"),ZXr.forEach(t),Oeo=r(j9," or "),ER=n(j9,"A",{href:!0});var ezr=s(ER);Veo=r(ezr,"FunnelTokenizerFast"),ezr.forEach(t),Xeo=r(j9," (Funnel Transformer model)"),j9.forEach(t),zeo=i(S),Yn=n(S,"LI",{});var D9=s(Yn);cte=n(D9,"STRONG",{});var ozr=s(cte);Weo=r(ozr,"gpt2"),ozr.forEach(t),Qeo=r(D9," \u2014 "),CR=n(D9,"A",{href:!0});var rzr=s(CR);Heo=r(rzr,"GPT2Tokenizer"),rzr.forEach(t),Ueo=r(D9," or "),wR=n(D9,"A",{href:!0});var tzr=s(wR);Jeo=r(tzr,"GPT2TokenizerFast"),tzr.forEach(t),Yeo=r(D9," (OpenAI GPT-2 model)"),D9.forEach(t),Keo=i(S),Kn=n(S,"LI",{});var G9=s(Kn);fte=n(G9,"STRONG",{});var azr=s(fte);Zeo=r(azr,"gpt_neo"),azr.forEach(t),eoo=r(G9," \u2014 "),AR=n(G9,"A",{href:!0});var nzr=s(AR);ooo=r(nzr,"GPT2Tokenizer"),nzr.forEach(t),roo=r(G9," or "),yR=n(G9,"A",{href:!0});var szr=s(yR);too=r(szr,"GPT2TokenizerFast"),szr.forEach(t),aoo=r(G9," (GPT Neo model)"),G9.forEach(t),noo=i(S),Zn=n(S,"LI",{});var O9=s(Zn);mte=n(O9,"STRONG",{});var lzr=s(mte);soo=r(lzr,"gptj"),lzr.forEach(t),loo=r(O9," \u2014 "),LR=n(O9,"A",{href:!0});var izr=s(LR);ioo=r(izr,"GPT2Tokenizer"),izr.forEach(t),doo=r(O9," or "),xR=n(O9,"A",{href:!0});var dzr=s(xR);coo=r(dzr,"GPT2TokenizerFast"),dzr.forEach(t),foo=r(O9," (GPT-J model)"),O9.forEach(t),moo=i(S),es=n(S,"LI",{});var V9=s(es);gte=n(V9,"STRONG",{});var czr=s(gte);goo=r(czr,"herbert"),czr.forEach(t),hoo=r(V9," \u2014 "),$R=n(V9,"A",{href:!0});var fzr=s($R);poo=r(fzr,"HerbertTokenizer"),fzr.forEach(t),uoo=r(V9," or "),kR=n(V9,"A",{href:!0});var mzr=s(kR);_oo=r(mzr,"HerbertTokenizerFast"),mzr.forEach(t),boo=r(V9," (HerBERT model)"),V9.forEach(t),voo=i(S),kg=n(S,"LI",{});var h5e=s(kg);hte=n(h5e,"STRONG",{});var gzr=s(hte);Foo=r(gzr,"hubert"),gzr.forEach(t),Too=r(h5e," \u2014 "),SR=n(h5e,"A",{href:!0});var hzr=s(SR);Moo=r(hzr,"Wav2Vec2CTCTokenizer"),hzr.forEach(t),Eoo=r(h5e," (Hubert model)"),h5e.forEach(t),Coo=i(S),os=n(S,"LI",{});var X9=s(os);pte=n(X9,"STRONG",{});var pzr=s(pte);woo=r(pzr,"ibert"),pzr.forEach(t),Aoo=r(X9," \u2014 "),RR=n(X9,"A",{href:!0});var uzr=s(RR);yoo=r(uzr,"RobertaTokenizer"),uzr.forEach(t),Loo=r(X9," or "),PR=n(X9,"A",{href:!0});var _zr=s(PR);xoo=r(_zr,"RobertaTokenizerFast"),_zr.forEach(t),$oo=r(X9," (I-BERT model)"),X9.forEach(t),koo=i(S),rs=n(S,"LI",{});var z9=s(rs);ute=n(z9,"STRONG",{});var bzr=s(ute);Soo=r(bzr,"layoutlm"),bzr.forEach(t),Roo=r(z9," \u2014 "),BR=n(z9,"A",{href:!0});var vzr=s(BR);Poo=r(vzr,"LayoutLMTokenizer"),vzr.forEach(t),Boo=r(z9," or "),IR=n(z9,"A",{href:!0});var Fzr=s(IR);Ioo=r(Fzr,"LayoutLMTokenizerFast"),Fzr.forEach(t),qoo=r(z9," (LayoutLM model)"),z9.forEach(t),Noo=i(S),ts=n(S,"LI",{});var W9=s(ts);_te=n(W9,"STRONG",{});var Tzr=s(_te);joo=r(Tzr,"layoutlmv2"),Tzr.forEach(t),Doo=r(W9," \u2014 "),qR=n(W9,"A",{href:!0});var Mzr=s(qR);Goo=r(Mzr,"LayoutLMv2Tokenizer"),Mzr.forEach(t),Ooo=r(W9," or "),NR=n(W9,"A",{href:!0});var Ezr=s(NR);Voo=r(Ezr,"LayoutLMv2TokenizerFast"),Ezr.forEach(t),Xoo=r(W9," (LayoutLMv2 model)"),W9.forEach(t),zoo=i(S),as=n(S,"LI",{});var Q9=s(as);bte=n(Q9,"STRONG",{});var Czr=s(bte);Woo=r(Czr,"layoutxlm"),Czr.forEach(t),Qoo=r(Q9," \u2014 "),jR=n(Q9,"A",{href:!0});var wzr=s(jR);Hoo=r(wzr,"LayoutXLMTokenizer"),wzr.forEach(t),Uoo=r(Q9," or "),DR=n(Q9,"A",{href:!0});var Azr=s(DR);Joo=r(Azr,"LayoutXLMTokenizerFast"),Azr.forEach(t),Yoo=r(Q9," (LayoutXLM model)"),Q9.forEach(t),Koo=i(S),ns=n(S,"LI",{});var H9=s(ns);vte=n(H9,"STRONG",{});var yzr=s(vte);Zoo=r(yzr,"led"),yzr.forEach(t),ero=r(H9," \u2014 "),GR=n(H9,"A",{href:!0});var Lzr=s(GR);oro=r(Lzr,"LEDTokenizer"),Lzr.forEach(t),rro=r(H9," or "),OR=n(H9,"A",{href:!0});var xzr=s(OR);tro=r(xzr,"LEDTokenizerFast"),xzr.forEach(t),aro=r(H9," (LED model)"),H9.forEach(t),nro=i(S),ss=n(S,"LI",{});var U9=s(ss);Fte=n(U9,"STRONG",{});var $zr=s(Fte);sro=r($zr,"longformer"),$zr.forEach(t),lro=r(U9," \u2014 "),VR=n(U9,"A",{href:!0});var kzr=s(VR);iro=r(kzr,"LongformerTokenizer"),kzr.forEach(t),dro=r(U9," or "),XR=n(U9,"A",{href:!0});var Szr=s(XR);cro=r(Szr,"LongformerTokenizerFast"),Szr.forEach(t),fro=r(U9," (Longformer model)"),U9.forEach(t),mro=i(S),Sg=n(S,"LI",{});var p5e=s(Sg);Tte=n(p5e,"STRONG",{});var Rzr=s(Tte);gro=r(Rzr,"luke"),Rzr.forEach(t),hro=r(p5e," \u2014 "),zR=n(p5e,"A",{href:!0});var Pzr=s(zR);pro=r(Pzr,"LukeTokenizer"),Pzr.forEach(t),uro=r(p5e," (LUKE model)"),p5e.forEach(t),_ro=i(S),ls=n(S,"LI",{});var J9=s(ls);Mte=n(J9,"STRONG",{});var Bzr=s(Mte);bro=r(Bzr,"lxmert"),Bzr.forEach(t),vro=r(J9," \u2014 "),WR=n(J9,"A",{href:!0});var Izr=s(WR);Fro=r(Izr,"LxmertTokenizer"),Izr.forEach(t),Tro=r(J9," or "),QR=n(J9,"A",{href:!0});var qzr=s(QR);Mro=r(qzr,"LxmertTokenizerFast"),qzr.forEach(t),Ero=r(J9," (LXMERT model)"),J9.forEach(t),Cro=i(S),Rg=n(S,"LI",{});var u5e=s(Rg);Ete=n(u5e,"STRONG",{});var Nzr=s(Ete);wro=r(Nzr,"m2m_100"),Nzr.forEach(t),Aro=r(u5e," \u2014 "),HR=n(u5e,"A",{href:!0});var jzr=s(HR);yro=r(jzr,"M2M100Tokenizer"),jzr.forEach(t),Lro=r(u5e," (M2M100 model)"),u5e.forEach(t),xro=i(S),Pg=n(S,"LI",{});var _5e=s(Pg);Cte=n(_5e,"STRONG",{});var Dzr=s(Cte);$ro=r(Dzr,"marian"),Dzr.forEach(t),kro=r(_5e," \u2014 "),UR=n(_5e,"A",{href:!0});var Gzr=s(UR);Sro=r(Gzr,"MarianTokenizer"),Gzr.forEach(t),Rro=r(_5e," (Marian model)"),_5e.forEach(t),Pro=i(S),is=n(S,"LI",{});var Y9=s(is);wte=n(Y9,"STRONG",{});var Ozr=s(wte);Bro=r(Ozr,"mbart"),Ozr.forEach(t),Iro=r(Y9," \u2014 "),JR=n(Y9,"A",{href:!0});var Vzr=s(JR);qro=r(Vzr,"MBartTokenizer"),Vzr.forEach(t),Nro=r(Y9," or "),YR=n(Y9,"A",{href:!0});var Xzr=s(YR);jro=r(Xzr,"MBartTokenizerFast"),Xzr.forEach(t),Dro=r(Y9," (mBART model)"),Y9.forEach(t),Gro=i(S),ds=n(S,"LI",{});var K9=s(ds);Ate=n(K9,"STRONG",{});var zzr=s(Ate);Oro=r(zzr,"mbart50"),zzr.forEach(t),Vro=r(K9," \u2014 "),KR=n(K9,"A",{href:!0});var Wzr=s(KR);Xro=r(Wzr,"MBart50Tokenizer"),Wzr.forEach(t),zro=r(K9," or "),ZR=n(K9,"A",{href:!0});var Qzr=s(ZR);Wro=r(Qzr,"MBart50TokenizerFast"),Qzr.forEach(t),Qro=r(K9," (mBART-50 model)"),K9.forEach(t),Hro=i(S),cs=n(S,"LI",{});var Z9=s(cs);yte=n(Z9,"STRONG",{});var Hzr=s(yte);Uro=r(Hzr,"megatron-bert"),Hzr.forEach(t),Jro=r(Z9," \u2014 "),eP=n(Z9,"A",{href:!0});var Uzr=s(eP);Yro=r(Uzr,"BertTokenizer"),Uzr.forEach(t),Kro=r(Z9," or "),oP=n(Z9,"A",{href:!0});var Jzr=s(oP);Zro=r(Jzr,"BertTokenizerFast"),Jzr.forEach(t),eto=r(Z9," (MegatronBert model)"),Z9.forEach(t),oto=i(S),Bg=n(S,"LI",{});var b5e=s(Bg);Lte=n(b5e,"STRONG",{});var Yzr=s(Lte);rto=r(Yzr,"mluke"),Yzr.forEach(t),tto=r(b5e," \u2014 "),rP=n(b5e,"A",{href:!0});var Kzr=s(rP);ato=r(Kzr,"MLukeTokenizer"),Kzr.forEach(t),nto=r(b5e," (mLUKE model)"),b5e.forEach(t),sto=i(S),fs=n(S,"LI",{});var e$=s(fs);xte=n(e$,"STRONG",{});var Zzr=s(xte);lto=r(Zzr,"mobilebert"),Zzr.forEach(t),ito=r(e$," \u2014 "),tP=n(e$,"A",{href:!0});var eWr=s(tP);dto=r(eWr,"MobileBertTokenizer"),eWr.forEach(t),cto=r(e$," or "),aP=n(e$,"A",{href:!0});var oWr=s(aP);fto=r(oWr,"MobileBertTokenizerFast"),oWr.forEach(t),mto=r(e$," (MobileBERT model)"),e$.forEach(t),gto=i(S),ms=n(S,"LI",{});var o$=s(ms);$te=n(o$,"STRONG",{});var rWr=s($te);hto=r(rWr,"mpnet"),rWr.forEach(t),pto=r(o$," \u2014 "),nP=n(o$,"A",{href:!0});var tWr=s(nP);uto=r(tWr,"MPNetTokenizer"),tWr.forEach(t),_to=r(o$," or "),sP=n(o$,"A",{href:!0});var aWr=s(sP);bto=r(aWr,"MPNetTokenizerFast"),aWr.forEach(t),vto=r(o$," (MPNet model)"),o$.forEach(t),Fto=i(S),gs=n(S,"LI",{});var r$=s(gs);kte=n(r$,"STRONG",{});var nWr=s(kte);Tto=r(nWr,"mt5"),nWr.forEach(t),Mto=r(r$," \u2014 "),lP=n(r$,"A",{href:!0});var sWr=s(lP);Eto=r(sWr,"MT5Tokenizer"),sWr.forEach(t),Cto=r(r$," or "),iP=n(r$,"A",{href:!0});var lWr=s(iP);wto=r(lWr,"MT5TokenizerFast"),lWr.forEach(t),Ato=r(r$," (mT5 model)"),r$.forEach(t),yto=i(S),hs=n(S,"LI",{});var t$=s(hs);Ste=n(t$,"STRONG",{});var iWr=s(Ste);Lto=r(iWr,"nystromformer"),iWr.forEach(t),xto=r(t$," \u2014 "),dP=n(t$,"A",{href:!0});var dWr=s(dP);$to=r(dWr,"AlbertTokenizer"),dWr.forEach(t),kto=r(t$," or "),cP=n(t$,"A",{href:!0});var cWr=s(cP);Sto=r(cWr,"AlbertTokenizerFast"),cWr.forEach(t),Rto=r(t$," (Nystromformer model)"),t$.forEach(t),Pto=i(S),ps=n(S,"LI",{});var a$=s(ps);Rte=n(a$,"STRONG",{});var fWr=s(Rte);Bto=r(fWr,"openai-gpt"),fWr.forEach(t),Ito=r(a$," \u2014 "),fP=n(a$,"A",{href:!0});var mWr=s(fP);qto=r(mWr,"OpenAIGPTTokenizer"),mWr.forEach(t),Nto=r(a$," or "),mP=n(a$,"A",{href:!0});var gWr=s(mP);jto=r(gWr,"OpenAIGPTTokenizerFast"),gWr.forEach(t),Dto=r(a$," (OpenAI GPT model)"),a$.forEach(t),Gto=i(S),Ig=n(S,"LI",{});var v5e=s(Ig);Pte=n(v5e,"STRONG",{});var hWr=s(Pte);Oto=r(hWr,"opt"),hWr.forEach(t),Vto=r(v5e," \u2014 "),gP=n(v5e,"A",{href:!0});var pWr=s(gP);Xto=r(pWr,"GPT2Tokenizer"),pWr.forEach(t),zto=r(v5e," (OPT model)"),v5e.forEach(t),Wto=i(S),us=n(S,"LI",{});var n$=s(us);Bte=n(n$,"STRONG",{});var uWr=s(Bte);Qto=r(uWr,"pegasus"),uWr.forEach(t),Hto=r(n$," \u2014 "),hP=n(n$,"A",{href:!0});var _Wr=s(hP);Uto=r(_Wr,"PegasusTokenizer"),_Wr.forEach(t),Jto=r(n$," or "),pP=n(n$,"A",{href:!0});var bWr=s(pP);Yto=r(bWr,"PegasusTokenizerFast"),bWr.forEach(t),Kto=r(n$," (Pegasus model)"),n$.forEach(t),Zto=i(S),qg=n(S,"LI",{});var F5e=s(qg);Ite=n(F5e,"STRONG",{});var vWr=s(Ite);eao=r(vWr,"perceiver"),vWr.forEach(t),oao=r(F5e," \u2014 "),uP=n(F5e,"A",{href:!0});var FWr=s(uP);rao=r(FWr,"PerceiverTokenizer"),FWr.forEach(t),tao=r(F5e," (Perceiver model)"),F5e.forEach(t),aao=i(S),Ng=n(S,"LI",{});var T5e=s(Ng);qte=n(T5e,"STRONG",{});var TWr=s(qte);nao=r(TWr,"phobert"),TWr.forEach(t),sao=r(T5e," \u2014 "),_P=n(T5e,"A",{href:!0});var MWr=s(_P);lao=r(MWr,"PhobertTokenizer"),MWr.forEach(t),iao=r(T5e," (PhoBERT model)"),T5e.forEach(t),dao=i(S),jg=n(S,"LI",{});var M5e=s(jg);Nte=n(M5e,"STRONG",{});var EWr=s(Nte);cao=r(EWr,"plbart"),EWr.forEach(t),fao=r(M5e," \u2014 "),bP=n(M5e,"A",{href:!0});var CWr=s(bP);mao=r(CWr,"PLBartTokenizer"),CWr.forEach(t),gao=r(M5e," (PLBart model)"),M5e.forEach(t),hao=i(S),Dg=n(S,"LI",{});var E5e=s(Dg);jte=n(E5e,"STRONG",{});var wWr=s(jte);pao=r(wWr,"prophetnet"),wWr.forEach(t),uao=r(E5e," \u2014 "),vP=n(E5e,"A",{href:!0});var AWr=s(vP);_ao=r(AWr,"ProphetNetTokenizer"),AWr.forEach(t),bao=r(E5e," (ProphetNet model)"),E5e.forEach(t),vao=i(S),_s=n(S,"LI",{});var s$=s(_s);Dte=n(s$,"STRONG",{});var yWr=s(Dte);Fao=r(yWr,"qdqbert"),yWr.forEach(t),Tao=r(s$," \u2014 "),FP=n(s$,"A",{href:!0});var LWr=s(FP);Mao=r(LWr,"BertTokenizer"),LWr.forEach(t),Eao=r(s$," or "),TP=n(s$,"A",{href:!0});var xWr=s(TP);Cao=r(xWr,"BertTokenizerFast"),xWr.forEach(t),wao=r(s$," (QDQBert model)"),s$.forEach(t),Aao=i(S),Gg=n(S,"LI",{});var C5e=s(Gg);Gte=n(C5e,"STRONG",{});var $Wr=s(Gte);yao=r($Wr,"rag"),$Wr.forEach(t),Lao=r(C5e," \u2014 "),MP=n(C5e,"A",{href:!0});var kWr=s(MP);xao=r(kWr,"RagTokenizer"),kWr.forEach(t),$ao=r(C5e," (RAG model)"),C5e.forEach(t),kao=i(S),bs=n(S,"LI",{});var l$=s(bs);Ote=n(l$,"STRONG",{});var SWr=s(Ote);Sao=r(SWr,"realm"),SWr.forEach(t),Rao=r(l$," \u2014 "),EP=n(l$,"A",{href:!0});var RWr=s(EP);Pao=r(RWr,"RealmTokenizer"),RWr.forEach(t),Bao=r(l$," or "),CP=n(l$,"A",{href:!0});var PWr=s(CP);Iao=r(PWr,"RealmTokenizerFast"),PWr.forEach(t),qao=r(l$," (Realm model)"),l$.forEach(t),Nao=i(S),vs=n(S,"LI",{});var i$=s(vs);Vte=n(i$,"STRONG",{});var BWr=s(Vte);jao=r(BWr,"reformer"),BWr.forEach(t),Dao=r(i$," \u2014 "),wP=n(i$,"A",{href:!0});var IWr=s(wP);Gao=r(IWr,"ReformerTokenizer"),IWr.forEach(t),Oao=r(i$," or "),AP=n(i$,"A",{href:!0});var qWr=s(AP);Vao=r(qWr,"ReformerTokenizerFast"),qWr.forEach(t),Xao=r(i$," (Reformer model)"),i$.forEach(t),zao=i(S),Fs=n(S,"LI",{});var d$=s(Fs);Xte=n(d$,"STRONG",{});var NWr=s(Xte);Wao=r(NWr,"rembert"),NWr.forEach(t),Qao=r(d$," \u2014 "),yP=n(d$,"A",{href:!0});var jWr=s(yP);Hao=r(jWr,"RemBertTokenizer"),jWr.forEach(t),Uao=r(d$," or "),LP=n(d$,"A",{href:!0});var DWr=s(LP);Jao=r(DWr,"RemBertTokenizerFast"),DWr.forEach(t),Yao=r(d$," (RemBERT model)"),d$.forEach(t),Kao=i(S),Ts=n(S,"LI",{});var c$=s(Ts);zte=n(c$,"STRONG",{});var GWr=s(zte);Zao=r(GWr,"retribert"),GWr.forEach(t),eno=r(c$," \u2014 "),xP=n(c$,"A",{href:!0});var OWr=s(xP);ono=r(OWr,"RetriBertTokenizer"),OWr.forEach(t),rno=r(c$," or "),$P=n(c$,"A",{href:!0});var VWr=s($P);tno=r(VWr,"RetriBertTokenizerFast"),VWr.forEach(t),ano=r(c$," (RetriBERT model)"),c$.forEach(t),nno=i(S),Ms=n(S,"LI",{});var f$=s(Ms);Wte=n(f$,"STRONG",{});var XWr=s(Wte);sno=r(XWr,"roberta"),XWr.forEach(t),lno=r(f$," \u2014 "),kP=n(f$,"A",{href:!0});var zWr=s(kP);ino=r(zWr,"RobertaTokenizer"),zWr.forEach(t),dno=r(f$," or "),SP=n(f$,"A",{href:!0});var WWr=s(SP);cno=r(WWr,"RobertaTokenizerFast"),WWr.forEach(t),fno=r(f$," (RoBERTa model)"),f$.forEach(t),mno=i(S),Es=n(S,"LI",{});var m$=s(Es);Qte=n(m$,"STRONG",{});var QWr=s(Qte);gno=r(QWr,"roformer"),QWr.forEach(t),hno=r(m$," \u2014 "),RP=n(m$,"A",{href:!0});var HWr=s(RP);pno=r(HWr,"RoFormerTokenizer"),HWr.forEach(t),uno=r(m$," or "),PP=n(m$,"A",{href:!0});var UWr=s(PP);_no=r(UWr,"RoFormerTokenizerFast"),UWr.forEach(t),bno=r(m$," (RoFormer model)"),m$.forEach(t),vno=i(S),Og=n(S,"LI",{});var w5e=s(Og);Hte=n(w5e,"STRONG",{});var JWr=s(Hte);Fno=r(JWr,"speech_to_text"),JWr.forEach(t),Tno=r(w5e," \u2014 "),BP=n(w5e,"A",{href:!0});var YWr=s(BP);Mno=r(YWr,"Speech2TextTokenizer"),YWr.forEach(t),Eno=r(w5e," (Speech2Text model)"),w5e.forEach(t),Cno=i(S),Vg=n(S,"LI",{});var A5e=s(Vg);Ute=n(A5e,"STRONG",{});var KWr=s(Ute);wno=r(KWr,"speech_to_text_2"),KWr.forEach(t),Ano=r(A5e," \u2014 "),IP=n(A5e,"A",{href:!0});var ZWr=s(IP);yno=r(ZWr,"Speech2Text2Tokenizer"),ZWr.forEach(t),Lno=r(A5e," (Speech2Text2 model)"),A5e.forEach(t),xno=i(S),Cs=n(S,"LI",{});var g$=s(Cs);Jte=n(g$,"STRONG",{});var eQr=s(Jte);$no=r(eQr,"splinter"),eQr.forEach(t),kno=r(g$," \u2014 "),qP=n(g$,"A",{href:!0});var oQr=s(qP);Sno=r(oQr,"SplinterTokenizer"),oQr.forEach(t),Rno=r(g$," or "),NP=n(g$,"A",{href:!0});var rQr=s(NP);Pno=r(rQr,"SplinterTokenizerFast"),rQr.forEach(t),Bno=r(g$," (Splinter model)"),g$.forEach(t),Ino=i(S),ws=n(S,"LI",{});var h$=s(ws);Yte=n(h$,"STRONG",{});var tQr=s(Yte);qno=r(tQr,"squeezebert"),tQr.forEach(t),Nno=r(h$," \u2014 "),jP=n(h$,"A",{href:!0});var aQr=s(jP);jno=r(aQr,"SqueezeBertTokenizer"),aQr.forEach(t),Dno=r(h$," or "),DP=n(h$,"A",{href:!0});var nQr=s(DP);Gno=r(nQr,"SqueezeBertTokenizerFast"),nQr.forEach(t),Ono=r(h$," (SqueezeBERT model)"),h$.forEach(t),Vno=i(S),As=n(S,"LI",{});var p$=s(As);Kte=n(p$,"STRONG",{});var sQr=s(Kte);Xno=r(sQr,"t5"),sQr.forEach(t),zno=r(p$," \u2014 "),GP=n(p$,"A",{href:!0});var lQr=s(GP);Wno=r(lQr,"T5Tokenizer"),lQr.forEach(t),Qno=r(p$," or "),OP=n(p$,"A",{href:!0});var iQr=s(OP);Hno=r(iQr,"T5TokenizerFast"),iQr.forEach(t),Uno=r(p$," (T5 model)"),p$.forEach(t),Jno=i(S),Xg=n(S,"LI",{});var y5e=s(Xg);Zte=n(y5e,"STRONG",{});var dQr=s(Zte);Yno=r(dQr,"tapas"),dQr.forEach(t),Kno=r(y5e," \u2014 "),VP=n(y5e,"A",{href:!0});var cQr=s(VP);Zno=r(cQr,"TapasTokenizer"),cQr.forEach(t),eso=r(y5e," (TAPAS model)"),y5e.forEach(t),oso=i(S),zg=n(S,"LI",{});var L5e=s(zg);eae=n(L5e,"STRONG",{});var fQr=s(eae);rso=r(fQr,"tapex"),fQr.forEach(t),tso=r(L5e," \u2014 "),XP=n(L5e,"A",{href:!0});var mQr=s(XP);aso=r(mQr,"TapexTokenizer"),mQr.forEach(t),nso=r(L5e," (TAPEX model)"),L5e.forEach(t),sso=i(S),Wg=n(S,"LI",{});var x5e=s(Wg);oae=n(x5e,"STRONG",{});var gQr=s(oae);lso=r(gQr,"transfo-xl"),gQr.forEach(t),iso=r(x5e," \u2014 "),zP=n(x5e,"A",{href:!0});var hQr=s(zP);dso=r(hQr,"TransfoXLTokenizer"),hQr.forEach(t),cso=r(x5e," (Transformer-XL model)"),x5e.forEach(t),fso=i(S),ys=n(S,"LI",{});var u$=s(ys);rae=n(u$,"STRONG",{});var pQr=s(rae);mso=r(pQr,"visual_bert"),pQr.forEach(t),gso=r(u$," \u2014 "),WP=n(u$,"A",{href:!0});var uQr=s(WP);hso=r(uQr,"BertTokenizer"),uQr.forEach(t),pso=r(u$," or "),QP=n(u$,"A",{href:!0});var _Qr=s(QP);uso=r(_Qr,"BertTokenizerFast"),_Qr.forEach(t),_so=r(u$," (VisualBert model)"),u$.forEach(t),bso=i(S),Qg=n(S,"LI",{});var $5e=s(Qg);tae=n($5e,"STRONG",{});var bQr=s(tae);vso=r(bQr,"wav2vec2"),bQr.forEach(t),Fso=r($5e," \u2014 "),HP=n($5e,"A",{href:!0});var vQr=s(HP);Tso=r(vQr,"Wav2Vec2CTCTokenizer"),vQr.forEach(t),Mso=r($5e," (Wav2Vec2 model)"),$5e.forEach(t),Eso=i(S),Hg=n(S,"LI",{});var k5e=s(Hg);aae=n(k5e,"STRONG",{});var FQr=s(aae);Cso=r(FQr,"wav2vec2-conformer"),FQr.forEach(t),wso=r(k5e," \u2014 "),UP=n(k5e,"A",{href:!0});var TQr=s(UP);Aso=r(TQr,"Wav2Vec2CTCTokenizer"),TQr.forEach(t),yso=r(k5e," (Wav2Vec2-Conformer model)"),k5e.forEach(t),Lso=i(S),Ug=n(S,"LI",{});var S5e=s(Ug);nae=n(S5e,"STRONG",{});var MQr=s(nae);xso=r(MQr,"wav2vec2_phoneme"),MQr.forEach(t),$so=r(S5e," \u2014 "),JP=n(S5e,"A",{href:!0});var EQr=s(JP);kso=r(EQr,"Wav2Vec2PhonemeCTCTokenizer"),EQr.forEach(t),Sso=r(S5e," (Wav2Vec2Phoneme model)"),S5e.forEach(t),Rso=i(S),Ls=n(S,"LI",{});var _$=s(Ls);sae=n(_$,"STRONG",{});var CQr=s(sae);Pso=r(CQr,"xglm"),CQr.forEach(t),Bso=r(_$," \u2014 "),YP=n(_$,"A",{href:!0});var wQr=s(YP);Iso=r(wQr,"XGLMTokenizer"),wQr.forEach(t),qso=r(_$," or "),KP=n(_$,"A",{href:!0});var AQr=s(KP);Nso=r(AQr,"XGLMTokenizerFast"),AQr.forEach(t),jso=r(_$," (XGLM model)"),_$.forEach(t),Dso=i(S),Jg=n(S,"LI",{});var R5e=s(Jg);lae=n(R5e,"STRONG",{});var yQr=s(lae);Gso=r(yQr,"xlm"),yQr.forEach(t),Oso=r(R5e," \u2014 "),ZP=n(R5e,"A",{href:!0});var LQr=s(ZP);Vso=r(LQr,"XLMTokenizer"),LQr.forEach(t),Xso=r(R5e," (XLM model)"),R5e.forEach(t),zso=i(S),Yg=n(S,"LI",{});var P5e=s(Yg);iae=n(P5e,"STRONG",{});var xQr=s(iae);Wso=r(xQr,"xlm-prophetnet"),xQr.forEach(t),Qso=r(P5e," \u2014 "),eB=n(P5e,"A",{href:!0});var $Qr=s(eB);Hso=r($Qr,"XLMProphetNetTokenizer"),$Qr.forEach(t),Uso=r(P5e," (XLMProphetNet model)"),P5e.forEach(t),Jso=i(S),xs=n(S,"LI",{});var b$=s(xs);dae=n(b$,"STRONG",{});var kQr=s(dae);Yso=r(kQr,"xlm-roberta"),kQr.forEach(t),Kso=r(b$," \u2014 "),oB=n(b$,"A",{href:!0});var SQr=s(oB);Zso=r(SQr,"XLMRobertaTokenizer"),SQr.forEach(t),elo=r(b$," or "),rB=n(b$,"A",{href:!0});var RQr=s(rB);olo=r(RQr,"XLMRobertaTokenizerFast"),RQr.forEach(t),rlo=r(b$," (XLM-RoBERTa model)"),b$.forEach(t),tlo=i(S),$s=n(S,"LI",{});var v$=s($s);cae=n(v$,"STRONG",{});var PQr=s(cae);alo=r(PQr,"xlm-roberta-xl"),PQr.forEach(t),nlo=r(v$," \u2014 "),tB=n(v$,"A",{href:!0});var BQr=s(tB);slo=r(BQr,"RobertaTokenizer"),BQr.forEach(t),llo=r(v$," or "),aB=n(v$,"A",{href:!0});var IQr=s(aB);ilo=r(IQr,"RobertaTokenizerFast"),IQr.forEach(t),dlo=r(v$," (XLM-RoBERTa-XL model)"),v$.forEach(t),clo=i(S),ks=n(S,"LI",{});var F$=s(ks);fae=n(F$,"STRONG",{});var qQr=s(fae);flo=r(qQr,"xlnet"),qQr.forEach(t),mlo=r(F$," \u2014 "),nB=n(F$,"A",{href:!0});var NQr=s(nB);glo=r(NQr,"XLNetTokenizer"),NQr.forEach(t),hlo=r(F$," or "),sB=n(F$,"A",{href:!0});var jQr=s(sB);plo=r(jQr,"XLNetTokenizerFast"),jQr.forEach(t),ulo=r(F$," (XLNet model)"),F$.forEach(t),_lo=i(S),Ss=n(S,"LI",{});var T$=s(Ss);mae=n(T$,"STRONG",{});var DQr=s(mae);blo=r(DQr,"yoso"),DQr.forEach(t),vlo=r(T$," \u2014 "),lB=n(T$,"A",{href:!0});var GQr=s(lB);Flo=r(GQr,"AlbertTokenizer"),GQr.forEach(t),Tlo=r(T$," or "),iB=n(T$,"A",{href:!0});var OQr=s(iB);Mlo=r(OQr,"AlbertTokenizerFast"),OQr.forEach(t),Elo=r(T$," (YOSO model)"),T$.forEach(t),S.forEach(t),Clo=i(qs),T(Kg.$$.fragment,qs),qs.forEach(t),wlo=i(Is),Zg=n(Is,"DIV",{class:!0});var qNe=s(Zg);T(T6.$$.fragment,qNe),Alo=i(qNe),gae=n(qNe,"P",{});var VQr=s(gae);ylo=r(VQr,"Register a new tokenizer in this mapping."),VQr.forEach(t),qNe.forEach(t),Is.forEach(t),NIe=i(f),Ti=n(f,"H2",{class:!0});var NNe=s(Ti);eh=n(NNe,"A",{id:!0,class:!0,href:!0});var XQr=s(eh);hae=n(XQr,"SPAN",{});var zQr=s(hae);T(M6.$$.fragment,zQr),zQr.forEach(t),XQr.forEach(t),Llo=i(NNe),pae=n(NNe,"SPAN",{});var WQr=s(pae);xlo=r(WQr,"AutoFeatureExtractor"),WQr.forEach(t),NNe.forEach(t),jIe=i(f),Ao=n(f,"DIV",{class:!0});var Ns=s(Ao);T(E6.$$.fragment,Ns),$lo=i(Ns),C6=n(Ns,"P",{});var jNe=s(C6);klo=r(jNe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),dB=n(jNe,"A",{href:!0});var QQr=s(dB);Slo=r(QQr,"AutoFeatureExtractor.from_pretrained()"),QQr.forEach(t),Rlo=r(jNe," class method."),jNe.forEach(t),Plo=i(Ns),w6=n(Ns,"P",{});var DNe=s(w6);Blo=r(DNe,"This class cannot be instantiated directly using "),uae=n(DNe,"CODE",{});var HQr=s(uae);Ilo=r(HQr,"__init__()"),HQr.forEach(t),qlo=r(DNe," (throws an error)."),DNe.forEach(t),Nlo=i(Ns),He=n(Ns,"DIV",{class:!0});var Zt=s(He);T(A6.$$.fragment,Zt),jlo=i(Zt),_ae=n(Zt,"P",{});var UQr=s(_ae);Dlo=r(UQr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),UQr.forEach(t),Glo=i(Zt),ya=n(Zt,"P",{});var fw=s(ya);Olo=r(fw,"The feature extractor class to instantiate is selected based on the "),bae=n(fw,"CODE",{});var JQr=s(bae);Vlo=r(JQr,"model_type"),JQr.forEach(t),Xlo=r(fw,` property of the config object
(either passed as an argument or loaded from `),vae=n(fw,"CODE",{});var YQr=s(vae);zlo=r(YQr,"pretrained_model_name_or_path"),YQr.forEach(t),Wlo=r(fw,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Fae=n(fw,"CODE",{});var KQr=s(Fae);Qlo=r(KQr,"pretrained_model_name_or_path"),KQr.forEach(t),Hlo=r(fw,":"),fw.forEach(t),Ulo=i(Zt),Z=n(Zt,"UL",{});var te=s(Z);oh=n(te,"LI",{});var B5e=s(oh);Tae=n(B5e,"STRONG",{});var ZQr=s(Tae);Jlo=r(ZQr,"beit"),ZQr.forEach(t),Ylo=r(B5e," \u2014 "),cB=n(B5e,"A",{href:!0});var eHr=s(cB);Klo=r(eHr,"BeitFeatureExtractor"),eHr.forEach(t),Zlo=r(B5e," (BEiT model)"),B5e.forEach(t),eio=i(te),rh=n(te,"LI",{});var I5e=s(rh);Mae=n(I5e,"STRONG",{});var oHr=s(Mae);oio=r(oHr,"clip"),oHr.forEach(t),rio=r(I5e," \u2014 "),fB=n(I5e,"A",{href:!0});var rHr=s(fB);tio=r(rHr,"CLIPFeatureExtractor"),rHr.forEach(t),aio=r(I5e," (CLIP model)"),I5e.forEach(t),nio=i(te),th=n(te,"LI",{});var q5e=s(th);Eae=n(q5e,"STRONG",{});var tHr=s(Eae);sio=r(tHr,"convnext"),tHr.forEach(t),lio=r(q5e," \u2014 "),mB=n(q5e,"A",{href:!0});var aHr=s(mB);iio=r(aHr,"ConvNextFeatureExtractor"),aHr.forEach(t),dio=r(q5e," (ConvNext model)"),q5e.forEach(t),cio=i(te),ah=n(te,"LI",{});var N5e=s(ah);Cae=n(N5e,"STRONG",{});var nHr=s(Cae);fio=r(nHr,"data2vec-audio"),nHr.forEach(t),mio=r(N5e," \u2014 "),gB=n(N5e,"A",{href:!0});var sHr=s(gB);gio=r(sHr,"Wav2Vec2FeatureExtractor"),sHr.forEach(t),hio=r(N5e," (Data2VecAudio model)"),N5e.forEach(t),pio=i(te),nh=n(te,"LI",{});var j5e=s(nh);wae=n(j5e,"STRONG",{});var lHr=s(wae);uio=r(lHr,"data2vec-vision"),lHr.forEach(t),_io=r(j5e," \u2014 "),hB=n(j5e,"A",{href:!0});var iHr=s(hB);bio=r(iHr,"BeitFeatureExtractor"),iHr.forEach(t),vio=r(j5e," (Data2VecVision model)"),j5e.forEach(t),Fio=i(te),sh=n(te,"LI",{});var D5e=s(sh);Aae=n(D5e,"STRONG",{});var dHr=s(Aae);Tio=r(dHr,"deit"),dHr.forEach(t),Mio=r(D5e," \u2014 "),pB=n(D5e,"A",{href:!0});var cHr=s(pB);Eio=r(cHr,"DeiTFeatureExtractor"),cHr.forEach(t),Cio=r(D5e," (DeiT model)"),D5e.forEach(t),wio=i(te),lh=n(te,"LI",{});var G5e=s(lh);yae=n(G5e,"STRONG",{});var fHr=s(yae);Aio=r(fHr,"detr"),fHr.forEach(t),yio=r(G5e," \u2014 "),uB=n(G5e,"A",{href:!0});var mHr=s(uB);Lio=r(mHr,"DetrFeatureExtractor"),mHr.forEach(t),xio=r(G5e," (DETR model)"),G5e.forEach(t),$io=i(te),ih=n(te,"LI",{});var O5e=s(ih);Lae=n(O5e,"STRONG",{});var gHr=s(Lae);kio=r(gHr,"dpt"),gHr.forEach(t),Sio=r(O5e," \u2014 "),_B=n(O5e,"A",{href:!0});var hHr=s(_B);Rio=r(hHr,"DPTFeatureExtractor"),hHr.forEach(t),Pio=r(O5e," (DPT model)"),O5e.forEach(t),Bio=i(te),dh=n(te,"LI",{});var V5e=s(dh);xae=n(V5e,"STRONG",{});var pHr=s(xae);Iio=r(pHr,"flava"),pHr.forEach(t),qio=r(V5e," \u2014 "),bB=n(V5e,"A",{href:!0});var uHr=s(bB);Nio=r(uHr,"FlavaFeatureExtractor"),uHr.forEach(t),jio=r(V5e," (Flava model)"),V5e.forEach(t),Dio=i(te),ch=n(te,"LI",{});var X5e=s(ch);$ae=n(X5e,"STRONG",{});var _Hr=s($ae);Gio=r(_Hr,"glpn"),_Hr.forEach(t),Oio=r(X5e," \u2014 "),vB=n(X5e,"A",{href:!0});var bHr=s(vB);Vio=r(bHr,"GLPNFeatureExtractor"),bHr.forEach(t),Xio=r(X5e," (GLPN model)"),X5e.forEach(t),zio=i(te),fh=n(te,"LI",{});var z5e=s(fh);kae=n(z5e,"STRONG",{});var vHr=s(kae);Wio=r(vHr,"hubert"),vHr.forEach(t),Qio=r(z5e," \u2014 "),FB=n(z5e,"A",{href:!0});var FHr=s(FB);Hio=r(FHr,"Wav2Vec2FeatureExtractor"),FHr.forEach(t),Uio=r(z5e," (Hubert model)"),z5e.forEach(t),Jio=i(te),mh=n(te,"LI",{});var W5e=s(mh);Sae=n(W5e,"STRONG",{});var THr=s(Sae);Yio=r(THr,"layoutlmv2"),THr.forEach(t),Kio=r(W5e," \u2014 "),TB=n(W5e,"A",{href:!0});var MHr=s(TB);Zio=r(MHr,"LayoutLMv2FeatureExtractor"),MHr.forEach(t),edo=r(W5e," (LayoutLMv2 model)"),W5e.forEach(t),odo=i(te),gh=n(te,"LI",{});var Q5e=s(gh);Rae=n(Q5e,"STRONG",{});var EHr=s(Rae);rdo=r(EHr,"maskformer"),EHr.forEach(t),tdo=r(Q5e," \u2014 "),MB=n(Q5e,"A",{href:!0});var CHr=s(MB);ado=r(CHr,"MaskFormerFeatureExtractor"),CHr.forEach(t),ndo=r(Q5e," (MaskFormer model)"),Q5e.forEach(t),sdo=i(te),hh=n(te,"LI",{});var H5e=s(hh);Pae=n(H5e,"STRONG",{});var wHr=s(Pae);ldo=r(wHr,"perceiver"),wHr.forEach(t),ido=r(H5e," \u2014 "),EB=n(H5e,"A",{href:!0});var AHr=s(EB);ddo=r(AHr,"PerceiverFeatureExtractor"),AHr.forEach(t),cdo=r(H5e," (Perceiver model)"),H5e.forEach(t),fdo=i(te),ph=n(te,"LI",{});var U5e=s(ph);Bae=n(U5e,"STRONG",{});var yHr=s(Bae);mdo=r(yHr,"poolformer"),yHr.forEach(t),gdo=r(U5e," \u2014 "),CB=n(U5e,"A",{href:!0});var LHr=s(CB);hdo=r(LHr,"PoolFormerFeatureExtractor"),LHr.forEach(t),pdo=r(U5e," (PoolFormer model)"),U5e.forEach(t),udo=i(te),uh=n(te,"LI",{});var J5e=s(uh);Iae=n(J5e,"STRONG",{});var xHr=s(Iae);_do=r(xHr,"regnet"),xHr.forEach(t),bdo=r(J5e," \u2014 "),wB=n(J5e,"A",{href:!0});var $Hr=s(wB);vdo=r($Hr,"ConvNextFeatureExtractor"),$Hr.forEach(t),Fdo=r(J5e," (RegNet model)"),J5e.forEach(t),Tdo=i(te),_h=n(te,"LI",{});var Y5e=s(_h);qae=n(Y5e,"STRONG",{});var kHr=s(qae);Mdo=r(kHr,"resnet"),kHr.forEach(t),Edo=r(Y5e," \u2014 "),AB=n(Y5e,"A",{href:!0});var SHr=s(AB);Cdo=r(SHr,"ConvNextFeatureExtractor"),SHr.forEach(t),wdo=r(Y5e," (ResNet model)"),Y5e.forEach(t),Ado=i(te),bh=n(te,"LI",{});var K5e=s(bh);Nae=n(K5e,"STRONG",{});var RHr=s(Nae);ydo=r(RHr,"segformer"),RHr.forEach(t),Ldo=r(K5e," \u2014 "),yB=n(K5e,"A",{href:!0});var PHr=s(yB);xdo=r(PHr,"SegformerFeatureExtractor"),PHr.forEach(t),$do=r(K5e," (SegFormer model)"),K5e.forEach(t),kdo=i(te),vh=n(te,"LI",{});var Z5e=s(vh);jae=n(Z5e,"STRONG",{});var BHr=s(jae);Sdo=r(BHr,"speech_to_text"),BHr.forEach(t),Rdo=r(Z5e," \u2014 "),LB=n(Z5e,"A",{href:!0});var IHr=s(LB);Pdo=r(IHr,"Speech2TextFeatureExtractor"),IHr.forEach(t),Bdo=r(Z5e," (Speech2Text model)"),Z5e.forEach(t),Ido=i(te),Fh=n(te,"LI",{});var ewe=s(Fh);Dae=n(ewe,"STRONG",{});var qHr=s(Dae);qdo=r(qHr,"swin"),qHr.forEach(t),Ndo=r(ewe," \u2014 "),xB=n(ewe,"A",{href:!0});var NHr=s(xB);jdo=r(NHr,"ViTFeatureExtractor"),NHr.forEach(t),Ddo=r(ewe," (Swin model)"),ewe.forEach(t),Gdo=i(te),Th=n(te,"LI",{});var owe=s(Th);Gae=n(owe,"STRONG",{});var jHr=s(Gae);Odo=r(jHr,"van"),jHr.forEach(t),Vdo=r(owe," \u2014 "),$B=n(owe,"A",{href:!0});var DHr=s($B);Xdo=r(DHr,"ConvNextFeatureExtractor"),DHr.forEach(t),zdo=r(owe," (VAN model)"),owe.forEach(t),Wdo=i(te),Mh=n(te,"LI",{});var rwe=s(Mh);Oae=n(rwe,"STRONG",{});var GHr=s(Oae);Qdo=r(GHr,"vit"),GHr.forEach(t),Hdo=r(rwe," \u2014 "),kB=n(rwe,"A",{href:!0});var OHr=s(kB);Udo=r(OHr,"ViTFeatureExtractor"),OHr.forEach(t),Jdo=r(rwe," (ViT model)"),rwe.forEach(t),Ydo=i(te),Eh=n(te,"LI",{});var twe=s(Eh);Vae=n(twe,"STRONG",{});var VHr=s(Vae);Kdo=r(VHr,"vit_mae"),VHr.forEach(t),Zdo=r(twe," \u2014 "),SB=n(twe,"A",{href:!0});var XHr=s(SB);eco=r(XHr,"ViTFeatureExtractor"),XHr.forEach(t),oco=r(twe," (ViTMAE model)"),twe.forEach(t),rco=i(te),Ch=n(te,"LI",{});var awe=s(Ch);Xae=n(awe,"STRONG",{});var zHr=s(Xae);tco=r(zHr,"wav2vec2"),zHr.forEach(t),aco=r(awe," \u2014 "),RB=n(awe,"A",{href:!0});var WHr=s(RB);nco=r(WHr,"Wav2Vec2FeatureExtractor"),WHr.forEach(t),sco=r(awe," (Wav2Vec2 model)"),awe.forEach(t),lco=i(te),wh=n(te,"LI",{});var nwe=s(wh);zae=n(nwe,"STRONG",{});var QHr=s(zae);ico=r(QHr,"wav2vec2-conformer"),QHr.forEach(t),dco=r(nwe," \u2014 "),PB=n(nwe,"A",{href:!0});var HHr=s(PB);cco=r(HHr,"Wav2Vec2FeatureExtractor"),HHr.forEach(t),fco=r(nwe," (Wav2Vec2-Conformer model)"),nwe.forEach(t),mco=i(te),Ah=n(te,"LI",{});var swe=s(Ah);Wae=n(swe,"STRONG",{});var UHr=s(Wae);gco=r(UHr,"yolos"),UHr.forEach(t),hco=r(swe," \u2014 "),BB=n(swe,"A",{href:!0});var JHr=s(BB);pco=r(JHr,"YolosFeatureExtractor"),JHr.forEach(t),uco=r(swe," (YOLOS model)"),swe.forEach(t),te.forEach(t),_co=i(Zt),T(yh.$$.fragment,Zt),bco=i(Zt),T(Lh.$$.fragment,Zt),Zt.forEach(t),vco=i(Ns),xh=n(Ns,"DIV",{class:!0});var GNe=s(xh);T(y6.$$.fragment,GNe),Fco=i(GNe),Qae=n(GNe,"P",{});var YHr=s(Qae);Tco=r(YHr,"Register a new feature extractor for this class."),YHr.forEach(t),GNe.forEach(t),Ns.forEach(t),DIe=i(f),Mi=n(f,"H2",{class:!0});var ONe=s(Mi);$h=n(ONe,"A",{id:!0,class:!0,href:!0});var KHr=s($h);Hae=n(KHr,"SPAN",{});var ZHr=s(Hae);T(L6.$$.fragment,ZHr),ZHr.forEach(t),KHr.forEach(t),Mco=i(ONe),Uae=n(ONe,"SPAN",{});var eUr=s(Uae);Eco=r(eUr,"AutoProcessor"),eUr.forEach(t),ONe.forEach(t),GIe=i(f),yo=n(f,"DIV",{class:!0});var js=s(yo);T(x6.$$.fragment,js),Cco=i(js),$6=n(js,"P",{});var VNe=s($6);wco=r(VNe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),IB=n(VNe,"A",{href:!0});var oUr=s(IB);Aco=r(oUr,"AutoProcessor.from_pretrained()"),oUr.forEach(t),yco=r(VNe," class method."),VNe.forEach(t),Lco=i(js),k6=n(js,"P",{});var XNe=s(k6);xco=r(XNe,"This class cannot be instantiated directly using "),Jae=n(XNe,"CODE",{});var rUr=s(Jae);$co=r(rUr,"__init__()"),rUr.forEach(t),kco=r(XNe," (throws an error)."),XNe.forEach(t),Sco=i(js),Ue=n(js,"DIV",{class:!0});var ea=s(Ue);T(S6.$$.fragment,ea),Rco=i(ea),Yae=n(ea,"P",{});var tUr=s(Yae);Pco=r(tUr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),tUr.forEach(t),Bco=i(ea),Ei=n(ea,"P",{});var LK=s(Ei);Ico=r(LK,"The processor class to instantiate is selected based on the "),Kae=n(LK,"CODE",{});var aUr=s(Kae);qco=r(aUr,"model_type"),aUr.forEach(t),Nco=r(LK,` property of the config object (either
passed as an argument or loaded from `),Zae=n(LK,"CODE",{});var nUr=s(Zae);jco=r(nUr,"pretrained_model_name_or_path"),nUr.forEach(t),Dco=r(LK," if possible):"),LK.forEach(t),Gco=i(ea),pe=n(ea,"UL",{});var be=s(pe);kh=n(be,"LI",{});var lwe=s(kh);ene=n(lwe,"STRONG",{});var sUr=s(ene);Oco=r(sUr,"clip"),sUr.forEach(t),Vco=r(lwe," \u2014 "),qB=n(lwe,"A",{href:!0});var lUr=s(qB);Xco=r(lUr,"CLIPProcessor"),lUr.forEach(t),zco=r(lwe," (CLIP model)"),lwe.forEach(t),Wco=i(be),Sh=n(be,"LI",{});var iwe=s(Sh);one=n(iwe,"STRONG",{});var iUr=s(one);Qco=r(iUr,"flava"),iUr.forEach(t),Hco=r(iwe," \u2014 "),rne=n(iwe,"CODE",{});var dUr=s(rne);Uco=r(dUr,"FLAVAProcessor"),dUr.forEach(t),Jco=r(iwe," (Flava model)"),iwe.forEach(t),Yco=i(be),Rh=n(be,"LI",{});var dwe=s(Rh);tne=n(dwe,"STRONG",{});var cUr=s(tne);Kco=r(cUr,"layoutlmv2"),cUr.forEach(t),Zco=r(dwe," \u2014 "),NB=n(dwe,"A",{href:!0});var fUr=s(NB);efo=r(fUr,"LayoutLMv2Processor"),fUr.forEach(t),ofo=r(dwe," (LayoutLMv2 model)"),dwe.forEach(t),rfo=i(be),Ph=n(be,"LI",{});var cwe=s(Ph);ane=n(cwe,"STRONG",{});var mUr=s(ane);tfo=r(mUr,"layoutxlm"),mUr.forEach(t),afo=r(cwe," \u2014 "),jB=n(cwe,"A",{href:!0});var gUr=s(jB);nfo=r(gUr,"LayoutXLMProcessor"),gUr.forEach(t),sfo=r(cwe," (LayoutXLM model)"),cwe.forEach(t),lfo=i(be),Bh=n(be,"LI",{});var fwe=s(Bh);nne=n(fwe,"STRONG",{});var hUr=s(nne);ifo=r(hUr,"sew"),hUr.forEach(t),dfo=r(fwe," \u2014 "),DB=n(fwe,"A",{href:!0});var pUr=s(DB);cfo=r(pUr,"Wav2Vec2Processor"),pUr.forEach(t),ffo=r(fwe," (SEW model)"),fwe.forEach(t),mfo=i(be),Ih=n(be,"LI",{});var mwe=s(Ih);sne=n(mwe,"STRONG",{});var uUr=s(sne);gfo=r(uUr,"sew-d"),uUr.forEach(t),hfo=r(mwe," \u2014 "),GB=n(mwe,"A",{href:!0});var _Ur=s(GB);pfo=r(_Ur,"Wav2Vec2Processor"),_Ur.forEach(t),ufo=r(mwe," (SEW-D model)"),mwe.forEach(t),_fo=i(be),qh=n(be,"LI",{});var gwe=s(qh);lne=n(gwe,"STRONG",{});var bUr=s(lne);bfo=r(bUr,"speech_to_text"),bUr.forEach(t),vfo=r(gwe," \u2014 "),OB=n(gwe,"A",{href:!0});var vUr=s(OB);Ffo=r(vUr,"Speech2TextProcessor"),vUr.forEach(t),Tfo=r(gwe," (Speech2Text model)"),gwe.forEach(t),Mfo=i(be),Nh=n(be,"LI",{});var hwe=s(Nh);ine=n(hwe,"STRONG",{});var FUr=s(ine);Efo=r(FUr,"speech_to_text_2"),FUr.forEach(t),Cfo=r(hwe," \u2014 "),VB=n(hwe,"A",{href:!0});var TUr=s(VB);wfo=r(TUr,"Speech2Text2Processor"),TUr.forEach(t),Afo=r(hwe," (Speech2Text2 model)"),hwe.forEach(t),yfo=i(be),jh=n(be,"LI",{});var pwe=s(jh);dne=n(pwe,"STRONG",{});var MUr=s(dne);Lfo=r(MUr,"trocr"),MUr.forEach(t),xfo=r(pwe," \u2014 "),XB=n(pwe,"A",{href:!0});var EUr=s(XB);$fo=r(EUr,"TrOCRProcessor"),EUr.forEach(t),kfo=r(pwe," (TrOCR model)"),pwe.forEach(t),Sfo=i(be),Dh=n(be,"LI",{});var uwe=s(Dh);cne=n(uwe,"STRONG",{});var CUr=s(cne);Rfo=r(CUr,"unispeech"),CUr.forEach(t),Pfo=r(uwe," \u2014 "),zB=n(uwe,"A",{href:!0});var wUr=s(zB);Bfo=r(wUr,"Wav2Vec2Processor"),wUr.forEach(t),Ifo=r(uwe," (UniSpeech model)"),uwe.forEach(t),qfo=i(be),Gh=n(be,"LI",{});var _we=s(Gh);fne=n(_we,"STRONG",{});var AUr=s(fne);Nfo=r(AUr,"unispeech-sat"),AUr.forEach(t),jfo=r(_we," \u2014 "),WB=n(_we,"A",{href:!0});var yUr=s(WB);Dfo=r(yUr,"Wav2Vec2Processor"),yUr.forEach(t),Gfo=r(_we," (UniSpeechSat model)"),_we.forEach(t),Ofo=i(be),Oh=n(be,"LI",{});var bwe=s(Oh);mne=n(bwe,"STRONG",{});var LUr=s(mne);Vfo=r(LUr,"vilt"),LUr.forEach(t),Xfo=r(bwe," \u2014 "),QB=n(bwe,"A",{href:!0});var xUr=s(QB);zfo=r(xUr,"ViltProcessor"),xUr.forEach(t),Wfo=r(bwe," (ViLT model)"),bwe.forEach(t),Qfo=i(be),Vh=n(be,"LI",{});var vwe=s(Vh);gne=n(vwe,"STRONG",{});var $Ur=s(gne);Hfo=r($Ur,"vision-text-dual-encoder"),$Ur.forEach(t),Ufo=r(vwe," \u2014 "),HB=n(vwe,"A",{href:!0});var kUr=s(HB);Jfo=r(kUr,"VisionTextDualEncoderProcessor"),kUr.forEach(t),Yfo=r(vwe," (VisionTextDualEncoder model)"),vwe.forEach(t),Kfo=i(be),Xh=n(be,"LI",{});var Fwe=s(Xh);hne=n(Fwe,"STRONG",{});var SUr=s(hne);Zfo=r(SUr,"wav2vec2"),SUr.forEach(t),emo=r(Fwe," \u2014 "),UB=n(Fwe,"A",{href:!0});var RUr=s(UB);omo=r(RUr,"Wav2Vec2Processor"),RUr.forEach(t),rmo=r(Fwe," (Wav2Vec2 model)"),Fwe.forEach(t),tmo=i(be),zh=n(be,"LI",{});var Twe=s(zh);pne=n(Twe,"STRONG",{});var PUr=s(pne);amo=r(PUr,"wav2vec2-conformer"),PUr.forEach(t),nmo=r(Twe," \u2014 "),JB=n(Twe,"A",{href:!0});var BUr=s(JB);smo=r(BUr,"Wav2Vec2Processor"),BUr.forEach(t),lmo=r(Twe," (Wav2Vec2-Conformer model)"),Twe.forEach(t),imo=i(be),Wh=n(be,"LI",{});var Mwe=s(Wh);une=n(Mwe,"STRONG",{});var IUr=s(une);dmo=r(IUr,"wavlm"),IUr.forEach(t),cmo=r(Mwe," \u2014 "),YB=n(Mwe,"A",{href:!0});var qUr=s(YB);fmo=r(qUr,"Wav2Vec2Processor"),qUr.forEach(t),mmo=r(Mwe," (WavLM model)"),Mwe.forEach(t),be.forEach(t),gmo=i(ea),T(Qh.$$.fragment,ea),hmo=i(ea),T(Hh.$$.fragment,ea),ea.forEach(t),pmo=i(js),Uh=n(js,"DIV",{class:!0});var zNe=s(Uh);T(R6.$$.fragment,zNe),umo=i(zNe),_ne=n(zNe,"P",{});var NUr=s(_ne);_mo=r(NUr,"Register a new processor for this class."),NUr.forEach(t),zNe.forEach(t),js.forEach(t),OIe=i(f),Ci=n(f,"H2",{class:!0});var WNe=s(Ci);Jh=n(WNe,"A",{id:!0,class:!0,href:!0});var jUr=s(Jh);bne=n(jUr,"SPAN",{});var DUr=s(bne);T(P6.$$.fragment,DUr),DUr.forEach(t),jUr.forEach(t),bmo=i(WNe),vne=n(WNe,"SPAN",{});var GUr=s(vne);vmo=r(GUr,"AutoModel"),GUr.forEach(t),WNe.forEach(t),VIe=i(f),Lo=n(f,"DIV",{class:!0});var Ds=s(Lo);T(B6.$$.fragment,Ds),Fmo=i(Ds),wi=n(Ds,"P",{});var xK=s(wi);Tmo=r(xK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),KB=n(xK,"A",{href:!0});var OUr=s(KB);Mmo=r(OUr,"from_pretrained()"),OUr.forEach(t),Emo=r(xK," class method or the "),ZB=n(xK,"A",{href:!0});var VUr=s(ZB);Cmo=r(VUr,"from_config()"),VUr.forEach(t),wmo=r(xK,` class
method.`),xK.forEach(t),Amo=i(Ds),I6=n(Ds,"P",{});var QNe=s(I6);ymo=r(QNe,"This class cannot be instantiated directly using "),Fne=n(QNe,"CODE",{});var XUr=s(Fne);Lmo=r(XUr,"__init__()"),XUr.forEach(t),xmo=r(QNe," (throws an error)."),QNe.forEach(t),$mo=i(Ds),tt=n(Ds,"DIV",{class:!0});var mw=s(tt);T(q6.$$.fragment,mw),kmo=i(mw),Tne=n(mw,"P",{});var zUr=s(Tne);Smo=r(zUr,"Instantiates one of the base model classes of the library from a configuration."),zUr.forEach(t),Rmo=i(mw),Ai=n(mw,"P",{});var $K=s(Ai);Pmo=r($K,`Note:
Loading a model from its configuration file does `),Mne=n($K,"STRONG",{});var WUr=s(Mne);Bmo=r(WUr,"not"),WUr.forEach(t),Imo=r($K,` load the model weights. It only affects the
model\u2019s configuration. Use `),eI=n($K,"A",{href:!0});var QUr=s(eI);qmo=r(QUr,"from_pretrained()"),QUr.forEach(t),Nmo=r($K," to load the model weights."),$K.forEach(t),jmo=i(mw),T(Yh.$$.fragment,mw),mw.forEach(t),Dmo=i(Ds),Je=n(Ds,"DIV",{class:!0});var oa=s(Je);T(N6.$$.fragment,oa),Gmo=i(oa),Ene=n(oa,"P",{});var HUr=s(Ene);Omo=r(HUr,"Instantiate one of the base model classes of the library from a pretrained model."),HUr.forEach(t),Vmo=i(oa),La=n(oa,"P",{});var gw=s(La);Xmo=r(gw,"The model class to instantiate is selected based on the "),Cne=n(gw,"CODE",{});var UUr=s(Cne);zmo=r(UUr,"model_type"),UUr.forEach(t),Wmo=r(gw,` property of the config object (either
passed as an argument or loaded from `),wne=n(gw,"CODE",{});var JUr=s(wne);Qmo=r(JUr,"pretrained_model_name_or_path"),JUr.forEach(t),Hmo=r(gw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ane=n(gw,"CODE",{});var YUr=s(Ane);Umo=r(YUr,"pretrained_model_name_or_path"),YUr.forEach(t),Jmo=r(gw,":"),gw.forEach(t),Ymo=i(oa),x=n(oa,"UL",{});var $=s(x);Kh=n($,"LI",{});var Ewe=s(Kh);yne=n(Ewe,"STRONG",{});var KUr=s(yne);Kmo=r(KUr,"albert"),KUr.forEach(t),Zmo=r(Ewe," \u2014 "),oI=n(Ewe,"A",{href:!0});var ZUr=s(oI);ego=r(ZUr,"AlbertModel"),ZUr.forEach(t),ogo=r(Ewe," (ALBERT model)"),Ewe.forEach(t),rgo=i($),Zh=n($,"LI",{});var Cwe=s(Zh);Lne=n(Cwe,"STRONG",{});var eJr=s(Lne);tgo=r(eJr,"bart"),eJr.forEach(t),ago=r(Cwe," \u2014 "),rI=n(Cwe,"A",{href:!0});var oJr=s(rI);ngo=r(oJr,"BartModel"),oJr.forEach(t),sgo=r(Cwe," (BART model)"),Cwe.forEach(t),lgo=i($),ep=n($,"LI",{});var wwe=s(ep);xne=n(wwe,"STRONG",{});var rJr=s(xne);igo=r(rJr,"beit"),rJr.forEach(t),dgo=r(wwe," \u2014 "),tI=n(wwe,"A",{href:!0});var tJr=s(tI);cgo=r(tJr,"BeitModel"),tJr.forEach(t),fgo=r(wwe," (BEiT model)"),wwe.forEach(t),mgo=i($),op=n($,"LI",{});var Awe=s(op);$ne=n(Awe,"STRONG",{});var aJr=s($ne);ggo=r(aJr,"bert"),aJr.forEach(t),hgo=r(Awe," \u2014 "),aI=n(Awe,"A",{href:!0});var nJr=s(aI);pgo=r(nJr,"BertModel"),nJr.forEach(t),ugo=r(Awe," (BERT model)"),Awe.forEach(t),_go=i($),rp=n($,"LI",{});var ywe=s(rp);kne=n(ywe,"STRONG",{});var sJr=s(kne);bgo=r(sJr,"bert-generation"),sJr.forEach(t),vgo=r(ywe," \u2014 "),nI=n(ywe,"A",{href:!0});var lJr=s(nI);Fgo=r(lJr,"BertGenerationEncoder"),lJr.forEach(t),Tgo=r(ywe," (Bert Generation model)"),ywe.forEach(t),Mgo=i($),tp=n($,"LI",{});var Lwe=s(tp);Sne=n(Lwe,"STRONG",{});var iJr=s(Sne);Ego=r(iJr,"big_bird"),iJr.forEach(t),Cgo=r(Lwe," \u2014 "),sI=n(Lwe,"A",{href:!0});var dJr=s(sI);wgo=r(dJr,"BigBirdModel"),dJr.forEach(t),Ago=r(Lwe," (BigBird model)"),Lwe.forEach(t),ygo=i($),ap=n($,"LI",{});var xwe=s(ap);Rne=n(xwe,"STRONG",{});var cJr=s(Rne);Lgo=r(cJr,"bigbird_pegasus"),cJr.forEach(t),xgo=r(xwe," \u2014 "),lI=n(xwe,"A",{href:!0});var fJr=s(lI);$go=r(fJr,"BigBirdPegasusModel"),fJr.forEach(t),kgo=r(xwe," (BigBirdPegasus model)"),xwe.forEach(t),Sgo=i($),np=n($,"LI",{});var $we=s(np);Pne=n($we,"STRONG",{});var mJr=s(Pne);Rgo=r(mJr,"blenderbot"),mJr.forEach(t),Pgo=r($we," \u2014 "),iI=n($we,"A",{href:!0});var gJr=s(iI);Bgo=r(gJr,"BlenderbotModel"),gJr.forEach(t),Igo=r($we," (Blenderbot model)"),$we.forEach(t),qgo=i($),sp=n($,"LI",{});var kwe=s(sp);Bne=n(kwe,"STRONG",{});var hJr=s(Bne);Ngo=r(hJr,"blenderbot-small"),hJr.forEach(t),jgo=r(kwe," \u2014 "),dI=n(kwe,"A",{href:!0});var pJr=s(dI);Dgo=r(pJr,"BlenderbotSmallModel"),pJr.forEach(t),Ggo=r(kwe," (BlenderbotSmall model)"),kwe.forEach(t),Ogo=i($),lp=n($,"LI",{});var Swe=s(lp);Ine=n(Swe,"STRONG",{});var uJr=s(Ine);Vgo=r(uJr,"camembert"),uJr.forEach(t),Xgo=r(Swe," \u2014 "),cI=n(Swe,"A",{href:!0});var _Jr=s(cI);zgo=r(_Jr,"CamembertModel"),_Jr.forEach(t),Wgo=r(Swe," (CamemBERT model)"),Swe.forEach(t),Qgo=i($),ip=n($,"LI",{});var Rwe=s(ip);qne=n(Rwe,"STRONG",{});var bJr=s(qne);Hgo=r(bJr,"canine"),bJr.forEach(t),Ugo=r(Rwe," \u2014 "),fI=n(Rwe,"A",{href:!0});var vJr=s(fI);Jgo=r(vJr,"CanineModel"),vJr.forEach(t),Ygo=r(Rwe," (Canine model)"),Rwe.forEach(t),Kgo=i($),dp=n($,"LI",{});var Pwe=s(dp);Nne=n(Pwe,"STRONG",{});var FJr=s(Nne);Zgo=r(FJr,"clip"),FJr.forEach(t),eho=r(Pwe," \u2014 "),mI=n(Pwe,"A",{href:!0});var TJr=s(mI);oho=r(TJr,"CLIPModel"),TJr.forEach(t),rho=r(Pwe," (CLIP model)"),Pwe.forEach(t),tho=i($),cp=n($,"LI",{});var Bwe=s(cp);jne=n(Bwe,"STRONG",{});var MJr=s(jne);aho=r(MJr,"convbert"),MJr.forEach(t),nho=r(Bwe," \u2014 "),gI=n(Bwe,"A",{href:!0});var EJr=s(gI);sho=r(EJr,"ConvBertModel"),EJr.forEach(t),lho=r(Bwe," (ConvBERT model)"),Bwe.forEach(t),iho=i($),fp=n($,"LI",{});var Iwe=s(fp);Dne=n(Iwe,"STRONG",{});var CJr=s(Dne);dho=r(CJr,"convnext"),CJr.forEach(t),cho=r(Iwe," \u2014 "),hI=n(Iwe,"A",{href:!0});var wJr=s(hI);fho=r(wJr,"ConvNextModel"),wJr.forEach(t),mho=r(Iwe," (ConvNext model)"),Iwe.forEach(t),gho=i($),mp=n($,"LI",{});var qwe=s(mp);Gne=n(qwe,"STRONG",{});var AJr=s(Gne);hho=r(AJr,"ctrl"),AJr.forEach(t),pho=r(qwe," \u2014 "),pI=n(qwe,"A",{href:!0});var yJr=s(pI);uho=r(yJr,"CTRLModel"),yJr.forEach(t),_ho=r(qwe," (CTRL model)"),qwe.forEach(t),bho=i($),gp=n($,"LI",{});var Nwe=s(gp);One=n(Nwe,"STRONG",{});var LJr=s(One);vho=r(LJr,"data2vec-audio"),LJr.forEach(t),Fho=r(Nwe," \u2014 "),uI=n(Nwe,"A",{href:!0});var xJr=s(uI);Tho=r(xJr,"Data2VecAudioModel"),xJr.forEach(t),Mho=r(Nwe," (Data2VecAudio model)"),Nwe.forEach(t),Eho=i($),hp=n($,"LI",{});var jwe=s(hp);Vne=n(jwe,"STRONG",{});var $Jr=s(Vne);Cho=r($Jr,"data2vec-text"),$Jr.forEach(t),who=r(jwe," \u2014 "),_I=n(jwe,"A",{href:!0});var kJr=s(_I);Aho=r(kJr,"Data2VecTextModel"),kJr.forEach(t),yho=r(jwe," (Data2VecText model)"),jwe.forEach(t),Lho=i($),pp=n($,"LI",{});var Dwe=s(pp);Xne=n(Dwe,"STRONG",{});var SJr=s(Xne);xho=r(SJr,"data2vec-vision"),SJr.forEach(t),$ho=r(Dwe," \u2014 "),bI=n(Dwe,"A",{href:!0});var RJr=s(bI);kho=r(RJr,"Data2VecVisionModel"),RJr.forEach(t),Sho=r(Dwe," (Data2VecVision model)"),Dwe.forEach(t),Rho=i($),up=n($,"LI",{});var Gwe=s(up);zne=n(Gwe,"STRONG",{});var PJr=s(zne);Pho=r(PJr,"deberta"),PJr.forEach(t),Bho=r(Gwe," \u2014 "),vI=n(Gwe,"A",{href:!0});var BJr=s(vI);Iho=r(BJr,"DebertaModel"),BJr.forEach(t),qho=r(Gwe," (DeBERTa model)"),Gwe.forEach(t),Nho=i($),_p=n($,"LI",{});var Owe=s(_p);Wne=n(Owe,"STRONG",{});var IJr=s(Wne);jho=r(IJr,"deberta-v2"),IJr.forEach(t),Dho=r(Owe," \u2014 "),FI=n(Owe,"A",{href:!0});var qJr=s(FI);Gho=r(qJr,"DebertaV2Model"),qJr.forEach(t),Oho=r(Owe," (DeBERTa-v2 model)"),Owe.forEach(t),Vho=i($),bp=n($,"LI",{});var Vwe=s(bp);Qne=n(Vwe,"STRONG",{});var NJr=s(Qne);Xho=r(NJr,"decision_transformer"),NJr.forEach(t),zho=r(Vwe," \u2014 "),TI=n(Vwe,"A",{href:!0});var jJr=s(TI);Who=r(jJr,"DecisionTransformerModel"),jJr.forEach(t),Qho=r(Vwe," (Decision Transformer model)"),Vwe.forEach(t),Hho=i($),vp=n($,"LI",{});var Xwe=s(vp);Hne=n(Xwe,"STRONG",{});var DJr=s(Hne);Uho=r(DJr,"deit"),DJr.forEach(t),Jho=r(Xwe," \u2014 "),MI=n(Xwe,"A",{href:!0});var GJr=s(MI);Yho=r(GJr,"DeiTModel"),GJr.forEach(t),Kho=r(Xwe," (DeiT model)"),Xwe.forEach(t),Zho=i($),Fp=n($,"LI",{});var zwe=s(Fp);Une=n(zwe,"STRONG",{});var OJr=s(Une);epo=r(OJr,"detr"),OJr.forEach(t),opo=r(zwe," \u2014 "),EI=n(zwe,"A",{href:!0});var VJr=s(EI);rpo=r(VJr,"DetrModel"),VJr.forEach(t),tpo=r(zwe," (DETR model)"),zwe.forEach(t),apo=i($),Tp=n($,"LI",{});var Wwe=s(Tp);Jne=n(Wwe,"STRONG",{});var XJr=s(Jne);npo=r(XJr,"distilbert"),XJr.forEach(t),spo=r(Wwe," \u2014 "),CI=n(Wwe,"A",{href:!0});var zJr=s(CI);lpo=r(zJr,"DistilBertModel"),zJr.forEach(t),ipo=r(Wwe," (DistilBERT model)"),Wwe.forEach(t),dpo=i($),Mp=n($,"LI",{});var Qwe=s(Mp);Yne=n(Qwe,"STRONG",{});var WJr=s(Yne);cpo=r(WJr,"dpr"),WJr.forEach(t),fpo=r(Qwe," \u2014 "),wI=n(Qwe,"A",{href:!0});var QJr=s(wI);mpo=r(QJr,"DPRQuestionEncoder"),QJr.forEach(t),gpo=r(Qwe," (DPR model)"),Qwe.forEach(t),hpo=i($),Ep=n($,"LI",{});var Hwe=s(Ep);Kne=n(Hwe,"STRONG",{});var HJr=s(Kne);ppo=r(HJr,"dpt"),HJr.forEach(t),upo=r(Hwe," \u2014 "),AI=n(Hwe,"A",{href:!0});var UJr=s(AI);_po=r(UJr,"DPTModel"),UJr.forEach(t),bpo=r(Hwe," (DPT model)"),Hwe.forEach(t),vpo=i($),Cp=n($,"LI",{});var Uwe=s(Cp);Zne=n(Uwe,"STRONG",{});var JJr=s(Zne);Fpo=r(JJr,"electra"),JJr.forEach(t),Tpo=r(Uwe," \u2014 "),yI=n(Uwe,"A",{href:!0});var YJr=s(yI);Mpo=r(YJr,"ElectraModel"),YJr.forEach(t),Epo=r(Uwe," (ELECTRA model)"),Uwe.forEach(t),Cpo=i($),wp=n($,"LI",{});var Jwe=s(wp);ese=n(Jwe,"STRONG",{});var KJr=s(ese);wpo=r(KJr,"flaubert"),KJr.forEach(t),Apo=r(Jwe," \u2014 "),LI=n(Jwe,"A",{href:!0});var ZJr=s(LI);ypo=r(ZJr,"FlaubertModel"),ZJr.forEach(t),Lpo=r(Jwe," (FlauBERT model)"),Jwe.forEach(t),xpo=i($),Ap=n($,"LI",{});var Ywe=s(Ap);ose=n(Ywe,"STRONG",{});var eYr=s(ose);$po=r(eYr,"flava"),eYr.forEach(t),kpo=r(Ywe," \u2014 "),xI=n(Ywe,"A",{href:!0});var oYr=s(xI);Spo=r(oYr,"FlavaModel"),oYr.forEach(t),Rpo=r(Ywe," (Flava model)"),Ywe.forEach(t),Ppo=i($),yp=n($,"LI",{});var Kwe=s(yp);rse=n(Kwe,"STRONG",{});var rYr=s(rse);Bpo=r(rYr,"fnet"),rYr.forEach(t),Ipo=r(Kwe," \u2014 "),$I=n(Kwe,"A",{href:!0});var tYr=s($I);qpo=r(tYr,"FNetModel"),tYr.forEach(t),Npo=r(Kwe," (FNet model)"),Kwe.forEach(t),jpo=i($),Lp=n($,"LI",{});var Zwe=s(Lp);tse=n(Zwe,"STRONG",{});var aYr=s(tse);Dpo=r(aYr,"fsmt"),aYr.forEach(t),Gpo=r(Zwe," \u2014 "),kI=n(Zwe,"A",{href:!0});var nYr=s(kI);Opo=r(nYr,"FSMTModel"),nYr.forEach(t),Vpo=r(Zwe," (FairSeq Machine-Translation model)"),Zwe.forEach(t),Xpo=i($),Rs=n($,"LI",{});var M$=s(Rs);ase=n(M$,"STRONG",{});var sYr=s(ase);zpo=r(sYr,"funnel"),sYr.forEach(t),Wpo=r(M$," \u2014 "),SI=n(M$,"A",{href:!0});var lYr=s(SI);Qpo=r(lYr,"FunnelModel"),lYr.forEach(t),Hpo=r(M$," or "),RI=n(M$,"A",{href:!0});var iYr=s(RI);Upo=r(iYr,"FunnelBaseModel"),iYr.forEach(t),Jpo=r(M$," (Funnel Transformer model)"),M$.forEach(t),Ypo=i($),xp=n($,"LI",{});var eAe=s(xp);nse=n(eAe,"STRONG",{});var dYr=s(nse);Kpo=r(dYr,"glpn"),dYr.forEach(t),Zpo=r(eAe," \u2014 "),PI=n(eAe,"A",{href:!0});var cYr=s(PI);euo=r(cYr,"GLPNModel"),cYr.forEach(t),ouo=r(eAe," (GLPN model)"),eAe.forEach(t),ruo=i($),$p=n($,"LI",{});var oAe=s($p);sse=n(oAe,"STRONG",{});var fYr=s(sse);tuo=r(fYr,"gpt2"),fYr.forEach(t),auo=r(oAe," \u2014 "),BI=n(oAe,"A",{href:!0});var mYr=s(BI);nuo=r(mYr,"GPT2Model"),mYr.forEach(t),suo=r(oAe," (OpenAI GPT-2 model)"),oAe.forEach(t),luo=i($),kp=n($,"LI",{});var rAe=s(kp);lse=n(rAe,"STRONG",{});var gYr=s(lse);iuo=r(gYr,"gpt_neo"),gYr.forEach(t),duo=r(rAe," \u2014 "),II=n(rAe,"A",{href:!0});var hYr=s(II);cuo=r(hYr,"GPTNeoModel"),hYr.forEach(t),fuo=r(rAe," (GPT Neo model)"),rAe.forEach(t),muo=i($),Sp=n($,"LI",{});var tAe=s(Sp);ise=n(tAe,"STRONG",{});var pYr=s(ise);guo=r(pYr,"gptj"),pYr.forEach(t),huo=r(tAe," \u2014 "),qI=n(tAe,"A",{href:!0});var uYr=s(qI);puo=r(uYr,"GPTJModel"),uYr.forEach(t),uuo=r(tAe," (GPT-J model)"),tAe.forEach(t),_uo=i($),Rp=n($,"LI",{});var aAe=s(Rp);dse=n(aAe,"STRONG",{});var _Yr=s(dse);buo=r(_Yr,"hubert"),_Yr.forEach(t),vuo=r(aAe," \u2014 "),NI=n(aAe,"A",{href:!0});var bYr=s(NI);Fuo=r(bYr,"HubertModel"),bYr.forEach(t),Tuo=r(aAe," (Hubert model)"),aAe.forEach(t),Muo=i($),Pp=n($,"LI",{});var nAe=s(Pp);cse=n(nAe,"STRONG",{});var vYr=s(cse);Euo=r(vYr,"ibert"),vYr.forEach(t),Cuo=r(nAe," \u2014 "),jI=n(nAe,"A",{href:!0});var FYr=s(jI);wuo=r(FYr,"IBertModel"),FYr.forEach(t),Auo=r(nAe," (I-BERT model)"),nAe.forEach(t),yuo=i($),Bp=n($,"LI",{});var sAe=s(Bp);fse=n(sAe,"STRONG",{});var TYr=s(fse);Luo=r(TYr,"imagegpt"),TYr.forEach(t),xuo=r(sAe," \u2014 "),DI=n(sAe,"A",{href:!0});var MYr=s(DI);$uo=r(MYr,"ImageGPTModel"),MYr.forEach(t),kuo=r(sAe," (ImageGPT model)"),sAe.forEach(t),Suo=i($),Ip=n($,"LI",{});var lAe=s(Ip);mse=n(lAe,"STRONG",{});var EYr=s(mse);Ruo=r(EYr,"layoutlm"),EYr.forEach(t),Puo=r(lAe," \u2014 "),GI=n(lAe,"A",{href:!0});var CYr=s(GI);Buo=r(CYr,"LayoutLMModel"),CYr.forEach(t),Iuo=r(lAe," (LayoutLM model)"),lAe.forEach(t),quo=i($),qp=n($,"LI",{});var iAe=s(qp);gse=n(iAe,"STRONG",{});var wYr=s(gse);Nuo=r(wYr,"layoutlmv2"),wYr.forEach(t),juo=r(iAe," \u2014 "),OI=n(iAe,"A",{href:!0});var AYr=s(OI);Duo=r(AYr,"LayoutLMv2Model"),AYr.forEach(t),Guo=r(iAe," (LayoutLMv2 model)"),iAe.forEach(t),Ouo=i($),Np=n($,"LI",{});var dAe=s(Np);hse=n(dAe,"STRONG",{});var yYr=s(hse);Vuo=r(yYr,"led"),yYr.forEach(t),Xuo=r(dAe," \u2014 "),VI=n(dAe,"A",{href:!0});var LYr=s(VI);zuo=r(LYr,"LEDModel"),LYr.forEach(t),Wuo=r(dAe," (LED model)"),dAe.forEach(t),Quo=i($),jp=n($,"LI",{});var cAe=s(jp);pse=n(cAe,"STRONG",{});var xYr=s(pse);Huo=r(xYr,"longformer"),xYr.forEach(t),Uuo=r(cAe," \u2014 "),XI=n(cAe,"A",{href:!0});var $Yr=s(XI);Juo=r($Yr,"LongformerModel"),$Yr.forEach(t),Yuo=r(cAe," (Longformer model)"),cAe.forEach(t),Kuo=i($),Dp=n($,"LI",{});var fAe=s(Dp);use=n(fAe,"STRONG",{});var kYr=s(use);Zuo=r(kYr,"luke"),kYr.forEach(t),e_o=r(fAe," \u2014 "),zI=n(fAe,"A",{href:!0});var SYr=s(zI);o_o=r(SYr,"LukeModel"),SYr.forEach(t),r_o=r(fAe," (LUKE model)"),fAe.forEach(t),t_o=i($),Gp=n($,"LI",{});var mAe=s(Gp);_se=n(mAe,"STRONG",{});var RYr=s(_se);a_o=r(RYr,"lxmert"),RYr.forEach(t),n_o=r(mAe," \u2014 "),WI=n(mAe,"A",{href:!0});var PYr=s(WI);s_o=r(PYr,"LxmertModel"),PYr.forEach(t),l_o=r(mAe," (LXMERT model)"),mAe.forEach(t),i_o=i($),Op=n($,"LI",{});var gAe=s(Op);bse=n(gAe,"STRONG",{});var BYr=s(bse);d_o=r(BYr,"m2m_100"),BYr.forEach(t),c_o=r(gAe," \u2014 "),QI=n(gAe,"A",{href:!0});var IYr=s(QI);f_o=r(IYr,"M2M100Model"),IYr.forEach(t),m_o=r(gAe," (M2M100 model)"),gAe.forEach(t),g_o=i($),Vp=n($,"LI",{});var hAe=s(Vp);vse=n(hAe,"STRONG",{});var qYr=s(vse);h_o=r(qYr,"marian"),qYr.forEach(t),p_o=r(hAe," \u2014 "),HI=n(hAe,"A",{href:!0});var NYr=s(HI);u_o=r(NYr,"MarianModel"),NYr.forEach(t),__o=r(hAe," (Marian model)"),hAe.forEach(t),b_o=i($),Xp=n($,"LI",{});var pAe=s(Xp);Fse=n(pAe,"STRONG",{});var jYr=s(Fse);v_o=r(jYr,"maskformer"),jYr.forEach(t),F_o=r(pAe," \u2014 "),UI=n(pAe,"A",{href:!0});var DYr=s(UI);T_o=r(DYr,"MaskFormerModel"),DYr.forEach(t),M_o=r(pAe," (MaskFormer model)"),pAe.forEach(t),E_o=i($),zp=n($,"LI",{});var uAe=s(zp);Tse=n(uAe,"STRONG",{});var GYr=s(Tse);C_o=r(GYr,"mbart"),GYr.forEach(t),w_o=r(uAe," \u2014 "),JI=n(uAe,"A",{href:!0});var OYr=s(JI);A_o=r(OYr,"MBartModel"),OYr.forEach(t),y_o=r(uAe," (mBART model)"),uAe.forEach(t),L_o=i($),Wp=n($,"LI",{});var _Ae=s(Wp);Mse=n(_Ae,"STRONG",{});var VYr=s(Mse);x_o=r(VYr,"megatron-bert"),VYr.forEach(t),$_o=r(_Ae," \u2014 "),YI=n(_Ae,"A",{href:!0});var XYr=s(YI);k_o=r(XYr,"MegatronBertModel"),XYr.forEach(t),S_o=r(_Ae," (MegatronBert model)"),_Ae.forEach(t),R_o=i($),Qp=n($,"LI",{});var bAe=s(Qp);Ese=n(bAe,"STRONG",{});var zYr=s(Ese);P_o=r(zYr,"mobilebert"),zYr.forEach(t),B_o=r(bAe," \u2014 "),KI=n(bAe,"A",{href:!0});var WYr=s(KI);I_o=r(WYr,"MobileBertModel"),WYr.forEach(t),q_o=r(bAe," (MobileBERT model)"),bAe.forEach(t),N_o=i($),Hp=n($,"LI",{});var vAe=s(Hp);Cse=n(vAe,"STRONG",{});var QYr=s(Cse);j_o=r(QYr,"mpnet"),QYr.forEach(t),D_o=r(vAe," \u2014 "),ZI=n(vAe,"A",{href:!0});var HYr=s(ZI);G_o=r(HYr,"MPNetModel"),HYr.forEach(t),O_o=r(vAe," (MPNet model)"),vAe.forEach(t),V_o=i($),Up=n($,"LI",{});var FAe=s(Up);wse=n(FAe,"STRONG",{});var UYr=s(wse);X_o=r(UYr,"mt5"),UYr.forEach(t),z_o=r(FAe," \u2014 "),eq=n(FAe,"A",{href:!0});var JYr=s(eq);W_o=r(JYr,"MT5Model"),JYr.forEach(t),Q_o=r(FAe," (mT5 model)"),FAe.forEach(t),H_o=i($),Jp=n($,"LI",{});var TAe=s(Jp);Ase=n(TAe,"STRONG",{});var YYr=s(Ase);U_o=r(YYr,"nystromformer"),YYr.forEach(t),J_o=r(TAe," \u2014 "),oq=n(TAe,"A",{href:!0});var KYr=s(oq);Y_o=r(KYr,"NystromformerModel"),KYr.forEach(t),K_o=r(TAe," (Nystromformer model)"),TAe.forEach(t),Z_o=i($),Yp=n($,"LI",{});var MAe=s(Yp);yse=n(MAe,"STRONG",{});var ZYr=s(yse);e1o=r(ZYr,"openai-gpt"),ZYr.forEach(t),o1o=r(MAe," \u2014 "),rq=n(MAe,"A",{href:!0});var eKr=s(rq);r1o=r(eKr,"OpenAIGPTModel"),eKr.forEach(t),t1o=r(MAe," (OpenAI GPT model)"),MAe.forEach(t),a1o=i($),Kp=n($,"LI",{});var EAe=s(Kp);Lse=n(EAe,"STRONG",{});var oKr=s(Lse);n1o=r(oKr,"opt"),oKr.forEach(t),s1o=r(EAe," \u2014 "),tq=n(EAe,"A",{href:!0});var rKr=s(tq);l1o=r(rKr,"OPTModel"),rKr.forEach(t),i1o=r(EAe," (OPT model)"),EAe.forEach(t),d1o=i($),Zp=n($,"LI",{});var CAe=s(Zp);xse=n(CAe,"STRONG",{});var tKr=s(xse);c1o=r(tKr,"pegasus"),tKr.forEach(t),f1o=r(CAe," \u2014 "),aq=n(CAe,"A",{href:!0});var aKr=s(aq);m1o=r(aKr,"PegasusModel"),aKr.forEach(t),g1o=r(CAe," (Pegasus model)"),CAe.forEach(t),h1o=i($),eu=n($,"LI",{});var wAe=s(eu);$se=n(wAe,"STRONG",{});var nKr=s($se);p1o=r(nKr,"perceiver"),nKr.forEach(t),u1o=r(wAe," \u2014 "),nq=n(wAe,"A",{href:!0});var sKr=s(nq);_1o=r(sKr,"PerceiverModel"),sKr.forEach(t),b1o=r(wAe," (Perceiver model)"),wAe.forEach(t),v1o=i($),ou=n($,"LI",{});var AAe=s(ou);kse=n(AAe,"STRONG",{});var lKr=s(kse);F1o=r(lKr,"plbart"),lKr.forEach(t),T1o=r(AAe," \u2014 "),sq=n(AAe,"A",{href:!0});var iKr=s(sq);M1o=r(iKr,"PLBartModel"),iKr.forEach(t),E1o=r(AAe," (PLBart model)"),AAe.forEach(t),C1o=i($),ru=n($,"LI",{});var yAe=s(ru);Sse=n(yAe,"STRONG",{});var dKr=s(Sse);w1o=r(dKr,"poolformer"),dKr.forEach(t),A1o=r(yAe," \u2014 "),lq=n(yAe,"A",{href:!0});var cKr=s(lq);y1o=r(cKr,"PoolFormerModel"),cKr.forEach(t),L1o=r(yAe," (PoolFormer model)"),yAe.forEach(t),x1o=i($),tu=n($,"LI",{});var LAe=s(tu);Rse=n(LAe,"STRONG",{});var fKr=s(Rse);$1o=r(fKr,"prophetnet"),fKr.forEach(t),k1o=r(LAe," \u2014 "),iq=n(LAe,"A",{href:!0});var mKr=s(iq);S1o=r(mKr,"ProphetNetModel"),mKr.forEach(t),R1o=r(LAe," (ProphetNet model)"),LAe.forEach(t),P1o=i($),au=n($,"LI",{});var xAe=s(au);Pse=n(xAe,"STRONG",{});var gKr=s(Pse);B1o=r(gKr,"qdqbert"),gKr.forEach(t),I1o=r(xAe," \u2014 "),dq=n(xAe,"A",{href:!0});var hKr=s(dq);q1o=r(hKr,"QDQBertModel"),hKr.forEach(t),N1o=r(xAe," (QDQBert model)"),xAe.forEach(t),j1o=i($),nu=n($,"LI",{});var $Ae=s(nu);Bse=n($Ae,"STRONG",{});var pKr=s(Bse);D1o=r(pKr,"reformer"),pKr.forEach(t),G1o=r($Ae," \u2014 "),cq=n($Ae,"A",{href:!0});var uKr=s(cq);O1o=r(uKr,"ReformerModel"),uKr.forEach(t),V1o=r($Ae," (Reformer model)"),$Ae.forEach(t),X1o=i($),su=n($,"LI",{});var kAe=s(su);Ise=n(kAe,"STRONG",{});var _Kr=s(Ise);z1o=r(_Kr,"regnet"),_Kr.forEach(t),W1o=r(kAe," \u2014 "),fq=n(kAe,"A",{href:!0});var bKr=s(fq);Q1o=r(bKr,"RegNetModel"),bKr.forEach(t),H1o=r(kAe," (RegNet model)"),kAe.forEach(t),U1o=i($),lu=n($,"LI",{});var SAe=s(lu);qse=n(SAe,"STRONG",{});var vKr=s(qse);J1o=r(vKr,"rembert"),vKr.forEach(t),Y1o=r(SAe," \u2014 "),mq=n(SAe,"A",{href:!0});var FKr=s(mq);K1o=r(FKr,"RemBertModel"),FKr.forEach(t),Z1o=r(SAe," (RemBERT model)"),SAe.forEach(t),ebo=i($),iu=n($,"LI",{});var RAe=s(iu);Nse=n(RAe,"STRONG",{});var TKr=s(Nse);obo=r(TKr,"resnet"),TKr.forEach(t),rbo=r(RAe," \u2014 "),gq=n(RAe,"A",{href:!0});var MKr=s(gq);tbo=r(MKr,"ResNetModel"),MKr.forEach(t),abo=r(RAe," (ResNet model)"),RAe.forEach(t),nbo=i($),du=n($,"LI",{});var PAe=s(du);jse=n(PAe,"STRONG",{});var EKr=s(jse);sbo=r(EKr,"retribert"),EKr.forEach(t),lbo=r(PAe," \u2014 "),hq=n(PAe,"A",{href:!0});var CKr=s(hq);ibo=r(CKr,"RetriBertModel"),CKr.forEach(t),dbo=r(PAe," (RetriBERT model)"),PAe.forEach(t),cbo=i($),cu=n($,"LI",{});var BAe=s(cu);Dse=n(BAe,"STRONG",{});var wKr=s(Dse);fbo=r(wKr,"roberta"),wKr.forEach(t),mbo=r(BAe," \u2014 "),pq=n(BAe,"A",{href:!0});var AKr=s(pq);gbo=r(AKr,"RobertaModel"),AKr.forEach(t),hbo=r(BAe," (RoBERTa model)"),BAe.forEach(t),pbo=i($),fu=n($,"LI",{});var IAe=s(fu);Gse=n(IAe,"STRONG",{});var yKr=s(Gse);ubo=r(yKr,"roformer"),yKr.forEach(t),_bo=r(IAe," \u2014 "),uq=n(IAe,"A",{href:!0});var LKr=s(uq);bbo=r(LKr,"RoFormerModel"),LKr.forEach(t),vbo=r(IAe," (RoFormer model)"),IAe.forEach(t),Fbo=i($),mu=n($,"LI",{});var qAe=s(mu);Ose=n(qAe,"STRONG",{});var xKr=s(Ose);Tbo=r(xKr,"segformer"),xKr.forEach(t),Mbo=r(qAe," \u2014 "),_q=n(qAe,"A",{href:!0});var $Kr=s(_q);Ebo=r($Kr,"SegformerModel"),$Kr.forEach(t),Cbo=r(qAe," (SegFormer model)"),qAe.forEach(t),wbo=i($),gu=n($,"LI",{});var NAe=s(gu);Vse=n(NAe,"STRONG",{});var kKr=s(Vse);Abo=r(kKr,"sew"),kKr.forEach(t),ybo=r(NAe," \u2014 "),bq=n(NAe,"A",{href:!0});var SKr=s(bq);Lbo=r(SKr,"SEWModel"),SKr.forEach(t),xbo=r(NAe," (SEW model)"),NAe.forEach(t),$bo=i($),hu=n($,"LI",{});var jAe=s(hu);Xse=n(jAe,"STRONG",{});var RKr=s(Xse);kbo=r(RKr,"sew-d"),RKr.forEach(t),Sbo=r(jAe," \u2014 "),vq=n(jAe,"A",{href:!0});var PKr=s(vq);Rbo=r(PKr,"SEWDModel"),PKr.forEach(t),Pbo=r(jAe," (SEW-D model)"),jAe.forEach(t),Bbo=i($),pu=n($,"LI",{});var DAe=s(pu);zse=n(DAe,"STRONG",{});var BKr=s(zse);Ibo=r(BKr,"speech_to_text"),BKr.forEach(t),qbo=r(DAe," \u2014 "),Fq=n(DAe,"A",{href:!0});var IKr=s(Fq);Nbo=r(IKr,"Speech2TextModel"),IKr.forEach(t),jbo=r(DAe," (Speech2Text model)"),DAe.forEach(t),Dbo=i($),uu=n($,"LI",{});var GAe=s(uu);Wse=n(GAe,"STRONG",{});var qKr=s(Wse);Gbo=r(qKr,"splinter"),qKr.forEach(t),Obo=r(GAe," \u2014 "),Tq=n(GAe,"A",{href:!0});var NKr=s(Tq);Vbo=r(NKr,"SplinterModel"),NKr.forEach(t),Xbo=r(GAe," (Splinter model)"),GAe.forEach(t),zbo=i($),_u=n($,"LI",{});var OAe=s(_u);Qse=n(OAe,"STRONG",{});var jKr=s(Qse);Wbo=r(jKr,"squeezebert"),jKr.forEach(t),Qbo=r(OAe," \u2014 "),Mq=n(OAe,"A",{href:!0});var DKr=s(Mq);Hbo=r(DKr,"SqueezeBertModel"),DKr.forEach(t),Ubo=r(OAe," (SqueezeBERT model)"),OAe.forEach(t),Jbo=i($),bu=n($,"LI",{});var VAe=s(bu);Hse=n(VAe,"STRONG",{});var GKr=s(Hse);Ybo=r(GKr,"swin"),GKr.forEach(t),Kbo=r(VAe," \u2014 "),Eq=n(VAe,"A",{href:!0});var OKr=s(Eq);Zbo=r(OKr,"SwinModel"),OKr.forEach(t),e2o=r(VAe," (Swin model)"),VAe.forEach(t),o2o=i($),vu=n($,"LI",{});var XAe=s(vu);Use=n(XAe,"STRONG",{});var VKr=s(Use);r2o=r(VKr,"t5"),VKr.forEach(t),t2o=r(XAe," \u2014 "),Cq=n(XAe,"A",{href:!0});var XKr=s(Cq);a2o=r(XKr,"T5Model"),XKr.forEach(t),n2o=r(XAe," (T5 model)"),XAe.forEach(t),s2o=i($),Fu=n($,"LI",{});var zAe=s(Fu);Jse=n(zAe,"STRONG",{});var zKr=s(Jse);l2o=r(zKr,"tapas"),zKr.forEach(t),i2o=r(zAe," \u2014 "),wq=n(zAe,"A",{href:!0});var WKr=s(wq);d2o=r(WKr,"TapasModel"),WKr.forEach(t),c2o=r(zAe," (TAPAS model)"),zAe.forEach(t),f2o=i($),Tu=n($,"LI",{});var WAe=s(Tu);Yse=n(WAe,"STRONG",{});var QKr=s(Yse);m2o=r(QKr,"transfo-xl"),QKr.forEach(t),g2o=r(WAe," \u2014 "),Aq=n(WAe,"A",{href:!0});var HKr=s(Aq);h2o=r(HKr,"TransfoXLModel"),HKr.forEach(t),p2o=r(WAe," (Transformer-XL model)"),WAe.forEach(t),u2o=i($),Mu=n($,"LI",{});var QAe=s(Mu);Kse=n(QAe,"STRONG",{});var UKr=s(Kse);_2o=r(UKr,"unispeech"),UKr.forEach(t),b2o=r(QAe," \u2014 "),yq=n(QAe,"A",{href:!0});var JKr=s(yq);v2o=r(JKr,"UniSpeechModel"),JKr.forEach(t),F2o=r(QAe," (UniSpeech model)"),QAe.forEach(t),T2o=i($),Eu=n($,"LI",{});var HAe=s(Eu);Zse=n(HAe,"STRONG",{});var YKr=s(Zse);M2o=r(YKr,"unispeech-sat"),YKr.forEach(t),E2o=r(HAe," \u2014 "),Lq=n(HAe,"A",{href:!0});var KKr=s(Lq);C2o=r(KKr,"UniSpeechSatModel"),KKr.forEach(t),w2o=r(HAe," (UniSpeechSat model)"),HAe.forEach(t),A2o=i($),Cu=n($,"LI",{});var UAe=s(Cu);ele=n(UAe,"STRONG",{});var ZKr=s(ele);y2o=r(ZKr,"van"),ZKr.forEach(t),L2o=r(UAe," \u2014 "),xq=n(UAe,"A",{href:!0});var eZr=s(xq);x2o=r(eZr,"VanModel"),eZr.forEach(t),$2o=r(UAe," (VAN model)"),UAe.forEach(t),k2o=i($),wu=n($,"LI",{});var JAe=s(wu);ole=n(JAe,"STRONG",{});var oZr=s(ole);S2o=r(oZr,"vilt"),oZr.forEach(t),R2o=r(JAe," \u2014 "),$q=n(JAe,"A",{href:!0});var rZr=s($q);P2o=r(rZr,"ViltModel"),rZr.forEach(t),B2o=r(JAe," (ViLT model)"),JAe.forEach(t),I2o=i($),Au=n($,"LI",{});var YAe=s(Au);rle=n(YAe,"STRONG",{});var tZr=s(rle);q2o=r(tZr,"vision-text-dual-encoder"),tZr.forEach(t),N2o=r(YAe," \u2014 "),kq=n(YAe,"A",{href:!0});var aZr=s(kq);j2o=r(aZr,"VisionTextDualEncoderModel"),aZr.forEach(t),D2o=r(YAe," (VisionTextDualEncoder model)"),YAe.forEach(t),G2o=i($),yu=n($,"LI",{});var KAe=s(yu);tle=n(KAe,"STRONG",{});var nZr=s(tle);O2o=r(nZr,"visual_bert"),nZr.forEach(t),V2o=r(KAe," \u2014 "),Sq=n(KAe,"A",{href:!0});var sZr=s(Sq);X2o=r(sZr,"VisualBertModel"),sZr.forEach(t),z2o=r(KAe," (VisualBert model)"),KAe.forEach(t),W2o=i($),Lu=n($,"LI",{});var ZAe=s(Lu);ale=n(ZAe,"STRONG",{});var lZr=s(ale);Q2o=r(lZr,"vit"),lZr.forEach(t),H2o=r(ZAe," \u2014 "),Rq=n(ZAe,"A",{href:!0});var iZr=s(Rq);U2o=r(iZr,"ViTModel"),iZr.forEach(t),J2o=r(ZAe," (ViT model)"),ZAe.forEach(t),Y2o=i($),xu=n($,"LI",{});var e6e=s(xu);nle=n(e6e,"STRONG",{});var dZr=s(nle);K2o=r(dZr,"vit_mae"),dZr.forEach(t),Z2o=r(e6e," \u2014 "),Pq=n(e6e,"A",{href:!0});var cZr=s(Pq);evo=r(cZr,"ViTMAEModel"),cZr.forEach(t),ovo=r(e6e," (ViTMAE model)"),e6e.forEach(t),rvo=i($),$u=n($,"LI",{});var o6e=s($u);sle=n(o6e,"STRONG",{});var fZr=s(sle);tvo=r(fZr,"wav2vec2"),fZr.forEach(t),avo=r(o6e," \u2014 "),Bq=n(o6e,"A",{href:!0});var mZr=s(Bq);nvo=r(mZr,"Wav2Vec2Model"),mZr.forEach(t),svo=r(o6e," (Wav2Vec2 model)"),o6e.forEach(t),lvo=i($),ku=n($,"LI",{});var r6e=s(ku);lle=n(r6e,"STRONG",{});var gZr=s(lle);ivo=r(gZr,"wav2vec2-conformer"),gZr.forEach(t),dvo=r(r6e," \u2014 "),Iq=n(r6e,"A",{href:!0});var hZr=s(Iq);cvo=r(hZr,"Wav2Vec2ConformerModel"),hZr.forEach(t),fvo=r(r6e," (Wav2Vec2-Conformer model)"),r6e.forEach(t),mvo=i($),Su=n($,"LI",{});var t6e=s(Su);ile=n(t6e,"STRONG",{});var pZr=s(ile);gvo=r(pZr,"wavlm"),pZr.forEach(t),hvo=r(t6e," \u2014 "),qq=n(t6e,"A",{href:!0});var uZr=s(qq);pvo=r(uZr,"WavLMModel"),uZr.forEach(t),uvo=r(t6e," (WavLM model)"),t6e.forEach(t),_vo=i($),Ru=n($,"LI",{});var a6e=s(Ru);dle=n(a6e,"STRONG",{});var _Zr=s(dle);bvo=r(_Zr,"xglm"),_Zr.forEach(t),vvo=r(a6e," \u2014 "),Nq=n(a6e,"A",{href:!0});var bZr=s(Nq);Fvo=r(bZr,"XGLMModel"),bZr.forEach(t),Tvo=r(a6e," (XGLM model)"),a6e.forEach(t),Mvo=i($),Pu=n($,"LI",{});var n6e=s(Pu);cle=n(n6e,"STRONG",{});var vZr=s(cle);Evo=r(vZr,"xlm"),vZr.forEach(t),Cvo=r(n6e," \u2014 "),jq=n(n6e,"A",{href:!0});var FZr=s(jq);wvo=r(FZr,"XLMModel"),FZr.forEach(t),Avo=r(n6e," (XLM model)"),n6e.forEach(t),yvo=i($),Bu=n($,"LI",{});var s6e=s(Bu);fle=n(s6e,"STRONG",{});var TZr=s(fle);Lvo=r(TZr,"xlm-prophetnet"),TZr.forEach(t),xvo=r(s6e," \u2014 "),Dq=n(s6e,"A",{href:!0});var MZr=s(Dq);$vo=r(MZr,"XLMProphetNetModel"),MZr.forEach(t),kvo=r(s6e," (XLMProphetNet model)"),s6e.forEach(t),Svo=i($),Iu=n($,"LI",{});var l6e=s(Iu);mle=n(l6e,"STRONG",{});var EZr=s(mle);Rvo=r(EZr,"xlm-roberta"),EZr.forEach(t),Pvo=r(l6e," \u2014 "),Gq=n(l6e,"A",{href:!0});var CZr=s(Gq);Bvo=r(CZr,"XLMRobertaModel"),CZr.forEach(t),Ivo=r(l6e," (XLM-RoBERTa model)"),l6e.forEach(t),qvo=i($),qu=n($,"LI",{});var i6e=s(qu);gle=n(i6e,"STRONG",{});var wZr=s(gle);Nvo=r(wZr,"xlm-roberta-xl"),wZr.forEach(t),jvo=r(i6e," \u2014 "),Oq=n(i6e,"A",{href:!0});var AZr=s(Oq);Dvo=r(AZr,"XLMRobertaXLModel"),AZr.forEach(t),Gvo=r(i6e," (XLM-RoBERTa-XL model)"),i6e.forEach(t),Ovo=i($),Nu=n($,"LI",{});var d6e=s(Nu);hle=n(d6e,"STRONG",{});var yZr=s(hle);Vvo=r(yZr,"xlnet"),yZr.forEach(t),Xvo=r(d6e," \u2014 "),Vq=n(d6e,"A",{href:!0});var LZr=s(Vq);zvo=r(LZr,"XLNetModel"),LZr.forEach(t),Wvo=r(d6e," (XLNet model)"),d6e.forEach(t),Qvo=i($),ju=n($,"LI",{});var c6e=s(ju);ple=n(c6e,"STRONG",{});var xZr=s(ple);Hvo=r(xZr,"yolos"),xZr.forEach(t),Uvo=r(c6e," \u2014 "),Xq=n(c6e,"A",{href:!0});var $Zr=s(Xq);Jvo=r($Zr,"YolosModel"),$Zr.forEach(t),Yvo=r(c6e," (YOLOS model)"),c6e.forEach(t),Kvo=i($),Du=n($,"LI",{});var f6e=s(Du);ule=n(f6e,"STRONG",{});var kZr=s(ule);Zvo=r(kZr,"yoso"),kZr.forEach(t),e3o=r(f6e," \u2014 "),zq=n(f6e,"A",{href:!0});var SZr=s(zq);o3o=r(SZr,"YosoModel"),SZr.forEach(t),r3o=r(f6e," (YOSO model)"),f6e.forEach(t),$.forEach(t),t3o=i(oa),Gu=n(oa,"P",{});var m6e=s(Gu);a3o=r(m6e,"The model is set in evaluation mode by default using "),_le=n(m6e,"CODE",{});var RZr=s(_le);n3o=r(RZr,"model.eval()"),RZr.forEach(t),s3o=r(m6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ble=n(m6e,"CODE",{});var PZr=s(ble);l3o=r(PZr,"model.train()"),PZr.forEach(t),m6e.forEach(t),i3o=i(oa),T(Ou.$$.fragment,oa),oa.forEach(t),Ds.forEach(t),XIe=i(f),yi=n(f,"H2",{class:!0});var HNe=s(yi);Vu=n(HNe,"A",{id:!0,class:!0,href:!0});var BZr=s(Vu);vle=n(BZr,"SPAN",{});var IZr=s(vle);T(j6.$$.fragment,IZr),IZr.forEach(t),BZr.forEach(t),d3o=i(HNe),Fle=n(HNe,"SPAN",{});var qZr=s(Fle);c3o=r(qZr,"AutoModelForPreTraining"),qZr.forEach(t),HNe.forEach(t),zIe=i(f),xo=n(f,"DIV",{class:!0});var Gs=s(xo);T(D6.$$.fragment,Gs),f3o=i(Gs),Li=n(Gs,"P",{});var kK=s(Li);m3o=r(kK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Wq=n(kK,"A",{href:!0});var NZr=s(Wq);g3o=r(NZr,"from_pretrained()"),NZr.forEach(t),h3o=r(kK," class method or the "),Qq=n(kK,"A",{href:!0});var jZr=s(Qq);p3o=r(jZr,"from_config()"),jZr.forEach(t),u3o=r(kK,` class
method.`),kK.forEach(t),_3o=i(Gs),G6=n(Gs,"P",{});var UNe=s(G6);b3o=r(UNe,"This class cannot be instantiated directly using "),Tle=n(UNe,"CODE",{});var DZr=s(Tle);v3o=r(DZr,"__init__()"),DZr.forEach(t),F3o=r(UNe," (throws an error)."),UNe.forEach(t),T3o=i(Gs),at=n(Gs,"DIV",{class:!0});var hw=s(at);T(O6.$$.fragment,hw),M3o=i(hw),Mle=n(hw,"P",{});var GZr=s(Mle);E3o=r(GZr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),GZr.forEach(t),C3o=i(hw),xi=n(hw,"P",{});var SK=s(xi);w3o=r(SK,`Note:
Loading a model from its configuration file does `),Ele=n(SK,"STRONG",{});var OZr=s(Ele);A3o=r(OZr,"not"),OZr.forEach(t),y3o=r(SK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Hq=n(SK,"A",{href:!0});var VZr=s(Hq);L3o=r(VZr,"from_pretrained()"),VZr.forEach(t),x3o=r(SK," to load the model weights."),SK.forEach(t),$3o=i(hw),T(Xu.$$.fragment,hw),hw.forEach(t),k3o=i(Gs),Ye=n(Gs,"DIV",{class:!0});var ra=s(Ye);T(V6.$$.fragment,ra),S3o=i(ra),Cle=n(ra,"P",{});var XZr=s(Cle);R3o=r(XZr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),XZr.forEach(t),P3o=i(ra),xa=n(ra,"P",{});var pw=s(xa);B3o=r(pw,"The model class to instantiate is selected based on the "),wle=n(pw,"CODE",{});var zZr=s(wle);I3o=r(zZr,"model_type"),zZr.forEach(t),q3o=r(pw,` property of the config object (either
passed as an argument or loaded from `),Ale=n(pw,"CODE",{});var WZr=s(Ale);N3o=r(WZr,"pretrained_model_name_or_path"),WZr.forEach(t),j3o=r(pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yle=n(pw,"CODE",{});var QZr=s(yle);D3o=r(QZr,"pretrained_model_name_or_path"),QZr.forEach(t),G3o=r(pw,":"),pw.forEach(t),O3o=i(ra),G=n(ra,"UL",{});var O=s(G);zu=n(O,"LI",{});var g6e=s(zu);Lle=n(g6e,"STRONG",{});var HZr=s(Lle);V3o=r(HZr,"albert"),HZr.forEach(t),X3o=r(g6e," \u2014 "),Uq=n(g6e,"A",{href:!0});var UZr=s(Uq);z3o=r(UZr,"AlbertForPreTraining"),UZr.forEach(t),W3o=r(g6e," (ALBERT model)"),g6e.forEach(t),Q3o=i(O),Wu=n(O,"LI",{});var h6e=s(Wu);xle=n(h6e,"STRONG",{});var JZr=s(xle);H3o=r(JZr,"bart"),JZr.forEach(t),U3o=r(h6e," \u2014 "),Jq=n(h6e,"A",{href:!0});var YZr=s(Jq);J3o=r(YZr,"BartForConditionalGeneration"),YZr.forEach(t),Y3o=r(h6e," (BART model)"),h6e.forEach(t),K3o=i(O),Qu=n(O,"LI",{});var p6e=s(Qu);$le=n(p6e,"STRONG",{});var KZr=s($le);Z3o=r(KZr,"bert"),KZr.forEach(t),eFo=r(p6e," \u2014 "),Yq=n(p6e,"A",{href:!0});var ZZr=s(Yq);oFo=r(ZZr,"BertForPreTraining"),ZZr.forEach(t),rFo=r(p6e," (BERT model)"),p6e.forEach(t),tFo=i(O),Hu=n(O,"LI",{});var u6e=s(Hu);kle=n(u6e,"STRONG",{});var eet=s(kle);aFo=r(eet,"big_bird"),eet.forEach(t),nFo=r(u6e," \u2014 "),Kq=n(u6e,"A",{href:!0});var oet=s(Kq);sFo=r(oet,"BigBirdForPreTraining"),oet.forEach(t),lFo=r(u6e," (BigBird model)"),u6e.forEach(t),iFo=i(O),Uu=n(O,"LI",{});var _6e=s(Uu);Sle=n(_6e,"STRONG",{});var ret=s(Sle);dFo=r(ret,"camembert"),ret.forEach(t),cFo=r(_6e," \u2014 "),Zq=n(_6e,"A",{href:!0});var tet=s(Zq);fFo=r(tet,"CamembertForMaskedLM"),tet.forEach(t),mFo=r(_6e," (CamemBERT model)"),_6e.forEach(t),gFo=i(O),Ju=n(O,"LI",{});var b6e=s(Ju);Rle=n(b6e,"STRONG",{});var aet=s(Rle);hFo=r(aet,"ctrl"),aet.forEach(t),pFo=r(b6e," \u2014 "),eN=n(b6e,"A",{href:!0});var net=s(eN);uFo=r(net,"CTRLLMHeadModel"),net.forEach(t),_Fo=r(b6e," (CTRL model)"),b6e.forEach(t),bFo=i(O),Yu=n(O,"LI",{});var v6e=s(Yu);Ple=n(v6e,"STRONG",{});var set=s(Ple);vFo=r(set,"data2vec-text"),set.forEach(t),FFo=r(v6e," \u2014 "),oN=n(v6e,"A",{href:!0});var iet=s(oN);TFo=r(iet,"Data2VecTextForMaskedLM"),iet.forEach(t),MFo=r(v6e," (Data2VecText model)"),v6e.forEach(t),EFo=i(O),Ku=n(O,"LI",{});var F6e=s(Ku);Ble=n(F6e,"STRONG",{});var det=s(Ble);CFo=r(det,"deberta"),det.forEach(t),wFo=r(F6e," \u2014 "),rN=n(F6e,"A",{href:!0});var cet=s(rN);AFo=r(cet,"DebertaForMaskedLM"),cet.forEach(t),yFo=r(F6e," (DeBERTa model)"),F6e.forEach(t),LFo=i(O),Zu=n(O,"LI",{});var T6e=s(Zu);Ile=n(T6e,"STRONG",{});var fet=s(Ile);xFo=r(fet,"deberta-v2"),fet.forEach(t),$Fo=r(T6e," \u2014 "),tN=n(T6e,"A",{href:!0});var met=s(tN);kFo=r(met,"DebertaV2ForMaskedLM"),met.forEach(t),SFo=r(T6e," (DeBERTa-v2 model)"),T6e.forEach(t),RFo=i(O),e_=n(O,"LI",{});var M6e=s(e_);qle=n(M6e,"STRONG",{});var get=s(qle);PFo=r(get,"distilbert"),get.forEach(t),BFo=r(M6e," \u2014 "),aN=n(M6e,"A",{href:!0});var het=s(aN);IFo=r(het,"DistilBertForMaskedLM"),het.forEach(t),qFo=r(M6e," (DistilBERT model)"),M6e.forEach(t),NFo=i(O),o_=n(O,"LI",{});var E6e=s(o_);Nle=n(E6e,"STRONG",{});var pet=s(Nle);jFo=r(pet,"electra"),pet.forEach(t),DFo=r(E6e," \u2014 "),nN=n(E6e,"A",{href:!0});var uet=s(nN);GFo=r(uet,"ElectraForPreTraining"),uet.forEach(t),OFo=r(E6e," (ELECTRA model)"),E6e.forEach(t),VFo=i(O),r_=n(O,"LI",{});var C6e=s(r_);jle=n(C6e,"STRONG",{});var _et=s(jle);XFo=r(_et,"flaubert"),_et.forEach(t),zFo=r(C6e," \u2014 "),sN=n(C6e,"A",{href:!0});var bet=s(sN);WFo=r(bet,"FlaubertWithLMHeadModel"),bet.forEach(t),QFo=r(C6e," (FlauBERT model)"),C6e.forEach(t),HFo=i(O),t_=n(O,"LI",{});var w6e=s(t_);Dle=n(w6e,"STRONG",{});var vet=s(Dle);UFo=r(vet,"flava"),vet.forEach(t),JFo=r(w6e," \u2014 "),lN=n(w6e,"A",{href:!0});var Fet=s(lN);YFo=r(Fet,"FlavaForPreTraining"),Fet.forEach(t),KFo=r(w6e," (Flava model)"),w6e.forEach(t),ZFo=i(O),a_=n(O,"LI",{});var A6e=s(a_);Gle=n(A6e,"STRONG",{});var Tet=s(Gle);e0o=r(Tet,"fnet"),Tet.forEach(t),o0o=r(A6e," \u2014 "),iN=n(A6e,"A",{href:!0});var Met=s(iN);r0o=r(Met,"FNetForPreTraining"),Met.forEach(t),t0o=r(A6e," (FNet model)"),A6e.forEach(t),a0o=i(O),n_=n(O,"LI",{});var y6e=s(n_);Ole=n(y6e,"STRONG",{});var Eet=s(Ole);n0o=r(Eet,"fsmt"),Eet.forEach(t),s0o=r(y6e," \u2014 "),dN=n(y6e,"A",{href:!0});var Cet=s(dN);l0o=r(Cet,"FSMTForConditionalGeneration"),Cet.forEach(t),i0o=r(y6e," (FairSeq Machine-Translation model)"),y6e.forEach(t),d0o=i(O),s_=n(O,"LI",{});var L6e=s(s_);Vle=n(L6e,"STRONG",{});var wet=s(Vle);c0o=r(wet,"funnel"),wet.forEach(t),f0o=r(L6e," \u2014 "),cN=n(L6e,"A",{href:!0});var Aet=s(cN);m0o=r(Aet,"FunnelForPreTraining"),Aet.forEach(t),g0o=r(L6e," (Funnel Transformer model)"),L6e.forEach(t),h0o=i(O),l_=n(O,"LI",{});var x6e=s(l_);Xle=n(x6e,"STRONG",{});var yet=s(Xle);p0o=r(yet,"gpt2"),yet.forEach(t),u0o=r(x6e," \u2014 "),fN=n(x6e,"A",{href:!0});var Let=s(fN);_0o=r(Let,"GPT2LMHeadModel"),Let.forEach(t),b0o=r(x6e," (OpenAI GPT-2 model)"),x6e.forEach(t),v0o=i(O),i_=n(O,"LI",{});var $6e=s(i_);zle=n($6e,"STRONG",{});var xet=s(zle);F0o=r(xet,"ibert"),xet.forEach(t),T0o=r($6e," \u2014 "),mN=n($6e,"A",{href:!0});var $et=s(mN);M0o=r($et,"IBertForMaskedLM"),$et.forEach(t),E0o=r($6e," (I-BERT model)"),$6e.forEach(t),C0o=i(O),d_=n(O,"LI",{});var k6e=s(d_);Wle=n(k6e,"STRONG",{});var ket=s(Wle);w0o=r(ket,"layoutlm"),ket.forEach(t),A0o=r(k6e," \u2014 "),gN=n(k6e,"A",{href:!0});var Set=s(gN);y0o=r(Set,"LayoutLMForMaskedLM"),Set.forEach(t),L0o=r(k6e," (LayoutLM model)"),k6e.forEach(t),x0o=i(O),c_=n(O,"LI",{});var S6e=s(c_);Qle=n(S6e,"STRONG",{});var Ret=s(Qle);$0o=r(Ret,"longformer"),Ret.forEach(t),k0o=r(S6e," \u2014 "),hN=n(S6e,"A",{href:!0});var Pet=s(hN);S0o=r(Pet,"LongformerForMaskedLM"),Pet.forEach(t),R0o=r(S6e," (Longformer model)"),S6e.forEach(t),P0o=i(O),f_=n(O,"LI",{});var R6e=s(f_);Hle=n(R6e,"STRONG",{});var Bet=s(Hle);B0o=r(Bet,"lxmert"),Bet.forEach(t),I0o=r(R6e," \u2014 "),pN=n(R6e,"A",{href:!0});var Iet=s(pN);q0o=r(Iet,"LxmertForPreTraining"),Iet.forEach(t),N0o=r(R6e," (LXMERT model)"),R6e.forEach(t),j0o=i(O),m_=n(O,"LI",{});var P6e=s(m_);Ule=n(P6e,"STRONG",{});var qet=s(Ule);D0o=r(qet,"megatron-bert"),qet.forEach(t),G0o=r(P6e," \u2014 "),uN=n(P6e,"A",{href:!0});var Net=s(uN);O0o=r(Net,"MegatronBertForPreTraining"),Net.forEach(t),V0o=r(P6e," (MegatronBert model)"),P6e.forEach(t),X0o=i(O),g_=n(O,"LI",{});var B6e=s(g_);Jle=n(B6e,"STRONG",{});var jet=s(Jle);z0o=r(jet,"mobilebert"),jet.forEach(t),W0o=r(B6e," \u2014 "),_N=n(B6e,"A",{href:!0});var Det=s(_N);Q0o=r(Det,"MobileBertForPreTraining"),Det.forEach(t),H0o=r(B6e," (MobileBERT model)"),B6e.forEach(t),U0o=i(O),h_=n(O,"LI",{});var I6e=s(h_);Yle=n(I6e,"STRONG",{});var Get=s(Yle);J0o=r(Get,"mpnet"),Get.forEach(t),Y0o=r(I6e," \u2014 "),bN=n(I6e,"A",{href:!0});var Oet=s(bN);K0o=r(Oet,"MPNetForMaskedLM"),Oet.forEach(t),Z0o=r(I6e," (MPNet model)"),I6e.forEach(t),eTo=i(O),p_=n(O,"LI",{});var q6e=s(p_);Kle=n(q6e,"STRONG",{});var Vet=s(Kle);oTo=r(Vet,"openai-gpt"),Vet.forEach(t),rTo=r(q6e," \u2014 "),vN=n(q6e,"A",{href:!0});var Xet=s(vN);tTo=r(Xet,"OpenAIGPTLMHeadModel"),Xet.forEach(t),aTo=r(q6e," (OpenAI GPT model)"),q6e.forEach(t),nTo=i(O),u_=n(O,"LI",{});var N6e=s(u_);Zle=n(N6e,"STRONG",{});var zet=s(Zle);sTo=r(zet,"retribert"),zet.forEach(t),lTo=r(N6e," \u2014 "),FN=n(N6e,"A",{href:!0});var Wet=s(FN);iTo=r(Wet,"RetriBertModel"),Wet.forEach(t),dTo=r(N6e," (RetriBERT model)"),N6e.forEach(t),cTo=i(O),__=n(O,"LI",{});var j6e=s(__);eie=n(j6e,"STRONG",{});var Qet=s(eie);fTo=r(Qet,"roberta"),Qet.forEach(t),mTo=r(j6e," \u2014 "),TN=n(j6e,"A",{href:!0});var Het=s(TN);gTo=r(Het,"RobertaForMaskedLM"),Het.forEach(t),hTo=r(j6e," (RoBERTa model)"),j6e.forEach(t),pTo=i(O),b_=n(O,"LI",{});var D6e=s(b_);oie=n(D6e,"STRONG",{});var Uet=s(oie);uTo=r(Uet,"splinter"),Uet.forEach(t),_To=r(D6e," \u2014 "),MN=n(D6e,"A",{href:!0});var Jet=s(MN);bTo=r(Jet,"SplinterForPreTraining"),Jet.forEach(t),vTo=r(D6e," (Splinter model)"),D6e.forEach(t),FTo=i(O),v_=n(O,"LI",{});var G6e=s(v_);rie=n(G6e,"STRONG",{});var Yet=s(rie);TTo=r(Yet,"squeezebert"),Yet.forEach(t),MTo=r(G6e," \u2014 "),EN=n(G6e,"A",{href:!0});var Ket=s(EN);ETo=r(Ket,"SqueezeBertForMaskedLM"),Ket.forEach(t),CTo=r(G6e," (SqueezeBERT model)"),G6e.forEach(t),wTo=i(O),F_=n(O,"LI",{});var O6e=s(F_);tie=n(O6e,"STRONG",{});var Zet=s(tie);ATo=r(Zet,"t5"),Zet.forEach(t),yTo=r(O6e," \u2014 "),CN=n(O6e,"A",{href:!0});var eot=s(CN);LTo=r(eot,"T5ForConditionalGeneration"),eot.forEach(t),xTo=r(O6e," (T5 model)"),O6e.forEach(t),$To=i(O),T_=n(O,"LI",{});var V6e=s(T_);aie=n(V6e,"STRONG",{});var oot=s(aie);kTo=r(oot,"tapas"),oot.forEach(t),STo=r(V6e," \u2014 "),wN=n(V6e,"A",{href:!0});var rot=s(wN);RTo=r(rot,"TapasForMaskedLM"),rot.forEach(t),PTo=r(V6e," (TAPAS model)"),V6e.forEach(t),BTo=i(O),M_=n(O,"LI",{});var X6e=s(M_);nie=n(X6e,"STRONG",{});var tot=s(nie);ITo=r(tot,"transfo-xl"),tot.forEach(t),qTo=r(X6e," \u2014 "),AN=n(X6e,"A",{href:!0});var aot=s(AN);NTo=r(aot,"TransfoXLLMHeadModel"),aot.forEach(t),jTo=r(X6e," (Transformer-XL model)"),X6e.forEach(t),DTo=i(O),E_=n(O,"LI",{});var z6e=s(E_);sie=n(z6e,"STRONG",{});var not=s(sie);GTo=r(not,"unispeech"),not.forEach(t),OTo=r(z6e," \u2014 "),yN=n(z6e,"A",{href:!0});var sot=s(yN);VTo=r(sot,"UniSpeechForPreTraining"),sot.forEach(t),XTo=r(z6e," (UniSpeech model)"),z6e.forEach(t),zTo=i(O),C_=n(O,"LI",{});var W6e=s(C_);lie=n(W6e,"STRONG",{});var lot=s(lie);WTo=r(lot,"unispeech-sat"),lot.forEach(t),QTo=r(W6e," \u2014 "),LN=n(W6e,"A",{href:!0});var iot=s(LN);HTo=r(iot,"UniSpeechSatForPreTraining"),iot.forEach(t),UTo=r(W6e," (UniSpeechSat model)"),W6e.forEach(t),JTo=i(O),w_=n(O,"LI",{});var Q6e=s(w_);iie=n(Q6e,"STRONG",{});var dot=s(iie);YTo=r(dot,"visual_bert"),dot.forEach(t),KTo=r(Q6e," \u2014 "),xN=n(Q6e,"A",{href:!0});var cot=s(xN);ZTo=r(cot,"VisualBertForPreTraining"),cot.forEach(t),e7o=r(Q6e," (VisualBert model)"),Q6e.forEach(t),o7o=i(O),A_=n(O,"LI",{});var H6e=s(A_);die=n(H6e,"STRONG",{});var fot=s(die);r7o=r(fot,"vit_mae"),fot.forEach(t),t7o=r(H6e," \u2014 "),$N=n(H6e,"A",{href:!0});var mot=s($N);a7o=r(mot,"ViTMAEForPreTraining"),mot.forEach(t),n7o=r(H6e," (ViTMAE model)"),H6e.forEach(t),s7o=i(O),y_=n(O,"LI",{});var U6e=s(y_);cie=n(U6e,"STRONG",{});var got=s(cie);l7o=r(got,"wav2vec2"),got.forEach(t),i7o=r(U6e," \u2014 "),kN=n(U6e,"A",{href:!0});var hot=s(kN);d7o=r(hot,"Wav2Vec2ForPreTraining"),hot.forEach(t),c7o=r(U6e," (Wav2Vec2 model)"),U6e.forEach(t),f7o=i(O),L_=n(O,"LI",{});var J6e=s(L_);fie=n(J6e,"STRONG",{});var pot=s(fie);m7o=r(pot,"wav2vec2-conformer"),pot.forEach(t),g7o=r(J6e," \u2014 "),SN=n(J6e,"A",{href:!0});var uot=s(SN);h7o=r(uot,"Wav2Vec2ConformerForPreTraining"),uot.forEach(t),p7o=r(J6e," (Wav2Vec2-Conformer model)"),J6e.forEach(t),u7o=i(O),x_=n(O,"LI",{});var Y6e=s(x_);mie=n(Y6e,"STRONG",{});var _ot=s(mie);_7o=r(_ot,"xlm"),_ot.forEach(t),b7o=r(Y6e," \u2014 "),RN=n(Y6e,"A",{href:!0});var bot=s(RN);v7o=r(bot,"XLMWithLMHeadModel"),bot.forEach(t),F7o=r(Y6e," (XLM model)"),Y6e.forEach(t),T7o=i(O),$_=n(O,"LI",{});var K6e=s($_);gie=n(K6e,"STRONG",{});var vot=s(gie);M7o=r(vot,"xlm-roberta"),vot.forEach(t),E7o=r(K6e," \u2014 "),PN=n(K6e,"A",{href:!0});var Fot=s(PN);C7o=r(Fot,"XLMRobertaForMaskedLM"),Fot.forEach(t),w7o=r(K6e," (XLM-RoBERTa model)"),K6e.forEach(t),A7o=i(O),k_=n(O,"LI",{});var Z6e=s(k_);hie=n(Z6e,"STRONG",{});var Tot=s(hie);y7o=r(Tot,"xlm-roberta-xl"),Tot.forEach(t),L7o=r(Z6e," \u2014 "),BN=n(Z6e,"A",{href:!0});var Mot=s(BN);x7o=r(Mot,"XLMRobertaXLForMaskedLM"),Mot.forEach(t),$7o=r(Z6e," (XLM-RoBERTa-XL model)"),Z6e.forEach(t),k7o=i(O),S_=n(O,"LI",{});var eye=s(S_);pie=n(eye,"STRONG",{});var Eot=s(pie);S7o=r(Eot,"xlnet"),Eot.forEach(t),R7o=r(eye," \u2014 "),IN=n(eye,"A",{href:!0});var Cot=s(IN);P7o=r(Cot,"XLNetLMHeadModel"),Cot.forEach(t),B7o=r(eye," (XLNet model)"),eye.forEach(t),O.forEach(t),I7o=i(ra),R_=n(ra,"P",{});var oye=s(R_);q7o=r(oye,"The model is set in evaluation mode by default using "),uie=n(oye,"CODE",{});var wot=s(uie);N7o=r(wot,"model.eval()"),wot.forEach(t),j7o=r(oye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_ie=n(oye,"CODE",{});var Aot=s(_ie);D7o=r(Aot,"model.train()"),Aot.forEach(t),oye.forEach(t),G7o=i(ra),T(P_.$$.fragment,ra),ra.forEach(t),Gs.forEach(t),WIe=i(f),$i=n(f,"H2",{class:!0});var JNe=s($i);B_=n(JNe,"A",{id:!0,class:!0,href:!0});var yot=s(B_);bie=n(yot,"SPAN",{});var Lot=s(bie);T(X6.$$.fragment,Lot),Lot.forEach(t),yot.forEach(t),O7o=i(JNe),vie=n(JNe,"SPAN",{});var xot=s(vie);V7o=r(xot,"AutoModelForCausalLM"),xot.forEach(t),JNe.forEach(t),QIe=i(f),$o=n(f,"DIV",{class:!0});var Os=s($o);T(z6.$$.fragment,Os),X7o=i(Os),ki=n(Os,"P",{});var RK=s(ki);z7o=r(RK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),qN=n(RK,"A",{href:!0});var $ot=s(qN);W7o=r($ot,"from_pretrained()"),$ot.forEach(t),Q7o=r(RK," class method or the "),NN=n(RK,"A",{href:!0});var kot=s(NN);H7o=r(kot,"from_config()"),kot.forEach(t),U7o=r(RK,` class
method.`),RK.forEach(t),J7o=i(Os),W6=n(Os,"P",{});var YNe=s(W6);Y7o=r(YNe,"This class cannot be instantiated directly using "),Fie=n(YNe,"CODE",{});var Sot=s(Fie);K7o=r(Sot,"__init__()"),Sot.forEach(t),Z7o=r(YNe," (throws an error)."),YNe.forEach(t),eMo=i(Os),nt=n(Os,"DIV",{class:!0});var uw=s(nt);T(Q6.$$.fragment,uw),oMo=i(uw),Tie=n(uw,"P",{});var Rot=s(Tie);rMo=r(Rot,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Rot.forEach(t),tMo=i(uw),Si=n(uw,"P",{});var PK=s(Si);aMo=r(PK,`Note:
Loading a model from its configuration file does `),Mie=n(PK,"STRONG",{});var Pot=s(Mie);nMo=r(Pot,"not"),Pot.forEach(t),sMo=r(PK,` load the model weights. It only affects the
model\u2019s configuration. Use `),jN=n(PK,"A",{href:!0});var Bot=s(jN);lMo=r(Bot,"from_pretrained()"),Bot.forEach(t),iMo=r(PK," to load the model weights."),PK.forEach(t),dMo=i(uw),T(I_.$$.fragment,uw),uw.forEach(t),cMo=i(Os),Ke=n(Os,"DIV",{class:!0});var ta=s(Ke);T(H6.$$.fragment,ta),fMo=i(ta),Eie=n(ta,"P",{});var Iot=s(Eie);mMo=r(Iot,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Iot.forEach(t),gMo=i(ta),$a=n(ta,"P",{});var _w=s($a);hMo=r(_w,"The model class to instantiate is selected based on the "),Cie=n(_w,"CODE",{});var qot=s(Cie);pMo=r(qot,"model_type"),qot.forEach(t),uMo=r(_w,` property of the config object (either
passed as an argument or loaded from `),wie=n(_w,"CODE",{});var Not=s(wie);_Mo=r(Not,"pretrained_model_name_or_path"),Not.forEach(t),bMo=r(_w,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Aie=n(_w,"CODE",{});var jot=s(Aie);vMo=r(jot,"pretrained_model_name_or_path"),jot.forEach(t),FMo=r(_w,":"),_w.forEach(t),TMo=i(ta),z=n(ta,"UL",{});var Q=s(z);q_=n(Q,"LI",{});var rye=s(q_);yie=n(rye,"STRONG",{});var Dot=s(yie);MMo=r(Dot,"bart"),Dot.forEach(t),EMo=r(rye," \u2014 "),DN=n(rye,"A",{href:!0});var Got=s(DN);CMo=r(Got,"BartForCausalLM"),Got.forEach(t),wMo=r(rye," (BART model)"),rye.forEach(t),AMo=i(Q),N_=n(Q,"LI",{});var tye=s(N_);Lie=n(tye,"STRONG",{});var Oot=s(Lie);yMo=r(Oot,"bert"),Oot.forEach(t),LMo=r(tye," \u2014 "),GN=n(tye,"A",{href:!0});var Vot=s(GN);xMo=r(Vot,"BertLMHeadModel"),Vot.forEach(t),$Mo=r(tye," (BERT model)"),tye.forEach(t),kMo=i(Q),j_=n(Q,"LI",{});var aye=s(j_);xie=n(aye,"STRONG",{});var Xot=s(xie);SMo=r(Xot,"bert-generation"),Xot.forEach(t),RMo=r(aye," \u2014 "),ON=n(aye,"A",{href:!0});var zot=s(ON);PMo=r(zot,"BertGenerationDecoder"),zot.forEach(t),BMo=r(aye," (Bert Generation model)"),aye.forEach(t),IMo=i(Q),D_=n(Q,"LI",{});var nye=s(D_);$ie=n(nye,"STRONG",{});var Wot=s($ie);qMo=r(Wot,"big_bird"),Wot.forEach(t),NMo=r(nye," \u2014 "),VN=n(nye,"A",{href:!0});var Qot=s(VN);jMo=r(Qot,"BigBirdForCausalLM"),Qot.forEach(t),DMo=r(nye," (BigBird model)"),nye.forEach(t),GMo=i(Q),G_=n(Q,"LI",{});var sye=s(G_);kie=n(sye,"STRONG",{});var Hot=s(kie);OMo=r(Hot,"bigbird_pegasus"),Hot.forEach(t),VMo=r(sye," \u2014 "),XN=n(sye,"A",{href:!0});var Uot=s(XN);XMo=r(Uot,"BigBirdPegasusForCausalLM"),Uot.forEach(t),zMo=r(sye," (BigBirdPegasus model)"),sye.forEach(t),WMo=i(Q),O_=n(Q,"LI",{});var lye=s(O_);Sie=n(lye,"STRONG",{});var Jot=s(Sie);QMo=r(Jot,"blenderbot"),Jot.forEach(t),HMo=r(lye," \u2014 "),zN=n(lye,"A",{href:!0});var Yot=s(zN);UMo=r(Yot,"BlenderbotForCausalLM"),Yot.forEach(t),JMo=r(lye," (Blenderbot model)"),lye.forEach(t),YMo=i(Q),V_=n(Q,"LI",{});var iye=s(V_);Rie=n(iye,"STRONG",{});var Kot=s(Rie);KMo=r(Kot,"blenderbot-small"),Kot.forEach(t),ZMo=r(iye," \u2014 "),WN=n(iye,"A",{href:!0});var Zot=s(WN);e4o=r(Zot,"BlenderbotSmallForCausalLM"),Zot.forEach(t),o4o=r(iye," (BlenderbotSmall model)"),iye.forEach(t),r4o=i(Q),X_=n(Q,"LI",{});var dye=s(X_);Pie=n(dye,"STRONG",{});var ert=s(Pie);t4o=r(ert,"camembert"),ert.forEach(t),a4o=r(dye," \u2014 "),QN=n(dye,"A",{href:!0});var ort=s(QN);n4o=r(ort,"CamembertForCausalLM"),ort.forEach(t),s4o=r(dye," (CamemBERT model)"),dye.forEach(t),l4o=i(Q),z_=n(Q,"LI",{});var cye=s(z_);Bie=n(cye,"STRONG",{});var rrt=s(Bie);i4o=r(rrt,"ctrl"),rrt.forEach(t),d4o=r(cye," \u2014 "),HN=n(cye,"A",{href:!0});var trt=s(HN);c4o=r(trt,"CTRLLMHeadModel"),trt.forEach(t),f4o=r(cye," (CTRL model)"),cye.forEach(t),m4o=i(Q),W_=n(Q,"LI",{});var fye=s(W_);Iie=n(fye,"STRONG",{});var art=s(Iie);g4o=r(art,"data2vec-text"),art.forEach(t),h4o=r(fye," \u2014 "),UN=n(fye,"A",{href:!0});var nrt=s(UN);p4o=r(nrt,"Data2VecTextForCausalLM"),nrt.forEach(t),u4o=r(fye," (Data2VecText model)"),fye.forEach(t),_4o=i(Q),Q_=n(Q,"LI",{});var mye=s(Q_);qie=n(mye,"STRONG",{});var srt=s(qie);b4o=r(srt,"electra"),srt.forEach(t),v4o=r(mye," \u2014 "),JN=n(mye,"A",{href:!0});var lrt=s(JN);F4o=r(lrt,"ElectraForCausalLM"),lrt.forEach(t),T4o=r(mye," (ELECTRA model)"),mye.forEach(t),M4o=i(Q),H_=n(Q,"LI",{});var gye=s(H_);Nie=n(gye,"STRONG",{});var irt=s(Nie);E4o=r(irt,"gpt2"),irt.forEach(t),C4o=r(gye," \u2014 "),YN=n(gye,"A",{href:!0});var drt=s(YN);w4o=r(drt,"GPT2LMHeadModel"),drt.forEach(t),A4o=r(gye," (OpenAI GPT-2 model)"),gye.forEach(t),y4o=i(Q),U_=n(Q,"LI",{});var hye=s(U_);jie=n(hye,"STRONG",{});var crt=s(jie);L4o=r(crt,"gpt_neo"),crt.forEach(t),x4o=r(hye," \u2014 "),KN=n(hye,"A",{href:!0});var frt=s(KN);$4o=r(frt,"GPTNeoForCausalLM"),frt.forEach(t),k4o=r(hye," (GPT Neo model)"),hye.forEach(t),S4o=i(Q),J_=n(Q,"LI",{});var pye=s(J_);Die=n(pye,"STRONG",{});var mrt=s(Die);R4o=r(mrt,"gptj"),mrt.forEach(t),P4o=r(pye," \u2014 "),ZN=n(pye,"A",{href:!0});var grt=s(ZN);B4o=r(grt,"GPTJForCausalLM"),grt.forEach(t),I4o=r(pye," (GPT-J model)"),pye.forEach(t),q4o=i(Q),Y_=n(Q,"LI",{});var uye=s(Y_);Gie=n(uye,"STRONG",{});var hrt=s(Gie);N4o=r(hrt,"marian"),hrt.forEach(t),j4o=r(uye," \u2014 "),ej=n(uye,"A",{href:!0});var prt=s(ej);D4o=r(prt,"MarianForCausalLM"),prt.forEach(t),G4o=r(uye," (Marian model)"),uye.forEach(t),O4o=i(Q),K_=n(Q,"LI",{});var _ye=s(K_);Oie=n(_ye,"STRONG",{});var urt=s(Oie);V4o=r(urt,"mbart"),urt.forEach(t),X4o=r(_ye," \u2014 "),oj=n(_ye,"A",{href:!0});var _rt=s(oj);z4o=r(_rt,"MBartForCausalLM"),_rt.forEach(t),W4o=r(_ye," (mBART model)"),_ye.forEach(t),Q4o=i(Q),Z_=n(Q,"LI",{});var bye=s(Z_);Vie=n(bye,"STRONG",{});var brt=s(Vie);H4o=r(brt,"megatron-bert"),brt.forEach(t),U4o=r(bye," \u2014 "),rj=n(bye,"A",{href:!0});var vrt=s(rj);J4o=r(vrt,"MegatronBertForCausalLM"),vrt.forEach(t),Y4o=r(bye," (MegatronBert model)"),bye.forEach(t),K4o=i(Q),e1=n(Q,"LI",{});var vye=s(e1);Xie=n(vye,"STRONG",{});var Frt=s(Xie);Z4o=r(Frt,"openai-gpt"),Frt.forEach(t),eEo=r(vye," \u2014 "),tj=n(vye,"A",{href:!0});var Trt=s(tj);oEo=r(Trt,"OpenAIGPTLMHeadModel"),Trt.forEach(t),rEo=r(vye," (OpenAI GPT model)"),vye.forEach(t),tEo=i(Q),o1=n(Q,"LI",{});var Fye=s(o1);zie=n(Fye,"STRONG",{});var Mrt=s(zie);aEo=r(Mrt,"opt"),Mrt.forEach(t),nEo=r(Fye," \u2014 "),aj=n(Fye,"A",{href:!0});var Ert=s(aj);sEo=r(Ert,"OPTForCausalLM"),Ert.forEach(t),lEo=r(Fye," (OPT model)"),Fye.forEach(t),iEo=i(Q),r1=n(Q,"LI",{});var Tye=s(r1);Wie=n(Tye,"STRONG",{});var Crt=s(Wie);dEo=r(Crt,"pegasus"),Crt.forEach(t),cEo=r(Tye," \u2014 "),nj=n(Tye,"A",{href:!0});var wrt=s(nj);fEo=r(wrt,"PegasusForCausalLM"),wrt.forEach(t),mEo=r(Tye," (Pegasus model)"),Tye.forEach(t),gEo=i(Q),t1=n(Q,"LI",{});var Mye=s(t1);Qie=n(Mye,"STRONG",{});var Art=s(Qie);hEo=r(Art,"plbart"),Art.forEach(t),pEo=r(Mye," \u2014 "),sj=n(Mye,"A",{href:!0});var yrt=s(sj);uEo=r(yrt,"PLBartForCausalLM"),yrt.forEach(t),_Eo=r(Mye," (PLBart model)"),Mye.forEach(t),bEo=i(Q),a1=n(Q,"LI",{});var Eye=s(a1);Hie=n(Eye,"STRONG",{});var Lrt=s(Hie);vEo=r(Lrt,"prophetnet"),Lrt.forEach(t),FEo=r(Eye," \u2014 "),lj=n(Eye,"A",{href:!0});var xrt=s(lj);TEo=r(xrt,"ProphetNetForCausalLM"),xrt.forEach(t),MEo=r(Eye," (ProphetNet model)"),Eye.forEach(t),EEo=i(Q),n1=n(Q,"LI",{});var Cye=s(n1);Uie=n(Cye,"STRONG",{});var $rt=s(Uie);CEo=r($rt,"qdqbert"),$rt.forEach(t),wEo=r(Cye," \u2014 "),ij=n(Cye,"A",{href:!0});var krt=s(ij);AEo=r(krt,"QDQBertLMHeadModel"),krt.forEach(t),yEo=r(Cye," (QDQBert model)"),Cye.forEach(t),LEo=i(Q),s1=n(Q,"LI",{});var wye=s(s1);Jie=n(wye,"STRONG",{});var Srt=s(Jie);xEo=r(Srt,"reformer"),Srt.forEach(t),$Eo=r(wye," \u2014 "),dj=n(wye,"A",{href:!0});var Rrt=s(dj);kEo=r(Rrt,"ReformerModelWithLMHead"),Rrt.forEach(t),SEo=r(wye," (Reformer model)"),wye.forEach(t),REo=i(Q),l1=n(Q,"LI",{});var Aye=s(l1);Yie=n(Aye,"STRONG",{});var Prt=s(Yie);PEo=r(Prt,"rembert"),Prt.forEach(t),BEo=r(Aye," \u2014 "),cj=n(Aye,"A",{href:!0});var Brt=s(cj);IEo=r(Brt,"RemBertForCausalLM"),Brt.forEach(t),qEo=r(Aye," (RemBERT model)"),Aye.forEach(t),NEo=i(Q),i1=n(Q,"LI",{});var yye=s(i1);Kie=n(yye,"STRONG",{});var Irt=s(Kie);jEo=r(Irt,"roberta"),Irt.forEach(t),DEo=r(yye," \u2014 "),fj=n(yye,"A",{href:!0});var qrt=s(fj);GEo=r(qrt,"RobertaForCausalLM"),qrt.forEach(t),OEo=r(yye," (RoBERTa model)"),yye.forEach(t),VEo=i(Q),d1=n(Q,"LI",{});var Lye=s(d1);Zie=n(Lye,"STRONG",{});var Nrt=s(Zie);XEo=r(Nrt,"roformer"),Nrt.forEach(t),zEo=r(Lye," \u2014 "),mj=n(Lye,"A",{href:!0});var jrt=s(mj);WEo=r(jrt,"RoFormerForCausalLM"),jrt.forEach(t),QEo=r(Lye," (RoFormer model)"),Lye.forEach(t),HEo=i(Q),c1=n(Q,"LI",{});var xye=s(c1);ede=n(xye,"STRONG",{});var Drt=s(ede);UEo=r(Drt,"speech_to_text_2"),Drt.forEach(t),JEo=r(xye," \u2014 "),gj=n(xye,"A",{href:!0});var Grt=s(gj);YEo=r(Grt,"Speech2Text2ForCausalLM"),Grt.forEach(t),KEo=r(xye," (Speech2Text2 model)"),xye.forEach(t),ZEo=i(Q),f1=n(Q,"LI",{});var $ye=s(f1);ode=n($ye,"STRONG",{});var Ort=s(ode);eCo=r(Ort,"transfo-xl"),Ort.forEach(t),oCo=r($ye," \u2014 "),hj=n($ye,"A",{href:!0});var Vrt=s(hj);rCo=r(Vrt,"TransfoXLLMHeadModel"),Vrt.forEach(t),tCo=r($ye," (Transformer-XL model)"),$ye.forEach(t),aCo=i(Q),m1=n(Q,"LI",{});var kye=s(m1);rde=n(kye,"STRONG",{});var Xrt=s(rde);nCo=r(Xrt,"trocr"),Xrt.forEach(t),sCo=r(kye," \u2014 "),pj=n(kye,"A",{href:!0});var zrt=s(pj);lCo=r(zrt,"TrOCRForCausalLM"),zrt.forEach(t),iCo=r(kye," (TrOCR model)"),kye.forEach(t),dCo=i(Q),g1=n(Q,"LI",{});var Sye=s(g1);tde=n(Sye,"STRONG",{});var Wrt=s(tde);cCo=r(Wrt,"xglm"),Wrt.forEach(t),fCo=r(Sye," \u2014 "),uj=n(Sye,"A",{href:!0});var Qrt=s(uj);mCo=r(Qrt,"XGLMForCausalLM"),Qrt.forEach(t),gCo=r(Sye," (XGLM model)"),Sye.forEach(t),hCo=i(Q),h1=n(Q,"LI",{});var Rye=s(h1);ade=n(Rye,"STRONG",{});var Hrt=s(ade);pCo=r(Hrt,"xlm"),Hrt.forEach(t),uCo=r(Rye," \u2014 "),_j=n(Rye,"A",{href:!0});var Urt=s(_j);_Co=r(Urt,"XLMWithLMHeadModel"),Urt.forEach(t),bCo=r(Rye," (XLM model)"),Rye.forEach(t),vCo=i(Q),p1=n(Q,"LI",{});var Pye=s(p1);nde=n(Pye,"STRONG",{});var Jrt=s(nde);FCo=r(Jrt,"xlm-prophetnet"),Jrt.forEach(t),TCo=r(Pye," \u2014 "),bj=n(Pye,"A",{href:!0});var Yrt=s(bj);MCo=r(Yrt,"XLMProphetNetForCausalLM"),Yrt.forEach(t),ECo=r(Pye," (XLMProphetNet model)"),Pye.forEach(t),CCo=i(Q),u1=n(Q,"LI",{});var Bye=s(u1);sde=n(Bye,"STRONG",{});var Krt=s(sde);wCo=r(Krt,"xlm-roberta"),Krt.forEach(t),ACo=r(Bye," \u2014 "),vj=n(Bye,"A",{href:!0});var Zrt=s(vj);yCo=r(Zrt,"XLMRobertaForCausalLM"),Zrt.forEach(t),LCo=r(Bye," (XLM-RoBERTa model)"),Bye.forEach(t),xCo=i(Q),_1=n(Q,"LI",{});var Iye=s(_1);lde=n(Iye,"STRONG",{});var ett=s(lde);$Co=r(ett,"xlm-roberta-xl"),ett.forEach(t),kCo=r(Iye," \u2014 "),Fj=n(Iye,"A",{href:!0});var ott=s(Fj);SCo=r(ott,"XLMRobertaXLForCausalLM"),ott.forEach(t),RCo=r(Iye," (XLM-RoBERTa-XL model)"),Iye.forEach(t),PCo=i(Q),b1=n(Q,"LI",{});var qye=s(b1);ide=n(qye,"STRONG",{});var rtt=s(ide);BCo=r(rtt,"xlnet"),rtt.forEach(t),ICo=r(qye," \u2014 "),Tj=n(qye,"A",{href:!0});var ttt=s(Tj);qCo=r(ttt,"XLNetLMHeadModel"),ttt.forEach(t),NCo=r(qye," (XLNet model)"),qye.forEach(t),Q.forEach(t),jCo=i(ta),v1=n(ta,"P",{});var Nye=s(v1);DCo=r(Nye,"The model is set in evaluation mode by default using "),dde=n(Nye,"CODE",{});var att=s(dde);GCo=r(att,"model.eval()"),att.forEach(t),OCo=r(Nye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cde=n(Nye,"CODE",{});var ntt=s(cde);VCo=r(ntt,"model.train()"),ntt.forEach(t),Nye.forEach(t),XCo=i(ta),T(F1.$$.fragment,ta),ta.forEach(t),Os.forEach(t),HIe=i(f),Ri=n(f,"H2",{class:!0});var KNe=s(Ri);T1=n(KNe,"A",{id:!0,class:!0,href:!0});var stt=s(T1);fde=n(stt,"SPAN",{});var ltt=s(fde);T(U6.$$.fragment,ltt),ltt.forEach(t),stt.forEach(t),zCo=i(KNe),mde=n(KNe,"SPAN",{});var itt=s(mde);WCo=r(itt,"AutoModelForMaskedLM"),itt.forEach(t),KNe.forEach(t),UIe=i(f),ko=n(f,"DIV",{class:!0});var Vs=s(ko);T(J6.$$.fragment,Vs),QCo=i(Vs),Pi=n(Vs,"P",{});var BK=s(Pi);HCo=r(BK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Mj=n(BK,"A",{href:!0});var dtt=s(Mj);UCo=r(dtt,"from_pretrained()"),dtt.forEach(t),JCo=r(BK," class method or the "),Ej=n(BK,"A",{href:!0});var ctt=s(Ej);YCo=r(ctt,"from_config()"),ctt.forEach(t),KCo=r(BK,` class
method.`),BK.forEach(t),ZCo=i(Vs),Y6=n(Vs,"P",{});var ZNe=s(Y6);e5o=r(ZNe,"This class cannot be instantiated directly using "),gde=n(ZNe,"CODE",{});var ftt=s(gde);o5o=r(ftt,"__init__()"),ftt.forEach(t),r5o=r(ZNe," (throws an error)."),ZNe.forEach(t),t5o=i(Vs),st=n(Vs,"DIV",{class:!0});var bw=s(st);T(K6.$$.fragment,bw),a5o=i(bw),hde=n(bw,"P",{});var mtt=s(hde);n5o=r(mtt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),mtt.forEach(t),s5o=i(bw),Bi=n(bw,"P",{});var IK=s(Bi);l5o=r(IK,`Note:
Loading a model from its configuration file does `),pde=n(IK,"STRONG",{});var gtt=s(pde);i5o=r(gtt,"not"),gtt.forEach(t),d5o=r(IK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Cj=n(IK,"A",{href:!0});var htt=s(Cj);c5o=r(htt,"from_pretrained()"),htt.forEach(t),f5o=r(IK," to load the model weights."),IK.forEach(t),m5o=i(bw),T(M1.$$.fragment,bw),bw.forEach(t),g5o=i(Vs),Ze=n(Vs,"DIV",{class:!0});var aa=s(Ze);T(Z6.$$.fragment,aa),h5o=i(aa),ude=n(aa,"P",{});var ptt=s(ude);p5o=r(ptt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),ptt.forEach(t),u5o=i(aa),ka=n(aa,"P",{});var vw=s(ka);_5o=r(vw,"The model class to instantiate is selected based on the "),_de=n(vw,"CODE",{});var utt=s(_de);b5o=r(utt,"model_type"),utt.forEach(t),v5o=r(vw,` property of the config object (either
passed as an argument or loaded from `),bde=n(vw,"CODE",{});var _tt=s(bde);F5o=r(_tt,"pretrained_model_name_or_path"),_tt.forEach(t),T5o=r(vw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vde=n(vw,"CODE",{});var btt=s(vde);M5o=r(btt,"pretrained_model_name_or_path"),btt.forEach(t),E5o=r(vw,":"),vw.forEach(t),C5o=i(aa),W=n(aa,"UL",{});var H=s(W);E1=n(H,"LI",{});var jye=s(E1);Fde=n(jye,"STRONG",{});var vtt=s(Fde);w5o=r(vtt,"albert"),vtt.forEach(t),A5o=r(jye," \u2014 "),wj=n(jye,"A",{href:!0});var Ftt=s(wj);y5o=r(Ftt,"AlbertForMaskedLM"),Ftt.forEach(t),L5o=r(jye," (ALBERT model)"),jye.forEach(t),x5o=i(H),C1=n(H,"LI",{});var Dye=s(C1);Tde=n(Dye,"STRONG",{});var Ttt=s(Tde);$5o=r(Ttt,"bart"),Ttt.forEach(t),k5o=r(Dye," \u2014 "),Aj=n(Dye,"A",{href:!0});var Mtt=s(Aj);S5o=r(Mtt,"BartForConditionalGeneration"),Mtt.forEach(t),R5o=r(Dye," (BART model)"),Dye.forEach(t),P5o=i(H),w1=n(H,"LI",{});var Gye=s(w1);Mde=n(Gye,"STRONG",{});var Ett=s(Mde);B5o=r(Ett,"bert"),Ett.forEach(t),I5o=r(Gye," \u2014 "),yj=n(Gye,"A",{href:!0});var Ctt=s(yj);q5o=r(Ctt,"BertForMaskedLM"),Ctt.forEach(t),N5o=r(Gye," (BERT model)"),Gye.forEach(t),j5o=i(H),A1=n(H,"LI",{});var Oye=s(A1);Ede=n(Oye,"STRONG",{});var wtt=s(Ede);D5o=r(wtt,"big_bird"),wtt.forEach(t),G5o=r(Oye," \u2014 "),Lj=n(Oye,"A",{href:!0});var Att=s(Lj);O5o=r(Att,"BigBirdForMaskedLM"),Att.forEach(t),V5o=r(Oye," (BigBird model)"),Oye.forEach(t),X5o=i(H),y1=n(H,"LI",{});var Vye=s(y1);Cde=n(Vye,"STRONG",{});var ytt=s(Cde);z5o=r(ytt,"camembert"),ytt.forEach(t),W5o=r(Vye," \u2014 "),xj=n(Vye,"A",{href:!0});var Ltt=s(xj);Q5o=r(Ltt,"CamembertForMaskedLM"),Ltt.forEach(t),H5o=r(Vye," (CamemBERT model)"),Vye.forEach(t),U5o=i(H),L1=n(H,"LI",{});var Xye=s(L1);wde=n(Xye,"STRONG",{});var xtt=s(wde);J5o=r(xtt,"convbert"),xtt.forEach(t),Y5o=r(Xye," \u2014 "),$j=n(Xye,"A",{href:!0});var $tt=s($j);K5o=r($tt,"ConvBertForMaskedLM"),$tt.forEach(t),Z5o=r(Xye," (ConvBERT model)"),Xye.forEach(t),ewo=i(H),x1=n(H,"LI",{});var zye=s(x1);Ade=n(zye,"STRONG",{});var ktt=s(Ade);owo=r(ktt,"data2vec-text"),ktt.forEach(t),rwo=r(zye," \u2014 "),kj=n(zye,"A",{href:!0});var Stt=s(kj);two=r(Stt,"Data2VecTextForMaskedLM"),Stt.forEach(t),awo=r(zye," (Data2VecText model)"),zye.forEach(t),nwo=i(H),$1=n(H,"LI",{});var Wye=s($1);yde=n(Wye,"STRONG",{});var Rtt=s(yde);swo=r(Rtt,"deberta"),Rtt.forEach(t),lwo=r(Wye," \u2014 "),Sj=n(Wye,"A",{href:!0});var Ptt=s(Sj);iwo=r(Ptt,"DebertaForMaskedLM"),Ptt.forEach(t),dwo=r(Wye," (DeBERTa model)"),Wye.forEach(t),cwo=i(H),k1=n(H,"LI",{});var Qye=s(k1);Lde=n(Qye,"STRONG",{});var Btt=s(Lde);fwo=r(Btt,"deberta-v2"),Btt.forEach(t),mwo=r(Qye," \u2014 "),Rj=n(Qye,"A",{href:!0});var Itt=s(Rj);gwo=r(Itt,"DebertaV2ForMaskedLM"),Itt.forEach(t),hwo=r(Qye," (DeBERTa-v2 model)"),Qye.forEach(t),pwo=i(H),S1=n(H,"LI",{});var Hye=s(S1);xde=n(Hye,"STRONG",{});var qtt=s(xde);uwo=r(qtt,"distilbert"),qtt.forEach(t),_wo=r(Hye," \u2014 "),Pj=n(Hye,"A",{href:!0});var Ntt=s(Pj);bwo=r(Ntt,"DistilBertForMaskedLM"),Ntt.forEach(t),vwo=r(Hye," (DistilBERT model)"),Hye.forEach(t),Fwo=i(H),R1=n(H,"LI",{});var Uye=s(R1);$de=n(Uye,"STRONG",{});var jtt=s($de);Two=r(jtt,"electra"),jtt.forEach(t),Mwo=r(Uye," \u2014 "),Bj=n(Uye,"A",{href:!0});var Dtt=s(Bj);Ewo=r(Dtt,"ElectraForMaskedLM"),Dtt.forEach(t),Cwo=r(Uye," (ELECTRA model)"),Uye.forEach(t),wwo=i(H),P1=n(H,"LI",{});var Jye=s(P1);kde=n(Jye,"STRONG",{});var Gtt=s(kde);Awo=r(Gtt,"flaubert"),Gtt.forEach(t),ywo=r(Jye," \u2014 "),Ij=n(Jye,"A",{href:!0});var Ott=s(Ij);Lwo=r(Ott,"FlaubertWithLMHeadModel"),Ott.forEach(t),xwo=r(Jye," (FlauBERT model)"),Jye.forEach(t),$wo=i(H),B1=n(H,"LI",{});var Yye=s(B1);Sde=n(Yye,"STRONG",{});var Vtt=s(Sde);kwo=r(Vtt,"fnet"),Vtt.forEach(t),Swo=r(Yye," \u2014 "),qj=n(Yye,"A",{href:!0});var Xtt=s(qj);Rwo=r(Xtt,"FNetForMaskedLM"),Xtt.forEach(t),Pwo=r(Yye," (FNet model)"),Yye.forEach(t),Bwo=i(H),I1=n(H,"LI",{});var Kye=s(I1);Rde=n(Kye,"STRONG",{});var ztt=s(Rde);Iwo=r(ztt,"funnel"),ztt.forEach(t),qwo=r(Kye," \u2014 "),Nj=n(Kye,"A",{href:!0});var Wtt=s(Nj);Nwo=r(Wtt,"FunnelForMaskedLM"),Wtt.forEach(t),jwo=r(Kye," (Funnel Transformer model)"),Kye.forEach(t),Dwo=i(H),q1=n(H,"LI",{});var Zye=s(q1);Pde=n(Zye,"STRONG",{});var Qtt=s(Pde);Gwo=r(Qtt,"ibert"),Qtt.forEach(t),Owo=r(Zye," \u2014 "),jj=n(Zye,"A",{href:!0});var Htt=s(jj);Vwo=r(Htt,"IBertForMaskedLM"),Htt.forEach(t),Xwo=r(Zye," (I-BERT model)"),Zye.forEach(t),zwo=i(H),N1=n(H,"LI",{});var eLe=s(N1);Bde=n(eLe,"STRONG",{});var Utt=s(Bde);Wwo=r(Utt,"layoutlm"),Utt.forEach(t),Qwo=r(eLe," \u2014 "),Dj=n(eLe,"A",{href:!0});var Jtt=s(Dj);Hwo=r(Jtt,"LayoutLMForMaskedLM"),Jtt.forEach(t),Uwo=r(eLe," (LayoutLM model)"),eLe.forEach(t),Jwo=i(H),j1=n(H,"LI",{});var oLe=s(j1);Ide=n(oLe,"STRONG",{});var Ytt=s(Ide);Ywo=r(Ytt,"longformer"),Ytt.forEach(t),Kwo=r(oLe," \u2014 "),Gj=n(oLe,"A",{href:!0});var Ktt=s(Gj);Zwo=r(Ktt,"LongformerForMaskedLM"),Ktt.forEach(t),eAo=r(oLe," (Longformer model)"),oLe.forEach(t),oAo=i(H),D1=n(H,"LI",{});var rLe=s(D1);qde=n(rLe,"STRONG",{});var Ztt=s(qde);rAo=r(Ztt,"mbart"),Ztt.forEach(t),tAo=r(rLe," \u2014 "),Oj=n(rLe,"A",{href:!0});var eat=s(Oj);aAo=r(eat,"MBartForConditionalGeneration"),eat.forEach(t),nAo=r(rLe," (mBART model)"),rLe.forEach(t),sAo=i(H),G1=n(H,"LI",{});var tLe=s(G1);Nde=n(tLe,"STRONG",{});var oat=s(Nde);lAo=r(oat,"megatron-bert"),oat.forEach(t),iAo=r(tLe," \u2014 "),Vj=n(tLe,"A",{href:!0});var rat=s(Vj);dAo=r(rat,"MegatronBertForMaskedLM"),rat.forEach(t),cAo=r(tLe," (MegatronBert model)"),tLe.forEach(t),fAo=i(H),O1=n(H,"LI",{});var aLe=s(O1);jde=n(aLe,"STRONG",{});var tat=s(jde);mAo=r(tat,"mobilebert"),tat.forEach(t),gAo=r(aLe," \u2014 "),Xj=n(aLe,"A",{href:!0});var aat=s(Xj);hAo=r(aat,"MobileBertForMaskedLM"),aat.forEach(t),pAo=r(aLe," (MobileBERT model)"),aLe.forEach(t),uAo=i(H),V1=n(H,"LI",{});var nLe=s(V1);Dde=n(nLe,"STRONG",{});var nat=s(Dde);_Ao=r(nat,"mpnet"),nat.forEach(t),bAo=r(nLe," \u2014 "),zj=n(nLe,"A",{href:!0});var sat=s(zj);vAo=r(sat,"MPNetForMaskedLM"),sat.forEach(t),FAo=r(nLe," (MPNet model)"),nLe.forEach(t),TAo=i(H),X1=n(H,"LI",{});var sLe=s(X1);Gde=n(sLe,"STRONG",{});var lat=s(Gde);MAo=r(lat,"nystromformer"),lat.forEach(t),EAo=r(sLe," \u2014 "),Wj=n(sLe,"A",{href:!0});var iat=s(Wj);CAo=r(iat,"NystromformerForMaskedLM"),iat.forEach(t),wAo=r(sLe," (Nystromformer model)"),sLe.forEach(t),AAo=i(H),z1=n(H,"LI",{});var lLe=s(z1);Ode=n(lLe,"STRONG",{});var dat=s(Ode);yAo=r(dat,"perceiver"),dat.forEach(t),LAo=r(lLe," \u2014 "),Qj=n(lLe,"A",{href:!0});var cat=s(Qj);xAo=r(cat,"PerceiverForMaskedLM"),cat.forEach(t),$Ao=r(lLe," (Perceiver model)"),lLe.forEach(t),kAo=i(H),W1=n(H,"LI",{});var iLe=s(W1);Vde=n(iLe,"STRONG",{});var fat=s(Vde);SAo=r(fat,"qdqbert"),fat.forEach(t),RAo=r(iLe," \u2014 "),Hj=n(iLe,"A",{href:!0});var mat=s(Hj);PAo=r(mat,"QDQBertForMaskedLM"),mat.forEach(t),BAo=r(iLe," (QDQBert model)"),iLe.forEach(t),IAo=i(H),Q1=n(H,"LI",{});var dLe=s(Q1);Xde=n(dLe,"STRONG",{});var gat=s(Xde);qAo=r(gat,"reformer"),gat.forEach(t),NAo=r(dLe," \u2014 "),Uj=n(dLe,"A",{href:!0});var hat=s(Uj);jAo=r(hat,"ReformerForMaskedLM"),hat.forEach(t),DAo=r(dLe," (Reformer model)"),dLe.forEach(t),GAo=i(H),H1=n(H,"LI",{});var cLe=s(H1);zde=n(cLe,"STRONG",{});var pat=s(zde);OAo=r(pat,"rembert"),pat.forEach(t),VAo=r(cLe," \u2014 "),Jj=n(cLe,"A",{href:!0});var uat=s(Jj);XAo=r(uat,"RemBertForMaskedLM"),uat.forEach(t),zAo=r(cLe," (RemBERT model)"),cLe.forEach(t),WAo=i(H),U1=n(H,"LI",{});var fLe=s(U1);Wde=n(fLe,"STRONG",{});var _at=s(Wde);QAo=r(_at,"roberta"),_at.forEach(t),HAo=r(fLe," \u2014 "),Yj=n(fLe,"A",{href:!0});var bat=s(Yj);UAo=r(bat,"RobertaForMaskedLM"),bat.forEach(t),JAo=r(fLe," (RoBERTa model)"),fLe.forEach(t),YAo=i(H),J1=n(H,"LI",{});var mLe=s(J1);Qde=n(mLe,"STRONG",{});var vat=s(Qde);KAo=r(vat,"roformer"),vat.forEach(t),ZAo=r(mLe," \u2014 "),Kj=n(mLe,"A",{href:!0});var Fat=s(Kj);e6o=r(Fat,"RoFormerForMaskedLM"),Fat.forEach(t),o6o=r(mLe," (RoFormer model)"),mLe.forEach(t),r6o=i(H),Y1=n(H,"LI",{});var gLe=s(Y1);Hde=n(gLe,"STRONG",{});var Tat=s(Hde);t6o=r(Tat,"squeezebert"),Tat.forEach(t),a6o=r(gLe," \u2014 "),Zj=n(gLe,"A",{href:!0});var Mat=s(Zj);n6o=r(Mat,"SqueezeBertForMaskedLM"),Mat.forEach(t),s6o=r(gLe," (SqueezeBERT model)"),gLe.forEach(t),l6o=i(H),K1=n(H,"LI",{});var hLe=s(K1);Ude=n(hLe,"STRONG",{});var Eat=s(Ude);i6o=r(Eat,"tapas"),Eat.forEach(t),d6o=r(hLe," \u2014 "),eD=n(hLe,"A",{href:!0});var Cat=s(eD);c6o=r(Cat,"TapasForMaskedLM"),Cat.forEach(t),f6o=r(hLe," (TAPAS model)"),hLe.forEach(t),m6o=i(H),Z1=n(H,"LI",{});var pLe=s(Z1);Jde=n(pLe,"STRONG",{});var wat=s(Jde);g6o=r(wat,"wav2vec2"),wat.forEach(t),h6o=r(pLe," \u2014 "),Yde=n(pLe,"CODE",{});var Aat=s(Yde);p6o=r(Aat,"Wav2Vec2ForMaskedLM"),Aat.forEach(t),u6o=r(pLe," (Wav2Vec2 model)"),pLe.forEach(t),_6o=i(H),eb=n(H,"LI",{});var uLe=s(eb);Kde=n(uLe,"STRONG",{});var yat=s(Kde);b6o=r(yat,"xlm"),yat.forEach(t),v6o=r(uLe," \u2014 "),oD=n(uLe,"A",{href:!0});var Lat=s(oD);F6o=r(Lat,"XLMWithLMHeadModel"),Lat.forEach(t),T6o=r(uLe," (XLM model)"),uLe.forEach(t),M6o=i(H),ob=n(H,"LI",{});var _Le=s(ob);Zde=n(_Le,"STRONG",{});var xat=s(Zde);E6o=r(xat,"xlm-roberta"),xat.forEach(t),C6o=r(_Le," \u2014 "),rD=n(_Le,"A",{href:!0});var $at=s(rD);w6o=r($at,"XLMRobertaForMaskedLM"),$at.forEach(t),A6o=r(_Le," (XLM-RoBERTa model)"),_Le.forEach(t),y6o=i(H),rb=n(H,"LI",{});var bLe=s(rb);ece=n(bLe,"STRONG",{});var kat=s(ece);L6o=r(kat,"xlm-roberta-xl"),kat.forEach(t),x6o=r(bLe," \u2014 "),tD=n(bLe,"A",{href:!0});var Sat=s(tD);$6o=r(Sat,"XLMRobertaXLForMaskedLM"),Sat.forEach(t),k6o=r(bLe," (XLM-RoBERTa-XL model)"),bLe.forEach(t),S6o=i(H),tb=n(H,"LI",{});var vLe=s(tb);oce=n(vLe,"STRONG",{});var Rat=s(oce);R6o=r(Rat,"yoso"),Rat.forEach(t),P6o=r(vLe," \u2014 "),aD=n(vLe,"A",{href:!0});var Pat=s(aD);B6o=r(Pat,"YosoForMaskedLM"),Pat.forEach(t),I6o=r(vLe," (YOSO model)"),vLe.forEach(t),H.forEach(t),q6o=i(aa),ab=n(aa,"P",{});var FLe=s(ab);N6o=r(FLe,"The model is set in evaluation mode by default using "),rce=n(FLe,"CODE",{});var Bat=s(rce);j6o=r(Bat,"model.eval()"),Bat.forEach(t),D6o=r(FLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tce=n(FLe,"CODE",{});var Iat=s(tce);G6o=r(Iat,"model.train()"),Iat.forEach(t),FLe.forEach(t),O6o=i(aa),T(nb.$$.fragment,aa),aa.forEach(t),Vs.forEach(t),JIe=i(f),Ii=n(f,"H2",{class:!0});var eje=s(Ii);sb=n(eje,"A",{id:!0,class:!0,href:!0});var qat=s(sb);ace=n(qat,"SPAN",{});var Nat=s(ace);T(ey.$$.fragment,Nat),Nat.forEach(t),qat.forEach(t),V6o=i(eje),nce=n(eje,"SPAN",{});var jat=s(nce);X6o=r(jat,"AutoModelForSeq2SeqLM"),jat.forEach(t),eje.forEach(t),YIe=i(f),So=n(f,"DIV",{class:!0});var Xs=s(So);T(oy.$$.fragment,Xs),z6o=i(Xs),qi=n(Xs,"P",{});var qK=s(qi);W6o=r(qK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),nD=n(qK,"A",{href:!0});var Dat=s(nD);Q6o=r(Dat,"from_pretrained()"),Dat.forEach(t),H6o=r(qK," class method or the "),sD=n(qK,"A",{href:!0});var Gat=s(sD);U6o=r(Gat,"from_config()"),Gat.forEach(t),J6o=r(qK,` class
method.`),qK.forEach(t),Y6o=i(Xs),ry=n(Xs,"P",{});var oje=s(ry);K6o=r(oje,"This class cannot be instantiated directly using "),sce=n(oje,"CODE",{});var Oat=s(sce);Z6o=r(Oat,"__init__()"),Oat.forEach(t),eyo=r(oje," (throws an error)."),oje.forEach(t),oyo=i(Xs),lt=n(Xs,"DIV",{class:!0});var Fw=s(lt);T(ty.$$.fragment,Fw),ryo=i(Fw),lce=n(Fw,"P",{});var Vat=s(lce);tyo=r(Vat,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Vat.forEach(t),ayo=i(Fw),Ni=n(Fw,"P",{});var NK=s(Ni);nyo=r(NK,`Note:
Loading a model from its configuration file does `),ice=n(NK,"STRONG",{});var Xat=s(ice);syo=r(Xat,"not"),Xat.forEach(t),lyo=r(NK,` load the model weights. It only affects the
model\u2019s configuration. Use `),lD=n(NK,"A",{href:!0});var zat=s(lD);iyo=r(zat,"from_pretrained()"),zat.forEach(t),dyo=r(NK," to load the model weights."),NK.forEach(t),cyo=i(Fw),T(lb.$$.fragment,Fw),Fw.forEach(t),fyo=i(Xs),eo=n(Xs,"DIV",{class:!0});var na=s(eo);T(ay.$$.fragment,na),myo=i(na),dce=n(na,"P",{});var Wat=s(dce);gyo=r(Wat,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Wat.forEach(t),hyo=i(na),Sa=n(na,"P",{});var Tw=s(Sa);pyo=r(Tw,"The model class to instantiate is selected based on the "),cce=n(Tw,"CODE",{});var Qat=s(cce);uyo=r(Qat,"model_type"),Qat.forEach(t),_yo=r(Tw,` property of the config object (either
passed as an argument or loaded from `),fce=n(Tw,"CODE",{});var Hat=s(fce);byo=r(Hat,"pretrained_model_name_or_path"),Hat.forEach(t),vyo=r(Tw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mce=n(Tw,"CODE",{});var Uat=s(mce);Fyo=r(Uat,"pretrained_model_name_or_path"),Uat.forEach(t),Tyo=r(Tw,":"),Tw.forEach(t),Myo=i(na),ue=n(na,"UL",{});var ve=s(ue);ib=n(ve,"LI",{});var TLe=s(ib);gce=n(TLe,"STRONG",{});var Jat=s(gce);Eyo=r(Jat,"bart"),Jat.forEach(t),Cyo=r(TLe," \u2014 "),iD=n(TLe,"A",{href:!0});var Yat=s(iD);wyo=r(Yat,"BartForConditionalGeneration"),Yat.forEach(t),Ayo=r(TLe," (BART model)"),TLe.forEach(t),yyo=i(ve),db=n(ve,"LI",{});var MLe=s(db);hce=n(MLe,"STRONG",{});var Kat=s(hce);Lyo=r(Kat,"bigbird_pegasus"),Kat.forEach(t),xyo=r(MLe," \u2014 "),dD=n(MLe,"A",{href:!0});var Zat=s(dD);$yo=r(Zat,"BigBirdPegasusForConditionalGeneration"),Zat.forEach(t),kyo=r(MLe," (BigBirdPegasus model)"),MLe.forEach(t),Syo=i(ve),cb=n(ve,"LI",{});var ELe=s(cb);pce=n(ELe,"STRONG",{});var ent=s(pce);Ryo=r(ent,"blenderbot"),ent.forEach(t),Pyo=r(ELe," \u2014 "),cD=n(ELe,"A",{href:!0});var ont=s(cD);Byo=r(ont,"BlenderbotForConditionalGeneration"),ont.forEach(t),Iyo=r(ELe," (Blenderbot model)"),ELe.forEach(t),qyo=i(ve),fb=n(ve,"LI",{});var CLe=s(fb);uce=n(CLe,"STRONG",{});var rnt=s(uce);Nyo=r(rnt,"blenderbot-small"),rnt.forEach(t),jyo=r(CLe," \u2014 "),fD=n(CLe,"A",{href:!0});var tnt=s(fD);Dyo=r(tnt,"BlenderbotSmallForConditionalGeneration"),tnt.forEach(t),Gyo=r(CLe," (BlenderbotSmall model)"),CLe.forEach(t),Oyo=i(ve),mb=n(ve,"LI",{});var wLe=s(mb);_ce=n(wLe,"STRONG",{});var ant=s(_ce);Vyo=r(ant,"encoder-decoder"),ant.forEach(t),Xyo=r(wLe," \u2014 "),mD=n(wLe,"A",{href:!0});var nnt=s(mD);zyo=r(nnt,"EncoderDecoderModel"),nnt.forEach(t),Wyo=r(wLe," (Encoder decoder model)"),wLe.forEach(t),Qyo=i(ve),gb=n(ve,"LI",{});var ALe=s(gb);bce=n(ALe,"STRONG",{});var snt=s(bce);Hyo=r(snt,"fsmt"),snt.forEach(t),Uyo=r(ALe," \u2014 "),gD=n(ALe,"A",{href:!0});var lnt=s(gD);Jyo=r(lnt,"FSMTForConditionalGeneration"),lnt.forEach(t),Yyo=r(ALe," (FairSeq Machine-Translation model)"),ALe.forEach(t),Kyo=i(ve),hb=n(ve,"LI",{});var yLe=s(hb);vce=n(yLe,"STRONG",{});var int=s(vce);Zyo=r(int,"led"),int.forEach(t),eLo=r(yLe," \u2014 "),hD=n(yLe,"A",{href:!0});var dnt=s(hD);oLo=r(dnt,"LEDForConditionalGeneration"),dnt.forEach(t),rLo=r(yLe," (LED model)"),yLe.forEach(t),tLo=i(ve),pb=n(ve,"LI",{});var LLe=s(pb);Fce=n(LLe,"STRONG",{});var cnt=s(Fce);aLo=r(cnt,"m2m_100"),cnt.forEach(t),nLo=r(LLe," \u2014 "),pD=n(LLe,"A",{href:!0});var fnt=s(pD);sLo=r(fnt,"M2M100ForConditionalGeneration"),fnt.forEach(t),lLo=r(LLe," (M2M100 model)"),LLe.forEach(t),iLo=i(ve),ub=n(ve,"LI",{});var xLe=s(ub);Tce=n(xLe,"STRONG",{});var mnt=s(Tce);dLo=r(mnt,"marian"),mnt.forEach(t),cLo=r(xLe," \u2014 "),uD=n(xLe,"A",{href:!0});var gnt=s(uD);fLo=r(gnt,"MarianMTModel"),gnt.forEach(t),mLo=r(xLe," (Marian model)"),xLe.forEach(t),gLo=i(ve),_b=n(ve,"LI",{});var $Le=s(_b);Mce=n($Le,"STRONG",{});var hnt=s(Mce);hLo=r(hnt,"mbart"),hnt.forEach(t),pLo=r($Le," \u2014 "),_D=n($Le,"A",{href:!0});var pnt=s(_D);uLo=r(pnt,"MBartForConditionalGeneration"),pnt.forEach(t),_Lo=r($Le," (mBART model)"),$Le.forEach(t),bLo=i(ve),bb=n(ve,"LI",{});var kLe=s(bb);Ece=n(kLe,"STRONG",{});var unt=s(Ece);vLo=r(unt,"mt5"),unt.forEach(t),FLo=r(kLe," \u2014 "),bD=n(kLe,"A",{href:!0});var _nt=s(bD);TLo=r(_nt,"MT5ForConditionalGeneration"),_nt.forEach(t),MLo=r(kLe," (mT5 model)"),kLe.forEach(t),ELo=i(ve),vb=n(ve,"LI",{});var SLe=s(vb);Cce=n(SLe,"STRONG",{});var bnt=s(Cce);CLo=r(bnt,"pegasus"),bnt.forEach(t),wLo=r(SLe," \u2014 "),vD=n(SLe,"A",{href:!0});var vnt=s(vD);ALo=r(vnt,"PegasusForConditionalGeneration"),vnt.forEach(t),yLo=r(SLe," (Pegasus model)"),SLe.forEach(t),LLo=i(ve),Fb=n(ve,"LI",{});var RLe=s(Fb);wce=n(RLe,"STRONG",{});var Fnt=s(wce);xLo=r(Fnt,"plbart"),Fnt.forEach(t),$Lo=r(RLe," \u2014 "),FD=n(RLe,"A",{href:!0});var Tnt=s(FD);kLo=r(Tnt,"PLBartForConditionalGeneration"),Tnt.forEach(t),SLo=r(RLe," (PLBart model)"),RLe.forEach(t),RLo=i(ve),Tb=n(ve,"LI",{});var PLe=s(Tb);Ace=n(PLe,"STRONG",{});var Mnt=s(Ace);PLo=r(Mnt,"prophetnet"),Mnt.forEach(t),BLo=r(PLe," \u2014 "),TD=n(PLe,"A",{href:!0});var Ent=s(TD);ILo=r(Ent,"ProphetNetForConditionalGeneration"),Ent.forEach(t),qLo=r(PLe," (ProphetNet model)"),PLe.forEach(t),NLo=i(ve),Mb=n(ve,"LI",{});var BLe=s(Mb);yce=n(BLe,"STRONG",{});var Cnt=s(yce);jLo=r(Cnt,"t5"),Cnt.forEach(t),DLo=r(BLe," \u2014 "),MD=n(BLe,"A",{href:!0});var wnt=s(MD);GLo=r(wnt,"T5ForConditionalGeneration"),wnt.forEach(t),OLo=r(BLe," (T5 model)"),BLe.forEach(t),VLo=i(ve),Eb=n(ve,"LI",{});var ILe=s(Eb);Lce=n(ILe,"STRONG",{});var Ant=s(Lce);XLo=r(Ant,"xlm-prophetnet"),Ant.forEach(t),zLo=r(ILe," \u2014 "),ED=n(ILe,"A",{href:!0});var ynt=s(ED);WLo=r(ynt,"XLMProphetNetForConditionalGeneration"),ynt.forEach(t),QLo=r(ILe," (XLMProphetNet model)"),ILe.forEach(t),ve.forEach(t),HLo=i(na),Cb=n(na,"P",{});var qLe=s(Cb);ULo=r(qLe,"The model is set in evaluation mode by default using "),xce=n(qLe,"CODE",{});var Lnt=s(xce);JLo=r(Lnt,"model.eval()"),Lnt.forEach(t),YLo=r(qLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$ce=n(qLe,"CODE",{});var xnt=s($ce);KLo=r(xnt,"model.train()"),xnt.forEach(t),qLe.forEach(t),ZLo=i(na),T(wb.$$.fragment,na),na.forEach(t),Xs.forEach(t),KIe=i(f),ji=n(f,"H2",{class:!0});var rje=s(ji);Ab=n(rje,"A",{id:!0,class:!0,href:!0});var $nt=s(Ab);kce=n($nt,"SPAN",{});var knt=s(kce);T(ny.$$.fragment,knt),knt.forEach(t),$nt.forEach(t),e8o=i(rje),Sce=n(rje,"SPAN",{});var Snt=s(Sce);o8o=r(Snt,"AutoModelForSequenceClassification"),Snt.forEach(t),rje.forEach(t),ZIe=i(f),Ro=n(f,"DIV",{class:!0});var zs=s(Ro);T(sy.$$.fragment,zs),r8o=i(zs),Di=n(zs,"P",{});var jK=s(Di);t8o=r(jK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),CD=n(jK,"A",{href:!0});var Rnt=s(CD);a8o=r(Rnt,"from_pretrained()"),Rnt.forEach(t),n8o=r(jK," class method or the "),wD=n(jK,"A",{href:!0});var Pnt=s(wD);s8o=r(Pnt,"from_config()"),Pnt.forEach(t),l8o=r(jK,` class
method.`),jK.forEach(t),i8o=i(zs),ly=n(zs,"P",{});var tje=s(ly);d8o=r(tje,"This class cannot be instantiated directly using "),Rce=n(tje,"CODE",{});var Bnt=s(Rce);c8o=r(Bnt,"__init__()"),Bnt.forEach(t),f8o=r(tje," (throws an error)."),tje.forEach(t),m8o=i(zs),it=n(zs,"DIV",{class:!0});var Mw=s(it);T(iy.$$.fragment,Mw),g8o=i(Mw),Pce=n(Mw,"P",{});var Int=s(Pce);h8o=r(Int,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Int.forEach(t),p8o=i(Mw),Gi=n(Mw,"P",{});var DK=s(Gi);u8o=r(DK,`Note:
Loading a model from its configuration file does `),Bce=n(DK,"STRONG",{});var qnt=s(Bce);_8o=r(qnt,"not"),qnt.forEach(t),b8o=r(DK,` load the model weights. It only affects the
model\u2019s configuration. Use `),AD=n(DK,"A",{href:!0});var Nnt=s(AD);v8o=r(Nnt,"from_pretrained()"),Nnt.forEach(t),F8o=r(DK," to load the model weights."),DK.forEach(t),T8o=i(Mw),T(yb.$$.fragment,Mw),Mw.forEach(t),M8o=i(zs),oo=n(zs,"DIV",{class:!0});var sa=s(oo);T(dy.$$.fragment,sa),E8o=i(sa),Ice=n(sa,"P",{});var jnt=s(Ice);C8o=r(jnt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),jnt.forEach(t),w8o=i(sa),Ra=n(sa,"P",{});var Ew=s(Ra);A8o=r(Ew,"The model class to instantiate is selected based on the "),qce=n(Ew,"CODE",{});var Dnt=s(qce);y8o=r(Dnt,"model_type"),Dnt.forEach(t),L8o=r(Ew,` property of the config object (either
passed as an argument or loaded from `),Nce=n(Ew,"CODE",{});var Gnt=s(Nce);x8o=r(Gnt,"pretrained_model_name_or_path"),Gnt.forEach(t),$8o=r(Ew,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jce=n(Ew,"CODE",{});var Ont=s(jce);k8o=r(Ont,"pretrained_model_name_or_path"),Ont.forEach(t),S8o=r(Ew,":"),Ew.forEach(t),R8o=i(sa),q=n(sa,"UL",{});var j=s(q);Lb=n(j,"LI",{});var NLe=s(Lb);Dce=n(NLe,"STRONG",{});var Vnt=s(Dce);P8o=r(Vnt,"albert"),Vnt.forEach(t),B8o=r(NLe," \u2014 "),yD=n(NLe,"A",{href:!0});var Xnt=s(yD);I8o=r(Xnt,"AlbertForSequenceClassification"),Xnt.forEach(t),q8o=r(NLe," (ALBERT model)"),NLe.forEach(t),N8o=i(j),xb=n(j,"LI",{});var jLe=s(xb);Gce=n(jLe,"STRONG",{});var znt=s(Gce);j8o=r(znt,"bart"),znt.forEach(t),D8o=r(jLe," \u2014 "),LD=n(jLe,"A",{href:!0});var Wnt=s(LD);G8o=r(Wnt,"BartForSequenceClassification"),Wnt.forEach(t),O8o=r(jLe," (BART model)"),jLe.forEach(t),V8o=i(j),$b=n(j,"LI",{});var DLe=s($b);Oce=n(DLe,"STRONG",{});var Qnt=s(Oce);X8o=r(Qnt,"bert"),Qnt.forEach(t),z8o=r(DLe," \u2014 "),xD=n(DLe,"A",{href:!0});var Hnt=s(xD);W8o=r(Hnt,"BertForSequenceClassification"),Hnt.forEach(t),Q8o=r(DLe," (BERT model)"),DLe.forEach(t),H8o=i(j),kb=n(j,"LI",{});var GLe=s(kb);Vce=n(GLe,"STRONG",{});var Unt=s(Vce);U8o=r(Unt,"big_bird"),Unt.forEach(t),J8o=r(GLe," \u2014 "),$D=n(GLe,"A",{href:!0});var Jnt=s($D);Y8o=r(Jnt,"BigBirdForSequenceClassification"),Jnt.forEach(t),K8o=r(GLe," (BigBird model)"),GLe.forEach(t),Z8o=i(j),Sb=n(j,"LI",{});var OLe=s(Sb);Xce=n(OLe,"STRONG",{});var Ynt=s(Xce);exo=r(Ynt,"bigbird_pegasus"),Ynt.forEach(t),oxo=r(OLe," \u2014 "),kD=n(OLe,"A",{href:!0});var Knt=s(kD);rxo=r(Knt,"BigBirdPegasusForSequenceClassification"),Knt.forEach(t),txo=r(OLe," (BigBirdPegasus model)"),OLe.forEach(t),axo=i(j),Rb=n(j,"LI",{});var VLe=s(Rb);zce=n(VLe,"STRONG",{});var Znt=s(zce);nxo=r(Znt,"camembert"),Znt.forEach(t),sxo=r(VLe," \u2014 "),SD=n(VLe,"A",{href:!0});var est=s(SD);lxo=r(est,"CamembertForSequenceClassification"),est.forEach(t),ixo=r(VLe," (CamemBERT model)"),VLe.forEach(t),dxo=i(j),Pb=n(j,"LI",{});var XLe=s(Pb);Wce=n(XLe,"STRONG",{});var ost=s(Wce);cxo=r(ost,"canine"),ost.forEach(t),fxo=r(XLe," \u2014 "),RD=n(XLe,"A",{href:!0});var rst=s(RD);mxo=r(rst,"CanineForSequenceClassification"),rst.forEach(t),gxo=r(XLe," (Canine model)"),XLe.forEach(t),hxo=i(j),Bb=n(j,"LI",{});var zLe=s(Bb);Qce=n(zLe,"STRONG",{});var tst=s(Qce);pxo=r(tst,"convbert"),tst.forEach(t),uxo=r(zLe," \u2014 "),PD=n(zLe,"A",{href:!0});var ast=s(PD);_xo=r(ast,"ConvBertForSequenceClassification"),ast.forEach(t),bxo=r(zLe," (ConvBERT model)"),zLe.forEach(t),vxo=i(j),Ib=n(j,"LI",{});var WLe=s(Ib);Hce=n(WLe,"STRONG",{});var nst=s(Hce);Fxo=r(nst,"ctrl"),nst.forEach(t),Txo=r(WLe," \u2014 "),BD=n(WLe,"A",{href:!0});var sst=s(BD);Mxo=r(sst,"CTRLForSequenceClassification"),sst.forEach(t),Exo=r(WLe," (CTRL model)"),WLe.forEach(t),Cxo=i(j),qb=n(j,"LI",{});var QLe=s(qb);Uce=n(QLe,"STRONG",{});var lst=s(Uce);wxo=r(lst,"data2vec-text"),lst.forEach(t),Axo=r(QLe," \u2014 "),ID=n(QLe,"A",{href:!0});var ist=s(ID);yxo=r(ist,"Data2VecTextForSequenceClassification"),ist.forEach(t),Lxo=r(QLe," (Data2VecText model)"),QLe.forEach(t),xxo=i(j),Nb=n(j,"LI",{});var HLe=s(Nb);Jce=n(HLe,"STRONG",{});var dst=s(Jce);$xo=r(dst,"deberta"),dst.forEach(t),kxo=r(HLe," \u2014 "),qD=n(HLe,"A",{href:!0});var cst=s(qD);Sxo=r(cst,"DebertaForSequenceClassification"),cst.forEach(t),Rxo=r(HLe," (DeBERTa model)"),HLe.forEach(t),Pxo=i(j),jb=n(j,"LI",{});var ULe=s(jb);Yce=n(ULe,"STRONG",{});var fst=s(Yce);Bxo=r(fst,"deberta-v2"),fst.forEach(t),Ixo=r(ULe," \u2014 "),ND=n(ULe,"A",{href:!0});var mst=s(ND);qxo=r(mst,"DebertaV2ForSequenceClassification"),mst.forEach(t),Nxo=r(ULe," (DeBERTa-v2 model)"),ULe.forEach(t),jxo=i(j),Db=n(j,"LI",{});var JLe=s(Db);Kce=n(JLe,"STRONG",{});var gst=s(Kce);Dxo=r(gst,"distilbert"),gst.forEach(t),Gxo=r(JLe," \u2014 "),jD=n(JLe,"A",{href:!0});var hst=s(jD);Oxo=r(hst,"DistilBertForSequenceClassification"),hst.forEach(t),Vxo=r(JLe," (DistilBERT model)"),JLe.forEach(t),Xxo=i(j),Gb=n(j,"LI",{});var YLe=s(Gb);Zce=n(YLe,"STRONG",{});var pst=s(Zce);zxo=r(pst,"electra"),pst.forEach(t),Wxo=r(YLe," \u2014 "),DD=n(YLe,"A",{href:!0});var ust=s(DD);Qxo=r(ust,"ElectraForSequenceClassification"),ust.forEach(t),Hxo=r(YLe," (ELECTRA model)"),YLe.forEach(t),Uxo=i(j),Ob=n(j,"LI",{});var KLe=s(Ob);efe=n(KLe,"STRONG",{});var _st=s(efe);Jxo=r(_st,"flaubert"),_st.forEach(t),Yxo=r(KLe," \u2014 "),GD=n(KLe,"A",{href:!0});var bst=s(GD);Kxo=r(bst,"FlaubertForSequenceClassification"),bst.forEach(t),Zxo=r(KLe," (FlauBERT model)"),KLe.forEach(t),e9o=i(j),Vb=n(j,"LI",{});var ZLe=s(Vb);ofe=n(ZLe,"STRONG",{});var vst=s(ofe);o9o=r(vst,"fnet"),vst.forEach(t),r9o=r(ZLe," \u2014 "),OD=n(ZLe,"A",{href:!0});var Fst=s(OD);t9o=r(Fst,"FNetForSequenceClassification"),Fst.forEach(t),a9o=r(ZLe," (FNet model)"),ZLe.forEach(t),n9o=i(j),Xb=n(j,"LI",{});var e8e=s(Xb);rfe=n(e8e,"STRONG",{});var Tst=s(rfe);s9o=r(Tst,"funnel"),Tst.forEach(t),l9o=r(e8e," \u2014 "),VD=n(e8e,"A",{href:!0});var Mst=s(VD);i9o=r(Mst,"FunnelForSequenceClassification"),Mst.forEach(t),d9o=r(e8e," (Funnel Transformer model)"),e8e.forEach(t),c9o=i(j),zb=n(j,"LI",{});var o8e=s(zb);tfe=n(o8e,"STRONG",{});var Est=s(tfe);f9o=r(Est,"gpt2"),Est.forEach(t),m9o=r(o8e," \u2014 "),XD=n(o8e,"A",{href:!0});var Cst=s(XD);g9o=r(Cst,"GPT2ForSequenceClassification"),Cst.forEach(t),h9o=r(o8e," (OpenAI GPT-2 model)"),o8e.forEach(t),p9o=i(j),Wb=n(j,"LI",{});var r8e=s(Wb);afe=n(r8e,"STRONG",{});var wst=s(afe);u9o=r(wst,"gpt_neo"),wst.forEach(t),_9o=r(r8e," \u2014 "),zD=n(r8e,"A",{href:!0});var Ast=s(zD);b9o=r(Ast,"GPTNeoForSequenceClassification"),Ast.forEach(t),v9o=r(r8e," (GPT Neo model)"),r8e.forEach(t),F9o=i(j),Qb=n(j,"LI",{});var t8e=s(Qb);nfe=n(t8e,"STRONG",{});var yst=s(nfe);T9o=r(yst,"gptj"),yst.forEach(t),M9o=r(t8e," \u2014 "),WD=n(t8e,"A",{href:!0});var Lst=s(WD);E9o=r(Lst,"GPTJForSequenceClassification"),Lst.forEach(t),C9o=r(t8e," (GPT-J model)"),t8e.forEach(t),w9o=i(j),Hb=n(j,"LI",{});var a8e=s(Hb);sfe=n(a8e,"STRONG",{});var xst=s(sfe);A9o=r(xst,"ibert"),xst.forEach(t),y9o=r(a8e," \u2014 "),QD=n(a8e,"A",{href:!0});var $st=s(QD);L9o=r($st,"IBertForSequenceClassification"),$st.forEach(t),x9o=r(a8e," (I-BERT model)"),a8e.forEach(t),$9o=i(j),Ub=n(j,"LI",{});var n8e=s(Ub);lfe=n(n8e,"STRONG",{});var kst=s(lfe);k9o=r(kst,"layoutlm"),kst.forEach(t),S9o=r(n8e," \u2014 "),HD=n(n8e,"A",{href:!0});var Sst=s(HD);R9o=r(Sst,"LayoutLMForSequenceClassification"),Sst.forEach(t),P9o=r(n8e," (LayoutLM model)"),n8e.forEach(t),B9o=i(j),Jb=n(j,"LI",{});var s8e=s(Jb);ife=n(s8e,"STRONG",{});var Rst=s(ife);I9o=r(Rst,"layoutlmv2"),Rst.forEach(t),q9o=r(s8e," \u2014 "),UD=n(s8e,"A",{href:!0});var Pst=s(UD);N9o=r(Pst,"LayoutLMv2ForSequenceClassification"),Pst.forEach(t),j9o=r(s8e," (LayoutLMv2 model)"),s8e.forEach(t),D9o=i(j),Yb=n(j,"LI",{});var l8e=s(Yb);dfe=n(l8e,"STRONG",{});var Bst=s(dfe);G9o=r(Bst,"led"),Bst.forEach(t),O9o=r(l8e," \u2014 "),JD=n(l8e,"A",{href:!0});var Ist=s(JD);V9o=r(Ist,"LEDForSequenceClassification"),Ist.forEach(t),X9o=r(l8e," (LED model)"),l8e.forEach(t),z9o=i(j),Kb=n(j,"LI",{});var i8e=s(Kb);cfe=n(i8e,"STRONG",{});var qst=s(cfe);W9o=r(qst,"longformer"),qst.forEach(t),Q9o=r(i8e," \u2014 "),YD=n(i8e,"A",{href:!0});var Nst=s(YD);H9o=r(Nst,"LongformerForSequenceClassification"),Nst.forEach(t),U9o=r(i8e," (Longformer model)"),i8e.forEach(t),J9o=i(j),Zb=n(j,"LI",{});var d8e=s(Zb);ffe=n(d8e,"STRONG",{});var jst=s(ffe);Y9o=r(jst,"mbart"),jst.forEach(t),K9o=r(d8e," \u2014 "),KD=n(d8e,"A",{href:!0});var Dst=s(KD);Z9o=r(Dst,"MBartForSequenceClassification"),Dst.forEach(t),e$o=r(d8e," (mBART model)"),d8e.forEach(t),o$o=i(j),e2=n(j,"LI",{});var c8e=s(e2);mfe=n(c8e,"STRONG",{});var Gst=s(mfe);r$o=r(Gst,"megatron-bert"),Gst.forEach(t),t$o=r(c8e," \u2014 "),ZD=n(c8e,"A",{href:!0});var Ost=s(ZD);a$o=r(Ost,"MegatronBertForSequenceClassification"),Ost.forEach(t),n$o=r(c8e," (MegatronBert model)"),c8e.forEach(t),s$o=i(j),o2=n(j,"LI",{});var f8e=s(o2);gfe=n(f8e,"STRONG",{});var Vst=s(gfe);l$o=r(Vst,"mobilebert"),Vst.forEach(t),i$o=r(f8e," \u2014 "),eG=n(f8e,"A",{href:!0});var Xst=s(eG);d$o=r(Xst,"MobileBertForSequenceClassification"),Xst.forEach(t),c$o=r(f8e," (MobileBERT model)"),f8e.forEach(t),f$o=i(j),r2=n(j,"LI",{});var m8e=s(r2);hfe=n(m8e,"STRONG",{});var zst=s(hfe);m$o=r(zst,"mpnet"),zst.forEach(t),g$o=r(m8e," \u2014 "),oG=n(m8e,"A",{href:!0});var Wst=s(oG);h$o=r(Wst,"MPNetForSequenceClassification"),Wst.forEach(t),p$o=r(m8e," (MPNet model)"),m8e.forEach(t),u$o=i(j),t2=n(j,"LI",{});var g8e=s(t2);pfe=n(g8e,"STRONG",{});var Qst=s(pfe);_$o=r(Qst,"nystromformer"),Qst.forEach(t),b$o=r(g8e," \u2014 "),rG=n(g8e,"A",{href:!0});var Hst=s(rG);v$o=r(Hst,"NystromformerForSequenceClassification"),Hst.forEach(t),F$o=r(g8e," (Nystromformer model)"),g8e.forEach(t),T$o=i(j),a2=n(j,"LI",{});var h8e=s(a2);ufe=n(h8e,"STRONG",{});var Ust=s(ufe);M$o=r(Ust,"openai-gpt"),Ust.forEach(t),E$o=r(h8e," \u2014 "),tG=n(h8e,"A",{href:!0});var Jst=s(tG);C$o=r(Jst,"OpenAIGPTForSequenceClassification"),Jst.forEach(t),w$o=r(h8e," (OpenAI GPT model)"),h8e.forEach(t),A$o=i(j),n2=n(j,"LI",{});var p8e=s(n2);_fe=n(p8e,"STRONG",{});var Yst=s(_fe);y$o=r(Yst,"perceiver"),Yst.forEach(t),L$o=r(p8e," \u2014 "),aG=n(p8e,"A",{href:!0});var Kst=s(aG);x$o=r(Kst,"PerceiverForSequenceClassification"),Kst.forEach(t),$$o=r(p8e," (Perceiver model)"),p8e.forEach(t),k$o=i(j),s2=n(j,"LI",{});var u8e=s(s2);bfe=n(u8e,"STRONG",{});var Zst=s(bfe);S$o=r(Zst,"plbart"),Zst.forEach(t),R$o=r(u8e," \u2014 "),nG=n(u8e,"A",{href:!0});var elt=s(nG);P$o=r(elt,"PLBartForSequenceClassification"),elt.forEach(t),B$o=r(u8e," (PLBart model)"),u8e.forEach(t),I$o=i(j),l2=n(j,"LI",{});var _8e=s(l2);vfe=n(_8e,"STRONG",{});var olt=s(vfe);q$o=r(olt,"qdqbert"),olt.forEach(t),N$o=r(_8e," \u2014 "),sG=n(_8e,"A",{href:!0});var rlt=s(sG);j$o=r(rlt,"QDQBertForSequenceClassification"),rlt.forEach(t),D$o=r(_8e," (QDQBert model)"),_8e.forEach(t),G$o=i(j),i2=n(j,"LI",{});var b8e=s(i2);Ffe=n(b8e,"STRONG",{});var tlt=s(Ffe);O$o=r(tlt,"reformer"),tlt.forEach(t),V$o=r(b8e," \u2014 "),lG=n(b8e,"A",{href:!0});var alt=s(lG);X$o=r(alt,"ReformerForSequenceClassification"),alt.forEach(t),z$o=r(b8e," (Reformer model)"),b8e.forEach(t),W$o=i(j),d2=n(j,"LI",{});var v8e=s(d2);Tfe=n(v8e,"STRONG",{});var nlt=s(Tfe);Q$o=r(nlt,"rembert"),nlt.forEach(t),H$o=r(v8e," \u2014 "),iG=n(v8e,"A",{href:!0});var slt=s(iG);U$o=r(slt,"RemBertForSequenceClassification"),slt.forEach(t),J$o=r(v8e," (RemBERT model)"),v8e.forEach(t),Y$o=i(j),c2=n(j,"LI",{});var F8e=s(c2);Mfe=n(F8e,"STRONG",{});var llt=s(Mfe);K$o=r(llt,"roberta"),llt.forEach(t),Z$o=r(F8e," \u2014 "),dG=n(F8e,"A",{href:!0});var ilt=s(dG);eko=r(ilt,"RobertaForSequenceClassification"),ilt.forEach(t),oko=r(F8e," (RoBERTa model)"),F8e.forEach(t),rko=i(j),f2=n(j,"LI",{});var T8e=s(f2);Efe=n(T8e,"STRONG",{});var dlt=s(Efe);tko=r(dlt,"roformer"),dlt.forEach(t),ako=r(T8e," \u2014 "),cG=n(T8e,"A",{href:!0});var clt=s(cG);nko=r(clt,"RoFormerForSequenceClassification"),clt.forEach(t),sko=r(T8e," (RoFormer model)"),T8e.forEach(t),lko=i(j),m2=n(j,"LI",{});var M8e=s(m2);Cfe=n(M8e,"STRONG",{});var flt=s(Cfe);iko=r(flt,"squeezebert"),flt.forEach(t),dko=r(M8e," \u2014 "),fG=n(M8e,"A",{href:!0});var mlt=s(fG);cko=r(mlt,"SqueezeBertForSequenceClassification"),mlt.forEach(t),fko=r(M8e," (SqueezeBERT model)"),M8e.forEach(t),mko=i(j),g2=n(j,"LI",{});var E8e=s(g2);wfe=n(E8e,"STRONG",{});var glt=s(wfe);gko=r(glt,"tapas"),glt.forEach(t),hko=r(E8e," \u2014 "),mG=n(E8e,"A",{href:!0});var hlt=s(mG);pko=r(hlt,"TapasForSequenceClassification"),hlt.forEach(t),uko=r(E8e," (TAPAS model)"),E8e.forEach(t),_ko=i(j),h2=n(j,"LI",{});var C8e=s(h2);Afe=n(C8e,"STRONG",{});var plt=s(Afe);bko=r(plt,"transfo-xl"),plt.forEach(t),vko=r(C8e," \u2014 "),gG=n(C8e,"A",{href:!0});var ult=s(gG);Fko=r(ult,"TransfoXLForSequenceClassification"),ult.forEach(t),Tko=r(C8e," (Transformer-XL model)"),C8e.forEach(t),Mko=i(j),p2=n(j,"LI",{});var w8e=s(p2);yfe=n(w8e,"STRONG",{});var _lt=s(yfe);Eko=r(_lt,"xlm"),_lt.forEach(t),Cko=r(w8e," \u2014 "),hG=n(w8e,"A",{href:!0});var blt=s(hG);wko=r(blt,"XLMForSequenceClassification"),blt.forEach(t),Ako=r(w8e," (XLM model)"),w8e.forEach(t),yko=i(j),u2=n(j,"LI",{});var A8e=s(u2);Lfe=n(A8e,"STRONG",{});var vlt=s(Lfe);Lko=r(vlt,"xlm-roberta"),vlt.forEach(t),xko=r(A8e," \u2014 "),pG=n(A8e,"A",{href:!0});var Flt=s(pG);$ko=r(Flt,"XLMRobertaForSequenceClassification"),Flt.forEach(t),kko=r(A8e," (XLM-RoBERTa model)"),A8e.forEach(t),Sko=i(j),_2=n(j,"LI",{});var y8e=s(_2);xfe=n(y8e,"STRONG",{});var Tlt=s(xfe);Rko=r(Tlt,"xlm-roberta-xl"),Tlt.forEach(t),Pko=r(y8e," \u2014 "),uG=n(y8e,"A",{href:!0});var Mlt=s(uG);Bko=r(Mlt,"XLMRobertaXLForSequenceClassification"),Mlt.forEach(t),Iko=r(y8e," (XLM-RoBERTa-XL model)"),y8e.forEach(t),qko=i(j),b2=n(j,"LI",{});var L8e=s(b2);$fe=n(L8e,"STRONG",{});var Elt=s($fe);Nko=r(Elt,"xlnet"),Elt.forEach(t),jko=r(L8e," \u2014 "),_G=n(L8e,"A",{href:!0});var Clt=s(_G);Dko=r(Clt,"XLNetForSequenceClassification"),Clt.forEach(t),Gko=r(L8e," (XLNet model)"),L8e.forEach(t),Oko=i(j),v2=n(j,"LI",{});var x8e=s(v2);kfe=n(x8e,"STRONG",{});var wlt=s(kfe);Vko=r(wlt,"yoso"),wlt.forEach(t),Xko=r(x8e," \u2014 "),bG=n(x8e,"A",{href:!0});var Alt=s(bG);zko=r(Alt,"YosoForSequenceClassification"),Alt.forEach(t),Wko=r(x8e," (YOSO model)"),x8e.forEach(t),j.forEach(t),Qko=i(sa),F2=n(sa,"P",{});var $8e=s(F2);Hko=r($8e,"The model is set in evaluation mode by default using "),Sfe=n($8e,"CODE",{});var ylt=s(Sfe);Uko=r(ylt,"model.eval()"),ylt.forEach(t),Jko=r($8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rfe=n($8e,"CODE",{});var Llt=s(Rfe);Yko=r(Llt,"model.train()"),Llt.forEach(t),$8e.forEach(t),Kko=i(sa),T(T2.$$.fragment,sa),sa.forEach(t),zs.forEach(t),eqe=i(f),Oi=n(f,"H2",{class:!0});var aje=s(Oi);M2=n(aje,"A",{id:!0,class:!0,href:!0});var xlt=s(M2);Pfe=n(xlt,"SPAN",{});var $lt=s(Pfe);T(cy.$$.fragment,$lt),$lt.forEach(t),xlt.forEach(t),Zko=i(aje),Bfe=n(aje,"SPAN",{});var klt=s(Bfe);eSo=r(klt,"AutoModelForMultipleChoice"),klt.forEach(t),aje.forEach(t),oqe=i(f),Po=n(f,"DIV",{class:!0});var Ws=s(Po);T(fy.$$.fragment,Ws),oSo=i(Ws),Vi=n(Ws,"P",{});var GK=s(Vi);rSo=r(GK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),vG=n(GK,"A",{href:!0});var Slt=s(vG);tSo=r(Slt,"from_pretrained()"),Slt.forEach(t),aSo=r(GK," class method or the "),FG=n(GK,"A",{href:!0});var Rlt=s(FG);nSo=r(Rlt,"from_config()"),Rlt.forEach(t),sSo=r(GK,` class
method.`),GK.forEach(t),lSo=i(Ws),my=n(Ws,"P",{});var nje=s(my);iSo=r(nje,"This class cannot be instantiated directly using "),Ife=n(nje,"CODE",{});var Plt=s(Ife);dSo=r(Plt,"__init__()"),Plt.forEach(t),cSo=r(nje," (throws an error)."),nje.forEach(t),fSo=i(Ws),dt=n(Ws,"DIV",{class:!0});var Cw=s(dt);T(gy.$$.fragment,Cw),mSo=i(Cw),qfe=n(Cw,"P",{});var Blt=s(qfe);gSo=r(Blt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Blt.forEach(t),hSo=i(Cw),Xi=n(Cw,"P",{});var OK=s(Xi);pSo=r(OK,`Note:
Loading a model from its configuration file does `),Nfe=n(OK,"STRONG",{});var Ilt=s(Nfe);uSo=r(Ilt,"not"),Ilt.forEach(t),_So=r(OK,` load the model weights. It only affects the
model\u2019s configuration. Use `),TG=n(OK,"A",{href:!0});var qlt=s(TG);bSo=r(qlt,"from_pretrained()"),qlt.forEach(t),vSo=r(OK," to load the model weights."),OK.forEach(t),FSo=i(Cw),T(E2.$$.fragment,Cw),Cw.forEach(t),TSo=i(Ws),ro=n(Ws,"DIV",{class:!0});var la=s(ro);T(hy.$$.fragment,la),MSo=i(la),jfe=n(la,"P",{});var Nlt=s(jfe);ESo=r(Nlt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Nlt.forEach(t),CSo=i(la),Pa=n(la,"P",{});var ww=s(Pa);wSo=r(ww,"The model class to instantiate is selected based on the "),Dfe=n(ww,"CODE",{});var jlt=s(Dfe);ASo=r(jlt,"model_type"),jlt.forEach(t),ySo=r(ww,` property of the config object (either
passed as an argument or loaded from `),Gfe=n(ww,"CODE",{});var Dlt=s(Gfe);LSo=r(Dlt,"pretrained_model_name_or_path"),Dlt.forEach(t),xSo=r(ww,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ofe=n(ww,"CODE",{});var Glt=s(Ofe);$So=r(Glt,"pretrained_model_name_or_path"),Glt.forEach(t),kSo=r(ww,":"),ww.forEach(t),SSo=i(la),Y=n(la,"UL",{});var K=s(Y);C2=n(K,"LI",{});var k8e=s(C2);Vfe=n(k8e,"STRONG",{});var Olt=s(Vfe);RSo=r(Olt,"albert"),Olt.forEach(t),PSo=r(k8e," \u2014 "),MG=n(k8e,"A",{href:!0});var Vlt=s(MG);BSo=r(Vlt,"AlbertForMultipleChoice"),Vlt.forEach(t),ISo=r(k8e," (ALBERT model)"),k8e.forEach(t),qSo=i(K),w2=n(K,"LI",{});var S8e=s(w2);Xfe=n(S8e,"STRONG",{});var Xlt=s(Xfe);NSo=r(Xlt,"bert"),Xlt.forEach(t),jSo=r(S8e," \u2014 "),EG=n(S8e,"A",{href:!0});var zlt=s(EG);DSo=r(zlt,"BertForMultipleChoice"),zlt.forEach(t),GSo=r(S8e," (BERT model)"),S8e.forEach(t),OSo=i(K),A2=n(K,"LI",{});var R8e=s(A2);zfe=n(R8e,"STRONG",{});var Wlt=s(zfe);VSo=r(Wlt,"big_bird"),Wlt.forEach(t),XSo=r(R8e," \u2014 "),CG=n(R8e,"A",{href:!0});var Qlt=s(CG);zSo=r(Qlt,"BigBirdForMultipleChoice"),Qlt.forEach(t),WSo=r(R8e," (BigBird model)"),R8e.forEach(t),QSo=i(K),y2=n(K,"LI",{});var P8e=s(y2);Wfe=n(P8e,"STRONG",{});var Hlt=s(Wfe);HSo=r(Hlt,"camembert"),Hlt.forEach(t),USo=r(P8e," \u2014 "),wG=n(P8e,"A",{href:!0});var Ult=s(wG);JSo=r(Ult,"CamembertForMultipleChoice"),Ult.forEach(t),YSo=r(P8e," (CamemBERT model)"),P8e.forEach(t),KSo=i(K),L2=n(K,"LI",{});var B8e=s(L2);Qfe=n(B8e,"STRONG",{});var Jlt=s(Qfe);ZSo=r(Jlt,"canine"),Jlt.forEach(t),eRo=r(B8e," \u2014 "),AG=n(B8e,"A",{href:!0});var Ylt=s(AG);oRo=r(Ylt,"CanineForMultipleChoice"),Ylt.forEach(t),rRo=r(B8e," (Canine model)"),B8e.forEach(t),tRo=i(K),x2=n(K,"LI",{});var I8e=s(x2);Hfe=n(I8e,"STRONG",{});var Klt=s(Hfe);aRo=r(Klt,"convbert"),Klt.forEach(t),nRo=r(I8e," \u2014 "),yG=n(I8e,"A",{href:!0});var Zlt=s(yG);sRo=r(Zlt,"ConvBertForMultipleChoice"),Zlt.forEach(t),lRo=r(I8e," (ConvBERT model)"),I8e.forEach(t),iRo=i(K),$2=n(K,"LI",{});var q8e=s($2);Ufe=n(q8e,"STRONG",{});var eit=s(Ufe);dRo=r(eit,"data2vec-text"),eit.forEach(t),cRo=r(q8e," \u2014 "),LG=n(q8e,"A",{href:!0});var oit=s(LG);fRo=r(oit,"Data2VecTextForMultipleChoice"),oit.forEach(t),mRo=r(q8e," (Data2VecText model)"),q8e.forEach(t),gRo=i(K),k2=n(K,"LI",{});var N8e=s(k2);Jfe=n(N8e,"STRONG",{});var rit=s(Jfe);hRo=r(rit,"deberta-v2"),rit.forEach(t),pRo=r(N8e," \u2014 "),xG=n(N8e,"A",{href:!0});var tit=s(xG);uRo=r(tit,"DebertaV2ForMultipleChoice"),tit.forEach(t),_Ro=r(N8e," (DeBERTa-v2 model)"),N8e.forEach(t),bRo=i(K),S2=n(K,"LI",{});var j8e=s(S2);Yfe=n(j8e,"STRONG",{});var ait=s(Yfe);vRo=r(ait,"distilbert"),ait.forEach(t),FRo=r(j8e," \u2014 "),$G=n(j8e,"A",{href:!0});var nit=s($G);TRo=r(nit,"DistilBertForMultipleChoice"),nit.forEach(t),MRo=r(j8e," (DistilBERT model)"),j8e.forEach(t),ERo=i(K),R2=n(K,"LI",{});var D8e=s(R2);Kfe=n(D8e,"STRONG",{});var sit=s(Kfe);CRo=r(sit,"electra"),sit.forEach(t),wRo=r(D8e," \u2014 "),kG=n(D8e,"A",{href:!0});var lit=s(kG);ARo=r(lit,"ElectraForMultipleChoice"),lit.forEach(t),yRo=r(D8e," (ELECTRA model)"),D8e.forEach(t),LRo=i(K),P2=n(K,"LI",{});var G8e=s(P2);Zfe=n(G8e,"STRONG",{});var iit=s(Zfe);xRo=r(iit,"flaubert"),iit.forEach(t),$Ro=r(G8e," \u2014 "),SG=n(G8e,"A",{href:!0});var dit=s(SG);kRo=r(dit,"FlaubertForMultipleChoice"),dit.forEach(t),SRo=r(G8e," (FlauBERT model)"),G8e.forEach(t),RRo=i(K),B2=n(K,"LI",{});var O8e=s(B2);eme=n(O8e,"STRONG",{});var cit=s(eme);PRo=r(cit,"fnet"),cit.forEach(t),BRo=r(O8e," \u2014 "),RG=n(O8e,"A",{href:!0});var fit=s(RG);IRo=r(fit,"FNetForMultipleChoice"),fit.forEach(t),qRo=r(O8e," (FNet model)"),O8e.forEach(t),NRo=i(K),I2=n(K,"LI",{});var V8e=s(I2);ome=n(V8e,"STRONG",{});var mit=s(ome);jRo=r(mit,"funnel"),mit.forEach(t),DRo=r(V8e," \u2014 "),PG=n(V8e,"A",{href:!0});var git=s(PG);GRo=r(git,"FunnelForMultipleChoice"),git.forEach(t),ORo=r(V8e," (Funnel Transformer model)"),V8e.forEach(t),VRo=i(K),q2=n(K,"LI",{});var X8e=s(q2);rme=n(X8e,"STRONG",{});var hit=s(rme);XRo=r(hit,"ibert"),hit.forEach(t),zRo=r(X8e," \u2014 "),BG=n(X8e,"A",{href:!0});var pit=s(BG);WRo=r(pit,"IBertForMultipleChoice"),pit.forEach(t),QRo=r(X8e," (I-BERT model)"),X8e.forEach(t),HRo=i(K),N2=n(K,"LI",{});var z8e=s(N2);tme=n(z8e,"STRONG",{});var uit=s(tme);URo=r(uit,"longformer"),uit.forEach(t),JRo=r(z8e," \u2014 "),IG=n(z8e,"A",{href:!0});var _it=s(IG);YRo=r(_it,"LongformerForMultipleChoice"),_it.forEach(t),KRo=r(z8e," (Longformer model)"),z8e.forEach(t),ZRo=i(K),j2=n(K,"LI",{});var W8e=s(j2);ame=n(W8e,"STRONG",{});var bit=s(ame);ePo=r(bit,"megatron-bert"),bit.forEach(t),oPo=r(W8e," \u2014 "),qG=n(W8e,"A",{href:!0});var vit=s(qG);rPo=r(vit,"MegatronBertForMultipleChoice"),vit.forEach(t),tPo=r(W8e," (MegatronBert model)"),W8e.forEach(t),aPo=i(K),D2=n(K,"LI",{});var Q8e=s(D2);nme=n(Q8e,"STRONG",{});var Fit=s(nme);nPo=r(Fit,"mobilebert"),Fit.forEach(t),sPo=r(Q8e," \u2014 "),NG=n(Q8e,"A",{href:!0});var Tit=s(NG);lPo=r(Tit,"MobileBertForMultipleChoice"),Tit.forEach(t),iPo=r(Q8e," (MobileBERT model)"),Q8e.forEach(t),dPo=i(K),G2=n(K,"LI",{});var H8e=s(G2);sme=n(H8e,"STRONG",{});var Mit=s(sme);cPo=r(Mit,"mpnet"),Mit.forEach(t),fPo=r(H8e," \u2014 "),jG=n(H8e,"A",{href:!0});var Eit=s(jG);mPo=r(Eit,"MPNetForMultipleChoice"),Eit.forEach(t),gPo=r(H8e," (MPNet model)"),H8e.forEach(t),hPo=i(K),O2=n(K,"LI",{});var U8e=s(O2);lme=n(U8e,"STRONG",{});var Cit=s(lme);pPo=r(Cit,"nystromformer"),Cit.forEach(t),uPo=r(U8e," \u2014 "),DG=n(U8e,"A",{href:!0});var wit=s(DG);_Po=r(wit,"NystromformerForMultipleChoice"),wit.forEach(t),bPo=r(U8e," (Nystromformer model)"),U8e.forEach(t),vPo=i(K),V2=n(K,"LI",{});var J8e=s(V2);ime=n(J8e,"STRONG",{});var Ait=s(ime);FPo=r(Ait,"qdqbert"),Ait.forEach(t),TPo=r(J8e," \u2014 "),GG=n(J8e,"A",{href:!0});var yit=s(GG);MPo=r(yit,"QDQBertForMultipleChoice"),yit.forEach(t),EPo=r(J8e," (QDQBert model)"),J8e.forEach(t),CPo=i(K),X2=n(K,"LI",{});var Y8e=s(X2);dme=n(Y8e,"STRONG",{});var Lit=s(dme);wPo=r(Lit,"rembert"),Lit.forEach(t),APo=r(Y8e," \u2014 "),OG=n(Y8e,"A",{href:!0});var xit=s(OG);yPo=r(xit,"RemBertForMultipleChoice"),xit.forEach(t),LPo=r(Y8e," (RemBERT model)"),Y8e.forEach(t),xPo=i(K),z2=n(K,"LI",{});var K8e=s(z2);cme=n(K8e,"STRONG",{});var $it=s(cme);$Po=r($it,"roberta"),$it.forEach(t),kPo=r(K8e," \u2014 "),VG=n(K8e,"A",{href:!0});var kit=s(VG);SPo=r(kit,"RobertaForMultipleChoice"),kit.forEach(t),RPo=r(K8e," (RoBERTa model)"),K8e.forEach(t),PPo=i(K),W2=n(K,"LI",{});var Z8e=s(W2);fme=n(Z8e,"STRONG",{});var Sit=s(fme);BPo=r(Sit,"roformer"),Sit.forEach(t),IPo=r(Z8e," \u2014 "),XG=n(Z8e,"A",{href:!0});var Rit=s(XG);qPo=r(Rit,"RoFormerForMultipleChoice"),Rit.forEach(t),NPo=r(Z8e," (RoFormer model)"),Z8e.forEach(t),jPo=i(K),Q2=n(K,"LI",{});var exe=s(Q2);mme=n(exe,"STRONG",{});var Pit=s(mme);DPo=r(Pit,"squeezebert"),Pit.forEach(t),GPo=r(exe," \u2014 "),zG=n(exe,"A",{href:!0});var Bit=s(zG);OPo=r(Bit,"SqueezeBertForMultipleChoice"),Bit.forEach(t),VPo=r(exe," (SqueezeBERT model)"),exe.forEach(t),XPo=i(K),H2=n(K,"LI",{});var oxe=s(H2);gme=n(oxe,"STRONG",{});var Iit=s(gme);zPo=r(Iit,"xlm"),Iit.forEach(t),WPo=r(oxe," \u2014 "),WG=n(oxe,"A",{href:!0});var qit=s(WG);QPo=r(qit,"XLMForMultipleChoice"),qit.forEach(t),HPo=r(oxe," (XLM model)"),oxe.forEach(t),UPo=i(K),U2=n(K,"LI",{});var rxe=s(U2);hme=n(rxe,"STRONG",{});var Nit=s(hme);JPo=r(Nit,"xlm-roberta"),Nit.forEach(t),YPo=r(rxe," \u2014 "),QG=n(rxe,"A",{href:!0});var jit=s(QG);KPo=r(jit,"XLMRobertaForMultipleChoice"),jit.forEach(t),ZPo=r(rxe," (XLM-RoBERTa model)"),rxe.forEach(t),eBo=i(K),J2=n(K,"LI",{});var txe=s(J2);pme=n(txe,"STRONG",{});var Dit=s(pme);oBo=r(Dit,"xlm-roberta-xl"),Dit.forEach(t),rBo=r(txe," \u2014 "),HG=n(txe,"A",{href:!0});var Git=s(HG);tBo=r(Git,"XLMRobertaXLForMultipleChoice"),Git.forEach(t),aBo=r(txe," (XLM-RoBERTa-XL model)"),txe.forEach(t),nBo=i(K),Y2=n(K,"LI",{});var axe=s(Y2);ume=n(axe,"STRONG",{});var Oit=s(ume);sBo=r(Oit,"xlnet"),Oit.forEach(t),lBo=r(axe," \u2014 "),UG=n(axe,"A",{href:!0});var Vit=s(UG);iBo=r(Vit,"XLNetForMultipleChoice"),Vit.forEach(t),dBo=r(axe," (XLNet model)"),axe.forEach(t),cBo=i(K),K2=n(K,"LI",{});var nxe=s(K2);_me=n(nxe,"STRONG",{});var Xit=s(_me);fBo=r(Xit,"yoso"),Xit.forEach(t),mBo=r(nxe," \u2014 "),JG=n(nxe,"A",{href:!0});var zit=s(JG);gBo=r(zit,"YosoForMultipleChoice"),zit.forEach(t),hBo=r(nxe," (YOSO model)"),nxe.forEach(t),K.forEach(t),pBo=i(la),Z2=n(la,"P",{});var sxe=s(Z2);uBo=r(sxe,"The model is set in evaluation mode by default using "),bme=n(sxe,"CODE",{});var Wit=s(bme);_Bo=r(Wit,"model.eval()"),Wit.forEach(t),bBo=r(sxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vme=n(sxe,"CODE",{});var Qit=s(vme);vBo=r(Qit,"model.train()"),Qit.forEach(t),sxe.forEach(t),FBo=i(la),T(ev.$$.fragment,la),la.forEach(t),Ws.forEach(t),rqe=i(f),zi=n(f,"H2",{class:!0});var sje=s(zi);ov=n(sje,"A",{id:!0,class:!0,href:!0});var Hit=s(ov);Fme=n(Hit,"SPAN",{});var Uit=s(Fme);T(py.$$.fragment,Uit),Uit.forEach(t),Hit.forEach(t),TBo=i(sje),Tme=n(sje,"SPAN",{});var Jit=s(Tme);MBo=r(Jit,"AutoModelForNextSentencePrediction"),Jit.forEach(t),sje.forEach(t),tqe=i(f),Bo=n(f,"DIV",{class:!0});var Qs=s(Bo);T(uy.$$.fragment,Qs),EBo=i(Qs),Wi=n(Qs,"P",{});var VK=s(Wi);CBo=r(VK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),YG=n(VK,"A",{href:!0});var Yit=s(YG);wBo=r(Yit,"from_pretrained()"),Yit.forEach(t),ABo=r(VK," class method or the "),KG=n(VK,"A",{href:!0});var Kit=s(KG);yBo=r(Kit,"from_config()"),Kit.forEach(t),LBo=r(VK,` class
method.`),VK.forEach(t),xBo=i(Qs),_y=n(Qs,"P",{});var lje=s(_y);$Bo=r(lje,"This class cannot be instantiated directly using "),Mme=n(lje,"CODE",{});var Zit=s(Mme);kBo=r(Zit,"__init__()"),Zit.forEach(t),SBo=r(lje," (throws an error)."),lje.forEach(t),RBo=i(Qs),ct=n(Qs,"DIV",{class:!0});var Aw=s(ct);T(by.$$.fragment,Aw),PBo=i(Aw),Eme=n(Aw,"P",{});var edt=s(Eme);BBo=r(edt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),edt.forEach(t),IBo=i(Aw),Qi=n(Aw,"P",{});var XK=s(Qi);qBo=r(XK,`Note:
Loading a model from its configuration file does `),Cme=n(XK,"STRONG",{});var odt=s(Cme);NBo=r(odt,"not"),odt.forEach(t),jBo=r(XK,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZG=n(XK,"A",{href:!0});var rdt=s(ZG);DBo=r(rdt,"from_pretrained()"),rdt.forEach(t),GBo=r(XK," to load the model weights."),XK.forEach(t),OBo=i(Aw),T(rv.$$.fragment,Aw),Aw.forEach(t),VBo=i(Qs),to=n(Qs,"DIV",{class:!0});var ia=s(to);T(vy.$$.fragment,ia),XBo=i(ia),wme=n(ia,"P",{});var tdt=s(wme);zBo=r(tdt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),tdt.forEach(t),WBo=i(ia),Ba=n(ia,"P",{});var yw=s(Ba);QBo=r(yw,"The model class to instantiate is selected based on the "),Ame=n(yw,"CODE",{});var adt=s(Ame);HBo=r(adt,"model_type"),adt.forEach(t),UBo=r(yw,` property of the config object (either
passed as an argument or loaded from `),yme=n(yw,"CODE",{});var ndt=s(yme);JBo=r(ndt,"pretrained_model_name_or_path"),ndt.forEach(t),YBo=r(yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lme=n(yw,"CODE",{});var sdt=s(Lme);KBo=r(sdt,"pretrained_model_name_or_path"),sdt.forEach(t),ZBo=r(yw,":"),yw.forEach(t),eIo=i(ia),Yr=n(ia,"UL",{});var Hs=s(Yr);tv=n(Hs,"LI",{});var lxe=s(tv);xme=n(lxe,"STRONG",{});var ldt=s(xme);oIo=r(ldt,"bert"),ldt.forEach(t),rIo=r(lxe," \u2014 "),eO=n(lxe,"A",{href:!0});var idt=s(eO);tIo=r(idt,"BertForNextSentencePrediction"),idt.forEach(t),aIo=r(lxe," (BERT model)"),lxe.forEach(t),nIo=i(Hs),av=n(Hs,"LI",{});var ixe=s(av);$me=n(ixe,"STRONG",{});var ddt=s($me);sIo=r(ddt,"fnet"),ddt.forEach(t),lIo=r(ixe," \u2014 "),oO=n(ixe,"A",{href:!0});var cdt=s(oO);iIo=r(cdt,"FNetForNextSentencePrediction"),cdt.forEach(t),dIo=r(ixe," (FNet model)"),ixe.forEach(t),cIo=i(Hs),nv=n(Hs,"LI",{});var dxe=s(nv);kme=n(dxe,"STRONG",{});var fdt=s(kme);fIo=r(fdt,"megatron-bert"),fdt.forEach(t),mIo=r(dxe," \u2014 "),rO=n(dxe,"A",{href:!0});var mdt=s(rO);gIo=r(mdt,"MegatronBertForNextSentencePrediction"),mdt.forEach(t),hIo=r(dxe," (MegatronBert model)"),dxe.forEach(t),pIo=i(Hs),sv=n(Hs,"LI",{});var cxe=s(sv);Sme=n(cxe,"STRONG",{});var gdt=s(Sme);uIo=r(gdt,"mobilebert"),gdt.forEach(t),_Io=r(cxe," \u2014 "),tO=n(cxe,"A",{href:!0});var hdt=s(tO);bIo=r(hdt,"MobileBertForNextSentencePrediction"),hdt.forEach(t),vIo=r(cxe," (MobileBERT model)"),cxe.forEach(t),FIo=i(Hs),lv=n(Hs,"LI",{});var fxe=s(lv);Rme=n(fxe,"STRONG",{});var pdt=s(Rme);TIo=r(pdt,"qdqbert"),pdt.forEach(t),MIo=r(fxe," \u2014 "),aO=n(fxe,"A",{href:!0});var udt=s(aO);EIo=r(udt,"QDQBertForNextSentencePrediction"),udt.forEach(t),CIo=r(fxe," (QDQBert model)"),fxe.forEach(t),Hs.forEach(t),wIo=i(ia),iv=n(ia,"P",{});var mxe=s(iv);AIo=r(mxe,"The model is set in evaluation mode by default using "),Pme=n(mxe,"CODE",{});var _dt=s(Pme);yIo=r(_dt,"model.eval()"),_dt.forEach(t),LIo=r(mxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bme=n(mxe,"CODE",{});var bdt=s(Bme);xIo=r(bdt,"model.train()"),bdt.forEach(t),mxe.forEach(t),$Io=i(ia),T(dv.$$.fragment,ia),ia.forEach(t),Qs.forEach(t),aqe=i(f),Hi=n(f,"H2",{class:!0});var ije=s(Hi);cv=n(ije,"A",{id:!0,class:!0,href:!0});var vdt=s(cv);Ime=n(vdt,"SPAN",{});var Fdt=s(Ime);T(Fy.$$.fragment,Fdt),Fdt.forEach(t),vdt.forEach(t),kIo=i(ije),qme=n(ije,"SPAN",{});var Tdt=s(qme);SIo=r(Tdt,"AutoModelForTokenClassification"),Tdt.forEach(t),ije.forEach(t),nqe=i(f),Io=n(f,"DIV",{class:!0});var Us=s(Io);T(Ty.$$.fragment,Us),RIo=i(Us),Ui=n(Us,"P",{});var zK=s(Ui);PIo=r(zK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),nO=n(zK,"A",{href:!0});var Mdt=s(nO);BIo=r(Mdt,"from_pretrained()"),Mdt.forEach(t),IIo=r(zK," class method or the "),sO=n(zK,"A",{href:!0});var Edt=s(sO);qIo=r(Edt,"from_config()"),Edt.forEach(t),NIo=r(zK,` class
method.`),zK.forEach(t),jIo=i(Us),My=n(Us,"P",{});var dje=s(My);DIo=r(dje,"This class cannot be instantiated directly using "),Nme=n(dje,"CODE",{});var Cdt=s(Nme);GIo=r(Cdt,"__init__()"),Cdt.forEach(t),OIo=r(dje," (throws an error)."),dje.forEach(t),VIo=i(Us),ft=n(Us,"DIV",{class:!0});var Lw=s(ft);T(Ey.$$.fragment,Lw),XIo=i(Lw),jme=n(Lw,"P",{});var wdt=s(jme);zIo=r(wdt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),wdt.forEach(t),WIo=i(Lw),Ji=n(Lw,"P",{});var WK=s(Ji);QIo=r(WK,`Note:
Loading a model from its configuration file does `),Dme=n(WK,"STRONG",{});var Adt=s(Dme);HIo=r(Adt,"not"),Adt.forEach(t),UIo=r(WK,` load the model weights. It only affects the
model\u2019s configuration. Use `),lO=n(WK,"A",{href:!0});var ydt=s(lO);JIo=r(ydt,"from_pretrained()"),ydt.forEach(t),YIo=r(WK," to load the model weights."),WK.forEach(t),KIo=i(Lw),T(fv.$$.fragment,Lw),Lw.forEach(t),ZIo=i(Us),ao=n(Us,"DIV",{class:!0});var da=s(ao);T(Cy.$$.fragment,da),eqo=i(da),Gme=n(da,"P",{});var Ldt=s(Gme);oqo=r(Ldt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Ldt.forEach(t),rqo=i(da),Ia=n(da,"P",{});var xw=s(Ia);tqo=r(xw,"The model class to instantiate is selected based on the "),Ome=n(xw,"CODE",{});var xdt=s(Ome);aqo=r(xdt,"model_type"),xdt.forEach(t),nqo=r(xw,` property of the config object (either
passed as an argument or loaded from `),Vme=n(xw,"CODE",{});var $dt=s(Vme);sqo=r($dt,"pretrained_model_name_or_path"),$dt.forEach(t),lqo=r(xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xme=n(xw,"CODE",{});var kdt=s(Xme);iqo=r(kdt,"pretrained_model_name_or_path"),kdt.forEach(t),dqo=r(xw,":"),xw.forEach(t),cqo=i(da),U=n(da,"UL",{});var J=s(U);mv=n(J,"LI",{});var gxe=s(mv);zme=n(gxe,"STRONG",{});var Sdt=s(zme);fqo=r(Sdt,"albert"),Sdt.forEach(t),mqo=r(gxe," \u2014 "),iO=n(gxe,"A",{href:!0});var Rdt=s(iO);gqo=r(Rdt,"AlbertForTokenClassification"),Rdt.forEach(t),hqo=r(gxe," (ALBERT model)"),gxe.forEach(t),pqo=i(J),gv=n(J,"LI",{});var hxe=s(gv);Wme=n(hxe,"STRONG",{});var Pdt=s(Wme);uqo=r(Pdt,"bert"),Pdt.forEach(t),_qo=r(hxe," \u2014 "),dO=n(hxe,"A",{href:!0});var Bdt=s(dO);bqo=r(Bdt,"BertForTokenClassification"),Bdt.forEach(t),vqo=r(hxe," (BERT model)"),hxe.forEach(t),Fqo=i(J),hv=n(J,"LI",{});var pxe=s(hv);Qme=n(pxe,"STRONG",{});var Idt=s(Qme);Tqo=r(Idt,"big_bird"),Idt.forEach(t),Mqo=r(pxe," \u2014 "),cO=n(pxe,"A",{href:!0});var qdt=s(cO);Eqo=r(qdt,"BigBirdForTokenClassification"),qdt.forEach(t),Cqo=r(pxe," (BigBird model)"),pxe.forEach(t),wqo=i(J),pv=n(J,"LI",{});var uxe=s(pv);Hme=n(uxe,"STRONG",{});var Ndt=s(Hme);Aqo=r(Ndt,"camembert"),Ndt.forEach(t),yqo=r(uxe," \u2014 "),fO=n(uxe,"A",{href:!0});var jdt=s(fO);Lqo=r(jdt,"CamembertForTokenClassification"),jdt.forEach(t),xqo=r(uxe," (CamemBERT model)"),uxe.forEach(t),$qo=i(J),uv=n(J,"LI",{});var _xe=s(uv);Ume=n(_xe,"STRONG",{});var Ddt=s(Ume);kqo=r(Ddt,"canine"),Ddt.forEach(t),Sqo=r(_xe," \u2014 "),mO=n(_xe,"A",{href:!0});var Gdt=s(mO);Rqo=r(Gdt,"CanineForTokenClassification"),Gdt.forEach(t),Pqo=r(_xe," (Canine model)"),_xe.forEach(t),Bqo=i(J),_v=n(J,"LI",{});var bxe=s(_v);Jme=n(bxe,"STRONG",{});var Odt=s(Jme);Iqo=r(Odt,"convbert"),Odt.forEach(t),qqo=r(bxe," \u2014 "),gO=n(bxe,"A",{href:!0});var Vdt=s(gO);Nqo=r(Vdt,"ConvBertForTokenClassification"),Vdt.forEach(t),jqo=r(bxe," (ConvBERT model)"),bxe.forEach(t),Dqo=i(J),bv=n(J,"LI",{});var vxe=s(bv);Yme=n(vxe,"STRONG",{});var Xdt=s(Yme);Gqo=r(Xdt,"data2vec-text"),Xdt.forEach(t),Oqo=r(vxe," \u2014 "),hO=n(vxe,"A",{href:!0});var zdt=s(hO);Vqo=r(zdt,"Data2VecTextForTokenClassification"),zdt.forEach(t),Xqo=r(vxe," (Data2VecText model)"),vxe.forEach(t),zqo=i(J),vv=n(J,"LI",{});var Fxe=s(vv);Kme=n(Fxe,"STRONG",{});var Wdt=s(Kme);Wqo=r(Wdt,"deberta"),Wdt.forEach(t),Qqo=r(Fxe," \u2014 "),pO=n(Fxe,"A",{href:!0});var Qdt=s(pO);Hqo=r(Qdt,"DebertaForTokenClassification"),Qdt.forEach(t),Uqo=r(Fxe," (DeBERTa model)"),Fxe.forEach(t),Jqo=i(J),Fv=n(J,"LI",{});var Txe=s(Fv);Zme=n(Txe,"STRONG",{});var Hdt=s(Zme);Yqo=r(Hdt,"deberta-v2"),Hdt.forEach(t),Kqo=r(Txe," \u2014 "),uO=n(Txe,"A",{href:!0});var Udt=s(uO);Zqo=r(Udt,"DebertaV2ForTokenClassification"),Udt.forEach(t),eNo=r(Txe," (DeBERTa-v2 model)"),Txe.forEach(t),oNo=i(J),Tv=n(J,"LI",{});var Mxe=s(Tv);ege=n(Mxe,"STRONG",{});var Jdt=s(ege);rNo=r(Jdt,"distilbert"),Jdt.forEach(t),tNo=r(Mxe," \u2014 "),_O=n(Mxe,"A",{href:!0});var Ydt=s(_O);aNo=r(Ydt,"DistilBertForTokenClassification"),Ydt.forEach(t),nNo=r(Mxe," (DistilBERT model)"),Mxe.forEach(t),sNo=i(J),Mv=n(J,"LI",{});var Exe=s(Mv);oge=n(Exe,"STRONG",{});var Kdt=s(oge);lNo=r(Kdt,"electra"),Kdt.forEach(t),iNo=r(Exe," \u2014 "),bO=n(Exe,"A",{href:!0});var Zdt=s(bO);dNo=r(Zdt,"ElectraForTokenClassification"),Zdt.forEach(t),cNo=r(Exe," (ELECTRA model)"),Exe.forEach(t),fNo=i(J),Ev=n(J,"LI",{});var Cxe=s(Ev);rge=n(Cxe,"STRONG",{});var ect=s(rge);mNo=r(ect,"flaubert"),ect.forEach(t),gNo=r(Cxe," \u2014 "),vO=n(Cxe,"A",{href:!0});var oct=s(vO);hNo=r(oct,"FlaubertForTokenClassification"),oct.forEach(t),pNo=r(Cxe," (FlauBERT model)"),Cxe.forEach(t),uNo=i(J),Cv=n(J,"LI",{});var wxe=s(Cv);tge=n(wxe,"STRONG",{});var rct=s(tge);_No=r(rct,"fnet"),rct.forEach(t),bNo=r(wxe," \u2014 "),FO=n(wxe,"A",{href:!0});var tct=s(FO);vNo=r(tct,"FNetForTokenClassification"),tct.forEach(t),FNo=r(wxe," (FNet model)"),wxe.forEach(t),TNo=i(J),wv=n(J,"LI",{});var Axe=s(wv);age=n(Axe,"STRONG",{});var act=s(age);MNo=r(act,"funnel"),act.forEach(t),ENo=r(Axe," \u2014 "),TO=n(Axe,"A",{href:!0});var nct=s(TO);CNo=r(nct,"FunnelForTokenClassification"),nct.forEach(t),wNo=r(Axe," (Funnel Transformer model)"),Axe.forEach(t),ANo=i(J),Av=n(J,"LI",{});var yxe=s(Av);nge=n(yxe,"STRONG",{});var sct=s(nge);yNo=r(sct,"gpt2"),sct.forEach(t),LNo=r(yxe," \u2014 "),MO=n(yxe,"A",{href:!0});var lct=s(MO);xNo=r(lct,"GPT2ForTokenClassification"),lct.forEach(t),$No=r(yxe," (OpenAI GPT-2 model)"),yxe.forEach(t),kNo=i(J),yv=n(J,"LI",{});var Lxe=s(yv);sge=n(Lxe,"STRONG",{});var ict=s(sge);SNo=r(ict,"ibert"),ict.forEach(t),RNo=r(Lxe," \u2014 "),EO=n(Lxe,"A",{href:!0});var dct=s(EO);PNo=r(dct,"IBertForTokenClassification"),dct.forEach(t),BNo=r(Lxe," (I-BERT model)"),Lxe.forEach(t),INo=i(J),Lv=n(J,"LI",{});var xxe=s(Lv);lge=n(xxe,"STRONG",{});var cct=s(lge);qNo=r(cct,"layoutlm"),cct.forEach(t),NNo=r(xxe," \u2014 "),CO=n(xxe,"A",{href:!0});var fct=s(CO);jNo=r(fct,"LayoutLMForTokenClassification"),fct.forEach(t),DNo=r(xxe," (LayoutLM model)"),xxe.forEach(t),GNo=i(J),xv=n(J,"LI",{});var $xe=s(xv);ige=n($xe,"STRONG",{});var mct=s(ige);ONo=r(mct,"layoutlmv2"),mct.forEach(t),VNo=r($xe," \u2014 "),wO=n($xe,"A",{href:!0});var gct=s(wO);XNo=r(gct,"LayoutLMv2ForTokenClassification"),gct.forEach(t),zNo=r($xe," (LayoutLMv2 model)"),$xe.forEach(t),WNo=i(J),$v=n(J,"LI",{});var kxe=s($v);dge=n(kxe,"STRONG",{});var hct=s(dge);QNo=r(hct,"longformer"),hct.forEach(t),HNo=r(kxe," \u2014 "),AO=n(kxe,"A",{href:!0});var pct=s(AO);UNo=r(pct,"LongformerForTokenClassification"),pct.forEach(t),JNo=r(kxe," (Longformer model)"),kxe.forEach(t),YNo=i(J),kv=n(J,"LI",{});var Sxe=s(kv);cge=n(Sxe,"STRONG",{});var uct=s(cge);KNo=r(uct,"megatron-bert"),uct.forEach(t),ZNo=r(Sxe," \u2014 "),yO=n(Sxe,"A",{href:!0});var _ct=s(yO);ejo=r(_ct,"MegatronBertForTokenClassification"),_ct.forEach(t),ojo=r(Sxe," (MegatronBert model)"),Sxe.forEach(t),rjo=i(J),Sv=n(J,"LI",{});var Rxe=s(Sv);fge=n(Rxe,"STRONG",{});var bct=s(fge);tjo=r(bct,"mobilebert"),bct.forEach(t),ajo=r(Rxe," \u2014 "),LO=n(Rxe,"A",{href:!0});var vct=s(LO);njo=r(vct,"MobileBertForTokenClassification"),vct.forEach(t),sjo=r(Rxe," (MobileBERT model)"),Rxe.forEach(t),ljo=i(J),Rv=n(J,"LI",{});var Pxe=s(Rv);mge=n(Pxe,"STRONG",{});var Fct=s(mge);ijo=r(Fct,"mpnet"),Fct.forEach(t),djo=r(Pxe," \u2014 "),xO=n(Pxe,"A",{href:!0});var Tct=s(xO);cjo=r(Tct,"MPNetForTokenClassification"),Tct.forEach(t),fjo=r(Pxe," (MPNet model)"),Pxe.forEach(t),mjo=i(J),Pv=n(J,"LI",{});var Bxe=s(Pv);gge=n(Bxe,"STRONG",{});var Mct=s(gge);gjo=r(Mct,"nystromformer"),Mct.forEach(t),hjo=r(Bxe," \u2014 "),$O=n(Bxe,"A",{href:!0});var Ect=s($O);pjo=r(Ect,"NystromformerForTokenClassification"),Ect.forEach(t),ujo=r(Bxe," (Nystromformer model)"),Bxe.forEach(t),_jo=i(J),Bv=n(J,"LI",{});var Ixe=s(Bv);hge=n(Ixe,"STRONG",{});var Cct=s(hge);bjo=r(Cct,"qdqbert"),Cct.forEach(t),vjo=r(Ixe," \u2014 "),kO=n(Ixe,"A",{href:!0});var wct=s(kO);Fjo=r(wct,"QDQBertForTokenClassification"),wct.forEach(t),Tjo=r(Ixe," (QDQBert model)"),Ixe.forEach(t),Mjo=i(J),Iv=n(J,"LI",{});var qxe=s(Iv);pge=n(qxe,"STRONG",{});var Act=s(pge);Ejo=r(Act,"rembert"),Act.forEach(t),Cjo=r(qxe," \u2014 "),SO=n(qxe,"A",{href:!0});var yct=s(SO);wjo=r(yct,"RemBertForTokenClassification"),yct.forEach(t),Ajo=r(qxe," (RemBERT model)"),qxe.forEach(t),yjo=i(J),qv=n(J,"LI",{});var Nxe=s(qv);uge=n(Nxe,"STRONG",{});var Lct=s(uge);Ljo=r(Lct,"roberta"),Lct.forEach(t),xjo=r(Nxe," \u2014 "),RO=n(Nxe,"A",{href:!0});var xct=s(RO);$jo=r(xct,"RobertaForTokenClassification"),xct.forEach(t),kjo=r(Nxe," (RoBERTa model)"),Nxe.forEach(t),Sjo=i(J),Nv=n(J,"LI",{});var jxe=s(Nv);_ge=n(jxe,"STRONG",{});var $ct=s(_ge);Rjo=r($ct,"roformer"),$ct.forEach(t),Pjo=r(jxe," \u2014 "),PO=n(jxe,"A",{href:!0});var kct=s(PO);Bjo=r(kct,"RoFormerForTokenClassification"),kct.forEach(t),Ijo=r(jxe," (RoFormer model)"),jxe.forEach(t),qjo=i(J),jv=n(J,"LI",{});var Dxe=s(jv);bge=n(Dxe,"STRONG",{});var Sct=s(bge);Njo=r(Sct,"squeezebert"),Sct.forEach(t),jjo=r(Dxe," \u2014 "),BO=n(Dxe,"A",{href:!0});var Rct=s(BO);Djo=r(Rct,"SqueezeBertForTokenClassification"),Rct.forEach(t),Gjo=r(Dxe," (SqueezeBERT model)"),Dxe.forEach(t),Ojo=i(J),Dv=n(J,"LI",{});var Gxe=s(Dv);vge=n(Gxe,"STRONG",{});var Pct=s(vge);Vjo=r(Pct,"xlm"),Pct.forEach(t),Xjo=r(Gxe," \u2014 "),IO=n(Gxe,"A",{href:!0});var Bct=s(IO);zjo=r(Bct,"XLMForTokenClassification"),Bct.forEach(t),Wjo=r(Gxe," (XLM model)"),Gxe.forEach(t),Qjo=i(J),Gv=n(J,"LI",{});var Oxe=s(Gv);Fge=n(Oxe,"STRONG",{});var Ict=s(Fge);Hjo=r(Ict,"xlm-roberta"),Ict.forEach(t),Ujo=r(Oxe," \u2014 "),qO=n(Oxe,"A",{href:!0});var qct=s(qO);Jjo=r(qct,"XLMRobertaForTokenClassification"),qct.forEach(t),Yjo=r(Oxe," (XLM-RoBERTa model)"),Oxe.forEach(t),Kjo=i(J),Ov=n(J,"LI",{});var Vxe=s(Ov);Tge=n(Vxe,"STRONG",{});var Nct=s(Tge);Zjo=r(Nct,"xlm-roberta-xl"),Nct.forEach(t),eDo=r(Vxe," \u2014 "),NO=n(Vxe,"A",{href:!0});var jct=s(NO);oDo=r(jct,"XLMRobertaXLForTokenClassification"),jct.forEach(t),rDo=r(Vxe," (XLM-RoBERTa-XL model)"),Vxe.forEach(t),tDo=i(J),Vv=n(J,"LI",{});var Xxe=s(Vv);Mge=n(Xxe,"STRONG",{});var Dct=s(Mge);aDo=r(Dct,"xlnet"),Dct.forEach(t),nDo=r(Xxe," \u2014 "),jO=n(Xxe,"A",{href:!0});var Gct=s(jO);sDo=r(Gct,"XLNetForTokenClassification"),Gct.forEach(t),lDo=r(Xxe," (XLNet model)"),Xxe.forEach(t),iDo=i(J),Xv=n(J,"LI",{});var zxe=s(Xv);Ege=n(zxe,"STRONG",{});var Oct=s(Ege);dDo=r(Oct,"yoso"),Oct.forEach(t),cDo=r(zxe," \u2014 "),DO=n(zxe,"A",{href:!0});var Vct=s(DO);fDo=r(Vct,"YosoForTokenClassification"),Vct.forEach(t),mDo=r(zxe," (YOSO model)"),zxe.forEach(t),J.forEach(t),gDo=i(da),zv=n(da,"P",{});var Wxe=s(zv);hDo=r(Wxe,"The model is set in evaluation mode by default using "),Cge=n(Wxe,"CODE",{});var Xct=s(Cge);pDo=r(Xct,"model.eval()"),Xct.forEach(t),uDo=r(Wxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wge=n(Wxe,"CODE",{});var zct=s(wge);_Do=r(zct,"model.train()"),zct.forEach(t),Wxe.forEach(t),bDo=i(da),T(Wv.$$.fragment,da),da.forEach(t),Us.forEach(t),sqe=i(f),Yi=n(f,"H2",{class:!0});var cje=s(Yi);Qv=n(cje,"A",{id:!0,class:!0,href:!0});var Wct=s(Qv);Age=n(Wct,"SPAN",{});var Qct=s(Age);T(wy.$$.fragment,Qct),Qct.forEach(t),Wct.forEach(t),vDo=i(cje),yge=n(cje,"SPAN",{});var Hct=s(yge);FDo=r(Hct,"AutoModelForQuestionAnswering"),Hct.forEach(t),cje.forEach(t),lqe=i(f),qo=n(f,"DIV",{class:!0});var Js=s(qo);T(Ay.$$.fragment,Js),TDo=i(Js),Ki=n(Js,"P",{});var QK=s(Ki);MDo=r(QK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),GO=n(QK,"A",{href:!0});var Uct=s(GO);EDo=r(Uct,"from_pretrained()"),Uct.forEach(t),CDo=r(QK," class method or the "),OO=n(QK,"A",{href:!0});var Jct=s(OO);wDo=r(Jct,"from_config()"),Jct.forEach(t),ADo=r(QK,` class
method.`),QK.forEach(t),yDo=i(Js),yy=n(Js,"P",{});var fje=s(yy);LDo=r(fje,"This class cannot be instantiated directly using "),Lge=n(fje,"CODE",{});var Yct=s(Lge);xDo=r(Yct,"__init__()"),Yct.forEach(t),$Do=r(fje," (throws an error)."),fje.forEach(t),kDo=i(Js),mt=n(Js,"DIV",{class:!0});var $w=s(mt);T(Ly.$$.fragment,$w),SDo=i($w),xge=n($w,"P",{});var Kct=s(xge);RDo=r(Kct,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Kct.forEach(t),PDo=i($w),Zi=n($w,"P",{});var HK=s(Zi);BDo=r(HK,`Note:
Loading a model from its configuration file does `),$ge=n(HK,"STRONG",{});var Zct=s($ge);IDo=r(Zct,"not"),Zct.forEach(t),qDo=r(HK,` load the model weights. It only affects the
model\u2019s configuration. Use `),VO=n(HK,"A",{href:!0});var eft=s(VO);NDo=r(eft,"from_pretrained()"),eft.forEach(t),jDo=r(HK," to load the model weights."),HK.forEach(t),DDo=i($w),T(Hv.$$.fragment,$w),$w.forEach(t),GDo=i(Js),no=n(Js,"DIV",{class:!0});var ca=s(no);T(xy.$$.fragment,ca),ODo=i(ca),kge=n(ca,"P",{});var oft=s(kge);VDo=r(oft,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),oft.forEach(t),XDo=i(ca),qa=n(ca,"P",{});var kw=s(qa);zDo=r(kw,"The model class to instantiate is selected based on the "),Sge=n(kw,"CODE",{});var rft=s(Sge);WDo=r(rft,"model_type"),rft.forEach(t),QDo=r(kw,` property of the config object (either
passed as an argument or loaded from `),Rge=n(kw,"CODE",{});var tft=s(Rge);HDo=r(tft,"pretrained_model_name_or_path"),tft.forEach(t),UDo=r(kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pge=n(kw,"CODE",{});var aft=s(Pge);JDo=r(aft,"pretrained_model_name_or_path"),aft.forEach(t),YDo=r(kw,":"),kw.forEach(t),KDo=i(ca),V=n(ca,"UL",{});var X=s(V);Uv=n(X,"LI",{});var Qxe=s(Uv);Bge=n(Qxe,"STRONG",{});var nft=s(Bge);ZDo=r(nft,"albert"),nft.forEach(t),eGo=r(Qxe," \u2014 "),XO=n(Qxe,"A",{href:!0});var sft=s(XO);oGo=r(sft,"AlbertForQuestionAnswering"),sft.forEach(t),rGo=r(Qxe," (ALBERT model)"),Qxe.forEach(t),tGo=i(X),Jv=n(X,"LI",{});var Hxe=s(Jv);Ige=n(Hxe,"STRONG",{});var lft=s(Ige);aGo=r(lft,"bart"),lft.forEach(t),nGo=r(Hxe," \u2014 "),zO=n(Hxe,"A",{href:!0});var ift=s(zO);sGo=r(ift,"BartForQuestionAnswering"),ift.forEach(t),lGo=r(Hxe," (BART model)"),Hxe.forEach(t),iGo=i(X),Yv=n(X,"LI",{});var Uxe=s(Yv);qge=n(Uxe,"STRONG",{});var dft=s(qge);dGo=r(dft,"bert"),dft.forEach(t),cGo=r(Uxe," \u2014 "),WO=n(Uxe,"A",{href:!0});var cft=s(WO);fGo=r(cft,"BertForQuestionAnswering"),cft.forEach(t),mGo=r(Uxe," (BERT model)"),Uxe.forEach(t),gGo=i(X),Kv=n(X,"LI",{});var Jxe=s(Kv);Nge=n(Jxe,"STRONG",{});var fft=s(Nge);hGo=r(fft,"big_bird"),fft.forEach(t),pGo=r(Jxe," \u2014 "),QO=n(Jxe,"A",{href:!0});var mft=s(QO);uGo=r(mft,"BigBirdForQuestionAnswering"),mft.forEach(t),_Go=r(Jxe," (BigBird model)"),Jxe.forEach(t),bGo=i(X),Zv=n(X,"LI",{});var Yxe=s(Zv);jge=n(Yxe,"STRONG",{});var gft=s(jge);vGo=r(gft,"bigbird_pegasus"),gft.forEach(t),FGo=r(Yxe," \u2014 "),HO=n(Yxe,"A",{href:!0});var hft=s(HO);TGo=r(hft,"BigBirdPegasusForQuestionAnswering"),hft.forEach(t),MGo=r(Yxe," (BigBirdPegasus model)"),Yxe.forEach(t),EGo=i(X),e3=n(X,"LI",{});var Kxe=s(e3);Dge=n(Kxe,"STRONG",{});var pft=s(Dge);CGo=r(pft,"camembert"),pft.forEach(t),wGo=r(Kxe," \u2014 "),UO=n(Kxe,"A",{href:!0});var uft=s(UO);AGo=r(uft,"CamembertForQuestionAnswering"),uft.forEach(t),yGo=r(Kxe," (CamemBERT model)"),Kxe.forEach(t),LGo=i(X),o3=n(X,"LI",{});var Zxe=s(o3);Gge=n(Zxe,"STRONG",{});var _ft=s(Gge);xGo=r(_ft,"canine"),_ft.forEach(t),$Go=r(Zxe," \u2014 "),JO=n(Zxe,"A",{href:!0});var bft=s(JO);kGo=r(bft,"CanineForQuestionAnswering"),bft.forEach(t),SGo=r(Zxe," (Canine model)"),Zxe.forEach(t),RGo=i(X),r3=n(X,"LI",{});var e9e=s(r3);Oge=n(e9e,"STRONG",{});var vft=s(Oge);PGo=r(vft,"convbert"),vft.forEach(t),BGo=r(e9e," \u2014 "),YO=n(e9e,"A",{href:!0});var Fft=s(YO);IGo=r(Fft,"ConvBertForQuestionAnswering"),Fft.forEach(t),qGo=r(e9e," (ConvBERT model)"),e9e.forEach(t),NGo=i(X),t3=n(X,"LI",{});var o9e=s(t3);Vge=n(o9e,"STRONG",{});var Tft=s(Vge);jGo=r(Tft,"data2vec-text"),Tft.forEach(t),DGo=r(o9e," \u2014 "),KO=n(o9e,"A",{href:!0});var Mft=s(KO);GGo=r(Mft,"Data2VecTextForQuestionAnswering"),Mft.forEach(t),OGo=r(o9e," (Data2VecText model)"),o9e.forEach(t),VGo=i(X),a3=n(X,"LI",{});var r9e=s(a3);Xge=n(r9e,"STRONG",{});var Eft=s(Xge);XGo=r(Eft,"deberta"),Eft.forEach(t),zGo=r(r9e," \u2014 "),ZO=n(r9e,"A",{href:!0});var Cft=s(ZO);WGo=r(Cft,"DebertaForQuestionAnswering"),Cft.forEach(t),QGo=r(r9e," (DeBERTa model)"),r9e.forEach(t),HGo=i(X),n3=n(X,"LI",{});var t9e=s(n3);zge=n(t9e,"STRONG",{});var wft=s(zge);UGo=r(wft,"deberta-v2"),wft.forEach(t),JGo=r(t9e," \u2014 "),eV=n(t9e,"A",{href:!0});var Aft=s(eV);YGo=r(Aft,"DebertaV2ForQuestionAnswering"),Aft.forEach(t),KGo=r(t9e," (DeBERTa-v2 model)"),t9e.forEach(t),ZGo=i(X),s3=n(X,"LI",{});var a9e=s(s3);Wge=n(a9e,"STRONG",{});var yft=s(Wge);eOo=r(yft,"distilbert"),yft.forEach(t),oOo=r(a9e," \u2014 "),oV=n(a9e,"A",{href:!0});var Lft=s(oV);rOo=r(Lft,"DistilBertForQuestionAnswering"),Lft.forEach(t),tOo=r(a9e," (DistilBERT model)"),a9e.forEach(t),aOo=i(X),l3=n(X,"LI",{});var n9e=s(l3);Qge=n(n9e,"STRONG",{});var xft=s(Qge);nOo=r(xft,"electra"),xft.forEach(t),sOo=r(n9e," \u2014 "),rV=n(n9e,"A",{href:!0});var $ft=s(rV);lOo=r($ft,"ElectraForQuestionAnswering"),$ft.forEach(t),iOo=r(n9e," (ELECTRA model)"),n9e.forEach(t),dOo=i(X),i3=n(X,"LI",{});var s9e=s(i3);Hge=n(s9e,"STRONG",{});var kft=s(Hge);cOo=r(kft,"flaubert"),kft.forEach(t),fOo=r(s9e," \u2014 "),tV=n(s9e,"A",{href:!0});var Sft=s(tV);mOo=r(Sft,"FlaubertForQuestionAnsweringSimple"),Sft.forEach(t),gOo=r(s9e," (FlauBERT model)"),s9e.forEach(t),hOo=i(X),d3=n(X,"LI",{});var l9e=s(d3);Uge=n(l9e,"STRONG",{});var Rft=s(Uge);pOo=r(Rft,"fnet"),Rft.forEach(t),uOo=r(l9e," \u2014 "),aV=n(l9e,"A",{href:!0});var Pft=s(aV);_Oo=r(Pft,"FNetForQuestionAnswering"),Pft.forEach(t),bOo=r(l9e," (FNet model)"),l9e.forEach(t),vOo=i(X),c3=n(X,"LI",{});var i9e=s(c3);Jge=n(i9e,"STRONG",{});var Bft=s(Jge);FOo=r(Bft,"funnel"),Bft.forEach(t),TOo=r(i9e," \u2014 "),nV=n(i9e,"A",{href:!0});var Ift=s(nV);MOo=r(Ift,"FunnelForQuestionAnswering"),Ift.forEach(t),EOo=r(i9e," (Funnel Transformer model)"),i9e.forEach(t),COo=i(X),f3=n(X,"LI",{});var d9e=s(f3);Yge=n(d9e,"STRONG",{});var qft=s(Yge);wOo=r(qft,"gptj"),qft.forEach(t),AOo=r(d9e," \u2014 "),sV=n(d9e,"A",{href:!0});var Nft=s(sV);yOo=r(Nft,"GPTJForQuestionAnswering"),Nft.forEach(t),LOo=r(d9e," (GPT-J model)"),d9e.forEach(t),xOo=i(X),m3=n(X,"LI",{});var c9e=s(m3);Kge=n(c9e,"STRONG",{});var jft=s(Kge);$Oo=r(jft,"ibert"),jft.forEach(t),kOo=r(c9e," \u2014 "),lV=n(c9e,"A",{href:!0});var Dft=s(lV);SOo=r(Dft,"IBertForQuestionAnswering"),Dft.forEach(t),ROo=r(c9e," (I-BERT model)"),c9e.forEach(t),POo=i(X),g3=n(X,"LI",{});var f9e=s(g3);Zge=n(f9e,"STRONG",{});var Gft=s(Zge);BOo=r(Gft,"layoutlmv2"),Gft.forEach(t),IOo=r(f9e," \u2014 "),iV=n(f9e,"A",{href:!0});var Oft=s(iV);qOo=r(Oft,"LayoutLMv2ForQuestionAnswering"),Oft.forEach(t),NOo=r(f9e," (LayoutLMv2 model)"),f9e.forEach(t),jOo=i(X),h3=n(X,"LI",{});var m9e=s(h3);ehe=n(m9e,"STRONG",{});var Vft=s(ehe);DOo=r(Vft,"led"),Vft.forEach(t),GOo=r(m9e," \u2014 "),dV=n(m9e,"A",{href:!0});var Xft=s(dV);OOo=r(Xft,"LEDForQuestionAnswering"),Xft.forEach(t),VOo=r(m9e," (LED model)"),m9e.forEach(t),XOo=i(X),p3=n(X,"LI",{});var g9e=s(p3);ohe=n(g9e,"STRONG",{});var zft=s(ohe);zOo=r(zft,"longformer"),zft.forEach(t),WOo=r(g9e," \u2014 "),cV=n(g9e,"A",{href:!0});var Wft=s(cV);QOo=r(Wft,"LongformerForQuestionAnswering"),Wft.forEach(t),HOo=r(g9e," (Longformer model)"),g9e.forEach(t),UOo=i(X),u3=n(X,"LI",{});var h9e=s(u3);rhe=n(h9e,"STRONG",{});var Qft=s(rhe);JOo=r(Qft,"lxmert"),Qft.forEach(t),YOo=r(h9e," \u2014 "),fV=n(h9e,"A",{href:!0});var Hft=s(fV);KOo=r(Hft,"LxmertForQuestionAnswering"),Hft.forEach(t),ZOo=r(h9e," (LXMERT model)"),h9e.forEach(t),eVo=i(X),_3=n(X,"LI",{});var p9e=s(_3);the=n(p9e,"STRONG",{});var Uft=s(the);oVo=r(Uft,"mbart"),Uft.forEach(t),rVo=r(p9e," \u2014 "),mV=n(p9e,"A",{href:!0});var Jft=s(mV);tVo=r(Jft,"MBartForQuestionAnswering"),Jft.forEach(t),aVo=r(p9e," (mBART model)"),p9e.forEach(t),nVo=i(X),b3=n(X,"LI",{});var u9e=s(b3);ahe=n(u9e,"STRONG",{});var Yft=s(ahe);sVo=r(Yft,"megatron-bert"),Yft.forEach(t),lVo=r(u9e," \u2014 "),gV=n(u9e,"A",{href:!0});var Kft=s(gV);iVo=r(Kft,"MegatronBertForQuestionAnswering"),Kft.forEach(t),dVo=r(u9e," (MegatronBert model)"),u9e.forEach(t),cVo=i(X),v3=n(X,"LI",{});var _9e=s(v3);nhe=n(_9e,"STRONG",{});var Zft=s(nhe);fVo=r(Zft,"mobilebert"),Zft.forEach(t),mVo=r(_9e," \u2014 "),hV=n(_9e,"A",{href:!0});var emt=s(hV);gVo=r(emt,"MobileBertForQuestionAnswering"),emt.forEach(t),hVo=r(_9e," (MobileBERT model)"),_9e.forEach(t),pVo=i(X),F3=n(X,"LI",{});var b9e=s(F3);she=n(b9e,"STRONG",{});var omt=s(she);uVo=r(omt,"mpnet"),omt.forEach(t),_Vo=r(b9e," \u2014 "),pV=n(b9e,"A",{href:!0});var rmt=s(pV);bVo=r(rmt,"MPNetForQuestionAnswering"),rmt.forEach(t),vVo=r(b9e," (MPNet model)"),b9e.forEach(t),FVo=i(X),T3=n(X,"LI",{});var v9e=s(T3);lhe=n(v9e,"STRONG",{});var tmt=s(lhe);TVo=r(tmt,"nystromformer"),tmt.forEach(t),MVo=r(v9e," \u2014 "),uV=n(v9e,"A",{href:!0});var amt=s(uV);EVo=r(amt,"NystromformerForQuestionAnswering"),amt.forEach(t),CVo=r(v9e," (Nystromformer model)"),v9e.forEach(t),wVo=i(X),M3=n(X,"LI",{});var F9e=s(M3);ihe=n(F9e,"STRONG",{});var nmt=s(ihe);AVo=r(nmt,"qdqbert"),nmt.forEach(t),yVo=r(F9e," \u2014 "),_V=n(F9e,"A",{href:!0});var smt=s(_V);LVo=r(smt,"QDQBertForQuestionAnswering"),smt.forEach(t),xVo=r(F9e," (QDQBert model)"),F9e.forEach(t),$Vo=i(X),E3=n(X,"LI",{});var T9e=s(E3);dhe=n(T9e,"STRONG",{});var lmt=s(dhe);kVo=r(lmt,"reformer"),lmt.forEach(t),SVo=r(T9e," \u2014 "),bV=n(T9e,"A",{href:!0});var imt=s(bV);RVo=r(imt,"ReformerForQuestionAnswering"),imt.forEach(t),PVo=r(T9e," (Reformer model)"),T9e.forEach(t),BVo=i(X),C3=n(X,"LI",{});var M9e=s(C3);che=n(M9e,"STRONG",{});var dmt=s(che);IVo=r(dmt,"rembert"),dmt.forEach(t),qVo=r(M9e," \u2014 "),vV=n(M9e,"A",{href:!0});var cmt=s(vV);NVo=r(cmt,"RemBertForQuestionAnswering"),cmt.forEach(t),jVo=r(M9e," (RemBERT model)"),M9e.forEach(t),DVo=i(X),w3=n(X,"LI",{});var E9e=s(w3);fhe=n(E9e,"STRONG",{});var fmt=s(fhe);GVo=r(fmt,"roberta"),fmt.forEach(t),OVo=r(E9e," \u2014 "),FV=n(E9e,"A",{href:!0});var mmt=s(FV);VVo=r(mmt,"RobertaForQuestionAnswering"),mmt.forEach(t),XVo=r(E9e," (RoBERTa model)"),E9e.forEach(t),zVo=i(X),A3=n(X,"LI",{});var C9e=s(A3);mhe=n(C9e,"STRONG",{});var gmt=s(mhe);WVo=r(gmt,"roformer"),gmt.forEach(t),QVo=r(C9e," \u2014 "),TV=n(C9e,"A",{href:!0});var hmt=s(TV);HVo=r(hmt,"RoFormerForQuestionAnswering"),hmt.forEach(t),UVo=r(C9e," (RoFormer model)"),C9e.forEach(t),JVo=i(X),y3=n(X,"LI",{});var w9e=s(y3);ghe=n(w9e,"STRONG",{});var pmt=s(ghe);YVo=r(pmt,"splinter"),pmt.forEach(t),KVo=r(w9e," \u2014 "),MV=n(w9e,"A",{href:!0});var umt=s(MV);ZVo=r(umt,"SplinterForQuestionAnswering"),umt.forEach(t),eXo=r(w9e," (Splinter model)"),w9e.forEach(t),oXo=i(X),L3=n(X,"LI",{});var A9e=s(L3);hhe=n(A9e,"STRONG",{});var _mt=s(hhe);rXo=r(_mt,"squeezebert"),_mt.forEach(t),tXo=r(A9e," \u2014 "),EV=n(A9e,"A",{href:!0});var bmt=s(EV);aXo=r(bmt,"SqueezeBertForQuestionAnswering"),bmt.forEach(t),nXo=r(A9e," (SqueezeBERT model)"),A9e.forEach(t),sXo=i(X),x3=n(X,"LI",{});var y9e=s(x3);phe=n(y9e,"STRONG",{});var vmt=s(phe);lXo=r(vmt,"xlm"),vmt.forEach(t),iXo=r(y9e," \u2014 "),CV=n(y9e,"A",{href:!0});var Fmt=s(CV);dXo=r(Fmt,"XLMForQuestionAnsweringSimple"),Fmt.forEach(t),cXo=r(y9e," (XLM model)"),y9e.forEach(t),fXo=i(X),$3=n(X,"LI",{});var L9e=s($3);uhe=n(L9e,"STRONG",{});var Tmt=s(uhe);mXo=r(Tmt,"xlm-roberta"),Tmt.forEach(t),gXo=r(L9e," \u2014 "),wV=n(L9e,"A",{href:!0});var Mmt=s(wV);hXo=r(Mmt,"XLMRobertaForQuestionAnswering"),Mmt.forEach(t),pXo=r(L9e," (XLM-RoBERTa model)"),L9e.forEach(t),uXo=i(X),k3=n(X,"LI",{});var x9e=s(k3);_he=n(x9e,"STRONG",{});var Emt=s(_he);_Xo=r(Emt,"xlm-roberta-xl"),Emt.forEach(t),bXo=r(x9e," \u2014 "),AV=n(x9e,"A",{href:!0});var Cmt=s(AV);vXo=r(Cmt,"XLMRobertaXLForQuestionAnswering"),Cmt.forEach(t),FXo=r(x9e," (XLM-RoBERTa-XL model)"),x9e.forEach(t),TXo=i(X),S3=n(X,"LI",{});var $9e=s(S3);bhe=n($9e,"STRONG",{});var wmt=s(bhe);MXo=r(wmt,"xlnet"),wmt.forEach(t),EXo=r($9e," \u2014 "),yV=n($9e,"A",{href:!0});var Amt=s(yV);CXo=r(Amt,"XLNetForQuestionAnsweringSimple"),Amt.forEach(t),wXo=r($9e," (XLNet model)"),$9e.forEach(t),AXo=i(X),R3=n(X,"LI",{});var k9e=s(R3);vhe=n(k9e,"STRONG",{});var ymt=s(vhe);yXo=r(ymt,"yoso"),ymt.forEach(t),LXo=r(k9e," \u2014 "),LV=n(k9e,"A",{href:!0});var Lmt=s(LV);xXo=r(Lmt,"YosoForQuestionAnswering"),Lmt.forEach(t),$Xo=r(k9e," (YOSO model)"),k9e.forEach(t),X.forEach(t),kXo=i(ca),P3=n(ca,"P",{});var S9e=s(P3);SXo=r(S9e,"The model is set in evaluation mode by default using "),Fhe=n(S9e,"CODE",{});var xmt=s(Fhe);RXo=r(xmt,"model.eval()"),xmt.forEach(t),PXo=r(S9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),The=n(S9e,"CODE",{});var $mt=s(The);BXo=r($mt,"model.train()"),$mt.forEach(t),S9e.forEach(t),IXo=i(ca),T(B3.$$.fragment,ca),ca.forEach(t),Js.forEach(t),iqe=i(f),ed=n(f,"H2",{class:!0});var mje=s(ed);I3=n(mje,"A",{id:!0,class:!0,href:!0});var kmt=s(I3);Mhe=n(kmt,"SPAN",{});var Smt=s(Mhe);T($y.$$.fragment,Smt),Smt.forEach(t),kmt.forEach(t),qXo=i(mje),Ehe=n(mje,"SPAN",{});var Rmt=s(Ehe);NXo=r(Rmt,"AutoModelForTableQuestionAnswering"),Rmt.forEach(t),mje.forEach(t),dqe=i(f),No=n(f,"DIV",{class:!0});var Ys=s(No);T(ky.$$.fragment,Ys),jXo=i(Ys),od=n(Ys,"P",{});var UK=s(od);DXo=r(UK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),xV=n(UK,"A",{href:!0});var Pmt=s(xV);GXo=r(Pmt,"from_pretrained()"),Pmt.forEach(t),OXo=r(UK," class method or the "),$V=n(UK,"A",{href:!0});var Bmt=s($V);VXo=r(Bmt,"from_config()"),Bmt.forEach(t),XXo=r(UK,` class
method.`),UK.forEach(t),zXo=i(Ys),Sy=n(Ys,"P",{});var gje=s(Sy);WXo=r(gje,"This class cannot be instantiated directly using "),Che=n(gje,"CODE",{});var Imt=s(Che);QXo=r(Imt,"__init__()"),Imt.forEach(t),HXo=r(gje," (throws an error)."),gje.forEach(t),UXo=i(Ys),gt=n(Ys,"DIV",{class:!0});var Sw=s(gt);T(Ry.$$.fragment,Sw),JXo=i(Sw),whe=n(Sw,"P",{});var qmt=s(whe);YXo=r(qmt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),qmt.forEach(t),KXo=i(Sw),rd=n(Sw,"P",{});var JK=s(rd);ZXo=r(JK,`Note:
Loading a model from its configuration file does `),Ahe=n(JK,"STRONG",{});var Nmt=s(Ahe);ezo=r(Nmt,"not"),Nmt.forEach(t),ozo=r(JK,` load the model weights. It only affects the
model\u2019s configuration. Use `),kV=n(JK,"A",{href:!0});var jmt=s(kV);rzo=r(jmt,"from_pretrained()"),jmt.forEach(t),tzo=r(JK," to load the model weights."),JK.forEach(t),azo=i(Sw),T(q3.$$.fragment,Sw),Sw.forEach(t),nzo=i(Ys),so=n(Ys,"DIV",{class:!0});var fa=s(so);T(Py.$$.fragment,fa),szo=i(fa),yhe=n(fa,"P",{});var Dmt=s(yhe);lzo=r(Dmt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Dmt.forEach(t),izo=i(fa),Na=n(fa,"P",{});var Rw=s(Na);dzo=r(Rw,"The model class to instantiate is selected based on the "),Lhe=n(Rw,"CODE",{});var Gmt=s(Lhe);czo=r(Gmt,"model_type"),Gmt.forEach(t),fzo=r(Rw,` property of the config object (either
passed as an argument or loaded from `),xhe=n(Rw,"CODE",{});var Omt=s(xhe);mzo=r(Omt,"pretrained_model_name_or_path"),Omt.forEach(t),gzo=r(Rw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$he=n(Rw,"CODE",{});var Vmt=s($he);hzo=r(Vmt,"pretrained_model_name_or_path"),Vmt.forEach(t),pzo=r(Rw,":"),Rw.forEach(t),uzo=i(fa),khe=n(fa,"UL",{});var Xmt=s(khe);N3=n(Xmt,"LI",{});var R9e=s(N3);She=n(R9e,"STRONG",{});var zmt=s(She);_zo=r(zmt,"tapas"),zmt.forEach(t),bzo=r(R9e," \u2014 "),SV=n(R9e,"A",{href:!0});var Wmt=s(SV);vzo=r(Wmt,"TapasForQuestionAnswering"),Wmt.forEach(t),Fzo=r(R9e," (TAPAS model)"),R9e.forEach(t),Xmt.forEach(t),Tzo=i(fa),j3=n(fa,"P",{});var P9e=s(j3);Mzo=r(P9e,"The model is set in evaluation mode by default using "),Rhe=n(P9e,"CODE",{});var Qmt=s(Rhe);Ezo=r(Qmt,"model.eval()"),Qmt.forEach(t),Czo=r(P9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Phe=n(P9e,"CODE",{});var Hmt=s(Phe);wzo=r(Hmt,"model.train()"),Hmt.forEach(t),P9e.forEach(t),Azo=i(fa),T(D3.$$.fragment,fa),fa.forEach(t),Ys.forEach(t),cqe=i(f),td=n(f,"H2",{class:!0});var hje=s(td);G3=n(hje,"A",{id:!0,class:!0,href:!0});var Umt=s(G3);Bhe=n(Umt,"SPAN",{});var Jmt=s(Bhe);T(By.$$.fragment,Jmt),Jmt.forEach(t),Umt.forEach(t),yzo=i(hje),Ihe=n(hje,"SPAN",{});var Ymt=s(Ihe);Lzo=r(Ymt,"AutoModelForImageClassification"),Ymt.forEach(t),hje.forEach(t),fqe=i(f),jo=n(f,"DIV",{class:!0});var Ks=s(jo);T(Iy.$$.fragment,Ks),xzo=i(Ks),ad=n(Ks,"P",{});var YK=s(ad);$zo=r(YK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),RV=n(YK,"A",{href:!0});var Kmt=s(RV);kzo=r(Kmt,"from_pretrained()"),Kmt.forEach(t),Szo=r(YK," class method or the "),PV=n(YK,"A",{href:!0});var Zmt=s(PV);Rzo=r(Zmt,"from_config()"),Zmt.forEach(t),Pzo=r(YK,` class
method.`),YK.forEach(t),Bzo=i(Ks),qy=n(Ks,"P",{});var pje=s(qy);Izo=r(pje,"This class cannot be instantiated directly using "),qhe=n(pje,"CODE",{});var egt=s(qhe);qzo=r(egt,"__init__()"),egt.forEach(t),Nzo=r(pje," (throws an error)."),pje.forEach(t),jzo=i(Ks),ht=n(Ks,"DIV",{class:!0});var Pw=s(ht);T(Ny.$$.fragment,Pw),Dzo=i(Pw),Nhe=n(Pw,"P",{});var ogt=s(Nhe);Gzo=r(ogt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),ogt.forEach(t),Ozo=i(Pw),nd=n(Pw,"P",{});var KK=s(nd);Vzo=r(KK,`Note:
Loading a model from its configuration file does `),jhe=n(KK,"STRONG",{});var rgt=s(jhe);Xzo=r(rgt,"not"),rgt.forEach(t),zzo=r(KK,` load the model weights. It only affects the
model\u2019s configuration. Use `),BV=n(KK,"A",{href:!0});var tgt=s(BV);Wzo=r(tgt,"from_pretrained()"),tgt.forEach(t),Qzo=r(KK," to load the model weights."),KK.forEach(t),Hzo=i(Pw),T(O3.$$.fragment,Pw),Pw.forEach(t),Uzo=i(Ks),lo=n(Ks,"DIV",{class:!0});var ma=s(lo);T(jy.$$.fragment,ma),Jzo=i(ma),Dhe=n(ma,"P",{});var agt=s(Dhe);Yzo=r(agt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),agt.forEach(t),Kzo=i(ma),ja=n(ma,"P",{});var Bw=s(ja);Zzo=r(Bw,"The model class to instantiate is selected based on the "),Ghe=n(Bw,"CODE",{});var ngt=s(Ghe);eWo=r(ngt,"model_type"),ngt.forEach(t),oWo=r(Bw,` property of the config object (either
passed as an argument or loaded from `),Ohe=n(Bw,"CODE",{});var sgt=s(Ohe);rWo=r(sgt,"pretrained_model_name_or_path"),sgt.forEach(t),tWo=r(Bw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vhe=n(Bw,"CODE",{});var lgt=s(Vhe);aWo=r(lgt,"pretrained_model_name_or_path"),lgt.forEach(t),nWo=r(Bw,":"),Bw.forEach(t),sWo=i(ma),Fe=n(ma,"UL",{});var Ee=s(Fe);V3=n(Ee,"LI",{});var B9e=s(V3);Xhe=n(B9e,"STRONG",{});var igt=s(Xhe);lWo=r(igt,"beit"),igt.forEach(t),iWo=r(B9e," \u2014 "),IV=n(B9e,"A",{href:!0});var dgt=s(IV);dWo=r(dgt,"BeitForImageClassification"),dgt.forEach(t),cWo=r(B9e," (BEiT model)"),B9e.forEach(t),fWo=i(Ee),X3=n(Ee,"LI",{});var I9e=s(X3);zhe=n(I9e,"STRONG",{});var cgt=s(zhe);mWo=r(cgt,"convnext"),cgt.forEach(t),gWo=r(I9e," \u2014 "),qV=n(I9e,"A",{href:!0});var fgt=s(qV);hWo=r(fgt,"ConvNextForImageClassification"),fgt.forEach(t),pWo=r(I9e," (ConvNext model)"),I9e.forEach(t),uWo=i(Ee),z3=n(Ee,"LI",{});var q9e=s(z3);Whe=n(q9e,"STRONG",{});var mgt=s(Whe);_Wo=r(mgt,"data2vec-vision"),mgt.forEach(t),bWo=r(q9e," \u2014 "),NV=n(q9e,"A",{href:!0});var ggt=s(NV);vWo=r(ggt,"Data2VecVisionForImageClassification"),ggt.forEach(t),FWo=r(q9e," (Data2VecVision model)"),q9e.forEach(t),TWo=i(Ee),Ps=n(Ee,"LI",{});var E$=s(Ps);Qhe=n(E$,"STRONG",{});var hgt=s(Qhe);MWo=r(hgt,"deit"),hgt.forEach(t),EWo=r(E$," \u2014 "),jV=n(E$,"A",{href:!0});var pgt=s(jV);CWo=r(pgt,"DeiTForImageClassification"),pgt.forEach(t),wWo=r(E$," or "),DV=n(E$,"A",{href:!0});var ugt=s(DV);AWo=r(ugt,"DeiTForImageClassificationWithTeacher"),ugt.forEach(t),yWo=r(E$," (DeiT model)"),E$.forEach(t),LWo=i(Ee),W3=n(Ee,"LI",{});var N9e=s(W3);Hhe=n(N9e,"STRONG",{});var _gt=s(Hhe);xWo=r(_gt,"imagegpt"),_gt.forEach(t),$Wo=r(N9e," \u2014 "),GV=n(N9e,"A",{href:!0});var bgt=s(GV);kWo=r(bgt,"ImageGPTForImageClassification"),bgt.forEach(t),SWo=r(N9e," (ImageGPT model)"),N9e.forEach(t),RWo=i(Ee),pt=n(Ee,"LI",{});var gf=s(pt);Uhe=n(gf,"STRONG",{});var vgt=s(Uhe);PWo=r(vgt,"perceiver"),vgt.forEach(t),BWo=r(gf," \u2014 "),OV=n(gf,"A",{href:!0});var Fgt=s(OV);IWo=r(Fgt,"PerceiverForImageClassificationLearned"),Fgt.forEach(t),qWo=r(gf," or "),VV=n(gf,"A",{href:!0});var Tgt=s(VV);NWo=r(Tgt,"PerceiverForImageClassificationFourier"),Tgt.forEach(t),jWo=r(gf," or "),XV=n(gf,"A",{href:!0});var Mgt=s(XV);DWo=r(Mgt,"PerceiverForImageClassificationConvProcessing"),Mgt.forEach(t),GWo=r(gf," (Perceiver model)"),gf.forEach(t),OWo=i(Ee),Q3=n(Ee,"LI",{});var j9e=s(Q3);Jhe=n(j9e,"STRONG",{});var Egt=s(Jhe);VWo=r(Egt,"poolformer"),Egt.forEach(t),XWo=r(j9e," \u2014 "),zV=n(j9e,"A",{href:!0});var Cgt=s(zV);zWo=r(Cgt,"PoolFormerForImageClassification"),Cgt.forEach(t),WWo=r(j9e," (PoolFormer model)"),j9e.forEach(t),QWo=i(Ee),H3=n(Ee,"LI",{});var D9e=s(H3);Yhe=n(D9e,"STRONG",{});var wgt=s(Yhe);HWo=r(wgt,"regnet"),wgt.forEach(t),UWo=r(D9e," \u2014 "),WV=n(D9e,"A",{href:!0});var Agt=s(WV);JWo=r(Agt,"RegNetForImageClassification"),Agt.forEach(t),YWo=r(D9e," (RegNet model)"),D9e.forEach(t),KWo=i(Ee),U3=n(Ee,"LI",{});var G9e=s(U3);Khe=n(G9e,"STRONG",{});var ygt=s(Khe);ZWo=r(ygt,"resnet"),ygt.forEach(t),eQo=r(G9e," \u2014 "),QV=n(G9e,"A",{href:!0});var Lgt=s(QV);oQo=r(Lgt,"ResNetForImageClassification"),Lgt.forEach(t),rQo=r(G9e," (ResNet model)"),G9e.forEach(t),tQo=i(Ee),J3=n(Ee,"LI",{});var O9e=s(J3);Zhe=n(O9e,"STRONG",{});var xgt=s(Zhe);aQo=r(xgt,"segformer"),xgt.forEach(t),nQo=r(O9e," \u2014 "),HV=n(O9e,"A",{href:!0});var $gt=s(HV);sQo=r($gt,"SegformerForImageClassification"),$gt.forEach(t),lQo=r(O9e," (SegFormer model)"),O9e.forEach(t),iQo=i(Ee),Y3=n(Ee,"LI",{});var V9e=s(Y3);epe=n(V9e,"STRONG",{});var kgt=s(epe);dQo=r(kgt,"swin"),kgt.forEach(t),cQo=r(V9e," \u2014 "),UV=n(V9e,"A",{href:!0});var Sgt=s(UV);fQo=r(Sgt,"SwinForImageClassification"),Sgt.forEach(t),mQo=r(V9e," (Swin model)"),V9e.forEach(t),gQo=i(Ee),K3=n(Ee,"LI",{});var X9e=s(K3);ope=n(X9e,"STRONG",{});var Rgt=s(ope);hQo=r(Rgt,"van"),Rgt.forEach(t),pQo=r(X9e," \u2014 "),JV=n(X9e,"A",{href:!0});var Pgt=s(JV);uQo=r(Pgt,"VanForImageClassification"),Pgt.forEach(t),_Qo=r(X9e," (VAN model)"),X9e.forEach(t),bQo=i(Ee),Z3=n(Ee,"LI",{});var z9e=s(Z3);rpe=n(z9e,"STRONG",{});var Bgt=s(rpe);vQo=r(Bgt,"vit"),Bgt.forEach(t),FQo=r(z9e," \u2014 "),YV=n(z9e,"A",{href:!0});var Igt=s(YV);TQo=r(Igt,"ViTForImageClassification"),Igt.forEach(t),MQo=r(z9e," (ViT model)"),z9e.forEach(t),Ee.forEach(t),EQo=i(ma),eF=n(ma,"P",{});var W9e=s(eF);CQo=r(W9e,"The model is set in evaluation mode by default using "),tpe=n(W9e,"CODE",{});var qgt=s(tpe);wQo=r(qgt,"model.eval()"),qgt.forEach(t),AQo=r(W9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ape=n(W9e,"CODE",{});var Ngt=s(ape);yQo=r(Ngt,"model.train()"),Ngt.forEach(t),W9e.forEach(t),LQo=i(ma),T(oF.$$.fragment,ma),ma.forEach(t),Ks.forEach(t),mqe=i(f),sd=n(f,"H2",{class:!0});var uje=s(sd);rF=n(uje,"A",{id:!0,class:!0,href:!0});var jgt=s(rF);npe=n(jgt,"SPAN",{});var Dgt=s(npe);T(Dy.$$.fragment,Dgt),Dgt.forEach(t),jgt.forEach(t),xQo=i(uje),spe=n(uje,"SPAN",{});var Ggt=s(spe);$Qo=r(Ggt,"AutoModelForVision2Seq"),Ggt.forEach(t),uje.forEach(t),gqe=i(f),Do=n(f,"DIV",{class:!0});var Zs=s(Do);T(Gy.$$.fragment,Zs),kQo=i(Zs),ld=n(Zs,"P",{});var ZK=s(ld);SQo=r(ZK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),KV=n(ZK,"A",{href:!0});var Ogt=s(KV);RQo=r(Ogt,"from_pretrained()"),Ogt.forEach(t),PQo=r(ZK," class method or the "),ZV=n(ZK,"A",{href:!0});var Vgt=s(ZV);BQo=r(Vgt,"from_config()"),Vgt.forEach(t),IQo=r(ZK,` class
method.`),ZK.forEach(t),qQo=i(Zs),Oy=n(Zs,"P",{});var _je=s(Oy);NQo=r(_je,"This class cannot be instantiated directly using "),lpe=n(_je,"CODE",{});var Xgt=s(lpe);jQo=r(Xgt,"__init__()"),Xgt.forEach(t),DQo=r(_je," (throws an error)."),_je.forEach(t),GQo=i(Zs),ut=n(Zs,"DIV",{class:!0});var Iw=s(ut);T(Vy.$$.fragment,Iw),OQo=i(Iw),ipe=n(Iw,"P",{});var zgt=s(ipe);VQo=r(zgt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),zgt.forEach(t),XQo=i(Iw),id=n(Iw,"P",{});var eZ=s(id);zQo=r(eZ,`Note:
Loading a model from its configuration file does `),dpe=n(eZ,"STRONG",{});var Wgt=s(dpe);WQo=r(Wgt,"not"),Wgt.forEach(t),QQo=r(eZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),eX=n(eZ,"A",{href:!0});var Qgt=s(eX);HQo=r(Qgt,"from_pretrained()"),Qgt.forEach(t),UQo=r(eZ," to load the model weights."),eZ.forEach(t),JQo=i(Iw),T(tF.$$.fragment,Iw),Iw.forEach(t),YQo=i(Zs),io=n(Zs,"DIV",{class:!0});var ga=s(io);T(Xy.$$.fragment,ga),KQo=i(ga),cpe=n(ga,"P",{});var Hgt=s(cpe);ZQo=r(Hgt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Hgt.forEach(t),eHo=i(ga),Da=n(ga,"P",{});var qw=s(Da);oHo=r(qw,"The model class to instantiate is selected based on the "),fpe=n(qw,"CODE",{});var Ugt=s(fpe);rHo=r(Ugt,"model_type"),Ugt.forEach(t),tHo=r(qw,` property of the config object (either
passed as an argument or loaded from `),mpe=n(qw,"CODE",{});var Jgt=s(mpe);aHo=r(Jgt,"pretrained_model_name_or_path"),Jgt.forEach(t),nHo=r(qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gpe=n(qw,"CODE",{});var Ygt=s(gpe);sHo=r(Ygt,"pretrained_model_name_or_path"),Ygt.forEach(t),lHo=r(qw,":"),qw.forEach(t),iHo=i(ga),hpe=n(ga,"UL",{});var Kgt=s(hpe);aF=n(Kgt,"LI",{});var Q9e=s(aF);ppe=n(Q9e,"STRONG",{});var Zgt=s(ppe);dHo=r(Zgt,"vision-encoder-decoder"),Zgt.forEach(t),cHo=r(Q9e," \u2014 "),oX=n(Q9e,"A",{href:!0});var eht=s(oX);fHo=r(eht,"VisionEncoderDecoderModel"),eht.forEach(t),mHo=r(Q9e," (Vision Encoder decoder model)"),Q9e.forEach(t),Kgt.forEach(t),gHo=i(ga),nF=n(ga,"P",{});var H9e=s(nF);hHo=r(H9e,"The model is set in evaluation mode by default using "),upe=n(H9e,"CODE",{});var oht=s(upe);pHo=r(oht,"model.eval()"),oht.forEach(t),uHo=r(H9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_pe=n(H9e,"CODE",{});var rht=s(_pe);_Ho=r(rht,"model.train()"),rht.forEach(t),H9e.forEach(t),bHo=i(ga),T(sF.$$.fragment,ga),ga.forEach(t),Zs.forEach(t),hqe=i(f),dd=n(f,"H2",{class:!0});var bje=s(dd);lF=n(bje,"A",{id:!0,class:!0,href:!0});var tht=s(lF);bpe=n(tht,"SPAN",{});var aht=s(bpe);T(zy.$$.fragment,aht),aht.forEach(t),tht.forEach(t),vHo=i(bje),vpe=n(bje,"SPAN",{});var nht=s(vpe);FHo=r(nht,"AutoModelForAudioClassification"),nht.forEach(t),bje.forEach(t),pqe=i(f),Go=n(f,"DIV",{class:!0});var el=s(Go);T(Wy.$$.fragment,el),THo=i(el),cd=n(el,"P",{});var oZ=s(cd);MHo=r(oZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),rX=n(oZ,"A",{href:!0});var sht=s(rX);EHo=r(sht,"from_pretrained()"),sht.forEach(t),CHo=r(oZ," class method or the "),tX=n(oZ,"A",{href:!0});var lht=s(tX);wHo=r(lht,"from_config()"),lht.forEach(t),AHo=r(oZ,` class
method.`),oZ.forEach(t),yHo=i(el),Qy=n(el,"P",{});var vje=s(Qy);LHo=r(vje,"This class cannot be instantiated directly using "),Fpe=n(vje,"CODE",{});var iht=s(Fpe);xHo=r(iht,"__init__()"),iht.forEach(t),$Ho=r(vje," (throws an error)."),vje.forEach(t),kHo=i(el),_t=n(el,"DIV",{class:!0});var Nw=s(_t);T(Hy.$$.fragment,Nw),SHo=i(Nw),Tpe=n(Nw,"P",{});var dht=s(Tpe);RHo=r(dht,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),dht.forEach(t),PHo=i(Nw),fd=n(Nw,"P",{});var rZ=s(fd);BHo=r(rZ,`Note:
Loading a model from its configuration file does `),Mpe=n(rZ,"STRONG",{});var cht=s(Mpe);IHo=r(cht,"not"),cht.forEach(t),qHo=r(rZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),aX=n(rZ,"A",{href:!0});var fht=s(aX);NHo=r(fht,"from_pretrained()"),fht.forEach(t),jHo=r(rZ," to load the model weights."),rZ.forEach(t),DHo=i(Nw),T(iF.$$.fragment,Nw),Nw.forEach(t),GHo=i(el),co=n(el,"DIV",{class:!0});var ha=s(co);T(Uy.$$.fragment,ha),OHo=i(ha),Epe=n(ha,"P",{});var mht=s(Epe);VHo=r(mht,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),mht.forEach(t),XHo=i(ha),Ga=n(ha,"P",{});var jw=s(Ga);zHo=r(jw,"The model class to instantiate is selected based on the "),Cpe=n(jw,"CODE",{});var ght=s(Cpe);WHo=r(ght,"model_type"),ght.forEach(t),QHo=r(jw,` property of the config object (either
passed as an argument or loaded from `),wpe=n(jw,"CODE",{});var hht=s(wpe);HHo=r(hht,"pretrained_model_name_or_path"),hht.forEach(t),UHo=r(jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ape=n(jw,"CODE",{});var pht=s(Ape);JHo=r(pht,"pretrained_model_name_or_path"),pht.forEach(t),YHo=r(jw,":"),jw.forEach(t),KHo=i(ha),ke=n(ha,"UL",{});var Oe=s(ke);dF=n(Oe,"LI",{});var U9e=s(dF);ype=n(U9e,"STRONG",{});var uht=s(ype);ZHo=r(uht,"data2vec-audio"),uht.forEach(t),eUo=r(U9e," \u2014 "),nX=n(U9e,"A",{href:!0});var _ht=s(nX);oUo=r(_ht,"Data2VecAudioForSequenceClassification"),_ht.forEach(t),rUo=r(U9e," (Data2VecAudio model)"),U9e.forEach(t),tUo=i(Oe),cF=n(Oe,"LI",{});var J9e=s(cF);Lpe=n(J9e,"STRONG",{});var bht=s(Lpe);aUo=r(bht,"hubert"),bht.forEach(t),nUo=r(J9e," \u2014 "),sX=n(J9e,"A",{href:!0});var vht=s(sX);sUo=r(vht,"HubertForSequenceClassification"),vht.forEach(t),lUo=r(J9e," (Hubert model)"),J9e.forEach(t),iUo=i(Oe),fF=n(Oe,"LI",{});var Y9e=s(fF);xpe=n(Y9e,"STRONG",{});var Fht=s(xpe);dUo=r(Fht,"sew"),Fht.forEach(t),cUo=r(Y9e," \u2014 "),lX=n(Y9e,"A",{href:!0});var Tht=s(lX);fUo=r(Tht,"SEWForSequenceClassification"),Tht.forEach(t),mUo=r(Y9e," (SEW model)"),Y9e.forEach(t),gUo=i(Oe),mF=n(Oe,"LI",{});var K9e=s(mF);$pe=n(K9e,"STRONG",{});var Mht=s($pe);hUo=r(Mht,"sew-d"),Mht.forEach(t),pUo=r(K9e," \u2014 "),iX=n(K9e,"A",{href:!0});var Eht=s(iX);uUo=r(Eht,"SEWDForSequenceClassification"),Eht.forEach(t),_Uo=r(K9e," (SEW-D model)"),K9e.forEach(t),bUo=i(Oe),gF=n(Oe,"LI",{});var Z9e=s(gF);kpe=n(Z9e,"STRONG",{});var Cht=s(kpe);vUo=r(Cht,"unispeech"),Cht.forEach(t),FUo=r(Z9e," \u2014 "),dX=n(Z9e,"A",{href:!0});var wht=s(dX);TUo=r(wht,"UniSpeechForSequenceClassification"),wht.forEach(t),MUo=r(Z9e," (UniSpeech model)"),Z9e.forEach(t),EUo=i(Oe),hF=n(Oe,"LI",{});var e$e=s(hF);Spe=n(e$e,"STRONG",{});var Aht=s(Spe);CUo=r(Aht,"unispeech-sat"),Aht.forEach(t),wUo=r(e$e," \u2014 "),cX=n(e$e,"A",{href:!0});var yht=s(cX);AUo=r(yht,"UniSpeechSatForSequenceClassification"),yht.forEach(t),yUo=r(e$e," (UniSpeechSat model)"),e$e.forEach(t),LUo=i(Oe),pF=n(Oe,"LI",{});var o$e=s(pF);Rpe=n(o$e,"STRONG",{});var Lht=s(Rpe);xUo=r(Lht,"wav2vec2"),Lht.forEach(t),$Uo=r(o$e," \u2014 "),fX=n(o$e,"A",{href:!0});var xht=s(fX);kUo=r(xht,"Wav2Vec2ForSequenceClassification"),xht.forEach(t),SUo=r(o$e," (Wav2Vec2 model)"),o$e.forEach(t),RUo=i(Oe),uF=n(Oe,"LI",{});var r$e=s(uF);Ppe=n(r$e,"STRONG",{});var $ht=s(Ppe);PUo=r($ht,"wav2vec2-conformer"),$ht.forEach(t),BUo=r(r$e," \u2014 "),mX=n(r$e,"A",{href:!0});var kht=s(mX);IUo=r(kht,"Wav2Vec2ConformerForSequenceClassification"),kht.forEach(t),qUo=r(r$e," (Wav2Vec2-Conformer model)"),r$e.forEach(t),NUo=i(Oe),_F=n(Oe,"LI",{});var t$e=s(_F);Bpe=n(t$e,"STRONG",{});var Sht=s(Bpe);jUo=r(Sht,"wavlm"),Sht.forEach(t),DUo=r(t$e," \u2014 "),gX=n(t$e,"A",{href:!0});var Rht=s(gX);GUo=r(Rht,"WavLMForSequenceClassification"),Rht.forEach(t),OUo=r(t$e," (WavLM model)"),t$e.forEach(t),Oe.forEach(t),VUo=i(ha),bF=n(ha,"P",{});var a$e=s(bF);XUo=r(a$e,"The model is set in evaluation mode by default using "),Ipe=n(a$e,"CODE",{});var Pht=s(Ipe);zUo=r(Pht,"model.eval()"),Pht.forEach(t),WUo=r(a$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qpe=n(a$e,"CODE",{});var Bht=s(qpe);QUo=r(Bht,"model.train()"),Bht.forEach(t),a$e.forEach(t),HUo=i(ha),T(vF.$$.fragment,ha),ha.forEach(t),el.forEach(t),uqe=i(f),md=n(f,"H2",{class:!0});var Fje=s(md);FF=n(Fje,"A",{id:!0,class:!0,href:!0});var Iht=s(FF);Npe=n(Iht,"SPAN",{});var qht=s(Npe);T(Jy.$$.fragment,qht),qht.forEach(t),Iht.forEach(t),UUo=i(Fje),jpe=n(Fje,"SPAN",{});var Nht=s(jpe);JUo=r(Nht,"AutoModelForAudioFrameClassification"),Nht.forEach(t),Fje.forEach(t),_qe=i(f),Oo=n(f,"DIV",{class:!0});var ol=s(Oo);T(Yy.$$.fragment,ol),YUo=i(ol),gd=n(ol,"P",{});var tZ=s(gd);KUo=r(tZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),hX=n(tZ,"A",{href:!0});var jht=s(hX);ZUo=r(jht,"from_pretrained()"),jht.forEach(t),eJo=r(tZ," class method or the "),pX=n(tZ,"A",{href:!0});var Dht=s(pX);oJo=r(Dht,"from_config()"),Dht.forEach(t),rJo=r(tZ,` class
method.`),tZ.forEach(t),tJo=i(ol),Ky=n(ol,"P",{});var Tje=s(Ky);aJo=r(Tje,"This class cannot be instantiated directly using "),Dpe=n(Tje,"CODE",{});var Ght=s(Dpe);nJo=r(Ght,"__init__()"),Ght.forEach(t),sJo=r(Tje," (throws an error)."),Tje.forEach(t),lJo=i(ol),bt=n(ol,"DIV",{class:!0});var Dw=s(bt);T(Zy.$$.fragment,Dw),iJo=i(Dw),Gpe=n(Dw,"P",{});var Oht=s(Gpe);dJo=r(Oht,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Oht.forEach(t),cJo=i(Dw),hd=n(Dw,"P",{});var aZ=s(hd);fJo=r(aZ,`Note:
Loading a model from its configuration file does `),Ope=n(aZ,"STRONG",{});var Vht=s(Ope);mJo=r(Vht,"not"),Vht.forEach(t),gJo=r(aZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),uX=n(aZ,"A",{href:!0});var Xht=s(uX);hJo=r(Xht,"from_pretrained()"),Xht.forEach(t),pJo=r(aZ," to load the model weights."),aZ.forEach(t),uJo=i(Dw),T(TF.$$.fragment,Dw),Dw.forEach(t),_Jo=i(ol),fo=n(ol,"DIV",{class:!0});var pa=s(fo);T(eL.$$.fragment,pa),bJo=i(pa),Vpe=n(pa,"P",{});var zht=s(Vpe);vJo=r(zht,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),zht.forEach(t),FJo=i(pa),Oa=n(pa,"P",{});var Gw=s(Oa);TJo=r(Gw,"The model class to instantiate is selected based on the "),Xpe=n(Gw,"CODE",{});var Wht=s(Xpe);MJo=r(Wht,"model_type"),Wht.forEach(t),EJo=r(Gw,` property of the config object (either
passed as an argument or loaded from `),zpe=n(Gw,"CODE",{});var Qht=s(zpe);CJo=r(Qht,"pretrained_model_name_or_path"),Qht.forEach(t),wJo=r(Gw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wpe=n(Gw,"CODE",{});var Hht=s(Wpe);AJo=r(Hht,"pretrained_model_name_or_path"),Hht.forEach(t),yJo=r(Gw,":"),Gw.forEach(t),LJo=i(pa),Kr=n(pa,"UL",{});var rl=s(Kr);MF=n(rl,"LI",{});var n$e=s(MF);Qpe=n(n$e,"STRONG",{});var Uht=s(Qpe);xJo=r(Uht,"data2vec-audio"),Uht.forEach(t),$Jo=r(n$e," \u2014 "),_X=n(n$e,"A",{href:!0});var Jht=s(_X);kJo=r(Jht,"Data2VecAudioForAudioFrameClassification"),Jht.forEach(t),SJo=r(n$e," (Data2VecAudio model)"),n$e.forEach(t),RJo=i(rl),EF=n(rl,"LI",{});var s$e=s(EF);Hpe=n(s$e,"STRONG",{});var Yht=s(Hpe);PJo=r(Yht,"unispeech-sat"),Yht.forEach(t),BJo=r(s$e," \u2014 "),bX=n(s$e,"A",{href:!0});var Kht=s(bX);IJo=r(Kht,"UniSpeechSatForAudioFrameClassification"),Kht.forEach(t),qJo=r(s$e," (UniSpeechSat model)"),s$e.forEach(t),NJo=i(rl),CF=n(rl,"LI",{});var l$e=s(CF);Upe=n(l$e,"STRONG",{});var Zht=s(Upe);jJo=r(Zht,"wav2vec2"),Zht.forEach(t),DJo=r(l$e," \u2014 "),vX=n(l$e,"A",{href:!0});var ept=s(vX);GJo=r(ept,"Wav2Vec2ForAudioFrameClassification"),ept.forEach(t),OJo=r(l$e," (Wav2Vec2 model)"),l$e.forEach(t),VJo=i(rl),wF=n(rl,"LI",{});var i$e=s(wF);Jpe=n(i$e,"STRONG",{});var opt=s(Jpe);XJo=r(opt,"wav2vec2-conformer"),opt.forEach(t),zJo=r(i$e," \u2014 "),FX=n(i$e,"A",{href:!0});var rpt=s(FX);WJo=r(rpt,"Wav2Vec2ConformerForAudioFrameClassification"),rpt.forEach(t),QJo=r(i$e," (Wav2Vec2-Conformer model)"),i$e.forEach(t),HJo=i(rl),AF=n(rl,"LI",{});var d$e=s(AF);Ype=n(d$e,"STRONG",{});var tpt=s(Ype);UJo=r(tpt,"wavlm"),tpt.forEach(t),JJo=r(d$e," \u2014 "),TX=n(d$e,"A",{href:!0});var apt=s(TX);YJo=r(apt,"WavLMForAudioFrameClassification"),apt.forEach(t),KJo=r(d$e," (WavLM model)"),d$e.forEach(t),rl.forEach(t),ZJo=i(pa),yF=n(pa,"P",{});var c$e=s(yF);eYo=r(c$e,"The model is set in evaluation mode by default using "),Kpe=n(c$e,"CODE",{});var npt=s(Kpe);oYo=r(npt,"model.eval()"),npt.forEach(t),rYo=r(c$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zpe=n(c$e,"CODE",{});var spt=s(Zpe);tYo=r(spt,"model.train()"),spt.forEach(t),c$e.forEach(t),aYo=i(pa),T(LF.$$.fragment,pa),pa.forEach(t),ol.forEach(t),bqe=i(f),pd=n(f,"H2",{class:!0});var Mje=s(pd);xF=n(Mje,"A",{id:!0,class:!0,href:!0});var lpt=s(xF);eue=n(lpt,"SPAN",{});var ipt=s(eue);T(oL.$$.fragment,ipt),ipt.forEach(t),lpt.forEach(t),nYo=i(Mje),oue=n(Mje,"SPAN",{});var dpt=s(oue);sYo=r(dpt,"AutoModelForCTC"),dpt.forEach(t),Mje.forEach(t),vqe=i(f),Vo=n(f,"DIV",{class:!0});var tl=s(Vo);T(rL.$$.fragment,tl),lYo=i(tl),ud=n(tl,"P",{});var nZ=s(ud);iYo=r(nZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),MX=n(nZ,"A",{href:!0});var cpt=s(MX);dYo=r(cpt,"from_pretrained()"),cpt.forEach(t),cYo=r(nZ," class method or the "),EX=n(nZ,"A",{href:!0});var fpt=s(EX);fYo=r(fpt,"from_config()"),fpt.forEach(t),mYo=r(nZ,` class
method.`),nZ.forEach(t),gYo=i(tl),tL=n(tl,"P",{});var Eje=s(tL);hYo=r(Eje,"This class cannot be instantiated directly using "),rue=n(Eje,"CODE",{});var mpt=s(rue);pYo=r(mpt,"__init__()"),mpt.forEach(t),uYo=r(Eje," (throws an error)."),Eje.forEach(t),_Yo=i(tl),vt=n(tl,"DIV",{class:!0});var Ow=s(vt);T(aL.$$.fragment,Ow),bYo=i(Ow),tue=n(Ow,"P",{});var gpt=s(tue);vYo=r(gpt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),gpt.forEach(t),FYo=i(Ow),_d=n(Ow,"P",{});var sZ=s(_d);TYo=r(sZ,`Note:
Loading a model from its configuration file does `),aue=n(sZ,"STRONG",{});var hpt=s(aue);MYo=r(hpt,"not"),hpt.forEach(t),EYo=r(sZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),CX=n(sZ,"A",{href:!0});var ppt=s(CX);CYo=r(ppt,"from_pretrained()"),ppt.forEach(t),wYo=r(sZ," to load the model weights."),sZ.forEach(t),AYo=i(Ow),T($F.$$.fragment,Ow),Ow.forEach(t),yYo=i(tl),mo=n(tl,"DIV",{class:!0});var ua=s(mo);T(nL.$$.fragment,ua),LYo=i(ua),nue=n(ua,"P",{});var upt=s(nue);xYo=r(upt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),upt.forEach(t),$Yo=i(ua),Va=n(ua,"P",{});var Vw=s(Va);kYo=r(Vw,"The model class to instantiate is selected based on the "),sue=n(Vw,"CODE",{});var _pt=s(sue);SYo=r(_pt,"model_type"),_pt.forEach(t),RYo=r(Vw,` property of the config object (either
passed as an argument or loaded from `),lue=n(Vw,"CODE",{});var bpt=s(lue);PYo=r(bpt,"pretrained_model_name_or_path"),bpt.forEach(t),BYo=r(Vw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iue=n(Vw,"CODE",{});var vpt=s(iue);IYo=r(vpt,"pretrained_model_name_or_path"),vpt.forEach(t),qYo=r(Vw,":"),Vw.forEach(t),NYo=i(ua),Se=n(ua,"UL",{});var Ve=s(Se);kF=n(Ve,"LI",{});var f$e=s(kF);due=n(f$e,"STRONG",{});var Fpt=s(due);jYo=r(Fpt,"data2vec-audio"),Fpt.forEach(t),DYo=r(f$e," \u2014 "),wX=n(f$e,"A",{href:!0});var Tpt=s(wX);GYo=r(Tpt,"Data2VecAudioForCTC"),Tpt.forEach(t),OYo=r(f$e," (Data2VecAudio model)"),f$e.forEach(t),VYo=i(Ve),SF=n(Ve,"LI",{});var m$e=s(SF);cue=n(m$e,"STRONG",{});var Mpt=s(cue);XYo=r(Mpt,"hubert"),Mpt.forEach(t),zYo=r(m$e," \u2014 "),AX=n(m$e,"A",{href:!0});var Ept=s(AX);WYo=r(Ept,"HubertForCTC"),Ept.forEach(t),QYo=r(m$e," (Hubert model)"),m$e.forEach(t),HYo=i(Ve),RF=n(Ve,"LI",{});var g$e=s(RF);fue=n(g$e,"STRONG",{});var Cpt=s(fue);UYo=r(Cpt,"sew"),Cpt.forEach(t),JYo=r(g$e," \u2014 "),yX=n(g$e,"A",{href:!0});var wpt=s(yX);YYo=r(wpt,"SEWForCTC"),wpt.forEach(t),KYo=r(g$e," (SEW model)"),g$e.forEach(t),ZYo=i(Ve),PF=n(Ve,"LI",{});var h$e=s(PF);mue=n(h$e,"STRONG",{});var Apt=s(mue);eKo=r(Apt,"sew-d"),Apt.forEach(t),oKo=r(h$e," \u2014 "),LX=n(h$e,"A",{href:!0});var ypt=s(LX);rKo=r(ypt,"SEWDForCTC"),ypt.forEach(t),tKo=r(h$e," (SEW-D model)"),h$e.forEach(t),aKo=i(Ve),BF=n(Ve,"LI",{});var p$e=s(BF);gue=n(p$e,"STRONG",{});var Lpt=s(gue);nKo=r(Lpt,"unispeech"),Lpt.forEach(t),sKo=r(p$e," \u2014 "),xX=n(p$e,"A",{href:!0});var xpt=s(xX);lKo=r(xpt,"UniSpeechForCTC"),xpt.forEach(t),iKo=r(p$e," (UniSpeech model)"),p$e.forEach(t),dKo=i(Ve),IF=n(Ve,"LI",{});var u$e=s(IF);hue=n(u$e,"STRONG",{});var $pt=s(hue);cKo=r($pt,"unispeech-sat"),$pt.forEach(t),fKo=r(u$e," \u2014 "),$X=n(u$e,"A",{href:!0});var kpt=s($X);mKo=r(kpt,"UniSpeechSatForCTC"),kpt.forEach(t),gKo=r(u$e," (UniSpeechSat model)"),u$e.forEach(t),hKo=i(Ve),qF=n(Ve,"LI",{});var _$e=s(qF);pue=n(_$e,"STRONG",{});var Spt=s(pue);pKo=r(Spt,"wav2vec2"),Spt.forEach(t),uKo=r(_$e," \u2014 "),kX=n(_$e,"A",{href:!0});var Rpt=s(kX);_Ko=r(Rpt,"Wav2Vec2ForCTC"),Rpt.forEach(t),bKo=r(_$e," (Wav2Vec2 model)"),_$e.forEach(t),vKo=i(Ve),NF=n(Ve,"LI",{});var b$e=s(NF);uue=n(b$e,"STRONG",{});var Ppt=s(uue);FKo=r(Ppt,"wav2vec2-conformer"),Ppt.forEach(t),TKo=r(b$e," \u2014 "),SX=n(b$e,"A",{href:!0});var Bpt=s(SX);MKo=r(Bpt,"Wav2Vec2ConformerForCTC"),Bpt.forEach(t),EKo=r(b$e," (Wav2Vec2-Conformer model)"),b$e.forEach(t),CKo=i(Ve),jF=n(Ve,"LI",{});var v$e=s(jF);_ue=n(v$e,"STRONG",{});var Ipt=s(_ue);wKo=r(Ipt,"wavlm"),Ipt.forEach(t),AKo=r(v$e," \u2014 "),RX=n(v$e,"A",{href:!0});var qpt=s(RX);yKo=r(qpt,"WavLMForCTC"),qpt.forEach(t),LKo=r(v$e," (WavLM model)"),v$e.forEach(t),Ve.forEach(t),xKo=i(ua),DF=n(ua,"P",{});var F$e=s(DF);$Ko=r(F$e,"The model is set in evaluation mode by default using "),bue=n(F$e,"CODE",{});var Npt=s(bue);kKo=r(Npt,"model.eval()"),Npt.forEach(t),SKo=r(F$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vue=n(F$e,"CODE",{});var jpt=s(vue);RKo=r(jpt,"model.train()"),jpt.forEach(t),F$e.forEach(t),PKo=i(ua),T(GF.$$.fragment,ua),ua.forEach(t),tl.forEach(t),Fqe=i(f),bd=n(f,"H2",{class:!0});var Cje=s(bd);OF=n(Cje,"A",{id:!0,class:!0,href:!0});var Dpt=s(OF);Fue=n(Dpt,"SPAN",{});var Gpt=s(Fue);T(sL.$$.fragment,Gpt),Gpt.forEach(t),Dpt.forEach(t),BKo=i(Cje),Tue=n(Cje,"SPAN",{});var Opt=s(Tue);IKo=r(Opt,"AutoModelForSpeechSeq2Seq"),Opt.forEach(t),Cje.forEach(t),Tqe=i(f),Xo=n(f,"DIV",{class:!0});var al=s(Xo);T(lL.$$.fragment,al),qKo=i(al),vd=n(al,"P",{});var lZ=s(vd);NKo=r(lZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),PX=n(lZ,"A",{href:!0});var Vpt=s(PX);jKo=r(Vpt,"from_pretrained()"),Vpt.forEach(t),DKo=r(lZ," class method or the "),BX=n(lZ,"A",{href:!0});var Xpt=s(BX);GKo=r(Xpt,"from_config()"),Xpt.forEach(t),OKo=r(lZ,` class
method.`),lZ.forEach(t),VKo=i(al),iL=n(al,"P",{});var wje=s(iL);XKo=r(wje,"This class cannot be instantiated directly using "),Mue=n(wje,"CODE",{});var zpt=s(Mue);zKo=r(zpt,"__init__()"),zpt.forEach(t),WKo=r(wje," (throws an error)."),wje.forEach(t),QKo=i(al),Ft=n(al,"DIV",{class:!0});var Xw=s(Ft);T(dL.$$.fragment,Xw),HKo=i(Xw),Eue=n(Xw,"P",{});var Wpt=s(Eue);UKo=r(Wpt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Wpt.forEach(t),JKo=i(Xw),Fd=n(Xw,"P",{});var iZ=s(Fd);YKo=r(iZ,`Note:
Loading a model from its configuration file does `),Cue=n(iZ,"STRONG",{});var Qpt=s(Cue);KKo=r(Qpt,"not"),Qpt.forEach(t),ZKo=r(iZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),IX=n(iZ,"A",{href:!0});var Hpt=s(IX);eZo=r(Hpt,"from_pretrained()"),Hpt.forEach(t),oZo=r(iZ," to load the model weights."),iZ.forEach(t),rZo=i(Xw),T(VF.$$.fragment,Xw),Xw.forEach(t),tZo=i(al),go=n(al,"DIV",{class:!0});var _a=s(go);T(cL.$$.fragment,_a),aZo=i(_a),wue=n(_a,"P",{});var Upt=s(wue);nZo=r(Upt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Upt.forEach(t),sZo=i(_a),Xa=n(_a,"P",{});var zw=s(Xa);lZo=r(zw,"The model class to instantiate is selected based on the "),Aue=n(zw,"CODE",{});var Jpt=s(Aue);iZo=r(Jpt,"model_type"),Jpt.forEach(t),dZo=r(zw,` property of the config object (either
passed as an argument or loaded from `),yue=n(zw,"CODE",{});var Ypt=s(yue);cZo=r(Ypt,"pretrained_model_name_or_path"),Ypt.forEach(t),fZo=r(zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lue=n(zw,"CODE",{});var Kpt=s(Lue);mZo=r(Kpt,"pretrained_model_name_or_path"),Kpt.forEach(t),gZo=r(zw,":"),zw.forEach(t),hZo=i(_a),fL=n(_a,"UL",{});var Aje=s(fL);XF=n(Aje,"LI",{});var T$e=s(XF);xue=n(T$e,"STRONG",{});var Zpt=s(xue);pZo=r(Zpt,"speech-encoder-decoder"),Zpt.forEach(t),uZo=r(T$e," \u2014 "),qX=n(T$e,"A",{href:!0});var eut=s(qX);_Zo=r(eut,"SpeechEncoderDecoderModel"),eut.forEach(t),bZo=r(T$e," (Speech Encoder decoder model)"),T$e.forEach(t),vZo=i(Aje),zF=n(Aje,"LI",{});var M$e=s(zF);$ue=n(M$e,"STRONG",{});var out=s($ue);FZo=r(out,"speech_to_text"),out.forEach(t),TZo=r(M$e," \u2014 "),NX=n(M$e,"A",{href:!0});var rut=s(NX);MZo=r(rut,"Speech2TextForConditionalGeneration"),rut.forEach(t),EZo=r(M$e," (Speech2Text model)"),M$e.forEach(t),Aje.forEach(t),CZo=i(_a),WF=n(_a,"P",{});var E$e=s(WF);wZo=r(E$e,"The model is set in evaluation mode by default using "),kue=n(E$e,"CODE",{});var tut=s(kue);AZo=r(tut,"model.eval()"),tut.forEach(t),yZo=r(E$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sue=n(E$e,"CODE",{});var aut=s(Sue);LZo=r(aut,"model.train()"),aut.forEach(t),E$e.forEach(t),xZo=i(_a),T(QF.$$.fragment,_a),_a.forEach(t),al.forEach(t),Mqe=i(f),Td=n(f,"H2",{class:!0});var yje=s(Td);HF=n(yje,"A",{id:!0,class:!0,href:!0});var nut=s(HF);Rue=n(nut,"SPAN",{});var sut=s(Rue);T(mL.$$.fragment,sut),sut.forEach(t),nut.forEach(t),$Zo=i(yje),Pue=n(yje,"SPAN",{});var lut=s(Pue);kZo=r(lut,"AutoModelForAudioXVector"),lut.forEach(t),yje.forEach(t),Eqe=i(f),zo=n(f,"DIV",{class:!0});var nl=s(zo);T(gL.$$.fragment,nl),SZo=i(nl),Md=n(nl,"P",{});var dZ=s(Md);RZo=r(dZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),jX=n(dZ,"A",{href:!0});var iut=s(jX);PZo=r(iut,"from_pretrained()"),iut.forEach(t),BZo=r(dZ," class method or the "),DX=n(dZ,"A",{href:!0});var dut=s(DX);IZo=r(dut,"from_config()"),dut.forEach(t),qZo=r(dZ,` class
method.`),dZ.forEach(t),NZo=i(nl),hL=n(nl,"P",{});var Lje=s(hL);jZo=r(Lje,"This class cannot be instantiated directly using "),Bue=n(Lje,"CODE",{});var cut=s(Bue);DZo=r(cut,"__init__()"),cut.forEach(t),GZo=r(Lje," (throws an error)."),Lje.forEach(t),OZo=i(nl),Tt=n(nl,"DIV",{class:!0});var Ww=s(Tt);T(pL.$$.fragment,Ww),VZo=i(Ww),Iue=n(Ww,"P",{});var fut=s(Iue);XZo=r(fut,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),fut.forEach(t),zZo=i(Ww),Ed=n(Ww,"P",{});var cZ=s(Ed);WZo=r(cZ,`Note:
Loading a model from its configuration file does `),que=n(cZ,"STRONG",{});var mut=s(que);QZo=r(mut,"not"),mut.forEach(t),HZo=r(cZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),GX=n(cZ,"A",{href:!0});var gut=s(GX);UZo=r(gut,"from_pretrained()"),gut.forEach(t),JZo=r(cZ," to load the model weights."),cZ.forEach(t),YZo=i(Ww),T(UF.$$.fragment,Ww),Ww.forEach(t),KZo=i(nl),ho=n(nl,"DIV",{class:!0});var ba=s(ho);T(uL.$$.fragment,ba),ZZo=i(ba),Nue=n(ba,"P",{});var hut=s(Nue);eer=r(hut,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),hut.forEach(t),oer=i(ba),za=n(ba,"P",{});var Qw=s(za);rer=r(Qw,"The model class to instantiate is selected based on the "),jue=n(Qw,"CODE",{});var put=s(jue);ter=r(put,"model_type"),put.forEach(t),aer=r(Qw,` property of the config object (either
passed as an argument or loaded from `),Due=n(Qw,"CODE",{});var uut=s(Due);ner=r(uut,"pretrained_model_name_or_path"),uut.forEach(t),ser=r(Qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gue=n(Qw,"CODE",{});var _ut=s(Gue);ler=r(_ut,"pretrained_model_name_or_path"),_ut.forEach(t),ier=r(Qw,":"),Qw.forEach(t),der=i(ba),Zr=n(ba,"UL",{});var sl=s(Zr);JF=n(sl,"LI",{});var C$e=s(JF);Oue=n(C$e,"STRONG",{});var but=s(Oue);cer=r(but,"data2vec-audio"),but.forEach(t),fer=r(C$e," \u2014 "),OX=n(C$e,"A",{href:!0});var vut=s(OX);mer=r(vut,"Data2VecAudioForXVector"),vut.forEach(t),ger=r(C$e," (Data2VecAudio model)"),C$e.forEach(t),her=i(sl),YF=n(sl,"LI",{});var w$e=s(YF);Vue=n(w$e,"STRONG",{});var Fut=s(Vue);per=r(Fut,"unispeech-sat"),Fut.forEach(t),uer=r(w$e," \u2014 "),VX=n(w$e,"A",{href:!0});var Tut=s(VX);_er=r(Tut,"UniSpeechSatForXVector"),Tut.forEach(t),ber=r(w$e," (UniSpeechSat model)"),w$e.forEach(t),ver=i(sl),KF=n(sl,"LI",{});var A$e=s(KF);Xue=n(A$e,"STRONG",{});var Mut=s(Xue);Fer=r(Mut,"wav2vec2"),Mut.forEach(t),Ter=r(A$e," \u2014 "),XX=n(A$e,"A",{href:!0});var Eut=s(XX);Mer=r(Eut,"Wav2Vec2ForXVector"),Eut.forEach(t),Eer=r(A$e," (Wav2Vec2 model)"),A$e.forEach(t),Cer=i(sl),ZF=n(sl,"LI",{});var y$e=s(ZF);zue=n(y$e,"STRONG",{});var Cut=s(zue);wer=r(Cut,"wav2vec2-conformer"),Cut.forEach(t),Aer=r(y$e," \u2014 "),zX=n(y$e,"A",{href:!0});var wut=s(zX);yer=r(wut,"Wav2Vec2ConformerForXVector"),wut.forEach(t),Ler=r(y$e," (Wav2Vec2-Conformer model)"),y$e.forEach(t),xer=i(sl),e0=n(sl,"LI",{});var L$e=s(e0);Wue=n(L$e,"STRONG",{});var Aut=s(Wue);$er=r(Aut,"wavlm"),Aut.forEach(t),ker=r(L$e," \u2014 "),WX=n(L$e,"A",{href:!0});var yut=s(WX);Ser=r(yut,"WavLMForXVector"),yut.forEach(t),Rer=r(L$e," (WavLM model)"),L$e.forEach(t),sl.forEach(t),Per=i(ba),o0=n(ba,"P",{});var x$e=s(o0);Ber=r(x$e,"The model is set in evaluation mode by default using "),Que=n(x$e,"CODE",{});var Lut=s(Que);Ier=r(Lut,"model.eval()"),Lut.forEach(t),qer=r(x$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hue=n(x$e,"CODE",{});var xut=s(Hue);Ner=r(xut,"model.train()"),xut.forEach(t),x$e.forEach(t),jer=i(ba),T(r0.$$.fragment,ba),ba.forEach(t),nl.forEach(t),Cqe=i(f),Cd=n(f,"H2",{class:!0});var xje=s(Cd);t0=n(xje,"A",{id:!0,class:!0,href:!0});var $ut=s(t0);Uue=n($ut,"SPAN",{});var kut=s(Uue);T(_L.$$.fragment,kut),kut.forEach(t),$ut.forEach(t),Der=i(xje),Jue=n(xje,"SPAN",{});var Sut=s(Jue);Ger=r(Sut,"AutoModelForMaskedImageModeling"),Sut.forEach(t),xje.forEach(t),wqe=i(f),Wo=n(f,"DIV",{class:!0});var ll=s(Wo);T(bL.$$.fragment,ll),Oer=i(ll),wd=n(ll,"P",{});var fZ=s(wd);Ver=r(fZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),QX=n(fZ,"A",{href:!0});var Rut=s(QX);Xer=r(Rut,"from_pretrained()"),Rut.forEach(t),zer=r(fZ," class method or the "),HX=n(fZ,"A",{href:!0});var Put=s(HX);Wer=r(Put,"from_config()"),Put.forEach(t),Qer=r(fZ,` class
method.`),fZ.forEach(t),Her=i(ll),vL=n(ll,"P",{});var $je=s(vL);Uer=r($je,"This class cannot be instantiated directly using "),Yue=n($je,"CODE",{});var But=s(Yue);Jer=r(But,"__init__()"),But.forEach(t),Yer=r($je," (throws an error)."),$je.forEach(t),Ker=i(ll),Mt=n(ll,"DIV",{class:!0});var Hw=s(Mt);T(FL.$$.fragment,Hw),Zer=i(Hw),Kue=n(Hw,"P",{});var Iut=s(Kue);eor=r(Iut,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Iut.forEach(t),oor=i(Hw),Ad=n(Hw,"P",{});var mZ=s(Ad);ror=r(mZ,`Note:
Loading a model from its configuration file does `),Zue=n(mZ,"STRONG",{});var qut=s(Zue);tor=r(qut,"not"),qut.forEach(t),aor=r(mZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),UX=n(mZ,"A",{href:!0});var Nut=s(UX);nor=r(Nut,"from_pretrained()"),Nut.forEach(t),sor=r(mZ," to load the model weights."),mZ.forEach(t),lor=i(Hw),T(a0.$$.fragment,Hw),Hw.forEach(t),ior=i(ll),po=n(ll,"DIV",{class:!0});var va=s(po);T(TL.$$.fragment,va),dor=i(va),e_e=n(va,"P",{});var jut=s(e_e);cor=r(jut,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),jut.forEach(t),mor=i(va),Wa=n(va,"P",{});var Uw=s(Wa);gor=r(Uw,"The model class to instantiate is selected based on the "),o_e=n(Uw,"CODE",{});var Dut=s(o_e);hor=r(Dut,"model_type"),Dut.forEach(t),por=r(Uw,` property of the config object (either
passed as an argument or loaded from `),r_e=n(Uw,"CODE",{});var Gut=s(r_e);uor=r(Gut,"pretrained_model_name_or_path"),Gut.forEach(t),_or=r(Uw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t_e=n(Uw,"CODE",{});var Out=s(t_e);bor=r(Out,"pretrained_model_name_or_path"),Out.forEach(t),vor=r(Uw,":"),Uw.forEach(t),For=i(va),yd=n(va,"UL",{});var gZ=s(yd);n0=n(gZ,"LI",{});var $$e=s(n0);a_e=n($$e,"STRONG",{});var Vut=s(a_e);Tor=r(Vut,"deit"),Vut.forEach(t),Mor=r($$e," \u2014 "),JX=n($$e,"A",{href:!0});var Xut=s(JX);Eor=r(Xut,"DeiTForMaskedImageModeling"),Xut.forEach(t),Cor=r($$e," (DeiT model)"),$$e.forEach(t),wor=i(gZ),s0=n(gZ,"LI",{});var k$e=s(s0);n_e=n(k$e,"STRONG",{});var zut=s(n_e);Aor=r(zut,"swin"),zut.forEach(t),yor=r(k$e," \u2014 "),YX=n(k$e,"A",{href:!0});var Wut=s(YX);Lor=r(Wut,"SwinForMaskedImageModeling"),Wut.forEach(t),xor=r(k$e," (Swin model)"),k$e.forEach(t),$or=i(gZ),l0=n(gZ,"LI",{});var S$e=s(l0);s_e=n(S$e,"STRONG",{});var Qut=s(s_e);kor=r(Qut,"vit"),Qut.forEach(t),Sor=r(S$e," \u2014 "),KX=n(S$e,"A",{href:!0});var Hut=s(KX);Ror=r(Hut,"ViTForMaskedImageModeling"),Hut.forEach(t),Por=r(S$e," (ViT model)"),S$e.forEach(t),gZ.forEach(t),Bor=i(va),i0=n(va,"P",{});var R$e=s(i0);Ior=r(R$e,"The model is set in evaluation mode by default using "),l_e=n(R$e,"CODE",{});var Uut=s(l_e);qor=r(Uut,"model.eval()"),Uut.forEach(t),Nor=r(R$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),i_e=n(R$e,"CODE",{});var Jut=s(i_e);jor=r(Jut,"model.train()"),Jut.forEach(t),R$e.forEach(t),Dor=i(va),T(d0.$$.fragment,va),va.forEach(t),ll.forEach(t),Aqe=i(f),Ld=n(f,"H2",{class:!0});var kje=s(Ld);c0=n(kje,"A",{id:!0,class:!0,href:!0});var Yut=s(c0);d_e=n(Yut,"SPAN",{});var Kut=s(d_e);T(ML.$$.fragment,Kut),Kut.forEach(t),Yut.forEach(t),Gor=i(kje),c_e=n(kje,"SPAN",{});var Zut=s(c_e);Oor=r(Zut,"AutoModelForObjectDetection"),Zut.forEach(t),kje.forEach(t),yqe=i(f),Qo=n(f,"DIV",{class:!0});var il=s(Qo);T(EL.$$.fragment,il),Vor=i(il),xd=n(il,"P",{});var hZ=s(xd);Xor=r(hZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),ZX=n(hZ,"A",{href:!0});var e_t=s(ZX);zor=r(e_t,"from_pretrained()"),e_t.forEach(t),Wor=r(hZ," class method or the "),ez=n(hZ,"A",{href:!0});var o_t=s(ez);Qor=r(o_t,"from_config()"),o_t.forEach(t),Hor=r(hZ,` class
method.`),hZ.forEach(t),Uor=i(il),CL=n(il,"P",{});var Sje=s(CL);Jor=r(Sje,"This class cannot be instantiated directly using "),f_e=n(Sje,"CODE",{});var r_t=s(f_e);Yor=r(r_t,"__init__()"),r_t.forEach(t),Kor=r(Sje," (throws an error)."),Sje.forEach(t),Zor=i(il),Et=n(il,"DIV",{class:!0});var Jw=s(Et);T(wL.$$.fragment,Jw),err=i(Jw),m_e=n(Jw,"P",{});var t_t=s(m_e);orr=r(t_t,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),t_t.forEach(t),rrr=i(Jw),$d=n(Jw,"P",{});var pZ=s($d);trr=r(pZ,`Note:
Loading a model from its configuration file does `),g_e=n(pZ,"STRONG",{});var a_t=s(g_e);arr=r(a_t,"not"),a_t.forEach(t),nrr=r(pZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),oz=n(pZ,"A",{href:!0});var n_t=s(oz);srr=r(n_t,"from_pretrained()"),n_t.forEach(t),lrr=r(pZ," to load the model weights."),pZ.forEach(t),irr=i(Jw),T(f0.$$.fragment,Jw),Jw.forEach(t),drr=i(il),uo=n(il,"DIV",{class:!0});var Fa=s(uo);T(AL.$$.fragment,Fa),crr=i(Fa),h_e=n(Fa,"P",{});var s_t=s(h_e);frr=r(s_t,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),s_t.forEach(t),mrr=i(Fa),Qa=n(Fa,"P",{});var Yw=s(Qa);grr=r(Yw,"The model class to instantiate is selected based on the "),p_e=n(Yw,"CODE",{});var l_t=s(p_e);hrr=r(l_t,"model_type"),l_t.forEach(t),prr=r(Yw,` property of the config object (either
passed as an argument or loaded from `),u_e=n(Yw,"CODE",{});var i_t=s(u_e);urr=r(i_t,"pretrained_model_name_or_path"),i_t.forEach(t),_rr=r(Yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),__e=n(Yw,"CODE",{});var d_t=s(__e);brr=r(d_t,"pretrained_model_name_or_path"),d_t.forEach(t),vrr=r(Yw,":"),Yw.forEach(t),Frr=i(Fa),yL=n(Fa,"UL",{});var Rje=s(yL);m0=n(Rje,"LI",{});var P$e=s(m0);b_e=n(P$e,"STRONG",{});var c_t=s(b_e);Trr=r(c_t,"detr"),c_t.forEach(t),Mrr=r(P$e," \u2014 "),rz=n(P$e,"A",{href:!0});var f_t=s(rz);Err=r(f_t,"DetrForObjectDetection"),f_t.forEach(t),Crr=r(P$e," (DETR model)"),P$e.forEach(t),wrr=i(Rje),g0=n(Rje,"LI",{});var B$e=s(g0);v_e=n(B$e,"STRONG",{});var m_t=s(v_e);Arr=r(m_t,"yolos"),m_t.forEach(t),yrr=r(B$e," \u2014 "),tz=n(B$e,"A",{href:!0});var g_t=s(tz);Lrr=r(g_t,"YolosForObjectDetection"),g_t.forEach(t),xrr=r(B$e," (YOLOS model)"),B$e.forEach(t),Rje.forEach(t),$rr=i(Fa),h0=n(Fa,"P",{});var I$e=s(h0);krr=r(I$e,"The model is set in evaluation mode by default using "),F_e=n(I$e,"CODE",{});var h_t=s(F_e);Srr=r(h_t,"model.eval()"),h_t.forEach(t),Rrr=r(I$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),T_e=n(I$e,"CODE",{});var p_t=s(T_e);Prr=r(p_t,"model.train()"),p_t.forEach(t),I$e.forEach(t),Brr=i(Fa),T(p0.$$.fragment,Fa),Fa.forEach(t),il.forEach(t),Lqe=i(f),kd=n(f,"H2",{class:!0});var Pje=s(kd);u0=n(Pje,"A",{id:!0,class:!0,href:!0});var u_t=s(u0);M_e=n(u_t,"SPAN",{});var __t=s(M_e);T(LL.$$.fragment,__t),__t.forEach(t),u_t.forEach(t),Irr=i(Pje),E_e=n(Pje,"SPAN",{});var b_t=s(E_e);qrr=r(b_t,"AutoModelForImageSegmentation"),b_t.forEach(t),Pje.forEach(t),xqe=i(f),Ho=n(f,"DIV",{class:!0});var dl=s(Ho);T(xL.$$.fragment,dl),Nrr=i(dl),Sd=n(dl,"P",{});var uZ=s(Sd);jrr=r(uZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),az=n(uZ,"A",{href:!0});var v_t=s(az);Drr=r(v_t,"from_pretrained()"),v_t.forEach(t),Grr=r(uZ," class method or the "),nz=n(uZ,"A",{href:!0});var F_t=s(nz);Orr=r(F_t,"from_config()"),F_t.forEach(t),Vrr=r(uZ,` class
method.`),uZ.forEach(t),Xrr=i(dl),$L=n(dl,"P",{});var Bje=s($L);zrr=r(Bje,"This class cannot be instantiated directly using "),C_e=n(Bje,"CODE",{});var T_t=s(C_e);Wrr=r(T_t,"__init__()"),T_t.forEach(t),Qrr=r(Bje," (throws an error)."),Bje.forEach(t),Hrr=i(dl),Ct=n(dl,"DIV",{class:!0});var Kw=s(Ct);T(kL.$$.fragment,Kw),Urr=i(Kw),w_e=n(Kw,"P",{});var M_t=s(w_e);Jrr=r(M_t,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),M_t.forEach(t),Yrr=i(Kw),Rd=n(Kw,"P",{});var _Z=s(Rd);Krr=r(_Z,`Note:
Loading a model from its configuration file does `),A_e=n(_Z,"STRONG",{});var E_t=s(A_e);Zrr=r(E_t,"not"),E_t.forEach(t),etr=r(_Z,` load the model weights. It only affects the
model\u2019s configuration. Use `),sz=n(_Z,"A",{href:!0});var C_t=s(sz);otr=r(C_t,"from_pretrained()"),C_t.forEach(t),rtr=r(_Z," to load the model weights."),_Z.forEach(t),ttr=i(Kw),T(_0.$$.fragment,Kw),Kw.forEach(t),atr=i(dl),_o=n(dl,"DIV",{class:!0});var Ta=s(_o);T(SL.$$.fragment,Ta),ntr=i(Ta),y_e=n(Ta,"P",{});var w_t=s(y_e);str=r(w_t,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),w_t.forEach(t),ltr=i(Ta),Ha=n(Ta,"P",{});var Zw=s(Ha);itr=r(Zw,"The model class to instantiate is selected based on the "),L_e=n(Zw,"CODE",{});var A_t=s(L_e);dtr=r(A_t,"model_type"),A_t.forEach(t),ctr=r(Zw,` property of the config object (either
passed as an argument or loaded from `),x_e=n(Zw,"CODE",{});var y_t=s(x_e);ftr=r(y_t,"pretrained_model_name_or_path"),y_t.forEach(t),mtr=r(Zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$_e=n(Zw,"CODE",{});var L_t=s($_e);gtr=r(L_t,"pretrained_model_name_or_path"),L_t.forEach(t),htr=r(Zw,":"),Zw.forEach(t),ptr=i(Ta),k_e=n(Ta,"UL",{});var x_t=s(k_e);b0=n(x_t,"LI",{});var q$e=s(b0);S_e=n(q$e,"STRONG",{});var $_t=s(S_e);utr=r($_t,"detr"),$_t.forEach(t),_tr=r(q$e," \u2014 "),lz=n(q$e,"A",{href:!0});var k_t=s(lz);btr=r(k_t,"DetrForSegmentation"),k_t.forEach(t),vtr=r(q$e," (DETR model)"),q$e.forEach(t),x_t.forEach(t),Ftr=i(Ta),v0=n(Ta,"P",{});var N$e=s(v0);Ttr=r(N$e,"The model is set in evaluation mode by default using "),R_e=n(N$e,"CODE",{});var S_t=s(R_e);Mtr=r(S_t,"model.eval()"),S_t.forEach(t),Etr=r(N$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),P_e=n(N$e,"CODE",{});var R_t=s(P_e);Ctr=r(R_t,"model.train()"),R_t.forEach(t),N$e.forEach(t),wtr=i(Ta),T(F0.$$.fragment,Ta),Ta.forEach(t),dl.forEach(t),$qe=i(f),Pd=n(f,"H2",{class:!0});var Ije=s(Pd);T0=n(Ije,"A",{id:!0,class:!0,href:!0});var P_t=s(T0);B_e=n(P_t,"SPAN",{});var B_t=s(B_e);T(RL.$$.fragment,B_t),B_t.forEach(t),P_t.forEach(t),Atr=i(Ije),I_e=n(Ije,"SPAN",{});var I_t=s(I_e);ytr=r(I_t,"AutoModelForSemanticSegmentation"),I_t.forEach(t),Ije.forEach(t),kqe=i(f),Uo=n(f,"DIV",{class:!0});var cl=s(Uo);T(PL.$$.fragment,cl),Ltr=i(cl),Bd=n(cl,"P",{});var bZ=s(Bd);xtr=r(bZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),iz=n(bZ,"A",{href:!0});var q_t=s(iz);$tr=r(q_t,"from_pretrained()"),q_t.forEach(t),ktr=r(bZ," class method or the "),dz=n(bZ,"A",{href:!0});var N_t=s(dz);Str=r(N_t,"from_config()"),N_t.forEach(t),Rtr=r(bZ,` class
method.`),bZ.forEach(t),Ptr=i(cl),BL=n(cl,"P",{});var qje=s(BL);Btr=r(qje,"This class cannot be instantiated directly using "),q_e=n(qje,"CODE",{});var j_t=s(q_e);Itr=r(j_t,"__init__()"),j_t.forEach(t),qtr=r(qje," (throws an error)."),qje.forEach(t),Ntr=i(cl),wt=n(cl,"DIV",{class:!0});var eA=s(wt);T(IL.$$.fragment,eA),jtr=i(eA),N_e=n(eA,"P",{});var D_t=s(N_e);Dtr=r(D_t,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),D_t.forEach(t),Gtr=i(eA),Id=n(eA,"P",{});var vZ=s(Id);Otr=r(vZ,`Note:
Loading a model from its configuration file does `),j_e=n(vZ,"STRONG",{});var G_t=s(j_e);Vtr=r(G_t,"not"),G_t.forEach(t),Xtr=r(vZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),cz=n(vZ,"A",{href:!0});var O_t=s(cz);ztr=r(O_t,"from_pretrained()"),O_t.forEach(t),Wtr=r(vZ," to load the model weights."),vZ.forEach(t),Qtr=i(eA),T(M0.$$.fragment,eA),eA.forEach(t),Htr=i(cl),bo=n(cl,"DIV",{class:!0});var Ma=s(bo);T(qL.$$.fragment,Ma),Utr=i(Ma),D_e=n(Ma,"P",{});var V_t=s(D_e);Jtr=r(V_t,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),V_t.forEach(t),Ytr=i(Ma),Ua=n(Ma,"P",{});var oA=s(Ua);Ktr=r(oA,"The model class to instantiate is selected based on the "),G_e=n(oA,"CODE",{});var X_t=s(G_e);Ztr=r(X_t,"model_type"),X_t.forEach(t),ear=r(oA,` property of the config object (either
passed as an argument or loaded from `),O_e=n(oA,"CODE",{});var z_t=s(O_e);oar=r(z_t,"pretrained_model_name_or_path"),z_t.forEach(t),rar=r(oA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V_e=n(oA,"CODE",{});var W_t=s(V_e);tar=r(W_t,"pretrained_model_name_or_path"),W_t.forEach(t),aar=r(oA,":"),oA.forEach(t),nar=i(Ma),Ja=n(Ma,"UL",{});var rA=s(Ja);E0=n(rA,"LI",{});var j$e=s(E0);X_e=n(j$e,"STRONG",{});var Q_t=s(X_e);sar=r(Q_t,"beit"),Q_t.forEach(t),lar=r(j$e," \u2014 "),fz=n(j$e,"A",{href:!0});var H_t=s(fz);iar=r(H_t,"BeitForSemanticSegmentation"),H_t.forEach(t),dar=r(j$e," (BEiT model)"),j$e.forEach(t),car=i(rA),C0=n(rA,"LI",{});var D$e=s(C0);z_e=n(D$e,"STRONG",{});var U_t=s(z_e);far=r(U_t,"data2vec-vision"),U_t.forEach(t),mar=r(D$e," \u2014 "),mz=n(D$e,"A",{href:!0});var J_t=s(mz);gar=r(J_t,"Data2VecVisionForSemanticSegmentation"),J_t.forEach(t),har=r(D$e," (Data2VecVision model)"),D$e.forEach(t),par=i(rA),w0=n(rA,"LI",{});var G$e=s(w0);W_e=n(G$e,"STRONG",{});var Y_t=s(W_e);uar=r(Y_t,"dpt"),Y_t.forEach(t),_ar=r(G$e," \u2014 "),gz=n(G$e,"A",{href:!0});var K_t=s(gz);bar=r(K_t,"DPTForSemanticSegmentation"),K_t.forEach(t),Far=r(G$e," (DPT model)"),G$e.forEach(t),Tar=i(rA),A0=n(rA,"LI",{});var O$e=s(A0);Q_e=n(O$e,"STRONG",{});var Z_t=s(Q_e);Mar=r(Z_t,"segformer"),Z_t.forEach(t),Ear=r(O$e," \u2014 "),hz=n(O$e,"A",{href:!0});var e1t=s(hz);Car=r(e1t,"SegformerForSemanticSegmentation"),e1t.forEach(t),war=r(O$e," (SegFormer model)"),O$e.forEach(t),rA.forEach(t),Aar=i(Ma),y0=n(Ma,"P",{});var V$e=s(y0);yar=r(V$e,"The model is set in evaluation mode by default using "),H_e=n(V$e,"CODE",{});var o1t=s(H_e);Lar=r(o1t,"model.eval()"),o1t.forEach(t),xar=r(V$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),U_e=n(V$e,"CODE",{});var r1t=s(U_e);$ar=r(r1t,"model.train()"),r1t.forEach(t),V$e.forEach(t),kar=i(Ma),T(L0.$$.fragment,Ma),Ma.forEach(t),cl.forEach(t),Sqe=i(f),qd=n(f,"H2",{class:!0});var Nje=s(qd);x0=n(Nje,"A",{id:!0,class:!0,href:!0});var t1t=s(x0);J_e=n(t1t,"SPAN",{});var a1t=s(J_e);T(NL.$$.fragment,a1t),a1t.forEach(t),t1t.forEach(t),Sar=i(Nje),Y_e=n(Nje,"SPAN",{});var n1t=s(Y_e);Rar=r(n1t,"AutoModelForInstanceSegmentation"),n1t.forEach(t),Nje.forEach(t),Rqe=i(f),Jo=n(f,"DIV",{class:!0});var fl=s(Jo);T(jL.$$.fragment,fl),Par=i(fl),Nd=n(fl,"P",{});var FZ=s(Nd);Bar=r(FZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),pz=n(FZ,"A",{href:!0});var s1t=s(pz);Iar=r(s1t,"from_pretrained()"),s1t.forEach(t),qar=r(FZ," class method or the "),uz=n(FZ,"A",{href:!0});var l1t=s(uz);Nar=r(l1t,"from_config()"),l1t.forEach(t),jar=r(FZ,` class
method.`),FZ.forEach(t),Dar=i(fl),DL=n(fl,"P",{});var jje=s(DL);Gar=r(jje,"This class cannot be instantiated directly using "),K_e=n(jje,"CODE",{});var i1t=s(K_e);Oar=r(i1t,"__init__()"),i1t.forEach(t),Var=r(jje," (throws an error)."),jje.forEach(t),Xar=i(fl),At=n(fl,"DIV",{class:!0});var tA=s(At);T(GL.$$.fragment,tA),zar=i(tA),Z_e=n(tA,"P",{});var d1t=s(Z_e);War=r(d1t,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),d1t.forEach(t),Qar=i(tA),jd=n(tA,"P",{});var TZ=s(jd);Har=r(TZ,`Note:
Loading a model from its configuration file does `),e1e=n(TZ,"STRONG",{});var c1t=s(e1e);Uar=r(c1t,"not"),c1t.forEach(t),Jar=r(TZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),_z=n(TZ,"A",{href:!0});var f1t=s(_z);Yar=r(f1t,"from_pretrained()"),f1t.forEach(t),Kar=r(TZ," to load the model weights."),TZ.forEach(t),Zar=i(tA),T($0.$$.fragment,tA),tA.forEach(t),enr=i(fl),vo=n(fl,"DIV",{class:!0});var Ea=s(vo);T(OL.$$.fragment,Ea),onr=i(Ea),o1e=n(Ea,"P",{});var m1t=s(o1e);rnr=r(m1t,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),m1t.forEach(t),tnr=i(Ea),Ya=n(Ea,"P",{});var aA=s(Ya);anr=r(aA,"The model class to instantiate is selected based on the "),r1e=n(aA,"CODE",{});var g1t=s(r1e);nnr=r(g1t,"model_type"),g1t.forEach(t),snr=r(aA,` property of the config object (either
passed as an argument or loaded from `),t1e=n(aA,"CODE",{});var h1t=s(t1e);lnr=r(h1t,"pretrained_model_name_or_path"),h1t.forEach(t),inr=r(aA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a1e=n(aA,"CODE",{});var p1t=s(a1e);dnr=r(p1t,"pretrained_model_name_or_path"),p1t.forEach(t),cnr=r(aA,":"),aA.forEach(t),fnr=i(Ea),n1e=n(Ea,"UL",{});var u1t=s(n1e);k0=n(u1t,"LI",{});var X$e=s(k0);s1e=n(X$e,"STRONG",{});var _1t=s(s1e);mnr=r(_1t,"maskformer"),_1t.forEach(t),gnr=r(X$e," \u2014 "),bz=n(X$e,"A",{href:!0});var b1t=s(bz);hnr=r(b1t,"MaskFormerForInstanceSegmentation"),b1t.forEach(t),pnr=r(X$e," (MaskFormer model)"),X$e.forEach(t),u1t.forEach(t),unr=i(Ea),S0=n(Ea,"P",{});var z$e=s(S0);_nr=r(z$e,"The model is set in evaluation mode by default using "),l1e=n(z$e,"CODE",{});var v1t=s(l1e);bnr=r(v1t,"model.eval()"),v1t.forEach(t),vnr=r(z$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),i1e=n(z$e,"CODE",{});var F1t=s(i1e);Fnr=r(F1t,"model.train()"),F1t.forEach(t),z$e.forEach(t),Tnr=i(Ea),T(R0.$$.fragment,Ea),Ea.forEach(t),fl.forEach(t),Pqe=i(f),Dd=n(f,"H2",{class:!0});var Dje=s(Dd);P0=n(Dje,"A",{id:!0,class:!0,href:!0});var T1t=s(P0);d1e=n(T1t,"SPAN",{});var M1t=s(d1e);T(VL.$$.fragment,M1t),M1t.forEach(t),T1t.forEach(t),Mnr=i(Dje),c1e=n(Dje,"SPAN",{});var E1t=s(c1e);Enr=r(E1t,"TFAutoModel"),E1t.forEach(t),Dje.forEach(t),Bqe=i(f),Yo=n(f,"DIV",{class:!0});var ml=s(Yo);T(XL.$$.fragment,ml),Cnr=i(ml),Gd=n(ml,"P",{});var MZ=s(Gd);wnr=r(MZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),vz=n(MZ,"A",{href:!0});var C1t=s(vz);Anr=r(C1t,"from_pretrained()"),C1t.forEach(t),ynr=r(MZ," class method or the "),Fz=n(MZ,"A",{href:!0});var w1t=s(Fz);Lnr=r(w1t,"from_config()"),w1t.forEach(t),xnr=r(MZ,` class
method.`),MZ.forEach(t),$nr=i(ml),zL=n(ml,"P",{});var Gje=s(zL);knr=r(Gje,"This class cannot be instantiated directly using "),f1e=n(Gje,"CODE",{});var A1t=s(f1e);Snr=r(A1t,"__init__()"),A1t.forEach(t),Rnr=r(Gje," (throws an error)."),Gje.forEach(t),Pnr=i(ml),yt=n(ml,"DIV",{class:!0});var nA=s(yt);T(WL.$$.fragment,nA),Bnr=i(nA),m1e=n(nA,"P",{});var y1t=s(m1e);Inr=r(y1t,"Instantiates one of the base model classes of the library from a configuration."),y1t.forEach(t),qnr=i(nA),Od=n(nA,"P",{});var EZ=s(Od);Nnr=r(EZ,`Note:
Loading a model from its configuration file does `),g1e=n(EZ,"STRONG",{});var L1t=s(g1e);jnr=r(L1t,"not"),L1t.forEach(t),Dnr=r(EZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Tz=n(EZ,"A",{href:!0});var x1t=s(Tz);Gnr=r(x1t,"from_pretrained()"),x1t.forEach(t),Onr=r(EZ," to load the model weights."),EZ.forEach(t),Vnr=i(nA),T(B0.$$.fragment,nA),nA.forEach(t),Xnr=i(ml),wr=n(ml,"DIV",{class:!0});var gl=s(wr);T(QL.$$.fragment,gl),znr=i(gl),h1e=n(gl,"P",{});var $1t=s(h1e);Wnr=r($1t,"Instantiate one of the base model classes of the library from a pretrained model."),$1t.forEach(t),Qnr=i(gl),Ka=n(gl,"P",{});var sA=s(Ka);Hnr=r(sA,"The model class to instantiate is selected based on the "),p1e=n(sA,"CODE",{});var k1t=s(p1e);Unr=r(k1t,"model_type"),k1t.forEach(t),Jnr=r(sA,` property of the config object (either
passed as an argument or loaded from `),u1e=n(sA,"CODE",{});var S1t=s(u1e);Ynr=r(S1t,"pretrained_model_name_or_path"),S1t.forEach(t),Knr=r(sA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_1e=n(sA,"CODE",{});var R1t=s(_1e);Znr=r(R1t,"pretrained_model_name_or_path"),R1t.forEach(t),esr=r(sA,":"),sA.forEach(t),osr=i(gl),N=n(gl,"UL",{});var D=s(N);I0=n(D,"LI",{});var W$e=s(I0);b1e=n(W$e,"STRONG",{});var P1t=s(b1e);rsr=r(P1t,"albert"),P1t.forEach(t),tsr=r(W$e," \u2014 "),Mz=n(W$e,"A",{href:!0});var B1t=s(Mz);asr=r(B1t,"TFAlbertModel"),B1t.forEach(t),nsr=r(W$e," (ALBERT model)"),W$e.forEach(t),ssr=i(D),q0=n(D,"LI",{});var Q$e=s(q0);v1e=n(Q$e,"STRONG",{});var I1t=s(v1e);lsr=r(I1t,"bart"),I1t.forEach(t),isr=r(Q$e," \u2014 "),Ez=n(Q$e,"A",{href:!0});var q1t=s(Ez);dsr=r(q1t,"TFBartModel"),q1t.forEach(t),csr=r(Q$e," (BART model)"),Q$e.forEach(t),fsr=i(D),N0=n(D,"LI",{});var H$e=s(N0);F1e=n(H$e,"STRONG",{});var N1t=s(F1e);msr=r(N1t,"bert"),N1t.forEach(t),gsr=r(H$e," \u2014 "),Cz=n(H$e,"A",{href:!0});var j1t=s(Cz);hsr=r(j1t,"TFBertModel"),j1t.forEach(t),psr=r(H$e," (BERT model)"),H$e.forEach(t),usr=i(D),j0=n(D,"LI",{});var U$e=s(j0);T1e=n(U$e,"STRONG",{});var D1t=s(T1e);_sr=r(D1t,"blenderbot"),D1t.forEach(t),bsr=r(U$e," \u2014 "),wz=n(U$e,"A",{href:!0});var G1t=s(wz);vsr=r(G1t,"TFBlenderbotModel"),G1t.forEach(t),Fsr=r(U$e," (Blenderbot model)"),U$e.forEach(t),Tsr=i(D),D0=n(D,"LI",{});var J$e=s(D0);M1e=n(J$e,"STRONG",{});var O1t=s(M1e);Msr=r(O1t,"blenderbot-small"),O1t.forEach(t),Esr=r(J$e," \u2014 "),Az=n(J$e,"A",{href:!0});var V1t=s(Az);Csr=r(V1t,"TFBlenderbotSmallModel"),V1t.forEach(t),wsr=r(J$e," (BlenderbotSmall model)"),J$e.forEach(t),Asr=i(D),G0=n(D,"LI",{});var Y$e=s(G0);E1e=n(Y$e,"STRONG",{});var X1t=s(E1e);ysr=r(X1t,"camembert"),X1t.forEach(t),Lsr=r(Y$e," \u2014 "),yz=n(Y$e,"A",{href:!0});var z1t=s(yz);xsr=r(z1t,"TFCamembertModel"),z1t.forEach(t),$sr=r(Y$e," (CamemBERT model)"),Y$e.forEach(t),ksr=i(D),O0=n(D,"LI",{});var K$e=s(O0);C1e=n(K$e,"STRONG",{});var W1t=s(C1e);Ssr=r(W1t,"clip"),W1t.forEach(t),Rsr=r(K$e," \u2014 "),Lz=n(K$e,"A",{href:!0});var Q1t=s(Lz);Psr=r(Q1t,"TFCLIPModel"),Q1t.forEach(t),Bsr=r(K$e," (CLIP model)"),K$e.forEach(t),Isr=i(D),V0=n(D,"LI",{});var Z$e=s(V0);w1e=n(Z$e,"STRONG",{});var H1t=s(w1e);qsr=r(H1t,"convbert"),H1t.forEach(t),Nsr=r(Z$e," \u2014 "),xz=n(Z$e,"A",{href:!0});var U1t=s(xz);jsr=r(U1t,"TFConvBertModel"),U1t.forEach(t),Dsr=r(Z$e," (ConvBERT model)"),Z$e.forEach(t),Gsr=i(D),X0=n(D,"LI",{});var eke=s(X0);A1e=n(eke,"STRONG",{});var J1t=s(A1e);Osr=r(J1t,"convnext"),J1t.forEach(t),Vsr=r(eke," \u2014 "),$z=n(eke,"A",{href:!0});var Y1t=s($z);Xsr=r(Y1t,"TFConvNextModel"),Y1t.forEach(t),zsr=r(eke," (ConvNext model)"),eke.forEach(t),Wsr=i(D),z0=n(D,"LI",{});var oke=s(z0);y1e=n(oke,"STRONG",{});var K1t=s(y1e);Qsr=r(K1t,"ctrl"),K1t.forEach(t),Hsr=r(oke," \u2014 "),kz=n(oke,"A",{href:!0});var Z1t=s(kz);Usr=r(Z1t,"TFCTRLModel"),Z1t.forEach(t),Jsr=r(oke," (CTRL model)"),oke.forEach(t),Ysr=i(D),W0=n(D,"LI",{});var rke=s(W0);L1e=n(rke,"STRONG",{});var ebt=s(L1e);Ksr=r(ebt,"data2vec-vision"),ebt.forEach(t),Zsr=r(rke," \u2014 "),Sz=n(rke,"A",{href:!0});var obt=s(Sz);elr=r(obt,"TFData2VecVisionModel"),obt.forEach(t),olr=r(rke," (Data2VecVision model)"),rke.forEach(t),rlr=i(D),Q0=n(D,"LI",{});var tke=s(Q0);x1e=n(tke,"STRONG",{});var rbt=s(x1e);tlr=r(rbt,"deberta"),rbt.forEach(t),alr=r(tke," \u2014 "),Rz=n(tke,"A",{href:!0});var tbt=s(Rz);nlr=r(tbt,"TFDebertaModel"),tbt.forEach(t),slr=r(tke," (DeBERTa model)"),tke.forEach(t),llr=i(D),H0=n(D,"LI",{});var ake=s(H0);$1e=n(ake,"STRONG",{});var abt=s($1e);ilr=r(abt,"deberta-v2"),abt.forEach(t),dlr=r(ake," \u2014 "),Pz=n(ake,"A",{href:!0});var nbt=s(Pz);clr=r(nbt,"TFDebertaV2Model"),nbt.forEach(t),flr=r(ake," (DeBERTa-v2 model)"),ake.forEach(t),mlr=i(D),U0=n(D,"LI",{});var nke=s(U0);k1e=n(nke,"STRONG",{});var sbt=s(k1e);glr=r(sbt,"distilbert"),sbt.forEach(t),hlr=r(nke," \u2014 "),Bz=n(nke,"A",{href:!0});var lbt=s(Bz);plr=r(lbt,"TFDistilBertModel"),lbt.forEach(t),ulr=r(nke," (DistilBERT model)"),nke.forEach(t),_lr=i(D),J0=n(D,"LI",{});var ske=s(J0);S1e=n(ske,"STRONG",{});var ibt=s(S1e);blr=r(ibt,"dpr"),ibt.forEach(t),vlr=r(ske," \u2014 "),Iz=n(ske,"A",{href:!0});var dbt=s(Iz);Flr=r(dbt,"TFDPRQuestionEncoder"),dbt.forEach(t),Tlr=r(ske," (DPR model)"),ske.forEach(t),Mlr=i(D),Y0=n(D,"LI",{});var lke=s(Y0);R1e=n(lke,"STRONG",{});var cbt=s(R1e);Elr=r(cbt,"electra"),cbt.forEach(t),Clr=r(lke," \u2014 "),qz=n(lke,"A",{href:!0});var fbt=s(qz);wlr=r(fbt,"TFElectraModel"),fbt.forEach(t),Alr=r(lke," (ELECTRA model)"),lke.forEach(t),ylr=i(D),K0=n(D,"LI",{});var ike=s(K0);P1e=n(ike,"STRONG",{});var mbt=s(P1e);Llr=r(mbt,"flaubert"),mbt.forEach(t),xlr=r(ike," \u2014 "),Nz=n(ike,"A",{href:!0});var gbt=s(Nz);$lr=r(gbt,"TFFlaubertModel"),gbt.forEach(t),klr=r(ike," (FlauBERT model)"),ike.forEach(t),Slr=i(D),Bs=n(D,"LI",{});var C$=s(Bs);B1e=n(C$,"STRONG",{});var hbt=s(B1e);Rlr=r(hbt,"funnel"),hbt.forEach(t),Plr=r(C$," \u2014 "),jz=n(C$,"A",{href:!0});var pbt=s(jz);Blr=r(pbt,"TFFunnelModel"),pbt.forEach(t),Ilr=r(C$," or "),Dz=n(C$,"A",{href:!0});var ubt=s(Dz);qlr=r(ubt,"TFFunnelBaseModel"),ubt.forEach(t),Nlr=r(C$," (Funnel Transformer model)"),C$.forEach(t),jlr=i(D),Z0=n(D,"LI",{});var dke=s(Z0);I1e=n(dke,"STRONG",{});var _bt=s(I1e);Dlr=r(_bt,"gpt2"),_bt.forEach(t),Glr=r(dke," \u2014 "),Gz=n(dke,"A",{href:!0});var bbt=s(Gz);Olr=r(bbt,"TFGPT2Model"),bbt.forEach(t),Vlr=r(dke," (OpenAI GPT-2 model)"),dke.forEach(t),Xlr=i(D),eT=n(D,"LI",{});var cke=s(eT);q1e=n(cke,"STRONG",{});var vbt=s(q1e);zlr=r(vbt,"gptj"),vbt.forEach(t),Wlr=r(cke," \u2014 "),Oz=n(cke,"A",{href:!0});var Fbt=s(Oz);Qlr=r(Fbt,"TFGPTJModel"),Fbt.forEach(t),Hlr=r(cke," (GPT-J model)"),cke.forEach(t),Ulr=i(D),oT=n(D,"LI",{});var fke=s(oT);N1e=n(fke,"STRONG",{});var Tbt=s(N1e);Jlr=r(Tbt,"hubert"),Tbt.forEach(t),Ylr=r(fke," \u2014 "),Vz=n(fke,"A",{href:!0});var Mbt=s(Vz);Klr=r(Mbt,"TFHubertModel"),Mbt.forEach(t),Zlr=r(fke," (Hubert model)"),fke.forEach(t),eir=i(D),rT=n(D,"LI",{});var mke=s(rT);j1e=n(mke,"STRONG",{});var Ebt=s(j1e);oir=r(Ebt,"layoutlm"),Ebt.forEach(t),rir=r(mke," \u2014 "),Xz=n(mke,"A",{href:!0});var Cbt=s(Xz);tir=r(Cbt,"TFLayoutLMModel"),Cbt.forEach(t),air=r(mke," (LayoutLM model)"),mke.forEach(t),nir=i(D),tT=n(D,"LI",{});var gke=s(tT);D1e=n(gke,"STRONG",{});var wbt=s(D1e);sir=r(wbt,"led"),wbt.forEach(t),lir=r(gke," \u2014 "),zz=n(gke,"A",{href:!0});var Abt=s(zz);iir=r(Abt,"TFLEDModel"),Abt.forEach(t),dir=r(gke," (LED model)"),gke.forEach(t),cir=i(D),aT=n(D,"LI",{});var hke=s(aT);G1e=n(hke,"STRONG",{});var ybt=s(G1e);fir=r(ybt,"longformer"),ybt.forEach(t),mir=r(hke," \u2014 "),Wz=n(hke,"A",{href:!0});var Lbt=s(Wz);gir=r(Lbt,"TFLongformerModel"),Lbt.forEach(t),hir=r(hke," (Longformer model)"),hke.forEach(t),pir=i(D),nT=n(D,"LI",{});var pke=s(nT);O1e=n(pke,"STRONG",{});var xbt=s(O1e);uir=r(xbt,"lxmert"),xbt.forEach(t),_ir=r(pke," \u2014 "),Qz=n(pke,"A",{href:!0});var $bt=s(Qz);bir=r($bt,"TFLxmertModel"),$bt.forEach(t),vir=r(pke," (LXMERT model)"),pke.forEach(t),Fir=i(D),sT=n(D,"LI",{});var uke=s(sT);V1e=n(uke,"STRONG",{});var kbt=s(V1e);Tir=r(kbt,"marian"),kbt.forEach(t),Mir=r(uke," \u2014 "),Hz=n(uke,"A",{href:!0});var Sbt=s(Hz);Eir=r(Sbt,"TFMarianModel"),Sbt.forEach(t),Cir=r(uke," (Marian model)"),uke.forEach(t),wir=i(D),lT=n(D,"LI",{});var _ke=s(lT);X1e=n(_ke,"STRONG",{});var Rbt=s(X1e);Air=r(Rbt,"mbart"),Rbt.forEach(t),yir=r(_ke," \u2014 "),Uz=n(_ke,"A",{href:!0});var Pbt=s(Uz);Lir=r(Pbt,"TFMBartModel"),Pbt.forEach(t),xir=r(_ke," (mBART model)"),_ke.forEach(t),$ir=i(D),iT=n(D,"LI",{});var bke=s(iT);z1e=n(bke,"STRONG",{});var Bbt=s(z1e);kir=r(Bbt,"mobilebert"),Bbt.forEach(t),Sir=r(bke," \u2014 "),Jz=n(bke,"A",{href:!0});var Ibt=s(Jz);Rir=r(Ibt,"TFMobileBertModel"),Ibt.forEach(t),Pir=r(bke," (MobileBERT model)"),bke.forEach(t),Bir=i(D),dT=n(D,"LI",{});var vke=s(dT);W1e=n(vke,"STRONG",{});var qbt=s(W1e);Iir=r(qbt,"mpnet"),qbt.forEach(t),qir=r(vke," \u2014 "),Yz=n(vke,"A",{href:!0});var Nbt=s(Yz);Nir=r(Nbt,"TFMPNetModel"),Nbt.forEach(t),jir=r(vke," (MPNet model)"),vke.forEach(t),Dir=i(D),cT=n(D,"LI",{});var Fke=s(cT);Q1e=n(Fke,"STRONG",{});var jbt=s(Q1e);Gir=r(jbt,"mt5"),jbt.forEach(t),Oir=r(Fke," \u2014 "),Kz=n(Fke,"A",{href:!0});var Dbt=s(Kz);Vir=r(Dbt,"TFMT5Model"),Dbt.forEach(t),Xir=r(Fke," (mT5 model)"),Fke.forEach(t),zir=i(D),fT=n(D,"LI",{});var Tke=s(fT);H1e=n(Tke,"STRONG",{});var Gbt=s(H1e);Wir=r(Gbt,"openai-gpt"),Gbt.forEach(t),Qir=r(Tke," \u2014 "),Zz=n(Tke,"A",{href:!0});var Obt=s(Zz);Hir=r(Obt,"TFOpenAIGPTModel"),Obt.forEach(t),Uir=r(Tke," (OpenAI GPT model)"),Tke.forEach(t),Jir=i(D),mT=n(D,"LI",{});var Mke=s(mT);U1e=n(Mke,"STRONG",{});var Vbt=s(U1e);Yir=r(Vbt,"pegasus"),Vbt.forEach(t),Kir=r(Mke," \u2014 "),eW=n(Mke,"A",{href:!0});var Xbt=s(eW);Zir=r(Xbt,"TFPegasusModel"),Xbt.forEach(t),edr=r(Mke," (Pegasus model)"),Mke.forEach(t),odr=i(D),gT=n(D,"LI",{});var Eke=s(gT);J1e=n(Eke,"STRONG",{});var zbt=s(J1e);rdr=r(zbt,"rembert"),zbt.forEach(t),tdr=r(Eke," \u2014 "),oW=n(Eke,"A",{href:!0});var Wbt=s(oW);adr=r(Wbt,"TFRemBertModel"),Wbt.forEach(t),ndr=r(Eke," (RemBERT model)"),Eke.forEach(t),sdr=i(D),hT=n(D,"LI",{});var Cke=s(hT);Y1e=n(Cke,"STRONG",{});var Qbt=s(Y1e);ldr=r(Qbt,"roberta"),Qbt.forEach(t),idr=r(Cke," \u2014 "),rW=n(Cke,"A",{href:!0});var Hbt=s(rW);ddr=r(Hbt,"TFRobertaModel"),Hbt.forEach(t),cdr=r(Cke," (RoBERTa model)"),Cke.forEach(t),fdr=i(D),pT=n(D,"LI",{});var wke=s(pT);K1e=n(wke,"STRONG",{});var Ubt=s(K1e);mdr=r(Ubt,"roformer"),Ubt.forEach(t),gdr=r(wke," \u2014 "),tW=n(wke,"A",{href:!0});var Jbt=s(tW);hdr=r(Jbt,"TFRoFormerModel"),Jbt.forEach(t),pdr=r(wke," (RoFormer model)"),wke.forEach(t),udr=i(D),uT=n(D,"LI",{});var Ake=s(uT);Z1e=n(Ake,"STRONG",{});var Ybt=s(Z1e);_dr=r(Ybt,"speech_to_text"),Ybt.forEach(t),bdr=r(Ake," \u2014 "),aW=n(Ake,"A",{href:!0});var Kbt=s(aW);vdr=r(Kbt,"TFSpeech2TextModel"),Kbt.forEach(t),Fdr=r(Ake," (Speech2Text model)"),Ake.forEach(t),Tdr=i(D),_T=n(D,"LI",{});var yke=s(_T);ebe=n(yke,"STRONG",{});var Zbt=s(ebe);Mdr=r(Zbt,"swin"),Zbt.forEach(t),Edr=r(yke," \u2014 "),nW=n(yke,"A",{href:!0});var e2t=s(nW);Cdr=r(e2t,"TFSwinModel"),e2t.forEach(t),wdr=r(yke," (Swin model)"),yke.forEach(t),Adr=i(D),bT=n(D,"LI",{});var Lke=s(bT);obe=n(Lke,"STRONG",{});var o2t=s(obe);ydr=r(o2t,"t5"),o2t.forEach(t),Ldr=r(Lke," \u2014 "),sW=n(Lke,"A",{href:!0});var r2t=s(sW);xdr=r(r2t,"TFT5Model"),r2t.forEach(t),$dr=r(Lke," (T5 model)"),Lke.forEach(t),kdr=i(D),vT=n(D,"LI",{});var xke=s(vT);rbe=n(xke,"STRONG",{});var t2t=s(rbe);Sdr=r(t2t,"tapas"),t2t.forEach(t),Rdr=r(xke," \u2014 "),lW=n(xke,"A",{href:!0});var a2t=s(lW);Pdr=r(a2t,"TFTapasModel"),a2t.forEach(t),Bdr=r(xke," (TAPAS model)"),xke.forEach(t),Idr=i(D),FT=n(D,"LI",{});var $ke=s(FT);tbe=n($ke,"STRONG",{});var n2t=s(tbe);qdr=r(n2t,"transfo-xl"),n2t.forEach(t),Ndr=r($ke," \u2014 "),iW=n($ke,"A",{href:!0});var s2t=s(iW);jdr=r(s2t,"TFTransfoXLModel"),s2t.forEach(t),Ddr=r($ke," (Transformer-XL model)"),$ke.forEach(t),Gdr=i(D),TT=n(D,"LI",{});var kke=s(TT);abe=n(kke,"STRONG",{});var l2t=s(abe);Odr=r(l2t,"vit"),l2t.forEach(t),Vdr=r(kke," \u2014 "),dW=n(kke,"A",{href:!0});var i2t=s(dW);Xdr=r(i2t,"TFViTModel"),i2t.forEach(t),zdr=r(kke," (ViT model)"),kke.forEach(t),Wdr=i(D),MT=n(D,"LI",{});var Ske=s(MT);nbe=n(Ske,"STRONG",{});var d2t=s(nbe);Qdr=r(d2t,"vit_mae"),d2t.forEach(t),Hdr=r(Ske," \u2014 "),cW=n(Ske,"A",{href:!0});var c2t=s(cW);Udr=r(c2t,"TFViTMAEModel"),c2t.forEach(t),Jdr=r(Ske," (ViTMAE model)"),Ske.forEach(t),Ydr=i(D),ET=n(D,"LI",{});var Rke=s(ET);sbe=n(Rke,"STRONG",{});var f2t=s(sbe);Kdr=r(f2t,"wav2vec2"),f2t.forEach(t),Zdr=r(Rke," \u2014 "),fW=n(Rke,"A",{href:!0});var m2t=s(fW);ecr=r(m2t,"TFWav2Vec2Model"),m2t.forEach(t),ocr=r(Rke," (Wav2Vec2 model)"),Rke.forEach(t),rcr=i(D),CT=n(D,"LI",{});var Pke=s(CT);lbe=n(Pke,"STRONG",{});var g2t=s(lbe);tcr=r(g2t,"xlm"),g2t.forEach(t),acr=r(Pke," \u2014 "),mW=n(Pke,"A",{href:!0});var h2t=s(mW);ncr=r(h2t,"TFXLMModel"),h2t.forEach(t),scr=r(Pke," (XLM model)"),Pke.forEach(t),lcr=i(D),wT=n(D,"LI",{});var Bke=s(wT);ibe=n(Bke,"STRONG",{});var p2t=s(ibe);icr=r(p2t,"xlm-roberta"),p2t.forEach(t),dcr=r(Bke," \u2014 "),gW=n(Bke,"A",{href:!0});var u2t=s(gW);ccr=r(u2t,"TFXLMRobertaModel"),u2t.forEach(t),fcr=r(Bke," (XLM-RoBERTa model)"),Bke.forEach(t),mcr=i(D),AT=n(D,"LI",{});var Ike=s(AT);dbe=n(Ike,"STRONG",{});var _2t=s(dbe);gcr=r(_2t,"xlnet"),_2t.forEach(t),hcr=r(Ike," \u2014 "),hW=n(Ike,"A",{href:!0});var b2t=s(hW);pcr=r(b2t,"TFXLNetModel"),b2t.forEach(t),ucr=r(Ike," (XLNet model)"),Ike.forEach(t),D.forEach(t),_cr=i(gl),T(yT.$$.fragment,gl),gl.forEach(t),ml.forEach(t),Iqe=i(f),Vd=n(f,"H2",{class:!0});var Oje=s(Vd);LT=n(Oje,"A",{id:!0,class:!0,href:!0});var v2t=s(LT);cbe=n(v2t,"SPAN",{});var F2t=s(cbe);T(HL.$$.fragment,F2t),F2t.forEach(t),v2t.forEach(t),bcr=i(Oje),fbe=n(Oje,"SPAN",{});var T2t=s(fbe);vcr=r(T2t,"TFAutoModelForPreTraining"),T2t.forEach(t),Oje.forEach(t),qqe=i(f),Ko=n(f,"DIV",{class:!0});var hl=s(Ko);T(UL.$$.fragment,hl),Fcr=i(hl),Xd=n(hl,"P",{});var CZ=s(Xd);Tcr=r(CZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),pW=n(CZ,"A",{href:!0});var M2t=s(pW);Mcr=r(M2t,"from_pretrained()"),M2t.forEach(t),Ecr=r(CZ," class method or the "),uW=n(CZ,"A",{href:!0});var E2t=s(uW);Ccr=r(E2t,"from_config()"),E2t.forEach(t),wcr=r(CZ,` class
method.`),CZ.forEach(t),Acr=i(hl),JL=n(hl,"P",{});var Vje=s(JL);ycr=r(Vje,"This class cannot be instantiated directly using "),mbe=n(Vje,"CODE",{});var C2t=s(mbe);Lcr=r(C2t,"__init__()"),C2t.forEach(t),xcr=r(Vje," (throws an error)."),Vje.forEach(t),$cr=i(hl),Lt=n(hl,"DIV",{class:!0});var lA=s(Lt);T(YL.$$.fragment,lA),kcr=i(lA),gbe=n(lA,"P",{});var w2t=s(gbe);Scr=r(w2t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),w2t.forEach(t),Rcr=i(lA),zd=n(lA,"P",{});var wZ=s(zd);Pcr=r(wZ,`Note:
Loading a model from its configuration file does `),hbe=n(wZ,"STRONG",{});var A2t=s(hbe);Bcr=r(A2t,"not"),A2t.forEach(t),Icr=r(wZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),_W=n(wZ,"A",{href:!0});var y2t=s(_W);qcr=r(y2t,"from_pretrained()"),y2t.forEach(t),Ncr=r(wZ," to load the model weights."),wZ.forEach(t),jcr=i(lA),T(xT.$$.fragment,lA),lA.forEach(t),Dcr=i(hl),Ar=n(hl,"DIV",{class:!0});var pl=s(Ar);T(KL.$$.fragment,pl),Gcr=i(pl),pbe=n(pl,"P",{});var L2t=s(pbe);Ocr=r(L2t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),L2t.forEach(t),Vcr=i(pl),Za=n(pl,"P",{});var iA=s(Za);Xcr=r(iA,"The model class to instantiate is selected based on the "),ube=n(iA,"CODE",{});var x2t=s(ube);zcr=r(x2t,"model_type"),x2t.forEach(t),Wcr=r(iA,` property of the config object (either
passed as an argument or loaded from `),_be=n(iA,"CODE",{});var $2t=s(_be);Qcr=r($2t,"pretrained_model_name_or_path"),$2t.forEach(t),Hcr=r(iA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bbe=n(iA,"CODE",{});var k2t=s(bbe);Ucr=r(k2t,"pretrained_model_name_or_path"),k2t.forEach(t),Jcr=r(iA,":"),iA.forEach(t),Ycr=i(pl),se=n(pl,"UL",{});var le=s(se);$T=n(le,"LI",{});var qke=s($T);vbe=n(qke,"STRONG",{});var S2t=s(vbe);Kcr=r(S2t,"albert"),S2t.forEach(t),Zcr=r(qke," \u2014 "),bW=n(qke,"A",{href:!0});var R2t=s(bW);efr=r(R2t,"TFAlbertForPreTraining"),R2t.forEach(t),ofr=r(qke," (ALBERT model)"),qke.forEach(t),rfr=i(le),kT=n(le,"LI",{});var Nke=s(kT);Fbe=n(Nke,"STRONG",{});var P2t=s(Fbe);tfr=r(P2t,"bart"),P2t.forEach(t),afr=r(Nke," \u2014 "),vW=n(Nke,"A",{href:!0});var B2t=s(vW);nfr=r(B2t,"TFBartForConditionalGeneration"),B2t.forEach(t),sfr=r(Nke," (BART model)"),Nke.forEach(t),lfr=i(le),ST=n(le,"LI",{});var jke=s(ST);Tbe=n(jke,"STRONG",{});var I2t=s(Tbe);ifr=r(I2t,"bert"),I2t.forEach(t),dfr=r(jke," \u2014 "),FW=n(jke,"A",{href:!0});var q2t=s(FW);cfr=r(q2t,"TFBertForPreTraining"),q2t.forEach(t),ffr=r(jke," (BERT model)"),jke.forEach(t),mfr=i(le),RT=n(le,"LI",{});var Dke=s(RT);Mbe=n(Dke,"STRONG",{});var N2t=s(Mbe);gfr=r(N2t,"camembert"),N2t.forEach(t),hfr=r(Dke," \u2014 "),TW=n(Dke,"A",{href:!0});var j2t=s(TW);pfr=r(j2t,"TFCamembertForMaskedLM"),j2t.forEach(t),ufr=r(Dke," (CamemBERT model)"),Dke.forEach(t),_fr=i(le),PT=n(le,"LI",{});var Gke=s(PT);Ebe=n(Gke,"STRONG",{});var D2t=s(Ebe);bfr=r(D2t,"ctrl"),D2t.forEach(t),vfr=r(Gke," \u2014 "),MW=n(Gke,"A",{href:!0});var G2t=s(MW);Ffr=r(G2t,"TFCTRLLMHeadModel"),G2t.forEach(t),Tfr=r(Gke," (CTRL model)"),Gke.forEach(t),Mfr=i(le),BT=n(le,"LI",{});var Oke=s(BT);Cbe=n(Oke,"STRONG",{});var O2t=s(Cbe);Efr=r(O2t,"distilbert"),O2t.forEach(t),Cfr=r(Oke," \u2014 "),EW=n(Oke,"A",{href:!0});var V2t=s(EW);wfr=r(V2t,"TFDistilBertForMaskedLM"),V2t.forEach(t),Afr=r(Oke," (DistilBERT model)"),Oke.forEach(t),yfr=i(le),IT=n(le,"LI",{});var Vke=s(IT);wbe=n(Vke,"STRONG",{});var X2t=s(wbe);Lfr=r(X2t,"electra"),X2t.forEach(t),xfr=r(Vke," \u2014 "),CW=n(Vke,"A",{href:!0});var z2t=s(CW);$fr=r(z2t,"TFElectraForPreTraining"),z2t.forEach(t),kfr=r(Vke," (ELECTRA model)"),Vke.forEach(t),Sfr=i(le),qT=n(le,"LI",{});var Xke=s(qT);Abe=n(Xke,"STRONG",{});var W2t=s(Abe);Rfr=r(W2t,"flaubert"),W2t.forEach(t),Pfr=r(Xke," \u2014 "),wW=n(Xke,"A",{href:!0});var Q2t=s(wW);Bfr=r(Q2t,"TFFlaubertWithLMHeadModel"),Q2t.forEach(t),Ifr=r(Xke," (FlauBERT model)"),Xke.forEach(t),qfr=i(le),NT=n(le,"LI",{});var zke=s(NT);ybe=n(zke,"STRONG",{});var H2t=s(ybe);Nfr=r(H2t,"funnel"),H2t.forEach(t),jfr=r(zke," \u2014 "),AW=n(zke,"A",{href:!0});var U2t=s(AW);Dfr=r(U2t,"TFFunnelForPreTraining"),U2t.forEach(t),Gfr=r(zke," (Funnel Transformer model)"),zke.forEach(t),Ofr=i(le),jT=n(le,"LI",{});var Wke=s(jT);Lbe=n(Wke,"STRONG",{});var J2t=s(Lbe);Vfr=r(J2t,"gpt2"),J2t.forEach(t),Xfr=r(Wke," \u2014 "),yW=n(Wke,"A",{href:!0});var Y2t=s(yW);zfr=r(Y2t,"TFGPT2LMHeadModel"),Y2t.forEach(t),Wfr=r(Wke," (OpenAI GPT-2 model)"),Wke.forEach(t),Qfr=i(le),DT=n(le,"LI",{});var Qke=s(DT);xbe=n(Qke,"STRONG",{});var K2t=s(xbe);Hfr=r(K2t,"layoutlm"),K2t.forEach(t),Ufr=r(Qke," \u2014 "),LW=n(Qke,"A",{href:!0});var Z2t=s(LW);Jfr=r(Z2t,"TFLayoutLMForMaskedLM"),Z2t.forEach(t),Yfr=r(Qke," (LayoutLM model)"),Qke.forEach(t),Kfr=i(le),GT=n(le,"LI",{});var Hke=s(GT);$be=n(Hke,"STRONG",{});var evt=s($be);Zfr=r(evt,"lxmert"),evt.forEach(t),emr=r(Hke," \u2014 "),xW=n(Hke,"A",{href:!0});var ovt=s(xW);omr=r(ovt,"TFLxmertForPreTraining"),ovt.forEach(t),rmr=r(Hke," (LXMERT model)"),Hke.forEach(t),tmr=i(le),OT=n(le,"LI",{});var Uke=s(OT);kbe=n(Uke,"STRONG",{});var rvt=s(kbe);amr=r(rvt,"mobilebert"),rvt.forEach(t),nmr=r(Uke," \u2014 "),$W=n(Uke,"A",{href:!0});var tvt=s($W);smr=r(tvt,"TFMobileBertForPreTraining"),tvt.forEach(t),lmr=r(Uke," (MobileBERT model)"),Uke.forEach(t),imr=i(le),VT=n(le,"LI",{});var Jke=s(VT);Sbe=n(Jke,"STRONG",{});var avt=s(Sbe);dmr=r(avt,"mpnet"),avt.forEach(t),cmr=r(Jke," \u2014 "),kW=n(Jke,"A",{href:!0});var nvt=s(kW);fmr=r(nvt,"TFMPNetForMaskedLM"),nvt.forEach(t),mmr=r(Jke," (MPNet model)"),Jke.forEach(t),gmr=i(le),XT=n(le,"LI",{});var Yke=s(XT);Rbe=n(Yke,"STRONG",{});var svt=s(Rbe);hmr=r(svt,"openai-gpt"),svt.forEach(t),pmr=r(Yke," \u2014 "),SW=n(Yke,"A",{href:!0});var lvt=s(SW);umr=r(lvt,"TFOpenAIGPTLMHeadModel"),lvt.forEach(t),_mr=r(Yke," (OpenAI GPT model)"),Yke.forEach(t),bmr=i(le),zT=n(le,"LI",{});var Kke=s(zT);Pbe=n(Kke,"STRONG",{});var ivt=s(Pbe);vmr=r(ivt,"roberta"),ivt.forEach(t),Fmr=r(Kke," \u2014 "),RW=n(Kke,"A",{href:!0});var dvt=s(RW);Tmr=r(dvt,"TFRobertaForMaskedLM"),dvt.forEach(t),Mmr=r(Kke," (RoBERTa model)"),Kke.forEach(t),Emr=i(le),WT=n(le,"LI",{});var Zke=s(WT);Bbe=n(Zke,"STRONG",{});var cvt=s(Bbe);Cmr=r(cvt,"t5"),cvt.forEach(t),wmr=r(Zke," \u2014 "),PW=n(Zke,"A",{href:!0});var fvt=s(PW);Amr=r(fvt,"TFT5ForConditionalGeneration"),fvt.forEach(t),ymr=r(Zke," (T5 model)"),Zke.forEach(t),Lmr=i(le),QT=n(le,"LI",{});var eSe=s(QT);Ibe=n(eSe,"STRONG",{});var mvt=s(Ibe);xmr=r(mvt,"tapas"),mvt.forEach(t),$mr=r(eSe," \u2014 "),BW=n(eSe,"A",{href:!0});var gvt=s(BW);kmr=r(gvt,"TFTapasForMaskedLM"),gvt.forEach(t),Smr=r(eSe," (TAPAS model)"),eSe.forEach(t),Rmr=i(le),HT=n(le,"LI",{});var oSe=s(HT);qbe=n(oSe,"STRONG",{});var hvt=s(qbe);Pmr=r(hvt,"transfo-xl"),hvt.forEach(t),Bmr=r(oSe," \u2014 "),IW=n(oSe,"A",{href:!0});var pvt=s(IW);Imr=r(pvt,"TFTransfoXLLMHeadModel"),pvt.forEach(t),qmr=r(oSe," (Transformer-XL model)"),oSe.forEach(t),Nmr=i(le),UT=n(le,"LI",{});var rSe=s(UT);Nbe=n(rSe,"STRONG",{});var uvt=s(Nbe);jmr=r(uvt,"vit_mae"),uvt.forEach(t),Dmr=r(rSe," \u2014 "),qW=n(rSe,"A",{href:!0});var _vt=s(qW);Gmr=r(_vt,"TFViTMAEForPreTraining"),_vt.forEach(t),Omr=r(rSe," (ViTMAE model)"),rSe.forEach(t),Vmr=i(le),JT=n(le,"LI",{});var tSe=s(JT);jbe=n(tSe,"STRONG",{});var bvt=s(jbe);Xmr=r(bvt,"xlm"),bvt.forEach(t),zmr=r(tSe," \u2014 "),NW=n(tSe,"A",{href:!0});var vvt=s(NW);Wmr=r(vvt,"TFXLMWithLMHeadModel"),vvt.forEach(t),Qmr=r(tSe," (XLM model)"),tSe.forEach(t),Hmr=i(le),YT=n(le,"LI",{});var aSe=s(YT);Dbe=n(aSe,"STRONG",{});var Fvt=s(Dbe);Umr=r(Fvt,"xlm-roberta"),Fvt.forEach(t),Jmr=r(aSe," \u2014 "),jW=n(aSe,"A",{href:!0});var Tvt=s(jW);Ymr=r(Tvt,"TFXLMRobertaForMaskedLM"),Tvt.forEach(t),Kmr=r(aSe," (XLM-RoBERTa model)"),aSe.forEach(t),Zmr=i(le),KT=n(le,"LI",{});var nSe=s(KT);Gbe=n(nSe,"STRONG",{});var Mvt=s(Gbe);egr=r(Mvt,"xlnet"),Mvt.forEach(t),ogr=r(nSe," \u2014 "),DW=n(nSe,"A",{href:!0});var Evt=s(DW);rgr=r(Evt,"TFXLNetLMHeadModel"),Evt.forEach(t),tgr=r(nSe," (XLNet model)"),nSe.forEach(t),le.forEach(t),agr=i(pl),T(ZT.$$.fragment,pl),pl.forEach(t),hl.forEach(t),Nqe=i(f),Wd=n(f,"H2",{class:!0});var Xje=s(Wd);e7=n(Xje,"A",{id:!0,class:!0,href:!0});var Cvt=s(e7);Obe=n(Cvt,"SPAN",{});var wvt=s(Obe);T(ZL.$$.fragment,wvt),wvt.forEach(t),Cvt.forEach(t),ngr=i(Xje),Vbe=n(Xje,"SPAN",{});var Avt=s(Vbe);sgr=r(Avt,"TFAutoModelForCausalLM"),Avt.forEach(t),Xje.forEach(t),jqe=i(f),Zo=n(f,"DIV",{class:!0});var ul=s(Zo);T(e8.$$.fragment,ul),lgr=i(ul),Qd=n(ul,"P",{});var AZ=s(Qd);igr=r(AZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),GW=n(AZ,"A",{href:!0});var yvt=s(GW);dgr=r(yvt,"from_pretrained()"),yvt.forEach(t),cgr=r(AZ," class method or the "),OW=n(AZ,"A",{href:!0});var Lvt=s(OW);fgr=r(Lvt,"from_config()"),Lvt.forEach(t),mgr=r(AZ,` class
method.`),AZ.forEach(t),ggr=i(ul),o8=n(ul,"P",{});var zje=s(o8);hgr=r(zje,"This class cannot be instantiated directly using "),Xbe=n(zje,"CODE",{});var xvt=s(Xbe);pgr=r(xvt,"__init__()"),xvt.forEach(t),ugr=r(zje," (throws an error)."),zje.forEach(t),_gr=i(ul),xt=n(ul,"DIV",{class:!0});var dA=s(xt);T(r8.$$.fragment,dA),bgr=i(dA),zbe=n(dA,"P",{});var $vt=s(zbe);vgr=r($vt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),$vt.forEach(t),Fgr=i(dA),Hd=n(dA,"P",{});var yZ=s(Hd);Tgr=r(yZ,`Note:
Loading a model from its configuration file does `),Wbe=n(yZ,"STRONG",{});var kvt=s(Wbe);Mgr=r(kvt,"not"),kvt.forEach(t),Egr=r(yZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),VW=n(yZ,"A",{href:!0});var Svt=s(VW);Cgr=r(Svt,"from_pretrained()"),Svt.forEach(t),wgr=r(yZ," to load the model weights."),yZ.forEach(t),Agr=i(dA),T(o7.$$.fragment,dA),dA.forEach(t),ygr=i(ul),yr=n(ul,"DIV",{class:!0});var _l=s(yr);T(t8.$$.fragment,_l),Lgr=i(_l),Qbe=n(_l,"P",{});var Rvt=s(Qbe);xgr=r(Rvt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Rvt.forEach(t),$gr=i(_l),en=n(_l,"P",{});var cA=s(en);kgr=r(cA,"The model class to instantiate is selected based on the "),Hbe=n(cA,"CODE",{});var Pvt=s(Hbe);Sgr=r(Pvt,"model_type"),Pvt.forEach(t),Rgr=r(cA,` property of the config object (either
passed as an argument or loaded from `),Ube=n(cA,"CODE",{});var Bvt=s(Ube);Pgr=r(Bvt,"pretrained_model_name_or_path"),Bvt.forEach(t),Bgr=r(cA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jbe=n(cA,"CODE",{});var Ivt=s(Jbe);Igr=r(Ivt,"pretrained_model_name_or_path"),Ivt.forEach(t),qgr=r(cA,":"),cA.forEach(t),Ngr=i(_l),Te=n(_l,"UL",{});var Ce=s(Te);r7=n(Ce,"LI",{});var sSe=s(r7);Ybe=n(sSe,"STRONG",{});var qvt=s(Ybe);jgr=r(qvt,"bert"),qvt.forEach(t),Dgr=r(sSe," \u2014 "),XW=n(sSe,"A",{href:!0});var Nvt=s(XW);Ggr=r(Nvt,"TFBertLMHeadModel"),Nvt.forEach(t),Ogr=r(sSe," (BERT model)"),sSe.forEach(t),Vgr=i(Ce),t7=n(Ce,"LI",{});var lSe=s(t7);Kbe=n(lSe,"STRONG",{});var jvt=s(Kbe);Xgr=r(jvt,"camembert"),jvt.forEach(t),zgr=r(lSe," \u2014 "),zW=n(lSe,"A",{href:!0});var Dvt=s(zW);Wgr=r(Dvt,"TFCamembertForCausalLM"),Dvt.forEach(t),Qgr=r(lSe," (CamemBERT model)"),lSe.forEach(t),Hgr=i(Ce),a7=n(Ce,"LI",{});var iSe=s(a7);Zbe=n(iSe,"STRONG",{});var Gvt=s(Zbe);Ugr=r(Gvt,"ctrl"),Gvt.forEach(t),Jgr=r(iSe," \u2014 "),WW=n(iSe,"A",{href:!0});var Ovt=s(WW);Ygr=r(Ovt,"TFCTRLLMHeadModel"),Ovt.forEach(t),Kgr=r(iSe," (CTRL model)"),iSe.forEach(t),Zgr=i(Ce),n7=n(Ce,"LI",{});var dSe=s(n7);e2e=n(dSe,"STRONG",{});var Vvt=s(e2e);ehr=r(Vvt,"gpt2"),Vvt.forEach(t),ohr=r(dSe," \u2014 "),QW=n(dSe,"A",{href:!0});var Xvt=s(QW);rhr=r(Xvt,"TFGPT2LMHeadModel"),Xvt.forEach(t),thr=r(dSe," (OpenAI GPT-2 model)"),dSe.forEach(t),ahr=i(Ce),s7=n(Ce,"LI",{});var cSe=s(s7);o2e=n(cSe,"STRONG",{});var zvt=s(o2e);nhr=r(zvt,"gptj"),zvt.forEach(t),shr=r(cSe," \u2014 "),HW=n(cSe,"A",{href:!0});var Wvt=s(HW);lhr=r(Wvt,"TFGPTJForCausalLM"),Wvt.forEach(t),ihr=r(cSe," (GPT-J model)"),cSe.forEach(t),dhr=i(Ce),l7=n(Ce,"LI",{});var fSe=s(l7);r2e=n(fSe,"STRONG",{});var Qvt=s(r2e);chr=r(Qvt,"openai-gpt"),Qvt.forEach(t),fhr=r(fSe," \u2014 "),UW=n(fSe,"A",{href:!0});var Hvt=s(UW);mhr=r(Hvt,"TFOpenAIGPTLMHeadModel"),Hvt.forEach(t),ghr=r(fSe," (OpenAI GPT model)"),fSe.forEach(t),hhr=i(Ce),i7=n(Ce,"LI",{});var mSe=s(i7);t2e=n(mSe,"STRONG",{});var Uvt=s(t2e);phr=r(Uvt,"rembert"),Uvt.forEach(t),uhr=r(mSe," \u2014 "),JW=n(mSe,"A",{href:!0});var Jvt=s(JW);_hr=r(Jvt,"TFRemBertForCausalLM"),Jvt.forEach(t),bhr=r(mSe," (RemBERT model)"),mSe.forEach(t),vhr=i(Ce),d7=n(Ce,"LI",{});var gSe=s(d7);a2e=n(gSe,"STRONG",{});var Yvt=s(a2e);Fhr=r(Yvt,"roberta"),Yvt.forEach(t),Thr=r(gSe," \u2014 "),YW=n(gSe,"A",{href:!0});var Kvt=s(YW);Mhr=r(Kvt,"TFRobertaForCausalLM"),Kvt.forEach(t),Ehr=r(gSe," (RoBERTa model)"),gSe.forEach(t),Chr=i(Ce),c7=n(Ce,"LI",{});var hSe=s(c7);n2e=n(hSe,"STRONG",{});var Zvt=s(n2e);whr=r(Zvt,"roformer"),Zvt.forEach(t),Ahr=r(hSe," \u2014 "),KW=n(hSe,"A",{href:!0});var e3t=s(KW);yhr=r(e3t,"TFRoFormerForCausalLM"),e3t.forEach(t),Lhr=r(hSe," (RoFormer model)"),hSe.forEach(t),xhr=i(Ce),f7=n(Ce,"LI",{});var pSe=s(f7);s2e=n(pSe,"STRONG",{});var o3t=s(s2e);$hr=r(o3t,"transfo-xl"),o3t.forEach(t),khr=r(pSe," \u2014 "),ZW=n(pSe,"A",{href:!0});var r3t=s(ZW);Shr=r(r3t,"TFTransfoXLLMHeadModel"),r3t.forEach(t),Rhr=r(pSe," (Transformer-XL model)"),pSe.forEach(t),Phr=i(Ce),m7=n(Ce,"LI",{});var uSe=s(m7);l2e=n(uSe,"STRONG",{});var t3t=s(l2e);Bhr=r(t3t,"xlm"),t3t.forEach(t),Ihr=r(uSe," \u2014 "),eQ=n(uSe,"A",{href:!0});var a3t=s(eQ);qhr=r(a3t,"TFXLMWithLMHeadModel"),a3t.forEach(t),Nhr=r(uSe," (XLM model)"),uSe.forEach(t),jhr=i(Ce),g7=n(Ce,"LI",{});var _Se=s(g7);i2e=n(_Se,"STRONG",{});var n3t=s(i2e);Dhr=r(n3t,"xlnet"),n3t.forEach(t),Ghr=r(_Se," \u2014 "),oQ=n(_Se,"A",{href:!0});var s3t=s(oQ);Ohr=r(s3t,"TFXLNetLMHeadModel"),s3t.forEach(t),Vhr=r(_Se," (XLNet model)"),_Se.forEach(t),Ce.forEach(t),Xhr=i(_l),T(h7.$$.fragment,_l),_l.forEach(t),ul.forEach(t),Dqe=i(f),Ud=n(f,"H2",{class:!0});var Wje=s(Ud);p7=n(Wje,"A",{id:!0,class:!0,href:!0});var l3t=s(p7);d2e=n(l3t,"SPAN",{});var i3t=s(d2e);T(a8.$$.fragment,i3t),i3t.forEach(t),l3t.forEach(t),zhr=i(Wje),c2e=n(Wje,"SPAN",{});var d3t=s(c2e);Whr=r(d3t,"TFAutoModelForImageClassification"),d3t.forEach(t),Wje.forEach(t),Gqe=i(f),er=n(f,"DIV",{class:!0});var bl=s(er);T(n8.$$.fragment,bl),Qhr=i(bl),Jd=n(bl,"P",{});var LZ=s(Jd);Hhr=r(LZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),rQ=n(LZ,"A",{href:!0});var c3t=s(rQ);Uhr=r(c3t,"from_pretrained()"),c3t.forEach(t),Jhr=r(LZ," class method or the "),tQ=n(LZ,"A",{href:!0});var f3t=s(tQ);Yhr=r(f3t,"from_config()"),f3t.forEach(t),Khr=r(LZ,` class
method.`),LZ.forEach(t),Zhr=i(bl),s8=n(bl,"P",{});var Qje=s(s8);epr=r(Qje,"This class cannot be instantiated directly using "),f2e=n(Qje,"CODE",{});var m3t=s(f2e);opr=r(m3t,"__init__()"),m3t.forEach(t),rpr=r(Qje," (throws an error)."),Qje.forEach(t),tpr=i(bl),$t=n(bl,"DIV",{class:!0});var fA=s($t);T(l8.$$.fragment,fA),apr=i(fA),m2e=n(fA,"P",{});var g3t=s(m2e);npr=r(g3t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),g3t.forEach(t),spr=i(fA),Yd=n(fA,"P",{});var xZ=s(Yd);lpr=r(xZ,`Note:
Loading a model from its configuration file does `),g2e=n(xZ,"STRONG",{});var h3t=s(g2e);ipr=r(h3t,"not"),h3t.forEach(t),dpr=r(xZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),aQ=n(xZ,"A",{href:!0});var p3t=s(aQ);cpr=r(p3t,"from_pretrained()"),p3t.forEach(t),fpr=r(xZ," to load the model weights."),xZ.forEach(t),mpr=i(fA),T(u7.$$.fragment,fA),fA.forEach(t),gpr=i(bl),Lr=n(bl,"DIV",{class:!0});var vl=s(Lr);T(i8.$$.fragment,vl),hpr=i(vl),h2e=n(vl,"P",{});var u3t=s(h2e);ppr=r(u3t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),u3t.forEach(t),upr=i(vl),on=n(vl,"P",{});var mA=s(on);_pr=r(mA,"The model class to instantiate is selected based on the "),p2e=n(mA,"CODE",{});var _3t=s(p2e);bpr=r(_3t,"model_type"),_3t.forEach(t),vpr=r(mA,` property of the config object (either
passed as an argument or loaded from `),u2e=n(mA,"CODE",{});var b3t=s(u2e);Fpr=r(b3t,"pretrained_model_name_or_path"),b3t.forEach(t),Tpr=r(mA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_2e=n(mA,"CODE",{});var v3t=s(_2e);Mpr=r(v3t,"pretrained_model_name_or_path"),v3t.forEach(t),Epr=r(mA,":"),mA.forEach(t),Cpr=i(vl),rn=n(vl,"UL",{});var gA=s(rn);_7=n(gA,"LI",{});var bSe=s(_7);b2e=n(bSe,"STRONG",{});var F3t=s(b2e);wpr=r(F3t,"convnext"),F3t.forEach(t),Apr=r(bSe," \u2014 "),nQ=n(bSe,"A",{href:!0});var T3t=s(nQ);ypr=r(T3t,"TFConvNextForImageClassification"),T3t.forEach(t),Lpr=r(bSe," (ConvNext model)"),bSe.forEach(t),xpr=i(gA),b7=n(gA,"LI",{});var vSe=s(b7);v2e=n(vSe,"STRONG",{});var M3t=s(v2e);$pr=r(M3t,"data2vec-vision"),M3t.forEach(t),kpr=r(vSe," \u2014 "),sQ=n(vSe,"A",{href:!0});var E3t=s(sQ);Spr=r(E3t,"TFData2VecVisionForImageClassification"),E3t.forEach(t),Rpr=r(vSe," (Data2VecVision model)"),vSe.forEach(t),Ppr=i(gA),v7=n(gA,"LI",{});var FSe=s(v7);F2e=n(FSe,"STRONG",{});var C3t=s(F2e);Bpr=r(C3t,"swin"),C3t.forEach(t),Ipr=r(FSe," \u2014 "),lQ=n(FSe,"A",{href:!0});var w3t=s(lQ);qpr=r(w3t,"TFSwinForImageClassification"),w3t.forEach(t),Npr=r(FSe," (Swin model)"),FSe.forEach(t),jpr=i(gA),F7=n(gA,"LI",{});var TSe=s(F7);T2e=n(TSe,"STRONG",{});var A3t=s(T2e);Dpr=r(A3t,"vit"),A3t.forEach(t),Gpr=r(TSe," \u2014 "),iQ=n(TSe,"A",{href:!0});var y3t=s(iQ);Opr=r(y3t,"TFViTForImageClassification"),y3t.forEach(t),Vpr=r(TSe," (ViT model)"),TSe.forEach(t),gA.forEach(t),Xpr=i(vl),T(T7.$$.fragment,vl),vl.forEach(t),bl.forEach(t),Oqe=i(f),Kd=n(f,"H2",{class:!0});var Hje=s(Kd);M7=n(Hje,"A",{id:!0,class:!0,href:!0});var L3t=s(M7);M2e=n(L3t,"SPAN",{});var x3t=s(M2e);T(d8.$$.fragment,x3t),x3t.forEach(t),L3t.forEach(t),zpr=i(Hje),E2e=n(Hje,"SPAN",{});var $3t=s(E2e);Wpr=r($3t,"TFAutoModelForMaskedLM"),$3t.forEach(t),Hje.forEach(t),Vqe=i(f),or=n(f,"DIV",{class:!0});var Fl=s(or);T(c8.$$.fragment,Fl),Qpr=i(Fl),Zd=n(Fl,"P",{});var $Z=s(Zd);Hpr=r($Z,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),dQ=n($Z,"A",{href:!0});var k3t=s(dQ);Upr=r(k3t,"from_pretrained()"),k3t.forEach(t),Jpr=r($Z," class method or the "),cQ=n($Z,"A",{href:!0});var S3t=s(cQ);Ypr=r(S3t,"from_config()"),S3t.forEach(t),Kpr=r($Z,` class
method.`),$Z.forEach(t),Zpr=i(Fl),f8=n(Fl,"P",{});var Uje=s(f8);eur=r(Uje,"This class cannot be instantiated directly using "),C2e=n(Uje,"CODE",{});var R3t=s(C2e);our=r(R3t,"__init__()"),R3t.forEach(t),rur=r(Uje," (throws an error)."),Uje.forEach(t),tur=i(Fl),kt=n(Fl,"DIV",{class:!0});var hA=s(kt);T(m8.$$.fragment,hA),aur=i(hA),w2e=n(hA,"P",{});var P3t=s(w2e);nur=r(P3t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),P3t.forEach(t),sur=i(hA),ec=n(hA,"P",{});var kZ=s(ec);lur=r(kZ,`Note:
Loading a model from its configuration file does `),A2e=n(kZ,"STRONG",{});var B3t=s(A2e);iur=r(B3t,"not"),B3t.forEach(t),dur=r(kZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),fQ=n(kZ,"A",{href:!0});var I3t=s(fQ);cur=r(I3t,"from_pretrained()"),I3t.forEach(t),fur=r(kZ," to load the model weights."),kZ.forEach(t),mur=i(hA),T(E7.$$.fragment,hA),hA.forEach(t),gur=i(Fl),xr=n(Fl,"DIV",{class:!0});var Tl=s(xr);T(g8.$$.fragment,Tl),hur=i(Tl),y2e=n(Tl,"P",{});var q3t=s(y2e);pur=r(q3t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),q3t.forEach(t),uur=i(Tl),tn=n(Tl,"P",{});var pA=s(tn);_ur=r(pA,"The model class to instantiate is selected based on the "),L2e=n(pA,"CODE",{});var N3t=s(L2e);bur=r(N3t,"model_type"),N3t.forEach(t),vur=r(pA,` property of the config object (either
passed as an argument or loaded from `),x2e=n(pA,"CODE",{});var j3t=s(x2e);Fur=r(j3t,"pretrained_model_name_or_path"),j3t.forEach(t),Tur=r(pA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$2e=n(pA,"CODE",{});var D3t=s($2e);Mur=r(D3t,"pretrained_model_name_or_path"),D3t.forEach(t),Eur=r(pA,":"),pA.forEach(t),Cur=i(Tl),ie=n(Tl,"UL",{});var fe=s(ie);C7=n(fe,"LI",{});var MSe=s(C7);k2e=n(MSe,"STRONG",{});var G3t=s(k2e);wur=r(G3t,"albert"),G3t.forEach(t),Aur=r(MSe," \u2014 "),mQ=n(MSe,"A",{href:!0});var O3t=s(mQ);yur=r(O3t,"TFAlbertForMaskedLM"),O3t.forEach(t),Lur=r(MSe," (ALBERT model)"),MSe.forEach(t),xur=i(fe),w7=n(fe,"LI",{});var ESe=s(w7);S2e=n(ESe,"STRONG",{});var V3t=s(S2e);$ur=r(V3t,"bert"),V3t.forEach(t),kur=r(ESe," \u2014 "),gQ=n(ESe,"A",{href:!0});var X3t=s(gQ);Sur=r(X3t,"TFBertForMaskedLM"),X3t.forEach(t),Rur=r(ESe," (BERT model)"),ESe.forEach(t),Pur=i(fe),A7=n(fe,"LI",{});var CSe=s(A7);R2e=n(CSe,"STRONG",{});var z3t=s(R2e);Bur=r(z3t,"camembert"),z3t.forEach(t),Iur=r(CSe," \u2014 "),hQ=n(CSe,"A",{href:!0});var W3t=s(hQ);qur=r(W3t,"TFCamembertForMaskedLM"),W3t.forEach(t),Nur=r(CSe," (CamemBERT model)"),CSe.forEach(t),jur=i(fe),y7=n(fe,"LI",{});var wSe=s(y7);P2e=n(wSe,"STRONG",{});var Q3t=s(P2e);Dur=r(Q3t,"convbert"),Q3t.forEach(t),Gur=r(wSe," \u2014 "),pQ=n(wSe,"A",{href:!0});var H3t=s(pQ);Our=r(H3t,"TFConvBertForMaskedLM"),H3t.forEach(t),Vur=r(wSe," (ConvBERT model)"),wSe.forEach(t),Xur=i(fe),L7=n(fe,"LI",{});var ASe=s(L7);B2e=n(ASe,"STRONG",{});var U3t=s(B2e);zur=r(U3t,"deberta"),U3t.forEach(t),Wur=r(ASe," \u2014 "),uQ=n(ASe,"A",{href:!0});var J3t=s(uQ);Qur=r(J3t,"TFDebertaForMaskedLM"),J3t.forEach(t),Hur=r(ASe," (DeBERTa model)"),ASe.forEach(t),Uur=i(fe),x7=n(fe,"LI",{});var ySe=s(x7);I2e=n(ySe,"STRONG",{});var Y3t=s(I2e);Jur=r(Y3t,"deberta-v2"),Y3t.forEach(t),Yur=r(ySe," \u2014 "),_Q=n(ySe,"A",{href:!0});var K3t=s(_Q);Kur=r(K3t,"TFDebertaV2ForMaskedLM"),K3t.forEach(t),Zur=r(ySe," (DeBERTa-v2 model)"),ySe.forEach(t),e_r=i(fe),$7=n(fe,"LI",{});var LSe=s($7);q2e=n(LSe,"STRONG",{});var Z3t=s(q2e);o_r=r(Z3t,"distilbert"),Z3t.forEach(t),r_r=r(LSe," \u2014 "),bQ=n(LSe,"A",{href:!0});var eFt=s(bQ);t_r=r(eFt,"TFDistilBertForMaskedLM"),eFt.forEach(t),a_r=r(LSe," (DistilBERT model)"),LSe.forEach(t),n_r=i(fe),k7=n(fe,"LI",{});var xSe=s(k7);N2e=n(xSe,"STRONG",{});var oFt=s(N2e);s_r=r(oFt,"electra"),oFt.forEach(t),l_r=r(xSe," \u2014 "),vQ=n(xSe,"A",{href:!0});var rFt=s(vQ);i_r=r(rFt,"TFElectraForMaskedLM"),rFt.forEach(t),d_r=r(xSe," (ELECTRA model)"),xSe.forEach(t),c_r=i(fe),S7=n(fe,"LI",{});var $Se=s(S7);j2e=n($Se,"STRONG",{});var tFt=s(j2e);f_r=r(tFt,"flaubert"),tFt.forEach(t),m_r=r($Se," \u2014 "),FQ=n($Se,"A",{href:!0});var aFt=s(FQ);g_r=r(aFt,"TFFlaubertWithLMHeadModel"),aFt.forEach(t),h_r=r($Se," (FlauBERT model)"),$Se.forEach(t),p_r=i(fe),R7=n(fe,"LI",{});var kSe=s(R7);D2e=n(kSe,"STRONG",{});var nFt=s(D2e);u_r=r(nFt,"funnel"),nFt.forEach(t),__r=r(kSe," \u2014 "),TQ=n(kSe,"A",{href:!0});var sFt=s(TQ);b_r=r(sFt,"TFFunnelForMaskedLM"),sFt.forEach(t),v_r=r(kSe," (Funnel Transformer model)"),kSe.forEach(t),F_r=i(fe),P7=n(fe,"LI",{});var SSe=s(P7);G2e=n(SSe,"STRONG",{});var lFt=s(G2e);T_r=r(lFt,"layoutlm"),lFt.forEach(t),M_r=r(SSe," \u2014 "),MQ=n(SSe,"A",{href:!0});var iFt=s(MQ);E_r=r(iFt,"TFLayoutLMForMaskedLM"),iFt.forEach(t),C_r=r(SSe," (LayoutLM model)"),SSe.forEach(t),w_r=i(fe),B7=n(fe,"LI",{});var RSe=s(B7);O2e=n(RSe,"STRONG",{});var dFt=s(O2e);A_r=r(dFt,"longformer"),dFt.forEach(t),y_r=r(RSe," \u2014 "),EQ=n(RSe,"A",{href:!0});var cFt=s(EQ);L_r=r(cFt,"TFLongformerForMaskedLM"),cFt.forEach(t),x_r=r(RSe," (Longformer model)"),RSe.forEach(t),$_r=i(fe),I7=n(fe,"LI",{});var PSe=s(I7);V2e=n(PSe,"STRONG",{});var fFt=s(V2e);k_r=r(fFt,"mobilebert"),fFt.forEach(t),S_r=r(PSe," \u2014 "),CQ=n(PSe,"A",{href:!0});var mFt=s(CQ);R_r=r(mFt,"TFMobileBertForMaskedLM"),mFt.forEach(t),P_r=r(PSe," (MobileBERT model)"),PSe.forEach(t),B_r=i(fe),q7=n(fe,"LI",{});var BSe=s(q7);X2e=n(BSe,"STRONG",{});var gFt=s(X2e);I_r=r(gFt,"mpnet"),gFt.forEach(t),q_r=r(BSe," \u2014 "),wQ=n(BSe,"A",{href:!0});var hFt=s(wQ);N_r=r(hFt,"TFMPNetForMaskedLM"),hFt.forEach(t),j_r=r(BSe," (MPNet model)"),BSe.forEach(t),D_r=i(fe),N7=n(fe,"LI",{});var ISe=s(N7);z2e=n(ISe,"STRONG",{});var pFt=s(z2e);G_r=r(pFt,"rembert"),pFt.forEach(t),O_r=r(ISe," \u2014 "),AQ=n(ISe,"A",{href:!0});var uFt=s(AQ);V_r=r(uFt,"TFRemBertForMaskedLM"),uFt.forEach(t),X_r=r(ISe," (RemBERT model)"),ISe.forEach(t),z_r=i(fe),j7=n(fe,"LI",{});var qSe=s(j7);W2e=n(qSe,"STRONG",{});var _Ft=s(W2e);W_r=r(_Ft,"roberta"),_Ft.forEach(t),Q_r=r(qSe," \u2014 "),yQ=n(qSe,"A",{href:!0});var bFt=s(yQ);H_r=r(bFt,"TFRobertaForMaskedLM"),bFt.forEach(t),U_r=r(qSe," (RoBERTa model)"),qSe.forEach(t),J_r=i(fe),D7=n(fe,"LI",{});var NSe=s(D7);Q2e=n(NSe,"STRONG",{});var vFt=s(Q2e);Y_r=r(vFt,"roformer"),vFt.forEach(t),K_r=r(NSe," \u2014 "),LQ=n(NSe,"A",{href:!0});var FFt=s(LQ);Z_r=r(FFt,"TFRoFormerForMaskedLM"),FFt.forEach(t),e1r=r(NSe," (RoFormer model)"),NSe.forEach(t),o1r=i(fe),G7=n(fe,"LI",{});var jSe=s(G7);H2e=n(jSe,"STRONG",{});var TFt=s(H2e);r1r=r(TFt,"tapas"),TFt.forEach(t),t1r=r(jSe," \u2014 "),xQ=n(jSe,"A",{href:!0});var MFt=s(xQ);a1r=r(MFt,"TFTapasForMaskedLM"),MFt.forEach(t),n1r=r(jSe," (TAPAS model)"),jSe.forEach(t),s1r=i(fe),O7=n(fe,"LI",{});var DSe=s(O7);U2e=n(DSe,"STRONG",{});var EFt=s(U2e);l1r=r(EFt,"xlm"),EFt.forEach(t),i1r=r(DSe," \u2014 "),$Q=n(DSe,"A",{href:!0});var CFt=s($Q);d1r=r(CFt,"TFXLMWithLMHeadModel"),CFt.forEach(t),c1r=r(DSe," (XLM model)"),DSe.forEach(t),f1r=i(fe),V7=n(fe,"LI",{});var GSe=s(V7);J2e=n(GSe,"STRONG",{});var wFt=s(J2e);m1r=r(wFt,"xlm-roberta"),wFt.forEach(t),g1r=r(GSe," \u2014 "),kQ=n(GSe,"A",{href:!0});var AFt=s(kQ);h1r=r(AFt,"TFXLMRobertaForMaskedLM"),AFt.forEach(t),p1r=r(GSe," (XLM-RoBERTa model)"),GSe.forEach(t),fe.forEach(t),u1r=i(Tl),T(X7.$$.fragment,Tl),Tl.forEach(t),Fl.forEach(t),Xqe=i(f),oc=n(f,"H2",{class:!0});var Jje=s(oc);z7=n(Jje,"A",{id:!0,class:!0,href:!0});var yFt=s(z7);Y2e=n(yFt,"SPAN",{});var LFt=s(Y2e);T(h8.$$.fragment,LFt),LFt.forEach(t),yFt.forEach(t),_1r=i(Jje),K2e=n(Jje,"SPAN",{});var xFt=s(K2e);b1r=r(xFt,"TFAutoModelForSeq2SeqLM"),xFt.forEach(t),Jje.forEach(t),zqe=i(f),rr=n(f,"DIV",{class:!0});var Ml=s(rr);T(p8.$$.fragment,Ml),v1r=i(Ml),rc=n(Ml,"P",{});var SZ=s(rc);F1r=r(SZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),SQ=n(SZ,"A",{href:!0});var $Ft=s(SQ);T1r=r($Ft,"from_pretrained()"),$Ft.forEach(t),M1r=r(SZ," class method or the "),RQ=n(SZ,"A",{href:!0});var kFt=s(RQ);E1r=r(kFt,"from_config()"),kFt.forEach(t),C1r=r(SZ,` class
method.`),SZ.forEach(t),w1r=i(Ml),u8=n(Ml,"P",{});var Yje=s(u8);A1r=r(Yje,"This class cannot be instantiated directly using "),Z2e=n(Yje,"CODE",{});var SFt=s(Z2e);y1r=r(SFt,"__init__()"),SFt.forEach(t),L1r=r(Yje," (throws an error)."),Yje.forEach(t),x1r=i(Ml),St=n(Ml,"DIV",{class:!0});var uA=s(St);T(_8.$$.fragment,uA),$1r=i(uA),eve=n(uA,"P",{});var RFt=s(eve);k1r=r(RFt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),RFt.forEach(t),S1r=i(uA),tc=n(uA,"P",{});var RZ=s(tc);R1r=r(RZ,`Note:
Loading a model from its configuration file does `),ove=n(RZ,"STRONG",{});var PFt=s(ove);P1r=r(PFt,"not"),PFt.forEach(t),B1r=r(RZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),PQ=n(RZ,"A",{href:!0});var BFt=s(PQ);I1r=r(BFt,"from_pretrained()"),BFt.forEach(t),q1r=r(RZ," to load the model weights."),RZ.forEach(t),N1r=i(uA),T(W7.$$.fragment,uA),uA.forEach(t),j1r=i(Ml),$r=n(Ml,"DIV",{class:!0});var El=s($r);T(b8.$$.fragment,El),D1r=i(El),rve=n(El,"P",{});var IFt=s(rve);G1r=r(IFt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),IFt.forEach(t),O1r=i(El),an=n(El,"P",{});var _A=s(an);V1r=r(_A,"The model class to instantiate is selected based on the "),tve=n(_A,"CODE",{});var qFt=s(tve);X1r=r(qFt,"model_type"),qFt.forEach(t),z1r=r(_A,` property of the config object (either
passed as an argument or loaded from `),ave=n(_A,"CODE",{});var NFt=s(ave);W1r=r(NFt,"pretrained_model_name_or_path"),NFt.forEach(t),Q1r=r(_A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nve=n(_A,"CODE",{});var jFt=s(nve);H1r=r(jFt,"pretrained_model_name_or_path"),jFt.forEach(t),U1r=r(_A,":"),_A.forEach(t),J1r=i(El),ye=n(El,"UL",{});var Be=s(ye);Q7=n(Be,"LI",{});var OSe=s(Q7);sve=n(OSe,"STRONG",{});var DFt=s(sve);Y1r=r(DFt,"bart"),DFt.forEach(t),K1r=r(OSe," \u2014 "),BQ=n(OSe,"A",{href:!0});var GFt=s(BQ);Z1r=r(GFt,"TFBartForConditionalGeneration"),GFt.forEach(t),ebr=r(OSe," (BART model)"),OSe.forEach(t),obr=i(Be),H7=n(Be,"LI",{});var VSe=s(H7);lve=n(VSe,"STRONG",{});var OFt=s(lve);rbr=r(OFt,"blenderbot"),OFt.forEach(t),tbr=r(VSe," \u2014 "),IQ=n(VSe,"A",{href:!0});var VFt=s(IQ);abr=r(VFt,"TFBlenderbotForConditionalGeneration"),VFt.forEach(t),nbr=r(VSe," (Blenderbot model)"),VSe.forEach(t),sbr=i(Be),U7=n(Be,"LI",{});var XSe=s(U7);ive=n(XSe,"STRONG",{});var XFt=s(ive);lbr=r(XFt,"blenderbot-small"),XFt.forEach(t),ibr=r(XSe," \u2014 "),qQ=n(XSe,"A",{href:!0});var zFt=s(qQ);dbr=r(zFt,"TFBlenderbotSmallForConditionalGeneration"),zFt.forEach(t),cbr=r(XSe," (BlenderbotSmall model)"),XSe.forEach(t),fbr=i(Be),J7=n(Be,"LI",{});var zSe=s(J7);dve=n(zSe,"STRONG",{});var WFt=s(dve);mbr=r(WFt,"encoder-decoder"),WFt.forEach(t),gbr=r(zSe," \u2014 "),NQ=n(zSe,"A",{href:!0});var QFt=s(NQ);hbr=r(QFt,"TFEncoderDecoderModel"),QFt.forEach(t),pbr=r(zSe," (Encoder decoder model)"),zSe.forEach(t),ubr=i(Be),Y7=n(Be,"LI",{});var WSe=s(Y7);cve=n(WSe,"STRONG",{});var HFt=s(cve);_br=r(HFt,"led"),HFt.forEach(t),bbr=r(WSe," \u2014 "),jQ=n(WSe,"A",{href:!0});var UFt=s(jQ);vbr=r(UFt,"TFLEDForConditionalGeneration"),UFt.forEach(t),Fbr=r(WSe," (LED model)"),WSe.forEach(t),Tbr=i(Be),K7=n(Be,"LI",{});var QSe=s(K7);fve=n(QSe,"STRONG",{});var JFt=s(fve);Mbr=r(JFt,"marian"),JFt.forEach(t),Ebr=r(QSe," \u2014 "),DQ=n(QSe,"A",{href:!0});var YFt=s(DQ);Cbr=r(YFt,"TFMarianMTModel"),YFt.forEach(t),wbr=r(QSe," (Marian model)"),QSe.forEach(t),Abr=i(Be),Z7=n(Be,"LI",{});var HSe=s(Z7);mve=n(HSe,"STRONG",{});var KFt=s(mve);ybr=r(KFt,"mbart"),KFt.forEach(t),Lbr=r(HSe," \u2014 "),GQ=n(HSe,"A",{href:!0});var ZFt=s(GQ);xbr=r(ZFt,"TFMBartForConditionalGeneration"),ZFt.forEach(t),$br=r(HSe," (mBART model)"),HSe.forEach(t),kbr=i(Be),eM=n(Be,"LI",{});var USe=s(eM);gve=n(USe,"STRONG",{});var e0t=s(gve);Sbr=r(e0t,"mt5"),e0t.forEach(t),Rbr=r(USe," \u2014 "),OQ=n(USe,"A",{href:!0});var o0t=s(OQ);Pbr=r(o0t,"TFMT5ForConditionalGeneration"),o0t.forEach(t),Bbr=r(USe," (mT5 model)"),USe.forEach(t),Ibr=i(Be),oM=n(Be,"LI",{});var JSe=s(oM);hve=n(JSe,"STRONG",{});var r0t=s(hve);qbr=r(r0t,"pegasus"),r0t.forEach(t),Nbr=r(JSe," \u2014 "),VQ=n(JSe,"A",{href:!0});var t0t=s(VQ);jbr=r(t0t,"TFPegasusForConditionalGeneration"),t0t.forEach(t),Dbr=r(JSe," (Pegasus model)"),JSe.forEach(t),Gbr=i(Be),rM=n(Be,"LI",{});var YSe=s(rM);pve=n(YSe,"STRONG",{});var a0t=s(pve);Obr=r(a0t,"t5"),a0t.forEach(t),Vbr=r(YSe," \u2014 "),XQ=n(YSe,"A",{href:!0});var n0t=s(XQ);Xbr=r(n0t,"TFT5ForConditionalGeneration"),n0t.forEach(t),zbr=r(YSe," (T5 model)"),YSe.forEach(t),Be.forEach(t),Wbr=i(El),T(tM.$$.fragment,El),El.forEach(t),Ml.forEach(t),Wqe=i(f),ac=n(f,"H2",{class:!0});var Kje=s(ac);aM=n(Kje,"A",{id:!0,class:!0,href:!0});var s0t=s(aM);uve=n(s0t,"SPAN",{});var l0t=s(uve);T(v8.$$.fragment,l0t),l0t.forEach(t),s0t.forEach(t),Qbr=i(Kje),_ve=n(Kje,"SPAN",{});var i0t=s(_ve);Hbr=r(i0t,"TFAutoModelForSequenceClassification"),i0t.forEach(t),Kje.forEach(t),Qqe=i(f),tr=n(f,"DIV",{class:!0});var Cl=s(tr);T(F8.$$.fragment,Cl),Ubr=i(Cl),nc=n(Cl,"P",{});var PZ=s(nc);Jbr=r(PZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),zQ=n(PZ,"A",{href:!0});var d0t=s(zQ);Ybr=r(d0t,"from_pretrained()"),d0t.forEach(t),Kbr=r(PZ," class method or the "),WQ=n(PZ,"A",{href:!0});var c0t=s(WQ);Zbr=r(c0t,"from_config()"),c0t.forEach(t),e2r=r(PZ,` class
method.`),PZ.forEach(t),o2r=i(Cl),T8=n(Cl,"P",{});var Zje=s(T8);r2r=r(Zje,"This class cannot be instantiated directly using "),bve=n(Zje,"CODE",{});var f0t=s(bve);t2r=r(f0t,"__init__()"),f0t.forEach(t),a2r=r(Zje," (throws an error)."),Zje.forEach(t),n2r=i(Cl),Rt=n(Cl,"DIV",{class:!0});var bA=s(Rt);T(M8.$$.fragment,bA),s2r=i(bA),vve=n(bA,"P",{});var m0t=s(vve);l2r=r(m0t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),m0t.forEach(t),i2r=i(bA),sc=n(bA,"P",{});var BZ=s(sc);d2r=r(BZ,`Note:
Loading a model from its configuration file does `),Fve=n(BZ,"STRONG",{});var g0t=s(Fve);c2r=r(g0t,"not"),g0t.forEach(t),f2r=r(BZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),QQ=n(BZ,"A",{href:!0});var h0t=s(QQ);m2r=r(h0t,"from_pretrained()"),h0t.forEach(t),g2r=r(BZ," to load the model weights."),BZ.forEach(t),h2r=i(bA),T(nM.$$.fragment,bA),bA.forEach(t),p2r=i(Cl),kr=n(Cl,"DIV",{class:!0});var wl=s(kr);T(E8.$$.fragment,wl),u2r=i(wl),Tve=n(wl,"P",{});var p0t=s(Tve);_2r=r(p0t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),p0t.forEach(t),b2r=i(wl),nn=n(wl,"P",{});var vA=s(nn);v2r=r(vA,"The model class to instantiate is selected based on the "),Mve=n(vA,"CODE",{});var u0t=s(Mve);F2r=r(u0t,"model_type"),u0t.forEach(t),T2r=r(vA,` property of the config object (either
passed as an argument or loaded from `),Eve=n(vA,"CODE",{});var _0t=s(Eve);M2r=r(_0t,"pretrained_model_name_or_path"),_0t.forEach(t),E2r=r(vA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cve=n(vA,"CODE",{});var b0t=s(Cve);C2r=r(b0t,"pretrained_model_name_or_path"),b0t.forEach(t),w2r=r(vA,":"),vA.forEach(t),A2r=i(wl),ee=n(wl,"UL",{});var ae=s(ee);sM=n(ae,"LI",{});var KSe=s(sM);wve=n(KSe,"STRONG",{});var v0t=s(wve);y2r=r(v0t,"albert"),v0t.forEach(t),L2r=r(KSe," \u2014 "),HQ=n(KSe,"A",{href:!0});var F0t=s(HQ);x2r=r(F0t,"TFAlbertForSequenceClassification"),F0t.forEach(t),$2r=r(KSe," (ALBERT model)"),KSe.forEach(t),k2r=i(ae),lM=n(ae,"LI",{});var ZSe=s(lM);Ave=n(ZSe,"STRONG",{});var T0t=s(Ave);S2r=r(T0t,"bert"),T0t.forEach(t),R2r=r(ZSe," \u2014 "),UQ=n(ZSe,"A",{href:!0});var M0t=s(UQ);P2r=r(M0t,"TFBertForSequenceClassification"),M0t.forEach(t),B2r=r(ZSe," (BERT model)"),ZSe.forEach(t),I2r=i(ae),iM=n(ae,"LI",{});var eRe=s(iM);yve=n(eRe,"STRONG",{});var E0t=s(yve);q2r=r(E0t,"camembert"),E0t.forEach(t),N2r=r(eRe," \u2014 "),JQ=n(eRe,"A",{href:!0});var C0t=s(JQ);j2r=r(C0t,"TFCamembertForSequenceClassification"),C0t.forEach(t),D2r=r(eRe," (CamemBERT model)"),eRe.forEach(t),G2r=i(ae),dM=n(ae,"LI",{});var oRe=s(dM);Lve=n(oRe,"STRONG",{});var w0t=s(Lve);O2r=r(w0t,"convbert"),w0t.forEach(t),V2r=r(oRe," \u2014 "),YQ=n(oRe,"A",{href:!0});var A0t=s(YQ);X2r=r(A0t,"TFConvBertForSequenceClassification"),A0t.forEach(t),z2r=r(oRe," (ConvBERT model)"),oRe.forEach(t),W2r=i(ae),cM=n(ae,"LI",{});var rRe=s(cM);xve=n(rRe,"STRONG",{});var y0t=s(xve);Q2r=r(y0t,"ctrl"),y0t.forEach(t),H2r=r(rRe," \u2014 "),KQ=n(rRe,"A",{href:!0});var L0t=s(KQ);U2r=r(L0t,"TFCTRLForSequenceClassification"),L0t.forEach(t),J2r=r(rRe," (CTRL model)"),rRe.forEach(t),Y2r=i(ae),fM=n(ae,"LI",{});var tRe=s(fM);$ve=n(tRe,"STRONG",{});var x0t=s($ve);K2r=r(x0t,"deberta"),x0t.forEach(t),Z2r=r(tRe," \u2014 "),ZQ=n(tRe,"A",{href:!0});var $0t=s(ZQ);evr=r($0t,"TFDebertaForSequenceClassification"),$0t.forEach(t),ovr=r(tRe," (DeBERTa model)"),tRe.forEach(t),rvr=i(ae),mM=n(ae,"LI",{});var aRe=s(mM);kve=n(aRe,"STRONG",{});var k0t=s(kve);tvr=r(k0t,"deberta-v2"),k0t.forEach(t),avr=r(aRe," \u2014 "),eH=n(aRe,"A",{href:!0});var S0t=s(eH);nvr=r(S0t,"TFDebertaV2ForSequenceClassification"),S0t.forEach(t),svr=r(aRe," (DeBERTa-v2 model)"),aRe.forEach(t),lvr=i(ae),gM=n(ae,"LI",{});var nRe=s(gM);Sve=n(nRe,"STRONG",{});var R0t=s(Sve);ivr=r(R0t,"distilbert"),R0t.forEach(t),dvr=r(nRe," \u2014 "),oH=n(nRe,"A",{href:!0});var P0t=s(oH);cvr=r(P0t,"TFDistilBertForSequenceClassification"),P0t.forEach(t),fvr=r(nRe," (DistilBERT model)"),nRe.forEach(t),mvr=i(ae),hM=n(ae,"LI",{});var sRe=s(hM);Rve=n(sRe,"STRONG",{});var B0t=s(Rve);gvr=r(B0t,"electra"),B0t.forEach(t),hvr=r(sRe," \u2014 "),rH=n(sRe,"A",{href:!0});var I0t=s(rH);pvr=r(I0t,"TFElectraForSequenceClassification"),I0t.forEach(t),uvr=r(sRe," (ELECTRA model)"),sRe.forEach(t),_vr=i(ae),pM=n(ae,"LI",{});var lRe=s(pM);Pve=n(lRe,"STRONG",{});var q0t=s(Pve);bvr=r(q0t,"flaubert"),q0t.forEach(t),vvr=r(lRe," \u2014 "),tH=n(lRe,"A",{href:!0});var N0t=s(tH);Fvr=r(N0t,"TFFlaubertForSequenceClassification"),N0t.forEach(t),Tvr=r(lRe," (FlauBERT model)"),lRe.forEach(t),Mvr=i(ae),uM=n(ae,"LI",{});var iRe=s(uM);Bve=n(iRe,"STRONG",{});var j0t=s(Bve);Evr=r(j0t,"funnel"),j0t.forEach(t),Cvr=r(iRe," \u2014 "),aH=n(iRe,"A",{href:!0});var D0t=s(aH);wvr=r(D0t,"TFFunnelForSequenceClassification"),D0t.forEach(t),Avr=r(iRe," (Funnel Transformer model)"),iRe.forEach(t),yvr=i(ae),_M=n(ae,"LI",{});var dRe=s(_M);Ive=n(dRe,"STRONG",{});var G0t=s(Ive);Lvr=r(G0t,"gpt2"),G0t.forEach(t),xvr=r(dRe," \u2014 "),nH=n(dRe,"A",{href:!0});var O0t=s(nH);$vr=r(O0t,"TFGPT2ForSequenceClassification"),O0t.forEach(t),kvr=r(dRe," (OpenAI GPT-2 model)"),dRe.forEach(t),Svr=i(ae),bM=n(ae,"LI",{});var cRe=s(bM);qve=n(cRe,"STRONG",{});var V0t=s(qve);Rvr=r(V0t,"gptj"),V0t.forEach(t),Pvr=r(cRe," \u2014 "),sH=n(cRe,"A",{href:!0});var X0t=s(sH);Bvr=r(X0t,"TFGPTJForSequenceClassification"),X0t.forEach(t),Ivr=r(cRe," (GPT-J model)"),cRe.forEach(t),qvr=i(ae),vM=n(ae,"LI",{});var fRe=s(vM);Nve=n(fRe,"STRONG",{});var z0t=s(Nve);Nvr=r(z0t,"layoutlm"),z0t.forEach(t),jvr=r(fRe," \u2014 "),lH=n(fRe,"A",{href:!0});var W0t=s(lH);Dvr=r(W0t,"TFLayoutLMForSequenceClassification"),W0t.forEach(t),Gvr=r(fRe," (LayoutLM model)"),fRe.forEach(t),Ovr=i(ae),FM=n(ae,"LI",{});var mRe=s(FM);jve=n(mRe,"STRONG",{});var Q0t=s(jve);Vvr=r(Q0t,"longformer"),Q0t.forEach(t),Xvr=r(mRe," \u2014 "),iH=n(mRe,"A",{href:!0});var H0t=s(iH);zvr=r(H0t,"TFLongformerForSequenceClassification"),H0t.forEach(t),Wvr=r(mRe," (Longformer model)"),mRe.forEach(t),Qvr=i(ae),TM=n(ae,"LI",{});var gRe=s(TM);Dve=n(gRe,"STRONG",{});var U0t=s(Dve);Hvr=r(U0t,"mobilebert"),U0t.forEach(t),Uvr=r(gRe," \u2014 "),dH=n(gRe,"A",{href:!0});var J0t=s(dH);Jvr=r(J0t,"TFMobileBertForSequenceClassification"),J0t.forEach(t),Yvr=r(gRe," (MobileBERT model)"),gRe.forEach(t),Kvr=i(ae),MM=n(ae,"LI",{});var hRe=s(MM);Gve=n(hRe,"STRONG",{});var Y0t=s(Gve);Zvr=r(Y0t,"mpnet"),Y0t.forEach(t),e3r=r(hRe," \u2014 "),cH=n(hRe,"A",{href:!0});var K0t=s(cH);o3r=r(K0t,"TFMPNetForSequenceClassification"),K0t.forEach(t),r3r=r(hRe," (MPNet model)"),hRe.forEach(t),t3r=i(ae),EM=n(ae,"LI",{});var pRe=s(EM);Ove=n(pRe,"STRONG",{});var Z0t=s(Ove);a3r=r(Z0t,"openai-gpt"),Z0t.forEach(t),n3r=r(pRe," \u2014 "),fH=n(pRe,"A",{href:!0});var eTt=s(fH);s3r=r(eTt,"TFOpenAIGPTForSequenceClassification"),eTt.forEach(t),l3r=r(pRe," (OpenAI GPT model)"),pRe.forEach(t),i3r=i(ae),CM=n(ae,"LI",{});var uRe=s(CM);Vve=n(uRe,"STRONG",{});var oTt=s(Vve);d3r=r(oTt,"rembert"),oTt.forEach(t),c3r=r(uRe," \u2014 "),mH=n(uRe,"A",{href:!0});var rTt=s(mH);f3r=r(rTt,"TFRemBertForSequenceClassification"),rTt.forEach(t),m3r=r(uRe," (RemBERT model)"),uRe.forEach(t),g3r=i(ae),wM=n(ae,"LI",{});var _Re=s(wM);Xve=n(_Re,"STRONG",{});var tTt=s(Xve);h3r=r(tTt,"roberta"),tTt.forEach(t),p3r=r(_Re," \u2014 "),gH=n(_Re,"A",{href:!0});var aTt=s(gH);u3r=r(aTt,"TFRobertaForSequenceClassification"),aTt.forEach(t),_3r=r(_Re," (RoBERTa model)"),_Re.forEach(t),b3r=i(ae),AM=n(ae,"LI",{});var bRe=s(AM);zve=n(bRe,"STRONG",{});var nTt=s(zve);v3r=r(nTt,"roformer"),nTt.forEach(t),F3r=r(bRe," \u2014 "),hH=n(bRe,"A",{href:!0});var sTt=s(hH);T3r=r(sTt,"TFRoFormerForSequenceClassification"),sTt.forEach(t),M3r=r(bRe," (RoFormer model)"),bRe.forEach(t),E3r=i(ae),yM=n(ae,"LI",{});var vRe=s(yM);Wve=n(vRe,"STRONG",{});var lTt=s(Wve);C3r=r(lTt,"tapas"),lTt.forEach(t),w3r=r(vRe," \u2014 "),pH=n(vRe,"A",{href:!0});var iTt=s(pH);A3r=r(iTt,"TFTapasForSequenceClassification"),iTt.forEach(t),y3r=r(vRe," (TAPAS model)"),vRe.forEach(t),L3r=i(ae),LM=n(ae,"LI",{});var FRe=s(LM);Qve=n(FRe,"STRONG",{});var dTt=s(Qve);x3r=r(dTt,"transfo-xl"),dTt.forEach(t),$3r=r(FRe," \u2014 "),uH=n(FRe,"A",{href:!0});var cTt=s(uH);k3r=r(cTt,"TFTransfoXLForSequenceClassification"),cTt.forEach(t),S3r=r(FRe," (Transformer-XL model)"),FRe.forEach(t),R3r=i(ae),xM=n(ae,"LI",{});var TRe=s(xM);Hve=n(TRe,"STRONG",{});var fTt=s(Hve);P3r=r(fTt,"xlm"),fTt.forEach(t),B3r=r(TRe," \u2014 "),_H=n(TRe,"A",{href:!0});var mTt=s(_H);I3r=r(mTt,"TFXLMForSequenceClassification"),mTt.forEach(t),q3r=r(TRe," (XLM model)"),TRe.forEach(t),N3r=i(ae),$M=n(ae,"LI",{});var MRe=s($M);Uve=n(MRe,"STRONG",{});var gTt=s(Uve);j3r=r(gTt,"xlm-roberta"),gTt.forEach(t),D3r=r(MRe," \u2014 "),bH=n(MRe,"A",{href:!0});var hTt=s(bH);G3r=r(hTt,"TFXLMRobertaForSequenceClassification"),hTt.forEach(t),O3r=r(MRe," (XLM-RoBERTa model)"),MRe.forEach(t),V3r=i(ae),kM=n(ae,"LI",{});var ERe=s(kM);Jve=n(ERe,"STRONG",{});var pTt=s(Jve);X3r=r(pTt,"xlnet"),pTt.forEach(t),z3r=r(ERe," \u2014 "),vH=n(ERe,"A",{href:!0});var uTt=s(vH);W3r=r(uTt,"TFXLNetForSequenceClassification"),uTt.forEach(t),Q3r=r(ERe," (XLNet model)"),ERe.forEach(t),ae.forEach(t),H3r=i(wl),T(SM.$$.fragment,wl),wl.forEach(t),Cl.forEach(t),Hqe=i(f),lc=n(f,"H2",{class:!0});var eDe=s(lc);RM=n(eDe,"A",{id:!0,class:!0,href:!0});var _Tt=s(RM);Yve=n(_Tt,"SPAN",{});var bTt=s(Yve);T(C8.$$.fragment,bTt),bTt.forEach(t),_Tt.forEach(t),U3r=i(eDe),Kve=n(eDe,"SPAN",{});var vTt=s(Kve);J3r=r(vTt,"TFAutoModelForMultipleChoice"),vTt.forEach(t),eDe.forEach(t),Uqe=i(f),ar=n(f,"DIV",{class:!0});var Al=s(ar);T(w8.$$.fragment,Al),Y3r=i(Al),ic=n(Al,"P",{});var IZ=s(ic);K3r=r(IZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),FH=n(IZ,"A",{href:!0});var FTt=s(FH);Z3r=r(FTt,"from_pretrained()"),FTt.forEach(t),eFr=r(IZ," class method or the "),TH=n(IZ,"A",{href:!0});var TTt=s(TH);oFr=r(TTt,"from_config()"),TTt.forEach(t),rFr=r(IZ,` class
method.`),IZ.forEach(t),tFr=i(Al),A8=n(Al,"P",{});var oDe=s(A8);aFr=r(oDe,"This class cannot be instantiated directly using "),Zve=n(oDe,"CODE",{});var MTt=s(Zve);nFr=r(MTt,"__init__()"),MTt.forEach(t),sFr=r(oDe," (throws an error)."),oDe.forEach(t),lFr=i(Al),Pt=n(Al,"DIV",{class:!0});var FA=s(Pt);T(y8.$$.fragment,FA),iFr=i(FA),e3e=n(FA,"P",{});var ETt=s(e3e);dFr=r(ETt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),ETt.forEach(t),cFr=i(FA),dc=n(FA,"P",{});var qZ=s(dc);fFr=r(qZ,`Note:
Loading a model from its configuration file does `),o3e=n(qZ,"STRONG",{});var CTt=s(o3e);mFr=r(CTt,"not"),CTt.forEach(t),gFr=r(qZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),MH=n(qZ,"A",{href:!0});var wTt=s(MH);hFr=r(wTt,"from_pretrained()"),wTt.forEach(t),pFr=r(qZ," to load the model weights."),qZ.forEach(t),uFr=i(FA),T(PM.$$.fragment,FA),FA.forEach(t),_Fr=i(Al),Sr=n(Al,"DIV",{class:!0});var yl=s(Sr);T(L8.$$.fragment,yl),bFr=i(yl),r3e=n(yl,"P",{});var ATt=s(r3e);vFr=r(ATt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),ATt.forEach(t),FFr=i(yl),sn=n(yl,"P",{});var TA=s(sn);TFr=r(TA,"The model class to instantiate is selected based on the "),t3e=n(TA,"CODE",{});var yTt=s(t3e);MFr=r(yTt,"model_type"),yTt.forEach(t),EFr=r(TA,` property of the config object (either
passed as an argument or loaded from `),a3e=n(TA,"CODE",{});var LTt=s(a3e);CFr=r(LTt,"pretrained_model_name_or_path"),LTt.forEach(t),wFr=r(TA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n3e=n(TA,"CODE",{});var xTt=s(n3e);AFr=r(xTt,"pretrained_model_name_or_path"),xTt.forEach(t),yFr=r(TA,":"),TA.forEach(t),LFr=i(yl),he=n(yl,"UL",{});var _e=s(he);BM=n(_e,"LI",{});var CRe=s(BM);s3e=n(CRe,"STRONG",{});var $Tt=s(s3e);xFr=r($Tt,"albert"),$Tt.forEach(t),$Fr=r(CRe," \u2014 "),EH=n(CRe,"A",{href:!0});var kTt=s(EH);kFr=r(kTt,"TFAlbertForMultipleChoice"),kTt.forEach(t),SFr=r(CRe," (ALBERT model)"),CRe.forEach(t),RFr=i(_e),IM=n(_e,"LI",{});var wRe=s(IM);l3e=n(wRe,"STRONG",{});var STt=s(l3e);PFr=r(STt,"bert"),STt.forEach(t),BFr=r(wRe," \u2014 "),CH=n(wRe,"A",{href:!0});var RTt=s(CH);IFr=r(RTt,"TFBertForMultipleChoice"),RTt.forEach(t),qFr=r(wRe," (BERT model)"),wRe.forEach(t),NFr=i(_e),qM=n(_e,"LI",{});var ARe=s(qM);i3e=n(ARe,"STRONG",{});var PTt=s(i3e);jFr=r(PTt,"camembert"),PTt.forEach(t),DFr=r(ARe," \u2014 "),wH=n(ARe,"A",{href:!0});var BTt=s(wH);GFr=r(BTt,"TFCamembertForMultipleChoice"),BTt.forEach(t),OFr=r(ARe," (CamemBERT model)"),ARe.forEach(t),VFr=i(_e),NM=n(_e,"LI",{});var yRe=s(NM);d3e=n(yRe,"STRONG",{});var ITt=s(d3e);XFr=r(ITt,"convbert"),ITt.forEach(t),zFr=r(yRe," \u2014 "),AH=n(yRe,"A",{href:!0});var qTt=s(AH);WFr=r(qTt,"TFConvBertForMultipleChoice"),qTt.forEach(t),QFr=r(yRe," (ConvBERT model)"),yRe.forEach(t),HFr=i(_e),jM=n(_e,"LI",{});var LRe=s(jM);c3e=n(LRe,"STRONG",{});var NTt=s(c3e);UFr=r(NTt,"distilbert"),NTt.forEach(t),JFr=r(LRe," \u2014 "),yH=n(LRe,"A",{href:!0});var jTt=s(yH);YFr=r(jTt,"TFDistilBertForMultipleChoice"),jTt.forEach(t),KFr=r(LRe," (DistilBERT model)"),LRe.forEach(t),ZFr=i(_e),DM=n(_e,"LI",{});var xRe=s(DM);f3e=n(xRe,"STRONG",{});var DTt=s(f3e);e0r=r(DTt,"electra"),DTt.forEach(t),o0r=r(xRe," \u2014 "),LH=n(xRe,"A",{href:!0});var GTt=s(LH);r0r=r(GTt,"TFElectraForMultipleChoice"),GTt.forEach(t),t0r=r(xRe," (ELECTRA model)"),xRe.forEach(t),a0r=i(_e),GM=n(_e,"LI",{});var $Re=s(GM);m3e=n($Re,"STRONG",{});var OTt=s(m3e);n0r=r(OTt,"flaubert"),OTt.forEach(t),s0r=r($Re," \u2014 "),xH=n($Re,"A",{href:!0});var VTt=s(xH);l0r=r(VTt,"TFFlaubertForMultipleChoice"),VTt.forEach(t),i0r=r($Re," (FlauBERT model)"),$Re.forEach(t),d0r=i(_e),OM=n(_e,"LI",{});var kRe=s(OM);g3e=n(kRe,"STRONG",{});var XTt=s(g3e);c0r=r(XTt,"funnel"),XTt.forEach(t),f0r=r(kRe," \u2014 "),$H=n(kRe,"A",{href:!0});var zTt=s($H);m0r=r(zTt,"TFFunnelForMultipleChoice"),zTt.forEach(t),g0r=r(kRe," (Funnel Transformer model)"),kRe.forEach(t),h0r=i(_e),VM=n(_e,"LI",{});var SRe=s(VM);h3e=n(SRe,"STRONG",{});var WTt=s(h3e);p0r=r(WTt,"longformer"),WTt.forEach(t),u0r=r(SRe," \u2014 "),kH=n(SRe,"A",{href:!0});var QTt=s(kH);_0r=r(QTt,"TFLongformerForMultipleChoice"),QTt.forEach(t),b0r=r(SRe," (Longformer model)"),SRe.forEach(t),v0r=i(_e),XM=n(_e,"LI",{});var RRe=s(XM);p3e=n(RRe,"STRONG",{});var HTt=s(p3e);F0r=r(HTt,"mobilebert"),HTt.forEach(t),T0r=r(RRe," \u2014 "),SH=n(RRe,"A",{href:!0});var UTt=s(SH);M0r=r(UTt,"TFMobileBertForMultipleChoice"),UTt.forEach(t),E0r=r(RRe," (MobileBERT model)"),RRe.forEach(t),C0r=i(_e),zM=n(_e,"LI",{});var PRe=s(zM);u3e=n(PRe,"STRONG",{});var JTt=s(u3e);w0r=r(JTt,"mpnet"),JTt.forEach(t),A0r=r(PRe," \u2014 "),RH=n(PRe,"A",{href:!0});var YTt=s(RH);y0r=r(YTt,"TFMPNetForMultipleChoice"),YTt.forEach(t),L0r=r(PRe," (MPNet model)"),PRe.forEach(t),x0r=i(_e),WM=n(_e,"LI",{});var BRe=s(WM);_3e=n(BRe,"STRONG",{});var KTt=s(_3e);$0r=r(KTt,"rembert"),KTt.forEach(t),k0r=r(BRe," \u2014 "),PH=n(BRe,"A",{href:!0});var ZTt=s(PH);S0r=r(ZTt,"TFRemBertForMultipleChoice"),ZTt.forEach(t),R0r=r(BRe," (RemBERT model)"),BRe.forEach(t),P0r=i(_e),QM=n(_e,"LI",{});var IRe=s(QM);b3e=n(IRe,"STRONG",{});var e7t=s(b3e);B0r=r(e7t,"roberta"),e7t.forEach(t),I0r=r(IRe," \u2014 "),BH=n(IRe,"A",{href:!0});var o7t=s(BH);q0r=r(o7t,"TFRobertaForMultipleChoice"),o7t.forEach(t),N0r=r(IRe," (RoBERTa model)"),IRe.forEach(t),j0r=i(_e),HM=n(_e,"LI",{});var qRe=s(HM);v3e=n(qRe,"STRONG",{});var r7t=s(v3e);D0r=r(r7t,"roformer"),r7t.forEach(t),G0r=r(qRe," \u2014 "),IH=n(qRe,"A",{href:!0});var t7t=s(IH);O0r=r(t7t,"TFRoFormerForMultipleChoice"),t7t.forEach(t),V0r=r(qRe," (RoFormer model)"),qRe.forEach(t),X0r=i(_e),UM=n(_e,"LI",{});var NRe=s(UM);F3e=n(NRe,"STRONG",{});var a7t=s(F3e);z0r=r(a7t,"xlm"),a7t.forEach(t),W0r=r(NRe," \u2014 "),qH=n(NRe,"A",{href:!0});var n7t=s(qH);Q0r=r(n7t,"TFXLMForMultipleChoice"),n7t.forEach(t),H0r=r(NRe," (XLM model)"),NRe.forEach(t),U0r=i(_e),JM=n(_e,"LI",{});var jRe=s(JM);T3e=n(jRe,"STRONG",{});var s7t=s(T3e);J0r=r(s7t,"xlm-roberta"),s7t.forEach(t),Y0r=r(jRe," \u2014 "),NH=n(jRe,"A",{href:!0});var l7t=s(NH);K0r=r(l7t,"TFXLMRobertaForMultipleChoice"),l7t.forEach(t),Z0r=r(jRe," (XLM-RoBERTa model)"),jRe.forEach(t),eTr=i(_e),YM=n(_e,"LI",{});var DRe=s(YM);M3e=n(DRe,"STRONG",{});var i7t=s(M3e);oTr=r(i7t,"xlnet"),i7t.forEach(t),rTr=r(DRe," \u2014 "),jH=n(DRe,"A",{href:!0});var d7t=s(jH);tTr=r(d7t,"TFXLNetForMultipleChoice"),d7t.forEach(t),aTr=r(DRe," (XLNet model)"),DRe.forEach(t),_e.forEach(t),nTr=i(yl),T(KM.$$.fragment,yl),yl.forEach(t),Al.forEach(t),Jqe=i(f),cc=n(f,"H2",{class:!0});var rDe=s(cc);ZM=n(rDe,"A",{id:!0,class:!0,href:!0});var c7t=s(ZM);E3e=n(c7t,"SPAN",{});var f7t=s(E3e);T(x8.$$.fragment,f7t),f7t.forEach(t),c7t.forEach(t),sTr=i(rDe),C3e=n(rDe,"SPAN",{});var m7t=s(C3e);lTr=r(m7t,"TFAutoModelForNextSentencePrediction"),m7t.forEach(t),rDe.forEach(t),Yqe=i(f),nr=n(f,"DIV",{class:!0});var Ll=s(nr);T($8.$$.fragment,Ll),iTr=i(Ll),fc=n(Ll,"P",{});var NZ=s(fc);dTr=r(NZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),DH=n(NZ,"A",{href:!0});var g7t=s(DH);cTr=r(g7t,"from_pretrained()"),g7t.forEach(t),fTr=r(NZ," class method or the "),GH=n(NZ,"A",{href:!0});var h7t=s(GH);mTr=r(h7t,"from_config()"),h7t.forEach(t),gTr=r(NZ,` class
method.`),NZ.forEach(t),hTr=i(Ll),k8=n(Ll,"P",{});var tDe=s(k8);pTr=r(tDe,"This class cannot be instantiated directly using "),w3e=n(tDe,"CODE",{});var p7t=s(w3e);uTr=r(p7t,"__init__()"),p7t.forEach(t),_Tr=r(tDe," (throws an error)."),tDe.forEach(t),bTr=i(Ll),Bt=n(Ll,"DIV",{class:!0});var MA=s(Bt);T(S8.$$.fragment,MA),vTr=i(MA),A3e=n(MA,"P",{});var u7t=s(A3e);FTr=r(u7t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),u7t.forEach(t),TTr=i(MA),mc=n(MA,"P",{});var jZ=s(mc);MTr=r(jZ,`Note:
Loading a model from its configuration file does `),y3e=n(jZ,"STRONG",{});var _7t=s(y3e);ETr=r(_7t,"not"),_7t.forEach(t),CTr=r(jZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),OH=n(jZ,"A",{href:!0});var b7t=s(OH);wTr=r(b7t,"from_pretrained()"),b7t.forEach(t),ATr=r(jZ," to load the model weights."),jZ.forEach(t),yTr=i(MA),T(e4.$$.fragment,MA),MA.forEach(t),LTr=i(Ll),Rr=n(Ll,"DIV",{class:!0});var xl=s(Rr);T(R8.$$.fragment,xl),xTr=i(xl),L3e=n(xl,"P",{});var v7t=s(L3e);$Tr=r(v7t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),v7t.forEach(t),kTr=i(xl),ln=n(xl,"P",{});var EA=s(ln);STr=r(EA,"The model class to instantiate is selected based on the "),x3e=n(EA,"CODE",{});var F7t=s(x3e);RTr=r(F7t,"model_type"),F7t.forEach(t),PTr=r(EA,` property of the config object (either
passed as an argument or loaded from `),$3e=n(EA,"CODE",{});var T7t=s($3e);BTr=r(T7t,"pretrained_model_name_or_path"),T7t.forEach(t),ITr=r(EA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k3e=n(EA,"CODE",{});var M7t=s(k3e);qTr=r(M7t,"pretrained_model_name_or_path"),M7t.forEach(t),NTr=r(EA,":"),EA.forEach(t),jTr=i(xl),P8=n(xl,"UL",{});var aDe=s(P8);o4=n(aDe,"LI",{});var GRe=s(o4);S3e=n(GRe,"STRONG",{});var E7t=s(S3e);DTr=r(E7t,"bert"),E7t.forEach(t),GTr=r(GRe," \u2014 "),VH=n(GRe,"A",{href:!0});var C7t=s(VH);OTr=r(C7t,"TFBertForNextSentencePrediction"),C7t.forEach(t),VTr=r(GRe," (BERT model)"),GRe.forEach(t),XTr=i(aDe),r4=n(aDe,"LI",{});var ORe=s(r4);R3e=n(ORe,"STRONG",{});var w7t=s(R3e);zTr=r(w7t,"mobilebert"),w7t.forEach(t),WTr=r(ORe," \u2014 "),XH=n(ORe,"A",{href:!0});var A7t=s(XH);QTr=r(A7t,"TFMobileBertForNextSentencePrediction"),A7t.forEach(t),HTr=r(ORe," (MobileBERT model)"),ORe.forEach(t),aDe.forEach(t),UTr=i(xl),T(t4.$$.fragment,xl),xl.forEach(t),Ll.forEach(t),Kqe=i(f),gc=n(f,"H2",{class:!0});var nDe=s(gc);a4=n(nDe,"A",{id:!0,class:!0,href:!0});var y7t=s(a4);P3e=n(y7t,"SPAN",{});var L7t=s(P3e);T(B8.$$.fragment,L7t),L7t.forEach(t),y7t.forEach(t),JTr=i(nDe),B3e=n(nDe,"SPAN",{});var x7t=s(B3e);YTr=r(x7t,"TFAutoModelForTableQuestionAnswering"),x7t.forEach(t),nDe.forEach(t),Zqe=i(f),sr=n(f,"DIV",{class:!0});var $l=s(sr);T(I8.$$.fragment,$l),KTr=i($l),hc=n($l,"P",{});var DZ=s(hc);ZTr=r(DZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),zH=n(DZ,"A",{href:!0});var $7t=s(zH);e7r=r($7t,"from_pretrained()"),$7t.forEach(t),o7r=r(DZ," class method or the "),WH=n(DZ,"A",{href:!0});var k7t=s(WH);r7r=r(k7t,"from_config()"),k7t.forEach(t),t7r=r(DZ,` class
method.`),DZ.forEach(t),a7r=i($l),q8=n($l,"P",{});var sDe=s(q8);n7r=r(sDe,"This class cannot be instantiated directly using "),I3e=n(sDe,"CODE",{});var S7t=s(I3e);s7r=r(S7t,"__init__()"),S7t.forEach(t),l7r=r(sDe," (throws an error)."),sDe.forEach(t),i7r=i($l),It=n($l,"DIV",{class:!0});var CA=s(It);T(N8.$$.fragment,CA),d7r=i(CA),q3e=n(CA,"P",{});var R7t=s(q3e);c7r=r(R7t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),R7t.forEach(t),f7r=i(CA),pc=n(CA,"P",{});var GZ=s(pc);m7r=r(GZ,`Note:
Loading a model from its configuration file does `),N3e=n(GZ,"STRONG",{});var P7t=s(N3e);g7r=r(P7t,"not"),P7t.forEach(t),h7r=r(GZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),QH=n(GZ,"A",{href:!0});var B7t=s(QH);p7r=r(B7t,"from_pretrained()"),B7t.forEach(t),u7r=r(GZ," to load the model weights."),GZ.forEach(t),_7r=i(CA),T(n4.$$.fragment,CA),CA.forEach(t),b7r=i($l),Pr=n($l,"DIV",{class:!0});var kl=s(Pr);T(j8.$$.fragment,kl),v7r=i(kl),j3e=n(kl,"P",{});var I7t=s(j3e);F7r=r(I7t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),I7t.forEach(t),T7r=i(kl),dn=n(kl,"P",{});var wA=s(dn);M7r=r(wA,"The model class to instantiate is selected based on the "),D3e=n(wA,"CODE",{});var q7t=s(D3e);E7r=r(q7t,"model_type"),q7t.forEach(t),C7r=r(wA,` property of the config object (either
passed as an argument or loaded from `),G3e=n(wA,"CODE",{});var N7t=s(G3e);w7r=r(N7t,"pretrained_model_name_or_path"),N7t.forEach(t),A7r=r(wA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O3e=n(wA,"CODE",{});var j7t=s(O3e);y7r=r(j7t,"pretrained_model_name_or_path"),j7t.forEach(t),L7r=r(wA,":"),wA.forEach(t),x7r=i(kl),V3e=n(kl,"UL",{});var D7t=s(V3e);s4=n(D7t,"LI",{});var VRe=s(s4);X3e=n(VRe,"STRONG",{});var G7t=s(X3e);$7r=r(G7t,"tapas"),G7t.forEach(t),k7r=r(VRe," \u2014 "),HH=n(VRe,"A",{href:!0});var O7t=s(HH);S7r=r(O7t,"TFTapasForQuestionAnswering"),O7t.forEach(t),R7r=r(VRe," (TAPAS model)"),VRe.forEach(t),D7t.forEach(t),P7r=i(kl),T(l4.$$.fragment,kl),kl.forEach(t),$l.forEach(t),eNe=i(f),uc=n(f,"H2",{class:!0});var lDe=s(uc);i4=n(lDe,"A",{id:!0,class:!0,href:!0});var V7t=s(i4);z3e=n(V7t,"SPAN",{});var X7t=s(z3e);T(D8.$$.fragment,X7t),X7t.forEach(t),V7t.forEach(t),B7r=i(lDe),W3e=n(lDe,"SPAN",{});var z7t=s(W3e);I7r=r(z7t,"TFAutoModelForTokenClassification"),z7t.forEach(t),lDe.forEach(t),oNe=i(f),lr=n(f,"DIV",{class:!0});var Sl=s(lr);T(G8.$$.fragment,Sl),q7r=i(Sl),_c=n(Sl,"P",{});var OZ=s(_c);N7r=r(OZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),UH=n(OZ,"A",{href:!0});var W7t=s(UH);j7r=r(W7t,"from_pretrained()"),W7t.forEach(t),D7r=r(OZ," class method or the "),JH=n(OZ,"A",{href:!0});var Q7t=s(JH);G7r=r(Q7t,"from_config()"),Q7t.forEach(t),O7r=r(OZ,` class
method.`),OZ.forEach(t),V7r=i(Sl),O8=n(Sl,"P",{});var iDe=s(O8);X7r=r(iDe,"This class cannot be instantiated directly using "),Q3e=n(iDe,"CODE",{});var H7t=s(Q3e);z7r=r(H7t,"__init__()"),H7t.forEach(t),W7r=r(iDe," (throws an error)."),iDe.forEach(t),Q7r=i(Sl),qt=n(Sl,"DIV",{class:!0});var AA=s(qt);T(V8.$$.fragment,AA),H7r=i(AA),H3e=n(AA,"P",{});var U7t=s(H3e);U7r=r(U7t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),U7t.forEach(t),J7r=i(AA),bc=n(AA,"P",{});var VZ=s(bc);Y7r=r(VZ,`Note:
Loading a model from its configuration file does `),U3e=n(VZ,"STRONG",{});var J7t=s(U3e);K7r=r(J7t,"not"),J7t.forEach(t),Z7r=r(VZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),YH=n(VZ,"A",{href:!0});var Y7t=s(YH);eMr=r(Y7t,"from_pretrained()"),Y7t.forEach(t),oMr=r(VZ," to load the model weights."),VZ.forEach(t),rMr=i(AA),T(d4.$$.fragment,AA),AA.forEach(t),tMr=i(Sl),Br=n(Sl,"DIV",{class:!0});var Rl=s(Br);T(X8.$$.fragment,Rl),aMr=i(Rl),J3e=n(Rl,"P",{});var K7t=s(J3e);nMr=r(K7t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),K7t.forEach(t),sMr=i(Rl),cn=n(Rl,"P",{});var yA=s(cn);lMr=r(yA,"The model class to instantiate is selected based on the "),Y3e=n(yA,"CODE",{});var Z7t=s(Y3e);iMr=r(Z7t,"model_type"),Z7t.forEach(t),dMr=r(yA,` property of the config object (either
passed as an argument or loaded from `),K3e=n(yA,"CODE",{});var eMt=s(K3e);cMr=r(eMt,"pretrained_model_name_or_path"),eMt.forEach(t),fMr=r(yA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z3e=n(yA,"CODE",{});var oMt=s(Z3e);mMr=r(oMt,"pretrained_model_name_or_path"),oMt.forEach(t),gMr=r(yA,":"),yA.forEach(t),hMr=i(Rl),de=n(Rl,"UL",{});var me=s(de);c4=n(me,"LI",{});var XRe=s(c4);eFe=n(XRe,"STRONG",{});var rMt=s(eFe);pMr=r(rMt,"albert"),rMt.forEach(t),uMr=r(XRe," \u2014 "),KH=n(XRe,"A",{href:!0});var tMt=s(KH);_Mr=r(tMt,"TFAlbertForTokenClassification"),tMt.forEach(t),bMr=r(XRe," (ALBERT model)"),XRe.forEach(t),vMr=i(me),f4=n(me,"LI",{});var zRe=s(f4);oFe=n(zRe,"STRONG",{});var aMt=s(oFe);FMr=r(aMt,"bert"),aMt.forEach(t),TMr=r(zRe," \u2014 "),ZH=n(zRe,"A",{href:!0});var nMt=s(ZH);MMr=r(nMt,"TFBertForTokenClassification"),nMt.forEach(t),EMr=r(zRe," (BERT model)"),zRe.forEach(t),CMr=i(me),m4=n(me,"LI",{});var WRe=s(m4);rFe=n(WRe,"STRONG",{});var sMt=s(rFe);wMr=r(sMt,"camembert"),sMt.forEach(t),AMr=r(WRe," \u2014 "),eU=n(WRe,"A",{href:!0});var lMt=s(eU);yMr=r(lMt,"TFCamembertForTokenClassification"),lMt.forEach(t),LMr=r(WRe," (CamemBERT model)"),WRe.forEach(t),xMr=i(me),g4=n(me,"LI",{});var QRe=s(g4);tFe=n(QRe,"STRONG",{});var iMt=s(tFe);$Mr=r(iMt,"convbert"),iMt.forEach(t),kMr=r(QRe," \u2014 "),oU=n(QRe,"A",{href:!0});var dMt=s(oU);SMr=r(dMt,"TFConvBertForTokenClassification"),dMt.forEach(t),RMr=r(QRe," (ConvBERT model)"),QRe.forEach(t),PMr=i(me),h4=n(me,"LI",{});var HRe=s(h4);aFe=n(HRe,"STRONG",{});var cMt=s(aFe);BMr=r(cMt,"deberta"),cMt.forEach(t),IMr=r(HRe," \u2014 "),rU=n(HRe,"A",{href:!0});var fMt=s(rU);qMr=r(fMt,"TFDebertaForTokenClassification"),fMt.forEach(t),NMr=r(HRe," (DeBERTa model)"),HRe.forEach(t),jMr=i(me),p4=n(me,"LI",{});var URe=s(p4);nFe=n(URe,"STRONG",{});var mMt=s(nFe);DMr=r(mMt,"deberta-v2"),mMt.forEach(t),GMr=r(URe," \u2014 "),tU=n(URe,"A",{href:!0});var gMt=s(tU);OMr=r(gMt,"TFDebertaV2ForTokenClassification"),gMt.forEach(t),VMr=r(URe," (DeBERTa-v2 model)"),URe.forEach(t),XMr=i(me),u4=n(me,"LI",{});var JRe=s(u4);sFe=n(JRe,"STRONG",{});var hMt=s(sFe);zMr=r(hMt,"distilbert"),hMt.forEach(t),WMr=r(JRe," \u2014 "),aU=n(JRe,"A",{href:!0});var pMt=s(aU);QMr=r(pMt,"TFDistilBertForTokenClassification"),pMt.forEach(t),HMr=r(JRe," (DistilBERT model)"),JRe.forEach(t),UMr=i(me),_4=n(me,"LI",{});var YRe=s(_4);lFe=n(YRe,"STRONG",{});var uMt=s(lFe);JMr=r(uMt,"electra"),uMt.forEach(t),YMr=r(YRe," \u2014 "),nU=n(YRe,"A",{href:!0});var _Mt=s(nU);KMr=r(_Mt,"TFElectraForTokenClassification"),_Mt.forEach(t),ZMr=r(YRe," (ELECTRA model)"),YRe.forEach(t),e4r=i(me),b4=n(me,"LI",{});var KRe=s(b4);iFe=n(KRe,"STRONG",{});var bMt=s(iFe);o4r=r(bMt,"flaubert"),bMt.forEach(t),r4r=r(KRe," \u2014 "),sU=n(KRe,"A",{href:!0});var vMt=s(sU);t4r=r(vMt,"TFFlaubertForTokenClassification"),vMt.forEach(t),a4r=r(KRe," (FlauBERT model)"),KRe.forEach(t),n4r=i(me),v4=n(me,"LI",{});var ZRe=s(v4);dFe=n(ZRe,"STRONG",{});var FMt=s(dFe);s4r=r(FMt,"funnel"),FMt.forEach(t),l4r=r(ZRe," \u2014 "),lU=n(ZRe,"A",{href:!0});var TMt=s(lU);i4r=r(TMt,"TFFunnelForTokenClassification"),TMt.forEach(t),d4r=r(ZRe," (Funnel Transformer model)"),ZRe.forEach(t),c4r=i(me),F4=n(me,"LI",{});var ePe=s(F4);cFe=n(ePe,"STRONG",{});var MMt=s(cFe);f4r=r(MMt,"layoutlm"),MMt.forEach(t),m4r=r(ePe," \u2014 "),iU=n(ePe,"A",{href:!0});var EMt=s(iU);g4r=r(EMt,"TFLayoutLMForTokenClassification"),EMt.forEach(t),h4r=r(ePe," (LayoutLM model)"),ePe.forEach(t),p4r=i(me),T4=n(me,"LI",{});var oPe=s(T4);fFe=n(oPe,"STRONG",{});var CMt=s(fFe);u4r=r(CMt,"longformer"),CMt.forEach(t),_4r=r(oPe," \u2014 "),dU=n(oPe,"A",{href:!0});var wMt=s(dU);b4r=r(wMt,"TFLongformerForTokenClassification"),wMt.forEach(t),v4r=r(oPe," (Longformer model)"),oPe.forEach(t),F4r=i(me),M4=n(me,"LI",{});var rPe=s(M4);mFe=n(rPe,"STRONG",{});var AMt=s(mFe);T4r=r(AMt,"mobilebert"),AMt.forEach(t),M4r=r(rPe," \u2014 "),cU=n(rPe,"A",{href:!0});var yMt=s(cU);E4r=r(yMt,"TFMobileBertForTokenClassification"),yMt.forEach(t),C4r=r(rPe," (MobileBERT model)"),rPe.forEach(t),w4r=i(me),E4=n(me,"LI",{});var tPe=s(E4);gFe=n(tPe,"STRONG",{});var LMt=s(gFe);A4r=r(LMt,"mpnet"),LMt.forEach(t),y4r=r(tPe," \u2014 "),fU=n(tPe,"A",{href:!0});var xMt=s(fU);L4r=r(xMt,"TFMPNetForTokenClassification"),xMt.forEach(t),x4r=r(tPe," (MPNet model)"),tPe.forEach(t),$4r=i(me),C4=n(me,"LI",{});var aPe=s(C4);hFe=n(aPe,"STRONG",{});var $Mt=s(hFe);k4r=r($Mt,"rembert"),$Mt.forEach(t),S4r=r(aPe," \u2014 "),mU=n(aPe,"A",{href:!0});var kMt=s(mU);R4r=r(kMt,"TFRemBertForTokenClassification"),kMt.forEach(t),P4r=r(aPe," (RemBERT model)"),aPe.forEach(t),B4r=i(me),w4=n(me,"LI",{});var nPe=s(w4);pFe=n(nPe,"STRONG",{});var SMt=s(pFe);I4r=r(SMt,"roberta"),SMt.forEach(t),q4r=r(nPe," \u2014 "),gU=n(nPe,"A",{href:!0});var RMt=s(gU);N4r=r(RMt,"TFRobertaForTokenClassification"),RMt.forEach(t),j4r=r(nPe," (RoBERTa model)"),nPe.forEach(t),D4r=i(me),A4=n(me,"LI",{});var sPe=s(A4);uFe=n(sPe,"STRONG",{});var PMt=s(uFe);G4r=r(PMt,"roformer"),PMt.forEach(t),O4r=r(sPe," \u2014 "),hU=n(sPe,"A",{href:!0});var BMt=s(hU);V4r=r(BMt,"TFRoFormerForTokenClassification"),BMt.forEach(t),X4r=r(sPe," (RoFormer model)"),sPe.forEach(t),z4r=i(me),y4=n(me,"LI",{});var lPe=s(y4);_Fe=n(lPe,"STRONG",{});var IMt=s(_Fe);W4r=r(IMt,"xlm"),IMt.forEach(t),Q4r=r(lPe," \u2014 "),pU=n(lPe,"A",{href:!0});var qMt=s(pU);H4r=r(qMt,"TFXLMForTokenClassification"),qMt.forEach(t),U4r=r(lPe," (XLM model)"),lPe.forEach(t),J4r=i(me),L4=n(me,"LI",{});var iPe=s(L4);bFe=n(iPe,"STRONG",{});var NMt=s(bFe);Y4r=r(NMt,"xlm-roberta"),NMt.forEach(t),K4r=r(iPe," \u2014 "),uU=n(iPe,"A",{href:!0});var jMt=s(uU);Z4r=r(jMt,"TFXLMRobertaForTokenClassification"),jMt.forEach(t),eEr=r(iPe," (XLM-RoBERTa model)"),iPe.forEach(t),oEr=i(me),x4=n(me,"LI",{});var dPe=s(x4);vFe=n(dPe,"STRONG",{});var DMt=s(vFe);rEr=r(DMt,"xlnet"),DMt.forEach(t),tEr=r(dPe," \u2014 "),_U=n(dPe,"A",{href:!0});var GMt=s(_U);aEr=r(GMt,"TFXLNetForTokenClassification"),GMt.forEach(t),nEr=r(dPe," (XLNet model)"),dPe.forEach(t),me.forEach(t),sEr=i(Rl),T($4.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),rNe=i(f),vc=n(f,"H2",{class:!0});var dDe=s(vc);k4=n(dDe,"A",{id:!0,class:!0,href:!0});var OMt=s(k4);FFe=n(OMt,"SPAN",{});var VMt=s(FFe);T(z8.$$.fragment,VMt),VMt.forEach(t),OMt.forEach(t),lEr=i(dDe),TFe=n(dDe,"SPAN",{});var XMt=s(TFe);iEr=r(XMt,"TFAutoModelForQuestionAnswering"),XMt.forEach(t),dDe.forEach(t),tNe=i(f),ir=n(f,"DIV",{class:!0});var Pl=s(ir);T(W8.$$.fragment,Pl),dEr=i(Pl),Fc=n(Pl,"P",{});var XZ=s(Fc);cEr=r(XZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),bU=n(XZ,"A",{href:!0});var zMt=s(bU);fEr=r(zMt,"from_pretrained()"),zMt.forEach(t),mEr=r(XZ," class method or the "),vU=n(XZ,"A",{href:!0});var WMt=s(vU);gEr=r(WMt,"from_config()"),WMt.forEach(t),hEr=r(XZ,` class
method.`),XZ.forEach(t),pEr=i(Pl),Q8=n(Pl,"P",{});var cDe=s(Q8);uEr=r(cDe,"This class cannot be instantiated directly using "),MFe=n(cDe,"CODE",{});var QMt=s(MFe);_Er=r(QMt,"__init__()"),QMt.forEach(t),bEr=r(cDe," (throws an error)."),cDe.forEach(t),vEr=i(Pl),Nt=n(Pl,"DIV",{class:!0});var LA=s(Nt);T(H8.$$.fragment,LA),FEr=i(LA),EFe=n(LA,"P",{});var HMt=s(EFe);TEr=r(HMt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),HMt.forEach(t),MEr=i(LA),Tc=n(LA,"P",{});var zZ=s(Tc);EEr=r(zZ,`Note:
Loading a model from its configuration file does `),CFe=n(zZ,"STRONG",{});var UMt=s(CFe);CEr=r(UMt,"not"),UMt.forEach(t),wEr=r(zZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),FU=n(zZ,"A",{href:!0});var JMt=s(FU);AEr=r(JMt,"from_pretrained()"),JMt.forEach(t),yEr=r(zZ," to load the model weights."),zZ.forEach(t),LEr=i(LA),T(S4.$$.fragment,LA),LA.forEach(t),xEr=i(Pl),Ir=n(Pl,"DIV",{class:!0});var Bl=s(Ir);T(U8.$$.fragment,Bl),$Er=i(Bl),wFe=n(Bl,"P",{});var YMt=s(wFe);kEr=r(YMt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),YMt.forEach(t),SEr=i(Bl),fn=n(Bl,"P",{});var xA=s(fn);REr=r(xA,"The model class to instantiate is selected based on the "),AFe=n(xA,"CODE",{});var KMt=s(AFe);PEr=r(KMt,"model_type"),KMt.forEach(t),BEr=r(xA,` property of the config object (either
passed as an argument or loaded from `),yFe=n(xA,"CODE",{});var ZMt=s(yFe);IEr=r(ZMt,"pretrained_model_name_or_path"),ZMt.forEach(t),qEr=r(xA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LFe=n(xA,"CODE",{});var e4t=s(LFe);NEr=r(e4t,"pretrained_model_name_or_path"),e4t.forEach(t),jEr=r(xA,":"),xA.forEach(t),DEr=i(Bl),ce=n(Bl,"UL",{});var ge=s(ce);R4=n(ge,"LI",{});var cPe=s(R4);xFe=n(cPe,"STRONG",{});var o4t=s(xFe);GEr=r(o4t,"albert"),o4t.forEach(t),OEr=r(cPe," \u2014 "),TU=n(cPe,"A",{href:!0});var r4t=s(TU);VEr=r(r4t,"TFAlbertForQuestionAnswering"),r4t.forEach(t),XEr=r(cPe," (ALBERT model)"),cPe.forEach(t),zEr=i(ge),P4=n(ge,"LI",{});var fPe=s(P4);$Fe=n(fPe,"STRONG",{});var t4t=s($Fe);WEr=r(t4t,"bert"),t4t.forEach(t),QEr=r(fPe," \u2014 "),MU=n(fPe,"A",{href:!0});var a4t=s(MU);HEr=r(a4t,"TFBertForQuestionAnswering"),a4t.forEach(t),UEr=r(fPe," (BERT model)"),fPe.forEach(t),JEr=i(ge),B4=n(ge,"LI",{});var mPe=s(B4);kFe=n(mPe,"STRONG",{});var n4t=s(kFe);YEr=r(n4t,"camembert"),n4t.forEach(t),KEr=r(mPe," \u2014 "),EU=n(mPe,"A",{href:!0});var s4t=s(EU);ZEr=r(s4t,"TFCamembertForQuestionAnswering"),s4t.forEach(t),eCr=r(mPe," (CamemBERT model)"),mPe.forEach(t),oCr=i(ge),I4=n(ge,"LI",{});var gPe=s(I4);SFe=n(gPe,"STRONG",{});var l4t=s(SFe);rCr=r(l4t,"convbert"),l4t.forEach(t),tCr=r(gPe," \u2014 "),CU=n(gPe,"A",{href:!0});var i4t=s(CU);aCr=r(i4t,"TFConvBertForQuestionAnswering"),i4t.forEach(t),nCr=r(gPe," (ConvBERT model)"),gPe.forEach(t),sCr=i(ge),q4=n(ge,"LI",{});var hPe=s(q4);RFe=n(hPe,"STRONG",{});var d4t=s(RFe);lCr=r(d4t,"deberta"),d4t.forEach(t),iCr=r(hPe," \u2014 "),wU=n(hPe,"A",{href:!0});var c4t=s(wU);dCr=r(c4t,"TFDebertaForQuestionAnswering"),c4t.forEach(t),cCr=r(hPe," (DeBERTa model)"),hPe.forEach(t),fCr=i(ge),N4=n(ge,"LI",{});var pPe=s(N4);PFe=n(pPe,"STRONG",{});var f4t=s(PFe);mCr=r(f4t,"deberta-v2"),f4t.forEach(t),gCr=r(pPe," \u2014 "),AU=n(pPe,"A",{href:!0});var m4t=s(AU);hCr=r(m4t,"TFDebertaV2ForQuestionAnswering"),m4t.forEach(t),pCr=r(pPe," (DeBERTa-v2 model)"),pPe.forEach(t),uCr=i(ge),j4=n(ge,"LI",{});var uPe=s(j4);BFe=n(uPe,"STRONG",{});var g4t=s(BFe);_Cr=r(g4t,"distilbert"),g4t.forEach(t),bCr=r(uPe," \u2014 "),yU=n(uPe,"A",{href:!0});var h4t=s(yU);vCr=r(h4t,"TFDistilBertForQuestionAnswering"),h4t.forEach(t),FCr=r(uPe," (DistilBERT model)"),uPe.forEach(t),TCr=i(ge),D4=n(ge,"LI",{});var _Pe=s(D4);IFe=n(_Pe,"STRONG",{});var p4t=s(IFe);MCr=r(p4t,"electra"),p4t.forEach(t),ECr=r(_Pe," \u2014 "),LU=n(_Pe,"A",{href:!0});var u4t=s(LU);CCr=r(u4t,"TFElectraForQuestionAnswering"),u4t.forEach(t),wCr=r(_Pe," (ELECTRA model)"),_Pe.forEach(t),ACr=i(ge),G4=n(ge,"LI",{});var bPe=s(G4);qFe=n(bPe,"STRONG",{});var _4t=s(qFe);yCr=r(_4t,"flaubert"),_4t.forEach(t),LCr=r(bPe," \u2014 "),xU=n(bPe,"A",{href:!0});var b4t=s(xU);xCr=r(b4t,"TFFlaubertForQuestionAnsweringSimple"),b4t.forEach(t),$Cr=r(bPe," (FlauBERT model)"),bPe.forEach(t),kCr=i(ge),O4=n(ge,"LI",{});var vPe=s(O4);NFe=n(vPe,"STRONG",{});var v4t=s(NFe);SCr=r(v4t,"funnel"),v4t.forEach(t),RCr=r(vPe," \u2014 "),$U=n(vPe,"A",{href:!0});var F4t=s($U);PCr=r(F4t,"TFFunnelForQuestionAnswering"),F4t.forEach(t),BCr=r(vPe," (Funnel Transformer model)"),vPe.forEach(t),ICr=i(ge),V4=n(ge,"LI",{});var FPe=s(V4);jFe=n(FPe,"STRONG",{});var T4t=s(jFe);qCr=r(T4t,"gptj"),T4t.forEach(t),NCr=r(FPe," \u2014 "),kU=n(FPe,"A",{href:!0});var M4t=s(kU);jCr=r(M4t,"TFGPTJForQuestionAnswering"),M4t.forEach(t),DCr=r(FPe," (GPT-J model)"),FPe.forEach(t),GCr=i(ge),X4=n(ge,"LI",{});var TPe=s(X4);DFe=n(TPe,"STRONG",{});var E4t=s(DFe);OCr=r(E4t,"longformer"),E4t.forEach(t),VCr=r(TPe," \u2014 "),SU=n(TPe,"A",{href:!0});var C4t=s(SU);XCr=r(C4t,"TFLongformerForQuestionAnswering"),C4t.forEach(t),zCr=r(TPe," (Longformer model)"),TPe.forEach(t),WCr=i(ge),z4=n(ge,"LI",{});var MPe=s(z4);GFe=n(MPe,"STRONG",{});var w4t=s(GFe);QCr=r(w4t,"mobilebert"),w4t.forEach(t),HCr=r(MPe," \u2014 "),RU=n(MPe,"A",{href:!0});var A4t=s(RU);UCr=r(A4t,"TFMobileBertForQuestionAnswering"),A4t.forEach(t),JCr=r(MPe," (MobileBERT model)"),MPe.forEach(t),YCr=i(ge),W4=n(ge,"LI",{});var EPe=s(W4);OFe=n(EPe,"STRONG",{});var y4t=s(OFe);KCr=r(y4t,"mpnet"),y4t.forEach(t),ZCr=r(EPe," \u2014 "),PU=n(EPe,"A",{href:!0});var L4t=s(PU);e5r=r(L4t,"TFMPNetForQuestionAnswering"),L4t.forEach(t),o5r=r(EPe," (MPNet model)"),EPe.forEach(t),r5r=i(ge),Q4=n(ge,"LI",{});var CPe=s(Q4);VFe=n(CPe,"STRONG",{});var x4t=s(VFe);t5r=r(x4t,"rembert"),x4t.forEach(t),a5r=r(CPe," \u2014 "),BU=n(CPe,"A",{href:!0});var $4t=s(BU);n5r=r($4t,"TFRemBertForQuestionAnswering"),$4t.forEach(t),s5r=r(CPe," (RemBERT model)"),CPe.forEach(t),l5r=i(ge),H4=n(ge,"LI",{});var wPe=s(H4);XFe=n(wPe,"STRONG",{});var k4t=s(XFe);i5r=r(k4t,"roberta"),k4t.forEach(t),d5r=r(wPe," \u2014 "),IU=n(wPe,"A",{href:!0});var S4t=s(IU);c5r=r(S4t,"TFRobertaForQuestionAnswering"),S4t.forEach(t),f5r=r(wPe," (RoBERTa model)"),wPe.forEach(t),m5r=i(ge),U4=n(ge,"LI",{});var APe=s(U4);zFe=n(APe,"STRONG",{});var R4t=s(zFe);g5r=r(R4t,"roformer"),R4t.forEach(t),h5r=r(APe," \u2014 "),qU=n(APe,"A",{href:!0});var P4t=s(qU);p5r=r(P4t,"TFRoFormerForQuestionAnswering"),P4t.forEach(t),u5r=r(APe," (RoFormer model)"),APe.forEach(t),_5r=i(ge),J4=n(ge,"LI",{});var yPe=s(J4);WFe=n(yPe,"STRONG",{});var B4t=s(WFe);b5r=r(B4t,"xlm"),B4t.forEach(t),v5r=r(yPe," \u2014 "),NU=n(yPe,"A",{href:!0});var I4t=s(NU);F5r=r(I4t,"TFXLMForQuestionAnsweringSimple"),I4t.forEach(t),T5r=r(yPe," (XLM model)"),yPe.forEach(t),M5r=i(ge),Y4=n(ge,"LI",{});var LPe=s(Y4);QFe=n(LPe,"STRONG",{});var q4t=s(QFe);E5r=r(q4t,"xlm-roberta"),q4t.forEach(t),C5r=r(LPe," \u2014 "),jU=n(LPe,"A",{href:!0});var N4t=s(jU);w5r=r(N4t,"TFXLMRobertaForQuestionAnswering"),N4t.forEach(t),A5r=r(LPe," (XLM-RoBERTa model)"),LPe.forEach(t),y5r=i(ge),K4=n(ge,"LI",{});var xPe=s(K4);HFe=n(xPe,"STRONG",{});var j4t=s(HFe);L5r=r(j4t,"xlnet"),j4t.forEach(t),x5r=r(xPe," \u2014 "),DU=n(xPe,"A",{href:!0});var D4t=s(DU);$5r=r(D4t,"TFXLNetForQuestionAnsweringSimple"),D4t.forEach(t),k5r=r(xPe," (XLNet model)"),xPe.forEach(t),ge.forEach(t),S5r=i(Bl),T(Z4.$$.fragment,Bl),Bl.forEach(t),Pl.forEach(t),aNe=i(f),Mc=n(f,"H2",{class:!0});var fDe=s(Mc);eE=n(fDe,"A",{id:!0,class:!0,href:!0});var G4t=s(eE);UFe=n(G4t,"SPAN",{});var O4t=s(UFe);T(J8.$$.fragment,O4t),O4t.forEach(t),G4t.forEach(t),R5r=i(fDe),JFe=n(fDe,"SPAN",{});var V4t=s(JFe);P5r=r(V4t,"TFAutoModelForVision2Seq"),V4t.forEach(t),fDe.forEach(t),nNe=i(f),dr=n(f,"DIV",{class:!0});var Il=s(dr);T(Y8.$$.fragment,Il),B5r=i(Il),Ec=n(Il,"P",{});var WZ=s(Ec);I5r=r(WZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),GU=n(WZ,"A",{href:!0});var X4t=s(GU);q5r=r(X4t,"from_pretrained()"),X4t.forEach(t),N5r=r(WZ," class method or the "),OU=n(WZ,"A",{href:!0});var z4t=s(OU);j5r=r(z4t,"from_config()"),z4t.forEach(t),D5r=r(WZ,` class
method.`),WZ.forEach(t),G5r=i(Il),K8=n(Il,"P",{});var mDe=s(K8);O5r=r(mDe,"This class cannot be instantiated directly using "),YFe=n(mDe,"CODE",{});var W4t=s(YFe);V5r=r(W4t,"__init__()"),W4t.forEach(t),X5r=r(mDe," (throws an error)."),mDe.forEach(t),z5r=i(Il),jt=n(Il,"DIV",{class:!0});var $A=s(jt);T(Z8.$$.fragment,$A),W5r=i($A),KFe=n($A,"P",{});var Q4t=s(KFe);Q5r=r(Q4t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Q4t.forEach(t),H5r=i($A),Cc=n($A,"P",{});var QZ=s(Cc);U5r=r(QZ,`Note:
Loading a model from its configuration file does `),ZFe=n(QZ,"STRONG",{});var H4t=s(ZFe);J5r=r(H4t,"not"),H4t.forEach(t),Y5r=r(QZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),VU=n(QZ,"A",{href:!0});var U4t=s(VU);K5r=r(U4t,"from_pretrained()"),U4t.forEach(t),Z5r=r(QZ," to load the model weights."),QZ.forEach(t),ewr=i($A),T(oE.$$.fragment,$A),$A.forEach(t),owr=i(Il),qr=n(Il,"DIV",{class:!0});var ql=s(qr);T(ex.$$.fragment,ql),rwr=i(ql),e0e=n(ql,"P",{});var J4t=s(e0e);twr=r(J4t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),J4t.forEach(t),awr=i(ql),mn=n(ql,"P",{});var kA=s(mn);nwr=r(kA,"The model class to instantiate is selected based on the "),o0e=n(kA,"CODE",{});var Y4t=s(o0e);swr=r(Y4t,"model_type"),Y4t.forEach(t),lwr=r(kA,` property of the config object (either
passed as an argument or loaded from `),r0e=n(kA,"CODE",{});var K4t=s(r0e);iwr=r(K4t,"pretrained_model_name_or_path"),K4t.forEach(t),dwr=r(kA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t0e=n(kA,"CODE",{});var Z4t=s(t0e);cwr=r(Z4t,"pretrained_model_name_or_path"),Z4t.forEach(t),fwr=r(kA,":"),kA.forEach(t),mwr=i(ql),a0e=n(ql,"UL",{});var eEt=s(a0e);rE=n(eEt,"LI",{});var $Pe=s(rE);n0e=n($Pe,"STRONG",{});var oEt=s(n0e);gwr=r(oEt,"vision-encoder-decoder"),oEt.forEach(t),hwr=r($Pe," \u2014 "),XU=n($Pe,"A",{href:!0});var rEt=s(XU);pwr=r(rEt,"TFVisionEncoderDecoderModel"),rEt.forEach(t),uwr=r($Pe," (Vision Encoder decoder model)"),$Pe.forEach(t),eEt.forEach(t),_wr=i(ql),T(tE.$$.fragment,ql),ql.forEach(t),Il.forEach(t),sNe=i(f),wc=n(f,"H2",{class:!0});var gDe=s(wc);aE=n(gDe,"A",{id:!0,class:!0,href:!0});var tEt=s(aE);s0e=n(tEt,"SPAN",{});var aEt=s(s0e);T(ox.$$.fragment,aEt),aEt.forEach(t),tEt.forEach(t),bwr=i(gDe),l0e=n(gDe,"SPAN",{});var nEt=s(l0e);vwr=r(nEt,"TFAutoModelForSpeechSeq2Seq"),nEt.forEach(t),gDe.forEach(t),lNe=i(f),cr=n(f,"DIV",{class:!0});var Nl=s(cr);T(rx.$$.fragment,Nl),Fwr=i(Nl),Ac=n(Nl,"P",{});var HZ=s(Ac);Twr=r(HZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),zU=n(HZ,"A",{href:!0});var sEt=s(zU);Mwr=r(sEt,"from_pretrained()"),sEt.forEach(t),Ewr=r(HZ," class method or the "),WU=n(HZ,"A",{href:!0});var lEt=s(WU);Cwr=r(lEt,"from_config()"),lEt.forEach(t),wwr=r(HZ,` class
method.`),HZ.forEach(t),Awr=i(Nl),tx=n(Nl,"P",{});var hDe=s(tx);ywr=r(hDe,"This class cannot be instantiated directly using "),i0e=n(hDe,"CODE",{});var iEt=s(i0e);Lwr=r(iEt,"__init__()"),iEt.forEach(t),xwr=r(hDe," (throws an error)."),hDe.forEach(t),$wr=i(Nl),Dt=n(Nl,"DIV",{class:!0});var SA=s(Dt);T(ax.$$.fragment,SA),kwr=i(SA),d0e=n(SA,"P",{});var dEt=s(d0e);Swr=r(dEt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),dEt.forEach(t),Rwr=i(SA),yc=n(SA,"P",{});var UZ=s(yc);Pwr=r(UZ,`Note:
Loading a model from its configuration file does `),c0e=n(UZ,"STRONG",{});var cEt=s(c0e);Bwr=r(cEt,"not"),cEt.forEach(t),Iwr=r(UZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),QU=n(UZ,"A",{href:!0});var fEt=s(QU);qwr=r(fEt,"from_pretrained()"),fEt.forEach(t),Nwr=r(UZ," to load the model weights."),UZ.forEach(t),jwr=i(SA),T(nE.$$.fragment,SA),SA.forEach(t),Dwr=i(Nl),Nr=n(Nl,"DIV",{class:!0});var jl=s(Nr);T(nx.$$.fragment,jl),Gwr=i(jl),f0e=n(jl,"P",{});var mEt=s(f0e);Owr=r(mEt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),mEt.forEach(t),Vwr=i(jl),gn=n(jl,"P",{});var RA=s(gn);Xwr=r(RA,"The model class to instantiate is selected based on the "),m0e=n(RA,"CODE",{});var gEt=s(m0e);zwr=r(gEt,"model_type"),gEt.forEach(t),Wwr=r(RA,` property of the config object (either
passed as an argument or loaded from `),g0e=n(RA,"CODE",{});var hEt=s(g0e);Qwr=r(hEt,"pretrained_model_name_or_path"),hEt.forEach(t),Hwr=r(RA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h0e=n(RA,"CODE",{});var pEt=s(h0e);Uwr=r(pEt,"pretrained_model_name_or_path"),pEt.forEach(t),Jwr=r(RA,":"),RA.forEach(t),Ywr=i(jl),p0e=n(jl,"UL",{});var uEt=s(p0e);sE=n(uEt,"LI",{});var kPe=s(sE);u0e=n(kPe,"STRONG",{});var _Et=s(u0e);Kwr=r(_Et,"speech_to_text"),_Et.forEach(t),Zwr=r(kPe," \u2014 "),HU=n(kPe,"A",{href:!0});var bEt=s(HU);eAr=r(bEt,"TFSpeech2TextForConditionalGeneration"),bEt.forEach(t),oAr=r(kPe," (Speech2Text model)"),kPe.forEach(t),uEt.forEach(t),rAr=i(jl),T(lE.$$.fragment,jl),jl.forEach(t),Nl.forEach(t),iNe=i(f),Lc=n(f,"H2",{class:!0});var pDe=s(Lc);iE=n(pDe,"A",{id:!0,class:!0,href:!0});var vEt=s(iE);_0e=n(vEt,"SPAN",{});var FEt=s(_0e);T(sx.$$.fragment,FEt),FEt.forEach(t),vEt.forEach(t),tAr=i(pDe),b0e=n(pDe,"SPAN",{});var TEt=s(b0e);aAr=r(TEt,"FlaxAutoModel"),TEt.forEach(t),pDe.forEach(t),dNe=i(f),fr=n(f,"DIV",{class:!0});var Dl=s(fr);T(lx.$$.fragment,Dl),nAr=i(Dl),xc=n(Dl,"P",{});var JZ=s(xc);sAr=r(JZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),UU=n(JZ,"A",{href:!0});var MEt=s(UU);lAr=r(MEt,"from_pretrained()"),MEt.forEach(t),iAr=r(JZ," class method or the "),JU=n(JZ,"A",{href:!0});var EEt=s(JU);dAr=r(EEt,"from_config()"),EEt.forEach(t),cAr=r(JZ,` class
method.`),JZ.forEach(t),fAr=i(Dl),ix=n(Dl,"P",{});var uDe=s(ix);mAr=r(uDe,"This class cannot be instantiated directly using "),v0e=n(uDe,"CODE",{});var CEt=s(v0e);gAr=r(CEt,"__init__()"),CEt.forEach(t),hAr=r(uDe," (throws an error)."),uDe.forEach(t),pAr=i(Dl),Gt=n(Dl,"DIV",{class:!0});var PA=s(Gt);T(dx.$$.fragment,PA),uAr=i(PA),F0e=n(PA,"P",{});var wEt=s(F0e);_Ar=r(wEt,"Instantiates one of the base model classes of the library from a configuration."),wEt.forEach(t),bAr=i(PA),$c=n(PA,"P",{});var YZ=s($c);vAr=r(YZ,`Note:
Loading a model from its configuration file does `),T0e=n(YZ,"STRONG",{});var AEt=s(T0e);FAr=r(AEt,"not"),AEt.forEach(t),TAr=r(YZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),YU=n(YZ,"A",{href:!0});var yEt=s(YU);MAr=r(yEt,"from_pretrained()"),yEt.forEach(t),EAr=r(YZ," to load the model weights."),YZ.forEach(t),CAr=i(PA),T(dE.$$.fragment,PA),PA.forEach(t),wAr=i(Dl),jr=n(Dl,"DIV",{class:!0});var Gl=s(jr);T(cx.$$.fragment,Gl),AAr=i(Gl),M0e=n(Gl,"P",{});var LEt=s(M0e);yAr=r(LEt,"Instantiate one of the base model classes of the library from a pretrained model."),LEt.forEach(t),LAr=i(Gl),hn=n(Gl,"P",{});var BA=s(hn);xAr=r(BA,"The model class to instantiate is selected based on the "),E0e=n(BA,"CODE",{});var xEt=s(E0e);$Ar=r(xEt,"model_type"),xEt.forEach(t),kAr=r(BA,` property of the config object (either
passed as an argument or loaded from `),C0e=n(BA,"CODE",{});var $Et=s(C0e);SAr=r($Et,"pretrained_model_name_or_path"),$Et.forEach(t),RAr=r(BA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w0e=n(BA,"CODE",{});var kEt=s(w0e);PAr=r(kEt,"pretrained_model_name_or_path"),kEt.forEach(t),BAr=r(BA,":"),BA.forEach(t),IAr=i(Gl),re=n(Gl,"UL",{});var ne=s(re);cE=n(ne,"LI",{});var SPe=s(cE);A0e=n(SPe,"STRONG",{});var SEt=s(A0e);qAr=r(SEt,"albert"),SEt.forEach(t),NAr=r(SPe," \u2014 "),KU=n(SPe,"A",{href:!0});var REt=s(KU);jAr=r(REt,"FlaxAlbertModel"),REt.forEach(t),DAr=r(SPe," (ALBERT model)"),SPe.forEach(t),GAr=i(ne),fE=n(ne,"LI",{});var RPe=s(fE);y0e=n(RPe,"STRONG",{});var PEt=s(y0e);OAr=r(PEt,"bart"),PEt.forEach(t),VAr=r(RPe," \u2014 "),ZU=n(RPe,"A",{href:!0});var BEt=s(ZU);XAr=r(BEt,"FlaxBartModel"),BEt.forEach(t),zAr=r(RPe," (BART model)"),RPe.forEach(t),WAr=i(ne),mE=n(ne,"LI",{});var PPe=s(mE);L0e=n(PPe,"STRONG",{});var IEt=s(L0e);QAr=r(IEt,"beit"),IEt.forEach(t),HAr=r(PPe," \u2014 "),eJ=n(PPe,"A",{href:!0});var qEt=s(eJ);UAr=r(qEt,"FlaxBeitModel"),qEt.forEach(t),JAr=r(PPe," (BEiT model)"),PPe.forEach(t),YAr=i(ne),gE=n(ne,"LI",{});var BPe=s(gE);x0e=n(BPe,"STRONG",{});var NEt=s(x0e);KAr=r(NEt,"bert"),NEt.forEach(t),ZAr=r(BPe," \u2014 "),oJ=n(BPe,"A",{href:!0});var jEt=s(oJ);e6r=r(jEt,"FlaxBertModel"),jEt.forEach(t),o6r=r(BPe," (BERT model)"),BPe.forEach(t),r6r=i(ne),hE=n(ne,"LI",{});var IPe=s(hE);$0e=n(IPe,"STRONG",{});var DEt=s($0e);t6r=r(DEt,"big_bird"),DEt.forEach(t),a6r=r(IPe," \u2014 "),rJ=n(IPe,"A",{href:!0});var GEt=s(rJ);n6r=r(GEt,"FlaxBigBirdModel"),GEt.forEach(t),s6r=r(IPe," (BigBird model)"),IPe.forEach(t),l6r=i(ne),pE=n(ne,"LI",{});var qPe=s(pE);k0e=n(qPe,"STRONG",{});var OEt=s(k0e);i6r=r(OEt,"blenderbot"),OEt.forEach(t),d6r=r(qPe," \u2014 "),tJ=n(qPe,"A",{href:!0});var VEt=s(tJ);c6r=r(VEt,"FlaxBlenderbotModel"),VEt.forEach(t),f6r=r(qPe," (Blenderbot model)"),qPe.forEach(t),m6r=i(ne),uE=n(ne,"LI",{});var NPe=s(uE);S0e=n(NPe,"STRONG",{});var XEt=s(S0e);g6r=r(XEt,"blenderbot-small"),XEt.forEach(t),h6r=r(NPe," \u2014 "),aJ=n(NPe,"A",{href:!0});var zEt=s(aJ);p6r=r(zEt,"FlaxBlenderbotSmallModel"),zEt.forEach(t),u6r=r(NPe," (BlenderbotSmall model)"),NPe.forEach(t),_6r=i(ne),_E=n(ne,"LI",{});var jPe=s(_E);R0e=n(jPe,"STRONG",{});var WEt=s(R0e);b6r=r(WEt,"clip"),WEt.forEach(t),v6r=r(jPe," \u2014 "),nJ=n(jPe,"A",{href:!0});var QEt=s(nJ);F6r=r(QEt,"FlaxCLIPModel"),QEt.forEach(t),T6r=r(jPe," (CLIP model)"),jPe.forEach(t),M6r=i(ne),bE=n(ne,"LI",{});var DPe=s(bE);P0e=n(DPe,"STRONG",{});var HEt=s(P0e);E6r=r(HEt,"distilbert"),HEt.forEach(t),C6r=r(DPe," \u2014 "),sJ=n(DPe,"A",{href:!0});var UEt=s(sJ);w6r=r(UEt,"FlaxDistilBertModel"),UEt.forEach(t),A6r=r(DPe," (DistilBERT model)"),DPe.forEach(t),y6r=i(ne),vE=n(ne,"LI",{});var GPe=s(vE);B0e=n(GPe,"STRONG",{});var JEt=s(B0e);L6r=r(JEt,"electra"),JEt.forEach(t),x6r=r(GPe," \u2014 "),lJ=n(GPe,"A",{href:!0});var YEt=s(lJ);$6r=r(YEt,"FlaxElectraModel"),YEt.forEach(t),k6r=r(GPe," (ELECTRA model)"),GPe.forEach(t),S6r=i(ne),FE=n(ne,"LI",{});var OPe=s(FE);I0e=n(OPe,"STRONG",{});var KEt=s(I0e);R6r=r(KEt,"gpt2"),KEt.forEach(t),P6r=r(OPe," \u2014 "),iJ=n(OPe,"A",{href:!0});var ZEt=s(iJ);B6r=r(ZEt,"FlaxGPT2Model"),ZEt.forEach(t),I6r=r(OPe," (OpenAI GPT-2 model)"),OPe.forEach(t),q6r=i(ne),TE=n(ne,"LI",{});var VPe=s(TE);q0e=n(VPe,"STRONG",{});var eCt=s(q0e);N6r=r(eCt,"gpt_neo"),eCt.forEach(t),j6r=r(VPe," \u2014 "),dJ=n(VPe,"A",{href:!0});var oCt=s(dJ);D6r=r(oCt,"FlaxGPTNeoModel"),oCt.forEach(t),G6r=r(VPe," (GPT Neo model)"),VPe.forEach(t),O6r=i(ne),ME=n(ne,"LI",{});var XPe=s(ME);N0e=n(XPe,"STRONG",{});var rCt=s(N0e);V6r=r(rCt,"gptj"),rCt.forEach(t),X6r=r(XPe," \u2014 "),cJ=n(XPe,"A",{href:!0});var tCt=s(cJ);z6r=r(tCt,"FlaxGPTJModel"),tCt.forEach(t),W6r=r(XPe," (GPT-J model)"),XPe.forEach(t),Q6r=i(ne),EE=n(ne,"LI",{});var zPe=s(EE);j0e=n(zPe,"STRONG",{});var aCt=s(j0e);H6r=r(aCt,"marian"),aCt.forEach(t),U6r=r(zPe," \u2014 "),fJ=n(zPe,"A",{href:!0});var nCt=s(fJ);J6r=r(nCt,"FlaxMarianModel"),nCt.forEach(t),Y6r=r(zPe," (Marian model)"),zPe.forEach(t),K6r=i(ne),CE=n(ne,"LI",{});var WPe=s(CE);D0e=n(WPe,"STRONG",{});var sCt=s(D0e);Z6r=r(sCt,"mbart"),sCt.forEach(t),eyr=r(WPe," \u2014 "),mJ=n(WPe,"A",{href:!0});var lCt=s(mJ);oyr=r(lCt,"FlaxMBartModel"),lCt.forEach(t),ryr=r(WPe," (mBART model)"),WPe.forEach(t),tyr=i(ne),wE=n(ne,"LI",{});var QPe=s(wE);G0e=n(QPe,"STRONG",{});var iCt=s(G0e);ayr=r(iCt,"mt5"),iCt.forEach(t),nyr=r(QPe," \u2014 "),gJ=n(QPe,"A",{href:!0});var dCt=s(gJ);syr=r(dCt,"FlaxMT5Model"),dCt.forEach(t),lyr=r(QPe," (mT5 model)"),QPe.forEach(t),iyr=i(ne),AE=n(ne,"LI",{});var HPe=s(AE);O0e=n(HPe,"STRONG",{});var cCt=s(O0e);dyr=r(cCt,"pegasus"),cCt.forEach(t),cyr=r(HPe," \u2014 "),hJ=n(HPe,"A",{href:!0});var fCt=s(hJ);fyr=r(fCt,"FlaxPegasusModel"),fCt.forEach(t),myr=r(HPe," (Pegasus model)"),HPe.forEach(t),gyr=i(ne),yE=n(ne,"LI",{});var UPe=s(yE);V0e=n(UPe,"STRONG",{});var mCt=s(V0e);hyr=r(mCt,"roberta"),mCt.forEach(t),pyr=r(UPe," \u2014 "),pJ=n(UPe,"A",{href:!0});var gCt=s(pJ);uyr=r(gCt,"FlaxRobertaModel"),gCt.forEach(t),_yr=r(UPe," (RoBERTa model)"),UPe.forEach(t),byr=i(ne),LE=n(ne,"LI",{});var JPe=s(LE);X0e=n(JPe,"STRONG",{});var hCt=s(X0e);vyr=r(hCt,"roformer"),hCt.forEach(t),Fyr=r(JPe," \u2014 "),uJ=n(JPe,"A",{href:!0});var pCt=s(uJ);Tyr=r(pCt,"FlaxRoFormerModel"),pCt.forEach(t),Myr=r(JPe," (RoFormer model)"),JPe.forEach(t),Eyr=i(ne),xE=n(ne,"LI",{});var YPe=s(xE);z0e=n(YPe,"STRONG",{});var uCt=s(z0e);Cyr=r(uCt,"t5"),uCt.forEach(t),wyr=r(YPe," \u2014 "),_J=n(YPe,"A",{href:!0});var _Ct=s(_J);Ayr=r(_Ct,"FlaxT5Model"),_Ct.forEach(t),yyr=r(YPe," (T5 model)"),YPe.forEach(t),Lyr=i(ne),$E=n(ne,"LI",{});var KPe=s($E);W0e=n(KPe,"STRONG",{});var bCt=s(W0e);xyr=r(bCt,"vision-text-dual-encoder"),bCt.forEach(t),$yr=r(KPe," \u2014 "),bJ=n(KPe,"A",{href:!0});var vCt=s(bJ);kyr=r(vCt,"FlaxVisionTextDualEncoderModel"),vCt.forEach(t),Syr=r(KPe," (VisionTextDualEncoder model)"),KPe.forEach(t),Ryr=i(ne),kE=n(ne,"LI",{});var ZPe=s(kE);Q0e=n(ZPe,"STRONG",{});var FCt=s(Q0e);Pyr=r(FCt,"vit"),FCt.forEach(t),Byr=r(ZPe," \u2014 "),vJ=n(ZPe,"A",{href:!0});var TCt=s(vJ);Iyr=r(TCt,"FlaxViTModel"),TCt.forEach(t),qyr=r(ZPe," (ViT model)"),ZPe.forEach(t),Nyr=i(ne),SE=n(ne,"LI",{});var eBe=s(SE);H0e=n(eBe,"STRONG",{});var MCt=s(H0e);jyr=r(MCt,"wav2vec2"),MCt.forEach(t),Dyr=r(eBe," \u2014 "),FJ=n(eBe,"A",{href:!0});var ECt=s(FJ);Gyr=r(ECt,"FlaxWav2Vec2Model"),ECt.forEach(t),Oyr=r(eBe," (Wav2Vec2 model)"),eBe.forEach(t),Vyr=i(ne),RE=n(ne,"LI",{});var oBe=s(RE);U0e=n(oBe,"STRONG",{});var CCt=s(U0e);Xyr=r(CCt,"xglm"),CCt.forEach(t),zyr=r(oBe," \u2014 "),TJ=n(oBe,"A",{href:!0});var wCt=s(TJ);Wyr=r(wCt,"FlaxXGLMModel"),wCt.forEach(t),Qyr=r(oBe," (XGLM model)"),oBe.forEach(t),Hyr=i(ne),PE=n(ne,"LI",{});var rBe=s(PE);J0e=n(rBe,"STRONG",{});var ACt=s(J0e);Uyr=r(ACt,"xlm-roberta"),ACt.forEach(t),Jyr=r(rBe," \u2014 "),MJ=n(rBe,"A",{href:!0});var yCt=s(MJ);Yyr=r(yCt,"FlaxXLMRobertaModel"),yCt.forEach(t),Kyr=r(rBe," (XLM-RoBERTa model)"),rBe.forEach(t),ne.forEach(t),Zyr=i(Gl),T(BE.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),cNe=i(f),kc=n(f,"H2",{class:!0});var _De=s(kc);IE=n(_De,"A",{id:!0,class:!0,href:!0});var LCt=s(IE);Y0e=n(LCt,"SPAN",{});var xCt=s(Y0e);T(fx.$$.fragment,xCt),xCt.forEach(t),LCt.forEach(t),eLr=i(_De),K0e=n(_De,"SPAN",{});var $Ct=s(K0e);oLr=r($Ct,"FlaxAutoModelForCausalLM"),$Ct.forEach(t),_De.forEach(t),fNe=i(f),mr=n(f,"DIV",{class:!0});var Ol=s(mr);T(mx.$$.fragment,Ol),rLr=i(Ol),Sc=n(Ol,"P",{});var KZ=s(Sc);tLr=r(KZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),EJ=n(KZ,"A",{href:!0});var kCt=s(EJ);aLr=r(kCt,"from_pretrained()"),kCt.forEach(t),nLr=r(KZ," class method or the "),CJ=n(KZ,"A",{href:!0});var SCt=s(CJ);sLr=r(SCt,"from_config()"),SCt.forEach(t),lLr=r(KZ,` class
method.`),KZ.forEach(t),iLr=i(Ol),gx=n(Ol,"P",{});var bDe=s(gx);dLr=r(bDe,"This class cannot be instantiated directly using "),Z0e=n(bDe,"CODE",{});var RCt=s(Z0e);cLr=r(RCt,"__init__()"),RCt.forEach(t),fLr=r(bDe," (throws an error)."),bDe.forEach(t),mLr=i(Ol),Ot=n(Ol,"DIV",{class:!0});var IA=s(Ot);T(hx.$$.fragment,IA),gLr=i(IA),eTe=n(IA,"P",{});var PCt=s(eTe);hLr=r(PCt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),PCt.forEach(t),pLr=i(IA),Rc=n(IA,"P",{});var ZZ=s(Rc);uLr=r(ZZ,`Note:
Loading a model from its configuration file does `),oTe=n(ZZ,"STRONG",{});var BCt=s(oTe);_Lr=r(BCt,"not"),BCt.forEach(t),bLr=r(ZZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),wJ=n(ZZ,"A",{href:!0});var ICt=s(wJ);vLr=r(ICt,"from_pretrained()"),ICt.forEach(t),FLr=r(ZZ," to load the model weights."),ZZ.forEach(t),TLr=i(IA),T(qE.$$.fragment,IA),IA.forEach(t),MLr=i(Ol),Dr=n(Ol,"DIV",{class:!0});var Vl=s(Dr);T(px.$$.fragment,Vl),ELr=i(Vl),rTe=n(Vl,"P",{});var qCt=s(rTe);CLr=r(qCt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),qCt.forEach(t),wLr=i(Vl),pn=n(Vl,"P",{});var qA=s(pn);ALr=r(qA,"The model class to instantiate is selected based on the "),tTe=n(qA,"CODE",{});var NCt=s(tTe);yLr=r(NCt,"model_type"),NCt.forEach(t),LLr=r(qA,` property of the config object (either
passed as an argument or loaded from `),aTe=n(qA,"CODE",{});var jCt=s(aTe);xLr=r(jCt,"pretrained_model_name_or_path"),jCt.forEach(t),$Lr=r(qA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nTe=n(qA,"CODE",{});var DCt=s(nTe);kLr=r(DCt,"pretrained_model_name_or_path"),DCt.forEach(t),SLr=r(qA,":"),qA.forEach(t),RLr=i(Vl),Re=n(Vl,"UL",{});var Xe=s(Re);NE=n(Xe,"LI",{});var tBe=s(NE);sTe=n(tBe,"STRONG",{});var GCt=s(sTe);PLr=r(GCt,"bart"),GCt.forEach(t),BLr=r(tBe," \u2014 "),AJ=n(tBe,"A",{href:!0});var OCt=s(AJ);ILr=r(OCt,"FlaxBartForCausalLM"),OCt.forEach(t),qLr=r(tBe," (BART model)"),tBe.forEach(t),NLr=i(Xe),jE=n(Xe,"LI",{});var aBe=s(jE);lTe=n(aBe,"STRONG",{});var VCt=s(lTe);jLr=r(VCt,"bert"),VCt.forEach(t),DLr=r(aBe," \u2014 "),yJ=n(aBe,"A",{href:!0});var XCt=s(yJ);GLr=r(XCt,"FlaxBertForCausalLM"),XCt.forEach(t),OLr=r(aBe," (BERT model)"),aBe.forEach(t),VLr=i(Xe),DE=n(Xe,"LI",{});var nBe=s(DE);iTe=n(nBe,"STRONG",{});var zCt=s(iTe);XLr=r(zCt,"big_bird"),zCt.forEach(t),zLr=r(nBe," \u2014 "),LJ=n(nBe,"A",{href:!0});var WCt=s(LJ);WLr=r(WCt,"FlaxBigBirdForCausalLM"),WCt.forEach(t),QLr=r(nBe," (BigBird model)"),nBe.forEach(t),HLr=i(Xe),GE=n(Xe,"LI",{});var sBe=s(GE);dTe=n(sBe,"STRONG",{});var QCt=s(dTe);ULr=r(QCt,"electra"),QCt.forEach(t),JLr=r(sBe," \u2014 "),xJ=n(sBe,"A",{href:!0});var HCt=s(xJ);YLr=r(HCt,"FlaxElectraForCausalLM"),HCt.forEach(t),KLr=r(sBe," (ELECTRA model)"),sBe.forEach(t),ZLr=i(Xe),OE=n(Xe,"LI",{});var lBe=s(OE);cTe=n(lBe,"STRONG",{});var UCt=s(cTe);e8r=r(UCt,"gpt2"),UCt.forEach(t),o8r=r(lBe," \u2014 "),$J=n(lBe,"A",{href:!0});var JCt=s($J);r8r=r(JCt,"FlaxGPT2LMHeadModel"),JCt.forEach(t),t8r=r(lBe," (OpenAI GPT-2 model)"),lBe.forEach(t),a8r=i(Xe),VE=n(Xe,"LI",{});var iBe=s(VE);fTe=n(iBe,"STRONG",{});var YCt=s(fTe);n8r=r(YCt,"gpt_neo"),YCt.forEach(t),s8r=r(iBe," \u2014 "),kJ=n(iBe,"A",{href:!0});var KCt=s(kJ);l8r=r(KCt,"FlaxGPTNeoForCausalLM"),KCt.forEach(t),i8r=r(iBe," (GPT Neo model)"),iBe.forEach(t),d8r=i(Xe),XE=n(Xe,"LI",{});var dBe=s(XE);mTe=n(dBe,"STRONG",{});var ZCt=s(mTe);c8r=r(ZCt,"gptj"),ZCt.forEach(t),f8r=r(dBe," \u2014 "),SJ=n(dBe,"A",{href:!0});var e5t=s(SJ);m8r=r(e5t,"FlaxGPTJForCausalLM"),e5t.forEach(t),g8r=r(dBe," (GPT-J model)"),dBe.forEach(t),h8r=i(Xe),zE=n(Xe,"LI",{});var cBe=s(zE);gTe=n(cBe,"STRONG",{});var o5t=s(gTe);p8r=r(o5t,"roberta"),o5t.forEach(t),u8r=r(cBe," \u2014 "),RJ=n(cBe,"A",{href:!0});var r5t=s(RJ);_8r=r(r5t,"FlaxRobertaForCausalLM"),r5t.forEach(t),b8r=r(cBe," (RoBERTa model)"),cBe.forEach(t),v8r=i(Xe),WE=n(Xe,"LI",{});var fBe=s(WE);hTe=n(fBe,"STRONG",{});var t5t=s(hTe);F8r=r(t5t,"xglm"),t5t.forEach(t),T8r=r(fBe," \u2014 "),PJ=n(fBe,"A",{href:!0});var a5t=s(PJ);M8r=r(a5t,"FlaxXGLMForCausalLM"),a5t.forEach(t),E8r=r(fBe," (XGLM model)"),fBe.forEach(t),Xe.forEach(t),C8r=i(Vl),T(QE.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),mNe=i(f),Pc=n(f,"H2",{class:!0});var vDe=s(Pc);HE=n(vDe,"A",{id:!0,class:!0,href:!0});var n5t=s(HE);pTe=n(n5t,"SPAN",{});var s5t=s(pTe);T(ux.$$.fragment,s5t),s5t.forEach(t),n5t.forEach(t),w8r=i(vDe),uTe=n(vDe,"SPAN",{});var l5t=s(uTe);A8r=r(l5t,"FlaxAutoModelForPreTraining"),l5t.forEach(t),vDe.forEach(t),gNe=i(f),gr=n(f,"DIV",{class:!0});var Xl=s(gr);T(_x.$$.fragment,Xl),y8r=i(Xl),Bc=n(Xl,"P",{});var eee=s(Bc);L8r=r(eee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),BJ=n(eee,"A",{href:!0});var i5t=s(BJ);x8r=r(i5t,"from_pretrained()"),i5t.forEach(t),$8r=r(eee," class method or the "),IJ=n(eee,"A",{href:!0});var d5t=s(IJ);k8r=r(d5t,"from_config()"),d5t.forEach(t),S8r=r(eee,` class
method.`),eee.forEach(t),R8r=i(Xl),bx=n(Xl,"P",{});var FDe=s(bx);P8r=r(FDe,"This class cannot be instantiated directly using "),_Te=n(FDe,"CODE",{});var c5t=s(_Te);B8r=r(c5t,"__init__()"),c5t.forEach(t),I8r=r(FDe," (throws an error)."),FDe.forEach(t),q8r=i(Xl),Vt=n(Xl,"DIV",{class:!0});var NA=s(Vt);T(vx.$$.fragment,NA),N8r=i(NA),bTe=n(NA,"P",{});var f5t=s(bTe);j8r=r(f5t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),f5t.forEach(t),D8r=i(NA),Ic=n(NA,"P",{});var oee=s(Ic);G8r=r(oee,`Note:
Loading a model from its configuration file does `),vTe=n(oee,"STRONG",{});var m5t=s(vTe);O8r=r(m5t,"not"),m5t.forEach(t),V8r=r(oee,` load the model weights. It only affects the
model\u2019s configuration. Use `),qJ=n(oee,"A",{href:!0});var g5t=s(qJ);X8r=r(g5t,"from_pretrained()"),g5t.forEach(t),z8r=r(oee," to load the model weights."),oee.forEach(t),W8r=i(NA),T(UE.$$.fragment,NA),NA.forEach(t),Q8r=i(Xl),Gr=n(Xl,"DIV",{class:!0});var zl=s(Gr);T(Fx.$$.fragment,zl),H8r=i(zl),FTe=n(zl,"P",{});var h5t=s(FTe);U8r=r(h5t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),h5t.forEach(t),J8r=i(zl),un=n(zl,"P",{});var jA=s(un);Y8r=r(jA,"The model class to instantiate is selected based on the "),TTe=n(jA,"CODE",{});var p5t=s(TTe);K8r=r(p5t,"model_type"),p5t.forEach(t),Z8r=r(jA,` property of the config object (either
passed as an argument or loaded from `),MTe=n(jA,"CODE",{});var u5t=s(MTe);exr=r(u5t,"pretrained_model_name_or_path"),u5t.forEach(t),oxr=r(jA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ETe=n(jA,"CODE",{});var _5t=s(ETe);rxr=r(_5t,"pretrained_model_name_or_path"),_5t.forEach(t),txr=r(jA,":"),jA.forEach(t),axr=i(zl),Me=n(zl,"UL",{});var we=s(Me);JE=n(we,"LI",{});var mBe=s(JE);CTe=n(mBe,"STRONG",{});var b5t=s(CTe);nxr=r(b5t,"albert"),b5t.forEach(t),sxr=r(mBe," \u2014 "),NJ=n(mBe,"A",{href:!0});var v5t=s(NJ);lxr=r(v5t,"FlaxAlbertForPreTraining"),v5t.forEach(t),ixr=r(mBe," (ALBERT model)"),mBe.forEach(t),dxr=i(we),YE=n(we,"LI",{});var gBe=s(YE);wTe=n(gBe,"STRONG",{});var F5t=s(wTe);cxr=r(F5t,"bart"),F5t.forEach(t),fxr=r(gBe," \u2014 "),jJ=n(gBe,"A",{href:!0});var T5t=s(jJ);mxr=r(T5t,"FlaxBartForConditionalGeneration"),T5t.forEach(t),gxr=r(gBe," (BART model)"),gBe.forEach(t),hxr=i(we),KE=n(we,"LI",{});var hBe=s(KE);ATe=n(hBe,"STRONG",{});var M5t=s(ATe);pxr=r(M5t,"bert"),M5t.forEach(t),uxr=r(hBe," \u2014 "),DJ=n(hBe,"A",{href:!0});var E5t=s(DJ);_xr=r(E5t,"FlaxBertForPreTraining"),E5t.forEach(t),bxr=r(hBe," (BERT model)"),hBe.forEach(t),vxr=i(we),ZE=n(we,"LI",{});var pBe=s(ZE);yTe=n(pBe,"STRONG",{});var C5t=s(yTe);Fxr=r(C5t,"big_bird"),C5t.forEach(t),Txr=r(pBe," \u2014 "),GJ=n(pBe,"A",{href:!0});var w5t=s(GJ);Mxr=r(w5t,"FlaxBigBirdForPreTraining"),w5t.forEach(t),Exr=r(pBe," (BigBird model)"),pBe.forEach(t),Cxr=i(we),eC=n(we,"LI",{});var uBe=s(eC);LTe=n(uBe,"STRONG",{});var A5t=s(LTe);wxr=r(A5t,"electra"),A5t.forEach(t),Axr=r(uBe," \u2014 "),OJ=n(uBe,"A",{href:!0});var y5t=s(OJ);yxr=r(y5t,"FlaxElectraForPreTraining"),y5t.forEach(t),Lxr=r(uBe," (ELECTRA model)"),uBe.forEach(t),xxr=i(we),oC=n(we,"LI",{});var _Be=s(oC);xTe=n(_Be,"STRONG",{});var L5t=s(xTe);$xr=r(L5t,"mbart"),L5t.forEach(t),kxr=r(_Be," \u2014 "),VJ=n(_Be,"A",{href:!0});var x5t=s(VJ);Sxr=r(x5t,"FlaxMBartForConditionalGeneration"),x5t.forEach(t),Rxr=r(_Be," (mBART model)"),_Be.forEach(t),Pxr=i(we),rC=n(we,"LI",{});var bBe=s(rC);$Te=n(bBe,"STRONG",{});var $5t=s($Te);Bxr=r($5t,"mt5"),$5t.forEach(t),Ixr=r(bBe," \u2014 "),XJ=n(bBe,"A",{href:!0});var k5t=s(XJ);qxr=r(k5t,"FlaxMT5ForConditionalGeneration"),k5t.forEach(t),Nxr=r(bBe," (mT5 model)"),bBe.forEach(t),jxr=i(we),tC=n(we,"LI",{});var vBe=s(tC);kTe=n(vBe,"STRONG",{});var S5t=s(kTe);Dxr=r(S5t,"roberta"),S5t.forEach(t),Gxr=r(vBe," \u2014 "),zJ=n(vBe,"A",{href:!0});var R5t=s(zJ);Oxr=r(R5t,"FlaxRobertaForMaskedLM"),R5t.forEach(t),Vxr=r(vBe," (RoBERTa model)"),vBe.forEach(t),Xxr=i(we),aC=n(we,"LI",{});var FBe=s(aC);STe=n(FBe,"STRONG",{});var P5t=s(STe);zxr=r(P5t,"roformer"),P5t.forEach(t),Wxr=r(FBe," \u2014 "),WJ=n(FBe,"A",{href:!0});var B5t=s(WJ);Qxr=r(B5t,"FlaxRoFormerForMaskedLM"),B5t.forEach(t),Hxr=r(FBe," (RoFormer model)"),FBe.forEach(t),Uxr=i(we),nC=n(we,"LI",{});var TBe=s(nC);RTe=n(TBe,"STRONG",{});var I5t=s(RTe);Jxr=r(I5t,"t5"),I5t.forEach(t),Yxr=r(TBe," \u2014 "),QJ=n(TBe,"A",{href:!0});var q5t=s(QJ);Kxr=r(q5t,"FlaxT5ForConditionalGeneration"),q5t.forEach(t),Zxr=r(TBe," (T5 model)"),TBe.forEach(t),e9r=i(we),sC=n(we,"LI",{});var MBe=s(sC);PTe=n(MBe,"STRONG",{});var N5t=s(PTe);o9r=r(N5t,"wav2vec2"),N5t.forEach(t),r9r=r(MBe," \u2014 "),HJ=n(MBe,"A",{href:!0});var j5t=s(HJ);t9r=r(j5t,"FlaxWav2Vec2ForPreTraining"),j5t.forEach(t),a9r=r(MBe," (Wav2Vec2 model)"),MBe.forEach(t),n9r=i(we),lC=n(we,"LI",{});var EBe=s(lC);BTe=n(EBe,"STRONG",{});var D5t=s(BTe);s9r=r(D5t,"xlm-roberta"),D5t.forEach(t),l9r=r(EBe," \u2014 "),UJ=n(EBe,"A",{href:!0});var G5t=s(UJ);i9r=r(G5t,"FlaxXLMRobertaForMaskedLM"),G5t.forEach(t),d9r=r(EBe," (XLM-RoBERTa model)"),EBe.forEach(t),we.forEach(t),c9r=i(zl),T(iC.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),hNe=i(f),qc=n(f,"H2",{class:!0});var TDe=s(qc);dC=n(TDe,"A",{id:!0,class:!0,href:!0});var O5t=s(dC);ITe=n(O5t,"SPAN",{});var V5t=s(ITe);T(Tx.$$.fragment,V5t),V5t.forEach(t),O5t.forEach(t),f9r=i(TDe),qTe=n(TDe,"SPAN",{});var X5t=s(qTe);m9r=r(X5t,"FlaxAutoModelForMaskedLM"),X5t.forEach(t),TDe.forEach(t),pNe=i(f),hr=n(f,"DIV",{class:!0});var Wl=s(hr);T(Mx.$$.fragment,Wl),g9r=i(Wl),Nc=n(Wl,"P",{});var ree=s(Nc);h9r=r(ree,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),JJ=n(ree,"A",{href:!0});var z5t=s(JJ);p9r=r(z5t,"from_pretrained()"),z5t.forEach(t),u9r=r(ree," class method or the "),YJ=n(ree,"A",{href:!0});var W5t=s(YJ);_9r=r(W5t,"from_config()"),W5t.forEach(t),b9r=r(ree,` class
method.`),ree.forEach(t),v9r=i(Wl),Ex=n(Wl,"P",{});var MDe=s(Ex);F9r=r(MDe,"This class cannot be instantiated directly using "),NTe=n(MDe,"CODE",{});var Q5t=s(NTe);T9r=r(Q5t,"__init__()"),Q5t.forEach(t),M9r=r(MDe," (throws an error)."),MDe.forEach(t),E9r=i(Wl),Xt=n(Wl,"DIV",{class:!0});var DA=s(Xt);T(Cx.$$.fragment,DA),C9r=i(DA),jTe=n(DA,"P",{});var H5t=s(jTe);w9r=r(H5t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),H5t.forEach(t),A9r=i(DA),jc=n(DA,"P",{});var tee=s(jc);y9r=r(tee,`Note:
Loading a model from its configuration file does `),DTe=n(tee,"STRONG",{});var U5t=s(DTe);L9r=r(U5t,"not"),U5t.forEach(t),x9r=r(tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),KJ=n(tee,"A",{href:!0});var J5t=s(KJ);$9r=r(J5t,"from_pretrained()"),J5t.forEach(t),k9r=r(tee," to load the model weights."),tee.forEach(t),S9r=i(DA),T(cC.$$.fragment,DA),DA.forEach(t),R9r=i(Wl),Or=n(Wl,"DIV",{class:!0});var Ql=s(Or);T(wx.$$.fragment,Ql),P9r=i(Ql),GTe=n(Ql,"P",{});var Y5t=s(GTe);B9r=r(Y5t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Y5t.forEach(t),I9r=i(Ql),_n=n(Ql,"P",{});var GA=s(_n);q9r=r(GA,"The model class to instantiate is selected based on the "),OTe=n(GA,"CODE",{});var K5t=s(OTe);N9r=r(K5t,"model_type"),K5t.forEach(t),j9r=r(GA,` property of the config object (either
passed as an argument or loaded from `),VTe=n(GA,"CODE",{});var Z5t=s(VTe);D9r=r(Z5t,"pretrained_model_name_or_path"),Z5t.forEach(t),G9r=r(GA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XTe=n(GA,"CODE",{});var ewt=s(XTe);O9r=r(ewt,"pretrained_model_name_or_path"),ewt.forEach(t),V9r=r(GA,":"),GA.forEach(t),X9r=i(Ql),Le=n(Ql,"UL",{});var Ie=s(Le);fC=n(Ie,"LI",{});var CBe=s(fC);zTe=n(CBe,"STRONG",{});var owt=s(zTe);z9r=r(owt,"albert"),owt.forEach(t),W9r=r(CBe," \u2014 "),ZJ=n(CBe,"A",{href:!0});var rwt=s(ZJ);Q9r=r(rwt,"FlaxAlbertForMaskedLM"),rwt.forEach(t),H9r=r(CBe," (ALBERT model)"),CBe.forEach(t),U9r=i(Ie),mC=n(Ie,"LI",{});var wBe=s(mC);WTe=n(wBe,"STRONG",{});var twt=s(WTe);J9r=r(twt,"bart"),twt.forEach(t),Y9r=r(wBe," \u2014 "),eY=n(wBe,"A",{href:!0});var awt=s(eY);K9r=r(awt,"FlaxBartForConditionalGeneration"),awt.forEach(t),Z9r=r(wBe," (BART model)"),wBe.forEach(t),e$r=i(Ie),gC=n(Ie,"LI",{});var ABe=s(gC);QTe=n(ABe,"STRONG",{});var nwt=s(QTe);o$r=r(nwt,"bert"),nwt.forEach(t),r$r=r(ABe," \u2014 "),oY=n(ABe,"A",{href:!0});var swt=s(oY);t$r=r(swt,"FlaxBertForMaskedLM"),swt.forEach(t),a$r=r(ABe," (BERT model)"),ABe.forEach(t),n$r=i(Ie),hC=n(Ie,"LI",{});var yBe=s(hC);HTe=n(yBe,"STRONG",{});var lwt=s(HTe);s$r=r(lwt,"big_bird"),lwt.forEach(t),l$r=r(yBe," \u2014 "),rY=n(yBe,"A",{href:!0});var iwt=s(rY);i$r=r(iwt,"FlaxBigBirdForMaskedLM"),iwt.forEach(t),d$r=r(yBe," (BigBird model)"),yBe.forEach(t),c$r=i(Ie),pC=n(Ie,"LI",{});var LBe=s(pC);UTe=n(LBe,"STRONG",{});var dwt=s(UTe);f$r=r(dwt,"distilbert"),dwt.forEach(t),m$r=r(LBe," \u2014 "),tY=n(LBe,"A",{href:!0});var cwt=s(tY);g$r=r(cwt,"FlaxDistilBertForMaskedLM"),cwt.forEach(t),h$r=r(LBe," (DistilBERT model)"),LBe.forEach(t),p$r=i(Ie),uC=n(Ie,"LI",{});var xBe=s(uC);JTe=n(xBe,"STRONG",{});var fwt=s(JTe);u$r=r(fwt,"electra"),fwt.forEach(t),_$r=r(xBe," \u2014 "),aY=n(xBe,"A",{href:!0});var mwt=s(aY);b$r=r(mwt,"FlaxElectraForMaskedLM"),mwt.forEach(t),v$r=r(xBe," (ELECTRA model)"),xBe.forEach(t),F$r=i(Ie),_C=n(Ie,"LI",{});var $Be=s(_C);YTe=n($Be,"STRONG",{});var gwt=s(YTe);T$r=r(gwt,"mbart"),gwt.forEach(t),M$r=r($Be," \u2014 "),nY=n($Be,"A",{href:!0});var hwt=s(nY);E$r=r(hwt,"FlaxMBartForConditionalGeneration"),hwt.forEach(t),C$r=r($Be," (mBART model)"),$Be.forEach(t),w$r=i(Ie),bC=n(Ie,"LI",{});var kBe=s(bC);KTe=n(kBe,"STRONG",{});var pwt=s(KTe);A$r=r(pwt,"roberta"),pwt.forEach(t),y$r=r(kBe," \u2014 "),sY=n(kBe,"A",{href:!0});var uwt=s(sY);L$r=r(uwt,"FlaxRobertaForMaskedLM"),uwt.forEach(t),x$r=r(kBe," (RoBERTa model)"),kBe.forEach(t),$$r=i(Ie),vC=n(Ie,"LI",{});var SBe=s(vC);ZTe=n(SBe,"STRONG",{});var _wt=s(ZTe);k$r=r(_wt,"roformer"),_wt.forEach(t),S$r=r(SBe," \u2014 "),lY=n(SBe,"A",{href:!0});var bwt=s(lY);R$r=r(bwt,"FlaxRoFormerForMaskedLM"),bwt.forEach(t),P$r=r(SBe," (RoFormer model)"),SBe.forEach(t),B$r=i(Ie),FC=n(Ie,"LI",{});var RBe=s(FC);e7e=n(RBe,"STRONG",{});var vwt=s(e7e);I$r=r(vwt,"xlm-roberta"),vwt.forEach(t),q$r=r(RBe," \u2014 "),iY=n(RBe,"A",{href:!0});var Fwt=s(iY);N$r=r(Fwt,"FlaxXLMRobertaForMaskedLM"),Fwt.forEach(t),j$r=r(RBe," (XLM-RoBERTa model)"),RBe.forEach(t),Ie.forEach(t),D$r=i(Ql),T(TC.$$.fragment,Ql),Ql.forEach(t),Wl.forEach(t),uNe=i(f),Dc=n(f,"H2",{class:!0});var EDe=s(Dc);MC=n(EDe,"A",{id:!0,class:!0,href:!0});var Twt=s(MC);o7e=n(Twt,"SPAN",{});var Mwt=s(o7e);T(Ax.$$.fragment,Mwt),Mwt.forEach(t),Twt.forEach(t),G$r=i(EDe),r7e=n(EDe,"SPAN",{});var Ewt=s(r7e);O$r=r(Ewt,"FlaxAutoModelForSeq2SeqLM"),Ewt.forEach(t),EDe.forEach(t),_Ne=i(f),pr=n(f,"DIV",{class:!0});var Hl=s(pr);T(yx.$$.fragment,Hl),V$r=i(Hl),Gc=n(Hl,"P",{});var aee=s(Gc);X$r=r(aee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),dY=n(aee,"A",{href:!0});var Cwt=s(dY);z$r=r(Cwt,"from_pretrained()"),Cwt.forEach(t),W$r=r(aee," class method or the "),cY=n(aee,"A",{href:!0});var wwt=s(cY);Q$r=r(wwt,"from_config()"),wwt.forEach(t),H$r=r(aee,` class
method.`),aee.forEach(t),U$r=i(Hl),Lx=n(Hl,"P",{});var CDe=s(Lx);J$r=r(CDe,"This class cannot be instantiated directly using "),t7e=n(CDe,"CODE",{});var Awt=s(t7e);Y$r=r(Awt,"__init__()"),Awt.forEach(t),K$r=r(CDe," (throws an error)."),CDe.forEach(t),Z$r=i(Hl),zt=n(Hl,"DIV",{class:!0});var OA=s(zt);T(xx.$$.fragment,OA),ekr=i(OA),a7e=n(OA,"P",{});var ywt=s(a7e);okr=r(ywt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),ywt.forEach(t),rkr=i(OA),Oc=n(OA,"P",{});var nee=s(Oc);tkr=r(nee,`Note:
Loading a model from its configuration file does `),n7e=n(nee,"STRONG",{});var Lwt=s(n7e);akr=r(Lwt,"not"),Lwt.forEach(t),nkr=r(nee,` load the model weights. It only affects the
model\u2019s configuration. Use `),fY=n(nee,"A",{href:!0});var xwt=s(fY);skr=r(xwt,"from_pretrained()"),xwt.forEach(t),lkr=r(nee," to load the model weights."),nee.forEach(t),ikr=i(OA),T(EC.$$.fragment,OA),OA.forEach(t),dkr=i(Hl),Vr=n(Hl,"DIV",{class:!0});var Ul=s(Vr);T($x.$$.fragment,Ul),ckr=i(Ul),s7e=n(Ul,"P",{});var $wt=s(s7e);fkr=r($wt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),$wt.forEach(t),mkr=i(Ul),bn=n(Ul,"P",{});var VA=s(bn);gkr=r(VA,"The model class to instantiate is selected based on the "),l7e=n(VA,"CODE",{});var kwt=s(l7e);hkr=r(kwt,"model_type"),kwt.forEach(t),pkr=r(VA,` property of the config object (either
passed as an argument or loaded from `),i7e=n(VA,"CODE",{});var Swt=s(i7e);ukr=r(Swt,"pretrained_model_name_or_path"),Swt.forEach(t),_kr=r(VA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d7e=n(VA,"CODE",{});var Rwt=s(d7e);bkr=r(Rwt,"pretrained_model_name_or_path"),Rwt.forEach(t),vkr=r(VA,":"),VA.forEach(t),Fkr=i(Ul),Pe=n(Ul,"UL",{});var ze=s(Pe);CC=n(ze,"LI",{});var PBe=s(CC);c7e=n(PBe,"STRONG",{});var Pwt=s(c7e);Tkr=r(Pwt,"bart"),Pwt.forEach(t),Mkr=r(PBe," \u2014 "),mY=n(PBe,"A",{href:!0});var Bwt=s(mY);Ekr=r(Bwt,"FlaxBartForConditionalGeneration"),Bwt.forEach(t),Ckr=r(PBe," (BART model)"),PBe.forEach(t),wkr=i(ze),wC=n(ze,"LI",{});var BBe=s(wC);f7e=n(BBe,"STRONG",{});var Iwt=s(f7e);Akr=r(Iwt,"blenderbot"),Iwt.forEach(t),ykr=r(BBe," \u2014 "),gY=n(BBe,"A",{href:!0});var qwt=s(gY);Lkr=r(qwt,"FlaxBlenderbotForConditionalGeneration"),qwt.forEach(t),xkr=r(BBe," (Blenderbot model)"),BBe.forEach(t),$kr=i(ze),AC=n(ze,"LI",{});var IBe=s(AC);m7e=n(IBe,"STRONG",{});var Nwt=s(m7e);kkr=r(Nwt,"blenderbot-small"),Nwt.forEach(t),Skr=r(IBe," \u2014 "),hY=n(IBe,"A",{href:!0});var jwt=s(hY);Rkr=r(jwt,"FlaxBlenderbotSmallForConditionalGeneration"),jwt.forEach(t),Pkr=r(IBe," (BlenderbotSmall model)"),IBe.forEach(t),Bkr=i(ze),yC=n(ze,"LI",{});var qBe=s(yC);g7e=n(qBe,"STRONG",{});var Dwt=s(g7e);Ikr=r(Dwt,"encoder-decoder"),Dwt.forEach(t),qkr=r(qBe," \u2014 "),pY=n(qBe,"A",{href:!0});var Gwt=s(pY);Nkr=r(Gwt,"FlaxEncoderDecoderModel"),Gwt.forEach(t),jkr=r(qBe," (Encoder decoder model)"),qBe.forEach(t),Dkr=i(ze),LC=n(ze,"LI",{});var NBe=s(LC);h7e=n(NBe,"STRONG",{});var Owt=s(h7e);Gkr=r(Owt,"marian"),Owt.forEach(t),Okr=r(NBe," \u2014 "),uY=n(NBe,"A",{href:!0});var Vwt=s(uY);Vkr=r(Vwt,"FlaxMarianMTModel"),Vwt.forEach(t),Xkr=r(NBe," (Marian model)"),NBe.forEach(t),zkr=i(ze),xC=n(ze,"LI",{});var jBe=s(xC);p7e=n(jBe,"STRONG",{});var Xwt=s(p7e);Wkr=r(Xwt,"mbart"),Xwt.forEach(t),Qkr=r(jBe," \u2014 "),_Y=n(jBe,"A",{href:!0});var zwt=s(_Y);Hkr=r(zwt,"FlaxMBartForConditionalGeneration"),zwt.forEach(t),Ukr=r(jBe," (mBART model)"),jBe.forEach(t),Jkr=i(ze),$C=n(ze,"LI",{});var DBe=s($C);u7e=n(DBe,"STRONG",{});var Wwt=s(u7e);Ykr=r(Wwt,"mt5"),Wwt.forEach(t),Kkr=r(DBe," \u2014 "),bY=n(DBe,"A",{href:!0});var Qwt=s(bY);Zkr=r(Qwt,"FlaxMT5ForConditionalGeneration"),Qwt.forEach(t),eSr=r(DBe," (mT5 model)"),DBe.forEach(t),oSr=i(ze),kC=n(ze,"LI",{});var GBe=s(kC);_7e=n(GBe,"STRONG",{});var Hwt=s(_7e);rSr=r(Hwt,"pegasus"),Hwt.forEach(t),tSr=r(GBe," \u2014 "),vY=n(GBe,"A",{href:!0});var Uwt=s(vY);aSr=r(Uwt,"FlaxPegasusForConditionalGeneration"),Uwt.forEach(t),nSr=r(GBe," (Pegasus model)"),GBe.forEach(t),sSr=i(ze),SC=n(ze,"LI",{});var OBe=s(SC);b7e=n(OBe,"STRONG",{});var Jwt=s(b7e);lSr=r(Jwt,"t5"),Jwt.forEach(t),iSr=r(OBe," \u2014 "),FY=n(OBe,"A",{href:!0});var Ywt=s(FY);dSr=r(Ywt,"FlaxT5ForConditionalGeneration"),Ywt.forEach(t),cSr=r(OBe," (T5 model)"),OBe.forEach(t),ze.forEach(t),fSr=i(Ul),T(RC.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),bNe=i(f),Vc=n(f,"H2",{class:!0});var wDe=s(Vc);PC=n(wDe,"A",{id:!0,class:!0,href:!0});var Kwt=s(PC);v7e=n(Kwt,"SPAN",{});var Zwt=s(v7e);T(kx.$$.fragment,Zwt),Zwt.forEach(t),Kwt.forEach(t),mSr=i(wDe),F7e=n(wDe,"SPAN",{});var eAt=s(F7e);gSr=r(eAt,"FlaxAutoModelForSequenceClassification"),eAt.forEach(t),wDe.forEach(t),vNe=i(f),ur=n(f,"DIV",{class:!0});var Jl=s(ur);T(Sx.$$.fragment,Jl),hSr=i(Jl),Xc=n(Jl,"P",{});var see=s(Xc);pSr=r(see,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),TY=n(see,"A",{href:!0});var oAt=s(TY);uSr=r(oAt,"from_pretrained()"),oAt.forEach(t),_Sr=r(see," class method or the "),MY=n(see,"A",{href:!0});var rAt=s(MY);bSr=r(rAt,"from_config()"),rAt.forEach(t),vSr=r(see,` class
method.`),see.forEach(t),FSr=i(Jl),Rx=n(Jl,"P",{});var ADe=s(Rx);TSr=r(ADe,"This class cannot be instantiated directly using "),T7e=n(ADe,"CODE",{});var tAt=s(T7e);MSr=r(tAt,"__init__()"),tAt.forEach(t),ESr=r(ADe," (throws an error)."),ADe.forEach(t),CSr=i(Jl),Wt=n(Jl,"DIV",{class:!0});var XA=s(Wt);T(Px.$$.fragment,XA),wSr=i(XA),M7e=n(XA,"P",{});var aAt=s(M7e);ASr=r(aAt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),aAt.forEach(t),ySr=i(XA),zc=n(XA,"P",{});var lee=s(zc);LSr=r(lee,`Note:
Loading a model from its configuration file does `),E7e=n(lee,"STRONG",{});var nAt=s(E7e);xSr=r(nAt,"not"),nAt.forEach(t),$Sr=r(lee,` load the model weights. It only affects the
model\u2019s configuration. Use `),EY=n(lee,"A",{href:!0});var sAt=s(EY);kSr=r(sAt,"from_pretrained()"),sAt.forEach(t),SSr=r(lee," to load the model weights."),lee.forEach(t),RSr=i(XA),T(BC.$$.fragment,XA),XA.forEach(t),PSr=i(Jl),Xr=n(Jl,"DIV",{class:!0});var Yl=s(Xr);T(Bx.$$.fragment,Yl),BSr=i(Yl),C7e=n(Yl,"P",{});var lAt=s(C7e);ISr=r(lAt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),lAt.forEach(t),qSr=i(Yl),vn=n(Yl,"P",{});var zA=s(vn);NSr=r(zA,"The model class to instantiate is selected based on the "),w7e=n(zA,"CODE",{});var iAt=s(w7e);jSr=r(iAt,"model_type"),iAt.forEach(t),DSr=r(zA,` property of the config object (either
passed as an argument or loaded from `),A7e=n(zA,"CODE",{});var dAt=s(A7e);GSr=r(dAt,"pretrained_model_name_or_path"),dAt.forEach(t),OSr=r(zA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y7e=n(zA,"CODE",{});var cAt=s(y7e);VSr=r(cAt,"pretrained_model_name_or_path"),cAt.forEach(t),XSr=r(zA,":"),zA.forEach(t),zSr=i(Yl),xe=n(Yl,"UL",{});var qe=s(xe);IC=n(qe,"LI",{});var VBe=s(IC);L7e=n(VBe,"STRONG",{});var fAt=s(L7e);WSr=r(fAt,"albert"),fAt.forEach(t),QSr=r(VBe," \u2014 "),CY=n(VBe,"A",{href:!0});var mAt=s(CY);HSr=r(mAt,"FlaxAlbertForSequenceClassification"),mAt.forEach(t),USr=r(VBe," (ALBERT model)"),VBe.forEach(t),JSr=i(qe),qC=n(qe,"LI",{});var XBe=s(qC);x7e=n(XBe,"STRONG",{});var gAt=s(x7e);YSr=r(gAt,"bart"),gAt.forEach(t),KSr=r(XBe," \u2014 "),wY=n(XBe,"A",{href:!0});var hAt=s(wY);ZSr=r(hAt,"FlaxBartForSequenceClassification"),hAt.forEach(t),eRr=r(XBe," (BART model)"),XBe.forEach(t),oRr=i(qe),NC=n(qe,"LI",{});var zBe=s(NC);$7e=n(zBe,"STRONG",{});var pAt=s($7e);rRr=r(pAt,"bert"),pAt.forEach(t),tRr=r(zBe," \u2014 "),AY=n(zBe,"A",{href:!0});var uAt=s(AY);aRr=r(uAt,"FlaxBertForSequenceClassification"),uAt.forEach(t),nRr=r(zBe," (BERT model)"),zBe.forEach(t),sRr=i(qe),jC=n(qe,"LI",{});var WBe=s(jC);k7e=n(WBe,"STRONG",{});var _At=s(k7e);lRr=r(_At,"big_bird"),_At.forEach(t),iRr=r(WBe," \u2014 "),yY=n(WBe,"A",{href:!0});var bAt=s(yY);dRr=r(bAt,"FlaxBigBirdForSequenceClassification"),bAt.forEach(t),cRr=r(WBe," (BigBird model)"),WBe.forEach(t),fRr=i(qe),DC=n(qe,"LI",{});var QBe=s(DC);S7e=n(QBe,"STRONG",{});var vAt=s(S7e);mRr=r(vAt,"distilbert"),vAt.forEach(t),gRr=r(QBe," \u2014 "),LY=n(QBe,"A",{href:!0});var FAt=s(LY);hRr=r(FAt,"FlaxDistilBertForSequenceClassification"),FAt.forEach(t),pRr=r(QBe," (DistilBERT model)"),QBe.forEach(t),uRr=i(qe),GC=n(qe,"LI",{});var HBe=s(GC);R7e=n(HBe,"STRONG",{});var TAt=s(R7e);_Rr=r(TAt,"electra"),TAt.forEach(t),bRr=r(HBe," \u2014 "),xY=n(HBe,"A",{href:!0});var MAt=s(xY);vRr=r(MAt,"FlaxElectraForSequenceClassification"),MAt.forEach(t),FRr=r(HBe," (ELECTRA model)"),HBe.forEach(t),TRr=i(qe),OC=n(qe,"LI",{});var UBe=s(OC);P7e=n(UBe,"STRONG",{});var EAt=s(P7e);MRr=r(EAt,"mbart"),EAt.forEach(t),ERr=r(UBe," \u2014 "),$Y=n(UBe,"A",{href:!0});var CAt=s($Y);CRr=r(CAt,"FlaxMBartForSequenceClassification"),CAt.forEach(t),wRr=r(UBe," (mBART model)"),UBe.forEach(t),ARr=i(qe),VC=n(qe,"LI",{});var JBe=s(VC);B7e=n(JBe,"STRONG",{});var wAt=s(B7e);yRr=r(wAt,"roberta"),wAt.forEach(t),LRr=r(JBe," \u2014 "),kY=n(JBe,"A",{href:!0});var AAt=s(kY);xRr=r(AAt,"FlaxRobertaForSequenceClassification"),AAt.forEach(t),$Rr=r(JBe," (RoBERTa model)"),JBe.forEach(t),kRr=i(qe),XC=n(qe,"LI",{});var YBe=s(XC);I7e=n(YBe,"STRONG",{});var yAt=s(I7e);SRr=r(yAt,"roformer"),yAt.forEach(t),RRr=r(YBe," \u2014 "),SY=n(YBe,"A",{href:!0});var LAt=s(SY);PRr=r(LAt,"FlaxRoFormerForSequenceClassification"),LAt.forEach(t),BRr=r(YBe," (RoFormer model)"),YBe.forEach(t),IRr=i(qe),zC=n(qe,"LI",{});var KBe=s(zC);q7e=n(KBe,"STRONG",{});var xAt=s(q7e);qRr=r(xAt,"xlm-roberta"),xAt.forEach(t),NRr=r(KBe," \u2014 "),RY=n(KBe,"A",{href:!0});var $At=s(RY);jRr=r($At,"FlaxXLMRobertaForSequenceClassification"),$At.forEach(t),DRr=r(KBe," (XLM-RoBERTa model)"),KBe.forEach(t),qe.forEach(t),GRr=i(Yl),T(WC.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),FNe=i(f),Wc=n(f,"H2",{class:!0});var yDe=s(Wc);QC=n(yDe,"A",{id:!0,class:!0,href:!0});var kAt=s(QC);N7e=n(kAt,"SPAN",{});var SAt=s(N7e);T(Ix.$$.fragment,SAt),SAt.forEach(t),kAt.forEach(t),ORr=i(yDe),j7e=n(yDe,"SPAN",{});var RAt=s(j7e);VRr=r(RAt,"FlaxAutoModelForQuestionAnswering"),RAt.forEach(t),yDe.forEach(t),TNe=i(f),_r=n(f,"DIV",{class:!0});var Kl=s(_r);T(qx.$$.fragment,Kl),XRr=i(Kl),Qc=n(Kl,"P",{});var iee=s(Qc);zRr=r(iee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),PY=n(iee,"A",{href:!0});var PAt=s(PY);WRr=r(PAt,"from_pretrained()"),PAt.forEach(t),QRr=r(iee," class method or the "),BY=n(iee,"A",{href:!0});var BAt=s(BY);HRr=r(BAt,"from_config()"),BAt.forEach(t),URr=r(iee,` class
method.`),iee.forEach(t),JRr=i(Kl),Nx=n(Kl,"P",{});var LDe=s(Nx);YRr=r(LDe,"This class cannot be instantiated directly using "),D7e=n(LDe,"CODE",{});var IAt=s(D7e);KRr=r(IAt,"__init__()"),IAt.forEach(t),ZRr=r(LDe," (throws an error)."),LDe.forEach(t),ePr=i(Kl),Qt=n(Kl,"DIV",{class:!0});var WA=s(Qt);T(jx.$$.fragment,WA),oPr=i(WA),G7e=n(WA,"P",{});var qAt=s(G7e);rPr=r(qAt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),qAt.forEach(t),tPr=i(WA),Hc=n(WA,"P",{});var dee=s(Hc);aPr=r(dee,`Note:
Loading a model from its configuration file does `),O7e=n(dee,"STRONG",{});var NAt=s(O7e);nPr=r(NAt,"not"),NAt.forEach(t),sPr=r(dee,` load the model weights. It only affects the
model\u2019s configuration. Use `),IY=n(dee,"A",{href:!0});var jAt=s(IY);lPr=r(jAt,"from_pretrained()"),jAt.forEach(t),iPr=r(dee," to load the model weights."),dee.forEach(t),dPr=i(WA),T(HC.$$.fragment,WA),WA.forEach(t),cPr=i(Kl),zr=n(Kl,"DIV",{class:!0});var Zl=s(zr);T(Dx.$$.fragment,Zl),fPr=i(Zl),V7e=n(Zl,"P",{});var DAt=s(V7e);mPr=r(DAt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),DAt.forEach(t),gPr=i(Zl),Fn=n(Zl,"P",{});var QA=s(Fn);hPr=r(QA,"The model class to instantiate is selected based on the "),X7e=n(QA,"CODE",{});var GAt=s(X7e);pPr=r(GAt,"model_type"),GAt.forEach(t),uPr=r(QA,` property of the config object (either
passed as an argument or loaded from `),z7e=n(QA,"CODE",{});var OAt=s(z7e);_Pr=r(OAt,"pretrained_model_name_or_path"),OAt.forEach(t),bPr=r(QA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W7e=n(QA,"CODE",{});var VAt=s(W7e);vPr=r(VAt,"pretrained_model_name_or_path"),VAt.forEach(t),FPr=r(QA,":"),QA.forEach(t),TPr=i(Zl),$e=n(Zl,"UL",{});var Ne=s($e);UC=n(Ne,"LI",{});var ZBe=s(UC);Q7e=n(ZBe,"STRONG",{});var XAt=s(Q7e);MPr=r(XAt,"albert"),XAt.forEach(t),EPr=r(ZBe," \u2014 "),qY=n(ZBe,"A",{href:!0});var zAt=s(qY);CPr=r(zAt,"FlaxAlbertForQuestionAnswering"),zAt.forEach(t),wPr=r(ZBe," (ALBERT model)"),ZBe.forEach(t),APr=i(Ne),JC=n(Ne,"LI",{});var eIe=s(JC);H7e=n(eIe,"STRONG",{});var WAt=s(H7e);yPr=r(WAt,"bart"),WAt.forEach(t),LPr=r(eIe," \u2014 "),NY=n(eIe,"A",{href:!0});var QAt=s(NY);xPr=r(QAt,"FlaxBartForQuestionAnswering"),QAt.forEach(t),$Pr=r(eIe," (BART model)"),eIe.forEach(t),kPr=i(Ne),YC=n(Ne,"LI",{});var oIe=s(YC);U7e=n(oIe,"STRONG",{});var HAt=s(U7e);SPr=r(HAt,"bert"),HAt.forEach(t),RPr=r(oIe," \u2014 "),jY=n(oIe,"A",{href:!0});var UAt=s(jY);PPr=r(UAt,"FlaxBertForQuestionAnswering"),UAt.forEach(t),BPr=r(oIe," (BERT model)"),oIe.forEach(t),IPr=i(Ne),KC=n(Ne,"LI",{});var rIe=s(KC);J7e=n(rIe,"STRONG",{});var JAt=s(J7e);qPr=r(JAt,"big_bird"),JAt.forEach(t),NPr=r(rIe," \u2014 "),DY=n(rIe,"A",{href:!0});var YAt=s(DY);jPr=r(YAt,"FlaxBigBirdForQuestionAnswering"),YAt.forEach(t),DPr=r(rIe," (BigBird model)"),rIe.forEach(t),GPr=i(Ne),ZC=n(Ne,"LI",{});var tIe=s(ZC);Y7e=n(tIe,"STRONG",{});var KAt=s(Y7e);OPr=r(KAt,"distilbert"),KAt.forEach(t),VPr=r(tIe," \u2014 "),GY=n(tIe,"A",{href:!0});var ZAt=s(GY);XPr=r(ZAt,"FlaxDistilBertForQuestionAnswering"),ZAt.forEach(t),zPr=r(tIe," (DistilBERT model)"),tIe.forEach(t),WPr=i(Ne),e5=n(Ne,"LI",{});var aIe=s(e5);K7e=n(aIe,"STRONG",{});var e6t=s(K7e);QPr=r(e6t,"electra"),e6t.forEach(t),HPr=r(aIe," \u2014 "),OY=n(aIe,"A",{href:!0});var o6t=s(OY);UPr=r(o6t,"FlaxElectraForQuestionAnswering"),o6t.forEach(t),JPr=r(aIe," (ELECTRA model)"),aIe.forEach(t),YPr=i(Ne),o5=n(Ne,"LI",{});var nIe=s(o5);Z7e=n(nIe,"STRONG",{});var r6t=s(Z7e);KPr=r(r6t,"mbart"),r6t.forEach(t),ZPr=r(nIe," \u2014 "),VY=n(nIe,"A",{href:!0});var t6t=s(VY);eBr=r(t6t,"FlaxMBartForQuestionAnswering"),t6t.forEach(t),oBr=r(nIe," (mBART model)"),nIe.forEach(t),rBr=i(Ne),r5=n(Ne,"LI",{});var sIe=s(r5);eMe=n(sIe,"STRONG",{});var a6t=s(eMe);tBr=r(a6t,"roberta"),a6t.forEach(t),aBr=r(sIe," \u2014 "),XY=n(sIe,"A",{href:!0});var n6t=s(XY);nBr=r(n6t,"FlaxRobertaForQuestionAnswering"),n6t.forEach(t),sBr=r(sIe," (RoBERTa model)"),sIe.forEach(t),lBr=i(Ne),t5=n(Ne,"LI",{});var lIe=s(t5);oMe=n(lIe,"STRONG",{});var s6t=s(oMe);iBr=r(s6t,"roformer"),s6t.forEach(t),dBr=r(lIe," \u2014 "),zY=n(lIe,"A",{href:!0});var l6t=s(zY);cBr=r(l6t,"FlaxRoFormerForQuestionAnswering"),l6t.forEach(t),fBr=r(lIe," (RoFormer model)"),lIe.forEach(t),mBr=i(Ne),a5=n(Ne,"LI",{});var iIe=s(a5);rMe=n(iIe,"STRONG",{});var i6t=s(rMe);gBr=r(i6t,"xlm-roberta"),i6t.forEach(t),hBr=r(iIe," \u2014 "),WY=n(iIe,"A",{href:!0});var d6t=s(WY);pBr=r(d6t,"FlaxXLMRobertaForQuestionAnswering"),d6t.forEach(t),uBr=r(iIe," (XLM-RoBERTa model)"),iIe.forEach(t),Ne.forEach(t),_Br=i(Zl),T(n5.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),MNe=i(f),Uc=n(f,"H2",{class:!0});var xDe=s(Uc);s5=n(xDe,"A",{id:!0,class:!0,href:!0});var c6t=s(s5);tMe=n(c6t,"SPAN",{});var f6t=s(tMe);T(Gx.$$.fragment,f6t),f6t.forEach(t),c6t.forEach(t),bBr=i(xDe),aMe=n(xDe,"SPAN",{});var m6t=s(aMe);vBr=r(m6t,"FlaxAutoModelForTokenClassification"),m6t.forEach(t),xDe.forEach(t),ENe=i(f),br=n(f,"DIV",{class:!0});var ei=s(br);T(Ox.$$.fragment,ei),FBr=i(ei),Jc=n(ei,"P",{});var cee=s(Jc);TBr=r(cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),QY=n(cee,"A",{href:!0});var g6t=s(QY);MBr=r(g6t,"from_pretrained()"),g6t.forEach(t),EBr=r(cee," class method or the "),HY=n(cee,"A",{href:!0});var h6t=s(HY);CBr=r(h6t,"from_config()"),h6t.forEach(t),wBr=r(cee,` class
method.`),cee.forEach(t),ABr=i(ei),Vx=n(ei,"P",{});var $De=s(Vx);yBr=r($De,"This class cannot be instantiated directly using "),nMe=n($De,"CODE",{});var p6t=s(nMe);LBr=r(p6t,"__init__()"),p6t.forEach(t),xBr=r($De," (throws an error)."),$De.forEach(t),$Br=i(ei),Ht=n(ei,"DIV",{class:!0});var HA=s(Ht);T(Xx.$$.fragment,HA),kBr=i(HA),sMe=n(HA,"P",{});var u6t=s(sMe);SBr=r(u6t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),u6t.forEach(t),RBr=i(HA),Yc=n(HA,"P",{});var fee=s(Yc);PBr=r(fee,`Note:
Loading a model from its configuration file does `),lMe=n(fee,"STRONG",{});var _6t=s(lMe);BBr=r(_6t,"not"),_6t.forEach(t),IBr=r(fee,` load the model weights. It only affects the
model\u2019s configuration. Use `),UY=n(fee,"A",{href:!0});var b6t=s(UY);qBr=r(b6t,"from_pretrained()"),b6t.forEach(t),NBr=r(fee," to load the model weights."),fee.forEach(t),jBr=i(HA),T(l5.$$.fragment,HA),HA.forEach(t),DBr=i(ei),Wr=n(ei,"DIV",{class:!0});var oi=s(Wr);T(zx.$$.fragment,oi),GBr=i(oi),iMe=n(oi,"P",{});var v6t=s(iMe);OBr=r(v6t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),v6t.forEach(t),VBr=i(oi),Tn=n(oi,"P",{});var UA=s(Tn);XBr=r(UA,"The model class to instantiate is selected based on the "),dMe=n(UA,"CODE",{});var F6t=s(dMe);zBr=r(F6t,"model_type"),F6t.forEach(t),WBr=r(UA,` property of the config object (either
passed as an argument or loaded from `),cMe=n(UA,"CODE",{});var T6t=s(cMe);QBr=r(T6t,"pretrained_model_name_or_path"),T6t.forEach(t),HBr=r(UA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fMe=n(UA,"CODE",{});var M6t=s(fMe);UBr=r(M6t,"pretrained_model_name_or_path"),M6t.forEach(t),JBr=r(UA,":"),UA.forEach(t),YBr=i(oi),De=n(oi,"UL",{});var Fo=s(De);i5=n(Fo,"LI",{});var dIe=s(i5);mMe=n(dIe,"STRONG",{});var E6t=s(mMe);KBr=r(E6t,"albert"),E6t.forEach(t),ZBr=r(dIe," \u2014 "),JY=n(dIe,"A",{href:!0});var C6t=s(JY);eIr=r(C6t,"FlaxAlbertForTokenClassification"),C6t.forEach(t),oIr=r(dIe," (ALBERT model)"),dIe.forEach(t),rIr=i(Fo),d5=n(Fo,"LI",{});var cIe=s(d5);gMe=n(cIe,"STRONG",{});var w6t=s(gMe);tIr=r(w6t,"bert"),w6t.forEach(t),aIr=r(cIe," \u2014 "),YY=n(cIe,"A",{href:!0});var A6t=s(YY);nIr=r(A6t,"FlaxBertForTokenClassification"),A6t.forEach(t),sIr=r(cIe," (BERT model)"),cIe.forEach(t),lIr=i(Fo),c5=n(Fo,"LI",{});var fIe=s(c5);hMe=n(fIe,"STRONG",{});var y6t=s(hMe);iIr=r(y6t,"big_bird"),y6t.forEach(t),dIr=r(fIe," \u2014 "),KY=n(fIe,"A",{href:!0});var L6t=s(KY);cIr=r(L6t,"FlaxBigBirdForTokenClassification"),L6t.forEach(t),fIr=r(fIe," (BigBird model)"),fIe.forEach(t),mIr=i(Fo),f5=n(Fo,"LI",{});var mIe=s(f5);pMe=n(mIe,"STRONG",{});var x6t=s(pMe);gIr=r(x6t,"distilbert"),x6t.forEach(t),hIr=r(mIe," \u2014 "),ZY=n(mIe,"A",{href:!0});var $6t=s(ZY);pIr=r($6t,"FlaxDistilBertForTokenClassification"),$6t.forEach(t),uIr=r(mIe," (DistilBERT model)"),mIe.forEach(t),_Ir=i(Fo),m5=n(Fo,"LI",{});var gIe=s(m5);uMe=n(gIe,"STRONG",{});var k6t=s(uMe);bIr=r(k6t,"electra"),k6t.forEach(t),vIr=r(gIe," \u2014 "),eK=n(gIe,"A",{href:!0});var S6t=s(eK);FIr=r(S6t,"FlaxElectraForTokenClassification"),S6t.forEach(t),TIr=r(gIe," (ELECTRA model)"),gIe.forEach(t),MIr=i(Fo),g5=n(Fo,"LI",{});var hIe=s(g5);_Me=n(hIe,"STRONG",{});var R6t=s(_Me);EIr=r(R6t,"roberta"),R6t.forEach(t),CIr=r(hIe," \u2014 "),oK=n(hIe,"A",{href:!0});var P6t=s(oK);wIr=r(P6t,"FlaxRobertaForTokenClassification"),P6t.forEach(t),AIr=r(hIe," (RoBERTa model)"),hIe.forEach(t),yIr=i(Fo),h5=n(Fo,"LI",{});var pIe=s(h5);bMe=n(pIe,"STRONG",{});var B6t=s(bMe);LIr=r(B6t,"roformer"),B6t.forEach(t),xIr=r(pIe," \u2014 "),rK=n(pIe,"A",{href:!0});var I6t=s(rK);$Ir=r(I6t,"FlaxRoFormerForTokenClassification"),I6t.forEach(t),kIr=r(pIe," (RoFormer model)"),pIe.forEach(t),SIr=i(Fo),p5=n(Fo,"LI",{});var uIe=s(p5);vMe=n(uIe,"STRONG",{});var q6t=s(vMe);RIr=r(q6t,"xlm-roberta"),q6t.forEach(t),PIr=r(uIe," \u2014 "),tK=n(uIe,"A",{href:!0});var N6t=s(tK);BIr=r(N6t,"FlaxXLMRobertaForTokenClassification"),N6t.forEach(t),IIr=r(uIe," (XLM-RoBERTa model)"),uIe.forEach(t),Fo.forEach(t),qIr=i(oi),T(u5.$$.fragment,oi),oi.forEach(t),ei.forEach(t),CNe=i(f),Kc=n(f,"H2",{class:!0});var kDe=s(Kc);_5=n(kDe,"A",{id:!0,class:!0,href:!0});var j6t=s(_5);FMe=n(j6t,"SPAN",{});var D6t=s(FMe);T(Wx.$$.fragment,D6t),D6t.forEach(t),j6t.forEach(t),NIr=i(kDe),TMe=n(kDe,"SPAN",{});var G6t=s(TMe);jIr=r(G6t,"FlaxAutoModelForMultipleChoice"),G6t.forEach(t),kDe.forEach(t),wNe=i(f),vr=n(f,"DIV",{class:!0});var ri=s(vr);T(Qx.$$.fragment,ri),DIr=i(ri),Zc=n(ri,"P",{});var mee=s(Zc);GIr=r(mee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),aK=n(mee,"A",{href:!0});var O6t=s(aK);OIr=r(O6t,"from_pretrained()"),O6t.forEach(t),VIr=r(mee," class method or the "),nK=n(mee,"A",{href:!0});var V6t=s(nK);XIr=r(V6t,"from_config()"),V6t.forEach(t),zIr=r(mee,` class
method.`),mee.forEach(t),WIr=i(ri),Hx=n(ri,"P",{});var SDe=s(Hx);QIr=r(SDe,"This class cannot be instantiated directly using "),MMe=n(SDe,"CODE",{});var X6t=s(MMe);HIr=r(X6t,"__init__()"),X6t.forEach(t),UIr=r(SDe," (throws an error)."),SDe.forEach(t),JIr=i(ri),Ut=n(ri,"DIV",{class:!0});var JA=s(Ut);T(Ux.$$.fragment,JA),YIr=i(JA),EMe=n(JA,"P",{});var z6t=s(EMe);KIr=r(z6t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),z6t.forEach(t),ZIr=i(JA),ef=n(JA,"P",{});var gee=s(ef);eqr=r(gee,`Note:
Loading a model from its configuration file does `),CMe=n(gee,"STRONG",{});var W6t=s(CMe);oqr=r(W6t,"not"),W6t.forEach(t),rqr=r(gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),sK=n(gee,"A",{href:!0});var Q6t=s(sK);tqr=r(Q6t,"from_pretrained()"),Q6t.forEach(t),aqr=r(gee," to load the model weights."),gee.forEach(t),nqr=i(JA),T(b5.$$.fragment,JA),JA.forEach(t),sqr=i(ri),Qr=n(ri,"DIV",{class:!0});var ti=s(Qr);T(Jx.$$.fragment,ti),lqr=i(ti),wMe=n(ti,"P",{});var H6t=s(wMe);iqr=r(H6t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),H6t.forEach(t),dqr=i(ti),Mn=n(ti,"P",{});var YA=s(Mn);cqr=r(YA,"The model class to instantiate is selected based on the "),AMe=n(YA,"CODE",{});var U6t=s(AMe);fqr=r(U6t,"model_type"),U6t.forEach(t),mqr=r(YA,` property of the config object (either
passed as an argument or loaded from `),yMe=n(YA,"CODE",{});var J6t=s(yMe);gqr=r(J6t,"pretrained_model_name_or_path"),J6t.forEach(t),hqr=r(YA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LMe=n(YA,"CODE",{});var Y6t=s(LMe);pqr=r(Y6t,"pretrained_model_name_or_path"),Y6t.forEach(t),uqr=r(YA,":"),YA.forEach(t),_qr=i(ti),Ge=n(ti,"UL",{});var To=s(Ge);v5=n(To,"LI",{});var _Ie=s(v5);xMe=n(_Ie,"STRONG",{});var K6t=s(xMe);bqr=r(K6t,"albert"),K6t.forEach(t),vqr=r(_Ie," \u2014 "),lK=n(_Ie,"A",{href:!0});var Z6t=s(lK);Fqr=r(Z6t,"FlaxAlbertForMultipleChoice"),Z6t.forEach(t),Tqr=r(_Ie," (ALBERT model)"),_Ie.forEach(t),Mqr=i(To),F5=n(To,"LI",{});var bIe=s(F5);$Me=n(bIe,"STRONG",{});var eyt=s($Me);Eqr=r(eyt,"bert"),eyt.forEach(t),Cqr=r(bIe," \u2014 "),iK=n(bIe,"A",{href:!0});var oyt=s(iK);wqr=r(oyt,"FlaxBertForMultipleChoice"),oyt.forEach(t),Aqr=r(bIe," (BERT model)"),bIe.forEach(t),yqr=i(To),T5=n(To,"LI",{});var vIe=s(T5);kMe=n(vIe,"STRONG",{});var ryt=s(kMe);Lqr=r(ryt,"big_bird"),ryt.forEach(t),xqr=r(vIe," \u2014 "),dK=n(vIe,"A",{href:!0});var tyt=s(dK);$qr=r(tyt,"FlaxBigBirdForMultipleChoice"),tyt.forEach(t),kqr=r(vIe," (BigBird model)"),vIe.forEach(t),Sqr=i(To),M5=n(To,"LI",{});var FIe=s(M5);SMe=n(FIe,"STRONG",{});var ayt=s(SMe);Rqr=r(ayt,"distilbert"),ayt.forEach(t),Pqr=r(FIe," \u2014 "),cK=n(FIe,"A",{href:!0});var nyt=s(cK);Bqr=r(nyt,"FlaxDistilBertForMultipleChoice"),nyt.forEach(t),Iqr=r(FIe," (DistilBERT model)"),FIe.forEach(t),qqr=i(To),E5=n(To,"LI",{});var TIe=s(E5);RMe=n(TIe,"STRONG",{});var syt=s(RMe);Nqr=r(syt,"electra"),syt.forEach(t),jqr=r(TIe," \u2014 "),fK=n(TIe,"A",{href:!0});var lyt=s(fK);Dqr=r(lyt,"FlaxElectraForMultipleChoice"),lyt.forEach(t),Gqr=r(TIe," (ELECTRA model)"),TIe.forEach(t),Oqr=i(To),C5=n(To,"LI",{});var MIe=s(C5);PMe=n(MIe,"STRONG",{});var iyt=s(PMe);Vqr=r(iyt,"roberta"),iyt.forEach(t),Xqr=r(MIe," \u2014 "),mK=n(MIe,"A",{href:!0});var dyt=s(mK);zqr=r(dyt,"FlaxRobertaForMultipleChoice"),dyt.forEach(t),Wqr=r(MIe," (RoBERTa model)"),MIe.forEach(t),Qqr=i(To),w5=n(To,"LI",{});var EIe=s(w5);BMe=n(EIe,"STRONG",{});var cyt=s(BMe);Hqr=r(cyt,"roformer"),cyt.forEach(t),Uqr=r(EIe," \u2014 "),gK=n(EIe,"A",{href:!0});var fyt=s(gK);Jqr=r(fyt,"FlaxRoFormerForMultipleChoice"),fyt.forEach(t),Yqr=r(EIe," (RoFormer model)"),EIe.forEach(t),Kqr=i(To),A5=n(To,"LI",{});var CIe=s(A5);IMe=n(CIe,"STRONG",{});var myt=s(IMe);Zqr=r(myt,"xlm-roberta"),myt.forEach(t),eNr=r(CIe," \u2014 "),hK=n(CIe,"A",{href:!0});var gyt=s(hK);oNr=r(gyt,"FlaxXLMRobertaForMultipleChoice"),gyt.forEach(t),rNr=r(CIe," (XLM-RoBERTa model)"),CIe.forEach(t),To.forEach(t),tNr=i(ti),T(y5.$$.fragment,ti),ti.forEach(t),ri.forEach(t),ANe=i(f),of=n(f,"H2",{class:!0});var RDe=s(of);L5=n(RDe,"A",{id:!0,class:!0,href:!0});var hyt=s(L5);qMe=n(hyt,"SPAN",{});var pyt=s(qMe);T(Yx.$$.fragment,pyt),pyt.forEach(t),hyt.forEach(t),aNr=i(RDe),NMe=n(RDe,"SPAN",{});var uyt=s(NMe);nNr=r(uyt,"FlaxAutoModelForNextSentencePrediction"),uyt.forEach(t),RDe.forEach(t),yNe=i(f),Fr=n(f,"DIV",{class:!0});var ai=s(Fr);T(Kx.$$.fragment,ai),sNr=i(ai),rf=n(ai,"P",{});var hee=s(rf);lNr=r(hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),pK=n(hee,"A",{href:!0});var _yt=s(pK);iNr=r(_yt,"from_pretrained()"),_yt.forEach(t),dNr=r(hee," class method or the "),uK=n(hee,"A",{href:!0});var byt=s(uK);cNr=r(byt,"from_config()"),byt.forEach(t),fNr=r(hee,` class
method.`),hee.forEach(t),mNr=i(ai),Zx=n(ai,"P",{});var PDe=s(Zx);gNr=r(PDe,"This class cannot be instantiated directly using "),jMe=n(PDe,"CODE",{});var vyt=s(jMe);hNr=r(vyt,"__init__()"),vyt.forEach(t),pNr=r(PDe," (throws an error)."),PDe.forEach(t),uNr=i(ai),Jt=n(ai,"DIV",{class:!0});var KA=s(Jt);T(e9.$$.fragment,KA),_Nr=i(KA),DMe=n(KA,"P",{});var Fyt=s(DMe);bNr=r(Fyt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Fyt.forEach(t),vNr=i(KA),tf=n(KA,"P",{});var pee=s(tf);FNr=r(pee,`Note:
Loading a model from its configuration file does `),GMe=n(pee,"STRONG",{});var Tyt=s(GMe);TNr=r(Tyt,"not"),Tyt.forEach(t),MNr=r(pee,` load the model weights. It only affects the
model\u2019s configuration. Use `),_K=n(pee,"A",{href:!0});var Myt=s(_K);ENr=r(Myt,"from_pretrained()"),Myt.forEach(t),CNr=r(pee," to load the model weights."),pee.forEach(t),wNr=i(KA),T(x5.$$.fragment,KA),KA.forEach(t),ANr=i(ai),Hr=n(ai,"DIV",{class:!0});var ni=s(Hr);T(o9.$$.fragment,ni),yNr=i(ni),OMe=n(ni,"P",{});var Eyt=s(OMe);LNr=r(Eyt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Eyt.forEach(t),xNr=i(ni),En=n(ni,"P",{});var ZA=s(En);$Nr=r(ZA,"The model class to instantiate is selected based on the "),VMe=n(ZA,"CODE",{});var Cyt=s(VMe);kNr=r(Cyt,"model_type"),Cyt.forEach(t),SNr=r(ZA,` property of the config object (either
passed as an argument or loaded from `),XMe=n(ZA,"CODE",{});var wyt=s(XMe);RNr=r(wyt,"pretrained_model_name_or_path"),wyt.forEach(t),PNr=r(ZA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zMe=n(ZA,"CODE",{});var Ayt=s(zMe);BNr=r(Ayt,"pretrained_model_name_or_path"),Ayt.forEach(t),INr=r(ZA,":"),ZA.forEach(t),qNr=i(ni),WMe=n(ni,"UL",{});var yyt=s(WMe);$5=n(yyt,"LI",{});var wIe=s($5);QMe=n(wIe,"STRONG",{});var Lyt=s(QMe);NNr=r(Lyt,"bert"),Lyt.forEach(t),jNr=r(wIe," \u2014 "),bK=n(wIe,"A",{href:!0});var xyt=s(bK);DNr=r(xyt,"FlaxBertForNextSentencePrediction"),xyt.forEach(t),GNr=r(wIe," (BERT model)"),wIe.forEach(t),yyt.forEach(t),ONr=i(ni),T(k5.$$.fragment,ni),ni.forEach(t),ai.forEach(t),LNe=i(f),af=n(f,"H2",{class:!0});var BDe=s(af);S5=n(BDe,"A",{id:!0,class:!0,href:!0});var $yt=s(S5);HMe=n($yt,"SPAN",{});var kyt=s(HMe);T(r9.$$.fragment,kyt),kyt.forEach(t),$yt.forEach(t),VNr=i(BDe),UMe=n(BDe,"SPAN",{});var Syt=s(UMe);XNr=r(Syt,"FlaxAutoModelForImageClassification"),Syt.forEach(t),BDe.forEach(t),xNe=i(f),Tr=n(f,"DIV",{class:!0});var si=s(Tr);T(t9.$$.fragment,si),zNr=i(si),nf=n(si,"P",{});var uee=s(nf);WNr=r(uee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),vK=n(uee,"A",{href:!0});var Ryt=s(vK);QNr=r(Ryt,"from_pretrained()"),Ryt.forEach(t),HNr=r(uee," class method or the "),FK=n(uee,"A",{href:!0});var Pyt=s(FK);UNr=r(Pyt,"from_config()"),Pyt.forEach(t),JNr=r(uee,` class
method.`),uee.forEach(t),YNr=i(si),a9=n(si,"P",{});var IDe=s(a9);KNr=r(IDe,"This class cannot be instantiated directly using "),JMe=n(IDe,"CODE",{});var Byt=s(JMe);ZNr=r(Byt,"__init__()"),Byt.forEach(t),ejr=r(IDe," (throws an error)."),IDe.forEach(t),ojr=i(si),Yt=n(si,"DIV",{class:!0});var e6=s(Yt);T(n9.$$.fragment,e6),rjr=i(e6),YMe=n(e6,"P",{});var Iyt=s(YMe);tjr=r(Iyt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Iyt.forEach(t),ajr=i(e6),sf=n(e6,"P",{});var _ee=s(sf);njr=r(_ee,`Note:
Loading a model from its configuration file does `),KMe=n(_ee,"STRONG",{});var qyt=s(KMe);sjr=r(qyt,"not"),qyt.forEach(t),ljr=r(_ee,` load the model weights. It only affects the
model\u2019s configuration. Use `),TK=n(_ee,"A",{href:!0});var Nyt=s(TK);ijr=r(Nyt,"from_pretrained()"),Nyt.forEach(t),djr=r(_ee," to load the model weights."),_ee.forEach(t),cjr=i(e6),T(R5.$$.fragment,e6),e6.forEach(t),fjr=i(si),Ur=n(si,"DIV",{class:!0});var li=s(Ur);T(s9.$$.fragment,li),mjr=i(li),ZMe=n(li,"P",{});var jyt=s(ZMe);gjr=r(jyt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),jyt.forEach(t),hjr=i(li),Cn=n(li,"P",{});var o6=s(Cn);pjr=r(o6,"The model class to instantiate is selected based on the "),e4e=n(o6,"CODE",{});var Dyt=s(e4e);ujr=r(Dyt,"model_type"),Dyt.forEach(t),_jr=r(o6,` property of the config object (either
passed as an argument or loaded from `),o4e=n(o6,"CODE",{});var Gyt=s(o4e);bjr=r(Gyt,"pretrained_model_name_or_path"),Gyt.forEach(t),vjr=r(o6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r4e=n(o6,"CODE",{});var Oyt=s(r4e);Fjr=r(Oyt,"pretrained_model_name_or_path"),Oyt.forEach(t),Tjr=r(o6,":"),o6.forEach(t),Mjr=i(li),l9=n(li,"UL",{});var qDe=s(l9);P5=n(qDe,"LI",{});var AIe=s(P5);t4e=n(AIe,"STRONG",{});var Vyt=s(t4e);Ejr=r(Vyt,"beit"),Vyt.forEach(t),Cjr=r(AIe," \u2014 "),MK=n(AIe,"A",{href:!0});var Xyt=s(MK);wjr=r(Xyt,"FlaxBeitForImageClassification"),Xyt.forEach(t),Ajr=r(AIe," (BEiT model)"),AIe.forEach(t),yjr=i(qDe),B5=n(qDe,"LI",{});var yIe=s(B5);a4e=n(yIe,"STRONG",{});var zyt=s(a4e);Ljr=r(zyt,"vit"),zyt.forEach(t),xjr=r(yIe," \u2014 "),EK=n(yIe,"A",{href:!0});var Wyt=s(EK);$jr=r(Wyt,"FlaxViTForImageClassification"),Wyt.forEach(t),kjr=r(yIe," (ViT model)"),yIe.forEach(t),qDe.forEach(t),Sjr=i(li),T(I5.$$.fragment,li),li.forEach(t),si.forEach(t),$Ne=i(f),lf=n(f,"H2",{class:!0});var NDe=s(lf);q5=n(NDe,"A",{id:!0,class:!0,href:!0});var Qyt=s(q5);n4e=n(Qyt,"SPAN",{});var Hyt=s(n4e);T(i9.$$.fragment,Hyt),Hyt.forEach(t),Qyt.forEach(t),Rjr=i(NDe),s4e=n(NDe,"SPAN",{});var Uyt=s(s4e);Pjr=r(Uyt,"FlaxAutoModelForVision2Seq"),Uyt.forEach(t),NDe.forEach(t),kNe=i(f),Mr=n(f,"DIV",{class:!0});var ii=s(Mr);T(d9.$$.fragment,ii),Bjr=i(ii),df=n(ii,"P",{});var bee=s(df);Ijr=r(bee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),CK=n(bee,"A",{href:!0});var Jyt=s(CK);qjr=r(Jyt,"from_pretrained()"),Jyt.forEach(t),Njr=r(bee," class method or the "),wK=n(bee,"A",{href:!0});var Yyt=s(wK);jjr=r(Yyt,"from_config()"),Yyt.forEach(t),Djr=r(bee,` class
method.`),bee.forEach(t),Gjr=i(ii),c9=n(ii,"P",{});var jDe=s(c9);Ojr=r(jDe,"This class cannot be instantiated directly using "),l4e=n(jDe,"CODE",{});var Kyt=s(l4e);Vjr=r(Kyt,"__init__()"),Kyt.forEach(t),Xjr=r(jDe," (throws an error)."),jDe.forEach(t),zjr=i(ii),Kt=n(ii,"DIV",{class:!0});var r6=s(Kt);T(f9.$$.fragment,r6),Wjr=i(r6),i4e=n(r6,"P",{});var Zyt=s(i4e);Qjr=r(Zyt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Zyt.forEach(t),Hjr=i(r6),cf=n(r6,"P",{});var vee=s(cf);Ujr=r(vee,`Note:
Loading a model from its configuration file does `),d4e=n(vee,"STRONG",{});var eLt=s(d4e);Jjr=r(eLt,"not"),eLt.forEach(t),Yjr=r(vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),AK=n(vee,"A",{href:!0});var oLt=s(AK);Kjr=r(oLt,"from_pretrained()"),oLt.forEach(t),Zjr=r(vee," to load the model weights."),vee.forEach(t),eDr=i(r6),T(N5.$$.fragment,r6),r6.forEach(t),oDr=i(ii),Jr=n(ii,"DIV",{class:!0});var di=s(Jr);T(m9.$$.fragment,di),rDr=i(di),c4e=n(di,"P",{});var rLt=s(c4e);tDr=r(rLt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),rLt.forEach(t),aDr=i(di),wn=n(di,"P",{});var t6=s(wn);nDr=r(t6,"The model class to instantiate is selected based on the "),f4e=n(t6,"CODE",{});var tLt=s(f4e);sDr=r(tLt,"model_type"),tLt.forEach(t),lDr=r(t6,` property of the config object (either
passed as an argument or loaded from `),m4e=n(t6,"CODE",{});var aLt=s(m4e);iDr=r(aLt,"pretrained_model_name_or_path"),aLt.forEach(t),dDr=r(t6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g4e=n(t6,"CODE",{});var nLt=s(g4e);cDr=r(nLt,"pretrained_model_name_or_path"),nLt.forEach(t),fDr=r(t6,":"),t6.forEach(t),mDr=i(di),h4e=n(di,"UL",{});var sLt=s(h4e);j5=n(sLt,"LI",{});var LIe=s(j5);p4e=n(LIe,"STRONG",{});var lLt=s(p4e);gDr=r(lLt,"vision-encoder-decoder"),lLt.forEach(t),hDr=r(LIe," \u2014 "),yK=n(LIe,"A",{href:!0});var iLt=s(yK);pDr=r(iLt,"FlaxVisionEncoderDecoderModel"),iLt.forEach(t),uDr=r(LIe," (Vision Encoder decoder model)"),LIe.forEach(t),sLt.forEach(t),_Dr=i(di),T(D5.$$.fragment,di),di.forEach(t),ii.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(mxt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(yn,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.AutoConfig"),c(xn,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.AutoModel"),c($n,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.AutoTokenizer"),c(ui,"href","/docs/transformers/pr_17310/en/model_doc/bert#transformers.BertModel"),c(bf,"id","extending-the-auto-classes"),c(bf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bf,"href","#extending-the-auto-classes"),c(_i,"class","relative group"),c(Ff,"id","transformers.AutoConfig"),c(Ff,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ff,"href","#transformers.AutoConfig"),c(bi,"class","relative group"),c(k$,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(S$,"href","/docs/transformers/pr_17310/en/model_doc/albert#transformers.AlbertConfig"),c(R$,"href","/docs/transformers/pr_17310/en/model_doc/bart#transformers.BartConfig"),c(P$,"href","/docs/transformers/pr_17310/en/model_doc/beit#transformers.BeitConfig"),c(B$,"href","/docs/transformers/pr_17310/en/model_doc/bert#transformers.BertConfig"),c(I$,"href","/docs/transformers/pr_17310/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(q$,"href","/docs/transformers/pr_17310/en/model_doc/big_bird#transformers.BigBirdConfig"),c(N$,"href","/docs/transformers/pr_17310/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(j$,"href","/docs/transformers/pr_17310/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(D$,"href","/docs/transformers/pr_17310/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(G$,"href","/docs/transformers/pr_17310/en/model_doc/camembert#transformers.CamembertConfig"),c(O$,"href","/docs/transformers/pr_17310/en/model_doc/canine#transformers.CanineConfig"),c(V$,"href","/docs/transformers/pr_17310/en/model_doc/clip#transformers.CLIPConfig"),c(X$,"href","/docs/transformers/pr_17310/en/model_doc/convbert#transformers.ConvBertConfig"),c(z$,"href","/docs/transformers/pr_17310/en/model_doc/convnext#transformers.ConvNextConfig"),c(W$,"href","/docs/transformers/pr_17310/en/model_doc/ctrl#transformers.CTRLConfig"),c(Q$,"href","/docs/transformers/pr_17310/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(H$,"href","/docs/transformers/pr_17310/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(U$,"href","/docs/transformers/pr_17310/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(J$,"href","/docs/transformers/pr_17310/en/model_doc/deberta#transformers.DebertaConfig"),c(Y$,"href","/docs/transformers/pr_17310/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(K$,"href","/docs/transformers/pr_17310/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(Z$,"href","/docs/transformers/pr_17310/en/model_doc/deit#transformers.DeiTConfig"),c(ek,"href","/docs/transformers/pr_17310/en/model_doc/detr#transformers.DetrConfig"),c(ok,"href","/docs/transformers/pr_17310/en/model_doc/distilbert#transformers.DistilBertConfig"),c(rk,"href","/docs/transformers/pr_17310/en/model_doc/dpr#transformers.DPRConfig"),c(tk,"href","/docs/transformers/pr_17310/en/model_doc/dpt#transformers.DPTConfig"),c(ak,"href","/docs/transformers/pr_17310/en/model_doc/electra#transformers.ElectraConfig"),c(nk,"href","/docs/transformers/pr_17310/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(sk,"href","/docs/transformers/pr_17310/en/model_doc/flaubert#transformers.FlaubertConfig"),c(lk,"href","/docs/transformers/pr_17310/en/model_doc/flava#transformers.FlavaConfig"),c(ik,"href","/docs/transformers/pr_17310/en/model_doc/fnet#transformers.FNetConfig"),c(dk,"href","/docs/transformers/pr_17310/en/model_doc/fsmt#transformers.FSMTConfig"),c(ck,"href","/docs/transformers/pr_17310/en/model_doc/funnel#transformers.FunnelConfig"),c(fk,"href","/docs/transformers/pr_17310/en/model_doc/glpn#transformers.GLPNConfig"),c(mk,"href","/docs/transformers/pr_17310/en/model_doc/gpt2#transformers.GPT2Config"),c(gk,"href","/docs/transformers/pr_17310/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(hk,"href","/docs/transformers/pr_17310/en/model_doc/gptj#transformers.GPTJConfig"),c(pk,"href","/docs/transformers/pr_17310/en/model_doc/hubert#transformers.HubertConfig"),c(uk,"href","/docs/transformers/pr_17310/en/model_doc/ibert#transformers.IBertConfig"),c(_k,"href","/docs/transformers/pr_17310/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(bk,"href","/docs/transformers/pr_17310/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(vk,"href","/docs/transformers/pr_17310/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(Fk,"href","/docs/transformers/pr_17310/en/model_doc/led#transformers.LEDConfig"),c(Tk,"href","/docs/transformers/pr_17310/en/model_doc/longformer#transformers.LongformerConfig"),c(Mk,"href","/docs/transformers/pr_17310/en/model_doc/luke#transformers.LukeConfig"),c(Ek,"href","/docs/transformers/pr_17310/en/model_doc/lxmert#transformers.LxmertConfig"),c(Ck,"href","/docs/transformers/pr_17310/en/model_doc/m2m_100#transformers.M2M100Config"),c(wk,"href","/docs/transformers/pr_17310/en/model_doc/marian#transformers.MarianConfig"),c(Ak,"href","/docs/transformers/pr_17310/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(yk,"href","/docs/transformers/pr_17310/en/model_doc/mbart#transformers.MBartConfig"),c(Lk,"href","/docs/transformers/pr_17310/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(xk,"href","/docs/transformers/pr_17310/en/model_doc/mobilebert#transformers.MobileBertConfig"),c($k,"href","/docs/transformers/pr_17310/en/model_doc/mpnet#transformers.MPNetConfig"),c(kk,"href","/docs/transformers/pr_17310/en/model_doc/mt5#transformers.MT5Config"),c(Sk,"href","/docs/transformers/pr_17310/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(Rk,"href","/docs/transformers/pr_17310/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(Pk,"href","/docs/transformers/pr_17310/en/model_doc/opt#transformers.OPTConfig"),c(Bk,"href","/docs/transformers/pr_17310/en/model_doc/pegasus#transformers.PegasusConfig"),c(Ik,"href","/docs/transformers/pr_17310/en/model_doc/perceiver#transformers.PerceiverConfig"),c(qk,"href","/docs/transformers/pr_17310/en/model_doc/plbart#transformers.PLBartConfig"),c(Nk,"href","/docs/transformers/pr_17310/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(jk,"href","/docs/transformers/pr_17310/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(Dk,"href","/docs/transformers/pr_17310/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(Gk,"href","/docs/transformers/pr_17310/en/model_doc/rag#transformers.RagConfig"),c(Ok,"href","/docs/transformers/pr_17310/en/model_doc/realm#transformers.RealmConfig"),c(Vk,"href","/docs/transformers/pr_17310/en/model_doc/reformer#transformers.ReformerConfig"),c(Xk,"href","/docs/transformers/pr_17310/en/model_doc/regnet#transformers.RegNetConfig"),c(zk,"href","/docs/transformers/pr_17310/en/model_doc/rembert#transformers.RemBertConfig"),c(Wk,"href","/docs/transformers/pr_17310/en/model_doc/resnet#transformers.ResNetConfig"),c(Qk,"href","/docs/transformers/pr_17310/en/model_doc/retribert#transformers.RetriBertConfig"),c(Hk,"href","/docs/transformers/pr_17310/en/model_doc/roberta#transformers.RobertaConfig"),c(Uk,"href","/docs/transformers/pr_17310/en/model_doc/roformer#transformers.RoFormerConfig"),c(Jk,"href","/docs/transformers/pr_17310/en/model_doc/segformer#transformers.SegformerConfig"),c(Yk,"href","/docs/transformers/pr_17310/en/model_doc/sew#transformers.SEWConfig"),c(Kk,"href","/docs/transformers/pr_17310/en/model_doc/sew-d#transformers.SEWDConfig"),c(Zk,"href","/docs/transformers/pr_17310/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(eS,"href","/docs/transformers/pr_17310/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(oS,"href","/docs/transformers/pr_17310/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(rS,"href","/docs/transformers/pr_17310/en/model_doc/splinter#transformers.SplinterConfig"),c(tS,"href","/docs/transformers/pr_17310/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(aS,"href","/docs/transformers/pr_17310/en/model_doc/swin#transformers.SwinConfig"),c(nS,"href","/docs/transformers/pr_17310/en/model_doc/t5#transformers.T5Config"),c(sS,"href","/docs/transformers/pr_17310/en/model_doc/tapas#transformers.TapasConfig"),c(lS,"href","/docs/transformers/pr_17310/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(iS,"href","/docs/transformers/pr_17310/en/model_doc/trocr#transformers.TrOCRConfig"),c(dS,"href","/docs/transformers/pr_17310/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(cS,"href","/docs/transformers/pr_17310/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(fS,"href","/docs/transformers/pr_17310/en/model_doc/van#transformers.VanConfig"),c(mS,"href","/docs/transformers/pr_17310/en/model_doc/vilt#transformers.ViltConfig"),c(gS,"href","/docs/transformers/pr_17310/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(hS,"href","/docs/transformers/pr_17310/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(pS,"href","/docs/transformers/pr_17310/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(uS,"href","/docs/transformers/pr_17310/en/model_doc/vit#transformers.ViTConfig"),c(_S,"href","/docs/transformers/pr_17310/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(bS,"href","/docs/transformers/pr_17310/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(vS,"href","/docs/transformers/pr_17310/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(FS,"href","/docs/transformers/pr_17310/en/model_doc/wavlm#transformers.WavLMConfig"),c(TS,"href","/docs/transformers/pr_17310/en/model_doc/xglm#transformers.XGLMConfig"),c(MS,"href","/docs/transformers/pr_17310/en/model_doc/xlm#transformers.XLMConfig"),c(ES,"href","/docs/transformers/pr_17310/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(CS,"href","/docs/transformers/pr_17310/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(wS,"href","/docs/transformers/pr_17310/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(AS,"href","/docs/transformers/pr_17310/en/model_doc/xlnet#transformers.XLNetConfig"),c(yS,"href","/docs/transformers/pr_17310/en/model_doc/yolos#transformers.YolosConfig"),c(LS,"href","/docs/transformers/pr_17310/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fg,"id","transformers.AutoTokenizer"),c(Fg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Fg,"href","#transformers.AutoTokenizer"),c(Fi,"class","relative group"),c(xS,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c($S,"href","/docs/transformers/pr_17310/en/model_doc/albert#transformers.AlbertTokenizer"),c(kS,"href","/docs/transformers/pr_17310/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(SS,"href","/docs/transformers/pr_17310/en/model_doc/bart#transformers.BartTokenizer"),c(RS,"href","/docs/transformers/pr_17310/en/model_doc/bart#transformers.BartTokenizerFast"),c(PS,"href","/docs/transformers/pr_17310/en/model_doc/barthez#transformers.BarthezTokenizer"),c(BS,"href","/docs/transformers/pr_17310/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(IS,"href","/docs/transformers/pr_17310/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(qS,"href","/docs/transformers/pr_17310/en/model_doc/bert#transformers.BertTokenizer"),c(NS,"href","/docs/transformers/pr_17310/en/model_doc/bert#transformers.BertTokenizerFast"),c(jS,"href","/docs/transformers/pr_17310/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(DS,"href","/docs/transformers/pr_17310/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(GS,"href","/docs/transformers/pr_17310/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(OS,"href","/docs/transformers/pr_17310/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(VS,"href","/docs/transformers/pr_17310/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(XS,"href","/docs/transformers/pr_17310/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(zS,"href","/docs/transformers/pr_17310/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(WS,"href","/docs/transformers/pr_17310/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(QS,"href","/docs/transformers/pr_17310/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(HS,"href","/docs/transformers/pr_17310/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(US,"href","/docs/transformers/pr_17310/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(JS,"href","/docs/transformers/pr_17310/en/model_doc/camembert#transformers.CamembertTokenizer"),c(YS,"href","/docs/transformers/pr_17310/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(KS,"href","/docs/transformers/pr_17310/en/model_doc/canine#transformers.CanineTokenizer"),c(ZS,"href","/docs/transformers/pr_17310/en/model_doc/clip#transformers.CLIPTokenizer"),c(eR,"href","/docs/transformers/pr_17310/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(oR,"href","/docs/transformers/pr_17310/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(rR,"href","/docs/transformers/pr_17310/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(tR,"href","/docs/transformers/pr_17310/en/model_doc/cpm#transformers.CpmTokenizer"),c(aR,"href","/docs/transformers/pr_17310/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(nR,"href","/docs/transformers/pr_17310/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(sR,"href","/docs/transformers/pr_17310/en/model_doc/roberta#transformers.RobertaTokenizer"),c(lR,"href","/docs/transformers/pr_17310/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(iR,"href","/docs/transformers/pr_17310/en/model_doc/deberta#transformers.DebertaTokenizer"),c(dR,"href","/docs/transformers/pr_17310/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(cR,"href","/docs/transformers/pr_17310/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(fR,"href","/docs/transformers/pr_17310/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(mR,"href","/docs/transformers/pr_17310/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(gR,"href","/docs/transformers/pr_17310/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(hR,"href","/docs/transformers/pr_17310/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(pR,"href","/docs/transformers/pr_17310/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(uR,"href","/docs/transformers/pr_17310/en/model_doc/electra#transformers.ElectraTokenizer"),c(_R,"href","/docs/transformers/pr_17310/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(bR,"href","/docs/transformers/pr_17310/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(vR,"href","/docs/transformers/pr_17310/en/model_doc/fnet#transformers.FNetTokenizer"),c(FR,"href","/docs/transformers/pr_17310/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(TR,"href","/docs/transformers/pr_17310/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(MR,"href","/docs/transformers/pr_17310/en/model_doc/funnel#transformers.FunnelTokenizer"),c(ER,"href","/docs/transformers/pr_17310/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(CR,"href","/docs/transformers/pr_17310/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(wR,"href","/docs/transformers/pr_17310/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(AR,"href","/docs/transformers/pr_17310/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(yR,"href","/docs/transformers/pr_17310/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(LR,"href","/docs/transformers/pr_17310/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(xR,"href","/docs/transformers/pr_17310/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c($R,"href","/docs/transformers/pr_17310/en/model_doc/herbert#transformers.HerbertTokenizer"),c(kR,"href","/docs/transformers/pr_17310/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(SR,"href","/docs/transformers/pr_17310/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(RR,"href","/docs/transformers/pr_17310/en/model_doc/roberta#transformers.RobertaTokenizer"),c(PR,"href","/docs/transformers/pr_17310/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(BR,"href","/docs/transformers/pr_17310/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(IR,"href","/docs/transformers/pr_17310/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(qR,"href","/docs/transformers/pr_17310/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(NR,"href","/docs/transformers/pr_17310/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(jR,"href","/docs/transformers/pr_17310/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(DR,"href","/docs/transformers/pr_17310/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(GR,"href","/docs/transformers/pr_17310/en/model_doc/led#transformers.LEDTokenizer"),c(OR,"href","/docs/transformers/pr_17310/en/model_doc/led#transformers.LEDTokenizerFast"),c(VR,"href","/docs/transformers/pr_17310/en/model_doc/longformer#transformers.LongformerTokenizer"),c(XR,"href","/docs/transformers/pr_17310/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(zR,"href","/docs/transformers/pr_17310/en/model_doc/luke#transformers.LukeTokenizer"),c(WR,"href","/docs/transformers/pr_17310/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(QR,"href","/docs/transformers/pr_17310/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(HR,"href","/docs/transformers/pr_17310/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(UR,"href","/docs/transformers/pr_17310/en/model_doc/marian#transformers.MarianTokenizer"),c(JR,"href","/docs/transformers/pr_17310/en/model_doc/mbart#transformers.MBartTokenizer"),c(YR,"href","/docs/transformers/pr_17310/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(KR,"href","/docs/transformers/pr_17310/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(ZR,"href","/docs/transformers/pr_17310/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(eP,"href","/docs/transformers/pr_17310/en/model_doc/bert#transformers.BertTokenizer"),c(oP,"href","/docs/transformers/pr_17310/en/model_doc/bert#transformers.BertTokenizerFast"),c(rP,"href","/docs/transformers/pr_17310/en/model_doc/mluke#transformers.MLukeTokenizer"),c(tP,"href","/docs/transformers/pr_17310/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(aP,"href","/docs/transformers/pr_17310/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(nP,"href","/docs/transformers/pr_17310/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(sP,"href","/docs/transformers/pr_17310/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(lP,"href","/docs/transformers/pr_17310/en/model_doc/mt5#transformers.T5Tokenizer"),c(iP,"href","/docs/transformers/pr_17310/en/model_doc/mt5#transformers.T5TokenizerFast"),c(dP,"href","/docs/transformers/pr_17310/en/model_doc/albert#transformers.AlbertTokenizer"),c(cP,"href","/docs/transformers/pr_17310/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(fP,"href","/docs/transformers/pr_17310/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(mP,"href","/docs/transformers/pr_17310/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(gP,"href","/docs/transformers/pr_17310/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(hP,"href","/docs/transformers/pr_17310/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(pP,"href","/docs/transformers/pr_17310/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(uP,"href","/docs/transformers/pr_17310/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(_P,"href","/docs/transformers/pr_17310/en/model_doc/phobert#transformers.PhobertTokenizer"),c(bP,"href","/docs/transformers/pr_17310/en/model_doc/plbart#transformers.PLBartTokenizer"),c(vP,"href","/docs/transformers/pr_17310/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(FP,"href","/docs/transformers/pr_17310/en/model_doc/bert#transformers.BertTokenizer"),c(TP,"href","/docs/transformers/pr_17310/en/model_doc/bert#transformers.BertTokenizerFast"),c(MP,"href","/docs/transformers/pr_17310/en/model_doc/rag#transformers.RagTokenizer"),c(EP,"href","/docs/transformers/pr_17310/en/model_doc/realm#transformers.RealmTokenizer"),c(CP,"href","/docs/transformers/pr_17310/en/model_doc/realm#transformers.RealmTokenizerFast"),c(wP,"href","/docs/transformers/pr_17310/en/model_doc/reformer#transformers.ReformerTokenizer"),c(AP,"href","/docs/transformers/pr_17310/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(yP,"href","/docs/transformers/pr_17310/en/model_doc/rembert#transformers.RemBertTokenizer"),c(LP,"href","/docs/transformers/pr_17310/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(xP,"href","/docs/transformers/pr_17310/en/model_doc/retribert#transformers.RetriBertTokenizer"),c($P,"href","/docs/transformers/pr_17310/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(kP,"href","/docs/transformers/pr_17310/en/model_doc/roberta#transformers.RobertaTokenizer"),c(SP,"href","/docs/transformers/pr_17310/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(RP,"href","/docs/transformers/pr_17310/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(PP,"href","/docs/transformers/pr_17310/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(BP,"href","/docs/transformers/pr_17310/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(IP,"href","/docs/transformers/pr_17310/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(qP,"href","/docs/transformers/pr_17310/en/model_doc/splinter#transformers.SplinterTokenizer"),c(NP,"href","/docs/transformers/pr_17310/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(jP,"href","/docs/transformers/pr_17310/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(DP,"href","/docs/transformers/pr_17310/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(GP,"href","/docs/transformers/pr_17310/en/model_doc/mt5#transformers.T5Tokenizer"),c(OP,"href","/docs/transformers/pr_17310/en/model_doc/mt5#transformers.T5TokenizerFast"),c(VP,"href","/docs/transformers/pr_17310/en/model_doc/tapas#transformers.TapasTokenizer"),c(XP,"href","/docs/transformers/pr_17310/en/model_doc/tapex#transformers.TapexTokenizer"),c(zP,"href","/docs/transformers/pr_17310/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(WP,"href","/docs/transformers/pr_17310/en/model_doc/bert#transformers.BertTokenizer"),c(QP,"href","/docs/transformers/pr_17310/en/model_doc/bert#transformers.BertTokenizerFast"),c(HP,"href","/docs/transformers/pr_17310/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(UP,"href","/docs/transformers/pr_17310/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(JP,"href","/docs/transformers/pr_17310/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(YP,"href","/docs/transformers/pr_17310/en/model_doc/xglm#transformers.XGLMTokenizer"),c(KP,"href","/docs/transformers/pr_17310/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(ZP,"href","/docs/transformers/pr_17310/en/model_doc/xlm#transformers.XLMTokenizer"),c(eB,"href","/docs/transformers/pr_17310/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(oB,"href","/docs/transformers/pr_17310/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(rB,"href","/docs/transformers/pr_17310/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(tB,"href","/docs/transformers/pr_17310/en/model_doc/roberta#transformers.RobertaTokenizer"),c(aB,"href","/docs/transformers/pr_17310/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(nB,"href","/docs/transformers/pr_17310/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(sB,"href","/docs/transformers/pr_17310/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(lB,"href","/docs/transformers/pr_17310/en/model_doc/albert#transformers.AlbertTokenizer"),c(iB,"href","/docs/transformers/pr_17310/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eh,"id","transformers.AutoFeatureExtractor"),c(eh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eh,"href","#transformers.AutoFeatureExtractor"),c(Ti,"class","relative group"),c(dB,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(cB,"href","/docs/transformers/pr_17310/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(fB,"href","/docs/transformers/pr_17310/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(mB,"href","/docs/transformers/pr_17310/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(gB,"href","/docs/transformers/pr_17310/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(hB,"href","/docs/transformers/pr_17310/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(pB,"href","/docs/transformers/pr_17310/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(uB,"href","/docs/transformers/pr_17310/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(_B,"href","/docs/transformers/pr_17310/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(bB,"href","/docs/transformers/pr_17310/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(vB,"href","/docs/transformers/pr_17310/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(FB,"href","/docs/transformers/pr_17310/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(TB,"href","/docs/transformers/pr_17310/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(MB,"href","/docs/transformers/pr_17310/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(EB,"href","/docs/transformers/pr_17310/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(CB,"href","/docs/transformers/pr_17310/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(wB,"href","/docs/transformers/pr_17310/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(AB,"href","/docs/transformers/pr_17310/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(yB,"href","/docs/transformers/pr_17310/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(LB,"href","/docs/transformers/pr_17310/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(xB,"href","/docs/transformers/pr_17310/en/model_doc/vit#transformers.ViTFeatureExtractor"),c($B,"href","/docs/transformers/pr_17310/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(kB,"href","/docs/transformers/pr_17310/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(SB,"href","/docs/transformers/pr_17310/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(RB,"href","/docs/transformers/pr_17310/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(PB,"href","/docs/transformers/pr_17310/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(BB,"href","/docs/transformers/pr_17310/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($h,"id","transformers.AutoProcessor"),c($h,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($h,"href","#transformers.AutoProcessor"),c(Mi,"class","relative group"),c(IB,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(qB,"href","/docs/transformers/pr_17310/en/model_doc/clip#transformers.CLIPProcessor"),c(NB,"href","/docs/transformers/pr_17310/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(jB,"href","/docs/transformers/pr_17310/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(DB,"href","/docs/transformers/pr_17310/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(GB,"href","/docs/transformers/pr_17310/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(OB,"href","/docs/transformers/pr_17310/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(VB,"href","/docs/transformers/pr_17310/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(XB,"href","/docs/transformers/pr_17310/en/model_doc/trocr#transformers.TrOCRProcessor"),c(zB,"href","/docs/transformers/pr_17310/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(WB,"href","/docs/transformers/pr_17310/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(QB,"href","/docs/transformers/pr_17310/en/model_doc/vilt#transformers.ViltProcessor"),c(HB,"href","/docs/transformers/pr_17310/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(UB,"href","/docs/transformers/pr_17310/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(JB,"href","/docs/transformers/pr_17310/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(YB,"href","/docs/transformers/pr_17310/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jh,"id","transformers.AutoModel"),c(Jh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Jh,"href","#transformers.AutoModel"),c(Ci,"class","relative group"),c(KB,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZB,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eI,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oI,"href","/docs/transformers/pr_17310/en/model_doc/albert#transformers.AlbertModel"),c(rI,"href","/docs/transformers/pr_17310/en/model_doc/bart#transformers.BartModel"),c(tI,"href","/docs/transformers/pr_17310/en/model_doc/beit#transformers.BeitModel"),c(aI,"href","/docs/transformers/pr_17310/en/model_doc/bert#transformers.BertModel"),c(nI,"href","/docs/transformers/pr_17310/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(sI,"href","/docs/transformers/pr_17310/en/model_doc/big_bird#transformers.BigBirdModel"),c(lI,"href","/docs/transformers/pr_17310/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(iI,"href","/docs/transformers/pr_17310/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(dI,"href","/docs/transformers/pr_17310/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(cI,"href","/docs/transformers/pr_17310/en/model_doc/camembert#transformers.CamembertModel"),c(fI,"href","/docs/transformers/pr_17310/en/model_doc/canine#transformers.CanineModel"),c(mI,"href","/docs/transformers/pr_17310/en/model_doc/clip#transformers.CLIPModel"),c(gI,"href","/docs/transformers/pr_17310/en/model_doc/convbert#transformers.ConvBertModel"),c(hI,"href","/docs/transformers/pr_17310/en/model_doc/convnext#transformers.ConvNextModel"),c(pI,"href","/docs/transformers/pr_17310/en/model_doc/ctrl#transformers.CTRLModel"),c(uI,"href","/docs/transformers/pr_17310/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(_I,"href","/docs/transformers/pr_17310/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(bI,"href","/docs/transformers/pr_17310/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(vI,"href","/docs/transformers/pr_17310/en/model_doc/deberta#transformers.DebertaModel"),c(FI,"href","/docs/transformers/pr_17310/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(TI,"href","/docs/transformers/pr_17310/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(MI,"href","/docs/transformers/pr_17310/en/model_doc/deit#transformers.DeiTModel"),c(EI,"href","/docs/transformers/pr_17310/en/model_doc/detr#transformers.DetrModel"),c(CI,"href","/docs/transformers/pr_17310/en/model_doc/distilbert#transformers.DistilBertModel"),c(wI,"href","/docs/transformers/pr_17310/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(AI,"href","/docs/transformers/pr_17310/en/model_doc/dpt#transformers.DPTModel"),c(yI,"href","/docs/transformers/pr_17310/en/model_doc/electra#transformers.ElectraModel"),c(LI,"href","/docs/transformers/pr_17310/en/model_doc/flaubert#transformers.FlaubertModel"),c(xI,"href","/docs/transformers/pr_17310/en/model_doc/flava#transformers.FlavaModel"),c($I,"href","/docs/transformers/pr_17310/en/model_doc/fnet#transformers.FNetModel"),c(kI,"href","/docs/transformers/pr_17310/en/model_doc/fsmt#transformers.FSMTModel"),c(SI,"href","/docs/transformers/pr_17310/en/model_doc/funnel#transformers.FunnelModel"),c(RI,"href","/docs/transformers/pr_17310/en/model_doc/funnel#transformers.FunnelBaseModel"),c(PI,"href","/docs/transformers/pr_17310/en/model_doc/glpn#transformers.GLPNModel"),c(BI,"href","/docs/transformers/pr_17310/en/model_doc/gpt2#transformers.GPT2Model"),c(II,"href","/docs/transformers/pr_17310/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(qI,"href","/docs/transformers/pr_17310/en/model_doc/gptj#transformers.GPTJModel"),c(NI,"href","/docs/transformers/pr_17310/en/model_doc/hubert#transformers.HubertModel"),c(jI,"href","/docs/transformers/pr_17310/en/model_doc/ibert#transformers.IBertModel"),c(DI,"href","/docs/transformers/pr_17310/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(GI,"href","/docs/transformers/pr_17310/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(OI,"href","/docs/transformers/pr_17310/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(VI,"href","/docs/transformers/pr_17310/en/model_doc/led#transformers.LEDModel"),c(XI,"href","/docs/transformers/pr_17310/en/model_doc/longformer#transformers.LongformerModel"),c(zI,"href","/docs/transformers/pr_17310/en/model_doc/luke#transformers.LukeModel"),c(WI,"href","/docs/transformers/pr_17310/en/model_doc/lxmert#transformers.LxmertModel"),c(QI,"href","/docs/transformers/pr_17310/en/model_doc/m2m_100#transformers.M2M100Model"),c(HI,"href","/docs/transformers/pr_17310/en/model_doc/marian#transformers.MarianModel"),c(UI,"href","/docs/transformers/pr_17310/en/model_doc/maskformer#transformers.MaskFormerModel"),c(JI,"href","/docs/transformers/pr_17310/en/model_doc/mbart#transformers.MBartModel"),c(YI,"href","/docs/transformers/pr_17310/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(KI,"href","/docs/transformers/pr_17310/en/model_doc/mobilebert#transformers.MobileBertModel"),c(ZI,"href","/docs/transformers/pr_17310/en/model_doc/mpnet#transformers.MPNetModel"),c(eq,"href","/docs/transformers/pr_17310/en/model_doc/mt5#transformers.MT5Model"),c(oq,"href","/docs/transformers/pr_17310/en/model_doc/nystromformer#transformers.NystromformerModel"),c(rq,"href","/docs/transformers/pr_17310/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(tq,"href","/docs/transformers/pr_17310/en/model_doc/opt#transformers.OPTModel"),c(aq,"href","/docs/transformers/pr_17310/en/model_doc/pegasus#transformers.PegasusModel"),c(nq,"href","/docs/transformers/pr_17310/en/model_doc/perceiver#transformers.PerceiverModel"),c(sq,"href","/docs/transformers/pr_17310/en/model_doc/plbart#transformers.PLBartModel"),c(lq,"href","/docs/transformers/pr_17310/en/model_doc/poolformer#transformers.PoolFormerModel"),c(iq,"href","/docs/transformers/pr_17310/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(dq,"href","/docs/transformers/pr_17310/en/model_doc/qdqbert#transformers.QDQBertModel"),c(cq,"href","/docs/transformers/pr_17310/en/model_doc/reformer#transformers.ReformerModel"),c(fq,"href","/docs/transformers/pr_17310/en/model_doc/regnet#transformers.RegNetModel"),c(mq,"href","/docs/transformers/pr_17310/en/model_doc/rembert#transformers.RemBertModel"),c(gq,"href","/docs/transformers/pr_17310/en/model_doc/resnet#transformers.ResNetModel"),c(hq,"href","/docs/transformers/pr_17310/en/model_doc/retribert#transformers.RetriBertModel"),c(pq,"href","/docs/transformers/pr_17310/en/model_doc/roberta#transformers.RobertaModel"),c(uq,"href","/docs/transformers/pr_17310/en/model_doc/roformer#transformers.RoFormerModel"),c(_q,"href","/docs/transformers/pr_17310/en/model_doc/segformer#transformers.SegformerModel"),c(bq,"href","/docs/transformers/pr_17310/en/model_doc/sew#transformers.SEWModel"),c(vq,"href","/docs/transformers/pr_17310/en/model_doc/sew-d#transformers.SEWDModel"),c(Fq,"href","/docs/transformers/pr_17310/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(Tq,"href","/docs/transformers/pr_17310/en/model_doc/splinter#transformers.SplinterModel"),c(Mq,"href","/docs/transformers/pr_17310/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(Eq,"href","/docs/transformers/pr_17310/en/model_doc/swin#transformers.SwinModel"),c(Cq,"href","/docs/transformers/pr_17310/en/model_doc/t5#transformers.T5Model"),c(wq,"href","/docs/transformers/pr_17310/en/model_doc/tapas#transformers.TapasModel"),c(Aq,"href","/docs/transformers/pr_17310/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(yq,"href","/docs/transformers/pr_17310/en/model_doc/unispeech#transformers.UniSpeechModel"),c(Lq,"href","/docs/transformers/pr_17310/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(xq,"href","/docs/transformers/pr_17310/en/model_doc/van#transformers.VanModel"),c($q,"href","/docs/transformers/pr_17310/en/model_doc/vilt#transformers.ViltModel"),c(kq,"href","/docs/transformers/pr_17310/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(Sq,"href","/docs/transformers/pr_17310/en/model_doc/visual_bert#transformers.VisualBertModel"),c(Rq,"href","/docs/transformers/pr_17310/en/model_doc/vit#transformers.ViTModel"),c(Pq,"href","/docs/transformers/pr_17310/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(Bq,"href","/docs/transformers/pr_17310/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(Iq,"href","/docs/transformers/pr_17310/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(qq,"href","/docs/transformers/pr_17310/en/model_doc/wavlm#transformers.WavLMModel"),c(Nq,"href","/docs/transformers/pr_17310/en/model_doc/xglm#transformers.XGLMModel"),c(jq,"href","/docs/transformers/pr_17310/en/model_doc/xlm#transformers.XLMModel"),c(Dq,"href","/docs/transformers/pr_17310/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(Gq,"href","/docs/transformers/pr_17310/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(Oq,"href","/docs/transformers/pr_17310/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(Vq,"href","/docs/transformers/pr_17310/en/model_doc/xlnet#transformers.XLNetModel"),c(Xq,"href","/docs/transformers/pr_17310/en/model_doc/yolos#transformers.YolosModel"),c(zq,"href","/docs/transformers/pr_17310/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vu,"id","transformers.AutoModelForPreTraining"),c(Vu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Vu,"href","#transformers.AutoModelForPreTraining"),c(yi,"class","relative group"),c(Wq,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qq,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Hq,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uq,"href","/docs/transformers/pr_17310/en/model_doc/albert#transformers.AlbertForPreTraining"),c(Jq,"href","/docs/transformers/pr_17310/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Yq,"href","/docs/transformers/pr_17310/en/model_doc/bert#transformers.BertForPreTraining"),c(Kq,"href","/docs/transformers/pr_17310/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(Zq,"href","/docs/transformers/pr_17310/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(eN,"href","/docs/transformers/pr_17310/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(oN,"href","/docs/transformers/pr_17310/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(rN,"href","/docs/transformers/pr_17310/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(tN,"href","/docs/transformers/pr_17310/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(aN,"href","/docs/transformers/pr_17310/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(nN,"href","/docs/transformers/pr_17310/en/model_doc/electra#transformers.ElectraForPreTraining"),c(sN,"href","/docs/transformers/pr_17310/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(lN,"href","/docs/transformers/pr_17310/en/model_doc/flava#transformers.FlavaForPreTraining"),c(iN,"href","/docs/transformers/pr_17310/en/model_doc/fnet#transformers.FNetForPreTraining"),c(dN,"href","/docs/transformers/pr_17310/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(cN,"href","/docs/transformers/pr_17310/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(fN,"href","/docs/transformers/pr_17310/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(mN,"href","/docs/transformers/pr_17310/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(gN,"href","/docs/transformers/pr_17310/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(hN,"href","/docs/transformers/pr_17310/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(pN,"href","/docs/transformers/pr_17310/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(uN,"href","/docs/transformers/pr_17310/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(_N,"href","/docs/transformers/pr_17310/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(bN,"href","/docs/transformers/pr_17310/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(vN,"href","/docs/transformers/pr_17310/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(FN,"href","/docs/transformers/pr_17310/en/model_doc/retribert#transformers.RetriBertModel"),c(TN,"href","/docs/transformers/pr_17310/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(MN,"href","/docs/transformers/pr_17310/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(EN,"href","/docs/transformers/pr_17310/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(CN,"href","/docs/transformers/pr_17310/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(wN,"href","/docs/transformers/pr_17310/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(AN,"href","/docs/transformers/pr_17310/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(yN,"href","/docs/transformers/pr_17310/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(LN,"href","/docs/transformers/pr_17310/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(xN,"href","/docs/transformers/pr_17310/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c($N,"href","/docs/transformers/pr_17310/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(kN,"href","/docs/transformers/pr_17310/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(SN,"href","/docs/transformers/pr_17310/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(RN,"href","/docs/transformers/pr_17310/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(PN,"href","/docs/transformers/pr_17310/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(BN,"href","/docs/transformers/pr_17310/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(IN,"href","/docs/transformers/pr_17310/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(B_,"id","transformers.AutoModelForCausalLM"),c(B_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(B_,"href","#transformers.AutoModelForCausalLM"),c($i,"class","relative group"),c(qN,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NN,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jN,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DN,"href","/docs/transformers/pr_17310/en/model_doc/bart#transformers.BartForCausalLM"),c(GN,"href","/docs/transformers/pr_17310/en/model_doc/bert#transformers.BertLMHeadModel"),c(ON,"href","/docs/transformers/pr_17310/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(VN,"href","/docs/transformers/pr_17310/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(XN,"href","/docs/transformers/pr_17310/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(zN,"href","/docs/transformers/pr_17310/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(WN,"href","/docs/transformers/pr_17310/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(QN,"href","/docs/transformers/pr_17310/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(HN,"href","/docs/transformers/pr_17310/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(UN,"href","/docs/transformers/pr_17310/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(JN,"href","/docs/transformers/pr_17310/en/model_doc/electra#transformers.ElectraForCausalLM"),c(YN,"href","/docs/transformers/pr_17310/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(KN,"href","/docs/transformers/pr_17310/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(ZN,"href","/docs/transformers/pr_17310/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(ej,"href","/docs/transformers/pr_17310/en/model_doc/marian#transformers.MarianForCausalLM"),c(oj,"href","/docs/transformers/pr_17310/en/model_doc/mbart#transformers.MBartForCausalLM"),c(rj,"href","/docs/transformers/pr_17310/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(tj,"href","/docs/transformers/pr_17310/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(aj,"href","/docs/transformers/pr_17310/en/model_doc/opt#transformers.OPTForCausalLM"),c(nj,"href","/docs/transformers/pr_17310/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(sj,"href","/docs/transformers/pr_17310/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(lj,"href","/docs/transformers/pr_17310/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(ij,"href","/docs/transformers/pr_17310/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(dj,"href","/docs/transformers/pr_17310/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(cj,"href","/docs/transformers/pr_17310/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(fj,"href","/docs/transformers/pr_17310/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(mj,"href","/docs/transformers/pr_17310/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(gj,"href","/docs/transformers/pr_17310/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(hj,"href","/docs/transformers/pr_17310/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(pj,"href","/docs/transformers/pr_17310/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(uj,"href","/docs/transformers/pr_17310/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(_j,"href","/docs/transformers/pr_17310/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(bj,"href","/docs/transformers/pr_17310/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(vj,"href","/docs/transformers/pr_17310/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(Fj,"href","/docs/transformers/pr_17310/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(Tj,"href","/docs/transformers/pr_17310/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T1,"id","transformers.AutoModelForMaskedLM"),c(T1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T1,"href","#transformers.AutoModelForMaskedLM"),c(Ri,"class","relative group"),c(Mj,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ej,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Cj,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wj,"href","/docs/transformers/pr_17310/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(Aj,"href","/docs/transformers/pr_17310/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(yj,"href","/docs/transformers/pr_17310/en/model_doc/bert#transformers.BertForMaskedLM"),c(Lj,"href","/docs/transformers/pr_17310/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(xj,"href","/docs/transformers/pr_17310/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c($j,"href","/docs/transformers/pr_17310/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(kj,"href","/docs/transformers/pr_17310/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(Sj,"href","/docs/transformers/pr_17310/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(Rj,"href","/docs/transformers/pr_17310/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(Pj,"href","/docs/transformers/pr_17310/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(Bj,"href","/docs/transformers/pr_17310/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(Ij,"href","/docs/transformers/pr_17310/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(qj,"href","/docs/transformers/pr_17310/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(Nj,"href","/docs/transformers/pr_17310/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(jj,"href","/docs/transformers/pr_17310/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(Dj,"href","/docs/transformers/pr_17310/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(Gj,"href","/docs/transformers/pr_17310/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(Oj,"href","/docs/transformers/pr_17310/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(Vj,"href","/docs/transformers/pr_17310/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(Xj,"href","/docs/transformers/pr_17310/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(zj,"href","/docs/transformers/pr_17310/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(Wj,"href","/docs/transformers/pr_17310/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(Qj,"href","/docs/transformers/pr_17310/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(Hj,"href","/docs/transformers/pr_17310/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(Uj,"href","/docs/transformers/pr_17310/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(Jj,"href","/docs/transformers/pr_17310/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(Yj,"href","/docs/transformers/pr_17310/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(Kj,"href","/docs/transformers/pr_17310/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(Zj,"href","/docs/transformers/pr_17310/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(eD,"href","/docs/transformers/pr_17310/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(oD,"href","/docs/transformers/pr_17310/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(rD,"href","/docs/transformers/pr_17310/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(tD,"href","/docs/transformers/pr_17310/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(aD,"href","/docs/transformers/pr_17310/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sb,"id","transformers.AutoModelForSeq2SeqLM"),c(sb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sb,"href","#transformers.AutoModelForSeq2SeqLM"),c(Ii,"class","relative group"),c(nD,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sD,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lD,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iD,"href","/docs/transformers/pr_17310/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(dD,"href","/docs/transformers/pr_17310/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(cD,"href","/docs/transformers/pr_17310/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(fD,"href","/docs/transformers/pr_17310/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(mD,"href","/docs/transformers/pr_17310/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(gD,"href","/docs/transformers/pr_17310/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(hD,"href","/docs/transformers/pr_17310/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(pD,"href","/docs/transformers/pr_17310/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(uD,"href","/docs/transformers/pr_17310/en/model_doc/marian#transformers.MarianMTModel"),c(_D,"href","/docs/transformers/pr_17310/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(bD,"href","/docs/transformers/pr_17310/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(vD,"href","/docs/transformers/pr_17310/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(FD,"href","/docs/transformers/pr_17310/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(TD,"href","/docs/transformers/pr_17310/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(MD,"href","/docs/transformers/pr_17310/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(ED,"href","/docs/transformers/pr_17310/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ab,"id","transformers.AutoModelForSequenceClassification"),c(Ab,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ab,"href","#transformers.AutoModelForSequenceClassification"),c(ji,"class","relative group"),c(CD,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wD,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AD,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yD,"href","/docs/transformers/pr_17310/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(LD,"href","/docs/transformers/pr_17310/en/model_doc/bart#transformers.BartForSequenceClassification"),c(xD,"href","/docs/transformers/pr_17310/en/model_doc/bert#transformers.BertForSequenceClassification"),c($D,"href","/docs/transformers/pr_17310/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(kD,"href","/docs/transformers/pr_17310/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(SD,"href","/docs/transformers/pr_17310/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(RD,"href","/docs/transformers/pr_17310/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(PD,"href","/docs/transformers/pr_17310/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(BD,"href","/docs/transformers/pr_17310/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(ID,"href","/docs/transformers/pr_17310/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(qD,"href","/docs/transformers/pr_17310/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(ND,"href","/docs/transformers/pr_17310/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(jD,"href","/docs/transformers/pr_17310/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(DD,"href","/docs/transformers/pr_17310/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(GD,"href","/docs/transformers/pr_17310/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(OD,"href","/docs/transformers/pr_17310/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(VD,"href","/docs/transformers/pr_17310/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(XD,"href","/docs/transformers/pr_17310/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(zD,"href","/docs/transformers/pr_17310/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(WD,"href","/docs/transformers/pr_17310/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(QD,"href","/docs/transformers/pr_17310/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(HD,"href","/docs/transformers/pr_17310/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(UD,"href","/docs/transformers/pr_17310/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(JD,"href","/docs/transformers/pr_17310/en/model_doc/led#transformers.LEDForSequenceClassification"),c(YD,"href","/docs/transformers/pr_17310/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(KD,"href","/docs/transformers/pr_17310/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(ZD,"href","/docs/transformers/pr_17310/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(eG,"href","/docs/transformers/pr_17310/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(oG,"href","/docs/transformers/pr_17310/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(rG,"href","/docs/transformers/pr_17310/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(tG,"href","/docs/transformers/pr_17310/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(aG,"href","/docs/transformers/pr_17310/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(nG,"href","/docs/transformers/pr_17310/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(sG,"href","/docs/transformers/pr_17310/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(lG,"href","/docs/transformers/pr_17310/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(iG,"href","/docs/transformers/pr_17310/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(dG,"href","/docs/transformers/pr_17310/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(cG,"href","/docs/transformers/pr_17310/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(fG,"href","/docs/transformers/pr_17310/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(mG,"href","/docs/transformers/pr_17310/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(gG,"href","/docs/transformers/pr_17310/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(hG,"href","/docs/transformers/pr_17310/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(pG,"href","/docs/transformers/pr_17310/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(uG,"href","/docs/transformers/pr_17310/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(_G,"href","/docs/transformers/pr_17310/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(bG,"href","/docs/transformers/pr_17310/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M2,"id","transformers.AutoModelForMultipleChoice"),c(M2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M2,"href","#transformers.AutoModelForMultipleChoice"),c(Oi,"class","relative group"),c(vG,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FG,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TG,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MG,"href","/docs/transformers/pr_17310/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(EG,"href","/docs/transformers/pr_17310/en/model_doc/bert#transformers.BertForMultipleChoice"),c(CG,"href","/docs/transformers/pr_17310/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(wG,"href","/docs/transformers/pr_17310/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(AG,"href","/docs/transformers/pr_17310/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(yG,"href","/docs/transformers/pr_17310/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(LG,"href","/docs/transformers/pr_17310/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(xG,"href","/docs/transformers/pr_17310/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c($G,"href","/docs/transformers/pr_17310/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(kG,"href","/docs/transformers/pr_17310/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(SG,"href","/docs/transformers/pr_17310/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(RG,"href","/docs/transformers/pr_17310/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(PG,"href","/docs/transformers/pr_17310/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(BG,"href","/docs/transformers/pr_17310/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(IG,"href","/docs/transformers/pr_17310/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(qG,"href","/docs/transformers/pr_17310/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(NG,"href","/docs/transformers/pr_17310/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(jG,"href","/docs/transformers/pr_17310/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(DG,"href","/docs/transformers/pr_17310/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(GG,"href","/docs/transformers/pr_17310/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(OG,"href","/docs/transformers/pr_17310/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(VG,"href","/docs/transformers/pr_17310/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(XG,"href","/docs/transformers/pr_17310/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(zG,"href","/docs/transformers/pr_17310/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(WG,"href","/docs/transformers/pr_17310/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(QG,"href","/docs/transformers/pr_17310/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(HG,"href","/docs/transformers/pr_17310/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(UG,"href","/docs/transformers/pr_17310/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(JG,"href","/docs/transformers/pr_17310/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ov,"id","transformers.AutoModelForNextSentencePrediction"),c(ov,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ov,"href","#transformers.AutoModelForNextSentencePrediction"),c(zi,"class","relative group"),c(YG,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KG,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZG,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eO,"href","/docs/transformers/pr_17310/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(oO,"href","/docs/transformers/pr_17310/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(rO,"href","/docs/transformers/pr_17310/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(tO,"href","/docs/transformers/pr_17310/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(aO,"href","/docs/transformers/pr_17310/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cv,"id","transformers.AutoModelForTokenClassification"),c(cv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cv,"href","#transformers.AutoModelForTokenClassification"),c(Hi,"class","relative group"),c(nO,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sO,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lO,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iO,"href","/docs/transformers/pr_17310/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(dO,"href","/docs/transformers/pr_17310/en/model_doc/bert#transformers.BertForTokenClassification"),c(cO,"href","/docs/transformers/pr_17310/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(fO,"href","/docs/transformers/pr_17310/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(mO,"href","/docs/transformers/pr_17310/en/model_doc/canine#transformers.CanineForTokenClassification"),c(gO,"href","/docs/transformers/pr_17310/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(hO,"href","/docs/transformers/pr_17310/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(pO,"href","/docs/transformers/pr_17310/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(uO,"href","/docs/transformers/pr_17310/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(_O,"href","/docs/transformers/pr_17310/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(bO,"href","/docs/transformers/pr_17310/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(vO,"href","/docs/transformers/pr_17310/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(FO,"href","/docs/transformers/pr_17310/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(TO,"href","/docs/transformers/pr_17310/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(MO,"href","/docs/transformers/pr_17310/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(EO,"href","/docs/transformers/pr_17310/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(CO,"href","/docs/transformers/pr_17310/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(wO,"href","/docs/transformers/pr_17310/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(AO,"href","/docs/transformers/pr_17310/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(yO,"href","/docs/transformers/pr_17310/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(LO,"href","/docs/transformers/pr_17310/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(xO,"href","/docs/transformers/pr_17310/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c($O,"href","/docs/transformers/pr_17310/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(kO,"href","/docs/transformers/pr_17310/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(SO,"href","/docs/transformers/pr_17310/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(RO,"href","/docs/transformers/pr_17310/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(PO,"href","/docs/transformers/pr_17310/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(BO,"href","/docs/transformers/pr_17310/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(IO,"href","/docs/transformers/pr_17310/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(qO,"href","/docs/transformers/pr_17310/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(NO,"href","/docs/transformers/pr_17310/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(jO,"href","/docs/transformers/pr_17310/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(DO,"href","/docs/transformers/pr_17310/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qv,"id","transformers.AutoModelForQuestionAnswering"),c(Qv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Qv,"href","#transformers.AutoModelForQuestionAnswering"),c(Yi,"class","relative group"),c(GO,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OO,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VO,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XO,"href","/docs/transformers/pr_17310/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(zO,"href","/docs/transformers/pr_17310/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(WO,"href","/docs/transformers/pr_17310/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(QO,"href","/docs/transformers/pr_17310/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(HO,"href","/docs/transformers/pr_17310/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(UO,"href","/docs/transformers/pr_17310/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(JO,"href","/docs/transformers/pr_17310/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(YO,"href","/docs/transformers/pr_17310/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(KO,"href","/docs/transformers/pr_17310/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(ZO,"href","/docs/transformers/pr_17310/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(eV,"href","/docs/transformers/pr_17310/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(oV,"href","/docs/transformers/pr_17310/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(rV,"href","/docs/transformers/pr_17310/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(tV,"href","/docs/transformers/pr_17310/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(aV,"href","/docs/transformers/pr_17310/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(nV,"href","/docs/transformers/pr_17310/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(sV,"href","/docs/transformers/pr_17310/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(lV,"href","/docs/transformers/pr_17310/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(iV,"href","/docs/transformers/pr_17310/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(dV,"href","/docs/transformers/pr_17310/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(cV,"href","/docs/transformers/pr_17310/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(fV,"href","/docs/transformers/pr_17310/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(mV,"href","/docs/transformers/pr_17310/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(gV,"href","/docs/transformers/pr_17310/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(hV,"href","/docs/transformers/pr_17310/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(pV,"href","/docs/transformers/pr_17310/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(uV,"href","/docs/transformers/pr_17310/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(_V,"href","/docs/transformers/pr_17310/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(bV,"href","/docs/transformers/pr_17310/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(vV,"href","/docs/transformers/pr_17310/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(FV,"href","/docs/transformers/pr_17310/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(TV,"href","/docs/transformers/pr_17310/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(MV,"href","/docs/transformers/pr_17310/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(EV,"href","/docs/transformers/pr_17310/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(CV,"href","/docs/transformers/pr_17310/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(wV,"href","/docs/transformers/pr_17310/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(AV,"href","/docs/transformers/pr_17310/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(yV,"href","/docs/transformers/pr_17310/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(LV,"href","/docs/transformers/pr_17310/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(I3,"id","transformers.AutoModelForTableQuestionAnswering"),c(I3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(I3,"href","#transformers.AutoModelForTableQuestionAnswering"),c(ed,"class","relative group"),c(xV,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($V,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kV,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SV,"href","/docs/transformers/pr_17310/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G3,"id","transformers.AutoModelForImageClassification"),c(G3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G3,"href","#transformers.AutoModelForImageClassification"),c(td,"class","relative group"),c(RV,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PV,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BV,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IV,"href","/docs/transformers/pr_17310/en/model_doc/beit#transformers.BeitForImageClassification"),c(qV,"href","/docs/transformers/pr_17310/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(NV,"href","/docs/transformers/pr_17310/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(jV,"href","/docs/transformers/pr_17310/en/model_doc/deit#transformers.DeiTForImageClassification"),c(DV,"href","/docs/transformers/pr_17310/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(GV,"href","/docs/transformers/pr_17310/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(OV,"href","/docs/transformers/pr_17310/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(VV,"href","/docs/transformers/pr_17310/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(XV,"href","/docs/transformers/pr_17310/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(zV,"href","/docs/transformers/pr_17310/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(WV,"href","/docs/transformers/pr_17310/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(QV,"href","/docs/transformers/pr_17310/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(HV,"href","/docs/transformers/pr_17310/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(UV,"href","/docs/transformers/pr_17310/en/model_doc/swin#transformers.SwinForImageClassification"),c(JV,"href","/docs/transformers/pr_17310/en/model_doc/van#transformers.VanForImageClassification"),c(YV,"href","/docs/transformers/pr_17310/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rF,"id","transformers.AutoModelForVision2Seq"),c(rF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rF,"href","#transformers.AutoModelForVision2Seq"),c(sd,"class","relative group"),c(KV,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZV,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eX,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oX,"href","/docs/transformers/pr_17310/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lF,"id","transformers.AutoModelForAudioClassification"),c(lF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lF,"href","#transformers.AutoModelForAudioClassification"),c(dd,"class","relative group"),c(rX,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tX,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aX,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nX,"href","/docs/transformers/pr_17310/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(sX,"href","/docs/transformers/pr_17310/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(lX,"href","/docs/transformers/pr_17310/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(iX,"href","/docs/transformers/pr_17310/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(dX,"href","/docs/transformers/pr_17310/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(cX,"href","/docs/transformers/pr_17310/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(fX,"href","/docs/transformers/pr_17310/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(mX,"href","/docs/transformers/pr_17310/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(gX,"href","/docs/transformers/pr_17310/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FF,"id","transformers.AutoModelForAudioFrameClassification"),c(FF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(FF,"href","#transformers.AutoModelForAudioFrameClassification"),c(md,"class","relative group"),c(hX,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pX,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uX,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_X,"href","/docs/transformers/pr_17310/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(bX,"href","/docs/transformers/pr_17310/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(vX,"href","/docs/transformers/pr_17310/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(FX,"href","/docs/transformers/pr_17310/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(TX,"href","/docs/transformers/pr_17310/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xF,"id","transformers.AutoModelForCTC"),c(xF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xF,"href","#transformers.AutoModelForCTC"),c(pd,"class","relative group"),c(MX,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EX,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CX,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wX,"href","/docs/transformers/pr_17310/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(AX,"href","/docs/transformers/pr_17310/en/model_doc/hubert#transformers.HubertForCTC"),c(yX,"href","/docs/transformers/pr_17310/en/model_doc/sew#transformers.SEWForCTC"),c(LX,"href","/docs/transformers/pr_17310/en/model_doc/sew-d#transformers.SEWDForCTC"),c(xX,"href","/docs/transformers/pr_17310/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c($X,"href","/docs/transformers/pr_17310/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(kX,"href","/docs/transformers/pr_17310/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(SX,"href","/docs/transformers/pr_17310/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(RX,"href","/docs/transformers/pr_17310/en/model_doc/wavlm#transformers.WavLMForCTC"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OF,"id","transformers.AutoModelForSpeechSeq2Seq"),c(OF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(OF,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(bd,"class","relative group"),c(PX,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BX,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IX,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qX,"href","/docs/transformers/pr_17310/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(NX,"href","/docs/transformers/pr_17310/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HF,"id","transformers.AutoModelForAudioXVector"),c(HF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(HF,"href","#transformers.AutoModelForAudioXVector"),c(Td,"class","relative group"),c(jX,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DX,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GX,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OX,"href","/docs/transformers/pr_17310/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(VX,"href","/docs/transformers/pr_17310/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(XX,"href","/docs/transformers/pr_17310/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(zX,"href","/docs/transformers/pr_17310/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(WX,"href","/docs/transformers/pr_17310/en/model_doc/wavlm#transformers.WavLMForXVector"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t0,"id","transformers.AutoModelForMaskedImageModeling"),c(t0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t0,"href","#transformers.AutoModelForMaskedImageModeling"),c(Cd,"class","relative group"),c(QX,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HX,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UX,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JX,"href","/docs/transformers/pr_17310/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(YX,"href","/docs/transformers/pr_17310/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(KX,"href","/docs/transformers/pr_17310/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(c0,"id","transformers.AutoModelForObjectDetection"),c(c0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(c0,"href","#transformers.AutoModelForObjectDetection"),c(Ld,"class","relative group"),c(ZX,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ez,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oz,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rz,"href","/docs/transformers/pr_17310/en/model_doc/detr#transformers.DetrForObjectDetection"),c(tz,"href","/docs/transformers/pr_17310/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u0,"id","transformers.AutoModelForImageSegmentation"),c(u0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u0,"href","#transformers.AutoModelForImageSegmentation"),c(kd,"class","relative group"),c(az,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nz,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sz,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lz,"href","/docs/transformers/pr_17310/en/model_doc/detr#transformers.DetrForSegmentation"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T0,"id","transformers.AutoModelForSemanticSegmentation"),c(T0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T0,"href","#transformers.AutoModelForSemanticSegmentation"),c(Pd,"class","relative group"),c(iz,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dz,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cz,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fz,"href","/docs/transformers/pr_17310/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(mz,"href","/docs/transformers/pr_17310/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(gz,"href","/docs/transformers/pr_17310/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(hz,"href","/docs/transformers/pr_17310/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(x0,"id","transformers.AutoModelForInstanceSegmentation"),c(x0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x0,"href","#transformers.AutoModelForInstanceSegmentation"),c(qd,"class","relative group"),c(pz,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uz,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_z,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bz,"href","/docs/transformers/pr_17310/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P0,"id","transformers.TFAutoModel"),c(P0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P0,"href","#transformers.TFAutoModel"),c(Dd,"class","relative group"),c(vz,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Fz,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Tz,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mz,"href","/docs/transformers/pr_17310/en/model_doc/albert#transformers.TFAlbertModel"),c(Ez,"href","/docs/transformers/pr_17310/en/model_doc/bart#transformers.TFBartModel"),c(Cz,"href","/docs/transformers/pr_17310/en/model_doc/bert#transformers.TFBertModel"),c(wz,"href","/docs/transformers/pr_17310/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(Az,"href","/docs/transformers/pr_17310/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(yz,"href","/docs/transformers/pr_17310/en/model_doc/camembert#transformers.TFCamembertModel"),c(Lz,"href","/docs/transformers/pr_17310/en/model_doc/clip#transformers.TFCLIPModel"),c(xz,"href","/docs/transformers/pr_17310/en/model_doc/convbert#transformers.TFConvBertModel"),c($z,"href","/docs/transformers/pr_17310/en/model_doc/convnext#transformers.TFConvNextModel"),c(kz,"href","/docs/transformers/pr_17310/en/model_doc/ctrl#transformers.TFCTRLModel"),c(Sz,"href","/docs/transformers/pr_17310/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(Rz,"href","/docs/transformers/pr_17310/en/model_doc/deberta#transformers.TFDebertaModel"),c(Pz,"href","/docs/transformers/pr_17310/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(Bz,"href","/docs/transformers/pr_17310/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(Iz,"href","/docs/transformers/pr_17310/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(qz,"href","/docs/transformers/pr_17310/en/model_doc/electra#transformers.TFElectraModel"),c(Nz,"href","/docs/transformers/pr_17310/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(jz,"href","/docs/transformers/pr_17310/en/model_doc/funnel#transformers.TFFunnelModel"),c(Dz,"href","/docs/transformers/pr_17310/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(Gz,"href","/docs/transformers/pr_17310/en/model_doc/gpt2#transformers.TFGPT2Model"),c(Oz,"href","/docs/transformers/pr_17310/en/model_doc/gptj#transformers.TFGPTJModel"),c(Vz,"href","/docs/transformers/pr_17310/en/model_doc/hubert#transformers.TFHubertModel"),c(Xz,"href","/docs/transformers/pr_17310/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(zz,"href","/docs/transformers/pr_17310/en/model_doc/led#transformers.TFLEDModel"),c(Wz,"href","/docs/transformers/pr_17310/en/model_doc/longformer#transformers.TFLongformerModel"),c(Qz,"href","/docs/transformers/pr_17310/en/model_doc/lxmert#transformers.TFLxmertModel"),c(Hz,"href","/docs/transformers/pr_17310/en/model_doc/marian#transformers.TFMarianModel"),c(Uz,"href","/docs/transformers/pr_17310/en/model_doc/mbart#transformers.TFMBartModel"),c(Jz,"href","/docs/transformers/pr_17310/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(Yz,"href","/docs/transformers/pr_17310/en/model_doc/mpnet#transformers.TFMPNetModel"),c(Kz,"href","/docs/transformers/pr_17310/en/model_doc/mt5#transformers.TFMT5Model"),c(Zz,"href","/docs/transformers/pr_17310/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(eW,"href","/docs/transformers/pr_17310/en/model_doc/pegasus#transformers.TFPegasusModel"),c(oW,"href","/docs/transformers/pr_17310/en/model_doc/rembert#transformers.TFRemBertModel"),c(rW,"href","/docs/transformers/pr_17310/en/model_doc/roberta#transformers.TFRobertaModel"),c(tW,"href","/docs/transformers/pr_17310/en/model_doc/roformer#transformers.TFRoFormerModel"),c(aW,"href","/docs/transformers/pr_17310/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(nW,"href","/docs/transformers/pr_17310/en/model_doc/swin#transformers.TFSwinModel"),c(sW,"href","/docs/transformers/pr_17310/en/model_doc/t5#transformers.TFT5Model"),c(lW,"href","/docs/transformers/pr_17310/en/model_doc/tapas#transformers.TFTapasModel"),c(iW,"href","/docs/transformers/pr_17310/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(dW,"href","/docs/transformers/pr_17310/en/model_doc/vit#transformers.TFViTModel"),c(cW,"href","/docs/transformers/pr_17310/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(fW,"href","/docs/transformers/pr_17310/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(mW,"href","/docs/transformers/pr_17310/en/model_doc/xlm#transformers.TFXLMModel"),c(gW,"href","/docs/transformers/pr_17310/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(hW,"href","/docs/transformers/pr_17310/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LT,"id","transformers.TFAutoModelForPreTraining"),c(LT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(LT,"href","#transformers.TFAutoModelForPreTraining"),c(Vd,"class","relative group"),c(pW,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uW,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_W,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bW,"href","/docs/transformers/pr_17310/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(vW,"href","/docs/transformers/pr_17310/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(FW,"href","/docs/transformers/pr_17310/en/model_doc/bert#transformers.TFBertForPreTraining"),c(TW,"href","/docs/transformers/pr_17310/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(MW,"href","/docs/transformers/pr_17310/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(EW,"href","/docs/transformers/pr_17310/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(CW,"href","/docs/transformers/pr_17310/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(wW,"href","/docs/transformers/pr_17310/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(AW,"href","/docs/transformers/pr_17310/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(yW,"href","/docs/transformers/pr_17310/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(LW,"href","/docs/transformers/pr_17310/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(xW,"href","/docs/transformers/pr_17310/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c($W,"href","/docs/transformers/pr_17310/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(kW,"href","/docs/transformers/pr_17310/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(SW,"href","/docs/transformers/pr_17310/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(RW,"href","/docs/transformers/pr_17310/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(PW,"href","/docs/transformers/pr_17310/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(BW,"href","/docs/transformers/pr_17310/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(IW,"href","/docs/transformers/pr_17310/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(qW,"href","/docs/transformers/pr_17310/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(NW,"href","/docs/transformers/pr_17310/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(jW,"href","/docs/transformers/pr_17310/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(DW,"href","/docs/transformers/pr_17310/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e7,"id","transformers.TFAutoModelForCausalLM"),c(e7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e7,"href","#transformers.TFAutoModelForCausalLM"),c(Wd,"class","relative group"),c(GW,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OW,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VW,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XW,"href","/docs/transformers/pr_17310/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(zW,"href","/docs/transformers/pr_17310/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(WW,"href","/docs/transformers/pr_17310/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(QW,"href","/docs/transformers/pr_17310/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(HW,"href","/docs/transformers/pr_17310/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(UW,"href","/docs/transformers/pr_17310/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(JW,"href","/docs/transformers/pr_17310/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(YW,"href","/docs/transformers/pr_17310/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(KW,"href","/docs/transformers/pr_17310/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(ZW,"href","/docs/transformers/pr_17310/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(eQ,"href","/docs/transformers/pr_17310/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(oQ,"href","/docs/transformers/pr_17310/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p7,"id","transformers.TFAutoModelForImageClassification"),c(p7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p7,"href","#transformers.TFAutoModelForImageClassification"),c(Ud,"class","relative group"),c(rQ,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tQ,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aQ,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nQ,"href","/docs/transformers/pr_17310/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(sQ,"href","/docs/transformers/pr_17310/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(lQ,"href","/docs/transformers/pr_17310/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(iQ,"href","/docs/transformers/pr_17310/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M7,"id","transformers.TFAutoModelForMaskedLM"),c(M7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M7,"href","#transformers.TFAutoModelForMaskedLM"),c(Kd,"class","relative group"),c(dQ,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cQ,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fQ,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mQ,"href","/docs/transformers/pr_17310/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(gQ,"href","/docs/transformers/pr_17310/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(hQ,"href","/docs/transformers/pr_17310/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(pQ,"href","/docs/transformers/pr_17310/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(uQ,"href","/docs/transformers/pr_17310/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(_Q,"href","/docs/transformers/pr_17310/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(bQ,"href","/docs/transformers/pr_17310/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(vQ,"href","/docs/transformers/pr_17310/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(FQ,"href","/docs/transformers/pr_17310/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(TQ,"href","/docs/transformers/pr_17310/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(MQ,"href","/docs/transformers/pr_17310/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(EQ,"href","/docs/transformers/pr_17310/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(CQ,"href","/docs/transformers/pr_17310/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(wQ,"href","/docs/transformers/pr_17310/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(AQ,"href","/docs/transformers/pr_17310/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(yQ,"href","/docs/transformers/pr_17310/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(LQ,"href","/docs/transformers/pr_17310/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(xQ,"href","/docs/transformers/pr_17310/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c($Q,"href","/docs/transformers/pr_17310/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(kQ,"href","/docs/transformers/pr_17310/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z7,"id","transformers.TFAutoModelForSeq2SeqLM"),c(z7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z7,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(oc,"class","relative group"),c(SQ,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RQ,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PQ,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BQ,"href","/docs/transformers/pr_17310/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(IQ,"href","/docs/transformers/pr_17310/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(qQ,"href","/docs/transformers/pr_17310/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(NQ,"href","/docs/transformers/pr_17310/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(jQ,"href","/docs/transformers/pr_17310/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(DQ,"href","/docs/transformers/pr_17310/en/model_doc/marian#transformers.TFMarianMTModel"),c(GQ,"href","/docs/transformers/pr_17310/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(OQ,"href","/docs/transformers/pr_17310/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(VQ,"href","/docs/transformers/pr_17310/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(XQ,"href","/docs/transformers/pr_17310/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aM,"id","transformers.TFAutoModelForSequenceClassification"),c(aM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aM,"href","#transformers.TFAutoModelForSequenceClassification"),c(ac,"class","relative group"),c(zQ,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WQ,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QQ,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HQ,"href","/docs/transformers/pr_17310/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(UQ,"href","/docs/transformers/pr_17310/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(JQ,"href","/docs/transformers/pr_17310/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(YQ,"href","/docs/transformers/pr_17310/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(KQ,"href","/docs/transformers/pr_17310/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(ZQ,"href","/docs/transformers/pr_17310/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(eH,"href","/docs/transformers/pr_17310/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(oH,"href","/docs/transformers/pr_17310/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(rH,"href","/docs/transformers/pr_17310/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(tH,"href","/docs/transformers/pr_17310/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(aH,"href","/docs/transformers/pr_17310/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(nH,"href","/docs/transformers/pr_17310/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(sH,"href","/docs/transformers/pr_17310/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(lH,"href","/docs/transformers/pr_17310/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(iH,"href","/docs/transformers/pr_17310/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(dH,"href","/docs/transformers/pr_17310/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(cH,"href","/docs/transformers/pr_17310/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(fH,"href","/docs/transformers/pr_17310/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(mH,"href","/docs/transformers/pr_17310/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(gH,"href","/docs/transformers/pr_17310/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(hH,"href","/docs/transformers/pr_17310/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(pH,"href","/docs/transformers/pr_17310/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(uH,"href","/docs/transformers/pr_17310/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(_H,"href","/docs/transformers/pr_17310/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(bH,"href","/docs/transformers/pr_17310/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(vH,"href","/docs/transformers/pr_17310/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RM,"id","transformers.TFAutoModelForMultipleChoice"),c(RM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(RM,"href","#transformers.TFAutoModelForMultipleChoice"),c(lc,"class","relative group"),c(FH,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TH,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MH,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EH,"href","/docs/transformers/pr_17310/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(CH,"href","/docs/transformers/pr_17310/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(wH,"href","/docs/transformers/pr_17310/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(AH,"href","/docs/transformers/pr_17310/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(yH,"href","/docs/transformers/pr_17310/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(LH,"href","/docs/transformers/pr_17310/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(xH,"href","/docs/transformers/pr_17310/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c($H,"href","/docs/transformers/pr_17310/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(kH,"href","/docs/transformers/pr_17310/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(SH,"href","/docs/transformers/pr_17310/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(RH,"href","/docs/transformers/pr_17310/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(PH,"href","/docs/transformers/pr_17310/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(BH,"href","/docs/transformers/pr_17310/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(IH,"href","/docs/transformers/pr_17310/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(qH,"href","/docs/transformers/pr_17310/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(NH,"href","/docs/transformers/pr_17310/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(jH,"href","/docs/transformers/pr_17310/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZM,"id","transformers.TFAutoModelForNextSentencePrediction"),c(ZM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZM,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(cc,"class","relative group"),c(DH,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GH,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OH,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VH,"href","/docs/transformers/pr_17310/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(XH,"href","/docs/transformers/pr_17310/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a4,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(a4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a4,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(gc,"class","relative group"),c(zH,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WH,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QH,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HH,"href","/docs/transformers/pr_17310/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i4,"id","transformers.TFAutoModelForTokenClassification"),c(i4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i4,"href","#transformers.TFAutoModelForTokenClassification"),c(uc,"class","relative group"),c(UH,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JH,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YH,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KH,"href","/docs/transformers/pr_17310/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(ZH,"href","/docs/transformers/pr_17310/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(eU,"href","/docs/transformers/pr_17310/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(oU,"href","/docs/transformers/pr_17310/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(rU,"href","/docs/transformers/pr_17310/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(tU,"href","/docs/transformers/pr_17310/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(aU,"href","/docs/transformers/pr_17310/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(nU,"href","/docs/transformers/pr_17310/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(sU,"href","/docs/transformers/pr_17310/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(lU,"href","/docs/transformers/pr_17310/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(iU,"href","/docs/transformers/pr_17310/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(dU,"href","/docs/transformers/pr_17310/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(cU,"href","/docs/transformers/pr_17310/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(fU,"href","/docs/transformers/pr_17310/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(mU,"href","/docs/transformers/pr_17310/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(gU,"href","/docs/transformers/pr_17310/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(hU,"href","/docs/transformers/pr_17310/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(pU,"href","/docs/transformers/pr_17310/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(uU,"href","/docs/transformers/pr_17310/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(_U,"href","/docs/transformers/pr_17310/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k4,"id","transformers.TFAutoModelForQuestionAnswering"),c(k4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k4,"href","#transformers.TFAutoModelForQuestionAnswering"),c(vc,"class","relative group"),c(bU,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vU,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FU,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TU,"href","/docs/transformers/pr_17310/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(MU,"href","/docs/transformers/pr_17310/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(EU,"href","/docs/transformers/pr_17310/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(CU,"href","/docs/transformers/pr_17310/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(wU,"href","/docs/transformers/pr_17310/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(AU,"href","/docs/transformers/pr_17310/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(yU,"href","/docs/transformers/pr_17310/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(LU,"href","/docs/transformers/pr_17310/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(xU,"href","/docs/transformers/pr_17310/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c($U,"href","/docs/transformers/pr_17310/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(kU,"href","/docs/transformers/pr_17310/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(SU,"href","/docs/transformers/pr_17310/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(RU,"href","/docs/transformers/pr_17310/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(PU,"href","/docs/transformers/pr_17310/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(BU,"href","/docs/transformers/pr_17310/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(IU,"href","/docs/transformers/pr_17310/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(qU,"href","/docs/transformers/pr_17310/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(NU,"href","/docs/transformers/pr_17310/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(jU,"href","/docs/transformers/pr_17310/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(DU,"href","/docs/transformers/pr_17310/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eE,"id","transformers.TFAutoModelForVision2Seq"),c(eE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eE,"href","#transformers.TFAutoModelForVision2Seq"),c(Mc,"class","relative group"),c(GU,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OU,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VU,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XU,"href","/docs/transformers/pr_17310/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aE,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(aE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aE,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(wc,"class","relative group"),c(zU,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WU,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QU,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HU,"href","/docs/transformers/pr_17310/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iE,"id","transformers.FlaxAutoModel"),c(iE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iE,"href","#transformers.FlaxAutoModel"),c(Lc,"class","relative group"),c(UU,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JU,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YU,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KU,"href","/docs/transformers/pr_17310/en/model_doc/albert#transformers.FlaxAlbertModel"),c(ZU,"href","/docs/transformers/pr_17310/en/model_doc/bart#transformers.FlaxBartModel"),c(eJ,"href","/docs/transformers/pr_17310/en/model_doc/beit#transformers.FlaxBeitModel"),c(oJ,"href","/docs/transformers/pr_17310/en/model_doc/bert#transformers.FlaxBertModel"),c(rJ,"href","/docs/transformers/pr_17310/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(tJ,"href","/docs/transformers/pr_17310/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(aJ,"href","/docs/transformers/pr_17310/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(nJ,"href","/docs/transformers/pr_17310/en/model_doc/clip#transformers.FlaxCLIPModel"),c(sJ,"href","/docs/transformers/pr_17310/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(lJ,"href","/docs/transformers/pr_17310/en/model_doc/electra#transformers.FlaxElectraModel"),c(iJ,"href","/docs/transformers/pr_17310/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(dJ,"href","/docs/transformers/pr_17310/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(cJ,"href","/docs/transformers/pr_17310/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(fJ,"href","/docs/transformers/pr_17310/en/model_doc/marian#transformers.FlaxMarianModel"),c(mJ,"href","/docs/transformers/pr_17310/en/model_doc/mbart#transformers.FlaxMBartModel"),c(gJ,"href","/docs/transformers/pr_17310/en/model_doc/mt5#transformers.FlaxMT5Model"),c(hJ,"href","/docs/transformers/pr_17310/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(pJ,"href","/docs/transformers/pr_17310/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(uJ,"href","/docs/transformers/pr_17310/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(_J,"href","/docs/transformers/pr_17310/en/model_doc/t5#transformers.FlaxT5Model"),c(bJ,"href","/docs/transformers/pr_17310/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(vJ,"href","/docs/transformers/pr_17310/en/model_doc/vit#transformers.FlaxViTModel"),c(FJ,"href","/docs/transformers/pr_17310/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(TJ,"href","/docs/transformers/pr_17310/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(MJ,"href","/docs/transformers/pr_17310/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IE,"id","transformers.FlaxAutoModelForCausalLM"),c(IE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(IE,"href","#transformers.FlaxAutoModelForCausalLM"),c(kc,"class","relative group"),c(EJ,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CJ,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wJ,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AJ,"href","/docs/transformers/pr_17310/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(yJ,"href","/docs/transformers/pr_17310/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(LJ,"href","/docs/transformers/pr_17310/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(xJ,"href","/docs/transformers/pr_17310/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c($J,"href","/docs/transformers/pr_17310/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(kJ,"href","/docs/transformers/pr_17310/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(SJ,"href","/docs/transformers/pr_17310/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(RJ,"href","/docs/transformers/pr_17310/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(PJ,"href","/docs/transformers/pr_17310/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HE,"id","transformers.FlaxAutoModelForPreTraining"),c(HE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(HE,"href","#transformers.FlaxAutoModelForPreTraining"),c(Pc,"class","relative group"),c(BJ,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IJ,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qJ,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NJ,"href","/docs/transformers/pr_17310/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(jJ,"href","/docs/transformers/pr_17310/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(DJ,"href","/docs/transformers/pr_17310/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(GJ,"href","/docs/transformers/pr_17310/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(OJ,"href","/docs/transformers/pr_17310/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(VJ,"href","/docs/transformers/pr_17310/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(XJ,"href","/docs/transformers/pr_17310/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(zJ,"href","/docs/transformers/pr_17310/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(WJ,"href","/docs/transformers/pr_17310/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(QJ,"href","/docs/transformers/pr_17310/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(HJ,"href","/docs/transformers/pr_17310/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(UJ,"href","/docs/transformers/pr_17310/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dC,"id","transformers.FlaxAutoModelForMaskedLM"),c(dC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dC,"href","#transformers.FlaxAutoModelForMaskedLM"),c(qc,"class","relative group"),c(JJ,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YJ,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KJ,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZJ,"href","/docs/transformers/pr_17310/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(eY,"href","/docs/transformers/pr_17310/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(oY,"href","/docs/transformers/pr_17310/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(rY,"href","/docs/transformers/pr_17310/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(tY,"href","/docs/transformers/pr_17310/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(aY,"href","/docs/transformers/pr_17310/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(nY,"href","/docs/transformers/pr_17310/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(sY,"href","/docs/transformers/pr_17310/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(lY,"href","/docs/transformers/pr_17310/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(iY,"href","/docs/transformers/pr_17310/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MC,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(MC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(MC,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Dc,"class","relative group"),c(dY,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cY,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fY,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mY,"href","/docs/transformers/pr_17310/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(gY,"href","/docs/transformers/pr_17310/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(hY,"href","/docs/transformers/pr_17310/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(pY,"href","/docs/transformers/pr_17310/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(uY,"href","/docs/transformers/pr_17310/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(_Y,"href","/docs/transformers/pr_17310/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(bY,"href","/docs/transformers/pr_17310/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(vY,"href","/docs/transformers/pr_17310/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(FY,"href","/docs/transformers/pr_17310/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PC,"id","transformers.FlaxAutoModelForSequenceClassification"),c(PC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PC,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Vc,"class","relative group"),c(TY,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MY,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EY,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CY,"href","/docs/transformers/pr_17310/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(wY,"href","/docs/transformers/pr_17310/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(AY,"href","/docs/transformers/pr_17310/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(yY,"href","/docs/transformers/pr_17310/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(LY,"href","/docs/transformers/pr_17310/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(xY,"href","/docs/transformers/pr_17310/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c($Y,"href","/docs/transformers/pr_17310/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(kY,"href","/docs/transformers/pr_17310/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(SY,"href","/docs/transformers/pr_17310/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(RY,"href","/docs/transformers/pr_17310/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QC,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(QC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(QC,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Wc,"class","relative group"),c(PY,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BY,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IY,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qY,"href","/docs/transformers/pr_17310/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(NY,"href","/docs/transformers/pr_17310/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(jY,"href","/docs/transformers/pr_17310/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(DY,"href","/docs/transformers/pr_17310/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(GY,"href","/docs/transformers/pr_17310/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(OY,"href","/docs/transformers/pr_17310/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(VY,"href","/docs/transformers/pr_17310/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(XY,"href","/docs/transformers/pr_17310/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(zY,"href","/docs/transformers/pr_17310/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(WY,"href","/docs/transformers/pr_17310/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(s5,"id","transformers.FlaxAutoModelForTokenClassification"),c(s5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(s5,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Uc,"class","relative group"),c(QY,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HY,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UY,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JY,"href","/docs/transformers/pr_17310/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(YY,"href","/docs/transformers/pr_17310/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(KY,"href","/docs/transformers/pr_17310/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(ZY,"href","/docs/transformers/pr_17310/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(eK,"href","/docs/transformers/pr_17310/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(oK,"href","/docs/transformers/pr_17310/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(rK,"href","/docs/transformers/pr_17310/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(tK,"href","/docs/transformers/pr_17310/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_5,"id","transformers.FlaxAutoModelForMultipleChoice"),c(_5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_5,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Kc,"class","relative group"),c(aK,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nK,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sK,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lK,"href","/docs/transformers/pr_17310/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(iK,"href","/docs/transformers/pr_17310/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(dK,"href","/docs/transformers/pr_17310/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(cK,"href","/docs/transformers/pr_17310/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(fK,"href","/docs/transformers/pr_17310/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(mK,"href","/docs/transformers/pr_17310/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(gK,"href","/docs/transformers/pr_17310/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(hK,"href","/docs/transformers/pr_17310/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L5,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(L5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L5,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(of,"class","relative group"),c(pK,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uK,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_K,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bK,"href","/docs/transformers/pr_17310/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S5,"id","transformers.FlaxAutoModelForImageClassification"),c(S5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S5,"href","#transformers.FlaxAutoModelForImageClassification"),c(af,"class","relative group"),c(vK,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FK,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TK,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MK,"href","/docs/transformers/pr_17310/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(EK,"href","/docs/transformers/pr_17310/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(q5,"id","transformers.FlaxAutoModelForVision2Seq"),c(q5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q5,"href","#transformers.FlaxAutoModelForVision2Seq"),c(lf,"class","relative group"),c(CK,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wK,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AK,"href","/docs/transformers/pr_17310/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yK,"href","/docs/transformers/pr_17310/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,_){e(document.head,g),b(f,v,_),b(f,p,_),e(p,m),e(m,u),M(d,u,null),e(p,h),e(p,Mo),e(Mo,ci),b(f,hf,_),b(f,rt,_),e(rt,fi),e(rt,mi),e(mi,a6),e(rt,pf),b(f,je,_),b(f,We,_),e(We,gi),e(We,yn),e(yn,n6),e(We,Ln),e(We,xn),e(xn,s6),e(We,hi),e(We,$n),e($n,l6),e(We,pi),b(f,uf,_),M(Ca,f,_),b(f,Qe,_),b(f,Ae,_),e(Ae,w$),e(Ae,ui),e(ui,A$),e(Ae,y$),b(f,Eo,_),b(f,wa,_),e(wa,L$),e(wa,_f),e(_f,x$),e(wa,DDe),b(f,xIe,_),b(f,_i,_),e(_i,bf),e(bf,Fee),M(i6,Fee,null),e(_i,GDe),e(_i,Tee),e(Tee,ODe),b(f,$Ie,_),b(f,kn,_),e(kn,VDe),e(kn,Mee),e(Mee,XDe),e(kn,zDe),e(kn,Eee),e(Eee,WDe),e(kn,QDe),b(f,kIe,_),M(d6,f,_),b(f,SIe,_),b(f,$$,_),e($$,HDe),b(f,RIe,_),M(vf,f,_),b(f,PIe,_),b(f,bi,_),e(bi,Ff),e(Ff,Cee),M(c6,Cee,null),e(bi,UDe),e(bi,wee),e(wee,JDe),b(f,BIe,_),b(f,Co,_),M(f6,Co,null),e(Co,YDe),e(Co,m6),e(m6,KDe),e(m6,k$),e(k$,ZDe),e(m6,eGe),e(Co,oGe),e(Co,g6),e(g6,rGe),e(g6,Aee),e(Aee,tGe),e(g6,aGe),e(Co,nGe),e(Co,Er),M(h6,Er,null),e(Er,sGe),e(Er,yee),e(yee,lGe),e(Er,iGe),e(Er,vi),e(vi,dGe),e(vi,Lee),e(Lee,cGe),e(vi,fGe),e(vi,xee),e(xee,mGe),e(vi,gGe),e(Er,hGe),e(Er,A),e(A,Tf),e(Tf,$ee),e($ee,pGe),e(Tf,uGe),e(Tf,S$),e(S$,_Ge),e(Tf,bGe),e(A,vGe),e(A,Mf),e(Mf,kee),e(kee,FGe),e(Mf,TGe),e(Mf,R$),e(R$,MGe),e(Mf,EGe),e(A,CGe),e(A,Ef),e(Ef,See),e(See,wGe),e(Ef,AGe),e(Ef,P$),e(P$,yGe),e(Ef,LGe),e(A,xGe),e(A,Cf),e(Cf,Ree),e(Ree,$Ge),e(Cf,kGe),e(Cf,B$),e(B$,SGe),e(Cf,RGe),e(A,PGe),e(A,wf),e(wf,Pee),e(Pee,BGe),e(wf,IGe),e(wf,I$),e(I$,qGe),e(wf,NGe),e(A,jGe),e(A,Af),e(Af,Bee),e(Bee,DGe),e(Af,GGe),e(Af,q$),e(q$,OGe),e(Af,VGe),e(A,XGe),e(A,yf),e(yf,Iee),e(Iee,zGe),e(yf,WGe),e(yf,N$),e(N$,QGe),e(yf,HGe),e(A,UGe),e(A,Lf),e(Lf,qee),e(qee,JGe),e(Lf,YGe),e(Lf,j$),e(j$,KGe),e(Lf,ZGe),e(A,eOe),e(A,xf),e(xf,Nee),e(Nee,oOe),e(xf,rOe),e(xf,D$),e(D$,tOe),e(xf,aOe),e(A,nOe),e(A,$f),e($f,jee),e(jee,sOe),e($f,lOe),e($f,G$),e(G$,iOe),e($f,dOe),e(A,cOe),e(A,kf),e(kf,Dee),e(Dee,fOe),e(kf,mOe),e(kf,O$),e(O$,gOe),e(kf,hOe),e(A,pOe),e(A,Sf),e(Sf,Gee),e(Gee,uOe),e(Sf,_Oe),e(Sf,V$),e(V$,bOe),e(Sf,vOe),e(A,FOe),e(A,Rf),e(Rf,Oee),e(Oee,TOe),e(Rf,MOe),e(Rf,X$),e(X$,EOe),e(Rf,COe),e(A,wOe),e(A,Pf),e(Pf,Vee),e(Vee,AOe),e(Pf,yOe),e(Pf,z$),e(z$,LOe),e(Pf,xOe),e(A,$Oe),e(A,Bf),e(Bf,Xee),e(Xee,kOe),e(Bf,SOe),e(Bf,W$),e(W$,ROe),e(Bf,POe),e(A,BOe),e(A,If),e(If,zee),e(zee,IOe),e(If,qOe),e(If,Q$),e(Q$,NOe),e(If,jOe),e(A,DOe),e(A,qf),e(qf,Wee),e(Wee,GOe),e(qf,OOe),e(qf,H$),e(H$,VOe),e(qf,XOe),e(A,zOe),e(A,Nf),e(Nf,Qee),e(Qee,WOe),e(Nf,QOe),e(Nf,U$),e(U$,HOe),e(Nf,UOe),e(A,JOe),e(A,jf),e(jf,Hee),e(Hee,YOe),e(jf,KOe),e(jf,J$),e(J$,ZOe),e(jf,eVe),e(A,oVe),e(A,Df),e(Df,Uee),e(Uee,rVe),e(Df,tVe),e(Df,Y$),e(Y$,aVe),e(Df,nVe),e(A,sVe),e(A,Gf),e(Gf,Jee),e(Jee,lVe),e(Gf,iVe),e(Gf,K$),e(K$,dVe),e(Gf,cVe),e(A,fVe),e(A,Of),e(Of,Yee),e(Yee,mVe),e(Of,gVe),e(Of,Z$),e(Z$,hVe),e(Of,pVe),e(A,uVe),e(A,Vf),e(Vf,Kee),e(Kee,_Ve),e(Vf,bVe),e(Vf,ek),e(ek,vVe),e(Vf,FVe),e(A,TVe),e(A,Xf),e(Xf,Zee),e(Zee,MVe),e(Xf,EVe),e(Xf,ok),e(ok,CVe),e(Xf,wVe),e(A,AVe),e(A,zf),e(zf,eoe),e(eoe,yVe),e(zf,LVe),e(zf,rk),e(rk,xVe),e(zf,$Ve),e(A,kVe),e(A,Wf),e(Wf,ooe),e(ooe,SVe),e(Wf,RVe),e(Wf,tk),e(tk,PVe),e(Wf,BVe),e(A,IVe),e(A,Qf),e(Qf,roe),e(roe,qVe),e(Qf,NVe),e(Qf,ak),e(ak,jVe),e(Qf,DVe),e(A,GVe),e(A,Hf),e(Hf,toe),e(toe,OVe),e(Hf,VVe),e(Hf,nk),e(nk,XVe),e(Hf,zVe),e(A,WVe),e(A,Uf),e(Uf,aoe),e(aoe,QVe),e(Uf,HVe),e(Uf,sk),e(sk,UVe),e(Uf,JVe),e(A,YVe),e(A,Jf),e(Jf,noe),e(noe,KVe),e(Jf,ZVe),e(Jf,lk),e(lk,eXe),e(Jf,oXe),e(A,rXe),e(A,Yf),e(Yf,soe),e(soe,tXe),e(Yf,aXe),e(Yf,ik),e(ik,nXe),e(Yf,sXe),e(A,lXe),e(A,Kf),e(Kf,loe),e(loe,iXe),e(Kf,dXe),e(Kf,dk),e(dk,cXe),e(Kf,fXe),e(A,mXe),e(A,Zf),e(Zf,ioe),e(ioe,gXe),e(Zf,hXe),e(Zf,ck),e(ck,pXe),e(Zf,uXe),e(A,_Xe),e(A,em),e(em,doe),e(doe,bXe),e(em,vXe),e(em,fk),e(fk,FXe),e(em,TXe),e(A,MXe),e(A,om),e(om,coe),e(coe,EXe),e(om,CXe),e(om,mk),e(mk,wXe),e(om,AXe),e(A,yXe),e(A,rm),e(rm,foe),e(foe,LXe),e(rm,xXe),e(rm,gk),e(gk,$Xe),e(rm,kXe),e(A,SXe),e(A,tm),e(tm,moe),e(moe,RXe),e(tm,PXe),e(tm,hk),e(hk,BXe),e(tm,IXe),e(A,qXe),e(A,am),e(am,goe),e(goe,NXe),e(am,jXe),e(am,pk),e(pk,DXe),e(am,GXe),e(A,OXe),e(A,nm),e(nm,hoe),e(hoe,VXe),e(nm,XXe),e(nm,uk),e(uk,zXe),e(nm,WXe),e(A,QXe),e(A,sm),e(sm,poe),e(poe,HXe),e(sm,UXe),e(sm,_k),e(_k,JXe),e(sm,YXe),e(A,KXe),e(A,lm),e(lm,uoe),e(uoe,ZXe),e(lm,eze),e(lm,bk),e(bk,oze),e(lm,rze),e(A,tze),e(A,im),e(im,_oe),e(_oe,aze),e(im,nze),e(im,vk),e(vk,sze),e(im,lze),e(A,ize),e(A,dm),e(dm,boe),e(boe,dze),e(dm,cze),e(dm,Fk),e(Fk,fze),e(dm,mze),e(A,gze),e(A,cm),e(cm,voe),e(voe,hze),e(cm,pze),e(cm,Tk),e(Tk,uze),e(cm,_ze),e(A,bze),e(A,fm),e(fm,Foe),e(Foe,vze),e(fm,Fze),e(fm,Mk),e(Mk,Tze),e(fm,Mze),e(A,Eze),e(A,mm),e(mm,Toe),e(Toe,Cze),e(mm,wze),e(mm,Ek),e(Ek,Aze),e(mm,yze),e(A,Lze),e(A,gm),e(gm,Moe),e(Moe,xze),e(gm,$ze),e(gm,Ck),e(Ck,kze),e(gm,Sze),e(A,Rze),e(A,hm),e(hm,Eoe),e(Eoe,Pze),e(hm,Bze),e(hm,wk),e(wk,Ize),e(hm,qze),e(A,Nze),e(A,pm),e(pm,Coe),e(Coe,jze),e(pm,Dze),e(pm,Ak),e(Ak,Gze),e(pm,Oze),e(A,Vze),e(A,um),e(um,woe),e(woe,Xze),e(um,zze),e(um,yk),e(yk,Wze),e(um,Qze),e(A,Hze),e(A,_m),e(_m,Aoe),e(Aoe,Uze),e(_m,Jze),e(_m,Lk),e(Lk,Yze),e(_m,Kze),e(A,Zze),e(A,bm),e(bm,yoe),e(yoe,eWe),e(bm,oWe),e(bm,xk),e(xk,rWe),e(bm,tWe),e(A,aWe),e(A,vm),e(vm,Loe),e(Loe,nWe),e(vm,sWe),e(vm,$k),e($k,lWe),e(vm,iWe),e(A,dWe),e(A,Fm),e(Fm,xoe),e(xoe,cWe),e(Fm,fWe),e(Fm,kk),e(kk,mWe),e(Fm,gWe),e(A,hWe),e(A,Tm),e(Tm,$oe),e($oe,pWe),e(Tm,uWe),e(Tm,Sk),e(Sk,_We),e(Tm,bWe),e(A,vWe),e(A,Mm),e(Mm,koe),e(koe,FWe),e(Mm,TWe),e(Mm,Rk),e(Rk,MWe),e(Mm,EWe),e(A,CWe),e(A,Em),e(Em,Soe),e(Soe,wWe),e(Em,AWe),e(Em,Pk),e(Pk,yWe),e(Em,LWe),e(A,xWe),e(A,Cm),e(Cm,Roe),e(Roe,$We),e(Cm,kWe),e(Cm,Bk),e(Bk,SWe),e(Cm,RWe),e(A,PWe),e(A,wm),e(wm,Poe),e(Poe,BWe),e(wm,IWe),e(wm,Ik),e(Ik,qWe),e(wm,NWe),e(A,jWe),e(A,Am),e(Am,Boe),e(Boe,DWe),e(Am,GWe),e(Am,qk),e(qk,OWe),e(Am,VWe),e(A,XWe),e(A,ym),e(ym,Ioe),e(Ioe,zWe),e(ym,WWe),e(ym,Nk),e(Nk,QWe),e(ym,HWe),e(A,UWe),e(A,Lm),e(Lm,qoe),e(qoe,JWe),e(Lm,YWe),e(Lm,jk),e(jk,KWe),e(Lm,ZWe),e(A,eQe),e(A,xm),e(xm,Noe),e(Noe,oQe),e(xm,rQe),e(xm,Dk),e(Dk,tQe),e(xm,aQe),e(A,nQe),e(A,$m),e($m,joe),e(joe,sQe),e($m,lQe),e($m,Gk),e(Gk,iQe),e($m,dQe),e(A,cQe),e(A,km),e(km,Doe),e(Doe,fQe),e(km,mQe),e(km,Ok),e(Ok,gQe),e(km,hQe),e(A,pQe),e(A,Sm),e(Sm,Goe),e(Goe,uQe),e(Sm,_Qe),e(Sm,Vk),e(Vk,bQe),e(Sm,vQe),e(A,FQe),e(A,Rm),e(Rm,Ooe),e(Ooe,TQe),e(Rm,MQe),e(Rm,Xk),e(Xk,EQe),e(Rm,CQe),e(A,wQe),e(A,Pm),e(Pm,Voe),e(Voe,AQe),e(Pm,yQe),e(Pm,zk),e(zk,LQe),e(Pm,xQe),e(A,$Qe),e(A,Bm),e(Bm,Xoe),e(Xoe,kQe),e(Bm,SQe),e(Bm,Wk),e(Wk,RQe),e(Bm,PQe),e(A,BQe),e(A,Im),e(Im,zoe),e(zoe,IQe),e(Im,qQe),e(Im,Qk),e(Qk,NQe),e(Im,jQe),e(A,DQe),e(A,qm),e(qm,Woe),e(Woe,GQe),e(qm,OQe),e(qm,Hk),e(Hk,VQe),e(qm,XQe),e(A,zQe),e(A,Nm),e(Nm,Qoe),e(Qoe,WQe),e(Nm,QQe),e(Nm,Uk),e(Uk,HQe),e(Nm,UQe),e(A,JQe),e(A,jm),e(jm,Hoe),e(Hoe,YQe),e(jm,KQe),e(jm,Jk),e(Jk,ZQe),e(jm,eHe),e(A,oHe),e(A,Dm),e(Dm,Uoe),e(Uoe,rHe),e(Dm,tHe),e(Dm,Yk),e(Yk,aHe),e(Dm,nHe),e(A,sHe),e(A,Gm),e(Gm,Joe),e(Joe,lHe),e(Gm,iHe),e(Gm,Kk),e(Kk,dHe),e(Gm,cHe),e(A,fHe),e(A,Om),e(Om,Yoe),e(Yoe,mHe),e(Om,gHe),e(Om,Zk),e(Zk,hHe),e(Om,pHe),e(A,uHe),e(A,Vm),e(Vm,Koe),e(Koe,_He),e(Vm,bHe),e(Vm,eS),e(eS,vHe),e(Vm,FHe),e(A,THe),e(A,Xm),e(Xm,Zoe),e(Zoe,MHe),e(Xm,EHe),e(Xm,oS),e(oS,CHe),e(Xm,wHe),e(A,AHe),e(A,zm),e(zm,ere),e(ere,yHe),e(zm,LHe),e(zm,rS),e(rS,xHe),e(zm,$He),e(A,kHe),e(A,Wm),e(Wm,ore),e(ore,SHe),e(Wm,RHe),e(Wm,tS),e(tS,PHe),e(Wm,BHe),e(A,IHe),e(A,Qm),e(Qm,rre),e(rre,qHe),e(Qm,NHe),e(Qm,aS),e(aS,jHe),e(Qm,DHe),e(A,GHe),e(A,Hm),e(Hm,tre),e(tre,OHe),e(Hm,VHe),e(Hm,nS),e(nS,XHe),e(Hm,zHe),e(A,WHe),e(A,Um),e(Um,are),e(are,QHe),e(Um,HHe),e(Um,sS),e(sS,UHe),e(Um,JHe),e(A,YHe),e(A,Jm),e(Jm,nre),e(nre,KHe),e(Jm,ZHe),e(Jm,lS),e(lS,eUe),e(Jm,oUe),e(A,rUe),e(A,Ym),e(Ym,sre),e(sre,tUe),e(Ym,aUe),e(Ym,iS),e(iS,nUe),e(Ym,sUe),e(A,lUe),e(A,Km),e(Km,lre),e(lre,iUe),e(Km,dUe),e(Km,dS),e(dS,cUe),e(Km,fUe),e(A,mUe),e(A,Zm),e(Zm,ire),e(ire,gUe),e(Zm,hUe),e(Zm,cS),e(cS,pUe),e(Zm,uUe),e(A,_Ue),e(A,eg),e(eg,dre),e(dre,bUe),e(eg,vUe),e(eg,fS),e(fS,FUe),e(eg,TUe),e(A,MUe),e(A,og),e(og,cre),e(cre,EUe),e(og,CUe),e(og,mS),e(mS,wUe),e(og,AUe),e(A,yUe),e(A,rg),e(rg,fre),e(fre,LUe),e(rg,xUe),e(rg,gS),e(gS,$Ue),e(rg,kUe),e(A,SUe),e(A,tg),e(tg,mre),e(mre,RUe),e(tg,PUe),e(tg,hS),e(hS,BUe),e(tg,IUe),e(A,qUe),e(A,ag),e(ag,gre),e(gre,NUe),e(ag,jUe),e(ag,pS),e(pS,DUe),e(ag,GUe),e(A,OUe),e(A,ng),e(ng,hre),e(hre,VUe),e(ng,XUe),e(ng,uS),e(uS,zUe),e(ng,WUe),e(A,QUe),e(A,sg),e(sg,pre),e(pre,HUe),e(sg,UUe),e(sg,_S),e(_S,JUe),e(sg,YUe),e(A,KUe),e(A,lg),e(lg,ure),e(ure,ZUe),e(lg,eJe),e(lg,bS),e(bS,oJe),e(lg,rJe),e(A,tJe),e(A,ig),e(ig,_re),e(_re,aJe),e(ig,nJe),e(ig,vS),e(vS,sJe),e(ig,lJe),e(A,iJe),e(A,dg),e(dg,bre),e(bre,dJe),e(dg,cJe),e(dg,FS),e(FS,fJe),e(dg,mJe),e(A,gJe),e(A,cg),e(cg,vre),e(vre,hJe),e(cg,pJe),e(cg,TS),e(TS,uJe),e(cg,_Je),e(A,bJe),e(A,fg),e(fg,Fre),e(Fre,vJe),e(fg,FJe),e(fg,MS),e(MS,TJe),e(fg,MJe),e(A,EJe),e(A,mg),e(mg,Tre),e(Tre,CJe),e(mg,wJe),e(mg,ES),e(ES,AJe),e(mg,yJe),e(A,LJe),e(A,gg),e(gg,Mre),e(Mre,xJe),e(gg,$Je),e(gg,CS),e(CS,kJe),e(gg,SJe),e(A,RJe),e(A,hg),e(hg,Ere),e(Ere,PJe),e(hg,BJe),e(hg,wS),e(wS,IJe),e(hg,qJe),e(A,NJe),e(A,pg),e(pg,Cre),e(Cre,jJe),e(pg,DJe),e(pg,AS),e(AS,GJe),e(pg,OJe),e(A,VJe),e(A,ug),e(ug,wre),e(wre,XJe),e(ug,zJe),e(ug,yS),e(yS,WJe),e(ug,QJe),e(A,HJe),e(A,_g),e(_g,Are),e(Are,UJe),e(_g,JJe),e(_g,LS),e(LS,YJe),e(_g,KJe),e(Er,ZJe),M(bg,Er,null),e(Co,eYe),e(Co,vg),M(p6,vg,null),e(vg,oYe),e(vg,yre),e(yre,rYe),b(f,IIe,_),b(f,Fi,_),e(Fi,Fg),e(Fg,Lre),M(u6,Lre,null),e(Fi,tYe),e(Fi,xre),e(xre,aYe),b(f,qIe,_),b(f,wo,_),M(_6,wo,null),e(wo,nYe),e(wo,b6),e(b6,sYe),e(b6,xS),e(xS,lYe),e(b6,iYe),e(wo,dYe),e(wo,v6),e(v6,cYe),e(v6,$re),e($re,fYe),e(v6,mYe),e(wo,gYe),e(wo,Cr),M(F6,Cr,null),e(Cr,hYe),e(Cr,kre),e(kre,pYe),e(Cr,uYe),e(Cr,Aa),e(Aa,_Ye),e(Aa,Sre),e(Sre,bYe),e(Aa,vYe),e(Aa,Rre),e(Rre,FYe),e(Aa,TYe),e(Aa,Pre),e(Pre,MYe),e(Aa,EYe),e(Cr,CYe),e(Cr,k),e(k,Sn),e(Sn,Bre),e(Bre,wYe),e(Sn,AYe),e(Sn,$S),e($S,yYe),e(Sn,LYe),e(Sn,kS),e(kS,xYe),e(Sn,$Ye),e(k,kYe),e(k,Rn),e(Rn,Ire),e(Ire,SYe),e(Rn,RYe),e(Rn,SS),e(SS,PYe),e(Rn,BYe),e(Rn,RS),e(RS,IYe),e(Rn,qYe),e(k,NYe),e(k,Pn),e(Pn,qre),e(qre,jYe),e(Pn,DYe),e(Pn,PS),e(PS,GYe),e(Pn,OYe),e(Pn,BS),e(BS,VYe),e(Pn,XYe),e(k,zYe),e(k,Tg),e(Tg,Nre),e(Nre,WYe),e(Tg,QYe),e(Tg,IS),e(IS,HYe),e(Tg,UYe),e(k,JYe),e(k,Bn),e(Bn,jre),e(jre,YYe),e(Bn,KYe),e(Bn,qS),e(qS,ZYe),e(Bn,eKe),e(Bn,NS),e(NS,oKe),e(Bn,rKe),e(k,tKe),e(k,Mg),e(Mg,Dre),e(Dre,aKe),e(Mg,nKe),e(Mg,jS),e(jS,sKe),e(Mg,lKe),e(k,iKe),e(k,Eg),e(Eg,Gre),e(Gre,dKe),e(Eg,cKe),e(Eg,DS),e(DS,fKe),e(Eg,mKe),e(k,gKe),e(k,Cg),e(Cg,Ore),e(Ore,hKe),e(Cg,pKe),e(Cg,GS),e(GS,uKe),e(Cg,_Ke),e(k,bKe),e(k,In),e(In,Vre),e(Vre,vKe),e(In,FKe),e(In,OS),e(OS,TKe),e(In,MKe),e(In,VS),e(VS,EKe),e(In,CKe),e(k,wKe),e(k,qn),e(qn,Xre),e(Xre,AKe),e(qn,yKe),e(qn,XS),e(XS,LKe),e(qn,xKe),e(qn,zS),e(zS,$Ke),e(qn,kKe),e(k,SKe),e(k,Nn),e(Nn,zre),e(zre,RKe),e(Nn,PKe),e(Nn,WS),e(WS,BKe),e(Nn,IKe),e(Nn,QS),e(QS,qKe),e(Nn,NKe),e(k,jKe),e(k,wg),e(wg,Wre),e(Wre,DKe),e(wg,GKe),e(wg,HS),e(HS,OKe),e(wg,VKe),e(k,XKe),e(k,Ag),e(Ag,Qre),e(Qre,zKe),e(Ag,WKe),e(Ag,US),e(US,QKe),e(Ag,HKe),e(k,UKe),e(k,jn),e(jn,Hre),e(Hre,JKe),e(jn,YKe),e(jn,JS),e(JS,KKe),e(jn,ZKe),e(jn,YS),e(YS,eZe),e(jn,oZe),e(k,rZe),e(k,yg),e(yg,Ure),e(Ure,tZe),e(yg,aZe),e(yg,KS),e(KS,nZe),e(yg,sZe),e(k,lZe),e(k,Dn),e(Dn,Jre),e(Jre,iZe),e(Dn,dZe),e(Dn,ZS),e(ZS,cZe),e(Dn,fZe),e(Dn,eR),e(eR,mZe),e(Dn,gZe),e(k,hZe),e(k,Gn),e(Gn,Yre),e(Yre,pZe),e(Gn,uZe),e(Gn,oR),e(oR,_Ze),e(Gn,bZe),e(Gn,rR),e(rR,vZe),e(Gn,FZe),e(k,TZe),e(k,On),e(On,Kre),e(Kre,MZe),e(On,EZe),e(On,tR),e(tR,CZe),e(On,wZe),e(On,aR),e(aR,AZe),e(On,yZe),e(k,LZe),e(k,Lg),e(Lg,Zre),e(Zre,xZe),e(Lg,$Ze),e(Lg,nR),e(nR,kZe),e(Lg,SZe),e(k,RZe),e(k,Vn),e(Vn,ete),e(ete,PZe),e(Vn,BZe),e(Vn,sR),e(sR,IZe),e(Vn,qZe),e(Vn,lR),e(lR,NZe),e(Vn,jZe),e(k,DZe),e(k,Xn),e(Xn,ote),e(ote,GZe),e(Xn,OZe),e(Xn,iR),e(iR,VZe),e(Xn,XZe),e(Xn,dR),e(dR,zZe),e(Xn,WZe),e(k,QZe),e(k,zn),e(zn,rte),e(rte,HZe),e(zn,UZe),e(zn,cR),e(cR,JZe),e(zn,YZe),e(zn,fR),e(fR,KZe),e(zn,ZZe),e(k,eeo),e(k,Wn),e(Wn,tte),e(tte,oeo),e(Wn,reo),e(Wn,mR),e(mR,teo),e(Wn,aeo),e(Wn,gR),e(gR,neo),e(Wn,seo),e(k,leo),e(k,Qn),e(Qn,ate),e(ate,ieo),e(Qn,deo),e(Qn,hR),e(hR,ceo),e(Qn,feo),e(Qn,pR),e(pR,meo),e(Qn,geo),e(k,heo),e(k,Hn),e(Hn,nte),e(nte,peo),e(Hn,ueo),e(Hn,uR),e(uR,_eo),e(Hn,beo),e(Hn,_R),e(_R,veo),e(Hn,Feo),e(k,Teo),e(k,xg),e(xg,ste),e(ste,Meo),e(xg,Eeo),e(xg,bR),e(bR,Ceo),e(xg,weo),e(k,Aeo),e(k,Un),e(Un,lte),e(lte,yeo),e(Un,Leo),e(Un,vR),e(vR,xeo),e(Un,$eo),e(Un,FR),e(FR,keo),e(Un,Seo),e(k,Reo),e(k,$g),e($g,ite),e(ite,Peo),e($g,Beo),e($g,TR),e(TR,Ieo),e($g,qeo),e(k,Neo),e(k,Jn),e(Jn,dte),e(dte,jeo),e(Jn,Deo),e(Jn,MR),e(MR,Geo),e(Jn,Oeo),e(Jn,ER),e(ER,Veo),e(Jn,Xeo),e(k,zeo),e(k,Yn),e(Yn,cte),e(cte,Weo),e(Yn,Qeo),e(Yn,CR),e(CR,Heo),e(Yn,Ueo),e(Yn,wR),e(wR,Jeo),e(Yn,Yeo),e(k,Keo),e(k,Kn),e(Kn,fte),e(fte,Zeo),e(Kn,eoo),e(Kn,AR),e(AR,ooo),e(Kn,roo),e(Kn,yR),e(yR,too),e(Kn,aoo),e(k,noo),e(k,Zn),e(Zn,mte),e(mte,soo),e(Zn,loo),e(Zn,LR),e(LR,ioo),e(Zn,doo),e(Zn,xR),e(xR,coo),e(Zn,foo),e(k,moo),e(k,es),e(es,gte),e(gte,goo),e(es,hoo),e(es,$R),e($R,poo),e(es,uoo),e(es,kR),e(kR,_oo),e(es,boo),e(k,voo),e(k,kg),e(kg,hte),e(hte,Foo),e(kg,Too),e(kg,SR),e(SR,Moo),e(kg,Eoo),e(k,Coo),e(k,os),e(os,pte),e(pte,woo),e(os,Aoo),e(os,RR),e(RR,yoo),e(os,Loo),e(os,PR),e(PR,xoo),e(os,$oo),e(k,koo),e(k,rs),e(rs,ute),e(ute,Soo),e(rs,Roo),e(rs,BR),e(BR,Poo),e(rs,Boo),e(rs,IR),e(IR,Ioo),e(rs,qoo),e(k,Noo),e(k,ts),e(ts,_te),e(_te,joo),e(ts,Doo),e(ts,qR),e(qR,Goo),e(ts,Ooo),e(ts,NR),e(NR,Voo),e(ts,Xoo),e(k,zoo),e(k,as),e(as,bte),e(bte,Woo),e(as,Qoo),e(as,jR),e(jR,Hoo),e(as,Uoo),e(as,DR),e(DR,Joo),e(as,Yoo),e(k,Koo),e(k,ns),e(ns,vte),e(vte,Zoo),e(ns,ero),e(ns,GR),e(GR,oro),e(ns,rro),e(ns,OR),e(OR,tro),e(ns,aro),e(k,nro),e(k,ss),e(ss,Fte),e(Fte,sro),e(ss,lro),e(ss,VR),e(VR,iro),e(ss,dro),e(ss,XR),e(XR,cro),e(ss,fro),e(k,mro),e(k,Sg),e(Sg,Tte),e(Tte,gro),e(Sg,hro),e(Sg,zR),e(zR,pro),e(Sg,uro),e(k,_ro),e(k,ls),e(ls,Mte),e(Mte,bro),e(ls,vro),e(ls,WR),e(WR,Fro),e(ls,Tro),e(ls,QR),e(QR,Mro),e(ls,Ero),e(k,Cro),e(k,Rg),e(Rg,Ete),e(Ete,wro),e(Rg,Aro),e(Rg,HR),e(HR,yro),e(Rg,Lro),e(k,xro),e(k,Pg),e(Pg,Cte),e(Cte,$ro),e(Pg,kro),e(Pg,UR),e(UR,Sro),e(Pg,Rro),e(k,Pro),e(k,is),e(is,wte),e(wte,Bro),e(is,Iro),e(is,JR),e(JR,qro),e(is,Nro),e(is,YR),e(YR,jro),e(is,Dro),e(k,Gro),e(k,ds),e(ds,Ate),e(Ate,Oro),e(ds,Vro),e(ds,KR),e(KR,Xro),e(ds,zro),e(ds,ZR),e(ZR,Wro),e(ds,Qro),e(k,Hro),e(k,cs),e(cs,yte),e(yte,Uro),e(cs,Jro),e(cs,eP),e(eP,Yro),e(cs,Kro),e(cs,oP),e(oP,Zro),e(cs,eto),e(k,oto),e(k,Bg),e(Bg,Lte),e(Lte,rto),e(Bg,tto),e(Bg,rP),e(rP,ato),e(Bg,nto),e(k,sto),e(k,fs),e(fs,xte),e(xte,lto),e(fs,ito),e(fs,tP),e(tP,dto),e(fs,cto),e(fs,aP),e(aP,fto),e(fs,mto),e(k,gto),e(k,ms),e(ms,$te),e($te,hto),e(ms,pto),e(ms,nP),e(nP,uto),e(ms,_to),e(ms,sP),e(sP,bto),e(ms,vto),e(k,Fto),e(k,gs),e(gs,kte),e(kte,Tto),e(gs,Mto),e(gs,lP),e(lP,Eto),e(gs,Cto),e(gs,iP),e(iP,wto),e(gs,Ato),e(k,yto),e(k,hs),e(hs,Ste),e(Ste,Lto),e(hs,xto),e(hs,dP),e(dP,$to),e(hs,kto),e(hs,cP),e(cP,Sto),e(hs,Rto),e(k,Pto),e(k,ps),e(ps,Rte),e(Rte,Bto),e(ps,Ito),e(ps,fP),e(fP,qto),e(ps,Nto),e(ps,mP),e(mP,jto),e(ps,Dto),e(k,Gto),e(k,Ig),e(Ig,Pte),e(Pte,Oto),e(Ig,Vto),e(Ig,gP),e(gP,Xto),e(Ig,zto),e(k,Wto),e(k,us),e(us,Bte),e(Bte,Qto),e(us,Hto),e(us,hP),e(hP,Uto),e(us,Jto),e(us,pP),e(pP,Yto),e(us,Kto),e(k,Zto),e(k,qg),e(qg,Ite),e(Ite,eao),e(qg,oao),e(qg,uP),e(uP,rao),e(qg,tao),e(k,aao),e(k,Ng),e(Ng,qte),e(qte,nao),e(Ng,sao),e(Ng,_P),e(_P,lao),e(Ng,iao),e(k,dao),e(k,jg),e(jg,Nte),e(Nte,cao),e(jg,fao),e(jg,bP),e(bP,mao),e(jg,gao),e(k,hao),e(k,Dg),e(Dg,jte),e(jte,pao),e(Dg,uao),e(Dg,vP),e(vP,_ao),e(Dg,bao),e(k,vao),e(k,_s),e(_s,Dte),e(Dte,Fao),e(_s,Tao),e(_s,FP),e(FP,Mao),e(_s,Eao),e(_s,TP),e(TP,Cao),e(_s,wao),e(k,Aao),e(k,Gg),e(Gg,Gte),e(Gte,yao),e(Gg,Lao),e(Gg,MP),e(MP,xao),e(Gg,$ao),e(k,kao),e(k,bs),e(bs,Ote),e(Ote,Sao),e(bs,Rao),e(bs,EP),e(EP,Pao),e(bs,Bao),e(bs,CP),e(CP,Iao),e(bs,qao),e(k,Nao),e(k,vs),e(vs,Vte),e(Vte,jao),e(vs,Dao),e(vs,wP),e(wP,Gao),e(vs,Oao),e(vs,AP),e(AP,Vao),e(vs,Xao),e(k,zao),e(k,Fs),e(Fs,Xte),e(Xte,Wao),e(Fs,Qao),e(Fs,yP),e(yP,Hao),e(Fs,Uao),e(Fs,LP),e(LP,Jao),e(Fs,Yao),e(k,Kao),e(k,Ts),e(Ts,zte),e(zte,Zao),e(Ts,eno),e(Ts,xP),e(xP,ono),e(Ts,rno),e(Ts,$P),e($P,tno),e(Ts,ano),e(k,nno),e(k,Ms),e(Ms,Wte),e(Wte,sno),e(Ms,lno),e(Ms,kP),e(kP,ino),e(Ms,dno),e(Ms,SP),e(SP,cno),e(Ms,fno),e(k,mno),e(k,Es),e(Es,Qte),e(Qte,gno),e(Es,hno),e(Es,RP),e(RP,pno),e(Es,uno),e(Es,PP),e(PP,_no),e(Es,bno),e(k,vno),e(k,Og),e(Og,Hte),e(Hte,Fno),e(Og,Tno),e(Og,BP),e(BP,Mno),e(Og,Eno),e(k,Cno),e(k,Vg),e(Vg,Ute),e(Ute,wno),e(Vg,Ano),e(Vg,IP),e(IP,yno),e(Vg,Lno),e(k,xno),e(k,Cs),e(Cs,Jte),e(Jte,$no),e(Cs,kno),e(Cs,qP),e(qP,Sno),e(Cs,Rno),e(Cs,NP),e(NP,Pno),e(Cs,Bno),e(k,Ino),e(k,ws),e(ws,Yte),e(Yte,qno),e(ws,Nno),e(ws,jP),e(jP,jno),e(ws,Dno),e(ws,DP),e(DP,Gno),e(ws,Ono),e(k,Vno),e(k,As),e(As,Kte),e(Kte,Xno),e(As,zno),e(As,GP),e(GP,Wno),e(As,Qno),e(As,OP),e(OP,Hno),e(As,Uno),e(k,Jno),e(k,Xg),e(Xg,Zte),e(Zte,Yno),e(Xg,Kno),e(Xg,VP),e(VP,Zno),e(Xg,eso),e(k,oso),e(k,zg),e(zg,eae),e(eae,rso),e(zg,tso),e(zg,XP),e(XP,aso),e(zg,nso),e(k,sso),e(k,Wg),e(Wg,oae),e(oae,lso),e(Wg,iso),e(Wg,zP),e(zP,dso),e(Wg,cso),e(k,fso),e(k,ys),e(ys,rae),e(rae,mso),e(ys,gso),e(ys,WP),e(WP,hso),e(ys,pso),e(ys,QP),e(QP,uso),e(ys,_so),e(k,bso),e(k,Qg),e(Qg,tae),e(tae,vso),e(Qg,Fso),e(Qg,HP),e(HP,Tso),e(Qg,Mso),e(k,Eso),e(k,Hg),e(Hg,aae),e(aae,Cso),e(Hg,wso),e(Hg,UP),e(UP,Aso),e(Hg,yso),e(k,Lso),e(k,Ug),e(Ug,nae),e(nae,xso),e(Ug,$so),e(Ug,JP),e(JP,kso),e(Ug,Sso),e(k,Rso),e(k,Ls),e(Ls,sae),e(sae,Pso),e(Ls,Bso),e(Ls,YP),e(YP,Iso),e(Ls,qso),e(Ls,KP),e(KP,Nso),e(Ls,jso),e(k,Dso),e(k,Jg),e(Jg,lae),e(lae,Gso),e(Jg,Oso),e(Jg,ZP),e(ZP,Vso),e(Jg,Xso),e(k,zso),e(k,Yg),e(Yg,iae),e(iae,Wso),e(Yg,Qso),e(Yg,eB),e(eB,Hso),e(Yg,Uso),e(k,Jso),e(k,xs),e(xs,dae),e(dae,Yso),e(xs,Kso),e(xs,oB),e(oB,Zso),e(xs,elo),e(xs,rB),e(rB,olo),e(xs,rlo),e(k,tlo),e(k,$s),e($s,cae),e(cae,alo),e($s,nlo),e($s,tB),e(tB,slo),e($s,llo),e($s,aB),e(aB,ilo),e($s,dlo),e(k,clo),e(k,ks),e(ks,fae),e(fae,flo),e(ks,mlo),e(ks,nB),e(nB,glo),e(ks,hlo),e(ks,sB),e(sB,plo),e(ks,ulo),e(k,_lo),e(k,Ss),e(Ss,mae),e(mae,blo),e(Ss,vlo),e(Ss,lB),e(lB,Flo),e(Ss,Tlo),e(Ss,iB),e(iB,Mlo),e(Ss,Elo),e(Cr,Clo),M(Kg,Cr,null),e(wo,wlo),e(wo,Zg),M(T6,Zg,null),e(Zg,Alo),e(Zg,gae),e(gae,ylo),b(f,NIe,_),b(f,Ti,_),e(Ti,eh),e(eh,hae),M(M6,hae,null),e(Ti,Llo),e(Ti,pae),e(pae,xlo),b(f,jIe,_),b(f,Ao,_),M(E6,Ao,null),e(Ao,$lo),e(Ao,C6),e(C6,klo),e(C6,dB),e(dB,Slo),e(C6,Rlo),e(Ao,Plo),e(Ao,w6),e(w6,Blo),e(w6,uae),e(uae,Ilo),e(w6,qlo),e(Ao,Nlo),e(Ao,He),M(A6,He,null),e(He,jlo),e(He,_ae),e(_ae,Dlo),e(He,Glo),e(He,ya),e(ya,Olo),e(ya,bae),e(bae,Vlo),e(ya,Xlo),e(ya,vae),e(vae,zlo),e(ya,Wlo),e(ya,Fae),e(Fae,Qlo),e(ya,Hlo),e(He,Ulo),e(He,Z),e(Z,oh),e(oh,Tae),e(Tae,Jlo),e(oh,Ylo),e(oh,cB),e(cB,Klo),e(oh,Zlo),e(Z,eio),e(Z,rh),e(rh,Mae),e(Mae,oio),e(rh,rio),e(rh,fB),e(fB,tio),e(rh,aio),e(Z,nio),e(Z,th),e(th,Eae),e(Eae,sio),e(th,lio),e(th,mB),e(mB,iio),e(th,dio),e(Z,cio),e(Z,ah),e(ah,Cae),e(Cae,fio),e(ah,mio),e(ah,gB),e(gB,gio),e(ah,hio),e(Z,pio),e(Z,nh),e(nh,wae),e(wae,uio),e(nh,_io),e(nh,hB),e(hB,bio),e(nh,vio),e(Z,Fio),e(Z,sh),e(sh,Aae),e(Aae,Tio),e(sh,Mio),e(sh,pB),e(pB,Eio),e(sh,Cio),e(Z,wio),e(Z,lh),e(lh,yae),e(yae,Aio),e(lh,yio),e(lh,uB),e(uB,Lio),e(lh,xio),e(Z,$io),e(Z,ih),e(ih,Lae),e(Lae,kio),e(ih,Sio),e(ih,_B),e(_B,Rio),e(ih,Pio),e(Z,Bio),e(Z,dh),e(dh,xae),e(xae,Iio),e(dh,qio),e(dh,bB),e(bB,Nio),e(dh,jio),e(Z,Dio),e(Z,ch),e(ch,$ae),e($ae,Gio),e(ch,Oio),e(ch,vB),e(vB,Vio),e(ch,Xio),e(Z,zio),e(Z,fh),e(fh,kae),e(kae,Wio),e(fh,Qio),e(fh,FB),e(FB,Hio),e(fh,Uio),e(Z,Jio),e(Z,mh),e(mh,Sae),e(Sae,Yio),e(mh,Kio),e(mh,TB),e(TB,Zio),e(mh,edo),e(Z,odo),e(Z,gh),e(gh,Rae),e(Rae,rdo),e(gh,tdo),e(gh,MB),e(MB,ado),e(gh,ndo),e(Z,sdo),e(Z,hh),e(hh,Pae),e(Pae,ldo),e(hh,ido),e(hh,EB),e(EB,ddo),e(hh,cdo),e(Z,fdo),e(Z,ph),e(ph,Bae),e(Bae,mdo),e(ph,gdo),e(ph,CB),e(CB,hdo),e(ph,pdo),e(Z,udo),e(Z,uh),e(uh,Iae),e(Iae,_do),e(uh,bdo),e(uh,wB),e(wB,vdo),e(uh,Fdo),e(Z,Tdo),e(Z,_h),e(_h,qae),e(qae,Mdo),e(_h,Edo),e(_h,AB),e(AB,Cdo),e(_h,wdo),e(Z,Ado),e(Z,bh),e(bh,Nae),e(Nae,ydo),e(bh,Ldo),e(bh,yB),e(yB,xdo),e(bh,$do),e(Z,kdo),e(Z,vh),e(vh,jae),e(jae,Sdo),e(vh,Rdo),e(vh,LB),e(LB,Pdo),e(vh,Bdo),e(Z,Ido),e(Z,Fh),e(Fh,Dae),e(Dae,qdo),e(Fh,Ndo),e(Fh,xB),e(xB,jdo),e(Fh,Ddo),e(Z,Gdo),e(Z,Th),e(Th,Gae),e(Gae,Odo),e(Th,Vdo),e(Th,$B),e($B,Xdo),e(Th,zdo),e(Z,Wdo),e(Z,Mh),e(Mh,Oae),e(Oae,Qdo),e(Mh,Hdo),e(Mh,kB),e(kB,Udo),e(Mh,Jdo),e(Z,Ydo),e(Z,Eh),e(Eh,Vae),e(Vae,Kdo),e(Eh,Zdo),e(Eh,SB),e(SB,eco),e(Eh,oco),e(Z,rco),e(Z,Ch),e(Ch,Xae),e(Xae,tco),e(Ch,aco),e(Ch,RB),e(RB,nco),e(Ch,sco),e(Z,lco),e(Z,wh),e(wh,zae),e(zae,ico),e(wh,dco),e(wh,PB),e(PB,cco),e(wh,fco),e(Z,mco),e(Z,Ah),e(Ah,Wae),e(Wae,gco),e(Ah,hco),e(Ah,BB),e(BB,pco),e(Ah,uco),e(He,_co),M(yh,He,null),e(He,bco),M(Lh,He,null),e(Ao,vco),e(Ao,xh),M(y6,xh,null),e(xh,Fco),e(xh,Qae),e(Qae,Tco),b(f,DIe,_),b(f,Mi,_),e(Mi,$h),e($h,Hae),M(L6,Hae,null),e(Mi,Mco),e(Mi,Uae),e(Uae,Eco),b(f,GIe,_),b(f,yo,_),M(x6,yo,null),e(yo,Cco),e(yo,$6),e($6,wco),e($6,IB),e(IB,Aco),e($6,yco),e(yo,Lco),e(yo,k6),e(k6,xco),e(k6,Jae),e(Jae,$co),e(k6,kco),e(yo,Sco),e(yo,Ue),M(S6,Ue,null),e(Ue,Rco),e(Ue,Yae),e(Yae,Pco),e(Ue,Bco),e(Ue,Ei),e(Ei,Ico),e(Ei,Kae),e(Kae,qco),e(Ei,Nco),e(Ei,Zae),e(Zae,jco),e(Ei,Dco),e(Ue,Gco),e(Ue,pe),e(pe,kh),e(kh,ene),e(ene,Oco),e(kh,Vco),e(kh,qB),e(qB,Xco),e(kh,zco),e(pe,Wco),e(pe,Sh),e(Sh,one),e(one,Qco),e(Sh,Hco),e(Sh,rne),e(rne,Uco),e(Sh,Jco),e(pe,Yco),e(pe,Rh),e(Rh,tne),e(tne,Kco),e(Rh,Zco),e(Rh,NB),e(NB,efo),e(Rh,ofo),e(pe,rfo),e(pe,Ph),e(Ph,ane),e(ane,tfo),e(Ph,afo),e(Ph,jB),e(jB,nfo),e(Ph,sfo),e(pe,lfo),e(pe,Bh),e(Bh,nne),e(nne,ifo),e(Bh,dfo),e(Bh,DB),e(DB,cfo),e(Bh,ffo),e(pe,mfo),e(pe,Ih),e(Ih,sne),e(sne,gfo),e(Ih,hfo),e(Ih,GB),e(GB,pfo),e(Ih,ufo),e(pe,_fo),e(pe,qh),e(qh,lne),e(lne,bfo),e(qh,vfo),e(qh,OB),e(OB,Ffo),e(qh,Tfo),e(pe,Mfo),e(pe,Nh),e(Nh,ine),e(ine,Efo),e(Nh,Cfo),e(Nh,VB),e(VB,wfo),e(Nh,Afo),e(pe,yfo),e(pe,jh),e(jh,dne),e(dne,Lfo),e(jh,xfo),e(jh,XB),e(XB,$fo),e(jh,kfo),e(pe,Sfo),e(pe,Dh),e(Dh,cne),e(cne,Rfo),e(Dh,Pfo),e(Dh,zB),e(zB,Bfo),e(Dh,Ifo),e(pe,qfo),e(pe,Gh),e(Gh,fne),e(fne,Nfo),e(Gh,jfo),e(Gh,WB),e(WB,Dfo),e(Gh,Gfo),e(pe,Ofo),e(pe,Oh),e(Oh,mne),e(mne,Vfo),e(Oh,Xfo),e(Oh,QB),e(QB,zfo),e(Oh,Wfo),e(pe,Qfo),e(pe,Vh),e(Vh,gne),e(gne,Hfo),e(Vh,Ufo),e(Vh,HB),e(HB,Jfo),e(Vh,Yfo),e(pe,Kfo),e(pe,Xh),e(Xh,hne),e(hne,Zfo),e(Xh,emo),e(Xh,UB),e(UB,omo),e(Xh,rmo),e(pe,tmo),e(pe,zh),e(zh,pne),e(pne,amo),e(zh,nmo),e(zh,JB),e(JB,smo),e(zh,lmo),e(pe,imo),e(pe,Wh),e(Wh,une),e(une,dmo),e(Wh,cmo),e(Wh,YB),e(YB,fmo),e(Wh,mmo),e(Ue,gmo),M(Qh,Ue,null),e(Ue,hmo),M(Hh,Ue,null),e(yo,pmo),e(yo,Uh),M(R6,Uh,null),e(Uh,umo),e(Uh,_ne),e(_ne,_mo),b(f,OIe,_),b(f,Ci,_),e(Ci,Jh),e(Jh,bne),M(P6,bne,null),e(Ci,bmo),e(Ci,vne),e(vne,vmo),b(f,VIe,_),b(f,Lo,_),M(B6,Lo,null),e(Lo,Fmo),e(Lo,wi),e(wi,Tmo),e(wi,KB),e(KB,Mmo),e(wi,Emo),e(wi,ZB),e(ZB,Cmo),e(wi,wmo),e(Lo,Amo),e(Lo,I6),e(I6,ymo),e(I6,Fne),e(Fne,Lmo),e(I6,xmo),e(Lo,$mo),e(Lo,tt),M(q6,tt,null),e(tt,kmo),e(tt,Tne),e(Tne,Smo),e(tt,Rmo),e(tt,Ai),e(Ai,Pmo),e(Ai,Mne),e(Mne,Bmo),e(Ai,Imo),e(Ai,eI),e(eI,qmo),e(Ai,Nmo),e(tt,jmo),M(Yh,tt,null),e(Lo,Dmo),e(Lo,Je),M(N6,Je,null),e(Je,Gmo),e(Je,Ene),e(Ene,Omo),e(Je,Vmo),e(Je,La),e(La,Xmo),e(La,Cne),e(Cne,zmo),e(La,Wmo),e(La,wne),e(wne,Qmo),e(La,Hmo),e(La,Ane),e(Ane,Umo),e(La,Jmo),e(Je,Ymo),e(Je,x),e(x,Kh),e(Kh,yne),e(yne,Kmo),e(Kh,Zmo),e(Kh,oI),e(oI,ego),e(Kh,ogo),e(x,rgo),e(x,Zh),e(Zh,Lne),e(Lne,tgo),e(Zh,ago),e(Zh,rI),e(rI,ngo),e(Zh,sgo),e(x,lgo),e(x,ep),e(ep,xne),e(xne,igo),e(ep,dgo),e(ep,tI),e(tI,cgo),e(ep,fgo),e(x,mgo),e(x,op),e(op,$ne),e($ne,ggo),e(op,hgo),e(op,aI),e(aI,pgo),e(op,ugo),e(x,_go),e(x,rp),e(rp,kne),e(kne,bgo),e(rp,vgo),e(rp,nI),e(nI,Fgo),e(rp,Tgo),e(x,Mgo),e(x,tp),e(tp,Sne),e(Sne,Ego),e(tp,Cgo),e(tp,sI),e(sI,wgo),e(tp,Ago),e(x,ygo),e(x,ap),e(ap,Rne),e(Rne,Lgo),e(ap,xgo),e(ap,lI),e(lI,$go),e(ap,kgo),e(x,Sgo),e(x,np),e(np,Pne),e(Pne,Rgo),e(np,Pgo),e(np,iI),e(iI,Bgo),e(np,Igo),e(x,qgo),e(x,sp),e(sp,Bne),e(Bne,Ngo),e(sp,jgo),e(sp,dI),e(dI,Dgo),e(sp,Ggo),e(x,Ogo),e(x,lp),e(lp,Ine),e(Ine,Vgo),e(lp,Xgo),e(lp,cI),e(cI,zgo),e(lp,Wgo),e(x,Qgo),e(x,ip),e(ip,qne),e(qne,Hgo),e(ip,Ugo),e(ip,fI),e(fI,Jgo),e(ip,Ygo),e(x,Kgo),e(x,dp),e(dp,Nne),e(Nne,Zgo),e(dp,eho),e(dp,mI),e(mI,oho),e(dp,rho),e(x,tho),e(x,cp),e(cp,jne),e(jne,aho),e(cp,nho),e(cp,gI),e(gI,sho),e(cp,lho),e(x,iho),e(x,fp),e(fp,Dne),e(Dne,dho),e(fp,cho),e(fp,hI),e(hI,fho),e(fp,mho),e(x,gho),e(x,mp),e(mp,Gne),e(Gne,hho),e(mp,pho),e(mp,pI),e(pI,uho),e(mp,_ho),e(x,bho),e(x,gp),e(gp,One),e(One,vho),e(gp,Fho),e(gp,uI),e(uI,Tho),e(gp,Mho),e(x,Eho),e(x,hp),e(hp,Vne),e(Vne,Cho),e(hp,who),e(hp,_I),e(_I,Aho),e(hp,yho),e(x,Lho),e(x,pp),e(pp,Xne),e(Xne,xho),e(pp,$ho),e(pp,bI),e(bI,kho),e(pp,Sho),e(x,Rho),e(x,up),e(up,zne),e(zne,Pho),e(up,Bho),e(up,vI),e(vI,Iho),e(up,qho),e(x,Nho),e(x,_p),e(_p,Wne),e(Wne,jho),e(_p,Dho),e(_p,FI),e(FI,Gho),e(_p,Oho),e(x,Vho),e(x,bp),e(bp,Qne),e(Qne,Xho),e(bp,zho),e(bp,TI),e(TI,Who),e(bp,Qho),e(x,Hho),e(x,vp),e(vp,Hne),e(Hne,Uho),e(vp,Jho),e(vp,MI),e(MI,Yho),e(vp,Kho),e(x,Zho),e(x,Fp),e(Fp,Une),e(Une,epo),e(Fp,opo),e(Fp,EI),e(EI,rpo),e(Fp,tpo),e(x,apo),e(x,Tp),e(Tp,Jne),e(Jne,npo),e(Tp,spo),e(Tp,CI),e(CI,lpo),e(Tp,ipo),e(x,dpo),e(x,Mp),e(Mp,Yne),e(Yne,cpo),e(Mp,fpo),e(Mp,wI),e(wI,mpo),e(Mp,gpo),e(x,hpo),e(x,Ep),e(Ep,Kne),e(Kne,ppo),e(Ep,upo),e(Ep,AI),e(AI,_po),e(Ep,bpo),e(x,vpo),e(x,Cp),e(Cp,Zne),e(Zne,Fpo),e(Cp,Tpo),e(Cp,yI),e(yI,Mpo),e(Cp,Epo),e(x,Cpo),e(x,wp),e(wp,ese),e(ese,wpo),e(wp,Apo),e(wp,LI),e(LI,ypo),e(wp,Lpo),e(x,xpo),e(x,Ap),e(Ap,ose),e(ose,$po),e(Ap,kpo),e(Ap,xI),e(xI,Spo),e(Ap,Rpo),e(x,Ppo),e(x,yp),e(yp,rse),e(rse,Bpo),e(yp,Ipo),e(yp,$I),e($I,qpo),e(yp,Npo),e(x,jpo),e(x,Lp),e(Lp,tse),e(tse,Dpo),e(Lp,Gpo),e(Lp,kI),e(kI,Opo),e(Lp,Vpo),e(x,Xpo),e(x,Rs),e(Rs,ase),e(ase,zpo),e(Rs,Wpo),e(Rs,SI),e(SI,Qpo),e(Rs,Hpo),e(Rs,RI),e(RI,Upo),e(Rs,Jpo),e(x,Ypo),e(x,xp),e(xp,nse),e(nse,Kpo),e(xp,Zpo),e(xp,PI),e(PI,euo),e(xp,ouo),e(x,ruo),e(x,$p),e($p,sse),e(sse,tuo),e($p,auo),e($p,BI),e(BI,nuo),e($p,suo),e(x,luo),e(x,kp),e(kp,lse),e(lse,iuo),e(kp,duo),e(kp,II),e(II,cuo),e(kp,fuo),e(x,muo),e(x,Sp),e(Sp,ise),e(ise,guo),e(Sp,huo),e(Sp,qI),e(qI,puo),e(Sp,uuo),e(x,_uo),e(x,Rp),e(Rp,dse),e(dse,buo),e(Rp,vuo),e(Rp,NI),e(NI,Fuo),e(Rp,Tuo),e(x,Muo),e(x,Pp),e(Pp,cse),e(cse,Euo),e(Pp,Cuo),e(Pp,jI),e(jI,wuo),e(Pp,Auo),e(x,yuo),e(x,Bp),e(Bp,fse),e(fse,Luo),e(Bp,xuo),e(Bp,DI),e(DI,$uo),e(Bp,kuo),e(x,Suo),e(x,Ip),e(Ip,mse),e(mse,Ruo),e(Ip,Puo),e(Ip,GI),e(GI,Buo),e(Ip,Iuo),e(x,quo),e(x,qp),e(qp,gse),e(gse,Nuo),e(qp,juo),e(qp,OI),e(OI,Duo),e(qp,Guo),e(x,Ouo),e(x,Np),e(Np,hse),e(hse,Vuo),e(Np,Xuo),e(Np,VI),e(VI,zuo),e(Np,Wuo),e(x,Quo),e(x,jp),e(jp,pse),e(pse,Huo),e(jp,Uuo),e(jp,XI),e(XI,Juo),e(jp,Yuo),e(x,Kuo),e(x,Dp),e(Dp,use),e(use,Zuo),e(Dp,e_o),e(Dp,zI),e(zI,o_o),e(Dp,r_o),e(x,t_o),e(x,Gp),e(Gp,_se),e(_se,a_o),e(Gp,n_o),e(Gp,WI),e(WI,s_o),e(Gp,l_o),e(x,i_o),e(x,Op),e(Op,bse),e(bse,d_o),e(Op,c_o),e(Op,QI),e(QI,f_o),e(Op,m_o),e(x,g_o),e(x,Vp),e(Vp,vse),e(vse,h_o),e(Vp,p_o),e(Vp,HI),e(HI,u_o),e(Vp,__o),e(x,b_o),e(x,Xp),e(Xp,Fse),e(Fse,v_o),e(Xp,F_o),e(Xp,UI),e(UI,T_o),e(Xp,M_o),e(x,E_o),e(x,zp),e(zp,Tse),e(Tse,C_o),e(zp,w_o),e(zp,JI),e(JI,A_o),e(zp,y_o),e(x,L_o),e(x,Wp),e(Wp,Mse),e(Mse,x_o),e(Wp,$_o),e(Wp,YI),e(YI,k_o),e(Wp,S_o),e(x,R_o),e(x,Qp),e(Qp,Ese),e(Ese,P_o),e(Qp,B_o),e(Qp,KI),e(KI,I_o),e(Qp,q_o),e(x,N_o),e(x,Hp),e(Hp,Cse),e(Cse,j_o),e(Hp,D_o),e(Hp,ZI),e(ZI,G_o),e(Hp,O_o),e(x,V_o),e(x,Up),e(Up,wse),e(wse,X_o),e(Up,z_o),e(Up,eq),e(eq,W_o),e(Up,Q_o),e(x,H_o),e(x,Jp),e(Jp,Ase),e(Ase,U_o),e(Jp,J_o),e(Jp,oq),e(oq,Y_o),e(Jp,K_o),e(x,Z_o),e(x,Yp),e(Yp,yse),e(yse,e1o),e(Yp,o1o),e(Yp,rq),e(rq,r1o),e(Yp,t1o),e(x,a1o),e(x,Kp),e(Kp,Lse),e(Lse,n1o),e(Kp,s1o),e(Kp,tq),e(tq,l1o),e(Kp,i1o),e(x,d1o),e(x,Zp),e(Zp,xse),e(xse,c1o),e(Zp,f1o),e(Zp,aq),e(aq,m1o),e(Zp,g1o),e(x,h1o),e(x,eu),e(eu,$se),e($se,p1o),e(eu,u1o),e(eu,nq),e(nq,_1o),e(eu,b1o),e(x,v1o),e(x,ou),e(ou,kse),e(kse,F1o),e(ou,T1o),e(ou,sq),e(sq,M1o),e(ou,E1o),e(x,C1o),e(x,ru),e(ru,Sse),e(Sse,w1o),e(ru,A1o),e(ru,lq),e(lq,y1o),e(ru,L1o),e(x,x1o),e(x,tu),e(tu,Rse),e(Rse,$1o),e(tu,k1o),e(tu,iq),e(iq,S1o),e(tu,R1o),e(x,P1o),e(x,au),e(au,Pse),e(Pse,B1o),e(au,I1o),e(au,dq),e(dq,q1o),e(au,N1o),e(x,j1o),e(x,nu),e(nu,Bse),e(Bse,D1o),e(nu,G1o),e(nu,cq),e(cq,O1o),e(nu,V1o),e(x,X1o),e(x,su),e(su,Ise),e(Ise,z1o),e(su,W1o),e(su,fq),e(fq,Q1o),e(su,H1o),e(x,U1o),e(x,lu),e(lu,qse),e(qse,J1o),e(lu,Y1o),e(lu,mq),e(mq,K1o),e(lu,Z1o),e(x,ebo),e(x,iu),e(iu,Nse),e(Nse,obo),e(iu,rbo),e(iu,gq),e(gq,tbo),e(iu,abo),e(x,nbo),e(x,du),e(du,jse),e(jse,sbo),e(du,lbo),e(du,hq),e(hq,ibo),e(du,dbo),e(x,cbo),e(x,cu),e(cu,Dse),e(Dse,fbo),e(cu,mbo),e(cu,pq),e(pq,gbo),e(cu,hbo),e(x,pbo),e(x,fu),e(fu,Gse),e(Gse,ubo),e(fu,_bo),e(fu,uq),e(uq,bbo),e(fu,vbo),e(x,Fbo),e(x,mu),e(mu,Ose),e(Ose,Tbo),e(mu,Mbo),e(mu,_q),e(_q,Ebo),e(mu,Cbo),e(x,wbo),e(x,gu),e(gu,Vse),e(Vse,Abo),e(gu,ybo),e(gu,bq),e(bq,Lbo),e(gu,xbo),e(x,$bo),e(x,hu),e(hu,Xse),e(Xse,kbo),e(hu,Sbo),e(hu,vq),e(vq,Rbo),e(hu,Pbo),e(x,Bbo),e(x,pu),e(pu,zse),e(zse,Ibo),e(pu,qbo),e(pu,Fq),e(Fq,Nbo),e(pu,jbo),e(x,Dbo),e(x,uu),e(uu,Wse),e(Wse,Gbo),e(uu,Obo),e(uu,Tq),e(Tq,Vbo),e(uu,Xbo),e(x,zbo),e(x,_u),e(_u,Qse),e(Qse,Wbo),e(_u,Qbo),e(_u,Mq),e(Mq,Hbo),e(_u,Ubo),e(x,Jbo),e(x,bu),e(bu,Hse),e(Hse,Ybo),e(bu,Kbo),e(bu,Eq),e(Eq,Zbo),e(bu,e2o),e(x,o2o),e(x,vu),e(vu,Use),e(Use,r2o),e(vu,t2o),e(vu,Cq),e(Cq,a2o),e(vu,n2o),e(x,s2o),e(x,Fu),e(Fu,Jse),e(Jse,l2o),e(Fu,i2o),e(Fu,wq),e(wq,d2o),e(Fu,c2o),e(x,f2o),e(x,Tu),e(Tu,Yse),e(Yse,m2o),e(Tu,g2o),e(Tu,Aq),e(Aq,h2o),e(Tu,p2o),e(x,u2o),e(x,Mu),e(Mu,Kse),e(Kse,_2o),e(Mu,b2o),e(Mu,yq),e(yq,v2o),e(Mu,F2o),e(x,T2o),e(x,Eu),e(Eu,Zse),e(Zse,M2o),e(Eu,E2o),e(Eu,Lq),e(Lq,C2o),e(Eu,w2o),e(x,A2o),e(x,Cu),e(Cu,ele),e(ele,y2o),e(Cu,L2o),e(Cu,xq),e(xq,x2o),e(Cu,$2o),e(x,k2o),e(x,wu),e(wu,ole),e(ole,S2o),e(wu,R2o),e(wu,$q),e($q,P2o),e(wu,B2o),e(x,I2o),e(x,Au),e(Au,rle),e(rle,q2o),e(Au,N2o),e(Au,kq),e(kq,j2o),e(Au,D2o),e(x,G2o),e(x,yu),e(yu,tle),e(tle,O2o),e(yu,V2o),e(yu,Sq),e(Sq,X2o),e(yu,z2o),e(x,W2o),e(x,Lu),e(Lu,ale),e(ale,Q2o),e(Lu,H2o),e(Lu,Rq),e(Rq,U2o),e(Lu,J2o),e(x,Y2o),e(x,xu),e(xu,nle),e(nle,K2o),e(xu,Z2o),e(xu,Pq),e(Pq,evo),e(xu,ovo),e(x,rvo),e(x,$u),e($u,sle),e(sle,tvo),e($u,avo),e($u,Bq),e(Bq,nvo),e($u,svo),e(x,lvo),e(x,ku),e(ku,lle),e(lle,ivo),e(ku,dvo),e(ku,Iq),e(Iq,cvo),e(ku,fvo),e(x,mvo),e(x,Su),e(Su,ile),e(ile,gvo),e(Su,hvo),e(Su,qq),e(qq,pvo),e(Su,uvo),e(x,_vo),e(x,Ru),e(Ru,dle),e(dle,bvo),e(Ru,vvo),e(Ru,Nq),e(Nq,Fvo),e(Ru,Tvo),e(x,Mvo),e(x,Pu),e(Pu,cle),e(cle,Evo),e(Pu,Cvo),e(Pu,jq),e(jq,wvo),e(Pu,Avo),e(x,yvo),e(x,Bu),e(Bu,fle),e(fle,Lvo),e(Bu,xvo),e(Bu,Dq),e(Dq,$vo),e(Bu,kvo),e(x,Svo),e(x,Iu),e(Iu,mle),e(mle,Rvo),e(Iu,Pvo),e(Iu,Gq),e(Gq,Bvo),e(Iu,Ivo),e(x,qvo),e(x,qu),e(qu,gle),e(gle,Nvo),e(qu,jvo),e(qu,Oq),e(Oq,Dvo),e(qu,Gvo),e(x,Ovo),e(x,Nu),e(Nu,hle),e(hle,Vvo),e(Nu,Xvo),e(Nu,Vq),e(Vq,zvo),e(Nu,Wvo),e(x,Qvo),e(x,ju),e(ju,ple),e(ple,Hvo),e(ju,Uvo),e(ju,Xq),e(Xq,Jvo),e(ju,Yvo),e(x,Kvo),e(x,Du),e(Du,ule),e(ule,Zvo),e(Du,e3o),e(Du,zq),e(zq,o3o),e(Du,r3o),e(Je,t3o),e(Je,Gu),e(Gu,a3o),e(Gu,_le),e(_le,n3o),e(Gu,s3o),e(Gu,ble),e(ble,l3o),e(Je,i3o),M(Ou,Je,null),b(f,XIe,_),b(f,yi,_),e(yi,Vu),e(Vu,vle),M(j6,vle,null),e(yi,d3o),e(yi,Fle),e(Fle,c3o),b(f,zIe,_),b(f,xo,_),M(D6,xo,null),e(xo,f3o),e(xo,Li),e(Li,m3o),e(Li,Wq),e(Wq,g3o),e(Li,h3o),e(Li,Qq),e(Qq,p3o),e(Li,u3o),e(xo,_3o),e(xo,G6),e(G6,b3o),e(G6,Tle),e(Tle,v3o),e(G6,F3o),e(xo,T3o),e(xo,at),M(O6,at,null),e(at,M3o),e(at,Mle),e(Mle,E3o),e(at,C3o),e(at,xi),e(xi,w3o),e(xi,Ele),e(Ele,A3o),e(xi,y3o),e(xi,Hq),e(Hq,L3o),e(xi,x3o),e(at,$3o),M(Xu,at,null),e(xo,k3o),e(xo,Ye),M(V6,Ye,null),e(Ye,S3o),e(Ye,Cle),e(Cle,R3o),e(Ye,P3o),e(Ye,xa),e(xa,B3o),e(xa,wle),e(wle,I3o),e(xa,q3o),e(xa,Ale),e(Ale,N3o),e(xa,j3o),e(xa,yle),e(yle,D3o),e(xa,G3o),e(Ye,O3o),e(Ye,G),e(G,zu),e(zu,Lle),e(Lle,V3o),e(zu,X3o),e(zu,Uq),e(Uq,z3o),e(zu,W3o),e(G,Q3o),e(G,Wu),e(Wu,xle),e(xle,H3o),e(Wu,U3o),e(Wu,Jq),e(Jq,J3o),e(Wu,Y3o),e(G,K3o),e(G,Qu),e(Qu,$le),e($le,Z3o),e(Qu,eFo),e(Qu,Yq),e(Yq,oFo),e(Qu,rFo),e(G,tFo),e(G,Hu),e(Hu,kle),e(kle,aFo),e(Hu,nFo),e(Hu,Kq),e(Kq,sFo),e(Hu,lFo),e(G,iFo),e(G,Uu),e(Uu,Sle),e(Sle,dFo),e(Uu,cFo),e(Uu,Zq),e(Zq,fFo),e(Uu,mFo),e(G,gFo),e(G,Ju),e(Ju,Rle),e(Rle,hFo),e(Ju,pFo),e(Ju,eN),e(eN,uFo),e(Ju,_Fo),e(G,bFo),e(G,Yu),e(Yu,Ple),e(Ple,vFo),e(Yu,FFo),e(Yu,oN),e(oN,TFo),e(Yu,MFo),e(G,EFo),e(G,Ku),e(Ku,Ble),e(Ble,CFo),e(Ku,wFo),e(Ku,rN),e(rN,AFo),e(Ku,yFo),e(G,LFo),e(G,Zu),e(Zu,Ile),e(Ile,xFo),e(Zu,$Fo),e(Zu,tN),e(tN,kFo),e(Zu,SFo),e(G,RFo),e(G,e_),e(e_,qle),e(qle,PFo),e(e_,BFo),e(e_,aN),e(aN,IFo),e(e_,qFo),e(G,NFo),e(G,o_),e(o_,Nle),e(Nle,jFo),e(o_,DFo),e(o_,nN),e(nN,GFo),e(o_,OFo),e(G,VFo),e(G,r_),e(r_,jle),e(jle,XFo),e(r_,zFo),e(r_,sN),e(sN,WFo),e(r_,QFo),e(G,HFo),e(G,t_),e(t_,Dle),e(Dle,UFo),e(t_,JFo),e(t_,lN),e(lN,YFo),e(t_,KFo),e(G,ZFo),e(G,a_),e(a_,Gle),e(Gle,e0o),e(a_,o0o),e(a_,iN),e(iN,r0o),e(a_,t0o),e(G,a0o),e(G,n_),e(n_,Ole),e(Ole,n0o),e(n_,s0o),e(n_,dN),e(dN,l0o),e(n_,i0o),e(G,d0o),e(G,s_),e(s_,Vle),e(Vle,c0o),e(s_,f0o),e(s_,cN),e(cN,m0o),e(s_,g0o),e(G,h0o),e(G,l_),e(l_,Xle),e(Xle,p0o),e(l_,u0o),e(l_,fN),e(fN,_0o),e(l_,b0o),e(G,v0o),e(G,i_),e(i_,zle),e(zle,F0o),e(i_,T0o),e(i_,mN),e(mN,M0o),e(i_,E0o),e(G,C0o),e(G,d_),e(d_,Wle),e(Wle,w0o),e(d_,A0o),e(d_,gN),e(gN,y0o),e(d_,L0o),e(G,x0o),e(G,c_),e(c_,Qle),e(Qle,$0o),e(c_,k0o),e(c_,hN),e(hN,S0o),e(c_,R0o),e(G,P0o),e(G,f_),e(f_,Hle),e(Hle,B0o),e(f_,I0o),e(f_,pN),e(pN,q0o),e(f_,N0o),e(G,j0o),e(G,m_),e(m_,Ule),e(Ule,D0o),e(m_,G0o),e(m_,uN),e(uN,O0o),e(m_,V0o),e(G,X0o),e(G,g_),e(g_,Jle),e(Jle,z0o),e(g_,W0o),e(g_,_N),e(_N,Q0o),e(g_,H0o),e(G,U0o),e(G,h_),e(h_,Yle),e(Yle,J0o),e(h_,Y0o),e(h_,bN),e(bN,K0o),e(h_,Z0o),e(G,eTo),e(G,p_),e(p_,Kle),e(Kle,oTo),e(p_,rTo),e(p_,vN),e(vN,tTo),e(p_,aTo),e(G,nTo),e(G,u_),e(u_,Zle),e(Zle,sTo),e(u_,lTo),e(u_,FN),e(FN,iTo),e(u_,dTo),e(G,cTo),e(G,__),e(__,eie),e(eie,fTo),e(__,mTo),e(__,TN),e(TN,gTo),e(__,hTo),e(G,pTo),e(G,b_),e(b_,oie),e(oie,uTo),e(b_,_To),e(b_,MN),e(MN,bTo),e(b_,vTo),e(G,FTo),e(G,v_),e(v_,rie),e(rie,TTo),e(v_,MTo),e(v_,EN),e(EN,ETo),e(v_,CTo),e(G,wTo),e(G,F_),e(F_,tie),e(tie,ATo),e(F_,yTo),e(F_,CN),e(CN,LTo),e(F_,xTo),e(G,$To),e(G,T_),e(T_,aie),e(aie,kTo),e(T_,STo),e(T_,wN),e(wN,RTo),e(T_,PTo),e(G,BTo),e(G,M_),e(M_,nie),e(nie,ITo),e(M_,qTo),e(M_,AN),e(AN,NTo),e(M_,jTo),e(G,DTo),e(G,E_),e(E_,sie),e(sie,GTo),e(E_,OTo),e(E_,yN),e(yN,VTo),e(E_,XTo),e(G,zTo),e(G,C_),e(C_,lie),e(lie,WTo),e(C_,QTo),e(C_,LN),e(LN,HTo),e(C_,UTo),e(G,JTo),e(G,w_),e(w_,iie),e(iie,YTo),e(w_,KTo),e(w_,xN),e(xN,ZTo),e(w_,e7o),e(G,o7o),e(G,A_),e(A_,die),e(die,r7o),e(A_,t7o),e(A_,$N),e($N,a7o),e(A_,n7o),e(G,s7o),e(G,y_),e(y_,cie),e(cie,l7o),e(y_,i7o),e(y_,kN),e(kN,d7o),e(y_,c7o),e(G,f7o),e(G,L_),e(L_,fie),e(fie,m7o),e(L_,g7o),e(L_,SN),e(SN,h7o),e(L_,p7o),e(G,u7o),e(G,x_),e(x_,mie),e(mie,_7o),e(x_,b7o),e(x_,RN),e(RN,v7o),e(x_,F7o),e(G,T7o),e(G,$_),e($_,gie),e(gie,M7o),e($_,E7o),e($_,PN),e(PN,C7o),e($_,w7o),e(G,A7o),e(G,k_),e(k_,hie),e(hie,y7o),e(k_,L7o),e(k_,BN),e(BN,x7o),e(k_,$7o),e(G,k7o),e(G,S_),e(S_,pie),e(pie,S7o),e(S_,R7o),e(S_,IN),e(IN,P7o),e(S_,B7o),e(Ye,I7o),e(Ye,R_),e(R_,q7o),e(R_,uie),e(uie,N7o),e(R_,j7o),e(R_,_ie),e(_ie,D7o),e(Ye,G7o),M(P_,Ye,null),b(f,WIe,_),b(f,$i,_),e($i,B_),e(B_,bie),M(X6,bie,null),e($i,O7o),e($i,vie),e(vie,V7o),b(f,QIe,_),b(f,$o,_),M(z6,$o,null),e($o,X7o),e($o,ki),e(ki,z7o),e(ki,qN),e(qN,W7o),e(ki,Q7o),e(ki,NN),e(NN,H7o),e(ki,U7o),e($o,J7o),e($o,W6),e(W6,Y7o),e(W6,Fie),e(Fie,K7o),e(W6,Z7o),e($o,eMo),e($o,nt),M(Q6,nt,null),e(nt,oMo),e(nt,Tie),e(Tie,rMo),e(nt,tMo),e(nt,Si),e(Si,aMo),e(Si,Mie),e(Mie,nMo),e(Si,sMo),e(Si,jN),e(jN,lMo),e(Si,iMo),e(nt,dMo),M(I_,nt,null),e($o,cMo),e($o,Ke),M(H6,Ke,null),e(Ke,fMo),e(Ke,Eie),e(Eie,mMo),e(Ke,gMo),e(Ke,$a),e($a,hMo),e($a,Cie),e(Cie,pMo),e($a,uMo),e($a,wie),e(wie,_Mo),e($a,bMo),e($a,Aie),e(Aie,vMo),e($a,FMo),e(Ke,TMo),e(Ke,z),e(z,q_),e(q_,yie),e(yie,MMo),e(q_,EMo),e(q_,DN),e(DN,CMo),e(q_,wMo),e(z,AMo),e(z,N_),e(N_,Lie),e(Lie,yMo),e(N_,LMo),e(N_,GN),e(GN,xMo),e(N_,$Mo),e(z,kMo),e(z,j_),e(j_,xie),e(xie,SMo),e(j_,RMo),e(j_,ON),e(ON,PMo),e(j_,BMo),e(z,IMo),e(z,D_),e(D_,$ie),e($ie,qMo),e(D_,NMo),e(D_,VN),e(VN,jMo),e(D_,DMo),e(z,GMo),e(z,G_),e(G_,kie),e(kie,OMo),e(G_,VMo),e(G_,XN),e(XN,XMo),e(G_,zMo),e(z,WMo),e(z,O_),e(O_,Sie),e(Sie,QMo),e(O_,HMo),e(O_,zN),e(zN,UMo),e(O_,JMo),e(z,YMo),e(z,V_),e(V_,Rie),e(Rie,KMo),e(V_,ZMo),e(V_,WN),e(WN,e4o),e(V_,o4o),e(z,r4o),e(z,X_),e(X_,Pie),e(Pie,t4o),e(X_,a4o),e(X_,QN),e(QN,n4o),e(X_,s4o),e(z,l4o),e(z,z_),e(z_,Bie),e(Bie,i4o),e(z_,d4o),e(z_,HN),e(HN,c4o),e(z_,f4o),e(z,m4o),e(z,W_),e(W_,Iie),e(Iie,g4o),e(W_,h4o),e(W_,UN),e(UN,p4o),e(W_,u4o),e(z,_4o),e(z,Q_),e(Q_,qie),e(qie,b4o),e(Q_,v4o),e(Q_,JN),e(JN,F4o),e(Q_,T4o),e(z,M4o),e(z,H_),e(H_,Nie),e(Nie,E4o),e(H_,C4o),e(H_,YN),e(YN,w4o),e(H_,A4o),e(z,y4o),e(z,U_),e(U_,jie),e(jie,L4o),e(U_,x4o),e(U_,KN),e(KN,$4o),e(U_,k4o),e(z,S4o),e(z,J_),e(J_,Die),e(Die,R4o),e(J_,P4o),e(J_,ZN),e(ZN,B4o),e(J_,I4o),e(z,q4o),e(z,Y_),e(Y_,Gie),e(Gie,N4o),e(Y_,j4o),e(Y_,ej),e(ej,D4o),e(Y_,G4o),e(z,O4o),e(z,K_),e(K_,Oie),e(Oie,V4o),e(K_,X4o),e(K_,oj),e(oj,z4o),e(K_,W4o),e(z,Q4o),e(z,Z_),e(Z_,Vie),e(Vie,H4o),e(Z_,U4o),e(Z_,rj),e(rj,J4o),e(Z_,Y4o),e(z,K4o),e(z,e1),e(e1,Xie),e(Xie,Z4o),e(e1,eEo),e(e1,tj),e(tj,oEo),e(e1,rEo),e(z,tEo),e(z,o1),e(o1,zie),e(zie,aEo),e(o1,nEo),e(o1,aj),e(aj,sEo),e(o1,lEo),e(z,iEo),e(z,r1),e(r1,Wie),e(Wie,dEo),e(r1,cEo),e(r1,nj),e(nj,fEo),e(r1,mEo),e(z,gEo),e(z,t1),e(t1,Qie),e(Qie,hEo),e(t1,pEo),e(t1,sj),e(sj,uEo),e(t1,_Eo),e(z,bEo),e(z,a1),e(a1,Hie),e(Hie,vEo),e(a1,FEo),e(a1,lj),e(lj,TEo),e(a1,MEo),e(z,EEo),e(z,n1),e(n1,Uie),e(Uie,CEo),e(n1,wEo),e(n1,ij),e(ij,AEo),e(n1,yEo),e(z,LEo),e(z,s1),e(s1,Jie),e(Jie,xEo),e(s1,$Eo),e(s1,dj),e(dj,kEo),e(s1,SEo),e(z,REo),e(z,l1),e(l1,Yie),e(Yie,PEo),e(l1,BEo),e(l1,cj),e(cj,IEo),e(l1,qEo),e(z,NEo),e(z,i1),e(i1,Kie),e(Kie,jEo),e(i1,DEo),e(i1,fj),e(fj,GEo),e(i1,OEo),e(z,VEo),e(z,d1),e(d1,Zie),e(Zie,XEo),e(d1,zEo),e(d1,mj),e(mj,WEo),e(d1,QEo),e(z,HEo),e(z,c1),e(c1,ede),e(ede,UEo),e(c1,JEo),e(c1,gj),e(gj,YEo),e(c1,KEo),e(z,ZEo),e(z,f1),e(f1,ode),e(ode,eCo),e(f1,oCo),e(f1,hj),e(hj,rCo),e(f1,tCo),e(z,aCo),e(z,m1),e(m1,rde),e(rde,nCo),e(m1,sCo),e(m1,pj),e(pj,lCo),e(m1,iCo),e(z,dCo),e(z,g1),e(g1,tde),e(tde,cCo),e(g1,fCo),e(g1,uj),e(uj,mCo),e(g1,gCo),e(z,hCo),e(z,h1),e(h1,ade),e(ade,pCo),e(h1,uCo),e(h1,_j),e(_j,_Co),e(h1,bCo),e(z,vCo),e(z,p1),e(p1,nde),e(nde,FCo),e(p1,TCo),e(p1,bj),e(bj,MCo),e(p1,ECo),e(z,CCo),e(z,u1),e(u1,sde),e(sde,wCo),e(u1,ACo),e(u1,vj),e(vj,yCo),e(u1,LCo),e(z,xCo),e(z,_1),e(_1,lde),e(lde,$Co),e(_1,kCo),e(_1,Fj),e(Fj,SCo),e(_1,RCo),e(z,PCo),e(z,b1),e(b1,ide),e(ide,BCo),e(b1,ICo),e(b1,Tj),e(Tj,qCo),e(b1,NCo),e(Ke,jCo),e(Ke,v1),e(v1,DCo),e(v1,dde),e(dde,GCo),e(v1,OCo),e(v1,cde),e(cde,VCo),e(Ke,XCo),M(F1,Ke,null),b(f,HIe,_),b(f,Ri,_),e(Ri,T1),e(T1,fde),M(U6,fde,null),e(Ri,zCo),e(Ri,mde),e(mde,WCo),b(f,UIe,_),b(f,ko,_),M(J6,ko,null),e(ko,QCo),e(ko,Pi),e(Pi,HCo),e(Pi,Mj),e(Mj,UCo),e(Pi,JCo),e(Pi,Ej),e(Ej,YCo),e(Pi,KCo),e(ko,ZCo),e(ko,Y6),e(Y6,e5o),e(Y6,gde),e(gde,o5o),e(Y6,r5o),e(ko,t5o),e(ko,st),M(K6,st,null),e(st,a5o),e(st,hde),e(hde,n5o),e(st,s5o),e(st,Bi),e(Bi,l5o),e(Bi,pde),e(pde,i5o),e(Bi,d5o),e(Bi,Cj),e(Cj,c5o),e(Bi,f5o),e(st,m5o),M(M1,st,null),e(ko,g5o),e(ko,Ze),M(Z6,Ze,null),e(Ze,h5o),e(Ze,ude),e(ude,p5o),e(Ze,u5o),e(Ze,ka),e(ka,_5o),e(ka,_de),e(_de,b5o),e(ka,v5o),e(ka,bde),e(bde,F5o),e(ka,T5o),e(ka,vde),e(vde,M5o),e(ka,E5o),e(Ze,C5o),e(Ze,W),e(W,E1),e(E1,Fde),e(Fde,w5o),e(E1,A5o),e(E1,wj),e(wj,y5o),e(E1,L5o),e(W,x5o),e(W,C1),e(C1,Tde),e(Tde,$5o),e(C1,k5o),e(C1,Aj),e(Aj,S5o),e(C1,R5o),e(W,P5o),e(W,w1),e(w1,Mde),e(Mde,B5o),e(w1,I5o),e(w1,yj),e(yj,q5o),e(w1,N5o),e(W,j5o),e(W,A1),e(A1,Ede),e(Ede,D5o),e(A1,G5o),e(A1,Lj),e(Lj,O5o),e(A1,V5o),e(W,X5o),e(W,y1),e(y1,Cde),e(Cde,z5o),e(y1,W5o),e(y1,xj),e(xj,Q5o),e(y1,H5o),e(W,U5o),e(W,L1),e(L1,wde),e(wde,J5o),e(L1,Y5o),e(L1,$j),e($j,K5o),e(L1,Z5o),e(W,ewo),e(W,x1),e(x1,Ade),e(Ade,owo),e(x1,rwo),e(x1,kj),e(kj,two),e(x1,awo),e(W,nwo),e(W,$1),e($1,yde),e(yde,swo),e($1,lwo),e($1,Sj),e(Sj,iwo),e($1,dwo),e(W,cwo),e(W,k1),e(k1,Lde),e(Lde,fwo),e(k1,mwo),e(k1,Rj),e(Rj,gwo),e(k1,hwo),e(W,pwo),e(W,S1),e(S1,xde),e(xde,uwo),e(S1,_wo),e(S1,Pj),e(Pj,bwo),e(S1,vwo),e(W,Fwo),e(W,R1),e(R1,$de),e($de,Two),e(R1,Mwo),e(R1,Bj),e(Bj,Ewo),e(R1,Cwo),e(W,wwo),e(W,P1),e(P1,kde),e(kde,Awo),e(P1,ywo),e(P1,Ij),e(Ij,Lwo),e(P1,xwo),e(W,$wo),e(W,B1),e(B1,Sde),e(Sde,kwo),e(B1,Swo),e(B1,qj),e(qj,Rwo),e(B1,Pwo),e(W,Bwo),e(W,I1),e(I1,Rde),e(Rde,Iwo),e(I1,qwo),e(I1,Nj),e(Nj,Nwo),e(I1,jwo),e(W,Dwo),e(W,q1),e(q1,Pde),e(Pde,Gwo),e(q1,Owo),e(q1,jj),e(jj,Vwo),e(q1,Xwo),e(W,zwo),e(W,N1),e(N1,Bde),e(Bde,Wwo),e(N1,Qwo),e(N1,Dj),e(Dj,Hwo),e(N1,Uwo),e(W,Jwo),e(W,j1),e(j1,Ide),e(Ide,Ywo),e(j1,Kwo),e(j1,Gj),e(Gj,Zwo),e(j1,eAo),e(W,oAo),e(W,D1),e(D1,qde),e(qde,rAo),e(D1,tAo),e(D1,Oj),e(Oj,aAo),e(D1,nAo),e(W,sAo),e(W,G1),e(G1,Nde),e(Nde,lAo),e(G1,iAo),e(G1,Vj),e(Vj,dAo),e(G1,cAo),e(W,fAo),e(W,O1),e(O1,jde),e(jde,mAo),e(O1,gAo),e(O1,Xj),e(Xj,hAo),e(O1,pAo),e(W,uAo),e(W,V1),e(V1,Dde),e(Dde,_Ao),e(V1,bAo),e(V1,zj),e(zj,vAo),e(V1,FAo),e(W,TAo),e(W,X1),e(X1,Gde),e(Gde,MAo),e(X1,EAo),e(X1,Wj),e(Wj,CAo),e(X1,wAo),e(W,AAo),e(W,z1),e(z1,Ode),e(Ode,yAo),e(z1,LAo),e(z1,Qj),e(Qj,xAo),e(z1,$Ao),e(W,kAo),e(W,W1),e(W1,Vde),e(Vde,SAo),e(W1,RAo),e(W1,Hj),e(Hj,PAo),e(W1,BAo),e(W,IAo),e(W,Q1),e(Q1,Xde),e(Xde,qAo),e(Q1,NAo),e(Q1,Uj),e(Uj,jAo),e(Q1,DAo),e(W,GAo),e(W,H1),e(H1,zde),e(zde,OAo),e(H1,VAo),e(H1,Jj),e(Jj,XAo),e(H1,zAo),e(W,WAo),e(W,U1),e(U1,Wde),e(Wde,QAo),e(U1,HAo),e(U1,Yj),e(Yj,UAo),e(U1,JAo),e(W,YAo),e(W,J1),e(J1,Qde),e(Qde,KAo),e(J1,ZAo),e(J1,Kj),e(Kj,e6o),e(J1,o6o),e(W,r6o),e(W,Y1),e(Y1,Hde),e(Hde,t6o),e(Y1,a6o),e(Y1,Zj),e(Zj,n6o),e(Y1,s6o),e(W,l6o),e(W,K1),e(K1,Ude),e(Ude,i6o),e(K1,d6o),e(K1,eD),e(eD,c6o),e(K1,f6o),e(W,m6o),e(W,Z1),e(Z1,Jde),e(Jde,g6o),e(Z1,h6o),e(Z1,Yde),e(Yde,p6o),e(Z1,u6o),e(W,_6o),e(W,eb),e(eb,Kde),e(Kde,b6o),e(eb,v6o),e(eb,oD),e(oD,F6o),e(eb,T6o),e(W,M6o),e(W,ob),e(ob,Zde),e(Zde,E6o),e(ob,C6o),e(ob,rD),e(rD,w6o),e(ob,A6o),e(W,y6o),e(W,rb),e(rb,ece),e(ece,L6o),e(rb,x6o),e(rb,tD),e(tD,$6o),e(rb,k6o),e(W,S6o),e(W,tb),e(tb,oce),e(oce,R6o),e(tb,P6o),e(tb,aD),e(aD,B6o),e(tb,I6o),e(Ze,q6o),e(Ze,ab),e(ab,N6o),e(ab,rce),e(rce,j6o),e(ab,D6o),e(ab,tce),e(tce,G6o),e(Ze,O6o),M(nb,Ze,null),b(f,JIe,_),b(f,Ii,_),e(Ii,sb),e(sb,ace),M(ey,ace,null),e(Ii,V6o),e(Ii,nce),e(nce,X6o),b(f,YIe,_),b(f,So,_),M(oy,So,null),e(So,z6o),e(So,qi),e(qi,W6o),e(qi,nD),e(nD,Q6o),e(qi,H6o),e(qi,sD),e(sD,U6o),e(qi,J6o),e(So,Y6o),e(So,ry),e(ry,K6o),e(ry,sce),e(sce,Z6o),e(ry,eyo),e(So,oyo),e(So,lt),M(ty,lt,null),e(lt,ryo),e(lt,lce),e(lce,tyo),e(lt,ayo),e(lt,Ni),e(Ni,nyo),e(Ni,ice),e(ice,syo),e(Ni,lyo),e(Ni,lD),e(lD,iyo),e(Ni,dyo),e(lt,cyo),M(lb,lt,null),e(So,fyo),e(So,eo),M(ay,eo,null),e(eo,myo),e(eo,dce),e(dce,gyo),e(eo,hyo),e(eo,Sa),e(Sa,pyo),e(Sa,cce),e(cce,uyo),e(Sa,_yo),e(Sa,fce),e(fce,byo),e(Sa,vyo),e(Sa,mce),e(mce,Fyo),e(Sa,Tyo),e(eo,Myo),e(eo,ue),e(ue,ib),e(ib,gce),e(gce,Eyo),e(ib,Cyo),e(ib,iD),e(iD,wyo),e(ib,Ayo),e(ue,yyo),e(ue,db),e(db,hce),e(hce,Lyo),e(db,xyo),e(db,dD),e(dD,$yo),e(db,kyo),e(ue,Syo),e(ue,cb),e(cb,pce),e(pce,Ryo),e(cb,Pyo),e(cb,cD),e(cD,Byo),e(cb,Iyo),e(ue,qyo),e(ue,fb),e(fb,uce),e(uce,Nyo),e(fb,jyo),e(fb,fD),e(fD,Dyo),e(fb,Gyo),e(ue,Oyo),e(ue,mb),e(mb,_ce),e(_ce,Vyo),e(mb,Xyo),e(mb,mD),e(mD,zyo),e(mb,Wyo),e(ue,Qyo),e(ue,gb),e(gb,bce),e(bce,Hyo),e(gb,Uyo),e(gb,gD),e(gD,Jyo),e(gb,Yyo),e(ue,Kyo),e(ue,hb),e(hb,vce),e(vce,Zyo),e(hb,eLo),e(hb,hD),e(hD,oLo),e(hb,rLo),e(ue,tLo),e(ue,pb),e(pb,Fce),e(Fce,aLo),e(pb,nLo),e(pb,pD),e(pD,sLo),e(pb,lLo),e(ue,iLo),e(ue,ub),e(ub,Tce),e(Tce,dLo),e(ub,cLo),e(ub,uD),e(uD,fLo),e(ub,mLo),e(ue,gLo),e(ue,_b),e(_b,Mce),e(Mce,hLo),e(_b,pLo),e(_b,_D),e(_D,uLo),e(_b,_Lo),e(ue,bLo),e(ue,bb),e(bb,Ece),e(Ece,vLo),e(bb,FLo),e(bb,bD),e(bD,TLo),e(bb,MLo),e(ue,ELo),e(ue,vb),e(vb,Cce),e(Cce,CLo),e(vb,wLo),e(vb,vD),e(vD,ALo),e(vb,yLo),e(ue,LLo),e(ue,Fb),e(Fb,wce),e(wce,xLo),e(Fb,$Lo),e(Fb,FD),e(FD,kLo),e(Fb,SLo),e(ue,RLo),e(ue,Tb),e(Tb,Ace),e(Ace,PLo),e(Tb,BLo),e(Tb,TD),e(TD,ILo),e(Tb,qLo),e(ue,NLo),e(ue,Mb),e(Mb,yce),e(yce,jLo),e(Mb,DLo),e(Mb,MD),e(MD,GLo),e(Mb,OLo),e(ue,VLo),e(ue,Eb),e(Eb,Lce),e(Lce,XLo),e(Eb,zLo),e(Eb,ED),e(ED,WLo),e(Eb,QLo),e(eo,HLo),e(eo,Cb),e(Cb,ULo),e(Cb,xce),e(xce,JLo),e(Cb,YLo),e(Cb,$ce),e($ce,KLo),e(eo,ZLo),M(wb,eo,null),b(f,KIe,_),b(f,ji,_),e(ji,Ab),e(Ab,kce),M(ny,kce,null),e(ji,e8o),e(ji,Sce),e(Sce,o8o),b(f,ZIe,_),b(f,Ro,_),M(sy,Ro,null),e(Ro,r8o),e(Ro,Di),e(Di,t8o),e(Di,CD),e(CD,a8o),e(Di,n8o),e(Di,wD),e(wD,s8o),e(Di,l8o),e(Ro,i8o),e(Ro,ly),e(ly,d8o),e(ly,Rce),e(Rce,c8o),e(ly,f8o),e(Ro,m8o),e(Ro,it),M(iy,it,null),e(it,g8o),e(it,Pce),e(Pce,h8o),e(it,p8o),e(it,Gi),e(Gi,u8o),e(Gi,Bce),e(Bce,_8o),e(Gi,b8o),e(Gi,AD),e(AD,v8o),e(Gi,F8o),e(it,T8o),M(yb,it,null),e(Ro,M8o),e(Ro,oo),M(dy,oo,null),e(oo,E8o),e(oo,Ice),e(Ice,C8o),e(oo,w8o),e(oo,Ra),e(Ra,A8o),e(Ra,qce),e(qce,y8o),e(Ra,L8o),e(Ra,Nce),e(Nce,x8o),e(Ra,$8o),e(Ra,jce),e(jce,k8o),e(Ra,S8o),e(oo,R8o),e(oo,q),e(q,Lb),e(Lb,Dce),e(Dce,P8o),e(Lb,B8o),e(Lb,yD),e(yD,I8o),e(Lb,q8o),e(q,N8o),e(q,xb),e(xb,Gce),e(Gce,j8o),e(xb,D8o),e(xb,LD),e(LD,G8o),e(xb,O8o),e(q,V8o),e(q,$b),e($b,Oce),e(Oce,X8o),e($b,z8o),e($b,xD),e(xD,W8o),e($b,Q8o),e(q,H8o),e(q,kb),e(kb,Vce),e(Vce,U8o),e(kb,J8o),e(kb,$D),e($D,Y8o),e(kb,K8o),e(q,Z8o),e(q,Sb),e(Sb,Xce),e(Xce,exo),e(Sb,oxo),e(Sb,kD),e(kD,rxo),e(Sb,txo),e(q,axo),e(q,Rb),e(Rb,zce),e(zce,nxo),e(Rb,sxo),e(Rb,SD),e(SD,lxo),e(Rb,ixo),e(q,dxo),e(q,Pb),e(Pb,Wce),e(Wce,cxo),e(Pb,fxo),e(Pb,RD),e(RD,mxo),e(Pb,gxo),e(q,hxo),e(q,Bb),e(Bb,Qce),e(Qce,pxo),e(Bb,uxo),e(Bb,PD),e(PD,_xo),e(Bb,bxo),e(q,vxo),e(q,Ib),e(Ib,Hce),e(Hce,Fxo),e(Ib,Txo),e(Ib,BD),e(BD,Mxo),e(Ib,Exo),e(q,Cxo),e(q,qb),e(qb,Uce),e(Uce,wxo),e(qb,Axo),e(qb,ID),e(ID,yxo),e(qb,Lxo),e(q,xxo),e(q,Nb),e(Nb,Jce),e(Jce,$xo),e(Nb,kxo),e(Nb,qD),e(qD,Sxo),e(Nb,Rxo),e(q,Pxo),e(q,jb),e(jb,Yce),e(Yce,Bxo),e(jb,Ixo),e(jb,ND),e(ND,qxo),e(jb,Nxo),e(q,jxo),e(q,Db),e(Db,Kce),e(Kce,Dxo),e(Db,Gxo),e(Db,jD),e(jD,Oxo),e(Db,Vxo),e(q,Xxo),e(q,Gb),e(Gb,Zce),e(Zce,zxo),e(Gb,Wxo),e(Gb,DD),e(DD,Qxo),e(Gb,Hxo),e(q,Uxo),e(q,Ob),e(Ob,efe),e(efe,Jxo),e(Ob,Yxo),e(Ob,GD),e(GD,Kxo),e(Ob,Zxo),e(q,e9o),e(q,Vb),e(Vb,ofe),e(ofe,o9o),e(Vb,r9o),e(Vb,OD),e(OD,t9o),e(Vb,a9o),e(q,n9o),e(q,Xb),e(Xb,rfe),e(rfe,s9o),e(Xb,l9o),e(Xb,VD),e(VD,i9o),e(Xb,d9o),e(q,c9o),e(q,zb),e(zb,tfe),e(tfe,f9o),e(zb,m9o),e(zb,XD),e(XD,g9o),e(zb,h9o),e(q,p9o),e(q,Wb),e(Wb,afe),e(afe,u9o),e(Wb,_9o),e(Wb,zD),e(zD,b9o),e(Wb,v9o),e(q,F9o),e(q,Qb),e(Qb,nfe),e(nfe,T9o),e(Qb,M9o),e(Qb,WD),e(WD,E9o),e(Qb,C9o),e(q,w9o),e(q,Hb),e(Hb,sfe),e(sfe,A9o),e(Hb,y9o),e(Hb,QD),e(QD,L9o),e(Hb,x9o),e(q,$9o),e(q,Ub),e(Ub,lfe),e(lfe,k9o),e(Ub,S9o),e(Ub,HD),e(HD,R9o),e(Ub,P9o),e(q,B9o),e(q,Jb),e(Jb,ife),e(ife,I9o),e(Jb,q9o),e(Jb,UD),e(UD,N9o),e(Jb,j9o),e(q,D9o),e(q,Yb),e(Yb,dfe),e(dfe,G9o),e(Yb,O9o),e(Yb,JD),e(JD,V9o),e(Yb,X9o),e(q,z9o),e(q,Kb),e(Kb,cfe),e(cfe,W9o),e(Kb,Q9o),e(Kb,YD),e(YD,H9o),e(Kb,U9o),e(q,J9o),e(q,Zb),e(Zb,ffe),e(ffe,Y9o),e(Zb,K9o),e(Zb,KD),e(KD,Z9o),e(Zb,e$o),e(q,o$o),e(q,e2),e(e2,mfe),e(mfe,r$o),e(e2,t$o),e(e2,ZD),e(ZD,a$o),e(e2,n$o),e(q,s$o),e(q,o2),e(o2,gfe),e(gfe,l$o),e(o2,i$o),e(o2,eG),e(eG,d$o),e(o2,c$o),e(q,f$o),e(q,r2),e(r2,hfe),e(hfe,m$o),e(r2,g$o),e(r2,oG),e(oG,h$o),e(r2,p$o),e(q,u$o),e(q,t2),e(t2,pfe),e(pfe,_$o),e(t2,b$o),e(t2,rG),e(rG,v$o),e(t2,F$o),e(q,T$o),e(q,a2),e(a2,ufe),e(ufe,M$o),e(a2,E$o),e(a2,tG),e(tG,C$o),e(a2,w$o),e(q,A$o),e(q,n2),e(n2,_fe),e(_fe,y$o),e(n2,L$o),e(n2,aG),e(aG,x$o),e(n2,$$o),e(q,k$o),e(q,s2),e(s2,bfe),e(bfe,S$o),e(s2,R$o),e(s2,nG),e(nG,P$o),e(s2,B$o),e(q,I$o),e(q,l2),e(l2,vfe),e(vfe,q$o),e(l2,N$o),e(l2,sG),e(sG,j$o),e(l2,D$o),e(q,G$o),e(q,i2),e(i2,Ffe),e(Ffe,O$o),e(i2,V$o),e(i2,lG),e(lG,X$o),e(i2,z$o),e(q,W$o),e(q,d2),e(d2,Tfe),e(Tfe,Q$o),e(d2,H$o),e(d2,iG),e(iG,U$o),e(d2,J$o),e(q,Y$o),e(q,c2),e(c2,Mfe),e(Mfe,K$o),e(c2,Z$o),e(c2,dG),e(dG,eko),e(c2,oko),e(q,rko),e(q,f2),e(f2,Efe),e(Efe,tko),e(f2,ako),e(f2,cG),e(cG,nko),e(f2,sko),e(q,lko),e(q,m2),e(m2,Cfe),e(Cfe,iko),e(m2,dko),e(m2,fG),e(fG,cko),e(m2,fko),e(q,mko),e(q,g2),e(g2,wfe),e(wfe,gko),e(g2,hko),e(g2,mG),e(mG,pko),e(g2,uko),e(q,_ko),e(q,h2),e(h2,Afe),e(Afe,bko),e(h2,vko),e(h2,gG),e(gG,Fko),e(h2,Tko),e(q,Mko),e(q,p2),e(p2,yfe),e(yfe,Eko),e(p2,Cko),e(p2,hG),e(hG,wko),e(p2,Ako),e(q,yko),e(q,u2),e(u2,Lfe),e(Lfe,Lko),e(u2,xko),e(u2,pG),e(pG,$ko),e(u2,kko),e(q,Sko),e(q,_2),e(_2,xfe),e(xfe,Rko),e(_2,Pko),e(_2,uG),e(uG,Bko),e(_2,Iko),e(q,qko),e(q,b2),e(b2,$fe),e($fe,Nko),e(b2,jko),e(b2,_G),e(_G,Dko),e(b2,Gko),e(q,Oko),e(q,v2),e(v2,kfe),e(kfe,Vko),e(v2,Xko),e(v2,bG),e(bG,zko),e(v2,Wko),e(oo,Qko),e(oo,F2),e(F2,Hko),e(F2,Sfe),e(Sfe,Uko),e(F2,Jko),e(F2,Rfe),e(Rfe,Yko),e(oo,Kko),M(T2,oo,null),b(f,eqe,_),b(f,Oi,_),e(Oi,M2),e(M2,Pfe),M(cy,Pfe,null),e(Oi,Zko),e(Oi,Bfe),e(Bfe,eSo),b(f,oqe,_),b(f,Po,_),M(fy,Po,null),e(Po,oSo),e(Po,Vi),e(Vi,rSo),e(Vi,vG),e(vG,tSo),e(Vi,aSo),e(Vi,FG),e(FG,nSo),e(Vi,sSo),e(Po,lSo),e(Po,my),e(my,iSo),e(my,Ife),e(Ife,dSo),e(my,cSo),e(Po,fSo),e(Po,dt),M(gy,dt,null),e(dt,mSo),e(dt,qfe),e(qfe,gSo),e(dt,hSo),e(dt,Xi),e(Xi,pSo),e(Xi,Nfe),e(Nfe,uSo),e(Xi,_So),e(Xi,TG),e(TG,bSo),e(Xi,vSo),e(dt,FSo),M(E2,dt,null),e(Po,TSo),e(Po,ro),M(hy,ro,null),e(ro,MSo),e(ro,jfe),e(jfe,ESo),e(ro,CSo),e(ro,Pa),e(Pa,wSo),e(Pa,Dfe),e(Dfe,ASo),e(Pa,ySo),e(Pa,Gfe),e(Gfe,LSo),e(Pa,xSo),e(Pa,Ofe),e(Ofe,$So),e(Pa,kSo),e(ro,SSo),e(ro,Y),e(Y,C2),e(C2,Vfe),e(Vfe,RSo),e(C2,PSo),e(C2,MG),e(MG,BSo),e(C2,ISo),e(Y,qSo),e(Y,w2),e(w2,Xfe),e(Xfe,NSo),e(w2,jSo),e(w2,EG),e(EG,DSo),e(w2,GSo),e(Y,OSo),e(Y,A2),e(A2,zfe),e(zfe,VSo),e(A2,XSo),e(A2,CG),e(CG,zSo),e(A2,WSo),e(Y,QSo),e(Y,y2),e(y2,Wfe),e(Wfe,HSo),e(y2,USo),e(y2,wG),e(wG,JSo),e(y2,YSo),e(Y,KSo),e(Y,L2),e(L2,Qfe),e(Qfe,ZSo),e(L2,eRo),e(L2,AG),e(AG,oRo),e(L2,rRo),e(Y,tRo),e(Y,x2),e(x2,Hfe),e(Hfe,aRo),e(x2,nRo),e(x2,yG),e(yG,sRo),e(x2,lRo),e(Y,iRo),e(Y,$2),e($2,Ufe),e(Ufe,dRo),e($2,cRo),e($2,LG),e(LG,fRo),e($2,mRo),e(Y,gRo),e(Y,k2),e(k2,Jfe),e(Jfe,hRo),e(k2,pRo),e(k2,xG),e(xG,uRo),e(k2,_Ro),e(Y,bRo),e(Y,S2),e(S2,Yfe),e(Yfe,vRo),e(S2,FRo),e(S2,$G),e($G,TRo),e(S2,MRo),e(Y,ERo),e(Y,R2),e(R2,Kfe),e(Kfe,CRo),e(R2,wRo),e(R2,kG),e(kG,ARo),e(R2,yRo),e(Y,LRo),e(Y,P2),e(P2,Zfe),e(Zfe,xRo),e(P2,$Ro),e(P2,SG),e(SG,kRo),e(P2,SRo),e(Y,RRo),e(Y,B2),e(B2,eme),e(eme,PRo),e(B2,BRo),e(B2,RG),e(RG,IRo),e(B2,qRo),e(Y,NRo),e(Y,I2),e(I2,ome),e(ome,jRo),e(I2,DRo),e(I2,PG),e(PG,GRo),e(I2,ORo),e(Y,VRo),e(Y,q2),e(q2,rme),e(rme,XRo),e(q2,zRo),e(q2,BG),e(BG,WRo),e(q2,QRo),e(Y,HRo),e(Y,N2),e(N2,tme),e(tme,URo),e(N2,JRo),e(N2,IG),e(IG,YRo),e(N2,KRo),e(Y,ZRo),e(Y,j2),e(j2,ame),e(ame,ePo),e(j2,oPo),e(j2,qG),e(qG,rPo),e(j2,tPo),e(Y,aPo),e(Y,D2),e(D2,nme),e(nme,nPo),e(D2,sPo),e(D2,NG),e(NG,lPo),e(D2,iPo),e(Y,dPo),e(Y,G2),e(G2,sme),e(sme,cPo),e(G2,fPo),e(G2,jG),e(jG,mPo),e(G2,gPo),e(Y,hPo),e(Y,O2),e(O2,lme),e(lme,pPo),e(O2,uPo),e(O2,DG),e(DG,_Po),e(O2,bPo),e(Y,vPo),e(Y,V2),e(V2,ime),e(ime,FPo),e(V2,TPo),e(V2,GG),e(GG,MPo),e(V2,EPo),e(Y,CPo),e(Y,X2),e(X2,dme),e(dme,wPo),e(X2,APo),e(X2,OG),e(OG,yPo),e(X2,LPo),e(Y,xPo),e(Y,z2),e(z2,cme),e(cme,$Po),e(z2,kPo),e(z2,VG),e(VG,SPo),e(z2,RPo),e(Y,PPo),e(Y,W2),e(W2,fme),e(fme,BPo),e(W2,IPo),e(W2,XG),e(XG,qPo),e(W2,NPo),e(Y,jPo),e(Y,Q2),e(Q2,mme),e(mme,DPo),e(Q2,GPo),e(Q2,zG),e(zG,OPo),e(Q2,VPo),e(Y,XPo),e(Y,H2),e(H2,gme),e(gme,zPo),e(H2,WPo),e(H2,WG),e(WG,QPo),e(H2,HPo),e(Y,UPo),e(Y,U2),e(U2,hme),e(hme,JPo),e(U2,YPo),e(U2,QG),e(QG,KPo),e(U2,ZPo),e(Y,eBo),e(Y,J2),e(J2,pme),e(pme,oBo),e(J2,rBo),e(J2,HG),e(HG,tBo),e(J2,aBo),e(Y,nBo),e(Y,Y2),e(Y2,ume),e(ume,sBo),e(Y2,lBo),e(Y2,UG),e(UG,iBo),e(Y2,dBo),e(Y,cBo),e(Y,K2),e(K2,_me),e(_me,fBo),e(K2,mBo),e(K2,JG),e(JG,gBo),e(K2,hBo),e(ro,pBo),e(ro,Z2),e(Z2,uBo),e(Z2,bme),e(bme,_Bo),e(Z2,bBo),e(Z2,vme),e(vme,vBo),e(ro,FBo),M(ev,ro,null),b(f,rqe,_),b(f,zi,_),e(zi,ov),e(ov,Fme),M(py,Fme,null),e(zi,TBo),e(zi,Tme),e(Tme,MBo),b(f,tqe,_),b(f,Bo,_),M(uy,Bo,null),e(Bo,EBo),e(Bo,Wi),e(Wi,CBo),e(Wi,YG),e(YG,wBo),e(Wi,ABo),e(Wi,KG),e(KG,yBo),e(Wi,LBo),e(Bo,xBo),e(Bo,_y),e(_y,$Bo),e(_y,Mme),e(Mme,kBo),e(_y,SBo),e(Bo,RBo),e(Bo,ct),M(by,ct,null),e(ct,PBo),e(ct,Eme),e(Eme,BBo),e(ct,IBo),e(ct,Qi),e(Qi,qBo),e(Qi,Cme),e(Cme,NBo),e(Qi,jBo),e(Qi,ZG),e(ZG,DBo),e(Qi,GBo),e(ct,OBo),M(rv,ct,null),e(Bo,VBo),e(Bo,to),M(vy,to,null),e(to,XBo),e(to,wme),e(wme,zBo),e(to,WBo),e(to,Ba),e(Ba,QBo),e(Ba,Ame),e(Ame,HBo),e(Ba,UBo),e(Ba,yme),e(yme,JBo),e(Ba,YBo),e(Ba,Lme),e(Lme,KBo),e(Ba,ZBo),e(to,eIo),e(to,Yr),e(Yr,tv),e(tv,xme),e(xme,oIo),e(tv,rIo),e(tv,eO),e(eO,tIo),e(tv,aIo),e(Yr,nIo),e(Yr,av),e(av,$me),e($me,sIo),e(av,lIo),e(av,oO),e(oO,iIo),e(av,dIo),e(Yr,cIo),e(Yr,nv),e(nv,kme),e(kme,fIo),e(nv,mIo),e(nv,rO),e(rO,gIo),e(nv,hIo),e(Yr,pIo),e(Yr,sv),e(sv,Sme),e(Sme,uIo),e(sv,_Io),e(sv,tO),e(tO,bIo),e(sv,vIo),e(Yr,FIo),e(Yr,lv),e(lv,Rme),e(Rme,TIo),e(lv,MIo),e(lv,aO),e(aO,EIo),e(lv,CIo),e(to,wIo),e(to,iv),e(iv,AIo),e(iv,Pme),e(Pme,yIo),e(iv,LIo),e(iv,Bme),e(Bme,xIo),e(to,$Io),M(dv,to,null),b(f,aqe,_),b(f,Hi,_),e(Hi,cv),e(cv,Ime),M(Fy,Ime,null),e(Hi,kIo),e(Hi,qme),e(qme,SIo),b(f,nqe,_),b(f,Io,_),M(Ty,Io,null),e(Io,RIo),e(Io,Ui),e(Ui,PIo),e(Ui,nO),e(nO,BIo),e(Ui,IIo),e(Ui,sO),e(sO,qIo),e(Ui,NIo),e(Io,jIo),e(Io,My),e(My,DIo),e(My,Nme),e(Nme,GIo),e(My,OIo),e(Io,VIo),e(Io,ft),M(Ey,ft,null),e(ft,XIo),e(ft,jme),e(jme,zIo),e(ft,WIo),e(ft,Ji),e(Ji,QIo),e(Ji,Dme),e(Dme,HIo),e(Ji,UIo),e(Ji,lO),e(lO,JIo),e(Ji,YIo),e(ft,KIo),M(fv,ft,null),e(Io,ZIo),e(Io,ao),M(Cy,ao,null),e(ao,eqo),e(ao,Gme),e(Gme,oqo),e(ao,rqo),e(ao,Ia),e(Ia,tqo),e(Ia,Ome),e(Ome,aqo),e(Ia,nqo),e(Ia,Vme),e(Vme,sqo),e(Ia,lqo),e(Ia,Xme),e(Xme,iqo),e(Ia,dqo),e(ao,cqo),e(ao,U),e(U,mv),e(mv,zme),e(zme,fqo),e(mv,mqo),e(mv,iO),e(iO,gqo),e(mv,hqo),e(U,pqo),e(U,gv),e(gv,Wme),e(Wme,uqo),e(gv,_qo),e(gv,dO),e(dO,bqo),e(gv,vqo),e(U,Fqo),e(U,hv),e(hv,Qme),e(Qme,Tqo),e(hv,Mqo),e(hv,cO),e(cO,Eqo),e(hv,Cqo),e(U,wqo),e(U,pv),e(pv,Hme),e(Hme,Aqo),e(pv,yqo),e(pv,fO),e(fO,Lqo),e(pv,xqo),e(U,$qo),e(U,uv),e(uv,Ume),e(Ume,kqo),e(uv,Sqo),e(uv,mO),e(mO,Rqo),e(uv,Pqo),e(U,Bqo),e(U,_v),e(_v,Jme),e(Jme,Iqo),e(_v,qqo),e(_v,gO),e(gO,Nqo),e(_v,jqo),e(U,Dqo),e(U,bv),e(bv,Yme),e(Yme,Gqo),e(bv,Oqo),e(bv,hO),e(hO,Vqo),e(bv,Xqo),e(U,zqo),e(U,vv),e(vv,Kme),e(Kme,Wqo),e(vv,Qqo),e(vv,pO),e(pO,Hqo),e(vv,Uqo),e(U,Jqo),e(U,Fv),e(Fv,Zme),e(Zme,Yqo),e(Fv,Kqo),e(Fv,uO),e(uO,Zqo),e(Fv,eNo),e(U,oNo),e(U,Tv),e(Tv,ege),e(ege,rNo),e(Tv,tNo),e(Tv,_O),e(_O,aNo),e(Tv,nNo),e(U,sNo),e(U,Mv),e(Mv,oge),e(oge,lNo),e(Mv,iNo),e(Mv,bO),e(bO,dNo),e(Mv,cNo),e(U,fNo),e(U,Ev),e(Ev,rge),e(rge,mNo),e(Ev,gNo),e(Ev,vO),e(vO,hNo),e(Ev,pNo),e(U,uNo),e(U,Cv),e(Cv,tge),e(tge,_No),e(Cv,bNo),e(Cv,FO),e(FO,vNo),e(Cv,FNo),e(U,TNo),e(U,wv),e(wv,age),e(age,MNo),e(wv,ENo),e(wv,TO),e(TO,CNo),e(wv,wNo),e(U,ANo),e(U,Av),e(Av,nge),e(nge,yNo),e(Av,LNo),e(Av,MO),e(MO,xNo),e(Av,$No),e(U,kNo),e(U,yv),e(yv,sge),e(sge,SNo),e(yv,RNo),e(yv,EO),e(EO,PNo),e(yv,BNo),e(U,INo),e(U,Lv),e(Lv,lge),e(lge,qNo),e(Lv,NNo),e(Lv,CO),e(CO,jNo),e(Lv,DNo),e(U,GNo),e(U,xv),e(xv,ige),e(ige,ONo),e(xv,VNo),e(xv,wO),e(wO,XNo),e(xv,zNo),e(U,WNo),e(U,$v),e($v,dge),e(dge,QNo),e($v,HNo),e($v,AO),e(AO,UNo),e($v,JNo),e(U,YNo),e(U,kv),e(kv,cge),e(cge,KNo),e(kv,ZNo),e(kv,yO),e(yO,ejo),e(kv,ojo),e(U,rjo),e(U,Sv),e(Sv,fge),e(fge,tjo),e(Sv,ajo),e(Sv,LO),e(LO,njo),e(Sv,sjo),e(U,ljo),e(U,Rv),e(Rv,mge),e(mge,ijo),e(Rv,djo),e(Rv,xO),e(xO,cjo),e(Rv,fjo),e(U,mjo),e(U,Pv),e(Pv,gge),e(gge,gjo),e(Pv,hjo),e(Pv,$O),e($O,pjo),e(Pv,ujo),e(U,_jo),e(U,Bv),e(Bv,hge),e(hge,bjo),e(Bv,vjo),e(Bv,kO),e(kO,Fjo),e(Bv,Tjo),e(U,Mjo),e(U,Iv),e(Iv,pge),e(pge,Ejo),e(Iv,Cjo),e(Iv,SO),e(SO,wjo),e(Iv,Ajo),e(U,yjo),e(U,qv),e(qv,uge),e(uge,Ljo),e(qv,xjo),e(qv,RO),e(RO,$jo),e(qv,kjo),e(U,Sjo),e(U,Nv),e(Nv,_ge),e(_ge,Rjo),e(Nv,Pjo),e(Nv,PO),e(PO,Bjo),e(Nv,Ijo),e(U,qjo),e(U,jv),e(jv,bge),e(bge,Njo),e(jv,jjo),e(jv,BO),e(BO,Djo),e(jv,Gjo),e(U,Ojo),e(U,Dv),e(Dv,vge),e(vge,Vjo),e(Dv,Xjo),e(Dv,IO),e(IO,zjo),e(Dv,Wjo),e(U,Qjo),e(U,Gv),e(Gv,Fge),e(Fge,Hjo),e(Gv,Ujo),e(Gv,qO),e(qO,Jjo),e(Gv,Yjo),e(U,Kjo),e(U,Ov),e(Ov,Tge),e(Tge,Zjo),e(Ov,eDo),e(Ov,NO),e(NO,oDo),e(Ov,rDo),e(U,tDo),e(U,Vv),e(Vv,Mge),e(Mge,aDo),e(Vv,nDo),e(Vv,jO),e(jO,sDo),e(Vv,lDo),e(U,iDo),e(U,Xv),e(Xv,Ege),e(Ege,dDo),e(Xv,cDo),e(Xv,DO),e(DO,fDo),e(Xv,mDo),e(ao,gDo),e(ao,zv),e(zv,hDo),e(zv,Cge),e(Cge,pDo),e(zv,uDo),e(zv,wge),e(wge,_Do),e(ao,bDo),M(Wv,ao,null),b(f,sqe,_),b(f,Yi,_),e(Yi,Qv),e(Qv,Age),M(wy,Age,null),e(Yi,vDo),e(Yi,yge),e(yge,FDo),b(f,lqe,_),b(f,qo,_),M(Ay,qo,null),e(qo,TDo),e(qo,Ki),e(Ki,MDo),e(Ki,GO),e(GO,EDo),e(Ki,CDo),e(Ki,OO),e(OO,wDo),e(Ki,ADo),e(qo,yDo),e(qo,yy),e(yy,LDo),e(yy,Lge),e(Lge,xDo),e(yy,$Do),e(qo,kDo),e(qo,mt),M(Ly,mt,null),e(mt,SDo),e(mt,xge),e(xge,RDo),e(mt,PDo),e(mt,Zi),e(Zi,BDo),e(Zi,$ge),e($ge,IDo),e(Zi,qDo),e(Zi,VO),e(VO,NDo),e(Zi,jDo),e(mt,DDo),M(Hv,mt,null),e(qo,GDo),e(qo,no),M(xy,no,null),e(no,ODo),e(no,kge),e(kge,VDo),e(no,XDo),e(no,qa),e(qa,zDo),e(qa,Sge),e(Sge,WDo),e(qa,QDo),e(qa,Rge),e(Rge,HDo),e(qa,UDo),e(qa,Pge),e(Pge,JDo),e(qa,YDo),e(no,KDo),e(no,V),e(V,Uv),e(Uv,Bge),e(Bge,ZDo),e(Uv,eGo),e(Uv,XO),e(XO,oGo),e(Uv,rGo),e(V,tGo),e(V,Jv),e(Jv,Ige),e(Ige,aGo),e(Jv,nGo),e(Jv,zO),e(zO,sGo),e(Jv,lGo),e(V,iGo),e(V,Yv),e(Yv,qge),e(qge,dGo),e(Yv,cGo),e(Yv,WO),e(WO,fGo),e(Yv,mGo),e(V,gGo),e(V,Kv),e(Kv,Nge),e(Nge,hGo),e(Kv,pGo),e(Kv,QO),e(QO,uGo),e(Kv,_Go),e(V,bGo),e(V,Zv),e(Zv,jge),e(jge,vGo),e(Zv,FGo),e(Zv,HO),e(HO,TGo),e(Zv,MGo),e(V,EGo),e(V,e3),e(e3,Dge),e(Dge,CGo),e(e3,wGo),e(e3,UO),e(UO,AGo),e(e3,yGo),e(V,LGo),e(V,o3),e(o3,Gge),e(Gge,xGo),e(o3,$Go),e(o3,JO),e(JO,kGo),e(o3,SGo),e(V,RGo),e(V,r3),e(r3,Oge),e(Oge,PGo),e(r3,BGo),e(r3,YO),e(YO,IGo),e(r3,qGo),e(V,NGo),e(V,t3),e(t3,Vge),e(Vge,jGo),e(t3,DGo),e(t3,KO),e(KO,GGo),e(t3,OGo),e(V,VGo),e(V,a3),e(a3,Xge),e(Xge,XGo),e(a3,zGo),e(a3,ZO),e(ZO,WGo),e(a3,QGo),e(V,HGo),e(V,n3),e(n3,zge),e(zge,UGo),e(n3,JGo),e(n3,eV),e(eV,YGo),e(n3,KGo),e(V,ZGo),e(V,s3),e(s3,Wge),e(Wge,eOo),e(s3,oOo),e(s3,oV),e(oV,rOo),e(s3,tOo),e(V,aOo),e(V,l3),e(l3,Qge),e(Qge,nOo),e(l3,sOo),e(l3,rV),e(rV,lOo),e(l3,iOo),e(V,dOo),e(V,i3),e(i3,Hge),e(Hge,cOo),e(i3,fOo),e(i3,tV),e(tV,mOo),e(i3,gOo),e(V,hOo),e(V,d3),e(d3,Uge),e(Uge,pOo),e(d3,uOo),e(d3,aV),e(aV,_Oo),e(d3,bOo),e(V,vOo),e(V,c3),e(c3,Jge),e(Jge,FOo),e(c3,TOo),e(c3,nV),e(nV,MOo),e(c3,EOo),e(V,COo),e(V,f3),e(f3,Yge),e(Yge,wOo),e(f3,AOo),e(f3,sV),e(sV,yOo),e(f3,LOo),e(V,xOo),e(V,m3),e(m3,Kge),e(Kge,$Oo),e(m3,kOo),e(m3,lV),e(lV,SOo),e(m3,ROo),e(V,POo),e(V,g3),e(g3,Zge),e(Zge,BOo),e(g3,IOo),e(g3,iV),e(iV,qOo),e(g3,NOo),e(V,jOo),e(V,h3),e(h3,ehe),e(ehe,DOo),e(h3,GOo),e(h3,dV),e(dV,OOo),e(h3,VOo),e(V,XOo),e(V,p3),e(p3,ohe),e(ohe,zOo),e(p3,WOo),e(p3,cV),e(cV,QOo),e(p3,HOo),e(V,UOo),e(V,u3),e(u3,rhe),e(rhe,JOo),e(u3,YOo),e(u3,fV),e(fV,KOo),e(u3,ZOo),e(V,eVo),e(V,_3),e(_3,the),e(the,oVo),e(_3,rVo),e(_3,mV),e(mV,tVo),e(_3,aVo),e(V,nVo),e(V,b3),e(b3,ahe),e(ahe,sVo),e(b3,lVo),e(b3,gV),e(gV,iVo),e(b3,dVo),e(V,cVo),e(V,v3),e(v3,nhe),e(nhe,fVo),e(v3,mVo),e(v3,hV),e(hV,gVo),e(v3,hVo),e(V,pVo),e(V,F3),e(F3,she),e(she,uVo),e(F3,_Vo),e(F3,pV),e(pV,bVo),e(F3,vVo),e(V,FVo),e(V,T3),e(T3,lhe),e(lhe,TVo),e(T3,MVo),e(T3,uV),e(uV,EVo),e(T3,CVo),e(V,wVo),e(V,M3),e(M3,ihe),e(ihe,AVo),e(M3,yVo),e(M3,_V),e(_V,LVo),e(M3,xVo),e(V,$Vo),e(V,E3),e(E3,dhe),e(dhe,kVo),e(E3,SVo),e(E3,bV),e(bV,RVo),e(E3,PVo),e(V,BVo),e(V,C3),e(C3,che),e(che,IVo),e(C3,qVo),e(C3,vV),e(vV,NVo),e(C3,jVo),e(V,DVo),e(V,w3),e(w3,fhe),e(fhe,GVo),e(w3,OVo),e(w3,FV),e(FV,VVo),e(w3,XVo),e(V,zVo),e(V,A3),e(A3,mhe),e(mhe,WVo),e(A3,QVo),e(A3,TV),e(TV,HVo),e(A3,UVo),e(V,JVo),e(V,y3),e(y3,ghe),e(ghe,YVo),e(y3,KVo),e(y3,MV),e(MV,ZVo),e(y3,eXo),e(V,oXo),e(V,L3),e(L3,hhe),e(hhe,rXo),e(L3,tXo),e(L3,EV),e(EV,aXo),e(L3,nXo),e(V,sXo),e(V,x3),e(x3,phe),e(phe,lXo),e(x3,iXo),e(x3,CV),e(CV,dXo),e(x3,cXo),e(V,fXo),e(V,$3),e($3,uhe),e(uhe,mXo),e($3,gXo),e($3,wV),e(wV,hXo),e($3,pXo),e(V,uXo),e(V,k3),e(k3,_he),e(_he,_Xo),e(k3,bXo),e(k3,AV),e(AV,vXo),e(k3,FXo),e(V,TXo),e(V,S3),e(S3,bhe),e(bhe,MXo),e(S3,EXo),e(S3,yV),e(yV,CXo),e(S3,wXo),e(V,AXo),e(V,R3),e(R3,vhe),e(vhe,yXo),e(R3,LXo),e(R3,LV),e(LV,xXo),e(R3,$Xo),e(no,kXo),e(no,P3),e(P3,SXo),e(P3,Fhe),e(Fhe,RXo),e(P3,PXo),e(P3,The),e(The,BXo),e(no,IXo),M(B3,no,null),b(f,iqe,_),b(f,ed,_),e(ed,I3),e(I3,Mhe),M($y,Mhe,null),e(ed,qXo),e(ed,Ehe),e(Ehe,NXo),b(f,dqe,_),b(f,No,_),M(ky,No,null),e(No,jXo),e(No,od),e(od,DXo),e(od,xV),e(xV,GXo),e(od,OXo),e(od,$V),e($V,VXo),e(od,XXo),e(No,zXo),e(No,Sy),e(Sy,WXo),e(Sy,Che),e(Che,QXo),e(Sy,HXo),e(No,UXo),e(No,gt),M(Ry,gt,null),e(gt,JXo),e(gt,whe),e(whe,YXo),e(gt,KXo),e(gt,rd),e(rd,ZXo),e(rd,Ahe),e(Ahe,ezo),e(rd,ozo),e(rd,kV),e(kV,rzo),e(rd,tzo),e(gt,azo),M(q3,gt,null),e(No,nzo),e(No,so),M(Py,so,null),e(so,szo),e(so,yhe),e(yhe,lzo),e(so,izo),e(so,Na),e(Na,dzo),e(Na,Lhe),e(Lhe,czo),e(Na,fzo),e(Na,xhe),e(xhe,mzo),e(Na,gzo),e(Na,$he),e($he,hzo),e(Na,pzo),e(so,uzo),e(so,khe),e(khe,N3),e(N3,She),e(She,_zo),e(N3,bzo),e(N3,SV),e(SV,vzo),e(N3,Fzo),e(so,Tzo),e(so,j3),e(j3,Mzo),e(j3,Rhe),e(Rhe,Ezo),e(j3,Czo),e(j3,Phe),e(Phe,wzo),e(so,Azo),M(D3,so,null),b(f,cqe,_),b(f,td,_),e(td,G3),e(G3,Bhe),M(By,Bhe,null),e(td,yzo),e(td,Ihe),e(Ihe,Lzo),b(f,fqe,_),b(f,jo,_),M(Iy,jo,null),e(jo,xzo),e(jo,ad),e(ad,$zo),e(ad,RV),e(RV,kzo),e(ad,Szo),e(ad,PV),e(PV,Rzo),e(ad,Pzo),e(jo,Bzo),e(jo,qy),e(qy,Izo),e(qy,qhe),e(qhe,qzo),e(qy,Nzo),e(jo,jzo),e(jo,ht),M(Ny,ht,null),e(ht,Dzo),e(ht,Nhe),e(Nhe,Gzo),e(ht,Ozo),e(ht,nd),e(nd,Vzo),e(nd,jhe),e(jhe,Xzo),e(nd,zzo),e(nd,BV),e(BV,Wzo),e(nd,Qzo),e(ht,Hzo),M(O3,ht,null),e(jo,Uzo),e(jo,lo),M(jy,lo,null),e(lo,Jzo),e(lo,Dhe),e(Dhe,Yzo),e(lo,Kzo),e(lo,ja),e(ja,Zzo),e(ja,Ghe),e(Ghe,eWo),e(ja,oWo),e(ja,Ohe),e(Ohe,rWo),e(ja,tWo),e(ja,Vhe),e(Vhe,aWo),e(ja,nWo),e(lo,sWo),e(lo,Fe),e(Fe,V3),e(V3,Xhe),e(Xhe,lWo),e(V3,iWo),e(V3,IV),e(IV,dWo),e(V3,cWo),e(Fe,fWo),e(Fe,X3),e(X3,zhe),e(zhe,mWo),e(X3,gWo),e(X3,qV),e(qV,hWo),e(X3,pWo),e(Fe,uWo),e(Fe,z3),e(z3,Whe),e(Whe,_Wo),e(z3,bWo),e(z3,NV),e(NV,vWo),e(z3,FWo),e(Fe,TWo),e(Fe,Ps),e(Ps,Qhe),e(Qhe,MWo),e(Ps,EWo),e(Ps,jV),e(jV,CWo),e(Ps,wWo),e(Ps,DV),e(DV,AWo),e(Ps,yWo),e(Fe,LWo),e(Fe,W3),e(W3,Hhe),e(Hhe,xWo),e(W3,$Wo),e(W3,GV),e(GV,kWo),e(W3,SWo),e(Fe,RWo),e(Fe,pt),e(pt,Uhe),e(Uhe,PWo),e(pt,BWo),e(pt,OV),e(OV,IWo),e(pt,qWo),e(pt,VV),e(VV,NWo),e(pt,jWo),e(pt,XV),e(XV,DWo),e(pt,GWo),e(Fe,OWo),e(Fe,Q3),e(Q3,Jhe),e(Jhe,VWo),e(Q3,XWo),e(Q3,zV),e(zV,zWo),e(Q3,WWo),e(Fe,QWo),e(Fe,H3),e(H3,Yhe),e(Yhe,HWo),e(H3,UWo),e(H3,WV),e(WV,JWo),e(H3,YWo),e(Fe,KWo),e(Fe,U3),e(U3,Khe),e(Khe,ZWo),e(U3,eQo),e(U3,QV),e(QV,oQo),e(U3,rQo),e(Fe,tQo),e(Fe,J3),e(J3,Zhe),e(Zhe,aQo),e(J3,nQo),e(J3,HV),e(HV,sQo),e(J3,lQo),e(Fe,iQo),e(Fe,Y3),e(Y3,epe),e(epe,dQo),e(Y3,cQo),e(Y3,UV),e(UV,fQo),e(Y3,mQo),e(Fe,gQo),e(Fe,K3),e(K3,ope),e(ope,hQo),e(K3,pQo),e(K3,JV),e(JV,uQo),e(K3,_Qo),e(Fe,bQo),e(Fe,Z3),e(Z3,rpe),e(rpe,vQo),e(Z3,FQo),e(Z3,YV),e(YV,TQo),e(Z3,MQo),e(lo,EQo),e(lo,eF),e(eF,CQo),e(eF,tpe),e(tpe,wQo),e(eF,AQo),e(eF,ape),e(ape,yQo),e(lo,LQo),M(oF,lo,null),b(f,mqe,_),b(f,sd,_),e(sd,rF),e(rF,npe),M(Dy,npe,null),e(sd,xQo),e(sd,spe),e(spe,$Qo),b(f,gqe,_),b(f,Do,_),M(Gy,Do,null),e(Do,kQo),e(Do,ld),e(ld,SQo),e(ld,KV),e(KV,RQo),e(ld,PQo),e(ld,ZV),e(ZV,BQo),e(ld,IQo),e(Do,qQo),e(Do,Oy),e(Oy,NQo),e(Oy,lpe),e(lpe,jQo),e(Oy,DQo),e(Do,GQo),e(Do,ut),M(Vy,ut,null),e(ut,OQo),e(ut,ipe),e(ipe,VQo),e(ut,XQo),e(ut,id),e(id,zQo),e(id,dpe),e(dpe,WQo),e(id,QQo),e(id,eX),e(eX,HQo),e(id,UQo),e(ut,JQo),M(tF,ut,null),e(Do,YQo),e(Do,io),M(Xy,io,null),e(io,KQo),e(io,cpe),e(cpe,ZQo),e(io,eHo),e(io,Da),e(Da,oHo),e(Da,fpe),e(fpe,rHo),e(Da,tHo),e(Da,mpe),e(mpe,aHo),e(Da,nHo),e(Da,gpe),e(gpe,sHo),e(Da,lHo),e(io,iHo),e(io,hpe),e(hpe,aF),e(aF,ppe),e(ppe,dHo),e(aF,cHo),e(aF,oX),e(oX,fHo),e(aF,mHo),e(io,gHo),e(io,nF),e(nF,hHo),e(nF,upe),e(upe,pHo),e(nF,uHo),e(nF,_pe),e(_pe,_Ho),e(io,bHo),M(sF,io,null),b(f,hqe,_),b(f,dd,_),e(dd,lF),e(lF,bpe),M(zy,bpe,null),e(dd,vHo),e(dd,vpe),e(vpe,FHo),b(f,pqe,_),b(f,Go,_),M(Wy,Go,null),e(Go,THo),e(Go,cd),e(cd,MHo),e(cd,rX),e(rX,EHo),e(cd,CHo),e(cd,tX),e(tX,wHo),e(cd,AHo),e(Go,yHo),e(Go,Qy),e(Qy,LHo),e(Qy,Fpe),e(Fpe,xHo),e(Qy,$Ho),e(Go,kHo),e(Go,_t),M(Hy,_t,null),e(_t,SHo),e(_t,Tpe),e(Tpe,RHo),e(_t,PHo),e(_t,fd),e(fd,BHo),e(fd,Mpe),e(Mpe,IHo),e(fd,qHo),e(fd,aX),e(aX,NHo),e(fd,jHo),e(_t,DHo),M(iF,_t,null),e(Go,GHo),e(Go,co),M(Uy,co,null),e(co,OHo),e(co,Epe),e(Epe,VHo),e(co,XHo),e(co,Ga),e(Ga,zHo),e(Ga,Cpe),e(Cpe,WHo),e(Ga,QHo),e(Ga,wpe),e(wpe,HHo),e(Ga,UHo),e(Ga,Ape),e(Ape,JHo),e(Ga,YHo),e(co,KHo),e(co,ke),e(ke,dF),e(dF,ype),e(ype,ZHo),e(dF,eUo),e(dF,nX),e(nX,oUo),e(dF,rUo),e(ke,tUo),e(ke,cF),e(cF,Lpe),e(Lpe,aUo),e(cF,nUo),e(cF,sX),e(sX,sUo),e(cF,lUo),e(ke,iUo),e(ke,fF),e(fF,xpe),e(xpe,dUo),e(fF,cUo),e(fF,lX),e(lX,fUo),e(fF,mUo),e(ke,gUo),e(ke,mF),e(mF,$pe),e($pe,hUo),e(mF,pUo),e(mF,iX),e(iX,uUo),e(mF,_Uo),e(ke,bUo),e(ke,gF),e(gF,kpe),e(kpe,vUo),e(gF,FUo),e(gF,dX),e(dX,TUo),e(gF,MUo),e(ke,EUo),e(ke,hF),e(hF,Spe),e(Spe,CUo),e(hF,wUo),e(hF,cX),e(cX,AUo),e(hF,yUo),e(ke,LUo),e(ke,pF),e(pF,Rpe),e(Rpe,xUo),e(pF,$Uo),e(pF,fX),e(fX,kUo),e(pF,SUo),e(ke,RUo),e(ke,uF),e(uF,Ppe),e(Ppe,PUo),e(uF,BUo),e(uF,mX),e(mX,IUo),e(uF,qUo),e(ke,NUo),e(ke,_F),e(_F,Bpe),e(Bpe,jUo),e(_F,DUo),e(_F,gX),e(gX,GUo),e(_F,OUo),e(co,VUo),e(co,bF),e(bF,XUo),e(bF,Ipe),e(Ipe,zUo),e(bF,WUo),e(bF,qpe),e(qpe,QUo),e(co,HUo),M(vF,co,null),b(f,uqe,_),b(f,md,_),e(md,FF),e(FF,Npe),M(Jy,Npe,null),e(md,UUo),e(md,jpe),e(jpe,JUo),b(f,_qe,_),b(f,Oo,_),M(Yy,Oo,null),e(Oo,YUo),e(Oo,gd),e(gd,KUo),e(gd,hX),e(hX,ZUo),e(gd,eJo),e(gd,pX),e(pX,oJo),e(gd,rJo),e(Oo,tJo),e(Oo,Ky),e(Ky,aJo),e(Ky,Dpe),e(Dpe,nJo),e(Ky,sJo),e(Oo,lJo),e(Oo,bt),M(Zy,bt,null),e(bt,iJo),e(bt,Gpe),e(Gpe,dJo),e(bt,cJo),e(bt,hd),e(hd,fJo),e(hd,Ope),e(Ope,mJo),e(hd,gJo),e(hd,uX),e(uX,hJo),e(hd,pJo),e(bt,uJo),M(TF,bt,null),e(Oo,_Jo),e(Oo,fo),M(eL,fo,null),e(fo,bJo),e(fo,Vpe),e(Vpe,vJo),e(fo,FJo),e(fo,Oa),e(Oa,TJo),e(Oa,Xpe),e(Xpe,MJo),e(Oa,EJo),e(Oa,zpe),e(zpe,CJo),e(Oa,wJo),e(Oa,Wpe),e(Wpe,AJo),e(Oa,yJo),e(fo,LJo),e(fo,Kr),e(Kr,MF),e(MF,Qpe),e(Qpe,xJo),e(MF,$Jo),e(MF,_X),e(_X,kJo),e(MF,SJo),e(Kr,RJo),e(Kr,EF),e(EF,Hpe),e(Hpe,PJo),e(EF,BJo),e(EF,bX),e(bX,IJo),e(EF,qJo),e(Kr,NJo),e(Kr,CF),e(CF,Upe),e(Upe,jJo),e(CF,DJo),e(CF,vX),e(vX,GJo),e(CF,OJo),e(Kr,VJo),e(Kr,wF),e(wF,Jpe),e(Jpe,XJo),e(wF,zJo),e(wF,FX),e(FX,WJo),e(wF,QJo),e(Kr,HJo),e(Kr,AF),e(AF,Ype),e(Ype,UJo),e(AF,JJo),e(AF,TX),e(TX,YJo),e(AF,KJo),e(fo,ZJo),e(fo,yF),e(yF,eYo),e(yF,Kpe),e(Kpe,oYo),e(yF,rYo),e(yF,Zpe),e(Zpe,tYo),e(fo,aYo),M(LF,fo,null),b(f,bqe,_),b(f,pd,_),e(pd,xF),e(xF,eue),M(oL,eue,null),e(pd,nYo),e(pd,oue),e(oue,sYo),b(f,vqe,_),b(f,Vo,_),M(rL,Vo,null),e(Vo,lYo),e(Vo,ud),e(ud,iYo),e(ud,MX),e(MX,dYo),e(ud,cYo),e(ud,EX),e(EX,fYo),e(ud,mYo),e(Vo,gYo),e(Vo,tL),e(tL,hYo),e(tL,rue),e(rue,pYo),e(tL,uYo),e(Vo,_Yo),e(Vo,vt),M(aL,vt,null),e(vt,bYo),e(vt,tue),e(tue,vYo),e(vt,FYo),e(vt,_d),e(_d,TYo),e(_d,aue),e(aue,MYo),e(_d,EYo),e(_d,CX),e(CX,CYo),e(_d,wYo),e(vt,AYo),M($F,vt,null),e(Vo,yYo),e(Vo,mo),M(nL,mo,null),e(mo,LYo),e(mo,nue),e(nue,xYo),e(mo,$Yo),e(mo,Va),e(Va,kYo),e(Va,sue),e(sue,SYo),e(Va,RYo),e(Va,lue),e(lue,PYo),e(Va,BYo),e(Va,iue),e(iue,IYo),e(Va,qYo),e(mo,NYo),e(mo,Se),e(Se,kF),e(kF,due),e(due,jYo),e(kF,DYo),e(kF,wX),e(wX,GYo),e(kF,OYo),e(Se,VYo),e(Se,SF),e(SF,cue),e(cue,XYo),e(SF,zYo),e(SF,AX),e(AX,WYo),e(SF,QYo),e(Se,HYo),e(Se,RF),e(RF,fue),e(fue,UYo),e(RF,JYo),e(RF,yX),e(yX,YYo),e(RF,KYo),e(Se,ZYo),e(Se,PF),e(PF,mue),e(mue,eKo),e(PF,oKo),e(PF,LX),e(LX,rKo),e(PF,tKo),e(Se,aKo),e(Se,BF),e(BF,gue),e(gue,nKo),e(BF,sKo),e(BF,xX),e(xX,lKo),e(BF,iKo),e(Se,dKo),e(Se,IF),e(IF,hue),e(hue,cKo),e(IF,fKo),e(IF,$X),e($X,mKo),e(IF,gKo),e(Se,hKo),e(Se,qF),e(qF,pue),e(pue,pKo),e(qF,uKo),e(qF,kX),e(kX,_Ko),e(qF,bKo),e(Se,vKo),e(Se,NF),e(NF,uue),e(uue,FKo),e(NF,TKo),e(NF,SX),e(SX,MKo),e(NF,EKo),e(Se,CKo),e(Se,jF),e(jF,_ue),e(_ue,wKo),e(jF,AKo),e(jF,RX),e(RX,yKo),e(jF,LKo),e(mo,xKo),e(mo,DF),e(DF,$Ko),e(DF,bue),e(bue,kKo),e(DF,SKo),e(DF,vue),e(vue,RKo),e(mo,PKo),M(GF,mo,null),b(f,Fqe,_),b(f,bd,_),e(bd,OF),e(OF,Fue),M(sL,Fue,null),e(bd,BKo),e(bd,Tue),e(Tue,IKo),b(f,Tqe,_),b(f,Xo,_),M(lL,Xo,null),e(Xo,qKo),e(Xo,vd),e(vd,NKo),e(vd,PX),e(PX,jKo),e(vd,DKo),e(vd,BX),e(BX,GKo),e(vd,OKo),e(Xo,VKo),e(Xo,iL),e(iL,XKo),e(iL,Mue),e(Mue,zKo),e(iL,WKo),e(Xo,QKo),e(Xo,Ft),M(dL,Ft,null),e(Ft,HKo),e(Ft,Eue),e(Eue,UKo),e(Ft,JKo),e(Ft,Fd),e(Fd,YKo),e(Fd,Cue),e(Cue,KKo),e(Fd,ZKo),e(Fd,IX),e(IX,eZo),e(Fd,oZo),e(Ft,rZo),M(VF,Ft,null),e(Xo,tZo),e(Xo,go),M(cL,go,null),e(go,aZo),e(go,wue),e(wue,nZo),e(go,sZo),e(go,Xa),e(Xa,lZo),e(Xa,Aue),e(Aue,iZo),e(Xa,dZo),e(Xa,yue),e(yue,cZo),e(Xa,fZo),e(Xa,Lue),e(Lue,mZo),e(Xa,gZo),e(go,hZo),e(go,fL),e(fL,XF),e(XF,xue),e(xue,pZo),e(XF,uZo),e(XF,qX),e(qX,_Zo),e(XF,bZo),e(fL,vZo),e(fL,zF),e(zF,$ue),e($ue,FZo),e(zF,TZo),e(zF,NX),e(NX,MZo),e(zF,EZo),e(go,CZo),e(go,WF),e(WF,wZo),e(WF,kue),e(kue,AZo),e(WF,yZo),e(WF,Sue),e(Sue,LZo),e(go,xZo),M(QF,go,null),b(f,Mqe,_),b(f,Td,_),e(Td,HF),e(HF,Rue),M(mL,Rue,null),e(Td,$Zo),e(Td,Pue),e(Pue,kZo),b(f,Eqe,_),b(f,zo,_),M(gL,zo,null),e(zo,SZo),e(zo,Md),e(Md,RZo),e(Md,jX),e(jX,PZo),e(Md,BZo),e(Md,DX),e(DX,IZo),e(Md,qZo),e(zo,NZo),e(zo,hL),e(hL,jZo),e(hL,Bue),e(Bue,DZo),e(hL,GZo),e(zo,OZo),e(zo,Tt),M(pL,Tt,null),e(Tt,VZo),e(Tt,Iue),e(Iue,XZo),e(Tt,zZo),e(Tt,Ed),e(Ed,WZo),e(Ed,que),e(que,QZo),e(Ed,HZo),e(Ed,GX),e(GX,UZo),e(Ed,JZo),e(Tt,YZo),M(UF,Tt,null),e(zo,KZo),e(zo,ho),M(uL,ho,null),e(ho,ZZo),e(ho,Nue),e(Nue,eer),e(ho,oer),e(ho,za),e(za,rer),e(za,jue),e(jue,ter),e(za,aer),e(za,Due),e(Due,ner),e(za,ser),e(za,Gue),e(Gue,ler),e(za,ier),e(ho,der),e(ho,Zr),e(Zr,JF),e(JF,Oue),e(Oue,cer),e(JF,fer),e(JF,OX),e(OX,mer),e(JF,ger),e(Zr,her),e(Zr,YF),e(YF,Vue),e(Vue,per),e(YF,uer),e(YF,VX),e(VX,_er),e(YF,ber),e(Zr,ver),e(Zr,KF),e(KF,Xue),e(Xue,Fer),e(KF,Ter),e(KF,XX),e(XX,Mer),e(KF,Eer),e(Zr,Cer),e(Zr,ZF),e(ZF,zue),e(zue,wer),e(ZF,Aer),e(ZF,zX),e(zX,yer),e(ZF,Ler),e(Zr,xer),e(Zr,e0),e(e0,Wue),e(Wue,$er),e(e0,ker),e(e0,WX),e(WX,Ser),e(e0,Rer),e(ho,Per),e(ho,o0),e(o0,Ber),e(o0,Que),e(Que,Ier),e(o0,qer),e(o0,Hue),e(Hue,Ner),e(ho,jer),M(r0,ho,null),b(f,Cqe,_),b(f,Cd,_),e(Cd,t0),e(t0,Uue),M(_L,Uue,null),e(Cd,Der),e(Cd,Jue),e(Jue,Ger),b(f,wqe,_),b(f,Wo,_),M(bL,Wo,null),e(Wo,Oer),e(Wo,wd),e(wd,Ver),e(wd,QX),e(QX,Xer),e(wd,zer),e(wd,HX),e(HX,Wer),e(wd,Qer),e(Wo,Her),e(Wo,vL),e(vL,Uer),e(vL,Yue),e(Yue,Jer),e(vL,Yer),e(Wo,Ker),e(Wo,Mt),M(FL,Mt,null),e(Mt,Zer),e(Mt,Kue),e(Kue,eor),e(Mt,oor),e(Mt,Ad),e(Ad,ror),e(Ad,Zue),e(Zue,tor),e(Ad,aor),e(Ad,UX),e(UX,nor),e(Ad,sor),e(Mt,lor),M(a0,Mt,null),e(Wo,ior),e(Wo,po),M(TL,po,null),e(po,dor),e(po,e_e),e(e_e,cor),e(po,mor),e(po,Wa),e(Wa,gor),e(Wa,o_e),e(o_e,hor),e(Wa,por),e(Wa,r_e),e(r_e,uor),e(Wa,_or),e(Wa,t_e),e(t_e,bor),e(Wa,vor),e(po,For),e(po,yd),e(yd,n0),e(n0,a_e),e(a_e,Tor),e(n0,Mor),e(n0,JX),e(JX,Eor),e(n0,Cor),e(yd,wor),e(yd,s0),e(s0,n_e),e(n_e,Aor),e(s0,yor),e(s0,YX),e(YX,Lor),e(s0,xor),e(yd,$or),e(yd,l0),e(l0,s_e),e(s_e,kor),e(l0,Sor),e(l0,KX),e(KX,Ror),e(l0,Por),e(po,Bor),e(po,i0),e(i0,Ior),e(i0,l_e),e(l_e,qor),e(i0,Nor),e(i0,i_e),e(i_e,jor),e(po,Dor),M(d0,po,null),b(f,Aqe,_),b(f,Ld,_),e(Ld,c0),e(c0,d_e),M(ML,d_e,null),e(Ld,Gor),e(Ld,c_e),e(c_e,Oor),b(f,yqe,_),b(f,Qo,_),M(EL,Qo,null),e(Qo,Vor),e(Qo,xd),e(xd,Xor),e(xd,ZX),e(ZX,zor),e(xd,Wor),e(xd,ez),e(ez,Qor),e(xd,Hor),e(Qo,Uor),e(Qo,CL),e(CL,Jor),e(CL,f_e),e(f_e,Yor),e(CL,Kor),e(Qo,Zor),e(Qo,Et),M(wL,Et,null),e(Et,err),e(Et,m_e),e(m_e,orr),e(Et,rrr),e(Et,$d),e($d,trr),e($d,g_e),e(g_e,arr),e($d,nrr),e($d,oz),e(oz,srr),e($d,lrr),e(Et,irr),M(f0,Et,null),e(Qo,drr),e(Qo,uo),M(AL,uo,null),e(uo,crr),e(uo,h_e),e(h_e,frr),e(uo,mrr),e(uo,Qa),e(Qa,grr),e(Qa,p_e),e(p_e,hrr),e(Qa,prr),e(Qa,u_e),e(u_e,urr),e(Qa,_rr),e(Qa,__e),e(__e,brr),e(Qa,vrr),e(uo,Frr),e(uo,yL),e(yL,m0),e(m0,b_e),e(b_e,Trr),e(m0,Mrr),e(m0,rz),e(rz,Err),e(m0,Crr),e(yL,wrr),e(yL,g0),e(g0,v_e),e(v_e,Arr),e(g0,yrr),e(g0,tz),e(tz,Lrr),e(g0,xrr),e(uo,$rr),e(uo,h0),e(h0,krr),e(h0,F_e),e(F_e,Srr),e(h0,Rrr),e(h0,T_e),e(T_e,Prr),e(uo,Brr),M(p0,uo,null),b(f,Lqe,_),b(f,kd,_),e(kd,u0),e(u0,M_e),M(LL,M_e,null),e(kd,Irr),e(kd,E_e),e(E_e,qrr),b(f,xqe,_),b(f,Ho,_),M(xL,Ho,null),e(Ho,Nrr),e(Ho,Sd),e(Sd,jrr),e(Sd,az),e(az,Drr),e(Sd,Grr),e(Sd,nz),e(nz,Orr),e(Sd,Vrr),e(Ho,Xrr),e(Ho,$L),e($L,zrr),e($L,C_e),e(C_e,Wrr),e($L,Qrr),e(Ho,Hrr),e(Ho,Ct),M(kL,Ct,null),e(Ct,Urr),e(Ct,w_e),e(w_e,Jrr),e(Ct,Yrr),e(Ct,Rd),e(Rd,Krr),e(Rd,A_e),e(A_e,Zrr),e(Rd,etr),e(Rd,sz),e(sz,otr),e(Rd,rtr),e(Ct,ttr),M(_0,Ct,null),e(Ho,atr),e(Ho,_o),M(SL,_o,null),e(_o,ntr),e(_o,y_e),e(y_e,str),e(_o,ltr),e(_o,Ha),e(Ha,itr),e(Ha,L_e),e(L_e,dtr),e(Ha,ctr),e(Ha,x_e),e(x_e,ftr),e(Ha,mtr),e(Ha,$_e),e($_e,gtr),e(Ha,htr),e(_o,ptr),e(_o,k_e),e(k_e,b0),e(b0,S_e),e(S_e,utr),e(b0,_tr),e(b0,lz),e(lz,btr),e(b0,vtr),e(_o,Ftr),e(_o,v0),e(v0,Ttr),e(v0,R_e),e(R_e,Mtr),e(v0,Etr),e(v0,P_e),e(P_e,Ctr),e(_o,wtr),M(F0,_o,null),b(f,$qe,_),b(f,Pd,_),e(Pd,T0),e(T0,B_e),M(RL,B_e,null),e(Pd,Atr),e(Pd,I_e),e(I_e,ytr),b(f,kqe,_),b(f,Uo,_),M(PL,Uo,null),e(Uo,Ltr),e(Uo,Bd),e(Bd,xtr),e(Bd,iz),e(iz,$tr),e(Bd,ktr),e(Bd,dz),e(dz,Str),e(Bd,Rtr),e(Uo,Ptr),e(Uo,BL),e(BL,Btr),e(BL,q_e),e(q_e,Itr),e(BL,qtr),e(Uo,Ntr),e(Uo,wt),M(IL,wt,null),e(wt,jtr),e(wt,N_e),e(N_e,Dtr),e(wt,Gtr),e(wt,Id),e(Id,Otr),e(Id,j_e),e(j_e,Vtr),e(Id,Xtr),e(Id,cz),e(cz,ztr),e(Id,Wtr),e(wt,Qtr),M(M0,wt,null),e(Uo,Htr),e(Uo,bo),M(qL,bo,null),e(bo,Utr),e(bo,D_e),e(D_e,Jtr),e(bo,Ytr),e(bo,Ua),e(Ua,Ktr),e(Ua,G_e),e(G_e,Ztr),e(Ua,ear),e(Ua,O_e),e(O_e,oar),e(Ua,rar),e(Ua,V_e),e(V_e,tar),e(Ua,aar),e(bo,nar),e(bo,Ja),e(Ja,E0),e(E0,X_e),e(X_e,sar),e(E0,lar),e(E0,fz),e(fz,iar),e(E0,dar),e(Ja,car),e(Ja,C0),e(C0,z_e),e(z_e,far),e(C0,mar),e(C0,mz),e(mz,gar),e(C0,har),e(Ja,par),e(Ja,w0),e(w0,W_e),e(W_e,uar),e(w0,_ar),e(w0,gz),e(gz,bar),e(w0,Far),e(Ja,Tar),e(Ja,A0),e(A0,Q_e),e(Q_e,Mar),e(A0,Ear),e(A0,hz),e(hz,Car),e(A0,war),e(bo,Aar),e(bo,y0),e(y0,yar),e(y0,H_e),e(H_e,Lar),e(y0,xar),e(y0,U_e),e(U_e,$ar),e(bo,kar),M(L0,bo,null),b(f,Sqe,_),b(f,qd,_),e(qd,x0),e(x0,J_e),M(NL,J_e,null),e(qd,Sar),e(qd,Y_e),e(Y_e,Rar),b(f,Rqe,_),b(f,Jo,_),M(jL,Jo,null),e(Jo,Par),e(Jo,Nd),e(Nd,Bar),e(Nd,pz),e(pz,Iar),e(Nd,qar),e(Nd,uz),e(uz,Nar),e(Nd,jar),e(Jo,Dar),e(Jo,DL),e(DL,Gar),e(DL,K_e),e(K_e,Oar),e(DL,Var),e(Jo,Xar),e(Jo,At),M(GL,At,null),e(At,zar),e(At,Z_e),e(Z_e,War),e(At,Qar),e(At,jd),e(jd,Har),e(jd,e1e),e(e1e,Uar),e(jd,Jar),e(jd,_z),e(_z,Yar),e(jd,Kar),e(At,Zar),M($0,At,null),e(Jo,enr),e(Jo,vo),M(OL,vo,null),e(vo,onr),e(vo,o1e),e(o1e,rnr),e(vo,tnr),e(vo,Ya),e(Ya,anr),e(Ya,r1e),e(r1e,nnr),e(Ya,snr),e(Ya,t1e),e(t1e,lnr),e(Ya,inr),e(Ya,a1e),e(a1e,dnr),e(Ya,cnr),e(vo,fnr),e(vo,n1e),e(n1e,k0),e(k0,s1e),e(s1e,mnr),e(k0,gnr),e(k0,bz),e(bz,hnr),e(k0,pnr),e(vo,unr),e(vo,S0),e(S0,_nr),e(S0,l1e),e(l1e,bnr),e(S0,vnr),e(S0,i1e),e(i1e,Fnr),e(vo,Tnr),M(R0,vo,null),b(f,Pqe,_),b(f,Dd,_),e(Dd,P0),e(P0,d1e),M(VL,d1e,null),e(Dd,Mnr),e(Dd,c1e),e(c1e,Enr),b(f,Bqe,_),b(f,Yo,_),M(XL,Yo,null),e(Yo,Cnr),e(Yo,Gd),e(Gd,wnr),e(Gd,vz),e(vz,Anr),e(Gd,ynr),e(Gd,Fz),e(Fz,Lnr),e(Gd,xnr),e(Yo,$nr),e(Yo,zL),e(zL,knr),e(zL,f1e),e(f1e,Snr),e(zL,Rnr),e(Yo,Pnr),e(Yo,yt),M(WL,yt,null),e(yt,Bnr),e(yt,m1e),e(m1e,Inr),e(yt,qnr),e(yt,Od),e(Od,Nnr),e(Od,g1e),e(g1e,jnr),e(Od,Dnr),e(Od,Tz),e(Tz,Gnr),e(Od,Onr),e(yt,Vnr),M(B0,yt,null),e(Yo,Xnr),e(Yo,wr),M(QL,wr,null),e(wr,znr),e(wr,h1e),e(h1e,Wnr),e(wr,Qnr),e(wr,Ka),e(Ka,Hnr),e(Ka,p1e),e(p1e,Unr),e(Ka,Jnr),e(Ka,u1e),e(u1e,Ynr),e(Ka,Knr),e(Ka,_1e),e(_1e,Znr),e(Ka,esr),e(wr,osr),e(wr,N),e(N,I0),e(I0,b1e),e(b1e,rsr),e(I0,tsr),e(I0,Mz),e(Mz,asr),e(I0,nsr),e(N,ssr),e(N,q0),e(q0,v1e),e(v1e,lsr),e(q0,isr),e(q0,Ez),e(Ez,dsr),e(q0,csr),e(N,fsr),e(N,N0),e(N0,F1e),e(F1e,msr),e(N0,gsr),e(N0,Cz),e(Cz,hsr),e(N0,psr),e(N,usr),e(N,j0),e(j0,T1e),e(T1e,_sr),e(j0,bsr),e(j0,wz),e(wz,vsr),e(j0,Fsr),e(N,Tsr),e(N,D0),e(D0,M1e),e(M1e,Msr),e(D0,Esr),e(D0,Az),e(Az,Csr),e(D0,wsr),e(N,Asr),e(N,G0),e(G0,E1e),e(E1e,ysr),e(G0,Lsr),e(G0,yz),e(yz,xsr),e(G0,$sr),e(N,ksr),e(N,O0),e(O0,C1e),e(C1e,Ssr),e(O0,Rsr),e(O0,Lz),e(Lz,Psr),e(O0,Bsr),e(N,Isr),e(N,V0),e(V0,w1e),e(w1e,qsr),e(V0,Nsr),e(V0,xz),e(xz,jsr),e(V0,Dsr),e(N,Gsr),e(N,X0),e(X0,A1e),e(A1e,Osr),e(X0,Vsr),e(X0,$z),e($z,Xsr),e(X0,zsr),e(N,Wsr),e(N,z0),e(z0,y1e),e(y1e,Qsr),e(z0,Hsr),e(z0,kz),e(kz,Usr),e(z0,Jsr),e(N,Ysr),e(N,W0),e(W0,L1e),e(L1e,Ksr),e(W0,Zsr),e(W0,Sz),e(Sz,elr),e(W0,olr),e(N,rlr),e(N,Q0),e(Q0,x1e),e(x1e,tlr),e(Q0,alr),e(Q0,Rz),e(Rz,nlr),e(Q0,slr),e(N,llr),e(N,H0),e(H0,$1e),e($1e,ilr),e(H0,dlr),e(H0,Pz),e(Pz,clr),e(H0,flr),e(N,mlr),e(N,U0),e(U0,k1e),e(k1e,glr),e(U0,hlr),e(U0,Bz),e(Bz,plr),e(U0,ulr),e(N,_lr),e(N,J0),e(J0,S1e),e(S1e,blr),e(J0,vlr),e(J0,Iz),e(Iz,Flr),e(J0,Tlr),e(N,Mlr),e(N,Y0),e(Y0,R1e),e(R1e,Elr),e(Y0,Clr),e(Y0,qz),e(qz,wlr),e(Y0,Alr),e(N,ylr),e(N,K0),e(K0,P1e),e(P1e,Llr),e(K0,xlr),e(K0,Nz),e(Nz,$lr),e(K0,klr),e(N,Slr),e(N,Bs),e(Bs,B1e),e(B1e,Rlr),e(Bs,Plr),e(Bs,jz),e(jz,Blr),e(Bs,Ilr),e(Bs,Dz),e(Dz,qlr),e(Bs,Nlr),e(N,jlr),e(N,Z0),e(Z0,I1e),e(I1e,Dlr),e(Z0,Glr),e(Z0,Gz),e(Gz,Olr),e(Z0,Vlr),e(N,Xlr),e(N,eT),e(eT,q1e),e(q1e,zlr),e(eT,Wlr),e(eT,Oz),e(Oz,Qlr),e(eT,Hlr),e(N,Ulr),e(N,oT),e(oT,N1e),e(N1e,Jlr),e(oT,Ylr),e(oT,Vz),e(Vz,Klr),e(oT,Zlr),e(N,eir),e(N,rT),e(rT,j1e),e(j1e,oir),e(rT,rir),e(rT,Xz),e(Xz,tir),e(rT,air),e(N,nir),e(N,tT),e(tT,D1e),e(D1e,sir),e(tT,lir),e(tT,zz),e(zz,iir),e(tT,dir),e(N,cir),e(N,aT),e(aT,G1e),e(G1e,fir),e(aT,mir),e(aT,Wz),e(Wz,gir),e(aT,hir),e(N,pir),e(N,nT),e(nT,O1e),e(O1e,uir),e(nT,_ir),e(nT,Qz),e(Qz,bir),e(nT,vir),e(N,Fir),e(N,sT),e(sT,V1e),e(V1e,Tir),e(sT,Mir),e(sT,Hz),e(Hz,Eir),e(sT,Cir),e(N,wir),e(N,lT),e(lT,X1e),e(X1e,Air),e(lT,yir),e(lT,Uz),e(Uz,Lir),e(lT,xir),e(N,$ir),e(N,iT),e(iT,z1e),e(z1e,kir),e(iT,Sir),e(iT,Jz),e(Jz,Rir),e(iT,Pir),e(N,Bir),e(N,dT),e(dT,W1e),e(W1e,Iir),e(dT,qir),e(dT,Yz),e(Yz,Nir),e(dT,jir),e(N,Dir),e(N,cT),e(cT,Q1e),e(Q1e,Gir),e(cT,Oir),e(cT,Kz),e(Kz,Vir),e(cT,Xir),e(N,zir),e(N,fT),e(fT,H1e),e(H1e,Wir),e(fT,Qir),e(fT,Zz),e(Zz,Hir),e(fT,Uir),e(N,Jir),e(N,mT),e(mT,U1e),e(U1e,Yir),e(mT,Kir),e(mT,eW),e(eW,Zir),e(mT,edr),e(N,odr),e(N,gT),e(gT,J1e),e(J1e,rdr),e(gT,tdr),e(gT,oW),e(oW,adr),e(gT,ndr),e(N,sdr),e(N,hT),e(hT,Y1e),e(Y1e,ldr),e(hT,idr),e(hT,rW),e(rW,ddr),e(hT,cdr),e(N,fdr),e(N,pT),e(pT,K1e),e(K1e,mdr),e(pT,gdr),e(pT,tW),e(tW,hdr),e(pT,pdr),e(N,udr),e(N,uT),e(uT,Z1e),e(Z1e,_dr),e(uT,bdr),e(uT,aW),e(aW,vdr),e(uT,Fdr),e(N,Tdr),e(N,_T),e(_T,ebe),e(ebe,Mdr),e(_T,Edr),e(_T,nW),e(nW,Cdr),e(_T,wdr),e(N,Adr),e(N,bT),e(bT,obe),e(obe,ydr),e(bT,Ldr),e(bT,sW),e(sW,xdr),e(bT,$dr),e(N,kdr),e(N,vT),e(vT,rbe),e(rbe,Sdr),e(vT,Rdr),e(vT,lW),e(lW,Pdr),e(vT,Bdr),e(N,Idr),e(N,FT),e(FT,tbe),e(tbe,qdr),e(FT,Ndr),e(FT,iW),e(iW,jdr),e(FT,Ddr),e(N,Gdr),e(N,TT),e(TT,abe),e(abe,Odr),e(TT,Vdr),e(TT,dW),e(dW,Xdr),e(TT,zdr),e(N,Wdr),e(N,MT),e(MT,nbe),e(nbe,Qdr),e(MT,Hdr),e(MT,cW),e(cW,Udr),e(MT,Jdr),e(N,Ydr),e(N,ET),e(ET,sbe),e(sbe,Kdr),e(ET,Zdr),e(ET,fW),e(fW,ecr),e(ET,ocr),e(N,rcr),e(N,CT),e(CT,lbe),e(lbe,tcr),e(CT,acr),e(CT,mW),e(mW,ncr),e(CT,scr),e(N,lcr),e(N,wT),e(wT,ibe),e(ibe,icr),e(wT,dcr),e(wT,gW),e(gW,ccr),e(wT,fcr),e(N,mcr),e(N,AT),e(AT,dbe),e(dbe,gcr),e(AT,hcr),e(AT,hW),e(hW,pcr),e(AT,ucr),e(wr,_cr),M(yT,wr,null),b(f,Iqe,_),b(f,Vd,_),e(Vd,LT),e(LT,cbe),M(HL,cbe,null),e(Vd,bcr),e(Vd,fbe),e(fbe,vcr),b(f,qqe,_),b(f,Ko,_),M(UL,Ko,null),e(Ko,Fcr),e(Ko,Xd),e(Xd,Tcr),e(Xd,pW),e(pW,Mcr),e(Xd,Ecr),e(Xd,uW),e(uW,Ccr),e(Xd,wcr),e(Ko,Acr),e(Ko,JL),e(JL,ycr),e(JL,mbe),e(mbe,Lcr),e(JL,xcr),e(Ko,$cr),e(Ko,Lt),M(YL,Lt,null),e(Lt,kcr),e(Lt,gbe),e(gbe,Scr),e(Lt,Rcr),e(Lt,zd),e(zd,Pcr),e(zd,hbe),e(hbe,Bcr),e(zd,Icr),e(zd,_W),e(_W,qcr),e(zd,Ncr),e(Lt,jcr),M(xT,Lt,null),e(Ko,Dcr),e(Ko,Ar),M(KL,Ar,null),e(Ar,Gcr),e(Ar,pbe),e(pbe,Ocr),e(Ar,Vcr),e(Ar,Za),e(Za,Xcr),e(Za,ube),e(ube,zcr),e(Za,Wcr),e(Za,_be),e(_be,Qcr),e(Za,Hcr),e(Za,bbe),e(bbe,Ucr),e(Za,Jcr),e(Ar,Ycr),e(Ar,se),e(se,$T),e($T,vbe),e(vbe,Kcr),e($T,Zcr),e($T,bW),e(bW,efr),e($T,ofr),e(se,rfr),e(se,kT),e(kT,Fbe),e(Fbe,tfr),e(kT,afr),e(kT,vW),e(vW,nfr),e(kT,sfr),e(se,lfr),e(se,ST),e(ST,Tbe),e(Tbe,ifr),e(ST,dfr),e(ST,FW),e(FW,cfr),e(ST,ffr),e(se,mfr),e(se,RT),e(RT,Mbe),e(Mbe,gfr),e(RT,hfr),e(RT,TW),e(TW,pfr),e(RT,ufr),e(se,_fr),e(se,PT),e(PT,Ebe),e(Ebe,bfr),e(PT,vfr),e(PT,MW),e(MW,Ffr),e(PT,Tfr),e(se,Mfr),e(se,BT),e(BT,Cbe),e(Cbe,Efr),e(BT,Cfr),e(BT,EW),e(EW,wfr),e(BT,Afr),e(se,yfr),e(se,IT),e(IT,wbe),e(wbe,Lfr),e(IT,xfr),e(IT,CW),e(CW,$fr),e(IT,kfr),e(se,Sfr),e(se,qT),e(qT,Abe),e(Abe,Rfr),e(qT,Pfr),e(qT,wW),e(wW,Bfr),e(qT,Ifr),e(se,qfr),e(se,NT),e(NT,ybe),e(ybe,Nfr),e(NT,jfr),e(NT,AW),e(AW,Dfr),e(NT,Gfr),e(se,Ofr),e(se,jT),e(jT,Lbe),e(Lbe,Vfr),e(jT,Xfr),e(jT,yW),e(yW,zfr),e(jT,Wfr),e(se,Qfr),e(se,DT),e(DT,xbe),e(xbe,Hfr),e(DT,Ufr),e(DT,LW),e(LW,Jfr),e(DT,Yfr),e(se,Kfr),e(se,GT),e(GT,$be),e($be,Zfr),e(GT,emr),e(GT,xW),e(xW,omr),e(GT,rmr),e(se,tmr),e(se,OT),e(OT,kbe),e(kbe,amr),e(OT,nmr),e(OT,$W),e($W,smr),e(OT,lmr),e(se,imr),e(se,VT),e(VT,Sbe),e(Sbe,dmr),e(VT,cmr),e(VT,kW),e(kW,fmr),e(VT,mmr),e(se,gmr),e(se,XT),e(XT,Rbe),e(Rbe,hmr),e(XT,pmr),e(XT,SW),e(SW,umr),e(XT,_mr),e(se,bmr),e(se,zT),e(zT,Pbe),e(Pbe,vmr),e(zT,Fmr),e(zT,RW),e(RW,Tmr),e(zT,Mmr),e(se,Emr),e(se,WT),e(WT,Bbe),e(Bbe,Cmr),e(WT,wmr),e(WT,PW),e(PW,Amr),e(WT,ymr),e(se,Lmr),e(se,QT),e(QT,Ibe),e(Ibe,xmr),e(QT,$mr),e(QT,BW),e(BW,kmr),e(QT,Smr),e(se,Rmr),e(se,HT),e(HT,qbe),e(qbe,Pmr),e(HT,Bmr),e(HT,IW),e(IW,Imr),e(HT,qmr),e(se,Nmr),e(se,UT),e(UT,Nbe),e(Nbe,jmr),e(UT,Dmr),e(UT,qW),e(qW,Gmr),e(UT,Omr),e(se,Vmr),e(se,JT),e(JT,jbe),e(jbe,Xmr),e(JT,zmr),e(JT,NW),e(NW,Wmr),e(JT,Qmr),e(se,Hmr),e(se,YT),e(YT,Dbe),e(Dbe,Umr),e(YT,Jmr),e(YT,jW),e(jW,Ymr),e(YT,Kmr),e(se,Zmr),e(se,KT),e(KT,Gbe),e(Gbe,egr),e(KT,ogr),e(KT,DW),e(DW,rgr),e(KT,tgr),e(Ar,agr),M(ZT,Ar,null),b(f,Nqe,_),b(f,Wd,_),e(Wd,e7),e(e7,Obe),M(ZL,Obe,null),e(Wd,ngr),e(Wd,Vbe),e(Vbe,sgr),b(f,jqe,_),b(f,Zo,_),M(e8,Zo,null),e(Zo,lgr),e(Zo,Qd),e(Qd,igr),e(Qd,GW),e(GW,dgr),e(Qd,cgr),e(Qd,OW),e(OW,fgr),e(Qd,mgr),e(Zo,ggr),e(Zo,o8),e(o8,hgr),e(o8,Xbe),e(Xbe,pgr),e(o8,ugr),e(Zo,_gr),e(Zo,xt),M(r8,xt,null),e(xt,bgr),e(xt,zbe),e(zbe,vgr),e(xt,Fgr),e(xt,Hd),e(Hd,Tgr),e(Hd,Wbe),e(Wbe,Mgr),e(Hd,Egr),e(Hd,VW),e(VW,Cgr),e(Hd,wgr),e(xt,Agr),M(o7,xt,null),e(Zo,ygr),e(Zo,yr),M(t8,yr,null),e(yr,Lgr),e(yr,Qbe),e(Qbe,xgr),e(yr,$gr),e(yr,en),e(en,kgr),e(en,Hbe),e(Hbe,Sgr),e(en,Rgr),e(en,Ube),e(Ube,Pgr),e(en,Bgr),e(en,Jbe),e(Jbe,Igr),e(en,qgr),e(yr,Ngr),e(yr,Te),e(Te,r7),e(r7,Ybe),e(Ybe,jgr),e(r7,Dgr),e(r7,XW),e(XW,Ggr),e(r7,Ogr),e(Te,Vgr),e(Te,t7),e(t7,Kbe),e(Kbe,Xgr),e(t7,zgr),e(t7,zW),e(zW,Wgr),e(t7,Qgr),e(Te,Hgr),e(Te,a7),e(a7,Zbe),e(Zbe,Ugr),e(a7,Jgr),e(a7,WW),e(WW,Ygr),e(a7,Kgr),e(Te,Zgr),e(Te,n7),e(n7,e2e),e(e2e,ehr),e(n7,ohr),e(n7,QW),e(QW,rhr),e(n7,thr),e(Te,ahr),e(Te,s7),e(s7,o2e),e(o2e,nhr),e(s7,shr),e(s7,HW),e(HW,lhr),e(s7,ihr),e(Te,dhr),e(Te,l7),e(l7,r2e),e(r2e,chr),e(l7,fhr),e(l7,UW),e(UW,mhr),e(l7,ghr),e(Te,hhr),e(Te,i7),e(i7,t2e),e(t2e,phr),e(i7,uhr),e(i7,JW),e(JW,_hr),e(i7,bhr),e(Te,vhr),e(Te,d7),e(d7,a2e),e(a2e,Fhr),e(d7,Thr),e(d7,YW),e(YW,Mhr),e(d7,Ehr),e(Te,Chr),e(Te,c7),e(c7,n2e),e(n2e,whr),e(c7,Ahr),e(c7,KW),e(KW,yhr),e(c7,Lhr),e(Te,xhr),e(Te,f7),e(f7,s2e),e(s2e,$hr),e(f7,khr),e(f7,ZW),e(ZW,Shr),e(f7,Rhr),e(Te,Phr),e(Te,m7),e(m7,l2e),e(l2e,Bhr),e(m7,Ihr),e(m7,eQ),e(eQ,qhr),e(m7,Nhr),e(Te,jhr),e(Te,g7),e(g7,i2e),e(i2e,Dhr),e(g7,Ghr),e(g7,oQ),e(oQ,Ohr),e(g7,Vhr),e(yr,Xhr),M(h7,yr,null),b(f,Dqe,_),b(f,Ud,_),e(Ud,p7),e(p7,d2e),M(a8,d2e,null),e(Ud,zhr),e(Ud,c2e),e(c2e,Whr),b(f,Gqe,_),b(f,er,_),M(n8,er,null),e(er,Qhr),e(er,Jd),e(Jd,Hhr),e(Jd,rQ),e(rQ,Uhr),e(Jd,Jhr),e(Jd,tQ),e(tQ,Yhr),e(Jd,Khr),e(er,Zhr),e(er,s8),e(s8,epr),e(s8,f2e),e(f2e,opr),e(s8,rpr),e(er,tpr),e(er,$t),M(l8,$t,null),e($t,apr),e($t,m2e),e(m2e,npr),e($t,spr),e($t,Yd),e(Yd,lpr),e(Yd,g2e),e(g2e,ipr),e(Yd,dpr),e(Yd,aQ),e(aQ,cpr),e(Yd,fpr),e($t,mpr),M(u7,$t,null),e(er,gpr),e(er,Lr),M(i8,Lr,null),e(Lr,hpr),e(Lr,h2e),e(h2e,ppr),e(Lr,upr),e(Lr,on),e(on,_pr),e(on,p2e),e(p2e,bpr),e(on,vpr),e(on,u2e),e(u2e,Fpr),e(on,Tpr),e(on,_2e),e(_2e,Mpr),e(on,Epr),e(Lr,Cpr),e(Lr,rn),e(rn,_7),e(_7,b2e),e(b2e,wpr),e(_7,Apr),e(_7,nQ),e(nQ,ypr),e(_7,Lpr),e(rn,xpr),e(rn,b7),e(b7,v2e),e(v2e,$pr),e(b7,kpr),e(b7,sQ),e(sQ,Spr),e(b7,Rpr),e(rn,Ppr),e(rn,v7),e(v7,F2e),e(F2e,Bpr),e(v7,Ipr),e(v7,lQ),e(lQ,qpr),e(v7,Npr),e(rn,jpr),e(rn,F7),e(F7,T2e),e(T2e,Dpr),e(F7,Gpr),e(F7,iQ),e(iQ,Opr),e(F7,Vpr),e(Lr,Xpr),M(T7,Lr,null),b(f,Oqe,_),b(f,Kd,_),e(Kd,M7),e(M7,M2e),M(d8,M2e,null),e(Kd,zpr),e(Kd,E2e),e(E2e,Wpr),b(f,Vqe,_),b(f,or,_),M(c8,or,null),e(or,Qpr),e(or,Zd),e(Zd,Hpr),e(Zd,dQ),e(dQ,Upr),e(Zd,Jpr),e(Zd,cQ),e(cQ,Ypr),e(Zd,Kpr),e(or,Zpr),e(or,f8),e(f8,eur),e(f8,C2e),e(C2e,our),e(f8,rur),e(or,tur),e(or,kt),M(m8,kt,null),e(kt,aur),e(kt,w2e),e(w2e,nur),e(kt,sur),e(kt,ec),e(ec,lur),e(ec,A2e),e(A2e,iur),e(ec,dur),e(ec,fQ),e(fQ,cur),e(ec,fur),e(kt,mur),M(E7,kt,null),e(or,gur),e(or,xr),M(g8,xr,null),e(xr,hur),e(xr,y2e),e(y2e,pur),e(xr,uur),e(xr,tn),e(tn,_ur),e(tn,L2e),e(L2e,bur),e(tn,vur),e(tn,x2e),e(x2e,Fur),e(tn,Tur),e(tn,$2e),e($2e,Mur),e(tn,Eur),e(xr,Cur),e(xr,ie),e(ie,C7),e(C7,k2e),e(k2e,wur),e(C7,Aur),e(C7,mQ),e(mQ,yur),e(C7,Lur),e(ie,xur),e(ie,w7),e(w7,S2e),e(S2e,$ur),e(w7,kur),e(w7,gQ),e(gQ,Sur),e(w7,Rur),e(ie,Pur),e(ie,A7),e(A7,R2e),e(R2e,Bur),e(A7,Iur),e(A7,hQ),e(hQ,qur),e(A7,Nur),e(ie,jur),e(ie,y7),e(y7,P2e),e(P2e,Dur),e(y7,Gur),e(y7,pQ),e(pQ,Our),e(y7,Vur),e(ie,Xur),e(ie,L7),e(L7,B2e),e(B2e,zur),e(L7,Wur),e(L7,uQ),e(uQ,Qur),e(L7,Hur),e(ie,Uur),e(ie,x7),e(x7,I2e),e(I2e,Jur),e(x7,Yur),e(x7,_Q),e(_Q,Kur),e(x7,Zur),e(ie,e_r),e(ie,$7),e($7,q2e),e(q2e,o_r),e($7,r_r),e($7,bQ),e(bQ,t_r),e($7,a_r),e(ie,n_r),e(ie,k7),e(k7,N2e),e(N2e,s_r),e(k7,l_r),e(k7,vQ),e(vQ,i_r),e(k7,d_r),e(ie,c_r),e(ie,S7),e(S7,j2e),e(j2e,f_r),e(S7,m_r),e(S7,FQ),e(FQ,g_r),e(S7,h_r),e(ie,p_r),e(ie,R7),e(R7,D2e),e(D2e,u_r),e(R7,__r),e(R7,TQ),e(TQ,b_r),e(R7,v_r),e(ie,F_r),e(ie,P7),e(P7,G2e),e(G2e,T_r),e(P7,M_r),e(P7,MQ),e(MQ,E_r),e(P7,C_r),e(ie,w_r),e(ie,B7),e(B7,O2e),e(O2e,A_r),e(B7,y_r),e(B7,EQ),e(EQ,L_r),e(B7,x_r),e(ie,$_r),e(ie,I7),e(I7,V2e),e(V2e,k_r),e(I7,S_r),e(I7,CQ),e(CQ,R_r),e(I7,P_r),e(ie,B_r),e(ie,q7),e(q7,X2e),e(X2e,I_r),e(q7,q_r),e(q7,wQ),e(wQ,N_r),e(q7,j_r),e(ie,D_r),e(ie,N7),e(N7,z2e),e(z2e,G_r),e(N7,O_r),e(N7,AQ),e(AQ,V_r),e(N7,X_r),e(ie,z_r),e(ie,j7),e(j7,W2e),e(W2e,W_r),e(j7,Q_r),e(j7,yQ),e(yQ,H_r),e(j7,U_r),e(ie,J_r),e(ie,D7),e(D7,Q2e),e(Q2e,Y_r),e(D7,K_r),e(D7,LQ),e(LQ,Z_r),e(D7,e1r),e(ie,o1r),e(ie,G7),e(G7,H2e),e(H2e,r1r),e(G7,t1r),e(G7,xQ),e(xQ,a1r),e(G7,n1r),e(ie,s1r),e(ie,O7),e(O7,U2e),e(U2e,l1r),e(O7,i1r),e(O7,$Q),e($Q,d1r),e(O7,c1r),e(ie,f1r),e(ie,V7),e(V7,J2e),e(J2e,m1r),e(V7,g1r),e(V7,kQ),e(kQ,h1r),e(V7,p1r),e(xr,u1r),M(X7,xr,null),b(f,Xqe,_),b(f,oc,_),e(oc,z7),e(z7,Y2e),M(h8,Y2e,null),e(oc,_1r),e(oc,K2e),e(K2e,b1r),b(f,zqe,_),b(f,rr,_),M(p8,rr,null),e(rr,v1r),e(rr,rc),e(rc,F1r),e(rc,SQ),e(SQ,T1r),e(rc,M1r),e(rc,RQ),e(RQ,E1r),e(rc,C1r),e(rr,w1r),e(rr,u8),e(u8,A1r),e(u8,Z2e),e(Z2e,y1r),e(u8,L1r),e(rr,x1r),e(rr,St),M(_8,St,null),e(St,$1r),e(St,eve),e(eve,k1r),e(St,S1r),e(St,tc),e(tc,R1r),e(tc,ove),e(ove,P1r),e(tc,B1r),e(tc,PQ),e(PQ,I1r),e(tc,q1r),e(St,N1r),M(W7,St,null),e(rr,j1r),e(rr,$r),M(b8,$r,null),e($r,D1r),e($r,rve),e(rve,G1r),e($r,O1r),e($r,an),e(an,V1r),e(an,tve),e(tve,X1r),e(an,z1r),e(an,ave),e(ave,W1r),e(an,Q1r),e(an,nve),e(nve,H1r),e(an,U1r),e($r,J1r),e($r,ye),e(ye,Q7),e(Q7,sve),e(sve,Y1r),e(Q7,K1r),e(Q7,BQ),e(BQ,Z1r),e(Q7,ebr),e(ye,obr),e(ye,H7),e(H7,lve),e(lve,rbr),e(H7,tbr),e(H7,IQ),e(IQ,abr),e(H7,nbr),e(ye,sbr),e(ye,U7),e(U7,ive),e(ive,lbr),e(U7,ibr),e(U7,qQ),e(qQ,dbr),e(U7,cbr),e(ye,fbr),e(ye,J7),e(J7,dve),e(dve,mbr),e(J7,gbr),e(J7,NQ),e(NQ,hbr),e(J7,pbr),e(ye,ubr),e(ye,Y7),e(Y7,cve),e(cve,_br),e(Y7,bbr),e(Y7,jQ),e(jQ,vbr),e(Y7,Fbr),e(ye,Tbr),e(ye,K7),e(K7,fve),e(fve,Mbr),e(K7,Ebr),e(K7,DQ),e(DQ,Cbr),e(K7,wbr),e(ye,Abr),e(ye,Z7),e(Z7,mve),e(mve,ybr),e(Z7,Lbr),e(Z7,GQ),e(GQ,xbr),e(Z7,$br),e(ye,kbr),e(ye,eM),e(eM,gve),e(gve,Sbr),e(eM,Rbr),e(eM,OQ),e(OQ,Pbr),e(eM,Bbr),e(ye,Ibr),e(ye,oM),e(oM,hve),e(hve,qbr),e(oM,Nbr),e(oM,VQ),e(VQ,jbr),e(oM,Dbr),e(ye,Gbr),e(ye,rM),e(rM,pve),e(pve,Obr),e(rM,Vbr),e(rM,XQ),e(XQ,Xbr),e(rM,zbr),e($r,Wbr),M(tM,$r,null),b(f,Wqe,_),b(f,ac,_),e(ac,aM),e(aM,uve),M(v8,uve,null),e(ac,Qbr),e(ac,_ve),e(_ve,Hbr),b(f,Qqe,_),b(f,tr,_),M(F8,tr,null),e(tr,Ubr),e(tr,nc),e(nc,Jbr),e(nc,zQ),e(zQ,Ybr),e(nc,Kbr),e(nc,WQ),e(WQ,Zbr),e(nc,e2r),e(tr,o2r),e(tr,T8),e(T8,r2r),e(T8,bve),e(bve,t2r),e(T8,a2r),e(tr,n2r),e(tr,Rt),M(M8,Rt,null),e(Rt,s2r),e(Rt,vve),e(vve,l2r),e(Rt,i2r),e(Rt,sc),e(sc,d2r),e(sc,Fve),e(Fve,c2r),e(sc,f2r),e(sc,QQ),e(QQ,m2r),e(sc,g2r),e(Rt,h2r),M(nM,Rt,null),e(tr,p2r),e(tr,kr),M(E8,kr,null),e(kr,u2r),e(kr,Tve),e(Tve,_2r),e(kr,b2r),e(kr,nn),e(nn,v2r),e(nn,Mve),e(Mve,F2r),e(nn,T2r),e(nn,Eve),e(Eve,M2r),e(nn,E2r),e(nn,Cve),e(Cve,C2r),e(nn,w2r),e(kr,A2r),e(kr,ee),e(ee,sM),e(sM,wve),e(wve,y2r),e(sM,L2r),e(sM,HQ),e(HQ,x2r),e(sM,$2r),e(ee,k2r),e(ee,lM),e(lM,Ave),e(Ave,S2r),e(lM,R2r),e(lM,UQ),e(UQ,P2r),e(lM,B2r),e(ee,I2r),e(ee,iM),e(iM,yve),e(yve,q2r),e(iM,N2r),e(iM,JQ),e(JQ,j2r),e(iM,D2r),e(ee,G2r),e(ee,dM),e(dM,Lve),e(Lve,O2r),e(dM,V2r),e(dM,YQ),e(YQ,X2r),e(dM,z2r),e(ee,W2r),e(ee,cM),e(cM,xve),e(xve,Q2r),e(cM,H2r),e(cM,KQ),e(KQ,U2r),e(cM,J2r),e(ee,Y2r),e(ee,fM),e(fM,$ve),e($ve,K2r),e(fM,Z2r),e(fM,ZQ),e(ZQ,evr),e(fM,ovr),e(ee,rvr),e(ee,mM),e(mM,kve),e(kve,tvr),e(mM,avr),e(mM,eH),e(eH,nvr),e(mM,svr),e(ee,lvr),e(ee,gM),e(gM,Sve),e(Sve,ivr),e(gM,dvr),e(gM,oH),e(oH,cvr),e(gM,fvr),e(ee,mvr),e(ee,hM),e(hM,Rve),e(Rve,gvr),e(hM,hvr),e(hM,rH),e(rH,pvr),e(hM,uvr),e(ee,_vr),e(ee,pM),e(pM,Pve),e(Pve,bvr),e(pM,vvr),e(pM,tH),e(tH,Fvr),e(pM,Tvr),e(ee,Mvr),e(ee,uM),e(uM,Bve),e(Bve,Evr),e(uM,Cvr),e(uM,aH),e(aH,wvr),e(uM,Avr),e(ee,yvr),e(ee,_M),e(_M,Ive),e(Ive,Lvr),e(_M,xvr),e(_M,nH),e(nH,$vr),e(_M,kvr),e(ee,Svr),e(ee,bM),e(bM,qve),e(qve,Rvr),e(bM,Pvr),e(bM,sH),e(sH,Bvr),e(bM,Ivr),e(ee,qvr),e(ee,vM),e(vM,Nve),e(Nve,Nvr),e(vM,jvr),e(vM,lH),e(lH,Dvr),e(vM,Gvr),e(ee,Ovr),e(ee,FM),e(FM,jve),e(jve,Vvr),e(FM,Xvr),e(FM,iH),e(iH,zvr),e(FM,Wvr),e(ee,Qvr),e(ee,TM),e(TM,Dve),e(Dve,Hvr),e(TM,Uvr),e(TM,dH),e(dH,Jvr),e(TM,Yvr),e(ee,Kvr),e(ee,MM),e(MM,Gve),e(Gve,Zvr),e(MM,e3r),e(MM,cH),e(cH,o3r),e(MM,r3r),e(ee,t3r),e(ee,EM),e(EM,Ove),e(Ove,a3r),e(EM,n3r),e(EM,fH),e(fH,s3r),e(EM,l3r),e(ee,i3r),e(ee,CM),e(CM,Vve),e(Vve,d3r),e(CM,c3r),e(CM,mH),e(mH,f3r),e(CM,m3r),e(ee,g3r),e(ee,wM),e(wM,Xve),e(Xve,h3r),e(wM,p3r),e(wM,gH),e(gH,u3r),e(wM,_3r),e(ee,b3r),e(ee,AM),e(AM,zve),e(zve,v3r),e(AM,F3r),e(AM,hH),e(hH,T3r),e(AM,M3r),e(ee,E3r),e(ee,yM),e(yM,Wve),e(Wve,C3r),e(yM,w3r),e(yM,pH),e(pH,A3r),e(yM,y3r),e(ee,L3r),e(ee,LM),e(LM,Qve),e(Qve,x3r),e(LM,$3r),e(LM,uH),e(uH,k3r),e(LM,S3r),e(ee,R3r),e(ee,xM),e(xM,Hve),e(Hve,P3r),e(xM,B3r),e(xM,_H),e(_H,I3r),e(xM,q3r),e(ee,N3r),e(ee,$M),e($M,Uve),e(Uve,j3r),e($M,D3r),e($M,bH),e(bH,G3r),e($M,O3r),e(ee,V3r),e(ee,kM),e(kM,Jve),e(Jve,X3r),e(kM,z3r),e(kM,vH),e(vH,W3r),e(kM,Q3r),e(kr,H3r),M(SM,kr,null),b(f,Hqe,_),b(f,lc,_),e(lc,RM),e(RM,Yve),M(C8,Yve,null),e(lc,U3r),e(lc,Kve),e(Kve,J3r),b(f,Uqe,_),b(f,ar,_),M(w8,ar,null),e(ar,Y3r),e(ar,ic),e(ic,K3r),e(ic,FH),e(FH,Z3r),e(ic,eFr),e(ic,TH),e(TH,oFr),e(ic,rFr),e(ar,tFr),e(ar,A8),e(A8,aFr),e(A8,Zve),e(Zve,nFr),e(A8,sFr),e(ar,lFr),e(ar,Pt),M(y8,Pt,null),e(Pt,iFr),e(Pt,e3e),e(e3e,dFr),e(Pt,cFr),e(Pt,dc),e(dc,fFr),e(dc,o3e),e(o3e,mFr),e(dc,gFr),e(dc,MH),e(MH,hFr),e(dc,pFr),e(Pt,uFr),M(PM,Pt,null),e(ar,_Fr),e(ar,Sr),M(L8,Sr,null),e(Sr,bFr),e(Sr,r3e),e(r3e,vFr),e(Sr,FFr),e(Sr,sn),e(sn,TFr),e(sn,t3e),e(t3e,MFr),e(sn,EFr),e(sn,a3e),e(a3e,CFr),e(sn,wFr),e(sn,n3e),e(n3e,AFr),e(sn,yFr),e(Sr,LFr),e(Sr,he),e(he,BM),e(BM,s3e),e(s3e,xFr),e(BM,$Fr),e(BM,EH),e(EH,kFr),e(BM,SFr),e(he,RFr),e(he,IM),e(IM,l3e),e(l3e,PFr),e(IM,BFr),e(IM,CH),e(CH,IFr),e(IM,qFr),e(he,NFr),e(he,qM),e(qM,i3e),e(i3e,jFr),e(qM,DFr),e(qM,wH),e(wH,GFr),e(qM,OFr),e(he,VFr),e(he,NM),e(NM,d3e),e(d3e,XFr),e(NM,zFr),e(NM,AH),e(AH,WFr),e(NM,QFr),e(he,HFr),e(he,jM),e(jM,c3e),e(c3e,UFr),e(jM,JFr),e(jM,yH),e(yH,YFr),e(jM,KFr),e(he,ZFr),e(he,DM),e(DM,f3e),e(f3e,e0r),e(DM,o0r),e(DM,LH),e(LH,r0r),e(DM,t0r),e(he,a0r),e(he,GM),e(GM,m3e),e(m3e,n0r),e(GM,s0r),e(GM,xH),e(xH,l0r),e(GM,i0r),e(he,d0r),e(he,OM),e(OM,g3e),e(g3e,c0r),e(OM,f0r),e(OM,$H),e($H,m0r),e(OM,g0r),e(he,h0r),e(he,VM),e(VM,h3e),e(h3e,p0r),e(VM,u0r),e(VM,kH),e(kH,_0r),e(VM,b0r),e(he,v0r),e(he,XM),e(XM,p3e),e(p3e,F0r),e(XM,T0r),e(XM,SH),e(SH,M0r),e(XM,E0r),e(he,C0r),e(he,zM),e(zM,u3e),e(u3e,w0r),e(zM,A0r),e(zM,RH),e(RH,y0r),e(zM,L0r),e(he,x0r),e(he,WM),e(WM,_3e),e(_3e,$0r),e(WM,k0r),e(WM,PH),e(PH,S0r),e(WM,R0r),e(he,P0r),e(he,QM),e(QM,b3e),e(b3e,B0r),e(QM,I0r),e(QM,BH),e(BH,q0r),e(QM,N0r),e(he,j0r),e(he,HM),e(HM,v3e),e(v3e,D0r),e(HM,G0r),e(HM,IH),e(IH,O0r),e(HM,V0r),e(he,X0r),e(he,UM),e(UM,F3e),e(F3e,z0r),e(UM,W0r),e(UM,qH),e(qH,Q0r),e(UM,H0r),e(he,U0r),e(he,JM),e(JM,T3e),e(T3e,J0r),e(JM,Y0r),e(JM,NH),e(NH,K0r),e(JM,Z0r),e(he,eTr),e(he,YM),e(YM,M3e),e(M3e,oTr),e(YM,rTr),e(YM,jH),e(jH,tTr),e(YM,aTr),e(Sr,nTr),M(KM,Sr,null),b(f,Jqe,_),b(f,cc,_),e(cc,ZM),e(ZM,E3e),M(x8,E3e,null),e(cc,sTr),e(cc,C3e),e(C3e,lTr),b(f,Yqe,_),b(f,nr,_),M($8,nr,null),e(nr,iTr),e(nr,fc),e(fc,dTr),e(fc,DH),e(DH,cTr),e(fc,fTr),e(fc,GH),e(GH,mTr),e(fc,gTr),e(nr,hTr),e(nr,k8),e(k8,pTr),e(k8,w3e),e(w3e,uTr),e(k8,_Tr),e(nr,bTr),e(nr,Bt),M(S8,Bt,null),e(Bt,vTr),e(Bt,A3e),e(A3e,FTr),e(Bt,TTr),e(Bt,mc),e(mc,MTr),e(mc,y3e),e(y3e,ETr),e(mc,CTr),e(mc,OH),e(OH,wTr),e(mc,ATr),e(Bt,yTr),M(e4,Bt,null),e(nr,LTr),e(nr,Rr),M(R8,Rr,null),e(Rr,xTr),e(Rr,L3e),e(L3e,$Tr),e(Rr,kTr),e(Rr,ln),e(ln,STr),e(ln,x3e),e(x3e,RTr),e(ln,PTr),e(ln,$3e),e($3e,BTr),e(ln,ITr),e(ln,k3e),e(k3e,qTr),e(ln,NTr),e(Rr,jTr),e(Rr,P8),e(P8,o4),e(o4,S3e),e(S3e,DTr),e(o4,GTr),e(o4,VH),e(VH,OTr),e(o4,VTr),e(P8,XTr),e(P8,r4),e(r4,R3e),e(R3e,zTr),e(r4,WTr),e(r4,XH),e(XH,QTr),e(r4,HTr),e(Rr,UTr),M(t4,Rr,null),b(f,Kqe,_),b(f,gc,_),e(gc,a4),e(a4,P3e),M(B8,P3e,null),e(gc,JTr),e(gc,B3e),e(B3e,YTr),b(f,Zqe,_),b(f,sr,_),M(I8,sr,null),e(sr,KTr),e(sr,hc),e(hc,ZTr),e(hc,zH),e(zH,e7r),e(hc,o7r),e(hc,WH),e(WH,r7r),e(hc,t7r),e(sr,a7r),e(sr,q8),e(q8,n7r),e(q8,I3e),e(I3e,s7r),e(q8,l7r),e(sr,i7r),e(sr,It),M(N8,It,null),e(It,d7r),e(It,q3e),e(q3e,c7r),e(It,f7r),e(It,pc),e(pc,m7r),e(pc,N3e),e(N3e,g7r),e(pc,h7r),e(pc,QH),e(QH,p7r),e(pc,u7r),e(It,_7r),M(n4,It,null),e(sr,b7r),e(sr,Pr),M(j8,Pr,null),e(Pr,v7r),e(Pr,j3e),e(j3e,F7r),e(Pr,T7r),e(Pr,dn),e(dn,M7r),e(dn,D3e),e(D3e,E7r),e(dn,C7r),e(dn,G3e),e(G3e,w7r),e(dn,A7r),e(dn,O3e),e(O3e,y7r),e(dn,L7r),e(Pr,x7r),e(Pr,V3e),e(V3e,s4),e(s4,X3e),e(X3e,$7r),e(s4,k7r),e(s4,HH),e(HH,S7r),e(s4,R7r),e(Pr,P7r),M(l4,Pr,null),b(f,eNe,_),b(f,uc,_),e(uc,i4),e(i4,z3e),M(D8,z3e,null),e(uc,B7r),e(uc,W3e),e(W3e,I7r),b(f,oNe,_),b(f,lr,_),M(G8,lr,null),e(lr,q7r),e(lr,_c),e(_c,N7r),e(_c,UH),e(UH,j7r),e(_c,D7r),e(_c,JH),e(JH,G7r),e(_c,O7r),e(lr,V7r),e(lr,O8),e(O8,X7r),e(O8,Q3e),e(Q3e,z7r),e(O8,W7r),e(lr,Q7r),e(lr,qt),M(V8,qt,null),e(qt,H7r),e(qt,H3e),e(H3e,U7r),e(qt,J7r),e(qt,bc),e(bc,Y7r),e(bc,U3e),e(U3e,K7r),e(bc,Z7r),e(bc,YH),e(YH,eMr),e(bc,oMr),e(qt,rMr),M(d4,qt,null),e(lr,tMr),e(lr,Br),M(X8,Br,null),e(Br,aMr),e(Br,J3e),e(J3e,nMr),e(Br,sMr),e(Br,cn),e(cn,lMr),e(cn,Y3e),e(Y3e,iMr),e(cn,dMr),e(cn,K3e),e(K3e,cMr),e(cn,fMr),e(cn,Z3e),e(Z3e,mMr),e(cn,gMr),e(Br,hMr),e(Br,de),e(de,c4),e(c4,eFe),e(eFe,pMr),e(c4,uMr),e(c4,KH),e(KH,_Mr),e(c4,bMr),e(de,vMr),e(de,f4),e(f4,oFe),e(oFe,FMr),e(f4,TMr),e(f4,ZH),e(ZH,MMr),e(f4,EMr),e(de,CMr),e(de,m4),e(m4,rFe),e(rFe,wMr),e(m4,AMr),e(m4,eU),e(eU,yMr),e(m4,LMr),e(de,xMr),e(de,g4),e(g4,tFe),e(tFe,$Mr),e(g4,kMr),e(g4,oU),e(oU,SMr),e(g4,RMr),e(de,PMr),e(de,h4),e(h4,aFe),e(aFe,BMr),e(h4,IMr),e(h4,rU),e(rU,qMr),e(h4,NMr),e(de,jMr),e(de,p4),e(p4,nFe),e(nFe,DMr),e(p4,GMr),e(p4,tU),e(tU,OMr),e(p4,VMr),e(de,XMr),e(de,u4),e(u4,sFe),e(sFe,zMr),e(u4,WMr),e(u4,aU),e(aU,QMr),e(u4,HMr),e(de,UMr),e(de,_4),e(_4,lFe),e(lFe,JMr),e(_4,YMr),e(_4,nU),e(nU,KMr),e(_4,ZMr),e(de,e4r),e(de,b4),e(b4,iFe),e(iFe,o4r),e(b4,r4r),e(b4,sU),e(sU,t4r),e(b4,a4r),e(de,n4r),e(de,v4),e(v4,dFe),e(dFe,s4r),e(v4,l4r),e(v4,lU),e(lU,i4r),e(v4,d4r),e(de,c4r),e(de,F4),e(F4,cFe),e(cFe,f4r),e(F4,m4r),e(F4,iU),e(iU,g4r),e(F4,h4r),e(de,p4r),e(de,T4),e(T4,fFe),e(fFe,u4r),e(T4,_4r),e(T4,dU),e(dU,b4r),e(T4,v4r),e(de,F4r),e(de,M4),e(M4,mFe),e(mFe,T4r),e(M4,M4r),e(M4,cU),e(cU,E4r),e(M4,C4r),e(de,w4r),e(de,E4),e(E4,gFe),e(gFe,A4r),e(E4,y4r),e(E4,fU),e(fU,L4r),e(E4,x4r),e(de,$4r),e(de,C4),e(C4,hFe),e(hFe,k4r),e(C4,S4r),e(C4,mU),e(mU,R4r),e(C4,P4r),e(de,B4r),e(de,w4),e(w4,pFe),e(pFe,I4r),e(w4,q4r),e(w4,gU),e(gU,N4r),e(w4,j4r),e(de,D4r),e(de,A4),e(A4,uFe),e(uFe,G4r),e(A4,O4r),e(A4,hU),e(hU,V4r),e(A4,X4r),e(de,z4r),e(de,y4),e(y4,_Fe),e(_Fe,W4r),e(y4,Q4r),e(y4,pU),e(pU,H4r),e(y4,U4r),e(de,J4r),e(de,L4),e(L4,bFe),e(bFe,Y4r),e(L4,K4r),e(L4,uU),e(uU,Z4r),e(L4,eEr),e(de,oEr),e(de,x4),e(x4,vFe),e(vFe,rEr),e(x4,tEr),e(x4,_U),e(_U,aEr),e(x4,nEr),e(Br,sEr),M($4,Br,null),b(f,rNe,_),b(f,vc,_),e(vc,k4),e(k4,FFe),M(z8,FFe,null),e(vc,lEr),e(vc,TFe),e(TFe,iEr),b(f,tNe,_),b(f,ir,_),M(W8,ir,null),e(ir,dEr),e(ir,Fc),e(Fc,cEr),e(Fc,bU),e(bU,fEr),e(Fc,mEr),e(Fc,vU),e(vU,gEr),e(Fc,hEr),e(ir,pEr),e(ir,Q8),e(Q8,uEr),e(Q8,MFe),e(MFe,_Er),e(Q8,bEr),e(ir,vEr),e(ir,Nt),M(H8,Nt,null),e(Nt,FEr),e(Nt,EFe),e(EFe,TEr),e(Nt,MEr),e(Nt,Tc),e(Tc,EEr),e(Tc,CFe),e(CFe,CEr),e(Tc,wEr),e(Tc,FU),e(FU,AEr),e(Tc,yEr),e(Nt,LEr),M(S4,Nt,null),e(ir,xEr),e(ir,Ir),M(U8,Ir,null),e(Ir,$Er),e(Ir,wFe),e(wFe,kEr),e(Ir,SEr),e(Ir,fn),e(fn,REr),e(fn,AFe),e(AFe,PEr),e(fn,BEr),e(fn,yFe),e(yFe,IEr),e(fn,qEr),e(fn,LFe),e(LFe,NEr),e(fn,jEr),e(Ir,DEr),e(Ir,ce),e(ce,R4),e(R4,xFe),e(xFe,GEr),e(R4,OEr),e(R4,TU),e(TU,VEr),e(R4,XEr),e(ce,zEr),e(ce,P4),e(P4,$Fe),e($Fe,WEr),e(P4,QEr),e(P4,MU),e(MU,HEr),e(P4,UEr),e(ce,JEr),e(ce,B4),e(B4,kFe),e(kFe,YEr),e(B4,KEr),e(B4,EU),e(EU,ZEr),e(B4,eCr),e(ce,oCr),e(ce,I4),e(I4,SFe),e(SFe,rCr),e(I4,tCr),e(I4,CU),e(CU,aCr),e(I4,nCr),e(ce,sCr),e(ce,q4),e(q4,RFe),e(RFe,lCr),e(q4,iCr),e(q4,wU),e(wU,dCr),e(q4,cCr),e(ce,fCr),e(ce,N4),e(N4,PFe),e(PFe,mCr),e(N4,gCr),e(N4,AU),e(AU,hCr),e(N4,pCr),e(ce,uCr),e(ce,j4),e(j4,BFe),e(BFe,_Cr),e(j4,bCr),e(j4,yU),e(yU,vCr),e(j4,FCr),e(ce,TCr),e(ce,D4),e(D4,IFe),e(IFe,MCr),e(D4,ECr),e(D4,LU),e(LU,CCr),e(D4,wCr),e(ce,ACr),e(ce,G4),e(G4,qFe),e(qFe,yCr),e(G4,LCr),e(G4,xU),e(xU,xCr),e(G4,$Cr),e(ce,kCr),e(ce,O4),e(O4,NFe),e(NFe,SCr),e(O4,RCr),e(O4,$U),e($U,PCr),e(O4,BCr),e(ce,ICr),e(ce,V4),e(V4,jFe),e(jFe,qCr),e(V4,NCr),e(V4,kU),e(kU,jCr),e(V4,DCr),e(ce,GCr),e(ce,X4),e(X4,DFe),e(DFe,OCr),e(X4,VCr),e(X4,SU),e(SU,XCr),e(X4,zCr),e(ce,WCr),e(ce,z4),e(z4,GFe),e(GFe,QCr),e(z4,HCr),e(z4,RU),e(RU,UCr),e(z4,JCr),e(ce,YCr),e(ce,W4),e(W4,OFe),e(OFe,KCr),e(W4,ZCr),e(W4,PU),e(PU,e5r),e(W4,o5r),e(ce,r5r),e(ce,Q4),e(Q4,VFe),e(VFe,t5r),e(Q4,a5r),e(Q4,BU),e(BU,n5r),e(Q4,s5r),e(ce,l5r),e(ce,H4),e(H4,XFe),e(XFe,i5r),e(H4,d5r),e(H4,IU),e(IU,c5r),e(H4,f5r),e(ce,m5r),e(ce,U4),e(U4,zFe),e(zFe,g5r),e(U4,h5r),e(U4,qU),e(qU,p5r),e(U4,u5r),e(ce,_5r),e(ce,J4),e(J4,WFe),e(WFe,b5r),e(J4,v5r),e(J4,NU),e(NU,F5r),e(J4,T5r),e(ce,M5r),e(ce,Y4),e(Y4,QFe),e(QFe,E5r),e(Y4,C5r),e(Y4,jU),e(jU,w5r),e(Y4,A5r),e(ce,y5r),e(ce,K4),e(K4,HFe),e(HFe,L5r),e(K4,x5r),e(K4,DU),e(DU,$5r),e(K4,k5r),e(Ir,S5r),M(Z4,Ir,null),b(f,aNe,_),b(f,Mc,_),e(Mc,eE),e(eE,UFe),M(J8,UFe,null),e(Mc,R5r),e(Mc,JFe),e(JFe,P5r),b(f,nNe,_),b(f,dr,_),M(Y8,dr,null),e(dr,B5r),e(dr,Ec),e(Ec,I5r),e(Ec,GU),e(GU,q5r),e(Ec,N5r),e(Ec,OU),e(OU,j5r),e(Ec,D5r),e(dr,G5r),e(dr,K8),e(K8,O5r),e(K8,YFe),e(YFe,V5r),e(K8,X5r),e(dr,z5r),e(dr,jt),M(Z8,jt,null),e(jt,W5r),e(jt,KFe),e(KFe,Q5r),e(jt,H5r),e(jt,Cc),e(Cc,U5r),e(Cc,ZFe),e(ZFe,J5r),e(Cc,Y5r),e(Cc,VU),e(VU,K5r),e(Cc,Z5r),e(jt,ewr),M(oE,jt,null),e(dr,owr),e(dr,qr),M(ex,qr,null),e(qr,rwr),e(qr,e0e),e(e0e,twr),e(qr,awr),e(qr,mn),e(mn,nwr),e(mn,o0e),e(o0e,swr),e(mn,lwr),e(mn,r0e),e(r0e,iwr),e(mn,dwr),e(mn,t0e),e(t0e,cwr),e(mn,fwr),e(qr,mwr),e(qr,a0e),e(a0e,rE),e(rE,n0e),e(n0e,gwr),e(rE,hwr),e(rE,XU),e(XU,pwr),e(rE,uwr),e(qr,_wr),M(tE,qr,null),b(f,sNe,_),b(f,wc,_),e(wc,aE),e(aE,s0e),M(ox,s0e,null),e(wc,bwr),e(wc,l0e),e(l0e,vwr),b(f,lNe,_),b(f,cr,_),M(rx,cr,null),e(cr,Fwr),e(cr,Ac),e(Ac,Twr),e(Ac,zU),e(zU,Mwr),e(Ac,Ewr),e(Ac,WU),e(WU,Cwr),e(Ac,wwr),e(cr,Awr),e(cr,tx),e(tx,ywr),e(tx,i0e),e(i0e,Lwr),e(tx,xwr),e(cr,$wr),e(cr,Dt),M(ax,Dt,null),e(Dt,kwr),e(Dt,d0e),e(d0e,Swr),e(Dt,Rwr),e(Dt,yc),e(yc,Pwr),e(yc,c0e),e(c0e,Bwr),e(yc,Iwr),e(yc,QU),e(QU,qwr),e(yc,Nwr),e(Dt,jwr),M(nE,Dt,null),e(cr,Dwr),e(cr,Nr),M(nx,Nr,null),e(Nr,Gwr),e(Nr,f0e),e(f0e,Owr),e(Nr,Vwr),e(Nr,gn),e(gn,Xwr),e(gn,m0e),e(m0e,zwr),e(gn,Wwr),e(gn,g0e),e(g0e,Qwr),e(gn,Hwr),e(gn,h0e),e(h0e,Uwr),e(gn,Jwr),e(Nr,Ywr),e(Nr,p0e),e(p0e,sE),e(sE,u0e),e(u0e,Kwr),e(sE,Zwr),e(sE,HU),e(HU,eAr),e(sE,oAr),e(Nr,rAr),M(lE,Nr,null),b(f,iNe,_),b(f,Lc,_),e(Lc,iE),e(iE,_0e),M(sx,_0e,null),e(Lc,tAr),e(Lc,b0e),e(b0e,aAr),b(f,dNe,_),b(f,fr,_),M(lx,fr,null),e(fr,nAr),e(fr,xc),e(xc,sAr),e(xc,UU),e(UU,lAr),e(xc,iAr),e(xc,JU),e(JU,dAr),e(xc,cAr),e(fr,fAr),e(fr,ix),e(ix,mAr),e(ix,v0e),e(v0e,gAr),e(ix,hAr),e(fr,pAr),e(fr,Gt),M(dx,Gt,null),e(Gt,uAr),e(Gt,F0e),e(F0e,_Ar),e(Gt,bAr),e(Gt,$c),e($c,vAr),e($c,T0e),e(T0e,FAr),e($c,TAr),e($c,YU),e(YU,MAr),e($c,EAr),e(Gt,CAr),M(dE,Gt,null),e(fr,wAr),e(fr,jr),M(cx,jr,null),e(jr,AAr),e(jr,M0e),e(M0e,yAr),e(jr,LAr),e(jr,hn),e(hn,xAr),e(hn,E0e),e(E0e,$Ar),e(hn,kAr),e(hn,C0e),e(C0e,SAr),e(hn,RAr),e(hn,w0e),e(w0e,PAr),e(hn,BAr),e(jr,IAr),e(jr,re),e(re,cE),e(cE,A0e),e(A0e,qAr),e(cE,NAr),e(cE,KU),e(KU,jAr),e(cE,DAr),e(re,GAr),e(re,fE),e(fE,y0e),e(y0e,OAr),e(fE,VAr),e(fE,ZU),e(ZU,XAr),e(fE,zAr),e(re,WAr),e(re,mE),e(mE,L0e),e(L0e,QAr),e(mE,HAr),e(mE,eJ),e(eJ,UAr),e(mE,JAr),e(re,YAr),e(re,gE),e(gE,x0e),e(x0e,KAr),e(gE,ZAr),e(gE,oJ),e(oJ,e6r),e(gE,o6r),e(re,r6r),e(re,hE),e(hE,$0e),e($0e,t6r),e(hE,a6r),e(hE,rJ),e(rJ,n6r),e(hE,s6r),e(re,l6r),e(re,pE),e(pE,k0e),e(k0e,i6r),e(pE,d6r),e(pE,tJ),e(tJ,c6r),e(pE,f6r),e(re,m6r),e(re,uE),e(uE,S0e),e(S0e,g6r),e(uE,h6r),e(uE,aJ),e(aJ,p6r),e(uE,u6r),e(re,_6r),e(re,_E),e(_E,R0e),e(R0e,b6r),e(_E,v6r),e(_E,nJ),e(nJ,F6r),e(_E,T6r),e(re,M6r),e(re,bE),e(bE,P0e),e(P0e,E6r),e(bE,C6r),e(bE,sJ),e(sJ,w6r),e(bE,A6r),e(re,y6r),e(re,vE),e(vE,B0e),e(B0e,L6r),e(vE,x6r),e(vE,lJ),e(lJ,$6r),e(vE,k6r),e(re,S6r),e(re,FE),e(FE,I0e),e(I0e,R6r),e(FE,P6r),e(FE,iJ),e(iJ,B6r),e(FE,I6r),e(re,q6r),e(re,TE),e(TE,q0e),e(q0e,N6r),e(TE,j6r),e(TE,dJ),e(dJ,D6r),e(TE,G6r),e(re,O6r),e(re,ME),e(ME,N0e),e(N0e,V6r),e(ME,X6r),e(ME,cJ),e(cJ,z6r),e(ME,W6r),e(re,Q6r),e(re,EE),e(EE,j0e),e(j0e,H6r),e(EE,U6r),e(EE,fJ),e(fJ,J6r),e(EE,Y6r),e(re,K6r),e(re,CE),e(CE,D0e),e(D0e,Z6r),e(CE,eyr),e(CE,mJ),e(mJ,oyr),e(CE,ryr),e(re,tyr),e(re,wE),e(wE,G0e),e(G0e,ayr),e(wE,nyr),e(wE,gJ),e(gJ,syr),e(wE,lyr),e(re,iyr),e(re,AE),e(AE,O0e),e(O0e,dyr),e(AE,cyr),e(AE,hJ),e(hJ,fyr),e(AE,myr),e(re,gyr),e(re,yE),e(yE,V0e),e(V0e,hyr),e(yE,pyr),e(yE,pJ),e(pJ,uyr),e(yE,_yr),e(re,byr),e(re,LE),e(LE,X0e),e(X0e,vyr),e(LE,Fyr),e(LE,uJ),e(uJ,Tyr),e(LE,Myr),e(re,Eyr),e(re,xE),e(xE,z0e),e(z0e,Cyr),e(xE,wyr),e(xE,_J),e(_J,Ayr),e(xE,yyr),e(re,Lyr),e(re,$E),e($E,W0e),e(W0e,xyr),e($E,$yr),e($E,bJ),e(bJ,kyr),e($E,Syr),e(re,Ryr),e(re,kE),e(kE,Q0e),e(Q0e,Pyr),e(kE,Byr),e(kE,vJ),e(vJ,Iyr),e(kE,qyr),e(re,Nyr),e(re,SE),e(SE,H0e),e(H0e,jyr),e(SE,Dyr),e(SE,FJ),e(FJ,Gyr),e(SE,Oyr),e(re,Vyr),e(re,RE),e(RE,U0e),e(U0e,Xyr),e(RE,zyr),e(RE,TJ),e(TJ,Wyr),e(RE,Qyr),e(re,Hyr),e(re,PE),e(PE,J0e),e(J0e,Uyr),e(PE,Jyr),e(PE,MJ),e(MJ,Yyr),e(PE,Kyr),e(jr,Zyr),M(BE,jr,null),b(f,cNe,_),b(f,kc,_),e(kc,IE),e(IE,Y0e),M(fx,Y0e,null),e(kc,eLr),e(kc,K0e),e(K0e,oLr),b(f,fNe,_),b(f,mr,_),M(mx,mr,null),e(mr,rLr),e(mr,Sc),e(Sc,tLr),e(Sc,EJ),e(EJ,aLr),e(Sc,nLr),e(Sc,CJ),e(CJ,sLr),e(Sc,lLr),e(mr,iLr),e(mr,gx),e(gx,dLr),e(gx,Z0e),e(Z0e,cLr),e(gx,fLr),e(mr,mLr),e(mr,Ot),M(hx,Ot,null),e(Ot,gLr),e(Ot,eTe),e(eTe,hLr),e(Ot,pLr),e(Ot,Rc),e(Rc,uLr),e(Rc,oTe),e(oTe,_Lr),e(Rc,bLr),e(Rc,wJ),e(wJ,vLr),e(Rc,FLr),e(Ot,TLr),M(qE,Ot,null),e(mr,MLr),e(mr,Dr),M(px,Dr,null),e(Dr,ELr),e(Dr,rTe),e(rTe,CLr),e(Dr,wLr),e(Dr,pn),e(pn,ALr),e(pn,tTe),e(tTe,yLr),e(pn,LLr),e(pn,aTe),e(aTe,xLr),e(pn,$Lr),e(pn,nTe),e(nTe,kLr),e(pn,SLr),e(Dr,RLr),e(Dr,Re),e(Re,NE),e(NE,sTe),e(sTe,PLr),e(NE,BLr),e(NE,AJ),e(AJ,ILr),e(NE,qLr),e(Re,NLr),e(Re,jE),e(jE,lTe),e(lTe,jLr),e(jE,DLr),e(jE,yJ),e(yJ,GLr),e(jE,OLr),e(Re,VLr),e(Re,DE),e(DE,iTe),e(iTe,XLr),e(DE,zLr),e(DE,LJ),e(LJ,WLr),e(DE,QLr),e(Re,HLr),e(Re,GE),e(GE,dTe),e(dTe,ULr),e(GE,JLr),e(GE,xJ),e(xJ,YLr),e(GE,KLr),e(Re,ZLr),e(Re,OE),e(OE,cTe),e(cTe,e8r),e(OE,o8r),e(OE,$J),e($J,r8r),e(OE,t8r),e(Re,a8r),e(Re,VE),e(VE,fTe),e(fTe,n8r),e(VE,s8r),e(VE,kJ),e(kJ,l8r),e(VE,i8r),e(Re,d8r),e(Re,XE),e(XE,mTe),e(mTe,c8r),e(XE,f8r),e(XE,SJ),e(SJ,m8r),e(XE,g8r),e(Re,h8r),e(Re,zE),e(zE,gTe),e(gTe,p8r),e(zE,u8r),e(zE,RJ),e(RJ,_8r),e(zE,b8r),e(Re,v8r),e(Re,WE),e(WE,hTe),e(hTe,F8r),e(WE,T8r),e(WE,PJ),e(PJ,M8r),e(WE,E8r),e(Dr,C8r),M(QE,Dr,null),b(f,mNe,_),b(f,Pc,_),e(Pc,HE),e(HE,pTe),M(ux,pTe,null),e(Pc,w8r),e(Pc,uTe),e(uTe,A8r),b(f,gNe,_),b(f,gr,_),M(_x,gr,null),e(gr,y8r),e(gr,Bc),e(Bc,L8r),e(Bc,BJ),e(BJ,x8r),e(Bc,$8r),e(Bc,IJ),e(IJ,k8r),e(Bc,S8r),e(gr,R8r),e(gr,bx),e(bx,P8r),e(bx,_Te),e(_Te,B8r),e(bx,I8r),e(gr,q8r),e(gr,Vt),M(vx,Vt,null),e(Vt,N8r),e(Vt,bTe),e(bTe,j8r),e(Vt,D8r),e(Vt,Ic),e(Ic,G8r),e(Ic,vTe),e(vTe,O8r),e(Ic,V8r),e(Ic,qJ),e(qJ,X8r),e(Ic,z8r),e(Vt,W8r),M(UE,Vt,null),e(gr,Q8r),e(gr,Gr),M(Fx,Gr,null),e(Gr,H8r),e(Gr,FTe),e(FTe,U8r),e(Gr,J8r),e(Gr,un),e(un,Y8r),e(un,TTe),e(TTe,K8r),e(un,Z8r),e(un,MTe),e(MTe,exr),e(un,oxr),e(un,ETe),e(ETe,rxr),e(un,txr),e(Gr,axr),e(Gr,Me),e(Me,JE),e(JE,CTe),e(CTe,nxr),e(JE,sxr),e(JE,NJ),e(NJ,lxr),e(JE,ixr),e(Me,dxr),e(Me,YE),e(YE,wTe),e(wTe,cxr),e(YE,fxr),e(YE,jJ),e(jJ,mxr),e(YE,gxr),e(Me,hxr),e(Me,KE),e(KE,ATe),e(ATe,pxr),e(KE,uxr),e(KE,DJ),e(DJ,_xr),e(KE,bxr),e(Me,vxr),e(Me,ZE),e(ZE,yTe),e(yTe,Fxr),e(ZE,Txr),e(ZE,GJ),e(GJ,Mxr),e(ZE,Exr),e(Me,Cxr),e(Me,eC),e(eC,LTe),e(LTe,wxr),e(eC,Axr),e(eC,OJ),e(OJ,yxr),e(eC,Lxr),e(Me,xxr),e(Me,oC),e(oC,xTe),e(xTe,$xr),e(oC,kxr),e(oC,VJ),e(VJ,Sxr),e(oC,Rxr),e(Me,Pxr),e(Me,rC),e(rC,$Te),e($Te,Bxr),e(rC,Ixr),e(rC,XJ),e(XJ,qxr),e(rC,Nxr),e(Me,jxr),e(Me,tC),e(tC,kTe),e(kTe,Dxr),e(tC,Gxr),e(tC,zJ),e(zJ,Oxr),e(tC,Vxr),e(Me,Xxr),e(Me,aC),e(aC,STe),e(STe,zxr),e(aC,Wxr),e(aC,WJ),e(WJ,Qxr),e(aC,Hxr),e(Me,Uxr),e(Me,nC),e(nC,RTe),e(RTe,Jxr),e(nC,Yxr),e(nC,QJ),e(QJ,Kxr),e(nC,Zxr),e(Me,e9r),e(Me,sC),e(sC,PTe),e(PTe,o9r),e(sC,r9r),e(sC,HJ),e(HJ,t9r),e(sC,a9r),e(Me,n9r),e(Me,lC),e(lC,BTe),e(BTe,s9r),e(lC,l9r),e(lC,UJ),e(UJ,i9r),e(lC,d9r),e(Gr,c9r),M(iC,Gr,null),b(f,hNe,_),b(f,qc,_),e(qc,dC),e(dC,ITe),M(Tx,ITe,null),e(qc,f9r),e(qc,qTe),e(qTe,m9r),b(f,pNe,_),b(f,hr,_),M(Mx,hr,null),e(hr,g9r),e(hr,Nc),e(Nc,h9r),e(Nc,JJ),e(JJ,p9r),e(Nc,u9r),e(Nc,YJ),e(YJ,_9r),e(Nc,b9r),e(hr,v9r),e(hr,Ex),e(Ex,F9r),e(Ex,NTe),e(NTe,T9r),e(Ex,M9r),e(hr,E9r),e(hr,Xt),M(Cx,Xt,null),e(Xt,C9r),e(Xt,jTe),e(jTe,w9r),e(Xt,A9r),e(Xt,jc),e(jc,y9r),e(jc,DTe),e(DTe,L9r),e(jc,x9r),e(jc,KJ),e(KJ,$9r),e(jc,k9r),e(Xt,S9r),M(cC,Xt,null),e(hr,R9r),e(hr,Or),M(wx,Or,null),e(Or,P9r),e(Or,GTe),e(GTe,B9r),e(Or,I9r),e(Or,_n),e(_n,q9r),e(_n,OTe),e(OTe,N9r),e(_n,j9r),e(_n,VTe),e(VTe,D9r),e(_n,G9r),e(_n,XTe),e(XTe,O9r),e(_n,V9r),e(Or,X9r),e(Or,Le),e(Le,fC),e(fC,zTe),e(zTe,z9r),e(fC,W9r),e(fC,ZJ),e(ZJ,Q9r),e(fC,H9r),e(Le,U9r),e(Le,mC),e(mC,WTe),e(WTe,J9r),e(mC,Y9r),e(mC,eY),e(eY,K9r),e(mC,Z9r),e(Le,e$r),e(Le,gC),e(gC,QTe),e(QTe,o$r),e(gC,r$r),e(gC,oY),e(oY,t$r),e(gC,a$r),e(Le,n$r),e(Le,hC),e(hC,HTe),e(HTe,s$r),e(hC,l$r),e(hC,rY),e(rY,i$r),e(hC,d$r),e(Le,c$r),e(Le,pC),e(pC,UTe),e(UTe,f$r),e(pC,m$r),e(pC,tY),e(tY,g$r),e(pC,h$r),e(Le,p$r),e(Le,uC),e(uC,JTe),e(JTe,u$r),e(uC,_$r),e(uC,aY),e(aY,b$r),e(uC,v$r),e(Le,F$r),e(Le,_C),e(_C,YTe),e(YTe,T$r),e(_C,M$r),e(_C,nY),e(nY,E$r),e(_C,C$r),e(Le,w$r),e(Le,bC),e(bC,KTe),e(KTe,A$r),e(bC,y$r),e(bC,sY),e(sY,L$r),e(bC,x$r),e(Le,$$r),e(Le,vC),e(vC,ZTe),e(ZTe,k$r),e(vC,S$r),e(vC,lY),e(lY,R$r),e(vC,P$r),e(Le,B$r),e(Le,FC),e(FC,e7e),e(e7e,I$r),e(FC,q$r),e(FC,iY),e(iY,N$r),e(FC,j$r),e(Or,D$r),M(TC,Or,null),b(f,uNe,_),b(f,Dc,_),e(Dc,MC),e(MC,o7e),M(Ax,o7e,null),e(Dc,G$r),e(Dc,r7e),e(r7e,O$r),b(f,_Ne,_),b(f,pr,_),M(yx,pr,null),e(pr,V$r),e(pr,Gc),e(Gc,X$r),e(Gc,dY),e(dY,z$r),e(Gc,W$r),e(Gc,cY),e(cY,Q$r),e(Gc,H$r),e(pr,U$r),e(pr,Lx),e(Lx,J$r),e(Lx,t7e),e(t7e,Y$r),e(Lx,K$r),e(pr,Z$r),e(pr,zt),M(xx,zt,null),e(zt,ekr),e(zt,a7e),e(a7e,okr),e(zt,rkr),e(zt,Oc),e(Oc,tkr),e(Oc,n7e),e(n7e,akr),e(Oc,nkr),e(Oc,fY),e(fY,skr),e(Oc,lkr),e(zt,ikr),M(EC,zt,null),e(pr,dkr),e(pr,Vr),M($x,Vr,null),e(Vr,ckr),e(Vr,s7e),e(s7e,fkr),e(Vr,mkr),e(Vr,bn),e(bn,gkr),e(bn,l7e),e(l7e,hkr),e(bn,pkr),e(bn,i7e),e(i7e,ukr),e(bn,_kr),e(bn,d7e),e(d7e,bkr),e(bn,vkr),e(Vr,Fkr),e(Vr,Pe),e(Pe,CC),e(CC,c7e),e(c7e,Tkr),e(CC,Mkr),e(CC,mY),e(mY,Ekr),e(CC,Ckr),e(Pe,wkr),e(Pe,wC),e(wC,f7e),e(f7e,Akr),e(wC,ykr),e(wC,gY),e(gY,Lkr),e(wC,xkr),e(Pe,$kr),e(Pe,AC),e(AC,m7e),e(m7e,kkr),e(AC,Skr),e(AC,hY),e(hY,Rkr),e(AC,Pkr),e(Pe,Bkr),e(Pe,yC),e(yC,g7e),e(g7e,Ikr),e(yC,qkr),e(yC,pY),e(pY,Nkr),e(yC,jkr),e(Pe,Dkr),e(Pe,LC),e(LC,h7e),e(h7e,Gkr),e(LC,Okr),e(LC,uY),e(uY,Vkr),e(LC,Xkr),e(Pe,zkr),e(Pe,xC),e(xC,p7e),e(p7e,Wkr),e(xC,Qkr),e(xC,_Y),e(_Y,Hkr),e(xC,Ukr),e(Pe,Jkr),e(Pe,$C),e($C,u7e),e(u7e,Ykr),e($C,Kkr),e($C,bY),e(bY,Zkr),e($C,eSr),e(Pe,oSr),e(Pe,kC),e(kC,_7e),e(_7e,rSr),e(kC,tSr),e(kC,vY),e(vY,aSr),e(kC,nSr),e(Pe,sSr),e(Pe,SC),e(SC,b7e),e(b7e,lSr),e(SC,iSr),e(SC,FY),e(FY,dSr),e(SC,cSr),e(Vr,fSr),M(RC,Vr,null),b(f,bNe,_),b(f,Vc,_),e(Vc,PC),e(PC,v7e),M(kx,v7e,null),e(Vc,mSr),e(Vc,F7e),e(F7e,gSr),b(f,vNe,_),b(f,ur,_),M(Sx,ur,null),e(ur,hSr),e(ur,Xc),e(Xc,pSr),e(Xc,TY),e(TY,uSr),e(Xc,_Sr),e(Xc,MY),e(MY,bSr),e(Xc,vSr),e(ur,FSr),e(ur,Rx),e(Rx,TSr),e(Rx,T7e),e(T7e,MSr),e(Rx,ESr),e(ur,CSr),e(ur,Wt),M(Px,Wt,null),e(Wt,wSr),e(Wt,M7e),e(M7e,ASr),e(Wt,ySr),e(Wt,zc),e(zc,LSr),e(zc,E7e),e(E7e,xSr),e(zc,$Sr),e(zc,EY),e(EY,kSr),e(zc,SSr),e(Wt,RSr),M(BC,Wt,null),e(ur,PSr),e(ur,Xr),M(Bx,Xr,null),e(Xr,BSr),e(Xr,C7e),e(C7e,ISr),e(Xr,qSr),e(Xr,vn),e(vn,NSr),e(vn,w7e),e(w7e,jSr),e(vn,DSr),e(vn,A7e),e(A7e,GSr),e(vn,OSr),e(vn,y7e),e(y7e,VSr),e(vn,XSr),e(Xr,zSr),e(Xr,xe),e(xe,IC),e(IC,L7e),e(L7e,WSr),e(IC,QSr),e(IC,CY),e(CY,HSr),e(IC,USr),e(xe,JSr),e(xe,qC),e(qC,x7e),e(x7e,YSr),e(qC,KSr),e(qC,wY),e(wY,ZSr),e(qC,eRr),e(xe,oRr),e(xe,NC),e(NC,$7e),e($7e,rRr),e(NC,tRr),e(NC,AY),e(AY,aRr),e(NC,nRr),e(xe,sRr),e(xe,jC),e(jC,k7e),e(k7e,lRr),e(jC,iRr),e(jC,yY),e(yY,dRr),e(jC,cRr),e(xe,fRr),e(xe,DC),e(DC,S7e),e(S7e,mRr),e(DC,gRr),e(DC,LY),e(LY,hRr),e(DC,pRr),e(xe,uRr),e(xe,GC),e(GC,R7e),e(R7e,_Rr),e(GC,bRr),e(GC,xY),e(xY,vRr),e(GC,FRr),e(xe,TRr),e(xe,OC),e(OC,P7e),e(P7e,MRr),e(OC,ERr),e(OC,$Y),e($Y,CRr),e(OC,wRr),e(xe,ARr),e(xe,VC),e(VC,B7e),e(B7e,yRr),e(VC,LRr),e(VC,kY),e(kY,xRr),e(VC,$Rr),e(xe,kRr),e(xe,XC),e(XC,I7e),e(I7e,SRr),e(XC,RRr),e(XC,SY),e(SY,PRr),e(XC,BRr),e(xe,IRr),e(xe,zC),e(zC,q7e),e(q7e,qRr),e(zC,NRr),e(zC,RY),e(RY,jRr),e(zC,DRr),e(Xr,GRr),M(WC,Xr,null),b(f,FNe,_),b(f,Wc,_),e(Wc,QC),e(QC,N7e),M(Ix,N7e,null),e(Wc,ORr),e(Wc,j7e),e(j7e,VRr),b(f,TNe,_),b(f,_r,_),M(qx,_r,null),e(_r,XRr),e(_r,Qc),e(Qc,zRr),e(Qc,PY),e(PY,WRr),e(Qc,QRr),e(Qc,BY),e(BY,HRr),e(Qc,URr),e(_r,JRr),e(_r,Nx),e(Nx,YRr),e(Nx,D7e),e(D7e,KRr),e(Nx,ZRr),e(_r,ePr),e(_r,Qt),M(jx,Qt,null),e(Qt,oPr),e(Qt,G7e),e(G7e,rPr),e(Qt,tPr),e(Qt,Hc),e(Hc,aPr),e(Hc,O7e),e(O7e,nPr),e(Hc,sPr),e(Hc,IY),e(IY,lPr),e(Hc,iPr),e(Qt,dPr),M(HC,Qt,null),e(_r,cPr),e(_r,zr),M(Dx,zr,null),e(zr,fPr),e(zr,V7e),e(V7e,mPr),e(zr,gPr),e(zr,Fn),e(Fn,hPr),e(Fn,X7e),e(X7e,pPr),e(Fn,uPr),e(Fn,z7e),e(z7e,_Pr),e(Fn,bPr),e(Fn,W7e),e(W7e,vPr),e(Fn,FPr),e(zr,TPr),e(zr,$e),e($e,UC),e(UC,Q7e),e(Q7e,MPr),e(UC,EPr),e(UC,qY),e(qY,CPr),e(UC,wPr),e($e,APr),e($e,JC),e(JC,H7e),e(H7e,yPr),e(JC,LPr),e(JC,NY),e(NY,xPr),e(JC,$Pr),e($e,kPr),e($e,YC),e(YC,U7e),e(U7e,SPr),e(YC,RPr),e(YC,jY),e(jY,PPr),e(YC,BPr),e($e,IPr),e($e,KC),e(KC,J7e),e(J7e,qPr),e(KC,NPr),e(KC,DY),e(DY,jPr),e(KC,DPr),e($e,GPr),e($e,ZC),e(ZC,Y7e),e(Y7e,OPr),e(ZC,VPr),e(ZC,GY),e(GY,XPr),e(ZC,zPr),e($e,WPr),e($e,e5),e(e5,K7e),e(K7e,QPr),e(e5,HPr),e(e5,OY),e(OY,UPr),e(e5,JPr),e($e,YPr),e($e,o5),e(o5,Z7e),e(Z7e,KPr),e(o5,ZPr),e(o5,VY),e(VY,eBr),e(o5,oBr),e($e,rBr),e($e,r5),e(r5,eMe),e(eMe,tBr),e(r5,aBr),e(r5,XY),e(XY,nBr),e(r5,sBr),e($e,lBr),e($e,t5),e(t5,oMe),e(oMe,iBr),e(t5,dBr),e(t5,zY),e(zY,cBr),e(t5,fBr),e($e,mBr),e($e,a5),e(a5,rMe),e(rMe,gBr),e(a5,hBr),e(a5,WY),e(WY,pBr),e(a5,uBr),e(zr,_Br),M(n5,zr,null),b(f,MNe,_),b(f,Uc,_),e(Uc,s5),e(s5,tMe),M(Gx,tMe,null),e(Uc,bBr),e(Uc,aMe),e(aMe,vBr),b(f,ENe,_),b(f,br,_),M(Ox,br,null),e(br,FBr),e(br,Jc),e(Jc,TBr),e(Jc,QY),e(QY,MBr),e(Jc,EBr),e(Jc,HY),e(HY,CBr),e(Jc,wBr),e(br,ABr),e(br,Vx),e(Vx,yBr),e(Vx,nMe),e(nMe,LBr),e(Vx,xBr),e(br,$Br),e(br,Ht),M(Xx,Ht,null),e(Ht,kBr),e(Ht,sMe),e(sMe,SBr),e(Ht,RBr),e(Ht,Yc),e(Yc,PBr),e(Yc,lMe),e(lMe,BBr),e(Yc,IBr),e(Yc,UY),e(UY,qBr),e(Yc,NBr),e(Ht,jBr),M(l5,Ht,null),e(br,DBr),e(br,Wr),M(zx,Wr,null),e(Wr,GBr),e(Wr,iMe),e(iMe,OBr),e(Wr,VBr),e(Wr,Tn),e(Tn,XBr),e(Tn,dMe),e(dMe,zBr),e(Tn,WBr),e(Tn,cMe),e(cMe,QBr),e(Tn,HBr),e(Tn,fMe),e(fMe,UBr),e(Tn,JBr),e(Wr,YBr),e(Wr,De),e(De,i5),e(i5,mMe),e(mMe,KBr),e(i5,ZBr),e(i5,JY),e(JY,eIr),e(i5,oIr),e(De,rIr),e(De,d5),e(d5,gMe),e(gMe,tIr),e(d5,aIr),e(d5,YY),e(YY,nIr),e(d5,sIr),e(De,lIr),e(De,c5),e(c5,hMe),e(hMe,iIr),e(c5,dIr),e(c5,KY),e(KY,cIr),e(c5,fIr),e(De,mIr),e(De,f5),e(f5,pMe),e(pMe,gIr),e(f5,hIr),e(f5,ZY),e(ZY,pIr),e(f5,uIr),e(De,_Ir),e(De,m5),e(m5,uMe),e(uMe,bIr),e(m5,vIr),e(m5,eK),e(eK,FIr),e(m5,TIr),e(De,MIr),e(De,g5),e(g5,_Me),e(_Me,EIr),e(g5,CIr),e(g5,oK),e(oK,wIr),e(g5,AIr),e(De,yIr),e(De,h5),e(h5,bMe),e(bMe,LIr),e(h5,xIr),e(h5,rK),e(rK,$Ir),e(h5,kIr),e(De,SIr),e(De,p5),e(p5,vMe),e(vMe,RIr),e(p5,PIr),e(p5,tK),e(tK,BIr),e(p5,IIr),e(Wr,qIr),M(u5,Wr,null),b(f,CNe,_),b(f,Kc,_),e(Kc,_5),e(_5,FMe),M(Wx,FMe,null),e(Kc,NIr),e(Kc,TMe),e(TMe,jIr),b(f,wNe,_),b(f,vr,_),M(Qx,vr,null),e(vr,DIr),e(vr,Zc),e(Zc,GIr),e(Zc,aK),e(aK,OIr),e(Zc,VIr),e(Zc,nK),e(nK,XIr),e(Zc,zIr),e(vr,WIr),e(vr,Hx),e(Hx,QIr),e(Hx,MMe),e(MMe,HIr),e(Hx,UIr),e(vr,JIr),e(vr,Ut),M(Ux,Ut,null),e(Ut,YIr),e(Ut,EMe),e(EMe,KIr),e(Ut,ZIr),e(Ut,ef),e(ef,eqr),e(ef,CMe),e(CMe,oqr),e(ef,rqr),e(ef,sK),e(sK,tqr),e(ef,aqr),e(Ut,nqr),M(b5,Ut,null),e(vr,sqr),e(vr,Qr),M(Jx,Qr,null),e(Qr,lqr),e(Qr,wMe),e(wMe,iqr),e(Qr,dqr),e(Qr,Mn),e(Mn,cqr),e(Mn,AMe),e(AMe,fqr),e(Mn,mqr),e(Mn,yMe),e(yMe,gqr),e(Mn,hqr),e(Mn,LMe),e(LMe,pqr),e(Mn,uqr),e(Qr,_qr),e(Qr,Ge),e(Ge,v5),e(v5,xMe),e(xMe,bqr),e(v5,vqr),e(v5,lK),e(lK,Fqr),e(v5,Tqr),e(Ge,Mqr),e(Ge,F5),e(F5,$Me),e($Me,Eqr),e(F5,Cqr),e(F5,iK),e(iK,wqr),e(F5,Aqr),e(Ge,yqr),e(Ge,T5),e(T5,kMe),e(kMe,Lqr),e(T5,xqr),e(T5,dK),e(dK,$qr),e(T5,kqr),e(Ge,Sqr),e(Ge,M5),e(M5,SMe),e(SMe,Rqr),e(M5,Pqr),e(M5,cK),e(cK,Bqr),e(M5,Iqr),e(Ge,qqr),e(Ge,E5),e(E5,RMe),e(RMe,Nqr),e(E5,jqr),e(E5,fK),e(fK,Dqr),e(E5,Gqr),e(Ge,Oqr),e(Ge,C5),e(C5,PMe),e(PMe,Vqr),e(C5,Xqr),e(C5,mK),e(mK,zqr),e(C5,Wqr),e(Ge,Qqr),e(Ge,w5),e(w5,BMe),e(BMe,Hqr),e(w5,Uqr),e(w5,gK),e(gK,Jqr),e(w5,Yqr),e(Ge,Kqr),e(Ge,A5),e(A5,IMe),e(IMe,Zqr),e(A5,eNr),e(A5,hK),e(hK,oNr),e(A5,rNr),e(Qr,tNr),M(y5,Qr,null),b(f,ANe,_),b(f,of,_),e(of,L5),e(L5,qMe),M(Yx,qMe,null),e(of,aNr),e(of,NMe),e(NMe,nNr),b(f,yNe,_),b(f,Fr,_),M(Kx,Fr,null),e(Fr,sNr),e(Fr,rf),e(rf,lNr),e(rf,pK),e(pK,iNr),e(rf,dNr),e(rf,uK),e(uK,cNr),e(rf,fNr),e(Fr,mNr),e(Fr,Zx),e(Zx,gNr),e(Zx,jMe),e(jMe,hNr),e(Zx,pNr),e(Fr,uNr),e(Fr,Jt),M(e9,Jt,null),e(Jt,_Nr),e(Jt,DMe),e(DMe,bNr),e(Jt,vNr),e(Jt,tf),e(tf,FNr),e(tf,GMe),e(GMe,TNr),e(tf,MNr),e(tf,_K),e(_K,ENr),e(tf,CNr),e(Jt,wNr),M(x5,Jt,null),e(Fr,ANr),e(Fr,Hr),M(o9,Hr,null),e(Hr,yNr),e(Hr,OMe),e(OMe,LNr),e(Hr,xNr),e(Hr,En),e(En,$Nr),e(En,VMe),e(VMe,kNr),e(En,SNr),e(En,XMe),e(XMe,RNr),e(En,PNr),e(En,zMe),e(zMe,BNr),e(En,INr),e(Hr,qNr),e(Hr,WMe),e(WMe,$5),e($5,QMe),e(QMe,NNr),e($5,jNr),e($5,bK),e(bK,DNr),e($5,GNr),e(Hr,ONr),M(k5,Hr,null),b(f,LNe,_),b(f,af,_),e(af,S5),e(S5,HMe),M(r9,HMe,null),e(af,VNr),e(af,UMe),e(UMe,XNr),b(f,xNe,_),b(f,Tr,_),M(t9,Tr,null),e(Tr,zNr),e(Tr,nf),e(nf,WNr),e(nf,vK),e(vK,QNr),e(nf,HNr),e(nf,FK),e(FK,UNr),e(nf,JNr),e(Tr,YNr),e(Tr,a9),e(a9,KNr),e(a9,JMe),e(JMe,ZNr),e(a9,ejr),e(Tr,ojr),e(Tr,Yt),M(n9,Yt,null),e(Yt,rjr),e(Yt,YMe),e(YMe,tjr),e(Yt,ajr),e(Yt,sf),e(sf,njr),e(sf,KMe),e(KMe,sjr),e(sf,ljr),e(sf,TK),e(TK,ijr),e(sf,djr),e(Yt,cjr),M(R5,Yt,null),e(Tr,fjr),e(Tr,Ur),M(s9,Ur,null),e(Ur,mjr),e(Ur,ZMe),e(ZMe,gjr),e(Ur,hjr),e(Ur,Cn),e(Cn,pjr),e(Cn,e4e),e(e4e,ujr),e(Cn,_jr),e(Cn,o4e),e(o4e,bjr),e(Cn,vjr),e(Cn,r4e),e(r4e,Fjr),e(Cn,Tjr),e(Ur,Mjr),e(Ur,l9),e(l9,P5),e(P5,t4e),e(t4e,Ejr),e(P5,Cjr),e(P5,MK),e(MK,wjr),e(P5,Ajr),e(l9,yjr),e(l9,B5),e(B5,a4e),e(a4e,Ljr),e(B5,xjr),e(B5,EK),e(EK,$jr),e(B5,kjr),e(Ur,Sjr),M(I5,Ur,null),b(f,$Ne,_),b(f,lf,_),e(lf,q5),e(q5,n4e),M(i9,n4e,null),e(lf,Rjr),e(lf,s4e),e(s4e,Pjr),b(f,kNe,_),b(f,Mr,_),M(d9,Mr,null),e(Mr,Bjr),e(Mr,df),e(df,Ijr),e(df,CK),e(CK,qjr),e(df,Njr),e(df,wK),e(wK,jjr),e(df,Djr),e(Mr,Gjr),e(Mr,c9),e(c9,Ojr),e(c9,l4e),e(l4e,Vjr),e(c9,Xjr),e(Mr,zjr),e(Mr,Kt),M(f9,Kt,null),e(Kt,Wjr),e(Kt,i4e),e(i4e,Qjr),e(Kt,Hjr),e(Kt,cf),e(cf,Ujr),e(cf,d4e),e(d4e,Jjr),e(cf,Yjr),e(cf,AK),e(AK,Kjr),e(cf,Zjr),e(Kt,eDr),M(N5,Kt,null),e(Mr,oDr),e(Mr,Jr),M(m9,Jr,null),e(Jr,rDr),e(Jr,c4e),e(c4e,tDr),e(Jr,aDr),e(Jr,wn),e(wn,nDr),e(wn,f4e),e(f4e,sDr),e(wn,lDr),e(wn,m4e),e(m4e,iDr),e(wn,dDr),e(wn,g4e),e(g4e,cDr),e(wn,fDr),e(Jr,mDr),e(Jr,h4e),e(h4e,j5),e(j5,p4e),e(p4e,gDr),e(j5,hDr),e(j5,yK),e(yK,pDr),e(j5,uDr),e(Jr,_Dr),M(D5,Jr,null),SNe=!0},p(f,[_]){const g9={};_&2&&(g9.$$scope={dirty:_,ctx:f}),vf.$set(g9);const u4e={};_&2&&(u4e.$$scope={dirty:_,ctx:f}),bg.$set(u4e);const _4e={};_&2&&(_4e.$$scope={dirty:_,ctx:f}),Kg.$set(_4e);const b4e={};_&2&&(b4e.$$scope={dirty:_,ctx:f}),yh.$set(b4e);const h9={};_&2&&(h9.$$scope={dirty:_,ctx:f}),Lh.$set(h9);const v4e={};_&2&&(v4e.$$scope={dirty:_,ctx:f}),Qh.$set(v4e);const An={};_&2&&(An.$$scope={dirty:_,ctx:f}),Hh.$set(An);const F4e={};_&2&&(F4e.$$scope={dirty:_,ctx:f}),Yh.$set(F4e);const T4e={};_&2&&(T4e.$$scope={dirty:_,ctx:f}),Ou.$set(T4e);const M4e={};_&2&&(M4e.$$scope={dirty:_,ctx:f}),Xu.$set(M4e);const p9={};_&2&&(p9.$$scope={dirty:_,ctx:f}),P_.$set(p9);const E4e={};_&2&&(E4e.$$scope={dirty:_,ctx:f}),I_.$set(E4e);const u9={};_&2&&(u9.$$scope={dirty:_,ctx:f}),F1.$set(u9);const C4e={};_&2&&(C4e.$$scope={dirty:_,ctx:f}),M1.$set(C4e);const _9={};_&2&&(_9.$$scope={dirty:_,ctx:f}),nb.$set(_9);const w4e={};_&2&&(w4e.$$scope={dirty:_,ctx:f}),lb.$set(w4e);const A4e={};_&2&&(A4e.$$scope={dirty:_,ctx:f}),wb.$set(A4e);const y4e={};_&2&&(y4e.$$scope={dirty:_,ctx:f}),yb.$set(y4e);const ff={};_&2&&(ff.$$scope={dirty:_,ctx:f}),T2.$set(ff);const L4e={};_&2&&(L4e.$$scope={dirty:_,ctx:f}),E2.$set(L4e);const x4e={};_&2&&(x4e.$$scope={dirty:_,ctx:f}),ev.$set(x4e);const $4e={};_&2&&($4e.$$scope={dirty:_,ctx:f}),rv.$set($4e);const b9={};_&2&&(b9.$$scope={dirty:_,ctx:f}),dv.$set(b9);const k4e={};_&2&&(k4e.$$scope={dirty:_,ctx:f}),fv.$set(k4e);const S4e={};_&2&&(S4e.$$scope={dirty:_,ctx:f}),Wv.$set(S4e);const R4e={};_&2&&(R4e.$$scope={dirty:_,ctx:f}),Hv.$set(R4e);const et={};_&2&&(et.$$scope={dirty:_,ctx:f}),B3.$set(et);const v9={};_&2&&(v9.$$scope={dirty:_,ctx:f}),q3.$set(v9);const P4e={};_&2&&(P4e.$$scope={dirty:_,ctx:f}),D3.$set(P4e);const F9={};_&2&&(F9.$$scope={dirty:_,ctx:f}),O3.$set(F9);const B4e={};_&2&&(B4e.$$scope={dirty:_,ctx:f}),oF.$set(B4e);const ot={};_&2&&(ot.$$scope={dirty:_,ctx:f}),tF.$set(ot);const I4e={};_&2&&(I4e.$$scope={dirty:_,ctx:f}),sF.$set(I4e);const mf={};_&2&&(mf.$$scope={dirty:_,ctx:f}),iF.$set(mf);const q4e={};_&2&&(q4e.$$scope={dirty:_,ctx:f}),vF.$set(q4e);const N4e={};_&2&&(N4e.$$scope={dirty:_,ctx:f}),TF.$set(N4e);const y={};_&2&&(y.$$scope={dirty:_,ctx:f}),LF.$set(y);const G5={};_&2&&(G5.$$scope={dirty:_,ctx:f}),$F.$set(G5);const j4e={};_&2&&(j4e.$$scope={dirty:_,ctx:f}),GF.$set(j4e);const D4e={};_&2&&(D4e.$$scope={dirty:_,ctx:f}),VF.$set(D4e);const O5={};_&2&&(O5.$$scope={dirty:_,ctx:f}),QF.$set(O5);const G4e={};_&2&&(G4e.$$scope={dirty:_,ctx:f}),UF.$set(G4e);const O4e={};_&2&&(O4e.$$scope={dirty:_,ctx:f}),r0.$set(O4e);const V5={};_&2&&(V5.$$scope={dirty:_,ctx:f}),a0.$set(V5);const V4e={};_&2&&(V4e.$$scope={dirty:_,ctx:f}),d0.$set(V4e);const X4e={};_&2&&(X4e.$$scope={dirty:_,ctx:f}),f0.$set(X4e);const X5={};_&2&&(X5.$$scope={dirty:_,ctx:f}),p0.$set(X5);const z4e={};_&2&&(z4e.$$scope={dirty:_,ctx:f}),_0.$set(z4e);const W4e={};_&2&&(W4e.$$scope={dirty:_,ctx:f}),F0.$set(W4e);const z5={};_&2&&(z5.$$scope={dirty:_,ctx:f}),M0.$set(z5);const Q4e={};_&2&&(Q4e.$$scope={dirty:_,ctx:f}),L0.$set(Q4e);const H4e={};_&2&&(H4e.$$scope={dirty:_,ctx:f}),$0.$set(H4e);const W5={};_&2&&(W5.$$scope={dirty:_,ctx:f}),R0.$set(W5);const U4e={};_&2&&(U4e.$$scope={dirty:_,ctx:f}),B0.$set(U4e);const J4e={};_&2&&(J4e.$$scope={dirty:_,ctx:f}),yT.$set(J4e);const Q5={};_&2&&(Q5.$$scope={dirty:_,ctx:f}),xT.$set(Q5);const Y4e={};_&2&&(Y4e.$$scope={dirty:_,ctx:f}),ZT.$set(Y4e);const K4e={};_&2&&(K4e.$$scope={dirty:_,ctx:f}),o7.$set(K4e);const H5={};_&2&&(H5.$$scope={dirty:_,ctx:f}),h7.$set(H5);const Z4e={};_&2&&(Z4e.$$scope={dirty:_,ctx:f}),u7.$set(Z4e);const eEe={};_&2&&(eEe.$$scope={dirty:_,ctx:f}),T7.$set(eEe);const U5={};_&2&&(U5.$$scope={dirty:_,ctx:f}),E7.$set(U5);const oEe={};_&2&&(oEe.$$scope={dirty:_,ctx:f}),X7.$set(oEe);const rEe={};_&2&&(rEe.$$scope={dirty:_,ctx:f}),W7.$set(rEe);const J5={};_&2&&(J5.$$scope={dirty:_,ctx:f}),tM.$set(J5);const tEe={};_&2&&(tEe.$$scope={dirty:_,ctx:f}),nM.$set(tEe);const aEe={};_&2&&(aEe.$$scope={dirty:_,ctx:f}),SM.$set(aEe);const Y5={};_&2&&(Y5.$$scope={dirty:_,ctx:f}),PM.$set(Y5);const nEe={};_&2&&(nEe.$$scope={dirty:_,ctx:f}),KM.$set(nEe);const sEe={};_&2&&(sEe.$$scope={dirty:_,ctx:f}),e4.$set(sEe);const K5={};_&2&&(K5.$$scope={dirty:_,ctx:f}),t4.$set(K5);const lEe={};_&2&&(lEe.$$scope={dirty:_,ctx:f}),n4.$set(lEe);const iEe={};_&2&&(iEe.$$scope={dirty:_,ctx:f}),l4.$set(iEe);const Z5={};_&2&&(Z5.$$scope={dirty:_,ctx:f}),d4.$set(Z5);const dEe={};_&2&&(dEe.$$scope={dirty:_,ctx:f}),$4.$set(dEe);const cEe={};_&2&&(cEe.$$scope={dirty:_,ctx:f}),S4.$set(cEe);const ew={};_&2&&(ew.$$scope={dirty:_,ctx:f}),Z4.$set(ew);const fEe={};_&2&&(fEe.$$scope={dirty:_,ctx:f}),oE.$set(fEe);const mEe={};_&2&&(mEe.$$scope={dirty:_,ctx:f}),tE.$set(mEe);const ow={};_&2&&(ow.$$scope={dirty:_,ctx:f}),nE.$set(ow);const gEe={};_&2&&(gEe.$$scope={dirty:_,ctx:f}),lE.$set(gEe);const hEe={};_&2&&(hEe.$$scope={dirty:_,ctx:f}),dE.$set(hEe);const rw={};_&2&&(rw.$$scope={dirty:_,ctx:f}),BE.$set(rw);const pEe={};_&2&&(pEe.$$scope={dirty:_,ctx:f}),qE.$set(pEe);const uEe={};_&2&&(uEe.$$scope={dirty:_,ctx:f}),QE.$set(uEe);const tw={};_&2&&(tw.$$scope={dirty:_,ctx:f}),UE.$set(tw);const _Ee={};_&2&&(_Ee.$$scope={dirty:_,ctx:f}),iC.$set(_Ee);const bEe={};_&2&&(bEe.$$scope={dirty:_,ctx:f}),cC.$set(bEe);const aw={};_&2&&(aw.$$scope={dirty:_,ctx:f}),TC.$set(aw);const vEe={};_&2&&(vEe.$$scope={dirty:_,ctx:f}),EC.$set(vEe);const FEe={};_&2&&(FEe.$$scope={dirty:_,ctx:f}),RC.$set(FEe);const nw={};_&2&&(nw.$$scope={dirty:_,ctx:f}),BC.$set(nw);const TEe={};_&2&&(TEe.$$scope={dirty:_,ctx:f}),WC.$set(TEe);const MEe={};_&2&&(MEe.$$scope={dirty:_,ctx:f}),HC.$set(MEe);const sw={};_&2&&(sw.$$scope={dirty:_,ctx:f}),n5.$set(sw);const EEe={};_&2&&(EEe.$$scope={dirty:_,ctx:f}),l5.$set(EEe);const CEe={};_&2&&(CEe.$$scope={dirty:_,ctx:f}),u5.$set(CEe);const lw={};_&2&&(lw.$$scope={dirty:_,ctx:f}),b5.$set(lw);const wEe={};_&2&&(wEe.$$scope={dirty:_,ctx:f}),y5.$set(wEe);const AEe={};_&2&&(AEe.$$scope={dirty:_,ctx:f}),x5.$set(AEe);const iw={};_&2&&(iw.$$scope={dirty:_,ctx:f}),k5.$set(iw);const yEe={};_&2&&(yEe.$$scope={dirty:_,ctx:f}),R5.$set(yEe);const LEe={};_&2&&(LEe.$$scope={dirty:_,ctx:f}),I5.$set(LEe);const dw={};_&2&&(dw.$$scope={dirty:_,ctx:f}),N5.$set(dw);const xEe={};_&2&&(xEe.$$scope={dirty:_,ctx:f}),D5.$set(xEe)},i(f){SNe||(E(d.$$.fragment,f),E(Ca.$$.fragment,f),E(i6.$$.fragment,f),E(d6.$$.fragment,f),E(vf.$$.fragment,f),E(c6.$$.fragment,f),E(f6.$$.fragment,f),E(h6.$$.fragment,f),E(bg.$$.fragment,f),E(p6.$$.fragment,f),E(u6.$$.fragment,f),E(_6.$$.fragment,f),E(F6.$$.fragment,f),E(Kg.$$.fragment,f),E(T6.$$.fragment,f),E(M6.$$.fragment,f),E(E6.$$.fragment,f),E(A6.$$.fragment,f),E(yh.$$.fragment,f),E(Lh.$$.fragment,f),E(y6.$$.fragment,f),E(L6.$$.fragment,f),E(x6.$$.fragment,f),E(S6.$$.fragment,f),E(Qh.$$.fragment,f),E(Hh.$$.fragment,f),E(R6.$$.fragment,f),E(P6.$$.fragment,f),E(B6.$$.fragment,f),E(q6.$$.fragment,f),E(Yh.$$.fragment,f),E(N6.$$.fragment,f),E(Ou.$$.fragment,f),E(j6.$$.fragment,f),E(D6.$$.fragment,f),E(O6.$$.fragment,f),E(Xu.$$.fragment,f),E(V6.$$.fragment,f),E(P_.$$.fragment,f),E(X6.$$.fragment,f),E(z6.$$.fragment,f),E(Q6.$$.fragment,f),E(I_.$$.fragment,f),E(H6.$$.fragment,f),E(F1.$$.fragment,f),E(U6.$$.fragment,f),E(J6.$$.fragment,f),E(K6.$$.fragment,f),E(M1.$$.fragment,f),E(Z6.$$.fragment,f),E(nb.$$.fragment,f),E(ey.$$.fragment,f),E(oy.$$.fragment,f),E(ty.$$.fragment,f),E(lb.$$.fragment,f),E(ay.$$.fragment,f),E(wb.$$.fragment,f),E(ny.$$.fragment,f),E(sy.$$.fragment,f),E(iy.$$.fragment,f),E(yb.$$.fragment,f),E(dy.$$.fragment,f),E(T2.$$.fragment,f),E(cy.$$.fragment,f),E(fy.$$.fragment,f),E(gy.$$.fragment,f),E(E2.$$.fragment,f),E(hy.$$.fragment,f),E(ev.$$.fragment,f),E(py.$$.fragment,f),E(uy.$$.fragment,f),E(by.$$.fragment,f),E(rv.$$.fragment,f),E(vy.$$.fragment,f),E(dv.$$.fragment,f),E(Fy.$$.fragment,f),E(Ty.$$.fragment,f),E(Ey.$$.fragment,f),E(fv.$$.fragment,f),E(Cy.$$.fragment,f),E(Wv.$$.fragment,f),E(wy.$$.fragment,f),E(Ay.$$.fragment,f),E(Ly.$$.fragment,f),E(Hv.$$.fragment,f),E(xy.$$.fragment,f),E(B3.$$.fragment,f),E($y.$$.fragment,f),E(ky.$$.fragment,f),E(Ry.$$.fragment,f),E(q3.$$.fragment,f),E(Py.$$.fragment,f),E(D3.$$.fragment,f),E(By.$$.fragment,f),E(Iy.$$.fragment,f),E(Ny.$$.fragment,f),E(O3.$$.fragment,f),E(jy.$$.fragment,f),E(oF.$$.fragment,f),E(Dy.$$.fragment,f),E(Gy.$$.fragment,f),E(Vy.$$.fragment,f),E(tF.$$.fragment,f),E(Xy.$$.fragment,f),E(sF.$$.fragment,f),E(zy.$$.fragment,f),E(Wy.$$.fragment,f),E(Hy.$$.fragment,f),E(iF.$$.fragment,f),E(Uy.$$.fragment,f),E(vF.$$.fragment,f),E(Jy.$$.fragment,f),E(Yy.$$.fragment,f),E(Zy.$$.fragment,f),E(TF.$$.fragment,f),E(eL.$$.fragment,f),E(LF.$$.fragment,f),E(oL.$$.fragment,f),E(rL.$$.fragment,f),E(aL.$$.fragment,f),E($F.$$.fragment,f),E(nL.$$.fragment,f),E(GF.$$.fragment,f),E(sL.$$.fragment,f),E(lL.$$.fragment,f),E(dL.$$.fragment,f),E(VF.$$.fragment,f),E(cL.$$.fragment,f),E(QF.$$.fragment,f),E(mL.$$.fragment,f),E(gL.$$.fragment,f),E(pL.$$.fragment,f),E(UF.$$.fragment,f),E(uL.$$.fragment,f),E(r0.$$.fragment,f),E(_L.$$.fragment,f),E(bL.$$.fragment,f),E(FL.$$.fragment,f),E(a0.$$.fragment,f),E(TL.$$.fragment,f),E(d0.$$.fragment,f),E(ML.$$.fragment,f),E(EL.$$.fragment,f),E(wL.$$.fragment,f),E(f0.$$.fragment,f),E(AL.$$.fragment,f),E(p0.$$.fragment,f),E(LL.$$.fragment,f),E(xL.$$.fragment,f),E(kL.$$.fragment,f),E(_0.$$.fragment,f),E(SL.$$.fragment,f),E(F0.$$.fragment,f),E(RL.$$.fragment,f),E(PL.$$.fragment,f),E(IL.$$.fragment,f),E(M0.$$.fragment,f),E(qL.$$.fragment,f),E(L0.$$.fragment,f),E(NL.$$.fragment,f),E(jL.$$.fragment,f),E(GL.$$.fragment,f),E($0.$$.fragment,f),E(OL.$$.fragment,f),E(R0.$$.fragment,f),E(VL.$$.fragment,f),E(XL.$$.fragment,f),E(WL.$$.fragment,f),E(B0.$$.fragment,f),E(QL.$$.fragment,f),E(yT.$$.fragment,f),E(HL.$$.fragment,f),E(UL.$$.fragment,f),E(YL.$$.fragment,f),E(xT.$$.fragment,f),E(KL.$$.fragment,f),E(ZT.$$.fragment,f),E(ZL.$$.fragment,f),E(e8.$$.fragment,f),E(r8.$$.fragment,f),E(o7.$$.fragment,f),E(t8.$$.fragment,f),E(h7.$$.fragment,f),E(a8.$$.fragment,f),E(n8.$$.fragment,f),E(l8.$$.fragment,f),E(u7.$$.fragment,f),E(i8.$$.fragment,f),E(T7.$$.fragment,f),E(d8.$$.fragment,f),E(c8.$$.fragment,f),E(m8.$$.fragment,f),E(E7.$$.fragment,f),E(g8.$$.fragment,f),E(X7.$$.fragment,f),E(h8.$$.fragment,f),E(p8.$$.fragment,f),E(_8.$$.fragment,f),E(W7.$$.fragment,f),E(b8.$$.fragment,f),E(tM.$$.fragment,f),E(v8.$$.fragment,f),E(F8.$$.fragment,f),E(M8.$$.fragment,f),E(nM.$$.fragment,f),E(E8.$$.fragment,f),E(SM.$$.fragment,f),E(C8.$$.fragment,f),E(w8.$$.fragment,f),E(y8.$$.fragment,f),E(PM.$$.fragment,f),E(L8.$$.fragment,f),E(KM.$$.fragment,f),E(x8.$$.fragment,f),E($8.$$.fragment,f),E(S8.$$.fragment,f),E(e4.$$.fragment,f),E(R8.$$.fragment,f),E(t4.$$.fragment,f),E(B8.$$.fragment,f),E(I8.$$.fragment,f),E(N8.$$.fragment,f),E(n4.$$.fragment,f),E(j8.$$.fragment,f),E(l4.$$.fragment,f),E(D8.$$.fragment,f),E(G8.$$.fragment,f),E(V8.$$.fragment,f),E(d4.$$.fragment,f),E(X8.$$.fragment,f),E($4.$$.fragment,f),E(z8.$$.fragment,f),E(W8.$$.fragment,f),E(H8.$$.fragment,f),E(S4.$$.fragment,f),E(U8.$$.fragment,f),E(Z4.$$.fragment,f),E(J8.$$.fragment,f),E(Y8.$$.fragment,f),E(Z8.$$.fragment,f),E(oE.$$.fragment,f),E(ex.$$.fragment,f),E(tE.$$.fragment,f),E(ox.$$.fragment,f),E(rx.$$.fragment,f),E(ax.$$.fragment,f),E(nE.$$.fragment,f),E(nx.$$.fragment,f),E(lE.$$.fragment,f),E(sx.$$.fragment,f),E(lx.$$.fragment,f),E(dx.$$.fragment,f),E(dE.$$.fragment,f),E(cx.$$.fragment,f),E(BE.$$.fragment,f),E(fx.$$.fragment,f),E(mx.$$.fragment,f),E(hx.$$.fragment,f),E(qE.$$.fragment,f),E(px.$$.fragment,f),E(QE.$$.fragment,f),E(ux.$$.fragment,f),E(_x.$$.fragment,f),E(vx.$$.fragment,f),E(UE.$$.fragment,f),E(Fx.$$.fragment,f),E(iC.$$.fragment,f),E(Tx.$$.fragment,f),E(Mx.$$.fragment,f),E(Cx.$$.fragment,f),E(cC.$$.fragment,f),E(wx.$$.fragment,f),E(TC.$$.fragment,f),E(Ax.$$.fragment,f),E(yx.$$.fragment,f),E(xx.$$.fragment,f),E(EC.$$.fragment,f),E($x.$$.fragment,f),E(RC.$$.fragment,f),E(kx.$$.fragment,f),E(Sx.$$.fragment,f),E(Px.$$.fragment,f),E(BC.$$.fragment,f),E(Bx.$$.fragment,f),E(WC.$$.fragment,f),E(Ix.$$.fragment,f),E(qx.$$.fragment,f),E(jx.$$.fragment,f),E(HC.$$.fragment,f),E(Dx.$$.fragment,f),E(n5.$$.fragment,f),E(Gx.$$.fragment,f),E(Ox.$$.fragment,f),E(Xx.$$.fragment,f),E(l5.$$.fragment,f),E(zx.$$.fragment,f),E(u5.$$.fragment,f),E(Wx.$$.fragment,f),E(Qx.$$.fragment,f),E(Ux.$$.fragment,f),E(b5.$$.fragment,f),E(Jx.$$.fragment,f),E(y5.$$.fragment,f),E(Yx.$$.fragment,f),E(Kx.$$.fragment,f),E(e9.$$.fragment,f),E(x5.$$.fragment,f),E(o9.$$.fragment,f),E(k5.$$.fragment,f),E(r9.$$.fragment,f),E(t9.$$.fragment,f),E(n9.$$.fragment,f),E(R5.$$.fragment,f),E(s9.$$.fragment,f),E(I5.$$.fragment,f),E(i9.$$.fragment,f),E(d9.$$.fragment,f),E(f9.$$.fragment,f),E(N5.$$.fragment,f),E(m9.$$.fragment,f),E(D5.$$.fragment,f),SNe=!0)},o(f){C(d.$$.fragment,f),C(Ca.$$.fragment,f),C(i6.$$.fragment,f),C(d6.$$.fragment,f),C(vf.$$.fragment,f),C(c6.$$.fragment,f),C(f6.$$.fragment,f),C(h6.$$.fragment,f),C(bg.$$.fragment,f),C(p6.$$.fragment,f),C(u6.$$.fragment,f),C(_6.$$.fragment,f),C(F6.$$.fragment,f),C(Kg.$$.fragment,f),C(T6.$$.fragment,f),C(M6.$$.fragment,f),C(E6.$$.fragment,f),C(A6.$$.fragment,f),C(yh.$$.fragment,f),C(Lh.$$.fragment,f),C(y6.$$.fragment,f),C(L6.$$.fragment,f),C(x6.$$.fragment,f),C(S6.$$.fragment,f),C(Qh.$$.fragment,f),C(Hh.$$.fragment,f),C(R6.$$.fragment,f),C(P6.$$.fragment,f),C(B6.$$.fragment,f),C(q6.$$.fragment,f),C(Yh.$$.fragment,f),C(N6.$$.fragment,f),C(Ou.$$.fragment,f),C(j6.$$.fragment,f),C(D6.$$.fragment,f),C(O6.$$.fragment,f),C(Xu.$$.fragment,f),C(V6.$$.fragment,f),C(P_.$$.fragment,f),C(X6.$$.fragment,f),C(z6.$$.fragment,f),C(Q6.$$.fragment,f),C(I_.$$.fragment,f),C(H6.$$.fragment,f),C(F1.$$.fragment,f),C(U6.$$.fragment,f),C(J6.$$.fragment,f),C(K6.$$.fragment,f),C(M1.$$.fragment,f),C(Z6.$$.fragment,f),C(nb.$$.fragment,f),C(ey.$$.fragment,f),C(oy.$$.fragment,f),C(ty.$$.fragment,f),C(lb.$$.fragment,f),C(ay.$$.fragment,f),C(wb.$$.fragment,f),C(ny.$$.fragment,f),C(sy.$$.fragment,f),C(iy.$$.fragment,f),C(yb.$$.fragment,f),C(dy.$$.fragment,f),C(T2.$$.fragment,f),C(cy.$$.fragment,f),C(fy.$$.fragment,f),C(gy.$$.fragment,f),C(E2.$$.fragment,f),C(hy.$$.fragment,f),C(ev.$$.fragment,f),C(py.$$.fragment,f),C(uy.$$.fragment,f),C(by.$$.fragment,f),C(rv.$$.fragment,f),C(vy.$$.fragment,f),C(dv.$$.fragment,f),C(Fy.$$.fragment,f),C(Ty.$$.fragment,f),C(Ey.$$.fragment,f),C(fv.$$.fragment,f),C(Cy.$$.fragment,f),C(Wv.$$.fragment,f),C(wy.$$.fragment,f),C(Ay.$$.fragment,f),C(Ly.$$.fragment,f),C(Hv.$$.fragment,f),C(xy.$$.fragment,f),C(B3.$$.fragment,f),C($y.$$.fragment,f),C(ky.$$.fragment,f),C(Ry.$$.fragment,f),C(q3.$$.fragment,f),C(Py.$$.fragment,f),C(D3.$$.fragment,f),C(By.$$.fragment,f),C(Iy.$$.fragment,f),C(Ny.$$.fragment,f),C(O3.$$.fragment,f),C(jy.$$.fragment,f),C(oF.$$.fragment,f),C(Dy.$$.fragment,f),C(Gy.$$.fragment,f),C(Vy.$$.fragment,f),C(tF.$$.fragment,f),C(Xy.$$.fragment,f),C(sF.$$.fragment,f),C(zy.$$.fragment,f),C(Wy.$$.fragment,f),C(Hy.$$.fragment,f),C(iF.$$.fragment,f),C(Uy.$$.fragment,f),C(vF.$$.fragment,f),C(Jy.$$.fragment,f),C(Yy.$$.fragment,f),C(Zy.$$.fragment,f),C(TF.$$.fragment,f),C(eL.$$.fragment,f),C(LF.$$.fragment,f),C(oL.$$.fragment,f),C(rL.$$.fragment,f),C(aL.$$.fragment,f),C($F.$$.fragment,f),C(nL.$$.fragment,f),C(GF.$$.fragment,f),C(sL.$$.fragment,f),C(lL.$$.fragment,f),C(dL.$$.fragment,f),C(VF.$$.fragment,f),C(cL.$$.fragment,f),C(QF.$$.fragment,f),C(mL.$$.fragment,f),C(gL.$$.fragment,f),C(pL.$$.fragment,f),C(UF.$$.fragment,f),C(uL.$$.fragment,f),C(r0.$$.fragment,f),C(_L.$$.fragment,f),C(bL.$$.fragment,f),C(FL.$$.fragment,f),C(a0.$$.fragment,f),C(TL.$$.fragment,f),C(d0.$$.fragment,f),C(ML.$$.fragment,f),C(EL.$$.fragment,f),C(wL.$$.fragment,f),C(f0.$$.fragment,f),C(AL.$$.fragment,f),C(p0.$$.fragment,f),C(LL.$$.fragment,f),C(xL.$$.fragment,f),C(kL.$$.fragment,f),C(_0.$$.fragment,f),C(SL.$$.fragment,f),C(F0.$$.fragment,f),C(RL.$$.fragment,f),C(PL.$$.fragment,f),C(IL.$$.fragment,f),C(M0.$$.fragment,f),C(qL.$$.fragment,f),C(L0.$$.fragment,f),C(NL.$$.fragment,f),C(jL.$$.fragment,f),C(GL.$$.fragment,f),C($0.$$.fragment,f),C(OL.$$.fragment,f),C(R0.$$.fragment,f),C(VL.$$.fragment,f),C(XL.$$.fragment,f),C(WL.$$.fragment,f),C(B0.$$.fragment,f),C(QL.$$.fragment,f),C(yT.$$.fragment,f),C(HL.$$.fragment,f),C(UL.$$.fragment,f),C(YL.$$.fragment,f),C(xT.$$.fragment,f),C(KL.$$.fragment,f),C(ZT.$$.fragment,f),C(ZL.$$.fragment,f),C(e8.$$.fragment,f),C(r8.$$.fragment,f),C(o7.$$.fragment,f),C(t8.$$.fragment,f),C(h7.$$.fragment,f),C(a8.$$.fragment,f),C(n8.$$.fragment,f),C(l8.$$.fragment,f),C(u7.$$.fragment,f),C(i8.$$.fragment,f),C(T7.$$.fragment,f),C(d8.$$.fragment,f),C(c8.$$.fragment,f),C(m8.$$.fragment,f),C(E7.$$.fragment,f),C(g8.$$.fragment,f),C(X7.$$.fragment,f),C(h8.$$.fragment,f),C(p8.$$.fragment,f),C(_8.$$.fragment,f),C(W7.$$.fragment,f),C(b8.$$.fragment,f),C(tM.$$.fragment,f),C(v8.$$.fragment,f),C(F8.$$.fragment,f),C(M8.$$.fragment,f),C(nM.$$.fragment,f),C(E8.$$.fragment,f),C(SM.$$.fragment,f),C(C8.$$.fragment,f),C(w8.$$.fragment,f),C(y8.$$.fragment,f),C(PM.$$.fragment,f),C(L8.$$.fragment,f),C(KM.$$.fragment,f),C(x8.$$.fragment,f),C($8.$$.fragment,f),C(S8.$$.fragment,f),C(e4.$$.fragment,f),C(R8.$$.fragment,f),C(t4.$$.fragment,f),C(B8.$$.fragment,f),C(I8.$$.fragment,f),C(N8.$$.fragment,f),C(n4.$$.fragment,f),C(j8.$$.fragment,f),C(l4.$$.fragment,f),C(D8.$$.fragment,f),C(G8.$$.fragment,f),C(V8.$$.fragment,f),C(d4.$$.fragment,f),C(X8.$$.fragment,f),C($4.$$.fragment,f),C(z8.$$.fragment,f),C(W8.$$.fragment,f),C(H8.$$.fragment,f),C(S4.$$.fragment,f),C(U8.$$.fragment,f),C(Z4.$$.fragment,f),C(J8.$$.fragment,f),C(Y8.$$.fragment,f),C(Z8.$$.fragment,f),C(oE.$$.fragment,f),C(ex.$$.fragment,f),C(tE.$$.fragment,f),C(ox.$$.fragment,f),C(rx.$$.fragment,f),C(ax.$$.fragment,f),C(nE.$$.fragment,f),C(nx.$$.fragment,f),C(lE.$$.fragment,f),C(sx.$$.fragment,f),C(lx.$$.fragment,f),C(dx.$$.fragment,f),C(dE.$$.fragment,f),C(cx.$$.fragment,f),C(BE.$$.fragment,f),C(fx.$$.fragment,f),C(mx.$$.fragment,f),C(hx.$$.fragment,f),C(qE.$$.fragment,f),C(px.$$.fragment,f),C(QE.$$.fragment,f),C(ux.$$.fragment,f),C(_x.$$.fragment,f),C(vx.$$.fragment,f),C(UE.$$.fragment,f),C(Fx.$$.fragment,f),C(iC.$$.fragment,f),C(Tx.$$.fragment,f),C(Mx.$$.fragment,f),C(Cx.$$.fragment,f),C(cC.$$.fragment,f),C(wx.$$.fragment,f),C(TC.$$.fragment,f),C(Ax.$$.fragment,f),C(yx.$$.fragment,f),C(xx.$$.fragment,f),C(EC.$$.fragment,f),C($x.$$.fragment,f),C(RC.$$.fragment,f),C(kx.$$.fragment,f),C(Sx.$$.fragment,f),C(Px.$$.fragment,f),C(BC.$$.fragment,f),C(Bx.$$.fragment,f),C(WC.$$.fragment,f),C(Ix.$$.fragment,f),C(qx.$$.fragment,f),C(jx.$$.fragment,f),C(HC.$$.fragment,f),C(Dx.$$.fragment,f),C(n5.$$.fragment,f),C(Gx.$$.fragment,f),C(Ox.$$.fragment,f),C(Xx.$$.fragment,f),C(l5.$$.fragment,f),C(zx.$$.fragment,f),C(u5.$$.fragment,f),C(Wx.$$.fragment,f),C(Qx.$$.fragment,f),C(Ux.$$.fragment,f),C(b5.$$.fragment,f),C(Jx.$$.fragment,f),C(y5.$$.fragment,f),C(Yx.$$.fragment,f),C(Kx.$$.fragment,f),C(e9.$$.fragment,f),C(x5.$$.fragment,f),C(o9.$$.fragment,f),C(k5.$$.fragment,f),C(r9.$$.fragment,f),C(t9.$$.fragment,f),C(n9.$$.fragment,f),C(R5.$$.fragment,f),C(s9.$$.fragment,f),C(I5.$$.fragment,f),C(i9.$$.fragment,f),C(d9.$$.fragment,f),C(f9.$$.fragment,f),C(N5.$$.fragment,f),C(m9.$$.fragment,f),C(D5.$$.fragment,f),SNe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(hf),f&&t(rt),f&&t(je),f&&t(We),f&&t(uf),w(Ca,f),f&&t(Qe),f&&t(Ae),f&&t(Eo),f&&t(wa),f&&t(xIe),f&&t(_i),w(i6),f&&t($Ie),f&&t(kn),f&&t(kIe),w(d6,f),f&&t(SIe),f&&t($$),f&&t(RIe),w(vf,f),f&&t(PIe),f&&t(bi),w(c6),f&&t(BIe),f&&t(Co),w(f6),w(h6),w(bg),w(p6),f&&t(IIe),f&&t(Fi),w(u6),f&&t(qIe),f&&t(wo),w(_6),w(F6),w(Kg),w(T6),f&&t(NIe),f&&t(Ti),w(M6),f&&t(jIe),f&&t(Ao),w(E6),w(A6),w(yh),w(Lh),w(y6),f&&t(DIe),f&&t(Mi),w(L6),f&&t(GIe),f&&t(yo),w(x6),w(S6),w(Qh),w(Hh),w(R6),f&&t(OIe),f&&t(Ci),w(P6),f&&t(VIe),f&&t(Lo),w(B6),w(q6),w(Yh),w(N6),w(Ou),f&&t(XIe),f&&t(yi),w(j6),f&&t(zIe),f&&t(xo),w(D6),w(O6),w(Xu),w(V6),w(P_),f&&t(WIe),f&&t($i),w(X6),f&&t(QIe),f&&t($o),w(z6),w(Q6),w(I_),w(H6),w(F1),f&&t(HIe),f&&t(Ri),w(U6),f&&t(UIe),f&&t(ko),w(J6),w(K6),w(M1),w(Z6),w(nb),f&&t(JIe),f&&t(Ii),w(ey),f&&t(YIe),f&&t(So),w(oy),w(ty),w(lb),w(ay),w(wb),f&&t(KIe),f&&t(ji),w(ny),f&&t(ZIe),f&&t(Ro),w(sy),w(iy),w(yb),w(dy),w(T2),f&&t(eqe),f&&t(Oi),w(cy),f&&t(oqe),f&&t(Po),w(fy),w(gy),w(E2),w(hy),w(ev),f&&t(rqe),f&&t(zi),w(py),f&&t(tqe),f&&t(Bo),w(uy),w(by),w(rv),w(vy),w(dv),f&&t(aqe),f&&t(Hi),w(Fy),f&&t(nqe),f&&t(Io),w(Ty),w(Ey),w(fv),w(Cy),w(Wv),f&&t(sqe),f&&t(Yi),w(wy),f&&t(lqe),f&&t(qo),w(Ay),w(Ly),w(Hv),w(xy),w(B3),f&&t(iqe),f&&t(ed),w($y),f&&t(dqe),f&&t(No),w(ky),w(Ry),w(q3),w(Py),w(D3),f&&t(cqe),f&&t(td),w(By),f&&t(fqe),f&&t(jo),w(Iy),w(Ny),w(O3),w(jy),w(oF),f&&t(mqe),f&&t(sd),w(Dy),f&&t(gqe),f&&t(Do),w(Gy),w(Vy),w(tF),w(Xy),w(sF),f&&t(hqe),f&&t(dd),w(zy),f&&t(pqe),f&&t(Go),w(Wy),w(Hy),w(iF),w(Uy),w(vF),f&&t(uqe),f&&t(md),w(Jy),f&&t(_qe),f&&t(Oo),w(Yy),w(Zy),w(TF),w(eL),w(LF),f&&t(bqe),f&&t(pd),w(oL),f&&t(vqe),f&&t(Vo),w(rL),w(aL),w($F),w(nL),w(GF),f&&t(Fqe),f&&t(bd),w(sL),f&&t(Tqe),f&&t(Xo),w(lL),w(dL),w(VF),w(cL),w(QF),f&&t(Mqe),f&&t(Td),w(mL),f&&t(Eqe),f&&t(zo),w(gL),w(pL),w(UF),w(uL),w(r0),f&&t(Cqe),f&&t(Cd),w(_L),f&&t(wqe),f&&t(Wo),w(bL),w(FL),w(a0),w(TL),w(d0),f&&t(Aqe),f&&t(Ld),w(ML),f&&t(yqe),f&&t(Qo),w(EL),w(wL),w(f0),w(AL),w(p0),f&&t(Lqe),f&&t(kd),w(LL),f&&t(xqe),f&&t(Ho),w(xL),w(kL),w(_0),w(SL),w(F0),f&&t($qe),f&&t(Pd),w(RL),f&&t(kqe),f&&t(Uo),w(PL),w(IL),w(M0),w(qL),w(L0),f&&t(Sqe),f&&t(qd),w(NL),f&&t(Rqe),f&&t(Jo),w(jL),w(GL),w($0),w(OL),w(R0),f&&t(Pqe),f&&t(Dd),w(VL),f&&t(Bqe),f&&t(Yo),w(XL),w(WL),w(B0),w(QL),w(yT),f&&t(Iqe),f&&t(Vd),w(HL),f&&t(qqe),f&&t(Ko),w(UL),w(YL),w(xT),w(KL),w(ZT),f&&t(Nqe),f&&t(Wd),w(ZL),f&&t(jqe),f&&t(Zo),w(e8),w(r8),w(o7),w(t8),w(h7),f&&t(Dqe),f&&t(Ud),w(a8),f&&t(Gqe),f&&t(er),w(n8),w(l8),w(u7),w(i8),w(T7),f&&t(Oqe),f&&t(Kd),w(d8),f&&t(Vqe),f&&t(or),w(c8),w(m8),w(E7),w(g8),w(X7),f&&t(Xqe),f&&t(oc),w(h8),f&&t(zqe),f&&t(rr),w(p8),w(_8),w(W7),w(b8),w(tM),f&&t(Wqe),f&&t(ac),w(v8),f&&t(Qqe),f&&t(tr),w(F8),w(M8),w(nM),w(E8),w(SM),f&&t(Hqe),f&&t(lc),w(C8),f&&t(Uqe),f&&t(ar),w(w8),w(y8),w(PM),w(L8),w(KM),f&&t(Jqe),f&&t(cc),w(x8),f&&t(Yqe),f&&t(nr),w($8),w(S8),w(e4),w(R8),w(t4),f&&t(Kqe),f&&t(gc),w(B8),f&&t(Zqe),f&&t(sr),w(I8),w(N8),w(n4),w(j8),w(l4),f&&t(eNe),f&&t(uc),w(D8),f&&t(oNe),f&&t(lr),w(G8),w(V8),w(d4),w(X8),w($4),f&&t(rNe),f&&t(vc),w(z8),f&&t(tNe),f&&t(ir),w(W8),w(H8),w(S4),w(U8),w(Z4),f&&t(aNe),f&&t(Mc),w(J8),f&&t(nNe),f&&t(dr),w(Y8),w(Z8),w(oE),w(ex),w(tE),f&&t(sNe),f&&t(wc),w(ox),f&&t(lNe),f&&t(cr),w(rx),w(ax),w(nE),w(nx),w(lE),f&&t(iNe),f&&t(Lc),w(sx),f&&t(dNe),f&&t(fr),w(lx),w(dx),w(dE),w(cx),w(BE),f&&t(cNe),f&&t(kc),w(fx),f&&t(fNe),f&&t(mr),w(mx),w(hx),w(qE),w(px),w(QE),f&&t(mNe),f&&t(Pc),w(ux),f&&t(gNe),f&&t(gr),w(_x),w(vx),w(UE),w(Fx),w(iC),f&&t(hNe),f&&t(qc),w(Tx),f&&t(pNe),f&&t(hr),w(Mx),w(Cx),w(cC),w(wx),w(TC),f&&t(uNe),f&&t(Dc),w(Ax),f&&t(_Ne),f&&t(pr),w(yx),w(xx),w(EC),w($x),w(RC),f&&t(bNe),f&&t(Vc),w(kx),f&&t(vNe),f&&t(ur),w(Sx),w(Px),w(BC),w(Bx),w(WC),f&&t(FNe),f&&t(Wc),w(Ix),f&&t(TNe),f&&t(_r),w(qx),w(jx),w(HC),w(Dx),w(n5),f&&t(MNe),f&&t(Uc),w(Gx),f&&t(ENe),f&&t(br),w(Ox),w(Xx),w(l5),w(zx),w(u5),f&&t(CNe),f&&t(Kc),w(Wx),f&&t(wNe),f&&t(vr),w(Qx),w(Ux),w(b5),w(Jx),w(y5),f&&t(ANe),f&&t(of),w(Yx),f&&t(yNe),f&&t(Fr),w(Kx),w(e9),w(x5),w(o9),w(k5),f&&t(LNe),f&&t(af),w(r9),f&&t(xNe),f&&t(Tr),w(t9),w(n9),w(R5),w(s9),w(I5),f&&t($Ne),f&&t(lf),w(i9),f&&t(kNe),f&&t(Mr),w(d9),w(f9),w(N5),w(m9),w(D5)}}}const mxt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function gxt(L){return gLt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Fxt extends dLt{constructor(g){super();cLt(this,g,gxt,fxt,fLt,{})}}export{Fxt as default,mxt as metadata};
