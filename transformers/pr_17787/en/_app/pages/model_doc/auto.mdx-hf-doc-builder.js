import{S as iVt,i as dVt,s as cVt,e as a,k as l,w as F,t as o,M as fVt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as mVt,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as het}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as re}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function gVt($){let g,v,p,m,_,d,h,Eo,Ei,$f,at,Ci,wi,q6,kf,Oe,Qe,Ai,Rn,j6,Pn,Bn,D6,Li,In,G6,yi,Sf,xa;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Eo=o(`, make sure its
`),Ei=a("code"),$f=o("model_type"),at=o(" attribute is set to the same key you use when registering the config (here "),Ci=a("code"),wi=o('"new-model"'),q6=o(")."),kf=l(),Oe=a("p"),Qe=o("Likewise, if your "),Ai=a("code"),Rn=o("NewModel"),j6=o(" is a subclass of "),Pn=a("a"),Bn=o("PreTrainedModel"),D6=o(`, make sure its
`),Li=a("code"),In=o("config_class"),G6=o(` attribute is set to the same class you use when registering the model (here
`),yi=a("code"),Sf=o("NewModelConfig"),xa=o(")."),this.h()},l(We){g=n(We,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var uS=s(p);m=r(uS,"NewModelConfig"),uS.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var xi=s(d);h=r(xi,"PretrainedConfig"),xi.forEach(t),Eo=r(Ae,`, make sure its
`),Ei=n(Ae,"CODE",{});var bS=s(Ei);$f=r(bS,"model_type"),bS.forEach(t),at=r(Ae," attribute is set to the same key you use when registering the config (here "),Ci=n(Ae,"CODE",{});var vS=s(Ci);wi=r(vS,'"new-model"'),vS.forEach(t),q6=r(Ae,")."),Ae.forEach(t),kf=i(We),Oe=n(We,"P",{});var Co=s(Oe);Qe=r(Co,"Likewise, if your "),Ai=n(Co,"CODE",{});var $a=s(Ai);Rn=r($a,"NewModel"),$a.forEach(t),j6=r(Co," is a subclass of "),Pn=n(Co,"A",{href:!0});var FS=s(Pn);Bn=r(FS,"PreTrainedModel"),FS.forEach(t),D6=r(Co,`, make sure its
`),Li=n(Co,"CODE",{});var Rf=s(Li);In=r(Rf,"config_class"),Rf.forEach(t),G6=r(Co,` attribute is set to the same class you use when registering the model (here
`),yi=n(Co,"CODE",{});var TS=s(yi);Sf=r(TS,"NewModelConfig"),TS.forEach(t),xa=r(Co,")."),Co.forEach(t),this.h()},h(){c(Pn,"href","/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel")},m(We,Ae){b(We,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Eo),e(g,Ei),e(Ei,$f),e(g,at),e(g,Ci),e(Ci,wi),e(g,q6),b(We,kf,Ae),b(We,Oe,Ae),e(Oe,Qe),e(Oe,Ai),e(Ai,Rn),e(Oe,j6),e(Oe,Pn),e(Pn,Bn),e(Oe,D6),e(Oe,Li),e(Li,In),e(Oe,G6),e(Oe,yi),e(yi,Sf),e(Oe,xa)},d(We){We&&t(g),We&&t(kf),We&&t(Oe)}}}function hVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Vt($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Eo=s(p);m=r(Eo,"use_auth_token=True"),Eo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function uVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bVt($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Eo=s(p);m=r(Eo,"use_auth_token=True"),Eo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function vVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Vt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Xt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Xt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ezt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ozt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rzt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tzt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function azt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nzt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function szt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lzt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function izt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dzt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function czt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fzt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mzt($){let g,v,p,m,_,d,h,Eo,Ei,$f,at,Ci,wi,q6,kf,Oe,Qe,Ai,Rn,j6,Pn,Bn,D6,Li,In,G6,yi,Sf,xa,We,Ae,uS,xi,bS,vS,Co,$a,FS,Rf,TS,eWe,jOe,$i,Pf,Ote,O6,oWe,Vte,rWe,DOe,Nn,tWe,Xte,aWe,nWe,zte,sWe,lWe,GOe,V6,OOe,MS,iWe,VOe,Bf,XOe,ki,If,Qte,X6,dWe,Wte,cWe,zOe,wo,z6,fWe,Q6,mWe,ES,gWe,hWe,pWe,W6,_We,Hte,uWe,bWe,vWe,Ar,H6,FWe,Ute,TWe,MWe,Si,EWe,Jte,CWe,wWe,Yte,AWe,LWe,yWe,A,Nf,Kte,xWe,$We,CS,kWe,SWe,RWe,qf,Zte,PWe,BWe,wS,IWe,NWe,qWe,jf,eae,jWe,DWe,AS,GWe,OWe,VWe,Df,oae,XWe,zWe,LS,QWe,WWe,HWe,Gf,rae,UWe,JWe,yS,YWe,KWe,ZWe,Of,tae,eHe,oHe,xS,rHe,tHe,aHe,Vf,aae,nHe,sHe,$S,lHe,iHe,dHe,Xf,nae,cHe,fHe,kS,mHe,gHe,hHe,zf,sae,pHe,_He,SS,uHe,bHe,vHe,Qf,lae,FHe,THe,RS,MHe,EHe,CHe,Wf,iae,wHe,AHe,PS,LHe,yHe,xHe,Hf,dae,$He,kHe,BS,SHe,RHe,PHe,Uf,cae,BHe,IHe,IS,NHe,qHe,jHe,Jf,fae,DHe,GHe,NS,OHe,VHe,XHe,Yf,mae,zHe,QHe,qS,WHe,HHe,UHe,Kf,gae,JHe,YHe,jS,KHe,ZHe,eUe,Zf,hae,oUe,rUe,DS,tUe,aUe,nUe,em,pae,sUe,lUe,GS,iUe,dUe,cUe,om,_ae,fUe,mUe,OS,gUe,hUe,pUe,rm,uae,_Ue,uUe,VS,bUe,vUe,FUe,tm,bae,TUe,MUe,XS,EUe,CUe,wUe,am,vae,AUe,LUe,zS,yUe,xUe,$Ue,nm,Fae,kUe,SUe,QS,RUe,PUe,BUe,sm,Tae,IUe,NUe,WS,qUe,jUe,DUe,lm,Mae,GUe,OUe,HS,VUe,XUe,zUe,im,Eae,QUe,WUe,US,HUe,UUe,JUe,dm,Cae,YUe,KUe,JS,ZUe,eJe,oJe,cm,wae,rJe,tJe,YS,aJe,nJe,sJe,fm,Aae,lJe,iJe,KS,dJe,cJe,fJe,mm,Lae,mJe,gJe,ZS,hJe,pJe,_Je,gm,yae,uJe,bJe,eR,vJe,FJe,TJe,hm,xae,MJe,EJe,oR,CJe,wJe,AJe,pm,$ae,LJe,yJe,rR,xJe,$Je,kJe,_m,kae,SJe,RJe,tR,PJe,BJe,IJe,um,Sae,NJe,qJe,aR,jJe,DJe,GJe,bm,Rae,OJe,VJe,nR,XJe,zJe,QJe,vm,Pae,WJe,HJe,sR,UJe,JJe,YJe,Fm,Bae,KJe,ZJe,lR,eYe,oYe,rYe,Tm,Iae,tYe,aYe,iR,nYe,sYe,lYe,Mm,Nae,iYe,dYe,dR,cYe,fYe,mYe,Em,qae,gYe,hYe,cR,pYe,_Ye,uYe,Cm,jae,bYe,vYe,fR,FYe,TYe,MYe,wm,Dae,EYe,CYe,mR,wYe,AYe,LYe,Am,Gae,yYe,xYe,gR,$Ye,kYe,SYe,Lm,Oae,RYe,PYe,hR,BYe,IYe,NYe,ym,Vae,qYe,jYe,pR,DYe,GYe,OYe,xm,Xae,VYe,XYe,_R,zYe,QYe,WYe,$m,zae,HYe,UYe,uR,JYe,YYe,KYe,km,Qae,ZYe,eKe,bR,oKe,rKe,tKe,Sm,Wae,aKe,nKe,vR,sKe,lKe,iKe,Rm,Hae,dKe,cKe,FR,fKe,mKe,gKe,Pm,Uae,hKe,pKe,TR,_Ke,uKe,bKe,Bm,Jae,vKe,FKe,MR,TKe,MKe,EKe,Im,Yae,CKe,wKe,ER,AKe,LKe,yKe,Nm,Kae,xKe,$Ke,CR,kKe,SKe,RKe,qm,Zae,PKe,BKe,wR,IKe,NKe,qKe,jm,ene,jKe,DKe,AR,GKe,OKe,VKe,Dm,one,XKe,zKe,LR,QKe,WKe,HKe,Gm,rne,UKe,JKe,yR,YKe,KKe,ZKe,Om,tne,eZe,oZe,xR,rZe,tZe,aZe,Vm,ane,nZe,sZe,$R,lZe,iZe,dZe,Xm,nne,cZe,fZe,kR,mZe,gZe,hZe,zm,sne,pZe,_Ze,SR,uZe,bZe,vZe,Qm,lne,FZe,TZe,RR,MZe,EZe,CZe,Wm,ine,wZe,AZe,PR,LZe,yZe,xZe,Hm,dne,$Ze,kZe,BR,SZe,RZe,PZe,Um,cne,BZe,IZe,IR,NZe,qZe,jZe,Jm,fne,DZe,GZe,NR,OZe,VZe,XZe,Ym,mne,zZe,QZe,qR,WZe,HZe,UZe,Km,gne,JZe,YZe,jR,KZe,ZZe,eeo,Zm,hne,oeo,reo,DR,teo,aeo,neo,eg,pne,seo,leo,GR,ieo,deo,ceo,og,_ne,feo,meo,OR,geo,heo,peo,rg,une,_eo,ueo,VR,beo,veo,Feo,tg,bne,Teo,Meo,XR,Eeo,Ceo,weo,ag,vne,Aeo,Leo,zR,yeo,xeo,$eo,ng,Fne,keo,Seo,QR,Reo,Peo,Beo,sg,Tne,Ieo,Neo,WR,qeo,jeo,Deo,lg,Mne,Geo,Oeo,HR,Veo,Xeo,zeo,ig,Ene,Qeo,Weo,UR,Heo,Ueo,Jeo,dg,Cne,Yeo,Keo,JR,Zeo,eoo,ooo,cg,wne,roo,too,YR,aoo,noo,soo,fg,Ane,loo,ioo,KR,doo,coo,foo,mg,Lne,moo,goo,ZR,hoo,poo,_oo,gg,yne,uoo,boo,eP,voo,Foo,Too,hg,xne,Moo,Eoo,oP,Coo,woo,Aoo,pg,$ne,Loo,yoo,rP,xoo,$oo,koo,_g,kne,Soo,Roo,tP,Poo,Boo,Ioo,ug,Sne,Noo,qoo,aP,joo,Doo,Goo,bg,Rne,Ooo,Voo,nP,Xoo,zoo,Qoo,vg,Pne,Woo,Hoo,sP,Uoo,Joo,Yoo,Fg,Bne,Koo,Zoo,lP,ero,oro,rro,Tg,Ine,tro,aro,iP,nro,sro,lro,Mg,Nne,iro,dro,dP,cro,fro,mro,Eg,qne,gro,hro,cP,pro,_ro,uro,Cg,jne,bro,vro,fP,Fro,Tro,Mro,wg,Dne,Ero,Cro,mP,wro,Aro,Lro,Ag,Gne,yro,xro,gP,$ro,kro,Sro,Lg,One,Rro,Pro,hP,Bro,Iro,Nro,yg,Vne,qro,jro,pP,Dro,Gro,Oro,xg,Xne,Vro,Xro,_P,zro,Qro,Wro,$g,zne,Hro,Uro,uP,Jro,Yro,Kro,kg,Qne,Zro,eto,bP,oto,rto,tto,Sg,Wne,ato,nto,vP,sto,lto,ito,Rg,Hne,dto,cto,FP,fto,mto,gto,Pg,Une,hto,pto,TP,_to,uto,bto,Bg,Jne,vto,Fto,MP,Tto,Mto,Eto,Ig,Yne,Cto,wto,EP,Ato,Lto,yto,Ng,Kne,xto,$to,CP,kto,Sto,Rto,qg,Zne,Pto,Bto,wP,Ito,Nto,qto,jg,ese,jto,Dto,AP,Gto,Oto,Vto,Dg,ose,Xto,zto,LP,Qto,Wto,Hto,Gg,rse,Uto,Jto,yP,Yto,Kto,Zto,Og,tse,eao,oao,xP,rao,tao,aao,Vg,ase,nao,sao,$P,lao,iao,dao,Xg,nse,cao,fao,kP,mao,gao,hao,zg,pao,Qg,U6,_ao,sse,uao,QOe,Ri,Wg,lse,J6,bao,ise,vao,WOe,Ao,Y6,Fao,K6,Tao,SP,Mao,Eao,Cao,Z6,wao,dse,Aao,Lao,yao,Lr,eL,xao,cse,$ao,kao,ka,Sao,fse,Rao,Pao,mse,Bao,Iao,gse,Nao,qao,jao,k,qn,hse,Dao,Gao,RP,Oao,Vao,PP,Xao,zao,Qao,jn,pse,Wao,Hao,BP,Uao,Jao,IP,Yao,Kao,Zao,Dn,_se,eno,ono,NP,rno,tno,qP,ano,nno,sno,Hg,use,lno,ino,jP,dno,cno,fno,Gn,bse,mno,gno,DP,hno,pno,GP,_no,uno,bno,Ug,vse,vno,Fno,OP,Tno,Mno,Eno,Jg,Fse,Cno,wno,VP,Ano,Lno,yno,Yg,Tse,xno,$no,XP,kno,Sno,Rno,On,Mse,Pno,Bno,zP,Ino,Nno,QP,qno,jno,Dno,Vn,Ese,Gno,Ono,WP,Vno,Xno,HP,zno,Qno,Wno,Xn,Cse,Hno,Uno,UP,Jno,Yno,JP,Kno,Zno,eso,Kg,wse,oso,rso,YP,tso,aso,nso,Zg,Ase,sso,lso,KP,iso,dso,cso,eh,Lse,fso,mso,ZP,gso,hso,pso,zn,yse,_so,uso,eB,bso,vso,oB,Fso,Tso,Mso,oh,xse,Eso,Cso,rB,wso,Aso,Lso,Qn,$se,yso,xso,tB,$so,kso,aB,Sso,Rso,Pso,Wn,kse,Bso,Iso,nB,Nso,qso,sB,jso,Dso,Gso,Hn,Sse,Oso,Vso,lB,Xso,zso,iB,Qso,Wso,Hso,Un,Rse,Uso,Jso,dB,Yso,Kso,cB,Zso,elo,olo,rh,Pse,rlo,tlo,fB,alo,nlo,slo,Jn,Bse,llo,ilo,mB,dlo,clo,gB,flo,mlo,glo,Yn,Ise,hlo,plo,hB,_lo,ulo,pB,blo,vlo,Flo,Kn,Nse,Tlo,Mlo,_B,Elo,Clo,uB,wlo,Alo,Llo,Zn,qse,ylo,xlo,bB,$lo,klo,vB,Slo,Rlo,Plo,es,jse,Blo,Ilo,FB,Nlo,qlo,TB,jlo,Dlo,Glo,os,Dse,Olo,Vlo,MB,Xlo,zlo,EB,Qlo,Wlo,Hlo,th,Gse,Ulo,Jlo,CB,Ylo,Klo,Zlo,rs,Ose,eio,oio,wB,rio,tio,AB,aio,nio,sio,ah,Vse,lio,iio,LB,dio,cio,fio,ts,Xse,mio,gio,yB,hio,pio,xB,_io,uio,bio,as,zse,vio,Fio,$B,Tio,Mio,kB,Eio,Cio,wio,ns,Qse,Aio,Lio,SB,yio,xio,RB,$io,kio,Sio,nh,Wse,Rio,Pio,PB,Bio,Iio,Nio,ss,Hse,qio,jio,BB,Dio,Gio,IB,Oio,Vio,Xio,ls,Use,zio,Qio,NB,Wio,Hio,qB,Uio,Jio,Yio,sh,Jse,Kio,Zio,jB,edo,odo,rdo,is,Yse,tdo,ado,DB,ndo,sdo,GB,ldo,ido,ddo,ds,Kse,cdo,fdo,OB,mdo,gdo,VB,hdo,pdo,_do,cs,Zse,udo,bdo,XB,vdo,Fdo,zB,Tdo,Mdo,Edo,fs,ele,Cdo,wdo,QB,Ado,Ldo,WB,ydo,xdo,$do,ms,ole,kdo,Sdo,HB,Rdo,Pdo,UB,Bdo,Ido,Ndo,gs,rle,qdo,jdo,JB,Ddo,Gdo,YB,Odo,Vdo,Xdo,hs,tle,zdo,Qdo,KB,Wdo,Hdo,ZB,Udo,Jdo,Ydo,ps,ale,Kdo,Zdo,eI,eco,oco,oI,rco,tco,aco,lh,nle,nco,sco,rI,lco,ico,dco,_s,sle,cco,fco,tI,mco,gco,aI,hco,pco,_co,ih,lle,uco,bco,nI,vco,Fco,Tco,dh,ile,Mco,Eco,sI,Cco,wco,Aco,us,dle,Lco,yco,lI,xco,$co,iI,kco,Sco,Rco,bs,cle,Pco,Bco,dI,Ico,Nco,cI,qco,jco,Dco,vs,fle,Gco,Oco,fI,Vco,Xco,mI,zco,Qco,Wco,ch,mle,Hco,Uco,gI,Jco,Yco,Kco,Fs,gle,Zco,efo,hI,ofo,rfo,pI,tfo,afo,nfo,Ts,hle,sfo,lfo,_I,ifo,dfo,uI,cfo,ffo,mfo,Ms,ple,gfo,hfo,bI,pfo,_fo,vI,ufo,bfo,vfo,Es,_le,Ffo,Tfo,FI,Mfo,Efo,TI,Cfo,wfo,Afo,Cs,ule,Lfo,yfo,MI,xfo,$fo,EI,kfo,Sfo,Rfo,ws,ble,Pfo,Bfo,CI,Ifo,Nfo,wI,qfo,jfo,Dfo,As,vle,Gfo,Ofo,AI,Vfo,Xfo,LI,zfo,Qfo,Wfo,fh,Fle,Hfo,Ufo,yI,Jfo,Yfo,Kfo,Ls,Tle,Zfo,emo,xI,omo,rmo,$I,tmo,amo,nmo,mh,Mle,smo,lmo,kI,imo,dmo,cmo,gh,Ele,fmo,mmo,SI,gmo,hmo,pmo,hh,Cle,_mo,umo,RI,bmo,vmo,Fmo,ph,wle,Tmo,Mmo,PI,Emo,Cmo,wmo,ys,Ale,Amo,Lmo,BI,ymo,xmo,II,$mo,kmo,Smo,_h,Lle,Rmo,Pmo,NI,Bmo,Imo,Nmo,xs,yle,qmo,jmo,qI,Dmo,Gmo,jI,Omo,Vmo,Xmo,$s,xle,zmo,Qmo,DI,Wmo,Hmo,GI,Umo,Jmo,Ymo,ks,$le,Kmo,Zmo,OI,ego,ogo,VI,rgo,tgo,ago,Ss,kle,ngo,sgo,XI,lgo,igo,zI,dgo,cgo,fgo,Rs,Sle,mgo,ggo,QI,hgo,pgo,WI,_go,ugo,bgo,Ps,Rle,vgo,Fgo,HI,Tgo,Mgo,UI,Ego,Cgo,wgo,uh,Ple,Ago,Lgo,JI,ygo,xgo,$go,bh,Ble,kgo,Sgo,YI,Rgo,Pgo,Bgo,Bs,Ile,Igo,Ngo,KI,qgo,jgo,ZI,Dgo,Ggo,Ogo,Is,Nle,Vgo,Xgo,eN,zgo,Qgo,oN,Wgo,Hgo,Ugo,Ns,qle,Jgo,Ygo,rN,Kgo,Zgo,tN,eho,oho,rho,vh,jle,tho,aho,aN,nho,sho,lho,Fh,Dle,iho,dho,nN,cho,fho,mho,Th,Gle,gho,hho,sN,pho,_ho,uho,qs,Ole,bho,vho,lN,Fho,Tho,iN,Mho,Eho,Cho,js,Vle,who,Aho,dN,Lho,yho,cN,xho,$ho,kho,Mh,Xle,Sho,Rho,fN,Pho,Bho,Iho,Eh,zle,Nho,qho,mN,jho,Dho,Gho,Ch,Qle,Oho,Vho,gN,Xho,zho,Qho,Ds,Wle,Who,Hho,hN,Uho,Jho,pN,Yho,Kho,Zho,wh,Hle,epo,opo,_N,rpo,tpo,apo,Ah,Ule,npo,spo,uN,lpo,ipo,dpo,Gs,Jle,cpo,fpo,bN,mpo,gpo,vN,hpo,ppo,_po,Os,Yle,upo,bpo,FN,vpo,Fpo,TN,Tpo,Mpo,Epo,Vs,Kle,Cpo,wpo,MN,Apo,Lpo,EN,ypo,xpo,$po,Xs,Zle,kpo,Spo,CN,Rpo,Ppo,wN,Bpo,Ipo,Npo,Lh,qpo,yh,oL,jpo,eie,Dpo,HOe,Pi,xh,oie,rL,Gpo,rie,Opo,UOe,Lo,tL,Vpo,aL,Xpo,AN,zpo,Qpo,Wpo,nL,Hpo,tie,Upo,Jpo,Ypo,He,sL,Kpo,aie,Zpo,e_o,Sa,o_o,nie,r_o,t_o,sie,a_o,n_o,lie,s_o,l_o,i_o,Y,$h,iie,d_o,c_o,LN,f_o,m_o,g_o,kh,die,h_o,p_o,yN,__o,u_o,b_o,Sh,cie,v_o,F_o,xN,T_o,M_o,E_o,Rh,fie,C_o,w_o,$N,A_o,L_o,y_o,Ph,mie,x_o,$_o,kN,k_o,S_o,R_o,Bh,gie,P_o,B_o,SN,I_o,N_o,q_o,Ih,hie,j_o,D_o,RN,G_o,O_o,V_o,Nh,pie,X_o,z_o,PN,Q_o,W_o,H_o,qh,_ie,U_o,J_o,BN,Y_o,K_o,Z_o,jh,uie,euo,ouo,IN,ruo,tuo,auo,Dh,bie,nuo,suo,NN,luo,iuo,duo,Gh,vie,cuo,fuo,qN,muo,guo,huo,Oh,Fie,puo,_uo,jN,uuo,buo,vuo,Vh,Tie,Fuo,Tuo,DN,Muo,Euo,Cuo,Xh,Mie,wuo,Auo,GN,Luo,yuo,xuo,zh,Eie,$uo,kuo,ON,Suo,Ruo,Puo,Qh,Cie,Buo,Iuo,VN,Nuo,quo,juo,Wh,wie,Duo,Guo,XN,Ouo,Vuo,Xuo,Hh,Aie,zuo,Quo,zN,Wuo,Huo,Uuo,Uh,Lie,Juo,Yuo,QN,Kuo,Zuo,e7o,Jh,yie,o7o,r7o,WN,t7o,a7o,n7o,Yh,xie,s7o,l7o,HN,i7o,d7o,c7o,Kh,$ie,f7o,m7o,UN,g7o,h7o,p7o,Zh,kie,_7o,u7o,JN,b7o,v7o,F7o,ep,Sie,T7o,M7o,YN,E7o,C7o,w7o,op,Rie,A7o,L7o,KN,y7o,x7o,$7o,rp,Pie,k7o,S7o,ZN,R7o,P7o,B7o,tp,Bie,I7o,N7o,eq,q7o,j7o,D7o,ap,Iie,G7o,O7o,oq,V7o,X7o,z7o,np,Nie,Q7o,W7o,rq,H7o,U7o,J7o,sp,qie,Y7o,K7o,tq,Z7o,e1o,o1o,lp,jie,r1o,t1o,aq,a1o,n1o,s1o,ip,l1o,dp,i1o,cp,lL,d1o,Die,c1o,JOe,Bi,fp,Gie,iL,f1o,Oie,m1o,YOe,yo,dL,g1o,cL,h1o,nq,p1o,_1o,u1o,fL,b1o,Vie,v1o,F1o,T1o,Ue,mL,M1o,Xie,E1o,C1o,Ii,w1o,zie,A1o,L1o,Qie,y1o,x1o,$1o,pe,mp,Wie,k1o,S1o,sq,R1o,P1o,B1o,gp,Hie,I1o,N1o,Uie,q1o,j1o,D1o,hp,Jie,G1o,O1o,lq,V1o,X1o,z1o,pp,Yie,Q1o,W1o,iq,H1o,U1o,J1o,_p,Kie,Y1o,K1o,dq,Z1o,e2o,o2o,up,Zie,r2o,t2o,cq,a2o,n2o,s2o,bp,ede,l2o,i2o,fq,d2o,c2o,f2o,vp,ode,m2o,g2o,mq,h2o,p2o,_2o,Fp,rde,u2o,b2o,gq,v2o,F2o,T2o,Tp,tde,M2o,E2o,hq,C2o,w2o,A2o,Mp,ade,L2o,y2o,pq,x2o,$2o,k2o,Ep,nde,S2o,R2o,_q,P2o,B2o,I2o,Cp,sde,N2o,q2o,uq,j2o,D2o,G2o,wp,lde,O2o,V2o,bq,X2o,z2o,Q2o,Ap,ide,W2o,H2o,vq,U2o,J2o,Y2o,Lp,dde,K2o,Z2o,Fq,ebo,obo,rbo,yp,cde,tbo,abo,Tq,nbo,sbo,lbo,xp,ibo,$p,dbo,kp,gL,cbo,fde,fbo,KOe,Ni,Sp,mde,hL,mbo,gde,gbo,ZOe,xo,pL,hbo,qi,pbo,Mq,_bo,ubo,Eq,bbo,vbo,Fbo,_L,Tbo,hde,Mbo,Ebo,Cbo,nt,uL,wbo,pde,Abo,Lbo,ji,ybo,_de,xbo,$bo,Cq,kbo,Sbo,Rbo,Rp,Pbo,Je,bL,Bbo,ude,Ibo,Nbo,Ra,qbo,bde,jbo,Dbo,vde,Gbo,Obo,Fde,Vbo,Xbo,zbo,y,Pp,Tde,Qbo,Wbo,wq,Hbo,Ubo,Jbo,Bp,Mde,Ybo,Kbo,Aq,Zbo,evo,ovo,Ip,Ede,rvo,tvo,Lq,avo,nvo,svo,Np,Cde,lvo,ivo,yq,dvo,cvo,fvo,qp,wde,mvo,gvo,xq,hvo,pvo,_vo,jp,Ade,uvo,bvo,$q,vvo,Fvo,Tvo,Dp,Lde,Mvo,Evo,kq,Cvo,wvo,Avo,Gp,yde,Lvo,yvo,Sq,xvo,$vo,kvo,Op,xde,Svo,Rvo,Rq,Pvo,Bvo,Ivo,Vp,$de,Nvo,qvo,Pq,jvo,Dvo,Gvo,Xp,kde,Ovo,Vvo,Bq,Xvo,zvo,Qvo,zp,Sde,Wvo,Hvo,Iq,Uvo,Jvo,Yvo,Qp,Rde,Kvo,Zvo,Nq,eFo,oFo,rFo,Wp,Pde,tFo,aFo,qq,nFo,sFo,lFo,Hp,Bde,iFo,dFo,jq,cFo,fFo,mFo,Up,Ide,gFo,hFo,Dq,pFo,_Fo,uFo,Jp,Nde,bFo,vFo,Gq,FFo,TFo,MFo,Yp,qde,EFo,CFo,Oq,wFo,AFo,LFo,Kp,jde,yFo,xFo,Vq,$Fo,kFo,SFo,Zp,Dde,RFo,PFo,Xq,BFo,IFo,NFo,e_,Gde,qFo,jFo,zq,DFo,GFo,OFo,o_,Ode,VFo,XFo,Qq,zFo,QFo,WFo,r_,Vde,HFo,UFo,Wq,JFo,YFo,KFo,t_,Xde,ZFo,eTo,Hq,oTo,rTo,tTo,a_,zde,aTo,nTo,Uq,sTo,lTo,iTo,n_,Qde,dTo,cTo,Jq,fTo,mTo,gTo,s_,Wde,hTo,pTo,Yq,_To,uTo,bTo,l_,Hde,vTo,FTo,Kq,TTo,MTo,ETo,i_,Ude,CTo,wTo,Zq,ATo,LTo,yTo,d_,Jde,xTo,$To,ej,kTo,STo,RTo,c_,Yde,PTo,BTo,oj,ITo,NTo,qTo,f_,Kde,jTo,DTo,rj,GTo,OTo,VTo,m_,Zde,XTo,zTo,tj,QTo,WTo,HTo,g_,ece,UTo,JTo,aj,YTo,KTo,ZTo,zs,oce,e8o,o8o,nj,r8o,t8o,sj,a8o,n8o,s8o,h_,rce,l8o,i8o,lj,d8o,c8o,f8o,p_,tce,m8o,g8o,ij,h8o,p8o,_8o,__,ace,u8o,b8o,dj,v8o,F8o,T8o,u_,nce,M8o,E8o,cj,C8o,w8o,A8o,b_,sce,L8o,y8o,fj,x8o,$8o,k8o,v_,lce,S8o,R8o,mj,P8o,B8o,I8o,F_,ice,N8o,q8o,gj,j8o,D8o,G8o,T_,dce,O8o,V8o,hj,X8o,z8o,Q8o,M_,cce,W8o,H8o,pj,U8o,J8o,Y8o,E_,fce,K8o,Z8o,_j,eMo,oMo,rMo,C_,mce,tMo,aMo,uj,nMo,sMo,lMo,w_,gce,iMo,dMo,bj,cMo,fMo,mMo,A_,hce,gMo,hMo,vj,pMo,_Mo,uMo,L_,pce,bMo,vMo,Fj,FMo,TMo,MMo,y_,_ce,EMo,CMo,Tj,wMo,AMo,LMo,x_,uce,yMo,xMo,Mj,$Mo,kMo,SMo,$_,bce,RMo,PMo,Ej,BMo,IMo,NMo,k_,vce,qMo,jMo,Cj,DMo,GMo,OMo,S_,Fce,VMo,XMo,wj,zMo,QMo,WMo,R_,Tce,HMo,UMo,Aj,JMo,YMo,KMo,P_,Mce,ZMo,e4o,Lj,o4o,r4o,t4o,B_,Ece,a4o,n4o,yj,s4o,l4o,i4o,I_,Cce,d4o,c4o,xj,f4o,m4o,g4o,N_,wce,h4o,p4o,$j,_4o,u4o,b4o,q_,Ace,v4o,F4o,kj,T4o,M4o,E4o,j_,Lce,C4o,w4o,Sj,A4o,L4o,y4o,D_,yce,x4o,$4o,Rj,k4o,S4o,R4o,G_,xce,P4o,B4o,Pj,I4o,N4o,q4o,O_,$ce,j4o,D4o,Bj,G4o,O4o,V4o,V_,kce,X4o,z4o,Ij,Q4o,W4o,H4o,X_,Sce,U4o,J4o,Nj,Y4o,K4o,Z4o,z_,Rce,eEo,oEo,qj,rEo,tEo,aEo,Q_,Pce,nEo,sEo,jj,lEo,iEo,dEo,W_,Bce,cEo,fEo,Dj,mEo,gEo,hEo,H_,Ice,pEo,_Eo,Gj,uEo,bEo,vEo,U_,Nce,FEo,TEo,Oj,MEo,EEo,CEo,J_,qce,wEo,AEo,Vj,LEo,yEo,xEo,Y_,jce,$Eo,kEo,Xj,SEo,REo,PEo,K_,Dce,BEo,IEo,zj,NEo,qEo,jEo,Z_,Gce,DEo,GEo,Qj,OEo,VEo,XEo,eu,Oce,zEo,QEo,Wj,WEo,HEo,UEo,ou,Vce,JEo,YEo,Hj,KEo,ZEo,eCo,ru,Xce,oCo,rCo,Uj,tCo,aCo,nCo,tu,zce,sCo,lCo,Jj,iCo,dCo,cCo,au,Qce,fCo,mCo,Yj,gCo,hCo,pCo,nu,Wce,_Co,uCo,Kj,bCo,vCo,FCo,su,Hce,TCo,MCo,Zj,ECo,CCo,wCo,lu,Uce,ACo,LCo,eD,yCo,xCo,$Co,iu,Jce,kCo,SCo,oD,RCo,PCo,BCo,du,Yce,ICo,NCo,rD,qCo,jCo,DCo,cu,Kce,GCo,OCo,tD,VCo,XCo,zCo,fu,Zce,QCo,WCo,aD,HCo,UCo,JCo,mu,efe,YCo,KCo,nD,ZCo,e3o,o3o,gu,ofe,r3o,t3o,sD,a3o,n3o,s3o,hu,rfe,l3o,i3o,lD,d3o,c3o,f3o,pu,tfe,m3o,g3o,iD,h3o,p3o,_3o,_u,afe,u3o,b3o,dD,v3o,F3o,T3o,uu,nfe,M3o,E3o,cD,C3o,w3o,A3o,bu,sfe,L3o,y3o,fD,x3o,$3o,k3o,vu,lfe,S3o,R3o,mD,P3o,B3o,I3o,Fu,ife,N3o,q3o,gD,j3o,D3o,G3o,Tu,dfe,O3o,V3o,hD,X3o,z3o,Q3o,Mu,cfe,W3o,H3o,pD,U3o,J3o,Y3o,Eu,ffe,K3o,Z3o,_D,e5o,o5o,r5o,Cu,mfe,t5o,a5o,uD,n5o,s5o,l5o,wu,gfe,i5o,d5o,bD,c5o,f5o,m5o,Au,hfe,g5o,h5o,vD,p5o,_5o,u5o,Lu,pfe,b5o,v5o,FD,F5o,T5o,M5o,yu,_fe,E5o,C5o,TD,w5o,A5o,L5o,xu,ufe,y5o,x5o,MD,$5o,k5o,S5o,$u,bfe,R5o,P5o,ED,B5o,I5o,N5o,ku,vfe,q5o,j5o,CD,D5o,G5o,O5o,Su,Ffe,V5o,X5o,wD,z5o,Q5o,W5o,Ru,Tfe,H5o,U5o,AD,J5o,Y5o,K5o,Pu,Z5o,Mfe,e0o,o0o,Efe,r0o,t0o,Bu,eVe,Di,Iu,Cfe,vL,a0o,wfe,n0o,oVe,$o,FL,s0o,Gi,l0o,LD,i0o,d0o,yD,c0o,f0o,m0o,TL,g0o,Afe,h0o,p0o,_0o,st,ML,u0o,Lfe,b0o,v0o,Oi,F0o,yfe,T0o,M0o,xD,E0o,C0o,w0o,Nu,A0o,Ye,EL,L0o,xfe,y0o,x0o,Pa,$0o,$fe,k0o,S0o,kfe,R0o,P0o,Sfe,B0o,I0o,N0o,G,qu,Rfe,q0o,j0o,$D,D0o,G0o,O0o,ju,Pfe,V0o,X0o,kD,z0o,Q0o,W0o,Du,Bfe,H0o,U0o,SD,J0o,Y0o,K0o,Gu,Ife,Z0o,ewo,RD,owo,rwo,two,Ou,Nfe,awo,nwo,PD,swo,lwo,iwo,Vu,qfe,dwo,cwo,BD,fwo,mwo,gwo,Xu,jfe,hwo,pwo,ID,_wo,uwo,bwo,zu,Dfe,vwo,Fwo,ND,Two,Mwo,Ewo,Qu,Gfe,Cwo,wwo,qD,Awo,Lwo,ywo,Wu,Ofe,xwo,$wo,jD,kwo,Swo,Rwo,Hu,Vfe,Pwo,Bwo,DD,Iwo,Nwo,qwo,Uu,Xfe,jwo,Dwo,GD,Gwo,Owo,Vwo,Ju,zfe,Xwo,zwo,OD,Qwo,Wwo,Hwo,Yu,Qfe,Uwo,Jwo,VD,Ywo,Kwo,Zwo,Ku,Wfe,eAo,oAo,XD,rAo,tAo,aAo,Zu,Hfe,nAo,sAo,zD,lAo,iAo,dAo,e7,Ufe,cAo,fAo,QD,mAo,gAo,hAo,o7,Jfe,pAo,_Ao,WD,uAo,bAo,vAo,r7,Yfe,FAo,TAo,HD,MAo,EAo,CAo,t7,Kfe,wAo,AAo,UD,LAo,yAo,xAo,a7,Zfe,$Ao,kAo,JD,SAo,RAo,PAo,n7,eme,BAo,IAo,YD,NAo,qAo,jAo,s7,ome,DAo,GAo,KD,OAo,VAo,XAo,l7,rme,zAo,QAo,ZD,WAo,HAo,UAo,i7,tme,JAo,YAo,eG,KAo,ZAo,e6o,d7,ame,o6o,r6o,oG,t6o,a6o,n6o,c7,nme,s6o,l6o,rG,i6o,d6o,c6o,f7,sme,f6o,m6o,tG,g6o,h6o,p6o,m7,lme,_6o,u6o,aG,b6o,v6o,F6o,g7,ime,T6o,M6o,nG,E6o,C6o,w6o,h7,dme,A6o,L6o,sG,y6o,x6o,$6o,p7,cme,k6o,S6o,lG,R6o,P6o,B6o,_7,fme,I6o,N6o,iG,q6o,j6o,D6o,u7,mme,G6o,O6o,dG,V6o,X6o,z6o,b7,gme,Q6o,W6o,cG,H6o,U6o,J6o,v7,hme,Y6o,K6o,fG,Z6o,eLo,oLo,F7,pme,rLo,tLo,mG,aLo,nLo,sLo,T7,_me,lLo,iLo,gG,dLo,cLo,fLo,M7,ume,mLo,gLo,hG,hLo,pLo,_Lo,E7,bme,uLo,bLo,pG,vLo,FLo,TLo,C7,vme,MLo,ELo,_G,CLo,wLo,ALo,w7,Fme,LLo,yLo,uG,xLo,$Lo,kLo,A7,Tme,SLo,RLo,bG,PLo,BLo,ILo,L7,Mme,NLo,qLo,vG,jLo,DLo,GLo,y7,Eme,OLo,VLo,FG,XLo,zLo,QLo,x7,WLo,Cme,HLo,ULo,wme,JLo,YLo,$7,rVe,Vi,k7,Ame,CL,KLo,Lme,ZLo,tVe,ko,wL,eyo,Xi,oyo,TG,ryo,tyo,MG,ayo,nyo,syo,AL,lyo,yme,iyo,dyo,cyo,lt,LL,fyo,xme,myo,gyo,zi,hyo,$me,pyo,_yo,EG,uyo,byo,vyo,S7,Fyo,Ke,yL,Tyo,kme,Myo,Eyo,Ba,Cyo,Sme,wyo,Ayo,Rme,Lyo,yyo,Pme,xyo,$yo,kyo,z,R7,Bme,Syo,Ryo,CG,Pyo,Byo,Iyo,P7,Ime,Nyo,qyo,wG,jyo,Dyo,Gyo,B7,Nme,Oyo,Vyo,AG,Xyo,zyo,Qyo,I7,qme,Wyo,Hyo,LG,Uyo,Jyo,Yyo,N7,jme,Kyo,Zyo,yG,e9o,o9o,r9o,q7,Dme,t9o,a9o,xG,n9o,s9o,l9o,j7,Gme,i9o,d9o,$G,c9o,f9o,m9o,D7,Ome,g9o,h9o,kG,p9o,_9o,u9o,G7,Vme,b9o,v9o,SG,F9o,T9o,M9o,O7,Xme,E9o,C9o,RG,w9o,A9o,L9o,V7,zme,y9o,x9o,PG,$9o,k9o,S9o,X7,Qme,R9o,P9o,BG,B9o,I9o,N9o,z7,Wme,q9o,j9o,IG,D9o,G9o,O9o,Q7,Hme,V9o,X9o,NG,z9o,Q9o,W9o,W7,Ume,H9o,U9o,qG,J9o,Y9o,K9o,H7,Jme,Z9o,exo,jG,oxo,rxo,txo,U7,Yme,axo,nxo,DG,sxo,lxo,ixo,J7,Kme,dxo,cxo,GG,fxo,mxo,gxo,Y7,Zme,hxo,pxo,OG,_xo,uxo,bxo,K7,ege,vxo,Fxo,VG,Txo,Mxo,Exo,Z7,oge,Cxo,wxo,XG,Axo,Lxo,yxo,e1,rge,xxo,$xo,zG,kxo,Sxo,Rxo,o1,tge,Pxo,Bxo,QG,Ixo,Nxo,qxo,r1,age,jxo,Dxo,WG,Gxo,Oxo,Vxo,t1,nge,Xxo,zxo,HG,Qxo,Wxo,Hxo,a1,sge,Uxo,Jxo,UG,Yxo,Kxo,Zxo,n1,lge,e$o,o$o,JG,r$o,t$o,a$o,s1,ige,n$o,s$o,YG,l$o,i$o,d$o,l1,dge,c$o,f$o,KG,m$o,g$o,h$o,i1,cge,p$o,_$o,ZG,u$o,b$o,v$o,d1,fge,F$o,T$o,eO,M$o,E$o,C$o,c1,mge,w$o,A$o,oO,L$o,y$o,x$o,f1,gge,$$o,k$o,rO,S$o,R$o,P$o,m1,hge,B$o,I$o,tO,N$o,q$o,j$o,g1,pge,D$o,G$o,aO,O$o,V$o,X$o,h1,_ge,z$o,Q$o,nO,W$o,H$o,U$o,p1,uge,J$o,Y$o,sO,K$o,Z$o,eko,_1,bge,oko,rko,lO,tko,ako,nko,u1,vge,sko,lko,iO,iko,dko,cko,b1,Fge,fko,mko,dO,gko,hko,pko,v1,_ko,Tge,uko,bko,Mge,vko,Fko,F1,aVe,Qi,T1,Ege,xL,Tko,Cge,Mko,nVe,So,$L,Eko,Wi,Cko,cO,wko,Ako,fO,Lko,yko,xko,kL,$ko,wge,kko,Sko,Rko,it,SL,Pko,Age,Bko,Iko,Hi,Nko,Lge,qko,jko,mO,Dko,Gko,Oko,M1,Vko,Ze,RL,Xko,yge,zko,Qko,Ia,Wko,xge,Hko,Uko,$ge,Jko,Yko,kge,Kko,Zko,eSo,W,E1,Sge,oSo,rSo,gO,tSo,aSo,nSo,C1,Rge,sSo,lSo,hO,iSo,dSo,cSo,w1,Pge,fSo,mSo,pO,gSo,hSo,pSo,A1,Bge,_So,uSo,_O,bSo,vSo,FSo,L1,Ige,TSo,MSo,uO,ESo,CSo,wSo,y1,Nge,ASo,LSo,bO,ySo,xSo,$So,x1,qge,kSo,SSo,vO,RSo,PSo,BSo,$1,jge,ISo,NSo,FO,qSo,jSo,DSo,k1,Dge,GSo,OSo,TO,VSo,XSo,zSo,S1,Gge,QSo,WSo,MO,HSo,USo,JSo,R1,Oge,YSo,KSo,EO,ZSo,eRo,oRo,P1,Vge,rRo,tRo,CO,aRo,nRo,sRo,B1,Xge,lRo,iRo,wO,dRo,cRo,fRo,I1,zge,mRo,gRo,AO,hRo,pRo,_Ro,N1,Qge,uRo,bRo,LO,vRo,FRo,TRo,q1,Wge,MRo,ERo,yO,CRo,wRo,ARo,j1,Hge,LRo,yRo,xO,xRo,$Ro,kRo,D1,Uge,SRo,RRo,$O,PRo,BRo,IRo,G1,Jge,NRo,qRo,kO,jRo,DRo,GRo,O1,Yge,ORo,VRo,SO,XRo,zRo,QRo,V1,Kge,WRo,HRo,RO,URo,JRo,YRo,X1,Zge,KRo,ZRo,PO,ePo,oPo,rPo,z1,ehe,tPo,aPo,BO,nPo,sPo,lPo,Q1,ohe,iPo,dPo,IO,cPo,fPo,mPo,W1,rhe,gPo,hPo,NO,pPo,_Po,uPo,H1,the,bPo,vPo,qO,FPo,TPo,MPo,U1,ahe,EPo,CPo,jO,wPo,APo,LPo,J1,nhe,yPo,xPo,DO,$Po,kPo,SPo,Y1,she,RPo,PPo,GO,BPo,IPo,NPo,K1,lhe,qPo,jPo,OO,DPo,GPo,OPo,Z1,ihe,VPo,XPo,VO,zPo,QPo,WPo,e2,dhe,HPo,UPo,XO,JPo,YPo,KPo,o2,che,ZPo,eBo,zO,oBo,rBo,tBo,r2,fhe,aBo,nBo,mhe,sBo,lBo,iBo,t2,ghe,dBo,cBo,QO,fBo,mBo,gBo,a2,hhe,hBo,pBo,WO,_Bo,uBo,bBo,n2,phe,vBo,FBo,HO,TBo,MBo,EBo,s2,_he,CBo,wBo,UO,ABo,LBo,yBo,l2,xBo,uhe,$Bo,kBo,bhe,SBo,RBo,i2,sVe,Ui,d2,vhe,PL,PBo,Fhe,BBo,lVe,Ro,BL,IBo,Ji,NBo,JO,qBo,jBo,YO,DBo,GBo,OBo,IL,VBo,The,XBo,zBo,QBo,dt,NL,WBo,Mhe,HBo,UBo,Yi,JBo,Ehe,YBo,KBo,KO,ZBo,eIo,oIo,c2,rIo,eo,qL,tIo,Che,aIo,nIo,Na,sIo,whe,lIo,iIo,Ahe,dIo,cIo,Lhe,fIo,mIo,gIo,he,f2,yhe,hIo,pIo,ZO,_Io,uIo,bIo,m2,xhe,vIo,FIo,eV,TIo,MIo,EIo,g2,$he,CIo,wIo,oV,AIo,LIo,yIo,h2,khe,xIo,$Io,rV,kIo,SIo,RIo,p2,She,PIo,BIo,tV,IIo,NIo,qIo,_2,Rhe,jIo,DIo,aV,GIo,OIo,VIo,u2,Phe,XIo,zIo,nV,QIo,WIo,HIo,b2,Bhe,UIo,JIo,sV,YIo,KIo,ZIo,v2,Ihe,eNo,oNo,lV,rNo,tNo,aNo,F2,Nhe,nNo,sNo,iV,lNo,iNo,dNo,T2,qhe,cNo,fNo,dV,mNo,gNo,hNo,M2,jhe,pNo,_No,cV,uNo,bNo,vNo,E2,Dhe,FNo,TNo,fV,MNo,ENo,CNo,C2,Ghe,wNo,ANo,mV,LNo,yNo,xNo,w2,Ohe,$No,kNo,gV,SNo,RNo,PNo,A2,Vhe,BNo,INo,hV,NNo,qNo,jNo,L2,Xhe,DNo,GNo,pV,ONo,VNo,XNo,y2,zhe,zNo,QNo,_V,WNo,HNo,UNo,x2,JNo,Qhe,YNo,KNo,Whe,ZNo,eqo,$2,iVe,Ki,k2,Hhe,jL,oqo,Uhe,rqo,dVe,Po,DL,tqo,Zi,aqo,uV,nqo,sqo,bV,lqo,iqo,dqo,GL,cqo,Jhe,fqo,mqo,gqo,ct,OL,hqo,Yhe,pqo,_qo,ed,uqo,Khe,bqo,vqo,vV,Fqo,Tqo,Mqo,S2,Eqo,oo,VL,Cqo,Zhe,wqo,Aqo,qa,Lqo,epe,yqo,xqo,ope,$qo,kqo,rpe,Sqo,Rqo,Pqo,N,R2,tpe,Bqo,Iqo,FV,Nqo,qqo,jqo,P2,ape,Dqo,Gqo,TV,Oqo,Vqo,Xqo,B2,npe,zqo,Qqo,MV,Wqo,Hqo,Uqo,I2,spe,Jqo,Yqo,EV,Kqo,Zqo,ejo,N2,lpe,ojo,rjo,CV,tjo,ajo,njo,q2,ipe,sjo,ljo,wV,ijo,djo,cjo,j2,dpe,fjo,mjo,AV,gjo,hjo,pjo,D2,cpe,_jo,ujo,LV,bjo,vjo,Fjo,G2,fpe,Tjo,Mjo,yV,Ejo,Cjo,wjo,O2,mpe,Ajo,Ljo,xV,yjo,xjo,$jo,V2,gpe,kjo,Sjo,$V,Rjo,Pjo,Bjo,X2,hpe,Ijo,Njo,kV,qjo,jjo,Djo,z2,ppe,Gjo,Ojo,SV,Vjo,Xjo,zjo,Q2,_pe,Qjo,Wjo,RV,Hjo,Ujo,Jjo,W2,upe,Yjo,Kjo,PV,Zjo,eDo,oDo,H2,bpe,rDo,tDo,BV,aDo,nDo,sDo,U2,vpe,lDo,iDo,IV,dDo,cDo,fDo,J2,Fpe,mDo,gDo,NV,hDo,pDo,_Do,Y2,Tpe,uDo,bDo,qV,vDo,FDo,TDo,K2,Mpe,MDo,EDo,jV,CDo,wDo,ADo,Z2,Epe,LDo,yDo,DV,xDo,$Do,kDo,eb,Cpe,SDo,RDo,GV,PDo,BDo,IDo,ob,wpe,NDo,qDo,OV,jDo,DDo,GDo,rb,Ape,ODo,VDo,VV,XDo,zDo,QDo,tb,Lpe,WDo,HDo,XV,UDo,JDo,YDo,ab,ype,KDo,ZDo,zV,eGo,oGo,rGo,nb,xpe,tGo,aGo,QV,nGo,sGo,lGo,sb,$pe,iGo,dGo,WV,cGo,fGo,mGo,lb,kpe,gGo,hGo,HV,pGo,_Go,uGo,ib,Spe,bGo,vGo,UV,FGo,TGo,MGo,db,Rpe,EGo,CGo,JV,wGo,AGo,LGo,cb,Ppe,yGo,xGo,YV,$Go,kGo,SGo,fb,Bpe,RGo,PGo,KV,BGo,IGo,NGo,mb,Ipe,qGo,jGo,ZV,DGo,GGo,OGo,gb,Npe,VGo,XGo,eX,zGo,QGo,WGo,hb,qpe,HGo,UGo,oX,JGo,YGo,KGo,pb,jpe,ZGo,eOo,rX,oOo,rOo,tOo,_b,Dpe,aOo,nOo,tX,sOo,lOo,iOo,ub,Gpe,dOo,cOo,aX,fOo,mOo,gOo,bb,Ope,hOo,pOo,nX,_Oo,uOo,bOo,vb,Vpe,vOo,FOo,sX,TOo,MOo,EOo,Fb,Xpe,COo,wOo,lX,AOo,LOo,yOo,Tb,zpe,xOo,$Oo,iX,kOo,SOo,ROo,Mb,Qpe,POo,BOo,dX,IOo,NOo,qOo,Eb,Wpe,jOo,DOo,cX,GOo,OOo,VOo,Cb,Hpe,XOo,zOo,fX,QOo,WOo,HOo,wb,Upe,UOo,JOo,mX,YOo,KOo,ZOo,Ab,Jpe,eVo,oVo,gX,rVo,tVo,aVo,Lb,Ype,nVo,sVo,hX,lVo,iVo,dVo,yb,Kpe,cVo,fVo,pX,mVo,gVo,hVo,xb,pVo,Zpe,_Vo,uVo,e_e,bVo,vVo,$b,cVe,od,kb,o_e,XL,FVo,r_e,TVo,fVe,Bo,zL,MVo,rd,EVo,_X,CVo,wVo,uX,AVo,LVo,yVo,QL,xVo,t_e,$Vo,kVo,SVo,ft,WL,RVo,a_e,PVo,BVo,td,IVo,n_e,NVo,qVo,bX,jVo,DVo,GVo,Sb,OVo,ro,HL,VVo,s_e,XVo,zVo,ja,QVo,l_e,WVo,HVo,i_e,UVo,JVo,d_e,YVo,KVo,ZVo,Z,Rb,c_e,eXo,oXo,vX,rXo,tXo,aXo,Pb,f_e,nXo,sXo,FX,lXo,iXo,dXo,Bb,m_e,cXo,fXo,TX,mXo,gXo,hXo,Ib,g_e,pXo,_Xo,MX,uXo,bXo,vXo,Nb,h_e,FXo,TXo,EX,MXo,EXo,CXo,qb,p_e,wXo,AXo,CX,LXo,yXo,xXo,jb,__e,$Xo,kXo,wX,SXo,RXo,PXo,Db,u_e,BXo,IXo,AX,NXo,qXo,jXo,Gb,b_e,DXo,GXo,LX,OXo,VXo,XXo,Ob,v_e,zXo,QXo,yX,WXo,HXo,UXo,Vb,F_e,JXo,YXo,xX,KXo,ZXo,ezo,Xb,T_e,ozo,rzo,$X,tzo,azo,nzo,zb,M_e,szo,lzo,kX,izo,dzo,czo,Qb,E_e,fzo,mzo,SX,gzo,hzo,pzo,Wb,C_e,_zo,uzo,RX,bzo,vzo,Fzo,Hb,w_e,Tzo,Mzo,PX,Ezo,Czo,wzo,Ub,A_e,Azo,Lzo,BX,yzo,xzo,$zo,Jb,L_e,kzo,Szo,IX,Rzo,Pzo,Bzo,Yb,y_e,Izo,Nzo,NX,qzo,jzo,Dzo,Kb,x_e,Gzo,Ozo,qX,Vzo,Xzo,zzo,Zb,$_e,Qzo,Wzo,jX,Hzo,Uzo,Jzo,ev,k_e,Yzo,Kzo,DX,Zzo,eQo,oQo,ov,S_e,rQo,tQo,GX,aQo,nQo,sQo,rv,R_e,lQo,iQo,OX,dQo,cQo,fQo,tv,P_e,mQo,gQo,VX,hQo,pQo,_Qo,av,B_e,uQo,bQo,XX,vQo,FQo,TQo,nv,I_e,MQo,EQo,zX,CQo,wQo,AQo,sv,N_e,LQo,yQo,QX,xQo,$Qo,kQo,lv,q_e,SQo,RQo,WX,PQo,BQo,IQo,iv,j_e,NQo,qQo,HX,jQo,DQo,GQo,dv,OQo,D_e,VQo,XQo,G_e,zQo,QQo,cv,mVe,ad,fv,O_e,UL,WQo,V_e,HQo,gVe,Io,JL,UQo,nd,JQo,UX,YQo,KQo,JX,ZQo,eWo,oWo,YL,rWo,X_e,tWo,aWo,nWo,mt,KL,sWo,z_e,lWo,iWo,sd,dWo,Q_e,cWo,fWo,YX,mWo,gWo,hWo,mv,pWo,to,ZL,_Wo,W_e,uWo,bWo,Da,vWo,H_e,FWo,TWo,U_e,MWo,EWo,J_e,CWo,wWo,AWo,No,gv,Y_e,LWo,yWo,KX,xWo,$Wo,kWo,hv,K_e,SWo,RWo,ZX,PWo,BWo,IWo,pv,Z_e,NWo,qWo,ez,jWo,DWo,GWo,_v,eue,OWo,VWo,oz,XWo,zWo,QWo,uv,oue,WWo,HWo,rz,UWo,JWo,YWo,bv,rue,KWo,ZWo,tz,eHo,oHo,rHo,vv,tHo,tue,aHo,nHo,aue,sHo,lHo,Fv,hVe,ld,Tv,nue,ey,iHo,sue,dHo,pVe,qo,oy,cHo,id,fHo,az,mHo,gHo,nz,hHo,pHo,_Ho,ry,uHo,lue,bHo,vHo,FHo,gt,ty,THo,iue,MHo,EHo,dd,CHo,due,wHo,AHo,sz,LHo,yHo,xHo,Mv,$Ho,ao,ay,kHo,cue,SHo,RHo,Ga,PHo,fue,BHo,IHo,mue,NHo,qHo,gue,jHo,DHo,GHo,U,Ev,hue,OHo,VHo,lz,XHo,zHo,QHo,Cv,pue,WHo,HHo,iz,UHo,JHo,YHo,wv,_ue,KHo,ZHo,dz,eUo,oUo,rUo,Av,uue,tUo,aUo,cz,nUo,sUo,lUo,Lv,bue,iUo,dUo,fz,cUo,fUo,mUo,yv,vue,gUo,hUo,mz,pUo,_Uo,uUo,xv,Fue,bUo,vUo,gz,FUo,TUo,MUo,$v,Tue,EUo,CUo,hz,wUo,AUo,LUo,kv,Mue,yUo,xUo,pz,$Uo,kUo,SUo,Sv,Eue,RUo,PUo,_z,BUo,IUo,NUo,Rv,Cue,qUo,jUo,uz,DUo,GUo,OUo,Pv,wue,VUo,XUo,bz,zUo,QUo,WUo,Bv,Aue,HUo,UUo,vz,JUo,YUo,KUo,Iv,Lue,ZUo,eJo,Fz,oJo,rJo,tJo,Nv,yue,aJo,nJo,Tz,sJo,lJo,iJo,qv,xue,dJo,cJo,Mz,fJo,mJo,gJo,jv,$ue,hJo,pJo,Ez,_Jo,uJo,bJo,Dv,kue,vJo,FJo,Cz,TJo,MJo,EJo,Gv,Sue,CJo,wJo,wz,AJo,LJo,yJo,Ov,Rue,xJo,$Jo,Az,kJo,SJo,RJo,Vv,Pue,PJo,BJo,Lz,IJo,NJo,qJo,Xv,Bue,jJo,DJo,yz,GJo,OJo,VJo,zv,Iue,XJo,zJo,xz,QJo,WJo,HJo,Qv,Nue,UJo,JJo,$z,YJo,KJo,ZJo,Wv,que,eYo,oYo,kz,rYo,tYo,aYo,Hv,jue,nYo,sYo,Sz,lYo,iYo,dYo,Uv,Due,cYo,fYo,Rz,mYo,gYo,hYo,Jv,Gue,pYo,_Yo,Pz,uYo,bYo,vYo,Yv,Oue,FYo,TYo,Bz,MYo,EYo,CYo,Kv,Vue,wYo,AYo,Iz,LYo,yYo,xYo,Zv,Xue,$Yo,kYo,Nz,SYo,RYo,PYo,eF,zue,BYo,IYo,qz,NYo,qYo,jYo,oF,Que,DYo,GYo,jz,OYo,VYo,XYo,rF,Wue,zYo,QYo,Dz,WYo,HYo,UYo,tF,Hue,JYo,YYo,Gz,KYo,ZYo,eKo,aF,Uue,oKo,rKo,Oz,tKo,aKo,nKo,nF,sKo,Jue,lKo,iKo,Yue,dKo,cKo,sF,_Ve,cd,lF,Kue,ny,fKo,Zue,mKo,uVe,jo,sy,gKo,fd,hKo,Vz,pKo,_Ko,Xz,uKo,bKo,vKo,ly,FKo,e7e,TKo,MKo,EKo,ht,iy,CKo,o7e,wKo,AKo,md,LKo,r7e,yKo,xKo,zz,$Ko,kKo,SKo,iF,RKo,no,dy,PKo,t7e,BKo,IKo,Oa,NKo,a7e,qKo,jKo,n7e,DKo,GKo,s7e,OKo,VKo,XKo,V,dF,l7e,zKo,QKo,Qz,WKo,HKo,UKo,cF,i7e,JKo,YKo,Wz,KKo,ZKo,eZo,fF,d7e,oZo,rZo,Hz,tZo,aZo,nZo,mF,c7e,sZo,lZo,Uz,iZo,dZo,cZo,gF,f7e,fZo,mZo,Jz,gZo,hZo,pZo,hF,m7e,_Zo,uZo,Yz,bZo,vZo,FZo,pF,g7e,TZo,MZo,Kz,EZo,CZo,wZo,_F,h7e,AZo,LZo,Zz,yZo,xZo,$Zo,uF,p7e,kZo,SZo,eQ,RZo,PZo,BZo,bF,_7e,IZo,NZo,oQ,qZo,jZo,DZo,vF,u7e,GZo,OZo,rQ,VZo,XZo,zZo,FF,b7e,QZo,WZo,tQ,HZo,UZo,JZo,TF,v7e,YZo,KZo,aQ,ZZo,eer,oer,MF,F7e,rer,ter,nQ,aer,ner,ser,EF,T7e,ler,ier,sQ,der,cer,fer,CF,M7e,mer,ger,lQ,her,per,_er,wF,E7e,uer,ber,iQ,ver,Fer,Ter,AF,C7e,Mer,Eer,dQ,Cer,wer,Aer,LF,w7e,Ler,yer,cQ,xer,$er,ker,yF,A7e,Ser,Rer,fQ,Per,Ber,Ier,xF,L7e,Ner,qer,mQ,jer,Der,Ger,$F,y7e,Oer,Ver,gQ,Xer,zer,Qer,kF,x7e,Wer,Her,hQ,Uer,Jer,Yer,SF,$7e,Ker,Zer,pQ,eor,oor,ror,RF,k7e,tor,aor,_Q,nor,sor,lor,PF,S7e,ior,dor,uQ,cor,mor,gor,BF,R7e,hor,por,bQ,_or,uor,bor,IF,P7e,vor,For,vQ,Tor,Mor,Eor,NF,B7e,Cor,wor,FQ,Aor,Lor,yor,qF,I7e,xor,$or,TQ,kor,Sor,Ror,jF,N7e,Por,Bor,MQ,Ior,Nor,qor,DF,q7e,jor,Dor,EQ,Gor,Oor,Vor,GF,j7e,Xor,zor,CQ,Qor,Wor,Hor,OF,D7e,Uor,Jor,wQ,Yor,Kor,Zor,VF,G7e,err,orr,AQ,rrr,trr,arr,XF,O7e,nrr,srr,LQ,lrr,irr,drr,zF,V7e,crr,frr,yQ,mrr,grr,hrr,QF,X7e,prr,_rr,xQ,urr,brr,vrr,WF,z7e,Frr,Trr,$Q,Mrr,Err,Crr,HF,Q7e,wrr,Arr,kQ,Lrr,yrr,xrr,UF,W7e,$rr,krr,SQ,Srr,Rrr,Prr,JF,H7e,Brr,Irr,RQ,Nrr,qrr,jrr,YF,Drr,U7e,Grr,Orr,J7e,Vrr,Xrr,KF,bVe,gd,ZF,Y7e,cy,zrr,K7e,Qrr,vVe,Do,fy,Wrr,hd,Hrr,PQ,Urr,Jrr,BQ,Yrr,Krr,Zrr,my,etr,Z7e,otr,rtr,ttr,pt,gy,atr,e1e,ntr,str,pd,ltr,o1e,itr,dtr,IQ,ctr,ftr,mtr,eT,gtr,so,hy,htr,r1e,ptr,_tr,Va,utr,t1e,btr,vtr,a1e,Ftr,Ttr,n1e,Mtr,Etr,Ctr,s1e,oT,l1e,wtr,Atr,NQ,Ltr,ytr,xtr,rT,$tr,i1e,ktr,Str,d1e,Rtr,Ptr,tT,FVe,_d,aT,c1e,py,Btr,f1e,Itr,TVe,Go,_y,Ntr,ud,qtr,qQ,jtr,Dtr,jQ,Gtr,Otr,Vtr,uy,Xtr,m1e,ztr,Qtr,Wtr,_t,by,Htr,g1e,Utr,Jtr,bd,Ytr,h1e,Ktr,Ztr,DQ,ear,oar,rar,nT,tar,lo,vy,aar,p1e,nar,sar,Xa,lar,_1e,iar,dar,u1e,car,far,b1e,mar,gar,har,Fe,sT,v1e,par,_ar,GQ,uar,bar,Far,lT,F1e,Tar,Mar,OQ,Ear,Car,war,iT,T1e,Aar,Lar,VQ,yar,xar,$ar,dT,M1e,kar,Sar,XQ,Rar,Par,Bar,Qs,E1e,Iar,Nar,zQ,qar,jar,QQ,Dar,Gar,Oar,cT,C1e,Var,Xar,WQ,zar,Qar,War,Ws,w1e,Har,Uar,HQ,Jar,Yar,UQ,Kar,Zar,enr,ut,A1e,onr,rnr,JQ,tnr,anr,YQ,nnr,snr,KQ,lnr,inr,dnr,fT,L1e,cnr,fnr,ZQ,mnr,gnr,hnr,mT,y1e,pnr,_nr,eW,unr,bnr,vnr,gT,x1e,Fnr,Tnr,oW,Mnr,Enr,Cnr,hT,$1e,wnr,Anr,rW,Lnr,ynr,xnr,pT,k1e,$nr,knr,tW,Snr,Rnr,Pnr,_T,S1e,Bnr,Inr,aW,Nnr,qnr,jnr,uT,R1e,Dnr,Gnr,nW,Onr,Vnr,Xnr,bT,znr,P1e,Qnr,Wnr,B1e,Hnr,Unr,vT,MVe,vd,FT,I1e,Fy,Jnr,N1e,Ynr,EVe,Oo,Ty,Knr,Fd,Znr,sW,esr,osr,lW,rsr,tsr,asr,My,nsr,q1e,ssr,lsr,isr,bt,Ey,dsr,j1e,csr,fsr,Td,msr,D1e,gsr,hsr,iW,psr,_sr,usr,TT,bsr,io,Cy,vsr,G1e,Fsr,Tsr,za,Msr,O1e,Esr,Csr,V1e,wsr,Asr,X1e,Lsr,ysr,xsr,z1e,MT,Q1e,$sr,ksr,dW,Ssr,Rsr,Psr,ET,Bsr,W1e,Isr,Nsr,H1e,qsr,jsr,CT,CVe,Md,wT,U1e,wy,Dsr,J1e,Gsr,wVe,Vo,Ay,Osr,Ed,Vsr,cW,Xsr,zsr,fW,Qsr,Wsr,Hsr,Ly,Usr,Y1e,Jsr,Ysr,Ksr,vt,yy,Zsr,K1e,elr,olr,Cd,rlr,Z1e,tlr,alr,mW,nlr,slr,llr,AT,ilr,co,xy,dlr,e2e,clr,flr,Qa,mlr,o2e,glr,hlr,r2e,plr,_lr,t2e,ulr,blr,vlr,a2e,LT,n2e,Flr,Tlr,gW,Mlr,Elr,Clr,yT,wlr,s2e,Alr,Llr,l2e,ylr,xlr,xT,AVe,wd,$T,i2e,$y,$lr,d2e,klr,LVe,Xo,ky,Slr,Ad,Rlr,hW,Plr,Blr,pW,Ilr,Nlr,qlr,Sy,jlr,c2e,Dlr,Glr,Olr,Ft,Ry,Vlr,f2e,Xlr,zlr,Ld,Qlr,m2e,Wlr,Hlr,_W,Ulr,Jlr,Ylr,kT,Klr,fo,Py,Zlr,g2e,eir,oir,Wa,rir,h2e,tir,air,p2e,nir,sir,_2e,lir,iir,dir,Pe,ST,u2e,cir,fir,uW,mir,gir,hir,RT,b2e,pir,_ir,bW,uir,bir,vir,PT,v2e,Fir,Tir,vW,Mir,Eir,Cir,BT,F2e,wir,Air,FW,Lir,yir,xir,IT,T2e,$ir,kir,TW,Sir,Rir,Pir,NT,M2e,Bir,Iir,MW,Nir,qir,jir,qT,E2e,Dir,Gir,EW,Oir,Vir,Xir,jT,C2e,zir,Qir,CW,Wir,Hir,Uir,DT,w2e,Jir,Yir,wW,Kir,Zir,edr,GT,odr,A2e,rdr,tdr,L2e,adr,ndr,OT,yVe,yd,VT,y2e,By,sdr,x2e,ldr,xVe,zo,Iy,idr,xd,ddr,AW,cdr,fdr,LW,mdr,gdr,hdr,Ny,pdr,$2e,_dr,udr,bdr,Tt,qy,vdr,k2e,Fdr,Tdr,$d,Mdr,S2e,Edr,Cdr,yW,wdr,Adr,Ldr,XT,ydr,mo,jy,xdr,R2e,$dr,kdr,Ha,Sdr,P2e,Rdr,Pdr,B2e,Bdr,Idr,I2e,Ndr,qdr,jdr,et,zT,N2e,Ddr,Gdr,xW,Odr,Vdr,Xdr,QT,q2e,zdr,Qdr,$W,Wdr,Hdr,Udr,WT,j2e,Jdr,Ydr,kW,Kdr,Zdr,ecr,HT,D2e,ocr,rcr,SW,tcr,acr,ncr,UT,G2e,scr,lcr,RW,icr,dcr,ccr,JT,fcr,O2e,mcr,gcr,V2e,hcr,pcr,YT,$Ve,kd,KT,X2e,Dy,_cr,z2e,ucr,kVe,Qo,Gy,bcr,Sd,vcr,PW,Fcr,Tcr,BW,Mcr,Ecr,Ccr,Oy,wcr,Q2e,Acr,Lcr,ycr,Mt,Vy,xcr,W2e,$cr,kcr,Rd,Scr,H2e,Rcr,Pcr,IW,Bcr,Icr,Ncr,ZT,qcr,go,Xy,jcr,U2e,Dcr,Gcr,Ua,Ocr,J2e,Vcr,Xcr,Y2e,zcr,Qcr,K2e,Wcr,Hcr,Ucr,Le,e8,Z2e,Jcr,Ycr,NW,Kcr,Zcr,efr,o8,ebe,ofr,rfr,qW,tfr,afr,nfr,r8,obe,sfr,lfr,jW,ifr,dfr,cfr,t8,rbe,ffr,mfr,DW,gfr,hfr,pfr,a8,tbe,_fr,ufr,GW,bfr,vfr,Ffr,n8,abe,Tfr,Mfr,OW,Efr,Cfr,wfr,s8,nbe,Afr,Lfr,VW,yfr,xfr,$fr,l8,sbe,kfr,Sfr,XW,Rfr,Pfr,Bfr,i8,lbe,Ifr,Nfr,zW,qfr,jfr,Dfr,d8,ibe,Gfr,Ofr,QW,Vfr,Xfr,zfr,c8,Qfr,dbe,Wfr,Hfr,cbe,Ufr,Jfr,f8,SVe,Pd,m8,fbe,zy,Yfr,mbe,Kfr,RVe,Wo,Qy,Zfr,Bd,emr,WW,omr,rmr,HW,tmr,amr,nmr,Wy,smr,gbe,lmr,imr,dmr,Et,Hy,cmr,hbe,fmr,mmr,Id,gmr,pbe,hmr,pmr,UW,_mr,umr,bmr,g8,vmr,ho,Uy,Fmr,_be,Tmr,Mmr,Ja,Emr,ube,Cmr,wmr,bbe,Amr,Lmr,vbe,ymr,xmr,$mr,Jy,h8,Fbe,kmr,Smr,JW,Rmr,Pmr,Bmr,p8,Tbe,Imr,Nmr,YW,qmr,jmr,Dmr,_8,Gmr,Mbe,Omr,Vmr,Ebe,Xmr,zmr,u8,PVe,Nd,b8,Cbe,Yy,Qmr,wbe,Wmr,BVe,Ho,Ky,Hmr,qd,Umr,KW,Jmr,Ymr,ZW,Kmr,Zmr,egr,Zy,ogr,Abe,rgr,tgr,agr,Ct,e9,ngr,Lbe,sgr,lgr,jd,igr,ybe,dgr,cgr,eH,fgr,mgr,ggr,v8,hgr,po,o9,pgr,xbe,_gr,ugr,Ya,bgr,$be,vgr,Fgr,kbe,Tgr,Mgr,Sbe,Egr,Cgr,wgr,ot,F8,Rbe,Agr,Lgr,oH,ygr,xgr,$gr,T8,Pbe,kgr,Sgr,rH,Rgr,Pgr,Bgr,M8,Bbe,Igr,Ngr,tH,qgr,jgr,Dgr,E8,Ibe,Ggr,Ogr,aH,Vgr,Xgr,zgr,C8,Nbe,Qgr,Wgr,nH,Hgr,Ugr,Jgr,w8,Ygr,qbe,Kgr,Zgr,jbe,ehr,ohr,A8,IVe,Dd,L8,Dbe,r9,rhr,Gbe,thr,NVe,Uo,t9,ahr,Gd,nhr,sH,shr,lhr,lH,ihr,dhr,chr,a9,fhr,Obe,mhr,ghr,hhr,wt,n9,phr,Vbe,_hr,uhr,Od,bhr,Xbe,vhr,Fhr,iH,Thr,Mhr,Ehr,y8,Chr,_o,s9,whr,zbe,Ahr,Lhr,Ka,yhr,Qbe,xhr,$hr,Wbe,khr,Shr,Hbe,Rhr,Phr,Bhr,Vd,x8,Ube,Ihr,Nhr,dH,qhr,jhr,Dhr,$8,Jbe,Ghr,Ohr,cH,Vhr,Xhr,zhr,k8,Ybe,Qhr,Whr,fH,Hhr,Uhr,Jhr,S8,Yhr,Kbe,Khr,Zhr,Zbe,epr,opr,R8,qVe,Xd,P8,eve,l9,rpr,ove,tpr,jVe,Jo,i9,apr,zd,npr,mH,spr,lpr,gH,ipr,dpr,cpr,d9,fpr,rve,mpr,gpr,hpr,At,c9,ppr,tve,_pr,upr,Qd,bpr,ave,vpr,Fpr,hH,Tpr,Mpr,Epr,B8,Cpr,uo,f9,wpr,nve,Apr,Lpr,Za,ypr,sve,xpr,$pr,lve,kpr,Spr,ive,Rpr,Ppr,Bpr,m9,I8,dve,Ipr,Npr,pH,qpr,jpr,Dpr,N8,cve,Gpr,Opr,_H,Vpr,Xpr,zpr,q8,Qpr,fve,Wpr,Hpr,mve,Upr,Jpr,j8,DVe,Wd,D8,gve,g9,Ypr,hve,Kpr,GVe,Yo,h9,Zpr,Hd,e_r,uH,o_r,r_r,bH,t_r,a_r,n_r,p9,s_r,pve,l_r,i_r,d_r,Lt,_9,c_r,_ve,f_r,m_r,Ud,g_r,uve,h_r,p_r,vH,__r,u_r,b_r,G8,v_r,bo,u9,F_r,bve,T_r,M_r,en,E_r,vve,C_r,w_r,Fve,A_r,L_r,Tve,y_r,x_r,$_r,Mve,O8,Eve,k_r,S_r,FH,R_r,P_r,B_r,V8,I_r,Cve,N_r,q_r,wve,j_r,D_r,X8,OVe,Jd,z8,Ave,b9,G_r,Lve,O_r,VVe,Ko,v9,V_r,Yd,X_r,TH,z_r,Q_r,MH,W_r,H_r,U_r,F9,J_r,yve,Y_r,K_r,Z_r,yt,T9,eur,xve,our,rur,Kd,tur,$ve,aur,nur,EH,sur,lur,iur,Q8,dur,vo,M9,cur,kve,fur,mur,on,gur,Sve,hur,pur,Rve,_ur,uur,Pve,bur,vur,Fur,rn,W8,Bve,Tur,Mur,CH,Eur,Cur,wur,H8,Ive,Aur,Lur,wH,yur,xur,$ur,U8,Nve,kur,Sur,AH,Rur,Pur,Bur,J8,qve,Iur,Nur,LH,qur,jur,Dur,Y8,Gur,jve,Our,Vur,Dve,Xur,zur,K8,XVe,Zd,Z8,Gve,E9,Qur,Ove,Wur,zVe,Zo,C9,Hur,ec,Uur,yH,Jur,Yur,xH,Kur,Zur,e7r,w9,o7r,Vve,r7r,t7r,a7r,xt,A9,n7r,Xve,s7r,l7r,oc,i7r,zve,d7r,c7r,$H,f7r,m7r,g7r,eM,h7r,Fo,L9,p7r,Qve,_7r,u7r,tn,b7r,Wve,v7r,F7r,Hve,T7r,M7r,Uve,E7r,C7r,w7r,Jve,oM,Yve,A7r,L7r,kH,y7r,x7r,$7r,rM,k7r,Kve,S7r,R7r,Zve,P7r,B7r,tM,QVe,rc,aM,eFe,y9,I7r,oFe,N7r,WVe,er,x9,q7r,tc,j7r,SH,D7r,G7r,RH,O7r,V7r,X7r,$9,z7r,rFe,Q7r,W7r,H7r,$t,k9,U7r,tFe,J7r,Y7r,ac,K7r,aFe,Z7r,e1r,PH,o1r,r1r,t1r,nM,a1r,yr,S9,n1r,nFe,s1r,l1r,an,i1r,sFe,d1r,c1r,lFe,f1r,m1r,iFe,g1r,h1r,p1r,j,sM,dFe,_1r,u1r,BH,b1r,v1r,F1r,lM,cFe,T1r,M1r,IH,E1r,C1r,w1r,iM,fFe,A1r,L1r,NH,y1r,x1r,$1r,dM,mFe,k1r,S1r,qH,R1r,P1r,B1r,cM,gFe,I1r,N1r,jH,q1r,j1r,D1r,fM,hFe,G1r,O1r,DH,V1r,X1r,z1r,mM,pFe,Q1r,W1r,GH,H1r,U1r,J1r,gM,_Fe,Y1r,K1r,OH,Z1r,e2r,o2r,hM,uFe,r2r,t2r,VH,a2r,n2r,s2r,pM,bFe,l2r,i2r,XH,d2r,c2r,f2r,_M,vFe,m2r,g2r,zH,h2r,p2r,_2r,uM,FFe,u2r,b2r,QH,v2r,F2r,T2r,bM,TFe,M2r,E2r,WH,C2r,w2r,A2r,vM,MFe,L2r,y2r,HH,x2r,$2r,k2r,FM,EFe,S2r,R2r,UH,P2r,B2r,I2r,TM,CFe,N2r,q2r,JH,j2r,D2r,G2r,MM,wFe,O2r,V2r,YH,X2r,z2r,Q2r,Hs,AFe,W2r,H2r,KH,U2r,J2r,ZH,Y2r,K2r,Z2r,EM,LFe,ebr,obr,eU,rbr,tbr,abr,CM,yFe,nbr,sbr,oU,lbr,ibr,dbr,wM,xFe,cbr,fbr,rU,mbr,gbr,hbr,AM,$Fe,pbr,_br,tU,ubr,bbr,vbr,LM,kFe,Fbr,Tbr,aU,Mbr,Ebr,Cbr,yM,SFe,wbr,Abr,nU,Lbr,ybr,xbr,xM,RFe,$br,kbr,sU,Sbr,Rbr,Pbr,$M,PFe,Bbr,Ibr,lU,Nbr,qbr,jbr,kM,BFe,Dbr,Gbr,iU,Obr,Vbr,Xbr,SM,IFe,zbr,Qbr,dU,Wbr,Hbr,Ubr,RM,NFe,Jbr,Ybr,cU,Kbr,Zbr,evr,PM,qFe,ovr,rvr,fU,tvr,avr,nvr,BM,jFe,svr,lvr,mU,ivr,dvr,cvr,IM,DFe,fvr,mvr,gU,gvr,hvr,pvr,NM,GFe,_vr,uvr,hU,bvr,vvr,Fvr,qM,OFe,Tvr,Mvr,pU,Evr,Cvr,wvr,jM,VFe,Avr,Lvr,_U,yvr,xvr,$vr,DM,XFe,kvr,Svr,uU,Rvr,Pvr,Bvr,GM,zFe,Ivr,Nvr,bU,qvr,jvr,Dvr,OM,QFe,Gvr,Ovr,vU,Vvr,Xvr,zvr,VM,WFe,Qvr,Wvr,FU,Hvr,Uvr,Jvr,XM,HFe,Yvr,Kvr,TU,Zvr,eFr,oFr,zM,UFe,rFr,tFr,MU,aFr,nFr,sFr,QM,JFe,lFr,iFr,EU,dFr,cFr,fFr,WM,YFe,mFr,gFr,CU,hFr,pFr,_Fr,HM,KFe,uFr,bFr,wU,vFr,FFr,TFr,UM,ZFe,MFr,EFr,AU,CFr,wFr,AFr,JM,eTe,LFr,yFr,LU,xFr,$Fr,kFr,YM,oTe,SFr,RFr,yU,PFr,BFr,IFr,KM,HVe,nc,ZM,rTe,R9,NFr,tTe,qFr,UVe,or,P9,jFr,sc,DFr,xU,GFr,OFr,$U,VFr,XFr,zFr,B9,QFr,aTe,WFr,HFr,UFr,kt,I9,JFr,nTe,YFr,KFr,lc,ZFr,sTe,eTr,oTr,kU,rTr,tTr,aTr,e4,nTr,xr,N9,sTr,lTe,lTr,iTr,nn,dTr,iTe,cTr,fTr,dTe,mTr,gTr,cTe,hTr,pTr,_Tr,se,o4,fTe,uTr,bTr,SU,vTr,FTr,TTr,r4,mTe,MTr,ETr,RU,CTr,wTr,ATr,t4,gTe,LTr,yTr,PU,xTr,$Tr,kTr,a4,hTe,STr,RTr,BU,PTr,BTr,ITr,n4,pTe,NTr,qTr,IU,jTr,DTr,GTr,s4,_Te,OTr,VTr,NU,XTr,zTr,QTr,l4,uTe,WTr,HTr,qU,UTr,JTr,YTr,i4,bTe,KTr,ZTr,jU,e8r,o8r,r8r,d4,vTe,t8r,a8r,DU,n8r,s8r,l8r,c4,FTe,i8r,d8r,GU,c8r,f8r,m8r,f4,TTe,g8r,h8r,OU,p8r,_8r,u8r,m4,MTe,b8r,v8r,VU,F8r,T8r,M8r,g4,ETe,E8r,C8r,XU,w8r,A8r,L8r,h4,CTe,y8r,x8r,zU,$8r,k8r,S8r,p4,wTe,R8r,P8r,QU,B8r,I8r,N8r,_4,ATe,q8r,j8r,WU,D8r,G8r,O8r,u4,LTe,V8r,X8r,HU,z8r,Q8r,W8r,b4,yTe,H8r,U8r,UU,J8r,Y8r,K8r,v4,xTe,Z8r,eMr,JU,oMr,rMr,tMr,F4,$Te,aMr,nMr,YU,sMr,lMr,iMr,T4,kTe,dMr,cMr,KU,fMr,mMr,gMr,M4,STe,hMr,pMr,ZU,_Mr,uMr,bMr,E4,RTe,vMr,FMr,eJ,TMr,MMr,EMr,C4,JVe,ic,w4,PTe,q9,CMr,BTe,wMr,YVe,rr,j9,AMr,dc,LMr,oJ,yMr,xMr,rJ,$Mr,kMr,SMr,D9,RMr,ITe,PMr,BMr,IMr,St,G9,NMr,NTe,qMr,jMr,cc,DMr,qTe,GMr,OMr,tJ,VMr,XMr,zMr,A4,QMr,$r,O9,WMr,jTe,HMr,UMr,sn,JMr,DTe,YMr,KMr,GTe,ZMr,e4r,OTe,o4r,r4r,t4r,Me,L4,VTe,a4r,n4r,aJ,s4r,l4r,i4r,y4,XTe,d4r,c4r,nJ,f4r,m4r,g4r,x4,zTe,h4r,p4r,sJ,_4r,u4r,b4r,$4,QTe,v4r,F4r,lJ,T4r,M4r,E4r,k4,WTe,C4r,w4r,iJ,A4r,L4r,y4r,S4,HTe,x4r,$4r,dJ,k4r,S4r,R4r,R4,UTe,P4r,B4r,cJ,I4r,N4r,q4r,P4,JTe,j4r,D4r,fJ,G4r,O4r,V4r,B4,YTe,X4r,z4r,mJ,Q4r,W4r,H4r,I4,KTe,U4r,J4r,gJ,Y4r,K4r,Z4r,N4,ZTe,eEr,oEr,hJ,rEr,tEr,aEr,q4,e8e,nEr,sEr,pJ,lEr,iEr,dEr,j4,o8e,cEr,fEr,_J,mEr,gEr,hEr,D4,KVe,fc,G4,r8e,V9,pEr,t8e,_Er,ZVe,tr,X9,uEr,mc,bEr,uJ,vEr,FEr,bJ,TEr,MEr,EEr,z9,CEr,a8e,wEr,AEr,LEr,Rt,Q9,yEr,n8e,xEr,$Er,gc,kEr,s8e,SEr,REr,vJ,PEr,BEr,IEr,O4,NEr,kr,W9,qEr,l8e,jEr,DEr,ln,GEr,i8e,OEr,VEr,d8e,XEr,zEr,c8e,QEr,WEr,HEr,dn,V4,f8e,UEr,JEr,FJ,YEr,KEr,ZEr,X4,m8e,eCr,oCr,TJ,rCr,tCr,aCr,z4,g8e,nCr,sCr,MJ,lCr,iCr,dCr,Q4,h8e,cCr,fCr,EJ,mCr,gCr,hCr,W4,eXe,hc,H4,p8e,H9,pCr,_8e,_Cr,oXe,ar,U9,uCr,pc,bCr,CJ,vCr,FCr,wJ,TCr,MCr,ECr,J9,CCr,u8e,wCr,ACr,LCr,Pt,Y9,yCr,b8e,xCr,$Cr,_c,kCr,v8e,SCr,RCr,AJ,PCr,BCr,ICr,U4,NCr,Sr,K9,qCr,F8e,jCr,DCr,cn,GCr,T8e,OCr,VCr,M8e,XCr,zCr,E8e,QCr,WCr,HCr,ie,J4,C8e,UCr,JCr,LJ,YCr,KCr,ZCr,Y4,w8e,e3r,o3r,yJ,r3r,t3r,a3r,K4,A8e,n3r,s3r,xJ,l3r,i3r,d3r,Z4,L8e,c3r,f3r,$J,m3r,g3r,h3r,eE,y8e,p3r,_3r,kJ,u3r,b3r,v3r,oE,x8e,F3r,T3r,SJ,M3r,E3r,C3r,rE,$8e,w3r,A3r,RJ,L3r,y3r,x3r,tE,k8e,$3r,k3r,PJ,S3r,R3r,P3r,aE,S8e,B3r,I3r,BJ,N3r,q3r,j3r,nE,R8e,D3r,G3r,IJ,O3r,V3r,X3r,sE,P8e,z3r,Q3r,NJ,W3r,H3r,U3r,lE,B8e,J3r,Y3r,qJ,K3r,Z3r,e5r,iE,I8e,o5r,r5r,jJ,t5r,a5r,n5r,dE,N8e,s5r,l5r,DJ,i5r,d5r,c5r,cE,q8e,f5r,m5r,GJ,g5r,h5r,p5r,fE,j8e,_5r,u5r,OJ,b5r,v5r,F5r,mE,D8e,T5r,M5r,VJ,E5r,C5r,w5r,gE,G8e,A5r,L5r,XJ,y5r,x5r,$5r,hE,O8e,k5r,S5r,zJ,R5r,P5r,B5r,pE,V8e,I5r,N5r,QJ,q5r,j5r,D5r,_E,rXe,uc,uE,X8e,Z9,G5r,z8e,O5r,tXe,nr,ex,V5r,bc,X5r,WJ,z5r,Q5r,HJ,W5r,H5r,U5r,ox,J5r,Q8e,Y5r,K5r,Z5r,Bt,rx,e0r,W8e,o0r,r0r,vc,t0r,H8e,a0r,n0r,UJ,s0r,l0r,i0r,bE,d0r,Rr,tx,c0r,U8e,f0r,m0r,fn,g0r,J8e,h0r,p0r,Y8e,_0r,u0r,K8e,b0r,v0r,F0r,ye,vE,Z8e,T0r,M0r,JJ,E0r,C0r,w0r,FE,eMe,A0r,L0r,YJ,y0r,x0r,$0r,TE,oMe,k0r,S0r,KJ,R0r,P0r,B0r,ME,rMe,I0r,N0r,ZJ,q0r,j0r,D0r,EE,tMe,G0r,O0r,eY,V0r,X0r,z0r,CE,aMe,Q0r,W0r,oY,H0r,U0r,J0r,wE,nMe,Y0r,K0r,rY,Z0r,ewr,owr,AE,sMe,rwr,twr,tY,awr,nwr,swr,LE,lMe,lwr,iwr,aY,dwr,cwr,fwr,yE,iMe,mwr,gwr,nY,hwr,pwr,_wr,xE,aXe,Fc,$E,dMe,ax,uwr,cMe,bwr,nXe,sr,nx,vwr,Tc,Fwr,sY,Twr,Mwr,lY,Ewr,Cwr,wwr,sx,Awr,fMe,Lwr,ywr,xwr,It,lx,$wr,mMe,kwr,Swr,Mc,Rwr,gMe,Pwr,Bwr,iY,Iwr,Nwr,qwr,kE,jwr,Pr,ix,Dwr,hMe,Gwr,Owr,mn,Vwr,pMe,Xwr,zwr,_Me,Qwr,Wwr,uMe,Hwr,Uwr,Jwr,te,SE,bMe,Ywr,Kwr,dY,Zwr,eAr,oAr,RE,vMe,rAr,tAr,cY,aAr,nAr,sAr,PE,FMe,lAr,iAr,fY,dAr,cAr,fAr,BE,TMe,mAr,gAr,mY,hAr,pAr,_Ar,IE,MMe,uAr,bAr,gY,vAr,FAr,TAr,NE,EMe,MAr,EAr,hY,CAr,wAr,AAr,qE,CMe,LAr,yAr,pY,xAr,$Ar,kAr,jE,wMe,SAr,RAr,_Y,PAr,BAr,IAr,DE,AMe,NAr,qAr,uY,jAr,DAr,GAr,GE,LMe,OAr,VAr,bY,XAr,zAr,QAr,OE,yMe,WAr,HAr,vY,UAr,JAr,YAr,VE,xMe,KAr,ZAr,FY,e6r,o6r,r6r,XE,$Me,t6r,a6r,TY,n6r,s6r,l6r,zE,kMe,i6r,d6r,MY,c6r,f6r,m6r,QE,SMe,g6r,h6r,EY,p6r,_6r,u6r,WE,RMe,b6r,v6r,CY,F6r,T6r,M6r,HE,PMe,E6r,C6r,wY,w6r,A6r,L6r,UE,BMe,y6r,x6r,AY,$6r,k6r,S6r,JE,IMe,R6r,P6r,LY,B6r,I6r,N6r,YE,NMe,q6r,j6r,yY,D6r,G6r,O6r,KE,qMe,V6r,X6r,xY,z6r,Q6r,W6r,ZE,jMe,H6r,U6r,$Y,J6r,Y6r,K6r,eC,DMe,Z6r,eLr,kY,oLr,rLr,tLr,oC,GMe,aLr,nLr,SY,sLr,lLr,iLr,rC,OMe,dLr,cLr,RY,fLr,mLr,gLr,tC,VMe,hLr,pLr,PY,_Lr,uLr,bLr,aC,sXe,Ec,nC,XMe,dx,vLr,zMe,FLr,lXe,lr,cx,TLr,Cc,MLr,BY,ELr,CLr,IY,wLr,ALr,LLr,fx,yLr,QMe,xLr,$Lr,kLr,Nt,mx,SLr,WMe,RLr,PLr,wc,BLr,HMe,ILr,NLr,NY,qLr,jLr,DLr,sC,GLr,Br,gx,OLr,UMe,VLr,XLr,gn,zLr,JMe,QLr,WLr,YMe,HLr,ULr,KMe,JLr,YLr,KLr,_e,lC,ZMe,ZLr,eyr,qY,oyr,ryr,tyr,iC,e4e,ayr,nyr,jY,syr,lyr,iyr,dC,o4e,dyr,cyr,DY,fyr,myr,gyr,cC,r4e,hyr,pyr,GY,_yr,uyr,byr,fC,t4e,vyr,Fyr,OY,Tyr,Myr,Eyr,mC,a4e,Cyr,wyr,VY,Ayr,Lyr,yyr,gC,n4e,xyr,$yr,XY,kyr,Syr,Ryr,hC,s4e,Pyr,Byr,zY,Iyr,Nyr,qyr,pC,l4e,jyr,Dyr,QY,Gyr,Oyr,Vyr,_C,i4e,Xyr,zyr,WY,Qyr,Wyr,Hyr,uC,d4e,Uyr,Jyr,HY,Yyr,Kyr,Zyr,bC,c4e,e9r,o9r,UY,r9r,t9r,a9r,vC,f4e,n9r,s9r,JY,l9r,i9r,d9r,FC,m4e,c9r,f9r,YY,m9r,g9r,h9r,TC,g4e,p9r,_9r,KY,u9r,b9r,v9r,MC,h4e,F9r,T9r,ZY,M9r,E9r,C9r,EC,p4e,w9r,A9r,eK,L9r,y9r,x9r,CC,iXe,Ac,wC,_4e,hx,$9r,u4e,k9r,dXe,ir,px,S9r,Lc,R9r,oK,P9r,B9r,rK,I9r,N9r,q9r,_x,j9r,b4e,D9r,G9r,O9r,qt,ux,V9r,v4e,X9r,z9r,yc,Q9r,F4e,W9r,H9r,tK,U9r,J9r,Y9r,AC,K9r,Ir,bx,Z9r,T4e,exr,oxr,hn,rxr,M4e,txr,axr,E4e,nxr,sxr,C4e,lxr,ixr,dxr,vx,LC,w4e,cxr,fxr,aK,mxr,gxr,hxr,yC,A4e,pxr,_xr,nK,uxr,bxr,vxr,xC,cXe,xc,$C,L4e,Fx,Fxr,y4e,Txr,fXe,dr,Tx,Mxr,$c,Exr,sK,Cxr,wxr,lK,Axr,Lxr,yxr,Mx,xxr,x4e,$xr,kxr,Sxr,jt,Ex,Rxr,$4e,Pxr,Bxr,kc,Ixr,k4e,Nxr,qxr,iK,jxr,Dxr,Gxr,kC,Oxr,Nr,Cx,Vxr,S4e,Xxr,zxr,pn,Qxr,R4e,Wxr,Hxr,P4e,Uxr,Jxr,B4e,Yxr,Kxr,Zxr,I4e,SC,N4e,e$r,o$r,dK,r$r,t$r,a$r,RC,mXe,Sc,PC,q4e,wx,n$r,j4e,s$r,gXe,cr,Ax,l$r,Rc,i$r,cK,d$r,c$r,fK,f$r,m$r,g$r,Lx,h$r,D4e,p$r,_$r,u$r,Dt,yx,b$r,G4e,v$r,F$r,Pc,T$r,O4e,M$r,E$r,mK,C$r,w$r,A$r,BC,L$r,qr,xx,y$r,V4e,x$r,$$r,_n,k$r,X4e,S$r,R$r,z4e,P$r,B$r,Q4e,I$r,N$r,q$r,de,IC,W4e,j$r,D$r,gK,G$r,O$r,V$r,NC,H4e,X$r,z$r,hK,Q$r,W$r,H$r,qC,U4e,U$r,J$r,pK,Y$r,K$r,Z$r,jC,J4e,ekr,okr,_K,rkr,tkr,akr,DC,Y4e,nkr,skr,uK,lkr,ikr,dkr,GC,K4e,ckr,fkr,bK,mkr,gkr,hkr,OC,Z4e,pkr,_kr,vK,ukr,bkr,vkr,VC,eEe,Fkr,Tkr,FK,Mkr,Ekr,Ckr,XC,oEe,wkr,Akr,TK,Lkr,ykr,xkr,zC,rEe,$kr,kkr,MK,Skr,Rkr,Pkr,QC,tEe,Bkr,Ikr,EK,Nkr,qkr,jkr,WC,aEe,Dkr,Gkr,CK,Okr,Vkr,Xkr,HC,nEe,zkr,Qkr,wK,Wkr,Hkr,Ukr,UC,sEe,Jkr,Ykr,AK,Kkr,Zkr,eSr,JC,lEe,oSr,rSr,LK,tSr,aSr,nSr,YC,iEe,sSr,lSr,yK,iSr,dSr,cSr,KC,dEe,fSr,mSr,xK,gSr,hSr,pSr,ZC,cEe,_Sr,uSr,$K,bSr,vSr,FSr,e3,fEe,TSr,MSr,kK,ESr,CSr,wSr,o3,mEe,ASr,LSr,SK,ySr,xSr,$Sr,r3,hXe,Bc,t3,gEe,$x,kSr,hEe,SSr,pXe,fr,kx,RSr,Ic,PSr,RK,BSr,ISr,PK,NSr,qSr,jSr,Sx,DSr,pEe,GSr,OSr,VSr,Gt,Rx,XSr,_Ee,zSr,QSr,Nc,WSr,uEe,HSr,USr,BK,JSr,YSr,KSr,a3,ZSr,jr,Px,eRr,bEe,oRr,rRr,un,tRr,vEe,aRr,nRr,FEe,sRr,lRr,TEe,iRr,dRr,cRr,ce,n3,MEe,fRr,mRr,IK,gRr,hRr,pRr,s3,EEe,_Rr,uRr,NK,bRr,vRr,FRr,l3,CEe,TRr,MRr,qK,ERr,CRr,wRr,i3,wEe,ARr,LRr,jK,yRr,xRr,$Rr,d3,AEe,kRr,SRr,DK,RRr,PRr,BRr,c3,LEe,IRr,NRr,GK,qRr,jRr,DRr,f3,yEe,GRr,ORr,OK,VRr,XRr,zRr,m3,xEe,QRr,WRr,VK,HRr,URr,JRr,g3,$Ee,YRr,KRr,XK,ZRr,ePr,oPr,h3,kEe,rPr,tPr,zK,aPr,nPr,sPr,p3,SEe,lPr,iPr,QK,dPr,cPr,fPr,_3,REe,mPr,gPr,WK,hPr,pPr,_Pr,u3,PEe,uPr,bPr,HK,vPr,FPr,TPr,b3,BEe,MPr,EPr,UK,CPr,wPr,APr,v3,IEe,LPr,yPr,JK,xPr,$Pr,kPr,F3,NEe,SPr,RPr,YK,PPr,BPr,IPr,T3,qEe,NPr,qPr,KK,jPr,DPr,GPr,M3,jEe,OPr,VPr,ZK,XPr,zPr,QPr,E3,DEe,WPr,HPr,eZ,UPr,JPr,YPr,C3,GEe,KPr,ZPr,oZ,eBr,oBr,rBr,w3,_Xe,qc,A3,OEe,Bx,tBr,VEe,aBr,uXe,mr,Ix,nBr,jc,sBr,rZ,lBr,iBr,tZ,dBr,cBr,fBr,Nx,mBr,XEe,gBr,hBr,pBr,Ot,qx,_Br,zEe,uBr,bBr,Dc,vBr,QEe,FBr,TBr,aZ,MBr,EBr,CBr,L3,wBr,Dr,jx,ABr,WEe,LBr,yBr,bn,xBr,HEe,$Br,kBr,UEe,SBr,RBr,JEe,PBr,BBr,IBr,YEe,y3,KEe,NBr,qBr,nZ,jBr,DBr,GBr,x3,bXe,Gc,$3,ZEe,Dx,OBr,eCe,VBr,vXe,gr,Gx,XBr,Oc,zBr,sZ,QBr,WBr,lZ,HBr,UBr,JBr,Ox,YBr,oCe,KBr,ZBr,eIr,Vt,Vx,oIr,rCe,rIr,tIr,Vc,aIr,tCe,nIr,sIr,iZ,lIr,iIr,dIr,k3,cIr,Gr,Xx,fIr,aCe,mIr,gIr,vn,hIr,nCe,pIr,_Ir,sCe,uIr,bIr,lCe,vIr,FIr,TIr,iCe,S3,dCe,MIr,EIr,dZ,CIr,wIr,AIr,R3,FXe,Xc,P3,cCe,zx,LIr,fCe,yIr,TXe,hr,Qx,xIr,zc,$Ir,cZ,kIr,SIr,fZ,RIr,PIr,BIr,Wx,IIr,mCe,NIr,qIr,jIr,Xt,Hx,DIr,gCe,GIr,OIr,Qc,VIr,hCe,XIr,zIr,mZ,QIr,WIr,HIr,B3,UIr,Or,Ux,JIr,pCe,YIr,KIr,Fn,ZIr,_Ce,eNr,oNr,uCe,rNr,tNr,bCe,aNr,nNr,sNr,oe,I3,vCe,lNr,iNr,gZ,dNr,cNr,fNr,N3,FCe,mNr,gNr,hZ,hNr,pNr,_Nr,q3,TCe,uNr,bNr,pZ,vNr,FNr,TNr,j3,MCe,MNr,ENr,_Z,CNr,wNr,ANr,D3,ECe,LNr,yNr,uZ,xNr,$Nr,kNr,G3,CCe,SNr,RNr,bZ,PNr,BNr,INr,O3,wCe,NNr,qNr,vZ,jNr,DNr,GNr,V3,ACe,ONr,VNr,FZ,XNr,zNr,QNr,X3,LCe,WNr,HNr,TZ,UNr,JNr,YNr,z3,yCe,KNr,ZNr,MZ,eqr,oqr,rqr,Q3,xCe,tqr,aqr,EZ,nqr,sqr,lqr,W3,$Ce,iqr,dqr,CZ,cqr,fqr,mqr,H3,kCe,gqr,hqr,wZ,pqr,_qr,uqr,U3,SCe,bqr,vqr,AZ,Fqr,Tqr,Mqr,J3,RCe,Eqr,Cqr,LZ,wqr,Aqr,Lqr,Y3,PCe,yqr,xqr,yZ,$qr,kqr,Sqr,K3,BCe,Rqr,Pqr,xZ,Bqr,Iqr,Nqr,Z3,ICe,qqr,jqr,$Z,Dqr,Gqr,Oqr,e5,NCe,Vqr,Xqr,kZ,zqr,Qqr,Wqr,o5,qCe,Hqr,Uqr,SZ,Jqr,Yqr,Kqr,r5,jCe,Zqr,ejr,RZ,ojr,rjr,tjr,t5,DCe,ajr,njr,PZ,sjr,ljr,ijr,a5,GCe,djr,cjr,BZ,fjr,mjr,gjr,n5,OCe,hjr,pjr,IZ,_jr,ujr,bjr,s5,VCe,vjr,Fjr,NZ,Tjr,Mjr,Ejr,l5,XCe,Cjr,wjr,qZ,Ajr,Ljr,yjr,i5,zCe,xjr,$jr,jZ,kjr,Sjr,Rjr,d5,MXe,Wc,c5,QCe,Jx,Pjr,WCe,Bjr,EXe,pr,Yx,Ijr,Hc,Njr,DZ,qjr,jjr,GZ,Djr,Gjr,Ojr,Kx,Vjr,HCe,Xjr,zjr,Qjr,zt,Zx,Wjr,UCe,Hjr,Ujr,Uc,Jjr,JCe,Yjr,Kjr,OZ,Zjr,eDr,oDr,f5,rDr,Vr,e$,tDr,YCe,aDr,nDr,Tn,sDr,KCe,lDr,iDr,ZCe,dDr,cDr,e3e,fDr,mDr,gDr,xe,m5,o3e,hDr,pDr,VZ,_Dr,uDr,bDr,g5,r3e,vDr,FDr,XZ,TDr,MDr,EDr,h5,t3e,CDr,wDr,zZ,ADr,LDr,yDr,p5,a3e,xDr,$Dr,QZ,kDr,SDr,RDr,_5,n3e,PDr,BDr,WZ,IDr,NDr,qDr,u5,s3e,jDr,DDr,HZ,GDr,ODr,VDr,b5,l3e,XDr,zDr,UZ,QDr,WDr,HDr,v5,i3e,UDr,JDr,JZ,YDr,KDr,ZDr,F5,d3e,eGr,oGr,YZ,rGr,tGr,aGr,T5,c3e,nGr,sGr,KZ,lGr,iGr,dGr,M5,CXe,Jc,E5,f3e,o$,cGr,m3e,fGr,wXe,_r,r$,mGr,Yc,gGr,ZZ,hGr,pGr,eee,_Gr,uGr,bGr,t$,vGr,g3e,FGr,TGr,MGr,Qt,a$,EGr,h3e,CGr,wGr,Kc,AGr,p3e,LGr,yGr,oee,xGr,$Gr,kGr,C5,SGr,Xr,n$,RGr,_3e,PGr,BGr,Mn,IGr,u3e,NGr,qGr,b3e,jGr,DGr,v3e,GGr,OGr,VGr,Ee,w5,F3e,XGr,zGr,ree,QGr,WGr,HGr,A5,T3e,UGr,JGr,tee,YGr,KGr,ZGr,L5,M3e,eOr,oOr,aee,rOr,tOr,aOr,y5,E3e,nOr,sOr,nee,lOr,iOr,dOr,x5,C3e,cOr,fOr,see,mOr,gOr,hOr,$5,w3e,pOr,_Or,lee,uOr,bOr,vOr,k5,A3e,FOr,TOr,iee,MOr,EOr,COr,S5,L3e,wOr,AOr,dee,LOr,yOr,xOr,R5,y3e,$Or,kOr,cee,SOr,ROr,POr,P5,x3e,BOr,IOr,fee,NOr,qOr,jOr,B5,$3e,DOr,GOr,mee,OOr,VOr,XOr,I5,k3e,zOr,QOr,gee,WOr,HOr,UOr,N5,S3e,JOr,YOr,hee,KOr,ZOr,eVr,q5,AXe,Zc,j5,R3e,s$,oVr,P3e,rVr,LXe,ur,l$,tVr,ef,aVr,pee,nVr,sVr,_ee,lVr,iVr,dVr,i$,cVr,B3e,fVr,mVr,gVr,Wt,d$,hVr,I3e,pVr,_Vr,of,uVr,N3e,bVr,vVr,uee,FVr,TVr,MVr,D5,EVr,zr,c$,CVr,q3e,wVr,AVr,En,LVr,j3e,yVr,xVr,D3e,$Vr,kVr,G3e,SVr,RVr,PVr,$e,G5,O3e,BVr,IVr,bee,NVr,qVr,jVr,O5,V3e,DVr,GVr,vee,OVr,VVr,XVr,V5,X3e,zVr,QVr,Fee,WVr,HVr,UVr,X5,z3e,JVr,YVr,Tee,KVr,ZVr,eXr,z5,Q3e,oXr,rXr,Mee,tXr,aXr,nXr,Q5,W3e,sXr,lXr,Eee,iXr,dXr,cXr,W5,H3e,fXr,mXr,Cee,gXr,hXr,pXr,H5,U3e,_Xr,uXr,wee,bXr,vXr,FXr,U5,J3e,TXr,MXr,Aee,EXr,CXr,wXr,J5,Y3e,AXr,LXr,Lee,yXr,xXr,$Xr,Y5,yXe,rf,K5,K3e,f$,kXr,Z3e,SXr,xXe,br,m$,RXr,tf,PXr,yee,BXr,IXr,xee,NXr,qXr,jXr,g$,DXr,e5e,GXr,OXr,VXr,Ht,h$,XXr,o5e,zXr,QXr,af,WXr,r5e,HXr,UXr,$ee,JXr,YXr,KXr,Z5,ZXr,Qr,p$,ezr,t5e,ozr,rzr,Cn,tzr,a5e,azr,nzr,n5e,szr,lzr,s5e,izr,dzr,czr,ke,e0,l5e,fzr,mzr,kee,gzr,hzr,pzr,o0,i5e,_zr,uzr,See,bzr,vzr,Fzr,r0,d5e,Tzr,Mzr,Ree,Ezr,Czr,wzr,t0,c5e,Azr,Lzr,Pee,yzr,xzr,$zr,a0,f5e,kzr,Szr,Bee,Rzr,Pzr,Bzr,n0,m5e,Izr,Nzr,Iee,qzr,jzr,Dzr,s0,g5e,Gzr,Ozr,Nee,Vzr,Xzr,zzr,l0,h5e,Qzr,Wzr,qee,Hzr,Uzr,Jzr,i0,p5e,Yzr,Kzr,jee,Zzr,eQr,oQr,d0,_5e,rQr,tQr,Dee,aQr,nQr,sQr,c0,$Xe,nf,f0,u5e,_$,lQr,b5e,iQr,kXe,vr,u$,dQr,sf,cQr,Gee,fQr,mQr,Oee,gQr,hQr,pQr,b$,_Qr,v5e,uQr,bQr,vQr,Ut,v$,FQr,F5e,TQr,MQr,lf,EQr,T5e,CQr,wQr,Vee,AQr,LQr,yQr,m0,xQr,Wr,F$,$Qr,M5e,kQr,SQr,wn,RQr,E5e,PQr,BQr,C5e,IQr,NQr,w5e,qQr,jQr,DQr,Se,g0,A5e,GQr,OQr,Xee,VQr,XQr,zQr,h0,L5e,QQr,WQr,zee,HQr,UQr,JQr,p0,y5e,YQr,KQr,Qee,ZQr,eWr,oWr,_0,x5e,rWr,tWr,Wee,aWr,nWr,sWr,u0,$5e,lWr,iWr,Hee,dWr,cWr,fWr,b0,k5e,mWr,gWr,Uee,hWr,pWr,_Wr,v0,S5e,uWr,bWr,Jee,vWr,FWr,TWr,F0,R5e,MWr,EWr,Yee,CWr,wWr,AWr,T0,P5e,LWr,yWr,Kee,xWr,$Wr,kWr,M0,B5e,SWr,RWr,Zee,PWr,BWr,IWr,E0,SXe,df,C0,I5e,T$,NWr,N5e,qWr,RXe,Fr,M$,jWr,cf,DWr,eoe,GWr,OWr,ooe,VWr,XWr,zWr,E$,QWr,q5e,WWr,HWr,UWr,Jt,C$,JWr,j5e,YWr,KWr,ff,ZWr,D5e,eHr,oHr,roe,rHr,tHr,aHr,w0,nHr,Hr,w$,sHr,G5e,lHr,iHr,An,dHr,O5e,cHr,fHr,V5e,mHr,gHr,X5e,hHr,pHr,_Hr,Re,A0,z5e,uHr,bHr,toe,vHr,FHr,THr,L0,Q5e,MHr,EHr,aoe,CHr,wHr,AHr,y0,W5e,LHr,yHr,noe,xHr,$Hr,kHr,x0,H5e,SHr,RHr,soe,PHr,BHr,IHr,$0,U5e,NHr,qHr,loe,jHr,DHr,GHr,k0,J5e,OHr,VHr,ioe,XHr,zHr,QHr,S0,Y5e,WHr,HHr,doe,UHr,JHr,YHr,R0,K5e,KHr,ZHr,coe,eUr,oUr,rUr,P0,Z5e,tUr,aUr,foe,nUr,sUr,lUr,B0,e0e,iUr,dUr,moe,cUr,fUr,mUr,I0,PXe,mf,N0,o0e,A$,gUr,r0e,hUr,BXe,Tr,L$,pUr,gf,_Ur,goe,uUr,bUr,hoe,vUr,FUr,TUr,y$,MUr,t0e,EUr,CUr,wUr,Yt,x$,AUr,a0e,LUr,yUr,hf,xUr,n0e,$Ur,kUr,poe,SUr,RUr,PUr,q0,BUr,Ur,$$,IUr,s0e,NUr,qUr,Ln,jUr,l0e,DUr,GUr,i0e,OUr,VUr,d0e,XUr,zUr,QUr,Ve,j0,c0e,WUr,HUr,_oe,UUr,JUr,YUr,D0,f0e,KUr,ZUr,uoe,eJr,oJr,rJr,G0,m0e,tJr,aJr,boe,nJr,sJr,lJr,O0,g0e,iJr,dJr,voe,cJr,fJr,mJr,V0,h0e,gJr,hJr,Foe,pJr,_Jr,uJr,X0,p0e,bJr,vJr,Toe,FJr,TJr,MJr,z0,_0e,EJr,CJr,Moe,wJr,AJr,LJr,Q0,u0e,yJr,xJr,Eoe,$Jr,kJr,SJr,W0,IXe,pf,H0,b0e,k$,RJr,v0e,PJr,NXe,Mr,S$,BJr,_f,IJr,Coe,NJr,qJr,woe,jJr,DJr,GJr,R$,OJr,F0e,VJr,XJr,zJr,Kt,P$,QJr,T0e,WJr,HJr,uf,UJr,M0e,JJr,YJr,Aoe,KJr,ZJr,eYr,U0,oYr,Jr,B$,rYr,E0e,tYr,aYr,yn,nYr,C0e,sYr,lYr,w0e,iYr,dYr,A0e,cYr,fYr,mYr,Xe,J0,L0e,gYr,hYr,Loe,pYr,_Yr,uYr,Y0,y0e,bYr,vYr,yoe,FYr,TYr,MYr,K0,x0e,EYr,CYr,xoe,wYr,AYr,LYr,Z0,$0e,yYr,xYr,$oe,$Yr,kYr,SYr,ew,k0e,RYr,PYr,koe,BYr,IYr,NYr,ow,S0e,qYr,jYr,Soe,DYr,GYr,OYr,rw,R0e,VYr,XYr,Roe,zYr,QYr,WYr,tw,P0e,HYr,UYr,Poe,JYr,YYr,KYr,aw,qXe,bf,nw,B0e,I$,ZYr,I0e,eKr,jXe,Er,N$,oKr,vf,rKr,Boe,tKr,aKr,Ioe,nKr,sKr,lKr,q$,iKr,N0e,dKr,cKr,fKr,Zt,j$,mKr,q0e,gKr,hKr,Ff,pKr,j0e,_Kr,uKr,Noe,bKr,vKr,FKr,sw,TKr,Yr,D$,MKr,D0e,EKr,CKr,xn,wKr,G0e,AKr,LKr,O0e,yKr,xKr,V0e,$Kr,kKr,SKr,X0e,lw,z0e,RKr,PKr,qoe,BKr,IKr,NKr,iw,DXe,Tf,dw,Q0e,G$,qKr,W0e,jKr,GXe,Cr,O$,DKr,Mf,GKr,joe,OKr,VKr,Doe,XKr,zKr,QKr,V$,WKr,H0e,HKr,UKr,JKr,ea,X$,YKr,U0e,KKr,ZKr,Ef,eZr,J0e,oZr,rZr,Goe,tZr,aZr,nZr,cw,sZr,Kr,z$,lZr,Y0e,iZr,dZr,$n,cZr,K0e,fZr,mZr,Z0e,gZr,hZr,ewe,pZr,_Zr,uZr,Q$,fw,owe,bZr,vZr,Ooe,FZr,TZr,MZr,mw,rwe,EZr,CZr,Voe,wZr,AZr,LZr,gw,OXe,Cf,hw,twe,W$,yZr,awe,xZr,VXe,wr,H$,$Zr,wf,kZr,Xoe,SZr,RZr,zoe,PZr,BZr,IZr,U$,NZr,nwe,qZr,jZr,DZr,oa,J$,GZr,swe,OZr,VZr,Af,XZr,lwe,zZr,QZr,Qoe,WZr,HZr,UZr,pw,JZr,Zr,Y$,YZr,iwe,KZr,ZZr,kn,eet,dwe,oet,ret,cwe,tet,aet,fwe,net,set,iet,mwe,_w,gwe,det,cet,Woe,fet,met,get,uw,XXe;return d=new re({}),xa=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),O6=new re({}),V6=new P({props:{code:"",highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Bf=new het({props:{warning:!0,$$slots:{default:[gVt]},$$scope:{ctx:$}}}),X6=new re({}),z6=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/configuration_auto.py#L604"}}),H6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/configuration_auto.py#L627"}}),zg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[hVt]},$$scope:{ctx:$}}}),U6=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/configuration_auto.py#L750"}}),J6=new re({}),Y6=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/tokenization_auto.py#L402"}}),eL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17787/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/tokenization_auto.py#L416"}}),Lh=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[pVt]},$$scope:{ctx:$}}}),oL=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/tokenization_auto.py#L615"}}),rL=new re({}),tL=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/feature_extraction_auto.py#L193"}}),sL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17787/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/feature_extraction_auto.py#L207"}}),ip=new het({props:{$$slots:{default:[_Vt]},$$scope:{ctx:$}}}),dp=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[uVt]},$$scope:{ctx:$}}}),lL=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/feature_extraction_auto.py#L334"}}),iL=new re({}),dL=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/processing_auto.py#L88"}}),mL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/processing_auto.py#L102"}}),xp=new het({props:{$$slots:{default:[bVt]},$$scope:{ctx:$}}}),$p=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[vVt]},$$scope:{ctx:$}}}),gL=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/processing_auto.py#L255"}}),hL=new re({}),pL=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_auto.py#L778"}}),uL=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/codegen#transformers.CodeGenModel">CodeGenModel</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17787/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mvp#transformers.MvpModel">MvpModel</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/nezha#transformers.NezhaModel">NezhaModel</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),Rp=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[FVt]},$$scope:{ctx:$}}}),bL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),Bu=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[TVt]},$$scope:{ctx:$}}}),vL=new re({}),FL=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_auto.py#L785"}}),ML=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/nezha#transformers.NezhaForPreTraining">NezhaForPreTraining</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),Nu=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[MVt]},$$scope:{ctx:$}}}),EL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),$7=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[EVt]},$$scope:{ctx:$}}}),CL=new re({}),wL=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_auto.py#L800"}}),LL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/codegen#transformers.CodeGenForCausalLM">CodeGenForCausalLM</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mvp#transformers.MvpForCausalLM">MvpForCausalLM</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),S7=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[CVt]},$$scope:{ctx:$}}}),yL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),F1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[wVt]},$$scope:{ctx:$}}}),xL=new re({}),$L=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_auto.py#L807"}}),SL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/nezha#transformers.NezhaForMaskedLM">NezhaForMaskedLM</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),M1=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[AVt]},$$scope:{ctx:$}}}),RL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),i2=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[LVt]},$$scope:{ctx:$}}}),PL=new re({}),BL=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_auto.py#L814"}}),NL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),c2=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[yVt]},$$scope:{ctx:$}}}),qL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),$2=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[xVt]},$$scope:{ctx:$}}}),jL=new re({}),DL=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_auto.py#L823"}}),OL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mvp#transformers.MvpForSequenceClassification">MvpForSequenceClassification</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/nezha#transformers.NezhaForSequenceClassification">NezhaForSequenceClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),S2=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[$Vt]},$$scope:{ctx:$}}}),VL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),$b=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[kVt]},$$scope:{ctx:$}}}),XL=new re({}),zL=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_auto.py#L868"}}),WL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/nezha#transformers.NezhaForMultipleChoice">NezhaForMultipleChoice</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),Sb=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[SVt]},$$scope:{ctx:$}}}),HL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),cv=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[RVt]},$$scope:{ctx:$}}}),UL=new re({}),JL=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_auto.py#L875"}}),KL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction">NezhaForNextSentencePrediction</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),mv=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[PVt]},$$scope:{ctx:$}}}),ZL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),Fv=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[BVt]},$$scope:{ctx:$}}}),ey=new re({}),oy=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_auto.py#L861"}}),ty=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/nezha#transformers.NezhaForTokenClassification">NezhaForTokenClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),Mv=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[IVt]},$$scope:{ctx:$}}}),ay=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),sF=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[NVt]},$$scope:{ctx:$}}}),ny=new re({}),sy=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_auto.py#L832"}}),iy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mvp#transformers.MvpForQuestionAnswering">MvpForQuestionAnswering</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/nezha#transformers.NezhaForQuestionAnswering">NezhaForQuestionAnswering</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),iF=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[qVt]},$$scope:{ctx:$}}}),dy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),KF=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[jVt]},$$scope:{ctx:$}}}),cy=new re({}),fy=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_auto.py#L839"}}),gy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),eT=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[DVt]},$$scope:{ctx:$}}}),hy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),tT=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[GVt]},$$scope:{ctx:$}}}),py=new re({}),_y=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_auto.py#L884"}}),by=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17787/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/pr_17787/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17787/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17787/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),nT=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[OVt]},$$scope:{ctx:$}}}),vy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),vT=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[VVt]},$$scope:{ctx:$}}}),Fy=new re({}),Ty=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_auto.py#L923"}}),Ey=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),TT=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[XVt]},$$scope:{ctx:$}}}),Cy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),CT=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[zVt]},$$scope:{ctx:$}}}),wy=new re({}),Ay=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_auto.py#L850"}}),yy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),AT=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[QVt]},$$scope:{ctx:$}}}),xy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),xT=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[WVt]},$$scope:{ctx:$}}}),$y=new re({}),ky=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_auto.py#L930"}}),Ry=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),kT=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[HVt]},$$scope:{ctx:$}}}),Py=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),OT=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[UVt]},$$scope:{ctx:$}}}),By=new re({}),Iy=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_auto.py#L953"}}),qy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),XT=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[JVt]},$$scope:{ctx:$}}}),jy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),YT=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[YVt]},$$scope:{ctx:$}}}),Dy=new re({}),Gy=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_auto.py#L937"}}),Vy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),ZT=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[KVt]},$$scope:{ctx:$}}}),Xy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),f8=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[ZVt]},$$scope:{ctx:$}}}),zy=new re({}),Qy=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_auto.py#L944"}}),Hy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),g8=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[eXt]},$$scope:{ctx:$}}}),Uy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),u8=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[oXt]},$$scope:{ctx:$}}}),Yy=new re({}),Ky=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_auto.py#L962"}}),e9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),v8=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[rXt]},$$scope:{ctx:$}}}),o9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),A8=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[tXt]},$$scope:{ctx:$}}}),r9=new re({}),t9=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_auto.py#L969"}}),n9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),y8=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[aXt]},$$scope:{ctx:$}}}),s9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),R8=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[nXt]},$$scope:{ctx:$}}}),l9=new re({}),i9=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_auto.py#L916"}}),c9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),B8=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[sXt]},$$scope:{ctx:$}}}),f9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),j8=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[lXt]},$$scope:{ctx:$}}}),g9=new re({}),h9=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_auto.py#L891"}}),_9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),G8=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[iXt]},$$scope:{ctx:$}}}),u9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),X8=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[dXt]},$$scope:{ctx:$}}}),b9=new re({}),v9=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_auto.py#L898"}}),T9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),Q8=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[cXt]},$$scope:{ctx:$}}}),M9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),K8=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[fXt]},$$scope:{ctx:$}}}),E9=new re({}),C9=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_auto.py#L907"}}),A9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),eM=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[mXt]},$$scope:{ctx:$}}}),L9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),tM=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[gXt]},$$scope:{ctx:$}}}),y9=new re({}),x9=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_tf_auto.py#L406"}}),k9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17787/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),nM=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[hXt]},$$scope:{ctx:$}}}),S9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),KM=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[pXt]},$$scope:{ctx:$}}}),R9=new re({}),P9=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_tf_auto.py#L413"}}),I9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),e4=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[_Xt]},$$scope:{ctx:$}}}),N9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),C4=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[uXt]},$$scope:{ctx:$}}}),q9=new re({}),j9=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_tf_auto.py#L428"}}),G9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),A4=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[bXt]},$$scope:{ctx:$}}}),O9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),D4=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[vXt]},$$scope:{ctx:$}}}),V9=new re({}),X9=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_tf_auto.py#L444"}}),Q9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),O4=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[FXt]},$$scope:{ctx:$}}}),W9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),W4=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[TXt]},$$scope:{ctx:$}}}),H9=new re({}),U9=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_tf_auto.py#L469"}}),Y9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),U4=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[MXt]},$$scope:{ctx:$}}}),K9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),_E=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[EXt]},$$scope:{ctx:$}}}),Z9=new re({}),ex=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_tf_auto.py#L476"}}),rx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),bE=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[CXt]},$$scope:{ctx:$}}}),tx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),xE=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[wXt]},$$scope:{ctx:$}}}),ax=new re({}),nx=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_tf_auto.py#L485"}}),lx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),kE=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[AXt]},$$scope:{ctx:$}}}),ix=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),aC=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[LXt]},$$scope:{ctx:$}}}),dx=new re({}),cx=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_tf_auto.py#L521"}}),mx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),sC=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[yXt]},$$scope:{ctx:$}}}),gx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),CC=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[xXt]},$$scope:{ctx:$}}}),hx=new re({}),px=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_tf_auto.py#L528"}}),ux=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),AC=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[$Xt]},$$scope:{ctx:$}}}),bx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),xC=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[kXt]},$$scope:{ctx:$}}}),Fx=new re({}),Tx=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_tf_auto.py#L501"}}),Ex=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),kC=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[SXt]},$$scope:{ctx:$}}}),Cx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),RC=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[RXt]},$$scope:{ctx:$}}}),wx=new re({}),Ax=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_tf_auto.py#L512"}}),yx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),BC=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[PXt]},$$scope:{ctx:$}}}),xx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),r3=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[BXt]},$$scope:{ctx:$}}}),$x=new re({}),kx=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_tf_auto.py#L494"}}),Rx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),a3=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[IXt]},$$scope:{ctx:$}}}),Px=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),w3=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[NXt]},$$scope:{ctx:$}}}),Bx=new re({}),Ix=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_tf_auto.py#L462"}}),qx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),L3=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[qXt]},$$scope:{ctx:$}}}),jx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),x3=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[jXt]},$$scope:{ctx:$}}}),Dx=new re({}),Gx=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_tf_auto.py#L537"}}),Vx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),k3=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[DXt]},$$scope:{ctx:$}}}),Xx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),R3=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[GXt]},$$scope:{ctx:$}}}),zx=new re({}),Qx=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),Hx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),B3=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[OXt]},$$scope:{ctx:$}}}),Ux=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),d5=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[VXt]},$$scope:{ctx:$}}}),Jx=new re({}),Yx=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),Zx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),f5=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[XXt]},$$scope:{ctx:$}}}),e$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),M5=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[zXt]},$$scope:{ctx:$}}}),o$=new re({}),r$=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),a$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),C5=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[QXt]},$$scope:{ctx:$}}}),n$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),q5=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[WXt]},$$scope:{ctx:$}}}),s$=new re({}),l$=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),d$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),D5=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[HXt]},$$scope:{ctx:$}}}),c$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),Y5=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[UXt]},$$scope:{ctx:$}}}),f$=new re({}),m$=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),h$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),Z5=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[JXt]},$$scope:{ctx:$}}}),p$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),c0=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[YXt]},$$scope:{ctx:$}}}),_$=new re({}),u$=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),v$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),m0=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[KXt]},$$scope:{ctx:$}}}),F$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),E0=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[ZXt]},$$scope:{ctx:$}}}),T$=new re({}),M$=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),C$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),w0=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[ezt]},$$scope:{ctx:$}}}),w$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),I0=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[ozt]},$$scope:{ctx:$}}}),A$=new re({}),L$=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),x$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),q0=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[rzt]},$$scope:{ctx:$}}}),$$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),W0=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[tzt]},$$scope:{ctx:$}}}),k$=new re({}),S$=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),P$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),U0=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[azt]},$$scope:{ctx:$}}}),B$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),aw=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[nzt]},$$scope:{ctx:$}}}),I$=new re({}),N$=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),j$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),sw=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[szt]},$$scope:{ctx:$}}}),D$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),iw=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[lzt]},$$scope:{ctx:$}}}),G$=new re({}),O$=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),X$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),cw=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[izt]},$$scope:{ctx:$}}}),z$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),gw=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[dzt]},$$scope:{ctx:$}}}),W$=new re({}),H$=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),J$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),pw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[czt]},$$scope:{ctx:$}}}),Y$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),uw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[fzt]},$$scope:{ctx:$}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Eo=a("span"),Ei=o("Auto Classes"),$f=l(),at=a("p"),Ci=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),wi=a("code"),q6=o("from_pretrained()"),kf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Oe=l(),Qe=a("p"),Ai=o("Instantiating one of "),Rn=a("a"),j6=o("AutoConfig"),Pn=o(", "),Bn=a("a"),D6=o("AutoModel"),Li=o(`, and
`),In=a("a"),G6=o("AutoTokenizer"),yi=o(" will directly create a class of the relevant architecture. For instance"),Sf=l(),F(xa.$$.fragment),We=l(),Ae=a("p"),uS=o("will create a model that is an instance of "),xi=a("a"),bS=o("BertModel"),vS=o("."),Co=l(),$a=a("p"),FS=o("There is one class of "),Rf=a("code"),TS=o("AutoModel"),eWe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),jOe=l(),$i=a("h2"),Pf=a("a"),Ote=a("span"),F(O6.$$.fragment),oWe=l(),Vte=a("span"),rWe=o("Extending the Auto Classes"),DOe=l(),Nn=a("p"),tWe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Xte=a("code"),aWe=o("NewModel"),nWe=o(", make sure you have a "),zte=a("code"),sWe=o("NewModelConfig"),lWe=o(` then you can add those to the auto
classes like this:`),GOe=l(),F(V6.$$.fragment),OOe=l(),MS=a("p"),iWe=o("You will then be able to use the auto classes like you would usually do!"),VOe=l(),F(Bf.$$.fragment),XOe=l(),ki=a("h2"),If=a("a"),Qte=a("span"),F(X6.$$.fragment),dWe=l(),Wte=a("span"),cWe=o("AutoConfig"),zOe=l(),wo=a("div"),F(z6.$$.fragment),fWe=l(),Q6=a("p"),mWe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),ES=a("a"),gWe=o("from_pretrained()"),hWe=o(" class method."),pWe=l(),W6=a("p"),_We=o("This class cannot be instantiated directly using "),Hte=a("code"),uWe=o("__init__()"),bWe=o(" (throws an error)."),vWe=l(),Ar=a("div"),F(H6.$$.fragment),FWe=l(),Ute=a("p"),TWe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),MWe=l(),Si=a("p"),EWe=o("The configuration class to instantiate is selected based on the "),Jte=a("code"),CWe=o("model_type"),wWe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Yte=a("code"),AWe=o("pretrained_model_name_or_path"),LWe=o(":"),yWe=l(),A=a("ul"),Nf=a("li"),Kte=a("strong"),xWe=o("albert"),$We=o(" \u2014 "),CS=a("a"),kWe=o("AlbertConfig"),SWe=o(" (ALBERT model)"),RWe=l(),qf=a("li"),Zte=a("strong"),PWe=o("bart"),BWe=o(" \u2014 "),wS=a("a"),IWe=o("BartConfig"),NWe=o(" (BART model)"),qWe=l(),jf=a("li"),eae=a("strong"),jWe=o("beit"),DWe=o(" \u2014 "),AS=a("a"),GWe=o("BeitConfig"),OWe=o(" (BEiT model)"),VWe=l(),Df=a("li"),oae=a("strong"),XWe=o("bert"),zWe=o(" \u2014 "),LS=a("a"),QWe=o("BertConfig"),WWe=o(" (BERT model)"),HWe=l(),Gf=a("li"),rae=a("strong"),UWe=o("bert-generation"),JWe=o(" \u2014 "),yS=a("a"),YWe=o("BertGenerationConfig"),KWe=o(" (Bert Generation model)"),ZWe=l(),Of=a("li"),tae=a("strong"),eHe=o("big_bird"),oHe=o(" \u2014 "),xS=a("a"),rHe=o("BigBirdConfig"),tHe=o(" (BigBird model)"),aHe=l(),Vf=a("li"),aae=a("strong"),nHe=o("bigbird_pegasus"),sHe=o(" \u2014 "),$S=a("a"),lHe=o("BigBirdPegasusConfig"),iHe=o(" (BigBird-Pegasus model)"),dHe=l(),Xf=a("li"),nae=a("strong"),cHe=o("blenderbot"),fHe=o(" \u2014 "),kS=a("a"),mHe=o("BlenderbotConfig"),gHe=o(" (Blenderbot model)"),hHe=l(),zf=a("li"),sae=a("strong"),pHe=o("blenderbot-small"),_He=o(" \u2014 "),SS=a("a"),uHe=o("BlenderbotSmallConfig"),bHe=o(" (BlenderbotSmall model)"),vHe=l(),Qf=a("li"),lae=a("strong"),FHe=o("bloom"),THe=o(" \u2014 "),RS=a("a"),MHe=o("BloomConfig"),EHe=o(" (BLOOM model)"),CHe=l(),Wf=a("li"),iae=a("strong"),wHe=o("camembert"),AHe=o(" \u2014 "),PS=a("a"),LHe=o("CamembertConfig"),yHe=o(" (CamemBERT model)"),xHe=l(),Hf=a("li"),dae=a("strong"),$He=o("canine"),kHe=o(" \u2014 "),BS=a("a"),SHe=o("CanineConfig"),RHe=o(" (CANINE model)"),PHe=l(),Uf=a("li"),cae=a("strong"),BHe=o("clip"),IHe=o(" \u2014 "),IS=a("a"),NHe=o("CLIPConfig"),qHe=o(" (CLIP model)"),jHe=l(),Jf=a("li"),fae=a("strong"),DHe=o("codegen"),GHe=o(" \u2014 "),NS=a("a"),OHe=o("CodeGenConfig"),VHe=o(" (CodeGen model)"),XHe=l(),Yf=a("li"),mae=a("strong"),zHe=o("convbert"),QHe=o(" \u2014 "),qS=a("a"),WHe=o("ConvBertConfig"),HHe=o(" (ConvBERT model)"),UHe=l(),Kf=a("li"),gae=a("strong"),JHe=o("convnext"),YHe=o(" \u2014 "),jS=a("a"),KHe=o("ConvNextConfig"),ZHe=o(" (ConvNeXT model)"),eUe=l(),Zf=a("li"),hae=a("strong"),oUe=o("ctrl"),rUe=o(" \u2014 "),DS=a("a"),tUe=o("CTRLConfig"),aUe=o(" (CTRL model)"),nUe=l(),em=a("li"),pae=a("strong"),sUe=o("cvt"),lUe=o(" \u2014 "),GS=a("a"),iUe=o("CvtConfig"),dUe=o(" (CvT model)"),cUe=l(),om=a("li"),_ae=a("strong"),fUe=o("data2vec-audio"),mUe=o(" \u2014 "),OS=a("a"),gUe=o("Data2VecAudioConfig"),hUe=o(" (Data2VecAudio model)"),pUe=l(),rm=a("li"),uae=a("strong"),_Ue=o("data2vec-text"),uUe=o(" \u2014 "),VS=a("a"),bUe=o("Data2VecTextConfig"),vUe=o(" (Data2VecText model)"),FUe=l(),tm=a("li"),bae=a("strong"),TUe=o("data2vec-vision"),MUe=o(" \u2014 "),XS=a("a"),EUe=o("Data2VecVisionConfig"),CUe=o(" (Data2VecVision model)"),wUe=l(),am=a("li"),vae=a("strong"),AUe=o("deberta"),LUe=o(" \u2014 "),zS=a("a"),yUe=o("DebertaConfig"),xUe=o(" (DeBERTa model)"),$Ue=l(),nm=a("li"),Fae=a("strong"),kUe=o("deberta-v2"),SUe=o(" \u2014 "),QS=a("a"),RUe=o("DebertaV2Config"),PUe=o(" (DeBERTa-v2 model)"),BUe=l(),sm=a("li"),Tae=a("strong"),IUe=o("decision_transformer"),NUe=o(" \u2014 "),WS=a("a"),qUe=o("DecisionTransformerConfig"),jUe=o(" (Decision Transformer model)"),DUe=l(),lm=a("li"),Mae=a("strong"),GUe=o("deit"),OUe=o(" \u2014 "),HS=a("a"),VUe=o("DeiTConfig"),XUe=o(" (DeiT model)"),zUe=l(),im=a("li"),Eae=a("strong"),QUe=o("detr"),WUe=o(" \u2014 "),US=a("a"),HUe=o("DetrConfig"),UUe=o(" (DETR model)"),JUe=l(),dm=a("li"),Cae=a("strong"),YUe=o("distilbert"),KUe=o(" \u2014 "),JS=a("a"),ZUe=o("DistilBertConfig"),eJe=o(" (DistilBERT model)"),oJe=l(),cm=a("li"),wae=a("strong"),rJe=o("dpr"),tJe=o(" \u2014 "),YS=a("a"),aJe=o("DPRConfig"),nJe=o(" (DPR model)"),sJe=l(),fm=a("li"),Aae=a("strong"),lJe=o("dpt"),iJe=o(" \u2014 "),KS=a("a"),dJe=o("DPTConfig"),cJe=o(" (DPT model)"),fJe=l(),mm=a("li"),Lae=a("strong"),mJe=o("electra"),gJe=o(" \u2014 "),ZS=a("a"),hJe=o("ElectraConfig"),pJe=o(" (ELECTRA model)"),_Je=l(),gm=a("li"),yae=a("strong"),uJe=o("encoder-decoder"),bJe=o(" \u2014 "),eR=a("a"),vJe=o("EncoderDecoderConfig"),FJe=o(" (Encoder decoder model)"),TJe=l(),hm=a("li"),xae=a("strong"),MJe=o("flaubert"),EJe=o(" \u2014 "),oR=a("a"),CJe=o("FlaubertConfig"),wJe=o(" (FlauBERT model)"),AJe=l(),pm=a("li"),$ae=a("strong"),LJe=o("flava"),yJe=o(" \u2014 "),rR=a("a"),xJe=o("FlavaConfig"),$Je=o(" (FLAVA model)"),kJe=l(),_m=a("li"),kae=a("strong"),SJe=o("fnet"),RJe=o(" \u2014 "),tR=a("a"),PJe=o("FNetConfig"),BJe=o(" (FNet model)"),IJe=l(),um=a("li"),Sae=a("strong"),NJe=o("fsmt"),qJe=o(" \u2014 "),aR=a("a"),jJe=o("FSMTConfig"),DJe=o(" (FairSeq Machine-Translation model)"),GJe=l(),bm=a("li"),Rae=a("strong"),OJe=o("funnel"),VJe=o(" \u2014 "),nR=a("a"),XJe=o("FunnelConfig"),zJe=o(" (Funnel Transformer model)"),QJe=l(),vm=a("li"),Pae=a("strong"),WJe=o("glpn"),HJe=o(" \u2014 "),sR=a("a"),UJe=o("GLPNConfig"),JJe=o(" (GLPN model)"),YJe=l(),Fm=a("li"),Bae=a("strong"),KJe=o("gpt2"),ZJe=o(" \u2014 "),lR=a("a"),eYe=o("GPT2Config"),oYe=o(" (OpenAI GPT-2 model)"),rYe=l(),Tm=a("li"),Iae=a("strong"),tYe=o("gpt_neo"),aYe=o(" \u2014 "),iR=a("a"),nYe=o("GPTNeoConfig"),sYe=o(" (GPT Neo model)"),lYe=l(),Mm=a("li"),Nae=a("strong"),iYe=o("gpt_neox"),dYe=o(" \u2014 "),dR=a("a"),cYe=o("GPTNeoXConfig"),fYe=o(" (GPT NeoX model)"),mYe=l(),Em=a("li"),qae=a("strong"),gYe=o("gptj"),hYe=o(" \u2014 "),cR=a("a"),pYe=o("GPTJConfig"),_Ye=o(" (GPT-J model)"),uYe=l(),Cm=a("li"),jae=a("strong"),bYe=o("hubert"),vYe=o(" \u2014 "),fR=a("a"),FYe=o("HubertConfig"),TYe=o(" (Hubert model)"),MYe=l(),wm=a("li"),Dae=a("strong"),EYe=o("ibert"),CYe=o(" \u2014 "),mR=a("a"),wYe=o("IBertConfig"),AYe=o(" (I-BERT model)"),LYe=l(),Am=a("li"),Gae=a("strong"),yYe=o("imagegpt"),xYe=o(" \u2014 "),gR=a("a"),$Ye=o("ImageGPTConfig"),kYe=o(" (ImageGPT model)"),SYe=l(),Lm=a("li"),Oae=a("strong"),RYe=o("layoutlm"),PYe=o(" \u2014 "),hR=a("a"),BYe=o("LayoutLMConfig"),IYe=o(" (LayoutLM model)"),NYe=l(),ym=a("li"),Vae=a("strong"),qYe=o("layoutlmv2"),jYe=o(" \u2014 "),pR=a("a"),DYe=o("LayoutLMv2Config"),GYe=o(" (LayoutLMv2 model)"),OYe=l(),xm=a("li"),Xae=a("strong"),VYe=o("layoutlmv3"),XYe=o(" \u2014 "),_R=a("a"),zYe=o("LayoutLMv3Config"),QYe=o(" (LayoutLMv3 model)"),WYe=l(),$m=a("li"),zae=a("strong"),HYe=o("led"),UYe=o(" \u2014 "),uR=a("a"),JYe=o("LEDConfig"),YYe=o(" (LED model)"),KYe=l(),km=a("li"),Qae=a("strong"),ZYe=o("levit"),eKe=o(" \u2014 "),bR=a("a"),oKe=o("LevitConfig"),rKe=o(" (LeViT model)"),tKe=l(),Sm=a("li"),Wae=a("strong"),aKe=o("longformer"),nKe=o(" \u2014 "),vR=a("a"),sKe=o("LongformerConfig"),lKe=o(" (Longformer model)"),iKe=l(),Rm=a("li"),Hae=a("strong"),dKe=o("longt5"),cKe=o(" \u2014 "),FR=a("a"),fKe=o("LongT5Config"),mKe=o(" (LongT5 model)"),gKe=l(),Pm=a("li"),Uae=a("strong"),hKe=o("luke"),pKe=o(" \u2014 "),TR=a("a"),_Ke=o("LukeConfig"),uKe=o(" (LUKE model)"),bKe=l(),Bm=a("li"),Jae=a("strong"),vKe=o("lxmert"),FKe=o(" \u2014 "),MR=a("a"),TKe=o("LxmertConfig"),MKe=o(" (LXMERT model)"),EKe=l(),Im=a("li"),Yae=a("strong"),CKe=o("m2m_100"),wKe=o(" \u2014 "),ER=a("a"),AKe=o("M2M100Config"),LKe=o(" (M2M100 model)"),yKe=l(),Nm=a("li"),Kae=a("strong"),xKe=o("marian"),$Ke=o(" \u2014 "),CR=a("a"),kKe=o("MarianConfig"),SKe=o(" (Marian model)"),RKe=l(),qm=a("li"),Zae=a("strong"),PKe=o("maskformer"),BKe=o(" \u2014 "),wR=a("a"),IKe=o("MaskFormerConfig"),NKe=o(" (MaskFormer model)"),qKe=l(),jm=a("li"),ene=a("strong"),jKe=o("mbart"),DKe=o(" \u2014 "),AR=a("a"),GKe=o("MBartConfig"),OKe=o(" (mBART model)"),VKe=l(),Dm=a("li"),one=a("strong"),XKe=o("mctct"),zKe=o(" \u2014 "),LR=a("a"),QKe=o("MCTCTConfig"),WKe=o(" (M-CTC-T model)"),HKe=l(),Gm=a("li"),rne=a("strong"),UKe=o("megatron-bert"),JKe=o(" \u2014 "),yR=a("a"),YKe=o("MegatronBertConfig"),KKe=o(" (Megatron-BERT model)"),ZKe=l(),Om=a("li"),tne=a("strong"),eZe=o("mobilebert"),oZe=o(" \u2014 "),xR=a("a"),rZe=o("MobileBertConfig"),tZe=o(" (MobileBERT model)"),aZe=l(),Vm=a("li"),ane=a("strong"),nZe=o("mpnet"),sZe=o(" \u2014 "),$R=a("a"),lZe=o("MPNetConfig"),iZe=o(" (MPNet model)"),dZe=l(),Xm=a("li"),nne=a("strong"),cZe=o("mt5"),fZe=o(" \u2014 "),kR=a("a"),mZe=o("MT5Config"),gZe=o(" (MT5 model)"),hZe=l(),zm=a("li"),sne=a("strong"),pZe=o("mvp"),_Ze=o(" \u2014 "),SR=a("a"),uZe=o("MvpConfig"),bZe=o(" (MVP model)"),vZe=l(),Qm=a("li"),lne=a("strong"),FZe=o("nezha"),TZe=o(" \u2014 "),RR=a("a"),MZe=o("NezhaConfig"),EZe=o(" (Nezha model)"),CZe=l(),Wm=a("li"),ine=a("strong"),wZe=o("nystromformer"),AZe=o(" \u2014 "),PR=a("a"),LZe=o("NystromformerConfig"),yZe=o(" (Nystr\xF6mformer model)"),xZe=l(),Hm=a("li"),dne=a("strong"),$Ze=o("openai-gpt"),kZe=o(" \u2014 "),BR=a("a"),SZe=o("OpenAIGPTConfig"),RZe=o(" (OpenAI GPT model)"),PZe=l(),Um=a("li"),cne=a("strong"),BZe=o("opt"),IZe=o(" \u2014 "),IR=a("a"),NZe=o("OPTConfig"),qZe=o(" (OPT model)"),jZe=l(),Jm=a("li"),fne=a("strong"),DZe=o("pegasus"),GZe=o(" \u2014 "),NR=a("a"),OZe=o("PegasusConfig"),VZe=o(" (Pegasus model)"),XZe=l(),Ym=a("li"),mne=a("strong"),zZe=o("perceiver"),QZe=o(" \u2014 "),qR=a("a"),WZe=o("PerceiverConfig"),HZe=o(" (Perceiver model)"),UZe=l(),Km=a("li"),gne=a("strong"),JZe=o("plbart"),YZe=o(" \u2014 "),jR=a("a"),KZe=o("PLBartConfig"),ZZe=o(" (PLBart model)"),eeo=l(),Zm=a("li"),hne=a("strong"),oeo=o("poolformer"),reo=o(" \u2014 "),DR=a("a"),teo=o("PoolFormerConfig"),aeo=o(" (PoolFormer model)"),neo=l(),eg=a("li"),pne=a("strong"),seo=o("prophetnet"),leo=o(" \u2014 "),GR=a("a"),ieo=o("ProphetNetConfig"),deo=o(" (ProphetNet model)"),ceo=l(),og=a("li"),_ne=a("strong"),feo=o("qdqbert"),meo=o(" \u2014 "),OR=a("a"),geo=o("QDQBertConfig"),heo=o(" (QDQBert model)"),peo=l(),rg=a("li"),une=a("strong"),_eo=o("rag"),ueo=o(" \u2014 "),VR=a("a"),beo=o("RagConfig"),veo=o(" (RAG model)"),Feo=l(),tg=a("li"),bne=a("strong"),Teo=o("realm"),Meo=o(" \u2014 "),XR=a("a"),Eeo=o("RealmConfig"),Ceo=o(" (REALM model)"),weo=l(),ag=a("li"),vne=a("strong"),Aeo=o("reformer"),Leo=o(" \u2014 "),zR=a("a"),yeo=o("ReformerConfig"),xeo=o(" (Reformer model)"),$eo=l(),ng=a("li"),Fne=a("strong"),keo=o("regnet"),Seo=o(" \u2014 "),QR=a("a"),Reo=o("RegNetConfig"),Peo=o(" (RegNet model)"),Beo=l(),sg=a("li"),Tne=a("strong"),Ieo=o("rembert"),Neo=o(" \u2014 "),WR=a("a"),qeo=o("RemBertConfig"),jeo=o(" (RemBERT model)"),Deo=l(),lg=a("li"),Mne=a("strong"),Geo=o("resnet"),Oeo=o(" \u2014 "),HR=a("a"),Veo=o("ResNetConfig"),Xeo=o(" (ResNet model)"),zeo=l(),ig=a("li"),Ene=a("strong"),Qeo=o("retribert"),Weo=o(" \u2014 "),UR=a("a"),Heo=o("RetriBertConfig"),Ueo=o(" (RetriBERT model)"),Jeo=l(),dg=a("li"),Cne=a("strong"),Yeo=o("roberta"),Keo=o(" \u2014 "),JR=a("a"),Zeo=o("RobertaConfig"),eoo=o(" (RoBERTa model)"),ooo=l(),cg=a("li"),wne=a("strong"),roo=o("roformer"),too=o(" \u2014 "),YR=a("a"),aoo=o("RoFormerConfig"),noo=o(" (RoFormer model)"),soo=l(),fg=a("li"),Ane=a("strong"),loo=o("segformer"),ioo=o(" \u2014 "),KR=a("a"),doo=o("SegformerConfig"),coo=o(" (SegFormer model)"),foo=l(),mg=a("li"),Lne=a("strong"),moo=o("sew"),goo=o(" \u2014 "),ZR=a("a"),hoo=o("SEWConfig"),poo=o(" (SEW model)"),_oo=l(),gg=a("li"),yne=a("strong"),uoo=o("sew-d"),boo=o(" \u2014 "),eP=a("a"),voo=o("SEWDConfig"),Foo=o(" (SEW-D model)"),Too=l(),hg=a("li"),xne=a("strong"),Moo=o("speech-encoder-decoder"),Eoo=o(" \u2014 "),oP=a("a"),Coo=o("SpeechEncoderDecoderConfig"),woo=o(" (Speech Encoder decoder model)"),Aoo=l(),pg=a("li"),$ne=a("strong"),Loo=o("speech_to_text"),yoo=o(" \u2014 "),rP=a("a"),xoo=o("Speech2TextConfig"),$oo=o(" (Speech2Text model)"),koo=l(),_g=a("li"),kne=a("strong"),Soo=o("speech_to_text_2"),Roo=o(" \u2014 "),tP=a("a"),Poo=o("Speech2Text2Config"),Boo=o(" (Speech2Text2 model)"),Ioo=l(),ug=a("li"),Sne=a("strong"),Noo=o("splinter"),qoo=o(" \u2014 "),aP=a("a"),joo=o("SplinterConfig"),Doo=o(" (Splinter model)"),Goo=l(),bg=a("li"),Rne=a("strong"),Ooo=o("squeezebert"),Voo=o(" \u2014 "),nP=a("a"),Xoo=o("SqueezeBertConfig"),zoo=o(" (SqueezeBERT model)"),Qoo=l(),vg=a("li"),Pne=a("strong"),Woo=o("swin"),Hoo=o(" \u2014 "),sP=a("a"),Uoo=o("SwinConfig"),Joo=o(" (Swin Transformer model)"),Yoo=l(),Fg=a("li"),Bne=a("strong"),Koo=o("t5"),Zoo=o(" \u2014 "),lP=a("a"),ero=o("T5Config"),oro=o(" (T5 model)"),rro=l(),Tg=a("li"),Ine=a("strong"),tro=o("tapas"),aro=o(" \u2014 "),iP=a("a"),nro=o("TapasConfig"),sro=o(" (TAPAS model)"),lro=l(),Mg=a("li"),Nne=a("strong"),iro=o("trajectory_transformer"),dro=o(" \u2014 "),dP=a("a"),cro=o("TrajectoryTransformerConfig"),fro=o(" (Trajectory Transformer model)"),mro=l(),Eg=a("li"),qne=a("strong"),gro=o("transfo-xl"),hro=o(" \u2014 "),cP=a("a"),pro=o("TransfoXLConfig"),_ro=o(" (Transformer-XL model)"),uro=l(),Cg=a("li"),jne=a("strong"),bro=o("trocr"),vro=o(" \u2014 "),fP=a("a"),Fro=o("TrOCRConfig"),Tro=o(" (TrOCR model)"),Mro=l(),wg=a("li"),Dne=a("strong"),Ero=o("unispeech"),Cro=o(" \u2014 "),mP=a("a"),wro=o("UniSpeechConfig"),Aro=o(" (UniSpeech model)"),Lro=l(),Ag=a("li"),Gne=a("strong"),yro=o("unispeech-sat"),xro=o(" \u2014 "),gP=a("a"),$ro=o("UniSpeechSatConfig"),kro=o(" (UniSpeechSat model)"),Sro=l(),Lg=a("li"),One=a("strong"),Rro=o("van"),Pro=o(" \u2014 "),hP=a("a"),Bro=o("VanConfig"),Iro=o(" (VAN model)"),Nro=l(),yg=a("li"),Vne=a("strong"),qro=o("vilt"),jro=o(" \u2014 "),pP=a("a"),Dro=o("ViltConfig"),Gro=o(" (ViLT model)"),Oro=l(),xg=a("li"),Xne=a("strong"),Vro=o("vision-encoder-decoder"),Xro=o(" \u2014 "),_P=a("a"),zro=o("VisionEncoderDecoderConfig"),Qro=o(" (Vision Encoder decoder model)"),Wro=l(),$g=a("li"),zne=a("strong"),Hro=o("vision-text-dual-encoder"),Uro=o(" \u2014 "),uP=a("a"),Jro=o("VisionTextDualEncoderConfig"),Yro=o(" (VisionTextDualEncoder model)"),Kro=l(),kg=a("li"),Qne=a("strong"),Zro=o("visual_bert"),eto=o(" \u2014 "),bP=a("a"),oto=o("VisualBertConfig"),rto=o(" (VisualBERT model)"),tto=l(),Sg=a("li"),Wne=a("strong"),ato=o("vit"),nto=o(" \u2014 "),vP=a("a"),sto=o("ViTConfig"),lto=o(" (ViT model)"),ito=l(),Rg=a("li"),Hne=a("strong"),dto=o("vit_mae"),cto=o(" \u2014 "),FP=a("a"),fto=o("ViTMAEConfig"),mto=o(" (ViTMAE model)"),gto=l(),Pg=a("li"),Une=a("strong"),hto=o("wav2vec2"),pto=o(" \u2014 "),TP=a("a"),_to=o("Wav2Vec2Config"),uto=o(" (Wav2Vec2 model)"),bto=l(),Bg=a("li"),Jne=a("strong"),vto=o("wav2vec2-conformer"),Fto=o(" \u2014 "),MP=a("a"),Tto=o("Wav2Vec2ConformerConfig"),Mto=o(" (Wav2Vec2-Conformer model)"),Eto=l(),Ig=a("li"),Yne=a("strong"),Cto=o("wavlm"),wto=o(" \u2014 "),EP=a("a"),Ato=o("WavLMConfig"),Lto=o(" (WavLM model)"),yto=l(),Ng=a("li"),Kne=a("strong"),xto=o("xglm"),$to=o(" \u2014 "),CP=a("a"),kto=o("XGLMConfig"),Sto=o(" (XGLM model)"),Rto=l(),qg=a("li"),Zne=a("strong"),Pto=o("xlm"),Bto=o(" \u2014 "),wP=a("a"),Ito=o("XLMConfig"),Nto=o(" (XLM model)"),qto=l(),jg=a("li"),ese=a("strong"),jto=o("xlm-prophetnet"),Dto=o(" \u2014 "),AP=a("a"),Gto=o("XLMProphetNetConfig"),Oto=o(" (XLM-ProphetNet model)"),Vto=l(),Dg=a("li"),ose=a("strong"),Xto=o("xlm-roberta"),zto=o(" \u2014 "),LP=a("a"),Qto=o("XLMRobertaConfig"),Wto=o(" (XLM-RoBERTa model)"),Hto=l(),Gg=a("li"),rse=a("strong"),Uto=o("xlm-roberta-xl"),Jto=o(" \u2014 "),yP=a("a"),Yto=o("XLMRobertaXLConfig"),Kto=o(" (XLM-RoBERTa-XL model)"),Zto=l(),Og=a("li"),tse=a("strong"),eao=o("xlnet"),oao=o(" \u2014 "),xP=a("a"),rao=o("XLNetConfig"),tao=o(" (XLNet model)"),aao=l(),Vg=a("li"),ase=a("strong"),nao=o("yolos"),sao=o(" \u2014 "),$P=a("a"),lao=o("YolosConfig"),iao=o(" (YOLOS model)"),dao=l(),Xg=a("li"),nse=a("strong"),cao=o("yoso"),fao=o(" \u2014 "),kP=a("a"),mao=o("YosoConfig"),gao=o(" (YOSO model)"),hao=l(),F(zg.$$.fragment),pao=l(),Qg=a("div"),F(U6.$$.fragment),_ao=l(),sse=a("p"),uao=o("Register a new configuration for this class."),QOe=l(),Ri=a("h2"),Wg=a("a"),lse=a("span"),F(J6.$$.fragment),bao=l(),ise=a("span"),vao=o("AutoTokenizer"),WOe=l(),Ao=a("div"),F(Y6.$$.fragment),Fao=l(),K6=a("p"),Tao=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),SP=a("a"),Mao=o("AutoTokenizer.from_pretrained()"),Eao=o(" class method."),Cao=l(),Z6=a("p"),wao=o("This class cannot be instantiated directly using "),dse=a("code"),Aao=o("__init__()"),Lao=o(" (throws an error)."),yao=l(),Lr=a("div"),F(eL.$$.fragment),xao=l(),cse=a("p"),$ao=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),kao=l(),ka=a("p"),Sao=o("The tokenizer class to instantiate is selected based on the "),fse=a("code"),Rao=o("model_type"),Pao=o(` property of the config object (either
passed as an argument or loaded from `),mse=a("code"),Bao=o("pretrained_model_name_or_path"),Iao=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gse=a("code"),Nao=o("pretrained_model_name_or_path"),qao=o(":"),jao=l(),k=a("ul"),qn=a("li"),hse=a("strong"),Dao=o("albert"),Gao=o(" \u2014 "),RP=a("a"),Oao=o("AlbertTokenizer"),Vao=o(" or "),PP=a("a"),Xao=o("AlbertTokenizerFast"),zao=o(" (ALBERT model)"),Qao=l(),jn=a("li"),pse=a("strong"),Wao=o("bart"),Hao=o(" \u2014 "),BP=a("a"),Uao=o("BartTokenizer"),Jao=o(" or "),IP=a("a"),Yao=o("BartTokenizerFast"),Kao=o(" (BART model)"),Zao=l(),Dn=a("li"),_se=a("strong"),eno=o("barthez"),ono=o(" \u2014 "),NP=a("a"),rno=o("BarthezTokenizer"),tno=o(" or "),qP=a("a"),ano=o("BarthezTokenizerFast"),nno=o(" (BARThez model)"),sno=l(),Hg=a("li"),use=a("strong"),lno=o("bartpho"),ino=o(" \u2014 "),jP=a("a"),dno=o("BartphoTokenizer"),cno=o(" (BARTpho model)"),fno=l(),Gn=a("li"),bse=a("strong"),mno=o("bert"),gno=o(" \u2014 "),DP=a("a"),hno=o("BertTokenizer"),pno=o(" or "),GP=a("a"),_no=o("BertTokenizerFast"),uno=o(" (BERT model)"),bno=l(),Ug=a("li"),vse=a("strong"),vno=o("bert-generation"),Fno=o(" \u2014 "),OP=a("a"),Tno=o("BertGenerationTokenizer"),Mno=o(" (Bert Generation model)"),Eno=l(),Jg=a("li"),Fse=a("strong"),Cno=o("bert-japanese"),wno=o(" \u2014 "),VP=a("a"),Ano=o("BertJapaneseTokenizer"),Lno=o(" (BertJapanese model)"),yno=l(),Yg=a("li"),Tse=a("strong"),xno=o("bertweet"),$no=o(" \u2014 "),XP=a("a"),kno=o("BertweetTokenizer"),Sno=o(" (BERTweet model)"),Rno=l(),On=a("li"),Mse=a("strong"),Pno=o("big_bird"),Bno=o(" \u2014 "),zP=a("a"),Ino=o("BigBirdTokenizer"),Nno=o(" or "),QP=a("a"),qno=o("BigBirdTokenizerFast"),jno=o(" (BigBird model)"),Dno=l(),Vn=a("li"),Ese=a("strong"),Gno=o("bigbird_pegasus"),Ono=o(" \u2014 "),WP=a("a"),Vno=o("PegasusTokenizer"),Xno=o(" or "),HP=a("a"),zno=o("PegasusTokenizerFast"),Qno=o(" (BigBird-Pegasus model)"),Wno=l(),Xn=a("li"),Cse=a("strong"),Hno=o("blenderbot"),Uno=o(" \u2014 "),UP=a("a"),Jno=o("BlenderbotTokenizer"),Yno=o(" or "),JP=a("a"),Kno=o("BlenderbotTokenizerFast"),Zno=o(" (Blenderbot model)"),eso=l(),Kg=a("li"),wse=a("strong"),oso=o("blenderbot-small"),rso=o(" \u2014 "),YP=a("a"),tso=o("BlenderbotSmallTokenizer"),aso=o(" (BlenderbotSmall model)"),nso=l(),Zg=a("li"),Ase=a("strong"),sso=o("bloom"),lso=o(" \u2014 "),KP=a("a"),iso=o("BloomTokenizerFast"),dso=o(" (BLOOM model)"),cso=l(),eh=a("li"),Lse=a("strong"),fso=o("byt5"),mso=o(" \u2014 "),ZP=a("a"),gso=o("ByT5Tokenizer"),hso=o(" (ByT5 model)"),pso=l(),zn=a("li"),yse=a("strong"),_so=o("camembert"),uso=o(" \u2014 "),eB=a("a"),bso=o("CamembertTokenizer"),vso=o(" or "),oB=a("a"),Fso=o("CamembertTokenizerFast"),Tso=o(" (CamemBERT model)"),Mso=l(),oh=a("li"),xse=a("strong"),Eso=o("canine"),Cso=o(" \u2014 "),rB=a("a"),wso=o("CanineTokenizer"),Aso=o(" (CANINE model)"),Lso=l(),Qn=a("li"),$se=a("strong"),yso=o("clip"),xso=o(" \u2014 "),tB=a("a"),$so=o("CLIPTokenizer"),kso=o(" or "),aB=a("a"),Sso=o("CLIPTokenizerFast"),Rso=o(" (CLIP model)"),Pso=l(),Wn=a("li"),kse=a("strong"),Bso=o("codegen"),Iso=o(" \u2014 "),nB=a("a"),Nso=o("CodeGenTokenizer"),qso=o(" or "),sB=a("a"),jso=o("CodeGenTokenizerFast"),Dso=o(" (CodeGen model)"),Gso=l(),Hn=a("li"),Sse=a("strong"),Oso=o("convbert"),Vso=o(" \u2014 "),lB=a("a"),Xso=o("ConvBertTokenizer"),zso=o(" or "),iB=a("a"),Qso=o("ConvBertTokenizerFast"),Wso=o(" (ConvBERT model)"),Hso=l(),Un=a("li"),Rse=a("strong"),Uso=o("cpm"),Jso=o(" \u2014 "),dB=a("a"),Yso=o("CpmTokenizer"),Kso=o(" or "),cB=a("a"),Zso=o("CpmTokenizerFast"),elo=o(" (CPM model)"),olo=l(),rh=a("li"),Pse=a("strong"),rlo=o("ctrl"),tlo=o(" \u2014 "),fB=a("a"),alo=o("CTRLTokenizer"),nlo=o(" (CTRL model)"),slo=l(),Jn=a("li"),Bse=a("strong"),llo=o("data2vec-text"),ilo=o(" \u2014 "),mB=a("a"),dlo=o("RobertaTokenizer"),clo=o(" or "),gB=a("a"),flo=o("RobertaTokenizerFast"),mlo=o(" (Data2VecText model)"),glo=l(),Yn=a("li"),Ise=a("strong"),hlo=o("deberta"),plo=o(" \u2014 "),hB=a("a"),_lo=o("DebertaTokenizer"),ulo=o(" or "),pB=a("a"),blo=o("DebertaTokenizerFast"),vlo=o(" (DeBERTa model)"),Flo=l(),Kn=a("li"),Nse=a("strong"),Tlo=o("deberta-v2"),Mlo=o(" \u2014 "),_B=a("a"),Elo=o("DebertaV2Tokenizer"),Clo=o(" or "),uB=a("a"),wlo=o("DebertaV2TokenizerFast"),Alo=o(" (DeBERTa-v2 model)"),Llo=l(),Zn=a("li"),qse=a("strong"),ylo=o("distilbert"),xlo=o(" \u2014 "),bB=a("a"),$lo=o("DistilBertTokenizer"),klo=o(" or "),vB=a("a"),Slo=o("DistilBertTokenizerFast"),Rlo=o(" (DistilBERT model)"),Plo=l(),es=a("li"),jse=a("strong"),Blo=o("dpr"),Ilo=o(" \u2014 "),FB=a("a"),Nlo=o("DPRQuestionEncoderTokenizer"),qlo=o(" or "),TB=a("a"),jlo=o("DPRQuestionEncoderTokenizerFast"),Dlo=o(" (DPR model)"),Glo=l(),os=a("li"),Dse=a("strong"),Olo=o("electra"),Vlo=o(" \u2014 "),MB=a("a"),Xlo=o("ElectraTokenizer"),zlo=o(" or "),EB=a("a"),Qlo=o("ElectraTokenizerFast"),Wlo=o(" (ELECTRA model)"),Hlo=l(),th=a("li"),Gse=a("strong"),Ulo=o("flaubert"),Jlo=o(" \u2014 "),CB=a("a"),Ylo=o("FlaubertTokenizer"),Klo=o(" (FlauBERT model)"),Zlo=l(),rs=a("li"),Ose=a("strong"),eio=o("fnet"),oio=o(" \u2014 "),wB=a("a"),rio=o("FNetTokenizer"),tio=o(" or "),AB=a("a"),aio=o("FNetTokenizerFast"),nio=o(" (FNet model)"),sio=l(),ah=a("li"),Vse=a("strong"),lio=o("fsmt"),iio=o(" \u2014 "),LB=a("a"),dio=o("FSMTTokenizer"),cio=o(" (FairSeq Machine-Translation model)"),fio=l(),ts=a("li"),Xse=a("strong"),mio=o("funnel"),gio=o(" \u2014 "),yB=a("a"),hio=o("FunnelTokenizer"),pio=o(" or "),xB=a("a"),_io=o("FunnelTokenizerFast"),uio=o(" (Funnel Transformer model)"),bio=l(),as=a("li"),zse=a("strong"),vio=o("gpt2"),Fio=o(" \u2014 "),$B=a("a"),Tio=o("GPT2Tokenizer"),Mio=o(" or "),kB=a("a"),Eio=o("GPT2TokenizerFast"),Cio=o(" (OpenAI GPT-2 model)"),wio=l(),ns=a("li"),Qse=a("strong"),Aio=o("gpt_neo"),Lio=o(" \u2014 "),SB=a("a"),yio=o("GPT2Tokenizer"),xio=o(" or "),RB=a("a"),$io=o("GPT2TokenizerFast"),kio=o(" (GPT Neo model)"),Sio=l(),nh=a("li"),Wse=a("strong"),Rio=o("gpt_neox"),Pio=o(" \u2014 "),PB=a("a"),Bio=o("GPTNeoXTokenizerFast"),Iio=o(" (GPT NeoX model)"),Nio=l(),ss=a("li"),Hse=a("strong"),qio=o("gptj"),jio=o(" \u2014 "),BB=a("a"),Dio=o("GPT2Tokenizer"),Gio=o(" or "),IB=a("a"),Oio=o("GPT2TokenizerFast"),Vio=o(" (GPT-J model)"),Xio=l(),ls=a("li"),Use=a("strong"),zio=o("herbert"),Qio=o(" \u2014 "),NB=a("a"),Wio=o("HerbertTokenizer"),Hio=o(" or "),qB=a("a"),Uio=o("HerbertTokenizerFast"),Jio=o(" (HerBERT model)"),Yio=l(),sh=a("li"),Jse=a("strong"),Kio=o("hubert"),Zio=o(" \u2014 "),jB=a("a"),edo=o("Wav2Vec2CTCTokenizer"),odo=o(" (Hubert model)"),rdo=l(),is=a("li"),Yse=a("strong"),tdo=o("ibert"),ado=o(" \u2014 "),DB=a("a"),ndo=o("RobertaTokenizer"),sdo=o(" or "),GB=a("a"),ldo=o("RobertaTokenizerFast"),ido=o(" (I-BERT model)"),ddo=l(),ds=a("li"),Kse=a("strong"),cdo=o("layoutlm"),fdo=o(" \u2014 "),OB=a("a"),mdo=o("LayoutLMTokenizer"),gdo=o(" or "),VB=a("a"),hdo=o("LayoutLMTokenizerFast"),pdo=o(" (LayoutLM model)"),_do=l(),cs=a("li"),Zse=a("strong"),udo=o("layoutlmv2"),bdo=o(" \u2014 "),XB=a("a"),vdo=o("LayoutLMv2Tokenizer"),Fdo=o(" or "),zB=a("a"),Tdo=o("LayoutLMv2TokenizerFast"),Mdo=o(" (LayoutLMv2 model)"),Edo=l(),fs=a("li"),ele=a("strong"),Cdo=o("layoutlmv3"),wdo=o(" \u2014 "),QB=a("a"),Ado=o("LayoutLMv3Tokenizer"),Ldo=o(" or "),WB=a("a"),ydo=o("LayoutLMv3TokenizerFast"),xdo=o(" (LayoutLMv3 model)"),$do=l(),ms=a("li"),ole=a("strong"),kdo=o("layoutxlm"),Sdo=o(" \u2014 "),HB=a("a"),Rdo=o("LayoutXLMTokenizer"),Pdo=o(" or "),UB=a("a"),Bdo=o("LayoutXLMTokenizerFast"),Ido=o(" (LayoutXLM model)"),Ndo=l(),gs=a("li"),rle=a("strong"),qdo=o("led"),jdo=o(" \u2014 "),JB=a("a"),Ddo=o("LEDTokenizer"),Gdo=o(" or "),YB=a("a"),Odo=o("LEDTokenizerFast"),Vdo=o(" (LED model)"),Xdo=l(),hs=a("li"),tle=a("strong"),zdo=o("longformer"),Qdo=o(" \u2014 "),KB=a("a"),Wdo=o("LongformerTokenizer"),Hdo=o(" or "),ZB=a("a"),Udo=o("LongformerTokenizerFast"),Jdo=o(" (Longformer model)"),Ydo=l(),ps=a("li"),ale=a("strong"),Kdo=o("longt5"),Zdo=o(" \u2014 "),eI=a("a"),eco=o("T5Tokenizer"),oco=o(" or "),oI=a("a"),rco=o("T5TokenizerFast"),tco=o(" (LongT5 model)"),aco=l(),lh=a("li"),nle=a("strong"),nco=o("luke"),sco=o(" \u2014 "),rI=a("a"),lco=o("LukeTokenizer"),ico=o(" (LUKE model)"),dco=l(),_s=a("li"),sle=a("strong"),cco=o("lxmert"),fco=o(" \u2014 "),tI=a("a"),mco=o("LxmertTokenizer"),gco=o(" or "),aI=a("a"),hco=o("LxmertTokenizerFast"),pco=o(" (LXMERT model)"),_co=l(),ih=a("li"),lle=a("strong"),uco=o("m2m_100"),bco=o(" \u2014 "),nI=a("a"),vco=o("M2M100Tokenizer"),Fco=o(" (M2M100 model)"),Tco=l(),dh=a("li"),ile=a("strong"),Mco=o("marian"),Eco=o(" \u2014 "),sI=a("a"),Cco=o("MarianTokenizer"),wco=o(" (Marian model)"),Aco=l(),us=a("li"),dle=a("strong"),Lco=o("mbart"),yco=o(" \u2014 "),lI=a("a"),xco=o("MBartTokenizer"),$co=o(" or "),iI=a("a"),kco=o("MBartTokenizerFast"),Sco=o(" (mBART model)"),Rco=l(),bs=a("li"),cle=a("strong"),Pco=o("mbart50"),Bco=o(" \u2014 "),dI=a("a"),Ico=o("MBart50Tokenizer"),Nco=o(" or "),cI=a("a"),qco=o("MBart50TokenizerFast"),jco=o(" (mBART-50 model)"),Dco=l(),vs=a("li"),fle=a("strong"),Gco=o("megatron-bert"),Oco=o(" \u2014 "),fI=a("a"),Vco=o("BertTokenizer"),Xco=o(" or "),mI=a("a"),zco=o("BertTokenizerFast"),Qco=o(" (Megatron-BERT model)"),Wco=l(),ch=a("li"),mle=a("strong"),Hco=o("mluke"),Uco=o(" \u2014 "),gI=a("a"),Jco=o("MLukeTokenizer"),Yco=o(" (mLUKE model)"),Kco=l(),Fs=a("li"),gle=a("strong"),Zco=o("mobilebert"),efo=o(" \u2014 "),hI=a("a"),ofo=o("MobileBertTokenizer"),rfo=o(" or "),pI=a("a"),tfo=o("MobileBertTokenizerFast"),afo=o(" (MobileBERT model)"),nfo=l(),Ts=a("li"),hle=a("strong"),sfo=o("mpnet"),lfo=o(" \u2014 "),_I=a("a"),ifo=o("MPNetTokenizer"),dfo=o(" or "),uI=a("a"),cfo=o("MPNetTokenizerFast"),ffo=o(" (MPNet model)"),mfo=l(),Ms=a("li"),ple=a("strong"),gfo=o("mt5"),hfo=o(" \u2014 "),bI=a("a"),pfo=o("MT5Tokenizer"),_fo=o(" or "),vI=a("a"),ufo=o("MT5TokenizerFast"),bfo=o(" (MT5 model)"),vfo=l(),Es=a("li"),_le=a("strong"),Ffo=o("mvp"),Tfo=o(" \u2014 "),FI=a("a"),Mfo=o("MvpTokenizer"),Efo=o(" or "),TI=a("a"),Cfo=o("MvpTokenizerFast"),wfo=o(" (MVP model)"),Afo=l(),Cs=a("li"),ule=a("strong"),Lfo=o("nezha"),yfo=o(" \u2014 "),MI=a("a"),xfo=o("BertTokenizer"),$fo=o(" or "),EI=a("a"),kfo=o("BertTokenizerFast"),Sfo=o(" (Nezha model)"),Rfo=l(),ws=a("li"),ble=a("strong"),Pfo=o("nystromformer"),Bfo=o(" \u2014 "),CI=a("a"),Ifo=o("AlbertTokenizer"),Nfo=o(" or "),wI=a("a"),qfo=o("AlbertTokenizerFast"),jfo=o(" (Nystr\xF6mformer model)"),Dfo=l(),As=a("li"),vle=a("strong"),Gfo=o("openai-gpt"),Ofo=o(" \u2014 "),AI=a("a"),Vfo=o("OpenAIGPTTokenizer"),Xfo=o(" or "),LI=a("a"),zfo=o("OpenAIGPTTokenizerFast"),Qfo=o(" (OpenAI GPT model)"),Wfo=l(),fh=a("li"),Fle=a("strong"),Hfo=o("opt"),Ufo=o(" \u2014 "),yI=a("a"),Jfo=o("GPT2Tokenizer"),Yfo=o(" (OPT model)"),Kfo=l(),Ls=a("li"),Tle=a("strong"),Zfo=o("pegasus"),emo=o(" \u2014 "),xI=a("a"),omo=o("PegasusTokenizer"),rmo=o(" or "),$I=a("a"),tmo=o("PegasusTokenizerFast"),amo=o(" (Pegasus model)"),nmo=l(),mh=a("li"),Mle=a("strong"),smo=o("perceiver"),lmo=o(" \u2014 "),kI=a("a"),imo=o("PerceiverTokenizer"),dmo=o(" (Perceiver model)"),cmo=l(),gh=a("li"),Ele=a("strong"),fmo=o("phobert"),mmo=o(" \u2014 "),SI=a("a"),gmo=o("PhobertTokenizer"),hmo=o(" (PhoBERT model)"),pmo=l(),hh=a("li"),Cle=a("strong"),_mo=o("plbart"),umo=o(" \u2014 "),RI=a("a"),bmo=o("PLBartTokenizer"),vmo=o(" (PLBart model)"),Fmo=l(),ph=a("li"),wle=a("strong"),Tmo=o("prophetnet"),Mmo=o(" \u2014 "),PI=a("a"),Emo=o("ProphetNetTokenizer"),Cmo=o(" (ProphetNet model)"),wmo=l(),ys=a("li"),Ale=a("strong"),Amo=o("qdqbert"),Lmo=o(" \u2014 "),BI=a("a"),ymo=o("BertTokenizer"),xmo=o(" or "),II=a("a"),$mo=o("BertTokenizerFast"),kmo=o(" (QDQBert model)"),Smo=l(),_h=a("li"),Lle=a("strong"),Rmo=o("rag"),Pmo=o(" \u2014 "),NI=a("a"),Bmo=o("RagTokenizer"),Imo=o(" (RAG model)"),Nmo=l(),xs=a("li"),yle=a("strong"),qmo=o("realm"),jmo=o(" \u2014 "),qI=a("a"),Dmo=o("RealmTokenizer"),Gmo=o(" or "),jI=a("a"),Omo=o("RealmTokenizerFast"),Vmo=o(" (REALM model)"),Xmo=l(),$s=a("li"),xle=a("strong"),zmo=o("reformer"),Qmo=o(" \u2014 "),DI=a("a"),Wmo=o("ReformerTokenizer"),Hmo=o(" or "),GI=a("a"),Umo=o("ReformerTokenizerFast"),Jmo=o(" (Reformer model)"),Ymo=l(),ks=a("li"),$le=a("strong"),Kmo=o("rembert"),Zmo=o(" \u2014 "),OI=a("a"),ego=o("RemBertTokenizer"),ogo=o(" or "),VI=a("a"),rgo=o("RemBertTokenizerFast"),tgo=o(" (RemBERT model)"),ago=l(),Ss=a("li"),kle=a("strong"),ngo=o("retribert"),sgo=o(" \u2014 "),XI=a("a"),lgo=o("RetriBertTokenizer"),igo=o(" or "),zI=a("a"),dgo=o("RetriBertTokenizerFast"),cgo=o(" (RetriBERT model)"),fgo=l(),Rs=a("li"),Sle=a("strong"),mgo=o("roberta"),ggo=o(" \u2014 "),QI=a("a"),hgo=o("RobertaTokenizer"),pgo=o(" or "),WI=a("a"),_go=o("RobertaTokenizerFast"),ugo=o(" (RoBERTa model)"),bgo=l(),Ps=a("li"),Rle=a("strong"),vgo=o("roformer"),Fgo=o(" \u2014 "),HI=a("a"),Tgo=o("RoFormerTokenizer"),Mgo=o(" or "),UI=a("a"),Ego=o("RoFormerTokenizerFast"),Cgo=o(" (RoFormer model)"),wgo=l(),uh=a("li"),Ple=a("strong"),Ago=o("speech_to_text"),Lgo=o(" \u2014 "),JI=a("a"),ygo=o("Speech2TextTokenizer"),xgo=o(" (Speech2Text model)"),$go=l(),bh=a("li"),Ble=a("strong"),kgo=o("speech_to_text_2"),Sgo=o(" \u2014 "),YI=a("a"),Rgo=o("Speech2Text2Tokenizer"),Pgo=o(" (Speech2Text2 model)"),Bgo=l(),Bs=a("li"),Ile=a("strong"),Igo=o("splinter"),Ngo=o(" \u2014 "),KI=a("a"),qgo=o("SplinterTokenizer"),jgo=o(" or "),ZI=a("a"),Dgo=o("SplinterTokenizerFast"),Ggo=o(" (Splinter model)"),Ogo=l(),Is=a("li"),Nle=a("strong"),Vgo=o("squeezebert"),Xgo=o(" \u2014 "),eN=a("a"),zgo=o("SqueezeBertTokenizer"),Qgo=o(" or "),oN=a("a"),Wgo=o("SqueezeBertTokenizerFast"),Hgo=o(" (SqueezeBERT model)"),Ugo=l(),Ns=a("li"),qle=a("strong"),Jgo=o("t5"),Ygo=o(" \u2014 "),rN=a("a"),Kgo=o("T5Tokenizer"),Zgo=o(" or "),tN=a("a"),eho=o("T5TokenizerFast"),oho=o(" (T5 model)"),rho=l(),vh=a("li"),jle=a("strong"),tho=o("tapas"),aho=o(" \u2014 "),aN=a("a"),nho=o("TapasTokenizer"),sho=o(" (TAPAS model)"),lho=l(),Fh=a("li"),Dle=a("strong"),iho=o("tapex"),dho=o(" \u2014 "),nN=a("a"),cho=o("TapexTokenizer"),fho=o(" (TAPEX model)"),mho=l(),Th=a("li"),Gle=a("strong"),gho=o("transfo-xl"),hho=o(" \u2014 "),sN=a("a"),pho=o("TransfoXLTokenizer"),_ho=o(" (Transformer-XL model)"),uho=l(),qs=a("li"),Ole=a("strong"),bho=o("vilt"),vho=o(" \u2014 "),lN=a("a"),Fho=o("BertTokenizer"),Tho=o(" or "),iN=a("a"),Mho=o("BertTokenizerFast"),Eho=o(" (ViLT model)"),Cho=l(),js=a("li"),Vle=a("strong"),who=o("visual_bert"),Aho=o(" \u2014 "),dN=a("a"),Lho=o("BertTokenizer"),yho=o(" or "),cN=a("a"),xho=o("BertTokenizerFast"),$ho=o(" (VisualBERT model)"),kho=l(),Mh=a("li"),Xle=a("strong"),Sho=o("wav2vec2"),Rho=o(" \u2014 "),fN=a("a"),Pho=o("Wav2Vec2CTCTokenizer"),Bho=o(" (Wav2Vec2 model)"),Iho=l(),Eh=a("li"),zle=a("strong"),Nho=o("wav2vec2-conformer"),qho=o(" \u2014 "),mN=a("a"),jho=o("Wav2Vec2CTCTokenizer"),Dho=o(" (Wav2Vec2-Conformer model)"),Gho=l(),Ch=a("li"),Qle=a("strong"),Oho=o("wav2vec2_phoneme"),Vho=o(" \u2014 "),gN=a("a"),Xho=o("Wav2Vec2PhonemeCTCTokenizer"),zho=o(" (Wav2Vec2Phoneme model)"),Qho=l(),Ds=a("li"),Wle=a("strong"),Who=o("xglm"),Hho=o(" \u2014 "),hN=a("a"),Uho=o("XGLMTokenizer"),Jho=o(" or "),pN=a("a"),Yho=o("XGLMTokenizerFast"),Kho=o(" (XGLM model)"),Zho=l(),wh=a("li"),Hle=a("strong"),epo=o("xlm"),opo=o(" \u2014 "),_N=a("a"),rpo=o("XLMTokenizer"),tpo=o(" (XLM model)"),apo=l(),Ah=a("li"),Ule=a("strong"),npo=o("xlm-prophetnet"),spo=o(" \u2014 "),uN=a("a"),lpo=o("XLMProphetNetTokenizer"),ipo=o(" (XLM-ProphetNet model)"),dpo=l(),Gs=a("li"),Jle=a("strong"),cpo=o("xlm-roberta"),fpo=o(" \u2014 "),bN=a("a"),mpo=o("XLMRobertaTokenizer"),gpo=o(" or "),vN=a("a"),hpo=o("XLMRobertaTokenizerFast"),ppo=o(" (XLM-RoBERTa model)"),_po=l(),Os=a("li"),Yle=a("strong"),upo=o("xlm-roberta-xl"),bpo=o(" \u2014 "),FN=a("a"),vpo=o("RobertaTokenizer"),Fpo=o(" or "),TN=a("a"),Tpo=o("RobertaTokenizerFast"),Mpo=o(" (XLM-RoBERTa-XL model)"),Epo=l(),Vs=a("li"),Kle=a("strong"),Cpo=o("xlnet"),wpo=o(" \u2014 "),MN=a("a"),Apo=o("XLNetTokenizer"),Lpo=o(" or "),EN=a("a"),ypo=o("XLNetTokenizerFast"),xpo=o(" (XLNet model)"),$po=l(),Xs=a("li"),Zle=a("strong"),kpo=o("yoso"),Spo=o(" \u2014 "),CN=a("a"),Rpo=o("AlbertTokenizer"),Ppo=o(" or "),wN=a("a"),Bpo=o("AlbertTokenizerFast"),Ipo=o(" (YOSO model)"),Npo=l(),F(Lh.$$.fragment),qpo=l(),yh=a("div"),F(oL.$$.fragment),jpo=l(),eie=a("p"),Dpo=o("Register a new tokenizer in this mapping."),HOe=l(),Pi=a("h2"),xh=a("a"),oie=a("span"),F(rL.$$.fragment),Gpo=l(),rie=a("span"),Opo=o("AutoFeatureExtractor"),UOe=l(),Lo=a("div"),F(tL.$$.fragment),Vpo=l(),aL=a("p"),Xpo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),AN=a("a"),zpo=o("AutoFeatureExtractor.from_pretrained()"),Qpo=o(" class method."),Wpo=l(),nL=a("p"),Hpo=o("This class cannot be instantiated directly using "),tie=a("code"),Upo=o("__init__()"),Jpo=o(" (throws an error)."),Ypo=l(),He=a("div"),F(sL.$$.fragment),Kpo=l(),aie=a("p"),Zpo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),e_o=l(),Sa=a("p"),o_o=o("The feature extractor class to instantiate is selected based on the "),nie=a("code"),r_o=o("model_type"),t_o=o(` property of the config object
(either passed as an argument or loaded from `),sie=a("code"),a_o=o("pretrained_model_name_or_path"),n_o=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),lie=a("code"),s_o=o("pretrained_model_name_or_path"),l_o=o(":"),i_o=l(),Y=a("ul"),$h=a("li"),iie=a("strong"),d_o=o("beit"),c_o=o(" \u2014 "),LN=a("a"),f_o=o("BeitFeatureExtractor"),m_o=o(" (BEiT model)"),g_o=l(),kh=a("li"),die=a("strong"),h_o=o("clip"),p_o=o(" \u2014 "),yN=a("a"),__o=o("CLIPFeatureExtractor"),u_o=o(" (CLIP model)"),b_o=l(),Sh=a("li"),cie=a("strong"),v_o=o("convnext"),F_o=o(" \u2014 "),xN=a("a"),T_o=o("ConvNextFeatureExtractor"),M_o=o(" (ConvNeXT model)"),E_o=l(),Rh=a("li"),fie=a("strong"),C_o=o("cvt"),w_o=o(" \u2014 "),$N=a("a"),A_o=o("ConvNextFeatureExtractor"),L_o=o(" (CvT model)"),y_o=l(),Ph=a("li"),mie=a("strong"),x_o=o("data2vec-audio"),$_o=o(" \u2014 "),kN=a("a"),k_o=o("Wav2Vec2FeatureExtractor"),S_o=o(" (Data2VecAudio model)"),R_o=l(),Bh=a("li"),gie=a("strong"),P_o=o("data2vec-vision"),B_o=o(" \u2014 "),SN=a("a"),I_o=o("BeitFeatureExtractor"),N_o=o(" (Data2VecVision model)"),q_o=l(),Ih=a("li"),hie=a("strong"),j_o=o("deit"),D_o=o(" \u2014 "),RN=a("a"),G_o=o("DeiTFeatureExtractor"),O_o=o(" (DeiT model)"),V_o=l(),Nh=a("li"),pie=a("strong"),X_o=o("detr"),z_o=o(" \u2014 "),PN=a("a"),Q_o=o("DetrFeatureExtractor"),W_o=o(" (DETR model)"),H_o=l(),qh=a("li"),_ie=a("strong"),U_o=o("dpt"),J_o=o(" \u2014 "),BN=a("a"),Y_o=o("DPTFeatureExtractor"),K_o=o(" (DPT model)"),Z_o=l(),jh=a("li"),uie=a("strong"),euo=o("flava"),ouo=o(" \u2014 "),IN=a("a"),ruo=o("FlavaFeatureExtractor"),tuo=o(" (FLAVA model)"),auo=l(),Dh=a("li"),bie=a("strong"),nuo=o("glpn"),suo=o(" \u2014 "),NN=a("a"),luo=o("GLPNFeatureExtractor"),iuo=o(" (GLPN model)"),duo=l(),Gh=a("li"),vie=a("strong"),cuo=o("hubert"),fuo=o(" \u2014 "),qN=a("a"),muo=o("Wav2Vec2FeatureExtractor"),guo=o(" (Hubert model)"),huo=l(),Oh=a("li"),Fie=a("strong"),puo=o("imagegpt"),_uo=o(" \u2014 "),jN=a("a"),uuo=o("ImageGPTFeatureExtractor"),buo=o(" (ImageGPT model)"),vuo=l(),Vh=a("li"),Tie=a("strong"),Fuo=o("layoutlmv2"),Tuo=o(" \u2014 "),DN=a("a"),Muo=o("LayoutLMv2FeatureExtractor"),Euo=o(" (LayoutLMv2 model)"),Cuo=l(),Xh=a("li"),Mie=a("strong"),wuo=o("layoutlmv3"),Auo=o(" \u2014 "),GN=a("a"),Luo=o("LayoutLMv3FeatureExtractor"),yuo=o(" (LayoutLMv3 model)"),xuo=l(),zh=a("li"),Eie=a("strong"),$uo=o("levit"),kuo=o(" \u2014 "),ON=a("a"),Suo=o("LevitFeatureExtractor"),Ruo=o(" (LeViT model)"),Puo=l(),Qh=a("li"),Cie=a("strong"),Buo=o("maskformer"),Iuo=o(" \u2014 "),VN=a("a"),Nuo=o("MaskFormerFeatureExtractor"),quo=o(" (MaskFormer model)"),juo=l(),Wh=a("li"),wie=a("strong"),Duo=o("mctct"),Guo=o(" \u2014 "),XN=a("a"),Ouo=o("MCTCTFeatureExtractor"),Vuo=o(" (M-CTC-T model)"),Xuo=l(),Hh=a("li"),Aie=a("strong"),zuo=o("perceiver"),Quo=o(" \u2014 "),zN=a("a"),Wuo=o("PerceiverFeatureExtractor"),Huo=o(" (Perceiver model)"),Uuo=l(),Uh=a("li"),Lie=a("strong"),Juo=o("poolformer"),Yuo=o(" \u2014 "),QN=a("a"),Kuo=o("PoolFormerFeatureExtractor"),Zuo=o(" (PoolFormer model)"),e7o=l(),Jh=a("li"),yie=a("strong"),o7o=o("regnet"),r7o=o(" \u2014 "),WN=a("a"),t7o=o("ConvNextFeatureExtractor"),a7o=o(" (RegNet model)"),n7o=l(),Yh=a("li"),xie=a("strong"),s7o=o("resnet"),l7o=o(" \u2014 "),HN=a("a"),i7o=o("ConvNextFeatureExtractor"),d7o=o(" (ResNet model)"),c7o=l(),Kh=a("li"),$ie=a("strong"),f7o=o("segformer"),m7o=o(" \u2014 "),UN=a("a"),g7o=o("SegformerFeatureExtractor"),h7o=o(" (SegFormer model)"),p7o=l(),Zh=a("li"),kie=a("strong"),_7o=o("speech_to_text"),u7o=o(" \u2014 "),JN=a("a"),b7o=o("Speech2TextFeatureExtractor"),v7o=o(" (Speech2Text model)"),F7o=l(),ep=a("li"),Sie=a("strong"),T7o=o("swin"),M7o=o(" \u2014 "),YN=a("a"),E7o=o("ViTFeatureExtractor"),C7o=o(" (Swin Transformer model)"),w7o=l(),op=a("li"),Rie=a("strong"),A7o=o("van"),L7o=o(" \u2014 "),KN=a("a"),y7o=o("ConvNextFeatureExtractor"),x7o=o(" (VAN model)"),$7o=l(),rp=a("li"),Pie=a("strong"),k7o=o("vilt"),S7o=o(" \u2014 "),ZN=a("a"),R7o=o("ViltFeatureExtractor"),P7o=o(" (ViLT model)"),B7o=l(),tp=a("li"),Bie=a("strong"),I7o=o("vit"),N7o=o(" \u2014 "),eq=a("a"),q7o=o("ViTFeatureExtractor"),j7o=o(" (ViT model)"),D7o=l(),ap=a("li"),Iie=a("strong"),G7o=o("vit_mae"),O7o=o(" \u2014 "),oq=a("a"),V7o=o("ViTFeatureExtractor"),X7o=o(" (ViTMAE model)"),z7o=l(),np=a("li"),Nie=a("strong"),Q7o=o("wav2vec2"),W7o=o(" \u2014 "),rq=a("a"),H7o=o("Wav2Vec2FeatureExtractor"),U7o=o(" (Wav2Vec2 model)"),J7o=l(),sp=a("li"),qie=a("strong"),Y7o=o("wav2vec2-conformer"),K7o=o(" \u2014 "),tq=a("a"),Z7o=o("Wav2Vec2FeatureExtractor"),e1o=o(" (Wav2Vec2-Conformer model)"),o1o=l(),lp=a("li"),jie=a("strong"),r1o=o("yolos"),t1o=o(" \u2014 "),aq=a("a"),a1o=o("YolosFeatureExtractor"),n1o=o(" (YOLOS model)"),s1o=l(),F(ip.$$.fragment),l1o=l(),F(dp.$$.fragment),i1o=l(),cp=a("div"),F(lL.$$.fragment),d1o=l(),Die=a("p"),c1o=o("Register a new feature extractor for this class."),JOe=l(),Bi=a("h2"),fp=a("a"),Gie=a("span"),F(iL.$$.fragment),f1o=l(),Oie=a("span"),m1o=o("AutoProcessor"),YOe=l(),yo=a("div"),F(dL.$$.fragment),g1o=l(),cL=a("p"),h1o=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),nq=a("a"),p1o=o("AutoProcessor.from_pretrained()"),_1o=o(" class method."),u1o=l(),fL=a("p"),b1o=o("This class cannot be instantiated directly using "),Vie=a("code"),v1o=o("__init__()"),F1o=o(" (throws an error)."),T1o=l(),Ue=a("div"),F(mL.$$.fragment),M1o=l(),Xie=a("p"),E1o=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),C1o=l(),Ii=a("p"),w1o=o("The processor class to instantiate is selected based on the "),zie=a("code"),A1o=o("model_type"),L1o=o(` property of the config object (either
passed as an argument or loaded from `),Qie=a("code"),y1o=o("pretrained_model_name_or_path"),x1o=o(" if possible):"),$1o=l(),pe=a("ul"),mp=a("li"),Wie=a("strong"),k1o=o("clip"),S1o=o(" \u2014 "),sq=a("a"),R1o=o("CLIPProcessor"),P1o=o(" (CLIP model)"),B1o=l(),gp=a("li"),Hie=a("strong"),I1o=o("flava"),N1o=o(" \u2014 "),Uie=a("code"),q1o=o("FLAVAProcessor"),j1o=o(" (FLAVA model)"),D1o=l(),hp=a("li"),Jie=a("strong"),G1o=o("layoutlmv2"),O1o=o(" \u2014 "),lq=a("a"),V1o=o("LayoutLMv2Processor"),X1o=o(" (LayoutLMv2 model)"),z1o=l(),pp=a("li"),Yie=a("strong"),Q1o=o("layoutlmv3"),W1o=o(" \u2014 "),iq=a("a"),H1o=o("LayoutLMv3Processor"),U1o=o(" (LayoutLMv3 model)"),J1o=l(),_p=a("li"),Kie=a("strong"),Y1o=o("layoutxlm"),K1o=o(" \u2014 "),dq=a("a"),Z1o=o("LayoutXLMProcessor"),e2o=o(" (LayoutXLM model)"),o2o=l(),up=a("li"),Zie=a("strong"),r2o=o("sew"),t2o=o(" \u2014 "),cq=a("a"),a2o=o("Wav2Vec2Processor"),n2o=o(" (SEW model)"),s2o=l(),bp=a("li"),ede=a("strong"),l2o=o("sew-d"),i2o=o(" \u2014 "),fq=a("a"),d2o=o("Wav2Vec2Processor"),c2o=o(" (SEW-D model)"),f2o=l(),vp=a("li"),ode=a("strong"),m2o=o("speech_to_text"),g2o=o(" \u2014 "),mq=a("a"),h2o=o("Speech2TextProcessor"),p2o=o(" (Speech2Text model)"),_2o=l(),Fp=a("li"),rde=a("strong"),u2o=o("speech_to_text_2"),b2o=o(" \u2014 "),gq=a("a"),v2o=o("Speech2Text2Processor"),F2o=o(" (Speech2Text2 model)"),T2o=l(),Tp=a("li"),tde=a("strong"),M2o=o("trocr"),E2o=o(" \u2014 "),hq=a("a"),C2o=o("TrOCRProcessor"),w2o=o(" (TrOCR model)"),A2o=l(),Mp=a("li"),ade=a("strong"),L2o=o("unispeech"),y2o=o(" \u2014 "),pq=a("a"),x2o=o("Wav2Vec2Processor"),$2o=o(" (UniSpeech model)"),k2o=l(),Ep=a("li"),nde=a("strong"),S2o=o("unispeech-sat"),R2o=o(" \u2014 "),_q=a("a"),P2o=o("Wav2Vec2Processor"),B2o=o(" (UniSpeechSat model)"),I2o=l(),Cp=a("li"),sde=a("strong"),N2o=o("vilt"),q2o=o(" \u2014 "),uq=a("a"),j2o=o("ViltProcessor"),D2o=o(" (ViLT model)"),G2o=l(),wp=a("li"),lde=a("strong"),O2o=o("vision-text-dual-encoder"),V2o=o(" \u2014 "),bq=a("a"),X2o=o("VisionTextDualEncoderProcessor"),z2o=o(" (VisionTextDualEncoder model)"),Q2o=l(),Ap=a("li"),ide=a("strong"),W2o=o("wav2vec2"),H2o=o(" \u2014 "),vq=a("a"),U2o=o("Wav2Vec2Processor"),J2o=o(" (Wav2Vec2 model)"),Y2o=l(),Lp=a("li"),dde=a("strong"),K2o=o("wav2vec2-conformer"),Z2o=o(" \u2014 "),Fq=a("a"),ebo=o("Wav2Vec2Processor"),obo=o(" (Wav2Vec2-Conformer model)"),rbo=l(),yp=a("li"),cde=a("strong"),tbo=o("wavlm"),abo=o(" \u2014 "),Tq=a("a"),nbo=o("Wav2Vec2Processor"),sbo=o(" (WavLM model)"),lbo=l(),F(xp.$$.fragment),ibo=l(),F($p.$$.fragment),dbo=l(),kp=a("div"),F(gL.$$.fragment),cbo=l(),fde=a("p"),fbo=o("Register a new processor for this class."),KOe=l(),Ni=a("h2"),Sp=a("a"),mde=a("span"),F(hL.$$.fragment),mbo=l(),gde=a("span"),gbo=o("AutoModel"),ZOe=l(),xo=a("div"),F(pL.$$.fragment),hbo=l(),qi=a("p"),pbo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Mq=a("a"),_bo=o("from_pretrained()"),ubo=o(" class method or the "),Eq=a("a"),bbo=o("from_config()"),vbo=o(` class
method.`),Fbo=l(),_L=a("p"),Tbo=o("This class cannot be instantiated directly using "),hde=a("code"),Mbo=o("__init__()"),Ebo=o(" (throws an error)."),Cbo=l(),nt=a("div"),F(uL.$$.fragment),wbo=l(),pde=a("p"),Abo=o("Instantiates one of the base model classes of the library from a configuration."),Lbo=l(),ji=a("p"),ybo=o(`Note:
Loading a model from its configuration file does `),_de=a("strong"),xbo=o("not"),$bo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Cq=a("a"),kbo=o("from_pretrained()"),Sbo=o(" to load the model weights."),Rbo=l(),F(Rp.$$.fragment),Pbo=l(),Je=a("div"),F(bL.$$.fragment),Bbo=l(),ude=a("p"),Ibo=o("Instantiate one of the base model classes of the library from a pretrained model."),Nbo=l(),Ra=a("p"),qbo=o("The model class to instantiate is selected based on the "),bde=a("code"),jbo=o("model_type"),Dbo=o(` property of the config object (either
passed as an argument or loaded from `),vde=a("code"),Gbo=o("pretrained_model_name_or_path"),Obo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fde=a("code"),Vbo=o("pretrained_model_name_or_path"),Xbo=o(":"),zbo=l(),y=a("ul"),Pp=a("li"),Tde=a("strong"),Qbo=o("albert"),Wbo=o(" \u2014 "),wq=a("a"),Hbo=o("AlbertModel"),Ubo=o(" (ALBERT model)"),Jbo=l(),Bp=a("li"),Mde=a("strong"),Ybo=o("bart"),Kbo=o(" \u2014 "),Aq=a("a"),Zbo=o("BartModel"),evo=o(" (BART model)"),ovo=l(),Ip=a("li"),Ede=a("strong"),rvo=o("beit"),tvo=o(" \u2014 "),Lq=a("a"),avo=o("BeitModel"),nvo=o(" (BEiT model)"),svo=l(),Np=a("li"),Cde=a("strong"),lvo=o("bert"),ivo=o(" \u2014 "),yq=a("a"),dvo=o("BertModel"),cvo=o(" (BERT model)"),fvo=l(),qp=a("li"),wde=a("strong"),mvo=o("bert-generation"),gvo=o(" \u2014 "),xq=a("a"),hvo=o("BertGenerationEncoder"),pvo=o(" (Bert Generation model)"),_vo=l(),jp=a("li"),Ade=a("strong"),uvo=o("big_bird"),bvo=o(" \u2014 "),$q=a("a"),vvo=o("BigBirdModel"),Fvo=o(" (BigBird model)"),Tvo=l(),Dp=a("li"),Lde=a("strong"),Mvo=o("bigbird_pegasus"),Evo=o(" \u2014 "),kq=a("a"),Cvo=o("BigBirdPegasusModel"),wvo=o(" (BigBird-Pegasus model)"),Avo=l(),Gp=a("li"),yde=a("strong"),Lvo=o("blenderbot"),yvo=o(" \u2014 "),Sq=a("a"),xvo=o("BlenderbotModel"),$vo=o(" (Blenderbot model)"),kvo=l(),Op=a("li"),xde=a("strong"),Svo=o("blenderbot-small"),Rvo=o(" \u2014 "),Rq=a("a"),Pvo=o("BlenderbotSmallModel"),Bvo=o(" (BlenderbotSmall model)"),Ivo=l(),Vp=a("li"),$de=a("strong"),Nvo=o("bloom"),qvo=o(" \u2014 "),Pq=a("a"),jvo=o("BloomModel"),Dvo=o(" (BLOOM model)"),Gvo=l(),Xp=a("li"),kde=a("strong"),Ovo=o("camembert"),Vvo=o(" \u2014 "),Bq=a("a"),Xvo=o("CamembertModel"),zvo=o(" (CamemBERT model)"),Qvo=l(),zp=a("li"),Sde=a("strong"),Wvo=o("canine"),Hvo=o(" \u2014 "),Iq=a("a"),Uvo=o("CanineModel"),Jvo=o(" (CANINE model)"),Yvo=l(),Qp=a("li"),Rde=a("strong"),Kvo=o("clip"),Zvo=o(" \u2014 "),Nq=a("a"),eFo=o("CLIPModel"),oFo=o(" (CLIP model)"),rFo=l(),Wp=a("li"),Pde=a("strong"),tFo=o("codegen"),aFo=o(" \u2014 "),qq=a("a"),nFo=o("CodeGenModel"),sFo=o(" (CodeGen model)"),lFo=l(),Hp=a("li"),Bde=a("strong"),iFo=o("convbert"),dFo=o(" \u2014 "),jq=a("a"),cFo=o("ConvBertModel"),fFo=o(" (ConvBERT model)"),mFo=l(),Up=a("li"),Ide=a("strong"),gFo=o("convnext"),hFo=o(" \u2014 "),Dq=a("a"),pFo=o("ConvNextModel"),_Fo=o(" (ConvNeXT model)"),uFo=l(),Jp=a("li"),Nde=a("strong"),bFo=o("ctrl"),vFo=o(" \u2014 "),Gq=a("a"),FFo=o("CTRLModel"),TFo=o(" (CTRL model)"),MFo=l(),Yp=a("li"),qde=a("strong"),EFo=o("cvt"),CFo=o(" \u2014 "),Oq=a("a"),wFo=o("CvtModel"),AFo=o(" (CvT model)"),LFo=l(),Kp=a("li"),jde=a("strong"),yFo=o("data2vec-audio"),xFo=o(" \u2014 "),Vq=a("a"),$Fo=o("Data2VecAudioModel"),kFo=o(" (Data2VecAudio model)"),SFo=l(),Zp=a("li"),Dde=a("strong"),RFo=o("data2vec-text"),PFo=o(" \u2014 "),Xq=a("a"),BFo=o("Data2VecTextModel"),IFo=o(" (Data2VecText model)"),NFo=l(),e_=a("li"),Gde=a("strong"),qFo=o("data2vec-vision"),jFo=o(" \u2014 "),zq=a("a"),DFo=o("Data2VecVisionModel"),GFo=o(" (Data2VecVision model)"),OFo=l(),o_=a("li"),Ode=a("strong"),VFo=o("deberta"),XFo=o(" \u2014 "),Qq=a("a"),zFo=o("DebertaModel"),QFo=o(" (DeBERTa model)"),WFo=l(),r_=a("li"),Vde=a("strong"),HFo=o("deberta-v2"),UFo=o(" \u2014 "),Wq=a("a"),JFo=o("DebertaV2Model"),YFo=o(" (DeBERTa-v2 model)"),KFo=l(),t_=a("li"),Xde=a("strong"),ZFo=o("decision_transformer"),eTo=o(" \u2014 "),Hq=a("a"),oTo=o("DecisionTransformerModel"),rTo=o(" (Decision Transformer model)"),tTo=l(),a_=a("li"),zde=a("strong"),aTo=o("deit"),nTo=o(" \u2014 "),Uq=a("a"),sTo=o("DeiTModel"),lTo=o(" (DeiT model)"),iTo=l(),n_=a("li"),Qde=a("strong"),dTo=o("detr"),cTo=o(" \u2014 "),Jq=a("a"),fTo=o("DetrModel"),mTo=o(" (DETR model)"),gTo=l(),s_=a("li"),Wde=a("strong"),hTo=o("distilbert"),pTo=o(" \u2014 "),Yq=a("a"),_To=o("DistilBertModel"),uTo=o(" (DistilBERT model)"),bTo=l(),l_=a("li"),Hde=a("strong"),vTo=o("dpr"),FTo=o(" \u2014 "),Kq=a("a"),TTo=o("DPRQuestionEncoder"),MTo=o(" (DPR model)"),ETo=l(),i_=a("li"),Ude=a("strong"),CTo=o("dpt"),wTo=o(" \u2014 "),Zq=a("a"),ATo=o("DPTModel"),LTo=o(" (DPT model)"),yTo=l(),d_=a("li"),Jde=a("strong"),xTo=o("electra"),$To=o(" \u2014 "),ej=a("a"),kTo=o("ElectraModel"),STo=o(" (ELECTRA model)"),RTo=l(),c_=a("li"),Yde=a("strong"),PTo=o("flaubert"),BTo=o(" \u2014 "),oj=a("a"),ITo=o("FlaubertModel"),NTo=o(" (FlauBERT model)"),qTo=l(),f_=a("li"),Kde=a("strong"),jTo=o("flava"),DTo=o(" \u2014 "),rj=a("a"),GTo=o("FlavaModel"),OTo=o(" (FLAVA model)"),VTo=l(),m_=a("li"),Zde=a("strong"),XTo=o("fnet"),zTo=o(" \u2014 "),tj=a("a"),QTo=o("FNetModel"),WTo=o(" (FNet model)"),HTo=l(),g_=a("li"),ece=a("strong"),UTo=o("fsmt"),JTo=o(" \u2014 "),aj=a("a"),YTo=o("FSMTModel"),KTo=o(" (FairSeq Machine-Translation model)"),ZTo=l(),zs=a("li"),oce=a("strong"),e8o=o("funnel"),o8o=o(" \u2014 "),nj=a("a"),r8o=o("FunnelModel"),t8o=o(" or "),sj=a("a"),a8o=o("FunnelBaseModel"),n8o=o(" (Funnel Transformer model)"),s8o=l(),h_=a("li"),rce=a("strong"),l8o=o("glpn"),i8o=o(" \u2014 "),lj=a("a"),d8o=o("GLPNModel"),c8o=o(" (GLPN model)"),f8o=l(),p_=a("li"),tce=a("strong"),m8o=o("gpt2"),g8o=o(" \u2014 "),ij=a("a"),h8o=o("GPT2Model"),p8o=o(" (OpenAI GPT-2 model)"),_8o=l(),__=a("li"),ace=a("strong"),u8o=o("gpt_neo"),b8o=o(" \u2014 "),dj=a("a"),v8o=o("GPTNeoModel"),F8o=o(" (GPT Neo model)"),T8o=l(),u_=a("li"),nce=a("strong"),M8o=o("gpt_neox"),E8o=o(" \u2014 "),cj=a("a"),C8o=o("GPTNeoXModel"),w8o=o(" (GPT NeoX model)"),A8o=l(),b_=a("li"),sce=a("strong"),L8o=o("gptj"),y8o=o(" \u2014 "),fj=a("a"),x8o=o("GPTJModel"),$8o=o(" (GPT-J model)"),k8o=l(),v_=a("li"),lce=a("strong"),S8o=o("hubert"),R8o=o(" \u2014 "),mj=a("a"),P8o=o("HubertModel"),B8o=o(" (Hubert model)"),I8o=l(),F_=a("li"),ice=a("strong"),N8o=o("ibert"),q8o=o(" \u2014 "),gj=a("a"),j8o=o("IBertModel"),D8o=o(" (I-BERT model)"),G8o=l(),T_=a("li"),dce=a("strong"),O8o=o("imagegpt"),V8o=o(" \u2014 "),hj=a("a"),X8o=o("ImageGPTModel"),z8o=o(" (ImageGPT model)"),Q8o=l(),M_=a("li"),cce=a("strong"),W8o=o("layoutlm"),H8o=o(" \u2014 "),pj=a("a"),U8o=o("LayoutLMModel"),J8o=o(" (LayoutLM model)"),Y8o=l(),E_=a("li"),fce=a("strong"),K8o=o("layoutlmv2"),Z8o=o(" \u2014 "),_j=a("a"),eMo=o("LayoutLMv2Model"),oMo=o(" (LayoutLMv2 model)"),rMo=l(),C_=a("li"),mce=a("strong"),tMo=o("layoutlmv3"),aMo=o(" \u2014 "),uj=a("a"),nMo=o("LayoutLMv3Model"),sMo=o(" (LayoutLMv3 model)"),lMo=l(),w_=a("li"),gce=a("strong"),iMo=o("led"),dMo=o(" \u2014 "),bj=a("a"),cMo=o("LEDModel"),fMo=o(" (LED model)"),mMo=l(),A_=a("li"),hce=a("strong"),gMo=o("levit"),hMo=o(" \u2014 "),vj=a("a"),pMo=o("LevitModel"),_Mo=o(" (LeViT model)"),uMo=l(),L_=a("li"),pce=a("strong"),bMo=o("longformer"),vMo=o(" \u2014 "),Fj=a("a"),FMo=o("LongformerModel"),TMo=o(" (Longformer model)"),MMo=l(),y_=a("li"),_ce=a("strong"),EMo=o("longt5"),CMo=o(" \u2014 "),Tj=a("a"),wMo=o("LongT5Model"),AMo=o(" (LongT5 model)"),LMo=l(),x_=a("li"),uce=a("strong"),yMo=o("luke"),xMo=o(" \u2014 "),Mj=a("a"),$Mo=o("LukeModel"),kMo=o(" (LUKE model)"),SMo=l(),$_=a("li"),bce=a("strong"),RMo=o("lxmert"),PMo=o(" \u2014 "),Ej=a("a"),BMo=o("LxmertModel"),IMo=o(" (LXMERT model)"),NMo=l(),k_=a("li"),vce=a("strong"),qMo=o("m2m_100"),jMo=o(" \u2014 "),Cj=a("a"),DMo=o("M2M100Model"),GMo=o(" (M2M100 model)"),OMo=l(),S_=a("li"),Fce=a("strong"),VMo=o("marian"),XMo=o(" \u2014 "),wj=a("a"),zMo=o("MarianModel"),QMo=o(" (Marian model)"),WMo=l(),R_=a("li"),Tce=a("strong"),HMo=o("maskformer"),UMo=o(" \u2014 "),Aj=a("a"),JMo=o("MaskFormerModel"),YMo=o(" (MaskFormer model)"),KMo=l(),P_=a("li"),Mce=a("strong"),ZMo=o("mbart"),e4o=o(" \u2014 "),Lj=a("a"),o4o=o("MBartModel"),r4o=o(" (mBART model)"),t4o=l(),B_=a("li"),Ece=a("strong"),a4o=o("mctct"),n4o=o(" \u2014 "),yj=a("a"),s4o=o("MCTCTModel"),l4o=o(" (M-CTC-T model)"),i4o=l(),I_=a("li"),Cce=a("strong"),d4o=o("megatron-bert"),c4o=o(" \u2014 "),xj=a("a"),f4o=o("MegatronBertModel"),m4o=o(" (Megatron-BERT model)"),g4o=l(),N_=a("li"),wce=a("strong"),h4o=o("mobilebert"),p4o=o(" \u2014 "),$j=a("a"),_4o=o("MobileBertModel"),u4o=o(" (MobileBERT model)"),b4o=l(),q_=a("li"),Ace=a("strong"),v4o=o("mpnet"),F4o=o(" \u2014 "),kj=a("a"),T4o=o("MPNetModel"),M4o=o(" (MPNet model)"),E4o=l(),j_=a("li"),Lce=a("strong"),C4o=o("mt5"),w4o=o(" \u2014 "),Sj=a("a"),A4o=o("MT5Model"),L4o=o(" (MT5 model)"),y4o=l(),D_=a("li"),yce=a("strong"),x4o=o("mvp"),$4o=o(" \u2014 "),Rj=a("a"),k4o=o("MvpModel"),S4o=o(" (MVP model)"),R4o=l(),G_=a("li"),xce=a("strong"),P4o=o("nezha"),B4o=o(" \u2014 "),Pj=a("a"),I4o=o("NezhaModel"),N4o=o(" (Nezha model)"),q4o=l(),O_=a("li"),$ce=a("strong"),j4o=o("nystromformer"),D4o=o(" \u2014 "),Bj=a("a"),G4o=o("NystromformerModel"),O4o=o(" (Nystr\xF6mformer model)"),V4o=l(),V_=a("li"),kce=a("strong"),X4o=o("openai-gpt"),z4o=o(" \u2014 "),Ij=a("a"),Q4o=o("OpenAIGPTModel"),W4o=o(" (OpenAI GPT model)"),H4o=l(),X_=a("li"),Sce=a("strong"),U4o=o("opt"),J4o=o(" \u2014 "),Nj=a("a"),Y4o=o("OPTModel"),K4o=o(" (OPT model)"),Z4o=l(),z_=a("li"),Rce=a("strong"),eEo=o("pegasus"),oEo=o(" \u2014 "),qj=a("a"),rEo=o("PegasusModel"),tEo=o(" (Pegasus model)"),aEo=l(),Q_=a("li"),Pce=a("strong"),nEo=o("perceiver"),sEo=o(" \u2014 "),jj=a("a"),lEo=o("PerceiverModel"),iEo=o(" (Perceiver model)"),dEo=l(),W_=a("li"),Bce=a("strong"),cEo=o("plbart"),fEo=o(" \u2014 "),Dj=a("a"),mEo=o("PLBartModel"),gEo=o(" (PLBart model)"),hEo=l(),H_=a("li"),Ice=a("strong"),pEo=o("poolformer"),_Eo=o(" \u2014 "),Gj=a("a"),uEo=o("PoolFormerModel"),bEo=o(" (PoolFormer model)"),vEo=l(),U_=a("li"),Nce=a("strong"),FEo=o("prophetnet"),TEo=o(" \u2014 "),Oj=a("a"),MEo=o("ProphetNetModel"),EEo=o(" (ProphetNet model)"),CEo=l(),J_=a("li"),qce=a("strong"),wEo=o("qdqbert"),AEo=o(" \u2014 "),Vj=a("a"),LEo=o("QDQBertModel"),yEo=o(" (QDQBert model)"),xEo=l(),Y_=a("li"),jce=a("strong"),$Eo=o("reformer"),kEo=o(" \u2014 "),Xj=a("a"),SEo=o("ReformerModel"),REo=o(" (Reformer model)"),PEo=l(),K_=a("li"),Dce=a("strong"),BEo=o("regnet"),IEo=o(" \u2014 "),zj=a("a"),NEo=o("RegNetModel"),qEo=o(" (RegNet model)"),jEo=l(),Z_=a("li"),Gce=a("strong"),DEo=o("rembert"),GEo=o(" \u2014 "),Qj=a("a"),OEo=o("RemBertModel"),VEo=o(" (RemBERT model)"),XEo=l(),eu=a("li"),Oce=a("strong"),zEo=o("resnet"),QEo=o(" \u2014 "),Wj=a("a"),WEo=o("ResNetModel"),HEo=o(" (ResNet model)"),UEo=l(),ou=a("li"),Vce=a("strong"),JEo=o("retribert"),YEo=o(" \u2014 "),Hj=a("a"),KEo=o("RetriBertModel"),ZEo=o(" (RetriBERT model)"),eCo=l(),ru=a("li"),Xce=a("strong"),oCo=o("roberta"),rCo=o(" \u2014 "),Uj=a("a"),tCo=o("RobertaModel"),aCo=o(" (RoBERTa model)"),nCo=l(),tu=a("li"),zce=a("strong"),sCo=o("roformer"),lCo=o(" \u2014 "),Jj=a("a"),iCo=o("RoFormerModel"),dCo=o(" (RoFormer model)"),cCo=l(),au=a("li"),Qce=a("strong"),fCo=o("segformer"),mCo=o(" \u2014 "),Yj=a("a"),gCo=o("SegformerModel"),hCo=o(" (SegFormer model)"),pCo=l(),nu=a("li"),Wce=a("strong"),_Co=o("sew"),uCo=o(" \u2014 "),Kj=a("a"),bCo=o("SEWModel"),vCo=o(" (SEW model)"),FCo=l(),su=a("li"),Hce=a("strong"),TCo=o("sew-d"),MCo=o(" \u2014 "),Zj=a("a"),ECo=o("SEWDModel"),CCo=o(" (SEW-D model)"),wCo=l(),lu=a("li"),Uce=a("strong"),ACo=o("speech_to_text"),LCo=o(" \u2014 "),eD=a("a"),yCo=o("Speech2TextModel"),xCo=o(" (Speech2Text model)"),$Co=l(),iu=a("li"),Jce=a("strong"),kCo=o("splinter"),SCo=o(" \u2014 "),oD=a("a"),RCo=o("SplinterModel"),PCo=o(" (Splinter model)"),BCo=l(),du=a("li"),Yce=a("strong"),ICo=o("squeezebert"),NCo=o(" \u2014 "),rD=a("a"),qCo=o("SqueezeBertModel"),jCo=o(" (SqueezeBERT model)"),DCo=l(),cu=a("li"),Kce=a("strong"),GCo=o("swin"),OCo=o(" \u2014 "),tD=a("a"),VCo=o("SwinModel"),XCo=o(" (Swin Transformer model)"),zCo=l(),fu=a("li"),Zce=a("strong"),QCo=o("t5"),WCo=o(" \u2014 "),aD=a("a"),HCo=o("T5Model"),UCo=o(" (T5 model)"),JCo=l(),mu=a("li"),efe=a("strong"),YCo=o("tapas"),KCo=o(" \u2014 "),nD=a("a"),ZCo=o("TapasModel"),e3o=o(" (TAPAS model)"),o3o=l(),gu=a("li"),ofe=a("strong"),r3o=o("trajectory_transformer"),t3o=o(" \u2014 "),sD=a("a"),a3o=o("TrajectoryTransformerModel"),n3o=o(" (Trajectory Transformer model)"),s3o=l(),hu=a("li"),rfe=a("strong"),l3o=o("transfo-xl"),i3o=o(" \u2014 "),lD=a("a"),d3o=o("TransfoXLModel"),c3o=o(" (Transformer-XL model)"),f3o=l(),pu=a("li"),tfe=a("strong"),m3o=o("unispeech"),g3o=o(" \u2014 "),iD=a("a"),h3o=o("UniSpeechModel"),p3o=o(" (UniSpeech model)"),_3o=l(),_u=a("li"),afe=a("strong"),u3o=o("unispeech-sat"),b3o=o(" \u2014 "),dD=a("a"),v3o=o("UniSpeechSatModel"),F3o=o(" (UniSpeechSat model)"),T3o=l(),uu=a("li"),nfe=a("strong"),M3o=o("van"),E3o=o(" \u2014 "),cD=a("a"),C3o=o("VanModel"),w3o=o(" (VAN model)"),A3o=l(),bu=a("li"),sfe=a("strong"),L3o=o("vilt"),y3o=o(" \u2014 "),fD=a("a"),x3o=o("ViltModel"),$3o=o(" (ViLT model)"),k3o=l(),vu=a("li"),lfe=a("strong"),S3o=o("vision-text-dual-encoder"),R3o=o(" \u2014 "),mD=a("a"),P3o=o("VisionTextDualEncoderModel"),B3o=o(" (VisionTextDualEncoder model)"),I3o=l(),Fu=a("li"),ife=a("strong"),N3o=o("visual_bert"),q3o=o(" \u2014 "),gD=a("a"),j3o=o("VisualBertModel"),D3o=o(" (VisualBERT model)"),G3o=l(),Tu=a("li"),dfe=a("strong"),O3o=o("vit"),V3o=o(" \u2014 "),hD=a("a"),X3o=o("ViTModel"),z3o=o(" (ViT model)"),Q3o=l(),Mu=a("li"),cfe=a("strong"),W3o=o("vit_mae"),H3o=o(" \u2014 "),pD=a("a"),U3o=o("ViTMAEModel"),J3o=o(" (ViTMAE model)"),Y3o=l(),Eu=a("li"),ffe=a("strong"),K3o=o("wav2vec2"),Z3o=o(" \u2014 "),_D=a("a"),e5o=o("Wav2Vec2Model"),o5o=o(" (Wav2Vec2 model)"),r5o=l(),Cu=a("li"),mfe=a("strong"),t5o=o("wav2vec2-conformer"),a5o=o(" \u2014 "),uD=a("a"),n5o=o("Wav2Vec2ConformerModel"),s5o=o(" (Wav2Vec2-Conformer model)"),l5o=l(),wu=a("li"),gfe=a("strong"),i5o=o("wavlm"),d5o=o(" \u2014 "),bD=a("a"),c5o=o("WavLMModel"),f5o=o(" (WavLM model)"),m5o=l(),Au=a("li"),hfe=a("strong"),g5o=o("xglm"),h5o=o(" \u2014 "),vD=a("a"),p5o=o("XGLMModel"),_5o=o(" (XGLM model)"),u5o=l(),Lu=a("li"),pfe=a("strong"),b5o=o("xlm"),v5o=o(" \u2014 "),FD=a("a"),F5o=o("XLMModel"),T5o=o(" (XLM model)"),M5o=l(),yu=a("li"),_fe=a("strong"),E5o=o("xlm-prophetnet"),C5o=o(" \u2014 "),TD=a("a"),w5o=o("XLMProphetNetModel"),A5o=o(" (XLM-ProphetNet model)"),L5o=l(),xu=a("li"),ufe=a("strong"),y5o=o("xlm-roberta"),x5o=o(" \u2014 "),MD=a("a"),$5o=o("XLMRobertaModel"),k5o=o(" (XLM-RoBERTa model)"),S5o=l(),$u=a("li"),bfe=a("strong"),R5o=o("xlm-roberta-xl"),P5o=o(" \u2014 "),ED=a("a"),B5o=o("XLMRobertaXLModel"),I5o=o(" (XLM-RoBERTa-XL model)"),N5o=l(),ku=a("li"),vfe=a("strong"),q5o=o("xlnet"),j5o=o(" \u2014 "),CD=a("a"),D5o=o("XLNetModel"),G5o=o(" (XLNet model)"),O5o=l(),Su=a("li"),Ffe=a("strong"),V5o=o("yolos"),X5o=o(" \u2014 "),wD=a("a"),z5o=o("YolosModel"),Q5o=o(" (YOLOS model)"),W5o=l(),Ru=a("li"),Tfe=a("strong"),H5o=o("yoso"),U5o=o(" \u2014 "),AD=a("a"),J5o=o("YosoModel"),Y5o=o(" (YOSO model)"),K5o=l(),Pu=a("p"),Z5o=o("The model is set in evaluation mode by default using "),Mfe=a("code"),e0o=o("model.eval()"),o0o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Efe=a("code"),r0o=o("model.train()"),t0o=l(),F(Bu.$$.fragment),eVe=l(),Di=a("h2"),Iu=a("a"),Cfe=a("span"),F(vL.$$.fragment),a0o=l(),wfe=a("span"),n0o=o("AutoModelForPreTraining"),oVe=l(),$o=a("div"),F(FL.$$.fragment),s0o=l(),Gi=a("p"),l0o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),LD=a("a"),i0o=o("from_pretrained()"),d0o=o(" class method or the "),yD=a("a"),c0o=o("from_config()"),f0o=o(` class
method.`),m0o=l(),TL=a("p"),g0o=o("This class cannot be instantiated directly using "),Afe=a("code"),h0o=o("__init__()"),p0o=o(" (throws an error)."),_0o=l(),st=a("div"),F(ML.$$.fragment),u0o=l(),Lfe=a("p"),b0o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),v0o=l(),Oi=a("p"),F0o=o(`Note:
Loading a model from its configuration file does `),yfe=a("strong"),T0o=o("not"),M0o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xD=a("a"),E0o=o("from_pretrained()"),C0o=o(" to load the model weights."),w0o=l(),F(Nu.$$.fragment),A0o=l(),Ye=a("div"),F(EL.$$.fragment),L0o=l(),xfe=a("p"),y0o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),x0o=l(),Pa=a("p"),$0o=o("The model class to instantiate is selected based on the "),$fe=a("code"),k0o=o("model_type"),S0o=o(` property of the config object (either
passed as an argument or loaded from `),kfe=a("code"),R0o=o("pretrained_model_name_or_path"),P0o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sfe=a("code"),B0o=o("pretrained_model_name_or_path"),I0o=o(":"),N0o=l(),G=a("ul"),qu=a("li"),Rfe=a("strong"),q0o=o("albert"),j0o=o(" \u2014 "),$D=a("a"),D0o=o("AlbertForPreTraining"),G0o=o(" (ALBERT model)"),O0o=l(),ju=a("li"),Pfe=a("strong"),V0o=o("bart"),X0o=o(" \u2014 "),kD=a("a"),z0o=o("BartForConditionalGeneration"),Q0o=o(" (BART model)"),W0o=l(),Du=a("li"),Bfe=a("strong"),H0o=o("bert"),U0o=o(" \u2014 "),SD=a("a"),J0o=o("BertForPreTraining"),Y0o=o(" (BERT model)"),K0o=l(),Gu=a("li"),Ife=a("strong"),Z0o=o("big_bird"),ewo=o(" \u2014 "),RD=a("a"),owo=o("BigBirdForPreTraining"),rwo=o(" (BigBird model)"),two=l(),Ou=a("li"),Nfe=a("strong"),awo=o("bloom"),nwo=o(" \u2014 "),PD=a("a"),swo=o("BloomForCausalLM"),lwo=o(" (BLOOM model)"),iwo=l(),Vu=a("li"),qfe=a("strong"),dwo=o("camembert"),cwo=o(" \u2014 "),BD=a("a"),fwo=o("CamembertForMaskedLM"),mwo=o(" (CamemBERT model)"),gwo=l(),Xu=a("li"),jfe=a("strong"),hwo=o("ctrl"),pwo=o(" \u2014 "),ID=a("a"),_wo=o("CTRLLMHeadModel"),uwo=o(" (CTRL model)"),bwo=l(),zu=a("li"),Dfe=a("strong"),vwo=o("data2vec-text"),Fwo=o(" \u2014 "),ND=a("a"),Two=o("Data2VecTextForMaskedLM"),Mwo=o(" (Data2VecText model)"),Ewo=l(),Qu=a("li"),Gfe=a("strong"),Cwo=o("deberta"),wwo=o(" \u2014 "),qD=a("a"),Awo=o("DebertaForMaskedLM"),Lwo=o(" (DeBERTa model)"),ywo=l(),Wu=a("li"),Ofe=a("strong"),xwo=o("deberta-v2"),$wo=o(" \u2014 "),jD=a("a"),kwo=o("DebertaV2ForMaskedLM"),Swo=o(" (DeBERTa-v2 model)"),Rwo=l(),Hu=a("li"),Vfe=a("strong"),Pwo=o("distilbert"),Bwo=o(" \u2014 "),DD=a("a"),Iwo=o("DistilBertForMaskedLM"),Nwo=o(" (DistilBERT model)"),qwo=l(),Uu=a("li"),Xfe=a("strong"),jwo=o("electra"),Dwo=o(" \u2014 "),GD=a("a"),Gwo=o("ElectraForPreTraining"),Owo=o(" (ELECTRA model)"),Vwo=l(),Ju=a("li"),zfe=a("strong"),Xwo=o("flaubert"),zwo=o(" \u2014 "),OD=a("a"),Qwo=o("FlaubertWithLMHeadModel"),Wwo=o(" (FlauBERT model)"),Hwo=l(),Yu=a("li"),Qfe=a("strong"),Uwo=o("flava"),Jwo=o(" \u2014 "),VD=a("a"),Ywo=o("FlavaForPreTraining"),Kwo=o(" (FLAVA model)"),Zwo=l(),Ku=a("li"),Wfe=a("strong"),eAo=o("fnet"),oAo=o(" \u2014 "),XD=a("a"),rAo=o("FNetForPreTraining"),tAo=o(" (FNet model)"),aAo=l(),Zu=a("li"),Hfe=a("strong"),nAo=o("fsmt"),sAo=o(" \u2014 "),zD=a("a"),lAo=o("FSMTForConditionalGeneration"),iAo=o(" (FairSeq Machine-Translation model)"),dAo=l(),e7=a("li"),Ufe=a("strong"),cAo=o("funnel"),fAo=o(" \u2014 "),QD=a("a"),mAo=o("FunnelForPreTraining"),gAo=o(" (Funnel Transformer model)"),hAo=l(),o7=a("li"),Jfe=a("strong"),pAo=o("gpt2"),_Ao=o(" \u2014 "),WD=a("a"),uAo=o("GPT2LMHeadModel"),bAo=o(" (OpenAI GPT-2 model)"),vAo=l(),r7=a("li"),Yfe=a("strong"),FAo=o("ibert"),TAo=o(" \u2014 "),HD=a("a"),MAo=o("IBertForMaskedLM"),EAo=o(" (I-BERT model)"),CAo=l(),t7=a("li"),Kfe=a("strong"),wAo=o("layoutlm"),AAo=o(" \u2014 "),UD=a("a"),LAo=o("LayoutLMForMaskedLM"),yAo=o(" (LayoutLM model)"),xAo=l(),a7=a("li"),Zfe=a("strong"),$Ao=o("longformer"),kAo=o(" \u2014 "),JD=a("a"),SAo=o("LongformerForMaskedLM"),RAo=o(" (Longformer model)"),PAo=l(),n7=a("li"),eme=a("strong"),BAo=o("lxmert"),IAo=o(" \u2014 "),YD=a("a"),NAo=o("LxmertForPreTraining"),qAo=o(" (LXMERT model)"),jAo=l(),s7=a("li"),ome=a("strong"),DAo=o("megatron-bert"),GAo=o(" \u2014 "),KD=a("a"),OAo=o("MegatronBertForPreTraining"),VAo=o(" (Megatron-BERT model)"),XAo=l(),l7=a("li"),rme=a("strong"),zAo=o("mobilebert"),QAo=o(" \u2014 "),ZD=a("a"),WAo=o("MobileBertForPreTraining"),HAo=o(" (MobileBERT model)"),UAo=l(),i7=a("li"),tme=a("strong"),JAo=o("mpnet"),YAo=o(" \u2014 "),eG=a("a"),KAo=o("MPNetForMaskedLM"),ZAo=o(" (MPNet model)"),e6o=l(),d7=a("li"),ame=a("strong"),o6o=o("mvp"),r6o=o(" \u2014 "),oG=a("a"),t6o=o("MvpForConditionalGeneration"),a6o=o(" (MVP model)"),n6o=l(),c7=a("li"),nme=a("strong"),s6o=o("nezha"),l6o=o(" \u2014 "),rG=a("a"),i6o=o("NezhaForPreTraining"),d6o=o(" (Nezha model)"),c6o=l(),f7=a("li"),sme=a("strong"),f6o=o("openai-gpt"),m6o=o(" \u2014 "),tG=a("a"),g6o=o("OpenAIGPTLMHeadModel"),h6o=o(" (OpenAI GPT model)"),p6o=l(),m7=a("li"),lme=a("strong"),_6o=o("retribert"),u6o=o(" \u2014 "),aG=a("a"),b6o=o("RetriBertModel"),v6o=o(" (RetriBERT model)"),F6o=l(),g7=a("li"),ime=a("strong"),T6o=o("roberta"),M6o=o(" \u2014 "),nG=a("a"),E6o=o("RobertaForMaskedLM"),C6o=o(" (RoBERTa model)"),w6o=l(),h7=a("li"),dme=a("strong"),A6o=o("splinter"),L6o=o(" \u2014 "),sG=a("a"),y6o=o("SplinterForPreTraining"),x6o=o(" (Splinter model)"),$6o=l(),p7=a("li"),cme=a("strong"),k6o=o("squeezebert"),S6o=o(" \u2014 "),lG=a("a"),R6o=o("SqueezeBertForMaskedLM"),P6o=o(" (SqueezeBERT model)"),B6o=l(),_7=a("li"),fme=a("strong"),I6o=o("t5"),N6o=o(" \u2014 "),iG=a("a"),q6o=o("T5ForConditionalGeneration"),j6o=o(" (T5 model)"),D6o=l(),u7=a("li"),mme=a("strong"),G6o=o("tapas"),O6o=o(" \u2014 "),dG=a("a"),V6o=o("TapasForMaskedLM"),X6o=o(" (TAPAS model)"),z6o=l(),b7=a("li"),gme=a("strong"),Q6o=o("transfo-xl"),W6o=o(" \u2014 "),cG=a("a"),H6o=o("TransfoXLLMHeadModel"),U6o=o(" (Transformer-XL model)"),J6o=l(),v7=a("li"),hme=a("strong"),Y6o=o("unispeech"),K6o=o(" \u2014 "),fG=a("a"),Z6o=o("UniSpeechForPreTraining"),eLo=o(" (UniSpeech model)"),oLo=l(),F7=a("li"),pme=a("strong"),rLo=o("unispeech-sat"),tLo=o(" \u2014 "),mG=a("a"),aLo=o("UniSpeechSatForPreTraining"),nLo=o(" (UniSpeechSat model)"),sLo=l(),T7=a("li"),_me=a("strong"),lLo=o("visual_bert"),iLo=o(" \u2014 "),gG=a("a"),dLo=o("VisualBertForPreTraining"),cLo=o(" (VisualBERT model)"),fLo=l(),M7=a("li"),ume=a("strong"),mLo=o("vit_mae"),gLo=o(" \u2014 "),hG=a("a"),hLo=o("ViTMAEForPreTraining"),pLo=o(" (ViTMAE model)"),_Lo=l(),E7=a("li"),bme=a("strong"),uLo=o("wav2vec2"),bLo=o(" \u2014 "),pG=a("a"),vLo=o("Wav2Vec2ForPreTraining"),FLo=o(" (Wav2Vec2 model)"),TLo=l(),C7=a("li"),vme=a("strong"),MLo=o("wav2vec2-conformer"),ELo=o(" \u2014 "),_G=a("a"),CLo=o("Wav2Vec2ConformerForPreTraining"),wLo=o(" (Wav2Vec2-Conformer model)"),ALo=l(),w7=a("li"),Fme=a("strong"),LLo=o("xlm"),yLo=o(" \u2014 "),uG=a("a"),xLo=o("XLMWithLMHeadModel"),$Lo=o(" (XLM model)"),kLo=l(),A7=a("li"),Tme=a("strong"),SLo=o("xlm-roberta"),RLo=o(" \u2014 "),bG=a("a"),PLo=o("XLMRobertaForMaskedLM"),BLo=o(" (XLM-RoBERTa model)"),ILo=l(),L7=a("li"),Mme=a("strong"),NLo=o("xlm-roberta-xl"),qLo=o(" \u2014 "),vG=a("a"),jLo=o("XLMRobertaXLForMaskedLM"),DLo=o(" (XLM-RoBERTa-XL model)"),GLo=l(),y7=a("li"),Eme=a("strong"),OLo=o("xlnet"),VLo=o(" \u2014 "),FG=a("a"),XLo=o("XLNetLMHeadModel"),zLo=o(" (XLNet model)"),QLo=l(),x7=a("p"),WLo=o("The model is set in evaluation mode by default using "),Cme=a("code"),HLo=o("model.eval()"),ULo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wme=a("code"),JLo=o("model.train()"),YLo=l(),F($7.$$.fragment),rVe=l(),Vi=a("h2"),k7=a("a"),Ame=a("span"),F(CL.$$.fragment),KLo=l(),Lme=a("span"),ZLo=o("AutoModelForCausalLM"),tVe=l(),ko=a("div"),F(wL.$$.fragment),eyo=l(),Xi=a("p"),oyo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),TG=a("a"),ryo=o("from_pretrained()"),tyo=o(" class method or the "),MG=a("a"),ayo=o("from_config()"),nyo=o(` class
method.`),syo=l(),AL=a("p"),lyo=o("This class cannot be instantiated directly using "),yme=a("code"),iyo=o("__init__()"),dyo=o(" (throws an error)."),cyo=l(),lt=a("div"),F(LL.$$.fragment),fyo=l(),xme=a("p"),myo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),gyo=l(),zi=a("p"),hyo=o(`Note:
Loading a model from its configuration file does `),$me=a("strong"),pyo=o("not"),_yo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EG=a("a"),uyo=o("from_pretrained()"),byo=o(" to load the model weights."),vyo=l(),F(S7.$$.fragment),Fyo=l(),Ke=a("div"),F(yL.$$.fragment),Tyo=l(),kme=a("p"),Myo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Eyo=l(),Ba=a("p"),Cyo=o("The model class to instantiate is selected based on the "),Sme=a("code"),wyo=o("model_type"),Ayo=o(` property of the config object (either
passed as an argument or loaded from `),Rme=a("code"),Lyo=o("pretrained_model_name_or_path"),yyo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pme=a("code"),xyo=o("pretrained_model_name_or_path"),$yo=o(":"),kyo=l(),z=a("ul"),R7=a("li"),Bme=a("strong"),Syo=o("bart"),Ryo=o(" \u2014 "),CG=a("a"),Pyo=o("BartForCausalLM"),Byo=o(" (BART model)"),Iyo=l(),P7=a("li"),Ime=a("strong"),Nyo=o("bert"),qyo=o(" \u2014 "),wG=a("a"),jyo=o("BertLMHeadModel"),Dyo=o(" (BERT model)"),Gyo=l(),B7=a("li"),Nme=a("strong"),Oyo=o("bert-generation"),Vyo=o(" \u2014 "),AG=a("a"),Xyo=o("BertGenerationDecoder"),zyo=o(" (Bert Generation model)"),Qyo=l(),I7=a("li"),qme=a("strong"),Wyo=o("big_bird"),Hyo=o(" \u2014 "),LG=a("a"),Uyo=o("BigBirdForCausalLM"),Jyo=o(" (BigBird model)"),Yyo=l(),N7=a("li"),jme=a("strong"),Kyo=o("bigbird_pegasus"),Zyo=o(" \u2014 "),yG=a("a"),e9o=o("BigBirdPegasusForCausalLM"),o9o=o(" (BigBird-Pegasus model)"),r9o=l(),q7=a("li"),Dme=a("strong"),t9o=o("blenderbot"),a9o=o(" \u2014 "),xG=a("a"),n9o=o("BlenderbotForCausalLM"),s9o=o(" (Blenderbot model)"),l9o=l(),j7=a("li"),Gme=a("strong"),i9o=o("blenderbot-small"),d9o=o(" \u2014 "),$G=a("a"),c9o=o("BlenderbotSmallForCausalLM"),f9o=o(" (BlenderbotSmall model)"),m9o=l(),D7=a("li"),Ome=a("strong"),g9o=o("bloom"),h9o=o(" \u2014 "),kG=a("a"),p9o=o("BloomForCausalLM"),_9o=o(" (BLOOM model)"),u9o=l(),G7=a("li"),Vme=a("strong"),b9o=o("camembert"),v9o=o(" \u2014 "),SG=a("a"),F9o=o("CamembertForCausalLM"),T9o=o(" (CamemBERT model)"),M9o=l(),O7=a("li"),Xme=a("strong"),E9o=o("codegen"),C9o=o(" \u2014 "),RG=a("a"),w9o=o("CodeGenForCausalLM"),A9o=o(" (CodeGen model)"),L9o=l(),V7=a("li"),zme=a("strong"),y9o=o("ctrl"),x9o=o(" \u2014 "),PG=a("a"),$9o=o("CTRLLMHeadModel"),k9o=o(" (CTRL model)"),S9o=l(),X7=a("li"),Qme=a("strong"),R9o=o("data2vec-text"),P9o=o(" \u2014 "),BG=a("a"),B9o=o("Data2VecTextForCausalLM"),I9o=o(" (Data2VecText model)"),N9o=l(),z7=a("li"),Wme=a("strong"),q9o=o("electra"),j9o=o(" \u2014 "),IG=a("a"),D9o=o("ElectraForCausalLM"),G9o=o(" (ELECTRA model)"),O9o=l(),Q7=a("li"),Hme=a("strong"),V9o=o("gpt2"),X9o=o(" \u2014 "),NG=a("a"),z9o=o("GPT2LMHeadModel"),Q9o=o(" (OpenAI GPT-2 model)"),W9o=l(),W7=a("li"),Ume=a("strong"),H9o=o("gpt_neo"),U9o=o(" \u2014 "),qG=a("a"),J9o=o("GPTNeoForCausalLM"),Y9o=o(" (GPT Neo model)"),K9o=l(),H7=a("li"),Jme=a("strong"),Z9o=o("gpt_neox"),exo=o(" \u2014 "),jG=a("a"),oxo=o("GPTNeoXForCausalLM"),rxo=o(" (GPT NeoX model)"),txo=l(),U7=a("li"),Yme=a("strong"),axo=o("gptj"),nxo=o(" \u2014 "),DG=a("a"),sxo=o("GPTJForCausalLM"),lxo=o(" (GPT-J model)"),ixo=l(),J7=a("li"),Kme=a("strong"),dxo=o("marian"),cxo=o(" \u2014 "),GG=a("a"),fxo=o("MarianForCausalLM"),mxo=o(" (Marian model)"),gxo=l(),Y7=a("li"),Zme=a("strong"),hxo=o("mbart"),pxo=o(" \u2014 "),OG=a("a"),_xo=o("MBartForCausalLM"),uxo=o(" (mBART model)"),bxo=l(),K7=a("li"),ege=a("strong"),vxo=o("megatron-bert"),Fxo=o(" \u2014 "),VG=a("a"),Txo=o("MegatronBertForCausalLM"),Mxo=o(" (Megatron-BERT model)"),Exo=l(),Z7=a("li"),oge=a("strong"),Cxo=o("mvp"),wxo=o(" \u2014 "),XG=a("a"),Axo=o("MvpForCausalLM"),Lxo=o(" (MVP model)"),yxo=l(),e1=a("li"),rge=a("strong"),xxo=o("openai-gpt"),$xo=o(" \u2014 "),zG=a("a"),kxo=o("OpenAIGPTLMHeadModel"),Sxo=o(" (OpenAI GPT model)"),Rxo=l(),o1=a("li"),tge=a("strong"),Pxo=o("opt"),Bxo=o(" \u2014 "),QG=a("a"),Ixo=o("OPTForCausalLM"),Nxo=o(" (OPT model)"),qxo=l(),r1=a("li"),age=a("strong"),jxo=o("pegasus"),Dxo=o(" \u2014 "),WG=a("a"),Gxo=o("PegasusForCausalLM"),Oxo=o(" (Pegasus model)"),Vxo=l(),t1=a("li"),nge=a("strong"),Xxo=o("plbart"),zxo=o(" \u2014 "),HG=a("a"),Qxo=o("PLBartForCausalLM"),Wxo=o(" (PLBart model)"),Hxo=l(),a1=a("li"),sge=a("strong"),Uxo=o("prophetnet"),Jxo=o(" \u2014 "),UG=a("a"),Yxo=o("ProphetNetForCausalLM"),Kxo=o(" (ProphetNet model)"),Zxo=l(),n1=a("li"),lge=a("strong"),e$o=o("qdqbert"),o$o=o(" \u2014 "),JG=a("a"),r$o=o("QDQBertLMHeadModel"),t$o=o(" (QDQBert model)"),a$o=l(),s1=a("li"),ige=a("strong"),n$o=o("reformer"),s$o=o(" \u2014 "),YG=a("a"),l$o=o("ReformerModelWithLMHead"),i$o=o(" (Reformer model)"),d$o=l(),l1=a("li"),dge=a("strong"),c$o=o("rembert"),f$o=o(" \u2014 "),KG=a("a"),m$o=o("RemBertForCausalLM"),g$o=o(" (RemBERT model)"),h$o=l(),i1=a("li"),cge=a("strong"),p$o=o("roberta"),_$o=o(" \u2014 "),ZG=a("a"),u$o=o("RobertaForCausalLM"),b$o=o(" (RoBERTa model)"),v$o=l(),d1=a("li"),fge=a("strong"),F$o=o("roformer"),T$o=o(" \u2014 "),eO=a("a"),M$o=o("RoFormerForCausalLM"),E$o=o(" (RoFormer model)"),C$o=l(),c1=a("li"),mge=a("strong"),w$o=o("speech_to_text_2"),A$o=o(" \u2014 "),oO=a("a"),L$o=o("Speech2Text2ForCausalLM"),y$o=o(" (Speech2Text2 model)"),x$o=l(),f1=a("li"),gge=a("strong"),$$o=o("transfo-xl"),k$o=o(" \u2014 "),rO=a("a"),S$o=o("TransfoXLLMHeadModel"),R$o=o(" (Transformer-XL model)"),P$o=l(),m1=a("li"),hge=a("strong"),B$o=o("trocr"),I$o=o(" \u2014 "),tO=a("a"),N$o=o("TrOCRForCausalLM"),q$o=o(" (TrOCR model)"),j$o=l(),g1=a("li"),pge=a("strong"),D$o=o("xglm"),G$o=o(" \u2014 "),aO=a("a"),O$o=o("XGLMForCausalLM"),V$o=o(" (XGLM model)"),X$o=l(),h1=a("li"),_ge=a("strong"),z$o=o("xlm"),Q$o=o(" \u2014 "),nO=a("a"),W$o=o("XLMWithLMHeadModel"),H$o=o(" (XLM model)"),U$o=l(),p1=a("li"),uge=a("strong"),J$o=o("xlm-prophetnet"),Y$o=o(" \u2014 "),sO=a("a"),K$o=o("XLMProphetNetForCausalLM"),Z$o=o(" (XLM-ProphetNet model)"),eko=l(),_1=a("li"),bge=a("strong"),oko=o("xlm-roberta"),rko=o(" \u2014 "),lO=a("a"),tko=o("XLMRobertaForCausalLM"),ako=o(" (XLM-RoBERTa model)"),nko=l(),u1=a("li"),vge=a("strong"),sko=o("xlm-roberta-xl"),lko=o(" \u2014 "),iO=a("a"),iko=o("XLMRobertaXLForCausalLM"),dko=o(" (XLM-RoBERTa-XL model)"),cko=l(),b1=a("li"),Fge=a("strong"),fko=o("xlnet"),mko=o(" \u2014 "),dO=a("a"),gko=o("XLNetLMHeadModel"),hko=o(" (XLNet model)"),pko=l(),v1=a("p"),_ko=o("The model is set in evaluation mode by default using "),Tge=a("code"),uko=o("model.eval()"),bko=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mge=a("code"),vko=o("model.train()"),Fko=l(),F(F1.$$.fragment),aVe=l(),Qi=a("h2"),T1=a("a"),Ege=a("span"),F(xL.$$.fragment),Tko=l(),Cge=a("span"),Mko=o("AutoModelForMaskedLM"),nVe=l(),So=a("div"),F($L.$$.fragment),Eko=l(),Wi=a("p"),Cko=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),cO=a("a"),wko=o("from_pretrained()"),Ako=o(" class method or the "),fO=a("a"),Lko=o("from_config()"),yko=o(` class
method.`),xko=l(),kL=a("p"),$ko=o("This class cannot be instantiated directly using "),wge=a("code"),kko=o("__init__()"),Sko=o(" (throws an error)."),Rko=l(),it=a("div"),F(SL.$$.fragment),Pko=l(),Age=a("p"),Bko=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Iko=l(),Hi=a("p"),Nko=o(`Note:
Loading a model from its configuration file does `),Lge=a("strong"),qko=o("not"),jko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mO=a("a"),Dko=o("from_pretrained()"),Gko=o(" to load the model weights."),Oko=l(),F(M1.$$.fragment),Vko=l(),Ze=a("div"),F(RL.$$.fragment),Xko=l(),yge=a("p"),zko=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Qko=l(),Ia=a("p"),Wko=o("The model class to instantiate is selected based on the "),xge=a("code"),Hko=o("model_type"),Uko=o(` property of the config object (either
passed as an argument or loaded from `),$ge=a("code"),Jko=o("pretrained_model_name_or_path"),Yko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kge=a("code"),Kko=o("pretrained_model_name_or_path"),Zko=o(":"),eSo=l(),W=a("ul"),E1=a("li"),Sge=a("strong"),oSo=o("albert"),rSo=o(" \u2014 "),gO=a("a"),tSo=o("AlbertForMaskedLM"),aSo=o(" (ALBERT model)"),nSo=l(),C1=a("li"),Rge=a("strong"),sSo=o("bart"),lSo=o(" \u2014 "),hO=a("a"),iSo=o("BartForConditionalGeneration"),dSo=o(" (BART model)"),cSo=l(),w1=a("li"),Pge=a("strong"),fSo=o("bert"),mSo=o(" \u2014 "),pO=a("a"),gSo=o("BertForMaskedLM"),hSo=o(" (BERT model)"),pSo=l(),A1=a("li"),Bge=a("strong"),_So=o("big_bird"),uSo=o(" \u2014 "),_O=a("a"),bSo=o("BigBirdForMaskedLM"),vSo=o(" (BigBird model)"),FSo=l(),L1=a("li"),Ige=a("strong"),TSo=o("camembert"),MSo=o(" \u2014 "),uO=a("a"),ESo=o("CamembertForMaskedLM"),CSo=o(" (CamemBERT model)"),wSo=l(),y1=a("li"),Nge=a("strong"),ASo=o("convbert"),LSo=o(" \u2014 "),bO=a("a"),ySo=o("ConvBertForMaskedLM"),xSo=o(" (ConvBERT model)"),$So=l(),x1=a("li"),qge=a("strong"),kSo=o("data2vec-text"),SSo=o(" \u2014 "),vO=a("a"),RSo=o("Data2VecTextForMaskedLM"),PSo=o(" (Data2VecText model)"),BSo=l(),$1=a("li"),jge=a("strong"),ISo=o("deberta"),NSo=o(" \u2014 "),FO=a("a"),qSo=o("DebertaForMaskedLM"),jSo=o(" (DeBERTa model)"),DSo=l(),k1=a("li"),Dge=a("strong"),GSo=o("deberta-v2"),OSo=o(" \u2014 "),TO=a("a"),VSo=o("DebertaV2ForMaskedLM"),XSo=o(" (DeBERTa-v2 model)"),zSo=l(),S1=a("li"),Gge=a("strong"),QSo=o("distilbert"),WSo=o(" \u2014 "),MO=a("a"),HSo=o("DistilBertForMaskedLM"),USo=o(" (DistilBERT model)"),JSo=l(),R1=a("li"),Oge=a("strong"),YSo=o("electra"),KSo=o(" \u2014 "),EO=a("a"),ZSo=o("ElectraForMaskedLM"),eRo=o(" (ELECTRA model)"),oRo=l(),P1=a("li"),Vge=a("strong"),rRo=o("flaubert"),tRo=o(" \u2014 "),CO=a("a"),aRo=o("FlaubertWithLMHeadModel"),nRo=o(" (FlauBERT model)"),sRo=l(),B1=a("li"),Xge=a("strong"),lRo=o("fnet"),iRo=o(" \u2014 "),wO=a("a"),dRo=o("FNetForMaskedLM"),cRo=o(" (FNet model)"),fRo=l(),I1=a("li"),zge=a("strong"),mRo=o("funnel"),gRo=o(" \u2014 "),AO=a("a"),hRo=o("FunnelForMaskedLM"),pRo=o(" (Funnel Transformer model)"),_Ro=l(),N1=a("li"),Qge=a("strong"),uRo=o("ibert"),bRo=o(" \u2014 "),LO=a("a"),vRo=o("IBertForMaskedLM"),FRo=o(" (I-BERT model)"),TRo=l(),q1=a("li"),Wge=a("strong"),MRo=o("layoutlm"),ERo=o(" \u2014 "),yO=a("a"),CRo=o("LayoutLMForMaskedLM"),wRo=o(" (LayoutLM model)"),ARo=l(),j1=a("li"),Hge=a("strong"),LRo=o("longformer"),yRo=o(" \u2014 "),xO=a("a"),xRo=o("LongformerForMaskedLM"),$Ro=o(" (Longformer model)"),kRo=l(),D1=a("li"),Uge=a("strong"),SRo=o("luke"),RRo=o(" \u2014 "),$O=a("a"),PRo=o("LukeForMaskedLM"),BRo=o(" (LUKE model)"),IRo=l(),G1=a("li"),Jge=a("strong"),NRo=o("mbart"),qRo=o(" \u2014 "),kO=a("a"),jRo=o("MBartForConditionalGeneration"),DRo=o(" (mBART model)"),GRo=l(),O1=a("li"),Yge=a("strong"),ORo=o("megatron-bert"),VRo=o(" \u2014 "),SO=a("a"),XRo=o("MegatronBertForMaskedLM"),zRo=o(" (Megatron-BERT model)"),QRo=l(),V1=a("li"),Kge=a("strong"),WRo=o("mobilebert"),HRo=o(" \u2014 "),RO=a("a"),URo=o("MobileBertForMaskedLM"),JRo=o(" (MobileBERT model)"),YRo=l(),X1=a("li"),Zge=a("strong"),KRo=o("mpnet"),ZRo=o(" \u2014 "),PO=a("a"),ePo=o("MPNetForMaskedLM"),oPo=o(" (MPNet model)"),rPo=l(),z1=a("li"),ehe=a("strong"),tPo=o("mvp"),aPo=o(" \u2014 "),BO=a("a"),nPo=o("MvpForConditionalGeneration"),sPo=o(" (MVP model)"),lPo=l(),Q1=a("li"),ohe=a("strong"),iPo=o("nezha"),dPo=o(" \u2014 "),IO=a("a"),cPo=o("NezhaForMaskedLM"),fPo=o(" (Nezha model)"),mPo=l(),W1=a("li"),rhe=a("strong"),gPo=o("nystromformer"),hPo=o(" \u2014 "),NO=a("a"),pPo=o("NystromformerForMaskedLM"),_Po=o(" (Nystr\xF6mformer model)"),uPo=l(),H1=a("li"),the=a("strong"),bPo=o("perceiver"),vPo=o(" \u2014 "),qO=a("a"),FPo=o("PerceiverForMaskedLM"),TPo=o(" (Perceiver model)"),MPo=l(),U1=a("li"),ahe=a("strong"),EPo=o("qdqbert"),CPo=o(" \u2014 "),jO=a("a"),wPo=o("QDQBertForMaskedLM"),APo=o(" (QDQBert model)"),LPo=l(),J1=a("li"),nhe=a("strong"),yPo=o("reformer"),xPo=o(" \u2014 "),DO=a("a"),$Po=o("ReformerForMaskedLM"),kPo=o(" (Reformer model)"),SPo=l(),Y1=a("li"),she=a("strong"),RPo=o("rembert"),PPo=o(" \u2014 "),GO=a("a"),BPo=o("RemBertForMaskedLM"),IPo=o(" (RemBERT model)"),NPo=l(),K1=a("li"),lhe=a("strong"),qPo=o("roberta"),jPo=o(" \u2014 "),OO=a("a"),DPo=o("RobertaForMaskedLM"),GPo=o(" (RoBERTa model)"),OPo=l(),Z1=a("li"),ihe=a("strong"),VPo=o("roformer"),XPo=o(" \u2014 "),VO=a("a"),zPo=o("RoFormerForMaskedLM"),QPo=o(" (RoFormer model)"),WPo=l(),e2=a("li"),dhe=a("strong"),HPo=o("squeezebert"),UPo=o(" \u2014 "),XO=a("a"),JPo=o("SqueezeBertForMaskedLM"),YPo=o(" (SqueezeBERT model)"),KPo=l(),o2=a("li"),che=a("strong"),ZPo=o("tapas"),eBo=o(" \u2014 "),zO=a("a"),oBo=o("TapasForMaskedLM"),rBo=o(" (TAPAS model)"),tBo=l(),r2=a("li"),fhe=a("strong"),aBo=o("wav2vec2"),nBo=o(" \u2014 "),mhe=a("code"),sBo=o("Wav2Vec2ForMaskedLM"),lBo=o(" (Wav2Vec2 model)"),iBo=l(),t2=a("li"),ghe=a("strong"),dBo=o("xlm"),cBo=o(" \u2014 "),QO=a("a"),fBo=o("XLMWithLMHeadModel"),mBo=o(" (XLM model)"),gBo=l(),a2=a("li"),hhe=a("strong"),hBo=o("xlm-roberta"),pBo=o(" \u2014 "),WO=a("a"),_Bo=o("XLMRobertaForMaskedLM"),uBo=o(" (XLM-RoBERTa model)"),bBo=l(),n2=a("li"),phe=a("strong"),vBo=o("xlm-roberta-xl"),FBo=o(" \u2014 "),HO=a("a"),TBo=o("XLMRobertaXLForMaskedLM"),MBo=o(" (XLM-RoBERTa-XL model)"),EBo=l(),s2=a("li"),_he=a("strong"),CBo=o("yoso"),wBo=o(" \u2014 "),UO=a("a"),ABo=o("YosoForMaskedLM"),LBo=o(" (YOSO model)"),yBo=l(),l2=a("p"),xBo=o("The model is set in evaluation mode by default using "),uhe=a("code"),$Bo=o("model.eval()"),kBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bhe=a("code"),SBo=o("model.train()"),RBo=l(),F(i2.$$.fragment),sVe=l(),Ui=a("h2"),d2=a("a"),vhe=a("span"),F(PL.$$.fragment),PBo=l(),Fhe=a("span"),BBo=o("AutoModelForSeq2SeqLM"),lVe=l(),Ro=a("div"),F(BL.$$.fragment),IBo=l(),Ji=a("p"),NBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),JO=a("a"),qBo=o("from_pretrained()"),jBo=o(" class method or the "),YO=a("a"),DBo=o("from_config()"),GBo=o(` class
method.`),OBo=l(),IL=a("p"),VBo=o("This class cannot be instantiated directly using "),The=a("code"),XBo=o("__init__()"),zBo=o(" (throws an error)."),QBo=l(),dt=a("div"),F(NL.$$.fragment),WBo=l(),Mhe=a("p"),HBo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),UBo=l(),Yi=a("p"),JBo=o(`Note:
Loading a model from its configuration file does `),Ehe=a("strong"),YBo=o("not"),KBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KO=a("a"),ZBo=o("from_pretrained()"),eIo=o(" to load the model weights."),oIo=l(),F(c2.$$.fragment),rIo=l(),eo=a("div"),F(qL.$$.fragment),tIo=l(),Che=a("p"),aIo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),nIo=l(),Na=a("p"),sIo=o("The model class to instantiate is selected based on the "),whe=a("code"),lIo=o("model_type"),iIo=o(` property of the config object (either
passed as an argument or loaded from `),Ahe=a("code"),dIo=o("pretrained_model_name_or_path"),cIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lhe=a("code"),fIo=o("pretrained_model_name_or_path"),mIo=o(":"),gIo=l(),he=a("ul"),f2=a("li"),yhe=a("strong"),hIo=o("bart"),pIo=o(" \u2014 "),ZO=a("a"),_Io=o("BartForConditionalGeneration"),uIo=o(" (BART model)"),bIo=l(),m2=a("li"),xhe=a("strong"),vIo=o("bigbird_pegasus"),FIo=o(" \u2014 "),eV=a("a"),TIo=o("BigBirdPegasusForConditionalGeneration"),MIo=o(" (BigBird-Pegasus model)"),EIo=l(),g2=a("li"),$he=a("strong"),CIo=o("blenderbot"),wIo=o(" \u2014 "),oV=a("a"),AIo=o("BlenderbotForConditionalGeneration"),LIo=o(" (Blenderbot model)"),yIo=l(),h2=a("li"),khe=a("strong"),xIo=o("blenderbot-small"),$Io=o(" \u2014 "),rV=a("a"),kIo=o("BlenderbotSmallForConditionalGeneration"),SIo=o(" (BlenderbotSmall model)"),RIo=l(),p2=a("li"),She=a("strong"),PIo=o("encoder-decoder"),BIo=o(" \u2014 "),tV=a("a"),IIo=o("EncoderDecoderModel"),NIo=o(" (Encoder decoder model)"),qIo=l(),_2=a("li"),Rhe=a("strong"),jIo=o("fsmt"),DIo=o(" \u2014 "),aV=a("a"),GIo=o("FSMTForConditionalGeneration"),OIo=o(" (FairSeq Machine-Translation model)"),VIo=l(),u2=a("li"),Phe=a("strong"),XIo=o("led"),zIo=o(" \u2014 "),nV=a("a"),QIo=o("LEDForConditionalGeneration"),WIo=o(" (LED model)"),HIo=l(),b2=a("li"),Bhe=a("strong"),UIo=o("longt5"),JIo=o(" \u2014 "),sV=a("a"),YIo=o("LongT5ForConditionalGeneration"),KIo=o(" (LongT5 model)"),ZIo=l(),v2=a("li"),Ihe=a("strong"),eNo=o("m2m_100"),oNo=o(" \u2014 "),lV=a("a"),rNo=o("M2M100ForConditionalGeneration"),tNo=o(" (M2M100 model)"),aNo=l(),F2=a("li"),Nhe=a("strong"),nNo=o("marian"),sNo=o(" \u2014 "),iV=a("a"),lNo=o("MarianMTModel"),iNo=o(" (Marian model)"),dNo=l(),T2=a("li"),qhe=a("strong"),cNo=o("mbart"),fNo=o(" \u2014 "),dV=a("a"),mNo=o("MBartForConditionalGeneration"),gNo=o(" (mBART model)"),hNo=l(),M2=a("li"),jhe=a("strong"),pNo=o("mt5"),_No=o(" \u2014 "),cV=a("a"),uNo=o("MT5ForConditionalGeneration"),bNo=o(" (MT5 model)"),vNo=l(),E2=a("li"),Dhe=a("strong"),FNo=o("mvp"),TNo=o(" \u2014 "),fV=a("a"),MNo=o("MvpForConditionalGeneration"),ENo=o(" (MVP model)"),CNo=l(),C2=a("li"),Ghe=a("strong"),wNo=o("pegasus"),ANo=o(" \u2014 "),mV=a("a"),LNo=o("PegasusForConditionalGeneration"),yNo=o(" (Pegasus model)"),xNo=l(),w2=a("li"),Ohe=a("strong"),$No=o("plbart"),kNo=o(" \u2014 "),gV=a("a"),SNo=o("PLBartForConditionalGeneration"),RNo=o(" (PLBart model)"),PNo=l(),A2=a("li"),Vhe=a("strong"),BNo=o("prophetnet"),INo=o(" \u2014 "),hV=a("a"),NNo=o("ProphetNetForConditionalGeneration"),qNo=o(" (ProphetNet model)"),jNo=l(),L2=a("li"),Xhe=a("strong"),DNo=o("t5"),GNo=o(" \u2014 "),pV=a("a"),ONo=o("T5ForConditionalGeneration"),VNo=o(" (T5 model)"),XNo=l(),y2=a("li"),zhe=a("strong"),zNo=o("xlm-prophetnet"),QNo=o(" \u2014 "),_V=a("a"),WNo=o("XLMProphetNetForConditionalGeneration"),HNo=o(" (XLM-ProphetNet model)"),UNo=l(),x2=a("p"),JNo=o("The model is set in evaluation mode by default using "),Qhe=a("code"),YNo=o("model.eval()"),KNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Whe=a("code"),ZNo=o("model.train()"),eqo=l(),F($2.$$.fragment),iVe=l(),Ki=a("h2"),k2=a("a"),Hhe=a("span"),F(jL.$$.fragment),oqo=l(),Uhe=a("span"),rqo=o("AutoModelForSequenceClassification"),dVe=l(),Po=a("div"),F(DL.$$.fragment),tqo=l(),Zi=a("p"),aqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),uV=a("a"),nqo=o("from_pretrained()"),sqo=o(" class method or the "),bV=a("a"),lqo=o("from_config()"),iqo=o(` class
method.`),dqo=l(),GL=a("p"),cqo=o("This class cannot be instantiated directly using "),Jhe=a("code"),fqo=o("__init__()"),mqo=o(" (throws an error)."),gqo=l(),ct=a("div"),F(OL.$$.fragment),hqo=l(),Yhe=a("p"),pqo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),_qo=l(),ed=a("p"),uqo=o(`Note:
Loading a model from its configuration file does `),Khe=a("strong"),bqo=o("not"),vqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vV=a("a"),Fqo=o("from_pretrained()"),Tqo=o(" to load the model weights."),Mqo=l(),F(S2.$$.fragment),Eqo=l(),oo=a("div"),F(VL.$$.fragment),Cqo=l(),Zhe=a("p"),wqo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Aqo=l(),qa=a("p"),Lqo=o("The model class to instantiate is selected based on the "),epe=a("code"),yqo=o("model_type"),xqo=o(` property of the config object (either
passed as an argument or loaded from `),ope=a("code"),$qo=o("pretrained_model_name_or_path"),kqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rpe=a("code"),Sqo=o("pretrained_model_name_or_path"),Rqo=o(":"),Pqo=l(),N=a("ul"),R2=a("li"),tpe=a("strong"),Bqo=o("albert"),Iqo=o(" \u2014 "),FV=a("a"),Nqo=o("AlbertForSequenceClassification"),qqo=o(" (ALBERT model)"),jqo=l(),P2=a("li"),ape=a("strong"),Dqo=o("bart"),Gqo=o(" \u2014 "),TV=a("a"),Oqo=o("BartForSequenceClassification"),Vqo=o(" (BART model)"),Xqo=l(),B2=a("li"),npe=a("strong"),zqo=o("bert"),Qqo=o(" \u2014 "),MV=a("a"),Wqo=o("BertForSequenceClassification"),Hqo=o(" (BERT model)"),Uqo=l(),I2=a("li"),spe=a("strong"),Jqo=o("big_bird"),Yqo=o(" \u2014 "),EV=a("a"),Kqo=o("BigBirdForSequenceClassification"),Zqo=o(" (BigBird model)"),ejo=l(),N2=a("li"),lpe=a("strong"),ojo=o("bigbird_pegasus"),rjo=o(" \u2014 "),CV=a("a"),tjo=o("BigBirdPegasusForSequenceClassification"),ajo=o(" (BigBird-Pegasus model)"),njo=l(),q2=a("li"),ipe=a("strong"),sjo=o("bloom"),ljo=o(" \u2014 "),wV=a("a"),ijo=o("BloomForSequenceClassification"),djo=o(" (BLOOM model)"),cjo=l(),j2=a("li"),dpe=a("strong"),fjo=o("camembert"),mjo=o(" \u2014 "),AV=a("a"),gjo=o("CamembertForSequenceClassification"),hjo=o(" (CamemBERT model)"),pjo=l(),D2=a("li"),cpe=a("strong"),_jo=o("canine"),ujo=o(" \u2014 "),LV=a("a"),bjo=o("CanineForSequenceClassification"),vjo=o(" (CANINE model)"),Fjo=l(),G2=a("li"),fpe=a("strong"),Tjo=o("convbert"),Mjo=o(" \u2014 "),yV=a("a"),Ejo=o("ConvBertForSequenceClassification"),Cjo=o(" (ConvBERT model)"),wjo=l(),O2=a("li"),mpe=a("strong"),Ajo=o("ctrl"),Ljo=o(" \u2014 "),xV=a("a"),yjo=o("CTRLForSequenceClassification"),xjo=o(" (CTRL model)"),$jo=l(),V2=a("li"),gpe=a("strong"),kjo=o("data2vec-text"),Sjo=o(" \u2014 "),$V=a("a"),Rjo=o("Data2VecTextForSequenceClassification"),Pjo=o(" (Data2VecText model)"),Bjo=l(),X2=a("li"),hpe=a("strong"),Ijo=o("deberta"),Njo=o(" \u2014 "),kV=a("a"),qjo=o("DebertaForSequenceClassification"),jjo=o(" (DeBERTa model)"),Djo=l(),z2=a("li"),ppe=a("strong"),Gjo=o("deberta-v2"),Ojo=o(" \u2014 "),SV=a("a"),Vjo=o("DebertaV2ForSequenceClassification"),Xjo=o(" (DeBERTa-v2 model)"),zjo=l(),Q2=a("li"),_pe=a("strong"),Qjo=o("distilbert"),Wjo=o(" \u2014 "),RV=a("a"),Hjo=o("DistilBertForSequenceClassification"),Ujo=o(" (DistilBERT model)"),Jjo=l(),W2=a("li"),upe=a("strong"),Yjo=o("electra"),Kjo=o(" \u2014 "),PV=a("a"),Zjo=o("ElectraForSequenceClassification"),eDo=o(" (ELECTRA model)"),oDo=l(),H2=a("li"),bpe=a("strong"),rDo=o("flaubert"),tDo=o(" \u2014 "),BV=a("a"),aDo=o("FlaubertForSequenceClassification"),nDo=o(" (FlauBERT model)"),sDo=l(),U2=a("li"),vpe=a("strong"),lDo=o("fnet"),iDo=o(" \u2014 "),IV=a("a"),dDo=o("FNetForSequenceClassification"),cDo=o(" (FNet model)"),fDo=l(),J2=a("li"),Fpe=a("strong"),mDo=o("funnel"),gDo=o(" \u2014 "),NV=a("a"),hDo=o("FunnelForSequenceClassification"),pDo=o(" (Funnel Transformer model)"),_Do=l(),Y2=a("li"),Tpe=a("strong"),uDo=o("gpt2"),bDo=o(" \u2014 "),qV=a("a"),vDo=o("GPT2ForSequenceClassification"),FDo=o(" (OpenAI GPT-2 model)"),TDo=l(),K2=a("li"),Mpe=a("strong"),MDo=o("gpt_neo"),EDo=o(" \u2014 "),jV=a("a"),CDo=o("GPTNeoForSequenceClassification"),wDo=o(" (GPT Neo model)"),ADo=l(),Z2=a("li"),Epe=a("strong"),LDo=o("gptj"),yDo=o(" \u2014 "),DV=a("a"),xDo=o("GPTJForSequenceClassification"),$Do=o(" (GPT-J model)"),kDo=l(),eb=a("li"),Cpe=a("strong"),SDo=o("ibert"),RDo=o(" \u2014 "),GV=a("a"),PDo=o("IBertForSequenceClassification"),BDo=o(" (I-BERT model)"),IDo=l(),ob=a("li"),wpe=a("strong"),NDo=o("layoutlm"),qDo=o(" \u2014 "),OV=a("a"),jDo=o("LayoutLMForSequenceClassification"),DDo=o(" (LayoutLM model)"),GDo=l(),rb=a("li"),Ape=a("strong"),ODo=o("layoutlmv2"),VDo=o(" \u2014 "),VV=a("a"),XDo=o("LayoutLMv2ForSequenceClassification"),zDo=o(" (LayoutLMv2 model)"),QDo=l(),tb=a("li"),Lpe=a("strong"),WDo=o("layoutlmv3"),HDo=o(" \u2014 "),XV=a("a"),UDo=o("LayoutLMv3ForSequenceClassification"),JDo=o(" (LayoutLMv3 model)"),YDo=l(),ab=a("li"),ype=a("strong"),KDo=o("led"),ZDo=o(" \u2014 "),zV=a("a"),eGo=o("LEDForSequenceClassification"),oGo=o(" (LED model)"),rGo=l(),nb=a("li"),xpe=a("strong"),tGo=o("longformer"),aGo=o(" \u2014 "),QV=a("a"),nGo=o("LongformerForSequenceClassification"),sGo=o(" (Longformer model)"),lGo=l(),sb=a("li"),$pe=a("strong"),iGo=o("mbart"),dGo=o(" \u2014 "),WV=a("a"),cGo=o("MBartForSequenceClassification"),fGo=o(" (mBART model)"),mGo=l(),lb=a("li"),kpe=a("strong"),gGo=o("megatron-bert"),hGo=o(" \u2014 "),HV=a("a"),pGo=o("MegatronBertForSequenceClassification"),_Go=o(" (Megatron-BERT model)"),uGo=l(),ib=a("li"),Spe=a("strong"),bGo=o("mobilebert"),vGo=o(" \u2014 "),UV=a("a"),FGo=o("MobileBertForSequenceClassification"),TGo=o(" (MobileBERT model)"),MGo=l(),db=a("li"),Rpe=a("strong"),EGo=o("mpnet"),CGo=o(" \u2014 "),JV=a("a"),wGo=o("MPNetForSequenceClassification"),AGo=o(" (MPNet model)"),LGo=l(),cb=a("li"),Ppe=a("strong"),yGo=o("mvp"),xGo=o(" \u2014 "),YV=a("a"),$Go=o("MvpForSequenceClassification"),kGo=o(" (MVP model)"),SGo=l(),fb=a("li"),Bpe=a("strong"),RGo=o("nezha"),PGo=o(" \u2014 "),KV=a("a"),BGo=o("NezhaForSequenceClassification"),IGo=o(" (Nezha model)"),NGo=l(),mb=a("li"),Ipe=a("strong"),qGo=o("nystromformer"),jGo=o(" \u2014 "),ZV=a("a"),DGo=o("NystromformerForSequenceClassification"),GGo=o(" (Nystr\xF6mformer model)"),OGo=l(),gb=a("li"),Npe=a("strong"),VGo=o("openai-gpt"),XGo=o(" \u2014 "),eX=a("a"),zGo=o("OpenAIGPTForSequenceClassification"),QGo=o(" (OpenAI GPT model)"),WGo=l(),hb=a("li"),qpe=a("strong"),HGo=o("perceiver"),UGo=o(" \u2014 "),oX=a("a"),JGo=o("PerceiverForSequenceClassification"),YGo=o(" (Perceiver model)"),KGo=l(),pb=a("li"),jpe=a("strong"),ZGo=o("plbart"),eOo=o(" \u2014 "),rX=a("a"),oOo=o("PLBartForSequenceClassification"),rOo=o(" (PLBart model)"),tOo=l(),_b=a("li"),Dpe=a("strong"),aOo=o("qdqbert"),nOo=o(" \u2014 "),tX=a("a"),sOo=o("QDQBertForSequenceClassification"),lOo=o(" (QDQBert model)"),iOo=l(),ub=a("li"),Gpe=a("strong"),dOo=o("reformer"),cOo=o(" \u2014 "),aX=a("a"),fOo=o("ReformerForSequenceClassification"),mOo=o(" (Reformer model)"),gOo=l(),bb=a("li"),Ope=a("strong"),hOo=o("rembert"),pOo=o(" \u2014 "),nX=a("a"),_Oo=o("RemBertForSequenceClassification"),uOo=o(" (RemBERT model)"),bOo=l(),vb=a("li"),Vpe=a("strong"),vOo=o("roberta"),FOo=o(" \u2014 "),sX=a("a"),TOo=o("RobertaForSequenceClassification"),MOo=o(" (RoBERTa model)"),EOo=l(),Fb=a("li"),Xpe=a("strong"),COo=o("roformer"),wOo=o(" \u2014 "),lX=a("a"),AOo=o("RoFormerForSequenceClassification"),LOo=o(" (RoFormer model)"),yOo=l(),Tb=a("li"),zpe=a("strong"),xOo=o("squeezebert"),$Oo=o(" \u2014 "),iX=a("a"),kOo=o("SqueezeBertForSequenceClassification"),SOo=o(" (SqueezeBERT model)"),ROo=l(),Mb=a("li"),Qpe=a("strong"),POo=o("tapas"),BOo=o(" \u2014 "),dX=a("a"),IOo=o("TapasForSequenceClassification"),NOo=o(" (TAPAS model)"),qOo=l(),Eb=a("li"),Wpe=a("strong"),jOo=o("transfo-xl"),DOo=o(" \u2014 "),cX=a("a"),GOo=o("TransfoXLForSequenceClassification"),OOo=o(" (Transformer-XL model)"),VOo=l(),Cb=a("li"),Hpe=a("strong"),XOo=o("xlm"),zOo=o(" \u2014 "),fX=a("a"),QOo=o("XLMForSequenceClassification"),WOo=o(" (XLM model)"),HOo=l(),wb=a("li"),Upe=a("strong"),UOo=o("xlm-roberta"),JOo=o(" \u2014 "),mX=a("a"),YOo=o("XLMRobertaForSequenceClassification"),KOo=o(" (XLM-RoBERTa model)"),ZOo=l(),Ab=a("li"),Jpe=a("strong"),eVo=o("xlm-roberta-xl"),oVo=o(" \u2014 "),gX=a("a"),rVo=o("XLMRobertaXLForSequenceClassification"),tVo=o(" (XLM-RoBERTa-XL model)"),aVo=l(),Lb=a("li"),Ype=a("strong"),nVo=o("xlnet"),sVo=o(" \u2014 "),hX=a("a"),lVo=o("XLNetForSequenceClassification"),iVo=o(" (XLNet model)"),dVo=l(),yb=a("li"),Kpe=a("strong"),cVo=o("yoso"),fVo=o(" \u2014 "),pX=a("a"),mVo=o("YosoForSequenceClassification"),gVo=o(" (YOSO model)"),hVo=l(),xb=a("p"),pVo=o("The model is set in evaluation mode by default using "),Zpe=a("code"),_Vo=o("model.eval()"),uVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),e_e=a("code"),bVo=o("model.train()"),vVo=l(),F($b.$$.fragment),cVe=l(),od=a("h2"),kb=a("a"),o_e=a("span"),F(XL.$$.fragment),FVo=l(),r_e=a("span"),TVo=o("AutoModelForMultipleChoice"),fVe=l(),Bo=a("div"),F(zL.$$.fragment),MVo=l(),rd=a("p"),EVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),_X=a("a"),CVo=o("from_pretrained()"),wVo=o(" class method or the "),uX=a("a"),AVo=o("from_config()"),LVo=o(` class
method.`),yVo=l(),QL=a("p"),xVo=o("This class cannot be instantiated directly using "),t_e=a("code"),$Vo=o("__init__()"),kVo=o(" (throws an error)."),SVo=l(),ft=a("div"),F(WL.$$.fragment),RVo=l(),a_e=a("p"),PVo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),BVo=l(),td=a("p"),IVo=o(`Note:
Loading a model from its configuration file does `),n_e=a("strong"),NVo=o("not"),qVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bX=a("a"),jVo=o("from_pretrained()"),DVo=o(" to load the model weights."),GVo=l(),F(Sb.$$.fragment),OVo=l(),ro=a("div"),F(HL.$$.fragment),VVo=l(),s_e=a("p"),XVo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),zVo=l(),ja=a("p"),QVo=o("The model class to instantiate is selected based on the "),l_e=a("code"),WVo=o("model_type"),HVo=o(` property of the config object (either
passed as an argument or loaded from `),i_e=a("code"),UVo=o("pretrained_model_name_or_path"),JVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d_e=a("code"),YVo=o("pretrained_model_name_or_path"),KVo=o(":"),ZVo=l(),Z=a("ul"),Rb=a("li"),c_e=a("strong"),eXo=o("albert"),oXo=o(" \u2014 "),vX=a("a"),rXo=o("AlbertForMultipleChoice"),tXo=o(" (ALBERT model)"),aXo=l(),Pb=a("li"),f_e=a("strong"),nXo=o("bert"),sXo=o(" \u2014 "),FX=a("a"),lXo=o("BertForMultipleChoice"),iXo=o(" (BERT model)"),dXo=l(),Bb=a("li"),m_e=a("strong"),cXo=o("big_bird"),fXo=o(" \u2014 "),TX=a("a"),mXo=o("BigBirdForMultipleChoice"),gXo=o(" (BigBird model)"),hXo=l(),Ib=a("li"),g_e=a("strong"),pXo=o("camembert"),_Xo=o(" \u2014 "),MX=a("a"),uXo=o("CamembertForMultipleChoice"),bXo=o(" (CamemBERT model)"),vXo=l(),Nb=a("li"),h_e=a("strong"),FXo=o("canine"),TXo=o(" \u2014 "),EX=a("a"),MXo=o("CanineForMultipleChoice"),EXo=o(" (CANINE model)"),CXo=l(),qb=a("li"),p_e=a("strong"),wXo=o("convbert"),AXo=o(" \u2014 "),CX=a("a"),LXo=o("ConvBertForMultipleChoice"),yXo=o(" (ConvBERT model)"),xXo=l(),jb=a("li"),__e=a("strong"),$Xo=o("data2vec-text"),kXo=o(" \u2014 "),wX=a("a"),SXo=o("Data2VecTextForMultipleChoice"),RXo=o(" (Data2VecText model)"),PXo=l(),Db=a("li"),u_e=a("strong"),BXo=o("deberta-v2"),IXo=o(" \u2014 "),AX=a("a"),NXo=o("DebertaV2ForMultipleChoice"),qXo=o(" (DeBERTa-v2 model)"),jXo=l(),Gb=a("li"),b_e=a("strong"),DXo=o("distilbert"),GXo=o(" \u2014 "),LX=a("a"),OXo=o("DistilBertForMultipleChoice"),VXo=o(" (DistilBERT model)"),XXo=l(),Ob=a("li"),v_e=a("strong"),zXo=o("electra"),QXo=o(" \u2014 "),yX=a("a"),WXo=o("ElectraForMultipleChoice"),HXo=o(" (ELECTRA model)"),UXo=l(),Vb=a("li"),F_e=a("strong"),JXo=o("flaubert"),YXo=o(" \u2014 "),xX=a("a"),KXo=o("FlaubertForMultipleChoice"),ZXo=o(" (FlauBERT model)"),ezo=l(),Xb=a("li"),T_e=a("strong"),ozo=o("fnet"),rzo=o(" \u2014 "),$X=a("a"),tzo=o("FNetForMultipleChoice"),azo=o(" (FNet model)"),nzo=l(),zb=a("li"),M_e=a("strong"),szo=o("funnel"),lzo=o(" \u2014 "),kX=a("a"),izo=o("FunnelForMultipleChoice"),dzo=o(" (Funnel Transformer model)"),czo=l(),Qb=a("li"),E_e=a("strong"),fzo=o("ibert"),mzo=o(" \u2014 "),SX=a("a"),gzo=o("IBertForMultipleChoice"),hzo=o(" (I-BERT model)"),pzo=l(),Wb=a("li"),C_e=a("strong"),_zo=o("longformer"),uzo=o(" \u2014 "),RX=a("a"),bzo=o("LongformerForMultipleChoice"),vzo=o(" (Longformer model)"),Fzo=l(),Hb=a("li"),w_e=a("strong"),Tzo=o("megatron-bert"),Mzo=o(" \u2014 "),PX=a("a"),Ezo=o("MegatronBertForMultipleChoice"),Czo=o(" (Megatron-BERT model)"),wzo=l(),Ub=a("li"),A_e=a("strong"),Azo=o("mobilebert"),Lzo=o(" \u2014 "),BX=a("a"),yzo=o("MobileBertForMultipleChoice"),xzo=o(" (MobileBERT model)"),$zo=l(),Jb=a("li"),L_e=a("strong"),kzo=o("mpnet"),Szo=o(" \u2014 "),IX=a("a"),Rzo=o("MPNetForMultipleChoice"),Pzo=o(" (MPNet model)"),Bzo=l(),Yb=a("li"),y_e=a("strong"),Izo=o("nezha"),Nzo=o(" \u2014 "),NX=a("a"),qzo=o("NezhaForMultipleChoice"),jzo=o(" (Nezha model)"),Dzo=l(),Kb=a("li"),x_e=a("strong"),Gzo=o("nystromformer"),Ozo=o(" \u2014 "),qX=a("a"),Vzo=o("NystromformerForMultipleChoice"),Xzo=o(" (Nystr\xF6mformer model)"),zzo=l(),Zb=a("li"),$_e=a("strong"),Qzo=o("qdqbert"),Wzo=o(" \u2014 "),jX=a("a"),Hzo=o("QDQBertForMultipleChoice"),Uzo=o(" (QDQBert model)"),Jzo=l(),ev=a("li"),k_e=a("strong"),Yzo=o("rembert"),Kzo=o(" \u2014 "),DX=a("a"),Zzo=o("RemBertForMultipleChoice"),eQo=o(" (RemBERT model)"),oQo=l(),ov=a("li"),S_e=a("strong"),rQo=o("roberta"),tQo=o(" \u2014 "),GX=a("a"),aQo=o("RobertaForMultipleChoice"),nQo=o(" (RoBERTa model)"),sQo=l(),rv=a("li"),R_e=a("strong"),lQo=o("roformer"),iQo=o(" \u2014 "),OX=a("a"),dQo=o("RoFormerForMultipleChoice"),cQo=o(" (RoFormer model)"),fQo=l(),tv=a("li"),P_e=a("strong"),mQo=o("squeezebert"),gQo=o(" \u2014 "),VX=a("a"),hQo=o("SqueezeBertForMultipleChoice"),pQo=o(" (SqueezeBERT model)"),_Qo=l(),av=a("li"),B_e=a("strong"),uQo=o("xlm"),bQo=o(" \u2014 "),XX=a("a"),vQo=o("XLMForMultipleChoice"),FQo=o(" (XLM model)"),TQo=l(),nv=a("li"),I_e=a("strong"),MQo=o("xlm-roberta"),EQo=o(" \u2014 "),zX=a("a"),CQo=o("XLMRobertaForMultipleChoice"),wQo=o(" (XLM-RoBERTa model)"),AQo=l(),sv=a("li"),N_e=a("strong"),LQo=o("xlm-roberta-xl"),yQo=o(" \u2014 "),QX=a("a"),xQo=o("XLMRobertaXLForMultipleChoice"),$Qo=o(" (XLM-RoBERTa-XL model)"),kQo=l(),lv=a("li"),q_e=a("strong"),SQo=o("xlnet"),RQo=o(" \u2014 "),WX=a("a"),PQo=o("XLNetForMultipleChoice"),BQo=o(" (XLNet model)"),IQo=l(),iv=a("li"),j_e=a("strong"),NQo=o("yoso"),qQo=o(" \u2014 "),HX=a("a"),jQo=o("YosoForMultipleChoice"),DQo=o(" (YOSO model)"),GQo=l(),dv=a("p"),OQo=o("The model is set in evaluation mode by default using "),D_e=a("code"),VQo=o("model.eval()"),XQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),G_e=a("code"),zQo=o("model.train()"),QQo=l(),F(cv.$$.fragment),mVe=l(),ad=a("h2"),fv=a("a"),O_e=a("span"),F(UL.$$.fragment),WQo=l(),V_e=a("span"),HQo=o("AutoModelForNextSentencePrediction"),gVe=l(),Io=a("div"),F(JL.$$.fragment),UQo=l(),nd=a("p"),JQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),UX=a("a"),YQo=o("from_pretrained()"),KQo=o(" class method or the "),JX=a("a"),ZQo=o("from_config()"),eWo=o(` class
method.`),oWo=l(),YL=a("p"),rWo=o("This class cannot be instantiated directly using "),X_e=a("code"),tWo=o("__init__()"),aWo=o(" (throws an error)."),nWo=l(),mt=a("div"),F(KL.$$.fragment),sWo=l(),z_e=a("p"),lWo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),iWo=l(),sd=a("p"),dWo=o(`Note:
Loading a model from its configuration file does `),Q_e=a("strong"),cWo=o("not"),fWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YX=a("a"),mWo=o("from_pretrained()"),gWo=o(" to load the model weights."),hWo=l(),F(mv.$$.fragment),pWo=l(),to=a("div"),F(ZL.$$.fragment),_Wo=l(),W_e=a("p"),uWo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),bWo=l(),Da=a("p"),vWo=o("The model class to instantiate is selected based on the "),H_e=a("code"),FWo=o("model_type"),TWo=o(` property of the config object (either
passed as an argument or loaded from `),U_e=a("code"),MWo=o("pretrained_model_name_or_path"),EWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J_e=a("code"),CWo=o("pretrained_model_name_or_path"),wWo=o(":"),AWo=l(),No=a("ul"),gv=a("li"),Y_e=a("strong"),LWo=o("bert"),yWo=o(" \u2014 "),KX=a("a"),xWo=o("BertForNextSentencePrediction"),$Wo=o(" (BERT model)"),kWo=l(),hv=a("li"),K_e=a("strong"),SWo=o("fnet"),RWo=o(" \u2014 "),ZX=a("a"),PWo=o("FNetForNextSentencePrediction"),BWo=o(" (FNet model)"),IWo=l(),pv=a("li"),Z_e=a("strong"),NWo=o("megatron-bert"),qWo=o(" \u2014 "),ez=a("a"),jWo=o("MegatronBertForNextSentencePrediction"),DWo=o(" (Megatron-BERT model)"),GWo=l(),_v=a("li"),eue=a("strong"),OWo=o("mobilebert"),VWo=o(" \u2014 "),oz=a("a"),XWo=o("MobileBertForNextSentencePrediction"),zWo=o(" (MobileBERT model)"),QWo=l(),uv=a("li"),oue=a("strong"),WWo=o("nezha"),HWo=o(" \u2014 "),rz=a("a"),UWo=o("NezhaForNextSentencePrediction"),JWo=o(" (Nezha model)"),YWo=l(),bv=a("li"),rue=a("strong"),KWo=o("qdqbert"),ZWo=o(" \u2014 "),tz=a("a"),eHo=o("QDQBertForNextSentencePrediction"),oHo=o(" (QDQBert model)"),rHo=l(),vv=a("p"),tHo=o("The model is set in evaluation mode by default using "),tue=a("code"),aHo=o("model.eval()"),nHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),aue=a("code"),sHo=o("model.train()"),lHo=l(),F(Fv.$$.fragment),hVe=l(),ld=a("h2"),Tv=a("a"),nue=a("span"),F(ey.$$.fragment),iHo=l(),sue=a("span"),dHo=o("AutoModelForTokenClassification"),pVe=l(),qo=a("div"),F(oy.$$.fragment),cHo=l(),id=a("p"),fHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),az=a("a"),mHo=o("from_pretrained()"),gHo=o(" class method or the "),nz=a("a"),hHo=o("from_config()"),pHo=o(` class
method.`),_Ho=l(),ry=a("p"),uHo=o("This class cannot be instantiated directly using "),lue=a("code"),bHo=o("__init__()"),vHo=o(" (throws an error)."),FHo=l(),gt=a("div"),F(ty.$$.fragment),THo=l(),iue=a("p"),MHo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),EHo=l(),dd=a("p"),CHo=o(`Note:
Loading a model from its configuration file does `),due=a("strong"),wHo=o("not"),AHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sz=a("a"),LHo=o("from_pretrained()"),yHo=o(" to load the model weights."),xHo=l(),F(Mv.$$.fragment),$Ho=l(),ao=a("div"),F(ay.$$.fragment),kHo=l(),cue=a("p"),SHo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),RHo=l(),Ga=a("p"),PHo=o("The model class to instantiate is selected based on the "),fue=a("code"),BHo=o("model_type"),IHo=o(` property of the config object (either
passed as an argument or loaded from `),mue=a("code"),NHo=o("pretrained_model_name_or_path"),qHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gue=a("code"),jHo=o("pretrained_model_name_or_path"),DHo=o(":"),GHo=l(),U=a("ul"),Ev=a("li"),hue=a("strong"),OHo=o("albert"),VHo=o(" \u2014 "),lz=a("a"),XHo=o("AlbertForTokenClassification"),zHo=o(" (ALBERT model)"),QHo=l(),Cv=a("li"),pue=a("strong"),WHo=o("bert"),HHo=o(" \u2014 "),iz=a("a"),UHo=o("BertForTokenClassification"),JHo=o(" (BERT model)"),YHo=l(),wv=a("li"),_ue=a("strong"),KHo=o("big_bird"),ZHo=o(" \u2014 "),dz=a("a"),eUo=o("BigBirdForTokenClassification"),oUo=o(" (BigBird model)"),rUo=l(),Av=a("li"),uue=a("strong"),tUo=o("bloom"),aUo=o(" \u2014 "),cz=a("a"),nUo=o("BloomForTokenClassification"),sUo=o(" (BLOOM model)"),lUo=l(),Lv=a("li"),bue=a("strong"),iUo=o("camembert"),dUo=o(" \u2014 "),fz=a("a"),cUo=o("CamembertForTokenClassification"),fUo=o(" (CamemBERT model)"),mUo=l(),yv=a("li"),vue=a("strong"),gUo=o("canine"),hUo=o(" \u2014 "),mz=a("a"),pUo=o("CanineForTokenClassification"),_Uo=o(" (CANINE model)"),uUo=l(),xv=a("li"),Fue=a("strong"),bUo=o("convbert"),vUo=o(" \u2014 "),gz=a("a"),FUo=o("ConvBertForTokenClassification"),TUo=o(" (ConvBERT model)"),MUo=l(),$v=a("li"),Tue=a("strong"),EUo=o("data2vec-text"),CUo=o(" \u2014 "),hz=a("a"),wUo=o("Data2VecTextForTokenClassification"),AUo=o(" (Data2VecText model)"),LUo=l(),kv=a("li"),Mue=a("strong"),yUo=o("deberta"),xUo=o(" \u2014 "),pz=a("a"),$Uo=o("DebertaForTokenClassification"),kUo=o(" (DeBERTa model)"),SUo=l(),Sv=a("li"),Eue=a("strong"),RUo=o("deberta-v2"),PUo=o(" \u2014 "),_z=a("a"),BUo=o("DebertaV2ForTokenClassification"),IUo=o(" (DeBERTa-v2 model)"),NUo=l(),Rv=a("li"),Cue=a("strong"),qUo=o("distilbert"),jUo=o(" \u2014 "),uz=a("a"),DUo=o("DistilBertForTokenClassification"),GUo=o(" (DistilBERT model)"),OUo=l(),Pv=a("li"),wue=a("strong"),VUo=o("electra"),XUo=o(" \u2014 "),bz=a("a"),zUo=o("ElectraForTokenClassification"),QUo=o(" (ELECTRA model)"),WUo=l(),Bv=a("li"),Aue=a("strong"),HUo=o("flaubert"),UUo=o(" \u2014 "),vz=a("a"),JUo=o("FlaubertForTokenClassification"),YUo=o(" (FlauBERT model)"),KUo=l(),Iv=a("li"),Lue=a("strong"),ZUo=o("fnet"),eJo=o(" \u2014 "),Fz=a("a"),oJo=o("FNetForTokenClassification"),rJo=o(" (FNet model)"),tJo=l(),Nv=a("li"),yue=a("strong"),aJo=o("funnel"),nJo=o(" \u2014 "),Tz=a("a"),sJo=o("FunnelForTokenClassification"),lJo=o(" (Funnel Transformer model)"),iJo=l(),qv=a("li"),xue=a("strong"),dJo=o("gpt2"),cJo=o(" \u2014 "),Mz=a("a"),fJo=o("GPT2ForTokenClassification"),mJo=o(" (OpenAI GPT-2 model)"),gJo=l(),jv=a("li"),$ue=a("strong"),hJo=o("ibert"),pJo=o(" \u2014 "),Ez=a("a"),_Jo=o("IBertForTokenClassification"),uJo=o(" (I-BERT model)"),bJo=l(),Dv=a("li"),kue=a("strong"),vJo=o("layoutlm"),FJo=o(" \u2014 "),Cz=a("a"),TJo=o("LayoutLMForTokenClassification"),MJo=o(" (LayoutLM model)"),EJo=l(),Gv=a("li"),Sue=a("strong"),CJo=o("layoutlmv2"),wJo=o(" \u2014 "),wz=a("a"),AJo=o("LayoutLMv2ForTokenClassification"),LJo=o(" (LayoutLMv2 model)"),yJo=l(),Ov=a("li"),Rue=a("strong"),xJo=o("layoutlmv3"),$Jo=o(" \u2014 "),Az=a("a"),kJo=o("LayoutLMv3ForTokenClassification"),SJo=o(" (LayoutLMv3 model)"),RJo=l(),Vv=a("li"),Pue=a("strong"),PJo=o("longformer"),BJo=o(" \u2014 "),Lz=a("a"),IJo=o("LongformerForTokenClassification"),NJo=o(" (Longformer model)"),qJo=l(),Xv=a("li"),Bue=a("strong"),jJo=o("megatron-bert"),DJo=o(" \u2014 "),yz=a("a"),GJo=o("MegatronBertForTokenClassification"),OJo=o(" (Megatron-BERT model)"),VJo=l(),zv=a("li"),Iue=a("strong"),XJo=o("mobilebert"),zJo=o(" \u2014 "),xz=a("a"),QJo=o("MobileBertForTokenClassification"),WJo=o(" (MobileBERT model)"),HJo=l(),Qv=a("li"),Nue=a("strong"),UJo=o("mpnet"),JJo=o(" \u2014 "),$z=a("a"),YJo=o("MPNetForTokenClassification"),KJo=o(" (MPNet model)"),ZJo=l(),Wv=a("li"),que=a("strong"),eYo=o("nezha"),oYo=o(" \u2014 "),kz=a("a"),rYo=o("NezhaForTokenClassification"),tYo=o(" (Nezha model)"),aYo=l(),Hv=a("li"),jue=a("strong"),nYo=o("nystromformer"),sYo=o(" \u2014 "),Sz=a("a"),lYo=o("NystromformerForTokenClassification"),iYo=o(" (Nystr\xF6mformer model)"),dYo=l(),Uv=a("li"),Due=a("strong"),cYo=o("qdqbert"),fYo=o(" \u2014 "),Rz=a("a"),mYo=o("QDQBertForTokenClassification"),gYo=o(" (QDQBert model)"),hYo=l(),Jv=a("li"),Gue=a("strong"),pYo=o("rembert"),_Yo=o(" \u2014 "),Pz=a("a"),uYo=o("RemBertForTokenClassification"),bYo=o(" (RemBERT model)"),vYo=l(),Yv=a("li"),Oue=a("strong"),FYo=o("roberta"),TYo=o(" \u2014 "),Bz=a("a"),MYo=o("RobertaForTokenClassification"),EYo=o(" (RoBERTa model)"),CYo=l(),Kv=a("li"),Vue=a("strong"),wYo=o("roformer"),AYo=o(" \u2014 "),Iz=a("a"),LYo=o("RoFormerForTokenClassification"),yYo=o(" (RoFormer model)"),xYo=l(),Zv=a("li"),Xue=a("strong"),$Yo=o("squeezebert"),kYo=o(" \u2014 "),Nz=a("a"),SYo=o("SqueezeBertForTokenClassification"),RYo=o(" (SqueezeBERT model)"),PYo=l(),eF=a("li"),zue=a("strong"),BYo=o("xlm"),IYo=o(" \u2014 "),qz=a("a"),NYo=o("XLMForTokenClassification"),qYo=o(" (XLM model)"),jYo=l(),oF=a("li"),Que=a("strong"),DYo=o("xlm-roberta"),GYo=o(" \u2014 "),jz=a("a"),OYo=o("XLMRobertaForTokenClassification"),VYo=o(" (XLM-RoBERTa model)"),XYo=l(),rF=a("li"),Wue=a("strong"),zYo=o("xlm-roberta-xl"),QYo=o(" \u2014 "),Dz=a("a"),WYo=o("XLMRobertaXLForTokenClassification"),HYo=o(" (XLM-RoBERTa-XL model)"),UYo=l(),tF=a("li"),Hue=a("strong"),JYo=o("xlnet"),YYo=o(" \u2014 "),Gz=a("a"),KYo=o("XLNetForTokenClassification"),ZYo=o(" (XLNet model)"),eKo=l(),aF=a("li"),Uue=a("strong"),oKo=o("yoso"),rKo=o(" \u2014 "),Oz=a("a"),tKo=o("YosoForTokenClassification"),aKo=o(" (YOSO model)"),nKo=l(),nF=a("p"),sKo=o("The model is set in evaluation mode by default using "),Jue=a("code"),lKo=o("model.eval()"),iKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yue=a("code"),dKo=o("model.train()"),cKo=l(),F(sF.$$.fragment),_Ve=l(),cd=a("h2"),lF=a("a"),Kue=a("span"),F(ny.$$.fragment),fKo=l(),Zue=a("span"),mKo=o("AutoModelForQuestionAnswering"),uVe=l(),jo=a("div"),F(sy.$$.fragment),gKo=l(),fd=a("p"),hKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Vz=a("a"),pKo=o("from_pretrained()"),_Ko=o(" class method or the "),Xz=a("a"),uKo=o("from_config()"),bKo=o(` class
method.`),vKo=l(),ly=a("p"),FKo=o("This class cannot be instantiated directly using "),e7e=a("code"),TKo=o("__init__()"),MKo=o(" (throws an error)."),EKo=l(),ht=a("div"),F(iy.$$.fragment),CKo=l(),o7e=a("p"),wKo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),AKo=l(),md=a("p"),LKo=o(`Note:
Loading a model from its configuration file does `),r7e=a("strong"),yKo=o("not"),xKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zz=a("a"),$Ko=o("from_pretrained()"),kKo=o(" to load the model weights."),SKo=l(),F(iF.$$.fragment),RKo=l(),no=a("div"),F(dy.$$.fragment),PKo=l(),t7e=a("p"),BKo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),IKo=l(),Oa=a("p"),NKo=o("The model class to instantiate is selected based on the "),a7e=a("code"),qKo=o("model_type"),jKo=o(` property of the config object (either
passed as an argument or loaded from `),n7e=a("code"),DKo=o("pretrained_model_name_or_path"),GKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s7e=a("code"),OKo=o("pretrained_model_name_or_path"),VKo=o(":"),XKo=l(),V=a("ul"),dF=a("li"),l7e=a("strong"),zKo=o("albert"),QKo=o(" \u2014 "),Qz=a("a"),WKo=o("AlbertForQuestionAnswering"),HKo=o(" (ALBERT model)"),UKo=l(),cF=a("li"),i7e=a("strong"),JKo=o("bart"),YKo=o(" \u2014 "),Wz=a("a"),KKo=o("BartForQuestionAnswering"),ZKo=o(" (BART model)"),eZo=l(),fF=a("li"),d7e=a("strong"),oZo=o("bert"),rZo=o(" \u2014 "),Hz=a("a"),tZo=o("BertForQuestionAnswering"),aZo=o(" (BERT model)"),nZo=l(),mF=a("li"),c7e=a("strong"),sZo=o("big_bird"),lZo=o(" \u2014 "),Uz=a("a"),iZo=o("BigBirdForQuestionAnswering"),dZo=o(" (BigBird model)"),cZo=l(),gF=a("li"),f7e=a("strong"),fZo=o("bigbird_pegasus"),mZo=o(" \u2014 "),Jz=a("a"),gZo=o("BigBirdPegasusForQuestionAnswering"),hZo=o(" (BigBird-Pegasus model)"),pZo=l(),hF=a("li"),m7e=a("strong"),_Zo=o("camembert"),uZo=o(" \u2014 "),Yz=a("a"),bZo=o("CamembertForQuestionAnswering"),vZo=o(" (CamemBERT model)"),FZo=l(),pF=a("li"),g7e=a("strong"),TZo=o("canine"),MZo=o(" \u2014 "),Kz=a("a"),EZo=o("CanineForQuestionAnswering"),CZo=o(" (CANINE model)"),wZo=l(),_F=a("li"),h7e=a("strong"),AZo=o("convbert"),LZo=o(" \u2014 "),Zz=a("a"),yZo=o("ConvBertForQuestionAnswering"),xZo=o(" (ConvBERT model)"),$Zo=l(),uF=a("li"),p7e=a("strong"),kZo=o("data2vec-text"),SZo=o(" \u2014 "),eQ=a("a"),RZo=o("Data2VecTextForQuestionAnswering"),PZo=o(" (Data2VecText model)"),BZo=l(),bF=a("li"),_7e=a("strong"),IZo=o("deberta"),NZo=o(" \u2014 "),oQ=a("a"),qZo=o("DebertaForQuestionAnswering"),jZo=o(" (DeBERTa model)"),DZo=l(),vF=a("li"),u7e=a("strong"),GZo=o("deberta-v2"),OZo=o(" \u2014 "),rQ=a("a"),VZo=o("DebertaV2ForQuestionAnswering"),XZo=o(" (DeBERTa-v2 model)"),zZo=l(),FF=a("li"),b7e=a("strong"),QZo=o("distilbert"),WZo=o(" \u2014 "),tQ=a("a"),HZo=o("DistilBertForQuestionAnswering"),UZo=o(" (DistilBERT model)"),JZo=l(),TF=a("li"),v7e=a("strong"),YZo=o("electra"),KZo=o(" \u2014 "),aQ=a("a"),ZZo=o("ElectraForQuestionAnswering"),eer=o(" (ELECTRA model)"),oer=l(),MF=a("li"),F7e=a("strong"),rer=o("flaubert"),ter=o(" \u2014 "),nQ=a("a"),aer=o("FlaubertForQuestionAnsweringSimple"),ner=o(" (FlauBERT model)"),ser=l(),EF=a("li"),T7e=a("strong"),ler=o("fnet"),ier=o(" \u2014 "),sQ=a("a"),der=o("FNetForQuestionAnswering"),cer=o(" (FNet model)"),fer=l(),CF=a("li"),M7e=a("strong"),mer=o("funnel"),ger=o(" \u2014 "),lQ=a("a"),her=o("FunnelForQuestionAnswering"),per=o(" (Funnel Transformer model)"),_er=l(),wF=a("li"),E7e=a("strong"),uer=o("gptj"),ber=o(" \u2014 "),iQ=a("a"),ver=o("GPTJForQuestionAnswering"),Fer=o(" (GPT-J model)"),Ter=l(),AF=a("li"),C7e=a("strong"),Mer=o("ibert"),Eer=o(" \u2014 "),dQ=a("a"),Cer=o("IBertForQuestionAnswering"),wer=o(" (I-BERT model)"),Aer=l(),LF=a("li"),w7e=a("strong"),Ler=o("layoutlmv2"),yer=o(" \u2014 "),cQ=a("a"),xer=o("LayoutLMv2ForQuestionAnswering"),$er=o(" (LayoutLMv2 model)"),ker=l(),yF=a("li"),A7e=a("strong"),Ser=o("layoutlmv3"),Rer=o(" \u2014 "),fQ=a("a"),Per=o("LayoutLMv3ForQuestionAnswering"),Ber=o(" (LayoutLMv3 model)"),Ier=l(),xF=a("li"),L7e=a("strong"),Ner=o("led"),qer=o(" \u2014 "),mQ=a("a"),jer=o("LEDForQuestionAnswering"),Der=o(" (LED model)"),Ger=l(),$F=a("li"),y7e=a("strong"),Oer=o("longformer"),Ver=o(" \u2014 "),gQ=a("a"),Xer=o("LongformerForQuestionAnswering"),zer=o(" (Longformer model)"),Qer=l(),kF=a("li"),x7e=a("strong"),Wer=o("lxmert"),Her=o(" \u2014 "),hQ=a("a"),Uer=o("LxmertForQuestionAnswering"),Jer=o(" (LXMERT model)"),Yer=l(),SF=a("li"),$7e=a("strong"),Ker=o("mbart"),Zer=o(" \u2014 "),pQ=a("a"),eor=o("MBartForQuestionAnswering"),oor=o(" (mBART model)"),ror=l(),RF=a("li"),k7e=a("strong"),tor=o("megatron-bert"),aor=o(" \u2014 "),_Q=a("a"),nor=o("MegatronBertForQuestionAnswering"),sor=o(" (Megatron-BERT model)"),lor=l(),PF=a("li"),S7e=a("strong"),ior=o("mobilebert"),dor=o(" \u2014 "),uQ=a("a"),cor=o("MobileBertForQuestionAnswering"),mor=o(" (MobileBERT model)"),gor=l(),BF=a("li"),R7e=a("strong"),hor=o("mpnet"),por=o(" \u2014 "),bQ=a("a"),_or=o("MPNetForQuestionAnswering"),uor=o(" (MPNet model)"),bor=l(),IF=a("li"),P7e=a("strong"),vor=o("mvp"),For=o(" \u2014 "),vQ=a("a"),Tor=o("MvpForQuestionAnswering"),Mor=o(" (MVP model)"),Eor=l(),NF=a("li"),B7e=a("strong"),Cor=o("nezha"),wor=o(" \u2014 "),FQ=a("a"),Aor=o("NezhaForQuestionAnswering"),Lor=o(" (Nezha model)"),yor=l(),qF=a("li"),I7e=a("strong"),xor=o("nystromformer"),$or=o(" \u2014 "),TQ=a("a"),kor=o("NystromformerForQuestionAnswering"),Sor=o(" (Nystr\xF6mformer model)"),Ror=l(),jF=a("li"),N7e=a("strong"),Por=o("qdqbert"),Bor=o(" \u2014 "),MQ=a("a"),Ior=o("QDQBertForQuestionAnswering"),Nor=o(" (QDQBert model)"),qor=l(),DF=a("li"),q7e=a("strong"),jor=o("reformer"),Dor=o(" \u2014 "),EQ=a("a"),Gor=o("ReformerForQuestionAnswering"),Oor=o(" (Reformer model)"),Vor=l(),GF=a("li"),j7e=a("strong"),Xor=o("rembert"),zor=o(" \u2014 "),CQ=a("a"),Qor=o("RemBertForQuestionAnswering"),Wor=o(" (RemBERT model)"),Hor=l(),OF=a("li"),D7e=a("strong"),Uor=o("roberta"),Jor=o(" \u2014 "),wQ=a("a"),Yor=o("RobertaForQuestionAnswering"),Kor=o(" (RoBERTa model)"),Zor=l(),VF=a("li"),G7e=a("strong"),err=o("roformer"),orr=o(" \u2014 "),AQ=a("a"),rrr=o("RoFormerForQuestionAnswering"),trr=o(" (RoFormer model)"),arr=l(),XF=a("li"),O7e=a("strong"),nrr=o("splinter"),srr=o(" \u2014 "),LQ=a("a"),lrr=o("SplinterForQuestionAnswering"),irr=o(" (Splinter model)"),drr=l(),zF=a("li"),V7e=a("strong"),crr=o("squeezebert"),frr=o(" \u2014 "),yQ=a("a"),mrr=o("SqueezeBertForQuestionAnswering"),grr=o(" (SqueezeBERT model)"),hrr=l(),QF=a("li"),X7e=a("strong"),prr=o("xlm"),_rr=o(" \u2014 "),xQ=a("a"),urr=o("XLMForQuestionAnsweringSimple"),brr=o(" (XLM model)"),vrr=l(),WF=a("li"),z7e=a("strong"),Frr=o("xlm-roberta"),Trr=o(" \u2014 "),$Q=a("a"),Mrr=o("XLMRobertaForQuestionAnswering"),Err=o(" (XLM-RoBERTa model)"),Crr=l(),HF=a("li"),Q7e=a("strong"),wrr=o("xlm-roberta-xl"),Arr=o(" \u2014 "),kQ=a("a"),Lrr=o("XLMRobertaXLForQuestionAnswering"),yrr=o(" (XLM-RoBERTa-XL model)"),xrr=l(),UF=a("li"),W7e=a("strong"),$rr=o("xlnet"),krr=o(" \u2014 "),SQ=a("a"),Srr=o("XLNetForQuestionAnsweringSimple"),Rrr=o(" (XLNet model)"),Prr=l(),JF=a("li"),H7e=a("strong"),Brr=o("yoso"),Irr=o(" \u2014 "),RQ=a("a"),Nrr=o("YosoForQuestionAnswering"),qrr=o(" (YOSO model)"),jrr=l(),YF=a("p"),Drr=o("The model is set in evaluation mode by default using "),U7e=a("code"),Grr=o("model.eval()"),Orr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),J7e=a("code"),Vrr=o("model.train()"),Xrr=l(),F(KF.$$.fragment),bVe=l(),gd=a("h2"),ZF=a("a"),Y7e=a("span"),F(cy.$$.fragment),zrr=l(),K7e=a("span"),Qrr=o("AutoModelForTableQuestionAnswering"),vVe=l(),Do=a("div"),F(fy.$$.fragment),Wrr=l(),hd=a("p"),Hrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),PQ=a("a"),Urr=o("from_pretrained()"),Jrr=o(" class method or the "),BQ=a("a"),Yrr=o("from_config()"),Krr=o(` class
method.`),Zrr=l(),my=a("p"),etr=o("This class cannot be instantiated directly using "),Z7e=a("code"),otr=o("__init__()"),rtr=o(" (throws an error)."),ttr=l(),pt=a("div"),F(gy.$$.fragment),atr=l(),e1e=a("p"),ntr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),str=l(),pd=a("p"),ltr=o(`Note:
Loading a model from its configuration file does `),o1e=a("strong"),itr=o("not"),dtr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IQ=a("a"),ctr=o("from_pretrained()"),ftr=o(" to load the model weights."),mtr=l(),F(eT.$$.fragment),gtr=l(),so=a("div"),F(hy.$$.fragment),htr=l(),r1e=a("p"),ptr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),_tr=l(),Va=a("p"),utr=o("The model class to instantiate is selected based on the "),t1e=a("code"),btr=o("model_type"),vtr=o(` property of the config object (either
passed as an argument or loaded from `),a1e=a("code"),Ftr=o("pretrained_model_name_or_path"),Ttr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n1e=a("code"),Mtr=o("pretrained_model_name_or_path"),Etr=o(":"),Ctr=l(),s1e=a("ul"),oT=a("li"),l1e=a("strong"),wtr=o("tapas"),Atr=o(" \u2014 "),NQ=a("a"),Ltr=o("TapasForQuestionAnswering"),ytr=o(" (TAPAS model)"),xtr=l(),rT=a("p"),$tr=o("The model is set in evaluation mode by default using "),i1e=a("code"),ktr=o("model.eval()"),Str=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),d1e=a("code"),Rtr=o("model.train()"),Ptr=l(),F(tT.$$.fragment),FVe=l(),_d=a("h2"),aT=a("a"),c1e=a("span"),F(py.$$.fragment),Btr=l(),f1e=a("span"),Itr=o("AutoModelForImageClassification"),TVe=l(),Go=a("div"),F(_y.$$.fragment),Ntr=l(),ud=a("p"),qtr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),qQ=a("a"),jtr=o("from_pretrained()"),Dtr=o(" class method or the "),jQ=a("a"),Gtr=o("from_config()"),Otr=o(` class
method.`),Vtr=l(),uy=a("p"),Xtr=o("This class cannot be instantiated directly using "),m1e=a("code"),ztr=o("__init__()"),Qtr=o(" (throws an error)."),Wtr=l(),_t=a("div"),F(by.$$.fragment),Htr=l(),g1e=a("p"),Utr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Jtr=l(),bd=a("p"),Ytr=o(`Note:
Loading a model from its configuration file does `),h1e=a("strong"),Ktr=o("not"),Ztr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DQ=a("a"),ear=o("from_pretrained()"),oar=o(" to load the model weights."),rar=l(),F(nT.$$.fragment),tar=l(),lo=a("div"),F(vy.$$.fragment),aar=l(),p1e=a("p"),nar=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),sar=l(),Xa=a("p"),lar=o("The model class to instantiate is selected based on the "),_1e=a("code"),iar=o("model_type"),dar=o(` property of the config object (either
passed as an argument or loaded from `),u1e=a("code"),car=o("pretrained_model_name_or_path"),far=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b1e=a("code"),mar=o("pretrained_model_name_or_path"),gar=o(":"),har=l(),Fe=a("ul"),sT=a("li"),v1e=a("strong"),par=o("beit"),_ar=o(" \u2014 "),GQ=a("a"),uar=o("BeitForImageClassification"),bar=o(" (BEiT model)"),Far=l(),lT=a("li"),F1e=a("strong"),Tar=o("convnext"),Mar=o(" \u2014 "),OQ=a("a"),Ear=o("ConvNextForImageClassification"),Car=o(" (ConvNeXT model)"),war=l(),iT=a("li"),T1e=a("strong"),Aar=o("cvt"),Lar=o(" \u2014 "),VQ=a("a"),yar=o("CvtForImageClassification"),xar=o(" (CvT model)"),$ar=l(),dT=a("li"),M1e=a("strong"),kar=o("data2vec-vision"),Sar=o(" \u2014 "),XQ=a("a"),Rar=o("Data2VecVisionForImageClassification"),Par=o(" (Data2VecVision model)"),Bar=l(),Qs=a("li"),E1e=a("strong"),Iar=o("deit"),Nar=o(" \u2014 "),zQ=a("a"),qar=o("DeiTForImageClassification"),jar=o(" or "),QQ=a("a"),Dar=o("DeiTForImageClassificationWithTeacher"),Gar=o(" (DeiT model)"),Oar=l(),cT=a("li"),C1e=a("strong"),Var=o("imagegpt"),Xar=o(" \u2014 "),WQ=a("a"),zar=o("ImageGPTForImageClassification"),Qar=o(" (ImageGPT model)"),War=l(),Ws=a("li"),w1e=a("strong"),Har=o("levit"),Uar=o(" \u2014 "),HQ=a("a"),Jar=o("LevitForImageClassification"),Yar=o(" or "),UQ=a("a"),Kar=o("LevitForImageClassificationWithTeacher"),Zar=o(" (LeViT model)"),enr=l(),ut=a("li"),A1e=a("strong"),onr=o("perceiver"),rnr=o(" \u2014 "),JQ=a("a"),tnr=o("PerceiverForImageClassificationLearned"),anr=o(" or "),YQ=a("a"),nnr=o("PerceiverForImageClassificationFourier"),snr=o(" or "),KQ=a("a"),lnr=o("PerceiverForImageClassificationConvProcessing"),inr=o(" (Perceiver model)"),dnr=l(),fT=a("li"),L1e=a("strong"),cnr=o("poolformer"),fnr=o(" \u2014 "),ZQ=a("a"),mnr=o("PoolFormerForImageClassification"),gnr=o(" (PoolFormer model)"),hnr=l(),mT=a("li"),y1e=a("strong"),pnr=o("regnet"),_nr=o(" \u2014 "),eW=a("a"),unr=o("RegNetForImageClassification"),bnr=o(" (RegNet model)"),vnr=l(),gT=a("li"),x1e=a("strong"),Fnr=o("resnet"),Tnr=o(" \u2014 "),oW=a("a"),Mnr=o("ResNetForImageClassification"),Enr=o(" (ResNet model)"),Cnr=l(),hT=a("li"),$1e=a("strong"),wnr=o("segformer"),Anr=o(" \u2014 "),rW=a("a"),Lnr=o("SegformerForImageClassification"),ynr=o(" (SegFormer model)"),xnr=l(),pT=a("li"),k1e=a("strong"),$nr=o("swin"),knr=o(" \u2014 "),tW=a("a"),Snr=o("SwinForImageClassification"),Rnr=o(" (Swin Transformer model)"),Pnr=l(),_T=a("li"),S1e=a("strong"),Bnr=o("van"),Inr=o(" \u2014 "),aW=a("a"),Nnr=o("VanForImageClassification"),qnr=o(" (VAN model)"),jnr=l(),uT=a("li"),R1e=a("strong"),Dnr=o("vit"),Gnr=o(" \u2014 "),nW=a("a"),Onr=o("ViTForImageClassification"),Vnr=o(" (ViT model)"),Xnr=l(),bT=a("p"),znr=o("The model is set in evaluation mode by default using "),P1e=a("code"),Qnr=o("model.eval()"),Wnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),B1e=a("code"),Hnr=o("model.train()"),Unr=l(),F(vT.$$.fragment),MVe=l(),vd=a("h2"),FT=a("a"),I1e=a("span"),F(Fy.$$.fragment),Jnr=l(),N1e=a("span"),Ynr=o("AutoModelForVision2Seq"),EVe=l(),Oo=a("div"),F(Ty.$$.fragment),Knr=l(),Fd=a("p"),Znr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),sW=a("a"),esr=o("from_pretrained()"),osr=o(" class method or the "),lW=a("a"),rsr=o("from_config()"),tsr=o(` class
method.`),asr=l(),My=a("p"),nsr=o("This class cannot be instantiated directly using "),q1e=a("code"),ssr=o("__init__()"),lsr=o(" (throws an error)."),isr=l(),bt=a("div"),F(Ey.$$.fragment),dsr=l(),j1e=a("p"),csr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),fsr=l(),Td=a("p"),msr=o(`Note:
Loading a model from its configuration file does `),D1e=a("strong"),gsr=o("not"),hsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iW=a("a"),psr=o("from_pretrained()"),_sr=o(" to load the model weights."),usr=l(),F(TT.$$.fragment),bsr=l(),io=a("div"),F(Cy.$$.fragment),vsr=l(),G1e=a("p"),Fsr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Tsr=l(),za=a("p"),Msr=o("The model class to instantiate is selected based on the "),O1e=a("code"),Esr=o("model_type"),Csr=o(` property of the config object (either
passed as an argument or loaded from `),V1e=a("code"),wsr=o("pretrained_model_name_or_path"),Asr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X1e=a("code"),Lsr=o("pretrained_model_name_or_path"),ysr=o(":"),xsr=l(),z1e=a("ul"),MT=a("li"),Q1e=a("strong"),$sr=o("vision-encoder-decoder"),ksr=o(" \u2014 "),dW=a("a"),Ssr=o("VisionEncoderDecoderModel"),Rsr=o(" (Vision Encoder decoder model)"),Psr=l(),ET=a("p"),Bsr=o("The model is set in evaluation mode by default using "),W1e=a("code"),Isr=o("model.eval()"),Nsr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),H1e=a("code"),qsr=o("model.train()"),jsr=l(),F(CT.$$.fragment),CVe=l(),Md=a("h2"),wT=a("a"),U1e=a("span"),F(wy.$$.fragment),Dsr=l(),J1e=a("span"),Gsr=o("AutoModelForVisualQuestionAnswering"),wVe=l(),Vo=a("div"),F(Ay.$$.fragment),Osr=l(),Ed=a("p"),Vsr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),cW=a("a"),Xsr=o("from_pretrained()"),zsr=o(" class method or the "),fW=a("a"),Qsr=o("from_config()"),Wsr=o(` class
method.`),Hsr=l(),Ly=a("p"),Usr=o("This class cannot be instantiated directly using "),Y1e=a("code"),Jsr=o("__init__()"),Ysr=o(" (throws an error)."),Ksr=l(),vt=a("div"),F(yy.$$.fragment),Zsr=l(),K1e=a("p"),elr=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),olr=l(),Cd=a("p"),rlr=o(`Note:
Loading a model from its configuration file does `),Z1e=a("strong"),tlr=o("not"),alr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mW=a("a"),nlr=o("from_pretrained()"),slr=o(" to load the model weights."),llr=l(),F(AT.$$.fragment),ilr=l(),co=a("div"),F(xy.$$.fragment),dlr=l(),e2e=a("p"),clr=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),flr=l(),Qa=a("p"),mlr=o("The model class to instantiate is selected based on the "),o2e=a("code"),glr=o("model_type"),hlr=o(` property of the config object (either
passed as an argument or loaded from `),r2e=a("code"),plr=o("pretrained_model_name_or_path"),_lr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t2e=a("code"),ulr=o("pretrained_model_name_or_path"),blr=o(":"),vlr=l(),a2e=a("ul"),LT=a("li"),n2e=a("strong"),Flr=o("vilt"),Tlr=o(" \u2014 "),gW=a("a"),Mlr=o("ViltForQuestionAnswering"),Elr=o(" (ViLT model)"),Clr=l(),yT=a("p"),wlr=o("The model is set in evaluation mode by default using "),s2e=a("code"),Alr=o("model.eval()"),Llr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),l2e=a("code"),ylr=o("model.train()"),xlr=l(),F(xT.$$.fragment),AVe=l(),wd=a("h2"),$T=a("a"),i2e=a("span"),F($y.$$.fragment),$lr=l(),d2e=a("span"),klr=o("AutoModelForAudioClassification"),LVe=l(),Xo=a("div"),F(ky.$$.fragment),Slr=l(),Ad=a("p"),Rlr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),hW=a("a"),Plr=o("from_pretrained()"),Blr=o(" class method or the "),pW=a("a"),Ilr=o("from_config()"),Nlr=o(` class
method.`),qlr=l(),Sy=a("p"),jlr=o("This class cannot be instantiated directly using "),c2e=a("code"),Dlr=o("__init__()"),Glr=o(" (throws an error)."),Olr=l(),Ft=a("div"),F(Ry.$$.fragment),Vlr=l(),f2e=a("p"),Xlr=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),zlr=l(),Ld=a("p"),Qlr=o(`Note:
Loading a model from its configuration file does `),m2e=a("strong"),Wlr=o("not"),Hlr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_W=a("a"),Ulr=o("from_pretrained()"),Jlr=o(" to load the model weights."),Ylr=l(),F(kT.$$.fragment),Klr=l(),fo=a("div"),F(Py.$$.fragment),Zlr=l(),g2e=a("p"),eir=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),oir=l(),Wa=a("p"),rir=o("The model class to instantiate is selected based on the "),h2e=a("code"),tir=o("model_type"),air=o(` property of the config object (either
passed as an argument or loaded from `),p2e=a("code"),nir=o("pretrained_model_name_or_path"),sir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_2e=a("code"),lir=o("pretrained_model_name_or_path"),iir=o(":"),dir=l(),Pe=a("ul"),ST=a("li"),u2e=a("strong"),cir=o("data2vec-audio"),fir=o(" \u2014 "),uW=a("a"),mir=o("Data2VecAudioForSequenceClassification"),gir=o(" (Data2VecAudio model)"),hir=l(),RT=a("li"),b2e=a("strong"),pir=o("hubert"),_ir=o(" \u2014 "),bW=a("a"),uir=o("HubertForSequenceClassification"),bir=o(" (Hubert model)"),vir=l(),PT=a("li"),v2e=a("strong"),Fir=o("sew"),Tir=o(" \u2014 "),vW=a("a"),Mir=o("SEWForSequenceClassification"),Eir=o(" (SEW model)"),Cir=l(),BT=a("li"),F2e=a("strong"),wir=o("sew-d"),Air=o(" \u2014 "),FW=a("a"),Lir=o("SEWDForSequenceClassification"),yir=o(" (SEW-D model)"),xir=l(),IT=a("li"),T2e=a("strong"),$ir=o("unispeech"),kir=o(" \u2014 "),TW=a("a"),Sir=o("UniSpeechForSequenceClassification"),Rir=o(" (UniSpeech model)"),Pir=l(),NT=a("li"),M2e=a("strong"),Bir=o("unispeech-sat"),Iir=o(" \u2014 "),MW=a("a"),Nir=o("UniSpeechSatForSequenceClassification"),qir=o(" (UniSpeechSat model)"),jir=l(),qT=a("li"),E2e=a("strong"),Dir=o("wav2vec2"),Gir=o(" \u2014 "),EW=a("a"),Oir=o("Wav2Vec2ForSequenceClassification"),Vir=o(" (Wav2Vec2 model)"),Xir=l(),jT=a("li"),C2e=a("strong"),zir=o("wav2vec2-conformer"),Qir=o(" \u2014 "),CW=a("a"),Wir=o("Wav2Vec2ConformerForSequenceClassification"),Hir=o(" (Wav2Vec2-Conformer model)"),Uir=l(),DT=a("li"),w2e=a("strong"),Jir=o("wavlm"),Yir=o(" \u2014 "),wW=a("a"),Kir=o("WavLMForSequenceClassification"),Zir=o(" (WavLM model)"),edr=l(),GT=a("p"),odr=o("The model is set in evaluation mode by default using "),A2e=a("code"),rdr=o("model.eval()"),tdr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),L2e=a("code"),adr=o("model.train()"),ndr=l(),F(OT.$$.fragment),yVe=l(),yd=a("h2"),VT=a("a"),y2e=a("span"),F(By.$$.fragment),sdr=l(),x2e=a("span"),ldr=o("AutoModelForAudioFrameClassification"),xVe=l(),zo=a("div"),F(Iy.$$.fragment),idr=l(),xd=a("p"),ddr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),AW=a("a"),cdr=o("from_pretrained()"),fdr=o(" class method or the "),LW=a("a"),mdr=o("from_config()"),gdr=o(` class
method.`),hdr=l(),Ny=a("p"),pdr=o("This class cannot be instantiated directly using "),$2e=a("code"),_dr=o("__init__()"),udr=o(" (throws an error)."),bdr=l(),Tt=a("div"),F(qy.$$.fragment),vdr=l(),k2e=a("p"),Fdr=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Tdr=l(),$d=a("p"),Mdr=o(`Note:
Loading a model from its configuration file does `),S2e=a("strong"),Edr=o("not"),Cdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yW=a("a"),wdr=o("from_pretrained()"),Adr=o(" to load the model weights."),Ldr=l(),F(XT.$$.fragment),ydr=l(),mo=a("div"),F(jy.$$.fragment),xdr=l(),R2e=a("p"),$dr=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),kdr=l(),Ha=a("p"),Sdr=o("The model class to instantiate is selected based on the "),P2e=a("code"),Rdr=o("model_type"),Pdr=o(` property of the config object (either
passed as an argument or loaded from `),B2e=a("code"),Bdr=o("pretrained_model_name_or_path"),Idr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I2e=a("code"),Ndr=o("pretrained_model_name_or_path"),qdr=o(":"),jdr=l(),et=a("ul"),zT=a("li"),N2e=a("strong"),Ddr=o("data2vec-audio"),Gdr=o(" \u2014 "),xW=a("a"),Odr=o("Data2VecAudioForAudioFrameClassification"),Vdr=o(" (Data2VecAudio model)"),Xdr=l(),QT=a("li"),q2e=a("strong"),zdr=o("unispeech-sat"),Qdr=o(" \u2014 "),$W=a("a"),Wdr=o("UniSpeechSatForAudioFrameClassification"),Hdr=o(" (UniSpeechSat model)"),Udr=l(),WT=a("li"),j2e=a("strong"),Jdr=o("wav2vec2"),Ydr=o(" \u2014 "),kW=a("a"),Kdr=o("Wav2Vec2ForAudioFrameClassification"),Zdr=o(" (Wav2Vec2 model)"),ecr=l(),HT=a("li"),D2e=a("strong"),ocr=o("wav2vec2-conformer"),rcr=o(" \u2014 "),SW=a("a"),tcr=o("Wav2Vec2ConformerForAudioFrameClassification"),acr=o(" (Wav2Vec2-Conformer model)"),ncr=l(),UT=a("li"),G2e=a("strong"),scr=o("wavlm"),lcr=o(" \u2014 "),RW=a("a"),icr=o("WavLMForAudioFrameClassification"),dcr=o(" (WavLM model)"),ccr=l(),JT=a("p"),fcr=o("The model is set in evaluation mode by default using "),O2e=a("code"),mcr=o("model.eval()"),gcr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),V2e=a("code"),hcr=o("model.train()"),pcr=l(),F(YT.$$.fragment),$Ve=l(),kd=a("h2"),KT=a("a"),X2e=a("span"),F(Dy.$$.fragment),_cr=l(),z2e=a("span"),ucr=o("AutoModelForCTC"),kVe=l(),Qo=a("div"),F(Gy.$$.fragment),bcr=l(),Sd=a("p"),vcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),PW=a("a"),Fcr=o("from_pretrained()"),Tcr=o(" class method or the "),BW=a("a"),Mcr=o("from_config()"),Ecr=o(` class
method.`),Ccr=l(),Oy=a("p"),wcr=o("This class cannot be instantiated directly using "),Q2e=a("code"),Acr=o("__init__()"),Lcr=o(" (throws an error)."),ycr=l(),Mt=a("div"),F(Vy.$$.fragment),xcr=l(),W2e=a("p"),$cr=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),kcr=l(),Rd=a("p"),Scr=o(`Note:
Loading a model from its configuration file does `),H2e=a("strong"),Rcr=o("not"),Pcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IW=a("a"),Bcr=o("from_pretrained()"),Icr=o(" to load the model weights."),Ncr=l(),F(ZT.$$.fragment),qcr=l(),go=a("div"),F(Xy.$$.fragment),jcr=l(),U2e=a("p"),Dcr=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Gcr=l(),Ua=a("p"),Ocr=o("The model class to instantiate is selected based on the "),J2e=a("code"),Vcr=o("model_type"),Xcr=o(` property of the config object (either
passed as an argument or loaded from `),Y2e=a("code"),zcr=o("pretrained_model_name_or_path"),Qcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K2e=a("code"),Wcr=o("pretrained_model_name_or_path"),Hcr=o(":"),Ucr=l(),Le=a("ul"),e8=a("li"),Z2e=a("strong"),Jcr=o("data2vec-audio"),Ycr=o(" \u2014 "),NW=a("a"),Kcr=o("Data2VecAudioForCTC"),Zcr=o(" (Data2VecAudio model)"),efr=l(),o8=a("li"),ebe=a("strong"),ofr=o("hubert"),rfr=o(" \u2014 "),qW=a("a"),tfr=o("HubertForCTC"),afr=o(" (Hubert model)"),nfr=l(),r8=a("li"),obe=a("strong"),sfr=o("mctct"),lfr=o(" \u2014 "),jW=a("a"),ifr=o("MCTCTForCTC"),dfr=o(" (M-CTC-T model)"),cfr=l(),t8=a("li"),rbe=a("strong"),ffr=o("sew"),mfr=o(" \u2014 "),DW=a("a"),gfr=o("SEWForCTC"),hfr=o(" (SEW model)"),pfr=l(),a8=a("li"),tbe=a("strong"),_fr=o("sew-d"),ufr=o(" \u2014 "),GW=a("a"),bfr=o("SEWDForCTC"),vfr=o(" (SEW-D model)"),Ffr=l(),n8=a("li"),abe=a("strong"),Tfr=o("unispeech"),Mfr=o(" \u2014 "),OW=a("a"),Efr=o("UniSpeechForCTC"),Cfr=o(" (UniSpeech model)"),wfr=l(),s8=a("li"),nbe=a("strong"),Afr=o("unispeech-sat"),Lfr=o(" \u2014 "),VW=a("a"),yfr=o("UniSpeechSatForCTC"),xfr=o(" (UniSpeechSat model)"),$fr=l(),l8=a("li"),sbe=a("strong"),kfr=o("wav2vec2"),Sfr=o(" \u2014 "),XW=a("a"),Rfr=o("Wav2Vec2ForCTC"),Pfr=o(" (Wav2Vec2 model)"),Bfr=l(),i8=a("li"),lbe=a("strong"),Ifr=o("wav2vec2-conformer"),Nfr=o(" \u2014 "),zW=a("a"),qfr=o("Wav2Vec2ConformerForCTC"),jfr=o(" (Wav2Vec2-Conformer model)"),Dfr=l(),d8=a("li"),ibe=a("strong"),Gfr=o("wavlm"),Ofr=o(" \u2014 "),QW=a("a"),Vfr=o("WavLMForCTC"),Xfr=o(" (WavLM model)"),zfr=l(),c8=a("p"),Qfr=o("The model is set in evaluation mode by default using "),dbe=a("code"),Wfr=o("model.eval()"),Hfr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cbe=a("code"),Ufr=o("model.train()"),Jfr=l(),F(f8.$$.fragment),SVe=l(),Pd=a("h2"),m8=a("a"),fbe=a("span"),F(zy.$$.fragment),Yfr=l(),mbe=a("span"),Kfr=o("AutoModelForSpeechSeq2Seq"),RVe=l(),Wo=a("div"),F(Qy.$$.fragment),Zfr=l(),Bd=a("p"),emr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),WW=a("a"),omr=o("from_pretrained()"),rmr=o(" class method or the "),HW=a("a"),tmr=o("from_config()"),amr=o(` class
method.`),nmr=l(),Wy=a("p"),smr=o("This class cannot be instantiated directly using "),gbe=a("code"),lmr=o("__init__()"),imr=o(" (throws an error)."),dmr=l(),Et=a("div"),F(Hy.$$.fragment),cmr=l(),hbe=a("p"),fmr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),mmr=l(),Id=a("p"),gmr=o(`Note:
Loading a model from its configuration file does `),pbe=a("strong"),hmr=o("not"),pmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UW=a("a"),_mr=o("from_pretrained()"),umr=o(" to load the model weights."),bmr=l(),F(g8.$$.fragment),vmr=l(),ho=a("div"),F(Uy.$$.fragment),Fmr=l(),_be=a("p"),Tmr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Mmr=l(),Ja=a("p"),Emr=o("The model class to instantiate is selected based on the "),ube=a("code"),Cmr=o("model_type"),wmr=o(` property of the config object (either
passed as an argument or loaded from `),bbe=a("code"),Amr=o("pretrained_model_name_or_path"),Lmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vbe=a("code"),ymr=o("pretrained_model_name_or_path"),xmr=o(":"),$mr=l(),Jy=a("ul"),h8=a("li"),Fbe=a("strong"),kmr=o("speech-encoder-decoder"),Smr=o(" \u2014 "),JW=a("a"),Rmr=o("SpeechEncoderDecoderModel"),Pmr=o(" (Speech Encoder decoder model)"),Bmr=l(),p8=a("li"),Tbe=a("strong"),Imr=o("speech_to_text"),Nmr=o(" \u2014 "),YW=a("a"),qmr=o("Speech2TextForConditionalGeneration"),jmr=o(" (Speech2Text model)"),Dmr=l(),_8=a("p"),Gmr=o("The model is set in evaluation mode by default using "),Mbe=a("code"),Omr=o("model.eval()"),Vmr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ebe=a("code"),Xmr=o("model.train()"),zmr=l(),F(u8.$$.fragment),PVe=l(),Nd=a("h2"),b8=a("a"),Cbe=a("span"),F(Yy.$$.fragment),Qmr=l(),wbe=a("span"),Wmr=o("AutoModelForAudioXVector"),BVe=l(),Ho=a("div"),F(Ky.$$.fragment),Hmr=l(),qd=a("p"),Umr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),KW=a("a"),Jmr=o("from_pretrained()"),Ymr=o(" class method or the "),ZW=a("a"),Kmr=o("from_config()"),Zmr=o(` class
method.`),egr=l(),Zy=a("p"),ogr=o("This class cannot be instantiated directly using "),Abe=a("code"),rgr=o("__init__()"),tgr=o(" (throws an error)."),agr=l(),Ct=a("div"),F(e9.$$.fragment),ngr=l(),Lbe=a("p"),sgr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),lgr=l(),jd=a("p"),igr=o(`Note:
Loading a model from its configuration file does `),ybe=a("strong"),dgr=o("not"),cgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eH=a("a"),fgr=o("from_pretrained()"),mgr=o(" to load the model weights."),ggr=l(),F(v8.$$.fragment),hgr=l(),po=a("div"),F(o9.$$.fragment),pgr=l(),xbe=a("p"),_gr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),ugr=l(),Ya=a("p"),bgr=o("The model class to instantiate is selected based on the "),$be=a("code"),vgr=o("model_type"),Fgr=o(` property of the config object (either
passed as an argument or loaded from `),kbe=a("code"),Tgr=o("pretrained_model_name_or_path"),Mgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sbe=a("code"),Egr=o("pretrained_model_name_or_path"),Cgr=o(":"),wgr=l(),ot=a("ul"),F8=a("li"),Rbe=a("strong"),Agr=o("data2vec-audio"),Lgr=o(" \u2014 "),oH=a("a"),ygr=o("Data2VecAudioForXVector"),xgr=o(" (Data2VecAudio model)"),$gr=l(),T8=a("li"),Pbe=a("strong"),kgr=o("unispeech-sat"),Sgr=o(" \u2014 "),rH=a("a"),Rgr=o("UniSpeechSatForXVector"),Pgr=o(" (UniSpeechSat model)"),Bgr=l(),M8=a("li"),Bbe=a("strong"),Igr=o("wav2vec2"),Ngr=o(" \u2014 "),tH=a("a"),qgr=o("Wav2Vec2ForXVector"),jgr=o(" (Wav2Vec2 model)"),Dgr=l(),E8=a("li"),Ibe=a("strong"),Ggr=o("wav2vec2-conformer"),Ogr=o(" \u2014 "),aH=a("a"),Vgr=o("Wav2Vec2ConformerForXVector"),Xgr=o(" (Wav2Vec2-Conformer model)"),zgr=l(),C8=a("li"),Nbe=a("strong"),Qgr=o("wavlm"),Wgr=o(" \u2014 "),nH=a("a"),Hgr=o("WavLMForXVector"),Ugr=o(" (WavLM model)"),Jgr=l(),w8=a("p"),Ygr=o("The model is set in evaluation mode by default using "),qbe=a("code"),Kgr=o("model.eval()"),Zgr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jbe=a("code"),ehr=o("model.train()"),ohr=l(),F(A8.$$.fragment),IVe=l(),Dd=a("h2"),L8=a("a"),Dbe=a("span"),F(r9.$$.fragment),rhr=l(),Gbe=a("span"),thr=o("AutoModelForMaskedImageModeling"),NVe=l(),Uo=a("div"),F(t9.$$.fragment),ahr=l(),Gd=a("p"),nhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),sH=a("a"),shr=o("from_pretrained()"),lhr=o(" class method or the "),lH=a("a"),ihr=o("from_config()"),dhr=o(` class
method.`),chr=l(),a9=a("p"),fhr=o("This class cannot be instantiated directly using "),Obe=a("code"),mhr=o("__init__()"),ghr=o(" (throws an error)."),hhr=l(),wt=a("div"),F(n9.$$.fragment),phr=l(),Vbe=a("p"),_hr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),uhr=l(),Od=a("p"),bhr=o(`Note:
Loading a model from its configuration file does `),Xbe=a("strong"),vhr=o("not"),Fhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iH=a("a"),Thr=o("from_pretrained()"),Mhr=o(" to load the model weights."),Ehr=l(),F(y8.$$.fragment),Chr=l(),_o=a("div"),F(s9.$$.fragment),whr=l(),zbe=a("p"),Ahr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Lhr=l(),Ka=a("p"),yhr=o("The model class to instantiate is selected based on the "),Qbe=a("code"),xhr=o("model_type"),$hr=o(` property of the config object (either
passed as an argument or loaded from `),Wbe=a("code"),khr=o("pretrained_model_name_or_path"),Shr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hbe=a("code"),Rhr=o("pretrained_model_name_or_path"),Phr=o(":"),Bhr=l(),Vd=a("ul"),x8=a("li"),Ube=a("strong"),Ihr=o("deit"),Nhr=o(" \u2014 "),dH=a("a"),qhr=o("DeiTForMaskedImageModeling"),jhr=o(" (DeiT model)"),Dhr=l(),$8=a("li"),Jbe=a("strong"),Ghr=o("swin"),Ohr=o(" \u2014 "),cH=a("a"),Vhr=o("SwinForMaskedImageModeling"),Xhr=o(" (Swin Transformer model)"),zhr=l(),k8=a("li"),Ybe=a("strong"),Qhr=o("vit"),Whr=o(" \u2014 "),fH=a("a"),Hhr=o("ViTForMaskedImageModeling"),Uhr=o(" (ViT model)"),Jhr=l(),S8=a("p"),Yhr=o("The model is set in evaluation mode by default using "),Kbe=a("code"),Khr=o("model.eval()"),Zhr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zbe=a("code"),epr=o("model.train()"),opr=l(),F(R8.$$.fragment),qVe=l(),Xd=a("h2"),P8=a("a"),eve=a("span"),F(l9.$$.fragment),rpr=l(),ove=a("span"),tpr=o("AutoModelForObjectDetection"),jVe=l(),Jo=a("div"),F(i9.$$.fragment),apr=l(),zd=a("p"),npr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),mH=a("a"),spr=o("from_pretrained()"),lpr=o(" class method or the "),gH=a("a"),ipr=o("from_config()"),dpr=o(` class
method.`),cpr=l(),d9=a("p"),fpr=o("This class cannot be instantiated directly using "),rve=a("code"),mpr=o("__init__()"),gpr=o(" (throws an error)."),hpr=l(),At=a("div"),F(c9.$$.fragment),ppr=l(),tve=a("p"),_pr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),upr=l(),Qd=a("p"),bpr=o(`Note:
Loading a model from its configuration file does `),ave=a("strong"),vpr=o("not"),Fpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hH=a("a"),Tpr=o("from_pretrained()"),Mpr=o(" to load the model weights."),Epr=l(),F(B8.$$.fragment),Cpr=l(),uo=a("div"),F(f9.$$.fragment),wpr=l(),nve=a("p"),Apr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Lpr=l(),Za=a("p"),ypr=o("The model class to instantiate is selected based on the "),sve=a("code"),xpr=o("model_type"),$pr=o(` property of the config object (either
passed as an argument or loaded from `),lve=a("code"),kpr=o("pretrained_model_name_or_path"),Spr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ive=a("code"),Rpr=o("pretrained_model_name_or_path"),Ppr=o(":"),Bpr=l(),m9=a("ul"),I8=a("li"),dve=a("strong"),Ipr=o("detr"),Npr=o(" \u2014 "),pH=a("a"),qpr=o("DetrForObjectDetection"),jpr=o(" (DETR model)"),Dpr=l(),N8=a("li"),cve=a("strong"),Gpr=o("yolos"),Opr=o(" \u2014 "),_H=a("a"),Vpr=o("YolosForObjectDetection"),Xpr=o(" (YOLOS model)"),zpr=l(),q8=a("p"),Qpr=o("The model is set in evaluation mode by default using "),fve=a("code"),Wpr=o("model.eval()"),Hpr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mve=a("code"),Upr=o("model.train()"),Jpr=l(),F(j8.$$.fragment),DVe=l(),Wd=a("h2"),D8=a("a"),gve=a("span"),F(g9.$$.fragment),Ypr=l(),hve=a("span"),Kpr=o("AutoModelForImageSegmentation"),GVe=l(),Yo=a("div"),F(h9.$$.fragment),Zpr=l(),Hd=a("p"),e_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),uH=a("a"),o_r=o("from_pretrained()"),r_r=o(" class method or the "),bH=a("a"),t_r=o("from_config()"),a_r=o(` class
method.`),n_r=l(),p9=a("p"),s_r=o("This class cannot be instantiated directly using "),pve=a("code"),l_r=o("__init__()"),i_r=o(" (throws an error)."),d_r=l(),Lt=a("div"),F(_9.$$.fragment),c_r=l(),_ve=a("p"),f_r=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),m_r=l(),Ud=a("p"),g_r=o(`Note:
Loading a model from its configuration file does `),uve=a("strong"),h_r=o("not"),p_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vH=a("a"),__r=o("from_pretrained()"),u_r=o(" to load the model weights."),b_r=l(),F(G8.$$.fragment),v_r=l(),bo=a("div"),F(u9.$$.fragment),F_r=l(),bve=a("p"),T_r=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),M_r=l(),en=a("p"),E_r=o("The model class to instantiate is selected based on the "),vve=a("code"),C_r=o("model_type"),w_r=o(` property of the config object (either
passed as an argument or loaded from `),Fve=a("code"),A_r=o("pretrained_model_name_or_path"),L_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tve=a("code"),y_r=o("pretrained_model_name_or_path"),x_r=o(":"),$_r=l(),Mve=a("ul"),O8=a("li"),Eve=a("strong"),k_r=o("detr"),S_r=o(" \u2014 "),FH=a("a"),R_r=o("DetrForSegmentation"),P_r=o(" (DETR model)"),B_r=l(),V8=a("p"),I_r=o("The model is set in evaluation mode by default using "),Cve=a("code"),N_r=o("model.eval()"),q_r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wve=a("code"),j_r=o("model.train()"),D_r=l(),F(X8.$$.fragment),OVe=l(),Jd=a("h2"),z8=a("a"),Ave=a("span"),F(b9.$$.fragment),G_r=l(),Lve=a("span"),O_r=o("AutoModelForSemanticSegmentation"),VVe=l(),Ko=a("div"),F(v9.$$.fragment),V_r=l(),Yd=a("p"),X_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),TH=a("a"),z_r=o("from_pretrained()"),Q_r=o(" class method or the "),MH=a("a"),W_r=o("from_config()"),H_r=o(` class
method.`),U_r=l(),F9=a("p"),J_r=o("This class cannot be instantiated directly using "),yve=a("code"),Y_r=o("__init__()"),K_r=o(" (throws an error)."),Z_r=l(),yt=a("div"),F(T9.$$.fragment),eur=l(),xve=a("p"),our=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),rur=l(),Kd=a("p"),tur=o(`Note:
Loading a model from its configuration file does `),$ve=a("strong"),aur=o("not"),nur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EH=a("a"),sur=o("from_pretrained()"),lur=o(" to load the model weights."),iur=l(),F(Q8.$$.fragment),dur=l(),vo=a("div"),F(M9.$$.fragment),cur=l(),kve=a("p"),fur=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),mur=l(),on=a("p"),gur=o("The model class to instantiate is selected based on the "),Sve=a("code"),hur=o("model_type"),pur=o(` property of the config object (either
passed as an argument or loaded from `),Rve=a("code"),_ur=o("pretrained_model_name_or_path"),uur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pve=a("code"),bur=o("pretrained_model_name_or_path"),vur=o(":"),Fur=l(),rn=a("ul"),W8=a("li"),Bve=a("strong"),Tur=o("beit"),Mur=o(" \u2014 "),CH=a("a"),Eur=o("BeitForSemanticSegmentation"),Cur=o(" (BEiT model)"),wur=l(),H8=a("li"),Ive=a("strong"),Aur=o("data2vec-vision"),Lur=o(" \u2014 "),wH=a("a"),yur=o("Data2VecVisionForSemanticSegmentation"),xur=o(" (Data2VecVision model)"),$ur=l(),U8=a("li"),Nve=a("strong"),kur=o("dpt"),Sur=o(" \u2014 "),AH=a("a"),Rur=o("DPTForSemanticSegmentation"),Pur=o(" (DPT model)"),Bur=l(),J8=a("li"),qve=a("strong"),Iur=o("segformer"),Nur=o(" \u2014 "),LH=a("a"),qur=o("SegformerForSemanticSegmentation"),jur=o(" (SegFormer model)"),Dur=l(),Y8=a("p"),Gur=o("The model is set in evaluation mode by default using "),jve=a("code"),Our=o("model.eval()"),Vur=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dve=a("code"),Xur=o("model.train()"),zur=l(),F(K8.$$.fragment),XVe=l(),Zd=a("h2"),Z8=a("a"),Gve=a("span"),F(E9.$$.fragment),Qur=l(),Ove=a("span"),Wur=o("AutoModelForInstanceSegmentation"),zVe=l(),Zo=a("div"),F(C9.$$.fragment),Hur=l(),ec=a("p"),Uur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),yH=a("a"),Jur=o("from_pretrained()"),Yur=o(" class method or the "),xH=a("a"),Kur=o("from_config()"),Zur=o(` class
method.`),e7r=l(),w9=a("p"),o7r=o("This class cannot be instantiated directly using "),Vve=a("code"),r7r=o("__init__()"),t7r=o(" (throws an error)."),a7r=l(),xt=a("div"),F(A9.$$.fragment),n7r=l(),Xve=a("p"),s7r=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),l7r=l(),oc=a("p"),i7r=o(`Note:
Loading a model from its configuration file does `),zve=a("strong"),d7r=o("not"),c7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$H=a("a"),f7r=o("from_pretrained()"),m7r=o(" to load the model weights."),g7r=l(),F(eM.$$.fragment),h7r=l(),Fo=a("div"),F(L9.$$.fragment),p7r=l(),Qve=a("p"),_7r=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),u7r=l(),tn=a("p"),b7r=o("The model class to instantiate is selected based on the "),Wve=a("code"),v7r=o("model_type"),F7r=o(` property of the config object (either
passed as an argument or loaded from `),Hve=a("code"),T7r=o("pretrained_model_name_or_path"),M7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uve=a("code"),E7r=o("pretrained_model_name_or_path"),C7r=o(":"),w7r=l(),Jve=a("ul"),oM=a("li"),Yve=a("strong"),A7r=o("maskformer"),L7r=o(" \u2014 "),kH=a("a"),y7r=o("MaskFormerForInstanceSegmentation"),x7r=o(" (MaskFormer model)"),$7r=l(),rM=a("p"),k7r=o("The model is set in evaluation mode by default using "),Kve=a("code"),S7r=o("model.eval()"),R7r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zve=a("code"),P7r=o("model.train()"),B7r=l(),F(tM.$$.fragment),QVe=l(),rc=a("h2"),aM=a("a"),eFe=a("span"),F(y9.$$.fragment),I7r=l(),oFe=a("span"),N7r=o("TFAutoModel"),WVe=l(),er=a("div"),F(x9.$$.fragment),q7r=l(),tc=a("p"),j7r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),SH=a("a"),D7r=o("from_pretrained()"),G7r=o(" class method or the "),RH=a("a"),O7r=o("from_config()"),V7r=o(` class
method.`),X7r=l(),$9=a("p"),z7r=o("This class cannot be instantiated directly using "),rFe=a("code"),Q7r=o("__init__()"),W7r=o(" (throws an error)."),H7r=l(),$t=a("div"),F(k9.$$.fragment),U7r=l(),tFe=a("p"),J7r=o("Instantiates one of the base model classes of the library from a configuration."),Y7r=l(),ac=a("p"),K7r=o(`Note:
Loading a model from its configuration file does `),aFe=a("strong"),Z7r=o("not"),e1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PH=a("a"),o1r=o("from_pretrained()"),r1r=o(" to load the model weights."),t1r=l(),F(nM.$$.fragment),a1r=l(),yr=a("div"),F(S9.$$.fragment),n1r=l(),nFe=a("p"),s1r=o("Instantiate one of the base model classes of the library from a pretrained model."),l1r=l(),an=a("p"),i1r=o("The model class to instantiate is selected based on the "),sFe=a("code"),d1r=o("model_type"),c1r=o(` property of the config object (either
passed as an argument or loaded from `),lFe=a("code"),f1r=o("pretrained_model_name_or_path"),m1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iFe=a("code"),g1r=o("pretrained_model_name_or_path"),h1r=o(":"),p1r=l(),j=a("ul"),sM=a("li"),dFe=a("strong"),_1r=o("albert"),u1r=o(" \u2014 "),BH=a("a"),b1r=o("TFAlbertModel"),v1r=o(" (ALBERT model)"),F1r=l(),lM=a("li"),cFe=a("strong"),T1r=o("bart"),M1r=o(" \u2014 "),IH=a("a"),E1r=o("TFBartModel"),C1r=o(" (BART model)"),w1r=l(),iM=a("li"),fFe=a("strong"),A1r=o("bert"),L1r=o(" \u2014 "),NH=a("a"),y1r=o("TFBertModel"),x1r=o(" (BERT model)"),$1r=l(),dM=a("li"),mFe=a("strong"),k1r=o("blenderbot"),S1r=o(" \u2014 "),qH=a("a"),R1r=o("TFBlenderbotModel"),P1r=o(" (Blenderbot model)"),B1r=l(),cM=a("li"),gFe=a("strong"),I1r=o("blenderbot-small"),N1r=o(" \u2014 "),jH=a("a"),q1r=o("TFBlenderbotSmallModel"),j1r=o(" (BlenderbotSmall model)"),D1r=l(),fM=a("li"),hFe=a("strong"),G1r=o("camembert"),O1r=o(" \u2014 "),DH=a("a"),V1r=o("TFCamembertModel"),X1r=o(" (CamemBERT model)"),z1r=l(),mM=a("li"),pFe=a("strong"),Q1r=o("clip"),W1r=o(" \u2014 "),GH=a("a"),H1r=o("TFCLIPModel"),U1r=o(" (CLIP model)"),J1r=l(),gM=a("li"),_Fe=a("strong"),Y1r=o("convbert"),K1r=o(" \u2014 "),OH=a("a"),Z1r=o("TFConvBertModel"),e2r=o(" (ConvBERT model)"),o2r=l(),hM=a("li"),uFe=a("strong"),r2r=o("convnext"),t2r=o(" \u2014 "),VH=a("a"),a2r=o("TFConvNextModel"),n2r=o(" (ConvNeXT model)"),s2r=l(),pM=a("li"),bFe=a("strong"),l2r=o("ctrl"),i2r=o(" \u2014 "),XH=a("a"),d2r=o("TFCTRLModel"),c2r=o(" (CTRL model)"),f2r=l(),_M=a("li"),vFe=a("strong"),m2r=o("data2vec-vision"),g2r=o(" \u2014 "),zH=a("a"),h2r=o("TFData2VecVisionModel"),p2r=o(" (Data2VecVision model)"),_2r=l(),uM=a("li"),FFe=a("strong"),u2r=o("deberta"),b2r=o(" \u2014 "),QH=a("a"),v2r=o("TFDebertaModel"),F2r=o(" (DeBERTa model)"),T2r=l(),bM=a("li"),TFe=a("strong"),M2r=o("deberta-v2"),E2r=o(" \u2014 "),WH=a("a"),C2r=o("TFDebertaV2Model"),w2r=o(" (DeBERTa-v2 model)"),A2r=l(),vM=a("li"),MFe=a("strong"),L2r=o("distilbert"),y2r=o(" \u2014 "),HH=a("a"),x2r=o("TFDistilBertModel"),$2r=o(" (DistilBERT model)"),k2r=l(),FM=a("li"),EFe=a("strong"),S2r=o("dpr"),R2r=o(" \u2014 "),UH=a("a"),P2r=o("TFDPRQuestionEncoder"),B2r=o(" (DPR model)"),I2r=l(),TM=a("li"),CFe=a("strong"),N2r=o("electra"),q2r=o(" \u2014 "),JH=a("a"),j2r=o("TFElectraModel"),D2r=o(" (ELECTRA model)"),G2r=l(),MM=a("li"),wFe=a("strong"),O2r=o("flaubert"),V2r=o(" \u2014 "),YH=a("a"),X2r=o("TFFlaubertModel"),z2r=o(" (FlauBERT model)"),Q2r=l(),Hs=a("li"),AFe=a("strong"),W2r=o("funnel"),H2r=o(" \u2014 "),KH=a("a"),U2r=o("TFFunnelModel"),J2r=o(" or "),ZH=a("a"),Y2r=o("TFFunnelBaseModel"),K2r=o(" (Funnel Transformer model)"),Z2r=l(),EM=a("li"),LFe=a("strong"),ebr=o("gpt2"),obr=o(" \u2014 "),eU=a("a"),rbr=o("TFGPT2Model"),tbr=o(" (OpenAI GPT-2 model)"),abr=l(),CM=a("li"),yFe=a("strong"),nbr=o("gptj"),sbr=o(" \u2014 "),oU=a("a"),lbr=o("TFGPTJModel"),ibr=o(" (GPT-J model)"),dbr=l(),wM=a("li"),xFe=a("strong"),cbr=o("hubert"),fbr=o(" \u2014 "),rU=a("a"),mbr=o("TFHubertModel"),gbr=o(" (Hubert model)"),hbr=l(),AM=a("li"),$Fe=a("strong"),pbr=o("layoutlm"),_br=o(" \u2014 "),tU=a("a"),ubr=o("TFLayoutLMModel"),bbr=o(" (LayoutLM model)"),vbr=l(),LM=a("li"),kFe=a("strong"),Fbr=o("led"),Tbr=o(" \u2014 "),aU=a("a"),Mbr=o("TFLEDModel"),Ebr=o(" (LED model)"),Cbr=l(),yM=a("li"),SFe=a("strong"),wbr=o("longformer"),Abr=o(" \u2014 "),nU=a("a"),Lbr=o("TFLongformerModel"),ybr=o(" (Longformer model)"),xbr=l(),xM=a("li"),RFe=a("strong"),$br=o("lxmert"),kbr=o(" \u2014 "),sU=a("a"),Sbr=o("TFLxmertModel"),Rbr=o(" (LXMERT model)"),Pbr=l(),$M=a("li"),PFe=a("strong"),Bbr=o("marian"),Ibr=o(" \u2014 "),lU=a("a"),Nbr=o("TFMarianModel"),qbr=o(" (Marian model)"),jbr=l(),kM=a("li"),BFe=a("strong"),Dbr=o("mbart"),Gbr=o(" \u2014 "),iU=a("a"),Obr=o("TFMBartModel"),Vbr=o(" (mBART model)"),Xbr=l(),SM=a("li"),IFe=a("strong"),zbr=o("mobilebert"),Qbr=o(" \u2014 "),dU=a("a"),Wbr=o("TFMobileBertModel"),Hbr=o(" (MobileBERT model)"),Ubr=l(),RM=a("li"),NFe=a("strong"),Jbr=o("mpnet"),Ybr=o(" \u2014 "),cU=a("a"),Kbr=o("TFMPNetModel"),Zbr=o(" (MPNet model)"),evr=l(),PM=a("li"),qFe=a("strong"),ovr=o("mt5"),rvr=o(" \u2014 "),fU=a("a"),tvr=o("TFMT5Model"),avr=o(" (MT5 model)"),nvr=l(),BM=a("li"),jFe=a("strong"),svr=o("openai-gpt"),lvr=o(" \u2014 "),mU=a("a"),ivr=o("TFOpenAIGPTModel"),dvr=o(" (OpenAI GPT model)"),cvr=l(),IM=a("li"),DFe=a("strong"),fvr=o("opt"),mvr=o(" \u2014 "),gU=a("a"),gvr=o("TFOPTModel"),hvr=o(" (OPT model)"),pvr=l(),NM=a("li"),GFe=a("strong"),_vr=o("pegasus"),uvr=o(" \u2014 "),hU=a("a"),bvr=o("TFPegasusModel"),vvr=o(" (Pegasus model)"),Fvr=l(),qM=a("li"),OFe=a("strong"),Tvr=o("rembert"),Mvr=o(" \u2014 "),pU=a("a"),Evr=o("TFRemBertModel"),Cvr=o(" (RemBERT model)"),wvr=l(),jM=a("li"),VFe=a("strong"),Avr=o("roberta"),Lvr=o(" \u2014 "),_U=a("a"),yvr=o("TFRobertaModel"),xvr=o(" (RoBERTa model)"),$vr=l(),DM=a("li"),XFe=a("strong"),kvr=o("roformer"),Svr=o(" \u2014 "),uU=a("a"),Rvr=o("TFRoFormerModel"),Pvr=o(" (RoFormer model)"),Bvr=l(),GM=a("li"),zFe=a("strong"),Ivr=o("speech_to_text"),Nvr=o(" \u2014 "),bU=a("a"),qvr=o("TFSpeech2TextModel"),jvr=o(" (Speech2Text model)"),Dvr=l(),OM=a("li"),QFe=a("strong"),Gvr=o("swin"),Ovr=o(" \u2014 "),vU=a("a"),Vvr=o("TFSwinModel"),Xvr=o(" (Swin Transformer model)"),zvr=l(),VM=a("li"),WFe=a("strong"),Qvr=o("t5"),Wvr=o(" \u2014 "),FU=a("a"),Hvr=o("TFT5Model"),Uvr=o(" (T5 model)"),Jvr=l(),XM=a("li"),HFe=a("strong"),Yvr=o("tapas"),Kvr=o(" \u2014 "),TU=a("a"),Zvr=o("TFTapasModel"),eFr=o(" (TAPAS model)"),oFr=l(),zM=a("li"),UFe=a("strong"),rFr=o("transfo-xl"),tFr=o(" \u2014 "),MU=a("a"),aFr=o("TFTransfoXLModel"),nFr=o(" (Transformer-XL model)"),sFr=l(),QM=a("li"),JFe=a("strong"),lFr=o("vit"),iFr=o(" \u2014 "),EU=a("a"),dFr=o("TFViTModel"),cFr=o(" (ViT model)"),fFr=l(),WM=a("li"),YFe=a("strong"),mFr=o("vit_mae"),gFr=o(" \u2014 "),CU=a("a"),hFr=o("TFViTMAEModel"),pFr=o(" (ViTMAE model)"),_Fr=l(),HM=a("li"),KFe=a("strong"),uFr=o("wav2vec2"),bFr=o(" \u2014 "),wU=a("a"),vFr=o("TFWav2Vec2Model"),FFr=o(" (Wav2Vec2 model)"),TFr=l(),UM=a("li"),ZFe=a("strong"),MFr=o("xlm"),EFr=o(" \u2014 "),AU=a("a"),CFr=o("TFXLMModel"),wFr=o(" (XLM model)"),AFr=l(),JM=a("li"),eTe=a("strong"),LFr=o("xlm-roberta"),yFr=o(" \u2014 "),LU=a("a"),xFr=o("TFXLMRobertaModel"),$Fr=o(" (XLM-RoBERTa model)"),kFr=l(),YM=a("li"),oTe=a("strong"),SFr=o("xlnet"),RFr=o(" \u2014 "),yU=a("a"),PFr=o("TFXLNetModel"),BFr=o(" (XLNet model)"),IFr=l(),F(KM.$$.fragment),HVe=l(),nc=a("h2"),ZM=a("a"),rTe=a("span"),F(R9.$$.fragment),NFr=l(),tTe=a("span"),qFr=o("TFAutoModelForPreTraining"),UVe=l(),or=a("div"),F(P9.$$.fragment),jFr=l(),sc=a("p"),DFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),xU=a("a"),GFr=o("from_pretrained()"),OFr=o(" class method or the "),$U=a("a"),VFr=o("from_config()"),XFr=o(` class
method.`),zFr=l(),B9=a("p"),QFr=o("This class cannot be instantiated directly using "),aTe=a("code"),WFr=o("__init__()"),HFr=o(" (throws an error)."),UFr=l(),kt=a("div"),F(I9.$$.fragment),JFr=l(),nTe=a("p"),YFr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),KFr=l(),lc=a("p"),ZFr=o(`Note:
Loading a model from its configuration file does `),sTe=a("strong"),eTr=o("not"),oTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kU=a("a"),rTr=o("from_pretrained()"),tTr=o(" to load the model weights."),aTr=l(),F(e4.$$.fragment),nTr=l(),xr=a("div"),F(N9.$$.fragment),sTr=l(),lTe=a("p"),lTr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),iTr=l(),nn=a("p"),dTr=o("The model class to instantiate is selected based on the "),iTe=a("code"),cTr=o("model_type"),fTr=o(` property of the config object (either
passed as an argument or loaded from `),dTe=a("code"),mTr=o("pretrained_model_name_or_path"),gTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cTe=a("code"),hTr=o("pretrained_model_name_or_path"),pTr=o(":"),_Tr=l(),se=a("ul"),o4=a("li"),fTe=a("strong"),uTr=o("albert"),bTr=o(" \u2014 "),SU=a("a"),vTr=o("TFAlbertForPreTraining"),FTr=o(" (ALBERT model)"),TTr=l(),r4=a("li"),mTe=a("strong"),MTr=o("bart"),ETr=o(" \u2014 "),RU=a("a"),CTr=o("TFBartForConditionalGeneration"),wTr=o(" (BART model)"),ATr=l(),t4=a("li"),gTe=a("strong"),LTr=o("bert"),yTr=o(" \u2014 "),PU=a("a"),xTr=o("TFBertForPreTraining"),$Tr=o(" (BERT model)"),kTr=l(),a4=a("li"),hTe=a("strong"),STr=o("camembert"),RTr=o(" \u2014 "),BU=a("a"),PTr=o("TFCamembertForMaskedLM"),BTr=o(" (CamemBERT model)"),ITr=l(),n4=a("li"),pTe=a("strong"),NTr=o("ctrl"),qTr=o(" \u2014 "),IU=a("a"),jTr=o("TFCTRLLMHeadModel"),DTr=o(" (CTRL model)"),GTr=l(),s4=a("li"),_Te=a("strong"),OTr=o("distilbert"),VTr=o(" \u2014 "),NU=a("a"),XTr=o("TFDistilBertForMaskedLM"),zTr=o(" (DistilBERT model)"),QTr=l(),l4=a("li"),uTe=a("strong"),WTr=o("electra"),HTr=o(" \u2014 "),qU=a("a"),UTr=o("TFElectraForPreTraining"),JTr=o(" (ELECTRA model)"),YTr=l(),i4=a("li"),bTe=a("strong"),KTr=o("flaubert"),ZTr=o(" \u2014 "),jU=a("a"),e8r=o("TFFlaubertWithLMHeadModel"),o8r=o(" (FlauBERT model)"),r8r=l(),d4=a("li"),vTe=a("strong"),t8r=o("funnel"),a8r=o(" \u2014 "),DU=a("a"),n8r=o("TFFunnelForPreTraining"),s8r=o(" (Funnel Transformer model)"),l8r=l(),c4=a("li"),FTe=a("strong"),i8r=o("gpt2"),d8r=o(" \u2014 "),GU=a("a"),c8r=o("TFGPT2LMHeadModel"),f8r=o(" (OpenAI GPT-2 model)"),m8r=l(),f4=a("li"),TTe=a("strong"),g8r=o("layoutlm"),h8r=o(" \u2014 "),OU=a("a"),p8r=o("TFLayoutLMForMaskedLM"),_8r=o(" (LayoutLM model)"),u8r=l(),m4=a("li"),MTe=a("strong"),b8r=o("lxmert"),v8r=o(" \u2014 "),VU=a("a"),F8r=o("TFLxmertForPreTraining"),T8r=o(" (LXMERT model)"),M8r=l(),g4=a("li"),ETe=a("strong"),E8r=o("mobilebert"),C8r=o(" \u2014 "),XU=a("a"),w8r=o("TFMobileBertForPreTraining"),A8r=o(" (MobileBERT model)"),L8r=l(),h4=a("li"),CTe=a("strong"),y8r=o("mpnet"),x8r=o(" \u2014 "),zU=a("a"),$8r=o("TFMPNetForMaskedLM"),k8r=o(" (MPNet model)"),S8r=l(),p4=a("li"),wTe=a("strong"),R8r=o("openai-gpt"),P8r=o(" \u2014 "),QU=a("a"),B8r=o("TFOpenAIGPTLMHeadModel"),I8r=o(" (OpenAI GPT model)"),N8r=l(),_4=a("li"),ATe=a("strong"),q8r=o("roberta"),j8r=o(" \u2014 "),WU=a("a"),D8r=o("TFRobertaForMaskedLM"),G8r=o(" (RoBERTa model)"),O8r=l(),u4=a("li"),LTe=a("strong"),V8r=o("t5"),X8r=o(" \u2014 "),HU=a("a"),z8r=o("TFT5ForConditionalGeneration"),Q8r=o(" (T5 model)"),W8r=l(),b4=a("li"),yTe=a("strong"),H8r=o("tapas"),U8r=o(" \u2014 "),UU=a("a"),J8r=o("TFTapasForMaskedLM"),Y8r=o(" (TAPAS model)"),K8r=l(),v4=a("li"),xTe=a("strong"),Z8r=o("transfo-xl"),eMr=o(" \u2014 "),JU=a("a"),oMr=o("TFTransfoXLLMHeadModel"),rMr=o(" (Transformer-XL model)"),tMr=l(),F4=a("li"),$Te=a("strong"),aMr=o("vit_mae"),nMr=o(" \u2014 "),YU=a("a"),sMr=o("TFViTMAEForPreTraining"),lMr=o(" (ViTMAE model)"),iMr=l(),T4=a("li"),kTe=a("strong"),dMr=o("xlm"),cMr=o(" \u2014 "),KU=a("a"),fMr=o("TFXLMWithLMHeadModel"),mMr=o(" (XLM model)"),gMr=l(),M4=a("li"),STe=a("strong"),hMr=o("xlm-roberta"),pMr=o(" \u2014 "),ZU=a("a"),_Mr=o("TFXLMRobertaForMaskedLM"),uMr=o(" (XLM-RoBERTa model)"),bMr=l(),E4=a("li"),RTe=a("strong"),vMr=o("xlnet"),FMr=o(" \u2014 "),eJ=a("a"),TMr=o("TFXLNetLMHeadModel"),MMr=o(" (XLNet model)"),EMr=l(),F(C4.$$.fragment),JVe=l(),ic=a("h2"),w4=a("a"),PTe=a("span"),F(q9.$$.fragment),CMr=l(),BTe=a("span"),wMr=o("TFAutoModelForCausalLM"),YVe=l(),rr=a("div"),F(j9.$$.fragment),AMr=l(),dc=a("p"),LMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),oJ=a("a"),yMr=o("from_pretrained()"),xMr=o(" class method or the "),rJ=a("a"),$Mr=o("from_config()"),kMr=o(` class
method.`),SMr=l(),D9=a("p"),RMr=o("This class cannot be instantiated directly using "),ITe=a("code"),PMr=o("__init__()"),BMr=o(" (throws an error)."),IMr=l(),St=a("div"),F(G9.$$.fragment),NMr=l(),NTe=a("p"),qMr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),jMr=l(),cc=a("p"),DMr=o(`Note:
Loading a model from its configuration file does `),qTe=a("strong"),GMr=o("not"),OMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tJ=a("a"),VMr=o("from_pretrained()"),XMr=o(" to load the model weights."),zMr=l(),F(A4.$$.fragment),QMr=l(),$r=a("div"),F(O9.$$.fragment),WMr=l(),jTe=a("p"),HMr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),UMr=l(),sn=a("p"),JMr=o("The model class to instantiate is selected based on the "),DTe=a("code"),YMr=o("model_type"),KMr=o(` property of the config object (either
passed as an argument or loaded from `),GTe=a("code"),ZMr=o("pretrained_model_name_or_path"),e4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OTe=a("code"),o4r=o("pretrained_model_name_or_path"),r4r=o(":"),t4r=l(),Me=a("ul"),L4=a("li"),VTe=a("strong"),a4r=o("bert"),n4r=o(" \u2014 "),aJ=a("a"),s4r=o("TFBertLMHeadModel"),l4r=o(" (BERT model)"),i4r=l(),y4=a("li"),XTe=a("strong"),d4r=o("camembert"),c4r=o(" \u2014 "),nJ=a("a"),f4r=o("TFCamembertForCausalLM"),m4r=o(" (CamemBERT model)"),g4r=l(),x4=a("li"),zTe=a("strong"),h4r=o("ctrl"),p4r=o(" \u2014 "),sJ=a("a"),_4r=o("TFCTRLLMHeadModel"),u4r=o(" (CTRL model)"),b4r=l(),$4=a("li"),QTe=a("strong"),v4r=o("gpt2"),F4r=o(" \u2014 "),lJ=a("a"),T4r=o("TFGPT2LMHeadModel"),M4r=o(" (OpenAI GPT-2 model)"),E4r=l(),k4=a("li"),WTe=a("strong"),C4r=o("gptj"),w4r=o(" \u2014 "),iJ=a("a"),A4r=o("TFGPTJForCausalLM"),L4r=o(" (GPT-J model)"),y4r=l(),S4=a("li"),HTe=a("strong"),x4r=o("openai-gpt"),$4r=o(" \u2014 "),dJ=a("a"),k4r=o("TFOpenAIGPTLMHeadModel"),S4r=o(" (OpenAI GPT model)"),R4r=l(),R4=a("li"),UTe=a("strong"),P4r=o("opt"),B4r=o(" \u2014 "),cJ=a("a"),I4r=o("TFOPTForCausalLM"),N4r=o(" (OPT model)"),q4r=l(),P4=a("li"),JTe=a("strong"),j4r=o("rembert"),D4r=o(" \u2014 "),fJ=a("a"),G4r=o("TFRemBertForCausalLM"),O4r=o(" (RemBERT model)"),V4r=l(),B4=a("li"),YTe=a("strong"),X4r=o("roberta"),z4r=o(" \u2014 "),mJ=a("a"),Q4r=o("TFRobertaForCausalLM"),W4r=o(" (RoBERTa model)"),H4r=l(),I4=a("li"),KTe=a("strong"),U4r=o("roformer"),J4r=o(" \u2014 "),gJ=a("a"),Y4r=o("TFRoFormerForCausalLM"),K4r=o(" (RoFormer model)"),Z4r=l(),N4=a("li"),ZTe=a("strong"),eEr=o("transfo-xl"),oEr=o(" \u2014 "),hJ=a("a"),rEr=o("TFTransfoXLLMHeadModel"),tEr=o(" (Transformer-XL model)"),aEr=l(),q4=a("li"),e8e=a("strong"),nEr=o("xlm"),sEr=o(" \u2014 "),pJ=a("a"),lEr=o("TFXLMWithLMHeadModel"),iEr=o(" (XLM model)"),dEr=l(),j4=a("li"),o8e=a("strong"),cEr=o("xlnet"),fEr=o(" \u2014 "),_J=a("a"),mEr=o("TFXLNetLMHeadModel"),gEr=o(" (XLNet model)"),hEr=l(),F(D4.$$.fragment),KVe=l(),fc=a("h2"),G4=a("a"),r8e=a("span"),F(V9.$$.fragment),pEr=l(),t8e=a("span"),_Er=o("TFAutoModelForImageClassification"),ZVe=l(),tr=a("div"),F(X9.$$.fragment),uEr=l(),mc=a("p"),bEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),uJ=a("a"),vEr=o("from_pretrained()"),FEr=o(" class method or the "),bJ=a("a"),TEr=o("from_config()"),MEr=o(` class
method.`),EEr=l(),z9=a("p"),CEr=o("This class cannot be instantiated directly using "),a8e=a("code"),wEr=o("__init__()"),AEr=o(" (throws an error)."),LEr=l(),Rt=a("div"),F(Q9.$$.fragment),yEr=l(),n8e=a("p"),xEr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),$Er=l(),gc=a("p"),kEr=o(`Note:
Loading a model from its configuration file does `),s8e=a("strong"),SEr=o("not"),REr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vJ=a("a"),PEr=o("from_pretrained()"),BEr=o(" to load the model weights."),IEr=l(),F(O4.$$.fragment),NEr=l(),kr=a("div"),F(W9.$$.fragment),qEr=l(),l8e=a("p"),jEr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),DEr=l(),ln=a("p"),GEr=o("The model class to instantiate is selected based on the "),i8e=a("code"),OEr=o("model_type"),VEr=o(` property of the config object (either
passed as an argument or loaded from `),d8e=a("code"),XEr=o("pretrained_model_name_or_path"),zEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c8e=a("code"),QEr=o("pretrained_model_name_or_path"),WEr=o(":"),HEr=l(),dn=a("ul"),V4=a("li"),f8e=a("strong"),UEr=o("convnext"),JEr=o(" \u2014 "),FJ=a("a"),YEr=o("TFConvNextForImageClassification"),KEr=o(" (ConvNeXT model)"),ZEr=l(),X4=a("li"),m8e=a("strong"),eCr=o("data2vec-vision"),oCr=o(" \u2014 "),TJ=a("a"),rCr=o("TFData2VecVisionForImageClassification"),tCr=o(" (Data2VecVision model)"),aCr=l(),z4=a("li"),g8e=a("strong"),nCr=o("swin"),sCr=o(" \u2014 "),MJ=a("a"),lCr=o("TFSwinForImageClassification"),iCr=o(" (Swin Transformer model)"),dCr=l(),Q4=a("li"),h8e=a("strong"),cCr=o("vit"),fCr=o(" \u2014 "),EJ=a("a"),mCr=o("TFViTForImageClassification"),gCr=o(" (ViT model)"),hCr=l(),F(W4.$$.fragment),eXe=l(),hc=a("h2"),H4=a("a"),p8e=a("span"),F(H9.$$.fragment),pCr=l(),_8e=a("span"),_Cr=o("TFAutoModelForMaskedLM"),oXe=l(),ar=a("div"),F(U9.$$.fragment),uCr=l(),pc=a("p"),bCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),CJ=a("a"),vCr=o("from_pretrained()"),FCr=o(" class method or the "),wJ=a("a"),TCr=o("from_config()"),MCr=o(` class
method.`),ECr=l(),J9=a("p"),CCr=o("This class cannot be instantiated directly using "),u8e=a("code"),wCr=o("__init__()"),ACr=o(" (throws an error)."),LCr=l(),Pt=a("div"),F(Y9.$$.fragment),yCr=l(),b8e=a("p"),xCr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),$Cr=l(),_c=a("p"),kCr=o(`Note:
Loading a model from its configuration file does `),v8e=a("strong"),SCr=o("not"),RCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AJ=a("a"),PCr=o("from_pretrained()"),BCr=o(" to load the model weights."),ICr=l(),F(U4.$$.fragment),NCr=l(),Sr=a("div"),F(K9.$$.fragment),qCr=l(),F8e=a("p"),jCr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),DCr=l(),cn=a("p"),GCr=o("The model class to instantiate is selected based on the "),T8e=a("code"),OCr=o("model_type"),VCr=o(` property of the config object (either
passed as an argument or loaded from `),M8e=a("code"),XCr=o("pretrained_model_name_or_path"),zCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E8e=a("code"),QCr=o("pretrained_model_name_or_path"),WCr=o(":"),HCr=l(),ie=a("ul"),J4=a("li"),C8e=a("strong"),UCr=o("albert"),JCr=o(" \u2014 "),LJ=a("a"),YCr=o("TFAlbertForMaskedLM"),KCr=o(" (ALBERT model)"),ZCr=l(),Y4=a("li"),w8e=a("strong"),e3r=o("bert"),o3r=o(" \u2014 "),yJ=a("a"),r3r=o("TFBertForMaskedLM"),t3r=o(" (BERT model)"),a3r=l(),K4=a("li"),A8e=a("strong"),n3r=o("camembert"),s3r=o(" \u2014 "),xJ=a("a"),l3r=o("TFCamembertForMaskedLM"),i3r=o(" (CamemBERT model)"),d3r=l(),Z4=a("li"),L8e=a("strong"),c3r=o("convbert"),f3r=o(" \u2014 "),$J=a("a"),m3r=o("TFConvBertForMaskedLM"),g3r=o(" (ConvBERT model)"),h3r=l(),eE=a("li"),y8e=a("strong"),p3r=o("deberta"),_3r=o(" \u2014 "),kJ=a("a"),u3r=o("TFDebertaForMaskedLM"),b3r=o(" (DeBERTa model)"),v3r=l(),oE=a("li"),x8e=a("strong"),F3r=o("deberta-v2"),T3r=o(" \u2014 "),SJ=a("a"),M3r=o("TFDebertaV2ForMaskedLM"),E3r=o(" (DeBERTa-v2 model)"),C3r=l(),rE=a("li"),$8e=a("strong"),w3r=o("distilbert"),A3r=o(" \u2014 "),RJ=a("a"),L3r=o("TFDistilBertForMaskedLM"),y3r=o(" (DistilBERT model)"),x3r=l(),tE=a("li"),k8e=a("strong"),$3r=o("electra"),k3r=o(" \u2014 "),PJ=a("a"),S3r=o("TFElectraForMaskedLM"),R3r=o(" (ELECTRA model)"),P3r=l(),aE=a("li"),S8e=a("strong"),B3r=o("flaubert"),I3r=o(" \u2014 "),BJ=a("a"),N3r=o("TFFlaubertWithLMHeadModel"),q3r=o(" (FlauBERT model)"),j3r=l(),nE=a("li"),R8e=a("strong"),D3r=o("funnel"),G3r=o(" \u2014 "),IJ=a("a"),O3r=o("TFFunnelForMaskedLM"),V3r=o(" (Funnel Transformer model)"),X3r=l(),sE=a("li"),P8e=a("strong"),z3r=o("layoutlm"),Q3r=o(" \u2014 "),NJ=a("a"),W3r=o("TFLayoutLMForMaskedLM"),H3r=o(" (LayoutLM model)"),U3r=l(),lE=a("li"),B8e=a("strong"),J3r=o("longformer"),Y3r=o(" \u2014 "),qJ=a("a"),K3r=o("TFLongformerForMaskedLM"),Z3r=o(" (Longformer model)"),e5r=l(),iE=a("li"),I8e=a("strong"),o5r=o("mobilebert"),r5r=o(" \u2014 "),jJ=a("a"),t5r=o("TFMobileBertForMaskedLM"),a5r=o(" (MobileBERT model)"),n5r=l(),dE=a("li"),N8e=a("strong"),s5r=o("mpnet"),l5r=o(" \u2014 "),DJ=a("a"),i5r=o("TFMPNetForMaskedLM"),d5r=o(" (MPNet model)"),c5r=l(),cE=a("li"),q8e=a("strong"),f5r=o("rembert"),m5r=o(" \u2014 "),GJ=a("a"),g5r=o("TFRemBertForMaskedLM"),h5r=o(" (RemBERT model)"),p5r=l(),fE=a("li"),j8e=a("strong"),_5r=o("roberta"),u5r=o(" \u2014 "),OJ=a("a"),b5r=o("TFRobertaForMaskedLM"),v5r=o(" (RoBERTa model)"),F5r=l(),mE=a("li"),D8e=a("strong"),T5r=o("roformer"),M5r=o(" \u2014 "),VJ=a("a"),E5r=o("TFRoFormerForMaskedLM"),C5r=o(" (RoFormer model)"),w5r=l(),gE=a("li"),G8e=a("strong"),A5r=o("tapas"),L5r=o(" \u2014 "),XJ=a("a"),y5r=o("TFTapasForMaskedLM"),x5r=o(" (TAPAS model)"),$5r=l(),hE=a("li"),O8e=a("strong"),k5r=o("xlm"),S5r=o(" \u2014 "),zJ=a("a"),R5r=o("TFXLMWithLMHeadModel"),P5r=o(" (XLM model)"),B5r=l(),pE=a("li"),V8e=a("strong"),I5r=o("xlm-roberta"),N5r=o(" \u2014 "),QJ=a("a"),q5r=o("TFXLMRobertaForMaskedLM"),j5r=o(" (XLM-RoBERTa model)"),D5r=l(),F(_E.$$.fragment),rXe=l(),uc=a("h2"),uE=a("a"),X8e=a("span"),F(Z9.$$.fragment),G5r=l(),z8e=a("span"),O5r=o("TFAutoModelForSeq2SeqLM"),tXe=l(),nr=a("div"),F(ex.$$.fragment),V5r=l(),bc=a("p"),X5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),WJ=a("a"),z5r=o("from_pretrained()"),Q5r=o(" class method or the "),HJ=a("a"),W5r=o("from_config()"),H5r=o(` class
method.`),U5r=l(),ox=a("p"),J5r=o("This class cannot be instantiated directly using "),Q8e=a("code"),Y5r=o("__init__()"),K5r=o(" (throws an error)."),Z5r=l(),Bt=a("div"),F(rx.$$.fragment),e0r=l(),W8e=a("p"),o0r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),r0r=l(),vc=a("p"),t0r=o(`Note:
Loading a model from its configuration file does `),H8e=a("strong"),a0r=o("not"),n0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UJ=a("a"),s0r=o("from_pretrained()"),l0r=o(" to load the model weights."),i0r=l(),F(bE.$$.fragment),d0r=l(),Rr=a("div"),F(tx.$$.fragment),c0r=l(),U8e=a("p"),f0r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),m0r=l(),fn=a("p"),g0r=o("The model class to instantiate is selected based on the "),J8e=a("code"),h0r=o("model_type"),p0r=o(` property of the config object (either
passed as an argument or loaded from `),Y8e=a("code"),_0r=o("pretrained_model_name_or_path"),u0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K8e=a("code"),b0r=o("pretrained_model_name_or_path"),v0r=o(":"),F0r=l(),ye=a("ul"),vE=a("li"),Z8e=a("strong"),T0r=o("bart"),M0r=o(" \u2014 "),JJ=a("a"),E0r=o("TFBartForConditionalGeneration"),C0r=o(" (BART model)"),w0r=l(),FE=a("li"),eMe=a("strong"),A0r=o("blenderbot"),L0r=o(" \u2014 "),YJ=a("a"),y0r=o("TFBlenderbotForConditionalGeneration"),x0r=o(" (Blenderbot model)"),$0r=l(),TE=a("li"),oMe=a("strong"),k0r=o("blenderbot-small"),S0r=o(" \u2014 "),KJ=a("a"),R0r=o("TFBlenderbotSmallForConditionalGeneration"),P0r=o(" (BlenderbotSmall model)"),B0r=l(),ME=a("li"),rMe=a("strong"),I0r=o("encoder-decoder"),N0r=o(" \u2014 "),ZJ=a("a"),q0r=o("TFEncoderDecoderModel"),j0r=o(" (Encoder decoder model)"),D0r=l(),EE=a("li"),tMe=a("strong"),G0r=o("led"),O0r=o(" \u2014 "),eY=a("a"),V0r=o("TFLEDForConditionalGeneration"),X0r=o(" (LED model)"),z0r=l(),CE=a("li"),aMe=a("strong"),Q0r=o("marian"),W0r=o(" \u2014 "),oY=a("a"),H0r=o("TFMarianMTModel"),U0r=o(" (Marian model)"),J0r=l(),wE=a("li"),nMe=a("strong"),Y0r=o("mbart"),K0r=o(" \u2014 "),rY=a("a"),Z0r=o("TFMBartForConditionalGeneration"),ewr=o(" (mBART model)"),owr=l(),AE=a("li"),sMe=a("strong"),rwr=o("mt5"),twr=o(" \u2014 "),tY=a("a"),awr=o("TFMT5ForConditionalGeneration"),nwr=o(" (MT5 model)"),swr=l(),LE=a("li"),lMe=a("strong"),lwr=o("pegasus"),iwr=o(" \u2014 "),aY=a("a"),dwr=o("TFPegasusForConditionalGeneration"),cwr=o(" (Pegasus model)"),fwr=l(),yE=a("li"),iMe=a("strong"),mwr=o("t5"),gwr=o(" \u2014 "),nY=a("a"),hwr=o("TFT5ForConditionalGeneration"),pwr=o(" (T5 model)"),_wr=l(),F(xE.$$.fragment),aXe=l(),Fc=a("h2"),$E=a("a"),dMe=a("span"),F(ax.$$.fragment),uwr=l(),cMe=a("span"),bwr=o("TFAutoModelForSequenceClassification"),nXe=l(),sr=a("div"),F(nx.$$.fragment),vwr=l(),Tc=a("p"),Fwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),sY=a("a"),Twr=o("from_pretrained()"),Mwr=o(" class method or the "),lY=a("a"),Ewr=o("from_config()"),Cwr=o(` class
method.`),wwr=l(),sx=a("p"),Awr=o("This class cannot be instantiated directly using "),fMe=a("code"),Lwr=o("__init__()"),ywr=o(" (throws an error)."),xwr=l(),It=a("div"),F(lx.$$.fragment),$wr=l(),mMe=a("p"),kwr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Swr=l(),Mc=a("p"),Rwr=o(`Note:
Loading a model from its configuration file does `),gMe=a("strong"),Pwr=o("not"),Bwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iY=a("a"),Iwr=o("from_pretrained()"),Nwr=o(" to load the model weights."),qwr=l(),F(kE.$$.fragment),jwr=l(),Pr=a("div"),F(ix.$$.fragment),Dwr=l(),hMe=a("p"),Gwr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Owr=l(),mn=a("p"),Vwr=o("The model class to instantiate is selected based on the "),pMe=a("code"),Xwr=o("model_type"),zwr=o(` property of the config object (either
passed as an argument or loaded from `),_Me=a("code"),Qwr=o("pretrained_model_name_or_path"),Wwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uMe=a("code"),Hwr=o("pretrained_model_name_or_path"),Uwr=o(":"),Jwr=l(),te=a("ul"),SE=a("li"),bMe=a("strong"),Ywr=o("albert"),Kwr=o(" \u2014 "),dY=a("a"),Zwr=o("TFAlbertForSequenceClassification"),eAr=o(" (ALBERT model)"),oAr=l(),RE=a("li"),vMe=a("strong"),rAr=o("bert"),tAr=o(" \u2014 "),cY=a("a"),aAr=o("TFBertForSequenceClassification"),nAr=o(" (BERT model)"),sAr=l(),PE=a("li"),FMe=a("strong"),lAr=o("camembert"),iAr=o(" \u2014 "),fY=a("a"),dAr=o("TFCamembertForSequenceClassification"),cAr=o(" (CamemBERT model)"),fAr=l(),BE=a("li"),TMe=a("strong"),mAr=o("convbert"),gAr=o(" \u2014 "),mY=a("a"),hAr=o("TFConvBertForSequenceClassification"),pAr=o(" (ConvBERT model)"),_Ar=l(),IE=a("li"),MMe=a("strong"),uAr=o("ctrl"),bAr=o(" \u2014 "),gY=a("a"),vAr=o("TFCTRLForSequenceClassification"),FAr=o(" (CTRL model)"),TAr=l(),NE=a("li"),EMe=a("strong"),MAr=o("deberta"),EAr=o(" \u2014 "),hY=a("a"),CAr=o("TFDebertaForSequenceClassification"),wAr=o(" (DeBERTa model)"),AAr=l(),qE=a("li"),CMe=a("strong"),LAr=o("deberta-v2"),yAr=o(" \u2014 "),pY=a("a"),xAr=o("TFDebertaV2ForSequenceClassification"),$Ar=o(" (DeBERTa-v2 model)"),kAr=l(),jE=a("li"),wMe=a("strong"),SAr=o("distilbert"),RAr=o(" \u2014 "),_Y=a("a"),PAr=o("TFDistilBertForSequenceClassification"),BAr=o(" (DistilBERT model)"),IAr=l(),DE=a("li"),AMe=a("strong"),NAr=o("electra"),qAr=o(" \u2014 "),uY=a("a"),jAr=o("TFElectraForSequenceClassification"),DAr=o(" (ELECTRA model)"),GAr=l(),GE=a("li"),LMe=a("strong"),OAr=o("flaubert"),VAr=o(" \u2014 "),bY=a("a"),XAr=o("TFFlaubertForSequenceClassification"),zAr=o(" (FlauBERT model)"),QAr=l(),OE=a("li"),yMe=a("strong"),WAr=o("funnel"),HAr=o(" \u2014 "),vY=a("a"),UAr=o("TFFunnelForSequenceClassification"),JAr=o(" (Funnel Transformer model)"),YAr=l(),VE=a("li"),xMe=a("strong"),KAr=o("gpt2"),ZAr=o(" \u2014 "),FY=a("a"),e6r=o("TFGPT2ForSequenceClassification"),o6r=o(" (OpenAI GPT-2 model)"),r6r=l(),XE=a("li"),$Me=a("strong"),t6r=o("gptj"),a6r=o(" \u2014 "),TY=a("a"),n6r=o("TFGPTJForSequenceClassification"),s6r=o(" (GPT-J model)"),l6r=l(),zE=a("li"),kMe=a("strong"),i6r=o("layoutlm"),d6r=o(" \u2014 "),MY=a("a"),c6r=o("TFLayoutLMForSequenceClassification"),f6r=o(" (LayoutLM model)"),m6r=l(),QE=a("li"),SMe=a("strong"),g6r=o("longformer"),h6r=o(" \u2014 "),EY=a("a"),p6r=o("TFLongformerForSequenceClassification"),_6r=o(" (Longformer model)"),u6r=l(),WE=a("li"),RMe=a("strong"),b6r=o("mobilebert"),v6r=o(" \u2014 "),CY=a("a"),F6r=o("TFMobileBertForSequenceClassification"),T6r=o(" (MobileBERT model)"),M6r=l(),HE=a("li"),PMe=a("strong"),E6r=o("mpnet"),C6r=o(" \u2014 "),wY=a("a"),w6r=o("TFMPNetForSequenceClassification"),A6r=o(" (MPNet model)"),L6r=l(),UE=a("li"),BMe=a("strong"),y6r=o("openai-gpt"),x6r=o(" \u2014 "),AY=a("a"),$6r=o("TFOpenAIGPTForSequenceClassification"),k6r=o(" (OpenAI GPT model)"),S6r=l(),JE=a("li"),IMe=a("strong"),R6r=o("rembert"),P6r=o(" \u2014 "),LY=a("a"),B6r=o("TFRemBertForSequenceClassification"),I6r=o(" (RemBERT model)"),N6r=l(),YE=a("li"),NMe=a("strong"),q6r=o("roberta"),j6r=o(" \u2014 "),yY=a("a"),D6r=o("TFRobertaForSequenceClassification"),G6r=o(" (RoBERTa model)"),O6r=l(),KE=a("li"),qMe=a("strong"),V6r=o("roformer"),X6r=o(" \u2014 "),xY=a("a"),z6r=o("TFRoFormerForSequenceClassification"),Q6r=o(" (RoFormer model)"),W6r=l(),ZE=a("li"),jMe=a("strong"),H6r=o("tapas"),U6r=o(" \u2014 "),$Y=a("a"),J6r=o("TFTapasForSequenceClassification"),Y6r=o(" (TAPAS model)"),K6r=l(),eC=a("li"),DMe=a("strong"),Z6r=o("transfo-xl"),eLr=o(" \u2014 "),kY=a("a"),oLr=o("TFTransfoXLForSequenceClassification"),rLr=o(" (Transformer-XL model)"),tLr=l(),oC=a("li"),GMe=a("strong"),aLr=o("xlm"),nLr=o(" \u2014 "),SY=a("a"),sLr=o("TFXLMForSequenceClassification"),lLr=o(" (XLM model)"),iLr=l(),rC=a("li"),OMe=a("strong"),dLr=o("xlm-roberta"),cLr=o(" \u2014 "),RY=a("a"),fLr=o("TFXLMRobertaForSequenceClassification"),mLr=o(" (XLM-RoBERTa model)"),gLr=l(),tC=a("li"),VMe=a("strong"),hLr=o("xlnet"),pLr=o(" \u2014 "),PY=a("a"),_Lr=o("TFXLNetForSequenceClassification"),uLr=o(" (XLNet model)"),bLr=l(),F(aC.$$.fragment),sXe=l(),Ec=a("h2"),nC=a("a"),XMe=a("span"),F(dx.$$.fragment),vLr=l(),zMe=a("span"),FLr=o("TFAutoModelForMultipleChoice"),lXe=l(),lr=a("div"),F(cx.$$.fragment),TLr=l(),Cc=a("p"),MLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),BY=a("a"),ELr=o("from_pretrained()"),CLr=o(" class method or the "),IY=a("a"),wLr=o("from_config()"),ALr=o(` class
method.`),LLr=l(),fx=a("p"),yLr=o("This class cannot be instantiated directly using "),QMe=a("code"),xLr=o("__init__()"),$Lr=o(" (throws an error)."),kLr=l(),Nt=a("div"),F(mx.$$.fragment),SLr=l(),WMe=a("p"),RLr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),PLr=l(),wc=a("p"),BLr=o(`Note:
Loading a model from its configuration file does `),HMe=a("strong"),ILr=o("not"),NLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NY=a("a"),qLr=o("from_pretrained()"),jLr=o(" to load the model weights."),DLr=l(),F(sC.$$.fragment),GLr=l(),Br=a("div"),F(gx.$$.fragment),OLr=l(),UMe=a("p"),VLr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),XLr=l(),gn=a("p"),zLr=o("The model class to instantiate is selected based on the "),JMe=a("code"),QLr=o("model_type"),WLr=o(` property of the config object (either
passed as an argument or loaded from `),YMe=a("code"),HLr=o("pretrained_model_name_or_path"),ULr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KMe=a("code"),JLr=o("pretrained_model_name_or_path"),YLr=o(":"),KLr=l(),_e=a("ul"),lC=a("li"),ZMe=a("strong"),ZLr=o("albert"),eyr=o(" \u2014 "),qY=a("a"),oyr=o("TFAlbertForMultipleChoice"),ryr=o(" (ALBERT model)"),tyr=l(),iC=a("li"),e4e=a("strong"),ayr=o("bert"),nyr=o(" \u2014 "),jY=a("a"),syr=o("TFBertForMultipleChoice"),lyr=o(" (BERT model)"),iyr=l(),dC=a("li"),o4e=a("strong"),dyr=o("camembert"),cyr=o(" \u2014 "),DY=a("a"),fyr=o("TFCamembertForMultipleChoice"),myr=o(" (CamemBERT model)"),gyr=l(),cC=a("li"),r4e=a("strong"),hyr=o("convbert"),pyr=o(" \u2014 "),GY=a("a"),_yr=o("TFConvBertForMultipleChoice"),uyr=o(" (ConvBERT model)"),byr=l(),fC=a("li"),t4e=a("strong"),vyr=o("distilbert"),Fyr=o(" \u2014 "),OY=a("a"),Tyr=o("TFDistilBertForMultipleChoice"),Myr=o(" (DistilBERT model)"),Eyr=l(),mC=a("li"),a4e=a("strong"),Cyr=o("electra"),wyr=o(" \u2014 "),VY=a("a"),Ayr=o("TFElectraForMultipleChoice"),Lyr=o(" (ELECTRA model)"),yyr=l(),gC=a("li"),n4e=a("strong"),xyr=o("flaubert"),$yr=o(" \u2014 "),XY=a("a"),kyr=o("TFFlaubertForMultipleChoice"),Syr=o(" (FlauBERT model)"),Ryr=l(),hC=a("li"),s4e=a("strong"),Pyr=o("funnel"),Byr=o(" \u2014 "),zY=a("a"),Iyr=o("TFFunnelForMultipleChoice"),Nyr=o(" (Funnel Transformer model)"),qyr=l(),pC=a("li"),l4e=a("strong"),jyr=o("longformer"),Dyr=o(" \u2014 "),QY=a("a"),Gyr=o("TFLongformerForMultipleChoice"),Oyr=o(" (Longformer model)"),Vyr=l(),_C=a("li"),i4e=a("strong"),Xyr=o("mobilebert"),zyr=o(" \u2014 "),WY=a("a"),Qyr=o("TFMobileBertForMultipleChoice"),Wyr=o(" (MobileBERT model)"),Hyr=l(),uC=a("li"),d4e=a("strong"),Uyr=o("mpnet"),Jyr=o(" \u2014 "),HY=a("a"),Yyr=o("TFMPNetForMultipleChoice"),Kyr=o(" (MPNet model)"),Zyr=l(),bC=a("li"),c4e=a("strong"),e9r=o("rembert"),o9r=o(" \u2014 "),UY=a("a"),r9r=o("TFRemBertForMultipleChoice"),t9r=o(" (RemBERT model)"),a9r=l(),vC=a("li"),f4e=a("strong"),n9r=o("roberta"),s9r=o(" \u2014 "),JY=a("a"),l9r=o("TFRobertaForMultipleChoice"),i9r=o(" (RoBERTa model)"),d9r=l(),FC=a("li"),m4e=a("strong"),c9r=o("roformer"),f9r=o(" \u2014 "),YY=a("a"),m9r=o("TFRoFormerForMultipleChoice"),g9r=o(" (RoFormer model)"),h9r=l(),TC=a("li"),g4e=a("strong"),p9r=o("xlm"),_9r=o(" \u2014 "),KY=a("a"),u9r=o("TFXLMForMultipleChoice"),b9r=o(" (XLM model)"),v9r=l(),MC=a("li"),h4e=a("strong"),F9r=o("xlm-roberta"),T9r=o(" \u2014 "),ZY=a("a"),M9r=o("TFXLMRobertaForMultipleChoice"),E9r=o(" (XLM-RoBERTa model)"),C9r=l(),EC=a("li"),p4e=a("strong"),w9r=o("xlnet"),A9r=o(" \u2014 "),eK=a("a"),L9r=o("TFXLNetForMultipleChoice"),y9r=o(" (XLNet model)"),x9r=l(),F(CC.$$.fragment),iXe=l(),Ac=a("h2"),wC=a("a"),_4e=a("span"),F(hx.$$.fragment),$9r=l(),u4e=a("span"),k9r=o("TFAutoModelForNextSentencePrediction"),dXe=l(),ir=a("div"),F(px.$$.fragment),S9r=l(),Lc=a("p"),R9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),oK=a("a"),P9r=o("from_pretrained()"),B9r=o(" class method or the "),rK=a("a"),I9r=o("from_config()"),N9r=o(` class
method.`),q9r=l(),_x=a("p"),j9r=o("This class cannot be instantiated directly using "),b4e=a("code"),D9r=o("__init__()"),G9r=o(" (throws an error)."),O9r=l(),qt=a("div"),F(ux.$$.fragment),V9r=l(),v4e=a("p"),X9r=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),z9r=l(),yc=a("p"),Q9r=o(`Note:
Loading a model from its configuration file does `),F4e=a("strong"),W9r=o("not"),H9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tK=a("a"),U9r=o("from_pretrained()"),J9r=o(" to load the model weights."),Y9r=l(),F(AC.$$.fragment),K9r=l(),Ir=a("div"),F(bx.$$.fragment),Z9r=l(),T4e=a("p"),exr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),oxr=l(),hn=a("p"),rxr=o("The model class to instantiate is selected based on the "),M4e=a("code"),txr=o("model_type"),axr=o(` property of the config object (either
passed as an argument or loaded from `),E4e=a("code"),nxr=o("pretrained_model_name_or_path"),sxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C4e=a("code"),lxr=o("pretrained_model_name_or_path"),ixr=o(":"),dxr=l(),vx=a("ul"),LC=a("li"),w4e=a("strong"),cxr=o("bert"),fxr=o(" \u2014 "),aK=a("a"),mxr=o("TFBertForNextSentencePrediction"),gxr=o(" (BERT model)"),hxr=l(),yC=a("li"),A4e=a("strong"),pxr=o("mobilebert"),_xr=o(" \u2014 "),nK=a("a"),uxr=o("TFMobileBertForNextSentencePrediction"),bxr=o(" (MobileBERT model)"),vxr=l(),F(xC.$$.fragment),cXe=l(),xc=a("h2"),$C=a("a"),L4e=a("span"),F(Fx.$$.fragment),Fxr=l(),y4e=a("span"),Txr=o("TFAutoModelForTableQuestionAnswering"),fXe=l(),dr=a("div"),F(Tx.$$.fragment),Mxr=l(),$c=a("p"),Exr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),sK=a("a"),Cxr=o("from_pretrained()"),wxr=o(" class method or the "),lK=a("a"),Axr=o("from_config()"),Lxr=o(` class
method.`),yxr=l(),Mx=a("p"),xxr=o("This class cannot be instantiated directly using "),x4e=a("code"),$xr=o("__init__()"),kxr=o(" (throws an error)."),Sxr=l(),jt=a("div"),F(Ex.$$.fragment),Rxr=l(),$4e=a("p"),Pxr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Bxr=l(),kc=a("p"),Ixr=o(`Note:
Loading a model from its configuration file does `),k4e=a("strong"),Nxr=o("not"),qxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iK=a("a"),jxr=o("from_pretrained()"),Dxr=o(" to load the model weights."),Gxr=l(),F(kC.$$.fragment),Oxr=l(),Nr=a("div"),F(Cx.$$.fragment),Vxr=l(),S4e=a("p"),Xxr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),zxr=l(),pn=a("p"),Qxr=o("The model class to instantiate is selected based on the "),R4e=a("code"),Wxr=o("model_type"),Hxr=o(` property of the config object (either
passed as an argument or loaded from `),P4e=a("code"),Uxr=o("pretrained_model_name_or_path"),Jxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B4e=a("code"),Yxr=o("pretrained_model_name_or_path"),Kxr=o(":"),Zxr=l(),I4e=a("ul"),SC=a("li"),N4e=a("strong"),e$r=o("tapas"),o$r=o(" \u2014 "),dK=a("a"),r$r=o("TFTapasForQuestionAnswering"),t$r=o(" (TAPAS model)"),a$r=l(),F(RC.$$.fragment),mXe=l(),Sc=a("h2"),PC=a("a"),q4e=a("span"),F(wx.$$.fragment),n$r=l(),j4e=a("span"),s$r=o("TFAutoModelForTokenClassification"),gXe=l(),cr=a("div"),F(Ax.$$.fragment),l$r=l(),Rc=a("p"),i$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),cK=a("a"),d$r=o("from_pretrained()"),c$r=o(" class method or the "),fK=a("a"),f$r=o("from_config()"),m$r=o(` class
method.`),g$r=l(),Lx=a("p"),h$r=o("This class cannot be instantiated directly using "),D4e=a("code"),p$r=o("__init__()"),_$r=o(" (throws an error)."),u$r=l(),Dt=a("div"),F(yx.$$.fragment),b$r=l(),G4e=a("p"),v$r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),F$r=l(),Pc=a("p"),T$r=o(`Note:
Loading a model from its configuration file does `),O4e=a("strong"),M$r=o("not"),E$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mK=a("a"),C$r=o("from_pretrained()"),w$r=o(" to load the model weights."),A$r=l(),F(BC.$$.fragment),L$r=l(),qr=a("div"),F(xx.$$.fragment),y$r=l(),V4e=a("p"),x$r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),$$r=l(),_n=a("p"),k$r=o("The model class to instantiate is selected based on the "),X4e=a("code"),S$r=o("model_type"),R$r=o(` property of the config object (either
passed as an argument or loaded from `),z4e=a("code"),P$r=o("pretrained_model_name_or_path"),B$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q4e=a("code"),I$r=o("pretrained_model_name_or_path"),N$r=o(":"),q$r=l(),de=a("ul"),IC=a("li"),W4e=a("strong"),j$r=o("albert"),D$r=o(" \u2014 "),gK=a("a"),G$r=o("TFAlbertForTokenClassification"),O$r=o(" (ALBERT model)"),V$r=l(),NC=a("li"),H4e=a("strong"),X$r=o("bert"),z$r=o(" \u2014 "),hK=a("a"),Q$r=o("TFBertForTokenClassification"),W$r=o(" (BERT model)"),H$r=l(),qC=a("li"),U4e=a("strong"),U$r=o("camembert"),J$r=o(" \u2014 "),pK=a("a"),Y$r=o("TFCamembertForTokenClassification"),K$r=o(" (CamemBERT model)"),Z$r=l(),jC=a("li"),J4e=a("strong"),ekr=o("convbert"),okr=o(" \u2014 "),_K=a("a"),rkr=o("TFConvBertForTokenClassification"),tkr=o(" (ConvBERT model)"),akr=l(),DC=a("li"),Y4e=a("strong"),nkr=o("deberta"),skr=o(" \u2014 "),uK=a("a"),lkr=o("TFDebertaForTokenClassification"),ikr=o(" (DeBERTa model)"),dkr=l(),GC=a("li"),K4e=a("strong"),ckr=o("deberta-v2"),fkr=o(" \u2014 "),bK=a("a"),mkr=o("TFDebertaV2ForTokenClassification"),gkr=o(" (DeBERTa-v2 model)"),hkr=l(),OC=a("li"),Z4e=a("strong"),pkr=o("distilbert"),_kr=o(" \u2014 "),vK=a("a"),ukr=o("TFDistilBertForTokenClassification"),bkr=o(" (DistilBERT model)"),vkr=l(),VC=a("li"),eEe=a("strong"),Fkr=o("electra"),Tkr=o(" \u2014 "),FK=a("a"),Mkr=o("TFElectraForTokenClassification"),Ekr=o(" (ELECTRA model)"),Ckr=l(),XC=a("li"),oEe=a("strong"),wkr=o("flaubert"),Akr=o(" \u2014 "),TK=a("a"),Lkr=o("TFFlaubertForTokenClassification"),ykr=o(" (FlauBERT model)"),xkr=l(),zC=a("li"),rEe=a("strong"),$kr=o("funnel"),kkr=o(" \u2014 "),MK=a("a"),Skr=o("TFFunnelForTokenClassification"),Rkr=o(" (Funnel Transformer model)"),Pkr=l(),QC=a("li"),tEe=a("strong"),Bkr=o("layoutlm"),Ikr=o(" \u2014 "),EK=a("a"),Nkr=o("TFLayoutLMForTokenClassification"),qkr=o(" (LayoutLM model)"),jkr=l(),WC=a("li"),aEe=a("strong"),Dkr=o("longformer"),Gkr=o(" \u2014 "),CK=a("a"),Okr=o("TFLongformerForTokenClassification"),Vkr=o(" (Longformer model)"),Xkr=l(),HC=a("li"),nEe=a("strong"),zkr=o("mobilebert"),Qkr=o(" \u2014 "),wK=a("a"),Wkr=o("TFMobileBertForTokenClassification"),Hkr=o(" (MobileBERT model)"),Ukr=l(),UC=a("li"),sEe=a("strong"),Jkr=o("mpnet"),Ykr=o(" \u2014 "),AK=a("a"),Kkr=o("TFMPNetForTokenClassification"),Zkr=o(" (MPNet model)"),eSr=l(),JC=a("li"),lEe=a("strong"),oSr=o("rembert"),rSr=o(" \u2014 "),LK=a("a"),tSr=o("TFRemBertForTokenClassification"),aSr=o(" (RemBERT model)"),nSr=l(),YC=a("li"),iEe=a("strong"),sSr=o("roberta"),lSr=o(" \u2014 "),yK=a("a"),iSr=o("TFRobertaForTokenClassification"),dSr=o(" (RoBERTa model)"),cSr=l(),KC=a("li"),dEe=a("strong"),fSr=o("roformer"),mSr=o(" \u2014 "),xK=a("a"),gSr=o("TFRoFormerForTokenClassification"),hSr=o(" (RoFormer model)"),pSr=l(),ZC=a("li"),cEe=a("strong"),_Sr=o("xlm"),uSr=o(" \u2014 "),$K=a("a"),bSr=o("TFXLMForTokenClassification"),vSr=o(" (XLM model)"),FSr=l(),e3=a("li"),fEe=a("strong"),TSr=o("xlm-roberta"),MSr=o(" \u2014 "),kK=a("a"),ESr=o("TFXLMRobertaForTokenClassification"),CSr=o(" (XLM-RoBERTa model)"),wSr=l(),o3=a("li"),mEe=a("strong"),ASr=o("xlnet"),LSr=o(" \u2014 "),SK=a("a"),ySr=o("TFXLNetForTokenClassification"),xSr=o(" (XLNet model)"),$Sr=l(),F(r3.$$.fragment),hXe=l(),Bc=a("h2"),t3=a("a"),gEe=a("span"),F($x.$$.fragment),kSr=l(),hEe=a("span"),SSr=o("TFAutoModelForQuestionAnswering"),pXe=l(),fr=a("div"),F(kx.$$.fragment),RSr=l(),Ic=a("p"),PSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),RK=a("a"),BSr=o("from_pretrained()"),ISr=o(" class method or the "),PK=a("a"),NSr=o("from_config()"),qSr=o(` class
method.`),jSr=l(),Sx=a("p"),DSr=o("This class cannot be instantiated directly using "),pEe=a("code"),GSr=o("__init__()"),OSr=o(" (throws an error)."),VSr=l(),Gt=a("div"),F(Rx.$$.fragment),XSr=l(),_Ee=a("p"),zSr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),QSr=l(),Nc=a("p"),WSr=o(`Note:
Loading a model from its configuration file does `),uEe=a("strong"),HSr=o("not"),USr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BK=a("a"),JSr=o("from_pretrained()"),YSr=o(" to load the model weights."),KSr=l(),F(a3.$$.fragment),ZSr=l(),jr=a("div"),F(Px.$$.fragment),eRr=l(),bEe=a("p"),oRr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),rRr=l(),un=a("p"),tRr=o("The model class to instantiate is selected based on the "),vEe=a("code"),aRr=o("model_type"),nRr=o(` property of the config object (either
passed as an argument or loaded from `),FEe=a("code"),sRr=o("pretrained_model_name_or_path"),lRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TEe=a("code"),iRr=o("pretrained_model_name_or_path"),dRr=o(":"),cRr=l(),ce=a("ul"),n3=a("li"),MEe=a("strong"),fRr=o("albert"),mRr=o(" \u2014 "),IK=a("a"),gRr=o("TFAlbertForQuestionAnswering"),hRr=o(" (ALBERT model)"),pRr=l(),s3=a("li"),EEe=a("strong"),_Rr=o("bert"),uRr=o(" \u2014 "),NK=a("a"),bRr=o("TFBertForQuestionAnswering"),vRr=o(" (BERT model)"),FRr=l(),l3=a("li"),CEe=a("strong"),TRr=o("camembert"),MRr=o(" \u2014 "),qK=a("a"),ERr=o("TFCamembertForQuestionAnswering"),CRr=o(" (CamemBERT model)"),wRr=l(),i3=a("li"),wEe=a("strong"),ARr=o("convbert"),LRr=o(" \u2014 "),jK=a("a"),yRr=o("TFConvBertForQuestionAnswering"),xRr=o(" (ConvBERT model)"),$Rr=l(),d3=a("li"),AEe=a("strong"),kRr=o("deberta"),SRr=o(" \u2014 "),DK=a("a"),RRr=o("TFDebertaForQuestionAnswering"),PRr=o(" (DeBERTa model)"),BRr=l(),c3=a("li"),LEe=a("strong"),IRr=o("deberta-v2"),NRr=o(" \u2014 "),GK=a("a"),qRr=o("TFDebertaV2ForQuestionAnswering"),jRr=o(" (DeBERTa-v2 model)"),DRr=l(),f3=a("li"),yEe=a("strong"),GRr=o("distilbert"),ORr=o(" \u2014 "),OK=a("a"),VRr=o("TFDistilBertForQuestionAnswering"),XRr=o(" (DistilBERT model)"),zRr=l(),m3=a("li"),xEe=a("strong"),QRr=o("electra"),WRr=o(" \u2014 "),VK=a("a"),HRr=o("TFElectraForQuestionAnswering"),URr=o(" (ELECTRA model)"),JRr=l(),g3=a("li"),$Ee=a("strong"),YRr=o("flaubert"),KRr=o(" \u2014 "),XK=a("a"),ZRr=o("TFFlaubertForQuestionAnsweringSimple"),ePr=o(" (FlauBERT model)"),oPr=l(),h3=a("li"),kEe=a("strong"),rPr=o("funnel"),tPr=o(" \u2014 "),zK=a("a"),aPr=o("TFFunnelForQuestionAnswering"),nPr=o(" (Funnel Transformer model)"),sPr=l(),p3=a("li"),SEe=a("strong"),lPr=o("gptj"),iPr=o(" \u2014 "),QK=a("a"),dPr=o("TFGPTJForQuestionAnswering"),cPr=o(" (GPT-J model)"),fPr=l(),_3=a("li"),REe=a("strong"),mPr=o("longformer"),gPr=o(" \u2014 "),WK=a("a"),hPr=o("TFLongformerForQuestionAnswering"),pPr=o(" (Longformer model)"),_Pr=l(),u3=a("li"),PEe=a("strong"),uPr=o("mobilebert"),bPr=o(" \u2014 "),HK=a("a"),vPr=o("TFMobileBertForQuestionAnswering"),FPr=o(" (MobileBERT model)"),TPr=l(),b3=a("li"),BEe=a("strong"),MPr=o("mpnet"),EPr=o(" \u2014 "),UK=a("a"),CPr=o("TFMPNetForQuestionAnswering"),wPr=o(" (MPNet model)"),APr=l(),v3=a("li"),IEe=a("strong"),LPr=o("rembert"),yPr=o(" \u2014 "),JK=a("a"),xPr=o("TFRemBertForQuestionAnswering"),$Pr=o(" (RemBERT model)"),kPr=l(),F3=a("li"),NEe=a("strong"),SPr=o("roberta"),RPr=o(" \u2014 "),YK=a("a"),PPr=o("TFRobertaForQuestionAnswering"),BPr=o(" (RoBERTa model)"),IPr=l(),T3=a("li"),qEe=a("strong"),NPr=o("roformer"),qPr=o(" \u2014 "),KK=a("a"),jPr=o("TFRoFormerForQuestionAnswering"),DPr=o(" (RoFormer model)"),GPr=l(),M3=a("li"),jEe=a("strong"),OPr=o("xlm"),VPr=o(" \u2014 "),ZK=a("a"),XPr=o("TFXLMForQuestionAnsweringSimple"),zPr=o(" (XLM model)"),QPr=l(),E3=a("li"),DEe=a("strong"),WPr=o("xlm-roberta"),HPr=o(" \u2014 "),eZ=a("a"),UPr=o("TFXLMRobertaForQuestionAnswering"),JPr=o(" (XLM-RoBERTa model)"),YPr=l(),C3=a("li"),GEe=a("strong"),KPr=o("xlnet"),ZPr=o(" \u2014 "),oZ=a("a"),eBr=o("TFXLNetForQuestionAnsweringSimple"),oBr=o(" (XLNet model)"),rBr=l(),F(w3.$$.fragment),_Xe=l(),qc=a("h2"),A3=a("a"),OEe=a("span"),F(Bx.$$.fragment),tBr=l(),VEe=a("span"),aBr=o("TFAutoModelForVision2Seq"),uXe=l(),mr=a("div"),F(Ix.$$.fragment),nBr=l(),jc=a("p"),sBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),rZ=a("a"),lBr=o("from_pretrained()"),iBr=o(" class method or the "),tZ=a("a"),dBr=o("from_config()"),cBr=o(` class
method.`),fBr=l(),Nx=a("p"),mBr=o("This class cannot be instantiated directly using "),XEe=a("code"),gBr=o("__init__()"),hBr=o(" (throws an error)."),pBr=l(),Ot=a("div"),F(qx.$$.fragment),_Br=l(),zEe=a("p"),uBr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),bBr=l(),Dc=a("p"),vBr=o(`Note:
Loading a model from its configuration file does `),QEe=a("strong"),FBr=o("not"),TBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aZ=a("a"),MBr=o("from_pretrained()"),EBr=o(" to load the model weights."),CBr=l(),F(L3.$$.fragment),wBr=l(),Dr=a("div"),F(jx.$$.fragment),ABr=l(),WEe=a("p"),LBr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),yBr=l(),bn=a("p"),xBr=o("The model class to instantiate is selected based on the "),HEe=a("code"),$Br=o("model_type"),kBr=o(` property of the config object (either
passed as an argument or loaded from `),UEe=a("code"),SBr=o("pretrained_model_name_or_path"),RBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JEe=a("code"),PBr=o("pretrained_model_name_or_path"),BBr=o(":"),IBr=l(),YEe=a("ul"),y3=a("li"),KEe=a("strong"),NBr=o("vision-encoder-decoder"),qBr=o(" \u2014 "),nZ=a("a"),jBr=o("TFVisionEncoderDecoderModel"),DBr=o(" (Vision Encoder decoder model)"),GBr=l(),F(x3.$$.fragment),bXe=l(),Gc=a("h2"),$3=a("a"),ZEe=a("span"),F(Dx.$$.fragment),OBr=l(),eCe=a("span"),VBr=o("TFAutoModelForSpeechSeq2Seq"),vXe=l(),gr=a("div"),F(Gx.$$.fragment),XBr=l(),Oc=a("p"),zBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),sZ=a("a"),QBr=o("from_pretrained()"),WBr=o(" class method or the "),lZ=a("a"),HBr=o("from_config()"),UBr=o(` class
method.`),JBr=l(),Ox=a("p"),YBr=o("This class cannot be instantiated directly using "),oCe=a("code"),KBr=o("__init__()"),ZBr=o(" (throws an error)."),eIr=l(),Vt=a("div"),F(Vx.$$.fragment),oIr=l(),rCe=a("p"),rIr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),tIr=l(),Vc=a("p"),aIr=o(`Note:
Loading a model from its configuration file does `),tCe=a("strong"),nIr=o("not"),sIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iZ=a("a"),lIr=o("from_pretrained()"),iIr=o(" to load the model weights."),dIr=l(),F(k3.$$.fragment),cIr=l(),Gr=a("div"),F(Xx.$$.fragment),fIr=l(),aCe=a("p"),mIr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),gIr=l(),vn=a("p"),hIr=o("The model class to instantiate is selected based on the "),nCe=a("code"),pIr=o("model_type"),_Ir=o(` property of the config object (either
passed as an argument or loaded from `),sCe=a("code"),uIr=o("pretrained_model_name_or_path"),bIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lCe=a("code"),vIr=o("pretrained_model_name_or_path"),FIr=o(":"),TIr=l(),iCe=a("ul"),S3=a("li"),dCe=a("strong"),MIr=o("speech_to_text"),EIr=o(" \u2014 "),dZ=a("a"),CIr=o("TFSpeech2TextForConditionalGeneration"),wIr=o(" (Speech2Text model)"),AIr=l(),F(R3.$$.fragment),FXe=l(),Xc=a("h2"),P3=a("a"),cCe=a("span"),F(zx.$$.fragment),LIr=l(),fCe=a("span"),yIr=o("FlaxAutoModel"),TXe=l(),hr=a("div"),F(Qx.$$.fragment),xIr=l(),zc=a("p"),$Ir=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),cZ=a("a"),kIr=o("from_pretrained()"),SIr=o(" class method or the "),fZ=a("a"),RIr=o("from_config()"),PIr=o(` class
method.`),BIr=l(),Wx=a("p"),IIr=o("This class cannot be instantiated directly using "),mCe=a("code"),NIr=o("__init__()"),qIr=o(" (throws an error)."),jIr=l(),Xt=a("div"),F(Hx.$$.fragment),DIr=l(),gCe=a("p"),GIr=o("Instantiates one of the base model classes of the library from a configuration."),OIr=l(),Qc=a("p"),VIr=o(`Note:
Loading a model from its configuration file does `),hCe=a("strong"),XIr=o("not"),zIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mZ=a("a"),QIr=o("from_pretrained()"),WIr=o(" to load the model weights."),HIr=l(),F(B3.$$.fragment),UIr=l(),Or=a("div"),F(Ux.$$.fragment),JIr=l(),pCe=a("p"),YIr=o("Instantiate one of the base model classes of the library from a pretrained model."),KIr=l(),Fn=a("p"),ZIr=o("The model class to instantiate is selected based on the "),_Ce=a("code"),eNr=o("model_type"),oNr=o(` property of the config object (either
passed as an argument or loaded from `),uCe=a("code"),rNr=o("pretrained_model_name_or_path"),tNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bCe=a("code"),aNr=o("pretrained_model_name_or_path"),nNr=o(":"),sNr=l(),oe=a("ul"),I3=a("li"),vCe=a("strong"),lNr=o("albert"),iNr=o(" \u2014 "),gZ=a("a"),dNr=o("FlaxAlbertModel"),cNr=o(" (ALBERT model)"),fNr=l(),N3=a("li"),FCe=a("strong"),mNr=o("bart"),gNr=o(" \u2014 "),hZ=a("a"),hNr=o("FlaxBartModel"),pNr=o(" (BART model)"),_Nr=l(),q3=a("li"),TCe=a("strong"),uNr=o("beit"),bNr=o(" \u2014 "),pZ=a("a"),vNr=o("FlaxBeitModel"),FNr=o(" (BEiT model)"),TNr=l(),j3=a("li"),MCe=a("strong"),MNr=o("bert"),ENr=o(" \u2014 "),_Z=a("a"),CNr=o("FlaxBertModel"),wNr=o(" (BERT model)"),ANr=l(),D3=a("li"),ECe=a("strong"),LNr=o("big_bird"),yNr=o(" \u2014 "),uZ=a("a"),xNr=o("FlaxBigBirdModel"),$Nr=o(" (BigBird model)"),kNr=l(),G3=a("li"),CCe=a("strong"),SNr=o("blenderbot"),RNr=o(" \u2014 "),bZ=a("a"),PNr=o("FlaxBlenderbotModel"),BNr=o(" (Blenderbot model)"),INr=l(),O3=a("li"),wCe=a("strong"),NNr=o("blenderbot-small"),qNr=o(" \u2014 "),vZ=a("a"),jNr=o("FlaxBlenderbotSmallModel"),DNr=o(" (BlenderbotSmall model)"),GNr=l(),V3=a("li"),ACe=a("strong"),ONr=o("clip"),VNr=o(" \u2014 "),FZ=a("a"),XNr=o("FlaxCLIPModel"),zNr=o(" (CLIP model)"),QNr=l(),X3=a("li"),LCe=a("strong"),WNr=o("distilbert"),HNr=o(" \u2014 "),TZ=a("a"),UNr=o("FlaxDistilBertModel"),JNr=o(" (DistilBERT model)"),YNr=l(),z3=a("li"),yCe=a("strong"),KNr=o("electra"),ZNr=o(" \u2014 "),MZ=a("a"),eqr=o("FlaxElectraModel"),oqr=o(" (ELECTRA model)"),rqr=l(),Q3=a("li"),xCe=a("strong"),tqr=o("gpt2"),aqr=o(" \u2014 "),EZ=a("a"),nqr=o("FlaxGPT2Model"),sqr=o(" (OpenAI GPT-2 model)"),lqr=l(),W3=a("li"),$Ce=a("strong"),iqr=o("gpt_neo"),dqr=o(" \u2014 "),CZ=a("a"),cqr=o("FlaxGPTNeoModel"),fqr=o(" (GPT Neo model)"),mqr=l(),H3=a("li"),kCe=a("strong"),gqr=o("gptj"),hqr=o(" \u2014 "),wZ=a("a"),pqr=o("FlaxGPTJModel"),_qr=o(" (GPT-J model)"),uqr=l(),U3=a("li"),SCe=a("strong"),bqr=o("longt5"),vqr=o(" \u2014 "),AZ=a("a"),Fqr=o("FlaxLongT5Model"),Tqr=o(" (LongT5 model)"),Mqr=l(),J3=a("li"),RCe=a("strong"),Eqr=o("marian"),Cqr=o(" \u2014 "),LZ=a("a"),wqr=o("FlaxMarianModel"),Aqr=o(" (Marian model)"),Lqr=l(),Y3=a("li"),PCe=a("strong"),yqr=o("mbart"),xqr=o(" \u2014 "),yZ=a("a"),$qr=o("FlaxMBartModel"),kqr=o(" (mBART model)"),Sqr=l(),K3=a("li"),BCe=a("strong"),Rqr=o("mt5"),Pqr=o(" \u2014 "),xZ=a("a"),Bqr=o("FlaxMT5Model"),Iqr=o(" (MT5 model)"),Nqr=l(),Z3=a("li"),ICe=a("strong"),qqr=o("opt"),jqr=o(" \u2014 "),$Z=a("a"),Dqr=o("FlaxOPTModel"),Gqr=o(" (OPT model)"),Oqr=l(),e5=a("li"),NCe=a("strong"),Vqr=o("pegasus"),Xqr=o(" \u2014 "),kZ=a("a"),zqr=o("FlaxPegasusModel"),Qqr=o(" (Pegasus model)"),Wqr=l(),o5=a("li"),qCe=a("strong"),Hqr=o("roberta"),Uqr=o(" \u2014 "),SZ=a("a"),Jqr=o("FlaxRobertaModel"),Yqr=o(" (RoBERTa model)"),Kqr=l(),r5=a("li"),jCe=a("strong"),Zqr=o("roformer"),ejr=o(" \u2014 "),RZ=a("a"),ojr=o("FlaxRoFormerModel"),rjr=o(" (RoFormer model)"),tjr=l(),t5=a("li"),DCe=a("strong"),ajr=o("t5"),njr=o(" \u2014 "),PZ=a("a"),sjr=o("FlaxT5Model"),ljr=o(" (T5 model)"),ijr=l(),a5=a("li"),GCe=a("strong"),djr=o("vision-text-dual-encoder"),cjr=o(" \u2014 "),BZ=a("a"),fjr=o("FlaxVisionTextDualEncoderModel"),mjr=o(" (VisionTextDualEncoder model)"),gjr=l(),n5=a("li"),OCe=a("strong"),hjr=o("vit"),pjr=o(" \u2014 "),IZ=a("a"),_jr=o("FlaxViTModel"),ujr=o(" (ViT model)"),bjr=l(),s5=a("li"),VCe=a("strong"),vjr=o("wav2vec2"),Fjr=o(" \u2014 "),NZ=a("a"),Tjr=o("FlaxWav2Vec2Model"),Mjr=o(" (Wav2Vec2 model)"),Ejr=l(),l5=a("li"),XCe=a("strong"),Cjr=o("xglm"),wjr=o(" \u2014 "),qZ=a("a"),Ajr=o("FlaxXGLMModel"),Ljr=o(" (XGLM model)"),yjr=l(),i5=a("li"),zCe=a("strong"),xjr=o("xlm-roberta"),$jr=o(" \u2014 "),jZ=a("a"),kjr=o("FlaxXLMRobertaModel"),Sjr=o(" (XLM-RoBERTa model)"),Rjr=l(),F(d5.$$.fragment),MXe=l(),Wc=a("h2"),c5=a("a"),QCe=a("span"),F(Jx.$$.fragment),Pjr=l(),WCe=a("span"),Bjr=o("FlaxAutoModelForCausalLM"),EXe=l(),pr=a("div"),F(Yx.$$.fragment),Ijr=l(),Hc=a("p"),Njr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),DZ=a("a"),qjr=o("from_pretrained()"),jjr=o(" class method or the "),GZ=a("a"),Djr=o("from_config()"),Gjr=o(` class
method.`),Ojr=l(),Kx=a("p"),Vjr=o("This class cannot be instantiated directly using "),HCe=a("code"),Xjr=o("__init__()"),zjr=o(" (throws an error)."),Qjr=l(),zt=a("div"),F(Zx.$$.fragment),Wjr=l(),UCe=a("p"),Hjr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Ujr=l(),Uc=a("p"),Jjr=o(`Note:
Loading a model from its configuration file does `),JCe=a("strong"),Yjr=o("not"),Kjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OZ=a("a"),Zjr=o("from_pretrained()"),eDr=o(" to load the model weights."),oDr=l(),F(f5.$$.fragment),rDr=l(),Vr=a("div"),F(e$.$$.fragment),tDr=l(),YCe=a("p"),aDr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),nDr=l(),Tn=a("p"),sDr=o("The model class to instantiate is selected based on the "),KCe=a("code"),lDr=o("model_type"),iDr=o(` property of the config object (either
passed as an argument or loaded from `),ZCe=a("code"),dDr=o("pretrained_model_name_or_path"),cDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e3e=a("code"),fDr=o("pretrained_model_name_or_path"),mDr=o(":"),gDr=l(),xe=a("ul"),m5=a("li"),o3e=a("strong"),hDr=o("bart"),pDr=o(" \u2014 "),VZ=a("a"),_Dr=o("FlaxBartForCausalLM"),uDr=o(" (BART model)"),bDr=l(),g5=a("li"),r3e=a("strong"),vDr=o("bert"),FDr=o(" \u2014 "),XZ=a("a"),TDr=o("FlaxBertForCausalLM"),MDr=o(" (BERT model)"),EDr=l(),h5=a("li"),t3e=a("strong"),CDr=o("big_bird"),wDr=o(" \u2014 "),zZ=a("a"),ADr=o("FlaxBigBirdForCausalLM"),LDr=o(" (BigBird model)"),yDr=l(),p5=a("li"),a3e=a("strong"),xDr=o("electra"),$Dr=o(" \u2014 "),QZ=a("a"),kDr=o("FlaxElectraForCausalLM"),SDr=o(" (ELECTRA model)"),RDr=l(),_5=a("li"),n3e=a("strong"),PDr=o("gpt2"),BDr=o(" \u2014 "),WZ=a("a"),IDr=o("FlaxGPT2LMHeadModel"),NDr=o(" (OpenAI GPT-2 model)"),qDr=l(),u5=a("li"),s3e=a("strong"),jDr=o("gpt_neo"),DDr=o(" \u2014 "),HZ=a("a"),GDr=o("FlaxGPTNeoForCausalLM"),ODr=o(" (GPT Neo model)"),VDr=l(),b5=a("li"),l3e=a("strong"),XDr=o("gptj"),zDr=o(" \u2014 "),UZ=a("a"),QDr=o("FlaxGPTJForCausalLM"),WDr=o(" (GPT-J model)"),HDr=l(),v5=a("li"),i3e=a("strong"),UDr=o("opt"),JDr=o(" \u2014 "),JZ=a("a"),YDr=o("FlaxOPTForCausalLM"),KDr=o(" (OPT model)"),ZDr=l(),F5=a("li"),d3e=a("strong"),eGr=o("roberta"),oGr=o(" \u2014 "),YZ=a("a"),rGr=o("FlaxRobertaForCausalLM"),tGr=o(" (RoBERTa model)"),aGr=l(),T5=a("li"),c3e=a("strong"),nGr=o("xglm"),sGr=o(" \u2014 "),KZ=a("a"),lGr=o("FlaxXGLMForCausalLM"),iGr=o(" (XGLM model)"),dGr=l(),F(M5.$$.fragment),CXe=l(),Jc=a("h2"),E5=a("a"),f3e=a("span"),F(o$.$$.fragment),cGr=l(),m3e=a("span"),fGr=o("FlaxAutoModelForPreTraining"),wXe=l(),_r=a("div"),F(r$.$$.fragment),mGr=l(),Yc=a("p"),gGr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),ZZ=a("a"),hGr=o("from_pretrained()"),pGr=o(" class method or the "),eee=a("a"),_Gr=o("from_config()"),uGr=o(` class
method.`),bGr=l(),t$=a("p"),vGr=o("This class cannot be instantiated directly using "),g3e=a("code"),FGr=o("__init__()"),TGr=o(" (throws an error)."),MGr=l(),Qt=a("div"),F(a$.$$.fragment),EGr=l(),h3e=a("p"),CGr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),wGr=l(),Kc=a("p"),AGr=o(`Note:
Loading a model from its configuration file does `),p3e=a("strong"),LGr=o("not"),yGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oee=a("a"),xGr=o("from_pretrained()"),$Gr=o(" to load the model weights."),kGr=l(),F(C5.$$.fragment),SGr=l(),Xr=a("div"),F(n$.$$.fragment),RGr=l(),_3e=a("p"),PGr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),BGr=l(),Mn=a("p"),IGr=o("The model class to instantiate is selected based on the "),u3e=a("code"),NGr=o("model_type"),qGr=o(` property of the config object (either
passed as an argument or loaded from `),b3e=a("code"),jGr=o("pretrained_model_name_or_path"),DGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v3e=a("code"),GGr=o("pretrained_model_name_or_path"),OGr=o(":"),VGr=l(),Ee=a("ul"),w5=a("li"),F3e=a("strong"),XGr=o("albert"),zGr=o(" \u2014 "),ree=a("a"),QGr=o("FlaxAlbertForPreTraining"),WGr=o(" (ALBERT model)"),HGr=l(),A5=a("li"),T3e=a("strong"),UGr=o("bart"),JGr=o(" \u2014 "),tee=a("a"),YGr=o("FlaxBartForConditionalGeneration"),KGr=o(" (BART model)"),ZGr=l(),L5=a("li"),M3e=a("strong"),eOr=o("bert"),oOr=o(" \u2014 "),aee=a("a"),rOr=o("FlaxBertForPreTraining"),tOr=o(" (BERT model)"),aOr=l(),y5=a("li"),E3e=a("strong"),nOr=o("big_bird"),sOr=o(" \u2014 "),nee=a("a"),lOr=o("FlaxBigBirdForPreTraining"),iOr=o(" (BigBird model)"),dOr=l(),x5=a("li"),C3e=a("strong"),cOr=o("electra"),fOr=o(" \u2014 "),see=a("a"),mOr=o("FlaxElectraForPreTraining"),gOr=o(" (ELECTRA model)"),hOr=l(),$5=a("li"),w3e=a("strong"),pOr=o("longt5"),_Or=o(" \u2014 "),lee=a("a"),uOr=o("FlaxLongT5ForConditionalGeneration"),bOr=o(" (LongT5 model)"),vOr=l(),k5=a("li"),A3e=a("strong"),FOr=o("mbart"),TOr=o(" \u2014 "),iee=a("a"),MOr=o("FlaxMBartForConditionalGeneration"),EOr=o(" (mBART model)"),COr=l(),S5=a("li"),L3e=a("strong"),wOr=o("mt5"),AOr=o(" \u2014 "),dee=a("a"),LOr=o("FlaxMT5ForConditionalGeneration"),yOr=o(" (MT5 model)"),xOr=l(),R5=a("li"),y3e=a("strong"),$Or=o("roberta"),kOr=o(" \u2014 "),cee=a("a"),SOr=o("FlaxRobertaForMaskedLM"),ROr=o(" (RoBERTa model)"),POr=l(),P5=a("li"),x3e=a("strong"),BOr=o("roformer"),IOr=o(" \u2014 "),fee=a("a"),NOr=o("FlaxRoFormerForMaskedLM"),qOr=o(" (RoFormer model)"),jOr=l(),B5=a("li"),$3e=a("strong"),DOr=o("t5"),GOr=o(" \u2014 "),mee=a("a"),OOr=o("FlaxT5ForConditionalGeneration"),VOr=o(" (T5 model)"),XOr=l(),I5=a("li"),k3e=a("strong"),zOr=o("wav2vec2"),QOr=o(" \u2014 "),gee=a("a"),WOr=o("FlaxWav2Vec2ForPreTraining"),HOr=o(" (Wav2Vec2 model)"),UOr=l(),N5=a("li"),S3e=a("strong"),JOr=o("xlm-roberta"),YOr=o(" \u2014 "),hee=a("a"),KOr=o("FlaxXLMRobertaForMaskedLM"),ZOr=o(" (XLM-RoBERTa model)"),eVr=l(),F(q5.$$.fragment),AXe=l(),Zc=a("h2"),j5=a("a"),R3e=a("span"),F(s$.$$.fragment),oVr=l(),P3e=a("span"),rVr=o("FlaxAutoModelForMaskedLM"),LXe=l(),ur=a("div"),F(l$.$$.fragment),tVr=l(),ef=a("p"),aVr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),pee=a("a"),nVr=o("from_pretrained()"),sVr=o(" class method or the "),_ee=a("a"),lVr=o("from_config()"),iVr=o(` class
method.`),dVr=l(),i$=a("p"),cVr=o("This class cannot be instantiated directly using "),B3e=a("code"),fVr=o("__init__()"),mVr=o(" (throws an error)."),gVr=l(),Wt=a("div"),F(d$.$$.fragment),hVr=l(),I3e=a("p"),pVr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),_Vr=l(),of=a("p"),uVr=o(`Note:
Loading a model from its configuration file does `),N3e=a("strong"),bVr=o("not"),vVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uee=a("a"),FVr=o("from_pretrained()"),TVr=o(" to load the model weights."),MVr=l(),F(D5.$$.fragment),EVr=l(),zr=a("div"),F(c$.$$.fragment),CVr=l(),q3e=a("p"),wVr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),AVr=l(),En=a("p"),LVr=o("The model class to instantiate is selected based on the "),j3e=a("code"),yVr=o("model_type"),xVr=o(` property of the config object (either
passed as an argument or loaded from `),D3e=a("code"),$Vr=o("pretrained_model_name_or_path"),kVr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G3e=a("code"),SVr=o("pretrained_model_name_or_path"),RVr=o(":"),PVr=l(),$e=a("ul"),G5=a("li"),O3e=a("strong"),BVr=o("albert"),IVr=o(" \u2014 "),bee=a("a"),NVr=o("FlaxAlbertForMaskedLM"),qVr=o(" (ALBERT model)"),jVr=l(),O5=a("li"),V3e=a("strong"),DVr=o("bart"),GVr=o(" \u2014 "),vee=a("a"),OVr=o("FlaxBartForConditionalGeneration"),VVr=o(" (BART model)"),XVr=l(),V5=a("li"),X3e=a("strong"),zVr=o("bert"),QVr=o(" \u2014 "),Fee=a("a"),WVr=o("FlaxBertForMaskedLM"),HVr=o(" (BERT model)"),UVr=l(),X5=a("li"),z3e=a("strong"),JVr=o("big_bird"),YVr=o(" \u2014 "),Tee=a("a"),KVr=o("FlaxBigBirdForMaskedLM"),ZVr=o(" (BigBird model)"),eXr=l(),z5=a("li"),Q3e=a("strong"),oXr=o("distilbert"),rXr=o(" \u2014 "),Mee=a("a"),tXr=o("FlaxDistilBertForMaskedLM"),aXr=o(" (DistilBERT model)"),nXr=l(),Q5=a("li"),W3e=a("strong"),sXr=o("electra"),lXr=o(" \u2014 "),Eee=a("a"),iXr=o("FlaxElectraForMaskedLM"),dXr=o(" (ELECTRA model)"),cXr=l(),W5=a("li"),H3e=a("strong"),fXr=o("mbart"),mXr=o(" \u2014 "),Cee=a("a"),gXr=o("FlaxMBartForConditionalGeneration"),hXr=o(" (mBART model)"),pXr=l(),H5=a("li"),U3e=a("strong"),_Xr=o("roberta"),uXr=o(" \u2014 "),wee=a("a"),bXr=o("FlaxRobertaForMaskedLM"),vXr=o(" (RoBERTa model)"),FXr=l(),U5=a("li"),J3e=a("strong"),TXr=o("roformer"),MXr=o(" \u2014 "),Aee=a("a"),EXr=o("FlaxRoFormerForMaskedLM"),CXr=o(" (RoFormer model)"),wXr=l(),J5=a("li"),Y3e=a("strong"),AXr=o("xlm-roberta"),LXr=o(" \u2014 "),Lee=a("a"),yXr=o("FlaxXLMRobertaForMaskedLM"),xXr=o(" (XLM-RoBERTa model)"),$Xr=l(),F(Y5.$$.fragment),yXe=l(),rf=a("h2"),K5=a("a"),K3e=a("span"),F(f$.$$.fragment),kXr=l(),Z3e=a("span"),SXr=o("FlaxAutoModelForSeq2SeqLM"),xXe=l(),br=a("div"),F(m$.$$.fragment),RXr=l(),tf=a("p"),PXr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),yee=a("a"),BXr=o("from_pretrained()"),IXr=o(" class method or the "),xee=a("a"),NXr=o("from_config()"),qXr=o(` class
method.`),jXr=l(),g$=a("p"),DXr=o("This class cannot be instantiated directly using "),e5e=a("code"),GXr=o("__init__()"),OXr=o(" (throws an error)."),VXr=l(),Ht=a("div"),F(h$.$$.fragment),XXr=l(),o5e=a("p"),zXr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),QXr=l(),af=a("p"),WXr=o(`Note:
Loading a model from its configuration file does `),r5e=a("strong"),HXr=o("not"),UXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$ee=a("a"),JXr=o("from_pretrained()"),YXr=o(" to load the model weights."),KXr=l(),F(Z5.$$.fragment),ZXr=l(),Qr=a("div"),F(p$.$$.fragment),ezr=l(),t5e=a("p"),ozr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),rzr=l(),Cn=a("p"),tzr=o("The model class to instantiate is selected based on the "),a5e=a("code"),azr=o("model_type"),nzr=o(` property of the config object (either
passed as an argument or loaded from `),n5e=a("code"),szr=o("pretrained_model_name_or_path"),lzr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s5e=a("code"),izr=o("pretrained_model_name_or_path"),dzr=o(":"),czr=l(),ke=a("ul"),e0=a("li"),l5e=a("strong"),fzr=o("bart"),mzr=o(" \u2014 "),kee=a("a"),gzr=o("FlaxBartForConditionalGeneration"),hzr=o(" (BART model)"),pzr=l(),o0=a("li"),i5e=a("strong"),_zr=o("blenderbot"),uzr=o(" \u2014 "),See=a("a"),bzr=o("FlaxBlenderbotForConditionalGeneration"),vzr=o(" (Blenderbot model)"),Fzr=l(),r0=a("li"),d5e=a("strong"),Tzr=o("blenderbot-small"),Mzr=o(" \u2014 "),Ree=a("a"),Ezr=o("FlaxBlenderbotSmallForConditionalGeneration"),Czr=o(" (BlenderbotSmall model)"),wzr=l(),t0=a("li"),c5e=a("strong"),Azr=o("encoder-decoder"),Lzr=o(" \u2014 "),Pee=a("a"),yzr=o("FlaxEncoderDecoderModel"),xzr=o(" (Encoder decoder model)"),$zr=l(),a0=a("li"),f5e=a("strong"),kzr=o("longt5"),Szr=o(" \u2014 "),Bee=a("a"),Rzr=o("FlaxLongT5ForConditionalGeneration"),Pzr=o(" (LongT5 model)"),Bzr=l(),n0=a("li"),m5e=a("strong"),Izr=o("marian"),Nzr=o(" \u2014 "),Iee=a("a"),qzr=o("FlaxMarianMTModel"),jzr=o(" (Marian model)"),Dzr=l(),s0=a("li"),g5e=a("strong"),Gzr=o("mbart"),Ozr=o(" \u2014 "),Nee=a("a"),Vzr=o("FlaxMBartForConditionalGeneration"),Xzr=o(" (mBART model)"),zzr=l(),l0=a("li"),h5e=a("strong"),Qzr=o("mt5"),Wzr=o(" \u2014 "),qee=a("a"),Hzr=o("FlaxMT5ForConditionalGeneration"),Uzr=o(" (MT5 model)"),Jzr=l(),i0=a("li"),p5e=a("strong"),Yzr=o("pegasus"),Kzr=o(" \u2014 "),jee=a("a"),Zzr=o("FlaxPegasusForConditionalGeneration"),eQr=o(" (Pegasus model)"),oQr=l(),d0=a("li"),_5e=a("strong"),rQr=o("t5"),tQr=o(" \u2014 "),Dee=a("a"),aQr=o("FlaxT5ForConditionalGeneration"),nQr=o(" (T5 model)"),sQr=l(),F(c0.$$.fragment),$Xe=l(),nf=a("h2"),f0=a("a"),u5e=a("span"),F(_$.$$.fragment),lQr=l(),b5e=a("span"),iQr=o("FlaxAutoModelForSequenceClassification"),kXe=l(),vr=a("div"),F(u$.$$.fragment),dQr=l(),sf=a("p"),cQr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Gee=a("a"),fQr=o("from_pretrained()"),mQr=o(" class method or the "),Oee=a("a"),gQr=o("from_config()"),hQr=o(` class
method.`),pQr=l(),b$=a("p"),_Qr=o("This class cannot be instantiated directly using "),v5e=a("code"),uQr=o("__init__()"),bQr=o(" (throws an error)."),vQr=l(),Ut=a("div"),F(v$.$$.fragment),FQr=l(),F5e=a("p"),TQr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),MQr=l(),lf=a("p"),EQr=o(`Note:
Loading a model from its configuration file does `),T5e=a("strong"),CQr=o("not"),wQr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Vee=a("a"),AQr=o("from_pretrained()"),LQr=o(" to load the model weights."),yQr=l(),F(m0.$$.fragment),xQr=l(),Wr=a("div"),F(F$.$$.fragment),$Qr=l(),M5e=a("p"),kQr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),SQr=l(),wn=a("p"),RQr=o("The model class to instantiate is selected based on the "),E5e=a("code"),PQr=o("model_type"),BQr=o(` property of the config object (either
passed as an argument or loaded from `),C5e=a("code"),IQr=o("pretrained_model_name_or_path"),NQr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w5e=a("code"),qQr=o("pretrained_model_name_or_path"),jQr=o(":"),DQr=l(),Se=a("ul"),g0=a("li"),A5e=a("strong"),GQr=o("albert"),OQr=o(" \u2014 "),Xee=a("a"),VQr=o("FlaxAlbertForSequenceClassification"),XQr=o(" (ALBERT model)"),zQr=l(),h0=a("li"),L5e=a("strong"),QQr=o("bart"),WQr=o(" \u2014 "),zee=a("a"),HQr=o("FlaxBartForSequenceClassification"),UQr=o(" (BART model)"),JQr=l(),p0=a("li"),y5e=a("strong"),YQr=o("bert"),KQr=o(" \u2014 "),Qee=a("a"),ZQr=o("FlaxBertForSequenceClassification"),eWr=o(" (BERT model)"),oWr=l(),_0=a("li"),x5e=a("strong"),rWr=o("big_bird"),tWr=o(" \u2014 "),Wee=a("a"),aWr=o("FlaxBigBirdForSequenceClassification"),nWr=o(" (BigBird model)"),sWr=l(),u0=a("li"),$5e=a("strong"),lWr=o("distilbert"),iWr=o(" \u2014 "),Hee=a("a"),dWr=o("FlaxDistilBertForSequenceClassification"),cWr=o(" (DistilBERT model)"),fWr=l(),b0=a("li"),k5e=a("strong"),mWr=o("electra"),gWr=o(" \u2014 "),Uee=a("a"),hWr=o("FlaxElectraForSequenceClassification"),pWr=o(" (ELECTRA model)"),_Wr=l(),v0=a("li"),S5e=a("strong"),uWr=o("mbart"),bWr=o(" \u2014 "),Jee=a("a"),vWr=o("FlaxMBartForSequenceClassification"),FWr=o(" (mBART model)"),TWr=l(),F0=a("li"),R5e=a("strong"),MWr=o("roberta"),EWr=o(" \u2014 "),Yee=a("a"),CWr=o("FlaxRobertaForSequenceClassification"),wWr=o(" (RoBERTa model)"),AWr=l(),T0=a("li"),P5e=a("strong"),LWr=o("roformer"),yWr=o(" \u2014 "),Kee=a("a"),xWr=o("FlaxRoFormerForSequenceClassification"),$Wr=o(" (RoFormer model)"),kWr=l(),M0=a("li"),B5e=a("strong"),SWr=o("xlm-roberta"),RWr=o(" \u2014 "),Zee=a("a"),PWr=o("FlaxXLMRobertaForSequenceClassification"),BWr=o(" (XLM-RoBERTa model)"),IWr=l(),F(E0.$$.fragment),SXe=l(),df=a("h2"),C0=a("a"),I5e=a("span"),F(T$.$$.fragment),NWr=l(),N5e=a("span"),qWr=o("FlaxAutoModelForQuestionAnswering"),RXe=l(),Fr=a("div"),F(M$.$$.fragment),jWr=l(),cf=a("p"),DWr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),eoe=a("a"),GWr=o("from_pretrained()"),OWr=o(" class method or the "),ooe=a("a"),VWr=o("from_config()"),XWr=o(` class
method.`),zWr=l(),E$=a("p"),QWr=o("This class cannot be instantiated directly using "),q5e=a("code"),WWr=o("__init__()"),HWr=o(" (throws an error)."),UWr=l(),Jt=a("div"),F(C$.$$.fragment),JWr=l(),j5e=a("p"),YWr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),KWr=l(),ff=a("p"),ZWr=o(`Note:
Loading a model from its configuration file does `),D5e=a("strong"),eHr=o("not"),oHr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),roe=a("a"),rHr=o("from_pretrained()"),tHr=o(" to load the model weights."),aHr=l(),F(w0.$$.fragment),nHr=l(),Hr=a("div"),F(w$.$$.fragment),sHr=l(),G5e=a("p"),lHr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),iHr=l(),An=a("p"),dHr=o("The model class to instantiate is selected based on the "),O5e=a("code"),cHr=o("model_type"),fHr=o(` property of the config object (either
passed as an argument or loaded from `),V5e=a("code"),mHr=o("pretrained_model_name_or_path"),gHr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X5e=a("code"),hHr=o("pretrained_model_name_or_path"),pHr=o(":"),_Hr=l(),Re=a("ul"),A0=a("li"),z5e=a("strong"),uHr=o("albert"),bHr=o(" \u2014 "),toe=a("a"),vHr=o("FlaxAlbertForQuestionAnswering"),FHr=o(" (ALBERT model)"),THr=l(),L0=a("li"),Q5e=a("strong"),MHr=o("bart"),EHr=o(" \u2014 "),aoe=a("a"),CHr=o("FlaxBartForQuestionAnswering"),wHr=o(" (BART model)"),AHr=l(),y0=a("li"),W5e=a("strong"),LHr=o("bert"),yHr=o(" \u2014 "),noe=a("a"),xHr=o("FlaxBertForQuestionAnswering"),$Hr=o(" (BERT model)"),kHr=l(),x0=a("li"),H5e=a("strong"),SHr=o("big_bird"),RHr=o(" \u2014 "),soe=a("a"),PHr=o("FlaxBigBirdForQuestionAnswering"),BHr=o(" (BigBird model)"),IHr=l(),$0=a("li"),U5e=a("strong"),NHr=o("distilbert"),qHr=o(" \u2014 "),loe=a("a"),jHr=o("FlaxDistilBertForQuestionAnswering"),DHr=o(" (DistilBERT model)"),GHr=l(),k0=a("li"),J5e=a("strong"),OHr=o("electra"),VHr=o(" \u2014 "),ioe=a("a"),XHr=o("FlaxElectraForQuestionAnswering"),zHr=o(" (ELECTRA model)"),QHr=l(),S0=a("li"),Y5e=a("strong"),WHr=o("mbart"),HHr=o(" \u2014 "),doe=a("a"),UHr=o("FlaxMBartForQuestionAnswering"),JHr=o(" (mBART model)"),YHr=l(),R0=a("li"),K5e=a("strong"),KHr=o("roberta"),ZHr=o(" \u2014 "),coe=a("a"),eUr=o("FlaxRobertaForQuestionAnswering"),oUr=o(" (RoBERTa model)"),rUr=l(),P0=a("li"),Z5e=a("strong"),tUr=o("roformer"),aUr=o(" \u2014 "),foe=a("a"),nUr=o("FlaxRoFormerForQuestionAnswering"),sUr=o(" (RoFormer model)"),lUr=l(),B0=a("li"),e0e=a("strong"),iUr=o("xlm-roberta"),dUr=o(" \u2014 "),moe=a("a"),cUr=o("FlaxXLMRobertaForQuestionAnswering"),fUr=o(" (XLM-RoBERTa model)"),mUr=l(),F(I0.$$.fragment),PXe=l(),mf=a("h2"),N0=a("a"),o0e=a("span"),F(A$.$$.fragment),gUr=l(),r0e=a("span"),hUr=o("FlaxAutoModelForTokenClassification"),BXe=l(),Tr=a("div"),F(L$.$$.fragment),pUr=l(),gf=a("p"),_Ur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),goe=a("a"),uUr=o("from_pretrained()"),bUr=o(" class method or the "),hoe=a("a"),vUr=o("from_config()"),FUr=o(` class
method.`),TUr=l(),y$=a("p"),MUr=o("This class cannot be instantiated directly using "),t0e=a("code"),EUr=o("__init__()"),CUr=o(" (throws an error)."),wUr=l(),Yt=a("div"),F(x$.$$.fragment),AUr=l(),a0e=a("p"),LUr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),yUr=l(),hf=a("p"),xUr=o(`Note:
Loading a model from its configuration file does `),n0e=a("strong"),$Ur=o("not"),kUr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),poe=a("a"),SUr=o("from_pretrained()"),RUr=o(" to load the model weights."),PUr=l(),F(q0.$$.fragment),BUr=l(),Ur=a("div"),F($$.$$.fragment),IUr=l(),s0e=a("p"),NUr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),qUr=l(),Ln=a("p"),jUr=o("The model class to instantiate is selected based on the "),l0e=a("code"),DUr=o("model_type"),GUr=o(` property of the config object (either
passed as an argument or loaded from `),i0e=a("code"),OUr=o("pretrained_model_name_or_path"),VUr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d0e=a("code"),XUr=o("pretrained_model_name_or_path"),zUr=o(":"),QUr=l(),Ve=a("ul"),j0=a("li"),c0e=a("strong"),WUr=o("albert"),HUr=o(" \u2014 "),_oe=a("a"),UUr=o("FlaxAlbertForTokenClassification"),JUr=o(" (ALBERT model)"),YUr=l(),D0=a("li"),f0e=a("strong"),KUr=o("bert"),ZUr=o(" \u2014 "),uoe=a("a"),eJr=o("FlaxBertForTokenClassification"),oJr=o(" (BERT model)"),rJr=l(),G0=a("li"),m0e=a("strong"),tJr=o("big_bird"),aJr=o(" \u2014 "),boe=a("a"),nJr=o("FlaxBigBirdForTokenClassification"),sJr=o(" (BigBird model)"),lJr=l(),O0=a("li"),g0e=a("strong"),iJr=o("distilbert"),dJr=o(" \u2014 "),voe=a("a"),cJr=o("FlaxDistilBertForTokenClassification"),fJr=o(" (DistilBERT model)"),mJr=l(),V0=a("li"),h0e=a("strong"),gJr=o("electra"),hJr=o(" \u2014 "),Foe=a("a"),pJr=o("FlaxElectraForTokenClassification"),_Jr=o(" (ELECTRA model)"),uJr=l(),X0=a("li"),p0e=a("strong"),bJr=o("roberta"),vJr=o(" \u2014 "),Toe=a("a"),FJr=o("FlaxRobertaForTokenClassification"),TJr=o(" (RoBERTa model)"),MJr=l(),z0=a("li"),_0e=a("strong"),EJr=o("roformer"),CJr=o(" \u2014 "),Moe=a("a"),wJr=o("FlaxRoFormerForTokenClassification"),AJr=o(" (RoFormer model)"),LJr=l(),Q0=a("li"),u0e=a("strong"),yJr=o("xlm-roberta"),xJr=o(" \u2014 "),Eoe=a("a"),$Jr=o("FlaxXLMRobertaForTokenClassification"),kJr=o(" (XLM-RoBERTa model)"),SJr=l(),F(W0.$$.fragment),IXe=l(),pf=a("h2"),H0=a("a"),b0e=a("span"),F(k$.$$.fragment),RJr=l(),v0e=a("span"),PJr=o("FlaxAutoModelForMultipleChoice"),NXe=l(),Mr=a("div"),F(S$.$$.fragment),BJr=l(),_f=a("p"),IJr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Coe=a("a"),NJr=o("from_pretrained()"),qJr=o(" class method or the "),woe=a("a"),jJr=o("from_config()"),DJr=o(` class
method.`),GJr=l(),R$=a("p"),OJr=o("This class cannot be instantiated directly using "),F0e=a("code"),VJr=o("__init__()"),XJr=o(" (throws an error)."),zJr=l(),Kt=a("div"),F(P$.$$.fragment),QJr=l(),T0e=a("p"),WJr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),HJr=l(),uf=a("p"),UJr=o(`Note:
Loading a model from its configuration file does `),M0e=a("strong"),JJr=o("not"),YJr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Aoe=a("a"),KJr=o("from_pretrained()"),ZJr=o(" to load the model weights."),eYr=l(),F(U0.$$.fragment),oYr=l(),Jr=a("div"),F(B$.$$.fragment),rYr=l(),E0e=a("p"),tYr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),aYr=l(),yn=a("p"),nYr=o("The model class to instantiate is selected based on the "),C0e=a("code"),sYr=o("model_type"),lYr=o(` property of the config object (either
passed as an argument or loaded from `),w0e=a("code"),iYr=o("pretrained_model_name_or_path"),dYr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A0e=a("code"),cYr=o("pretrained_model_name_or_path"),fYr=o(":"),mYr=l(),Xe=a("ul"),J0=a("li"),L0e=a("strong"),gYr=o("albert"),hYr=o(" \u2014 "),Loe=a("a"),pYr=o("FlaxAlbertForMultipleChoice"),_Yr=o(" (ALBERT model)"),uYr=l(),Y0=a("li"),y0e=a("strong"),bYr=o("bert"),vYr=o(" \u2014 "),yoe=a("a"),FYr=o("FlaxBertForMultipleChoice"),TYr=o(" (BERT model)"),MYr=l(),K0=a("li"),x0e=a("strong"),EYr=o("big_bird"),CYr=o(" \u2014 "),xoe=a("a"),wYr=o("FlaxBigBirdForMultipleChoice"),AYr=o(" (BigBird model)"),LYr=l(),Z0=a("li"),$0e=a("strong"),yYr=o("distilbert"),xYr=o(" \u2014 "),$oe=a("a"),$Yr=o("FlaxDistilBertForMultipleChoice"),kYr=o(" (DistilBERT model)"),SYr=l(),ew=a("li"),k0e=a("strong"),RYr=o("electra"),PYr=o(" \u2014 "),koe=a("a"),BYr=o("FlaxElectraForMultipleChoice"),IYr=o(" (ELECTRA model)"),NYr=l(),ow=a("li"),S0e=a("strong"),qYr=o("roberta"),jYr=o(" \u2014 "),Soe=a("a"),DYr=o("FlaxRobertaForMultipleChoice"),GYr=o(" (RoBERTa model)"),OYr=l(),rw=a("li"),R0e=a("strong"),VYr=o("roformer"),XYr=o(" \u2014 "),Roe=a("a"),zYr=o("FlaxRoFormerForMultipleChoice"),QYr=o(" (RoFormer model)"),WYr=l(),tw=a("li"),P0e=a("strong"),HYr=o("xlm-roberta"),UYr=o(" \u2014 "),Poe=a("a"),JYr=o("FlaxXLMRobertaForMultipleChoice"),YYr=o(" (XLM-RoBERTa model)"),KYr=l(),F(aw.$$.fragment),qXe=l(),bf=a("h2"),nw=a("a"),B0e=a("span"),F(I$.$$.fragment),ZYr=l(),I0e=a("span"),eKr=o("FlaxAutoModelForNextSentencePrediction"),jXe=l(),Er=a("div"),F(N$.$$.fragment),oKr=l(),vf=a("p"),rKr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Boe=a("a"),tKr=o("from_pretrained()"),aKr=o(" class method or the "),Ioe=a("a"),nKr=o("from_config()"),sKr=o(` class
method.`),lKr=l(),q$=a("p"),iKr=o("This class cannot be instantiated directly using "),N0e=a("code"),dKr=o("__init__()"),cKr=o(" (throws an error)."),fKr=l(),Zt=a("div"),F(j$.$$.fragment),mKr=l(),q0e=a("p"),gKr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),hKr=l(),Ff=a("p"),pKr=o(`Note:
Loading a model from its configuration file does `),j0e=a("strong"),_Kr=o("not"),uKr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Noe=a("a"),bKr=o("from_pretrained()"),vKr=o(" to load the model weights."),FKr=l(),F(sw.$$.fragment),TKr=l(),Yr=a("div"),F(D$.$$.fragment),MKr=l(),D0e=a("p"),EKr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),CKr=l(),xn=a("p"),wKr=o("The model class to instantiate is selected based on the "),G0e=a("code"),AKr=o("model_type"),LKr=o(` property of the config object (either
passed as an argument or loaded from `),O0e=a("code"),yKr=o("pretrained_model_name_or_path"),xKr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V0e=a("code"),$Kr=o("pretrained_model_name_or_path"),kKr=o(":"),SKr=l(),X0e=a("ul"),lw=a("li"),z0e=a("strong"),RKr=o("bert"),PKr=o(" \u2014 "),qoe=a("a"),BKr=o("FlaxBertForNextSentencePrediction"),IKr=o(" (BERT model)"),NKr=l(),F(iw.$$.fragment),DXe=l(),Tf=a("h2"),dw=a("a"),Q0e=a("span"),F(G$.$$.fragment),qKr=l(),W0e=a("span"),jKr=o("FlaxAutoModelForImageClassification"),GXe=l(),Cr=a("div"),F(O$.$$.fragment),DKr=l(),Mf=a("p"),GKr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),joe=a("a"),OKr=o("from_pretrained()"),VKr=o(" class method or the "),Doe=a("a"),XKr=o("from_config()"),zKr=o(` class
method.`),QKr=l(),V$=a("p"),WKr=o("This class cannot be instantiated directly using "),H0e=a("code"),HKr=o("__init__()"),UKr=o(" (throws an error)."),JKr=l(),ea=a("div"),F(X$.$$.fragment),YKr=l(),U0e=a("p"),KKr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),ZKr=l(),Ef=a("p"),eZr=o(`Note:
Loading a model from its configuration file does `),J0e=a("strong"),oZr=o("not"),rZr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Goe=a("a"),tZr=o("from_pretrained()"),aZr=o(" to load the model weights."),nZr=l(),F(cw.$$.fragment),sZr=l(),Kr=a("div"),F(z$.$$.fragment),lZr=l(),Y0e=a("p"),iZr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),dZr=l(),$n=a("p"),cZr=o("The model class to instantiate is selected based on the "),K0e=a("code"),fZr=o("model_type"),mZr=o(` property of the config object (either
passed as an argument or loaded from `),Z0e=a("code"),gZr=o("pretrained_model_name_or_path"),hZr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ewe=a("code"),pZr=o("pretrained_model_name_or_path"),_Zr=o(":"),uZr=l(),Q$=a("ul"),fw=a("li"),owe=a("strong"),bZr=o("beit"),vZr=o(" \u2014 "),Ooe=a("a"),FZr=o("FlaxBeitForImageClassification"),TZr=o(" (BEiT model)"),MZr=l(),mw=a("li"),rwe=a("strong"),EZr=o("vit"),CZr=o(" \u2014 "),Voe=a("a"),wZr=o("FlaxViTForImageClassification"),AZr=o(" (ViT model)"),LZr=l(),F(gw.$$.fragment),OXe=l(),Cf=a("h2"),hw=a("a"),twe=a("span"),F(W$.$$.fragment),yZr=l(),awe=a("span"),xZr=o("FlaxAutoModelForVision2Seq"),VXe=l(),wr=a("div"),F(H$.$$.fragment),$Zr=l(),wf=a("p"),kZr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Xoe=a("a"),SZr=o("from_pretrained()"),RZr=o(" class method or the "),zoe=a("a"),PZr=o("from_config()"),BZr=o(` class
method.`),IZr=l(),U$=a("p"),NZr=o("This class cannot be instantiated directly using "),nwe=a("code"),qZr=o("__init__()"),jZr=o(" (throws an error)."),DZr=l(),oa=a("div"),F(J$.$$.fragment),GZr=l(),swe=a("p"),OZr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),VZr=l(),Af=a("p"),XZr=o(`Note:
Loading a model from its configuration file does `),lwe=a("strong"),zZr=o("not"),QZr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Qoe=a("a"),WZr=o("from_pretrained()"),HZr=o(" to load the model weights."),UZr=l(),F(pw.$$.fragment),JZr=l(),Zr=a("div"),F(Y$.$$.fragment),YZr=l(),iwe=a("p"),KZr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),ZZr=l(),kn=a("p"),eet=o("The model class to instantiate is selected based on the "),dwe=a("code"),oet=o("model_type"),ret=o(` property of the config object (either
passed as an argument or loaded from `),cwe=a("code"),tet=o("pretrained_model_name_or_path"),aet=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fwe=a("code"),net=o("pretrained_model_name_or_path"),set=o(":"),iet=l(),mwe=a("ul"),_w=a("li"),gwe=a("strong"),det=o("vision-encoder-decoder"),cet=o(" \u2014 "),Woe=a("a"),fet=o("FlaxVisionEncoderDecoderModel"),met=o(" (Vision Encoder decoder model)"),get=l(),F(uw.$$.fragment),this.h()},l(f){const u=fVt('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var K$=s(p);m=n(K$,"A",{id:!0,class:!0,href:!0});var hwe=s(m);_=n(hwe,"SPAN",{});var pwe=s(_);T(d.$$.fragment,pwe),pwe.forEach(t),hwe.forEach(t),h=i(K$),Eo=n(K$,"SPAN",{});var _we=s(Eo);Ei=r(_we,"Auto Classes"),_we.forEach(t),K$.forEach(t),$f=i(f),at=n(f,"P",{});var Z$=s(at);Ci=r(Z$,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),wi=n(Z$,"CODE",{});var uwe=s(wi);q6=r(uwe,"from_pretrained()"),uwe.forEach(t),kf=r(Z$,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Z$.forEach(t),Oe=i(f),Qe=n(f,"P",{});var Sn=s(Qe);Ai=r(Sn,"Instantiating one of "),Rn=n(Sn,"A",{href:!0});var bwe=s(Rn);j6=r(bwe,"AutoConfig"),bwe.forEach(t),Pn=r(Sn,", "),Bn=n(Sn,"A",{href:!0});var vwe=s(Bn);D6=r(vwe,"AutoModel"),vwe.forEach(t),Li=r(Sn,`, and
`),In=n(Sn,"A",{href:!0});var Fwe=s(In);G6=r(Fwe,"AutoTokenizer"),Fwe.forEach(t),yi=r(Sn," will directly create a class of the relevant architecture. For instance"),Sn.forEach(t),Sf=i(f),T(xa.$$.fragment,f),We=i(f),Ae=n(f,"P",{});var ek=s(Ae);uS=r(ek,"will create a model that is an instance of "),xi=n(ek,"A",{href:!0});var Twe=s(xi);bS=r(Twe,"BertModel"),Twe.forEach(t),vS=r(ek,"."),ek.forEach(t),Co=i(f),$a=n(f,"P",{});var ok=s($a);FS=r(ok,"There is one class of "),Rf=n(ok,"CODE",{});var Mwe=s(Rf);TS=r(Mwe,"AutoModel"),Mwe.forEach(t),eWe=r(ok," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),ok.forEach(t),jOe=i(f),$i=n(f,"H2",{class:!0});var rk=s($i);Pf=n(rk,"A",{id:!0,class:!0,href:!0});var Ewe=s(Pf);Ote=n(Ewe,"SPAN",{});var Cwe=s(Ote);T(O6.$$.fragment,Cwe),Cwe.forEach(t),Ewe.forEach(t),oWe=i(rk),Vte=n(rk,"SPAN",{});var wwe=s(Vte);rWe=r(wwe,"Extending the Auto Classes"),wwe.forEach(t),rk.forEach(t),DOe=i(f),Nn=n(f,"P",{});var Lf=s(Nn);tWe=r(Lf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Xte=n(Lf,"CODE",{});var Awe=s(Xte);aWe=r(Awe,"NewModel"),Awe.forEach(t),nWe=r(Lf,", make sure you have a "),zte=n(Lf,"CODE",{});var Lwe=s(zte);sWe=r(Lwe,"NewModelConfig"),Lwe.forEach(t),lWe=r(Lf,` then you can add those to the auto
classes like this:`),Lf.forEach(t),GOe=i(f),T(V6.$$.fragment,f),OOe=i(f),MS=n(f,"P",{});var ywe=s(MS);iWe=r(ywe,"You will then be able to use the auto classes like you would usually do!"),ywe.forEach(t),VOe=i(f),T(Bf.$$.fragment,f),XOe=i(f),ki=n(f,"H2",{class:!0});var tk=s(ki);If=n(tk,"A",{id:!0,class:!0,href:!0});var xwe=s(If);Qte=n(xwe,"SPAN",{});var $we=s(Qte);T(X6.$$.fragment,$we),$we.forEach(t),xwe.forEach(t),dWe=i(tk),Wte=n(tk,"SPAN",{});var kwe=s(Wte);cWe=r(kwe,"AutoConfig"),kwe.forEach(t),tk.forEach(t),zOe=i(f),wo=n(f,"DIV",{class:!0});var rt=s(wo);T(z6.$$.fragment,rt),fWe=i(rt),Q6=n(rt,"P",{});var ak=s(Q6);mWe=r(ak,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),ES=n(ak,"A",{href:!0});var Swe=s(ES);gWe=r(Swe,"from_pretrained()"),Swe.forEach(t),hWe=r(ak," class method."),ak.forEach(t),pWe=i(rt),W6=n(rt,"P",{});var nk=s(W6);_We=r(nk,"This class cannot be instantiated directly using "),Hte=n(nk,"CODE",{});var Rwe=s(Hte);uWe=r(Rwe,"__init__()"),Rwe.forEach(t),bWe=r(nk," (throws an error)."),nk.forEach(t),vWe=i(rt),Ar=n(rt,"DIV",{class:!0});var tt=s(Ar);T(H6.$$.fragment,tt),FWe=i(tt),Ute=n(tt,"P",{});var Pwe=s(Ute);TWe=r(Pwe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),Pwe.forEach(t),MWe=i(tt),Si=n(tt,"P",{});var yf=s(Si);EWe=r(yf,"The configuration class to instantiate is selected based on the "),Jte=n(yf,"CODE",{});var Bwe=s(Jte);CWe=r(Bwe,"model_type"),Bwe.forEach(t),wWe=r(yf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Yte=n(yf,"CODE",{});var Iwe=s(Yte);AWe=r(Iwe,"pretrained_model_name_or_path"),Iwe.forEach(t),LWe=r(yf,":"),yf.forEach(t),yWe=i(tt),A=n(tt,"UL",{});var L=s(A);Nf=n(L,"LI",{});var bw=s(Nf);Kte=n(bw,"STRONG",{});var Nwe=s(Kte);xWe=r(Nwe,"albert"),Nwe.forEach(t),$We=r(bw," \u2014 "),CS=n(bw,"A",{href:!0});var qwe=s(CS);kWe=r(qwe,"AlbertConfig"),qwe.forEach(t),SWe=r(bw," (ALBERT model)"),bw.forEach(t),RWe=i(L),qf=n(L,"LI",{});var vw=s(qf);Zte=n(vw,"STRONG",{});var jwe=s(Zte);PWe=r(jwe,"bart"),jwe.forEach(t),BWe=r(vw," \u2014 "),wS=n(vw,"A",{href:!0});var Dwe=s(wS);IWe=r(Dwe,"BartConfig"),Dwe.forEach(t),NWe=r(vw," (BART model)"),vw.forEach(t),qWe=i(L),jf=n(L,"LI",{});var Fw=s(jf);eae=n(Fw,"STRONG",{});var Gwe=s(eae);jWe=r(Gwe,"beit"),Gwe.forEach(t),DWe=r(Fw," \u2014 "),AS=n(Fw,"A",{href:!0});var Owe=s(AS);GWe=r(Owe,"BeitConfig"),Owe.forEach(t),OWe=r(Fw," (BEiT model)"),Fw.forEach(t),VWe=i(L),Df=n(L,"LI",{});var Tw=s(Df);oae=n(Tw,"STRONG",{});var Vwe=s(oae);XWe=r(Vwe,"bert"),Vwe.forEach(t),zWe=r(Tw," \u2014 "),LS=n(Tw,"A",{href:!0});var Xwe=s(LS);QWe=r(Xwe,"BertConfig"),Xwe.forEach(t),WWe=r(Tw," (BERT model)"),Tw.forEach(t),HWe=i(L),Gf=n(L,"LI",{});var Mw=s(Gf);rae=n(Mw,"STRONG",{});var zwe=s(rae);UWe=r(zwe,"bert-generation"),zwe.forEach(t),JWe=r(Mw," \u2014 "),yS=n(Mw,"A",{href:!0});var Qwe=s(yS);YWe=r(Qwe,"BertGenerationConfig"),Qwe.forEach(t),KWe=r(Mw," (Bert Generation model)"),Mw.forEach(t),ZWe=i(L),Of=n(L,"LI",{});var Ew=s(Of);tae=n(Ew,"STRONG",{});var Wwe=s(tae);eHe=r(Wwe,"big_bird"),Wwe.forEach(t),oHe=r(Ew," \u2014 "),xS=n(Ew,"A",{href:!0});var Hwe=s(xS);rHe=r(Hwe,"BigBirdConfig"),Hwe.forEach(t),tHe=r(Ew," (BigBird model)"),Ew.forEach(t),aHe=i(L),Vf=n(L,"LI",{});var Cw=s(Vf);aae=n(Cw,"STRONG",{});var Uwe=s(aae);nHe=r(Uwe,"bigbird_pegasus"),Uwe.forEach(t),sHe=r(Cw," \u2014 "),$S=n(Cw,"A",{href:!0});var Jwe=s($S);lHe=r(Jwe,"BigBirdPegasusConfig"),Jwe.forEach(t),iHe=r(Cw," (BigBird-Pegasus model)"),Cw.forEach(t),dHe=i(L),Xf=n(L,"LI",{});var ww=s(Xf);nae=n(ww,"STRONG",{});var Ywe=s(nae);cHe=r(Ywe,"blenderbot"),Ywe.forEach(t),fHe=r(ww," \u2014 "),kS=n(ww,"A",{href:!0});var Kwe=s(kS);mHe=r(Kwe,"BlenderbotConfig"),Kwe.forEach(t),gHe=r(ww," (Blenderbot model)"),ww.forEach(t),hHe=i(L),zf=n(L,"LI",{});var Aw=s(zf);sae=n(Aw,"STRONG",{});var Zwe=s(sae);pHe=r(Zwe,"blenderbot-small"),Zwe.forEach(t),_He=r(Aw," \u2014 "),SS=n(Aw,"A",{href:!0});var eAe=s(SS);uHe=r(eAe,"BlenderbotSmallConfig"),eAe.forEach(t),bHe=r(Aw," (BlenderbotSmall model)"),Aw.forEach(t),vHe=i(L),Qf=n(L,"LI",{});var Lw=s(Qf);lae=n(Lw,"STRONG",{});var oAe=s(lae);FHe=r(oAe,"bloom"),oAe.forEach(t),THe=r(Lw," \u2014 "),RS=n(Lw,"A",{href:!0});var rAe=s(RS);MHe=r(rAe,"BloomConfig"),rAe.forEach(t),EHe=r(Lw," (BLOOM model)"),Lw.forEach(t),CHe=i(L),Wf=n(L,"LI",{});var yw=s(Wf);iae=n(yw,"STRONG",{});var tAe=s(iae);wHe=r(tAe,"camembert"),tAe.forEach(t),AHe=r(yw," \u2014 "),PS=n(yw,"A",{href:!0});var aAe=s(PS);LHe=r(aAe,"CamembertConfig"),aAe.forEach(t),yHe=r(yw," (CamemBERT model)"),yw.forEach(t),xHe=i(L),Hf=n(L,"LI",{});var xw=s(Hf);dae=n(xw,"STRONG",{});var nAe=s(dae);$He=r(nAe,"canine"),nAe.forEach(t),kHe=r(xw," \u2014 "),BS=n(xw,"A",{href:!0});var sAe=s(BS);SHe=r(sAe,"CanineConfig"),sAe.forEach(t),RHe=r(xw," (CANINE model)"),xw.forEach(t),PHe=i(L),Uf=n(L,"LI",{});var $w=s(Uf);cae=n($w,"STRONG",{});var lAe=s(cae);BHe=r(lAe,"clip"),lAe.forEach(t),IHe=r($w," \u2014 "),IS=n($w,"A",{href:!0});var iAe=s(IS);NHe=r(iAe,"CLIPConfig"),iAe.forEach(t),qHe=r($w," (CLIP model)"),$w.forEach(t),jHe=i(L),Jf=n(L,"LI",{});var kw=s(Jf);fae=n(kw,"STRONG",{});var dAe=s(fae);DHe=r(dAe,"codegen"),dAe.forEach(t),GHe=r(kw," \u2014 "),NS=n(kw,"A",{href:!0});var cAe=s(NS);OHe=r(cAe,"CodeGenConfig"),cAe.forEach(t),VHe=r(kw," (CodeGen model)"),kw.forEach(t),XHe=i(L),Yf=n(L,"LI",{});var Sw=s(Yf);mae=n(Sw,"STRONG",{});var fAe=s(mae);zHe=r(fAe,"convbert"),fAe.forEach(t),QHe=r(Sw," \u2014 "),qS=n(Sw,"A",{href:!0});var mAe=s(qS);WHe=r(mAe,"ConvBertConfig"),mAe.forEach(t),HHe=r(Sw," (ConvBERT model)"),Sw.forEach(t),UHe=i(L),Kf=n(L,"LI",{});var Rw=s(Kf);gae=n(Rw,"STRONG",{});var gAe=s(gae);JHe=r(gAe,"convnext"),gAe.forEach(t),YHe=r(Rw," \u2014 "),jS=n(Rw,"A",{href:!0});var hAe=s(jS);KHe=r(hAe,"ConvNextConfig"),hAe.forEach(t),ZHe=r(Rw," (ConvNeXT model)"),Rw.forEach(t),eUe=i(L),Zf=n(L,"LI",{});var Pw=s(Zf);hae=n(Pw,"STRONG",{});var pAe=s(hae);oUe=r(pAe,"ctrl"),pAe.forEach(t),rUe=r(Pw," \u2014 "),DS=n(Pw,"A",{href:!0});var _Ae=s(DS);tUe=r(_Ae,"CTRLConfig"),_Ae.forEach(t),aUe=r(Pw," (CTRL model)"),Pw.forEach(t),nUe=i(L),em=n(L,"LI",{});var Bw=s(em);pae=n(Bw,"STRONG",{});var uAe=s(pae);sUe=r(uAe,"cvt"),uAe.forEach(t),lUe=r(Bw," \u2014 "),GS=n(Bw,"A",{href:!0});var bAe=s(GS);iUe=r(bAe,"CvtConfig"),bAe.forEach(t),dUe=r(Bw," (CvT model)"),Bw.forEach(t),cUe=i(L),om=n(L,"LI",{});var Iw=s(om);_ae=n(Iw,"STRONG",{});var vAe=s(_ae);fUe=r(vAe,"data2vec-audio"),vAe.forEach(t),mUe=r(Iw," \u2014 "),OS=n(Iw,"A",{href:!0});var FAe=s(OS);gUe=r(FAe,"Data2VecAudioConfig"),FAe.forEach(t),hUe=r(Iw," (Data2VecAudio model)"),Iw.forEach(t),pUe=i(L),rm=n(L,"LI",{});var Nw=s(rm);uae=n(Nw,"STRONG",{});var TAe=s(uae);_Ue=r(TAe,"data2vec-text"),TAe.forEach(t),uUe=r(Nw," \u2014 "),VS=n(Nw,"A",{href:!0});var MAe=s(VS);bUe=r(MAe,"Data2VecTextConfig"),MAe.forEach(t),vUe=r(Nw," (Data2VecText model)"),Nw.forEach(t),FUe=i(L),tm=n(L,"LI",{});var qw=s(tm);bae=n(qw,"STRONG",{});var EAe=s(bae);TUe=r(EAe,"data2vec-vision"),EAe.forEach(t),MUe=r(qw," \u2014 "),XS=n(qw,"A",{href:!0});var CAe=s(XS);EUe=r(CAe,"Data2VecVisionConfig"),CAe.forEach(t),CUe=r(qw," (Data2VecVision model)"),qw.forEach(t),wUe=i(L),am=n(L,"LI",{});var jw=s(am);vae=n(jw,"STRONG",{});var wAe=s(vae);AUe=r(wAe,"deberta"),wAe.forEach(t),LUe=r(jw," \u2014 "),zS=n(jw,"A",{href:!0});var AAe=s(zS);yUe=r(AAe,"DebertaConfig"),AAe.forEach(t),xUe=r(jw," (DeBERTa model)"),jw.forEach(t),$Ue=i(L),nm=n(L,"LI",{});var Dw=s(nm);Fae=n(Dw,"STRONG",{});var LAe=s(Fae);kUe=r(LAe,"deberta-v2"),LAe.forEach(t),SUe=r(Dw," \u2014 "),QS=n(Dw,"A",{href:!0});var yAe=s(QS);RUe=r(yAe,"DebertaV2Config"),yAe.forEach(t),PUe=r(Dw," (DeBERTa-v2 model)"),Dw.forEach(t),BUe=i(L),sm=n(L,"LI",{});var Gw=s(sm);Tae=n(Gw,"STRONG",{});var pet=s(Tae);IUe=r(pet,"decision_transformer"),pet.forEach(t),NUe=r(Gw," \u2014 "),WS=n(Gw,"A",{href:!0});var _et=s(WS);qUe=r(_et,"DecisionTransformerConfig"),_et.forEach(t),jUe=r(Gw," (Decision Transformer model)"),Gw.forEach(t),DUe=i(L),lm=n(L,"LI",{});var xAe=s(lm);Mae=n(xAe,"STRONG",{});var uet=s(Mae);GUe=r(uet,"deit"),uet.forEach(t),OUe=r(xAe," \u2014 "),HS=n(xAe,"A",{href:!0});var bet=s(HS);VUe=r(bet,"DeiTConfig"),bet.forEach(t),XUe=r(xAe," (DeiT model)"),xAe.forEach(t),zUe=i(L),im=n(L,"LI",{});var $Ae=s(im);Eae=n($Ae,"STRONG",{});var vet=s(Eae);QUe=r(vet,"detr"),vet.forEach(t),WUe=r($Ae," \u2014 "),US=n($Ae,"A",{href:!0});var Fet=s(US);HUe=r(Fet,"DetrConfig"),Fet.forEach(t),UUe=r($Ae," (DETR model)"),$Ae.forEach(t),JUe=i(L),dm=n(L,"LI",{});var kAe=s(dm);Cae=n(kAe,"STRONG",{});var Tet=s(Cae);YUe=r(Tet,"distilbert"),Tet.forEach(t),KUe=r(kAe," \u2014 "),JS=n(kAe,"A",{href:!0});var Met=s(JS);ZUe=r(Met,"DistilBertConfig"),Met.forEach(t),eJe=r(kAe," (DistilBERT model)"),kAe.forEach(t),oJe=i(L),cm=n(L,"LI",{});var SAe=s(cm);wae=n(SAe,"STRONG",{});var Eet=s(wae);rJe=r(Eet,"dpr"),Eet.forEach(t),tJe=r(SAe," \u2014 "),YS=n(SAe,"A",{href:!0});var Cet=s(YS);aJe=r(Cet,"DPRConfig"),Cet.forEach(t),nJe=r(SAe," (DPR model)"),SAe.forEach(t),sJe=i(L),fm=n(L,"LI",{});var RAe=s(fm);Aae=n(RAe,"STRONG",{});var wet=s(Aae);lJe=r(wet,"dpt"),wet.forEach(t),iJe=r(RAe," \u2014 "),KS=n(RAe,"A",{href:!0});var Aet=s(KS);dJe=r(Aet,"DPTConfig"),Aet.forEach(t),cJe=r(RAe," (DPT model)"),RAe.forEach(t),fJe=i(L),mm=n(L,"LI",{});var PAe=s(mm);Lae=n(PAe,"STRONG",{});var Let=s(Lae);mJe=r(Let,"electra"),Let.forEach(t),gJe=r(PAe," \u2014 "),ZS=n(PAe,"A",{href:!0});var yet=s(ZS);hJe=r(yet,"ElectraConfig"),yet.forEach(t),pJe=r(PAe," (ELECTRA model)"),PAe.forEach(t),_Je=i(L),gm=n(L,"LI",{});var BAe=s(gm);yae=n(BAe,"STRONG",{});var xet=s(yae);uJe=r(xet,"encoder-decoder"),xet.forEach(t),bJe=r(BAe," \u2014 "),eR=n(BAe,"A",{href:!0});var $et=s(eR);vJe=r($et,"EncoderDecoderConfig"),$et.forEach(t),FJe=r(BAe," (Encoder decoder model)"),BAe.forEach(t),TJe=i(L),hm=n(L,"LI",{});var IAe=s(hm);xae=n(IAe,"STRONG",{});var ket=s(xae);MJe=r(ket,"flaubert"),ket.forEach(t),EJe=r(IAe," \u2014 "),oR=n(IAe,"A",{href:!0});var Set=s(oR);CJe=r(Set,"FlaubertConfig"),Set.forEach(t),wJe=r(IAe," (FlauBERT model)"),IAe.forEach(t),AJe=i(L),pm=n(L,"LI",{});var NAe=s(pm);$ae=n(NAe,"STRONG",{});var Ret=s($ae);LJe=r(Ret,"flava"),Ret.forEach(t),yJe=r(NAe," \u2014 "),rR=n(NAe,"A",{href:!0});var Pet=s(rR);xJe=r(Pet,"FlavaConfig"),Pet.forEach(t),$Je=r(NAe," (FLAVA model)"),NAe.forEach(t),kJe=i(L),_m=n(L,"LI",{});var qAe=s(_m);kae=n(qAe,"STRONG",{});var Bet=s(kae);SJe=r(Bet,"fnet"),Bet.forEach(t),RJe=r(qAe," \u2014 "),tR=n(qAe,"A",{href:!0});var Iet=s(tR);PJe=r(Iet,"FNetConfig"),Iet.forEach(t),BJe=r(qAe," (FNet model)"),qAe.forEach(t),IJe=i(L),um=n(L,"LI",{});var jAe=s(um);Sae=n(jAe,"STRONG",{});var Net=s(Sae);NJe=r(Net,"fsmt"),Net.forEach(t),qJe=r(jAe," \u2014 "),aR=n(jAe,"A",{href:!0});var qet=s(aR);jJe=r(qet,"FSMTConfig"),qet.forEach(t),DJe=r(jAe," (FairSeq Machine-Translation model)"),jAe.forEach(t),GJe=i(L),bm=n(L,"LI",{});var DAe=s(bm);Rae=n(DAe,"STRONG",{});var jet=s(Rae);OJe=r(jet,"funnel"),jet.forEach(t),VJe=r(DAe," \u2014 "),nR=n(DAe,"A",{href:!0});var Det=s(nR);XJe=r(Det,"FunnelConfig"),Det.forEach(t),zJe=r(DAe," (Funnel Transformer model)"),DAe.forEach(t),QJe=i(L),vm=n(L,"LI",{});var GAe=s(vm);Pae=n(GAe,"STRONG",{});var Get=s(Pae);WJe=r(Get,"glpn"),Get.forEach(t),HJe=r(GAe," \u2014 "),sR=n(GAe,"A",{href:!0});var Oet=s(sR);UJe=r(Oet,"GLPNConfig"),Oet.forEach(t),JJe=r(GAe," (GLPN model)"),GAe.forEach(t),YJe=i(L),Fm=n(L,"LI",{});var OAe=s(Fm);Bae=n(OAe,"STRONG",{});var Vet=s(Bae);KJe=r(Vet,"gpt2"),Vet.forEach(t),ZJe=r(OAe," \u2014 "),lR=n(OAe,"A",{href:!0});var Xet=s(lR);eYe=r(Xet,"GPT2Config"),Xet.forEach(t),oYe=r(OAe," (OpenAI GPT-2 model)"),OAe.forEach(t),rYe=i(L),Tm=n(L,"LI",{});var VAe=s(Tm);Iae=n(VAe,"STRONG",{});var zet=s(Iae);tYe=r(zet,"gpt_neo"),zet.forEach(t),aYe=r(VAe," \u2014 "),iR=n(VAe,"A",{href:!0});var Qet=s(iR);nYe=r(Qet,"GPTNeoConfig"),Qet.forEach(t),sYe=r(VAe," (GPT Neo model)"),VAe.forEach(t),lYe=i(L),Mm=n(L,"LI",{});var XAe=s(Mm);Nae=n(XAe,"STRONG",{});var Wet=s(Nae);iYe=r(Wet,"gpt_neox"),Wet.forEach(t),dYe=r(XAe," \u2014 "),dR=n(XAe,"A",{href:!0});var Het=s(dR);cYe=r(Het,"GPTNeoXConfig"),Het.forEach(t),fYe=r(XAe," (GPT NeoX model)"),XAe.forEach(t),mYe=i(L),Em=n(L,"LI",{});var zAe=s(Em);qae=n(zAe,"STRONG",{});var Uet=s(qae);gYe=r(Uet,"gptj"),Uet.forEach(t),hYe=r(zAe," \u2014 "),cR=n(zAe,"A",{href:!0});var Jet=s(cR);pYe=r(Jet,"GPTJConfig"),Jet.forEach(t),_Ye=r(zAe," (GPT-J model)"),zAe.forEach(t),uYe=i(L),Cm=n(L,"LI",{});var QAe=s(Cm);jae=n(QAe,"STRONG",{});var Yet=s(jae);bYe=r(Yet,"hubert"),Yet.forEach(t),vYe=r(QAe," \u2014 "),fR=n(QAe,"A",{href:!0});var Ket=s(fR);FYe=r(Ket,"HubertConfig"),Ket.forEach(t),TYe=r(QAe," (Hubert model)"),QAe.forEach(t),MYe=i(L),wm=n(L,"LI",{});var WAe=s(wm);Dae=n(WAe,"STRONG",{});var Zet=s(Dae);EYe=r(Zet,"ibert"),Zet.forEach(t),CYe=r(WAe," \u2014 "),mR=n(WAe,"A",{href:!0});var eot=s(mR);wYe=r(eot,"IBertConfig"),eot.forEach(t),AYe=r(WAe," (I-BERT model)"),WAe.forEach(t),LYe=i(L),Am=n(L,"LI",{});var HAe=s(Am);Gae=n(HAe,"STRONG",{});var oot=s(Gae);yYe=r(oot,"imagegpt"),oot.forEach(t),xYe=r(HAe," \u2014 "),gR=n(HAe,"A",{href:!0});var rot=s(gR);$Ye=r(rot,"ImageGPTConfig"),rot.forEach(t),kYe=r(HAe," (ImageGPT model)"),HAe.forEach(t),SYe=i(L),Lm=n(L,"LI",{});var UAe=s(Lm);Oae=n(UAe,"STRONG",{});var tot=s(Oae);RYe=r(tot,"layoutlm"),tot.forEach(t),PYe=r(UAe," \u2014 "),hR=n(UAe,"A",{href:!0});var aot=s(hR);BYe=r(aot,"LayoutLMConfig"),aot.forEach(t),IYe=r(UAe," (LayoutLM model)"),UAe.forEach(t),NYe=i(L),ym=n(L,"LI",{});var JAe=s(ym);Vae=n(JAe,"STRONG",{});var not=s(Vae);qYe=r(not,"layoutlmv2"),not.forEach(t),jYe=r(JAe," \u2014 "),pR=n(JAe,"A",{href:!0});var sot=s(pR);DYe=r(sot,"LayoutLMv2Config"),sot.forEach(t),GYe=r(JAe," (LayoutLMv2 model)"),JAe.forEach(t),OYe=i(L),xm=n(L,"LI",{});var YAe=s(xm);Xae=n(YAe,"STRONG",{});var lot=s(Xae);VYe=r(lot,"layoutlmv3"),lot.forEach(t),XYe=r(YAe," \u2014 "),_R=n(YAe,"A",{href:!0});var iot=s(_R);zYe=r(iot,"LayoutLMv3Config"),iot.forEach(t),QYe=r(YAe," (LayoutLMv3 model)"),YAe.forEach(t),WYe=i(L),$m=n(L,"LI",{});var KAe=s($m);zae=n(KAe,"STRONG",{});var dot=s(zae);HYe=r(dot,"led"),dot.forEach(t),UYe=r(KAe," \u2014 "),uR=n(KAe,"A",{href:!0});var cot=s(uR);JYe=r(cot,"LEDConfig"),cot.forEach(t),YYe=r(KAe," (LED model)"),KAe.forEach(t),KYe=i(L),km=n(L,"LI",{});var ZAe=s(km);Qae=n(ZAe,"STRONG",{});var fot=s(Qae);ZYe=r(fot,"levit"),fot.forEach(t),eKe=r(ZAe," \u2014 "),bR=n(ZAe,"A",{href:!0});var mot=s(bR);oKe=r(mot,"LevitConfig"),mot.forEach(t),rKe=r(ZAe," (LeViT model)"),ZAe.forEach(t),tKe=i(L),Sm=n(L,"LI",{});var e6e=s(Sm);Wae=n(e6e,"STRONG",{});var got=s(Wae);aKe=r(got,"longformer"),got.forEach(t),nKe=r(e6e," \u2014 "),vR=n(e6e,"A",{href:!0});var hot=s(vR);sKe=r(hot,"LongformerConfig"),hot.forEach(t),lKe=r(e6e," (Longformer model)"),e6e.forEach(t),iKe=i(L),Rm=n(L,"LI",{});var o6e=s(Rm);Hae=n(o6e,"STRONG",{});var pot=s(Hae);dKe=r(pot,"longt5"),pot.forEach(t),cKe=r(o6e," \u2014 "),FR=n(o6e,"A",{href:!0});var _ot=s(FR);fKe=r(_ot,"LongT5Config"),_ot.forEach(t),mKe=r(o6e," (LongT5 model)"),o6e.forEach(t),gKe=i(L),Pm=n(L,"LI",{});var r6e=s(Pm);Uae=n(r6e,"STRONG",{});var uot=s(Uae);hKe=r(uot,"luke"),uot.forEach(t),pKe=r(r6e," \u2014 "),TR=n(r6e,"A",{href:!0});var bot=s(TR);_Ke=r(bot,"LukeConfig"),bot.forEach(t),uKe=r(r6e," (LUKE model)"),r6e.forEach(t),bKe=i(L),Bm=n(L,"LI",{});var t6e=s(Bm);Jae=n(t6e,"STRONG",{});var vot=s(Jae);vKe=r(vot,"lxmert"),vot.forEach(t),FKe=r(t6e," \u2014 "),MR=n(t6e,"A",{href:!0});var Fot=s(MR);TKe=r(Fot,"LxmertConfig"),Fot.forEach(t),MKe=r(t6e," (LXMERT model)"),t6e.forEach(t),EKe=i(L),Im=n(L,"LI",{});var a6e=s(Im);Yae=n(a6e,"STRONG",{});var Tot=s(Yae);CKe=r(Tot,"m2m_100"),Tot.forEach(t),wKe=r(a6e," \u2014 "),ER=n(a6e,"A",{href:!0});var Mot=s(ER);AKe=r(Mot,"M2M100Config"),Mot.forEach(t),LKe=r(a6e," (M2M100 model)"),a6e.forEach(t),yKe=i(L),Nm=n(L,"LI",{});var n6e=s(Nm);Kae=n(n6e,"STRONG",{});var Eot=s(Kae);xKe=r(Eot,"marian"),Eot.forEach(t),$Ke=r(n6e," \u2014 "),CR=n(n6e,"A",{href:!0});var Cot=s(CR);kKe=r(Cot,"MarianConfig"),Cot.forEach(t),SKe=r(n6e," (Marian model)"),n6e.forEach(t),RKe=i(L),qm=n(L,"LI",{});var s6e=s(qm);Zae=n(s6e,"STRONG",{});var wot=s(Zae);PKe=r(wot,"maskformer"),wot.forEach(t),BKe=r(s6e," \u2014 "),wR=n(s6e,"A",{href:!0});var Aot=s(wR);IKe=r(Aot,"MaskFormerConfig"),Aot.forEach(t),NKe=r(s6e," (MaskFormer model)"),s6e.forEach(t),qKe=i(L),jm=n(L,"LI",{});var l6e=s(jm);ene=n(l6e,"STRONG",{});var Lot=s(ene);jKe=r(Lot,"mbart"),Lot.forEach(t),DKe=r(l6e," \u2014 "),AR=n(l6e,"A",{href:!0});var yot=s(AR);GKe=r(yot,"MBartConfig"),yot.forEach(t),OKe=r(l6e," (mBART model)"),l6e.forEach(t),VKe=i(L),Dm=n(L,"LI",{});var i6e=s(Dm);one=n(i6e,"STRONG",{});var xot=s(one);XKe=r(xot,"mctct"),xot.forEach(t),zKe=r(i6e," \u2014 "),LR=n(i6e,"A",{href:!0});var $ot=s(LR);QKe=r($ot,"MCTCTConfig"),$ot.forEach(t),WKe=r(i6e," (M-CTC-T model)"),i6e.forEach(t),HKe=i(L),Gm=n(L,"LI",{});var d6e=s(Gm);rne=n(d6e,"STRONG",{});var kot=s(rne);UKe=r(kot,"megatron-bert"),kot.forEach(t),JKe=r(d6e," \u2014 "),yR=n(d6e,"A",{href:!0});var Sot=s(yR);YKe=r(Sot,"MegatronBertConfig"),Sot.forEach(t),KKe=r(d6e," (Megatron-BERT model)"),d6e.forEach(t),ZKe=i(L),Om=n(L,"LI",{});var c6e=s(Om);tne=n(c6e,"STRONG",{});var Rot=s(tne);eZe=r(Rot,"mobilebert"),Rot.forEach(t),oZe=r(c6e," \u2014 "),xR=n(c6e,"A",{href:!0});var Pot=s(xR);rZe=r(Pot,"MobileBertConfig"),Pot.forEach(t),tZe=r(c6e," (MobileBERT model)"),c6e.forEach(t),aZe=i(L),Vm=n(L,"LI",{});var f6e=s(Vm);ane=n(f6e,"STRONG",{});var Bot=s(ane);nZe=r(Bot,"mpnet"),Bot.forEach(t),sZe=r(f6e," \u2014 "),$R=n(f6e,"A",{href:!0});var Iot=s($R);lZe=r(Iot,"MPNetConfig"),Iot.forEach(t),iZe=r(f6e," (MPNet model)"),f6e.forEach(t),dZe=i(L),Xm=n(L,"LI",{});var m6e=s(Xm);nne=n(m6e,"STRONG",{});var Not=s(nne);cZe=r(Not,"mt5"),Not.forEach(t),fZe=r(m6e," \u2014 "),kR=n(m6e,"A",{href:!0});var qot=s(kR);mZe=r(qot,"MT5Config"),qot.forEach(t),gZe=r(m6e," (MT5 model)"),m6e.forEach(t),hZe=i(L),zm=n(L,"LI",{});var g6e=s(zm);sne=n(g6e,"STRONG",{});var jot=s(sne);pZe=r(jot,"mvp"),jot.forEach(t),_Ze=r(g6e," \u2014 "),SR=n(g6e,"A",{href:!0});var Dot=s(SR);uZe=r(Dot,"MvpConfig"),Dot.forEach(t),bZe=r(g6e," (MVP model)"),g6e.forEach(t),vZe=i(L),Qm=n(L,"LI",{});var h6e=s(Qm);lne=n(h6e,"STRONG",{});var Got=s(lne);FZe=r(Got,"nezha"),Got.forEach(t),TZe=r(h6e," \u2014 "),RR=n(h6e,"A",{href:!0});var Oot=s(RR);MZe=r(Oot,"NezhaConfig"),Oot.forEach(t),EZe=r(h6e," (Nezha model)"),h6e.forEach(t),CZe=i(L),Wm=n(L,"LI",{});var p6e=s(Wm);ine=n(p6e,"STRONG",{});var Vot=s(ine);wZe=r(Vot,"nystromformer"),Vot.forEach(t),AZe=r(p6e," \u2014 "),PR=n(p6e,"A",{href:!0});var Xot=s(PR);LZe=r(Xot,"NystromformerConfig"),Xot.forEach(t),yZe=r(p6e," (Nystr\xF6mformer model)"),p6e.forEach(t),xZe=i(L),Hm=n(L,"LI",{});var _6e=s(Hm);dne=n(_6e,"STRONG",{});var zot=s(dne);$Ze=r(zot,"openai-gpt"),zot.forEach(t),kZe=r(_6e," \u2014 "),BR=n(_6e,"A",{href:!0});var Qot=s(BR);SZe=r(Qot,"OpenAIGPTConfig"),Qot.forEach(t),RZe=r(_6e," (OpenAI GPT model)"),_6e.forEach(t),PZe=i(L),Um=n(L,"LI",{});var u6e=s(Um);cne=n(u6e,"STRONG",{});var Wot=s(cne);BZe=r(Wot,"opt"),Wot.forEach(t),IZe=r(u6e," \u2014 "),IR=n(u6e,"A",{href:!0});var Hot=s(IR);NZe=r(Hot,"OPTConfig"),Hot.forEach(t),qZe=r(u6e," (OPT model)"),u6e.forEach(t),jZe=i(L),Jm=n(L,"LI",{});var b6e=s(Jm);fne=n(b6e,"STRONG",{});var Uot=s(fne);DZe=r(Uot,"pegasus"),Uot.forEach(t),GZe=r(b6e," \u2014 "),NR=n(b6e,"A",{href:!0});var Jot=s(NR);OZe=r(Jot,"PegasusConfig"),Jot.forEach(t),VZe=r(b6e," (Pegasus model)"),b6e.forEach(t),XZe=i(L),Ym=n(L,"LI",{});var v6e=s(Ym);mne=n(v6e,"STRONG",{});var Yot=s(mne);zZe=r(Yot,"perceiver"),Yot.forEach(t),QZe=r(v6e," \u2014 "),qR=n(v6e,"A",{href:!0});var Kot=s(qR);WZe=r(Kot,"PerceiverConfig"),Kot.forEach(t),HZe=r(v6e," (Perceiver model)"),v6e.forEach(t),UZe=i(L),Km=n(L,"LI",{});var F6e=s(Km);gne=n(F6e,"STRONG",{});var Zot=s(gne);JZe=r(Zot,"plbart"),Zot.forEach(t),YZe=r(F6e," \u2014 "),jR=n(F6e,"A",{href:!0});var ert=s(jR);KZe=r(ert,"PLBartConfig"),ert.forEach(t),ZZe=r(F6e," (PLBart model)"),F6e.forEach(t),eeo=i(L),Zm=n(L,"LI",{});var T6e=s(Zm);hne=n(T6e,"STRONG",{});var ort=s(hne);oeo=r(ort,"poolformer"),ort.forEach(t),reo=r(T6e," \u2014 "),DR=n(T6e,"A",{href:!0});var rrt=s(DR);teo=r(rrt,"PoolFormerConfig"),rrt.forEach(t),aeo=r(T6e," (PoolFormer model)"),T6e.forEach(t),neo=i(L),eg=n(L,"LI",{});var M6e=s(eg);pne=n(M6e,"STRONG",{});var trt=s(pne);seo=r(trt,"prophetnet"),trt.forEach(t),leo=r(M6e," \u2014 "),GR=n(M6e,"A",{href:!0});var art=s(GR);ieo=r(art,"ProphetNetConfig"),art.forEach(t),deo=r(M6e," (ProphetNet model)"),M6e.forEach(t),ceo=i(L),og=n(L,"LI",{});var E6e=s(og);_ne=n(E6e,"STRONG",{});var nrt=s(_ne);feo=r(nrt,"qdqbert"),nrt.forEach(t),meo=r(E6e," \u2014 "),OR=n(E6e,"A",{href:!0});var srt=s(OR);geo=r(srt,"QDQBertConfig"),srt.forEach(t),heo=r(E6e," (QDQBert model)"),E6e.forEach(t),peo=i(L),rg=n(L,"LI",{});var C6e=s(rg);une=n(C6e,"STRONG",{});var lrt=s(une);_eo=r(lrt,"rag"),lrt.forEach(t),ueo=r(C6e," \u2014 "),VR=n(C6e,"A",{href:!0});var irt=s(VR);beo=r(irt,"RagConfig"),irt.forEach(t),veo=r(C6e," (RAG model)"),C6e.forEach(t),Feo=i(L),tg=n(L,"LI",{});var w6e=s(tg);bne=n(w6e,"STRONG",{});var drt=s(bne);Teo=r(drt,"realm"),drt.forEach(t),Meo=r(w6e," \u2014 "),XR=n(w6e,"A",{href:!0});var crt=s(XR);Eeo=r(crt,"RealmConfig"),crt.forEach(t),Ceo=r(w6e," (REALM model)"),w6e.forEach(t),weo=i(L),ag=n(L,"LI",{});var A6e=s(ag);vne=n(A6e,"STRONG",{});var frt=s(vne);Aeo=r(frt,"reformer"),frt.forEach(t),Leo=r(A6e," \u2014 "),zR=n(A6e,"A",{href:!0});var mrt=s(zR);yeo=r(mrt,"ReformerConfig"),mrt.forEach(t),xeo=r(A6e," (Reformer model)"),A6e.forEach(t),$eo=i(L),ng=n(L,"LI",{});var L6e=s(ng);Fne=n(L6e,"STRONG",{});var grt=s(Fne);keo=r(grt,"regnet"),grt.forEach(t),Seo=r(L6e," \u2014 "),QR=n(L6e,"A",{href:!0});var hrt=s(QR);Reo=r(hrt,"RegNetConfig"),hrt.forEach(t),Peo=r(L6e," (RegNet model)"),L6e.forEach(t),Beo=i(L),sg=n(L,"LI",{});var y6e=s(sg);Tne=n(y6e,"STRONG",{});var prt=s(Tne);Ieo=r(prt,"rembert"),prt.forEach(t),Neo=r(y6e," \u2014 "),WR=n(y6e,"A",{href:!0});var _rt=s(WR);qeo=r(_rt,"RemBertConfig"),_rt.forEach(t),jeo=r(y6e," (RemBERT model)"),y6e.forEach(t),Deo=i(L),lg=n(L,"LI",{});var x6e=s(lg);Mne=n(x6e,"STRONG",{});var urt=s(Mne);Geo=r(urt,"resnet"),urt.forEach(t),Oeo=r(x6e," \u2014 "),HR=n(x6e,"A",{href:!0});var brt=s(HR);Veo=r(brt,"ResNetConfig"),brt.forEach(t),Xeo=r(x6e," (ResNet model)"),x6e.forEach(t),zeo=i(L),ig=n(L,"LI",{});var $6e=s(ig);Ene=n($6e,"STRONG",{});var vrt=s(Ene);Qeo=r(vrt,"retribert"),vrt.forEach(t),Weo=r($6e," \u2014 "),UR=n($6e,"A",{href:!0});var Frt=s(UR);Heo=r(Frt,"RetriBertConfig"),Frt.forEach(t),Ueo=r($6e," (RetriBERT model)"),$6e.forEach(t),Jeo=i(L),dg=n(L,"LI",{});var k6e=s(dg);Cne=n(k6e,"STRONG",{});var Trt=s(Cne);Yeo=r(Trt,"roberta"),Trt.forEach(t),Keo=r(k6e," \u2014 "),JR=n(k6e,"A",{href:!0});var Mrt=s(JR);Zeo=r(Mrt,"RobertaConfig"),Mrt.forEach(t),eoo=r(k6e," (RoBERTa model)"),k6e.forEach(t),ooo=i(L),cg=n(L,"LI",{});var S6e=s(cg);wne=n(S6e,"STRONG",{});var Ert=s(wne);roo=r(Ert,"roformer"),Ert.forEach(t),too=r(S6e," \u2014 "),YR=n(S6e,"A",{href:!0});var Crt=s(YR);aoo=r(Crt,"RoFormerConfig"),Crt.forEach(t),noo=r(S6e," (RoFormer model)"),S6e.forEach(t),soo=i(L),fg=n(L,"LI",{});var R6e=s(fg);Ane=n(R6e,"STRONG",{});var wrt=s(Ane);loo=r(wrt,"segformer"),wrt.forEach(t),ioo=r(R6e," \u2014 "),KR=n(R6e,"A",{href:!0});var Art=s(KR);doo=r(Art,"SegformerConfig"),Art.forEach(t),coo=r(R6e," (SegFormer model)"),R6e.forEach(t),foo=i(L),mg=n(L,"LI",{});var P6e=s(mg);Lne=n(P6e,"STRONG",{});var Lrt=s(Lne);moo=r(Lrt,"sew"),Lrt.forEach(t),goo=r(P6e," \u2014 "),ZR=n(P6e,"A",{href:!0});var yrt=s(ZR);hoo=r(yrt,"SEWConfig"),yrt.forEach(t),poo=r(P6e," (SEW model)"),P6e.forEach(t),_oo=i(L),gg=n(L,"LI",{});var B6e=s(gg);yne=n(B6e,"STRONG",{});var xrt=s(yne);uoo=r(xrt,"sew-d"),xrt.forEach(t),boo=r(B6e," \u2014 "),eP=n(B6e,"A",{href:!0});var $rt=s(eP);voo=r($rt,"SEWDConfig"),$rt.forEach(t),Foo=r(B6e," (SEW-D model)"),B6e.forEach(t),Too=i(L),hg=n(L,"LI",{});var I6e=s(hg);xne=n(I6e,"STRONG",{});var krt=s(xne);Moo=r(krt,"speech-encoder-decoder"),krt.forEach(t),Eoo=r(I6e," \u2014 "),oP=n(I6e,"A",{href:!0});var Srt=s(oP);Coo=r(Srt,"SpeechEncoderDecoderConfig"),Srt.forEach(t),woo=r(I6e," (Speech Encoder decoder model)"),I6e.forEach(t),Aoo=i(L),pg=n(L,"LI",{});var N6e=s(pg);$ne=n(N6e,"STRONG",{});var Rrt=s($ne);Loo=r(Rrt,"speech_to_text"),Rrt.forEach(t),yoo=r(N6e," \u2014 "),rP=n(N6e,"A",{href:!0});var Prt=s(rP);xoo=r(Prt,"Speech2TextConfig"),Prt.forEach(t),$oo=r(N6e," (Speech2Text model)"),N6e.forEach(t),koo=i(L),_g=n(L,"LI",{});var q6e=s(_g);kne=n(q6e,"STRONG",{});var Brt=s(kne);Soo=r(Brt,"speech_to_text_2"),Brt.forEach(t),Roo=r(q6e," \u2014 "),tP=n(q6e,"A",{href:!0});var Irt=s(tP);Poo=r(Irt,"Speech2Text2Config"),Irt.forEach(t),Boo=r(q6e," (Speech2Text2 model)"),q6e.forEach(t),Ioo=i(L),ug=n(L,"LI",{});var j6e=s(ug);Sne=n(j6e,"STRONG",{});var Nrt=s(Sne);Noo=r(Nrt,"splinter"),Nrt.forEach(t),qoo=r(j6e," \u2014 "),aP=n(j6e,"A",{href:!0});var qrt=s(aP);joo=r(qrt,"SplinterConfig"),qrt.forEach(t),Doo=r(j6e," (Splinter model)"),j6e.forEach(t),Goo=i(L),bg=n(L,"LI",{});var D6e=s(bg);Rne=n(D6e,"STRONG",{});var jrt=s(Rne);Ooo=r(jrt,"squeezebert"),jrt.forEach(t),Voo=r(D6e," \u2014 "),nP=n(D6e,"A",{href:!0});var Drt=s(nP);Xoo=r(Drt,"SqueezeBertConfig"),Drt.forEach(t),zoo=r(D6e," (SqueezeBERT model)"),D6e.forEach(t),Qoo=i(L),vg=n(L,"LI",{});var G6e=s(vg);Pne=n(G6e,"STRONG",{});var Grt=s(Pne);Woo=r(Grt,"swin"),Grt.forEach(t),Hoo=r(G6e," \u2014 "),sP=n(G6e,"A",{href:!0});var Ort=s(sP);Uoo=r(Ort,"SwinConfig"),Ort.forEach(t),Joo=r(G6e," (Swin Transformer model)"),G6e.forEach(t),Yoo=i(L),Fg=n(L,"LI",{});var O6e=s(Fg);Bne=n(O6e,"STRONG",{});var Vrt=s(Bne);Koo=r(Vrt,"t5"),Vrt.forEach(t),Zoo=r(O6e," \u2014 "),lP=n(O6e,"A",{href:!0});var Xrt=s(lP);ero=r(Xrt,"T5Config"),Xrt.forEach(t),oro=r(O6e," (T5 model)"),O6e.forEach(t),rro=i(L),Tg=n(L,"LI",{});var V6e=s(Tg);Ine=n(V6e,"STRONG",{});var zrt=s(Ine);tro=r(zrt,"tapas"),zrt.forEach(t),aro=r(V6e," \u2014 "),iP=n(V6e,"A",{href:!0});var Qrt=s(iP);nro=r(Qrt,"TapasConfig"),Qrt.forEach(t),sro=r(V6e," (TAPAS model)"),V6e.forEach(t),lro=i(L),Mg=n(L,"LI",{});var X6e=s(Mg);Nne=n(X6e,"STRONG",{});var Wrt=s(Nne);iro=r(Wrt,"trajectory_transformer"),Wrt.forEach(t),dro=r(X6e," \u2014 "),dP=n(X6e,"A",{href:!0});var Hrt=s(dP);cro=r(Hrt,"TrajectoryTransformerConfig"),Hrt.forEach(t),fro=r(X6e," (Trajectory Transformer model)"),X6e.forEach(t),mro=i(L),Eg=n(L,"LI",{});var z6e=s(Eg);qne=n(z6e,"STRONG",{});var Urt=s(qne);gro=r(Urt,"transfo-xl"),Urt.forEach(t),hro=r(z6e," \u2014 "),cP=n(z6e,"A",{href:!0});var Jrt=s(cP);pro=r(Jrt,"TransfoXLConfig"),Jrt.forEach(t),_ro=r(z6e," (Transformer-XL model)"),z6e.forEach(t),uro=i(L),Cg=n(L,"LI",{});var Q6e=s(Cg);jne=n(Q6e,"STRONG",{});var Yrt=s(jne);bro=r(Yrt,"trocr"),Yrt.forEach(t),vro=r(Q6e," \u2014 "),fP=n(Q6e,"A",{href:!0});var Krt=s(fP);Fro=r(Krt,"TrOCRConfig"),Krt.forEach(t),Tro=r(Q6e," (TrOCR model)"),Q6e.forEach(t),Mro=i(L),wg=n(L,"LI",{});var W6e=s(wg);Dne=n(W6e,"STRONG",{});var Zrt=s(Dne);Ero=r(Zrt,"unispeech"),Zrt.forEach(t),Cro=r(W6e," \u2014 "),mP=n(W6e,"A",{href:!0});var ett=s(mP);wro=r(ett,"UniSpeechConfig"),ett.forEach(t),Aro=r(W6e," (UniSpeech model)"),W6e.forEach(t),Lro=i(L),Ag=n(L,"LI",{});var H6e=s(Ag);Gne=n(H6e,"STRONG",{});var ott=s(Gne);yro=r(ott,"unispeech-sat"),ott.forEach(t),xro=r(H6e," \u2014 "),gP=n(H6e,"A",{href:!0});var rtt=s(gP);$ro=r(rtt,"UniSpeechSatConfig"),rtt.forEach(t),kro=r(H6e," (UniSpeechSat model)"),H6e.forEach(t),Sro=i(L),Lg=n(L,"LI",{});var U6e=s(Lg);One=n(U6e,"STRONG",{});var ttt=s(One);Rro=r(ttt,"van"),ttt.forEach(t),Pro=r(U6e," \u2014 "),hP=n(U6e,"A",{href:!0});var att=s(hP);Bro=r(att,"VanConfig"),att.forEach(t),Iro=r(U6e," (VAN model)"),U6e.forEach(t),Nro=i(L),yg=n(L,"LI",{});var J6e=s(yg);Vne=n(J6e,"STRONG",{});var ntt=s(Vne);qro=r(ntt,"vilt"),ntt.forEach(t),jro=r(J6e," \u2014 "),pP=n(J6e,"A",{href:!0});var stt=s(pP);Dro=r(stt,"ViltConfig"),stt.forEach(t),Gro=r(J6e," (ViLT model)"),J6e.forEach(t),Oro=i(L),xg=n(L,"LI",{});var Y6e=s(xg);Xne=n(Y6e,"STRONG",{});var ltt=s(Xne);Vro=r(ltt,"vision-encoder-decoder"),ltt.forEach(t),Xro=r(Y6e," \u2014 "),_P=n(Y6e,"A",{href:!0});var itt=s(_P);zro=r(itt,"VisionEncoderDecoderConfig"),itt.forEach(t),Qro=r(Y6e," (Vision Encoder decoder model)"),Y6e.forEach(t),Wro=i(L),$g=n(L,"LI",{});var K6e=s($g);zne=n(K6e,"STRONG",{});var dtt=s(zne);Hro=r(dtt,"vision-text-dual-encoder"),dtt.forEach(t),Uro=r(K6e," \u2014 "),uP=n(K6e,"A",{href:!0});var ctt=s(uP);Jro=r(ctt,"VisionTextDualEncoderConfig"),ctt.forEach(t),Yro=r(K6e," (VisionTextDualEncoder model)"),K6e.forEach(t),Kro=i(L),kg=n(L,"LI",{});var Z6e=s(kg);Qne=n(Z6e,"STRONG",{});var ftt=s(Qne);Zro=r(ftt,"visual_bert"),ftt.forEach(t),eto=r(Z6e," \u2014 "),bP=n(Z6e,"A",{href:!0});var mtt=s(bP);oto=r(mtt,"VisualBertConfig"),mtt.forEach(t),rto=r(Z6e," (VisualBERT model)"),Z6e.forEach(t),tto=i(L),Sg=n(L,"LI",{});var eLe=s(Sg);Wne=n(eLe,"STRONG",{});var gtt=s(Wne);ato=r(gtt,"vit"),gtt.forEach(t),nto=r(eLe," \u2014 "),vP=n(eLe,"A",{href:!0});var htt=s(vP);sto=r(htt,"ViTConfig"),htt.forEach(t),lto=r(eLe," (ViT model)"),eLe.forEach(t),ito=i(L),Rg=n(L,"LI",{});var oLe=s(Rg);Hne=n(oLe,"STRONG",{});var ptt=s(Hne);dto=r(ptt,"vit_mae"),ptt.forEach(t),cto=r(oLe," \u2014 "),FP=n(oLe,"A",{href:!0});var _tt=s(FP);fto=r(_tt,"ViTMAEConfig"),_tt.forEach(t),mto=r(oLe," (ViTMAE model)"),oLe.forEach(t),gto=i(L),Pg=n(L,"LI",{});var rLe=s(Pg);Une=n(rLe,"STRONG",{});var utt=s(Une);hto=r(utt,"wav2vec2"),utt.forEach(t),pto=r(rLe," \u2014 "),TP=n(rLe,"A",{href:!0});var btt=s(TP);_to=r(btt,"Wav2Vec2Config"),btt.forEach(t),uto=r(rLe," (Wav2Vec2 model)"),rLe.forEach(t),bto=i(L),Bg=n(L,"LI",{});var tLe=s(Bg);Jne=n(tLe,"STRONG",{});var vtt=s(Jne);vto=r(vtt,"wav2vec2-conformer"),vtt.forEach(t),Fto=r(tLe," \u2014 "),MP=n(tLe,"A",{href:!0});var Ftt=s(MP);Tto=r(Ftt,"Wav2Vec2ConformerConfig"),Ftt.forEach(t),Mto=r(tLe," (Wav2Vec2-Conformer model)"),tLe.forEach(t),Eto=i(L),Ig=n(L,"LI",{});var aLe=s(Ig);Yne=n(aLe,"STRONG",{});var Ttt=s(Yne);Cto=r(Ttt,"wavlm"),Ttt.forEach(t),wto=r(aLe," \u2014 "),EP=n(aLe,"A",{href:!0});var Mtt=s(EP);Ato=r(Mtt,"WavLMConfig"),Mtt.forEach(t),Lto=r(aLe," (WavLM model)"),aLe.forEach(t),yto=i(L),Ng=n(L,"LI",{});var nLe=s(Ng);Kne=n(nLe,"STRONG",{});var Ett=s(Kne);xto=r(Ett,"xglm"),Ett.forEach(t),$to=r(nLe," \u2014 "),CP=n(nLe,"A",{href:!0});var Ctt=s(CP);kto=r(Ctt,"XGLMConfig"),Ctt.forEach(t),Sto=r(nLe," (XGLM model)"),nLe.forEach(t),Rto=i(L),qg=n(L,"LI",{});var sLe=s(qg);Zne=n(sLe,"STRONG",{});var wtt=s(Zne);Pto=r(wtt,"xlm"),wtt.forEach(t),Bto=r(sLe," \u2014 "),wP=n(sLe,"A",{href:!0});var Att=s(wP);Ito=r(Att,"XLMConfig"),Att.forEach(t),Nto=r(sLe," (XLM model)"),sLe.forEach(t),qto=i(L),jg=n(L,"LI",{});var lLe=s(jg);ese=n(lLe,"STRONG",{});var Ltt=s(ese);jto=r(Ltt,"xlm-prophetnet"),Ltt.forEach(t),Dto=r(lLe," \u2014 "),AP=n(lLe,"A",{href:!0});var ytt=s(AP);Gto=r(ytt,"XLMProphetNetConfig"),ytt.forEach(t),Oto=r(lLe," (XLM-ProphetNet model)"),lLe.forEach(t),Vto=i(L),Dg=n(L,"LI",{});var iLe=s(Dg);ose=n(iLe,"STRONG",{});var xtt=s(ose);Xto=r(xtt,"xlm-roberta"),xtt.forEach(t),zto=r(iLe," \u2014 "),LP=n(iLe,"A",{href:!0});var $tt=s(LP);Qto=r($tt,"XLMRobertaConfig"),$tt.forEach(t),Wto=r(iLe," (XLM-RoBERTa model)"),iLe.forEach(t),Hto=i(L),Gg=n(L,"LI",{});var dLe=s(Gg);rse=n(dLe,"STRONG",{});var ktt=s(rse);Uto=r(ktt,"xlm-roberta-xl"),ktt.forEach(t),Jto=r(dLe," \u2014 "),yP=n(dLe,"A",{href:!0});var Stt=s(yP);Yto=r(Stt,"XLMRobertaXLConfig"),Stt.forEach(t),Kto=r(dLe," (XLM-RoBERTa-XL model)"),dLe.forEach(t),Zto=i(L),Og=n(L,"LI",{});var cLe=s(Og);tse=n(cLe,"STRONG",{});var Rtt=s(tse);eao=r(Rtt,"xlnet"),Rtt.forEach(t),oao=r(cLe," \u2014 "),xP=n(cLe,"A",{href:!0});var Ptt=s(xP);rao=r(Ptt,"XLNetConfig"),Ptt.forEach(t),tao=r(cLe," (XLNet model)"),cLe.forEach(t),aao=i(L),Vg=n(L,"LI",{});var fLe=s(Vg);ase=n(fLe,"STRONG",{});var Btt=s(ase);nao=r(Btt,"yolos"),Btt.forEach(t),sao=r(fLe," \u2014 "),$P=n(fLe,"A",{href:!0});var Itt=s($P);lao=r(Itt,"YolosConfig"),Itt.forEach(t),iao=r(fLe," (YOLOS model)"),fLe.forEach(t),dao=i(L),Xg=n(L,"LI",{});var mLe=s(Xg);nse=n(mLe,"STRONG",{});var Ntt=s(nse);cao=r(Ntt,"yoso"),Ntt.forEach(t),fao=r(mLe," \u2014 "),kP=n(mLe,"A",{href:!0});var qtt=s(kP);mao=r(qtt,"YosoConfig"),qtt.forEach(t),gao=r(mLe," (YOSO model)"),mLe.forEach(t),L.forEach(t),hao=i(tt),T(zg.$$.fragment,tt),tt.forEach(t),pao=i(rt),Qg=n(rt,"DIV",{class:!0});var zXe=s(Qg);T(U6.$$.fragment,zXe),_ao=i(zXe),sse=n(zXe,"P",{});var jtt=s(sse);uao=r(jtt,"Register a new configuration for this class."),jtt.forEach(t),zXe.forEach(t),rt.forEach(t),QOe=i(f),Ri=n(f,"H2",{class:!0});var QXe=s(Ri);Wg=n(QXe,"A",{id:!0,class:!0,href:!0});var Dtt=s(Wg);lse=n(Dtt,"SPAN",{});var Gtt=s(lse);T(J6.$$.fragment,Gtt),Gtt.forEach(t),Dtt.forEach(t),bao=i(QXe),ise=n(QXe,"SPAN",{});var Ott=s(ise);vao=r(Ott,"AutoTokenizer"),Ott.forEach(t),QXe.forEach(t),WOe=i(f),Ao=n(f,"DIV",{class:!0});var Us=s(Ao);T(Y6.$$.fragment,Us),Fao=i(Us),K6=n(Us,"P",{});var WXe=s(K6);Tao=r(WXe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),SP=n(WXe,"A",{href:!0});var Vtt=s(SP);Mao=r(Vtt,"AutoTokenizer.from_pretrained()"),Vtt.forEach(t),Eao=r(WXe," class method."),WXe.forEach(t),Cao=i(Us),Z6=n(Us,"P",{});var HXe=s(Z6);wao=r(HXe,"This class cannot be instantiated directly using "),dse=n(HXe,"CODE",{});var Xtt=s(dse);Aao=r(Xtt,"__init__()"),Xtt.forEach(t),Lao=r(HXe," (throws an error)."),HXe.forEach(t),yao=i(Us),Lr=n(Us,"DIV",{class:!0});var Js=s(Lr);T(eL.$$.fragment,Js),xao=i(Js),cse=n(Js,"P",{});var ztt=s(cse);$ao=r(ztt,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),ztt.forEach(t),kao=i(Js),ka=n(Js,"P",{});var Ow=s(ka);Sao=r(Ow,"The tokenizer class to instantiate is selected based on the "),fse=n(Ow,"CODE",{});var Qtt=s(fse);Rao=r(Qtt,"model_type"),Qtt.forEach(t),Pao=r(Ow,` property of the config object (either
passed as an argument or loaded from `),mse=n(Ow,"CODE",{});var Wtt=s(mse);Bao=r(Wtt,"pretrained_model_name_or_path"),Wtt.forEach(t),Iao=r(Ow,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gse=n(Ow,"CODE",{});var Htt=s(gse);Nao=r(Htt,"pretrained_model_name_or_path"),Htt.forEach(t),qao=r(Ow,":"),Ow.forEach(t),jao=i(Js),k=n(Js,"UL",{});var S=s(k);qn=n(S,"LI",{});var sk=s(qn);hse=n(sk,"STRONG",{});var Utt=s(hse);Dao=r(Utt,"albert"),Utt.forEach(t),Gao=r(sk," \u2014 "),RP=n(sk,"A",{href:!0});var Jtt=s(RP);Oao=r(Jtt,"AlbertTokenizer"),Jtt.forEach(t),Vao=r(sk," or "),PP=n(sk,"A",{href:!0});var Ytt=s(PP);Xao=r(Ytt,"AlbertTokenizerFast"),Ytt.forEach(t),zao=r(sk," (ALBERT model)"),sk.forEach(t),Qao=i(S),jn=n(S,"LI",{});var lk=s(jn);pse=n(lk,"STRONG",{});var Ktt=s(pse);Wao=r(Ktt,"bart"),Ktt.forEach(t),Hao=r(lk," \u2014 "),BP=n(lk,"A",{href:!0});var Ztt=s(BP);Uao=r(Ztt,"BartTokenizer"),Ztt.forEach(t),Jao=r(lk," or "),IP=n(lk,"A",{href:!0});var eat=s(IP);Yao=r(eat,"BartTokenizerFast"),eat.forEach(t),Kao=r(lk," (BART model)"),lk.forEach(t),Zao=i(S),Dn=n(S,"LI",{});var ik=s(Dn);_se=n(ik,"STRONG",{});var oat=s(_se);eno=r(oat,"barthez"),oat.forEach(t),ono=r(ik," \u2014 "),NP=n(ik,"A",{href:!0});var rat=s(NP);rno=r(rat,"BarthezTokenizer"),rat.forEach(t),tno=r(ik," or "),qP=n(ik,"A",{href:!0});var tat=s(qP);ano=r(tat,"BarthezTokenizerFast"),tat.forEach(t),nno=r(ik," (BARThez model)"),ik.forEach(t),sno=i(S),Hg=n(S,"LI",{});var gLe=s(Hg);use=n(gLe,"STRONG",{});var aat=s(use);lno=r(aat,"bartpho"),aat.forEach(t),ino=r(gLe," \u2014 "),jP=n(gLe,"A",{href:!0});var nat=s(jP);dno=r(nat,"BartphoTokenizer"),nat.forEach(t),cno=r(gLe," (BARTpho model)"),gLe.forEach(t),fno=i(S),Gn=n(S,"LI",{});var dk=s(Gn);bse=n(dk,"STRONG",{});var sat=s(bse);mno=r(sat,"bert"),sat.forEach(t),gno=r(dk," \u2014 "),DP=n(dk,"A",{href:!0});var lat=s(DP);hno=r(lat,"BertTokenizer"),lat.forEach(t),pno=r(dk," or "),GP=n(dk,"A",{href:!0});var iat=s(GP);_no=r(iat,"BertTokenizerFast"),iat.forEach(t),uno=r(dk," (BERT model)"),dk.forEach(t),bno=i(S),Ug=n(S,"LI",{});var hLe=s(Ug);vse=n(hLe,"STRONG",{});var dat=s(vse);vno=r(dat,"bert-generation"),dat.forEach(t),Fno=r(hLe," \u2014 "),OP=n(hLe,"A",{href:!0});var cat=s(OP);Tno=r(cat,"BertGenerationTokenizer"),cat.forEach(t),Mno=r(hLe," (Bert Generation model)"),hLe.forEach(t),Eno=i(S),Jg=n(S,"LI",{});var pLe=s(Jg);Fse=n(pLe,"STRONG",{});var fat=s(Fse);Cno=r(fat,"bert-japanese"),fat.forEach(t),wno=r(pLe," \u2014 "),VP=n(pLe,"A",{href:!0});var mat=s(VP);Ano=r(mat,"BertJapaneseTokenizer"),mat.forEach(t),Lno=r(pLe," (BertJapanese model)"),pLe.forEach(t),yno=i(S),Yg=n(S,"LI",{});var _Le=s(Yg);Tse=n(_Le,"STRONG",{});var gat=s(Tse);xno=r(gat,"bertweet"),gat.forEach(t),$no=r(_Le," \u2014 "),XP=n(_Le,"A",{href:!0});var hat=s(XP);kno=r(hat,"BertweetTokenizer"),hat.forEach(t),Sno=r(_Le," (BERTweet model)"),_Le.forEach(t),Rno=i(S),On=n(S,"LI",{});var ck=s(On);Mse=n(ck,"STRONG",{});var pat=s(Mse);Pno=r(pat,"big_bird"),pat.forEach(t),Bno=r(ck," \u2014 "),zP=n(ck,"A",{href:!0});var _at=s(zP);Ino=r(_at,"BigBirdTokenizer"),_at.forEach(t),Nno=r(ck," or "),QP=n(ck,"A",{href:!0});var uat=s(QP);qno=r(uat,"BigBirdTokenizerFast"),uat.forEach(t),jno=r(ck," (BigBird model)"),ck.forEach(t),Dno=i(S),Vn=n(S,"LI",{});var fk=s(Vn);Ese=n(fk,"STRONG",{});var bat=s(Ese);Gno=r(bat,"bigbird_pegasus"),bat.forEach(t),Ono=r(fk," \u2014 "),WP=n(fk,"A",{href:!0});var vat=s(WP);Vno=r(vat,"PegasusTokenizer"),vat.forEach(t),Xno=r(fk," or "),HP=n(fk,"A",{href:!0});var Fat=s(HP);zno=r(Fat,"PegasusTokenizerFast"),Fat.forEach(t),Qno=r(fk," (BigBird-Pegasus model)"),fk.forEach(t),Wno=i(S),Xn=n(S,"LI",{});var mk=s(Xn);Cse=n(mk,"STRONG",{});var Tat=s(Cse);Hno=r(Tat,"blenderbot"),Tat.forEach(t),Uno=r(mk," \u2014 "),UP=n(mk,"A",{href:!0});var Mat=s(UP);Jno=r(Mat,"BlenderbotTokenizer"),Mat.forEach(t),Yno=r(mk," or "),JP=n(mk,"A",{href:!0});var Eat=s(JP);Kno=r(Eat,"BlenderbotTokenizerFast"),Eat.forEach(t),Zno=r(mk," (Blenderbot model)"),mk.forEach(t),eso=i(S),Kg=n(S,"LI",{});var uLe=s(Kg);wse=n(uLe,"STRONG",{});var Cat=s(wse);oso=r(Cat,"blenderbot-small"),Cat.forEach(t),rso=r(uLe," \u2014 "),YP=n(uLe,"A",{href:!0});var wat=s(YP);tso=r(wat,"BlenderbotSmallTokenizer"),wat.forEach(t),aso=r(uLe," (BlenderbotSmall model)"),uLe.forEach(t),nso=i(S),Zg=n(S,"LI",{});var bLe=s(Zg);Ase=n(bLe,"STRONG",{});var Aat=s(Ase);sso=r(Aat,"bloom"),Aat.forEach(t),lso=r(bLe," \u2014 "),KP=n(bLe,"A",{href:!0});var Lat=s(KP);iso=r(Lat,"BloomTokenizerFast"),Lat.forEach(t),dso=r(bLe," (BLOOM model)"),bLe.forEach(t),cso=i(S),eh=n(S,"LI",{});var vLe=s(eh);Lse=n(vLe,"STRONG",{});var yat=s(Lse);fso=r(yat,"byt5"),yat.forEach(t),mso=r(vLe," \u2014 "),ZP=n(vLe,"A",{href:!0});var xat=s(ZP);gso=r(xat,"ByT5Tokenizer"),xat.forEach(t),hso=r(vLe," (ByT5 model)"),vLe.forEach(t),pso=i(S),zn=n(S,"LI",{});var gk=s(zn);yse=n(gk,"STRONG",{});var $at=s(yse);_so=r($at,"camembert"),$at.forEach(t),uso=r(gk," \u2014 "),eB=n(gk,"A",{href:!0});var kat=s(eB);bso=r(kat,"CamembertTokenizer"),kat.forEach(t),vso=r(gk," or "),oB=n(gk,"A",{href:!0});var Sat=s(oB);Fso=r(Sat,"CamembertTokenizerFast"),Sat.forEach(t),Tso=r(gk," (CamemBERT model)"),gk.forEach(t),Mso=i(S),oh=n(S,"LI",{});var FLe=s(oh);xse=n(FLe,"STRONG",{});var Rat=s(xse);Eso=r(Rat,"canine"),Rat.forEach(t),Cso=r(FLe," \u2014 "),rB=n(FLe,"A",{href:!0});var Pat=s(rB);wso=r(Pat,"CanineTokenizer"),Pat.forEach(t),Aso=r(FLe," (CANINE model)"),FLe.forEach(t),Lso=i(S),Qn=n(S,"LI",{});var hk=s(Qn);$se=n(hk,"STRONG",{});var Bat=s($se);yso=r(Bat,"clip"),Bat.forEach(t),xso=r(hk," \u2014 "),tB=n(hk,"A",{href:!0});var Iat=s(tB);$so=r(Iat,"CLIPTokenizer"),Iat.forEach(t),kso=r(hk," or "),aB=n(hk,"A",{href:!0});var Nat=s(aB);Sso=r(Nat,"CLIPTokenizerFast"),Nat.forEach(t),Rso=r(hk," (CLIP model)"),hk.forEach(t),Pso=i(S),Wn=n(S,"LI",{});var pk=s(Wn);kse=n(pk,"STRONG",{});var qat=s(kse);Bso=r(qat,"codegen"),qat.forEach(t),Iso=r(pk," \u2014 "),nB=n(pk,"A",{href:!0});var jat=s(nB);Nso=r(jat,"CodeGenTokenizer"),jat.forEach(t),qso=r(pk," or "),sB=n(pk,"A",{href:!0});var Dat=s(sB);jso=r(Dat,"CodeGenTokenizerFast"),Dat.forEach(t),Dso=r(pk," (CodeGen model)"),pk.forEach(t),Gso=i(S),Hn=n(S,"LI",{});var _k=s(Hn);Sse=n(_k,"STRONG",{});var Gat=s(Sse);Oso=r(Gat,"convbert"),Gat.forEach(t),Vso=r(_k," \u2014 "),lB=n(_k,"A",{href:!0});var Oat=s(lB);Xso=r(Oat,"ConvBertTokenizer"),Oat.forEach(t),zso=r(_k," or "),iB=n(_k,"A",{href:!0});var Vat=s(iB);Qso=r(Vat,"ConvBertTokenizerFast"),Vat.forEach(t),Wso=r(_k," (ConvBERT model)"),_k.forEach(t),Hso=i(S),Un=n(S,"LI",{});var uk=s(Un);Rse=n(uk,"STRONG",{});var Xat=s(Rse);Uso=r(Xat,"cpm"),Xat.forEach(t),Jso=r(uk," \u2014 "),dB=n(uk,"A",{href:!0});var zat=s(dB);Yso=r(zat,"CpmTokenizer"),zat.forEach(t),Kso=r(uk," or "),cB=n(uk,"A",{href:!0});var Qat=s(cB);Zso=r(Qat,"CpmTokenizerFast"),Qat.forEach(t),elo=r(uk," (CPM model)"),uk.forEach(t),olo=i(S),rh=n(S,"LI",{});var TLe=s(rh);Pse=n(TLe,"STRONG",{});var Wat=s(Pse);rlo=r(Wat,"ctrl"),Wat.forEach(t),tlo=r(TLe," \u2014 "),fB=n(TLe,"A",{href:!0});var Hat=s(fB);alo=r(Hat,"CTRLTokenizer"),Hat.forEach(t),nlo=r(TLe," (CTRL model)"),TLe.forEach(t),slo=i(S),Jn=n(S,"LI",{});var bk=s(Jn);Bse=n(bk,"STRONG",{});var Uat=s(Bse);llo=r(Uat,"data2vec-text"),Uat.forEach(t),ilo=r(bk," \u2014 "),mB=n(bk,"A",{href:!0});var Jat=s(mB);dlo=r(Jat,"RobertaTokenizer"),Jat.forEach(t),clo=r(bk," or "),gB=n(bk,"A",{href:!0});var Yat=s(gB);flo=r(Yat,"RobertaTokenizerFast"),Yat.forEach(t),mlo=r(bk," (Data2VecText model)"),bk.forEach(t),glo=i(S),Yn=n(S,"LI",{});var vk=s(Yn);Ise=n(vk,"STRONG",{});var Kat=s(Ise);hlo=r(Kat,"deberta"),Kat.forEach(t),plo=r(vk," \u2014 "),hB=n(vk,"A",{href:!0});var Zat=s(hB);_lo=r(Zat,"DebertaTokenizer"),Zat.forEach(t),ulo=r(vk," or "),pB=n(vk,"A",{href:!0});var ent=s(pB);blo=r(ent,"DebertaTokenizerFast"),ent.forEach(t),vlo=r(vk," (DeBERTa model)"),vk.forEach(t),Flo=i(S),Kn=n(S,"LI",{});var Fk=s(Kn);Nse=n(Fk,"STRONG",{});var ont=s(Nse);Tlo=r(ont,"deberta-v2"),ont.forEach(t),Mlo=r(Fk," \u2014 "),_B=n(Fk,"A",{href:!0});var rnt=s(_B);Elo=r(rnt,"DebertaV2Tokenizer"),rnt.forEach(t),Clo=r(Fk," or "),uB=n(Fk,"A",{href:!0});var tnt=s(uB);wlo=r(tnt,"DebertaV2TokenizerFast"),tnt.forEach(t),Alo=r(Fk," (DeBERTa-v2 model)"),Fk.forEach(t),Llo=i(S),Zn=n(S,"LI",{});var Tk=s(Zn);qse=n(Tk,"STRONG",{});var ant=s(qse);ylo=r(ant,"distilbert"),ant.forEach(t),xlo=r(Tk," \u2014 "),bB=n(Tk,"A",{href:!0});var nnt=s(bB);$lo=r(nnt,"DistilBertTokenizer"),nnt.forEach(t),klo=r(Tk," or "),vB=n(Tk,"A",{href:!0});var snt=s(vB);Slo=r(snt,"DistilBertTokenizerFast"),snt.forEach(t),Rlo=r(Tk," (DistilBERT model)"),Tk.forEach(t),Plo=i(S),es=n(S,"LI",{});var Mk=s(es);jse=n(Mk,"STRONG",{});var lnt=s(jse);Blo=r(lnt,"dpr"),lnt.forEach(t),Ilo=r(Mk," \u2014 "),FB=n(Mk,"A",{href:!0});var int=s(FB);Nlo=r(int,"DPRQuestionEncoderTokenizer"),int.forEach(t),qlo=r(Mk," or "),TB=n(Mk,"A",{href:!0});var dnt=s(TB);jlo=r(dnt,"DPRQuestionEncoderTokenizerFast"),dnt.forEach(t),Dlo=r(Mk," (DPR model)"),Mk.forEach(t),Glo=i(S),os=n(S,"LI",{});var Ek=s(os);Dse=n(Ek,"STRONG",{});var cnt=s(Dse);Olo=r(cnt,"electra"),cnt.forEach(t),Vlo=r(Ek," \u2014 "),MB=n(Ek,"A",{href:!0});var fnt=s(MB);Xlo=r(fnt,"ElectraTokenizer"),fnt.forEach(t),zlo=r(Ek," or "),EB=n(Ek,"A",{href:!0});var mnt=s(EB);Qlo=r(mnt,"ElectraTokenizerFast"),mnt.forEach(t),Wlo=r(Ek," (ELECTRA model)"),Ek.forEach(t),Hlo=i(S),th=n(S,"LI",{});var MLe=s(th);Gse=n(MLe,"STRONG",{});var gnt=s(Gse);Ulo=r(gnt,"flaubert"),gnt.forEach(t),Jlo=r(MLe," \u2014 "),CB=n(MLe,"A",{href:!0});var hnt=s(CB);Ylo=r(hnt,"FlaubertTokenizer"),hnt.forEach(t),Klo=r(MLe," (FlauBERT model)"),MLe.forEach(t),Zlo=i(S),rs=n(S,"LI",{});var Ck=s(rs);Ose=n(Ck,"STRONG",{});var pnt=s(Ose);eio=r(pnt,"fnet"),pnt.forEach(t),oio=r(Ck," \u2014 "),wB=n(Ck,"A",{href:!0});var _nt=s(wB);rio=r(_nt,"FNetTokenizer"),_nt.forEach(t),tio=r(Ck," or "),AB=n(Ck,"A",{href:!0});var unt=s(AB);aio=r(unt,"FNetTokenizerFast"),unt.forEach(t),nio=r(Ck," (FNet model)"),Ck.forEach(t),sio=i(S),ah=n(S,"LI",{});var ELe=s(ah);Vse=n(ELe,"STRONG",{});var bnt=s(Vse);lio=r(bnt,"fsmt"),bnt.forEach(t),iio=r(ELe," \u2014 "),LB=n(ELe,"A",{href:!0});var vnt=s(LB);dio=r(vnt,"FSMTTokenizer"),vnt.forEach(t),cio=r(ELe," (FairSeq Machine-Translation model)"),ELe.forEach(t),fio=i(S),ts=n(S,"LI",{});var wk=s(ts);Xse=n(wk,"STRONG",{});var Fnt=s(Xse);mio=r(Fnt,"funnel"),Fnt.forEach(t),gio=r(wk," \u2014 "),yB=n(wk,"A",{href:!0});var Tnt=s(yB);hio=r(Tnt,"FunnelTokenizer"),Tnt.forEach(t),pio=r(wk," or "),xB=n(wk,"A",{href:!0});var Mnt=s(xB);_io=r(Mnt,"FunnelTokenizerFast"),Mnt.forEach(t),uio=r(wk," (Funnel Transformer model)"),wk.forEach(t),bio=i(S),as=n(S,"LI",{});var Ak=s(as);zse=n(Ak,"STRONG",{});var Ent=s(zse);vio=r(Ent,"gpt2"),Ent.forEach(t),Fio=r(Ak," \u2014 "),$B=n(Ak,"A",{href:!0});var Cnt=s($B);Tio=r(Cnt,"GPT2Tokenizer"),Cnt.forEach(t),Mio=r(Ak," or "),kB=n(Ak,"A",{href:!0});var wnt=s(kB);Eio=r(wnt,"GPT2TokenizerFast"),wnt.forEach(t),Cio=r(Ak," (OpenAI GPT-2 model)"),Ak.forEach(t),wio=i(S),ns=n(S,"LI",{});var Lk=s(ns);Qse=n(Lk,"STRONG",{});var Ant=s(Qse);Aio=r(Ant,"gpt_neo"),Ant.forEach(t),Lio=r(Lk," \u2014 "),SB=n(Lk,"A",{href:!0});var Lnt=s(SB);yio=r(Lnt,"GPT2Tokenizer"),Lnt.forEach(t),xio=r(Lk," or "),RB=n(Lk,"A",{href:!0});var ynt=s(RB);$io=r(ynt,"GPT2TokenizerFast"),ynt.forEach(t),kio=r(Lk," (GPT Neo model)"),Lk.forEach(t),Sio=i(S),nh=n(S,"LI",{});var CLe=s(nh);Wse=n(CLe,"STRONG",{});var xnt=s(Wse);Rio=r(xnt,"gpt_neox"),xnt.forEach(t),Pio=r(CLe," \u2014 "),PB=n(CLe,"A",{href:!0});var $nt=s(PB);Bio=r($nt,"GPTNeoXTokenizerFast"),$nt.forEach(t),Iio=r(CLe," (GPT NeoX model)"),CLe.forEach(t),Nio=i(S),ss=n(S,"LI",{});var yk=s(ss);Hse=n(yk,"STRONG",{});var knt=s(Hse);qio=r(knt,"gptj"),knt.forEach(t),jio=r(yk," \u2014 "),BB=n(yk,"A",{href:!0});var Snt=s(BB);Dio=r(Snt,"GPT2Tokenizer"),Snt.forEach(t),Gio=r(yk," or "),IB=n(yk,"A",{href:!0});var Rnt=s(IB);Oio=r(Rnt,"GPT2TokenizerFast"),Rnt.forEach(t),Vio=r(yk," (GPT-J model)"),yk.forEach(t),Xio=i(S),ls=n(S,"LI",{});var xk=s(ls);Use=n(xk,"STRONG",{});var Pnt=s(Use);zio=r(Pnt,"herbert"),Pnt.forEach(t),Qio=r(xk," \u2014 "),NB=n(xk,"A",{href:!0});var Bnt=s(NB);Wio=r(Bnt,"HerbertTokenizer"),Bnt.forEach(t),Hio=r(xk," or "),qB=n(xk,"A",{href:!0});var Int=s(qB);Uio=r(Int,"HerbertTokenizerFast"),Int.forEach(t),Jio=r(xk," (HerBERT model)"),xk.forEach(t),Yio=i(S),sh=n(S,"LI",{});var wLe=s(sh);Jse=n(wLe,"STRONG",{});var Nnt=s(Jse);Kio=r(Nnt,"hubert"),Nnt.forEach(t),Zio=r(wLe," \u2014 "),jB=n(wLe,"A",{href:!0});var qnt=s(jB);edo=r(qnt,"Wav2Vec2CTCTokenizer"),qnt.forEach(t),odo=r(wLe," (Hubert model)"),wLe.forEach(t),rdo=i(S),is=n(S,"LI",{});var $k=s(is);Yse=n($k,"STRONG",{});var jnt=s(Yse);tdo=r(jnt,"ibert"),jnt.forEach(t),ado=r($k," \u2014 "),DB=n($k,"A",{href:!0});var Dnt=s(DB);ndo=r(Dnt,"RobertaTokenizer"),Dnt.forEach(t),sdo=r($k," or "),GB=n($k,"A",{href:!0});var Gnt=s(GB);ldo=r(Gnt,"RobertaTokenizerFast"),Gnt.forEach(t),ido=r($k," (I-BERT model)"),$k.forEach(t),ddo=i(S),ds=n(S,"LI",{});var kk=s(ds);Kse=n(kk,"STRONG",{});var Ont=s(Kse);cdo=r(Ont,"layoutlm"),Ont.forEach(t),fdo=r(kk," \u2014 "),OB=n(kk,"A",{href:!0});var Vnt=s(OB);mdo=r(Vnt,"LayoutLMTokenizer"),Vnt.forEach(t),gdo=r(kk," or "),VB=n(kk,"A",{href:!0});var Xnt=s(VB);hdo=r(Xnt,"LayoutLMTokenizerFast"),Xnt.forEach(t),pdo=r(kk," (LayoutLM model)"),kk.forEach(t),_do=i(S),cs=n(S,"LI",{});var Sk=s(cs);Zse=n(Sk,"STRONG",{});var znt=s(Zse);udo=r(znt,"layoutlmv2"),znt.forEach(t),bdo=r(Sk," \u2014 "),XB=n(Sk,"A",{href:!0});var Qnt=s(XB);vdo=r(Qnt,"LayoutLMv2Tokenizer"),Qnt.forEach(t),Fdo=r(Sk," or "),zB=n(Sk,"A",{href:!0});var Wnt=s(zB);Tdo=r(Wnt,"LayoutLMv2TokenizerFast"),Wnt.forEach(t),Mdo=r(Sk," (LayoutLMv2 model)"),Sk.forEach(t),Edo=i(S),fs=n(S,"LI",{});var Rk=s(fs);ele=n(Rk,"STRONG",{});var Hnt=s(ele);Cdo=r(Hnt,"layoutlmv3"),Hnt.forEach(t),wdo=r(Rk," \u2014 "),QB=n(Rk,"A",{href:!0});var Unt=s(QB);Ado=r(Unt,"LayoutLMv3Tokenizer"),Unt.forEach(t),Ldo=r(Rk," or "),WB=n(Rk,"A",{href:!0});var Jnt=s(WB);ydo=r(Jnt,"LayoutLMv3TokenizerFast"),Jnt.forEach(t),xdo=r(Rk," (LayoutLMv3 model)"),Rk.forEach(t),$do=i(S),ms=n(S,"LI",{});var Pk=s(ms);ole=n(Pk,"STRONG",{});var Ynt=s(ole);kdo=r(Ynt,"layoutxlm"),Ynt.forEach(t),Sdo=r(Pk," \u2014 "),HB=n(Pk,"A",{href:!0});var Knt=s(HB);Rdo=r(Knt,"LayoutXLMTokenizer"),Knt.forEach(t),Pdo=r(Pk," or "),UB=n(Pk,"A",{href:!0});var Znt=s(UB);Bdo=r(Znt,"LayoutXLMTokenizerFast"),Znt.forEach(t),Ido=r(Pk," (LayoutXLM model)"),Pk.forEach(t),Ndo=i(S),gs=n(S,"LI",{});var Bk=s(gs);rle=n(Bk,"STRONG",{});var est=s(rle);qdo=r(est,"led"),est.forEach(t),jdo=r(Bk," \u2014 "),JB=n(Bk,"A",{href:!0});var ost=s(JB);Ddo=r(ost,"LEDTokenizer"),ost.forEach(t),Gdo=r(Bk," or "),YB=n(Bk,"A",{href:!0});var rst=s(YB);Odo=r(rst,"LEDTokenizerFast"),rst.forEach(t),Vdo=r(Bk," (LED model)"),Bk.forEach(t),Xdo=i(S),hs=n(S,"LI",{});var Ik=s(hs);tle=n(Ik,"STRONG",{});var tst=s(tle);zdo=r(tst,"longformer"),tst.forEach(t),Qdo=r(Ik," \u2014 "),KB=n(Ik,"A",{href:!0});var ast=s(KB);Wdo=r(ast,"LongformerTokenizer"),ast.forEach(t),Hdo=r(Ik," or "),ZB=n(Ik,"A",{href:!0});var nst=s(ZB);Udo=r(nst,"LongformerTokenizerFast"),nst.forEach(t),Jdo=r(Ik," (Longformer model)"),Ik.forEach(t),Ydo=i(S),ps=n(S,"LI",{});var Nk=s(ps);ale=n(Nk,"STRONG",{});var sst=s(ale);Kdo=r(sst,"longt5"),sst.forEach(t),Zdo=r(Nk," \u2014 "),eI=n(Nk,"A",{href:!0});var lst=s(eI);eco=r(lst,"T5Tokenizer"),lst.forEach(t),oco=r(Nk," or "),oI=n(Nk,"A",{href:!0});var ist=s(oI);rco=r(ist,"T5TokenizerFast"),ist.forEach(t),tco=r(Nk," (LongT5 model)"),Nk.forEach(t),aco=i(S),lh=n(S,"LI",{});var ALe=s(lh);nle=n(ALe,"STRONG",{});var dst=s(nle);nco=r(dst,"luke"),dst.forEach(t),sco=r(ALe," \u2014 "),rI=n(ALe,"A",{href:!0});var cst=s(rI);lco=r(cst,"LukeTokenizer"),cst.forEach(t),ico=r(ALe," (LUKE model)"),ALe.forEach(t),dco=i(S),_s=n(S,"LI",{});var qk=s(_s);sle=n(qk,"STRONG",{});var fst=s(sle);cco=r(fst,"lxmert"),fst.forEach(t),fco=r(qk," \u2014 "),tI=n(qk,"A",{href:!0});var mst=s(tI);mco=r(mst,"LxmertTokenizer"),mst.forEach(t),gco=r(qk," or "),aI=n(qk,"A",{href:!0});var gst=s(aI);hco=r(gst,"LxmertTokenizerFast"),gst.forEach(t),pco=r(qk," (LXMERT model)"),qk.forEach(t),_co=i(S),ih=n(S,"LI",{});var LLe=s(ih);lle=n(LLe,"STRONG",{});var hst=s(lle);uco=r(hst,"m2m_100"),hst.forEach(t),bco=r(LLe," \u2014 "),nI=n(LLe,"A",{href:!0});var pst=s(nI);vco=r(pst,"M2M100Tokenizer"),pst.forEach(t),Fco=r(LLe," (M2M100 model)"),LLe.forEach(t),Tco=i(S),dh=n(S,"LI",{});var yLe=s(dh);ile=n(yLe,"STRONG",{});var _st=s(ile);Mco=r(_st,"marian"),_st.forEach(t),Eco=r(yLe," \u2014 "),sI=n(yLe,"A",{href:!0});var ust=s(sI);Cco=r(ust,"MarianTokenizer"),ust.forEach(t),wco=r(yLe," (Marian model)"),yLe.forEach(t),Aco=i(S),us=n(S,"LI",{});var jk=s(us);dle=n(jk,"STRONG",{});var bst=s(dle);Lco=r(bst,"mbart"),bst.forEach(t),yco=r(jk," \u2014 "),lI=n(jk,"A",{href:!0});var vst=s(lI);xco=r(vst,"MBartTokenizer"),vst.forEach(t),$co=r(jk," or "),iI=n(jk,"A",{href:!0});var Fst=s(iI);kco=r(Fst,"MBartTokenizerFast"),Fst.forEach(t),Sco=r(jk," (mBART model)"),jk.forEach(t),Rco=i(S),bs=n(S,"LI",{});var Dk=s(bs);cle=n(Dk,"STRONG",{});var Tst=s(cle);Pco=r(Tst,"mbart50"),Tst.forEach(t),Bco=r(Dk," \u2014 "),dI=n(Dk,"A",{href:!0});var Mst=s(dI);Ico=r(Mst,"MBart50Tokenizer"),Mst.forEach(t),Nco=r(Dk," or "),cI=n(Dk,"A",{href:!0});var Est=s(cI);qco=r(Est,"MBart50TokenizerFast"),Est.forEach(t),jco=r(Dk," (mBART-50 model)"),Dk.forEach(t),Dco=i(S),vs=n(S,"LI",{});var Gk=s(vs);fle=n(Gk,"STRONG",{});var Cst=s(fle);Gco=r(Cst,"megatron-bert"),Cst.forEach(t),Oco=r(Gk," \u2014 "),fI=n(Gk,"A",{href:!0});var wst=s(fI);Vco=r(wst,"BertTokenizer"),wst.forEach(t),Xco=r(Gk," or "),mI=n(Gk,"A",{href:!0});var Ast=s(mI);zco=r(Ast,"BertTokenizerFast"),Ast.forEach(t),Qco=r(Gk," (Megatron-BERT model)"),Gk.forEach(t),Wco=i(S),ch=n(S,"LI",{});var xLe=s(ch);mle=n(xLe,"STRONG",{});var Lst=s(mle);Hco=r(Lst,"mluke"),Lst.forEach(t),Uco=r(xLe," \u2014 "),gI=n(xLe,"A",{href:!0});var yst=s(gI);Jco=r(yst,"MLukeTokenizer"),yst.forEach(t),Yco=r(xLe," (mLUKE model)"),xLe.forEach(t),Kco=i(S),Fs=n(S,"LI",{});var Ok=s(Fs);gle=n(Ok,"STRONG",{});var xst=s(gle);Zco=r(xst,"mobilebert"),xst.forEach(t),efo=r(Ok," \u2014 "),hI=n(Ok,"A",{href:!0});var $st=s(hI);ofo=r($st,"MobileBertTokenizer"),$st.forEach(t),rfo=r(Ok," or "),pI=n(Ok,"A",{href:!0});var kst=s(pI);tfo=r(kst,"MobileBertTokenizerFast"),kst.forEach(t),afo=r(Ok," (MobileBERT model)"),Ok.forEach(t),nfo=i(S),Ts=n(S,"LI",{});var Vk=s(Ts);hle=n(Vk,"STRONG",{});var Sst=s(hle);sfo=r(Sst,"mpnet"),Sst.forEach(t),lfo=r(Vk," \u2014 "),_I=n(Vk,"A",{href:!0});var Rst=s(_I);ifo=r(Rst,"MPNetTokenizer"),Rst.forEach(t),dfo=r(Vk," or "),uI=n(Vk,"A",{href:!0});var Pst=s(uI);cfo=r(Pst,"MPNetTokenizerFast"),Pst.forEach(t),ffo=r(Vk," (MPNet model)"),Vk.forEach(t),mfo=i(S),Ms=n(S,"LI",{});var Xk=s(Ms);ple=n(Xk,"STRONG",{});var Bst=s(ple);gfo=r(Bst,"mt5"),Bst.forEach(t),hfo=r(Xk," \u2014 "),bI=n(Xk,"A",{href:!0});var Ist=s(bI);pfo=r(Ist,"MT5Tokenizer"),Ist.forEach(t),_fo=r(Xk," or "),vI=n(Xk,"A",{href:!0});var Nst=s(vI);ufo=r(Nst,"MT5TokenizerFast"),Nst.forEach(t),bfo=r(Xk," (MT5 model)"),Xk.forEach(t),vfo=i(S),Es=n(S,"LI",{});var zk=s(Es);_le=n(zk,"STRONG",{});var qst=s(_le);Ffo=r(qst,"mvp"),qst.forEach(t),Tfo=r(zk," \u2014 "),FI=n(zk,"A",{href:!0});var jst=s(FI);Mfo=r(jst,"MvpTokenizer"),jst.forEach(t),Efo=r(zk," or "),TI=n(zk,"A",{href:!0});var Dst=s(TI);Cfo=r(Dst,"MvpTokenizerFast"),Dst.forEach(t),wfo=r(zk," (MVP model)"),zk.forEach(t),Afo=i(S),Cs=n(S,"LI",{});var Qk=s(Cs);ule=n(Qk,"STRONG",{});var Gst=s(ule);Lfo=r(Gst,"nezha"),Gst.forEach(t),yfo=r(Qk," \u2014 "),MI=n(Qk,"A",{href:!0});var Ost=s(MI);xfo=r(Ost,"BertTokenizer"),Ost.forEach(t),$fo=r(Qk," or "),EI=n(Qk,"A",{href:!0});var Vst=s(EI);kfo=r(Vst,"BertTokenizerFast"),Vst.forEach(t),Sfo=r(Qk," (Nezha model)"),Qk.forEach(t),Rfo=i(S),ws=n(S,"LI",{});var Wk=s(ws);ble=n(Wk,"STRONG",{});var Xst=s(ble);Pfo=r(Xst,"nystromformer"),Xst.forEach(t),Bfo=r(Wk," \u2014 "),CI=n(Wk,"A",{href:!0});var zst=s(CI);Ifo=r(zst,"AlbertTokenizer"),zst.forEach(t),Nfo=r(Wk," or "),wI=n(Wk,"A",{href:!0});var Qst=s(wI);qfo=r(Qst,"AlbertTokenizerFast"),Qst.forEach(t),jfo=r(Wk," (Nystr\xF6mformer model)"),Wk.forEach(t),Dfo=i(S),As=n(S,"LI",{});var Hk=s(As);vle=n(Hk,"STRONG",{});var Wst=s(vle);Gfo=r(Wst,"openai-gpt"),Wst.forEach(t),Ofo=r(Hk," \u2014 "),AI=n(Hk,"A",{href:!0});var Hst=s(AI);Vfo=r(Hst,"OpenAIGPTTokenizer"),Hst.forEach(t),Xfo=r(Hk," or "),LI=n(Hk,"A",{href:!0});var Ust=s(LI);zfo=r(Ust,"OpenAIGPTTokenizerFast"),Ust.forEach(t),Qfo=r(Hk," (OpenAI GPT model)"),Hk.forEach(t),Wfo=i(S),fh=n(S,"LI",{});var $Le=s(fh);Fle=n($Le,"STRONG",{});var Jst=s(Fle);Hfo=r(Jst,"opt"),Jst.forEach(t),Ufo=r($Le," \u2014 "),yI=n($Le,"A",{href:!0});var Yst=s(yI);Jfo=r(Yst,"GPT2Tokenizer"),Yst.forEach(t),Yfo=r($Le," (OPT model)"),$Le.forEach(t),Kfo=i(S),Ls=n(S,"LI",{});var Uk=s(Ls);Tle=n(Uk,"STRONG",{});var Kst=s(Tle);Zfo=r(Kst,"pegasus"),Kst.forEach(t),emo=r(Uk," \u2014 "),xI=n(Uk,"A",{href:!0});var Zst=s(xI);omo=r(Zst,"PegasusTokenizer"),Zst.forEach(t),rmo=r(Uk," or "),$I=n(Uk,"A",{href:!0});var elt=s($I);tmo=r(elt,"PegasusTokenizerFast"),elt.forEach(t),amo=r(Uk," (Pegasus model)"),Uk.forEach(t),nmo=i(S),mh=n(S,"LI",{});var kLe=s(mh);Mle=n(kLe,"STRONG",{});var olt=s(Mle);smo=r(olt,"perceiver"),olt.forEach(t),lmo=r(kLe," \u2014 "),kI=n(kLe,"A",{href:!0});var rlt=s(kI);imo=r(rlt,"PerceiverTokenizer"),rlt.forEach(t),dmo=r(kLe," (Perceiver model)"),kLe.forEach(t),cmo=i(S),gh=n(S,"LI",{});var SLe=s(gh);Ele=n(SLe,"STRONG",{});var tlt=s(Ele);fmo=r(tlt,"phobert"),tlt.forEach(t),mmo=r(SLe," \u2014 "),SI=n(SLe,"A",{href:!0});var alt=s(SI);gmo=r(alt,"PhobertTokenizer"),alt.forEach(t),hmo=r(SLe," (PhoBERT model)"),SLe.forEach(t),pmo=i(S),hh=n(S,"LI",{});var RLe=s(hh);Cle=n(RLe,"STRONG",{});var nlt=s(Cle);_mo=r(nlt,"plbart"),nlt.forEach(t),umo=r(RLe," \u2014 "),RI=n(RLe,"A",{href:!0});var slt=s(RI);bmo=r(slt,"PLBartTokenizer"),slt.forEach(t),vmo=r(RLe," (PLBart model)"),RLe.forEach(t),Fmo=i(S),ph=n(S,"LI",{});var PLe=s(ph);wle=n(PLe,"STRONG",{});var llt=s(wle);Tmo=r(llt,"prophetnet"),llt.forEach(t),Mmo=r(PLe," \u2014 "),PI=n(PLe,"A",{href:!0});var ilt=s(PI);Emo=r(ilt,"ProphetNetTokenizer"),ilt.forEach(t),Cmo=r(PLe," (ProphetNet model)"),PLe.forEach(t),wmo=i(S),ys=n(S,"LI",{});var Jk=s(ys);Ale=n(Jk,"STRONG",{});var dlt=s(Ale);Amo=r(dlt,"qdqbert"),dlt.forEach(t),Lmo=r(Jk," \u2014 "),BI=n(Jk,"A",{href:!0});var clt=s(BI);ymo=r(clt,"BertTokenizer"),clt.forEach(t),xmo=r(Jk," or "),II=n(Jk,"A",{href:!0});var flt=s(II);$mo=r(flt,"BertTokenizerFast"),flt.forEach(t),kmo=r(Jk," (QDQBert model)"),Jk.forEach(t),Smo=i(S),_h=n(S,"LI",{});var BLe=s(_h);Lle=n(BLe,"STRONG",{});var mlt=s(Lle);Rmo=r(mlt,"rag"),mlt.forEach(t),Pmo=r(BLe," \u2014 "),NI=n(BLe,"A",{href:!0});var glt=s(NI);Bmo=r(glt,"RagTokenizer"),glt.forEach(t),Imo=r(BLe," (RAG model)"),BLe.forEach(t),Nmo=i(S),xs=n(S,"LI",{});var Yk=s(xs);yle=n(Yk,"STRONG",{});var hlt=s(yle);qmo=r(hlt,"realm"),hlt.forEach(t),jmo=r(Yk," \u2014 "),qI=n(Yk,"A",{href:!0});var plt=s(qI);Dmo=r(plt,"RealmTokenizer"),plt.forEach(t),Gmo=r(Yk," or "),jI=n(Yk,"A",{href:!0});var _lt=s(jI);Omo=r(_lt,"RealmTokenizerFast"),_lt.forEach(t),Vmo=r(Yk," (REALM model)"),Yk.forEach(t),Xmo=i(S),$s=n(S,"LI",{});var Kk=s($s);xle=n(Kk,"STRONG",{});var ult=s(xle);zmo=r(ult,"reformer"),ult.forEach(t),Qmo=r(Kk," \u2014 "),DI=n(Kk,"A",{href:!0});var blt=s(DI);Wmo=r(blt,"ReformerTokenizer"),blt.forEach(t),Hmo=r(Kk," or "),GI=n(Kk,"A",{href:!0});var vlt=s(GI);Umo=r(vlt,"ReformerTokenizerFast"),vlt.forEach(t),Jmo=r(Kk," (Reformer model)"),Kk.forEach(t),Ymo=i(S),ks=n(S,"LI",{});var Zk=s(ks);$le=n(Zk,"STRONG",{});var Flt=s($le);Kmo=r(Flt,"rembert"),Flt.forEach(t),Zmo=r(Zk," \u2014 "),OI=n(Zk,"A",{href:!0});var Tlt=s(OI);ego=r(Tlt,"RemBertTokenizer"),Tlt.forEach(t),ogo=r(Zk," or "),VI=n(Zk,"A",{href:!0});var Mlt=s(VI);rgo=r(Mlt,"RemBertTokenizerFast"),Mlt.forEach(t),tgo=r(Zk," (RemBERT model)"),Zk.forEach(t),ago=i(S),Ss=n(S,"LI",{});var eS=s(Ss);kle=n(eS,"STRONG",{});var Elt=s(kle);ngo=r(Elt,"retribert"),Elt.forEach(t),sgo=r(eS," \u2014 "),XI=n(eS,"A",{href:!0});var Clt=s(XI);lgo=r(Clt,"RetriBertTokenizer"),Clt.forEach(t),igo=r(eS," or "),zI=n(eS,"A",{href:!0});var wlt=s(zI);dgo=r(wlt,"RetriBertTokenizerFast"),wlt.forEach(t),cgo=r(eS," (RetriBERT model)"),eS.forEach(t),fgo=i(S),Rs=n(S,"LI",{});var oS=s(Rs);Sle=n(oS,"STRONG",{});var Alt=s(Sle);mgo=r(Alt,"roberta"),Alt.forEach(t),ggo=r(oS," \u2014 "),QI=n(oS,"A",{href:!0});var Llt=s(QI);hgo=r(Llt,"RobertaTokenizer"),Llt.forEach(t),pgo=r(oS," or "),WI=n(oS,"A",{href:!0});var ylt=s(WI);_go=r(ylt,"RobertaTokenizerFast"),ylt.forEach(t),ugo=r(oS," (RoBERTa model)"),oS.forEach(t),bgo=i(S),Ps=n(S,"LI",{});var rS=s(Ps);Rle=n(rS,"STRONG",{});var xlt=s(Rle);vgo=r(xlt,"roformer"),xlt.forEach(t),Fgo=r(rS," \u2014 "),HI=n(rS,"A",{href:!0});var $lt=s(HI);Tgo=r($lt,"RoFormerTokenizer"),$lt.forEach(t),Mgo=r(rS," or "),UI=n(rS,"A",{href:!0});var klt=s(UI);Ego=r(klt,"RoFormerTokenizerFast"),klt.forEach(t),Cgo=r(rS," (RoFormer model)"),rS.forEach(t),wgo=i(S),uh=n(S,"LI",{});var ILe=s(uh);Ple=n(ILe,"STRONG",{});var Slt=s(Ple);Ago=r(Slt,"speech_to_text"),Slt.forEach(t),Lgo=r(ILe," \u2014 "),JI=n(ILe,"A",{href:!0});var Rlt=s(JI);ygo=r(Rlt,"Speech2TextTokenizer"),Rlt.forEach(t),xgo=r(ILe," (Speech2Text model)"),ILe.forEach(t),$go=i(S),bh=n(S,"LI",{});var NLe=s(bh);Ble=n(NLe,"STRONG",{});var Plt=s(Ble);kgo=r(Plt,"speech_to_text_2"),Plt.forEach(t),Sgo=r(NLe," \u2014 "),YI=n(NLe,"A",{href:!0});var Blt=s(YI);Rgo=r(Blt,"Speech2Text2Tokenizer"),Blt.forEach(t),Pgo=r(NLe," (Speech2Text2 model)"),NLe.forEach(t),Bgo=i(S),Bs=n(S,"LI",{});var tS=s(Bs);Ile=n(tS,"STRONG",{});var Ilt=s(Ile);Igo=r(Ilt,"splinter"),Ilt.forEach(t),Ngo=r(tS," \u2014 "),KI=n(tS,"A",{href:!0});var Nlt=s(KI);qgo=r(Nlt,"SplinterTokenizer"),Nlt.forEach(t),jgo=r(tS," or "),ZI=n(tS,"A",{href:!0});var qlt=s(ZI);Dgo=r(qlt,"SplinterTokenizerFast"),qlt.forEach(t),Ggo=r(tS," (Splinter model)"),tS.forEach(t),Ogo=i(S),Is=n(S,"LI",{});var aS=s(Is);Nle=n(aS,"STRONG",{});var jlt=s(Nle);Vgo=r(jlt,"squeezebert"),jlt.forEach(t),Xgo=r(aS," \u2014 "),eN=n(aS,"A",{href:!0});var Dlt=s(eN);zgo=r(Dlt,"SqueezeBertTokenizer"),Dlt.forEach(t),Qgo=r(aS," or "),oN=n(aS,"A",{href:!0});var Glt=s(oN);Wgo=r(Glt,"SqueezeBertTokenizerFast"),Glt.forEach(t),Hgo=r(aS," (SqueezeBERT model)"),aS.forEach(t),Ugo=i(S),Ns=n(S,"LI",{});var nS=s(Ns);qle=n(nS,"STRONG",{});var Olt=s(qle);Jgo=r(Olt,"t5"),Olt.forEach(t),Ygo=r(nS," \u2014 "),rN=n(nS,"A",{href:!0});var Vlt=s(rN);Kgo=r(Vlt,"T5Tokenizer"),Vlt.forEach(t),Zgo=r(nS," or "),tN=n(nS,"A",{href:!0});var Xlt=s(tN);eho=r(Xlt,"T5TokenizerFast"),Xlt.forEach(t),oho=r(nS," (T5 model)"),nS.forEach(t),rho=i(S),vh=n(S,"LI",{});var qLe=s(vh);jle=n(qLe,"STRONG",{});var zlt=s(jle);tho=r(zlt,"tapas"),zlt.forEach(t),aho=r(qLe," \u2014 "),aN=n(qLe,"A",{href:!0});var Qlt=s(aN);nho=r(Qlt,"TapasTokenizer"),Qlt.forEach(t),sho=r(qLe," (TAPAS model)"),qLe.forEach(t),lho=i(S),Fh=n(S,"LI",{});var jLe=s(Fh);Dle=n(jLe,"STRONG",{});var Wlt=s(Dle);iho=r(Wlt,"tapex"),Wlt.forEach(t),dho=r(jLe," \u2014 "),nN=n(jLe,"A",{href:!0});var Hlt=s(nN);cho=r(Hlt,"TapexTokenizer"),Hlt.forEach(t),fho=r(jLe," (TAPEX model)"),jLe.forEach(t),mho=i(S),Th=n(S,"LI",{});var DLe=s(Th);Gle=n(DLe,"STRONG",{});var Ult=s(Gle);gho=r(Ult,"transfo-xl"),Ult.forEach(t),hho=r(DLe," \u2014 "),sN=n(DLe,"A",{href:!0});var Jlt=s(sN);pho=r(Jlt,"TransfoXLTokenizer"),Jlt.forEach(t),_ho=r(DLe," (Transformer-XL model)"),DLe.forEach(t),uho=i(S),qs=n(S,"LI",{});var sS=s(qs);Ole=n(sS,"STRONG",{});var Ylt=s(Ole);bho=r(Ylt,"vilt"),Ylt.forEach(t),vho=r(sS," \u2014 "),lN=n(sS,"A",{href:!0});var Klt=s(lN);Fho=r(Klt,"BertTokenizer"),Klt.forEach(t),Tho=r(sS," or "),iN=n(sS,"A",{href:!0});var Zlt=s(iN);Mho=r(Zlt,"BertTokenizerFast"),Zlt.forEach(t),Eho=r(sS," (ViLT model)"),sS.forEach(t),Cho=i(S),js=n(S,"LI",{});var lS=s(js);Vle=n(lS,"STRONG",{});var eit=s(Vle);who=r(eit,"visual_bert"),eit.forEach(t),Aho=r(lS," \u2014 "),dN=n(lS,"A",{href:!0});var oit=s(dN);Lho=r(oit,"BertTokenizer"),oit.forEach(t),yho=r(lS," or "),cN=n(lS,"A",{href:!0});var rit=s(cN);xho=r(rit,"BertTokenizerFast"),rit.forEach(t),$ho=r(lS," (VisualBERT model)"),lS.forEach(t),kho=i(S),Mh=n(S,"LI",{});var GLe=s(Mh);Xle=n(GLe,"STRONG",{});var tit=s(Xle);Sho=r(tit,"wav2vec2"),tit.forEach(t),Rho=r(GLe," \u2014 "),fN=n(GLe,"A",{href:!0});var ait=s(fN);Pho=r(ait,"Wav2Vec2CTCTokenizer"),ait.forEach(t),Bho=r(GLe," (Wav2Vec2 model)"),GLe.forEach(t),Iho=i(S),Eh=n(S,"LI",{});var OLe=s(Eh);zle=n(OLe,"STRONG",{});var nit=s(zle);Nho=r(nit,"wav2vec2-conformer"),nit.forEach(t),qho=r(OLe," \u2014 "),mN=n(OLe,"A",{href:!0});var sit=s(mN);jho=r(sit,"Wav2Vec2CTCTokenizer"),sit.forEach(t),Dho=r(OLe," (Wav2Vec2-Conformer model)"),OLe.forEach(t),Gho=i(S),Ch=n(S,"LI",{});var VLe=s(Ch);Qle=n(VLe,"STRONG",{});var lit=s(Qle);Oho=r(lit,"wav2vec2_phoneme"),lit.forEach(t),Vho=r(VLe," \u2014 "),gN=n(VLe,"A",{href:!0});var iit=s(gN);Xho=r(iit,"Wav2Vec2PhonemeCTCTokenizer"),iit.forEach(t),zho=r(VLe," (Wav2Vec2Phoneme model)"),VLe.forEach(t),Qho=i(S),Ds=n(S,"LI",{});var iS=s(Ds);Wle=n(iS,"STRONG",{});var dit=s(Wle);Who=r(dit,"xglm"),dit.forEach(t),Hho=r(iS," \u2014 "),hN=n(iS,"A",{href:!0});var cit=s(hN);Uho=r(cit,"XGLMTokenizer"),cit.forEach(t),Jho=r(iS," or "),pN=n(iS,"A",{href:!0});var fit=s(pN);Yho=r(fit,"XGLMTokenizerFast"),fit.forEach(t),Kho=r(iS," (XGLM model)"),iS.forEach(t),Zho=i(S),wh=n(S,"LI",{});var XLe=s(wh);Hle=n(XLe,"STRONG",{});var mit=s(Hle);epo=r(mit,"xlm"),mit.forEach(t),opo=r(XLe," \u2014 "),_N=n(XLe,"A",{href:!0});var git=s(_N);rpo=r(git,"XLMTokenizer"),git.forEach(t),tpo=r(XLe," (XLM model)"),XLe.forEach(t),apo=i(S),Ah=n(S,"LI",{});var zLe=s(Ah);Ule=n(zLe,"STRONG",{});var hit=s(Ule);npo=r(hit,"xlm-prophetnet"),hit.forEach(t),spo=r(zLe," \u2014 "),uN=n(zLe,"A",{href:!0});var pit=s(uN);lpo=r(pit,"XLMProphetNetTokenizer"),pit.forEach(t),ipo=r(zLe," (XLM-ProphetNet model)"),zLe.forEach(t),dpo=i(S),Gs=n(S,"LI",{});var dS=s(Gs);Jle=n(dS,"STRONG",{});var _it=s(Jle);cpo=r(_it,"xlm-roberta"),_it.forEach(t),fpo=r(dS," \u2014 "),bN=n(dS,"A",{href:!0});var uit=s(bN);mpo=r(uit,"XLMRobertaTokenizer"),uit.forEach(t),gpo=r(dS," or "),vN=n(dS,"A",{href:!0});var bit=s(vN);hpo=r(bit,"XLMRobertaTokenizerFast"),bit.forEach(t),ppo=r(dS," (XLM-RoBERTa model)"),dS.forEach(t),_po=i(S),Os=n(S,"LI",{});var cS=s(Os);Yle=n(cS,"STRONG",{});var vit=s(Yle);upo=r(vit,"xlm-roberta-xl"),vit.forEach(t),bpo=r(cS," \u2014 "),FN=n(cS,"A",{href:!0});var Fit=s(FN);vpo=r(Fit,"RobertaTokenizer"),Fit.forEach(t),Fpo=r(cS," or "),TN=n(cS,"A",{href:!0});var Tit=s(TN);Tpo=r(Tit,"RobertaTokenizerFast"),Tit.forEach(t),Mpo=r(cS," (XLM-RoBERTa-XL model)"),cS.forEach(t),Epo=i(S),Vs=n(S,"LI",{});var fS=s(Vs);Kle=n(fS,"STRONG",{});var Mit=s(Kle);Cpo=r(Mit,"xlnet"),Mit.forEach(t),wpo=r(fS," \u2014 "),MN=n(fS,"A",{href:!0});var Eit=s(MN);Apo=r(Eit,"XLNetTokenizer"),Eit.forEach(t),Lpo=r(fS," or "),EN=n(fS,"A",{href:!0});var Cit=s(EN);ypo=r(Cit,"XLNetTokenizerFast"),Cit.forEach(t),xpo=r(fS," (XLNet model)"),fS.forEach(t),$po=i(S),Xs=n(S,"LI",{});var mS=s(Xs);Zle=n(mS,"STRONG",{});var wit=s(Zle);kpo=r(wit,"yoso"),wit.forEach(t),Spo=r(mS," \u2014 "),CN=n(mS,"A",{href:!0});var Ait=s(CN);Rpo=r(Ait,"AlbertTokenizer"),Ait.forEach(t),Ppo=r(mS," or "),wN=n(mS,"A",{href:!0});var Lit=s(wN);Bpo=r(Lit,"AlbertTokenizerFast"),Lit.forEach(t),Ipo=r(mS," (YOSO model)"),mS.forEach(t),S.forEach(t),Npo=i(Js),T(Lh.$$.fragment,Js),Js.forEach(t),qpo=i(Us),yh=n(Us,"DIV",{class:!0});var UXe=s(yh);T(oL.$$.fragment,UXe),jpo=i(UXe),eie=n(UXe,"P",{});var yit=s(eie);Dpo=r(yit,"Register a new tokenizer in this mapping."),yit.forEach(t),UXe.forEach(t),Us.forEach(t),HOe=i(f),Pi=n(f,"H2",{class:!0});var JXe=s(Pi);xh=n(JXe,"A",{id:!0,class:!0,href:!0});var xit=s(xh);oie=n(xit,"SPAN",{});var $it=s(oie);T(rL.$$.fragment,$it),$it.forEach(t),xit.forEach(t),Gpo=i(JXe),rie=n(JXe,"SPAN",{});var kit=s(rie);Opo=r(kit,"AutoFeatureExtractor"),kit.forEach(t),JXe.forEach(t),UOe=i(f),Lo=n(f,"DIV",{class:!0});var Ys=s(Lo);T(tL.$$.fragment,Ys),Vpo=i(Ys),aL=n(Ys,"P",{});var YXe=s(aL);Xpo=r(YXe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),AN=n(YXe,"A",{href:!0});var Sit=s(AN);zpo=r(Sit,"AutoFeatureExtractor.from_pretrained()"),Sit.forEach(t),Qpo=r(YXe," class method."),YXe.forEach(t),Wpo=i(Ys),nL=n(Ys,"P",{});var KXe=s(nL);Hpo=r(KXe,"This class cannot be instantiated directly using "),tie=n(KXe,"CODE",{});var Rit=s(tie);Upo=r(Rit,"__init__()"),Rit.forEach(t),Jpo=r(KXe," (throws an error)."),KXe.forEach(t),Ypo=i(Ys),He=n(Ys,"DIV",{class:!0});var ra=s(He);T(sL.$$.fragment,ra),Kpo=i(ra),aie=n(ra,"P",{});var Pit=s(aie);Zpo=r(Pit,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Pit.forEach(t),e_o=i(ra),Sa=n(ra,"P",{});var Vw=s(Sa);o_o=r(Vw,"The feature extractor class to instantiate is selected based on the "),nie=n(Vw,"CODE",{});var Bit=s(nie);r_o=r(Bit,"model_type"),Bit.forEach(t),t_o=r(Vw,` property of the config object
(either passed as an argument or loaded from `),sie=n(Vw,"CODE",{});var Iit=s(sie);a_o=r(Iit,"pretrained_model_name_or_path"),Iit.forEach(t),n_o=r(Vw,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),lie=n(Vw,"CODE",{});var Nit=s(lie);s_o=r(Nit,"pretrained_model_name_or_path"),Nit.forEach(t),l_o=r(Vw,":"),Vw.forEach(t),i_o=i(ra),Y=n(ra,"UL",{});var K=s(Y);$h=n(K,"LI",{});var QLe=s($h);iie=n(QLe,"STRONG",{});var qit=s(iie);d_o=r(qit,"beit"),qit.forEach(t),c_o=r(QLe," \u2014 "),LN=n(QLe,"A",{href:!0});var jit=s(LN);f_o=r(jit,"BeitFeatureExtractor"),jit.forEach(t),m_o=r(QLe," (BEiT model)"),QLe.forEach(t),g_o=i(K),kh=n(K,"LI",{});var WLe=s(kh);die=n(WLe,"STRONG",{});var Dit=s(die);h_o=r(Dit,"clip"),Dit.forEach(t),p_o=r(WLe," \u2014 "),yN=n(WLe,"A",{href:!0});var Git=s(yN);__o=r(Git,"CLIPFeatureExtractor"),Git.forEach(t),u_o=r(WLe," (CLIP model)"),WLe.forEach(t),b_o=i(K),Sh=n(K,"LI",{});var HLe=s(Sh);cie=n(HLe,"STRONG",{});var Oit=s(cie);v_o=r(Oit,"convnext"),Oit.forEach(t),F_o=r(HLe," \u2014 "),xN=n(HLe,"A",{href:!0});var Vit=s(xN);T_o=r(Vit,"ConvNextFeatureExtractor"),Vit.forEach(t),M_o=r(HLe," (ConvNeXT model)"),HLe.forEach(t),E_o=i(K),Rh=n(K,"LI",{});var ULe=s(Rh);fie=n(ULe,"STRONG",{});var Xit=s(fie);C_o=r(Xit,"cvt"),Xit.forEach(t),w_o=r(ULe," \u2014 "),$N=n(ULe,"A",{href:!0});var zit=s($N);A_o=r(zit,"ConvNextFeatureExtractor"),zit.forEach(t),L_o=r(ULe," (CvT model)"),ULe.forEach(t),y_o=i(K),Ph=n(K,"LI",{});var JLe=s(Ph);mie=n(JLe,"STRONG",{});var Qit=s(mie);x_o=r(Qit,"data2vec-audio"),Qit.forEach(t),$_o=r(JLe," \u2014 "),kN=n(JLe,"A",{href:!0});var Wit=s(kN);k_o=r(Wit,"Wav2Vec2FeatureExtractor"),Wit.forEach(t),S_o=r(JLe," (Data2VecAudio model)"),JLe.forEach(t),R_o=i(K),Bh=n(K,"LI",{});var YLe=s(Bh);gie=n(YLe,"STRONG",{});var Hit=s(gie);P_o=r(Hit,"data2vec-vision"),Hit.forEach(t),B_o=r(YLe," \u2014 "),SN=n(YLe,"A",{href:!0});var Uit=s(SN);I_o=r(Uit,"BeitFeatureExtractor"),Uit.forEach(t),N_o=r(YLe," (Data2VecVision model)"),YLe.forEach(t),q_o=i(K),Ih=n(K,"LI",{});var KLe=s(Ih);hie=n(KLe,"STRONG",{});var Jit=s(hie);j_o=r(Jit,"deit"),Jit.forEach(t),D_o=r(KLe," \u2014 "),RN=n(KLe,"A",{href:!0});var Yit=s(RN);G_o=r(Yit,"DeiTFeatureExtractor"),Yit.forEach(t),O_o=r(KLe," (DeiT model)"),KLe.forEach(t),V_o=i(K),Nh=n(K,"LI",{});var ZLe=s(Nh);pie=n(ZLe,"STRONG",{});var Kit=s(pie);X_o=r(Kit,"detr"),Kit.forEach(t),z_o=r(ZLe," \u2014 "),PN=n(ZLe,"A",{href:!0});var Zit=s(PN);Q_o=r(Zit,"DetrFeatureExtractor"),Zit.forEach(t),W_o=r(ZLe," (DETR model)"),ZLe.forEach(t),H_o=i(K),qh=n(K,"LI",{});var eye=s(qh);_ie=n(eye,"STRONG",{});var edt=s(_ie);U_o=r(edt,"dpt"),edt.forEach(t),J_o=r(eye," \u2014 "),BN=n(eye,"A",{href:!0});var odt=s(BN);Y_o=r(odt,"DPTFeatureExtractor"),odt.forEach(t),K_o=r(eye," (DPT model)"),eye.forEach(t),Z_o=i(K),jh=n(K,"LI",{});var oye=s(jh);uie=n(oye,"STRONG",{});var rdt=s(uie);euo=r(rdt,"flava"),rdt.forEach(t),ouo=r(oye," \u2014 "),IN=n(oye,"A",{href:!0});var tdt=s(IN);ruo=r(tdt,"FlavaFeatureExtractor"),tdt.forEach(t),tuo=r(oye," (FLAVA model)"),oye.forEach(t),auo=i(K),Dh=n(K,"LI",{});var rye=s(Dh);bie=n(rye,"STRONG",{});var adt=s(bie);nuo=r(adt,"glpn"),adt.forEach(t),suo=r(rye," \u2014 "),NN=n(rye,"A",{href:!0});var ndt=s(NN);luo=r(ndt,"GLPNFeatureExtractor"),ndt.forEach(t),iuo=r(rye," (GLPN model)"),rye.forEach(t),duo=i(K),Gh=n(K,"LI",{});var tye=s(Gh);vie=n(tye,"STRONG",{});var sdt=s(vie);cuo=r(sdt,"hubert"),sdt.forEach(t),fuo=r(tye," \u2014 "),qN=n(tye,"A",{href:!0});var ldt=s(qN);muo=r(ldt,"Wav2Vec2FeatureExtractor"),ldt.forEach(t),guo=r(tye," (Hubert model)"),tye.forEach(t),huo=i(K),Oh=n(K,"LI",{});var aye=s(Oh);Fie=n(aye,"STRONG",{});var idt=s(Fie);puo=r(idt,"imagegpt"),idt.forEach(t),_uo=r(aye," \u2014 "),jN=n(aye,"A",{href:!0});var ddt=s(jN);uuo=r(ddt,"ImageGPTFeatureExtractor"),ddt.forEach(t),buo=r(aye," (ImageGPT model)"),aye.forEach(t),vuo=i(K),Vh=n(K,"LI",{});var nye=s(Vh);Tie=n(nye,"STRONG",{});var cdt=s(Tie);Fuo=r(cdt,"layoutlmv2"),cdt.forEach(t),Tuo=r(nye," \u2014 "),DN=n(nye,"A",{href:!0});var fdt=s(DN);Muo=r(fdt,"LayoutLMv2FeatureExtractor"),fdt.forEach(t),Euo=r(nye," (LayoutLMv2 model)"),nye.forEach(t),Cuo=i(K),Xh=n(K,"LI",{});var sye=s(Xh);Mie=n(sye,"STRONG",{});var mdt=s(Mie);wuo=r(mdt,"layoutlmv3"),mdt.forEach(t),Auo=r(sye," \u2014 "),GN=n(sye,"A",{href:!0});var gdt=s(GN);Luo=r(gdt,"LayoutLMv3FeatureExtractor"),gdt.forEach(t),yuo=r(sye," (LayoutLMv3 model)"),sye.forEach(t),xuo=i(K),zh=n(K,"LI",{});var lye=s(zh);Eie=n(lye,"STRONG",{});var hdt=s(Eie);$uo=r(hdt,"levit"),hdt.forEach(t),kuo=r(lye," \u2014 "),ON=n(lye,"A",{href:!0});var pdt=s(ON);Suo=r(pdt,"LevitFeatureExtractor"),pdt.forEach(t),Ruo=r(lye," (LeViT model)"),lye.forEach(t),Puo=i(K),Qh=n(K,"LI",{});var iye=s(Qh);Cie=n(iye,"STRONG",{});var _dt=s(Cie);Buo=r(_dt,"maskformer"),_dt.forEach(t),Iuo=r(iye," \u2014 "),VN=n(iye,"A",{href:!0});var udt=s(VN);Nuo=r(udt,"MaskFormerFeatureExtractor"),udt.forEach(t),quo=r(iye," (MaskFormer model)"),iye.forEach(t),juo=i(K),Wh=n(K,"LI",{});var dye=s(Wh);wie=n(dye,"STRONG",{});var bdt=s(wie);Duo=r(bdt,"mctct"),bdt.forEach(t),Guo=r(dye," \u2014 "),XN=n(dye,"A",{href:!0});var vdt=s(XN);Ouo=r(vdt,"MCTCTFeatureExtractor"),vdt.forEach(t),Vuo=r(dye," (M-CTC-T model)"),dye.forEach(t),Xuo=i(K),Hh=n(K,"LI",{});var cye=s(Hh);Aie=n(cye,"STRONG",{});var Fdt=s(Aie);zuo=r(Fdt,"perceiver"),Fdt.forEach(t),Quo=r(cye," \u2014 "),zN=n(cye,"A",{href:!0});var Tdt=s(zN);Wuo=r(Tdt,"PerceiverFeatureExtractor"),Tdt.forEach(t),Huo=r(cye," (Perceiver model)"),cye.forEach(t),Uuo=i(K),Uh=n(K,"LI",{});var fye=s(Uh);Lie=n(fye,"STRONG",{});var Mdt=s(Lie);Juo=r(Mdt,"poolformer"),Mdt.forEach(t),Yuo=r(fye," \u2014 "),QN=n(fye,"A",{href:!0});var Edt=s(QN);Kuo=r(Edt,"PoolFormerFeatureExtractor"),Edt.forEach(t),Zuo=r(fye," (PoolFormer model)"),fye.forEach(t),e7o=i(K),Jh=n(K,"LI",{});var mye=s(Jh);yie=n(mye,"STRONG",{});var Cdt=s(yie);o7o=r(Cdt,"regnet"),Cdt.forEach(t),r7o=r(mye," \u2014 "),WN=n(mye,"A",{href:!0});var wdt=s(WN);t7o=r(wdt,"ConvNextFeatureExtractor"),wdt.forEach(t),a7o=r(mye," (RegNet model)"),mye.forEach(t),n7o=i(K),Yh=n(K,"LI",{});var gye=s(Yh);xie=n(gye,"STRONG",{});var Adt=s(xie);s7o=r(Adt,"resnet"),Adt.forEach(t),l7o=r(gye," \u2014 "),HN=n(gye,"A",{href:!0});var Ldt=s(HN);i7o=r(Ldt,"ConvNextFeatureExtractor"),Ldt.forEach(t),d7o=r(gye," (ResNet model)"),gye.forEach(t),c7o=i(K),Kh=n(K,"LI",{});var hye=s(Kh);$ie=n(hye,"STRONG",{});var ydt=s($ie);f7o=r(ydt,"segformer"),ydt.forEach(t),m7o=r(hye," \u2014 "),UN=n(hye,"A",{href:!0});var xdt=s(UN);g7o=r(xdt,"SegformerFeatureExtractor"),xdt.forEach(t),h7o=r(hye," (SegFormer model)"),hye.forEach(t),p7o=i(K),Zh=n(K,"LI",{});var pye=s(Zh);kie=n(pye,"STRONG",{});var $dt=s(kie);_7o=r($dt,"speech_to_text"),$dt.forEach(t),u7o=r(pye," \u2014 "),JN=n(pye,"A",{href:!0});var kdt=s(JN);b7o=r(kdt,"Speech2TextFeatureExtractor"),kdt.forEach(t),v7o=r(pye," (Speech2Text model)"),pye.forEach(t),F7o=i(K),ep=n(K,"LI",{});var _ye=s(ep);Sie=n(_ye,"STRONG",{});var Sdt=s(Sie);T7o=r(Sdt,"swin"),Sdt.forEach(t),M7o=r(_ye," \u2014 "),YN=n(_ye,"A",{href:!0});var Rdt=s(YN);E7o=r(Rdt,"ViTFeatureExtractor"),Rdt.forEach(t),C7o=r(_ye," (Swin Transformer model)"),_ye.forEach(t),w7o=i(K),op=n(K,"LI",{});var uye=s(op);Rie=n(uye,"STRONG",{});var Pdt=s(Rie);A7o=r(Pdt,"van"),Pdt.forEach(t),L7o=r(uye," \u2014 "),KN=n(uye,"A",{href:!0});var Bdt=s(KN);y7o=r(Bdt,"ConvNextFeatureExtractor"),Bdt.forEach(t),x7o=r(uye," (VAN model)"),uye.forEach(t),$7o=i(K),rp=n(K,"LI",{});var bye=s(rp);Pie=n(bye,"STRONG",{});var Idt=s(Pie);k7o=r(Idt,"vilt"),Idt.forEach(t),S7o=r(bye," \u2014 "),ZN=n(bye,"A",{href:!0});var Ndt=s(ZN);R7o=r(Ndt,"ViltFeatureExtractor"),Ndt.forEach(t),P7o=r(bye," (ViLT model)"),bye.forEach(t),B7o=i(K),tp=n(K,"LI",{});var vye=s(tp);Bie=n(vye,"STRONG",{});var qdt=s(Bie);I7o=r(qdt,"vit"),qdt.forEach(t),N7o=r(vye," \u2014 "),eq=n(vye,"A",{href:!0});var jdt=s(eq);q7o=r(jdt,"ViTFeatureExtractor"),jdt.forEach(t),j7o=r(vye," (ViT model)"),vye.forEach(t),D7o=i(K),ap=n(K,"LI",{});var Fye=s(ap);Iie=n(Fye,"STRONG",{});var Ddt=s(Iie);G7o=r(Ddt,"vit_mae"),Ddt.forEach(t),O7o=r(Fye," \u2014 "),oq=n(Fye,"A",{href:!0});var Gdt=s(oq);V7o=r(Gdt,"ViTFeatureExtractor"),Gdt.forEach(t),X7o=r(Fye," (ViTMAE model)"),Fye.forEach(t),z7o=i(K),np=n(K,"LI",{});var Tye=s(np);Nie=n(Tye,"STRONG",{});var Odt=s(Nie);Q7o=r(Odt,"wav2vec2"),Odt.forEach(t),W7o=r(Tye," \u2014 "),rq=n(Tye,"A",{href:!0});var Vdt=s(rq);H7o=r(Vdt,"Wav2Vec2FeatureExtractor"),Vdt.forEach(t),U7o=r(Tye," (Wav2Vec2 model)"),Tye.forEach(t),J7o=i(K),sp=n(K,"LI",{});var Mye=s(sp);qie=n(Mye,"STRONG",{});var Xdt=s(qie);Y7o=r(Xdt,"wav2vec2-conformer"),Xdt.forEach(t),K7o=r(Mye," \u2014 "),tq=n(Mye,"A",{href:!0});var zdt=s(tq);Z7o=r(zdt,"Wav2Vec2FeatureExtractor"),zdt.forEach(t),e1o=r(Mye," (Wav2Vec2-Conformer model)"),Mye.forEach(t),o1o=i(K),lp=n(K,"LI",{});var Eye=s(lp);jie=n(Eye,"STRONG",{});var Qdt=s(jie);r1o=r(Qdt,"yolos"),Qdt.forEach(t),t1o=r(Eye," \u2014 "),aq=n(Eye,"A",{href:!0});var Wdt=s(aq);a1o=r(Wdt,"YolosFeatureExtractor"),Wdt.forEach(t),n1o=r(Eye," (YOLOS model)"),Eye.forEach(t),K.forEach(t),s1o=i(ra),T(ip.$$.fragment,ra),l1o=i(ra),T(dp.$$.fragment,ra),ra.forEach(t),i1o=i(Ys),cp=n(Ys,"DIV",{class:!0});var ZXe=s(cp);T(lL.$$.fragment,ZXe),d1o=i(ZXe),Die=n(ZXe,"P",{});var Hdt=s(Die);c1o=r(Hdt,"Register a new feature extractor for this class."),Hdt.forEach(t),ZXe.forEach(t),Ys.forEach(t),JOe=i(f),Bi=n(f,"H2",{class:!0});var eze=s(Bi);fp=n(eze,"A",{id:!0,class:!0,href:!0});var Udt=s(fp);Gie=n(Udt,"SPAN",{});var Jdt=s(Gie);T(iL.$$.fragment,Jdt),Jdt.forEach(t),Udt.forEach(t),f1o=i(eze),Oie=n(eze,"SPAN",{});var Ydt=s(Oie);m1o=r(Ydt,"AutoProcessor"),Ydt.forEach(t),eze.forEach(t),YOe=i(f),yo=n(f,"DIV",{class:!0});var Ks=s(yo);T(dL.$$.fragment,Ks),g1o=i(Ks),cL=n(Ks,"P",{});var oze=s(cL);h1o=r(oze,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),nq=n(oze,"A",{href:!0});var Kdt=s(nq);p1o=r(Kdt,"AutoProcessor.from_pretrained()"),Kdt.forEach(t),_1o=r(oze," class method."),oze.forEach(t),u1o=i(Ks),fL=n(Ks,"P",{});var rze=s(fL);b1o=r(rze,"This class cannot be instantiated directly using "),Vie=n(rze,"CODE",{});var Zdt=s(Vie);v1o=r(Zdt,"__init__()"),Zdt.forEach(t),F1o=r(rze," (throws an error)."),rze.forEach(t),T1o=i(Ks),Ue=n(Ks,"DIV",{class:!0});var ta=s(Ue);T(mL.$$.fragment,ta),M1o=i(ta),Xie=n(ta,"P",{});var ect=s(Xie);E1o=r(ect,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),ect.forEach(t),C1o=i(ta),Ii=n(ta,"P",{});var Hoe=s(Ii);w1o=r(Hoe,"The processor class to instantiate is selected based on the "),zie=n(Hoe,"CODE",{});var oct=s(zie);A1o=r(oct,"model_type"),oct.forEach(t),L1o=r(Hoe,` property of the config object (either
passed as an argument or loaded from `),Qie=n(Hoe,"CODE",{});var rct=s(Qie);y1o=r(rct,"pretrained_model_name_or_path"),rct.forEach(t),x1o=r(Hoe," if possible):"),Hoe.forEach(t),$1o=i(ta),pe=n(ta,"UL",{});var be=s(pe);mp=n(be,"LI",{});var Cye=s(mp);Wie=n(Cye,"STRONG",{});var tct=s(Wie);k1o=r(tct,"clip"),tct.forEach(t),S1o=r(Cye," \u2014 "),sq=n(Cye,"A",{href:!0});var act=s(sq);R1o=r(act,"CLIPProcessor"),act.forEach(t),P1o=r(Cye," (CLIP model)"),Cye.forEach(t),B1o=i(be),gp=n(be,"LI",{});var wye=s(gp);Hie=n(wye,"STRONG",{});var nct=s(Hie);I1o=r(nct,"flava"),nct.forEach(t),N1o=r(wye," \u2014 "),Uie=n(wye,"CODE",{});var sct=s(Uie);q1o=r(sct,"FLAVAProcessor"),sct.forEach(t),j1o=r(wye," (FLAVA model)"),wye.forEach(t),D1o=i(be),hp=n(be,"LI",{});var Aye=s(hp);Jie=n(Aye,"STRONG",{});var lct=s(Jie);G1o=r(lct,"layoutlmv2"),lct.forEach(t),O1o=r(Aye," \u2014 "),lq=n(Aye,"A",{href:!0});var ict=s(lq);V1o=r(ict,"LayoutLMv2Processor"),ict.forEach(t),X1o=r(Aye," (LayoutLMv2 model)"),Aye.forEach(t),z1o=i(be),pp=n(be,"LI",{});var Lye=s(pp);Yie=n(Lye,"STRONG",{});var dct=s(Yie);Q1o=r(dct,"layoutlmv3"),dct.forEach(t),W1o=r(Lye," \u2014 "),iq=n(Lye,"A",{href:!0});var cct=s(iq);H1o=r(cct,"LayoutLMv3Processor"),cct.forEach(t),U1o=r(Lye," (LayoutLMv3 model)"),Lye.forEach(t),J1o=i(be),_p=n(be,"LI",{});var yye=s(_p);Kie=n(yye,"STRONG",{});var fct=s(Kie);Y1o=r(fct,"layoutxlm"),fct.forEach(t),K1o=r(yye," \u2014 "),dq=n(yye,"A",{href:!0});var mct=s(dq);Z1o=r(mct,"LayoutXLMProcessor"),mct.forEach(t),e2o=r(yye," (LayoutXLM model)"),yye.forEach(t),o2o=i(be),up=n(be,"LI",{});var xye=s(up);Zie=n(xye,"STRONG",{});var gct=s(Zie);r2o=r(gct,"sew"),gct.forEach(t),t2o=r(xye," \u2014 "),cq=n(xye,"A",{href:!0});var hct=s(cq);a2o=r(hct,"Wav2Vec2Processor"),hct.forEach(t),n2o=r(xye," (SEW model)"),xye.forEach(t),s2o=i(be),bp=n(be,"LI",{});var $ye=s(bp);ede=n($ye,"STRONG",{});var pct=s(ede);l2o=r(pct,"sew-d"),pct.forEach(t),i2o=r($ye," \u2014 "),fq=n($ye,"A",{href:!0});var _ct=s(fq);d2o=r(_ct,"Wav2Vec2Processor"),_ct.forEach(t),c2o=r($ye," (SEW-D model)"),$ye.forEach(t),f2o=i(be),vp=n(be,"LI",{});var kye=s(vp);ode=n(kye,"STRONG",{});var uct=s(ode);m2o=r(uct,"speech_to_text"),uct.forEach(t),g2o=r(kye," \u2014 "),mq=n(kye,"A",{href:!0});var bct=s(mq);h2o=r(bct,"Speech2TextProcessor"),bct.forEach(t),p2o=r(kye," (Speech2Text model)"),kye.forEach(t),_2o=i(be),Fp=n(be,"LI",{});var Sye=s(Fp);rde=n(Sye,"STRONG",{});var vct=s(rde);u2o=r(vct,"speech_to_text_2"),vct.forEach(t),b2o=r(Sye," \u2014 "),gq=n(Sye,"A",{href:!0});var Fct=s(gq);v2o=r(Fct,"Speech2Text2Processor"),Fct.forEach(t),F2o=r(Sye," (Speech2Text2 model)"),Sye.forEach(t),T2o=i(be),Tp=n(be,"LI",{});var Rye=s(Tp);tde=n(Rye,"STRONG",{});var Tct=s(tde);M2o=r(Tct,"trocr"),Tct.forEach(t),E2o=r(Rye," \u2014 "),hq=n(Rye,"A",{href:!0});var Mct=s(hq);C2o=r(Mct,"TrOCRProcessor"),Mct.forEach(t),w2o=r(Rye," (TrOCR model)"),Rye.forEach(t),A2o=i(be),Mp=n(be,"LI",{});var Pye=s(Mp);ade=n(Pye,"STRONG",{});var Ect=s(ade);L2o=r(Ect,"unispeech"),Ect.forEach(t),y2o=r(Pye," \u2014 "),pq=n(Pye,"A",{href:!0});var Cct=s(pq);x2o=r(Cct,"Wav2Vec2Processor"),Cct.forEach(t),$2o=r(Pye," (UniSpeech model)"),Pye.forEach(t),k2o=i(be),Ep=n(be,"LI",{});var Bye=s(Ep);nde=n(Bye,"STRONG",{});var wct=s(nde);S2o=r(wct,"unispeech-sat"),wct.forEach(t),R2o=r(Bye," \u2014 "),_q=n(Bye,"A",{href:!0});var Act=s(_q);P2o=r(Act,"Wav2Vec2Processor"),Act.forEach(t),B2o=r(Bye," (UniSpeechSat model)"),Bye.forEach(t),I2o=i(be),Cp=n(be,"LI",{});var Iye=s(Cp);sde=n(Iye,"STRONG",{});var Lct=s(sde);N2o=r(Lct,"vilt"),Lct.forEach(t),q2o=r(Iye," \u2014 "),uq=n(Iye,"A",{href:!0});var yct=s(uq);j2o=r(yct,"ViltProcessor"),yct.forEach(t),D2o=r(Iye," (ViLT model)"),Iye.forEach(t),G2o=i(be),wp=n(be,"LI",{});var Nye=s(wp);lde=n(Nye,"STRONG",{});var xct=s(lde);O2o=r(xct,"vision-text-dual-encoder"),xct.forEach(t),V2o=r(Nye," \u2014 "),bq=n(Nye,"A",{href:!0});var $ct=s(bq);X2o=r($ct,"VisionTextDualEncoderProcessor"),$ct.forEach(t),z2o=r(Nye," (VisionTextDualEncoder model)"),Nye.forEach(t),Q2o=i(be),Ap=n(be,"LI",{});var qye=s(Ap);ide=n(qye,"STRONG",{});var kct=s(ide);W2o=r(kct,"wav2vec2"),kct.forEach(t),H2o=r(qye," \u2014 "),vq=n(qye,"A",{href:!0});var Sct=s(vq);U2o=r(Sct,"Wav2Vec2Processor"),Sct.forEach(t),J2o=r(qye," (Wav2Vec2 model)"),qye.forEach(t),Y2o=i(be),Lp=n(be,"LI",{});var jye=s(Lp);dde=n(jye,"STRONG",{});var Rct=s(dde);K2o=r(Rct,"wav2vec2-conformer"),Rct.forEach(t),Z2o=r(jye," \u2014 "),Fq=n(jye,"A",{href:!0});var Pct=s(Fq);ebo=r(Pct,"Wav2Vec2Processor"),Pct.forEach(t),obo=r(jye," (Wav2Vec2-Conformer model)"),jye.forEach(t),rbo=i(be),yp=n(be,"LI",{});var Dye=s(yp);cde=n(Dye,"STRONG",{});var Bct=s(cde);tbo=r(Bct,"wavlm"),Bct.forEach(t),abo=r(Dye," \u2014 "),Tq=n(Dye,"A",{href:!0});var Ict=s(Tq);nbo=r(Ict,"Wav2Vec2Processor"),Ict.forEach(t),sbo=r(Dye," (WavLM model)"),Dye.forEach(t),be.forEach(t),lbo=i(ta),T(xp.$$.fragment,ta),ibo=i(ta),T($p.$$.fragment,ta),ta.forEach(t),dbo=i(Ks),kp=n(Ks,"DIV",{class:!0});var tze=s(kp);T(gL.$$.fragment,tze),cbo=i(tze),fde=n(tze,"P",{});var Nct=s(fde);fbo=r(Nct,"Register a new processor for this class."),Nct.forEach(t),tze.forEach(t),Ks.forEach(t),KOe=i(f),Ni=n(f,"H2",{class:!0});var aze=s(Ni);Sp=n(aze,"A",{id:!0,class:!0,href:!0});var qct=s(Sp);mde=n(qct,"SPAN",{});var jct=s(mde);T(hL.$$.fragment,jct),jct.forEach(t),qct.forEach(t),mbo=i(aze),gde=n(aze,"SPAN",{});var Dct=s(gde);gbo=r(Dct,"AutoModel"),Dct.forEach(t),aze.forEach(t),ZOe=i(f),xo=n(f,"DIV",{class:!0});var Zs=s(xo);T(pL.$$.fragment,Zs),hbo=i(Zs),qi=n(Zs,"P",{});var Uoe=s(qi);pbo=r(Uoe,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Mq=n(Uoe,"A",{href:!0});var Gct=s(Mq);_bo=r(Gct,"from_pretrained()"),Gct.forEach(t),ubo=r(Uoe," class method or the "),Eq=n(Uoe,"A",{href:!0});var Oct=s(Eq);bbo=r(Oct,"from_config()"),Oct.forEach(t),vbo=r(Uoe,` class
method.`),Uoe.forEach(t),Fbo=i(Zs),_L=n(Zs,"P",{});var nze=s(_L);Tbo=r(nze,"This class cannot be instantiated directly using "),hde=n(nze,"CODE",{});var Vct=s(hde);Mbo=r(Vct,"__init__()"),Vct.forEach(t),Ebo=r(nze," (throws an error)."),nze.forEach(t),Cbo=i(Zs),nt=n(Zs,"DIV",{class:!0});var Xw=s(nt);T(uL.$$.fragment,Xw),wbo=i(Xw),pde=n(Xw,"P",{});var Xct=s(pde);Abo=r(Xct,"Instantiates one of the base model classes of the library from a configuration."),Xct.forEach(t),Lbo=i(Xw),ji=n(Xw,"P",{});var Joe=s(ji);ybo=r(Joe,`Note:
Loading a model from its configuration file does `),_de=n(Joe,"STRONG",{});var zct=s(_de);xbo=r(zct,"not"),zct.forEach(t),$bo=r(Joe,` load the model weights. It only affects the
model\u2019s configuration. Use `),Cq=n(Joe,"A",{href:!0});var Qct=s(Cq);kbo=r(Qct,"from_pretrained()"),Qct.forEach(t),Sbo=r(Joe," to load the model weights."),Joe.forEach(t),Rbo=i(Xw),T(Rp.$$.fragment,Xw),Xw.forEach(t),Pbo=i(Zs),Je=n(Zs,"DIV",{class:!0});var aa=s(Je);T(bL.$$.fragment,aa),Bbo=i(aa),ude=n(aa,"P",{});var Wct=s(ude);Ibo=r(Wct,"Instantiate one of the base model classes of the library from a pretrained model."),Wct.forEach(t),Nbo=i(aa),Ra=n(aa,"P",{});var zw=s(Ra);qbo=r(zw,"The model class to instantiate is selected based on the "),bde=n(zw,"CODE",{});var Hct=s(bde);jbo=r(Hct,"model_type"),Hct.forEach(t),Dbo=r(zw,` property of the config object (either
passed as an argument or loaded from `),vde=n(zw,"CODE",{});var Uct=s(vde);Gbo=r(Uct,"pretrained_model_name_or_path"),Uct.forEach(t),Obo=r(zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fde=n(zw,"CODE",{});var Jct=s(Fde);Vbo=r(Jct,"pretrained_model_name_or_path"),Jct.forEach(t),Xbo=r(zw,":"),zw.forEach(t),zbo=i(aa),y=n(aa,"UL",{});var x=s(y);Pp=n(x,"LI",{});var Gye=s(Pp);Tde=n(Gye,"STRONG",{});var Yct=s(Tde);Qbo=r(Yct,"albert"),Yct.forEach(t),Wbo=r(Gye," \u2014 "),wq=n(Gye,"A",{href:!0});var Kct=s(wq);Hbo=r(Kct,"AlbertModel"),Kct.forEach(t),Ubo=r(Gye," (ALBERT model)"),Gye.forEach(t),Jbo=i(x),Bp=n(x,"LI",{});var Oye=s(Bp);Mde=n(Oye,"STRONG",{});var Zct=s(Mde);Ybo=r(Zct,"bart"),Zct.forEach(t),Kbo=r(Oye," \u2014 "),Aq=n(Oye,"A",{href:!0});var eft=s(Aq);Zbo=r(eft,"BartModel"),eft.forEach(t),evo=r(Oye," (BART model)"),Oye.forEach(t),ovo=i(x),Ip=n(x,"LI",{});var Vye=s(Ip);Ede=n(Vye,"STRONG",{});var oft=s(Ede);rvo=r(oft,"beit"),oft.forEach(t),tvo=r(Vye," \u2014 "),Lq=n(Vye,"A",{href:!0});var rft=s(Lq);avo=r(rft,"BeitModel"),rft.forEach(t),nvo=r(Vye," (BEiT model)"),Vye.forEach(t),svo=i(x),Np=n(x,"LI",{});var Xye=s(Np);Cde=n(Xye,"STRONG",{});var tft=s(Cde);lvo=r(tft,"bert"),tft.forEach(t),ivo=r(Xye," \u2014 "),yq=n(Xye,"A",{href:!0});var aft=s(yq);dvo=r(aft,"BertModel"),aft.forEach(t),cvo=r(Xye," (BERT model)"),Xye.forEach(t),fvo=i(x),qp=n(x,"LI",{});var zye=s(qp);wde=n(zye,"STRONG",{});var nft=s(wde);mvo=r(nft,"bert-generation"),nft.forEach(t),gvo=r(zye," \u2014 "),xq=n(zye,"A",{href:!0});var sft=s(xq);hvo=r(sft,"BertGenerationEncoder"),sft.forEach(t),pvo=r(zye," (Bert Generation model)"),zye.forEach(t),_vo=i(x),jp=n(x,"LI",{});var Qye=s(jp);Ade=n(Qye,"STRONG",{});var lft=s(Ade);uvo=r(lft,"big_bird"),lft.forEach(t),bvo=r(Qye," \u2014 "),$q=n(Qye,"A",{href:!0});var ift=s($q);vvo=r(ift,"BigBirdModel"),ift.forEach(t),Fvo=r(Qye," (BigBird model)"),Qye.forEach(t),Tvo=i(x),Dp=n(x,"LI",{});var Wye=s(Dp);Lde=n(Wye,"STRONG",{});var dft=s(Lde);Mvo=r(dft,"bigbird_pegasus"),dft.forEach(t),Evo=r(Wye," \u2014 "),kq=n(Wye,"A",{href:!0});var cft=s(kq);Cvo=r(cft,"BigBirdPegasusModel"),cft.forEach(t),wvo=r(Wye," (BigBird-Pegasus model)"),Wye.forEach(t),Avo=i(x),Gp=n(x,"LI",{});var Hye=s(Gp);yde=n(Hye,"STRONG",{});var fft=s(yde);Lvo=r(fft,"blenderbot"),fft.forEach(t),yvo=r(Hye," \u2014 "),Sq=n(Hye,"A",{href:!0});var mft=s(Sq);xvo=r(mft,"BlenderbotModel"),mft.forEach(t),$vo=r(Hye," (Blenderbot model)"),Hye.forEach(t),kvo=i(x),Op=n(x,"LI",{});var Uye=s(Op);xde=n(Uye,"STRONG",{});var gft=s(xde);Svo=r(gft,"blenderbot-small"),gft.forEach(t),Rvo=r(Uye," \u2014 "),Rq=n(Uye,"A",{href:!0});var hft=s(Rq);Pvo=r(hft,"BlenderbotSmallModel"),hft.forEach(t),Bvo=r(Uye," (BlenderbotSmall model)"),Uye.forEach(t),Ivo=i(x),Vp=n(x,"LI",{});var Jye=s(Vp);$de=n(Jye,"STRONG",{});var pft=s($de);Nvo=r(pft,"bloom"),pft.forEach(t),qvo=r(Jye," \u2014 "),Pq=n(Jye,"A",{href:!0});var _ft=s(Pq);jvo=r(_ft,"BloomModel"),_ft.forEach(t),Dvo=r(Jye," (BLOOM model)"),Jye.forEach(t),Gvo=i(x),Xp=n(x,"LI",{});var Yye=s(Xp);kde=n(Yye,"STRONG",{});var uft=s(kde);Ovo=r(uft,"camembert"),uft.forEach(t),Vvo=r(Yye," \u2014 "),Bq=n(Yye,"A",{href:!0});var bft=s(Bq);Xvo=r(bft,"CamembertModel"),bft.forEach(t),zvo=r(Yye," (CamemBERT model)"),Yye.forEach(t),Qvo=i(x),zp=n(x,"LI",{});var Kye=s(zp);Sde=n(Kye,"STRONG",{});var vft=s(Sde);Wvo=r(vft,"canine"),vft.forEach(t),Hvo=r(Kye," \u2014 "),Iq=n(Kye,"A",{href:!0});var Fft=s(Iq);Uvo=r(Fft,"CanineModel"),Fft.forEach(t),Jvo=r(Kye," (CANINE model)"),Kye.forEach(t),Yvo=i(x),Qp=n(x,"LI",{});var Zye=s(Qp);Rde=n(Zye,"STRONG",{});var Tft=s(Rde);Kvo=r(Tft,"clip"),Tft.forEach(t),Zvo=r(Zye," \u2014 "),Nq=n(Zye,"A",{href:!0});var Mft=s(Nq);eFo=r(Mft,"CLIPModel"),Mft.forEach(t),oFo=r(Zye," (CLIP model)"),Zye.forEach(t),rFo=i(x),Wp=n(x,"LI",{});var e9e=s(Wp);Pde=n(e9e,"STRONG",{});var Eft=s(Pde);tFo=r(Eft,"codegen"),Eft.forEach(t),aFo=r(e9e," \u2014 "),qq=n(e9e,"A",{href:!0});var Cft=s(qq);nFo=r(Cft,"CodeGenModel"),Cft.forEach(t),sFo=r(e9e," (CodeGen model)"),e9e.forEach(t),lFo=i(x),Hp=n(x,"LI",{});var o9e=s(Hp);Bde=n(o9e,"STRONG",{});var wft=s(Bde);iFo=r(wft,"convbert"),wft.forEach(t),dFo=r(o9e," \u2014 "),jq=n(o9e,"A",{href:!0});var Aft=s(jq);cFo=r(Aft,"ConvBertModel"),Aft.forEach(t),fFo=r(o9e," (ConvBERT model)"),o9e.forEach(t),mFo=i(x),Up=n(x,"LI",{});var r9e=s(Up);Ide=n(r9e,"STRONG",{});var Lft=s(Ide);gFo=r(Lft,"convnext"),Lft.forEach(t),hFo=r(r9e," \u2014 "),Dq=n(r9e,"A",{href:!0});var yft=s(Dq);pFo=r(yft,"ConvNextModel"),yft.forEach(t),_Fo=r(r9e," (ConvNeXT model)"),r9e.forEach(t),uFo=i(x),Jp=n(x,"LI",{});var t9e=s(Jp);Nde=n(t9e,"STRONG",{});var xft=s(Nde);bFo=r(xft,"ctrl"),xft.forEach(t),vFo=r(t9e," \u2014 "),Gq=n(t9e,"A",{href:!0});var $ft=s(Gq);FFo=r($ft,"CTRLModel"),$ft.forEach(t),TFo=r(t9e," (CTRL model)"),t9e.forEach(t),MFo=i(x),Yp=n(x,"LI",{});var a9e=s(Yp);qde=n(a9e,"STRONG",{});var kft=s(qde);EFo=r(kft,"cvt"),kft.forEach(t),CFo=r(a9e," \u2014 "),Oq=n(a9e,"A",{href:!0});var Sft=s(Oq);wFo=r(Sft,"CvtModel"),Sft.forEach(t),AFo=r(a9e," (CvT model)"),a9e.forEach(t),LFo=i(x),Kp=n(x,"LI",{});var n9e=s(Kp);jde=n(n9e,"STRONG",{});var Rft=s(jde);yFo=r(Rft,"data2vec-audio"),Rft.forEach(t),xFo=r(n9e," \u2014 "),Vq=n(n9e,"A",{href:!0});var Pft=s(Vq);$Fo=r(Pft,"Data2VecAudioModel"),Pft.forEach(t),kFo=r(n9e," (Data2VecAudio model)"),n9e.forEach(t),SFo=i(x),Zp=n(x,"LI",{});var s9e=s(Zp);Dde=n(s9e,"STRONG",{});var Bft=s(Dde);RFo=r(Bft,"data2vec-text"),Bft.forEach(t),PFo=r(s9e," \u2014 "),Xq=n(s9e,"A",{href:!0});var Ift=s(Xq);BFo=r(Ift,"Data2VecTextModel"),Ift.forEach(t),IFo=r(s9e," (Data2VecText model)"),s9e.forEach(t),NFo=i(x),e_=n(x,"LI",{});var l9e=s(e_);Gde=n(l9e,"STRONG",{});var Nft=s(Gde);qFo=r(Nft,"data2vec-vision"),Nft.forEach(t),jFo=r(l9e," \u2014 "),zq=n(l9e,"A",{href:!0});var qft=s(zq);DFo=r(qft,"Data2VecVisionModel"),qft.forEach(t),GFo=r(l9e," (Data2VecVision model)"),l9e.forEach(t),OFo=i(x),o_=n(x,"LI",{});var i9e=s(o_);Ode=n(i9e,"STRONG",{});var jft=s(Ode);VFo=r(jft,"deberta"),jft.forEach(t),XFo=r(i9e," \u2014 "),Qq=n(i9e,"A",{href:!0});var Dft=s(Qq);zFo=r(Dft,"DebertaModel"),Dft.forEach(t),QFo=r(i9e," (DeBERTa model)"),i9e.forEach(t),WFo=i(x),r_=n(x,"LI",{});var d9e=s(r_);Vde=n(d9e,"STRONG",{});var Gft=s(Vde);HFo=r(Gft,"deberta-v2"),Gft.forEach(t),UFo=r(d9e," \u2014 "),Wq=n(d9e,"A",{href:!0});var Oft=s(Wq);JFo=r(Oft,"DebertaV2Model"),Oft.forEach(t),YFo=r(d9e," (DeBERTa-v2 model)"),d9e.forEach(t),KFo=i(x),t_=n(x,"LI",{});var c9e=s(t_);Xde=n(c9e,"STRONG",{});var Vft=s(Xde);ZFo=r(Vft,"decision_transformer"),Vft.forEach(t),eTo=r(c9e," \u2014 "),Hq=n(c9e,"A",{href:!0});var Xft=s(Hq);oTo=r(Xft,"DecisionTransformerModel"),Xft.forEach(t),rTo=r(c9e," (Decision Transformer model)"),c9e.forEach(t),tTo=i(x),a_=n(x,"LI",{});var f9e=s(a_);zde=n(f9e,"STRONG",{});var zft=s(zde);aTo=r(zft,"deit"),zft.forEach(t),nTo=r(f9e," \u2014 "),Uq=n(f9e,"A",{href:!0});var Qft=s(Uq);sTo=r(Qft,"DeiTModel"),Qft.forEach(t),lTo=r(f9e," (DeiT model)"),f9e.forEach(t),iTo=i(x),n_=n(x,"LI",{});var m9e=s(n_);Qde=n(m9e,"STRONG",{});var Wft=s(Qde);dTo=r(Wft,"detr"),Wft.forEach(t),cTo=r(m9e," \u2014 "),Jq=n(m9e,"A",{href:!0});var Hft=s(Jq);fTo=r(Hft,"DetrModel"),Hft.forEach(t),mTo=r(m9e," (DETR model)"),m9e.forEach(t),gTo=i(x),s_=n(x,"LI",{});var g9e=s(s_);Wde=n(g9e,"STRONG",{});var Uft=s(Wde);hTo=r(Uft,"distilbert"),Uft.forEach(t),pTo=r(g9e," \u2014 "),Yq=n(g9e,"A",{href:!0});var Jft=s(Yq);_To=r(Jft,"DistilBertModel"),Jft.forEach(t),uTo=r(g9e," (DistilBERT model)"),g9e.forEach(t),bTo=i(x),l_=n(x,"LI",{});var h9e=s(l_);Hde=n(h9e,"STRONG",{});var Yft=s(Hde);vTo=r(Yft,"dpr"),Yft.forEach(t),FTo=r(h9e," \u2014 "),Kq=n(h9e,"A",{href:!0});var Kft=s(Kq);TTo=r(Kft,"DPRQuestionEncoder"),Kft.forEach(t),MTo=r(h9e," (DPR model)"),h9e.forEach(t),ETo=i(x),i_=n(x,"LI",{});var p9e=s(i_);Ude=n(p9e,"STRONG",{});var Zft=s(Ude);CTo=r(Zft,"dpt"),Zft.forEach(t),wTo=r(p9e," \u2014 "),Zq=n(p9e,"A",{href:!0});var emt=s(Zq);ATo=r(emt,"DPTModel"),emt.forEach(t),LTo=r(p9e," (DPT model)"),p9e.forEach(t),yTo=i(x),d_=n(x,"LI",{});var _9e=s(d_);Jde=n(_9e,"STRONG",{});var omt=s(Jde);xTo=r(omt,"electra"),omt.forEach(t),$To=r(_9e," \u2014 "),ej=n(_9e,"A",{href:!0});var rmt=s(ej);kTo=r(rmt,"ElectraModel"),rmt.forEach(t),STo=r(_9e," (ELECTRA model)"),_9e.forEach(t),RTo=i(x),c_=n(x,"LI",{});var u9e=s(c_);Yde=n(u9e,"STRONG",{});var tmt=s(Yde);PTo=r(tmt,"flaubert"),tmt.forEach(t),BTo=r(u9e," \u2014 "),oj=n(u9e,"A",{href:!0});var amt=s(oj);ITo=r(amt,"FlaubertModel"),amt.forEach(t),NTo=r(u9e," (FlauBERT model)"),u9e.forEach(t),qTo=i(x),f_=n(x,"LI",{});var b9e=s(f_);Kde=n(b9e,"STRONG",{});var nmt=s(Kde);jTo=r(nmt,"flava"),nmt.forEach(t),DTo=r(b9e," \u2014 "),rj=n(b9e,"A",{href:!0});var smt=s(rj);GTo=r(smt,"FlavaModel"),smt.forEach(t),OTo=r(b9e," (FLAVA model)"),b9e.forEach(t),VTo=i(x),m_=n(x,"LI",{});var v9e=s(m_);Zde=n(v9e,"STRONG",{});var lmt=s(Zde);XTo=r(lmt,"fnet"),lmt.forEach(t),zTo=r(v9e," \u2014 "),tj=n(v9e,"A",{href:!0});var imt=s(tj);QTo=r(imt,"FNetModel"),imt.forEach(t),WTo=r(v9e," (FNet model)"),v9e.forEach(t),HTo=i(x),g_=n(x,"LI",{});var F9e=s(g_);ece=n(F9e,"STRONG",{});var dmt=s(ece);UTo=r(dmt,"fsmt"),dmt.forEach(t),JTo=r(F9e," \u2014 "),aj=n(F9e,"A",{href:!0});var cmt=s(aj);YTo=r(cmt,"FSMTModel"),cmt.forEach(t),KTo=r(F9e," (FairSeq Machine-Translation model)"),F9e.forEach(t),ZTo=i(x),zs=n(x,"LI",{});var gS=s(zs);oce=n(gS,"STRONG",{});var fmt=s(oce);e8o=r(fmt,"funnel"),fmt.forEach(t),o8o=r(gS," \u2014 "),nj=n(gS,"A",{href:!0});var mmt=s(nj);r8o=r(mmt,"FunnelModel"),mmt.forEach(t),t8o=r(gS," or "),sj=n(gS,"A",{href:!0});var gmt=s(sj);a8o=r(gmt,"FunnelBaseModel"),gmt.forEach(t),n8o=r(gS," (Funnel Transformer model)"),gS.forEach(t),s8o=i(x),h_=n(x,"LI",{});var T9e=s(h_);rce=n(T9e,"STRONG",{});var hmt=s(rce);l8o=r(hmt,"glpn"),hmt.forEach(t),i8o=r(T9e," \u2014 "),lj=n(T9e,"A",{href:!0});var pmt=s(lj);d8o=r(pmt,"GLPNModel"),pmt.forEach(t),c8o=r(T9e," (GLPN model)"),T9e.forEach(t),f8o=i(x),p_=n(x,"LI",{});var M9e=s(p_);tce=n(M9e,"STRONG",{});var _mt=s(tce);m8o=r(_mt,"gpt2"),_mt.forEach(t),g8o=r(M9e," \u2014 "),ij=n(M9e,"A",{href:!0});var umt=s(ij);h8o=r(umt,"GPT2Model"),umt.forEach(t),p8o=r(M9e," (OpenAI GPT-2 model)"),M9e.forEach(t),_8o=i(x),__=n(x,"LI",{});var E9e=s(__);ace=n(E9e,"STRONG",{});var bmt=s(ace);u8o=r(bmt,"gpt_neo"),bmt.forEach(t),b8o=r(E9e," \u2014 "),dj=n(E9e,"A",{href:!0});var vmt=s(dj);v8o=r(vmt,"GPTNeoModel"),vmt.forEach(t),F8o=r(E9e," (GPT Neo model)"),E9e.forEach(t),T8o=i(x),u_=n(x,"LI",{});var C9e=s(u_);nce=n(C9e,"STRONG",{});var Fmt=s(nce);M8o=r(Fmt,"gpt_neox"),Fmt.forEach(t),E8o=r(C9e," \u2014 "),cj=n(C9e,"A",{href:!0});var Tmt=s(cj);C8o=r(Tmt,"GPTNeoXModel"),Tmt.forEach(t),w8o=r(C9e," (GPT NeoX model)"),C9e.forEach(t),A8o=i(x),b_=n(x,"LI",{});var w9e=s(b_);sce=n(w9e,"STRONG",{});var Mmt=s(sce);L8o=r(Mmt,"gptj"),Mmt.forEach(t),y8o=r(w9e," \u2014 "),fj=n(w9e,"A",{href:!0});var Emt=s(fj);x8o=r(Emt,"GPTJModel"),Emt.forEach(t),$8o=r(w9e," (GPT-J model)"),w9e.forEach(t),k8o=i(x),v_=n(x,"LI",{});var A9e=s(v_);lce=n(A9e,"STRONG",{});var Cmt=s(lce);S8o=r(Cmt,"hubert"),Cmt.forEach(t),R8o=r(A9e," \u2014 "),mj=n(A9e,"A",{href:!0});var wmt=s(mj);P8o=r(wmt,"HubertModel"),wmt.forEach(t),B8o=r(A9e," (Hubert model)"),A9e.forEach(t),I8o=i(x),F_=n(x,"LI",{});var L9e=s(F_);ice=n(L9e,"STRONG",{});var Amt=s(ice);N8o=r(Amt,"ibert"),Amt.forEach(t),q8o=r(L9e," \u2014 "),gj=n(L9e,"A",{href:!0});var Lmt=s(gj);j8o=r(Lmt,"IBertModel"),Lmt.forEach(t),D8o=r(L9e," (I-BERT model)"),L9e.forEach(t),G8o=i(x),T_=n(x,"LI",{});var y9e=s(T_);dce=n(y9e,"STRONG",{});var ymt=s(dce);O8o=r(ymt,"imagegpt"),ymt.forEach(t),V8o=r(y9e," \u2014 "),hj=n(y9e,"A",{href:!0});var xmt=s(hj);X8o=r(xmt,"ImageGPTModel"),xmt.forEach(t),z8o=r(y9e," (ImageGPT model)"),y9e.forEach(t),Q8o=i(x),M_=n(x,"LI",{});var x9e=s(M_);cce=n(x9e,"STRONG",{});var $mt=s(cce);W8o=r($mt,"layoutlm"),$mt.forEach(t),H8o=r(x9e," \u2014 "),pj=n(x9e,"A",{href:!0});var kmt=s(pj);U8o=r(kmt,"LayoutLMModel"),kmt.forEach(t),J8o=r(x9e," (LayoutLM model)"),x9e.forEach(t),Y8o=i(x),E_=n(x,"LI",{});var $9e=s(E_);fce=n($9e,"STRONG",{});var Smt=s(fce);K8o=r(Smt,"layoutlmv2"),Smt.forEach(t),Z8o=r($9e," \u2014 "),_j=n($9e,"A",{href:!0});var Rmt=s(_j);eMo=r(Rmt,"LayoutLMv2Model"),Rmt.forEach(t),oMo=r($9e," (LayoutLMv2 model)"),$9e.forEach(t),rMo=i(x),C_=n(x,"LI",{});var k9e=s(C_);mce=n(k9e,"STRONG",{});var Pmt=s(mce);tMo=r(Pmt,"layoutlmv3"),Pmt.forEach(t),aMo=r(k9e," \u2014 "),uj=n(k9e,"A",{href:!0});var Bmt=s(uj);nMo=r(Bmt,"LayoutLMv3Model"),Bmt.forEach(t),sMo=r(k9e," (LayoutLMv3 model)"),k9e.forEach(t),lMo=i(x),w_=n(x,"LI",{});var S9e=s(w_);gce=n(S9e,"STRONG",{});var Imt=s(gce);iMo=r(Imt,"led"),Imt.forEach(t),dMo=r(S9e," \u2014 "),bj=n(S9e,"A",{href:!0});var Nmt=s(bj);cMo=r(Nmt,"LEDModel"),Nmt.forEach(t),fMo=r(S9e," (LED model)"),S9e.forEach(t),mMo=i(x),A_=n(x,"LI",{});var R9e=s(A_);hce=n(R9e,"STRONG",{});var qmt=s(hce);gMo=r(qmt,"levit"),qmt.forEach(t),hMo=r(R9e," \u2014 "),vj=n(R9e,"A",{href:!0});var jmt=s(vj);pMo=r(jmt,"LevitModel"),jmt.forEach(t),_Mo=r(R9e," (LeViT model)"),R9e.forEach(t),uMo=i(x),L_=n(x,"LI",{});var P9e=s(L_);pce=n(P9e,"STRONG",{});var Dmt=s(pce);bMo=r(Dmt,"longformer"),Dmt.forEach(t),vMo=r(P9e," \u2014 "),Fj=n(P9e,"A",{href:!0});var Gmt=s(Fj);FMo=r(Gmt,"LongformerModel"),Gmt.forEach(t),TMo=r(P9e," (Longformer model)"),P9e.forEach(t),MMo=i(x),y_=n(x,"LI",{});var B9e=s(y_);_ce=n(B9e,"STRONG",{});var Omt=s(_ce);EMo=r(Omt,"longt5"),Omt.forEach(t),CMo=r(B9e," \u2014 "),Tj=n(B9e,"A",{href:!0});var Vmt=s(Tj);wMo=r(Vmt,"LongT5Model"),Vmt.forEach(t),AMo=r(B9e," (LongT5 model)"),B9e.forEach(t),LMo=i(x),x_=n(x,"LI",{});var I9e=s(x_);uce=n(I9e,"STRONG",{});var Xmt=s(uce);yMo=r(Xmt,"luke"),Xmt.forEach(t),xMo=r(I9e," \u2014 "),Mj=n(I9e,"A",{href:!0});var zmt=s(Mj);$Mo=r(zmt,"LukeModel"),zmt.forEach(t),kMo=r(I9e," (LUKE model)"),I9e.forEach(t),SMo=i(x),$_=n(x,"LI",{});var N9e=s($_);bce=n(N9e,"STRONG",{});var Qmt=s(bce);RMo=r(Qmt,"lxmert"),Qmt.forEach(t),PMo=r(N9e," \u2014 "),Ej=n(N9e,"A",{href:!0});var Wmt=s(Ej);BMo=r(Wmt,"LxmertModel"),Wmt.forEach(t),IMo=r(N9e," (LXMERT model)"),N9e.forEach(t),NMo=i(x),k_=n(x,"LI",{});var q9e=s(k_);vce=n(q9e,"STRONG",{});var Hmt=s(vce);qMo=r(Hmt,"m2m_100"),Hmt.forEach(t),jMo=r(q9e," \u2014 "),Cj=n(q9e,"A",{href:!0});var Umt=s(Cj);DMo=r(Umt,"M2M100Model"),Umt.forEach(t),GMo=r(q9e," (M2M100 model)"),q9e.forEach(t),OMo=i(x),S_=n(x,"LI",{});var j9e=s(S_);Fce=n(j9e,"STRONG",{});var Jmt=s(Fce);VMo=r(Jmt,"marian"),Jmt.forEach(t),XMo=r(j9e," \u2014 "),wj=n(j9e,"A",{href:!0});var Ymt=s(wj);zMo=r(Ymt,"MarianModel"),Ymt.forEach(t),QMo=r(j9e," (Marian model)"),j9e.forEach(t),WMo=i(x),R_=n(x,"LI",{});var D9e=s(R_);Tce=n(D9e,"STRONG",{});var Kmt=s(Tce);HMo=r(Kmt,"maskformer"),Kmt.forEach(t),UMo=r(D9e," \u2014 "),Aj=n(D9e,"A",{href:!0});var Zmt=s(Aj);JMo=r(Zmt,"MaskFormerModel"),Zmt.forEach(t),YMo=r(D9e," (MaskFormer model)"),D9e.forEach(t),KMo=i(x),P_=n(x,"LI",{});var G9e=s(P_);Mce=n(G9e,"STRONG",{});var egt=s(Mce);ZMo=r(egt,"mbart"),egt.forEach(t),e4o=r(G9e," \u2014 "),Lj=n(G9e,"A",{href:!0});var ogt=s(Lj);o4o=r(ogt,"MBartModel"),ogt.forEach(t),r4o=r(G9e," (mBART model)"),G9e.forEach(t),t4o=i(x),B_=n(x,"LI",{});var O9e=s(B_);Ece=n(O9e,"STRONG",{});var rgt=s(Ece);a4o=r(rgt,"mctct"),rgt.forEach(t),n4o=r(O9e," \u2014 "),yj=n(O9e,"A",{href:!0});var tgt=s(yj);s4o=r(tgt,"MCTCTModel"),tgt.forEach(t),l4o=r(O9e," (M-CTC-T model)"),O9e.forEach(t),i4o=i(x),I_=n(x,"LI",{});var V9e=s(I_);Cce=n(V9e,"STRONG",{});var agt=s(Cce);d4o=r(agt,"megatron-bert"),agt.forEach(t),c4o=r(V9e," \u2014 "),xj=n(V9e,"A",{href:!0});var ngt=s(xj);f4o=r(ngt,"MegatronBertModel"),ngt.forEach(t),m4o=r(V9e," (Megatron-BERT model)"),V9e.forEach(t),g4o=i(x),N_=n(x,"LI",{});var X9e=s(N_);wce=n(X9e,"STRONG",{});var sgt=s(wce);h4o=r(sgt,"mobilebert"),sgt.forEach(t),p4o=r(X9e," \u2014 "),$j=n(X9e,"A",{href:!0});var lgt=s($j);_4o=r(lgt,"MobileBertModel"),lgt.forEach(t),u4o=r(X9e," (MobileBERT model)"),X9e.forEach(t),b4o=i(x),q_=n(x,"LI",{});var z9e=s(q_);Ace=n(z9e,"STRONG",{});var igt=s(Ace);v4o=r(igt,"mpnet"),igt.forEach(t),F4o=r(z9e," \u2014 "),kj=n(z9e,"A",{href:!0});var dgt=s(kj);T4o=r(dgt,"MPNetModel"),dgt.forEach(t),M4o=r(z9e," (MPNet model)"),z9e.forEach(t),E4o=i(x),j_=n(x,"LI",{});var Q9e=s(j_);Lce=n(Q9e,"STRONG",{});var cgt=s(Lce);C4o=r(cgt,"mt5"),cgt.forEach(t),w4o=r(Q9e," \u2014 "),Sj=n(Q9e,"A",{href:!0});var fgt=s(Sj);A4o=r(fgt,"MT5Model"),fgt.forEach(t),L4o=r(Q9e," (MT5 model)"),Q9e.forEach(t),y4o=i(x),D_=n(x,"LI",{});var W9e=s(D_);yce=n(W9e,"STRONG",{});var mgt=s(yce);x4o=r(mgt,"mvp"),mgt.forEach(t),$4o=r(W9e," \u2014 "),Rj=n(W9e,"A",{href:!0});var ggt=s(Rj);k4o=r(ggt,"MvpModel"),ggt.forEach(t),S4o=r(W9e," (MVP model)"),W9e.forEach(t),R4o=i(x),G_=n(x,"LI",{});var H9e=s(G_);xce=n(H9e,"STRONG",{});var hgt=s(xce);P4o=r(hgt,"nezha"),hgt.forEach(t),B4o=r(H9e," \u2014 "),Pj=n(H9e,"A",{href:!0});var pgt=s(Pj);I4o=r(pgt,"NezhaModel"),pgt.forEach(t),N4o=r(H9e," (Nezha model)"),H9e.forEach(t),q4o=i(x),O_=n(x,"LI",{});var U9e=s(O_);$ce=n(U9e,"STRONG",{});var _gt=s($ce);j4o=r(_gt,"nystromformer"),_gt.forEach(t),D4o=r(U9e," \u2014 "),Bj=n(U9e,"A",{href:!0});var ugt=s(Bj);G4o=r(ugt,"NystromformerModel"),ugt.forEach(t),O4o=r(U9e," (Nystr\xF6mformer model)"),U9e.forEach(t),V4o=i(x),V_=n(x,"LI",{});var J9e=s(V_);kce=n(J9e,"STRONG",{});var bgt=s(kce);X4o=r(bgt,"openai-gpt"),bgt.forEach(t),z4o=r(J9e," \u2014 "),Ij=n(J9e,"A",{href:!0});var vgt=s(Ij);Q4o=r(vgt,"OpenAIGPTModel"),vgt.forEach(t),W4o=r(J9e," (OpenAI GPT model)"),J9e.forEach(t),H4o=i(x),X_=n(x,"LI",{});var Y9e=s(X_);Sce=n(Y9e,"STRONG",{});var Fgt=s(Sce);U4o=r(Fgt,"opt"),Fgt.forEach(t),J4o=r(Y9e," \u2014 "),Nj=n(Y9e,"A",{href:!0});var Tgt=s(Nj);Y4o=r(Tgt,"OPTModel"),Tgt.forEach(t),K4o=r(Y9e," (OPT model)"),Y9e.forEach(t),Z4o=i(x),z_=n(x,"LI",{});var K9e=s(z_);Rce=n(K9e,"STRONG",{});var Mgt=s(Rce);eEo=r(Mgt,"pegasus"),Mgt.forEach(t),oEo=r(K9e," \u2014 "),qj=n(K9e,"A",{href:!0});var Egt=s(qj);rEo=r(Egt,"PegasusModel"),Egt.forEach(t),tEo=r(K9e," (Pegasus model)"),K9e.forEach(t),aEo=i(x),Q_=n(x,"LI",{});var Z9e=s(Q_);Pce=n(Z9e,"STRONG",{});var Cgt=s(Pce);nEo=r(Cgt,"perceiver"),Cgt.forEach(t),sEo=r(Z9e," \u2014 "),jj=n(Z9e,"A",{href:!0});var wgt=s(jj);lEo=r(wgt,"PerceiverModel"),wgt.forEach(t),iEo=r(Z9e," (Perceiver model)"),Z9e.forEach(t),dEo=i(x),W_=n(x,"LI",{});var exe=s(W_);Bce=n(exe,"STRONG",{});var Agt=s(Bce);cEo=r(Agt,"plbart"),Agt.forEach(t),fEo=r(exe," \u2014 "),Dj=n(exe,"A",{href:!0});var Lgt=s(Dj);mEo=r(Lgt,"PLBartModel"),Lgt.forEach(t),gEo=r(exe," (PLBart model)"),exe.forEach(t),hEo=i(x),H_=n(x,"LI",{});var oxe=s(H_);Ice=n(oxe,"STRONG",{});var ygt=s(Ice);pEo=r(ygt,"poolformer"),ygt.forEach(t),_Eo=r(oxe," \u2014 "),Gj=n(oxe,"A",{href:!0});var xgt=s(Gj);uEo=r(xgt,"PoolFormerModel"),xgt.forEach(t),bEo=r(oxe," (PoolFormer model)"),oxe.forEach(t),vEo=i(x),U_=n(x,"LI",{});var rxe=s(U_);Nce=n(rxe,"STRONG",{});var $gt=s(Nce);FEo=r($gt,"prophetnet"),$gt.forEach(t),TEo=r(rxe," \u2014 "),Oj=n(rxe,"A",{href:!0});var kgt=s(Oj);MEo=r(kgt,"ProphetNetModel"),kgt.forEach(t),EEo=r(rxe," (ProphetNet model)"),rxe.forEach(t),CEo=i(x),J_=n(x,"LI",{});var txe=s(J_);qce=n(txe,"STRONG",{});var Sgt=s(qce);wEo=r(Sgt,"qdqbert"),Sgt.forEach(t),AEo=r(txe," \u2014 "),Vj=n(txe,"A",{href:!0});var Rgt=s(Vj);LEo=r(Rgt,"QDQBertModel"),Rgt.forEach(t),yEo=r(txe," (QDQBert model)"),txe.forEach(t),xEo=i(x),Y_=n(x,"LI",{});var axe=s(Y_);jce=n(axe,"STRONG",{});var Pgt=s(jce);$Eo=r(Pgt,"reformer"),Pgt.forEach(t),kEo=r(axe," \u2014 "),Xj=n(axe,"A",{href:!0});var Bgt=s(Xj);SEo=r(Bgt,"ReformerModel"),Bgt.forEach(t),REo=r(axe," (Reformer model)"),axe.forEach(t),PEo=i(x),K_=n(x,"LI",{});var nxe=s(K_);Dce=n(nxe,"STRONG",{});var Igt=s(Dce);BEo=r(Igt,"regnet"),Igt.forEach(t),IEo=r(nxe," \u2014 "),zj=n(nxe,"A",{href:!0});var Ngt=s(zj);NEo=r(Ngt,"RegNetModel"),Ngt.forEach(t),qEo=r(nxe," (RegNet model)"),nxe.forEach(t),jEo=i(x),Z_=n(x,"LI",{});var sxe=s(Z_);Gce=n(sxe,"STRONG",{});var qgt=s(Gce);DEo=r(qgt,"rembert"),qgt.forEach(t),GEo=r(sxe," \u2014 "),Qj=n(sxe,"A",{href:!0});var jgt=s(Qj);OEo=r(jgt,"RemBertModel"),jgt.forEach(t),VEo=r(sxe," (RemBERT model)"),sxe.forEach(t),XEo=i(x),eu=n(x,"LI",{});var lxe=s(eu);Oce=n(lxe,"STRONG",{});var Dgt=s(Oce);zEo=r(Dgt,"resnet"),Dgt.forEach(t),QEo=r(lxe," \u2014 "),Wj=n(lxe,"A",{href:!0});var Ggt=s(Wj);WEo=r(Ggt,"ResNetModel"),Ggt.forEach(t),HEo=r(lxe," (ResNet model)"),lxe.forEach(t),UEo=i(x),ou=n(x,"LI",{});var ixe=s(ou);Vce=n(ixe,"STRONG",{});var Ogt=s(Vce);JEo=r(Ogt,"retribert"),Ogt.forEach(t),YEo=r(ixe," \u2014 "),Hj=n(ixe,"A",{href:!0});var Vgt=s(Hj);KEo=r(Vgt,"RetriBertModel"),Vgt.forEach(t),ZEo=r(ixe," (RetriBERT model)"),ixe.forEach(t),eCo=i(x),ru=n(x,"LI",{});var dxe=s(ru);Xce=n(dxe,"STRONG",{});var Xgt=s(Xce);oCo=r(Xgt,"roberta"),Xgt.forEach(t),rCo=r(dxe," \u2014 "),Uj=n(dxe,"A",{href:!0});var zgt=s(Uj);tCo=r(zgt,"RobertaModel"),zgt.forEach(t),aCo=r(dxe," (RoBERTa model)"),dxe.forEach(t),nCo=i(x),tu=n(x,"LI",{});var cxe=s(tu);zce=n(cxe,"STRONG",{});var Qgt=s(zce);sCo=r(Qgt,"roformer"),Qgt.forEach(t),lCo=r(cxe," \u2014 "),Jj=n(cxe,"A",{href:!0});var Wgt=s(Jj);iCo=r(Wgt,"RoFormerModel"),Wgt.forEach(t),dCo=r(cxe," (RoFormer model)"),cxe.forEach(t),cCo=i(x),au=n(x,"LI",{});var fxe=s(au);Qce=n(fxe,"STRONG",{});var Hgt=s(Qce);fCo=r(Hgt,"segformer"),Hgt.forEach(t),mCo=r(fxe," \u2014 "),Yj=n(fxe,"A",{href:!0});var Ugt=s(Yj);gCo=r(Ugt,"SegformerModel"),Ugt.forEach(t),hCo=r(fxe," (SegFormer model)"),fxe.forEach(t),pCo=i(x),nu=n(x,"LI",{});var mxe=s(nu);Wce=n(mxe,"STRONG",{});var Jgt=s(Wce);_Co=r(Jgt,"sew"),Jgt.forEach(t),uCo=r(mxe," \u2014 "),Kj=n(mxe,"A",{href:!0});var Ygt=s(Kj);bCo=r(Ygt,"SEWModel"),Ygt.forEach(t),vCo=r(mxe," (SEW model)"),mxe.forEach(t),FCo=i(x),su=n(x,"LI",{});var gxe=s(su);Hce=n(gxe,"STRONG",{});var Kgt=s(Hce);TCo=r(Kgt,"sew-d"),Kgt.forEach(t),MCo=r(gxe," \u2014 "),Zj=n(gxe,"A",{href:!0});var Zgt=s(Zj);ECo=r(Zgt,"SEWDModel"),Zgt.forEach(t),CCo=r(gxe," (SEW-D model)"),gxe.forEach(t),wCo=i(x),lu=n(x,"LI",{});var hxe=s(lu);Uce=n(hxe,"STRONG",{});var eht=s(Uce);ACo=r(eht,"speech_to_text"),eht.forEach(t),LCo=r(hxe," \u2014 "),eD=n(hxe,"A",{href:!0});var oht=s(eD);yCo=r(oht,"Speech2TextModel"),oht.forEach(t),xCo=r(hxe," (Speech2Text model)"),hxe.forEach(t),$Co=i(x),iu=n(x,"LI",{});var pxe=s(iu);Jce=n(pxe,"STRONG",{});var rht=s(Jce);kCo=r(rht,"splinter"),rht.forEach(t),SCo=r(pxe," \u2014 "),oD=n(pxe,"A",{href:!0});var tht=s(oD);RCo=r(tht,"SplinterModel"),tht.forEach(t),PCo=r(pxe," (Splinter model)"),pxe.forEach(t),BCo=i(x),du=n(x,"LI",{});var _xe=s(du);Yce=n(_xe,"STRONG",{});var aht=s(Yce);ICo=r(aht,"squeezebert"),aht.forEach(t),NCo=r(_xe," \u2014 "),rD=n(_xe,"A",{href:!0});var nht=s(rD);qCo=r(nht,"SqueezeBertModel"),nht.forEach(t),jCo=r(_xe," (SqueezeBERT model)"),_xe.forEach(t),DCo=i(x),cu=n(x,"LI",{});var uxe=s(cu);Kce=n(uxe,"STRONG",{});var sht=s(Kce);GCo=r(sht,"swin"),sht.forEach(t),OCo=r(uxe," \u2014 "),tD=n(uxe,"A",{href:!0});var lht=s(tD);VCo=r(lht,"SwinModel"),lht.forEach(t),XCo=r(uxe," (Swin Transformer model)"),uxe.forEach(t),zCo=i(x),fu=n(x,"LI",{});var bxe=s(fu);Zce=n(bxe,"STRONG",{});var iht=s(Zce);QCo=r(iht,"t5"),iht.forEach(t),WCo=r(bxe," \u2014 "),aD=n(bxe,"A",{href:!0});var dht=s(aD);HCo=r(dht,"T5Model"),dht.forEach(t),UCo=r(bxe," (T5 model)"),bxe.forEach(t),JCo=i(x),mu=n(x,"LI",{});var vxe=s(mu);efe=n(vxe,"STRONG",{});var cht=s(efe);YCo=r(cht,"tapas"),cht.forEach(t),KCo=r(vxe," \u2014 "),nD=n(vxe,"A",{href:!0});var fht=s(nD);ZCo=r(fht,"TapasModel"),fht.forEach(t),e3o=r(vxe," (TAPAS model)"),vxe.forEach(t),o3o=i(x),gu=n(x,"LI",{});var Fxe=s(gu);ofe=n(Fxe,"STRONG",{});var mht=s(ofe);r3o=r(mht,"trajectory_transformer"),mht.forEach(t),t3o=r(Fxe," \u2014 "),sD=n(Fxe,"A",{href:!0});var ght=s(sD);a3o=r(ght,"TrajectoryTransformerModel"),ght.forEach(t),n3o=r(Fxe," (Trajectory Transformer model)"),Fxe.forEach(t),s3o=i(x),hu=n(x,"LI",{});var Txe=s(hu);rfe=n(Txe,"STRONG",{});var hht=s(rfe);l3o=r(hht,"transfo-xl"),hht.forEach(t),i3o=r(Txe," \u2014 "),lD=n(Txe,"A",{href:!0});var pht=s(lD);d3o=r(pht,"TransfoXLModel"),pht.forEach(t),c3o=r(Txe," (Transformer-XL model)"),Txe.forEach(t),f3o=i(x),pu=n(x,"LI",{});var Mxe=s(pu);tfe=n(Mxe,"STRONG",{});var _ht=s(tfe);m3o=r(_ht,"unispeech"),_ht.forEach(t),g3o=r(Mxe," \u2014 "),iD=n(Mxe,"A",{href:!0});var uht=s(iD);h3o=r(uht,"UniSpeechModel"),uht.forEach(t),p3o=r(Mxe," (UniSpeech model)"),Mxe.forEach(t),_3o=i(x),_u=n(x,"LI",{});var Exe=s(_u);afe=n(Exe,"STRONG",{});var bht=s(afe);u3o=r(bht,"unispeech-sat"),bht.forEach(t),b3o=r(Exe," \u2014 "),dD=n(Exe,"A",{href:!0});var vht=s(dD);v3o=r(vht,"UniSpeechSatModel"),vht.forEach(t),F3o=r(Exe," (UniSpeechSat model)"),Exe.forEach(t),T3o=i(x),uu=n(x,"LI",{});var Cxe=s(uu);nfe=n(Cxe,"STRONG",{});var Fht=s(nfe);M3o=r(Fht,"van"),Fht.forEach(t),E3o=r(Cxe," \u2014 "),cD=n(Cxe,"A",{href:!0});var Tht=s(cD);C3o=r(Tht,"VanModel"),Tht.forEach(t),w3o=r(Cxe," (VAN model)"),Cxe.forEach(t),A3o=i(x),bu=n(x,"LI",{});var wxe=s(bu);sfe=n(wxe,"STRONG",{});var Mht=s(sfe);L3o=r(Mht,"vilt"),Mht.forEach(t),y3o=r(wxe," \u2014 "),fD=n(wxe,"A",{href:!0});var Eht=s(fD);x3o=r(Eht,"ViltModel"),Eht.forEach(t),$3o=r(wxe," (ViLT model)"),wxe.forEach(t),k3o=i(x),vu=n(x,"LI",{});var Axe=s(vu);lfe=n(Axe,"STRONG",{});var Cht=s(lfe);S3o=r(Cht,"vision-text-dual-encoder"),Cht.forEach(t),R3o=r(Axe," \u2014 "),mD=n(Axe,"A",{href:!0});var wht=s(mD);P3o=r(wht,"VisionTextDualEncoderModel"),wht.forEach(t),B3o=r(Axe," (VisionTextDualEncoder model)"),Axe.forEach(t),I3o=i(x),Fu=n(x,"LI",{});var Lxe=s(Fu);ife=n(Lxe,"STRONG",{});var Aht=s(ife);N3o=r(Aht,"visual_bert"),Aht.forEach(t),q3o=r(Lxe," \u2014 "),gD=n(Lxe,"A",{href:!0});var Lht=s(gD);j3o=r(Lht,"VisualBertModel"),Lht.forEach(t),D3o=r(Lxe," (VisualBERT model)"),Lxe.forEach(t),G3o=i(x),Tu=n(x,"LI",{});var yxe=s(Tu);dfe=n(yxe,"STRONG",{});var yht=s(dfe);O3o=r(yht,"vit"),yht.forEach(t),V3o=r(yxe," \u2014 "),hD=n(yxe,"A",{href:!0});var xht=s(hD);X3o=r(xht,"ViTModel"),xht.forEach(t),z3o=r(yxe," (ViT model)"),yxe.forEach(t),Q3o=i(x),Mu=n(x,"LI",{});var xxe=s(Mu);cfe=n(xxe,"STRONG",{});var $ht=s(cfe);W3o=r($ht,"vit_mae"),$ht.forEach(t),H3o=r(xxe," \u2014 "),pD=n(xxe,"A",{href:!0});var kht=s(pD);U3o=r(kht,"ViTMAEModel"),kht.forEach(t),J3o=r(xxe," (ViTMAE model)"),xxe.forEach(t),Y3o=i(x),Eu=n(x,"LI",{});var $xe=s(Eu);ffe=n($xe,"STRONG",{});var Sht=s(ffe);K3o=r(Sht,"wav2vec2"),Sht.forEach(t),Z3o=r($xe," \u2014 "),_D=n($xe,"A",{href:!0});var Rht=s(_D);e5o=r(Rht,"Wav2Vec2Model"),Rht.forEach(t),o5o=r($xe," (Wav2Vec2 model)"),$xe.forEach(t),r5o=i(x),Cu=n(x,"LI",{});var kxe=s(Cu);mfe=n(kxe,"STRONG",{});var Pht=s(mfe);t5o=r(Pht,"wav2vec2-conformer"),Pht.forEach(t),a5o=r(kxe," \u2014 "),uD=n(kxe,"A",{href:!0});var Bht=s(uD);n5o=r(Bht,"Wav2Vec2ConformerModel"),Bht.forEach(t),s5o=r(kxe," (Wav2Vec2-Conformer model)"),kxe.forEach(t),l5o=i(x),wu=n(x,"LI",{});var Sxe=s(wu);gfe=n(Sxe,"STRONG",{});var Iht=s(gfe);i5o=r(Iht,"wavlm"),Iht.forEach(t),d5o=r(Sxe," \u2014 "),bD=n(Sxe,"A",{href:!0});var Nht=s(bD);c5o=r(Nht,"WavLMModel"),Nht.forEach(t),f5o=r(Sxe," (WavLM model)"),Sxe.forEach(t),m5o=i(x),Au=n(x,"LI",{});var Rxe=s(Au);hfe=n(Rxe,"STRONG",{});var qht=s(hfe);g5o=r(qht,"xglm"),qht.forEach(t),h5o=r(Rxe," \u2014 "),vD=n(Rxe,"A",{href:!0});var jht=s(vD);p5o=r(jht,"XGLMModel"),jht.forEach(t),_5o=r(Rxe," (XGLM model)"),Rxe.forEach(t),u5o=i(x),Lu=n(x,"LI",{});var Pxe=s(Lu);pfe=n(Pxe,"STRONG",{});var Dht=s(pfe);b5o=r(Dht,"xlm"),Dht.forEach(t),v5o=r(Pxe," \u2014 "),FD=n(Pxe,"A",{href:!0});var Ght=s(FD);F5o=r(Ght,"XLMModel"),Ght.forEach(t),T5o=r(Pxe," (XLM model)"),Pxe.forEach(t),M5o=i(x),yu=n(x,"LI",{});var Bxe=s(yu);_fe=n(Bxe,"STRONG",{});var Oht=s(_fe);E5o=r(Oht,"xlm-prophetnet"),Oht.forEach(t),C5o=r(Bxe," \u2014 "),TD=n(Bxe,"A",{href:!0});var Vht=s(TD);w5o=r(Vht,"XLMProphetNetModel"),Vht.forEach(t),A5o=r(Bxe," (XLM-ProphetNet model)"),Bxe.forEach(t),L5o=i(x),xu=n(x,"LI",{});var Ixe=s(xu);ufe=n(Ixe,"STRONG",{});var Xht=s(ufe);y5o=r(Xht,"xlm-roberta"),Xht.forEach(t),x5o=r(Ixe," \u2014 "),MD=n(Ixe,"A",{href:!0});var zht=s(MD);$5o=r(zht,"XLMRobertaModel"),zht.forEach(t),k5o=r(Ixe," (XLM-RoBERTa model)"),Ixe.forEach(t),S5o=i(x),$u=n(x,"LI",{});var Nxe=s($u);bfe=n(Nxe,"STRONG",{});var Qht=s(bfe);R5o=r(Qht,"xlm-roberta-xl"),Qht.forEach(t),P5o=r(Nxe," \u2014 "),ED=n(Nxe,"A",{href:!0});var Wht=s(ED);B5o=r(Wht,"XLMRobertaXLModel"),Wht.forEach(t),I5o=r(Nxe," (XLM-RoBERTa-XL model)"),Nxe.forEach(t),N5o=i(x),ku=n(x,"LI",{});var qxe=s(ku);vfe=n(qxe,"STRONG",{});var Hht=s(vfe);q5o=r(Hht,"xlnet"),Hht.forEach(t),j5o=r(qxe," \u2014 "),CD=n(qxe,"A",{href:!0});var Uht=s(CD);D5o=r(Uht,"XLNetModel"),Uht.forEach(t),G5o=r(qxe," (XLNet model)"),qxe.forEach(t),O5o=i(x),Su=n(x,"LI",{});var jxe=s(Su);Ffe=n(jxe,"STRONG",{});var Jht=s(Ffe);V5o=r(Jht,"yolos"),Jht.forEach(t),X5o=r(jxe," \u2014 "),wD=n(jxe,"A",{href:!0});var Yht=s(wD);z5o=r(Yht,"YolosModel"),Yht.forEach(t),Q5o=r(jxe," (YOLOS model)"),jxe.forEach(t),W5o=i(x),Ru=n(x,"LI",{});var Dxe=s(Ru);Tfe=n(Dxe,"STRONG",{});var Kht=s(Tfe);H5o=r(Kht,"yoso"),Kht.forEach(t),U5o=r(Dxe," \u2014 "),AD=n(Dxe,"A",{href:!0});var Zht=s(AD);J5o=r(Zht,"YosoModel"),Zht.forEach(t),Y5o=r(Dxe," (YOSO model)"),Dxe.forEach(t),x.forEach(t),K5o=i(aa),Pu=n(aa,"P",{});var Gxe=s(Pu);Z5o=r(Gxe,"The model is set in evaluation mode by default using "),Mfe=n(Gxe,"CODE",{});var ept=s(Mfe);e0o=r(ept,"model.eval()"),ept.forEach(t),o0o=r(Gxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Efe=n(Gxe,"CODE",{});var opt=s(Efe);r0o=r(opt,"model.train()"),opt.forEach(t),Gxe.forEach(t),t0o=i(aa),T(Bu.$$.fragment,aa),aa.forEach(t),Zs.forEach(t),eVe=i(f),Di=n(f,"H2",{class:!0});var sze=s(Di);Iu=n(sze,"A",{id:!0,class:!0,href:!0});var rpt=s(Iu);Cfe=n(rpt,"SPAN",{});var tpt=s(Cfe);T(vL.$$.fragment,tpt),tpt.forEach(t),rpt.forEach(t),a0o=i(sze),wfe=n(sze,"SPAN",{});var apt=s(wfe);n0o=r(apt,"AutoModelForPreTraining"),apt.forEach(t),sze.forEach(t),oVe=i(f),$o=n(f,"DIV",{class:!0});var el=s($o);T(FL.$$.fragment,el),s0o=i(el),Gi=n(el,"P",{});var Yoe=s(Gi);l0o=r(Yoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),LD=n(Yoe,"A",{href:!0});var npt=s(LD);i0o=r(npt,"from_pretrained()"),npt.forEach(t),d0o=r(Yoe," class method or the "),yD=n(Yoe,"A",{href:!0});var spt=s(yD);c0o=r(spt,"from_config()"),spt.forEach(t),f0o=r(Yoe,` class
method.`),Yoe.forEach(t),m0o=i(el),TL=n(el,"P",{});var lze=s(TL);g0o=r(lze,"This class cannot be instantiated directly using "),Afe=n(lze,"CODE",{});var lpt=s(Afe);h0o=r(lpt,"__init__()"),lpt.forEach(t),p0o=r(lze," (throws an error)."),lze.forEach(t),_0o=i(el),st=n(el,"DIV",{class:!0});var Qw=s(st);T(ML.$$.fragment,Qw),u0o=i(Qw),Lfe=n(Qw,"P",{});var ipt=s(Lfe);b0o=r(ipt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),ipt.forEach(t),v0o=i(Qw),Oi=n(Qw,"P",{});var Koe=s(Oi);F0o=r(Koe,`Note:
Loading a model from its configuration file does `),yfe=n(Koe,"STRONG",{});var dpt=s(yfe);T0o=r(dpt,"not"),dpt.forEach(t),M0o=r(Koe,` load the model weights. It only affects the
model\u2019s configuration. Use `),xD=n(Koe,"A",{href:!0});var cpt=s(xD);E0o=r(cpt,"from_pretrained()"),cpt.forEach(t),C0o=r(Koe," to load the model weights."),Koe.forEach(t),w0o=i(Qw),T(Nu.$$.fragment,Qw),Qw.forEach(t),A0o=i(el),Ye=n(el,"DIV",{class:!0});var na=s(Ye);T(EL.$$.fragment,na),L0o=i(na),xfe=n(na,"P",{});var fpt=s(xfe);y0o=r(fpt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),fpt.forEach(t),x0o=i(na),Pa=n(na,"P",{});var Ww=s(Pa);$0o=r(Ww,"The model class to instantiate is selected based on the "),$fe=n(Ww,"CODE",{});var mpt=s($fe);k0o=r(mpt,"model_type"),mpt.forEach(t),S0o=r(Ww,` property of the config object (either
passed as an argument or loaded from `),kfe=n(Ww,"CODE",{});var gpt=s(kfe);R0o=r(gpt,"pretrained_model_name_or_path"),gpt.forEach(t),P0o=r(Ww,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sfe=n(Ww,"CODE",{});var hpt=s(Sfe);B0o=r(hpt,"pretrained_model_name_or_path"),hpt.forEach(t),I0o=r(Ww,":"),Ww.forEach(t),N0o=i(na),G=n(na,"UL",{});var O=s(G);qu=n(O,"LI",{});var Oxe=s(qu);Rfe=n(Oxe,"STRONG",{});var ppt=s(Rfe);q0o=r(ppt,"albert"),ppt.forEach(t),j0o=r(Oxe," \u2014 "),$D=n(Oxe,"A",{href:!0});var _pt=s($D);D0o=r(_pt,"AlbertForPreTraining"),_pt.forEach(t),G0o=r(Oxe," (ALBERT model)"),Oxe.forEach(t),O0o=i(O),ju=n(O,"LI",{});var Vxe=s(ju);Pfe=n(Vxe,"STRONG",{});var upt=s(Pfe);V0o=r(upt,"bart"),upt.forEach(t),X0o=r(Vxe," \u2014 "),kD=n(Vxe,"A",{href:!0});var bpt=s(kD);z0o=r(bpt,"BartForConditionalGeneration"),bpt.forEach(t),Q0o=r(Vxe," (BART model)"),Vxe.forEach(t),W0o=i(O),Du=n(O,"LI",{});var Xxe=s(Du);Bfe=n(Xxe,"STRONG",{});var vpt=s(Bfe);H0o=r(vpt,"bert"),vpt.forEach(t),U0o=r(Xxe," \u2014 "),SD=n(Xxe,"A",{href:!0});var Fpt=s(SD);J0o=r(Fpt,"BertForPreTraining"),Fpt.forEach(t),Y0o=r(Xxe," (BERT model)"),Xxe.forEach(t),K0o=i(O),Gu=n(O,"LI",{});var zxe=s(Gu);Ife=n(zxe,"STRONG",{});var Tpt=s(Ife);Z0o=r(Tpt,"big_bird"),Tpt.forEach(t),ewo=r(zxe," \u2014 "),RD=n(zxe,"A",{href:!0});var Mpt=s(RD);owo=r(Mpt,"BigBirdForPreTraining"),Mpt.forEach(t),rwo=r(zxe," (BigBird model)"),zxe.forEach(t),two=i(O),Ou=n(O,"LI",{});var Qxe=s(Ou);Nfe=n(Qxe,"STRONG",{});var Ept=s(Nfe);awo=r(Ept,"bloom"),Ept.forEach(t),nwo=r(Qxe," \u2014 "),PD=n(Qxe,"A",{href:!0});var Cpt=s(PD);swo=r(Cpt,"BloomForCausalLM"),Cpt.forEach(t),lwo=r(Qxe," (BLOOM model)"),Qxe.forEach(t),iwo=i(O),Vu=n(O,"LI",{});var Wxe=s(Vu);qfe=n(Wxe,"STRONG",{});var wpt=s(qfe);dwo=r(wpt,"camembert"),wpt.forEach(t),cwo=r(Wxe," \u2014 "),BD=n(Wxe,"A",{href:!0});var Apt=s(BD);fwo=r(Apt,"CamembertForMaskedLM"),Apt.forEach(t),mwo=r(Wxe," (CamemBERT model)"),Wxe.forEach(t),gwo=i(O),Xu=n(O,"LI",{});var Hxe=s(Xu);jfe=n(Hxe,"STRONG",{});var Lpt=s(jfe);hwo=r(Lpt,"ctrl"),Lpt.forEach(t),pwo=r(Hxe," \u2014 "),ID=n(Hxe,"A",{href:!0});var ypt=s(ID);_wo=r(ypt,"CTRLLMHeadModel"),ypt.forEach(t),uwo=r(Hxe," (CTRL model)"),Hxe.forEach(t),bwo=i(O),zu=n(O,"LI",{});var Uxe=s(zu);Dfe=n(Uxe,"STRONG",{});var xpt=s(Dfe);vwo=r(xpt,"data2vec-text"),xpt.forEach(t),Fwo=r(Uxe," \u2014 "),ND=n(Uxe,"A",{href:!0});var $pt=s(ND);Two=r($pt,"Data2VecTextForMaskedLM"),$pt.forEach(t),Mwo=r(Uxe," (Data2VecText model)"),Uxe.forEach(t),Ewo=i(O),Qu=n(O,"LI",{});var Jxe=s(Qu);Gfe=n(Jxe,"STRONG",{});var kpt=s(Gfe);Cwo=r(kpt,"deberta"),kpt.forEach(t),wwo=r(Jxe," \u2014 "),qD=n(Jxe,"A",{href:!0});var Spt=s(qD);Awo=r(Spt,"DebertaForMaskedLM"),Spt.forEach(t),Lwo=r(Jxe," (DeBERTa model)"),Jxe.forEach(t),ywo=i(O),Wu=n(O,"LI",{});var Yxe=s(Wu);Ofe=n(Yxe,"STRONG",{});var Rpt=s(Ofe);xwo=r(Rpt,"deberta-v2"),Rpt.forEach(t),$wo=r(Yxe," \u2014 "),jD=n(Yxe,"A",{href:!0});var Ppt=s(jD);kwo=r(Ppt,"DebertaV2ForMaskedLM"),Ppt.forEach(t),Swo=r(Yxe," (DeBERTa-v2 model)"),Yxe.forEach(t),Rwo=i(O),Hu=n(O,"LI",{});var Kxe=s(Hu);Vfe=n(Kxe,"STRONG",{});var Bpt=s(Vfe);Pwo=r(Bpt,"distilbert"),Bpt.forEach(t),Bwo=r(Kxe," \u2014 "),DD=n(Kxe,"A",{href:!0});var Ipt=s(DD);Iwo=r(Ipt,"DistilBertForMaskedLM"),Ipt.forEach(t),Nwo=r(Kxe," (DistilBERT model)"),Kxe.forEach(t),qwo=i(O),Uu=n(O,"LI",{});var Zxe=s(Uu);Xfe=n(Zxe,"STRONG",{});var Npt=s(Xfe);jwo=r(Npt,"electra"),Npt.forEach(t),Dwo=r(Zxe," \u2014 "),GD=n(Zxe,"A",{href:!0});var qpt=s(GD);Gwo=r(qpt,"ElectraForPreTraining"),qpt.forEach(t),Owo=r(Zxe," (ELECTRA model)"),Zxe.forEach(t),Vwo=i(O),Ju=n(O,"LI",{});var e$e=s(Ju);zfe=n(e$e,"STRONG",{});var jpt=s(zfe);Xwo=r(jpt,"flaubert"),jpt.forEach(t),zwo=r(e$e," \u2014 "),OD=n(e$e,"A",{href:!0});var Dpt=s(OD);Qwo=r(Dpt,"FlaubertWithLMHeadModel"),Dpt.forEach(t),Wwo=r(e$e," (FlauBERT model)"),e$e.forEach(t),Hwo=i(O),Yu=n(O,"LI",{});var o$e=s(Yu);Qfe=n(o$e,"STRONG",{});var Gpt=s(Qfe);Uwo=r(Gpt,"flava"),Gpt.forEach(t),Jwo=r(o$e," \u2014 "),VD=n(o$e,"A",{href:!0});var Opt=s(VD);Ywo=r(Opt,"FlavaForPreTraining"),Opt.forEach(t),Kwo=r(o$e," (FLAVA model)"),o$e.forEach(t),Zwo=i(O),Ku=n(O,"LI",{});var r$e=s(Ku);Wfe=n(r$e,"STRONG",{});var Vpt=s(Wfe);eAo=r(Vpt,"fnet"),Vpt.forEach(t),oAo=r(r$e," \u2014 "),XD=n(r$e,"A",{href:!0});var Xpt=s(XD);rAo=r(Xpt,"FNetForPreTraining"),Xpt.forEach(t),tAo=r(r$e," (FNet model)"),r$e.forEach(t),aAo=i(O),Zu=n(O,"LI",{});var t$e=s(Zu);Hfe=n(t$e,"STRONG",{});var zpt=s(Hfe);nAo=r(zpt,"fsmt"),zpt.forEach(t),sAo=r(t$e," \u2014 "),zD=n(t$e,"A",{href:!0});var Qpt=s(zD);lAo=r(Qpt,"FSMTForConditionalGeneration"),Qpt.forEach(t),iAo=r(t$e," (FairSeq Machine-Translation model)"),t$e.forEach(t),dAo=i(O),e7=n(O,"LI",{});var a$e=s(e7);Ufe=n(a$e,"STRONG",{});var Wpt=s(Ufe);cAo=r(Wpt,"funnel"),Wpt.forEach(t),fAo=r(a$e," \u2014 "),QD=n(a$e,"A",{href:!0});var Hpt=s(QD);mAo=r(Hpt,"FunnelForPreTraining"),Hpt.forEach(t),gAo=r(a$e," (Funnel Transformer model)"),a$e.forEach(t),hAo=i(O),o7=n(O,"LI",{});var n$e=s(o7);Jfe=n(n$e,"STRONG",{});var Upt=s(Jfe);pAo=r(Upt,"gpt2"),Upt.forEach(t),_Ao=r(n$e," \u2014 "),WD=n(n$e,"A",{href:!0});var Jpt=s(WD);uAo=r(Jpt,"GPT2LMHeadModel"),Jpt.forEach(t),bAo=r(n$e," (OpenAI GPT-2 model)"),n$e.forEach(t),vAo=i(O),r7=n(O,"LI",{});var s$e=s(r7);Yfe=n(s$e,"STRONG",{});var Ypt=s(Yfe);FAo=r(Ypt,"ibert"),Ypt.forEach(t),TAo=r(s$e," \u2014 "),HD=n(s$e,"A",{href:!0});var Kpt=s(HD);MAo=r(Kpt,"IBertForMaskedLM"),Kpt.forEach(t),EAo=r(s$e," (I-BERT model)"),s$e.forEach(t),CAo=i(O),t7=n(O,"LI",{});var l$e=s(t7);Kfe=n(l$e,"STRONG",{});var Zpt=s(Kfe);wAo=r(Zpt,"layoutlm"),Zpt.forEach(t),AAo=r(l$e," \u2014 "),UD=n(l$e,"A",{href:!0});var e_t=s(UD);LAo=r(e_t,"LayoutLMForMaskedLM"),e_t.forEach(t),yAo=r(l$e," (LayoutLM model)"),l$e.forEach(t),xAo=i(O),a7=n(O,"LI",{});var i$e=s(a7);Zfe=n(i$e,"STRONG",{});var o_t=s(Zfe);$Ao=r(o_t,"longformer"),o_t.forEach(t),kAo=r(i$e," \u2014 "),JD=n(i$e,"A",{href:!0});var r_t=s(JD);SAo=r(r_t,"LongformerForMaskedLM"),r_t.forEach(t),RAo=r(i$e," (Longformer model)"),i$e.forEach(t),PAo=i(O),n7=n(O,"LI",{});var d$e=s(n7);eme=n(d$e,"STRONG",{});var t_t=s(eme);BAo=r(t_t,"lxmert"),t_t.forEach(t),IAo=r(d$e," \u2014 "),YD=n(d$e,"A",{href:!0});var a_t=s(YD);NAo=r(a_t,"LxmertForPreTraining"),a_t.forEach(t),qAo=r(d$e," (LXMERT model)"),d$e.forEach(t),jAo=i(O),s7=n(O,"LI",{});var c$e=s(s7);ome=n(c$e,"STRONG",{});var n_t=s(ome);DAo=r(n_t,"megatron-bert"),n_t.forEach(t),GAo=r(c$e," \u2014 "),KD=n(c$e,"A",{href:!0});var s_t=s(KD);OAo=r(s_t,"MegatronBertForPreTraining"),s_t.forEach(t),VAo=r(c$e," (Megatron-BERT model)"),c$e.forEach(t),XAo=i(O),l7=n(O,"LI",{});var f$e=s(l7);rme=n(f$e,"STRONG",{});var l_t=s(rme);zAo=r(l_t,"mobilebert"),l_t.forEach(t),QAo=r(f$e," \u2014 "),ZD=n(f$e,"A",{href:!0});var i_t=s(ZD);WAo=r(i_t,"MobileBertForPreTraining"),i_t.forEach(t),HAo=r(f$e," (MobileBERT model)"),f$e.forEach(t),UAo=i(O),i7=n(O,"LI",{});var m$e=s(i7);tme=n(m$e,"STRONG",{});var d_t=s(tme);JAo=r(d_t,"mpnet"),d_t.forEach(t),YAo=r(m$e," \u2014 "),eG=n(m$e,"A",{href:!0});var c_t=s(eG);KAo=r(c_t,"MPNetForMaskedLM"),c_t.forEach(t),ZAo=r(m$e," (MPNet model)"),m$e.forEach(t),e6o=i(O),d7=n(O,"LI",{});var g$e=s(d7);ame=n(g$e,"STRONG",{});var f_t=s(ame);o6o=r(f_t,"mvp"),f_t.forEach(t),r6o=r(g$e," \u2014 "),oG=n(g$e,"A",{href:!0});var m_t=s(oG);t6o=r(m_t,"MvpForConditionalGeneration"),m_t.forEach(t),a6o=r(g$e," (MVP model)"),g$e.forEach(t),n6o=i(O),c7=n(O,"LI",{});var h$e=s(c7);nme=n(h$e,"STRONG",{});var g_t=s(nme);s6o=r(g_t,"nezha"),g_t.forEach(t),l6o=r(h$e," \u2014 "),rG=n(h$e,"A",{href:!0});var h_t=s(rG);i6o=r(h_t,"NezhaForPreTraining"),h_t.forEach(t),d6o=r(h$e," (Nezha model)"),h$e.forEach(t),c6o=i(O),f7=n(O,"LI",{});var p$e=s(f7);sme=n(p$e,"STRONG",{});var p_t=s(sme);f6o=r(p_t,"openai-gpt"),p_t.forEach(t),m6o=r(p$e," \u2014 "),tG=n(p$e,"A",{href:!0});var __t=s(tG);g6o=r(__t,"OpenAIGPTLMHeadModel"),__t.forEach(t),h6o=r(p$e," (OpenAI GPT model)"),p$e.forEach(t),p6o=i(O),m7=n(O,"LI",{});var _$e=s(m7);lme=n(_$e,"STRONG",{});var u_t=s(lme);_6o=r(u_t,"retribert"),u_t.forEach(t),u6o=r(_$e," \u2014 "),aG=n(_$e,"A",{href:!0});var b_t=s(aG);b6o=r(b_t,"RetriBertModel"),b_t.forEach(t),v6o=r(_$e," (RetriBERT model)"),_$e.forEach(t),F6o=i(O),g7=n(O,"LI",{});var u$e=s(g7);ime=n(u$e,"STRONG",{});var v_t=s(ime);T6o=r(v_t,"roberta"),v_t.forEach(t),M6o=r(u$e," \u2014 "),nG=n(u$e,"A",{href:!0});var F_t=s(nG);E6o=r(F_t,"RobertaForMaskedLM"),F_t.forEach(t),C6o=r(u$e," (RoBERTa model)"),u$e.forEach(t),w6o=i(O),h7=n(O,"LI",{});var b$e=s(h7);dme=n(b$e,"STRONG",{});var T_t=s(dme);A6o=r(T_t,"splinter"),T_t.forEach(t),L6o=r(b$e," \u2014 "),sG=n(b$e,"A",{href:!0});var M_t=s(sG);y6o=r(M_t,"SplinterForPreTraining"),M_t.forEach(t),x6o=r(b$e," (Splinter model)"),b$e.forEach(t),$6o=i(O),p7=n(O,"LI",{});var v$e=s(p7);cme=n(v$e,"STRONG",{});var E_t=s(cme);k6o=r(E_t,"squeezebert"),E_t.forEach(t),S6o=r(v$e," \u2014 "),lG=n(v$e,"A",{href:!0});var C_t=s(lG);R6o=r(C_t,"SqueezeBertForMaskedLM"),C_t.forEach(t),P6o=r(v$e," (SqueezeBERT model)"),v$e.forEach(t),B6o=i(O),_7=n(O,"LI",{});var F$e=s(_7);fme=n(F$e,"STRONG",{});var w_t=s(fme);I6o=r(w_t,"t5"),w_t.forEach(t),N6o=r(F$e," \u2014 "),iG=n(F$e,"A",{href:!0});var A_t=s(iG);q6o=r(A_t,"T5ForConditionalGeneration"),A_t.forEach(t),j6o=r(F$e," (T5 model)"),F$e.forEach(t),D6o=i(O),u7=n(O,"LI",{});var T$e=s(u7);mme=n(T$e,"STRONG",{});var L_t=s(mme);G6o=r(L_t,"tapas"),L_t.forEach(t),O6o=r(T$e," \u2014 "),dG=n(T$e,"A",{href:!0});var y_t=s(dG);V6o=r(y_t,"TapasForMaskedLM"),y_t.forEach(t),X6o=r(T$e," (TAPAS model)"),T$e.forEach(t),z6o=i(O),b7=n(O,"LI",{});var M$e=s(b7);gme=n(M$e,"STRONG",{});var x_t=s(gme);Q6o=r(x_t,"transfo-xl"),x_t.forEach(t),W6o=r(M$e," \u2014 "),cG=n(M$e,"A",{href:!0});var $_t=s(cG);H6o=r($_t,"TransfoXLLMHeadModel"),$_t.forEach(t),U6o=r(M$e," (Transformer-XL model)"),M$e.forEach(t),J6o=i(O),v7=n(O,"LI",{});var E$e=s(v7);hme=n(E$e,"STRONG",{});var k_t=s(hme);Y6o=r(k_t,"unispeech"),k_t.forEach(t),K6o=r(E$e," \u2014 "),fG=n(E$e,"A",{href:!0});var S_t=s(fG);Z6o=r(S_t,"UniSpeechForPreTraining"),S_t.forEach(t),eLo=r(E$e," (UniSpeech model)"),E$e.forEach(t),oLo=i(O),F7=n(O,"LI",{});var C$e=s(F7);pme=n(C$e,"STRONG",{});var R_t=s(pme);rLo=r(R_t,"unispeech-sat"),R_t.forEach(t),tLo=r(C$e," \u2014 "),mG=n(C$e,"A",{href:!0});var P_t=s(mG);aLo=r(P_t,"UniSpeechSatForPreTraining"),P_t.forEach(t),nLo=r(C$e," (UniSpeechSat model)"),C$e.forEach(t),sLo=i(O),T7=n(O,"LI",{});var w$e=s(T7);_me=n(w$e,"STRONG",{});var B_t=s(_me);lLo=r(B_t,"visual_bert"),B_t.forEach(t),iLo=r(w$e," \u2014 "),gG=n(w$e,"A",{href:!0});var I_t=s(gG);dLo=r(I_t,"VisualBertForPreTraining"),I_t.forEach(t),cLo=r(w$e," (VisualBERT model)"),w$e.forEach(t),fLo=i(O),M7=n(O,"LI",{});var A$e=s(M7);ume=n(A$e,"STRONG",{});var N_t=s(ume);mLo=r(N_t,"vit_mae"),N_t.forEach(t),gLo=r(A$e," \u2014 "),hG=n(A$e,"A",{href:!0});var q_t=s(hG);hLo=r(q_t,"ViTMAEForPreTraining"),q_t.forEach(t),pLo=r(A$e," (ViTMAE model)"),A$e.forEach(t),_Lo=i(O),E7=n(O,"LI",{});var L$e=s(E7);bme=n(L$e,"STRONG",{});var j_t=s(bme);uLo=r(j_t,"wav2vec2"),j_t.forEach(t),bLo=r(L$e," \u2014 "),pG=n(L$e,"A",{href:!0});var D_t=s(pG);vLo=r(D_t,"Wav2Vec2ForPreTraining"),D_t.forEach(t),FLo=r(L$e," (Wav2Vec2 model)"),L$e.forEach(t),TLo=i(O),C7=n(O,"LI",{});var y$e=s(C7);vme=n(y$e,"STRONG",{});var G_t=s(vme);MLo=r(G_t,"wav2vec2-conformer"),G_t.forEach(t),ELo=r(y$e," \u2014 "),_G=n(y$e,"A",{href:!0});var O_t=s(_G);CLo=r(O_t,"Wav2Vec2ConformerForPreTraining"),O_t.forEach(t),wLo=r(y$e," (Wav2Vec2-Conformer model)"),y$e.forEach(t),ALo=i(O),w7=n(O,"LI",{});var x$e=s(w7);Fme=n(x$e,"STRONG",{});var V_t=s(Fme);LLo=r(V_t,"xlm"),V_t.forEach(t),yLo=r(x$e," \u2014 "),uG=n(x$e,"A",{href:!0});var X_t=s(uG);xLo=r(X_t,"XLMWithLMHeadModel"),X_t.forEach(t),$Lo=r(x$e," (XLM model)"),x$e.forEach(t),kLo=i(O),A7=n(O,"LI",{});var $$e=s(A7);Tme=n($$e,"STRONG",{});var z_t=s(Tme);SLo=r(z_t,"xlm-roberta"),z_t.forEach(t),RLo=r($$e," \u2014 "),bG=n($$e,"A",{href:!0});var Q_t=s(bG);PLo=r(Q_t,"XLMRobertaForMaskedLM"),Q_t.forEach(t),BLo=r($$e," (XLM-RoBERTa model)"),$$e.forEach(t),ILo=i(O),L7=n(O,"LI",{});var k$e=s(L7);Mme=n(k$e,"STRONG",{});var W_t=s(Mme);NLo=r(W_t,"xlm-roberta-xl"),W_t.forEach(t),qLo=r(k$e," \u2014 "),vG=n(k$e,"A",{href:!0});var H_t=s(vG);jLo=r(H_t,"XLMRobertaXLForMaskedLM"),H_t.forEach(t),DLo=r(k$e," (XLM-RoBERTa-XL model)"),k$e.forEach(t),GLo=i(O),y7=n(O,"LI",{});var S$e=s(y7);Eme=n(S$e,"STRONG",{});var U_t=s(Eme);OLo=r(U_t,"xlnet"),U_t.forEach(t),VLo=r(S$e," \u2014 "),FG=n(S$e,"A",{href:!0});var J_t=s(FG);XLo=r(J_t,"XLNetLMHeadModel"),J_t.forEach(t),zLo=r(S$e," (XLNet model)"),S$e.forEach(t),O.forEach(t),QLo=i(na),x7=n(na,"P",{});var R$e=s(x7);WLo=r(R$e,"The model is set in evaluation mode by default using "),Cme=n(R$e,"CODE",{});var Y_t=s(Cme);HLo=r(Y_t,"model.eval()"),Y_t.forEach(t),ULo=r(R$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wme=n(R$e,"CODE",{});var K_t=s(wme);JLo=r(K_t,"model.train()"),K_t.forEach(t),R$e.forEach(t),YLo=i(na),T($7.$$.fragment,na),na.forEach(t),el.forEach(t),rVe=i(f),Vi=n(f,"H2",{class:!0});var ize=s(Vi);k7=n(ize,"A",{id:!0,class:!0,href:!0});var Z_t=s(k7);Ame=n(Z_t,"SPAN",{});var eut=s(Ame);T(CL.$$.fragment,eut),eut.forEach(t),Z_t.forEach(t),KLo=i(ize),Lme=n(ize,"SPAN",{});var out=s(Lme);ZLo=r(out,"AutoModelForCausalLM"),out.forEach(t),ize.forEach(t),tVe=i(f),ko=n(f,"DIV",{class:!0});var ol=s(ko);T(wL.$$.fragment,ol),eyo=i(ol),Xi=n(ol,"P",{});var Zoe=s(Xi);oyo=r(Zoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),TG=n(Zoe,"A",{href:!0});var rut=s(TG);ryo=r(rut,"from_pretrained()"),rut.forEach(t),tyo=r(Zoe," class method or the "),MG=n(Zoe,"A",{href:!0});var tut=s(MG);ayo=r(tut,"from_config()"),tut.forEach(t),nyo=r(Zoe,` class
method.`),Zoe.forEach(t),syo=i(ol),AL=n(ol,"P",{});var dze=s(AL);lyo=r(dze,"This class cannot be instantiated directly using "),yme=n(dze,"CODE",{});var aut=s(yme);iyo=r(aut,"__init__()"),aut.forEach(t),dyo=r(dze," (throws an error)."),dze.forEach(t),cyo=i(ol),lt=n(ol,"DIV",{class:!0});var Hw=s(lt);T(LL.$$.fragment,Hw),fyo=i(Hw),xme=n(Hw,"P",{});var nut=s(xme);myo=r(nut,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),nut.forEach(t),gyo=i(Hw),zi=n(Hw,"P",{});var ere=s(zi);hyo=r(ere,`Note:
Loading a model from its configuration file does `),$me=n(ere,"STRONG",{});var sut=s($me);pyo=r(sut,"not"),sut.forEach(t),_yo=r(ere,` load the model weights. It only affects the
model\u2019s configuration. Use `),EG=n(ere,"A",{href:!0});var lut=s(EG);uyo=r(lut,"from_pretrained()"),lut.forEach(t),byo=r(ere," to load the model weights."),ere.forEach(t),vyo=i(Hw),T(S7.$$.fragment,Hw),Hw.forEach(t),Fyo=i(ol),Ke=n(ol,"DIV",{class:!0});var sa=s(Ke);T(yL.$$.fragment,sa),Tyo=i(sa),kme=n(sa,"P",{});var iut=s(kme);Myo=r(iut,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),iut.forEach(t),Eyo=i(sa),Ba=n(sa,"P",{});var Uw=s(Ba);Cyo=r(Uw,"The model class to instantiate is selected based on the "),Sme=n(Uw,"CODE",{});var dut=s(Sme);wyo=r(dut,"model_type"),dut.forEach(t),Ayo=r(Uw,` property of the config object (either
passed as an argument or loaded from `),Rme=n(Uw,"CODE",{});var cut=s(Rme);Lyo=r(cut,"pretrained_model_name_or_path"),cut.forEach(t),yyo=r(Uw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pme=n(Uw,"CODE",{});var fut=s(Pme);xyo=r(fut,"pretrained_model_name_or_path"),fut.forEach(t),$yo=r(Uw,":"),Uw.forEach(t),kyo=i(sa),z=n(sa,"UL",{});var Q=s(z);R7=n(Q,"LI",{});var P$e=s(R7);Bme=n(P$e,"STRONG",{});var mut=s(Bme);Syo=r(mut,"bart"),mut.forEach(t),Ryo=r(P$e," \u2014 "),CG=n(P$e,"A",{href:!0});var gut=s(CG);Pyo=r(gut,"BartForCausalLM"),gut.forEach(t),Byo=r(P$e," (BART model)"),P$e.forEach(t),Iyo=i(Q),P7=n(Q,"LI",{});var B$e=s(P7);Ime=n(B$e,"STRONG",{});var hut=s(Ime);Nyo=r(hut,"bert"),hut.forEach(t),qyo=r(B$e," \u2014 "),wG=n(B$e,"A",{href:!0});var put=s(wG);jyo=r(put,"BertLMHeadModel"),put.forEach(t),Dyo=r(B$e," (BERT model)"),B$e.forEach(t),Gyo=i(Q),B7=n(Q,"LI",{});var I$e=s(B7);Nme=n(I$e,"STRONG",{});var _ut=s(Nme);Oyo=r(_ut,"bert-generation"),_ut.forEach(t),Vyo=r(I$e," \u2014 "),AG=n(I$e,"A",{href:!0});var uut=s(AG);Xyo=r(uut,"BertGenerationDecoder"),uut.forEach(t),zyo=r(I$e," (Bert Generation model)"),I$e.forEach(t),Qyo=i(Q),I7=n(Q,"LI",{});var N$e=s(I7);qme=n(N$e,"STRONG",{});var but=s(qme);Wyo=r(but,"big_bird"),but.forEach(t),Hyo=r(N$e," \u2014 "),LG=n(N$e,"A",{href:!0});var vut=s(LG);Uyo=r(vut,"BigBirdForCausalLM"),vut.forEach(t),Jyo=r(N$e," (BigBird model)"),N$e.forEach(t),Yyo=i(Q),N7=n(Q,"LI",{});var q$e=s(N7);jme=n(q$e,"STRONG",{});var Fut=s(jme);Kyo=r(Fut,"bigbird_pegasus"),Fut.forEach(t),Zyo=r(q$e," \u2014 "),yG=n(q$e,"A",{href:!0});var Tut=s(yG);e9o=r(Tut,"BigBirdPegasusForCausalLM"),Tut.forEach(t),o9o=r(q$e," (BigBird-Pegasus model)"),q$e.forEach(t),r9o=i(Q),q7=n(Q,"LI",{});var j$e=s(q7);Dme=n(j$e,"STRONG",{});var Mut=s(Dme);t9o=r(Mut,"blenderbot"),Mut.forEach(t),a9o=r(j$e," \u2014 "),xG=n(j$e,"A",{href:!0});var Eut=s(xG);n9o=r(Eut,"BlenderbotForCausalLM"),Eut.forEach(t),s9o=r(j$e," (Blenderbot model)"),j$e.forEach(t),l9o=i(Q),j7=n(Q,"LI",{});var D$e=s(j7);Gme=n(D$e,"STRONG",{});var Cut=s(Gme);i9o=r(Cut,"blenderbot-small"),Cut.forEach(t),d9o=r(D$e," \u2014 "),$G=n(D$e,"A",{href:!0});var wut=s($G);c9o=r(wut,"BlenderbotSmallForCausalLM"),wut.forEach(t),f9o=r(D$e," (BlenderbotSmall model)"),D$e.forEach(t),m9o=i(Q),D7=n(Q,"LI",{});var G$e=s(D7);Ome=n(G$e,"STRONG",{});var Aut=s(Ome);g9o=r(Aut,"bloom"),Aut.forEach(t),h9o=r(G$e," \u2014 "),kG=n(G$e,"A",{href:!0});var Lut=s(kG);p9o=r(Lut,"BloomForCausalLM"),Lut.forEach(t),_9o=r(G$e," (BLOOM model)"),G$e.forEach(t),u9o=i(Q),G7=n(Q,"LI",{});var O$e=s(G7);Vme=n(O$e,"STRONG",{});var yut=s(Vme);b9o=r(yut,"camembert"),yut.forEach(t),v9o=r(O$e," \u2014 "),SG=n(O$e,"A",{href:!0});var xut=s(SG);F9o=r(xut,"CamembertForCausalLM"),xut.forEach(t),T9o=r(O$e," (CamemBERT model)"),O$e.forEach(t),M9o=i(Q),O7=n(Q,"LI",{});var V$e=s(O7);Xme=n(V$e,"STRONG",{});var $ut=s(Xme);E9o=r($ut,"codegen"),$ut.forEach(t),C9o=r(V$e," \u2014 "),RG=n(V$e,"A",{href:!0});var kut=s(RG);w9o=r(kut,"CodeGenForCausalLM"),kut.forEach(t),A9o=r(V$e," (CodeGen model)"),V$e.forEach(t),L9o=i(Q),V7=n(Q,"LI",{});var X$e=s(V7);zme=n(X$e,"STRONG",{});var Sut=s(zme);y9o=r(Sut,"ctrl"),Sut.forEach(t),x9o=r(X$e," \u2014 "),PG=n(X$e,"A",{href:!0});var Rut=s(PG);$9o=r(Rut,"CTRLLMHeadModel"),Rut.forEach(t),k9o=r(X$e," (CTRL model)"),X$e.forEach(t),S9o=i(Q),X7=n(Q,"LI",{});var z$e=s(X7);Qme=n(z$e,"STRONG",{});var Put=s(Qme);R9o=r(Put,"data2vec-text"),Put.forEach(t),P9o=r(z$e," \u2014 "),BG=n(z$e,"A",{href:!0});var But=s(BG);B9o=r(But,"Data2VecTextForCausalLM"),But.forEach(t),I9o=r(z$e," (Data2VecText model)"),z$e.forEach(t),N9o=i(Q),z7=n(Q,"LI",{});var Q$e=s(z7);Wme=n(Q$e,"STRONG",{});var Iut=s(Wme);q9o=r(Iut,"electra"),Iut.forEach(t),j9o=r(Q$e," \u2014 "),IG=n(Q$e,"A",{href:!0});var Nut=s(IG);D9o=r(Nut,"ElectraForCausalLM"),Nut.forEach(t),G9o=r(Q$e," (ELECTRA model)"),Q$e.forEach(t),O9o=i(Q),Q7=n(Q,"LI",{});var W$e=s(Q7);Hme=n(W$e,"STRONG",{});var qut=s(Hme);V9o=r(qut,"gpt2"),qut.forEach(t),X9o=r(W$e," \u2014 "),NG=n(W$e,"A",{href:!0});var jut=s(NG);z9o=r(jut,"GPT2LMHeadModel"),jut.forEach(t),Q9o=r(W$e," (OpenAI GPT-2 model)"),W$e.forEach(t),W9o=i(Q),W7=n(Q,"LI",{});var H$e=s(W7);Ume=n(H$e,"STRONG",{});var Dut=s(Ume);H9o=r(Dut,"gpt_neo"),Dut.forEach(t),U9o=r(H$e," \u2014 "),qG=n(H$e,"A",{href:!0});var Gut=s(qG);J9o=r(Gut,"GPTNeoForCausalLM"),Gut.forEach(t),Y9o=r(H$e," (GPT Neo model)"),H$e.forEach(t),K9o=i(Q),H7=n(Q,"LI",{});var U$e=s(H7);Jme=n(U$e,"STRONG",{});var Out=s(Jme);Z9o=r(Out,"gpt_neox"),Out.forEach(t),exo=r(U$e," \u2014 "),jG=n(U$e,"A",{href:!0});var Vut=s(jG);oxo=r(Vut,"GPTNeoXForCausalLM"),Vut.forEach(t),rxo=r(U$e," (GPT NeoX model)"),U$e.forEach(t),txo=i(Q),U7=n(Q,"LI",{});var J$e=s(U7);Yme=n(J$e,"STRONG",{});var Xut=s(Yme);axo=r(Xut,"gptj"),Xut.forEach(t),nxo=r(J$e," \u2014 "),DG=n(J$e,"A",{href:!0});var zut=s(DG);sxo=r(zut,"GPTJForCausalLM"),zut.forEach(t),lxo=r(J$e," (GPT-J model)"),J$e.forEach(t),ixo=i(Q),J7=n(Q,"LI",{});var Y$e=s(J7);Kme=n(Y$e,"STRONG",{});var Qut=s(Kme);dxo=r(Qut,"marian"),Qut.forEach(t),cxo=r(Y$e," \u2014 "),GG=n(Y$e,"A",{href:!0});var Wut=s(GG);fxo=r(Wut,"MarianForCausalLM"),Wut.forEach(t),mxo=r(Y$e," (Marian model)"),Y$e.forEach(t),gxo=i(Q),Y7=n(Q,"LI",{});var K$e=s(Y7);Zme=n(K$e,"STRONG",{});var Hut=s(Zme);hxo=r(Hut,"mbart"),Hut.forEach(t),pxo=r(K$e," \u2014 "),OG=n(K$e,"A",{href:!0});var Uut=s(OG);_xo=r(Uut,"MBartForCausalLM"),Uut.forEach(t),uxo=r(K$e," (mBART model)"),K$e.forEach(t),bxo=i(Q),K7=n(Q,"LI",{});var Z$e=s(K7);ege=n(Z$e,"STRONG",{});var Jut=s(ege);vxo=r(Jut,"megatron-bert"),Jut.forEach(t),Fxo=r(Z$e," \u2014 "),VG=n(Z$e,"A",{href:!0});var Yut=s(VG);Txo=r(Yut,"MegatronBertForCausalLM"),Yut.forEach(t),Mxo=r(Z$e," (Megatron-BERT model)"),Z$e.forEach(t),Exo=i(Q),Z7=n(Q,"LI",{});var eke=s(Z7);oge=n(eke,"STRONG",{});var Kut=s(oge);Cxo=r(Kut,"mvp"),Kut.forEach(t),wxo=r(eke," \u2014 "),XG=n(eke,"A",{href:!0});var Zut=s(XG);Axo=r(Zut,"MvpForCausalLM"),Zut.forEach(t),Lxo=r(eke," (MVP model)"),eke.forEach(t),yxo=i(Q),e1=n(Q,"LI",{});var oke=s(e1);rge=n(oke,"STRONG",{});var e7t=s(rge);xxo=r(e7t,"openai-gpt"),e7t.forEach(t),$xo=r(oke," \u2014 "),zG=n(oke,"A",{href:!0});var o7t=s(zG);kxo=r(o7t,"OpenAIGPTLMHeadModel"),o7t.forEach(t),Sxo=r(oke," (OpenAI GPT model)"),oke.forEach(t),Rxo=i(Q),o1=n(Q,"LI",{});var rke=s(o1);tge=n(rke,"STRONG",{});var r7t=s(tge);Pxo=r(r7t,"opt"),r7t.forEach(t),Bxo=r(rke," \u2014 "),QG=n(rke,"A",{href:!0});var t7t=s(QG);Ixo=r(t7t,"OPTForCausalLM"),t7t.forEach(t),Nxo=r(rke," (OPT model)"),rke.forEach(t),qxo=i(Q),r1=n(Q,"LI",{});var tke=s(r1);age=n(tke,"STRONG",{});var a7t=s(age);jxo=r(a7t,"pegasus"),a7t.forEach(t),Dxo=r(tke," \u2014 "),WG=n(tke,"A",{href:!0});var n7t=s(WG);Gxo=r(n7t,"PegasusForCausalLM"),n7t.forEach(t),Oxo=r(tke," (Pegasus model)"),tke.forEach(t),Vxo=i(Q),t1=n(Q,"LI",{});var ake=s(t1);nge=n(ake,"STRONG",{});var s7t=s(nge);Xxo=r(s7t,"plbart"),s7t.forEach(t),zxo=r(ake," \u2014 "),HG=n(ake,"A",{href:!0});var l7t=s(HG);Qxo=r(l7t,"PLBartForCausalLM"),l7t.forEach(t),Wxo=r(ake," (PLBart model)"),ake.forEach(t),Hxo=i(Q),a1=n(Q,"LI",{});var nke=s(a1);sge=n(nke,"STRONG",{});var i7t=s(sge);Uxo=r(i7t,"prophetnet"),i7t.forEach(t),Jxo=r(nke," \u2014 "),UG=n(nke,"A",{href:!0});var d7t=s(UG);Yxo=r(d7t,"ProphetNetForCausalLM"),d7t.forEach(t),Kxo=r(nke," (ProphetNet model)"),nke.forEach(t),Zxo=i(Q),n1=n(Q,"LI",{});var ske=s(n1);lge=n(ske,"STRONG",{});var c7t=s(lge);e$o=r(c7t,"qdqbert"),c7t.forEach(t),o$o=r(ske," \u2014 "),JG=n(ske,"A",{href:!0});var f7t=s(JG);r$o=r(f7t,"QDQBertLMHeadModel"),f7t.forEach(t),t$o=r(ske," (QDQBert model)"),ske.forEach(t),a$o=i(Q),s1=n(Q,"LI",{});var lke=s(s1);ige=n(lke,"STRONG",{});var m7t=s(ige);n$o=r(m7t,"reformer"),m7t.forEach(t),s$o=r(lke," \u2014 "),YG=n(lke,"A",{href:!0});var g7t=s(YG);l$o=r(g7t,"ReformerModelWithLMHead"),g7t.forEach(t),i$o=r(lke," (Reformer model)"),lke.forEach(t),d$o=i(Q),l1=n(Q,"LI",{});var ike=s(l1);dge=n(ike,"STRONG",{});var h7t=s(dge);c$o=r(h7t,"rembert"),h7t.forEach(t),f$o=r(ike," \u2014 "),KG=n(ike,"A",{href:!0});var p7t=s(KG);m$o=r(p7t,"RemBertForCausalLM"),p7t.forEach(t),g$o=r(ike," (RemBERT model)"),ike.forEach(t),h$o=i(Q),i1=n(Q,"LI",{});var dke=s(i1);cge=n(dke,"STRONG",{});var _7t=s(cge);p$o=r(_7t,"roberta"),_7t.forEach(t),_$o=r(dke," \u2014 "),ZG=n(dke,"A",{href:!0});var u7t=s(ZG);u$o=r(u7t,"RobertaForCausalLM"),u7t.forEach(t),b$o=r(dke," (RoBERTa model)"),dke.forEach(t),v$o=i(Q),d1=n(Q,"LI",{});var cke=s(d1);fge=n(cke,"STRONG",{});var b7t=s(fge);F$o=r(b7t,"roformer"),b7t.forEach(t),T$o=r(cke," \u2014 "),eO=n(cke,"A",{href:!0});var v7t=s(eO);M$o=r(v7t,"RoFormerForCausalLM"),v7t.forEach(t),E$o=r(cke," (RoFormer model)"),cke.forEach(t),C$o=i(Q),c1=n(Q,"LI",{});var fke=s(c1);mge=n(fke,"STRONG",{});var F7t=s(mge);w$o=r(F7t,"speech_to_text_2"),F7t.forEach(t),A$o=r(fke," \u2014 "),oO=n(fke,"A",{href:!0});var T7t=s(oO);L$o=r(T7t,"Speech2Text2ForCausalLM"),T7t.forEach(t),y$o=r(fke," (Speech2Text2 model)"),fke.forEach(t),x$o=i(Q),f1=n(Q,"LI",{});var mke=s(f1);gge=n(mke,"STRONG",{});var M7t=s(gge);$$o=r(M7t,"transfo-xl"),M7t.forEach(t),k$o=r(mke," \u2014 "),rO=n(mke,"A",{href:!0});var E7t=s(rO);S$o=r(E7t,"TransfoXLLMHeadModel"),E7t.forEach(t),R$o=r(mke," (Transformer-XL model)"),mke.forEach(t),P$o=i(Q),m1=n(Q,"LI",{});var gke=s(m1);hge=n(gke,"STRONG",{});var C7t=s(hge);B$o=r(C7t,"trocr"),C7t.forEach(t),I$o=r(gke," \u2014 "),tO=n(gke,"A",{href:!0});var w7t=s(tO);N$o=r(w7t,"TrOCRForCausalLM"),w7t.forEach(t),q$o=r(gke," (TrOCR model)"),gke.forEach(t),j$o=i(Q),g1=n(Q,"LI",{});var hke=s(g1);pge=n(hke,"STRONG",{});var A7t=s(pge);D$o=r(A7t,"xglm"),A7t.forEach(t),G$o=r(hke," \u2014 "),aO=n(hke,"A",{href:!0});var L7t=s(aO);O$o=r(L7t,"XGLMForCausalLM"),L7t.forEach(t),V$o=r(hke," (XGLM model)"),hke.forEach(t),X$o=i(Q),h1=n(Q,"LI",{});var pke=s(h1);_ge=n(pke,"STRONG",{});var y7t=s(_ge);z$o=r(y7t,"xlm"),y7t.forEach(t),Q$o=r(pke," \u2014 "),nO=n(pke,"A",{href:!0});var x7t=s(nO);W$o=r(x7t,"XLMWithLMHeadModel"),x7t.forEach(t),H$o=r(pke," (XLM model)"),pke.forEach(t),U$o=i(Q),p1=n(Q,"LI",{});var _ke=s(p1);uge=n(_ke,"STRONG",{});var $7t=s(uge);J$o=r($7t,"xlm-prophetnet"),$7t.forEach(t),Y$o=r(_ke," \u2014 "),sO=n(_ke,"A",{href:!0});var k7t=s(sO);K$o=r(k7t,"XLMProphetNetForCausalLM"),k7t.forEach(t),Z$o=r(_ke," (XLM-ProphetNet model)"),_ke.forEach(t),eko=i(Q),_1=n(Q,"LI",{});var uke=s(_1);bge=n(uke,"STRONG",{});var S7t=s(bge);oko=r(S7t,"xlm-roberta"),S7t.forEach(t),rko=r(uke," \u2014 "),lO=n(uke,"A",{href:!0});var R7t=s(lO);tko=r(R7t,"XLMRobertaForCausalLM"),R7t.forEach(t),ako=r(uke," (XLM-RoBERTa model)"),uke.forEach(t),nko=i(Q),u1=n(Q,"LI",{});var bke=s(u1);vge=n(bke,"STRONG",{});var P7t=s(vge);sko=r(P7t,"xlm-roberta-xl"),P7t.forEach(t),lko=r(bke," \u2014 "),iO=n(bke,"A",{href:!0});var B7t=s(iO);iko=r(B7t,"XLMRobertaXLForCausalLM"),B7t.forEach(t),dko=r(bke," (XLM-RoBERTa-XL model)"),bke.forEach(t),cko=i(Q),b1=n(Q,"LI",{});var vke=s(b1);Fge=n(vke,"STRONG",{});var I7t=s(Fge);fko=r(I7t,"xlnet"),I7t.forEach(t),mko=r(vke," \u2014 "),dO=n(vke,"A",{href:!0});var N7t=s(dO);gko=r(N7t,"XLNetLMHeadModel"),N7t.forEach(t),hko=r(vke," (XLNet model)"),vke.forEach(t),Q.forEach(t),pko=i(sa),v1=n(sa,"P",{});var Fke=s(v1);_ko=r(Fke,"The model is set in evaluation mode by default using "),Tge=n(Fke,"CODE",{});var q7t=s(Tge);uko=r(q7t,"model.eval()"),q7t.forEach(t),bko=r(Fke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mge=n(Fke,"CODE",{});var j7t=s(Mge);vko=r(j7t,"model.train()"),j7t.forEach(t),Fke.forEach(t),Fko=i(sa),T(F1.$$.fragment,sa),sa.forEach(t),ol.forEach(t),aVe=i(f),Qi=n(f,"H2",{class:!0});var cze=s(Qi);T1=n(cze,"A",{id:!0,class:!0,href:!0});var D7t=s(T1);Ege=n(D7t,"SPAN",{});var G7t=s(Ege);T(xL.$$.fragment,G7t),G7t.forEach(t),D7t.forEach(t),Tko=i(cze),Cge=n(cze,"SPAN",{});var O7t=s(Cge);Mko=r(O7t,"AutoModelForMaskedLM"),O7t.forEach(t),cze.forEach(t),nVe=i(f),So=n(f,"DIV",{class:!0});var rl=s(So);T($L.$$.fragment,rl),Eko=i(rl),Wi=n(rl,"P",{});var ore=s(Wi);Cko=r(ore,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),cO=n(ore,"A",{href:!0});var V7t=s(cO);wko=r(V7t,"from_pretrained()"),V7t.forEach(t),Ako=r(ore," class method or the "),fO=n(ore,"A",{href:!0});var X7t=s(fO);Lko=r(X7t,"from_config()"),X7t.forEach(t),yko=r(ore,` class
method.`),ore.forEach(t),xko=i(rl),kL=n(rl,"P",{});var fze=s(kL);$ko=r(fze,"This class cannot be instantiated directly using "),wge=n(fze,"CODE",{});var z7t=s(wge);kko=r(z7t,"__init__()"),z7t.forEach(t),Sko=r(fze," (throws an error)."),fze.forEach(t),Rko=i(rl),it=n(rl,"DIV",{class:!0});var Jw=s(it);T(SL.$$.fragment,Jw),Pko=i(Jw),Age=n(Jw,"P",{});var Q7t=s(Age);Bko=r(Q7t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Q7t.forEach(t),Iko=i(Jw),Hi=n(Jw,"P",{});var rre=s(Hi);Nko=r(rre,`Note:
Loading a model from its configuration file does `),Lge=n(rre,"STRONG",{});var W7t=s(Lge);qko=r(W7t,"not"),W7t.forEach(t),jko=r(rre,` load the model weights. It only affects the
model\u2019s configuration. Use `),mO=n(rre,"A",{href:!0});var H7t=s(mO);Dko=r(H7t,"from_pretrained()"),H7t.forEach(t),Gko=r(rre," to load the model weights."),rre.forEach(t),Oko=i(Jw),T(M1.$$.fragment,Jw),Jw.forEach(t),Vko=i(rl),Ze=n(rl,"DIV",{class:!0});var la=s(Ze);T(RL.$$.fragment,la),Xko=i(la),yge=n(la,"P",{});var U7t=s(yge);zko=r(U7t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),U7t.forEach(t),Qko=i(la),Ia=n(la,"P",{});var Yw=s(Ia);Wko=r(Yw,"The model class to instantiate is selected based on the "),xge=n(Yw,"CODE",{});var J7t=s(xge);Hko=r(J7t,"model_type"),J7t.forEach(t),Uko=r(Yw,` property of the config object (either
passed as an argument or loaded from `),$ge=n(Yw,"CODE",{});var Y7t=s($ge);Jko=r(Y7t,"pretrained_model_name_or_path"),Y7t.forEach(t),Yko=r(Yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kge=n(Yw,"CODE",{});var K7t=s(kge);Kko=r(K7t,"pretrained_model_name_or_path"),K7t.forEach(t),Zko=r(Yw,":"),Yw.forEach(t),eSo=i(la),W=n(la,"UL",{});var H=s(W);E1=n(H,"LI",{});var Tke=s(E1);Sge=n(Tke,"STRONG",{});var Z7t=s(Sge);oSo=r(Z7t,"albert"),Z7t.forEach(t),rSo=r(Tke," \u2014 "),gO=n(Tke,"A",{href:!0});var e1t=s(gO);tSo=r(e1t,"AlbertForMaskedLM"),e1t.forEach(t),aSo=r(Tke," (ALBERT model)"),Tke.forEach(t),nSo=i(H),C1=n(H,"LI",{});var Mke=s(C1);Rge=n(Mke,"STRONG",{});var o1t=s(Rge);sSo=r(o1t,"bart"),o1t.forEach(t),lSo=r(Mke," \u2014 "),hO=n(Mke,"A",{href:!0});var r1t=s(hO);iSo=r(r1t,"BartForConditionalGeneration"),r1t.forEach(t),dSo=r(Mke," (BART model)"),Mke.forEach(t),cSo=i(H),w1=n(H,"LI",{});var Eke=s(w1);Pge=n(Eke,"STRONG",{});var t1t=s(Pge);fSo=r(t1t,"bert"),t1t.forEach(t),mSo=r(Eke," \u2014 "),pO=n(Eke,"A",{href:!0});var a1t=s(pO);gSo=r(a1t,"BertForMaskedLM"),a1t.forEach(t),hSo=r(Eke," (BERT model)"),Eke.forEach(t),pSo=i(H),A1=n(H,"LI",{});var Cke=s(A1);Bge=n(Cke,"STRONG",{});var n1t=s(Bge);_So=r(n1t,"big_bird"),n1t.forEach(t),uSo=r(Cke," \u2014 "),_O=n(Cke,"A",{href:!0});var s1t=s(_O);bSo=r(s1t,"BigBirdForMaskedLM"),s1t.forEach(t),vSo=r(Cke," (BigBird model)"),Cke.forEach(t),FSo=i(H),L1=n(H,"LI",{});var wke=s(L1);Ige=n(wke,"STRONG",{});var l1t=s(Ige);TSo=r(l1t,"camembert"),l1t.forEach(t),MSo=r(wke," \u2014 "),uO=n(wke,"A",{href:!0});var i1t=s(uO);ESo=r(i1t,"CamembertForMaskedLM"),i1t.forEach(t),CSo=r(wke," (CamemBERT model)"),wke.forEach(t),wSo=i(H),y1=n(H,"LI",{});var Ake=s(y1);Nge=n(Ake,"STRONG",{});var d1t=s(Nge);ASo=r(d1t,"convbert"),d1t.forEach(t),LSo=r(Ake," \u2014 "),bO=n(Ake,"A",{href:!0});var c1t=s(bO);ySo=r(c1t,"ConvBertForMaskedLM"),c1t.forEach(t),xSo=r(Ake," (ConvBERT model)"),Ake.forEach(t),$So=i(H),x1=n(H,"LI",{});var Lke=s(x1);qge=n(Lke,"STRONG",{});var f1t=s(qge);kSo=r(f1t,"data2vec-text"),f1t.forEach(t),SSo=r(Lke," \u2014 "),vO=n(Lke,"A",{href:!0});var m1t=s(vO);RSo=r(m1t,"Data2VecTextForMaskedLM"),m1t.forEach(t),PSo=r(Lke," (Data2VecText model)"),Lke.forEach(t),BSo=i(H),$1=n(H,"LI",{});var yke=s($1);jge=n(yke,"STRONG",{});var g1t=s(jge);ISo=r(g1t,"deberta"),g1t.forEach(t),NSo=r(yke," \u2014 "),FO=n(yke,"A",{href:!0});var h1t=s(FO);qSo=r(h1t,"DebertaForMaskedLM"),h1t.forEach(t),jSo=r(yke," (DeBERTa model)"),yke.forEach(t),DSo=i(H),k1=n(H,"LI",{});var xke=s(k1);Dge=n(xke,"STRONG",{});var p1t=s(Dge);GSo=r(p1t,"deberta-v2"),p1t.forEach(t),OSo=r(xke," \u2014 "),TO=n(xke,"A",{href:!0});var _1t=s(TO);VSo=r(_1t,"DebertaV2ForMaskedLM"),_1t.forEach(t),XSo=r(xke," (DeBERTa-v2 model)"),xke.forEach(t),zSo=i(H),S1=n(H,"LI",{});var $ke=s(S1);Gge=n($ke,"STRONG",{});var u1t=s(Gge);QSo=r(u1t,"distilbert"),u1t.forEach(t),WSo=r($ke," \u2014 "),MO=n($ke,"A",{href:!0});var b1t=s(MO);HSo=r(b1t,"DistilBertForMaskedLM"),b1t.forEach(t),USo=r($ke," (DistilBERT model)"),$ke.forEach(t),JSo=i(H),R1=n(H,"LI",{});var kke=s(R1);Oge=n(kke,"STRONG",{});var v1t=s(Oge);YSo=r(v1t,"electra"),v1t.forEach(t),KSo=r(kke," \u2014 "),EO=n(kke,"A",{href:!0});var F1t=s(EO);ZSo=r(F1t,"ElectraForMaskedLM"),F1t.forEach(t),eRo=r(kke," (ELECTRA model)"),kke.forEach(t),oRo=i(H),P1=n(H,"LI",{});var Ske=s(P1);Vge=n(Ske,"STRONG",{});var T1t=s(Vge);rRo=r(T1t,"flaubert"),T1t.forEach(t),tRo=r(Ske," \u2014 "),CO=n(Ske,"A",{href:!0});var M1t=s(CO);aRo=r(M1t,"FlaubertWithLMHeadModel"),M1t.forEach(t),nRo=r(Ske," (FlauBERT model)"),Ske.forEach(t),sRo=i(H),B1=n(H,"LI",{});var Rke=s(B1);Xge=n(Rke,"STRONG",{});var E1t=s(Xge);lRo=r(E1t,"fnet"),E1t.forEach(t),iRo=r(Rke," \u2014 "),wO=n(Rke,"A",{href:!0});var C1t=s(wO);dRo=r(C1t,"FNetForMaskedLM"),C1t.forEach(t),cRo=r(Rke," (FNet model)"),Rke.forEach(t),fRo=i(H),I1=n(H,"LI",{});var Pke=s(I1);zge=n(Pke,"STRONG",{});var w1t=s(zge);mRo=r(w1t,"funnel"),w1t.forEach(t),gRo=r(Pke," \u2014 "),AO=n(Pke,"A",{href:!0});var A1t=s(AO);hRo=r(A1t,"FunnelForMaskedLM"),A1t.forEach(t),pRo=r(Pke," (Funnel Transformer model)"),Pke.forEach(t),_Ro=i(H),N1=n(H,"LI",{});var Bke=s(N1);Qge=n(Bke,"STRONG",{});var L1t=s(Qge);uRo=r(L1t,"ibert"),L1t.forEach(t),bRo=r(Bke," \u2014 "),LO=n(Bke,"A",{href:!0});var y1t=s(LO);vRo=r(y1t,"IBertForMaskedLM"),y1t.forEach(t),FRo=r(Bke," (I-BERT model)"),Bke.forEach(t),TRo=i(H),q1=n(H,"LI",{});var Ike=s(q1);Wge=n(Ike,"STRONG",{});var x1t=s(Wge);MRo=r(x1t,"layoutlm"),x1t.forEach(t),ERo=r(Ike," \u2014 "),yO=n(Ike,"A",{href:!0});var $1t=s(yO);CRo=r($1t,"LayoutLMForMaskedLM"),$1t.forEach(t),wRo=r(Ike," (LayoutLM model)"),Ike.forEach(t),ARo=i(H),j1=n(H,"LI",{});var Nke=s(j1);Hge=n(Nke,"STRONG",{});var k1t=s(Hge);LRo=r(k1t,"longformer"),k1t.forEach(t),yRo=r(Nke," \u2014 "),xO=n(Nke,"A",{href:!0});var S1t=s(xO);xRo=r(S1t,"LongformerForMaskedLM"),S1t.forEach(t),$Ro=r(Nke," (Longformer model)"),Nke.forEach(t),kRo=i(H),D1=n(H,"LI",{});var qke=s(D1);Uge=n(qke,"STRONG",{});var R1t=s(Uge);SRo=r(R1t,"luke"),R1t.forEach(t),RRo=r(qke," \u2014 "),$O=n(qke,"A",{href:!0});var P1t=s($O);PRo=r(P1t,"LukeForMaskedLM"),P1t.forEach(t),BRo=r(qke," (LUKE model)"),qke.forEach(t),IRo=i(H),G1=n(H,"LI",{});var jke=s(G1);Jge=n(jke,"STRONG",{});var B1t=s(Jge);NRo=r(B1t,"mbart"),B1t.forEach(t),qRo=r(jke," \u2014 "),kO=n(jke,"A",{href:!0});var I1t=s(kO);jRo=r(I1t,"MBartForConditionalGeneration"),I1t.forEach(t),DRo=r(jke," (mBART model)"),jke.forEach(t),GRo=i(H),O1=n(H,"LI",{});var Dke=s(O1);Yge=n(Dke,"STRONG",{});var N1t=s(Yge);ORo=r(N1t,"megatron-bert"),N1t.forEach(t),VRo=r(Dke," \u2014 "),SO=n(Dke,"A",{href:!0});var q1t=s(SO);XRo=r(q1t,"MegatronBertForMaskedLM"),q1t.forEach(t),zRo=r(Dke," (Megatron-BERT model)"),Dke.forEach(t),QRo=i(H),V1=n(H,"LI",{});var Gke=s(V1);Kge=n(Gke,"STRONG",{});var j1t=s(Kge);WRo=r(j1t,"mobilebert"),j1t.forEach(t),HRo=r(Gke," \u2014 "),RO=n(Gke,"A",{href:!0});var D1t=s(RO);URo=r(D1t,"MobileBertForMaskedLM"),D1t.forEach(t),JRo=r(Gke," (MobileBERT model)"),Gke.forEach(t),YRo=i(H),X1=n(H,"LI",{});var Oke=s(X1);Zge=n(Oke,"STRONG",{});var G1t=s(Zge);KRo=r(G1t,"mpnet"),G1t.forEach(t),ZRo=r(Oke," \u2014 "),PO=n(Oke,"A",{href:!0});var O1t=s(PO);ePo=r(O1t,"MPNetForMaskedLM"),O1t.forEach(t),oPo=r(Oke," (MPNet model)"),Oke.forEach(t),rPo=i(H),z1=n(H,"LI",{});var Vke=s(z1);ehe=n(Vke,"STRONG",{});var V1t=s(ehe);tPo=r(V1t,"mvp"),V1t.forEach(t),aPo=r(Vke," \u2014 "),BO=n(Vke,"A",{href:!0});var X1t=s(BO);nPo=r(X1t,"MvpForConditionalGeneration"),X1t.forEach(t),sPo=r(Vke," (MVP model)"),Vke.forEach(t),lPo=i(H),Q1=n(H,"LI",{});var Xke=s(Q1);ohe=n(Xke,"STRONG",{});var z1t=s(ohe);iPo=r(z1t,"nezha"),z1t.forEach(t),dPo=r(Xke," \u2014 "),IO=n(Xke,"A",{href:!0});var Q1t=s(IO);cPo=r(Q1t,"NezhaForMaskedLM"),Q1t.forEach(t),fPo=r(Xke," (Nezha model)"),Xke.forEach(t),mPo=i(H),W1=n(H,"LI",{});var zke=s(W1);rhe=n(zke,"STRONG",{});var W1t=s(rhe);gPo=r(W1t,"nystromformer"),W1t.forEach(t),hPo=r(zke," \u2014 "),NO=n(zke,"A",{href:!0});var H1t=s(NO);pPo=r(H1t,"NystromformerForMaskedLM"),H1t.forEach(t),_Po=r(zke," (Nystr\xF6mformer model)"),zke.forEach(t),uPo=i(H),H1=n(H,"LI",{});var Qke=s(H1);the=n(Qke,"STRONG",{});var U1t=s(the);bPo=r(U1t,"perceiver"),U1t.forEach(t),vPo=r(Qke," \u2014 "),qO=n(Qke,"A",{href:!0});var J1t=s(qO);FPo=r(J1t,"PerceiverForMaskedLM"),J1t.forEach(t),TPo=r(Qke," (Perceiver model)"),Qke.forEach(t),MPo=i(H),U1=n(H,"LI",{});var Wke=s(U1);ahe=n(Wke,"STRONG",{});var Y1t=s(ahe);EPo=r(Y1t,"qdqbert"),Y1t.forEach(t),CPo=r(Wke," \u2014 "),jO=n(Wke,"A",{href:!0});var K1t=s(jO);wPo=r(K1t,"QDQBertForMaskedLM"),K1t.forEach(t),APo=r(Wke," (QDQBert model)"),Wke.forEach(t),LPo=i(H),J1=n(H,"LI",{});var Hke=s(J1);nhe=n(Hke,"STRONG",{});var Z1t=s(nhe);yPo=r(Z1t,"reformer"),Z1t.forEach(t),xPo=r(Hke," \u2014 "),DO=n(Hke,"A",{href:!0});var e2t=s(DO);$Po=r(e2t,"ReformerForMaskedLM"),e2t.forEach(t),kPo=r(Hke," (Reformer model)"),Hke.forEach(t),SPo=i(H),Y1=n(H,"LI",{});var Uke=s(Y1);she=n(Uke,"STRONG",{});var o2t=s(she);RPo=r(o2t,"rembert"),o2t.forEach(t),PPo=r(Uke," \u2014 "),GO=n(Uke,"A",{href:!0});var r2t=s(GO);BPo=r(r2t,"RemBertForMaskedLM"),r2t.forEach(t),IPo=r(Uke," (RemBERT model)"),Uke.forEach(t),NPo=i(H),K1=n(H,"LI",{});var Jke=s(K1);lhe=n(Jke,"STRONG",{});var t2t=s(lhe);qPo=r(t2t,"roberta"),t2t.forEach(t),jPo=r(Jke," \u2014 "),OO=n(Jke,"A",{href:!0});var a2t=s(OO);DPo=r(a2t,"RobertaForMaskedLM"),a2t.forEach(t),GPo=r(Jke," (RoBERTa model)"),Jke.forEach(t),OPo=i(H),Z1=n(H,"LI",{});var Yke=s(Z1);ihe=n(Yke,"STRONG",{});var n2t=s(ihe);VPo=r(n2t,"roformer"),n2t.forEach(t),XPo=r(Yke," \u2014 "),VO=n(Yke,"A",{href:!0});var s2t=s(VO);zPo=r(s2t,"RoFormerForMaskedLM"),s2t.forEach(t),QPo=r(Yke," (RoFormer model)"),Yke.forEach(t),WPo=i(H),e2=n(H,"LI",{});var Kke=s(e2);dhe=n(Kke,"STRONG",{});var l2t=s(dhe);HPo=r(l2t,"squeezebert"),l2t.forEach(t),UPo=r(Kke," \u2014 "),XO=n(Kke,"A",{href:!0});var i2t=s(XO);JPo=r(i2t,"SqueezeBertForMaskedLM"),i2t.forEach(t),YPo=r(Kke," (SqueezeBERT model)"),Kke.forEach(t),KPo=i(H),o2=n(H,"LI",{});var Zke=s(o2);che=n(Zke,"STRONG",{});var d2t=s(che);ZPo=r(d2t,"tapas"),d2t.forEach(t),eBo=r(Zke," \u2014 "),zO=n(Zke,"A",{href:!0});var c2t=s(zO);oBo=r(c2t,"TapasForMaskedLM"),c2t.forEach(t),rBo=r(Zke," (TAPAS model)"),Zke.forEach(t),tBo=i(H),r2=n(H,"LI",{});var eSe=s(r2);fhe=n(eSe,"STRONG",{});var f2t=s(fhe);aBo=r(f2t,"wav2vec2"),f2t.forEach(t),nBo=r(eSe," \u2014 "),mhe=n(eSe,"CODE",{});var m2t=s(mhe);sBo=r(m2t,"Wav2Vec2ForMaskedLM"),m2t.forEach(t),lBo=r(eSe," (Wav2Vec2 model)"),eSe.forEach(t),iBo=i(H),t2=n(H,"LI",{});var oSe=s(t2);ghe=n(oSe,"STRONG",{});var g2t=s(ghe);dBo=r(g2t,"xlm"),g2t.forEach(t),cBo=r(oSe," \u2014 "),QO=n(oSe,"A",{href:!0});var h2t=s(QO);fBo=r(h2t,"XLMWithLMHeadModel"),h2t.forEach(t),mBo=r(oSe," (XLM model)"),oSe.forEach(t),gBo=i(H),a2=n(H,"LI",{});var rSe=s(a2);hhe=n(rSe,"STRONG",{});var p2t=s(hhe);hBo=r(p2t,"xlm-roberta"),p2t.forEach(t),pBo=r(rSe," \u2014 "),WO=n(rSe,"A",{href:!0});var _2t=s(WO);_Bo=r(_2t,"XLMRobertaForMaskedLM"),_2t.forEach(t),uBo=r(rSe," (XLM-RoBERTa model)"),rSe.forEach(t),bBo=i(H),n2=n(H,"LI",{});var tSe=s(n2);phe=n(tSe,"STRONG",{});var u2t=s(phe);vBo=r(u2t,"xlm-roberta-xl"),u2t.forEach(t),FBo=r(tSe," \u2014 "),HO=n(tSe,"A",{href:!0});var b2t=s(HO);TBo=r(b2t,"XLMRobertaXLForMaskedLM"),b2t.forEach(t),MBo=r(tSe," (XLM-RoBERTa-XL model)"),tSe.forEach(t),EBo=i(H),s2=n(H,"LI",{});var aSe=s(s2);_he=n(aSe,"STRONG",{});var v2t=s(_he);CBo=r(v2t,"yoso"),v2t.forEach(t),wBo=r(aSe," \u2014 "),UO=n(aSe,"A",{href:!0});var F2t=s(UO);ABo=r(F2t,"YosoForMaskedLM"),F2t.forEach(t),LBo=r(aSe," (YOSO model)"),aSe.forEach(t),H.forEach(t),yBo=i(la),l2=n(la,"P",{});var nSe=s(l2);xBo=r(nSe,"The model is set in evaluation mode by default using "),uhe=n(nSe,"CODE",{});var T2t=s(uhe);$Bo=r(T2t,"model.eval()"),T2t.forEach(t),kBo=r(nSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bhe=n(nSe,"CODE",{});var M2t=s(bhe);SBo=r(M2t,"model.train()"),M2t.forEach(t),nSe.forEach(t),RBo=i(la),T(i2.$$.fragment,la),la.forEach(t),rl.forEach(t),sVe=i(f),Ui=n(f,"H2",{class:!0});var mze=s(Ui);d2=n(mze,"A",{id:!0,class:!0,href:!0});var E2t=s(d2);vhe=n(E2t,"SPAN",{});var C2t=s(vhe);T(PL.$$.fragment,C2t),C2t.forEach(t),E2t.forEach(t),PBo=i(mze),Fhe=n(mze,"SPAN",{});var w2t=s(Fhe);BBo=r(w2t,"AutoModelForSeq2SeqLM"),w2t.forEach(t),mze.forEach(t),lVe=i(f),Ro=n(f,"DIV",{class:!0});var tl=s(Ro);T(BL.$$.fragment,tl),IBo=i(tl),Ji=n(tl,"P",{});var tre=s(Ji);NBo=r(tre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),JO=n(tre,"A",{href:!0});var A2t=s(JO);qBo=r(A2t,"from_pretrained()"),A2t.forEach(t),jBo=r(tre," class method or the "),YO=n(tre,"A",{href:!0});var L2t=s(YO);DBo=r(L2t,"from_config()"),L2t.forEach(t),GBo=r(tre,` class
method.`),tre.forEach(t),OBo=i(tl),IL=n(tl,"P",{});var gze=s(IL);VBo=r(gze,"This class cannot be instantiated directly using "),The=n(gze,"CODE",{});var y2t=s(The);XBo=r(y2t,"__init__()"),y2t.forEach(t),zBo=r(gze," (throws an error)."),gze.forEach(t),QBo=i(tl),dt=n(tl,"DIV",{class:!0});var Kw=s(dt);T(NL.$$.fragment,Kw),WBo=i(Kw),Mhe=n(Kw,"P",{});var x2t=s(Mhe);HBo=r(x2t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),x2t.forEach(t),UBo=i(Kw),Yi=n(Kw,"P",{});var are=s(Yi);JBo=r(are,`Note:
Loading a model from its configuration file does `),Ehe=n(are,"STRONG",{});var $2t=s(Ehe);YBo=r($2t,"not"),$2t.forEach(t),KBo=r(are,` load the model weights. It only affects the
model\u2019s configuration. Use `),KO=n(are,"A",{href:!0});var k2t=s(KO);ZBo=r(k2t,"from_pretrained()"),k2t.forEach(t),eIo=r(are," to load the model weights."),are.forEach(t),oIo=i(Kw),T(c2.$$.fragment,Kw),Kw.forEach(t),rIo=i(tl),eo=n(tl,"DIV",{class:!0});var ia=s(eo);T(qL.$$.fragment,ia),tIo=i(ia),Che=n(ia,"P",{});var S2t=s(Che);aIo=r(S2t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),S2t.forEach(t),nIo=i(ia),Na=n(ia,"P",{});var Zw=s(Na);sIo=r(Zw,"The model class to instantiate is selected based on the "),whe=n(Zw,"CODE",{});var R2t=s(whe);lIo=r(R2t,"model_type"),R2t.forEach(t),iIo=r(Zw,` property of the config object (either
passed as an argument or loaded from `),Ahe=n(Zw,"CODE",{});var P2t=s(Ahe);dIo=r(P2t,"pretrained_model_name_or_path"),P2t.forEach(t),cIo=r(Zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lhe=n(Zw,"CODE",{});var B2t=s(Lhe);fIo=r(B2t,"pretrained_model_name_or_path"),B2t.forEach(t),mIo=r(Zw,":"),Zw.forEach(t),gIo=i(ia),he=n(ia,"UL",{});var ue=s(he);f2=n(ue,"LI",{});var sSe=s(f2);yhe=n(sSe,"STRONG",{});var I2t=s(yhe);hIo=r(I2t,"bart"),I2t.forEach(t),pIo=r(sSe," \u2014 "),ZO=n(sSe,"A",{href:!0});var N2t=s(ZO);_Io=r(N2t,"BartForConditionalGeneration"),N2t.forEach(t),uIo=r(sSe," (BART model)"),sSe.forEach(t),bIo=i(ue),m2=n(ue,"LI",{});var lSe=s(m2);xhe=n(lSe,"STRONG",{});var q2t=s(xhe);vIo=r(q2t,"bigbird_pegasus"),q2t.forEach(t),FIo=r(lSe," \u2014 "),eV=n(lSe,"A",{href:!0});var j2t=s(eV);TIo=r(j2t,"BigBirdPegasusForConditionalGeneration"),j2t.forEach(t),MIo=r(lSe," (BigBird-Pegasus model)"),lSe.forEach(t),EIo=i(ue),g2=n(ue,"LI",{});var iSe=s(g2);$he=n(iSe,"STRONG",{});var D2t=s($he);CIo=r(D2t,"blenderbot"),D2t.forEach(t),wIo=r(iSe," \u2014 "),oV=n(iSe,"A",{href:!0});var G2t=s(oV);AIo=r(G2t,"BlenderbotForConditionalGeneration"),G2t.forEach(t),LIo=r(iSe," (Blenderbot model)"),iSe.forEach(t),yIo=i(ue),h2=n(ue,"LI",{});var dSe=s(h2);khe=n(dSe,"STRONG",{});var O2t=s(khe);xIo=r(O2t,"blenderbot-small"),O2t.forEach(t),$Io=r(dSe," \u2014 "),rV=n(dSe,"A",{href:!0});var V2t=s(rV);kIo=r(V2t,"BlenderbotSmallForConditionalGeneration"),V2t.forEach(t),SIo=r(dSe," (BlenderbotSmall model)"),dSe.forEach(t),RIo=i(ue),p2=n(ue,"LI",{});var cSe=s(p2);She=n(cSe,"STRONG",{});var X2t=s(She);PIo=r(X2t,"encoder-decoder"),X2t.forEach(t),BIo=r(cSe," \u2014 "),tV=n(cSe,"A",{href:!0});var z2t=s(tV);IIo=r(z2t,"EncoderDecoderModel"),z2t.forEach(t),NIo=r(cSe," (Encoder decoder model)"),cSe.forEach(t),qIo=i(ue),_2=n(ue,"LI",{});var fSe=s(_2);Rhe=n(fSe,"STRONG",{});var Q2t=s(Rhe);jIo=r(Q2t,"fsmt"),Q2t.forEach(t),DIo=r(fSe," \u2014 "),aV=n(fSe,"A",{href:!0});var W2t=s(aV);GIo=r(W2t,"FSMTForConditionalGeneration"),W2t.forEach(t),OIo=r(fSe," (FairSeq Machine-Translation model)"),fSe.forEach(t),VIo=i(ue),u2=n(ue,"LI",{});var mSe=s(u2);Phe=n(mSe,"STRONG",{});var H2t=s(Phe);XIo=r(H2t,"led"),H2t.forEach(t),zIo=r(mSe," \u2014 "),nV=n(mSe,"A",{href:!0});var U2t=s(nV);QIo=r(U2t,"LEDForConditionalGeneration"),U2t.forEach(t),WIo=r(mSe," (LED model)"),mSe.forEach(t),HIo=i(ue),b2=n(ue,"LI",{});var gSe=s(b2);Bhe=n(gSe,"STRONG",{});var J2t=s(Bhe);UIo=r(J2t,"longt5"),J2t.forEach(t),JIo=r(gSe," \u2014 "),sV=n(gSe,"A",{href:!0});var Y2t=s(sV);YIo=r(Y2t,"LongT5ForConditionalGeneration"),Y2t.forEach(t),KIo=r(gSe," (LongT5 model)"),gSe.forEach(t),ZIo=i(ue),v2=n(ue,"LI",{});var hSe=s(v2);Ihe=n(hSe,"STRONG",{});var K2t=s(Ihe);eNo=r(K2t,"m2m_100"),K2t.forEach(t),oNo=r(hSe," \u2014 "),lV=n(hSe,"A",{href:!0});var Z2t=s(lV);rNo=r(Z2t,"M2M100ForConditionalGeneration"),Z2t.forEach(t),tNo=r(hSe," (M2M100 model)"),hSe.forEach(t),aNo=i(ue),F2=n(ue,"LI",{});var pSe=s(F2);Nhe=n(pSe,"STRONG",{});var ebt=s(Nhe);nNo=r(ebt,"marian"),ebt.forEach(t),sNo=r(pSe," \u2014 "),iV=n(pSe,"A",{href:!0});var obt=s(iV);lNo=r(obt,"MarianMTModel"),obt.forEach(t),iNo=r(pSe," (Marian model)"),pSe.forEach(t),dNo=i(ue),T2=n(ue,"LI",{});var _Se=s(T2);qhe=n(_Se,"STRONG",{});var rbt=s(qhe);cNo=r(rbt,"mbart"),rbt.forEach(t),fNo=r(_Se," \u2014 "),dV=n(_Se,"A",{href:!0});var tbt=s(dV);mNo=r(tbt,"MBartForConditionalGeneration"),tbt.forEach(t),gNo=r(_Se," (mBART model)"),_Se.forEach(t),hNo=i(ue),M2=n(ue,"LI",{});var uSe=s(M2);jhe=n(uSe,"STRONG",{});var abt=s(jhe);pNo=r(abt,"mt5"),abt.forEach(t),_No=r(uSe," \u2014 "),cV=n(uSe,"A",{href:!0});var nbt=s(cV);uNo=r(nbt,"MT5ForConditionalGeneration"),nbt.forEach(t),bNo=r(uSe," (MT5 model)"),uSe.forEach(t),vNo=i(ue),E2=n(ue,"LI",{});var bSe=s(E2);Dhe=n(bSe,"STRONG",{});var sbt=s(Dhe);FNo=r(sbt,"mvp"),sbt.forEach(t),TNo=r(bSe," \u2014 "),fV=n(bSe,"A",{href:!0});var lbt=s(fV);MNo=r(lbt,"MvpForConditionalGeneration"),lbt.forEach(t),ENo=r(bSe," (MVP model)"),bSe.forEach(t),CNo=i(ue),C2=n(ue,"LI",{});var vSe=s(C2);Ghe=n(vSe,"STRONG",{});var ibt=s(Ghe);wNo=r(ibt,"pegasus"),ibt.forEach(t),ANo=r(vSe," \u2014 "),mV=n(vSe,"A",{href:!0});var dbt=s(mV);LNo=r(dbt,"PegasusForConditionalGeneration"),dbt.forEach(t),yNo=r(vSe," (Pegasus model)"),vSe.forEach(t),xNo=i(ue),w2=n(ue,"LI",{});var FSe=s(w2);Ohe=n(FSe,"STRONG",{});var cbt=s(Ohe);$No=r(cbt,"plbart"),cbt.forEach(t),kNo=r(FSe," \u2014 "),gV=n(FSe,"A",{href:!0});var fbt=s(gV);SNo=r(fbt,"PLBartForConditionalGeneration"),fbt.forEach(t),RNo=r(FSe," (PLBart model)"),FSe.forEach(t),PNo=i(ue),A2=n(ue,"LI",{});var TSe=s(A2);Vhe=n(TSe,"STRONG",{});var mbt=s(Vhe);BNo=r(mbt,"prophetnet"),mbt.forEach(t),INo=r(TSe," \u2014 "),hV=n(TSe,"A",{href:!0});var gbt=s(hV);NNo=r(gbt,"ProphetNetForConditionalGeneration"),gbt.forEach(t),qNo=r(TSe," (ProphetNet model)"),TSe.forEach(t),jNo=i(ue),L2=n(ue,"LI",{});var MSe=s(L2);Xhe=n(MSe,"STRONG",{});var hbt=s(Xhe);DNo=r(hbt,"t5"),hbt.forEach(t),GNo=r(MSe," \u2014 "),pV=n(MSe,"A",{href:!0});var pbt=s(pV);ONo=r(pbt,"T5ForConditionalGeneration"),pbt.forEach(t),VNo=r(MSe," (T5 model)"),MSe.forEach(t),XNo=i(ue),y2=n(ue,"LI",{});var ESe=s(y2);zhe=n(ESe,"STRONG",{});var _bt=s(zhe);zNo=r(_bt,"xlm-prophetnet"),_bt.forEach(t),QNo=r(ESe," \u2014 "),_V=n(ESe,"A",{href:!0});var ubt=s(_V);WNo=r(ubt,"XLMProphetNetForConditionalGeneration"),ubt.forEach(t),HNo=r(ESe," (XLM-ProphetNet model)"),ESe.forEach(t),ue.forEach(t),UNo=i(ia),x2=n(ia,"P",{});var CSe=s(x2);JNo=r(CSe,"The model is set in evaluation mode by default using "),Qhe=n(CSe,"CODE",{});var bbt=s(Qhe);YNo=r(bbt,"model.eval()"),bbt.forEach(t),KNo=r(CSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Whe=n(CSe,"CODE",{});var vbt=s(Whe);ZNo=r(vbt,"model.train()"),vbt.forEach(t),CSe.forEach(t),eqo=i(ia),T($2.$$.fragment,ia),ia.forEach(t),tl.forEach(t),iVe=i(f),Ki=n(f,"H2",{class:!0});var hze=s(Ki);k2=n(hze,"A",{id:!0,class:!0,href:!0});var Fbt=s(k2);Hhe=n(Fbt,"SPAN",{});var Tbt=s(Hhe);T(jL.$$.fragment,Tbt),Tbt.forEach(t),Fbt.forEach(t),oqo=i(hze),Uhe=n(hze,"SPAN",{});var Mbt=s(Uhe);rqo=r(Mbt,"AutoModelForSequenceClassification"),Mbt.forEach(t),hze.forEach(t),dVe=i(f),Po=n(f,"DIV",{class:!0});var al=s(Po);T(DL.$$.fragment,al),tqo=i(al),Zi=n(al,"P",{});var nre=s(Zi);aqo=r(nre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),uV=n(nre,"A",{href:!0});var Ebt=s(uV);nqo=r(Ebt,"from_pretrained()"),Ebt.forEach(t),sqo=r(nre," class method or the "),bV=n(nre,"A",{href:!0});var Cbt=s(bV);lqo=r(Cbt,"from_config()"),Cbt.forEach(t),iqo=r(nre,` class
method.`),nre.forEach(t),dqo=i(al),GL=n(al,"P",{});var pze=s(GL);cqo=r(pze,"This class cannot be instantiated directly using "),Jhe=n(pze,"CODE",{});var wbt=s(Jhe);fqo=r(wbt,"__init__()"),wbt.forEach(t),mqo=r(pze," (throws an error)."),pze.forEach(t),gqo=i(al),ct=n(al,"DIV",{class:!0});var eA=s(ct);T(OL.$$.fragment,eA),hqo=i(eA),Yhe=n(eA,"P",{});var Abt=s(Yhe);pqo=r(Abt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Abt.forEach(t),_qo=i(eA),ed=n(eA,"P",{});var sre=s(ed);uqo=r(sre,`Note:
Loading a model from its configuration file does `),Khe=n(sre,"STRONG",{});var Lbt=s(Khe);bqo=r(Lbt,"not"),Lbt.forEach(t),vqo=r(sre,` load the model weights. It only affects the
model\u2019s configuration. Use `),vV=n(sre,"A",{href:!0});var ybt=s(vV);Fqo=r(ybt,"from_pretrained()"),ybt.forEach(t),Tqo=r(sre," to load the model weights."),sre.forEach(t),Mqo=i(eA),T(S2.$$.fragment,eA),eA.forEach(t),Eqo=i(al),oo=n(al,"DIV",{class:!0});var da=s(oo);T(VL.$$.fragment,da),Cqo=i(da),Zhe=n(da,"P",{});var xbt=s(Zhe);wqo=r(xbt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),xbt.forEach(t),Aqo=i(da),qa=n(da,"P",{});var oA=s(qa);Lqo=r(oA,"The model class to instantiate is selected based on the "),epe=n(oA,"CODE",{});var $bt=s(epe);yqo=r($bt,"model_type"),$bt.forEach(t),xqo=r(oA,` property of the config object (either
passed as an argument or loaded from `),ope=n(oA,"CODE",{});var kbt=s(ope);$qo=r(kbt,"pretrained_model_name_or_path"),kbt.forEach(t),kqo=r(oA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rpe=n(oA,"CODE",{});var Sbt=s(rpe);Sqo=r(Sbt,"pretrained_model_name_or_path"),Sbt.forEach(t),Rqo=r(oA,":"),oA.forEach(t),Pqo=i(da),N=n(da,"UL",{});var q=s(N);R2=n(q,"LI",{});var wSe=s(R2);tpe=n(wSe,"STRONG",{});var Rbt=s(tpe);Bqo=r(Rbt,"albert"),Rbt.forEach(t),Iqo=r(wSe," \u2014 "),FV=n(wSe,"A",{href:!0});var Pbt=s(FV);Nqo=r(Pbt,"AlbertForSequenceClassification"),Pbt.forEach(t),qqo=r(wSe," (ALBERT model)"),wSe.forEach(t),jqo=i(q),P2=n(q,"LI",{});var ASe=s(P2);ape=n(ASe,"STRONG",{});var Bbt=s(ape);Dqo=r(Bbt,"bart"),Bbt.forEach(t),Gqo=r(ASe," \u2014 "),TV=n(ASe,"A",{href:!0});var Ibt=s(TV);Oqo=r(Ibt,"BartForSequenceClassification"),Ibt.forEach(t),Vqo=r(ASe," (BART model)"),ASe.forEach(t),Xqo=i(q),B2=n(q,"LI",{});var LSe=s(B2);npe=n(LSe,"STRONG",{});var Nbt=s(npe);zqo=r(Nbt,"bert"),Nbt.forEach(t),Qqo=r(LSe," \u2014 "),MV=n(LSe,"A",{href:!0});var qbt=s(MV);Wqo=r(qbt,"BertForSequenceClassification"),qbt.forEach(t),Hqo=r(LSe," (BERT model)"),LSe.forEach(t),Uqo=i(q),I2=n(q,"LI",{});var ySe=s(I2);spe=n(ySe,"STRONG",{});var jbt=s(spe);Jqo=r(jbt,"big_bird"),jbt.forEach(t),Yqo=r(ySe," \u2014 "),EV=n(ySe,"A",{href:!0});var Dbt=s(EV);Kqo=r(Dbt,"BigBirdForSequenceClassification"),Dbt.forEach(t),Zqo=r(ySe," (BigBird model)"),ySe.forEach(t),ejo=i(q),N2=n(q,"LI",{});var xSe=s(N2);lpe=n(xSe,"STRONG",{});var Gbt=s(lpe);ojo=r(Gbt,"bigbird_pegasus"),Gbt.forEach(t),rjo=r(xSe," \u2014 "),CV=n(xSe,"A",{href:!0});var Obt=s(CV);tjo=r(Obt,"BigBirdPegasusForSequenceClassification"),Obt.forEach(t),ajo=r(xSe," (BigBird-Pegasus model)"),xSe.forEach(t),njo=i(q),q2=n(q,"LI",{});var $Se=s(q2);ipe=n($Se,"STRONG",{});var Vbt=s(ipe);sjo=r(Vbt,"bloom"),Vbt.forEach(t),ljo=r($Se," \u2014 "),wV=n($Se,"A",{href:!0});var Xbt=s(wV);ijo=r(Xbt,"BloomForSequenceClassification"),Xbt.forEach(t),djo=r($Se," (BLOOM model)"),$Se.forEach(t),cjo=i(q),j2=n(q,"LI",{});var kSe=s(j2);dpe=n(kSe,"STRONG",{});var zbt=s(dpe);fjo=r(zbt,"camembert"),zbt.forEach(t),mjo=r(kSe," \u2014 "),AV=n(kSe,"A",{href:!0});var Qbt=s(AV);gjo=r(Qbt,"CamembertForSequenceClassification"),Qbt.forEach(t),hjo=r(kSe," (CamemBERT model)"),kSe.forEach(t),pjo=i(q),D2=n(q,"LI",{});var SSe=s(D2);cpe=n(SSe,"STRONG",{});var Wbt=s(cpe);_jo=r(Wbt,"canine"),Wbt.forEach(t),ujo=r(SSe," \u2014 "),LV=n(SSe,"A",{href:!0});var Hbt=s(LV);bjo=r(Hbt,"CanineForSequenceClassification"),Hbt.forEach(t),vjo=r(SSe," (CANINE model)"),SSe.forEach(t),Fjo=i(q),G2=n(q,"LI",{});var RSe=s(G2);fpe=n(RSe,"STRONG",{});var Ubt=s(fpe);Tjo=r(Ubt,"convbert"),Ubt.forEach(t),Mjo=r(RSe," \u2014 "),yV=n(RSe,"A",{href:!0});var Jbt=s(yV);Ejo=r(Jbt,"ConvBertForSequenceClassification"),Jbt.forEach(t),Cjo=r(RSe," (ConvBERT model)"),RSe.forEach(t),wjo=i(q),O2=n(q,"LI",{});var PSe=s(O2);mpe=n(PSe,"STRONG",{});var Ybt=s(mpe);Ajo=r(Ybt,"ctrl"),Ybt.forEach(t),Ljo=r(PSe," \u2014 "),xV=n(PSe,"A",{href:!0});var Kbt=s(xV);yjo=r(Kbt,"CTRLForSequenceClassification"),Kbt.forEach(t),xjo=r(PSe," (CTRL model)"),PSe.forEach(t),$jo=i(q),V2=n(q,"LI",{});var BSe=s(V2);gpe=n(BSe,"STRONG",{});var Zbt=s(gpe);kjo=r(Zbt,"data2vec-text"),Zbt.forEach(t),Sjo=r(BSe," \u2014 "),$V=n(BSe,"A",{href:!0});var evt=s($V);Rjo=r(evt,"Data2VecTextForSequenceClassification"),evt.forEach(t),Pjo=r(BSe," (Data2VecText model)"),BSe.forEach(t),Bjo=i(q),X2=n(q,"LI",{});var ISe=s(X2);hpe=n(ISe,"STRONG",{});var ovt=s(hpe);Ijo=r(ovt,"deberta"),ovt.forEach(t),Njo=r(ISe," \u2014 "),kV=n(ISe,"A",{href:!0});var rvt=s(kV);qjo=r(rvt,"DebertaForSequenceClassification"),rvt.forEach(t),jjo=r(ISe," (DeBERTa model)"),ISe.forEach(t),Djo=i(q),z2=n(q,"LI",{});var NSe=s(z2);ppe=n(NSe,"STRONG",{});var tvt=s(ppe);Gjo=r(tvt,"deberta-v2"),tvt.forEach(t),Ojo=r(NSe," \u2014 "),SV=n(NSe,"A",{href:!0});var avt=s(SV);Vjo=r(avt,"DebertaV2ForSequenceClassification"),avt.forEach(t),Xjo=r(NSe," (DeBERTa-v2 model)"),NSe.forEach(t),zjo=i(q),Q2=n(q,"LI",{});var qSe=s(Q2);_pe=n(qSe,"STRONG",{});var nvt=s(_pe);Qjo=r(nvt,"distilbert"),nvt.forEach(t),Wjo=r(qSe," \u2014 "),RV=n(qSe,"A",{href:!0});var svt=s(RV);Hjo=r(svt,"DistilBertForSequenceClassification"),svt.forEach(t),Ujo=r(qSe," (DistilBERT model)"),qSe.forEach(t),Jjo=i(q),W2=n(q,"LI",{});var jSe=s(W2);upe=n(jSe,"STRONG",{});var lvt=s(upe);Yjo=r(lvt,"electra"),lvt.forEach(t),Kjo=r(jSe," \u2014 "),PV=n(jSe,"A",{href:!0});var ivt=s(PV);Zjo=r(ivt,"ElectraForSequenceClassification"),ivt.forEach(t),eDo=r(jSe," (ELECTRA model)"),jSe.forEach(t),oDo=i(q),H2=n(q,"LI",{});var DSe=s(H2);bpe=n(DSe,"STRONG",{});var dvt=s(bpe);rDo=r(dvt,"flaubert"),dvt.forEach(t),tDo=r(DSe," \u2014 "),BV=n(DSe,"A",{href:!0});var cvt=s(BV);aDo=r(cvt,"FlaubertForSequenceClassification"),cvt.forEach(t),nDo=r(DSe," (FlauBERT model)"),DSe.forEach(t),sDo=i(q),U2=n(q,"LI",{});var GSe=s(U2);vpe=n(GSe,"STRONG",{});var fvt=s(vpe);lDo=r(fvt,"fnet"),fvt.forEach(t),iDo=r(GSe," \u2014 "),IV=n(GSe,"A",{href:!0});var mvt=s(IV);dDo=r(mvt,"FNetForSequenceClassification"),mvt.forEach(t),cDo=r(GSe," (FNet model)"),GSe.forEach(t),fDo=i(q),J2=n(q,"LI",{});var OSe=s(J2);Fpe=n(OSe,"STRONG",{});var gvt=s(Fpe);mDo=r(gvt,"funnel"),gvt.forEach(t),gDo=r(OSe," \u2014 "),NV=n(OSe,"A",{href:!0});var hvt=s(NV);hDo=r(hvt,"FunnelForSequenceClassification"),hvt.forEach(t),pDo=r(OSe," (Funnel Transformer model)"),OSe.forEach(t),_Do=i(q),Y2=n(q,"LI",{});var VSe=s(Y2);Tpe=n(VSe,"STRONG",{});var pvt=s(Tpe);uDo=r(pvt,"gpt2"),pvt.forEach(t),bDo=r(VSe," \u2014 "),qV=n(VSe,"A",{href:!0});var _vt=s(qV);vDo=r(_vt,"GPT2ForSequenceClassification"),_vt.forEach(t),FDo=r(VSe," (OpenAI GPT-2 model)"),VSe.forEach(t),TDo=i(q),K2=n(q,"LI",{});var XSe=s(K2);Mpe=n(XSe,"STRONG",{});var uvt=s(Mpe);MDo=r(uvt,"gpt_neo"),uvt.forEach(t),EDo=r(XSe," \u2014 "),jV=n(XSe,"A",{href:!0});var bvt=s(jV);CDo=r(bvt,"GPTNeoForSequenceClassification"),bvt.forEach(t),wDo=r(XSe," (GPT Neo model)"),XSe.forEach(t),ADo=i(q),Z2=n(q,"LI",{});var zSe=s(Z2);Epe=n(zSe,"STRONG",{});var vvt=s(Epe);LDo=r(vvt,"gptj"),vvt.forEach(t),yDo=r(zSe," \u2014 "),DV=n(zSe,"A",{href:!0});var Fvt=s(DV);xDo=r(Fvt,"GPTJForSequenceClassification"),Fvt.forEach(t),$Do=r(zSe," (GPT-J model)"),zSe.forEach(t),kDo=i(q),eb=n(q,"LI",{});var QSe=s(eb);Cpe=n(QSe,"STRONG",{});var Tvt=s(Cpe);SDo=r(Tvt,"ibert"),Tvt.forEach(t),RDo=r(QSe," \u2014 "),GV=n(QSe,"A",{href:!0});var Mvt=s(GV);PDo=r(Mvt,"IBertForSequenceClassification"),Mvt.forEach(t),BDo=r(QSe," (I-BERT model)"),QSe.forEach(t),IDo=i(q),ob=n(q,"LI",{});var WSe=s(ob);wpe=n(WSe,"STRONG",{});var Evt=s(wpe);NDo=r(Evt,"layoutlm"),Evt.forEach(t),qDo=r(WSe," \u2014 "),OV=n(WSe,"A",{href:!0});var Cvt=s(OV);jDo=r(Cvt,"LayoutLMForSequenceClassification"),Cvt.forEach(t),DDo=r(WSe," (LayoutLM model)"),WSe.forEach(t),GDo=i(q),rb=n(q,"LI",{});var HSe=s(rb);Ape=n(HSe,"STRONG",{});var wvt=s(Ape);ODo=r(wvt,"layoutlmv2"),wvt.forEach(t),VDo=r(HSe," \u2014 "),VV=n(HSe,"A",{href:!0});var Avt=s(VV);XDo=r(Avt,"LayoutLMv2ForSequenceClassification"),Avt.forEach(t),zDo=r(HSe," (LayoutLMv2 model)"),HSe.forEach(t),QDo=i(q),tb=n(q,"LI",{});var USe=s(tb);Lpe=n(USe,"STRONG",{});var Lvt=s(Lpe);WDo=r(Lvt,"layoutlmv3"),Lvt.forEach(t),HDo=r(USe," \u2014 "),XV=n(USe,"A",{href:!0});var yvt=s(XV);UDo=r(yvt,"LayoutLMv3ForSequenceClassification"),yvt.forEach(t),JDo=r(USe," (LayoutLMv3 model)"),USe.forEach(t),YDo=i(q),ab=n(q,"LI",{});var JSe=s(ab);ype=n(JSe,"STRONG",{});var xvt=s(ype);KDo=r(xvt,"led"),xvt.forEach(t),ZDo=r(JSe," \u2014 "),zV=n(JSe,"A",{href:!0});var $vt=s(zV);eGo=r($vt,"LEDForSequenceClassification"),$vt.forEach(t),oGo=r(JSe," (LED model)"),JSe.forEach(t),rGo=i(q),nb=n(q,"LI",{});var YSe=s(nb);xpe=n(YSe,"STRONG",{});var kvt=s(xpe);tGo=r(kvt,"longformer"),kvt.forEach(t),aGo=r(YSe," \u2014 "),QV=n(YSe,"A",{href:!0});var Svt=s(QV);nGo=r(Svt,"LongformerForSequenceClassification"),Svt.forEach(t),sGo=r(YSe," (Longformer model)"),YSe.forEach(t),lGo=i(q),sb=n(q,"LI",{});var KSe=s(sb);$pe=n(KSe,"STRONG",{});var Rvt=s($pe);iGo=r(Rvt,"mbart"),Rvt.forEach(t),dGo=r(KSe," \u2014 "),WV=n(KSe,"A",{href:!0});var Pvt=s(WV);cGo=r(Pvt,"MBartForSequenceClassification"),Pvt.forEach(t),fGo=r(KSe," (mBART model)"),KSe.forEach(t),mGo=i(q),lb=n(q,"LI",{});var ZSe=s(lb);kpe=n(ZSe,"STRONG",{});var Bvt=s(kpe);gGo=r(Bvt,"megatron-bert"),Bvt.forEach(t),hGo=r(ZSe," \u2014 "),HV=n(ZSe,"A",{href:!0});var Ivt=s(HV);pGo=r(Ivt,"MegatronBertForSequenceClassification"),Ivt.forEach(t),_Go=r(ZSe," (Megatron-BERT model)"),ZSe.forEach(t),uGo=i(q),ib=n(q,"LI",{});var eRe=s(ib);Spe=n(eRe,"STRONG",{});var Nvt=s(Spe);bGo=r(Nvt,"mobilebert"),Nvt.forEach(t),vGo=r(eRe," \u2014 "),UV=n(eRe,"A",{href:!0});var qvt=s(UV);FGo=r(qvt,"MobileBertForSequenceClassification"),qvt.forEach(t),TGo=r(eRe," (MobileBERT model)"),eRe.forEach(t),MGo=i(q),db=n(q,"LI",{});var oRe=s(db);Rpe=n(oRe,"STRONG",{});var jvt=s(Rpe);EGo=r(jvt,"mpnet"),jvt.forEach(t),CGo=r(oRe," \u2014 "),JV=n(oRe,"A",{href:!0});var Dvt=s(JV);wGo=r(Dvt,"MPNetForSequenceClassification"),Dvt.forEach(t),AGo=r(oRe," (MPNet model)"),oRe.forEach(t),LGo=i(q),cb=n(q,"LI",{});var rRe=s(cb);Ppe=n(rRe,"STRONG",{});var Gvt=s(Ppe);yGo=r(Gvt,"mvp"),Gvt.forEach(t),xGo=r(rRe," \u2014 "),YV=n(rRe,"A",{href:!0});var Ovt=s(YV);$Go=r(Ovt,"MvpForSequenceClassification"),Ovt.forEach(t),kGo=r(rRe," (MVP model)"),rRe.forEach(t),SGo=i(q),fb=n(q,"LI",{});var tRe=s(fb);Bpe=n(tRe,"STRONG",{});var Vvt=s(Bpe);RGo=r(Vvt,"nezha"),Vvt.forEach(t),PGo=r(tRe," \u2014 "),KV=n(tRe,"A",{href:!0});var Xvt=s(KV);BGo=r(Xvt,"NezhaForSequenceClassification"),Xvt.forEach(t),IGo=r(tRe," (Nezha model)"),tRe.forEach(t),NGo=i(q),mb=n(q,"LI",{});var aRe=s(mb);Ipe=n(aRe,"STRONG",{});var zvt=s(Ipe);qGo=r(zvt,"nystromformer"),zvt.forEach(t),jGo=r(aRe," \u2014 "),ZV=n(aRe,"A",{href:!0});var Qvt=s(ZV);DGo=r(Qvt,"NystromformerForSequenceClassification"),Qvt.forEach(t),GGo=r(aRe," (Nystr\xF6mformer model)"),aRe.forEach(t),OGo=i(q),gb=n(q,"LI",{});var nRe=s(gb);Npe=n(nRe,"STRONG",{});var Wvt=s(Npe);VGo=r(Wvt,"openai-gpt"),Wvt.forEach(t),XGo=r(nRe," \u2014 "),eX=n(nRe,"A",{href:!0});var Hvt=s(eX);zGo=r(Hvt,"OpenAIGPTForSequenceClassification"),Hvt.forEach(t),QGo=r(nRe," (OpenAI GPT model)"),nRe.forEach(t),WGo=i(q),hb=n(q,"LI",{});var sRe=s(hb);qpe=n(sRe,"STRONG",{});var Uvt=s(qpe);HGo=r(Uvt,"perceiver"),Uvt.forEach(t),UGo=r(sRe," \u2014 "),oX=n(sRe,"A",{href:!0});var Jvt=s(oX);JGo=r(Jvt,"PerceiverForSequenceClassification"),Jvt.forEach(t),YGo=r(sRe," (Perceiver model)"),sRe.forEach(t),KGo=i(q),pb=n(q,"LI",{});var lRe=s(pb);jpe=n(lRe,"STRONG",{});var Yvt=s(jpe);ZGo=r(Yvt,"plbart"),Yvt.forEach(t),eOo=r(lRe," \u2014 "),rX=n(lRe,"A",{href:!0});var Kvt=s(rX);oOo=r(Kvt,"PLBartForSequenceClassification"),Kvt.forEach(t),rOo=r(lRe," (PLBart model)"),lRe.forEach(t),tOo=i(q),_b=n(q,"LI",{});var iRe=s(_b);Dpe=n(iRe,"STRONG",{});var Zvt=s(Dpe);aOo=r(Zvt,"qdqbert"),Zvt.forEach(t),nOo=r(iRe," \u2014 "),tX=n(iRe,"A",{href:!0});var eFt=s(tX);sOo=r(eFt,"QDQBertForSequenceClassification"),eFt.forEach(t),lOo=r(iRe," (QDQBert model)"),iRe.forEach(t),iOo=i(q),ub=n(q,"LI",{});var dRe=s(ub);Gpe=n(dRe,"STRONG",{});var oFt=s(Gpe);dOo=r(oFt,"reformer"),oFt.forEach(t),cOo=r(dRe," \u2014 "),aX=n(dRe,"A",{href:!0});var rFt=s(aX);fOo=r(rFt,"ReformerForSequenceClassification"),rFt.forEach(t),mOo=r(dRe," (Reformer model)"),dRe.forEach(t),gOo=i(q),bb=n(q,"LI",{});var cRe=s(bb);Ope=n(cRe,"STRONG",{});var tFt=s(Ope);hOo=r(tFt,"rembert"),tFt.forEach(t),pOo=r(cRe," \u2014 "),nX=n(cRe,"A",{href:!0});var aFt=s(nX);_Oo=r(aFt,"RemBertForSequenceClassification"),aFt.forEach(t),uOo=r(cRe," (RemBERT model)"),cRe.forEach(t),bOo=i(q),vb=n(q,"LI",{});var fRe=s(vb);Vpe=n(fRe,"STRONG",{});var nFt=s(Vpe);vOo=r(nFt,"roberta"),nFt.forEach(t),FOo=r(fRe," \u2014 "),sX=n(fRe,"A",{href:!0});var sFt=s(sX);TOo=r(sFt,"RobertaForSequenceClassification"),sFt.forEach(t),MOo=r(fRe," (RoBERTa model)"),fRe.forEach(t),EOo=i(q),Fb=n(q,"LI",{});var mRe=s(Fb);Xpe=n(mRe,"STRONG",{});var lFt=s(Xpe);COo=r(lFt,"roformer"),lFt.forEach(t),wOo=r(mRe," \u2014 "),lX=n(mRe,"A",{href:!0});var iFt=s(lX);AOo=r(iFt,"RoFormerForSequenceClassification"),iFt.forEach(t),LOo=r(mRe," (RoFormer model)"),mRe.forEach(t),yOo=i(q),Tb=n(q,"LI",{});var gRe=s(Tb);zpe=n(gRe,"STRONG",{});var dFt=s(zpe);xOo=r(dFt,"squeezebert"),dFt.forEach(t),$Oo=r(gRe," \u2014 "),iX=n(gRe,"A",{href:!0});var cFt=s(iX);kOo=r(cFt,"SqueezeBertForSequenceClassification"),cFt.forEach(t),SOo=r(gRe," (SqueezeBERT model)"),gRe.forEach(t),ROo=i(q),Mb=n(q,"LI",{});var hRe=s(Mb);Qpe=n(hRe,"STRONG",{});var fFt=s(Qpe);POo=r(fFt,"tapas"),fFt.forEach(t),BOo=r(hRe," \u2014 "),dX=n(hRe,"A",{href:!0});var mFt=s(dX);IOo=r(mFt,"TapasForSequenceClassification"),mFt.forEach(t),NOo=r(hRe," (TAPAS model)"),hRe.forEach(t),qOo=i(q),Eb=n(q,"LI",{});var pRe=s(Eb);Wpe=n(pRe,"STRONG",{});var gFt=s(Wpe);jOo=r(gFt,"transfo-xl"),gFt.forEach(t),DOo=r(pRe," \u2014 "),cX=n(pRe,"A",{href:!0});var hFt=s(cX);GOo=r(hFt,"TransfoXLForSequenceClassification"),hFt.forEach(t),OOo=r(pRe," (Transformer-XL model)"),pRe.forEach(t),VOo=i(q),Cb=n(q,"LI",{});var _Re=s(Cb);Hpe=n(_Re,"STRONG",{});var pFt=s(Hpe);XOo=r(pFt,"xlm"),pFt.forEach(t),zOo=r(_Re," \u2014 "),fX=n(_Re,"A",{href:!0});var _Ft=s(fX);QOo=r(_Ft,"XLMForSequenceClassification"),_Ft.forEach(t),WOo=r(_Re," (XLM model)"),_Re.forEach(t),HOo=i(q),wb=n(q,"LI",{});var uRe=s(wb);Upe=n(uRe,"STRONG",{});var uFt=s(Upe);UOo=r(uFt,"xlm-roberta"),uFt.forEach(t),JOo=r(uRe," \u2014 "),mX=n(uRe,"A",{href:!0});var bFt=s(mX);YOo=r(bFt,"XLMRobertaForSequenceClassification"),bFt.forEach(t),KOo=r(uRe," (XLM-RoBERTa model)"),uRe.forEach(t),ZOo=i(q),Ab=n(q,"LI",{});var bRe=s(Ab);Jpe=n(bRe,"STRONG",{});var vFt=s(Jpe);eVo=r(vFt,"xlm-roberta-xl"),vFt.forEach(t),oVo=r(bRe," \u2014 "),gX=n(bRe,"A",{href:!0});var FFt=s(gX);rVo=r(FFt,"XLMRobertaXLForSequenceClassification"),FFt.forEach(t),tVo=r(bRe," (XLM-RoBERTa-XL model)"),bRe.forEach(t),aVo=i(q),Lb=n(q,"LI",{});var vRe=s(Lb);Ype=n(vRe,"STRONG",{});var TFt=s(Ype);nVo=r(TFt,"xlnet"),TFt.forEach(t),sVo=r(vRe," \u2014 "),hX=n(vRe,"A",{href:!0});var MFt=s(hX);lVo=r(MFt,"XLNetForSequenceClassification"),MFt.forEach(t),iVo=r(vRe," (XLNet model)"),vRe.forEach(t),dVo=i(q),yb=n(q,"LI",{});var FRe=s(yb);Kpe=n(FRe,"STRONG",{});var EFt=s(Kpe);cVo=r(EFt,"yoso"),EFt.forEach(t),fVo=r(FRe," \u2014 "),pX=n(FRe,"A",{href:!0});var CFt=s(pX);mVo=r(CFt,"YosoForSequenceClassification"),CFt.forEach(t),gVo=r(FRe," (YOSO model)"),FRe.forEach(t),q.forEach(t),hVo=i(da),xb=n(da,"P",{});var TRe=s(xb);pVo=r(TRe,"The model is set in evaluation mode by default using "),Zpe=n(TRe,"CODE",{});var wFt=s(Zpe);_Vo=r(wFt,"model.eval()"),wFt.forEach(t),uVo=r(TRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),e_e=n(TRe,"CODE",{});var AFt=s(e_e);bVo=r(AFt,"model.train()"),AFt.forEach(t),TRe.forEach(t),vVo=i(da),T($b.$$.fragment,da),da.forEach(t),al.forEach(t),cVe=i(f),od=n(f,"H2",{class:!0});var _ze=s(od);kb=n(_ze,"A",{id:!0,class:!0,href:!0});var LFt=s(kb);o_e=n(LFt,"SPAN",{});var yFt=s(o_e);T(XL.$$.fragment,yFt),yFt.forEach(t),LFt.forEach(t),FVo=i(_ze),r_e=n(_ze,"SPAN",{});var xFt=s(r_e);TVo=r(xFt,"AutoModelForMultipleChoice"),xFt.forEach(t),_ze.forEach(t),fVe=i(f),Bo=n(f,"DIV",{class:!0});var nl=s(Bo);T(zL.$$.fragment,nl),MVo=i(nl),rd=n(nl,"P",{});var lre=s(rd);EVo=r(lre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),_X=n(lre,"A",{href:!0});var $Ft=s(_X);CVo=r($Ft,"from_pretrained()"),$Ft.forEach(t),wVo=r(lre," class method or the "),uX=n(lre,"A",{href:!0});var kFt=s(uX);AVo=r(kFt,"from_config()"),kFt.forEach(t),LVo=r(lre,` class
method.`),lre.forEach(t),yVo=i(nl),QL=n(nl,"P",{});var uze=s(QL);xVo=r(uze,"This class cannot be instantiated directly using "),t_e=n(uze,"CODE",{});var SFt=s(t_e);$Vo=r(SFt,"__init__()"),SFt.forEach(t),kVo=r(uze," (throws an error)."),uze.forEach(t),SVo=i(nl),ft=n(nl,"DIV",{class:!0});var rA=s(ft);T(WL.$$.fragment,rA),RVo=i(rA),a_e=n(rA,"P",{});var RFt=s(a_e);PVo=r(RFt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),RFt.forEach(t),BVo=i(rA),td=n(rA,"P",{});var ire=s(td);IVo=r(ire,`Note:
Loading a model from its configuration file does `),n_e=n(ire,"STRONG",{});var PFt=s(n_e);NVo=r(PFt,"not"),PFt.forEach(t),qVo=r(ire,` load the model weights. It only affects the
model\u2019s configuration. Use `),bX=n(ire,"A",{href:!0});var BFt=s(bX);jVo=r(BFt,"from_pretrained()"),BFt.forEach(t),DVo=r(ire," to load the model weights."),ire.forEach(t),GVo=i(rA),T(Sb.$$.fragment,rA),rA.forEach(t),OVo=i(nl),ro=n(nl,"DIV",{class:!0});var ca=s(ro);T(HL.$$.fragment,ca),VVo=i(ca),s_e=n(ca,"P",{});var IFt=s(s_e);XVo=r(IFt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),IFt.forEach(t),zVo=i(ca),ja=n(ca,"P",{});var tA=s(ja);QVo=r(tA,"The model class to instantiate is selected based on the "),l_e=n(tA,"CODE",{});var NFt=s(l_e);WVo=r(NFt,"model_type"),NFt.forEach(t),HVo=r(tA,` property of the config object (either
passed as an argument or loaded from `),i_e=n(tA,"CODE",{});var qFt=s(i_e);UVo=r(qFt,"pretrained_model_name_or_path"),qFt.forEach(t),JVo=r(tA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d_e=n(tA,"CODE",{});var jFt=s(d_e);YVo=r(jFt,"pretrained_model_name_or_path"),jFt.forEach(t),KVo=r(tA,":"),tA.forEach(t),ZVo=i(ca),Z=n(ca,"UL",{});var ee=s(Z);Rb=n(ee,"LI",{});var MRe=s(Rb);c_e=n(MRe,"STRONG",{});var DFt=s(c_e);eXo=r(DFt,"albert"),DFt.forEach(t),oXo=r(MRe," \u2014 "),vX=n(MRe,"A",{href:!0});var GFt=s(vX);rXo=r(GFt,"AlbertForMultipleChoice"),GFt.forEach(t),tXo=r(MRe," (ALBERT model)"),MRe.forEach(t),aXo=i(ee),Pb=n(ee,"LI",{});var ERe=s(Pb);f_e=n(ERe,"STRONG",{});var OFt=s(f_e);nXo=r(OFt,"bert"),OFt.forEach(t),sXo=r(ERe," \u2014 "),FX=n(ERe,"A",{href:!0});var VFt=s(FX);lXo=r(VFt,"BertForMultipleChoice"),VFt.forEach(t),iXo=r(ERe," (BERT model)"),ERe.forEach(t),dXo=i(ee),Bb=n(ee,"LI",{});var CRe=s(Bb);m_e=n(CRe,"STRONG",{});var XFt=s(m_e);cXo=r(XFt,"big_bird"),XFt.forEach(t),fXo=r(CRe," \u2014 "),TX=n(CRe,"A",{href:!0});var zFt=s(TX);mXo=r(zFt,"BigBirdForMultipleChoice"),zFt.forEach(t),gXo=r(CRe," (BigBird model)"),CRe.forEach(t),hXo=i(ee),Ib=n(ee,"LI",{});var wRe=s(Ib);g_e=n(wRe,"STRONG",{});var QFt=s(g_e);pXo=r(QFt,"camembert"),QFt.forEach(t),_Xo=r(wRe," \u2014 "),MX=n(wRe,"A",{href:!0});var WFt=s(MX);uXo=r(WFt,"CamembertForMultipleChoice"),WFt.forEach(t),bXo=r(wRe," (CamemBERT model)"),wRe.forEach(t),vXo=i(ee),Nb=n(ee,"LI",{});var ARe=s(Nb);h_e=n(ARe,"STRONG",{});var HFt=s(h_e);FXo=r(HFt,"canine"),HFt.forEach(t),TXo=r(ARe," \u2014 "),EX=n(ARe,"A",{href:!0});var UFt=s(EX);MXo=r(UFt,"CanineForMultipleChoice"),UFt.forEach(t),EXo=r(ARe," (CANINE model)"),ARe.forEach(t),CXo=i(ee),qb=n(ee,"LI",{});var LRe=s(qb);p_e=n(LRe,"STRONG",{});var JFt=s(p_e);wXo=r(JFt,"convbert"),JFt.forEach(t),AXo=r(LRe," \u2014 "),CX=n(LRe,"A",{href:!0});var YFt=s(CX);LXo=r(YFt,"ConvBertForMultipleChoice"),YFt.forEach(t),yXo=r(LRe," (ConvBERT model)"),LRe.forEach(t),xXo=i(ee),jb=n(ee,"LI",{});var yRe=s(jb);__e=n(yRe,"STRONG",{});var KFt=s(__e);$Xo=r(KFt,"data2vec-text"),KFt.forEach(t),kXo=r(yRe," \u2014 "),wX=n(yRe,"A",{href:!0});var ZFt=s(wX);SXo=r(ZFt,"Data2VecTextForMultipleChoice"),ZFt.forEach(t),RXo=r(yRe," (Data2VecText model)"),yRe.forEach(t),PXo=i(ee),Db=n(ee,"LI",{});var xRe=s(Db);u_e=n(xRe,"STRONG",{});var eTt=s(u_e);BXo=r(eTt,"deberta-v2"),eTt.forEach(t),IXo=r(xRe," \u2014 "),AX=n(xRe,"A",{href:!0});var oTt=s(AX);NXo=r(oTt,"DebertaV2ForMultipleChoice"),oTt.forEach(t),qXo=r(xRe," (DeBERTa-v2 model)"),xRe.forEach(t),jXo=i(ee),Gb=n(ee,"LI",{});var $Re=s(Gb);b_e=n($Re,"STRONG",{});var rTt=s(b_e);DXo=r(rTt,"distilbert"),rTt.forEach(t),GXo=r($Re," \u2014 "),LX=n($Re,"A",{href:!0});var tTt=s(LX);OXo=r(tTt,"DistilBertForMultipleChoice"),tTt.forEach(t),VXo=r($Re," (DistilBERT model)"),$Re.forEach(t),XXo=i(ee),Ob=n(ee,"LI",{});var kRe=s(Ob);v_e=n(kRe,"STRONG",{});var aTt=s(v_e);zXo=r(aTt,"electra"),aTt.forEach(t),QXo=r(kRe," \u2014 "),yX=n(kRe,"A",{href:!0});var nTt=s(yX);WXo=r(nTt,"ElectraForMultipleChoice"),nTt.forEach(t),HXo=r(kRe," (ELECTRA model)"),kRe.forEach(t),UXo=i(ee),Vb=n(ee,"LI",{});var SRe=s(Vb);F_e=n(SRe,"STRONG",{});var sTt=s(F_e);JXo=r(sTt,"flaubert"),sTt.forEach(t),YXo=r(SRe," \u2014 "),xX=n(SRe,"A",{href:!0});var lTt=s(xX);KXo=r(lTt,"FlaubertForMultipleChoice"),lTt.forEach(t),ZXo=r(SRe," (FlauBERT model)"),SRe.forEach(t),ezo=i(ee),Xb=n(ee,"LI",{});var RRe=s(Xb);T_e=n(RRe,"STRONG",{});var iTt=s(T_e);ozo=r(iTt,"fnet"),iTt.forEach(t),rzo=r(RRe," \u2014 "),$X=n(RRe,"A",{href:!0});var dTt=s($X);tzo=r(dTt,"FNetForMultipleChoice"),dTt.forEach(t),azo=r(RRe," (FNet model)"),RRe.forEach(t),nzo=i(ee),zb=n(ee,"LI",{});var PRe=s(zb);M_e=n(PRe,"STRONG",{});var cTt=s(M_e);szo=r(cTt,"funnel"),cTt.forEach(t),lzo=r(PRe," \u2014 "),kX=n(PRe,"A",{href:!0});var fTt=s(kX);izo=r(fTt,"FunnelForMultipleChoice"),fTt.forEach(t),dzo=r(PRe," (Funnel Transformer model)"),PRe.forEach(t),czo=i(ee),Qb=n(ee,"LI",{});var BRe=s(Qb);E_e=n(BRe,"STRONG",{});var mTt=s(E_e);fzo=r(mTt,"ibert"),mTt.forEach(t),mzo=r(BRe," \u2014 "),SX=n(BRe,"A",{href:!0});var gTt=s(SX);gzo=r(gTt,"IBertForMultipleChoice"),gTt.forEach(t),hzo=r(BRe," (I-BERT model)"),BRe.forEach(t),pzo=i(ee),Wb=n(ee,"LI",{});var IRe=s(Wb);C_e=n(IRe,"STRONG",{});var hTt=s(C_e);_zo=r(hTt,"longformer"),hTt.forEach(t),uzo=r(IRe," \u2014 "),RX=n(IRe,"A",{href:!0});var pTt=s(RX);bzo=r(pTt,"LongformerForMultipleChoice"),pTt.forEach(t),vzo=r(IRe," (Longformer model)"),IRe.forEach(t),Fzo=i(ee),Hb=n(ee,"LI",{});var NRe=s(Hb);w_e=n(NRe,"STRONG",{});var _Tt=s(w_e);Tzo=r(_Tt,"megatron-bert"),_Tt.forEach(t),Mzo=r(NRe," \u2014 "),PX=n(NRe,"A",{href:!0});var uTt=s(PX);Ezo=r(uTt,"MegatronBertForMultipleChoice"),uTt.forEach(t),Czo=r(NRe," (Megatron-BERT model)"),NRe.forEach(t),wzo=i(ee),Ub=n(ee,"LI",{});var qRe=s(Ub);A_e=n(qRe,"STRONG",{});var bTt=s(A_e);Azo=r(bTt,"mobilebert"),bTt.forEach(t),Lzo=r(qRe," \u2014 "),BX=n(qRe,"A",{href:!0});var vTt=s(BX);yzo=r(vTt,"MobileBertForMultipleChoice"),vTt.forEach(t),xzo=r(qRe," (MobileBERT model)"),qRe.forEach(t),$zo=i(ee),Jb=n(ee,"LI",{});var jRe=s(Jb);L_e=n(jRe,"STRONG",{});var FTt=s(L_e);kzo=r(FTt,"mpnet"),FTt.forEach(t),Szo=r(jRe," \u2014 "),IX=n(jRe,"A",{href:!0});var TTt=s(IX);Rzo=r(TTt,"MPNetForMultipleChoice"),TTt.forEach(t),Pzo=r(jRe," (MPNet model)"),jRe.forEach(t),Bzo=i(ee),Yb=n(ee,"LI",{});var DRe=s(Yb);y_e=n(DRe,"STRONG",{});var MTt=s(y_e);Izo=r(MTt,"nezha"),MTt.forEach(t),Nzo=r(DRe," \u2014 "),NX=n(DRe,"A",{href:!0});var ETt=s(NX);qzo=r(ETt,"NezhaForMultipleChoice"),ETt.forEach(t),jzo=r(DRe," (Nezha model)"),DRe.forEach(t),Dzo=i(ee),Kb=n(ee,"LI",{});var GRe=s(Kb);x_e=n(GRe,"STRONG",{});var CTt=s(x_e);Gzo=r(CTt,"nystromformer"),CTt.forEach(t),Ozo=r(GRe," \u2014 "),qX=n(GRe,"A",{href:!0});var wTt=s(qX);Vzo=r(wTt,"NystromformerForMultipleChoice"),wTt.forEach(t),Xzo=r(GRe," (Nystr\xF6mformer model)"),GRe.forEach(t),zzo=i(ee),Zb=n(ee,"LI",{});var ORe=s(Zb);$_e=n(ORe,"STRONG",{});var ATt=s($_e);Qzo=r(ATt,"qdqbert"),ATt.forEach(t),Wzo=r(ORe," \u2014 "),jX=n(ORe,"A",{href:!0});var LTt=s(jX);Hzo=r(LTt,"QDQBertForMultipleChoice"),LTt.forEach(t),Uzo=r(ORe," (QDQBert model)"),ORe.forEach(t),Jzo=i(ee),ev=n(ee,"LI",{});var VRe=s(ev);k_e=n(VRe,"STRONG",{});var yTt=s(k_e);Yzo=r(yTt,"rembert"),yTt.forEach(t),Kzo=r(VRe," \u2014 "),DX=n(VRe,"A",{href:!0});var xTt=s(DX);Zzo=r(xTt,"RemBertForMultipleChoice"),xTt.forEach(t),eQo=r(VRe," (RemBERT model)"),VRe.forEach(t),oQo=i(ee),ov=n(ee,"LI",{});var XRe=s(ov);S_e=n(XRe,"STRONG",{});var $Tt=s(S_e);rQo=r($Tt,"roberta"),$Tt.forEach(t),tQo=r(XRe," \u2014 "),GX=n(XRe,"A",{href:!0});var kTt=s(GX);aQo=r(kTt,"RobertaForMultipleChoice"),kTt.forEach(t),nQo=r(XRe," (RoBERTa model)"),XRe.forEach(t),sQo=i(ee),rv=n(ee,"LI",{});var zRe=s(rv);R_e=n(zRe,"STRONG",{});var STt=s(R_e);lQo=r(STt,"roformer"),STt.forEach(t),iQo=r(zRe," \u2014 "),OX=n(zRe,"A",{href:!0});var RTt=s(OX);dQo=r(RTt,"RoFormerForMultipleChoice"),RTt.forEach(t),cQo=r(zRe," (RoFormer model)"),zRe.forEach(t),fQo=i(ee),tv=n(ee,"LI",{});var QRe=s(tv);P_e=n(QRe,"STRONG",{});var PTt=s(P_e);mQo=r(PTt,"squeezebert"),PTt.forEach(t),gQo=r(QRe," \u2014 "),VX=n(QRe,"A",{href:!0});var BTt=s(VX);hQo=r(BTt,"SqueezeBertForMultipleChoice"),BTt.forEach(t),pQo=r(QRe," (SqueezeBERT model)"),QRe.forEach(t),_Qo=i(ee),av=n(ee,"LI",{});var WRe=s(av);B_e=n(WRe,"STRONG",{});var ITt=s(B_e);uQo=r(ITt,"xlm"),ITt.forEach(t),bQo=r(WRe," \u2014 "),XX=n(WRe,"A",{href:!0});var NTt=s(XX);vQo=r(NTt,"XLMForMultipleChoice"),NTt.forEach(t),FQo=r(WRe," (XLM model)"),WRe.forEach(t),TQo=i(ee),nv=n(ee,"LI",{});var HRe=s(nv);I_e=n(HRe,"STRONG",{});var qTt=s(I_e);MQo=r(qTt,"xlm-roberta"),qTt.forEach(t),EQo=r(HRe," \u2014 "),zX=n(HRe,"A",{href:!0});var jTt=s(zX);CQo=r(jTt,"XLMRobertaForMultipleChoice"),jTt.forEach(t),wQo=r(HRe," (XLM-RoBERTa model)"),HRe.forEach(t),AQo=i(ee),sv=n(ee,"LI",{});var URe=s(sv);N_e=n(URe,"STRONG",{});var DTt=s(N_e);LQo=r(DTt,"xlm-roberta-xl"),DTt.forEach(t),yQo=r(URe," \u2014 "),QX=n(URe,"A",{href:!0});var GTt=s(QX);xQo=r(GTt,"XLMRobertaXLForMultipleChoice"),GTt.forEach(t),$Qo=r(URe," (XLM-RoBERTa-XL model)"),URe.forEach(t),kQo=i(ee),lv=n(ee,"LI",{});var JRe=s(lv);q_e=n(JRe,"STRONG",{});var OTt=s(q_e);SQo=r(OTt,"xlnet"),OTt.forEach(t),RQo=r(JRe," \u2014 "),WX=n(JRe,"A",{href:!0});var VTt=s(WX);PQo=r(VTt,"XLNetForMultipleChoice"),VTt.forEach(t),BQo=r(JRe," (XLNet model)"),JRe.forEach(t),IQo=i(ee),iv=n(ee,"LI",{});var YRe=s(iv);j_e=n(YRe,"STRONG",{});var XTt=s(j_e);NQo=r(XTt,"yoso"),XTt.forEach(t),qQo=r(YRe," \u2014 "),HX=n(YRe,"A",{href:!0});var zTt=s(HX);jQo=r(zTt,"YosoForMultipleChoice"),zTt.forEach(t),DQo=r(YRe," (YOSO model)"),YRe.forEach(t),ee.forEach(t),GQo=i(ca),dv=n(ca,"P",{});var KRe=s(dv);OQo=r(KRe,"The model is set in evaluation mode by default using "),D_e=n(KRe,"CODE",{});var QTt=s(D_e);VQo=r(QTt,"model.eval()"),QTt.forEach(t),XQo=r(KRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),G_e=n(KRe,"CODE",{});var WTt=s(G_e);zQo=r(WTt,"model.train()"),WTt.forEach(t),KRe.forEach(t),QQo=i(ca),T(cv.$$.fragment,ca),ca.forEach(t),nl.forEach(t),mVe=i(f),ad=n(f,"H2",{class:!0});var bze=s(ad);fv=n(bze,"A",{id:!0,class:!0,href:!0});var HTt=s(fv);O_e=n(HTt,"SPAN",{});var UTt=s(O_e);T(UL.$$.fragment,UTt),UTt.forEach(t),HTt.forEach(t),WQo=i(bze),V_e=n(bze,"SPAN",{});var JTt=s(V_e);HQo=r(JTt,"AutoModelForNextSentencePrediction"),JTt.forEach(t),bze.forEach(t),gVe=i(f),Io=n(f,"DIV",{class:!0});var sl=s(Io);T(JL.$$.fragment,sl),UQo=i(sl),nd=n(sl,"P",{});var dre=s(nd);JQo=r(dre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),UX=n(dre,"A",{href:!0});var YTt=s(UX);YQo=r(YTt,"from_pretrained()"),YTt.forEach(t),KQo=r(dre," class method or the "),JX=n(dre,"A",{href:!0});var KTt=s(JX);ZQo=r(KTt,"from_config()"),KTt.forEach(t),eWo=r(dre,` class
method.`),dre.forEach(t),oWo=i(sl),YL=n(sl,"P",{});var vze=s(YL);rWo=r(vze,"This class cannot be instantiated directly using "),X_e=n(vze,"CODE",{});var ZTt=s(X_e);tWo=r(ZTt,"__init__()"),ZTt.forEach(t),aWo=r(vze," (throws an error)."),vze.forEach(t),nWo=i(sl),mt=n(sl,"DIV",{class:!0});var aA=s(mt);T(KL.$$.fragment,aA),sWo=i(aA),z_e=n(aA,"P",{});var e8t=s(z_e);lWo=r(e8t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),e8t.forEach(t),iWo=i(aA),sd=n(aA,"P",{});var cre=s(sd);dWo=r(cre,`Note:
Loading a model from its configuration file does `),Q_e=n(cre,"STRONG",{});var o8t=s(Q_e);cWo=r(o8t,"not"),o8t.forEach(t),fWo=r(cre,` load the model weights. It only affects the
model\u2019s configuration. Use `),YX=n(cre,"A",{href:!0});var r8t=s(YX);mWo=r(r8t,"from_pretrained()"),r8t.forEach(t),gWo=r(cre," to load the model weights."),cre.forEach(t),hWo=i(aA),T(mv.$$.fragment,aA),aA.forEach(t),pWo=i(sl),to=n(sl,"DIV",{class:!0});var fa=s(to);T(ZL.$$.fragment,fa),_Wo=i(fa),W_e=n(fa,"P",{});var t8t=s(W_e);uWo=r(t8t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),t8t.forEach(t),bWo=i(fa),Da=n(fa,"P",{});var nA=s(Da);vWo=r(nA,"The model class to instantiate is selected based on the "),H_e=n(nA,"CODE",{});var a8t=s(H_e);FWo=r(a8t,"model_type"),a8t.forEach(t),TWo=r(nA,` property of the config object (either
passed as an argument or loaded from `),U_e=n(nA,"CODE",{});var n8t=s(U_e);MWo=r(n8t,"pretrained_model_name_or_path"),n8t.forEach(t),EWo=r(nA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J_e=n(nA,"CODE",{});var s8t=s(J_e);CWo=r(s8t,"pretrained_model_name_or_path"),s8t.forEach(t),wWo=r(nA,":"),nA.forEach(t),AWo=i(fa),No=n(fa,"UL",{});var ma=s(No);gv=n(ma,"LI",{});var ZRe=s(gv);Y_e=n(ZRe,"STRONG",{});var l8t=s(Y_e);LWo=r(l8t,"bert"),l8t.forEach(t),yWo=r(ZRe," \u2014 "),KX=n(ZRe,"A",{href:!0});var i8t=s(KX);xWo=r(i8t,"BertForNextSentencePrediction"),i8t.forEach(t),$Wo=r(ZRe," (BERT model)"),ZRe.forEach(t),kWo=i(ma),hv=n(ma,"LI",{});var ePe=s(hv);K_e=n(ePe,"STRONG",{});var d8t=s(K_e);SWo=r(d8t,"fnet"),d8t.forEach(t),RWo=r(ePe," \u2014 "),ZX=n(ePe,"A",{href:!0});var c8t=s(ZX);PWo=r(c8t,"FNetForNextSentencePrediction"),c8t.forEach(t),BWo=r(ePe," (FNet model)"),ePe.forEach(t),IWo=i(ma),pv=n(ma,"LI",{});var oPe=s(pv);Z_e=n(oPe,"STRONG",{});var f8t=s(Z_e);NWo=r(f8t,"megatron-bert"),f8t.forEach(t),qWo=r(oPe," \u2014 "),ez=n(oPe,"A",{href:!0});var m8t=s(ez);jWo=r(m8t,"MegatronBertForNextSentencePrediction"),m8t.forEach(t),DWo=r(oPe," (Megatron-BERT model)"),oPe.forEach(t),GWo=i(ma),_v=n(ma,"LI",{});var rPe=s(_v);eue=n(rPe,"STRONG",{});var g8t=s(eue);OWo=r(g8t,"mobilebert"),g8t.forEach(t),VWo=r(rPe," \u2014 "),oz=n(rPe,"A",{href:!0});var h8t=s(oz);XWo=r(h8t,"MobileBertForNextSentencePrediction"),h8t.forEach(t),zWo=r(rPe," (MobileBERT model)"),rPe.forEach(t),QWo=i(ma),uv=n(ma,"LI",{});var tPe=s(uv);oue=n(tPe,"STRONG",{});var p8t=s(oue);WWo=r(p8t,"nezha"),p8t.forEach(t),HWo=r(tPe," \u2014 "),rz=n(tPe,"A",{href:!0});var _8t=s(rz);UWo=r(_8t,"NezhaForNextSentencePrediction"),_8t.forEach(t),JWo=r(tPe," (Nezha model)"),tPe.forEach(t),YWo=i(ma),bv=n(ma,"LI",{});var aPe=s(bv);rue=n(aPe,"STRONG",{});var u8t=s(rue);KWo=r(u8t,"qdqbert"),u8t.forEach(t),ZWo=r(aPe," \u2014 "),tz=n(aPe,"A",{href:!0});var b8t=s(tz);eHo=r(b8t,"QDQBertForNextSentencePrediction"),b8t.forEach(t),oHo=r(aPe," (QDQBert model)"),aPe.forEach(t),ma.forEach(t),rHo=i(fa),vv=n(fa,"P",{});var nPe=s(vv);tHo=r(nPe,"The model is set in evaluation mode by default using "),tue=n(nPe,"CODE",{});var v8t=s(tue);aHo=r(v8t,"model.eval()"),v8t.forEach(t),nHo=r(nPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),aue=n(nPe,"CODE",{});var F8t=s(aue);sHo=r(F8t,"model.train()"),F8t.forEach(t),nPe.forEach(t),lHo=i(fa),T(Fv.$$.fragment,fa),fa.forEach(t),sl.forEach(t),hVe=i(f),ld=n(f,"H2",{class:!0});var Fze=s(ld);Tv=n(Fze,"A",{id:!0,class:!0,href:!0});var T8t=s(Tv);nue=n(T8t,"SPAN",{});var M8t=s(nue);T(ey.$$.fragment,M8t),M8t.forEach(t),T8t.forEach(t),iHo=i(Fze),sue=n(Fze,"SPAN",{});var E8t=s(sue);dHo=r(E8t,"AutoModelForTokenClassification"),E8t.forEach(t),Fze.forEach(t),pVe=i(f),qo=n(f,"DIV",{class:!0});var ll=s(qo);T(oy.$$.fragment,ll),cHo=i(ll),id=n(ll,"P",{});var fre=s(id);fHo=r(fre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),az=n(fre,"A",{href:!0});var C8t=s(az);mHo=r(C8t,"from_pretrained()"),C8t.forEach(t),gHo=r(fre," class method or the "),nz=n(fre,"A",{href:!0});var w8t=s(nz);hHo=r(w8t,"from_config()"),w8t.forEach(t),pHo=r(fre,` class
method.`),fre.forEach(t),_Ho=i(ll),ry=n(ll,"P",{});var Tze=s(ry);uHo=r(Tze,"This class cannot be instantiated directly using "),lue=n(Tze,"CODE",{});var A8t=s(lue);bHo=r(A8t,"__init__()"),A8t.forEach(t),vHo=r(Tze," (throws an error)."),Tze.forEach(t),FHo=i(ll),gt=n(ll,"DIV",{class:!0});var sA=s(gt);T(ty.$$.fragment,sA),THo=i(sA),iue=n(sA,"P",{});var L8t=s(iue);MHo=r(L8t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),L8t.forEach(t),EHo=i(sA),dd=n(sA,"P",{});var mre=s(dd);CHo=r(mre,`Note:
Loading a model from its configuration file does `),due=n(mre,"STRONG",{});var y8t=s(due);wHo=r(y8t,"not"),y8t.forEach(t),AHo=r(mre,` load the model weights. It only affects the
model\u2019s configuration. Use `),sz=n(mre,"A",{href:!0});var x8t=s(sz);LHo=r(x8t,"from_pretrained()"),x8t.forEach(t),yHo=r(mre," to load the model weights."),mre.forEach(t),xHo=i(sA),T(Mv.$$.fragment,sA),sA.forEach(t),$Ho=i(ll),ao=n(ll,"DIV",{class:!0});var ga=s(ao);T(ay.$$.fragment,ga),kHo=i(ga),cue=n(ga,"P",{});var $8t=s(cue);SHo=r($8t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),$8t.forEach(t),RHo=i(ga),Ga=n(ga,"P",{});var lA=s(Ga);PHo=r(lA,"The model class to instantiate is selected based on the "),fue=n(lA,"CODE",{});var k8t=s(fue);BHo=r(k8t,"model_type"),k8t.forEach(t),IHo=r(lA,` property of the config object (either
passed as an argument or loaded from `),mue=n(lA,"CODE",{});var S8t=s(mue);NHo=r(S8t,"pretrained_model_name_or_path"),S8t.forEach(t),qHo=r(lA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gue=n(lA,"CODE",{});var R8t=s(gue);jHo=r(R8t,"pretrained_model_name_or_path"),R8t.forEach(t),DHo=r(lA,":"),lA.forEach(t),GHo=i(ga),U=n(ga,"UL",{});var J=s(U);Ev=n(J,"LI",{});var sPe=s(Ev);hue=n(sPe,"STRONG",{});var P8t=s(hue);OHo=r(P8t,"albert"),P8t.forEach(t),VHo=r(sPe," \u2014 "),lz=n(sPe,"A",{href:!0});var B8t=s(lz);XHo=r(B8t,"AlbertForTokenClassification"),B8t.forEach(t),zHo=r(sPe," (ALBERT model)"),sPe.forEach(t),QHo=i(J),Cv=n(J,"LI",{});var lPe=s(Cv);pue=n(lPe,"STRONG",{});var I8t=s(pue);WHo=r(I8t,"bert"),I8t.forEach(t),HHo=r(lPe," \u2014 "),iz=n(lPe,"A",{href:!0});var N8t=s(iz);UHo=r(N8t,"BertForTokenClassification"),N8t.forEach(t),JHo=r(lPe," (BERT model)"),lPe.forEach(t),YHo=i(J),wv=n(J,"LI",{});var iPe=s(wv);_ue=n(iPe,"STRONG",{});var q8t=s(_ue);KHo=r(q8t,"big_bird"),q8t.forEach(t),ZHo=r(iPe," \u2014 "),dz=n(iPe,"A",{href:!0});var j8t=s(dz);eUo=r(j8t,"BigBirdForTokenClassification"),j8t.forEach(t),oUo=r(iPe," (BigBird model)"),iPe.forEach(t),rUo=i(J),Av=n(J,"LI",{});var dPe=s(Av);uue=n(dPe,"STRONG",{});var D8t=s(uue);tUo=r(D8t,"bloom"),D8t.forEach(t),aUo=r(dPe," \u2014 "),cz=n(dPe,"A",{href:!0});var G8t=s(cz);nUo=r(G8t,"BloomForTokenClassification"),G8t.forEach(t),sUo=r(dPe," (BLOOM model)"),dPe.forEach(t),lUo=i(J),Lv=n(J,"LI",{});var cPe=s(Lv);bue=n(cPe,"STRONG",{});var O8t=s(bue);iUo=r(O8t,"camembert"),O8t.forEach(t),dUo=r(cPe," \u2014 "),fz=n(cPe,"A",{href:!0});var V8t=s(fz);cUo=r(V8t,"CamembertForTokenClassification"),V8t.forEach(t),fUo=r(cPe," (CamemBERT model)"),cPe.forEach(t),mUo=i(J),yv=n(J,"LI",{});var fPe=s(yv);vue=n(fPe,"STRONG",{});var X8t=s(vue);gUo=r(X8t,"canine"),X8t.forEach(t),hUo=r(fPe," \u2014 "),mz=n(fPe,"A",{href:!0});var z8t=s(mz);pUo=r(z8t,"CanineForTokenClassification"),z8t.forEach(t),_Uo=r(fPe," (CANINE model)"),fPe.forEach(t),uUo=i(J),xv=n(J,"LI",{});var mPe=s(xv);Fue=n(mPe,"STRONG",{});var Q8t=s(Fue);bUo=r(Q8t,"convbert"),Q8t.forEach(t),vUo=r(mPe," \u2014 "),gz=n(mPe,"A",{href:!0});var W8t=s(gz);FUo=r(W8t,"ConvBertForTokenClassification"),W8t.forEach(t),TUo=r(mPe," (ConvBERT model)"),mPe.forEach(t),MUo=i(J),$v=n(J,"LI",{});var gPe=s($v);Tue=n(gPe,"STRONG",{});var H8t=s(Tue);EUo=r(H8t,"data2vec-text"),H8t.forEach(t),CUo=r(gPe," \u2014 "),hz=n(gPe,"A",{href:!0});var U8t=s(hz);wUo=r(U8t,"Data2VecTextForTokenClassification"),U8t.forEach(t),AUo=r(gPe," (Data2VecText model)"),gPe.forEach(t),LUo=i(J),kv=n(J,"LI",{});var hPe=s(kv);Mue=n(hPe,"STRONG",{});var J8t=s(Mue);yUo=r(J8t,"deberta"),J8t.forEach(t),xUo=r(hPe," \u2014 "),pz=n(hPe,"A",{href:!0});var Y8t=s(pz);$Uo=r(Y8t,"DebertaForTokenClassification"),Y8t.forEach(t),kUo=r(hPe," (DeBERTa model)"),hPe.forEach(t),SUo=i(J),Sv=n(J,"LI",{});var pPe=s(Sv);Eue=n(pPe,"STRONG",{});var K8t=s(Eue);RUo=r(K8t,"deberta-v2"),K8t.forEach(t),PUo=r(pPe," \u2014 "),_z=n(pPe,"A",{href:!0});var Z8t=s(_z);BUo=r(Z8t,"DebertaV2ForTokenClassification"),Z8t.forEach(t),IUo=r(pPe," (DeBERTa-v2 model)"),pPe.forEach(t),NUo=i(J),Rv=n(J,"LI",{});var _Pe=s(Rv);Cue=n(_Pe,"STRONG",{});var eMt=s(Cue);qUo=r(eMt,"distilbert"),eMt.forEach(t),jUo=r(_Pe," \u2014 "),uz=n(_Pe,"A",{href:!0});var oMt=s(uz);DUo=r(oMt,"DistilBertForTokenClassification"),oMt.forEach(t),GUo=r(_Pe," (DistilBERT model)"),_Pe.forEach(t),OUo=i(J),Pv=n(J,"LI",{});var uPe=s(Pv);wue=n(uPe,"STRONG",{});var rMt=s(wue);VUo=r(rMt,"electra"),rMt.forEach(t),XUo=r(uPe," \u2014 "),bz=n(uPe,"A",{href:!0});var tMt=s(bz);zUo=r(tMt,"ElectraForTokenClassification"),tMt.forEach(t),QUo=r(uPe," (ELECTRA model)"),uPe.forEach(t),WUo=i(J),Bv=n(J,"LI",{});var bPe=s(Bv);Aue=n(bPe,"STRONG",{});var aMt=s(Aue);HUo=r(aMt,"flaubert"),aMt.forEach(t),UUo=r(bPe," \u2014 "),vz=n(bPe,"A",{href:!0});var nMt=s(vz);JUo=r(nMt,"FlaubertForTokenClassification"),nMt.forEach(t),YUo=r(bPe," (FlauBERT model)"),bPe.forEach(t),KUo=i(J),Iv=n(J,"LI",{});var vPe=s(Iv);Lue=n(vPe,"STRONG",{});var sMt=s(Lue);ZUo=r(sMt,"fnet"),sMt.forEach(t),eJo=r(vPe," \u2014 "),Fz=n(vPe,"A",{href:!0});var lMt=s(Fz);oJo=r(lMt,"FNetForTokenClassification"),lMt.forEach(t),rJo=r(vPe," (FNet model)"),vPe.forEach(t),tJo=i(J),Nv=n(J,"LI",{});var FPe=s(Nv);yue=n(FPe,"STRONG",{});var iMt=s(yue);aJo=r(iMt,"funnel"),iMt.forEach(t),nJo=r(FPe," \u2014 "),Tz=n(FPe,"A",{href:!0});var dMt=s(Tz);sJo=r(dMt,"FunnelForTokenClassification"),dMt.forEach(t),lJo=r(FPe," (Funnel Transformer model)"),FPe.forEach(t),iJo=i(J),qv=n(J,"LI",{});var TPe=s(qv);xue=n(TPe,"STRONG",{});var cMt=s(xue);dJo=r(cMt,"gpt2"),cMt.forEach(t),cJo=r(TPe," \u2014 "),Mz=n(TPe,"A",{href:!0});var fMt=s(Mz);fJo=r(fMt,"GPT2ForTokenClassification"),fMt.forEach(t),mJo=r(TPe," (OpenAI GPT-2 model)"),TPe.forEach(t),gJo=i(J),jv=n(J,"LI",{});var MPe=s(jv);$ue=n(MPe,"STRONG",{});var mMt=s($ue);hJo=r(mMt,"ibert"),mMt.forEach(t),pJo=r(MPe," \u2014 "),Ez=n(MPe,"A",{href:!0});var gMt=s(Ez);_Jo=r(gMt,"IBertForTokenClassification"),gMt.forEach(t),uJo=r(MPe," (I-BERT model)"),MPe.forEach(t),bJo=i(J),Dv=n(J,"LI",{});var EPe=s(Dv);kue=n(EPe,"STRONG",{});var hMt=s(kue);vJo=r(hMt,"layoutlm"),hMt.forEach(t),FJo=r(EPe," \u2014 "),Cz=n(EPe,"A",{href:!0});var pMt=s(Cz);TJo=r(pMt,"LayoutLMForTokenClassification"),pMt.forEach(t),MJo=r(EPe," (LayoutLM model)"),EPe.forEach(t),EJo=i(J),Gv=n(J,"LI",{});var CPe=s(Gv);Sue=n(CPe,"STRONG",{});var _Mt=s(Sue);CJo=r(_Mt,"layoutlmv2"),_Mt.forEach(t),wJo=r(CPe," \u2014 "),wz=n(CPe,"A",{href:!0});var uMt=s(wz);AJo=r(uMt,"LayoutLMv2ForTokenClassification"),uMt.forEach(t),LJo=r(CPe," (LayoutLMv2 model)"),CPe.forEach(t),yJo=i(J),Ov=n(J,"LI",{});var wPe=s(Ov);Rue=n(wPe,"STRONG",{});var bMt=s(Rue);xJo=r(bMt,"layoutlmv3"),bMt.forEach(t),$Jo=r(wPe," \u2014 "),Az=n(wPe,"A",{href:!0});var vMt=s(Az);kJo=r(vMt,"LayoutLMv3ForTokenClassification"),vMt.forEach(t),SJo=r(wPe," (LayoutLMv3 model)"),wPe.forEach(t),RJo=i(J),Vv=n(J,"LI",{});var APe=s(Vv);Pue=n(APe,"STRONG",{});var FMt=s(Pue);PJo=r(FMt,"longformer"),FMt.forEach(t),BJo=r(APe," \u2014 "),Lz=n(APe,"A",{href:!0});var TMt=s(Lz);IJo=r(TMt,"LongformerForTokenClassification"),TMt.forEach(t),NJo=r(APe," (Longformer model)"),APe.forEach(t),qJo=i(J),Xv=n(J,"LI",{});var LPe=s(Xv);Bue=n(LPe,"STRONG",{});var MMt=s(Bue);jJo=r(MMt,"megatron-bert"),MMt.forEach(t),DJo=r(LPe," \u2014 "),yz=n(LPe,"A",{href:!0});var EMt=s(yz);GJo=r(EMt,"MegatronBertForTokenClassification"),EMt.forEach(t),OJo=r(LPe," (Megatron-BERT model)"),LPe.forEach(t),VJo=i(J),zv=n(J,"LI",{});var yPe=s(zv);Iue=n(yPe,"STRONG",{});var CMt=s(Iue);XJo=r(CMt,"mobilebert"),CMt.forEach(t),zJo=r(yPe," \u2014 "),xz=n(yPe,"A",{href:!0});var wMt=s(xz);QJo=r(wMt,"MobileBertForTokenClassification"),wMt.forEach(t),WJo=r(yPe," (MobileBERT model)"),yPe.forEach(t),HJo=i(J),Qv=n(J,"LI",{});var xPe=s(Qv);Nue=n(xPe,"STRONG",{});var AMt=s(Nue);UJo=r(AMt,"mpnet"),AMt.forEach(t),JJo=r(xPe," \u2014 "),$z=n(xPe,"A",{href:!0});var LMt=s($z);YJo=r(LMt,"MPNetForTokenClassification"),LMt.forEach(t),KJo=r(xPe," (MPNet model)"),xPe.forEach(t),ZJo=i(J),Wv=n(J,"LI",{});var $Pe=s(Wv);que=n($Pe,"STRONG",{});var yMt=s(que);eYo=r(yMt,"nezha"),yMt.forEach(t),oYo=r($Pe," \u2014 "),kz=n($Pe,"A",{href:!0});var xMt=s(kz);rYo=r(xMt,"NezhaForTokenClassification"),xMt.forEach(t),tYo=r($Pe," (Nezha model)"),$Pe.forEach(t),aYo=i(J),Hv=n(J,"LI",{});var kPe=s(Hv);jue=n(kPe,"STRONG",{});var $Mt=s(jue);nYo=r($Mt,"nystromformer"),$Mt.forEach(t),sYo=r(kPe," \u2014 "),Sz=n(kPe,"A",{href:!0});var kMt=s(Sz);lYo=r(kMt,"NystromformerForTokenClassification"),kMt.forEach(t),iYo=r(kPe," (Nystr\xF6mformer model)"),kPe.forEach(t),dYo=i(J),Uv=n(J,"LI",{});var SPe=s(Uv);Due=n(SPe,"STRONG",{});var SMt=s(Due);cYo=r(SMt,"qdqbert"),SMt.forEach(t),fYo=r(SPe," \u2014 "),Rz=n(SPe,"A",{href:!0});var RMt=s(Rz);mYo=r(RMt,"QDQBertForTokenClassification"),RMt.forEach(t),gYo=r(SPe," (QDQBert model)"),SPe.forEach(t),hYo=i(J),Jv=n(J,"LI",{});var RPe=s(Jv);Gue=n(RPe,"STRONG",{});var PMt=s(Gue);pYo=r(PMt,"rembert"),PMt.forEach(t),_Yo=r(RPe," \u2014 "),Pz=n(RPe,"A",{href:!0});var BMt=s(Pz);uYo=r(BMt,"RemBertForTokenClassification"),BMt.forEach(t),bYo=r(RPe," (RemBERT model)"),RPe.forEach(t),vYo=i(J),Yv=n(J,"LI",{});var PPe=s(Yv);Oue=n(PPe,"STRONG",{});var IMt=s(Oue);FYo=r(IMt,"roberta"),IMt.forEach(t),TYo=r(PPe," \u2014 "),Bz=n(PPe,"A",{href:!0});var NMt=s(Bz);MYo=r(NMt,"RobertaForTokenClassification"),NMt.forEach(t),EYo=r(PPe," (RoBERTa model)"),PPe.forEach(t),CYo=i(J),Kv=n(J,"LI",{});var BPe=s(Kv);Vue=n(BPe,"STRONG",{});var qMt=s(Vue);wYo=r(qMt,"roformer"),qMt.forEach(t),AYo=r(BPe," \u2014 "),Iz=n(BPe,"A",{href:!0});var jMt=s(Iz);LYo=r(jMt,"RoFormerForTokenClassification"),jMt.forEach(t),yYo=r(BPe," (RoFormer model)"),BPe.forEach(t),xYo=i(J),Zv=n(J,"LI",{});var IPe=s(Zv);Xue=n(IPe,"STRONG",{});var DMt=s(Xue);$Yo=r(DMt,"squeezebert"),DMt.forEach(t),kYo=r(IPe," \u2014 "),Nz=n(IPe,"A",{href:!0});var GMt=s(Nz);SYo=r(GMt,"SqueezeBertForTokenClassification"),GMt.forEach(t),RYo=r(IPe," (SqueezeBERT model)"),IPe.forEach(t),PYo=i(J),eF=n(J,"LI",{});var NPe=s(eF);zue=n(NPe,"STRONG",{});var OMt=s(zue);BYo=r(OMt,"xlm"),OMt.forEach(t),IYo=r(NPe," \u2014 "),qz=n(NPe,"A",{href:!0});var VMt=s(qz);NYo=r(VMt,"XLMForTokenClassification"),VMt.forEach(t),qYo=r(NPe," (XLM model)"),NPe.forEach(t),jYo=i(J),oF=n(J,"LI",{});var qPe=s(oF);Que=n(qPe,"STRONG",{});var XMt=s(Que);DYo=r(XMt,"xlm-roberta"),XMt.forEach(t),GYo=r(qPe," \u2014 "),jz=n(qPe,"A",{href:!0});var zMt=s(jz);OYo=r(zMt,"XLMRobertaForTokenClassification"),zMt.forEach(t),VYo=r(qPe," (XLM-RoBERTa model)"),qPe.forEach(t),XYo=i(J),rF=n(J,"LI",{});var jPe=s(rF);Wue=n(jPe,"STRONG",{});var QMt=s(Wue);zYo=r(QMt,"xlm-roberta-xl"),QMt.forEach(t),QYo=r(jPe," \u2014 "),Dz=n(jPe,"A",{href:!0});var WMt=s(Dz);WYo=r(WMt,"XLMRobertaXLForTokenClassification"),WMt.forEach(t),HYo=r(jPe," (XLM-RoBERTa-XL model)"),jPe.forEach(t),UYo=i(J),tF=n(J,"LI",{});var DPe=s(tF);Hue=n(DPe,"STRONG",{});var HMt=s(Hue);JYo=r(HMt,"xlnet"),HMt.forEach(t),YYo=r(DPe," \u2014 "),Gz=n(DPe,"A",{href:!0});var UMt=s(Gz);KYo=r(UMt,"XLNetForTokenClassification"),UMt.forEach(t),ZYo=r(DPe," (XLNet model)"),DPe.forEach(t),eKo=i(J),aF=n(J,"LI",{});var GPe=s(aF);Uue=n(GPe,"STRONG",{});var JMt=s(Uue);oKo=r(JMt,"yoso"),JMt.forEach(t),rKo=r(GPe," \u2014 "),Oz=n(GPe,"A",{href:!0});var YMt=s(Oz);tKo=r(YMt,"YosoForTokenClassification"),YMt.forEach(t),aKo=r(GPe," (YOSO model)"),GPe.forEach(t),J.forEach(t),nKo=i(ga),nF=n(ga,"P",{});var OPe=s(nF);sKo=r(OPe,"The model is set in evaluation mode by default using "),Jue=n(OPe,"CODE",{});var KMt=s(Jue);lKo=r(KMt,"model.eval()"),KMt.forEach(t),iKo=r(OPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yue=n(OPe,"CODE",{});var ZMt=s(Yue);dKo=r(ZMt,"model.train()"),ZMt.forEach(t),OPe.forEach(t),cKo=i(ga),T(sF.$$.fragment,ga),ga.forEach(t),ll.forEach(t),_Ve=i(f),cd=n(f,"H2",{class:!0});var Mze=s(cd);lF=n(Mze,"A",{id:!0,class:!0,href:!0});var e4t=s(lF);Kue=n(e4t,"SPAN",{});var o4t=s(Kue);T(ny.$$.fragment,o4t),o4t.forEach(t),e4t.forEach(t),fKo=i(Mze),Zue=n(Mze,"SPAN",{});var r4t=s(Zue);mKo=r(r4t,"AutoModelForQuestionAnswering"),r4t.forEach(t),Mze.forEach(t),uVe=i(f),jo=n(f,"DIV",{class:!0});var il=s(jo);T(sy.$$.fragment,il),gKo=i(il),fd=n(il,"P",{});var gre=s(fd);hKo=r(gre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Vz=n(gre,"A",{href:!0});var t4t=s(Vz);pKo=r(t4t,"from_pretrained()"),t4t.forEach(t),_Ko=r(gre," class method or the "),Xz=n(gre,"A",{href:!0});var a4t=s(Xz);uKo=r(a4t,"from_config()"),a4t.forEach(t),bKo=r(gre,` class
method.`),gre.forEach(t),vKo=i(il),ly=n(il,"P",{});var Eze=s(ly);FKo=r(Eze,"This class cannot be instantiated directly using "),e7e=n(Eze,"CODE",{});var n4t=s(e7e);TKo=r(n4t,"__init__()"),n4t.forEach(t),MKo=r(Eze," (throws an error)."),Eze.forEach(t),EKo=i(il),ht=n(il,"DIV",{class:!0});var iA=s(ht);T(iy.$$.fragment,iA),CKo=i(iA),o7e=n(iA,"P",{});var s4t=s(o7e);wKo=r(s4t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),s4t.forEach(t),AKo=i(iA),md=n(iA,"P",{});var hre=s(md);LKo=r(hre,`Note:
Loading a model from its configuration file does `),r7e=n(hre,"STRONG",{});var l4t=s(r7e);yKo=r(l4t,"not"),l4t.forEach(t),xKo=r(hre,` load the model weights. It only affects the
model\u2019s configuration. Use `),zz=n(hre,"A",{href:!0});var i4t=s(zz);$Ko=r(i4t,"from_pretrained()"),i4t.forEach(t),kKo=r(hre," to load the model weights."),hre.forEach(t),SKo=i(iA),T(iF.$$.fragment,iA),iA.forEach(t),RKo=i(il),no=n(il,"DIV",{class:!0});var ha=s(no);T(dy.$$.fragment,ha),PKo=i(ha),t7e=n(ha,"P",{});var d4t=s(t7e);BKo=r(d4t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),d4t.forEach(t),IKo=i(ha),Oa=n(ha,"P",{});var dA=s(Oa);NKo=r(dA,"The model class to instantiate is selected based on the "),a7e=n(dA,"CODE",{});var c4t=s(a7e);qKo=r(c4t,"model_type"),c4t.forEach(t),jKo=r(dA,` property of the config object (either
passed as an argument or loaded from `),n7e=n(dA,"CODE",{});var f4t=s(n7e);DKo=r(f4t,"pretrained_model_name_or_path"),f4t.forEach(t),GKo=r(dA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s7e=n(dA,"CODE",{});var m4t=s(s7e);OKo=r(m4t,"pretrained_model_name_or_path"),m4t.forEach(t),VKo=r(dA,":"),dA.forEach(t),XKo=i(ha),V=n(ha,"UL",{});var X=s(V);dF=n(X,"LI",{});var VPe=s(dF);l7e=n(VPe,"STRONG",{});var g4t=s(l7e);zKo=r(g4t,"albert"),g4t.forEach(t),QKo=r(VPe," \u2014 "),Qz=n(VPe,"A",{href:!0});var h4t=s(Qz);WKo=r(h4t,"AlbertForQuestionAnswering"),h4t.forEach(t),HKo=r(VPe," (ALBERT model)"),VPe.forEach(t),UKo=i(X),cF=n(X,"LI",{});var XPe=s(cF);i7e=n(XPe,"STRONG",{});var p4t=s(i7e);JKo=r(p4t,"bart"),p4t.forEach(t),YKo=r(XPe," \u2014 "),Wz=n(XPe,"A",{href:!0});var _4t=s(Wz);KKo=r(_4t,"BartForQuestionAnswering"),_4t.forEach(t),ZKo=r(XPe," (BART model)"),XPe.forEach(t),eZo=i(X),fF=n(X,"LI",{});var zPe=s(fF);d7e=n(zPe,"STRONG",{});var u4t=s(d7e);oZo=r(u4t,"bert"),u4t.forEach(t),rZo=r(zPe," \u2014 "),Hz=n(zPe,"A",{href:!0});var b4t=s(Hz);tZo=r(b4t,"BertForQuestionAnswering"),b4t.forEach(t),aZo=r(zPe," (BERT model)"),zPe.forEach(t),nZo=i(X),mF=n(X,"LI",{});var QPe=s(mF);c7e=n(QPe,"STRONG",{});var v4t=s(c7e);sZo=r(v4t,"big_bird"),v4t.forEach(t),lZo=r(QPe," \u2014 "),Uz=n(QPe,"A",{href:!0});var F4t=s(Uz);iZo=r(F4t,"BigBirdForQuestionAnswering"),F4t.forEach(t),dZo=r(QPe," (BigBird model)"),QPe.forEach(t),cZo=i(X),gF=n(X,"LI",{});var WPe=s(gF);f7e=n(WPe,"STRONG",{});var T4t=s(f7e);fZo=r(T4t,"bigbird_pegasus"),T4t.forEach(t),mZo=r(WPe," \u2014 "),Jz=n(WPe,"A",{href:!0});var M4t=s(Jz);gZo=r(M4t,"BigBirdPegasusForQuestionAnswering"),M4t.forEach(t),hZo=r(WPe," (BigBird-Pegasus model)"),WPe.forEach(t),pZo=i(X),hF=n(X,"LI",{});var HPe=s(hF);m7e=n(HPe,"STRONG",{});var E4t=s(m7e);_Zo=r(E4t,"camembert"),E4t.forEach(t),uZo=r(HPe," \u2014 "),Yz=n(HPe,"A",{href:!0});var C4t=s(Yz);bZo=r(C4t,"CamembertForQuestionAnswering"),C4t.forEach(t),vZo=r(HPe," (CamemBERT model)"),HPe.forEach(t),FZo=i(X),pF=n(X,"LI",{});var UPe=s(pF);g7e=n(UPe,"STRONG",{});var w4t=s(g7e);TZo=r(w4t,"canine"),w4t.forEach(t),MZo=r(UPe," \u2014 "),Kz=n(UPe,"A",{href:!0});var A4t=s(Kz);EZo=r(A4t,"CanineForQuestionAnswering"),A4t.forEach(t),CZo=r(UPe," (CANINE model)"),UPe.forEach(t),wZo=i(X),_F=n(X,"LI",{});var JPe=s(_F);h7e=n(JPe,"STRONG",{});var L4t=s(h7e);AZo=r(L4t,"convbert"),L4t.forEach(t),LZo=r(JPe," \u2014 "),Zz=n(JPe,"A",{href:!0});var y4t=s(Zz);yZo=r(y4t,"ConvBertForQuestionAnswering"),y4t.forEach(t),xZo=r(JPe," (ConvBERT model)"),JPe.forEach(t),$Zo=i(X),uF=n(X,"LI",{});var YPe=s(uF);p7e=n(YPe,"STRONG",{});var x4t=s(p7e);kZo=r(x4t,"data2vec-text"),x4t.forEach(t),SZo=r(YPe," \u2014 "),eQ=n(YPe,"A",{href:!0});var $4t=s(eQ);RZo=r($4t,"Data2VecTextForQuestionAnswering"),$4t.forEach(t),PZo=r(YPe," (Data2VecText model)"),YPe.forEach(t),BZo=i(X),bF=n(X,"LI",{});var KPe=s(bF);_7e=n(KPe,"STRONG",{});var k4t=s(_7e);IZo=r(k4t,"deberta"),k4t.forEach(t),NZo=r(KPe," \u2014 "),oQ=n(KPe,"A",{href:!0});var S4t=s(oQ);qZo=r(S4t,"DebertaForQuestionAnswering"),S4t.forEach(t),jZo=r(KPe," (DeBERTa model)"),KPe.forEach(t),DZo=i(X),vF=n(X,"LI",{});var ZPe=s(vF);u7e=n(ZPe,"STRONG",{});var R4t=s(u7e);GZo=r(R4t,"deberta-v2"),R4t.forEach(t),OZo=r(ZPe," \u2014 "),rQ=n(ZPe,"A",{href:!0});var P4t=s(rQ);VZo=r(P4t,"DebertaV2ForQuestionAnswering"),P4t.forEach(t),XZo=r(ZPe," (DeBERTa-v2 model)"),ZPe.forEach(t),zZo=i(X),FF=n(X,"LI",{});var eBe=s(FF);b7e=n(eBe,"STRONG",{});var B4t=s(b7e);QZo=r(B4t,"distilbert"),B4t.forEach(t),WZo=r(eBe," \u2014 "),tQ=n(eBe,"A",{href:!0});var I4t=s(tQ);HZo=r(I4t,"DistilBertForQuestionAnswering"),I4t.forEach(t),UZo=r(eBe," (DistilBERT model)"),eBe.forEach(t),JZo=i(X),TF=n(X,"LI",{});var oBe=s(TF);v7e=n(oBe,"STRONG",{});var N4t=s(v7e);YZo=r(N4t,"electra"),N4t.forEach(t),KZo=r(oBe," \u2014 "),aQ=n(oBe,"A",{href:!0});var q4t=s(aQ);ZZo=r(q4t,"ElectraForQuestionAnswering"),q4t.forEach(t),eer=r(oBe," (ELECTRA model)"),oBe.forEach(t),oer=i(X),MF=n(X,"LI",{});var rBe=s(MF);F7e=n(rBe,"STRONG",{});var j4t=s(F7e);rer=r(j4t,"flaubert"),j4t.forEach(t),ter=r(rBe," \u2014 "),nQ=n(rBe,"A",{href:!0});var D4t=s(nQ);aer=r(D4t,"FlaubertForQuestionAnsweringSimple"),D4t.forEach(t),ner=r(rBe," (FlauBERT model)"),rBe.forEach(t),ser=i(X),EF=n(X,"LI",{});var tBe=s(EF);T7e=n(tBe,"STRONG",{});var G4t=s(T7e);ler=r(G4t,"fnet"),G4t.forEach(t),ier=r(tBe," \u2014 "),sQ=n(tBe,"A",{href:!0});var O4t=s(sQ);der=r(O4t,"FNetForQuestionAnswering"),O4t.forEach(t),cer=r(tBe," (FNet model)"),tBe.forEach(t),fer=i(X),CF=n(X,"LI",{});var aBe=s(CF);M7e=n(aBe,"STRONG",{});var V4t=s(M7e);mer=r(V4t,"funnel"),V4t.forEach(t),ger=r(aBe," \u2014 "),lQ=n(aBe,"A",{href:!0});var X4t=s(lQ);her=r(X4t,"FunnelForQuestionAnswering"),X4t.forEach(t),per=r(aBe," (Funnel Transformer model)"),aBe.forEach(t),_er=i(X),wF=n(X,"LI",{});var nBe=s(wF);E7e=n(nBe,"STRONG",{});var z4t=s(E7e);uer=r(z4t,"gptj"),z4t.forEach(t),ber=r(nBe," \u2014 "),iQ=n(nBe,"A",{href:!0});var Q4t=s(iQ);ver=r(Q4t,"GPTJForQuestionAnswering"),Q4t.forEach(t),Fer=r(nBe," (GPT-J model)"),nBe.forEach(t),Ter=i(X),AF=n(X,"LI",{});var sBe=s(AF);C7e=n(sBe,"STRONG",{});var W4t=s(C7e);Mer=r(W4t,"ibert"),W4t.forEach(t),Eer=r(sBe," \u2014 "),dQ=n(sBe,"A",{href:!0});var H4t=s(dQ);Cer=r(H4t,"IBertForQuestionAnswering"),H4t.forEach(t),wer=r(sBe," (I-BERT model)"),sBe.forEach(t),Aer=i(X),LF=n(X,"LI",{});var lBe=s(LF);w7e=n(lBe,"STRONG",{});var U4t=s(w7e);Ler=r(U4t,"layoutlmv2"),U4t.forEach(t),yer=r(lBe," \u2014 "),cQ=n(lBe,"A",{href:!0});var J4t=s(cQ);xer=r(J4t,"LayoutLMv2ForQuestionAnswering"),J4t.forEach(t),$er=r(lBe," (LayoutLMv2 model)"),lBe.forEach(t),ker=i(X),yF=n(X,"LI",{});var iBe=s(yF);A7e=n(iBe,"STRONG",{});var Y4t=s(A7e);Ser=r(Y4t,"layoutlmv3"),Y4t.forEach(t),Rer=r(iBe," \u2014 "),fQ=n(iBe,"A",{href:!0});var K4t=s(fQ);Per=r(K4t,"LayoutLMv3ForQuestionAnswering"),K4t.forEach(t),Ber=r(iBe," (LayoutLMv3 model)"),iBe.forEach(t),Ier=i(X),xF=n(X,"LI",{});var dBe=s(xF);L7e=n(dBe,"STRONG",{});var Z4t=s(L7e);Ner=r(Z4t,"led"),Z4t.forEach(t),qer=r(dBe," \u2014 "),mQ=n(dBe,"A",{href:!0});var eEt=s(mQ);jer=r(eEt,"LEDForQuestionAnswering"),eEt.forEach(t),Der=r(dBe," (LED model)"),dBe.forEach(t),Ger=i(X),$F=n(X,"LI",{});var cBe=s($F);y7e=n(cBe,"STRONG",{});var oEt=s(y7e);Oer=r(oEt,"longformer"),oEt.forEach(t),Ver=r(cBe," \u2014 "),gQ=n(cBe,"A",{href:!0});var rEt=s(gQ);Xer=r(rEt,"LongformerForQuestionAnswering"),rEt.forEach(t),zer=r(cBe," (Longformer model)"),cBe.forEach(t),Qer=i(X),kF=n(X,"LI",{});var fBe=s(kF);x7e=n(fBe,"STRONG",{});var tEt=s(x7e);Wer=r(tEt,"lxmert"),tEt.forEach(t),Her=r(fBe," \u2014 "),hQ=n(fBe,"A",{href:!0});var aEt=s(hQ);Uer=r(aEt,"LxmertForQuestionAnswering"),aEt.forEach(t),Jer=r(fBe," (LXMERT model)"),fBe.forEach(t),Yer=i(X),SF=n(X,"LI",{});var mBe=s(SF);$7e=n(mBe,"STRONG",{});var nEt=s($7e);Ker=r(nEt,"mbart"),nEt.forEach(t),Zer=r(mBe," \u2014 "),pQ=n(mBe,"A",{href:!0});var sEt=s(pQ);eor=r(sEt,"MBartForQuestionAnswering"),sEt.forEach(t),oor=r(mBe," (mBART model)"),mBe.forEach(t),ror=i(X),RF=n(X,"LI",{});var gBe=s(RF);k7e=n(gBe,"STRONG",{});var lEt=s(k7e);tor=r(lEt,"megatron-bert"),lEt.forEach(t),aor=r(gBe," \u2014 "),_Q=n(gBe,"A",{href:!0});var iEt=s(_Q);nor=r(iEt,"MegatronBertForQuestionAnswering"),iEt.forEach(t),sor=r(gBe," (Megatron-BERT model)"),gBe.forEach(t),lor=i(X),PF=n(X,"LI",{});var hBe=s(PF);S7e=n(hBe,"STRONG",{});var dEt=s(S7e);ior=r(dEt,"mobilebert"),dEt.forEach(t),dor=r(hBe," \u2014 "),uQ=n(hBe,"A",{href:!0});var cEt=s(uQ);cor=r(cEt,"MobileBertForQuestionAnswering"),cEt.forEach(t),mor=r(hBe," (MobileBERT model)"),hBe.forEach(t),gor=i(X),BF=n(X,"LI",{});var pBe=s(BF);R7e=n(pBe,"STRONG",{});var fEt=s(R7e);hor=r(fEt,"mpnet"),fEt.forEach(t),por=r(pBe," \u2014 "),bQ=n(pBe,"A",{href:!0});var mEt=s(bQ);_or=r(mEt,"MPNetForQuestionAnswering"),mEt.forEach(t),uor=r(pBe," (MPNet model)"),pBe.forEach(t),bor=i(X),IF=n(X,"LI",{});var _Be=s(IF);P7e=n(_Be,"STRONG",{});var gEt=s(P7e);vor=r(gEt,"mvp"),gEt.forEach(t),For=r(_Be," \u2014 "),vQ=n(_Be,"A",{href:!0});var hEt=s(vQ);Tor=r(hEt,"MvpForQuestionAnswering"),hEt.forEach(t),Mor=r(_Be," (MVP model)"),_Be.forEach(t),Eor=i(X),NF=n(X,"LI",{});var uBe=s(NF);B7e=n(uBe,"STRONG",{});var pEt=s(B7e);Cor=r(pEt,"nezha"),pEt.forEach(t),wor=r(uBe," \u2014 "),FQ=n(uBe,"A",{href:!0});var _Et=s(FQ);Aor=r(_Et,"NezhaForQuestionAnswering"),_Et.forEach(t),Lor=r(uBe," (Nezha model)"),uBe.forEach(t),yor=i(X),qF=n(X,"LI",{});var bBe=s(qF);I7e=n(bBe,"STRONG",{});var uEt=s(I7e);xor=r(uEt,"nystromformer"),uEt.forEach(t),$or=r(bBe," \u2014 "),TQ=n(bBe,"A",{href:!0});var bEt=s(TQ);kor=r(bEt,"NystromformerForQuestionAnswering"),bEt.forEach(t),Sor=r(bBe," (Nystr\xF6mformer model)"),bBe.forEach(t),Ror=i(X),jF=n(X,"LI",{});var vBe=s(jF);N7e=n(vBe,"STRONG",{});var vEt=s(N7e);Por=r(vEt,"qdqbert"),vEt.forEach(t),Bor=r(vBe," \u2014 "),MQ=n(vBe,"A",{href:!0});var FEt=s(MQ);Ior=r(FEt,"QDQBertForQuestionAnswering"),FEt.forEach(t),Nor=r(vBe," (QDQBert model)"),vBe.forEach(t),qor=i(X),DF=n(X,"LI",{});var FBe=s(DF);q7e=n(FBe,"STRONG",{});var TEt=s(q7e);jor=r(TEt,"reformer"),TEt.forEach(t),Dor=r(FBe," \u2014 "),EQ=n(FBe,"A",{href:!0});var MEt=s(EQ);Gor=r(MEt,"ReformerForQuestionAnswering"),MEt.forEach(t),Oor=r(FBe," (Reformer model)"),FBe.forEach(t),Vor=i(X),GF=n(X,"LI",{});var TBe=s(GF);j7e=n(TBe,"STRONG",{});var EEt=s(j7e);Xor=r(EEt,"rembert"),EEt.forEach(t),zor=r(TBe," \u2014 "),CQ=n(TBe,"A",{href:!0});var CEt=s(CQ);Qor=r(CEt,"RemBertForQuestionAnswering"),CEt.forEach(t),Wor=r(TBe," (RemBERT model)"),TBe.forEach(t),Hor=i(X),OF=n(X,"LI",{});var MBe=s(OF);D7e=n(MBe,"STRONG",{});var wEt=s(D7e);Uor=r(wEt,"roberta"),wEt.forEach(t),Jor=r(MBe," \u2014 "),wQ=n(MBe,"A",{href:!0});var AEt=s(wQ);Yor=r(AEt,"RobertaForQuestionAnswering"),AEt.forEach(t),Kor=r(MBe," (RoBERTa model)"),MBe.forEach(t),Zor=i(X),VF=n(X,"LI",{});var EBe=s(VF);G7e=n(EBe,"STRONG",{});var LEt=s(G7e);err=r(LEt,"roformer"),LEt.forEach(t),orr=r(EBe," \u2014 "),AQ=n(EBe,"A",{href:!0});var yEt=s(AQ);rrr=r(yEt,"RoFormerForQuestionAnswering"),yEt.forEach(t),trr=r(EBe," (RoFormer model)"),EBe.forEach(t),arr=i(X),XF=n(X,"LI",{});var CBe=s(XF);O7e=n(CBe,"STRONG",{});var xEt=s(O7e);nrr=r(xEt,"splinter"),xEt.forEach(t),srr=r(CBe," \u2014 "),LQ=n(CBe,"A",{href:!0});var $Et=s(LQ);lrr=r($Et,"SplinterForQuestionAnswering"),$Et.forEach(t),irr=r(CBe," (Splinter model)"),CBe.forEach(t),drr=i(X),zF=n(X,"LI",{});var wBe=s(zF);V7e=n(wBe,"STRONG",{});var kEt=s(V7e);crr=r(kEt,"squeezebert"),kEt.forEach(t),frr=r(wBe," \u2014 "),yQ=n(wBe,"A",{href:!0});var SEt=s(yQ);mrr=r(SEt,"SqueezeBertForQuestionAnswering"),SEt.forEach(t),grr=r(wBe," (SqueezeBERT model)"),wBe.forEach(t),hrr=i(X),QF=n(X,"LI",{});var ABe=s(QF);X7e=n(ABe,"STRONG",{});var REt=s(X7e);prr=r(REt,"xlm"),REt.forEach(t),_rr=r(ABe," \u2014 "),xQ=n(ABe,"A",{href:!0});var PEt=s(xQ);urr=r(PEt,"XLMForQuestionAnsweringSimple"),PEt.forEach(t),brr=r(ABe," (XLM model)"),ABe.forEach(t),vrr=i(X),WF=n(X,"LI",{});var LBe=s(WF);z7e=n(LBe,"STRONG",{});var BEt=s(z7e);Frr=r(BEt,"xlm-roberta"),BEt.forEach(t),Trr=r(LBe," \u2014 "),$Q=n(LBe,"A",{href:!0});var IEt=s($Q);Mrr=r(IEt,"XLMRobertaForQuestionAnswering"),IEt.forEach(t),Err=r(LBe," (XLM-RoBERTa model)"),LBe.forEach(t),Crr=i(X),HF=n(X,"LI",{});var yBe=s(HF);Q7e=n(yBe,"STRONG",{});var NEt=s(Q7e);wrr=r(NEt,"xlm-roberta-xl"),NEt.forEach(t),Arr=r(yBe," \u2014 "),kQ=n(yBe,"A",{href:!0});var qEt=s(kQ);Lrr=r(qEt,"XLMRobertaXLForQuestionAnswering"),qEt.forEach(t),yrr=r(yBe," (XLM-RoBERTa-XL model)"),yBe.forEach(t),xrr=i(X),UF=n(X,"LI",{});var xBe=s(UF);W7e=n(xBe,"STRONG",{});var jEt=s(W7e);$rr=r(jEt,"xlnet"),jEt.forEach(t),krr=r(xBe," \u2014 "),SQ=n(xBe,"A",{href:!0});var DEt=s(SQ);Srr=r(DEt,"XLNetForQuestionAnsweringSimple"),DEt.forEach(t),Rrr=r(xBe," (XLNet model)"),xBe.forEach(t),Prr=i(X),JF=n(X,"LI",{});var $Be=s(JF);H7e=n($Be,"STRONG",{});var GEt=s(H7e);Brr=r(GEt,"yoso"),GEt.forEach(t),Irr=r($Be," \u2014 "),RQ=n($Be,"A",{href:!0});var OEt=s(RQ);Nrr=r(OEt,"YosoForQuestionAnswering"),OEt.forEach(t),qrr=r($Be," (YOSO model)"),$Be.forEach(t),X.forEach(t),jrr=i(ha),YF=n(ha,"P",{});var kBe=s(YF);Drr=r(kBe,"The model is set in evaluation mode by default using "),U7e=n(kBe,"CODE",{});var VEt=s(U7e);Grr=r(VEt,"model.eval()"),VEt.forEach(t),Orr=r(kBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),J7e=n(kBe,"CODE",{});var XEt=s(J7e);Vrr=r(XEt,"model.train()"),XEt.forEach(t),kBe.forEach(t),Xrr=i(ha),T(KF.$$.fragment,ha),ha.forEach(t),il.forEach(t),bVe=i(f),gd=n(f,"H2",{class:!0});var Cze=s(gd);ZF=n(Cze,"A",{id:!0,class:!0,href:!0});var zEt=s(ZF);Y7e=n(zEt,"SPAN",{});var QEt=s(Y7e);T(cy.$$.fragment,QEt),QEt.forEach(t),zEt.forEach(t),zrr=i(Cze),K7e=n(Cze,"SPAN",{});var WEt=s(K7e);Qrr=r(WEt,"AutoModelForTableQuestionAnswering"),WEt.forEach(t),Cze.forEach(t),vVe=i(f),Do=n(f,"DIV",{class:!0});var dl=s(Do);T(fy.$$.fragment,dl),Wrr=i(dl),hd=n(dl,"P",{});var pre=s(hd);Hrr=r(pre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),PQ=n(pre,"A",{href:!0});var HEt=s(PQ);Urr=r(HEt,"from_pretrained()"),HEt.forEach(t),Jrr=r(pre," class method or the "),BQ=n(pre,"A",{href:!0});var UEt=s(BQ);Yrr=r(UEt,"from_config()"),UEt.forEach(t),Krr=r(pre,` class
method.`),pre.forEach(t),Zrr=i(dl),my=n(dl,"P",{});var wze=s(my);etr=r(wze,"This class cannot be instantiated directly using "),Z7e=n(wze,"CODE",{});var JEt=s(Z7e);otr=r(JEt,"__init__()"),JEt.forEach(t),rtr=r(wze," (throws an error)."),wze.forEach(t),ttr=i(dl),pt=n(dl,"DIV",{class:!0});var cA=s(pt);T(gy.$$.fragment,cA),atr=i(cA),e1e=n(cA,"P",{});var YEt=s(e1e);ntr=r(YEt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),YEt.forEach(t),str=i(cA),pd=n(cA,"P",{});var _re=s(pd);ltr=r(_re,`Note:
Loading a model from its configuration file does `),o1e=n(_re,"STRONG",{});var KEt=s(o1e);itr=r(KEt,"not"),KEt.forEach(t),dtr=r(_re,` load the model weights. It only affects the
model\u2019s configuration. Use `),IQ=n(_re,"A",{href:!0});var ZEt=s(IQ);ctr=r(ZEt,"from_pretrained()"),ZEt.forEach(t),ftr=r(_re," to load the model weights."),_re.forEach(t),mtr=i(cA),T(eT.$$.fragment,cA),cA.forEach(t),gtr=i(dl),so=n(dl,"DIV",{class:!0});var pa=s(so);T(hy.$$.fragment,pa),htr=i(pa),r1e=n(pa,"P",{});var eCt=s(r1e);ptr=r(eCt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),eCt.forEach(t),_tr=i(pa),Va=n(pa,"P",{});var fA=s(Va);utr=r(fA,"The model class to instantiate is selected based on the "),t1e=n(fA,"CODE",{});var oCt=s(t1e);btr=r(oCt,"model_type"),oCt.forEach(t),vtr=r(fA,` property of the config object (either
passed as an argument or loaded from `),a1e=n(fA,"CODE",{});var rCt=s(a1e);Ftr=r(rCt,"pretrained_model_name_or_path"),rCt.forEach(t),Ttr=r(fA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n1e=n(fA,"CODE",{});var tCt=s(n1e);Mtr=r(tCt,"pretrained_model_name_or_path"),tCt.forEach(t),Etr=r(fA,":"),fA.forEach(t),Ctr=i(pa),s1e=n(pa,"UL",{});var aCt=s(s1e);oT=n(aCt,"LI",{});var SBe=s(oT);l1e=n(SBe,"STRONG",{});var nCt=s(l1e);wtr=r(nCt,"tapas"),nCt.forEach(t),Atr=r(SBe," \u2014 "),NQ=n(SBe,"A",{href:!0});var sCt=s(NQ);Ltr=r(sCt,"TapasForQuestionAnswering"),sCt.forEach(t),ytr=r(SBe," (TAPAS model)"),SBe.forEach(t),aCt.forEach(t),xtr=i(pa),rT=n(pa,"P",{});var RBe=s(rT);$tr=r(RBe,"The model is set in evaluation mode by default using "),i1e=n(RBe,"CODE",{});var lCt=s(i1e);ktr=r(lCt,"model.eval()"),lCt.forEach(t),Str=r(RBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),d1e=n(RBe,"CODE",{});var iCt=s(d1e);Rtr=r(iCt,"model.train()"),iCt.forEach(t),RBe.forEach(t),Ptr=i(pa),T(tT.$$.fragment,pa),pa.forEach(t),dl.forEach(t),FVe=i(f),_d=n(f,"H2",{class:!0});var Aze=s(_d);aT=n(Aze,"A",{id:!0,class:!0,href:!0});var dCt=s(aT);c1e=n(dCt,"SPAN",{});var cCt=s(c1e);T(py.$$.fragment,cCt),cCt.forEach(t),dCt.forEach(t),Btr=i(Aze),f1e=n(Aze,"SPAN",{});var fCt=s(f1e);Itr=r(fCt,"AutoModelForImageClassification"),fCt.forEach(t),Aze.forEach(t),TVe=i(f),Go=n(f,"DIV",{class:!0});var cl=s(Go);T(_y.$$.fragment,cl),Ntr=i(cl),ud=n(cl,"P",{});var ure=s(ud);qtr=r(ure,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),qQ=n(ure,"A",{href:!0});var mCt=s(qQ);jtr=r(mCt,"from_pretrained()"),mCt.forEach(t),Dtr=r(ure," class method or the "),jQ=n(ure,"A",{href:!0});var gCt=s(jQ);Gtr=r(gCt,"from_config()"),gCt.forEach(t),Otr=r(ure,` class
method.`),ure.forEach(t),Vtr=i(cl),uy=n(cl,"P",{});var Lze=s(uy);Xtr=r(Lze,"This class cannot be instantiated directly using "),m1e=n(Lze,"CODE",{});var hCt=s(m1e);ztr=r(hCt,"__init__()"),hCt.forEach(t),Qtr=r(Lze," (throws an error)."),Lze.forEach(t),Wtr=i(cl),_t=n(cl,"DIV",{class:!0});var mA=s(_t);T(by.$$.fragment,mA),Htr=i(mA),g1e=n(mA,"P",{});var pCt=s(g1e);Utr=r(pCt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),pCt.forEach(t),Jtr=i(mA),bd=n(mA,"P",{});var bre=s(bd);Ytr=r(bre,`Note:
Loading a model from its configuration file does `),h1e=n(bre,"STRONG",{});var _Ct=s(h1e);Ktr=r(_Ct,"not"),_Ct.forEach(t),Ztr=r(bre,` load the model weights. It only affects the
model\u2019s configuration. Use `),DQ=n(bre,"A",{href:!0});var uCt=s(DQ);ear=r(uCt,"from_pretrained()"),uCt.forEach(t),oar=r(bre," to load the model weights."),bre.forEach(t),rar=i(mA),T(nT.$$.fragment,mA),mA.forEach(t),tar=i(cl),lo=n(cl,"DIV",{class:!0});var _a=s(lo);T(vy.$$.fragment,_a),aar=i(_a),p1e=n(_a,"P",{});var bCt=s(p1e);nar=r(bCt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),bCt.forEach(t),sar=i(_a),Xa=n(_a,"P",{});var gA=s(Xa);lar=r(gA,"The model class to instantiate is selected based on the "),_1e=n(gA,"CODE",{});var vCt=s(_1e);iar=r(vCt,"model_type"),vCt.forEach(t),dar=r(gA,` property of the config object (either
passed as an argument or loaded from `),u1e=n(gA,"CODE",{});var FCt=s(u1e);car=r(FCt,"pretrained_model_name_or_path"),FCt.forEach(t),far=r(gA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b1e=n(gA,"CODE",{});var TCt=s(b1e);mar=r(TCt,"pretrained_model_name_or_path"),TCt.forEach(t),gar=r(gA,":"),gA.forEach(t),har=i(_a),Fe=n(_a,"UL",{});var Te=s(Fe);sT=n(Te,"LI",{});var PBe=s(sT);v1e=n(PBe,"STRONG",{});var MCt=s(v1e);par=r(MCt,"beit"),MCt.forEach(t),_ar=r(PBe," \u2014 "),GQ=n(PBe,"A",{href:!0});var ECt=s(GQ);uar=r(ECt,"BeitForImageClassification"),ECt.forEach(t),bar=r(PBe," (BEiT model)"),PBe.forEach(t),Far=i(Te),lT=n(Te,"LI",{});var BBe=s(lT);F1e=n(BBe,"STRONG",{});var CCt=s(F1e);Tar=r(CCt,"convnext"),CCt.forEach(t),Mar=r(BBe," \u2014 "),OQ=n(BBe,"A",{href:!0});var wCt=s(OQ);Ear=r(wCt,"ConvNextForImageClassification"),wCt.forEach(t),Car=r(BBe," (ConvNeXT model)"),BBe.forEach(t),war=i(Te),iT=n(Te,"LI",{});var IBe=s(iT);T1e=n(IBe,"STRONG",{});var ACt=s(T1e);Aar=r(ACt,"cvt"),ACt.forEach(t),Lar=r(IBe," \u2014 "),VQ=n(IBe,"A",{href:!0});var LCt=s(VQ);yar=r(LCt,"CvtForImageClassification"),LCt.forEach(t),xar=r(IBe," (CvT model)"),IBe.forEach(t),$ar=i(Te),dT=n(Te,"LI",{});var NBe=s(dT);M1e=n(NBe,"STRONG",{});var yCt=s(M1e);kar=r(yCt,"data2vec-vision"),yCt.forEach(t),Sar=r(NBe," \u2014 "),XQ=n(NBe,"A",{href:!0});var xCt=s(XQ);Rar=r(xCt,"Data2VecVisionForImageClassification"),xCt.forEach(t),Par=r(NBe," (Data2VecVision model)"),NBe.forEach(t),Bar=i(Te),Qs=n(Te,"LI",{});var hS=s(Qs);E1e=n(hS,"STRONG",{});var $Ct=s(E1e);Iar=r($Ct,"deit"),$Ct.forEach(t),Nar=r(hS," \u2014 "),zQ=n(hS,"A",{href:!0});var kCt=s(zQ);qar=r(kCt,"DeiTForImageClassification"),kCt.forEach(t),jar=r(hS," or "),QQ=n(hS,"A",{href:!0});var SCt=s(QQ);Dar=r(SCt,"DeiTForImageClassificationWithTeacher"),SCt.forEach(t),Gar=r(hS," (DeiT model)"),hS.forEach(t),Oar=i(Te),cT=n(Te,"LI",{});var qBe=s(cT);C1e=n(qBe,"STRONG",{});var RCt=s(C1e);Var=r(RCt,"imagegpt"),RCt.forEach(t),Xar=r(qBe," \u2014 "),WQ=n(qBe,"A",{href:!0});var PCt=s(WQ);zar=r(PCt,"ImageGPTForImageClassification"),PCt.forEach(t),Qar=r(qBe," (ImageGPT model)"),qBe.forEach(t),War=i(Te),Ws=n(Te,"LI",{});var pS=s(Ws);w1e=n(pS,"STRONG",{});var BCt=s(w1e);Har=r(BCt,"levit"),BCt.forEach(t),Uar=r(pS," \u2014 "),HQ=n(pS,"A",{href:!0});var ICt=s(HQ);Jar=r(ICt,"LevitForImageClassification"),ICt.forEach(t),Yar=r(pS," or "),UQ=n(pS,"A",{href:!0});var NCt=s(UQ);Kar=r(NCt,"LevitForImageClassificationWithTeacher"),NCt.forEach(t),Zar=r(pS," (LeViT model)"),pS.forEach(t),enr=i(Te),ut=n(Te,"LI",{});var xf=s(ut);A1e=n(xf,"STRONG",{});var qCt=s(A1e);onr=r(qCt,"perceiver"),qCt.forEach(t),rnr=r(xf," \u2014 "),JQ=n(xf,"A",{href:!0});var jCt=s(JQ);tnr=r(jCt,"PerceiverForImageClassificationLearned"),jCt.forEach(t),anr=r(xf," or "),YQ=n(xf,"A",{href:!0});var DCt=s(YQ);nnr=r(DCt,"PerceiverForImageClassificationFourier"),DCt.forEach(t),snr=r(xf," or "),KQ=n(xf,"A",{href:!0});var GCt=s(KQ);lnr=r(GCt,"PerceiverForImageClassificationConvProcessing"),GCt.forEach(t),inr=r(xf," (Perceiver model)"),xf.forEach(t),dnr=i(Te),fT=n(Te,"LI",{});var jBe=s(fT);L1e=n(jBe,"STRONG",{});var OCt=s(L1e);cnr=r(OCt,"poolformer"),OCt.forEach(t),fnr=r(jBe," \u2014 "),ZQ=n(jBe,"A",{href:!0});var VCt=s(ZQ);mnr=r(VCt,"PoolFormerForImageClassification"),VCt.forEach(t),gnr=r(jBe," (PoolFormer model)"),jBe.forEach(t),hnr=i(Te),mT=n(Te,"LI",{});var DBe=s(mT);y1e=n(DBe,"STRONG",{});var XCt=s(y1e);pnr=r(XCt,"regnet"),XCt.forEach(t),_nr=r(DBe," \u2014 "),eW=n(DBe,"A",{href:!0});var zCt=s(eW);unr=r(zCt,"RegNetForImageClassification"),zCt.forEach(t),bnr=r(DBe," (RegNet model)"),DBe.forEach(t),vnr=i(Te),gT=n(Te,"LI",{});var GBe=s(gT);x1e=n(GBe,"STRONG",{});var QCt=s(x1e);Fnr=r(QCt,"resnet"),QCt.forEach(t),Tnr=r(GBe," \u2014 "),oW=n(GBe,"A",{href:!0});var WCt=s(oW);Mnr=r(WCt,"ResNetForImageClassification"),WCt.forEach(t),Enr=r(GBe," (ResNet model)"),GBe.forEach(t),Cnr=i(Te),hT=n(Te,"LI",{});var OBe=s(hT);$1e=n(OBe,"STRONG",{});var HCt=s($1e);wnr=r(HCt,"segformer"),HCt.forEach(t),Anr=r(OBe," \u2014 "),rW=n(OBe,"A",{href:!0});var UCt=s(rW);Lnr=r(UCt,"SegformerForImageClassification"),UCt.forEach(t),ynr=r(OBe," (SegFormer model)"),OBe.forEach(t),xnr=i(Te),pT=n(Te,"LI",{});var VBe=s(pT);k1e=n(VBe,"STRONG",{});var JCt=s(k1e);$nr=r(JCt,"swin"),JCt.forEach(t),knr=r(VBe," \u2014 "),tW=n(VBe,"A",{href:!0});var YCt=s(tW);Snr=r(YCt,"SwinForImageClassification"),YCt.forEach(t),Rnr=r(VBe," (Swin Transformer model)"),VBe.forEach(t),Pnr=i(Te),_T=n(Te,"LI",{});var XBe=s(_T);S1e=n(XBe,"STRONG",{});var KCt=s(S1e);Bnr=r(KCt,"van"),KCt.forEach(t),Inr=r(XBe," \u2014 "),aW=n(XBe,"A",{href:!0});var ZCt=s(aW);Nnr=r(ZCt,"VanForImageClassification"),ZCt.forEach(t),qnr=r(XBe," (VAN model)"),XBe.forEach(t),jnr=i(Te),uT=n(Te,"LI",{});var zBe=s(uT);R1e=n(zBe,"STRONG",{});var e3t=s(R1e);Dnr=r(e3t,"vit"),e3t.forEach(t),Gnr=r(zBe," \u2014 "),nW=n(zBe,"A",{href:!0});var o3t=s(nW);Onr=r(o3t,"ViTForImageClassification"),o3t.forEach(t),Vnr=r(zBe," (ViT model)"),zBe.forEach(t),Te.forEach(t),Xnr=i(_a),bT=n(_a,"P",{});var QBe=s(bT);znr=r(QBe,"The model is set in evaluation mode by default using "),P1e=n(QBe,"CODE",{});var r3t=s(P1e);Qnr=r(r3t,"model.eval()"),r3t.forEach(t),Wnr=r(QBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),B1e=n(QBe,"CODE",{});var t3t=s(B1e);Hnr=r(t3t,"model.train()"),t3t.forEach(t),QBe.forEach(t),Unr=i(_a),T(vT.$$.fragment,_a),_a.forEach(t),cl.forEach(t),MVe=i(f),vd=n(f,"H2",{class:!0});var yze=s(vd);FT=n(yze,"A",{id:!0,class:!0,href:!0});var a3t=s(FT);I1e=n(a3t,"SPAN",{});var n3t=s(I1e);T(Fy.$$.fragment,n3t),n3t.forEach(t),a3t.forEach(t),Jnr=i(yze),N1e=n(yze,"SPAN",{});var s3t=s(N1e);Ynr=r(s3t,"AutoModelForVision2Seq"),s3t.forEach(t),yze.forEach(t),EVe=i(f),Oo=n(f,"DIV",{class:!0});var fl=s(Oo);T(Ty.$$.fragment,fl),Knr=i(fl),Fd=n(fl,"P",{});var vre=s(Fd);Znr=r(vre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),sW=n(vre,"A",{href:!0});var l3t=s(sW);esr=r(l3t,"from_pretrained()"),l3t.forEach(t),osr=r(vre," class method or the "),lW=n(vre,"A",{href:!0});var i3t=s(lW);rsr=r(i3t,"from_config()"),i3t.forEach(t),tsr=r(vre,` class
method.`),vre.forEach(t),asr=i(fl),My=n(fl,"P",{});var xze=s(My);nsr=r(xze,"This class cannot be instantiated directly using "),q1e=n(xze,"CODE",{});var d3t=s(q1e);ssr=r(d3t,"__init__()"),d3t.forEach(t),lsr=r(xze," (throws an error)."),xze.forEach(t),isr=i(fl),bt=n(fl,"DIV",{class:!0});var hA=s(bt);T(Ey.$$.fragment,hA),dsr=i(hA),j1e=n(hA,"P",{});var c3t=s(j1e);csr=r(c3t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),c3t.forEach(t),fsr=i(hA),Td=n(hA,"P",{});var Fre=s(Td);msr=r(Fre,`Note:
Loading a model from its configuration file does `),D1e=n(Fre,"STRONG",{});var f3t=s(D1e);gsr=r(f3t,"not"),f3t.forEach(t),hsr=r(Fre,` load the model weights. It only affects the
model\u2019s configuration. Use `),iW=n(Fre,"A",{href:!0});var m3t=s(iW);psr=r(m3t,"from_pretrained()"),m3t.forEach(t),_sr=r(Fre," to load the model weights."),Fre.forEach(t),usr=i(hA),T(TT.$$.fragment,hA),hA.forEach(t),bsr=i(fl),io=n(fl,"DIV",{class:!0});var ua=s(io);T(Cy.$$.fragment,ua),vsr=i(ua),G1e=n(ua,"P",{});var g3t=s(G1e);Fsr=r(g3t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),g3t.forEach(t),Tsr=i(ua),za=n(ua,"P",{});var pA=s(za);Msr=r(pA,"The model class to instantiate is selected based on the "),O1e=n(pA,"CODE",{});var h3t=s(O1e);Esr=r(h3t,"model_type"),h3t.forEach(t),Csr=r(pA,` property of the config object (either
passed as an argument or loaded from `),V1e=n(pA,"CODE",{});var p3t=s(V1e);wsr=r(p3t,"pretrained_model_name_or_path"),p3t.forEach(t),Asr=r(pA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X1e=n(pA,"CODE",{});var _3t=s(X1e);Lsr=r(_3t,"pretrained_model_name_or_path"),_3t.forEach(t),ysr=r(pA,":"),pA.forEach(t),xsr=i(ua),z1e=n(ua,"UL",{});var u3t=s(z1e);MT=n(u3t,"LI",{});var WBe=s(MT);Q1e=n(WBe,"STRONG",{});var b3t=s(Q1e);$sr=r(b3t,"vision-encoder-decoder"),b3t.forEach(t),ksr=r(WBe," \u2014 "),dW=n(WBe,"A",{href:!0});var v3t=s(dW);Ssr=r(v3t,"VisionEncoderDecoderModel"),v3t.forEach(t),Rsr=r(WBe," (Vision Encoder decoder model)"),WBe.forEach(t),u3t.forEach(t),Psr=i(ua),ET=n(ua,"P",{});var HBe=s(ET);Bsr=r(HBe,"The model is set in evaluation mode by default using "),W1e=n(HBe,"CODE",{});var F3t=s(W1e);Isr=r(F3t,"model.eval()"),F3t.forEach(t),Nsr=r(HBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),H1e=n(HBe,"CODE",{});var T3t=s(H1e);qsr=r(T3t,"model.train()"),T3t.forEach(t),HBe.forEach(t),jsr=i(ua),T(CT.$$.fragment,ua),ua.forEach(t),fl.forEach(t),CVe=i(f),Md=n(f,"H2",{class:!0});var $ze=s(Md);wT=n($ze,"A",{id:!0,class:!0,href:!0});var M3t=s(wT);U1e=n(M3t,"SPAN",{});var E3t=s(U1e);T(wy.$$.fragment,E3t),E3t.forEach(t),M3t.forEach(t),Dsr=i($ze),J1e=n($ze,"SPAN",{});var C3t=s(J1e);Gsr=r(C3t,"AutoModelForVisualQuestionAnswering"),C3t.forEach(t),$ze.forEach(t),wVe=i(f),Vo=n(f,"DIV",{class:!0});var ml=s(Vo);T(Ay.$$.fragment,ml),Osr=i(ml),Ed=n(ml,"P",{});var Tre=s(Ed);Vsr=r(Tre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),cW=n(Tre,"A",{href:!0});var w3t=s(cW);Xsr=r(w3t,"from_pretrained()"),w3t.forEach(t),zsr=r(Tre," class method or the "),fW=n(Tre,"A",{href:!0});var A3t=s(fW);Qsr=r(A3t,"from_config()"),A3t.forEach(t),Wsr=r(Tre,` class
method.`),Tre.forEach(t),Hsr=i(ml),Ly=n(ml,"P",{});var kze=s(Ly);Usr=r(kze,"This class cannot be instantiated directly using "),Y1e=n(kze,"CODE",{});var L3t=s(Y1e);Jsr=r(L3t,"__init__()"),L3t.forEach(t),Ysr=r(kze," (throws an error)."),kze.forEach(t),Ksr=i(ml),vt=n(ml,"DIV",{class:!0});var _A=s(vt);T(yy.$$.fragment,_A),Zsr=i(_A),K1e=n(_A,"P",{});var y3t=s(K1e);elr=r(y3t,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),y3t.forEach(t),olr=i(_A),Cd=n(_A,"P",{});var Mre=s(Cd);rlr=r(Mre,`Note:
Loading a model from its configuration file does `),Z1e=n(Mre,"STRONG",{});var x3t=s(Z1e);tlr=r(x3t,"not"),x3t.forEach(t),alr=r(Mre,` load the model weights. It only affects the
model\u2019s configuration. Use `),mW=n(Mre,"A",{href:!0});var $3t=s(mW);nlr=r($3t,"from_pretrained()"),$3t.forEach(t),slr=r(Mre," to load the model weights."),Mre.forEach(t),llr=i(_A),T(AT.$$.fragment,_A),_A.forEach(t),ilr=i(ml),co=n(ml,"DIV",{class:!0});var ba=s(co);T(xy.$$.fragment,ba),dlr=i(ba),e2e=n(ba,"P",{});var k3t=s(e2e);clr=r(k3t,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),k3t.forEach(t),flr=i(ba),Qa=n(ba,"P",{});var uA=s(Qa);mlr=r(uA,"The model class to instantiate is selected based on the "),o2e=n(uA,"CODE",{});var S3t=s(o2e);glr=r(S3t,"model_type"),S3t.forEach(t),hlr=r(uA,` property of the config object (either
passed as an argument or loaded from `),r2e=n(uA,"CODE",{});var R3t=s(r2e);plr=r(R3t,"pretrained_model_name_or_path"),R3t.forEach(t),_lr=r(uA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t2e=n(uA,"CODE",{});var P3t=s(t2e);ulr=r(P3t,"pretrained_model_name_or_path"),P3t.forEach(t),blr=r(uA,":"),uA.forEach(t),vlr=i(ba),a2e=n(ba,"UL",{});var B3t=s(a2e);LT=n(B3t,"LI",{});var UBe=s(LT);n2e=n(UBe,"STRONG",{});var I3t=s(n2e);Flr=r(I3t,"vilt"),I3t.forEach(t),Tlr=r(UBe," \u2014 "),gW=n(UBe,"A",{href:!0});var N3t=s(gW);Mlr=r(N3t,"ViltForQuestionAnswering"),N3t.forEach(t),Elr=r(UBe," (ViLT model)"),UBe.forEach(t),B3t.forEach(t),Clr=i(ba),yT=n(ba,"P",{});var JBe=s(yT);wlr=r(JBe,"The model is set in evaluation mode by default using "),s2e=n(JBe,"CODE",{});var q3t=s(s2e);Alr=r(q3t,"model.eval()"),q3t.forEach(t),Llr=r(JBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),l2e=n(JBe,"CODE",{});var j3t=s(l2e);ylr=r(j3t,"model.train()"),j3t.forEach(t),JBe.forEach(t),xlr=i(ba),T(xT.$$.fragment,ba),ba.forEach(t),ml.forEach(t),AVe=i(f),wd=n(f,"H2",{class:!0});var Sze=s(wd);$T=n(Sze,"A",{id:!0,class:!0,href:!0});var D3t=s($T);i2e=n(D3t,"SPAN",{});var G3t=s(i2e);T($y.$$.fragment,G3t),G3t.forEach(t),D3t.forEach(t),$lr=i(Sze),d2e=n(Sze,"SPAN",{});var O3t=s(d2e);klr=r(O3t,"AutoModelForAudioClassification"),O3t.forEach(t),Sze.forEach(t),LVe=i(f),Xo=n(f,"DIV",{class:!0});var gl=s(Xo);T(ky.$$.fragment,gl),Slr=i(gl),Ad=n(gl,"P",{});var Ere=s(Ad);Rlr=r(Ere,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),hW=n(Ere,"A",{href:!0});var V3t=s(hW);Plr=r(V3t,"from_pretrained()"),V3t.forEach(t),Blr=r(Ere," class method or the "),pW=n(Ere,"A",{href:!0});var X3t=s(pW);Ilr=r(X3t,"from_config()"),X3t.forEach(t),Nlr=r(Ere,` class
method.`),Ere.forEach(t),qlr=i(gl),Sy=n(gl,"P",{});var Rze=s(Sy);jlr=r(Rze,"This class cannot be instantiated directly using "),c2e=n(Rze,"CODE",{});var z3t=s(c2e);Dlr=r(z3t,"__init__()"),z3t.forEach(t),Glr=r(Rze," (throws an error)."),Rze.forEach(t),Olr=i(gl),Ft=n(gl,"DIV",{class:!0});var bA=s(Ft);T(Ry.$$.fragment,bA),Vlr=i(bA),f2e=n(bA,"P",{});var Q3t=s(f2e);Xlr=r(Q3t,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Q3t.forEach(t),zlr=i(bA),Ld=n(bA,"P",{});var Cre=s(Ld);Qlr=r(Cre,`Note:
Loading a model from its configuration file does `),m2e=n(Cre,"STRONG",{});var W3t=s(m2e);Wlr=r(W3t,"not"),W3t.forEach(t),Hlr=r(Cre,` load the model weights. It only affects the
model\u2019s configuration. Use `),_W=n(Cre,"A",{href:!0});var H3t=s(_W);Ulr=r(H3t,"from_pretrained()"),H3t.forEach(t),Jlr=r(Cre," to load the model weights."),Cre.forEach(t),Ylr=i(bA),T(kT.$$.fragment,bA),bA.forEach(t),Klr=i(gl),fo=n(gl,"DIV",{class:!0});var va=s(fo);T(Py.$$.fragment,va),Zlr=i(va),g2e=n(va,"P",{});var U3t=s(g2e);eir=r(U3t,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),U3t.forEach(t),oir=i(va),Wa=n(va,"P",{});var vA=s(Wa);rir=r(vA,"The model class to instantiate is selected based on the "),h2e=n(vA,"CODE",{});var J3t=s(h2e);tir=r(J3t,"model_type"),J3t.forEach(t),air=r(vA,` property of the config object (either
passed as an argument or loaded from `),p2e=n(vA,"CODE",{});var Y3t=s(p2e);nir=r(Y3t,"pretrained_model_name_or_path"),Y3t.forEach(t),sir=r(vA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_2e=n(vA,"CODE",{});var K3t=s(_2e);lir=r(K3t,"pretrained_model_name_or_path"),K3t.forEach(t),iir=r(vA,":"),vA.forEach(t),dir=i(va),Pe=n(va,"UL",{});var ze=s(Pe);ST=n(ze,"LI",{});var YBe=s(ST);u2e=n(YBe,"STRONG",{});var Z3t=s(u2e);cir=r(Z3t,"data2vec-audio"),Z3t.forEach(t),fir=r(YBe," \u2014 "),uW=n(YBe,"A",{href:!0});var e5t=s(uW);mir=r(e5t,"Data2VecAudioForSequenceClassification"),e5t.forEach(t),gir=r(YBe," (Data2VecAudio model)"),YBe.forEach(t),hir=i(ze),RT=n(ze,"LI",{});var KBe=s(RT);b2e=n(KBe,"STRONG",{});var o5t=s(b2e);pir=r(o5t,"hubert"),o5t.forEach(t),_ir=r(KBe," \u2014 "),bW=n(KBe,"A",{href:!0});var r5t=s(bW);uir=r(r5t,"HubertForSequenceClassification"),r5t.forEach(t),bir=r(KBe," (Hubert model)"),KBe.forEach(t),vir=i(ze),PT=n(ze,"LI",{});var ZBe=s(PT);v2e=n(ZBe,"STRONG",{});var t5t=s(v2e);Fir=r(t5t,"sew"),t5t.forEach(t),Tir=r(ZBe," \u2014 "),vW=n(ZBe,"A",{href:!0});var a5t=s(vW);Mir=r(a5t,"SEWForSequenceClassification"),a5t.forEach(t),Eir=r(ZBe," (SEW model)"),ZBe.forEach(t),Cir=i(ze),BT=n(ze,"LI",{});var eIe=s(BT);F2e=n(eIe,"STRONG",{});var n5t=s(F2e);wir=r(n5t,"sew-d"),n5t.forEach(t),Air=r(eIe," \u2014 "),FW=n(eIe,"A",{href:!0});var s5t=s(FW);Lir=r(s5t,"SEWDForSequenceClassification"),s5t.forEach(t),yir=r(eIe," (SEW-D model)"),eIe.forEach(t),xir=i(ze),IT=n(ze,"LI",{});var oIe=s(IT);T2e=n(oIe,"STRONG",{});var l5t=s(T2e);$ir=r(l5t,"unispeech"),l5t.forEach(t),kir=r(oIe," \u2014 "),TW=n(oIe,"A",{href:!0});var i5t=s(TW);Sir=r(i5t,"UniSpeechForSequenceClassification"),i5t.forEach(t),Rir=r(oIe," (UniSpeech model)"),oIe.forEach(t),Pir=i(ze),NT=n(ze,"LI",{});var rIe=s(NT);M2e=n(rIe,"STRONG",{});var d5t=s(M2e);Bir=r(d5t,"unispeech-sat"),d5t.forEach(t),Iir=r(rIe," \u2014 "),MW=n(rIe,"A",{href:!0});var c5t=s(MW);Nir=r(c5t,"UniSpeechSatForSequenceClassification"),c5t.forEach(t),qir=r(rIe," (UniSpeechSat model)"),rIe.forEach(t),jir=i(ze),qT=n(ze,"LI",{});var tIe=s(qT);E2e=n(tIe,"STRONG",{});var f5t=s(E2e);Dir=r(f5t,"wav2vec2"),f5t.forEach(t),Gir=r(tIe," \u2014 "),EW=n(tIe,"A",{href:!0});var m5t=s(EW);Oir=r(m5t,"Wav2Vec2ForSequenceClassification"),m5t.forEach(t),Vir=r(tIe," (Wav2Vec2 model)"),tIe.forEach(t),Xir=i(ze),jT=n(ze,"LI",{});var aIe=s(jT);C2e=n(aIe,"STRONG",{});var g5t=s(C2e);zir=r(g5t,"wav2vec2-conformer"),g5t.forEach(t),Qir=r(aIe," \u2014 "),CW=n(aIe,"A",{href:!0});var h5t=s(CW);Wir=r(h5t,"Wav2Vec2ConformerForSequenceClassification"),h5t.forEach(t),Hir=r(aIe," (Wav2Vec2-Conformer model)"),aIe.forEach(t),Uir=i(ze),DT=n(ze,"LI",{});var nIe=s(DT);w2e=n(nIe,"STRONG",{});var p5t=s(w2e);Jir=r(p5t,"wavlm"),p5t.forEach(t),Yir=r(nIe," \u2014 "),wW=n(nIe,"A",{href:!0});var _5t=s(wW);Kir=r(_5t,"WavLMForSequenceClassification"),_5t.forEach(t),Zir=r(nIe," (WavLM model)"),nIe.forEach(t),ze.forEach(t),edr=i(va),GT=n(va,"P",{});var sIe=s(GT);odr=r(sIe,"The model is set in evaluation mode by default using "),A2e=n(sIe,"CODE",{});var u5t=s(A2e);rdr=r(u5t,"model.eval()"),u5t.forEach(t),tdr=r(sIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),L2e=n(sIe,"CODE",{});var b5t=s(L2e);adr=r(b5t,"model.train()"),b5t.forEach(t),sIe.forEach(t),ndr=i(va),T(OT.$$.fragment,va),va.forEach(t),gl.forEach(t),yVe=i(f),yd=n(f,"H2",{class:!0});var Pze=s(yd);VT=n(Pze,"A",{id:!0,class:!0,href:!0});var v5t=s(VT);y2e=n(v5t,"SPAN",{});var F5t=s(y2e);T(By.$$.fragment,F5t),F5t.forEach(t),v5t.forEach(t),sdr=i(Pze),x2e=n(Pze,"SPAN",{});var T5t=s(x2e);ldr=r(T5t,"AutoModelForAudioFrameClassification"),T5t.forEach(t),Pze.forEach(t),xVe=i(f),zo=n(f,"DIV",{class:!0});var hl=s(zo);T(Iy.$$.fragment,hl),idr=i(hl),xd=n(hl,"P",{});var wre=s(xd);ddr=r(wre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),AW=n(wre,"A",{href:!0});var M5t=s(AW);cdr=r(M5t,"from_pretrained()"),M5t.forEach(t),fdr=r(wre," class method or the "),LW=n(wre,"A",{href:!0});var E5t=s(LW);mdr=r(E5t,"from_config()"),E5t.forEach(t),gdr=r(wre,` class
method.`),wre.forEach(t),hdr=i(hl),Ny=n(hl,"P",{});var Bze=s(Ny);pdr=r(Bze,"This class cannot be instantiated directly using "),$2e=n(Bze,"CODE",{});var C5t=s($2e);_dr=r(C5t,"__init__()"),C5t.forEach(t),udr=r(Bze," (throws an error)."),Bze.forEach(t),bdr=i(hl),Tt=n(hl,"DIV",{class:!0});var FA=s(Tt);T(qy.$$.fragment,FA),vdr=i(FA),k2e=n(FA,"P",{});var w5t=s(k2e);Fdr=r(w5t,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),w5t.forEach(t),Tdr=i(FA),$d=n(FA,"P",{});var Are=s($d);Mdr=r(Are,`Note:
Loading a model from its configuration file does `),S2e=n(Are,"STRONG",{});var A5t=s(S2e);Edr=r(A5t,"not"),A5t.forEach(t),Cdr=r(Are,` load the model weights. It only affects the
model\u2019s configuration. Use `),yW=n(Are,"A",{href:!0});var L5t=s(yW);wdr=r(L5t,"from_pretrained()"),L5t.forEach(t),Adr=r(Are," to load the model weights."),Are.forEach(t),Ldr=i(FA),T(XT.$$.fragment,FA),FA.forEach(t),ydr=i(hl),mo=n(hl,"DIV",{class:!0});var Fa=s(mo);T(jy.$$.fragment,Fa),xdr=i(Fa),R2e=n(Fa,"P",{});var y5t=s(R2e);$dr=r(y5t,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),y5t.forEach(t),kdr=i(Fa),Ha=n(Fa,"P",{});var TA=s(Ha);Sdr=r(TA,"The model class to instantiate is selected based on the "),P2e=n(TA,"CODE",{});var x5t=s(P2e);Rdr=r(x5t,"model_type"),x5t.forEach(t),Pdr=r(TA,` property of the config object (either
passed as an argument or loaded from `),B2e=n(TA,"CODE",{});var $5t=s(B2e);Bdr=r($5t,"pretrained_model_name_or_path"),$5t.forEach(t),Idr=r(TA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I2e=n(TA,"CODE",{});var k5t=s(I2e);Ndr=r(k5t,"pretrained_model_name_or_path"),k5t.forEach(t),qdr=r(TA,":"),TA.forEach(t),jdr=i(Fa),et=n(Fa,"UL",{});var pl=s(et);zT=n(pl,"LI",{});var lIe=s(zT);N2e=n(lIe,"STRONG",{});var S5t=s(N2e);Ddr=r(S5t,"data2vec-audio"),S5t.forEach(t),Gdr=r(lIe," \u2014 "),xW=n(lIe,"A",{href:!0});var R5t=s(xW);Odr=r(R5t,"Data2VecAudioForAudioFrameClassification"),R5t.forEach(t),Vdr=r(lIe," (Data2VecAudio model)"),lIe.forEach(t),Xdr=i(pl),QT=n(pl,"LI",{});var iIe=s(QT);q2e=n(iIe,"STRONG",{});var P5t=s(q2e);zdr=r(P5t,"unispeech-sat"),P5t.forEach(t),Qdr=r(iIe," \u2014 "),$W=n(iIe,"A",{href:!0});var B5t=s($W);Wdr=r(B5t,"UniSpeechSatForAudioFrameClassification"),B5t.forEach(t),Hdr=r(iIe," (UniSpeechSat model)"),iIe.forEach(t),Udr=i(pl),WT=n(pl,"LI",{});var dIe=s(WT);j2e=n(dIe,"STRONG",{});var I5t=s(j2e);Jdr=r(I5t,"wav2vec2"),I5t.forEach(t),Ydr=r(dIe," \u2014 "),kW=n(dIe,"A",{href:!0});var N5t=s(kW);Kdr=r(N5t,"Wav2Vec2ForAudioFrameClassification"),N5t.forEach(t),Zdr=r(dIe," (Wav2Vec2 model)"),dIe.forEach(t),ecr=i(pl),HT=n(pl,"LI",{});var cIe=s(HT);D2e=n(cIe,"STRONG",{});var q5t=s(D2e);ocr=r(q5t,"wav2vec2-conformer"),q5t.forEach(t),rcr=r(cIe," \u2014 "),SW=n(cIe,"A",{href:!0});var j5t=s(SW);tcr=r(j5t,"Wav2Vec2ConformerForAudioFrameClassification"),j5t.forEach(t),acr=r(cIe," (Wav2Vec2-Conformer model)"),cIe.forEach(t),ncr=i(pl),UT=n(pl,"LI",{});var fIe=s(UT);G2e=n(fIe,"STRONG",{});var D5t=s(G2e);scr=r(D5t,"wavlm"),D5t.forEach(t),lcr=r(fIe," \u2014 "),RW=n(fIe,"A",{href:!0});var G5t=s(RW);icr=r(G5t,"WavLMForAudioFrameClassification"),G5t.forEach(t),dcr=r(fIe," (WavLM model)"),fIe.forEach(t),pl.forEach(t),ccr=i(Fa),JT=n(Fa,"P",{});var mIe=s(JT);fcr=r(mIe,"The model is set in evaluation mode by default using "),O2e=n(mIe,"CODE",{});var O5t=s(O2e);mcr=r(O5t,"model.eval()"),O5t.forEach(t),gcr=r(mIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),V2e=n(mIe,"CODE",{});var V5t=s(V2e);hcr=r(V5t,"model.train()"),V5t.forEach(t),mIe.forEach(t),pcr=i(Fa),T(YT.$$.fragment,Fa),Fa.forEach(t),hl.forEach(t),$Ve=i(f),kd=n(f,"H2",{class:!0});var Ize=s(kd);KT=n(Ize,"A",{id:!0,class:!0,href:!0});var X5t=s(KT);X2e=n(X5t,"SPAN",{});var z5t=s(X2e);T(Dy.$$.fragment,z5t),z5t.forEach(t),X5t.forEach(t),_cr=i(Ize),z2e=n(Ize,"SPAN",{});var Q5t=s(z2e);ucr=r(Q5t,"AutoModelForCTC"),Q5t.forEach(t),Ize.forEach(t),kVe=i(f),Qo=n(f,"DIV",{class:!0});var _l=s(Qo);T(Gy.$$.fragment,_l),bcr=i(_l),Sd=n(_l,"P",{});var Lre=s(Sd);vcr=r(Lre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),PW=n(Lre,"A",{href:!0});var W5t=s(PW);Fcr=r(W5t,"from_pretrained()"),W5t.forEach(t),Tcr=r(Lre," class method or the "),BW=n(Lre,"A",{href:!0});var H5t=s(BW);Mcr=r(H5t,"from_config()"),H5t.forEach(t),Ecr=r(Lre,` class
method.`),Lre.forEach(t),Ccr=i(_l),Oy=n(_l,"P",{});var Nze=s(Oy);wcr=r(Nze,"This class cannot be instantiated directly using "),Q2e=n(Nze,"CODE",{});var U5t=s(Q2e);Acr=r(U5t,"__init__()"),U5t.forEach(t),Lcr=r(Nze," (throws an error)."),Nze.forEach(t),ycr=i(_l),Mt=n(_l,"DIV",{class:!0});var MA=s(Mt);T(Vy.$$.fragment,MA),xcr=i(MA),W2e=n(MA,"P",{});var J5t=s(W2e);$cr=r(J5t,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),J5t.forEach(t),kcr=i(MA),Rd=n(MA,"P",{});var yre=s(Rd);Scr=r(yre,`Note:
Loading a model from its configuration file does `),H2e=n(yre,"STRONG",{});var Y5t=s(H2e);Rcr=r(Y5t,"not"),Y5t.forEach(t),Pcr=r(yre,` load the model weights. It only affects the
model\u2019s configuration. Use `),IW=n(yre,"A",{href:!0});var K5t=s(IW);Bcr=r(K5t,"from_pretrained()"),K5t.forEach(t),Icr=r(yre," to load the model weights."),yre.forEach(t),Ncr=i(MA),T(ZT.$$.fragment,MA),MA.forEach(t),qcr=i(_l),go=n(_l,"DIV",{class:!0});var Ta=s(go);T(Xy.$$.fragment,Ta),jcr=i(Ta),U2e=n(Ta,"P",{});var Z5t=s(U2e);Dcr=r(Z5t,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Z5t.forEach(t),Gcr=i(Ta),Ua=n(Ta,"P",{});var EA=s(Ua);Ocr=r(EA,"The model class to instantiate is selected based on the "),J2e=n(EA,"CODE",{});var e0t=s(J2e);Vcr=r(e0t,"model_type"),e0t.forEach(t),Xcr=r(EA,` property of the config object (either
passed as an argument or loaded from `),Y2e=n(EA,"CODE",{});var o0t=s(Y2e);zcr=r(o0t,"pretrained_model_name_or_path"),o0t.forEach(t),Qcr=r(EA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K2e=n(EA,"CODE",{});var r0t=s(K2e);Wcr=r(r0t,"pretrained_model_name_or_path"),r0t.forEach(t),Hcr=r(EA,":"),EA.forEach(t),Ucr=i(Ta),Le=n(Ta,"UL",{});var Be=s(Le);e8=n(Be,"LI",{});var gIe=s(e8);Z2e=n(gIe,"STRONG",{});var t0t=s(Z2e);Jcr=r(t0t,"data2vec-audio"),t0t.forEach(t),Ycr=r(gIe," \u2014 "),NW=n(gIe,"A",{href:!0});var a0t=s(NW);Kcr=r(a0t,"Data2VecAudioForCTC"),a0t.forEach(t),Zcr=r(gIe," (Data2VecAudio model)"),gIe.forEach(t),efr=i(Be),o8=n(Be,"LI",{});var hIe=s(o8);ebe=n(hIe,"STRONG",{});var n0t=s(ebe);ofr=r(n0t,"hubert"),n0t.forEach(t),rfr=r(hIe," \u2014 "),qW=n(hIe,"A",{href:!0});var s0t=s(qW);tfr=r(s0t,"HubertForCTC"),s0t.forEach(t),afr=r(hIe," (Hubert model)"),hIe.forEach(t),nfr=i(Be),r8=n(Be,"LI",{});var pIe=s(r8);obe=n(pIe,"STRONG",{});var l0t=s(obe);sfr=r(l0t,"mctct"),l0t.forEach(t),lfr=r(pIe," \u2014 "),jW=n(pIe,"A",{href:!0});var i0t=s(jW);ifr=r(i0t,"MCTCTForCTC"),i0t.forEach(t),dfr=r(pIe," (M-CTC-T model)"),pIe.forEach(t),cfr=i(Be),t8=n(Be,"LI",{});var _Ie=s(t8);rbe=n(_Ie,"STRONG",{});var d0t=s(rbe);ffr=r(d0t,"sew"),d0t.forEach(t),mfr=r(_Ie," \u2014 "),DW=n(_Ie,"A",{href:!0});var c0t=s(DW);gfr=r(c0t,"SEWForCTC"),c0t.forEach(t),hfr=r(_Ie," (SEW model)"),_Ie.forEach(t),pfr=i(Be),a8=n(Be,"LI",{});var uIe=s(a8);tbe=n(uIe,"STRONG",{});var f0t=s(tbe);_fr=r(f0t,"sew-d"),f0t.forEach(t),ufr=r(uIe," \u2014 "),GW=n(uIe,"A",{href:!0});var m0t=s(GW);bfr=r(m0t,"SEWDForCTC"),m0t.forEach(t),vfr=r(uIe," (SEW-D model)"),uIe.forEach(t),Ffr=i(Be),n8=n(Be,"LI",{});var bIe=s(n8);abe=n(bIe,"STRONG",{});var g0t=s(abe);Tfr=r(g0t,"unispeech"),g0t.forEach(t),Mfr=r(bIe," \u2014 "),OW=n(bIe,"A",{href:!0});var h0t=s(OW);Efr=r(h0t,"UniSpeechForCTC"),h0t.forEach(t),Cfr=r(bIe," (UniSpeech model)"),bIe.forEach(t),wfr=i(Be),s8=n(Be,"LI",{});var vIe=s(s8);nbe=n(vIe,"STRONG",{});var p0t=s(nbe);Afr=r(p0t,"unispeech-sat"),p0t.forEach(t),Lfr=r(vIe," \u2014 "),VW=n(vIe,"A",{href:!0});var _0t=s(VW);yfr=r(_0t,"UniSpeechSatForCTC"),_0t.forEach(t),xfr=r(vIe," (UniSpeechSat model)"),vIe.forEach(t),$fr=i(Be),l8=n(Be,"LI",{});var FIe=s(l8);sbe=n(FIe,"STRONG",{});var u0t=s(sbe);kfr=r(u0t,"wav2vec2"),u0t.forEach(t),Sfr=r(FIe," \u2014 "),XW=n(FIe,"A",{href:!0});var b0t=s(XW);Rfr=r(b0t,"Wav2Vec2ForCTC"),b0t.forEach(t),Pfr=r(FIe," (Wav2Vec2 model)"),FIe.forEach(t),Bfr=i(Be),i8=n(Be,"LI",{});var TIe=s(i8);lbe=n(TIe,"STRONG",{});var v0t=s(lbe);Ifr=r(v0t,"wav2vec2-conformer"),v0t.forEach(t),Nfr=r(TIe," \u2014 "),zW=n(TIe,"A",{href:!0});var F0t=s(zW);qfr=r(F0t,"Wav2Vec2ConformerForCTC"),F0t.forEach(t),jfr=r(TIe," (Wav2Vec2-Conformer model)"),TIe.forEach(t),Dfr=i(Be),d8=n(Be,"LI",{});var MIe=s(d8);ibe=n(MIe,"STRONG",{});var T0t=s(ibe);Gfr=r(T0t,"wavlm"),T0t.forEach(t),Ofr=r(MIe," \u2014 "),QW=n(MIe,"A",{href:!0});var M0t=s(QW);Vfr=r(M0t,"WavLMForCTC"),M0t.forEach(t),Xfr=r(MIe," (WavLM model)"),MIe.forEach(t),Be.forEach(t),zfr=i(Ta),c8=n(Ta,"P",{});var EIe=s(c8);Qfr=r(EIe,"The model is set in evaluation mode by default using "),dbe=n(EIe,"CODE",{});var E0t=s(dbe);Wfr=r(E0t,"model.eval()"),E0t.forEach(t),Hfr=r(EIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cbe=n(EIe,"CODE",{});var C0t=s(cbe);Ufr=r(C0t,"model.train()"),C0t.forEach(t),EIe.forEach(t),Jfr=i(Ta),T(f8.$$.fragment,Ta),Ta.forEach(t),_l.forEach(t),SVe=i(f),Pd=n(f,"H2",{class:!0});var qze=s(Pd);m8=n(qze,"A",{id:!0,class:!0,href:!0});var w0t=s(m8);fbe=n(w0t,"SPAN",{});var A0t=s(fbe);T(zy.$$.fragment,A0t),A0t.forEach(t),w0t.forEach(t),Yfr=i(qze),mbe=n(qze,"SPAN",{});var L0t=s(mbe);Kfr=r(L0t,"AutoModelForSpeechSeq2Seq"),L0t.forEach(t),qze.forEach(t),RVe=i(f),Wo=n(f,"DIV",{class:!0});var ul=s(Wo);T(Qy.$$.fragment,ul),Zfr=i(ul),Bd=n(ul,"P",{});var xre=s(Bd);emr=r(xre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),WW=n(xre,"A",{href:!0});var y0t=s(WW);omr=r(y0t,"from_pretrained()"),y0t.forEach(t),rmr=r(xre," class method or the "),HW=n(xre,"A",{href:!0});var x0t=s(HW);tmr=r(x0t,"from_config()"),x0t.forEach(t),amr=r(xre,` class
method.`),xre.forEach(t),nmr=i(ul),Wy=n(ul,"P",{});var jze=s(Wy);smr=r(jze,"This class cannot be instantiated directly using "),gbe=n(jze,"CODE",{});var $0t=s(gbe);lmr=r($0t,"__init__()"),$0t.forEach(t),imr=r(jze," (throws an error)."),jze.forEach(t),dmr=i(ul),Et=n(ul,"DIV",{class:!0});var CA=s(Et);T(Hy.$$.fragment,CA),cmr=i(CA),hbe=n(CA,"P",{});var k0t=s(hbe);fmr=r(k0t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),k0t.forEach(t),mmr=i(CA),Id=n(CA,"P",{});var $re=s(Id);gmr=r($re,`Note:
Loading a model from its configuration file does `),pbe=n($re,"STRONG",{});var S0t=s(pbe);hmr=r(S0t,"not"),S0t.forEach(t),pmr=r($re,` load the model weights. It only affects the
model\u2019s configuration. Use `),UW=n($re,"A",{href:!0});var R0t=s(UW);_mr=r(R0t,"from_pretrained()"),R0t.forEach(t),umr=r($re," to load the model weights."),$re.forEach(t),bmr=i(CA),T(g8.$$.fragment,CA),CA.forEach(t),vmr=i(ul),ho=n(ul,"DIV",{class:!0});var Ma=s(ho);T(Uy.$$.fragment,Ma),Fmr=i(Ma),_be=n(Ma,"P",{});var P0t=s(_be);Tmr=r(P0t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),P0t.forEach(t),Mmr=i(Ma),Ja=n(Ma,"P",{});var wA=s(Ja);Emr=r(wA,"The model class to instantiate is selected based on the "),ube=n(wA,"CODE",{});var B0t=s(ube);Cmr=r(B0t,"model_type"),B0t.forEach(t),wmr=r(wA,` property of the config object (either
passed as an argument or loaded from `),bbe=n(wA,"CODE",{});var I0t=s(bbe);Amr=r(I0t,"pretrained_model_name_or_path"),I0t.forEach(t),Lmr=r(wA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vbe=n(wA,"CODE",{});var N0t=s(vbe);ymr=r(N0t,"pretrained_model_name_or_path"),N0t.forEach(t),xmr=r(wA,":"),wA.forEach(t),$mr=i(Ma),Jy=n(Ma,"UL",{});var Dze=s(Jy);h8=n(Dze,"LI",{});var CIe=s(h8);Fbe=n(CIe,"STRONG",{});var q0t=s(Fbe);kmr=r(q0t,"speech-encoder-decoder"),q0t.forEach(t),Smr=r(CIe," \u2014 "),JW=n(CIe,"A",{href:!0});var j0t=s(JW);Rmr=r(j0t,"SpeechEncoderDecoderModel"),j0t.forEach(t),Pmr=r(CIe," (Speech Encoder decoder model)"),CIe.forEach(t),Bmr=i(Dze),p8=n(Dze,"LI",{});var wIe=s(p8);Tbe=n(wIe,"STRONG",{});var D0t=s(Tbe);Imr=r(D0t,"speech_to_text"),D0t.forEach(t),Nmr=r(wIe," \u2014 "),YW=n(wIe,"A",{href:!0});var G0t=s(YW);qmr=r(G0t,"Speech2TextForConditionalGeneration"),G0t.forEach(t),jmr=r(wIe," (Speech2Text model)"),wIe.forEach(t),Dze.forEach(t),Dmr=i(Ma),_8=n(Ma,"P",{});var AIe=s(_8);Gmr=r(AIe,"The model is set in evaluation mode by default using "),Mbe=n(AIe,"CODE",{});var O0t=s(Mbe);Omr=r(O0t,"model.eval()"),O0t.forEach(t),Vmr=r(AIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ebe=n(AIe,"CODE",{});var V0t=s(Ebe);Xmr=r(V0t,"model.train()"),V0t.forEach(t),AIe.forEach(t),zmr=i(Ma),T(u8.$$.fragment,Ma),Ma.forEach(t),ul.forEach(t),PVe=i(f),Nd=n(f,"H2",{class:!0});var Gze=s(Nd);b8=n(Gze,"A",{id:!0,class:!0,href:!0});var X0t=s(b8);Cbe=n(X0t,"SPAN",{});var z0t=s(Cbe);T(Yy.$$.fragment,z0t),z0t.forEach(t),X0t.forEach(t),Qmr=i(Gze),wbe=n(Gze,"SPAN",{});var Q0t=s(wbe);Wmr=r(Q0t,"AutoModelForAudioXVector"),Q0t.forEach(t),Gze.forEach(t),BVe=i(f),Ho=n(f,"DIV",{class:!0});var bl=s(Ho);T(Ky.$$.fragment,bl),Hmr=i(bl),qd=n(bl,"P",{});var kre=s(qd);Umr=r(kre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),KW=n(kre,"A",{href:!0});var W0t=s(KW);Jmr=r(W0t,"from_pretrained()"),W0t.forEach(t),Ymr=r(kre," class method or the "),ZW=n(kre,"A",{href:!0});var H0t=s(ZW);Kmr=r(H0t,"from_config()"),H0t.forEach(t),Zmr=r(kre,` class
method.`),kre.forEach(t),egr=i(bl),Zy=n(bl,"P",{});var Oze=s(Zy);ogr=r(Oze,"This class cannot be instantiated directly using "),Abe=n(Oze,"CODE",{});var U0t=s(Abe);rgr=r(U0t,"__init__()"),U0t.forEach(t),tgr=r(Oze," (throws an error)."),Oze.forEach(t),agr=i(bl),Ct=n(bl,"DIV",{class:!0});var AA=s(Ct);T(e9.$$.fragment,AA),ngr=i(AA),Lbe=n(AA,"P",{});var J0t=s(Lbe);sgr=r(J0t,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),J0t.forEach(t),lgr=i(AA),jd=n(AA,"P",{});var Sre=s(jd);igr=r(Sre,`Note:
Loading a model from its configuration file does `),ybe=n(Sre,"STRONG",{});var Y0t=s(ybe);dgr=r(Y0t,"not"),Y0t.forEach(t),cgr=r(Sre,` load the model weights. It only affects the
model\u2019s configuration. Use `),eH=n(Sre,"A",{href:!0});var K0t=s(eH);fgr=r(K0t,"from_pretrained()"),K0t.forEach(t),mgr=r(Sre," to load the model weights."),Sre.forEach(t),ggr=i(AA),T(v8.$$.fragment,AA),AA.forEach(t),hgr=i(bl),po=n(bl,"DIV",{class:!0});var Ea=s(po);T(o9.$$.fragment,Ea),pgr=i(Ea),xbe=n(Ea,"P",{});var Z0t=s(xbe);_gr=r(Z0t,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Z0t.forEach(t),ugr=i(Ea),Ya=n(Ea,"P",{});var LA=s(Ya);bgr=r(LA,"The model class to instantiate is selected based on the "),$be=n(LA,"CODE",{});var ewt=s($be);vgr=r(ewt,"model_type"),ewt.forEach(t),Fgr=r(LA,` property of the config object (either
passed as an argument or loaded from `),kbe=n(LA,"CODE",{});var owt=s(kbe);Tgr=r(owt,"pretrained_model_name_or_path"),owt.forEach(t),Mgr=r(LA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sbe=n(LA,"CODE",{});var rwt=s(Sbe);Egr=r(rwt,"pretrained_model_name_or_path"),rwt.forEach(t),Cgr=r(LA,":"),LA.forEach(t),wgr=i(Ea),ot=n(Ea,"UL",{});var vl=s(ot);F8=n(vl,"LI",{});var LIe=s(F8);Rbe=n(LIe,"STRONG",{});var twt=s(Rbe);Agr=r(twt,"data2vec-audio"),twt.forEach(t),Lgr=r(LIe," \u2014 "),oH=n(LIe,"A",{href:!0});var awt=s(oH);ygr=r(awt,"Data2VecAudioForXVector"),awt.forEach(t),xgr=r(LIe," (Data2VecAudio model)"),LIe.forEach(t),$gr=i(vl),T8=n(vl,"LI",{});var yIe=s(T8);Pbe=n(yIe,"STRONG",{});var nwt=s(Pbe);kgr=r(nwt,"unispeech-sat"),nwt.forEach(t),Sgr=r(yIe," \u2014 "),rH=n(yIe,"A",{href:!0});var swt=s(rH);Rgr=r(swt,"UniSpeechSatForXVector"),swt.forEach(t),Pgr=r(yIe," (UniSpeechSat model)"),yIe.forEach(t),Bgr=i(vl),M8=n(vl,"LI",{});var xIe=s(M8);Bbe=n(xIe,"STRONG",{});var lwt=s(Bbe);Igr=r(lwt,"wav2vec2"),lwt.forEach(t),Ngr=r(xIe," \u2014 "),tH=n(xIe,"A",{href:!0});var iwt=s(tH);qgr=r(iwt,"Wav2Vec2ForXVector"),iwt.forEach(t),jgr=r(xIe," (Wav2Vec2 model)"),xIe.forEach(t),Dgr=i(vl),E8=n(vl,"LI",{});var $Ie=s(E8);Ibe=n($Ie,"STRONG",{});var dwt=s(Ibe);Ggr=r(dwt,"wav2vec2-conformer"),dwt.forEach(t),Ogr=r($Ie," \u2014 "),aH=n($Ie,"A",{href:!0});var cwt=s(aH);Vgr=r(cwt,"Wav2Vec2ConformerForXVector"),cwt.forEach(t),Xgr=r($Ie," (Wav2Vec2-Conformer model)"),$Ie.forEach(t),zgr=i(vl),C8=n(vl,"LI",{});var kIe=s(C8);Nbe=n(kIe,"STRONG",{});var fwt=s(Nbe);Qgr=r(fwt,"wavlm"),fwt.forEach(t),Wgr=r(kIe," \u2014 "),nH=n(kIe,"A",{href:!0});var mwt=s(nH);Hgr=r(mwt,"WavLMForXVector"),mwt.forEach(t),Ugr=r(kIe," (WavLM model)"),kIe.forEach(t),vl.forEach(t),Jgr=i(Ea),w8=n(Ea,"P",{});var SIe=s(w8);Ygr=r(SIe,"The model is set in evaluation mode by default using "),qbe=n(SIe,"CODE",{});var gwt=s(qbe);Kgr=r(gwt,"model.eval()"),gwt.forEach(t),Zgr=r(SIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jbe=n(SIe,"CODE",{});var hwt=s(jbe);ehr=r(hwt,"model.train()"),hwt.forEach(t),SIe.forEach(t),ohr=i(Ea),T(A8.$$.fragment,Ea),Ea.forEach(t),bl.forEach(t),IVe=i(f),Dd=n(f,"H2",{class:!0});var Vze=s(Dd);L8=n(Vze,"A",{id:!0,class:!0,href:!0});var pwt=s(L8);Dbe=n(pwt,"SPAN",{});var _wt=s(Dbe);T(r9.$$.fragment,_wt),_wt.forEach(t),pwt.forEach(t),rhr=i(Vze),Gbe=n(Vze,"SPAN",{});var uwt=s(Gbe);thr=r(uwt,"AutoModelForMaskedImageModeling"),uwt.forEach(t),Vze.forEach(t),NVe=i(f),Uo=n(f,"DIV",{class:!0});var Fl=s(Uo);T(t9.$$.fragment,Fl),ahr=i(Fl),Gd=n(Fl,"P",{});var Rre=s(Gd);nhr=r(Rre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),sH=n(Rre,"A",{href:!0});var bwt=s(sH);shr=r(bwt,"from_pretrained()"),bwt.forEach(t),lhr=r(Rre," class method or the "),lH=n(Rre,"A",{href:!0});var vwt=s(lH);ihr=r(vwt,"from_config()"),vwt.forEach(t),dhr=r(Rre,` class
method.`),Rre.forEach(t),chr=i(Fl),a9=n(Fl,"P",{});var Xze=s(a9);fhr=r(Xze,"This class cannot be instantiated directly using "),Obe=n(Xze,"CODE",{});var Fwt=s(Obe);mhr=r(Fwt,"__init__()"),Fwt.forEach(t),ghr=r(Xze," (throws an error)."),Xze.forEach(t),hhr=i(Fl),wt=n(Fl,"DIV",{class:!0});var yA=s(wt);T(n9.$$.fragment,yA),phr=i(yA),Vbe=n(yA,"P",{});var Twt=s(Vbe);_hr=r(Twt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Twt.forEach(t),uhr=i(yA),Od=n(yA,"P",{});var Pre=s(Od);bhr=r(Pre,`Note:
Loading a model from its configuration file does `),Xbe=n(Pre,"STRONG",{});var Mwt=s(Xbe);vhr=r(Mwt,"not"),Mwt.forEach(t),Fhr=r(Pre,` load the model weights. It only affects the
model\u2019s configuration. Use `),iH=n(Pre,"A",{href:!0});var Ewt=s(iH);Thr=r(Ewt,"from_pretrained()"),Ewt.forEach(t),Mhr=r(Pre," to load the model weights."),Pre.forEach(t),Ehr=i(yA),T(y8.$$.fragment,yA),yA.forEach(t),Chr=i(Fl),_o=n(Fl,"DIV",{class:!0});var Ca=s(_o);T(s9.$$.fragment,Ca),whr=i(Ca),zbe=n(Ca,"P",{});var Cwt=s(zbe);Ahr=r(Cwt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Cwt.forEach(t),Lhr=i(Ca),Ka=n(Ca,"P",{});var xA=s(Ka);yhr=r(xA,"The model class to instantiate is selected based on the "),Qbe=n(xA,"CODE",{});var wwt=s(Qbe);xhr=r(wwt,"model_type"),wwt.forEach(t),$hr=r(xA,` property of the config object (either
passed as an argument or loaded from `),Wbe=n(xA,"CODE",{});var Awt=s(Wbe);khr=r(Awt,"pretrained_model_name_or_path"),Awt.forEach(t),Shr=r(xA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hbe=n(xA,"CODE",{});var Lwt=s(Hbe);Rhr=r(Lwt,"pretrained_model_name_or_path"),Lwt.forEach(t),Phr=r(xA,":"),xA.forEach(t),Bhr=i(Ca),Vd=n(Ca,"UL",{});var Bre=s(Vd);x8=n(Bre,"LI",{});var RIe=s(x8);Ube=n(RIe,"STRONG",{});var ywt=s(Ube);Ihr=r(ywt,"deit"),ywt.forEach(t),Nhr=r(RIe," \u2014 "),dH=n(RIe,"A",{href:!0});var xwt=s(dH);qhr=r(xwt,"DeiTForMaskedImageModeling"),xwt.forEach(t),jhr=r(RIe," (DeiT model)"),RIe.forEach(t),Dhr=i(Bre),$8=n(Bre,"LI",{});var PIe=s($8);Jbe=n(PIe,"STRONG",{});var $wt=s(Jbe);Ghr=r($wt,"swin"),$wt.forEach(t),Ohr=r(PIe," \u2014 "),cH=n(PIe,"A",{href:!0});var kwt=s(cH);Vhr=r(kwt,"SwinForMaskedImageModeling"),kwt.forEach(t),Xhr=r(PIe," (Swin Transformer model)"),PIe.forEach(t),zhr=i(Bre),k8=n(Bre,"LI",{});var BIe=s(k8);Ybe=n(BIe,"STRONG",{});var Swt=s(Ybe);Qhr=r(Swt,"vit"),Swt.forEach(t),Whr=r(BIe," \u2014 "),fH=n(BIe,"A",{href:!0});var Rwt=s(fH);Hhr=r(Rwt,"ViTForMaskedImageModeling"),Rwt.forEach(t),Uhr=r(BIe," (ViT model)"),BIe.forEach(t),Bre.forEach(t),Jhr=i(Ca),S8=n(Ca,"P",{});var IIe=s(S8);Yhr=r(IIe,"The model is set in evaluation mode by default using "),Kbe=n(IIe,"CODE",{});var Pwt=s(Kbe);Khr=r(Pwt,"model.eval()"),Pwt.forEach(t),Zhr=r(IIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zbe=n(IIe,"CODE",{});var Bwt=s(Zbe);epr=r(Bwt,"model.train()"),Bwt.forEach(t),IIe.forEach(t),opr=i(Ca),T(R8.$$.fragment,Ca),Ca.forEach(t),Fl.forEach(t),qVe=i(f),Xd=n(f,"H2",{class:!0});var zze=s(Xd);P8=n(zze,"A",{id:!0,class:!0,href:!0});var Iwt=s(P8);eve=n(Iwt,"SPAN",{});var Nwt=s(eve);T(l9.$$.fragment,Nwt),Nwt.forEach(t),Iwt.forEach(t),rpr=i(zze),ove=n(zze,"SPAN",{});var qwt=s(ove);tpr=r(qwt,"AutoModelForObjectDetection"),qwt.forEach(t),zze.forEach(t),jVe=i(f),Jo=n(f,"DIV",{class:!0});var Tl=s(Jo);T(i9.$$.fragment,Tl),apr=i(Tl),zd=n(Tl,"P",{});var Ire=s(zd);npr=r(Ire,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),mH=n(Ire,"A",{href:!0});var jwt=s(mH);spr=r(jwt,"from_pretrained()"),jwt.forEach(t),lpr=r(Ire," class method or the "),gH=n(Ire,"A",{href:!0});var Dwt=s(gH);ipr=r(Dwt,"from_config()"),Dwt.forEach(t),dpr=r(Ire,` class
method.`),Ire.forEach(t),cpr=i(Tl),d9=n(Tl,"P",{});var Qze=s(d9);fpr=r(Qze,"This class cannot be instantiated directly using "),rve=n(Qze,"CODE",{});var Gwt=s(rve);mpr=r(Gwt,"__init__()"),Gwt.forEach(t),gpr=r(Qze," (throws an error)."),Qze.forEach(t),hpr=i(Tl),At=n(Tl,"DIV",{class:!0});var $A=s(At);T(c9.$$.fragment,$A),ppr=i($A),tve=n($A,"P",{});var Owt=s(tve);_pr=r(Owt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Owt.forEach(t),upr=i($A),Qd=n($A,"P",{});var Nre=s(Qd);bpr=r(Nre,`Note:
Loading a model from its configuration file does `),ave=n(Nre,"STRONG",{});var Vwt=s(ave);vpr=r(Vwt,"not"),Vwt.forEach(t),Fpr=r(Nre,` load the model weights. It only affects the
model\u2019s configuration. Use `),hH=n(Nre,"A",{href:!0});var Xwt=s(hH);Tpr=r(Xwt,"from_pretrained()"),Xwt.forEach(t),Mpr=r(Nre," to load the model weights."),Nre.forEach(t),Epr=i($A),T(B8.$$.fragment,$A),$A.forEach(t),Cpr=i(Tl),uo=n(Tl,"DIV",{class:!0});var wa=s(uo);T(f9.$$.fragment,wa),wpr=i(wa),nve=n(wa,"P",{});var zwt=s(nve);Apr=r(zwt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),zwt.forEach(t),Lpr=i(wa),Za=n(wa,"P",{});var kA=s(Za);ypr=r(kA,"The model class to instantiate is selected based on the "),sve=n(kA,"CODE",{});var Qwt=s(sve);xpr=r(Qwt,"model_type"),Qwt.forEach(t),$pr=r(kA,` property of the config object (either
passed as an argument or loaded from `),lve=n(kA,"CODE",{});var Wwt=s(lve);kpr=r(Wwt,"pretrained_model_name_or_path"),Wwt.forEach(t),Spr=r(kA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ive=n(kA,"CODE",{});var Hwt=s(ive);Rpr=r(Hwt,"pretrained_model_name_or_path"),Hwt.forEach(t),Ppr=r(kA,":"),kA.forEach(t),Bpr=i(wa),m9=n(wa,"UL",{});var Wze=s(m9);I8=n(Wze,"LI",{});var NIe=s(I8);dve=n(NIe,"STRONG",{});var Uwt=s(dve);Ipr=r(Uwt,"detr"),Uwt.forEach(t),Npr=r(NIe," \u2014 "),pH=n(NIe,"A",{href:!0});var Jwt=s(pH);qpr=r(Jwt,"DetrForObjectDetection"),Jwt.forEach(t),jpr=r(NIe," (DETR model)"),NIe.forEach(t),Dpr=i(Wze),N8=n(Wze,"LI",{});var qIe=s(N8);cve=n(qIe,"STRONG",{});var Ywt=s(cve);Gpr=r(Ywt,"yolos"),Ywt.forEach(t),Opr=r(qIe," \u2014 "),_H=n(qIe,"A",{href:!0});var Kwt=s(_H);Vpr=r(Kwt,"YolosForObjectDetection"),Kwt.forEach(t),Xpr=r(qIe," (YOLOS model)"),qIe.forEach(t),Wze.forEach(t),zpr=i(wa),q8=n(wa,"P",{});var jIe=s(q8);Qpr=r(jIe,"The model is set in evaluation mode by default using "),fve=n(jIe,"CODE",{});var Zwt=s(fve);Wpr=r(Zwt,"model.eval()"),Zwt.forEach(t),Hpr=r(jIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mve=n(jIe,"CODE",{});var eAt=s(mve);Upr=r(eAt,"model.train()"),eAt.forEach(t),jIe.forEach(t),Jpr=i(wa),T(j8.$$.fragment,wa),wa.forEach(t),Tl.forEach(t),DVe=i(f),Wd=n(f,"H2",{class:!0});var Hze=s(Wd);D8=n(Hze,"A",{id:!0,class:!0,href:!0});var oAt=s(D8);gve=n(oAt,"SPAN",{});var rAt=s(gve);T(g9.$$.fragment,rAt),rAt.forEach(t),oAt.forEach(t),Ypr=i(Hze),hve=n(Hze,"SPAN",{});var tAt=s(hve);Kpr=r(tAt,"AutoModelForImageSegmentation"),tAt.forEach(t),Hze.forEach(t),GVe=i(f),Yo=n(f,"DIV",{class:!0});var Ml=s(Yo);T(h9.$$.fragment,Ml),Zpr=i(Ml),Hd=n(Ml,"P",{});var qre=s(Hd);e_r=r(qre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),uH=n(qre,"A",{href:!0});var aAt=s(uH);o_r=r(aAt,"from_pretrained()"),aAt.forEach(t),r_r=r(qre," class method or the "),bH=n(qre,"A",{href:!0});var nAt=s(bH);t_r=r(nAt,"from_config()"),nAt.forEach(t),a_r=r(qre,` class
method.`),qre.forEach(t),n_r=i(Ml),p9=n(Ml,"P",{});var Uze=s(p9);s_r=r(Uze,"This class cannot be instantiated directly using "),pve=n(Uze,"CODE",{});var sAt=s(pve);l_r=r(sAt,"__init__()"),sAt.forEach(t),i_r=r(Uze," (throws an error)."),Uze.forEach(t),d_r=i(Ml),Lt=n(Ml,"DIV",{class:!0});var SA=s(Lt);T(_9.$$.fragment,SA),c_r=i(SA),_ve=n(SA,"P",{});var lAt=s(_ve);f_r=r(lAt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),lAt.forEach(t),m_r=i(SA),Ud=n(SA,"P",{});var jre=s(Ud);g_r=r(jre,`Note:
Loading a model from its configuration file does `),uve=n(jre,"STRONG",{});var iAt=s(uve);h_r=r(iAt,"not"),iAt.forEach(t),p_r=r(jre,` load the model weights. It only affects the
model\u2019s configuration. Use `),vH=n(jre,"A",{href:!0});var dAt=s(vH);__r=r(dAt,"from_pretrained()"),dAt.forEach(t),u_r=r(jre," to load the model weights."),jre.forEach(t),b_r=i(SA),T(G8.$$.fragment,SA),SA.forEach(t),v_r=i(Ml),bo=n(Ml,"DIV",{class:!0});var Aa=s(bo);T(u9.$$.fragment,Aa),F_r=i(Aa),bve=n(Aa,"P",{});var cAt=s(bve);T_r=r(cAt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),cAt.forEach(t),M_r=i(Aa),en=n(Aa,"P",{});var RA=s(en);E_r=r(RA,"The model class to instantiate is selected based on the "),vve=n(RA,"CODE",{});var fAt=s(vve);C_r=r(fAt,"model_type"),fAt.forEach(t),w_r=r(RA,` property of the config object (either
passed as an argument or loaded from `),Fve=n(RA,"CODE",{});var mAt=s(Fve);A_r=r(mAt,"pretrained_model_name_or_path"),mAt.forEach(t),L_r=r(RA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tve=n(RA,"CODE",{});var gAt=s(Tve);y_r=r(gAt,"pretrained_model_name_or_path"),gAt.forEach(t),x_r=r(RA,":"),RA.forEach(t),$_r=i(Aa),Mve=n(Aa,"UL",{});var hAt=s(Mve);O8=n(hAt,"LI",{});var DIe=s(O8);Eve=n(DIe,"STRONG",{});var pAt=s(Eve);k_r=r(pAt,"detr"),pAt.forEach(t),S_r=r(DIe," \u2014 "),FH=n(DIe,"A",{href:!0});var _At=s(FH);R_r=r(_At,"DetrForSegmentation"),_At.forEach(t),P_r=r(DIe," (DETR model)"),DIe.forEach(t),hAt.forEach(t),B_r=i(Aa),V8=n(Aa,"P",{});var GIe=s(V8);I_r=r(GIe,"The model is set in evaluation mode by default using "),Cve=n(GIe,"CODE",{});var uAt=s(Cve);N_r=r(uAt,"model.eval()"),uAt.forEach(t),q_r=r(GIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wve=n(GIe,"CODE",{});var bAt=s(wve);j_r=r(bAt,"model.train()"),bAt.forEach(t),GIe.forEach(t),D_r=i(Aa),T(X8.$$.fragment,Aa),Aa.forEach(t),Ml.forEach(t),OVe=i(f),Jd=n(f,"H2",{class:!0});var Jze=s(Jd);z8=n(Jze,"A",{id:!0,class:!0,href:!0});var vAt=s(z8);Ave=n(vAt,"SPAN",{});var FAt=s(Ave);T(b9.$$.fragment,FAt),FAt.forEach(t),vAt.forEach(t),G_r=i(Jze),Lve=n(Jze,"SPAN",{});var TAt=s(Lve);O_r=r(TAt,"AutoModelForSemanticSegmentation"),TAt.forEach(t),Jze.forEach(t),VVe=i(f),Ko=n(f,"DIV",{class:!0});var El=s(Ko);T(v9.$$.fragment,El),V_r=i(El),Yd=n(El,"P",{});var Dre=s(Yd);X_r=r(Dre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),TH=n(Dre,"A",{href:!0});var MAt=s(TH);z_r=r(MAt,"from_pretrained()"),MAt.forEach(t),Q_r=r(Dre," class method or the "),MH=n(Dre,"A",{href:!0});var EAt=s(MH);W_r=r(EAt,"from_config()"),EAt.forEach(t),H_r=r(Dre,` class
method.`),Dre.forEach(t),U_r=i(El),F9=n(El,"P",{});var Yze=s(F9);J_r=r(Yze,"This class cannot be instantiated directly using "),yve=n(Yze,"CODE",{});var CAt=s(yve);Y_r=r(CAt,"__init__()"),CAt.forEach(t),K_r=r(Yze," (throws an error)."),Yze.forEach(t),Z_r=i(El),yt=n(El,"DIV",{class:!0});var PA=s(yt);T(T9.$$.fragment,PA),eur=i(PA),xve=n(PA,"P",{});var wAt=s(xve);our=r(wAt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),wAt.forEach(t),rur=i(PA),Kd=n(PA,"P",{});var Gre=s(Kd);tur=r(Gre,`Note:
Loading a model from its configuration file does `),$ve=n(Gre,"STRONG",{});var AAt=s($ve);aur=r(AAt,"not"),AAt.forEach(t),nur=r(Gre,` load the model weights. It only affects the
model\u2019s configuration. Use `),EH=n(Gre,"A",{href:!0});var LAt=s(EH);sur=r(LAt,"from_pretrained()"),LAt.forEach(t),lur=r(Gre," to load the model weights."),Gre.forEach(t),iur=i(PA),T(Q8.$$.fragment,PA),PA.forEach(t),dur=i(El),vo=n(El,"DIV",{class:!0});var La=s(vo);T(M9.$$.fragment,La),cur=i(La),kve=n(La,"P",{});var yAt=s(kve);fur=r(yAt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),yAt.forEach(t),mur=i(La),on=n(La,"P",{});var BA=s(on);gur=r(BA,"The model class to instantiate is selected based on the "),Sve=n(BA,"CODE",{});var xAt=s(Sve);hur=r(xAt,"model_type"),xAt.forEach(t),pur=r(BA,` property of the config object (either
passed as an argument or loaded from `),Rve=n(BA,"CODE",{});var $At=s(Rve);_ur=r($At,"pretrained_model_name_or_path"),$At.forEach(t),uur=r(BA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pve=n(BA,"CODE",{});var kAt=s(Pve);bur=r(kAt,"pretrained_model_name_or_path"),kAt.forEach(t),vur=r(BA,":"),BA.forEach(t),Fur=i(La),rn=n(La,"UL",{});var IA=s(rn);W8=n(IA,"LI",{});var OIe=s(W8);Bve=n(OIe,"STRONG",{});var SAt=s(Bve);Tur=r(SAt,"beit"),SAt.forEach(t),Mur=r(OIe," \u2014 "),CH=n(OIe,"A",{href:!0});var RAt=s(CH);Eur=r(RAt,"BeitForSemanticSegmentation"),RAt.forEach(t),Cur=r(OIe," (BEiT model)"),OIe.forEach(t),wur=i(IA),H8=n(IA,"LI",{});var VIe=s(H8);Ive=n(VIe,"STRONG",{});var PAt=s(Ive);Aur=r(PAt,"data2vec-vision"),PAt.forEach(t),Lur=r(VIe," \u2014 "),wH=n(VIe,"A",{href:!0});var BAt=s(wH);yur=r(BAt,"Data2VecVisionForSemanticSegmentation"),BAt.forEach(t),xur=r(VIe," (Data2VecVision model)"),VIe.forEach(t),$ur=i(IA),U8=n(IA,"LI",{});var XIe=s(U8);Nve=n(XIe,"STRONG",{});var IAt=s(Nve);kur=r(IAt,"dpt"),IAt.forEach(t),Sur=r(XIe," \u2014 "),AH=n(XIe,"A",{href:!0});var NAt=s(AH);Rur=r(NAt,"DPTForSemanticSegmentation"),NAt.forEach(t),Pur=r(XIe," (DPT model)"),XIe.forEach(t),Bur=i(IA),J8=n(IA,"LI",{});var zIe=s(J8);qve=n(zIe,"STRONG",{});var qAt=s(qve);Iur=r(qAt,"segformer"),qAt.forEach(t),Nur=r(zIe," \u2014 "),LH=n(zIe,"A",{href:!0});var jAt=s(LH);qur=r(jAt,"SegformerForSemanticSegmentation"),jAt.forEach(t),jur=r(zIe," (SegFormer model)"),zIe.forEach(t),IA.forEach(t),Dur=i(La),Y8=n(La,"P",{});var QIe=s(Y8);Gur=r(QIe,"The model is set in evaluation mode by default using "),jve=n(QIe,"CODE",{});var DAt=s(jve);Our=r(DAt,"model.eval()"),DAt.forEach(t),Vur=r(QIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dve=n(QIe,"CODE",{});var GAt=s(Dve);Xur=r(GAt,"model.train()"),GAt.forEach(t),QIe.forEach(t),zur=i(La),T(K8.$$.fragment,La),La.forEach(t),El.forEach(t),XVe=i(f),Zd=n(f,"H2",{class:!0});var Kze=s(Zd);Z8=n(Kze,"A",{id:!0,class:!0,href:!0});var OAt=s(Z8);Gve=n(OAt,"SPAN",{});var VAt=s(Gve);T(E9.$$.fragment,VAt),VAt.forEach(t),OAt.forEach(t),Qur=i(Kze),Ove=n(Kze,"SPAN",{});var XAt=s(Ove);Wur=r(XAt,"AutoModelForInstanceSegmentation"),XAt.forEach(t),Kze.forEach(t),zVe=i(f),Zo=n(f,"DIV",{class:!0});var Cl=s(Zo);T(C9.$$.fragment,Cl),Hur=i(Cl),ec=n(Cl,"P",{});var Ore=s(ec);Uur=r(Ore,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),yH=n(Ore,"A",{href:!0});var zAt=s(yH);Jur=r(zAt,"from_pretrained()"),zAt.forEach(t),Yur=r(Ore," class method or the "),xH=n(Ore,"A",{href:!0});var QAt=s(xH);Kur=r(QAt,"from_config()"),QAt.forEach(t),Zur=r(Ore,` class
method.`),Ore.forEach(t),e7r=i(Cl),w9=n(Cl,"P",{});var Zze=s(w9);o7r=r(Zze,"This class cannot be instantiated directly using "),Vve=n(Zze,"CODE",{});var WAt=s(Vve);r7r=r(WAt,"__init__()"),WAt.forEach(t),t7r=r(Zze," (throws an error)."),Zze.forEach(t),a7r=i(Cl),xt=n(Cl,"DIV",{class:!0});var NA=s(xt);T(A9.$$.fragment,NA),n7r=i(NA),Xve=n(NA,"P",{});var HAt=s(Xve);s7r=r(HAt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),HAt.forEach(t),l7r=i(NA),oc=n(NA,"P",{});var Vre=s(oc);i7r=r(Vre,`Note:
Loading a model from its configuration file does `),zve=n(Vre,"STRONG",{});var UAt=s(zve);d7r=r(UAt,"not"),UAt.forEach(t),c7r=r(Vre,` load the model weights. It only affects the
model\u2019s configuration. Use `),$H=n(Vre,"A",{href:!0});var JAt=s($H);f7r=r(JAt,"from_pretrained()"),JAt.forEach(t),m7r=r(Vre," to load the model weights."),Vre.forEach(t),g7r=i(NA),T(eM.$$.fragment,NA),NA.forEach(t),h7r=i(Cl),Fo=n(Cl,"DIV",{class:!0});var ya=s(Fo);T(L9.$$.fragment,ya),p7r=i(ya),Qve=n(ya,"P",{});var YAt=s(Qve);_7r=r(YAt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),YAt.forEach(t),u7r=i(ya),tn=n(ya,"P",{});var qA=s(tn);b7r=r(qA,"The model class to instantiate is selected based on the "),Wve=n(qA,"CODE",{});var KAt=s(Wve);v7r=r(KAt,"model_type"),KAt.forEach(t),F7r=r(qA,` property of the config object (either
passed as an argument or loaded from `),Hve=n(qA,"CODE",{});var ZAt=s(Hve);T7r=r(ZAt,"pretrained_model_name_or_path"),ZAt.forEach(t),M7r=r(qA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uve=n(qA,"CODE",{});var e6t=s(Uve);E7r=r(e6t,"pretrained_model_name_or_path"),e6t.forEach(t),C7r=r(qA,":"),qA.forEach(t),w7r=i(ya),Jve=n(ya,"UL",{});var o6t=s(Jve);oM=n(o6t,"LI",{});var WIe=s(oM);Yve=n(WIe,"STRONG",{});var r6t=s(Yve);A7r=r(r6t,"maskformer"),r6t.forEach(t),L7r=r(WIe," \u2014 "),kH=n(WIe,"A",{href:!0});var t6t=s(kH);y7r=r(t6t,"MaskFormerForInstanceSegmentation"),t6t.forEach(t),x7r=r(WIe," (MaskFormer model)"),WIe.forEach(t),o6t.forEach(t),$7r=i(ya),rM=n(ya,"P",{});var HIe=s(rM);k7r=r(HIe,"The model is set in evaluation mode by default using "),Kve=n(HIe,"CODE",{});var a6t=s(Kve);S7r=r(a6t,"model.eval()"),a6t.forEach(t),R7r=r(HIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zve=n(HIe,"CODE",{});var n6t=s(Zve);P7r=r(n6t,"model.train()"),n6t.forEach(t),HIe.forEach(t),B7r=i(ya),T(tM.$$.fragment,ya),ya.forEach(t),Cl.forEach(t),QVe=i(f),rc=n(f,"H2",{class:!0});var eQe=s(rc);aM=n(eQe,"A",{id:!0,class:!0,href:!0});var s6t=s(aM);eFe=n(s6t,"SPAN",{});var l6t=s(eFe);T(y9.$$.fragment,l6t),l6t.forEach(t),s6t.forEach(t),I7r=i(eQe),oFe=n(eQe,"SPAN",{});var i6t=s(oFe);N7r=r(i6t,"TFAutoModel"),i6t.forEach(t),eQe.forEach(t),WVe=i(f),er=n(f,"DIV",{class:!0});var wl=s(er);T(x9.$$.fragment,wl),q7r=i(wl),tc=n(wl,"P",{});var Xre=s(tc);j7r=r(Xre,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),SH=n(Xre,"A",{href:!0});var d6t=s(SH);D7r=r(d6t,"from_pretrained()"),d6t.forEach(t),G7r=r(Xre," class method or the "),RH=n(Xre,"A",{href:!0});var c6t=s(RH);O7r=r(c6t,"from_config()"),c6t.forEach(t),V7r=r(Xre,` class
method.`),Xre.forEach(t),X7r=i(wl),$9=n(wl,"P",{});var oQe=s($9);z7r=r(oQe,"This class cannot be instantiated directly using "),rFe=n(oQe,"CODE",{});var f6t=s(rFe);Q7r=r(f6t,"__init__()"),f6t.forEach(t),W7r=r(oQe," (throws an error)."),oQe.forEach(t),H7r=i(wl),$t=n(wl,"DIV",{class:!0});var jA=s($t);T(k9.$$.fragment,jA),U7r=i(jA),tFe=n(jA,"P",{});var m6t=s(tFe);J7r=r(m6t,"Instantiates one of the base model classes of the library from a configuration."),m6t.forEach(t),Y7r=i(jA),ac=n(jA,"P",{});var zre=s(ac);K7r=r(zre,`Note:
Loading a model from its configuration file does `),aFe=n(zre,"STRONG",{});var g6t=s(aFe);Z7r=r(g6t,"not"),g6t.forEach(t),e1r=r(zre,` load the model weights. It only affects the
model\u2019s configuration. Use `),PH=n(zre,"A",{href:!0});var h6t=s(PH);o1r=r(h6t,"from_pretrained()"),h6t.forEach(t),r1r=r(zre," to load the model weights."),zre.forEach(t),t1r=i(jA),T(nM.$$.fragment,jA),jA.forEach(t),a1r=i(wl),yr=n(wl,"DIV",{class:!0});var Al=s(yr);T(S9.$$.fragment,Al),n1r=i(Al),nFe=n(Al,"P",{});var p6t=s(nFe);s1r=r(p6t,"Instantiate one of the base model classes of the library from a pretrained model."),p6t.forEach(t),l1r=i(Al),an=n(Al,"P",{});var DA=s(an);i1r=r(DA,"The model class to instantiate is selected based on the "),sFe=n(DA,"CODE",{});var _6t=s(sFe);d1r=r(_6t,"model_type"),_6t.forEach(t),c1r=r(DA,` property of the config object (either
passed as an argument or loaded from `),lFe=n(DA,"CODE",{});var u6t=s(lFe);f1r=r(u6t,"pretrained_model_name_or_path"),u6t.forEach(t),m1r=r(DA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iFe=n(DA,"CODE",{});var b6t=s(iFe);g1r=r(b6t,"pretrained_model_name_or_path"),b6t.forEach(t),h1r=r(DA,":"),DA.forEach(t),p1r=i(Al),j=n(Al,"UL",{});var D=s(j);sM=n(D,"LI",{});var UIe=s(sM);dFe=n(UIe,"STRONG",{});var v6t=s(dFe);_1r=r(v6t,"albert"),v6t.forEach(t),u1r=r(UIe," \u2014 "),BH=n(UIe,"A",{href:!0});var F6t=s(BH);b1r=r(F6t,"TFAlbertModel"),F6t.forEach(t),v1r=r(UIe," (ALBERT model)"),UIe.forEach(t),F1r=i(D),lM=n(D,"LI",{});var JIe=s(lM);cFe=n(JIe,"STRONG",{});var T6t=s(cFe);T1r=r(T6t,"bart"),T6t.forEach(t),M1r=r(JIe," \u2014 "),IH=n(JIe,"A",{href:!0});var M6t=s(IH);E1r=r(M6t,"TFBartModel"),M6t.forEach(t),C1r=r(JIe," (BART model)"),JIe.forEach(t),w1r=i(D),iM=n(D,"LI",{});var YIe=s(iM);fFe=n(YIe,"STRONG",{});var E6t=s(fFe);A1r=r(E6t,"bert"),E6t.forEach(t),L1r=r(YIe," \u2014 "),NH=n(YIe,"A",{href:!0});var C6t=s(NH);y1r=r(C6t,"TFBertModel"),C6t.forEach(t),x1r=r(YIe," (BERT model)"),YIe.forEach(t),$1r=i(D),dM=n(D,"LI",{});var KIe=s(dM);mFe=n(KIe,"STRONG",{});var w6t=s(mFe);k1r=r(w6t,"blenderbot"),w6t.forEach(t),S1r=r(KIe," \u2014 "),qH=n(KIe,"A",{href:!0});var A6t=s(qH);R1r=r(A6t,"TFBlenderbotModel"),A6t.forEach(t),P1r=r(KIe," (Blenderbot model)"),KIe.forEach(t),B1r=i(D),cM=n(D,"LI",{});var ZIe=s(cM);gFe=n(ZIe,"STRONG",{});var L6t=s(gFe);I1r=r(L6t,"blenderbot-small"),L6t.forEach(t),N1r=r(ZIe," \u2014 "),jH=n(ZIe,"A",{href:!0});var y6t=s(jH);q1r=r(y6t,"TFBlenderbotSmallModel"),y6t.forEach(t),j1r=r(ZIe," (BlenderbotSmall model)"),ZIe.forEach(t),D1r=i(D),fM=n(D,"LI",{});var eNe=s(fM);hFe=n(eNe,"STRONG",{});var x6t=s(hFe);G1r=r(x6t,"camembert"),x6t.forEach(t),O1r=r(eNe," \u2014 "),DH=n(eNe,"A",{href:!0});var $6t=s(DH);V1r=r($6t,"TFCamembertModel"),$6t.forEach(t),X1r=r(eNe," (CamemBERT model)"),eNe.forEach(t),z1r=i(D),mM=n(D,"LI",{});var oNe=s(mM);pFe=n(oNe,"STRONG",{});var k6t=s(pFe);Q1r=r(k6t,"clip"),k6t.forEach(t),W1r=r(oNe," \u2014 "),GH=n(oNe,"A",{href:!0});var S6t=s(GH);H1r=r(S6t,"TFCLIPModel"),S6t.forEach(t),U1r=r(oNe," (CLIP model)"),oNe.forEach(t),J1r=i(D),gM=n(D,"LI",{});var rNe=s(gM);_Fe=n(rNe,"STRONG",{});var R6t=s(_Fe);Y1r=r(R6t,"convbert"),R6t.forEach(t),K1r=r(rNe," \u2014 "),OH=n(rNe,"A",{href:!0});var P6t=s(OH);Z1r=r(P6t,"TFConvBertModel"),P6t.forEach(t),e2r=r(rNe," (ConvBERT model)"),rNe.forEach(t),o2r=i(D),hM=n(D,"LI",{});var tNe=s(hM);uFe=n(tNe,"STRONG",{});var B6t=s(uFe);r2r=r(B6t,"convnext"),B6t.forEach(t),t2r=r(tNe," \u2014 "),VH=n(tNe,"A",{href:!0});var I6t=s(VH);a2r=r(I6t,"TFConvNextModel"),I6t.forEach(t),n2r=r(tNe," (ConvNeXT model)"),tNe.forEach(t),s2r=i(D),pM=n(D,"LI",{});var aNe=s(pM);bFe=n(aNe,"STRONG",{});var N6t=s(bFe);l2r=r(N6t,"ctrl"),N6t.forEach(t),i2r=r(aNe," \u2014 "),XH=n(aNe,"A",{href:!0});var q6t=s(XH);d2r=r(q6t,"TFCTRLModel"),q6t.forEach(t),c2r=r(aNe," (CTRL model)"),aNe.forEach(t),f2r=i(D),_M=n(D,"LI",{});var nNe=s(_M);vFe=n(nNe,"STRONG",{});var j6t=s(vFe);m2r=r(j6t,"data2vec-vision"),j6t.forEach(t),g2r=r(nNe," \u2014 "),zH=n(nNe,"A",{href:!0});var D6t=s(zH);h2r=r(D6t,"TFData2VecVisionModel"),D6t.forEach(t),p2r=r(nNe," (Data2VecVision model)"),nNe.forEach(t),_2r=i(D),uM=n(D,"LI",{});var sNe=s(uM);FFe=n(sNe,"STRONG",{});var G6t=s(FFe);u2r=r(G6t,"deberta"),G6t.forEach(t),b2r=r(sNe," \u2014 "),QH=n(sNe,"A",{href:!0});var O6t=s(QH);v2r=r(O6t,"TFDebertaModel"),O6t.forEach(t),F2r=r(sNe," (DeBERTa model)"),sNe.forEach(t),T2r=i(D),bM=n(D,"LI",{});var lNe=s(bM);TFe=n(lNe,"STRONG",{});var V6t=s(TFe);M2r=r(V6t,"deberta-v2"),V6t.forEach(t),E2r=r(lNe," \u2014 "),WH=n(lNe,"A",{href:!0});var X6t=s(WH);C2r=r(X6t,"TFDebertaV2Model"),X6t.forEach(t),w2r=r(lNe," (DeBERTa-v2 model)"),lNe.forEach(t),A2r=i(D),vM=n(D,"LI",{});var iNe=s(vM);MFe=n(iNe,"STRONG",{});var z6t=s(MFe);L2r=r(z6t,"distilbert"),z6t.forEach(t),y2r=r(iNe," \u2014 "),HH=n(iNe,"A",{href:!0});var Q6t=s(HH);x2r=r(Q6t,"TFDistilBertModel"),Q6t.forEach(t),$2r=r(iNe," (DistilBERT model)"),iNe.forEach(t),k2r=i(D),FM=n(D,"LI",{});var dNe=s(FM);EFe=n(dNe,"STRONG",{});var W6t=s(EFe);S2r=r(W6t,"dpr"),W6t.forEach(t),R2r=r(dNe," \u2014 "),UH=n(dNe,"A",{href:!0});var H6t=s(UH);P2r=r(H6t,"TFDPRQuestionEncoder"),H6t.forEach(t),B2r=r(dNe," (DPR model)"),dNe.forEach(t),I2r=i(D),TM=n(D,"LI",{});var cNe=s(TM);CFe=n(cNe,"STRONG",{});var U6t=s(CFe);N2r=r(U6t,"electra"),U6t.forEach(t),q2r=r(cNe," \u2014 "),JH=n(cNe,"A",{href:!0});var J6t=s(JH);j2r=r(J6t,"TFElectraModel"),J6t.forEach(t),D2r=r(cNe," (ELECTRA model)"),cNe.forEach(t),G2r=i(D),MM=n(D,"LI",{});var fNe=s(MM);wFe=n(fNe,"STRONG",{});var Y6t=s(wFe);O2r=r(Y6t,"flaubert"),Y6t.forEach(t),V2r=r(fNe," \u2014 "),YH=n(fNe,"A",{href:!0});var K6t=s(YH);X2r=r(K6t,"TFFlaubertModel"),K6t.forEach(t),z2r=r(fNe," (FlauBERT model)"),fNe.forEach(t),Q2r=i(D),Hs=n(D,"LI",{});var _S=s(Hs);AFe=n(_S,"STRONG",{});var Z6t=s(AFe);W2r=r(Z6t,"funnel"),Z6t.forEach(t),H2r=r(_S," \u2014 "),KH=n(_S,"A",{href:!0});var eLt=s(KH);U2r=r(eLt,"TFFunnelModel"),eLt.forEach(t),J2r=r(_S," or "),ZH=n(_S,"A",{href:!0});var oLt=s(ZH);Y2r=r(oLt,"TFFunnelBaseModel"),oLt.forEach(t),K2r=r(_S," (Funnel Transformer model)"),_S.forEach(t),Z2r=i(D),EM=n(D,"LI",{});var mNe=s(EM);LFe=n(mNe,"STRONG",{});var rLt=s(LFe);ebr=r(rLt,"gpt2"),rLt.forEach(t),obr=r(mNe," \u2014 "),eU=n(mNe,"A",{href:!0});var tLt=s(eU);rbr=r(tLt,"TFGPT2Model"),tLt.forEach(t),tbr=r(mNe," (OpenAI GPT-2 model)"),mNe.forEach(t),abr=i(D),CM=n(D,"LI",{});var gNe=s(CM);yFe=n(gNe,"STRONG",{});var aLt=s(yFe);nbr=r(aLt,"gptj"),aLt.forEach(t),sbr=r(gNe," \u2014 "),oU=n(gNe,"A",{href:!0});var nLt=s(oU);lbr=r(nLt,"TFGPTJModel"),nLt.forEach(t),ibr=r(gNe," (GPT-J model)"),gNe.forEach(t),dbr=i(D),wM=n(D,"LI",{});var hNe=s(wM);xFe=n(hNe,"STRONG",{});var sLt=s(xFe);cbr=r(sLt,"hubert"),sLt.forEach(t),fbr=r(hNe," \u2014 "),rU=n(hNe,"A",{href:!0});var lLt=s(rU);mbr=r(lLt,"TFHubertModel"),lLt.forEach(t),gbr=r(hNe," (Hubert model)"),hNe.forEach(t),hbr=i(D),AM=n(D,"LI",{});var pNe=s(AM);$Fe=n(pNe,"STRONG",{});var iLt=s($Fe);pbr=r(iLt,"layoutlm"),iLt.forEach(t),_br=r(pNe," \u2014 "),tU=n(pNe,"A",{href:!0});var dLt=s(tU);ubr=r(dLt,"TFLayoutLMModel"),dLt.forEach(t),bbr=r(pNe," (LayoutLM model)"),pNe.forEach(t),vbr=i(D),LM=n(D,"LI",{});var _Ne=s(LM);kFe=n(_Ne,"STRONG",{});var cLt=s(kFe);Fbr=r(cLt,"led"),cLt.forEach(t),Tbr=r(_Ne," \u2014 "),aU=n(_Ne,"A",{href:!0});var fLt=s(aU);Mbr=r(fLt,"TFLEDModel"),fLt.forEach(t),Ebr=r(_Ne," (LED model)"),_Ne.forEach(t),Cbr=i(D),yM=n(D,"LI",{});var uNe=s(yM);SFe=n(uNe,"STRONG",{});var mLt=s(SFe);wbr=r(mLt,"longformer"),mLt.forEach(t),Abr=r(uNe," \u2014 "),nU=n(uNe,"A",{href:!0});var gLt=s(nU);Lbr=r(gLt,"TFLongformerModel"),gLt.forEach(t),ybr=r(uNe," (Longformer model)"),uNe.forEach(t),xbr=i(D),xM=n(D,"LI",{});var bNe=s(xM);RFe=n(bNe,"STRONG",{});var hLt=s(RFe);$br=r(hLt,"lxmert"),hLt.forEach(t),kbr=r(bNe," \u2014 "),sU=n(bNe,"A",{href:!0});var pLt=s(sU);Sbr=r(pLt,"TFLxmertModel"),pLt.forEach(t),Rbr=r(bNe," (LXMERT model)"),bNe.forEach(t),Pbr=i(D),$M=n(D,"LI",{});var vNe=s($M);PFe=n(vNe,"STRONG",{});var _Lt=s(PFe);Bbr=r(_Lt,"marian"),_Lt.forEach(t),Ibr=r(vNe," \u2014 "),lU=n(vNe,"A",{href:!0});var uLt=s(lU);Nbr=r(uLt,"TFMarianModel"),uLt.forEach(t),qbr=r(vNe," (Marian model)"),vNe.forEach(t),jbr=i(D),kM=n(D,"LI",{});var FNe=s(kM);BFe=n(FNe,"STRONG",{});var bLt=s(BFe);Dbr=r(bLt,"mbart"),bLt.forEach(t),Gbr=r(FNe," \u2014 "),iU=n(FNe,"A",{href:!0});var vLt=s(iU);Obr=r(vLt,"TFMBartModel"),vLt.forEach(t),Vbr=r(FNe," (mBART model)"),FNe.forEach(t),Xbr=i(D),SM=n(D,"LI",{});var TNe=s(SM);IFe=n(TNe,"STRONG",{});var FLt=s(IFe);zbr=r(FLt,"mobilebert"),FLt.forEach(t),Qbr=r(TNe," \u2014 "),dU=n(TNe,"A",{href:!0});var TLt=s(dU);Wbr=r(TLt,"TFMobileBertModel"),TLt.forEach(t),Hbr=r(TNe," (MobileBERT model)"),TNe.forEach(t),Ubr=i(D),RM=n(D,"LI",{});var MNe=s(RM);NFe=n(MNe,"STRONG",{});var MLt=s(NFe);Jbr=r(MLt,"mpnet"),MLt.forEach(t),Ybr=r(MNe," \u2014 "),cU=n(MNe,"A",{href:!0});var ELt=s(cU);Kbr=r(ELt,"TFMPNetModel"),ELt.forEach(t),Zbr=r(MNe," (MPNet model)"),MNe.forEach(t),evr=i(D),PM=n(D,"LI",{});var ENe=s(PM);qFe=n(ENe,"STRONG",{});var CLt=s(qFe);ovr=r(CLt,"mt5"),CLt.forEach(t),rvr=r(ENe," \u2014 "),fU=n(ENe,"A",{href:!0});var wLt=s(fU);tvr=r(wLt,"TFMT5Model"),wLt.forEach(t),avr=r(ENe," (MT5 model)"),ENe.forEach(t),nvr=i(D),BM=n(D,"LI",{});var CNe=s(BM);jFe=n(CNe,"STRONG",{});var ALt=s(jFe);svr=r(ALt,"openai-gpt"),ALt.forEach(t),lvr=r(CNe," \u2014 "),mU=n(CNe,"A",{href:!0});var LLt=s(mU);ivr=r(LLt,"TFOpenAIGPTModel"),LLt.forEach(t),dvr=r(CNe," (OpenAI GPT model)"),CNe.forEach(t),cvr=i(D),IM=n(D,"LI",{});var wNe=s(IM);DFe=n(wNe,"STRONG",{});var yLt=s(DFe);fvr=r(yLt,"opt"),yLt.forEach(t),mvr=r(wNe," \u2014 "),gU=n(wNe,"A",{href:!0});var xLt=s(gU);gvr=r(xLt,"TFOPTModel"),xLt.forEach(t),hvr=r(wNe," (OPT model)"),wNe.forEach(t),pvr=i(D),NM=n(D,"LI",{});var ANe=s(NM);GFe=n(ANe,"STRONG",{});var $Lt=s(GFe);_vr=r($Lt,"pegasus"),$Lt.forEach(t),uvr=r(ANe," \u2014 "),hU=n(ANe,"A",{href:!0});var kLt=s(hU);bvr=r(kLt,"TFPegasusModel"),kLt.forEach(t),vvr=r(ANe," (Pegasus model)"),ANe.forEach(t),Fvr=i(D),qM=n(D,"LI",{});var LNe=s(qM);OFe=n(LNe,"STRONG",{});var SLt=s(OFe);Tvr=r(SLt,"rembert"),SLt.forEach(t),Mvr=r(LNe," \u2014 "),pU=n(LNe,"A",{href:!0});var RLt=s(pU);Evr=r(RLt,"TFRemBertModel"),RLt.forEach(t),Cvr=r(LNe," (RemBERT model)"),LNe.forEach(t),wvr=i(D),jM=n(D,"LI",{});var yNe=s(jM);VFe=n(yNe,"STRONG",{});var PLt=s(VFe);Avr=r(PLt,"roberta"),PLt.forEach(t),Lvr=r(yNe," \u2014 "),_U=n(yNe,"A",{href:!0});var BLt=s(_U);yvr=r(BLt,"TFRobertaModel"),BLt.forEach(t),xvr=r(yNe," (RoBERTa model)"),yNe.forEach(t),$vr=i(D),DM=n(D,"LI",{});var xNe=s(DM);XFe=n(xNe,"STRONG",{});var ILt=s(XFe);kvr=r(ILt,"roformer"),ILt.forEach(t),Svr=r(xNe," \u2014 "),uU=n(xNe,"A",{href:!0});var NLt=s(uU);Rvr=r(NLt,"TFRoFormerModel"),NLt.forEach(t),Pvr=r(xNe," (RoFormer model)"),xNe.forEach(t),Bvr=i(D),GM=n(D,"LI",{});var $Ne=s(GM);zFe=n($Ne,"STRONG",{});var qLt=s(zFe);Ivr=r(qLt,"speech_to_text"),qLt.forEach(t),Nvr=r($Ne," \u2014 "),bU=n($Ne,"A",{href:!0});var jLt=s(bU);qvr=r(jLt,"TFSpeech2TextModel"),jLt.forEach(t),jvr=r($Ne," (Speech2Text model)"),$Ne.forEach(t),Dvr=i(D),OM=n(D,"LI",{});var kNe=s(OM);QFe=n(kNe,"STRONG",{});var DLt=s(QFe);Gvr=r(DLt,"swin"),DLt.forEach(t),Ovr=r(kNe," \u2014 "),vU=n(kNe,"A",{href:!0});var GLt=s(vU);Vvr=r(GLt,"TFSwinModel"),GLt.forEach(t),Xvr=r(kNe," (Swin Transformer model)"),kNe.forEach(t),zvr=i(D),VM=n(D,"LI",{});var SNe=s(VM);WFe=n(SNe,"STRONG",{});var OLt=s(WFe);Qvr=r(OLt,"t5"),OLt.forEach(t),Wvr=r(SNe," \u2014 "),FU=n(SNe,"A",{href:!0});var VLt=s(FU);Hvr=r(VLt,"TFT5Model"),VLt.forEach(t),Uvr=r(SNe," (T5 model)"),SNe.forEach(t),Jvr=i(D),XM=n(D,"LI",{});var RNe=s(XM);HFe=n(RNe,"STRONG",{});var XLt=s(HFe);Yvr=r(XLt,"tapas"),XLt.forEach(t),Kvr=r(RNe," \u2014 "),TU=n(RNe,"A",{href:!0});var zLt=s(TU);Zvr=r(zLt,"TFTapasModel"),zLt.forEach(t),eFr=r(RNe," (TAPAS model)"),RNe.forEach(t),oFr=i(D),zM=n(D,"LI",{});var PNe=s(zM);UFe=n(PNe,"STRONG",{});var QLt=s(UFe);rFr=r(QLt,"transfo-xl"),QLt.forEach(t),tFr=r(PNe," \u2014 "),MU=n(PNe,"A",{href:!0});var WLt=s(MU);aFr=r(WLt,"TFTransfoXLModel"),WLt.forEach(t),nFr=r(PNe," (Transformer-XL model)"),PNe.forEach(t),sFr=i(D),QM=n(D,"LI",{});var BNe=s(QM);JFe=n(BNe,"STRONG",{});var HLt=s(JFe);lFr=r(HLt,"vit"),HLt.forEach(t),iFr=r(BNe," \u2014 "),EU=n(BNe,"A",{href:!0});var ULt=s(EU);dFr=r(ULt,"TFViTModel"),ULt.forEach(t),cFr=r(BNe," (ViT model)"),BNe.forEach(t),fFr=i(D),WM=n(D,"LI",{});var INe=s(WM);YFe=n(INe,"STRONG",{});var JLt=s(YFe);mFr=r(JLt,"vit_mae"),JLt.forEach(t),gFr=r(INe," \u2014 "),CU=n(INe,"A",{href:!0});var YLt=s(CU);hFr=r(YLt,"TFViTMAEModel"),YLt.forEach(t),pFr=r(INe," (ViTMAE model)"),INe.forEach(t),_Fr=i(D),HM=n(D,"LI",{});var NNe=s(HM);KFe=n(NNe,"STRONG",{});var KLt=s(KFe);uFr=r(KLt,"wav2vec2"),KLt.forEach(t),bFr=r(NNe," \u2014 "),wU=n(NNe,"A",{href:!0});var ZLt=s(wU);vFr=r(ZLt,"TFWav2Vec2Model"),ZLt.forEach(t),FFr=r(NNe," (Wav2Vec2 model)"),NNe.forEach(t),TFr=i(D),UM=n(D,"LI",{});var qNe=s(UM);ZFe=n(qNe,"STRONG",{});var eyt=s(ZFe);MFr=r(eyt,"xlm"),eyt.forEach(t),EFr=r(qNe," \u2014 "),AU=n(qNe,"A",{href:!0});var oyt=s(AU);CFr=r(oyt,"TFXLMModel"),oyt.forEach(t),wFr=r(qNe," (XLM model)"),qNe.forEach(t),AFr=i(D),JM=n(D,"LI",{});var jNe=s(JM);eTe=n(jNe,"STRONG",{});var ryt=s(eTe);LFr=r(ryt,"xlm-roberta"),ryt.forEach(t),yFr=r(jNe," \u2014 "),LU=n(jNe,"A",{href:!0});var tyt=s(LU);xFr=r(tyt,"TFXLMRobertaModel"),tyt.forEach(t),$Fr=r(jNe," (XLM-RoBERTa model)"),jNe.forEach(t),kFr=i(D),YM=n(D,"LI",{});var DNe=s(YM);oTe=n(DNe,"STRONG",{});var ayt=s(oTe);SFr=r(ayt,"xlnet"),ayt.forEach(t),RFr=r(DNe," \u2014 "),yU=n(DNe,"A",{href:!0});var nyt=s(yU);PFr=r(nyt,"TFXLNetModel"),nyt.forEach(t),BFr=r(DNe," (XLNet model)"),DNe.forEach(t),D.forEach(t),IFr=i(Al),T(KM.$$.fragment,Al),Al.forEach(t),wl.forEach(t),HVe=i(f),nc=n(f,"H2",{class:!0});var rQe=s(nc);ZM=n(rQe,"A",{id:!0,class:!0,href:!0});var syt=s(ZM);rTe=n(syt,"SPAN",{});var lyt=s(rTe);T(R9.$$.fragment,lyt),lyt.forEach(t),syt.forEach(t),NFr=i(rQe),tTe=n(rQe,"SPAN",{});var iyt=s(tTe);qFr=r(iyt,"TFAutoModelForPreTraining"),iyt.forEach(t),rQe.forEach(t),UVe=i(f),or=n(f,"DIV",{class:!0});var Ll=s(or);T(P9.$$.fragment,Ll),jFr=i(Ll),sc=n(Ll,"P",{});var Qre=s(sc);DFr=r(Qre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),xU=n(Qre,"A",{href:!0});var dyt=s(xU);GFr=r(dyt,"from_pretrained()"),dyt.forEach(t),OFr=r(Qre," class method or the "),$U=n(Qre,"A",{href:!0});var cyt=s($U);VFr=r(cyt,"from_config()"),cyt.forEach(t),XFr=r(Qre,` class
method.`),Qre.forEach(t),zFr=i(Ll),B9=n(Ll,"P",{});var tQe=s(B9);QFr=r(tQe,"This class cannot be instantiated directly using "),aTe=n(tQe,"CODE",{});var fyt=s(aTe);WFr=r(fyt,"__init__()"),fyt.forEach(t),HFr=r(tQe," (throws an error)."),tQe.forEach(t),UFr=i(Ll),kt=n(Ll,"DIV",{class:!0});var GA=s(kt);T(I9.$$.fragment,GA),JFr=i(GA),nTe=n(GA,"P",{});var myt=s(nTe);YFr=r(myt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),myt.forEach(t),KFr=i(GA),lc=n(GA,"P",{});var Wre=s(lc);ZFr=r(Wre,`Note:
Loading a model from its configuration file does `),sTe=n(Wre,"STRONG",{});var gyt=s(sTe);eTr=r(gyt,"not"),gyt.forEach(t),oTr=r(Wre,` load the model weights. It only affects the
model\u2019s configuration. Use `),kU=n(Wre,"A",{href:!0});var hyt=s(kU);rTr=r(hyt,"from_pretrained()"),hyt.forEach(t),tTr=r(Wre," to load the model weights."),Wre.forEach(t),aTr=i(GA),T(e4.$$.fragment,GA),GA.forEach(t),nTr=i(Ll),xr=n(Ll,"DIV",{class:!0});var yl=s(xr);T(N9.$$.fragment,yl),sTr=i(yl),lTe=n(yl,"P",{});var pyt=s(lTe);lTr=r(pyt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),pyt.forEach(t),iTr=i(yl),nn=n(yl,"P",{});var OA=s(nn);dTr=r(OA,"The model class to instantiate is selected based on the "),iTe=n(OA,"CODE",{});var _yt=s(iTe);cTr=r(_yt,"model_type"),_yt.forEach(t),fTr=r(OA,` property of the config object (either
passed as an argument or loaded from `),dTe=n(OA,"CODE",{});var uyt=s(dTe);mTr=r(uyt,"pretrained_model_name_or_path"),uyt.forEach(t),gTr=r(OA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cTe=n(OA,"CODE",{});var byt=s(cTe);hTr=r(byt,"pretrained_model_name_or_path"),byt.forEach(t),pTr=r(OA,":"),OA.forEach(t),_Tr=i(yl),se=n(yl,"UL",{});var le=s(se);o4=n(le,"LI",{});var GNe=s(o4);fTe=n(GNe,"STRONG",{});var vyt=s(fTe);uTr=r(vyt,"albert"),vyt.forEach(t),bTr=r(GNe," \u2014 "),SU=n(GNe,"A",{href:!0});var Fyt=s(SU);vTr=r(Fyt,"TFAlbertForPreTraining"),Fyt.forEach(t),FTr=r(GNe," (ALBERT model)"),GNe.forEach(t),TTr=i(le),r4=n(le,"LI",{});var ONe=s(r4);mTe=n(ONe,"STRONG",{});var Tyt=s(mTe);MTr=r(Tyt,"bart"),Tyt.forEach(t),ETr=r(ONe," \u2014 "),RU=n(ONe,"A",{href:!0});var Myt=s(RU);CTr=r(Myt,"TFBartForConditionalGeneration"),Myt.forEach(t),wTr=r(ONe," (BART model)"),ONe.forEach(t),ATr=i(le),t4=n(le,"LI",{});var VNe=s(t4);gTe=n(VNe,"STRONG",{});var Eyt=s(gTe);LTr=r(Eyt,"bert"),Eyt.forEach(t),yTr=r(VNe," \u2014 "),PU=n(VNe,"A",{href:!0});var Cyt=s(PU);xTr=r(Cyt,"TFBertForPreTraining"),Cyt.forEach(t),$Tr=r(VNe," (BERT model)"),VNe.forEach(t),kTr=i(le),a4=n(le,"LI",{});var XNe=s(a4);hTe=n(XNe,"STRONG",{});var wyt=s(hTe);STr=r(wyt,"camembert"),wyt.forEach(t),RTr=r(XNe," \u2014 "),BU=n(XNe,"A",{href:!0});var Ayt=s(BU);PTr=r(Ayt,"TFCamembertForMaskedLM"),Ayt.forEach(t),BTr=r(XNe," (CamemBERT model)"),XNe.forEach(t),ITr=i(le),n4=n(le,"LI",{});var zNe=s(n4);pTe=n(zNe,"STRONG",{});var Lyt=s(pTe);NTr=r(Lyt,"ctrl"),Lyt.forEach(t),qTr=r(zNe," \u2014 "),IU=n(zNe,"A",{href:!0});var yyt=s(IU);jTr=r(yyt,"TFCTRLLMHeadModel"),yyt.forEach(t),DTr=r(zNe," (CTRL model)"),zNe.forEach(t),GTr=i(le),s4=n(le,"LI",{});var QNe=s(s4);_Te=n(QNe,"STRONG",{});var xyt=s(_Te);OTr=r(xyt,"distilbert"),xyt.forEach(t),VTr=r(QNe," \u2014 "),NU=n(QNe,"A",{href:!0});var $yt=s(NU);XTr=r($yt,"TFDistilBertForMaskedLM"),$yt.forEach(t),zTr=r(QNe," (DistilBERT model)"),QNe.forEach(t),QTr=i(le),l4=n(le,"LI",{});var WNe=s(l4);uTe=n(WNe,"STRONG",{});var kyt=s(uTe);WTr=r(kyt,"electra"),kyt.forEach(t),HTr=r(WNe," \u2014 "),qU=n(WNe,"A",{href:!0});var Syt=s(qU);UTr=r(Syt,"TFElectraForPreTraining"),Syt.forEach(t),JTr=r(WNe," (ELECTRA model)"),WNe.forEach(t),YTr=i(le),i4=n(le,"LI",{});var HNe=s(i4);bTe=n(HNe,"STRONG",{});var Ryt=s(bTe);KTr=r(Ryt,"flaubert"),Ryt.forEach(t),ZTr=r(HNe," \u2014 "),jU=n(HNe,"A",{href:!0});var Pyt=s(jU);e8r=r(Pyt,"TFFlaubertWithLMHeadModel"),Pyt.forEach(t),o8r=r(HNe," (FlauBERT model)"),HNe.forEach(t),r8r=i(le),d4=n(le,"LI",{});var UNe=s(d4);vTe=n(UNe,"STRONG",{});var Byt=s(vTe);t8r=r(Byt,"funnel"),Byt.forEach(t),a8r=r(UNe," \u2014 "),DU=n(UNe,"A",{href:!0});var Iyt=s(DU);n8r=r(Iyt,"TFFunnelForPreTraining"),Iyt.forEach(t),s8r=r(UNe," (Funnel Transformer model)"),UNe.forEach(t),l8r=i(le),c4=n(le,"LI",{});var JNe=s(c4);FTe=n(JNe,"STRONG",{});var Nyt=s(FTe);i8r=r(Nyt,"gpt2"),Nyt.forEach(t),d8r=r(JNe," \u2014 "),GU=n(JNe,"A",{href:!0});var qyt=s(GU);c8r=r(qyt,"TFGPT2LMHeadModel"),qyt.forEach(t),f8r=r(JNe," (OpenAI GPT-2 model)"),JNe.forEach(t),m8r=i(le),f4=n(le,"LI",{});var YNe=s(f4);TTe=n(YNe,"STRONG",{});var jyt=s(TTe);g8r=r(jyt,"layoutlm"),jyt.forEach(t),h8r=r(YNe," \u2014 "),OU=n(YNe,"A",{href:!0});var Dyt=s(OU);p8r=r(Dyt,"TFLayoutLMForMaskedLM"),Dyt.forEach(t),_8r=r(YNe," (LayoutLM model)"),YNe.forEach(t),u8r=i(le),m4=n(le,"LI",{});var KNe=s(m4);MTe=n(KNe,"STRONG",{});var Gyt=s(MTe);b8r=r(Gyt,"lxmert"),Gyt.forEach(t),v8r=r(KNe," \u2014 "),VU=n(KNe,"A",{href:!0});var Oyt=s(VU);F8r=r(Oyt,"TFLxmertForPreTraining"),Oyt.forEach(t),T8r=r(KNe," (LXMERT model)"),KNe.forEach(t),M8r=i(le),g4=n(le,"LI",{});var ZNe=s(g4);ETe=n(ZNe,"STRONG",{});var Vyt=s(ETe);E8r=r(Vyt,"mobilebert"),Vyt.forEach(t),C8r=r(ZNe," \u2014 "),XU=n(ZNe,"A",{href:!0});var Xyt=s(XU);w8r=r(Xyt,"TFMobileBertForPreTraining"),Xyt.forEach(t),A8r=r(ZNe," (MobileBERT model)"),ZNe.forEach(t),L8r=i(le),h4=n(le,"LI",{});var eqe=s(h4);CTe=n(eqe,"STRONG",{});var zyt=s(CTe);y8r=r(zyt,"mpnet"),zyt.forEach(t),x8r=r(eqe," \u2014 "),zU=n(eqe,"A",{href:!0});var Qyt=s(zU);$8r=r(Qyt,"TFMPNetForMaskedLM"),Qyt.forEach(t),k8r=r(eqe," (MPNet model)"),eqe.forEach(t),S8r=i(le),p4=n(le,"LI",{});var oqe=s(p4);wTe=n(oqe,"STRONG",{});var Wyt=s(wTe);R8r=r(Wyt,"openai-gpt"),Wyt.forEach(t),P8r=r(oqe," \u2014 "),QU=n(oqe,"A",{href:!0});var Hyt=s(QU);B8r=r(Hyt,"TFOpenAIGPTLMHeadModel"),Hyt.forEach(t),I8r=r(oqe," (OpenAI GPT model)"),oqe.forEach(t),N8r=i(le),_4=n(le,"LI",{});var rqe=s(_4);ATe=n(rqe,"STRONG",{});var Uyt=s(ATe);q8r=r(Uyt,"roberta"),Uyt.forEach(t),j8r=r(rqe," \u2014 "),WU=n(rqe,"A",{href:!0});var Jyt=s(WU);D8r=r(Jyt,"TFRobertaForMaskedLM"),Jyt.forEach(t),G8r=r(rqe," (RoBERTa model)"),rqe.forEach(t),O8r=i(le),u4=n(le,"LI",{});var tqe=s(u4);LTe=n(tqe,"STRONG",{});var Yyt=s(LTe);V8r=r(Yyt,"t5"),Yyt.forEach(t),X8r=r(tqe," \u2014 "),HU=n(tqe,"A",{href:!0});var Kyt=s(HU);z8r=r(Kyt,"TFT5ForConditionalGeneration"),Kyt.forEach(t),Q8r=r(tqe," (T5 model)"),tqe.forEach(t),W8r=i(le),b4=n(le,"LI",{});var aqe=s(b4);yTe=n(aqe,"STRONG",{});var Zyt=s(yTe);H8r=r(Zyt,"tapas"),Zyt.forEach(t),U8r=r(aqe," \u2014 "),UU=n(aqe,"A",{href:!0});var e9t=s(UU);J8r=r(e9t,"TFTapasForMaskedLM"),e9t.forEach(t),Y8r=r(aqe," (TAPAS model)"),aqe.forEach(t),K8r=i(le),v4=n(le,"LI",{});var nqe=s(v4);xTe=n(nqe,"STRONG",{});var o9t=s(xTe);Z8r=r(o9t,"transfo-xl"),o9t.forEach(t),eMr=r(nqe," \u2014 "),JU=n(nqe,"A",{href:!0});var r9t=s(JU);oMr=r(r9t,"TFTransfoXLLMHeadModel"),r9t.forEach(t),rMr=r(nqe," (Transformer-XL model)"),nqe.forEach(t),tMr=i(le),F4=n(le,"LI",{});var sqe=s(F4);$Te=n(sqe,"STRONG",{});var t9t=s($Te);aMr=r(t9t,"vit_mae"),t9t.forEach(t),nMr=r(sqe," \u2014 "),YU=n(sqe,"A",{href:!0});var a9t=s(YU);sMr=r(a9t,"TFViTMAEForPreTraining"),a9t.forEach(t),lMr=r(sqe," (ViTMAE model)"),sqe.forEach(t),iMr=i(le),T4=n(le,"LI",{});var lqe=s(T4);kTe=n(lqe,"STRONG",{});var n9t=s(kTe);dMr=r(n9t,"xlm"),n9t.forEach(t),cMr=r(lqe," \u2014 "),KU=n(lqe,"A",{href:!0});var s9t=s(KU);fMr=r(s9t,"TFXLMWithLMHeadModel"),s9t.forEach(t),mMr=r(lqe," (XLM model)"),lqe.forEach(t),gMr=i(le),M4=n(le,"LI",{});var iqe=s(M4);STe=n(iqe,"STRONG",{});var l9t=s(STe);hMr=r(l9t,"xlm-roberta"),l9t.forEach(t),pMr=r(iqe," \u2014 "),ZU=n(iqe,"A",{href:!0});var i9t=s(ZU);_Mr=r(i9t,"TFXLMRobertaForMaskedLM"),i9t.forEach(t),uMr=r(iqe," (XLM-RoBERTa model)"),iqe.forEach(t),bMr=i(le),E4=n(le,"LI",{});var dqe=s(E4);RTe=n(dqe,"STRONG",{});var d9t=s(RTe);vMr=r(d9t,"xlnet"),d9t.forEach(t),FMr=r(dqe," \u2014 "),eJ=n(dqe,"A",{href:!0});var c9t=s(eJ);TMr=r(c9t,"TFXLNetLMHeadModel"),c9t.forEach(t),MMr=r(dqe," (XLNet model)"),dqe.forEach(t),le.forEach(t),EMr=i(yl),T(C4.$$.fragment,yl),yl.forEach(t),Ll.forEach(t),JVe=i(f),ic=n(f,"H2",{class:!0});var aQe=s(ic);w4=n(aQe,"A",{id:!0,class:!0,href:!0});var f9t=s(w4);PTe=n(f9t,"SPAN",{});var m9t=s(PTe);T(q9.$$.fragment,m9t),m9t.forEach(t),f9t.forEach(t),CMr=i(aQe),BTe=n(aQe,"SPAN",{});var g9t=s(BTe);wMr=r(g9t,"TFAutoModelForCausalLM"),g9t.forEach(t),aQe.forEach(t),YVe=i(f),rr=n(f,"DIV",{class:!0});var xl=s(rr);T(j9.$$.fragment,xl),AMr=i(xl),dc=n(xl,"P",{});var Hre=s(dc);LMr=r(Hre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),oJ=n(Hre,"A",{href:!0});var h9t=s(oJ);yMr=r(h9t,"from_pretrained()"),h9t.forEach(t),xMr=r(Hre," class method or the "),rJ=n(Hre,"A",{href:!0});var p9t=s(rJ);$Mr=r(p9t,"from_config()"),p9t.forEach(t),kMr=r(Hre,` class
method.`),Hre.forEach(t),SMr=i(xl),D9=n(xl,"P",{});var nQe=s(D9);RMr=r(nQe,"This class cannot be instantiated directly using "),ITe=n(nQe,"CODE",{});var _9t=s(ITe);PMr=r(_9t,"__init__()"),_9t.forEach(t),BMr=r(nQe," (throws an error)."),nQe.forEach(t),IMr=i(xl),St=n(xl,"DIV",{class:!0});var VA=s(St);T(G9.$$.fragment,VA),NMr=i(VA),NTe=n(VA,"P",{});var u9t=s(NTe);qMr=r(u9t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),u9t.forEach(t),jMr=i(VA),cc=n(VA,"P",{});var Ure=s(cc);DMr=r(Ure,`Note:
Loading a model from its configuration file does `),qTe=n(Ure,"STRONG",{});var b9t=s(qTe);GMr=r(b9t,"not"),b9t.forEach(t),OMr=r(Ure,` load the model weights. It only affects the
model\u2019s configuration. Use `),tJ=n(Ure,"A",{href:!0});var v9t=s(tJ);VMr=r(v9t,"from_pretrained()"),v9t.forEach(t),XMr=r(Ure," to load the model weights."),Ure.forEach(t),zMr=i(VA),T(A4.$$.fragment,VA),VA.forEach(t),QMr=i(xl),$r=n(xl,"DIV",{class:!0});var $l=s($r);T(O9.$$.fragment,$l),WMr=i($l),jTe=n($l,"P",{});var F9t=s(jTe);HMr=r(F9t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),F9t.forEach(t),UMr=i($l),sn=n($l,"P",{});var XA=s(sn);JMr=r(XA,"The model class to instantiate is selected based on the "),DTe=n(XA,"CODE",{});var T9t=s(DTe);YMr=r(T9t,"model_type"),T9t.forEach(t),KMr=r(XA,` property of the config object (either
passed as an argument or loaded from `),GTe=n(XA,"CODE",{});var M9t=s(GTe);ZMr=r(M9t,"pretrained_model_name_or_path"),M9t.forEach(t),e4r=r(XA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OTe=n(XA,"CODE",{});var E9t=s(OTe);o4r=r(E9t,"pretrained_model_name_or_path"),E9t.forEach(t),r4r=r(XA,":"),XA.forEach(t),t4r=i($l),Me=n($l,"UL",{});var Ce=s(Me);L4=n(Ce,"LI",{});var cqe=s(L4);VTe=n(cqe,"STRONG",{});var C9t=s(VTe);a4r=r(C9t,"bert"),C9t.forEach(t),n4r=r(cqe," \u2014 "),aJ=n(cqe,"A",{href:!0});var w9t=s(aJ);s4r=r(w9t,"TFBertLMHeadModel"),w9t.forEach(t),l4r=r(cqe," (BERT model)"),cqe.forEach(t),i4r=i(Ce),y4=n(Ce,"LI",{});var fqe=s(y4);XTe=n(fqe,"STRONG",{});var A9t=s(XTe);d4r=r(A9t,"camembert"),A9t.forEach(t),c4r=r(fqe," \u2014 "),nJ=n(fqe,"A",{href:!0});var L9t=s(nJ);f4r=r(L9t,"TFCamembertForCausalLM"),L9t.forEach(t),m4r=r(fqe," (CamemBERT model)"),fqe.forEach(t),g4r=i(Ce),x4=n(Ce,"LI",{});var mqe=s(x4);zTe=n(mqe,"STRONG",{});var y9t=s(zTe);h4r=r(y9t,"ctrl"),y9t.forEach(t),p4r=r(mqe," \u2014 "),sJ=n(mqe,"A",{href:!0});var x9t=s(sJ);_4r=r(x9t,"TFCTRLLMHeadModel"),x9t.forEach(t),u4r=r(mqe," (CTRL model)"),mqe.forEach(t),b4r=i(Ce),$4=n(Ce,"LI",{});var gqe=s($4);QTe=n(gqe,"STRONG",{});var $9t=s(QTe);v4r=r($9t,"gpt2"),$9t.forEach(t),F4r=r(gqe," \u2014 "),lJ=n(gqe,"A",{href:!0});var k9t=s(lJ);T4r=r(k9t,"TFGPT2LMHeadModel"),k9t.forEach(t),M4r=r(gqe," (OpenAI GPT-2 model)"),gqe.forEach(t),E4r=i(Ce),k4=n(Ce,"LI",{});var hqe=s(k4);WTe=n(hqe,"STRONG",{});var S9t=s(WTe);C4r=r(S9t,"gptj"),S9t.forEach(t),w4r=r(hqe," \u2014 "),iJ=n(hqe,"A",{href:!0});var R9t=s(iJ);A4r=r(R9t,"TFGPTJForCausalLM"),R9t.forEach(t),L4r=r(hqe," (GPT-J model)"),hqe.forEach(t),y4r=i(Ce),S4=n(Ce,"LI",{});var pqe=s(S4);HTe=n(pqe,"STRONG",{});var P9t=s(HTe);x4r=r(P9t,"openai-gpt"),P9t.forEach(t),$4r=r(pqe," \u2014 "),dJ=n(pqe,"A",{href:!0});var B9t=s(dJ);k4r=r(B9t,"TFOpenAIGPTLMHeadModel"),B9t.forEach(t),S4r=r(pqe," (OpenAI GPT model)"),pqe.forEach(t),R4r=i(Ce),R4=n(Ce,"LI",{});var _qe=s(R4);UTe=n(_qe,"STRONG",{});var I9t=s(UTe);P4r=r(I9t,"opt"),I9t.forEach(t),B4r=r(_qe," \u2014 "),cJ=n(_qe,"A",{href:!0});var N9t=s(cJ);I4r=r(N9t,"TFOPTForCausalLM"),N9t.forEach(t),N4r=r(_qe," (OPT model)"),_qe.forEach(t),q4r=i(Ce),P4=n(Ce,"LI",{});var uqe=s(P4);JTe=n(uqe,"STRONG",{});var q9t=s(JTe);j4r=r(q9t,"rembert"),q9t.forEach(t),D4r=r(uqe," \u2014 "),fJ=n(uqe,"A",{href:!0});var j9t=s(fJ);G4r=r(j9t,"TFRemBertForCausalLM"),j9t.forEach(t),O4r=r(uqe," (RemBERT model)"),uqe.forEach(t),V4r=i(Ce),B4=n(Ce,"LI",{});var bqe=s(B4);YTe=n(bqe,"STRONG",{});var D9t=s(YTe);X4r=r(D9t,"roberta"),D9t.forEach(t),z4r=r(bqe," \u2014 "),mJ=n(bqe,"A",{href:!0});var G9t=s(mJ);Q4r=r(G9t,"TFRobertaForCausalLM"),G9t.forEach(t),W4r=r(bqe," (RoBERTa model)"),bqe.forEach(t),H4r=i(Ce),I4=n(Ce,"LI",{});var vqe=s(I4);KTe=n(vqe,"STRONG",{});var O9t=s(KTe);U4r=r(O9t,"roformer"),O9t.forEach(t),J4r=r(vqe," \u2014 "),gJ=n(vqe,"A",{href:!0});var V9t=s(gJ);Y4r=r(V9t,"TFRoFormerForCausalLM"),V9t.forEach(t),K4r=r(vqe," (RoFormer model)"),vqe.forEach(t),Z4r=i(Ce),N4=n(Ce,"LI",{});var Fqe=s(N4);ZTe=n(Fqe,"STRONG",{});var X9t=s(ZTe);eEr=r(X9t,"transfo-xl"),X9t.forEach(t),oEr=r(Fqe," \u2014 "),hJ=n(Fqe,"A",{href:!0});var z9t=s(hJ);rEr=r(z9t,"TFTransfoXLLMHeadModel"),z9t.forEach(t),tEr=r(Fqe," (Transformer-XL model)"),Fqe.forEach(t),aEr=i(Ce),q4=n(Ce,"LI",{});var Tqe=s(q4);e8e=n(Tqe,"STRONG",{});var Q9t=s(e8e);nEr=r(Q9t,"xlm"),Q9t.forEach(t),sEr=r(Tqe," \u2014 "),pJ=n(Tqe,"A",{href:!0});var W9t=s(pJ);lEr=r(W9t,"TFXLMWithLMHeadModel"),W9t.forEach(t),iEr=r(Tqe," (XLM model)"),Tqe.forEach(t),dEr=i(Ce),j4=n(Ce,"LI",{});var Mqe=s(j4);o8e=n(Mqe,"STRONG",{});var H9t=s(o8e);cEr=r(H9t,"xlnet"),H9t.forEach(t),fEr=r(Mqe," \u2014 "),_J=n(Mqe,"A",{href:!0});var U9t=s(_J);mEr=r(U9t,"TFXLNetLMHeadModel"),U9t.forEach(t),gEr=r(Mqe," (XLNet model)"),Mqe.forEach(t),Ce.forEach(t),hEr=i($l),T(D4.$$.fragment,$l),$l.forEach(t),xl.forEach(t),KVe=i(f),fc=n(f,"H2",{class:!0});var sQe=s(fc);G4=n(sQe,"A",{id:!0,class:!0,href:!0});var J9t=s(G4);r8e=n(J9t,"SPAN",{});var Y9t=s(r8e);T(V9.$$.fragment,Y9t),Y9t.forEach(t),J9t.forEach(t),pEr=i(sQe),t8e=n(sQe,"SPAN",{});var K9t=s(t8e);_Er=r(K9t,"TFAutoModelForImageClassification"),K9t.forEach(t),sQe.forEach(t),ZVe=i(f),tr=n(f,"DIV",{class:!0});var kl=s(tr);T(X9.$$.fragment,kl),uEr=i(kl),mc=n(kl,"P",{});var Jre=s(mc);bEr=r(Jre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),uJ=n(Jre,"A",{href:!0});var Z9t=s(uJ);vEr=r(Z9t,"from_pretrained()"),Z9t.forEach(t),FEr=r(Jre," class method or the "),bJ=n(Jre,"A",{href:!0});var ext=s(bJ);TEr=r(ext,"from_config()"),ext.forEach(t),MEr=r(Jre,` class
method.`),Jre.forEach(t),EEr=i(kl),z9=n(kl,"P",{});var lQe=s(z9);CEr=r(lQe,"This class cannot be instantiated directly using "),a8e=n(lQe,"CODE",{});var oxt=s(a8e);wEr=r(oxt,"__init__()"),oxt.forEach(t),AEr=r(lQe," (throws an error)."),lQe.forEach(t),LEr=i(kl),Rt=n(kl,"DIV",{class:!0});var zA=s(Rt);T(Q9.$$.fragment,zA),yEr=i(zA),n8e=n(zA,"P",{});var rxt=s(n8e);xEr=r(rxt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),rxt.forEach(t),$Er=i(zA),gc=n(zA,"P",{});var Yre=s(gc);kEr=r(Yre,`Note:
Loading a model from its configuration file does `),s8e=n(Yre,"STRONG",{});var txt=s(s8e);SEr=r(txt,"not"),txt.forEach(t),REr=r(Yre,` load the model weights. It only affects the
model\u2019s configuration. Use `),vJ=n(Yre,"A",{href:!0});var axt=s(vJ);PEr=r(axt,"from_pretrained()"),axt.forEach(t),BEr=r(Yre," to load the model weights."),Yre.forEach(t),IEr=i(zA),T(O4.$$.fragment,zA),zA.forEach(t),NEr=i(kl),kr=n(kl,"DIV",{class:!0});var Sl=s(kr);T(W9.$$.fragment,Sl),qEr=i(Sl),l8e=n(Sl,"P",{});var nxt=s(l8e);jEr=r(nxt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),nxt.forEach(t),DEr=i(Sl),ln=n(Sl,"P",{});var QA=s(ln);GEr=r(QA,"The model class to instantiate is selected based on the "),i8e=n(QA,"CODE",{});var sxt=s(i8e);OEr=r(sxt,"model_type"),sxt.forEach(t),VEr=r(QA,` property of the config object (either
passed as an argument or loaded from `),d8e=n(QA,"CODE",{});var lxt=s(d8e);XEr=r(lxt,"pretrained_model_name_or_path"),lxt.forEach(t),zEr=r(QA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c8e=n(QA,"CODE",{});var ixt=s(c8e);QEr=r(ixt,"pretrained_model_name_or_path"),ixt.forEach(t),WEr=r(QA,":"),QA.forEach(t),HEr=i(Sl),dn=n(Sl,"UL",{});var WA=s(dn);V4=n(WA,"LI",{});var Eqe=s(V4);f8e=n(Eqe,"STRONG",{});var dxt=s(f8e);UEr=r(dxt,"convnext"),dxt.forEach(t),JEr=r(Eqe," \u2014 "),FJ=n(Eqe,"A",{href:!0});var cxt=s(FJ);YEr=r(cxt,"TFConvNextForImageClassification"),cxt.forEach(t),KEr=r(Eqe," (ConvNeXT model)"),Eqe.forEach(t),ZEr=i(WA),X4=n(WA,"LI",{});var Cqe=s(X4);m8e=n(Cqe,"STRONG",{});var fxt=s(m8e);eCr=r(fxt,"data2vec-vision"),fxt.forEach(t),oCr=r(Cqe," \u2014 "),TJ=n(Cqe,"A",{href:!0});var mxt=s(TJ);rCr=r(mxt,"TFData2VecVisionForImageClassification"),mxt.forEach(t),tCr=r(Cqe," (Data2VecVision model)"),Cqe.forEach(t),aCr=i(WA),z4=n(WA,"LI",{});var wqe=s(z4);g8e=n(wqe,"STRONG",{});var gxt=s(g8e);nCr=r(gxt,"swin"),gxt.forEach(t),sCr=r(wqe," \u2014 "),MJ=n(wqe,"A",{href:!0});var hxt=s(MJ);lCr=r(hxt,"TFSwinForImageClassification"),hxt.forEach(t),iCr=r(wqe," (Swin Transformer model)"),wqe.forEach(t),dCr=i(WA),Q4=n(WA,"LI",{});var Aqe=s(Q4);h8e=n(Aqe,"STRONG",{});var pxt=s(h8e);cCr=r(pxt,"vit"),pxt.forEach(t),fCr=r(Aqe," \u2014 "),EJ=n(Aqe,"A",{href:!0});var _xt=s(EJ);mCr=r(_xt,"TFViTForImageClassification"),_xt.forEach(t),gCr=r(Aqe," (ViT model)"),Aqe.forEach(t),WA.forEach(t),hCr=i(Sl),T(W4.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),eXe=i(f),hc=n(f,"H2",{class:!0});var iQe=s(hc);H4=n(iQe,"A",{id:!0,class:!0,href:!0});var uxt=s(H4);p8e=n(uxt,"SPAN",{});var bxt=s(p8e);T(H9.$$.fragment,bxt),bxt.forEach(t),uxt.forEach(t),pCr=i(iQe),_8e=n(iQe,"SPAN",{});var vxt=s(_8e);_Cr=r(vxt,"TFAutoModelForMaskedLM"),vxt.forEach(t),iQe.forEach(t),oXe=i(f),ar=n(f,"DIV",{class:!0});var Rl=s(ar);T(U9.$$.fragment,Rl),uCr=i(Rl),pc=n(Rl,"P",{});var Kre=s(pc);bCr=r(Kre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),CJ=n(Kre,"A",{href:!0});var Fxt=s(CJ);vCr=r(Fxt,"from_pretrained()"),Fxt.forEach(t),FCr=r(Kre," class method or the "),wJ=n(Kre,"A",{href:!0});var Txt=s(wJ);TCr=r(Txt,"from_config()"),Txt.forEach(t),MCr=r(Kre,` class
method.`),Kre.forEach(t),ECr=i(Rl),J9=n(Rl,"P",{});var dQe=s(J9);CCr=r(dQe,"This class cannot be instantiated directly using "),u8e=n(dQe,"CODE",{});var Mxt=s(u8e);wCr=r(Mxt,"__init__()"),Mxt.forEach(t),ACr=r(dQe," (throws an error)."),dQe.forEach(t),LCr=i(Rl),Pt=n(Rl,"DIV",{class:!0});var HA=s(Pt);T(Y9.$$.fragment,HA),yCr=i(HA),b8e=n(HA,"P",{});var Ext=s(b8e);xCr=r(Ext,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Ext.forEach(t),$Cr=i(HA),_c=n(HA,"P",{});var Zre=s(_c);kCr=r(Zre,`Note:
Loading a model from its configuration file does `),v8e=n(Zre,"STRONG",{});var Cxt=s(v8e);SCr=r(Cxt,"not"),Cxt.forEach(t),RCr=r(Zre,` load the model weights. It only affects the
model\u2019s configuration. Use `),AJ=n(Zre,"A",{href:!0});var wxt=s(AJ);PCr=r(wxt,"from_pretrained()"),wxt.forEach(t),BCr=r(Zre," to load the model weights."),Zre.forEach(t),ICr=i(HA),T(U4.$$.fragment,HA),HA.forEach(t),NCr=i(Rl),Sr=n(Rl,"DIV",{class:!0});var Pl=s(Sr);T(K9.$$.fragment,Pl),qCr=i(Pl),F8e=n(Pl,"P",{});var Axt=s(F8e);jCr=r(Axt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Axt.forEach(t),DCr=i(Pl),cn=n(Pl,"P",{});var UA=s(cn);GCr=r(UA,"The model class to instantiate is selected based on the "),T8e=n(UA,"CODE",{});var Lxt=s(T8e);OCr=r(Lxt,"model_type"),Lxt.forEach(t),VCr=r(UA,` property of the config object (either
passed as an argument or loaded from `),M8e=n(UA,"CODE",{});var yxt=s(M8e);XCr=r(yxt,"pretrained_model_name_or_path"),yxt.forEach(t),zCr=r(UA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E8e=n(UA,"CODE",{});var xxt=s(E8e);QCr=r(xxt,"pretrained_model_name_or_path"),xxt.forEach(t),WCr=r(UA,":"),UA.forEach(t),HCr=i(Pl),ie=n(Pl,"UL",{});var fe=s(ie);J4=n(fe,"LI",{});var Lqe=s(J4);C8e=n(Lqe,"STRONG",{});var $xt=s(C8e);UCr=r($xt,"albert"),$xt.forEach(t),JCr=r(Lqe," \u2014 "),LJ=n(Lqe,"A",{href:!0});var kxt=s(LJ);YCr=r(kxt,"TFAlbertForMaskedLM"),kxt.forEach(t),KCr=r(Lqe," (ALBERT model)"),Lqe.forEach(t),ZCr=i(fe),Y4=n(fe,"LI",{});var yqe=s(Y4);w8e=n(yqe,"STRONG",{});var Sxt=s(w8e);e3r=r(Sxt,"bert"),Sxt.forEach(t),o3r=r(yqe," \u2014 "),yJ=n(yqe,"A",{href:!0});var Rxt=s(yJ);r3r=r(Rxt,"TFBertForMaskedLM"),Rxt.forEach(t),t3r=r(yqe," (BERT model)"),yqe.forEach(t),a3r=i(fe),K4=n(fe,"LI",{});var xqe=s(K4);A8e=n(xqe,"STRONG",{});var Pxt=s(A8e);n3r=r(Pxt,"camembert"),Pxt.forEach(t),s3r=r(xqe," \u2014 "),xJ=n(xqe,"A",{href:!0});var Bxt=s(xJ);l3r=r(Bxt,"TFCamembertForMaskedLM"),Bxt.forEach(t),i3r=r(xqe," (CamemBERT model)"),xqe.forEach(t),d3r=i(fe),Z4=n(fe,"LI",{});var $qe=s(Z4);L8e=n($qe,"STRONG",{});var Ixt=s(L8e);c3r=r(Ixt,"convbert"),Ixt.forEach(t),f3r=r($qe," \u2014 "),$J=n($qe,"A",{href:!0});var Nxt=s($J);m3r=r(Nxt,"TFConvBertForMaskedLM"),Nxt.forEach(t),g3r=r($qe," (ConvBERT model)"),$qe.forEach(t),h3r=i(fe),eE=n(fe,"LI",{});var kqe=s(eE);y8e=n(kqe,"STRONG",{});var qxt=s(y8e);p3r=r(qxt,"deberta"),qxt.forEach(t),_3r=r(kqe," \u2014 "),kJ=n(kqe,"A",{href:!0});var jxt=s(kJ);u3r=r(jxt,"TFDebertaForMaskedLM"),jxt.forEach(t),b3r=r(kqe," (DeBERTa model)"),kqe.forEach(t),v3r=i(fe),oE=n(fe,"LI",{});var Sqe=s(oE);x8e=n(Sqe,"STRONG",{});var Dxt=s(x8e);F3r=r(Dxt,"deberta-v2"),Dxt.forEach(t),T3r=r(Sqe," \u2014 "),SJ=n(Sqe,"A",{href:!0});var Gxt=s(SJ);M3r=r(Gxt,"TFDebertaV2ForMaskedLM"),Gxt.forEach(t),E3r=r(Sqe," (DeBERTa-v2 model)"),Sqe.forEach(t),C3r=i(fe),rE=n(fe,"LI",{});var Rqe=s(rE);$8e=n(Rqe,"STRONG",{});var Oxt=s($8e);w3r=r(Oxt,"distilbert"),Oxt.forEach(t),A3r=r(Rqe," \u2014 "),RJ=n(Rqe,"A",{href:!0});var Vxt=s(RJ);L3r=r(Vxt,"TFDistilBertForMaskedLM"),Vxt.forEach(t),y3r=r(Rqe," (DistilBERT model)"),Rqe.forEach(t),x3r=i(fe),tE=n(fe,"LI",{});var Pqe=s(tE);k8e=n(Pqe,"STRONG",{});var Xxt=s(k8e);$3r=r(Xxt,"electra"),Xxt.forEach(t),k3r=r(Pqe," \u2014 "),PJ=n(Pqe,"A",{href:!0});var zxt=s(PJ);S3r=r(zxt,"TFElectraForMaskedLM"),zxt.forEach(t),R3r=r(Pqe," (ELECTRA model)"),Pqe.forEach(t),P3r=i(fe),aE=n(fe,"LI",{});var Bqe=s(aE);S8e=n(Bqe,"STRONG",{});var Qxt=s(S8e);B3r=r(Qxt,"flaubert"),Qxt.forEach(t),I3r=r(Bqe," \u2014 "),BJ=n(Bqe,"A",{href:!0});var Wxt=s(BJ);N3r=r(Wxt,"TFFlaubertWithLMHeadModel"),Wxt.forEach(t),q3r=r(Bqe," (FlauBERT model)"),Bqe.forEach(t),j3r=i(fe),nE=n(fe,"LI",{});var Iqe=s(nE);R8e=n(Iqe,"STRONG",{});var Hxt=s(R8e);D3r=r(Hxt,"funnel"),Hxt.forEach(t),G3r=r(Iqe," \u2014 "),IJ=n(Iqe,"A",{href:!0});var Uxt=s(IJ);O3r=r(Uxt,"TFFunnelForMaskedLM"),Uxt.forEach(t),V3r=r(Iqe," (Funnel Transformer model)"),Iqe.forEach(t),X3r=i(fe),sE=n(fe,"LI",{});var Nqe=s(sE);P8e=n(Nqe,"STRONG",{});var Jxt=s(P8e);z3r=r(Jxt,"layoutlm"),Jxt.forEach(t),Q3r=r(Nqe," \u2014 "),NJ=n(Nqe,"A",{href:!0});var Yxt=s(NJ);W3r=r(Yxt,"TFLayoutLMForMaskedLM"),Yxt.forEach(t),H3r=r(Nqe," (LayoutLM model)"),Nqe.forEach(t),U3r=i(fe),lE=n(fe,"LI",{});var qqe=s(lE);B8e=n(qqe,"STRONG",{});var Kxt=s(B8e);J3r=r(Kxt,"longformer"),Kxt.forEach(t),Y3r=r(qqe," \u2014 "),qJ=n(qqe,"A",{href:!0});var Zxt=s(qJ);K3r=r(Zxt,"TFLongformerForMaskedLM"),Zxt.forEach(t),Z3r=r(qqe," (Longformer model)"),qqe.forEach(t),e5r=i(fe),iE=n(fe,"LI",{});var jqe=s(iE);I8e=n(jqe,"STRONG",{});var e$t=s(I8e);o5r=r(e$t,"mobilebert"),e$t.forEach(t),r5r=r(jqe," \u2014 "),jJ=n(jqe,"A",{href:!0});var o$t=s(jJ);t5r=r(o$t,"TFMobileBertForMaskedLM"),o$t.forEach(t),a5r=r(jqe," (MobileBERT model)"),jqe.forEach(t),n5r=i(fe),dE=n(fe,"LI",{});var Dqe=s(dE);N8e=n(Dqe,"STRONG",{});var r$t=s(N8e);s5r=r(r$t,"mpnet"),r$t.forEach(t),l5r=r(Dqe," \u2014 "),DJ=n(Dqe,"A",{href:!0});var t$t=s(DJ);i5r=r(t$t,"TFMPNetForMaskedLM"),t$t.forEach(t),d5r=r(Dqe," (MPNet model)"),Dqe.forEach(t),c5r=i(fe),cE=n(fe,"LI",{});var Gqe=s(cE);q8e=n(Gqe,"STRONG",{});var a$t=s(q8e);f5r=r(a$t,"rembert"),a$t.forEach(t),m5r=r(Gqe," \u2014 "),GJ=n(Gqe,"A",{href:!0});var n$t=s(GJ);g5r=r(n$t,"TFRemBertForMaskedLM"),n$t.forEach(t),h5r=r(Gqe," (RemBERT model)"),Gqe.forEach(t),p5r=i(fe),fE=n(fe,"LI",{});var Oqe=s(fE);j8e=n(Oqe,"STRONG",{});var s$t=s(j8e);_5r=r(s$t,"roberta"),s$t.forEach(t),u5r=r(Oqe," \u2014 "),OJ=n(Oqe,"A",{href:!0});var l$t=s(OJ);b5r=r(l$t,"TFRobertaForMaskedLM"),l$t.forEach(t),v5r=r(Oqe," (RoBERTa model)"),Oqe.forEach(t),F5r=i(fe),mE=n(fe,"LI",{});var Vqe=s(mE);D8e=n(Vqe,"STRONG",{});var i$t=s(D8e);T5r=r(i$t,"roformer"),i$t.forEach(t),M5r=r(Vqe," \u2014 "),VJ=n(Vqe,"A",{href:!0});var d$t=s(VJ);E5r=r(d$t,"TFRoFormerForMaskedLM"),d$t.forEach(t),C5r=r(Vqe," (RoFormer model)"),Vqe.forEach(t),w5r=i(fe),gE=n(fe,"LI",{});var Xqe=s(gE);G8e=n(Xqe,"STRONG",{});var c$t=s(G8e);A5r=r(c$t,"tapas"),c$t.forEach(t),L5r=r(Xqe," \u2014 "),XJ=n(Xqe,"A",{href:!0});var f$t=s(XJ);y5r=r(f$t,"TFTapasForMaskedLM"),f$t.forEach(t),x5r=r(Xqe," (TAPAS model)"),Xqe.forEach(t),$5r=i(fe),hE=n(fe,"LI",{});var zqe=s(hE);O8e=n(zqe,"STRONG",{});var m$t=s(O8e);k5r=r(m$t,"xlm"),m$t.forEach(t),S5r=r(zqe," \u2014 "),zJ=n(zqe,"A",{href:!0});var g$t=s(zJ);R5r=r(g$t,"TFXLMWithLMHeadModel"),g$t.forEach(t),P5r=r(zqe," (XLM model)"),zqe.forEach(t),B5r=i(fe),pE=n(fe,"LI",{});var Qqe=s(pE);V8e=n(Qqe,"STRONG",{});var h$t=s(V8e);I5r=r(h$t,"xlm-roberta"),h$t.forEach(t),N5r=r(Qqe," \u2014 "),QJ=n(Qqe,"A",{href:!0});var p$t=s(QJ);q5r=r(p$t,"TFXLMRobertaForMaskedLM"),p$t.forEach(t),j5r=r(Qqe," (XLM-RoBERTa model)"),Qqe.forEach(t),fe.forEach(t),D5r=i(Pl),T(_E.$$.fragment,Pl),Pl.forEach(t),Rl.forEach(t),rXe=i(f),uc=n(f,"H2",{class:!0});var cQe=s(uc);uE=n(cQe,"A",{id:!0,class:!0,href:!0});var _$t=s(uE);X8e=n(_$t,"SPAN",{});var u$t=s(X8e);T(Z9.$$.fragment,u$t),u$t.forEach(t),_$t.forEach(t),G5r=i(cQe),z8e=n(cQe,"SPAN",{});var b$t=s(z8e);O5r=r(b$t,"TFAutoModelForSeq2SeqLM"),b$t.forEach(t),cQe.forEach(t),tXe=i(f),nr=n(f,"DIV",{class:!0});var Bl=s(nr);T(ex.$$.fragment,Bl),V5r=i(Bl),bc=n(Bl,"P",{});var ete=s(bc);X5r=r(ete,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),WJ=n(ete,"A",{href:!0});var v$t=s(WJ);z5r=r(v$t,"from_pretrained()"),v$t.forEach(t),Q5r=r(ete," class method or the "),HJ=n(ete,"A",{href:!0});var F$t=s(HJ);W5r=r(F$t,"from_config()"),F$t.forEach(t),H5r=r(ete,` class
method.`),ete.forEach(t),U5r=i(Bl),ox=n(Bl,"P",{});var fQe=s(ox);J5r=r(fQe,"This class cannot be instantiated directly using "),Q8e=n(fQe,"CODE",{});var T$t=s(Q8e);Y5r=r(T$t,"__init__()"),T$t.forEach(t),K5r=r(fQe," (throws an error)."),fQe.forEach(t),Z5r=i(Bl),Bt=n(Bl,"DIV",{class:!0});var JA=s(Bt);T(rx.$$.fragment,JA),e0r=i(JA),W8e=n(JA,"P",{});var M$t=s(W8e);o0r=r(M$t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),M$t.forEach(t),r0r=i(JA),vc=n(JA,"P",{});var ote=s(vc);t0r=r(ote,`Note:
Loading a model from its configuration file does `),H8e=n(ote,"STRONG",{});var E$t=s(H8e);a0r=r(E$t,"not"),E$t.forEach(t),n0r=r(ote,` load the model weights. It only affects the
model\u2019s configuration. Use `),UJ=n(ote,"A",{href:!0});var C$t=s(UJ);s0r=r(C$t,"from_pretrained()"),C$t.forEach(t),l0r=r(ote," to load the model weights."),ote.forEach(t),i0r=i(JA),T(bE.$$.fragment,JA),JA.forEach(t),d0r=i(Bl),Rr=n(Bl,"DIV",{class:!0});var Il=s(Rr);T(tx.$$.fragment,Il),c0r=i(Il),U8e=n(Il,"P",{});var w$t=s(U8e);f0r=r(w$t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),w$t.forEach(t),m0r=i(Il),fn=n(Il,"P",{});var YA=s(fn);g0r=r(YA,"The model class to instantiate is selected based on the "),J8e=n(YA,"CODE",{});var A$t=s(J8e);h0r=r(A$t,"model_type"),A$t.forEach(t),p0r=r(YA,` property of the config object (either
passed as an argument or loaded from `),Y8e=n(YA,"CODE",{});var L$t=s(Y8e);_0r=r(L$t,"pretrained_model_name_or_path"),L$t.forEach(t),u0r=r(YA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K8e=n(YA,"CODE",{});var y$t=s(K8e);b0r=r(y$t,"pretrained_model_name_or_path"),y$t.forEach(t),v0r=r(YA,":"),YA.forEach(t),F0r=i(Il),ye=n(Il,"UL",{});var Ie=s(ye);vE=n(Ie,"LI",{});var Wqe=s(vE);Z8e=n(Wqe,"STRONG",{});var x$t=s(Z8e);T0r=r(x$t,"bart"),x$t.forEach(t),M0r=r(Wqe," \u2014 "),JJ=n(Wqe,"A",{href:!0});var $$t=s(JJ);E0r=r($$t,"TFBartForConditionalGeneration"),$$t.forEach(t),C0r=r(Wqe," (BART model)"),Wqe.forEach(t),w0r=i(Ie),FE=n(Ie,"LI",{});var Hqe=s(FE);eMe=n(Hqe,"STRONG",{});var k$t=s(eMe);A0r=r(k$t,"blenderbot"),k$t.forEach(t),L0r=r(Hqe," \u2014 "),YJ=n(Hqe,"A",{href:!0});var S$t=s(YJ);y0r=r(S$t,"TFBlenderbotForConditionalGeneration"),S$t.forEach(t),x0r=r(Hqe," (Blenderbot model)"),Hqe.forEach(t),$0r=i(Ie),TE=n(Ie,"LI",{});var Uqe=s(TE);oMe=n(Uqe,"STRONG",{});var R$t=s(oMe);k0r=r(R$t,"blenderbot-small"),R$t.forEach(t),S0r=r(Uqe," \u2014 "),KJ=n(Uqe,"A",{href:!0});var P$t=s(KJ);R0r=r(P$t,"TFBlenderbotSmallForConditionalGeneration"),P$t.forEach(t),P0r=r(Uqe," (BlenderbotSmall model)"),Uqe.forEach(t),B0r=i(Ie),ME=n(Ie,"LI",{});var Jqe=s(ME);rMe=n(Jqe,"STRONG",{});var B$t=s(rMe);I0r=r(B$t,"encoder-decoder"),B$t.forEach(t),N0r=r(Jqe," \u2014 "),ZJ=n(Jqe,"A",{href:!0});var I$t=s(ZJ);q0r=r(I$t,"TFEncoderDecoderModel"),I$t.forEach(t),j0r=r(Jqe," (Encoder decoder model)"),Jqe.forEach(t),D0r=i(Ie),EE=n(Ie,"LI",{});var Yqe=s(EE);tMe=n(Yqe,"STRONG",{});var N$t=s(tMe);G0r=r(N$t,"led"),N$t.forEach(t),O0r=r(Yqe," \u2014 "),eY=n(Yqe,"A",{href:!0});var q$t=s(eY);V0r=r(q$t,"TFLEDForConditionalGeneration"),q$t.forEach(t),X0r=r(Yqe," (LED model)"),Yqe.forEach(t),z0r=i(Ie),CE=n(Ie,"LI",{});var Kqe=s(CE);aMe=n(Kqe,"STRONG",{});var j$t=s(aMe);Q0r=r(j$t,"marian"),j$t.forEach(t),W0r=r(Kqe," \u2014 "),oY=n(Kqe,"A",{href:!0});var D$t=s(oY);H0r=r(D$t,"TFMarianMTModel"),D$t.forEach(t),U0r=r(Kqe," (Marian model)"),Kqe.forEach(t),J0r=i(Ie),wE=n(Ie,"LI",{});var Zqe=s(wE);nMe=n(Zqe,"STRONG",{});var G$t=s(nMe);Y0r=r(G$t,"mbart"),G$t.forEach(t),K0r=r(Zqe," \u2014 "),rY=n(Zqe,"A",{href:!0});var O$t=s(rY);Z0r=r(O$t,"TFMBartForConditionalGeneration"),O$t.forEach(t),ewr=r(Zqe," (mBART model)"),Zqe.forEach(t),owr=i(Ie),AE=n(Ie,"LI",{});var eje=s(AE);sMe=n(eje,"STRONG",{});var V$t=s(sMe);rwr=r(V$t,"mt5"),V$t.forEach(t),twr=r(eje," \u2014 "),tY=n(eje,"A",{href:!0});var X$t=s(tY);awr=r(X$t,"TFMT5ForConditionalGeneration"),X$t.forEach(t),nwr=r(eje," (MT5 model)"),eje.forEach(t),swr=i(Ie),LE=n(Ie,"LI",{});var oje=s(LE);lMe=n(oje,"STRONG",{});var z$t=s(lMe);lwr=r(z$t,"pegasus"),z$t.forEach(t),iwr=r(oje," \u2014 "),aY=n(oje,"A",{href:!0});var Q$t=s(aY);dwr=r(Q$t,"TFPegasusForConditionalGeneration"),Q$t.forEach(t),cwr=r(oje," (Pegasus model)"),oje.forEach(t),fwr=i(Ie),yE=n(Ie,"LI",{});var rje=s(yE);iMe=n(rje,"STRONG",{});var W$t=s(iMe);mwr=r(W$t,"t5"),W$t.forEach(t),gwr=r(rje," \u2014 "),nY=n(rje,"A",{href:!0});var H$t=s(nY);hwr=r(H$t,"TFT5ForConditionalGeneration"),H$t.forEach(t),pwr=r(rje," (T5 model)"),rje.forEach(t),Ie.forEach(t),_wr=i(Il),T(xE.$$.fragment,Il),Il.forEach(t),Bl.forEach(t),aXe=i(f),Fc=n(f,"H2",{class:!0});var mQe=s(Fc);$E=n(mQe,"A",{id:!0,class:!0,href:!0});var U$t=s($E);dMe=n(U$t,"SPAN",{});var J$t=s(dMe);T(ax.$$.fragment,J$t),J$t.forEach(t),U$t.forEach(t),uwr=i(mQe),cMe=n(mQe,"SPAN",{});var Y$t=s(cMe);bwr=r(Y$t,"TFAutoModelForSequenceClassification"),Y$t.forEach(t),mQe.forEach(t),nXe=i(f),sr=n(f,"DIV",{class:!0});var Nl=s(sr);T(nx.$$.fragment,Nl),vwr=i(Nl),Tc=n(Nl,"P",{});var rte=s(Tc);Fwr=r(rte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),sY=n(rte,"A",{href:!0});var K$t=s(sY);Twr=r(K$t,"from_pretrained()"),K$t.forEach(t),Mwr=r(rte," class method or the "),lY=n(rte,"A",{href:!0});var Z$t=s(lY);Ewr=r(Z$t,"from_config()"),Z$t.forEach(t),Cwr=r(rte,` class
method.`),rte.forEach(t),wwr=i(Nl),sx=n(Nl,"P",{});var gQe=s(sx);Awr=r(gQe,"This class cannot be instantiated directly using "),fMe=n(gQe,"CODE",{});var ekt=s(fMe);Lwr=r(ekt,"__init__()"),ekt.forEach(t),ywr=r(gQe," (throws an error)."),gQe.forEach(t),xwr=i(Nl),It=n(Nl,"DIV",{class:!0});var KA=s(It);T(lx.$$.fragment,KA),$wr=i(KA),mMe=n(KA,"P",{});var okt=s(mMe);kwr=r(okt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),okt.forEach(t),Swr=i(KA),Mc=n(KA,"P",{});var tte=s(Mc);Rwr=r(tte,`Note:
Loading a model from its configuration file does `),gMe=n(tte,"STRONG",{});var rkt=s(gMe);Pwr=r(rkt,"not"),rkt.forEach(t),Bwr=r(tte,` load the model weights. It only affects the
model\u2019s configuration. Use `),iY=n(tte,"A",{href:!0});var tkt=s(iY);Iwr=r(tkt,"from_pretrained()"),tkt.forEach(t),Nwr=r(tte," to load the model weights."),tte.forEach(t),qwr=i(KA),T(kE.$$.fragment,KA),KA.forEach(t),jwr=i(Nl),Pr=n(Nl,"DIV",{class:!0});var ql=s(Pr);T(ix.$$.fragment,ql),Dwr=i(ql),hMe=n(ql,"P",{});var akt=s(hMe);Gwr=r(akt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),akt.forEach(t),Owr=i(ql),mn=n(ql,"P",{});var ZA=s(mn);Vwr=r(ZA,"The model class to instantiate is selected based on the "),pMe=n(ZA,"CODE",{});var nkt=s(pMe);Xwr=r(nkt,"model_type"),nkt.forEach(t),zwr=r(ZA,` property of the config object (either
passed as an argument or loaded from `),_Me=n(ZA,"CODE",{});var skt=s(_Me);Qwr=r(skt,"pretrained_model_name_or_path"),skt.forEach(t),Wwr=r(ZA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uMe=n(ZA,"CODE",{});var lkt=s(uMe);Hwr=r(lkt,"pretrained_model_name_or_path"),lkt.forEach(t),Uwr=r(ZA,":"),ZA.forEach(t),Jwr=i(ql),te=n(ql,"UL",{});var ne=s(te);SE=n(ne,"LI",{});var tje=s(SE);bMe=n(tje,"STRONG",{});var ikt=s(bMe);Ywr=r(ikt,"albert"),ikt.forEach(t),Kwr=r(tje," \u2014 "),dY=n(tje,"A",{href:!0});var dkt=s(dY);Zwr=r(dkt,"TFAlbertForSequenceClassification"),dkt.forEach(t),eAr=r(tje," (ALBERT model)"),tje.forEach(t),oAr=i(ne),RE=n(ne,"LI",{});var aje=s(RE);vMe=n(aje,"STRONG",{});var ckt=s(vMe);rAr=r(ckt,"bert"),ckt.forEach(t),tAr=r(aje," \u2014 "),cY=n(aje,"A",{href:!0});var fkt=s(cY);aAr=r(fkt,"TFBertForSequenceClassification"),fkt.forEach(t),nAr=r(aje," (BERT model)"),aje.forEach(t),sAr=i(ne),PE=n(ne,"LI",{});var nje=s(PE);FMe=n(nje,"STRONG",{});var mkt=s(FMe);lAr=r(mkt,"camembert"),mkt.forEach(t),iAr=r(nje," \u2014 "),fY=n(nje,"A",{href:!0});var gkt=s(fY);dAr=r(gkt,"TFCamembertForSequenceClassification"),gkt.forEach(t),cAr=r(nje," (CamemBERT model)"),nje.forEach(t),fAr=i(ne),BE=n(ne,"LI",{});var sje=s(BE);TMe=n(sje,"STRONG",{});var hkt=s(TMe);mAr=r(hkt,"convbert"),hkt.forEach(t),gAr=r(sje," \u2014 "),mY=n(sje,"A",{href:!0});var pkt=s(mY);hAr=r(pkt,"TFConvBertForSequenceClassification"),pkt.forEach(t),pAr=r(sje," (ConvBERT model)"),sje.forEach(t),_Ar=i(ne),IE=n(ne,"LI",{});var lje=s(IE);MMe=n(lje,"STRONG",{});var _kt=s(MMe);uAr=r(_kt,"ctrl"),_kt.forEach(t),bAr=r(lje," \u2014 "),gY=n(lje,"A",{href:!0});var ukt=s(gY);vAr=r(ukt,"TFCTRLForSequenceClassification"),ukt.forEach(t),FAr=r(lje," (CTRL model)"),lje.forEach(t),TAr=i(ne),NE=n(ne,"LI",{});var ije=s(NE);EMe=n(ije,"STRONG",{});var bkt=s(EMe);MAr=r(bkt,"deberta"),bkt.forEach(t),EAr=r(ije," \u2014 "),hY=n(ije,"A",{href:!0});var vkt=s(hY);CAr=r(vkt,"TFDebertaForSequenceClassification"),vkt.forEach(t),wAr=r(ije," (DeBERTa model)"),ije.forEach(t),AAr=i(ne),qE=n(ne,"LI",{});var dje=s(qE);CMe=n(dje,"STRONG",{});var Fkt=s(CMe);LAr=r(Fkt,"deberta-v2"),Fkt.forEach(t),yAr=r(dje," \u2014 "),pY=n(dje,"A",{href:!0});var Tkt=s(pY);xAr=r(Tkt,"TFDebertaV2ForSequenceClassification"),Tkt.forEach(t),$Ar=r(dje," (DeBERTa-v2 model)"),dje.forEach(t),kAr=i(ne),jE=n(ne,"LI",{});var cje=s(jE);wMe=n(cje,"STRONG",{});var Mkt=s(wMe);SAr=r(Mkt,"distilbert"),Mkt.forEach(t),RAr=r(cje," \u2014 "),_Y=n(cje,"A",{href:!0});var Ekt=s(_Y);PAr=r(Ekt,"TFDistilBertForSequenceClassification"),Ekt.forEach(t),BAr=r(cje," (DistilBERT model)"),cje.forEach(t),IAr=i(ne),DE=n(ne,"LI",{});var fje=s(DE);AMe=n(fje,"STRONG",{});var Ckt=s(AMe);NAr=r(Ckt,"electra"),Ckt.forEach(t),qAr=r(fje," \u2014 "),uY=n(fje,"A",{href:!0});var wkt=s(uY);jAr=r(wkt,"TFElectraForSequenceClassification"),wkt.forEach(t),DAr=r(fje," (ELECTRA model)"),fje.forEach(t),GAr=i(ne),GE=n(ne,"LI",{});var mje=s(GE);LMe=n(mje,"STRONG",{});var Akt=s(LMe);OAr=r(Akt,"flaubert"),Akt.forEach(t),VAr=r(mje," \u2014 "),bY=n(mje,"A",{href:!0});var Lkt=s(bY);XAr=r(Lkt,"TFFlaubertForSequenceClassification"),Lkt.forEach(t),zAr=r(mje," (FlauBERT model)"),mje.forEach(t),QAr=i(ne),OE=n(ne,"LI",{});var gje=s(OE);yMe=n(gje,"STRONG",{});var ykt=s(yMe);WAr=r(ykt,"funnel"),ykt.forEach(t),HAr=r(gje," \u2014 "),vY=n(gje,"A",{href:!0});var xkt=s(vY);UAr=r(xkt,"TFFunnelForSequenceClassification"),xkt.forEach(t),JAr=r(gje," (Funnel Transformer model)"),gje.forEach(t),YAr=i(ne),VE=n(ne,"LI",{});var hje=s(VE);xMe=n(hje,"STRONG",{});var $kt=s(xMe);KAr=r($kt,"gpt2"),$kt.forEach(t),ZAr=r(hje," \u2014 "),FY=n(hje,"A",{href:!0});var kkt=s(FY);e6r=r(kkt,"TFGPT2ForSequenceClassification"),kkt.forEach(t),o6r=r(hje," (OpenAI GPT-2 model)"),hje.forEach(t),r6r=i(ne),XE=n(ne,"LI",{});var pje=s(XE);$Me=n(pje,"STRONG",{});var Skt=s($Me);t6r=r(Skt,"gptj"),Skt.forEach(t),a6r=r(pje," \u2014 "),TY=n(pje,"A",{href:!0});var Rkt=s(TY);n6r=r(Rkt,"TFGPTJForSequenceClassification"),Rkt.forEach(t),s6r=r(pje," (GPT-J model)"),pje.forEach(t),l6r=i(ne),zE=n(ne,"LI",{});var _je=s(zE);kMe=n(_je,"STRONG",{});var Pkt=s(kMe);i6r=r(Pkt,"layoutlm"),Pkt.forEach(t),d6r=r(_je," \u2014 "),MY=n(_je,"A",{href:!0});var Bkt=s(MY);c6r=r(Bkt,"TFLayoutLMForSequenceClassification"),Bkt.forEach(t),f6r=r(_je," (LayoutLM model)"),_je.forEach(t),m6r=i(ne),QE=n(ne,"LI",{});var uje=s(QE);SMe=n(uje,"STRONG",{});var Ikt=s(SMe);g6r=r(Ikt,"longformer"),Ikt.forEach(t),h6r=r(uje," \u2014 "),EY=n(uje,"A",{href:!0});var Nkt=s(EY);p6r=r(Nkt,"TFLongformerForSequenceClassification"),Nkt.forEach(t),_6r=r(uje," (Longformer model)"),uje.forEach(t),u6r=i(ne),WE=n(ne,"LI",{});var bje=s(WE);RMe=n(bje,"STRONG",{});var qkt=s(RMe);b6r=r(qkt,"mobilebert"),qkt.forEach(t),v6r=r(bje," \u2014 "),CY=n(bje,"A",{href:!0});var jkt=s(CY);F6r=r(jkt,"TFMobileBertForSequenceClassification"),jkt.forEach(t),T6r=r(bje," (MobileBERT model)"),bje.forEach(t),M6r=i(ne),HE=n(ne,"LI",{});var vje=s(HE);PMe=n(vje,"STRONG",{});var Dkt=s(PMe);E6r=r(Dkt,"mpnet"),Dkt.forEach(t),C6r=r(vje," \u2014 "),wY=n(vje,"A",{href:!0});var Gkt=s(wY);w6r=r(Gkt,"TFMPNetForSequenceClassification"),Gkt.forEach(t),A6r=r(vje," (MPNet model)"),vje.forEach(t),L6r=i(ne),UE=n(ne,"LI",{});var Fje=s(UE);BMe=n(Fje,"STRONG",{});var Okt=s(BMe);y6r=r(Okt,"openai-gpt"),Okt.forEach(t),x6r=r(Fje," \u2014 "),AY=n(Fje,"A",{href:!0});var Vkt=s(AY);$6r=r(Vkt,"TFOpenAIGPTForSequenceClassification"),Vkt.forEach(t),k6r=r(Fje," (OpenAI GPT model)"),Fje.forEach(t),S6r=i(ne),JE=n(ne,"LI",{});var Tje=s(JE);IMe=n(Tje,"STRONG",{});var Xkt=s(IMe);R6r=r(Xkt,"rembert"),Xkt.forEach(t),P6r=r(Tje," \u2014 "),LY=n(Tje,"A",{href:!0});var zkt=s(LY);B6r=r(zkt,"TFRemBertForSequenceClassification"),zkt.forEach(t),I6r=r(Tje," (RemBERT model)"),Tje.forEach(t),N6r=i(ne),YE=n(ne,"LI",{});var Mje=s(YE);NMe=n(Mje,"STRONG",{});var Qkt=s(NMe);q6r=r(Qkt,"roberta"),Qkt.forEach(t),j6r=r(Mje," \u2014 "),yY=n(Mje,"A",{href:!0});var Wkt=s(yY);D6r=r(Wkt,"TFRobertaForSequenceClassification"),Wkt.forEach(t),G6r=r(Mje," (RoBERTa model)"),Mje.forEach(t),O6r=i(ne),KE=n(ne,"LI",{});var Eje=s(KE);qMe=n(Eje,"STRONG",{});var Hkt=s(qMe);V6r=r(Hkt,"roformer"),Hkt.forEach(t),X6r=r(Eje," \u2014 "),xY=n(Eje,"A",{href:!0});var Ukt=s(xY);z6r=r(Ukt,"TFRoFormerForSequenceClassification"),Ukt.forEach(t),Q6r=r(Eje," (RoFormer model)"),Eje.forEach(t),W6r=i(ne),ZE=n(ne,"LI",{});var Cje=s(ZE);jMe=n(Cje,"STRONG",{});var Jkt=s(jMe);H6r=r(Jkt,"tapas"),Jkt.forEach(t),U6r=r(Cje," \u2014 "),$Y=n(Cje,"A",{href:!0});var Ykt=s($Y);J6r=r(Ykt,"TFTapasForSequenceClassification"),Ykt.forEach(t),Y6r=r(Cje," (TAPAS model)"),Cje.forEach(t),K6r=i(ne),eC=n(ne,"LI",{});var wje=s(eC);DMe=n(wje,"STRONG",{});var Kkt=s(DMe);Z6r=r(Kkt,"transfo-xl"),Kkt.forEach(t),eLr=r(wje," \u2014 "),kY=n(wje,"A",{href:!0});var Zkt=s(kY);oLr=r(Zkt,"TFTransfoXLForSequenceClassification"),Zkt.forEach(t),rLr=r(wje," (Transformer-XL model)"),wje.forEach(t),tLr=i(ne),oC=n(ne,"LI",{});var Aje=s(oC);GMe=n(Aje,"STRONG",{});var eSt=s(GMe);aLr=r(eSt,"xlm"),eSt.forEach(t),nLr=r(Aje," \u2014 "),SY=n(Aje,"A",{href:!0});var oSt=s(SY);sLr=r(oSt,"TFXLMForSequenceClassification"),oSt.forEach(t),lLr=r(Aje," (XLM model)"),Aje.forEach(t),iLr=i(ne),rC=n(ne,"LI",{});var Lje=s(rC);OMe=n(Lje,"STRONG",{});var rSt=s(OMe);dLr=r(rSt,"xlm-roberta"),rSt.forEach(t),cLr=r(Lje," \u2014 "),RY=n(Lje,"A",{href:!0});var tSt=s(RY);fLr=r(tSt,"TFXLMRobertaForSequenceClassification"),tSt.forEach(t),mLr=r(Lje," (XLM-RoBERTa model)"),Lje.forEach(t),gLr=i(ne),tC=n(ne,"LI",{});var yje=s(tC);VMe=n(yje,"STRONG",{});var aSt=s(VMe);hLr=r(aSt,"xlnet"),aSt.forEach(t),pLr=r(yje," \u2014 "),PY=n(yje,"A",{href:!0});var nSt=s(PY);_Lr=r(nSt,"TFXLNetForSequenceClassification"),nSt.forEach(t),uLr=r(yje," (XLNet model)"),yje.forEach(t),ne.forEach(t),bLr=i(ql),T(aC.$$.fragment,ql),ql.forEach(t),Nl.forEach(t),sXe=i(f),Ec=n(f,"H2",{class:!0});var hQe=s(Ec);nC=n(hQe,"A",{id:!0,class:!0,href:!0});var sSt=s(nC);XMe=n(sSt,"SPAN",{});var lSt=s(XMe);T(dx.$$.fragment,lSt),lSt.forEach(t),sSt.forEach(t),vLr=i(hQe),zMe=n(hQe,"SPAN",{});var iSt=s(zMe);FLr=r(iSt,"TFAutoModelForMultipleChoice"),iSt.forEach(t),hQe.forEach(t),lXe=i(f),lr=n(f,"DIV",{class:!0});var jl=s(lr);T(cx.$$.fragment,jl),TLr=i(jl),Cc=n(jl,"P",{});var ate=s(Cc);MLr=r(ate,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),BY=n(ate,"A",{href:!0});var dSt=s(BY);ELr=r(dSt,"from_pretrained()"),dSt.forEach(t),CLr=r(ate," class method or the "),IY=n(ate,"A",{href:!0});var cSt=s(IY);wLr=r(cSt,"from_config()"),cSt.forEach(t),ALr=r(ate,` class
method.`),ate.forEach(t),LLr=i(jl),fx=n(jl,"P",{});var pQe=s(fx);yLr=r(pQe,"This class cannot be instantiated directly using "),QMe=n(pQe,"CODE",{});var fSt=s(QMe);xLr=r(fSt,"__init__()"),fSt.forEach(t),$Lr=r(pQe," (throws an error)."),pQe.forEach(t),kLr=i(jl),Nt=n(jl,"DIV",{class:!0});var e6=s(Nt);T(mx.$$.fragment,e6),SLr=i(e6),WMe=n(e6,"P",{});var mSt=s(WMe);RLr=r(mSt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),mSt.forEach(t),PLr=i(e6),wc=n(e6,"P",{});var nte=s(wc);BLr=r(nte,`Note:
Loading a model from its configuration file does `),HMe=n(nte,"STRONG",{});var gSt=s(HMe);ILr=r(gSt,"not"),gSt.forEach(t),NLr=r(nte,` load the model weights. It only affects the
model\u2019s configuration. Use `),NY=n(nte,"A",{href:!0});var hSt=s(NY);qLr=r(hSt,"from_pretrained()"),hSt.forEach(t),jLr=r(nte," to load the model weights."),nte.forEach(t),DLr=i(e6),T(sC.$$.fragment,e6),e6.forEach(t),GLr=i(jl),Br=n(jl,"DIV",{class:!0});var Dl=s(Br);T(gx.$$.fragment,Dl),OLr=i(Dl),UMe=n(Dl,"P",{});var pSt=s(UMe);VLr=r(pSt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),pSt.forEach(t),XLr=i(Dl),gn=n(Dl,"P",{});var o6=s(gn);zLr=r(o6,"The model class to instantiate is selected based on the "),JMe=n(o6,"CODE",{});var _St=s(JMe);QLr=r(_St,"model_type"),_St.forEach(t),WLr=r(o6,` property of the config object (either
passed as an argument or loaded from `),YMe=n(o6,"CODE",{});var uSt=s(YMe);HLr=r(uSt,"pretrained_model_name_or_path"),uSt.forEach(t),ULr=r(o6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KMe=n(o6,"CODE",{});var bSt=s(KMe);JLr=r(bSt,"pretrained_model_name_or_path"),bSt.forEach(t),YLr=r(o6,":"),o6.forEach(t),KLr=i(Dl),_e=n(Dl,"UL",{});var ve=s(_e);lC=n(ve,"LI",{});var xje=s(lC);ZMe=n(xje,"STRONG",{});var vSt=s(ZMe);ZLr=r(vSt,"albert"),vSt.forEach(t),eyr=r(xje," \u2014 "),qY=n(xje,"A",{href:!0});var FSt=s(qY);oyr=r(FSt,"TFAlbertForMultipleChoice"),FSt.forEach(t),ryr=r(xje," (ALBERT model)"),xje.forEach(t),tyr=i(ve),iC=n(ve,"LI",{});var $je=s(iC);e4e=n($je,"STRONG",{});var TSt=s(e4e);ayr=r(TSt,"bert"),TSt.forEach(t),nyr=r($je," \u2014 "),jY=n($je,"A",{href:!0});var MSt=s(jY);syr=r(MSt,"TFBertForMultipleChoice"),MSt.forEach(t),lyr=r($je," (BERT model)"),$je.forEach(t),iyr=i(ve),dC=n(ve,"LI",{});var kje=s(dC);o4e=n(kje,"STRONG",{});var ESt=s(o4e);dyr=r(ESt,"camembert"),ESt.forEach(t),cyr=r(kje," \u2014 "),DY=n(kje,"A",{href:!0});var CSt=s(DY);fyr=r(CSt,"TFCamembertForMultipleChoice"),CSt.forEach(t),myr=r(kje," (CamemBERT model)"),kje.forEach(t),gyr=i(ve),cC=n(ve,"LI",{});var Sje=s(cC);r4e=n(Sje,"STRONG",{});var wSt=s(r4e);hyr=r(wSt,"convbert"),wSt.forEach(t),pyr=r(Sje," \u2014 "),GY=n(Sje,"A",{href:!0});var ASt=s(GY);_yr=r(ASt,"TFConvBertForMultipleChoice"),ASt.forEach(t),uyr=r(Sje," (ConvBERT model)"),Sje.forEach(t),byr=i(ve),fC=n(ve,"LI",{});var Rje=s(fC);t4e=n(Rje,"STRONG",{});var LSt=s(t4e);vyr=r(LSt,"distilbert"),LSt.forEach(t),Fyr=r(Rje," \u2014 "),OY=n(Rje,"A",{href:!0});var ySt=s(OY);Tyr=r(ySt,"TFDistilBertForMultipleChoice"),ySt.forEach(t),Myr=r(Rje," (DistilBERT model)"),Rje.forEach(t),Eyr=i(ve),mC=n(ve,"LI",{});var Pje=s(mC);a4e=n(Pje,"STRONG",{});var xSt=s(a4e);Cyr=r(xSt,"electra"),xSt.forEach(t),wyr=r(Pje," \u2014 "),VY=n(Pje,"A",{href:!0});var $St=s(VY);Ayr=r($St,"TFElectraForMultipleChoice"),$St.forEach(t),Lyr=r(Pje," (ELECTRA model)"),Pje.forEach(t),yyr=i(ve),gC=n(ve,"LI",{});var Bje=s(gC);n4e=n(Bje,"STRONG",{});var kSt=s(n4e);xyr=r(kSt,"flaubert"),kSt.forEach(t),$yr=r(Bje," \u2014 "),XY=n(Bje,"A",{href:!0});var SSt=s(XY);kyr=r(SSt,"TFFlaubertForMultipleChoice"),SSt.forEach(t),Syr=r(Bje," (FlauBERT model)"),Bje.forEach(t),Ryr=i(ve),hC=n(ve,"LI",{});var Ije=s(hC);s4e=n(Ije,"STRONG",{});var RSt=s(s4e);Pyr=r(RSt,"funnel"),RSt.forEach(t),Byr=r(Ije," \u2014 "),zY=n(Ije,"A",{href:!0});var PSt=s(zY);Iyr=r(PSt,"TFFunnelForMultipleChoice"),PSt.forEach(t),Nyr=r(Ije," (Funnel Transformer model)"),Ije.forEach(t),qyr=i(ve),pC=n(ve,"LI",{});var Nje=s(pC);l4e=n(Nje,"STRONG",{});var BSt=s(l4e);jyr=r(BSt,"longformer"),BSt.forEach(t),Dyr=r(Nje," \u2014 "),QY=n(Nje,"A",{href:!0});var ISt=s(QY);Gyr=r(ISt,"TFLongformerForMultipleChoice"),ISt.forEach(t),Oyr=r(Nje," (Longformer model)"),Nje.forEach(t),Vyr=i(ve),_C=n(ve,"LI",{});var qje=s(_C);i4e=n(qje,"STRONG",{});var NSt=s(i4e);Xyr=r(NSt,"mobilebert"),NSt.forEach(t),zyr=r(qje," \u2014 "),WY=n(qje,"A",{href:!0});var qSt=s(WY);Qyr=r(qSt,"TFMobileBertForMultipleChoice"),qSt.forEach(t),Wyr=r(qje," (MobileBERT model)"),qje.forEach(t),Hyr=i(ve),uC=n(ve,"LI",{});var jje=s(uC);d4e=n(jje,"STRONG",{});var jSt=s(d4e);Uyr=r(jSt,"mpnet"),jSt.forEach(t),Jyr=r(jje," \u2014 "),HY=n(jje,"A",{href:!0});var DSt=s(HY);Yyr=r(DSt,"TFMPNetForMultipleChoice"),DSt.forEach(t),Kyr=r(jje," (MPNet model)"),jje.forEach(t),Zyr=i(ve),bC=n(ve,"LI",{});var Dje=s(bC);c4e=n(Dje,"STRONG",{});var GSt=s(c4e);e9r=r(GSt,"rembert"),GSt.forEach(t),o9r=r(Dje," \u2014 "),UY=n(Dje,"A",{href:!0});var OSt=s(UY);r9r=r(OSt,"TFRemBertForMultipleChoice"),OSt.forEach(t),t9r=r(Dje," (RemBERT model)"),Dje.forEach(t),a9r=i(ve),vC=n(ve,"LI",{});var Gje=s(vC);f4e=n(Gje,"STRONG",{});var VSt=s(f4e);n9r=r(VSt,"roberta"),VSt.forEach(t),s9r=r(Gje," \u2014 "),JY=n(Gje,"A",{href:!0});var XSt=s(JY);l9r=r(XSt,"TFRobertaForMultipleChoice"),XSt.forEach(t),i9r=r(Gje," (RoBERTa model)"),Gje.forEach(t),d9r=i(ve),FC=n(ve,"LI",{});var Oje=s(FC);m4e=n(Oje,"STRONG",{});var zSt=s(m4e);c9r=r(zSt,"roformer"),zSt.forEach(t),f9r=r(Oje," \u2014 "),YY=n(Oje,"A",{href:!0});var QSt=s(YY);m9r=r(QSt,"TFRoFormerForMultipleChoice"),QSt.forEach(t),g9r=r(Oje," (RoFormer model)"),Oje.forEach(t),h9r=i(ve),TC=n(ve,"LI",{});var Vje=s(TC);g4e=n(Vje,"STRONG",{});var WSt=s(g4e);p9r=r(WSt,"xlm"),WSt.forEach(t),_9r=r(Vje," \u2014 "),KY=n(Vje,"A",{href:!0});var HSt=s(KY);u9r=r(HSt,"TFXLMForMultipleChoice"),HSt.forEach(t),b9r=r(Vje," (XLM model)"),Vje.forEach(t),v9r=i(ve),MC=n(ve,"LI",{});var Xje=s(MC);h4e=n(Xje,"STRONG",{});var USt=s(h4e);F9r=r(USt,"xlm-roberta"),USt.forEach(t),T9r=r(Xje," \u2014 "),ZY=n(Xje,"A",{href:!0});var JSt=s(ZY);M9r=r(JSt,"TFXLMRobertaForMultipleChoice"),JSt.forEach(t),E9r=r(Xje," (XLM-RoBERTa model)"),Xje.forEach(t),C9r=i(ve),EC=n(ve,"LI",{});var zje=s(EC);p4e=n(zje,"STRONG",{});var YSt=s(p4e);w9r=r(YSt,"xlnet"),YSt.forEach(t),A9r=r(zje," \u2014 "),eK=n(zje,"A",{href:!0});var KSt=s(eK);L9r=r(KSt,"TFXLNetForMultipleChoice"),KSt.forEach(t),y9r=r(zje," (XLNet model)"),zje.forEach(t),ve.forEach(t),x9r=i(Dl),T(CC.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),iXe=i(f),Ac=n(f,"H2",{class:!0});var _Qe=s(Ac);wC=n(_Qe,"A",{id:!0,class:!0,href:!0});var ZSt=s(wC);_4e=n(ZSt,"SPAN",{});var eRt=s(_4e);T(hx.$$.fragment,eRt),eRt.forEach(t),ZSt.forEach(t),$9r=i(_Qe),u4e=n(_Qe,"SPAN",{});var oRt=s(u4e);k9r=r(oRt,"TFAutoModelForNextSentencePrediction"),oRt.forEach(t),_Qe.forEach(t),dXe=i(f),ir=n(f,"DIV",{class:!0});var Gl=s(ir);T(px.$$.fragment,Gl),S9r=i(Gl),Lc=n(Gl,"P",{});var ste=s(Lc);R9r=r(ste,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),oK=n(ste,"A",{href:!0});var rRt=s(oK);P9r=r(rRt,"from_pretrained()"),rRt.forEach(t),B9r=r(ste," class method or the "),rK=n(ste,"A",{href:!0});var tRt=s(rK);I9r=r(tRt,"from_config()"),tRt.forEach(t),N9r=r(ste,` class
method.`),ste.forEach(t),q9r=i(Gl),_x=n(Gl,"P",{});var uQe=s(_x);j9r=r(uQe,"This class cannot be instantiated directly using "),b4e=n(uQe,"CODE",{});var aRt=s(b4e);D9r=r(aRt,"__init__()"),aRt.forEach(t),G9r=r(uQe," (throws an error)."),uQe.forEach(t),O9r=i(Gl),qt=n(Gl,"DIV",{class:!0});var r6=s(qt);T(ux.$$.fragment,r6),V9r=i(r6),v4e=n(r6,"P",{});var nRt=s(v4e);X9r=r(nRt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),nRt.forEach(t),z9r=i(r6),yc=n(r6,"P",{});var lte=s(yc);Q9r=r(lte,`Note:
Loading a model from its configuration file does `),F4e=n(lte,"STRONG",{});var sRt=s(F4e);W9r=r(sRt,"not"),sRt.forEach(t),H9r=r(lte,` load the model weights. It only affects the
model\u2019s configuration. Use `),tK=n(lte,"A",{href:!0});var lRt=s(tK);U9r=r(lRt,"from_pretrained()"),lRt.forEach(t),J9r=r(lte," to load the model weights."),lte.forEach(t),Y9r=i(r6),T(AC.$$.fragment,r6),r6.forEach(t),K9r=i(Gl),Ir=n(Gl,"DIV",{class:!0});var Ol=s(Ir);T(bx.$$.fragment,Ol),Z9r=i(Ol),T4e=n(Ol,"P",{});var iRt=s(T4e);exr=r(iRt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),iRt.forEach(t),oxr=i(Ol),hn=n(Ol,"P",{});var t6=s(hn);rxr=r(t6,"The model class to instantiate is selected based on the "),M4e=n(t6,"CODE",{});var dRt=s(M4e);txr=r(dRt,"model_type"),dRt.forEach(t),axr=r(t6,` property of the config object (either
passed as an argument or loaded from `),E4e=n(t6,"CODE",{});var cRt=s(E4e);nxr=r(cRt,"pretrained_model_name_or_path"),cRt.forEach(t),sxr=r(t6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C4e=n(t6,"CODE",{});var fRt=s(C4e);lxr=r(fRt,"pretrained_model_name_or_path"),fRt.forEach(t),ixr=r(t6,":"),t6.forEach(t),dxr=i(Ol),vx=n(Ol,"UL",{});var bQe=s(vx);LC=n(bQe,"LI",{});var Qje=s(LC);w4e=n(Qje,"STRONG",{});var mRt=s(w4e);cxr=r(mRt,"bert"),mRt.forEach(t),fxr=r(Qje," \u2014 "),aK=n(Qje,"A",{href:!0});var gRt=s(aK);mxr=r(gRt,"TFBertForNextSentencePrediction"),gRt.forEach(t),gxr=r(Qje," (BERT model)"),Qje.forEach(t),hxr=i(bQe),yC=n(bQe,"LI",{});var Wje=s(yC);A4e=n(Wje,"STRONG",{});var hRt=s(A4e);pxr=r(hRt,"mobilebert"),hRt.forEach(t),_xr=r(Wje," \u2014 "),nK=n(Wje,"A",{href:!0});var pRt=s(nK);uxr=r(pRt,"TFMobileBertForNextSentencePrediction"),pRt.forEach(t),bxr=r(Wje," (MobileBERT model)"),Wje.forEach(t),bQe.forEach(t),vxr=i(Ol),T(xC.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),cXe=i(f),xc=n(f,"H2",{class:!0});var vQe=s(xc);$C=n(vQe,"A",{id:!0,class:!0,href:!0});var _Rt=s($C);L4e=n(_Rt,"SPAN",{});var uRt=s(L4e);T(Fx.$$.fragment,uRt),uRt.forEach(t),_Rt.forEach(t),Fxr=i(vQe),y4e=n(vQe,"SPAN",{});var bRt=s(y4e);Txr=r(bRt,"TFAutoModelForTableQuestionAnswering"),bRt.forEach(t),vQe.forEach(t),fXe=i(f),dr=n(f,"DIV",{class:!0});var Vl=s(dr);T(Tx.$$.fragment,Vl),Mxr=i(Vl),$c=n(Vl,"P",{});var ite=s($c);Exr=r(ite,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),sK=n(ite,"A",{href:!0});var vRt=s(sK);Cxr=r(vRt,"from_pretrained()"),vRt.forEach(t),wxr=r(ite," class method or the "),lK=n(ite,"A",{href:!0});var FRt=s(lK);Axr=r(FRt,"from_config()"),FRt.forEach(t),Lxr=r(ite,` class
method.`),ite.forEach(t),yxr=i(Vl),Mx=n(Vl,"P",{});var FQe=s(Mx);xxr=r(FQe,"This class cannot be instantiated directly using "),x4e=n(FQe,"CODE",{});var TRt=s(x4e);$xr=r(TRt,"__init__()"),TRt.forEach(t),kxr=r(FQe," (throws an error)."),FQe.forEach(t),Sxr=i(Vl),jt=n(Vl,"DIV",{class:!0});var a6=s(jt);T(Ex.$$.fragment,a6),Rxr=i(a6),$4e=n(a6,"P",{});var MRt=s($4e);Pxr=r(MRt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),MRt.forEach(t),Bxr=i(a6),kc=n(a6,"P",{});var dte=s(kc);Ixr=r(dte,`Note:
Loading a model from its configuration file does `),k4e=n(dte,"STRONG",{});var ERt=s(k4e);Nxr=r(ERt,"not"),ERt.forEach(t),qxr=r(dte,` load the model weights. It only affects the
model\u2019s configuration. Use `),iK=n(dte,"A",{href:!0});var CRt=s(iK);jxr=r(CRt,"from_pretrained()"),CRt.forEach(t),Dxr=r(dte," to load the model weights."),dte.forEach(t),Gxr=i(a6),T(kC.$$.fragment,a6),a6.forEach(t),Oxr=i(Vl),Nr=n(Vl,"DIV",{class:!0});var Xl=s(Nr);T(Cx.$$.fragment,Xl),Vxr=i(Xl),S4e=n(Xl,"P",{});var wRt=s(S4e);Xxr=r(wRt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),wRt.forEach(t),zxr=i(Xl),pn=n(Xl,"P",{});var n6=s(pn);Qxr=r(n6,"The model class to instantiate is selected based on the "),R4e=n(n6,"CODE",{});var ARt=s(R4e);Wxr=r(ARt,"model_type"),ARt.forEach(t),Hxr=r(n6,` property of the config object (either
passed as an argument or loaded from `),P4e=n(n6,"CODE",{});var LRt=s(P4e);Uxr=r(LRt,"pretrained_model_name_or_path"),LRt.forEach(t),Jxr=r(n6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B4e=n(n6,"CODE",{});var yRt=s(B4e);Yxr=r(yRt,"pretrained_model_name_or_path"),yRt.forEach(t),Kxr=r(n6,":"),n6.forEach(t),Zxr=i(Xl),I4e=n(Xl,"UL",{});var xRt=s(I4e);SC=n(xRt,"LI",{});var Hje=s(SC);N4e=n(Hje,"STRONG",{});var $Rt=s(N4e);e$r=r($Rt,"tapas"),$Rt.forEach(t),o$r=r(Hje," \u2014 "),dK=n(Hje,"A",{href:!0});var kRt=s(dK);r$r=r(kRt,"TFTapasForQuestionAnswering"),kRt.forEach(t),t$r=r(Hje," (TAPAS model)"),Hje.forEach(t),xRt.forEach(t),a$r=i(Xl),T(RC.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),mXe=i(f),Sc=n(f,"H2",{class:!0});var TQe=s(Sc);PC=n(TQe,"A",{id:!0,class:!0,href:!0});var SRt=s(PC);q4e=n(SRt,"SPAN",{});var RRt=s(q4e);T(wx.$$.fragment,RRt),RRt.forEach(t),SRt.forEach(t),n$r=i(TQe),j4e=n(TQe,"SPAN",{});var PRt=s(j4e);s$r=r(PRt,"TFAutoModelForTokenClassification"),PRt.forEach(t),TQe.forEach(t),gXe=i(f),cr=n(f,"DIV",{class:!0});var zl=s(cr);T(Ax.$$.fragment,zl),l$r=i(zl),Rc=n(zl,"P",{});var cte=s(Rc);i$r=r(cte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),cK=n(cte,"A",{href:!0});var BRt=s(cK);d$r=r(BRt,"from_pretrained()"),BRt.forEach(t),c$r=r(cte," class method or the "),fK=n(cte,"A",{href:!0});var IRt=s(fK);f$r=r(IRt,"from_config()"),IRt.forEach(t),m$r=r(cte,` class
method.`),cte.forEach(t),g$r=i(zl),Lx=n(zl,"P",{});var MQe=s(Lx);h$r=r(MQe,"This class cannot be instantiated directly using "),D4e=n(MQe,"CODE",{});var NRt=s(D4e);p$r=r(NRt,"__init__()"),NRt.forEach(t),_$r=r(MQe," (throws an error)."),MQe.forEach(t),u$r=i(zl),Dt=n(zl,"DIV",{class:!0});var s6=s(Dt);T(yx.$$.fragment,s6),b$r=i(s6),G4e=n(s6,"P",{});var qRt=s(G4e);v$r=r(qRt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),qRt.forEach(t),F$r=i(s6),Pc=n(s6,"P",{});var fte=s(Pc);T$r=r(fte,`Note:
Loading a model from its configuration file does `),O4e=n(fte,"STRONG",{});var jRt=s(O4e);M$r=r(jRt,"not"),jRt.forEach(t),E$r=r(fte,` load the model weights. It only affects the
model\u2019s configuration. Use `),mK=n(fte,"A",{href:!0});var DRt=s(mK);C$r=r(DRt,"from_pretrained()"),DRt.forEach(t),w$r=r(fte," to load the model weights."),fte.forEach(t),A$r=i(s6),T(BC.$$.fragment,s6),s6.forEach(t),L$r=i(zl),qr=n(zl,"DIV",{class:!0});var Ql=s(qr);T(xx.$$.fragment,Ql),y$r=i(Ql),V4e=n(Ql,"P",{});var GRt=s(V4e);x$r=r(GRt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),GRt.forEach(t),$$r=i(Ql),_n=n(Ql,"P",{});var l6=s(_n);k$r=r(l6,"The model class to instantiate is selected based on the "),X4e=n(l6,"CODE",{});var ORt=s(X4e);S$r=r(ORt,"model_type"),ORt.forEach(t),R$r=r(l6,` property of the config object (either
passed as an argument or loaded from `),z4e=n(l6,"CODE",{});var VRt=s(z4e);P$r=r(VRt,"pretrained_model_name_or_path"),VRt.forEach(t),B$r=r(l6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q4e=n(l6,"CODE",{});var XRt=s(Q4e);I$r=r(XRt,"pretrained_model_name_or_path"),XRt.forEach(t),N$r=r(l6,":"),l6.forEach(t),q$r=i(Ql),de=n(Ql,"UL",{});var me=s(de);IC=n(me,"LI",{});var Uje=s(IC);W4e=n(Uje,"STRONG",{});var zRt=s(W4e);j$r=r(zRt,"albert"),zRt.forEach(t),D$r=r(Uje," \u2014 "),gK=n(Uje,"A",{href:!0});var QRt=s(gK);G$r=r(QRt,"TFAlbertForTokenClassification"),QRt.forEach(t),O$r=r(Uje," (ALBERT model)"),Uje.forEach(t),V$r=i(me),NC=n(me,"LI",{});var Jje=s(NC);H4e=n(Jje,"STRONG",{});var WRt=s(H4e);X$r=r(WRt,"bert"),WRt.forEach(t),z$r=r(Jje," \u2014 "),hK=n(Jje,"A",{href:!0});var HRt=s(hK);Q$r=r(HRt,"TFBertForTokenClassification"),HRt.forEach(t),W$r=r(Jje," (BERT model)"),Jje.forEach(t),H$r=i(me),qC=n(me,"LI",{});var Yje=s(qC);U4e=n(Yje,"STRONG",{});var URt=s(U4e);U$r=r(URt,"camembert"),URt.forEach(t),J$r=r(Yje," \u2014 "),pK=n(Yje,"A",{href:!0});var JRt=s(pK);Y$r=r(JRt,"TFCamembertForTokenClassification"),JRt.forEach(t),K$r=r(Yje," (CamemBERT model)"),Yje.forEach(t),Z$r=i(me),jC=n(me,"LI",{});var Kje=s(jC);J4e=n(Kje,"STRONG",{});var YRt=s(J4e);ekr=r(YRt,"convbert"),YRt.forEach(t),okr=r(Kje," \u2014 "),_K=n(Kje,"A",{href:!0});var KRt=s(_K);rkr=r(KRt,"TFConvBertForTokenClassification"),KRt.forEach(t),tkr=r(Kje," (ConvBERT model)"),Kje.forEach(t),akr=i(me),DC=n(me,"LI",{});var Zje=s(DC);Y4e=n(Zje,"STRONG",{});var ZRt=s(Y4e);nkr=r(ZRt,"deberta"),ZRt.forEach(t),skr=r(Zje," \u2014 "),uK=n(Zje,"A",{href:!0});var ePt=s(uK);lkr=r(ePt,"TFDebertaForTokenClassification"),ePt.forEach(t),ikr=r(Zje," (DeBERTa model)"),Zje.forEach(t),dkr=i(me),GC=n(me,"LI",{});var eDe=s(GC);K4e=n(eDe,"STRONG",{});var oPt=s(K4e);ckr=r(oPt,"deberta-v2"),oPt.forEach(t),fkr=r(eDe," \u2014 "),bK=n(eDe,"A",{href:!0});var rPt=s(bK);mkr=r(rPt,"TFDebertaV2ForTokenClassification"),rPt.forEach(t),gkr=r(eDe," (DeBERTa-v2 model)"),eDe.forEach(t),hkr=i(me),OC=n(me,"LI",{});var oDe=s(OC);Z4e=n(oDe,"STRONG",{});var tPt=s(Z4e);pkr=r(tPt,"distilbert"),tPt.forEach(t),_kr=r(oDe," \u2014 "),vK=n(oDe,"A",{href:!0});var aPt=s(vK);ukr=r(aPt,"TFDistilBertForTokenClassification"),aPt.forEach(t),bkr=r(oDe," (DistilBERT model)"),oDe.forEach(t),vkr=i(me),VC=n(me,"LI",{});var rDe=s(VC);eEe=n(rDe,"STRONG",{});var nPt=s(eEe);Fkr=r(nPt,"electra"),nPt.forEach(t),Tkr=r(rDe," \u2014 "),FK=n(rDe,"A",{href:!0});var sPt=s(FK);Mkr=r(sPt,"TFElectraForTokenClassification"),sPt.forEach(t),Ekr=r(rDe," (ELECTRA model)"),rDe.forEach(t),Ckr=i(me),XC=n(me,"LI",{});var tDe=s(XC);oEe=n(tDe,"STRONG",{});var lPt=s(oEe);wkr=r(lPt,"flaubert"),lPt.forEach(t),Akr=r(tDe," \u2014 "),TK=n(tDe,"A",{href:!0});var iPt=s(TK);Lkr=r(iPt,"TFFlaubertForTokenClassification"),iPt.forEach(t),ykr=r(tDe," (FlauBERT model)"),tDe.forEach(t),xkr=i(me),zC=n(me,"LI",{});var aDe=s(zC);rEe=n(aDe,"STRONG",{});var dPt=s(rEe);$kr=r(dPt,"funnel"),dPt.forEach(t),kkr=r(aDe," \u2014 "),MK=n(aDe,"A",{href:!0});var cPt=s(MK);Skr=r(cPt,"TFFunnelForTokenClassification"),cPt.forEach(t),Rkr=r(aDe," (Funnel Transformer model)"),aDe.forEach(t),Pkr=i(me),QC=n(me,"LI",{});var nDe=s(QC);tEe=n(nDe,"STRONG",{});var fPt=s(tEe);Bkr=r(fPt,"layoutlm"),fPt.forEach(t),Ikr=r(nDe," \u2014 "),EK=n(nDe,"A",{href:!0});var mPt=s(EK);Nkr=r(mPt,"TFLayoutLMForTokenClassification"),mPt.forEach(t),qkr=r(nDe," (LayoutLM model)"),nDe.forEach(t),jkr=i(me),WC=n(me,"LI",{});var sDe=s(WC);aEe=n(sDe,"STRONG",{});var gPt=s(aEe);Dkr=r(gPt,"longformer"),gPt.forEach(t),Gkr=r(sDe," \u2014 "),CK=n(sDe,"A",{href:!0});var hPt=s(CK);Okr=r(hPt,"TFLongformerForTokenClassification"),hPt.forEach(t),Vkr=r(sDe," (Longformer model)"),sDe.forEach(t),Xkr=i(me),HC=n(me,"LI",{});var lDe=s(HC);nEe=n(lDe,"STRONG",{});var pPt=s(nEe);zkr=r(pPt,"mobilebert"),pPt.forEach(t),Qkr=r(lDe," \u2014 "),wK=n(lDe,"A",{href:!0});var _Pt=s(wK);Wkr=r(_Pt,"TFMobileBertForTokenClassification"),_Pt.forEach(t),Hkr=r(lDe," (MobileBERT model)"),lDe.forEach(t),Ukr=i(me),UC=n(me,"LI",{});var iDe=s(UC);sEe=n(iDe,"STRONG",{});var uPt=s(sEe);Jkr=r(uPt,"mpnet"),uPt.forEach(t),Ykr=r(iDe," \u2014 "),AK=n(iDe,"A",{href:!0});var bPt=s(AK);Kkr=r(bPt,"TFMPNetForTokenClassification"),bPt.forEach(t),Zkr=r(iDe," (MPNet model)"),iDe.forEach(t),eSr=i(me),JC=n(me,"LI",{});var dDe=s(JC);lEe=n(dDe,"STRONG",{});var vPt=s(lEe);oSr=r(vPt,"rembert"),vPt.forEach(t),rSr=r(dDe," \u2014 "),LK=n(dDe,"A",{href:!0});var FPt=s(LK);tSr=r(FPt,"TFRemBertForTokenClassification"),FPt.forEach(t),aSr=r(dDe," (RemBERT model)"),dDe.forEach(t),nSr=i(me),YC=n(me,"LI",{});var cDe=s(YC);iEe=n(cDe,"STRONG",{});var TPt=s(iEe);sSr=r(TPt,"roberta"),TPt.forEach(t),lSr=r(cDe," \u2014 "),yK=n(cDe,"A",{href:!0});var MPt=s(yK);iSr=r(MPt,"TFRobertaForTokenClassification"),MPt.forEach(t),dSr=r(cDe," (RoBERTa model)"),cDe.forEach(t),cSr=i(me),KC=n(me,"LI",{});var fDe=s(KC);dEe=n(fDe,"STRONG",{});var EPt=s(dEe);fSr=r(EPt,"roformer"),EPt.forEach(t),mSr=r(fDe," \u2014 "),xK=n(fDe,"A",{href:!0});var CPt=s(xK);gSr=r(CPt,"TFRoFormerForTokenClassification"),CPt.forEach(t),hSr=r(fDe," (RoFormer model)"),fDe.forEach(t),pSr=i(me),ZC=n(me,"LI",{});var mDe=s(ZC);cEe=n(mDe,"STRONG",{});var wPt=s(cEe);_Sr=r(wPt,"xlm"),wPt.forEach(t),uSr=r(mDe," \u2014 "),$K=n(mDe,"A",{href:!0});var APt=s($K);bSr=r(APt,"TFXLMForTokenClassification"),APt.forEach(t),vSr=r(mDe," (XLM model)"),mDe.forEach(t),FSr=i(me),e3=n(me,"LI",{});var gDe=s(e3);fEe=n(gDe,"STRONG",{});var LPt=s(fEe);TSr=r(LPt,"xlm-roberta"),LPt.forEach(t),MSr=r(gDe," \u2014 "),kK=n(gDe,"A",{href:!0});var yPt=s(kK);ESr=r(yPt,"TFXLMRobertaForTokenClassification"),yPt.forEach(t),CSr=r(gDe," (XLM-RoBERTa model)"),gDe.forEach(t),wSr=i(me),o3=n(me,"LI",{});var hDe=s(o3);mEe=n(hDe,"STRONG",{});var xPt=s(mEe);ASr=r(xPt,"xlnet"),xPt.forEach(t),LSr=r(hDe," \u2014 "),SK=n(hDe,"A",{href:!0});var $Pt=s(SK);ySr=r($Pt,"TFXLNetForTokenClassification"),$Pt.forEach(t),xSr=r(hDe," (XLNet model)"),hDe.forEach(t),me.forEach(t),$Sr=i(Ql),T(r3.$$.fragment,Ql),Ql.forEach(t),zl.forEach(t),hXe=i(f),Bc=n(f,"H2",{class:!0});var EQe=s(Bc);t3=n(EQe,"A",{id:!0,class:!0,href:!0});var kPt=s(t3);gEe=n(kPt,"SPAN",{});var SPt=s(gEe);T($x.$$.fragment,SPt),SPt.forEach(t),kPt.forEach(t),kSr=i(EQe),hEe=n(EQe,"SPAN",{});var RPt=s(hEe);SSr=r(RPt,"TFAutoModelForQuestionAnswering"),RPt.forEach(t),EQe.forEach(t),pXe=i(f),fr=n(f,"DIV",{class:!0});var Wl=s(fr);T(kx.$$.fragment,Wl),RSr=i(Wl),Ic=n(Wl,"P",{});var mte=s(Ic);PSr=r(mte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),RK=n(mte,"A",{href:!0});var PPt=s(RK);BSr=r(PPt,"from_pretrained()"),PPt.forEach(t),ISr=r(mte," class method or the "),PK=n(mte,"A",{href:!0});var BPt=s(PK);NSr=r(BPt,"from_config()"),BPt.forEach(t),qSr=r(mte,` class
method.`),mte.forEach(t),jSr=i(Wl),Sx=n(Wl,"P",{});var CQe=s(Sx);DSr=r(CQe,"This class cannot be instantiated directly using "),pEe=n(CQe,"CODE",{});var IPt=s(pEe);GSr=r(IPt,"__init__()"),IPt.forEach(t),OSr=r(CQe," (throws an error)."),CQe.forEach(t),VSr=i(Wl),Gt=n(Wl,"DIV",{class:!0});var i6=s(Gt);T(Rx.$$.fragment,i6),XSr=i(i6),_Ee=n(i6,"P",{});var NPt=s(_Ee);zSr=r(NPt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),NPt.forEach(t),QSr=i(i6),Nc=n(i6,"P",{});var gte=s(Nc);WSr=r(gte,`Note:
Loading a model from its configuration file does `),uEe=n(gte,"STRONG",{});var qPt=s(uEe);HSr=r(qPt,"not"),qPt.forEach(t),USr=r(gte,` load the model weights. It only affects the
model\u2019s configuration. Use `),BK=n(gte,"A",{href:!0});var jPt=s(BK);JSr=r(jPt,"from_pretrained()"),jPt.forEach(t),YSr=r(gte," to load the model weights."),gte.forEach(t),KSr=i(i6),T(a3.$$.fragment,i6),i6.forEach(t),ZSr=i(Wl),jr=n(Wl,"DIV",{class:!0});var Hl=s(jr);T(Px.$$.fragment,Hl),eRr=i(Hl),bEe=n(Hl,"P",{});var DPt=s(bEe);oRr=r(DPt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),DPt.forEach(t),rRr=i(Hl),un=n(Hl,"P",{});var d6=s(un);tRr=r(d6,"The model class to instantiate is selected based on the "),vEe=n(d6,"CODE",{});var GPt=s(vEe);aRr=r(GPt,"model_type"),GPt.forEach(t),nRr=r(d6,` property of the config object (either
passed as an argument or loaded from `),FEe=n(d6,"CODE",{});var OPt=s(FEe);sRr=r(OPt,"pretrained_model_name_or_path"),OPt.forEach(t),lRr=r(d6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TEe=n(d6,"CODE",{});var VPt=s(TEe);iRr=r(VPt,"pretrained_model_name_or_path"),VPt.forEach(t),dRr=r(d6,":"),d6.forEach(t),cRr=i(Hl),ce=n(Hl,"UL",{});var ge=s(ce);n3=n(ge,"LI",{});var pDe=s(n3);MEe=n(pDe,"STRONG",{});var XPt=s(MEe);fRr=r(XPt,"albert"),XPt.forEach(t),mRr=r(pDe," \u2014 "),IK=n(pDe,"A",{href:!0});var zPt=s(IK);gRr=r(zPt,"TFAlbertForQuestionAnswering"),zPt.forEach(t),hRr=r(pDe," (ALBERT model)"),pDe.forEach(t),pRr=i(ge),s3=n(ge,"LI",{});var _De=s(s3);EEe=n(_De,"STRONG",{});var QPt=s(EEe);_Rr=r(QPt,"bert"),QPt.forEach(t),uRr=r(_De," \u2014 "),NK=n(_De,"A",{href:!0});var WPt=s(NK);bRr=r(WPt,"TFBertForQuestionAnswering"),WPt.forEach(t),vRr=r(_De," (BERT model)"),_De.forEach(t),FRr=i(ge),l3=n(ge,"LI",{});var uDe=s(l3);CEe=n(uDe,"STRONG",{});var HPt=s(CEe);TRr=r(HPt,"camembert"),HPt.forEach(t),MRr=r(uDe," \u2014 "),qK=n(uDe,"A",{href:!0});var UPt=s(qK);ERr=r(UPt,"TFCamembertForQuestionAnswering"),UPt.forEach(t),CRr=r(uDe," (CamemBERT model)"),uDe.forEach(t),wRr=i(ge),i3=n(ge,"LI",{});var bDe=s(i3);wEe=n(bDe,"STRONG",{});var JPt=s(wEe);ARr=r(JPt,"convbert"),JPt.forEach(t),LRr=r(bDe," \u2014 "),jK=n(bDe,"A",{href:!0});var YPt=s(jK);yRr=r(YPt,"TFConvBertForQuestionAnswering"),YPt.forEach(t),xRr=r(bDe," (ConvBERT model)"),bDe.forEach(t),$Rr=i(ge),d3=n(ge,"LI",{});var vDe=s(d3);AEe=n(vDe,"STRONG",{});var KPt=s(AEe);kRr=r(KPt,"deberta"),KPt.forEach(t),SRr=r(vDe," \u2014 "),DK=n(vDe,"A",{href:!0});var ZPt=s(DK);RRr=r(ZPt,"TFDebertaForQuestionAnswering"),ZPt.forEach(t),PRr=r(vDe," (DeBERTa model)"),vDe.forEach(t),BRr=i(ge),c3=n(ge,"LI",{});var FDe=s(c3);LEe=n(FDe,"STRONG",{});var eBt=s(LEe);IRr=r(eBt,"deberta-v2"),eBt.forEach(t),NRr=r(FDe," \u2014 "),GK=n(FDe,"A",{href:!0});var oBt=s(GK);qRr=r(oBt,"TFDebertaV2ForQuestionAnswering"),oBt.forEach(t),jRr=r(FDe," (DeBERTa-v2 model)"),FDe.forEach(t),DRr=i(ge),f3=n(ge,"LI",{});var TDe=s(f3);yEe=n(TDe,"STRONG",{});var rBt=s(yEe);GRr=r(rBt,"distilbert"),rBt.forEach(t),ORr=r(TDe," \u2014 "),OK=n(TDe,"A",{href:!0});var tBt=s(OK);VRr=r(tBt,"TFDistilBertForQuestionAnswering"),tBt.forEach(t),XRr=r(TDe," (DistilBERT model)"),TDe.forEach(t),zRr=i(ge),m3=n(ge,"LI",{});var MDe=s(m3);xEe=n(MDe,"STRONG",{});var aBt=s(xEe);QRr=r(aBt,"electra"),aBt.forEach(t),WRr=r(MDe," \u2014 "),VK=n(MDe,"A",{href:!0});var nBt=s(VK);HRr=r(nBt,"TFElectraForQuestionAnswering"),nBt.forEach(t),URr=r(MDe," (ELECTRA model)"),MDe.forEach(t),JRr=i(ge),g3=n(ge,"LI",{});var EDe=s(g3);$Ee=n(EDe,"STRONG",{});var sBt=s($Ee);YRr=r(sBt,"flaubert"),sBt.forEach(t),KRr=r(EDe," \u2014 "),XK=n(EDe,"A",{href:!0});var lBt=s(XK);ZRr=r(lBt,"TFFlaubertForQuestionAnsweringSimple"),lBt.forEach(t),ePr=r(EDe," (FlauBERT model)"),EDe.forEach(t),oPr=i(ge),h3=n(ge,"LI",{});var CDe=s(h3);kEe=n(CDe,"STRONG",{});var iBt=s(kEe);rPr=r(iBt,"funnel"),iBt.forEach(t),tPr=r(CDe," \u2014 "),zK=n(CDe,"A",{href:!0});var dBt=s(zK);aPr=r(dBt,"TFFunnelForQuestionAnswering"),dBt.forEach(t),nPr=r(CDe," (Funnel Transformer model)"),CDe.forEach(t),sPr=i(ge),p3=n(ge,"LI",{});var wDe=s(p3);SEe=n(wDe,"STRONG",{});var cBt=s(SEe);lPr=r(cBt,"gptj"),cBt.forEach(t),iPr=r(wDe," \u2014 "),QK=n(wDe,"A",{href:!0});var fBt=s(QK);dPr=r(fBt,"TFGPTJForQuestionAnswering"),fBt.forEach(t),cPr=r(wDe," (GPT-J model)"),wDe.forEach(t),fPr=i(ge),_3=n(ge,"LI",{});var ADe=s(_3);REe=n(ADe,"STRONG",{});var mBt=s(REe);mPr=r(mBt,"longformer"),mBt.forEach(t),gPr=r(ADe," \u2014 "),WK=n(ADe,"A",{href:!0});var gBt=s(WK);hPr=r(gBt,"TFLongformerForQuestionAnswering"),gBt.forEach(t),pPr=r(ADe," (Longformer model)"),ADe.forEach(t),_Pr=i(ge),u3=n(ge,"LI",{});var LDe=s(u3);PEe=n(LDe,"STRONG",{});var hBt=s(PEe);uPr=r(hBt,"mobilebert"),hBt.forEach(t),bPr=r(LDe," \u2014 "),HK=n(LDe,"A",{href:!0});var pBt=s(HK);vPr=r(pBt,"TFMobileBertForQuestionAnswering"),pBt.forEach(t),FPr=r(LDe," (MobileBERT model)"),LDe.forEach(t),TPr=i(ge),b3=n(ge,"LI",{});var yDe=s(b3);BEe=n(yDe,"STRONG",{});var _Bt=s(BEe);MPr=r(_Bt,"mpnet"),_Bt.forEach(t),EPr=r(yDe," \u2014 "),UK=n(yDe,"A",{href:!0});var uBt=s(UK);CPr=r(uBt,"TFMPNetForQuestionAnswering"),uBt.forEach(t),wPr=r(yDe," (MPNet model)"),yDe.forEach(t),APr=i(ge),v3=n(ge,"LI",{});var xDe=s(v3);IEe=n(xDe,"STRONG",{});var bBt=s(IEe);LPr=r(bBt,"rembert"),bBt.forEach(t),yPr=r(xDe," \u2014 "),JK=n(xDe,"A",{href:!0});var vBt=s(JK);xPr=r(vBt,"TFRemBertForQuestionAnswering"),vBt.forEach(t),$Pr=r(xDe," (RemBERT model)"),xDe.forEach(t),kPr=i(ge),F3=n(ge,"LI",{});var $De=s(F3);NEe=n($De,"STRONG",{});var FBt=s(NEe);SPr=r(FBt,"roberta"),FBt.forEach(t),RPr=r($De," \u2014 "),YK=n($De,"A",{href:!0});var TBt=s(YK);PPr=r(TBt,"TFRobertaForQuestionAnswering"),TBt.forEach(t),BPr=r($De," (RoBERTa model)"),$De.forEach(t),IPr=i(ge),T3=n(ge,"LI",{});var kDe=s(T3);qEe=n(kDe,"STRONG",{});var MBt=s(qEe);NPr=r(MBt,"roformer"),MBt.forEach(t),qPr=r(kDe," \u2014 "),KK=n(kDe,"A",{href:!0});var EBt=s(KK);jPr=r(EBt,"TFRoFormerForQuestionAnswering"),EBt.forEach(t),DPr=r(kDe," (RoFormer model)"),kDe.forEach(t),GPr=i(ge),M3=n(ge,"LI",{});var SDe=s(M3);jEe=n(SDe,"STRONG",{});var CBt=s(jEe);OPr=r(CBt,"xlm"),CBt.forEach(t),VPr=r(SDe," \u2014 "),ZK=n(SDe,"A",{href:!0});var wBt=s(ZK);XPr=r(wBt,"TFXLMForQuestionAnsweringSimple"),wBt.forEach(t),zPr=r(SDe," (XLM model)"),SDe.forEach(t),QPr=i(ge),E3=n(ge,"LI",{});var RDe=s(E3);DEe=n(RDe,"STRONG",{});var ABt=s(DEe);WPr=r(ABt,"xlm-roberta"),ABt.forEach(t),HPr=r(RDe," \u2014 "),eZ=n(RDe,"A",{href:!0});var LBt=s(eZ);UPr=r(LBt,"TFXLMRobertaForQuestionAnswering"),LBt.forEach(t),JPr=r(RDe," (XLM-RoBERTa model)"),RDe.forEach(t),YPr=i(ge),C3=n(ge,"LI",{});var PDe=s(C3);GEe=n(PDe,"STRONG",{});var yBt=s(GEe);KPr=r(yBt,"xlnet"),yBt.forEach(t),ZPr=r(PDe," \u2014 "),oZ=n(PDe,"A",{href:!0});var xBt=s(oZ);eBr=r(xBt,"TFXLNetForQuestionAnsweringSimple"),xBt.forEach(t),oBr=r(PDe," (XLNet model)"),PDe.forEach(t),ge.forEach(t),rBr=i(Hl),T(w3.$$.fragment,Hl),Hl.forEach(t),Wl.forEach(t),_Xe=i(f),qc=n(f,"H2",{class:!0});var wQe=s(qc);A3=n(wQe,"A",{id:!0,class:!0,href:!0});var $Bt=s(A3);OEe=n($Bt,"SPAN",{});var kBt=s(OEe);T(Bx.$$.fragment,kBt),kBt.forEach(t),$Bt.forEach(t),tBr=i(wQe),VEe=n(wQe,"SPAN",{});var SBt=s(VEe);aBr=r(SBt,"TFAutoModelForVision2Seq"),SBt.forEach(t),wQe.forEach(t),uXe=i(f),mr=n(f,"DIV",{class:!0});var Ul=s(mr);T(Ix.$$.fragment,Ul),nBr=i(Ul),jc=n(Ul,"P",{});var hte=s(jc);sBr=r(hte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),rZ=n(hte,"A",{href:!0});var RBt=s(rZ);lBr=r(RBt,"from_pretrained()"),RBt.forEach(t),iBr=r(hte," class method or the "),tZ=n(hte,"A",{href:!0});var PBt=s(tZ);dBr=r(PBt,"from_config()"),PBt.forEach(t),cBr=r(hte,` class
method.`),hte.forEach(t),fBr=i(Ul),Nx=n(Ul,"P",{});var AQe=s(Nx);mBr=r(AQe,"This class cannot be instantiated directly using "),XEe=n(AQe,"CODE",{});var BBt=s(XEe);gBr=r(BBt,"__init__()"),BBt.forEach(t),hBr=r(AQe," (throws an error)."),AQe.forEach(t),pBr=i(Ul),Ot=n(Ul,"DIV",{class:!0});var c6=s(Ot);T(qx.$$.fragment,c6),_Br=i(c6),zEe=n(c6,"P",{});var IBt=s(zEe);uBr=r(IBt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),IBt.forEach(t),bBr=i(c6),Dc=n(c6,"P",{});var pte=s(Dc);vBr=r(pte,`Note:
Loading a model from its configuration file does `),QEe=n(pte,"STRONG",{});var NBt=s(QEe);FBr=r(NBt,"not"),NBt.forEach(t),TBr=r(pte,` load the model weights. It only affects the
model\u2019s configuration. Use `),aZ=n(pte,"A",{href:!0});var qBt=s(aZ);MBr=r(qBt,"from_pretrained()"),qBt.forEach(t),EBr=r(pte," to load the model weights."),pte.forEach(t),CBr=i(c6),T(L3.$$.fragment,c6),c6.forEach(t),wBr=i(Ul),Dr=n(Ul,"DIV",{class:!0});var Jl=s(Dr);T(jx.$$.fragment,Jl),ABr=i(Jl),WEe=n(Jl,"P",{});var jBt=s(WEe);LBr=r(jBt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),jBt.forEach(t),yBr=i(Jl),bn=n(Jl,"P",{});var f6=s(bn);xBr=r(f6,"The model class to instantiate is selected based on the "),HEe=n(f6,"CODE",{});var DBt=s(HEe);$Br=r(DBt,"model_type"),DBt.forEach(t),kBr=r(f6,` property of the config object (either
passed as an argument or loaded from `),UEe=n(f6,"CODE",{});var GBt=s(UEe);SBr=r(GBt,"pretrained_model_name_or_path"),GBt.forEach(t),RBr=r(f6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JEe=n(f6,"CODE",{});var OBt=s(JEe);PBr=r(OBt,"pretrained_model_name_or_path"),OBt.forEach(t),BBr=r(f6,":"),f6.forEach(t),IBr=i(Jl),YEe=n(Jl,"UL",{});var VBt=s(YEe);y3=n(VBt,"LI",{});var BDe=s(y3);KEe=n(BDe,"STRONG",{});var XBt=s(KEe);NBr=r(XBt,"vision-encoder-decoder"),XBt.forEach(t),qBr=r(BDe," \u2014 "),nZ=n(BDe,"A",{href:!0});var zBt=s(nZ);jBr=r(zBt,"TFVisionEncoderDecoderModel"),zBt.forEach(t),DBr=r(BDe," (Vision Encoder decoder model)"),BDe.forEach(t),VBt.forEach(t),GBr=i(Jl),T(x3.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),bXe=i(f),Gc=n(f,"H2",{class:!0});var LQe=s(Gc);$3=n(LQe,"A",{id:!0,class:!0,href:!0});var QBt=s($3);ZEe=n(QBt,"SPAN",{});var WBt=s(ZEe);T(Dx.$$.fragment,WBt),WBt.forEach(t),QBt.forEach(t),OBr=i(LQe),eCe=n(LQe,"SPAN",{});var HBt=s(eCe);VBr=r(HBt,"TFAutoModelForSpeechSeq2Seq"),HBt.forEach(t),LQe.forEach(t),vXe=i(f),gr=n(f,"DIV",{class:!0});var Yl=s(gr);T(Gx.$$.fragment,Yl),XBr=i(Yl),Oc=n(Yl,"P",{});var _te=s(Oc);zBr=r(_te,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),sZ=n(_te,"A",{href:!0});var UBt=s(sZ);QBr=r(UBt,"from_pretrained()"),UBt.forEach(t),WBr=r(_te," class method or the "),lZ=n(_te,"A",{href:!0});var JBt=s(lZ);HBr=r(JBt,"from_config()"),JBt.forEach(t),UBr=r(_te,` class
method.`),_te.forEach(t),JBr=i(Yl),Ox=n(Yl,"P",{});var yQe=s(Ox);YBr=r(yQe,"This class cannot be instantiated directly using "),oCe=n(yQe,"CODE",{});var YBt=s(oCe);KBr=r(YBt,"__init__()"),YBt.forEach(t),ZBr=r(yQe," (throws an error)."),yQe.forEach(t),eIr=i(Yl),Vt=n(Yl,"DIV",{class:!0});var m6=s(Vt);T(Vx.$$.fragment,m6),oIr=i(m6),rCe=n(m6,"P",{});var KBt=s(rCe);rIr=r(KBt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),KBt.forEach(t),tIr=i(m6),Vc=n(m6,"P",{});var ute=s(Vc);aIr=r(ute,`Note:
Loading a model from its configuration file does `),tCe=n(ute,"STRONG",{});var ZBt=s(tCe);nIr=r(ZBt,"not"),ZBt.forEach(t),sIr=r(ute,` load the model weights. It only affects the
model\u2019s configuration. Use `),iZ=n(ute,"A",{href:!0});var eIt=s(iZ);lIr=r(eIt,"from_pretrained()"),eIt.forEach(t),iIr=r(ute," to load the model weights."),ute.forEach(t),dIr=i(m6),T(k3.$$.fragment,m6),m6.forEach(t),cIr=i(Yl),Gr=n(Yl,"DIV",{class:!0});var Kl=s(Gr);T(Xx.$$.fragment,Kl),fIr=i(Kl),aCe=n(Kl,"P",{});var oIt=s(aCe);mIr=r(oIt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),oIt.forEach(t),gIr=i(Kl),vn=n(Kl,"P",{});var g6=s(vn);hIr=r(g6,"The model class to instantiate is selected based on the "),nCe=n(g6,"CODE",{});var rIt=s(nCe);pIr=r(rIt,"model_type"),rIt.forEach(t),_Ir=r(g6,` property of the config object (either
passed as an argument or loaded from `),sCe=n(g6,"CODE",{});var tIt=s(sCe);uIr=r(tIt,"pretrained_model_name_or_path"),tIt.forEach(t),bIr=r(g6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lCe=n(g6,"CODE",{});var aIt=s(lCe);vIr=r(aIt,"pretrained_model_name_or_path"),aIt.forEach(t),FIr=r(g6,":"),g6.forEach(t),TIr=i(Kl),iCe=n(Kl,"UL",{});var nIt=s(iCe);S3=n(nIt,"LI",{});var IDe=s(S3);dCe=n(IDe,"STRONG",{});var sIt=s(dCe);MIr=r(sIt,"speech_to_text"),sIt.forEach(t),EIr=r(IDe," \u2014 "),dZ=n(IDe,"A",{href:!0});var lIt=s(dZ);CIr=r(lIt,"TFSpeech2TextForConditionalGeneration"),lIt.forEach(t),wIr=r(IDe," (Speech2Text model)"),IDe.forEach(t),nIt.forEach(t),AIr=i(Kl),T(R3.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),FXe=i(f),Xc=n(f,"H2",{class:!0});var xQe=s(Xc);P3=n(xQe,"A",{id:!0,class:!0,href:!0});var iIt=s(P3);cCe=n(iIt,"SPAN",{});var dIt=s(cCe);T(zx.$$.fragment,dIt),dIt.forEach(t),iIt.forEach(t),LIr=i(xQe),fCe=n(xQe,"SPAN",{});var cIt=s(fCe);yIr=r(cIt,"FlaxAutoModel"),cIt.forEach(t),xQe.forEach(t),TXe=i(f),hr=n(f,"DIV",{class:!0});var Zl=s(hr);T(Qx.$$.fragment,Zl),xIr=i(Zl),zc=n(Zl,"P",{});var bte=s(zc);$Ir=r(bte,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),cZ=n(bte,"A",{href:!0});var fIt=s(cZ);kIr=r(fIt,"from_pretrained()"),fIt.forEach(t),SIr=r(bte," class method or the "),fZ=n(bte,"A",{href:!0});var mIt=s(fZ);RIr=r(mIt,"from_config()"),mIt.forEach(t),PIr=r(bte,` class
method.`),bte.forEach(t),BIr=i(Zl),Wx=n(Zl,"P",{});var $Qe=s(Wx);IIr=r($Qe,"This class cannot be instantiated directly using "),mCe=n($Qe,"CODE",{});var gIt=s(mCe);NIr=r(gIt,"__init__()"),gIt.forEach(t),qIr=r($Qe," (throws an error)."),$Qe.forEach(t),jIr=i(Zl),Xt=n(Zl,"DIV",{class:!0});var h6=s(Xt);T(Hx.$$.fragment,h6),DIr=i(h6),gCe=n(h6,"P",{});var hIt=s(gCe);GIr=r(hIt,"Instantiates one of the base model classes of the library from a configuration."),hIt.forEach(t),OIr=i(h6),Qc=n(h6,"P",{});var vte=s(Qc);VIr=r(vte,`Note:
Loading a model from its configuration file does `),hCe=n(vte,"STRONG",{});var pIt=s(hCe);XIr=r(pIt,"not"),pIt.forEach(t),zIr=r(vte,` load the model weights. It only affects the
model\u2019s configuration. Use `),mZ=n(vte,"A",{href:!0});var _It=s(mZ);QIr=r(_It,"from_pretrained()"),_It.forEach(t),WIr=r(vte," to load the model weights."),vte.forEach(t),HIr=i(h6),T(B3.$$.fragment,h6),h6.forEach(t),UIr=i(Zl),Or=n(Zl,"DIV",{class:!0});var ei=s(Or);T(Ux.$$.fragment,ei),JIr=i(ei),pCe=n(ei,"P",{});var uIt=s(pCe);YIr=r(uIt,"Instantiate one of the base model classes of the library from a pretrained model."),uIt.forEach(t),KIr=i(ei),Fn=n(ei,"P",{});var p6=s(Fn);ZIr=r(p6,"The model class to instantiate is selected based on the "),_Ce=n(p6,"CODE",{});var bIt=s(_Ce);eNr=r(bIt,"model_type"),bIt.forEach(t),oNr=r(p6,` property of the config object (either
passed as an argument or loaded from `),uCe=n(p6,"CODE",{});var vIt=s(uCe);rNr=r(vIt,"pretrained_model_name_or_path"),vIt.forEach(t),tNr=r(p6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bCe=n(p6,"CODE",{});var FIt=s(bCe);aNr=r(FIt,"pretrained_model_name_or_path"),FIt.forEach(t),nNr=r(p6,":"),p6.forEach(t),sNr=i(ei),oe=n(ei,"UL",{});var ae=s(oe);I3=n(ae,"LI",{});var NDe=s(I3);vCe=n(NDe,"STRONG",{});var TIt=s(vCe);lNr=r(TIt,"albert"),TIt.forEach(t),iNr=r(NDe," \u2014 "),gZ=n(NDe,"A",{href:!0});var MIt=s(gZ);dNr=r(MIt,"FlaxAlbertModel"),MIt.forEach(t),cNr=r(NDe," (ALBERT model)"),NDe.forEach(t),fNr=i(ae),N3=n(ae,"LI",{});var qDe=s(N3);FCe=n(qDe,"STRONG",{});var EIt=s(FCe);mNr=r(EIt,"bart"),EIt.forEach(t),gNr=r(qDe," \u2014 "),hZ=n(qDe,"A",{href:!0});var CIt=s(hZ);hNr=r(CIt,"FlaxBartModel"),CIt.forEach(t),pNr=r(qDe," (BART model)"),qDe.forEach(t),_Nr=i(ae),q3=n(ae,"LI",{});var jDe=s(q3);TCe=n(jDe,"STRONG",{});var wIt=s(TCe);uNr=r(wIt,"beit"),wIt.forEach(t),bNr=r(jDe," \u2014 "),pZ=n(jDe,"A",{href:!0});var AIt=s(pZ);vNr=r(AIt,"FlaxBeitModel"),AIt.forEach(t),FNr=r(jDe," (BEiT model)"),jDe.forEach(t),TNr=i(ae),j3=n(ae,"LI",{});var DDe=s(j3);MCe=n(DDe,"STRONG",{});var LIt=s(MCe);MNr=r(LIt,"bert"),LIt.forEach(t),ENr=r(DDe," \u2014 "),_Z=n(DDe,"A",{href:!0});var yIt=s(_Z);CNr=r(yIt,"FlaxBertModel"),yIt.forEach(t),wNr=r(DDe," (BERT model)"),DDe.forEach(t),ANr=i(ae),D3=n(ae,"LI",{});var GDe=s(D3);ECe=n(GDe,"STRONG",{});var xIt=s(ECe);LNr=r(xIt,"big_bird"),xIt.forEach(t),yNr=r(GDe," \u2014 "),uZ=n(GDe,"A",{href:!0});var $It=s(uZ);xNr=r($It,"FlaxBigBirdModel"),$It.forEach(t),$Nr=r(GDe," (BigBird model)"),GDe.forEach(t),kNr=i(ae),G3=n(ae,"LI",{});var ODe=s(G3);CCe=n(ODe,"STRONG",{});var kIt=s(CCe);SNr=r(kIt,"blenderbot"),kIt.forEach(t),RNr=r(ODe," \u2014 "),bZ=n(ODe,"A",{href:!0});var SIt=s(bZ);PNr=r(SIt,"FlaxBlenderbotModel"),SIt.forEach(t),BNr=r(ODe," (Blenderbot model)"),ODe.forEach(t),INr=i(ae),O3=n(ae,"LI",{});var VDe=s(O3);wCe=n(VDe,"STRONG",{});var RIt=s(wCe);NNr=r(RIt,"blenderbot-small"),RIt.forEach(t),qNr=r(VDe," \u2014 "),vZ=n(VDe,"A",{href:!0});var PIt=s(vZ);jNr=r(PIt,"FlaxBlenderbotSmallModel"),PIt.forEach(t),DNr=r(VDe," (BlenderbotSmall model)"),VDe.forEach(t),GNr=i(ae),V3=n(ae,"LI",{});var XDe=s(V3);ACe=n(XDe,"STRONG",{});var BIt=s(ACe);ONr=r(BIt,"clip"),BIt.forEach(t),VNr=r(XDe," \u2014 "),FZ=n(XDe,"A",{href:!0});var IIt=s(FZ);XNr=r(IIt,"FlaxCLIPModel"),IIt.forEach(t),zNr=r(XDe," (CLIP model)"),XDe.forEach(t),QNr=i(ae),X3=n(ae,"LI",{});var zDe=s(X3);LCe=n(zDe,"STRONG",{});var NIt=s(LCe);WNr=r(NIt,"distilbert"),NIt.forEach(t),HNr=r(zDe," \u2014 "),TZ=n(zDe,"A",{href:!0});var qIt=s(TZ);UNr=r(qIt,"FlaxDistilBertModel"),qIt.forEach(t),JNr=r(zDe," (DistilBERT model)"),zDe.forEach(t),YNr=i(ae),z3=n(ae,"LI",{});var QDe=s(z3);yCe=n(QDe,"STRONG",{});var jIt=s(yCe);KNr=r(jIt,"electra"),jIt.forEach(t),ZNr=r(QDe," \u2014 "),MZ=n(QDe,"A",{href:!0});var DIt=s(MZ);eqr=r(DIt,"FlaxElectraModel"),DIt.forEach(t),oqr=r(QDe," (ELECTRA model)"),QDe.forEach(t),rqr=i(ae),Q3=n(ae,"LI",{});var WDe=s(Q3);xCe=n(WDe,"STRONG",{});var GIt=s(xCe);tqr=r(GIt,"gpt2"),GIt.forEach(t),aqr=r(WDe," \u2014 "),EZ=n(WDe,"A",{href:!0});var OIt=s(EZ);nqr=r(OIt,"FlaxGPT2Model"),OIt.forEach(t),sqr=r(WDe," (OpenAI GPT-2 model)"),WDe.forEach(t),lqr=i(ae),W3=n(ae,"LI",{});var HDe=s(W3);$Ce=n(HDe,"STRONG",{});var VIt=s($Ce);iqr=r(VIt,"gpt_neo"),VIt.forEach(t),dqr=r(HDe," \u2014 "),CZ=n(HDe,"A",{href:!0});var XIt=s(CZ);cqr=r(XIt,"FlaxGPTNeoModel"),XIt.forEach(t),fqr=r(HDe," (GPT Neo model)"),HDe.forEach(t),mqr=i(ae),H3=n(ae,"LI",{});var UDe=s(H3);kCe=n(UDe,"STRONG",{});var zIt=s(kCe);gqr=r(zIt,"gptj"),zIt.forEach(t),hqr=r(UDe," \u2014 "),wZ=n(UDe,"A",{href:!0});var QIt=s(wZ);pqr=r(QIt,"FlaxGPTJModel"),QIt.forEach(t),_qr=r(UDe," (GPT-J model)"),UDe.forEach(t),uqr=i(ae),U3=n(ae,"LI",{});var JDe=s(U3);SCe=n(JDe,"STRONG",{});var WIt=s(SCe);bqr=r(WIt,"longt5"),WIt.forEach(t),vqr=r(JDe," \u2014 "),AZ=n(JDe,"A",{href:!0});var HIt=s(AZ);Fqr=r(HIt,"FlaxLongT5Model"),HIt.forEach(t),Tqr=r(JDe," (LongT5 model)"),JDe.forEach(t),Mqr=i(ae),J3=n(ae,"LI",{});var YDe=s(J3);RCe=n(YDe,"STRONG",{});var UIt=s(RCe);Eqr=r(UIt,"marian"),UIt.forEach(t),Cqr=r(YDe," \u2014 "),LZ=n(YDe,"A",{href:!0});var JIt=s(LZ);wqr=r(JIt,"FlaxMarianModel"),JIt.forEach(t),Aqr=r(YDe," (Marian model)"),YDe.forEach(t),Lqr=i(ae),Y3=n(ae,"LI",{});var KDe=s(Y3);PCe=n(KDe,"STRONG",{});var YIt=s(PCe);yqr=r(YIt,"mbart"),YIt.forEach(t),xqr=r(KDe," \u2014 "),yZ=n(KDe,"A",{href:!0});var KIt=s(yZ);$qr=r(KIt,"FlaxMBartModel"),KIt.forEach(t),kqr=r(KDe," (mBART model)"),KDe.forEach(t),Sqr=i(ae),K3=n(ae,"LI",{});var ZDe=s(K3);BCe=n(ZDe,"STRONG",{});var ZIt=s(BCe);Rqr=r(ZIt,"mt5"),ZIt.forEach(t),Pqr=r(ZDe," \u2014 "),xZ=n(ZDe,"A",{href:!0});var eNt=s(xZ);Bqr=r(eNt,"FlaxMT5Model"),eNt.forEach(t),Iqr=r(ZDe," (MT5 model)"),ZDe.forEach(t),Nqr=i(ae),Z3=n(ae,"LI",{});var eGe=s(Z3);ICe=n(eGe,"STRONG",{});var oNt=s(ICe);qqr=r(oNt,"opt"),oNt.forEach(t),jqr=r(eGe," \u2014 "),$Z=n(eGe,"A",{href:!0});var rNt=s($Z);Dqr=r(rNt,"FlaxOPTModel"),rNt.forEach(t),Gqr=r(eGe," (OPT model)"),eGe.forEach(t),Oqr=i(ae),e5=n(ae,"LI",{});var oGe=s(e5);NCe=n(oGe,"STRONG",{});var tNt=s(NCe);Vqr=r(tNt,"pegasus"),tNt.forEach(t),Xqr=r(oGe," \u2014 "),kZ=n(oGe,"A",{href:!0});var aNt=s(kZ);zqr=r(aNt,"FlaxPegasusModel"),aNt.forEach(t),Qqr=r(oGe," (Pegasus model)"),oGe.forEach(t),Wqr=i(ae),o5=n(ae,"LI",{});var rGe=s(o5);qCe=n(rGe,"STRONG",{});var nNt=s(qCe);Hqr=r(nNt,"roberta"),nNt.forEach(t),Uqr=r(rGe," \u2014 "),SZ=n(rGe,"A",{href:!0});var sNt=s(SZ);Jqr=r(sNt,"FlaxRobertaModel"),sNt.forEach(t),Yqr=r(rGe," (RoBERTa model)"),rGe.forEach(t),Kqr=i(ae),r5=n(ae,"LI",{});var tGe=s(r5);jCe=n(tGe,"STRONG",{});var lNt=s(jCe);Zqr=r(lNt,"roformer"),lNt.forEach(t),ejr=r(tGe," \u2014 "),RZ=n(tGe,"A",{href:!0});var iNt=s(RZ);ojr=r(iNt,"FlaxRoFormerModel"),iNt.forEach(t),rjr=r(tGe," (RoFormer model)"),tGe.forEach(t),tjr=i(ae),t5=n(ae,"LI",{});var aGe=s(t5);DCe=n(aGe,"STRONG",{});var dNt=s(DCe);ajr=r(dNt,"t5"),dNt.forEach(t),njr=r(aGe," \u2014 "),PZ=n(aGe,"A",{href:!0});var cNt=s(PZ);sjr=r(cNt,"FlaxT5Model"),cNt.forEach(t),ljr=r(aGe," (T5 model)"),aGe.forEach(t),ijr=i(ae),a5=n(ae,"LI",{});var nGe=s(a5);GCe=n(nGe,"STRONG",{});var fNt=s(GCe);djr=r(fNt,"vision-text-dual-encoder"),fNt.forEach(t),cjr=r(nGe," \u2014 "),BZ=n(nGe,"A",{href:!0});var mNt=s(BZ);fjr=r(mNt,"FlaxVisionTextDualEncoderModel"),mNt.forEach(t),mjr=r(nGe," (VisionTextDualEncoder model)"),nGe.forEach(t),gjr=i(ae),n5=n(ae,"LI",{});var sGe=s(n5);OCe=n(sGe,"STRONG",{});var gNt=s(OCe);hjr=r(gNt,"vit"),gNt.forEach(t),pjr=r(sGe," \u2014 "),IZ=n(sGe,"A",{href:!0});var hNt=s(IZ);_jr=r(hNt,"FlaxViTModel"),hNt.forEach(t),ujr=r(sGe," (ViT model)"),sGe.forEach(t),bjr=i(ae),s5=n(ae,"LI",{});var lGe=s(s5);VCe=n(lGe,"STRONG",{});var pNt=s(VCe);vjr=r(pNt,"wav2vec2"),pNt.forEach(t),Fjr=r(lGe," \u2014 "),NZ=n(lGe,"A",{href:!0});var _Nt=s(NZ);Tjr=r(_Nt,"FlaxWav2Vec2Model"),_Nt.forEach(t),Mjr=r(lGe," (Wav2Vec2 model)"),lGe.forEach(t),Ejr=i(ae),l5=n(ae,"LI",{});var iGe=s(l5);XCe=n(iGe,"STRONG",{});var uNt=s(XCe);Cjr=r(uNt,"xglm"),uNt.forEach(t),wjr=r(iGe," \u2014 "),qZ=n(iGe,"A",{href:!0});var bNt=s(qZ);Ajr=r(bNt,"FlaxXGLMModel"),bNt.forEach(t),Ljr=r(iGe," (XGLM model)"),iGe.forEach(t),yjr=i(ae),i5=n(ae,"LI",{});var dGe=s(i5);zCe=n(dGe,"STRONG",{});var vNt=s(zCe);xjr=r(vNt,"xlm-roberta"),vNt.forEach(t),$jr=r(dGe," \u2014 "),jZ=n(dGe,"A",{href:!0});var FNt=s(jZ);kjr=r(FNt,"FlaxXLMRobertaModel"),FNt.forEach(t),Sjr=r(dGe," (XLM-RoBERTa model)"),dGe.forEach(t),ae.forEach(t),Rjr=i(ei),T(d5.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),MXe=i(f),Wc=n(f,"H2",{class:!0});var kQe=s(Wc);c5=n(kQe,"A",{id:!0,class:!0,href:!0});var TNt=s(c5);QCe=n(TNt,"SPAN",{});var MNt=s(QCe);T(Jx.$$.fragment,MNt),MNt.forEach(t),TNt.forEach(t),Pjr=i(kQe),WCe=n(kQe,"SPAN",{});var ENt=s(WCe);Bjr=r(ENt,"FlaxAutoModelForCausalLM"),ENt.forEach(t),kQe.forEach(t),EXe=i(f),pr=n(f,"DIV",{class:!0});var oi=s(pr);T(Yx.$$.fragment,oi),Ijr=i(oi),Hc=n(oi,"P",{});var Fte=s(Hc);Njr=r(Fte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),DZ=n(Fte,"A",{href:!0});var CNt=s(DZ);qjr=r(CNt,"from_pretrained()"),CNt.forEach(t),jjr=r(Fte," class method or the "),GZ=n(Fte,"A",{href:!0});var wNt=s(GZ);Djr=r(wNt,"from_config()"),wNt.forEach(t),Gjr=r(Fte,` class
method.`),Fte.forEach(t),Ojr=i(oi),Kx=n(oi,"P",{});var SQe=s(Kx);Vjr=r(SQe,"This class cannot be instantiated directly using "),HCe=n(SQe,"CODE",{});var ANt=s(HCe);Xjr=r(ANt,"__init__()"),ANt.forEach(t),zjr=r(SQe," (throws an error)."),SQe.forEach(t),Qjr=i(oi),zt=n(oi,"DIV",{class:!0});var _6=s(zt);T(Zx.$$.fragment,_6),Wjr=i(_6),UCe=n(_6,"P",{});var LNt=s(UCe);Hjr=r(LNt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),LNt.forEach(t),Ujr=i(_6),Uc=n(_6,"P",{});var Tte=s(Uc);Jjr=r(Tte,`Note:
Loading a model from its configuration file does `),JCe=n(Tte,"STRONG",{});var yNt=s(JCe);Yjr=r(yNt,"not"),yNt.forEach(t),Kjr=r(Tte,` load the model weights. It only affects the
model\u2019s configuration. Use `),OZ=n(Tte,"A",{href:!0});var xNt=s(OZ);Zjr=r(xNt,"from_pretrained()"),xNt.forEach(t),eDr=r(Tte," to load the model weights."),Tte.forEach(t),oDr=i(_6),T(f5.$$.fragment,_6),_6.forEach(t),rDr=i(oi),Vr=n(oi,"DIV",{class:!0});var ri=s(Vr);T(e$.$$.fragment,ri),tDr=i(ri),YCe=n(ri,"P",{});var $Nt=s(YCe);aDr=r($Nt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),$Nt.forEach(t),nDr=i(ri),Tn=n(ri,"P",{});var u6=s(Tn);sDr=r(u6,"The model class to instantiate is selected based on the "),KCe=n(u6,"CODE",{});var kNt=s(KCe);lDr=r(kNt,"model_type"),kNt.forEach(t),iDr=r(u6,` property of the config object (either
passed as an argument or loaded from `),ZCe=n(u6,"CODE",{});var SNt=s(ZCe);dDr=r(SNt,"pretrained_model_name_or_path"),SNt.forEach(t),cDr=r(u6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e3e=n(u6,"CODE",{});var RNt=s(e3e);fDr=r(RNt,"pretrained_model_name_or_path"),RNt.forEach(t),mDr=r(u6,":"),u6.forEach(t),gDr=i(ri),xe=n(ri,"UL",{});var Ne=s(xe);m5=n(Ne,"LI",{});var cGe=s(m5);o3e=n(cGe,"STRONG",{});var PNt=s(o3e);hDr=r(PNt,"bart"),PNt.forEach(t),pDr=r(cGe," \u2014 "),VZ=n(cGe,"A",{href:!0});var BNt=s(VZ);_Dr=r(BNt,"FlaxBartForCausalLM"),BNt.forEach(t),uDr=r(cGe," (BART model)"),cGe.forEach(t),bDr=i(Ne),g5=n(Ne,"LI",{});var fGe=s(g5);r3e=n(fGe,"STRONG",{});var INt=s(r3e);vDr=r(INt,"bert"),INt.forEach(t),FDr=r(fGe," \u2014 "),XZ=n(fGe,"A",{href:!0});var NNt=s(XZ);TDr=r(NNt,"FlaxBertForCausalLM"),NNt.forEach(t),MDr=r(fGe," (BERT model)"),fGe.forEach(t),EDr=i(Ne),h5=n(Ne,"LI",{});var mGe=s(h5);t3e=n(mGe,"STRONG",{});var qNt=s(t3e);CDr=r(qNt,"big_bird"),qNt.forEach(t),wDr=r(mGe," \u2014 "),zZ=n(mGe,"A",{href:!0});var jNt=s(zZ);ADr=r(jNt,"FlaxBigBirdForCausalLM"),jNt.forEach(t),LDr=r(mGe," (BigBird model)"),mGe.forEach(t),yDr=i(Ne),p5=n(Ne,"LI",{});var gGe=s(p5);a3e=n(gGe,"STRONG",{});var DNt=s(a3e);xDr=r(DNt,"electra"),DNt.forEach(t),$Dr=r(gGe," \u2014 "),QZ=n(gGe,"A",{href:!0});var GNt=s(QZ);kDr=r(GNt,"FlaxElectraForCausalLM"),GNt.forEach(t),SDr=r(gGe," (ELECTRA model)"),gGe.forEach(t),RDr=i(Ne),_5=n(Ne,"LI",{});var hGe=s(_5);n3e=n(hGe,"STRONG",{});var ONt=s(n3e);PDr=r(ONt,"gpt2"),ONt.forEach(t),BDr=r(hGe," \u2014 "),WZ=n(hGe,"A",{href:!0});var VNt=s(WZ);IDr=r(VNt,"FlaxGPT2LMHeadModel"),VNt.forEach(t),NDr=r(hGe," (OpenAI GPT-2 model)"),hGe.forEach(t),qDr=i(Ne),u5=n(Ne,"LI",{});var pGe=s(u5);s3e=n(pGe,"STRONG",{});var XNt=s(s3e);jDr=r(XNt,"gpt_neo"),XNt.forEach(t),DDr=r(pGe," \u2014 "),HZ=n(pGe,"A",{href:!0});var zNt=s(HZ);GDr=r(zNt,"FlaxGPTNeoForCausalLM"),zNt.forEach(t),ODr=r(pGe," (GPT Neo model)"),pGe.forEach(t),VDr=i(Ne),b5=n(Ne,"LI",{});var _Ge=s(b5);l3e=n(_Ge,"STRONG",{});var QNt=s(l3e);XDr=r(QNt,"gptj"),QNt.forEach(t),zDr=r(_Ge," \u2014 "),UZ=n(_Ge,"A",{href:!0});var WNt=s(UZ);QDr=r(WNt,"FlaxGPTJForCausalLM"),WNt.forEach(t),WDr=r(_Ge," (GPT-J model)"),_Ge.forEach(t),HDr=i(Ne),v5=n(Ne,"LI",{});var uGe=s(v5);i3e=n(uGe,"STRONG",{});var HNt=s(i3e);UDr=r(HNt,"opt"),HNt.forEach(t),JDr=r(uGe," \u2014 "),JZ=n(uGe,"A",{href:!0});var UNt=s(JZ);YDr=r(UNt,"FlaxOPTForCausalLM"),UNt.forEach(t),KDr=r(uGe," (OPT model)"),uGe.forEach(t),ZDr=i(Ne),F5=n(Ne,"LI",{});var bGe=s(F5);d3e=n(bGe,"STRONG",{});var JNt=s(d3e);eGr=r(JNt,"roberta"),JNt.forEach(t),oGr=r(bGe," \u2014 "),YZ=n(bGe,"A",{href:!0});var YNt=s(YZ);rGr=r(YNt,"FlaxRobertaForCausalLM"),YNt.forEach(t),tGr=r(bGe," (RoBERTa model)"),bGe.forEach(t),aGr=i(Ne),T5=n(Ne,"LI",{});var vGe=s(T5);c3e=n(vGe,"STRONG",{});var KNt=s(c3e);nGr=r(KNt,"xglm"),KNt.forEach(t),sGr=r(vGe," \u2014 "),KZ=n(vGe,"A",{href:!0});var ZNt=s(KZ);lGr=r(ZNt,"FlaxXGLMForCausalLM"),ZNt.forEach(t),iGr=r(vGe," (XGLM model)"),vGe.forEach(t),Ne.forEach(t),dGr=i(ri),T(M5.$$.fragment,ri),ri.forEach(t),oi.forEach(t),CXe=i(f),Jc=n(f,"H2",{class:!0});var RQe=s(Jc);E5=n(RQe,"A",{id:!0,class:!0,href:!0});var eqt=s(E5);f3e=n(eqt,"SPAN",{});var oqt=s(f3e);T(o$.$$.fragment,oqt),oqt.forEach(t),eqt.forEach(t),cGr=i(RQe),m3e=n(RQe,"SPAN",{});var rqt=s(m3e);fGr=r(rqt,"FlaxAutoModelForPreTraining"),rqt.forEach(t),RQe.forEach(t),wXe=i(f),_r=n(f,"DIV",{class:!0});var ti=s(_r);T(r$.$$.fragment,ti),mGr=i(ti),Yc=n(ti,"P",{});var Mte=s(Yc);gGr=r(Mte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),ZZ=n(Mte,"A",{href:!0});var tqt=s(ZZ);hGr=r(tqt,"from_pretrained()"),tqt.forEach(t),pGr=r(Mte," class method or the "),eee=n(Mte,"A",{href:!0});var aqt=s(eee);_Gr=r(aqt,"from_config()"),aqt.forEach(t),uGr=r(Mte,` class
method.`),Mte.forEach(t),bGr=i(ti),t$=n(ti,"P",{});var PQe=s(t$);vGr=r(PQe,"This class cannot be instantiated directly using "),g3e=n(PQe,"CODE",{});var nqt=s(g3e);FGr=r(nqt,"__init__()"),nqt.forEach(t),TGr=r(PQe," (throws an error)."),PQe.forEach(t),MGr=i(ti),Qt=n(ti,"DIV",{class:!0});var b6=s(Qt);T(a$.$$.fragment,b6),EGr=i(b6),h3e=n(b6,"P",{});var sqt=s(h3e);CGr=r(sqt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),sqt.forEach(t),wGr=i(b6),Kc=n(b6,"P",{});var Ete=s(Kc);AGr=r(Ete,`Note:
Loading a model from its configuration file does `),p3e=n(Ete,"STRONG",{});var lqt=s(p3e);LGr=r(lqt,"not"),lqt.forEach(t),yGr=r(Ete,` load the model weights. It only affects the
model\u2019s configuration. Use `),oee=n(Ete,"A",{href:!0});var iqt=s(oee);xGr=r(iqt,"from_pretrained()"),iqt.forEach(t),$Gr=r(Ete," to load the model weights."),Ete.forEach(t),kGr=i(b6),T(C5.$$.fragment,b6),b6.forEach(t),SGr=i(ti),Xr=n(ti,"DIV",{class:!0});var ai=s(Xr);T(n$.$$.fragment,ai),RGr=i(ai),_3e=n(ai,"P",{});var dqt=s(_3e);PGr=r(dqt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),dqt.forEach(t),BGr=i(ai),Mn=n(ai,"P",{});var v6=s(Mn);IGr=r(v6,"The model class to instantiate is selected based on the "),u3e=n(v6,"CODE",{});var cqt=s(u3e);NGr=r(cqt,"model_type"),cqt.forEach(t),qGr=r(v6,` property of the config object (either
passed as an argument or loaded from `),b3e=n(v6,"CODE",{});var fqt=s(b3e);jGr=r(fqt,"pretrained_model_name_or_path"),fqt.forEach(t),DGr=r(v6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v3e=n(v6,"CODE",{});var mqt=s(v3e);GGr=r(mqt,"pretrained_model_name_or_path"),mqt.forEach(t),OGr=r(v6,":"),v6.forEach(t),VGr=i(ai),Ee=n(ai,"UL",{});var we=s(Ee);w5=n(we,"LI",{});var FGe=s(w5);F3e=n(FGe,"STRONG",{});var gqt=s(F3e);XGr=r(gqt,"albert"),gqt.forEach(t),zGr=r(FGe," \u2014 "),ree=n(FGe,"A",{href:!0});var hqt=s(ree);QGr=r(hqt,"FlaxAlbertForPreTraining"),hqt.forEach(t),WGr=r(FGe," (ALBERT model)"),FGe.forEach(t),HGr=i(we),A5=n(we,"LI",{});var TGe=s(A5);T3e=n(TGe,"STRONG",{});var pqt=s(T3e);UGr=r(pqt,"bart"),pqt.forEach(t),JGr=r(TGe," \u2014 "),tee=n(TGe,"A",{href:!0});var _qt=s(tee);YGr=r(_qt,"FlaxBartForConditionalGeneration"),_qt.forEach(t),KGr=r(TGe," (BART model)"),TGe.forEach(t),ZGr=i(we),L5=n(we,"LI",{});var MGe=s(L5);M3e=n(MGe,"STRONG",{});var uqt=s(M3e);eOr=r(uqt,"bert"),uqt.forEach(t),oOr=r(MGe," \u2014 "),aee=n(MGe,"A",{href:!0});var bqt=s(aee);rOr=r(bqt,"FlaxBertForPreTraining"),bqt.forEach(t),tOr=r(MGe," (BERT model)"),MGe.forEach(t),aOr=i(we),y5=n(we,"LI",{});var EGe=s(y5);E3e=n(EGe,"STRONG",{});var vqt=s(E3e);nOr=r(vqt,"big_bird"),vqt.forEach(t),sOr=r(EGe," \u2014 "),nee=n(EGe,"A",{href:!0});var Fqt=s(nee);lOr=r(Fqt,"FlaxBigBirdForPreTraining"),Fqt.forEach(t),iOr=r(EGe," (BigBird model)"),EGe.forEach(t),dOr=i(we),x5=n(we,"LI",{});var CGe=s(x5);C3e=n(CGe,"STRONG",{});var Tqt=s(C3e);cOr=r(Tqt,"electra"),Tqt.forEach(t),fOr=r(CGe," \u2014 "),see=n(CGe,"A",{href:!0});var Mqt=s(see);mOr=r(Mqt,"FlaxElectraForPreTraining"),Mqt.forEach(t),gOr=r(CGe," (ELECTRA model)"),CGe.forEach(t),hOr=i(we),$5=n(we,"LI",{});var wGe=s($5);w3e=n(wGe,"STRONG",{});var Eqt=s(w3e);pOr=r(Eqt,"longt5"),Eqt.forEach(t),_Or=r(wGe," \u2014 "),lee=n(wGe,"A",{href:!0});var Cqt=s(lee);uOr=r(Cqt,"FlaxLongT5ForConditionalGeneration"),Cqt.forEach(t),bOr=r(wGe," (LongT5 model)"),wGe.forEach(t),vOr=i(we),k5=n(we,"LI",{});var AGe=s(k5);A3e=n(AGe,"STRONG",{});var wqt=s(A3e);FOr=r(wqt,"mbart"),wqt.forEach(t),TOr=r(AGe," \u2014 "),iee=n(AGe,"A",{href:!0});var Aqt=s(iee);MOr=r(Aqt,"FlaxMBartForConditionalGeneration"),Aqt.forEach(t),EOr=r(AGe," (mBART model)"),AGe.forEach(t),COr=i(we),S5=n(we,"LI",{});var LGe=s(S5);L3e=n(LGe,"STRONG",{});var Lqt=s(L3e);wOr=r(Lqt,"mt5"),Lqt.forEach(t),AOr=r(LGe," \u2014 "),dee=n(LGe,"A",{href:!0});var yqt=s(dee);LOr=r(yqt,"FlaxMT5ForConditionalGeneration"),yqt.forEach(t),yOr=r(LGe," (MT5 model)"),LGe.forEach(t),xOr=i(we),R5=n(we,"LI",{});var yGe=s(R5);y3e=n(yGe,"STRONG",{});var xqt=s(y3e);$Or=r(xqt,"roberta"),xqt.forEach(t),kOr=r(yGe," \u2014 "),cee=n(yGe,"A",{href:!0});var $qt=s(cee);SOr=r($qt,"FlaxRobertaForMaskedLM"),$qt.forEach(t),ROr=r(yGe," (RoBERTa model)"),yGe.forEach(t),POr=i(we),P5=n(we,"LI",{});var xGe=s(P5);x3e=n(xGe,"STRONG",{});var kqt=s(x3e);BOr=r(kqt,"roformer"),kqt.forEach(t),IOr=r(xGe," \u2014 "),fee=n(xGe,"A",{href:!0});var Sqt=s(fee);NOr=r(Sqt,"FlaxRoFormerForMaskedLM"),Sqt.forEach(t),qOr=r(xGe," (RoFormer model)"),xGe.forEach(t),jOr=i(we),B5=n(we,"LI",{});var $Ge=s(B5);$3e=n($Ge,"STRONG",{});var Rqt=s($3e);DOr=r(Rqt,"t5"),Rqt.forEach(t),GOr=r($Ge," \u2014 "),mee=n($Ge,"A",{href:!0});var Pqt=s(mee);OOr=r(Pqt,"FlaxT5ForConditionalGeneration"),Pqt.forEach(t),VOr=r($Ge," (T5 model)"),$Ge.forEach(t),XOr=i(we),I5=n(we,"LI",{});var kGe=s(I5);k3e=n(kGe,"STRONG",{});var Bqt=s(k3e);zOr=r(Bqt,"wav2vec2"),Bqt.forEach(t),QOr=r(kGe," \u2014 "),gee=n(kGe,"A",{href:!0});var Iqt=s(gee);WOr=r(Iqt,"FlaxWav2Vec2ForPreTraining"),Iqt.forEach(t),HOr=r(kGe," (Wav2Vec2 model)"),kGe.forEach(t),UOr=i(we),N5=n(we,"LI",{});var SGe=s(N5);S3e=n(SGe,"STRONG",{});var Nqt=s(S3e);JOr=r(Nqt,"xlm-roberta"),Nqt.forEach(t),YOr=r(SGe," \u2014 "),hee=n(SGe,"A",{href:!0});var qqt=s(hee);KOr=r(qqt,"FlaxXLMRobertaForMaskedLM"),qqt.forEach(t),ZOr=r(SGe," (XLM-RoBERTa model)"),SGe.forEach(t),we.forEach(t),eVr=i(ai),T(q5.$$.fragment,ai),ai.forEach(t),ti.forEach(t),AXe=i(f),Zc=n(f,"H2",{class:!0});var BQe=s(Zc);j5=n(BQe,"A",{id:!0,class:!0,href:!0});var jqt=s(j5);R3e=n(jqt,"SPAN",{});var Dqt=s(R3e);T(s$.$$.fragment,Dqt),Dqt.forEach(t),jqt.forEach(t),oVr=i(BQe),P3e=n(BQe,"SPAN",{});var Gqt=s(P3e);rVr=r(Gqt,"FlaxAutoModelForMaskedLM"),Gqt.forEach(t),BQe.forEach(t),LXe=i(f),ur=n(f,"DIV",{class:!0});var ni=s(ur);T(l$.$$.fragment,ni),tVr=i(ni),ef=n(ni,"P",{});var Cte=s(ef);aVr=r(Cte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),pee=n(Cte,"A",{href:!0});var Oqt=s(pee);nVr=r(Oqt,"from_pretrained()"),Oqt.forEach(t),sVr=r(Cte," class method or the "),_ee=n(Cte,"A",{href:!0});var Vqt=s(_ee);lVr=r(Vqt,"from_config()"),Vqt.forEach(t),iVr=r(Cte,` class
method.`),Cte.forEach(t),dVr=i(ni),i$=n(ni,"P",{});var IQe=s(i$);cVr=r(IQe,"This class cannot be instantiated directly using "),B3e=n(IQe,"CODE",{});var Xqt=s(B3e);fVr=r(Xqt,"__init__()"),Xqt.forEach(t),mVr=r(IQe," (throws an error)."),IQe.forEach(t),gVr=i(ni),Wt=n(ni,"DIV",{class:!0});var F6=s(Wt);T(d$.$$.fragment,F6),hVr=i(F6),I3e=n(F6,"P",{});var zqt=s(I3e);pVr=r(zqt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),zqt.forEach(t),_Vr=i(F6),of=n(F6,"P",{});var wte=s(of);uVr=r(wte,`Note:
Loading a model from its configuration file does `),N3e=n(wte,"STRONG",{});var Qqt=s(N3e);bVr=r(Qqt,"not"),Qqt.forEach(t),vVr=r(wte,` load the model weights. It only affects the
model\u2019s configuration. Use `),uee=n(wte,"A",{href:!0});var Wqt=s(uee);FVr=r(Wqt,"from_pretrained()"),Wqt.forEach(t),TVr=r(wte," to load the model weights."),wte.forEach(t),MVr=i(F6),T(D5.$$.fragment,F6),F6.forEach(t),EVr=i(ni),zr=n(ni,"DIV",{class:!0});var si=s(zr);T(c$.$$.fragment,si),CVr=i(si),q3e=n(si,"P",{});var Hqt=s(q3e);wVr=r(Hqt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Hqt.forEach(t),AVr=i(si),En=n(si,"P",{});var T6=s(En);LVr=r(T6,"The model class to instantiate is selected based on the "),j3e=n(T6,"CODE",{});var Uqt=s(j3e);yVr=r(Uqt,"model_type"),Uqt.forEach(t),xVr=r(T6,` property of the config object (either
passed as an argument or loaded from `),D3e=n(T6,"CODE",{});var Jqt=s(D3e);$Vr=r(Jqt,"pretrained_model_name_or_path"),Jqt.forEach(t),kVr=r(T6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G3e=n(T6,"CODE",{});var Yqt=s(G3e);SVr=r(Yqt,"pretrained_model_name_or_path"),Yqt.forEach(t),RVr=r(T6,":"),T6.forEach(t),PVr=i(si),$e=n(si,"UL",{});var qe=s($e);G5=n(qe,"LI",{});var RGe=s(G5);O3e=n(RGe,"STRONG",{});var Kqt=s(O3e);BVr=r(Kqt,"albert"),Kqt.forEach(t),IVr=r(RGe," \u2014 "),bee=n(RGe,"A",{href:!0});var Zqt=s(bee);NVr=r(Zqt,"FlaxAlbertForMaskedLM"),Zqt.forEach(t),qVr=r(RGe," (ALBERT model)"),RGe.forEach(t),jVr=i(qe),O5=n(qe,"LI",{});var PGe=s(O5);V3e=n(PGe,"STRONG",{});var ejt=s(V3e);DVr=r(ejt,"bart"),ejt.forEach(t),GVr=r(PGe," \u2014 "),vee=n(PGe,"A",{href:!0});var ojt=s(vee);OVr=r(ojt,"FlaxBartForConditionalGeneration"),ojt.forEach(t),VVr=r(PGe," (BART model)"),PGe.forEach(t),XVr=i(qe),V5=n(qe,"LI",{});var BGe=s(V5);X3e=n(BGe,"STRONG",{});var rjt=s(X3e);zVr=r(rjt,"bert"),rjt.forEach(t),QVr=r(BGe," \u2014 "),Fee=n(BGe,"A",{href:!0});var tjt=s(Fee);WVr=r(tjt,"FlaxBertForMaskedLM"),tjt.forEach(t),HVr=r(BGe," (BERT model)"),BGe.forEach(t),UVr=i(qe),X5=n(qe,"LI",{});var IGe=s(X5);z3e=n(IGe,"STRONG",{});var ajt=s(z3e);JVr=r(ajt,"big_bird"),ajt.forEach(t),YVr=r(IGe," \u2014 "),Tee=n(IGe,"A",{href:!0});var njt=s(Tee);KVr=r(njt,"FlaxBigBirdForMaskedLM"),njt.forEach(t),ZVr=r(IGe," (BigBird model)"),IGe.forEach(t),eXr=i(qe),z5=n(qe,"LI",{});var NGe=s(z5);Q3e=n(NGe,"STRONG",{});var sjt=s(Q3e);oXr=r(sjt,"distilbert"),sjt.forEach(t),rXr=r(NGe," \u2014 "),Mee=n(NGe,"A",{href:!0});var ljt=s(Mee);tXr=r(ljt,"FlaxDistilBertForMaskedLM"),ljt.forEach(t),aXr=r(NGe," (DistilBERT model)"),NGe.forEach(t),nXr=i(qe),Q5=n(qe,"LI",{});var qGe=s(Q5);W3e=n(qGe,"STRONG",{});var ijt=s(W3e);sXr=r(ijt,"electra"),ijt.forEach(t),lXr=r(qGe," \u2014 "),Eee=n(qGe,"A",{href:!0});var djt=s(Eee);iXr=r(djt,"FlaxElectraForMaskedLM"),djt.forEach(t),dXr=r(qGe," (ELECTRA model)"),qGe.forEach(t),cXr=i(qe),W5=n(qe,"LI",{});var jGe=s(W5);H3e=n(jGe,"STRONG",{});var cjt=s(H3e);fXr=r(cjt,"mbart"),cjt.forEach(t),mXr=r(jGe," \u2014 "),Cee=n(jGe,"A",{href:!0});var fjt=s(Cee);gXr=r(fjt,"FlaxMBartForConditionalGeneration"),fjt.forEach(t),hXr=r(jGe," (mBART model)"),jGe.forEach(t),pXr=i(qe),H5=n(qe,"LI",{});var DGe=s(H5);U3e=n(DGe,"STRONG",{});var mjt=s(U3e);_Xr=r(mjt,"roberta"),mjt.forEach(t),uXr=r(DGe," \u2014 "),wee=n(DGe,"A",{href:!0});var gjt=s(wee);bXr=r(gjt,"FlaxRobertaForMaskedLM"),gjt.forEach(t),vXr=r(DGe," (RoBERTa model)"),DGe.forEach(t),FXr=i(qe),U5=n(qe,"LI",{});var GGe=s(U5);J3e=n(GGe,"STRONG",{});var hjt=s(J3e);TXr=r(hjt,"roformer"),hjt.forEach(t),MXr=r(GGe," \u2014 "),Aee=n(GGe,"A",{href:!0});var pjt=s(Aee);EXr=r(pjt,"FlaxRoFormerForMaskedLM"),pjt.forEach(t),CXr=r(GGe," (RoFormer model)"),GGe.forEach(t),wXr=i(qe),J5=n(qe,"LI",{});var OGe=s(J5);Y3e=n(OGe,"STRONG",{});var _jt=s(Y3e);AXr=r(_jt,"xlm-roberta"),_jt.forEach(t),LXr=r(OGe," \u2014 "),Lee=n(OGe,"A",{href:!0});var ujt=s(Lee);yXr=r(ujt,"FlaxXLMRobertaForMaskedLM"),ujt.forEach(t),xXr=r(OGe," (XLM-RoBERTa model)"),OGe.forEach(t),qe.forEach(t),$Xr=i(si),T(Y5.$$.fragment,si),si.forEach(t),ni.forEach(t),yXe=i(f),rf=n(f,"H2",{class:!0});var NQe=s(rf);K5=n(NQe,"A",{id:!0,class:!0,href:!0});var bjt=s(K5);K3e=n(bjt,"SPAN",{});var vjt=s(K3e);T(f$.$$.fragment,vjt),vjt.forEach(t),bjt.forEach(t),kXr=i(NQe),Z3e=n(NQe,"SPAN",{});var Fjt=s(Z3e);SXr=r(Fjt,"FlaxAutoModelForSeq2SeqLM"),Fjt.forEach(t),NQe.forEach(t),xXe=i(f),br=n(f,"DIV",{class:!0});var li=s(br);T(m$.$$.fragment,li),RXr=i(li),tf=n(li,"P",{});var Ate=s(tf);PXr=r(Ate,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),yee=n(Ate,"A",{href:!0});var Tjt=s(yee);BXr=r(Tjt,"from_pretrained()"),Tjt.forEach(t),IXr=r(Ate," class method or the "),xee=n(Ate,"A",{href:!0});var Mjt=s(xee);NXr=r(Mjt,"from_config()"),Mjt.forEach(t),qXr=r(Ate,` class
method.`),Ate.forEach(t),jXr=i(li),g$=n(li,"P",{});var qQe=s(g$);DXr=r(qQe,"This class cannot be instantiated directly using "),e5e=n(qQe,"CODE",{});var Ejt=s(e5e);GXr=r(Ejt,"__init__()"),Ejt.forEach(t),OXr=r(qQe," (throws an error)."),qQe.forEach(t),VXr=i(li),Ht=n(li,"DIV",{class:!0});var M6=s(Ht);T(h$.$$.fragment,M6),XXr=i(M6),o5e=n(M6,"P",{});var Cjt=s(o5e);zXr=r(Cjt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Cjt.forEach(t),QXr=i(M6),af=n(M6,"P",{});var Lte=s(af);WXr=r(Lte,`Note:
Loading a model from its configuration file does `),r5e=n(Lte,"STRONG",{});var wjt=s(r5e);HXr=r(wjt,"not"),wjt.forEach(t),UXr=r(Lte,` load the model weights. It only affects the
model\u2019s configuration. Use `),$ee=n(Lte,"A",{href:!0});var Ajt=s($ee);JXr=r(Ajt,"from_pretrained()"),Ajt.forEach(t),YXr=r(Lte," to load the model weights."),Lte.forEach(t),KXr=i(M6),T(Z5.$$.fragment,M6),M6.forEach(t),ZXr=i(li),Qr=n(li,"DIV",{class:!0});var ii=s(Qr);T(p$.$$.fragment,ii),ezr=i(ii),t5e=n(ii,"P",{});var Ljt=s(t5e);ozr=r(Ljt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Ljt.forEach(t),rzr=i(ii),Cn=n(ii,"P",{});var E6=s(Cn);tzr=r(E6,"The model class to instantiate is selected based on the "),a5e=n(E6,"CODE",{});var yjt=s(a5e);azr=r(yjt,"model_type"),yjt.forEach(t),nzr=r(E6,` property of the config object (either
passed as an argument or loaded from `),n5e=n(E6,"CODE",{});var xjt=s(n5e);szr=r(xjt,"pretrained_model_name_or_path"),xjt.forEach(t),lzr=r(E6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s5e=n(E6,"CODE",{});var $jt=s(s5e);izr=r($jt,"pretrained_model_name_or_path"),$jt.forEach(t),dzr=r(E6,":"),E6.forEach(t),czr=i(ii),ke=n(ii,"UL",{});var je=s(ke);e0=n(je,"LI",{});var VGe=s(e0);l5e=n(VGe,"STRONG",{});var kjt=s(l5e);fzr=r(kjt,"bart"),kjt.forEach(t),mzr=r(VGe," \u2014 "),kee=n(VGe,"A",{href:!0});var Sjt=s(kee);gzr=r(Sjt,"FlaxBartForConditionalGeneration"),Sjt.forEach(t),hzr=r(VGe," (BART model)"),VGe.forEach(t),pzr=i(je),o0=n(je,"LI",{});var XGe=s(o0);i5e=n(XGe,"STRONG",{});var Rjt=s(i5e);_zr=r(Rjt,"blenderbot"),Rjt.forEach(t),uzr=r(XGe," \u2014 "),See=n(XGe,"A",{href:!0});var Pjt=s(See);bzr=r(Pjt,"FlaxBlenderbotForConditionalGeneration"),Pjt.forEach(t),vzr=r(XGe," (Blenderbot model)"),XGe.forEach(t),Fzr=i(je),r0=n(je,"LI",{});var zGe=s(r0);d5e=n(zGe,"STRONG",{});var Bjt=s(d5e);Tzr=r(Bjt,"blenderbot-small"),Bjt.forEach(t),Mzr=r(zGe," \u2014 "),Ree=n(zGe,"A",{href:!0});var Ijt=s(Ree);Ezr=r(Ijt,"FlaxBlenderbotSmallForConditionalGeneration"),Ijt.forEach(t),Czr=r(zGe," (BlenderbotSmall model)"),zGe.forEach(t),wzr=i(je),t0=n(je,"LI",{});var QGe=s(t0);c5e=n(QGe,"STRONG",{});var Njt=s(c5e);Azr=r(Njt,"encoder-decoder"),Njt.forEach(t),Lzr=r(QGe," \u2014 "),Pee=n(QGe,"A",{href:!0});var qjt=s(Pee);yzr=r(qjt,"FlaxEncoderDecoderModel"),qjt.forEach(t),xzr=r(QGe," (Encoder decoder model)"),QGe.forEach(t),$zr=i(je),a0=n(je,"LI",{});var WGe=s(a0);f5e=n(WGe,"STRONG",{});var jjt=s(f5e);kzr=r(jjt,"longt5"),jjt.forEach(t),Szr=r(WGe," \u2014 "),Bee=n(WGe,"A",{href:!0});var Djt=s(Bee);Rzr=r(Djt,"FlaxLongT5ForConditionalGeneration"),Djt.forEach(t),Pzr=r(WGe," (LongT5 model)"),WGe.forEach(t),Bzr=i(je),n0=n(je,"LI",{});var HGe=s(n0);m5e=n(HGe,"STRONG",{});var Gjt=s(m5e);Izr=r(Gjt,"marian"),Gjt.forEach(t),Nzr=r(HGe," \u2014 "),Iee=n(HGe,"A",{href:!0});var Ojt=s(Iee);qzr=r(Ojt,"FlaxMarianMTModel"),Ojt.forEach(t),jzr=r(HGe," (Marian model)"),HGe.forEach(t),Dzr=i(je),s0=n(je,"LI",{});var UGe=s(s0);g5e=n(UGe,"STRONG",{});var Vjt=s(g5e);Gzr=r(Vjt,"mbart"),Vjt.forEach(t),Ozr=r(UGe," \u2014 "),Nee=n(UGe,"A",{href:!0});var Xjt=s(Nee);Vzr=r(Xjt,"FlaxMBartForConditionalGeneration"),Xjt.forEach(t),Xzr=r(UGe," (mBART model)"),UGe.forEach(t),zzr=i(je),l0=n(je,"LI",{});var JGe=s(l0);h5e=n(JGe,"STRONG",{});var zjt=s(h5e);Qzr=r(zjt,"mt5"),zjt.forEach(t),Wzr=r(JGe," \u2014 "),qee=n(JGe,"A",{href:!0});var Qjt=s(qee);Hzr=r(Qjt,"FlaxMT5ForConditionalGeneration"),Qjt.forEach(t),Uzr=r(JGe," (MT5 model)"),JGe.forEach(t),Jzr=i(je),i0=n(je,"LI",{});var YGe=s(i0);p5e=n(YGe,"STRONG",{});var Wjt=s(p5e);Yzr=r(Wjt,"pegasus"),Wjt.forEach(t),Kzr=r(YGe," \u2014 "),jee=n(YGe,"A",{href:!0});var Hjt=s(jee);Zzr=r(Hjt,"FlaxPegasusForConditionalGeneration"),Hjt.forEach(t),eQr=r(YGe," (Pegasus model)"),YGe.forEach(t),oQr=i(je),d0=n(je,"LI",{});var KGe=s(d0);_5e=n(KGe,"STRONG",{});var Ujt=s(_5e);rQr=r(Ujt,"t5"),Ujt.forEach(t),tQr=r(KGe," \u2014 "),Dee=n(KGe,"A",{href:!0});var Jjt=s(Dee);aQr=r(Jjt,"FlaxT5ForConditionalGeneration"),Jjt.forEach(t),nQr=r(KGe," (T5 model)"),KGe.forEach(t),je.forEach(t),sQr=i(ii),T(c0.$$.fragment,ii),ii.forEach(t),li.forEach(t),$Xe=i(f),nf=n(f,"H2",{class:!0});var jQe=s(nf);f0=n(jQe,"A",{id:!0,class:!0,href:!0});var Yjt=s(f0);u5e=n(Yjt,"SPAN",{});var Kjt=s(u5e);T(_$.$$.fragment,Kjt),Kjt.forEach(t),Yjt.forEach(t),lQr=i(jQe),b5e=n(jQe,"SPAN",{});var Zjt=s(b5e);iQr=r(Zjt,"FlaxAutoModelForSequenceClassification"),Zjt.forEach(t),jQe.forEach(t),kXe=i(f),vr=n(f,"DIV",{class:!0});var di=s(vr);T(u$.$$.fragment,di),dQr=i(di),sf=n(di,"P",{});var yte=s(sf);cQr=r(yte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Gee=n(yte,"A",{href:!0});var eDt=s(Gee);fQr=r(eDt,"from_pretrained()"),eDt.forEach(t),mQr=r(yte," class method or the "),Oee=n(yte,"A",{href:!0});var oDt=s(Oee);gQr=r(oDt,"from_config()"),oDt.forEach(t),hQr=r(yte,` class
method.`),yte.forEach(t),pQr=i(di),b$=n(di,"P",{});var DQe=s(b$);_Qr=r(DQe,"This class cannot be instantiated directly using "),v5e=n(DQe,"CODE",{});var rDt=s(v5e);uQr=r(rDt,"__init__()"),rDt.forEach(t),bQr=r(DQe," (throws an error)."),DQe.forEach(t),vQr=i(di),Ut=n(di,"DIV",{class:!0});var C6=s(Ut);T(v$.$$.fragment,C6),FQr=i(C6),F5e=n(C6,"P",{});var tDt=s(F5e);TQr=r(tDt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),tDt.forEach(t),MQr=i(C6),lf=n(C6,"P",{});var xte=s(lf);EQr=r(xte,`Note:
Loading a model from its configuration file does `),T5e=n(xte,"STRONG",{});var aDt=s(T5e);CQr=r(aDt,"not"),aDt.forEach(t),wQr=r(xte,` load the model weights. It only affects the
model\u2019s configuration. Use `),Vee=n(xte,"A",{href:!0});var nDt=s(Vee);AQr=r(nDt,"from_pretrained()"),nDt.forEach(t),LQr=r(xte," to load the model weights."),xte.forEach(t),yQr=i(C6),T(m0.$$.fragment,C6),C6.forEach(t),xQr=i(di),Wr=n(di,"DIV",{class:!0});var ci=s(Wr);T(F$.$$.fragment,ci),$Qr=i(ci),M5e=n(ci,"P",{});var sDt=s(M5e);kQr=r(sDt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),sDt.forEach(t),SQr=i(ci),wn=n(ci,"P",{});var w6=s(wn);RQr=r(w6,"The model class to instantiate is selected based on the "),E5e=n(w6,"CODE",{});var lDt=s(E5e);PQr=r(lDt,"model_type"),lDt.forEach(t),BQr=r(w6,` property of the config object (either
passed as an argument or loaded from `),C5e=n(w6,"CODE",{});var iDt=s(C5e);IQr=r(iDt,"pretrained_model_name_or_path"),iDt.forEach(t),NQr=r(w6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w5e=n(w6,"CODE",{});var dDt=s(w5e);qQr=r(dDt,"pretrained_model_name_or_path"),dDt.forEach(t),jQr=r(w6,":"),w6.forEach(t),DQr=i(ci),Se=n(ci,"UL",{});var De=s(Se);g0=n(De,"LI",{});var ZGe=s(g0);A5e=n(ZGe,"STRONG",{});var cDt=s(A5e);GQr=r(cDt,"albert"),cDt.forEach(t),OQr=r(ZGe," \u2014 "),Xee=n(ZGe,"A",{href:!0});var fDt=s(Xee);VQr=r(fDt,"FlaxAlbertForSequenceClassification"),fDt.forEach(t),XQr=r(ZGe," (ALBERT model)"),ZGe.forEach(t),zQr=i(De),h0=n(De,"LI",{});var eOe=s(h0);L5e=n(eOe,"STRONG",{});var mDt=s(L5e);QQr=r(mDt,"bart"),mDt.forEach(t),WQr=r(eOe," \u2014 "),zee=n(eOe,"A",{href:!0});var gDt=s(zee);HQr=r(gDt,"FlaxBartForSequenceClassification"),gDt.forEach(t),UQr=r(eOe," (BART model)"),eOe.forEach(t),JQr=i(De),p0=n(De,"LI",{});var oOe=s(p0);y5e=n(oOe,"STRONG",{});var hDt=s(y5e);YQr=r(hDt,"bert"),hDt.forEach(t),KQr=r(oOe," \u2014 "),Qee=n(oOe,"A",{href:!0});var pDt=s(Qee);ZQr=r(pDt,"FlaxBertForSequenceClassification"),pDt.forEach(t),eWr=r(oOe," (BERT model)"),oOe.forEach(t),oWr=i(De),_0=n(De,"LI",{});var rOe=s(_0);x5e=n(rOe,"STRONG",{});var _Dt=s(x5e);rWr=r(_Dt,"big_bird"),_Dt.forEach(t),tWr=r(rOe," \u2014 "),Wee=n(rOe,"A",{href:!0});var uDt=s(Wee);aWr=r(uDt,"FlaxBigBirdForSequenceClassification"),uDt.forEach(t),nWr=r(rOe," (BigBird model)"),rOe.forEach(t),sWr=i(De),u0=n(De,"LI",{});var tOe=s(u0);$5e=n(tOe,"STRONG",{});var bDt=s($5e);lWr=r(bDt,"distilbert"),bDt.forEach(t),iWr=r(tOe," \u2014 "),Hee=n(tOe,"A",{href:!0});var vDt=s(Hee);dWr=r(vDt,"FlaxDistilBertForSequenceClassification"),vDt.forEach(t),cWr=r(tOe," (DistilBERT model)"),tOe.forEach(t),fWr=i(De),b0=n(De,"LI",{});var aOe=s(b0);k5e=n(aOe,"STRONG",{});var FDt=s(k5e);mWr=r(FDt,"electra"),FDt.forEach(t),gWr=r(aOe," \u2014 "),Uee=n(aOe,"A",{href:!0});var TDt=s(Uee);hWr=r(TDt,"FlaxElectraForSequenceClassification"),TDt.forEach(t),pWr=r(aOe," (ELECTRA model)"),aOe.forEach(t),_Wr=i(De),v0=n(De,"LI",{});var nOe=s(v0);S5e=n(nOe,"STRONG",{});var MDt=s(S5e);uWr=r(MDt,"mbart"),MDt.forEach(t),bWr=r(nOe," \u2014 "),Jee=n(nOe,"A",{href:!0});var EDt=s(Jee);vWr=r(EDt,"FlaxMBartForSequenceClassification"),EDt.forEach(t),FWr=r(nOe," (mBART model)"),nOe.forEach(t),TWr=i(De),F0=n(De,"LI",{});var sOe=s(F0);R5e=n(sOe,"STRONG",{});var CDt=s(R5e);MWr=r(CDt,"roberta"),CDt.forEach(t),EWr=r(sOe," \u2014 "),Yee=n(sOe,"A",{href:!0});var wDt=s(Yee);CWr=r(wDt,"FlaxRobertaForSequenceClassification"),wDt.forEach(t),wWr=r(sOe," (RoBERTa model)"),sOe.forEach(t),AWr=i(De),T0=n(De,"LI",{});var lOe=s(T0);P5e=n(lOe,"STRONG",{});var ADt=s(P5e);LWr=r(ADt,"roformer"),ADt.forEach(t),yWr=r(lOe," \u2014 "),Kee=n(lOe,"A",{href:!0});var LDt=s(Kee);xWr=r(LDt,"FlaxRoFormerForSequenceClassification"),LDt.forEach(t),$Wr=r(lOe," (RoFormer model)"),lOe.forEach(t),kWr=i(De),M0=n(De,"LI",{});var iOe=s(M0);B5e=n(iOe,"STRONG",{});var yDt=s(B5e);SWr=r(yDt,"xlm-roberta"),yDt.forEach(t),RWr=r(iOe," \u2014 "),Zee=n(iOe,"A",{href:!0});var xDt=s(Zee);PWr=r(xDt,"FlaxXLMRobertaForSequenceClassification"),xDt.forEach(t),BWr=r(iOe," (XLM-RoBERTa model)"),iOe.forEach(t),De.forEach(t),IWr=i(ci),T(E0.$$.fragment,ci),ci.forEach(t),di.forEach(t),SXe=i(f),df=n(f,"H2",{class:!0});var GQe=s(df);C0=n(GQe,"A",{id:!0,class:!0,href:!0});var $Dt=s(C0);I5e=n($Dt,"SPAN",{});var kDt=s(I5e);T(T$.$$.fragment,kDt),kDt.forEach(t),$Dt.forEach(t),NWr=i(GQe),N5e=n(GQe,"SPAN",{});var SDt=s(N5e);qWr=r(SDt,"FlaxAutoModelForQuestionAnswering"),SDt.forEach(t),GQe.forEach(t),RXe=i(f),Fr=n(f,"DIV",{class:!0});var fi=s(Fr);T(M$.$$.fragment,fi),jWr=i(fi),cf=n(fi,"P",{});var $te=s(cf);DWr=r($te,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),eoe=n($te,"A",{href:!0});var RDt=s(eoe);GWr=r(RDt,"from_pretrained()"),RDt.forEach(t),OWr=r($te," class method or the "),ooe=n($te,"A",{href:!0});var PDt=s(ooe);VWr=r(PDt,"from_config()"),PDt.forEach(t),XWr=r($te,` class
method.`),$te.forEach(t),zWr=i(fi),E$=n(fi,"P",{});var OQe=s(E$);QWr=r(OQe,"This class cannot be instantiated directly using "),q5e=n(OQe,"CODE",{});var BDt=s(q5e);WWr=r(BDt,"__init__()"),BDt.forEach(t),HWr=r(OQe," (throws an error)."),OQe.forEach(t),UWr=i(fi),Jt=n(fi,"DIV",{class:!0});var A6=s(Jt);T(C$.$$.fragment,A6),JWr=i(A6),j5e=n(A6,"P",{});var IDt=s(j5e);YWr=r(IDt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),IDt.forEach(t),KWr=i(A6),ff=n(A6,"P",{});var kte=s(ff);ZWr=r(kte,`Note:
Loading a model from its configuration file does `),D5e=n(kte,"STRONG",{});var NDt=s(D5e);eHr=r(NDt,"not"),NDt.forEach(t),oHr=r(kte,` load the model weights. It only affects the
model\u2019s configuration. Use `),roe=n(kte,"A",{href:!0});var qDt=s(roe);rHr=r(qDt,"from_pretrained()"),qDt.forEach(t),tHr=r(kte," to load the model weights."),kte.forEach(t),aHr=i(A6),T(w0.$$.fragment,A6),A6.forEach(t),nHr=i(fi),Hr=n(fi,"DIV",{class:!0});var mi=s(Hr);T(w$.$$.fragment,mi),sHr=i(mi),G5e=n(mi,"P",{});var jDt=s(G5e);lHr=r(jDt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),jDt.forEach(t),iHr=i(mi),An=n(mi,"P",{});var L6=s(An);dHr=r(L6,"The model class to instantiate is selected based on the "),O5e=n(L6,"CODE",{});var DDt=s(O5e);cHr=r(DDt,"model_type"),DDt.forEach(t),fHr=r(L6,` property of the config object (either
passed as an argument or loaded from `),V5e=n(L6,"CODE",{});var GDt=s(V5e);mHr=r(GDt,"pretrained_model_name_or_path"),GDt.forEach(t),gHr=r(L6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X5e=n(L6,"CODE",{});var ODt=s(X5e);hHr=r(ODt,"pretrained_model_name_or_path"),ODt.forEach(t),pHr=r(L6,":"),L6.forEach(t),_Hr=i(mi),Re=n(mi,"UL",{});var Ge=s(Re);A0=n(Ge,"LI",{});var dOe=s(A0);z5e=n(dOe,"STRONG",{});var VDt=s(z5e);uHr=r(VDt,"albert"),VDt.forEach(t),bHr=r(dOe," \u2014 "),toe=n(dOe,"A",{href:!0});var XDt=s(toe);vHr=r(XDt,"FlaxAlbertForQuestionAnswering"),XDt.forEach(t),FHr=r(dOe," (ALBERT model)"),dOe.forEach(t),THr=i(Ge),L0=n(Ge,"LI",{});var cOe=s(L0);Q5e=n(cOe,"STRONG",{});var zDt=s(Q5e);MHr=r(zDt,"bart"),zDt.forEach(t),EHr=r(cOe," \u2014 "),aoe=n(cOe,"A",{href:!0});var QDt=s(aoe);CHr=r(QDt,"FlaxBartForQuestionAnswering"),QDt.forEach(t),wHr=r(cOe," (BART model)"),cOe.forEach(t),AHr=i(Ge),y0=n(Ge,"LI",{});var fOe=s(y0);W5e=n(fOe,"STRONG",{});var WDt=s(W5e);LHr=r(WDt,"bert"),WDt.forEach(t),yHr=r(fOe," \u2014 "),noe=n(fOe,"A",{href:!0});var HDt=s(noe);xHr=r(HDt,"FlaxBertForQuestionAnswering"),HDt.forEach(t),$Hr=r(fOe," (BERT model)"),fOe.forEach(t),kHr=i(Ge),x0=n(Ge,"LI",{});var mOe=s(x0);H5e=n(mOe,"STRONG",{});var UDt=s(H5e);SHr=r(UDt,"big_bird"),UDt.forEach(t),RHr=r(mOe," \u2014 "),soe=n(mOe,"A",{href:!0});var JDt=s(soe);PHr=r(JDt,"FlaxBigBirdForQuestionAnswering"),JDt.forEach(t),BHr=r(mOe," (BigBird model)"),mOe.forEach(t),IHr=i(Ge),$0=n(Ge,"LI",{});var gOe=s($0);U5e=n(gOe,"STRONG",{});var YDt=s(U5e);NHr=r(YDt,"distilbert"),YDt.forEach(t),qHr=r(gOe," \u2014 "),loe=n(gOe,"A",{href:!0});var KDt=s(loe);jHr=r(KDt,"FlaxDistilBertForQuestionAnswering"),KDt.forEach(t),DHr=r(gOe," (DistilBERT model)"),gOe.forEach(t),GHr=i(Ge),k0=n(Ge,"LI",{});var hOe=s(k0);J5e=n(hOe,"STRONG",{});var ZDt=s(J5e);OHr=r(ZDt,"electra"),ZDt.forEach(t),VHr=r(hOe," \u2014 "),ioe=n(hOe,"A",{href:!0});var eGt=s(ioe);XHr=r(eGt,"FlaxElectraForQuestionAnswering"),eGt.forEach(t),zHr=r(hOe," (ELECTRA model)"),hOe.forEach(t),QHr=i(Ge),S0=n(Ge,"LI",{});var pOe=s(S0);Y5e=n(pOe,"STRONG",{});var oGt=s(Y5e);WHr=r(oGt,"mbart"),oGt.forEach(t),HHr=r(pOe," \u2014 "),doe=n(pOe,"A",{href:!0});var rGt=s(doe);UHr=r(rGt,"FlaxMBartForQuestionAnswering"),rGt.forEach(t),JHr=r(pOe," (mBART model)"),pOe.forEach(t),YHr=i(Ge),R0=n(Ge,"LI",{});var _Oe=s(R0);K5e=n(_Oe,"STRONG",{});var tGt=s(K5e);KHr=r(tGt,"roberta"),tGt.forEach(t),ZHr=r(_Oe," \u2014 "),coe=n(_Oe,"A",{href:!0});var aGt=s(coe);eUr=r(aGt,"FlaxRobertaForQuestionAnswering"),aGt.forEach(t),oUr=r(_Oe," (RoBERTa model)"),_Oe.forEach(t),rUr=i(Ge),P0=n(Ge,"LI",{});var uOe=s(P0);Z5e=n(uOe,"STRONG",{});var nGt=s(Z5e);tUr=r(nGt,"roformer"),nGt.forEach(t),aUr=r(uOe," \u2014 "),foe=n(uOe,"A",{href:!0});var sGt=s(foe);nUr=r(sGt,"FlaxRoFormerForQuestionAnswering"),sGt.forEach(t),sUr=r(uOe," (RoFormer model)"),uOe.forEach(t),lUr=i(Ge),B0=n(Ge,"LI",{});var bOe=s(B0);e0e=n(bOe,"STRONG",{});var lGt=s(e0e);iUr=r(lGt,"xlm-roberta"),lGt.forEach(t),dUr=r(bOe," \u2014 "),moe=n(bOe,"A",{href:!0});var iGt=s(moe);cUr=r(iGt,"FlaxXLMRobertaForQuestionAnswering"),iGt.forEach(t),fUr=r(bOe," (XLM-RoBERTa model)"),bOe.forEach(t),Ge.forEach(t),mUr=i(mi),T(I0.$$.fragment,mi),mi.forEach(t),fi.forEach(t),PXe=i(f),mf=n(f,"H2",{class:!0});var VQe=s(mf);N0=n(VQe,"A",{id:!0,class:!0,href:!0});var dGt=s(N0);o0e=n(dGt,"SPAN",{});var cGt=s(o0e);T(A$.$$.fragment,cGt),cGt.forEach(t),dGt.forEach(t),gUr=i(VQe),r0e=n(VQe,"SPAN",{});var fGt=s(r0e);hUr=r(fGt,"FlaxAutoModelForTokenClassification"),fGt.forEach(t),VQe.forEach(t),BXe=i(f),Tr=n(f,"DIV",{class:!0});var gi=s(Tr);T(L$.$$.fragment,gi),pUr=i(gi),gf=n(gi,"P",{});var Ste=s(gf);_Ur=r(Ste,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),goe=n(Ste,"A",{href:!0});var mGt=s(goe);uUr=r(mGt,"from_pretrained()"),mGt.forEach(t),bUr=r(Ste," class method or the "),hoe=n(Ste,"A",{href:!0});var gGt=s(hoe);vUr=r(gGt,"from_config()"),gGt.forEach(t),FUr=r(Ste,` class
method.`),Ste.forEach(t),TUr=i(gi),y$=n(gi,"P",{});var XQe=s(y$);MUr=r(XQe,"This class cannot be instantiated directly using "),t0e=n(XQe,"CODE",{});var hGt=s(t0e);EUr=r(hGt,"__init__()"),hGt.forEach(t),CUr=r(XQe," (throws an error)."),XQe.forEach(t),wUr=i(gi),Yt=n(gi,"DIV",{class:!0});var y6=s(Yt);T(x$.$$.fragment,y6),AUr=i(y6),a0e=n(y6,"P",{});var pGt=s(a0e);LUr=r(pGt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),pGt.forEach(t),yUr=i(y6),hf=n(y6,"P",{});var Rte=s(hf);xUr=r(Rte,`Note:
Loading a model from its configuration file does `),n0e=n(Rte,"STRONG",{});var _Gt=s(n0e);$Ur=r(_Gt,"not"),_Gt.forEach(t),kUr=r(Rte,` load the model weights. It only affects the
model\u2019s configuration. Use `),poe=n(Rte,"A",{href:!0});var uGt=s(poe);SUr=r(uGt,"from_pretrained()"),uGt.forEach(t),RUr=r(Rte," to load the model weights."),Rte.forEach(t),PUr=i(y6),T(q0.$$.fragment,y6),y6.forEach(t),BUr=i(gi),Ur=n(gi,"DIV",{class:!0});var hi=s(Ur);T($$.$$.fragment,hi),IUr=i(hi),s0e=n(hi,"P",{});var bGt=s(s0e);NUr=r(bGt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),bGt.forEach(t),qUr=i(hi),Ln=n(hi,"P",{});var x6=s(Ln);jUr=r(x6,"The model class to instantiate is selected based on the "),l0e=n(x6,"CODE",{});var vGt=s(l0e);DUr=r(vGt,"model_type"),vGt.forEach(t),GUr=r(x6,` property of the config object (either
passed as an argument or loaded from `),i0e=n(x6,"CODE",{});var FGt=s(i0e);OUr=r(FGt,"pretrained_model_name_or_path"),FGt.forEach(t),VUr=r(x6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d0e=n(x6,"CODE",{});var TGt=s(d0e);XUr=r(TGt,"pretrained_model_name_or_path"),TGt.forEach(t),zUr=r(x6,":"),x6.forEach(t),QUr=i(hi),Ve=n(hi,"UL",{});var To=s(Ve);j0=n(To,"LI",{});var vOe=s(j0);c0e=n(vOe,"STRONG",{});var MGt=s(c0e);WUr=r(MGt,"albert"),MGt.forEach(t),HUr=r(vOe," \u2014 "),_oe=n(vOe,"A",{href:!0});var EGt=s(_oe);UUr=r(EGt,"FlaxAlbertForTokenClassification"),EGt.forEach(t),JUr=r(vOe," (ALBERT model)"),vOe.forEach(t),YUr=i(To),D0=n(To,"LI",{});var FOe=s(D0);f0e=n(FOe,"STRONG",{});var CGt=s(f0e);KUr=r(CGt,"bert"),CGt.forEach(t),ZUr=r(FOe," \u2014 "),uoe=n(FOe,"A",{href:!0});var wGt=s(uoe);eJr=r(wGt,"FlaxBertForTokenClassification"),wGt.forEach(t),oJr=r(FOe," (BERT model)"),FOe.forEach(t),rJr=i(To),G0=n(To,"LI",{});var TOe=s(G0);m0e=n(TOe,"STRONG",{});var AGt=s(m0e);tJr=r(AGt,"big_bird"),AGt.forEach(t),aJr=r(TOe," \u2014 "),boe=n(TOe,"A",{href:!0});var LGt=s(boe);nJr=r(LGt,"FlaxBigBirdForTokenClassification"),LGt.forEach(t),sJr=r(TOe," (BigBird model)"),TOe.forEach(t),lJr=i(To),O0=n(To,"LI",{});var MOe=s(O0);g0e=n(MOe,"STRONG",{});var yGt=s(g0e);iJr=r(yGt,"distilbert"),yGt.forEach(t),dJr=r(MOe," \u2014 "),voe=n(MOe,"A",{href:!0});var xGt=s(voe);cJr=r(xGt,"FlaxDistilBertForTokenClassification"),xGt.forEach(t),fJr=r(MOe," (DistilBERT model)"),MOe.forEach(t),mJr=i(To),V0=n(To,"LI",{});var EOe=s(V0);h0e=n(EOe,"STRONG",{});var $Gt=s(h0e);gJr=r($Gt,"electra"),$Gt.forEach(t),hJr=r(EOe," \u2014 "),Foe=n(EOe,"A",{href:!0});var kGt=s(Foe);pJr=r(kGt,"FlaxElectraForTokenClassification"),kGt.forEach(t),_Jr=r(EOe," (ELECTRA model)"),EOe.forEach(t),uJr=i(To),X0=n(To,"LI",{});var COe=s(X0);p0e=n(COe,"STRONG",{});var SGt=s(p0e);bJr=r(SGt,"roberta"),SGt.forEach(t),vJr=r(COe," \u2014 "),Toe=n(COe,"A",{href:!0});var RGt=s(Toe);FJr=r(RGt,"FlaxRobertaForTokenClassification"),RGt.forEach(t),TJr=r(COe," (RoBERTa model)"),COe.forEach(t),MJr=i(To),z0=n(To,"LI",{});var wOe=s(z0);_0e=n(wOe,"STRONG",{});var PGt=s(_0e);EJr=r(PGt,"roformer"),PGt.forEach(t),CJr=r(wOe," \u2014 "),Moe=n(wOe,"A",{href:!0});var BGt=s(Moe);wJr=r(BGt,"FlaxRoFormerForTokenClassification"),BGt.forEach(t),AJr=r(wOe," (RoFormer model)"),wOe.forEach(t),LJr=i(To),Q0=n(To,"LI",{});var AOe=s(Q0);u0e=n(AOe,"STRONG",{});var IGt=s(u0e);yJr=r(IGt,"xlm-roberta"),IGt.forEach(t),xJr=r(AOe," \u2014 "),Eoe=n(AOe,"A",{href:!0});var NGt=s(Eoe);$Jr=r(NGt,"FlaxXLMRobertaForTokenClassification"),NGt.forEach(t),kJr=r(AOe," (XLM-RoBERTa model)"),AOe.forEach(t),To.forEach(t),SJr=i(hi),T(W0.$$.fragment,hi),hi.forEach(t),gi.forEach(t),IXe=i(f),pf=n(f,"H2",{class:!0});var zQe=s(pf);H0=n(zQe,"A",{id:!0,class:!0,href:!0});var qGt=s(H0);b0e=n(qGt,"SPAN",{});var jGt=s(b0e);T(k$.$$.fragment,jGt),jGt.forEach(t),qGt.forEach(t),RJr=i(zQe),v0e=n(zQe,"SPAN",{});var DGt=s(v0e);PJr=r(DGt,"FlaxAutoModelForMultipleChoice"),DGt.forEach(t),zQe.forEach(t),NXe=i(f),Mr=n(f,"DIV",{class:!0});var pi=s(Mr);T(S$.$$.fragment,pi),BJr=i(pi),_f=n(pi,"P",{});var Pte=s(_f);IJr=r(Pte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Coe=n(Pte,"A",{href:!0});var GGt=s(Coe);NJr=r(GGt,"from_pretrained()"),GGt.forEach(t),qJr=r(Pte," class method or the "),woe=n(Pte,"A",{href:!0});var OGt=s(woe);jJr=r(OGt,"from_config()"),OGt.forEach(t),DJr=r(Pte,` class
method.`),Pte.forEach(t),GJr=i(pi),R$=n(pi,"P",{});var QQe=s(R$);OJr=r(QQe,"This class cannot be instantiated directly using "),F0e=n(QQe,"CODE",{});var VGt=s(F0e);VJr=r(VGt,"__init__()"),VGt.forEach(t),XJr=r(QQe," (throws an error)."),QQe.forEach(t),zJr=i(pi),Kt=n(pi,"DIV",{class:!0});var $6=s(Kt);T(P$.$$.fragment,$6),QJr=i($6),T0e=n($6,"P",{});var XGt=s(T0e);WJr=r(XGt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),XGt.forEach(t),HJr=i($6),uf=n($6,"P",{});var Bte=s(uf);UJr=r(Bte,`Note:
Loading a model from its configuration file does `),M0e=n(Bte,"STRONG",{});var zGt=s(M0e);JJr=r(zGt,"not"),zGt.forEach(t),YJr=r(Bte,` load the model weights. It only affects the
model\u2019s configuration. Use `),Aoe=n(Bte,"A",{href:!0});var QGt=s(Aoe);KJr=r(QGt,"from_pretrained()"),QGt.forEach(t),ZJr=r(Bte," to load the model weights."),Bte.forEach(t),eYr=i($6),T(U0.$$.fragment,$6),$6.forEach(t),oYr=i(pi),Jr=n(pi,"DIV",{class:!0});var _i=s(Jr);T(B$.$$.fragment,_i),rYr=i(_i),E0e=n(_i,"P",{});var WGt=s(E0e);tYr=r(WGt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),WGt.forEach(t),aYr=i(_i),yn=n(_i,"P",{});var k6=s(yn);nYr=r(k6,"The model class to instantiate is selected based on the "),C0e=n(k6,"CODE",{});var HGt=s(C0e);sYr=r(HGt,"model_type"),HGt.forEach(t),lYr=r(k6,` property of the config object (either
passed as an argument or loaded from `),w0e=n(k6,"CODE",{});var UGt=s(w0e);iYr=r(UGt,"pretrained_model_name_or_path"),UGt.forEach(t),dYr=r(k6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A0e=n(k6,"CODE",{});var JGt=s(A0e);cYr=r(JGt,"pretrained_model_name_or_path"),JGt.forEach(t),fYr=r(k6,":"),k6.forEach(t),mYr=i(_i),Xe=n(_i,"UL",{});var Mo=s(Xe);J0=n(Mo,"LI",{});var LOe=s(J0);L0e=n(LOe,"STRONG",{});var YGt=s(L0e);gYr=r(YGt,"albert"),YGt.forEach(t),hYr=r(LOe," \u2014 "),Loe=n(LOe,"A",{href:!0});var KGt=s(Loe);pYr=r(KGt,"FlaxAlbertForMultipleChoice"),KGt.forEach(t),_Yr=r(LOe," (ALBERT model)"),LOe.forEach(t),uYr=i(Mo),Y0=n(Mo,"LI",{});var yOe=s(Y0);y0e=n(yOe,"STRONG",{});var ZGt=s(y0e);bYr=r(ZGt,"bert"),ZGt.forEach(t),vYr=r(yOe," \u2014 "),yoe=n(yOe,"A",{href:!0});var eOt=s(yoe);FYr=r(eOt,"FlaxBertForMultipleChoice"),eOt.forEach(t),TYr=r(yOe," (BERT model)"),yOe.forEach(t),MYr=i(Mo),K0=n(Mo,"LI",{});var xOe=s(K0);x0e=n(xOe,"STRONG",{});var oOt=s(x0e);EYr=r(oOt,"big_bird"),oOt.forEach(t),CYr=r(xOe," \u2014 "),xoe=n(xOe,"A",{href:!0});var rOt=s(xoe);wYr=r(rOt,"FlaxBigBirdForMultipleChoice"),rOt.forEach(t),AYr=r(xOe," (BigBird model)"),xOe.forEach(t),LYr=i(Mo),Z0=n(Mo,"LI",{});var $Oe=s(Z0);$0e=n($Oe,"STRONG",{});var tOt=s($0e);yYr=r(tOt,"distilbert"),tOt.forEach(t),xYr=r($Oe," \u2014 "),$oe=n($Oe,"A",{href:!0});var aOt=s($oe);$Yr=r(aOt,"FlaxDistilBertForMultipleChoice"),aOt.forEach(t),kYr=r($Oe," (DistilBERT model)"),$Oe.forEach(t),SYr=i(Mo),ew=n(Mo,"LI",{});var kOe=s(ew);k0e=n(kOe,"STRONG",{});var nOt=s(k0e);RYr=r(nOt,"electra"),nOt.forEach(t),PYr=r(kOe," \u2014 "),koe=n(kOe,"A",{href:!0});var sOt=s(koe);BYr=r(sOt,"FlaxElectraForMultipleChoice"),sOt.forEach(t),IYr=r(kOe," (ELECTRA model)"),kOe.forEach(t),NYr=i(Mo),ow=n(Mo,"LI",{});var SOe=s(ow);S0e=n(SOe,"STRONG",{});var lOt=s(S0e);qYr=r(lOt,"roberta"),lOt.forEach(t),jYr=r(SOe," \u2014 "),Soe=n(SOe,"A",{href:!0});var iOt=s(Soe);DYr=r(iOt,"FlaxRobertaForMultipleChoice"),iOt.forEach(t),GYr=r(SOe," (RoBERTa model)"),SOe.forEach(t),OYr=i(Mo),rw=n(Mo,"LI",{});var ROe=s(rw);R0e=n(ROe,"STRONG",{});var dOt=s(R0e);VYr=r(dOt,"roformer"),dOt.forEach(t),XYr=r(ROe," \u2014 "),Roe=n(ROe,"A",{href:!0});var cOt=s(Roe);zYr=r(cOt,"FlaxRoFormerForMultipleChoice"),cOt.forEach(t),QYr=r(ROe," (RoFormer model)"),ROe.forEach(t),WYr=i(Mo),tw=n(Mo,"LI",{});var POe=s(tw);P0e=n(POe,"STRONG",{});var fOt=s(P0e);HYr=r(fOt,"xlm-roberta"),fOt.forEach(t),UYr=r(POe," \u2014 "),Poe=n(POe,"A",{href:!0});var mOt=s(Poe);JYr=r(mOt,"FlaxXLMRobertaForMultipleChoice"),mOt.forEach(t),YYr=r(POe," (XLM-RoBERTa model)"),POe.forEach(t),Mo.forEach(t),KYr=i(_i),T(aw.$$.fragment,_i),_i.forEach(t),pi.forEach(t),qXe=i(f),bf=n(f,"H2",{class:!0});var WQe=s(bf);nw=n(WQe,"A",{id:!0,class:!0,href:!0});var gOt=s(nw);B0e=n(gOt,"SPAN",{});var hOt=s(B0e);T(I$.$$.fragment,hOt),hOt.forEach(t),gOt.forEach(t),ZYr=i(WQe),I0e=n(WQe,"SPAN",{});var pOt=s(I0e);eKr=r(pOt,"FlaxAutoModelForNextSentencePrediction"),pOt.forEach(t),WQe.forEach(t),jXe=i(f),Er=n(f,"DIV",{class:!0});var ui=s(Er);T(N$.$$.fragment,ui),oKr=i(ui),vf=n(ui,"P",{});var Ite=s(vf);rKr=r(Ite,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Boe=n(Ite,"A",{href:!0});var _Ot=s(Boe);tKr=r(_Ot,"from_pretrained()"),_Ot.forEach(t),aKr=r(Ite," class method or the "),Ioe=n(Ite,"A",{href:!0});var uOt=s(Ioe);nKr=r(uOt,"from_config()"),uOt.forEach(t),sKr=r(Ite,` class
method.`),Ite.forEach(t),lKr=i(ui),q$=n(ui,"P",{});var HQe=s(q$);iKr=r(HQe,"This class cannot be instantiated directly using "),N0e=n(HQe,"CODE",{});var bOt=s(N0e);dKr=r(bOt,"__init__()"),bOt.forEach(t),cKr=r(HQe," (throws an error)."),HQe.forEach(t),fKr=i(ui),Zt=n(ui,"DIV",{class:!0});var S6=s(Zt);T(j$.$$.fragment,S6),mKr=i(S6),q0e=n(S6,"P",{});var vOt=s(q0e);gKr=r(vOt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),vOt.forEach(t),hKr=i(S6),Ff=n(S6,"P",{});var Nte=s(Ff);pKr=r(Nte,`Note:
Loading a model from its configuration file does `),j0e=n(Nte,"STRONG",{});var FOt=s(j0e);_Kr=r(FOt,"not"),FOt.forEach(t),uKr=r(Nte,` load the model weights. It only affects the
model\u2019s configuration. Use `),Noe=n(Nte,"A",{href:!0});var TOt=s(Noe);bKr=r(TOt,"from_pretrained()"),TOt.forEach(t),vKr=r(Nte," to load the model weights."),Nte.forEach(t),FKr=i(S6),T(sw.$$.fragment,S6),S6.forEach(t),TKr=i(ui),Yr=n(ui,"DIV",{class:!0});var bi=s(Yr);T(D$.$$.fragment,bi),MKr=i(bi),D0e=n(bi,"P",{});var MOt=s(D0e);EKr=r(MOt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),MOt.forEach(t),CKr=i(bi),xn=n(bi,"P",{});var R6=s(xn);wKr=r(R6,"The model class to instantiate is selected based on the "),G0e=n(R6,"CODE",{});var EOt=s(G0e);AKr=r(EOt,"model_type"),EOt.forEach(t),LKr=r(R6,` property of the config object (either
passed as an argument or loaded from `),O0e=n(R6,"CODE",{});var COt=s(O0e);yKr=r(COt,"pretrained_model_name_or_path"),COt.forEach(t),xKr=r(R6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V0e=n(R6,"CODE",{});var wOt=s(V0e);$Kr=r(wOt,"pretrained_model_name_or_path"),wOt.forEach(t),kKr=r(R6,":"),R6.forEach(t),SKr=i(bi),X0e=n(bi,"UL",{});var AOt=s(X0e);lw=n(AOt,"LI",{});var BOe=s(lw);z0e=n(BOe,"STRONG",{});var LOt=s(z0e);RKr=r(LOt,"bert"),LOt.forEach(t),PKr=r(BOe," \u2014 "),qoe=n(BOe,"A",{href:!0});var yOt=s(qoe);BKr=r(yOt,"FlaxBertForNextSentencePrediction"),yOt.forEach(t),IKr=r(BOe," (BERT model)"),BOe.forEach(t),AOt.forEach(t),NKr=i(bi),T(iw.$$.fragment,bi),bi.forEach(t),ui.forEach(t),DXe=i(f),Tf=n(f,"H2",{class:!0});var UQe=s(Tf);dw=n(UQe,"A",{id:!0,class:!0,href:!0});var xOt=s(dw);Q0e=n(xOt,"SPAN",{});var $Ot=s(Q0e);T(G$.$$.fragment,$Ot),$Ot.forEach(t),xOt.forEach(t),qKr=i(UQe),W0e=n(UQe,"SPAN",{});var kOt=s(W0e);jKr=r(kOt,"FlaxAutoModelForImageClassification"),kOt.forEach(t),UQe.forEach(t),GXe=i(f),Cr=n(f,"DIV",{class:!0});var vi=s(Cr);T(O$.$$.fragment,vi),DKr=i(vi),Mf=n(vi,"P",{});var qte=s(Mf);GKr=r(qte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),joe=n(qte,"A",{href:!0});var SOt=s(joe);OKr=r(SOt,"from_pretrained()"),SOt.forEach(t),VKr=r(qte," class method or the "),Doe=n(qte,"A",{href:!0});var ROt=s(Doe);XKr=r(ROt,"from_config()"),ROt.forEach(t),zKr=r(qte,` class
method.`),qte.forEach(t),QKr=i(vi),V$=n(vi,"P",{});var JQe=s(V$);WKr=r(JQe,"This class cannot be instantiated directly using "),H0e=n(JQe,"CODE",{});var POt=s(H0e);HKr=r(POt,"__init__()"),POt.forEach(t),UKr=r(JQe," (throws an error)."),JQe.forEach(t),JKr=i(vi),ea=n(vi,"DIV",{class:!0});var P6=s(ea);T(X$.$$.fragment,P6),YKr=i(P6),U0e=n(P6,"P",{});var BOt=s(U0e);KKr=r(BOt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),BOt.forEach(t),ZKr=i(P6),Ef=n(P6,"P",{});var jte=s(Ef);eZr=r(jte,`Note:
Loading a model from its configuration file does `),J0e=n(jte,"STRONG",{});var IOt=s(J0e);oZr=r(IOt,"not"),IOt.forEach(t),rZr=r(jte,` load the model weights. It only affects the
model\u2019s configuration. Use `),Goe=n(jte,"A",{href:!0});var NOt=s(Goe);tZr=r(NOt,"from_pretrained()"),NOt.forEach(t),aZr=r(jte," to load the model weights."),jte.forEach(t),nZr=i(P6),T(cw.$$.fragment,P6),P6.forEach(t),sZr=i(vi),Kr=n(vi,"DIV",{class:!0});var Fi=s(Kr);T(z$.$$.fragment,Fi),lZr=i(Fi),Y0e=n(Fi,"P",{});var qOt=s(Y0e);iZr=r(qOt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),qOt.forEach(t),dZr=i(Fi),$n=n(Fi,"P",{});var B6=s($n);cZr=r(B6,"The model class to instantiate is selected based on the "),K0e=n(B6,"CODE",{});var jOt=s(K0e);fZr=r(jOt,"model_type"),jOt.forEach(t),mZr=r(B6,` property of the config object (either
passed as an argument or loaded from `),Z0e=n(B6,"CODE",{});var DOt=s(Z0e);gZr=r(DOt,"pretrained_model_name_or_path"),DOt.forEach(t),hZr=r(B6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ewe=n(B6,"CODE",{});var GOt=s(ewe);pZr=r(GOt,"pretrained_model_name_or_path"),GOt.forEach(t),_Zr=r(B6,":"),B6.forEach(t),uZr=i(Fi),Q$=n(Fi,"UL",{});var YQe=s(Q$);fw=n(YQe,"LI",{});var IOe=s(fw);owe=n(IOe,"STRONG",{});var OOt=s(owe);bZr=r(OOt,"beit"),OOt.forEach(t),vZr=r(IOe," \u2014 "),Ooe=n(IOe,"A",{href:!0});var VOt=s(Ooe);FZr=r(VOt,"FlaxBeitForImageClassification"),VOt.forEach(t),TZr=r(IOe," (BEiT model)"),IOe.forEach(t),MZr=i(YQe),mw=n(YQe,"LI",{});var NOe=s(mw);rwe=n(NOe,"STRONG",{});var XOt=s(rwe);EZr=r(XOt,"vit"),XOt.forEach(t),CZr=r(NOe," \u2014 "),Voe=n(NOe,"A",{href:!0});var zOt=s(Voe);wZr=r(zOt,"FlaxViTForImageClassification"),zOt.forEach(t),AZr=r(NOe," (ViT model)"),NOe.forEach(t),YQe.forEach(t),LZr=i(Fi),T(gw.$$.fragment,Fi),Fi.forEach(t),vi.forEach(t),OXe=i(f),Cf=n(f,"H2",{class:!0});var KQe=s(Cf);hw=n(KQe,"A",{id:!0,class:!0,href:!0});var QOt=s(hw);twe=n(QOt,"SPAN",{});var WOt=s(twe);T(W$.$$.fragment,WOt),WOt.forEach(t),QOt.forEach(t),yZr=i(KQe),awe=n(KQe,"SPAN",{});var HOt=s(awe);xZr=r(HOt,"FlaxAutoModelForVision2Seq"),HOt.forEach(t),KQe.forEach(t),VXe=i(f),wr=n(f,"DIV",{class:!0});var Ti=s(wr);T(H$.$$.fragment,Ti),$Zr=i(Ti),wf=n(Ti,"P",{});var Dte=s(wf);kZr=r(Dte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Xoe=n(Dte,"A",{href:!0});var UOt=s(Xoe);SZr=r(UOt,"from_pretrained()"),UOt.forEach(t),RZr=r(Dte," class method or the "),zoe=n(Dte,"A",{href:!0});var JOt=s(zoe);PZr=r(JOt,"from_config()"),JOt.forEach(t),BZr=r(Dte,` class
method.`),Dte.forEach(t),IZr=i(Ti),U$=n(Ti,"P",{});var ZQe=s(U$);NZr=r(ZQe,"This class cannot be instantiated directly using "),nwe=n(ZQe,"CODE",{});var YOt=s(nwe);qZr=r(YOt,"__init__()"),YOt.forEach(t),jZr=r(ZQe," (throws an error)."),ZQe.forEach(t),DZr=i(Ti),oa=n(Ti,"DIV",{class:!0});var I6=s(oa);T(J$.$$.fragment,I6),GZr=i(I6),swe=n(I6,"P",{});var KOt=s(swe);OZr=r(KOt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),KOt.forEach(t),VZr=i(I6),Af=n(I6,"P",{});var Gte=s(Af);XZr=r(Gte,`Note:
Loading a model from its configuration file does `),lwe=n(Gte,"STRONG",{});var ZOt=s(lwe);zZr=r(ZOt,"not"),ZOt.forEach(t),QZr=r(Gte,` load the model weights. It only affects the
model\u2019s configuration. Use `),Qoe=n(Gte,"A",{href:!0});var eVt=s(Qoe);WZr=r(eVt,"from_pretrained()"),eVt.forEach(t),HZr=r(Gte," to load the model weights."),Gte.forEach(t),UZr=i(I6),T(pw.$$.fragment,I6),I6.forEach(t),JZr=i(Ti),Zr=n(Ti,"DIV",{class:!0});var Mi=s(Zr);T(Y$.$$.fragment,Mi),YZr=i(Mi),iwe=n(Mi,"P",{});var oVt=s(iwe);KZr=r(oVt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),oVt.forEach(t),ZZr=i(Mi),kn=n(Mi,"P",{});var N6=s(kn);eet=r(N6,"The model class to instantiate is selected based on the "),dwe=n(N6,"CODE",{});var rVt=s(dwe);oet=r(rVt,"model_type"),rVt.forEach(t),ret=r(N6,` property of the config object (either
passed as an argument or loaded from `),cwe=n(N6,"CODE",{});var tVt=s(cwe);tet=r(tVt,"pretrained_model_name_or_path"),tVt.forEach(t),aet=r(N6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fwe=n(N6,"CODE",{});var aVt=s(fwe);net=r(aVt,"pretrained_model_name_or_path"),aVt.forEach(t),set=r(N6,":"),N6.forEach(t),iet=i(Mi),mwe=n(Mi,"UL",{});var nVt=s(mwe);_w=n(nVt,"LI",{});var qOe=s(_w);gwe=n(qOe,"STRONG",{});var sVt=s(gwe);det=r(sVt,"vision-encoder-decoder"),sVt.forEach(t),cet=r(qOe," \u2014 "),Woe=n(qOe,"A",{href:!0});var lVt=s(Woe);fet=r(lVt,"FlaxVisionEncoderDecoderModel"),lVt.forEach(t),met=r(qOe," (Vision Encoder decoder model)"),qOe.forEach(t),nVt.forEach(t),get=i(Mi),T(uw.$$.fragment,Mi),Mi.forEach(t),Ti.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(gzt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Rn,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.AutoConfig"),c(Bn,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.AutoModel"),c(In,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.AutoTokenizer"),c(xi,"href","/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertModel"),c(Pf,"id","extending-the-auto-classes"),c(Pf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Pf,"href","#extending-the-auto-classes"),c($i,"class","relative group"),c(If,"id","transformers.AutoConfig"),c(If,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(If,"href","#transformers.AutoConfig"),c(ki,"class","relative group"),c(ES,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(CS,"href","/docs/transformers/pr_17787/en/model_doc/albert#transformers.AlbertConfig"),c(wS,"href","/docs/transformers/pr_17787/en/model_doc/bart#transformers.BartConfig"),c(AS,"href","/docs/transformers/pr_17787/en/model_doc/beit#transformers.BeitConfig"),c(LS,"href","/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertConfig"),c(yS,"href","/docs/transformers/pr_17787/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(xS,"href","/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.BigBirdConfig"),c($S,"href","/docs/transformers/pr_17787/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(kS,"href","/docs/transformers/pr_17787/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(SS,"href","/docs/transformers/pr_17787/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(RS,"href","/docs/transformers/pr_17787/en/model_doc/bloom#transformers.BloomConfig"),c(PS,"href","/docs/transformers/pr_17787/en/model_doc/camembert#transformers.CamembertConfig"),c(BS,"href","/docs/transformers/pr_17787/en/model_doc/canine#transformers.CanineConfig"),c(IS,"href","/docs/transformers/pr_17787/en/model_doc/clip#transformers.CLIPConfig"),c(NS,"href","/docs/transformers/pr_17787/en/model_doc/codegen#transformers.CodeGenConfig"),c(qS,"href","/docs/transformers/pr_17787/en/model_doc/convbert#transformers.ConvBertConfig"),c(jS,"href","/docs/transformers/pr_17787/en/model_doc/convnext#transformers.ConvNextConfig"),c(DS,"href","/docs/transformers/pr_17787/en/model_doc/ctrl#transformers.CTRLConfig"),c(GS,"href","/docs/transformers/pr_17787/en/model_doc/cvt#transformers.CvtConfig"),c(OS,"href","/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(VS,"href","/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(XS,"href","/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(zS,"href","/docs/transformers/pr_17787/en/model_doc/deberta#transformers.DebertaConfig"),c(QS,"href","/docs/transformers/pr_17787/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(WS,"href","/docs/transformers/pr_17787/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(HS,"href","/docs/transformers/pr_17787/en/model_doc/deit#transformers.DeiTConfig"),c(US,"href","/docs/transformers/pr_17787/en/model_doc/detr#transformers.DetrConfig"),c(JS,"href","/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.DistilBertConfig"),c(YS,"href","/docs/transformers/pr_17787/en/model_doc/dpr#transformers.DPRConfig"),c(KS,"href","/docs/transformers/pr_17787/en/model_doc/dpt#transformers.DPTConfig"),c(ZS,"href","/docs/transformers/pr_17787/en/model_doc/electra#transformers.ElectraConfig"),c(eR,"href","/docs/transformers/pr_17787/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(oR,"href","/docs/transformers/pr_17787/en/model_doc/flaubert#transformers.FlaubertConfig"),c(rR,"href","/docs/transformers/pr_17787/en/model_doc/flava#transformers.FlavaConfig"),c(tR,"href","/docs/transformers/pr_17787/en/model_doc/fnet#transformers.FNetConfig"),c(aR,"href","/docs/transformers/pr_17787/en/model_doc/fsmt#transformers.FSMTConfig"),c(nR,"href","/docs/transformers/pr_17787/en/model_doc/funnel#transformers.FunnelConfig"),c(sR,"href","/docs/transformers/pr_17787/en/model_doc/glpn#transformers.GLPNConfig"),c(lR,"href","/docs/transformers/pr_17787/en/model_doc/gpt2#transformers.GPT2Config"),c(iR,"href","/docs/transformers/pr_17787/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(dR,"href","/docs/transformers/pr_17787/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(cR,"href","/docs/transformers/pr_17787/en/model_doc/gptj#transformers.GPTJConfig"),c(fR,"href","/docs/transformers/pr_17787/en/model_doc/hubert#transformers.HubertConfig"),c(mR,"href","/docs/transformers/pr_17787/en/model_doc/ibert#transformers.IBertConfig"),c(gR,"href","/docs/transformers/pr_17787/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(hR,"href","/docs/transformers/pr_17787/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(pR,"href","/docs/transformers/pr_17787/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(_R,"href","/docs/transformers/pr_17787/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(uR,"href","/docs/transformers/pr_17787/en/model_doc/led#transformers.LEDConfig"),c(bR,"href","/docs/transformers/pr_17787/en/model_doc/levit#transformers.LevitConfig"),c(vR,"href","/docs/transformers/pr_17787/en/model_doc/longformer#transformers.LongformerConfig"),c(FR,"href","/docs/transformers/pr_17787/en/model_doc/longt5#transformers.LongT5Config"),c(TR,"href","/docs/transformers/pr_17787/en/model_doc/luke#transformers.LukeConfig"),c(MR,"href","/docs/transformers/pr_17787/en/model_doc/lxmert#transformers.LxmertConfig"),c(ER,"href","/docs/transformers/pr_17787/en/model_doc/m2m_100#transformers.M2M100Config"),c(CR,"href","/docs/transformers/pr_17787/en/model_doc/marian#transformers.MarianConfig"),c(wR,"href","/docs/transformers/pr_17787/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(AR,"href","/docs/transformers/pr_17787/en/model_doc/mbart#transformers.MBartConfig"),c(LR,"href","/docs/transformers/pr_17787/en/model_doc/mctct#transformers.MCTCTConfig"),c(yR,"href","/docs/transformers/pr_17787/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(xR,"href","/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.MobileBertConfig"),c($R,"href","/docs/transformers/pr_17787/en/model_doc/mpnet#transformers.MPNetConfig"),c(kR,"href","/docs/transformers/pr_17787/en/model_doc/mt5#transformers.MT5Config"),c(SR,"href","/docs/transformers/pr_17787/en/model_doc/mvp#transformers.MvpConfig"),c(RR,"href","/docs/transformers/pr_17787/en/model_doc/nezha#transformers.NezhaConfig"),c(PR,"href","/docs/transformers/pr_17787/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(BR,"href","/docs/transformers/pr_17787/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(IR,"href","/docs/transformers/pr_17787/en/model_doc/opt#transformers.OPTConfig"),c(NR,"href","/docs/transformers/pr_17787/en/model_doc/pegasus#transformers.PegasusConfig"),c(qR,"href","/docs/transformers/pr_17787/en/model_doc/perceiver#transformers.PerceiverConfig"),c(jR,"href","/docs/transformers/pr_17787/en/model_doc/plbart#transformers.PLBartConfig"),c(DR,"href","/docs/transformers/pr_17787/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(GR,"href","/docs/transformers/pr_17787/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(OR,"href","/docs/transformers/pr_17787/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(VR,"href","/docs/transformers/pr_17787/en/model_doc/rag#transformers.RagConfig"),c(XR,"href","/docs/transformers/pr_17787/en/model_doc/realm#transformers.RealmConfig"),c(zR,"href","/docs/transformers/pr_17787/en/model_doc/reformer#transformers.ReformerConfig"),c(QR,"href","/docs/transformers/pr_17787/en/model_doc/regnet#transformers.RegNetConfig"),c(WR,"href","/docs/transformers/pr_17787/en/model_doc/rembert#transformers.RemBertConfig"),c(HR,"href","/docs/transformers/pr_17787/en/model_doc/resnet#transformers.ResNetConfig"),c(UR,"href","/docs/transformers/pr_17787/en/model_doc/retribert#transformers.RetriBertConfig"),c(JR,"href","/docs/transformers/pr_17787/en/model_doc/roberta#transformers.RobertaConfig"),c(YR,"href","/docs/transformers/pr_17787/en/model_doc/roformer#transformers.RoFormerConfig"),c(KR,"href","/docs/transformers/pr_17787/en/model_doc/segformer#transformers.SegformerConfig"),c(ZR,"href","/docs/transformers/pr_17787/en/model_doc/sew#transformers.SEWConfig"),c(eP,"href","/docs/transformers/pr_17787/en/model_doc/sew-d#transformers.SEWDConfig"),c(oP,"href","/docs/transformers/pr_17787/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(rP,"href","/docs/transformers/pr_17787/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(tP,"href","/docs/transformers/pr_17787/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(aP,"href","/docs/transformers/pr_17787/en/model_doc/splinter#transformers.SplinterConfig"),c(nP,"href","/docs/transformers/pr_17787/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(sP,"href","/docs/transformers/pr_17787/en/model_doc/swin#transformers.SwinConfig"),c(lP,"href","/docs/transformers/pr_17787/en/model_doc/t5#transformers.T5Config"),c(iP,"href","/docs/transformers/pr_17787/en/model_doc/tapas#transformers.TapasConfig"),c(dP,"href","/docs/transformers/pr_17787/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(cP,"href","/docs/transformers/pr_17787/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(fP,"href","/docs/transformers/pr_17787/en/model_doc/trocr#transformers.TrOCRConfig"),c(mP,"href","/docs/transformers/pr_17787/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(gP,"href","/docs/transformers/pr_17787/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(hP,"href","/docs/transformers/pr_17787/en/model_doc/van#transformers.VanConfig"),c(pP,"href","/docs/transformers/pr_17787/en/model_doc/vilt#transformers.ViltConfig"),c(_P,"href","/docs/transformers/pr_17787/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(uP,"href","/docs/transformers/pr_17787/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(bP,"href","/docs/transformers/pr_17787/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(vP,"href","/docs/transformers/pr_17787/en/model_doc/vit#transformers.ViTConfig"),c(FP,"href","/docs/transformers/pr_17787/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(TP,"href","/docs/transformers/pr_17787/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(MP,"href","/docs/transformers/pr_17787/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(EP,"href","/docs/transformers/pr_17787/en/model_doc/wavlm#transformers.WavLMConfig"),c(CP,"href","/docs/transformers/pr_17787/en/model_doc/xglm#transformers.XGLMConfig"),c(wP,"href","/docs/transformers/pr_17787/en/model_doc/xlm#transformers.XLMConfig"),c(AP,"href","/docs/transformers/pr_17787/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(LP,"href","/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(yP,"href","/docs/transformers/pr_17787/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(xP,"href","/docs/transformers/pr_17787/en/model_doc/xlnet#transformers.XLNetConfig"),c($P,"href","/docs/transformers/pr_17787/en/model_doc/yolos#transformers.YolosConfig"),c(kP,"href","/docs/transformers/pr_17787/en/model_doc/yoso#transformers.YosoConfig"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wg,"id","transformers.AutoTokenizer"),c(Wg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Wg,"href","#transformers.AutoTokenizer"),c(Ri,"class","relative group"),c(SP,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(RP,"href","/docs/transformers/pr_17787/en/model_doc/albert#transformers.AlbertTokenizer"),c(PP,"href","/docs/transformers/pr_17787/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(BP,"href","/docs/transformers/pr_17787/en/model_doc/bart#transformers.BartTokenizer"),c(IP,"href","/docs/transformers/pr_17787/en/model_doc/bart#transformers.BartTokenizerFast"),c(NP,"href","/docs/transformers/pr_17787/en/model_doc/barthez#transformers.BarthezTokenizer"),c(qP,"href","/docs/transformers/pr_17787/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(jP,"href","/docs/transformers/pr_17787/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(DP,"href","/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertTokenizer"),c(GP,"href","/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertTokenizerFast"),c(OP,"href","/docs/transformers/pr_17787/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(VP,"href","/docs/transformers/pr_17787/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(XP,"href","/docs/transformers/pr_17787/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(zP,"href","/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(QP,"href","/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(WP,"href","/docs/transformers/pr_17787/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(HP,"href","/docs/transformers/pr_17787/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(UP,"href","/docs/transformers/pr_17787/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(JP,"href","/docs/transformers/pr_17787/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(YP,"href","/docs/transformers/pr_17787/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(KP,"href","/docs/transformers/pr_17787/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(ZP,"href","/docs/transformers/pr_17787/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(eB,"href","/docs/transformers/pr_17787/en/model_doc/camembert#transformers.CamembertTokenizer"),c(oB,"href","/docs/transformers/pr_17787/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(rB,"href","/docs/transformers/pr_17787/en/model_doc/canine#transformers.CanineTokenizer"),c(tB,"href","/docs/transformers/pr_17787/en/model_doc/clip#transformers.CLIPTokenizer"),c(aB,"href","/docs/transformers/pr_17787/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(nB,"href","/docs/transformers/pr_17787/en/model_doc/codegen#transformers.CodeGenTokenizer"),c(sB,"href","/docs/transformers/pr_17787/en/model_doc/codegen#transformers.CodeGenTokenizerFast"),c(lB,"href","/docs/transformers/pr_17787/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(iB,"href","/docs/transformers/pr_17787/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(dB,"href","/docs/transformers/pr_17787/en/model_doc/cpm#transformers.CpmTokenizer"),c(cB,"href","/docs/transformers/pr_17787/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(fB,"href","/docs/transformers/pr_17787/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(mB,"href","/docs/transformers/pr_17787/en/model_doc/roberta#transformers.RobertaTokenizer"),c(gB,"href","/docs/transformers/pr_17787/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(hB,"href","/docs/transformers/pr_17787/en/model_doc/deberta#transformers.DebertaTokenizer"),c(pB,"href","/docs/transformers/pr_17787/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(_B,"href","/docs/transformers/pr_17787/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(uB,"href","/docs/transformers/pr_17787/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(bB,"href","/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(vB,"href","/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(FB,"href","/docs/transformers/pr_17787/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(TB,"href","/docs/transformers/pr_17787/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(MB,"href","/docs/transformers/pr_17787/en/model_doc/electra#transformers.ElectraTokenizer"),c(EB,"href","/docs/transformers/pr_17787/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(CB,"href","/docs/transformers/pr_17787/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(wB,"href","/docs/transformers/pr_17787/en/model_doc/fnet#transformers.FNetTokenizer"),c(AB,"href","/docs/transformers/pr_17787/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(LB,"href","/docs/transformers/pr_17787/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(yB,"href","/docs/transformers/pr_17787/en/model_doc/funnel#transformers.FunnelTokenizer"),c(xB,"href","/docs/transformers/pr_17787/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c($B,"href","/docs/transformers/pr_17787/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(kB,"href","/docs/transformers/pr_17787/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(SB,"href","/docs/transformers/pr_17787/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(RB,"href","/docs/transformers/pr_17787/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(PB,"href","/docs/transformers/pr_17787/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(BB,"href","/docs/transformers/pr_17787/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(IB,"href","/docs/transformers/pr_17787/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(NB,"href","/docs/transformers/pr_17787/en/model_doc/herbert#transformers.HerbertTokenizer"),c(qB,"href","/docs/transformers/pr_17787/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(jB,"href","/docs/transformers/pr_17787/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(DB,"href","/docs/transformers/pr_17787/en/model_doc/roberta#transformers.RobertaTokenizer"),c(GB,"href","/docs/transformers/pr_17787/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(OB,"href","/docs/transformers/pr_17787/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(VB,"href","/docs/transformers/pr_17787/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(XB,"href","/docs/transformers/pr_17787/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(zB,"href","/docs/transformers/pr_17787/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(QB,"href","/docs/transformers/pr_17787/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(WB,"href","/docs/transformers/pr_17787/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(HB,"href","/docs/transformers/pr_17787/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(UB,"href","/docs/transformers/pr_17787/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(JB,"href","/docs/transformers/pr_17787/en/model_doc/led#transformers.LEDTokenizer"),c(YB,"href","/docs/transformers/pr_17787/en/model_doc/led#transformers.LEDTokenizerFast"),c(KB,"href","/docs/transformers/pr_17787/en/model_doc/longformer#transformers.LongformerTokenizer"),c(ZB,"href","/docs/transformers/pr_17787/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(eI,"href","/docs/transformers/pr_17787/en/model_doc/t5#transformers.T5Tokenizer"),c(oI,"href","/docs/transformers/pr_17787/en/model_doc/t5#transformers.T5TokenizerFast"),c(rI,"href","/docs/transformers/pr_17787/en/model_doc/luke#transformers.LukeTokenizer"),c(tI,"href","/docs/transformers/pr_17787/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(aI,"href","/docs/transformers/pr_17787/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(nI,"href","/docs/transformers/pr_17787/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(sI,"href","/docs/transformers/pr_17787/en/model_doc/marian#transformers.MarianTokenizer"),c(lI,"href","/docs/transformers/pr_17787/en/model_doc/mbart#transformers.MBartTokenizer"),c(iI,"href","/docs/transformers/pr_17787/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(dI,"href","/docs/transformers/pr_17787/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(cI,"href","/docs/transformers/pr_17787/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(fI,"href","/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertTokenizer"),c(mI,"href","/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertTokenizerFast"),c(gI,"href","/docs/transformers/pr_17787/en/model_doc/mluke#transformers.MLukeTokenizer"),c(hI,"href","/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(pI,"href","/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(_I,"href","/docs/transformers/pr_17787/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(uI,"href","/docs/transformers/pr_17787/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(bI,"href","/docs/transformers/pr_17787/en/model_doc/t5#transformers.T5Tokenizer"),c(vI,"href","/docs/transformers/pr_17787/en/model_doc/t5#transformers.T5TokenizerFast"),c(FI,"href","/docs/transformers/pr_17787/en/model_doc/mvp#transformers.MvpTokenizer"),c(TI,"href","/docs/transformers/pr_17787/en/model_doc/mvp#transformers.MvpTokenizerFast"),c(MI,"href","/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertTokenizer"),c(EI,"href","/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertTokenizerFast"),c(CI,"href","/docs/transformers/pr_17787/en/model_doc/albert#transformers.AlbertTokenizer"),c(wI,"href","/docs/transformers/pr_17787/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(AI,"href","/docs/transformers/pr_17787/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(LI,"href","/docs/transformers/pr_17787/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(yI,"href","/docs/transformers/pr_17787/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(xI,"href","/docs/transformers/pr_17787/en/model_doc/pegasus#transformers.PegasusTokenizer"),c($I,"href","/docs/transformers/pr_17787/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(kI,"href","/docs/transformers/pr_17787/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(SI,"href","/docs/transformers/pr_17787/en/model_doc/phobert#transformers.PhobertTokenizer"),c(RI,"href","/docs/transformers/pr_17787/en/model_doc/plbart#transformers.PLBartTokenizer"),c(PI,"href","/docs/transformers/pr_17787/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(BI,"href","/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertTokenizer"),c(II,"href","/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertTokenizerFast"),c(NI,"href","/docs/transformers/pr_17787/en/model_doc/rag#transformers.RagTokenizer"),c(qI,"href","/docs/transformers/pr_17787/en/model_doc/realm#transformers.RealmTokenizer"),c(jI,"href","/docs/transformers/pr_17787/en/model_doc/realm#transformers.RealmTokenizerFast"),c(DI,"href","/docs/transformers/pr_17787/en/model_doc/reformer#transformers.ReformerTokenizer"),c(GI,"href","/docs/transformers/pr_17787/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(OI,"href","/docs/transformers/pr_17787/en/model_doc/rembert#transformers.RemBertTokenizer"),c(VI,"href","/docs/transformers/pr_17787/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(XI,"href","/docs/transformers/pr_17787/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(zI,"href","/docs/transformers/pr_17787/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(QI,"href","/docs/transformers/pr_17787/en/model_doc/roberta#transformers.RobertaTokenizer"),c(WI,"href","/docs/transformers/pr_17787/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(HI,"href","/docs/transformers/pr_17787/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(UI,"href","/docs/transformers/pr_17787/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(JI,"href","/docs/transformers/pr_17787/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(YI,"href","/docs/transformers/pr_17787/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(KI,"href","/docs/transformers/pr_17787/en/model_doc/splinter#transformers.SplinterTokenizer"),c(ZI,"href","/docs/transformers/pr_17787/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(eN,"href","/docs/transformers/pr_17787/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(oN,"href","/docs/transformers/pr_17787/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(rN,"href","/docs/transformers/pr_17787/en/model_doc/t5#transformers.T5Tokenizer"),c(tN,"href","/docs/transformers/pr_17787/en/model_doc/t5#transformers.T5TokenizerFast"),c(aN,"href","/docs/transformers/pr_17787/en/model_doc/tapas#transformers.TapasTokenizer"),c(nN,"href","/docs/transformers/pr_17787/en/model_doc/tapex#transformers.TapexTokenizer"),c(sN,"href","/docs/transformers/pr_17787/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(lN,"href","/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertTokenizer"),c(iN,"href","/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertTokenizerFast"),c(dN,"href","/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertTokenizer"),c(cN,"href","/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertTokenizerFast"),c(fN,"href","/docs/transformers/pr_17787/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(mN,"href","/docs/transformers/pr_17787/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(gN,"href","/docs/transformers/pr_17787/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(hN,"href","/docs/transformers/pr_17787/en/model_doc/xglm#transformers.XGLMTokenizer"),c(pN,"href","/docs/transformers/pr_17787/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(_N,"href","/docs/transformers/pr_17787/en/model_doc/xlm#transformers.XLMTokenizer"),c(uN,"href","/docs/transformers/pr_17787/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(bN,"href","/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(vN,"href","/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(FN,"href","/docs/transformers/pr_17787/en/model_doc/roberta#transformers.RobertaTokenizer"),c(TN,"href","/docs/transformers/pr_17787/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(MN,"href","/docs/transformers/pr_17787/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(EN,"href","/docs/transformers/pr_17787/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(CN,"href","/docs/transformers/pr_17787/en/model_doc/albert#transformers.AlbertTokenizer"),c(wN,"href","/docs/transformers/pr_17787/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xh,"id","transformers.AutoFeatureExtractor"),c(xh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xh,"href","#transformers.AutoFeatureExtractor"),c(Pi,"class","relative group"),c(AN,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(LN,"href","/docs/transformers/pr_17787/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(yN,"href","/docs/transformers/pr_17787/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(xN,"href","/docs/transformers/pr_17787/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c($N,"href","/docs/transformers/pr_17787/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(kN,"href","/docs/transformers/pr_17787/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(SN,"href","/docs/transformers/pr_17787/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(RN,"href","/docs/transformers/pr_17787/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(PN,"href","/docs/transformers/pr_17787/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(BN,"href","/docs/transformers/pr_17787/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(IN,"href","/docs/transformers/pr_17787/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(NN,"href","/docs/transformers/pr_17787/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(qN,"href","/docs/transformers/pr_17787/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(jN,"href","/docs/transformers/pr_17787/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(DN,"href","/docs/transformers/pr_17787/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(GN,"href","/docs/transformers/pr_17787/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(ON,"href","/docs/transformers/pr_17787/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(VN,"href","/docs/transformers/pr_17787/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(XN,"href","/docs/transformers/pr_17787/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(zN,"href","/docs/transformers/pr_17787/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(QN,"href","/docs/transformers/pr_17787/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(WN,"href","/docs/transformers/pr_17787/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(HN,"href","/docs/transformers/pr_17787/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(UN,"href","/docs/transformers/pr_17787/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(JN,"href","/docs/transformers/pr_17787/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(YN,"href","/docs/transformers/pr_17787/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(KN,"href","/docs/transformers/pr_17787/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(ZN,"href","/docs/transformers/pr_17787/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(eq,"href","/docs/transformers/pr_17787/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(oq,"href","/docs/transformers/pr_17787/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(rq,"href","/docs/transformers/pr_17787/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(tq,"href","/docs/transformers/pr_17787/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(aq,"href","/docs/transformers/pr_17787/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fp,"id","transformers.AutoProcessor"),c(fp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fp,"href","#transformers.AutoProcessor"),c(Bi,"class","relative group"),c(nq,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(sq,"href","/docs/transformers/pr_17787/en/model_doc/clip#transformers.CLIPProcessor"),c(lq,"href","/docs/transformers/pr_17787/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(iq,"href","/docs/transformers/pr_17787/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(dq,"href","/docs/transformers/pr_17787/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(cq,"href","/docs/transformers/pr_17787/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(fq,"href","/docs/transformers/pr_17787/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(mq,"href","/docs/transformers/pr_17787/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(gq,"href","/docs/transformers/pr_17787/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(hq,"href","/docs/transformers/pr_17787/en/model_doc/trocr#transformers.TrOCRProcessor"),c(pq,"href","/docs/transformers/pr_17787/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(_q,"href","/docs/transformers/pr_17787/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(uq,"href","/docs/transformers/pr_17787/en/model_doc/vilt#transformers.ViltProcessor"),c(bq,"href","/docs/transformers/pr_17787/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(vq,"href","/docs/transformers/pr_17787/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Fq,"href","/docs/transformers/pr_17787/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Tq,"href","/docs/transformers/pr_17787/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Sp,"id","transformers.AutoModel"),c(Sp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Sp,"href","#transformers.AutoModel"),c(Ni,"class","relative group"),c(Mq,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Eq,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Cq,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wq,"href","/docs/transformers/pr_17787/en/model_doc/albert#transformers.AlbertModel"),c(Aq,"href","/docs/transformers/pr_17787/en/model_doc/bart#transformers.BartModel"),c(Lq,"href","/docs/transformers/pr_17787/en/model_doc/beit#transformers.BeitModel"),c(yq,"href","/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertModel"),c(xq,"href","/docs/transformers/pr_17787/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c($q,"href","/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.BigBirdModel"),c(kq,"href","/docs/transformers/pr_17787/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(Sq,"href","/docs/transformers/pr_17787/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(Rq,"href","/docs/transformers/pr_17787/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(Pq,"href","/docs/transformers/pr_17787/en/model_doc/bloom#transformers.BloomModel"),c(Bq,"href","/docs/transformers/pr_17787/en/model_doc/camembert#transformers.CamembertModel"),c(Iq,"href","/docs/transformers/pr_17787/en/model_doc/canine#transformers.CanineModel"),c(Nq,"href","/docs/transformers/pr_17787/en/model_doc/clip#transformers.CLIPModel"),c(qq,"href","/docs/transformers/pr_17787/en/model_doc/codegen#transformers.CodeGenModel"),c(jq,"href","/docs/transformers/pr_17787/en/model_doc/convbert#transformers.ConvBertModel"),c(Dq,"href","/docs/transformers/pr_17787/en/model_doc/convnext#transformers.ConvNextModel"),c(Gq,"href","/docs/transformers/pr_17787/en/model_doc/ctrl#transformers.CTRLModel"),c(Oq,"href","/docs/transformers/pr_17787/en/model_doc/cvt#transformers.CvtModel"),c(Vq,"href","/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(Xq,"href","/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(zq,"href","/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(Qq,"href","/docs/transformers/pr_17787/en/model_doc/deberta#transformers.DebertaModel"),c(Wq,"href","/docs/transformers/pr_17787/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(Hq,"href","/docs/transformers/pr_17787/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(Uq,"href","/docs/transformers/pr_17787/en/model_doc/deit#transformers.DeiTModel"),c(Jq,"href","/docs/transformers/pr_17787/en/model_doc/detr#transformers.DetrModel"),c(Yq,"href","/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.DistilBertModel"),c(Kq,"href","/docs/transformers/pr_17787/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(Zq,"href","/docs/transformers/pr_17787/en/model_doc/dpt#transformers.DPTModel"),c(ej,"href","/docs/transformers/pr_17787/en/model_doc/electra#transformers.ElectraModel"),c(oj,"href","/docs/transformers/pr_17787/en/model_doc/flaubert#transformers.FlaubertModel"),c(rj,"href","/docs/transformers/pr_17787/en/model_doc/flava#transformers.FlavaModel"),c(tj,"href","/docs/transformers/pr_17787/en/model_doc/fnet#transformers.FNetModel"),c(aj,"href","/docs/transformers/pr_17787/en/model_doc/fsmt#transformers.FSMTModel"),c(nj,"href","/docs/transformers/pr_17787/en/model_doc/funnel#transformers.FunnelModel"),c(sj,"href","/docs/transformers/pr_17787/en/model_doc/funnel#transformers.FunnelBaseModel"),c(lj,"href","/docs/transformers/pr_17787/en/model_doc/glpn#transformers.GLPNModel"),c(ij,"href","/docs/transformers/pr_17787/en/model_doc/gpt2#transformers.GPT2Model"),c(dj,"href","/docs/transformers/pr_17787/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(cj,"href","/docs/transformers/pr_17787/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(fj,"href","/docs/transformers/pr_17787/en/model_doc/gptj#transformers.GPTJModel"),c(mj,"href","/docs/transformers/pr_17787/en/model_doc/hubert#transformers.HubertModel"),c(gj,"href","/docs/transformers/pr_17787/en/model_doc/ibert#transformers.IBertModel"),c(hj,"href","/docs/transformers/pr_17787/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(pj,"href","/docs/transformers/pr_17787/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(_j,"href","/docs/transformers/pr_17787/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(uj,"href","/docs/transformers/pr_17787/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(bj,"href","/docs/transformers/pr_17787/en/model_doc/led#transformers.LEDModel"),c(vj,"href","/docs/transformers/pr_17787/en/model_doc/levit#transformers.LevitModel"),c(Fj,"href","/docs/transformers/pr_17787/en/model_doc/longformer#transformers.LongformerModel"),c(Tj,"href","/docs/transformers/pr_17787/en/model_doc/longt5#transformers.LongT5Model"),c(Mj,"href","/docs/transformers/pr_17787/en/model_doc/luke#transformers.LukeModel"),c(Ej,"href","/docs/transformers/pr_17787/en/model_doc/lxmert#transformers.LxmertModel"),c(Cj,"href","/docs/transformers/pr_17787/en/model_doc/m2m_100#transformers.M2M100Model"),c(wj,"href","/docs/transformers/pr_17787/en/model_doc/marian#transformers.MarianModel"),c(Aj,"href","/docs/transformers/pr_17787/en/model_doc/maskformer#transformers.MaskFormerModel"),c(Lj,"href","/docs/transformers/pr_17787/en/model_doc/mbart#transformers.MBartModel"),c(yj,"href","/docs/transformers/pr_17787/en/model_doc/mctct#transformers.MCTCTModel"),c(xj,"href","/docs/transformers/pr_17787/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c($j,"href","/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.MobileBertModel"),c(kj,"href","/docs/transformers/pr_17787/en/model_doc/mpnet#transformers.MPNetModel"),c(Sj,"href","/docs/transformers/pr_17787/en/model_doc/mt5#transformers.MT5Model"),c(Rj,"href","/docs/transformers/pr_17787/en/model_doc/mvp#transformers.MvpModel"),c(Pj,"href","/docs/transformers/pr_17787/en/model_doc/nezha#transformers.NezhaModel"),c(Bj,"href","/docs/transformers/pr_17787/en/model_doc/nystromformer#transformers.NystromformerModel"),c(Ij,"href","/docs/transformers/pr_17787/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(Nj,"href","/docs/transformers/pr_17787/en/model_doc/opt#transformers.OPTModel"),c(qj,"href","/docs/transformers/pr_17787/en/model_doc/pegasus#transformers.PegasusModel"),c(jj,"href","/docs/transformers/pr_17787/en/model_doc/perceiver#transformers.PerceiverModel"),c(Dj,"href","/docs/transformers/pr_17787/en/model_doc/plbart#transformers.PLBartModel"),c(Gj,"href","/docs/transformers/pr_17787/en/model_doc/poolformer#transformers.PoolFormerModel"),c(Oj,"href","/docs/transformers/pr_17787/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(Vj,"href","/docs/transformers/pr_17787/en/model_doc/qdqbert#transformers.QDQBertModel"),c(Xj,"href","/docs/transformers/pr_17787/en/model_doc/reformer#transformers.ReformerModel"),c(zj,"href","/docs/transformers/pr_17787/en/model_doc/regnet#transformers.RegNetModel"),c(Qj,"href","/docs/transformers/pr_17787/en/model_doc/rembert#transformers.RemBertModel"),c(Wj,"href","/docs/transformers/pr_17787/en/model_doc/resnet#transformers.ResNetModel"),c(Hj,"href","/docs/transformers/pr_17787/en/model_doc/retribert#transformers.RetriBertModel"),c(Uj,"href","/docs/transformers/pr_17787/en/model_doc/roberta#transformers.RobertaModel"),c(Jj,"href","/docs/transformers/pr_17787/en/model_doc/roformer#transformers.RoFormerModel"),c(Yj,"href","/docs/transformers/pr_17787/en/model_doc/segformer#transformers.SegformerModel"),c(Kj,"href","/docs/transformers/pr_17787/en/model_doc/sew#transformers.SEWModel"),c(Zj,"href","/docs/transformers/pr_17787/en/model_doc/sew-d#transformers.SEWDModel"),c(eD,"href","/docs/transformers/pr_17787/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(oD,"href","/docs/transformers/pr_17787/en/model_doc/splinter#transformers.SplinterModel"),c(rD,"href","/docs/transformers/pr_17787/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(tD,"href","/docs/transformers/pr_17787/en/model_doc/swin#transformers.SwinModel"),c(aD,"href","/docs/transformers/pr_17787/en/model_doc/t5#transformers.T5Model"),c(nD,"href","/docs/transformers/pr_17787/en/model_doc/tapas#transformers.TapasModel"),c(sD,"href","/docs/transformers/pr_17787/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(lD,"href","/docs/transformers/pr_17787/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(iD,"href","/docs/transformers/pr_17787/en/model_doc/unispeech#transformers.UniSpeechModel"),c(dD,"href","/docs/transformers/pr_17787/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(cD,"href","/docs/transformers/pr_17787/en/model_doc/van#transformers.VanModel"),c(fD,"href","/docs/transformers/pr_17787/en/model_doc/vilt#transformers.ViltModel"),c(mD,"href","/docs/transformers/pr_17787/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(gD,"href","/docs/transformers/pr_17787/en/model_doc/visual_bert#transformers.VisualBertModel"),c(hD,"href","/docs/transformers/pr_17787/en/model_doc/vit#transformers.ViTModel"),c(pD,"href","/docs/transformers/pr_17787/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(_D,"href","/docs/transformers/pr_17787/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(uD,"href","/docs/transformers/pr_17787/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(bD,"href","/docs/transformers/pr_17787/en/model_doc/wavlm#transformers.WavLMModel"),c(vD,"href","/docs/transformers/pr_17787/en/model_doc/xglm#transformers.XGLMModel"),c(FD,"href","/docs/transformers/pr_17787/en/model_doc/xlm#transformers.XLMModel"),c(TD,"href","/docs/transformers/pr_17787/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(MD,"href","/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(ED,"href","/docs/transformers/pr_17787/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(CD,"href","/docs/transformers/pr_17787/en/model_doc/xlnet#transformers.XLNetModel"),c(wD,"href","/docs/transformers/pr_17787/en/model_doc/yolos#transformers.YolosModel"),c(AD,"href","/docs/transformers/pr_17787/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Iu,"id","transformers.AutoModelForPreTraining"),c(Iu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Iu,"href","#transformers.AutoModelForPreTraining"),c(Di,"class","relative group"),c(LD,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yD,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xD,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($D,"href","/docs/transformers/pr_17787/en/model_doc/albert#transformers.AlbertForPreTraining"),c(kD,"href","/docs/transformers/pr_17787/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(SD,"href","/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertForPreTraining"),c(RD,"href","/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(PD,"href","/docs/transformers/pr_17787/en/model_doc/bloom#transformers.BloomForCausalLM"),c(BD,"href","/docs/transformers/pr_17787/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(ID,"href","/docs/transformers/pr_17787/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(ND,"href","/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(qD,"href","/docs/transformers/pr_17787/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(jD,"href","/docs/transformers/pr_17787/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(DD,"href","/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(GD,"href","/docs/transformers/pr_17787/en/model_doc/electra#transformers.ElectraForPreTraining"),c(OD,"href","/docs/transformers/pr_17787/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(VD,"href","/docs/transformers/pr_17787/en/model_doc/flava#transformers.FlavaForPreTraining"),c(XD,"href","/docs/transformers/pr_17787/en/model_doc/fnet#transformers.FNetForPreTraining"),c(zD,"href","/docs/transformers/pr_17787/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(QD,"href","/docs/transformers/pr_17787/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(WD,"href","/docs/transformers/pr_17787/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(HD,"href","/docs/transformers/pr_17787/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(UD,"href","/docs/transformers/pr_17787/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(JD,"href","/docs/transformers/pr_17787/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(YD,"href","/docs/transformers/pr_17787/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(KD,"href","/docs/transformers/pr_17787/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(ZD,"href","/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(eG,"href","/docs/transformers/pr_17787/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(oG,"href","/docs/transformers/pr_17787/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(rG,"href","/docs/transformers/pr_17787/en/model_doc/nezha#transformers.NezhaForPreTraining"),c(tG,"href","/docs/transformers/pr_17787/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(aG,"href","/docs/transformers/pr_17787/en/model_doc/retribert#transformers.RetriBertModel"),c(nG,"href","/docs/transformers/pr_17787/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(sG,"href","/docs/transformers/pr_17787/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(lG,"href","/docs/transformers/pr_17787/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(iG,"href","/docs/transformers/pr_17787/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(dG,"href","/docs/transformers/pr_17787/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(cG,"href","/docs/transformers/pr_17787/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(fG,"href","/docs/transformers/pr_17787/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(mG,"href","/docs/transformers/pr_17787/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(gG,"href","/docs/transformers/pr_17787/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(hG,"href","/docs/transformers/pr_17787/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(pG,"href","/docs/transformers/pr_17787/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(_G,"href","/docs/transformers/pr_17787/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(uG,"href","/docs/transformers/pr_17787/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(bG,"href","/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(vG,"href","/docs/transformers/pr_17787/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(FG,"href","/docs/transformers/pr_17787/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k7,"id","transformers.AutoModelForCausalLM"),c(k7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k7,"href","#transformers.AutoModelForCausalLM"),c(Vi,"class","relative group"),c(TG,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MG,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EG,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CG,"href","/docs/transformers/pr_17787/en/model_doc/bart#transformers.BartForCausalLM"),c(wG,"href","/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertLMHeadModel"),c(AG,"href","/docs/transformers/pr_17787/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(LG,"href","/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(yG,"href","/docs/transformers/pr_17787/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(xG,"href","/docs/transformers/pr_17787/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c($G,"href","/docs/transformers/pr_17787/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(kG,"href","/docs/transformers/pr_17787/en/model_doc/bloom#transformers.BloomForCausalLM"),c(SG,"href","/docs/transformers/pr_17787/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(RG,"href","/docs/transformers/pr_17787/en/model_doc/codegen#transformers.CodeGenForCausalLM"),c(PG,"href","/docs/transformers/pr_17787/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(BG,"href","/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(IG,"href","/docs/transformers/pr_17787/en/model_doc/electra#transformers.ElectraForCausalLM"),c(NG,"href","/docs/transformers/pr_17787/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(qG,"href","/docs/transformers/pr_17787/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(jG,"href","/docs/transformers/pr_17787/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(DG,"href","/docs/transformers/pr_17787/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(GG,"href","/docs/transformers/pr_17787/en/model_doc/marian#transformers.MarianForCausalLM"),c(OG,"href","/docs/transformers/pr_17787/en/model_doc/mbart#transformers.MBartForCausalLM"),c(VG,"href","/docs/transformers/pr_17787/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(XG,"href","/docs/transformers/pr_17787/en/model_doc/mvp#transformers.MvpForCausalLM"),c(zG,"href","/docs/transformers/pr_17787/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(QG,"href","/docs/transformers/pr_17787/en/model_doc/opt#transformers.OPTForCausalLM"),c(WG,"href","/docs/transformers/pr_17787/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(HG,"href","/docs/transformers/pr_17787/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(UG,"href","/docs/transformers/pr_17787/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(JG,"href","/docs/transformers/pr_17787/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(YG,"href","/docs/transformers/pr_17787/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(KG,"href","/docs/transformers/pr_17787/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(ZG,"href","/docs/transformers/pr_17787/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(eO,"href","/docs/transformers/pr_17787/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(oO,"href","/docs/transformers/pr_17787/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(rO,"href","/docs/transformers/pr_17787/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(tO,"href","/docs/transformers/pr_17787/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(aO,"href","/docs/transformers/pr_17787/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(nO,"href","/docs/transformers/pr_17787/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(sO,"href","/docs/transformers/pr_17787/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(lO,"href","/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(iO,"href","/docs/transformers/pr_17787/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(dO,"href","/docs/transformers/pr_17787/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T1,"id","transformers.AutoModelForMaskedLM"),c(T1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T1,"href","#transformers.AutoModelForMaskedLM"),c(Qi,"class","relative group"),c(cO,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fO,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mO,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gO,"href","/docs/transformers/pr_17787/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(hO,"href","/docs/transformers/pr_17787/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(pO,"href","/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertForMaskedLM"),c(_O,"href","/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(uO,"href","/docs/transformers/pr_17787/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(bO,"href","/docs/transformers/pr_17787/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(vO,"href","/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(FO,"href","/docs/transformers/pr_17787/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(TO,"href","/docs/transformers/pr_17787/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(MO,"href","/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(EO,"href","/docs/transformers/pr_17787/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(CO,"href","/docs/transformers/pr_17787/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(wO,"href","/docs/transformers/pr_17787/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(AO,"href","/docs/transformers/pr_17787/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(LO,"href","/docs/transformers/pr_17787/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(yO,"href","/docs/transformers/pr_17787/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(xO,"href","/docs/transformers/pr_17787/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c($O,"href","/docs/transformers/pr_17787/en/model_doc/luke#transformers.LukeForMaskedLM"),c(kO,"href","/docs/transformers/pr_17787/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(SO,"href","/docs/transformers/pr_17787/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(RO,"href","/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(PO,"href","/docs/transformers/pr_17787/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(BO,"href","/docs/transformers/pr_17787/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(IO,"href","/docs/transformers/pr_17787/en/model_doc/nezha#transformers.NezhaForMaskedLM"),c(NO,"href","/docs/transformers/pr_17787/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(qO,"href","/docs/transformers/pr_17787/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(jO,"href","/docs/transformers/pr_17787/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(DO,"href","/docs/transformers/pr_17787/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(GO,"href","/docs/transformers/pr_17787/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(OO,"href","/docs/transformers/pr_17787/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(VO,"href","/docs/transformers/pr_17787/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(XO,"href","/docs/transformers/pr_17787/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(zO,"href","/docs/transformers/pr_17787/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(QO,"href","/docs/transformers/pr_17787/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(WO,"href","/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(HO,"href","/docs/transformers/pr_17787/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(UO,"href","/docs/transformers/pr_17787/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(d2,"id","transformers.AutoModelForSeq2SeqLM"),c(d2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d2,"href","#transformers.AutoModelForSeq2SeqLM"),c(Ui,"class","relative group"),c(JO,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YO,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KO,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZO,"href","/docs/transformers/pr_17787/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(eV,"href","/docs/transformers/pr_17787/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(oV,"href","/docs/transformers/pr_17787/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(rV,"href","/docs/transformers/pr_17787/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(tV,"href","/docs/transformers/pr_17787/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(aV,"href","/docs/transformers/pr_17787/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(nV,"href","/docs/transformers/pr_17787/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(sV,"href","/docs/transformers/pr_17787/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(lV,"href","/docs/transformers/pr_17787/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(iV,"href","/docs/transformers/pr_17787/en/model_doc/marian#transformers.MarianMTModel"),c(dV,"href","/docs/transformers/pr_17787/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(cV,"href","/docs/transformers/pr_17787/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(fV,"href","/docs/transformers/pr_17787/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(mV,"href","/docs/transformers/pr_17787/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(gV,"href","/docs/transformers/pr_17787/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(hV,"href","/docs/transformers/pr_17787/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(pV,"href","/docs/transformers/pr_17787/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(_V,"href","/docs/transformers/pr_17787/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k2,"id","transformers.AutoModelForSequenceClassification"),c(k2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k2,"href","#transformers.AutoModelForSequenceClassification"),c(Ki,"class","relative group"),c(uV,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bV,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vV,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FV,"href","/docs/transformers/pr_17787/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(TV,"href","/docs/transformers/pr_17787/en/model_doc/bart#transformers.BartForSequenceClassification"),c(MV,"href","/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertForSequenceClassification"),c(EV,"href","/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(CV,"href","/docs/transformers/pr_17787/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(wV,"href","/docs/transformers/pr_17787/en/model_doc/bloom#transformers.BloomForSequenceClassification"),c(AV,"href","/docs/transformers/pr_17787/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(LV,"href","/docs/transformers/pr_17787/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(yV,"href","/docs/transformers/pr_17787/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(xV,"href","/docs/transformers/pr_17787/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c($V,"href","/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(kV,"href","/docs/transformers/pr_17787/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(SV,"href","/docs/transformers/pr_17787/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(RV,"href","/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(PV,"href","/docs/transformers/pr_17787/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(BV,"href","/docs/transformers/pr_17787/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(IV,"href","/docs/transformers/pr_17787/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(NV,"href","/docs/transformers/pr_17787/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(qV,"href","/docs/transformers/pr_17787/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(jV,"href","/docs/transformers/pr_17787/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(DV,"href","/docs/transformers/pr_17787/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(GV,"href","/docs/transformers/pr_17787/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(OV,"href","/docs/transformers/pr_17787/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(VV,"href","/docs/transformers/pr_17787/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(XV,"href","/docs/transformers/pr_17787/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(zV,"href","/docs/transformers/pr_17787/en/model_doc/led#transformers.LEDForSequenceClassification"),c(QV,"href","/docs/transformers/pr_17787/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(WV,"href","/docs/transformers/pr_17787/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(HV,"href","/docs/transformers/pr_17787/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(UV,"href","/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(JV,"href","/docs/transformers/pr_17787/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(YV,"href","/docs/transformers/pr_17787/en/model_doc/mvp#transformers.MvpForSequenceClassification"),c(KV,"href","/docs/transformers/pr_17787/en/model_doc/nezha#transformers.NezhaForSequenceClassification"),c(ZV,"href","/docs/transformers/pr_17787/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(eX,"href","/docs/transformers/pr_17787/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(oX,"href","/docs/transformers/pr_17787/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(rX,"href","/docs/transformers/pr_17787/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(tX,"href","/docs/transformers/pr_17787/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(aX,"href","/docs/transformers/pr_17787/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(nX,"href","/docs/transformers/pr_17787/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(sX,"href","/docs/transformers/pr_17787/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(lX,"href","/docs/transformers/pr_17787/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(iX,"href","/docs/transformers/pr_17787/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(dX,"href","/docs/transformers/pr_17787/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(cX,"href","/docs/transformers/pr_17787/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(fX,"href","/docs/transformers/pr_17787/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(mX,"href","/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(gX,"href","/docs/transformers/pr_17787/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(hX,"href","/docs/transformers/pr_17787/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(pX,"href","/docs/transformers/pr_17787/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kb,"id","transformers.AutoModelForMultipleChoice"),c(kb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kb,"href","#transformers.AutoModelForMultipleChoice"),c(od,"class","relative group"),c(_X,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uX,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bX,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vX,"href","/docs/transformers/pr_17787/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(FX,"href","/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertForMultipleChoice"),c(TX,"href","/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(MX,"href","/docs/transformers/pr_17787/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(EX,"href","/docs/transformers/pr_17787/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(CX,"href","/docs/transformers/pr_17787/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(wX,"href","/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(AX,"href","/docs/transformers/pr_17787/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(LX,"href","/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(yX,"href","/docs/transformers/pr_17787/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(xX,"href","/docs/transformers/pr_17787/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c($X,"href","/docs/transformers/pr_17787/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(kX,"href","/docs/transformers/pr_17787/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(SX,"href","/docs/transformers/pr_17787/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(RX,"href","/docs/transformers/pr_17787/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(PX,"href","/docs/transformers/pr_17787/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(BX,"href","/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(IX,"href","/docs/transformers/pr_17787/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(NX,"href","/docs/transformers/pr_17787/en/model_doc/nezha#transformers.NezhaForMultipleChoice"),c(qX,"href","/docs/transformers/pr_17787/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(jX,"href","/docs/transformers/pr_17787/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(DX,"href","/docs/transformers/pr_17787/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(GX,"href","/docs/transformers/pr_17787/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(OX,"href","/docs/transformers/pr_17787/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(VX,"href","/docs/transformers/pr_17787/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(XX,"href","/docs/transformers/pr_17787/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(zX,"href","/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(QX,"href","/docs/transformers/pr_17787/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(WX,"href","/docs/transformers/pr_17787/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(HX,"href","/docs/transformers/pr_17787/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fv,"id","transformers.AutoModelForNextSentencePrediction"),c(fv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fv,"href","#transformers.AutoModelForNextSentencePrediction"),c(ad,"class","relative group"),c(UX,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JX,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YX,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KX,"href","/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(ZX,"href","/docs/transformers/pr_17787/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(ez,"href","/docs/transformers/pr_17787/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(oz,"href","/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(rz,"href","/docs/transformers/pr_17787/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction"),c(tz,"href","/docs/transformers/pr_17787/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tv,"id","transformers.AutoModelForTokenClassification"),c(Tv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tv,"href","#transformers.AutoModelForTokenClassification"),c(ld,"class","relative group"),c(az,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nz,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sz,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lz,"href","/docs/transformers/pr_17787/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(iz,"href","/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertForTokenClassification"),c(dz,"href","/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(cz,"href","/docs/transformers/pr_17787/en/model_doc/bloom#transformers.BloomForTokenClassification"),c(fz,"href","/docs/transformers/pr_17787/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(mz,"href","/docs/transformers/pr_17787/en/model_doc/canine#transformers.CanineForTokenClassification"),c(gz,"href","/docs/transformers/pr_17787/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(hz,"href","/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(pz,"href","/docs/transformers/pr_17787/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(_z,"href","/docs/transformers/pr_17787/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(uz,"href","/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(bz,"href","/docs/transformers/pr_17787/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(vz,"href","/docs/transformers/pr_17787/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(Fz,"href","/docs/transformers/pr_17787/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(Tz,"href","/docs/transformers/pr_17787/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(Mz,"href","/docs/transformers/pr_17787/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(Ez,"href","/docs/transformers/pr_17787/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(Cz,"href","/docs/transformers/pr_17787/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(wz,"href","/docs/transformers/pr_17787/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(Az,"href","/docs/transformers/pr_17787/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(Lz,"href","/docs/transformers/pr_17787/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(yz,"href","/docs/transformers/pr_17787/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(xz,"href","/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c($z,"href","/docs/transformers/pr_17787/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(kz,"href","/docs/transformers/pr_17787/en/model_doc/nezha#transformers.NezhaForTokenClassification"),c(Sz,"href","/docs/transformers/pr_17787/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(Rz,"href","/docs/transformers/pr_17787/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(Pz,"href","/docs/transformers/pr_17787/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(Bz,"href","/docs/transformers/pr_17787/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(Iz,"href","/docs/transformers/pr_17787/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(Nz,"href","/docs/transformers/pr_17787/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(qz,"href","/docs/transformers/pr_17787/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(jz,"href","/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(Dz,"href","/docs/transformers/pr_17787/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(Gz,"href","/docs/transformers/pr_17787/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(Oz,"href","/docs/transformers/pr_17787/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lF,"id","transformers.AutoModelForQuestionAnswering"),c(lF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lF,"href","#transformers.AutoModelForQuestionAnswering"),c(cd,"class","relative group"),c(Vz,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xz,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zz,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qz,"href","/docs/transformers/pr_17787/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(Wz,"href","/docs/transformers/pr_17787/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(Hz,"href","/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(Uz,"href","/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(Jz,"href","/docs/transformers/pr_17787/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(Yz,"href","/docs/transformers/pr_17787/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(Kz,"href","/docs/transformers/pr_17787/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(Zz,"href","/docs/transformers/pr_17787/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(eQ,"href","/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(oQ,"href","/docs/transformers/pr_17787/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(rQ,"href","/docs/transformers/pr_17787/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(tQ,"href","/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(aQ,"href","/docs/transformers/pr_17787/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(nQ,"href","/docs/transformers/pr_17787/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(sQ,"href","/docs/transformers/pr_17787/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(lQ,"href","/docs/transformers/pr_17787/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(iQ,"href","/docs/transformers/pr_17787/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(dQ,"href","/docs/transformers/pr_17787/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(cQ,"href","/docs/transformers/pr_17787/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(fQ,"href","/docs/transformers/pr_17787/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(mQ,"href","/docs/transformers/pr_17787/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(gQ,"href","/docs/transformers/pr_17787/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(hQ,"href","/docs/transformers/pr_17787/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(pQ,"href","/docs/transformers/pr_17787/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(_Q,"href","/docs/transformers/pr_17787/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(uQ,"href","/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(bQ,"href","/docs/transformers/pr_17787/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(vQ,"href","/docs/transformers/pr_17787/en/model_doc/mvp#transformers.MvpForQuestionAnswering"),c(FQ,"href","/docs/transformers/pr_17787/en/model_doc/nezha#transformers.NezhaForQuestionAnswering"),c(TQ,"href","/docs/transformers/pr_17787/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(MQ,"href","/docs/transformers/pr_17787/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(EQ,"href","/docs/transformers/pr_17787/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(CQ,"href","/docs/transformers/pr_17787/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(wQ,"href","/docs/transformers/pr_17787/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(AQ,"href","/docs/transformers/pr_17787/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(LQ,"href","/docs/transformers/pr_17787/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(yQ,"href","/docs/transformers/pr_17787/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(xQ,"href","/docs/transformers/pr_17787/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c($Q,"href","/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(kQ,"href","/docs/transformers/pr_17787/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(SQ,"href","/docs/transformers/pr_17787/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(RQ,"href","/docs/transformers/pr_17787/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZF,"id","transformers.AutoModelForTableQuestionAnswering"),c(ZF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZF,"href","#transformers.AutoModelForTableQuestionAnswering"),c(gd,"class","relative group"),c(PQ,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BQ,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IQ,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NQ,"href","/docs/transformers/pr_17787/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aT,"id","transformers.AutoModelForImageClassification"),c(aT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aT,"href","#transformers.AutoModelForImageClassification"),c(_d,"class","relative group"),c(qQ,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jQ,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DQ,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GQ,"href","/docs/transformers/pr_17787/en/model_doc/beit#transformers.BeitForImageClassification"),c(OQ,"href","/docs/transformers/pr_17787/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(VQ,"href","/docs/transformers/pr_17787/en/model_doc/cvt#transformers.CvtForImageClassification"),c(XQ,"href","/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(zQ,"href","/docs/transformers/pr_17787/en/model_doc/deit#transformers.DeiTForImageClassification"),c(QQ,"href","/docs/transformers/pr_17787/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(WQ,"href","/docs/transformers/pr_17787/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(HQ,"href","/docs/transformers/pr_17787/en/model_doc/levit#transformers.LevitForImageClassification"),c(UQ,"href","/docs/transformers/pr_17787/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(JQ,"href","/docs/transformers/pr_17787/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(YQ,"href","/docs/transformers/pr_17787/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(KQ,"href","/docs/transformers/pr_17787/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(ZQ,"href","/docs/transformers/pr_17787/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(eW,"href","/docs/transformers/pr_17787/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(oW,"href","/docs/transformers/pr_17787/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(rW,"href","/docs/transformers/pr_17787/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(tW,"href","/docs/transformers/pr_17787/en/model_doc/swin#transformers.SwinForImageClassification"),c(aW,"href","/docs/transformers/pr_17787/en/model_doc/van#transformers.VanForImageClassification"),c(nW,"href","/docs/transformers/pr_17787/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FT,"id","transformers.AutoModelForVision2Seq"),c(FT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(FT,"href","#transformers.AutoModelForVision2Seq"),c(vd,"class","relative group"),c(sW,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lW,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iW,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dW,"href","/docs/transformers/pr_17787/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wT,"id","transformers.AutoModelForVisualQuestionAnswering"),c(wT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wT,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(Md,"class","relative group"),c(cW,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fW,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mW,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gW,"href","/docs/transformers/pr_17787/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($T,"id","transformers.AutoModelForAudioClassification"),c($T,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($T,"href","#transformers.AutoModelForAudioClassification"),c(wd,"class","relative group"),c(hW,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pW,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_W,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uW,"href","/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(bW,"href","/docs/transformers/pr_17787/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(vW,"href","/docs/transformers/pr_17787/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(FW,"href","/docs/transformers/pr_17787/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(TW,"href","/docs/transformers/pr_17787/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(MW,"href","/docs/transformers/pr_17787/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(EW,"href","/docs/transformers/pr_17787/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(CW,"href","/docs/transformers/pr_17787/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(wW,"href","/docs/transformers/pr_17787/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VT,"id","transformers.AutoModelForAudioFrameClassification"),c(VT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(VT,"href","#transformers.AutoModelForAudioFrameClassification"),c(yd,"class","relative group"),c(AW,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LW,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yW,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xW,"href","/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c($W,"href","/docs/transformers/pr_17787/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(kW,"href","/docs/transformers/pr_17787/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(SW,"href","/docs/transformers/pr_17787/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(RW,"href","/docs/transformers/pr_17787/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KT,"id","transformers.AutoModelForCTC"),c(KT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(KT,"href","#transformers.AutoModelForCTC"),c(kd,"class","relative group"),c(PW,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BW,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IW,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NW,"href","/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(qW,"href","/docs/transformers/pr_17787/en/model_doc/hubert#transformers.HubertForCTC"),c(jW,"href","/docs/transformers/pr_17787/en/model_doc/mctct#transformers.MCTCTForCTC"),c(DW,"href","/docs/transformers/pr_17787/en/model_doc/sew#transformers.SEWForCTC"),c(GW,"href","/docs/transformers/pr_17787/en/model_doc/sew-d#transformers.SEWDForCTC"),c(OW,"href","/docs/transformers/pr_17787/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(VW,"href","/docs/transformers/pr_17787/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(XW,"href","/docs/transformers/pr_17787/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(zW,"href","/docs/transformers/pr_17787/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(QW,"href","/docs/transformers/pr_17787/en/model_doc/wavlm#transformers.WavLMForCTC"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(m8,"id","transformers.AutoModelForSpeechSeq2Seq"),c(m8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m8,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(Pd,"class","relative group"),c(WW,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HW,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UW,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JW,"href","/docs/transformers/pr_17787/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(YW,"href","/docs/transformers/pr_17787/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(b8,"id","transformers.AutoModelForAudioXVector"),c(b8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b8,"href","#transformers.AutoModelForAudioXVector"),c(Nd,"class","relative group"),c(KW,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZW,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eH,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oH,"href","/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(rH,"href","/docs/transformers/pr_17787/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(tH,"href","/docs/transformers/pr_17787/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(aH,"href","/docs/transformers/pr_17787/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(nH,"href","/docs/transformers/pr_17787/en/model_doc/wavlm#transformers.WavLMForXVector"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L8,"id","transformers.AutoModelForMaskedImageModeling"),c(L8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L8,"href","#transformers.AutoModelForMaskedImageModeling"),c(Dd,"class","relative group"),c(sH,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lH,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iH,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dH,"href","/docs/transformers/pr_17787/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(cH,"href","/docs/transformers/pr_17787/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(fH,"href","/docs/transformers/pr_17787/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P8,"id","transformers.AutoModelForObjectDetection"),c(P8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P8,"href","#transformers.AutoModelForObjectDetection"),c(Xd,"class","relative group"),c(mH,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gH,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hH,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pH,"href","/docs/transformers/pr_17787/en/model_doc/detr#transformers.DetrForObjectDetection"),c(_H,"href","/docs/transformers/pr_17787/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(D8,"id","transformers.AutoModelForImageSegmentation"),c(D8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D8,"href","#transformers.AutoModelForImageSegmentation"),c(Wd,"class","relative group"),c(uH,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bH,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vH,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FH,"href","/docs/transformers/pr_17787/en/model_doc/detr#transformers.DetrForSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z8,"id","transformers.AutoModelForSemanticSegmentation"),c(z8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z8,"href","#transformers.AutoModelForSemanticSegmentation"),c(Jd,"class","relative group"),c(TH,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MH,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EH,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CH,"href","/docs/transformers/pr_17787/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(wH,"href","/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(AH,"href","/docs/transformers/pr_17787/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(LH,"href","/docs/transformers/pr_17787/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Z8,"id","transformers.AutoModelForInstanceSegmentation"),c(Z8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z8,"href","#transformers.AutoModelForInstanceSegmentation"),c(Zd,"class","relative group"),c(yH,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xH,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($H,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kH,"href","/docs/transformers/pr_17787/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aM,"id","transformers.TFAutoModel"),c(aM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aM,"href","#transformers.TFAutoModel"),c(rc,"class","relative group"),c(SH,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RH,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PH,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BH,"href","/docs/transformers/pr_17787/en/model_doc/albert#transformers.TFAlbertModel"),c(IH,"href","/docs/transformers/pr_17787/en/model_doc/bart#transformers.TFBartModel"),c(NH,"href","/docs/transformers/pr_17787/en/model_doc/bert#transformers.TFBertModel"),c(qH,"href","/docs/transformers/pr_17787/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(jH,"href","/docs/transformers/pr_17787/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(DH,"href","/docs/transformers/pr_17787/en/model_doc/camembert#transformers.TFCamembertModel"),c(GH,"href","/docs/transformers/pr_17787/en/model_doc/clip#transformers.TFCLIPModel"),c(OH,"href","/docs/transformers/pr_17787/en/model_doc/convbert#transformers.TFConvBertModel"),c(VH,"href","/docs/transformers/pr_17787/en/model_doc/convnext#transformers.TFConvNextModel"),c(XH,"href","/docs/transformers/pr_17787/en/model_doc/ctrl#transformers.TFCTRLModel"),c(zH,"href","/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(QH,"href","/docs/transformers/pr_17787/en/model_doc/deberta#transformers.TFDebertaModel"),c(WH,"href","/docs/transformers/pr_17787/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(HH,"href","/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(UH,"href","/docs/transformers/pr_17787/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(JH,"href","/docs/transformers/pr_17787/en/model_doc/electra#transformers.TFElectraModel"),c(YH,"href","/docs/transformers/pr_17787/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(KH,"href","/docs/transformers/pr_17787/en/model_doc/funnel#transformers.TFFunnelModel"),c(ZH,"href","/docs/transformers/pr_17787/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(eU,"href","/docs/transformers/pr_17787/en/model_doc/gpt2#transformers.TFGPT2Model"),c(oU,"href","/docs/transformers/pr_17787/en/model_doc/gptj#transformers.TFGPTJModel"),c(rU,"href","/docs/transformers/pr_17787/en/model_doc/hubert#transformers.TFHubertModel"),c(tU,"href","/docs/transformers/pr_17787/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(aU,"href","/docs/transformers/pr_17787/en/model_doc/led#transformers.TFLEDModel"),c(nU,"href","/docs/transformers/pr_17787/en/model_doc/longformer#transformers.TFLongformerModel"),c(sU,"href","/docs/transformers/pr_17787/en/model_doc/lxmert#transformers.TFLxmertModel"),c(lU,"href","/docs/transformers/pr_17787/en/model_doc/marian#transformers.TFMarianModel"),c(iU,"href","/docs/transformers/pr_17787/en/model_doc/mbart#transformers.TFMBartModel"),c(dU,"href","/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(cU,"href","/docs/transformers/pr_17787/en/model_doc/mpnet#transformers.TFMPNetModel"),c(fU,"href","/docs/transformers/pr_17787/en/model_doc/mt5#transformers.TFMT5Model"),c(mU,"href","/docs/transformers/pr_17787/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(gU,"href","/docs/transformers/pr_17787/en/model_doc/opt#transformers.TFOPTModel"),c(hU,"href","/docs/transformers/pr_17787/en/model_doc/pegasus#transformers.TFPegasusModel"),c(pU,"href","/docs/transformers/pr_17787/en/model_doc/rembert#transformers.TFRemBertModel"),c(_U,"href","/docs/transformers/pr_17787/en/model_doc/roberta#transformers.TFRobertaModel"),c(uU,"href","/docs/transformers/pr_17787/en/model_doc/roformer#transformers.TFRoFormerModel"),c(bU,"href","/docs/transformers/pr_17787/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(vU,"href","/docs/transformers/pr_17787/en/model_doc/swin#transformers.TFSwinModel"),c(FU,"href","/docs/transformers/pr_17787/en/model_doc/t5#transformers.TFT5Model"),c(TU,"href","/docs/transformers/pr_17787/en/model_doc/tapas#transformers.TFTapasModel"),c(MU,"href","/docs/transformers/pr_17787/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(EU,"href","/docs/transformers/pr_17787/en/model_doc/vit#transformers.TFViTModel"),c(CU,"href","/docs/transformers/pr_17787/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(wU,"href","/docs/transformers/pr_17787/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(AU,"href","/docs/transformers/pr_17787/en/model_doc/xlm#transformers.TFXLMModel"),c(LU,"href","/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(yU,"href","/docs/transformers/pr_17787/en/model_doc/xlnet#transformers.TFXLNetModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZM,"id","transformers.TFAutoModelForPreTraining"),c(ZM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZM,"href","#transformers.TFAutoModelForPreTraining"),c(nc,"class","relative group"),c(xU,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($U,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kU,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SU,"href","/docs/transformers/pr_17787/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(RU,"href","/docs/transformers/pr_17787/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(PU,"href","/docs/transformers/pr_17787/en/model_doc/bert#transformers.TFBertForPreTraining"),c(BU,"href","/docs/transformers/pr_17787/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(IU,"href","/docs/transformers/pr_17787/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(NU,"href","/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(qU,"href","/docs/transformers/pr_17787/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(jU,"href","/docs/transformers/pr_17787/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(DU,"href","/docs/transformers/pr_17787/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(GU,"href","/docs/transformers/pr_17787/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(OU,"href","/docs/transformers/pr_17787/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(VU,"href","/docs/transformers/pr_17787/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(XU,"href","/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(zU,"href","/docs/transformers/pr_17787/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(QU,"href","/docs/transformers/pr_17787/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(WU,"href","/docs/transformers/pr_17787/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(HU,"href","/docs/transformers/pr_17787/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(UU,"href","/docs/transformers/pr_17787/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(JU,"href","/docs/transformers/pr_17787/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(YU,"href","/docs/transformers/pr_17787/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(KU,"href","/docs/transformers/pr_17787/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(ZU,"href","/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(eJ,"href","/docs/transformers/pr_17787/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w4,"id","transformers.TFAutoModelForCausalLM"),c(w4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w4,"href","#transformers.TFAutoModelForCausalLM"),c(ic,"class","relative group"),c(oJ,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rJ,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tJ,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aJ,"href","/docs/transformers/pr_17787/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(nJ,"href","/docs/transformers/pr_17787/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(sJ,"href","/docs/transformers/pr_17787/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(lJ,"href","/docs/transformers/pr_17787/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(iJ,"href","/docs/transformers/pr_17787/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(dJ,"href","/docs/transformers/pr_17787/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(cJ,"href","/docs/transformers/pr_17787/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(fJ,"href","/docs/transformers/pr_17787/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(mJ,"href","/docs/transformers/pr_17787/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(gJ,"href","/docs/transformers/pr_17787/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(hJ,"href","/docs/transformers/pr_17787/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(pJ,"href","/docs/transformers/pr_17787/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(_J,"href","/docs/transformers/pr_17787/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G4,"id","transformers.TFAutoModelForImageClassification"),c(G4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G4,"href","#transformers.TFAutoModelForImageClassification"),c(fc,"class","relative group"),c(uJ,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bJ,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vJ,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FJ,"href","/docs/transformers/pr_17787/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(TJ,"href","/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(MJ,"href","/docs/transformers/pr_17787/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(EJ,"href","/docs/transformers/pr_17787/en/model_doc/vit#transformers.TFViTForImageClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H4,"id","transformers.TFAutoModelForMaskedLM"),c(H4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H4,"href","#transformers.TFAutoModelForMaskedLM"),c(hc,"class","relative group"),c(CJ,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wJ,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AJ,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LJ,"href","/docs/transformers/pr_17787/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(yJ,"href","/docs/transformers/pr_17787/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(xJ,"href","/docs/transformers/pr_17787/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c($J,"href","/docs/transformers/pr_17787/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(kJ,"href","/docs/transformers/pr_17787/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(SJ,"href","/docs/transformers/pr_17787/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(RJ,"href","/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(PJ,"href","/docs/transformers/pr_17787/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(BJ,"href","/docs/transformers/pr_17787/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(IJ,"href","/docs/transformers/pr_17787/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(NJ,"href","/docs/transformers/pr_17787/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(qJ,"href","/docs/transformers/pr_17787/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(jJ,"href","/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(DJ,"href","/docs/transformers/pr_17787/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(GJ,"href","/docs/transformers/pr_17787/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(OJ,"href","/docs/transformers/pr_17787/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(VJ,"href","/docs/transformers/pr_17787/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(XJ,"href","/docs/transformers/pr_17787/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(zJ,"href","/docs/transformers/pr_17787/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(QJ,"href","/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uE,"id","transformers.TFAutoModelForSeq2SeqLM"),c(uE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uE,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(uc,"class","relative group"),c(WJ,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HJ,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UJ,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JJ,"href","/docs/transformers/pr_17787/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(YJ,"href","/docs/transformers/pr_17787/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(KJ,"href","/docs/transformers/pr_17787/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(ZJ,"href","/docs/transformers/pr_17787/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(eY,"href","/docs/transformers/pr_17787/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(oY,"href","/docs/transformers/pr_17787/en/model_doc/marian#transformers.TFMarianMTModel"),c(rY,"href","/docs/transformers/pr_17787/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(tY,"href","/docs/transformers/pr_17787/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(aY,"href","/docs/transformers/pr_17787/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(nY,"href","/docs/transformers/pr_17787/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($E,"id","transformers.TFAutoModelForSequenceClassification"),c($E,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($E,"href","#transformers.TFAutoModelForSequenceClassification"),c(Fc,"class","relative group"),c(sY,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lY,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iY,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dY,"href","/docs/transformers/pr_17787/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(cY,"href","/docs/transformers/pr_17787/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(fY,"href","/docs/transformers/pr_17787/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(mY,"href","/docs/transformers/pr_17787/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(gY,"href","/docs/transformers/pr_17787/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(hY,"href","/docs/transformers/pr_17787/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(pY,"href","/docs/transformers/pr_17787/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(_Y,"href","/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(uY,"href","/docs/transformers/pr_17787/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(bY,"href","/docs/transformers/pr_17787/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(vY,"href","/docs/transformers/pr_17787/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(FY,"href","/docs/transformers/pr_17787/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(TY,"href","/docs/transformers/pr_17787/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(MY,"href","/docs/transformers/pr_17787/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(EY,"href","/docs/transformers/pr_17787/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(CY,"href","/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(wY,"href","/docs/transformers/pr_17787/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(AY,"href","/docs/transformers/pr_17787/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(LY,"href","/docs/transformers/pr_17787/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(yY,"href","/docs/transformers/pr_17787/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(xY,"href","/docs/transformers/pr_17787/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c($Y,"href","/docs/transformers/pr_17787/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(kY,"href","/docs/transformers/pr_17787/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(SY,"href","/docs/transformers/pr_17787/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(RY,"href","/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(PY,"href","/docs/transformers/pr_17787/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nC,"id","transformers.TFAutoModelForMultipleChoice"),c(nC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nC,"href","#transformers.TFAutoModelForMultipleChoice"),c(Ec,"class","relative group"),c(BY,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IY,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NY,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qY,"href","/docs/transformers/pr_17787/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(jY,"href","/docs/transformers/pr_17787/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(DY,"href","/docs/transformers/pr_17787/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(GY,"href","/docs/transformers/pr_17787/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(OY,"href","/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(VY,"href","/docs/transformers/pr_17787/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(XY,"href","/docs/transformers/pr_17787/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(zY,"href","/docs/transformers/pr_17787/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(QY,"href","/docs/transformers/pr_17787/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(WY,"href","/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(HY,"href","/docs/transformers/pr_17787/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(UY,"href","/docs/transformers/pr_17787/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(JY,"href","/docs/transformers/pr_17787/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(YY,"href","/docs/transformers/pr_17787/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(KY,"href","/docs/transformers/pr_17787/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(ZY,"href","/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(eK,"href","/docs/transformers/pr_17787/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wC,"id","transformers.TFAutoModelForNextSentencePrediction"),c(wC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wC,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(Ac,"class","relative group"),c(oK,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rK,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tK,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aK,"href","/docs/transformers/pr_17787/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(nK,"href","/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($C,"id","transformers.TFAutoModelForTableQuestionAnswering"),c($C,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($C,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(xc,"class","relative group"),c(sK,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lK,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iK,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dK,"href","/docs/transformers/pr_17787/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PC,"id","transformers.TFAutoModelForTokenClassification"),c(PC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PC,"href","#transformers.TFAutoModelForTokenClassification"),c(Sc,"class","relative group"),c(cK,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fK,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mK,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gK,"href","/docs/transformers/pr_17787/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(hK,"href","/docs/transformers/pr_17787/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(pK,"href","/docs/transformers/pr_17787/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(_K,"href","/docs/transformers/pr_17787/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(uK,"href","/docs/transformers/pr_17787/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(bK,"href","/docs/transformers/pr_17787/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(vK,"href","/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(FK,"href","/docs/transformers/pr_17787/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(TK,"href","/docs/transformers/pr_17787/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(MK,"href","/docs/transformers/pr_17787/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(EK,"href","/docs/transformers/pr_17787/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(CK,"href","/docs/transformers/pr_17787/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(wK,"href","/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(AK,"href","/docs/transformers/pr_17787/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(LK,"href","/docs/transformers/pr_17787/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(yK,"href","/docs/transformers/pr_17787/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(xK,"href","/docs/transformers/pr_17787/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c($K,"href","/docs/transformers/pr_17787/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(kK,"href","/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(SK,"href","/docs/transformers/pr_17787/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t3,"id","transformers.TFAutoModelForQuestionAnswering"),c(t3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t3,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Bc,"class","relative group"),c(RK,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PK,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BK,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IK,"href","/docs/transformers/pr_17787/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(NK,"href","/docs/transformers/pr_17787/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(qK,"href","/docs/transformers/pr_17787/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(jK,"href","/docs/transformers/pr_17787/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(DK,"href","/docs/transformers/pr_17787/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(GK,"href","/docs/transformers/pr_17787/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(OK,"href","/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(VK,"href","/docs/transformers/pr_17787/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(XK,"href","/docs/transformers/pr_17787/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(zK,"href","/docs/transformers/pr_17787/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(QK,"href","/docs/transformers/pr_17787/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(WK,"href","/docs/transformers/pr_17787/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(HK,"href","/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(UK,"href","/docs/transformers/pr_17787/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(JK,"href","/docs/transformers/pr_17787/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(YK,"href","/docs/transformers/pr_17787/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(KK,"href","/docs/transformers/pr_17787/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(ZK,"href","/docs/transformers/pr_17787/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(eZ,"href","/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(oZ,"href","/docs/transformers/pr_17787/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A3,"id","transformers.TFAutoModelForVision2Seq"),c(A3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A3,"href","#transformers.TFAutoModelForVision2Seq"),c(qc,"class","relative group"),c(rZ,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tZ,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aZ,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nZ,"href","/docs/transformers/pr_17787/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($3,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c($3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($3,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Gc,"class","relative group"),c(sZ,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lZ,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iZ,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dZ,"href","/docs/transformers/pr_17787/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P3,"id","transformers.FlaxAutoModel"),c(P3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P3,"href","#transformers.FlaxAutoModel"),c(Xc,"class","relative group"),c(cZ,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fZ,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mZ,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gZ,"href","/docs/transformers/pr_17787/en/model_doc/albert#transformers.FlaxAlbertModel"),c(hZ,"href","/docs/transformers/pr_17787/en/model_doc/bart#transformers.FlaxBartModel"),c(pZ,"href","/docs/transformers/pr_17787/en/model_doc/beit#transformers.FlaxBeitModel"),c(_Z,"href","/docs/transformers/pr_17787/en/model_doc/bert#transformers.FlaxBertModel"),c(uZ,"href","/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(bZ,"href","/docs/transformers/pr_17787/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(vZ,"href","/docs/transformers/pr_17787/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(FZ,"href","/docs/transformers/pr_17787/en/model_doc/clip#transformers.FlaxCLIPModel"),c(TZ,"href","/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(MZ,"href","/docs/transformers/pr_17787/en/model_doc/electra#transformers.FlaxElectraModel"),c(EZ,"href","/docs/transformers/pr_17787/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(CZ,"href","/docs/transformers/pr_17787/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(wZ,"href","/docs/transformers/pr_17787/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(AZ,"href","/docs/transformers/pr_17787/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(LZ,"href","/docs/transformers/pr_17787/en/model_doc/marian#transformers.FlaxMarianModel"),c(yZ,"href","/docs/transformers/pr_17787/en/model_doc/mbart#transformers.FlaxMBartModel"),c(xZ,"href","/docs/transformers/pr_17787/en/model_doc/mt5#transformers.FlaxMT5Model"),c($Z,"href","/docs/transformers/pr_17787/en/model_doc/opt#transformers.FlaxOPTModel"),c(kZ,"href","/docs/transformers/pr_17787/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(SZ,"href","/docs/transformers/pr_17787/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(RZ,"href","/docs/transformers/pr_17787/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(PZ,"href","/docs/transformers/pr_17787/en/model_doc/t5#transformers.FlaxT5Model"),c(BZ,"href","/docs/transformers/pr_17787/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(IZ,"href","/docs/transformers/pr_17787/en/model_doc/vit#transformers.FlaxViTModel"),c(NZ,"href","/docs/transformers/pr_17787/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(qZ,"href","/docs/transformers/pr_17787/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(jZ,"href","/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(c5,"id","transformers.FlaxAutoModelForCausalLM"),c(c5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(c5,"href","#transformers.FlaxAutoModelForCausalLM"),c(Wc,"class","relative group"),c(DZ,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GZ,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OZ,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VZ,"href","/docs/transformers/pr_17787/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(XZ,"href","/docs/transformers/pr_17787/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(zZ,"href","/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(QZ,"href","/docs/transformers/pr_17787/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(WZ,"href","/docs/transformers/pr_17787/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(HZ,"href","/docs/transformers/pr_17787/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(UZ,"href","/docs/transformers/pr_17787/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(JZ,"href","/docs/transformers/pr_17787/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(YZ,"href","/docs/transformers/pr_17787/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(KZ,"href","/docs/transformers/pr_17787/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(E5,"id","transformers.FlaxAutoModelForPreTraining"),c(E5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(E5,"href","#transformers.FlaxAutoModelForPreTraining"),c(Jc,"class","relative group"),c(ZZ,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eee,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oee,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ree,"href","/docs/transformers/pr_17787/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(tee,"href","/docs/transformers/pr_17787/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(aee,"href","/docs/transformers/pr_17787/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(nee,"href","/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(see,"href","/docs/transformers/pr_17787/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(lee,"href","/docs/transformers/pr_17787/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(iee,"href","/docs/transformers/pr_17787/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(dee,"href","/docs/transformers/pr_17787/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(cee,"href","/docs/transformers/pr_17787/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(fee,"href","/docs/transformers/pr_17787/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(mee,"href","/docs/transformers/pr_17787/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(gee,"href","/docs/transformers/pr_17787/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(hee,"href","/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(j5,"id","transformers.FlaxAutoModelForMaskedLM"),c(j5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(j5,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Zc,"class","relative group"),c(pee,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_ee,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uee,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bee,"href","/docs/transformers/pr_17787/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(vee,"href","/docs/transformers/pr_17787/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(Fee,"href","/docs/transformers/pr_17787/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(Tee,"href","/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(Mee,"href","/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(Eee,"href","/docs/transformers/pr_17787/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(Cee,"href","/docs/transformers/pr_17787/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(wee,"href","/docs/transformers/pr_17787/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(Aee,"href","/docs/transformers/pr_17787/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(Lee,"href","/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(K5,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(K5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K5,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(rf,"class","relative group"),c(yee,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xee,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($ee,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kee,"href","/docs/transformers/pr_17787/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(See,"href","/docs/transformers/pr_17787/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(Ree,"href","/docs/transformers/pr_17787/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(Pee,"href","/docs/transformers/pr_17787/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(Bee,"href","/docs/transformers/pr_17787/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(Iee,"href","/docs/transformers/pr_17787/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(Nee,"href","/docs/transformers/pr_17787/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(qee,"href","/docs/transformers/pr_17787/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(jee,"href","/docs/transformers/pr_17787/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(Dee,"href","/docs/transformers/pr_17787/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(f0,"id","transformers.FlaxAutoModelForSequenceClassification"),c(f0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f0,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(nf,"class","relative group"),c(Gee,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Oee,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Vee,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xee,"href","/docs/transformers/pr_17787/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(zee,"href","/docs/transformers/pr_17787/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(Qee,"href","/docs/transformers/pr_17787/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(Wee,"href","/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(Hee,"href","/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(Uee,"href","/docs/transformers/pr_17787/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(Jee,"href","/docs/transformers/pr_17787/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(Yee,"href","/docs/transformers/pr_17787/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(Kee,"href","/docs/transformers/pr_17787/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(Zee,"href","/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(C0,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(C0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C0,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(df,"class","relative group"),c(eoe,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ooe,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(roe,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(toe,"href","/docs/transformers/pr_17787/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(aoe,"href","/docs/transformers/pr_17787/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(noe,"href","/docs/transformers/pr_17787/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(soe,"href","/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(loe,"href","/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(ioe,"href","/docs/transformers/pr_17787/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(doe,"href","/docs/transformers/pr_17787/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(coe,"href","/docs/transformers/pr_17787/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(foe,"href","/docs/transformers/pr_17787/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(moe,"href","/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(N0,"id","transformers.FlaxAutoModelForTokenClassification"),c(N0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N0,"href","#transformers.FlaxAutoModelForTokenClassification"),c(mf,"class","relative group"),c(goe,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hoe,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(poe,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_oe,"href","/docs/transformers/pr_17787/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(uoe,"href","/docs/transformers/pr_17787/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(boe,"href","/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(voe,"href","/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(Foe,"href","/docs/transformers/pr_17787/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(Toe,"href","/docs/transformers/pr_17787/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(Moe,"href","/docs/transformers/pr_17787/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(Eoe,"href","/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H0,"id","transformers.FlaxAutoModelForMultipleChoice"),c(H0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H0,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(pf,"class","relative group"),c(Coe,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(woe,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Aoe,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Loe,"href","/docs/transformers/pr_17787/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(yoe,"href","/docs/transformers/pr_17787/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(xoe,"href","/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c($oe,"href","/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(koe,"href","/docs/transformers/pr_17787/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(Soe,"href","/docs/transformers/pr_17787/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(Roe,"href","/docs/transformers/pr_17787/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(Poe,"href","/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nw,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(nw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nw,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(bf,"class","relative group"),c(Boe,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ioe,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Noe,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qoe,"href","/docs/transformers/pr_17787/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dw,"id","transformers.FlaxAutoModelForImageClassification"),c(dw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dw,"href","#transformers.FlaxAutoModelForImageClassification"),c(Tf,"class","relative group"),c(joe,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Doe,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Goe,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ooe,"href","/docs/transformers/pr_17787/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(Voe,"href","/docs/transformers/pr_17787/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hw,"id","transformers.FlaxAutoModelForVision2Seq"),c(hw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hw,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Cf,"class","relative group"),c(Xoe,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zoe,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Qoe,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Woe,"href","/docs/transformers/pr_17787/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Eo),e(Eo,Ei),b(f,$f,u),b(f,at,u),e(at,Ci),e(at,wi),e(wi,q6),e(at,kf),b(f,Oe,u),b(f,Qe,u),e(Qe,Ai),e(Qe,Rn),e(Rn,j6),e(Qe,Pn),e(Qe,Bn),e(Bn,D6),e(Qe,Li),e(Qe,In),e(In,G6),e(Qe,yi),b(f,Sf,u),M(xa,f,u),b(f,We,u),b(f,Ae,u),e(Ae,uS),e(Ae,xi),e(xi,bS),e(Ae,vS),b(f,Co,u),b(f,$a,u),e($a,FS),e($a,Rf),e(Rf,TS),e($a,eWe),b(f,jOe,u),b(f,$i,u),e($i,Pf),e(Pf,Ote),M(O6,Ote,null),e($i,oWe),e($i,Vte),e(Vte,rWe),b(f,DOe,u),b(f,Nn,u),e(Nn,tWe),e(Nn,Xte),e(Xte,aWe),e(Nn,nWe),e(Nn,zte),e(zte,sWe),e(Nn,lWe),b(f,GOe,u),M(V6,f,u),b(f,OOe,u),b(f,MS,u),e(MS,iWe),b(f,VOe,u),M(Bf,f,u),b(f,XOe,u),b(f,ki,u),e(ki,If),e(If,Qte),M(X6,Qte,null),e(ki,dWe),e(ki,Wte),e(Wte,cWe),b(f,zOe,u),b(f,wo,u),M(z6,wo,null),e(wo,fWe),e(wo,Q6),e(Q6,mWe),e(Q6,ES),e(ES,gWe),e(Q6,hWe),e(wo,pWe),e(wo,W6),e(W6,_We),e(W6,Hte),e(Hte,uWe),e(W6,bWe),e(wo,vWe),e(wo,Ar),M(H6,Ar,null),e(Ar,FWe),e(Ar,Ute),e(Ute,TWe),e(Ar,MWe),e(Ar,Si),e(Si,EWe),e(Si,Jte),e(Jte,CWe),e(Si,wWe),e(Si,Yte),e(Yte,AWe),e(Si,LWe),e(Ar,yWe),e(Ar,A),e(A,Nf),e(Nf,Kte),e(Kte,xWe),e(Nf,$We),e(Nf,CS),e(CS,kWe),e(Nf,SWe),e(A,RWe),e(A,qf),e(qf,Zte),e(Zte,PWe),e(qf,BWe),e(qf,wS),e(wS,IWe),e(qf,NWe),e(A,qWe),e(A,jf),e(jf,eae),e(eae,jWe),e(jf,DWe),e(jf,AS),e(AS,GWe),e(jf,OWe),e(A,VWe),e(A,Df),e(Df,oae),e(oae,XWe),e(Df,zWe),e(Df,LS),e(LS,QWe),e(Df,WWe),e(A,HWe),e(A,Gf),e(Gf,rae),e(rae,UWe),e(Gf,JWe),e(Gf,yS),e(yS,YWe),e(Gf,KWe),e(A,ZWe),e(A,Of),e(Of,tae),e(tae,eHe),e(Of,oHe),e(Of,xS),e(xS,rHe),e(Of,tHe),e(A,aHe),e(A,Vf),e(Vf,aae),e(aae,nHe),e(Vf,sHe),e(Vf,$S),e($S,lHe),e(Vf,iHe),e(A,dHe),e(A,Xf),e(Xf,nae),e(nae,cHe),e(Xf,fHe),e(Xf,kS),e(kS,mHe),e(Xf,gHe),e(A,hHe),e(A,zf),e(zf,sae),e(sae,pHe),e(zf,_He),e(zf,SS),e(SS,uHe),e(zf,bHe),e(A,vHe),e(A,Qf),e(Qf,lae),e(lae,FHe),e(Qf,THe),e(Qf,RS),e(RS,MHe),e(Qf,EHe),e(A,CHe),e(A,Wf),e(Wf,iae),e(iae,wHe),e(Wf,AHe),e(Wf,PS),e(PS,LHe),e(Wf,yHe),e(A,xHe),e(A,Hf),e(Hf,dae),e(dae,$He),e(Hf,kHe),e(Hf,BS),e(BS,SHe),e(Hf,RHe),e(A,PHe),e(A,Uf),e(Uf,cae),e(cae,BHe),e(Uf,IHe),e(Uf,IS),e(IS,NHe),e(Uf,qHe),e(A,jHe),e(A,Jf),e(Jf,fae),e(fae,DHe),e(Jf,GHe),e(Jf,NS),e(NS,OHe),e(Jf,VHe),e(A,XHe),e(A,Yf),e(Yf,mae),e(mae,zHe),e(Yf,QHe),e(Yf,qS),e(qS,WHe),e(Yf,HHe),e(A,UHe),e(A,Kf),e(Kf,gae),e(gae,JHe),e(Kf,YHe),e(Kf,jS),e(jS,KHe),e(Kf,ZHe),e(A,eUe),e(A,Zf),e(Zf,hae),e(hae,oUe),e(Zf,rUe),e(Zf,DS),e(DS,tUe),e(Zf,aUe),e(A,nUe),e(A,em),e(em,pae),e(pae,sUe),e(em,lUe),e(em,GS),e(GS,iUe),e(em,dUe),e(A,cUe),e(A,om),e(om,_ae),e(_ae,fUe),e(om,mUe),e(om,OS),e(OS,gUe),e(om,hUe),e(A,pUe),e(A,rm),e(rm,uae),e(uae,_Ue),e(rm,uUe),e(rm,VS),e(VS,bUe),e(rm,vUe),e(A,FUe),e(A,tm),e(tm,bae),e(bae,TUe),e(tm,MUe),e(tm,XS),e(XS,EUe),e(tm,CUe),e(A,wUe),e(A,am),e(am,vae),e(vae,AUe),e(am,LUe),e(am,zS),e(zS,yUe),e(am,xUe),e(A,$Ue),e(A,nm),e(nm,Fae),e(Fae,kUe),e(nm,SUe),e(nm,QS),e(QS,RUe),e(nm,PUe),e(A,BUe),e(A,sm),e(sm,Tae),e(Tae,IUe),e(sm,NUe),e(sm,WS),e(WS,qUe),e(sm,jUe),e(A,DUe),e(A,lm),e(lm,Mae),e(Mae,GUe),e(lm,OUe),e(lm,HS),e(HS,VUe),e(lm,XUe),e(A,zUe),e(A,im),e(im,Eae),e(Eae,QUe),e(im,WUe),e(im,US),e(US,HUe),e(im,UUe),e(A,JUe),e(A,dm),e(dm,Cae),e(Cae,YUe),e(dm,KUe),e(dm,JS),e(JS,ZUe),e(dm,eJe),e(A,oJe),e(A,cm),e(cm,wae),e(wae,rJe),e(cm,tJe),e(cm,YS),e(YS,aJe),e(cm,nJe),e(A,sJe),e(A,fm),e(fm,Aae),e(Aae,lJe),e(fm,iJe),e(fm,KS),e(KS,dJe),e(fm,cJe),e(A,fJe),e(A,mm),e(mm,Lae),e(Lae,mJe),e(mm,gJe),e(mm,ZS),e(ZS,hJe),e(mm,pJe),e(A,_Je),e(A,gm),e(gm,yae),e(yae,uJe),e(gm,bJe),e(gm,eR),e(eR,vJe),e(gm,FJe),e(A,TJe),e(A,hm),e(hm,xae),e(xae,MJe),e(hm,EJe),e(hm,oR),e(oR,CJe),e(hm,wJe),e(A,AJe),e(A,pm),e(pm,$ae),e($ae,LJe),e(pm,yJe),e(pm,rR),e(rR,xJe),e(pm,$Je),e(A,kJe),e(A,_m),e(_m,kae),e(kae,SJe),e(_m,RJe),e(_m,tR),e(tR,PJe),e(_m,BJe),e(A,IJe),e(A,um),e(um,Sae),e(Sae,NJe),e(um,qJe),e(um,aR),e(aR,jJe),e(um,DJe),e(A,GJe),e(A,bm),e(bm,Rae),e(Rae,OJe),e(bm,VJe),e(bm,nR),e(nR,XJe),e(bm,zJe),e(A,QJe),e(A,vm),e(vm,Pae),e(Pae,WJe),e(vm,HJe),e(vm,sR),e(sR,UJe),e(vm,JJe),e(A,YJe),e(A,Fm),e(Fm,Bae),e(Bae,KJe),e(Fm,ZJe),e(Fm,lR),e(lR,eYe),e(Fm,oYe),e(A,rYe),e(A,Tm),e(Tm,Iae),e(Iae,tYe),e(Tm,aYe),e(Tm,iR),e(iR,nYe),e(Tm,sYe),e(A,lYe),e(A,Mm),e(Mm,Nae),e(Nae,iYe),e(Mm,dYe),e(Mm,dR),e(dR,cYe),e(Mm,fYe),e(A,mYe),e(A,Em),e(Em,qae),e(qae,gYe),e(Em,hYe),e(Em,cR),e(cR,pYe),e(Em,_Ye),e(A,uYe),e(A,Cm),e(Cm,jae),e(jae,bYe),e(Cm,vYe),e(Cm,fR),e(fR,FYe),e(Cm,TYe),e(A,MYe),e(A,wm),e(wm,Dae),e(Dae,EYe),e(wm,CYe),e(wm,mR),e(mR,wYe),e(wm,AYe),e(A,LYe),e(A,Am),e(Am,Gae),e(Gae,yYe),e(Am,xYe),e(Am,gR),e(gR,$Ye),e(Am,kYe),e(A,SYe),e(A,Lm),e(Lm,Oae),e(Oae,RYe),e(Lm,PYe),e(Lm,hR),e(hR,BYe),e(Lm,IYe),e(A,NYe),e(A,ym),e(ym,Vae),e(Vae,qYe),e(ym,jYe),e(ym,pR),e(pR,DYe),e(ym,GYe),e(A,OYe),e(A,xm),e(xm,Xae),e(Xae,VYe),e(xm,XYe),e(xm,_R),e(_R,zYe),e(xm,QYe),e(A,WYe),e(A,$m),e($m,zae),e(zae,HYe),e($m,UYe),e($m,uR),e(uR,JYe),e($m,YYe),e(A,KYe),e(A,km),e(km,Qae),e(Qae,ZYe),e(km,eKe),e(km,bR),e(bR,oKe),e(km,rKe),e(A,tKe),e(A,Sm),e(Sm,Wae),e(Wae,aKe),e(Sm,nKe),e(Sm,vR),e(vR,sKe),e(Sm,lKe),e(A,iKe),e(A,Rm),e(Rm,Hae),e(Hae,dKe),e(Rm,cKe),e(Rm,FR),e(FR,fKe),e(Rm,mKe),e(A,gKe),e(A,Pm),e(Pm,Uae),e(Uae,hKe),e(Pm,pKe),e(Pm,TR),e(TR,_Ke),e(Pm,uKe),e(A,bKe),e(A,Bm),e(Bm,Jae),e(Jae,vKe),e(Bm,FKe),e(Bm,MR),e(MR,TKe),e(Bm,MKe),e(A,EKe),e(A,Im),e(Im,Yae),e(Yae,CKe),e(Im,wKe),e(Im,ER),e(ER,AKe),e(Im,LKe),e(A,yKe),e(A,Nm),e(Nm,Kae),e(Kae,xKe),e(Nm,$Ke),e(Nm,CR),e(CR,kKe),e(Nm,SKe),e(A,RKe),e(A,qm),e(qm,Zae),e(Zae,PKe),e(qm,BKe),e(qm,wR),e(wR,IKe),e(qm,NKe),e(A,qKe),e(A,jm),e(jm,ene),e(ene,jKe),e(jm,DKe),e(jm,AR),e(AR,GKe),e(jm,OKe),e(A,VKe),e(A,Dm),e(Dm,one),e(one,XKe),e(Dm,zKe),e(Dm,LR),e(LR,QKe),e(Dm,WKe),e(A,HKe),e(A,Gm),e(Gm,rne),e(rne,UKe),e(Gm,JKe),e(Gm,yR),e(yR,YKe),e(Gm,KKe),e(A,ZKe),e(A,Om),e(Om,tne),e(tne,eZe),e(Om,oZe),e(Om,xR),e(xR,rZe),e(Om,tZe),e(A,aZe),e(A,Vm),e(Vm,ane),e(ane,nZe),e(Vm,sZe),e(Vm,$R),e($R,lZe),e(Vm,iZe),e(A,dZe),e(A,Xm),e(Xm,nne),e(nne,cZe),e(Xm,fZe),e(Xm,kR),e(kR,mZe),e(Xm,gZe),e(A,hZe),e(A,zm),e(zm,sne),e(sne,pZe),e(zm,_Ze),e(zm,SR),e(SR,uZe),e(zm,bZe),e(A,vZe),e(A,Qm),e(Qm,lne),e(lne,FZe),e(Qm,TZe),e(Qm,RR),e(RR,MZe),e(Qm,EZe),e(A,CZe),e(A,Wm),e(Wm,ine),e(ine,wZe),e(Wm,AZe),e(Wm,PR),e(PR,LZe),e(Wm,yZe),e(A,xZe),e(A,Hm),e(Hm,dne),e(dne,$Ze),e(Hm,kZe),e(Hm,BR),e(BR,SZe),e(Hm,RZe),e(A,PZe),e(A,Um),e(Um,cne),e(cne,BZe),e(Um,IZe),e(Um,IR),e(IR,NZe),e(Um,qZe),e(A,jZe),e(A,Jm),e(Jm,fne),e(fne,DZe),e(Jm,GZe),e(Jm,NR),e(NR,OZe),e(Jm,VZe),e(A,XZe),e(A,Ym),e(Ym,mne),e(mne,zZe),e(Ym,QZe),e(Ym,qR),e(qR,WZe),e(Ym,HZe),e(A,UZe),e(A,Km),e(Km,gne),e(gne,JZe),e(Km,YZe),e(Km,jR),e(jR,KZe),e(Km,ZZe),e(A,eeo),e(A,Zm),e(Zm,hne),e(hne,oeo),e(Zm,reo),e(Zm,DR),e(DR,teo),e(Zm,aeo),e(A,neo),e(A,eg),e(eg,pne),e(pne,seo),e(eg,leo),e(eg,GR),e(GR,ieo),e(eg,deo),e(A,ceo),e(A,og),e(og,_ne),e(_ne,feo),e(og,meo),e(og,OR),e(OR,geo),e(og,heo),e(A,peo),e(A,rg),e(rg,une),e(une,_eo),e(rg,ueo),e(rg,VR),e(VR,beo),e(rg,veo),e(A,Feo),e(A,tg),e(tg,bne),e(bne,Teo),e(tg,Meo),e(tg,XR),e(XR,Eeo),e(tg,Ceo),e(A,weo),e(A,ag),e(ag,vne),e(vne,Aeo),e(ag,Leo),e(ag,zR),e(zR,yeo),e(ag,xeo),e(A,$eo),e(A,ng),e(ng,Fne),e(Fne,keo),e(ng,Seo),e(ng,QR),e(QR,Reo),e(ng,Peo),e(A,Beo),e(A,sg),e(sg,Tne),e(Tne,Ieo),e(sg,Neo),e(sg,WR),e(WR,qeo),e(sg,jeo),e(A,Deo),e(A,lg),e(lg,Mne),e(Mne,Geo),e(lg,Oeo),e(lg,HR),e(HR,Veo),e(lg,Xeo),e(A,zeo),e(A,ig),e(ig,Ene),e(Ene,Qeo),e(ig,Weo),e(ig,UR),e(UR,Heo),e(ig,Ueo),e(A,Jeo),e(A,dg),e(dg,Cne),e(Cne,Yeo),e(dg,Keo),e(dg,JR),e(JR,Zeo),e(dg,eoo),e(A,ooo),e(A,cg),e(cg,wne),e(wne,roo),e(cg,too),e(cg,YR),e(YR,aoo),e(cg,noo),e(A,soo),e(A,fg),e(fg,Ane),e(Ane,loo),e(fg,ioo),e(fg,KR),e(KR,doo),e(fg,coo),e(A,foo),e(A,mg),e(mg,Lne),e(Lne,moo),e(mg,goo),e(mg,ZR),e(ZR,hoo),e(mg,poo),e(A,_oo),e(A,gg),e(gg,yne),e(yne,uoo),e(gg,boo),e(gg,eP),e(eP,voo),e(gg,Foo),e(A,Too),e(A,hg),e(hg,xne),e(xne,Moo),e(hg,Eoo),e(hg,oP),e(oP,Coo),e(hg,woo),e(A,Aoo),e(A,pg),e(pg,$ne),e($ne,Loo),e(pg,yoo),e(pg,rP),e(rP,xoo),e(pg,$oo),e(A,koo),e(A,_g),e(_g,kne),e(kne,Soo),e(_g,Roo),e(_g,tP),e(tP,Poo),e(_g,Boo),e(A,Ioo),e(A,ug),e(ug,Sne),e(Sne,Noo),e(ug,qoo),e(ug,aP),e(aP,joo),e(ug,Doo),e(A,Goo),e(A,bg),e(bg,Rne),e(Rne,Ooo),e(bg,Voo),e(bg,nP),e(nP,Xoo),e(bg,zoo),e(A,Qoo),e(A,vg),e(vg,Pne),e(Pne,Woo),e(vg,Hoo),e(vg,sP),e(sP,Uoo),e(vg,Joo),e(A,Yoo),e(A,Fg),e(Fg,Bne),e(Bne,Koo),e(Fg,Zoo),e(Fg,lP),e(lP,ero),e(Fg,oro),e(A,rro),e(A,Tg),e(Tg,Ine),e(Ine,tro),e(Tg,aro),e(Tg,iP),e(iP,nro),e(Tg,sro),e(A,lro),e(A,Mg),e(Mg,Nne),e(Nne,iro),e(Mg,dro),e(Mg,dP),e(dP,cro),e(Mg,fro),e(A,mro),e(A,Eg),e(Eg,qne),e(qne,gro),e(Eg,hro),e(Eg,cP),e(cP,pro),e(Eg,_ro),e(A,uro),e(A,Cg),e(Cg,jne),e(jne,bro),e(Cg,vro),e(Cg,fP),e(fP,Fro),e(Cg,Tro),e(A,Mro),e(A,wg),e(wg,Dne),e(Dne,Ero),e(wg,Cro),e(wg,mP),e(mP,wro),e(wg,Aro),e(A,Lro),e(A,Ag),e(Ag,Gne),e(Gne,yro),e(Ag,xro),e(Ag,gP),e(gP,$ro),e(Ag,kro),e(A,Sro),e(A,Lg),e(Lg,One),e(One,Rro),e(Lg,Pro),e(Lg,hP),e(hP,Bro),e(Lg,Iro),e(A,Nro),e(A,yg),e(yg,Vne),e(Vne,qro),e(yg,jro),e(yg,pP),e(pP,Dro),e(yg,Gro),e(A,Oro),e(A,xg),e(xg,Xne),e(Xne,Vro),e(xg,Xro),e(xg,_P),e(_P,zro),e(xg,Qro),e(A,Wro),e(A,$g),e($g,zne),e(zne,Hro),e($g,Uro),e($g,uP),e(uP,Jro),e($g,Yro),e(A,Kro),e(A,kg),e(kg,Qne),e(Qne,Zro),e(kg,eto),e(kg,bP),e(bP,oto),e(kg,rto),e(A,tto),e(A,Sg),e(Sg,Wne),e(Wne,ato),e(Sg,nto),e(Sg,vP),e(vP,sto),e(Sg,lto),e(A,ito),e(A,Rg),e(Rg,Hne),e(Hne,dto),e(Rg,cto),e(Rg,FP),e(FP,fto),e(Rg,mto),e(A,gto),e(A,Pg),e(Pg,Une),e(Une,hto),e(Pg,pto),e(Pg,TP),e(TP,_to),e(Pg,uto),e(A,bto),e(A,Bg),e(Bg,Jne),e(Jne,vto),e(Bg,Fto),e(Bg,MP),e(MP,Tto),e(Bg,Mto),e(A,Eto),e(A,Ig),e(Ig,Yne),e(Yne,Cto),e(Ig,wto),e(Ig,EP),e(EP,Ato),e(Ig,Lto),e(A,yto),e(A,Ng),e(Ng,Kne),e(Kne,xto),e(Ng,$to),e(Ng,CP),e(CP,kto),e(Ng,Sto),e(A,Rto),e(A,qg),e(qg,Zne),e(Zne,Pto),e(qg,Bto),e(qg,wP),e(wP,Ito),e(qg,Nto),e(A,qto),e(A,jg),e(jg,ese),e(ese,jto),e(jg,Dto),e(jg,AP),e(AP,Gto),e(jg,Oto),e(A,Vto),e(A,Dg),e(Dg,ose),e(ose,Xto),e(Dg,zto),e(Dg,LP),e(LP,Qto),e(Dg,Wto),e(A,Hto),e(A,Gg),e(Gg,rse),e(rse,Uto),e(Gg,Jto),e(Gg,yP),e(yP,Yto),e(Gg,Kto),e(A,Zto),e(A,Og),e(Og,tse),e(tse,eao),e(Og,oao),e(Og,xP),e(xP,rao),e(Og,tao),e(A,aao),e(A,Vg),e(Vg,ase),e(ase,nao),e(Vg,sao),e(Vg,$P),e($P,lao),e(Vg,iao),e(A,dao),e(A,Xg),e(Xg,nse),e(nse,cao),e(Xg,fao),e(Xg,kP),e(kP,mao),e(Xg,gao),e(Ar,hao),M(zg,Ar,null),e(wo,pao),e(wo,Qg),M(U6,Qg,null),e(Qg,_ao),e(Qg,sse),e(sse,uao),b(f,QOe,u),b(f,Ri,u),e(Ri,Wg),e(Wg,lse),M(J6,lse,null),e(Ri,bao),e(Ri,ise),e(ise,vao),b(f,WOe,u),b(f,Ao,u),M(Y6,Ao,null),e(Ao,Fao),e(Ao,K6),e(K6,Tao),e(K6,SP),e(SP,Mao),e(K6,Eao),e(Ao,Cao),e(Ao,Z6),e(Z6,wao),e(Z6,dse),e(dse,Aao),e(Z6,Lao),e(Ao,yao),e(Ao,Lr),M(eL,Lr,null),e(Lr,xao),e(Lr,cse),e(cse,$ao),e(Lr,kao),e(Lr,ka),e(ka,Sao),e(ka,fse),e(fse,Rao),e(ka,Pao),e(ka,mse),e(mse,Bao),e(ka,Iao),e(ka,gse),e(gse,Nao),e(ka,qao),e(Lr,jao),e(Lr,k),e(k,qn),e(qn,hse),e(hse,Dao),e(qn,Gao),e(qn,RP),e(RP,Oao),e(qn,Vao),e(qn,PP),e(PP,Xao),e(qn,zao),e(k,Qao),e(k,jn),e(jn,pse),e(pse,Wao),e(jn,Hao),e(jn,BP),e(BP,Uao),e(jn,Jao),e(jn,IP),e(IP,Yao),e(jn,Kao),e(k,Zao),e(k,Dn),e(Dn,_se),e(_se,eno),e(Dn,ono),e(Dn,NP),e(NP,rno),e(Dn,tno),e(Dn,qP),e(qP,ano),e(Dn,nno),e(k,sno),e(k,Hg),e(Hg,use),e(use,lno),e(Hg,ino),e(Hg,jP),e(jP,dno),e(Hg,cno),e(k,fno),e(k,Gn),e(Gn,bse),e(bse,mno),e(Gn,gno),e(Gn,DP),e(DP,hno),e(Gn,pno),e(Gn,GP),e(GP,_no),e(Gn,uno),e(k,bno),e(k,Ug),e(Ug,vse),e(vse,vno),e(Ug,Fno),e(Ug,OP),e(OP,Tno),e(Ug,Mno),e(k,Eno),e(k,Jg),e(Jg,Fse),e(Fse,Cno),e(Jg,wno),e(Jg,VP),e(VP,Ano),e(Jg,Lno),e(k,yno),e(k,Yg),e(Yg,Tse),e(Tse,xno),e(Yg,$no),e(Yg,XP),e(XP,kno),e(Yg,Sno),e(k,Rno),e(k,On),e(On,Mse),e(Mse,Pno),e(On,Bno),e(On,zP),e(zP,Ino),e(On,Nno),e(On,QP),e(QP,qno),e(On,jno),e(k,Dno),e(k,Vn),e(Vn,Ese),e(Ese,Gno),e(Vn,Ono),e(Vn,WP),e(WP,Vno),e(Vn,Xno),e(Vn,HP),e(HP,zno),e(Vn,Qno),e(k,Wno),e(k,Xn),e(Xn,Cse),e(Cse,Hno),e(Xn,Uno),e(Xn,UP),e(UP,Jno),e(Xn,Yno),e(Xn,JP),e(JP,Kno),e(Xn,Zno),e(k,eso),e(k,Kg),e(Kg,wse),e(wse,oso),e(Kg,rso),e(Kg,YP),e(YP,tso),e(Kg,aso),e(k,nso),e(k,Zg),e(Zg,Ase),e(Ase,sso),e(Zg,lso),e(Zg,KP),e(KP,iso),e(Zg,dso),e(k,cso),e(k,eh),e(eh,Lse),e(Lse,fso),e(eh,mso),e(eh,ZP),e(ZP,gso),e(eh,hso),e(k,pso),e(k,zn),e(zn,yse),e(yse,_so),e(zn,uso),e(zn,eB),e(eB,bso),e(zn,vso),e(zn,oB),e(oB,Fso),e(zn,Tso),e(k,Mso),e(k,oh),e(oh,xse),e(xse,Eso),e(oh,Cso),e(oh,rB),e(rB,wso),e(oh,Aso),e(k,Lso),e(k,Qn),e(Qn,$se),e($se,yso),e(Qn,xso),e(Qn,tB),e(tB,$so),e(Qn,kso),e(Qn,aB),e(aB,Sso),e(Qn,Rso),e(k,Pso),e(k,Wn),e(Wn,kse),e(kse,Bso),e(Wn,Iso),e(Wn,nB),e(nB,Nso),e(Wn,qso),e(Wn,sB),e(sB,jso),e(Wn,Dso),e(k,Gso),e(k,Hn),e(Hn,Sse),e(Sse,Oso),e(Hn,Vso),e(Hn,lB),e(lB,Xso),e(Hn,zso),e(Hn,iB),e(iB,Qso),e(Hn,Wso),e(k,Hso),e(k,Un),e(Un,Rse),e(Rse,Uso),e(Un,Jso),e(Un,dB),e(dB,Yso),e(Un,Kso),e(Un,cB),e(cB,Zso),e(Un,elo),e(k,olo),e(k,rh),e(rh,Pse),e(Pse,rlo),e(rh,tlo),e(rh,fB),e(fB,alo),e(rh,nlo),e(k,slo),e(k,Jn),e(Jn,Bse),e(Bse,llo),e(Jn,ilo),e(Jn,mB),e(mB,dlo),e(Jn,clo),e(Jn,gB),e(gB,flo),e(Jn,mlo),e(k,glo),e(k,Yn),e(Yn,Ise),e(Ise,hlo),e(Yn,plo),e(Yn,hB),e(hB,_lo),e(Yn,ulo),e(Yn,pB),e(pB,blo),e(Yn,vlo),e(k,Flo),e(k,Kn),e(Kn,Nse),e(Nse,Tlo),e(Kn,Mlo),e(Kn,_B),e(_B,Elo),e(Kn,Clo),e(Kn,uB),e(uB,wlo),e(Kn,Alo),e(k,Llo),e(k,Zn),e(Zn,qse),e(qse,ylo),e(Zn,xlo),e(Zn,bB),e(bB,$lo),e(Zn,klo),e(Zn,vB),e(vB,Slo),e(Zn,Rlo),e(k,Plo),e(k,es),e(es,jse),e(jse,Blo),e(es,Ilo),e(es,FB),e(FB,Nlo),e(es,qlo),e(es,TB),e(TB,jlo),e(es,Dlo),e(k,Glo),e(k,os),e(os,Dse),e(Dse,Olo),e(os,Vlo),e(os,MB),e(MB,Xlo),e(os,zlo),e(os,EB),e(EB,Qlo),e(os,Wlo),e(k,Hlo),e(k,th),e(th,Gse),e(Gse,Ulo),e(th,Jlo),e(th,CB),e(CB,Ylo),e(th,Klo),e(k,Zlo),e(k,rs),e(rs,Ose),e(Ose,eio),e(rs,oio),e(rs,wB),e(wB,rio),e(rs,tio),e(rs,AB),e(AB,aio),e(rs,nio),e(k,sio),e(k,ah),e(ah,Vse),e(Vse,lio),e(ah,iio),e(ah,LB),e(LB,dio),e(ah,cio),e(k,fio),e(k,ts),e(ts,Xse),e(Xse,mio),e(ts,gio),e(ts,yB),e(yB,hio),e(ts,pio),e(ts,xB),e(xB,_io),e(ts,uio),e(k,bio),e(k,as),e(as,zse),e(zse,vio),e(as,Fio),e(as,$B),e($B,Tio),e(as,Mio),e(as,kB),e(kB,Eio),e(as,Cio),e(k,wio),e(k,ns),e(ns,Qse),e(Qse,Aio),e(ns,Lio),e(ns,SB),e(SB,yio),e(ns,xio),e(ns,RB),e(RB,$io),e(ns,kio),e(k,Sio),e(k,nh),e(nh,Wse),e(Wse,Rio),e(nh,Pio),e(nh,PB),e(PB,Bio),e(nh,Iio),e(k,Nio),e(k,ss),e(ss,Hse),e(Hse,qio),e(ss,jio),e(ss,BB),e(BB,Dio),e(ss,Gio),e(ss,IB),e(IB,Oio),e(ss,Vio),e(k,Xio),e(k,ls),e(ls,Use),e(Use,zio),e(ls,Qio),e(ls,NB),e(NB,Wio),e(ls,Hio),e(ls,qB),e(qB,Uio),e(ls,Jio),e(k,Yio),e(k,sh),e(sh,Jse),e(Jse,Kio),e(sh,Zio),e(sh,jB),e(jB,edo),e(sh,odo),e(k,rdo),e(k,is),e(is,Yse),e(Yse,tdo),e(is,ado),e(is,DB),e(DB,ndo),e(is,sdo),e(is,GB),e(GB,ldo),e(is,ido),e(k,ddo),e(k,ds),e(ds,Kse),e(Kse,cdo),e(ds,fdo),e(ds,OB),e(OB,mdo),e(ds,gdo),e(ds,VB),e(VB,hdo),e(ds,pdo),e(k,_do),e(k,cs),e(cs,Zse),e(Zse,udo),e(cs,bdo),e(cs,XB),e(XB,vdo),e(cs,Fdo),e(cs,zB),e(zB,Tdo),e(cs,Mdo),e(k,Edo),e(k,fs),e(fs,ele),e(ele,Cdo),e(fs,wdo),e(fs,QB),e(QB,Ado),e(fs,Ldo),e(fs,WB),e(WB,ydo),e(fs,xdo),e(k,$do),e(k,ms),e(ms,ole),e(ole,kdo),e(ms,Sdo),e(ms,HB),e(HB,Rdo),e(ms,Pdo),e(ms,UB),e(UB,Bdo),e(ms,Ido),e(k,Ndo),e(k,gs),e(gs,rle),e(rle,qdo),e(gs,jdo),e(gs,JB),e(JB,Ddo),e(gs,Gdo),e(gs,YB),e(YB,Odo),e(gs,Vdo),e(k,Xdo),e(k,hs),e(hs,tle),e(tle,zdo),e(hs,Qdo),e(hs,KB),e(KB,Wdo),e(hs,Hdo),e(hs,ZB),e(ZB,Udo),e(hs,Jdo),e(k,Ydo),e(k,ps),e(ps,ale),e(ale,Kdo),e(ps,Zdo),e(ps,eI),e(eI,eco),e(ps,oco),e(ps,oI),e(oI,rco),e(ps,tco),e(k,aco),e(k,lh),e(lh,nle),e(nle,nco),e(lh,sco),e(lh,rI),e(rI,lco),e(lh,ico),e(k,dco),e(k,_s),e(_s,sle),e(sle,cco),e(_s,fco),e(_s,tI),e(tI,mco),e(_s,gco),e(_s,aI),e(aI,hco),e(_s,pco),e(k,_co),e(k,ih),e(ih,lle),e(lle,uco),e(ih,bco),e(ih,nI),e(nI,vco),e(ih,Fco),e(k,Tco),e(k,dh),e(dh,ile),e(ile,Mco),e(dh,Eco),e(dh,sI),e(sI,Cco),e(dh,wco),e(k,Aco),e(k,us),e(us,dle),e(dle,Lco),e(us,yco),e(us,lI),e(lI,xco),e(us,$co),e(us,iI),e(iI,kco),e(us,Sco),e(k,Rco),e(k,bs),e(bs,cle),e(cle,Pco),e(bs,Bco),e(bs,dI),e(dI,Ico),e(bs,Nco),e(bs,cI),e(cI,qco),e(bs,jco),e(k,Dco),e(k,vs),e(vs,fle),e(fle,Gco),e(vs,Oco),e(vs,fI),e(fI,Vco),e(vs,Xco),e(vs,mI),e(mI,zco),e(vs,Qco),e(k,Wco),e(k,ch),e(ch,mle),e(mle,Hco),e(ch,Uco),e(ch,gI),e(gI,Jco),e(ch,Yco),e(k,Kco),e(k,Fs),e(Fs,gle),e(gle,Zco),e(Fs,efo),e(Fs,hI),e(hI,ofo),e(Fs,rfo),e(Fs,pI),e(pI,tfo),e(Fs,afo),e(k,nfo),e(k,Ts),e(Ts,hle),e(hle,sfo),e(Ts,lfo),e(Ts,_I),e(_I,ifo),e(Ts,dfo),e(Ts,uI),e(uI,cfo),e(Ts,ffo),e(k,mfo),e(k,Ms),e(Ms,ple),e(ple,gfo),e(Ms,hfo),e(Ms,bI),e(bI,pfo),e(Ms,_fo),e(Ms,vI),e(vI,ufo),e(Ms,bfo),e(k,vfo),e(k,Es),e(Es,_le),e(_le,Ffo),e(Es,Tfo),e(Es,FI),e(FI,Mfo),e(Es,Efo),e(Es,TI),e(TI,Cfo),e(Es,wfo),e(k,Afo),e(k,Cs),e(Cs,ule),e(ule,Lfo),e(Cs,yfo),e(Cs,MI),e(MI,xfo),e(Cs,$fo),e(Cs,EI),e(EI,kfo),e(Cs,Sfo),e(k,Rfo),e(k,ws),e(ws,ble),e(ble,Pfo),e(ws,Bfo),e(ws,CI),e(CI,Ifo),e(ws,Nfo),e(ws,wI),e(wI,qfo),e(ws,jfo),e(k,Dfo),e(k,As),e(As,vle),e(vle,Gfo),e(As,Ofo),e(As,AI),e(AI,Vfo),e(As,Xfo),e(As,LI),e(LI,zfo),e(As,Qfo),e(k,Wfo),e(k,fh),e(fh,Fle),e(Fle,Hfo),e(fh,Ufo),e(fh,yI),e(yI,Jfo),e(fh,Yfo),e(k,Kfo),e(k,Ls),e(Ls,Tle),e(Tle,Zfo),e(Ls,emo),e(Ls,xI),e(xI,omo),e(Ls,rmo),e(Ls,$I),e($I,tmo),e(Ls,amo),e(k,nmo),e(k,mh),e(mh,Mle),e(Mle,smo),e(mh,lmo),e(mh,kI),e(kI,imo),e(mh,dmo),e(k,cmo),e(k,gh),e(gh,Ele),e(Ele,fmo),e(gh,mmo),e(gh,SI),e(SI,gmo),e(gh,hmo),e(k,pmo),e(k,hh),e(hh,Cle),e(Cle,_mo),e(hh,umo),e(hh,RI),e(RI,bmo),e(hh,vmo),e(k,Fmo),e(k,ph),e(ph,wle),e(wle,Tmo),e(ph,Mmo),e(ph,PI),e(PI,Emo),e(ph,Cmo),e(k,wmo),e(k,ys),e(ys,Ale),e(Ale,Amo),e(ys,Lmo),e(ys,BI),e(BI,ymo),e(ys,xmo),e(ys,II),e(II,$mo),e(ys,kmo),e(k,Smo),e(k,_h),e(_h,Lle),e(Lle,Rmo),e(_h,Pmo),e(_h,NI),e(NI,Bmo),e(_h,Imo),e(k,Nmo),e(k,xs),e(xs,yle),e(yle,qmo),e(xs,jmo),e(xs,qI),e(qI,Dmo),e(xs,Gmo),e(xs,jI),e(jI,Omo),e(xs,Vmo),e(k,Xmo),e(k,$s),e($s,xle),e(xle,zmo),e($s,Qmo),e($s,DI),e(DI,Wmo),e($s,Hmo),e($s,GI),e(GI,Umo),e($s,Jmo),e(k,Ymo),e(k,ks),e(ks,$le),e($le,Kmo),e(ks,Zmo),e(ks,OI),e(OI,ego),e(ks,ogo),e(ks,VI),e(VI,rgo),e(ks,tgo),e(k,ago),e(k,Ss),e(Ss,kle),e(kle,ngo),e(Ss,sgo),e(Ss,XI),e(XI,lgo),e(Ss,igo),e(Ss,zI),e(zI,dgo),e(Ss,cgo),e(k,fgo),e(k,Rs),e(Rs,Sle),e(Sle,mgo),e(Rs,ggo),e(Rs,QI),e(QI,hgo),e(Rs,pgo),e(Rs,WI),e(WI,_go),e(Rs,ugo),e(k,bgo),e(k,Ps),e(Ps,Rle),e(Rle,vgo),e(Ps,Fgo),e(Ps,HI),e(HI,Tgo),e(Ps,Mgo),e(Ps,UI),e(UI,Ego),e(Ps,Cgo),e(k,wgo),e(k,uh),e(uh,Ple),e(Ple,Ago),e(uh,Lgo),e(uh,JI),e(JI,ygo),e(uh,xgo),e(k,$go),e(k,bh),e(bh,Ble),e(Ble,kgo),e(bh,Sgo),e(bh,YI),e(YI,Rgo),e(bh,Pgo),e(k,Bgo),e(k,Bs),e(Bs,Ile),e(Ile,Igo),e(Bs,Ngo),e(Bs,KI),e(KI,qgo),e(Bs,jgo),e(Bs,ZI),e(ZI,Dgo),e(Bs,Ggo),e(k,Ogo),e(k,Is),e(Is,Nle),e(Nle,Vgo),e(Is,Xgo),e(Is,eN),e(eN,zgo),e(Is,Qgo),e(Is,oN),e(oN,Wgo),e(Is,Hgo),e(k,Ugo),e(k,Ns),e(Ns,qle),e(qle,Jgo),e(Ns,Ygo),e(Ns,rN),e(rN,Kgo),e(Ns,Zgo),e(Ns,tN),e(tN,eho),e(Ns,oho),e(k,rho),e(k,vh),e(vh,jle),e(jle,tho),e(vh,aho),e(vh,aN),e(aN,nho),e(vh,sho),e(k,lho),e(k,Fh),e(Fh,Dle),e(Dle,iho),e(Fh,dho),e(Fh,nN),e(nN,cho),e(Fh,fho),e(k,mho),e(k,Th),e(Th,Gle),e(Gle,gho),e(Th,hho),e(Th,sN),e(sN,pho),e(Th,_ho),e(k,uho),e(k,qs),e(qs,Ole),e(Ole,bho),e(qs,vho),e(qs,lN),e(lN,Fho),e(qs,Tho),e(qs,iN),e(iN,Mho),e(qs,Eho),e(k,Cho),e(k,js),e(js,Vle),e(Vle,who),e(js,Aho),e(js,dN),e(dN,Lho),e(js,yho),e(js,cN),e(cN,xho),e(js,$ho),e(k,kho),e(k,Mh),e(Mh,Xle),e(Xle,Sho),e(Mh,Rho),e(Mh,fN),e(fN,Pho),e(Mh,Bho),e(k,Iho),e(k,Eh),e(Eh,zle),e(zle,Nho),e(Eh,qho),e(Eh,mN),e(mN,jho),e(Eh,Dho),e(k,Gho),e(k,Ch),e(Ch,Qle),e(Qle,Oho),e(Ch,Vho),e(Ch,gN),e(gN,Xho),e(Ch,zho),e(k,Qho),e(k,Ds),e(Ds,Wle),e(Wle,Who),e(Ds,Hho),e(Ds,hN),e(hN,Uho),e(Ds,Jho),e(Ds,pN),e(pN,Yho),e(Ds,Kho),e(k,Zho),e(k,wh),e(wh,Hle),e(Hle,epo),e(wh,opo),e(wh,_N),e(_N,rpo),e(wh,tpo),e(k,apo),e(k,Ah),e(Ah,Ule),e(Ule,npo),e(Ah,spo),e(Ah,uN),e(uN,lpo),e(Ah,ipo),e(k,dpo),e(k,Gs),e(Gs,Jle),e(Jle,cpo),e(Gs,fpo),e(Gs,bN),e(bN,mpo),e(Gs,gpo),e(Gs,vN),e(vN,hpo),e(Gs,ppo),e(k,_po),e(k,Os),e(Os,Yle),e(Yle,upo),e(Os,bpo),e(Os,FN),e(FN,vpo),e(Os,Fpo),e(Os,TN),e(TN,Tpo),e(Os,Mpo),e(k,Epo),e(k,Vs),e(Vs,Kle),e(Kle,Cpo),e(Vs,wpo),e(Vs,MN),e(MN,Apo),e(Vs,Lpo),e(Vs,EN),e(EN,ypo),e(Vs,xpo),e(k,$po),e(k,Xs),e(Xs,Zle),e(Zle,kpo),e(Xs,Spo),e(Xs,CN),e(CN,Rpo),e(Xs,Ppo),e(Xs,wN),e(wN,Bpo),e(Xs,Ipo),e(Lr,Npo),M(Lh,Lr,null),e(Ao,qpo),e(Ao,yh),M(oL,yh,null),e(yh,jpo),e(yh,eie),e(eie,Dpo),b(f,HOe,u),b(f,Pi,u),e(Pi,xh),e(xh,oie),M(rL,oie,null),e(Pi,Gpo),e(Pi,rie),e(rie,Opo),b(f,UOe,u),b(f,Lo,u),M(tL,Lo,null),e(Lo,Vpo),e(Lo,aL),e(aL,Xpo),e(aL,AN),e(AN,zpo),e(aL,Qpo),e(Lo,Wpo),e(Lo,nL),e(nL,Hpo),e(nL,tie),e(tie,Upo),e(nL,Jpo),e(Lo,Ypo),e(Lo,He),M(sL,He,null),e(He,Kpo),e(He,aie),e(aie,Zpo),e(He,e_o),e(He,Sa),e(Sa,o_o),e(Sa,nie),e(nie,r_o),e(Sa,t_o),e(Sa,sie),e(sie,a_o),e(Sa,n_o),e(Sa,lie),e(lie,s_o),e(Sa,l_o),e(He,i_o),e(He,Y),e(Y,$h),e($h,iie),e(iie,d_o),e($h,c_o),e($h,LN),e(LN,f_o),e($h,m_o),e(Y,g_o),e(Y,kh),e(kh,die),e(die,h_o),e(kh,p_o),e(kh,yN),e(yN,__o),e(kh,u_o),e(Y,b_o),e(Y,Sh),e(Sh,cie),e(cie,v_o),e(Sh,F_o),e(Sh,xN),e(xN,T_o),e(Sh,M_o),e(Y,E_o),e(Y,Rh),e(Rh,fie),e(fie,C_o),e(Rh,w_o),e(Rh,$N),e($N,A_o),e(Rh,L_o),e(Y,y_o),e(Y,Ph),e(Ph,mie),e(mie,x_o),e(Ph,$_o),e(Ph,kN),e(kN,k_o),e(Ph,S_o),e(Y,R_o),e(Y,Bh),e(Bh,gie),e(gie,P_o),e(Bh,B_o),e(Bh,SN),e(SN,I_o),e(Bh,N_o),e(Y,q_o),e(Y,Ih),e(Ih,hie),e(hie,j_o),e(Ih,D_o),e(Ih,RN),e(RN,G_o),e(Ih,O_o),e(Y,V_o),e(Y,Nh),e(Nh,pie),e(pie,X_o),e(Nh,z_o),e(Nh,PN),e(PN,Q_o),e(Nh,W_o),e(Y,H_o),e(Y,qh),e(qh,_ie),e(_ie,U_o),e(qh,J_o),e(qh,BN),e(BN,Y_o),e(qh,K_o),e(Y,Z_o),e(Y,jh),e(jh,uie),e(uie,euo),e(jh,ouo),e(jh,IN),e(IN,ruo),e(jh,tuo),e(Y,auo),e(Y,Dh),e(Dh,bie),e(bie,nuo),e(Dh,suo),e(Dh,NN),e(NN,luo),e(Dh,iuo),e(Y,duo),e(Y,Gh),e(Gh,vie),e(vie,cuo),e(Gh,fuo),e(Gh,qN),e(qN,muo),e(Gh,guo),e(Y,huo),e(Y,Oh),e(Oh,Fie),e(Fie,puo),e(Oh,_uo),e(Oh,jN),e(jN,uuo),e(Oh,buo),e(Y,vuo),e(Y,Vh),e(Vh,Tie),e(Tie,Fuo),e(Vh,Tuo),e(Vh,DN),e(DN,Muo),e(Vh,Euo),e(Y,Cuo),e(Y,Xh),e(Xh,Mie),e(Mie,wuo),e(Xh,Auo),e(Xh,GN),e(GN,Luo),e(Xh,yuo),e(Y,xuo),e(Y,zh),e(zh,Eie),e(Eie,$uo),e(zh,kuo),e(zh,ON),e(ON,Suo),e(zh,Ruo),e(Y,Puo),e(Y,Qh),e(Qh,Cie),e(Cie,Buo),e(Qh,Iuo),e(Qh,VN),e(VN,Nuo),e(Qh,quo),e(Y,juo),e(Y,Wh),e(Wh,wie),e(wie,Duo),e(Wh,Guo),e(Wh,XN),e(XN,Ouo),e(Wh,Vuo),e(Y,Xuo),e(Y,Hh),e(Hh,Aie),e(Aie,zuo),e(Hh,Quo),e(Hh,zN),e(zN,Wuo),e(Hh,Huo),e(Y,Uuo),e(Y,Uh),e(Uh,Lie),e(Lie,Juo),e(Uh,Yuo),e(Uh,QN),e(QN,Kuo),e(Uh,Zuo),e(Y,e7o),e(Y,Jh),e(Jh,yie),e(yie,o7o),e(Jh,r7o),e(Jh,WN),e(WN,t7o),e(Jh,a7o),e(Y,n7o),e(Y,Yh),e(Yh,xie),e(xie,s7o),e(Yh,l7o),e(Yh,HN),e(HN,i7o),e(Yh,d7o),e(Y,c7o),e(Y,Kh),e(Kh,$ie),e($ie,f7o),e(Kh,m7o),e(Kh,UN),e(UN,g7o),e(Kh,h7o),e(Y,p7o),e(Y,Zh),e(Zh,kie),e(kie,_7o),e(Zh,u7o),e(Zh,JN),e(JN,b7o),e(Zh,v7o),e(Y,F7o),e(Y,ep),e(ep,Sie),e(Sie,T7o),e(ep,M7o),e(ep,YN),e(YN,E7o),e(ep,C7o),e(Y,w7o),e(Y,op),e(op,Rie),e(Rie,A7o),e(op,L7o),e(op,KN),e(KN,y7o),e(op,x7o),e(Y,$7o),e(Y,rp),e(rp,Pie),e(Pie,k7o),e(rp,S7o),e(rp,ZN),e(ZN,R7o),e(rp,P7o),e(Y,B7o),e(Y,tp),e(tp,Bie),e(Bie,I7o),e(tp,N7o),e(tp,eq),e(eq,q7o),e(tp,j7o),e(Y,D7o),e(Y,ap),e(ap,Iie),e(Iie,G7o),e(ap,O7o),e(ap,oq),e(oq,V7o),e(ap,X7o),e(Y,z7o),e(Y,np),e(np,Nie),e(Nie,Q7o),e(np,W7o),e(np,rq),e(rq,H7o),e(np,U7o),e(Y,J7o),e(Y,sp),e(sp,qie),e(qie,Y7o),e(sp,K7o),e(sp,tq),e(tq,Z7o),e(sp,e1o),e(Y,o1o),e(Y,lp),e(lp,jie),e(jie,r1o),e(lp,t1o),e(lp,aq),e(aq,a1o),e(lp,n1o),e(He,s1o),M(ip,He,null),e(He,l1o),M(dp,He,null),e(Lo,i1o),e(Lo,cp),M(lL,cp,null),e(cp,d1o),e(cp,Die),e(Die,c1o),b(f,JOe,u),b(f,Bi,u),e(Bi,fp),e(fp,Gie),M(iL,Gie,null),e(Bi,f1o),e(Bi,Oie),e(Oie,m1o),b(f,YOe,u),b(f,yo,u),M(dL,yo,null),e(yo,g1o),e(yo,cL),e(cL,h1o),e(cL,nq),e(nq,p1o),e(cL,_1o),e(yo,u1o),e(yo,fL),e(fL,b1o),e(fL,Vie),e(Vie,v1o),e(fL,F1o),e(yo,T1o),e(yo,Ue),M(mL,Ue,null),e(Ue,M1o),e(Ue,Xie),e(Xie,E1o),e(Ue,C1o),e(Ue,Ii),e(Ii,w1o),e(Ii,zie),e(zie,A1o),e(Ii,L1o),e(Ii,Qie),e(Qie,y1o),e(Ii,x1o),e(Ue,$1o),e(Ue,pe),e(pe,mp),e(mp,Wie),e(Wie,k1o),e(mp,S1o),e(mp,sq),e(sq,R1o),e(mp,P1o),e(pe,B1o),e(pe,gp),e(gp,Hie),e(Hie,I1o),e(gp,N1o),e(gp,Uie),e(Uie,q1o),e(gp,j1o),e(pe,D1o),e(pe,hp),e(hp,Jie),e(Jie,G1o),e(hp,O1o),e(hp,lq),e(lq,V1o),e(hp,X1o),e(pe,z1o),e(pe,pp),e(pp,Yie),e(Yie,Q1o),e(pp,W1o),e(pp,iq),e(iq,H1o),e(pp,U1o),e(pe,J1o),e(pe,_p),e(_p,Kie),e(Kie,Y1o),e(_p,K1o),e(_p,dq),e(dq,Z1o),e(_p,e2o),e(pe,o2o),e(pe,up),e(up,Zie),e(Zie,r2o),e(up,t2o),e(up,cq),e(cq,a2o),e(up,n2o),e(pe,s2o),e(pe,bp),e(bp,ede),e(ede,l2o),e(bp,i2o),e(bp,fq),e(fq,d2o),e(bp,c2o),e(pe,f2o),e(pe,vp),e(vp,ode),e(ode,m2o),e(vp,g2o),e(vp,mq),e(mq,h2o),e(vp,p2o),e(pe,_2o),e(pe,Fp),e(Fp,rde),e(rde,u2o),e(Fp,b2o),e(Fp,gq),e(gq,v2o),e(Fp,F2o),e(pe,T2o),e(pe,Tp),e(Tp,tde),e(tde,M2o),e(Tp,E2o),e(Tp,hq),e(hq,C2o),e(Tp,w2o),e(pe,A2o),e(pe,Mp),e(Mp,ade),e(ade,L2o),e(Mp,y2o),e(Mp,pq),e(pq,x2o),e(Mp,$2o),e(pe,k2o),e(pe,Ep),e(Ep,nde),e(nde,S2o),e(Ep,R2o),e(Ep,_q),e(_q,P2o),e(Ep,B2o),e(pe,I2o),e(pe,Cp),e(Cp,sde),e(sde,N2o),e(Cp,q2o),e(Cp,uq),e(uq,j2o),e(Cp,D2o),e(pe,G2o),e(pe,wp),e(wp,lde),e(lde,O2o),e(wp,V2o),e(wp,bq),e(bq,X2o),e(wp,z2o),e(pe,Q2o),e(pe,Ap),e(Ap,ide),e(ide,W2o),e(Ap,H2o),e(Ap,vq),e(vq,U2o),e(Ap,J2o),e(pe,Y2o),e(pe,Lp),e(Lp,dde),e(dde,K2o),e(Lp,Z2o),e(Lp,Fq),e(Fq,ebo),e(Lp,obo),e(pe,rbo),e(pe,yp),e(yp,cde),e(cde,tbo),e(yp,abo),e(yp,Tq),e(Tq,nbo),e(yp,sbo),e(Ue,lbo),M(xp,Ue,null),e(Ue,ibo),M($p,Ue,null),e(yo,dbo),e(yo,kp),M(gL,kp,null),e(kp,cbo),e(kp,fde),e(fde,fbo),b(f,KOe,u),b(f,Ni,u),e(Ni,Sp),e(Sp,mde),M(hL,mde,null),e(Ni,mbo),e(Ni,gde),e(gde,gbo),b(f,ZOe,u),b(f,xo,u),M(pL,xo,null),e(xo,hbo),e(xo,qi),e(qi,pbo),e(qi,Mq),e(Mq,_bo),e(qi,ubo),e(qi,Eq),e(Eq,bbo),e(qi,vbo),e(xo,Fbo),e(xo,_L),e(_L,Tbo),e(_L,hde),e(hde,Mbo),e(_L,Ebo),e(xo,Cbo),e(xo,nt),M(uL,nt,null),e(nt,wbo),e(nt,pde),e(pde,Abo),e(nt,Lbo),e(nt,ji),e(ji,ybo),e(ji,_de),e(_de,xbo),e(ji,$bo),e(ji,Cq),e(Cq,kbo),e(ji,Sbo),e(nt,Rbo),M(Rp,nt,null),e(xo,Pbo),e(xo,Je),M(bL,Je,null),e(Je,Bbo),e(Je,ude),e(ude,Ibo),e(Je,Nbo),e(Je,Ra),e(Ra,qbo),e(Ra,bde),e(bde,jbo),e(Ra,Dbo),e(Ra,vde),e(vde,Gbo),e(Ra,Obo),e(Ra,Fde),e(Fde,Vbo),e(Ra,Xbo),e(Je,zbo),e(Je,y),e(y,Pp),e(Pp,Tde),e(Tde,Qbo),e(Pp,Wbo),e(Pp,wq),e(wq,Hbo),e(Pp,Ubo),e(y,Jbo),e(y,Bp),e(Bp,Mde),e(Mde,Ybo),e(Bp,Kbo),e(Bp,Aq),e(Aq,Zbo),e(Bp,evo),e(y,ovo),e(y,Ip),e(Ip,Ede),e(Ede,rvo),e(Ip,tvo),e(Ip,Lq),e(Lq,avo),e(Ip,nvo),e(y,svo),e(y,Np),e(Np,Cde),e(Cde,lvo),e(Np,ivo),e(Np,yq),e(yq,dvo),e(Np,cvo),e(y,fvo),e(y,qp),e(qp,wde),e(wde,mvo),e(qp,gvo),e(qp,xq),e(xq,hvo),e(qp,pvo),e(y,_vo),e(y,jp),e(jp,Ade),e(Ade,uvo),e(jp,bvo),e(jp,$q),e($q,vvo),e(jp,Fvo),e(y,Tvo),e(y,Dp),e(Dp,Lde),e(Lde,Mvo),e(Dp,Evo),e(Dp,kq),e(kq,Cvo),e(Dp,wvo),e(y,Avo),e(y,Gp),e(Gp,yde),e(yde,Lvo),e(Gp,yvo),e(Gp,Sq),e(Sq,xvo),e(Gp,$vo),e(y,kvo),e(y,Op),e(Op,xde),e(xde,Svo),e(Op,Rvo),e(Op,Rq),e(Rq,Pvo),e(Op,Bvo),e(y,Ivo),e(y,Vp),e(Vp,$de),e($de,Nvo),e(Vp,qvo),e(Vp,Pq),e(Pq,jvo),e(Vp,Dvo),e(y,Gvo),e(y,Xp),e(Xp,kde),e(kde,Ovo),e(Xp,Vvo),e(Xp,Bq),e(Bq,Xvo),e(Xp,zvo),e(y,Qvo),e(y,zp),e(zp,Sde),e(Sde,Wvo),e(zp,Hvo),e(zp,Iq),e(Iq,Uvo),e(zp,Jvo),e(y,Yvo),e(y,Qp),e(Qp,Rde),e(Rde,Kvo),e(Qp,Zvo),e(Qp,Nq),e(Nq,eFo),e(Qp,oFo),e(y,rFo),e(y,Wp),e(Wp,Pde),e(Pde,tFo),e(Wp,aFo),e(Wp,qq),e(qq,nFo),e(Wp,sFo),e(y,lFo),e(y,Hp),e(Hp,Bde),e(Bde,iFo),e(Hp,dFo),e(Hp,jq),e(jq,cFo),e(Hp,fFo),e(y,mFo),e(y,Up),e(Up,Ide),e(Ide,gFo),e(Up,hFo),e(Up,Dq),e(Dq,pFo),e(Up,_Fo),e(y,uFo),e(y,Jp),e(Jp,Nde),e(Nde,bFo),e(Jp,vFo),e(Jp,Gq),e(Gq,FFo),e(Jp,TFo),e(y,MFo),e(y,Yp),e(Yp,qde),e(qde,EFo),e(Yp,CFo),e(Yp,Oq),e(Oq,wFo),e(Yp,AFo),e(y,LFo),e(y,Kp),e(Kp,jde),e(jde,yFo),e(Kp,xFo),e(Kp,Vq),e(Vq,$Fo),e(Kp,kFo),e(y,SFo),e(y,Zp),e(Zp,Dde),e(Dde,RFo),e(Zp,PFo),e(Zp,Xq),e(Xq,BFo),e(Zp,IFo),e(y,NFo),e(y,e_),e(e_,Gde),e(Gde,qFo),e(e_,jFo),e(e_,zq),e(zq,DFo),e(e_,GFo),e(y,OFo),e(y,o_),e(o_,Ode),e(Ode,VFo),e(o_,XFo),e(o_,Qq),e(Qq,zFo),e(o_,QFo),e(y,WFo),e(y,r_),e(r_,Vde),e(Vde,HFo),e(r_,UFo),e(r_,Wq),e(Wq,JFo),e(r_,YFo),e(y,KFo),e(y,t_),e(t_,Xde),e(Xde,ZFo),e(t_,eTo),e(t_,Hq),e(Hq,oTo),e(t_,rTo),e(y,tTo),e(y,a_),e(a_,zde),e(zde,aTo),e(a_,nTo),e(a_,Uq),e(Uq,sTo),e(a_,lTo),e(y,iTo),e(y,n_),e(n_,Qde),e(Qde,dTo),e(n_,cTo),e(n_,Jq),e(Jq,fTo),e(n_,mTo),e(y,gTo),e(y,s_),e(s_,Wde),e(Wde,hTo),e(s_,pTo),e(s_,Yq),e(Yq,_To),e(s_,uTo),e(y,bTo),e(y,l_),e(l_,Hde),e(Hde,vTo),e(l_,FTo),e(l_,Kq),e(Kq,TTo),e(l_,MTo),e(y,ETo),e(y,i_),e(i_,Ude),e(Ude,CTo),e(i_,wTo),e(i_,Zq),e(Zq,ATo),e(i_,LTo),e(y,yTo),e(y,d_),e(d_,Jde),e(Jde,xTo),e(d_,$To),e(d_,ej),e(ej,kTo),e(d_,STo),e(y,RTo),e(y,c_),e(c_,Yde),e(Yde,PTo),e(c_,BTo),e(c_,oj),e(oj,ITo),e(c_,NTo),e(y,qTo),e(y,f_),e(f_,Kde),e(Kde,jTo),e(f_,DTo),e(f_,rj),e(rj,GTo),e(f_,OTo),e(y,VTo),e(y,m_),e(m_,Zde),e(Zde,XTo),e(m_,zTo),e(m_,tj),e(tj,QTo),e(m_,WTo),e(y,HTo),e(y,g_),e(g_,ece),e(ece,UTo),e(g_,JTo),e(g_,aj),e(aj,YTo),e(g_,KTo),e(y,ZTo),e(y,zs),e(zs,oce),e(oce,e8o),e(zs,o8o),e(zs,nj),e(nj,r8o),e(zs,t8o),e(zs,sj),e(sj,a8o),e(zs,n8o),e(y,s8o),e(y,h_),e(h_,rce),e(rce,l8o),e(h_,i8o),e(h_,lj),e(lj,d8o),e(h_,c8o),e(y,f8o),e(y,p_),e(p_,tce),e(tce,m8o),e(p_,g8o),e(p_,ij),e(ij,h8o),e(p_,p8o),e(y,_8o),e(y,__),e(__,ace),e(ace,u8o),e(__,b8o),e(__,dj),e(dj,v8o),e(__,F8o),e(y,T8o),e(y,u_),e(u_,nce),e(nce,M8o),e(u_,E8o),e(u_,cj),e(cj,C8o),e(u_,w8o),e(y,A8o),e(y,b_),e(b_,sce),e(sce,L8o),e(b_,y8o),e(b_,fj),e(fj,x8o),e(b_,$8o),e(y,k8o),e(y,v_),e(v_,lce),e(lce,S8o),e(v_,R8o),e(v_,mj),e(mj,P8o),e(v_,B8o),e(y,I8o),e(y,F_),e(F_,ice),e(ice,N8o),e(F_,q8o),e(F_,gj),e(gj,j8o),e(F_,D8o),e(y,G8o),e(y,T_),e(T_,dce),e(dce,O8o),e(T_,V8o),e(T_,hj),e(hj,X8o),e(T_,z8o),e(y,Q8o),e(y,M_),e(M_,cce),e(cce,W8o),e(M_,H8o),e(M_,pj),e(pj,U8o),e(M_,J8o),e(y,Y8o),e(y,E_),e(E_,fce),e(fce,K8o),e(E_,Z8o),e(E_,_j),e(_j,eMo),e(E_,oMo),e(y,rMo),e(y,C_),e(C_,mce),e(mce,tMo),e(C_,aMo),e(C_,uj),e(uj,nMo),e(C_,sMo),e(y,lMo),e(y,w_),e(w_,gce),e(gce,iMo),e(w_,dMo),e(w_,bj),e(bj,cMo),e(w_,fMo),e(y,mMo),e(y,A_),e(A_,hce),e(hce,gMo),e(A_,hMo),e(A_,vj),e(vj,pMo),e(A_,_Mo),e(y,uMo),e(y,L_),e(L_,pce),e(pce,bMo),e(L_,vMo),e(L_,Fj),e(Fj,FMo),e(L_,TMo),e(y,MMo),e(y,y_),e(y_,_ce),e(_ce,EMo),e(y_,CMo),e(y_,Tj),e(Tj,wMo),e(y_,AMo),e(y,LMo),e(y,x_),e(x_,uce),e(uce,yMo),e(x_,xMo),e(x_,Mj),e(Mj,$Mo),e(x_,kMo),e(y,SMo),e(y,$_),e($_,bce),e(bce,RMo),e($_,PMo),e($_,Ej),e(Ej,BMo),e($_,IMo),e(y,NMo),e(y,k_),e(k_,vce),e(vce,qMo),e(k_,jMo),e(k_,Cj),e(Cj,DMo),e(k_,GMo),e(y,OMo),e(y,S_),e(S_,Fce),e(Fce,VMo),e(S_,XMo),e(S_,wj),e(wj,zMo),e(S_,QMo),e(y,WMo),e(y,R_),e(R_,Tce),e(Tce,HMo),e(R_,UMo),e(R_,Aj),e(Aj,JMo),e(R_,YMo),e(y,KMo),e(y,P_),e(P_,Mce),e(Mce,ZMo),e(P_,e4o),e(P_,Lj),e(Lj,o4o),e(P_,r4o),e(y,t4o),e(y,B_),e(B_,Ece),e(Ece,a4o),e(B_,n4o),e(B_,yj),e(yj,s4o),e(B_,l4o),e(y,i4o),e(y,I_),e(I_,Cce),e(Cce,d4o),e(I_,c4o),e(I_,xj),e(xj,f4o),e(I_,m4o),e(y,g4o),e(y,N_),e(N_,wce),e(wce,h4o),e(N_,p4o),e(N_,$j),e($j,_4o),e(N_,u4o),e(y,b4o),e(y,q_),e(q_,Ace),e(Ace,v4o),e(q_,F4o),e(q_,kj),e(kj,T4o),e(q_,M4o),e(y,E4o),e(y,j_),e(j_,Lce),e(Lce,C4o),e(j_,w4o),e(j_,Sj),e(Sj,A4o),e(j_,L4o),e(y,y4o),e(y,D_),e(D_,yce),e(yce,x4o),e(D_,$4o),e(D_,Rj),e(Rj,k4o),e(D_,S4o),e(y,R4o),e(y,G_),e(G_,xce),e(xce,P4o),e(G_,B4o),e(G_,Pj),e(Pj,I4o),e(G_,N4o),e(y,q4o),e(y,O_),e(O_,$ce),e($ce,j4o),e(O_,D4o),e(O_,Bj),e(Bj,G4o),e(O_,O4o),e(y,V4o),e(y,V_),e(V_,kce),e(kce,X4o),e(V_,z4o),e(V_,Ij),e(Ij,Q4o),e(V_,W4o),e(y,H4o),e(y,X_),e(X_,Sce),e(Sce,U4o),e(X_,J4o),e(X_,Nj),e(Nj,Y4o),e(X_,K4o),e(y,Z4o),e(y,z_),e(z_,Rce),e(Rce,eEo),e(z_,oEo),e(z_,qj),e(qj,rEo),e(z_,tEo),e(y,aEo),e(y,Q_),e(Q_,Pce),e(Pce,nEo),e(Q_,sEo),e(Q_,jj),e(jj,lEo),e(Q_,iEo),e(y,dEo),e(y,W_),e(W_,Bce),e(Bce,cEo),e(W_,fEo),e(W_,Dj),e(Dj,mEo),e(W_,gEo),e(y,hEo),e(y,H_),e(H_,Ice),e(Ice,pEo),e(H_,_Eo),e(H_,Gj),e(Gj,uEo),e(H_,bEo),e(y,vEo),e(y,U_),e(U_,Nce),e(Nce,FEo),e(U_,TEo),e(U_,Oj),e(Oj,MEo),e(U_,EEo),e(y,CEo),e(y,J_),e(J_,qce),e(qce,wEo),e(J_,AEo),e(J_,Vj),e(Vj,LEo),e(J_,yEo),e(y,xEo),e(y,Y_),e(Y_,jce),e(jce,$Eo),e(Y_,kEo),e(Y_,Xj),e(Xj,SEo),e(Y_,REo),e(y,PEo),e(y,K_),e(K_,Dce),e(Dce,BEo),e(K_,IEo),e(K_,zj),e(zj,NEo),e(K_,qEo),e(y,jEo),e(y,Z_),e(Z_,Gce),e(Gce,DEo),e(Z_,GEo),e(Z_,Qj),e(Qj,OEo),e(Z_,VEo),e(y,XEo),e(y,eu),e(eu,Oce),e(Oce,zEo),e(eu,QEo),e(eu,Wj),e(Wj,WEo),e(eu,HEo),e(y,UEo),e(y,ou),e(ou,Vce),e(Vce,JEo),e(ou,YEo),e(ou,Hj),e(Hj,KEo),e(ou,ZEo),e(y,eCo),e(y,ru),e(ru,Xce),e(Xce,oCo),e(ru,rCo),e(ru,Uj),e(Uj,tCo),e(ru,aCo),e(y,nCo),e(y,tu),e(tu,zce),e(zce,sCo),e(tu,lCo),e(tu,Jj),e(Jj,iCo),e(tu,dCo),e(y,cCo),e(y,au),e(au,Qce),e(Qce,fCo),e(au,mCo),e(au,Yj),e(Yj,gCo),e(au,hCo),e(y,pCo),e(y,nu),e(nu,Wce),e(Wce,_Co),e(nu,uCo),e(nu,Kj),e(Kj,bCo),e(nu,vCo),e(y,FCo),e(y,su),e(su,Hce),e(Hce,TCo),e(su,MCo),e(su,Zj),e(Zj,ECo),e(su,CCo),e(y,wCo),e(y,lu),e(lu,Uce),e(Uce,ACo),e(lu,LCo),e(lu,eD),e(eD,yCo),e(lu,xCo),e(y,$Co),e(y,iu),e(iu,Jce),e(Jce,kCo),e(iu,SCo),e(iu,oD),e(oD,RCo),e(iu,PCo),e(y,BCo),e(y,du),e(du,Yce),e(Yce,ICo),e(du,NCo),e(du,rD),e(rD,qCo),e(du,jCo),e(y,DCo),e(y,cu),e(cu,Kce),e(Kce,GCo),e(cu,OCo),e(cu,tD),e(tD,VCo),e(cu,XCo),e(y,zCo),e(y,fu),e(fu,Zce),e(Zce,QCo),e(fu,WCo),e(fu,aD),e(aD,HCo),e(fu,UCo),e(y,JCo),e(y,mu),e(mu,efe),e(efe,YCo),e(mu,KCo),e(mu,nD),e(nD,ZCo),e(mu,e3o),e(y,o3o),e(y,gu),e(gu,ofe),e(ofe,r3o),e(gu,t3o),e(gu,sD),e(sD,a3o),e(gu,n3o),e(y,s3o),e(y,hu),e(hu,rfe),e(rfe,l3o),e(hu,i3o),e(hu,lD),e(lD,d3o),e(hu,c3o),e(y,f3o),e(y,pu),e(pu,tfe),e(tfe,m3o),e(pu,g3o),e(pu,iD),e(iD,h3o),e(pu,p3o),e(y,_3o),e(y,_u),e(_u,afe),e(afe,u3o),e(_u,b3o),e(_u,dD),e(dD,v3o),e(_u,F3o),e(y,T3o),e(y,uu),e(uu,nfe),e(nfe,M3o),e(uu,E3o),e(uu,cD),e(cD,C3o),e(uu,w3o),e(y,A3o),e(y,bu),e(bu,sfe),e(sfe,L3o),e(bu,y3o),e(bu,fD),e(fD,x3o),e(bu,$3o),e(y,k3o),e(y,vu),e(vu,lfe),e(lfe,S3o),e(vu,R3o),e(vu,mD),e(mD,P3o),e(vu,B3o),e(y,I3o),e(y,Fu),e(Fu,ife),e(ife,N3o),e(Fu,q3o),e(Fu,gD),e(gD,j3o),e(Fu,D3o),e(y,G3o),e(y,Tu),e(Tu,dfe),e(dfe,O3o),e(Tu,V3o),e(Tu,hD),e(hD,X3o),e(Tu,z3o),e(y,Q3o),e(y,Mu),e(Mu,cfe),e(cfe,W3o),e(Mu,H3o),e(Mu,pD),e(pD,U3o),e(Mu,J3o),e(y,Y3o),e(y,Eu),e(Eu,ffe),e(ffe,K3o),e(Eu,Z3o),e(Eu,_D),e(_D,e5o),e(Eu,o5o),e(y,r5o),e(y,Cu),e(Cu,mfe),e(mfe,t5o),e(Cu,a5o),e(Cu,uD),e(uD,n5o),e(Cu,s5o),e(y,l5o),e(y,wu),e(wu,gfe),e(gfe,i5o),e(wu,d5o),e(wu,bD),e(bD,c5o),e(wu,f5o),e(y,m5o),e(y,Au),e(Au,hfe),e(hfe,g5o),e(Au,h5o),e(Au,vD),e(vD,p5o),e(Au,_5o),e(y,u5o),e(y,Lu),e(Lu,pfe),e(pfe,b5o),e(Lu,v5o),e(Lu,FD),e(FD,F5o),e(Lu,T5o),e(y,M5o),e(y,yu),e(yu,_fe),e(_fe,E5o),e(yu,C5o),e(yu,TD),e(TD,w5o),e(yu,A5o),e(y,L5o),e(y,xu),e(xu,ufe),e(ufe,y5o),e(xu,x5o),e(xu,MD),e(MD,$5o),e(xu,k5o),e(y,S5o),e(y,$u),e($u,bfe),e(bfe,R5o),e($u,P5o),e($u,ED),e(ED,B5o),e($u,I5o),e(y,N5o),e(y,ku),e(ku,vfe),e(vfe,q5o),e(ku,j5o),e(ku,CD),e(CD,D5o),e(ku,G5o),e(y,O5o),e(y,Su),e(Su,Ffe),e(Ffe,V5o),e(Su,X5o),e(Su,wD),e(wD,z5o),e(Su,Q5o),e(y,W5o),e(y,Ru),e(Ru,Tfe),e(Tfe,H5o),e(Ru,U5o),e(Ru,AD),e(AD,J5o),e(Ru,Y5o),e(Je,K5o),e(Je,Pu),e(Pu,Z5o),e(Pu,Mfe),e(Mfe,e0o),e(Pu,o0o),e(Pu,Efe),e(Efe,r0o),e(Je,t0o),M(Bu,Je,null),b(f,eVe,u),b(f,Di,u),e(Di,Iu),e(Iu,Cfe),M(vL,Cfe,null),e(Di,a0o),e(Di,wfe),e(wfe,n0o),b(f,oVe,u),b(f,$o,u),M(FL,$o,null),e($o,s0o),e($o,Gi),e(Gi,l0o),e(Gi,LD),e(LD,i0o),e(Gi,d0o),e(Gi,yD),e(yD,c0o),e(Gi,f0o),e($o,m0o),e($o,TL),e(TL,g0o),e(TL,Afe),e(Afe,h0o),e(TL,p0o),e($o,_0o),e($o,st),M(ML,st,null),e(st,u0o),e(st,Lfe),e(Lfe,b0o),e(st,v0o),e(st,Oi),e(Oi,F0o),e(Oi,yfe),e(yfe,T0o),e(Oi,M0o),e(Oi,xD),e(xD,E0o),e(Oi,C0o),e(st,w0o),M(Nu,st,null),e($o,A0o),e($o,Ye),M(EL,Ye,null),e(Ye,L0o),e(Ye,xfe),e(xfe,y0o),e(Ye,x0o),e(Ye,Pa),e(Pa,$0o),e(Pa,$fe),e($fe,k0o),e(Pa,S0o),e(Pa,kfe),e(kfe,R0o),e(Pa,P0o),e(Pa,Sfe),e(Sfe,B0o),e(Pa,I0o),e(Ye,N0o),e(Ye,G),e(G,qu),e(qu,Rfe),e(Rfe,q0o),e(qu,j0o),e(qu,$D),e($D,D0o),e(qu,G0o),e(G,O0o),e(G,ju),e(ju,Pfe),e(Pfe,V0o),e(ju,X0o),e(ju,kD),e(kD,z0o),e(ju,Q0o),e(G,W0o),e(G,Du),e(Du,Bfe),e(Bfe,H0o),e(Du,U0o),e(Du,SD),e(SD,J0o),e(Du,Y0o),e(G,K0o),e(G,Gu),e(Gu,Ife),e(Ife,Z0o),e(Gu,ewo),e(Gu,RD),e(RD,owo),e(Gu,rwo),e(G,two),e(G,Ou),e(Ou,Nfe),e(Nfe,awo),e(Ou,nwo),e(Ou,PD),e(PD,swo),e(Ou,lwo),e(G,iwo),e(G,Vu),e(Vu,qfe),e(qfe,dwo),e(Vu,cwo),e(Vu,BD),e(BD,fwo),e(Vu,mwo),e(G,gwo),e(G,Xu),e(Xu,jfe),e(jfe,hwo),e(Xu,pwo),e(Xu,ID),e(ID,_wo),e(Xu,uwo),e(G,bwo),e(G,zu),e(zu,Dfe),e(Dfe,vwo),e(zu,Fwo),e(zu,ND),e(ND,Two),e(zu,Mwo),e(G,Ewo),e(G,Qu),e(Qu,Gfe),e(Gfe,Cwo),e(Qu,wwo),e(Qu,qD),e(qD,Awo),e(Qu,Lwo),e(G,ywo),e(G,Wu),e(Wu,Ofe),e(Ofe,xwo),e(Wu,$wo),e(Wu,jD),e(jD,kwo),e(Wu,Swo),e(G,Rwo),e(G,Hu),e(Hu,Vfe),e(Vfe,Pwo),e(Hu,Bwo),e(Hu,DD),e(DD,Iwo),e(Hu,Nwo),e(G,qwo),e(G,Uu),e(Uu,Xfe),e(Xfe,jwo),e(Uu,Dwo),e(Uu,GD),e(GD,Gwo),e(Uu,Owo),e(G,Vwo),e(G,Ju),e(Ju,zfe),e(zfe,Xwo),e(Ju,zwo),e(Ju,OD),e(OD,Qwo),e(Ju,Wwo),e(G,Hwo),e(G,Yu),e(Yu,Qfe),e(Qfe,Uwo),e(Yu,Jwo),e(Yu,VD),e(VD,Ywo),e(Yu,Kwo),e(G,Zwo),e(G,Ku),e(Ku,Wfe),e(Wfe,eAo),e(Ku,oAo),e(Ku,XD),e(XD,rAo),e(Ku,tAo),e(G,aAo),e(G,Zu),e(Zu,Hfe),e(Hfe,nAo),e(Zu,sAo),e(Zu,zD),e(zD,lAo),e(Zu,iAo),e(G,dAo),e(G,e7),e(e7,Ufe),e(Ufe,cAo),e(e7,fAo),e(e7,QD),e(QD,mAo),e(e7,gAo),e(G,hAo),e(G,o7),e(o7,Jfe),e(Jfe,pAo),e(o7,_Ao),e(o7,WD),e(WD,uAo),e(o7,bAo),e(G,vAo),e(G,r7),e(r7,Yfe),e(Yfe,FAo),e(r7,TAo),e(r7,HD),e(HD,MAo),e(r7,EAo),e(G,CAo),e(G,t7),e(t7,Kfe),e(Kfe,wAo),e(t7,AAo),e(t7,UD),e(UD,LAo),e(t7,yAo),e(G,xAo),e(G,a7),e(a7,Zfe),e(Zfe,$Ao),e(a7,kAo),e(a7,JD),e(JD,SAo),e(a7,RAo),e(G,PAo),e(G,n7),e(n7,eme),e(eme,BAo),e(n7,IAo),e(n7,YD),e(YD,NAo),e(n7,qAo),e(G,jAo),e(G,s7),e(s7,ome),e(ome,DAo),e(s7,GAo),e(s7,KD),e(KD,OAo),e(s7,VAo),e(G,XAo),e(G,l7),e(l7,rme),e(rme,zAo),e(l7,QAo),e(l7,ZD),e(ZD,WAo),e(l7,HAo),e(G,UAo),e(G,i7),e(i7,tme),e(tme,JAo),e(i7,YAo),e(i7,eG),e(eG,KAo),e(i7,ZAo),e(G,e6o),e(G,d7),e(d7,ame),e(ame,o6o),e(d7,r6o),e(d7,oG),e(oG,t6o),e(d7,a6o),e(G,n6o),e(G,c7),e(c7,nme),e(nme,s6o),e(c7,l6o),e(c7,rG),e(rG,i6o),e(c7,d6o),e(G,c6o),e(G,f7),e(f7,sme),e(sme,f6o),e(f7,m6o),e(f7,tG),e(tG,g6o),e(f7,h6o),e(G,p6o),e(G,m7),e(m7,lme),e(lme,_6o),e(m7,u6o),e(m7,aG),e(aG,b6o),e(m7,v6o),e(G,F6o),e(G,g7),e(g7,ime),e(ime,T6o),e(g7,M6o),e(g7,nG),e(nG,E6o),e(g7,C6o),e(G,w6o),e(G,h7),e(h7,dme),e(dme,A6o),e(h7,L6o),e(h7,sG),e(sG,y6o),e(h7,x6o),e(G,$6o),e(G,p7),e(p7,cme),e(cme,k6o),e(p7,S6o),e(p7,lG),e(lG,R6o),e(p7,P6o),e(G,B6o),e(G,_7),e(_7,fme),e(fme,I6o),e(_7,N6o),e(_7,iG),e(iG,q6o),e(_7,j6o),e(G,D6o),e(G,u7),e(u7,mme),e(mme,G6o),e(u7,O6o),e(u7,dG),e(dG,V6o),e(u7,X6o),e(G,z6o),e(G,b7),e(b7,gme),e(gme,Q6o),e(b7,W6o),e(b7,cG),e(cG,H6o),e(b7,U6o),e(G,J6o),e(G,v7),e(v7,hme),e(hme,Y6o),e(v7,K6o),e(v7,fG),e(fG,Z6o),e(v7,eLo),e(G,oLo),e(G,F7),e(F7,pme),e(pme,rLo),e(F7,tLo),e(F7,mG),e(mG,aLo),e(F7,nLo),e(G,sLo),e(G,T7),e(T7,_me),e(_me,lLo),e(T7,iLo),e(T7,gG),e(gG,dLo),e(T7,cLo),e(G,fLo),e(G,M7),e(M7,ume),e(ume,mLo),e(M7,gLo),e(M7,hG),e(hG,hLo),e(M7,pLo),e(G,_Lo),e(G,E7),e(E7,bme),e(bme,uLo),e(E7,bLo),e(E7,pG),e(pG,vLo),e(E7,FLo),e(G,TLo),e(G,C7),e(C7,vme),e(vme,MLo),e(C7,ELo),e(C7,_G),e(_G,CLo),e(C7,wLo),e(G,ALo),e(G,w7),e(w7,Fme),e(Fme,LLo),e(w7,yLo),e(w7,uG),e(uG,xLo),e(w7,$Lo),e(G,kLo),e(G,A7),e(A7,Tme),e(Tme,SLo),e(A7,RLo),e(A7,bG),e(bG,PLo),e(A7,BLo),e(G,ILo),e(G,L7),e(L7,Mme),e(Mme,NLo),e(L7,qLo),e(L7,vG),e(vG,jLo),e(L7,DLo),e(G,GLo),e(G,y7),e(y7,Eme),e(Eme,OLo),e(y7,VLo),e(y7,FG),e(FG,XLo),e(y7,zLo),e(Ye,QLo),e(Ye,x7),e(x7,WLo),e(x7,Cme),e(Cme,HLo),e(x7,ULo),e(x7,wme),e(wme,JLo),e(Ye,YLo),M($7,Ye,null),b(f,rVe,u),b(f,Vi,u),e(Vi,k7),e(k7,Ame),M(CL,Ame,null),e(Vi,KLo),e(Vi,Lme),e(Lme,ZLo),b(f,tVe,u),b(f,ko,u),M(wL,ko,null),e(ko,eyo),e(ko,Xi),e(Xi,oyo),e(Xi,TG),e(TG,ryo),e(Xi,tyo),e(Xi,MG),e(MG,ayo),e(Xi,nyo),e(ko,syo),e(ko,AL),e(AL,lyo),e(AL,yme),e(yme,iyo),e(AL,dyo),e(ko,cyo),e(ko,lt),M(LL,lt,null),e(lt,fyo),e(lt,xme),e(xme,myo),e(lt,gyo),e(lt,zi),e(zi,hyo),e(zi,$me),e($me,pyo),e(zi,_yo),e(zi,EG),e(EG,uyo),e(zi,byo),e(lt,vyo),M(S7,lt,null),e(ko,Fyo),e(ko,Ke),M(yL,Ke,null),e(Ke,Tyo),e(Ke,kme),e(kme,Myo),e(Ke,Eyo),e(Ke,Ba),e(Ba,Cyo),e(Ba,Sme),e(Sme,wyo),e(Ba,Ayo),e(Ba,Rme),e(Rme,Lyo),e(Ba,yyo),e(Ba,Pme),e(Pme,xyo),e(Ba,$yo),e(Ke,kyo),e(Ke,z),e(z,R7),e(R7,Bme),e(Bme,Syo),e(R7,Ryo),e(R7,CG),e(CG,Pyo),e(R7,Byo),e(z,Iyo),e(z,P7),e(P7,Ime),e(Ime,Nyo),e(P7,qyo),e(P7,wG),e(wG,jyo),e(P7,Dyo),e(z,Gyo),e(z,B7),e(B7,Nme),e(Nme,Oyo),e(B7,Vyo),e(B7,AG),e(AG,Xyo),e(B7,zyo),e(z,Qyo),e(z,I7),e(I7,qme),e(qme,Wyo),e(I7,Hyo),e(I7,LG),e(LG,Uyo),e(I7,Jyo),e(z,Yyo),e(z,N7),e(N7,jme),e(jme,Kyo),e(N7,Zyo),e(N7,yG),e(yG,e9o),e(N7,o9o),e(z,r9o),e(z,q7),e(q7,Dme),e(Dme,t9o),e(q7,a9o),e(q7,xG),e(xG,n9o),e(q7,s9o),e(z,l9o),e(z,j7),e(j7,Gme),e(Gme,i9o),e(j7,d9o),e(j7,$G),e($G,c9o),e(j7,f9o),e(z,m9o),e(z,D7),e(D7,Ome),e(Ome,g9o),e(D7,h9o),e(D7,kG),e(kG,p9o),e(D7,_9o),e(z,u9o),e(z,G7),e(G7,Vme),e(Vme,b9o),e(G7,v9o),e(G7,SG),e(SG,F9o),e(G7,T9o),e(z,M9o),e(z,O7),e(O7,Xme),e(Xme,E9o),e(O7,C9o),e(O7,RG),e(RG,w9o),e(O7,A9o),e(z,L9o),e(z,V7),e(V7,zme),e(zme,y9o),e(V7,x9o),e(V7,PG),e(PG,$9o),e(V7,k9o),e(z,S9o),e(z,X7),e(X7,Qme),e(Qme,R9o),e(X7,P9o),e(X7,BG),e(BG,B9o),e(X7,I9o),e(z,N9o),e(z,z7),e(z7,Wme),e(Wme,q9o),e(z7,j9o),e(z7,IG),e(IG,D9o),e(z7,G9o),e(z,O9o),e(z,Q7),e(Q7,Hme),e(Hme,V9o),e(Q7,X9o),e(Q7,NG),e(NG,z9o),e(Q7,Q9o),e(z,W9o),e(z,W7),e(W7,Ume),e(Ume,H9o),e(W7,U9o),e(W7,qG),e(qG,J9o),e(W7,Y9o),e(z,K9o),e(z,H7),e(H7,Jme),e(Jme,Z9o),e(H7,exo),e(H7,jG),e(jG,oxo),e(H7,rxo),e(z,txo),e(z,U7),e(U7,Yme),e(Yme,axo),e(U7,nxo),e(U7,DG),e(DG,sxo),e(U7,lxo),e(z,ixo),e(z,J7),e(J7,Kme),e(Kme,dxo),e(J7,cxo),e(J7,GG),e(GG,fxo),e(J7,mxo),e(z,gxo),e(z,Y7),e(Y7,Zme),e(Zme,hxo),e(Y7,pxo),e(Y7,OG),e(OG,_xo),e(Y7,uxo),e(z,bxo),e(z,K7),e(K7,ege),e(ege,vxo),e(K7,Fxo),e(K7,VG),e(VG,Txo),e(K7,Mxo),e(z,Exo),e(z,Z7),e(Z7,oge),e(oge,Cxo),e(Z7,wxo),e(Z7,XG),e(XG,Axo),e(Z7,Lxo),e(z,yxo),e(z,e1),e(e1,rge),e(rge,xxo),e(e1,$xo),e(e1,zG),e(zG,kxo),e(e1,Sxo),e(z,Rxo),e(z,o1),e(o1,tge),e(tge,Pxo),e(o1,Bxo),e(o1,QG),e(QG,Ixo),e(o1,Nxo),e(z,qxo),e(z,r1),e(r1,age),e(age,jxo),e(r1,Dxo),e(r1,WG),e(WG,Gxo),e(r1,Oxo),e(z,Vxo),e(z,t1),e(t1,nge),e(nge,Xxo),e(t1,zxo),e(t1,HG),e(HG,Qxo),e(t1,Wxo),e(z,Hxo),e(z,a1),e(a1,sge),e(sge,Uxo),e(a1,Jxo),e(a1,UG),e(UG,Yxo),e(a1,Kxo),e(z,Zxo),e(z,n1),e(n1,lge),e(lge,e$o),e(n1,o$o),e(n1,JG),e(JG,r$o),e(n1,t$o),e(z,a$o),e(z,s1),e(s1,ige),e(ige,n$o),e(s1,s$o),e(s1,YG),e(YG,l$o),e(s1,i$o),e(z,d$o),e(z,l1),e(l1,dge),e(dge,c$o),e(l1,f$o),e(l1,KG),e(KG,m$o),e(l1,g$o),e(z,h$o),e(z,i1),e(i1,cge),e(cge,p$o),e(i1,_$o),e(i1,ZG),e(ZG,u$o),e(i1,b$o),e(z,v$o),e(z,d1),e(d1,fge),e(fge,F$o),e(d1,T$o),e(d1,eO),e(eO,M$o),e(d1,E$o),e(z,C$o),e(z,c1),e(c1,mge),e(mge,w$o),e(c1,A$o),e(c1,oO),e(oO,L$o),e(c1,y$o),e(z,x$o),e(z,f1),e(f1,gge),e(gge,$$o),e(f1,k$o),e(f1,rO),e(rO,S$o),e(f1,R$o),e(z,P$o),e(z,m1),e(m1,hge),e(hge,B$o),e(m1,I$o),e(m1,tO),e(tO,N$o),e(m1,q$o),e(z,j$o),e(z,g1),e(g1,pge),e(pge,D$o),e(g1,G$o),e(g1,aO),e(aO,O$o),e(g1,V$o),e(z,X$o),e(z,h1),e(h1,_ge),e(_ge,z$o),e(h1,Q$o),e(h1,nO),e(nO,W$o),e(h1,H$o),e(z,U$o),e(z,p1),e(p1,uge),e(uge,J$o),e(p1,Y$o),e(p1,sO),e(sO,K$o),e(p1,Z$o),e(z,eko),e(z,_1),e(_1,bge),e(bge,oko),e(_1,rko),e(_1,lO),e(lO,tko),e(_1,ako),e(z,nko),e(z,u1),e(u1,vge),e(vge,sko),e(u1,lko),e(u1,iO),e(iO,iko),e(u1,dko),e(z,cko),e(z,b1),e(b1,Fge),e(Fge,fko),e(b1,mko),e(b1,dO),e(dO,gko),e(b1,hko),e(Ke,pko),e(Ke,v1),e(v1,_ko),e(v1,Tge),e(Tge,uko),e(v1,bko),e(v1,Mge),e(Mge,vko),e(Ke,Fko),M(F1,Ke,null),b(f,aVe,u),b(f,Qi,u),e(Qi,T1),e(T1,Ege),M(xL,Ege,null),e(Qi,Tko),e(Qi,Cge),e(Cge,Mko),b(f,nVe,u),b(f,So,u),M($L,So,null),e(So,Eko),e(So,Wi),e(Wi,Cko),e(Wi,cO),e(cO,wko),e(Wi,Ako),e(Wi,fO),e(fO,Lko),e(Wi,yko),e(So,xko),e(So,kL),e(kL,$ko),e(kL,wge),e(wge,kko),e(kL,Sko),e(So,Rko),e(So,it),M(SL,it,null),e(it,Pko),e(it,Age),e(Age,Bko),e(it,Iko),e(it,Hi),e(Hi,Nko),e(Hi,Lge),e(Lge,qko),e(Hi,jko),e(Hi,mO),e(mO,Dko),e(Hi,Gko),e(it,Oko),M(M1,it,null),e(So,Vko),e(So,Ze),M(RL,Ze,null),e(Ze,Xko),e(Ze,yge),e(yge,zko),e(Ze,Qko),e(Ze,Ia),e(Ia,Wko),e(Ia,xge),e(xge,Hko),e(Ia,Uko),e(Ia,$ge),e($ge,Jko),e(Ia,Yko),e(Ia,kge),e(kge,Kko),e(Ia,Zko),e(Ze,eSo),e(Ze,W),e(W,E1),e(E1,Sge),e(Sge,oSo),e(E1,rSo),e(E1,gO),e(gO,tSo),e(E1,aSo),e(W,nSo),e(W,C1),e(C1,Rge),e(Rge,sSo),e(C1,lSo),e(C1,hO),e(hO,iSo),e(C1,dSo),e(W,cSo),e(W,w1),e(w1,Pge),e(Pge,fSo),e(w1,mSo),e(w1,pO),e(pO,gSo),e(w1,hSo),e(W,pSo),e(W,A1),e(A1,Bge),e(Bge,_So),e(A1,uSo),e(A1,_O),e(_O,bSo),e(A1,vSo),e(W,FSo),e(W,L1),e(L1,Ige),e(Ige,TSo),e(L1,MSo),e(L1,uO),e(uO,ESo),e(L1,CSo),e(W,wSo),e(W,y1),e(y1,Nge),e(Nge,ASo),e(y1,LSo),e(y1,bO),e(bO,ySo),e(y1,xSo),e(W,$So),e(W,x1),e(x1,qge),e(qge,kSo),e(x1,SSo),e(x1,vO),e(vO,RSo),e(x1,PSo),e(W,BSo),e(W,$1),e($1,jge),e(jge,ISo),e($1,NSo),e($1,FO),e(FO,qSo),e($1,jSo),e(W,DSo),e(W,k1),e(k1,Dge),e(Dge,GSo),e(k1,OSo),e(k1,TO),e(TO,VSo),e(k1,XSo),e(W,zSo),e(W,S1),e(S1,Gge),e(Gge,QSo),e(S1,WSo),e(S1,MO),e(MO,HSo),e(S1,USo),e(W,JSo),e(W,R1),e(R1,Oge),e(Oge,YSo),e(R1,KSo),e(R1,EO),e(EO,ZSo),e(R1,eRo),e(W,oRo),e(W,P1),e(P1,Vge),e(Vge,rRo),e(P1,tRo),e(P1,CO),e(CO,aRo),e(P1,nRo),e(W,sRo),e(W,B1),e(B1,Xge),e(Xge,lRo),e(B1,iRo),e(B1,wO),e(wO,dRo),e(B1,cRo),e(W,fRo),e(W,I1),e(I1,zge),e(zge,mRo),e(I1,gRo),e(I1,AO),e(AO,hRo),e(I1,pRo),e(W,_Ro),e(W,N1),e(N1,Qge),e(Qge,uRo),e(N1,bRo),e(N1,LO),e(LO,vRo),e(N1,FRo),e(W,TRo),e(W,q1),e(q1,Wge),e(Wge,MRo),e(q1,ERo),e(q1,yO),e(yO,CRo),e(q1,wRo),e(W,ARo),e(W,j1),e(j1,Hge),e(Hge,LRo),e(j1,yRo),e(j1,xO),e(xO,xRo),e(j1,$Ro),e(W,kRo),e(W,D1),e(D1,Uge),e(Uge,SRo),e(D1,RRo),e(D1,$O),e($O,PRo),e(D1,BRo),e(W,IRo),e(W,G1),e(G1,Jge),e(Jge,NRo),e(G1,qRo),e(G1,kO),e(kO,jRo),e(G1,DRo),e(W,GRo),e(W,O1),e(O1,Yge),e(Yge,ORo),e(O1,VRo),e(O1,SO),e(SO,XRo),e(O1,zRo),e(W,QRo),e(W,V1),e(V1,Kge),e(Kge,WRo),e(V1,HRo),e(V1,RO),e(RO,URo),e(V1,JRo),e(W,YRo),e(W,X1),e(X1,Zge),e(Zge,KRo),e(X1,ZRo),e(X1,PO),e(PO,ePo),e(X1,oPo),e(W,rPo),e(W,z1),e(z1,ehe),e(ehe,tPo),e(z1,aPo),e(z1,BO),e(BO,nPo),e(z1,sPo),e(W,lPo),e(W,Q1),e(Q1,ohe),e(ohe,iPo),e(Q1,dPo),e(Q1,IO),e(IO,cPo),e(Q1,fPo),e(W,mPo),e(W,W1),e(W1,rhe),e(rhe,gPo),e(W1,hPo),e(W1,NO),e(NO,pPo),e(W1,_Po),e(W,uPo),e(W,H1),e(H1,the),e(the,bPo),e(H1,vPo),e(H1,qO),e(qO,FPo),e(H1,TPo),e(W,MPo),e(W,U1),e(U1,ahe),e(ahe,EPo),e(U1,CPo),e(U1,jO),e(jO,wPo),e(U1,APo),e(W,LPo),e(W,J1),e(J1,nhe),e(nhe,yPo),e(J1,xPo),e(J1,DO),e(DO,$Po),e(J1,kPo),e(W,SPo),e(W,Y1),e(Y1,she),e(she,RPo),e(Y1,PPo),e(Y1,GO),e(GO,BPo),e(Y1,IPo),e(W,NPo),e(W,K1),e(K1,lhe),e(lhe,qPo),e(K1,jPo),e(K1,OO),e(OO,DPo),e(K1,GPo),e(W,OPo),e(W,Z1),e(Z1,ihe),e(ihe,VPo),e(Z1,XPo),e(Z1,VO),e(VO,zPo),e(Z1,QPo),e(W,WPo),e(W,e2),e(e2,dhe),e(dhe,HPo),e(e2,UPo),e(e2,XO),e(XO,JPo),e(e2,YPo),e(W,KPo),e(W,o2),e(o2,che),e(che,ZPo),e(o2,eBo),e(o2,zO),e(zO,oBo),e(o2,rBo),e(W,tBo),e(W,r2),e(r2,fhe),e(fhe,aBo),e(r2,nBo),e(r2,mhe),e(mhe,sBo),e(r2,lBo),e(W,iBo),e(W,t2),e(t2,ghe),e(ghe,dBo),e(t2,cBo),e(t2,QO),e(QO,fBo),e(t2,mBo),e(W,gBo),e(W,a2),e(a2,hhe),e(hhe,hBo),e(a2,pBo),e(a2,WO),e(WO,_Bo),e(a2,uBo),e(W,bBo),e(W,n2),e(n2,phe),e(phe,vBo),e(n2,FBo),e(n2,HO),e(HO,TBo),e(n2,MBo),e(W,EBo),e(W,s2),e(s2,_he),e(_he,CBo),e(s2,wBo),e(s2,UO),e(UO,ABo),e(s2,LBo),e(Ze,yBo),e(Ze,l2),e(l2,xBo),e(l2,uhe),e(uhe,$Bo),e(l2,kBo),e(l2,bhe),e(bhe,SBo),e(Ze,RBo),M(i2,Ze,null),b(f,sVe,u),b(f,Ui,u),e(Ui,d2),e(d2,vhe),M(PL,vhe,null),e(Ui,PBo),e(Ui,Fhe),e(Fhe,BBo),b(f,lVe,u),b(f,Ro,u),M(BL,Ro,null),e(Ro,IBo),e(Ro,Ji),e(Ji,NBo),e(Ji,JO),e(JO,qBo),e(Ji,jBo),e(Ji,YO),e(YO,DBo),e(Ji,GBo),e(Ro,OBo),e(Ro,IL),e(IL,VBo),e(IL,The),e(The,XBo),e(IL,zBo),e(Ro,QBo),e(Ro,dt),M(NL,dt,null),e(dt,WBo),e(dt,Mhe),e(Mhe,HBo),e(dt,UBo),e(dt,Yi),e(Yi,JBo),e(Yi,Ehe),e(Ehe,YBo),e(Yi,KBo),e(Yi,KO),e(KO,ZBo),e(Yi,eIo),e(dt,oIo),M(c2,dt,null),e(Ro,rIo),e(Ro,eo),M(qL,eo,null),e(eo,tIo),e(eo,Che),e(Che,aIo),e(eo,nIo),e(eo,Na),e(Na,sIo),e(Na,whe),e(whe,lIo),e(Na,iIo),e(Na,Ahe),e(Ahe,dIo),e(Na,cIo),e(Na,Lhe),e(Lhe,fIo),e(Na,mIo),e(eo,gIo),e(eo,he),e(he,f2),e(f2,yhe),e(yhe,hIo),e(f2,pIo),e(f2,ZO),e(ZO,_Io),e(f2,uIo),e(he,bIo),e(he,m2),e(m2,xhe),e(xhe,vIo),e(m2,FIo),e(m2,eV),e(eV,TIo),e(m2,MIo),e(he,EIo),e(he,g2),e(g2,$he),e($he,CIo),e(g2,wIo),e(g2,oV),e(oV,AIo),e(g2,LIo),e(he,yIo),e(he,h2),e(h2,khe),e(khe,xIo),e(h2,$Io),e(h2,rV),e(rV,kIo),e(h2,SIo),e(he,RIo),e(he,p2),e(p2,She),e(She,PIo),e(p2,BIo),e(p2,tV),e(tV,IIo),e(p2,NIo),e(he,qIo),e(he,_2),e(_2,Rhe),e(Rhe,jIo),e(_2,DIo),e(_2,aV),e(aV,GIo),e(_2,OIo),e(he,VIo),e(he,u2),e(u2,Phe),e(Phe,XIo),e(u2,zIo),e(u2,nV),e(nV,QIo),e(u2,WIo),e(he,HIo),e(he,b2),e(b2,Bhe),e(Bhe,UIo),e(b2,JIo),e(b2,sV),e(sV,YIo),e(b2,KIo),e(he,ZIo),e(he,v2),e(v2,Ihe),e(Ihe,eNo),e(v2,oNo),e(v2,lV),e(lV,rNo),e(v2,tNo),e(he,aNo),e(he,F2),e(F2,Nhe),e(Nhe,nNo),e(F2,sNo),e(F2,iV),e(iV,lNo),e(F2,iNo),e(he,dNo),e(he,T2),e(T2,qhe),e(qhe,cNo),e(T2,fNo),e(T2,dV),e(dV,mNo),e(T2,gNo),e(he,hNo),e(he,M2),e(M2,jhe),e(jhe,pNo),e(M2,_No),e(M2,cV),e(cV,uNo),e(M2,bNo),e(he,vNo),e(he,E2),e(E2,Dhe),e(Dhe,FNo),e(E2,TNo),e(E2,fV),e(fV,MNo),e(E2,ENo),e(he,CNo),e(he,C2),e(C2,Ghe),e(Ghe,wNo),e(C2,ANo),e(C2,mV),e(mV,LNo),e(C2,yNo),e(he,xNo),e(he,w2),e(w2,Ohe),e(Ohe,$No),e(w2,kNo),e(w2,gV),e(gV,SNo),e(w2,RNo),e(he,PNo),e(he,A2),e(A2,Vhe),e(Vhe,BNo),e(A2,INo),e(A2,hV),e(hV,NNo),e(A2,qNo),e(he,jNo),e(he,L2),e(L2,Xhe),e(Xhe,DNo),e(L2,GNo),e(L2,pV),e(pV,ONo),e(L2,VNo),e(he,XNo),e(he,y2),e(y2,zhe),e(zhe,zNo),e(y2,QNo),e(y2,_V),e(_V,WNo),e(y2,HNo),e(eo,UNo),e(eo,x2),e(x2,JNo),e(x2,Qhe),e(Qhe,YNo),e(x2,KNo),e(x2,Whe),e(Whe,ZNo),e(eo,eqo),M($2,eo,null),b(f,iVe,u),b(f,Ki,u),e(Ki,k2),e(k2,Hhe),M(jL,Hhe,null),e(Ki,oqo),e(Ki,Uhe),e(Uhe,rqo),b(f,dVe,u),b(f,Po,u),M(DL,Po,null),e(Po,tqo),e(Po,Zi),e(Zi,aqo),e(Zi,uV),e(uV,nqo),e(Zi,sqo),e(Zi,bV),e(bV,lqo),e(Zi,iqo),e(Po,dqo),e(Po,GL),e(GL,cqo),e(GL,Jhe),e(Jhe,fqo),e(GL,mqo),e(Po,gqo),e(Po,ct),M(OL,ct,null),e(ct,hqo),e(ct,Yhe),e(Yhe,pqo),e(ct,_qo),e(ct,ed),e(ed,uqo),e(ed,Khe),e(Khe,bqo),e(ed,vqo),e(ed,vV),e(vV,Fqo),e(ed,Tqo),e(ct,Mqo),M(S2,ct,null),e(Po,Eqo),e(Po,oo),M(VL,oo,null),e(oo,Cqo),e(oo,Zhe),e(Zhe,wqo),e(oo,Aqo),e(oo,qa),e(qa,Lqo),e(qa,epe),e(epe,yqo),e(qa,xqo),e(qa,ope),e(ope,$qo),e(qa,kqo),e(qa,rpe),e(rpe,Sqo),e(qa,Rqo),e(oo,Pqo),e(oo,N),e(N,R2),e(R2,tpe),e(tpe,Bqo),e(R2,Iqo),e(R2,FV),e(FV,Nqo),e(R2,qqo),e(N,jqo),e(N,P2),e(P2,ape),e(ape,Dqo),e(P2,Gqo),e(P2,TV),e(TV,Oqo),e(P2,Vqo),e(N,Xqo),e(N,B2),e(B2,npe),e(npe,zqo),e(B2,Qqo),e(B2,MV),e(MV,Wqo),e(B2,Hqo),e(N,Uqo),e(N,I2),e(I2,spe),e(spe,Jqo),e(I2,Yqo),e(I2,EV),e(EV,Kqo),e(I2,Zqo),e(N,ejo),e(N,N2),e(N2,lpe),e(lpe,ojo),e(N2,rjo),e(N2,CV),e(CV,tjo),e(N2,ajo),e(N,njo),e(N,q2),e(q2,ipe),e(ipe,sjo),e(q2,ljo),e(q2,wV),e(wV,ijo),e(q2,djo),e(N,cjo),e(N,j2),e(j2,dpe),e(dpe,fjo),e(j2,mjo),e(j2,AV),e(AV,gjo),e(j2,hjo),e(N,pjo),e(N,D2),e(D2,cpe),e(cpe,_jo),e(D2,ujo),e(D2,LV),e(LV,bjo),e(D2,vjo),e(N,Fjo),e(N,G2),e(G2,fpe),e(fpe,Tjo),e(G2,Mjo),e(G2,yV),e(yV,Ejo),e(G2,Cjo),e(N,wjo),e(N,O2),e(O2,mpe),e(mpe,Ajo),e(O2,Ljo),e(O2,xV),e(xV,yjo),e(O2,xjo),e(N,$jo),e(N,V2),e(V2,gpe),e(gpe,kjo),e(V2,Sjo),e(V2,$V),e($V,Rjo),e(V2,Pjo),e(N,Bjo),e(N,X2),e(X2,hpe),e(hpe,Ijo),e(X2,Njo),e(X2,kV),e(kV,qjo),e(X2,jjo),e(N,Djo),e(N,z2),e(z2,ppe),e(ppe,Gjo),e(z2,Ojo),e(z2,SV),e(SV,Vjo),e(z2,Xjo),e(N,zjo),e(N,Q2),e(Q2,_pe),e(_pe,Qjo),e(Q2,Wjo),e(Q2,RV),e(RV,Hjo),e(Q2,Ujo),e(N,Jjo),e(N,W2),e(W2,upe),e(upe,Yjo),e(W2,Kjo),e(W2,PV),e(PV,Zjo),e(W2,eDo),e(N,oDo),e(N,H2),e(H2,bpe),e(bpe,rDo),e(H2,tDo),e(H2,BV),e(BV,aDo),e(H2,nDo),e(N,sDo),e(N,U2),e(U2,vpe),e(vpe,lDo),e(U2,iDo),e(U2,IV),e(IV,dDo),e(U2,cDo),e(N,fDo),e(N,J2),e(J2,Fpe),e(Fpe,mDo),e(J2,gDo),e(J2,NV),e(NV,hDo),e(J2,pDo),e(N,_Do),e(N,Y2),e(Y2,Tpe),e(Tpe,uDo),e(Y2,bDo),e(Y2,qV),e(qV,vDo),e(Y2,FDo),e(N,TDo),e(N,K2),e(K2,Mpe),e(Mpe,MDo),e(K2,EDo),e(K2,jV),e(jV,CDo),e(K2,wDo),e(N,ADo),e(N,Z2),e(Z2,Epe),e(Epe,LDo),e(Z2,yDo),e(Z2,DV),e(DV,xDo),e(Z2,$Do),e(N,kDo),e(N,eb),e(eb,Cpe),e(Cpe,SDo),e(eb,RDo),e(eb,GV),e(GV,PDo),e(eb,BDo),e(N,IDo),e(N,ob),e(ob,wpe),e(wpe,NDo),e(ob,qDo),e(ob,OV),e(OV,jDo),e(ob,DDo),e(N,GDo),e(N,rb),e(rb,Ape),e(Ape,ODo),e(rb,VDo),e(rb,VV),e(VV,XDo),e(rb,zDo),e(N,QDo),e(N,tb),e(tb,Lpe),e(Lpe,WDo),e(tb,HDo),e(tb,XV),e(XV,UDo),e(tb,JDo),e(N,YDo),e(N,ab),e(ab,ype),e(ype,KDo),e(ab,ZDo),e(ab,zV),e(zV,eGo),e(ab,oGo),e(N,rGo),e(N,nb),e(nb,xpe),e(xpe,tGo),e(nb,aGo),e(nb,QV),e(QV,nGo),e(nb,sGo),e(N,lGo),e(N,sb),e(sb,$pe),e($pe,iGo),e(sb,dGo),e(sb,WV),e(WV,cGo),e(sb,fGo),e(N,mGo),e(N,lb),e(lb,kpe),e(kpe,gGo),e(lb,hGo),e(lb,HV),e(HV,pGo),e(lb,_Go),e(N,uGo),e(N,ib),e(ib,Spe),e(Spe,bGo),e(ib,vGo),e(ib,UV),e(UV,FGo),e(ib,TGo),e(N,MGo),e(N,db),e(db,Rpe),e(Rpe,EGo),e(db,CGo),e(db,JV),e(JV,wGo),e(db,AGo),e(N,LGo),e(N,cb),e(cb,Ppe),e(Ppe,yGo),e(cb,xGo),e(cb,YV),e(YV,$Go),e(cb,kGo),e(N,SGo),e(N,fb),e(fb,Bpe),e(Bpe,RGo),e(fb,PGo),e(fb,KV),e(KV,BGo),e(fb,IGo),e(N,NGo),e(N,mb),e(mb,Ipe),e(Ipe,qGo),e(mb,jGo),e(mb,ZV),e(ZV,DGo),e(mb,GGo),e(N,OGo),e(N,gb),e(gb,Npe),e(Npe,VGo),e(gb,XGo),e(gb,eX),e(eX,zGo),e(gb,QGo),e(N,WGo),e(N,hb),e(hb,qpe),e(qpe,HGo),e(hb,UGo),e(hb,oX),e(oX,JGo),e(hb,YGo),e(N,KGo),e(N,pb),e(pb,jpe),e(jpe,ZGo),e(pb,eOo),e(pb,rX),e(rX,oOo),e(pb,rOo),e(N,tOo),e(N,_b),e(_b,Dpe),e(Dpe,aOo),e(_b,nOo),e(_b,tX),e(tX,sOo),e(_b,lOo),e(N,iOo),e(N,ub),e(ub,Gpe),e(Gpe,dOo),e(ub,cOo),e(ub,aX),e(aX,fOo),e(ub,mOo),e(N,gOo),e(N,bb),e(bb,Ope),e(Ope,hOo),e(bb,pOo),e(bb,nX),e(nX,_Oo),e(bb,uOo),e(N,bOo),e(N,vb),e(vb,Vpe),e(Vpe,vOo),e(vb,FOo),e(vb,sX),e(sX,TOo),e(vb,MOo),e(N,EOo),e(N,Fb),e(Fb,Xpe),e(Xpe,COo),e(Fb,wOo),e(Fb,lX),e(lX,AOo),e(Fb,LOo),e(N,yOo),e(N,Tb),e(Tb,zpe),e(zpe,xOo),e(Tb,$Oo),e(Tb,iX),e(iX,kOo),e(Tb,SOo),e(N,ROo),e(N,Mb),e(Mb,Qpe),e(Qpe,POo),e(Mb,BOo),e(Mb,dX),e(dX,IOo),e(Mb,NOo),e(N,qOo),e(N,Eb),e(Eb,Wpe),e(Wpe,jOo),e(Eb,DOo),e(Eb,cX),e(cX,GOo),e(Eb,OOo),e(N,VOo),e(N,Cb),e(Cb,Hpe),e(Hpe,XOo),e(Cb,zOo),e(Cb,fX),e(fX,QOo),e(Cb,WOo),e(N,HOo),e(N,wb),e(wb,Upe),e(Upe,UOo),e(wb,JOo),e(wb,mX),e(mX,YOo),e(wb,KOo),e(N,ZOo),e(N,Ab),e(Ab,Jpe),e(Jpe,eVo),e(Ab,oVo),e(Ab,gX),e(gX,rVo),e(Ab,tVo),e(N,aVo),e(N,Lb),e(Lb,Ype),e(Ype,nVo),e(Lb,sVo),e(Lb,hX),e(hX,lVo),e(Lb,iVo),e(N,dVo),e(N,yb),e(yb,Kpe),e(Kpe,cVo),e(yb,fVo),e(yb,pX),e(pX,mVo),e(yb,gVo),e(oo,hVo),e(oo,xb),e(xb,pVo),e(xb,Zpe),e(Zpe,_Vo),e(xb,uVo),e(xb,e_e),e(e_e,bVo),e(oo,vVo),M($b,oo,null),b(f,cVe,u),b(f,od,u),e(od,kb),e(kb,o_e),M(XL,o_e,null),e(od,FVo),e(od,r_e),e(r_e,TVo),b(f,fVe,u),b(f,Bo,u),M(zL,Bo,null),e(Bo,MVo),e(Bo,rd),e(rd,EVo),e(rd,_X),e(_X,CVo),e(rd,wVo),e(rd,uX),e(uX,AVo),e(rd,LVo),e(Bo,yVo),e(Bo,QL),e(QL,xVo),e(QL,t_e),e(t_e,$Vo),e(QL,kVo),e(Bo,SVo),e(Bo,ft),M(WL,ft,null),e(ft,RVo),e(ft,a_e),e(a_e,PVo),e(ft,BVo),e(ft,td),e(td,IVo),e(td,n_e),e(n_e,NVo),e(td,qVo),e(td,bX),e(bX,jVo),e(td,DVo),e(ft,GVo),M(Sb,ft,null),e(Bo,OVo),e(Bo,ro),M(HL,ro,null),e(ro,VVo),e(ro,s_e),e(s_e,XVo),e(ro,zVo),e(ro,ja),e(ja,QVo),e(ja,l_e),e(l_e,WVo),e(ja,HVo),e(ja,i_e),e(i_e,UVo),e(ja,JVo),e(ja,d_e),e(d_e,YVo),e(ja,KVo),e(ro,ZVo),e(ro,Z),e(Z,Rb),e(Rb,c_e),e(c_e,eXo),e(Rb,oXo),e(Rb,vX),e(vX,rXo),e(Rb,tXo),e(Z,aXo),e(Z,Pb),e(Pb,f_e),e(f_e,nXo),e(Pb,sXo),e(Pb,FX),e(FX,lXo),e(Pb,iXo),e(Z,dXo),e(Z,Bb),e(Bb,m_e),e(m_e,cXo),e(Bb,fXo),e(Bb,TX),e(TX,mXo),e(Bb,gXo),e(Z,hXo),e(Z,Ib),e(Ib,g_e),e(g_e,pXo),e(Ib,_Xo),e(Ib,MX),e(MX,uXo),e(Ib,bXo),e(Z,vXo),e(Z,Nb),e(Nb,h_e),e(h_e,FXo),e(Nb,TXo),e(Nb,EX),e(EX,MXo),e(Nb,EXo),e(Z,CXo),e(Z,qb),e(qb,p_e),e(p_e,wXo),e(qb,AXo),e(qb,CX),e(CX,LXo),e(qb,yXo),e(Z,xXo),e(Z,jb),e(jb,__e),e(__e,$Xo),e(jb,kXo),e(jb,wX),e(wX,SXo),e(jb,RXo),e(Z,PXo),e(Z,Db),e(Db,u_e),e(u_e,BXo),e(Db,IXo),e(Db,AX),e(AX,NXo),e(Db,qXo),e(Z,jXo),e(Z,Gb),e(Gb,b_e),e(b_e,DXo),e(Gb,GXo),e(Gb,LX),e(LX,OXo),e(Gb,VXo),e(Z,XXo),e(Z,Ob),e(Ob,v_e),e(v_e,zXo),e(Ob,QXo),e(Ob,yX),e(yX,WXo),e(Ob,HXo),e(Z,UXo),e(Z,Vb),e(Vb,F_e),e(F_e,JXo),e(Vb,YXo),e(Vb,xX),e(xX,KXo),e(Vb,ZXo),e(Z,ezo),e(Z,Xb),e(Xb,T_e),e(T_e,ozo),e(Xb,rzo),e(Xb,$X),e($X,tzo),e(Xb,azo),e(Z,nzo),e(Z,zb),e(zb,M_e),e(M_e,szo),e(zb,lzo),e(zb,kX),e(kX,izo),e(zb,dzo),e(Z,czo),e(Z,Qb),e(Qb,E_e),e(E_e,fzo),e(Qb,mzo),e(Qb,SX),e(SX,gzo),e(Qb,hzo),e(Z,pzo),e(Z,Wb),e(Wb,C_e),e(C_e,_zo),e(Wb,uzo),e(Wb,RX),e(RX,bzo),e(Wb,vzo),e(Z,Fzo),e(Z,Hb),e(Hb,w_e),e(w_e,Tzo),e(Hb,Mzo),e(Hb,PX),e(PX,Ezo),e(Hb,Czo),e(Z,wzo),e(Z,Ub),e(Ub,A_e),e(A_e,Azo),e(Ub,Lzo),e(Ub,BX),e(BX,yzo),e(Ub,xzo),e(Z,$zo),e(Z,Jb),e(Jb,L_e),e(L_e,kzo),e(Jb,Szo),e(Jb,IX),e(IX,Rzo),e(Jb,Pzo),e(Z,Bzo),e(Z,Yb),e(Yb,y_e),e(y_e,Izo),e(Yb,Nzo),e(Yb,NX),e(NX,qzo),e(Yb,jzo),e(Z,Dzo),e(Z,Kb),e(Kb,x_e),e(x_e,Gzo),e(Kb,Ozo),e(Kb,qX),e(qX,Vzo),e(Kb,Xzo),e(Z,zzo),e(Z,Zb),e(Zb,$_e),e($_e,Qzo),e(Zb,Wzo),e(Zb,jX),e(jX,Hzo),e(Zb,Uzo),e(Z,Jzo),e(Z,ev),e(ev,k_e),e(k_e,Yzo),e(ev,Kzo),e(ev,DX),e(DX,Zzo),e(ev,eQo),e(Z,oQo),e(Z,ov),e(ov,S_e),e(S_e,rQo),e(ov,tQo),e(ov,GX),e(GX,aQo),e(ov,nQo),e(Z,sQo),e(Z,rv),e(rv,R_e),e(R_e,lQo),e(rv,iQo),e(rv,OX),e(OX,dQo),e(rv,cQo),e(Z,fQo),e(Z,tv),e(tv,P_e),e(P_e,mQo),e(tv,gQo),e(tv,VX),e(VX,hQo),e(tv,pQo),e(Z,_Qo),e(Z,av),e(av,B_e),e(B_e,uQo),e(av,bQo),e(av,XX),e(XX,vQo),e(av,FQo),e(Z,TQo),e(Z,nv),e(nv,I_e),e(I_e,MQo),e(nv,EQo),e(nv,zX),e(zX,CQo),e(nv,wQo),e(Z,AQo),e(Z,sv),e(sv,N_e),e(N_e,LQo),e(sv,yQo),e(sv,QX),e(QX,xQo),e(sv,$Qo),e(Z,kQo),e(Z,lv),e(lv,q_e),e(q_e,SQo),e(lv,RQo),e(lv,WX),e(WX,PQo),e(lv,BQo),e(Z,IQo),e(Z,iv),e(iv,j_e),e(j_e,NQo),e(iv,qQo),e(iv,HX),e(HX,jQo),e(iv,DQo),e(ro,GQo),e(ro,dv),e(dv,OQo),e(dv,D_e),e(D_e,VQo),e(dv,XQo),e(dv,G_e),e(G_e,zQo),e(ro,QQo),M(cv,ro,null),b(f,mVe,u),b(f,ad,u),e(ad,fv),e(fv,O_e),M(UL,O_e,null),e(ad,WQo),e(ad,V_e),e(V_e,HQo),b(f,gVe,u),b(f,Io,u),M(JL,Io,null),e(Io,UQo),e(Io,nd),e(nd,JQo),e(nd,UX),e(UX,YQo),e(nd,KQo),e(nd,JX),e(JX,ZQo),e(nd,eWo),e(Io,oWo),e(Io,YL),e(YL,rWo),e(YL,X_e),e(X_e,tWo),e(YL,aWo),e(Io,nWo),e(Io,mt),M(KL,mt,null),e(mt,sWo),e(mt,z_e),e(z_e,lWo),e(mt,iWo),e(mt,sd),e(sd,dWo),e(sd,Q_e),e(Q_e,cWo),e(sd,fWo),e(sd,YX),e(YX,mWo),e(sd,gWo),e(mt,hWo),M(mv,mt,null),e(Io,pWo),e(Io,to),M(ZL,to,null),e(to,_Wo),e(to,W_e),e(W_e,uWo),e(to,bWo),e(to,Da),e(Da,vWo),e(Da,H_e),e(H_e,FWo),e(Da,TWo),e(Da,U_e),e(U_e,MWo),e(Da,EWo),e(Da,J_e),e(J_e,CWo),e(Da,wWo),e(to,AWo),e(to,No),e(No,gv),e(gv,Y_e),e(Y_e,LWo),e(gv,yWo),e(gv,KX),e(KX,xWo),e(gv,$Wo),e(No,kWo),e(No,hv),e(hv,K_e),e(K_e,SWo),e(hv,RWo),e(hv,ZX),e(ZX,PWo),e(hv,BWo),e(No,IWo),e(No,pv),e(pv,Z_e),e(Z_e,NWo),e(pv,qWo),e(pv,ez),e(ez,jWo),e(pv,DWo),e(No,GWo),e(No,_v),e(_v,eue),e(eue,OWo),e(_v,VWo),e(_v,oz),e(oz,XWo),e(_v,zWo),e(No,QWo),e(No,uv),e(uv,oue),e(oue,WWo),e(uv,HWo),e(uv,rz),e(rz,UWo),e(uv,JWo),e(No,YWo),e(No,bv),e(bv,rue),e(rue,KWo),e(bv,ZWo),e(bv,tz),e(tz,eHo),e(bv,oHo),e(to,rHo),e(to,vv),e(vv,tHo),e(vv,tue),e(tue,aHo),e(vv,nHo),e(vv,aue),e(aue,sHo),e(to,lHo),M(Fv,to,null),b(f,hVe,u),b(f,ld,u),e(ld,Tv),e(Tv,nue),M(ey,nue,null),e(ld,iHo),e(ld,sue),e(sue,dHo),b(f,pVe,u),b(f,qo,u),M(oy,qo,null),e(qo,cHo),e(qo,id),e(id,fHo),e(id,az),e(az,mHo),e(id,gHo),e(id,nz),e(nz,hHo),e(id,pHo),e(qo,_Ho),e(qo,ry),e(ry,uHo),e(ry,lue),e(lue,bHo),e(ry,vHo),e(qo,FHo),e(qo,gt),M(ty,gt,null),e(gt,THo),e(gt,iue),e(iue,MHo),e(gt,EHo),e(gt,dd),e(dd,CHo),e(dd,due),e(due,wHo),e(dd,AHo),e(dd,sz),e(sz,LHo),e(dd,yHo),e(gt,xHo),M(Mv,gt,null),e(qo,$Ho),e(qo,ao),M(ay,ao,null),e(ao,kHo),e(ao,cue),e(cue,SHo),e(ao,RHo),e(ao,Ga),e(Ga,PHo),e(Ga,fue),e(fue,BHo),e(Ga,IHo),e(Ga,mue),e(mue,NHo),e(Ga,qHo),e(Ga,gue),e(gue,jHo),e(Ga,DHo),e(ao,GHo),e(ao,U),e(U,Ev),e(Ev,hue),e(hue,OHo),e(Ev,VHo),e(Ev,lz),e(lz,XHo),e(Ev,zHo),e(U,QHo),e(U,Cv),e(Cv,pue),e(pue,WHo),e(Cv,HHo),e(Cv,iz),e(iz,UHo),e(Cv,JHo),e(U,YHo),e(U,wv),e(wv,_ue),e(_ue,KHo),e(wv,ZHo),e(wv,dz),e(dz,eUo),e(wv,oUo),e(U,rUo),e(U,Av),e(Av,uue),e(uue,tUo),e(Av,aUo),e(Av,cz),e(cz,nUo),e(Av,sUo),e(U,lUo),e(U,Lv),e(Lv,bue),e(bue,iUo),e(Lv,dUo),e(Lv,fz),e(fz,cUo),e(Lv,fUo),e(U,mUo),e(U,yv),e(yv,vue),e(vue,gUo),e(yv,hUo),e(yv,mz),e(mz,pUo),e(yv,_Uo),e(U,uUo),e(U,xv),e(xv,Fue),e(Fue,bUo),e(xv,vUo),e(xv,gz),e(gz,FUo),e(xv,TUo),e(U,MUo),e(U,$v),e($v,Tue),e(Tue,EUo),e($v,CUo),e($v,hz),e(hz,wUo),e($v,AUo),e(U,LUo),e(U,kv),e(kv,Mue),e(Mue,yUo),e(kv,xUo),e(kv,pz),e(pz,$Uo),e(kv,kUo),e(U,SUo),e(U,Sv),e(Sv,Eue),e(Eue,RUo),e(Sv,PUo),e(Sv,_z),e(_z,BUo),e(Sv,IUo),e(U,NUo),e(U,Rv),e(Rv,Cue),e(Cue,qUo),e(Rv,jUo),e(Rv,uz),e(uz,DUo),e(Rv,GUo),e(U,OUo),e(U,Pv),e(Pv,wue),e(wue,VUo),e(Pv,XUo),e(Pv,bz),e(bz,zUo),e(Pv,QUo),e(U,WUo),e(U,Bv),e(Bv,Aue),e(Aue,HUo),e(Bv,UUo),e(Bv,vz),e(vz,JUo),e(Bv,YUo),e(U,KUo),e(U,Iv),e(Iv,Lue),e(Lue,ZUo),e(Iv,eJo),e(Iv,Fz),e(Fz,oJo),e(Iv,rJo),e(U,tJo),e(U,Nv),e(Nv,yue),e(yue,aJo),e(Nv,nJo),e(Nv,Tz),e(Tz,sJo),e(Nv,lJo),e(U,iJo),e(U,qv),e(qv,xue),e(xue,dJo),e(qv,cJo),e(qv,Mz),e(Mz,fJo),e(qv,mJo),e(U,gJo),e(U,jv),e(jv,$ue),e($ue,hJo),e(jv,pJo),e(jv,Ez),e(Ez,_Jo),e(jv,uJo),e(U,bJo),e(U,Dv),e(Dv,kue),e(kue,vJo),e(Dv,FJo),e(Dv,Cz),e(Cz,TJo),e(Dv,MJo),e(U,EJo),e(U,Gv),e(Gv,Sue),e(Sue,CJo),e(Gv,wJo),e(Gv,wz),e(wz,AJo),e(Gv,LJo),e(U,yJo),e(U,Ov),e(Ov,Rue),e(Rue,xJo),e(Ov,$Jo),e(Ov,Az),e(Az,kJo),e(Ov,SJo),e(U,RJo),e(U,Vv),e(Vv,Pue),e(Pue,PJo),e(Vv,BJo),e(Vv,Lz),e(Lz,IJo),e(Vv,NJo),e(U,qJo),e(U,Xv),e(Xv,Bue),e(Bue,jJo),e(Xv,DJo),e(Xv,yz),e(yz,GJo),e(Xv,OJo),e(U,VJo),e(U,zv),e(zv,Iue),e(Iue,XJo),e(zv,zJo),e(zv,xz),e(xz,QJo),e(zv,WJo),e(U,HJo),e(U,Qv),e(Qv,Nue),e(Nue,UJo),e(Qv,JJo),e(Qv,$z),e($z,YJo),e(Qv,KJo),e(U,ZJo),e(U,Wv),e(Wv,que),e(que,eYo),e(Wv,oYo),e(Wv,kz),e(kz,rYo),e(Wv,tYo),e(U,aYo),e(U,Hv),e(Hv,jue),e(jue,nYo),e(Hv,sYo),e(Hv,Sz),e(Sz,lYo),e(Hv,iYo),e(U,dYo),e(U,Uv),e(Uv,Due),e(Due,cYo),e(Uv,fYo),e(Uv,Rz),e(Rz,mYo),e(Uv,gYo),e(U,hYo),e(U,Jv),e(Jv,Gue),e(Gue,pYo),e(Jv,_Yo),e(Jv,Pz),e(Pz,uYo),e(Jv,bYo),e(U,vYo),e(U,Yv),e(Yv,Oue),e(Oue,FYo),e(Yv,TYo),e(Yv,Bz),e(Bz,MYo),e(Yv,EYo),e(U,CYo),e(U,Kv),e(Kv,Vue),e(Vue,wYo),e(Kv,AYo),e(Kv,Iz),e(Iz,LYo),e(Kv,yYo),e(U,xYo),e(U,Zv),e(Zv,Xue),e(Xue,$Yo),e(Zv,kYo),e(Zv,Nz),e(Nz,SYo),e(Zv,RYo),e(U,PYo),e(U,eF),e(eF,zue),e(zue,BYo),e(eF,IYo),e(eF,qz),e(qz,NYo),e(eF,qYo),e(U,jYo),e(U,oF),e(oF,Que),e(Que,DYo),e(oF,GYo),e(oF,jz),e(jz,OYo),e(oF,VYo),e(U,XYo),e(U,rF),e(rF,Wue),e(Wue,zYo),e(rF,QYo),e(rF,Dz),e(Dz,WYo),e(rF,HYo),e(U,UYo),e(U,tF),e(tF,Hue),e(Hue,JYo),e(tF,YYo),e(tF,Gz),e(Gz,KYo),e(tF,ZYo),e(U,eKo),e(U,aF),e(aF,Uue),e(Uue,oKo),e(aF,rKo),e(aF,Oz),e(Oz,tKo),e(aF,aKo),e(ao,nKo),e(ao,nF),e(nF,sKo),e(nF,Jue),e(Jue,lKo),e(nF,iKo),e(nF,Yue),e(Yue,dKo),e(ao,cKo),M(sF,ao,null),b(f,_Ve,u),b(f,cd,u),e(cd,lF),e(lF,Kue),M(ny,Kue,null),e(cd,fKo),e(cd,Zue),e(Zue,mKo),b(f,uVe,u),b(f,jo,u),M(sy,jo,null),e(jo,gKo),e(jo,fd),e(fd,hKo),e(fd,Vz),e(Vz,pKo),e(fd,_Ko),e(fd,Xz),e(Xz,uKo),e(fd,bKo),e(jo,vKo),e(jo,ly),e(ly,FKo),e(ly,e7e),e(e7e,TKo),e(ly,MKo),e(jo,EKo),e(jo,ht),M(iy,ht,null),e(ht,CKo),e(ht,o7e),e(o7e,wKo),e(ht,AKo),e(ht,md),e(md,LKo),e(md,r7e),e(r7e,yKo),e(md,xKo),e(md,zz),e(zz,$Ko),e(md,kKo),e(ht,SKo),M(iF,ht,null),e(jo,RKo),e(jo,no),M(dy,no,null),e(no,PKo),e(no,t7e),e(t7e,BKo),e(no,IKo),e(no,Oa),e(Oa,NKo),e(Oa,a7e),e(a7e,qKo),e(Oa,jKo),e(Oa,n7e),e(n7e,DKo),e(Oa,GKo),e(Oa,s7e),e(s7e,OKo),e(Oa,VKo),e(no,XKo),e(no,V),e(V,dF),e(dF,l7e),e(l7e,zKo),e(dF,QKo),e(dF,Qz),e(Qz,WKo),e(dF,HKo),e(V,UKo),e(V,cF),e(cF,i7e),e(i7e,JKo),e(cF,YKo),e(cF,Wz),e(Wz,KKo),e(cF,ZKo),e(V,eZo),e(V,fF),e(fF,d7e),e(d7e,oZo),e(fF,rZo),e(fF,Hz),e(Hz,tZo),e(fF,aZo),e(V,nZo),e(V,mF),e(mF,c7e),e(c7e,sZo),e(mF,lZo),e(mF,Uz),e(Uz,iZo),e(mF,dZo),e(V,cZo),e(V,gF),e(gF,f7e),e(f7e,fZo),e(gF,mZo),e(gF,Jz),e(Jz,gZo),e(gF,hZo),e(V,pZo),e(V,hF),e(hF,m7e),e(m7e,_Zo),e(hF,uZo),e(hF,Yz),e(Yz,bZo),e(hF,vZo),e(V,FZo),e(V,pF),e(pF,g7e),e(g7e,TZo),e(pF,MZo),e(pF,Kz),e(Kz,EZo),e(pF,CZo),e(V,wZo),e(V,_F),e(_F,h7e),e(h7e,AZo),e(_F,LZo),e(_F,Zz),e(Zz,yZo),e(_F,xZo),e(V,$Zo),e(V,uF),e(uF,p7e),e(p7e,kZo),e(uF,SZo),e(uF,eQ),e(eQ,RZo),e(uF,PZo),e(V,BZo),e(V,bF),e(bF,_7e),e(_7e,IZo),e(bF,NZo),e(bF,oQ),e(oQ,qZo),e(bF,jZo),e(V,DZo),e(V,vF),e(vF,u7e),e(u7e,GZo),e(vF,OZo),e(vF,rQ),e(rQ,VZo),e(vF,XZo),e(V,zZo),e(V,FF),e(FF,b7e),e(b7e,QZo),e(FF,WZo),e(FF,tQ),e(tQ,HZo),e(FF,UZo),e(V,JZo),e(V,TF),e(TF,v7e),e(v7e,YZo),e(TF,KZo),e(TF,aQ),e(aQ,ZZo),e(TF,eer),e(V,oer),e(V,MF),e(MF,F7e),e(F7e,rer),e(MF,ter),e(MF,nQ),e(nQ,aer),e(MF,ner),e(V,ser),e(V,EF),e(EF,T7e),e(T7e,ler),e(EF,ier),e(EF,sQ),e(sQ,der),e(EF,cer),e(V,fer),e(V,CF),e(CF,M7e),e(M7e,mer),e(CF,ger),e(CF,lQ),e(lQ,her),e(CF,per),e(V,_er),e(V,wF),e(wF,E7e),e(E7e,uer),e(wF,ber),e(wF,iQ),e(iQ,ver),e(wF,Fer),e(V,Ter),e(V,AF),e(AF,C7e),e(C7e,Mer),e(AF,Eer),e(AF,dQ),e(dQ,Cer),e(AF,wer),e(V,Aer),e(V,LF),e(LF,w7e),e(w7e,Ler),e(LF,yer),e(LF,cQ),e(cQ,xer),e(LF,$er),e(V,ker),e(V,yF),e(yF,A7e),e(A7e,Ser),e(yF,Rer),e(yF,fQ),e(fQ,Per),e(yF,Ber),e(V,Ier),e(V,xF),e(xF,L7e),e(L7e,Ner),e(xF,qer),e(xF,mQ),e(mQ,jer),e(xF,Der),e(V,Ger),e(V,$F),e($F,y7e),e(y7e,Oer),e($F,Ver),e($F,gQ),e(gQ,Xer),e($F,zer),e(V,Qer),e(V,kF),e(kF,x7e),e(x7e,Wer),e(kF,Her),e(kF,hQ),e(hQ,Uer),e(kF,Jer),e(V,Yer),e(V,SF),e(SF,$7e),e($7e,Ker),e(SF,Zer),e(SF,pQ),e(pQ,eor),e(SF,oor),e(V,ror),e(V,RF),e(RF,k7e),e(k7e,tor),e(RF,aor),e(RF,_Q),e(_Q,nor),e(RF,sor),e(V,lor),e(V,PF),e(PF,S7e),e(S7e,ior),e(PF,dor),e(PF,uQ),e(uQ,cor),e(PF,mor),e(V,gor),e(V,BF),e(BF,R7e),e(R7e,hor),e(BF,por),e(BF,bQ),e(bQ,_or),e(BF,uor),e(V,bor),e(V,IF),e(IF,P7e),e(P7e,vor),e(IF,For),e(IF,vQ),e(vQ,Tor),e(IF,Mor),e(V,Eor),e(V,NF),e(NF,B7e),e(B7e,Cor),e(NF,wor),e(NF,FQ),e(FQ,Aor),e(NF,Lor),e(V,yor),e(V,qF),e(qF,I7e),e(I7e,xor),e(qF,$or),e(qF,TQ),e(TQ,kor),e(qF,Sor),e(V,Ror),e(V,jF),e(jF,N7e),e(N7e,Por),e(jF,Bor),e(jF,MQ),e(MQ,Ior),e(jF,Nor),e(V,qor),e(V,DF),e(DF,q7e),e(q7e,jor),e(DF,Dor),e(DF,EQ),e(EQ,Gor),e(DF,Oor),e(V,Vor),e(V,GF),e(GF,j7e),e(j7e,Xor),e(GF,zor),e(GF,CQ),e(CQ,Qor),e(GF,Wor),e(V,Hor),e(V,OF),e(OF,D7e),e(D7e,Uor),e(OF,Jor),e(OF,wQ),e(wQ,Yor),e(OF,Kor),e(V,Zor),e(V,VF),e(VF,G7e),e(G7e,err),e(VF,orr),e(VF,AQ),e(AQ,rrr),e(VF,trr),e(V,arr),e(V,XF),e(XF,O7e),e(O7e,nrr),e(XF,srr),e(XF,LQ),e(LQ,lrr),e(XF,irr),e(V,drr),e(V,zF),e(zF,V7e),e(V7e,crr),e(zF,frr),e(zF,yQ),e(yQ,mrr),e(zF,grr),e(V,hrr),e(V,QF),e(QF,X7e),e(X7e,prr),e(QF,_rr),e(QF,xQ),e(xQ,urr),e(QF,brr),e(V,vrr),e(V,WF),e(WF,z7e),e(z7e,Frr),e(WF,Trr),e(WF,$Q),e($Q,Mrr),e(WF,Err),e(V,Crr),e(V,HF),e(HF,Q7e),e(Q7e,wrr),e(HF,Arr),e(HF,kQ),e(kQ,Lrr),e(HF,yrr),e(V,xrr),e(V,UF),e(UF,W7e),e(W7e,$rr),e(UF,krr),e(UF,SQ),e(SQ,Srr),e(UF,Rrr),e(V,Prr),e(V,JF),e(JF,H7e),e(H7e,Brr),e(JF,Irr),e(JF,RQ),e(RQ,Nrr),e(JF,qrr),e(no,jrr),e(no,YF),e(YF,Drr),e(YF,U7e),e(U7e,Grr),e(YF,Orr),e(YF,J7e),e(J7e,Vrr),e(no,Xrr),M(KF,no,null),b(f,bVe,u),b(f,gd,u),e(gd,ZF),e(ZF,Y7e),M(cy,Y7e,null),e(gd,zrr),e(gd,K7e),e(K7e,Qrr),b(f,vVe,u),b(f,Do,u),M(fy,Do,null),e(Do,Wrr),e(Do,hd),e(hd,Hrr),e(hd,PQ),e(PQ,Urr),e(hd,Jrr),e(hd,BQ),e(BQ,Yrr),e(hd,Krr),e(Do,Zrr),e(Do,my),e(my,etr),e(my,Z7e),e(Z7e,otr),e(my,rtr),e(Do,ttr),e(Do,pt),M(gy,pt,null),e(pt,atr),e(pt,e1e),e(e1e,ntr),e(pt,str),e(pt,pd),e(pd,ltr),e(pd,o1e),e(o1e,itr),e(pd,dtr),e(pd,IQ),e(IQ,ctr),e(pd,ftr),e(pt,mtr),M(eT,pt,null),e(Do,gtr),e(Do,so),M(hy,so,null),e(so,htr),e(so,r1e),e(r1e,ptr),e(so,_tr),e(so,Va),e(Va,utr),e(Va,t1e),e(t1e,btr),e(Va,vtr),e(Va,a1e),e(a1e,Ftr),e(Va,Ttr),e(Va,n1e),e(n1e,Mtr),e(Va,Etr),e(so,Ctr),e(so,s1e),e(s1e,oT),e(oT,l1e),e(l1e,wtr),e(oT,Atr),e(oT,NQ),e(NQ,Ltr),e(oT,ytr),e(so,xtr),e(so,rT),e(rT,$tr),e(rT,i1e),e(i1e,ktr),e(rT,Str),e(rT,d1e),e(d1e,Rtr),e(so,Ptr),M(tT,so,null),b(f,FVe,u),b(f,_d,u),e(_d,aT),e(aT,c1e),M(py,c1e,null),e(_d,Btr),e(_d,f1e),e(f1e,Itr),b(f,TVe,u),b(f,Go,u),M(_y,Go,null),e(Go,Ntr),e(Go,ud),e(ud,qtr),e(ud,qQ),e(qQ,jtr),e(ud,Dtr),e(ud,jQ),e(jQ,Gtr),e(ud,Otr),e(Go,Vtr),e(Go,uy),e(uy,Xtr),e(uy,m1e),e(m1e,ztr),e(uy,Qtr),e(Go,Wtr),e(Go,_t),M(by,_t,null),e(_t,Htr),e(_t,g1e),e(g1e,Utr),e(_t,Jtr),e(_t,bd),e(bd,Ytr),e(bd,h1e),e(h1e,Ktr),e(bd,Ztr),e(bd,DQ),e(DQ,ear),e(bd,oar),e(_t,rar),M(nT,_t,null),e(Go,tar),e(Go,lo),M(vy,lo,null),e(lo,aar),e(lo,p1e),e(p1e,nar),e(lo,sar),e(lo,Xa),e(Xa,lar),e(Xa,_1e),e(_1e,iar),e(Xa,dar),e(Xa,u1e),e(u1e,car),e(Xa,far),e(Xa,b1e),e(b1e,mar),e(Xa,gar),e(lo,har),e(lo,Fe),e(Fe,sT),e(sT,v1e),e(v1e,par),e(sT,_ar),e(sT,GQ),e(GQ,uar),e(sT,bar),e(Fe,Far),e(Fe,lT),e(lT,F1e),e(F1e,Tar),e(lT,Mar),e(lT,OQ),e(OQ,Ear),e(lT,Car),e(Fe,war),e(Fe,iT),e(iT,T1e),e(T1e,Aar),e(iT,Lar),e(iT,VQ),e(VQ,yar),e(iT,xar),e(Fe,$ar),e(Fe,dT),e(dT,M1e),e(M1e,kar),e(dT,Sar),e(dT,XQ),e(XQ,Rar),e(dT,Par),e(Fe,Bar),e(Fe,Qs),e(Qs,E1e),e(E1e,Iar),e(Qs,Nar),e(Qs,zQ),e(zQ,qar),e(Qs,jar),e(Qs,QQ),e(QQ,Dar),e(Qs,Gar),e(Fe,Oar),e(Fe,cT),e(cT,C1e),e(C1e,Var),e(cT,Xar),e(cT,WQ),e(WQ,zar),e(cT,Qar),e(Fe,War),e(Fe,Ws),e(Ws,w1e),e(w1e,Har),e(Ws,Uar),e(Ws,HQ),e(HQ,Jar),e(Ws,Yar),e(Ws,UQ),e(UQ,Kar),e(Ws,Zar),e(Fe,enr),e(Fe,ut),e(ut,A1e),e(A1e,onr),e(ut,rnr),e(ut,JQ),e(JQ,tnr),e(ut,anr),e(ut,YQ),e(YQ,nnr),e(ut,snr),e(ut,KQ),e(KQ,lnr),e(ut,inr),e(Fe,dnr),e(Fe,fT),e(fT,L1e),e(L1e,cnr),e(fT,fnr),e(fT,ZQ),e(ZQ,mnr),e(fT,gnr),e(Fe,hnr),e(Fe,mT),e(mT,y1e),e(y1e,pnr),e(mT,_nr),e(mT,eW),e(eW,unr),e(mT,bnr),e(Fe,vnr),e(Fe,gT),e(gT,x1e),e(x1e,Fnr),e(gT,Tnr),e(gT,oW),e(oW,Mnr),e(gT,Enr),e(Fe,Cnr),e(Fe,hT),e(hT,$1e),e($1e,wnr),e(hT,Anr),e(hT,rW),e(rW,Lnr),e(hT,ynr),e(Fe,xnr),e(Fe,pT),e(pT,k1e),e(k1e,$nr),e(pT,knr),e(pT,tW),e(tW,Snr),e(pT,Rnr),e(Fe,Pnr),e(Fe,_T),e(_T,S1e),e(S1e,Bnr),e(_T,Inr),e(_T,aW),e(aW,Nnr),e(_T,qnr),e(Fe,jnr),e(Fe,uT),e(uT,R1e),e(R1e,Dnr),e(uT,Gnr),e(uT,nW),e(nW,Onr),e(uT,Vnr),e(lo,Xnr),e(lo,bT),e(bT,znr),e(bT,P1e),e(P1e,Qnr),e(bT,Wnr),e(bT,B1e),e(B1e,Hnr),e(lo,Unr),M(vT,lo,null),b(f,MVe,u),b(f,vd,u),e(vd,FT),e(FT,I1e),M(Fy,I1e,null),e(vd,Jnr),e(vd,N1e),e(N1e,Ynr),b(f,EVe,u),b(f,Oo,u),M(Ty,Oo,null),e(Oo,Knr),e(Oo,Fd),e(Fd,Znr),e(Fd,sW),e(sW,esr),e(Fd,osr),e(Fd,lW),e(lW,rsr),e(Fd,tsr),e(Oo,asr),e(Oo,My),e(My,nsr),e(My,q1e),e(q1e,ssr),e(My,lsr),e(Oo,isr),e(Oo,bt),M(Ey,bt,null),e(bt,dsr),e(bt,j1e),e(j1e,csr),e(bt,fsr),e(bt,Td),e(Td,msr),e(Td,D1e),e(D1e,gsr),e(Td,hsr),e(Td,iW),e(iW,psr),e(Td,_sr),e(bt,usr),M(TT,bt,null),e(Oo,bsr),e(Oo,io),M(Cy,io,null),e(io,vsr),e(io,G1e),e(G1e,Fsr),e(io,Tsr),e(io,za),e(za,Msr),e(za,O1e),e(O1e,Esr),e(za,Csr),e(za,V1e),e(V1e,wsr),e(za,Asr),e(za,X1e),e(X1e,Lsr),e(za,ysr),e(io,xsr),e(io,z1e),e(z1e,MT),e(MT,Q1e),e(Q1e,$sr),e(MT,ksr),e(MT,dW),e(dW,Ssr),e(MT,Rsr),e(io,Psr),e(io,ET),e(ET,Bsr),e(ET,W1e),e(W1e,Isr),e(ET,Nsr),e(ET,H1e),e(H1e,qsr),e(io,jsr),M(CT,io,null),b(f,CVe,u),b(f,Md,u),e(Md,wT),e(wT,U1e),M(wy,U1e,null),e(Md,Dsr),e(Md,J1e),e(J1e,Gsr),b(f,wVe,u),b(f,Vo,u),M(Ay,Vo,null),e(Vo,Osr),e(Vo,Ed),e(Ed,Vsr),e(Ed,cW),e(cW,Xsr),e(Ed,zsr),e(Ed,fW),e(fW,Qsr),e(Ed,Wsr),e(Vo,Hsr),e(Vo,Ly),e(Ly,Usr),e(Ly,Y1e),e(Y1e,Jsr),e(Ly,Ysr),e(Vo,Ksr),e(Vo,vt),M(yy,vt,null),e(vt,Zsr),e(vt,K1e),e(K1e,elr),e(vt,olr),e(vt,Cd),e(Cd,rlr),e(Cd,Z1e),e(Z1e,tlr),e(Cd,alr),e(Cd,mW),e(mW,nlr),e(Cd,slr),e(vt,llr),M(AT,vt,null),e(Vo,ilr),e(Vo,co),M(xy,co,null),e(co,dlr),e(co,e2e),e(e2e,clr),e(co,flr),e(co,Qa),e(Qa,mlr),e(Qa,o2e),e(o2e,glr),e(Qa,hlr),e(Qa,r2e),e(r2e,plr),e(Qa,_lr),e(Qa,t2e),e(t2e,ulr),e(Qa,blr),e(co,vlr),e(co,a2e),e(a2e,LT),e(LT,n2e),e(n2e,Flr),e(LT,Tlr),e(LT,gW),e(gW,Mlr),e(LT,Elr),e(co,Clr),e(co,yT),e(yT,wlr),e(yT,s2e),e(s2e,Alr),e(yT,Llr),e(yT,l2e),e(l2e,ylr),e(co,xlr),M(xT,co,null),b(f,AVe,u),b(f,wd,u),e(wd,$T),e($T,i2e),M($y,i2e,null),e(wd,$lr),e(wd,d2e),e(d2e,klr),b(f,LVe,u),b(f,Xo,u),M(ky,Xo,null),e(Xo,Slr),e(Xo,Ad),e(Ad,Rlr),e(Ad,hW),e(hW,Plr),e(Ad,Blr),e(Ad,pW),e(pW,Ilr),e(Ad,Nlr),e(Xo,qlr),e(Xo,Sy),e(Sy,jlr),e(Sy,c2e),e(c2e,Dlr),e(Sy,Glr),e(Xo,Olr),e(Xo,Ft),M(Ry,Ft,null),e(Ft,Vlr),e(Ft,f2e),e(f2e,Xlr),e(Ft,zlr),e(Ft,Ld),e(Ld,Qlr),e(Ld,m2e),e(m2e,Wlr),e(Ld,Hlr),e(Ld,_W),e(_W,Ulr),e(Ld,Jlr),e(Ft,Ylr),M(kT,Ft,null),e(Xo,Klr),e(Xo,fo),M(Py,fo,null),e(fo,Zlr),e(fo,g2e),e(g2e,eir),e(fo,oir),e(fo,Wa),e(Wa,rir),e(Wa,h2e),e(h2e,tir),e(Wa,air),e(Wa,p2e),e(p2e,nir),e(Wa,sir),e(Wa,_2e),e(_2e,lir),e(Wa,iir),e(fo,dir),e(fo,Pe),e(Pe,ST),e(ST,u2e),e(u2e,cir),e(ST,fir),e(ST,uW),e(uW,mir),e(ST,gir),e(Pe,hir),e(Pe,RT),e(RT,b2e),e(b2e,pir),e(RT,_ir),e(RT,bW),e(bW,uir),e(RT,bir),e(Pe,vir),e(Pe,PT),e(PT,v2e),e(v2e,Fir),e(PT,Tir),e(PT,vW),e(vW,Mir),e(PT,Eir),e(Pe,Cir),e(Pe,BT),e(BT,F2e),e(F2e,wir),e(BT,Air),e(BT,FW),e(FW,Lir),e(BT,yir),e(Pe,xir),e(Pe,IT),e(IT,T2e),e(T2e,$ir),e(IT,kir),e(IT,TW),e(TW,Sir),e(IT,Rir),e(Pe,Pir),e(Pe,NT),e(NT,M2e),e(M2e,Bir),e(NT,Iir),e(NT,MW),e(MW,Nir),e(NT,qir),e(Pe,jir),e(Pe,qT),e(qT,E2e),e(E2e,Dir),e(qT,Gir),e(qT,EW),e(EW,Oir),e(qT,Vir),e(Pe,Xir),e(Pe,jT),e(jT,C2e),e(C2e,zir),e(jT,Qir),e(jT,CW),e(CW,Wir),e(jT,Hir),e(Pe,Uir),e(Pe,DT),e(DT,w2e),e(w2e,Jir),e(DT,Yir),e(DT,wW),e(wW,Kir),e(DT,Zir),e(fo,edr),e(fo,GT),e(GT,odr),e(GT,A2e),e(A2e,rdr),e(GT,tdr),e(GT,L2e),e(L2e,adr),e(fo,ndr),M(OT,fo,null),b(f,yVe,u),b(f,yd,u),e(yd,VT),e(VT,y2e),M(By,y2e,null),e(yd,sdr),e(yd,x2e),e(x2e,ldr),b(f,xVe,u),b(f,zo,u),M(Iy,zo,null),e(zo,idr),e(zo,xd),e(xd,ddr),e(xd,AW),e(AW,cdr),e(xd,fdr),e(xd,LW),e(LW,mdr),e(xd,gdr),e(zo,hdr),e(zo,Ny),e(Ny,pdr),e(Ny,$2e),e($2e,_dr),e(Ny,udr),e(zo,bdr),e(zo,Tt),M(qy,Tt,null),e(Tt,vdr),e(Tt,k2e),e(k2e,Fdr),e(Tt,Tdr),e(Tt,$d),e($d,Mdr),e($d,S2e),e(S2e,Edr),e($d,Cdr),e($d,yW),e(yW,wdr),e($d,Adr),e(Tt,Ldr),M(XT,Tt,null),e(zo,ydr),e(zo,mo),M(jy,mo,null),e(mo,xdr),e(mo,R2e),e(R2e,$dr),e(mo,kdr),e(mo,Ha),e(Ha,Sdr),e(Ha,P2e),e(P2e,Rdr),e(Ha,Pdr),e(Ha,B2e),e(B2e,Bdr),e(Ha,Idr),e(Ha,I2e),e(I2e,Ndr),e(Ha,qdr),e(mo,jdr),e(mo,et),e(et,zT),e(zT,N2e),e(N2e,Ddr),e(zT,Gdr),e(zT,xW),e(xW,Odr),e(zT,Vdr),e(et,Xdr),e(et,QT),e(QT,q2e),e(q2e,zdr),e(QT,Qdr),e(QT,$W),e($W,Wdr),e(QT,Hdr),e(et,Udr),e(et,WT),e(WT,j2e),e(j2e,Jdr),e(WT,Ydr),e(WT,kW),e(kW,Kdr),e(WT,Zdr),e(et,ecr),e(et,HT),e(HT,D2e),e(D2e,ocr),e(HT,rcr),e(HT,SW),e(SW,tcr),e(HT,acr),e(et,ncr),e(et,UT),e(UT,G2e),e(G2e,scr),e(UT,lcr),e(UT,RW),e(RW,icr),e(UT,dcr),e(mo,ccr),e(mo,JT),e(JT,fcr),e(JT,O2e),e(O2e,mcr),e(JT,gcr),e(JT,V2e),e(V2e,hcr),e(mo,pcr),M(YT,mo,null),b(f,$Ve,u),b(f,kd,u),e(kd,KT),e(KT,X2e),M(Dy,X2e,null),e(kd,_cr),e(kd,z2e),e(z2e,ucr),b(f,kVe,u),b(f,Qo,u),M(Gy,Qo,null),e(Qo,bcr),e(Qo,Sd),e(Sd,vcr),e(Sd,PW),e(PW,Fcr),e(Sd,Tcr),e(Sd,BW),e(BW,Mcr),e(Sd,Ecr),e(Qo,Ccr),e(Qo,Oy),e(Oy,wcr),e(Oy,Q2e),e(Q2e,Acr),e(Oy,Lcr),e(Qo,ycr),e(Qo,Mt),M(Vy,Mt,null),e(Mt,xcr),e(Mt,W2e),e(W2e,$cr),e(Mt,kcr),e(Mt,Rd),e(Rd,Scr),e(Rd,H2e),e(H2e,Rcr),e(Rd,Pcr),e(Rd,IW),e(IW,Bcr),e(Rd,Icr),e(Mt,Ncr),M(ZT,Mt,null),e(Qo,qcr),e(Qo,go),M(Xy,go,null),e(go,jcr),e(go,U2e),e(U2e,Dcr),e(go,Gcr),e(go,Ua),e(Ua,Ocr),e(Ua,J2e),e(J2e,Vcr),e(Ua,Xcr),e(Ua,Y2e),e(Y2e,zcr),e(Ua,Qcr),e(Ua,K2e),e(K2e,Wcr),e(Ua,Hcr),e(go,Ucr),e(go,Le),e(Le,e8),e(e8,Z2e),e(Z2e,Jcr),e(e8,Ycr),e(e8,NW),e(NW,Kcr),e(e8,Zcr),e(Le,efr),e(Le,o8),e(o8,ebe),e(ebe,ofr),e(o8,rfr),e(o8,qW),e(qW,tfr),e(o8,afr),e(Le,nfr),e(Le,r8),e(r8,obe),e(obe,sfr),e(r8,lfr),e(r8,jW),e(jW,ifr),e(r8,dfr),e(Le,cfr),e(Le,t8),e(t8,rbe),e(rbe,ffr),e(t8,mfr),e(t8,DW),e(DW,gfr),e(t8,hfr),e(Le,pfr),e(Le,a8),e(a8,tbe),e(tbe,_fr),e(a8,ufr),e(a8,GW),e(GW,bfr),e(a8,vfr),e(Le,Ffr),e(Le,n8),e(n8,abe),e(abe,Tfr),e(n8,Mfr),e(n8,OW),e(OW,Efr),e(n8,Cfr),e(Le,wfr),e(Le,s8),e(s8,nbe),e(nbe,Afr),e(s8,Lfr),e(s8,VW),e(VW,yfr),e(s8,xfr),e(Le,$fr),e(Le,l8),e(l8,sbe),e(sbe,kfr),e(l8,Sfr),e(l8,XW),e(XW,Rfr),e(l8,Pfr),e(Le,Bfr),e(Le,i8),e(i8,lbe),e(lbe,Ifr),e(i8,Nfr),e(i8,zW),e(zW,qfr),e(i8,jfr),e(Le,Dfr),e(Le,d8),e(d8,ibe),e(ibe,Gfr),e(d8,Ofr),e(d8,QW),e(QW,Vfr),e(d8,Xfr),e(go,zfr),e(go,c8),e(c8,Qfr),e(c8,dbe),e(dbe,Wfr),e(c8,Hfr),e(c8,cbe),e(cbe,Ufr),e(go,Jfr),M(f8,go,null),b(f,SVe,u),b(f,Pd,u),e(Pd,m8),e(m8,fbe),M(zy,fbe,null),e(Pd,Yfr),e(Pd,mbe),e(mbe,Kfr),b(f,RVe,u),b(f,Wo,u),M(Qy,Wo,null),e(Wo,Zfr),e(Wo,Bd),e(Bd,emr),e(Bd,WW),e(WW,omr),e(Bd,rmr),e(Bd,HW),e(HW,tmr),e(Bd,amr),e(Wo,nmr),e(Wo,Wy),e(Wy,smr),e(Wy,gbe),e(gbe,lmr),e(Wy,imr),e(Wo,dmr),e(Wo,Et),M(Hy,Et,null),e(Et,cmr),e(Et,hbe),e(hbe,fmr),e(Et,mmr),e(Et,Id),e(Id,gmr),e(Id,pbe),e(pbe,hmr),e(Id,pmr),e(Id,UW),e(UW,_mr),e(Id,umr),e(Et,bmr),M(g8,Et,null),e(Wo,vmr),e(Wo,ho),M(Uy,ho,null),e(ho,Fmr),e(ho,_be),e(_be,Tmr),e(ho,Mmr),e(ho,Ja),e(Ja,Emr),e(Ja,ube),e(ube,Cmr),e(Ja,wmr),e(Ja,bbe),e(bbe,Amr),e(Ja,Lmr),e(Ja,vbe),e(vbe,ymr),e(Ja,xmr),e(ho,$mr),e(ho,Jy),e(Jy,h8),e(h8,Fbe),e(Fbe,kmr),e(h8,Smr),e(h8,JW),e(JW,Rmr),e(h8,Pmr),e(Jy,Bmr),e(Jy,p8),e(p8,Tbe),e(Tbe,Imr),e(p8,Nmr),e(p8,YW),e(YW,qmr),e(p8,jmr),e(ho,Dmr),e(ho,_8),e(_8,Gmr),e(_8,Mbe),e(Mbe,Omr),e(_8,Vmr),e(_8,Ebe),e(Ebe,Xmr),e(ho,zmr),M(u8,ho,null),b(f,PVe,u),b(f,Nd,u),e(Nd,b8),e(b8,Cbe),M(Yy,Cbe,null),e(Nd,Qmr),e(Nd,wbe),e(wbe,Wmr),b(f,BVe,u),b(f,Ho,u),M(Ky,Ho,null),e(Ho,Hmr),e(Ho,qd),e(qd,Umr),e(qd,KW),e(KW,Jmr),e(qd,Ymr),e(qd,ZW),e(ZW,Kmr),e(qd,Zmr),e(Ho,egr),e(Ho,Zy),e(Zy,ogr),e(Zy,Abe),e(Abe,rgr),e(Zy,tgr),e(Ho,agr),e(Ho,Ct),M(e9,Ct,null),e(Ct,ngr),e(Ct,Lbe),e(Lbe,sgr),e(Ct,lgr),e(Ct,jd),e(jd,igr),e(jd,ybe),e(ybe,dgr),e(jd,cgr),e(jd,eH),e(eH,fgr),e(jd,mgr),e(Ct,ggr),M(v8,Ct,null),e(Ho,hgr),e(Ho,po),M(o9,po,null),e(po,pgr),e(po,xbe),e(xbe,_gr),e(po,ugr),e(po,Ya),e(Ya,bgr),e(Ya,$be),e($be,vgr),e(Ya,Fgr),e(Ya,kbe),e(kbe,Tgr),e(Ya,Mgr),e(Ya,Sbe),e(Sbe,Egr),e(Ya,Cgr),e(po,wgr),e(po,ot),e(ot,F8),e(F8,Rbe),e(Rbe,Agr),e(F8,Lgr),e(F8,oH),e(oH,ygr),e(F8,xgr),e(ot,$gr),e(ot,T8),e(T8,Pbe),e(Pbe,kgr),e(T8,Sgr),e(T8,rH),e(rH,Rgr),e(T8,Pgr),e(ot,Bgr),e(ot,M8),e(M8,Bbe),e(Bbe,Igr),e(M8,Ngr),e(M8,tH),e(tH,qgr),e(M8,jgr),e(ot,Dgr),e(ot,E8),e(E8,Ibe),e(Ibe,Ggr),e(E8,Ogr),e(E8,aH),e(aH,Vgr),e(E8,Xgr),e(ot,zgr),e(ot,C8),e(C8,Nbe),e(Nbe,Qgr),e(C8,Wgr),e(C8,nH),e(nH,Hgr),e(C8,Ugr),e(po,Jgr),e(po,w8),e(w8,Ygr),e(w8,qbe),e(qbe,Kgr),e(w8,Zgr),e(w8,jbe),e(jbe,ehr),e(po,ohr),M(A8,po,null),b(f,IVe,u),b(f,Dd,u),e(Dd,L8),e(L8,Dbe),M(r9,Dbe,null),e(Dd,rhr),e(Dd,Gbe),e(Gbe,thr),b(f,NVe,u),b(f,Uo,u),M(t9,Uo,null),e(Uo,ahr),e(Uo,Gd),e(Gd,nhr),e(Gd,sH),e(sH,shr),e(Gd,lhr),e(Gd,lH),e(lH,ihr),e(Gd,dhr),e(Uo,chr),e(Uo,a9),e(a9,fhr),e(a9,Obe),e(Obe,mhr),e(a9,ghr),e(Uo,hhr),e(Uo,wt),M(n9,wt,null),e(wt,phr),e(wt,Vbe),e(Vbe,_hr),e(wt,uhr),e(wt,Od),e(Od,bhr),e(Od,Xbe),e(Xbe,vhr),e(Od,Fhr),e(Od,iH),e(iH,Thr),e(Od,Mhr),e(wt,Ehr),M(y8,wt,null),e(Uo,Chr),e(Uo,_o),M(s9,_o,null),e(_o,whr),e(_o,zbe),e(zbe,Ahr),e(_o,Lhr),e(_o,Ka),e(Ka,yhr),e(Ka,Qbe),e(Qbe,xhr),e(Ka,$hr),e(Ka,Wbe),e(Wbe,khr),e(Ka,Shr),e(Ka,Hbe),e(Hbe,Rhr),e(Ka,Phr),e(_o,Bhr),e(_o,Vd),e(Vd,x8),e(x8,Ube),e(Ube,Ihr),e(x8,Nhr),e(x8,dH),e(dH,qhr),e(x8,jhr),e(Vd,Dhr),e(Vd,$8),e($8,Jbe),e(Jbe,Ghr),e($8,Ohr),e($8,cH),e(cH,Vhr),e($8,Xhr),e(Vd,zhr),e(Vd,k8),e(k8,Ybe),e(Ybe,Qhr),e(k8,Whr),e(k8,fH),e(fH,Hhr),e(k8,Uhr),e(_o,Jhr),e(_o,S8),e(S8,Yhr),e(S8,Kbe),e(Kbe,Khr),e(S8,Zhr),e(S8,Zbe),e(Zbe,epr),e(_o,opr),M(R8,_o,null),b(f,qVe,u),b(f,Xd,u),e(Xd,P8),e(P8,eve),M(l9,eve,null),e(Xd,rpr),e(Xd,ove),e(ove,tpr),b(f,jVe,u),b(f,Jo,u),M(i9,Jo,null),e(Jo,apr),e(Jo,zd),e(zd,npr),e(zd,mH),e(mH,spr),e(zd,lpr),e(zd,gH),e(gH,ipr),e(zd,dpr),e(Jo,cpr),e(Jo,d9),e(d9,fpr),e(d9,rve),e(rve,mpr),e(d9,gpr),e(Jo,hpr),e(Jo,At),M(c9,At,null),e(At,ppr),e(At,tve),e(tve,_pr),e(At,upr),e(At,Qd),e(Qd,bpr),e(Qd,ave),e(ave,vpr),e(Qd,Fpr),e(Qd,hH),e(hH,Tpr),e(Qd,Mpr),e(At,Epr),M(B8,At,null),e(Jo,Cpr),e(Jo,uo),M(f9,uo,null),e(uo,wpr),e(uo,nve),e(nve,Apr),e(uo,Lpr),e(uo,Za),e(Za,ypr),e(Za,sve),e(sve,xpr),e(Za,$pr),e(Za,lve),e(lve,kpr),e(Za,Spr),e(Za,ive),e(ive,Rpr),e(Za,Ppr),e(uo,Bpr),e(uo,m9),e(m9,I8),e(I8,dve),e(dve,Ipr),e(I8,Npr),e(I8,pH),e(pH,qpr),e(I8,jpr),e(m9,Dpr),e(m9,N8),e(N8,cve),e(cve,Gpr),e(N8,Opr),e(N8,_H),e(_H,Vpr),e(N8,Xpr),e(uo,zpr),e(uo,q8),e(q8,Qpr),e(q8,fve),e(fve,Wpr),e(q8,Hpr),e(q8,mve),e(mve,Upr),e(uo,Jpr),M(j8,uo,null),b(f,DVe,u),b(f,Wd,u),e(Wd,D8),e(D8,gve),M(g9,gve,null),e(Wd,Ypr),e(Wd,hve),e(hve,Kpr),b(f,GVe,u),b(f,Yo,u),M(h9,Yo,null),e(Yo,Zpr),e(Yo,Hd),e(Hd,e_r),e(Hd,uH),e(uH,o_r),e(Hd,r_r),e(Hd,bH),e(bH,t_r),e(Hd,a_r),e(Yo,n_r),e(Yo,p9),e(p9,s_r),e(p9,pve),e(pve,l_r),e(p9,i_r),e(Yo,d_r),e(Yo,Lt),M(_9,Lt,null),e(Lt,c_r),e(Lt,_ve),e(_ve,f_r),e(Lt,m_r),e(Lt,Ud),e(Ud,g_r),e(Ud,uve),e(uve,h_r),e(Ud,p_r),e(Ud,vH),e(vH,__r),e(Ud,u_r),e(Lt,b_r),M(G8,Lt,null),e(Yo,v_r),e(Yo,bo),M(u9,bo,null),e(bo,F_r),e(bo,bve),e(bve,T_r),e(bo,M_r),e(bo,en),e(en,E_r),e(en,vve),e(vve,C_r),e(en,w_r),e(en,Fve),e(Fve,A_r),e(en,L_r),e(en,Tve),e(Tve,y_r),e(en,x_r),e(bo,$_r),e(bo,Mve),e(Mve,O8),e(O8,Eve),e(Eve,k_r),e(O8,S_r),e(O8,FH),e(FH,R_r),e(O8,P_r),e(bo,B_r),e(bo,V8),e(V8,I_r),e(V8,Cve),e(Cve,N_r),e(V8,q_r),e(V8,wve),e(wve,j_r),e(bo,D_r),M(X8,bo,null),b(f,OVe,u),b(f,Jd,u),e(Jd,z8),e(z8,Ave),M(b9,Ave,null),e(Jd,G_r),e(Jd,Lve),e(Lve,O_r),b(f,VVe,u),b(f,Ko,u),M(v9,Ko,null),e(Ko,V_r),e(Ko,Yd),e(Yd,X_r),e(Yd,TH),e(TH,z_r),e(Yd,Q_r),e(Yd,MH),e(MH,W_r),e(Yd,H_r),e(Ko,U_r),e(Ko,F9),e(F9,J_r),e(F9,yve),e(yve,Y_r),e(F9,K_r),e(Ko,Z_r),e(Ko,yt),M(T9,yt,null),e(yt,eur),e(yt,xve),e(xve,our),e(yt,rur),e(yt,Kd),e(Kd,tur),e(Kd,$ve),e($ve,aur),e(Kd,nur),e(Kd,EH),e(EH,sur),e(Kd,lur),e(yt,iur),M(Q8,yt,null),e(Ko,dur),e(Ko,vo),M(M9,vo,null),e(vo,cur),e(vo,kve),e(kve,fur),e(vo,mur),e(vo,on),e(on,gur),e(on,Sve),e(Sve,hur),e(on,pur),e(on,Rve),e(Rve,_ur),e(on,uur),e(on,Pve),e(Pve,bur),e(on,vur),e(vo,Fur),e(vo,rn),e(rn,W8),e(W8,Bve),e(Bve,Tur),e(W8,Mur),e(W8,CH),e(CH,Eur),e(W8,Cur),e(rn,wur),e(rn,H8),e(H8,Ive),e(Ive,Aur),e(H8,Lur),e(H8,wH),e(wH,yur),e(H8,xur),e(rn,$ur),e(rn,U8),e(U8,Nve),e(Nve,kur),e(U8,Sur),e(U8,AH),e(AH,Rur),e(U8,Pur),e(rn,Bur),e(rn,J8),e(J8,qve),e(qve,Iur),e(J8,Nur),e(J8,LH),e(LH,qur),e(J8,jur),e(vo,Dur),e(vo,Y8),e(Y8,Gur),e(Y8,jve),e(jve,Our),e(Y8,Vur),e(Y8,Dve),e(Dve,Xur),e(vo,zur),M(K8,vo,null),b(f,XVe,u),b(f,Zd,u),e(Zd,Z8),e(Z8,Gve),M(E9,Gve,null),e(Zd,Qur),e(Zd,Ove),e(Ove,Wur),b(f,zVe,u),b(f,Zo,u),M(C9,Zo,null),e(Zo,Hur),e(Zo,ec),e(ec,Uur),e(ec,yH),e(yH,Jur),e(ec,Yur),e(ec,xH),e(xH,Kur),e(ec,Zur),e(Zo,e7r),e(Zo,w9),e(w9,o7r),e(w9,Vve),e(Vve,r7r),e(w9,t7r),e(Zo,a7r),e(Zo,xt),M(A9,xt,null),e(xt,n7r),e(xt,Xve),e(Xve,s7r),e(xt,l7r),e(xt,oc),e(oc,i7r),e(oc,zve),e(zve,d7r),e(oc,c7r),e(oc,$H),e($H,f7r),e(oc,m7r),e(xt,g7r),M(eM,xt,null),e(Zo,h7r),e(Zo,Fo),M(L9,Fo,null),e(Fo,p7r),e(Fo,Qve),e(Qve,_7r),e(Fo,u7r),e(Fo,tn),e(tn,b7r),e(tn,Wve),e(Wve,v7r),e(tn,F7r),e(tn,Hve),e(Hve,T7r),e(tn,M7r),e(tn,Uve),e(Uve,E7r),e(tn,C7r),e(Fo,w7r),e(Fo,Jve),e(Jve,oM),e(oM,Yve),e(Yve,A7r),e(oM,L7r),e(oM,kH),e(kH,y7r),e(oM,x7r),e(Fo,$7r),e(Fo,rM),e(rM,k7r),e(rM,Kve),e(Kve,S7r),e(rM,R7r),e(rM,Zve),e(Zve,P7r),e(Fo,B7r),M(tM,Fo,null),b(f,QVe,u),b(f,rc,u),e(rc,aM),e(aM,eFe),M(y9,eFe,null),e(rc,I7r),e(rc,oFe),e(oFe,N7r),b(f,WVe,u),b(f,er,u),M(x9,er,null),e(er,q7r),e(er,tc),e(tc,j7r),e(tc,SH),e(SH,D7r),e(tc,G7r),e(tc,RH),e(RH,O7r),e(tc,V7r),e(er,X7r),e(er,$9),e($9,z7r),e($9,rFe),e(rFe,Q7r),e($9,W7r),e(er,H7r),e(er,$t),M(k9,$t,null),e($t,U7r),e($t,tFe),e(tFe,J7r),e($t,Y7r),e($t,ac),e(ac,K7r),e(ac,aFe),e(aFe,Z7r),e(ac,e1r),e(ac,PH),e(PH,o1r),e(ac,r1r),e($t,t1r),M(nM,$t,null),e(er,a1r),e(er,yr),M(S9,yr,null),e(yr,n1r),e(yr,nFe),e(nFe,s1r),e(yr,l1r),e(yr,an),e(an,i1r),e(an,sFe),e(sFe,d1r),e(an,c1r),e(an,lFe),e(lFe,f1r),e(an,m1r),e(an,iFe),e(iFe,g1r),e(an,h1r),e(yr,p1r),e(yr,j),e(j,sM),e(sM,dFe),e(dFe,_1r),e(sM,u1r),e(sM,BH),e(BH,b1r),e(sM,v1r),e(j,F1r),e(j,lM),e(lM,cFe),e(cFe,T1r),e(lM,M1r),e(lM,IH),e(IH,E1r),e(lM,C1r),e(j,w1r),e(j,iM),e(iM,fFe),e(fFe,A1r),e(iM,L1r),e(iM,NH),e(NH,y1r),e(iM,x1r),e(j,$1r),e(j,dM),e(dM,mFe),e(mFe,k1r),e(dM,S1r),e(dM,qH),e(qH,R1r),e(dM,P1r),e(j,B1r),e(j,cM),e(cM,gFe),e(gFe,I1r),e(cM,N1r),e(cM,jH),e(jH,q1r),e(cM,j1r),e(j,D1r),e(j,fM),e(fM,hFe),e(hFe,G1r),e(fM,O1r),e(fM,DH),e(DH,V1r),e(fM,X1r),e(j,z1r),e(j,mM),e(mM,pFe),e(pFe,Q1r),e(mM,W1r),e(mM,GH),e(GH,H1r),e(mM,U1r),e(j,J1r),e(j,gM),e(gM,_Fe),e(_Fe,Y1r),e(gM,K1r),e(gM,OH),e(OH,Z1r),e(gM,e2r),e(j,o2r),e(j,hM),e(hM,uFe),e(uFe,r2r),e(hM,t2r),e(hM,VH),e(VH,a2r),e(hM,n2r),e(j,s2r),e(j,pM),e(pM,bFe),e(bFe,l2r),e(pM,i2r),e(pM,XH),e(XH,d2r),e(pM,c2r),e(j,f2r),e(j,_M),e(_M,vFe),e(vFe,m2r),e(_M,g2r),e(_M,zH),e(zH,h2r),e(_M,p2r),e(j,_2r),e(j,uM),e(uM,FFe),e(FFe,u2r),e(uM,b2r),e(uM,QH),e(QH,v2r),e(uM,F2r),e(j,T2r),e(j,bM),e(bM,TFe),e(TFe,M2r),e(bM,E2r),e(bM,WH),e(WH,C2r),e(bM,w2r),e(j,A2r),e(j,vM),e(vM,MFe),e(MFe,L2r),e(vM,y2r),e(vM,HH),e(HH,x2r),e(vM,$2r),e(j,k2r),e(j,FM),e(FM,EFe),e(EFe,S2r),e(FM,R2r),e(FM,UH),e(UH,P2r),e(FM,B2r),e(j,I2r),e(j,TM),e(TM,CFe),e(CFe,N2r),e(TM,q2r),e(TM,JH),e(JH,j2r),e(TM,D2r),e(j,G2r),e(j,MM),e(MM,wFe),e(wFe,O2r),e(MM,V2r),e(MM,YH),e(YH,X2r),e(MM,z2r),e(j,Q2r),e(j,Hs),e(Hs,AFe),e(AFe,W2r),e(Hs,H2r),e(Hs,KH),e(KH,U2r),e(Hs,J2r),e(Hs,ZH),e(ZH,Y2r),e(Hs,K2r),e(j,Z2r),e(j,EM),e(EM,LFe),e(LFe,ebr),e(EM,obr),e(EM,eU),e(eU,rbr),e(EM,tbr),e(j,abr),e(j,CM),e(CM,yFe),e(yFe,nbr),e(CM,sbr),e(CM,oU),e(oU,lbr),e(CM,ibr),e(j,dbr),e(j,wM),e(wM,xFe),e(xFe,cbr),e(wM,fbr),e(wM,rU),e(rU,mbr),e(wM,gbr),e(j,hbr),e(j,AM),e(AM,$Fe),e($Fe,pbr),e(AM,_br),e(AM,tU),e(tU,ubr),e(AM,bbr),e(j,vbr),e(j,LM),e(LM,kFe),e(kFe,Fbr),e(LM,Tbr),e(LM,aU),e(aU,Mbr),e(LM,Ebr),e(j,Cbr),e(j,yM),e(yM,SFe),e(SFe,wbr),e(yM,Abr),e(yM,nU),e(nU,Lbr),e(yM,ybr),e(j,xbr),e(j,xM),e(xM,RFe),e(RFe,$br),e(xM,kbr),e(xM,sU),e(sU,Sbr),e(xM,Rbr),e(j,Pbr),e(j,$M),e($M,PFe),e(PFe,Bbr),e($M,Ibr),e($M,lU),e(lU,Nbr),e($M,qbr),e(j,jbr),e(j,kM),e(kM,BFe),e(BFe,Dbr),e(kM,Gbr),e(kM,iU),e(iU,Obr),e(kM,Vbr),e(j,Xbr),e(j,SM),e(SM,IFe),e(IFe,zbr),e(SM,Qbr),e(SM,dU),e(dU,Wbr),e(SM,Hbr),e(j,Ubr),e(j,RM),e(RM,NFe),e(NFe,Jbr),e(RM,Ybr),e(RM,cU),e(cU,Kbr),e(RM,Zbr),e(j,evr),e(j,PM),e(PM,qFe),e(qFe,ovr),e(PM,rvr),e(PM,fU),e(fU,tvr),e(PM,avr),e(j,nvr),e(j,BM),e(BM,jFe),e(jFe,svr),e(BM,lvr),e(BM,mU),e(mU,ivr),e(BM,dvr),e(j,cvr),e(j,IM),e(IM,DFe),e(DFe,fvr),e(IM,mvr),e(IM,gU),e(gU,gvr),e(IM,hvr),e(j,pvr),e(j,NM),e(NM,GFe),e(GFe,_vr),e(NM,uvr),e(NM,hU),e(hU,bvr),e(NM,vvr),e(j,Fvr),e(j,qM),e(qM,OFe),e(OFe,Tvr),e(qM,Mvr),e(qM,pU),e(pU,Evr),e(qM,Cvr),e(j,wvr),e(j,jM),e(jM,VFe),e(VFe,Avr),e(jM,Lvr),e(jM,_U),e(_U,yvr),e(jM,xvr),e(j,$vr),e(j,DM),e(DM,XFe),e(XFe,kvr),e(DM,Svr),e(DM,uU),e(uU,Rvr),e(DM,Pvr),e(j,Bvr),e(j,GM),e(GM,zFe),e(zFe,Ivr),e(GM,Nvr),e(GM,bU),e(bU,qvr),e(GM,jvr),e(j,Dvr),e(j,OM),e(OM,QFe),e(QFe,Gvr),e(OM,Ovr),e(OM,vU),e(vU,Vvr),e(OM,Xvr),e(j,zvr),e(j,VM),e(VM,WFe),e(WFe,Qvr),e(VM,Wvr),e(VM,FU),e(FU,Hvr),e(VM,Uvr),e(j,Jvr),e(j,XM),e(XM,HFe),e(HFe,Yvr),e(XM,Kvr),e(XM,TU),e(TU,Zvr),e(XM,eFr),e(j,oFr),e(j,zM),e(zM,UFe),e(UFe,rFr),e(zM,tFr),e(zM,MU),e(MU,aFr),e(zM,nFr),e(j,sFr),e(j,QM),e(QM,JFe),e(JFe,lFr),e(QM,iFr),e(QM,EU),e(EU,dFr),e(QM,cFr),e(j,fFr),e(j,WM),e(WM,YFe),e(YFe,mFr),e(WM,gFr),e(WM,CU),e(CU,hFr),e(WM,pFr),e(j,_Fr),e(j,HM),e(HM,KFe),e(KFe,uFr),e(HM,bFr),e(HM,wU),e(wU,vFr),e(HM,FFr),e(j,TFr),e(j,UM),e(UM,ZFe),e(ZFe,MFr),e(UM,EFr),e(UM,AU),e(AU,CFr),e(UM,wFr),e(j,AFr),e(j,JM),e(JM,eTe),e(eTe,LFr),e(JM,yFr),e(JM,LU),e(LU,xFr),e(JM,$Fr),e(j,kFr),e(j,YM),e(YM,oTe),e(oTe,SFr),e(YM,RFr),e(YM,yU),e(yU,PFr),e(YM,BFr),e(yr,IFr),M(KM,yr,null),b(f,HVe,u),b(f,nc,u),e(nc,ZM),e(ZM,rTe),M(R9,rTe,null),e(nc,NFr),e(nc,tTe),e(tTe,qFr),b(f,UVe,u),b(f,or,u),M(P9,or,null),e(or,jFr),e(or,sc),e(sc,DFr),e(sc,xU),e(xU,GFr),e(sc,OFr),e(sc,$U),e($U,VFr),e(sc,XFr),e(or,zFr),e(or,B9),e(B9,QFr),e(B9,aTe),e(aTe,WFr),e(B9,HFr),e(or,UFr),e(or,kt),M(I9,kt,null),e(kt,JFr),e(kt,nTe),e(nTe,YFr),e(kt,KFr),e(kt,lc),e(lc,ZFr),e(lc,sTe),e(sTe,eTr),e(lc,oTr),e(lc,kU),e(kU,rTr),e(lc,tTr),e(kt,aTr),M(e4,kt,null),e(or,nTr),e(or,xr),M(N9,xr,null),e(xr,sTr),e(xr,lTe),e(lTe,lTr),e(xr,iTr),e(xr,nn),e(nn,dTr),e(nn,iTe),e(iTe,cTr),e(nn,fTr),e(nn,dTe),e(dTe,mTr),e(nn,gTr),e(nn,cTe),e(cTe,hTr),e(nn,pTr),e(xr,_Tr),e(xr,se),e(se,o4),e(o4,fTe),e(fTe,uTr),e(o4,bTr),e(o4,SU),e(SU,vTr),e(o4,FTr),e(se,TTr),e(se,r4),e(r4,mTe),e(mTe,MTr),e(r4,ETr),e(r4,RU),e(RU,CTr),e(r4,wTr),e(se,ATr),e(se,t4),e(t4,gTe),e(gTe,LTr),e(t4,yTr),e(t4,PU),e(PU,xTr),e(t4,$Tr),e(se,kTr),e(se,a4),e(a4,hTe),e(hTe,STr),e(a4,RTr),e(a4,BU),e(BU,PTr),e(a4,BTr),e(se,ITr),e(se,n4),e(n4,pTe),e(pTe,NTr),e(n4,qTr),e(n4,IU),e(IU,jTr),e(n4,DTr),e(se,GTr),e(se,s4),e(s4,_Te),e(_Te,OTr),e(s4,VTr),e(s4,NU),e(NU,XTr),e(s4,zTr),e(se,QTr),e(se,l4),e(l4,uTe),e(uTe,WTr),e(l4,HTr),e(l4,qU),e(qU,UTr),e(l4,JTr),e(se,YTr),e(se,i4),e(i4,bTe),e(bTe,KTr),e(i4,ZTr),e(i4,jU),e(jU,e8r),e(i4,o8r),e(se,r8r),e(se,d4),e(d4,vTe),e(vTe,t8r),e(d4,a8r),e(d4,DU),e(DU,n8r),e(d4,s8r),e(se,l8r),e(se,c4),e(c4,FTe),e(FTe,i8r),e(c4,d8r),e(c4,GU),e(GU,c8r),e(c4,f8r),e(se,m8r),e(se,f4),e(f4,TTe),e(TTe,g8r),e(f4,h8r),e(f4,OU),e(OU,p8r),e(f4,_8r),e(se,u8r),e(se,m4),e(m4,MTe),e(MTe,b8r),e(m4,v8r),e(m4,VU),e(VU,F8r),e(m4,T8r),e(se,M8r),e(se,g4),e(g4,ETe),e(ETe,E8r),e(g4,C8r),e(g4,XU),e(XU,w8r),e(g4,A8r),e(se,L8r),e(se,h4),e(h4,CTe),e(CTe,y8r),e(h4,x8r),e(h4,zU),e(zU,$8r),e(h4,k8r),e(se,S8r),e(se,p4),e(p4,wTe),e(wTe,R8r),e(p4,P8r),e(p4,QU),e(QU,B8r),e(p4,I8r),e(se,N8r),e(se,_4),e(_4,ATe),e(ATe,q8r),e(_4,j8r),e(_4,WU),e(WU,D8r),e(_4,G8r),e(se,O8r),e(se,u4),e(u4,LTe),e(LTe,V8r),e(u4,X8r),e(u4,HU),e(HU,z8r),e(u4,Q8r),e(se,W8r),e(se,b4),e(b4,yTe),e(yTe,H8r),e(b4,U8r),e(b4,UU),e(UU,J8r),e(b4,Y8r),e(se,K8r),e(se,v4),e(v4,xTe),e(xTe,Z8r),e(v4,eMr),e(v4,JU),e(JU,oMr),e(v4,rMr),e(se,tMr),e(se,F4),e(F4,$Te),e($Te,aMr),e(F4,nMr),e(F4,YU),e(YU,sMr),e(F4,lMr),e(se,iMr),e(se,T4),e(T4,kTe),e(kTe,dMr),e(T4,cMr),e(T4,KU),e(KU,fMr),e(T4,mMr),e(se,gMr),e(se,M4),e(M4,STe),e(STe,hMr),e(M4,pMr),e(M4,ZU),e(ZU,_Mr),e(M4,uMr),e(se,bMr),e(se,E4),e(E4,RTe),e(RTe,vMr),e(E4,FMr),e(E4,eJ),e(eJ,TMr),e(E4,MMr),e(xr,EMr),M(C4,xr,null),b(f,JVe,u),b(f,ic,u),e(ic,w4),e(w4,PTe),M(q9,PTe,null),e(ic,CMr),e(ic,BTe),e(BTe,wMr),b(f,YVe,u),b(f,rr,u),M(j9,rr,null),e(rr,AMr),e(rr,dc),e(dc,LMr),e(dc,oJ),e(oJ,yMr),e(dc,xMr),e(dc,rJ),e(rJ,$Mr),e(dc,kMr),e(rr,SMr),e(rr,D9),e(D9,RMr),e(D9,ITe),e(ITe,PMr),e(D9,BMr),e(rr,IMr),e(rr,St),M(G9,St,null),e(St,NMr),e(St,NTe),e(NTe,qMr),e(St,jMr),e(St,cc),e(cc,DMr),e(cc,qTe),e(qTe,GMr),e(cc,OMr),e(cc,tJ),e(tJ,VMr),e(cc,XMr),e(St,zMr),M(A4,St,null),e(rr,QMr),e(rr,$r),M(O9,$r,null),e($r,WMr),e($r,jTe),e(jTe,HMr),e($r,UMr),e($r,sn),e(sn,JMr),e(sn,DTe),e(DTe,YMr),e(sn,KMr),e(sn,GTe),e(GTe,ZMr),e(sn,e4r),e(sn,OTe),e(OTe,o4r),e(sn,r4r),e($r,t4r),e($r,Me),e(Me,L4),e(L4,VTe),e(VTe,a4r),e(L4,n4r),e(L4,aJ),e(aJ,s4r),e(L4,l4r),e(Me,i4r),e(Me,y4),e(y4,XTe),e(XTe,d4r),e(y4,c4r),e(y4,nJ),e(nJ,f4r),e(y4,m4r),e(Me,g4r),e(Me,x4),e(x4,zTe),e(zTe,h4r),e(x4,p4r),e(x4,sJ),e(sJ,_4r),e(x4,u4r),e(Me,b4r),e(Me,$4),e($4,QTe),e(QTe,v4r),e($4,F4r),e($4,lJ),e(lJ,T4r),e($4,M4r),e(Me,E4r),e(Me,k4),e(k4,WTe),e(WTe,C4r),e(k4,w4r),e(k4,iJ),e(iJ,A4r),e(k4,L4r),e(Me,y4r),e(Me,S4),e(S4,HTe),e(HTe,x4r),e(S4,$4r),e(S4,dJ),e(dJ,k4r),e(S4,S4r),e(Me,R4r),e(Me,R4),e(R4,UTe),e(UTe,P4r),e(R4,B4r),e(R4,cJ),e(cJ,I4r),e(R4,N4r),e(Me,q4r),e(Me,P4),e(P4,JTe),e(JTe,j4r),e(P4,D4r),e(P4,fJ),e(fJ,G4r),e(P4,O4r),e(Me,V4r),e(Me,B4),e(B4,YTe),e(YTe,X4r),e(B4,z4r),e(B4,mJ),e(mJ,Q4r),e(B4,W4r),e(Me,H4r),e(Me,I4),e(I4,KTe),e(KTe,U4r),e(I4,J4r),e(I4,gJ),e(gJ,Y4r),e(I4,K4r),e(Me,Z4r),e(Me,N4),e(N4,ZTe),e(ZTe,eEr),e(N4,oEr),e(N4,hJ),e(hJ,rEr),e(N4,tEr),e(Me,aEr),e(Me,q4),e(q4,e8e),e(e8e,nEr),e(q4,sEr),e(q4,pJ),e(pJ,lEr),e(q4,iEr),e(Me,dEr),e(Me,j4),e(j4,o8e),e(o8e,cEr),e(j4,fEr),e(j4,_J),e(_J,mEr),e(j4,gEr),e($r,hEr),M(D4,$r,null),b(f,KVe,u),b(f,fc,u),e(fc,G4),e(G4,r8e),M(V9,r8e,null),e(fc,pEr),e(fc,t8e),e(t8e,_Er),b(f,ZVe,u),b(f,tr,u),M(X9,tr,null),e(tr,uEr),e(tr,mc),e(mc,bEr),e(mc,uJ),e(uJ,vEr),e(mc,FEr),e(mc,bJ),e(bJ,TEr),e(mc,MEr),e(tr,EEr),e(tr,z9),e(z9,CEr),e(z9,a8e),e(a8e,wEr),e(z9,AEr),e(tr,LEr),e(tr,Rt),M(Q9,Rt,null),e(Rt,yEr),e(Rt,n8e),e(n8e,xEr),e(Rt,$Er),e(Rt,gc),e(gc,kEr),e(gc,s8e),e(s8e,SEr),e(gc,REr),e(gc,vJ),e(vJ,PEr),e(gc,BEr),e(Rt,IEr),M(O4,Rt,null),e(tr,NEr),e(tr,kr),M(W9,kr,null),e(kr,qEr),e(kr,l8e),e(l8e,jEr),e(kr,DEr),e(kr,ln),e(ln,GEr),e(ln,i8e),e(i8e,OEr),e(ln,VEr),e(ln,d8e),e(d8e,XEr),e(ln,zEr),e(ln,c8e),e(c8e,QEr),e(ln,WEr),e(kr,HEr),e(kr,dn),e(dn,V4),e(V4,f8e),e(f8e,UEr),e(V4,JEr),e(V4,FJ),e(FJ,YEr),e(V4,KEr),e(dn,ZEr),e(dn,X4),e(X4,m8e),e(m8e,eCr),e(X4,oCr),e(X4,TJ),e(TJ,rCr),e(X4,tCr),e(dn,aCr),e(dn,z4),e(z4,g8e),e(g8e,nCr),e(z4,sCr),e(z4,MJ),e(MJ,lCr),e(z4,iCr),e(dn,dCr),e(dn,Q4),e(Q4,h8e),e(h8e,cCr),e(Q4,fCr),e(Q4,EJ),e(EJ,mCr),e(Q4,gCr),e(kr,hCr),M(W4,kr,null),b(f,eXe,u),b(f,hc,u),e(hc,H4),e(H4,p8e),M(H9,p8e,null),e(hc,pCr),e(hc,_8e),e(_8e,_Cr),b(f,oXe,u),b(f,ar,u),M(U9,ar,null),e(ar,uCr),e(ar,pc),e(pc,bCr),e(pc,CJ),e(CJ,vCr),e(pc,FCr),e(pc,wJ),e(wJ,TCr),e(pc,MCr),e(ar,ECr),e(ar,J9),e(J9,CCr),e(J9,u8e),e(u8e,wCr),e(J9,ACr),e(ar,LCr),e(ar,Pt),M(Y9,Pt,null),e(Pt,yCr),e(Pt,b8e),e(b8e,xCr),e(Pt,$Cr),e(Pt,_c),e(_c,kCr),e(_c,v8e),e(v8e,SCr),e(_c,RCr),e(_c,AJ),e(AJ,PCr),e(_c,BCr),e(Pt,ICr),M(U4,Pt,null),e(ar,NCr),e(ar,Sr),M(K9,Sr,null),e(Sr,qCr),e(Sr,F8e),e(F8e,jCr),e(Sr,DCr),e(Sr,cn),e(cn,GCr),e(cn,T8e),e(T8e,OCr),e(cn,VCr),e(cn,M8e),e(M8e,XCr),e(cn,zCr),e(cn,E8e),e(E8e,QCr),e(cn,WCr),e(Sr,HCr),e(Sr,ie),e(ie,J4),e(J4,C8e),e(C8e,UCr),e(J4,JCr),e(J4,LJ),e(LJ,YCr),e(J4,KCr),e(ie,ZCr),e(ie,Y4),e(Y4,w8e),e(w8e,e3r),e(Y4,o3r),e(Y4,yJ),e(yJ,r3r),e(Y4,t3r),e(ie,a3r),e(ie,K4),e(K4,A8e),e(A8e,n3r),e(K4,s3r),e(K4,xJ),e(xJ,l3r),e(K4,i3r),e(ie,d3r),e(ie,Z4),e(Z4,L8e),e(L8e,c3r),e(Z4,f3r),e(Z4,$J),e($J,m3r),e(Z4,g3r),e(ie,h3r),e(ie,eE),e(eE,y8e),e(y8e,p3r),e(eE,_3r),e(eE,kJ),e(kJ,u3r),e(eE,b3r),e(ie,v3r),e(ie,oE),e(oE,x8e),e(x8e,F3r),e(oE,T3r),e(oE,SJ),e(SJ,M3r),e(oE,E3r),e(ie,C3r),e(ie,rE),e(rE,$8e),e($8e,w3r),e(rE,A3r),e(rE,RJ),e(RJ,L3r),e(rE,y3r),e(ie,x3r),e(ie,tE),e(tE,k8e),e(k8e,$3r),e(tE,k3r),e(tE,PJ),e(PJ,S3r),e(tE,R3r),e(ie,P3r),e(ie,aE),e(aE,S8e),e(S8e,B3r),e(aE,I3r),e(aE,BJ),e(BJ,N3r),e(aE,q3r),e(ie,j3r),e(ie,nE),e(nE,R8e),e(R8e,D3r),e(nE,G3r),e(nE,IJ),e(IJ,O3r),e(nE,V3r),e(ie,X3r),e(ie,sE),e(sE,P8e),e(P8e,z3r),e(sE,Q3r),e(sE,NJ),e(NJ,W3r),e(sE,H3r),e(ie,U3r),e(ie,lE),e(lE,B8e),e(B8e,J3r),e(lE,Y3r),e(lE,qJ),e(qJ,K3r),e(lE,Z3r),e(ie,e5r),e(ie,iE),e(iE,I8e),e(I8e,o5r),e(iE,r5r),e(iE,jJ),e(jJ,t5r),e(iE,a5r),e(ie,n5r),e(ie,dE),e(dE,N8e),e(N8e,s5r),e(dE,l5r),e(dE,DJ),e(DJ,i5r),e(dE,d5r),e(ie,c5r),e(ie,cE),e(cE,q8e),e(q8e,f5r),e(cE,m5r),e(cE,GJ),e(GJ,g5r),e(cE,h5r),e(ie,p5r),e(ie,fE),e(fE,j8e),e(j8e,_5r),e(fE,u5r),e(fE,OJ),e(OJ,b5r),e(fE,v5r),e(ie,F5r),e(ie,mE),e(mE,D8e),e(D8e,T5r),e(mE,M5r),e(mE,VJ),e(VJ,E5r),e(mE,C5r),e(ie,w5r),e(ie,gE),e(gE,G8e),e(G8e,A5r),e(gE,L5r),e(gE,XJ),e(XJ,y5r),e(gE,x5r),e(ie,$5r),e(ie,hE),e(hE,O8e),e(O8e,k5r),e(hE,S5r),e(hE,zJ),e(zJ,R5r),e(hE,P5r),e(ie,B5r),e(ie,pE),e(pE,V8e),e(V8e,I5r),e(pE,N5r),e(pE,QJ),e(QJ,q5r),e(pE,j5r),e(Sr,D5r),M(_E,Sr,null),b(f,rXe,u),b(f,uc,u),e(uc,uE),e(uE,X8e),M(Z9,X8e,null),e(uc,G5r),e(uc,z8e),e(z8e,O5r),b(f,tXe,u),b(f,nr,u),M(ex,nr,null),e(nr,V5r),e(nr,bc),e(bc,X5r),e(bc,WJ),e(WJ,z5r),e(bc,Q5r),e(bc,HJ),e(HJ,W5r),e(bc,H5r),e(nr,U5r),e(nr,ox),e(ox,J5r),e(ox,Q8e),e(Q8e,Y5r),e(ox,K5r),e(nr,Z5r),e(nr,Bt),M(rx,Bt,null),e(Bt,e0r),e(Bt,W8e),e(W8e,o0r),e(Bt,r0r),e(Bt,vc),e(vc,t0r),e(vc,H8e),e(H8e,a0r),e(vc,n0r),e(vc,UJ),e(UJ,s0r),e(vc,l0r),e(Bt,i0r),M(bE,Bt,null),e(nr,d0r),e(nr,Rr),M(tx,Rr,null),e(Rr,c0r),e(Rr,U8e),e(U8e,f0r),e(Rr,m0r),e(Rr,fn),e(fn,g0r),e(fn,J8e),e(J8e,h0r),e(fn,p0r),e(fn,Y8e),e(Y8e,_0r),e(fn,u0r),e(fn,K8e),e(K8e,b0r),e(fn,v0r),e(Rr,F0r),e(Rr,ye),e(ye,vE),e(vE,Z8e),e(Z8e,T0r),e(vE,M0r),e(vE,JJ),e(JJ,E0r),e(vE,C0r),e(ye,w0r),e(ye,FE),e(FE,eMe),e(eMe,A0r),e(FE,L0r),e(FE,YJ),e(YJ,y0r),e(FE,x0r),e(ye,$0r),e(ye,TE),e(TE,oMe),e(oMe,k0r),e(TE,S0r),e(TE,KJ),e(KJ,R0r),e(TE,P0r),e(ye,B0r),e(ye,ME),e(ME,rMe),e(rMe,I0r),e(ME,N0r),e(ME,ZJ),e(ZJ,q0r),e(ME,j0r),e(ye,D0r),e(ye,EE),e(EE,tMe),e(tMe,G0r),e(EE,O0r),e(EE,eY),e(eY,V0r),e(EE,X0r),e(ye,z0r),e(ye,CE),e(CE,aMe),e(aMe,Q0r),e(CE,W0r),e(CE,oY),e(oY,H0r),e(CE,U0r),e(ye,J0r),e(ye,wE),e(wE,nMe),e(nMe,Y0r),e(wE,K0r),e(wE,rY),e(rY,Z0r),e(wE,ewr),e(ye,owr),e(ye,AE),e(AE,sMe),e(sMe,rwr),e(AE,twr),e(AE,tY),e(tY,awr),e(AE,nwr),e(ye,swr),e(ye,LE),e(LE,lMe),e(lMe,lwr),e(LE,iwr),e(LE,aY),e(aY,dwr),e(LE,cwr),e(ye,fwr),e(ye,yE),e(yE,iMe),e(iMe,mwr),e(yE,gwr),e(yE,nY),e(nY,hwr),e(yE,pwr),e(Rr,_wr),M(xE,Rr,null),b(f,aXe,u),b(f,Fc,u),e(Fc,$E),e($E,dMe),M(ax,dMe,null),e(Fc,uwr),e(Fc,cMe),e(cMe,bwr),b(f,nXe,u),b(f,sr,u),M(nx,sr,null),e(sr,vwr),e(sr,Tc),e(Tc,Fwr),e(Tc,sY),e(sY,Twr),e(Tc,Mwr),e(Tc,lY),e(lY,Ewr),e(Tc,Cwr),e(sr,wwr),e(sr,sx),e(sx,Awr),e(sx,fMe),e(fMe,Lwr),e(sx,ywr),e(sr,xwr),e(sr,It),M(lx,It,null),e(It,$wr),e(It,mMe),e(mMe,kwr),e(It,Swr),e(It,Mc),e(Mc,Rwr),e(Mc,gMe),e(gMe,Pwr),e(Mc,Bwr),e(Mc,iY),e(iY,Iwr),e(Mc,Nwr),e(It,qwr),M(kE,It,null),e(sr,jwr),e(sr,Pr),M(ix,Pr,null),e(Pr,Dwr),e(Pr,hMe),e(hMe,Gwr),e(Pr,Owr),e(Pr,mn),e(mn,Vwr),e(mn,pMe),e(pMe,Xwr),e(mn,zwr),e(mn,_Me),e(_Me,Qwr),e(mn,Wwr),e(mn,uMe),e(uMe,Hwr),e(mn,Uwr),e(Pr,Jwr),e(Pr,te),e(te,SE),e(SE,bMe),e(bMe,Ywr),e(SE,Kwr),e(SE,dY),e(dY,Zwr),e(SE,eAr),e(te,oAr),e(te,RE),e(RE,vMe),e(vMe,rAr),e(RE,tAr),e(RE,cY),e(cY,aAr),e(RE,nAr),e(te,sAr),e(te,PE),e(PE,FMe),e(FMe,lAr),e(PE,iAr),e(PE,fY),e(fY,dAr),e(PE,cAr),e(te,fAr),e(te,BE),e(BE,TMe),e(TMe,mAr),e(BE,gAr),e(BE,mY),e(mY,hAr),e(BE,pAr),e(te,_Ar),e(te,IE),e(IE,MMe),e(MMe,uAr),e(IE,bAr),e(IE,gY),e(gY,vAr),e(IE,FAr),e(te,TAr),e(te,NE),e(NE,EMe),e(EMe,MAr),e(NE,EAr),e(NE,hY),e(hY,CAr),e(NE,wAr),e(te,AAr),e(te,qE),e(qE,CMe),e(CMe,LAr),e(qE,yAr),e(qE,pY),e(pY,xAr),e(qE,$Ar),e(te,kAr),e(te,jE),e(jE,wMe),e(wMe,SAr),e(jE,RAr),e(jE,_Y),e(_Y,PAr),e(jE,BAr),e(te,IAr),e(te,DE),e(DE,AMe),e(AMe,NAr),e(DE,qAr),e(DE,uY),e(uY,jAr),e(DE,DAr),e(te,GAr),e(te,GE),e(GE,LMe),e(LMe,OAr),e(GE,VAr),e(GE,bY),e(bY,XAr),e(GE,zAr),e(te,QAr),e(te,OE),e(OE,yMe),e(yMe,WAr),e(OE,HAr),e(OE,vY),e(vY,UAr),e(OE,JAr),e(te,YAr),e(te,VE),e(VE,xMe),e(xMe,KAr),e(VE,ZAr),e(VE,FY),e(FY,e6r),e(VE,o6r),e(te,r6r),e(te,XE),e(XE,$Me),e($Me,t6r),e(XE,a6r),e(XE,TY),e(TY,n6r),e(XE,s6r),e(te,l6r),e(te,zE),e(zE,kMe),e(kMe,i6r),e(zE,d6r),e(zE,MY),e(MY,c6r),e(zE,f6r),e(te,m6r),e(te,QE),e(QE,SMe),e(SMe,g6r),e(QE,h6r),e(QE,EY),e(EY,p6r),e(QE,_6r),e(te,u6r),e(te,WE),e(WE,RMe),e(RMe,b6r),e(WE,v6r),e(WE,CY),e(CY,F6r),e(WE,T6r),e(te,M6r),e(te,HE),e(HE,PMe),e(PMe,E6r),e(HE,C6r),e(HE,wY),e(wY,w6r),e(HE,A6r),e(te,L6r),e(te,UE),e(UE,BMe),e(BMe,y6r),e(UE,x6r),e(UE,AY),e(AY,$6r),e(UE,k6r),e(te,S6r),e(te,JE),e(JE,IMe),e(IMe,R6r),e(JE,P6r),e(JE,LY),e(LY,B6r),e(JE,I6r),e(te,N6r),e(te,YE),e(YE,NMe),e(NMe,q6r),e(YE,j6r),e(YE,yY),e(yY,D6r),e(YE,G6r),e(te,O6r),e(te,KE),e(KE,qMe),e(qMe,V6r),e(KE,X6r),e(KE,xY),e(xY,z6r),e(KE,Q6r),e(te,W6r),e(te,ZE),e(ZE,jMe),e(jMe,H6r),e(ZE,U6r),e(ZE,$Y),e($Y,J6r),e(ZE,Y6r),e(te,K6r),e(te,eC),e(eC,DMe),e(DMe,Z6r),e(eC,eLr),e(eC,kY),e(kY,oLr),e(eC,rLr),e(te,tLr),e(te,oC),e(oC,GMe),e(GMe,aLr),e(oC,nLr),e(oC,SY),e(SY,sLr),e(oC,lLr),e(te,iLr),e(te,rC),e(rC,OMe),e(OMe,dLr),e(rC,cLr),e(rC,RY),e(RY,fLr),e(rC,mLr),e(te,gLr),e(te,tC),e(tC,VMe),e(VMe,hLr),e(tC,pLr),e(tC,PY),e(PY,_Lr),e(tC,uLr),e(Pr,bLr),M(aC,Pr,null),b(f,sXe,u),b(f,Ec,u),e(Ec,nC),e(nC,XMe),M(dx,XMe,null),e(Ec,vLr),e(Ec,zMe),e(zMe,FLr),b(f,lXe,u),b(f,lr,u),M(cx,lr,null),e(lr,TLr),e(lr,Cc),e(Cc,MLr),e(Cc,BY),e(BY,ELr),e(Cc,CLr),e(Cc,IY),e(IY,wLr),e(Cc,ALr),e(lr,LLr),e(lr,fx),e(fx,yLr),e(fx,QMe),e(QMe,xLr),e(fx,$Lr),e(lr,kLr),e(lr,Nt),M(mx,Nt,null),e(Nt,SLr),e(Nt,WMe),e(WMe,RLr),e(Nt,PLr),e(Nt,wc),e(wc,BLr),e(wc,HMe),e(HMe,ILr),e(wc,NLr),e(wc,NY),e(NY,qLr),e(wc,jLr),e(Nt,DLr),M(sC,Nt,null),e(lr,GLr),e(lr,Br),M(gx,Br,null),e(Br,OLr),e(Br,UMe),e(UMe,VLr),e(Br,XLr),e(Br,gn),e(gn,zLr),e(gn,JMe),e(JMe,QLr),e(gn,WLr),e(gn,YMe),e(YMe,HLr),e(gn,ULr),e(gn,KMe),e(KMe,JLr),e(gn,YLr),e(Br,KLr),e(Br,_e),e(_e,lC),e(lC,ZMe),e(ZMe,ZLr),e(lC,eyr),e(lC,qY),e(qY,oyr),e(lC,ryr),e(_e,tyr),e(_e,iC),e(iC,e4e),e(e4e,ayr),e(iC,nyr),e(iC,jY),e(jY,syr),e(iC,lyr),e(_e,iyr),e(_e,dC),e(dC,o4e),e(o4e,dyr),e(dC,cyr),e(dC,DY),e(DY,fyr),e(dC,myr),e(_e,gyr),e(_e,cC),e(cC,r4e),e(r4e,hyr),e(cC,pyr),e(cC,GY),e(GY,_yr),e(cC,uyr),e(_e,byr),e(_e,fC),e(fC,t4e),e(t4e,vyr),e(fC,Fyr),e(fC,OY),e(OY,Tyr),e(fC,Myr),e(_e,Eyr),e(_e,mC),e(mC,a4e),e(a4e,Cyr),e(mC,wyr),e(mC,VY),e(VY,Ayr),e(mC,Lyr),e(_e,yyr),e(_e,gC),e(gC,n4e),e(n4e,xyr),e(gC,$yr),e(gC,XY),e(XY,kyr),e(gC,Syr),e(_e,Ryr),e(_e,hC),e(hC,s4e),e(s4e,Pyr),e(hC,Byr),e(hC,zY),e(zY,Iyr),e(hC,Nyr),e(_e,qyr),e(_e,pC),e(pC,l4e),e(l4e,jyr),e(pC,Dyr),e(pC,QY),e(QY,Gyr),e(pC,Oyr),e(_e,Vyr),e(_e,_C),e(_C,i4e),e(i4e,Xyr),e(_C,zyr),e(_C,WY),e(WY,Qyr),e(_C,Wyr),e(_e,Hyr),e(_e,uC),e(uC,d4e),e(d4e,Uyr),e(uC,Jyr),e(uC,HY),e(HY,Yyr),e(uC,Kyr),e(_e,Zyr),e(_e,bC),e(bC,c4e),e(c4e,e9r),e(bC,o9r),e(bC,UY),e(UY,r9r),e(bC,t9r),e(_e,a9r),e(_e,vC),e(vC,f4e),e(f4e,n9r),e(vC,s9r),e(vC,JY),e(JY,l9r),e(vC,i9r),e(_e,d9r),e(_e,FC),e(FC,m4e),e(m4e,c9r),e(FC,f9r),e(FC,YY),e(YY,m9r),e(FC,g9r),e(_e,h9r),e(_e,TC),e(TC,g4e),e(g4e,p9r),e(TC,_9r),e(TC,KY),e(KY,u9r),e(TC,b9r),e(_e,v9r),e(_e,MC),e(MC,h4e),e(h4e,F9r),e(MC,T9r),e(MC,ZY),e(ZY,M9r),e(MC,E9r),e(_e,C9r),e(_e,EC),e(EC,p4e),e(p4e,w9r),e(EC,A9r),e(EC,eK),e(eK,L9r),e(EC,y9r),e(Br,x9r),M(CC,Br,null),b(f,iXe,u),b(f,Ac,u),e(Ac,wC),e(wC,_4e),M(hx,_4e,null),e(Ac,$9r),e(Ac,u4e),e(u4e,k9r),b(f,dXe,u),b(f,ir,u),M(px,ir,null),e(ir,S9r),e(ir,Lc),e(Lc,R9r),e(Lc,oK),e(oK,P9r),e(Lc,B9r),e(Lc,rK),e(rK,I9r),e(Lc,N9r),e(ir,q9r),e(ir,_x),e(_x,j9r),e(_x,b4e),e(b4e,D9r),e(_x,G9r),e(ir,O9r),e(ir,qt),M(ux,qt,null),e(qt,V9r),e(qt,v4e),e(v4e,X9r),e(qt,z9r),e(qt,yc),e(yc,Q9r),e(yc,F4e),e(F4e,W9r),e(yc,H9r),e(yc,tK),e(tK,U9r),e(yc,J9r),e(qt,Y9r),M(AC,qt,null),e(ir,K9r),e(ir,Ir),M(bx,Ir,null),e(Ir,Z9r),e(Ir,T4e),e(T4e,exr),e(Ir,oxr),e(Ir,hn),e(hn,rxr),e(hn,M4e),e(M4e,txr),e(hn,axr),e(hn,E4e),e(E4e,nxr),e(hn,sxr),e(hn,C4e),e(C4e,lxr),e(hn,ixr),e(Ir,dxr),e(Ir,vx),e(vx,LC),e(LC,w4e),e(w4e,cxr),e(LC,fxr),e(LC,aK),e(aK,mxr),e(LC,gxr),e(vx,hxr),e(vx,yC),e(yC,A4e),e(A4e,pxr),e(yC,_xr),e(yC,nK),e(nK,uxr),e(yC,bxr),e(Ir,vxr),M(xC,Ir,null),b(f,cXe,u),b(f,xc,u),e(xc,$C),e($C,L4e),M(Fx,L4e,null),e(xc,Fxr),e(xc,y4e),e(y4e,Txr),b(f,fXe,u),b(f,dr,u),M(Tx,dr,null),e(dr,Mxr),e(dr,$c),e($c,Exr),e($c,sK),e(sK,Cxr),e($c,wxr),e($c,lK),e(lK,Axr),e($c,Lxr),e(dr,yxr),e(dr,Mx),e(Mx,xxr),e(Mx,x4e),e(x4e,$xr),e(Mx,kxr),e(dr,Sxr),e(dr,jt),M(Ex,jt,null),e(jt,Rxr),e(jt,$4e),e($4e,Pxr),e(jt,Bxr),e(jt,kc),e(kc,Ixr),e(kc,k4e),e(k4e,Nxr),e(kc,qxr),e(kc,iK),e(iK,jxr),e(kc,Dxr),e(jt,Gxr),M(kC,jt,null),e(dr,Oxr),e(dr,Nr),M(Cx,Nr,null),e(Nr,Vxr),e(Nr,S4e),e(S4e,Xxr),e(Nr,zxr),e(Nr,pn),e(pn,Qxr),e(pn,R4e),e(R4e,Wxr),e(pn,Hxr),e(pn,P4e),e(P4e,Uxr),e(pn,Jxr),e(pn,B4e),e(B4e,Yxr),e(pn,Kxr),e(Nr,Zxr),e(Nr,I4e),e(I4e,SC),e(SC,N4e),e(N4e,e$r),e(SC,o$r),e(SC,dK),e(dK,r$r),e(SC,t$r),e(Nr,a$r),M(RC,Nr,null),b(f,mXe,u),b(f,Sc,u),e(Sc,PC),e(PC,q4e),M(wx,q4e,null),e(Sc,n$r),e(Sc,j4e),e(j4e,s$r),b(f,gXe,u),b(f,cr,u),M(Ax,cr,null),e(cr,l$r),e(cr,Rc),e(Rc,i$r),e(Rc,cK),e(cK,d$r),e(Rc,c$r),e(Rc,fK),e(fK,f$r),e(Rc,m$r),e(cr,g$r),e(cr,Lx),e(Lx,h$r),e(Lx,D4e),e(D4e,p$r),e(Lx,_$r),e(cr,u$r),e(cr,Dt),M(yx,Dt,null),e(Dt,b$r),e(Dt,G4e),e(G4e,v$r),e(Dt,F$r),e(Dt,Pc),e(Pc,T$r),e(Pc,O4e),e(O4e,M$r),e(Pc,E$r),e(Pc,mK),e(mK,C$r),e(Pc,w$r),e(Dt,A$r),M(BC,Dt,null),e(cr,L$r),e(cr,qr),M(xx,qr,null),e(qr,y$r),e(qr,V4e),e(V4e,x$r),e(qr,$$r),e(qr,_n),e(_n,k$r),e(_n,X4e),e(X4e,S$r),e(_n,R$r),e(_n,z4e),e(z4e,P$r),e(_n,B$r),e(_n,Q4e),e(Q4e,I$r),e(_n,N$r),e(qr,q$r),e(qr,de),e(de,IC),e(IC,W4e),e(W4e,j$r),e(IC,D$r),e(IC,gK),e(gK,G$r),e(IC,O$r),e(de,V$r),e(de,NC),e(NC,H4e),e(H4e,X$r),e(NC,z$r),e(NC,hK),e(hK,Q$r),e(NC,W$r),e(de,H$r),e(de,qC),e(qC,U4e),e(U4e,U$r),e(qC,J$r),e(qC,pK),e(pK,Y$r),e(qC,K$r),e(de,Z$r),e(de,jC),e(jC,J4e),e(J4e,ekr),e(jC,okr),e(jC,_K),e(_K,rkr),e(jC,tkr),e(de,akr),e(de,DC),e(DC,Y4e),e(Y4e,nkr),e(DC,skr),e(DC,uK),e(uK,lkr),e(DC,ikr),e(de,dkr),e(de,GC),e(GC,K4e),e(K4e,ckr),e(GC,fkr),e(GC,bK),e(bK,mkr),e(GC,gkr),e(de,hkr),e(de,OC),e(OC,Z4e),e(Z4e,pkr),e(OC,_kr),e(OC,vK),e(vK,ukr),e(OC,bkr),e(de,vkr),e(de,VC),e(VC,eEe),e(eEe,Fkr),e(VC,Tkr),e(VC,FK),e(FK,Mkr),e(VC,Ekr),e(de,Ckr),e(de,XC),e(XC,oEe),e(oEe,wkr),e(XC,Akr),e(XC,TK),e(TK,Lkr),e(XC,ykr),e(de,xkr),e(de,zC),e(zC,rEe),e(rEe,$kr),e(zC,kkr),e(zC,MK),e(MK,Skr),e(zC,Rkr),e(de,Pkr),e(de,QC),e(QC,tEe),e(tEe,Bkr),e(QC,Ikr),e(QC,EK),e(EK,Nkr),e(QC,qkr),e(de,jkr),e(de,WC),e(WC,aEe),e(aEe,Dkr),e(WC,Gkr),e(WC,CK),e(CK,Okr),e(WC,Vkr),e(de,Xkr),e(de,HC),e(HC,nEe),e(nEe,zkr),e(HC,Qkr),e(HC,wK),e(wK,Wkr),e(HC,Hkr),e(de,Ukr),e(de,UC),e(UC,sEe),e(sEe,Jkr),e(UC,Ykr),e(UC,AK),e(AK,Kkr),e(UC,Zkr),e(de,eSr),e(de,JC),e(JC,lEe),e(lEe,oSr),e(JC,rSr),e(JC,LK),e(LK,tSr),e(JC,aSr),e(de,nSr),e(de,YC),e(YC,iEe),e(iEe,sSr),e(YC,lSr),e(YC,yK),e(yK,iSr),e(YC,dSr),e(de,cSr),e(de,KC),e(KC,dEe),e(dEe,fSr),e(KC,mSr),e(KC,xK),e(xK,gSr),e(KC,hSr),e(de,pSr),e(de,ZC),e(ZC,cEe),e(cEe,_Sr),e(ZC,uSr),e(ZC,$K),e($K,bSr),e(ZC,vSr),e(de,FSr),e(de,e3),e(e3,fEe),e(fEe,TSr),e(e3,MSr),e(e3,kK),e(kK,ESr),e(e3,CSr),e(de,wSr),e(de,o3),e(o3,mEe),e(mEe,ASr),e(o3,LSr),e(o3,SK),e(SK,ySr),e(o3,xSr),e(qr,$Sr),M(r3,qr,null),b(f,hXe,u),b(f,Bc,u),e(Bc,t3),e(t3,gEe),M($x,gEe,null),e(Bc,kSr),e(Bc,hEe),e(hEe,SSr),b(f,pXe,u),b(f,fr,u),M(kx,fr,null),e(fr,RSr),e(fr,Ic),e(Ic,PSr),e(Ic,RK),e(RK,BSr),e(Ic,ISr),e(Ic,PK),e(PK,NSr),e(Ic,qSr),e(fr,jSr),e(fr,Sx),e(Sx,DSr),e(Sx,pEe),e(pEe,GSr),e(Sx,OSr),e(fr,VSr),e(fr,Gt),M(Rx,Gt,null),e(Gt,XSr),e(Gt,_Ee),e(_Ee,zSr),e(Gt,QSr),e(Gt,Nc),e(Nc,WSr),e(Nc,uEe),e(uEe,HSr),e(Nc,USr),e(Nc,BK),e(BK,JSr),e(Nc,YSr),e(Gt,KSr),M(a3,Gt,null),e(fr,ZSr),e(fr,jr),M(Px,jr,null),e(jr,eRr),e(jr,bEe),e(bEe,oRr),e(jr,rRr),e(jr,un),e(un,tRr),e(un,vEe),e(vEe,aRr),e(un,nRr),e(un,FEe),e(FEe,sRr),e(un,lRr),e(un,TEe),e(TEe,iRr),e(un,dRr),e(jr,cRr),e(jr,ce),e(ce,n3),e(n3,MEe),e(MEe,fRr),e(n3,mRr),e(n3,IK),e(IK,gRr),e(n3,hRr),e(ce,pRr),e(ce,s3),e(s3,EEe),e(EEe,_Rr),e(s3,uRr),e(s3,NK),e(NK,bRr),e(s3,vRr),e(ce,FRr),e(ce,l3),e(l3,CEe),e(CEe,TRr),e(l3,MRr),e(l3,qK),e(qK,ERr),e(l3,CRr),e(ce,wRr),e(ce,i3),e(i3,wEe),e(wEe,ARr),e(i3,LRr),e(i3,jK),e(jK,yRr),e(i3,xRr),e(ce,$Rr),e(ce,d3),e(d3,AEe),e(AEe,kRr),e(d3,SRr),e(d3,DK),e(DK,RRr),e(d3,PRr),e(ce,BRr),e(ce,c3),e(c3,LEe),e(LEe,IRr),e(c3,NRr),e(c3,GK),e(GK,qRr),e(c3,jRr),e(ce,DRr),e(ce,f3),e(f3,yEe),e(yEe,GRr),e(f3,ORr),e(f3,OK),e(OK,VRr),e(f3,XRr),e(ce,zRr),e(ce,m3),e(m3,xEe),e(xEe,QRr),e(m3,WRr),e(m3,VK),e(VK,HRr),e(m3,URr),e(ce,JRr),e(ce,g3),e(g3,$Ee),e($Ee,YRr),e(g3,KRr),e(g3,XK),e(XK,ZRr),e(g3,ePr),e(ce,oPr),e(ce,h3),e(h3,kEe),e(kEe,rPr),e(h3,tPr),e(h3,zK),e(zK,aPr),e(h3,nPr),e(ce,sPr),e(ce,p3),e(p3,SEe),e(SEe,lPr),e(p3,iPr),e(p3,QK),e(QK,dPr),e(p3,cPr),e(ce,fPr),e(ce,_3),e(_3,REe),e(REe,mPr),e(_3,gPr),e(_3,WK),e(WK,hPr),e(_3,pPr),e(ce,_Pr),e(ce,u3),e(u3,PEe),e(PEe,uPr),e(u3,bPr),e(u3,HK),e(HK,vPr),e(u3,FPr),e(ce,TPr),e(ce,b3),e(b3,BEe),e(BEe,MPr),e(b3,EPr),e(b3,UK),e(UK,CPr),e(b3,wPr),e(ce,APr),e(ce,v3),e(v3,IEe),e(IEe,LPr),e(v3,yPr),e(v3,JK),e(JK,xPr),e(v3,$Pr),e(ce,kPr),e(ce,F3),e(F3,NEe),e(NEe,SPr),e(F3,RPr),e(F3,YK),e(YK,PPr),e(F3,BPr),e(ce,IPr),e(ce,T3),e(T3,qEe),e(qEe,NPr),e(T3,qPr),e(T3,KK),e(KK,jPr),e(T3,DPr),e(ce,GPr),e(ce,M3),e(M3,jEe),e(jEe,OPr),e(M3,VPr),e(M3,ZK),e(ZK,XPr),e(M3,zPr),e(ce,QPr),e(ce,E3),e(E3,DEe),e(DEe,WPr),e(E3,HPr),e(E3,eZ),e(eZ,UPr),e(E3,JPr),e(ce,YPr),e(ce,C3),e(C3,GEe),e(GEe,KPr),e(C3,ZPr),e(C3,oZ),e(oZ,eBr),e(C3,oBr),e(jr,rBr),M(w3,jr,null),b(f,_Xe,u),b(f,qc,u),e(qc,A3),e(A3,OEe),M(Bx,OEe,null),e(qc,tBr),e(qc,VEe),e(VEe,aBr),b(f,uXe,u),b(f,mr,u),M(Ix,mr,null),e(mr,nBr),e(mr,jc),e(jc,sBr),e(jc,rZ),e(rZ,lBr),e(jc,iBr),e(jc,tZ),e(tZ,dBr),e(jc,cBr),e(mr,fBr),e(mr,Nx),e(Nx,mBr),e(Nx,XEe),e(XEe,gBr),e(Nx,hBr),e(mr,pBr),e(mr,Ot),M(qx,Ot,null),e(Ot,_Br),e(Ot,zEe),e(zEe,uBr),e(Ot,bBr),e(Ot,Dc),e(Dc,vBr),e(Dc,QEe),e(QEe,FBr),e(Dc,TBr),e(Dc,aZ),e(aZ,MBr),e(Dc,EBr),e(Ot,CBr),M(L3,Ot,null),e(mr,wBr),e(mr,Dr),M(jx,Dr,null),e(Dr,ABr),e(Dr,WEe),e(WEe,LBr),e(Dr,yBr),e(Dr,bn),e(bn,xBr),e(bn,HEe),e(HEe,$Br),e(bn,kBr),e(bn,UEe),e(UEe,SBr),e(bn,RBr),e(bn,JEe),e(JEe,PBr),e(bn,BBr),e(Dr,IBr),e(Dr,YEe),e(YEe,y3),e(y3,KEe),e(KEe,NBr),e(y3,qBr),e(y3,nZ),e(nZ,jBr),e(y3,DBr),e(Dr,GBr),M(x3,Dr,null),b(f,bXe,u),b(f,Gc,u),e(Gc,$3),e($3,ZEe),M(Dx,ZEe,null),e(Gc,OBr),e(Gc,eCe),e(eCe,VBr),b(f,vXe,u),b(f,gr,u),M(Gx,gr,null),e(gr,XBr),e(gr,Oc),e(Oc,zBr),e(Oc,sZ),e(sZ,QBr),e(Oc,WBr),e(Oc,lZ),e(lZ,HBr),e(Oc,UBr),e(gr,JBr),e(gr,Ox),e(Ox,YBr),e(Ox,oCe),e(oCe,KBr),e(Ox,ZBr),e(gr,eIr),e(gr,Vt),M(Vx,Vt,null),e(Vt,oIr),e(Vt,rCe),e(rCe,rIr),e(Vt,tIr),e(Vt,Vc),e(Vc,aIr),e(Vc,tCe),e(tCe,nIr),e(Vc,sIr),e(Vc,iZ),e(iZ,lIr),e(Vc,iIr),e(Vt,dIr),M(k3,Vt,null),e(gr,cIr),e(gr,Gr),M(Xx,Gr,null),e(Gr,fIr),e(Gr,aCe),e(aCe,mIr),e(Gr,gIr),e(Gr,vn),e(vn,hIr),e(vn,nCe),e(nCe,pIr),e(vn,_Ir),e(vn,sCe),e(sCe,uIr),e(vn,bIr),e(vn,lCe),e(lCe,vIr),e(vn,FIr),e(Gr,TIr),e(Gr,iCe),e(iCe,S3),e(S3,dCe),e(dCe,MIr),e(S3,EIr),e(S3,dZ),e(dZ,CIr),e(S3,wIr),e(Gr,AIr),M(R3,Gr,null),b(f,FXe,u),b(f,Xc,u),e(Xc,P3),e(P3,cCe),M(zx,cCe,null),e(Xc,LIr),e(Xc,fCe),e(fCe,yIr),b(f,TXe,u),b(f,hr,u),M(Qx,hr,null),e(hr,xIr),e(hr,zc),e(zc,$Ir),e(zc,cZ),e(cZ,kIr),e(zc,SIr),e(zc,fZ),e(fZ,RIr),e(zc,PIr),e(hr,BIr),e(hr,Wx),e(Wx,IIr),e(Wx,mCe),e(mCe,NIr),e(Wx,qIr),e(hr,jIr),e(hr,Xt),M(Hx,Xt,null),e(Xt,DIr),e(Xt,gCe),e(gCe,GIr),e(Xt,OIr),e(Xt,Qc),e(Qc,VIr),e(Qc,hCe),e(hCe,XIr),e(Qc,zIr),e(Qc,mZ),e(mZ,QIr),e(Qc,WIr),e(Xt,HIr),M(B3,Xt,null),e(hr,UIr),e(hr,Or),M(Ux,Or,null),e(Or,JIr),e(Or,pCe),e(pCe,YIr),e(Or,KIr),e(Or,Fn),e(Fn,ZIr),e(Fn,_Ce),e(_Ce,eNr),e(Fn,oNr),e(Fn,uCe),e(uCe,rNr),e(Fn,tNr),e(Fn,bCe),e(bCe,aNr),e(Fn,nNr),e(Or,sNr),e(Or,oe),e(oe,I3),e(I3,vCe),e(vCe,lNr),e(I3,iNr),e(I3,gZ),e(gZ,dNr),e(I3,cNr),e(oe,fNr),e(oe,N3),e(N3,FCe),e(FCe,mNr),e(N3,gNr),e(N3,hZ),e(hZ,hNr),e(N3,pNr),e(oe,_Nr),e(oe,q3),e(q3,TCe),e(TCe,uNr),e(q3,bNr),e(q3,pZ),e(pZ,vNr),e(q3,FNr),e(oe,TNr),e(oe,j3),e(j3,MCe),e(MCe,MNr),e(j3,ENr),e(j3,_Z),e(_Z,CNr),e(j3,wNr),e(oe,ANr),e(oe,D3),e(D3,ECe),e(ECe,LNr),e(D3,yNr),e(D3,uZ),e(uZ,xNr),e(D3,$Nr),e(oe,kNr),e(oe,G3),e(G3,CCe),e(CCe,SNr),e(G3,RNr),e(G3,bZ),e(bZ,PNr),e(G3,BNr),e(oe,INr),e(oe,O3),e(O3,wCe),e(wCe,NNr),e(O3,qNr),e(O3,vZ),e(vZ,jNr),e(O3,DNr),e(oe,GNr),e(oe,V3),e(V3,ACe),e(ACe,ONr),e(V3,VNr),e(V3,FZ),e(FZ,XNr),e(V3,zNr),e(oe,QNr),e(oe,X3),e(X3,LCe),e(LCe,WNr),e(X3,HNr),e(X3,TZ),e(TZ,UNr),e(X3,JNr),e(oe,YNr),e(oe,z3),e(z3,yCe),e(yCe,KNr),e(z3,ZNr),e(z3,MZ),e(MZ,eqr),e(z3,oqr),e(oe,rqr),e(oe,Q3),e(Q3,xCe),e(xCe,tqr),e(Q3,aqr),e(Q3,EZ),e(EZ,nqr),e(Q3,sqr),e(oe,lqr),e(oe,W3),e(W3,$Ce),e($Ce,iqr),e(W3,dqr),e(W3,CZ),e(CZ,cqr),e(W3,fqr),e(oe,mqr),e(oe,H3),e(H3,kCe),e(kCe,gqr),e(H3,hqr),e(H3,wZ),e(wZ,pqr),e(H3,_qr),e(oe,uqr),e(oe,U3),e(U3,SCe),e(SCe,bqr),e(U3,vqr),e(U3,AZ),e(AZ,Fqr),e(U3,Tqr),e(oe,Mqr),e(oe,J3),e(J3,RCe),e(RCe,Eqr),e(J3,Cqr),e(J3,LZ),e(LZ,wqr),e(J3,Aqr),e(oe,Lqr),e(oe,Y3),e(Y3,PCe),e(PCe,yqr),e(Y3,xqr),e(Y3,yZ),e(yZ,$qr),e(Y3,kqr),e(oe,Sqr),e(oe,K3),e(K3,BCe),e(BCe,Rqr),e(K3,Pqr),e(K3,xZ),e(xZ,Bqr),e(K3,Iqr),e(oe,Nqr),e(oe,Z3),e(Z3,ICe),e(ICe,qqr),e(Z3,jqr),e(Z3,$Z),e($Z,Dqr),e(Z3,Gqr),e(oe,Oqr),e(oe,e5),e(e5,NCe),e(NCe,Vqr),e(e5,Xqr),e(e5,kZ),e(kZ,zqr),e(e5,Qqr),e(oe,Wqr),e(oe,o5),e(o5,qCe),e(qCe,Hqr),e(o5,Uqr),e(o5,SZ),e(SZ,Jqr),e(o5,Yqr),e(oe,Kqr),e(oe,r5),e(r5,jCe),e(jCe,Zqr),e(r5,ejr),e(r5,RZ),e(RZ,ojr),e(r5,rjr),e(oe,tjr),e(oe,t5),e(t5,DCe),e(DCe,ajr),e(t5,njr),e(t5,PZ),e(PZ,sjr),e(t5,ljr),e(oe,ijr),e(oe,a5),e(a5,GCe),e(GCe,djr),e(a5,cjr),e(a5,BZ),e(BZ,fjr),e(a5,mjr),e(oe,gjr),e(oe,n5),e(n5,OCe),e(OCe,hjr),e(n5,pjr),e(n5,IZ),e(IZ,_jr),e(n5,ujr),e(oe,bjr),e(oe,s5),e(s5,VCe),e(VCe,vjr),e(s5,Fjr),e(s5,NZ),e(NZ,Tjr),e(s5,Mjr),e(oe,Ejr),e(oe,l5),e(l5,XCe),e(XCe,Cjr),e(l5,wjr),e(l5,qZ),e(qZ,Ajr),e(l5,Ljr),e(oe,yjr),e(oe,i5),e(i5,zCe),e(zCe,xjr),e(i5,$jr),e(i5,jZ),e(jZ,kjr),e(i5,Sjr),e(Or,Rjr),M(d5,Or,null),b(f,MXe,u),b(f,Wc,u),e(Wc,c5),e(c5,QCe),M(Jx,QCe,null),e(Wc,Pjr),e(Wc,WCe),e(WCe,Bjr),b(f,EXe,u),b(f,pr,u),M(Yx,pr,null),e(pr,Ijr),e(pr,Hc),e(Hc,Njr),e(Hc,DZ),e(DZ,qjr),e(Hc,jjr),e(Hc,GZ),e(GZ,Djr),e(Hc,Gjr),e(pr,Ojr),e(pr,Kx),e(Kx,Vjr),e(Kx,HCe),e(HCe,Xjr),e(Kx,zjr),e(pr,Qjr),e(pr,zt),M(Zx,zt,null),e(zt,Wjr),e(zt,UCe),e(UCe,Hjr),e(zt,Ujr),e(zt,Uc),e(Uc,Jjr),e(Uc,JCe),e(JCe,Yjr),e(Uc,Kjr),e(Uc,OZ),e(OZ,Zjr),e(Uc,eDr),e(zt,oDr),M(f5,zt,null),e(pr,rDr),e(pr,Vr),M(e$,Vr,null),e(Vr,tDr),e(Vr,YCe),e(YCe,aDr),e(Vr,nDr),e(Vr,Tn),e(Tn,sDr),e(Tn,KCe),e(KCe,lDr),e(Tn,iDr),e(Tn,ZCe),e(ZCe,dDr),e(Tn,cDr),e(Tn,e3e),e(e3e,fDr),e(Tn,mDr),e(Vr,gDr),e(Vr,xe),e(xe,m5),e(m5,o3e),e(o3e,hDr),e(m5,pDr),e(m5,VZ),e(VZ,_Dr),e(m5,uDr),e(xe,bDr),e(xe,g5),e(g5,r3e),e(r3e,vDr),e(g5,FDr),e(g5,XZ),e(XZ,TDr),e(g5,MDr),e(xe,EDr),e(xe,h5),e(h5,t3e),e(t3e,CDr),e(h5,wDr),e(h5,zZ),e(zZ,ADr),e(h5,LDr),e(xe,yDr),e(xe,p5),e(p5,a3e),e(a3e,xDr),e(p5,$Dr),e(p5,QZ),e(QZ,kDr),e(p5,SDr),e(xe,RDr),e(xe,_5),e(_5,n3e),e(n3e,PDr),e(_5,BDr),e(_5,WZ),e(WZ,IDr),e(_5,NDr),e(xe,qDr),e(xe,u5),e(u5,s3e),e(s3e,jDr),e(u5,DDr),e(u5,HZ),e(HZ,GDr),e(u5,ODr),e(xe,VDr),e(xe,b5),e(b5,l3e),e(l3e,XDr),e(b5,zDr),e(b5,UZ),e(UZ,QDr),e(b5,WDr),e(xe,HDr),e(xe,v5),e(v5,i3e),e(i3e,UDr),e(v5,JDr),e(v5,JZ),e(JZ,YDr),e(v5,KDr),e(xe,ZDr),e(xe,F5),e(F5,d3e),e(d3e,eGr),e(F5,oGr),e(F5,YZ),e(YZ,rGr),e(F5,tGr),e(xe,aGr),e(xe,T5),e(T5,c3e),e(c3e,nGr),e(T5,sGr),e(T5,KZ),e(KZ,lGr),e(T5,iGr),e(Vr,dGr),M(M5,Vr,null),b(f,CXe,u),b(f,Jc,u),e(Jc,E5),e(E5,f3e),M(o$,f3e,null),e(Jc,cGr),e(Jc,m3e),e(m3e,fGr),b(f,wXe,u),b(f,_r,u),M(r$,_r,null),e(_r,mGr),e(_r,Yc),e(Yc,gGr),e(Yc,ZZ),e(ZZ,hGr),e(Yc,pGr),e(Yc,eee),e(eee,_Gr),e(Yc,uGr),e(_r,bGr),e(_r,t$),e(t$,vGr),e(t$,g3e),e(g3e,FGr),e(t$,TGr),e(_r,MGr),e(_r,Qt),M(a$,Qt,null),e(Qt,EGr),e(Qt,h3e),e(h3e,CGr),e(Qt,wGr),e(Qt,Kc),e(Kc,AGr),e(Kc,p3e),e(p3e,LGr),e(Kc,yGr),e(Kc,oee),e(oee,xGr),e(Kc,$Gr),e(Qt,kGr),M(C5,Qt,null),e(_r,SGr),e(_r,Xr),M(n$,Xr,null),e(Xr,RGr),e(Xr,_3e),e(_3e,PGr),e(Xr,BGr),e(Xr,Mn),e(Mn,IGr),e(Mn,u3e),e(u3e,NGr),e(Mn,qGr),e(Mn,b3e),e(b3e,jGr),e(Mn,DGr),e(Mn,v3e),e(v3e,GGr),e(Mn,OGr),e(Xr,VGr),e(Xr,Ee),e(Ee,w5),e(w5,F3e),e(F3e,XGr),e(w5,zGr),e(w5,ree),e(ree,QGr),e(w5,WGr),e(Ee,HGr),e(Ee,A5),e(A5,T3e),e(T3e,UGr),e(A5,JGr),e(A5,tee),e(tee,YGr),e(A5,KGr),e(Ee,ZGr),e(Ee,L5),e(L5,M3e),e(M3e,eOr),e(L5,oOr),e(L5,aee),e(aee,rOr),e(L5,tOr),e(Ee,aOr),e(Ee,y5),e(y5,E3e),e(E3e,nOr),e(y5,sOr),e(y5,nee),e(nee,lOr),e(y5,iOr),e(Ee,dOr),e(Ee,x5),e(x5,C3e),e(C3e,cOr),e(x5,fOr),e(x5,see),e(see,mOr),e(x5,gOr),e(Ee,hOr),e(Ee,$5),e($5,w3e),e(w3e,pOr),e($5,_Or),e($5,lee),e(lee,uOr),e($5,bOr),e(Ee,vOr),e(Ee,k5),e(k5,A3e),e(A3e,FOr),e(k5,TOr),e(k5,iee),e(iee,MOr),e(k5,EOr),e(Ee,COr),e(Ee,S5),e(S5,L3e),e(L3e,wOr),e(S5,AOr),e(S5,dee),e(dee,LOr),e(S5,yOr),e(Ee,xOr),e(Ee,R5),e(R5,y3e),e(y3e,$Or),e(R5,kOr),e(R5,cee),e(cee,SOr),e(R5,ROr),e(Ee,POr),e(Ee,P5),e(P5,x3e),e(x3e,BOr),e(P5,IOr),e(P5,fee),e(fee,NOr),e(P5,qOr),e(Ee,jOr),e(Ee,B5),e(B5,$3e),e($3e,DOr),e(B5,GOr),e(B5,mee),e(mee,OOr),e(B5,VOr),e(Ee,XOr),e(Ee,I5),e(I5,k3e),e(k3e,zOr),e(I5,QOr),e(I5,gee),e(gee,WOr),e(I5,HOr),e(Ee,UOr),e(Ee,N5),e(N5,S3e),e(S3e,JOr),e(N5,YOr),e(N5,hee),e(hee,KOr),e(N5,ZOr),e(Xr,eVr),M(q5,Xr,null),b(f,AXe,u),b(f,Zc,u),e(Zc,j5),e(j5,R3e),M(s$,R3e,null),e(Zc,oVr),e(Zc,P3e),e(P3e,rVr),b(f,LXe,u),b(f,ur,u),M(l$,ur,null),e(ur,tVr),e(ur,ef),e(ef,aVr),e(ef,pee),e(pee,nVr),e(ef,sVr),e(ef,_ee),e(_ee,lVr),e(ef,iVr),e(ur,dVr),e(ur,i$),e(i$,cVr),e(i$,B3e),e(B3e,fVr),e(i$,mVr),e(ur,gVr),e(ur,Wt),M(d$,Wt,null),e(Wt,hVr),e(Wt,I3e),e(I3e,pVr),e(Wt,_Vr),e(Wt,of),e(of,uVr),e(of,N3e),e(N3e,bVr),e(of,vVr),e(of,uee),e(uee,FVr),e(of,TVr),e(Wt,MVr),M(D5,Wt,null),e(ur,EVr),e(ur,zr),M(c$,zr,null),e(zr,CVr),e(zr,q3e),e(q3e,wVr),e(zr,AVr),e(zr,En),e(En,LVr),e(En,j3e),e(j3e,yVr),e(En,xVr),e(En,D3e),e(D3e,$Vr),e(En,kVr),e(En,G3e),e(G3e,SVr),e(En,RVr),e(zr,PVr),e(zr,$e),e($e,G5),e(G5,O3e),e(O3e,BVr),e(G5,IVr),e(G5,bee),e(bee,NVr),e(G5,qVr),e($e,jVr),e($e,O5),e(O5,V3e),e(V3e,DVr),e(O5,GVr),e(O5,vee),e(vee,OVr),e(O5,VVr),e($e,XVr),e($e,V5),e(V5,X3e),e(X3e,zVr),e(V5,QVr),e(V5,Fee),e(Fee,WVr),e(V5,HVr),e($e,UVr),e($e,X5),e(X5,z3e),e(z3e,JVr),e(X5,YVr),e(X5,Tee),e(Tee,KVr),e(X5,ZVr),e($e,eXr),e($e,z5),e(z5,Q3e),e(Q3e,oXr),e(z5,rXr),e(z5,Mee),e(Mee,tXr),e(z5,aXr),e($e,nXr),e($e,Q5),e(Q5,W3e),e(W3e,sXr),e(Q5,lXr),e(Q5,Eee),e(Eee,iXr),e(Q5,dXr),e($e,cXr),e($e,W5),e(W5,H3e),e(H3e,fXr),e(W5,mXr),e(W5,Cee),e(Cee,gXr),e(W5,hXr),e($e,pXr),e($e,H5),e(H5,U3e),e(U3e,_Xr),e(H5,uXr),e(H5,wee),e(wee,bXr),e(H5,vXr),e($e,FXr),e($e,U5),e(U5,J3e),e(J3e,TXr),e(U5,MXr),e(U5,Aee),e(Aee,EXr),e(U5,CXr),e($e,wXr),e($e,J5),e(J5,Y3e),e(Y3e,AXr),e(J5,LXr),e(J5,Lee),e(Lee,yXr),e(J5,xXr),e(zr,$Xr),M(Y5,zr,null),b(f,yXe,u),b(f,rf,u),e(rf,K5),e(K5,K3e),M(f$,K3e,null),e(rf,kXr),e(rf,Z3e),e(Z3e,SXr),b(f,xXe,u),b(f,br,u),M(m$,br,null),e(br,RXr),e(br,tf),e(tf,PXr),e(tf,yee),e(yee,BXr),e(tf,IXr),e(tf,xee),e(xee,NXr),e(tf,qXr),e(br,jXr),e(br,g$),e(g$,DXr),e(g$,e5e),e(e5e,GXr),e(g$,OXr),e(br,VXr),e(br,Ht),M(h$,Ht,null),e(Ht,XXr),e(Ht,o5e),e(o5e,zXr),e(Ht,QXr),e(Ht,af),e(af,WXr),e(af,r5e),e(r5e,HXr),e(af,UXr),e(af,$ee),e($ee,JXr),e(af,YXr),e(Ht,KXr),M(Z5,Ht,null),e(br,ZXr),e(br,Qr),M(p$,Qr,null),e(Qr,ezr),e(Qr,t5e),e(t5e,ozr),e(Qr,rzr),e(Qr,Cn),e(Cn,tzr),e(Cn,a5e),e(a5e,azr),e(Cn,nzr),e(Cn,n5e),e(n5e,szr),e(Cn,lzr),e(Cn,s5e),e(s5e,izr),e(Cn,dzr),e(Qr,czr),e(Qr,ke),e(ke,e0),e(e0,l5e),e(l5e,fzr),e(e0,mzr),e(e0,kee),e(kee,gzr),e(e0,hzr),e(ke,pzr),e(ke,o0),e(o0,i5e),e(i5e,_zr),e(o0,uzr),e(o0,See),e(See,bzr),e(o0,vzr),e(ke,Fzr),e(ke,r0),e(r0,d5e),e(d5e,Tzr),e(r0,Mzr),e(r0,Ree),e(Ree,Ezr),e(r0,Czr),e(ke,wzr),e(ke,t0),e(t0,c5e),e(c5e,Azr),e(t0,Lzr),e(t0,Pee),e(Pee,yzr),e(t0,xzr),e(ke,$zr),e(ke,a0),e(a0,f5e),e(f5e,kzr),e(a0,Szr),e(a0,Bee),e(Bee,Rzr),e(a0,Pzr),e(ke,Bzr),e(ke,n0),e(n0,m5e),e(m5e,Izr),e(n0,Nzr),e(n0,Iee),e(Iee,qzr),e(n0,jzr),e(ke,Dzr),e(ke,s0),e(s0,g5e),e(g5e,Gzr),e(s0,Ozr),e(s0,Nee),e(Nee,Vzr),e(s0,Xzr),e(ke,zzr),e(ke,l0),e(l0,h5e),e(h5e,Qzr),e(l0,Wzr),e(l0,qee),e(qee,Hzr),e(l0,Uzr),e(ke,Jzr),e(ke,i0),e(i0,p5e),e(p5e,Yzr),e(i0,Kzr),e(i0,jee),e(jee,Zzr),e(i0,eQr),e(ke,oQr),e(ke,d0),e(d0,_5e),e(_5e,rQr),e(d0,tQr),e(d0,Dee),e(Dee,aQr),e(d0,nQr),e(Qr,sQr),M(c0,Qr,null),b(f,$Xe,u),b(f,nf,u),e(nf,f0),e(f0,u5e),M(_$,u5e,null),e(nf,lQr),e(nf,b5e),e(b5e,iQr),b(f,kXe,u),b(f,vr,u),M(u$,vr,null),e(vr,dQr),e(vr,sf),e(sf,cQr),e(sf,Gee),e(Gee,fQr),e(sf,mQr),e(sf,Oee),e(Oee,gQr),e(sf,hQr),e(vr,pQr),e(vr,b$),e(b$,_Qr),e(b$,v5e),e(v5e,uQr),e(b$,bQr),e(vr,vQr),e(vr,Ut),M(v$,Ut,null),e(Ut,FQr),e(Ut,F5e),e(F5e,TQr),e(Ut,MQr),e(Ut,lf),e(lf,EQr),e(lf,T5e),e(T5e,CQr),e(lf,wQr),e(lf,Vee),e(Vee,AQr),e(lf,LQr),e(Ut,yQr),M(m0,Ut,null),e(vr,xQr),e(vr,Wr),M(F$,Wr,null),e(Wr,$Qr),e(Wr,M5e),e(M5e,kQr),e(Wr,SQr),e(Wr,wn),e(wn,RQr),e(wn,E5e),e(E5e,PQr),e(wn,BQr),e(wn,C5e),e(C5e,IQr),e(wn,NQr),e(wn,w5e),e(w5e,qQr),e(wn,jQr),e(Wr,DQr),e(Wr,Se),e(Se,g0),e(g0,A5e),e(A5e,GQr),e(g0,OQr),e(g0,Xee),e(Xee,VQr),e(g0,XQr),e(Se,zQr),e(Se,h0),e(h0,L5e),e(L5e,QQr),e(h0,WQr),e(h0,zee),e(zee,HQr),e(h0,UQr),e(Se,JQr),e(Se,p0),e(p0,y5e),e(y5e,YQr),e(p0,KQr),e(p0,Qee),e(Qee,ZQr),e(p0,eWr),e(Se,oWr),e(Se,_0),e(_0,x5e),e(x5e,rWr),e(_0,tWr),e(_0,Wee),e(Wee,aWr),e(_0,nWr),e(Se,sWr),e(Se,u0),e(u0,$5e),e($5e,lWr),e(u0,iWr),e(u0,Hee),e(Hee,dWr),e(u0,cWr),e(Se,fWr),e(Se,b0),e(b0,k5e),e(k5e,mWr),e(b0,gWr),e(b0,Uee),e(Uee,hWr),e(b0,pWr),e(Se,_Wr),e(Se,v0),e(v0,S5e),e(S5e,uWr),e(v0,bWr),e(v0,Jee),e(Jee,vWr),e(v0,FWr),e(Se,TWr),e(Se,F0),e(F0,R5e),e(R5e,MWr),e(F0,EWr),e(F0,Yee),e(Yee,CWr),e(F0,wWr),e(Se,AWr),e(Se,T0),e(T0,P5e),e(P5e,LWr),e(T0,yWr),e(T0,Kee),e(Kee,xWr),e(T0,$Wr),e(Se,kWr),e(Se,M0),e(M0,B5e),e(B5e,SWr),e(M0,RWr),e(M0,Zee),e(Zee,PWr),e(M0,BWr),e(Wr,IWr),M(E0,Wr,null),b(f,SXe,u),b(f,df,u),e(df,C0),e(C0,I5e),M(T$,I5e,null),e(df,NWr),e(df,N5e),e(N5e,qWr),b(f,RXe,u),b(f,Fr,u),M(M$,Fr,null),e(Fr,jWr),e(Fr,cf),e(cf,DWr),e(cf,eoe),e(eoe,GWr),e(cf,OWr),e(cf,ooe),e(ooe,VWr),e(cf,XWr),e(Fr,zWr),e(Fr,E$),e(E$,QWr),e(E$,q5e),e(q5e,WWr),e(E$,HWr),e(Fr,UWr),e(Fr,Jt),M(C$,Jt,null),e(Jt,JWr),e(Jt,j5e),e(j5e,YWr),e(Jt,KWr),e(Jt,ff),e(ff,ZWr),e(ff,D5e),e(D5e,eHr),e(ff,oHr),e(ff,roe),e(roe,rHr),e(ff,tHr),e(Jt,aHr),M(w0,Jt,null),e(Fr,nHr),e(Fr,Hr),M(w$,Hr,null),e(Hr,sHr),e(Hr,G5e),e(G5e,lHr),e(Hr,iHr),e(Hr,An),e(An,dHr),e(An,O5e),e(O5e,cHr),e(An,fHr),e(An,V5e),e(V5e,mHr),e(An,gHr),e(An,X5e),e(X5e,hHr),e(An,pHr),e(Hr,_Hr),e(Hr,Re),e(Re,A0),e(A0,z5e),e(z5e,uHr),e(A0,bHr),e(A0,toe),e(toe,vHr),e(A0,FHr),e(Re,THr),e(Re,L0),e(L0,Q5e),e(Q5e,MHr),e(L0,EHr),e(L0,aoe),e(aoe,CHr),e(L0,wHr),e(Re,AHr),e(Re,y0),e(y0,W5e),e(W5e,LHr),e(y0,yHr),e(y0,noe),e(noe,xHr),e(y0,$Hr),e(Re,kHr),e(Re,x0),e(x0,H5e),e(H5e,SHr),e(x0,RHr),e(x0,soe),e(soe,PHr),e(x0,BHr),e(Re,IHr),e(Re,$0),e($0,U5e),e(U5e,NHr),e($0,qHr),e($0,loe),e(loe,jHr),e($0,DHr),e(Re,GHr),e(Re,k0),e(k0,J5e),e(J5e,OHr),e(k0,VHr),e(k0,ioe),e(ioe,XHr),e(k0,zHr),e(Re,QHr),e(Re,S0),e(S0,Y5e),e(Y5e,WHr),e(S0,HHr),e(S0,doe),e(doe,UHr),e(S0,JHr),e(Re,YHr),e(Re,R0),e(R0,K5e),e(K5e,KHr),e(R0,ZHr),e(R0,coe),e(coe,eUr),e(R0,oUr),e(Re,rUr),e(Re,P0),e(P0,Z5e),e(Z5e,tUr),e(P0,aUr),e(P0,foe),e(foe,nUr),e(P0,sUr),e(Re,lUr),e(Re,B0),e(B0,e0e),e(e0e,iUr),e(B0,dUr),e(B0,moe),e(moe,cUr),e(B0,fUr),e(Hr,mUr),M(I0,Hr,null),b(f,PXe,u),b(f,mf,u),e(mf,N0),e(N0,o0e),M(A$,o0e,null),e(mf,gUr),e(mf,r0e),e(r0e,hUr),b(f,BXe,u),b(f,Tr,u),M(L$,Tr,null),e(Tr,pUr),e(Tr,gf),e(gf,_Ur),e(gf,goe),e(goe,uUr),e(gf,bUr),e(gf,hoe),e(hoe,vUr),e(gf,FUr),e(Tr,TUr),e(Tr,y$),e(y$,MUr),e(y$,t0e),e(t0e,EUr),e(y$,CUr),e(Tr,wUr),e(Tr,Yt),M(x$,Yt,null),e(Yt,AUr),e(Yt,a0e),e(a0e,LUr),e(Yt,yUr),e(Yt,hf),e(hf,xUr),e(hf,n0e),e(n0e,$Ur),e(hf,kUr),e(hf,poe),e(poe,SUr),e(hf,RUr),e(Yt,PUr),M(q0,Yt,null),e(Tr,BUr),e(Tr,Ur),M($$,Ur,null),e(Ur,IUr),e(Ur,s0e),e(s0e,NUr),e(Ur,qUr),e(Ur,Ln),e(Ln,jUr),e(Ln,l0e),e(l0e,DUr),e(Ln,GUr),e(Ln,i0e),e(i0e,OUr),e(Ln,VUr),e(Ln,d0e),e(d0e,XUr),e(Ln,zUr),e(Ur,QUr),e(Ur,Ve),e(Ve,j0),e(j0,c0e),e(c0e,WUr),e(j0,HUr),e(j0,_oe),e(_oe,UUr),e(j0,JUr),e(Ve,YUr),e(Ve,D0),e(D0,f0e),e(f0e,KUr),e(D0,ZUr),e(D0,uoe),e(uoe,eJr),e(D0,oJr),e(Ve,rJr),e(Ve,G0),e(G0,m0e),e(m0e,tJr),e(G0,aJr),e(G0,boe),e(boe,nJr),e(G0,sJr),e(Ve,lJr),e(Ve,O0),e(O0,g0e),e(g0e,iJr),e(O0,dJr),e(O0,voe),e(voe,cJr),e(O0,fJr),e(Ve,mJr),e(Ve,V0),e(V0,h0e),e(h0e,gJr),e(V0,hJr),e(V0,Foe),e(Foe,pJr),e(V0,_Jr),e(Ve,uJr),e(Ve,X0),e(X0,p0e),e(p0e,bJr),e(X0,vJr),e(X0,Toe),e(Toe,FJr),e(X0,TJr),e(Ve,MJr),e(Ve,z0),e(z0,_0e),e(_0e,EJr),e(z0,CJr),e(z0,Moe),e(Moe,wJr),e(z0,AJr),e(Ve,LJr),e(Ve,Q0),e(Q0,u0e),e(u0e,yJr),e(Q0,xJr),e(Q0,Eoe),e(Eoe,$Jr),e(Q0,kJr),e(Ur,SJr),M(W0,Ur,null),b(f,IXe,u),b(f,pf,u),e(pf,H0),e(H0,b0e),M(k$,b0e,null),e(pf,RJr),e(pf,v0e),e(v0e,PJr),b(f,NXe,u),b(f,Mr,u),M(S$,Mr,null),e(Mr,BJr),e(Mr,_f),e(_f,IJr),e(_f,Coe),e(Coe,NJr),e(_f,qJr),e(_f,woe),e(woe,jJr),e(_f,DJr),e(Mr,GJr),e(Mr,R$),e(R$,OJr),e(R$,F0e),e(F0e,VJr),e(R$,XJr),e(Mr,zJr),e(Mr,Kt),M(P$,Kt,null),e(Kt,QJr),e(Kt,T0e),e(T0e,WJr),e(Kt,HJr),e(Kt,uf),e(uf,UJr),e(uf,M0e),e(M0e,JJr),e(uf,YJr),e(uf,Aoe),e(Aoe,KJr),e(uf,ZJr),e(Kt,eYr),M(U0,Kt,null),e(Mr,oYr),e(Mr,Jr),M(B$,Jr,null),e(Jr,rYr),e(Jr,E0e),e(E0e,tYr),e(Jr,aYr),e(Jr,yn),e(yn,nYr),e(yn,C0e),e(C0e,sYr),e(yn,lYr),e(yn,w0e),e(w0e,iYr),e(yn,dYr),e(yn,A0e),e(A0e,cYr),e(yn,fYr),e(Jr,mYr),e(Jr,Xe),e(Xe,J0),e(J0,L0e),e(L0e,gYr),e(J0,hYr),e(J0,Loe),e(Loe,pYr),e(J0,_Yr),e(Xe,uYr),e(Xe,Y0),e(Y0,y0e),e(y0e,bYr),e(Y0,vYr),e(Y0,yoe),e(yoe,FYr),e(Y0,TYr),e(Xe,MYr),e(Xe,K0),e(K0,x0e),e(x0e,EYr),e(K0,CYr),e(K0,xoe),e(xoe,wYr),e(K0,AYr),e(Xe,LYr),e(Xe,Z0),e(Z0,$0e),e($0e,yYr),e(Z0,xYr),e(Z0,$oe),e($oe,$Yr),e(Z0,kYr),e(Xe,SYr),e(Xe,ew),e(ew,k0e),e(k0e,RYr),e(ew,PYr),e(ew,koe),e(koe,BYr),e(ew,IYr),e(Xe,NYr),e(Xe,ow),e(ow,S0e),e(S0e,qYr),e(ow,jYr),e(ow,Soe),e(Soe,DYr),e(ow,GYr),e(Xe,OYr),e(Xe,rw),e(rw,R0e),e(R0e,VYr),e(rw,XYr),e(rw,Roe),e(Roe,zYr),e(rw,QYr),e(Xe,WYr),e(Xe,tw),e(tw,P0e),e(P0e,HYr),e(tw,UYr),e(tw,Poe),e(Poe,JYr),e(tw,YYr),e(Jr,KYr),M(aw,Jr,null),b(f,qXe,u),b(f,bf,u),e(bf,nw),e(nw,B0e),M(I$,B0e,null),e(bf,ZYr),e(bf,I0e),e(I0e,eKr),b(f,jXe,u),b(f,Er,u),M(N$,Er,null),e(Er,oKr),e(Er,vf),e(vf,rKr),e(vf,Boe),e(Boe,tKr),e(vf,aKr),e(vf,Ioe),e(Ioe,nKr),e(vf,sKr),e(Er,lKr),e(Er,q$),e(q$,iKr),e(q$,N0e),e(N0e,dKr),e(q$,cKr),e(Er,fKr),e(Er,Zt),M(j$,Zt,null),e(Zt,mKr),e(Zt,q0e),e(q0e,gKr),e(Zt,hKr),e(Zt,Ff),e(Ff,pKr),e(Ff,j0e),e(j0e,_Kr),e(Ff,uKr),e(Ff,Noe),e(Noe,bKr),e(Ff,vKr),e(Zt,FKr),M(sw,Zt,null),e(Er,TKr),e(Er,Yr),M(D$,Yr,null),e(Yr,MKr),e(Yr,D0e),e(D0e,EKr),e(Yr,CKr),e(Yr,xn),e(xn,wKr),e(xn,G0e),e(G0e,AKr),e(xn,LKr),e(xn,O0e),e(O0e,yKr),e(xn,xKr),e(xn,V0e),e(V0e,$Kr),e(xn,kKr),e(Yr,SKr),e(Yr,X0e),e(X0e,lw),e(lw,z0e),e(z0e,RKr),e(lw,PKr),e(lw,qoe),e(qoe,BKr),e(lw,IKr),e(Yr,NKr),M(iw,Yr,null),b(f,DXe,u),b(f,Tf,u),e(Tf,dw),e(dw,Q0e),M(G$,Q0e,null),e(Tf,qKr),e(Tf,W0e),e(W0e,jKr),b(f,GXe,u),b(f,Cr,u),M(O$,Cr,null),e(Cr,DKr),e(Cr,Mf),e(Mf,GKr),e(Mf,joe),e(joe,OKr),e(Mf,VKr),e(Mf,Doe),e(Doe,XKr),e(Mf,zKr),e(Cr,QKr),e(Cr,V$),e(V$,WKr),e(V$,H0e),e(H0e,HKr),e(V$,UKr),e(Cr,JKr),e(Cr,ea),M(X$,ea,null),e(ea,YKr),e(ea,U0e),e(U0e,KKr),e(ea,ZKr),e(ea,Ef),e(Ef,eZr),e(Ef,J0e),e(J0e,oZr),e(Ef,rZr),e(Ef,Goe),e(Goe,tZr),e(Ef,aZr),e(ea,nZr),M(cw,ea,null),e(Cr,sZr),e(Cr,Kr),M(z$,Kr,null),e(Kr,lZr),e(Kr,Y0e),e(Y0e,iZr),e(Kr,dZr),e(Kr,$n),e($n,cZr),e($n,K0e),e(K0e,fZr),e($n,mZr),e($n,Z0e),e(Z0e,gZr),e($n,hZr),e($n,ewe),e(ewe,pZr),e($n,_Zr),e(Kr,uZr),e(Kr,Q$),e(Q$,fw),e(fw,owe),e(owe,bZr),e(fw,vZr),e(fw,Ooe),e(Ooe,FZr),e(fw,TZr),e(Q$,MZr),e(Q$,mw),e(mw,rwe),e(rwe,EZr),e(mw,CZr),e(mw,Voe),e(Voe,wZr),e(mw,AZr),e(Kr,LZr),M(gw,Kr,null),b(f,OXe,u),b(f,Cf,u),e(Cf,hw),e(hw,twe),M(W$,twe,null),e(Cf,yZr),e(Cf,awe),e(awe,xZr),b(f,VXe,u),b(f,wr,u),M(H$,wr,null),e(wr,$Zr),e(wr,wf),e(wf,kZr),e(wf,Xoe),e(Xoe,SZr),e(wf,RZr),e(wf,zoe),e(zoe,PZr),e(wf,BZr),e(wr,IZr),e(wr,U$),e(U$,NZr),e(U$,nwe),e(nwe,qZr),e(U$,jZr),e(wr,DZr),e(wr,oa),M(J$,oa,null),e(oa,GZr),e(oa,swe),e(swe,OZr),e(oa,VZr),e(oa,Af),e(Af,XZr),e(Af,lwe),e(lwe,zZr),e(Af,QZr),e(Af,Qoe),e(Qoe,WZr),e(Af,HZr),e(oa,UZr),M(pw,oa,null),e(wr,JZr),e(wr,Zr),M(Y$,Zr,null),e(Zr,YZr),e(Zr,iwe),e(iwe,KZr),e(Zr,ZZr),e(Zr,kn),e(kn,eet),e(kn,dwe),e(dwe,oet),e(kn,ret),e(kn,cwe),e(cwe,tet),e(kn,aet),e(kn,fwe),e(fwe,net),e(kn,set),e(Zr,iet),e(Zr,mwe),e(mwe,_w),e(_w,gwe),e(gwe,det),e(_w,cet),e(_w,Woe),e(Woe,fet),e(_w,met),e(Zr,get),M(uw,Zr,null),XXe=!0},p(f,[u]){const K$={};u&2&&(K$.$$scope={dirty:u,ctx:f}),Bf.$set(K$);const hwe={};u&2&&(hwe.$$scope={dirty:u,ctx:f}),zg.$set(hwe);const pwe={};u&2&&(pwe.$$scope={dirty:u,ctx:f}),Lh.$set(pwe);const _we={};u&2&&(_we.$$scope={dirty:u,ctx:f}),ip.$set(_we);const Z$={};u&2&&(Z$.$$scope={dirty:u,ctx:f}),dp.$set(Z$);const uwe={};u&2&&(uwe.$$scope={dirty:u,ctx:f}),xp.$set(uwe);const Sn={};u&2&&(Sn.$$scope={dirty:u,ctx:f}),$p.$set(Sn);const bwe={};u&2&&(bwe.$$scope={dirty:u,ctx:f}),Rp.$set(bwe);const vwe={};u&2&&(vwe.$$scope={dirty:u,ctx:f}),Bu.$set(vwe);const Fwe={};u&2&&(Fwe.$$scope={dirty:u,ctx:f}),Nu.$set(Fwe);const ek={};u&2&&(ek.$$scope={dirty:u,ctx:f}),$7.$set(ek);const Twe={};u&2&&(Twe.$$scope={dirty:u,ctx:f}),S7.$set(Twe);const ok={};u&2&&(ok.$$scope={dirty:u,ctx:f}),F1.$set(ok);const Mwe={};u&2&&(Mwe.$$scope={dirty:u,ctx:f}),M1.$set(Mwe);const rk={};u&2&&(rk.$$scope={dirty:u,ctx:f}),i2.$set(rk);const Ewe={};u&2&&(Ewe.$$scope={dirty:u,ctx:f}),c2.$set(Ewe);const Cwe={};u&2&&(Cwe.$$scope={dirty:u,ctx:f}),$2.$set(Cwe);const wwe={};u&2&&(wwe.$$scope={dirty:u,ctx:f}),S2.$set(wwe);const Lf={};u&2&&(Lf.$$scope={dirty:u,ctx:f}),$b.$set(Lf);const Awe={};u&2&&(Awe.$$scope={dirty:u,ctx:f}),Sb.$set(Awe);const Lwe={};u&2&&(Lwe.$$scope={dirty:u,ctx:f}),cv.$set(Lwe);const ywe={};u&2&&(ywe.$$scope={dirty:u,ctx:f}),mv.$set(ywe);const tk={};u&2&&(tk.$$scope={dirty:u,ctx:f}),Fv.$set(tk);const xwe={};u&2&&(xwe.$$scope={dirty:u,ctx:f}),Mv.$set(xwe);const $we={};u&2&&($we.$$scope={dirty:u,ctx:f}),sF.$set($we);const kwe={};u&2&&(kwe.$$scope={dirty:u,ctx:f}),iF.$set(kwe);const rt={};u&2&&(rt.$$scope={dirty:u,ctx:f}),KF.$set(rt);const ak={};u&2&&(ak.$$scope={dirty:u,ctx:f}),eT.$set(ak);const Swe={};u&2&&(Swe.$$scope={dirty:u,ctx:f}),tT.$set(Swe);const nk={};u&2&&(nk.$$scope={dirty:u,ctx:f}),nT.$set(nk);const Rwe={};u&2&&(Rwe.$$scope={dirty:u,ctx:f}),vT.$set(Rwe);const tt={};u&2&&(tt.$$scope={dirty:u,ctx:f}),TT.$set(tt);const Pwe={};u&2&&(Pwe.$$scope={dirty:u,ctx:f}),CT.$set(Pwe);const yf={};u&2&&(yf.$$scope={dirty:u,ctx:f}),AT.$set(yf);const Bwe={};u&2&&(Bwe.$$scope={dirty:u,ctx:f}),xT.$set(Bwe);const Iwe={};u&2&&(Iwe.$$scope={dirty:u,ctx:f}),kT.$set(Iwe);const L={};u&2&&(L.$$scope={dirty:u,ctx:f}),OT.$set(L);const bw={};u&2&&(bw.$$scope={dirty:u,ctx:f}),XT.$set(bw);const Nwe={};u&2&&(Nwe.$$scope={dirty:u,ctx:f}),YT.$set(Nwe);const qwe={};u&2&&(qwe.$$scope={dirty:u,ctx:f}),ZT.$set(qwe);const vw={};u&2&&(vw.$$scope={dirty:u,ctx:f}),f8.$set(vw);const jwe={};u&2&&(jwe.$$scope={dirty:u,ctx:f}),g8.$set(jwe);const Dwe={};u&2&&(Dwe.$$scope={dirty:u,ctx:f}),u8.$set(Dwe);const Fw={};u&2&&(Fw.$$scope={dirty:u,ctx:f}),v8.$set(Fw);const Gwe={};u&2&&(Gwe.$$scope={dirty:u,ctx:f}),A8.$set(Gwe);const Owe={};u&2&&(Owe.$$scope={dirty:u,ctx:f}),y8.$set(Owe);const Tw={};u&2&&(Tw.$$scope={dirty:u,ctx:f}),R8.$set(Tw);const Vwe={};u&2&&(Vwe.$$scope={dirty:u,ctx:f}),B8.$set(Vwe);const Xwe={};u&2&&(Xwe.$$scope={dirty:u,ctx:f}),j8.$set(Xwe);const Mw={};u&2&&(Mw.$$scope={dirty:u,ctx:f}),G8.$set(Mw);const zwe={};u&2&&(zwe.$$scope={dirty:u,ctx:f}),X8.$set(zwe);const Qwe={};u&2&&(Qwe.$$scope={dirty:u,ctx:f}),Q8.$set(Qwe);const Ew={};u&2&&(Ew.$$scope={dirty:u,ctx:f}),K8.$set(Ew);const Wwe={};u&2&&(Wwe.$$scope={dirty:u,ctx:f}),eM.$set(Wwe);const Hwe={};u&2&&(Hwe.$$scope={dirty:u,ctx:f}),tM.$set(Hwe);const Cw={};u&2&&(Cw.$$scope={dirty:u,ctx:f}),nM.$set(Cw);const Uwe={};u&2&&(Uwe.$$scope={dirty:u,ctx:f}),KM.$set(Uwe);const Jwe={};u&2&&(Jwe.$$scope={dirty:u,ctx:f}),e4.$set(Jwe);const ww={};u&2&&(ww.$$scope={dirty:u,ctx:f}),C4.$set(ww);const Ywe={};u&2&&(Ywe.$$scope={dirty:u,ctx:f}),A4.$set(Ywe);const Kwe={};u&2&&(Kwe.$$scope={dirty:u,ctx:f}),D4.$set(Kwe);const Aw={};u&2&&(Aw.$$scope={dirty:u,ctx:f}),O4.$set(Aw);const Zwe={};u&2&&(Zwe.$$scope={dirty:u,ctx:f}),W4.$set(Zwe);const eAe={};u&2&&(eAe.$$scope={dirty:u,ctx:f}),U4.$set(eAe);const Lw={};u&2&&(Lw.$$scope={dirty:u,ctx:f}),_E.$set(Lw);const oAe={};u&2&&(oAe.$$scope={dirty:u,ctx:f}),bE.$set(oAe);const rAe={};u&2&&(rAe.$$scope={dirty:u,ctx:f}),xE.$set(rAe);const yw={};u&2&&(yw.$$scope={dirty:u,ctx:f}),kE.$set(yw);const tAe={};u&2&&(tAe.$$scope={dirty:u,ctx:f}),aC.$set(tAe);const aAe={};u&2&&(aAe.$$scope={dirty:u,ctx:f}),sC.$set(aAe);const xw={};u&2&&(xw.$$scope={dirty:u,ctx:f}),CC.$set(xw);const nAe={};u&2&&(nAe.$$scope={dirty:u,ctx:f}),AC.$set(nAe);const sAe={};u&2&&(sAe.$$scope={dirty:u,ctx:f}),xC.$set(sAe);const $w={};u&2&&($w.$$scope={dirty:u,ctx:f}),kC.$set($w);const lAe={};u&2&&(lAe.$$scope={dirty:u,ctx:f}),RC.$set(lAe);const iAe={};u&2&&(iAe.$$scope={dirty:u,ctx:f}),BC.$set(iAe);const kw={};u&2&&(kw.$$scope={dirty:u,ctx:f}),r3.$set(kw);const dAe={};u&2&&(dAe.$$scope={dirty:u,ctx:f}),a3.$set(dAe);const cAe={};u&2&&(cAe.$$scope={dirty:u,ctx:f}),w3.$set(cAe);const Sw={};u&2&&(Sw.$$scope={dirty:u,ctx:f}),L3.$set(Sw);const fAe={};u&2&&(fAe.$$scope={dirty:u,ctx:f}),x3.$set(fAe);const mAe={};u&2&&(mAe.$$scope={dirty:u,ctx:f}),k3.$set(mAe);const Rw={};u&2&&(Rw.$$scope={dirty:u,ctx:f}),R3.$set(Rw);const gAe={};u&2&&(gAe.$$scope={dirty:u,ctx:f}),B3.$set(gAe);const hAe={};u&2&&(hAe.$$scope={dirty:u,ctx:f}),d5.$set(hAe);const Pw={};u&2&&(Pw.$$scope={dirty:u,ctx:f}),f5.$set(Pw);const pAe={};u&2&&(pAe.$$scope={dirty:u,ctx:f}),M5.$set(pAe);const _Ae={};u&2&&(_Ae.$$scope={dirty:u,ctx:f}),C5.$set(_Ae);const Bw={};u&2&&(Bw.$$scope={dirty:u,ctx:f}),q5.$set(Bw);const uAe={};u&2&&(uAe.$$scope={dirty:u,ctx:f}),D5.$set(uAe);const bAe={};u&2&&(bAe.$$scope={dirty:u,ctx:f}),Y5.$set(bAe);const Iw={};u&2&&(Iw.$$scope={dirty:u,ctx:f}),Z5.$set(Iw);const vAe={};u&2&&(vAe.$$scope={dirty:u,ctx:f}),c0.$set(vAe);const FAe={};u&2&&(FAe.$$scope={dirty:u,ctx:f}),m0.$set(FAe);const Nw={};u&2&&(Nw.$$scope={dirty:u,ctx:f}),E0.$set(Nw);const TAe={};u&2&&(TAe.$$scope={dirty:u,ctx:f}),w0.$set(TAe);const MAe={};u&2&&(MAe.$$scope={dirty:u,ctx:f}),I0.$set(MAe);const qw={};u&2&&(qw.$$scope={dirty:u,ctx:f}),q0.$set(qw);const EAe={};u&2&&(EAe.$$scope={dirty:u,ctx:f}),W0.$set(EAe);const CAe={};u&2&&(CAe.$$scope={dirty:u,ctx:f}),U0.$set(CAe);const jw={};u&2&&(jw.$$scope={dirty:u,ctx:f}),aw.$set(jw);const wAe={};u&2&&(wAe.$$scope={dirty:u,ctx:f}),sw.$set(wAe);const AAe={};u&2&&(AAe.$$scope={dirty:u,ctx:f}),iw.$set(AAe);const Dw={};u&2&&(Dw.$$scope={dirty:u,ctx:f}),cw.$set(Dw);const LAe={};u&2&&(LAe.$$scope={dirty:u,ctx:f}),gw.$set(LAe);const yAe={};u&2&&(yAe.$$scope={dirty:u,ctx:f}),pw.$set(yAe);const Gw={};u&2&&(Gw.$$scope={dirty:u,ctx:f}),uw.$set(Gw)},i(f){XXe||(E(d.$$.fragment,f),E(xa.$$.fragment,f),E(O6.$$.fragment,f),E(V6.$$.fragment,f),E(Bf.$$.fragment,f),E(X6.$$.fragment,f),E(z6.$$.fragment,f),E(H6.$$.fragment,f),E(zg.$$.fragment,f),E(U6.$$.fragment,f),E(J6.$$.fragment,f),E(Y6.$$.fragment,f),E(eL.$$.fragment,f),E(Lh.$$.fragment,f),E(oL.$$.fragment,f),E(rL.$$.fragment,f),E(tL.$$.fragment,f),E(sL.$$.fragment,f),E(ip.$$.fragment,f),E(dp.$$.fragment,f),E(lL.$$.fragment,f),E(iL.$$.fragment,f),E(dL.$$.fragment,f),E(mL.$$.fragment,f),E(xp.$$.fragment,f),E($p.$$.fragment,f),E(gL.$$.fragment,f),E(hL.$$.fragment,f),E(pL.$$.fragment,f),E(uL.$$.fragment,f),E(Rp.$$.fragment,f),E(bL.$$.fragment,f),E(Bu.$$.fragment,f),E(vL.$$.fragment,f),E(FL.$$.fragment,f),E(ML.$$.fragment,f),E(Nu.$$.fragment,f),E(EL.$$.fragment,f),E($7.$$.fragment,f),E(CL.$$.fragment,f),E(wL.$$.fragment,f),E(LL.$$.fragment,f),E(S7.$$.fragment,f),E(yL.$$.fragment,f),E(F1.$$.fragment,f),E(xL.$$.fragment,f),E($L.$$.fragment,f),E(SL.$$.fragment,f),E(M1.$$.fragment,f),E(RL.$$.fragment,f),E(i2.$$.fragment,f),E(PL.$$.fragment,f),E(BL.$$.fragment,f),E(NL.$$.fragment,f),E(c2.$$.fragment,f),E(qL.$$.fragment,f),E($2.$$.fragment,f),E(jL.$$.fragment,f),E(DL.$$.fragment,f),E(OL.$$.fragment,f),E(S2.$$.fragment,f),E(VL.$$.fragment,f),E($b.$$.fragment,f),E(XL.$$.fragment,f),E(zL.$$.fragment,f),E(WL.$$.fragment,f),E(Sb.$$.fragment,f),E(HL.$$.fragment,f),E(cv.$$.fragment,f),E(UL.$$.fragment,f),E(JL.$$.fragment,f),E(KL.$$.fragment,f),E(mv.$$.fragment,f),E(ZL.$$.fragment,f),E(Fv.$$.fragment,f),E(ey.$$.fragment,f),E(oy.$$.fragment,f),E(ty.$$.fragment,f),E(Mv.$$.fragment,f),E(ay.$$.fragment,f),E(sF.$$.fragment,f),E(ny.$$.fragment,f),E(sy.$$.fragment,f),E(iy.$$.fragment,f),E(iF.$$.fragment,f),E(dy.$$.fragment,f),E(KF.$$.fragment,f),E(cy.$$.fragment,f),E(fy.$$.fragment,f),E(gy.$$.fragment,f),E(eT.$$.fragment,f),E(hy.$$.fragment,f),E(tT.$$.fragment,f),E(py.$$.fragment,f),E(_y.$$.fragment,f),E(by.$$.fragment,f),E(nT.$$.fragment,f),E(vy.$$.fragment,f),E(vT.$$.fragment,f),E(Fy.$$.fragment,f),E(Ty.$$.fragment,f),E(Ey.$$.fragment,f),E(TT.$$.fragment,f),E(Cy.$$.fragment,f),E(CT.$$.fragment,f),E(wy.$$.fragment,f),E(Ay.$$.fragment,f),E(yy.$$.fragment,f),E(AT.$$.fragment,f),E(xy.$$.fragment,f),E(xT.$$.fragment,f),E($y.$$.fragment,f),E(ky.$$.fragment,f),E(Ry.$$.fragment,f),E(kT.$$.fragment,f),E(Py.$$.fragment,f),E(OT.$$.fragment,f),E(By.$$.fragment,f),E(Iy.$$.fragment,f),E(qy.$$.fragment,f),E(XT.$$.fragment,f),E(jy.$$.fragment,f),E(YT.$$.fragment,f),E(Dy.$$.fragment,f),E(Gy.$$.fragment,f),E(Vy.$$.fragment,f),E(ZT.$$.fragment,f),E(Xy.$$.fragment,f),E(f8.$$.fragment,f),E(zy.$$.fragment,f),E(Qy.$$.fragment,f),E(Hy.$$.fragment,f),E(g8.$$.fragment,f),E(Uy.$$.fragment,f),E(u8.$$.fragment,f),E(Yy.$$.fragment,f),E(Ky.$$.fragment,f),E(e9.$$.fragment,f),E(v8.$$.fragment,f),E(o9.$$.fragment,f),E(A8.$$.fragment,f),E(r9.$$.fragment,f),E(t9.$$.fragment,f),E(n9.$$.fragment,f),E(y8.$$.fragment,f),E(s9.$$.fragment,f),E(R8.$$.fragment,f),E(l9.$$.fragment,f),E(i9.$$.fragment,f),E(c9.$$.fragment,f),E(B8.$$.fragment,f),E(f9.$$.fragment,f),E(j8.$$.fragment,f),E(g9.$$.fragment,f),E(h9.$$.fragment,f),E(_9.$$.fragment,f),E(G8.$$.fragment,f),E(u9.$$.fragment,f),E(X8.$$.fragment,f),E(b9.$$.fragment,f),E(v9.$$.fragment,f),E(T9.$$.fragment,f),E(Q8.$$.fragment,f),E(M9.$$.fragment,f),E(K8.$$.fragment,f),E(E9.$$.fragment,f),E(C9.$$.fragment,f),E(A9.$$.fragment,f),E(eM.$$.fragment,f),E(L9.$$.fragment,f),E(tM.$$.fragment,f),E(y9.$$.fragment,f),E(x9.$$.fragment,f),E(k9.$$.fragment,f),E(nM.$$.fragment,f),E(S9.$$.fragment,f),E(KM.$$.fragment,f),E(R9.$$.fragment,f),E(P9.$$.fragment,f),E(I9.$$.fragment,f),E(e4.$$.fragment,f),E(N9.$$.fragment,f),E(C4.$$.fragment,f),E(q9.$$.fragment,f),E(j9.$$.fragment,f),E(G9.$$.fragment,f),E(A4.$$.fragment,f),E(O9.$$.fragment,f),E(D4.$$.fragment,f),E(V9.$$.fragment,f),E(X9.$$.fragment,f),E(Q9.$$.fragment,f),E(O4.$$.fragment,f),E(W9.$$.fragment,f),E(W4.$$.fragment,f),E(H9.$$.fragment,f),E(U9.$$.fragment,f),E(Y9.$$.fragment,f),E(U4.$$.fragment,f),E(K9.$$.fragment,f),E(_E.$$.fragment,f),E(Z9.$$.fragment,f),E(ex.$$.fragment,f),E(rx.$$.fragment,f),E(bE.$$.fragment,f),E(tx.$$.fragment,f),E(xE.$$.fragment,f),E(ax.$$.fragment,f),E(nx.$$.fragment,f),E(lx.$$.fragment,f),E(kE.$$.fragment,f),E(ix.$$.fragment,f),E(aC.$$.fragment,f),E(dx.$$.fragment,f),E(cx.$$.fragment,f),E(mx.$$.fragment,f),E(sC.$$.fragment,f),E(gx.$$.fragment,f),E(CC.$$.fragment,f),E(hx.$$.fragment,f),E(px.$$.fragment,f),E(ux.$$.fragment,f),E(AC.$$.fragment,f),E(bx.$$.fragment,f),E(xC.$$.fragment,f),E(Fx.$$.fragment,f),E(Tx.$$.fragment,f),E(Ex.$$.fragment,f),E(kC.$$.fragment,f),E(Cx.$$.fragment,f),E(RC.$$.fragment,f),E(wx.$$.fragment,f),E(Ax.$$.fragment,f),E(yx.$$.fragment,f),E(BC.$$.fragment,f),E(xx.$$.fragment,f),E(r3.$$.fragment,f),E($x.$$.fragment,f),E(kx.$$.fragment,f),E(Rx.$$.fragment,f),E(a3.$$.fragment,f),E(Px.$$.fragment,f),E(w3.$$.fragment,f),E(Bx.$$.fragment,f),E(Ix.$$.fragment,f),E(qx.$$.fragment,f),E(L3.$$.fragment,f),E(jx.$$.fragment,f),E(x3.$$.fragment,f),E(Dx.$$.fragment,f),E(Gx.$$.fragment,f),E(Vx.$$.fragment,f),E(k3.$$.fragment,f),E(Xx.$$.fragment,f),E(R3.$$.fragment,f),E(zx.$$.fragment,f),E(Qx.$$.fragment,f),E(Hx.$$.fragment,f),E(B3.$$.fragment,f),E(Ux.$$.fragment,f),E(d5.$$.fragment,f),E(Jx.$$.fragment,f),E(Yx.$$.fragment,f),E(Zx.$$.fragment,f),E(f5.$$.fragment,f),E(e$.$$.fragment,f),E(M5.$$.fragment,f),E(o$.$$.fragment,f),E(r$.$$.fragment,f),E(a$.$$.fragment,f),E(C5.$$.fragment,f),E(n$.$$.fragment,f),E(q5.$$.fragment,f),E(s$.$$.fragment,f),E(l$.$$.fragment,f),E(d$.$$.fragment,f),E(D5.$$.fragment,f),E(c$.$$.fragment,f),E(Y5.$$.fragment,f),E(f$.$$.fragment,f),E(m$.$$.fragment,f),E(h$.$$.fragment,f),E(Z5.$$.fragment,f),E(p$.$$.fragment,f),E(c0.$$.fragment,f),E(_$.$$.fragment,f),E(u$.$$.fragment,f),E(v$.$$.fragment,f),E(m0.$$.fragment,f),E(F$.$$.fragment,f),E(E0.$$.fragment,f),E(T$.$$.fragment,f),E(M$.$$.fragment,f),E(C$.$$.fragment,f),E(w0.$$.fragment,f),E(w$.$$.fragment,f),E(I0.$$.fragment,f),E(A$.$$.fragment,f),E(L$.$$.fragment,f),E(x$.$$.fragment,f),E(q0.$$.fragment,f),E($$.$$.fragment,f),E(W0.$$.fragment,f),E(k$.$$.fragment,f),E(S$.$$.fragment,f),E(P$.$$.fragment,f),E(U0.$$.fragment,f),E(B$.$$.fragment,f),E(aw.$$.fragment,f),E(I$.$$.fragment,f),E(N$.$$.fragment,f),E(j$.$$.fragment,f),E(sw.$$.fragment,f),E(D$.$$.fragment,f),E(iw.$$.fragment,f),E(G$.$$.fragment,f),E(O$.$$.fragment,f),E(X$.$$.fragment,f),E(cw.$$.fragment,f),E(z$.$$.fragment,f),E(gw.$$.fragment,f),E(W$.$$.fragment,f),E(H$.$$.fragment,f),E(J$.$$.fragment,f),E(pw.$$.fragment,f),E(Y$.$$.fragment,f),E(uw.$$.fragment,f),XXe=!0)},o(f){C(d.$$.fragment,f),C(xa.$$.fragment,f),C(O6.$$.fragment,f),C(V6.$$.fragment,f),C(Bf.$$.fragment,f),C(X6.$$.fragment,f),C(z6.$$.fragment,f),C(H6.$$.fragment,f),C(zg.$$.fragment,f),C(U6.$$.fragment,f),C(J6.$$.fragment,f),C(Y6.$$.fragment,f),C(eL.$$.fragment,f),C(Lh.$$.fragment,f),C(oL.$$.fragment,f),C(rL.$$.fragment,f),C(tL.$$.fragment,f),C(sL.$$.fragment,f),C(ip.$$.fragment,f),C(dp.$$.fragment,f),C(lL.$$.fragment,f),C(iL.$$.fragment,f),C(dL.$$.fragment,f),C(mL.$$.fragment,f),C(xp.$$.fragment,f),C($p.$$.fragment,f),C(gL.$$.fragment,f),C(hL.$$.fragment,f),C(pL.$$.fragment,f),C(uL.$$.fragment,f),C(Rp.$$.fragment,f),C(bL.$$.fragment,f),C(Bu.$$.fragment,f),C(vL.$$.fragment,f),C(FL.$$.fragment,f),C(ML.$$.fragment,f),C(Nu.$$.fragment,f),C(EL.$$.fragment,f),C($7.$$.fragment,f),C(CL.$$.fragment,f),C(wL.$$.fragment,f),C(LL.$$.fragment,f),C(S7.$$.fragment,f),C(yL.$$.fragment,f),C(F1.$$.fragment,f),C(xL.$$.fragment,f),C($L.$$.fragment,f),C(SL.$$.fragment,f),C(M1.$$.fragment,f),C(RL.$$.fragment,f),C(i2.$$.fragment,f),C(PL.$$.fragment,f),C(BL.$$.fragment,f),C(NL.$$.fragment,f),C(c2.$$.fragment,f),C(qL.$$.fragment,f),C($2.$$.fragment,f),C(jL.$$.fragment,f),C(DL.$$.fragment,f),C(OL.$$.fragment,f),C(S2.$$.fragment,f),C(VL.$$.fragment,f),C($b.$$.fragment,f),C(XL.$$.fragment,f),C(zL.$$.fragment,f),C(WL.$$.fragment,f),C(Sb.$$.fragment,f),C(HL.$$.fragment,f),C(cv.$$.fragment,f),C(UL.$$.fragment,f),C(JL.$$.fragment,f),C(KL.$$.fragment,f),C(mv.$$.fragment,f),C(ZL.$$.fragment,f),C(Fv.$$.fragment,f),C(ey.$$.fragment,f),C(oy.$$.fragment,f),C(ty.$$.fragment,f),C(Mv.$$.fragment,f),C(ay.$$.fragment,f),C(sF.$$.fragment,f),C(ny.$$.fragment,f),C(sy.$$.fragment,f),C(iy.$$.fragment,f),C(iF.$$.fragment,f),C(dy.$$.fragment,f),C(KF.$$.fragment,f),C(cy.$$.fragment,f),C(fy.$$.fragment,f),C(gy.$$.fragment,f),C(eT.$$.fragment,f),C(hy.$$.fragment,f),C(tT.$$.fragment,f),C(py.$$.fragment,f),C(_y.$$.fragment,f),C(by.$$.fragment,f),C(nT.$$.fragment,f),C(vy.$$.fragment,f),C(vT.$$.fragment,f),C(Fy.$$.fragment,f),C(Ty.$$.fragment,f),C(Ey.$$.fragment,f),C(TT.$$.fragment,f),C(Cy.$$.fragment,f),C(CT.$$.fragment,f),C(wy.$$.fragment,f),C(Ay.$$.fragment,f),C(yy.$$.fragment,f),C(AT.$$.fragment,f),C(xy.$$.fragment,f),C(xT.$$.fragment,f),C($y.$$.fragment,f),C(ky.$$.fragment,f),C(Ry.$$.fragment,f),C(kT.$$.fragment,f),C(Py.$$.fragment,f),C(OT.$$.fragment,f),C(By.$$.fragment,f),C(Iy.$$.fragment,f),C(qy.$$.fragment,f),C(XT.$$.fragment,f),C(jy.$$.fragment,f),C(YT.$$.fragment,f),C(Dy.$$.fragment,f),C(Gy.$$.fragment,f),C(Vy.$$.fragment,f),C(ZT.$$.fragment,f),C(Xy.$$.fragment,f),C(f8.$$.fragment,f),C(zy.$$.fragment,f),C(Qy.$$.fragment,f),C(Hy.$$.fragment,f),C(g8.$$.fragment,f),C(Uy.$$.fragment,f),C(u8.$$.fragment,f),C(Yy.$$.fragment,f),C(Ky.$$.fragment,f),C(e9.$$.fragment,f),C(v8.$$.fragment,f),C(o9.$$.fragment,f),C(A8.$$.fragment,f),C(r9.$$.fragment,f),C(t9.$$.fragment,f),C(n9.$$.fragment,f),C(y8.$$.fragment,f),C(s9.$$.fragment,f),C(R8.$$.fragment,f),C(l9.$$.fragment,f),C(i9.$$.fragment,f),C(c9.$$.fragment,f),C(B8.$$.fragment,f),C(f9.$$.fragment,f),C(j8.$$.fragment,f),C(g9.$$.fragment,f),C(h9.$$.fragment,f),C(_9.$$.fragment,f),C(G8.$$.fragment,f),C(u9.$$.fragment,f),C(X8.$$.fragment,f),C(b9.$$.fragment,f),C(v9.$$.fragment,f),C(T9.$$.fragment,f),C(Q8.$$.fragment,f),C(M9.$$.fragment,f),C(K8.$$.fragment,f),C(E9.$$.fragment,f),C(C9.$$.fragment,f),C(A9.$$.fragment,f),C(eM.$$.fragment,f),C(L9.$$.fragment,f),C(tM.$$.fragment,f),C(y9.$$.fragment,f),C(x9.$$.fragment,f),C(k9.$$.fragment,f),C(nM.$$.fragment,f),C(S9.$$.fragment,f),C(KM.$$.fragment,f),C(R9.$$.fragment,f),C(P9.$$.fragment,f),C(I9.$$.fragment,f),C(e4.$$.fragment,f),C(N9.$$.fragment,f),C(C4.$$.fragment,f),C(q9.$$.fragment,f),C(j9.$$.fragment,f),C(G9.$$.fragment,f),C(A4.$$.fragment,f),C(O9.$$.fragment,f),C(D4.$$.fragment,f),C(V9.$$.fragment,f),C(X9.$$.fragment,f),C(Q9.$$.fragment,f),C(O4.$$.fragment,f),C(W9.$$.fragment,f),C(W4.$$.fragment,f),C(H9.$$.fragment,f),C(U9.$$.fragment,f),C(Y9.$$.fragment,f),C(U4.$$.fragment,f),C(K9.$$.fragment,f),C(_E.$$.fragment,f),C(Z9.$$.fragment,f),C(ex.$$.fragment,f),C(rx.$$.fragment,f),C(bE.$$.fragment,f),C(tx.$$.fragment,f),C(xE.$$.fragment,f),C(ax.$$.fragment,f),C(nx.$$.fragment,f),C(lx.$$.fragment,f),C(kE.$$.fragment,f),C(ix.$$.fragment,f),C(aC.$$.fragment,f),C(dx.$$.fragment,f),C(cx.$$.fragment,f),C(mx.$$.fragment,f),C(sC.$$.fragment,f),C(gx.$$.fragment,f),C(CC.$$.fragment,f),C(hx.$$.fragment,f),C(px.$$.fragment,f),C(ux.$$.fragment,f),C(AC.$$.fragment,f),C(bx.$$.fragment,f),C(xC.$$.fragment,f),C(Fx.$$.fragment,f),C(Tx.$$.fragment,f),C(Ex.$$.fragment,f),C(kC.$$.fragment,f),C(Cx.$$.fragment,f),C(RC.$$.fragment,f),C(wx.$$.fragment,f),C(Ax.$$.fragment,f),C(yx.$$.fragment,f),C(BC.$$.fragment,f),C(xx.$$.fragment,f),C(r3.$$.fragment,f),C($x.$$.fragment,f),C(kx.$$.fragment,f),C(Rx.$$.fragment,f),C(a3.$$.fragment,f),C(Px.$$.fragment,f),C(w3.$$.fragment,f),C(Bx.$$.fragment,f),C(Ix.$$.fragment,f),C(qx.$$.fragment,f),C(L3.$$.fragment,f),C(jx.$$.fragment,f),C(x3.$$.fragment,f),C(Dx.$$.fragment,f),C(Gx.$$.fragment,f),C(Vx.$$.fragment,f),C(k3.$$.fragment,f),C(Xx.$$.fragment,f),C(R3.$$.fragment,f),C(zx.$$.fragment,f),C(Qx.$$.fragment,f),C(Hx.$$.fragment,f),C(B3.$$.fragment,f),C(Ux.$$.fragment,f),C(d5.$$.fragment,f),C(Jx.$$.fragment,f),C(Yx.$$.fragment,f),C(Zx.$$.fragment,f),C(f5.$$.fragment,f),C(e$.$$.fragment,f),C(M5.$$.fragment,f),C(o$.$$.fragment,f),C(r$.$$.fragment,f),C(a$.$$.fragment,f),C(C5.$$.fragment,f),C(n$.$$.fragment,f),C(q5.$$.fragment,f),C(s$.$$.fragment,f),C(l$.$$.fragment,f),C(d$.$$.fragment,f),C(D5.$$.fragment,f),C(c$.$$.fragment,f),C(Y5.$$.fragment,f),C(f$.$$.fragment,f),C(m$.$$.fragment,f),C(h$.$$.fragment,f),C(Z5.$$.fragment,f),C(p$.$$.fragment,f),C(c0.$$.fragment,f),C(_$.$$.fragment,f),C(u$.$$.fragment,f),C(v$.$$.fragment,f),C(m0.$$.fragment,f),C(F$.$$.fragment,f),C(E0.$$.fragment,f),C(T$.$$.fragment,f),C(M$.$$.fragment,f),C(C$.$$.fragment,f),C(w0.$$.fragment,f),C(w$.$$.fragment,f),C(I0.$$.fragment,f),C(A$.$$.fragment,f),C(L$.$$.fragment,f),C(x$.$$.fragment,f),C(q0.$$.fragment,f),C($$.$$.fragment,f),C(W0.$$.fragment,f),C(k$.$$.fragment,f),C(S$.$$.fragment,f),C(P$.$$.fragment,f),C(U0.$$.fragment,f),C(B$.$$.fragment,f),C(aw.$$.fragment,f),C(I$.$$.fragment,f),C(N$.$$.fragment,f),C(j$.$$.fragment,f),C(sw.$$.fragment,f),C(D$.$$.fragment,f),C(iw.$$.fragment,f),C(G$.$$.fragment,f),C(O$.$$.fragment,f),C(X$.$$.fragment,f),C(cw.$$.fragment,f),C(z$.$$.fragment,f),C(gw.$$.fragment,f),C(W$.$$.fragment,f),C(H$.$$.fragment,f),C(J$.$$.fragment,f),C(pw.$$.fragment,f),C(Y$.$$.fragment,f),C(uw.$$.fragment,f),XXe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t($f),f&&t(at),f&&t(Oe),f&&t(Qe),f&&t(Sf),w(xa,f),f&&t(We),f&&t(Ae),f&&t(Co),f&&t($a),f&&t(jOe),f&&t($i),w(O6),f&&t(DOe),f&&t(Nn),f&&t(GOe),w(V6,f),f&&t(OOe),f&&t(MS),f&&t(VOe),w(Bf,f),f&&t(XOe),f&&t(ki),w(X6),f&&t(zOe),f&&t(wo),w(z6),w(H6),w(zg),w(U6),f&&t(QOe),f&&t(Ri),w(J6),f&&t(WOe),f&&t(Ao),w(Y6),w(eL),w(Lh),w(oL),f&&t(HOe),f&&t(Pi),w(rL),f&&t(UOe),f&&t(Lo),w(tL),w(sL),w(ip),w(dp),w(lL),f&&t(JOe),f&&t(Bi),w(iL),f&&t(YOe),f&&t(yo),w(dL),w(mL),w(xp),w($p),w(gL),f&&t(KOe),f&&t(Ni),w(hL),f&&t(ZOe),f&&t(xo),w(pL),w(uL),w(Rp),w(bL),w(Bu),f&&t(eVe),f&&t(Di),w(vL),f&&t(oVe),f&&t($o),w(FL),w(ML),w(Nu),w(EL),w($7),f&&t(rVe),f&&t(Vi),w(CL),f&&t(tVe),f&&t(ko),w(wL),w(LL),w(S7),w(yL),w(F1),f&&t(aVe),f&&t(Qi),w(xL),f&&t(nVe),f&&t(So),w($L),w(SL),w(M1),w(RL),w(i2),f&&t(sVe),f&&t(Ui),w(PL),f&&t(lVe),f&&t(Ro),w(BL),w(NL),w(c2),w(qL),w($2),f&&t(iVe),f&&t(Ki),w(jL),f&&t(dVe),f&&t(Po),w(DL),w(OL),w(S2),w(VL),w($b),f&&t(cVe),f&&t(od),w(XL),f&&t(fVe),f&&t(Bo),w(zL),w(WL),w(Sb),w(HL),w(cv),f&&t(mVe),f&&t(ad),w(UL),f&&t(gVe),f&&t(Io),w(JL),w(KL),w(mv),w(ZL),w(Fv),f&&t(hVe),f&&t(ld),w(ey),f&&t(pVe),f&&t(qo),w(oy),w(ty),w(Mv),w(ay),w(sF),f&&t(_Ve),f&&t(cd),w(ny),f&&t(uVe),f&&t(jo),w(sy),w(iy),w(iF),w(dy),w(KF),f&&t(bVe),f&&t(gd),w(cy),f&&t(vVe),f&&t(Do),w(fy),w(gy),w(eT),w(hy),w(tT),f&&t(FVe),f&&t(_d),w(py),f&&t(TVe),f&&t(Go),w(_y),w(by),w(nT),w(vy),w(vT),f&&t(MVe),f&&t(vd),w(Fy),f&&t(EVe),f&&t(Oo),w(Ty),w(Ey),w(TT),w(Cy),w(CT),f&&t(CVe),f&&t(Md),w(wy),f&&t(wVe),f&&t(Vo),w(Ay),w(yy),w(AT),w(xy),w(xT),f&&t(AVe),f&&t(wd),w($y),f&&t(LVe),f&&t(Xo),w(ky),w(Ry),w(kT),w(Py),w(OT),f&&t(yVe),f&&t(yd),w(By),f&&t(xVe),f&&t(zo),w(Iy),w(qy),w(XT),w(jy),w(YT),f&&t($Ve),f&&t(kd),w(Dy),f&&t(kVe),f&&t(Qo),w(Gy),w(Vy),w(ZT),w(Xy),w(f8),f&&t(SVe),f&&t(Pd),w(zy),f&&t(RVe),f&&t(Wo),w(Qy),w(Hy),w(g8),w(Uy),w(u8),f&&t(PVe),f&&t(Nd),w(Yy),f&&t(BVe),f&&t(Ho),w(Ky),w(e9),w(v8),w(o9),w(A8),f&&t(IVe),f&&t(Dd),w(r9),f&&t(NVe),f&&t(Uo),w(t9),w(n9),w(y8),w(s9),w(R8),f&&t(qVe),f&&t(Xd),w(l9),f&&t(jVe),f&&t(Jo),w(i9),w(c9),w(B8),w(f9),w(j8),f&&t(DVe),f&&t(Wd),w(g9),f&&t(GVe),f&&t(Yo),w(h9),w(_9),w(G8),w(u9),w(X8),f&&t(OVe),f&&t(Jd),w(b9),f&&t(VVe),f&&t(Ko),w(v9),w(T9),w(Q8),w(M9),w(K8),f&&t(XVe),f&&t(Zd),w(E9),f&&t(zVe),f&&t(Zo),w(C9),w(A9),w(eM),w(L9),w(tM),f&&t(QVe),f&&t(rc),w(y9),f&&t(WVe),f&&t(er),w(x9),w(k9),w(nM),w(S9),w(KM),f&&t(HVe),f&&t(nc),w(R9),f&&t(UVe),f&&t(or),w(P9),w(I9),w(e4),w(N9),w(C4),f&&t(JVe),f&&t(ic),w(q9),f&&t(YVe),f&&t(rr),w(j9),w(G9),w(A4),w(O9),w(D4),f&&t(KVe),f&&t(fc),w(V9),f&&t(ZVe),f&&t(tr),w(X9),w(Q9),w(O4),w(W9),w(W4),f&&t(eXe),f&&t(hc),w(H9),f&&t(oXe),f&&t(ar),w(U9),w(Y9),w(U4),w(K9),w(_E),f&&t(rXe),f&&t(uc),w(Z9),f&&t(tXe),f&&t(nr),w(ex),w(rx),w(bE),w(tx),w(xE),f&&t(aXe),f&&t(Fc),w(ax),f&&t(nXe),f&&t(sr),w(nx),w(lx),w(kE),w(ix),w(aC),f&&t(sXe),f&&t(Ec),w(dx),f&&t(lXe),f&&t(lr),w(cx),w(mx),w(sC),w(gx),w(CC),f&&t(iXe),f&&t(Ac),w(hx),f&&t(dXe),f&&t(ir),w(px),w(ux),w(AC),w(bx),w(xC),f&&t(cXe),f&&t(xc),w(Fx),f&&t(fXe),f&&t(dr),w(Tx),w(Ex),w(kC),w(Cx),w(RC),f&&t(mXe),f&&t(Sc),w(wx),f&&t(gXe),f&&t(cr),w(Ax),w(yx),w(BC),w(xx),w(r3),f&&t(hXe),f&&t(Bc),w($x),f&&t(pXe),f&&t(fr),w(kx),w(Rx),w(a3),w(Px),w(w3),f&&t(_Xe),f&&t(qc),w(Bx),f&&t(uXe),f&&t(mr),w(Ix),w(qx),w(L3),w(jx),w(x3),f&&t(bXe),f&&t(Gc),w(Dx),f&&t(vXe),f&&t(gr),w(Gx),w(Vx),w(k3),w(Xx),w(R3),f&&t(FXe),f&&t(Xc),w(zx),f&&t(TXe),f&&t(hr),w(Qx),w(Hx),w(B3),w(Ux),w(d5),f&&t(MXe),f&&t(Wc),w(Jx),f&&t(EXe),f&&t(pr),w(Yx),w(Zx),w(f5),w(e$),w(M5),f&&t(CXe),f&&t(Jc),w(o$),f&&t(wXe),f&&t(_r),w(r$),w(a$),w(C5),w(n$),w(q5),f&&t(AXe),f&&t(Zc),w(s$),f&&t(LXe),f&&t(ur),w(l$),w(d$),w(D5),w(c$),w(Y5),f&&t(yXe),f&&t(rf),w(f$),f&&t(xXe),f&&t(br),w(m$),w(h$),w(Z5),w(p$),w(c0),f&&t($Xe),f&&t(nf),w(_$),f&&t(kXe),f&&t(vr),w(u$),w(v$),w(m0),w(F$),w(E0),f&&t(SXe),f&&t(df),w(T$),f&&t(RXe),f&&t(Fr),w(M$),w(C$),w(w0),w(w$),w(I0),f&&t(PXe),f&&t(mf),w(A$),f&&t(BXe),f&&t(Tr),w(L$),w(x$),w(q0),w($$),w(W0),f&&t(IXe),f&&t(pf),w(k$),f&&t(NXe),f&&t(Mr),w(S$),w(P$),w(U0),w(B$),w(aw),f&&t(qXe),f&&t(bf),w(I$),f&&t(jXe),f&&t(Er),w(N$),w(j$),w(sw),w(D$),w(iw),f&&t(DXe),f&&t(Tf),w(G$),f&&t(GXe),f&&t(Cr),w(O$),w(X$),w(cw),w(z$),w(gw),f&&t(OXe),f&&t(Cf),w(W$),f&&t(VXe),f&&t(wr),w(H$),w(J$),w(pw),w(Y$),w(uw)}}}const gzt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function hzt($){return mVt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Tzt extends iVt{constructor(g){super();dVt(this,g,hzt,mzt,cVt,{})}}export{Tzt as default,gzt as metadata};
