import{S as iDt,i as dDt,s as cDt,e as a,k as l,w as F,t as o,M as fDt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as mDt,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as VYr}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as re}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function gDt(x){let g,v,p,m,_,d,h,Eo,Ti,yf,at,Mi,Ei,C6,xf,Oe,Qe,Ci,Sn,w6,Rn,Pn,A6,wi,Bn,L6,Ai,$f,ya;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Eo=o(`, make sure its
`),Ti=a("code"),yf=o("model_type"),at=o(" attribute is set to the same key you use when registering the config (here "),Mi=a("code"),Ei=o('"new-model"'),C6=o(")."),xf=l(),Oe=a("p"),Qe=o("Likewise, if your "),Ci=a("code"),Sn=o("NewModel"),w6=o(" is a subclass of "),Rn=a("a"),Pn=o("PreTrainedModel"),A6=o(`, make sure its
`),wi=a("code"),Bn=o("config_class"),L6=o(` attribute is set to the same class you use when registering the model (here
`),Ai=a("code"),$f=o("NewModelConfig"),ya=o(")."),this.h()},l(We){g=n(We,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var oS=s(p);m=r(oS,"NewModelConfig"),oS.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var Li=s(d);h=r(Li,"PretrainedConfig"),Li.forEach(t),Eo=r(Ae,`, make sure its
`),Ti=n(Ae,"CODE",{});var rS=s(Ti);yf=r(rS,"model_type"),rS.forEach(t),at=r(Ae," attribute is set to the same key you use when registering the config (here "),Mi=n(Ae,"CODE",{});var tS=s(Mi);Ei=r(tS,'"new-model"'),tS.forEach(t),C6=r(Ae,")."),Ae.forEach(t),xf=i(We),Oe=n(We,"P",{});var Co=s(Oe);Qe=r(Co,"Likewise, if your "),Ci=n(Co,"CODE",{});var xa=s(Ci);Sn=r(xa,"NewModel"),xa.forEach(t),w6=r(Co," is a subclass of "),Rn=n(Co,"A",{href:!0});var aS=s(Rn);Pn=r(aS,"PreTrainedModel"),aS.forEach(t),A6=r(Co,`, make sure its
`),wi=n(Co,"CODE",{});var kf=s(wi);Bn=r(kf,"config_class"),kf.forEach(t),L6=r(Co,` attribute is set to the same class you use when registering the model (here
`),Ai=n(Co,"CODE",{});var nS=s(Ai);$f=r(nS,"NewModelConfig"),nS.forEach(t),ya=r(Co,")."),Co.forEach(t),this.h()},h(){c(Rn,"href","/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel")},m(We,Ae){b(We,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Eo),e(g,Ti),e(Ti,yf),e(g,at),e(g,Mi),e(Mi,Ei),e(g,C6),b(We,xf,Ae),b(We,Oe,Ae),e(Oe,Qe),e(Oe,Ci),e(Ci,Sn),e(Oe,w6),e(Oe,Rn),e(Rn,Pn),e(Oe,A6),e(Oe,wi),e(wi,Bn),e(Oe,L6),e(Oe,Ai),e(Ai,$f),e(Oe,ya)},d(We){We&&t(g),We&&t(xf),We&&t(Oe)}}}function hDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Dt(x){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Eo=s(p);m=r(Eo,"use_auth_token=True"),Eo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function uDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bDt(x){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Eo=s(p);m=r(Eo,"use_auth_token=True"),Eo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function vDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ADt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Dt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ODt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Gt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Gt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mOt(x){let g,v,p,m,_,d,h,Eo,Ti,yf,at,Mi,Ei,C6,xf,Oe,Qe,Ci,Sn,w6,Rn,Pn,A6,wi,Bn,L6,Ai,$f,ya,We,Ae,oS,Li,rS,tS,Co,xa,aS,kf,nS,Jze,BGe,yi,Sf,cte,y6,Yze,fte,Kze,IGe,In,Zze,mte,eQe,oQe,gte,rQe,tQe,NGe,x6,qGe,sS,aQe,jGe,Rf,DGe,xi,Pf,hte,$6,nQe,pte,sQe,GGe,wo,k6,lQe,S6,iQe,lS,dQe,cQe,fQe,R6,mQe,_te,gQe,hQe,pQe,wr,P6,_Qe,ute,uQe,bQe,$i,vQe,bte,FQe,TQe,vte,MQe,EQe,CQe,A,Bf,Fte,wQe,AQe,iS,LQe,yQe,xQe,If,Tte,$Qe,kQe,dS,SQe,RQe,PQe,Nf,Mte,BQe,IQe,cS,NQe,qQe,jQe,qf,Ete,DQe,GQe,fS,OQe,VQe,XQe,jf,Cte,zQe,QQe,mS,WQe,HQe,UQe,Df,wte,JQe,YQe,gS,KQe,ZQe,eWe,Gf,Ate,oWe,rWe,hS,tWe,aWe,nWe,Of,Lte,sWe,lWe,pS,iWe,dWe,cWe,Vf,yte,fWe,mWe,_S,gWe,hWe,pWe,Xf,xte,_We,uWe,uS,bWe,vWe,FWe,zf,$te,TWe,MWe,bS,EWe,CWe,wWe,Qf,kte,AWe,LWe,vS,yWe,xWe,$We,Wf,Ste,kWe,SWe,FS,RWe,PWe,BWe,Hf,Rte,IWe,NWe,TS,qWe,jWe,DWe,Uf,Pte,GWe,OWe,MS,VWe,XWe,zWe,Jf,Bte,QWe,WWe,ES,HWe,UWe,JWe,Yf,Ite,YWe,KWe,CS,ZWe,eHe,oHe,Kf,Nte,rHe,tHe,wS,aHe,nHe,sHe,Zf,qte,lHe,iHe,AS,dHe,cHe,fHe,em,jte,mHe,gHe,LS,hHe,pHe,_He,om,Dte,uHe,bHe,yS,vHe,FHe,THe,rm,Gte,MHe,EHe,xS,CHe,wHe,AHe,tm,Ote,LHe,yHe,$S,xHe,$He,kHe,am,Vte,SHe,RHe,kS,PHe,BHe,IHe,nm,Xte,NHe,qHe,SS,jHe,DHe,GHe,sm,zte,OHe,VHe,RS,XHe,zHe,QHe,lm,Qte,WHe,HHe,PS,UHe,JHe,YHe,im,Wte,KHe,ZHe,BS,eUe,oUe,rUe,dm,Hte,tUe,aUe,IS,nUe,sUe,lUe,cm,Ute,iUe,dUe,NS,cUe,fUe,mUe,fm,Jte,gUe,hUe,qS,pUe,_Ue,uUe,mm,Yte,bUe,vUe,jS,FUe,TUe,MUe,gm,Kte,EUe,CUe,DS,wUe,AUe,LUe,hm,Zte,yUe,xUe,GS,$Ue,kUe,SUe,pm,eae,RUe,PUe,OS,BUe,IUe,NUe,_m,oae,qUe,jUe,VS,DUe,GUe,OUe,um,rae,VUe,XUe,XS,zUe,QUe,WUe,bm,tae,HUe,UUe,zS,JUe,YUe,KUe,vm,aae,ZUe,eJe,QS,oJe,rJe,tJe,Fm,nae,aJe,nJe,WS,sJe,lJe,iJe,Tm,sae,dJe,cJe,HS,fJe,mJe,gJe,Mm,lae,hJe,pJe,US,_Je,uJe,bJe,Em,iae,vJe,FJe,JS,TJe,MJe,EJe,Cm,dae,CJe,wJe,YS,AJe,LJe,yJe,wm,cae,xJe,$Je,KS,kJe,SJe,RJe,Am,fae,PJe,BJe,ZS,IJe,NJe,qJe,Lm,mae,jJe,DJe,eR,GJe,OJe,VJe,ym,gae,XJe,zJe,oR,QJe,WJe,HJe,xm,hae,UJe,JJe,rR,YJe,KJe,ZJe,$m,pae,eYe,oYe,tR,rYe,tYe,aYe,km,_ae,nYe,sYe,aR,lYe,iYe,dYe,Sm,uae,cYe,fYe,nR,mYe,gYe,hYe,Rm,bae,pYe,_Ye,sR,uYe,bYe,vYe,Pm,vae,FYe,TYe,lR,MYe,EYe,CYe,Bm,Fae,wYe,AYe,iR,LYe,yYe,xYe,Im,Tae,$Ye,kYe,dR,SYe,RYe,PYe,Nm,Mae,BYe,IYe,cR,NYe,qYe,jYe,qm,Eae,DYe,GYe,fR,OYe,VYe,XYe,jm,Cae,zYe,QYe,mR,WYe,HYe,UYe,Dm,wae,JYe,YYe,gR,KYe,ZYe,eKe,Gm,Aae,oKe,rKe,hR,tKe,aKe,nKe,Om,Lae,sKe,lKe,pR,iKe,dKe,cKe,Vm,yae,fKe,mKe,_R,gKe,hKe,pKe,Xm,xae,_Ke,uKe,uR,bKe,vKe,FKe,zm,$ae,TKe,MKe,bR,EKe,CKe,wKe,Qm,kae,AKe,LKe,vR,yKe,xKe,$Ke,Wm,Sae,kKe,SKe,FR,RKe,PKe,BKe,Hm,Rae,IKe,NKe,TR,qKe,jKe,DKe,Um,Pae,GKe,OKe,MR,VKe,XKe,zKe,Jm,Bae,QKe,WKe,ER,HKe,UKe,JKe,Ym,Iae,YKe,KKe,CR,ZKe,eZe,oZe,Km,Nae,rZe,tZe,wR,aZe,nZe,sZe,Zm,qae,lZe,iZe,AR,dZe,cZe,fZe,eg,jae,mZe,gZe,LR,hZe,pZe,_Ze,og,Dae,uZe,bZe,yR,vZe,FZe,TZe,rg,Gae,MZe,EZe,xR,CZe,wZe,AZe,tg,Oae,LZe,yZe,$R,xZe,$Ze,kZe,ag,Vae,SZe,RZe,kR,PZe,BZe,IZe,ng,Xae,NZe,qZe,SR,jZe,DZe,GZe,sg,zae,OZe,VZe,RR,XZe,zZe,QZe,lg,Qae,WZe,HZe,PR,UZe,JZe,YZe,ig,Wae,KZe,ZZe,BR,eeo,oeo,reo,dg,Hae,teo,aeo,IR,neo,seo,leo,cg,Uae,ieo,deo,NR,ceo,feo,meo,fg,Jae,geo,heo,qR,peo,_eo,ueo,mg,Yae,beo,veo,jR,Feo,Teo,Meo,gg,Kae,Eeo,Ceo,DR,weo,Aeo,Leo,hg,Zae,yeo,xeo,GR,$eo,keo,Seo,pg,ene,Reo,Peo,OR,Beo,Ieo,Neo,_g,one,qeo,jeo,VR,Deo,Geo,Oeo,ug,rne,Veo,Xeo,XR,zeo,Qeo,Weo,bg,tne,Heo,Ueo,zR,Jeo,Yeo,Keo,vg,ane,Zeo,eoo,QR,ooo,roo,too,Fg,nne,aoo,noo,WR,soo,loo,ioo,Tg,sne,doo,coo,HR,foo,moo,goo,Mg,lne,hoo,poo,UR,_oo,uoo,boo,Eg,ine,voo,Foo,JR,Too,Moo,Eoo,Cg,dne,Coo,woo,YR,Aoo,Loo,yoo,wg,cne,xoo,$oo,KR,koo,Soo,Roo,Ag,fne,Poo,Boo,ZR,Ioo,Noo,qoo,Lg,mne,joo,Doo,eP,Goo,Ooo,Voo,yg,gne,Xoo,zoo,oP,Qoo,Woo,Hoo,xg,hne,Uoo,Joo,rP,Yoo,Koo,Zoo,$g,pne,ero,oro,tP,rro,tro,aro,kg,_ne,nro,sro,aP,lro,iro,dro,Sg,une,cro,fro,nP,mro,gro,hro,Rg,bne,pro,_ro,sP,uro,bro,vro,Pg,vne,Fro,Tro,lP,Mro,Ero,Cro,Bg,Fne,wro,Aro,iP,Lro,yro,xro,Ig,Tne,$ro,kro,dP,Sro,Rro,Pro,Ng,Mne,Bro,Iro,cP,Nro,qro,jro,qg,Ene,Dro,Gro,fP,Oro,Vro,Xro,jg,Cne,zro,Qro,mP,Wro,Hro,Uro,Dg,wne,Jro,Yro,gP,Kro,Zro,eto,Gg,oto,Og,B6,rto,Ane,tto,OGe,ki,Vg,Lne,I6,ato,yne,nto,VGe,Ao,N6,sto,q6,lto,hP,ito,dto,cto,j6,fto,xne,mto,gto,hto,Ar,D6,pto,$ne,_to,uto,$a,bto,kne,vto,Fto,Sne,Tto,Mto,Rne,Eto,Cto,wto,k,Nn,Pne,Ato,Lto,pP,yto,xto,_P,$to,kto,Sto,qn,Bne,Rto,Pto,uP,Bto,Ito,bP,Nto,qto,jto,jn,Ine,Dto,Gto,vP,Oto,Vto,FP,Xto,zto,Qto,Xg,Nne,Wto,Hto,TP,Uto,Jto,Yto,Dn,qne,Kto,Zto,MP,eao,oao,EP,rao,tao,aao,zg,jne,nao,sao,CP,lao,iao,dao,Qg,Dne,cao,fao,wP,mao,gao,hao,Wg,Gne,pao,_ao,AP,uao,bao,vao,Gn,One,Fao,Tao,LP,Mao,Eao,yP,Cao,wao,Aao,On,Vne,Lao,yao,xP,xao,$ao,$P,kao,Sao,Rao,Vn,Xne,Pao,Bao,kP,Iao,Nao,SP,qao,jao,Dao,Hg,zne,Gao,Oao,RP,Vao,Xao,zao,Ug,Qne,Qao,Wao,PP,Hao,Uao,Jao,Jg,Wne,Yao,Kao,BP,Zao,eno,ono,Xn,Hne,rno,tno,IP,ano,nno,NP,sno,lno,ino,Yg,Une,dno,cno,qP,fno,mno,gno,zn,Jne,hno,pno,jP,_no,uno,DP,bno,vno,Fno,Qn,Yne,Tno,Mno,GP,Eno,Cno,OP,wno,Ano,Lno,Wn,Kne,yno,xno,VP,$no,kno,XP,Sno,Rno,Pno,Kg,Zne,Bno,Ino,zP,Nno,qno,jno,Hn,ese,Dno,Gno,QP,Ono,Vno,WP,Xno,zno,Qno,Un,ose,Wno,Hno,HP,Uno,Jno,UP,Yno,Kno,Zno,Jn,rse,eso,oso,JP,rso,tso,YP,aso,nso,sso,Yn,tse,lso,iso,KP,dso,cso,ZP,fso,mso,gso,Kn,ase,hso,pso,eB,_so,uso,oB,bso,vso,Fso,Zn,nse,Tso,Mso,rB,Eso,Cso,tB,wso,Aso,Lso,Zg,sse,yso,xso,aB,$so,kso,Sso,es,lse,Rso,Pso,nB,Bso,Iso,sB,Nso,qso,jso,eh,ise,Dso,Gso,lB,Oso,Vso,Xso,os,dse,zso,Qso,iB,Wso,Hso,dB,Uso,Jso,Yso,rs,cse,Kso,Zso,cB,elo,olo,fB,rlo,tlo,alo,ts,fse,nlo,slo,mB,llo,ilo,gB,dlo,clo,flo,oh,mse,mlo,glo,hB,hlo,plo,_lo,as,gse,ulo,blo,pB,vlo,Flo,_B,Tlo,Mlo,Elo,ns,hse,Clo,wlo,uB,Alo,Llo,bB,ylo,xlo,$lo,rh,pse,klo,Slo,vB,Rlo,Plo,Blo,ss,_se,Ilo,Nlo,FB,qlo,jlo,TB,Dlo,Glo,Olo,ls,use,Vlo,Xlo,MB,zlo,Qlo,EB,Wlo,Hlo,Ulo,is,bse,Jlo,Ylo,CB,Klo,Zlo,wB,eio,oio,rio,ds,vse,tio,aio,AB,nio,sio,LB,lio,iio,dio,cs,Fse,cio,fio,yB,mio,gio,xB,hio,pio,_io,fs,Tse,uio,bio,$B,vio,Fio,kB,Tio,Mio,Eio,ms,Mse,Cio,wio,SB,Aio,Lio,RB,yio,xio,$io,gs,Ese,kio,Sio,PB,Rio,Pio,BB,Bio,Iio,Nio,th,Cse,qio,jio,IB,Dio,Gio,Oio,hs,wse,Vio,Xio,NB,zio,Qio,qB,Wio,Hio,Uio,ah,Ase,Jio,Yio,jB,Kio,Zio,edo,nh,Lse,odo,rdo,DB,tdo,ado,ndo,ps,yse,sdo,ldo,GB,ido,ddo,OB,cdo,fdo,mdo,_s,xse,gdo,hdo,VB,pdo,_do,XB,udo,bdo,vdo,us,$se,Fdo,Tdo,zB,Mdo,Edo,QB,Cdo,wdo,Ado,sh,kse,Ldo,ydo,WB,xdo,$do,kdo,bs,Sse,Sdo,Rdo,HB,Pdo,Bdo,UB,Ido,Ndo,qdo,vs,Rse,jdo,Ddo,JB,Gdo,Odo,YB,Vdo,Xdo,zdo,Fs,Pse,Qdo,Wdo,KB,Hdo,Udo,ZB,Jdo,Ydo,Kdo,Ts,Bse,Zdo,eco,eI,oco,rco,oI,tco,aco,nco,Ms,Ise,sco,lco,rI,ico,dco,tI,cco,fco,mco,Es,Nse,gco,hco,aI,pco,_co,nI,uco,bco,vco,lh,qse,Fco,Tco,sI,Mco,Eco,Cco,Cs,jse,wco,Aco,lI,Lco,yco,iI,xco,$co,kco,ih,Dse,Sco,Rco,dI,Pco,Bco,Ico,dh,Gse,Nco,qco,cI,jco,Dco,Gco,ch,Ose,Oco,Vco,fI,Xco,zco,Qco,fh,Vse,Wco,Hco,mI,Uco,Jco,Yco,ws,Xse,Kco,Zco,gI,efo,ofo,hI,rfo,tfo,afo,mh,zse,nfo,sfo,pI,lfo,ifo,dfo,As,Qse,cfo,ffo,_I,mfo,gfo,uI,hfo,pfo,_fo,Ls,Wse,ufo,bfo,bI,vfo,Ffo,vI,Tfo,Mfo,Efo,ys,Hse,Cfo,wfo,FI,Afo,Lfo,TI,yfo,xfo,$fo,xs,Use,kfo,Sfo,MI,Rfo,Pfo,EI,Bfo,Ifo,Nfo,$s,Jse,qfo,jfo,CI,Dfo,Gfo,wI,Ofo,Vfo,Xfo,ks,Yse,zfo,Qfo,AI,Wfo,Hfo,LI,Ufo,Jfo,Yfo,gh,Kse,Kfo,Zfo,yI,emo,omo,rmo,hh,Zse,tmo,amo,xI,nmo,smo,lmo,Ss,ele,imo,dmo,$I,cmo,fmo,kI,mmo,gmo,hmo,Rs,ole,pmo,_mo,SI,umo,bmo,RI,vmo,Fmo,Tmo,Ps,rle,Mmo,Emo,PI,Cmo,wmo,BI,Amo,Lmo,ymo,ph,tle,xmo,$mo,II,kmo,Smo,Rmo,_h,ale,Pmo,Bmo,NI,Imo,Nmo,qmo,uh,nle,jmo,Dmo,qI,Gmo,Omo,Vmo,Bs,sle,Xmo,zmo,jI,Qmo,Wmo,DI,Hmo,Umo,Jmo,Is,lle,Ymo,Kmo,GI,Zmo,ego,OI,ogo,rgo,tgo,bh,ile,ago,ngo,VI,sgo,lgo,igo,vh,dle,dgo,cgo,XI,fgo,mgo,ggo,Fh,cle,hgo,pgo,zI,_go,ugo,bgo,Ns,fle,vgo,Fgo,QI,Tgo,Mgo,WI,Ego,Cgo,wgo,Th,mle,Ago,Lgo,HI,ygo,xgo,$go,Mh,gle,kgo,Sgo,UI,Rgo,Pgo,Bgo,qs,hle,Igo,Ngo,JI,qgo,jgo,YI,Dgo,Ggo,Ogo,js,ple,Vgo,Xgo,KI,zgo,Qgo,ZI,Wgo,Hgo,Ugo,Ds,_le,Jgo,Ygo,eN,Kgo,Zgo,oN,eho,oho,rho,Gs,ule,tho,aho,rN,nho,sho,tN,lho,iho,dho,Eh,cho,Ch,G6,fho,ble,mho,XGe,Si,wh,vle,O6,gho,Fle,hho,zGe,Lo,V6,pho,X6,_ho,aN,uho,bho,vho,z6,Fho,Tle,Tho,Mho,Eho,He,Q6,Cho,Mle,who,Aho,ka,Lho,Ele,yho,xho,Cle,$ho,kho,wle,Sho,Rho,Pho,Y,Ah,Ale,Bho,Iho,nN,Nho,qho,jho,Lh,Lle,Dho,Gho,sN,Oho,Vho,Xho,yh,yle,zho,Qho,lN,Who,Hho,Uho,xh,xle,Jho,Yho,iN,Kho,Zho,epo,$h,$le,opo,rpo,dN,tpo,apo,npo,kh,kle,spo,lpo,cN,ipo,dpo,cpo,Sh,Sle,fpo,mpo,fN,gpo,hpo,ppo,Rh,Rle,_po,upo,mN,bpo,vpo,Fpo,Ph,Ple,Tpo,Mpo,gN,Epo,Cpo,wpo,Bh,Ble,Apo,Lpo,hN,ypo,xpo,$po,Ih,Ile,kpo,Spo,pN,Rpo,Ppo,Bpo,Nh,Nle,Ipo,Npo,_N,qpo,jpo,Dpo,qh,qle,Gpo,Opo,uN,Vpo,Xpo,zpo,jh,jle,Qpo,Wpo,bN,Hpo,Upo,Jpo,Dh,Dle,Ypo,Kpo,vN,Zpo,e_o,o_o,Gh,Gle,r_o,t_o,FN,a_o,n_o,s_o,Oh,Ole,l_o,i_o,TN,d_o,c_o,f_o,Vh,Vle,m_o,g_o,MN,h_o,p_o,__o,Xh,Xle,u_o,b_o,EN,v_o,F_o,T_o,zh,zle,M_o,E_o,CN,C_o,w_o,A_o,Qh,Qle,L_o,y_o,wN,x_o,$_o,k_o,Wh,Wle,S_o,R_o,AN,P_o,B_o,I_o,Hh,Hle,N_o,q_o,LN,j_o,D_o,G_o,Uh,Ule,O_o,V_o,yN,X_o,z_o,Q_o,Jh,Jle,W_o,H_o,xN,U_o,J_o,Y_o,Yh,Yle,K_o,Z_o,$N,euo,ouo,ruo,Kh,Kle,tuo,auo,kN,nuo,suo,luo,Zh,Zle,iuo,duo,SN,cuo,fuo,muo,ep,eie,guo,huo,RN,puo,_uo,uuo,op,oie,buo,vuo,PN,Fuo,Tuo,Muo,rp,rie,Euo,Cuo,BN,wuo,Auo,Luo,tp,tie,yuo,xuo,IN,$uo,kuo,Suo,ap,Ruo,np,Puo,sp,W6,Buo,aie,Iuo,QGe,Ri,lp,nie,H6,Nuo,sie,quo,WGe,yo,U6,juo,J6,Duo,NN,Guo,Ouo,Vuo,Y6,Xuo,lie,zuo,Quo,Wuo,Ue,K6,Huo,iie,Uuo,Juo,Pi,Yuo,die,Kuo,Zuo,cie,e7o,o7o,r7o,pe,ip,fie,t7o,a7o,qN,n7o,s7o,l7o,dp,mie,i7o,d7o,gie,c7o,f7o,m7o,cp,hie,g7o,h7o,jN,p7o,_7o,u7o,fp,pie,b7o,v7o,DN,F7o,T7o,M7o,mp,_ie,E7o,C7o,GN,w7o,A7o,L7o,gp,uie,y7o,x7o,ON,$7o,k7o,S7o,hp,bie,R7o,P7o,VN,B7o,I7o,N7o,pp,vie,q7o,j7o,XN,D7o,G7o,O7o,_p,Fie,V7o,X7o,zN,z7o,Q7o,W7o,up,Tie,H7o,U7o,QN,J7o,Y7o,K7o,bp,Mie,Z7o,e1o,WN,o1o,r1o,t1o,vp,Eie,a1o,n1o,HN,s1o,l1o,i1o,Fp,Cie,d1o,c1o,UN,f1o,m1o,g1o,Tp,wie,h1o,p1o,JN,_1o,u1o,b1o,Mp,Aie,v1o,F1o,YN,T1o,M1o,E1o,Ep,Lie,C1o,w1o,KN,A1o,L1o,y1o,Cp,yie,x1o,$1o,ZN,k1o,S1o,R1o,wp,P1o,Ap,B1o,Lp,Z6,I1o,xie,N1o,HGe,Bi,yp,$ie,eL,q1o,kie,j1o,UGe,xo,oL,D1o,Ii,G1o,eq,O1o,V1o,oq,X1o,z1o,Q1o,rL,W1o,Sie,H1o,U1o,J1o,nt,tL,Y1o,Rie,K1o,Z1o,Ni,e2o,Pie,o2o,r2o,rq,t2o,a2o,n2o,xp,s2o,Je,aL,l2o,Bie,i2o,d2o,Sa,c2o,Iie,f2o,m2o,Nie,g2o,h2o,qie,p2o,_2o,u2o,y,$p,jie,b2o,v2o,tq,F2o,T2o,M2o,kp,Die,E2o,C2o,aq,w2o,A2o,L2o,Sp,Gie,y2o,x2o,nq,$2o,k2o,S2o,Rp,Oie,R2o,P2o,sq,B2o,I2o,N2o,Pp,Vie,q2o,j2o,lq,D2o,G2o,O2o,Bp,Xie,V2o,X2o,iq,z2o,Q2o,W2o,Ip,zie,H2o,U2o,dq,J2o,Y2o,K2o,Np,Qie,Z2o,ebo,cq,obo,rbo,tbo,qp,Wie,abo,nbo,fq,sbo,lbo,ibo,jp,Hie,dbo,cbo,mq,fbo,mbo,gbo,Dp,Uie,hbo,pbo,gq,_bo,ubo,bbo,Gp,Jie,vbo,Fbo,hq,Tbo,Mbo,Ebo,Op,Yie,Cbo,wbo,pq,Abo,Lbo,ybo,Vp,Kie,xbo,$bo,_q,kbo,Sbo,Rbo,Xp,Zie,Pbo,Bbo,uq,Ibo,Nbo,qbo,zp,ede,jbo,Dbo,bq,Gbo,Obo,Vbo,Qp,ode,Xbo,zbo,vq,Qbo,Wbo,Hbo,Wp,rde,Ubo,Jbo,Fq,Ybo,Kbo,Zbo,Hp,tde,evo,ovo,Tq,rvo,tvo,avo,Up,ade,nvo,svo,Mq,lvo,ivo,dvo,Jp,nde,cvo,fvo,Eq,mvo,gvo,hvo,Yp,sde,pvo,_vo,Cq,uvo,bvo,vvo,Kp,lde,Fvo,Tvo,wq,Mvo,Evo,Cvo,Zp,ide,wvo,Avo,Aq,Lvo,yvo,xvo,e_,dde,$vo,kvo,Lq,Svo,Rvo,Pvo,o_,cde,Bvo,Ivo,yq,Nvo,qvo,jvo,r_,fde,Dvo,Gvo,xq,Ovo,Vvo,Xvo,t_,mde,zvo,Qvo,$q,Wvo,Hvo,Uvo,a_,gde,Jvo,Yvo,kq,Kvo,Zvo,eFo,n_,hde,oFo,rFo,Sq,tFo,aFo,nFo,s_,pde,sFo,lFo,Rq,iFo,dFo,cFo,l_,_de,fFo,mFo,Pq,gFo,hFo,pFo,i_,ude,_Fo,uFo,Bq,bFo,vFo,FFo,Os,bde,TFo,MFo,Iq,EFo,CFo,Nq,wFo,AFo,LFo,d_,vde,yFo,xFo,qq,$Fo,kFo,SFo,c_,Fde,RFo,PFo,jq,BFo,IFo,NFo,f_,Tde,qFo,jFo,Dq,DFo,GFo,OFo,m_,Mde,VFo,XFo,Gq,zFo,QFo,WFo,g_,Ede,HFo,UFo,Oq,JFo,YFo,KFo,h_,Cde,ZFo,eTo,Vq,oTo,rTo,tTo,p_,wde,aTo,nTo,Xq,sTo,lTo,iTo,__,Ade,dTo,cTo,zq,fTo,mTo,gTo,u_,Lde,hTo,pTo,Qq,_To,uTo,bTo,b_,yde,vTo,FTo,Wq,TTo,MTo,ETo,v_,xde,CTo,wTo,Hq,ATo,LTo,yTo,F_,$de,xTo,$To,Uq,kTo,STo,RTo,T_,kde,PTo,BTo,Jq,ITo,NTo,qTo,M_,Sde,jTo,DTo,Yq,GTo,OTo,VTo,E_,Rde,XTo,zTo,Kq,QTo,WTo,HTo,C_,Pde,UTo,JTo,Zq,YTo,KTo,ZTo,w_,Bde,e8o,o8o,ej,r8o,t8o,a8o,A_,Ide,n8o,s8o,oj,l8o,i8o,d8o,L_,Nde,c8o,f8o,rj,m8o,g8o,h8o,y_,qde,p8o,_8o,tj,u8o,b8o,v8o,x_,jde,F8o,T8o,aj,M8o,E8o,C8o,$_,Dde,w8o,A8o,nj,L8o,y8o,x8o,k_,Gde,$8o,k8o,sj,S8o,R8o,P8o,S_,Ode,B8o,I8o,lj,N8o,q8o,j8o,R_,Vde,D8o,G8o,ij,O8o,V8o,X8o,P_,Xde,z8o,Q8o,dj,W8o,H8o,U8o,B_,zde,J8o,Y8o,cj,K8o,Z8o,eMo,I_,Qde,oMo,rMo,fj,tMo,aMo,nMo,N_,Wde,sMo,lMo,mj,iMo,dMo,cMo,q_,Hde,fMo,mMo,gj,gMo,hMo,pMo,j_,Ude,_Mo,uMo,hj,bMo,vMo,FMo,D_,Jde,TMo,MMo,pj,EMo,CMo,wMo,G_,Yde,AMo,LMo,_j,yMo,xMo,$Mo,O_,Kde,kMo,SMo,uj,RMo,PMo,BMo,V_,Zde,IMo,NMo,bj,qMo,jMo,DMo,X_,ece,GMo,OMo,vj,VMo,XMo,zMo,z_,oce,QMo,WMo,Fj,HMo,UMo,JMo,Q_,rce,YMo,KMo,Tj,ZMo,eEo,oEo,W_,tce,rEo,tEo,Mj,aEo,nEo,sEo,H_,ace,lEo,iEo,Ej,dEo,cEo,fEo,U_,nce,mEo,gEo,Cj,hEo,pEo,_Eo,J_,sce,uEo,bEo,wj,vEo,FEo,TEo,Y_,lce,MEo,EEo,Aj,CEo,wEo,AEo,K_,ice,LEo,yEo,Lj,xEo,$Eo,kEo,Z_,dce,SEo,REo,yj,PEo,BEo,IEo,eu,cce,NEo,qEo,xj,jEo,DEo,GEo,ou,fce,OEo,VEo,$j,XEo,zEo,QEo,ru,mce,WEo,HEo,kj,UEo,JEo,YEo,tu,gce,KEo,ZEo,Sj,e4o,o4o,r4o,au,hce,t4o,a4o,Rj,n4o,s4o,l4o,nu,pce,i4o,d4o,Pj,c4o,f4o,m4o,su,_ce,g4o,h4o,Bj,p4o,_4o,u4o,lu,uce,b4o,v4o,Ij,F4o,T4o,M4o,iu,bce,E4o,C4o,Nj,w4o,A4o,L4o,du,vce,y4o,x4o,qj,$4o,k4o,S4o,cu,Fce,R4o,P4o,jj,B4o,I4o,N4o,fu,Tce,q4o,j4o,Dj,D4o,G4o,O4o,mu,Mce,V4o,X4o,Gj,z4o,Q4o,W4o,gu,Ece,H4o,U4o,Oj,J4o,Y4o,K4o,hu,Cce,Z4o,eCo,Vj,oCo,rCo,tCo,pu,wce,aCo,nCo,Xj,sCo,lCo,iCo,_u,Ace,dCo,cCo,zj,fCo,mCo,gCo,uu,Lce,hCo,pCo,Qj,_Co,uCo,bCo,bu,yce,vCo,FCo,Wj,TCo,MCo,ECo,vu,xce,CCo,wCo,Hj,ACo,LCo,yCo,Fu,$ce,xCo,$Co,Uj,kCo,SCo,RCo,Tu,kce,PCo,BCo,Jj,ICo,NCo,qCo,Mu,Sce,jCo,DCo,Yj,GCo,OCo,VCo,Eu,Rce,XCo,zCo,Kj,QCo,WCo,HCo,Cu,Pce,UCo,JCo,Zj,YCo,KCo,ZCo,wu,Bce,e5o,o5o,eD,r5o,t5o,a5o,Au,Ice,n5o,s5o,oD,l5o,i5o,d5o,Lu,Nce,c5o,f5o,rD,m5o,g5o,h5o,yu,p5o,qce,_5o,u5o,jce,b5o,v5o,xu,JGe,qi,$u,Dce,nL,F5o,Gce,T5o,YGe,$o,sL,M5o,ji,E5o,tD,C5o,w5o,aD,A5o,L5o,y5o,lL,x5o,Oce,$5o,k5o,S5o,st,iL,R5o,Vce,P5o,B5o,Di,I5o,Xce,N5o,q5o,nD,j5o,D5o,G5o,ku,O5o,Ye,dL,V5o,zce,X5o,z5o,Ra,Q5o,Qce,W5o,H5o,Wce,U5o,J5o,Hce,Y5o,K5o,Z5o,G,Su,Uce,e3o,o3o,sD,r3o,t3o,a3o,Ru,Jce,n3o,s3o,lD,l3o,i3o,d3o,Pu,Yce,c3o,f3o,iD,m3o,g3o,h3o,Bu,Kce,p3o,_3o,dD,u3o,b3o,v3o,Iu,Zce,F3o,T3o,cD,M3o,E3o,C3o,Nu,efe,w3o,A3o,fD,L3o,y3o,x3o,qu,ofe,$3o,k3o,mD,S3o,R3o,P3o,ju,rfe,B3o,I3o,gD,N3o,q3o,j3o,Du,tfe,D3o,G3o,hD,O3o,V3o,X3o,Gu,afe,z3o,Q3o,pD,W3o,H3o,U3o,Ou,nfe,J3o,Y3o,_D,K3o,Z3o,e0o,Vu,sfe,o0o,r0o,uD,t0o,a0o,n0o,Xu,lfe,s0o,l0o,bD,i0o,d0o,c0o,zu,ife,f0o,m0o,vD,g0o,h0o,p0o,Qu,dfe,_0o,u0o,FD,b0o,v0o,F0o,Wu,cfe,T0o,M0o,TD,E0o,C0o,w0o,Hu,ffe,A0o,L0o,MD,y0o,x0o,$0o,Uu,mfe,k0o,S0o,ED,R0o,P0o,B0o,Ju,gfe,I0o,N0o,CD,q0o,j0o,D0o,Yu,hfe,G0o,O0o,wD,V0o,X0o,z0o,Ku,pfe,Q0o,W0o,AD,H0o,U0o,J0o,Zu,_fe,Y0o,K0o,LD,Z0o,ewo,owo,e7,ufe,rwo,two,yD,awo,nwo,swo,o7,bfe,lwo,iwo,xD,dwo,cwo,fwo,r7,vfe,mwo,gwo,$D,hwo,pwo,_wo,t7,Ffe,uwo,bwo,kD,vwo,Fwo,Two,a7,Tfe,Mwo,Ewo,SD,Cwo,wwo,Awo,n7,Mfe,Lwo,ywo,RD,xwo,$wo,kwo,s7,Efe,Swo,Rwo,PD,Pwo,Bwo,Iwo,l7,Cfe,Nwo,qwo,BD,jwo,Dwo,Gwo,i7,wfe,Owo,Vwo,ID,Xwo,zwo,Qwo,d7,Afe,Wwo,Hwo,ND,Uwo,Jwo,Ywo,c7,Lfe,Kwo,Zwo,qD,eAo,oAo,rAo,f7,yfe,tAo,aAo,jD,nAo,sAo,lAo,m7,xfe,iAo,dAo,DD,cAo,fAo,mAo,g7,$fe,gAo,hAo,GD,pAo,_Ao,uAo,h7,kfe,bAo,vAo,OD,FAo,TAo,MAo,p7,Sfe,EAo,CAo,VD,wAo,AAo,LAo,_7,Rfe,yAo,xAo,XD,$Ao,kAo,SAo,u7,Pfe,RAo,PAo,zD,BAo,IAo,NAo,b7,Bfe,qAo,jAo,QD,DAo,GAo,OAo,v7,Ife,VAo,XAo,WD,zAo,QAo,WAo,F7,Nfe,HAo,UAo,HD,JAo,YAo,KAo,T7,qfe,ZAo,e6o,UD,o6o,r6o,t6o,M7,a6o,jfe,n6o,s6o,Dfe,l6o,i6o,E7,KGe,Gi,C7,Gfe,cL,d6o,Ofe,c6o,ZGe,ko,fL,f6o,Oi,m6o,JD,g6o,h6o,YD,p6o,_6o,u6o,mL,b6o,Vfe,v6o,F6o,T6o,lt,gL,M6o,Xfe,E6o,C6o,Vi,w6o,zfe,A6o,L6o,KD,y6o,x6o,$6o,w7,k6o,Ke,hL,S6o,Qfe,R6o,P6o,Pa,B6o,Wfe,I6o,N6o,Hfe,q6o,j6o,Ufe,D6o,G6o,O6o,z,A7,Jfe,V6o,X6o,ZD,z6o,Q6o,W6o,L7,Yfe,H6o,U6o,eG,J6o,Y6o,K6o,y7,Kfe,Z6o,eLo,oG,oLo,rLo,tLo,x7,Zfe,aLo,nLo,rG,sLo,lLo,iLo,$7,eme,dLo,cLo,tG,fLo,mLo,gLo,k7,ome,hLo,pLo,aG,_Lo,uLo,bLo,S7,rme,vLo,FLo,nG,TLo,MLo,ELo,R7,tme,CLo,wLo,sG,ALo,LLo,yLo,P7,ame,xLo,$Lo,lG,kLo,SLo,RLo,B7,nme,PLo,BLo,iG,ILo,NLo,qLo,I7,sme,jLo,DLo,dG,GLo,OLo,VLo,N7,lme,XLo,zLo,cG,QLo,WLo,HLo,q7,ime,ULo,JLo,fG,YLo,KLo,ZLo,j7,dme,eyo,oyo,mG,ryo,tyo,ayo,D7,cme,nyo,syo,gG,lyo,iyo,dyo,G7,fme,cyo,fyo,hG,myo,gyo,hyo,O7,mme,pyo,_yo,pG,uyo,byo,vyo,V7,gme,Fyo,Tyo,_G,Myo,Eyo,Cyo,X7,hme,wyo,Ayo,uG,Lyo,yyo,xyo,z7,pme,$yo,kyo,bG,Syo,Ryo,Pyo,Q7,_me,Byo,Iyo,vG,Nyo,qyo,jyo,W7,ume,Dyo,Gyo,FG,Oyo,Vyo,Xyo,H7,bme,zyo,Qyo,TG,Wyo,Hyo,Uyo,U7,vme,Jyo,Yyo,MG,Kyo,Zyo,e9o,J7,Fme,o9o,r9o,EG,t9o,a9o,n9o,Y7,Tme,s9o,l9o,CG,i9o,d9o,c9o,K7,Mme,f9o,m9o,wG,g9o,h9o,p9o,Z7,Eme,_9o,u9o,AG,b9o,v9o,F9o,e1,Cme,T9o,M9o,LG,E9o,C9o,w9o,o1,wme,A9o,L9o,yG,y9o,x9o,$9o,r1,Ame,k9o,S9o,xG,R9o,P9o,B9o,t1,Lme,I9o,N9o,$G,q9o,j9o,D9o,a1,yme,G9o,O9o,kG,V9o,X9o,z9o,n1,xme,Q9o,W9o,SG,H9o,U9o,J9o,s1,$me,Y9o,K9o,RG,Z9o,exo,oxo,l1,kme,rxo,txo,PG,axo,nxo,sxo,i1,Sme,lxo,ixo,BG,dxo,cxo,fxo,d1,Rme,mxo,gxo,IG,hxo,pxo,_xo,c1,Pme,uxo,bxo,NG,vxo,Fxo,Txo,f1,Mxo,Bme,Exo,Cxo,Ime,wxo,Axo,m1,eOe,Xi,g1,Nme,pL,Lxo,qme,yxo,oOe,So,_L,xxo,zi,$xo,qG,kxo,Sxo,jG,Rxo,Pxo,Bxo,uL,Ixo,jme,Nxo,qxo,jxo,it,bL,Dxo,Dme,Gxo,Oxo,Qi,Vxo,Gme,Xxo,zxo,DG,Qxo,Wxo,Hxo,h1,Uxo,Ze,vL,Jxo,Ome,Yxo,Kxo,Ba,Zxo,Vme,e$o,o$o,Xme,r$o,t$o,zme,a$o,n$o,s$o,W,p1,Qme,l$o,i$o,GG,d$o,c$o,f$o,_1,Wme,m$o,g$o,OG,h$o,p$o,_$o,u1,Hme,u$o,b$o,VG,v$o,F$o,T$o,b1,Ume,M$o,E$o,XG,C$o,w$o,A$o,v1,Jme,L$o,y$o,zG,x$o,$$o,k$o,F1,Yme,S$o,R$o,QG,P$o,B$o,I$o,T1,Kme,N$o,q$o,WG,j$o,D$o,G$o,M1,Zme,O$o,V$o,HG,X$o,z$o,Q$o,E1,ege,W$o,H$o,UG,U$o,J$o,Y$o,C1,oge,K$o,Z$o,JG,eko,oko,rko,w1,rge,tko,ako,YG,nko,sko,lko,A1,tge,iko,dko,KG,cko,fko,mko,L1,age,gko,hko,ZG,pko,_ko,uko,y1,nge,bko,vko,eO,Fko,Tko,Mko,x1,sge,Eko,Cko,oO,wko,Ako,Lko,$1,lge,yko,xko,rO,$ko,kko,Sko,k1,ige,Rko,Pko,tO,Bko,Iko,Nko,S1,dge,qko,jko,aO,Dko,Gko,Oko,R1,cge,Vko,Xko,nO,zko,Qko,Wko,P1,fge,Hko,Uko,sO,Jko,Yko,Kko,B1,mge,Zko,eSo,lO,oSo,rSo,tSo,I1,gge,aSo,nSo,iO,sSo,lSo,iSo,N1,hge,dSo,cSo,dO,fSo,mSo,gSo,q1,pge,hSo,pSo,cO,_So,uSo,bSo,j1,_ge,vSo,FSo,fO,TSo,MSo,ESo,D1,uge,CSo,wSo,mO,ASo,LSo,ySo,G1,bge,xSo,$So,gO,kSo,SSo,RSo,O1,vge,PSo,BSo,hO,ISo,NSo,qSo,V1,Fge,jSo,DSo,pO,GSo,OSo,VSo,X1,Tge,XSo,zSo,_O,QSo,WSo,HSo,z1,Mge,USo,JSo,uO,YSo,KSo,ZSo,Q1,Ege,eRo,oRo,bO,rRo,tRo,aRo,W1,Cge,nRo,sRo,wge,lRo,iRo,dRo,H1,Age,cRo,fRo,vO,mRo,gRo,hRo,U1,Lge,pRo,_Ro,FO,uRo,bRo,vRo,J1,yge,FRo,TRo,TO,MRo,ERo,CRo,Y1,xge,wRo,ARo,MO,LRo,yRo,xRo,K1,$Ro,$ge,kRo,SRo,kge,RRo,PRo,Z1,rOe,Wi,e2,Sge,FL,BRo,Rge,IRo,tOe,Ro,TL,NRo,Hi,qRo,EO,jRo,DRo,CO,GRo,ORo,VRo,ML,XRo,Pge,zRo,QRo,WRo,dt,EL,HRo,Bge,URo,JRo,Ui,YRo,Ige,KRo,ZRo,wO,ePo,oPo,rPo,o2,tPo,eo,CL,aPo,Nge,nPo,sPo,Ia,lPo,qge,iPo,dPo,jge,cPo,fPo,Dge,mPo,gPo,hPo,he,r2,Gge,pPo,_Po,AO,uPo,bPo,vPo,t2,Oge,FPo,TPo,LO,MPo,EPo,CPo,a2,Vge,wPo,APo,yO,LPo,yPo,xPo,n2,Xge,$Po,kPo,xO,SPo,RPo,PPo,s2,zge,BPo,IPo,$O,NPo,qPo,jPo,l2,Qge,DPo,GPo,kO,OPo,VPo,XPo,i2,Wge,zPo,QPo,SO,WPo,HPo,UPo,d2,Hge,JPo,YPo,RO,KPo,ZPo,eBo,c2,Uge,oBo,rBo,PO,tBo,aBo,nBo,f2,Jge,sBo,lBo,BO,iBo,dBo,cBo,m2,Yge,fBo,mBo,IO,gBo,hBo,pBo,g2,Kge,_Bo,uBo,NO,bBo,vBo,FBo,h2,Zge,TBo,MBo,qO,EBo,CBo,wBo,p2,ehe,ABo,LBo,jO,yBo,xBo,$Bo,_2,ohe,kBo,SBo,DO,RBo,PBo,BBo,u2,rhe,IBo,NBo,GO,qBo,jBo,DBo,b2,the,GBo,OBo,OO,VBo,XBo,zBo,v2,ahe,QBo,WBo,VO,HBo,UBo,JBo,F2,YBo,nhe,KBo,ZBo,she,eIo,oIo,T2,aOe,Ji,M2,lhe,wL,rIo,ihe,tIo,nOe,Po,AL,aIo,Yi,nIo,XO,sIo,lIo,zO,iIo,dIo,cIo,LL,fIo,dhe,mIo,gIo,hIo,ct,yL,pIo,che,_Io,uIo,Ki,bIo,fhe,vIo,FIo,QO,TIo,MIo,EIo,E2,CIo,oo,xL,wIo,mhe,AIo,LIo,Na,yIo,ghe,xIo,$Io,hhe,kIo,SIo,phe,RIo,PIo,BIo,N,C2,_he,IIo,NIo,WO,qIo,jIo,DIo,w2,uhe,GIo,OIo,HO,VIo,XIo,zIo,A2,bhe,QIo,WIo,UO,HIo,UIo,JIo,L2,vhe,YIo,KIo,JO,ZIo,eNo,oNo,y2,Fhe,rNo,tNo,YO,aNo,nNo,sNo,x2,The,lNo,iNo,KO,dNo,cNo,fNo,$2,Mhe,mNo,gNo,ZO,hNo,pNo,_No,k2,Ehe,uNo,bNo,eV,vNo,FNo,TNo,S2,Che,MNo,ENo,oV,CNo,wNo,ANo,R2,whe,LNo,yNo,rV,xNo,$No,kNo,P2,Ahe,SNo,RNo,tV,PNo,BNo,INo,B2,Lhe,NNo,qNo,aV,jNo,DNo,GNo,I2,yhe,ONo,VNo,nV,XNo,zNo,QNo,N2,xhe,WNo,HNo,sV,UNo,JNo,YNo,q2,$he,KNo,ZNo,lV,eqo,oqo,rqo,j2,khe,tqo,aqo,iV,nqo,sqo,lqo,D2,She,iqo,dqo,dV,cqo,fqo,mqo,G2,Rhe,gqo,hqo,cV,pqo,_qo,uqo,O2,Phe,bqo,vqo,fV,Fqo,Tqo,Mqo,V2,Bhe,Eqo,Cqo,mV,wqo,Aqo,Lqo,X2,Ihe,yqo,xqo,gV,$qo,kqo,Sqo,z2,Nhe,Rqo,Pqo,hV,Bqo,Iqo,Nqo,Q2,qhe,qqo,jqo,pV,Dqo,Gqo,Oqo,W2,jhe,Vqo,Xqo,_V,zqo,Qqo,Wqo,H2,Dhe,Hqo,Uqo,uV,Jqo,Yqo,Kqo,U2,Ghe,Zqo,ejo,bV,ojo,rjo,tjo,J2,Ohe,ajo,njo,vV,sjo,ljo,ijo,Y2,Vhe,djo,cjo,FV,fjo,mjo,gjo,K2,Xhe,hjo,pjo,TV,_jo,ujo,bjo,Z2,zhe,vjo,Fjo,MV,Tjo,Mjo,Ejo,eb,Qhe,Cjo,wjo,EV,Ajo,Ljo,yjo,ob,Whe,xjo,$jo,CV,kjo,Sjo,Rjo,rb,Hhe,Pjo,Bjo,wV,Ijo,Njo,qjo,tb,Uhe,jjo,Djo,AV,Gjo,Ojo,Vjo,ab,Jhe,Xjo,zjo,LV,Qjo,Wjo,Hjo,nb,Yhe,Ujo,Jjo,yV,Yjo,Kjo,Zjo,sb,Khe,eDo,oDo,xV,rDo,tDo,aDo,lb,Zhe,nDo,sDo,$V,lDo,iDo,dDo,ib,epe,cDo,fDo,kV,mDo,gDo,hDo,db,ope,pDo,_Do,SV,uDo,bDo,vDo,cb,rpe,FDo,TDo,RV,MDo,EDo,CDo,fb,tpe,wDo,ADo,PV,LDo,yDo,xDo,mb,ape,$Do,kDo,BV,SDo,RDo,PDo,gb,npe,BDo,IDo,IV,NDo,qDo,jDo,hb,spe,DDo,GDo,NV,ODo,VDo,XDo,pb,lpe,zDo,QDo,qV,WDo,HDo,UDo,_b,ipe,JDo,YDo,jV,KDo,ZDo,eGo,ub,dpe,oGo,rGo,DV,tGo,aGo,nGo,bb,cpe,sGo,lGo,GV,iGo,dGo,cGo,vb,fGo,fpe,mGo,gGo,mpe,hGo,pGo,Fb,sOe,Zi,Tb,gpe,$L,_Go,hpe,uGo,lOe,Bo,kL,bGo,ed,vGo,OV,FGo,TGo,VV,MGo,EGo,CGo,SL,wGo,ppe,AGo,LGo,yGo,ft,RL,xGo,_pe,$Go,kGo,od,SGo,upe,RGo,PGo,XV,BGo,IGo,NGo,Mb,qGo,ro,PL,jGo,bpe,DGo,GGo,qa,OGo,vpe,VGo,XGo,Fpe,zGo,QGo,Tpe,WGo,HGo,UGo,Z,Eb,Mpe,JGo,YGo,zV,KGo,ZGo,eOo,Cb,Epe,oOo,rOo,QV,tOo,aOo,nOo,wb,Cpe,sOo,lOo,WV,iOo,dOo,cOo,Ab,wpe,fOo,mOo,HV,gOo,hOo,pOo,Lb,Ape,_Oo,uOo,UV,bOo,vOo,FOo,yb,Lpe,TOo,MOo,JV,EOo,COo,wOo,xb,ype,AOo,LOo,YV,yOo,xOo,$Oo,$b,xpe,kOo,SOo,KV,ROo,POo,BOo,kb,$pe,IOo,NOo,ZV,qOo,jOo,DOo,Sb,kpe,GOo,OOo,eX,VOo,XOo,zOo,Rb,Spe,QOo,WOo,oX,HOo,UOo,JOo,Pb,Rpe,YOo,KOo,rX,ZOo,eVo,oVo,Bb,Ppe,rVo,tVo,tX,aVo,nVo,sVo,Ib,Bpe,lVo,iVo,aX,dVo,cVo,fVo,Nb,Ipe,mVo,gVo,nX,hVo,pVo,_Vo,qb,Npe,uVo,bVo,sX,vVo,FVo,TVo,jb,qpe,MVo,EVo,lX,CVo,wVo,AVo,Db,jpe,LVo,yVo,iX,xVo,$Vo,kVo,Gb,Dpe,SVo,RVo,dX,PVo,BVo,IVo,Ob,Gpe,NVo,qVo,cX,jVo,DVo,GVo,Vb,Ope,OVo,VVo,fX,XVo,zVo,QVo,Xb,Vpe,WVo,HVo,mX,UVo,JVo,YVo,zb,Xpe,KVo,ZVo,gX,eXo,oXo,rXo,Qb,zpe,tXo,aXo,hX,nXo,sXo,lXo,Wb,Qpe,iXo,dXo,pX,cXo,fXo,mXo,Hb,Wpe,gXo,hXo,_X,pXo,_Xo,uXo,Ub,Hpe,bXo,vXo,uX,FXo,TXo,MXo,Jb,Upe,EXo,CXo,bX,wXo,AXo,LXo,Yb,Jpe,yXo,xXo,vX,$Xo,kXo,SXo,Kb,RXo,Ype,PXo,BXo,Kpe,IXo,NXo,Zb,iOe,rd,ev,Zpe,BL,qXo,e_e,jXo,dOe,Io,IL,DXo,td,GXo,FX,OXo,VXo,TX,XXo,zXo,QXo,NL,WXo,o_e,HXo,UXo,JXo,mt,qL,YXo,r_e,KXo,ZXo,ad,ezo,t_e,ozo,rzo,MX,tzo,azo,nzo,ov,szo,to,jL,lzo,a_e,izo,dzo,ja,czo,n_e,fzo,mzo,s_e,gzo,hzo,l_e,pzo,_zo,uzo,Zr,rv,i_e,bzo,vzo,EX,Fzo,Tzo,Mzo,tv,d_e,Ezo,Czo,CX,wzo,Azo,Lzo,av,c_e,yzo,xzo,wX,$zo,kzo,Szo,nv,f_e,Rzo,Pzo,AX,Bzo,Izo,Nzo,sv,m_e,qzo,jzo,LX,Dzo,Gzo,Ozo,lv,Vzo,g_e,Xzo,zzo,h_e,Qzo,Wzo,iv,cOe,nd,dv,p_e,DL,Hzo,__e,Uzo,fOe,No,GL,Jzo,sd,Yzo,yX,Kzo,Zzo,xX,eQo,oQo,rQo,OL,tQo,u_e,aQo,nQo,sQo,gt,VL,lQo,b_e,iQo,dQo,ld,cQo,v_e,fQo,mQo,$X,gQo,hQo,pQo,cv,_Qo,ao,XL,uQo,F_e,bQo,vQo,Da,FQo,T_e,TQo,MQo,M_e,EQo,CQo,E_e,wQo,AQo,LQo,U,fv,C_e,yQo,xQo,kX,$Qo,kQo,SQo,mv,w_e,RQo,PQo,SX,BQo,IQo,NQo,gv,A_e,qQo,jQo,RX,DQo,GQo,OQo,hv,L_e,VQo,XQo,PX,zQo,QQo,WQo,pv,y_e,HQo,UQo,BX,JQo,YQo,KQo,_v,x_e,ZQo,eWo,IX,oWo,rWo,tWo,uv,$_e,aWo,nWo,NX,sWo,lWo,iWo,bv,k_e,dWo,cWo,qX,fWo,mWo,gWo,vv,S_e,hWo,pWo,jX,_Wo,uWo,bWo,Fv,R_e,vWo,FWo,DX,TWo,MWo,EWo,Tv,P_e,CWo,wWo,GX,AWo,LWo,yWo,Mv,B_e,xWo,$Wo,OX,kWo,SWo,RWo,Ev,I_e,PWo,BWo,VX,IWo,NWo,qWo,Cv,N_e,jWo,DWo,XX,GWo,OWo,VWo,wv,q_e,XWo,zWo,zX,QWo,WWo,HWo,Av,j_e,UWo,JWo,QX,YWo,KWo,ZWo,Lv,D_e,eHo,oHo,WX,rHo,tHo,aHo,yv,G_e,nHo,sHo,HX,lHo,iHo,dHo,xv,O_e,cHo,fHo,UX,mHo,gHo,hHo,$v,V_e,pHo,_Ho,JX,uHo,bHo,vHo,kv,X_e,FHo,THo,YX,MHo,EHo,CHo,Sv,z_e,wHo,AHo,KX,LHo,yHo,xHo,Rv,Q_e,$Ho,kHo,ZX,SHo,RHo,PHo,Pv,W_e,BHo,IHo,ez,NHo,qHo,jHo,Bv,H_e,DHo,GHo,oz,OHo,VHo,XHo,Iv,U_e,zHo,QHo,rz,WHo,HHo,UHo,Nv,J_e,JHo,YHo,tz,KHo,ZHo,eUo,qv,Y_e,oUo,rUo,az,tUo,aUo,nUo,jv,K_e,sUo,lUo,nz,iUo,dUo,cUo,Dv,Z_e,fUo,mUo,sz,gUo,hUo,pUo,Gv,eue,_Uo,uUo,lz,bUo,vUo,FUo,Ov,oue,TUo,MUo,iz,EUo,CUo,wUo,Vv,rue,AUo,LUo,dz,yUo,xUo,$Uo,Xv,tue,kUo,SUo,cz,RUo,PUo,BUo,zv,aue,IUo,NUo,fz,qUo,jUo,DUo,Qv,GUo,nue,OUo,VUo,sue,XUo,zUo,Wv,mOe,id,Hv,lue,zL,QUo,iue,WUo,gOe,qo,QL,HUo,dd,UUo,mz,JUo,YUo,gz,KUo,ZUo,eJo,WL,oJo,due,rJo,tJo,aJo,ht,HL,nJo,cue,sJo,lJo,cd,iJo,fue,dJo,cJo,hz,fJo,mJo,gJo,Uv,hJo,no,UL,pJo,mue,_Jo,uJo,Ga,bJo,gue,vJo,FJo,hue,TJo,MJo,pue,EJo,CJo,wJo,V,Jv,_ue,AJo,LJo,pz,yJo,xJo,$Jo,Yv,uue,kJo,SJo,_z,RJo,PJo,BJo,Kv,bue,IJo,NJo,uz,qJo,jJo,DJo,Zv,vue,GJo,OJo,bz,VJo,XJo,zJo,eF,Fue,QJo,WJo,vz,HJo,UJo,JJo,oF,Tue,YJo,KJo,Fz,ZJo,eYo,oYo,rF,Mue,rYo,tYo,Tz,aYo,nYo,sYo,tF,Eue,lYo,iYo,Mz,dYo,cYo,fYo,aF,Cue,mYo,gYo,Ez,hYo,pYo,_Yo,nF,wue,uYo,bYo,Cz,vYo,FYo,TYo,sF,Aue,MYo,EYo,wz,CYo,wYo,AYo,lF,Lue,LYo,yYo,Az,xYo,$Yo,kYo,iF,yue,SYo,RYo,Lz,PYo,BYo,IYo,dF,xue,NYo,qYo,yz,jYo,DYo,GYo,cF,$ue,OYo,VYo,xz,XYo,zYo,QYo,fF,kue,WYo,HYo,$z,UYo,JYo,YYo,mF,Sue,KYo,ZYo,kz,eKo,oKo,rKo,gF,Rue,tKo,aKo,Sz,nKo,sKo,lKo,hF,Pue,iKo,dKo,Rz,cKo,fKo,mKo,pF,Bue,gKo,hKo,Pz,pKo,_Ko,uKo,_F,Iue,bKo,vKo,Bz,FKo,TKo,MKo,uF,Nue,EKo,CKo,Iz,wKo,AKo,LKo,bF,que,yKo,xKo,Nz,$Ko,kKo,SKo,vF,jue,RKo,PKo,qz,BKo,IKo,NKo,FF,Due,qKo,jKo,jz,DKo,GKo,OKo,TF,Gue,VKo,XKo,Dz,zKo,QKo,WKo,MF,Oue,HKo,UKo,Gz,JKo,YKo,KKo,EF,Vue,ZKo,eZo,Oz,oZo,rZo,tZo,CF,Xue,aZo,nZo,Vz,sZo,lZo,iZo,wF,zue,dZo,cZo,Xz,fZo,mZo,gZo,AF,Que,hZo,pZo,zz,_Zo,uZo,bZo,LF,Wue,vZo,FZo,Qz,TZo,MZo,EZo,yF,Hue,CZo,wZo,Wz,AZo,LZo,yZo,xF,Uue,xZo,$Zo,Hz,kZo,SZo,RZo,$F,Jue,PZo,BZo,Uz,IZo,NZo,qZo,kF,Yue,jZo,DZo,Jz,GZo,OZo,VZo,SF,Kue,XZo,zZo,Yz,QZo,WZo,HZo,RF,Zue,UZo,JZo,Kz,YZo,KZo,ZZo,PF,e7e,eer,oer,Zz,rer,ter,aer,BF,o7e,ner,ser,eQ,ler,ier,der,IF,r7e,cer,fer,oQ,mer,ger,her,NF,per,t7e,_er,uer,a7e,ber,ver,qF,hOe,fd,jF,n7e,JL,Fer,s7e,Ter,pOe,jo,YL,Mer,md,Eer,rQ,Cer,wer,tQ,Aer,Ler,yer,KL,xer,l7e,$er,ker,Ser,pt,ZL,Rer,i7e,Per,Ber,gd,Ier,d7e,Ner,qer,aQ,jer,Der,Ger,DF,Oer,so,ey,Ver,c7e,Xer,zer,Oa,Qer,f7e,Wer,Her,m7e,Uer,Jer,g7e,Yer,Ker,Zer,h7e,GF,p7e,eor,oor,nQ,ror,tor,aor,OF,nor,_7e,sor,lor,u7e,ior,dor,VF,_Oe,hd,XF,b7e,oy,cor,v7e,mor,uOe,Do,ry,gor,pd,hor,sQ,por,_or,lQ,uor,bor,vor,ty,For,F7e,Tor,Mor,Eor,_t,ay,Cor,T7e,wor,Aor,_d,Lor,M7e,yor,xor,iQ,$or,kor,Sor,zF,Ror,lo,ny,Por,E7e,Bor,Ior,Va,Nor,C7e,qor,jor,w7e,Dor,Gor,A7e,Oor,Vor,Xor,Fe,QF,L7e,zor,Qor,dQ,Wor,Hor,Uor,WF,y7e,Jor,Yor,cQ,Kor,Zor,err,HF,x7e,orr,rrr,fQ,trr,arr,nrr,UF,$7e,srr,lrr,mQ,irr,drr,crr,Vs,k7e,frr,mrr,gQ,grr,hrr,hQ,prr,_rr,urr,JF,S7e,brr,vrr,pQ,Frr,Trr,Mrr,Xs,R7e,Err,Crr,_Q,wrr,Arr,uQ,Lrr,yrr,xrr,ut,P7e,$rr,krr,bQ,Srr,Rrr,vQ,Prr,Brr,FQ,Irr,Nrr,qrr,YF,B7e,jrr,Drr,TQ,Grr,Orr,Vrr,KF,I7e,Xrr,zrr,MQ,Qrr,Wrr,Hrr,ZF,N7e,Urr,Jrr,EQ,Yrr,Krr,Zrr,eT,q7e,etr,otr,CQ,rtr,ttr,atr,oT,j7e,ntr,str,wQ,ltr,itr,dtr,rT,D7e,ctr,ftr,AQ,mtr,gtr,htr,tT,G7e,ptr,_tr,LQ,utr,btr,vtr,aT,Ftr,O7e,Ttr,Mtr,V7e,Etr,Ctr,nT,bOe,ud,sT,X7e,sy,wtr,z7e,Atr,vOe,Go,ly,Ltr,bd,ytr,yQ,xtr,$tr,xQ,ktr,Str,Rtr,iy,Ptr,Q7e,Btr,Itr,Ntr,bt,dy,qtr,W7e,jtr,Dtr,vd,Gtr,H7e,Otr,Vtr,$Q,Xtr,ztr,Qtr,lT,Wtr,io,cy,Htr,U7e,Utr,Jtr,Xa,Ytr,J7e,Ktr,Ztr,Y7e,ear,oar,K7e,rar,tar,aar,Z7e,iT,e1e,nar,sar,kQ,lar,iar,dar,dT,car,o1e,far,mar,r1e,gar,har,cT,FOe,Fd,fT,t1e,fy,par,a1e,_ar,TOe,Oo,my,uar,Td,bar,SQ,Far,Tar,RQ,Mar,Ear,Car,gy,war,n1e,Aar,Lar,yar,vt,hy,xar,s1e,$ar,kar,Md,Sar,l1e,Rar,Par,PQ,Bar,Iar,Nar,mT,qar,co,py,jar,i1e,Dar,Gar,za,Oar,d1e,Var,Xar,c1e,zar,Qar,f1e,War,Har,Uar,m1e,gT,g1e,Jar,Yar,BQ,Kar,Zar,enr,hT,onr,h1e,rnr,tnr,p1e,anr,nnr,pT,MOe,Ed,_T,_1e,_y,snr,u1e,lnr,EOe,Vo,uy,inr,Cd,dnr,IQ,cnr,fnr,NQ,mnr,gnr,hnr,by,pnr,b1e,_nr,unr,bnr,Ft,vy,vnr,v1e,Fnr,Tnr,wd,Mnr,F1e,Enr,Cnr,qQ,wnr,Anr,Lnr,uT,ynr,fo,Fy,xnr,T1e,$nr,knr,Qa,Snr,M1e,Rnr,Pnr,E1e,Bnr,Inr,C1e,Nnr,qnr,jnr,Pe,bT,w1e,Dnr,Gnr,jQ,Onr,Vnr,Xnr,vT,A1e,znr,Qnr,DQ,Wnr,Hnr,Unr,FT,L1e,Jnr,Ynr,GQ,Knr,Znr,esr,TT,y1e,osr,rsr,OQ,tsr,asr,nsr,MT,x1e,ssr,lsr,VQ,isr,dsr,csr,ET,$1e,fsr,msr,XQ,gsr,hsr,psr,CT,k1e,_sr,usr,zQ,bsr,vsr,Fsr,wT,S1e,Tsr,Msr,QQ,Esr,Csr,wsr,AT,R1e,Asr,Lsr,WQ,ysr,xsr,$sr,LT,ksr,P1e,Ssr,Rsr,B1e,Psr,Bsr,yT,COe,Ad,xT,I1e,Ty,Isr,N1e,Nsr,wOe,Xo,My,qsr,Ld,jsr,HQ,Dsr,Gsr,UQ,Osr,Vsr,Xsr,Ey,zsr,q1e,Qsr,Wsr,Hsr,Tt,Cy,Usr,j1e,Jsr,Ysr,yd,Ksr,D1e,Zsr,elr,JQ,olr,rlr,tlr,$T,alr,mo,wy,nlr,G1e,slr,llr,Wa,ilr,O1e,dlr,clr,V1e,flr,mlr,X1e,glr,hlr,plr,et,kT,z1e,_lr,ulr,YQ,blr,vlr,Flr,ST,Q1e,Tlr,Mlr,KQ,Elr,Clr,wlr,RT,W1e,Alr,Llr,ZQ,ylr,xlr,$lr,PT,H1e,klr,Slr,eW,Rlr,Plr,Blr,BT,U1e,Ilr,Nlr,oW,qlr,jlr,Dlr,IT,Glr,J1e,Olr,Vlr,Y1e,Xlr,zlr,NT,AOe,xd,qT,K1e,Ay,Qlr,Z1e,Wlr,LOe,zo,Ly,Hlr,$d,Ulr,rW,Jlr,Ylr,tW,Klr,Zlr,eir,yy,oir,e2e,rir,tir,air,Mt,xy,nir,o2e,sir,lir,kd,iir,r2e,dir,cir,aW,fir,mir,gir,jT,hir,go,$y,pir,t2e,_ir,uir,Ha,bir,a2e,vir,Fir,n2e,Tir,Mir,s2e,Eir,Cir,wir,Le,DT,l2e,Air,Lir,nW,yir,xir,$ir,GT,i2e,kir,Sir,sW,Rir,Pir,Bir,OT,d2e,Iir,Nir,lW,qir,jir,Dir,VT,c2e,Gir,Oir,iW,Vir,Xir,zir,XT,f2e,Qir,Wir,dW,Hir,Uir,Jir,zT,m2e,Yir,Kir,cW,Zir,edr,odr,QT,g2e,rdr,tdr,fW,adr,ndr,sdr,WT,h2e,ldr,idr,mW,ddr,cdr,fdr,HT,p2e,mdr,gdr,gW,hdr,pdr,_dr,UT,_2e,udr,bdr,hW,vdr,Fdr,Tdr,JT,Mdr,u2e,Edr,Cdr,b2e,wdr,Adr,YT,yOe,Sd,KT,v2e,ky,Ldr,F2e,ydr,xOe,Qo,Sy,xdr,Rd,$dr,pW,kdr,Sdr,_W,Rdr,Pdr,Bdr,Ry,Idr,T2e,Ndr,qdr,jdr,Et,Py,Ddr,M2e,Gdr,Odr,Pd,Vdr,E2e,Xdr,zdr,uW,Qdr,Wdr,Hdr,ZT,Udr,ho,By,Jdr,C2e,Ydr,Kdr,Ua,Zdr,w2e,ecr,ocr,A2e,rcr,tcr,L2e,acr,ncr,scr,Iy,e8,y2e,lcr,icr,bW,dcr,ccr,fcr,o8,x2e,mcr,gcr,vW,hcr,pcr,_cr,r8,ucr,$2e,bcr,vcr,k2e,Fcr,Tcr,t8,$Oe,Bd,a8,S2e,Ny,Mcr,R2e,Ecr,kOe,Wo,qy,Ccr,Id,wcr,FW,Acr,Lcr,TW,ycr,xcr,$cr,jy,kcr,P2e,Scr,Rcr,Pcr,Ct,Dy,Bcr,B2e,Icr,Ncr,Nd,qcr,I2e,jcr,Dcr,MW,Gcr,Ocr,Vcr,n8,Xcr,po,Gy,zcr,N2e,Qcr,Wcr,Ja,Hcr,q2e,Ucr,Jcr,j2e,Ycr,Kcr,D2e,Zcr,efr,ofr,ot,s8,G2e,rfr,tfr,EW,afr,nfr,sfr,l8,O2e,lfr,ifr,CW,dfr,cfr,ffr,i8,V2e,mfr,gfr,wW,hfr,pfr,_fr,d8,X2e,ufr,bfr,AW,vfr,Ffr,Tfr,c8,z2e,Mfr,Efr,LW,Cfr,wfr,Afr,f8,Lfr,Q2e,yfr,xfr,W2e,$fr,kfr,m8,SOe,qd,g8,H2e,Oy,Sfr,U2e,Rfr,ROe,Ho,Vy,Pfr,jd,Bfr,yW,Ifr,Nfr,xW,qfr,jfr,Dfr,Xy,Gfr,J2e,Ofr,Vfr,Xfr,wt,zy,zfr,Y2e,Qfr,Wfr,Dd,Hfr,K2e,Ufr,Jfr,$W,Yfr,Kfr,Zfr,h8,emr,_o,Qy,omr,Z2e,rmr,tmr,Ya,amr,ebe,nmr,smr,obe,lmr,imr,rbe,dmr,cmr,fmr,Gd,p8,tbe,mmr,gmr,kW,hmr,pmr,_mr,_8,abe,umr,bmr,SW,vmr,Fmr,Tmr,u8,nbe,Mmr,Emr,RW,Cmr,wmr,Amr,b8,Lmr,sbe,ymr,xmr,lbe,$mr,kmr,v8,POe,Od,F8,ibe,Wy,Smr,dbe,Rmr,BOe,Uo,Hy,Pmr,Vd,Bmr,PW,Imr,Nmr,BW,qmr,jmr,Dmr,Uy,Gmr,cbe,Omr,Vmr,Xmr,At,Jy,zmr,fbe,Qmr,Wmr,Xd,Hmr,mbe,Umr,Jmr,IW,Ymr,Kmr,Zmr,T8,egr,uo,Yy,ogr,gbe,rgr,tgr,Ka,agr,hbe,ngr,sgr,pbe,lgr,igr,_be,dgr,cgr,fgr,Ky,M8,ube,mgr,ggr,NW,hgr,pgr,_gr,E8,bbe,ugr,bgr,qW,vgr,Fgr,Tgr,C8,Mgr,vbe,Egr,Cgr,Fbe,wgr,Agr,w8,IOe,zd,A8,Tbe,Zy,Lgr,Mbe,ygr,NOe,Jo,e9,xgr,Qd,$gr,jW,kgr,Sgr,DW,Rgr,Pgr,Bgr,o9,Igr,Ebe,Ngr,qgr,jgr,Lt,r9,Dgr,Cbe,Ggr,Ogr,Wd,Vgr,wbe,Xgr,zgr,GW,Qgr,Wgr,Hgr,L8,Ugr,bo,t9,Jgr,Abe,Ygr,Kgr,Za,Zgr,Lbe,ehr,ohr,ybe,rhr,thr,xbe,ahr,nhr,shr,$be,y8,kbe,lhr,ihr,OW,dhr,chr,fhr,x8,mhr,Sbe,ghr,hhr,Rbe,phr,_hr,$8,qOe,Hd,k8,Pbe,a9,uhr,Bbe,bhr,jOe,Yo,n9,vhr,Ud,Fhr,VW,Thr,Mhr,XW,Ehr,Chr,whr,s9,Ahr,Ibe,Lhr,yhr,xhr,yt,l9,$hr,Nbe,khr,Shr,Jd,Rhr,qbe,Phr,Bhr,zW,Ihr,Nhr,qhr,S8,jhr,vo,i9,Dhr,jbe,Ghr,Ohr,en,Vhr,Dbe,Xhr,zhr,Gbe,Qhr,Whr,Obe,Hhr,Uhr,Jhr,on,R8,Vbe,Yhr,Khr,QW,Zhr,epr,opr,P8,Xbe,rpr,tpr,WW,apr,npr,spr,B8,zbe,lpr,ipr,HW,dpr,cpr,fpr,I8,Qbe,mpr,gpr,UW,hpr,ppr,_pr,N8,upr,Wbe,bpr,vpr,Hbe,Fpr,Tpr,q8,DOe,Yd,j8,Ube,d9,Mpr,Jbe,Epr,GOe,Ko,c9,Cpr,Kd,wpr,JW,Apr,Lpr,YW,ypr,xpr,$pr,f9,kpr,Ybe,Spr,Rpr,Ppr,xt,m9,Bpr,Kbe,Ipr,Npr,Zd,qpr,Zbe,jpr,Dpr,KW,Gpr,Opr,Vpr,D8,Xpr,Fo,g9,zpr,eve,Qpr,Wpr,rn,Hpr,ove,Upr,Jpr,rve,Ypr,Kpr,tve,Zpr,e_r,o_r,ave,G8,nve,r_r,t_r,ZW,a_r,n_r,s_r,O8,l_r,sve,i_r,d_r,lve,c_r,f_r,V8,OOe,ec,X8,ive,h9,m_r,dve,g_r,VOe,Zo,p9,h_r,oc,p_r,eH,__r,u_r,oH,b_r,v_r,F_r,_9,T_r,cve,M_r,E_r,C_r,$t,u9,w_r,fve,A_r,L_r,rc,y_r,mve,x_r,$_r,rH,k_r,S_r,R_r,z8,P_r,Lr,b9,B_r,gve,I_r,N_r,tn,q_r,hve,j_r,D_r,pve,G_r,O_r,_ve,V_r,X_r,z_r,j,Q8,uve,Q_r,W_r,tH,H_r,U_r,J_r,W8,bve,Y_r,K_r,aH,Z_r,eur,our,H8,vve,rur,tur,nH,aur,nur,sur,U8,Fve,lur,iur,sH,dur,cur,fur,J8,Tve,mur,gur,lH,hur,pur,_ur,Y8,Mve,uur,bur,iH,vur,Fur,Tur,K8,Eve,Mur,Eur,dH,Cur,wur,Aur,Z8,Cve,Lur,yur,cH,xur,$ur,kur,eM,wve,Sur,Rur,fH,Pur,Bur,Iur,oM,Ave,Nur,qur,mH,jur,Dur,Gur,rM,Lve,Our,Vur,gH,Xur,zur,Qur,tM,yve,Wur,Hur,hH,Uur,Jur,Yur,aM,xve,Kur,Zur,pH,e7r,o7r,r7r,nM,$ve,t7r,a7r,_H,n7r,s7r,l7r,sM,kve,i7r,d7r,uH,c7r,f7r,m7r,lM,Sve,g7r,h7r,bH,p7r,_7r,u7r,iM,Rve,b7r,v7r,vH,F7r,T7r,M7r,zs,Pve,E7r,C7r,FH,w7r,A7r,TH,L7r,y7r,x7r,dM,Bve,$7r,k7r,MH,S7r,R7r,P7r,cM,Ive,B7r,I7r,EH,N7r,q7r,j7r,fM,Nve,D7r,G7r,CH,O7r,V7r,X7r,mM,qve,z7r,Q7r,wH,W7r,H7r,U7r,gM,jve,J7r,Y7r,AH,K7r,Z7r,e1r,hM,Dve,o1r,r1r,LH,t1r,a1r,n1r,pM,Gve,s1r,l1r,yH,i1r,d1r,c1r,_M,Ove,f1r,m1r,xH,g1r,h1r,p1r,uM,Vve,_1r,u1r,$H,b1r,v1r,F1r,bM,Xve,T1r,M1r,kH,E1r,C1r,w1r,vM,zve,A1r,L1r,SH,y1r,x1r,$1r,FM,Qve,k1r,S1r,RH,R1r,P1r,B1r,TM,Wve,I1r,N1r,PH,q1r,j1r,D1r,MM,Hve,G1r,O1r,BH,V1r,X1r,z1r,EM,Uve,Q1r,W1r,IH,H1r,U1r,J1r,CM,Jve,Y1r,K1r,NH,Z1r,e2r,o2r,wM,Yve,r2r,t2r,qH,a2r,n2r,s2r,AM,Kve,l2r,i2r,jH,d2r,c2r,f2r,LM,Zve,m2r,g2r,DH,h2r,p2r,_2r,yM,eFe,u2r,b2r,GH,v2r,F2r,T2r,xM,oFe,M2r,E2r,OH,C2r,w2r,A2r,$M,rFe,L2r,y2r,VH,x2r,$2r,k2r,kM,tFe,S2r,R2r,XH,P2r,B2r,I2r,SM,aFe,N2r,q2r,zH,j2r,D2r,G2r,RM,nFe,O2r,V2r,QH,X2r,z2r,Q2r,PM,sFe,W2r,H2r,WH,U2r,J2r,Y2r,BM,lFe,K2r,Z2r,HH,ebr,obr,rbr,IM,iFe,tbr,abr,UH,nbr,sbr,lbr,NM,dFe,ibr,dbr,JH,cbr,fbr,mbr,qM,XOe,tc,jM,cFe,v9,gbr,fFe,hbr,zOe,er,F9,pbr,ac,_br,YH,ubr,bbr,KH,vbr,Fbr,Tbr,T9,Mbr,mFe,Ebr,Cbr,wbr,kt,M9,Abr,gFe,Lbr,ybr,nc,xbr,hFe,$br,kbr,ZH,Sbr,Rbr,Pbr,DM,Bbr,yr,E9,Ibr,pFe,Nbr,qbr,an,jbr,_Fe,Dbr,Gbr,uFe,Obr,Vbr,bFe,Xbr,zbr,Qbr,se,GM,vFe,Wbr,Hbr,eU,Ubr,Jbr,Ybr,OM,FFe,Kbr,Zbr,oU,evr,ovr,rvr,VM,TFe,tvr,avr,rU,nvr,svr,lvr,XM,MFe,ivr,dvr,tU,cvr,fvr,mvr,zM,EFe,gvr,hvr,aU,pvr,_vr,uvr,QM,CFe,bvr,vvr,nU,Fvr,Tvr,Mvr,WM,wFe,Evr,Cvr,sU,wvr,Avr,Lvr,HM,AFe,yvr,xvr,lU,$vr,kvr,Svr,UM,LFe,Rvr,Pvr,iU,Bvr,Ivr,Nvr,JM,yFe,qvr,jvr,dU,Dvr,Gvr,Ovr,YM,xFe,Vvr,Xvr,cU,zvr,Qvr,Wvr,KM,$Fe,Hvr,Uvr,fU,Jvr,Yvr,Kvr,ZM,kFe,Zvr,eFr,mU,oFr,rFr,tFr,eE,SFe,aFr,nFr,gU,sFr,lFr,iFr,oE,RFe,dFr,cFr,hU,fFr,mFr,gFr,rE,PFe,hFr,pFr,pU,_Fr,uFr,bFr,tE,BFe,vFr,FFr,_U,TFr,MFr,EFr,aE,IFe,CFr,wFr,uU,AFr,LFr,yFr,nE,NFe,xFr,$Fr,bU,kFr,SFr,RFr,sE,qFe,PFr,BFr,vU,IFr,NFr,qFr,lE,jFe,jFr,DFr,FU,GFr,OFr,VFr,iE,DFe,XFr,zFr,TU,QFr,WFr,HFr,dE,GFe,UFr,JFr,MU,YFr,KFr,ZFr,cE,QOe,sc,fE,OFe,C9,eTr,VFe,oTr,WOe,or,w9,rTr,lc,tTr,EU,aTr,nTr,CU,sTr,lTr,iTr,A9,dTr,XFe,cTr,fTr,mTr,St,L9,gTr,zFe,hTr,pTr,ic,_Tr,QFe,uTr,bTr,wU,vTr,FTr,TTr,mE,MTr,xr,y9,ETr,WFe,CTr,wTr,nn,ATr,HFe,LTr,yTr,UFe,xTr,$Tr,JFe,kTr,STr,RTr,Me,gE,YFe,PTr,BTr,AU,ITr,NTr,qTr,hE,KFe,jTr,DTr,LU,GTr,OTr,VTr,pE,ZFe,XTr,zTr,yU,QTr,WTr,HTr,_E,eTe,UTr,JTr,xU,YTr,KTr,ZTr,uE,oTe,e8r,o8r,$U,r8r,t8r,a8r,bE,rTe,n8r,s8r,kU,l8r,i8r,d8r,vE,tTe,c8r,f8r,SU,m8r,g8r,h8r,FE,aTe,p8r,_8r,RU,u8r,b8r,v8r,TE,nTe,F8r,T8r,PU,M8r,E8r,C8r,ME,sTe,w8r,A8r,BU,L8r,y8r,x8r,EE,lTe,$8r,k8r,IU,S8r,R8r,P8r,CE,iTe,B8r,I8r,NU,N8r,q8r,j8r,wE,dTe,D8r,G8r,qU,O8r,V8r,X8r,AE,HOe,dc,LE,cTe,x9,z8r,fTe,Q8r,UOe,rr,$9,W8r,cc,H8r,jU,U8r,J8r,DU,Y8r,K8r,Z8r,k9,eMr,mTe,oMr,rMr,tMr,Rt,S9,aMr,gTe,nMr,sMr,fc,lMr,hTe,iMr,dMr,GU,cMr,fMr,mMr,yE,gMr,$r,R9,hMr,pTe,pMr,_Mr,sn,uMr,_Te,bMr,vMr,uTe,FMr,TMr,bTe,MMr,EMr,CMr,ln,xE,vTe,wMr,AMr,OU,LMr,yMr,xMr,$E,FTe,$Mr,kMr,VU,SMr,RMr,PMr,kE,TTe,BMr,IMr,XU,NMr,qMr,jMr,SE,MTe,DMr,GMr,zU,OMr,VMr,XMr,RE,JOe,mc,PE,ETe,P9,zMr,CTe,QMr,YOe,tr,B9,WMr,gc,HMr,QU,UMr,JMr,WU,YMr,KMr,ZMr,I9,eEr,wTe,oEr,rEr,tEr,Pt,N9,aEr,ATe,nEr,sEr,hc,lEr,LTe,iEr,dEr,HU,cEr,fEr,mEr,BE,gEr,kr,q9,hEr,yTe,pEr,_Er,dn,uEr,xTe,bEr,vEr,$Te,FEr,TEr,kTe,MEr,EEr,CEr,ie,IE,STe,wEr,AEr,UU,LEr,yEr,xEr,NE,RTe,$Er,kEr,JU,SEr,REr,PEr,qE,PTe,BEr,IEr,YU,NEr,qEr,jEr,jE,BTe,DEr,GEr,KU,OEr,VEr,XEr,DE,ITe,zEr,QEr,ZU,WEr,HEr,UEr,GE,NTe,JEr,YEr,eJ,KEr,ZEr,e4r,OE,qTe,o4r,r4r,oJ,t4r,a4r,n4r,VE,jTe,s4r,l4r,rJ,i4r,d4r,c4r,XE,DTe,f4r,m4r,tJ,g4r,h4r,p4r,zE,GTe,_4r,u4r,aJ,b4r,v4r,F4r,QE,OTe,T4r,M4r,nJ,E4r,C4r,w4r,WE,VTe,A4r,L4r,sJ,y4r,x4r,$4r,HE,XTe,k4r,S4r,lJ,R4r,P4r,B4r,UE,zTe,I4r,N4r,iJ,q4r,j4r,D4r,JE,QTe,G4r,O4r,dJ,V4r,X4r,z4r,YE,WTe,Q4r,W4r,cJ,H4r,U4r,J4r,KE,HTe,Y4r,K4r,fJ,Z4r,eCr,oCr,ZE,UTe,rCr,tCr,mJ,aCr,nCr,sCr,e4,JTe,lCr,iCr,gJ,dCr,cCr,fCr,o4,YTe,mCr,gCr,hJ,hCr,pCr,_Cr,r4,KOe,pc,t4,KTe,j9,uCr,ZTe,bCr,ZOe,ar,D9,vCr,_c,FCr,pJ,TCr,MCr,_J,ECr,CCr,wCr,G9,ACr,e8e,LCr,yCr,xCr,Bt,O9,$Cr,o8e,kCr,SCr,uc,RCr,r8e,PCr,BCr,uJ,ICr,NCr,qCr,a4,jCr,Sr,V9,DCr,t8e,GCr,OCr,cn,VCr,a8e,XCr,zCr,n8e,QCr,WCr,s8e,HCr,UCr,JCr,ye,n4,l8e,YCr,KCr,bJ,ZCr,e5r,o5r,s4,i8e,r5r,t5r,vJ,a5r,n5r,s5r,l4,d8e,l5r,i5r,FJ,d5r,c5r,f5r,i4,c8e,m5r,g5r,TJ,h5r,p5r,_5r,d4,f8e,u5r,b5r,MJ,v5r,F5r,T5r,c4,m8e,M5r,E5r,EJ,C5r,w5r,A5r,f4,g8e,L5r,y5r,CJ,x5r,$5r,k5r,m4,h8e,S5r,R5r,wJ,P5r,B5r,I5r,g4,p8e,N5r,q5r,AJ,j5r,D5r,G5r,h4,_8e,O5r,V5r,LJ,X5r,z5r,Q5r,p4,eVe,bc,_4,u8e,X9,W5r,b8e,H5r,oVe,nr,z9,U5r,vc,J5r,yJ,Y5r,K5r,xJ,Z5r,e3r,o3r,Q9,r3r,v8e,t3r,a3r,n3r,It,W9,s3r,F8e,l3r,i3r,Fc,d3r,T8e,c3r,f3r,$J,m3r,g3r,h3r,u4,p3r,Rr,H9,_3r,M8e,u3r,b3r,fn,v3r,E8e,F3r,T3r,C8e,M3r,E3r,w8e,C3r,w3r,A3r,te,b4,A8e,L3r,y3r,kJ,x3r,$3r,k3r,v4,L8e,S3r,R3r,SJ,P3r,B3r,I3r,F4,y8e,N3r,q3r,RJ,j3r,D3r,G3r,T4,x8e,O3r,V3r,PJ,X3r,z3r,Q3r,M4,$8e,W3r,H3r,BJ,U3r,J3r,Y3r,E4,k8e,K3r,Z3r,IJ,e0r,o0r,r0r,C4,S8e,t0r,a0r,NJ,n0r,s0r,l0r,w4,R8e,i0r,d0r,qJ,c0r,f0r,m0r,A4,P8e,g0r,h0r,jJ,p0r,_0r,u0r,L4,B8e,b0r,v0r,DJ,F0r,T0r,M0r,y4,I8e,E0r,C0r,GJ,w0r,A0r,L0r,x4,N8e,y0r,x0r,OJ,$0r,k0r,S0r,$4,q8e,R0r,P0r,VJ,B0r,I0r,N0r,k4,j8e,q0r,j0r,XJ,D0r,G0r,O0r,S4,D8e,V0r,X0r,zJ,z0r,Q0r,W0r,R4,G8e,H0r,U0r,QJ,J0r,Y0r,K0r,P4,O8e,Z0r,ewr,WJ,owr,rwr,twr,B4,V8e,awr,nwr,HJ,swr,lwr,iwr,I4,X8e,dwr,cwr,UJ,fwr,mwr,gwr,N4,z8e,hwr,pwr,JJ,_wr,uwr,bwr,q4,Q8e,vwr,Fwr,YJ,Twr,Mwr,Ewr,j4,W8e,Cwr,wwr,KJ,Awr,Lwr,ywr,D4,H8e,xwr,$wr,ZJ,kwr,Swr,Rwr,G4,U8e,Pwr,Bwr,eY,Iwr,Nwr,qwr,O4,J8e,jwr,Dwr,oY,Gwr,Owr,Vwr,V4,Y8e,Xwr,zwr,rY,Qwr,Wwr,Hwr,X4,rVe,Tc,z4,K8e,U9,Uwr,Z8e,Jwr,tVe,sr,J9,Ywr,Mc,Kwr,tY,Zwr,eAr,aY,oAr,rAr,tAr,Y9,aAr,eMe,nAr,sAr,lAr,Nt,K9,iAr,oMe,dAr,cAr,Ec,fAr,rMe,mAr,gAr,nY,hAr,pAr,_Ar,Q4,uAr,Pr,Z9,bAr,tMe,vAr,FAr,mn,TAr,aMe,MAr,EAr,nMe,CAr,wAr,sMe,AAr,LAr,yAr,_e,W4,lMe,xAr,$Ar,sY,kAr,SAr,RAr,H4,iMe,PAr,BAr,lY,IAr,NAr,qAr,U4,dMe,jAr,DAr,iY,GAr,OAr,VAr,J4,cMe,XAr,zAr,dY,QAr,WAr,HAr,Y4,fMe,UAr,JAr,cY,YAr,KAr,ZAr,K4,mMe,e6r,o6r,fY,r6r,t6r,a6r,Z4,gMe,n6r,s6r,mY,l6r,i6r,d6r,eC,hMe,c6r,f6r,gY,m6r,g6r,h6r,oC,pMe,p6r,_6r,hY,u6r,b6r,v6r,rC,_Me,F6r,T6r,pY,M6r,E6r,C6r,tC,uMe,w6r,A6r,_Y,L6r,y6r,x6r,aC,bMe,$6r,k6r,uY,S6r,R6r,P6r,nC,vMe,B6r,I6r,bY,N6r,q6r,j6r,sC,FMe,D6r,G6r,vY,O6r,V6r,X6r,lC,TMe,z6r,Q6r,FY,W6r,H6r,U6r,iC,MMe,J6r,Y6r,TY,K6r,Z6r,eLr,dC,EMe,oLr,rLr,MY,tLr,aLr,nLr,cC,aVe,Cc,fC,CMe,ex,sLr,wMe,lLr,nVe,lr,ox,iLr,wc,dLr,EY,cLr,fLr,CY,mLr,gLr,hLr,rx,pLr,AMe,_Lr,uLr,bLr,qt,tx,vLr,LMe,FLr,TLr,Ac,MLr,yMe,ELr,CLr,wY,wLr,ALr,LLr,mC,yLr,Br,ax,xLr,xMe,$Lr,kLr,gn,SLr,$Me,RLr,PLr,kMe,BLr,ILr,SMe,NLr,qLr,jLr,nx,gC,RMe,DLr,GLr,AY,OLr,VLr,XLr,hC,PMe,zLr,QLr,LY,WLr,HLr,ULr,pC,sVe,Lc,_C,BMe,sx,JLr,IMe,YLr,lVe,ir,lx,KLr,yc,ZLr,yY,eyr,oyr,xY,ryr,tyr,ayr,ix,nyr,NMe,syr,lyr,iyr,jt,dx,dyr,qMe,cyr,fyr,xc,myr,jMe,gyr,hyr,$Y,pyr,_yr,uyr,uC,byr,Ir,cx,vyr,DMe,Fyr,Tyr,hn,Myr,GMe,Eyr,Cyr,OMe,wyr,Ayr,VMe,Lyr,yyr,xyr,XMe,bC,zMe,$yr,kyr,kY,Syr,Ryr,Pyr,vC,iVe,$c,FC,QMe,fx,Byr,WMe,Iyr,dVe,dr,mx,Nyr,kc,qyr,SY,jyr,Dyr,RY,Gyr,Oyr,Vyr,gx,Xyr,HMe,zyr,Qyr,Wyr,Dt,hx,Hyr,UMe,Uyr,Jyr,Sc,Yyr,JMe,Kyr,Zyr,PY,e9r,o9r,r9r,TC,t9r,Nr,px,a9r,YMe,n9r,s9r,pn,l9r,KMe,i9r,d9r,ZMe,c9r,f9r,eEe,m9r,g9r,h9r,de,MC,oEe,p9r,_9r,BY,u9r,b9r,v9r,EC,rEe,F9r,T9r,IY,M9r,E9r,C9r,CC,tEe,w9r,A9r,NY,L9r,y9r,x9r,wC,aEe,$9r,k9r,qY,S9r,R9r,P9r,AC,nEe,B9r,I9r,jY,N9r,q9r,j9r,LC,sEe,D9r,G9r,DY,O9r,V9r,X9r,yC,lEe,z9r,Q9r,GY,W9r,H9r,U9r,xC,iEe,J9r,Y9r,OY,K9r,Z9r,exr,$C,dEe,oxr,rxr,VY,txr,axr,nxr,kC,cEe,sxr,lxr,XY,ixr,dxr,cxr,SC,fEe,fxr,mxr,zY,gxr,hxr,pxr,RC,mEe,_xr,uxr,QY,bxr,vxr,Fxr,PC,gEe,Txr,Mxr,WY,Exr,Cxr,wxr,BC,hEe,Axr,Lxr,HY,yxr,xxr,$xr,IC,pEe,kxr,Sxr,UY,Rxr,Pxr,Bxr,NC,_Ee,Ixr,Nxr,JY,qxr,jxr,Dxr,qC,uEe,Gxr,Oxr,YY,Vxr,Xxr,zxr,jC,bEe,Qxr,Wxr,KY,Hxr,Uxr,Jxr,DC,vEe,Yxr,Kxr,ZY,Zxr,e$r,o$r,GC,FEe,r$r,t$r,eK,a$r,n$r,s$r,OC,cVe,Rc,VC,TEe,_x,l$r,MEe,i$r,fVe,cr,ux,d$r,Pc,c$r,oK,f$r,m$r,rK,g$r,h$r,p$r,bx,_$r,EEe,u$r,b$r,v$r,Gt,vx,F$r,CEe,T$r,M$r,Bc,E$r,wEe,C$r,w$r,tK,A$r,L$r,y$r,XC,x$r,qr,Fx,$$r,AEe,k$r,S$r,_n,R$r,LEe,P$r,B$r,yEe,I$r,N$r,xEe,q$r,j$r,D$r,ce,zC,$Ee,G$r,O$r,aK,V$r,X$r,z$r,QC,kEe,Q$r,W$r,nK,H$r,U$r,J$r,WC,SEe,Y$r,K$r,sK,Z$r,ekr,okr,HC,REe,rkr,tkr,lK,akr,nkr,skr,UC,PEe,lkr,ikr,iK,dkr,ckr,fkr,JC,BEe,mkr,gkr,dK,hkr,pkr,_kr,YC,IEe,ukr,bkr,cK,vkr,Fkr,Tkr,KC,NEe,Mkr,Ekr,fK,Ckr,wkr,Akr,ZC,qEe,Lkr,ykr,mK,xkr,$kr,kkr,e5,jEe,Skr,Rkr,gK,Pkr,Bkr,Ikr,o5,DEe,Nkr,qkr,hK,jkr,Dkr,Gkr,r5,GEe,Okr,Vkr,pK,Xkr,zkr,Qkr,t5,OEe,Wkr,Hkr,_K,Ukr,Jkr,Ykr,a5,VEe,Kkr,Zkr,uK,eSr,oSr,rSr,n5,XEe,tSr,aSr,bK,nSr,sSr,lSr,s5,zEe,iSr,dSr,vK,cSr,fSr,mSr,l5,QEe,gSr,hSr,FK,pSr,_Sr,uSr,i5,WEe,bSr,vSr,TK,FSr,TSr,MSr,d5,HEe,ESr,CSr,MK,wSr,ASr,LSr,c5,UEe,ySr,xSr,EK,$Sr,kSr,SSr,f5,mVe,Ic,m5,JEe,Tx,RSr,YEe,PSr,gVe,fr,Mx,BSr,Nc,ISr,CK,NSr,qSr,wK,jSr,DSr,GSr,Ex,OSr,KEe,VSr,XSr,zSr,Ot,Cx,QSr,ZEe,WSr,HSr,qc,USr,e4e,JSr,YSr,AK,KSr,ZSr,eRr,g5,oRr,jr,wx,rRr,o4e,tRr,aRr,un,nRr,r4e,sRr,lRr,t4e,iRr,dRr,a4e,cRr,fRr,mRr,n4e,h5,s4e,gRr,hRr,LK,pRr,_Rr,uRr,p5,hVe,jc,_5,l4e,Ax,bRr,i4e,vRr,pVe,mr,Lx,FRr,Dc,TRr,yK,MRr,ERr,xK,CRr,wRr,ARr,yx,LRr,d4e,yRr,xRr,$Rr,Vt,xx,kRr,c4e,SRr,RRr,Gc,PRr,f4e,BRr,IRr,$K,NRr,qRr,jRr,u5,DRr,Dr,$x,GRr,m4e,ORr,VRr,bn,XRr,g4e,zRr,QRr,h4e,WRr,HRr,p4e,URr,JRr,YRr,_4e,b5,u4e,KRr,ZRr,kK,ePr,oPr,rPr,v5,_Ve,Oc,F5,b4e,kx,tPr,v4e,aPr,uVe,gr,Sx,nPr,Vc,sPr,SK,lPr,iPr,RK,dPr,cPr,fPr,Rx,mPr,F4e,gPr,hPr,pPr,Xt,Px,_Pr,T4e,uPr,bPr,Xc,vPr,M4e,FPr,TPr,PK,MPr,EPr,CPr,T5,wPr,Gr,Bx,APr,E4e,LPr,yPr,vn,xPr,C4e,$Pr,kPr,w4e,SPr,RPr,A4e,PPr,BPr,IPr,oe,M5,L4e,NPr,qPr,BK,jPr,DPr,GPr,E5,y4e,OPr,VPr,IK,XPr,zPr,QPr,C5,x4e,WPr,HPr,NK,UPr,JPr,YPr,w5,$4e,KPr,ZPr,qK,eBr,oBr,rBr,A5,k4e,tBr,aBr,jK,nBr,sBr,lBr,L5,S4e,iBr,dBr,DK,cBr,fBr,mBr,y5,R4e,gBr,hBr,GK,pBr,_Br,uBr,x5,P4e,bBr,vBr,OK,FBr,TBr,MBr,$5,B4e,EBr,CBr,VK,wBr,ABr,LBr,k5,I4e,yBr,xBr,XK,$Br,kBr,SBr,S5,N4e,RBr,PBr,zK,BBr,IBr,NBr,R5,q4e,qBr,jBr,QK,DBr,GBr,OBr,P5,j4e,VBr,XBr,WK,zBr,QBr,WBr,B5,D4e,HBr,UBr,HK,JBr,YBr,KBr,I5,G4e,ZBr,eIr,UK,oIr,rIr,tIr,N5,O4e,aIr,nIr,JK,sIr,lIr,iIr,q5,V4e,dIr,cIr,YK,fIr,mIr,gIr,j5,X4e,hIr,pIr,KK,_Ir,uIr,bIr,D5,z4e,vIr,FIr,ZK,TIr,MIr,EIr,G5,Q4e,CIr,wIr,eZ,AIr,LIr,yIr,O5,W4e,xIr,$Ir,oZ,kIr,SIr,RIr,V5,H4e,PIr,BIr,rZ,IIr,NIr,qIr,X5,U4e,jIr,DIr,tZ,GIr,OIr,VIr,z5,J4e,XIr,zIr,aZ,QIr,WIr,HIr,Q5,Y4e,UIr,JIr,nZ,YIr,KIr,ZIr,W5,K4e,eNr,oNr,sZ,rNr,tNr,aNr,H5,Z4e,nNr,sNr,lZ,lNr,iNr,dNr,U5,bVe,zc,J5,eCe,Ix,cNr,oCe,fNr,vVe,hr,Nx,mNr,Qc,gNr,iZ,hNr,pNr,dZ,_Nr,uNr,bNr,qx,vNr,rCe,FNr,TNr,MNr,zt,jx,ENr,tCe,CNr,wNr,Wc,ANr,aCe,LNr,yNr,cZ,xNr,$Nr,kNr,Y5,SNr,Or,Dx,RNr,nCe,PNr,BNr,Fn,INr,sCe,NNr,qNr,lCe,jNr,DNr,iCe,GNr,ONr,VNr,xe,K5,dCe,XNr,zNr,fZ,QNr,WNr,HNr,Z5,cCe,UNr,JNr,mZ,YNr,KNr,ZNr,e3,fCe,eqr,oqr,gZ,rqr,tqr,aqr,o3,mCe,nqr,sqr,hZ,lqr,iqr,dqr,r3,gCe,cqr,fqr,pZ,mqr,gqr,hqr,t3,hCe,pqr,_qr,_Z,uqr,bqr,vqr,a3,pCe,Fqr,Tqr,uZ,Mqr,Eqr,Cqr,n3,_Ce,wqr,Aqr,bZ,Lqr,yqr,xqr,s3,uCe,$qr,kqr,vZ,Sqr,Rqr,Pqr,l3,bCe,Bqr,Iqr,FZ,Nqr,qqr,jqr,i3,FVe,Hc,d3,vCe,Gx,Dqr,FCe,Gqr,TVe,pr,Ox,Oqr,Uc,Vqr,TZ,Xqr,zqr,MZ,Qqr,Wqr,Hqr,Vx,Uqr,TCe,Jqr,Yqr,Kqr,Qt,Xx,Zqr,MCe,ejr,ojr,Jc,rjr,ECe,tjr,ajr,EZ,njr,sjr,ljr,c3,ijr,Vr,zx,djr,CCe,cjr,fjr,Tn,mjr,wCe,gjr,hjr,ACe,pjr,_jr,LCe,ujr,bjr,vjr,Ee,f3,yCe,Fjr,Tjr,CZ,Mjr,Ejr,Cjr,m3,xCe,wjr,Ajr,wZ,Ljr,yjr,xjr,g3,$Ce,$jr,kjr,AZ,Sjr,Rjr,Pjr,h3,kCe,Bjr,Ijr,LZ,Njr,qjr,jjr,p3,SCe,Djr,Gjr,yZ,Ojr,Vjr,Xjr,_3,RCe,zjr,Qjr,xZ,Wjr,Hjr,Ujr,u3,PCe,Jjr,Yjr,$Z,Kjr,Zjr,eDr,b3,BCe,oDr,rDr,kZ,tDr,aDr,nDr,v3,ICe,sDr,lDr,SZ,iDr,dDr,cDr,F3,NCe,fDr,mDr,RZ,gDr,hDr,pDr,T3,qCe,_Dr,uDr,PZ,bDr,vDr,FDr,M3,jCe,TDr,MDr,BZ,EDr,CDr,wDr,E3,DCe,ADr,LDr,IZ,yDr,xDr,$Dr,C3,MVe,Yc,w3,GCe,Qx,kDr,OCe,SDr,EVe,_r,Wx,RDr,Kc,PDr,NZ,BDr,IDr,qZ,NDr,qDr,jDr,Hx,DDr,VCe,GDr,ODr,VDr,Wt,Ux,XDr,XCe,zDr,QDr,Zc,WDr,zCe,HDr,UDr,jZ,JDr,YDr,KDr,A3,ZDr,Xr,Jx,eGr,QCe,oGr,rGr,Mn,tGr,WCe,aGr,nGr,HCe,sGr,lGr,UCe,iGr,dGr,cGr,$e,L3,JCe,fGr,mGr,DZ,gGr,hGr,pGr,y3,YCe,_Gr,uGr,GZ,bGr,vGr,FGr,x3,KCe,TGr,MGr,OZ,EGr,CGr,wGr,$3,ZCe,AGr,LGr,VZ,yGr,xGr,$Gr,k3,e5e,kGr,SGr,XZ,RGr,PGr,BGr,S3,o5e,IGr,NGr,zZ,qGr,jGr,DGr,R3,r5e,GGr,OGr,QZ,VGr,XGr,zGr,P3,t5e,QGr,WGr,WZ,HGr,UGr,JGr,B3,a5e,YGr,KGr,HZ,ZGr,eOr,oOr,I3,n5e,rOr,tOr,UZ,aOr,nOr,sOr,N3,CVe,ef,q3,s5e,Yx,lOr,l5e,iOr,wVe,ur,Kx,dOr,of,cOr,JZ,fOr,mOr,YZ,gOr,hOr,pOr,Zx,_Or,i5e,uOr,bOr,vOr,Ht,e$,FOr,d5e,TOr,MOr,rf,EOr,c5e,COr,wOr,KZ,AOr,LOr,yOr,j3,xOr,zr,o$,$Or,f5e,kOr,SOr,En,ROr,m5e,POr,BOr,g5e,IOr,NOr,h5e,qOr,jOr,DOr,ke,D3,p5e,GOr,OOr,ZZ,VOr,XOr,zOr,G3,_5e,QOr,WOr,eee,HOr,UOr,JOr,O3,u5e,YOr,KOr,oee,ZOr,eVr,oVr,V3,b5e,rVr,tVr,ree,aVr,nVr,sVr,X3,v5e,lVr,iVr,tee,dVr,cVr,fVr,z3,F5e,mVr,gVr,aee,hVr,pVr,_Vr,Q3,T5e,uVr,bVr,nee,vVr,FVr,TVr,W3,M5e,MVr,EVr,see,CVr,wVr,AVr,H3,E5e,LVr,yVr,lee,xVr,$Vr,kVr,U3,C5e,SVr,RVr,iee,PVr,BVr,IVr,J3,AVe,tf,Y3,w5e,r$,NVr,A5e,qVr,LVe,br,t$,jVr,af,DVr,dee,GVr,OVr,cee,VVr,XVr,zVr,a$,QVr,L5e,WVr,HVr,UVr,Ut,n$,JVr,y5e,YVr,KVr,nf,ZVr,x5e,eXr,oXr,fee,rXr,tXr,aXr,K3,nXr,Qr,s$,sXr,$5e,lXr,iXr,Cn,dXr,k5e,cXr,fXr,S5e,mXr,gXr,R5e,hXr,pXr,_Xr,Se,Z3,P5e,uXr,bXr,mee,vXr,FXr,TXr,e0,B5e,MXr,EXr,gee,CXr,wXr,AXr,o0,I5e,LXr,yXr,hee,xXr,$Xr,kXr,r0,N5e,SXr,RXr,pee,PXr,BXr,IXr,t0,q5e,NXr,qXr,_ee,jXr,DXr,GXr,a0,j5e,OXr,VXr,uee,XXr,zXr,QXr,n0,D5e,WXr,HXr,bee,UXr,JXr,YXr,s0,G5e,KXr,ZXr,vee,ezr,ozr,rzr,l0,O5e,tzr,azr,Fee,nzr,szr,lzr,i0,V5e,izr,dzr,Tee,czr,fzr,mzr,d0,yVe,sf,c0,X5e,l$,gzr,z5e,hzr,xVe,vr,i$,pzr,lf,_zr,Mee,uzr,bzr,Eee,vzr,Fzr,Tzr,d$,Mzr,Q5e,Ezr,Czr,wzr,Jt,c$,Azr,W5e,Lzr,yzr,df,xzr,H5e,$zr,kzr,Cee,Szr,Rzr,Pzr,f0,Bzr,Wr,f$,Izr,U5e,Nzr,qzr,wn,jzr,J5e,Dzr,Gzr,Y5e,Ozr,Vzr,K5e,Xzr,zzr,Qzr,Re,m0,Z5e,Wzr,Hzr,wee,Uzr,Jzr,Yzr,g0,e3e,Kzr,Zzr,Aee,eQr,oQr,rQr,h0,o3e,tQr,aQr,Lee,nQr,sQr,lQr,p0,r3e,iQr,dQr,yee,cQr,fQr,mQr,_0,t3e,gQr,hQr,xee,pQr,_Qr,uQr,u0,a3e,bQr,vQr,$ee,FQr,TQr,MQr,b0,n3e,EQr,CQr,kee,wQr,AQr,LQr,v0,s3e,yQr,xQr,See,$Qr,kQr,SQr,F0,l3e,RQr,PQr,Ree,BQr,IQr,NQr,T0,i3e,qQr,jQr,Pee,DQr,GQr,OQr,M0,$Ve,cf,E0,d3e,m$,VQr,c3e,XQr,kVe,Fr,g$,zQr,ff,QQr,Bee,WQr,HQr,Iee,UQr,JQr,YQr,h$,KQr,f3e,ZQr,eWr,oWr,Yt,p$,rWr,m3e,tWr,aWr,mf,nWr,g3e,sWr,lWr,Nee,iWr,dWr,cWr,C0,fWr,Hr,_$,mWr,h3e,gWr,hWr,An,pWr,p3e,_Wr,uWr,_3e,bWr,vWr,u3e,FWr,TWr,MWr,Ve,w0,b3e,EWr,CWr,qee,wWr,AWr,LWr,A0,v3e,yWr,xWr,jee,$Wr,kWr,SWr,L0,F3e,RWr,PWr,Dee,BWr,IWr,NWr,y0,T3e,qWr,jWr,Gee,DWr,GWr,OWr,x0,M3e,VWr,XWr,Oee,zWr,QWr,WWr,$0,E3e,HWr,UWr,Vee,JWr,YWr,KWr,k0,C3e,ZWr,eHr,Xee,oHr,rHr,tHr,S0,w3e,aHr,nHr,zee,sHr,lHr,iHr,R0,SVe,gf,P0,A3e,u$,dHr,L3e,cHr,RVe,Tr,b$,fHr,hf,mHr,Qee,gHr,hHr,Wee,pHr,_Hr,uHr,v$,bHr,y3e,vHr,FHr,THr,Kt,F$,MHr,x3e,EHr,CHr,pf,wHr,$3e,AHr,LHr,Hee,yHr,xHr,$Hr,B0,kHr,Ur,T$,SHr,k3e,RHr,PHr,Ln,BHr,S3e,IHr,NHr,R3e,qHr,jHr,P3e,DHr,GHr,OHr,Xe,I0,B3e,VHr,XHr,Uee,zHr,QHr,WHr,N0,I3e,HHr,UHr,Jee,JHr,YHr,KHr,q0,N3e,ZHr,eUr,Yee,oUr,rUr,tUr,j0,q3e,aUr,nUr,Kee,sUr,lUr,iUr,D0,j3e,dUr,cUr,Zee,fUr,mUr,gUr,G0,D3e,hUr,pUr,eoe,_Ur,uUr,bUr,O0,G3e,vUr,FUr,ooe,TUr,MUr,EUr,V0,O3e,CUr,wUr,roe,AUr,LUr,yUr,X0,PVe,_f,z0,V3e,M$,xUr,X3e,$Ur,BVe,Mr,E$,kUr,uf,SUr,toe,RUr,PUr,aoe,BUr,IUr,NUr,C$,qUr,z3e,jUr,DUr,GUr,Zt,w$,OUr,Q3e,VUr,XUr,bf,zUr,W3e,QUr,WUr,noe,HUr,UUr,JUr,Q0,YUr,Jr,A$,KUr,H3e,ZUr,eJr,yn,oJr,U3e,rJr,tJr,J3e,aJr,nJr,Y3e,sJr,lJr,iJr,K3e,W0,Z3e,dJr,cJr,soe,fJr,mJr,gJr,H0,IVe,vf,U0,e0e,L$,hJr,o0e,pJr,NVe,Er,y$,_Jr,Ff,uJr,loe,bJr,vJr,ioe,FJr,TJr,MJr,x$,EJr,r0e,CJr,wJr,AJr,ea,$$,LJr,t0e,yJr,xJr,Tf,$Jr,a0e,kJr,SJr,doe,RJr,PJr,BJr,J0,IJr,Yr,k$,NJr,n0e,qJr,jJr,xn,DJr,s0e,GJr,OJr,l0e,VJr,XJr,i0e,zJr,QJr,WJr,S$,Y0,d0e,HJr,UJr,coe,JJr,YJr,KJr,K0,c0e,ZJr,eYr,foe,oYr,rYr,tYr,Z0,qVe,Mf,ew,f0e,R$,aYr,m0e,nYr,jVe,Cr,P$,sYr,Ef,lYr,moe,iYr,dYr,goe,cYr,fYr,mYr,B$,gYr,g0e,hYr,pYr,_Yr,oa,I$,uYr,h0e,bYr,vYr,Cf,FYr,p0e,TYr,MYr,hoe,EYr,CYr,wYr,ow,AYr,Kr,N$,LYr,_0e,yYr,xYr,$n,$Yr,u0e,kYr,SYr,b0e,RYr,PYr,v0e,BYr,IYr,NYr,F0e,rw,T0e,qYr,jYr,poe,DYr,GYr,OYr,tw,DVe;return d=new re({}),ya=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),y6=new re({}),x6=new P({props:{code:"",highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Rf=new VYr({props:{warning:!0,$$slots:{default:[gDt]},$$scope:{ctx:x}}}),$6=new re({}),k6=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/configuration_auto.py#L598"}}),P6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/configuration_auto.py#L621"}}),Gg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[hDt]},$$scope:{ctx:x}}}),B6=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/configuration_auto.py#L744"}}),I6=new re({}),N6=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/tokenization_auto.py#L400"}}),D6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17787/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/tokenization_auto.py#L414"}}),Eh=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[pDt]},$$scope:{ctx:x}}}),G6=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/tokenization_auto.py#L613"}}),O6=new re({}),V6=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/feature_extraction_auto.py#L193"}}),Q6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17787/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/feature_extraction_auto.py#L207"}}),ap=new VYr({props:{$$slots:{default:[_Dt]},$$scope:{ctx:x}}}),np=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[uDt]},$$scope:{ctx:x}}}),W6=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/feature_extraction_auto.py#L334"}}),H6=new re({}),U6=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/processing_auto.py#L88"}}),K6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/processing_auto.py#L102"}}),wp=new VYr({props:{$$slots:{default:[bDt]},$$scope:{ctx:x}}}),Ap=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[vDt]},$$scope:{ctx:x}}}),Z6=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/processing_auto.py#L255"}}),eL=new re({}),oL=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_auto.py#L766"}}),tL=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17787/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mvp#transformers.MvpModel">MvpModel</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),xp=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[FDt]},$$scope:{ctx:x}}}),aL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),xu=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[TDt]},$$scope:{ctx:x}}}),nL=new re({}),sL=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_auto.py#L773"}}),iL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),ku=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[MDt]},$$scope:{ctx:x}}}),dL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),E7=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[EDt]},$$scope:{ctx:x}}}),cL=new re({}),fL=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_auto.py#L788"}}),gL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mvp#transformers.MvpForCausalLM">MvpForCausalLM</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),w7=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[CDt]},$$scope:{ctx:x}}}),hL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),m1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[wDt]},$$scope:{ctx:x}}}),pL=new re({}),_L=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_auto.py#L795"}}),bL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),h1=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[ADt]},$$scope:{ctx:x}}}),vL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),Z1=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[LDt]},$$scope:{ctx:x}}}),FL=new re({}),TL=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_auto.py#L802"}}),EL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),o2=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[yDt]},$$scope:{ctx:x}}}),CL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),T2=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[xDt]},$$scope:{ctx:x}}}),wL=new re({}),AL=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_auto.py#L811"}}),yL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mvp#transformers.MvpForSequenceClassification">MvpForSequenceClassification</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),E2=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[$Dt]},$$scope:{ctx:x}}}),xL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),Fb=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[kDt]},$$scope:{ctx:x}}}),$L=new re({}),kL=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_auto.py#L856"}}),RL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),Mb=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[SDt]},$$scope:{ctx:x}}}),PL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),Zb=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[RDt]},$$scope:{ctx:x}}}),BL=new re({}),IL=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_auto.py#L863"}}),qL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),ov=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[PDt]},$$scope:{ctx:x}}}),jL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),iv=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[BDt]},$$scope:{ctx:x}}}),DL=new re({}),GL=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_auto.py#L849"}}),VL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),cv=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[IDt]},$$scope:{ctx:x}}}),XL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),Wv=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[NDt]},$$scope:{ctx:x}}}),zL=new re({}),QL=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_auto.py#L820"}}),HL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mvp#transformers.MvpForQuestionAnswering">MvpForQuestionAnswering</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),Uv=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[qDt]},$$scope:{ctx:x}}}),UL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),qF=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[jDt]},$$scope:{ctx:x}}}),JL=new re({}),YL=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_auto.py#L827"}}),ZL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),DF=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[DDt]},$$scope:{ctx:x}}}),ey=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),VF=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[GDt]},$$scope:{ctx:x}}}),oy=new re({}),ry=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_auto.py#L872"}}),ay=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17787/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/pr_17787/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17787/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17787/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),zF=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[ODt]},$$scope:{ctx:x}}}),ny=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),nT=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[VDt]},$$scope:{ctx:x}}}),sy=new re({}),ly=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_auto.py#L911"}}),dy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),lT=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[XDt]},$$scope:{ctx:x}}}),cy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),cT=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[zDt]},$$scope:{ctx:x}}}),fy=new re({}),my=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_auto.py#L838"}}),hy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),mT=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[QDt]},$$scope:{ctx:x}}}),py=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),pT=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[WDt]},$$scope:{ctx:x}}}),_y=new re({}),uy=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_auto.py#L918"}}),vy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),uT=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[HDt]},$$scope:{ctx:x}}}),Fy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),yT=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[UDt]},$$scope:{ctx:x}}}),Ty=new re({}),My=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_auto.py#L941"}}),Cy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),$T=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[JDt]},$$scope:{ctx:x}}}),wy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),NT=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[YDt]},$$scope:{ctx:x}}}),Ay=new re({}),Ly=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_auto.py#L925"}}),xy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),jT=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[KDt]},$$scope:{ctx:x}}}),$y=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),YT=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[ZDt]},$$scope:{ctx:x}}}),ky=new re({}),Sy=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_auto.py#L932"}}),Py=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),ZT=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[eGt]},$$scope:{ctx:x}}}),By=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),t8=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[oGt]},$$scope:{ctx:x}}}),Ny=new re({}),qy=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_auto.py#L950"}}),Dy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),n8=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[rGt]},$$scope:{ctx:x}}}),Gy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),m8=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[tGt]},$$scope:{ctx:x}}}),Oy=new re({}),Vy=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_auto.py#L957"}}),zy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),h8=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[aGt]},$$scope:{ctx:x}}}),Qy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),v8=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[nGt]},$$scope:{ctx:x}}}),Wy=new re({}),Hy=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_auto.py#L904"}}),Jy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),T8=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[sGt]},$$scope:{ctx:x}}}),Yy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),w8=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[lGt]},$$scope:{ctx:x}}}),Zy=new re({}),e9=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_auto.py#L879"}}),r9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),L8=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[iGt]},$$scope:{ctx:x}}}),t9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),$8=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[dGt]},$$scope:{ctx:x}}}),a9=new re({}),n9=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_auto.py#L886"}}),l9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),S8=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[cGt]},$$scope:{ctx:x}}}),i9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),q8=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[fGt]},$$scope:{ctx:x}}}),d9=new re({}),c9=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_auto.py#L895"}}),m9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),D8=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[mGt]},$$scope:{ctx:x}}}),g9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),V8=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[gGt]},$$scope:{ctx:x}}}),h9=new re({}),p9=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_tf_auto.py#L406"}}),u9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17787/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),z8=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[hGt]},$$scope:{ctx:x}}}),b9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),qM=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[pGt]},$$scope:{ctx:x}}}),v9=new re({}),F9=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_tf_auto.py#L413"}}),M9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),DM=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[_Gt]},$$scope:{ctx:x}}}),E9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),cE=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[uGt]},$$scope:{ctx:x}}}),C9=new re({}),w9=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_tf_auto.py#L428"}}),L9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),mE=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[bGt]},$$scope:{ctx:x}}}),y9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),AE=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[vGt]},$$scope:{ctx:x}}}),x9=new re({}),$9=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_tf_auto.py#L444"}}),S9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),yE=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[FGt]},$$scope:{ctx:x}}}),R9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),RE=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[TGt]},$$scope:{ctx:x}}}),P9=new re({}),B9=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_tf_auto.py#L469"}}),N9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),BE=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[MGt]},$$scope:{ctx:x}}}),q9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),r4=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[EGt]},$$scope:{ctx:x}}}),j9=new re({}),D9=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_tf_auto.py#L476"}}),O9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),a4=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[CGt]},$$scope:{ctx:x}}}),V9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),p4=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[wGt]},$$scope:{ctx:x}}}),X9=new re({}),z9=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_tf_auto.py#L485"}}),W9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),u4=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[AGt]},$$scope:{ctx:x}}}),H9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),X4=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[LGt]},$$scope:{ctx:x}}}),U9=new re({}),J9=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_tf_auto.py#L521"}}),K9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),Q4=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[yGt]},$$scope:{ctx:x}}}),Z9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),cC=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[xGt]},$$scope:{ctx:x}}}),ex=new re({}),ox=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_tf_auto.py#L528"}}),tx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),mC=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[$Gt]},$$scope:{ctx:x}}}),ax=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),pC=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[kGt]},$$scope:{ctx:x}}}),sx=new re({}),lx=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_tf_auto.py#L501"}}),dx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),uC=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[SGt]},$$scope:{ctx:x}}}),cx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),vC=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[RGt]},$$scope:{ctx:x}}}),fx=new re({}),mx=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_tf_auto.py#L512"}}),hx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),TC=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[PGt]},$$scope:{ctx:x}}}),px=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),OC=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[BGt]},$$scope:{ctx:x}}}),_x=new re({}),ux=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_tf_auto.py#L494"}}),vx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),XC=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[IGt]},$$scope:{ctx:x}}}),Fx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),f5=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[NGt]},$$scope:{ctx:x}}}),Tx=new re({}),Mx=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_tf_auto.py#L462"}}),Cx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),g5=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[qGt]},$$scope:{ctx:x}}}),wx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),p5=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[jGt]},$$scope:{ctx:x}}}),Ax=new re({}),Lx=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_tf_auto.py#L537"}}),xx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),u5=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[DGt]},$$scope:{ctx:x}}}),$x=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),v5=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[GGt]},$$scope:{ctx:x}}}),kx=new re({}),Sx=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),Px=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),T5=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[OGt]},$$scope:{ctx:x}}}),Bx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),U5=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[VGt]},$$scope:{ctx:x}}}),Ix=new re({}),Nx=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),jx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),Y5=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[XGt]},$$scope:{ctx:x}}}),Dx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),i3=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[zGt]},$$scope:{ctx:x}}}),Gx=new re({}),Ox=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),Xx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),c3=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[QGt]},$$scope:{ctx:x}}}),zx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),C3=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[WGt]},$$scope:{ctx:x}}}),Qx=new re({}),Wx=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),Ux=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),A3=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[HGt]},$$scope:{ctx:x}}}),Jx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),N3=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[UGt]},$$scope:{ctx:x}}}),Yx=new re({}),Kx=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),e$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),j3=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[JGt]},$$scope:{ctx:x}}}),o$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),J3=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[YGt]},$$scope:{ctx:x}}}),r$=new re({}),t$=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),n$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),K3=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[KGt]},$$scope:{ctx:x}}}),s$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),d0=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[ZGt]},$$scope:{ctx:x}}}),l$=new re({}),i$=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),c$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),f0=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[eOt]},$$scope:{ctx:x}}}),f$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),M0=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[oOt]},$$scope:{ctx:x}}}),m$=new re({}),g$=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),p$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),C0=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[rOt]},$$scope:{ctx:x}}}),_$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),R0=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[tOt]},$$scope:{ctx:x}}}),u$=new re({}),b$=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),F$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),B0=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[aOt]},$$scope:{ctx:x}}}),T$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),X0=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[nOt]},$$scope:{ctx:x}}}),M$=new re({}),E$=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),w$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),Q0=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[sOt]},$$scope:{ctx:x}}}),A$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),H0=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[lOt]},$$scope:{ctx:x}}}),L$=new re({}),y$=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),$$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17787/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),J0=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[iOt]},$$scope:{ctx:x}}}),k$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),Z0=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[dOt]},$$scope:{ctx:x}}}),R$=new re({}),P$=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),I$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17787/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17787/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L389"}}),ow=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[cOt]},$$scope:{ctx:x}}}),N$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17787/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17787/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17787/src/transformers/models/auto/auto_factory.py#L417"}}),tw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[fOt]},$$scope:{ctx:x}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Eo=a("span"),Ti=o("Auto Classes"),yf=l(),at=a("p"),Mi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ei=a("code"),C6=o("from_pretrained()"),xf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Oe=l(),Qe=a("p"),Ci=o("Instantiating one of "),Sn=a("a"),w6=o("AutoConfig"),Rn=o(", "),Pn=a("a"),A6=o("AutoModel"),wi=o(`, and
`),Bn=a("a"),L6=o("AutoTokenizer"),Ai=o(" will directly create a class of the relevant architecture. For instance"),$f=l(),F(ya.$$.fragment),We=l(),Ae=a("p"),oS=o("will create a model that is an instance of "),Li=a("a"),rS=o("BertModel"),tS=o("."),Co=l(),xa=a("p"),aS=o("There is one class of "),kf=a("code"),nS=o("AutoModel"),Jze=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),BGe=l(),yi=a("h2"),Sf=a("a"),cte=a("span"),F(y6.$$.fragment),Yze=l(),fte=a("span"),Kze=o("Extending the Auto Classes"),IGe=l(),In=a("p"),Zze=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),mte=a("code"),eQe=o("NewModel"),oQe=o(", make sure you have a "),gte=a("code"),rQe=o("NewModelConfig"),tQe=o(` then you can add those to the auto
classes like this:`),NGe=l(),F(x6.$$.fragment),qGe=l(),sS=a("p"),aQe=o("You will then be able to use the auto classes like you would usually do!"),jGe=l(),F(Rf.$$.fragment),DGe=l(),xi=a("h2"),Pf=a("a"),hte=a("span"),F($6.$$.fragment),nQe=l(),pte=a("span"),sQe=o("AutoConfig"),GGe=l(),wo=a("div"),F(k6.$$.fragment),lQe=l(),S6=a("p"),iQe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),lS=a("a"),dQe=o("from_pretrained()"),cQe=o(" class method."),fQe=l(),R6=a("p"),mQe=o("This class cannot be instantiated directly using "),_te=a("code"),gQe=o("__init__()"),hQe=o(" (throws an error)."),pQe=l(),wr=a("div"),F(P6.$$.fragment),_Qe=l(),ute=a("p"),uQe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),bQe=l(),$i=a("p"),vQe=o("The configuration class to instantiate is selected based on the "),bte=a("code"),FQe=o("model_type"),TQe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),vte=a("code"),MQe=o("pretrained_model_name_or_path"),EQe=o(":"),CQe=l(),A=a("ul"),Bf=a("li"),Fte=a("strong"),wQe=o("albert"),AQe=o(" \u2014 "),iS=a("a"),LQe=o("AlbertConfig"),yQe=o(" (ALBERT model)"),xQe=l(),If=a("li"),Tte=a("strong"),$Qe=o("bart"),kQe=o(" \u2014 "),dS=a("a"),SQe=o("BartConfig"),RQe=o(" (BART model)"),PQe=l(),Nf=a("li"),Mte=a("strong"),BQe=o("beit"),IQe=o(" \u2014 "),cS=a("a"),NQe=o("BeitConfig"),qQe=o(" (BEiT model)"),jQe=l(),qf=a("li"),Ete=a("strong"),DQe=o("bert"),GQe=o(" \u2014 "),fS=a("a"),OQe=o("BertConfig"),VQe=o(" (BERT model)"),XQe=l(),jf=a("li"),Cte=a("strong"),zQe=o("bert-generation"),QQe=o(" \u2014 "),mS=a("a"),WQe=o("BertGenerationConfig"),HQe=o(" (Bert Generation model)"),UQe=l(),Df=a("li"),wte=a("strong"),JQe=o("big_bird"),YQe=o(" \u2014 "),gS=a("a"),KQe=o("BigBirdConfig"),ZQe=o(" (BigBird model)"),eWe=l(),Gf=a("li"),Ate=a("strong"),oWe=o("bigbird_pegasus"),rWe=o(" \u2014 "),hS=a("a"),tWe=o("BigBirdPegasusConfig"),aWe=o(" (BigBird-Pegasus model)"),nWe=l(),Of=a("li"),Lte=a("strong"),sWe=o("blenderbot"),lWe=o(" \u2014 "),pS=a("a"),iWe=o("BlenderbotConfig"),dWe=o(" (Blenderbot model)"),cWe=l(),Vf=a("li"),yte=a("strong"),fWe=o("blenderbot-small"),mWe=o(" \u2014 "),_S=a("a"),gWe=o("BlenderbotSmallConfig"),hWe=o(" (BlenderbotSmall model)"),pWe=l(),Xf=a("li"),xte=a("strong"),_We=o("bloom"),uWe=o(" \u2014 "),uS=a("a"),bWe=o("BloomConfig"),vWe=o(" (BLOOM model)"),FWe=l(),zf=a("li"),$te=a("strong"),TWe=o("camembert"),MWe=o(" \u2014 "),bS=a("a"),EWe=o("CamembertConfig"),CWe=o(" (CamemBERT model)"),wWe=l(),Qf=a("li"),kte=a("strong"),AWe=o("canine"),LWe=o(" \u2014 "),vS=a("a"),yWe=o("CanineConfig"),xWe=o(" (CANINE model)"),$We=l(),Wf=a("li"),Ste=a("strong"),kWe=o("clip"),SWe=o(" \u2014 "),FS=a("a"),RWe=o("CLIPConfig"),PWe=o(" (CLIP model)"),BWe=l(),Hf=a("li"),Rte=a("strong"),IWe=o("convbert"),NWe=o(" \u2014 "),TS=a("a"),qWe=o("ConvBertConfig"),jWe=o(" (ConvBERT model)"),DWe=l(),Uf=a("li"),Pte=a("strong"),GWe=o("convnext"),OWe=o(" \u2014 "),MS=a("a"),VWe=o("ConvNextConfig"),XWe=o(" (ConvNeXT model)"),zWe=l(),Jf=a("li"),Bte=a("strong"),QWe=o("ctrl"),WWe=o(" \u2014 "),ES=a("a"),HWe=o("CTRLConfig"),UWe=o(" (CTRL model)"),JWe=l(),Yf=a("li"),Ite=a("strong"),YWe=o("cvt"),KWe=o(" \u2014 "),CS=a("a"),ZWe=o("CvtConfig"),eHe=o(" (CvT model)"),oHe=l(),Kf=a("li"),Nte=a("strong"),rHe=o("data2vec-audio"),tHe=o(" \u2014 "),wS=a("a"),aHe=o("Data2VecAudioConfig"),nHe=o(" (Data2VecAudio model)"),sHe=l(),Zf=a("li"),qte=a("strong"),lHe=o("data2vec-text"),iHe=o(" \u2014 "),AS=a("a"),dHe=o("Data2VecTextConfig"),cHe=o(" (Data2VecText model)"),fHe=l(),em=a("li"),jte=a("strong"),mHe=o("data2vec-vision"),gHe=o(" \u2014 "),LS=a("a"),hHe=o("Data2VecVisionConfig"),pHe=o(" (Data2VecVision model)"),_He=l(),om=a("li"),Dte=a("strong"),uHe=o("deberta"),bHe=o(" \u2014 "),yS=a("a"),vHe=o("DebertaConfig"),FHe=o(" (DeBERTa model)"),THe=l(),rm=a("li"),Gte=a("strong"),MHe=o("deberta-v2"),EHe=o(" \u2014 "),xS=a("a"),CHe=o("DebertaV2Config"),wHe=o(" (DeBERTa-v2 model)"),AHe=l(),tm=a("li"),Ote=a("strong"),LHe=o("decision_transformer"),yHe=o(" \u2014 "),$S=a("a"),xHe=o("DecisionTransformerConfig"),$He=o(" (Decision Transformer model)"),kHe=l(),am=a("li"),Vte=a("strong"),SHe=o("deit"),RHe=o(" \u2014 "),kS=a("a"),PHe=o("DeiTConfig"),BHe=o(" (DeiT model)"),IHe=l(),nm=a("li"),Xte=a("strong"),NHe=o("detr"),qHe=o(" \u2014 "),SS=a("a"),jHe=o("DetrConfig"),DHe=o(" (DETR model)"),GHe=l(),sm=a("li"),zte=a("strong"),OHe=o("distilbert"),VHe=o(" \u2014 "),RS=a("a"),XHe=o("DistilBertConfig"),zHe=o(" (DistilBERT model)"),QHe=l(),lm=a("li"),Qte=a("strong"),WHe=o("dpr"),HHe=o(" \u2014 "),PS=a("a"),UHe=o("DPRConfig"),JHe=o(" (DPR model)"),YHe=l(),im=a("li"),Wte=a("strong"),KHe=o("dpt"),ZHe=o(" \u2014 "),BS=a("a"),eUe=o("DPTConfig"),oUe=o(" (DPT model)"),rUe=l(),dm=a("li"),Hte=a("strong"),tUe=o("electra"),aUe=o(" \u2014 "),IS=a("a"),nUe=o("ElectraConfig"),sUe=o(" (ELECTRA model)"),lUe=l(),cm=a("li"),Ute=a("strong"),iUe=o("encoder-decoder"),dUe=o(" \u2014 "),NS=a("a"),cUe=o("EncoderDecoderConfig"),fUe=o(" (Encoder decoder model)"),mUe=l(),fm=a("li"),Jte=a("strong"),gUe=o("flaubert"),hUe=o(" \u2014 "),qS=a("a"),pUe=o("FlaubertConfig"),_Ue=o(" (FlauBERT model)"),uUe=l(),mm=a("li"),Yte=a("strong"),bUe=o("flava"),vUe=o(" \u2014 "),jS=a("a"),FUe=o("FlavaConfig"),TUe=o(" (FLAVA model)"),MUe=l(),gm=a("li"),Kte=a("strong"),EUe=o("fnet"),CUe=o(" \u2014 "),DS=a("a"),wUe=o("FNetConfig"),AUe=o(" (FNet model)"),LUe=l(),hm=a("li"),Zte=a("strong"),yUe=o("fsmt"),xUe=o(" \u2014 "),GS=a("a"),$Ue=o("FSMTConfig"),kUe=o(" (FairSeq Machine-Translation model)"),SUe=l(),pm=a("li"),eae=a("strong"),RUe=o("funnel"),PUe=o(" \u2014 "),OS=a("a"),BUe=o("FunnelConfig"),IUe=o(" (Funnel Transformer model)"),NUe=l(),_m=a("li"),oae=a("strong"),qUe=o("glpn"),jUe=o(" \u2014 "),VS=a("a"),DUe=o("GLPNConfig"),GUe=o(" (GLPN model)"),OUe=l(),um=a("li"),rae=a("strong"),VUe=o("gpt2"),XUe=o(" \u2014 "),XS=a("a"),zUe=o("GPT2Config"),QUe=o(" (OpenAI GPT-2 model)"),WUe=l(),bm=a("li"),tae=a("strong"),HUe=o("gpt_neo"),UUe=o(" \u2014 "),zS=a("a"),JUe=o("GPTNeoConfig"),YUe=o(" (GPT Neo model)"),KUe=l(),vm=a("li"),aae=a("strong"),ZUe=o("gpt_neox"),eJe=o(" \u2014 "),QS=a("a"),oJe=o("GPTNeoXConfig"),rJe=o(" (GPT NeoX model)"),tJe=l(),Fm=a("li"),nae=a("strong"),aJe=o("gptj"),nJe=o(" \u2014 "),WS=a("a"),sJe=o("GPTJConfig"),lJe=o(" (GPT-J model)"),iJe=l(),Tm=a("li"),sae=a("strong"),dJe=o("hubert"),cJe=o(" \u2014 "),HS=a("a"),fJe=o("HubertConfig"),mJe=o(" (Hubert model)"),gJe=l(),Mm=a("li"),lae=a("strong"),hJe=o("ibert"),pJe=o(" \u2014 "),US=a("a"),_Je=o("IBertConfig"),uJe=o(" (I-BERT model)"),bJe=l(),Em=a("li"),iae=a("strong"),vJe=o("imagegpt"),FJe=o(" \u2014 "),JS=a("a"),TJe=o("ImageGPTConfig"),MJe=o(" (ImageGPT model)"),EJe=l(),Cm=a("li"),dae=a("strong"),CJe=o("layoutlm"),wJe=o(" \u2014 "),YS=a("a"),AJe=o("LayoutLMConfig"),LJe=o(" (LayoutLM model)"),yJe=l(),wm=a("li"),cae=a("strong"),xJe=o("layoutlmv2"),$Je=o(" \u2014 "),KS=a("a"),kJe=o("LayoutLMv2Config"),SJe=o(" (LayoutLMv2 model)"),RJe=l(),Am=a("li"),fae=a("strong"),PJe=o("layoutlmv3"),BJe=o(" \u2014 "),ZS=a("a"),IJe=o("LayoutLMv3Config"),NJe=o(" (LayoutLMv3 model)"),qJe=l(),Lm=a("li"),mae=a("strong"),jJe=o("led"),DJe=o(" \u2014 "),eR=a("a"),GJe=o("LEDConfig"),OJe=o(" (LED model)"),VJe=l(),ym=a("li"),gae=a("strong"),XJe=o("levit"),zJe=o(" \u2014 "),oR=a("a"),QJe=o("LevitConfig"),WJe=o(" (LeViT model)"),HJe=l(),xm=a("li"),hae=a("strong"),UJe=o("longformer"),JJe=o(" \u2014 "),rR=a("a"),YJe=o("LongformerConfig"),KJe=o(" (Longformer model)"),ZJe=l(),$m=a("li"),pae=a("strong"),eYe=o("longt5"),oYe=o(" \u2014 "),tR=a("a"),rYe=o("LongT5Config"),tYe=o(" (LongT5 model)"),aYe=l(),km=a("li"),_ae=a("strong"),nYe=o("luke"),sYe=o(" \u2014 "),aR=a("a"),lYe=o("LukeConfig"),iYe=o(" (LUKE model)"),dYe=l(),Sm=a("li"),uae=a("strong"),cYe=o("lxmert"),fYe=o(" \u2014 "),nR=a("a"),mYe=o("LxmertConfig"),gYe=o(" (LXMERT model)"),hYe=l(),Rm=a("li"),bae=a("strong"),pYe=o("m2m_100"),_Ye=o(" \u2014 "),sR=a("a"),uYe=o("M2M100Config"),bYe=o(" (M2M100 model)"),vYe=l(),Pm=a("li"),vae=a("strong"),FYe=o("marian"),TYe=o(" \u2014 "),lR=a("a"),MYe=o("MarianConfig"),EYe=o(" (Marian model)"),CYe=l(),Bm=a("li"),Fae=a("strong"),wYe=o("maskformer"),AYe=o(" \u2014 "),iR=a("a"),LYe=o("MaskFormerConfig"),yYe=o(" (MaskFormer model)"),xYe=l(),Im=a("li"),Tae=a("strong"),$Ye=o("mbart"),kYe=o(" \u2014 "),dR=a("a"),SYe=o("MBartConfig"),RYe=o(" (mBART model)"),PYe=l(),Nm=a("li"),Mae=a("strong"),BYe=o("mctct"),IYe=o(" \u2014 "),cR=a("a"),NYe=o("MCTCTConfig"),qYe=o(" (M-CTC-T model)"),jYe=l(),qm=a("li"),Eae=a("strong"),DYe=o("megatron-bert"),GYe=o(" \u2014 "),fR=a("a"),OYe=o("MegatronBertConfig"),VYe=o(" (Megatron-BERT model)"),XYe=l(),jm=a("li"),Cae=a("strong"),zYe=o("mobilebert"),QYe=o(" \u2014 "),mR=a("a"),WYe=o("MobileBertConfig"),HYe=o(" (MobileBERT model)"),UYe=l(),Dm=a("li"),wae=a("strong"),JYe=o("mpnet"),YYe=o(" \u2014 "),gR=a("a"),KYe=o("MPNetConfig"),ZYe=o(" (MPNet model)"),eKe=l(),Gm=a("li"),Aae=a("strong"),oKe=o("mt5"),rKe=o(" \u2014 "),hR=a("a"),tKe=o("MT5Config"),aKe=o(" (MT5 model)"),nKe=l(),Om=a("li"),Lae=a("strong"),sKe=o("mvp"),lKe=o(" \u2014 "),pR=a("a"),iKe=o("MvpConfig"),dKe=o(" (MVP model)"),cKe=l(),Vm=a("li"),yae=a("strong"),fKe=o("nystromformer"),mKe=o(" \u2014 "),_R=a("a"),gKe=o("NystromformerConfig"),hKe=o(" (Nystr\xF6mformer model)"),pKe=l(),Xm=a("li"),xae=a("strong"),_Ke=o("openai-gpt"),uKe=o(" \u2014 "),uR=a("a"),bKe=o("OpenAIGPTConfig"),vKe=o(" (OpenAI GPT model)"),FKe=l(),zm=a("li"),$ae=a("strong"),TKe=o("opt"),MKe=o(" \u2014 "),bR=a("a"),EKe=o("OPTConfig"),CKe=o(" (OPT model)"),wKe=l(),Qm=a("li"),kae=a("strong"),AKe=o("pegasus"),LKe=o(" \u2014 "),vR=a("a"),yKe=o("PegasusConfig"),xKe=o(" (Pegasus model)"),$Ke=l(),Wm=a("li"),Sae=a("strong"),kKe=o("perceiver"),SKe=o(" \u2014 "),FR=a("a"),RKe=o("PerceiverConfig"),PKe=o(" (Perceiver model)"),BKe=l(),Hm=a("li"),Rae=a("strong"),IKe=o("plbart"),NKe=o(" \u2014 "),TR=a("a"),qKe=o("PLBartConfig"),jKe=o(" (PLBart model)"),DKe=l(),Um=a("li"),Pae=a("strong"),GKe=o("poolformer"),OKe=o(" \u2014 "),MR=a("a"),VKe=o("PoolFormerConfig"),XKe=o(" (PoolFormer model)"),zKe=l(),Jm=a("li"),Bae=a("strong"),QKe=o("prophetnet"),WKe=o(" \u2014 "),ER=a("a"),HKe=o("ProphetNetConfig"),UKe=o(" (ProphetNet model)"),JKe=l(),Ym=a("li"),Iae=a("strong"),YKe=o("qdqbert"),KKe=o(" \u2014 "),CR=a("a"),ZKe=o("QDQBertConfig"),eZe=o(" (QDQBert model)"),oZe=l(),Km=a("li"),Nae=a("strong"),rZe=o("rag"),tZe=o(" \u2014 "),wR=a("a"),aZe=o("RagConfig"),nZe=o(" (RAG model)"),sZe=l(),Zm=a("li"),qae=a("strong"),lZe=o("realm"),iZe=o(" \u2014 "),AR=a("a"),dZe=o("RealmConfig"),cZe=o(" (REALM model)"),fZe=l(),eg=a("li"),jae=a("strong"),mZe=o("reformer"),gZe=o(" \u2014 "),LR=a("a"),hZe=o("ReformerConfig"),pZe=o(" (Reformer model)"),_Ze=l(),og=a("li"),Dae=a("strong"),uZe=o("regnet"),bZe=o(" \u2014 "),yR=a("a"),vZe=o("RegNetConfig"),FZe=o(" (RegNet model)"),TZe=l(),rg=a("li"),Gae=a("strong"),MZe=o("rembert"),EZe=o(" \u2014 "),xR=a("a"),CZe=o("RemBertConfig"),wZe=o(" (RemBERT model)"),AZe=l(),tg=a("li"),Oae=a("strong"),LZe=o("resnet"),yZe=o(" \u2014 "),$R=a("a"),xZe=o("ResNetConfig"),$Ze=o(" (ResNet model)"),kZe=l(),ag=a("li"),Vae=a("strong"),SZe=o("retribert"),RZe=o(" \u2014 "),kR=a("a"),PZe=o("RetriBertConfig"),BZe=o(" (RetriBERT model)"),IZe=l(),ng=a("li"),Xae=a("strong"),NZe=o("roberta"),qZe=o(" \u2014 "),SR=a("a"),jZe=o("RobertaConfig"),DZe=o(" (RoBERTa model)"),GZe=l(),sg=a("li"),zae=a("strong"),OZe=o("roformer"),VZe=o(" \u2014 "),RR=a("a"),XZe=o("RoFormerConfig"),zZe=o(" (RoFormer model)"),QZe=l(),lg=a("li"),Qae=a("strong"),WZe=o("segformer"),HZe=o(" \u2014 "),PR=a("a"),UZe=o("SegformerConfig"),JZe=o(" (SegFormer model)"),YZe=l(),ig=a("li"),Wae=a("strong"),KZe=o("sew"),ZZe=o(" \u2014 "),BR=a("a"),eeo=o("SEWConfig"),oeo=o(" (SEW model)"),reo=l(),dg=a("li"),Hae=a("strong"),teo=o("sew-d"),aeo=o(" \u2014 "),IR=a("a"),neo=o("SEWDConfig"),seo=o(" (SEW-D model)"),leo=l(),cg=a("li"),Uae=a("strong"),ieo=o("speech-encoder-decoder"),deo=o(" \u2014 "),NR=a("a"),ceo=o("SpeechEncoderDecoderConfig"),feo=o(" (Speech Encoder decoder model)"),meo=l(),fg=a("li"),Jae=a("strong"),geo=o("speech_to_text"),heo=o(" \u2014 "),qR=a("a"),peo=o("Speech2TextConfig"),_eo=o(" (Speech2Text model)"),ueo=l(),mg=a("li"),Yae=a("strong"),beo=o("speech_to_text_2"),veo=o(" \u2014 "),jR=a("a"),Feo=o("Speech2Text2Config"),Teo=o(" (Speech2Text2 model)"),Meo=l(),gg=a("li"),Kae=a("strong"),Eeo=o("splinter"),Ceo=o(" \u2014 "),DR=a("a"),weo=o("SplinterConfig"),Aeo=o(" (Splinter model)"),Leo=l(),hg=a("li"),Zae=a("strong"),yeo=o("squeezebert"),xeo=o(" \u2014 "),GR=a("a"),$eo=o("SqueezeBertConfig"),keo=o(" (SqueezeBERT model)"),Seo=l(),pg=a("li"),ene=a("strong"),Reo=o("swin"),Peo=o(" \u2014 "),OR=a("a"),Beo=o("SwinConfig"),Ieo=o(" (Swin Transformer model)"),Neo=l(),_g=a("li"),one=a("strong"),qeo=o("t5"),jeo=o(" \u2014 "),VR=a("a"),Deo=o("T5Config"),Geo=o(" (T5 model)"),Oeo=l(),ug=a("li"),rne=a("strong"),Veo=o("tapas"),Xeo=o(" \u2014 "),XR=a("a"),zeo=o("TapasConfig"),Qeo=o(" (TAPAS model)"),Weo=l(),bg=a("li"),tne=a("strong"),Heo=o("trajectory_transformer"),Ueo=o(" \u2014 "),zR=a("a"),Jeo=o("TrajectoryTransformerConfig"),Yeo=o(" (Trajectory Transformer model)"),Keo=l(),vg=a("li"),ane=a("strong"),Zeo=o("transfo-xl"),eoo=o(" \u2014 "),QR=a("a"),ooo=o("TransfoXLConfig"),roo=o(" (Transformer-XL model)"),too=l(),Fg=a("li"),nne=a("strong"),aoo=o("trocr"),noo=o(" \u2014 "),WR=a("a"),soo=o("TrOCRConfig"),loo=o(" (TrOCR model)"),ioo=l(),Tg=a("li"),sne=a("strong"),doo=o("unispeech"),coo=o(" \u2014 "),HR=a("a"),foo=o("UniSpeechConfig"),moo=o(" (UniSpeech model)"),goo=l(),Mg=a("li"),lne=a("strong"),hoo=o("unispeech-sat"),poo=o(" \u2014 "),UR=a("a"),_oo=o("UniSpeechSatConfig"),uoo=o(" (UniSpeechSat model)"),boo=l(),Eg=a("li"),ine=a("strong"),voo=o("van"),Foo=o(" \u2014 "),JR=a("a"),Too=o("VanConfig"),Moo=o(" (VAN model)"),Eoo=l(),Cg=a("li"),dne=a("strong"),Coo=o("vilt"),woo=o(" \u2014 "),YR=a("a"),Aoo=o("ViltConfig"),Loo=o(" (ViLT model)"),yoo=l(),wg=a("li"),cne=a("strong"),xoo=o("vision-encoder-decoder"),$oo=o(" \u2014 "),KR=a("a"),koo=o("VisionEncoderDecoderConfig"),Soo=o(" (Vision Encoder decoder model)"),Roo=l(),Ag=a("li"),fne=a("strong"),Poo=o("vision-text-dual-encoder"),Boo=o(" \u2014 "),ZR=a("a"),Ioo=o("VisionTextDualEncoderConfig"),Noo=o(" (VisionTextDualEncoder model)"),qoo=l(),Lg=a("li"),mne=a("strong"),joo=o("visual_bert"),Doo=o(" \u2014 "),eP=a("a"),Goo=o("VisualBertConfig"),Ooo=o(" (VisualBERT model)"),Voo=l(),yg=a("li"),gne=a("strong"),Xoo=o("vit"),zoo=o(" \u2014 "),oP=a("a"),Qoo=o("ViTConfig"),Woo=o(" (ViT model)"),Hoo=l(),xg=a("li"),hne=a("strong"),Uoo=o("vit_mae"),Joo=o(" \u2014 "),rP=a("a"),Yoo=o("ViTMAEConfig"),Koo=o(" (ViTMAE model)"),Zoo=l(),$g=a("li"),pne=a("strong"),ero=o("wav2vec2"),oro=o(" \u2014 "),tP=a("a"),rro=o("Wav2Vec2Config"),tro=o(" (Wav2Vec2 model)"),aro=l(),kg=a("li"),_ne=a("strong"),nro=o("wav2vec2-conformer"),sro=o(" \u2014 "),aP=a("a"),lro=o("Wav2Vec2ConformerConfig"),iro=o(" (Wav2Vec2-Conformer model)"),dro=l(),Sg=a("li"),une=a("strong"),cro=o("wavlm"),fro=o(" \u2014 "),nP=a("a"),mro=o("WavLMConfig"),gro=o(" (WavLM model)"),hro=l(),Rg=a("li"),bne=a("strong"),pro=o("xglm"),_ro=o(" \u2014 "),sP=a("a"),uro=o("XGLMConfig"),bro=o(" (XGLM model)"),vro=l(),Pg=a("li"),vne=a("strong"),Fro=o("xlm"),Tro=o(" \u2014 "),lP=a("a"),Mro=o("XLMConfig"),Ero=o(" (XLM model)"),Cro=l(),Bg=a("li"),Fne=a("strong"),wro=o("xlm-prophetnet"),Aro=o(" \u2014 "),iP=a("a"),Lro=o("XLMProphetNetConfig"),yro=o(" (XLM-ProphetNet model)"),xro=l(),Ig=a("li"),Tne=a("strong"),$ro=o("xlm-roberta"),kro=o(" \u2014 "),dP=a("a"),Sro=o("XLMRobertaConfig"),Rro=o(" (XLM-RoBERTa model)"),Pro=l(),Ng=a("li"),Mne=a("strong"),Bro=o("xlm-roberta-xl"),Iro=o(" \u2014 "),cP=a("a"),Nro=o("XLMRobertaXLConfig"),qro=o(" (XLM-RoBERTa-XL model)"),jro=l(),qg=a("li"),Ene=a("strong"),Dro=o("xlnet"),Gro=o(" \u2014 "),fP=a("a"),Oro=o("XLNetConfig"),Vro=o(" (XLNet model)"),Xro=l(),jg=a("li"),Cne=a("strong"),zro=o("yolos"),Qro=o(" \u2014 "),mP=a("a"),Wro=o("YolosConfig"),Hro=o(" (YOLOS model)"),Uro=l(),Dg=a("li"),wne=a("strong"),Jro=o("yoso"),Yro=o(" \u2014 "),gP=a("a"),Kro=o("YosoConfig"),Zro=o(" (YOSO model)"),eto=l(),F(Gg.$$.fragment),oto=l(),Og=a("div"),F(B6.$$.fragment),rto=l(),Ane=a("p"),tto=o("Register a new configuration for this class."),OGe=l(),ki=a("h2"),Vg=a("a"),Lne=a("span"),F(I6.$$.fragment),ato=l(),yne=a("span"),nto=o("AutoTokenizer"),VGe=l(),Ao=a("div"),F(N6.$$.fragment),sto=l(),q6=a("p"),lto=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),hP=a("a"),ito=o("AutoTokenizer.from_pretrained()"),dto=o(" class method."),cto=l(),j6=a("p"),fto=o("This class cannot be instantiated directly using "),xne=a("code"),mto=o("__init__()"),gto=o(" (throws an error)."),hto=l(),Ar=a("div"),F(D6.$$.fragment),pto=l(),$ne=a("p"),_to=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),uto=l(),$a=a("p"),bto=o("The tokenizer class to instantiate is selected based on the "),kne=a("code"),vto=o("model_type"),Fto=o(` property of the config object (either
passed as an argument or loaded from `),Sne=a("code"),Tto=o("pretrained_model_name_or_path"),Mto=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rne=a("code"),Eto=o("pretrained_model_name_or_path"),Cto=o(":"),wto=l(),k=a("ul"),Nn=a("li"),Pne=a("strong"),Ato=o("albert"),Lto=o(" \u2014 "),pP=a("a"),yto=o("AlbertTokenizer"),xto=o(" or "),_P=a("a"),$to=o("AlbertTokenizerFast"),kto=o(" (ALBERT model)"),Sto=l(),qn=a("li"),Bne=a("strong"),Rto=o("bart"),Pto=o(" \u2014 "),uP=a("a"),Bto=o("BartTokenizer"),Ito=o(" or "),bP=a("a"),Nto=o("BartTokenizerFast"),qto=o(" (BART model)"),jto=l(),jn=a("li"),Ine=a("strong"),Dto=o("barthez"),Gto=o(" \u2014 "),vP=a("a"),Oto=o("BarthezTokenizer"),Vto=o(" or "),FP=a("a"),Xto=o("BarthezTokenizerFast"),zto=o(" (BARThez model)"),Qto=l(),Xg=a("li"),Nne=a("strong"),Wto=o("bartpho"),Hto=o(" \u2014 "),TP=a("a"),Uto=o("BartphoTokenizer"),Jto=o(" (BARTpho model)"),Yto=l(),Dn=a("li"),qne=a("strong"),Kto=o("bert"),Zto=o(" \u2014 "),MP=a("a"),eao=o("BertTokenizer"),oao=o(" or "),EP=a("a"),rao=o("BertTokenizerFast"),tao=o(" (BERT model)"),aao=l(),zg=a("li"),jne=a("strong"),nao=o("bert-generation"),sao=o(" \u2014 "),CP=a("a"),lao=o("BertGenerationTokenizer"),iao=o(" (Bert Generation model)"),dao=l(),Qg=a("li"),Dne=a("strong"),cao=o("bert-japanese"),fao=o(" \u2014 "),wP=a("a"),mao=o("BertJapaneseTokenizer"),gao=o(" (BertJapanese model)"),hao=l(),Wg=a("li"),Gne=a("strong"),pao=o("bertweet"),_ao=o(" \u2014 "),AP=a("a"),uao=o("BertweetTokenizer"),bao=o(" (BERTweet model)"),vao=l(),Gn=a("li"),One=a("strong"),Fao=o("big_bird"),Tao=o(" \u2014 "),LP=a("a"),Mao=o("BigBirdTokenizer"),Eao=o(" or "),yP=a("a"),Cao=o("BigBirdTokenizerFast"),wao=o(" (BigBird model)"),Aao=l(),On=a("li"),Vne=a("strong"),Lao=o("bigbird_pegasus"),yao=o(" \u2014 "),xP=a("a"),xao=o("PegasusTokenizer"),$ao=o(" or "),$P=a("a"),kao=o("PegasusTokenizerFast"),Sao=o(" (BigBird-Pegasus model)"),Rao=l(),Vn=a("li"),Xne=a("strong"),Pao=o("blenderbot"),Bao=o(" \u2014 "),kP=a("a"),Iao=o("BlenderbotTokenizer"),Nao=o(" or "),SP=a("a"),qao=o("BlenderbotTokenizerFast"),jao=o(" (Blenderbot model)"),Dao=l(),Hg=a("li"),zne=a("strong"),Gao=o("blenderbot-small"),Oao=o(" \u2014 "),RP=a("a"),Vao=o("BlenderbotSmallTokenizer"),Xao=o(" (BlenderbotSmall model)"),zao=l(),Ug=a("li"),Qne=a("strong"),Qao=o("bloom"),Wao=o(" \u2014 "),PP=a("a"),Hao=o("BloomTokenizerFast"),Uao=o(" (BLOOM model)"),Jao=l(),Jg=a("li"),Wne=a("strong"),Yao=o("byt5"),Kao=o(" \u2014 "),BP=a("a"),Zao=o("ByT5Tokenizer"),eno=o(" (ByT5 model)"),ono=l(),Xn=a("li"),Hne=a("strong"),rno=o("camembert"),tno=o(" \u2014 "),IP=a("a"),ano=o("CamembertTokenizer"),nno=o(" or "),NP=a("a"),sno=o("CamembertTokenizerFast"),lno=o(" (CamemBERT model)"),ino=l(),Yg=a("li"),Une=a("strong"),dno=o("canine"),cno=o(" \u2014 "),qP=a("a"),fno=o("CanineTokenizer"),mno=o(" (CANINE model)"),gno=l(),zn=a("li"),Jne=a("strong"),hno=o("clip"),pno=o(" \u2014 "),jP=a("a"),_no=o("CLIPTokenizer"),uno=o(" or "),DP=a("a"),bno=o("CLIPTokenizerFast"),vno=o(" (CLIP model)"),Fno=l(),Qn=a("li"),Yne=a("strong"),Tno=o("convbert"),Mno=o(" \u2014 "),GP=a("a"),Eno=o("ConvBertTokenizer"),Cno=o(" or "),OP=a("a"),wno=o("ConvBertTokenizerFast"),Ano=o(" (ConvBERT model)"),Lno=l(),Wn=a("li"),Kne=a("strong"),yno=o("cpm"),xno=o(" \u2014 "),VP=a("a"),$no=o("CpmTokenizer"),kno=o(" or "),XP=a("a"),Sno=o("CpmTokenizerFast"),Rno=o(" (CPM model)"),Pno=l(),Kg=a("li"),Zne=a("strong"),Bno=o("ctrl"),Ino=o(" \u2014 "),zP=a("a"),Nno=o("CTRLTokenizer"),qno=o(" (CTRL model)"),jno=l(),Hn=a("li"),ese=a("strong"),Dno=o("data2vec-text"),Gno=o(" \u2014 "),QP=a("a"),Ono=o("RobertaTokenizer"),Vno=o(" or "),WP=a("a"),Xno=o("RobertaTokenizerFast"),zno=o(" (Data2VecText model)"),Qno=l(),Un=a("li"),ose=a("strong"),Wno=o("deberta"),Hno=o(" \u2014 "),HP=a("a"),Uno=o("DebertaTokenizer"),Jno=o(" or "),UP=a("a"),Yno=o("DebertaTokenizerFast"),Kno=o(" (DeBERTa model)"),Zno=l(),Jn=a("li"),rse=a("strong"),eso=o("deberta-v2"),oso=o(" \u2014 "),JP=a("a"),rso=o("DebertaV2Tokenizer"),tso=o(" or "),YP=a("a"),aso=o("DebertaV2TokenizerFast"),nso=o(" (DeBERTa-v2 model)"),sso=l(),Yn=a("li"),tse=a("strong"),lso=o("distilbert"),iso=o(" \u2014 "),KP=a("a"),dso=o("DistilBertTokenizer"),cso=o(" or "),ZP=a("a"),fso=o("DistilBertTokenizerFast"),mso=o(" (DistilBERT model)"),gso=l(),Kn=a("li"),ase=a("strong"),hso=o("dpr"),pso=o(" \u2014 "),eB=a("a"),_so=o("DPRQuestionEncoderTokenizer"),uso=o(" or "),oB=a("a"),bso=o("DPRQuestionEncoderTokenizerFast"),vso=o(" (DPR model)"),Fso=l(),Zn=a("li"),nse=a("strong"),Tso=o("electra"),Mso=o(" \u2014 "),rB=a("a"),Eso=o("ElectraTokenizer"),Cso=o(" or "),tB=a("a"),wso=o("ElectraTokenizerFast"),Aso=o(" (ELECTRA model)"),Lso=l(),Zg=a("li"),sse=a("strong"),yso=o("flaubert"),xso=o(" \u2014 "),aB=a("a"),$so=o("FlaubertTokenizer"),kso=o(" (FlauBERT model)"),Sso=l(),es=a("li"),lse=a("strong"),Rso=o("fnet"),Pso=o(" \u2014 "),nB=a("a"),Bso=o("FNetTokenizer"),Iso=o(" or "),sB=a("a"),Nso=o("FNetTokenizerFast"),qso=o(" (FNet model)"),jso=l(),eh=a("li"),ise=a("strong"),Dso=o("fsmt"),Gso=o(" \u2014 "),lB=a("a"),Oso=o("FSMTTokenizer"),Vso=o(" (FairSeq Machine-Translation model)"),Xso=l(),os=a("li"),dse=a("strong"),zso=o("funnel"),Qso=o(" \u2014 "),iB=a("a"),Wso=o("FunnelTokenizer"),Hso=o(" or "),dB=a("a"),Uso=o("FunnelTokenizerFast"),Jso=o(" (Funnel Transformer model)"),Yso=l(),rs=a("li"),cse=a("strong"),Kso=o("gpt2"),Zso=o(" \u2014 "),cB=a("a"),elo=o("GPT2Tokenizer"),olo=o(" or "),fB=a("a"),rlo=o("GPT2TokenizerFast"),tlo=o(" (OpenAI GPT-2 model)"),alo=l(),ts=a("li"),fse=a("strong"),nlo=o("gpt_neo"),slo=o(" \u2014 "),mB=a("a"),llo=o("GPT2Tokenizer"),ilo=o(" or "),gB=a("a"),dlo=o("GPT2TokenizerFast"),clo=o(" (GPT Neo model)"),flo=l(),oh=a("li"),mse=a("strong"),mlo=o("gpt_neox"),glo=o(" \u2014 "),hB=a("a"),hlo=o("GPTNeoXTokenizerFast"),plo=o(" (GPT NeoX model)"),_lo=l(),as=a("li"),gse=a("strong"),ulo=o("gptj"),blo=o(" \u2014 "),pB=a("a"),vlo=o("GPT2Tokenizer"),Flo=o(" or "),_B=a("a"),Tlo=o("GPT2TokenizerFast"),Mlo=o(" (GPT-J model)"),Elo=l(),ns=a("li"),hse=a("strong"),Clo=o("herbert"),wlo=o(" \u2014 "),uB=a("a"),Alo=o("HerbertTokenizer"),Llo=o(" or "),bB=a("a"),ylo=o("HerbertTokenizerFast"),xlo=o(" (HerBERT model)"),$lo=l(),rh=a("li"),pse=a("strong"),klo=o("hubert"),Slo=o(" \u2014 "),vB=a("a"),Rlo=o("Wav2Vec2CTCTokenizer"),Plo=o(" (Hubert model)"),Blo=l(),ss=a("li"),_se=a("strong"),Ilo=o("ibert"),Nlo=o(" \u2014 "),FB=a("a"),qlo=o("RobertaTokenizer"),jlo=o(" or "),TB=a("a"),Dlo=o("RobertaTokenizerFast"),Glo=o(" (I-BERT model)"),Olo=l(),ls=a("li"),use=a("strong"),Vlo=o("layoutlm"),Xlo=o(" \u2014 "),MB=a("a"),zlo=o("LayoutLMTokenizer"),Qlo=o(" or "),EB=a("a"),Wlo=o("LayoutLMTokenizerFast"),Hlo=o(" (LayoutLM model)"),Ulo=l(),is=a("li"),bse=a("strong"),Jlo=o("layoutlmv2"),Ylo=o(" \u2014 "),CB=a("a"),Klo=o("LayoutLMv2Tokenizer"),Zlo=o(" or "),wB=a("a"),eio=o("LayoutLMv2TokenizerFast"),oio=o(" (LayoutLMv2 model)"),rio=l(),ds=a("li"),vse=a("strong"),tio=o("layoutlmv3"),aio=o(" \u2014 "),AB=a("a"),nio=o("LayoutLMv3Tokenizer"),sio=o(" or "),LB=a("a"),lio=o("LayoutLMv3TokenizerFast"),iio=o(" (LayoutLMv3 model)"),dio=l(),cs=a("li"),Fse=a("strong"),cio=o("layoutxlm"),fio=o(" \u2014 "),yB=a("a"),mio=o("LayoutXLMTokenizer"),gio=o(" or "),xB=a("a"),hio=o("LayoutXLMTokenizerFast"),pio=o(" (LayoutXLM model)"),_io=l(),fs=a("li"),Tse=a("strong"),uio=o("led"),bio=o(" \u2014 "),$B=a("a"),vio=o("LEDTokenizer"),Fio=o(" or "),kB=a("a"),Tio=o("LEDTokenizerFast"),Mio=o(" (LED model)"),Eio=l(),ms=a("li"),Mse=a("strong"),Cio=o("longformer"),wio=o(" \u2014 "),SB=a("a"),Aio=o("LongformerTokenizer"),Lio=o(" or "),RB=a("a"),yio=o("LongformerTokenizerFast"),xio=o(" (Longformer model)"),$io=l(),gs=a("li"),Ese=a("strong"),kio=o("longt5"),Sio=o(" \u2014 "),PB=a("a"),Rio=o("T5Tokenizer"),Pio=o(" or "),BB=a("a"),Bio=o("T5TokenizerFast"),Iio=o(" (LongT5 model)"),Nio=l(),th=a("li"),Cse=a("strong"),qio=o("luke"),jio=o(" \u2014 "),IB=a("a"),Dio=o("LukeTokenizer"),Gio=o(" (LUKE model)"),Oio=l(),hs=a("li"),wse=a("strong"),Vio=o("lxmert"),Xio=o(" \u2014 "),NB=a("a"),zio=o("LxmertTokenizer"),Qio=o(" or "),qB=a("a"),Wio=o("LxmertTokenizerFast"),Hio=o(" (LXMERT model)"),Uio=l(),ah=a("li"),Ase=a("strong"),Jio=o("m2m_100"),Yio=o(" \u2014 "),jB=a("a"),Kio=o("M2M100Tokenizer"),Zio=o(" (M2M100 model)"),edo=l(),nh=a("li"),Lse=a("strong"),odo=o("marian"),rdo=o(" \u2014 "),DB=a("a"),tdo=o("MarianTokenizer"),ado=o(" (Marian model)"),ndo=l(),ps=a("li"),yse=a("strong"),sdo=o("mbart"),ldo=o(" \u2014 "),GB=a("a"),ido=o("MBartTokenizer"),ddo=o(" or "),OB=a("a"),cdo=o("MBartTokenizerFast"),fdo=o(" (mBART model)"),mdo=l(),_s=a("li"),xse=a("strong"),gdo=o("mbart50"),hdo=o(" \u2014 "),VB=a("a"),pdo=o("MBart50Tokenizer"),_do=o(" or "),XB=a("a"),udo=o("MBart50TokenizerFast"),bdo=o(" (mBART-50 model)"),vdo=l(),us=a("li"),$se=a("strong"),Fdo=o("megatron-bert"),Tdo=o(" \u2014 "),zB=a("a"),Mdo=o("BertTokenizer"),Edo=o(" or "),QB=a("a"),Cdo=o("BertTokenizerFast"),wdo=o(" (Megatron-BERT model)"),Ado=l(),sh=a("li"),kse=a("strong"),Ldo=o("mluke"),ydo=o(" \u2014 "),WB=a("a"),xdo=o("MLukeTokenizer"),$do=o(" (mLUKE model)"),kdo=l(),bs=a("li"),Sse=a("strong"),Sdo=o("mobilebert"),Rdo=o(" \u2014 "),HB=a("a"),Pdo=o("MobileBertTokenizer"),Bdo=o(" or "),UB=a("a"),Ido=o("MobileBertTokenizerFast"),Ndo=o(" (MobileBERT model)"),qdo=l(),vs=a("li"),Rse=a("strong"),jdo=o("mpnet"),Ddo=o(" \u2014 "),JB=a("a"),Gdo=o("MPNetTokenizer"),Odo=o(" or "),YB=a("a"),Vdo=o("MPNetTokenizerFast"),Xdo=o(" (MPNet model)"),zdo=l(),Fs=a("li"),Pse=a("strong"),Qdo=o("mt5"),Wdo=o(" \u2014 "),KB=a("a"),Hdo=o("MT5Tokenizer"),Udo=o(" or "),ZB=a("a"),Jdo=o("MT5TokenizerFast"),Ydo=o(" (MT5 model)"),Kdo=l(),Ts=a("li"),Bse=a("strong"),Zdo=o("mvp"),eco=o(" \u2014 "),eI=a("a"),oco=o("MvpTokenizer"),rco=o(" or "),oI=a("a"),tco=o("MvpTokenizerFast"),aco=o(" (MVP model)"),nco=l(),Ms=a("li"),Ise=a("strong"),sco=o("nystromformer"),lco=o(" \u2014 "),rI=a("a"),ico=o("AlbertTokenizer"),dco=o(" or "),tI=a("a"),cco=o("AlbertTokenizerFast"),fco=o(" (Nystr\xF6mformer model)"),mco=l(),Es=a("li"),Nse=a("strong"),gco=o("openai-gpt"),hco=o(" \u2014 "),aI=a("a"),pco=o("OpenAIGPTTokenizer"),_co=o(" or "),nI=a("a"),uco=o("OpenAIGPTTokenizerFast"),bco=o(" (OpenAI GPT model)"),vco=l(),lh=a("li"),qse=a("strong"),Fco=o("opt"),Tco=o(" \u2014 "),sI=a("a"),Mco=o("GPT2Tokenizer"),Eco=o(" (OPT model)"),Cco=l(),Cs=a("li"),jse=a("strong"),wco=o("pegasus"),Aco=o(" \u2014 "),lI=a("a"),Lco=o("PegasusTokenizer"),yco=o(" or "),iI=a("a"),xco=o("PegasusTokenizerFast"),$co=o(" (Pegasus model)"),kco=l(),ih=a("li"),Dse=a("strong"),Sco=o("perceiver"),Rco=o(" \u2014 "),dI=a("a"),Pco=o("PerceiverTokenizer"),Bco=o(" (Perceiver model)"),Ico=l(),dh=a("li"),Gse=a("strong"),Nco=o("phobert"),qco=o(" \u2014 "),cI=a("a"),jco=o("PhobertTokenizer"),Dco=o(" (PhoBERT model)"),Gco=l(),ch=a("li"),Ose=a("strong"),Oco=o("plbart"),Vco=o(" \u2014 "),fI=a("a"),Xco=o("PLBartTokenizer"),zco=o(" (PLBart model)"),Qco=l(),fh=a("li"),Vse=a("strong"),Wco=o("prophetnet"),Hco=o(" \u2014 "),mI=a("a"),Uco=o("ProphetNetTokenizer"),Jco=o(" (ProphetNet model)"),Yco=l(),ws=a("li"),Xse=a("strong"),Kco=o("qdqbert"),Zco=o(" \u2014 "),gI=a("a"),efo=o("BertTokenizer"),ofo=o(" or "),hI=a("a"),rfo=o("BertTokenizerFast"),tfo=o(" (QDQBert model)"),afo=l(),mh=a("li"),zse=a("strong"),nfo=o("rag"),sfo=o(" \u2014 "),pI=a("a"),lfo=o("RagTokenizer"),ifo=o(" (RAG model)"),dfo=l(),As=a("li"),Qse=a("strong"),cfo=o("realm"),ffo=o(" \u2014 "),_I=a("a"),mfo=o("RealmTokenizer"),gfo=o(" or "),uI=a("a"),hfo=o("RealmTokenizerFast"),pfo=o(" (REALM model)"),_fo=l(),Ls=a("li"),Wse=a("strong"),ufo=o("reformer"),bfo=o(" \u2014 "),bI=a("a"),vfo=o("ReformerTokenizer"),Ffo=o(" or "),vI=a("a"),Tfo=o("ReformerTokenizerFast"),Mfo=o(" (Reformer model)"),Efo=l(),ys=a("li"),Hse=a("strong"),Cfo=o("rembert"),wfo=o(" \u2014 "),FI=a("a"),Afo=o("RemBertTokenizer"),Lfo=o(" or "),TI=a("a"),yfo=o("RemBertTokenizerFast"),xfo=o(" (RemBERT model)"),$fo=l(),xs=a("li"),Use=a("strong"),kfo=o("retribert"),Sfo=o(" \u2014 "),MI=a("a"),Rfo=o("RetriBertTokenizer"),Pfo=o(" or "),EI=a("a"),Bfo=o("RetriBertTokenizerFast"),Ifo=o(" (RetriBERT model)"),Nfo=l(),$s=a("li"),Jse=a("strong"),qfo=o("roberta"),jfo=o(" \u2014 "),CI=a("a"),Dfo=o("RobertaTokenizer"),Gfo=o(" or "),wI=a("a"),Ofo=o("RobertaTokenizerFast"),Vfo=o(" (RoBERTa model)"),Xfo=l(),ks=a("li"),Yse=a("strong"),zfo=o("roformer"),Qfo=o(" \u2014 "),AI=a("a"),Wfo=o("RoFormerTokenizer"),Hfo=o(" or "),LI=a("a"),Ufo=o("RoFormerTokenizerFast"),Jfo=o(" (RoFormer model)"),Yfo=l(),gh=a("li"),Kse=a("strong"),Kfo=o("speech_to_text"),Zfo=o(" \u2014 "),yI=a("a"),emo=o("Speech2TextTokenizer"),omo=o(" (Speech2Text model)"),rmo=l(),hh=a("li"),Zse=a("strong"),tmo=o("speech_to_text_2"),amo=o(" \u2014 "),xI=a("a"),nmo=o("Speech2Text2Tokenizer"),smo=o(" (Speech2Text2 model)"),lmo=l(),Ss=a("li"),ele=a("strong"),imo=o("splinter"),dmo=o(" \u2014 "),$I=a("a"),cmo=o("SplinterTokenizer"),fmo=o(" or "),kI=a("a"),mmo=o("SplinterTokenizerFast"),gmo=o(" (Splinter model)"),hmo=l(),Rs=a("li"),ole=a("strong"),pmo=o("squeezebert"),_mo=o(" \u2014 "),SI=a("a"),umo=o("SqueezeBertTokenizer"),bmo=o(" or "),RI=a("a"),vmo=o("SqueezeBertTokenizerFast"),Fmo=o(" (SqueezeBERT model)"),Tmo=l(),Ps=a("li"),rle=a("strong"),Mmo=o("t5"),Emo=o(" \u2014 "),PI=a("a"),Cmo=o("T5Tokenizer"),wmo=o(" or "),BI=a("a"),Amo=o("T5TokenizerFast"),Lmo=o(" (T5 model)"),ymo=l(),ph=a("li"),tle=a("strong"),xmo=o("tapas"),$mo=o(" \u2014 "),II=a("a"),kmo=o("TapasTokenizer"),Smo=o(" (TAPAS model)"),Rmo=l(),_h=a("li"),ale=a("strong"),Pmo=o("tapex"),Bmo=o(" \u2014 "),NI=a("a"),Imo=o("TapexTokenizer"),Nmo=o(" (TAPEX model)"),qmo=l(),uh=a("li"),nle=a("strong"),jmo=o("transfo-xl"),Dmo=o(" \u2014 "),qI=a("a"),Gmo=o("TransfoXLTokenizer"),Omo=o(" (Transformer-XL model)"),Vmo=l(),Bs=a("li"),sle=a("strong"),Xmo=o("vilt"),zmo=o(" \u2014 "),jI=a("a"),Qmo=o("BertTokenizer"),Wmo=o(" or "),DI=a("a"),Hmo=o("BertTokenizerFast"),Umo=o(" (ViLT model)"),Jmo=l(),Is=a("li"),lle=a("strong"),Ymo=o("visual_bert"),Kmo=o(" \u2014 "),GI=a("a"),Zmo=o("BertTokenizer"),ego=o(" or "),OI=a("a"),ogo=o("BertTokenizerFast"),rgo=o(" (VisualBERT model)"),tgo=l(),bh=a("li"),ile=a("strong"),ago=o("wav2vec2"),ngo=o(" \u2014 "),VI=a("a"),sgo=o("Wav2Vec2CTCTokenizer"),lgo=o(" (Wav2Vec2 model)"),igo=l(),vh=a("li"),dle=a("strong"),dgo=o("wav2vec2-conformer"),cgo=o(" \u2014 "),XI=a("a"),fgo=o("Wav2Vec2CTCTokenizer"),mgo=o(" (Wav2Vec2-Conformer model)"),ggo=l(),Fh=a("li"),cle=a("strong"),hgo=o("wav2vec2_phoneme"),pgo=o(" \u2014 "),zI=a("a"),_go=o("Wav2Vec2PhonemeCTCTokenizer"),ugo=o(" (Wav2Vec2Phoneme model)"),bgo=l(),Ns=a("li"),fle=a("strong"),vgo=o("xglm"),Fgo=o(" \u2014 "),QI=a("a"),Tgo=o("XGLMTokenizer"),Mgo=o(" or "),WI=a("a"),Ego=o("XGLMTokenizerFast"),Cgo=o(" (XGLM model)"),wgo=l(),Th=a("li"),mle=a("strong"),Ago=o("xlm"),Lgo=o(" \u2014 "),HI=a("a"),ygo=o("XLMTokenizer"),xgo=o(" (XLM model)"),$go=l(),Mh=a("li"),gle=a("strong"),kgo=o("xlm-prophetnet"),Sgo=o(" \u2014 "),UI=a("a"),Rgo=o("XLMProphetNetTokenizer"),Pgo=o(" (XLM-ProphetNet model)"),Bgo=l(),qs=a("li"),hle=a("strong"),Igo=o("xlm-roberta"),Ngo=o(" \u2014 "),JI=a("a"),qgo=o("XLMRobertaTokenizer"),jgo=o(" or "),YI=a("a"),Dgo=o("XLMRobertaTokenizerFast"),Ggo=o(" (XLM-RoBERTa model)"),Ogo=l(),js=a("li"),ple=a("strong"),Vgo=o("xlm-roberta-xl"),Xgo=o(" \u2014 "),KI=a("a"),zgo=o("RobertaTokenizer"),Qgo=o(" or "),ZI=a("a"),Wgo=o("RobertaTokenizerFast"),Hgo=o(" (XLM-RoBERTa-XL model)"),Ugo=l(),Ds=a("li"),_le=a("strong"),Jgo=o("xlnet"),Ygo=o(" \u2014 "),eN=a("a"),Kgo=o("XLNetTokenizer"),Zgo=o(" or "),oN=a("a"),eho=o("XLNetTokenizerFast"),oho=o(" (XLNet model)"),rho=l(),Gs=a("li"),ule=a("strong"),tho=o("yoso"),aho=o(" \u2014 "),rN=a("a"),nho=o("AlbertTokenizer"),sho=o(" or "),tN=a("a"),lho=o("AlbertTokenizerFast"),iho=o(" (YOSO model)"),dho=l(),F(Eh.$$.fragment),cho=l(),Ch=a("div"),F(G6.$$.fragment),fho=l(),ble=a("p"),mho=o("Register a new tokenizer in this mapping."),XGe=l(),Si=a("h2"),wh=a("a"),vle=a("span"),F(O6.$$.fragment),gho=l(),Fle=a("span"),hho=o("AutoFeatureExtractor"),zGe=l(),Lo=a("div"),F(V6.$$.fragment),pho=l(),X6=a("p"),_ho=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),aN=a("a"),uho=o("AutoFeatureExtractor.from_pretrained()"),bho=o(" class method."),vho=l(),z6=a("p"),Fho=o("This class cannot be instantiated directly using "),Tle=a("code"),Tho=o("__init__()"),Mho=o(" (throws an error)."),Eho=l(),He=a("div"),F(Q6.$$.fragment),Cho=l(),Mle=a("p"),who=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Aho=l(),ka=a("p"),Lho=o("The feature extractor class to instantiate is selected based on the "),Ele=a("code"),yho=o("model_type"),xho=o(` property of the config object
(either passed as an argument or loaded from `),Cle=a("code"),$ho=o("pretrained_model_name_or_path"),kho=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),wle=a("code"),Sho=o("pretrained_model_name_or_path"),Rho=o(":"),Pho=l(),Y=a("ul"),Ah=a("li"),Ale=a("strong"),Bho=o("beit"),Iho=o(" \u2014 "),nN=a("a"),Nho=o("BeitFeatureExtractor"),qho=o(" (BEiT model)"),jho=l(),Lh=a("li"),Lle=a("strong"),Dho=o("clip"),Gho=o(" \u2014 "),sN=a("a"),Oho=o("CLIPFeatureExtractor"),Vho=o(" (CLIP model)"),Xho=l(),yh=a("li"),yle=a("strong"),zho=o("convnext"),Qho=o(" \u2014 "),lN=a("a"),Who=o("ConvNextFeatureExtractor"),Hho=o(" (ConvNeXT model)"),Uho=l(),xh=a("li"),xle=a("strong"),Jho=o("cvt"),Yho=o(" \u2014 "),iN=a("a"),Kho=o("ConvNextFeatureExtractor"),Zho=o(" (CvT model)"),epo=l(),$h=a("li"),$le=a("strong"),opo=o("data2vec-audio"),rpo=o(" \u2014 "),dN=a("a"),tpo=o("Wav2Vec2FeatureExtractor"),apo=o(" (Data2VecAudio model)"),npo=l(),kh=a("li"),kle=a("strong"),spo=o("data2vec-vision"),lpo=o(" \u2014 "),cN=a("a"),ipo=o("BeitFeatureExtractor"),dpo=o(" (Data2VecVision model)"),cpo=l(),Sh=a("li"),Sle=a("strong"),fpo=o("deit"),mpo=o(" \u2014 "),fN=a("a"),gpo=o("DeiTFeatureExtractor"),hpo=o(" (DeiT model)"),ppo=l(),Rh=a("li"),Rle=a("strong"),_po=o("detr"),upo=o(" \u2014 "),mN=a("a"),bpo=o("DetrFeatureExtractor"),vpo=o(" (DETR model)"),Fpo=l(),Ph=a("li"),Ple=a("strong"),Tpo=o("dpt"),Mpo=o(" \u2014 "),gN=a("a"),Epo=o("DPTFeatureExtractor"),Cpo=o(" (DPT model)"),wpo=l(),Bh=a("li"),Ble=a("strong"),Apo=o("flava"),Lpo=o(" \u2014 "),hN=a("a"),ypo=o("FlavaFeatureExtractor"),xpo=o(" (FLAVA model)"),$po=l(),Ih=a("li"),Ile=a("strong"),kpo=o("glpn"),Spo=o(" \u2014 "),pN=a("a"),Rpo=o("GLPNFeatureExtractor"),Ppo=o(" (GLPN model)"),Bpo=l(),Nh=a("li"),Nle=a("strong"),Ipo=o("hubert"),Npo=o(" \u2014 "),_N=a("a"),qpo=o("Wav2Vec2FeatureExtractor"),jpo=o(" (Hubert model)"),Dpo=l(),qh=a("li"),qle=a("strong"),Gpo=o("imagegpt"),Opo=o(" \u2014 "),uN=a("a"),Vpo=o("ImageGPTFeatureExtractor"),Xpo=o(" (ImageGPT model)"),zpo=l(),jh=a("li"),jle=a("strong"),Qpo=o("layoutlmv2"),Wpo=o(" \u2014 "),bN=a("a"),Hpo=o("LayoutLMv2FeatureExtractor"),Upo=o(" (LayoutLMv2 model)"),Jpo=l(),Dh=a("li"),Dle=a("strong"),Ypo=o("layoutlmv3"),Kpo=o(" \u2014 "),vN=a("a"),Zpo=o("LayoutLMv3FeatureExtractor"),e_o=o(" (LayoutLMv3 model)"),o_o=l(),Gh=a("li"),Gle=a("strong"),r_o=o("levit"),t_o=o(" \u2014 "),FN=a("a"),a_o=o("LevitFeatureExtractor"),n_o=o(" (LeViT model)"),s_o=l(),Oh=a("li"),Ole=a("strong"),l_o=o("maskformer"),i_o=o(" \u2014 "),TN=a("a"),d_o=o("MaskFormerFeatureExtractor"),c_o=o(" (MaskFormer model)"),f_o=l(),Vh=a("li"),Vle=a("strong"),m_o=o("mctct"),g_o=o(" \u2014 "),MN=a("a"),h_o=o("MCTCTFeatureExtractor"),p_o=o(" (M-CTC-T model)"),__o=l(),Xh=a("li"),Xle=a("strong"),u_o=o("perceiver"),b_o=o(" \u2014 "),EN=a("a"),v_o=o("PerceiverFeatureExtractor"),F_o=o(" (Perceiver model)"),T_o=l(),zh=a("li"),zle=a("strong"),M_o=o("poolformer"),E_o=o(" \u2014 "),CN=a("a"),C_o=o("PoolFormerFeatureExtractor"),w_o=o(" (PoolFormer model)"),A_o=l(),Qh=a("li"),Qle=a("strong"),L_o=o("regnet"),y_o=o(" \u2014 "),wN=a("a"),x_o=o("ConvNextFeatureExtractor"),$_o=o(" (RegNet model)"),k_o=l(),Wh=a("li"),Wle=a("strong"),S_o=o("resnet"),R_o=o(" \u2014 "),AN=a("a"),P_o=o("ConvNextFeatureExtractor"),B_o=o(" (ResNet model)"),I_o=l(),Hh=a("li"),Hle=a("strong"),N_o=o("segformer"),q_o=o(" \u2014 "),LN=a("a"),j_o=o("SegformerFeatureExtractor"),D_o=o(" (SegFormer model)"),G_o=l(),Uh=a("li"),Ule=a("strong"),O_o=o("speech_to_text"),V_o=o(" \u2014 "),yN=a("a"),X_o=o("Speech2TextFeatureExtractor"),z_o=o(" (Speech2Text model)"),Q_o=l(),Jh=a("li"),Jle=a("strong"),W_o=o("swin"),H_o=o(" \u2014 "),xN=a("a"),U_o=o("ViTFeatureExtractor"),J_o=o(" (Swin Transformer model)"),Y_o=l(),Yh=a("li"),Yle=a("strong"),K_o=o("van"),Z_o=o(" \u2014 "),$N=a("a"),euo=o("ConvNextFeatureExtractor"),ouo=o(" (VAN model)"),ruo=l(),Kh=a("li"),Kle=a("strong"),tuo=o("vilt"),auo=o(" \u2014 "),kN=a("a"),nuo=o("ViltFeatureExtractor"),suo=o(" (ViLT model)"),luo=l(),Zh=a("li"),Zle=a("strong"),iuo=o("vit"),duo=o(" \u2014 "),SN=a("a"),cuo=o("ViTFeatureExtractor"),fuo=o(" (ViT model)"),muo=l(),ep=a("li"),eie=a("strong"),guo=o("vit_mae"),huo=o(" \u2014 "),RN=a("a"),puo=o("ViTFeatureExtractor"),_uo=o(" (ViTMAE model)"),uuo=l(),op=a("li"),oie=a("strong"),buo=o("wav2vec2"),vuo=o(" \u2014 "),PN=a("a"),Fuo=o("Wav2Vec2FeatureExtractor"),Tuo=o(" (Wav2Vec2 model)"),Muo=l(),rp=a("li"),rie=a("strong"),Euo=o("wav2vec2-conformer"),Cuo=o(" \u2014 "),BN=a("a"),wuo=o("Wav2Vec2FeatureExtractor"),Auo=o(" (Wav2Vec2-Conformer model)"),Luo=l(),tp=a("li"),tie=a("strong"),yuo=o("yolos"),xuo=o(" \u2014 "),IN=a("a"),$uo=o("YolosFeatureExtractor"),kuo=o(" (YOLOS model)"),Suo=l(),F(ap.$$.fragment),Ruo=l(),F(np.$$.fragment),Puo=l(),sp=a("div"),F(W6.$$.fragment),Buo=l(),aie=a("p"),Iuo=o("Register a new feature extractor for this class."),QGe=l(),Ri=a("h2"),lp=a("a"),nie=a("span"),F(H6.$$.fragment),Nuo=l(),sie=a("span"),quo=o("AutoProcessor"),WGe=l(),yo=a("div"),F(U6.$$.fragment),juo=l(),J6=a("p"),Duo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),NN=a("a"),Guo=o("AutoProcessor.from_pretrained()"),Ouo=o(" class method."),Vuo=l(),Y6=a("p"),Xuo=o("This class cannot be instantiated directly using "),lie=a("code"),zuo=o("__init__()"),Quo=o(" (throws an error)."),Wuo=l(),Ue=a("div"),F(K6.$$.fragment),Huo=l(),iie=a("p"),Uuo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Juo=l(),Pi=a("p"),Yuo=o("The processor class to instantiate is selected based on the "),die=a("code"),Kuo=o("model_type"),Zuo=o(` property of the config object (either
passed as an argument or loaded from `),cie=a("code"),e7o=o("pretrained_model_name_or_path"),o7o=o(" if possible):"),r7o=l(),pe=a("ul"),ip=a("li"),fie=a("strong"),t7o=o("clip"),a7o=o(" \u2014 "),qN=a("a"),n7o=o("CLIPProcessor"),s7o=o(" (CLIP model)"),l7o=l(),dp=a("li"),mie=a("strong"),i7o=o("flava"),d7o=o(" \u2014 "),gie=a("code"),c7o=o("FLAVAProcessor"),f7o=o(" (FLAVA model)"),m7o=l(),cp=a("li"),hie=a("strong"),g7o=o("layoutlmv2"),h7o=o(" \u2014 "),jN=a("a"),p7o=o("LayoutLMv2Processor"),_7o=o(" (LayoutLMv2 model)"),u7o=l(),fp=a("li"),pie=a("strong"),b7o=o("layoutlmv3"),v7o=o(" \u2014 "),DN=a("a"),F7o=o("LayoutLMv3Processor"),T7o=o(" (LayoutLMv3 model)"),M7o=l(),mp=a("li"),_ie=a("strong"),E7o=o("layoutxlm"),C7o=o(" \u2014 "),GN=a("a"),w7o=o("LayoutXLMProcessor"),A7o=o(" (LayoutXLM model)"),L7o=l(),gp=a("li"),uie=a("strong"),y7o=o("sew"),x7o=o(" \u2014 "),ON=a("a"),$7o=o("Wav2Vec2Processor"),k7o=o(" (SEW model)"),S7o=l(),hp=a("li"),bie=a("strong"),R7o=o("sew-d"),P7o=o(" \u2014 "),VN=a("a"),B7o=o("Wav2Vec2Processor"),I7o=o(" (SEW-D model)"),N7o=l(),pp=a("li"),vie=a("strong"),q7o=o("speech_to_text"),j7o=o(" \u2014 "),XN=a("a"),D7o=o("Speech2TextProcessor"),G7o=o(" (Speech2Text model)"),O7o=l(),_p=a("li"),Fie=a("strong"),V7o=o("speech_to_text_2"),X7o=o(" \u2014 "),zN=a("a"),z7o=o("Speech2Text2Processor"),Q7o=o(" (Speech2Text2 model)"),W7o=l(),up=a("li"),Tie=a("strong"),H7o=o("trocr"),U7o=o(" \u2014 "),QN=a("a"),J7o=o("TrOCRProcessor"),Y7o=o(" (TrOCR model)"),K7o=l(),bp=a("li"),Mie=a("strong"),Z7o=o("unispeech"),e1o=o(" \u2014 "),WN=a("a"),o1o=o("Wav2Vec2Processor"),r1o=o(" (UniSpeech model)"),t1o=l(),vp=a("li"),Eie=a("strong"),a1o=o("unispeech-sat"),n1o=o(" \u2014 "),HN=a("a"),s1o=o("Wav2Vec2Processor"),l1o=o(" (UniSpeechSat model)"),i1o=l(),Fp=a("li"),Cie=a("strong"),d1o=o("vilt"),c1o=o(" \u2014 "),UN=a("a"),f1o=o("ViltProcessor"),m1o=o(" (ViLT model)"),g1o=l(),Tp=a("li"),wie=a("strong"),h1o=o("vision-text-dual-encoder"),p1o=o(" \u2014 "),JN=a("a"),_1o=o("VisionTextDualEncoderProcessor"),u1o=o(" (VisionTextDualEncoder model)"),b1o=l(),Mp=a("li"),Aie=a("strong"),v1o=o("wav2vec2"),F1o=o(" \u2014 "),YN=a("a"),T1o=o("Wav2Vec2Processor"),M1o=o(" (Wav2Vec2 model)"),E1o=l(),Ep=a("li"),Lie=a("strong"),C1o=o("wav2vec2-conformer"),w1o=o(" \u2014 "),KN=a("a"),A1o=o("Wav2Vec2Processor"),L1o=o(" (Wav2Vec2-Conformer model)"),y1o=l(),Cp=a("li"),yie=a("strong"),x1o=o("wavlm"),$1o=o(" \u2014 "),ZN=a("a"),k1o=o("Wav2Vec2Processor"),S1o=o(" (WavLM model)"),R1o=l(),F(wp.$$.fragment),P1o=l(),F(Ap.$$.fragment),B1o=l(),Lp=a("div"),F(Z6.$$.fragment),I1o=l(),xie=a("p"),N1o=o("Register a new processor for this class."),HGe=l(),Bi=a("h2"),yp=a("a"),$ie=a("span"),F(eL.$$.fragment),q1o=l(),kie=a("span"),j1o=o("AutoModel"),UGe=l(),xo=a("div"),F(oL.$$.fragment),D1o=l(),Ii=a("p"),G1o=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),eq=a("a"),O1o=o("from_pretrained()"),V1o=o(" class method or the "),oq=a("a"),X1o=o("from_config()"),z1o=o(` class
method.`),Q1o=l(),rL=a("p"),W1o=o("This class cannot be instantiated directly using "),Sie=a("code"),H1o=o("__init__()"),U1o=o(" (throws an error)."),J1o=l(),nt=a("div"),F(tL.$$.fragment),Y1o=l(),Rie=a("p"),K1o=o("Instantiates one of the base model classes of the library from a configuration."),Z1o=l(),Ni=a("p"),e2o=o(`Note:
Loading a model from its configuration file does `),Pie=a("strong"),o2o=o("not"),r2o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rq=a("a"),t2o=o("from_pretrained()"),a2o=o(" to load the model weights."),n2o=l(),F(xp.$$.fragment),s2o=l(),Je=a("div"),F(aL.$$.fragment),l2o=l(),Bie=a("p"),i2o=o("Instantiate one of the base model classes of the library from a pretrained model."),d2o=l(),Sa=a("p"),c2o=o("The model class to instantiate is selected based on the "),Iie=a("code"),f2o=o("model_type"),m2o=o(` property of the config object (either
passed as an argument or loaded from `),Nie=a("code"),g2o=o("pretrained_model_name_or_path"),h2o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qie=a("code"),p2o=o("pretrained_model_name_or_path"),_2o=o(":"),u2o=l(),y=a("ul"),$p=a("li"),jie=a("strong"),b2o=o("albert"),v2o=o(" \u2014 "),tq=a("a"),F2o=o("AlbertModel"),T2o=o(" (ALBERT model)"),M2o=l(),kp=a("li"),Die=a("strong"),E2o=o("bart"),C2o=o(" \u2014 "),aq=a("a"),w2o=o("BartModel"),A2o=o(" (BART model)"),L2o=l(),Sp=a("li"),Gie=a("strong"),y2o=o("beit"),x2o=o(" \u2014 "),nq=a("a"),$2o=o("BeitModel"),k2o=o(" (BEiT model)"),S2o=l(),Rp=a("li"),Oie=a("strong"),R2o=o("bert"),P2o=o(" \u2014 "),sq=a("a"),B2o=o("BertModel"),I2o=o(" (BERT model)"),N2o=l(),Pp=a("li"),Vie=a("strong"),q2o=o("bert-generation"),j2o=o(" \u2014 "),lq=a("a"),D2o=o("BertGenerationEncoder"),G2o=o(" (Bert Generation model)"),O2o=l(),Bp=a("li"),Xie=a("strong"),V2o=o("big_bird"),X2o=o(" \u2014 "),iq=a("a"),z2o=o("BigBirdModel"),Q2o=o(" (BigBird model)"),W2o=l(),Ip=a("li"),zie=a("strong"),H2o=o("bigbird_pegasus"),U2o=o(" \u2014 "),dq=a("a"),J2o=o("BigBirdPegasusModel"),Y2o=o(" (BigBird-Pegasus model)"),K2o=l(),Np=a("li"),Qie=a("strong"),Z2o=o("blenderbot"),ebo=o(" \u2014 "),cq=a("a"),obo=o("BlenderbotModel"),rbo=o(" (Blenderbot model)"),tbo=l(),qp=a("li"),Wie=a("strong"),abo=o("blenderbot-small"),nbo=o(" \u2014 "),fq=a("a"),sbo=o("BlenderbotSmallModel"),lbo=o(" (BlenderbotSmall model)"),ibo=l(),jp=a("li"),Hie=a("strong"),dbo=o("bloom"),cbo=o(" \u2014 "),mq=a("a"),fbo=o("BloomModel"),mbo=o(" (BLOOM model)"),gbo=l(),Dp=a("li"),Uie=a("strong"),hbo=o("camembert"),pbo=o(" \u2014 "),gq=a("a"),_bo=o("CamembertModel"),ubo=o(" (CamemBERT model)"),bbo=l(),Gp=a("li"),Jie=a("strong"),vbo=o("canine"),Fbo=o(" \u2014 "),hq=a("a"),Tbo=o("CanineModel"),Mbo=o(" (CANINE model)"),Ebo=l(),Op=a("li"),Yie=a("strong"),Cbo=o("clip"),wbo=o(" \u2014 "),pq=a("a"),Abo=o("CLIPModel"),Lbo=o(" (CLIP model)"),ybo=l(),Vp=a("li"),Kie=a("strong"),xbo=o("convbert"),$bo=o(" \u2014 "),_q=a("a"),kbo=o("ConvBertModel"),Sbo=o(" (ConvBERT model)"),Rbo=l(),Xp=a("li"),Zie=a("strong"),Pbo=o("convnext"),Bbo=o(" \u2014 "),uq=a("a"),Ibo=o("ConvNextModel"),Nbo=o(" (ConvNeXT model)"),qbo=l(),zp=a("li"),ede=a("strong"),jbo=o("ctrl"),Dbo=o(" \u2014 "),bq=a("a"),Gbo=o("CTRLModel"),Obo=o(" (CTRL model)"),Vbo=l(),Qp=a("li"),ode=a("strong"),Xbo=o("cvt"),zbo=o(" \u2014 "),vq=a("a"),Qbo=o("CvtModel"),Wbo=o(" (CvT model)"),Hbo=l(),Wp=a("li"),rde=a("strong"),Ubo=o("data2vec-audio"),Jbo=o(" \u2014 "),Fq=a("a"),Ybo=o("Data2VecAudioModel"),Kbo=o(" (Data2VecAudio model)"),Zbo=l(),Hp=a("li"),tde=a("strong"),evo=o("data2vec-text"),ovo=o(" \u2014 "),Tq=a("a"),rvo=o("Data2VecTextModel"),tvo=o(" (Data2VecText model)"),avo=l(),Up=a("li"),ade=a("strong"),nvo=o("data2vec-vision"),svo=o(" \u2014 "),Mq=a("a"),lvo=o("Data2VecVisionModel"),ivo=o(" (Data2VecVision model)"),dvo=l(),Jp=a("li"),nde=a("strong"),cvo=o("deberta"),fvo=o(" \u2014 "),Eq=a("a"),mvo=o("DebertaModel"),gvo=o(" (DeBERTa model)"),hvo=l(),Yp=a("li"),sde=a("strong"),pvo=o("deberta-v2"),_vo=o(" \u2014 "),Cq=a("a"),uvo=o("DebertaV2Model"),bvo=o(" (DeBERTa-v2 model)"),vvo=l(),Kp=a("li"),lde=a("strong"),Fvo=o("decision_transformer"),Tvo=o(" \u2014 "),wq=a("a"),Mvo=o("DecisionTransformerModel"),Evo=o(" (Decision Transformer model)"),Cvo=l(),Zp=a("li"),ide=a("strong"),wvo=o("deit"),Avo=o(" \u2014 "),Aq=a("a"),Lvo=o("DeiTModel"),yvo=o(" (DeiT model)"),xvo=l(),e_=a("li"),dde=a("strong"),$vo=o("detr"),kvo=o(" \u2014 "),Lq=a("a"),Svo=o("DetrModel"),Rvo=o(" (DETR model)"),Pvo=l(),o_=a("li"),cde=a("strong"),Bvo=o("distilbert"),Ivo=o(" \u2014 "),yq=a("a"),Nvo=o("DistilBertModel"),qvo=o(" (DistilBERT model)"),jvo=l(),r_=a("li"),fde=a("strong"),Dvo=o("dpr"),Gvo=o(" \u2014 "),xq=a("a"),Ovo=o("DPRQuestionEncoder"),Vvo=o(" (DPR model)"),Xvo=l(),t_=a("li"),mde=a("strong"),zvo=o("dpt"),Qvo=o(" \u2014 "),$q=a("a"),Wvo=o("DPTModel"),Hvo=o(" (DPT model)"),Uvo=l(),a_=a("li"),gde=a("strong"),Jvo=o("electra"),Yvo=o(" \u2014 "),kq=a("a"),Kvo=o("ElectraModel"),Zvo=o(" (ELECTRA model)"),eFo=l(),n_=a("li"),hde=a("strong"),oFo=o("flaubert"),rFo=o(" \u2014 "),Sq=a("a"),tFo=o("FlaubertModel"),aFo=o(" (FlauBERT model)"),nFo=l(),s_=a("li"),pde=a("strong"),sFo=o("flava"),lFo=o(" \u2014 "),Rq=a("a"),iFo=o("FlavaModel"),dFo=o(" (FLAVA model)"),cFo=l(),l_=a("li"),_de=a("strong"),fFo=o("fnet"),mFo=o(" \u2014 "),Pq=a("a"),gFo=o("FNetModel"),hFo=o(" (FNet model)"),pFo=l(),i_=a("li"),ude=a("strong"),_Fo=o("fsmt"),uFo=o(" \u2014 "),Bq=a("a"),bFo=o("FSMTModel"),vFo=o(" (FairSeq Machine-Translation model)"),FFo=l(),Os=a("li"),bde=a("strong"),TFo=o("funnel"),MFo=o(" \u2014 "),Iq=a("a"),EFo=o("FunnelModel"),CFo=o(" or "),Nq=a("a"),wFo=o("FunnelBaseModel"),AFo=o(" (Funnel Transformer model)"),LFo=l(),d_=a("li"),vde=a("strong"),yFo=o("glpn"),xFo=o(" \u2014 "),qq=a("a"),$Fo=o("GLPNModel"),kFo=o(" (GLPN model)"),SFo=l(),c_=a("li"),Fde=a("strong"),RFo=o("gpt2"),PFo=o(" \u2014 "),jq=a("a"),BFo=o("GPT2Model"),IFo=o(" (OpenAI GPT-2 model)"),NFo=l(),f_=a("li"),Tde=a("strong"),qFo=o("gpt_neo"),jFo=o(" \u2014 "),Dq=a("a"),DFo=o("GPTNeoModel"),GFo=o(" (GPT Neo model)"),OFo=l(),m_=a("li"),Mde=a("strong"),VFo=o("gpt_neox"),XFo=o(" \u2014 "),Gq=a("a"),zFo=o("GPTNeoXModel"),QFo=o(" (GPT NeoX model)"),WFo=l(),g_=a("li"),Ede=a("strong"),HFo=o("gptj"),UFo=o(" \u2014 "),Oq=a("a"),JFo=o("GPTJModel"),YFo=o(" (GPT-J model)"),KFo=l(),h_=a("li"),Cde=a("strong"),ZFo=o("hubert"),eTo=o(" \u2014 "),Vq=a("a"),oTo=o("HubertModel"),rTo=o(" (Hubert model)"),tTo=l(),p_=a("li"),wde=a("strong"),aTo=o("ibert"),nTo=o(" \u2014 "),Xq=a("a"),sTo=o("IBertModel"),lTo=o(" (I-BERT model)"),iTo=l(),__=a("li"),Ade=a("strong"),dTo=o("imagegpt"),cTo=o(" \u2014 "),zq=a("a"),fTo=o("ImageGPTModel"),mTo=o(" (ImageGPT model)"),gTo=l(),u_=a("li"),Lde=a("strong"),hTo=o("layoutlm"),pTo=o(" \u2014 "),Qq=a("a"),_To=o("LayoutLMModel"),uTo=o(" (LayoutLM model)"),bTo=l(),b_=a("li"),yde=a("strong"),vTo=o("layoutlmv2"),FTo=o(" \u2014 "),Wq=a("a"),TTo=o("LayoutLMv2Model"),MTo=o(" (LayoutLMv2 model)"),ETo=l(),v_=a("li"),xde=a("strong"),CTo=o("layoutlmv3"),wTo=o(" \u2014 "),Hq=a("a"),ATo=o("LayoutLMv3Model"),LTo=o(" (LayoutLMv3 model)"),yTo=l(),F_=a("li"),$de=a("strong"),xTo=o("led"),$To=o(" \u2014 "),Uq=a("a"),kTo=o("LEDModel"),STo=o(" (LED model)"),RTo=l(),T_=a("li"),kde=a("strong"),PTo=o("levit"),BTo=o(" \u2014 "),Jq=a("a"),ITo=o("LevitModel"),NTo=o(" (LeViT model)"),qTo=l(),M_=a("li"),Sde=a("strong"),jTo=o("longformer"),DTo=o(" \u2014 "),Yq=a("a"),GTo=o("LongformerModel"),OTo=o(" (Longformer model)"),VTo=l(),E_=a("li"),Rde=a("strong"),XTo=o("longt5"),zTo=o(" \u2014 "),Kq=a("a"),QTo=o("LongT5Model"),WTo=o(" (LongT5 model)"),HTo=l(),C_=a("li"),Pde=a("strong"),UTo=o("luke"),JTo=o(" \u2014 "),Zq=a("a"),YTo=o("LukeModel"),KTo=o(" (LUKE model)"),ZTo=l(),w_=a("li"),Bde=a("strong"),e8o=o("lxmert"),o8o=o(" \u2014 "),ej=a("a"),r8o=o("LxmertModel"),t8o=o(" (LXMERT model)"),a8o=l(),A_=a("li"),Ide=a("strong"),n8o=o("m2m_100"),s8o=o(" \u2014 "),oj=a("a"),l8o=o("M2M100Model"),i8o=o(" (M2M100 model)"),d8o=l(),L_=a("li"),Nde=a("strong"),c8o=o("marian"),f8o=o(" \u2014 "),rj=a("a"),m8o=o("MarianModel"),g8o=o(" (Marian model)"),h8o=l(),y_=a("li"),qde=a("strong"),p8o=o("maskformer"),_8o=o(" \u2014 "),tj=a("a"),u8o=o("MaskFormerModel"),b8o=o(" (MaskFormer model)"),v8o=l(),x_=a("li"),jde=a("strong"),F8o=o("mbart"),T8o=o(" \u2014 "),aj=a("a"),M8o=o("MBartModel"),E8o=o(" (mBART model)"),C8o=l(),$_=a("li"),Dde=a("strong"),w8o=o("mctct"),A8o=o(" \u2014 "),nj=a("a"),L8o=o("MCTCTModel"),y8o=o(" (M-CTC-T model)"),x8o=l(),k_=a("li"),Gde=a("strong"),$8o=o("megatron-bert"),k8o=o(" \u2014 "),sj=a("a"),S8o=o("MegatronBertModel"),R8o=o(" (Megatron-BERT model)"),P8o=l(),S_=a("li"),Ode=a("strong"),B8o=o("mobilebert"),I8o=o(" \u2014 "),lj=a("a"),N8o=o("MobileBertModel"),q8o=o(" (MobileBERT model)"),j8o=l(),R_=a("li"),Vde=a("strong"),D8o=o("mpnet"),G8o=o(" \u2014 "),ij=a("a"),O8o=o("MPNetModel"),V8o=o(" (MPNet model)"),X8o=l(),P_=a("li"),Xde=a("strong"),z8o=o("mt5"),Q8o=o(" \u2014 "),dj=a("a"),W8o=o("MT5Model"),H8o=o(" (MT5 model)"),U8o=l(),B_=a("li"),zde=a("strong"),J8o=o("mvp"),Y8o=o(" \u2014 "),cj=a("a"),K8o=o("MvpModel"),Z8o=o(" (MVP model)"),eMo=l(),I_=a("li"),Qde=a("strong"),oMo=o("nystromformer"),rMo=o(" \u2014 "),fj=a("a"),tMo=o("NystromformerModel"),aMo=o(" (Nystr\xF6mformer model)"),nMo=l(),N_=a("li"),Wde=a("strong"),sMo=o("openai-gpt"),lMo=o(" \u2014 "),mj=a("a"),iMo=o("OpenAIGPTModel"),dMo=o(" (OpenAI GPT model)"),cMo=l(),q_=a("li"),Hde=a("strong"),fMo=o("opt"),mMo=o(" \u2014 "),gj=a("a"),gMo=o("OPTModel"),hMo=o(" (OPT model)"),pMo=l(),j_=a("li"),Ude=a("strong"),_Mo=o("pegasus"),uMo=o(" \u2014 "),hj=a("a"),bMo=o("PegasusModel"),vMo=o(" (Pegasus model)"),FMo=l(),D_=a("li"),Jde=a("strong"),TMo=o("perceiver"),MMo=o(" \u2014 "),pj=a("a"),EMo=o("PerceiverModel"),CMo=o(" (Perceiver model)"),wMo=l(),G_=a("li"),Yde=a("strong"),AMo=o("plbart"),LMo=o(" \u2014 "),_j=a("a"),yMo=o("PLBartModel"),xMo=o(" (PLBart model)"),$Mo=l(),O_=a("li"),Kde=a("strong"),kMo=o("poolformer"),SMo=o(" \u2014 "),uj=a("a"),RMo=o("PoolFormerModel"),PMo=o(" (PoolFormer model)"),BMo=l(),V_=a("li"),Zde=a("strong"),IMo=o("prophetnet"),NMo=o(" \u2014 "),bj=a("a"),qMo=o("ProphetNetModel"),jMo=o(" (ProphetNet model)"),DMo=l(),X_=a("li"),ece=a("strong"),GMo=o("qdqbert"),OMo=o(" \u2014 "),vj=a("a"),VMo=o("QDQBertModel"),XMo=o(" (QDQBert model)"),zMo=l(),z_=a("li"),oce=a("strong"),QMo=o("reformer"),WMo=o(" \u2014 "),Fj=a("a"),HMo=o("ReformerModel"),UMo=o(" (Reformer model)"),JMo=l(),Q_=a("li"),rce=a("strong"),YMo=o("regnet"),KMo=o(" \u2014 "),Tj=a("a"),ZMo=o("RegNetModel"),eEo=o(" (RegNet model)"),oEo=l(),W_=a("li"),tce=a("strong"),rEo=o("rembert"),tEo=o(" \u2014 "),Mj=a("a"),aEo=o("RemBertModel"),nEo=o(" (RemBERT model)"),sEo=l(),H_=a("li"),ace=a("strong"),lEo=o("resnet"),iEo=o(" \u2014 "),Ej=a("a"),dEo=o("ResNetModel"),cEo=o(" (ResNet model)"),fEo=l(),U_=a("li"),nce=a("strong"),mEo=o("retribert"),gEo=o(" \u2014 "),Cj=a("a"),hEo=o("RetriBertModel"),pEo=o(" (RetriBERT model)"),_Eo=l(),J_=a("li"),sce=a("strong"),uEo=o("roberta"),bEo=o(" \u2014 "),wj=a("a"),vEo=o("RobertaModel"),FEo=o(" (RoBERTa model)"),TEo=l(),Y_=a("li"),lce=a("strong"),MEo=o("roformer"),EEo=o(" \u2014 "),Aj=a("a"),CEo=o("RoFormerModel"),wEo=o(" (RoFormer model)"),AEo=l(),K_=a("li"),ice=a("strong"),LEo=o("segformer"),yEo=o(" \u2014 "),Lj=a("a"),xEo=o("SegformerModel"),$Eo=o(" (SegFormer model)"),kEo=l(),Z_=a("li"),dce=a("strong"),SEo=o("sew"),REo=o(" \u2014 "),yj=a("a"),PEo=o("SEWModel"),BEo=o(" (SEW model)"),IEo=l(),eu=a("li"),cce=a("strong"),NEo=o("sew-d"),qEo=o(" \u2014 "),xj=a("a"),jEo=o("SEWDModel"),DEo=o(" (SEW-D model)"),GEo=l(),ou=a("li"),fce=a("strong"),OEo=o("speech_to_text"),VEo=o(" \u2014 "),$j=a("a"),XEo=o("Speech2TextModel"),zEo=o(" (Speech2Text model)"),QEo=l(),ru=a("li"),mce=a("strong"),WEo=o("splinter"),HEo=o(" \u2014 "),kj=a("a"),UEo=o("SplinterModel"),JEo=o(" (Splinter model)"),YEo=l(),tu=a("li"),gce=a("strong"),KEo=o("squeezebert"),ZEo=o(" \u2014 "),Sj=a("a"),e4o=o("SqueezeBertModel"),o4o=o(" (SqueezeBERT model)"),r4o=l(),au=a("li"),hce=a("strong"),t4o=o("swin"),a4o=o(" \u2014 "),Rj=a("a"),n4o=o("SwinModel"),s4o=o(" (Swin Transformer model)"),l4o=l(),nu=a("li"),pce=a("strong"),i4o=o("t5"),d4o=o(" \u2014 "),Pj=a("a"),c4o=o("T5Model"),f4o=o(" (T5 model)"),m4o=l(),su=a("li"),_ce=a("strong"),g4o=o("tapas"),h4o=o(" \u2014 "),Bj=a("a"),p4o=o("TapasModel"),_4o=o(" (TAPAS model)"),u4o=l(),lu=a("li"),uce=a("strong"),b4o=o("trajectory_transformer"),v4o=o(" \u2014 "),Ij=a("a"),F4o=o("TrajectoryTransformerModel"),T4o=o(" (Trajectory Transformer model)"),M4o=l(),iu=a("li"),bce=a("strong"),E4o=o("transfo-xl"),C4o=o(" \u2014 "),Nj=a("a"),w4o=o("TransfoXLModel"),A4o=o(" (Transformer-XL model)"),L4o=l(),du=a("li"),vce=a("strong"),y4o=o("unispeech"),x4o=o(" \u2014 "),qj=a("a"),$4o=o("UniSpeechModel"),k4o=o(" (UniSpeech model)"),S4o=l(),cu=a("li"),Fce=a("strong"),R4o=o("unispeech-sat"),P4o=o(" \u2014 "),jj=a("a"),B4o=o("UniSpeechSatModel"),I4o=o(" (UniSpeechSat model)"),N4o=l(),fu=a("li"),Tce=a("strong"),q4o=o("van"),j4o=o(" \u2014 "),Dj=a("a"),D4o=o("VanModel"),G4o=o(" (VAN model)"),O4o=l(),mu=a("li"),Mce=a("strong"),V4o=o("vilt"),X4o=o(" \u2014 "),Gj=a("a"),z4o=o("ViltModel"),Q4o=o(" (ViLT model)"),W4o=l(),gu=a("li"),Ece=a("strong"),H4o=o("vision-text-dual-encoder"),U4o=o(" \u2014 "),Oj=a("a"),J4o=o("VisionTextDualEncoderModel"),Y4o=o(" (VisionTextDualEncoder model)"),K4o=l(),hu=a("li"),Cce=a("strong"),Z4o=o("visual_bert"),eCo=o(" \u2014 "),Vj=a("a"),oCo=o("VisualBertModel"),rCo=o(" (VisualBERT model)"),tCo=l(),pu=a("li"),wce=a("strong"),aCo=o("vit"),nCo=o(" \u2014 "),Xj=a("a"),sCo=o("ViTModel"),lCo=o(" (ViT model)"),iCo=l(),_u=a("li"),Ace=a("strong"),dCo=o("vit_mae"),cCo=o(" \u2014 "),zj=a("a"),fCo=o("ViTMAEModel"),mCo=o(" (ViTMAE model)"),gCo=l(),uu=a("li"),Lce=a("strong"),hCo=o("wav2vec2"),pCo=o(" \u2014 "),Qj=a("a"),_Co=o("Wav2Vec2Model"),uCo=o(" (Wav2Vec2 model)"),bCo=l(),bu=a("li"),yce=a("strong"),vCo=o("wav2vec2-conformer"),FCo=o(" \u2014 "),Wj=a("a"),TCo=o("Wav2Vec2ConformerModel"),MCo=o(" (Wav2Vec2-Conformer model)"),ECo=l(),vu=a("li"),xce=a("strong"),CCo=o("wavlm"),wCo=o(" \u2014 "),Hj=a("a"),ACo=o("WavLMModel"),LCo=o(" (WavLM model)"),yCo=l(),Fu=a("li"),$ce=a("strong"),xCo=o("xglm"),$Co=o(" \u2014 "),Uj=a("a"),kCo=o("XGLMModel"),SCo=o(" (XGLM model)"),RCo=l(),Tu=a("li"),kce=a("strong"),PCo=o("xlm"),BCo=o(" \u2014 "),Jj=a("a"),ICo=o("XLMModel"),NCo=o(" (XLM model)"),qCo=l(),Mu=a("li"),Sce=a("strong"),jCo=o("xlm-prophetnet"),DCo=o(" \u2014 "),Yj=a("a"),GCo=o("XLMProphetNetModel"),OCo=o(" (XLM-ProphetNet model)"),VCo=l(),Eu=a("li"),Rce=a("strong"),XCo=o("xlm-roberta"),zCo=o(" \u2014 "),Kj=a("a"),QCo=o("XLMRobertaModel"),WCo=o(" (XLM-RoBERTa model)"),HCo=l(),Cu=a("li"),Pce=a("strong"),UCo=o("xlm-roberta-xl"),JCo=o(" \u2014 "),Zj=a("a"),YCo=o("XLMRobertaXLModel"),KCo=o(" (XLM-RoBERTa-XL model)"),ZCo=l(),wu=a("li"),Bce=a("strong"),e5o=o("xlnet"),o5o=o(" \u2014 "),eD=a("a"),r5o=o("XLNetModel"),t5o=o(" (XLNet model)"),a5o=l(),Au=a("li"),Ice=a("strong"),n5o=o("yolos"),s5o=o(" \u2014 "),oD=a("a"),l5o=o("YolosModel"),i5o=o(" (YOLOS model)"),d5o=l(),Lu=a("li"),Nce=a("strong"),c5o=o("yoso"),f5o=o(" \u2014 "),rD=a("a"),m5o=o("YosoModel"),g5o=o(" (YOSO model)"),h5o=l(),yu=a("p"),p5o=o("The model is set in evaluation mode by default using "),qce=a("code"),_5o=o("model.eval()"),u5o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jce=a("code"),b5o=o("model.train()"),v5o=l(),F(xu.$$.fragment),JGe=l(),qi=a("h2"),$u=a("a"),Dce=a("span"),F(nL.$$.fragment),F5o=l(),Gce=a("span"),T5o=o("AutoModelForPreTraining"),YGe=l(),$o=a("div"),F(sL.$$.fragment),M5o=l(),ji=a("p"),E5o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),tD=a("a"),C5o=o("from_pretrained()"),w5o=o(" class method or the "),aD=a("a"),A5o=o("from_config()"),L5o=o(` class
method.`),y5o=l(),lL=a("p"),x5o=o("This class cannot be instantiated directly using "),Oce=a("code"),$5o=o("__init__()"),k5o=o(" (throws an error)."),S5o=l(),st=a("div"),F(iL.$$.fragment),R5o=l(),Vce=a("p"),P5o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),B5o=l(),Di=a("p"),I5o=o(`Note:
Loading a model from its configuration file does `),Xce=a("strong"),N5o=o("not"),q5o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nD=a("a"),j5o=o("from_pretrained()"),D5o=o(" to load the model weights."),G5o=l(),F(ku.$$.fragment),O5o=l(),Ye=a("div"),F(dL.$$.fragment),V5o=l(),zce=a("p"),X5o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),z5o=l(),Ra=a("p"),Q5o=o("The model class to instantiate is selected based on the "),Qce=a("code"),W5o=o("model_type"),H5o=o(` property of the config object (either
passed as an argument or loaded from `),Wce=a("code"),U5o=o("pretrained_model_name_or_path"),J5o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hce=a("code"),Y5o=o("pretrained_model_name_or_path"),K5o=o(":"),Z5o=l(),G=a("ul"),Su=a("li"),Uce=a("strong"),e3o=o("albert"),o3o=o(" \u2014 "),sD=a("a"),r3o=o("AlbertForPreTraining"),t3o=o(" (ALBERT model)"),a3o=l(),Ru=a("li"),Jce=a("strong"),n3o=o("bart"),s3o=o(" \u2014 "),lD=a("a"),l3o=o("BartForConditionalGeneration"),i3o=o(" (BART model)"),d3o=l(),Pu=a("li"),Yce=a("strong"),c3o=o("bert"),f3o=o(" \u2014 "),iD=a("a"),m3o=o("BertForPreTraining"),g3o=o(" (BERT model)"),h3o=l(),Bu=a("li"),Kce=a("strong"),p3o=o("big_bird"),_3o=o(" \u2014 "),dD=a("a"),u3o=o("BigBirdForPreTraining"),b3o=o(" (BigBird model)"),v3o=l(),Iu=a("li"),Zce=a("strong"),F3o=o("bloom"),T3o=o(" \u2014 "),cD=a("a"),M3o=o("BloomForCausalLM"),E3o=o(" (BLOOM model)"),C3o=l(),Nu=a("li"),efe=a("strong"),w3o=o("camembert"),A3o=o(" \u2014 "),fD=a("a"),L3o=o("CamembertForMaskedLM"),y3o=o(" (CamemBERT model)"),x3o=l(),qu=a("li"),ofe=a("strong"),$3o=o("ctrl"),k3o=o(" \u2014 "),mD=a("a"),S3o=o("CTRLLMHeadModel"),R3o=o(" (CTRL model)"),P3o=l(),ju=a("li"),rfe=a("strong"),B3o=o("data2vec-text"),I3o=o(" \u2014 "),gD=a("a"),N3o=o("Data2VecTextForMaskedLM"),q3o=o(" (Data2VecText model)"),j3o=l(),Du=a("li"),tfe=a("strong"),D3o=o("deberta"),G3o=o(" \u2014 "),hD=a("a"),O3o=o("DebertaForMaskedLM"),V3o=o(" (DeBERTa model)"),X3o=l(),Gu=a("li"),afe=a("strong"),z3o=o("deberta-v2"),Q3o=o(" \u2014 "),pD=a("a"),W3o=o("DebertaV2ForMaskedLM"),H3o=o(" (DeBERTa-v2 model)"),U3o=l(),Ou=a("li"),nfe=a("strong"),J3o=o("distilbert"),Y3o=o(" \u2014 "),_D=a("a"),K3o=o("DistilBertForMaskedLM"),Z3o=o(" (DistilBERT model)"),e0o=l(),Vu=a("li"),sfe=a("strong"),o0o=o("electra"),r0o=o(" \u2014 "),uD=a("a"),t0o=o("ElectraForPreTraining"),a0o=o(" (ELECTRA model)"),n0o=l(),Xu=a("li"),lfe=a("strong"),s0o=o("flaubert"),l0o=o(" \u2014 "),bD=a("a"),i0o=o("FlaubertWithLMHeadModel"),d0o=o(" (FlauBERT model)"),c0o=l(),zu=a("li"),ife=a("strong"),f0o=o("flava"),m0o=o(" \u2014 "),vD=a("a"),g0o=o("FlavaForPreTraining"),h0o=o(" (FLAVA model)"),p0o=l(),Qu=a("li"),dfe=a("strong"),_0o=o("fnet"),u0o=o(" \u2014 "),FD=a("a"),b0o=o("FNetForPreTraining"),v0o=o(" (FNet model)"),F0o=l(),Wu=a("li"),cfe=a("strong"),T0o=o("fsmt"),M0o=o(" \u2014 "),TD=a("a"),E0o=o("FSMTForConditionalGeneration"),C0o=o(" (FairSeq Machine-Translation model)"),w0o=l(),Hu=a("li"),ffe=a("strong"),A0o=o("funnel"),L0o=o(" \u2014 "),MD=a("a"),y0o=o("FunnelForPreTraining"),x0o=o(" (Funnel Transformer model)"),$0o=l(),Uu=a("li"),mfe=a("strong"),k0o=o("gpt2"),S0o=o(" \u2014 "),ED=a("a"),R0o=o("GPT2LMHeadModel"),P0o=o(" (OpenAI GPT-2 model)"),B0o=l(),Ju=a("li"),gfe=a("strong"),I0o=o("ibert"),N0o=o(" \u2014 "),CD=a("a"),q0o=o("IBertForMaskedLM"),j0o=o(" (I-BERT model)"),D0o=l(),Yu=a("li"),hfe=a("strong"),G0o=o("layoutlm"),O0o=o(" \u2014 "),wD=a("a"),V0o=o("LayoutLMForMaskedLM"),X0o=o(" (LayoutLM model)"),z0o=l(),Ku=a("li"),pfe=a("strong"),Q0o=o("longformer"),W0o=o(" \u2014 "),AD=a("a"),H0o=o("LongformerForMaskedLM"),U0o=o(" (Longformer model)"),J0o=l(),Zu=a("li"),_fe=a("strong"),Y0o=o("lxmert"),K0o=o(" \u2014 "),LD=a("a"),Z0o=o("LxmertForPreTraining"),ewo=o(" (LXMERT model)"),owo=l(),e7=a("li"),ufe=a("strong"),rwo=o("megatron-bert"),two=o(" \u2014 "),yD=a("a"),awo=o("MegatronBertForPreTraining"),nwo=o(" (Megatron-BERT model)"),swo=l(),o7=a("li"),bfe=a("strong"),lwo=o("mobilebert"),iwo=o(" \u2014 "),xD=a("a"),dwo=o("MobileBertForPreTraining"),cwo=o(" (MobileBERT model)"),fwo=l(),r7=a("li"),vfe=a("strong"),mwo=o("mpnet"),gwo=o(" \u2014 "),$D=a("a"),hwo=o("MPNetForMaskedLM"),pwo=o(" (MPNet model)"),_wo=l(),t7=a("li"),Ffe=a("strong"),uwo=o("mvp"),bwo=o(" \u2014 "),kD=a("a"),vwo=o("MvpForConditionalGeneration"),Fwo=o(" (MVP model)"),Two=l(),a7=a("li"),Tfe=a("strong"),Mwo=o("openai-gpt"),Ewo=o(" \u2014 "),SD=a("a"),Cwo=o("OpenAIGPTLMHeadModel"),wwo=o(" (OpenAI GPT model)"),Awo=l(),n7=a("li"),Mfe=a("strong"),Lwo=o("retribert"),ywo=o(" \u2014 "),RD=a("a"),xwo=o("RetriBertModel"),$wo=o(" (RetriBERT model)"),kwo=l(),s7=a("li"),Efe=a("strong"),Swo=o("roberta"),Rwo=o(" \u2014 "),PD=a("a"),Pwo=o("RobertaForMaskedLM"),Bwo=o(" (RoBERTa model)"),Iwo=l(),l7=a("li"),Cfe=a("strong"),Nwo=o("splinter"),qwo=o(" \u2014 "),BD=a("a"),jwo=o("SplinterForPreTraining"),Dwo=o(" (Splinter model)"),Gwo=l(),i7=a("li"),wfe=a("strong"),Owo=o("squeezebert"),Vwo=o(" \u2014 "),ID=a("a"),Xwo=o("SqueezeBertForMaskedLM"),zwo=o(" (SqueezeBERT model)"),Qwo=l(),d7=a("li"),Afe=a("strong"),Wwo=o("t5"),Hwo=o(" \u2014 "),ND=a("a"),Uwo=o("T5ForConditionalGeneration"),Jwo=o(" (T5 model)"),Ywo=l(),c7=a("li"),Lfe=a("strong"),Kwo=o("tapas"),Zwo=o(" \u2014 "),qD=a("a"),eAo=o("TapasForMaskedLM"),oAo=o(" (TAPAS model)"),rAo=l(),f7=a("li"),yfe=a("strong"),tAo=o("transfo-xl"),aAo=o(" \u2014 "),jD=a("a"),nAo=o("TransfoXLLMHeadModel"),sAo=o(" (Transformer-XL model)"),lAo=l(),m7=a("li"),xfe=a("strong"),iAo=o("unispeech"),dAo=o(" \u2014 "),DD=a("a"),cAo=o("UniSpeechForPreTraining"),fAo=o(" (UniSpeech model)"),mAo=l(),g7=a("li"),$fe=a("strong"),gAo=o("unispeech-sat"),hAo=o(" \u2014 "),GD=a("a"),pAo=o("UniSpeechSatForPreTraining"),_Ao=o(" (UniSpeechSat model)"),uAo=l(),h7=a("li"),kfe=a("strong"),bAo=o("visual_bert"),vAo=o(" \u2014 "),OD=a("a"),FAo=o("VisualBertForPreTraining"),TAo=o(" (VisualBERT model)"),MAo=l(),p7=a("li"),Sfe=a("strong"),EAo=o("vit_mae"),CAo=o(" \u2014 "),VD=a("a"),wAo=o("ViTMAEForPreTraining"),AAo=o(" (ViTMAE model)"),LAo=l(),_7=a("li"),Rfe=a("strong"),yAo=o("wav2vec2"),xAo=o(" \u2014 "),XD=a("a"),$Ao=o("Wav2Vec2ForPreTraining"),kAo=o(" (Wav2Vec2 model)"),SAo=l(),u7=a("li"),Pfe=a("strong"),RAo=o("wav2vec2-conformer"),PAo=o(" \u2014 "),zD=a("a"),BAo=o("Wav2Vec2ConformerForPreTraining"),IAo=o(" (Wav2Vec2-Conformer model)"),NAo=l(),b7=a("li"),Bfe=a("strong"),qAo=o("xlm"),jAo=o(" \u2014 "),QD=a("a"),DAo=o("XLMWithLMHeadModel"),GAo=o(" (XLM model)"),OAo=l(),v7=a("li"),Ife=a("strong"),VAo=o("xlm-roberta"),XAo=o(" \u2014 "),WD=a("a"),zAo=o("XLMRobertaForMaskedLM"),QAo=o(" (XLM-RoBERTa model)"),WAo=l(),F7=a("li"),Nfe=a("strong"),HAo=o("xlm-roberta-xl"),UAo=o(" \u2014 "),HD=a("a"),JAo=o("XLMRobertaXLForMaskedLM"),YAo=o(" (XLM-RoBERTa-XL model)"),KAo=l(),T7=a("li"),qfe=a("strong"),ZAo=o("xlnet"),e6o=o(" \u2014 "),UD=a("a"),o6o=o("XLNetLMHeadModel"),r6o=o(" (XLNet model)"),t6o=l(),M7=a("p"),a6o=o("The model is set in evaluation mode by default using "),jfe=a("code"),n6o=o("model.eval()"),s6o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dfe=a("code"),l6o=o("model.train()"),i6o=l(),F(E7.$$.fragment),KGe=l(),Gi=a("h2"),C7=a("a"),Gfe=a("span"),F(cL.$$.fragment),d6o=l(),Ofe=a("span"),c6o=o("AutoModelForCausalLM"),ZGe=l(),ko=a("div"),F(fL.$$.fragment),f6o=l(),Oi=a("p"),m6o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),JD=a("a"),g6o=o("from_pretrained()"),h6o=o(" class method or the "),YD=a("a"),p6o=o("from_config()"),_6o=o(` class
method.`),u6o=l(),mL=a("p"),b6o=o("This class cannot be instantiated directly using "),Vfe=a("code"),v6o=o("__init__()"),F6o=o(" (throws an error)."),T6o=l(),lt=a("div"),F(gL.$$.fragment),M6o=l(),Xfe=a("p"),E6o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),C6o=l(),Vi=a("p"),w6o=o(`Note:
Loading a model from its configuration file does `),zfe=a("strong"),A6o=o("not"),L6o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KD=a("a"),y6o=o("from_pretrained()"),x6o=o(" to load the model weights."),$6o=l(),F(w7.$$.fragment),k6o=l(),Ke=a("div"),F(hL.$$.fragment),S6o=l(),Qfe=a("p"),R6o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),P6o=l(),Pa=a("p"),B6o=o("The model class to instantiate is selected based on the "),Wfe=a("code"),I6o=o("model_type"),N6o=o(` property of the config object (either
passed as an argument or loaded from `),Hfe=a("code"),q6o=o("pretrained_model_name_or_path"),j6o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ufe=a("code"),D6o=o("pretrained_model_name_or_path"),G6o=o(":"),O6o=l(),z=a("ul"),A7=a("li"),Jfe=a("strong"),V6o=o("bart"),X6o=o(" \u2014 "),ZD=a("a"),z6o=o("BartForCausalLM"),Q6o=o(" (BART model)"),W6o=l(),L7=a("li"),Yfe=a("strong"),H6o=o("bert"),U6o=o(" \u2014 "),eG=a("a"),J6o=o("BertLMHeadModel"),Y6o=o(" (BERT model)"),K6o=l(),y7=a("li"),Kfe=a("strong"),Z6o=o("bert-generation"),eLo=o(" \u2014 "),oG=a("a"),oLo=o("BertGenerationDecoder"),rLo=o(" (Bert Generation model)"),tLo=l(),x7=a("li"),Zfe=a("strong"),aLo=o("big_bird"),nLo=o(" \u2014 "),rG=a("a"),sLo=o("BigBirdForCausalLM"),lLo=o(" (BigBird model)"),iLo=l(),$7=a("li"),eme=a("strong"),dLo=o("bigbird_pegasus"),cLo=o(" \u2014 "),tG=a("a"),fLo=o("BigBirdPegasusForCausalLM"),mLo=o(" (BigBird-Pegasus model)"),gLo=l(),k7=a("li"),ome=a("strong"),hLo=o("blenderbot"),pLo=o(" \u2014 "),aG=a("a"),_Lo=o("BlenderbotForCausalLM"),uLo=o(" (Blenderbot model)"),bLo=l(),S7=a("li"),rme=a("strong"),vLo=o("blenderbot-small"),FLo=o(" \u2014 "),nG=a("a"),TLo=o("BlenderbotSmallForCausalLM"),MLo=o(" (BlenderbotSmall model)"),ELo=l(),R7=a("li"),tme=a("strong"),CLo=o("bloom"),wLo=o(" \u2014 "),sG=a("a"),ALo=o("BloomForCausalLM"),LLo=o(" (BLOOM model)"),yLo=l(),P7=a("li"),ame=a("strong"),xLo=o("camembert"),$Lo=o(" \u2014 "),lG=a("a"),kLo=o("CamembertForCausalLM"),SLo=o(" (CamemBERT model)"),RLo=l(),B7=a("li"),nme=a("strong"),PLo=o("ctrl"),BLo=o(" \u2014 "),iG=a("a"),ILo=o("CTRLLMHeadModel"),NLo=o(" (CTRL model)"),qLo=l(),I7=a("li"),sme=a("strong"),jLo=o("data2vec-text"),DLo=o(" \u2014 "),dG=a("a"),GLo=o("Data2VecTextForCausalLM"),OLo=o(" (Data2VecText model)"),VLo=l(),N7=a("li"),lme=a("strong"),XLo=o("electra"),zLo=o(" \u2014 "),cG=a("a"),QLo=o("ElectraForCausalLM"),WLo=o(" (ELECTRA model)"),HLo=l(),q7=a("li"),ime=a("strong"),ULo=o("gpt2"),JLo=o(" \u2014 "),fG=a("a"),YLo=o("GPT2LMHeadModel"),KLo=o(" (OpenAI GPT-2 model)"),ZLo=l(),j7=a("li"),dme=a("strong"),eyo=o("gpt_neo"),oyo=o(" \u2014 "),mG=a("a"),ryo=o("GPTNeoForCausalLM"),tyo=o(" (GPT Neo model)"),ayo=l(),D7=a("li"),cme=a("strong"),nyo=o("gpt_neox"),syo=o(" \u2014 "),gG=a("a"),lyo=o("GPTNeoXForCausalLM"),iyo=o(" (GPT NeoX model)"),dyo=l(),G7=a("li"),fme=a("strong"),cyo=o("gptj"),fyo=o(" \u2014 "),hG=a("a"),myo=o("GPTJForCausalLM"),gyo=o(" (GPT-J model)"),hyo=l(),O7=a("li"),mme=a("strong"),pyo=o("marian"),_yo=o(" \u2014 "),pG=a("a"),uyo=o("MarianForCausalLM"),byo=o(" (Marian model)"),vyo=l(),V7=a("li"),gme=a("strong"),Fyo=o("mbart"),Tyo=o(" \u2014 "),_G=a("a"),Myo=o("MBartForCausalLM"),Eyo=o(" (mBART model)"),Cyo=l(),X7=a("li"),hme=a("strong"),wyo=o("megatron-bert"),Ayo=o(" \u2014 "),uG=a("a"),Lyo=o("MegatronBertForCausalLM"),yyo=o(" (Megatron-BERT model)"),xyo=l(),z7=a("li"),pme=a("strong"),$yo=o("mvp"),kyo=o(" \u2014 "),bG=a("a"),Syo=o("MvpForCausalLM"),Ryo=o(" (MVP model)"),Pyo=l(),Q7=a("li"),_me=a("strong"),Byo=o("openai-gpt"),Iyo=o(" \u2014 "),vG=a("a"),Nyo=o("OpenAIGPTLMHeadModel"),qyo=o(" (OpenAI GPT model)"),jyo=l(),W7=a("li"),ume=a("strong"),Dyo=o("opt"),Gyo=o(" \u2014 "),FG=a("a"),Oyo=o("OPTForCausalLM"),Vyo=o(" (OPT model)"),Xyo=l(),H7=a("li"),bme=a("strong"),zyo=o("pegasus"),Qyo=o(" \u2014 "),TG=a("a"),Wyo=o("PegasusForCausalLM"),Hyo=o(" (Pegasus model)"),Uyo=l(),U7=a("li"),vme=a("strong"),Jyo=o("plbart"),Yyo=o(" \u2014 "),MG=a("a"),Kyo=o("PLBartForCausalLM"),Zyo=o(" (PLBart model)"),e9o=l(),J7=a("li"),Fme=a("strong"),o9o=o("prophetnet"),r9o=o(" \u2014 "),EG=a("a"),t9o=o("ProphetNetForCausalLM"),a9o=o(" (ProphetNet model)"),n9o=l(),Y7=a("li"),Tme=a("strong"),s9o=o("qdqbert"),l9o=o(" \u2014 "),CG=a("a"),i9o=o("QDQBertLMHeadModel"),d9o=o(" (QDQBert model)"),c9o=l(),K7=a("li"),Mme=a("strong"),f9o=o("reformer"),m9o=o(" \u2014 "),wG=a("a"),g9o=o("ReformerModelWithLMHead"),h9o=o(" (Reformer model)"),p9o=l(),Z7=a("li"),Eme=a("strong"),_9o=o("rembert"),u9o=o(" \u2014 "),AG=a("a"),b9o=o("RemBertForCausalLM"),v9o=o(" (RemBERT model)"),F9o=l(),e1=a("li"),Cme=a("strong"),T9o=o("roberta"),M9o=o(" \u2014 "),LG=a("a"),E9o=o("RobertaForCausalLM"),C9o=o(" (RoBERTa model)"),w9o=l(),o1=a("li"),wme=a("strong"),A9o=o("roformer"),L9o=o(" \u2014 "),yG=a("a"),y9o=o("RoFormerForCausalLM"),x9o=o(" (RoFormer model)"),$9o=l(),r1=a("li"),Ame=a("strong"),k9o=o("speech_to_text_2"),S9o=o(" \u2014 "),xG=a("a"),R9o=o("Speech2Text2ForCausalLM"),P9o=o(" (Speech2Text2 model)"),B9o=l(),t1=a("li"),Lme=a("strong"),I9o=o("transfo-xl"),N9o=o(" \u2014 "),$G=a("a"),q9o=o("TransfoXLLMHeadModel"),j9o=o(" (Transformer-XL model)"),D9o=l(),a1=a("li"),yme=a("strong"),G9o=o("trocr"),O9o=o(" \u2014 "),kG=a("a"),V9o=o("TrOCRForCausalLM"),X9o=o(" (TrOCR model)"),z9o=l(),n1=a("li"),xme=a("strong"),Q9o=o("xglm"),W9o=o(" \u2014 "),SG=a("a"),H9o=o("XGLMForCausalLM"),U9o=o(" (XGLM model)"),J9o=l(),s1=a("li"),$me=a("strong"),Y9o=o("xlm"),K9o=o(" \u2014 "),RG=a("a"),Z9o=o("XLMWithLMHeadModel"),exo=o(" (XLM model)"),oxo=l(),l1=a("li"),kme=a("strong"),rxo=o("xlm-prophetnet"),txo=o(" \u2014 "),PG=a("a"),axo=o("XLMProphetNetForCausalLM"),nxo=o(" (XLM-ProphetNet model)"),sxo=l(),i1=a("li"),Sme=a("strong"),lxo=o("xlm-roberta"),ixo=o(" \u2014 "),BG=a("a"),dxo=o("XLMRobertaForCausalLM"),cxo=o(" (XLM-RoBERTa model)"),fxo=l(),d1=a("li"),Rme=a("strong"),mxo=o("xlm-roberta-xl"),gxo=o(" \u2014 "),IG=a("a"),hxo=o("XLMRobertaXLForCausalLM"),pxo=o(" (XLM-RoBERTa-XL model)"),_xo=l(),c1=a("li"),Pme=a("strong"),uxo=o("xlnet"),bxo=o(" \u2014 "),NG=a("a"),vxo=o("XLNetLMHeadModel"),Fxo=o(" (XLNet model)"),Txo=l(),f1=a("p"),Mxo=o("The model is set in evaluation mode by default using "),Bme=a("code"),Exo=o("model.eval()"),Cxo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ime=a("code"),wxo=o("model.train()"),Axo=l(),F(m1.$$.fragment),eOe=l(),Xi=a("h2"),g1=a("a"),Nme=a("span"),F(pL.$$.fragment),Lxo=l(),qme=a("span"),yxo=o("AutoModelForMaskedLM"),oOe=l(),So=a("div"),F(_L.$$.fragment),xxo=l(),zi=a("p"),$xo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),qG=a("a"),kxo=o("from_pretrained()"),Sxo=o(" class method or the "),jG=a("a"),Rxo=o("from_config()"),Pxo=o(` class
method.`),Bxo=l(),uL=a("p"),Ixo=o("This class cannot be instantiated directly using "),jme=a("code"),Nxo=o("__init__()"),qxo=o(" (throws an error)."),jxo=l(),it=a("div"),F(bL.$$.fragment),Dxo=l(),Dme=a("p"),Gxo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Oxo=l(),Qi=a("p"),Vxo=o(`Note:
Loading a model from its configuration file does `),Gme=a("strong"),Xxo=o("not"),zxo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DG=a("a"),Qxo=o("from_pretrained()"),Wxo=o(" to load the model weights."),Hxo=l(),F(h1.$$.fragment),Uxo=l(),Ze=a("div"),F(vL.$$.fragment),Jxo=l(),Ome=a("p"),Yxo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Kxo=l(),Ba=a("p"),Zxo=o("The model class to instantiate is selected based on the "),Vme=a("code"),e$o=o("model_type"),o$o=o(` property of the config object (either
passed as an argument or loaded from `),Xme=a("code"),r$o=o("pretrained_model_name_or_path"),t$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zme=a("code"),a$o=o("pretrained_model_name_or_path"),n$o=o(":"),s$o=l(),W=a("ul"),p1=a("li"),Qme=a("strong"),l$o=o("albert"),i$o=o(" \u2014 "),GG=a("a"),d$o=o("AlbertForMaskedLM"),c$o=o(" (ALBERT model)"),f$o=l(),_1=a("li"),Wme=a("strong"),m$o=o("bart"),g$o=o(" \u2014 "),OG=a("a"),h$o=o("BartForConditionalGeneration"),p$o=o(" (BART model)"),_$o=l(),u1=a("li"),Hme=a("strong"),u$o=o("bert"),b$o=o(" \u2014 "),VG=a("a"),v$o=o("BertForMaskedLM"),F$o=o(" (BERT model)"),T$o=l(),b1=a("li"),Ume=a("strong"),M$o=o("big_bird"),E$o=o(" \u2014 "),XG=a("a"),C$o=o("BigBirdForMaskedLM"),w$o=o(" (BigBird model)"),A$o=l(),v1=a("li"),Jme=a("strong"),L$o=o("camembert"),y$o=o(" \u2014 "),zG=a("a"),x$o=o("CamembertForMaskedLM"),$$o=o(" (CamemBERT model)"),k$o=l(),F1=a("li"),Yme=a("strong"),S$o=o("convbert"),R$o=o(" \u2014 "),QG=a("a"),P$o=o("ConvBertForMaskedLM"),B$o=o(" (ConvBERT model)"),I$o=l(),T1=a("li"),Kme=a("strong"),N$o=o("data2vec-text"),q$o=o(" \u2014 "),WG=a("a"),j$o=o("Data2VecTextForMaskedLM"),D$o=o(" (Data2VecText model)"),G$o=l(),M1=a("li"),Zme=a("strong"),O$o=o("deberta"),V$o=o(" \u2014 "),HG=a("a"),X$o=o("DebertaForMaskedLM"),z$o=o(" (DeBERTa model)"),Q$o=l(),E1=a("li"),ege=a("strong"),W$o=o("deberta-v2"),H$o=o(" \u2014 "),UG=a("a"),U$o=o("DebertaV2ForMaskedLM"),J$o=o(" (DeBERTa-v2 model)"),Y$o=l(),C1=a("li"),oge=a("strong"),K$o=o("distilbert"),Z$o=o(" \u2014 "),JG=a("a"),eko=o("DistilBertForMaskedLM"),oko=o(" (DistilBERT model)"),rko=l(),w1=a("li"),rge=a("strong"),tko=o("electra"),ako=o(" \u2014 "),YG=a("a"),nko=o("ElectraForMaskedLM"),sko=o(" (ELECTRA model)"),lko=l(),A1=a("li"),tge=a("strong"),iko=o("flaubert"),dko=o(" \u2014 "),KG=a("a"),cko=o("FlaubertWithLMHeadModel"),fko=o(" (FlauBERT model)"),mko=l(),L1=a("li"),age=a("strong"),gko=o("fnet"),hko=o(" \u2014 "),ZG=a("a"),pko=o("FNetForMaskedLM"),_ko=o(" (FNet model)"),uko=l(),y1=a("li"),nge=a("strong"),bko=o("funnel"),vko=o(" \u2014 "),eO=a("a"),Fko=o("FunnelForMaskedLM"),Tko=o(" (Funnel Transformer model)"),Mko=l(),x1=a("li"),sge=a("strong"),Eko=o("ibert"),Cko=o(" \u2014 "),oO=a("a"),wko=o("IBertForMaskedLM"),Ako=o(" (I-BERT model)"),Lko=l(),$1=a("li"),lge=a("strong"),yko=o("layoutlm"),xko=o(" \u2014 "),rO=a("a"),$ko=o("LayoutLMForMaskedLM"),kko=o(" (LayoutLM model)"),Sko=l(),k1=a("li"),ige=a("strong"),Rko=o("longformer"),Pko=o(" \u2014 "),tO=a("a"),Bko=o("LongformerForMaskedLM"),Iko=o(" (Longformer model)"),Nko=l(),S1=a("li"),dge=a("strong"),qko=o("luke"),jko=o(" \u2014 "),aO=a("a"),Dko=o("LukeForMaskedLM"),Gko=o(" (LUKE model)"),Oko=l(),R1=a("li"),cge=a("strong"),Vko=o("mbart"),Xko=o(" \u2014 "),nO=a("a"),zko=o("MBartForConditionalGeneration"),Qko=o(" (mBART model)"),Wko=l(),P1=a("li"),fge=a("strong"),Hko=o("megatron-bert"),Uko=o(" \u2014 "),sO=a("a"),Jko=o("MegatronBertForMaskedLM"),Yko=o(" (Megatron-BERT model)"),Kko=l(),B1=a("li"),mge=a("strong"),Zko=o("mobilebert"),eSo=o(" \u2014 "),lO=a("a"),oSo=o("MobileBertForMaskedLM"),rSo=o(" (MobileBERT model)"),tSo=l(),I1=a("li"),gge=a("strong"),aSo=o("mpnet"),nSo=o(" \u2014 "),iO=a("a"),sSo=o("MPNetForMaskedLM"),lSo=o(" (MPNet model)"),iSo=l(),N1=a("li"),hge=a("strong"),dSo=o("mvp"),cSo=o(" \u2014 "),dO=a("a"),fSo=o("MvpForConditionalGeneration"),mSo=o(" (MVP model)"),gSo=l(),q1=a("li"),pge=a("strong"),hSo=o("nystromformer"),pSo=o(" \u2014 "),cO=a("a"),_So=o("NystromformerForMaskedLM"),uSo=o(" (Nystr\xF6mformer model)"),bSo=l(),j1=a("li"),_ge=a("strong"),vSo=o("perceiver"),FSo=o(" \u2014 "),fO=a("a"),TSo=o("PerceiverForMaskedLM"),MSo=o(" (Perceiver model)"),ESo=l(),D1=a("li"),uge=a("strong"),CSo=o("qdqbert"),wSo=o(" \u2014 "),mO=a("a"),ASo=o("QDQBertForMaskedLM"),LSo=o(" (QDQBert model)"),ySo=l(),G1=a("li"),bge=a("strong"),xSo=o("reformer"),$So=o(" \u2014 "),gO=a("a"),kSo=o("ReformerForMaskedLM"),SSo=o(" (Reformer model)"),RSo=l(),O1=a("li"),vge=a("strong"),PSo=o("rembert"),BSo=o(" \u2014 "),hO=a("a"),ISo=o("RemBertForMaskedLM"),NSo=o(" (RemBERT model)"),qSo=l(),V1=a("li"),Fge=a("strong"),jSo=o("roberta"),DSo=o(" \u2014 "),pO=a("a"),GSo=o("RobertaForMaskedLM"),OSo=o(" (RoBERTa model)"),VSo=l(),X1=a("li"),Tge=a("strong"),XSo=o("roformer"),zSo=o(" \u2014 "),_O=a("a"),QSo=o("RoFormerForMaskedLM"),WSo=o(" (RoFormer model)"),HSo=l(),z1=a("li"),Mge=a("strong"),USo=o("squeezebert"),JSo=o(" \u2014 "),uO=a("a"),YSo=o("SqueezeBertForMaskedLM"),KSo=o(" (SqueezeBERT model)"),ZSo=l(),Q1=a("li"),Ege=a("strong"),eRo=o("tapas"),oRo=o(" \u2014 "),bO=a("a"),rRo=o("TapasForMaskedLM"),tRo=o(" (TAPAS model)"),aRo=l(),W1=a("li"),Cge=a("strong"),nRo=o("wav2vec2"),sRo=o(" \u2014 "),wge=a("code"),lRo=o("Wav2Vec2ForMaskedLM"),iRo=o(" (Wav2Vec2 model)"),dRo=l(),H1=a("li"),Age=a("strong"),cRo=o("xlm"),fRo=o(" \u2014 "),vO=a("a"),mRo=o("XLMWithLMHeadModel"),gRo=o(" (XLM model)"),hRo=l(),U1=a("li"),Lge=a("strong"),pRo=o("xlm-roberta"),_Ro=o(" \u2014 "),FO=a("a"),uRo=o("XLMRobertaForMaskedLM"),bRo=o(" (XLM-RoBERTa model)"),vRo=l(),J1=a("li"),yge=a("strong"),FRo=o("xlm-roberta-xl"),TRo=o(" \u2014 "),TO=a("a"),MRo=o("XLMRobertaXLForMaskedLM"),ERo=o(" (XLM-RoBERTa-XL model)"),CRo=l(),Y1=a("li"),xge=a("strong"),wRo=o("yoso"),ARo=o(" \u2014 "),MO=a("a"),LRo=o("YosoForMaskedLM"),yRo=o(" (YOSO model)"),xRo=l(),K1=a("p"),$Ro=o("The model is set in evaluation mode by default using "),$ge=a("code"),kRo=o("model.eval()"),SRo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kge=a("code"),RRo=o("model.train()"),PRo=l(),F(Z1.$$.fragment),rOe=l(),Wi=a("h2"),e2=a("a"),Sge=a("span"),F(FL.$$.fragment),BRo=l(),Rge=a("span"),IRo=o("AutoModelForSeq2SeqLM"),tOe=l(),Ro=a("div"),F(TL.$$.fragment),NRo=l(),Hi=a("p"),qRo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),EO=a("a"),jRo=o("from_pretrained()"),DRo=o(" class method or the "),CO=a("a"),GRo=o("from_config()"),ORo=o(` class
method.`),VRo=l(),ML=a("p"),XRo=o("This class cannot be instantiated directly using "),Pge=a("code"),zRo=o("__init__()"),QRo=o(" (throws an error)."),WRo=l(),dt=a("div"),F(EL.$$.fragment),HRo=l(),Bge=a("p"),URo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),JRo=l(),Ui=a("p"),YRo=o(`Note:
Loading a model from its configuration file does `),Ige=a("strong"),KRo=o("not"),ZRo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wO=a("a"),ePo=o("from_pretrained()"),oPo=o(" to load the model weights."),rPo=l(),F(o2.$$.fragment),tPo=l(),eo=a("div"),F(CL.$$.fragment),aPo=l(),Nge=a("p"),nPo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),sPo=l(),Ia=a("p"),lPo=o("The model class to instantiate is selected based on the "),qge=a("code"),iPo=o("model_type"),dPo=o(` property of the config object (either
passed as an argument or loaded from `),jge=a("code"),cPo=o("pretrained_model_name_or_path"),fPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dge=a("code"),mPo=o("pretrained_model_name_or_path"),gPo=o(":"),hPo=l(),he=a("ul"),r2=a("li"),Gge=a("strong"),pPo=o("bart"),_Po=o(" \u2014 "),AO=a("a"),uPo=o("BartForConditionalGeneration"),bPo=o(" (BART model)"),vPo=l(),t2=a("li"),Oge=a("strong"),FPo=o("bigbird_pegasus"),TPo=o(" \u2014 "),LO=a("a"),MPo=o("BigBirdPegasusForConditionalGeneration"),EPo=o(" (BigBird-Pegasus model)"),CPo=l(),a2=a("li"),Vge=a("strong"),wPo=o("blenderbot"),APo=o(" \u2014 "),yO=a("a"),LPo=o("BlenderbotForConditionalGeneration"),yPo=o(" (Blenderbot model)"),xPo=l(),n2=a("li"),Xge=a("strong"),$Po=o("blenderbot-small"),kPo=o(" \u2014 "),xO=a("a"),SPo=o("BlenderbotSmallForConditionalGeneration"),RPo=o(" (BlenderbotSmall model)"),PPo=l(),s2=a("li"),zge=a("strong"),BPo=o("encoder-decoder"),IPo=o(" \u2014 "),$O=a("a"),NPo=o("EncoderDecoderModel"),qPo=o(" (Encoder decoder model)"),jPo=l(),l2=a("li"),Qge=a("strong"),DPo=o("fsmt"),GPo=o(" \u2014 "),kO=a("a"),OPo=o("FSMTForConditionalGeneration"),VPo=o(" (FairSeq Machine-Translation model)"),XPo=l(),i2=a("li"),Wge=a("strong"),zPo=o("led"),QPo=o(" \u2014 "),SO=a("a"),WPo=o("LEDForConditionalGeneration"),HPo=o(" (LED model)"),UPo=l(),d2=a("li"),Hge=a("strong"),JPo=o("longt5"),YPo=o(" \u2014 "),RO=a("a"),KPo=o("LongT5ForConditionalGeneration"),ZPo=o(" (LongT5 model)"),eBo=l(),c2=a("li"),Uge=a("strong"),oBo=o("m2m_100"),rBo=o(" \u2014 "),PO=a("a"),tBo=o("M2M100ForConditionalGeneration"),aBo=o(" (M2M100 model)"),nBo=l(),f2=a("li"),Jge=a("strong"),sBo=o("marian"),lBo=o(" \u2014 "),BO=a("a"),iBo=o("MarianMTModel"),dBo=o(" (Marian model)"),cBo=l(),m2=a("li"),Yge=a("strong"),fBo=o("mbart"),mBo=o(" \u2014 "),IO=a("a"),gBo=o("MBartForConditionalGeneration"),hBo=o(" (mBART model)"),pBo=l(),g2=a("li"),Kge=a("strong"),_Bo=o("mt5"),uBo=o(" \u2014 "),NO=a("a"),bBo=o("MT5ForConditionalGeneration"),vBo=o(" (MT5 model)"),FBo=l(),h2=a("li"),Zge=a("strong"),TBo=o("mvp"),MBo=o(" \u2014 "),qO=a("a"),EBo=o("MvpForConditionalGeneration"),CBo=o(" (MVP model)"),wBo=l(),p2=a("li"),ehe=a("strong"),ABo=o("pegasus"),LBo=o(" \u2014 "),jO=a("a"),yBo=o("PegasusForConditionalGeneration"),xBo=o(" (Pegasus model)"),$Bo=l(),_2=a("li"),ohe=a("strong"),kBo=o("plbart"),SBo=o(" \u2014 "),DO=a("a"),RBo=o("PLBartForConditionalGeneration"),PBo=o(" (PLBart model)"),BBo=l(),u2=a("li"),rhe=a("strong"),IBo=o("prophetnet"),NBo=o(" \u2014 "),GO=a("a"),qBo=o("ProphetNetForConditionalGeneration"),jBo=o(" (ProphetNet model)"),DBo=l(),b2=a("li"),the=a("strong"),GBo=o("t5"),OBo=o(" \u2014 "),OO=a("a"),VBo=o("T5ForConditionalGeneration"),XBo=o(" (T5 model)"),zBo=l(),v2=a("li"),ahe=a("strong"),QBo=o("xlm-prophetnet"),WBo=o(" \u2014 "),VO=a("a"),HBo=o("XLMProphetNetForConditionalGeneration"),UBo=o(" (XLM-ProphetNet model)"),JBo=l(),F2=a("p"),YBo=o("The model is set in evaluation mode by default using "),nhe=a("code"),KBo=o("model.eval()"),ZBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),she=a("code"),eIo=o("model.train()"),oIo=l(),F(T2.$$.fragment),aOe=l(),Ji=a("h2"),M2=a("a"),lhe=a("span"),F(wL.$$.fragment),rIo=l(),ihe=a("span"),tIo=o("AutoModelForSequenceClassification"),nOe=l(),Po=a("div"),F(AL.$$.fragment),aIo=l(),Yi=a("p"),nIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),XO=a("a"),sIo=o("from_pretrained()"),lIo=o(" class method or the "),zO=a("a"),iIo=o("from_config()"),dIo=o(` class
method.`),cIo=l(),LL=a("p"),fIo=o("This class cannot be instantiated directly using "),dhe=a("code"),mIo=o("__init__()"),gIo=o(" (throws an error)."),hIo=l(),ct=a("div"),F(yL.$$.fragment),pIo=l(),che=a("p"),_Io=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),uIo=l(),Ki=a("p"),bIo=o(`Note:
Loading a model from its configuration file does `),fhe=a("strong"),vIo=o("not"),FIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QO=a("a"),TIo=o("from_pretrained()"),MIo=o(" to load the model weights."),EIo=l(),F(E2.$$.fragment),CIo=l(),oo=a("div"),F(xL.$$.fragment),wIo=l(),mhe=a("p"),AIo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),LIo=l(),Na=a("p"),yIo=o("The model class to instantiate is selected based on the "),ghe=a("code"),xIo=o("model_type"),$Io=o(` property of the config object (either
passed as an argument or loaded from `),hhe=a("code"),kIo=o("pretrained_model_name_or_path"),SIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),phe=a("code"),RIo=o("pretrained_model_name_or_path"),PIo=o(":"),BIo=l(),N=a("ul"),C2=a("li"),_he=a("strong"),IIo=o("albert"),NIo=o(" \u2014 "),WO=a("a"),qIo=o("AlbertForSequenceClassification"),jIo=o(" (ALBERT model)"),DIo=l(),w2=a("li"),uhe=a("strong"),GIo=o("bart"),OIo=o(" \u2014 "),HO=a("a"),VIo=o("BartForSequenceClassification"),XIo=o(" (BART model)"),zIo=l(),A2=a("li"),bhe=a("strong"),QIo=o("bert"),WIo=o(" \u2014 "),UO=a("a"),HIo=o("BertForSequenceClassification"),UIo=o(" (BERT model)"),JIo=l(),L2=a("li"),vhe=a("strong"),YIo=o("big_bird"),KIo=o(" \u2014 "),JO=a("a"),ZIo=o("BigBirdForSequenceClassification"),eNo=o(" (BigBird model)"),oNo=l(),y2=a("li"),Fhe=a("strong"),rNo=o("bigbird_pegasus"),tNo=o(" \u2014 "),YO=a("a"),aNo=o("BigBirdPegasusForSequenceClassification"),nNo=o(" (BigBird-Pegasus model)"),sNo=l(),x2=a("li"),The=a("strong"),lNo=o("bloom"),iNo=o(" \u2014 "),KO=a("a"),dNo=o("BloomForSequenceClassification"),cNo=o(" (BLOOM model)"),fNo=l(),$2=a("li"),Mhe=a("strong"),mNo=o("camembert"),gNo=o(" \u2014 "),ZO=a("a"),hNo=o("CamembertForSequenceClassification"),pNo=o(" (CamemBERT model)"),_No=l(),k2=a("li"),Ehe=a("strong"),uNo=o("canine"),bNo=o(" \u2014 "),eV=a("a"),vNo=o("CanineForSequenceClassification"),FNo=o(" (CANINE model)"),TNo=l(),S2=a("li"),Che=a("strong"),MNo=o("convbert"),ENo=o(" \u2014 "),oV=a("a"),CNo=o("ConvBertForSequenceClassification"),wNo=o(" (ConvBERT model)"),ANo=l(),R2=a("li"),whe=a("strong"),LNo=o("ctrl"),yNo=o(" \u2014 "),rV=a("a"),xNo=o("CTRLForSequenceClassification"),$No=o(" (CTRL model)"),kNo=l(),P2=a("li"),Ahe=a("strong"),SNo=o("data2vec-text"),RNo=o(" \u2014 "),tV=a("a"),PNo=o("Data2VecTextForSequenceClassification"),BNo=o(" (Data2VecText model)"),INo=l(),B2=a("li"),Lhe=a("strong"),NNo=o("deberta"),qNo=o(" \u2014 "),aV=a("a"),jNo=o("DebertaForSequenceClassification"),DNo=o(" (DeBERTa model)"),GNo=l(),I2=a("li"),yhe=a("strong"),ONo=o("deberta-v2"),VNo=o(" \u2014 "),nV=a("a"),XNo=o("DebertaV2ForSequenceClassification"),zNo=o(" (DeBERTa-v2 model)"),QNo=l(),N2=a("li"),xhe=a("strong"),WNo=o("distilbert"),HNo=o(" \u2014 "),sV=a("a"),UNo=o("DistilBertForSequenceClassification"),JNo=o(" (DistilBERT model)"),YNo=l(),q2=a("li"),$he=a("strong"),KNo=o("electra"),ZNo=o(" \u2014 "),lV=a("a"),eqo=o("ElectraForSequenceClassification"),oqo=o(" (ELECTRA model)"),rqo=l(),j2=a("li"),khe=a("strong"),tqo=o("flaubert"),aqo=o(" \u2014 "),iV=a("a"),nqo=o("FlaubertForSequenceClassification"),sqo=o(" (FlauBERT model)"),lqo=l(),D2=a("li"),She=a("strong"),iqo=o("fnet"),dqo=o(" \u2014 "),dV=a("a"),cqo=o("FNetForSequenceClassification"),fqo=o(" (FNet model)"),mqo=l(),G2=a("li"),Rhe=a("strong"),gqo=o("funnel"),hqo=o(" \u2014 "),cV=a("a"),pqo=o("FunnelForSequenceClassification"),_qo=o(" (Funnel Transformer model)"),uqo=l(),O2=a("li"),Phe=a("strong"),bqo=o("gpt2"),vqo=o(" \u2014 "),fV=a("a"),Fqo=o("GPT2ForSequenceClassification"),Tqo=o(" (OpenAI GPT-2 model)"),Mqo=l(),V2=a("li"),Bhe=a("strong"),Eqo=o("gpt_neo"),Cqo=o(" \u2014 "),mV=a("a"),wqo=o("GPTNeoForSequenceClassification"),Aqo=o(" (GPT Neo model)"),Lqo=l(),X2=a("li"),Ihe=a("strong"),yqo=o("gptj"),xqo=o(" \u2014 "),gV=a("a"),$qo=o("GPTJForSequenceClassification"),kqo=o(" (GPT-J model)"),Sqo=l(),z2=a("li"),Nhe=a("strong"),Rqo=o("ibert"),Pqo=o(" \u2014 "),hV=a("a"),Bqo=o("IBertForSequenceClassification"),Iqo=o(" (I-BERT model)"),Nqo=l(),Q2=a("li"),qhe=a("strong"),qqo=o("layoutlm"),jqo=o(" \u2014 "),pV=a("a"),Dqo=o("LayoutLMForSequenceClassification"),Gqo=o(" (LayoutLM model)"),Oqo=l(),W2=a("li"),jhe=a("strong"),Vqo=o("layoutlmv2"),Xqo=o(" \u2014 "),_V=a("a"),zqo=o("LayoutLMv2ForSequenceClassification"),Qqo=o(" (LayoutLMv2 model)"),Wqo=l(),H2=a("li"),Dhe=a("strong"),Hqo=o("layoutlmv3"),Uqo=o(" \u2014 "),uV=a("a"),Jqo=o("LayoutLMv3ForSequenceClassification"),Yqo=o(" (LayoutLMv3 model)"),Kqo=l(),U2=a("li"),Ghe=a("strong"),Zqo=o("led"),ejo=o(" \u2014 "),bV=a("a"),ojo=o("LEDForSequenceClassification"),rjo=o(" (LED model)"),tjo=l(),J2=a("li"),Ohe=a("strong"),ajo=o("longformer"),njo=o(" \u2014 "),vV=a("a"),sjo=o("LongformerForSequenceClassification"),ljo=o(" (Longformer model)"),ijo=l(),Y2=a("li"),Vhe=a("strong"),djo=o("mbart"),cjo=o(" \u2014 "),FV=a("a"),fjo=o("MBartForSequenceClassification"),mjo=o(" (mBART model)"),gjo=l(),K2=a("li"),Xhe=a("strong"),hjo=o("megatron-bert"),pjo=o(" \u2014 "),TV=a("a"),_jo=o("MegatronBertForSequenceClassification"),ujo=o(" (Megatron-BERT model)"),bjo=l(),Z2=a("li"),zhe=a("strong"),vjo=o("mobilebert"),Fjo=o(" \u2014 "),MV=a("a"),Tjo=o("MobileBertForSequenceClassification"),Mjo=o(" (MobileBERT model)"),Ejo=l(),eb=a("li"),Qhe=a("strong"),Cjo=o("mpnet"),wjo=o(" \u2014 "),EV=a("a"),Ajo=o("MPNetForSequenceClassification"),Ljo=o(" (MPNet model)"),yjo=l(),ob=a("li"),Whe=a("strong"),xjo=o("mvp"),$jo=o(" \u2014 "),CV=a("a"),kjo=o("MvpForSequenceClassification"),Sjo=o(" (MVP model)"),Rjo=l(),rb=a("li"),Hhe=a("strong"),Pjo=o("nystromformer"),Bjo=o(" \u2014 "),wV=a("a"),Ijo=o("NystromformerForSequenceClassification"),Njo=o(" (Nystr\xF6mformer model)"),qjo=l(),tb=a("li"),Uhe=a("strong"),jjo=o("openai-gpt"),Djo=o(" \u2014 "),AV=a("a"),Gjo=o("OpenAIGPTForSequenceClassification"),Ojo=o(" (OpenAI GPT model)"),Vjo=l(),ab=a("li"),Jhe=a("strong"),Xjo=o("perceiver"),zjo=o(" \u2014 "),LV=a("a"),Qjo=o("PerceiverForSequenceClassification"),Wjo=o(" (Perceiver model)"),Hjo=l(),nb=a("li"),Yhe=a("strong"),Ujo=o("plbart"),Jjo=o(" \u2014 "),yV=a("a"),Yjo=o("PLBartForSequenceClassification"),Kjo=o(" (PLBart model)"),Zjo=l(),sb=a("li"),Khe=a("strong"),eDo=o("qdqbert"),oDo=o(" \u2014 "),xV=a("a"),rDo=o("QDQBertForSequenceClassification"),tDo=o(" (QDQBert model)"),aDo=l(),lb=a("li"),Zhe=a("strong"),nDo=o("reformer"),sDo=o(" \u2014 "),$V=a("a"),lDo=o("ReformerForSequenceClassification"),iDo=o(" (Reformer model)"),dDo=l(),ib=a("li"),epe=a("strong"),cDo=o("rembert"),fDo=o(" \u2014 "),kV=a("a"),mDo=o("RemBertForSequenceClassification"),gDo=o(" (RemBERT model)"),hDo=l(),db=a("li"),ope=a("strong"),pDo=o("roberta"),_Do=o(" \u2014 "),SV=a("a"),uDo=o("RobertaForSequenceClassification"),bDo=o(" (RoBERTa model)"),vDo=l(),cb=a("li"),rpe=a("strong"),FDo=o("roformer"),TDo=o(" \u2014 "),RV=a("a"),MDo=o("RoFormerForSequenceClassification"),EDo=o(" (RoFormer model)"),CDo=l(),fb=a("li"),tpe=a("strong"),wDo=o("squeezebert"),ADo=o(" \u2014 "),PV=a("a"),LDo=o("SqueezeBertForSequenceClassification"),yDo=o(" (SqueezeBERT model)"),xDo=l(),mb=a("li"),ape=a("strong"),$Do=o("tapas"),kDo=o(" \u2014 "),BV=a("a"),SDo=o("TapasForSequenceClassification"),RDo=o(" (TAPAS model)"),PDo=l(),gb=a("li"),npe=a("strong"),BDo=o("transfo-xl"),IDo=o(" \u2014 "),IV=a("a"),NDo=o("TransfoXLForSequenceClassification"),qDo=o(" (Transformer-XL model)"),jDo=l(),hb=a("li"),spe=a("strong"),DDo=o("xlm"),GDo=o(" \u2014 "),NV=a("a"),ODo=o("XLMForSequenceClassification"),VDo=o(" (XLM model)"),XDo=l(),pb=a("li"),lpe=a("strong"),zDo=o("xlm-roberta"),QDo=o(" \u2014 "),qV=a("a"),WDo=o("XLMRobertaForSequenceClassification"),HDo=o(" (XLM-RoBERTa model)"),UDo=l(),_b=a("li"),ipe=a("strong"),JDo=o("xlm-roberta-xl"),YDo=o(" \u2014 "),jV=a("a"),KDo=o("XLMRobertaXLForSequenceClassification"),ZDo=o(" (XLM-RoBERTa-XL model)"),eGo=l(),ub=a("li"),dpe=a("strong"),oGo=o("xlnet"),rGo=o(" \u2014 "),DV=a("a"),tGo=o("XLNetForSequenceClassification"),aGo=o(" (XLNet model)"),nGo=l(),bb=a("li"),cpe=a("strong"),sGo=o("yoso"),lGo=o(" \u2014 "),GV=a("a"),iGo=o("YosoForSequenceClassification"),dGo=o(" (YOSO model)"),cGo=l(),vb=a("p"),fGo=o("The model is set in evaluation mode by default using "),fpe=a("code"),mGo=o("model.eval()"),gGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mpe=a("code"),hGo=o("model.train()"),pGo=l(),F(Fb.$$.fragment),sOe=l(),Zi=a("h2"),Tb=a("a"),gpe=a("span"),F($L.$$.fragment),_Go=l(),hpe=a("span"),uGo=o("AutoModelForMultipleChoice"),lOe=l(),Bo=a("div"),F(kL.$$.fragment),bGo=l(),ed=a("p"),vGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),OV=a("a"),FGo=o("from_pretrained()"),TGo=o(" class method or the "),VV=a("a"),MGo=o("from_config()"),EGo=o(` class
method.`),CGo=l(),SL=a("p"),wGo=o("This class cannot be instantiated directly using "),ppe=a("code"),AGo=o("__init__()"),LGo=o(" (throws an error)."),yGo=l(),ft=a("div"),F(RL.$$.fragment),xGo=l(),_pe=a("p"),$Go=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),kGo=l(),od=a("p"),SGo=o(`Note:
Loading a model from its configuration file does `),upe=a("strong"),RGo=o("not"),PGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XV=a("a"),BGo=o("from_pretrained()"),IGo=o(" to load the model weights."),NGo=l(),F(Mb.$$.fragment),qGo=l(),ro=a("div"),F(PL.$$.fragment),jGo=l(),bpe=a("p"),DGo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),GGo=l(),qa=a("p"),OGo=o("The model class to instantiate is selected based on the "),vpe=a("code"),VGo=o("model_type"),XGo=o(` property of the config object (either
passed as an argument or loaded from `),Fpe=a("code"),zGo=o("pretrained_model_name_or_path"),QGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tpe=a("code"),WGo=o("pretrained_model_name_or_path"),HGo=o(":"),UGo=l(),Z=a("ul"),Eb=a("li"),Mpe=a("strong"),JGo=o("albert"),YGo=o(" \u2014 "),zV=a("a"),KGo=o("AlbertForMultipleChoice"),ZGo=o(" (ALBERT model)"),eOo=l(),Cb=a("li"),Epe=a("strong"),oOo=o("bert"),rOo=o(" \u2014 "),QV=a("a"),tOo=o("BertForMultipleChoice"),aOo=o(" (BERT model)"),nOo=l(),wb=a("li"),Cpe=a("strong"),sOo=o("big_bird"),lOo=o(" \u2014 "),WV=a("a"),iOo=o("BigBirdForMultipleChoice"),dOo=o(" (BigBird model)"),cOo=l(),Ab=a("li"),wpe=a("strong"),fOo=o("camembert"),mOo=o(" \u2014 "),HV=a("a"),gOo=o("CamembertForMultipleChoice"),hOo=o(" (CamemBERT model)"),pOo=l(),Lb=a("li"),Ape=a("strong"),_Oo=o("canine"),uOo=o(" \u2014 "),UV=a("a"),bOo=o("CanineForMultipleChoice"),vOo=o(" (CANINE model)"),FOo=l(),yb=a("li"),Lpe=a("strong"),TOo=o("convbert"),MOo=o(" \u2014 "),JV=a("a"),EOo=o("ConvBertForMultipleChoice"),COo=o(" (ConvBERT model)"),wOo=l(),xb=a("li"),ype=a("strong"),AOo=o("data2vec-text"),LOo=o(" \u2014 "),YV=a("a"),yOo=o("Data2VecTextForMultipleChoice"),xOo=o(" (Data2VecText model)"),$Oo=l(),$b=a("li"),xpe=a("strong"),kOo=o("deberta-v2"),SOo=o(" \u2014 "),KV=a("a"),ROo=o("DebertaV2ForMultipleChoice"),POo=o(" (DeBERTa-v2 model)"),BOo=l(),kb=a("li"),$pe=a("strong"),IOo=o("distilbert"),NOo=o(" \u2014 "),ZV=a("a"),qOo=o("DistilBertForMultipleChoice"),jOo=o(" (DistilBERT model)"),DOo=l(),Sb=a("li"),kpe=a("strong"),GOo=o("electra"),OOo=o(" \u2014 "),eX=a("a"),VOo=o("ElectraForMultipleChoice"),XOo=o(" (ELECTRA model)"),zOo=l(),Rb=a("li"),Spe=a("strong"),QOo=o("flaubert"),WOo=o(" \u2014 "),oX=a("a"),HOo=o("FlaubertForMultipleChoice"),UOo=o(" (FlauBERT model)"),JOo=l(),Pb=a("li"),Rpe=a("strong"),YOo=o("fnet"),KOo=o(" \u2014 "),rX=a("a"),ZOo=o("FNetForMultipleChoice"),eVo=o(" (FNet model)"),oVo=l(),Bb=a("li"),Ppe=a("strong"),rVo=o("funnel"),tVo=o(" \u2014 "),tX=a("a"),aVo=o("FunnelForMultipleChoice"),nVo=o(" (Funnel Transformer model)"),sVo=l(),Ib=a("li"),Bpe=a("strong"),lVo=o("ibert"),iVo=o(" \u2014 "),aX=a("a"),dVo=o("IBertForMultipleChoice"),cVo=o(" (I-BERT model)"),fVo=l(),Nb=a("li"),Ipe=a("strong"),mVo=o("longformer"),gVo=o(" \u2014 "),nX=a("a"),hVo=o("LongformerForMultipleChoice"),pVo=o(" (Longformer model)"),_Vo=l(),qb=a("li"),Npe=a("strong"),uVo=o("megatron-bert"),bVo=o(" \u2014 "),sX=a("a"),vVo=o("MegatronBertForMultipleChoice"),FVo=o(" (Megatron-BERT model)"),TVo=l(),jb=a("li"),qpe=a("strong"),MVo=o("mobilebert"),EVo=o(" \u2014 "),lX=a("a"),CVo=o("MobileBertForMultipleChoice"),wVo=o(" (MobileBERT model)"),AVo=l(),Db=a("li"),jpe=a("strong"),LVo=o("mpnet"),yVo=o(" \u2014 "),iX=a("a"),xVo=o("MPNetForMultipleChoice"),$Vo=o(" (MPNet model)"),kVo=l(),Gb=a("li"),Dpe=a("strong"),SVo=o("nystromformer"),RVo=o(" \u2014 "),dX=a("a"),PVo=o("NystromformerForMultipleChoice"),BVo=o(" (Nystr\xF6mformer model)"),IVo=l(),Ob=a("li"),Gpe=a("strong"),NVo=o("qdqbert"),qVo=o(" \u2014 "),cX=a("a"),jVo=o("QDQBertForMultipleChoice"),DVo=o(" (QDQBert model)"),GVo=l(),Vb=a("li"),Ope=a("strong"),OVo=o("rembert"),VVo=o(" \u2014 "),fX=a("a"),XVo=o("RemBertForMultipleChoice"),zVo=o(" (RemBERT model)"),QVo=l(),Xb=a("li"),Vpe=a("strong"),WVo=o("roberta"),HVo=o(" \u2014 "),mX=a("a"),UVo=o("RobertaForMultipleChoice"),JVo=o(" (RoBERTa model)"),YVo=l(),zb=a("li"),Xpe=a("strong"),KVo=o("roformer"),ZVo=o(" \u2014 "),gX=a("a"),eXo=o("RoFormerForMultipleChoice"),oXo=o(" (RoFormer model)"),rXo=l(),Qb=a("li"),zpe=a("strong"),tXo=o("squeezebert"),aXo=o(" \u2014 "),hX=a("a"),nXo=o("SqueezeBertForMultipleChoice"),sXo=o(" (SqueezeBERT model)"),lXo=l(),Wb=a("li"),Qpe=a("strong"),iXo=o("xlm"),dXo=o(" \u2014 "),pX=a("a"),cXo=o("XLMForMultipleChoice"),fXo=o(" (XLM model)"),mXo=l(),Hb=a("li"),Wpe=a("strong"),gXo=o("xlm-roberta"),hXo=o(" \u2014 "),_X=a("a"),pXo=o("XLMRobertaForMultipleChoice"),_Xo=o(" (XLM-RoBERTa model)"),uXo=l(),Ub=a("li"),Hpe=a("strong"),bXo=o("xlm-roberta-xl"),vXo=o(" \u2014 "),uX=a("a"),FXo=o("XLMRobertaXLForMultipleChoice"),TXo=o(" (XLM-RoBERTa-XL model)"),MXo=l(),Jb=a("li"),Upe=a("strong"),EXo=o("xlnet"),CXo=o(" \u2014 "),bX=a("a"),wXo=o("XLNetForMultipleChoice"),AXo=o(" (XLNet model)"),LXo=l(),Yb=a("li"),Jpe=a("strong"),yXo=o("yoso"),xXo=o(" \u2014 "),vX=a("a"),$Xo=o("YosoForMultipleChoice"),kXo=o(" (YOSO model)"),SXo=l(),Kb=a("p"),RXo=o("The model is set in evaluation mode by default using "),Ype=a("code"),PXo=o("model.eval()"),BXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kpe=a("code"),IXo=o("model.train()"),NXo=l(),F(Zb.$$.fragment),iOe=l(),rd=a("h2"),ev=a("a"),Zpe=a("span"),F(BL.$$.fragment),qXo=l(),e_e=a("span"),jXo=o("AutoModelForNextSentencePrediction"),dOe=l(),Io=a("div"),F(IL.$$.fragment),DXo=l(),td=a("p"),GXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),FX=a("a"),OXo=o("from_pretrained()"),VXo=o(" class method or the "),TX=a("a"),XXo=o("from_config()"),zXo=o(` class
method.`),QXo=l(),NL=a("p"),WXo=o("This class cannot be instantiated directly using "),o_e=a("code"),HXo=o("__init__()"),UXo=o(" (throws an error)."),JXo=l(),mt=a("div"),F(qL.$$.fragment),YXo=l(),r_e=a("p"),KXo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),ZXo=l(),ad=a("p"),ezo=o(`Note:
Loading a model from its configuration file does `),t_e=a("strong"),ozo=o("not"),rzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MX=a("a"),tzo=o("from_pretrained()"),azo=o(" to load the model weights."),nzo=l(),F(ov.$$.fragment),szo=l(),to=a("div"),F(jL.$$.fragment),lzo=l(),a_e=a("p"),izo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),dzo=l(),ja=a("p"),czo=o("The model class to instantiate is selected based on the "),n_e=a("code"),fzo=o("model_type"),mzo=o(` property of the config object (either
passed as an argument or loaded from `),s_e=a("code"),gzo=o("pretrained_model_name_or_path"),hzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l_e=a("code"),pzo=o("pretrained_model_name_or_path"),_zo=o(":"),uzo=l(),Zr=a("ul"),rv=a("li"),i_e=a("strong"),bzo=o("bert"),vzo=o(" \u2014 "),EX=a("a"),Fzo=o("BertForNextSentencePrediction"),Tzo=o(" (BERT model)"),Mzo=l(),tv=a("li"),d_e=a("strong"),Ezo=o("fnet"),Czo=o(" \u2014 "),CX=a("a"),wzo=o("FNetForNextSentencePrediction"),Azo=o(" (FNet model)"),Lzo=l(),av=a("li"),c_e=a("strong"),yzo=o("megatron-bert"),xzo=o(" \u2014 "),wX=a("a"),$zo=o("MegatronBertForNextSentencePrediction"),kzo=o(" (Megatron-BERT model)"),Szo=l(),nv=a("li"),f_e=a("strong"),Rzo=o("mobilebert"),Pzo=o(" \u2014 "),AX=a("a"),Bzo=o("MobileBertForNextSentencePrediction"),Izo=o(" (MobileBERT model)"),Nzo=l(),sv=a("li"),m_e=a("strong"),qzo=o("qdqbert"),jzo=o(" \u2014 "),LX=a("a"),Dzo=o("QDQBertForNextSentencePrediction"),Gzo=o(" (QDQBert model)"),Ozo=l(),lv=a("p"),Vzo=o("The model is set in evaluation mode by default using "),g_e=a("code"),Xzo=o("model.eval()"),zzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),h_e=a("code"),Qzo=o("model.train()"),Wzo=l(),F(iv.$$.fragment),cOe=l(),nd=a("h2"),dv=a("a"),p_e=a("span"),F(DL.$$.fragment),Hzo=l(),__e=a("span"),Uzo=o("AutoModelForTokenClassification"),fOe=l(),No=a("div"),F(GL.$$.fragment),Jzo=l(),sd=a("p"),Yzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),yX=a("a"),Kzo=o("from_pretrained()"),Zzo=o(" class method or the "),xX=a("a"),eQo=o("from_config()"),oQo=o(` class
method.`),rQo=l(),OL=a("p"),tQo=o("This class cannot be instantiated directly using "),u_e=a("code"),aQo=o("__init__()"),nQo=o(" (throws an error)."),sQo=l(),gt=a("div"),F(VL.$$.fragment),lQo=l(),b_e=a("p"),iQo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),dQo=l(),ld=a("p"),cQo=o(`Note:
Loading a model from its configuration file does `),v_e=a("strong"),fQo=o("not"),mQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$X=a("a"),gQo=o("from_pretrained()"),hQo=o(" to load the model weights."),pQo=l(),F(cv.$$.fragment),_Qo=l(),ao=a("div"),F(XL.$$.fragment),uQo=l(),F_e=a("p"),bQo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),vQo=l(),Da=a("p"),FQo=o("The model class to instantiate is selected based on the "),T_e=a("code"),TQo=o("model_type"),MQo=o(` property of the config object (either
passed as an argument or loaded from `),M_e=a("code"),EQo=o("pretrained_model_name_or_path"),CQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E_e=a("code"),wQo=o("pretrained_model_name_or_path"),AQo=o(":"),LQo=l(),U=a("ul"),fv=a("li"),C_e=a("strong"),yQo=o("albert"),xQo=o(" \u2014 "),kX=a("a"),$Qo=o("AlbertForTokenClassification"),kQo=o(" (ALBERT model)"),SQo=l(),mv=a("li"),w_e=a("strong"),RQo=o("bert"),PQo=o(" \u2014 "),SX=a("a"),BQo=o("BertForTokenClassification"),IQo=o(" (BERT model)"),NQo=l(),gv=a("li"),A_e=a("strong"),qQo=o("big_bird"),jQo=o(" \u2014 "),RX=a("a"),DQo=o("BigBirdForTokenClassification"),GQo=o(" (BigBird model)"),OQo=l(),hv=a("li"),L_e=a("strong"),VQo=o("bloom"),XQo=o(" \u2014 "),PX=a("a"),zQo=o("BloomForTokenClassification"),QQo=o(" (BLOOM model)"),WQo=l(),pv=a("li"),y_e=a("strong"),HQo=o("camembert"),UQo=o(" \u2014 "),BX=a("a"),JQo=o("CamembertForTokenClassification"),YQo=o(" (CamemBERT model)"),KQo=l(),_v=a("li"),x_e=a("strong"),ZQo=o("canine"),eWo=o(" \u2014 "),IX=a("a"),oWo=o("CanineForTokenClassification"),rWo=o(" (CANINE model)"),tWo=l(),uv=a("li"),$_e=a("strong"),aWo=o("convbert"),nWo=o(" \u2014 "),NX=a("a"),sWo=o("ConvBertForTokenClassification"),lWo=o(" (ConvBERT model)"),iWo=l(),bv=a("li"),k_e=a("strong"),dWo=o("data2vec-text"),cWo=o(" \u2014 "),qX=a("a"),fWo=o("Data2VecTextForTokenClassification"),mWo=o(" (Data2VecText model)"),gWo=l(),vv=a("li"),S_e=a("strong"),hWo=o("deberta"),pWo=o(" \u2014 "),jX=a("a"),_Wo=o("DebertaForTokenClassification"),uWo=o(" (DeBERTa model)"),bWo=l(),Fv=a("li"),R_e=a("strong"),vWo=o("deberta-v2"),FWo=o(" \u2014 "),DX=a("a"),TWo=o("DebertaV2ForTokenClassification"),MWo=o(" (DeBERTa-v2 model)"),EWo=l(),Tv=a("li"),P_e=a("strong"),CWo=o("distilbert"),wWo=o(" \u2014 "),GX=a("a"),AWo=o("DistilBertForTokenClassification"),LWo=o(" (DistilBERT model)"),yWo=l(),Mv=a("li"),B_e=a("strong"),xWo=o("electra"),$Wo=o(" \u2014 "),OX=a("a"),kWo=o("ElectraForTokenClassification"),SWo=o(" (ELECTRA model)"),RWo=l(),Ev=a("li"),I_e=a("strong"),PWo=o("flaubert"),BWo=o(" \u2014 "),VX=a("a"),IWo=o("FlaubertForTokenClassification"),NWo=o(" (FlauBERT model)"),qWo=l(),Cv=a("li"),N_e=a("strong"),jWo=o("fnet"),DWo=o(" \u2014 "),XX=a("a"),GWo=o("FNetForTokenClassification"),OWo=o(" (FNet model)"),VWo=l(),wv=a("li"),q_e=a("strong"),XWo=o("funnel"),zWo=o(" \u2014 "),zX=a("a"),QWo=o("FunnelForTokenClassification"),WWo=o(" (Funnel Transformer model)"),HWo=l(),Av=a("li"),j_e=a("strong"),UWo=o("gpt2"),JWo=o(" \u2014 "),QX=a("a"),YWo=o("GPT2ForTokenClassification"),KWo=o(" (OpenAI GPT-2 model)"),ZWo=l(),Lv=a("li"),D_e=a("strong"),eHo=o("ibert"),oHo=o(" \u2014 "),WX=a("a"),rHo=o("IBertForTokenClassification"),tHo=o(" (I-BERT model)"),aHo=l(),yv=a("li"),G_e=a("strong"),nHo=o("layoutlm"),sHo=o(" \u2014 "),HX=a("a"),lHo=o("LayoutLMForTokenClassification"),iHo=o(" (LayoutLM model)"),dHo=l(),xv=a("li"),O_e=a("strong"),cHo=o("layoutlmv2"),fHo=o(" \u2014 "),UX=a("a"),mHo=o("LayoutLMv2ForTokenClassification"),gHo=o(" (LayoutLMv2 model)"),hHo=l(),$v=a("li"),V_e=a("strong"),pHo=o("layoutlmv3"),_Ho=o(" \u2014 "),JX=a("a"),uHo=o("LayoutLMv3ForTokenClassification"),bHo=o(" (LayoutLMv3 model)"),vHo=l(),kv=a("li"),X_e=a("strong"),FHo=o("longformer"),THo=o(" \u2014 "),YX=a("a"),MHo=o("LongformerForTokenClassification"),EHo=o(" (Longformer model)"),CHo=l(),Sv=a("li"),z_e=a("strong"),wHo=o("megatron-bert"),AHo=o(" \u2014 "),KX=a("a"),LHo=o("MegatronBertForTokenClassification"),yHo=o(" (Megatron-BERT model)"),xHo=l(),Rv=a("li"),Q_e=a("strong"),$Ho=o("mobilebert"),kHo=o(" \u2014 "),ZX=a("a"),SHo=o("MobileBertForTokenClassification"),RHo=o(" (MobileBERT model)"),PHo=l(),Pv=a("li"),W_e=a("strong"),BHo=o("mpnet"),IHo=o(" \u2014 "),ez=a("a"),NHo=o("MPNetForTokenClassification"),qHo=o(" (MPNet model)"),jHo=l(),Bv=a("li"),H_e=a("strong"),DHo=o("nystromformer"),GHo=o(" \u2014 "),oz=a("a"),OHo=o("NystromformerForTokenClassification"),VHo=o(" (Nystr\xF6mformer model)"),XHo=l(),Iv=a("li"),U_e=a("strong"),zHo=o("qdqbert"),QHo=o(" \u2014 "),rz=a("a"),WHo=o("QDQBertForTokenClassification"),HHo=o(" (QDQBert model)"),UHo=l(),Nv=a("li"),J_e=a("strong"),JHo=o("rembert"),YHo=o(" \u2014 "),tz=a("a"),KHo=o("RemBertForTokenClassification"),ZHo=o(" (RemBERT model)"),eUo=l(),qv=a("li"),Y_e=a("strong"),oUo=o("roberta"),rUo=o(" \u2014 "),az=a("a"),tUo=o("RobertaForTokenClassification"),aUo=o(" (RoBERTa model)"),nUo=l(),jv=a("li"),K_e=a("strong"),sUo=o("roformer"),lUo=o(" \u2014 "),nz=a("a"),iUo=o("RoFormerForTokenClassification"),dUo=o(" (RoFormer model)"),cUo=l(),Dv=a("li"),Z_e=a("strong"),fUo=o("squeezebert"),mUo=o(" \u2014 "),sz=a("a"),gUo=o("SqueezeBertForTokenClassification"),hUo=o(" (SqueezeBERT model)"),pUo=l(),Gv=a("li"),eue=a("strong"),_Uo=o("xlm"),uUo=o(" \u2014 "),lz=a("a"),bUo=o("XLMForTokenClassification"),vUo=o(" (XLM model)"),FUo=l(),Ov=a("li"),oue=a("strong"),TUo=o("xlm-roberta"),MUo=o(" \u2014 "),iz=a("a"),EUo=o("XLMRobertaForTokenClassification"),CUo=o(" (XLM-RoBERTa model)"),wUo=l(),Vv=a("li"),rue=a("strong"),AUo=o("xlm-roberta-xl"),LUo=o(" \u2014 "),dz=a("a"),yUo=o("XLMRobertaXLForTokenClassification"),xUo=o(" (XLM-RoBERTa-XL model)"),$Uo=l(),Xv=a("li"),tue=a("strong"),kUo=o("xlnet"),SUo=o(" \u2014 "),cz=a("a"),RUo=o("XLNetForTokenClassification"),PUo=o(" (XLNet model)"),BUo=l(),zv=a("li"),aue=a("strong"),IUo=o("yoso"),NUo=o(" \u2014 "),fz=a("a"),qUo=o("YosoForTokenClassification"),jUo=o(" (YOSO model)"),DUo=l(),Qv=a("p"),GUo=o("The model is set in evaluation mode by default using "),nue=a("code"),OUo=o("model.eval()"),VUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sue=a("code"),XUo=o("model.train()"),zUo=l(),F(Wv.$$.fragment),mOe=l(),id=a("h2"),Hv=a("a"),lue=a("span"),F(zL.$$.fragment),QUo=l(),iue=a("span"),WUo=o("AutoModelForQuestionAnswering"),gOe=l(),qo=a("div"),F(QL.$$.fragment),HUo=l(),dd=a("p"),UUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),mz=a("a"),JUo=o("from_pretrained()"),YUo=o(" class method or the "),gz=a("a"),KUo=o("from_config()"),ZUo=o(` class
method.`),eJo=l(),WL=a("p"),oJo=o("This class cannot be instantiated directly using "),due=a("code"),rJo=o("__init__()"),tJo=o(" (throws an error)."),aJo=l(),ht=a("div"),F(HL.$$.fragment),nJo=l(),cue=a("p"),sJo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),lJo=l(),cd=a("p"),iJo=o(`Note:
Loading a model from its configuration file does `),fue=a("strong"),dJo=o("not"),cJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hz=a("a"),fJo=o("from_pretrained()"),mJo=o(" to load the model weights."),gJo=l(),F(Uv.$$.fragment),hJo=l(),no=a("div"),F(UL.$$.fragment),pJo=l(),mue=a("p"),_Jo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),uJo=l(),Ga=a("p"),bJo=o("The model class to instantiate is selected based on the "),gue=a("code"),vJo=o("model_type"),FJo=o(` property of the config object (either
passed as an argument or loaded from `),hue=a("code"),TJo=o("pretrained_model_name_or_path"),MJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pue=a("code"),EJo=o("pretrained_model_name_or_path"),CJo=o(":"),wJo=l(),V=a("ul"),Jv=a("li"),_ue=a("strong"),AJo=o("albert"),LJo=o(" \u2014 "),pz=a("a"),yJo=o("AlbertForQuestionAnswering"),xJo=o(" (ALBERT model)"),$Jo=l(),Yv=a("li"),uue=a("strong"),kJo=o("bart"),SJo=o(" \u2014 "),_z=a("a"),RJo=o("BartForQuestionAnswering"),PJo=o(" (BART model)"),BJo=l(),Kv=a("li"),bue=a("strong"),IJo=o("bert"),NJo=o(" \u2014 "),uz=a("a"),qJo=o("BertForQuestionAnswering"),jJo=o(" (BERT model)"),DJo=l(),Zv=a("li"),vue=a("strong"),GJo=o("big_bird"),OJo=o(" \u2014 "),bz=a("a"),VJo=o("BigBirdForQuestionAnswering"),XJo=o(" (BigBird model)"),zJo=l(),eF=a("li"),Fue=a("strong"),QJo=o("bigbird_pegasus"),WJo=o(" \u2014 "),vz=a("a"),HJo=o("BigBirdPegasusForQuestionAnswering"),UJo=o(" (BigBird-Pegasus model)"),JJo=l(),oF=a("li"),Tue=a("strong"),YJo=o("camembert"),KJo=o(" \u2014 "),Fz=a("a"),ZJo=o("CamembertForQuestionAnswering"),eYo=o(" (CamemBERT model)"),oYo=l(),rF=a("li"),Mue=a("strong"),rYo=o("canine"),tYo=o(" \u2014 "),Tz=a("a"),aYo=o("CanineForQuestionAnswering"),nYo=o(" (CANINE model)"),sYo=l(),tF=a("li"),Eue=a("strong"),lYo=o("convbert"),iYo=o(" \u2014 "),Mz=a("a"),dYo=o("ConvBertForQuestionAnswering"),cYo=o(" (ConvBERT model)"),fYo=l(),aF=a("li"),Cue=a("strong"),mYo=o("data2vec-text"),gYo=o(" \u2014 "),Ez=a("a"),hYo=o("Data2VecTextForQuestionAnswering"),pYo=o(" (Data2VecText model)"),_Yo=l(),nF=a("li"),wue=a("strong"),uYo=o("deberta"),bYo=o(" \u2014 "),Cz=a("a"),vYo=o("DebertaForQuestionAnswering"),FYo=o(" (DeBERTa model)"),TYo=l(),sF=a("li"),Aue=a("strong"),MYo=o("deberta-v2"),EYo=o(" \u2014 "),wz=a("a"),CYo=o("DebertaV2ForQuestionAnswering"),wYo=o(" (DeBERTa-v2 model)"),AYo=l(),lF=a("li"),Lue=a("strong"),LYo=o("distilbert"),yYo=o(" \u2014 "),Az=a("a"),xYo=o("DistilBertForQuestionAnswering"),$Yo=o(" (DistilBERT model)"),kYo=l(),iF=a("li"),yue=a("strong"),SYo=o("electra"),RYo=o(" \u2014 "),Lz=a("a"),PYo=o("ElectraForQuestionAnswering"),BYo=o(" (ELECTRA model)"),IYo=l(),dF=a("li"),xue=a("strong"),NYo=o("flaubert"),qYo=o(" \u2014 "),yz=a("a"),jYo=o("FlaubertForQuestionAnsweringSimple"),DYo=o(" (FlauBERT model)"),GYo=l(),cF=a("li"),$ue=a("strong"),OYo=o("fnet"),VYo=o(" \u2014 "),xz=a("a"),XYo=o("FNetForQuestionAnswering"),zYo=o(" (FNet model)"),QYo=l(),fF=a("li"),kue=a("strong"),WYo=o("funnel"),HYo=o(" \u2014 "),$z=a("a"),UYo=o("FunnelForQuestionAnswering"),JYo=o(" (Funnel Transformer model)"),YYo=l(),mF=a("li"),Sue=a("strong"),KYo=o("gptj"),ZYo=o(" \u2014 "),kz=a("a"),eKo=o("GPTJForQuestionAnswering"),oKo=o(" (GPT-J model)"),rKo=l(),gF=a("li"),Rue=a("strong"),tKo=o("ibert"),aKo=o(" \u2014 "),Sz=a("a"),nKo=o("IBertForQuestionAnswering"),sKo=o(" (I-BERT model)"),lKo=l(),hF=a("li"),Pue=a("strong"),iKo=o("layoutlmv2"),dKo=o(" \u2014 "),Rz=a("a"),cKo=o("LayoutLMv2ForQuestionAnswering"),fKo=o(" (LayoutLMv2 model)"),mKo=l(),pF=a("li"),Bue=a("strong"),gKo=o("layoutlmv3"),hKo=o(" \u2014 "),Pz=a("a"),pKo=o("LayoutLMv3ForQuestionAnswering"),_Ko=o(" (LayoutLMv3 model)"),uKo=l(),_F=a("li"),Iue=a("strong"),bKo=o("led"),vKo=o(" \u2014 "),Bz=a("a"),FKo=o("LEDForQuestionAnswering"),TKo=o(" (LED model)"),MKo=l(),uF=a("li"),Nue=a("strong"),EKo=o("longformer"),CKo=o(" \u2014 "),Iz=a("a"),wKo=o("LongformerForQuestionAnswering"),AKo=o(" (Longformer model)"),LKo=l(),bF=a("li"),que=a("strong"),yKo=o("lxmert"),xKo=o(" \u2014 "),Nz=a("a"),$Ko=o("LxmertForQuestionAnswering"),kKo=o(" (LXMERT model)"),SKo=l(),vF=a("li"),jue=a("strong"),RKo=o("mbart"),PKo=o(" \u2014 "),qz=a("a"),BKo=o("MBartForQuestionAnswering"),IKo=o(" (mBART model)"),NKo=l(),FF=a("li"),Due=a("strong"),qKo=o("megatron-bert"),jKo=o(" \u2014 "),jz=a("a"),DKo=o("MegatronBertForQuestionAnswering"),GKo=o(" (Megatron-BERT model)"),OKo=l(),TF=a("li"),Gue=a("strong"),VKo=o("mobilebert"),XKo=o(" \u2014 "),Dz=a("a"),zKo=o("MobileBertForQuestionAnswering"),QKo=o(" (MobileBERT model)"),WKo=l(),MF=a("li"),Oue=a("strong"),HKo=o("mpnet"),UKo=o(" \u2014 "),Gz=a("a"),JKo=o("MPNetForQuestionAnswering"),YKo=o(" (MPNet model)"),KKo=l(),EF=a("li"),Vue=a("strong"),ZKo=o("mvp"),eZo=o(" \u2014 "),Oz=a("a"),oZo=o("MvpForQuestionAnswering"),rZo=o(" (MVP model)"),tZo=l(),CF=a("li"),Xue=a("strong"),aZo=o("nystromformer"),nZo=o(" \u2014 "),Vz=a("a"),sZo=o("NystromformerForQuestionAnswering"),lZo=o(" (Nystr\xF6mformer model)"),iZo=l(),wF=a("li"),zue=a("strong"),dZo=o("qdqbert"),cZo=o(" \u2014 "),Xz=a("a"),fZo=o("QDQBertForQuestionAnswering"),mZo=o(" (QDQBert model)"),gZo=l(),AF=a("li"),Que=a("strong"),hZo=o("reformer"),pZo=o(" \u2014 "),zz=a("a"),_Zo=o("ReformerForQuestionAnswering"),uZo=o(" (Reformer model)"),bZo=l(),LF=a("li"),Wue=a("strong"),vZo=o("rembert"),FZo=o(" \u2014 "),Qz=a("a"),TZo=o("RemBertForQuestionAnswering"),MZo=o(" (RemBERT model)"),EZo=l(),yF=a("li"),Hue=a("strong"),CZo=o("roberta"),wZo=o(" \u2014 "),Wz=a("a"),AZo=o("RobertaForQuestionAnswering"),LZo=o(" (RoBERTa model)"),yZo=l(),xF=a("li"),Uue=a("strong"),xZo=o("roformer"),$Zo=o(" \u2014 "),Hz=a("a"),kZo=o("RoFormerForQuestionAnswering"),SZo=o(" (RoFormer model)"),RZo=l(),$F=a("li"),Jue=a("strong"),PZo=o("splinter"),BZo=o(" \u2014 "),Uz=a("a"),IZo=o("SplinterForQuestionAnswering"),NZo=o(" (Splinter model)"),qZo=l(),kF=a("li"),Yue=a("strong"),jZo=o("squeezebert"),DZo=o(" \u2014 "),Jz=a("a"),GZo=o("SqueezeBertForQuestionAnswering"),OZo=o(" (SqueezeBERT model)"),VZo=l(),SF=a("li"),Kue=a("strong"),XZo=o("xlm"),zZo=o(" \u2014 "),Yz=a("a"),QZo=o("XLMForQuestionAnsweringSimple"),WZo=o(" (XLM model)"),HZo=l(),RF=a("li"),Zue=a("strong"),UZo=o("xlm-roberta"),JZo=o(" \u2014 "),Kz=a("a"),YZo=o("XLMRobertaForQuestionAnswering"),KZo=o(" (XLM-RoBERTa model)"),ZZo=l(),PF=a("li"),e7e=a("strong"),eer=o("xlm-roberta-xl"),oer=o(" \u2014 "),Zz=a("a"),rer=o("XLMRobertaXLForQuestionAnswering"),ter=o(" (XLM-RoBERTa-XL model)"),aer=l(),BF=a("li"),o7e=a("strong"),ner=o("xlnet"),ser=o(" \u2014 "),eQ=a("a"),ler=o("XLNetForQuestionAnsweringSimple"),ier=o(" (XLNet model)"),der=l(),IF=a("li"),r7e=a("strong"),cer=o("yoso"),fer=o(" \u2014 "),oQ=a("a"),mer=o("YosoForQuestionAnswering"),ger=o(" (YOSO model)"),her=l(),NF=a("p"),per=o("The model is set in evaluation mode by default using "),t7e=a("code"),_er=o("model.eval()"),uer=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),a7e=a("code"),ber=o("model.train()"),ver=l(),F(qF.$$.fragment),hOe=l(),fd=a("h2"),jF=a("a"),n7e=a("span"),F(JL.$$.fragment),Fer=l(),s7e=a("span"),Ter=o("AutoModelForTableQuestionAnswering"),pOe=l(),jo=a("div"),F(YL.$$.fragment),Mer=l(),md=a("p"),Eer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),rQ=a("a"),Cer=o("from_pretrained()"),wer=o(" class method or the "),tQ=a("a"),Aer=o("from_config()"),Ler=o(` class
method.`),yer=l(),KL=a("p"),xer=o("This class cannot be instantiated directly using "),l7e=a("code"),$er=o("__init__()"),ker=o(" (throws an error)."),Ser=l(),pt=a("div"),F(ZL.$$.fragment),Rer=l(),i7e=a("p"),Per=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Ber=l(),gd=a("p"),Ier=o(`Note:
Loading a model from its configuration file does `),d7e=a("strong"),Ner=o("not"),qer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aQ=a("a"),jer=o("from_pretrained()"),Der=o(" to load the model weights."),Ger=l(),F(DF.$$.fragment),Oer=l(),so=a("div"),F(ey.$$.fragment),Ver=l(),c7e=a("p"),Xer=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),zer=l(),Oa=a("p"),Qer=o("The model class to instantiate is selected based on the "),f7e=a("code"),Wer=o("model_type"),Her=o(` property of the config object (either
passed as an argument or loaded from `),m7e=a("code"),Uer=o("pretrained_model_name_or_path"),Jer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g7e=a("code"),Yer=o("pretrained_model_name_or_path"),Ker=o(":"),Zer=l(),h7e=a("ul"),GF=a("li"),p7e=a("strong"),eor=o("tapas"),oor=o(" \u2014 "),nQ=a("a"),ror=o("TapasForQuestionAnswering"),tor=o(" (TAPAS model)"),aor=l(),OF=a("p"),nor=o("The model is set in evaluation mode by default using "),_7e=a("code"),sor=o("model.eval()"),lor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),u7e=a("code"),ior=o("model.train()"),dor=l(),F(VF.$$.fragment),_Oe=l(),hd=a("h2"),XF=a("a"),b7e=a("span"),F(oy.$$.fragment),cor=l(),v7e=a("span"),mor=o("AutoModelForImageClassification"),uOe=l(),Do=a("div"),F(ry.$$.fragment),gor=l(),pd=a("p"),hor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),sQ=a("a"),por=o("from_pretrained()"),_or=o(" class method or the "),lQ=a("a"),uor=o("from_config()"),bor=o(` class
method.`),vor=l(),ty=a("p"),For=o("This class cannot be instantiated directly using "),F7e=a("code"),Tor=o("__init__()"),Mor=o(" (throws an error)."),Eor=l(),_t=a("div"),F(ay.$$.fragment),Cor=l(),T7e=a("p"),wor=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Aor=l(),_d=a("p"),Lor=o(`Note:
Loading a model from its configuration file does `),M7e=a("strong"),yor=o("not"),xor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iQ=a("a"),$or=o("from_pretrained()"),kor=o(" to load the model weights."),Sor=l(),F(zF.$$.fragment),Ror=l(),lo=a("div"),F(ny.$$.fragment),Por=l(),E7e=a("p"),Bor=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Ior=l(),Va=a("p"),Nor=o("The model class to instantiate is selected based on the "),C7e=a("code"),qor=o("model_type"),jor=o(` property of the config object (either
passed as an argument or loaded from `),w7e=a("code"),Dor=o("pretrained_model_name_or_path"),Gor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A7e=a("code"),Oor=o("pretrained_model_name_or_path"),Vor=o(":"),Xor=l(),Fe=a("ul"),QF=a("li"),L7e=a("strong"),zor=o("beit"),Qor=o(" \u2014 "),dQ=a("a"),Wor=o("BeitForImageClassification"),Hor=o(" (BEiT model)"),Uor=l(),WF=a("li"),y7e=a("strong"),Jor=o("convnext"),Yor=o(" \u2014 "),cQ=a("a"),Kor=o("ConvNextForImageClassification"),Zor=o(" (ConvNeXT model)"),err=l(),HF=a("li"),x7e=a("strong"),orr=o("cvt"),rrr=o(" \u2014 "),fQ=a("a"),trr=o("CvtForImageClassification"),arr=o(" (CvT model)"),nrr=l(),UF=a("li"),$7e=a("strong"),srr=o("data2vec-vision"),lrr=o(" \u2014 "),mQ=a("a"),irr=o("Data2VecVisionForImageClassification"),drr=o(" (Data2VecVision model)"),crr=l(),Vs=a("li"),k7e=a("strong"),frr=o("deit"),mrr=o(" \u2014 "),gQ=a("a"),grr=o("DeiTForImageClassification"),hrr=o(" or "),hQ=a("a"),prr=o("DeiTForImageClassificationWithTeacher"),_rr=o(" (DeiT model)"),urr=l(),JF=a("li"),S7e=a("strong"),brr=o("imagegpt"),vrr=o(" \u2014 "),pQ=a("a"),Frr=o("ImageGPTForImageClassification"),Trr=o(" (ImageGPT model)"),Mrr=l(),Xs=a("li"),R7e=a("strong"),Err=o("levit"),Crr=o(" \u2014 "),_Q=a("a"),wrr=o("LevitForImageClassification"),Arr=o(" or "),uQ=a("a"),Lrr=o("LevitForImageClassificationWithTeacher"),yrr=o(" (LeViT model)"),xrr=l(),ut=a("li"),P7e=a("strong"),$rr=o("perceiver"),krr=o(" \u2014 "),bQ=a("a"),Srr=o("PerceiverForImageClassificationLearned"),Rrr=o(" or "),vQ=a("a"),Prr=o("PerceiverForImageClassificationFourier"),Brr=o(" or "),FQ=a("a"),Irr=o("PerceiverForImageClassificationConvProcessing"),Nrr=o(" (Perceiver model)"),qrr=l(),YF=a("li"),B7e=a("strong"),jrr=o("poolformer"),Drr=o(" \u2014 "),TQ=a("a"),Grr=o("PoolFormerForImageClassification"),Orr=o(" (PoolFormer model)"),Vrr=l(),KF=a("li"),I7e=a("strong"),Xrr=o("regnet"),zrr=o(" \u2014 "),MQ=a("a"),Qrr=o("RegNetForImageClassification"),Wrr=o(" (RegNet model)"),Hrr=l(),ZF=a("li"),N7e=a("strong"),Urr=o("resnet"),Jrr=o(" \u2014 "),EQ=a("a"),Yrr=o("ResNetForImageClassification"),Krr=o(" (ResNet model)"),Zrr=l(),eT=a("li"),q7e=a("strong"),etr=o("segformer"),otr=o(" \u2014 "),CQ=a("a"),rtr=o("SegformerForImageClassification"),ttr=o(" (SegFormer model)"),atr=l(),oT=a("li"),j7e=a("strong"),ntr=o("swin"),str=o(" \u2014 "),wQ=a("a"),ltr=o("SwinForImageClassification"),itr=o(" (Swin Transformer model)"),dtr=l(),rT=a("li"),D7e=a("strong"),ctr=o("van"),ftr=o(" \u2014 "),AQ=a("a"),mtr=o("VanForImageClassification"),gtr=o(" (VAN model)"),htr=l(),tT=a("li"),G7e=a("strong"),ptr=o("vit"),_tr=o(" \u2014 "),LQ=a("a"),utr=o("ViTForImageClassification"),btr=o(" (ViT model)"),vtr=l(),aT=a("p"),Ftr=o("The model is set in evaluation mode by default using "),O7e=a("code"),Ttr=o("model.eval()"),Mtr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),V7e=a("code"),Etr=o("model.train()"),Ctr=l(),F(nT.$$.fragment),bOe=l(),ud=a("h2"),sT=a("a"),X7e=a("span"),F(sy.$$.fragment),wtr=l(),z7e=a("span"),Atr=o("AutoModelForVision2Seq"),vOe=l(),Go=a("div"),F(ly.$$.fragment),Ltr=l(),bd=a("p"),ytr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),yQ=a("a"),xtr=o("from_pretrained()"),$tr=o(" class method or the "),xQ=a("a"),ktr=o("from_config()"),Str=o(` class
method.`),Rtr=l(),iy=a("p"),Ptr=o("This class cannot be instantiated directly using "),Q7e=a("code"),Btr=o("__init__()"),Itr=o(" (throws an error)."),Ntr=l(),bt=a("div"),F(dy.$$.fragment),qtr=l(),W7e=a("p"),jtr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Dtr=l(),vd=a("p"),Gtr=o(`Note:
Loading a model from its configuration file does `),H7e=a("strong"),Otr=o("not"),Vtr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$Q=a("a"),Xtr=o("from_pretrained()"),ztr=o(" to load the model weights."),Qtr=l(),F(lT.$$.fragment),Wtr=l(),io=a("div"),F(cy.$$.fragment),Htr=l(),U7e=a("p"),Utr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Jtr=l(),Xa=a("p"),Ytr=o("The model class to instantiate is selected based on the "),J7e=a("code"),Ktr=o("model_type"),Ztr=o(` property of the config object (either
passed as an argument or loaded from `),Y7e=a("code"),ear=o("pretrained_model_name_or_path"),oar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K7e=a("code"),rar=o("pretrained_model_name_or_path"),tar=o(":"),aar=l(),Z7e=a("ul"),iT=a("li"),e1e=a("strong"),nar=o("vision-encoder-decoder"),sar=o(" \u2014 "),kQ=a("a"),lar=o("VisionEncoderDecoderModel"),iar=o(" (Vision Encoder decoder model)"),dar=l(),dT=a("p"),car=o("The model is set in evaluation mode by default using "),o1e=a("code"),far=o("model.eval()"),mar=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),r1e=a("code"),gar=o("model.train()"),har=l(),F(cT.$$.fragment),FOe=l(),Fd=a("h2"),fT=a("a"),t1e=a("span"),F(fy.$$.fragment),par=l(),a1e=a("span"),_ar=o("AutoModelForVisualQuestionAnswering"),TOe=l(),Oo=a("div"),F(my.$$.fragment),uar=l(),Td=a("p"),bar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),SQ=a("a"),Far=o("from_pretrained()"),Tar=o(" class method or the "),RQ=a("a"),Mar=o("from_config()"),Ear=o(` class
method.`),Car=l(),gy=a("p"),war=o("This class cannot be instantiated directly using "),n1e=a("code"),Aar=o("__init__()"),Lar=o(" (throws an error)."),yar=l(),vt=a("div"),F(hy.$$.fragment),xar=l(),s1e=a("p"),$ar=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),kar=l(),Md=a("p"),Sar=o(`Note:
Loading a model from its configuration file does `),l1e=a("strong"),Rar=o("not"),Par=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PQ=a("a"),Bar=o("from_pretrained()"),Iar=o(" to load the model weights."),Nar=l(),F(mT.$$.fragment),qar=l(),co=a("div"),F(py.$$.fragment),jar=l(),i1e=a("p"),Dar=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),Gar=l(),za=a("p"),Oar=o("The model class to instantiate is selected based on the "),d1e=a("code"),Var=o("model_type"),Xar=o(` property of the config object (either
passed as an argument or loaded from `),c1e=a("code"),zar=o("pretrained_model_name_or_path"),Qar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f1e=a("code"),War=o("pretrained_model_name_or_path"),Har=o(":"),Uar=l(),m1e=a("ul"),gT=a("li"),g1e=a("strong"),Jar=o("vilt"),Yar=o(" \u2014 "),BQ=a("a"),Kar=o("ViltForQuestionAnswering"),Zar=o(" (ViLT model)"),enr=l(),hT=a("p"),onr=o("The model is set in evaluation mode by default using "),h1e=a("code"),rnr=o("model.eval()"),tnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),p1e=a("code"),anr=o("model.train()"),nnr=l(),F(pT.$$.fragment),MOe=l(),Ed=a("h2"),_T=a("a"),_1e=a("span"),F(_y.$$.fragment),snr=l(),u1e=a("span"),lnr=o("AutoModelForAudioClassification"),EOe=l(),Vo=a("div"),F(uy.$$.fragment),inr=l(),Cd=a("p"),dnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),IQ=a("a"),cnr=o("from_pretrained()"),fnr=o(" class method or the "),NQ=a("a"),mnr=o("from_config()"),gnr=o(` class
method.`),hnr=l(),by=a("p"),pnr=o("This class cannot be instantiated directly using "),b1e=a("code"),_nr=o("__init__()"),unr=o(" (throws an error)."),bnr=l(),Ft=a("div"),F(vy.$$.fragment),vnr=l(),v1e=a("p"),Fnr=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Tnr=l(),wd=a("p"),Mnr=o(`Note:
Loading a model from its configuration file does `),F1e=a("strong"),Enr=o("not"),Cnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qQ=a("a"),wnr=o("from_pretrained()"),Anr=o(" to load the model weights."),Lnr=l(),F(uT.$$.fragment),ynr=l(),fo=a("div"),F(Fy.$$.fragment),xnr=l(),T1e=a("p"),$nr=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),knr=l(),Qa=a("p"),Snr=o("The model class to instantiate is selected based on the "),M1e=a("code"),Rnr=o("model_type"),Pnr=o(` property of the config object (either
passed as an argument or loaded from `),E1e=a("code"),Bnr=o("pretrained_model_name_or_path"),Inr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C1e=a("code"),Nnr=o("pretrained_model_name_or_path"),qnr=o(":"),jnr=l(),Pe=a("ul"),bT=a("li"),w1e=a("strong"),Dnr=o("data2vec-audio"),Gnr=o(" \u2014 "),jQ=a("a"),Onr=o("Data2VecAudioForSequenceClassification"),Vnr=o(" (Data2VecAudio model)"),Xnr=l(),vT=a("li"),A1e=a("strong"),znr=o("hubert"),Qnr=o(" \u2014 "),DQ=a("a"),Wnr=o("HubertForSequenceClassification"),Hnr=o(" (Hubert model)"),Unr=l(),FT=a("li"),L1e=a("strong"),Jnr=o("sew"),Ynr=o(" \u2014 "),GQ=a("a"),Knr=o("SEWForSequenceClassification"),Znr=o(" (SEW model)"),esr=l(),TT=a("li"),y1e=a("strong"),osr=o("sew-d"),rsr=o(" \u2014 "),OQ=a("a"),tsr=o("SEWDForSequenceClassification"),asr=o(" (SEW-D model)"),nsr=l(),MT=a("li"),x1e=a("strong"),ssr=o("unispeech"),lsr=o(" \u2014 "),VQ=a("a"),isr=o("UniSpeechForSequenceClassification"),dsr=o(" (UniSpeech model)"),csr=l(),ET=a("li"),$1e=a("strong"),fsr=o("unispeech-sat"),msr=o(" \u2014 "),XQ=a("a"),gsr=o("UniSpeechSatForSequenceClassification"),hsr=o(" (UniSpeechSat model)"),psr=l(),CT=a("li"),k1e=a("strong"),_sr=o("wav2vec2"),usr=o(" \u2014 "),zQ=a("a"),bsr=o("Wav2Vec2ForSequenceClassification"),vsr=o(" (Wav2Vec2 model)"),Fsr=l(),wT=a("li"),S1e=a("strong"),Tsr=o("wav2vec2-conformer"),Msr=o(" \u2014 "),QQ=a("a"),Esr=o("Wav2Vec2ConformerForSequenceClassification"),Csr=o(" (Wav2Vec2-Conformer model)"),wsr=l(),AT=a("li"),R1e=a("strong"),Asr=o("wavlm"),Lsr=o(" \u2014 "),WQ=a("a"),ysr=o("WavLMForSequenceClassification"),xsr=o(" (WavLM model)"),$sr=l(),LT=a("p"),ksr=o("The model is set in evaluation mode by default using "),P1e=a("code"),Ssr=o("model.eval()"),Rsr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),B1e=a("code"),Psr=o("model.train()"),Bsr=l(),F(yT.$$.fragment),COe=l(),Ad=a("h2"),xT=a("a"),I1e=a("span"),F(Ty.$$.fragment),Isr=l(),N1e=a("span"),Nsr=o("AutoModelForAudioFrameClassification"),wOe=l(),Xo=a("div"),F(My.$$.fragment),qsr=l(),Ld=a("p"),jsr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),HQ=a("a"),Dsr=o("from_pretrained()"),Gsr=o(" class method or the "),UQ=a("a"),Osr=o("from_config()"),Vsr=o(` class
method.`),Xsr=l(),Ey=a("p"),zsr=o("This class cannot be instantiated directly using "),q1e=a("code"),Qsr=o("__init__()"),Wsr=o(" (throws an error)."),Hsr=l(),Tt=a("div"),F(Cy.$$.fragment),Usr=l(),j1e=a("p"),Jsr=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Ysr=l(),yd=a("p"),Ksr=o(`Note:
Loading a model from its configuration file does `),D1e=a("strong"),Zsr=o("not"),elr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JQ=a("a"),olr=o("from_pretrained()"),rlr=o(" to load the model weights."),tlr=l(),F($T.$$.fragment),alr=l(),mo=a("div"),F(wy.$$.fragment),nlr=l(),G1e=a("p"),slr=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),llr=l(),Wa=a("p"),ilr=o("The model class to instantiate is selected based on the "),O1e=a("code"),dlr=o("model_type"),clr=o(` property of the config object (either
passed as an argument or loaded from `),V1e=a("code"),flr=o("pretrained_model_name_or_path"),mlr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X1e=a("code"),glr=o("pretrained_model_name_or_path"),hlr=o(":"),plr=l(),et=a("ul"),kT=a("li"),z1e=a("strong"),_lr=o("data2vec-audio"),ulr=o(" \u2014 "),YQ=a("a"),blr=o("Data2VecAudioForAudioFrameClassification"),vlr=o(" (Data2VecAudio model)"),Flr=l(),ST=a("li"),Q1e=a("strong"),Tlr=o("unispeech-sat"),Mlr=o(" \u2014 "),KQ=a("a"),Elr=o("UniSpeechSatForAudioFrameClassification"),Clr=o(" (UniSpeechSat model)"),wlr=l(),RT=a("li"),W1e=a("strong"),Alr=o("wav2vec2"),Llr=o(" \u2014 "),ZQ=a("a"),ylr=o("Wav2Vec2ForAudioFrameClassification"),xlr=o(" (Wav2Vec2 model)"),$lr=l(),PT=a("li"),H1e=a("strong"),klr=o("wav2vec2-conformer"),Slr=o(" \u2014 "),eW=a("a"),Rlr=o("Wav2Vec2ConformerForAudioFrameClassification"),Plr=o(" (Wav2Vec2-Conformer model)"),Blr=l(),BT=a("li"),U1e=a("strong"),Ilr=o("wavlm"),Nlr=o(" \u2014 "),oW=a("a"),qlr=o("WavLMForAudioFrameClassification"),jlr=o(" (WavLM model)"),Dlr=l(),IT=a("p"),Glr=o("The model is set in evaluation mode by default using "),J1e=a("code"),Olr=o("model.eval()"),Vlr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Y1e=a("code"),Xlr=o("model.train()"),zlr=l(),F(NT.$$.fragment),AOe=l(),xd=a("h2"),qT=a("a"),K1e=a("span"),F(Ay.$$.fragment),Qlr=l(),Z1e=a("span"),Wlr=o("AutoModelForCTC"),LOe=l(),zo=a("div"),F(Ly.$$.fragment),Hlr=l(),$d=a("p"),Ulr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),rW=a("a"),Jlr=o("from_pretrained()"),Ylr=o(" class method or the "),tW=a("a"),Klr=o("from_config()"),Zlr=o(` class
method.`),eir=l(),yy=a("p"),oir=o("This class cannot be instantiated directly using "),e2e=a("code"),rir=o("__init__()"),tir=o(" (throws an error)."),air=l(),Mt=a("div"),F(xy.$$.fragment),nir=l(),o2e=a("p"),sir=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),lir=l(),kd=a("p"),iir=o(`Note:
Loading a model from its configuration file does `),r2e=a("strong"),dir=o("not"),cir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aW=a("a"),fir=o("from_pretrained()"),mir=o(" to load the model weights."),gir=l(),F(jT.$$.fragment),hir=l(),go=a("div"),F($y.$$.fragment),pir=l(),t2e=a("p"),_ir=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),uir=l(),Ha=a("p"),bir=o("The model class to instantiate is selected based on the "),a2e=a("code"),vir=o("model_type"),Fir=o(` property of the config object (either
passed as an argument or loaded from `),n2e=a("code"),Tir=o("pretrained_model_name_or_path"),Mir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s2e=a("code"),Eir=o("pretrained_model_name_or_path"),Cir=o(":"),wir=l(),Le=a("ul"),DT=a("li"),l2e=a("strong"),Air=o("data2vec-audio"),Lir=o(" \u2014 "),nW=a("a"),yir=o("Data2VecAudioForCTC"),xir=o(" (Data2VecAudio model)"),$ir=l(),GT=a("li"),i2e=a("strong"),kir=o("hubert"),Sir=o(" \u2014 "),sW=a("a"),Rir=o("HubertForCTC"),Pir=o(" (Hubert model)"),Bir=l(),OT=a("li"),d2e=a("strong"),Iir=o("mctct"),Nir=o(" \u2014 "),lW=a("a"),qir=o("MCTCTForCTC"),jir=o(" (M-CTC-T model)"),Dir=l(),VT=a("li"),c2e=a("strong"),Gir=o("sew"),Oir=o(" \u2014 "),iW=a("a"),Vir=o("SEWForCTC"),Xir=o(" (SEW model)"),zir=l(),XT=a("li"),f2e=a("strong"),Qir=o("sew-d"),Wir=o(" \u2014 "),dW=a("a"),Hir=o("SEWDForCTC"),Uir=o(" (SEW-D model)"),Jir=l(),zT=a("li"),m2e=a("strong"),Yir=o("unispeech"),Kir=o(" \u2014 "),cW=a("a"),Zir=o("UniSpeechForCTC"),edr=o(" (UniSpeech model)"),odr=l(),QT=a("li"),g2e=a("strong"),rdr=o("unispeech-sat"),tdr=o(" \u2014 "),fW=a("a"),adr=o("UniSpeechSatForCTC"),ndr=o(" (UniSpeechSat model)"),sdr=l(),WT=a("li"),h2e=a("strong"),ldr=o("wav2vec2"),idr=o(" \u2014 "),mW=a("a"),ddr=o("Wav2Vec2ForCTC"),cdr=o(" (Wav2Vec2 model)"),fdr=l(),HT=a("li"),p2e=a("strong"),mdr=o("wav2vec2-conformer"),gdr=o(" \u2014 "),gW=a("a"),hdr=o("Wav2Vec2ConformerForCTC"),pdr=o(" (Wav2Vec2-Conformer model)"),_dr=l(),UT=a("li"),_2e=a("strong"),udr=o("wavlm"),bdr=o(" \u2014 "),hW=a("a"),vdr=o("WavLMForCTC"),Fdr=o(" (WavLM model)"),Tdr=l(),JT=a("p"),Mdr=o("The model is set in evaluation mode by default using "),u2e=a("code"),Edr=o("model.eval()"),Cdr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),b2e=a("code"),wdr=o("model.train()"),Adr=l(),F(YT.$$.fragment),yOe=l(),Sd=a("h2"),KT=a("a"),v2e=a("span"),F(ky.$$.fragment),Ldr=l(),F2e=a("span"),ydr=o("AutoModelForSpeechSeq2Seq"),xOe=l(),Qo=a("div"),F(Sy.$$.fragment),xdr=l(),Rd=a("p"),$dr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),pW=a("a"),kdr=o("from_pretrained()"),Sdr=o(" class method or the "),_W=a("a"),Rdr=o("from_config()"),Pdr=o(` class
method.`),Bdr=l(),Ry=a("p"),Idr=o("This class cannot be instantiated directly using "),T2e=a("code"),Ndr=o("__init__()"),qdr=o(" (throws an error)."),jdr=l(),Et=a("div"),F(Py.$$.fragment),Ddr=l(),M2e=a("p"),Gdr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Odr=l(),Pd=a("p"),Vdr=o(`Note:
Loading a model from its configuration file does `),E2e=a("strong"),Xdr=o("not"),zdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uW=a("a"),Qdr=o("from_pretrained()"),Wdr=o(" to load the model weights."),Hdr=l(),F(ZT.$$.fragment),Udr=l(),ho=a("div"),F(By.$$.fragment),Jdr=l(),C2e=a("p"),Ydr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Kdr=l(),Ua=a("p"),Zdr=o("The model class to instantiate is selected based on the "),w2e=a("code"),ecr=o("model_type"),ocr=o(` property of the config object (either
passed as an argument or loaded from `),A2e=a("code"),rcr=o("pretrained_model_name_or_path"),tcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L2e=a("code"),acr=o("pretrained_model_name_or_path"),ncr=o(":"),scr=l(),Iy=a("ul"),e8=a("li"),y2e=a("strong"),lcr=o("speech-encoder-decoder"),icr=o(" \u2014 "),bW=a("a"),dcr=o("SpeechEncoderDecoderModel"),ccr=o(" (Speech Encoder decoder model)"),fcr=l(),o8=a("li"),x2e=a("strong"),mcr=o("speech_to_text"),gcr=o(" \u2014 "),vW=a("a"),hcr=o("Speech2TextForConditionalGeneration"),pcr=o(" (Speech2Text model)"),_cr=l(),r8=a("p"),ucr=o("The model is set in evaluation mode by default using "),$2e=a("code"),bcr=o("model.eval()"),vcr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),k2e=a("code"),Fcr=o("model.train()"),Tcr=l(),F(t8.$$.fragment),$Oe=l(),Bd=a("h2"),a8=a("a"),S2e=a("span"),F(Ny.$$.fragment),Mcr=l(),R2e=a("span"),Ecr=o("AutoModelForAudioXVector"),kOe=l(),Wo=a("div"),F(qy.$$.fragment),Ccr=l(),Id=a("p"),wcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),FW=a("a"),Acr=o("from_pretrained()"),Lcr=o(" class method or the "),TW=a("a"),ycr=o("from_config()"),xcr=o(` class
method.`),$cr=l(),jy=a("p"),kcr=o("This class cannot be instantiated directly using "),P2e=a("code"),Scr=o("__init__()"),Rcr=o(" (throws an error)."),Pcr=l(),Ct=a("div"),F(Dy.$$.fragment),Bcr=l(),B2e=a("p"),Icr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Ncr=l(),Nd=a("p"),qcr=o(`Note:
Loading a model from its configuration file does `),I2e=a("strong"),jcr=o("not"),Dcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MW=a("a"),Gcr=o("from_pretrained()"),Ocr=o(" to load the model weights."),Vcr=l(),F(n8.$$.fragment),Xcr=l(),po=a("div"),F(Gy.$$.fragment),zcr=l(),N2e=a("p"),Qcr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Wcr=l(),Ja=a("p"),Hcr=o("The model class to instantiate is selected based on the "),q2e=a("code"),Ucr=o("model_type"),Jcr=o(` property of the config object (either
passed as an argument or loaded from `),j2e=a("code"),Ycr=o("pretrained_model_name_or_path"),Kcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D2e=a("code"),Zcr=o("pretrained_model_name_or_path"),efr=o(":"),ofr=l(),ot=a("ul"),s8=a("li"),G2e=a("strong"),rfr=o("data2vec-audio"),tfr=o(" \u2014 "),EW=a("a"),afr=o("Data2VecAudioForXVector"),nfr=o(" (Data2VecAudio model)"),sfr=l(),l8=a("li"),O2e=a("strong"),lfr=o("unispeech-sat"),ifr=o(" \u2014 "),CW=a("a"),dfr=o("UniSpeechSatForXVector"),cfr=o(" (UniSpeechSat model)"),ffr=l(),i8=a("li"),V2e=a("strong"),mfr=o("wav2vec2"),gfr=o(" \u2014 "),wW=a("a"),hfr=o("Wav2Vec2ForXVector"),pfr=o(" (Wav2Vec2 model)"),_fr=l(),d8=a("li"),X2e=a("strong"),ufr=o("wav2vec2-conformer"),bfr=o(" \u2014 "),AW=a("a"),vfr=o("Wav2Vec2ConformerForXVector"),Ffr=o(" (Wav2Vec2-Conformer model)"),Tfr=l(),c8=a("li"),z2e=a("strong"),Mfr=o("wavlm"),Efr=o(" \u2014 "),LW=a("a"),Cfr=o("WavLMForXVector"),wfr=o(" (WavLM model)"),Afr=l(),f8=a("p"),Lfr=o("The model is set in evaluation mode by default using "),Q2e=a("code"),yfr=o("model.eval()"),xfr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),W2e=a("code"),$fr=o("model.train()"),kfr=l(),F(m8.$$.fragment),SOe=l(),qd=a("h2"),g8=a("a"),H2e=a("span"),F(Oy.$$.fragment),Sfr=l(),U2e=a("span"),Rfr=o("AutoModelForMaskedImageModeling"),ROe=l(),Ho=a("div"),F(Vy.$$.fragment),Pfr=l(),jd=a("p"),Bfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),yW=a("a"),Ifr=o("from_pretrained()"),Nfr=o(" class method or the "),xW=a("a"),qfr=o("from_config()"),jfr=o(` class
method.`),Dfr=l(),Xy=a("p"),Gfr=o("This class cannot be instantiated directly using "),J2e=a("code"),Ofr=o("__init__()"),Vfr=o(" (throws an error)."),Xfr=l(),wt=a("div"),F(zy.$$.fragment),zfr=l(),Y2e=a("p"),Qfr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Wfr=l(),Dd=a("p"),Hfr=o(`Note:
Loading a model from its configuration file does `),K2e=a("strong"),Ufr=o("not"),Jfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$W=a("a"),Yfr=o("from_pretrained()"),Kfr=o(" to load the model weights."),Zfr=l(),F(h8.$$.fragment),emr=l(),_o=a("div"),F(Qy.$$.fragment),omr=l(),Z2e=a("p"),rmr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),tmr=l(),Ya=a("p"),amr=o("The model class to instantiate is selected based on the "),ebe=a("code"),nmr=o("model_type"),smr=o(` property of the config object (either
passed as an argument or loaded from `),obe=a("code"),lmr=o("pretrained_model_name_or_path"),imr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rbe=a("code"),dmr=o("pretrained_model_name_or_path"),cmr=o(":"),fmr=l(),Gd=a("ul"),p8=a("li"),tbe=a("strong"),mmr=o("deit"),gmr=o(" \u2014 "),kW=a("a"),hmr=o("DeiTForMaskedImageModeling"),pmr=o(" (DeiT model)"),_mr=l(),_8=a("li"),abe=a("strong"),umr=o("swin"),bmr=o(" \u2014 "),SW=a("a"),vmr=o("SwinForMaskedImageModeling"),Fmr=o(" (Swin Transformer model)"),Tmr=l(),u8=a("li"),nbe=a("strong"),Mmr=o("vit"),Emr=o(" \u2014 "),RW=a("a"),Cmr=o("ViTForMaskedImageModeling"),wmr=o(" (ViT model)"),Amr=l(),b8=a("p"),Lmr=o("The model is set in evaluation mode by default using "),sbe=a("code"),ymr=o("model.eval()"),xmr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lbe=a("code"),$mr=o("model.train()"),kmr=l(),F(v8.$$.fragment),POe=l(),Od=a("h2"),F8=a("a"),ibe=a("span"),F(Wy.$$.fragment),Smr=l(),dbe=a("span"),Rmr=o("AutoModelForObjectDetection"),BOe=l(),Uo=a("div"),F(Hy.$$.fragment),Pmr=l(),Vd=a("p"),Bmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),PW=a("a"),Imr=o("from_pretrained()"),Nmr=o(" class method or the "),BW=a("a"),qmr=o("from_config()"),jmr=o(` class
method.`),Dmr=l(),Uy=a("p"),Gmr=o("This class cannot be instantiated directly using "),cbe=a("code"),Omr=o("__init__()"),Vmr=o(" (throws an error)."),Xmr=l(),At=a("div"),F(Jy.$$.fragment),zmr=l(),fbe=a("p"),Qmr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Wmr=l(),Xd=a("p"),Hmr=o(`Note:
Loading a model from its configuration file does `),mbe=a("strong"),Umr=o("not"),Jmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IW=a("a"),Ymr=o("from_pretrained()"),Kmr=o(" to load the model weights."),Zmr=l(),F(T8.$$.fragment),egr=l(),uo=a("div"),F(Yy.$$.fragment),ogr=l(),gbe=a("p"),rgr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),tgr=l(),Ka=a("p"),agr=o("The model class to instantiate is selected based on the "),hbe=a("code"),ngr=o("model_type"),sgr=o(` property of the config object (either
passed as an argument or loaded from `),pbe=a("code"),lgr=o("pretrained_model_name_or_path"),igr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_be=a("code"),dgr=o("pretrained_model_name_or_path"),cgr=o(":"),fgr=l(),Ky=a("ul"),M8=a("li"),ube=a("strong"),mgr=o("detr"),ggr=o(" \u2014 "),NW=a("a"),hgr=o("DetrForObjectDetection"),pgr=o(" (DETR model)"),_gr=l(),E8=a("li"),bbe=a("strong"),ugr=o("yolos"),bgr=o(" \u2014 "),qW=a("a"),vgr=o("YolosForObjectDetection"),Fgr=o(" (YOLOS model)"),Tgr=l(),C8=a("p"),Mgr=o("The model is set in evaluation mode by default using "),vbe=a("code"),Egr=o("model.eval()"),Cgr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fbe=a("code"),wgr=o("model.train()"),Agr=l(),F(w8.$$.fragment),IOe=l(),zd=a("h2"),A8=a("a"),Tbe=a("span"),F(Zy.$$.fragment),Lgr=l(),Mbe=a("span"),ygr=o("AutoModelForImageSegmentation"),NOe=l(),Jo=a("div"),F(e9.$$.fragment),xgr=l(),Qd=a("p"),$gr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),jW=a("a"),kgr=o("from_pretrained()"),Sgr=o(" class method or the "),DW=a("a"),Rgr=o("from_config()"),Pgr=o(` class
method.`),Bgr=l(),o9=a("p"),Igr=o("This class cannot be instantiated directly using "),Ebe=a("code"),Ngr=o("__init__()"),qgr=o(" (throws an error)."),jgr=l(),Lt=a("div"),F(r9.$$.fragment),Dgr=l(),Cbe=a("p"),Ggr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Ogr=l(),Wd=a("p"),Vgr=o(`Note:
Loading a model from its configuration file does `),wbe=a("strong"),Xgr=o("not"),zgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GW=a("a"),Qgr=o("from_pretrained()"),Wgr=o(" to load the model weights."),Hgr=l(),F(L8.$$.fragment),Ugr=l(),bo=a("div"),F(t9.$$.fragment),Jgr=l(),Abe=a("p"),Ygr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Kgr=l(),Za=a("p"),Zgr=o("The model class to instantiate is selected based on the "),Lbe=a("code"),ehr=o("model_type"),ohr=o(` property of the config object (either
passed as an argument or loaded from `),ybe=a("code"),rhr=o("pretrained_model_name_or_path"),thr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xbe=a("code"),ahr=o("pretrained_model_name_or_path"),nhr=o(":"),shr=l(),$be=a("ul"),y8=a("li"),kbe=a("strong"),lhr=o("detr"),ihr=o(" \u2014 "),OW=a("a"),dhr=o("DetrForSegmentation"),chr=o(" (DETR model)"),fhr=l(),x8=a("p"),mhr=o("The model is set in evaluation mode by default using "),Sbe=a("code"),ghr=o("model.eval()"),hhr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rbe=a("code"),phr=o("model.train()"),_hr=l(),F($8.$$.fragment),qOe=l(),Hd=a("h2"),k8=a("a"),Pbe=a("span"),F(a9.$$.fragment),uhr=l(),Bbe=a("span"),bhr=o("AutoModelForSemanticSegmentation"),jOe=l(),Yo=a("div"),F(n9.$$.fragment),vhr=l(),Ud=a("p"),Fhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),VW=a("a"),Thr=o("from_pretrained()"),Mhr=o(" class method or the "),XW=a("a"),Ehr=o("from_config()"),Chr=o(` class
method.`),whr=l(),s9=a("p"),Ahr=o("This class cannot be instantiated directly using "),Ibe=a("code"),Lhr=o("__init__()"),yhr=o(" (throws an error)."),xhr=l(),yt=a("div"),F(l9.$$.fragment),$hr=l(),Nbe=a("p"),khr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Shr=l(),Jd=a("p"),Rhr=o(`Note:
Loading a model from its configuration file does `),qbe=a("strong"),Phr=o("not"),Bhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zW=a("a"),Ihr=o("from_pretrained()"),Nhr=o(" to load the model weights."),qhr=l(),F(S8.$$.fragment),jhr=l(),vo=a("div"),F(i9.$$.fragment),Dhr=l(),jbe=a("p"),Ghr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Ohr=l(),en=a("p"),Vhr=o("The model class to instantiate is selected based on the "),Dbe=a("code"),Xhr=o("model_type"),zhr=o(` property of the config object (either
passed as an argument or loaded from `),Gbe=a("code"),Qhr=o("pretrained_model_name_or_path"),Whr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Obe=a("code"),Hhr=o("pretrained_model_name_or_path"),Uhr=o(":"),Jhr=l(),on=a("ul"),R8=a("li"),Vbe=a("strong"),Yhr=o("beit"),Khr=o(" \u2014 "),QW=a("a"),Zhr=o("BeitForSemanticSegmentation"),epr=o(" (BEiT model)"),opr=l(),P8=a("li"),Xbe=a("strong"),rpr=o("data2vec-vision"),tpr=o(" \u2014 "),WW=a("a"),apr=o("Data2VecVisionForSemanticSegmentation"),npr=o(" (Data2VecVision model)"),spr=l(),B8=a("li"),zbe=a("strong"),lpr=o("dpt"),ipr=o(" \u2014 "),HW=a("a"),dpr=o("DPTForSemanticSegmentation"),cpr=o(" (DPT model)"),fpr=l(),I8=a("li"),Qbe=a("strong"),mpr=o("segformer"),gpr=o(" \u2014 "),UW=a("a"),hpr=o("SegformerForSemanticSegmentation"),ppr=o(" (SegFormer model)"),_pr=l(),N8=a("p"),upr=o("The model is set in evaluation mode by default using "),Wbe=a("code"),bpr=o("model.eval()"),vpr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hbe=a("code"),Fpr=o("model.train()"),Tpr=l(),F(q8.$$.fragment),DOe=l(),Yd=a("h2"),j8=a("a"),Ube=a("span"),F(d9.$$.fragment),Mpr=l(),Jbe=a("span"),Epr=o("AutoModelForInstanceSegmentation"),GOe=l(),Ko=a("div"),F(c9.$$.fragment),Cpr=l(),Kd=a("p"),wpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),JW=a("a"),Apr=o("from_pretrained()"),Lpr=o(" class method or the "),YW=a("a"),ypr=o("from_config()"),xpr=o(` class
method.`),$pr=l(),f9=a("p"),kpr=o("This class cannot be instantiated directly using "),Ybe=a("code"),Spr=o("__init__()"),Rpr=o(" (throws an error)."),Ppr=l(),xt=a("div"),F(m9.$$.fragment),Bpr=l(),Kbe=a("p"),Ipr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Npr=l(),Zd=a("p"),qpr=o(`Note:
Loading a model from its configuration file does `),Zbe=a("strong"),jpr=o("not"),Dpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KW=a("a"),Gpr=o("from_pretrained()"),Opr=o(" to load the model weights."),Vpr=l(),F(D8.$$.fragment),Xpr=l(),Fo=a("div"),F(g9.$$.fragment),zpr=l(),eve=a("p"),Qpr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Wpr=l(),rn=a("p"),Hpr=o("The model class to instantiate is selected based on the "),ove=a("code"),Upr=o("model_type"),Jpr=o(` property of the config object (either
passed as an argument or loaded from `),rve=a("code"),Ypr=o("pretrained_model_name_or_path"),Kpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tve=a("code"),Zpr=o("pretrained_model_name_or_path"),e_r=o(":"),o_r=l(),ave=a("ul"),G8=a("li"),nve=a("strong"),r_r=o("maskformer"),t_r=o(" \u2014 "),ZW=a("a"),a_r=o("MaskFormerForInstanceSegmentation"),n_r=o(" (MaskFormer model)"),s_r=l(),O8=a("p"),l_r=o("The model is set in evaluation mode by default using "),sve=a("code"),i_r=o("model.eval()"),d_r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lve=a("code"),c_r=o("model.train()"),f_r=l(),F(V8.$$.fragment),OOe=l(),ec=a("h2"),X8=a("a"),ive=a("span"),F(h9.$$.fragment),m_r=l(),dve=a("span"),g_r=o("TFAutoModel"),VOe=l(),Zo=a("div"),F(p9.$$.fragment),h_r=l(),oc=a("p"),p_r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),eH=a("a"),__r=o("from_pretrained()"),u_r=o(" class method or the "),oH=a("a"),b_r=o("from_config()"),v_r=o(` class
method.`),F_r=l(),_9=a("p"),T_r=o("This class cannot be instantiated directly using "),cve=a("code"),M_r=o("__init__()"),E_r=o(" (throws an error)."),C_r=l(),$t=a("div"),F(u9.$$.fragment),w_r=l(),fve=a("p"),A_r=o("Instantiates one of the base model classes of the library from a configuration."),L_r=l(),rc=a("p"),y_r=o(`Note:
Loading a model from its configuration file does `),mve=a("strong"),x_r=o("not"),$_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rH=a("a"),k_r=o("from_pretrained()"),S_r=o(" to load the model weights."),R_r=l(),F(z8.$$.fragment),P_r=l(),Lr=a("div"),F(b9.$$.fragment),B_r=l(),gve=a("p"),I_r=o("Instantiate one of the base model classes of the library from a pretrained model."),N_r=l(),tn=a("p"),q_r=o("The model class to instantiate is selected based on the "),hve=a("code"),j_r=o("model_type"),D_r=o(` property of the config object (either
passed as an argument or loaded from `),pve=a("code"),G_r=o("pretrained_model_name_or_path"),O_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ve=a("code"),V_r=o("pretrained_model_name_or_path"),X_r=o(":"),z_r=l(),j=a("ul"),Q8=a("li"),uve=a("strong"),Q_r=o("albert"),W_r=o(" \u2014 "),tH=a("a"),H_r=o("TFAlbertModel"),U_r=o(" (ALBERT model)"),J_r=l(),W8=a("li"),bve=a("strong"),Y_r=o("bart"),K_r=o(" \u2014 "),aH=a("a"),Z_r=o("TFBartModel"),eur=o(" (BART model)"),our=l(),H8=a("li"),vve=a("strong"),rur=o("bert"),tur=o(" \u2014 "),nH=a("a"),aur=o("TFBertModel"),nur=o(" (BERT model)"),sur=l(),U8=a("li"),Fve=a("strong"),lur=o("blenderbot"),iur=o(" \u2014 "),sH=a("a"),dur=o("TFBlenderbotModel"),cur=o(" (Blenderbot model)"),fur=l(),J8=a("li"),Tve=a("strong"),mur=o("blenderbot-small"),gur=o(" \u2014 "),lH=a("a"),hur=o("TFBlenderbotSmallModel"),pur=o(" (BlenderbotSmall model)"),_ur=l(),Y8=a("li"),Mve=a("strong"),uur=o("camembert"),bur=o(" \u2014 "),iH=a("a"),vur=o("TFCamembertModel"),Fur=o(" (CamemBERT model)"),Tur=l(),K8=a("li"),Eve=a("strong"),Mur=o("clip"),Eur=o(" \u2014 "),dH=a("a"),Cur=o("TFCLIPModel"),wur=o(" (CLIP model)"),Aur=l(),Z8=a("li"),Cve=a("strong"),Lur=o("convbert"),yur=o(" \u2014 "),cH=a("a"),xur=o("TFConvBertModel"),$ur=o(" (ConvBERT model)"),kur=l(),eM=a("li"),wve=a("strong"),Sur=o("convnext"),Rur=o(" \u2014 "),fH=a("a"),Pur=o("TFConvNextModel"),Bur=o(" (ConvNeXT model)"),Iur=l(),oM=a("li"),Ave=a("strong"),Nur=o("ctrl"),qur=o(" \u2014 "),mH=a("a"),jur=o("TFCTRLModel"),Dur=o(" (CTRL model)"),Gur=l(),rM=a("li"),Lve=a("strong"),Our=o("data2vec-vision"),Vur=o(" \u2014 "),gH=a("a"),Xur=o("TFData2VecVisionModel"),zur=o(" (Data2VecVision model)"),Qur=l(),tM=a("li"),yve=a("strong"),Wur=o("deberta"),Hur=o(" \u2014 "),hH=a("a"),Uur=o("TFDebertaModel"),Jur=o(" (DeBERTa model)"),Yur=l(),aM=a("li"),xve=a("strong"),Kur=o("deberta-v2"),Zur=o(" \u2014 "),pH=a("a"),e7r=o("TFDebertaV2Model"),o7r=o(" (DeBERTa-v2 model)"),r7r=l(),nM=a("li"),$ve=a("strong"),t7r=o("distilbert"),a7r=o(" \u2014 "),_H=a("a"),n7r=o("TFDistilBertModel"),s7r=o(" (DistilBERT model)"),l7r=l(),sM=a("li"),kve=a("strong"),i7r=o("dpr"),d7r=o(" \u2014 "),uH=a("a"),c7r=o("TFDPRQuestionEncoder"),f7r=o(" (DPR model)"),m7r=l(),lM=a("li"),Sve=a("strong"),g7r=o("electra"),h7r=o(" \u2014 "),bH=a("a"),p7r=o("TFElectraModel"),_7r=o(" (ELECTRA model)"),u7r=l(),iM=a("li"),Rve=a("strong"),b7r=o("flaubert"),v7r=o(" \u2014 "),vH=a("a"),F7r=o("TFFlaubertModel"),T7r=o(" (FlauBERT model)"),M7r=l(),zs=a("li"),Pve=a("strong"),E7r=o("funnel"),C7r=o(" \u2014 "),FH=a("a"),w7r=o("TFFunnelModel"),A7r=o(" or "),TH=a("a"),L7r=o("TFFunnelBaseModel"),y7r=o(" (Funnel Transformer model)"),x7r=l(),dM=a("li"),Bve=a("strong"),$7r=o("gpt2"),k7r=o(" \u2014 "),MH=a("a"),S7r=o("TFGPT2Model"),R7r=o(" (OpenAI GPT-2 model)"),P7r=l(),cM=a("li"),Ive=a("strong"),B7r=o("gptj"),I7r=o(" \u2014 "),EH=a("a"),N7r=o("TFGPTJModel"),q7r=o(" (GPT-J model)"),j7r=l(),fM=a("li"),Nve=a("strong"),D7r=o("hubert"),G7r=o(" \u2014 "),CH=a("a"),O7r=o("TFHubertModel"),V7r=o(" (Hubert model)"),X7r=l(),mM=a("li"),qve=a("strong"),z7r=o("layoutlm"),Q7r=o(" \u2014 "),wH=a("a"),W7r=o("TFLayoutLMModel"),H7r=o(" (LayoutLM model)"),U7r=l(),gM=a("li"),jve=a("strong"),J7r=o("led"),Y7r=o(" \u2014 "),AH=a("a"),K7r=o("TFLEDModel"),Z7r=o(" (LED model)"),e1r=l(),hM=a("li"),Dve=a("strong"),o1r=o("longformer"),r1r=o(" \u2014 "),LH=a("a"),t1r=o("TFLongformerModel"),a1r=o(" (Longformer model)"),n1r=l(),pM=a("li"),Gve=a("strong"),s1r=o("lxmert"),l1r=o(" \u2014 "),yH=a("a"),i1r=o("TFLxmertModel"),d1r=o(" (LXMERT model)"),c1r=l(),_M=a("li"),Ove=a("strong"),f1r=o("marian"),m1r=o(" \u2014 "),xH=a("a"),g1r=o("TFMarianModel"),h1r=o(" (Marian model)"),p1r=l(),uM=a("li"),Vve=a("strong"),_1r=o("mbart"),u1r=o(" \u2014 "),$H=a("a"),b1r=o("TFMBartModel"),v1r=o(" (mBART model)"),F1r=l(),bM=a("li"),Xve=a("strong"),T1r=o("mobilebert"),M1r=o(" \u2014 "),kH=a("a"),E1r=o("TFMobileBertModel"),C1r=o(" (MobileBERT model)"),w1r=l(),vM=a("li"),zve=a("strong"),A1r=o("mpnet"),L1r=o(" \u2014 "),SH=a("a"),y1r=o("TFMPNetModel"),x1r=o(" (MPNet model)"),$1r=l(),FM=a("li"),Qve=a("strong"),k1r=o("mt5"),S1r=o(" \u2014 "),RH=a("a"),R1r=o("TFMT5Model"),P1r=o(" (MT5 model)"),B1r=l(),TM=a("li"),Wve=a("strong"),I1r=o("openai-gpt"),N1r=o(" \u2014 "),PH=a("a"),q1r=o("TFOpenAIGPTModel"),j1r=o(" (OpenAI GPT model)"),D1r=l(),MM=a("li"),Hve=a("strong"),G1r=o("opt"),O1r=o(" \u2014 "),BH=a("a"),V1r=o("TFOPTModel"),X1r=o(" (OPT model)"),z1r=l(),EM=a("li"),Uve=a("strong"),Q1r=o("pegasus"),W1r=o(" \u2014 "),IH=a("a"),H1r=o("TFPegasusModel"),U1r=o(" (Pegasus model)"),J1r=l(),CM=a("li"),Jve=a("strong"),Y1r=o("rembert"),K1r=o(" \u2014 "),NH=a("a"),Z1r=o("TFRemBertModel"),e2r=o(" (RemBERT model)"),o2r=l(),wM=a("li"),Yve=a("strong"),r2r=o("roberta"),t2r=o(" \u2014 "),qH=a("a"),a2r=o("TFRobertaModel"),n2r=o(" (RoBERTa model)"),s2r=l(),AM=a("li"),Kve=a("strong"),l2r=o("roformer"),i2r=o(" \u2014 "),jH=a("a"),d2r=o("TFRoFormerModel"),c2r=o(" (RoFormer model)"),f2r=l(),LM=a("li"),Zve=a("strong"),m2r=o("speech_to_text"),g2r=o(" \u2014 "),DH=a("a"),h2r=o("TFSpeech2TextModel"),p2r=o(" (Speech2Text model)"),_2r=l(),yM=a("li"),eFe=a("strong"),u2r=o("swin"),b2r=o(" \u2014 "),GH=a("a"),v2r=o("TFSwinModel"),F2r=o(" (Swin Transformer model)"),T2r=l(),xM=a("li"),oFe=a("strong"),M2r=o("t5"),E2r=o(" \u2014 "),OH=a("a"),C2r=o("TFT5Model"),w2r=o(" (T5 model)"),A2r=l(),$M=a("li"),rFe=a("strong"),L2r=o("tapas"),y2r=o(" \u2014 "),VH=a("a"),x2r=o("TFTapasModel"),$2r=o(" (TAPAS model)"),k2r=l(),kM=a("li"),tFe=a("strong"),S2r=o("transfo-xl"),R2r=o(" \u2014 "),XH=a("a"),P2r=o("TFTransfoXLModel"),B2r=o(" (Transformer-XL model)"),I2r=l(),SM=a("li"),aFe=a("strong"),N2r=o("vit"),q2r=o(" \u2014 "),zH=a("a"),j2r=o("TFViTModel"),D2r=o(" (ViT model)"),G2r=l(),RM=a("li"),nFe=a("strong"),O2r=o("vit_mae"),V2r=o(" \u2014 "),QH=a("a"),X2r=o("TFViTMAEModel"),z2r=o(" (ViTMAE model)"),Q2r=l(),PM=a("li"),sFe=a("strong"),W2r=o("wav2vec2"),H2r=o(" \u2014 "),WH=a("a"),U2r=o("TFWav2Vec2Model"),J2r=o(" (Wav2Vec2 model)"),Y2r=l(),BM=a("li"),lFe=a("strong"),K2r=o("xlm"),Z2r=o(" \u2014 "),HH=a("a"),ebr=o("TFXLMModel"),obr=o(" (XLM model)"),rbr=l(),IM=a("li"),iFe=a("strong"),tbr=o("xlm-roberta"),abr=o(" \u2014 "),UH=a("a"),nbr=o("TFXLMRobertaModel"),sbr=o(" (XLM-RoBERTa model)"),lbr=l(),NM=a("li"),dFe=a("strong"),ibr=o("xlnet"),dbr=o(" \u2014 "),JH=a("a"),cbr=o("TFXLNetModel"),fbr=o(" (XLNet model)"),mbr=l(),F(qM.$$.fragment),XOe=l(),tc=a("h2"),jM=a("a"),cFe=a("span"),F(v9.$$.fragment),gbr=l(),fFe=a("span"),hbr=o("TFAutoModelForPreTraining"),zOe=l(),er=a("div"),F(F9.$$.fragment),pbr=l(),ac=a("p"),_br=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),YH=a("a"),ubr=o("from_pretrained()"),bbr=o(" class method or the "),KH=a("a"),vbr=o("from_config()"),Fbr=o(` class
method.`),Tbr=l(),T9=a("p"),Mbr=o("This class cannot be instantiated directly using "),mFe=a("code"),Ebr=o("__init__()"),Cbr=o(" (throws an error)."),wbr=l(),kt=a("div"),F(M9.$$.fragment),Abr=l(),gFe=a("p"),Lbr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),ybr=l(),nc=a("p"),xbr=o(`Note:
Loading a model from its configuration file does `),hFe=a("strong"),$br=o("not"),kbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZH=a("a"),Sbr=o("from_pretrained()"),Rbr=o(" to load the model weights."),Pbr=l(),F(DM.$$.fragment),Bbr=l(),yr=a("div"),F(E9.$$.fragment),Ibr=l(),pFe=a("p"),Nbr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),qbr=l(),an=a("p"),jbr=o("The model class to instantiate is selected based on the "),_Fe=a("code"),Dbr=o("model_type"),Gbr=o(` property of the config object (either
passed as an argument or loaded from `),uFe=a("code"),Obr=o("pretrained_model_name_or_path"),Vbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bFe=a("code"),Xbr=o("pretrained_model_name_or_path"),zbr=o(":"),Qbr=l(),se=a("ul"),GM=a("li"),vFe=a("strong"),Wbr=o("albert"),Hbr=o(" \u2014 "),eU=a("a"),Ubr=o("TFAlbertForPreTraining"),Jbr=o(" (ALBERT model)"),Ybr=l(),OM=a("li"),FFe=a("strong"),Kbr=o("bart"),Zbr=o(" \u2014 "),oU=a("a"),evr=o("TFBartForConditionalGeneration"),ovr=o(" (BART model)"),rvr=l(),VM=a("li"),TFe=a("strong"),tvr=o("bert"),avr=o(" \u2014 "),rU=a("a"),nvr=o("TFBertForPreTraining"),svr=o(" (BERT model)"),lvr=l(),XM=a("li"),MFe=a("strong"),ivr=o("camembert"),dvr=o(" \u2014 "),tU=a("a"),cvr=o("TFCamembertForMaskedLM"),fvr=o(" (CamemBERT model)"),mvr=l(),zM=a("li"),EFe=a("strong"),gvr=o("ctrl"),hvr=o(" \u2014 "),aU=a("a"),pvr=o("TFCTRLLMHeadModel"),_vr=o(" (CTRL model)"),uvr=l(),QM=a("li"),CFe=a("strong"),bvr=o("distilbert"),vvr=o(" \u2014 "),nU=a("a"),Fvr=o("TFDistilBertForMaskedLM"),Tvr=o(" (DistilBERT model)"),Mvr=l(),WM=a("li"),wFe=a("strong"),Evr=o("electra"),Cvr=o(" \u2014 "),sU=a("a"),wvr=o("TFElectraForPreTraining"),Avr=o(" (ELECTRA model)"),Lvr=l(),HM=a("li"),AFe=a("strong"),yvr=o("flaubert"),xvr=o(" \u2014 "),lU=a("a"),$vr=o("TFFlaubertWithLMHeadModel"),kvr=o(" (FlauBERT model)"),Svr=l(),UM=a("li"),LFe=a("strong"),Rvr=o("funnel"),Pvr=o(" \u2014 "),iU=a("a"),Bvr=o("TFFunnelForPreTraining"),Ivr=o(" (Funnel Transformer model)"),Nvr=l(),JM=a("li"),yFe=a("strong"),qvr=o("gpt2"),jvr=o(" \u2014 "),dU=a("a"),Dvr=o("TFGPT2LMHeadModel"),Gvr=o(" (OpenAI GPT-2 model)"),Ovr=l(),YM=a("li"),xFe=a("strong"),Vvr=o("layoutlm"),Xvr=o(" \u2014 "),cU=a("a"),zvr=o("TFLayoutLMForMaskedLM"),Qvr=o(" (LayoutLM model)"),Wvr=l(),KM=a("li"),$Fe=a("strong"),Hvr=o("lxmert"),Uvr=o(" \u2014 "),fU=a("a"),Jvr=o("TFLxmertForPreTraining"),Yvr=o(" (LXMERT model)"),Kvr=l(),ZM=a("li"),kFe=a("strong"),Zvr=o("mobilebert"),eFr=o(" \u2014 "),mU=a("a"),oFr=o("TFMobileBertForPreTraining"),rFr=o(" (MobileBERT model)"),tFr=l(),eE=a("li"),SFe=a("strong"),aFr=o("mpnet"),nFr=o(" \u2014 "),gU=a("a"),sFr=o("TFMPNetForMaskedLM"),lFr=o(" (MPNet model)"),iFr=l(),oE=a("li"),RFe=a("strong"),dFr=o("openai-gpt"),cFr=o(" \u2014 "),hU=a("a"),fFr=o("TFOpenAIGPTLMHeadModel"),mFr=o(" (OpenAI GPT model)"),gFr=l(),rE=a("li"),PFe=a("strong"),hFr=o("roberta"),pFr=o(" \u2014 "),pU=a("a"),_Fr=o("TFRobertaForMaskedLM"),uFr=o(" (RoBERTa model)"),bFr=l(),tE=a("li"),BFe=a("strong"),vFr=o("t5"),FFr=o(" \u2014 "),_U=a("a"),TFr=o("TFT5ForConditionalGeneration"),MFr=o(" (T5 model)"),EFr=l(),aE=a("li"),IFe=a("strong"),CFr=o("tapas"),wFr=o(" \u2014 "),uU=a("a"),AFr=o("TFTapasForMaskedLM"),LFr=o(" (TAPAS model)"),yFr=l(),nE=a("li"),NFe=a("strong"),xFr=o("transfo-xl"),$Fr=o(" \u2014 "),bU=a("a"),kFr=o("TFTransfoXLLMHeadModel"),SFr=o(" (Transformer-XL model)"),RFr=l(),sE=a("li"),qFe=a("strong"),PFr=o("vit_mae"),BFr=o(" \u2014 "),vU=a("a"),IFr=o("TFViTMAEForPreTraining"),NFr=o(" (ViTMAE model)"),qFr=l(),lE=a("li"),jFe=a("strong"),jFr=o("xlm"),DFr=o(" \u2014 "),FU=a("a"),GFr=o("TFXLMWithLMHeadModel"),OFr=o(" (XLM model)"),VFr=l(),iE=a("li"),DFe=a("strong"),XFr=o("xlm-roberta"),zFr=o(" \u2014 "),TU=a("a"),QFr=o("TFXLMRobertaForMaskedLM"),WFr=o(" (XLM-RoBERTa model)"),HFr=l(),dE=a("li"),GFe=a("strong"),UFr=o("xlnet"),JFr=o(" \u2014 "),MU=a("a"),YFr=o("TFXLNetLMHeadModel"),KFr=o(" (XLNet model)"),ZFr=l(),F(cE.$$.fragment),QOe=l(),sc=a("h2"),fE=a("a"),OFe=a("span"),F(C9.$$.fragment),eTr=l(),VFe=a("span"),oTr=o("TFAutoModelForCausalLM"),WOe=l(),or=a("div"),F(w9.$$.fragment),rTr=l(),lc=a("p"),tTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),EU=a("a"),aTr=o("from_pretrained()"),nTr=o(" class method or the "),CU=a("a"),sTr=o("from_config()"),lTr=o(` class
method.`),iTr=l(),A9=a("p"),dTr=o("This class cannot be instantiated directly using "),XFe=a("code"),cTr=o("__init__()"),fTr=o(" (throws an error)."),mTr=l(),St=a("div"),F(L9.$$.fragment),gTr=l(),zFe=a("p"),hTr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),pTr=l(),ic=a("p"),_Tr=o(`Note:
Loading a model from its configuration file does `),QFe=a("strong"),uTr=o("not"),bTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wU=a("a"),vTr=o("from_pretrained()"),FTr=o(" to load the model weights."),TTr=l(),F(mE.$$.fragment),MTr=l(),xr=a("div"),F(y9.$$.fragment),ETr=l(),WFe=a("p"),CTr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),wTr=l(),nn=a("p"),ATr=o("The model class to instantiate is selected based on the "),HFe=a("code"),LTr=o("model_type"),yTr=o(` property of the config object (either
passed as an argument or loaded from `),UFe=a("code"),xTr=o("pretrained_model_name_or_path"),$Tr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JFe=a("code"),kTr=o("pretrained_model_name_or_path"),STr=o(":"),RTr=l(),Me=a("ul"),gE=a("li"),YFe=a("strong"),PTr=o("bert"),BTr=o(" \u2014 "),AU=a("a"),ITr=o("TFBertLMHeadModel"),NTr=o(" (BERT model)"),qTr=l(),hE=a("li"),KFe=a("strong"),jTr=o("camembert"),DTr=o(" \u2014 "),LU=a("a"),GTr=o("TFCamembertForCausalLM"),OTr=o(" (CamemBERT model)"),VTr=l(),pE=a("li"),ZFe=a("strong"),XTr=o("ctrl"),zTr=o(" \u2014 "),yU=a("a"),QTr=o("TFCTRLLMHeadModel"),WTr=o(" (CTRL model)"),HTr=l(),_E=a("li"),eTe=a("strong"),UTr=o("gpt2"),JTr=o(" \u2014 "),xU=a("a"),YTr=o("TFGPT2LMHeadModel"),KTr=o(" (OpenAI GPT-2 model)"),ZTr=l(),uE=a("li"),oTe=a("strong"),e8r=o("gptj"),o8r=o(" \u2014 "),$U=a("a"),r8r=o("TFGPTJForCausalLM"),t8r=o(" (GPT-J model)"),a8r=l(),bE=a("li"),rTe=a("strong"),n8r=o("openai-gpt"),s8r=o(" \u2014 "),kU=a("a"),l8r=o("TFOpenAIGPTLMHeadModel"),i8r=o(" (OpenAI GPT model)"),d8r=l(),vE=a("li"),tTe=a("strong"),c8r=o("opt"),f8r=o(" \u2014 "),SU=a("a"),m8r=o("TFOPTForCausalLM"),g8r=o(" (OPT model)"),h8r=l(),FE=a("li"),aTe=a("strong"),p8r=o("rembert"),_8r=o(" \u2014 "),RU=a("a"),u8r=o("TFRemBertForCausalLM"),b8r=o(" (RemBERT model)"),v8r=l(),TE=a("li"),nTe=a("strong"),F8r=o("roberta"),T8r=o(" \u2014 "),PU=a("a"),M8r=o("TFRobertaForCausalLM"),E8r=o(" (RoBERTa model)"),C8r=l(),ME=a("li"),sTe=a("strong"),w8r=o("roformer"),A8r=o(" \u2014 "),BU=a("a"),L8r=o("TFRoFormerForCausalLM"),y8r=o(" (RoFormer model)"),x8r=l(),EE=a("li"),lTe=a("strong"),$8r=o("transfo-xl"),k8r=o(" \u2014 "),IU=a("a"),S8r=o("TFTransfoXLLMHeadModel"),R8r=o(" (Transformer-XL model)"),P8r=l(),CE=a("li"),iTe=a("strong"),B8r=o("xlm"),I8r=o(" \u2014 "),NU=a("a"),N8r=o("TFXLMWithLMHeadModel"),q8r=o(" (XLM model)"),j8r=l(),wE=a("li"),dTe=a("strong"),D8r=o("xlnet"),G8r=o(" \u2014 "),qU=a("a"),O8r=o("TFXLNetLMHeadModel"),V8r=o(" (XLNet model)"),X8r=l(),F(AE.$$.fragment),HOe=l(),dc=a("h2"),LE=a("a"),cTe=a("span"),F(x9.$$.fragment),z8r=l(),fTe=a("span"),Q8r=o("TFAutoModelForImageClassification"),UOe=l(),rr=a("div"),F($9.$$.fragment),W8r=l(),cc=a("p"),H8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),jU=a("a"),U8r=o("from_pretrained()"),J8r=o(" class method or the "),DU=a("a"),Y8r=o("from_config()"),K8r=o(` class
method.`),Z8r=l(),k9=a("p"),eMr=o("This class cannot be instantiated directly using "),mTe=a("code"),oMr=o("__init__()"),rMr=o(" (throws an error)."),tMr=l(),Rt=a("div"),F(S9.$$.fragment),aMr=l(),gTe=a("p"),nMr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),sMr=l(),fc=a("p"),lMr=o(`Note:
Loading a model from its configuration file does `),hTe=a("strong"),iMr=o("not"),dMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GU=a("a"),cMr=o("from_pretrained()"),fMr=o(" to load the model weights."),mMr=l(),F(yE.$$.fragment),gMr=l(),$r=a("div"),F(R9.$$.fragment),hMr=l(),pTe=a("p"),pMr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),_Mr=l(),sn=a("p"),uMr=o("The model class to instantiate is selected based on the "),_Te=a("code"),bMr=o("model_type"),vMr=o(` property of the config object (either
passed as an argument or loaded from `),uTe=a("code"),FMr=o("pretrained_model_name_or_path"),TMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bTe=a("code"),MMr=o("pretrained_model_name_or_path"),EMr=o(":"),CMr=l(),ln=a("ul"),xE=a("li"),vTe=a("strong"),wMr=o("convnext"),AMr=o(" \u2014 "),OU=a("a"),LMr=o("TFConvNextForImageClassification"),yMr=o(" (ConvNeXT model)"),xMr=l(),$E=a("li"),FTe=a("strong"),$Mr=o("data2vec-vision"),kMr=o(" \u2014 "),VU=a("a"),SMr=o("TFData2VecVisionForImageClassification"),RMr=o(" (Data2VecVision model)"),PMr=l(),kE=a("li"),TTe=a("strong"),BMr=o("swin"),IMr=o(" \u2014 "),XU=a("a"),NMr=o("TFSwinForImageClassification"),qMr=o(" (Swin Transformer model)"),jMr=l(),SE=a("li"),MTe=a("strong"),DMr=o("vit"),GMr=o(" \u2014 "),zU=a("a"),OMr=o("TFViTForImageClassification"),VMr=o(" (ViT model)"),XMr=l(),F(RE.$$.fragment),JOe=l(),mc=a("h2"),PE=a("a"),ETe=a("span"),F(P9.$$.fragment),zMr=l(),CTe=a("span"),QMr=o("TFAutoModelForMaskedLM"),YOe=l(),tr=a("div"),F(B9.$$.fragment),WMr=l(),gc=a("p"),HMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),QU=a("a"),UMr=o("from_pretrained()"),JMr=o(" class method or the "),WU=a("a"),YMr=o("from_config()"),KMr=o(` class
method.`),ZMr=l(),I9=a("p"),eEr=o("This class cannot be instantiated directly using "),wTe=a("code"),oEr=o("__init__()"),rEr=o(" (throws an error)."),tEr=l(),Pt=a("div"),F(N9.$$.fragment),aEr=l(),ATe=a("p"),nEr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),sEr=l(),hc=a("p"),lEr=o(`Note:
Loading a model from its configuration file does `),LTe=a("strong"),iEr=o("not"),dEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HU=a("a"),cEr=o("from_pretrained()"),fEr=o(" to load the model weights."),mEr=l(),F(BE.$$.fragment),gEr=l(),kr=a("div"),F(q9.$$.fragment),hEr=l(),yTe=a("p"),pEr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),_Er=l(),dn=a("p"),uEr=o("The model class to instantiate is selected based on the "),xTe=a("code"),bEr=o("model_type"),vEr=o(` property of the config object (either
passed as an argument or loaded from `),$Te=a("code"),FEr=o("pretrained_model_name_or_path"),TEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kTe=a("code"),MEr=o("pretrained_model_name_or_path"),EEr=o(":"),CEr=l(),ie=a("ul"),IE=a("li"),STe=a("strong"),wEr=o("albert"),AEr=o(" \u2014 "),UU=a("a"),LEr=o("TFAlbertForMaskedLM"),yEr=o(" (ALBERT model)"),xEr=l(),NE=a("li"),RTe=a("strong"),$Er=o("bert"),kEr=o(" \u2014 "),JU=a("a"),SEr=o("TFBertForMaskedLM"),REr=o(" (BERT model)"),PEr=l(),qE=a("li"),PTe=a("strong"),BEr=o("camembert"),IEr=o(" \u2014 "),YU=a("a"),NEr=o("TFCamembertForMaskedLM"),qEr=o(" (CamemBERT model)"),jEr=l(),jE=a("li"),BTe=a("strong"),DEr=o("convbert"),GEr=o(" \u2014 "),KU=a("a"),OEr=o("TFConvBertForMaskedLM"),VEr=o(" (ConvBERT model)"),XEr=l(),DE=a("li"),ITe=a("strong"),zEr=o("deberta"),QEr=o(" \u2014 "),ZU=a("a"),WEr=o("TFDebertaForMaskedLM"),HEr=o(" (DeBERTa model)"),UEr=l(),GE=a("li"),NTe=a("strong"),JEr=o("deberta-v2"),YEr=o(" \u2014 "),eJ=a("a"),KEr=o("TFDebertaV2ForMaskedLM"),ZEr=o(" (DeBERTa-v2 model)"),e4r=l(),OE=a("li"),qTe=a("strong"),o4r=o("distilbert"),r4r=o(" \u2014 "),oJ=a("a"),t4r=o("TFDistilBertForMaskedLM"),a4r=o(" (DistilBERT model)"),n4r=l(),VE=a("li"),jTe=a("strong"),s4r=o("electra"),l4r=o(" \u2014 "),rJ=a("a"),i4r=o("TFElectraForMaskedLM"),d4r=o(" (ELECTRA model)"),c4r=l(),XE=a("li"),DTe=a("strong"),f4r=o("flaubert"),m4r=o(" \u2014 "),tJ=a("a"),g4r=o("TFFlaubertWithLMHeadModel"),h4r=o(" (FlauBERT model)"),p4r=l(),zE=a("li"),GTe=a("strong"),_4r=o("funnel"),u4r=o(" \u2014 "),aJ=a("a"),b4r=o("TFFunnelForMaskedLM"),v4r=o(" (Funnel Transformer model)"),F4r=l(),QE=a("li"),OTe=a("strong"),T4r=o("layoutlm"),M4r=o(" \u2014 "),nJ=a("a"),E4r=o("TFLayoutLMForMaskedLM"),C4r=o(" (LayoutLM model)"),w4r=l(),WE=a("li"),VTe=a("strong"),A4r=o("longformer"),L4r=o(" \u2014 "),sJ=a("a"),y4r=o("TFLongformerForMaskedLM"),x4r=o(" (Longformer model)"),$4r=l(),HE=a("li"),XTe=a("strong"),k4r=o("mobilebert"),S4r=o(" \u2014 "),lJ=a("a"),R4r=o("TFMobileBertForMaskedLM"),P4r=o(" (MobileBERT model)"),B4r=l(),UE=a("li"),zTe=a("strong"),I4r=o("mpnet"),N4r=o(" \u2014 "),iJ=a("a"),q4r=o("TFMPNetForMaskedLM"),j4r=o(" (MPNet model)"),D4r=l(),JE=a("li"),QTe=a("strong"),G4r=o("rembert"),O4r=o(" \u2014 "),dJ=a("a"),V4r=o("TFRemBertForMaskedLM"),X4r=o(" (RemBERT model)"),z4r=l(),YE=a("li"),WTe=a("strong"),Q4r=o("roberta"),W4r=o(" \u2014 "),cJ=a("a"),H4r=o("TFRobertaForMaskedLM"),U4r=o(" (RoBERTa model)"),J4r=l(),KE=a("li"),HTe=a("strong"),Y4r=o("roformer"),K4r=o(" \u2014 "),fJ=a("a"),Z4r=o("TFRoFormerForMaskedLM"),eCr=o(" (RoFormer model)"),oCr=l(),ZE=a("li"),UTe=a("strong"),rCr=o("tapas"),tCr=o(" \u2014 "),mJ=a("a"),aCr=o("TFTapasForMaskedLM"),nCr=o(" (TAPAS model)"),sCr=l(),e4=a("li"),JTe=a("strong"),lCr=o("xlm"),iCr=o(" \u2014 "),gJ=a("a"),dCr=o("TFXLMWithLMHeadModel"),cCr=o(" (XLM model)"),fCr=l(),o4=a("li"),YTe=a("strong"),mCr=o("xlm-roberta"),gCr=o(" \u2014 "),hJ=a("a"),hCr=o("TFXLMRobertaForMaskedLM"),pCr=o(" (XLM-RoBERTa model)"),_Cr=l(),F(r4.$$.fragment),KOe=l(),pc=a("h2"),t4=a("a"),KTe=a("span"),F(j9.$$.fragment),uCr=l(),ZTe=a("span"),bCr=o("TFAutoModelForSeq2SeqLM"),ZOe=l(),ar=a("div"),F(D9.$$.fragment),vCr=l(),_c=a("p"),FCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),pJ=a("a"),TCr=o("from_pretrained()"),MCr=o(" class method or the "),_J=a("a"),ECr=o("from_config()"),CCr=o(` class
method.`),wCr=l(),G9=a("p"),ACr=o("This class cannot be instantiated directly using "),e8e=a("code"),LCr=o("__init__()"),yCr=o(" (throws an error)."),xCr=l(),Bt=a("div"),F(O9.$$.fragment),$Cr=l(),o8e=a("p"),kCr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),SCr=l(),uc=a("p"),RCr=o(`Note:
Loading a model from its configuration file does `),r8e=a("strong"),PCr=o("not"),BCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uJ=a("a"),ICr=o("from_pretrained()"),NCr=o(" to load the model weights."),qCr=l(),F(a4.$$.fragment),jCr=l(),Sr=a("div"),F(V9.$$.fragment),DCr=l(),t8e=a("p"),GCr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),OCr=l(),cn=a("p"),VCr=o("The model class to instantiate is selected based on the "),a8e=a("code"),XCr=o("model_type"),zCr=o(` property of the config object (either
passed as an argument or loaded from `),n8e=a("code"),QCr=o("pretrained_model_name_or_path"),WCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s8e=a("code"),HCr=o("pretrained_model_name_or_path"),UCr=o(":"),JCr=l(),ye=a("ul"),n4=a("li"),l8e=a("strong"),YCr=o("bart"),KCr=o(" \u2014 "),bJ=a("a"),ZCr=o("TFBartForConditionalGeneration"),e5r=o(" (BART model)"),o5r=l(),s4=a("li"),i8e=a("strong"),r5r=o("blenderbot"),t5r=o(" \u2014 "),vJ=a("a"),a5r=o("TFBlenderbotForConditionalGeneration"),n5r=o(" (Blenderbot model)"),s5r=l(),l4=a("li"),d8e=a("strong"),l5r=o("blenderbot-small"),i5r=o(" \u2014 "),FJ=a("a"),d5r=o("TFBlenderbotSmallForConditionalGeneration"),c5r=o(" (BlenderbotSmall model)"),f5r=l(),i4=a("li"),c8e=a("strong"),m5r=o("encoder-decoder"),g5r=o(" \u2014 "),TJ=a("a"),h5r=o("TFEncoderDecoderModel"),p5r=o(" (Encoder decoder model)"),_5r=l(),d4=a("li"),f8e=a("strong"),u5r=o("led"),b5r=o(" \u2014 "),MJ=a("a"),v5r=o("TFLEDForConditionalGeneration"),F5r=o(" (LED model)"),T5r=l(),c4=a("li"),m8e=a("strong"),M5r=o("marian"),E5r=o(" \u2014 "),EJ=a("a"),C5r=o("TFMarianMTModel"),w5r=o(" (Marian model)"),A5r=l(),f4=a("li"),g8e=a("strong"),L5r=o("mbart"),y5r=o(" \u2014 "),CJ=a("a"),x5r=o("TFMBartForConditionalGeneration"),$5r=o(" (mBART model)"),k5r=l(),m4=a("li"),h8e=a("strong"),S5r=o("mt5"),R5r=o(" \u2014 "),wJ=a("a"),P5r=o("TFMT5ForConditionalGeneration"),B5r=o(" (MT5 model)"),I5r=l(),g4=a("li"),p8e=a("strong"),N5r=o("pegasus"),q5r=o(" \u2014 "),AJ=a("a"),j5r=o("TFPegasusForConditionalGeneration"),D5r=o(" (Pegasus model)"),G5r=l(),h4=a("li"),_8e=a("strong"),O5r=o("t5"),V5r=o(" \u2014 "),LJ=a("a"),X5r=o("TFT5ForConditionalGeneration"),z5r=o(" (T5 model)"),Q5r=l(),F(p4.$$.fragment),eVe=l(),bc=a("h2"),_4=a("a"),u8e=a("span"),F(X9.$$.fragment),W5r=l(),b8e=a("span"),H5r=o("TFAutoModelForSequenceClassification"),oVe=l(),nr=a("div"),F(z9.$$.fragment),U5r=l(),vc=a("p"),J5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),yJ=a("a"),Y5r=o("from_pretrained()"),K5r=o(" class method or the "),xJ=a("a"),Z5r=o("from_config()"),e3r=o(` class
method.`),o3r=l(),Q9=a("p"),r3r=o("This class cannot be instantiated directly using "),v8e=a("code"),t3r=o("__init__()"),a3r=o(" (throws an error)."),n3r=l(),It=a("div"),F(W9.$$.fragment),s3r=l(),F8e=a("p"),l3r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),i3r=l(),Fc=a("p"),d3r=o(`Note:
Loading a model from its configuration file does `),T8e=a("strong"),c3r=o("not"),f3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$J=a("a"),m3r=o("from_pretrained()"),g3r=o(" to load the model weights."),h3r=l(),F(u4.$$.fragment),p3r=l(),Rr=a("div"),F(H9.$$.fragment),_3r=l(),M8e=a("p"),u3r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),b3r=l(),fn=a("p"),v3r=o("The model class to instantiate is selected based on the "),E8e=a("code"),F3r=o("model_type"),T3r=o(` property of the config object (either
passed as an argument or loaded from `),C8e=a("code"),M3r=o("pretrained_model_name_or_path"),E3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w8e=a("code"),C3r=o("pretrained_model_name_or_path"),w3r=o(":"),A3r=l(),te=a("ul"),b4=a("li"),A8e=a("strong"),L3r=o("albert"),y3r=o(" \u2014 "),kJ=a("a"),x3r=o("TFAlbertForSequenceClassification"),$3r=o(" (ALBERT model)"),k3r=l(),v4=a("li"),L8e=a("strong"),S3r=o("bert"),R3r=o(" \u2014 "),SJ=a("a"),P3r=o("TFBertForSequenceClassification"),B3r=o(" (BERT model)"),I3r=l(),F4=a("li"),y8e=a("strong"),N3r=o("camembert"),q3r=o(" \u2014 "),RJ=a("a"),j3r=o("TFCamembertForSequenceClassification"),D3r=o(" (CamemBERT model)"),G3r=l(),T4=a("li"),x8e=a("strong"),O3r=o("convbert"),V3r=o(" \u2014 "),PJ=a("a"),X3r=o("TFConvBertForSequenceClassification"),z3r=o(" (ConvBERT model)"),Q3r=l(),M4=a("li"),$8e=a("strong"),W3r=o("ctrl"),H3r=o(" \u2014 "),BJ=a("a"),U3r=o("TFCTRLForSequenceClassification"),J3r=o(" (CTRL model)"),Y3r=l(),E4=a("li"),k8e=a("strong"),K3r=o("deberta"),Z3r=o(" \u2014 "),IJ=a("a"),e0r=o("TFDebertaForSequenceClassification"),o0r=o(" (DeBERTa model)"),r0r=l(),C4=a("li"),S8e=a("strong"),t0r=o("deberta-v2"),a0r=o(" \u2014 "),NJ=a("a"),n0r=o("TFDebertaV2ForSequenceClassification"),s0r=o(" (DeBERTa-v2 model)"),l0r=l(),w4=a("li"),R8e=a("strong"),i0r=o("distilbert"),d0r=o(" \u2014 "),qJ=a("a"),c0r=o("TFDistilBertForSequenceClassification"),f0r=o(" (DistilBERT model)"),m0r=l(),A4=a("li"),P8e=a("strong"),g0r=o("electra"),h0r=o(" \u2014 "),jJ=a("a"),p0r=o("TFElectraForSequenceClassification"),_0r=o(" (ELECTRA model)"),u0r=l(),L4=a("li"),B8e=a("strong"),b0r=o("flaubert"),v0r=o(" \u2014 "),DJ=a("a"),F0r=o("TFFlaubertForSequenceClassification"),T0r=o(" (FlauBERT model)"),M0r=l(),y4=a("li"),I8e=a("strong"),E0r=o("funnel"),C0r=o(" \u2014 "),GJ=a("a"),w0r=o("TFFunnelForSequenceClassification"),A0r=o(" (Funnel Transformer model)"),L0r=l(),x4=a("li"),N8e=a("strong"),y0r=o("gpt2"),x0r=o(" \u2014 "),OJ=a("a"),$0r=o("TFGPT2ForSequenceClassification"),k0r=o(" (OpenAI GPT-2 model)"),S0r=l(),$4=a("li"),q8e=a("strong"),R0r=o("gptj"),P0r=o(" \u2014 "),VJ=a("a"),B0r=o("TFGPTJForSequenceClassification"),I0r=o(" (GPT-J model)"),N0r=l(),k4=a("li"),j8e=a("strong"),q0r=o("layoutlm"),j0r=o(" \u2014 "),XJ=a("a"),D0r=o("TFLayoutLMForSequenceClassification"),G0r=o(" (LayoutLM model)"),O0r=l(),S4=a("li"),D8e=a("strong"),V0r=o("longformer"),X0r=o(" \u2014 "),zJ=a("a"),z0r=o("TFLongformerForSequenceClassification"),Q0r=o(" (Longformer model)"),W0r=l(),R4=a("li"),G8e=a("strong"),H0r=o("mobilebert"),U0r=o(" \u2014 "),QJ=a("a"),J0r=o("TFMobileBertForSequenceClassification"),Y0r=o(" (MobileBERT model)"),K0r=l(),P4=a("li"),O8e=a("strong"),Z0r=o("mpnet"),ewr=o(" \u2014 "),WJ=a("a"),owr=o("TFMPNetForSequenceClassification"),rwr=o(" (MPNet model)"),twr=l(),B4=a("li"),V8e=a("strong"),awr=o("openai-gpt"),nwr=o(" \u2014 "),HJ=a("a"),swr=o("TFOpenAIGPTForSequenceClassification"),lwr=o(" (OpenAI GPT model)"),iwr=l(),I4=a("li"),X8e=a("strong"),dwr=o("rembert"),cwr=o(" \u2014 "),UJ=a("a"),fwr=o("TFRemBertForSequenceClassification"),mwr=o(" (RemBERT model)"),gwr=l(),N4=a("li"),z8e=a("strong"),hwr=o("roberta"),pwr=o(" \u2014 "),JJ=a("a"),_wr=o("TFRobertaForSequenceClassification"),uwr=o(" (RoBERTa model)"),bwr=l(),q4=a("li"),Q8e=a("strong"),vwr=o("roformer"),Fwr=o(" \u2014 "),YJ=a("a"),Twr=o("TFRoFormerForSequenceClassification"),Mwr=o(" (RoFormer model)"),Ewr=l(),j4=a("li"),W8e=a("strong"),Cwr=o("tapas"),wwr=o(" \u2014 "),KJ=a("a"),Awr=o("TFTapasForSequenceClassification"),Lwr=o(" (TAPAS model)"),ywr=l(),D4=a("li"),H8e=a("strong"),xwr=o("transfo-xl"),$wr=o(" \u2014 "),ZJ=a("a"),kwr=o("TFTransfoXLForSequenceClassification"),Swr=o(" (Transformer-XL model)"),Rwr=l(),G4=a("li"),U8e=a("strong"),Pwr=o("xlm"),Bwr=o(" \u2014 "),eY=a("a"),Iwr=o("TFXLMForSequenceClassification"),Nwr=o(" (XLM model)"),qwr=l(),O4=a("li"),J8e=a("strong"),jwr=o("xlm-roberta"),Dwr=o(" \u2014 "),oY=a("a"),Gwr=o("TFXLMRobertaForSequenceClassification"),Owr=o(" (XLM-RoBERTa model)"),Vwr=l(),V4=a("li"),Y8e=a("strong"),Xwr=o("xlnet"),zwr=o(" \u2014 "),rY=a("a"),Qwr=o("TFXLNetForSequenceClassification"),Wwr=o(" (XLNet model)"),Hwr=l(),F(X4.$$.fragment),rVe=l(),Tc=a("h2"),z4=a("a"),K8e=a("span"),F(U9.$$.fragment),Uwr=l(),Z8e=a("span"),Jwr=o("TFAutoModelForMultipleChoice"),tVe=l(),sr=a("div"),F(J9.$$.fragment),Ywr=l(),Mc=a("p"),Kwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),tY=a("a"),Zwr=o("from_pretrained()"),eAr=o(" class method or the "),aY=a("a"),oAr=o("from_config()"),rAr=o(` class
method.`),tAr=l(),Y9=a("p"),aAr=o("This class cannot be instantiated directly using "),eMe=a("code"),nAr=o("__init__()"),sAr=o(" (throws an error)."),lAr=l(),Nt=a("div"),F(K9.$$.fragment),iAr=l(),oMe=a("p"),dAr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),cAr=l(),Ec=a("p"),fAr=o(`Note:
Loading a model from its configuration file does `),rMe=a("strong"),mAr=o("not"),gAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nY=a("a"),hAr=o("from_pretrained()"),pAr=o(" to load the model weights."),_Ar=l(),F(Q4.$$.fragment),uAr=l(),Pr=a("div"),F(Z9.$$.fragment),bAr=l(),tMe=a("p"),vAr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),FAr=l(),mn=a("p"),TAr=o("The model class to instantiate is selected based on the "),aMe=a("code"),MAr=o("model_type"),EAr=o(` property of the config object (either
passed as an argument or loaded from `),nMe=a("code"),CAr=o("pretrained_model_name_or_path"),wAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sMe=a("code"),AAr=o("pretrained_model_name_or_path"),LAr=o(":"),yAr=l(),_e=a("ul"),W4=a("li"),lMe=a("strong"),xAr=o("albert"),$Ar=o(" \u2014 "),sY=a("a"),kAr=o("TFAlbertForMultipleChoice"),SAr=o(" (ALBERT model)"),RAr=l(),H4=a("li"),iMe=a("strong"),PAr=o("bert"),BAr=o(" \u2014 "),lY=a("a"),IAr=o("TFBertForMultipleChoice"),NAr=o(" (BERT model)"),qAr=l(),U4=a("li"),dMe=a("strong"),jAr=o("camembert"),DAr=o(" \u2014 "),iY=a("a"),GAr=o("TFCamembertForMultipleChoice"),OAr=o(" (CamemBERT model)"),VAr=l(),J4=a("li"),cMe=a("strong"),XAr=o("convbert"),zAr=o(" \u2014 "),dY=a("a"),QAr=o("TFConvBertForMultipleChoice"),WAr=o(" (ConvBERT model)"),HAr=l(),Y4=a("li"),fMe=a("strong"),UAr=o("distilbert"),JAr=o(" \u2014 "),cY=a("a"),YAr=o("TFDistilBertForMultipleChoice"),KAr=o(" (DistilBERT model)"),ZAr=l(),K4=a("li"),mMe=a("strong"),e6r=o("electra"),o6r=o(" \u2014 "),fY=a("a"),r6r=o("TFElectraForMultipleChoice"),t6r=o(" (ELECTRA model)"),a6r=l(),Z4=a("li"),gMe=a("strong"),n6r=o("flaubert"),s6r=o(" \u2014 "),mY=a("a"),l6r=o("TFFlaubertForMultipleChoice"),i6r=o(" (FlauBERT model)"),d6r=l(),eC=a("li"),hMe=a("strong"),c6r=o("funnel"),f6r=o(" \u2014 "),gY=a("a"),m6r=o("TFFunnelForMultipleChoice"),g6r=o(" (Funnel Transformer model)"),h6r=l(),oC=a("li"),pMe=a("strong"),p6r=o("longformer"),_6r=o(" \u2014 "),hY=a("a"),u6r=o("TFLongformerForMultipleChoice"),b6r=o(" (Longformer model)"),v6r=l(),rC=a("li"),_Me=a("strong"),F6r=o("mobilebert"),T6r=o(" \u2014 "),pY=a("a"),M6r=o("TFMobileBertForMultipleChoice"),E6r=o(" (MobileBERT model)"),C6r=l(),tC=a("li"),uMe=a("strong"),w6r=o("mpnet"),A6r=o(" \u2014 "),_Y=a("a"),L6r=o("TFMPNetForMultipleChoice"),y6r=o(" (MPNet model)"),x6r=l(),aC=a("li"),bMe=a("strong"),$6r=o("rembert"),k6r=o(" \u2014 "),uY=a("a"),S6r=o("TFRemBertForMultipleChoice"),R6r=o(" (RemBERT model)"),P6r=l(),nC=a("li"),vMe=a("strong"),B6r=o("roberta"),I6r=o(" \u2014 "),bY=a("a"),N6r=o("TFRobertaForMultipleChoice"),q6r=o(" (RoBERTa model)"),j6r=l(),sC=a("li"),FMe=a("strong"),D6r=o("roformer"),G6r=o(" \u2014 "),vY=a("a"),O6r=o("TFRoFormerForMultipleChoice"),V6r=o(" (RoFormer model)"),X6r=l(),lC=a("li"),TMe=a("strong"),z6r=o("xlm"),Q6r=o(" \u2014 "),FY=a("a"),W6r=o("TFXLMForMultipleChoice"),H6r=o(" (XLM model)"),U6r=l(),iC=a("li"),MMe=a("strong"),J6r=o("xlm-roberta"),Y6r=o(" \u2014 "),TY=a("a"),K6r=o("TFXLMRobertaForMultipleChoice"),Z6r=o(" (XLM-RoBERTa model)"),eLr=l(),dC=a("li"),EMe=a("strong"),oLr=o("xlnet"),rLr=o(" \u2014 "),MY=a("a"),tLr=o("TFXLNetForMultipleChoice"),aLr=o(" (XLNet model)"),nLr=l(),F(cC.$$.fragment),aVe=l(),Cc=a("h2"),fC=a("a"),CMe=a("span"),F(ex.$$.fragment),sLr=l(),wMe=a("span"),lLr=o("TFAutoModelForNextSentencePrediction"),nVe=l(),lr=a("div"),F(ox.$$.fragment),iLr=l(),wc=a("p"),dLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),EY=a("a"),cLr=o("from_pretrained()"),fLr=o(" class method or the "),CY=a("a"),mLr=o("from_config()"),gLr=o(` class
method.`),hLr=l(),rx=a("p"),pLr=o("This class cannot be instantiated directly using "),AMe=a("code"),_Lr=o("__init__()"),uLr=o(" (throws an error)."),bLr=l(),qt=a("div"),F(tx.$$.fragment),vLr=l(),LMe=a("p"),FLr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),TLr=l(),Ac=a("p"),MLr=o(`Note:
Loading a model from its configuration file does `),yMe=a("strong"),ELr=o("not"),CLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wY=a("a"),wLr=o("from_pretrained()"),ALr=o(" to load the model weights."),LLr=l(),F(mC.$$.fragment),yLr=l(),Br=a("div"),F(ax.$$.fragment),xLr=l(),xMe=a("p"),$Lr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),kLr=l(),gn=a("p"),SLr=o("The model class to instantiate is selected based on the "),$Me=a("code"),RLr=o("model_type"),PLr=o(` property of the config object (either
passed as an argument or loaded from `),kMe=a("code"),BLr=o("pretrained_model_name_or_path"),ILr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SMe=a("code"),NLr=o("pretrained_model_name_or_path"),qLr=o(":"),jLr=l(),nx=a("ul"),gC=a("li"),RMe=a("strong"),DLr=o("bert"),GLr=o(" \u2014 "),AY=a("a"),OLr=o("TFBertForNextSentencePrediction"),VLr=o(" (BERT model)"),XLr=l(),hC=a("li"),PMe=a("strong"),zLr=o("mobilebert"),QLr=o(" \u2014 "),LY=a("a"),WLr=o("TFMobileBertForNextSentencePrediction"),HLr=o(" (MobileBERT model)"),ULr=l(),F(pC.$$.fragment),sVe=l(),Lc=a("h2"),_C=a("a"),BMe=a("span"),F(sx.$$.fragment),JLr=l(),IMe=a("span"),YLr=o("TFAutoModelForTableQuestionAnswering"),lVe=l(),ir=a("div"),F(lx.$$.fragment),KLr=l(),yc=a("p"),ZLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),yY=a("a"),eyr=o("from_pretrained()"),oyr=o(" class method or the "),xY=a("a"),ryr=o("from_config()"),tyr=o(` class
method.`),ayr=l(),ix=a("p"),nyr=o("This class cannot be instantiated directly using "),NMe=a("code"),syr=o("__init__()"),lyr=o(" (throws an error)."),iyr=l(),jt=a("div"),F(dx.$$.fragment),dyr=l(),qMe=a("p"),cyr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),fyr=l(),xc=a("p"),myr=o(`Note:
Loading a model from its configuration file does `),jMe=a("strong"),gyr=o("not"),hyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$Y=a("a"),pyr=o("from_pretrained()"),_yr=o(" to load the model weights."),uyr=l(),F(uC.$$.fragment),byr=l(),Ir=a("div"),F(cx.$$.fragment),vyr=l(),DMe=a("p"),Fyr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Tyr=l(),hn=a("p"),Myr=o("The model class to instantiate is selected based on the "),GMe=a("code"),Eyr=o("model_type"),Cyr=o(` property of the config object (either
passed as an argument or loaded from `),OMe=a("code"),wyr=o("pretrained_model_name_or_path"),Ayr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VMe=a("code"),Lyr=o("pretrained_model_name_or_path"),yyr=o(":"),xyr=l(),XMe=a("ul"),bC=a("li"),zMe=a("strong"),$yr=o("tapas"),kyr=o(" \u2014 "),kY=a("a"),Syr=o("TFTapasForQuestionAnswering"),Ryr=o(" (TAPAS model)"),Pyr=l(),F(vC.$$.fragment),iVe=l(),$c=a("h2"),FC=a("a"),QMe=a("span"),F(fx.$$.fragment),Byr=l(),WMe=a("span"),Iyr=o("TFAutoModelForTokenClassification"),dVe=l(),dr=a("div"),F(mx.$$.fragment),Nyr=l(),kc=a("p"),qyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),SY=a("a"),jyr=o("from_pretrained()"),Dyr=o(" class method or the "),RY=a("a"),Gyr=o("from_config()"),Oyr=o(` class
method.`),Vyr=l(),gx=a("p"),Xyr=o("This class cannot be instantiated directly using "),HMe=a("code"),zyr=o("__init__()"),Qyr=o(" (throws an error)."),Wyr=l(),Dt=a("div"),F(hx.$$.fragment),Hyr=l(),UMe=a("p"),Uyr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Jyr=l(),Sc=a("p"),Yyr=o(`Note:
Loading a model from its configuration file does `),JMe=a("strong"),Kyr=o("not"),Zyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PY=a("a"),e9r=o("from_pretrained()"),o9r=o(" to load the model weights."),r9r=l(),F(TC.$$.fragment),t9r=l(),Nr=a("div"),F(px.$$.fragment),a9r=l(),YMe=a("p"),n9r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),s9r=l(),pn=a("p"),l9r=o("The model class to instantiate is selected based on the "),KMe=a("code"),i9r=o("model_type"),d9r=o(` property of the config object (either
passed as an argument or loaded from `),ZMe=a("code"),c9r=o("pretrained_model_name_or_path"),f9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eEe=a("code"),m9r=o("pretrained_model_name_or_path"),g9r=o(":"),h9r=l(),de=a("ul"),MC=a("li"),oEe=a("strong"),p9r=o("albert"),_9r=o(" \u2014 "),BY=a("a"),u9r=o("TFAlbertForTokenClassification"),b9r=o(" (ALBERT model)"),v9r=l(),EC=a("li"),rEe=a("strong"),F9r=o("bert"),T9r=o(" \u2014 "),IY=a("a"),M9r=o("TFBertForTokenClassification"),E9r=o(" (BERT model)"),C9r=l(),CC=a("li"),tEe=a("strong"),w9r=o("camembert"),A9r=o(" \u2014 "),NY=a("a"),L9r=o("TFCamembertForTokenClassification"),y9r=o(" (CamemBERT model)"),x9r=l(),wC=a("li"),aEe=a("strong"),$9r=o("convbert"),k9r=o(" \u2014 "),qY=a("a"),S9r=o("TFConvBertForTokenClassification"),R9r=o(" (ConvBERT model)"),P9r=l(),AC=a("li"),nEe=a("strong"),B9r=o("deberta"),I9r=o(" \u2014 "),jY=a("a"),N9r=o("TFDebertaForTokenClassification"),q9r=o(" (DeBERTa model)"),j9r=l(),LC=a("li"),sEe=a("strong"),D9r=o("deberta-v2"),G9r=o(" \u2014 "),DY=a("a"),O9r=o("TFDebertaV2ForTokenClassification"),V9r=o(" (DeBERTa-v2 model)"),X9r=l(),yC=a("li"),lEe=a("strong"),z9r=o("distilbert"),Q9r=o(" \u2014 "),GY=a("a"),W9r=o("TFDistilBertForTokenClassification"),H9r=o(" (DistilBERT model)"),U9r=l(),xC=a("li"),iEe=a("strong"),J9r=o("electra"),Y9r=o(" \u2014 "),OY=a("a"),K9r=o("TFElectraForTokenClassification"),Z9r=o(" (ELECTRA model)"),exr=l(),$C=a("li"),dEe=a("strong"),oxr=o("flaubert"),rxr=o(" \u2014 "),VY=a("a"),txr=o("TFFlaubertForTokenClassification"),axr=o(" (FlauBERT model)"),nxr=l(),kC=a("li"),cEe=a("strong"),sxr=o("funnel"),lxr=o(" \u2014 "),XY=a("a"),ixr=o("TFFunnelForTokenClassification"),dxr=o(" (Funnel Transformer model)"),cxr=l(),SC=a("li"),fEe=a("strong"),fxr=o("layoutlm"),mxr=o(" \u2014 "),zY=a("a"),gxr=o("TFLayoutLMForTokenClassification"),hxr=o(" (LayoutLM model)"),pxr=l(),RC=a("li"),mEe=a("strong"),_xr=o("longformer"),uxr=o(" \u2014 "),QY=a("a"),bxr=o("TFLongformerForTokenClassification"),vxr=o(" (Longformer model)"),Fxr=l(),PC=a("li"),gEe=a("strong"),Txr=o("mobilebert"),Mxr=o(" \u2014 "),WY=a("a"),Exr=o("TFMobileBertForTokenClassification"),Cxr=o(" (MobileBERT model)"),wxr=l(),BC=a("li"),hEe=a("strong"),Axr=o("mpnet"),Lxr=o(" \u2014 "),HY=a("a"),yxr=o("TFMPNetForTokenClassification"),xxr=o(" (MPNet model)"),$xr=l(),IC=a("li"),pEe=a("strong"),kxr=o("rembert"),Sxr=o(" \u2014 "),UY=a("a"),Rxr=o("TFRemBertForTokenClassification"),Pxr=o(" (RemBERT model)"),Bxr=l(),NC=a("li"),_Ee=a("strong"),Ixr=o("roberta"),Nxr=o(" \u2014 "),JY=a("a"),qxr=o("TFRobertaForTokenClassification"),jxr=o(" (RoBERTa model)"),Dxr=l(),qC=a("li"),uEe=a("strong"),Gxr=o("roformer"),Oxr=o(" \u2014 "),YY=a("a"),Vxr=o("TFRoFormerForTokenClassification"),Xxr=o(" (RoFormer model)"),zxr=l(),jC=a("li"),bEe=a("strong"),Qxr=o("xlm"),Wxr=o(" \u2014 "),KY=a("a"),Hxr=o("TFXLMForTokenClassification"),Uxr=o(" (XLM model)"),Jxr=l(),DC=a("li"),vEe=a("strong"),Yxr=o("xlm-roberta"),Kxr=o(" \u2014 "),ZY=a("a"),Zxr=o("TFXLMRobertaForTokenClassification"),e$r=o(" (XLM-RoBERTa model)"),o$r=l(),GC=a("li"),FEe=a("strong"),r$r=o("xlnet"),t$r=o(" \u2014 "),eK=a("a"),a$r=o("TFXLNetForTokenClassification"),n$r=o(" (XLNet model)"),s$r=l(),F(OC.$$.fragment),cVe=l(),Rc=a("h2"),VC=a("a"),TEe=a("span"),F(_x.$$.fragment),l$r=l(),MEe=a("span"),i$r=o("TFAutoModelForQuestionAnswering"),fVe=l(),cr=a("div"),F(ux.$$.fragment),d$r=l(),Pc=a("p"),c$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),oK=a("a"),f$r=o("from_pretrained()"),m$r=o(" class method or the "),rK=a("a"),g$r=o("from_config()"),h$r=o(` class
method.`),p$r=l(),bx=a("p"),_$r=o("This class cannot be instantiated directly using "),EEe=a("code"),u$r=o("__init__()"),b$r=o(" (throws an error)."),v$r=l(),Gt=a("div"),F(vx.$$.fragment),F$r=l(),CEe=a("p"),T$r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),M$r=l(),Bc=a("p"),E$r=o(`Note:
Loading a model from its configuration file does `),wEe=a("strong"),C$r=o("not"),w$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tK=a("a"),A$r=o("from_pretrained()"),L$r=o(" to load the model weights."),y$r=l(),F(XC.$$.fragment),x$r=l(),qr=a("div"),F(Fx.$$.fragment),$$r=l(),AEe=a("p"),k$r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),S$r=l(),_n=a("p"),R$r=o("The model class to instantiate is selected based on the "),LEe=a("code"),P$r=o("model_type"),B$r=o(` property of the config object (either
passed as an argument or loaded from `),yEe=a("code"),I$r=o("pretrained_model_name_or_path"),N$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xEe=a("code"),q$r=o("pretrained_model_name_or_path"),j$r=o(":"),D$r=l(),ce=a("ul"),zC=a("li"),$Ee=a("strong"),G$r=o("albert"),O$r=o(" \u2014 "),aK=a("a"),V$r=o("TFAlbertForQuestionAnswering"),X$r=o(" (ALBERT model)"),z$r=l(),QC=a("li"),kEe=a("strong"),Q$r=o("bert"),W$r=o(" \u2014 "),nK=a("a"),H$r=o("TFBertForQuestionAnswering"),U$r=o(" (BERT model)"),J$r=l(),WC=a("li"),SEe=a("strong"),Y$r=o("camembert"),K$r=o(" \u2014 "),sK=a("a"),Z$r=o("TFCamembertForQuestionAnswering"),ekr=o(" (CamemBERT model)"),okr=l(),HC=a("li"),REe=a("strong"),rkr=o("convbert"),tkr=o(" \u2014 "),lK=a("a"),akr=o("TFConvBertForQuestionAnswering"),nkr=o(" (ConvBERT model)"),skr=l(),UC=a("li"),PEe=a("strong"),lkr=o("deberta"),ikr=o(" \u2014 "),iK=a("a"),dkr=o("TFDebertaForQuestionAnswering"),ckr=o(" (DeBERTa model)"),fkr=l(),JC=a("li"),BEe=a("strong"),mkr=o("deberta-v2"),gkr=o(" \u2014 "),dK=a("a"),hkr=o("TFDebertaV2ForQuestionAnswering"),pkr=o(" (DeBERTa-v2 model)"),_kr=l(),YC=a("li"),IEe=a("strong"),ukr=o("distilbert"),bkr=o(" \u2014 "),cK=a("a"),vkr=o("TFDistilBertForQuestionAnswering"),Fkr=o(" (DistilBERT model)"),Tkr=l(),KC=a("li"),NEe=a("strong"),Mkr=o("electra"),Ekr=o(" \u2014 "),fK=a("a"),Ckr=o("TFElectraForQuestionAnswering"),wkr=o(" (ELECTRA model)"),Akr=l(),ZC=a("li"),qEe=a("strong"),Lkr=o("flaubert"),ykr=o(" \u2014 "),mK=a("a"),xkr=o("TFFlaubertForQuestionAnsweringSimple"),$kr=o(" (FlauBERT model)"),kkr=l(),e5=a("li"),jEe=a("strong"),Skr=o("funnel"),Rkr=o(" \u2014 "),gK=a("a"),Pkr=o("TFFunnelForQuestionAnswering"),Bkr=o(" (Funnel Transformer model)"),Ikr=l(),o5=a("li"),DEe=a("strong"),Nkr=o("gptj"),qkr=o(" \u2014 "),hK=a("a"),jkr=o("TFGPTJForQuestionAnswering"),Dkr=o(" (GPT-J model)"),Gkr=l(),r5=a("li"),GEe=a("strong"),Okr=o("longformer"),Vkr=o(" \u2014 "),pK=a("a"),Xkr=o("TFLongformerForQuestionAnswering"),zkr=o(" (Longformer model)"),Qkr=l(),t5=a("li"),OEe=a("strong"),Wkr=o("mobilebert"),Hkr=o(" \u2014 "),_K=a("a"),Ukr=o("TFMobileBertForQuestionAnswering"),Jkr=o(" (MobileBERT model)"),Ykr=l(),a5=a("li"),VEe=a("strong"),Kkr=o("mpnet"),Zkr=o(" \u2014 "),uK=a("a"),eSr=o("TFMPNetForQuestionAnswering"),oSr=o(" (MPNet model)"),rSr=l(),n5=a("li"),XEe=a("strong"),tSr=o("rembert"),aSr=o(" \u2014 "),bK=a("a"),nSr=o("TFRemBertForQuestionAnswering"),sSr=o(" (RemBERT model)"),lSr=l(),s5=a("li"),zEe=a("strong"),iSr=o("roberta"),dSr=o(" \u2014 "),vK=a("a"),cSr=o("TFRobertaForQuestionAnswering"),fSr=o(" (RoBERTa model)"),mSr=l(),l5=a("li"),QEe=a("strong"),gSr=o("roformer"),hSr=o(" \u2014 "),FK=a("a"),pSr=o("TFRoFormerForQuestionAnswering"),_Sr=o(" (RoFormer model)"),uSr=l(),i5=a("li"),WEe=a("strong"),bSr=o("xlm"),vSr=o(" \u2014 "),TK=a("a"),FSr=o("TFXLMForQuestionAnsweringSimple"),TSr=o(" (XLM model)"),MSr=l(),d5=a("li"),HEe=a("strong"),ESr=o("xlm-roberta"),CSr=o(" \u2014 "),MK=a("a"),wSr=o("TFXLMRobertaForQuestionAnswering"),ASr=o(" (XLM-RoBERTa model)"),LSr=l(),c5=a("li"),UEe=a("strong"),ySr=o("xlnet"),xSr=o(" \u2014 "),EK=a("a"),$Sr=o("TFXLNetForQuestionAnsweringSimple"),kSr=o(" (XLNet model)"),SSr=l(),F(f5.$$.fragment),mVe=l(),Ic=a("h2"),m5=a("a"),JEe=a("span"),F(Tx.$$.fragment),RSr=l(),YEe=a("span"),PSr=o("TFAutoModelForVision2Seq"),gVe=l(),fr=a("div"),F(Mx.$$.fragment),BSr=l(),Nc=a("p"),ISr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),CK=a("a"),NSr=o("from_pretrained()"),qSr=o(" class method or the "),wK=a("a"),jSr=o("from_config()"),DSr=o(` class
method.`),GSr=l(),Ex=a("p"),OSr=o("This class cannot be instantiated directly using "),KEe=a("code"),VSr=o("__init__()"),XSr=o(" (throws an error)."),zSr=l(),Ot=a("div"),F(Cx.$$.fragment),QSr=l(),ZEe=a("p"),WSr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),HSr=l(),qc=a("p"),USr=o(`Note:
Loading a model from its configuration file does `),e4e=a("strong"),JSr=o("not"),YSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AK=a("a"),KSr=o("from_pretrained()"),ZSr=o(" to load the model weights."),eRr=l(),F(g5.$$.fragment),oRr=l(),jr=a("div"),F(wx.$$.fragment),rRr=l(),o4e=a("p"),tRr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),aRr=l(),un=a("p"),nRr=o("The model class to instantiate is selected based on the "),r4e=a("code"),sRr=o("model_type"),lRr=o(` property of the config object (either
passed as an argument or loaded from `),t4e=a("code"),iRr=o("pretrained_model_name_or_path"),dRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a4e=a("code"),cRr=o("pretrained_model_name_or_path"),fRr=o(":"),mRr=l(),n4e=a("ul"),h5=a("li"),s4e=a("strong"),gRr=o("vision-encoder-decoder"),hRr=o(" \u2014 "),LK=a("a"),pRr=o("TFVisionEncoderDecoderModel"),_Rr=o(" (Vision Encoder decoder model)"),uRr=l(),F(p5.$$.fragment),hVe=l(),jc=a("h2"),_5=a("a"),l4e=a("span"),F(Ax.$$.fragment),bRr=l(),i4e=a("span"),vRr=o("TFAutoModelForSpeechSeq2Seq"),pVe=l(),mr=a("div"),F(Lx.$$.fragment),FRr=l(),Dc=a("p"),TRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),yK=a("a"),MRr=o("from_pretrained()"),ERr=o(" class method or the "),xK=a("a"),CRr=o("from_config()"),wRr=o(` class
method.`),ARr=l(),yx=a("p"),LRr=o("This class cannot be instantiated directly using "),d4e=a("code"),yRr=o("__init__()"),xRr=o(" (throws an error)."),$Rr=l(),Vt=a("div"),F(xx.$$.fragment),kRr=l(),c4e=a("p"),SRr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),RRr=l(),Gc=a("p"),PRr=o(`Note:
Loading a model from its configuration file does `),f4e=a("strong"),BRr=o("not"),IRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$K=a("a"),NRr=o("from_pretrained()"),qRr=o(" to load the model weights."),jRr=l(),F(u5.$$.fragment),DRr=l(),Dr=a("div"),F($x.$$.fragment),GRr=l(),m4e=a("p"),ORr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),VRr=l(),bn=a("p"),XRr=o("The model class to instantiate is selected based on the "),g4e=a("code"),zRr=o("model_type"),QRr=o(` property of the config object (either
passed as an argument or loaded from `),h4e=a("code"),WRr=o("pretrained_model_name_or_path"),HRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p4e=a("code"),URr=o("pretrained_model_name_or_path"),JRr=o(":"),YRr=l(),_4e=a("ul"),b5=a("li"),u4e=a("strong"),KRr=o("speech_to_text"),ZRr=o(" \u2014 "),kK=a("a"),ePr=o("TFSpeech2TextForConditionalGeneration"),oPr=o(" (Speech2Text model)"),rPr=l(),F(v5.$$.fragment),_Ve=l(),Oc=a("h2"),F5=a("a"),b4e=a("span"),F(kx.$$.fragment),tPr=l(),v4e=a("span"),aPr=o("FlaxAutoModel"),uVe=l(),gr=a("div"),F(Sx.$$.fragment),nPr=l(),Vc=a("p"),sPr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),SK=a("a"),lPr=o("from_pretrained()"),iPr=o(" class method or the "),RK=a("a"),dPr=o("from_config()"),cPr=o(` class
method.`),fPr=l(),Rx=a("p"),mPr=o("This class cannot be instantiated directly using "),F4e=a("code"),gPr=o("__init__()"),hPr=o(" (throws an error)."),pPr=l(),Xt=a("div"),F(Px.$$.fragment),_Pr=l(),T4e=a("p"),uPr=o("Instantiates one of the base model classes of the library from a configuration."),bPr=l(),Xc=a("p"),vPr=o(`Note:
Loading a model from its configuration file does `),M4e=a("strong"),FPr=o("not"),TPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PK=a("a"),MPr=o("from_pretrained()"),EPr=o(" to load the model weights."),CPr=l(),F(T5.$$.fragment),wPr=l(),Gr=a("div"),F(Bx.$$.fragment),APr=l(),E4e=a("p"),LPr=o("Instantiate one of the base model classes of the library from a pretrained model."),yPr=l(),vn=a("p"),xPr=o("The model class to instantiate is selected based on the "),C4e=a("code"),$Pr=o("model_type"),kPr=o(` property of the config object (either
passed as an argument or loaded from `),w4e=a("code"),SPr=o("pretrained_model_name_or_path"),RPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A4e=a("code"),PPr=o("pretrained_model_name_or_path"),BPr=o(":"),IPr=l(),oe=a("ul"),M5=a("li"),L4e=a("strong"),NPr=o("albert"),qPr=o(" \u2014 "),BK=a("a"),jPr=o("FlaxAlbertModel"),DPr=o(" (ALBERT model)"),GPr=l(),E5=a("li"),y4e=a("strong"),OPr=o("bart"),VPr=o(" \u2014 "),IK=a("a"),XPr=o("FlaxBartModel"),zPr=o(" (BART model)"),QPr=l(),C5=a("li"),x4e=a("strong"),WPr=o("beit"),HPr=o(" \u2014 "),NK=a("a"),UPr=o("FlaxBeitModel"),JPr=o(" (BEiT model)"),YPr=l(),w5=a("li"),$4e=a("strong"),KPr=o("bert"),ZPr=o(" \u2014 "),qK=a("a"),eBr=o("FlaxBertModel"),oBr=o(" (BERT model)"),rBr=l(),A5=a("li"),k4e=a("strong"),tBr=o("big_bird"),aBr=o(" \u2014 "),jK=a("a"),nBr=o("FlaxBigBirdModel"),sBr=o(" (BigBird model)"),lBr=l(),L5=a("li"),S4e=a("strong"),iBr=o("blenderbot"),dBr=o(" \u2014 "),DK=a("a"),cBr=o("FlaxBlenderbotModel"),fBr=o(" (Blenderbot model)"),mBr=l(),y5=a("li"),R4e=a("strong"),gBr=o("blenderbot-small"),hBr=o(" \u2014 "),GK=a("a"),pBr=o("FlaxBlenderbotSmallModel"),_Br=o(" (BlenderbotSmall model)"),uBr=l(),x5=a("li"),P4e=a("strong"),bBr=o("clip"),vBr=o(" \u2014 "),OK=a("a"),FBr=o("FlaxCLIPModel"),TBr=o(" (CLIP model)"),MBr=l(),$5=a("li"),B4e=a("strong"),EBr=o("distilbert"),CBr=o(" \u2014 "),VK=a("a"),wBr=o("FlaxDistilBertModel"),ABr=o(" (DistilBERT model)"),LBr=l(),k5=a("li"),I4e=a("strong"),yBr=o("electra"),xBr=o(" \u2014 "),XK=a("a"),$Br=o("FlaxElectraModel"),kBr=o(" (ELECTRA model)"),SBr=l(),S5=a("li"),N4e=a("strong"),RBr=o("gpt2"),PBr=o(" \u2014 "),zK=a("a"),BBr=o("FlaxGPT2Model"),IBr=o(" (OpenAI GPT-2 model)"),NBr=l(),R5=a("li"),q4e=a("strong"),qBr=o("gpt_neo"),jBr=o(" \u2014 "),QK=a("a"),DBr=o("FlaxGPTNeoModel"),GBr=o(" (GPT Neo model)"),OBr=l(),P5=a("li"),j4e=a("strong"),VBr=o("gptj"),XBr=o(" \u2014 "),WK=a("a"),zBr=o("FlaxGPTJModel"),QBr=o(" (GPT-J model)"),WBr=l(),B5=a("li"),D4e=a("strong"),HBr=o("longt5"),UBr=o(" \u2014 "),HK=a("a"),JBr=o("FlaxLongT5Model"),YBr=o(" (LongT5 model)"),KBr=l(),I5=a("li"),G4e=a("strong"),ZBr=o("marian"),eIr=o(" \u2014 "),UK=a("a"),oIr=o("FlaxMarianModel"),rIr=o(" (Marian model)"),tIr=l(),N5=a("li"),O4e=a("strong"),aIr=o("mbart"),nIr=o(" \u2014 "),JK=a("a"),sIr=o("FlaxMBartModel"),lIr=o(" (mBART model)"),iIr=l(),q5=a("li"),V4e=a("strong"),dIr=o("mt5"),cIr=o(" \u2014 "),YK=a("a"),fIr=o("FlaxMT5Model"),mIr=o(" (MT5 model)"),gIr=l(),j5=a("li"),X4e=a("strong"),hIr=o("opt"),pIr=o(" \u2014 "),KK=a("a"),_Ir=o("FlaxOPTModel"),uIr=o(" (OPT model)"),bIr=l(),D5=a("li"),z4e=a("strong"),vIr=o("pegasus"),FIr=o(" \u2014 "),ZK=a("a"),TIr=o("FlaxPegasusModel"),MIr=o(" (Pegasus model)"),EIr=l(),G5=a("li"),Q4e=a("strong"),CIr=o("roberta"),wIr=o(" \u2014 "),eZ=a("a"),AIr=o("FlaxRobertaModel"),LIr=o(" (RoBERTa model)"),yIr=l(),O5=a("li"),W4e=a("strong"),xIr=o("roformer"),$Ir=o(" \u2014 "),oZ=a("a"),kIr=o("FlaxRoFormerModel"),SIr=o(" (RoFormer model)"),RIr=l(),V5=a("li"),H4e=a("strong"),PIr=o("t5"),BIr=o(" \u2014 "),rZ=a("a"),IIr=o("FlaxT5Model"),NIr=o(" (T5 model)"),qIr=l(),X5=a("li"),U4e=a("strong"),jIr=o("vision-text-dual-encoder"),DIr=o(" \u2014 "),tZ=a("a"),GIr=o("FlaxVisionTextDualEncoderModel"),OIr=o(" (VisionTextDualEncoder model)"),VIr=l(),z5=a("li"),J4e=a("strong"),XIr=o("vit"),zIr=o(" \u2014 "),aZ=a("a"),QIr=o("FlaxViTModel"),WIr=o(" (ViT model)"),HIr=l(),Q5=a("li"),Y4e=a("strong"),UIr=o("wav2vec2"),JIr=o(" \u2014 "),nZ=a("a"),YIr=o("FlaxWav2Vec2Model"),KIr=o(" (Wav2Vec2 model)"),ZIr=l(),W5=a("li"),K4e=a("strong"),eNr=o("xglm"),oNr=o(" \u2014 "),sZ=a("a"),rNr=o("FlaxXGLMModel"),tNr=o(" (XGLM model)"),aNr=l(),H5=a("li"),Z4e=a("strong"),nNr=o("xlm-roberta"),sNr=o(" \u2014 "),lZ=a("a"),lNr=o("FlaxXLMRobertaModel"),iNr=o(" (XLM-RoBERTa model)"),dNr=l(),F(U5.$$.fragment),bVe=l(),zc=a("h2"),J5=a("a"),eCe=a("span"),F(Ix.$$.fragment),cNr=l(),oCe=a("span"),fNr=o("FlaxAutoModelForCausalLM"),vVe=l(),hr=a("div"),F(Nx.$$.fragment),mNr=l(),Qc=a("p"),gNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),iZ=a("a"),hNr=o("from_pretrained()"),pNr=o(" class method or the "),dZ=a("a"),_Nr=o("from_config()"),uNr=o(` class
method.`),bNr=l(),qx=a("p"),vNr=o("This class cannot be instantiated directly using "),rCe=a("code"),FNr=o("__init__()"),TNr=o(" (throws an error)."),MNr=l(),zt=a("div"),F(jx.$$.fragment),ENr=l(),tCe=a("p"),CNr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),wNr=l(),Wc=a("p"),ANr=o(`Note:
Loading a model from its configuration file does `),aCe=a("strong"),LNr=o("not"),yNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cZ=a("a"),xNr=o("from_pretrained()"),$Nr=o(" to load the model weights."),kNr=l(),F(Y5.$$.fragment),SNr=l(),Or=a("div"),F(Dx.$$.fragment),RNr=l(),nCe=a("p"),PNr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),BNr=l(),Fn=a("p"),INr=o("The model class to instantiate is selected based on the "),sCe=a("code"),NNr=o("model_type"),qNr=o(` property of the config object (either
passed as an argument or loaded from `),lCe=a("code"),jNr=o("pretrained_model_name_or_path"),DNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iCe=a("code"),GNr=o("pretrained_model_name_or_path"),ONr=o(":"),VNr=l(),xe=a("ul"),K5=a("li"),dCe=a("strong"),XNr=o("bart"),zNr=o(" \u2014 "),fZ=a("a"),QNr=o("FlaxBartForCausalLM"),WNr=o(" (BART model)"),HNr=l(),Z5=a("li"),cCe=a("strong"),UNr=o("bert"),JNr=o(" \u2014 "),mZ=a("a"),YNr=o("FlaxBertForCausalLM"),KNr=o(" (BERT model)"),ZNr=l(),e3=a("li"),fCe=a("strong"),eqr=o("big_bird"),oqr=o(" \u2014 "),gZ=a("a"),rqr=o("FlaxBigBirdForCausalLM"),tqr=o(" (BigBird model)"),aqr=l(),o3=a("li"),mCe=a("strong"),nqr=o("electra"),sqr=o(" \u2014 "),hZ=a("a"),lqr=o("FlaxElectraForCausalLM"),iqr=o(" (ELECTRA model)"),dqr=l(),r3=a("li"),gCe=a("strong"),cqr=o("gpt2"),fqr=o(" \u2014 "),pZ=a("a"),mqr=o("FlaxGPT2LMHeadModel"),gqr=o(" (OpenAI GPT-2 model)"),hqr=l(),t3=a("li"),hCe=a("strong"),pqr=o("gpt_neo"),_qr=o(" \u2014 "),_Z=a("a"),uqr=o("FlaxGPTNeoForCausalLM"),bqr=o(" (GPT Neo model)"),vqr=l(),a3=a("li"),pCe=a("strong"),Fqr=o("gptj"),Tqr=o(" \u2014 "),uZ=a("a"),Mqr=o("FlaxGPTJForCausalLM"),Eqr=o(" (GPT-J model)"),Cqr=l(),n3=a("li"),_Ce=a("strong"),wqr=o("opt"),Aqr=o(" \u2014 "),bZ=a("a"),Lqr=o("FlaxOPTForCausalLM"),yqr=o(" (OPT model)"),xqr=l(),s3=a("li"),uCe=a("strong"),$qr=o("roberta"),kqr=o(" \u2014 "),vZ=a("a"),Sqr=o("FlaxRobertaForCausalLM"),Rqr=o(" (RoBERTa model)"),Pqr=l(),l3=a("li"),bCe=a("strong"),Bqr=o("xglm"),Iqr=o(" \u2014 "),FZ=a("a"),Nqr=o("FlaxXGLMForCausalLM"),qqr=o(" (XGLM model)"),jqr=l(),F(i3.$$.fragment),FVe=l(),Hc=a("h2"),d3=a("a"),vCe=a("span"),F(Gx.$$.fragment),Dqr=l(),FCe=a("span"),Gqr=o("FlaxAutoModelForPreTraining"),TVe=l(),pr=a("div"),F(Ox.$$.fragment),Oqr=l(),Uc=a("p"),Vqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),TZ=a("a"),Xqr=o("from_pretrained()"),zqr=o(" class method or the "),MZ=a("a"),Qqr=o("from_config()"),Wqr=o(` class
method.`),Hqr=l(),Vx=a("p"),Uqr=o("This class cannot be instantiated directly using "),TCe=a("code"),Jqr=o("__init__()"),Yqr=o(" (throws an error)."),Kqr=l(),Qt=a("div"),F(Xx.$$.fragment),Zqr=l(),MCe=a("p"),ejr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),ojr=l(),Jc=a("p"),rjr=o(`Note:
Loading a model from its configuration file does `),ECe=a("strong"),tjr=o("not"),ajr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EZ=a("a"),njr=o("from_pretrained()"),sjr=o(" to load the model weights."),ljr=l(),F(c3.$$.fragment),ijr=l(),Vr=a("div"),F(zx.$$.fragment),djr=l(),CCe=a("p"),cjr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),fjr=l(),Tn=a("p"),mjr=o("The model class to instantiate is selected based on the "),wCe=a("code"),gjr=o("model_type"),hjr=o(` property of the config object (either
passed as an argument or loaded from `),ACe=a("code"),pjr=o("pretrained_model_name_or_path"),_jr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LCe=a("code"),ujr=o("pretrained_model_name_or_path"),bjr=o(":"),vjr=l(),Ee=a("ul"),f3=a("li"),yCe=a("strong"),Fjr=o("albert"),Tjr=o(" \u2014 "),CZ=a("a"),Mjr=o("FlaxAlbertForPreTraining"),Ejr=o(" (ALBERT model)"),Cjr=l(),m3=a("li"),xCe=a("strong"),wjr=o("bart"),Ajr=o(" \u2014 "),wZ=a("a"),Ljr=o("FlaxBartForConditionalGeneration"),yjr=o(" (BART model)"),xjr=l(),g3=a("li"),$Ce=a("strong"),$jr=o("bert"),kjr=o(" \u2014 "),AZ=a("a"),Sjr=o("FlaxBertForPreTraining"),Rjr=o(" (BERT model)"),Pjr=l(),h3=a("li"),kCe=a("strong"),Bjr=o("big_bird"),Ijr=o(" \u2014 "),LZ=a("a"),Njr=o("FlaxBigBirdForPreTraining"),qjr=o(" (BigBird model)"),jjr=l(),p3=a("li"),SCe=a("strong"),Djr=o("electra"),Gjr=o(" \u2014 "),yZ=a("a"),Ojr=o("FlaxElectraForPreTraining"),Vjr=o(" (ELECTRA model)"),Xjr=l(),_3=a("li"),RCe=a("strong"),zjr=o("longt5"),Qjr=o(" \u2014 "),xZ=a("a"),Wjr=o("FlaxLongT5ForConditionalGeneration"),Hjr=o(" (LongT5 model)"),Ujr=l(),u3=a("li"),PCe=a("strong"),Jjr=o("mbart"),Yjr=o(" \u2014 "),$Z=a("a"),Kjr=o("FlaxMBartForConditionalGeneration"),Zjr=o(" (mBART model)"),eDr=l(),b3=a("li"),BCe=a("strong"),oDr=o("mt5"),rDr=o(" \u2014 "),kZ=a("a"),tDr=o("FlaxMT5ForConditionalGeneration"),aDr=o(" (MT5 model)"),nDr=l(),v3=a("li"),ICe=a("strong"),sDr=o("roberta"),lDr=o(" \u2014 "),SZ=a("a"),iDr=o("FlaxRobertaForMaskedLM"),dDr=o(" (RoBERTa model)"),cDr=l(),F3=a("li"),NCe=a("strong"),fDr=o("roformer"),mDr=o(" \u2014 "),RZ=a("a"),gDr=o("FlaxRoFormerForMaskedLM"),hDr=o(" (RoFormer model)"),pDr=l(),T3=a("li"),qCe=a("strong"),_Dr=o("t5"),uDr=o(" \u2014 "),PZ=a("a"),bDr=o("FlaxT5ForConditionalGeneration"),vDr=o(" (T5 model)"),FDr=l(),M3=a("li"),jCe=a("strong"),TDr=o("wav2vec2"),MDr=o(" \u2014 "),BZ=a("a"),EDr=o("FlaxWav2Vec2ForPreTraining"),CDr=o(" (Wav2Vec2 model)"),wDr=l(),E3=a("li"),DCe=a("strong"),ADr=o("xlm-roberta"),LDr=o(" \u2014 "),IZ=a("a"),yDr=o("FlaxXLMRobertaForMaskedLM"),xDr=o(" (XLM-RoBERTa model)"),$Dr=l(),F(C3.$$.fragment),MVe=l(),Yc=a("h2"),w3=a("a"),GCe=a("span"),F(Qx.$$.fragment),kDr=l(),OCe=a("span"),SDr=o("FlaxAutoModelForMaskedLM"),EVe=l(),_r=a("div"),F(Wx.$$.fragment),RDr=l(),Kc=a("p"),PDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),NZ=a("a"),BDr=o("from_pretrained()"),IDr=o(" class method or the "),qZ=a("a"),NDr=o("from_config()"),qDr=o(` class
method.`),jDr=l(),Hx=a("p"),DDr=o("This class cannot be instantiated directly using "),VCe=a("code"),GDr=o("__init__()"),ODr=o(" (throws an error)."),VDr=l(),Wt=a("div"),F(Ux.$$.fragment),XDr=l(),XCe=a("p"),zDr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),QDr=l(),Zc=a("p"),WDr=o(`Note:
Loading a model from its configuration file does `),zCe=a("strong"),HDr=o("not"),UDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jZ=a("a"),JDr=o("from_pretrained()"),YDr=o(" to load the model weights."),KDr=l(),F(A3.$$.fragment),ZDr=l(),Xr=a("div"),F(Jx.$$.fragment),eGr=l(),QCe=a("p"),oGr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),rGr=l(),Mn=a("p"),tGr=o("The model class to instantiate is selected based on the "),WCe=a("code"),aGr=o("model_type"),nGr=o(` property of the config object (either
passed as an argument or loaded from `),HCe=a("code"),sGr=o("pretrained_model_name_or_path"),lGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UCe=a("code"),iGr=o("pretrained_model_name_or_path"),dGr=o(":"),cGr=l(),$e=a("ul"),L3=a("li"),JCe=a("strong"),fGr=o("albert"),mGr=o(" \u2014 "),DZ=a("a"),gGr=o("FlaxAlbertForMaskedLM"),hGr=o(" (ALBERT model)"),pGr=l(),y3=a("li"),YCe=a("strong"),_Gr=o("bart"),uGr=o(" \u2014 "),GZ=a("a"),bGr=o("FlaxBartForConditionalGeneration"),vGr=o(" (BART model)"),FGr=l(),x3=a("li"),KCe=a("strong"),TGr=o("bert"),MGr=o(" \u2014 "),OZ=a("a"),EGr=o("FlaxBertForMaskedLM"),CGr=o(" (BERT model)"),wGr=l(),$3=a("li"),ZCe=a("strong"),AGr=o("big_bird"),LGr=o(" \u2014 "),VZ=a("a"),yGr=o("FlaxBigBirdForMaskedLM"),xGr=o(" (BigBird model)"),$Gr=l(),k3=a("li"),e5e=a("strong"),kGr=o("distilbert"),SGr=o(" \u2014 "),XZ=a("a"),RGr=o("FlaxDistilBertForMaskedLM"),PGr=o(" (DistilBERT model)"),BGr=l(),S3=a("li"),o5e=a("strong"),IGr=o("electra"),NGr=o(" \u2014 "),zZ=a("a"),qGr=o("FlaxElectraForMaskedLM"),jGr=o(" (ELECTRA model)"),DGr=l(),R3=a("li"),r5e=a("strong"),GGr=o("mbart"),OGr=o(" \u2014 "),QZ=a("a"),VGr=o("FlaxMBartForConditionalGeneration"),XGr=o(" (mBART model)"),zGr=l(),P3=a("li"),t5e=a("strong"),QGr=o("roberta"),WGr=o(" \u2014 "),WZ=a("a"),HGr=o("FlaxRobertaForMaskedLM"),UGr=o(" (RoBERTa model)"),JGr=l(),B3=a("li"),a5e=a("strong"),YGr=o("roformer"),KGr=o(" \u2014 "),HZ=a("a"),ZGr=o("FlaxRoFormerForMaskedLM"),eOr=o(" (RoFormer model)"),oOr=l(),I3=a("li"),n5e=a("strong"),rOr=o("xlm-roberta"),tOr=o(" \u2014 "),UZ=a("a"),aOr=o("FlaxXLMRobertaForMaskedLM"),nOr=o(" (XLM-RoBERTa model)"),sOr=l(),F(N3.$$.fragment),CVe=l(),ef=a("h2"),q3=a("a"),s5e=a("span"),F(Yx.$$.fragment),lOr=l(),l5e=a("span"),iOr=o("FlaxAutoModelForSeq2SeqLM"),wVe=l(),ur=a("div"),F(Kx.$$.fragment),dOr=l(),of=a("p"),cOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),JZ=a("a"),fOr=o("from_pretrained()"),mOr=o(" class method or the "),YZ=a("a"),gOr=o("from_config()"),hOr=o(` class
method.`),pOr=l(),Zx=a("p"),_Or=o("This class cannot be instantiated directly using "),i5e=a("code"),uOr=o("__init__()"),bOr=o(" (throws an error)."),vOr=l(),Ht=a("div"),F(e$.$$.fragment),FOr=l(),d5e=a("p"),TOr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),MOr=l(),rf=a("p"),EOr=o(`Note:
Loading a model from its configuration file does `),c5e=a("strong"),COr=o("not"),wOr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KZ=a("a"),AOr=o("from_pretrained()"),LOr=o(" to load the model weights."),yOr=l(),F(j3.$$.fragment),xOr=l(),zr=a("div"),F(o$.$$.fragment),$Or=l(),f5e=a("p"),kOr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),SOr=l(),En=a("p"),ROr=o("The model class to instantiate is selected based on the "),m5e=a("code"),POr=o("model_type"),BOr=o(` property of the config object (either
passed as an argument or loaded from `),g5e=a("code"),IOr=o("pretrained_model_name_or_path"),NOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h5e=a("code"),qOr=o("pretrained_model_name_or_path"),jOr=o(":"),DOr=l(),ke=a("ul"),D3=a("li"),p5e=a("strong"),GOr=o("bart"),OOr=o(" \u2014 "),ZZ=a("a"),VOr=o("FlaxBartForConditionalGeneration"),XOr=o(" (BART model)"),zOr=l(),G3=a("li"),_5e=a("strong"),QOr=o("blenderbot"),WOr=o(" \u2014 "),eee=a("a"),HOr=o("FlaxBlenderbotForConditionalGeneration"),UOr=o(" (Blenderbot model)"),JOr=l(),O3=a("li"),u5e=a("strong"),YOr=o("blenderbot-small"),KOr=o(" \u2014 "),oee=a("a"),ZOr=o("FlaxBlenderbotSmallForConditionalGeneration"),eVr=o(" (BlenderbotSmall model)"),oVr=l(),V3=a("li"),b5e=a("strong"),rVr=o("encoder-decoder"),tVr=o(" \u2014 "),ree=a("a"),aVr=o("FlaxEncoderDecoderModel"),nVr=o(" (Encoder decoder model)"),sVr=l(),X3=a("li"),v5e=a("strong"),lVr=o("longt5"),iVr=o(" \u2014 "),tee=a("a"),dVr=o("FlaxLongT5ForConditionalGeneration"),cVr=o(" (LongT5 model)"),fVr=l(),z3=a("li"),F5e=a("strong"),mVr=o("marian"),gVr=o(" \u2014 "),aee=a("a"),hVr=o("FlaxMarianMTModel"),pVr=o(" (Marian model)"),_Vr=l(),Q3=a("li"),T5e=a("strong"),uVr=o("mbart"),bVr=o(" \u2014 "),nee=a("a"),vVr=o("FlaxMBartForConditionalGeneration"),FVr=o(" (mBART model)"),TVr=l(),W3=a("li"),M5e=a("strong"),MVr=o("mt5"),EVr=o(" \u2014 "),see=a("a"),CVr=o("FlaxMT5ForConditionalGeneration"),wVr=o(" (MT5 model)"),AVr=l(),H3=a("li"),E5e=a("strong"),LVr=o("pegasus"),yVr=o(" \u2014 "),lee=a("a"),xVr=o("FlaxPegasusForConditionalGeneration"),$Vr=o(" (Pegasus model)"),kVr=l(),U3=a("li"),C5e=a("strong"),SVr=o("t5"),RVr=o(" \u2014 "),iee=a("a"),PVr=o("FlaxT5ForConditionalGeneration"),BVr=o(" (T5 model)"),IVr=l(),F(J3.$$.fragment),AVe=l(),tf=a("h2"),Y3=a("a"),w5e=a("span"),F(r$.$$.fragment),NVr=l(),A5e=a("span"),qVr=o("FlaxAutoModelForSequenceClassification"),LVe=l(),br=a("div"),F(t$.$$.fragment),jVr=l(),af=a("p"),DVr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),dee=a("a"),GVr=o("from_pretrained()"),OVr=o(" class method or the "),cee=a("a"),VVr=o("from_config()"),XVr=o(` class
method.`),zVr=l(),a$=a("p"),QVr=o("This class cannot be instantiated directly using "),L5e=a("code"),WVr=o("__init__()"),HVr=o(" (throws an error)."),UVr=l(),Ut=a("div"),F(n$.$$.fragment),JVr=l(),y5e=a("p"),YVr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),KVr=l(),nf=a("p"),ZVr=o(`Note:
Loading a model from its configuration file does `),x5e=a("strong"),eXr=o("not"),oXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fee=a("a"),rXr=o("from_pretrained()"),tXr=o(" to load the model weights."),aXr=l(),F(K3.$$.fragment),nXr=l(),Qr=a("div"),F(s$.$$.fragment),sXr=l(),$5e=a("p"),lXr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),iXr=l(),Cn=a("p"),dXr=o("The model class to instantiate is selected based on the "),k5e=a("code"),cXr=o("model_type"),fXr=o(` property of the config object (either
passed as an argument or loaded from `),S5e=a("code"),mXr=o("pretrained_model_name_or_path"),gXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R5e=a("code"),hXr=o("pretrained_model_name_or_path"),pXr=o(":"),_Xr=l(),Se=a("ul"),Z3=a("li"),P5e=a("strong"),uXr=o("albert"),bXr=o(" \u2014 "),mee=a("a"),vXr=o("FlaxAlbertForSequenceClassification"),FXr=o(" (ALBERT model)"),TXr=l(),e0=a("li"),B5e=a("strong"),MXr=o("bart"),EXr=o(" \u2014 "),gee=a("a"),CXr=o("FlaxBartForSequenceClassification"),wXr=o(" (BART model)"),AXr=l(),o0=a("li"),I5e=a("strong"),LXr=o("bert"),yXr=o(" \u2014 "),hee=a("a"),xXr=o("FlaxBertForSequenceClassification"),$Xr=o(" (BERT model)"),kXr=l(),r0=a("li"),N5e=a("strong"),SXr=o("big_bird"),RXr=o(" \u2014 "),pee=a("a"),PXr=o("FlaxBigBirdForSequenceClassification"),BXr=o(" (BigBird model)"),IXr=l(),t0=a("li"),q5e=a("strong"),NXr=o("distilbert"),qXr=o(" \u2014 "),_ee=a("a"),jXr=o("FlaxDistilBertForSequenceClassification"),DXr=o(" (DistilBERT model)"),GXr=l(),a0=a("li"),j5e=a("strong"),OXr=o("electra"),VXr=o(" \u2014 "),uee=a("a"),XXr=o("FlaxElectraForSequenceClassification"),zXr=o(" (ELECTRA model)"),QXr=l(),n0=a("li"),D5e=a("strong"),WXr=o("mbart"),HXr=o(" \u2014 "),bee=a("a"),UXr=o("FlaxMBartForSequenceClassification"),JXr=o(" (mBART model)"),YXr=l(),s0=a("li"),G5e=a("strong"),KXr=o("roberta"),ZXr=o(" \u2014 "),vee=a("a"),ezr=o("FlaxRobertaForSequenceClassification"),ozr=o(" (RoBERTa model)"),rzr=l(),l0=a("li"),O5e=a("strong"),tzr=o("roformer"),azr=o(" \u2014 "),Fee=a("a"),nzr=o("FlaxRoFormerForSequenceClassification"),szr=o(" (RoFormer model)"),lzr=l(),i0=a("li"),V5e=a("strong"),izr=o("xlm-roberta"),dzr=o(" \u2014 "),Tee=a("a"),czr=o("FlaxXLMRobertaForSequenceClassification"),fzr=o(" (XLM-RoBERTa model)"),mzr=l(),F(d0.$$.fragment),yVe=l(),sf=a("h2"),c0=a("a"),X5e=a("span"),F(l$.$$.fragment),gzr=l(),z5e=a("span"),hzr=o("FlaxAutoModelForQuestionAnswering"),xVe=l(),vr=a("div"),F(i$.$$.fragment),pzr=l(),lf=a("p"),_zr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Mee=a("a"),uzr=o("from_pretrained()"),bzr=o(" class method or the "),Eee=a("a"),vzr=o("from_config()"),Fzr=o(` class
method.`),Tzr=l(),d$=a("p"),Mzr=o("This class cannot be instantiated directly using "),Q5e=a("code"),Ezr=o("__init__()"),Czr=o(" (throws an error)."),wzr=l(),Jt=a("div"),F(c$.$$.fragment),Azr=l(),W5e=a("p"),Lzr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),yzr=l(),df=a("p"),xzr=o(`Note:
Loading a model from its configuration file does `),H5e=a("strong"),$zr=o("not"),kzr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Cee=a("a"),Szr=o("from_pretrained()"),Rzr=o(" to load the model weights."),Pzr=l(),F(f0.$$.fragment),Bzr=l(),Wr=a("div"),F(f$.$$.fragment),Izr=l(),U5e=a("p"),Nzr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),qzr=l(),wn=a("p"),jzr=o("The model class to instantiate is selected based on the "),J5e=a("code"),Dzr=o("model_type"),Gzr=o(` property of the config object (either
passed as an argument or loaded from `),Y5e=a("code"),Ozr=o("pretrained_model_name_or_path"),Vzr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K5e=a("code"),Xzr=o("pretrained_model_name_or_path"),zzr=o(":"),Qzr=l(),Re=a("ul"),m0=a("li"),Z5e=a("strong"),Wzr=o("albert"),Hzr=o(" \u2014 "),wee=a("a"),Uzr=o("FlaxAlbertForQuestionAnswering"),Jzr=o(" (ALBERT model)"),Yzr=l(),g0=a("li"),e3e=a("strong"),Kzr=o("bart"),Zzr=o(" \u2014 "),Aee=a("a"),eQr=o("FlaxBartForQuestionAnswering"),oQr=o(" (BART model)"),rQr=l(),h0=a("li"),o3e=a("strong"),tQr=o("bert"),aQr=o(" \u2014 "),Lee=a("a"),nQr=o("FlaxBertForQuestionAnswering"),sQr=o(" (BERT model)"),lQr=l(),p0=a("li"),r3e=a("strong"),iQr=o("big_bird"),dQr=o(" \u2014 "),yee=a("a"),cQr=o("FlaxBigBirdForQuestionAnswering"),fQr=o(" (BigBird model)"),mQr=l(),_0=a("li"),t3e=a("strong"),gQr=o("distilbert"),hQr=o(" \u2014 "),xee=a("a"),pQr=o("FlaxDistilBertForQuestionAnswering"),_Qr=o(" (DistilBERT model)"),uQr=l(),u0=a("li"),a3e=a("strong"),bQr=o("electra"),vQr=o(" \u2014 "),$ee=a("a"),FQr=o("FlaxElectraForQuestionAnswering"),TQr=o(" (ELECTRA model)"),MQr=l(),b0=a("li"),n3e=a("strong"),EQr=o("mbart"),CQr=o(" \u2014 "),kee=a("a"),wQr=o("FlaxMBartForQuestionAnswering"),AQr=o(" (mBART model)"),LQr=l(),v0=a("li"),s3e=a("strong"),yQr=o("roberta"),xQr=o(" \u2014 "),See=a("a"),$Qr=o("FlaxRobertaForQuestionAnswering"),kQr=o(" (RoBERTa model)"),SQr=l(),F0=a("li"),l3e=a("strong"),RQr=o("roformer"),PQr=o(" \u2014 "),Ree=a("a"),BQr=o("FlaxRoFormerForQuestionAnswering"),IQr=o(" (RoFormer model)"),NQr=l(),T0=a("li"),i3e=a("strong"),qQr=o("xlm-roberta"),jQr=o(" \u2014 "),Pee=a("a"),DQr=o("FlaxXLMRobertaForQuestionAnswering"),GQr=o(" (XLM-RoBERTa model)"),OQr=l(),F(M0.$$.fragment),$Ve=l(),cf=a("h2"),E0=a("a"),d3e=a("span"),F(m$.$$.fragment),VQr=l(),c3e=a("span"),XQr=o("FlaxAutoModelForTokenClassification"),kVe=l(),Fr=a("div"),F(g$.$$.fragment),zQr=l(),ff=a("p"),QQr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Bee=a("a"),WQr=o("from_pretrained()"),HQr=o(" class method or the "),Iee=a("a"),UQr=o("from_config()"),JQr=o(` class
method.`),YQr=l(),h$=a("p"),KQr=o("This class cannot be instantiated directly using "),f3e=a("code"),ZQr=o("__init__()"),eWr=o(" (throws an error)."),oWr=l(),Yt=a("div"),F(p$.$$.fragment),rWr=l(),m3e=a("p"),tWr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),aWr=l(),mf=a("p"),nWr=o(`Note:
Loading a model from its configuration file does `),g3e=a("strong"),sWr=o("not"),lWr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Nee=a("a"),iWr=o("from_pretrained()"),dWr=o(" to load the model weights."),cWr=l(),F(C0.$$.fragment),fWr=l(),Hr=a("div"),F(_$.$$.fragment),mWr=l(),h3e=a("p"),gWr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),hWr=l(),An=a("p"),pWr=o("The model class to instantiate is selected based on the "),p3e=a("code"),_Wr=o("model_type"),uWr=o(` property of the config object (either
passed as an argument or loaded from `),_3e=a("code"),bWr=o("pretrained_model_name_or_path"),vWr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u3e=a("code"),FWr=o("pretrained_model_name_or_path"),TWr=o(":"),MWr=l(),Ve=a("ul"),w0=a("li"),b3e=a("strong"),EWr=o("albert"),CWr=o(" \u2014 "),qee=a("a"),wWr=o("FlaxAlbertForTokenClassification"),AWr=o(" (ALBERT model)"),LWr=l(),A0=a("li"),v3e=a("strong"),yWr=o("bert"),xWr=o(" \u2014 "),jee=a("a"),$Wr=o("FlaxBertForTokenClassification"),kWr=o(" (BERT model)"),SWr=l(),L0=a("li"),F3e=a("strong"),RWr=o("big_bird"),PWr=o(" \u2014 "),Dee=a("a"),BWr=o("FlaxBigBirdForTokenClassification"),IWr=o(" (BigBird model)"),NWr=l(),y0=a("li"),T3e=a("strong"),qWr=o("distilbert"),jWr=o(" \u2014 "),Gee=a("a"),DWr=o("FlaxDistilBertForTokenClassification"),GWr=o(" (DistilBERT model)"),OWr=l(),x0=a("li"),M3e=a("strong"),VWr=o("electra"),XWr=o(" \u2014 "),Oee=a("a"),zWr=o("FlaxElectraForTokenClassification"),QWr=o(" (ELECTRA model)"),WWr=l(),$0=a("li"),E3e=a("strong"),HWr=o("roberta"),UWr=o(" \u2014 "),Vee=a("a"),JWr=o("FlaxRobertaForTokenClassification"),YWr=o(" (RoBERTa model)"),KWr=l(),k0=a("li"),C3e=a("strong"),ZWr=o("roformer"),eHr=o(" \u2014 "),Xee=a("a"),oHr=o("FlaxRoFormerForTokenClassification"),rHr=o(" (RoFormer model)"),tHr=l(),S0=a("li"),w3e=a("strong"),aHr=o("xlm-roberta"),nHr=o(" \u2014 "),zee=a("a"),sHr=o("FlaxXLMRobertaForTokenClassification"),lHr=o(" (XLM-RoBERTa model)"),iHr=l(),F(R0.$$.fragment),SVe=l(),gf=a("h2"),P0=a("a"),A3e=a("span"),F(u$.$$.fragment),dHr=l(),L3e=a("span"),cHr=o("FlaxAutoModelForMultipleChoice"),RVe=l(),Tr=a("div"),F(b$.$$.fragment),fHr=l(),hf=a("p"),mHr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Qee=a("a"),gHr=o("from_pretrained()"),hHr=o(" class method or the "),Wee=a("a"),pHr=o("from_config()"),_Hr=o(` class
method.`),uHr=l(),v$=a("p"),bHr=o("This class cannot be instantiated directly using "),y3e=a("code"),vHr=o("__init__()"),FHr=o(" (throws an error)."),THr=l(),Kt=a("div"),F(F$.$$.fragment),MHr=l(),x3e=a("p"),EHr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),CHr=l(),pf=a("p"),wHr=o(`Note:
Loading a model from its configuration file does `),$3e=a("strong"),AHr=o("not"),LHr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Hee=a("a"),yHr=o("from_pretrained()"),xHr=o(" to load the model weights."),$Hr=l(),F(B0.$$.fragment),kHr=l(),Ur=a("div"),F(T$.$$.fragment),SHr=l(),k3e=a("p"),RHr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),PHr=l(),Ln=a("p"),BHr=o("The model class to instantiate is selected based on the "),S3e=a("code"),IHr=o("model_type"),NHr=o(` property of the config object (either
passed as an argument or loaded from `),R3e=a("code"),qHr=o("pretrained_model_name_or_path"),jHr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P3e=a("code"),DHr=o("pretrained_model_name_or_path"),GHr=o(":"),OHr=l(),Xe=a("ul"),I0=a("li"),B3e=a("strong"),VHr=o("albert"),XHr=o(" \u2014 "),Uee=a("a"),zHr=o("FlaxAlbertForMultipleChoice"),QHr=o(" (ALBERT model)"),WHr=l(),N0=a("li"),I3e=a("strong"),HHr=o("bert"),UHr=o(" \u2014 "),Jee=a("a"),JHr=o("FlaxBertForMultipleChoice"),YHr=o(" (BERT model)"),KHr=l(),q0=a("li"),N3e=a("strong"),ZHr=o("big_bird"),eUr=o(" \u2014 "),Yee=a("a"),oUr=o("FlaxBigBirdForMultipleChoice"),rUr=o(" (BigBird model)"),tUr=l(),j0=a("li"),q3e=a("strong"),aUr=o("distilbert"),nUr=o(" \u2014 "),Kee=a("a"),sUr=o("FlaxDistilBertForMultipleChoice"),lUr=o(" (DistilBERT model)"),iUr=l(),D0=a("li"),j3e=a("strong"),dUr=o("electra"),cUr=o(" \u2014 "),Zee=a("a"),fUr=o("FlaxElectraForMultipleChoice"),mUr=o(" (ELECTRA model)"),gUr=l(),G0=a("li"),D3e=a("strong"),hUr=o("roberta"),pUr=o(" \u2014 "),eoe=a("a"),_Ur=o("FlaxRobertaForMultipleChoice"),uUr=o(" (RoBERTa model)"),bUr=l(),O0=a("li"),G3e=a("strong"),vUr=o("roformer"),FUr=o(" \u2014 "),ooe=a("a"),TUr=o("FlaxRoFormerForMultipleChoice"),MUr=o(" (RoFormer model)"),EUr=l(),V0=a("li"),O3e=a("strong"),CUr=o("xlm-roberta"),wUr=o(" \u2014 "),roe=a("a"),AUr=o("FlaxXLMRobertaForMultipleChoice"),LUr=o(" (XLM-RoBERTa model)"),yUr=l(),F(X0.$$.fragment),PVe=l(),_f=a("h2"),z0=a("a"),V3e=a("span"),F(M$.$$.fragment),xUr=l(),X3e=a("span"),$Ur=o("FlaxAutoModelForNextSentencePrediction"),BVe=l(),Mr=a("div"),F(E$.$$.fragment),kUr=l(),uf=a("p"),SUr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),toe=a("a"),RUr=o("from_pretrained()"),PUr=o(" class method or the "),aoe=a("a"),BUr=o("from_config()"),IUr=o(` class
method.`),NUr=l(),C$=a("p"),qUr=o("This class cannot be instantiated directly using "),z3e=a("code"),jUr=o("__init__()"),DUr=o(" (throws an error)."),GUr=l(),Zt=a("div"),F(w$.$$.fragment),OUr=l(),Q3e=a("p"),VUr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),XUr=l(),bf=a("p"),zUr=o(`Note:
Loading a model from its configuration file does `),W3e=a("strong"),QUr=o("not"),WUr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),noe=a("a"),HUr=o("from_pretrained()"),UUr=o(" to load the model weights."),JUr=l(),F(Q0.$$.fragment),YUr=l(),Jr=a("div"),F(A$.$$.fragment),KUr=l(),H3e=a("p"),ZUr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),eJr=l(),yn=a("p"),oJr=o("The model class to instantiate is selected based on the "),U3e=a("code"),rJr=o("model_type"),tJr=o(` property of the config object (either
passed as an argument or loaded from `),J3e=a("code"),aJr=o("pretrained_model_name_or_path"),nJr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y3e=a("code"),sJr=o("pretrained_model_name_or_path"),lJr=o(":"),iJr=l(),K3e=a("ul"),W0=a("li"),Z3e=a("strong"),dJr=o("bert"),cJr=o(" \u2014 "),soe=a("a"),fJr=o("FlaxBertForNextSentencePrediction"),mJr=o(" (BERT model)"),gJr=l(),F(H0.$$.fragment),IVe=l(),vf=a("h2"),U0=a("a"),e0e=a("span"),F(L$.$$.fragment),hJr=l(),o0e=a("span"),pJr=o("FlaxAutoModelForImageClassification"),NVe=l(),Er=a("div"),F(y$.$$.fragment),_Jr=l(),Ff=a("p"),uJr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),loe=a("a"),bJr=o("from_pretrained()"),vJr=o(" class method or the "),ioe=a("a"),FJr=o("from_config()"),TJr=o(` class
method.`),MJr=l(),x$=a("p"),EJr=o("This class cannot be instantiated directly using "),r0e=a("code"),CJr=o("__init__()"),wJr=o(" (throws an error)."),AJr=l(),ea=a("div"),F($$.$$.fragment),LJr=l(),t0e=a("p"),yJr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),xJr=l(),Tf=a("p"),$Jr=o(`Note:
Loading a model from its configuration file does `),a0e=a("strong"),kJr=o("not"),SJr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),doe=a("a"),RJr=o("from_pretrained()"),PJr=o(" to load the model weights."),BJr=l(),F(J0.$$.fragment),IJr=l(),Yr=a("div"),F(k$.$$.fragment),NJr=l(),n0e=a("p"),qJr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),jJr=l(),xn=a("p"),DJr=o("The model class to instantiate is selected based on the "),s0e=a("code"),GJr=o("model_type"),OJr=o(` property of the config object (either
passed as an argument or loaded from `),l0e=a("code"),VJr=o("pretrained_model_name_or_path"),XJr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i0e=a("code"),zJr=o("pretrained_model_name_or_path"),QJr=o(":"),WJr=l(),S$=a("ul"),Y0=a("li"),d0e=a("strong"),HJr=o("beit"),UJr=o(" \u2014 "),coe=a("a"),JJr=o("FlaxBeitForImageClassification"),YJr=o(" (BEiT model)"),KJr=l(),K0=a("li"),c0e=a("strong"),ZJr=o("vit"),eYr=o(" \u2014 "),foe=a("a"),oYr=o("FlaxViTForImageClassification"),rYr=o(" (ViT model)"),tYr=l(),F(Z0.$$.fragment),qVe=l(),Mf=a("h2"),ew=a("a"),f0e=a("span"),F(R$.$$.fragment),aYr=l(),m0e=a("span"),nYr=o("FlaxAutoModelForVision2Seq"),jVe=l(),Cr=a("div"),F(P$.$$.fragment),sYr=l(),Ef=a("p"),lYr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),moe=a("a"),iYr=o("from_pretrained()"),dYr=o(" class method or the "),goe=a("a"),cYr=o("from_config()"),fYr=o(` class
method.`),mYr=l(),B$=a("p"),gYr=o("This class cannot be instantiated directly using "),g0e=a("code"),hYr=o("__init__()"),pYr=o(" (throws an error)."),_Yr=l(),oa=a("div"),F(I$.$$.fragment),uYr=l(),h0e=a("p"),bYr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),vYr=l(),Cf=a("p"),FYr=o(`Note:
Loading a model from its configuration file does `),p0e=a("strong"),TYr=o("not"),MYr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hoe=a("a"),EYr=o("from_pretrained()"),CYr=o(" to load the model weights."),wYr=l(),F(ow.$$.fragment),AYr=l(),Kr=a("div"),F(N$.$$.fragment),LYr=l(),_0e=a("p"),yYr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),xYr=l(),$n=a("p"),$Yr=o("The model class to instantiate is selected based on the "),u0e=a("code"),kYr=o("model_type"),SYr=o(` property of the config object (either
passed as an argument or loaded from `),b0e=a("code"),RYr=o("pretrained_model_name_or_path"),PYr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v0e=a("code"),BYr=o("pretrained_model_name_or_path"),IYr=o(":"),NYr=l(),F0e=a("ul"),rw=a("li"),T0e=a("strong"),qYr=o("vision-encoder-decoder"),jYr=o(" \u2014 "),poe=a("a"),DYr=o("FlaxVisionEncoderDecoderModel"),GYr=o(" (Vision Encoder decoder model)"),OYr=l(),F(tw.$$.fragment),this.h()},l(f){const u=fDt('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var q$=s(p);m=n(q$,"A",{id:!0,class:!0,href:!0});var M0e=s(m);_=n(M0e,"SPAN",{});var E0e=s(_);T(d.$$.fragment,E0e),E0e.forEach(t),M0e.forEach(t),h=i(q$),Eo=n(q$,"SPAN",{});var C0e=s(Eo);Ti=r(C0e,"Auto Classes"),C0e.forEach(t),q$.forEach(t),yf=i(f),at=n(f,"P",{});var j$=s(at);Mi=r(j$,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ei=n(j$,"CODE",{});var w0e=s(Ei);C6=r(w0e,"from_pretrained()"),w0e.forEach(t),xf=r(j$,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),j$.forEach(t),Oe=i(f),Qe=n(f,"P",{});var kn=s(Qe);Ci=r(kn,"Instantiating one of "),Sn=n(kn,"A",{href:!0});var A0e=s(Sn);w6=r(A0e,"AutoConfig"),A0e.forEach(t),Rn=r(kn,", "),Pn=n(kn,"A",{href:!0});var L0e=s(Pn);A6=r(L0e,"AutoModel"),L0e.forEach(t),wi=r(kn,`, and
`),Bn=n(kn,"A",{href:!0});var y0e=s(Bn);L6=r(y0e,"AutoTokenizer"),y0e.forEach(t),Ai=r(kn," will directly create a class of the relevant architecture. For instance"),kn.forEach(t),$f=i(f),T(ya.$$.fragment,f),We=i(f),Ae=n(f,"P",{});var D$=s(Ae);oS=r(D$,"will create a model that is an instance of "),Li=n(D$,"A",{href:!0});var x0e=s(Li);rS=r(x0e,"BertModel"),x0e.forEach(t),tS=r(D$,"."),D$.forEach(t),Co=i(f),xa=n(f,"P",{});var G$=s(xa);aS=r(G$,"There is one class of "),kf=n(G$,"CODE",{});var $0e=s(kf);nS=r($0e,"AutoModel"),$0e.forEach(t),Jze=r(G$," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),G$.forEach(t),BGe=i(f),yi=n(f,"H2",{class:!0});var O$=s(yi);Sf=n(O$,"A",{id:!0,class:!0,href:!0});var k0e=s(Sf);cte=n(k0e,"SPAN",{});var S0e=s(cte);T(y6.$$.fragment,S0e),S0e.forEach(t),k0e.forEach(t),Yze=i(O$),fte=n(O$,"SPAN",{});var R0e=s(fte);Kze=r(R0e,"Extending the Auto Classes"),R0e.forEach(t),O$.forEach(t),IGe=i(f),In=n(f,"P",{});var wf=s(In);Zze=r(wf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),mte=n(wf,"CODE",{});var P0e=s(mte);eQe=r(P0e,"NewModel"),P0e.forEach(t),oQe=r(wf,", make sure you have a "),gte=n(wf,"CODE",{});var B0e=s(gte);rQe=r(B0e,"NewModelConfig"),B0e.forEach(t),tQe=r(wf,` then you can add those to the auto
classes like this:`),wf.forEach(t),NGe=i(f),T(x6.$$.fragment,f),qGe=i(f),sS=n(f,"P",{});var I0e=s(sS);aQe=r(I0e,"You will then be able to use the auto classes like you would usually do!"),I0e.forEach(t),jGe=i(f),T(Rf.$$.fragment,f),DGe=i(f),xi=n(f,"H2",{class:!0});var V$=s(xi);Pf=n(V$,"A",{id:!0,class:!0,href:!0});var N0e=s(Pf);hte=n(N0e,"SPAN",{});var q0e=s(hte);T($6.$$.fragment,q0e),q0e.forEach(t),N0e.forEach(t),nQe=i(V$),pte=n(V$,"SPAN",{});var j0e=s(pte);sQe=r(j0e,"AutoConfig"),j0e.forEach(t),V$.forEach(t),GGe=i(f),wo=n(f,"DIV",{class:!0});var rt=s(wo);T(k6.$$.fragment,rt),lQe=i(rt),S6=n(rt,"P",{});var X$=s(S6);iQe=r(X$,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),lS=n(X$,"A",{href:!0});var D0e=s(lS);dQe=r(D0e,"from_pretrained()"),D0e.forEach(t),cQe=r(X$," class method."),X$.forEach(t),fQe=i(rt),R6=n(rt,"P",{});var z$=s(R6);mQe=r(z$,"This class cannot be instantiated directly using "),_te=n(z$,"CODE",{});var G0e=s(_te);gQe=r(G0e,"__init__()"),G0e.forEach(t),hQe=r(z$," (throws an error)."),z$.forEach(t),pQe=i(rt),wr=n(rt,"DIV",{class:!0});var tt=s(wr);T(P6.$$.fragment,tt),_Qe=i(tt),ute=n(tt,"P",{});var O0e=s(ute);uQe=r(O0e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),O0e.forEach(t),bQe=i(tt),$i=n(tt,"P",{});var Af=s($i);vQe=r(Af,"The configuration class to instantiate is selected based on the "),bte=n(Af,"CODE",{});var V0e=s(bte);FQe=r(V0e,"model_type"),V0e.forEach(t),TQe=r(Af,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),vte=n(Af,"CODE",{});var X0e=s(vte);MQe=r(X0e,"pretrained_model_name_or_path"),X0e.forEach(t),EQe=r(Af,":"),Af.forEach(t),CQe=i(tt),A=n(tt,"UL",{});var L=s(A);Bf=n(L,"LI",{});var aw=s(Bf);Fte=n(aw,"STRONG",{});var z0e=s(Fte);wQe=r(z0e,"albert"),z0e.forEach(t),AQe=r(aw," \u2014 "),iS=n(aw,"A",{href:!0});var Q0e=s(iS);LQe=r(Q0e,"AlbertConfig"),Q0e.forEach(t),yQe=r(aw," (ALBERT model)"),aw.forEach(t),xQe=i(L),If=n(L,"LI",{});var nw=s(If);Tte=n(nw,"STRONG",{});var W0e=s(Tte);$Qe=r(W0e,"bart"),W0e.forEach(t),kQe=r(nw," \u2014 "),dS=n(nw,"A",{href:!0});var H0e=s(dS);SQe=r(H0e,"BartConfig"),H0e.forEach(t),RQe=r(nw," (BART model)"),nw.forEach(t),PQe=i(L),Nf=n(L,"LI",{});var sw=s(Nf);Mte=n(sw,"STRONG",{});var U0e=s(Mte);BQe=r(U0e,"beit"),U0e.forEach(t),IQe=r(sw," \u2014 "),cS=n(sw,"A",{href:!0});var J0e=s(cS);NQe=r(J0e,"BeitConfig"),J0e.forEach(t),qQe=r(sw," (BEiT model)"),sw.forEach(t),jQe=i(L),qf=n(L,"LI",{});var lw=s(qf);Ete=n(lw,"STRONG",{});var Y0e=s(Ete);DQe=r(Y0e,"bert"),Y0e.forEach(t),GQe=r(lw," \u2014 "),fS=n(lw,"A",{href:!0});var K0e=s(fS);OQe=r(K0e,"BertConfig"),K0e.forEach(t),VQe=r(lw," (BERT model)"),lw.forEach(t),XQe=i(L),jf=n(L,"LI",{});var iw=s(jf);Cte=n(iw,"STRONG",{});var Z0e=s(Cte);zQe=r(Z0e,"bert-generation"),Z0e.forEach(t),QQe=r(iw," \u2014 "),mS=n(iw,"A",{href:!0});var ewe=s(mS);WQe=r(ewe,"BertGenerationConfig"),ewe.forEach(t),HQe=r(iw," (Bert Generation model)"),iw.forEach(t),UQe=i(L),Df=n(L,"LI",{});var dw=s(Df);wte=n(dw,"STRONG",{});var owe=s(wte);JQe=r(owe,"big_bird"),owe.forEach(t),YQe=r(dw," \u2014 "),gS=n(dw,"A",{href:!0});var rwe=s(gS);KQe=r(rwe,"BigBirdConfig"),rwe.forEach(t),ZQe=r(dw," (BigBird model)"),dw.forEach(t),eWe=i(L),Gf=n(L,"LI",{});var cw=s(Gf);Ate=n(cw,"STRONG",{});var twe=s(Ate);oWe=r(twe,"bigbird_pegasus"),twe.forEach(t),rWe=r(cw," \u2014 "),hS=n(cw,"A",{href:!0});var awe=s(hS);tWe=r(awe,"BigBirdPegasusConfig"),awe.forEach(t),aWe=r(cw," (BigBird-Pegasus model)"),cw.forEach(t),nWe=i(L),Of=n(L,"LI",{});var fw=s(Of);Lte=n(fw,"STRONG",{});var nwe=s(Lte);sWe=r(nwe,"blenderbot"),nwe.forEach(t),lWe=r(fw," \u2014 "),pS=n(fw,"A",{href:!0});var swe=s(pS);iWe=r(swe,"BlenderbotConfig"),swe.forEach(t),dWe=r(fw," (Blenderbot model)"),fw.forEach(t),cWe=i(L),Vf=n(L,"LI",{});var mw=s(Vf);yte=n(mw,"STRONG",{});var lwe=s(yte);fWe=r(lwe,"blenderbot-small"),lwe.forEach(t),mWe=r(mw," \u2014 "),_S=n(mw,"A",{href:!0});var iwe=s(_S);gWe=r(iwe,"BlenderbotSmallConfig"),iwe.forEach(t),hWe=r(mw," (BlenderbotSmall model)"),mw.forEach(t),pWe=i(L),Xf=n(L,"LI",{});var gw=s(Xf);xte=n(gw,"STRONG",{});var dwe=s(xte);_We=r(dwe,"bloom"),dwe.forEach(t),uWe=r(gw," \u2014 "),uS=n(gw,"A",{href:!0});var cwe=s(uS);bWe=r(cwe,"BloomConfig"),cwe.forEach(t),vWe=r(gw," (BLOOM model)"),gw.forEach(t),FWe=i(L),zf=n(L,"LI",{});var hw=s(zf);$te=n(hw,"STRONG",{});var fwe=s($te);TWe=r(fwe,"camembert"),fwe.forEach(t),MWe=r(hw," \u2014 "),bS=n(hw,"A",{href:!0});var mwe=s(bS);EWe=r(mwe,"CamembertConfig"),mwe.forEach(t),CWe=r(hw," (CamemBERT model)"),hw.forEach(t),wWe=i(L),Qf=n(L,"LI",{});var pw=s(Qf);kte=n(pw,"STRONG",{});var gwe=s(kte);AWe=r(gwe,"canine"),gwe.forEach(t),LWe=r(pw," \u2014 "),vS=n(pw,"A",{href:!0});var hwe=s(vS);yWe=r(hwe,"CanineConfig"),hwe.forEach(t),xWe=r(pw," (CANINE model)"),pw.forEach(t),$We=i(L),Wf=n(L,"LI",{});var _w=s(Wf);Ste=n(_w,"STRONG",{});var pwe=s(Ste);kWe=r(pwe,"clip"),pwe.forEach(t),SWe=r(_w," \u2014 "),FS=n(_w,"A",{href:!0});var _we=s(FS);RWe=r(_we,"CLIPConfig"),_we.forEach(t),PWe=r(_w," (CLIP model)"),_w.forEach(t),BWe=i(L),Hf=n(L,"LI",{});var uw=s(Hf);Rte=n(uw,"STRONG",{});var uwe=s(Rte);IWe=r(uwe,"convbert"),uwe.forEach(t),NWe=r(uw," \u2014 "),TS=n(uw,"A",{href:!0});var bwe=s(TS);qWe=r(bwe,"ConvBertConfig"),bwe.forEach(t),jWe=r(uw," (ConvBERT model)"),uw.forEach(t),DWe=i(L),Uf=n(L,"LI",{});var bw=s(Uf);Pte=n(bw,"STRONG",{});var vwe=s(Pte);GWe=r(vwe,"convnext"),vwe.forEach(t),OWe=r(bw," \u2014 "),MS=n(bw,"A",{href:!0});var Fwe=s(MS);VWe=r(Fwe,"ConvNextConfig"),Fwe.forEach(t),XWe=r(bw," (ConvNeXT model)"),bw.forEach(t),zWe=i(L),Jf=n(L,"LI",{});var vw=s(Jf);Bte=n(vw,"STRONG",{});var Twe=s(Bte);QWe=r(Twe,"ctrl"),Twe.forEach(t),WWe=r(vw," \u2014 "),ES=n(vw,"A",{href:!0});var Mwe=s(ES);HWe=r(Mwe,"CTRLConfig"),Mwe.forEach(t),UWe=r(vw," (CTRL model)"),vw.forEach(t),JWe=i(L),Yf=n(L,"LI",{});var Fw=s(Yf);Ite=n(Fw,"STRONG",{});var Ewe=s(Ite);YWe=r(Ewe,"cvt"),Ewe.forEach(t),KWe=r(Fw," \u2014 "),CS=n(Fw,"A",{href:!0});var Cwe=s(CS);ZWe=r(Cwe,"CvtConfig"),Cwe.forEach(t),eHe=r(Fw," (CvT model)"),Fw.forEach(t),oHe=i(L),Kf=n(L,"LI",{});var Tw=s(Kf);Nte=n(Tw,"STRONG",{});var wwe=s(Nte);rHe=r(wwe,"data2vec-audio"),wwe.forEach(t),tHe=r(Tw," \u2014 "),wS=n(Tw,"A",{href:!0});var Awe=s(wS);aHe=r(Awe,"Data2VecAudioConfig"),Awe.forEach(t),nHe=r(Tw," (Data2VecAudio model)"),Tw.forEach(t),sHe=i(L),Zf=n(L,"LI",{});var Mw=s(Zf);qte=n(Mw,"STRONG",{});var Lwe=s(qte);lHe=r(Lwe,"data2vec-text"),Lwe.forEach(t),iHe=r(Mw," \u2014 "),AS=n(Mw,"A",{href:!0});var ywe=s(AS);dHe=r(ywe,"Data2VecTextConfig"),ywe.forEach(t),cHe=r(Mw," (Data2VecText model)"),Mw.forEach(t),fHe=i(L),em=n(L,"LI",{});var Ew=s(em);jte=n(Ew,"STRONG",{});var xwe=s(jte);mHe=r(xwe,"data2vec-vision"),xwe.forEach(t),gHe=r(Ew," \u2014 "),LS=n(Ew,"A",{href:!0});var $we=s(LS);hHe=r($we,"Data2VecVisionConfig"),$we.forEach(t),pHe=r(Ew," (Data2VecVision model)"),Ew.forEach(t),_He=i(L),om=n(L,"LI",{});var Cw=s(om);Dte=n(Cw,"STRONG",{});var kwe=s(Dte);uHe=r(kwe,"deberta"),kwe.forEach(t),bHe=r(Cw," \u2014 "),yS=n(Cw,"A",{href:!0});var Swe=s(yS);vHe=r(Swe,"DebertaConfig"),Swe.forEach(t),FHe=r(Cw," (DeBERTa model)"),Cw.forEach(t),THe=i(L),rm=n(L,"LI",{});var ww=s(rm);Gte=n(ww,"STRONG",{});var Rwe=s(Gte);MHe=r(Rwe,"deberta-v2"),Rwe.forEach(t),EHe=r(ww," \u2014 "),xS=n(ww,"A",{href:!0});var Pwe=s(xS);CHe=r(Pwe,"DebertaV2Config"),Pwe.forEach(t),wHe=r(ww," (DeBERTa-v2 model)"),ww.forEach(t),AHe=i(L),tm=n(L,"LI",{});var Aw=s(tm);Ote=n(Aw,"STRONG",{});var Bwe=s(Ote);LHe=r(Bwe,"decision_transformer"),Bwe.forEach(t),yHe=r(Aw," \u2014 "),$S=n(Aw,"A",{href:!0});var Iwe=s($S);xHe=r(Iwe,"DecisionTransformerConfig"),Iwe.forEach(t),$He=r(Aw," (Decision Transformer model)"),Aw.forEach(t),kHe=i(L),am=n(L,"LI",{});var Lw=s(am);Vte=n(Lw,"STRONG",{});var XYr=s(Vte);SHe=r(XYr,"deit"),XYr.forEach(t),RHe=r(Lw," \u2014 "),kS=n(Lw,"A",{href:!0});var zYr=s(kS);PHe=r(zYr,"DeiTConfig"),zYr.forEach(t),BHe=r(Lw," (DeiT model)"),Lw.forEach(t),IHe=i(L),nm=n(L,"LI",{});var Nwe=s(nm);Xte=n(Nwe,"STRONG",{});var QYr=s(Xte);NHe=r(QYr,"detr"),QYr.forEach(t),qHe=r(Nwe," \u2014 "),SS=n(Nwe,"A",{href:!0});var WYr=s(SS);jHe=r(WYr,"DetrConfig"),WYr.forEach(t),DHe=r(Nwe," (DETR model)"),Nwe.forEach(t),GHe=i(L),sm=n(L,"LI",{});var qwe=s(sm);zte=n(qwe,"STRONG",{});var HYr=s(zte);OHe=r(HYr,"distilbert"),HYr.forEach(t),VHe=r(qwe," \u2014 "),RS=n(qwe,"A",{href:!0});var UYr=s(RS);XHe=r(UYr,"DistilBertConfig"),UYr.forEach(t),zHe=r(qwe," (DistilBERT model)"),qwe.forEach(t),QHe=i(L),lm=n(L,"LI",{});var jwe=s(lm);Qte=n(jwe,"STRONG",{});var JYr=s(Qte);WHe=r(JYr,"dpr"),JYr.forEach(t),HHe=r(jwe," \u2014 "),PS=n(jwe,"A",{href:!0});var YYr=s(PS);UHe=r(YYr,"DPRConfig"),YYr.forEach(t),JHe=r(jwe," (DPR model)"),jwe.forEach(t),YHe=i(L),im=n(L,"LI",{});var Dwe=s(im);Wte=n(Dwe,"STRONG",{});var KYr=s(Wte);KHe=r(KYr,"dpt"),KYr.forEach(t),ZHe=r(Dwe," \u2014 "),BS=n(Dwe,"A",{href:!0});var ZYr=s(BS);eUe=r(ZYr,"DPTConfig"),ZYr.forEach(t),oUe=r(Dwe," (DPT model)"),Dwe.forEach(t),rUe=i(L),dm=n(L,"LI",{});var Gwe=s(dm);Hte=n(Gwe,"STRONG",{});var eKr=s(Hte);tUe=r(eKr,"electra"),eKr.forEach(t),aUe=r(Gwe," \u2014 "),IS=n(Gwe,"A",{href:!0});var oKr=s(IS);nUe=r(oKr,"ElectraConfig"),oKr.forEach(t),sUe=r(Gwe," (ELECTRA model)"),Gwe.forEach(t),lUe=i(L),cm=n(L,"LI",{});var Owe=s(cm);Ute=n(Owe,"STRONG",{});var rKr=s(Ute);iUe=r(rKr,"encoder-decoder"),rKr.forEach(t),dUe=r(Owe," \u2014 "),NS=n(Owe,"A",{href:!0});var tKr=s(NS);cUe=r(tKr,"EncoderDecoderConfig"),tKr.forEach(t),fUe=r(Owe," (Encoder decoder model)"),Owe.forEach(t),mUe=i(L),fm=n(L,"LI",{});var Vwe=s(fm);Jte=n(Vwe,"STRONG",{});var aKr=s(Jte);gUe=r(aKr,"flaubert"),aKr.forEach(t),hUe=r(Vwe," \u2014 "),qS=n(Vwe,"A",{href:!0});var nKr=s(qS);pUe=r(nKr,"FlaubertConfig"),nKr.forEach(t),_Ue=r(Vwe," (FlauBERT model)"),Vwe.forEach(t),uUe=i(L),mm=n(L,"LI",{});var Xwe=s(mm);Yte=n(Xwe,"STRONG",{});var sKr=s(Yte);bUe=r(sKr,"flava"),sKr.forEach(t),vUe=r(Xwe," \u2014 "),jS=n(Xwe,"A",{href:!0});var lKr=s(jS);FUe=r(lKr,"FlavaConfig"),lKr.forEach(t),TUe=r(Xwe," (FLAVA model)"),Xwe.forEach(t),MUe=i(L),gm=n(L,"LI",{});var zwe=s(gm);Kte=n(zwe,"STRONG",{});var iKr=s(Kte);EUe=r(iKr,"fnet"),iKr.forEach(t),CUe=r(zwe," \u2014 "),DS=n(zwe,"A",{href:!0});var dKr=s(DS);wUe=r(dKr,"FNetConfig"),dKr.forEach(t),AUe=r(zwe," (FNet model)"),zwe.forEach(t),LUe=i(L),hm=n(L,"LI",{});var Qwe=s(hm);Zte=n(Qwe,"STRONG",{});var cKr=s(Zte);yUe=r(cKr,"fsmt"),cKr.forEach(t),xUe=r(Qwe," \u2014 "),GS=n(Qwe,"A",{href:!0});var fKr=s(GS);$Ue=r(fKr,"FSMTConfig"),fKr.forEach(t),kUe=r(Qwe," (FairSeq Machine-Translation model)"),Qwe.forEach(t),SUe=i(L),pm=n(L,"LI",{});var Wwe=s(pm);eae=n(Wwe,"STRONG",{});var mKr=s(eae);RUe=r(mKr,"funnel"),mKr.forEach(t),PUe=r(Wwe," \u2014 "),OS=n(Wwe,"A",{href:!0});var gKr=s(OS);BUe=r(gKr,"FunnelConfig"),gKr.forEach(t),IUe=r(Wwe," (Funnel Transformer model)"),Wwe.forEach(t),NUe=i(L),_m=n(L,"LI",{});var Hwe=s(_m);oae=n(Hwe,"STRONG",{});var hKr=s(oae);qUe=r(hKr,"glpn"),hKr.forEach(t),jUe=r(Hwe," \u2014 "),VS=n(Hwe,"A",{href:!0});var pKr=s(VS);DUe=r(pKr,"GLPNConfig"),pKr.forEach(t),GUe=r(Hwe," (GLPN model)"),Hwe.forEach(t),OUe=i(L),um=n(L,"LI",{});var Uwe=s(um);rae=n(Uwe,"STRONG",{});var _Kr=s(rae);VUe=r(_Kr,"gpt2"),_Kr.forEach(t),XUe=r(Uwe," \u2014 "),XS=n(Uwe,"A",{href:!0});var uKr=s(XS);zUe=r(uKr,"GPT2Config"),uKr.forEach(t),QUe=r(Uwe," (OpenAI GPT-2 model)"),Uwe.forEach(t),WUe=i(L),bm=n(L,"LI",{});var Jwe=s(bm);tae=n(Jwe,"STRONG",{});var bKr=s(tae);HUe=r(bKr,"gpt_neo"),bKr.forEach(t),UUe=r(Jwe," \u2014 "),zS=n(Jwe,"A",{href:!0});var vKr=s(zS);JUe=r(vKr,"GPTNeoConfig"),vKr.forEach(t),YUe=r(Jwe," (GPT Neo model)"),Jwe.forEach(t),KUe=i(L),vm=n(L,"LI",{});var Ywe=s(vm);aae=n(Ywe,"STRONG",{});var FKr=s(aae);ZUe=r(FKr,"gpt_neox"),FKr.forEach(t),eJe=r(Ywe," \u2014 "),QS=n(Ywe,"A",{href:!0});var TKr=s(QS);oJe=r(TKr,"GPTNeoXConfig"),TKr.forEach(t),rJe=r(Ywe," (GPT NeoX model)"),Ywe.forEach(t),tJe=i(L),Fm=n(L,"LI",{});var Kwe=s(Fm);nae=n(Kwe,"STRONG",{});var MKr=s(nae);aJe=r(MKr,"gptj"),MKr.forEach(t),nJe=r(Kwe," \u2014 "),WS=n(Kwe,"A",{href:!0});var EKr=s(WS);sJe=r(EKr,"GPTJConfig"),EKr.forEach(t),lJe=r(Kwe," (GPT-J model)"),Kwe.forEach(t),iJe=i(L),Tm=n(L,"LI",{});var Zwe=s(Tm);sae=n(Zwe,"STRONG",{});var CKr=s(sae);dJe=r(CKr,"hubert"),CKr.forEach(t),cJe=r(Zwe," \u2014 "),HS=n(Zwe,"A",{href:!0});var wKr=s(HS);fJe=r(wKr,"HubertConfig"),wKr.forEach(t),mJe=r(Zwe," (Hubert model)"),Zwe.forEach(t),gJe=i(L),Mm=n(L,"LI",{});var eAe=s(Mm);lae=n(eAe,"STRONG",{});var AKr=s(lae);hJe=r(AKr,"ibert"),AKr.forEach(t),pJe=r(eAe," \u2014 "),US=n(eAe,"A",{href:!0});var LKr=s(US);_Je=r(LKr,"IBertConfig"),LKr.forEach(t),uJe=r(eAe," (I-BERT model)"),eAe.forEach(t),bJe=i(L),Em=n(L,"LI",{});var oAe=s(Em);iae=n(oAe,"STRONG",{});var yKr=s(iae);vJe=r(yKr,"imagegpt"),yKr.forEach(t),FJe=r(oAe," \u2014 "),JS=n(oAe,"A",{href:!0});var xKr=s(JS);TJe=r(xKr,"ImageGPTConfig"),xKr.forEach(t),MJe=r(oAe," (ImageGPT model)"),oAe.forEach(t),EJe=i(L),Cm=n(L,"LI",{});var rAe=s(Cm);dae=n(rAe,"STRONG",{});var $Kr=s(dae);CJe=r($Kr,"layoutlm"),$Kr.forEach(t),wJe=r(rAe," \u2014 "),YS=n(rAe,"A",{href:!0});var kKr=s(YS);AJe=r(kKr,"LayoutLMConfig"),kKr.forEach(t),LJe=r(rAe," (LayoutLM model)"),rAe.forEach(t),yJe=i(L),wm=n(L,"LI",{});var tAe=s(wm);cae=n(tAe,"STRONG",{});var SKr=s(cae);xJe=r(SKr,"layoutlmv2"),SKr.forEach(t),$Je=r(tAe," \u2014 "),KS=n(tAe,"A",{href:!0});var RKr=s(KS);kJe=r(RKr,"LayoutLMv2Config"),RKr.forEach(t),SJe=r(tAe," (LayoutLMv2 model)"),tAe.forEach(t),RJe=i(L),Am=n(L,"LI",{});var aAe=s(Am);fae=n(aAe,"STRONG",{});var PKr=s(fae);PJe=r(PKr,"layoutlmv3"),PKr.forEach(t),BJe=r(aAe," \u2014 "),ZS=n(aAe,"A",{href:!0});var BKr=s(ZS);IJe=r(BKr,"LayoutLMv3Config"),BKr.forEach(t),NJe=r(aAe," (LayoutLMv3 model)"),aAe.forEach(t),qJe=i(L),Lm=n(L,"LI",{});var nAe=s(Lm);mae=n(nAe,"STRONG",{});var IKr=s(mae);jJe=r(IKr,"led"),IKr.forEach(t),DJe=r(nAe," \u2014 "),eR=n(nAe,"A",{href:!0});var NKr=s(eR);GJe=r(NKr,"LEDConfig"),NKr.forEach(t),OJe=r(nAe," (LED model)"),nAe.forEach(t),VJe=i(L),ym=n(L,"LI",{});var sAe=s(ym);gae=n(sAe,"STRONG",{});var qKr=s(gae);XJe=r(qKr,"levit"),qKr.forEach(t),zJe=r(sAe," \u2014 "),oR=n(sAe,"A",{href:!0});var jKr=s(oR);QJe=r(jKr,"LevitConfig"),jKr.forEach(t),WJe=r(sAe," (LeViT model)"),sAe.forEach(t),HJe=i(L),xm=n(L,"LI",{});var lAe=s(xm);hae=n(lAe,"STRONG",{});var DKr=s(hae);UJe=r(DKr,"longformer"),DKr.forEach(t),JJe=r(lAe," \u2014 "),rR=n(lAe,"A",{href:!0});var GKr=s(rR);YJe=r(GKr,"LongformerConfig"),GKr.forEach(t),KJe=r(lAe," (Longformer model)"),lAe.forEach(t),ZJe=i(L),$m=n(L,"LI",{});var iAe=s($m);pae=n(iAe,"STRONG",{});var OKr=s(pae);eYe=r(OKr,"longt5"),OKr.forEach(t),oYe=r(iAe," \u2014 "),tR=n(iAe,"A",{href:!0});var VKr=s(tR);rYe=r(VKr,"LongT5Config"),VKr.forEach(t),tYe=r(iAe," (LongT5 model)"),iAe.forEach(t),aYe=i(L),km=n(L,"LI",{});var dAe=s(km);_ae=n(dAe,"STRONG",{});var XKr=s(_ae);nYe=r(XKr,"luke"),XKr.forEach(t),sYe=r(dAe," \u2014 "),aR=n(dAe,"A",{href:!0});var zKr=s(aR);lYe=r(zKr,"LukeConfig"),zKr.forEach(t),iYe=r(dAe," (LUKE model)"),dAe.forEach(t),dYe=i(L),Sm=n(L,"LI",{});var cAe=s(Sm);uae=n(cAe,"STRONG",{});var QKr=s(uae);cYe=r(QKr,"lxmert"),QKr.forEach(t),fYe=r(cAe," \u2014 "),nR=n(cAe,"A",{href:!0});var WKr=s(nR);mYe=r(WKr,"LxmertConfig"),WKr.forEach(t),gYe=r(cAe," (LXMERT model)"),cAe.forEach(t),hYe=i(L),Rm=n(L,"LI",{});var fAe=s(Rm);bae=n(fAe,"STRONG",{});var HKr=s(bae);pYe=r(HKr,"m2m_100"),HKr.forEach(t),_Ye=r(fAe," \u2014 "),sR=n(fAe,"A",{href:!0});var UKr=s(sR);uYe=r(UKr,"M2M100Config"),UKr.forEach(t),bYe=r(fAe," (M2M100 model)"),fAe.forEach(t),vYe=i(L),Pm=n(L,"LI",{});var mAe=s(Pm);vae=n(mAe,"STRONG",{});var JKr=s(vae);FYe=r(JKr,"marian"),JKr.forEach(t),TYe=r(mAe," \u2014 "),lR=n(mAe,"A",{href:!0});var YKr=s(lR);MYe=r(YKr,"MarianConfig"),YKr.forEach(t),EYe=r(mAe," (Marian model)"),mAe.forEach(t),CYe=i(L),Bm=n(L,"LI",{});var gAe=s(Bm);Fae=n(gAe,"STRONG",{});var KKr=s(Fae);wYe=r(KKr,"maskformer"),KKr.forEach(t),AYe=r(gAe," \u2014 "),iR=n(gAe,"A",{href:!0});var ZKr=s(iR);LYe=r(ZKr,"MaskFormerConfig"),ZKr.forEach(t),yYe=r(gAe," (MaskFormer model)"),gAe.forEach(t),xYe=i(L),Im=n(L,"LI",{});var hAe=s(Im);Tae=n(hAe,"STRONG",{});var eZr=s(Tae);$Ye=r(eZr,"mbart"),eZr.forEach(t),kYe=r(hAe," \u2014 "),dR=n(hAe,"A",{href:!0});var oZr=s(dR);SYe=r(oZr,"MBartConfig"),oZr.forEach(t),RYe=r(hAe," (mBART model)"),hAe.forEach(t),PYe=i(L),Nm=n(L,"LI",{});var pAe=s(Nm);Mae=n(pAe,"STRONG",{});var rZr=s(Mae);BYe=r(rZr,"mctct"),rZr.forEach(t),IYe=r(pAe," \u2014 "),cR=n(pAe,"A",{href:!0});var tZr=s(cR);NYe=r(tZr,"MCTCTConfig"),tZr.forEach(t),qYe=r(pAe," (M-CTC-T model)"),pAe.forEach(t),jYe=i(L),qm=n(L,"LI",{});var _Ae=s(qm);Eae=n(_Ae,"STRONG",{});var aZr=s(Eae);DYe=r(aZr,"megatron-bert"),aZr.forEach(t),GYe=r(_Ae," \u2014 "),fR=n(_Ae,"A",{href:!0});var nZr=s(fR);OYe=r(nZr,"MegatronBertConfig"),nZr.forEach(t),VYe=r(_Ae," (Megatron-BERT model)"),_Ae.forEach(t),XYe=i(L),jm=n(L,"LI",{});var uAe=s(jm);Cae=n(uAe,"STRONG",{});var sZr=s(Cae);zYe=r(sZr,"mobilebert"),sZr.forEach(t),QYe=r(uAe," \u2014 "),mR=n(uAe,"A",{href:!0});var lZr=s(mR);WYe=r(lZr,"MobileBertConfig"),lZr.forEach(t),HYe=r(uAe," (MobileBERT model)"),uAe.forEach(t),UYe=i(L),Dm=n(L,"LI",{});var bAe=s(Dm);wae=n(bAe,"STRONG",{});var iZr=s(wae);JYe=r(iZr,"mpnet"),iZr.forEach(t),YYe=r(bAe," \u2014 "),gR=n(bAe,"A",{href:!0});var dZr=s(gR);KYe=r(dZr,"MPNetConfig"),dZr.forEach(t),ZYe=r(bAe," (MPNet model)"),bAe.forEach(t),eKe=i(L),Gm=n(L,"LI",{});var vAe=s(Gm);Aae=n(vAe,"STRONG",{});var cZr=s(Aae);oKe=r(cZr,"mt5"),cZr.forEach(t),rKe=r(vAe," \u2014 "),hR=n(vAe,"A",{href:!0});var fZr=s(hR);tKe=r(fZr,"MT5Config"),fZr.forEach(t),aKe=r(vAe," (MT5 model)"),vAe.forEach(t),nKe=i(L),Om=n(L,"LI",{});var FAe=s(Om);Lae=n(FAe,"STRONG",{});var mZr=s(Lae);sKe=r(mZr,"mvp"),mZr.forEach(t),lKe=r(FAe," \u2014 "),pR=n(FAe,"A",{href:!0});var gZr=s(pR);iKe=r(gZr,"MvpConfig"),gZr.forEach(t),dKe=r(FAe," (MVP model)"),FAe.forEach(t),cKe=i(L),Vm=n(L,"LI",{});var TAe=s(Vm);yae=n(TAe,"STRONG",{});var hZr=s(yae);fKe=r(hZr,"nystromformer"),hZr.forEach(t),mKe=r(TAe," \u2014 "),_R=n(TAe,"A",{href:!0});var pZr=s(_R);gKe=r(pZr,"NystromformerConfig"),pZr.forEach(t),hKe=r(TAe," (Nystr\xF6mformer model)"),TAe.forEach(t),pKe=i(L),Xm=n(L,"LI",{});var MAe=s(Xm);xae=n(MAe,"STRONG",{});var _Zr=s(xae);_Ke=r(_Zr,"openai-gpt"),_Zr.forEach(t),uKe=r(MAe," \u2014 "),uR=n(MAe,"A",{href:!0});var uZr=s(uR);bKe=r(uZr,"OpenAIGPTConfig"),uZr.forEach(t),vKe=r(MAe," (OpenAI GPT model)"),MAe.forEach(t),FKe=i(L),zm=n(L,"LI",{});var EAe=s(zm);$ae=n(EAe,"STRONG",{});var bZr=s($ae);TKe=r(bZr,"opt"),bZr.forEach(t),MKe=r(EAe," \u2014 "),bR=n(EAe,"A",{href:!0});var vZr=s(bR);EKe=r(vZr,"OPTConfig"),vZr.forEach(t),CKe=r(EAe," (OPT model)"),EAe.forEach(t),wKe=i(L),Qm=n(L,"LI",{});var CAe=s(Qm);kae=n(CAe,"STRONG",{});var FZr=s(kae);AKe=r(FZr,"pegasus"),FZr.forEach(t),LKe=r(CAe," \u2014 "),vR=n(CAe,"A",{href:!0});var TZr=s(vR);yKe=r(TZr,"PegasusConfig"),TZr.forEach(t),xKe=r(CAe," (Pegasus model)"),CAe.forEach(t),$Ke=i(L),Wm=n(L,"LI",{});var wAe=s(Wm);Sae=n(wAe,"STRONG",{});var MZr=s(Sae);kKe=r(MZr,"perceiver"),MZr.forEach(t),SKe=r(wAe," \u2014 "),FR=n(wAe,"A",{href:!0});var EZr=s(FR);RKe=r(EZr,"PerceiverConfig"),EZr.forEach(t),PKe=r(wAe," (Perceiver model)"),wAe.forEach(t),BKe=i(L),Hm=n(L,"LI",{});var AAe=s(Hm);Rae=n(AAe,"STRONG",{});var CZr=s(Rae);IKe=r(CZr,"plbart"),CZr.forEach(t),NKe=r(AAe," \u2014 "),TR=n(AAe,"A",{href:!0});var wZr=s(TR);qKe=r(wZr,"PLBartConfig"),wZr.forEach(t),jKe=r(AAe," (PLBart model)"),AAe.forEach(t),DKe=i(L),Um=n(L,"LI",{});var LAe=s(Um);Pae=n(LAe,"STRONG",{});var AZr=s(Pae);GKe=r(AZr,"poolformer"),AZr.forEach(t),OKe=r(LAe," \u2014 "),MR=n(LAe,"A",{href:!0});var LZr=s(MR);VKe=r(LZr,"PoolFormerConfig"),LZr.forEach(t),XKe=r(LAe," (PoolFormer model)"),LAe.forEach(t),zKe=i(L),Jm=n(L,"LI",{});var yAe=s(Jm);Bae=n(yAe,"STRONG",{});var yZr=s(Bae);QKe=r(yZr,"prophetnet"),yZr.forEach(t),WKe=r(yAe," \u2014 "),ER=n(yAe,"A",{href:!0});var xZr=s(ER);HKe=r(xZr,"ProphetNetConfig"),xZr.forEach(t),UKe=r(yAe," (ProphetNet model)"),yAe.forEach(t),JKe=i(L),Ym=n(L,"LI",{});var xAe=s(Ym);Iae=n(xAe,"STRONG",{});var $Zr=s(Iae);YKe=r($Zr,"qdqbert"),$Zr.forEach(t),KKe=r(xAe," \u2014 "),CR=n(xAe,"A",{href:!0});var kZr=s(CR);ZKe=r(kZr,"QDQBertConfig"),kZr.forEach(t),eZe=r(xAe," (QDQBert model)"),xAe.forEach(t),oZe=i(L),Km=n(L,"LI",{});var $Ae=s(Km);Nae=n($Ae,"STRONG",{});var SZr=s(Nae);rZe=r(SZr,"rag"),SZr.forEach(t),tZe=r($Ae," \u2014 "),wR=n($Ae,"A",{href:!0});var RZr=s(wR);aZe=r(RZr,"RagConfig"),RZr.forEach(t),nZe=r($Ae," (RAG model)"),$Ae.forEach(t),sZe=i(L),Zm=n(L,"LI",{});var kAe=s(Zm);qae=n(kAe,"STRONG",{});var PZr=s(qae);lZe=r(PZr,"realm"),PZr.forEach(t),iZe=r(kAe," \u2014 "),AR=n(kAe,"A",{href:!0});var BZr=s(AR);dZe=r(BZr,"RealmConfig"),BZr.forEach(t),cZe=r(kAe," (REALM model)"),kAe.forEach(t),fZe=i(L),eg=n(L,"LI",{});var SAe=s(eg);jae=n(SAe,"STRONG",{});var IZr=s(jae);mZe=r(IZr,"reformer"),IZr.forEach(t),gZe=r(SAe," \u2014 "),LR=n(SAe,"A",{href:!0});var NZr=s(LR);hZe=r(NZr,"ReformerConfig"),NZr.forEach(t),pZe=r(SAe," (Reformer model)"),SAe.forEach(t),_Ze=i(L),og=n(L,"LI",{});var RAe=s(og);Dae=n(RAe,"STRONG",{});var qZr=s(Dae);uZe=r(qZr,"regnet"),qZr.forEach(t),bZe=r(RAe," \u2014 "),yR=n(RAe,"A",{href:!0});var jZr=s(yR);vZe=r(jZr,"RegNetConfig"),jZr.forEach(t),FZe=r(RAe," (RegNet model)"),RAe.forEach(t),TZe=i(L),rg=n(L,"LI",{});var PAe=s(rg);Gae=n(PAe,"STRONG",{});var DZr=s(Gae);MZe=r(DZr,"rembert"),DZr.forEach(t),EZe=r(PAe," \u2014 "),xR=n(PAe,"A",{href:!0});var GZr=s(xR);CZe=r(GZr,"RemBertConfig"),GZr.forEach(t),wZe=r(PAe," (RemBERT model)"),PAe.forEach(t),AZe=i(L),tg=n(L,"LI",{});var BAe=s(tg);Oae=n(BAe,"STRONG",{});var OZr=s(Oae);LZe=r(OZr,"resnet"),OZr.forEach(t),yZe=r(BAe," \u2014 "),$R=n(BAe,"A",{href:!0});var VZr=s($R);xZe=r(VZr,"ResNetConfig"),VZr.forEach(t),$Ze=r(BAe," (ResNet model)"),BAe.forEach(t),kZe=i(L),ag=n(L,"LI",{});var IAe=s(ag);Vae=n(IAe,"STRONG",{});var XZr=s(Vae);SZe=r(XZr,"retribert"),XZr.forEach(t),RZe=r(IAe," \u2014 "),kR=n(IAe,"A",{href:!0});var zZr=s(kR);PZe=r(zZr,"RetriBertConfig"),zZr.forEach(t),BZe=r(IAe," (RetriBERT model)"),IAe.forEach(t),IZe=i(L),ng=n(L,"LI",{});var NAe=s(ng);Xae=n(NAe,"STRONG",{});var QZr=s(Xae);NZe=r(QZr,"roberta"),QZr.forEach(t),qZe=r(NAe," \u2014 "),SR=n(NAe,"A",{href:!0});var WZr=s(SR);jZe=r(WZr,"RobertaConfig"),WZr.forEach(t),DZe=r(NAe," (RoBERTa model)"),NAe.forEach(t),GZe=i(L),sg=n(L,"LI",{});var qAe=s(sg);zae=n(qAe,"STRONG",{});var HZr=s(zae);OZe=r(HZr,"roformer"),HZr.forEach(t),VZe=r(qAe," \u2014 "),RR=n(qAe,"A",{href:!0});var UZr=s(RR);XZe=r(UZr,"RoFormerConfig"),UZr.forEach(t),zZe=r(qAe," (RoFormer model)"),qAe.forEach(t),QZe=i(L),lg=n(L,"LI",{});var jAe=s(lg);Qae=n(jAe,"STRONG",{});var JZr=s(Qae);WZe=r(JZr,"segformer"),JZr.forEach(t),HZe=r(jAe," \u2014 "),PR=n(jAe,"A",{href:!0});var YZr=s(PR);UZe=r(YZr,"SegformerConfig"),YZr.forEach(t),JZe=r(jAe," (SegFormer model)"),jAe.forEach(t),YZe=i(L),ig=n(L,"LI",{});var DAe=s(ig);Wae=n(DAe,"STRONG",{});var KZr=s(Wae);KZe=r(KZr,"sew"),KZr.forEach(t),ZZe=r(DAe," \u2014 "),BR=n(DAe,"A",{href:!0});var ZZr=s(BR);eeo=r(ZZr,"SEWConfig"),ZZr.forEach(t),oeo=r(DAe," (SEW model)"),DAe.forEach(t),reo=i(L),dg=n(L,"LI",{});var GAe=s(dg);Hae=n(GAe,"STRONG",{});var eet=s(Hae);teo=r(eet,"sew-d"),eet.forEach(t),aeo=r(GAe," \u2014 "),IR=n(GAe,"A",{href:!0});var oet=s(IR);neo=r(oet,"SEWDConfig"),oet.forEach(t),seo=r(GAe," (SEW-D model)"),GAe.forEach(t),leo=i(L),cg=n(L,"LI",{});var OAe=s(cg);Uae=n(OAe,"STRONG",{});var ret=s(Uae);ieo=r(ret,"speech-encoder-decoder"),ret.forEach(t),deo=r(OAe," \u2014 "),NR=n(OAe,"A",{href:!0});var tet=s(NR);ceo=r(tet,"SpeechEncoderDecoderConfig"),tet.forEach(t),feo=r(OAe," (Speech Encoder decoder model)"),OAe.forEach(t),meo=i(L),fg=n(L,"LI",{});var VAe=s(fg);Jae=n(VAe,"STRONG",{});var aet=s(Jae);geo=r(aet,"speech_to_text"),aet.forEach(t),heo=r(VAe," \u2014 "),qR=n(VAe,"A",{href:!0});var net=s(qR);peo=r(net,"Speech2TextConfig"),net.forEach(t),_eo=r(VAe," (Speech2Text model)"),VAe.forEach(t),ueo=i(L),mg=n(L,"LI",{});var XAe=s(mg);Yae=n(XAe,"STRONG",{});var set=s(Yae);beo=r(set,"speech_to_text_2"),set.forEach(t),veo=r(XAe," \u2014 "),jR=n(XAe,"A",{href:!0});var iet=s(jR);Feo=r(iet,"Speech2Text2Config"),iet.forEach(t),Teo=r(XAe," (Speech2Text2 model)"),XAe.forEach(t),Meo=i(L),gg=n(L,"LI",{});var zAe=s(gg);Kae=n(zAe,"STRONG",{});var det=s(Kae);Eeo=r(det,"splinter"),det.forEach(t),Ceo=r(zAe," \u2014 "),DR=n(zAe,"A",{href:!0});var cet=s(DR);weo=r(cet,"SplinterConfig"),cet.forEach(t),Aeo=r(zAe," (Splinter model)"),zAe.forEach(t),Leo=i(L),hg=n(L,"LI",{});var QAe=s(hg);Zae=n(QAe,"STRONG",{});var fet=s(Zae);yeo=r(fet,"squeezebert"),fet.forEach(t),xeo=r(QAe," \u2014 "),GR=n(QAe,"A",{href:!0});var met=s(GR);$eo=r(met,"SqueezeBertConfig"),met.forEach(t),keo=r(QAe," (SqueezeBERT model)"),QAe.forEach(t),Seo=i(L),pg=n(L,"LI",{});var WAe=s(pg);ene=n(WAe,"STRONG",{});var get=s(ene);Reo=r(get,"swin"),get.forEach(t),Peo=r(WAe," \u2014 "),OR=n(WAe,"A",{href:!0});var het=s(OR);Beo=r(het,"SwinConfig"),het.forEach(t),Ieo=r(WAe," (Swin Transformer model)"),WAe.forEach(t),Neo=i(L),_g=n(L,"LI",{});var HAe=s(_g);one=n(HAe,"STRONG",{});var pet=s(one);qeo=r(pet,"t5"),pet.forEach(t),jeo=r(HAe," \u2014 "),VR=n(HAe,"A",{href:!0});var _et=s(VR);Deo=r(_et,"T5Config"),_et.forEach(t),Geo=r(HAe," (T5 model)"),HAe.forEach(t),Oeo=i(L),ug=n(L,"LI",{});var UAe=s(ug);rne=n(UAe,"STRONG",{});var uet=s(rne);Veo=r(uet,"tapas"),uet.forEach(t),Xeo=r(UAe," \u2014 "),XR=n(UAe,"A",{href:!0});var bet=s(XR);zeo=r(bet,"TapasConfig"),bet.forEach(t),Qeo=r(UAe," (TAPAS model)"),UAe.forEach(t),Weo=i(L),bg=n(L,"LI",{});var JAe=s(bg);tne=n(JAe,"STRONG",{});var vet=s(tne);Heo=r(vet,"trajectory_transformer"),vet.forEach(t),Ueo=r(JAe," \u2014 "),zR=n(JAe,"A",{href:!0});var Fet=s(zR);Jeo=r(Fet,"TrajectoryTransformerConfig"),Fet.forEach(t),Yeo=r(JAe," (Trajectory Transformer model)"),JAe.forEach(t),Keo=i(L),vg=n(L,"LI",{});var YAe=s(vg);ane=n(YAe,"STRONG",{});var Tet=s(ane);Zeo=r(Tet,"transfo-xl"),Tet.forEach(t),eoo=r(YAe," \u2014 "),QR=n(YAe,"A",{href:!0});var Met=s(QR);ooo=r(Met,"TransfoXLConfig"),Met.forEach(t),roo=r(YAe," (Transformer-XL model)"),YAe.forEach(t),too=i(L),Fg=n(L,"LI",{});var KAe=s(Fg);nne=n(KAe,"STRONG",{});var Eet=s(nne);aoo=r(Eet,"trocr"),Eet.forEach(t),noo=r(KAe," \u2014 "),WR=n(KAe,"A",{href:!0});var Cet=s(WR);soo=r(Cet,"TrOCRConfig"),Cet.forEach(t),loo=r(KAe," (TrOCR model)"),KAe.forEach(t),ioo=i(L),Tg=n(L,"LI",{});var ZAe=s(Tg);sne=n(ZAe,"STRONG",{});var wet=s(sne);doo=r(wet,"unispeech"),wet.forEach(t),coo=r(ZAe," \u2014 "),HR=n(ZAe,"A",{href:!0});var Aet=s(HR);foo=r(Aet,"UniSpeechConfig"),Aet.forEach(t),moo=r(ZAe," (UniSpeech model)"),ZAe.forEach(t),goo=i(L),Mg=n(L,"LI",{});var e6e=s(Mg);lne=n(e6e,"STRONG",{});var Let=s(lne);hoo=r(Let,"unispeech-sat"),Let.forEach(t),poo=r(e6e," \u2014 "),UR=n(e6e,"A",{href:!0});var yet=s(UR);_oo=r(yet,"UniSpeechSatConfig"),yet.forEach(t),uoo=r(e6e," (UniSpeechSat model)"),e6e.forEach(t),boo=i(L),Eg=n(L,"LI",{});var o6e=s(Eg);ine=n(o6e,"STRONG",{});var xet=s(ine);voo=r(xet,"van"),xet.forEach(t),Foo=r(o6e," \u2014 "),JR=n(o6e,"A",{href:!0});var $et=s(JR);Too=r($et,"VanConfig"),$et.forEach(t),Moo=r(o6e," (VAN model)"),o6e.forEach(t),Eoo=i(L),Cg=n(L,"LI",{});var r6e=s(Cg);dne=n(r6e,"STRONG",{});var ket=s(dne);Coo=r(ket,"vilt"),ket.forEach(t),woo=r(r6e," \u2014 "),YR=n(r6e,"A",{href:!0});var Set=s(YR);Aoo=r(Set,"ViltConfig"),Set.forEach(t),Loo=r(r6e," (ViLT model)"),r6e.forEach(t),yoo=i(L),wg=n(L,"LI",{});var t6e=s(wg);cne=n(t6e,"STRONG",{});var Ret=s(cne);xoo=r(Ret,"vision-encoder-decoder"),Ret.forEach(t),$oo=r(t6e," \u2014 "),KR=n(t6e,"A",{href:!0});var Pet=s(KR);koo=r(Pet,"VisionEncoderDecoderConfig"),Pet.forEach(t),Soo=r(t6e," (Vision Encoder decoder model)"),t6e.forEach(t),Roo=i(L),Ag=n(L,"LI",{});var a6e=s(Ag);fne=n(a6e,"STRONG",{});var Bet=s(fne);Poo=r(Bet,"vision-text-dual-encoder"),Bet.forEach(t),Boo=r(a6e," \u2014 "),ZR=n(a6e,"A",{href:!0});var Iet=s(ZR);Ioo=r(Iet,"VisionTextDualEncoderConfig"),Iet.forEach(t),Noo=r(a6e," (VisionTextDualEncoder model)"),a6e.forEach(t),qoo=i(L),Lg=n(L,"LI",{});var n6e=s(Lg);mne=n(n6e,"STRONG",{});var Net=s(mne);joo=r(Net,"visual_bert"),Net.forEach(t),Doo=r(n6e," \u2014 "),eP=n(n6e,"A",{href:!0});var qet=s(eP);Goo=r(qet,"VisualBertConfig"),qet.forEach(t),Ooo=r(n6e," (VisualBERT model)"),n6e.forEach(t),Voo=i(L),yg=n(L,"LI",{});var s6e=s(yg);gne=n(s6e,"STRONG",{});var jet=s(gne);Xoo=r(jet,"vit"),jet.forEach(t),zoo=r(s6e," \u2014 "),oP=n(s6e,"A",{href:!0});var Det=s(oP);Qoo=r(Det,"ViTConfig"),Det.forEach(t),Woo=r(s6e," (ViT model)"),s6e.forEach(t),Hoo=i(L),xg=n(L,"LI",{});var l6e=s(xg);hne=n(l6e,"STRONG",{});var Get=s(hne);Uoo=r(Get,"vit_mae"),Get.forEach(t),Joo=r(l6e," \u2014 "),rP=n(l6e,"A",{href:!0});var Oet=s(rP);Yoo=r(Oet,"ViTMAEConfig"),Oet.forEach(t),Koo=r(l6e," (ViTMAE model)"),l6e.forEach(t),Zoo=i(L),$g=n(L,"LI",{});var i6e=s($g);pne=n(i6e,"STRONG",{});var Vet=s(pne);ero=r(Vet,"wav2vec2"),Vet.forEach(t),oro=r(i6e," \u2014 "),tP=n(i6e,"A",{href:!0});var Xet=s(tP);rro=r(Xet,"Wav2Vec2Config"),Xet.forEach(t),tro=r(i6e," (Wav2Vec2 model)"),i6e.forEach(t),aro=i(L),kg=n(L,"LI",{});var d6e=s(kg);_ne=n(d6e,"STRONG",{});var zet=s(_ne);nro=r(zet,"wav2vec2-conformer"),zet.forEach(t),sro=r(d6e," \u2014 "),aP=n(d6e,"A",{href:!0});var Qet=s(aP);lro=r(Qet,"Wav2Vec2ConformerConfig"),Qet.forEach(t),iro=r(d6e," (Wav2Vec2-Conformer model)"),d6e.forEach(t),dro=i(L),Sg=n(L,"LI",{});var c6e=s(Sg);une=n(c6e,"STRONG",{});var Wet=s(une);cro=r(Wet,"wavlm"),Wet.forEach(t),fro=r(c6e," \u2014 "),nP=n(c6e,"A",{href:!0});var Het=s(nP);mro=r(Het,"WavLMConfig"),Het.forEach(t),gro=r(c6e," (WavLM model)"),c6e.forEach(t),hro=i(L),Rg=n(L,"LI",{});var f6e=s(Rg);bne=n(f6e,"STRONG",{});var Uet=s(bne);pro=r(Uet,"xglm"),Uet.forEach(t),_ro=r(f6e," \u2014 "),sP=n(f6e,"A",{href:!0});var Jet=s(sP);uro=r(Jet,"XGLMConfig"),Jet.forEach(t),bro=r(f6e," (XGLM model)"),f6e.forEach(t),vro=i(L),Pg=n(L,"LI",{});var m6e=s(Pg);vne=n(m6e,"STRONG",{});var Yet=s(vne);Fro=r(Yet,"xlm"),Yet.forEach(t),Tro=r(m6e," \u2014 "),lP=n(m6e,"A",{href:!0});var Ket=s(lP);Mro=r(Ket,"XLMConfig"),Ket.forEach(t),Ero=r(m6e," (XLM model)"),m6e.forEach(t),Cro=i(L),Bg=n(L,"LI",{});var g6e=s(Bg);Fne=n(g6e,"STRONG",{});var Zet=s(Fne);wro=r(Zet,"xlm-prophetnet"),Zet.forEach(t),Aro=r(g6e," \u2014 "),iP=n(g6e,"A",{href:!0});var eot=s(iP);Lro=r(eot,"XLMProphetNetConfig"),eot.forEach(t),yro=r(g6e," (XLM-ProphetNet model)"),g6e.forEach(t),xro=i(L),Ig=n(L,"LI",{});var h6e=s(Ig);Tne=n(h6e,"STRONG",{});var oot=s(Tne);$ro=r(oot,"xlm-roberta"),oot.forEach(t),kro=r(h6e," \u2014 "),dP=n(h6e,"A",{href:!0});var rot=s(dP);Sro=r(rot,"XLMRobertaConfig"),rot.forEach(t),Rro=r(h6e," (XLM-RoBERTa model)"),h6e.forEach(t),Pro=i(L),Ng=n(L,"LI",{});var p6e=s(Ng);Mne=n(p6e,"STRONG",{});var tot=s(Mne);Bro=r(tot,"xlm-roberta-xl"),tot.forEach(t),Iro=r(p6e," \u2014 "),cP=n(p6e,"A",{href:!0});var aot=s(cP);Nro=r(aot,"XLMRobertaXLConfig"),aot.forEach(t),qro=r(p6e," (XLM-RoBERTa-XL model)"),p6e.forEach(t),jro=i(L),qg=n(L,"LI",{});var _6e=s(qg);Ene=n(_6e,"STRONG",{});var not=s(Ene);Dro=r(not,"xlnet"),not.forEach(t),Gro=r(_6e," \u2014 "),fP=n(_6e,"A",{href:!0});var sot=s(fP);Oro=r(sot,"XLNetConfig"),sot.forEach(t),Vro=r(_6e," (XLNet model)"),_6e.forEach(t),Xro=i(L),jg=n(L,"LI",{});var u6e=s(jg);Cne=n(u6e,"STRONG",{});var lot=s(Cne);zro=r(lot,"yolos"),lot.forEach(t),Qro=r(u6e," \u2014 "),mP=n(u6e,"A",{href:!0});var iot=s(mP);Wro=r(iot,"YolosConfig"),iot.forEach(t),Hro=r(u6e," (YOLOS model)"),u6e.forEach(t),Uro=i(L),Dg=n(L,"LI",{});var b6e=s(Dg);wne=n(b6e,"STRONG",{});var dot=s(wne);Jro=r(dot,"yoso"),dot.forEach(t),Yro=r(b6e," \u2014 "),gP=n(b6e,"A",{href:!0});var cot=s(gP);Kro=r(cot,"YosoConfig"),cot.forEach(t),Zro=r(b6e," (YOSO model)"),b6e.forEach(t),L.forEach(t),eto=i(tt),T(Gg.$$.fragment,tt),tt.forEach(t),oto=i(rt),Og=n(rt,"DIV",{class:!0});var GVe=s(Og);T(B6.$$.fragment,GVe),rto=i(GVe),Ane=n(GVe,"P",{});var fot=s(Ane);tto=r(fot,"Register a new configuration for this class."),fot.forEach(t),GVe.forEach(t),rt.forEach(t),OGe=i(f),ki=n(f,"H2",{class:!0});var OVe=s(ki);Vg=n(OVe,"A",{id:!0,class:!0,href:!0});var mot=s(Vg);Lne=n(mot,"SPAN",{});var got=s(Lne);T(I6.$$.fragment,got),got.forEach(t),mot.forEach(t),ato=i(OVe),yne=n(OVe,"SPAN",{});var hot=s(yne);nto=r(hot,"AutoTokenizer"),hot.forEach(t),OVe.forEach(t),VGe=i(f),Ao=n(f,"DIV",{class:!0});var Qs=s(Ao);T(N6.$$.fragment,Qs),sto=i(Qs),q6=n(Qs,"P",{});var VVe=s(q6);lto=r(VVe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),hP=n(VVe,"A",{href:!0});var pot=s(hP);ito=r(pot,"AutoTokenizer.from_pretrained()"),pot.forEach(t),dto=r(VVe," class method."),VVe.forEach(t),cto=i(Qs),j6=n(Qs,"P",{});var XVe=s(j6);fto=r(XVe,"This class cannot be instantiated directly using "),xne=n(XVe,"CODE",{});var _ot=s(xne);mto=r(_ot,"__init__()"),_ot.forEach(t),gto=r(XVe," (throws an error)."),XVe.forEach(t),hto=i(Qs),Ar=n(Qs,"DIV",{class:!0});var Ws=s(Ar);T(D6.$$.fragment,Ws),pto=i(Ws),$ne=n(Ws,"P",{});var uot=s($ne);_to=r(uot,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),uot.forEach(t),uto=i(Ws),$a=n(Ws,"P",{});var yw=s($a);bto=r(yw,"The tokenizer class to instantiate is selected based on the "),kne=n(yw,"CODE",{});var bot=s(kne);vto=r(bot,"model_type"),bot.forEach(t),Fto=r(yw,` property of the config object (either
passed as an argument or loaded from `),Sne=n(yw,"CODE",{});var vot=s(Sne);Tto=r(vot,"pretrained_model_name_or_path"),vot.forEach(t),Mto=r(yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rne=n(yw,"CODE",{});var Fot=s(Rne);Eto=r(Fot,"pretrained_model_name_or_path"),Fot.forEach(t),Cto=r(yw,":"),yw.forEach(t),wto=i(Ws),k=n(Ws,"UL",{});var S=s(k);Nn=n(S,"LI",{});var Q$=s(Nn);Pne=n(Q$,"STRONG",{});var Tot=s(Pne);Ato=r(Tot,"albert"),Tot.forEach(t),Lto=r(Q$," \u2014 "),pP=n(Q$,"A",{href:!0});var Mot=s(pP);yto=r(Mot,"AlbertTokenizer"),Mot.forEach(t),xto=r(Q$," or "),_P=n(Q$,"A",{href:!0});var Eot=s(_P);$to=r(Eot,"AlbertTokenizerFast"),Eot.forEach(t),kto=r(Q$," (ALBERT model)"),Q$.forEach(t),Sto=i(S),qn=n(S,"LI",{});var W$=s(qn);Bne=n(W$,"STRONG",{});var Cot=s(Bne);Rto=r(Cot,"bart"),Cot.forEach(t),Pto=r(W$," \u2014 "),uP=n(W$,"A",{href:!0});var wot=s(uP);Bto=r(wot,"BartTokenizer"),wot.forEach(t),Ito=r(W$," or "),bP=n(W$,"A",{href:!0});var Aot=s(bP);Nto=r(Aot,"BartTokenizerFast"),Aot.forEach(t),qto=r(W$," (BART model)"),W$.forEach(t),jto=i(S),jn=n(S,"LI",{});var H$=s(jn);Ine=n(H$,"STRONG",{});var Lot=s(Ine);Dto=r(Lot,"barthez"),Lot.forEach(t),Gto=r(H$," \u2014 "),vP=n(H$,"A",{href:!0});var yot=s(vP);Oto=r(yot,"BarthezTokenizer"),yot.forEach(t),Vto=r(H$," or "),FP=n(H$,"A",{href:!0});var xot=s(FP);Xto=r(xot,"BarthezTokenizerFast"),xot.forEach(t),zto=r(H$," (BARThez model)"),H$.forEach(t),Qto=i(S),Xg=n(S,"LI",{});var v6e=s(Xg);Nne=n(v6e,"STRONG",{});var $ot=s(Nne);Wto=r($ot,"bartpho"),$ot.forEach(t),Hto=r(v6e," \u2014 "),TP=n(v6e,"A",{href:!0});var kot=s(TP);Uto=r(kot,"BartphoTokenizer"),kot.forEach(t),Jto=r(v6e," (BARTpho model)"),v6e.forEach(t),Yto=i(S),Dn=n(S,"LI",{});var U$=s(Dn);qne=n(U$,"STRONG",{});var Sot=s(qne);Kto=r(Sot,"bert"),Sot.forEach(t),Zto=r(U$," \u2014 "),MP=n(U$,"A",{href:!0});var Rot=s(MP);eao=r(Rot,"BertTokenizer"),Rot.forEach(t),oao=r(U$," or "),EP=n(U$,"A",{href:!0});var Pot=s(EP);rao=r(Pot,"BertTokenizerFast"),Pot.forEach(t),tao=r(U$," (BERT model)"),U$.forEach(t),aao=i(S),zg=n(S,"LI",{});var F6e=s(zg);jne=n(F6e,"STRONG",{});var Bot=s(jne);nao=r(Bot,"bert-generation"),Bot.forEach(t),sao=r(F6e," \u2014 "),CP=n(F6e,"A",{href:!0});var Iot=s(CP);lao=r(Iot,"BertGenerationTokenizer"),Iot.forEach(t),iao=r(F6e," (Bert Generation model)"),F6e.forEach(t),dao=i(S),Qg=n(S,"LI",{});var T6e=s(Qg);Dne=n(T6e,"STRONG",{});var Not=s(Dne);cao=r(Not,"bert-japanese"),Not.forEach(t),fao=r(T6e," \u2014 "),wP=n(T6e,"A",{href:!0});var qot=s(wP);mao=r(qot,"BertJapaneseTokenizer"),qot.forEach(t),gao=r(T6e," (BertJapanese model)"),T6e.forEach(t),hao=i(S),Wg=n(S,"LI",{});var M6e=s(Wg);Gne=n(M6e,"STRONG",{});var jot=s(Gne);pao=r(jot,"bertweet"),jot.forEach(t),_ao=r(M6e," \u2014 "),AP=n(M6e,"A",{href:!0});var Dot=s(AP);uao=r(Dot,"BertweetTokenizer"),Dot.forEach(t),bao=r(M6e," (BERTweet model)"),M6e.forEach(t),vao=i(S),Gn=n(S,"LI",{});var J$=s(Gn);One=n(J$,"STRONG",{});var Got=s(One);Fao=r(Got,"big_bird"),Got.forEach(t),Tao=r(J$," \u2014 "),LP=n(J$,"A",{href:!0});var Oot=s(LP);Mao=r(Oot,"BigBirdTokenizer"),Oot.forEach(t),Eao=r(J$," or "),yP=n(J$,"A",{href:!0});var Vot=s(yP);Cao=r(Vot,"BigBirdTokenizerFast"),Vot.forEach(t),wao=r(J$," (BigBird model)"),J$.forEach(t),Aao=i(S),On=n(S,"LI",{});var Y$=s(On);Vne=n(Y$,"STRONG",{});var Xot=s(Vne);Lao=r(Xot,"bigbird_pegasus"),Xot.forEach(t),yao=r(Y$," \u2014 "),xP=n(Y$,"A",{href:!0});var zot=s(xP);xao=r(zot,"PegasusTokenizer"),zot.forEach(t),$ao=r(Y$," or "),$P=n(Y$,"A",{href:!0});var Qot=s($P);kao=r(Qot,"PegasusTokenizerFast"),Qot.forEach(t),Sao=r(Y$," (BigBird-Pegasus model)"),Y$.forEach(t),Rao=i(S),Vn=n(S,"LI",{});var K$=s(Vn);Xne=n(K$,"STRONG",{});var Wot=s(Xne);Pao=r(Wot,"blenderbot"),Wot.forEach(t),Bao=r(K$," \u2014 "),kP=n(K$,"A",{href:!0});var Hot=s(kP);Iao=r(Hot,"BlenderbotTokenizer"),Hot.forEach(t),Nao=r(K$," or "),SP=n(K$,"A",{href:!0});var Uot=s(SP);qao=r(Uot,"BlenderbotTokenizerFast"),Uot.forEach(t),jao=r(K$," (Blenderbot model)"),K$.forEach(t),Dao=i(S),Hg=n(S,"LI",{});var E6e=s(Hg);zne=n(E6e,"STRONG",{});var Jot=s(zne);Gao=r(Jot,"blenderbot-small"),Jot.forEach(t),Oao=r(E6e," \u2014 "),RP=n(E6e,"A",{href:!0});var Yot=s(RP);Vao=r(Yot,"BlenderbotSmallTokenizer"),Yot.forEach(t),Xao=r(E6e," (BlenderbotSmall model)"),E6e.forEach(t),zao=i(S),Ug=n(S,"LI",{});var C6e=s(Ug);Qne=n(C6e,"STRONG",{});var Kot=s(Qne);Qao=r(Kot,"bloom"),Kot.forEach(t),Wao=r(C6e," \u2014 "),PP=n(C6e,"A",{href:!0});var Zot=s(PP);Hao=r(Zot,"BloomTokenizerFast"),Zot.forEach(t),Uao=r(C6e," (BLOOM model)"),C6e.forEach(t),Jao=i(S),Jg=n(S,"LI",{});var w6e=s(Jg);Wne=n(w6e,"STRONG",{});var ert=s(Wne);Yao=r(ert,"byt5"),ert.forEach(t),Kao=r(w6e," \u2014 "),BP=n(w6e,"A",{href:!0});var ort=s(BP);Zao=r(ort,"ByT5Tokenizer"),ort.forEach(t),eno=r(w6e," (ByT5 model)"),w6e.forEach(t),ono=i(S),Xn=n(S,"LI",{});var Z$=s(Xn);Hne=n(Z$,"STRONG",{});var rrt=s(Hne);rno=r(rrt,"camembert"),rrt.forEach(t),tno=r(Z$," \u2014 "),IP=n(Z$,"A",{href:!0});var trt=s(IP);ano=r(trt,"CamembertTokenizer"),trt.forEach(t),nno=r(Z$," or "),NP=n(Z$,"A",{href:!0});var art=s(NP);sno=r(art,"CamembertTokenizerFast"),art.forEach(t),lno=r(Z$," (CamemBERT model)"),Z$.forEach(t),ino=i(S),Yg=n(S,"LI",{});var A6e=s(Yg);Une=n(A6e,"STRONG",{});var nrt=s(Une);dno=r(nrt,"canine"),nrt.forEach(t),cno=r(A6e," \u2014 "),qP=n(A6e,"A",{href:!0});var srt=s(qP);fno=r(srt,"CanineTokenizer"),srt.forEach(t),mno=r(A6e," (CANINE model)"),A6e.forEach(t),gno=i(S),zn=n(S,"LI",{});var ek=s(zn);Jne=n(ek,"STRONG",{});var lrt=s(Jne);hno=r(lrt,"clip"),lrt.forEach(t),pno=r(ek," \u2014 "),jP=n(ek,"A",{href:!0});var irt=s(jP);_no=r(irt,"CLIPTokenizer"),irt.forEach(t),uno=r(ek," or "),DP=n(ek,"A",{href:!0});var drt=s(DP);bno=r(drt,"CLIPTokenizerFast"),drt.forEach(t),vno=r(ek," (CLIP model)"),ek.forEach(t),Fno=i(S),Qn=n(S,"LI",{});var ok=s(Qn);Yne=n(ok,"STRONG",{});var crt=s(Yne);Tno=r(crt,"convbert"),crt.forEach(t),Mno=r(ok," \u2014 "),GP=n(ok,"A",{href:!0});var frt=s(GP);Eno=r(frt,"ConvBertTokenizer"),frt.forEach(t),Cno=r(ok," or "),OP=n(ok,"A",{href:!0});var mrt=s(OP);wno=r(mrt,"ConvBertTokenizerFast"),mrt.forEach(t),Ano=r(ok," (ConvBERT model)"),ok.forEach(t),Lno=i(S),Wn=n(S,"LI",{});var rk=s(Wn);Kne=n(rk,"STRONG",{});var grt=s(Kne);yno=r(grt,"cpm"),grt.forEach(t),xno=r(rk," \u2014 "),VP=n(rk,"A",{href:!0});var hrt=s(VP);$no=r(hrt,"CpmTokenizer"),hrt.forEach(t),kno=r(rk," or "),XP=n(rk,"A",{href:!0});var prt=s(XP);Sno=r(prt,"CpmTokenizerFast"),prt.forEach(t),Rno=r(rk," (CPM model)"),rk.forEach(t),Pno=i(S),Kg=n(S,"LI",{});var L6e=s(Kg);Zne=n(L6e,"STRONG",{});var _rt=s(Zne);Bno=r(_rt,"ctrl"),_rt.forEach(t),Ino=r(L6e," \u2014 "),zP=n(L6e,"A",{href:!0});var urt=s(zP);Nno=r(urt,"CTRLTokenizer"),urt.forEach(t),qno=r(L6e," (CTRL model)"),L6e.forEach(t),jno=i(S),Hn=n(S,"LI",{});var tk=s(Hn);ese=n(tk,"STRONG",{});var brt=s(ese);Dno=r(brt,"data2vec-text"),brt.forEach(t),Gno=r(tk," \u2014 "),QP=n(tk,"A",{href:!0});var vrt=s(QP);Ono=r(vrt,"RobertaTokenizer"),vrt.forEach(t),Vno=r(tk," or "),WP=n(tk,"A",{href:!0});var Frt=s(WP);Xno=r(Frt,"RobertaTokenizerFast"),Frt.forEach(t),zno=r(tk," (Data2VecText model)"),tk.forEach(t),Qno=i(S),Un=n(S,"LI",{});var ak=s(Un);ose=n(ak,"STRONG",{});var Trt=s(ose);Wno=r(Trt,"deberta"),Trt.forEach(t),Hno=r(ak," \u2014 "),HP=n(ak,"A",{href:!0});var Mrt=s(HP);Uno=r(Mrt,"DebertaTokenizer"),Mrt.forEach(t),Jno=r(ak," or "),UP=n(ak,"A",{href:!0});var Ert=s(UP);Yno=r(Ert,"DebertaTokenizerFast"),Ert.forEach(t),Kno=r(ak," (DeBERTa model)"),ak.forEach(t),Zno=i(S),Jn=n(S,"LI",{});var nk=s(Jn);rse=n(nk,"STRONG",{});var Crt=s(rse);eso=r(Crt,"deberta-v2"),Crt.forEach(t),oso=r(nk," \u2014 "),JP=n(nk,"A",{href:!0});var wrt=s(JP);rso=r(wrt,"DebertaV2Tokenizer"),wrt.forEach(t),tso=r(nk," or "),YP=n(nk,"A",{href:!0});var Art=s(YP);aso=r(Art,"DebertaV2TokenizerFast"),Art.forEach(t),nso=r(nk," (DeBERTa-v2 model)"),nk.forEach(t),sso=i(S),Yn=n(S,"LI",{});var sk=s(Yn);tse=n(sk,"STRONG",{});var Lrt=s(tse);lso=r(Lrt,"distilbert"),Lrt.forEach(t),iso=r(sk," \u2014 "),KP=n(sk,"A",{href:!0});var yrt=s(KP);dso=r(yrt,"DistilBertTokenizer"),yrt.forEach(t),cso=r(sk," or "),ZP=n(sk,"A",{href:!0});var xrt=s(ZP);fso=r(xrt,"DistilBertTokenizerFast"),xrt.forEach(t),mso=r(sk," (DistilBERT model)"),sk.forEach(t),gso=i(S),Kn=n(S,"LI",{});var lk=s(Kn);ase=n(lk,"STRONG",{});var $rt=s(ase);hso=r($rt,"dpr"),$rt.forEach(t),pso=r(lk," \u2014 "),eB=n(lk,"A",{href:!0});var krt=s(eB);_so=r(krt,"DPRQuestionEncoderTokenizer"),krt.forEach(t),uso=r(lk," or "),oB=n(lk,"A",{href:!0});var Srt=s(oB);bso=r(Srt,"DPRQuestionEncoderTokenizerFast"),Srt.forEach(t),vso=r(lk," (DPR model)"),lk.forEach(t),Fso=i(S),Zn=n(S,"LI",{});var ik=s(Zn);nse=n(ik,"STRONG",{});var Rrt=s(nse);Tso=r(Rrt,"electra"),Rrt.forEach(t),Mso=r(ik," \u2014 "),rB=n(ik,"A",{href:!0});var Prt=s(rB);Eso=r(Prt,"ElectraTokenizer"),Prt.forEach(t),Cso=r(ik," or "),tB=n(ik,"A",{href:!0});var Brt=s(tB);wso=r(Brt,"ElectraTokenizerFast"),Brt.forEach(t),Aso=r(ik," (ELECTRA model)"),ik.forEach(t),Lso=i(S),Zg=n(S,"LI",{});var y6e=s(Zg);sse=n(y6e,"STRONG",{});var Irt=s(sse);yso=r(Irt,"flaubert"),Irt.forEach(t),xso=r(y6e," \u2014 "),aB=n(y6e,"A",{href:!0});var Nrt=s(aB);$so=r(Nrt,"FlaubertTokenizer"),Nrt.forEach(t),kso=r(y6e," (FlauBERT model)"),y6e.forEach(t),Sso=i(S),es=n(S,"LI",{});var dk=s(es);lse=n(dk,"STRONG",{});var qrt=s(lse);Rso=r(qrt,"fnet"),qrt.forEach(t),Pso=r(dk," \u2014 "),nB=n(dk,"A",{href:!0});var jrt=s(nB);Bso=r(jrt,"FNetTokenizer"),jrt.forEach(t),Iso=r(dk," or "),sB=n(dk,"A",{href:!0});var Drt=s(sB);Nso=r(Drt,"FNetTokenizerFast"),Drt.forEach(t),qso=r(dk," (FNet model)"),dk.forEach(t),jso=i(S),eh=n(S,"LI",{});var x6e=s(eh);ise=n(x6e,"STRONG",{});var Grt=s(ise);Dso=r(Grt,"fsmt"),Grt.forEach(t),Gso=r(x6e," \u2014 "),lB=n(x6e,"A",{href:!0});var Ort=s(lB);Oso=r(Ort,"FSMTTokenizer"),Ort.forEach(t),Vso=r(x6e," (FairSeq Machine-Translation model)"),x6e.forEach(t),Xso=i(S),os=n(S,"LI",{});var ck=s(os);dse=n(ck,"STRONG",{});var Vrt=s(dse);zso=r(Vrt,"funnel"),Vrt.forEach(t),Qso=r(ck," \u2014 "),iB=n(ck,"A",{href:!0});var Xrt=s(iB);Wso=r(Xrt,"FunnelTokenizer"),Xrt.forEach(t),Hso=r(ck," or "),dB=n(ck,"A",{href:!0});var zrt=s(dB);Uso=r(zrt,"FunnelTokenizerFast"),zrt.forEach(t),Jso=r(ck," (Funnel Transformer model)"),ck.forEach(t),Yso=i(S),rs=n(S,"LI",{});var fk=s(rs);cse=n(fk,"STRONG",{});var Qrt=s(cse);Kso=r(Qrt,"gpt2"),Qrt.forEach(t),Zso=r(fk," \u2014 "),cB=n(fk,"A",{href:!0});var Wrt=s(cB);elo=r(Wrt,"GPT2Tokenizer"),Wrt.forEach(t),olo=r(fk," or "),fB=n(fk,"A",{href:!0});var Hrt=s(fB);rlo=r(Hrt,"GPT2TokenizerFast"),Hrt.forEach(t),tlo=r(fk," (OpenAI GPT-2 model)"),fk.forEach(t),alo=i(S),ts=n(S,"LI",{});var mk=s(ts);fse=n(mk,"STRONG",{});var Urt=s(fse);nlo=r(Urt,"gpt_neo"),Urt.forEach(t),slo=r(mk," \u2014 "),mB=n(mk,"A",{href:!0});var Jrt=s(mB);llo=r(Jrt,"GPT2Tokenizer"),Jrt.forEach(t),ilo=r(mk," or "),gB=n(mk,"A",{href:!0});var Yrt=s(gB);dlo=r(Yrt,"GPT2TokenizerFast"),Yrt.forEach(t),clo=r(mk," (GPT Neo model)"),mk.forEach(t),flo=i(S),oh=n(S,"LI",{});var $6e=s(oh);mse=n($6e,"STRONG",{});var Krt=s(mse);mlo=r(Krt,"gpt_neox"),Krt.forEach(t),glo=r($6e," \u2014 "),hB=n($6e,"A",{href:!0});var Zrt=s(hB);hlo=r(Zrt,"GPTNeoXTokenizerFast"),Zrt.forEach(t),plo=r($6e," (GPT NeoX model)"),$6e.forEach(t),_lo=i(S),as=n(S,"LI",{});var gk=s(as);gse=n(gk,"STRONG",{});var ett=s(gse);ulo=r(ett,"gptj"),ett.forEach(t),blo=r(gk," \u2014 "),pB=n(gk,"A",{href:!0});var ott=s(pB);vlo=r(ott,"GPT2Tokenizer"),ott.forEach(t),Flo=r(gk," or "),_B=n(gk,"A",{href:!0});var rtt=s(_B);Tlo=r(rtt,"GPT2TokenizerFast"),rtt.forEach(t),Mlo=r(gk," (GPT-J model)"),gk.forEach(t),Elo=i(S),ns=n(S,"LI",{});var hk=s(ns);hse=n(hk,"STRONG",{});var ttt=s(hse);Clo=r(ttt,"herbert"),ttt.forEach(t),wlo=r(hk," \u2014 "),uB=n(hk,"A",{href:!0});var att=s(uB);Alo=r(att,"HerbertTokenizer"),att.forEach(t),Llo=r(hk," or "),bB=n(hk,"A",{href:!0});var ntt=s(bB);ylo=r(ntt,"HerbertTokenizerFast"),ntt.forEach(t),xlo=r(hk," (HerBERT model)"),hk.forEach(t),$lo=i(S),rh=n(S,"LI",{});var k6e=s(rh);pse=n(k6e,"STRONG",{});var stt=s(pse);klo=r(stt,"hubert"),stt.forEach(t),Slo=r(k6e," \u2014 "),vB=n(k6e,"A",{href:!0});var ltt=s(vB);Rlo=r(ltt,"Wav2Vec2CTCTokenizer"),ltt.forEach(t),Plo=r(k6e," (Hubert model)"),k6e.forEach(t),Blo=i(S),ss=n(S,"LI",{});var pk=s(ss);_se=n(pk,"STRONG",{});var itt=s(_se);Ilo=r(itt,"ibert"),itt.forEach(t),Nlo=r(pk," \u2014 "),FB=n(pk,"A",{href:!0});var dtt=s(FB);qlo=r(dtt,"RobertaTokenizer"),dtt.forEach(t),jlo=r(pk," or "),TB=n(pk,"A",{href:!0});var ctt=s(TB);Dlo=r(ctt,"RobertaTokenizerFast"),ctt.forEach(t),Glo=r(pk," (I-BERT model)"),pk.forEach(t),Olo=i(S),ls=n(S,"LI",{});var _k=s(ls);use=n(_k,"STRONG",{});var ftt=s(use);Vlo=r(ftt,"layoutlm"),ftt.forEach(t),Xlo=r(_k," \u2014 "),MB=n(_k,"A",{href:!0});var mtt=s(MB);zlo=r(mtt,"LayoutLMTokenizer"),mtt.forEach(t),Qlo=r(_k," or "),EB=n(_k,"A",{href:!0});var gtt=s(EB);Wlo=r(gtt,"LayoutLMTokenizerFast"),gtt.forEach(t),Hlo=r(_k," (LayoutLM model)"),_k.forEach(t),Ulo=i(S),is=n(S,"LI",{});var uk=s(is);bse=n(uk,"STRONG",{});var htt=s(bse);Jlo=r(htt,"layoutlmv2"),htt.forEach(t),Ylo=r(uk," \u2014 "),CB=n(uk,"A",{href:!0});var ptt=s(CB);Klo=r(ptt,"LayoutLMv2Tokenizer"),ptt.forEach(t),Zlo=r(uk," or "),wB=n(uk,"A",{href:!0});var _tt=s(wB);eio=r(_tt,"LayoutLMv2TokenizerFast"),_tt.forEach(t),oio=r(uk," (LayoutLMv2 model)"),uk.forEach(t),rio=i(S),ds=n(S,"LI",{});var bk=s(ds);vse=n(bk,"STRONG",{});var utt=s(vse);tio=r(utt,"layoutlmv3"),utt.forEach(t),aio=r(bk," \u2014 "),AB=n(bk,"A",{href:!0});var btt=s(AB);nio=r(btt,"LayoutLMv3Tokenizer"),btt.forEach(t),sio=r(bk," or "),LB=n(bk,"A",{href:!0});var vtt=s(LB);lio=r(vtt,"LayoutLMv3TokenizerFast"),vtt.forEach(t),iio=r(bk," (LayoutLMv3 model)"),bk.forEach(t),dio=i(S),cs=n(S,"LI",{});var vk=s(cs);Fse=n(vk,"STRONG",{});var Ftt=s(Fse);cio=r(Ftt,"layoutxlm"),Ftt.forEach(t),fio=r(vk," \u2014 "),yB=n(vk,"A",{href:!0});var Ttt=s(yB);mio=r(Ttt,"LayoutXLMTokenizer"),Ttt.forEach(t),gio=r(vk," or "),xB=n(vk,"A",{href:!0});var Mtt=s(xB);hio=r(Mtt,"LayoutXLMTokenizerFast"),Mtt.forEach(t),pio=r(vk," (LayoutXLM model)"),vk.forEach(t),_io=i(S),fs=n(S,"LI",{});var Fk=s(fs);Tse=n(Fk,"STRONG",{});var Ett=s(Tse);uio=r(Ett,"led"),Ett.forEach(t),bio=r(Fk," \u2014 "),$B=n(Fk,"A",{href:!0});var Ctt=s($B);vio=r(Ctt,"LEDTokenizer"),Ctt.forEach(t),Fio=r(Fk," or "),kB=n(Fk,"A",{href:!0});var wtt=s(kB);Tio=r(wtt,"LEDTokenizerFast"),wtt.forEach(t),Mio=r(Fk," (LED model)"),Fk.forEach(t),Eio=i(S),ms=n(S,"LI",{});var Tk=s(ms);Mse=n(Tk,"STRONG",{});var Att=s(Mse);Cio=r(Att,"longformer"),Att.forEach(t),wio=r(Tk," \u2014 "),SB=n(Tk,"A",{href:!0});var Ltt=s(SB);Aio=r(Ltt,"LongformerTokenizer"),Ltt.forEach(t),Lio=r(Tk," or "),RB=n(Tk,"A",{href:!0});var ytt=s(RB);yio=r(ytt,"LongformerTokenizerFast"),ytt.forEach(t),xio=r(Tk," (Longformer model)"),Tk.forEach(t),$io=i(S),gs=n(S,"LI",{});var Mk=s(gs);Ese=n(Mk,"STRONG",{});var xtt=s(Ese);kio=r(xtt,"longt5"),xtt.forEach(t),Sio=r(Mk," \u2014 "),PB=n(Mk,"A",{href:!0});var $tt=s(PB);Rio=r($tt,"T5Tokenizer"),$tt.forEach(t),Pio=r(Mk," or "),BB=n(Mk,"A",{href:!0});var ktt=s(BB);Bio=r(ktt,"T5TokenizerFast"),ktt.forEach(t),Iio=r(Mk," (LongT5 model)"),Mk.forEach(t),Nio=i(S),th=n(S,"LI",{});var S6e=s(th);Cse=n(S6e,"STRONG",{});var Stt=s(Cse);qio=r(Stt,"luke"),Stt.forEach(t),jio=r(S6e," \u2014 "),IB=n(S6e,"A",{href:!0});var Rtt=s(IB);Dio=r(Rtt,"LukeTokenizer"),Rtt.forEach(t),Gio=r(S6e," (LUKE model)"),S6e.forEach(t),Oio=i(S),hs=n(S,"LI",{});var Ek=s(hs);wse=n(Ek,"STRONG",{});var Ptt=s(wse);Vio=r(Ptt,"lxmert"),Ptt.forEach(t),Xio=r(Ek," \u2014 "),NB=n(Ek,"A",{href:!0});var Btt=s(NB);zio=r(Btt,"LxmertTokenizer"),Btt.forEach(t),Qio=r(Ek," or "),qB=n(Ek,"A",{href:!0});var Itt=s(qB);Wio=r(Itt,"LxmertTokenizerFast"),Itt.forEach(t),Hio=r(Ek," (LXMERT model)"),Ek.forEach(t),Uio=i(S),ah=n(S,"LI",{});var R6e=s(ah);Ase=n(R6e,"STRONG",{});var Ntt=s(Ase);Jio=r(Ntt,"m2m_100"),Ntt.forEach(t),Yio=r(R6e," \u2014 "),jB=n(R6e,"A",{href:!0});var qtt=s(jB);Kio=r(qtt,"M2M100Tokenizer"),qtt.forEach(t),Zio=r(R6e," (M2M100 model)"),R6e.forEach(t),edo=i(S),nh=n(S,"LI",{});var P6e=s(nh);Lse=n(P6e,"STRONG",{});var jtt=s(Lse);odo=r(jtt,"marian"),jtt.forEach(t),rdo=r(P6e," \u2014 "),DB=n(P6e,"A",{href:!0});var Dtt=s(DB);tdo=r(Dtt,"MarianTokenizer"),Dtt.forEach(t),ado=r(P6e," (Marian model)"),P6e.forEach(t),ndo=i(S),ps=n(S,"LI",{});var Ck=s(ps);yse=n(Ck,"STRONG",{});var Gtt=s(yse);sdo=r(Gtt,"mbart"),Gtt.forEach(t),ldo=r(Ck," \u2014 "),GB=n(Ck,"A",{href:!0});var Ott=s(GB);ido=r(Ott,"MBartTokenizer"),Ott.forEach(t),ddo=r(Ck," or "),OB=n(Ck,"A",{href:!0});var Vtt=s(OB);cdo=r(Vtt,"MBartTokenizerFast"),Vtt.forEach(t),fdo=r(Ck," (mBART model)"),Ck.forEach(t),mdo=i(S),_s=n(S,"LI",{});var wk=s(_s);xse=n(wk,"STRONG",{});var Xtt=s(xse);gdo=r(Xtt,"mbart50"),Xtt.forEach(t),hdo=r(wk," \u2014 "),VB=n(wk,"A",{href:!0});var ztt=s(VB);pdo=r(ztt,"MBart50Tokenizer"),ztt.forEach(t),_do=r(wk," or "),XB=n(wk,"A",{href:!0});var Qtt=s(XB);udo=r(Qtt,"MBart50TokenizerFast"),Qtt.forEach(t),bdo=r(wk," (mBART-50 model)"),wk.forEach(t),vdo=i(S),us=n(S,"LI",{});var Ak=s(us);$se=n(Ak,"STRONG",{});var Wtt=s($se);Fdo=r(Wtt,"megatron-bert"),Wtt.forEach(t),Tdo=r(Ak," \u2014 "),zB=n(Ak,"A",{href:!0});var Htt=s(zB);Mdo=r(Htt,"BertTokenizer"),Htt.forEach(t),Edo=r(Ak," or "),QB=n(Ak,"A",{href:!0});var Utt=s(QB);Cdo=r(Utt,"BertTokenizerFast"),Utt.forEach(t),wdo=r(Ak," (Megatron-BERT model)"),Ak.forEach(t),Ado=i(S),sh=n(S,"LI",{});var B6e=s(sh);kse=n(B6e,"STRONG",{});var Jtt=s(kse);Ldo=r(Jtt,"mluke"),Jtt.forEach(t),ydo=r(B6e," \u2014 "),WB=n(B6e,"A",{href:!0});var Ytt=s(WB);xdo=r(Ytt,"MLukeTokenizer"),Ytt.forEach(t),$do=r(B6e," (mLUKE model)"),B6e.forEach(t),kdo=i(S),bs=n(S,"LI",{});var Lk=s(bs);Sse=n(Lk,"STRONG",{});var Ktt=s(Sse);Sdo=r(Ktt,"mobilebert"),Ktt.forEach(t),Rdo=r(Lk," \u2014 "),HB=n(Lk,"A",{href:!0});var Ztt=s(HB);Pdo=r(Ztt,"MobileBertTokenizer"),Ztt.forEach(t),Bdo=r(Lk," or "),UB=n(Lk,"A",{href:!0});var eat=s(UB);Ido=r(eat,"MobileBertTokenizerFast"),eat.forEach(t),Ndo=r(Lk," (MobileBERT model)"),Lk.forEach(t),qdo=i(S),vs=n(S,"LI",{});var yk=s(vs);Rse=n(yk,"STRONG",{});var oat=s(Rse);jdo=r(oat,"mpnet"),oat.forEach(t),Ddo=r(yk," \u2014 "),JB=n(yk,"A",{href:!0});var rat=s(JB);Gdo=r(rat,"MPNetTokenizer"),rat.forEach(t),Odo=r(yk," or "),YB=n(yk,"A",{href:!0});var tat=s(YB);Vdo=r(tat,"MPNetTokenizerFast"),tat.forEach(t),Xdo=r(yk," (MPNet model)"),yk.forEach(t),zdo=i(S),Fs=n(S,"LI",{});var xk=s(Fs);Pse=n(xk,"STRONG",{});var aat=s(Pse);Qdo=r(aat,"mt5"),aat.forEach(t),Wdo=r(xk," \u2014 "),KB=n(xk,"A",{href:!0});var nat=s(KB);Hdo=r(nat,"MT5Tokenizer"),nat.forEach(t),Udo=r(xk," or "),ZB=n(xk,"A",{href:!0});var sat=s(ZB);Jdo=r(sat,"MT5TokenizerFast"),sat.forEach(t),Ydo=r(xk," (MT5 model)"),xk.forEach(t),Kdo=i(S),Ts=n(S,"LI",{});var $k=s(Ts);Bse=n($k,"STRONG",{});var lat=s(Bse);Zdo=r(lat,"mvp"),lat.forEach(t),eco=r($k," \u2014 "),eI=n($k,"A",{href:!0});var iat=s(eI);oco=r(iat,"MvpTokenizer"),iat.forEach(t),rco=r($k," or "),oI=n($k,"A",{href:!0});var dat=s(oI);tco=r(dat,"MvpTokenizerFast"),dat.forEach(t),aco=r($k," (MVP model)"),$k.forEach(t),nco=i(S),Ms=n(S,"LI",{});var kk=s(Ms);Ise=n(kk,"STRONG",{});var cat=s(Ise);sco=r(cat,"nystromformer"),cat.forEach(t),lco=r(kk," \u2014 "),rI=n(kk,"A",{href:!0});var fat=s(rI);ico=r(fat,"AlbertTokenizer"),fat.forEach(t),dco=r(kk," or "),tI=n(kk,"A",{href:!0});var mat=s(tI);cco=r(mat,"AlbertTokenizerFast"),mat.forEach(t),fco=r(kk," (Nystr\xF6mformer model)"),kk.forEach(t),mco=i(S),Es=n(S,"LI",{});var Sk=s(Es);Nse=n(Sk,"STRONG",{});var gat=s(Nse);gco=r(gat,"openai-gpt"),gat.forEach(t),hco=r(Sk," \u2014 "),aI=n(Sk,"A",{href:!0});var hat=s(aI);pco=r(hat,"OpenAIGPTTokenizer"),hat.forEach(t),_co=r(Sk," or "),nI=n(Sk,"A",{href:!0});var pat=s(nI);uco=r(pat,"OpenAIGPTTokenizerFast"),pat.forEach(t),bco=r(Sk," (OpenAI GPT model)"),Sk.forEach(t),vco=i(S),lh=n(S,"LI",{});var I6e=s(lh);qse=n(I6e,"STRONG",{});var _at=s(qse);Fco=r(_at,"opt"),_at.forEach(t),Tco=r(I6e," \u2014 "),sI=n(I6e,"A",{href:!0});var uat=s(sI);Mco=r(uat,"GPT2Tokenizer"),uat.forEach(t),Eco=r(I6e," (OPT model)"),I6e.forEach(t),Cco=i(S),Cs=n(S,"LI",{});var Rk=s(Cs);jse=n(Rk,"STRONG",{});var bat=s(jse);wco=r(bat,"pegasus"),bat.forEach(t),Aco=r(Rk," \u2014 "),lI=n(Rk,"A",{href:!0});var vat=s(lI);Lco=r(vat,"PegasusTokenizer"),vat.forEach(t),yco=r(Rk," or "),iI=n(Rk,"A",{href:!0});var Fat=s(iI);xco=r(Fat,"PegasusTokenizerFast"),Fat.forEach(t),$co=r(Rk," (Pegasus model)"),Rk.forEach(t),kco=i(S),ih=n(S,"LI",{});var N6e=s(ih);Dse=n(N6e,"STRONG",{});var Tat=s(Dse);Sco=r(Tat,"perceiver"),Tat.forEach(t),Rco=r(N6e," \u2014 "),dI=n(N6e,"A",{href:!0});var Mat=s(dI);Pco=r(Mat,"PerceiverTokenizer"),Mat.forEach(t),Bco=r(N6e," (Perceiver model)"),N6e.forEach(t),Ico=i(S),dh=n(S,"LI",{});var q6e=s(dh);Gse=n(q6e,"STRONG",{});var Eat=s(Gse);Nco=r(Eat,"phobert"),Eat.forEach(t),qco=r(q6e," \u2014 "),cI=n(q6e,"A",{href:!0});var Cat=s(cI);jco=r(Cat,"PhobertTokenizer"),Cat.forEach(t),Dco=r(q6e," (PhoBERT model)"),q6e.forEach(t),Gco=i(S),ch=n(S,"LI",{});var j6e=s(ch);Ose=n(j6e,"STRONG",{});var wat=s(Ose);Oco=r(wat,"plbart"),wat.forEach(t),Vco=r(j6e," \u2014 "),fI=n(j6e,"A",{href:!0});var Aat=s(fI);Xco=r(Aat,"PLBartTokenizer"),Aat.forEach(t),zco=r(j6e," (PLBart model)"),j6e.forEach(t),Qco=i(S),fh=n(S,"LI",{});var D6e=s(fh);Vse=n(D6e,"STRONG",{});var Lat=s(Vse);Wco=r(Lat,"prophetnet"),Lat.forEach(t),Hco=r(D6e," \u2014 "),mI=n(D6e,"A",{href:!0});var yat=s(mI);Uco=r(yat,"ProphetNetTokenizer"),yat.forEach(t),Jco=r(D6e," (ProphetNet model)"),D6e.forEach(t),Yco=i(S),ws=n(S,"LI",{});var Pk=s(ws);Xse=n(Pk,"STRONG",{});var xat=s(Xse);Kco=r(xat,"qdqbert"),xat.forEach(t),Zco=r(Pk," \u2014 "),gI=n(Pk,"A",{href:!0});var $at=s(gI);efo=r($at,"BertTokenizer"),$at.forEach(t),ofo=r(Pk," or "),hI=n(Pk,"A",{href:!0});var kat=s(hI);rfo=r(kat,"BertTokenizerFast"),kat.forEach(t),tfo=r(Pk," (QDQBert model)"),Pk.forEach(t),afo=i(S),mh=n(S,"LI",{});var G6e=s(mh);zse=n(G6e,"STRONG",{});var Sat=s(zse);nfo=r(Sat,"rag"),Sat.forEach(t),sfo=r(G6e," \u2014 "),pI=n(G6e,"A",{href:!0});var Rat=s(pI);lfo=r(Rat,"RagTokenizer"),Rat.forEach(t),ifo=r(G6e," (RAG model)"),G6e.forEach(t),dfo=i(S),As=n(S,"LI",{});var Bk=s(As);Qse=n(Bk,"STRONG",{});var Pat=s(Qse);cfo=r(Pat,"realm"),Pat.forEach(t),ffo=r(Bk," \u2014 "),_I=n(Bk,"A",{href:!0});var Bat=s(_I);mfo=r(Bat,"RealmTokenizer"),Bat.forEach(t),gfo=r(Bk," or "),uI=n(Bk,"A",{href:!0});var Iat=s(uI);hfo=r(Iat,"RealmTokenizerFast"),Iat.forEach(t),pfo=r(Bk," (REALM model)"),Bk.forEach(t),_fo=i(S),Ls=n(S,"LI",{});var Ik=s(Ls);Wse=n(Ik,"STRONG",{});var Nat=s(Wse);ufo=r(Nat,"reformer"),Nat.forEach(t),bfo=r(Ik," \u2014 "),bI=n(Ik,"A",{href:!0});var qat=s(bI);vfo=r(qat,"ReformerTokenizer"),qat.forEach(t),Ffo=r(Ik," or "),vI=n(Ik,"A",{href:!0});var jat=s(vI);Tfo=r(jat,"ReformerTokenizerFast"),jat.forEach(t),Mfo=r(Ik," (Reformer model)"),Ik.forEach(t),Efo=i(S),ys=n(S,"LI",{});var Nk=s(ys);Hse=n(Nk,"STRONG",{});var Dat=s(Hse);Cfo=r(Dat,"rembert"),Dat.forEach(t),wfo=r(Nk," \u2014 "),FI=n(Nk,"A",{href:!0});var Gat=s(FI);Afo=r(Gat,"RemBertTokenizer"),Gat.forEach(t),Lfo=r(Nk," or "),TI=n(Nk,"A",{href:!0});var Oat=s(TI);yfo=r(Oat,"RemBertTokenizerFast"),Oat.forEach(t),xfo=r(Nk," (RemBERT model)"),Nk.forEach(t),$fo=i(S),xs=n(S,"LI",{});var qk=s(xs);Use=n(qk,"STRONG",{});var Vat=s(Use);kfo=r(Vat,"retribert"),Vat.forEach(t),Sfo=r(qk," \u2014 "),MI=n(qk,"A",{href:!0});var Xat=s(MI);Rfo=r(Xat,"RetriBertTokenizer"),Xat.forEach(t),Pfo=r(qk," or "),EI=n(qk,"A",{href:!0});var zat=s(EI);Bfo=r(zat,"RetriBertTokenizerFast"),zat.forEach(t),Ifo=r(qk," (RetriBERT model)"),qk.forEach(t),Nfo=i(S),$s=n(S,"LI",{});var jk=s($s);Jse=n(jk,"STRONG",{});var Qat=s(Jse);qfo=r(Qat,"roberta"),Qat.forEach(t),jfo=r(jk," \u2014 "),CI=n(jk,"A",{href:!0});var Wat=s(CI);Dfo=r(Wat,"RobertaTokenizer"),Wat.forEach(t),Gfo=r(jk," or "),wI=n(jk,"A",{href:!0});var Hat=s(wI);Ofo=r(Hat,"RobertaTokenizerFast"),Hat.forEach(t),Vfo=r(jk," (RoBERTa model)"),jk.forEach(t),Xfo=i(S),ks=n(S,"LI",{});var Dk=s(ks);Yse=n(Dk,"STRONG",{});var Uat=s(Yse);zfo=r(Uat,"roformer"),Uat.forEach(t),Qfo=r(Dk," \u2014 "),AI=n(Dk,"A",{href:!0});var Jat=s(AI);Wfo=r(Jat,"RoFormerTokenizer"),Jat.forEach(t),Hfo=r(Dk," or "),LI=n(Dk,"A",{href:!0});var Yat=s(LI);Ufo=r(Yat,"RoFormerTokenizerFast"),Yat.forEach(t),Jfo=r(Dk," (RoFormer model)"),Dk.forEach(t),Yfo=i(S),gh=n(S,"LI",{});var O6e=s(gh);Kse=n(O6e,"STRONG",{});var Kat=s(Kse);Kfo=r(Kat,"speech_to_text"),Kat.forEach(t),Zfo=r(O6e," \u2014 "),yI=n(O6e,"A",{href:!0});var Zat=s(yI);emo=r(Zat,"Speech2TextTokenizer"),Zat.forEach(t),omo=r(O6e," (Speech2Text model)"),O6e.forEach(t),rmo=i(S),hh=n(S,"LI",{});var V6e=s(hh);Zse=n(V6e,"STRONG",{});var ent=s(Zse);tmo=r(ent,"speech_to_text_2"),ent.forEach(t),amo=r(V6e," \u2014 "),xI=n(V6e,"A",{href:!0});var ont=s(xI);nmo=r(ont,"Speech2Text2Tokenizer"),ont.forEach(t),smo=r(V6e," (Speech2Text2 model)"),V6e.forEach(t),lmo=i(S),Ss=n(S,"LI",{});var Gk=s(Ss);ele=n(Gk,"STRONG",{});var rnt=s(ele);imo=r(rnt,"splinter"),rnt.forEach(t),dmo=r(Gk," \u2014 "),$I=n(Gk,"A",{href:!0});var tnt=s($I);cmo=r(tnt,"SplinterTokenizer"),tnt.forEach(t),fmo=r(Gk," or "),kI=n(Gk,"A",{href:!0});var ant=s(kI);mmo=r(ant,"SplinterTokenizerFast"),ant.forEach(t),gmo=r(Gk," (Splinter model)"),Gk.forEach(t),hmo=i(S),Rs=n(S,"LI",{});var Ok=s(Rs);ole=n(Ok,"STRONG",{});var nnt=s(ole);pmo=r(nnt,"squeezebert"),nnt.forEach(t),_mo=r(Ok," \u2014 "),SI=n(Ok,"A",{href:!0});var snt=s(SI);umo=r(snt,"SqueezeBertTokenizer"),snt.forEach(t),bmo=r(Ok," or "),RI=n(Ok,"A",{href:!0});var lnt=s(RI);vmo=r(lnt,"SqueezeBertTokenizerFast"),lnt.forEach(t),Fmo=r(Ok," (SqueezeBERT model)"),Ok.forEach(t),Tmo=i(S),Ps=n(S,"LI",{});var Vk=s(Ps);rle=n(Vk,"STRONG",{});var int=s(rle);Mmo=r(int,"t5"),int.forEach(t),Emo=r(Vk," \u2014 "),PI=n(Vk,"A",{href:!0});var dnt=s(PI);Cmo=r(dnt,"T5Tokenizer"),dnt.forEach(t),wmo=r(Vk," or "),BI=n(Vk,"A",{href:!0});var cnt=s(BI);Amo=r(cnt,"T5TokenizerFast"),cnt.forEach(t),Lmo=r(Vk," (T5 model)"),Vk.forEach(t),ymo=i(S),ph=n(S,"LI",{});var X6e=s(ph);tle=n(X6e,"STRONG",{});var fnt=s(tle);xmo=r(fnt,"tapas"),fnt.forEach(t),$mo=r(X6e," \u2014 "),II=n(X6e,"A",{href:!0});var mnt=s(II);kmo=r(mnt,"TapasTokenizer"),mnt.forEach(t),Smo=r(X6e," (TAPAS model)"),X6e.forEach(t),Rmo=i(S),_h=n(S,"LI",{});var z6e=s(_h);ale=n(z6e,"STRONG",{});var gnt=s(ale);Pmo=r(gnt,"tapex"),gnt.forEach(t),Bmo=r(z6e," \u2014 "),NI=n(z6e,"A",{href:!0});var hnt=s(NI);Imo=r(hnt,"TapexTokenizer"),hnt.forEach(t),Nmo=r(z6e," (TAPEX model)"),z6e.forEach(t),qmo=i(S),uh=n(S,"LI",{});var Q6e=s(uh);nle=n(Q6e,"STRONG",{});var pnt=s(nle);jmo=r(pnt,"transfo-xl"),pnt.forEach(t),Dmo=r(Q6e," \u2014 "),qI=n(Q6e,"A",{href:!0});var _nt=s(qI);Gmo=r(_nt,"TransfoXLTokenizer"),_nt.forEach(t),Omo=r(Q6e," (Transformer-XL model)"),Q6e.forEach(t),Vmo=i(S),Bs=n(S,"LI",{});var Xk=s(Bs);sle=n(Xk,"STRONG",{});var unt=s(sle);Xmo=r(unt,"vilt"),unt.forEach(t),zmo=r(Xk," \u2014 "),jI=n(Xk,"A",{href:!0});var bnt=s(jI);Qmo=r(bnt,"BertTokenizer"),bnt.forEach(t),Wmo=r(Xk," or "),DI=n(Xk,"A",{href:!0});var vnt=s(DI);Hmo=r(vnt,"BertTokenizerFast"),vnt.forEach(t),Umo=r(Xk," (ViLT model)"),Xk.forEach(t),Jmo=i(S),Is=n(S,"LI",{});var zk=s(Is);lle=n(zk,"STRONG",{});var Fnt=s(lle);Ymo=r(Fnt,"visual_bert"),Fnt.forEach(t),Kmo=r(zk," \u2014 "),GI=n(zk,"A",{href:!0});var Tnt=s(GI);Zmo=r(Tnt,"BertTokenizer"),Tnt.forEach(t),ego=r(zk," or "),OI=n(zk,"A",{href:!0});var Mnt=s(OI);ogo=r(Mnt,"BertTokenizerFast"),Mnt.forEach(t),rgo=r(zk," (VisualBERT model)"),zk.forEach(t),tgo=i(S),bh=n(S,"LI",{});var W6e=s(bh);ile=n(W6e,"STRONG",{});var Ent=s(ile);ago=r(Ent,"wav2vec2"),Ent.forEach(t),ngo=r(W6e," \u2014 "),VI=n(W6e,"A",{href:!0});var Cnt=s(VI);sgo=r(Cnt,"Wav2Vec2CTCTokenizer"),Cnt.forEach(t),lgo=r(W6e," (Wav2Vec2 model)"),W6e.forEach(t),igo=i(S),vh=n(S,"LI",{});var H6e=s(vh);dle=n(H6e,"STRONG",{});var wnt=s(dle);dgo=r(wnt,"wav2vec2-conformer"),wnt.forEach(t),cgo=r(H6e," \u2014 "),XI=n(H6e,"A",{href:!0});var Ant=s(XI);fgo=r(Ant,"Wav2Vec2CTCTokenizer"),Ant.forEach(t),mgo=r(H6e," (Wav2Vec2-Conformer model)"),H6e.forEach(t),ggo=i(S),Fh=n(S,"LI",{});var U6e=s(Fh);cle=n(U6e,"STRONG",{});var Lnt=s(cle);hgo=r(Lnt,"wav2vec2_phoneme"),Lnt.forEach(t),pgo=r(U6e," \u2014 "),zI=n(U6e,"A",{href:!0});var ynt=s(zI);_go=r(ynt,"Wav2Vec2PhonemeCTCTokenizer"),ynt.forEach(t),ugo=r(U6e," (Wav2Vec2Phoneme model)"),U6e.forEach(t),bgo=i(S),Ns=n(S,"LI",{});var Qk=s(Ns);fle=n(Qk,"STRONG",{});var xnt=s(fle);vgo=r(xnt,"xglm"),xnt.forEach(t),Fgo=r(Qk," \u2014 "),QI=n(Qk,"A",{href:!0});var $nt=s(QI);Tgo=r($nt,"XGLMTokenizer"),$nt.forEach(t),Mgo=r(Qk," or "),WI=n(Qk,"A",{href:!0});var knt=s(WI);Ego=r(knt,"XGLMTokenizerFast"),knt.forEach(t),Cgo=r(Qk," (XGLM model)"),Qk.forEach(t),wgo=i(S),Th=n(S,"LI",{});var J6e=s(Th);mle=n(J6e,"STRONG",{});var Snt=s(mle);Ago=r(Snt,"xlm"),Snt.forEach(t),Lgo=r(J6e," \u2014 "),HI=n(J6e,"A",{href:!0});var Rnt=s(HI);ygo=r(Rnt,"XLMTokenizer"),Rnt.forEach(t),xgo=r(J6e," (XLM model)"),J6e.forEach(t),$go=i(S),Mh=n(S,"LI",{});var Y6e=s(Mh);gle=n(Y6e,"STRONG",{});var Pnt=s(gle);kgo=r(Pnt,"xlm-prophetnet"),Pnt.forEach(t),Sgo=r(Y6e," \u2014 "),UI=n(Y6e,"A",{href:!0});var Bnt=s(UI);Rgo=r(Bnt,"XLMProphetNetTokenizer"),Bnt.forEach(t),Pgo=r(Y6e," (XLM-ProphetNet model)"),Y6e.forEach(t),Bgo=i(S),qs=n(S,"LI",{});var Wk=s(qs);hle=n(Wk,"STRONG",{});var Int=s(hle);Igo=r(Int,"xlm-roberta"),Int.forEach(t),Ngo=r(Wk," \u2014 "),JI=n(Wk,"A",{href:!0});var Nnt=s(JI);qgo=r(Nnt,"XLMRobertaTokenizer"),Nnt.forEach(t),jgo=r(Wk," or "),YI=n(Wk,"A",{href:!0});var qnt=s(YI);Dgo=r(qnt,"XLMRobertaTokenizerFast"),qnt.forEach(t),Ggo=r(Wk," (XLM-RoBERTa model)"),Wk.forEach(t),Ogo=i(S),js=n(S,"LI",{});var Hk=s(js);ple=n(Hk,"STRONG",{});var jnt=s(ple);Vgo=r(jnt,"xlm-roberta-xl"),jnt.forEach(t),Xgo=r(Hk," \u2014 "),KI=n(Hk,"A",{href:!0});var Dnt=s(KI);zgo=r(Dnt,"RobertaTokenizer"),Dnt.forEach(t),Qgo=r(Hk," or "),ZI=n(Hk,"A",{href:!0});var Gnt=s(ZI);Wgo=r(Gnt,"RobertaTokenizerFast"),Gnt.forEach(t),Hgo=r(Hk," (XLM-RoBERTa-XL model)"),Hk.forEach(t),Ugo=i(S),Ds=n(S,"LI",{});var Uk=s(Ds);_le=n(Uk,"STRONG",{});var Ont=s(_le);Jgo=r(Ont,"xlnet"),Ont.forEach(t),Ygo=r(Uk," \u2014 "),eN=n(Uk,"A",{href:!0});var Vnt=s(eN);Kgo=r(Vnt,"XLNetTokenizer"),Vnt.forEach(t),Zgo=r(Uk," or "),oN=n(Uk,"A",{href:!0});var Xnt=s(oN);eho=r(Xnt,"XLNetTokenizerFast"),Xnt.forEach(t),oho=r(Uk," (XLNet model)"),Uk.forEach(t),rho=i(S),Gs=n(S,"LI",{});var Jk=s(Gs);ule=n(Jk,"STRONG",{});var znt=s(ule);tho=r(znt,"yoso"),znt.forEach(t),aho=r(Jk," \u2014 "),rN=n(Jk,"A",{href:!0});var Qnt=s(rN);nho=r(Qnt,"AlbertTokenizer"),Qnt.forEach(t),sho=r(Jk," or "),tN=n(Jk,"A",{href:!0});var Wnt=s(tN);lho=r(Wnt,"AlbertTokenizerFast"),Wnt.forEach(t),iho=r(Jk," (YOSO model)"),Jk.forEach(t),S.forEach(t),dho=i(Ws),T(Eh.$$.fragment,Ws),Ws.forEach(t),cho=i(Qs),Ch=n(Qs,"DIV",{class:!0});var zVe=s(Ch);T(G6.$$.fragment,zVe),fho=i(zVe),ble=n(zVe,"P",{});var Hnt=s(ble);mho=r(Hnt,"Register a new tokenizer in this mapping."),Hnt.forEach(t),zVe.forEach(t),Qs.forEach(t),XGe=i(f),Si=n(f,"H2",{class:!0});var QVe=s(Si);wh=n(QVe,"A",{id:!0,class:!0,href:!0});var Unt=s(wh);vle=n(Unt,"SPAN",{});var Jnt=s(vle);T(O6.$$.fragment,Jnt),Jnt.forEach(t),Unt.forEach(t),gho=i(QVe),Fle=n(QVe,"SPAN",{});var Ynt=s(Fle);hho=r(Ynt,"AutoFeatureExtractor"),Ynt.forEach(t),QVe.forEach(t),zGe=i(f),Lo=n(f,"DIV",{class:!0});var Hs=s(Lo);T(V6.$$.fragment,Hs),pho=i(Hs),X6=n(Hs,"P",{});var WVe=s(X6);_ho=r(WVe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),aN=n(WVe,"A",{href:!0});var Knt=s(aN);uho=r(Knt,"AutoFeatureExtractor.from_pretrained()"),Knt.forEach(t),bho=r(WVe," class method."),WVe.forEach(t),vho=i(Hs),z6=n(Hs,"P",{});var HVe=s(z6);Fho=r(HVe,"This class cannot be instantiated directly using "),Tle=n(HVe,"CODE",{});var Znt=s(Tle);Tho=r(Znt,"__init__()"),Znt.forEach(t),Mho=r(HVe," (throws an error)."),HVe.forEach(t),Eho=i(Hs),He=n(Hs,"DIV",{class:!0});var ra=s(He);T(Q6.$$.fragment,ra),Cho=i(ra),Mle=n(ra,"P",{});var est=s(Mle);who=r(est,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),est.forEach(t),Aho=i(ra),ka=n(ra,"P",{});var xw=s(ka);Lho=r(xw,"The feature extractor class to instantiate is selected based on the "),Ele=n(xw,"CODE",{});var ost=s(Ele);yho=r(ost,"model_type"),ost.forEach(t),xho=r(xw,` property of the config object
(either passed as an argument or loaded from `),Cle=n(xw,"CODE",{});var rst=s(Cle);$ho=r(rst,"pretrained_model_name_or_path"),rst.forEach(t),kho=r(xw,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),wle=n(xw,"CODE",{});var tst=s(wle);Sho=r(tst,"pretrained_model_name_or_path"),tst.forEach(t),Rho=r(xw,":"),xw.forEach(t),Pho=i(ra),Y=n(ra,"UL",{});var K=s(Y);Ah=n(K,"LI",{});var K6e=s(Ah);Ale=n(K6e,"STRONG",{});var ast=s(Ale);Bho=r(ast,"beit"),ast.forEach(t),Iho=r(K6e," \u2014 "),nN=n(K6e,"A",{href:!0});var nst=s(nN);Nho=r(nst,"BeitFeatureExtractor"),nst.forEach(t),qho=r(K6e," (BEiT model)"),K6e.forEach(t),jho=i(K),Lh=n(K,"LI",{});var Z6e=s(Lh);Lle=n(Z6e,"STRONG",{});var sst=s(Lle);Dho=r(sst,"clip"),sst.forEach(t),Gho=r(Z6e," \u2014 "),sN=n(Z6e,"A",{href:!0});var lst=s(sN);Oho=r(lst,"CLIPFeatureExtractor"),lst.forEach(t),Vho=r(Z6e," (CLIP model)"),Z6e.forEach(t),Xho=i(K),yh=n(K,"LI",{});var eLe=s(yh);yle=n(eLe,"STRONG",{});var ist=s(yle);zho=r(ist,"convnext"),ist.forEach(t),Qho=r(eLe," \u2014 "),lN=n(eLe,"A",{href:!0});var dst=s(lN);Who=r(dst,"ConvNextFeatureExtractor"),dst.forEach(t),Hho=r(eLe," (ConvNeXT model)"),eLe.forEach(t),Uho=i(K),xh=n(K,"LI",{});var oLe=s(xh);xle=n(oLe,"STRONG",{});var cst=s(xle);Jho=r(cst,"cvt"),cst.forEach(t),Yho=r(oLe," \u2014 "),iN=n(oLe,"A",{href:!0});var fst=s(iN);Kho=r(fst,"ConvNextFeatureExtractor"),fst.forEach(t),Zho=r(oLe," (CvT model)"),oLe.forEach(t),epo=i(K),$h=n(K,"LI",{});var rLe=s($h);$le=n(rLe,"STRONG",{});var mst=s($le);opo=r(mst,"data2vec-audio"),mst.forEach(t),rpo=r(rLe," \u2014 "),dN=n(rLe,"A",{href:!0});var gst=s(dN);tpo=r(gst,"Wav2Vec2FeatureExtractor"),gst.forEach(t),apo=r(rLe," (Data2VecAudio model)"),rLe.forEach(t),npo=i(K),kh=n(K,"LI",{});var tLe=s(kh);kle=n(tLe,"STRONG",{});var hst=s(kle);spo=r(hst,"data2vec-vision"),hst.forEach(t),lpo=r(tLe," \u2014 "),cN=n(tLe,"A",{href:!0});var pst=s(cN);ipo=r(pst,"BeitFeatureExtractor"),pst.forEach(t),dpo=r(tLe," (Data2VecVision model)"),tLe.forEach(t),cpo=i(K),Sh=n(K,"LI",{});var aLe=s(Sh);Sle=n(aLe,"STRONG",{});var _st=s(Sle);fpo=r(_st,"deit"),_st.forEach(t),mpo=r(aLe," \u2014 "),fN=n(aLe,"A",{href:!0});var ust=s(fN);gpo=r(ust,"DeiTFeatureExtractor"),ust.forEach(t),hpo=r(aLe," (DeiT model)"),aLe.forEach(t),ppo=i(K),Rh=n(K,"LI",{});var nLe=s(Rh);Rle=n(nLe,"STRONG",{});var bst=s(Rle);_po=r(bst,"detr"),bst.forEach(t),upo=r(nLe," \u2014 "),mN=n(nLe,"A",{href:!0});var vst=s(mN);bpo=r(vst,"DetrFeatureExtractor"),vst.forEach(t),vpo=r(nLe," (DETR model)"),nLe.forEach(t),Fpo=i(K),Ph=n(K,"LI",{});var sLe=s(Ph);Ple=n(sLe,"STRONG",{});var Fst=s(Ple);Tpo=r(Fst,"dpt"),Fst.forEach(t),Mpo=r(sLe," \u2014 "),gN=n(sLe,"A",{href:!0});var Tst=s(gN);Epo=r(Tst,"DPTFeatureExtractor"),Tst.forEach(t),Cpo=r(sLe," (DPT model)"),sLe.forEach(t),wpo=i(K),Bh=n(K,"LI",{});var lLe=s(Bh);Ble=n(lLe,"STRONG",{});var Mst=s(Ble);Apo=r(Mst,"flava"),Mst.forEach(t),Lpo=r(lLe," \u2014 "),hN=n(lLe,"A",{href:!0});var Est=s(hN);ypo=r(Est,"FlavaFeatureExtractor"),Est.forEach(t),xpo=r(lLe," (FLAVA model)"),lLe.forEach(t),$po=i(K),Ih=n(K,"LI",{});var iLe=s(Ih);Ile=n(iLe,"STRONG",{});var Cst=s(Ile);kpo=r(Cst,"glpn"),Cst.forEach(t),Spo=r(iLe," \u2014 "),pN=n(iLe,"A",{href:!0});var wst=s(pN);Rpo=r(wst,"GLPNFeatureExtractor"),wst.forEach(t),Ppo=r(iLe," (GLPN model)"),iLe.forEach(t),Bpo=i(K),Nh=n(K,"LI",{});var dLe=s(Nh);Nle=n(dLe,"STRONG",{});var Ast=s(Nle);Ipo=r(Ast,"hubert"),Ast.forEach(t),Npo=r(dLe," \u2014 "),_N=n(dLe,"A",{href:!0});var Lst=s(_N);qpo=r(Lst,"Wav2Vec2FeatureExtractor"),Lst.forEach(t),jpo=r(dLe," (Hubert model)"),dLe.forEach(t),Dpo=i(K),qh=n(K,"LI",{});var cLe=s(qh);qle=n(cLe,"STRONG",{});var yst=s(qle);Gpo=r(yst,"imagegpt"),yst.forEach(t),Opo=r(cLe," \u2014 "),uN=n(cLe,"A",{href:!0});var xst=s(uN);Vpo=r(xst,"ImageGPTFeatureExtractor"),xst.forEach(t),Xpo=r(cLe," (ImageGPT model)"),cLe.forEach(t),zpo=i(K),jh=n(K,"LI",{});var fLe=s(jh);jle=n(fLe,"STRONG",{});var $st=s(jle);Qpo=r($st,"layoutlmv2"),$st.forEach(t),Wpo=r(fLe," \u2014 "),bN=n(fLe,"A",{href:!0});var kst=s(bN);Hpo=r(kst,"LayoutLMv2FeatureExtractor"),kst.forEach(t),Upo=r(fLe," (LayoutLMv2 model)"),fLe.forEach(t),Jpo=i(K),Dh=n(K,"LI",{});var mLe=s(Dh);Dle=n(mLe,"STRONG",{});var Sst=s(Dle);Ypo=r(Sst,"layoutlmv3"),Sst.forEach(t),Kpo=r(mLe," \u2014 "),vN=n(mLe,"A",{href:!0});var Rst=s(vN);Zpo=r(Rst,"LayoutLMv3FeatureExtractor"),Rst.forEach(t),e_o=r(mLe," (LayoutLMv3 model)"),mLe.forEach(t),o_o=i(K),Gh=n(K,"LI",{});var gLe=s(Gh);Gle=n(gLe,"STRONG",{});var Pst=s(Gle);r_o=r(Pst,"levit"),Pst.forEach(t),t_o=r(gLe," \u2014 "),FN=n(gLe,"A",{href:!0});var Bst=s(FN);a_o=r(Bst,"LevitFeatureExtractor"),Bst.forEach(t),n_o=r(gLe," (LeViT model)"),gLe.forEach(t),s_o=i(K),Oh=n(K,"LI",{});var hLe=s(Oh);Ole=n(hLe,"STRONG",{});var Ist=s(Ole);l_o=r(Ist,"maskformer"),Ist.forEach(t),i_o=r(hLe," \u2014 "),TN=n(hLe,"A",{href:!0});var Nst=s(TN);d_o=r(Nst,"MaskFormerFeatureExtractor"),Nst.forEach(t),c_o=r(hLe," (MaskFormer model)"),hLe.forEach(t),f_o=i(K),Vh=n(K,"LI",{});var pLe=s(Vh);Vle=n(pLe,"STRONG",{});var qst=s(Vle);m_o=r(qst,"mctct"),qst.forEach(t),g_o=r(pLe," \u2014 "),MN=n(pLe,"A",{href:!0});var jst=s(MN);h_o=r(jst,"MCTCTFeatureExtractor"),jst.forEach(t),p_o=r(pLe," (M-CTC-T model)"),pLe.forEach(t),__o=i(K),Xh=n(K,"LI",{});var _Le=s(Xh);Xle=n(_Le,"STRONG",{});var Dst=s(Xle);u_o=r(Dst,"perceiver"),Dst.forEach(t),b_o=r(_Le," \u2014 "),EN=n(_Le,"A",{href:!0});var Gst=s(EN);v_o=r(Gst,"PerceiverFeatureExtractor"),Gst.forEach(t),F_o=r(_Le," (Perceiver model)"),_Le.forEach(t),T_o=i(K),zh=n(K,"LI",{});var uLe=s(zh);zle=n(uLe,"STRONG",{});var Ost=s(zle);M_o=r(Ost,"poolformer"),Ost.forEach(t),E_o=r(uLe," \u2014 "),CN=n(uLe,"A",{href:!0});var Vst=s(CN);C_o=r(Vst,"PoolFormerFeatureExtractor"),Vst.forEach(t),w_o=r(uLe," (PoolFormer model)"),uLe.forEach(t),A_o=i(K),Qh=n(K,"LI",{});var bLe=s(Qh);Qle=n(bLe,"STRONG",{});var Xst=s(Qle);L_o=r(Xst,"regnet"),Xst.forEach(t),y_o=r(bLe," \u2014 "),wN=n(bLe,"A",{href:!0});var zst=s(wN);x_o=r(zst,"ConvNextFeatureExtractor"),zst.forEach(t),$_o=r(bLe," (RegNet model)"),bLe.forEach(t),k_o=i(K),Wh=n(K,"LI",{});var vLe=s(Wh);Wle=n(vLe,"STRONG",{});var Qst=s(Wle);S_o=r(Qst,"resnet"),Qst.forEach(t),R_o=r(vLe," \u2014 "),AN=n(vLe,"A",{href:!0});var Wst=s(AN);P_o=r(Wst,"ConvNextFeatureExtractor"),Wst.forEach(t),B_o=r(vLe," (ResNet model)"),vLe.forEach(t),I_o=i(K),Hh=n(K,"LI",{});var FLe=s(Hh);Hle=n(FLe,"STRONG",{});var Hst=s(Hle);N_o=r(Hst,"segformer"),Hst.forEach(t),q_o=r(FLe," \u2014 "),LN=n(FLe,"A",{href:!0});var Ust=s(LN);j_o=r(Ust,"SegformerFeatureExtractor"),Ust.forEach(t),D_o=r(FLe," (SegFormer model)"),FLe.forEach(t),G_o=i(K),Uh=n(K,"LI",{});var TLe=s(Uh);Ule=n(TLe,"STRONG",{});var Jst=s(Ule);O_o=r(Jst,"speech_to_text"),Jst.forEach(t),V_o=r(TLe," \u2014 "),yN=n(TLe,"A",{href:!0});var Yst=s(yN);X_o=r(Yst,"Speech2TextFeatureExtractor"),Yst.forEach(t),z_o=r(TLe," (Speech2Text model)"),TLe.forEach(t),Q_o=i(K),Jh=n(K,"LI",{});var MLe=s(Jh);Jle=n(MLe,"STRONG",{});var Kst=s(Jle);W_o=r(Kst,"swin"),Kst.forEach(t),H_o=r(MLe," \u2014 "),xN=n(MLe,"A",{href:!0});var Zst=s(xN);U_o=r(Zst,"ViTFeatureExtractor"),Zst.forEach(t),J_o=r(MLe," (Swin Transformer model)"),MLe.forEach(t),Y_o=i(K),Yh=n(K,"LI",{});var ELe=s(Yh);Yle=n(ELe,"STRONG",{});var elt=s(Yle);K_o=r(elt,"van"),elt.forEach(t),Z_o=r(ELe," \u2014 "),$N=n(ELe,"A",{href:!0});var olt=s($N);euo=r(olt,"ConvNextFeatureExtractor"),olt.forEach(t),ouo=r(ELe," (VAN model)"),ELe.forEach(t),ruo=i(K),Kh=n(K,"LI",{});var CLe=s(Kh);Kle=n(CLe,"STRONG",{});var rlt=s(Kle);tuo=r(rlt,"vilt"),rlt.forEach(t),auo=r(CLe," \u2014 "),kN=n(CLe,"A",{href:!0});var tlt=s(kN);nuo=r(tlt,"ViltFeatureExtractor"),tlt.forEach(t),suo=r(CLe," (ViLT model)"),CLe.forEach(t),luo=i(K),Zh=n(K,"LI",{});var wLe=s(Zh);Zle=n(wLe,"STRONG",{});var alt=s(Zle);iuo=r(alt,"vit"),alt.forEach(t),duo=r(wLe," \u2014 "),SN=n(wLe,"A",{href:!0});var nlt=s(SN);cuo=r(nlt,"ViTFeatureExtractor"),nlt.forEach(t),fuo=r(wLe," (ViT model)"),wLe.forEach(t),muo=i(K),ep=n(K,"LI",{});var ALe=s(ep);eie=n(ALe,"STRONG",{});var slt=s(eie);guo=r(slt,"vit_mae"),slt.forEach(t),huo=r(ALe," \u2014 "),RN=n(ALe,"A",{href:!0});var llt=s(RN);puo=r(llt,"ViTFeatureExtractor"),llt.forEach(t),_uo=r(ALe," (ViTMAE model)"),ALe.forEach(t),uuo=i(K),op=n(K,"LI",{});var LLe=s(op);oie=n(LLe,"STRONG",{});var ilt=s(oie);buo=r(ilt,"wav2vec2"),ilt.forEach(t),vuo=r(LLe," \u2014 "),PN=n(LLe,"A",{href:!0});var dlt=s(PN);Fuo=r(dlt,"Wav2Vec2FeatureExtractor"),dlt.forEach(t),Tuo=r(LLe," (Wav2Vec2 model)"),LLe.forEach(t),Muo=i(K),rp=n(K,"LI",{});var yLe=s(rp);rie=n(yLe,"STRONG",{});var clt=s(rie);Euo=r(clt,"wav2vec2-conformer"),clt.forEach(t),Cuo=r(yLe," \u2014 "),BN=n(yLe,"A",{href:!0});var flt=s(BN);wuo=r(flt,"Wav2Vec2FeatureExtractor"),flt.forEach(t),Auo=r(yLe," (Wav2Vec2-Conformer model)"),yLe.forEach(t),Luo=i(K),tp=n(K,"LI",{});var xLe=s(tp);tie=n(xLe,"STRONG",{});var mlt=s(tie);yuo=r(mlt,"yolos"),mlt.forEach(t),xuo=r(xLe," \u2014 "),IN=n(xLe,"A",{href:!0});var glt=s(IN);$uo=r(glt,"YolosFeatureExtractor"),glt.forEach(t),kuo=r(xLe," (YOLOS model)"),xLe.forEach(t),K.forEach(t),Suo=i(ra),T(ap.$$.fragment,ra),Ruo=i(ra),T(np.$$.fragment,ra),ra.forEach(t),Puo=i(Hs),sp=n(Hs,"DIV",{class:!0});var UVe=s(sp);T(W6.$$.fragment,UVe),Buo=i(UVe),aie=n(UVe,"P",{});var hlt=s(aie);Iuo=r(hlt,"Register a new feature extractor for this class."),hlt.forEach(t),UVe.forEach(t),Hs.forEach(t),QGe=i(f),Ri=n(f,"H2",{class:!0});var JVe=s(Ri);lp=n(JVe,"A",{id:!0,class:!0,href:!0});var plt=s(lp);nie=n(plt,"SPAN",{});var _lt=s(nie);T(H6.$$.fragment,_lt),_lt.forEach(t),plt.forEach(t),Nuo=i(JVe),sie=n(JVe,"SPAN",{});var ult=s(sie);quo=r(ult,"AutoProcessor"),ult.forEach(t),JVe.forEach(t),WGe=i(f),yo=n(f,"DIV",{class:!0});var Us=s(yo);T(U6.$$.fragment,Us),juo=i(Us),J6=n(Us,"P",{});var YVe=s(J6);Duo=r(YVe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),NN=n(YVe,"A",{href:!0});var blt=s(NN);Guo=r(blt,"AutoProcessor.from_pretrained()"),blt.forEach(t),Ouo=r(YVe," class method."),YVe.forEach(t),Vuo=i(Us),Y6=n(Us,"P",{});var KVe=s(Y6);Xuo=r(KVe,"This class cannot be instantiated directly using "),lie=n(KVe,"CODE",{});var vlt=s(lie);zuo=r(vlt,"__init__()"),vlt.forEach(t),Quo=r(KVe," (throws an error)."),KVe.forEach(t),Wuo=i(Us),Ue=n(Us,"DIV",{class:!0});var ta=s(Ue);T(K6.$$.fragment,ta),Huo=i(ta),iie=n(ta,"P",{});var Flt=s(iie);Uuo=r(Flt,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Flt.forEach(t),Juo=i(ta),Pi=n(ta,"P",{});var _oe=s(Pi);Yuo=r(_oe,"The processor class to instantiate is selected based on the "),die=n(_oe,"CODE",{});var Tlt=s(die);Kuo=r(Tlt,"model_type"),Tlt.forEach(t),Zuo=r(_oe,` property of the config object (either
passed as an argument or loaded from `),cie=n(_oe,"CODE",{});var Mlt=s(cie);e7o=r(Mlt,"pretrained_model_name_or_path"),Mlt.forEach(t),o7o=r(_oe," if possible):"),_oe.forEach(t),r7o=i(ta),pe=n(ta,"UL",{});var be=s(pe);ip=n(be,"LI",{});var $Le=s(ip);fie=n($Le,"STRONG",{});var Elt=s(fie);t7o=r(Elt,"clip"),Elt.forEach(t),a7o=r($Le," \u2014 "),qN=n($Le,"A",{href:!0});var Clt=s(qN);n7o=r(Clt,"CLIPProcessor"),Clt.forEach(t),s7o=r($Le," (CLIP model)"),$Le.forEach(t),l7o=i(be),dp=n(be,"LI",{});var kLe=s(dp);mie=n(kLe,"STRONG",{});var wlt=s(mie);i7o=r(wlt,"flava"),wlt.forEach(t),d7o=r(kLe," \u2014 "),gie=n(kLe,"CODE",{});var Alt=s(gie);c7o=r(Alt,"FLAVAProcessor"),Alt.forEach(t),f7o=r(kLe," (FLAVA model)"),kLe.forEach(t),m7o=i(be),cp=n(be,"LI",{});var SLe=s(cp);hie=n(SLe,"STRONG",{});var Llt=s(hie);g7o=r(Llt,"layoutlmv2"),Llt.forEach(t),h7o=r(SLe," \u2014 "),jN=n(SLe,"A",{href:!0});var ylt=s(jN);p7o=r(ylt,"LayoutLMv2Processor"),ylt.forEach(t),_7o=r(SLe," (LayoutLMv2 model)"),SLe.forEach(t),u7o=i(be),fp=n(be,"LI",{});var RLe=s(fp);pie=n(RLe,"STRONG",{});var xlt=s(pie);b7o=r(xlt,"layoutlmv3"),xlt.forEach(t),v7o=r(RLe," \u2014 "),DN=n(RLe,"A",{href:!0});var $lt=s(DN);F7o=r($lt,"LayoutLMv3Processor"),$lt.forEach(t),T7o=r(RLe," (LayoutLMv3 model)"),RLe.forEach(t),M7o=i(be),mp=n(be,"LI",{});var PLe=s(mp);_ie=n(PLe,"STRONG",{});var klt=s(_ie);E7o=r(klt,"layoutxlm"),klt.forEach(t),C7o=r(PLe," \u2014 "),GN=n(PLe,"A",{href:!0});var Slt=s(GN);w7o=r(Slt,"LayoutXLMProcessor"),Slt.forEach(t),A7o=r(PLe," (LayoutXLM model)"),PLe.forEach(t),L7o=i(be),gp=n(be,"LI",{});var BLe=s(gp);uie=n(BLe,"STRONG",{});var Rlt=s(uie);y7o=r(Rlt,"sew"),Rlt.forEach(t),x7o=r(BLe," \u2014 "),ON=n(BLe,"A",{href:!0});var Plt=s(ON);$7o=r(Plt,"Wav2Vec2Processor"),Plt.forEach(t),k7o=r(BLe," (SEW model)"),BLe.forEach(t),S7o=i(be),hp=n(be,"LI",{});var ILe=s(hp);bie=n(ILe,"STRONG",{});var Blt=s(bie);R7o=r(Blt,"sew-d"),Blt.forEach(t),P7o=r(ILe," \u2014 "),VN=n(ILe,"A",{href:!0});var Ilt=s(VN);B7o=r(Ilt,"Wav2Vec2Processor"),Ilt.forEach(t),I7o=r(ILe," (SEW-D model)"),ILe.forEach(t),N7o=i(be),pp=n(be,"LI",{});var NLe=s(pp);vie=n(NLe,"STRONG",{});var Nlt=s(vie);q7o=r(Nlt,"speech_to_text"),Nlt.forEach(t),j7o=r(NLe," \u2014 "),XN=n(NLe,"A",{href:!0});var qlt=s(XN);D7o=r(qlt,"Speech2TextProcessor"),qlt.forEach(t),G7o=r(NLe," (Speech2Text model)"),NLe.forEach(t),O7o=i(be),_p=n(be,"LI",{});var qLe=s(_p);Fie=n(qLe,"STRONG",{});var jlt=s(Fie);V7o=r(jlt,"speech_to_text_2"),jlt.forEach(t),X7o=r(qLe," \u2014 "),zN=n(qLe,"A",{href:!0});var Dlt=s(zN);z7o=r(Dlt,"Speech2Text2Processor"),Dlt.forEach(t),Q7o=r(qLe," (Speech2Text2 model)"),qLe.forEach(t),W7o=i(be),up=n(be,"LI",{});var jLe=s(up);Tie=n(jLe,"STRONG",{});var Glt=s(Tie);H7o=r(Glt,"trocr"),Glt.forEach(t),U7o=r(jLe," \u2014 "),QN=n(jLe,"A",{href:!0});var Olt=s(QN);J7o=r(Olt,"TrOCRProcessor"),Olt.forEach(t),Y7o=r(jLe," (TrOCR model)"),jLe.forEach(t),K7o=i(be),bp=n(be,"LI",{});var DLe=s(bp);Mie=n(DLe,"STRONG",{});var Vlt=s(Mie);Z7o=r(Vlt,"unispeech"),Vlt.forEach(t),e1o=r(DLe," \u2014 "),WN=n(DLe,"A",{href:!0});var Xlt=s(WN);o1o=r(Xlt,"Wav2Vec2Processor"),Xlt.forEach(t),r1o=r(DLe," (UniSpeech model)"),DLe.forEach(t),t1o=i(be),vp=n(be,"LI",{});var GLe=s(vp);Eie=n(GLe,"STRONG",{});var zlt=s(Eie);a1o=r(zlt,"unispeech-sat"),zlt.forEach(t),n1o=r(GLe," \u2014 "),HN=n(GLe,"A",{href:!0});var Qlt=s(HN);s1o=r(Qlt,"Wav2Vec2Processor"),Qlt.forEach(t),l1o=r(GLe," (UniSpeechSat model)"),GLe.forEach(t),i1o=i(be),Fp=n(be,"LI",{});var OLe=s(Fp);Cie=n(OLe,"STRONG",{});var Wlt=s(Cie);d1o=r(Wlt,"vilt"),Wlt.forEach(t),c1o=r(OLe," \u2014 "),UN=n(OLe,"A",{href:!0});var Hlt=s(UN);f1o=r(Hlt,"ViltProcessor"),Hlt.forEach(t),m1o=r(OLe," (ViLT model)"),OLe.forEach(t),g1o=i(be),Tp=n(be,"LI",{});var VLe=s(Tp);wie=n(VLe,"STRONG",{});var Ult=s(wie);h1o=r(Ult,"vision-text-dual-encoder"),Ult.forEach(t),p1o=r(VLe," \u2014 "),JN=n(VLe,"A",{href:!0});var Jlt=s(JN);_1o=r(Jlt,"VisionTextDualEncoderProcessor"),Jlt.forEach(t),u1o=r(VLe," (VisionTextDualEncoder model)"),VLe.forEach(t),b1o=i(be),Mp=n(be,"LI",{});var XLe=s(Mp);Aie=n(XLe,"STRONG",{});var Ylt=s(Aie);v1o=r(Ylt,"wav2vec2"),Ylt.forEach(t),F1o=r(XLe," \u2014 "),YN=n(XLe,"A",{href:!0});var Klt=s(YN);T1o=r(Klt,"Wav2Vec2Processor"),Klt.forEach(t),M1o=r(XLe," (Wav2Vec2 model)"),XLe.forEach(t),E1o=i(be),Ep=n(be,"LI",{});var zLe=s(Ep);Lie=n(zLe,"STRONG",{});var Zlt=s(Lie);C1o=r(Zlt,"wav2vec2-conformer"),Zlt.forEach(t),w1o=r(zLe," \u2014 "),KN=n(zLe,"A",{href:!0});var eit=s(KN);A1o=r(eit,"Wav2Vec2Processor"),eit.forEach(t),L1o=r(zLe," (Wav2Vec2-Conformer model)"),zLe.forEach(t),y1o=i(be),Cp=n(be,"LI",{});var QLe=s(Cp);yie=n(QLe,"STRONG",{});var oit=s(yie);x1o=r(oit,"wavlm"),oit.forEach(t),$1o=r(QLe," \u2014 "),ZN=n(QLe,"A",{href:!0});var rit=s(ZN);k1o=r(rit,"Wav2Vec2Processor"),rit.forEach(t),S1o=r(QLe," (WavLM model)"),QLe.forEach(t),be.forEach(t),R1o=i(ta),T(wp.$$.fragment,ta),P1o=i(ta),T(Ap.$$.fragment,ta),ta.forEach(t),B1o=i(Us),Lp=n(Us,"DIV",{class:!0});var ZVe=s(Lp);T(Z6.$$.fragment,ZVe),I1o=i(ZVe),xie=n(ZVe,"P",{});var tit=s(xie);N1o=r(tit,"Register a new processor for this class."),tit.forEach(t),ZVe.forEach(t),Us.forEach(t),HGe=i(f),Bi=n(f,"H2",{class:!0});var eXe=s(Bi);yp=n(eXe,"A",{id:!0,class:!0,href:!0});var ait=s(yp);$ie=n(ait,"SPAN",{});var nit=s($ie);T(eL.$$.fragment,nit),nit.forEach(t),ait.forEach(t),q1o=i(eXe),kie=n(eXe,"SPAN",{});var sit=s(kie);j1o=r(sit,"AutoModel"),sit.forEach(t),eXe.forEach(t),UGe=i(f),xo=n(f,"DIV",{class:!0});var Js=s(xo);T(oL.$$.fragment,Js),D1o=i(Js),Ii=n(Js,"P",{});var uoe=s(Ii);G1o=r(uoe,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),eq=n(uoe,"A",{href:!0});var lit=s(eq);O1o=r(lit,"from_pretrained()"),lit.forEach(t),V1o=r(uoe," class method or the "),oq=n(uoe,"A",{href:!0});var iit=s(oq);X1o=r(iit,"from_config()"),iit.forEach(t),z1o=r(uoe,` class
method.`),uoe.forEach(t),Q1o=i(Js),rL=n(Js,"P",{});var oXe=s(rL);W1o=r(oXe,"This class cannot be instantiated directly using "),Sie=n(oXe,"CODE",{});var dit=s(Sie);H1o=r(dit,"__init__()"),dit.forEach(t),U1o=r(oXe," (throws an error)."),oXe.forEach(t),J1o=i(Js),nt=n(Js,"DIV",{class:!0});var $w=s(nt);T(tL.$$.fragment,$w),Y1o=i($w),Rie=n($w,"P",{});var cit=s(Rie);K1o=r(cit,"Instantiates one of the base model classes of the library from a configuration."),cit.forEach(t),Z1o=i($w),Ni=n($w,"P",{});var boe=s(Ni);e2o=r(boe,`Note:
Loading a model from its configuration file does `),Pie=n(boe,"STRONG",{});var fit=s(Pie);o2o=r(fit,"not"),fit.forEach(t),r2o=r(boe,` load the model weights. It only affects the
model\u2019s configuration. Use `),rq=n(boe,"A",{href:!0});var mit=s(rq);t2o=r(mit,"from_pretrained()"),mit.forEach(t),a2o=r(boe," to load the model weights."),boe.forEach(t),n2o=i($w),T(xp.$$.fragment,$w),$w.forEach(t),s2o=i(Js),Je=n(Js,"DIV",{class:!0});var aa=s(Je);T(aL.$$.fragment,aa),l2o=i(aa),Bie=n(aa,"P",{});var git=s(Bie);i2o=r(git,"Instantiate one of the base model classes of the library from a pretrained model."),git.forEach(t),d2o=i(aa),Sa=n(aa,"P",{});var kw=s(Sa);c2o=r(kw,"The model class to instantiate is selected based on the "),Iie=n(kw,"CODE",{});var hit=s(Iie);f2o=r(hit,"model_type"),hit.forEach(t),m2o=r(kw,` property of the config object (either
passed as an argument or loaded from `),Nie=n(kw,"CODE",{});var pit=s(Nie);g2o=r(pit,"pretrained_model_name_or_path"),pit.forEach(t),h2o=r(kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qie=n(kw,"CODE",{});var _it=s(qie);p2o=r(_it,"pretrained_model_name_or_path"),_it.forEach(t),_2o=r(kw,":"),kw.forEach(t),u2o=i(aa),y=n(aa,"UL",{});var $=s(y);$p=n($,"LI",{});var WLe=s($p);jie=n(WLe,"STRONG",{});var uit=s(jie);b2o=r(uit,"albert"),uit.forEach(t),v2o=r(WLe," \u2014 "),tq=n(WLe,"A",{href:!0});var bit=s(tq);F2o=r(bit,"AlbertModel"),bit.forEach(t),T2o=r(WLe," (ALBERT model)"),WLe.forEach(t),M2o=i($),kp=n($,"LI",{});var HLe=s(kp);Die=n(HLe,"STRONG",{});var vit=s(Die);E2o=r(vit,"bart"),vit.forEach(t),C2o=r(HLe," \u2014 "),aq=n(HLe,"A",{href:!0});var Fit=s(aq);w2o=r(Fit,"BartModel"),Fit.forEach(t),A2o=r(HLe," (BART model)"),HLe.forEach(t),L2o=i($),Sp=n($,"LI",{});var ULe=s(Sp);Gie=n(ULe,"STRONG",{});var Tit=s(Gie);y2o=r(Tit,"beit"),Tit.forEach(t),x2o=r(ULe," \u2014 "),nq=n(ULe,"A",{href:!0});var Mit=s(nq);$2o=r(Mit,"BeitModel"),Mit.forEach(t),k2o=r(ULe," (BEiT model)"),ULe.forEach(t),S2o=i($),Rp=n($,"LI",{});var JLe=s(Rp);Oie=n(JLe,"STRONG",{});var Eit=s(Oie);R2o=r(Eit,"bert"),Eit.forEach(t),P2o=r(JLe," \u2014 "),sq=n(JLe,"A",{href:!0});var Cit=s(sq);B2o=r(Cit,"BertModel"),Cit.forEach(t),I2o=r(JLe," (BERT model)"),JLe.forEach(t),N2o=i($),Pp=n($,"LI",{});var YLe=s(Pp);Vie=n(YLe,"STRONG",{});var wit=s(Vie);q2o=r(wit,"bert-generation"),wit.forEach(t),j2o=r(YLe," \u2014 "),lq=n(YLe,"A",{href:!0});var Ait=s(lq);D2o=r(Ait,"BertGenerationEncoder"),Ait.forEach(t),G2o=r(YLe," (Bert Generation model)"),YLe.forEach(t),O2o=i($),Bp=n($,"LI",{});var KLe=s(Bp);Xie=n(KLe,"STRONG",{});var Lit=s(Xie);V2o=r(Lit,"big_bird"),Lit.forEach(t),X2o=r(KLe," \u2014 "),iq=n(KLe,"A",{href:!0});var yit=s(iq);z2o=r(yit,"BigBirdModel"),yit.forEach(t),Q2o=r(KLe," (BigBird model)"),KLe.forEach(t),W2o=i($),Ip=n($,"LI",{});var ZLe=s(Ip);zie=n(ZLe,"STRONG",{});var xit=s(zie);H2o=r(xit,"bigbird_pegasus"),xit.forEach(t),U2o=r(ZLe," \u2014 "),dq=n(ZLe,"A",{href:!0});var $it=s(dq);J2o=r($it,"BigBirdPegasusModel"),$it.forEach(t),Y2o=r(ZLe," (BigBird-Pegasus model)"),ZLe.forEach(t),K2o=i($),Np=n($,"LI",{});var eye=s(Np);Qie=n(eye,"STRONG",{});var kit=s(Qie);Z2o=r(kit,"blenderbot"),kit.forEach(t),ebo=r(eye," \u2014 "),cq=n(eye,"A",{href:!0});var Sit=s(cq);obo=r(Sit,"BlenderbotModel"),Sit.forEach(t),rbo=r(eye," (Blenderbot model)"),eye.forEach(t),tbo=i($),qp=n($,"LI",{});var oye=s(qp);Wie=n(oye,"STRONG",{});var Rit=s(Wie);abo=r(Rit,"blenderbot-small"),Rit.forEach(t),nbo=r(oye," \u2014 "),fq=n(oye,"A",{href:!0});var Pit=s(fq);sbo=r(Pit,"BlenderbotSmallModel"),Pit.forEach(t),lbo=r(oye," (BlenderbotSmall model)"),oye.forEach(t),ibo=i($),jp=n($,"LI",{});var rye=s(jp);Hie=n(rye,"STRONG",{});var Bit=s(Hie);dbo=r(Bit,"bloom"),Bit.forEach(t),cbo=r(rye," \u2014 "),mq=n(rye,"A",{href:!0});var Iit=s(mq);fbo=r(Iit,"BloomModel"),Iit.forEach(t),mbo=r(rye," (BLOOM model)"),rye.forEach(t),gbo=i($),Dp=n($,"LI",{});var tye=s(Dp);Uie=n(tye,"STRONG",{});var Nit=s(Uie);hbo=r(Nit,"camembert"),Nit.forEach(t),pbo=r(tye," \u2014 "),gq=n(tye,"A",{href:!0});var qit=s(gq);_bo=r(qit,"CamembertModel"),qit.forEach(t),ubo=r(tye," (CamemBERT model)"),tye.forEach(t),bbo=i($),Gp=n($,"LI",{});var aye=s(Gp);Jie=n(aye,"STRONG",{});var jit=s(Jie);vbo=r(jit,"canine"),jit.forEach(t),Fbo=r(aye," \u2014 "),hq=n(aye,"A",{href:!0});var Dit=s(hq);Tbo=r(Dit,"CanineModel"),Dit.forEach(t),Mbo=r(aye," (CANINE model)"),aye.forEach(t),Ebo=i($),Op=n($,"LI",{});var nye=s(Op);Yie=n(nye,"STRONG",{});var Git=s(Yie);Cbo=r(Git,"clip"),Git.forEach(t),wbo=r(nye," \u2014 "),pq=n(nye,"A",{href:!0});var Oit=s(pq);Abo=r(Oit,"CLIPModel"),Oit.forEach(t),Lbo=r(nye," (CLIP model)"),nye.forEach(t),ybo=i($),Vp=n($,"LI",{});var sye=s(Vp);Kie=n(sye,"STRONG",{});var Vit=s(Kie);xbo=r(Vit,"convbert"),Vit.forEach(t),$bo=r(sye," \u2014 "),_q=n(sye,"A",{href:!0});var Xit=s(_q);kbo=r(Xit,"ConvBertModel"),Xit.forEach(t),Sbo=r(sye," (ConvBERT model)"),sye.forEach(t),Rbo=i($),Xp=n($,"LI",{});var lye=s(Xp);Zie=n(lye,"STRONG",{});var zit=s(Zie);Pbo=r(zit,"convnext"),zit.forEach(t),Bbo=r(lye," \u2014 "),uq=n(lye,"A",{href:!0});var Qit=s(uq);Ibo=r(Qit,"ConvNextModel"),Qit.forEach(t),Nbo=r(lye," (ConvNeXT model)"),lye.forEach(t),qbo=i($),zp=n($,"LI",{});var iye=s(zp);ede=n(iye,"STRONG",{});var Wit=s(ede);jbo=r(Wit,"ctrl"),Wit.forEach(t),Dbo=r(iye," \u2014 "),bq=n(iye,"A",{href:!0});var Hit=s(bq);Gbo=r(Hit,"CTRLModel"),Hit.forEach(t),Obo=r(iye," (CTRL model)"),iye.forEach(t),Vbo=i($),Qp=n($,"LI",{});var dye=s(Qp);ode=n(dye,"STRONG",{});var Uit=s(ode);Xbo=r(Uit,"cvt"),Uit.forEach(t),zbo=r(dye," \u2014 "),vq=n(dye,"A",{href:!0});var Jit=s(vq);Qbo=r(Jit,"CvtModel"),Jit.forEach(t),Wbo=r(dye," (CvT model)"),dye.forEach(t),Hbo=i($),Wp=n($,"LI",{});var cye=s(Wp);rde=n(cye,"STRONG",{});var Yit=s(rde);Ubo=r(Yit,"data2vec-audio"),Yit.forEach(t),Jbo=r(cye," \u2014 "),Fq=n(cye,"A",{href:!0});var Kit=s(Fq);Ybo=r(Kit,"Data2VecAudioModel"),Kit.forEach(t),Kbo=r(cye," (Data2VecAudio model)"),cye.forEach(t),Zbo=i($),Hp=n($,"LI",{});var fye=s(Hp);tde=n(fye,"STRONG",{});var Zit=s(tde);evo=r(Zit,"data2vec-text"),Zit.forEach(t),ovo=r(fye," \u2014 "),Tq=n(fye,"A",{href:!0});var edt=s(Tq);rvo=r(edt,"Data2VecTextModel"),edt.forEach(t),tvo=r(fye," (Data2VecText model)"),fye.forEach(t),avo=i($),Up=n($,"LI",{});var mye=s(Up);ade=n(mye,"STRONG",{});var odt=s(ade);nvo=r(odt,"data2vec-vision"),odt.forEach(t),svo=r(mye," \u2014 "),Mq=n(mye,"A",{href:!0});var rdt=s(Mq);lvo=r(rdt,"Data2VecVisionModel"),rdt.forEach(t),ivo=r(mye," (Data2VecVision model)"),mye.forEach(t),dvo=i($),Jp=n($,"LI",{});var gye=s(Jp);nde=n(gye,"STRONG",{});var tdt=s(nde);cvo=r(tdt,"deberta"),tdt.forEach(t),fvo=r(gye," \u2014 "),Eq=n(gye,"A",{href:!0});var adt=s(Eq);mvo=r(adt,"DebertaModel"),adt.forEach(t),gvo=r(gye," (DeBERTa model)"),gye.forEach(t),hvo=i($),Yp=n($,"LI",{});var hye=s(Yp);sde=n(hye,"STRONG",{});var ndt=s(sde);pvo=r(ndt,"deberta-v2"),ndt.forEach(t),_vo=r(hye," \u2014 "),Cq=n(hye,"A",{href:!0});var sdt=s(Cq);uvo=r(sdt,"DebertaV2Model"),sdt.forEach(t),bvo=r(hye," (DeBERTa-v2 model)"),hye.forEach(t),vvo=i($),Kp=n($,"LI",{});var pye=s(Kp);lde=n(pye,"STRONG",{});var ldt=s(lde);Fvo=r(ldt,"decision_transformer"),ldt.forEach(t),Tvo=r(pye," \u2014 "),wq=n(pye,"A",{href:!0});var idt=s(wq);Mvo=r(idt,"DecisionTransformerModel"),idt.forEach(t),Evo=r(pye," (Decision Transformer model)"),pye.forEach(t),Cvo=i($),Zp=n($,"LI",{});var _ye=s(Zp);ide=n(_ye,"STRONG",{});var ddt=s(ide);wvo=r(ddt,"deit"),ddt.forEach(t),Avo=r(_ye," \u2014 "),Aq=n(_ye,"A",{href:!0});var cdt=s(Aq);Lvo=r(cdt,"DeiTModel"),cdt.forEach(t),yvo=r(_ye," (DeiT model)"),_ye.forEach(t),xvo=i($),e_=n($,"LI",{});var uye=s(e_);dde=n(uye,"STRONG",{});var fdt=s(dde);$vo=r(fdt,"detr"),fdt.forEach(t),kvo=r(uye," \u2014 "),Lq=n(uye,"A",{href:!0});var mdt=s(Lq);Svo=r(mdt,"DetrModel"),mdt.forEach(t),Rvo=r(uye," (DETR model)"),uye.forEach(t),Pvo=i($),o_=n($,"LI",{});var bye=s(o_);cde=n(bye,"STRONG",{});var gdt=s(cde);Bvo=r(gdt,"distilbert"),gdt.forEach(t),Ivo=r(bye," \u2014 "),yq=n(bye,"A",{href:!0});var hdt=s(yq);Nvo=r(hdt,"DistilBertModel"),hdt.forEach(t),qvo=r(bye," (DistilBERT model)"),bye.forEach(t),jvo=i($),r_=n($,"LI",{});var vye=s(r_);fde=n(vye,"STRONG",{});var pdt=s(fde);Dvo=r(pdt,"dpr"),pdt.forEach(t),Gvo=r(vye," \u2014 "),xq=n(vye,"A",{href:!0});var _dt=s(xq);Ovo=r(_dt,"DPRQuestionEncoder"),_dt.forEach(t),Vvo=r(vye," (DPR model)"),vye.forEach(t),Xvo=i($),t_=n($,"LI",{});var Fye=s(t_);mde=n(Fye,"STRONG",{});var udt=s(mde);zvo=r(udt,"dpt"),udt.forEach(t),Qvo=r(Fye," \u2014 "),$q=n(Fye,"A",{href:!0});var bdt=s($q);Wvo=r(bdt,"DPTModel"),bdt.forEach(t),Hvo=r(Fye," (DPT model)"),Fye.forEach(t),Uvo=i($),a_=n($,"LI",{});var Tye=s(a_);gde=n(Tye,"STRONG",{});var vdt=s(gde);Jvo=r(vdt,"electra"),vdt.forEach(t),Yvo=r(Tye," \u2014 "),kq=n(Tye,"A",{href:!0});var Fdt=s(kq);Kvo=r(Fdt,"ElectraModel"),Fdt.forEach(t),Zvo=r(Tye," (ELECTRA model)"),Tye.forEach(t),eFo=i($),n_=n($,"LI",{});var Mye=s(n_);hde=n(Mye,"STRONG",{});var Tdt=s(hde);oFo=r(Tdt,"flaubert"),Tdt.forEach(t),rFo=r(Mye," \u2014 "),Sq=n(Mye,"A",{href:!0});var Mdt=s(Sq);tFo=r(Mdt,"FlaubertModel"),Mdt.forEach(t),aFo=r(Mye," (FlauBERT model)"),Mye.forEach(t),nFo=i($),s_=n($,"LI",{});var Eye=s(s_);pde=n(Eye,"STRONG",{});var Edt=s(pde);sFo=r(Edt,"flava"),Edt.forEach(t),lFo=r(Eye," \u2014 "),Rq=n(Eye,"A",{href:!0});var Cdt=s(Rq);iFo=r(Cdt,"FlavaModel"),Cdt.forEach(t),dFo=r(Eye," (FLAVA model)"),Eye.forEach(t),cFo=i($),l_=n($,"LI",{});var Cye=s(l_);_de=n(Cye,"STRONG",{});var wdt=s(_de);fFo=r(wdt,"fnet"),wdt.forEach(t),mFo=r(Cye," \u2014 "),Pq=n(Cye,"A",{href:!0});var Adt=s(Pq);gFo=r(Adt,"FNetModel"),Adt.forEach(t),hFo=r(Cye," (FNet model)"),Cye.forEach(t),pFo=i($),i_=n($,"LI",{});var wye=s(i_);ude=n(wye,"STRONG",{});var Ldt=s(ude);_Fo=r(Ldt,"fsmt"),Ldt.forEach(t),uFo=r(wye," \u2014 "),Bq=n(wye,"A",{href:!0});var ydt=s(Bq);bFo=r(ydt,"FSMTModel"),ydt.forEach(t),vFo=r(wye," (FairSeq Machine-Translation model)"),wye.forEach(t),FFo=i($),Os=n($,"LI",{});var Yk=s(Os);bde=n(Yk,"STRONG",{});var xdt=s(bde);TFo=r(xdt,"funnel"),xdt.forEach(t),MFo=r(Yk," \u2014 "),Iq=n(Yk,"A",{href:!0});var $dt=s(Iq);EFo=r($dt,"FunnelModel"),$dt.forEach(t),CFo=r(Yk," or "),Nq=n(Yk,"A",{href:!0});var kdt=s(Nq);wFo=r(kdt,"FunnelBaseModel"),kdt.forEach(t),AFo=r(Yk," (Funnel Transformer model)"),Yk.forEach(t),LFo=i($),d_=n($,"LI",{});var Aye=s(d_);vde=n(Aye,"STRONG",{});var Sdt=s(vde);yFo=r(Sdt,"glpn"),Sdt.forEach(t),xFo=r(Aye," \u2014 "),qq=n(Aye,"A",{href:!0});var Rdt=s(qq);$Fo=r(Rdt,"GLPNModel"),Rdt.forEach(t),kFo=r(Aye," (GLPN model)"),Aye.forEach(t),SFo=i($),c_=n($,"LI",{});var Lye=s(c_);Fde=n(Lye,"STRONG",{});var Pdt=s(Fde);RFo=r(Pdt,"gpt2"),Pdt.forEach(t),PFo=r(Lye," \u2014 "),jq=n(Lye,"A",{href:!0});var Bdt=s(jq);BFo=r(Bdt,"GPT2Model"),Bdt.forEach(t),IFo=r(Lye," (OpenAI GPT-2 model)"),Lye.forEach(t),NFo=i($),f_=n($,"LI",{});var yye=s(f_);Tde=n(yye,"STRONG",{});var Idt=s(Tde);qFo=r(Idt,"gpt_neo"),Idt.forEach(t),jFo=r(yye," \u2014 "),Dq=n(yye,"A",{href:!0});var Ndt=s(Dq);DFo=r(Ndt,"GPTNeoModel"),Ndt.forEach(t),GFo=r(yye," (GPT Neo model)"),yye.forEach(t),OFo=i($),m_=n($,"LI",{});var xye=s(m_);Mde=n(xye,"STRONG",{});var qdt=s(Mde);VFo=r(qdt,"gpt_neox"),qdt.forEach(t),XFo=r(xye," \u2014 "),Gq=n(xye,"A",{href:!0});var jdt=s(Gq);zFo=r(jdt,"GPTNeoXModel"),jdt.forEach(t),QFo=r(xye," (GPT NeoX model)"),xye.forEach(t),WFo=i($),g_=n($,"LI",{});var $ye=s(g_);Ede=n($ye,"STRONG",{});var Ddt=s(Ede);HFo=r(Ddt,"gptj"),Ddt.forEach(t),UFo=r($ye," \u2014 "),Oq=n($ye,"A",{href:!0});var Gdt=s(Oq);JFo=r(Gdt,"GPTJModel"),Gdt.forEach(t),YFo=r($ye," (GPT-J model)"),$ye.forEach(t),KFo=i($),h_=n($,"LI",{});var kye=s(h_);Cde=n(kye,"STRONG",{});var Odt=s(Cde);ZFo=r(Odt,"hubert"),Odt.forEach(t),eTo=r(kye," \u2014 "),Vq=n(kye,"A",{href:!0});var Vdt=s(Vq);oTo=r(Vdt,"HubertModel"),Vdt.forEach(t),rTo=r(kye," (Hubert model)"),kye.forEach(t),tTo=i($),p_=n($,"LI",{});var Sye=s(p_);wde=n(Sye,"STRONG",{});var Xdt=s(wde);aTo=r(Xdt,"ibert"),Xdt.forEach(t),nTo=r(Sye," \u2014 "),Xq=n(Sye,"A",{href:!0});var zdt=s(Xq);sTo=r(zdt,"IBertModel"),zdt.forEach(t),lTo=r(Sye," (I-BERT model)"),Sye.forEach(t),iTo=i($),__=n($,"LI",{});var Rye=s(__);Ade=n(Rye,"STRONG",{});var Qdt=s(Ade);dTo=r(Qdt,"imagegpt"),Qdt.forEach(t),cTo=r(Rye," \u2014 "),zq=n(Rye,"A",{href:!0});var Wdt=s(zq);fTo=r(Wdt,"ImageGPTModel"),Wdt.forEach(t),mTo=r(Rye," (ImageGPT model)"),Rye.forEach(t),gTo=i($),u_=n($,"LI",{});var Pye=s(u_);Lde=n(Pye,"STRONG",{});var Hdt=s(Lde);hTo=r(Hdt,"layoutlm"),Hdt.forEach(t),pTo=r(Pye," \u2014 "),Qq=n(Pye,"A",{href:!0});var Udt=s(Qq);_To=r(Udt,"LayoutLMModel"),Udt.forEach(t),uTo=r(Pye," (LayoutLM model)"),Pye.forEach(t),bTo=i($),b_=n($,"LI",{});var Bye=s(b_);yde=n(Bye,"STRONG",{});var Jdt=s(yde);vTo=r(Jdt,"layoutlmv2"),Jdt.forEach(t),FTo=r(Bye," \u2014 "),Wq=n(Bye,"A",{href:!0});var Ydt=s(Wq);TTo=r(Ydt,"LayoutLMv2Model"),Ydt.forEach(t),MTo=r(Bye," (LayoutLMv2 model)"),Bye.forEach(t),ETo=i($),v_=n($,"LI",{});var Iye=s(v_);xde=n(Iye,"STRONG",{});var Kdt=s(xde);CTo=r(Kdt,"layoutlmv3"),Kdt.forEach(t),wTo=r(Iye," \u2014 "),Hq=n(Iye,"A",{href:!0});var Zdt=s(Hq);ATo=r(Zdt,"LayoutLMv3Model"),Zdt.forEach(t),LTo=r(Iye," (LayoutLMv3 model)"),Iye.forEach(t),yTo=i($),F_=n($,"LI",{});var Nye=s(F_);$de=n(Nye,"STRONG",{});var ect=s($de);xTo=r(ect,"led"),ect.forEach(t),$To=r(Nye," \u2014 "),Uq=n(Nye,"A",{href:!0});var oct=s(Uq);kTo=r(oct,"LEDModel"),oct.forEach(t),STo=r(Nye," (LED model)"),Nye.forEach(t),RTo=i($),T_=n($,"LI",{});var qye=s(T_);kde=n(qye,"STRONG",{});var rct=s(kde);PTo=r(rct,"levit"),rct.forEach(t),BTo=r(qye," \u2014 "),Jq=n(qye,"A",{href:!0});var tct=s(Jq);ITo=r(tct,"LevitModel"),tct.forEach(t),NTo=r(qye," (LeViT model)"),qye.forEach(t),qTo=i($),M_=n($,"LI",{});var jye=s(M_);Sde=n(jye,"STRONG",{});var act=s(Sde);jTo=r(act,"longformer"),act.forEach(t),DTo=r(jye," \u2014 "),Yq=n(jye,"A",{href:!0});var nct=s(Yq);GTo=r(nct,"LongformerModel"),nct.forEach(t),OTo=r(jye," (Longformer model)"),jye.forEach(t),VTo=i($),E_=n($,"LI",{});var Dye=s(E_);Rde=n(Dye,"STRONG",{});var sct=s(Rde);XTo=r(sct,"longt5"),sct.forEach(t),zTo=r(Dye," \u2014 "),Kq=n(Dye,"A",{href:!0});var lct=s(Kq);QTo=r(lct,"LongT5Model"),lct.forEach(t),WTo=r(Dye," (LongT5 model)"),Dye.forEach(t),HTo=i($),C_=n($,"LI",{});var Gye=s(C_);Pde=n(Gye,"STRONG",{});var ict=s(Pde);UTo=r(ict,"luke"),ict.forEach(t),JTo=r(Gye," \u2014 "),Zq=n(Gye,"A",{href:!0});var dct=s(Zq);YTo=r(dct,"LukeModel"),dct.forEach(t),KTo=r(Gye," (LUKE model)"),Gye.forEach(t),ZTo=i($),w_=n($,"LI",{});var Oye=s(w_);Bde=n(Oye,"STRONG",{});var cct=s(Bde);e8o=r(cct,"lxmert"),cct.forEach(t),o8o=r(Oye," \u2014 "),ej=n(Oye,"A",{href:!0});var fct=s(ej);r8o=r(fct,"LxmertModel"),fct.forEach(t),t8o=r(Oye," (LXMERT model)"),Oye.forEach(t),a8o=i($),A_=n($,"LI",{});var Vye=s(A_);Ide=n(Vye,"STRONG",{});var mct=s(Ide);n8o=r(mct,"m2m_100"),mct.forEach(t),s8o=r(Vye," \u2014 "),oj=n(Vye,"A",{href:!0});var gct=s(oj);l8o=r(gct,"M2M100Model"),gct.forEach(t),i8o=r(Vye," (M2M100 model)"),Vye.forEach(t),d8o=i($),L_=n($,"LI",{});var Xye=s(L_);Nde=n(Xye,"STRONG",{});var hct=s(Nde);c8o=r(hct,"marian"),hct.forEach(t),f8o=r(Xye," \u2014 "),rj=n(Xye,"A",{href:!0});var pct=s(rj);m8o=r(pct,"MarianModel"),pct.forEach(t),g8o=r(Xye," (Marian model)"),Xye.forEach(t),h8o=i($),y_=n($,"LI",{});var zye=s(y_);qde=n(zye,"STRONG",{});var _ct=s(qde);p8o=r(_ct,"maskformer"),_ct.forEach(t),_8o=r(zye," \u2014 "),tj=n(zye,"A",{href:!0});var uct=s(tj);u8o=r(uct,"MaskFormerModel"),uct.forEach(t),b8o=r(zye," (MaskFormer model)"),zye.forEach(t),v8o=i($),x_=n($,"LI",{});var Qye=s(x_);jde=n(Qye,"STRONG",{});var bct=s(jde);F8o=r(bct,"mbart"),bct.forEach(t),T8o=r(Qye," \u2014 "),aj=n(Qye,"A",{href:!0});var vct=s(aj);M8o=r(vct,"MBartModel"),vct.forEach(t),E8o=r(Qye," (mBART model)"),Qye.forEach(t),C8o=i($),$_=n($,"LI",{});var Wye=s($_);Dde=n(Wye,"STRONG",{});var Fct=s(Dde);w8o=r(Fct,"mctct"),Fct.forEach(t),A8o=r(Wye," \u2014 "),nj=n(Wye,"A",{href:!0});var Tct=s(nj);L8o=r(Tct,"MCTCTModel"),Tct.forEach(t),y8o=r(Wye," (M-CTC-T model)"),Wye.forEach(t),x8o=i($),k_=n($,"LI",{});var Hye=s(k_);Gde=n(Hye,"STRONG",{});var Mct=s(Gde);$8o=r(Mct,"megatron-bert"),Mct.forEach(t),k8o=r(Hye," \u2014 "),sj=n(Hye,"A",{href:!0});var Ect=s(sj);S8o=r(Ect,"MegatronBertModel"),Ect.forEach(t),R8o=r(Hye," (Megatron-BERT model)"),Hye.forEach(t),P8o=i($),S_=n($,"LI",{});var Uye=s(S_);Ode=n(Uye,"STRONG",{});var Cct=s(Ode);B8o=r(Cct,"mobilebert"),Cct.forEach(t),I8o=r(Uye," \u2014 "),lj=n(Uye,"A",{href:!0});var wct=s(lj);N8o=r(wct,"MobileBertModel"),wct.forEach(t),q8o=r(Uye," (MobileBERT model)"),Uye.forEach(t),j8o=i($),R_=n($,"LI",{});var Jye=s(R_);Vde=n(Jye,"STRONG",{});var Act=s(Vde);D8o=r(Act,"mpnet"),Act.forEach(t),G8o=r(Jye," \u2014 "),ij=n(Jye,"A",{href:!0});var Lct=s(ij);O8o=r(Lct,"MPNetModel"),Lct.forEach(t),V8o=r(Jye," (MPNet model)"),Jye.forEach(t),X8o=i($),P_=n($,"LI",{});var Yye=s(P_);Xde=n(Yye,"STRONG",{});var yct=s(Xde);z8o=r(yct,"mt5"),yct.forEach(t),Q8o=r(Yye," \u2014 "),dj=n(Yye,"A",{href:!0});var xct=s(dj);W8o=r(xct,"MT5Model"),xct.forEach(t),H8o=r(Yye," (MT5 model)"),Yye.forEach(t),U8o=i($),B_=n($,"LI",{});var Kye=s(B_);zde=n(Kye,"STRONG",{});var $ct=s(zde);J8o=r($ct,"mvp"),$ct.forEach(t),Y8o=r(Kye," \u2014 "),cj=n(Kye,"A",{href:!0});var kct=s(cj);K8o=r(kct,"MvpModel"),kct.forEach(t),Z8o=r(Kye," (MVP model)"),Kye.forEach(t),eMo=i($),I_=n($,"LI",{});var Zye=s(I_);Qde=n(Zye,"STRONG",{});var Sct=s(Qde);oMo=r(Sct,"nystromformer"),Sct.forEach(t),rMo=r(Zye," \u2014 "),fj=n(Zye,"A",{href:!0});var Rct=s(fj);tMo=r(Rct,"NystromformerModel"),Rct.forEach(t),aMo=r(Zye," (Nystr\xF6mformer model)"),Zye.forEach(t),nMo=i($),N_=n($,"LI",{});var e9e=s(N_);Wde=n(e9e,"STRONG",{});var Pct=s(Wde);sMo=r(Pct,"openai-gpt"),Pct.forEach(t),lMo=r(e9e," \u2014 "),mj=n(e9e,"A",{href:!0});var Bct=s(mj);iMo=r(Bct,"OpenAIGPTModel"),Bct.forEach(t),dMo=r(e9e," (OpenAI GPT model)"),e9e.forEach(t),cMo=i($),q_=n($,"LI",{});var o9e=s(q_);Hde=n(o9e,"STRONG",{});var Ict=s(Hde);fMo=r(Ict,"opt"),Ict.forEach(t),mMo=r(o9e," \u2014 "),gj=n(o9e,"A",{href:!0});var Nct=s(gj);gMo=r(Nct,"OPTModel"),Nct.forEach(t),hMo=r(o9e," (OPT model)"),o9e.forEach(t),pMo=i($),j_=n($,"LI",{});var r9e=s(j_);Ude=n(r9e,"STRONG",{});var qct=s(Ude);_Mo=r(qct,"pegasus"),qct.forEach(t),uMo=r(r9e," \u2014 "),hj=n(r9e,"A",{href:!0});var jct=s(hj);bMo=r(jct,"PegasusModel"),jct.forEach(t),vMo=r(r9e," (Pegasus model)"),r9e.forEach(t),FMo=i($),D_=n($,"LI",{});var t9e=s(D_);Jde=n(t9e,"STRONG",{});var Dct=s(Jde);TMo=r(Dct,"perceiver"),Dct.forEach(t),MMo=r(t9e," \u2014 "),pj=n(t9e,"A",{href:!0});var Gct=s(pj);EMo=r(Gct,"PerceiverModel"),Gct.forEach(t),CMo=r(t9e," (Perceiver model)"),t9e.forEach(t),wMo=i($),G_=n($,"LI",{});var a9e=s(G_);Yde=n(a9e,"STRONG",{});var Oct=s(Yde);AMo=r(Oct,"plbart"),Oct.forEach(t),LMo=r(a9e," \u2014 "),_j=n(a9e,"A",{href:!0});var Vct=s(_j);yMo=r(Vct,"PLBartModel"),Vct.forEach(t),xMo=r(a9e," (PLBart model)"),a9e.forEach(t),$Mo=i($),O_=n($,"LI",{});var n9e=s(O_);Kde=n(n9e,"STRONG",{});var Xct=s(Kde);kMo=r(Xct,"poolformer"),Xct.forEach(t),SMo=r(n9e," \u2014 "),uj=n(n9e,"A",{href:!0});var zct=s(uj);RMo=r(zct,"PoolFormerModel"),zct.forEach(t),PMo=r(n9e," (PoolFormer model)"),n9e.forEach(t),BMo=i($),V_=n($,"LI",{});var s9e=s(V_);Zde=n(s9e,"STRONG",{});var Qct=s(Zde);IMo=r(Qct,"prophetnet"),Qct.forEach(t),NMo=r(s9e," \u2014 "),bj=n(s9e,"A",{href:!0});var Wct=s(bj);qMo=r(Wct,"ProphetNetModel"),Wct.forEach(t),jMo=r(s9e," (ProphetNet model)"),s9e.forEach(t),DMo=i($),X_=n($,"LI",{});var l9e=s(X_);ece=n(l9e,"STRONG",{});var Hct=s(ece);GMo=r(Hct,"qdqbert"),Hct.forEach(t),OMo=r(l9e," \u2014 "),vj=n(l9e,"A",{href:!0});var Uct=s(vj);VMo=r(Uct,"QDQBertModel"),Uct.forEach(t),XMo=r(l9e," (QDQBert model)"),l9e.forEach(t),zMo=i($),z_=n($,"LI",{});var i9e=s(z_);oce=n(i9e,"STRONG",{});var Jct=s(oce);QMo=r(Jct,"reformer"),Jct.forEach(t),WMo=r(i9e," \u2014 "),Fj=n(i9e,"A",{href:!0});var Yct=s(Fj);HMo=r(Yct,"ReformerModel"),Yct.forEach(t),UMo=r(i9e," (Reformer model)"),i9e.forEach(t),JMo=i($),Q_=n($,"LI",{});var d9e=s(Q_);rce=n(d9e,"STRONG",{});var Kct=s(rce);YMo=r(Kct,"regnet"),Kct.forEach(t),KMo=r(d9e," \u2014 "),Tj=n(d9e,"A",{href:!0});var Zct=s(Tj);ZMo=r(Zct,"RegNetModel"),Zct.forEach(t),eEo=r(d9e," (RegNet model)"),d9e.forEach(t),oEo=i($),W_=n($,"LI",{});var c9e=s(W_);tce=n(c9e,"STRONG",{});var eft=s(tce);rEo=r(eft,"rembert"),eft.forEach(t),tEo=r(c9e," \u2014 "),Mj=n(c9e,"A",{href:!0});var oft=s(Mj);aEo=r(oft,"RemBertModel"),oft.forEach(t),nEo=r(c9e," (RemBERT model)"),c9e.forEach(t),sEo=i($),H_=n($,"LI",{});var f9e=s(H_);ace=n(f9e,"STRONG",{});var rft=s(ace);lEo=r(rft,"resnet"),rft.forEach(t),iEo=r(f9e," \u2014 "),Ej=n(f9e,"A",{href:!0});var tft=s(Ej);dEo=r(tft,"ResNetModel"),tft.forEach(t),cEo=r(f9e," (ResNet model)"),f9e.forEach(t),fEo=i($),U_=n($,"LI",{});var m9e=s(U_);nce=n(m9e,"STRONG",{});var aft=s(nce);mEo=r(aft,"retribert"),aft.forEach(t),gEo=r(m9e," \u2014 "),Cj=n(m9e,"A",{href:!0});var nft=s(Cj);hEo=r(nft,"RetriBertModel"),nft.forEach(t),pEo=r(m9e," (RetriBERT model)"),m9e.forEach(t),_Eo=i($),J_=n($,"LI",{});var g9e=s(J_);sce=n(g9e,"STRONG",{});var sft=s(sce);uEo=r(sft,"roberta"),sft.forEach(t),bEo=r(g9e," \u2014 "),wj=n(g9e,"A",{href:!0});var lft=s(wj);vEo=r(lft,"RobertaModel"),lft.forEach(t),FEo=r(g9e," (RoBERTa model)"),g9e.forEach(t),TEo=i($),Y_=n($,"LI",{});var h9e=s(Y_);lce=n(h9e,"STRONG",{});var ift=s(lce);MEo=r(ift,"roformer"),ift.forEach(t),EEo=r(h9e," \u2014 "),Aj=n(h9e,"A",{href:!0});var dft=s(Aj);CEo=r(dft,"RoFormerModel"),dft.forEach(t),wEo=r(h9e," (RoFormer model)"),h9e.forEach(t),AEo=i($),K_=n($,"LI",{});var p9e=s(K_);ice=n(p9e,"STRONG",{});var cft=s(ice);LEo=r(cft,"segformer"),cft.forEach(t),yEo=r(p9e," \u2014 "),Lj=n(p9e,"A",{href:!0});var fft=s(Lj);xEo=r(fft,"SegformerModel"),fft.forEach(t),$Eo=r(p9e," (SegFormer model)"),p9e.forEach(t),kEo=i($),Z_=n($,"LI",{});var _9e=s(Z_);dce=n(_9e,"STRONG",{});var mft=s(dce);SEo=r(mft,"sew"),mft.forEach(t),REo=r(_9e," \u2014 "),yj=n(_9e,"A",{href:!0});var gft=s(yj);PEo=r(gft,"SEWModel"),gft.forEach(t),BEo=r(_9e," (SEW model)"),_9e.forEach(t),IEo=i($),eu=n($,"LI",{});var u9e=s(eu);cce=n(u9e,"STRONG",{});var hft=s(cce);NEo=r(hft,"sew-d"),hft.forEach(t),qEo=r(u9e," \u2014 "),xj=n(u9e,"A",{href:!0});var pft=s(xj);jEo=r(pft,"SEWDModel"),pft.forEach(t),DEo=r(u9e," (SEW-D model)"),u9e.forEach(t),GEo=i($),ou=n($,"LI",{});var b9e=s(ou);fce=n(b9e,"STRONG",{});var _ft=s(fce);OEo=r(_ft,"speech_to_text"),_ft.forEach(t),VEo=r(b9e," \u2014 "),$j=n(b9e,"A",{href:!0});var uft=s($j);XEo=r(uft,"Speech2TextModel"),uft.forEach(t),zEo=r(b9e," (Speech2Text model)"),b9e.forEach(t),QEo=i($),ru=n($,"LI",{});var v9e=s(ru);mce=n(v9e,"STRONG",{});var bft=s(mce);WEo=r(bft,"splinter"),bft.forEach(t),HEo=r(v9e," \u2014 "),kj=n(v9e,"A",{href:!0});var vft=s(kj);UEo=r(vft,"SplinterModel"),vft.forEach(t),JEo=r(v9e," (Splinter model)"),v9e.forEach(t),YEo=i($),tu=n($,"LI",{});var F9e=s(tu);gce=n(F9e,"STRONG",{});var Fft=s(gce);KEo=r(Fft,"squeezebert"),Fft.forEach(t),ZEo=r(F9e," \u2014 "),Sj=n(F9e,"A",{href:!0});var Tft=s(Sj);e4o=r(Tft,"SqueezeBertModel"),Tft.forEach(t),o4o=r(F9e," (SqueezeBERT model)"),F9e.forEach(t),r4o=i($),au=n($,"LI",{});var T9e=s(au);hce=n(T9e,"STRONG",{});var Mft=s(hce);t4o=r(Mft,"swin"),Mft.forEach(t),a4o=r(T9e," \u2014 "),Rj=n(T9e,"A",{href:!0});var Eft=s(Rj);n4o=r(Eft,"SwinModel"),Eft.forEach(t),s4o=r(T9e," (Swin Transformer model)"),T9e.forEach(t),l4o=i($),nu=n($,"LI",{});var M9e=s(nu);pce=n(M9e,"STRONG",{});var Cft=s(pce);i4o=r(Cft,"t5"),Cft.forEach(t),d4o=r(M9e," \u2014 "),Pj=n(M9e,"A",{href:!0});var wft=s(Pj);c4o=r(wft,"T5Model"),wft.forEach(t),f4o=r(M9e," (T5 model)"),M9e.forEach(t),m4o=i($),su=n($,"LI",{});var E9e=s(su);_ce=n(E9e,"STRONG",{});var Aft=s(_ce);g4o=r(Aft,"tapas"),Aft.forEach(t),h4o=r(E9e," \u2014 "),Bj=n(E9e,"A",{href:!0});var Lft=s(Bj);p4o=r(Lft,"TapasModel"),Lft.forEach(t),_4o=r(E9e," (TAPAS model)"),E9e.forEach(t),u4o=i($),lu=n($,"LI",{});var C9e=s(lu);uce=n(C9e,"STRONG",{});var yft=s(uce);b4o=r(yft,"trajectory_transformer"),yft.forEach(t),v4o=r(C9e," \u2014 "),Ij=n(C9e,"A",{href:!0});var xft=s(Ij);F4o=r(xft,"TrajectoryTransformerModel"),xft.forEach(t),T4o=r(C9e," (Trajectory Transformer model)"),C9e.forEach(t),M4o=i($),iu=n($,"LI",{});var w9e=s(iu);bce=n(w9e,"STRONG",{});var $ft=s(bce);E4o=r($ft,"transfo-xl"),$ft.forEach(t),C4o=r(w9e," \u2014 "),Nj=n(w9e,"A",{href:!0});var kft=s(Nj);w4o=r(kft,"TransfoXLModel"),kft.forEach(t),A4o=r(w9e," (Transformer-XL model)"),w9e.forEach(t),L4o=i($),du=n($,"LI",{});var A9e=s(du);vce=n(A9e,"STRONG",{});var Sft=s(vce);y4o=r(Sft,"unispeech"),Sft.forEach(t),x4o=r(A9e," \u2014 "),qj=n(A9e,"A",{href:!0});var Rft=s(qj);$4o=r(Rft,"UniSpeechModel"),Rft.forEach(t),k4o=r(A9e," (UniSpeech model)"),A9e.forEach(t),S4o=i($),cu=n($,"LI",{});var L9e=s(cu);Fce=n(L9e,"STRONG",{});var Pft=s(Fce);R4o=r(Pft,"unispeech-sat"),Pft.forEach(t),P4o=r(L9e," \u2014 "),jj=n(L9e,"A",{href:!0});var Bft=s(jj);B4o=r(Bft,"UniSpeechSatModel"),Bft.forEach(t),I4o=r(L9e," (UniSpeechSat model)"),L9e.forEach(t),N4o=i($),fu=n($,"LI",{});var y9e=s(fu);Tce=n(y9e,"STRONG",{});var Ift=s(Tce);q4o=r(Ift,"van"),Ift.forEach(t),j4o=r(y9e," \u2014 "),Dj=n(y9e,"A",{href:!0});var Nft=s(Dj);D4o=r(Nft,"VanModel"),Nft.forEach(t),G4o=r(y9e," (VAN model)"),y9e.forEach(t),O4o=i($),mu=n($,"LI",{});var x9e=s(mu);Mce=n(x9e,"STRONG",{});var qft=s(Mce);V4o=r(qft,"vilt"),qft.forEach(t),X4o=r(x9e," \u2014 "),Gj=n(x9e,"A",{href:!0});var jft=s(Gj);z4o=r(jft,"ViltModel"),jft.forEach(t),Q4o=r(x9e," (ViLT model)"),x9e.forEach(t),W4o=i($),gu=n($,"LI",{});var $9e=s(gu);Ece=n($9e,"STRONG",{});var Dft=s(Ece);H4o=r(Dft,"vision-text-dual-encoder"),Dft.forEach(t),U4o=r($9e," \u2014 "),Oj=n($9e,"A",{href:!0});var Gft=s(Oj);J4o=r(Gft,"VisionTextDualEncoderModel"),Gft.forEach(t),Y4o=r($9e," (VisionTextDualEncoder model)"),$9e.forEach(t),K4o=i($),hu=n($,"LI",{});var k9e=s(hu);Cce=n(k9e,"STRONG",{});var Oft=s(Cce);Z4o=r(Oft,"visual_bert"),Oft.forEach(t),eCo=r(k9e," \u2014 "),Vj=n(k9e,"A",{href:!0});var Vft=s(Vj);oCo=r(Vft,"VisualBertModel"),Vft.forEach(t),rCo=r(k9e," (VisualBERT model)"),k9e.forEach(t),tCo=i($),pu=n($,"LI",{});var S9e=s(pu);wce=n(S9e,"STRONG",{});var Xft=s(wce);aCo=r(Xft,"vit"),Xft.forEach(t),nCo=r(S9e," \u2014 "),Xj=n(S9e,"A",{href:!0});var zft=s(Xj);sCo=r(zft,"ViTModel"),zft.forEach(t),lCo=r(S9e," (ViT model)"),S9e.forEach(t),iCo=i($),_u=n($,"LI",{});var R9e=s(_u);Ace=n(R9e,"STRONG",{});var Qft=s(Ace);dCo=r(Qft,"vit_mae"),Qft.forEach(t),cCo=r(R9e," \u2014 "),zj=n(R9e,"A",{href:!0});var Wft=s(zj);fCo=r(Wft,"ViTMAEModel"),Wft.forEach(t),mCo=r(R9e," (ViTMAE model)"),R9e.forEach(t),gCo=i($),uu=n($,"LI",{});var P9e=s(uu);Lce=n(P9e,"STRONG",{});var Hft=s(Lce);hCo=r(Hft,"wav2vec2"),Hft.forEach(t),pCo=r(P9e," \u2014 "),Qj=n(P9e,"A",{href:!0});var Uft=s(Qj);_Co=r(Uft,"Wav2Vec2Model"),Uft.forEach(t),uCo=r(P9e," (Wav2Vec2 model)"),P9e.forEach(t),bCo=i($),bu=n($,"LI",{});var B9e=s(bu);yce=n(B9e,"STRONG",{});var Jft=s(yce);vCo=r(Jft,"wav2vec2-conformer"),Jft.forEach(t),FCo=r(B9e," \u2014 "),Wj=n(B9e,"A",{href:!0});var Yft=s(Wj);TCo=r(Yft,"Wav2Vec2ConformerModel"),Yft.forEach(t),MCo=r(B9e," (Wav2Vec2-Conformer model)"),B9e.forEach(t),ECo=i($),vu=n($,"LI",{});var I9e=s(vu);xce=n(I9e,"STRONG",{});var Kft=s(xce);CCo=r(Kft,"wavlm"),Kft.forEach(t),wCo=r(I9e," \u2014 "),Hj=n(I9e,"A",{href:!0});var Zft=s(Hj);ACo=r(Zft,"WavLMModel"),Zft.forEach(t),LCo=r(I9e," (WavLM model)"),I9e.forEach(t),yCo=i($),Fu=n($,"LI",{});var N9e=s(Fu);$ce=n(N9e,"STRONG",{});var emt=s($ce);xCo=r(emt,"xglm"),emt.forEach(t),$Co=r(N9e," \u2014 "),Uj=n(N9e,"A",{href:!0});var omt=s(Uj);kCo=r(omt,"XGLMModel"),omt.forEach(t),SCo=r(N9e," (XGLM model)"),N9e.forEach(t),RCo=i($),Tu=n($,"LI",{});var q9e=s(Tu);kce=n(q9e,"STRONG",{});var rmt=s(kce);PCo=r(rmt,"xlm"),rmt.forEach(t),BCo=r(q9e," \u2014 "),Jj=n(q9e,"A",{href:!0});var tmt=s(Jj);ICo=r(tmt,"XLMModel"),tmt.forEach(t),NCo=r(q9e," (XLM model)"),q9e.forEach(t),qCo=i($),Mu=n($,"LI",{});var j9e=s(Mu);Sce=n(j9e,"STRONG",{});var amt=s(Sce);jCo=r(amt,"xlm-prophetnet"),amt.forEach(t),DCo=r(j9e," \u2014 "),Yj=n(j9e,"A",{href:!0});var nmt=s(Yj);GCo=r(nmt,"XLMProphetNetModel"),nmt.forEach(t),OCo=r(j9e," (XLM-ProphetNet model)"),j9e.forEach(t),VCo=i($),Eu=n($,"LI",{});var D9e=s(Eu);Rce=n(D9e,"STRONG",{});var smt=s(Rce);XCo=r(smt,"xlm-roberta"),smt.forEach(t),zCo=r(D9e," \u2014 "),Kj=n(D9e,"A",{href:!0});var lmt=s(Kj);QCo=r(lmt,"XLMRobertaModel"),lmt.forEach(t),WCo=r(D9e," (XLM-RoBERTa model)"),D9e.forEach(t),HCo=i($),Cu=n($,"LI",{});var G9e=s(Cu);Pce=n(G9e,"STRONG",{});var imt=s(Pce);UCo=r(imt,"xlm-roberta-xl"),imt.forEach(t),JCo=r(G9e," \u2014 "),Zj=n(G9e,"A",{href:!0});var dmt=s(Zj);YCo=r(dmt,"XLMRobertaXLModel"),dmt.forEach(t),KCo=r(G9e," (XLM-RoBERTa-XL model)"),G9e.forEach(t),ZCo=i($),wu=n($,"LI",{});var O9e=s(wu);Bce=n(O9e,"STRONG",{});var cmt=s(Bce);e5o=r(cmt,"xlnet"),cmt.forEach(t),o5o=r(O9e," \u2014 "),eD=n(O9e,"A",{href:!0});var fmt=s(eD);r5o=r(fmt,"XLNetModel"),fmt.forEach(t),t5o=r(O9e," (XLNet model)"),O9e.forEach(t),a5o=i($),Au=n($,"LI",{});var V9e=s(Au);Ice=n(V9e,"STRONG",{});var mmt=s(Ice);n5o=r(mmt,"yolos"),mmt.forEach(t),s5o=r(V9e," \u2014 "),oD=n(V9e,"A",{href:!0});var gmt=s(oD);l5o=r(gmt,"YolosModel"),gmt.forEach(t),i5o=r(V9e," (YOLOS model)"),V9e.forEach(t),d5o=i($),Lu=n($,"LI",{});var X9e=s(Lu);Nce=n(X9e,"STRONG",{});var hmt=s(Nce);c5o=r(hmt,"yoso"),hmt.forEach(t),f5o=r(X9e," \u2014 "),rD=n(X9e,"A",{href:!0});var pmt=s(rD);m5o=r(pmt,"YosoModel"),pmt.forEach(t),g5o=r(X9e," (YOSO model)"),X9e.forEach(t),$.forEach(t),h5o=i(aa),yu=n(aa,"P",{});var z9e=s(yu);p5o=r(z9e,"The model is set in evaluation mode by default using "),qce=n(z9e,"CODE",{});var _mt=s(qce);_5o=r(_mt,"model.eval()"),_mt.forEach(t),u5o=r(z9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jce=n(z9e,"CODE",{});var umt=s(jce);b5o=r(umt,"model.train()"),umt.forEach(t),z9e.forEach(t),v5o=i(aa),T(xu.$$.fragment,aa),aa.forEach(t),Js.forEach(t),JGe=i(f),qi=n(f,"H2",{class:!0});var rXe=s(qi);$u=n(rXe,"A",{id:!0,class:!0,href:!0});var bmt=s($u);Dce=n(bmt,"SPAN",{});var vmt=s(Dce);T(nL.$$.fragment,vmt),vmt.forEach(t),bmt.forEach(t),F5o=i(rXe),Gce=n(rXe,"SPAN",{});var Fmt=s(Gce);T5o=r(Fmt,"AutoModelForPreTraining"),Fmt.forEach(t),rXe.forEach(t),YGe=i(f),$o=n(f,"DIV",{class:!0});var Ys=s($o);T(sL.$$.fragment,Ys),M5o=i(Ys),ji=n(Ys,"P",{});var voe=s(ji);E5o=r(voe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),tD=n(voe,"A",{href:!0});var Tmt=s(tD);C5o=r(Tmt,"from_pretrained()"),Tmt.forEach(t),w5o=r(voe," class method or the "),aD=n(voe,"A",{href:!0});var Mmt=s(aD);A5o=r(Mmt,"from_config()"),Mmt.forEach(t),L5o=r(voe,` class
method.`),voe.forEach(t),y5o=i(Ys),lL=n(Ys,"P",{});var tXe=s(lL);x5o=r(tXe,"This class cannot be instantiated directly using "),Oce=n(tXe,"CODE",{});var Emt=s(Oce);$5o=r(Emt,"__init__()"),Emt.forEach(t),k5o=r(tXe," (throws an error)."),tXe.forEach(t),S5o=i(Ys),st=n(Ys,"DIV",{class:!0});var Sw=s(st);T(iL.$$.fragment,Sw),R5o=i(Sw),Vce=n(Sw,"P",{});var Cmt=s(Vce);P5o=r(Cmt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Cmt.forEach(t),B5o=i(Sw),Di=n(Sw,"P",{});var Foe=s(Di);I5o=r(Foe,`Note:
Loading a model from its configuration file does `),Xce=n(Foe,"STRONG",{});var wmt=s(Xce);N5o=r(wmt,"not"),wmt.forEach(t),q5o=r(Foe,` load the model weights. It only affects the
model\u2019s configuration. Use `),nD=n(Foe,"A",{href:!0});var Amt=s(nD);j5o=r(Amt,"from_pretrained()"),Amt.forEach(t),D5o=r(Foe," to load the model weights."),Foe.forEach(t),G5o=i(Sw),T(ku.$$.fragment,Sw),Sw.forEach(t),O5o=i(Ys),Ye=n(Ys,"DIV",{class:!0});var na=s(Ye);T(dL.$$.fragment,na),V5o=i(na),zce=n(na,"P",{});var Lmt=s(zce);X5o=r(Lmt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Lmt.forEach(t),z5o=i(na),Ra=n(na,"P",{});var Rw=s(Ra);Q5o=r(Rw,"The model class to instantiate is selected based on the "),Qce=n(Rw,"CODE",{});var ymt=s(Qce);W5o=r(ymt,"model_type"),ymt.forEach(t),H5o=r(Rw,` property of the config object (either
passed as an argument or loaded from `),Wce=n(Rw,"CODE",{});var xmt=s(Wce);U5o=r(xmt,"pretrained_model_name_or_path"),xmt.forEach(t),J5o=r(Rw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hce=n(Rw,"CODE",{});var $mt=s(Hce);Y5o=r($mt,"pretrained_model_name_or_path"),$mt.forEach(t),K5o=r(Rw,":"),Rw.forEach(t),Z5o=i(na),G=n(na,"UL",{});var O=s(G);Su=n(O,"LI",{});var Q9e=s(Su);Uce=n(Q9e,"STRONG",{});var kmt=s(Uce);e3o=r(kmt,"albert"),kmt.forEach(t),o3o=r(Q9e," \u2014 "),sD=n(Q9e,"A",{href:!0});var Smt=s(sD);r3o=r(Smt,"AlbertForPreTraining"),Smt.forEach(t),t3o=r(Q9e," (ALBERT model)"),Q9e.forEach(t),a3o=i(O),Ru=n(O,"LI",{});var W9e=s(Ru);Jce=n(W9e,"STRONG",{});var Rmt=s(Jce);n3o=r(Rmt,"bart"),Rmt.forEach(t),s3o=r(W9e," \u2014 "),lD=n(W9e,"A",{href:!0});var Pmt=s(lD);l3o=r(Pmt,"BartForConditionalGeneration"),Pmt.forEach(t),i3o=r(W9e," (BART model)"),W9e.forEach(t),d3o=i(O),Pu=n(O,"LI",{});var H9e=s(Pu);Yce=n(H9e,"STRONG",{});var Bmt=s(Yce);c3o=r(Bmt,"bert"),Bmt.forEach(t),f3o=r(H9e," \u2014 "),iD=n(H9e,"A",{href:!0});var Imt=s(iD);m3o=r(Imt,"BertForPreTraining"),Imt.forEach(t),g3o=r(H9e," (BERT model)"),H9e.forEach(t),h3o=i(O),Bu=n(O,"LI",{});var U9e=s(Bu);Kce=n(U9e,"STRONG",{});var Nmt=s(Kce);p3o=r(Nmt,"big_bird"),Nmt.forEach(t),_3o=r(U9e," \u2014 "),dD=n(U9e,"A",{href:!0});var qmt=s(dD);u3o=r(qmt,"BigBirdForPreTraining"),qmt.forEach(t),b3o=r(U9e," (BigBird model)"),U9e.forEach(t),v3o=i(O),Iu=n(O,"LI",{});var J9e=s(Iu);Zce=n(J9e,"STRONG",{});var jmt=s(Zce);F3o=r(jmt,"bloom"),jmt.forEach(t),T3o=r(J9e," \u2014 "),cD=n(J9e,"A",{href:!0});var Dmt=s(cD);M3o=r(Dmt,"BloomForCausalLM"),Dmt.forEach(t),E3o=r(J9e," (BLOOM model)"),J9e.forEach(t),C3o=i(O),Nu=n(O,"LI",{});var Y9e=s(Nu);efe=n(Y9e,"STRONG",{});var Gmt=s(efe);w3o=r(Gmt,"camembert"),Gmt.forEach(t),A3o=r(Y9e," \u2014 "),fD=n(Y9e,"A",{href:!0});var Omt=s(fD);L3o=r(Omt,"CamembertForMaskedLM"),Omt.forEach(t),y3o=r(Y9e," (CamemBERT model)"),Y9e.forEach(t),x3o=i(O),qu=n(O,"LI",{});var K9e=s(qu);ofe=n(K9e,"STRONG",{});var Vmt=s(ofe);$3o=r(Vmt,"ctrl"),Vmt.forEach(t),k3o=r(K9e," \u2014 "),mD=n(K9e,"A",{href:!0});var Xmt=s(mD);S3o=r(Xmt,"CTRLLMHeadModel"),Xmt.forEach(t),R3o=r(K9e," (CTRL model)"),K9e.forEach(t),P3o=i(O),ju=n(O,"LI",{});var Z9e=s(ju);rfe=n(Z9e,"STRONG",{});var zmt=s(rfe);B3o=r(zmt,"data2vec-text"),zmt.forEach(t),I3o=r(Z9e," \u2014 "),gD=n(Z9e,"A",{href:!0});var Qmt=s(gD);N3o=r(Qmt,"Data2VecTextForMaskedLM"),Qmt.forEach(t),q3o=r(Z9e," (Data2VecText model)"),Z9e.forEach(t),j3o=i(O),Du=n(O,"LI",{});var exe=s(Du);tfe=n(exe,"STRONG",{});var Wmt=s(tfe);D3o=r(Wmt,"deberta"),Wmt.forEach(t),G3o=r(exe," \u2014 "),hD=n(exe,"A",{href:!0});var Hmt=s(hD);O3o=r(Hmt,"DebertaForMaskedLM"),Hmt.forEach(t),V3o=r(exe," (DeBERTa model)"),exe.forEach(t),X3o=i(O),Gu=n(O,"LI",{});var oxe=s(Gu);afe=n(oxe,"STRONG",{});var Umt=s(afe);z3o=r(Umt,"deberta-v2"),Umt.forEach(t),Q3o=r(oxe," \u2014 "),pD=n(oxe,"A",{href:!0});var Jmt=s(pD);W3o=r(Jmt,"DebertaV2ForMaskedLM"),Jmt.forEach(t),H3o=r(oxe," (DeBERTa-v2 model)"),oxe.forEach(t),U3o=i(O),Ou=n(O,"LI",{});var rxe=s(Ou);nfe=n(rxe,"STRONG",{});var Ymt=s(nfe);J3o=r(Ymt,"distilbert"),Ymt.forEach(t),Y3o=r(rxe," \u2014 "),_D=n(rxe,"A",{href:!0});var Kmt=s(_D);K3o=r(Kmt,"DistilBertForMaskedLM"),Kmt.forEach(t),Z3o=r(rxe," (DistilBERT model)"),rxe.forEach(t),e0o=i(O),Vu=n(O,"LI",{});var txe=s(Vu);sfe=n(txe,"STRONG",{});var Zmt=s(sfe);o0o=r(Zmt,"electra"),Zmt.forEach(t),r0o=r(txe," \u2014 "),uD=n(txe,"A",{href:!0});var egt=s(uD);t0o=r(egt,"ElectraForPreTraining"),egt.forEach(t),a0o=r(txe," (ELECTRA model)"),txe.forEach(t),n0o=i(O),Xu=n(O,"LI",{});var axe=s(Xu);lfe=n(axe,"STRONG",{});var ogt=s(lfe);s0o=r(ogt,"flaubert"),ogt.forEach(t),l0o=r(axe," \u2014 "),bD=n(axe,"A",{href:!0});var rgt=s(bD);i0o=r(rgt,"FlaubertWithLMHeadModel"),rgt.forEach(t),d0o=r(axe," (FlauBERT model)"),axe.forEach(t),c0o=i(O),zu=n(O,"LI",{});var nxe=s(zu);ife=n(nxe,"STRONG",{});var tgt=s(ife);f0o=r(tgt,"flava"),tgt.forEach(t),m0o=r(nxe," \u2014 "),vD=n(nxe,"A",{href:!0});var agt=s(vD);g0o=r(agt,"FlavaForPreTraining"),agt.forEach(t),h0o=r(nxe," (FLAVA model)"),nxe.forEach(t),p0o=i(O),Qu=n(O,"LI",{});var sxe=s(Qu);dfe=n(sxe,"STRONG",{});var ngt=s(dfe);_0o=r(ngt,"fnet"),ngt.forEach(t),u0o=r(sxe," \u2014 "),FD=n(sxe,"A",{href:!0});var sgt=s(FD);b0o=r(sgt,"FNetForPreTraining"),sgt.forEach(t),v0o=r(sxe," (FNet model)"),sxe.forEach(t),F0o=i(O),Wu=n(O,"LI",{});var lxe=s(Wu);cfe=n(lxe,"STRONG",{});var lgt=s(cfe);T0o=r(lgt,"fsmt"),lgt.forEach(t),M0o=r(lxe," \u2014 "),TD=n(lxe,"A",{href:!0});var igt=s(TD);E0o=r(igt,"FSMTForConditionalGeneration"),igt.forEach(t),C0o=r(lxe," (FairSeq Machine-Translation model)"),lxe.forEach(t),w0o=i(O),Hu=n(O,"LI",{});var ixe=s(Hu);ffe=n(ixe,"STRONG",{});var dgt=s(ffe);A0o=r(dgt,"funnel"),dgt.forEach(t),L0o=r(ixe," \u2014 "),MD=n(ixe,"A",{href:!0});var cgt=s(MD);y0o=r(cgt,"FunnelForPreTraining"),cgt.forEach(t),x0o=r(ixe," (Funnel Transformer model)"),ixe.forEach(t),$0o=i(O),Uu=n(O,"LI",{});var dxe=s(Uu);mfe=n(dxe,"STRONG",{});var fgt=s(mfe);k0o=r(fgt,"gpt2"),fgt.forEach(t),S0o=r(dxe," \u2014 "),ED=n(dxe,"A",{href:!0});var mgt=s(ED);R0o=r(mgt,"GPT2LMHeadModel"),mgt.forEach(t),P0o=r(dxe," (OpenAI GPT-2 model)"),dxe.forEach(t),B0o=i(O),Ju=n(O,"LI",{});var cxe=s(Ju);gfe=n(cxe,"STRONG",{});var ggt=s(gfe);I0o=r(ggt,"ibert"),ggt.forEach(t),N0o=r(cxe," \u2014 "),CD=n(cxe,"A",{href:!0});var hgt=s(CD);q0o=r(hgt,"IBertForMaskedLM"),hgt.forEach(t),j0o=r(cxe," (I-BERT model)"),cxe.forEach(t),D0o=i(O),Yu=n(O,"LI",{});var fxe=s(Yu);hfe=n(fxe,"STRONG",{});var pgt=s(hfe);G0o=r(pgt,"layoutlm"),pgt.forEach(t),O0o=r(fxe," \u2014 "),wD=n(fxe,"A",{href:!0});var _gt=s(wD);V0o=r(_gt,"LayoutLMForMaskedLM"),_gt.forEach(t),X0o=r(fxe," (LayoutLM model)"),fxe.forEach(t),z0o=i(O),Ku=n(O,"LI",{});var mxe=s(Ku);pfe=n(mxe,"STRONG",{});var ugt=s(pfe);Q0o=r(ugt,"longformer"),ugt.forEach(t),W0o=r(mxe," \u2014 "),AD=n(mxe,"A",{href:!0});var bgt=s(AD);H0o=r(bgt,"LongformerForMaskedLM"),bgt.forEach(t),U0o=r(mxe," (Longformer model)"),mxe.forEach(t),J0o=i(O),Zu=n(O,"LI",{});var gxe=s(Zu);_fe=n(gxe,"STRONG",{});var vgt=s(_fe);Y0o=r(vgt,"lxmert"),vgt.forEach(t),K0o=r(gxe," \u2014 "),LD=n(gxe,"A",{href:!0});var Fgt=s(LD);Z0o=r(Fgt,"LxmertForPreTraining"),Fgt.forEach(t),ewo=r(gxe," (LXMERT model)"),gxe.forEach(t),owo=i(O),e7=n(O,"LI",{});var hxe=s(e7);ufe=n(hxe,"STRONG",{});var Tgt=s(ufe);rwo=r(Tgt,"megatron-bert"),Tgt.forEach(t),two=r(hxe," \u2014 "),yD=n(hxe,"A",{href:!0});var Mgt=s(yD);awo=r(Mgt,"MegatronBertForPreTraining"),Mgt.forEach(t),nwo=r(hxe," (Megatron-BERT model)"),hxe.forEach(t),swo=i(O),o7=n(O,"LI",{});var pxe=s(o7);bfe=n(pxe,"STRONG",{});var Egt=s(bfe);lwo=r(Egt,"mobilebert"),Egt.forEach(t),iwo=r(pxe," \u2014 "),xD=n(pxe,"A",{href:!0});var Cgt=s(xD);dwo=r(Cgt,"MobileBertForPreTraining"),Cgt.forEach(t),cwo=r(pxe," (MobileBERT model)"),pxe.forEach(t),fwo=i(O),r7=n(O,"LI",{});var _xe=s(r7);vfe=n(_xe,"STRONG",{});var wgt=s(vfe);mwo=r(wgt,"mpnet"),wgt.forEach(t),gwo=r(_xe," \u2014 "),$D=n(_xe,"A",{href:!0});var Agt=s($D);hwo=r(Agt,"MPNetForMaskedLM"),Agt.forEach(t),pwo=r(_xe," (MPNet model)"),_xe.forEach(t),_wo=i(O),t7=n(O,"LI",{});var uxe=s(t7);Ffe=n(uxe,"STRONG",{});var Lgt=s(Ffe);uwo=r(Lgt,"mvp"),Lgt.forEach(t),bwo=r(uxe," \u2014 "),kD=n(uxe,"A",{href:!0});var ygt=s(kD);vwo=r(ygt,"MvpForConditionalGeneration"),ygt.forEach(t),Fwo=r(uxe," (MVP model)"),uxe.forEach(t),Two=i(O),a7=n(O,"LI",{});var bxe=s(a7);Tfe=n(bxe,"STRONG",{});var xgt=s(Tfe);Mwo=r(xgt,"openai-gpt"),xgt.forEach(t),Ewo=r(bxe," \u2014 "),SD=n(bxe,"A",{href:!0});var $gt=s(SD);Cwo=r($gt,"OpenAIGPTLMHeadModel"),$gt.forEach(t),wwo=r(bxe," (OpenAI GPT model)"),bxe.forEach(t),Awo=i(O),n7=n(O,"LI",{});var vxe=s(n7);Mfe=n(vxe,"STRONG",{});var kgt=s(Mfe);Lwo=r(kgt,"retribert"),kgt.forEach(t),ywo=r(vxe," \u2014 "),RD=n(vxe,"A",{href:!0});var Sgt=s(RD);xwo=r(Sgt,"RetriBertModel"),Sgt.forEach(t),$wo=r(vxe," (RetriBERT model)"),vxe.forEach(t),kwo=i(O),s7=n(O,"LI",{});var Fxe=s(s7);Efe=n(Fxe,"STRONG",{});var Rgt=s(Efe);Swo=r(Rgt,"roberta"),Rgt.forEach(t),Rwo=r(Fxe," \u2014 "),PD=n(Fxe,"A",{href:!0});var Pgt=s(PD);Pwo=r(Pgt,"RobertaForMaskedLM"),Pgt.forEach(t),Bwo=r(Fxe," (RoBERTa model)"),Fxe.forEach(t),Iwo=i(O),l7=n(O,"LI",{});var Txe=s(l7);Cfe=n(Txe,"STRONG",{});var Bgt=s(Cfe);Nwo=r(Bgt,"splinter"),Bgt.forEach(t),qwo=r(Txe," \u2014 "),BD=n(Txe,"A",{href:!0});var Igt=s(BD);jwo=r(Igt,"SplinterForPreTraining"),Igt.forEach(t),Dwo=r(Txe," (Splinter model)"),Txe.forEach(t),Gwo=i(O),i7=n(O,"LI",{});var Mxe=s(i7);wfe=n(Mxe,"STRONG",{});var Ngt=s(wfe);Owo=r(Ngt,"squeezebert"),Ngt.forEach(t),Vwo=r(Mxe," \u2014 "),ID=n(Mxe,"A",{href:!0});var qgt=s(ID);Xwo=r(qgt,"SqueezeBertForMaskedLM"),qgt.forEach(t),zwo=r(Mxe," (SqueezeBERT model)"),Mxe.forEach(t),Qwo=i(O),d7=n(O,"LI",{});var Exe=s(d7);Afe=n(Exe,"STRONG",{});var jgt=s(Afe);Wwo=r(jgt,"t5"),jgt.forEach(t),Hwo=r(Exe," \u2014 "),ND=n(Exe,"A",{href:!0});var Dgt=s(ND);Uwo=r(Dgt,"T5ForConditionalGeneration"),Dgt.forEach(t),Jwo=r(Exe," (T5 model)"),Exe.forEach(t),Ywo=i(O),c7=n(O,"LI",{});var Cxe=s(c7);Lfe=n(Cxe,"STRONG",{});var Ggt=s(Lfe);Kwo=r(Ggt,"tapas"),Ggt.forEach(t),Zwo=r(Cxe," \u2014 "),qD=n(Cxe,"A",{href:!0});var Ogt=s(qD);eAo=r(Ogt,"TapasForMaskedLM"),Ogt.forEach(t),oAo=r(Cxe," (TAPAS model)"),Cxe.forEach(t),rAo=i(O),f7=n(O,"LI",{});var wxe=s(f7);yfe=n(wxe,"STRONG",{});var Vgt=s(yfe);tAo=r(Vgt,"transfo-xl"),Vgt.forEach(t),aAo=r(wxe," \u2014 "),jD=n(wxe,"A",{href:!0});var Xgt=s(jD);nAo=r(Xgt,"TransfoXLLMHeadModel"),Xgt.forEach(t),sAo=r(wxe," (Transformer-XL model)"),wxe.forEach(t),lAo=i(O),m7=n(O,"LI",{});var Axe=s(m7);xfe=n(Axe,"STRONG",{});var zgt=s(xfe);iAo=r(zgt,"unispeech"),zgt.forEach(t),dAo=r(Axe," \u2014 "),DD=n(Axe,"A",{href:!0});var Qgt=s(DD);cAo=r(Qgt,"UniSpeechForPreTraining"),Qgt.forEach(t),fAo=r(Axe," (UniSpeech model)"),Axe.forEach(t),mAo=i(O),g7=n(O,"LI",{});var Lxe=s(g7);$fe=n(Lxe,"STRONG",{});var Wgt=s($fe);gAo=r(Wgt,"unispeech-sat"),Wgt.forEach(t),hAo=r(Lxe," \u2014 "),GD=n(Lxe,"A",{href:!0});var Hgt=s(GD);pAo=r(Hgt,"UniSpeechSatForPreTraining"),Hgt.forEach(t),_Ao=r(Lxe," (UniSpeechSat model)"),Lxe.forEach(t),uAo=i(O),h7=n(O,"LI",{});var yxe=s(h7);kfe=n(yxe,"STRONG",{});var Ugt=s(kfe);bAo=r(Ugt,"visual_bert"),Ugt.forEach(t),vAo=r(yxe," \u2014 "),OD=n(yxe,"A",{href:!0});var Jgt=s(OD);FAo=r(Jgt,"VisualBertForPreTraining"),Jgt.forEach(t),TAo=r(yxe," (VisualBERT model)"),yxe.forEach(t),MAo=i(O),p7=n(O,"LI",{});var xxe=s(p7);Sfe=n(xxe,"STRONG",{});var Ygt=s(Sfe);EAo=r(Ygt,"vit_mae"),Ygt.forEach(t),CAo=r(xxe," \u2014 "),VD=n(xxe,"A",{href:!0});var Kgt=s(VD);wAo=r(Kgt,"ViTMAEForPreTraining"),Kgt.forEach(t),AAo=r(xxe," (ViTMAE model)"),xxe.forEach(t),LAo=i(O),_7=n(O,"LI",{});var $xe=s(_7);Rfe=n($xe,"STRONG",{});var Zgt=s(Rfe);yAo=r(Zgt,"wav2vec2"),Zgt.forEach(t),xAo=r($xe," \u2014 "),XD=n($xe,"A",{href:!0});var eht=s(XD);$Ao=r(eht,"Wav2Vec2ForPreTraining"),eht.forEach(t),kAo=r($xe," (Wav2Vec2 model)"),$xe.forEach(t),SAo=i(O),u7=n(O,"LI",{});var kxe=s(u7);Pfe=n(kxe,"STRONG",{});var oht=s(Pfe);RAo=r(oht,"wav2vec2-conformer"),oht.forEach(t),PAo=r(kxe," \u2014 "),zD=n(kxe,"A",{href:!0});var rht=s(zD);BAo=r(rht,"Wav2Vec2ConformerForPreTraining"),rht.forEach(t),IAo=r(kxe," (Wav2Vec2-Conformer model)"),kxe.forEach(t),NAo=i(O),b7=n(O,"LI",{});var Sxe=s(b7);Bfe=n(Sxe,"STRONG",{});var tht=s(Bfe);qAo=r(tht,"xlm"),tht.forEach(t),jAo=r(Sxe," \u2014 "),QD=n(Sxe,"A",{href:!0});var aht=s(QD);DAo=r(aht,"XLMWithLMHeadModel"),aht.forEach(t),GAo=r(Sxe," (XLM model)"),Sxe.forEach(t),OAo=i(O),v7=n(O,"LI",{});var Rxe=s(v7);Ife=n(Rxe,"STRONG",{});var nht=s(Ife);VAo=r(nht,"xlm-roberta"),nht.forEach(t),XAo=r(Rxe," \u2014 "),WD=n(Rxe,"A",{href:!0});var sht=s(WD);zAo=r(sht,"XLMRobertaForMaskedLM"),sht.forEach(t),QAo=r(Rxe," (XLM-RoBERTa model)"),Rxe.forEach(t),WAo=i(O),F7=n(O,"LI",{});var Pxe=s(F7);Nfe=n(Pxe,"STRONG",{});var lht=s(Nfe);HAo=r(lht,"xlm-roberta-xl"),lht.forEach(t),UAo=r(Pxe," \u2014 "),HD=n(Pxe,"A",{href:!0});var iht=s(HD);JAo=r(iht,"XLMRobertaXLForMaskedLM"),iht.forEach(t),YAo=r(Pxe," (XLM-RoBERTa-XL model)"),Pxe.forEach(t),KAo=i(O),T7=n(O,"LI",{});var Bxe=s(T7);qfe=n(Bxe,"STRONG",{});var dht=s(qfe);ZAo=r(dht,"xlnet"),dht.forEach(t),e6o=r(Bxe," \u2014 "),UD=n(Bxe,"A",{href:!0});var cht=s(UD);o6o=r(cht,"XLNetLMHeadModel"),cht.forEach(t),r6o=r(Bxe," (XLNet model)"),Bxe.forEach(t),O.forEach(t),t6o=i(na),M7=n(na,"P",{});var Ixe=s(M7);a6o=r(Ixe,"The model is set in evaluation mode by default using "),jfe=n(Ixe,"CODE",{});var fht=s(jfe);n6o=r(fht,"model.eval()"),fht.forEach(t),s6o=r(Ixe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dfe=n(Ixe,"CODE",{});var mht=s(Dfe);l6o=r(mht,"model.train()"),mht.forEach(t),Ixe.forEach(t),i6o=i(na),T(E7.$$.fragment,na),na.forEach(t),Ys.forEach(t),KGe=i(f),Gi=n(f,"H2",{class:!0});var aXe=s(Gi);C7=n(aXe,"A",{id:!0,class:!0,href:!0});var ght=s(C7);Gfe=n(ght,"SPAN",{});var hht=s(Gfe);T(cL.$$.fragment,hht),hht.forEach(t),ght.forEach(t),d6o=i(aXe),Ofe=n(aXe,"SPAN",{});var pht=s(Ofe);c6o=r(pht,"AutoModelForCausalLM"),pht.forEach(t),aXe.forEach(t),ZGe=i(f),ko=n(f,"DIV",{class:!0});var Ks=s(ko);T(fL.$$.fragment,Ks),f6o=i(Ks),Oi=n(Ks,"P",{});var Toe=s(Oi);m6o=r(Toe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),JD=n(Toe,"A",{href:!0});var _ht=s(JD);g6o=r(_ht,"from_pretrained()"),_ht.forEach(t),h6o=r(Toe," class method or the "),YD=n(Toe,"A",{href:!0});var uht=s(YD);p6o=r(uht,"from_config()"),uht.forEach(t),_6o=r(Toe,` class
method.`),Toe.forEach(t),u6o=i(Ks),mL=n(Ks,"P",{});var nXe=s(mL);b6o=r(nXe,"This class cannot be instantiated directly using "),Vfe=n(nXe,"CODE",{});var bht=s(Vfe);v6o=r(bht,"__init__()"),bht.forEach(t),F6o=r(nXe," (throws an error)."),nXe.forEach(t),T6o=i(Ks),lt=n(Ks,"DIV",{class:!0});var Pw=s(lt);T(gL.$$.fragment,Pw),M6o=i(Pw),Xfe=n(Pw,"P",{});var vht=s(Xfe);E6o=r(vht,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),vht.forEach(t),C6o=i(Pw),Vi=n(Pw,"P",{});var Moe=s(Vi);w6o=r(Moe,`Note:
Loading a model from its configuration file does `),zfe=n(Moe,"STRONG",{});var Fht=s(zfe);A6o=r(Fht,"not"),Fht.forEach(t),L6o=r(Moe,` load the model weights. It only affects the
model\u2019s configuration. Use `),KD=n(Moe,"A",{href:!0});var Tht=s(KD);y6o=r(Tht,"from_pretrained()"),Tht.forEach(t),x6o=r(Moe," to load the model weights."),Moe.forEach(t),$6o=i(Pw),T(w7.$$.fragment,Pw),Pw.forEach(t),k6o=i(Ks),Ke=n(Ks,"DIV",{class:!0});var sa=s(Ke);T(hL.$$.fragment,sa),S6o=i(sa),Qfe=n(sa,"P",{});var Mht=s(Qfe);R6o=r(Mht,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Mht.forEach(t),P6o=i(sa),Pa=n(sa,"P",{});var Bw=s(Pa);B6o=r(Bw,"The model class to instantiate is selected based on the "),Wfe=n(Bw,"CODE",{});var Eht=s(Wfe);I6o=r(Eht,"model_type"),Eht.forEach(t),N6o=r(Bw,` property of the config object (either
passed as an argument or loaded from `),Hfe=n(Bw,"CODE",{});var Cht=s(Hfe);q6o=r(Cht,"pretrained_model_name_or_path"),Cht.forEach(t),j6o=r(Bw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ufe=n(Bw,"CODE",{});var wht=s(Ufe);D6o=r(wht,"pretrained_model_name_or_path"),wht.forEach(t),G6o=r(Bw,":"),Bw.forEach(t),O6o=i(sa),z=n(sa,"UL",{});var Q=s(z);A7=n(Q,"LI",{});var Nxe=s(A7);Jfe=n(Nxe,"STRONG",{});var Aht=s(Jfe);V6o=r(Aht,"bart"),Aht.forEach(t),X6o=r(Nxe," \u2014 "),ZD=n(Nxe,"A",{href:!0});var Lht=s(ZD);z6o=r(Lht,"BartForCausalLM"),Lht.forEach(t),Q6o=r(Nxe," (BART model)"),Nxe.forEach(t),W6o=i(Q),L7=n(Q,"LI",{});var qxe=s(L7);Yfe=n(qxe,"STRONG",{});var yht=s(Yfe);H6o=r(yht,"bert"),yht.forEach(t),U6o=r(qxe," \u2014 "),eG=n(qxe,"A",{href:!0});var xht=s(eG);J6o=r(xht,"BertLMHeadModel"),xht.forEach(t),Y6o=r(qxe," (BERT model)"),qxe.forEach(t),K6o=i(Q),y7=n(Q,"LI",{});var jxe=s(y7);Kfe=n(jxe,"STRONG",{});var $ht=s(Kfe);Z6o=r($ht,"bert-generation"),$ht.forEach(t),eLo=r(jxe," \u2014 "),oG=n(jxe,"A",{href:!0});var kht=s(oG);oLo=r(kht,"BertGenerationDecoder"),kht.forEach(t),rLo=r(jxe," (Bert Generation model)"),jxe.forEach(t),tLo=i(Q),x7=n(Q,"LI",{});var Dxe=s(x7);Zfe=n(Dxe,"STRONG",{});var Sht=s(Zfe);aLo=r(Sht,"big_bird"),Sht.forEach(t),nLo=r(Dxe," \u2014 "),rG=n(Dxe,"A",{href:!0});var Rht=s(rG);sLo=r(Rht,"BigBirdForCausalLM"),Rht.forEach(t),lLo=r(Dxe," (BigBird model)"),Dxe.forEach(t),iLo=i(Q),$7=n(Q,"LI",{});var Gxe=s($7);eme=n(Gxe,"STRONG",{});var Pht=s(eme);dLo=r(Pht,"bigbird_pegasus"),Pht.forEach(t),cLo=r(Gxe," \u2014 "),tG=n(Gxe,"A",{href:!0});var Bht=s(tG);fLo=r(Bht,"BigBirdPegasusForCausalLM"),Bht.forEach(t),mLo=r(Gxe," (BigBird-Pegasus model)"),Gxe.forEach(t),gLo=i(Q),k7=n(Q,"LI",{});var Oxe=s(k7);ome=n(Oxe,"STRONG",{});var Iht=s(ome);hLo=r(Iht,"blenderbot"),Iht.forEach(t),pLo=r(Oxe," \u2014 "),aG=n(Oxe,"A",{href:!0});var Nht=s(aG);_Lo=r(Nht,"BlenderbotForCausalLM"),Nht.forEach(t),uLo=r(Oxe," (Blenderbot model)"),Oxe.forEach(t),bLo=i(Q),S7=n(Q,"LI",{});var Vxe=s(S7);rme=n(Vxe,"STRONG",{});var qht=s(rme);vLo=r(qht,"blenderbot-small"),qht.forEach(t),FLo=r(Vxe," \u2014 "),nG=n(Vxe,"A",{href:!0});var jht=s(nG);TLo=r(jht,"BlenderbotSmallForCausalLM"),jht.forEach(t),MLo=r(Vxe," (BlenderbotSmall model)"),Vxe.forEach(t),ELo=i(Q),R7=n(Q,"LI",{});var Xxe=s(R7);tme=n(Xxe,"STRONG",{});var Dht=s(tme);CLo=r(Dht,"bloom"),Dht.forEach(t),wLo=r(Xxe," \u2014 "),sG=n(Xxe,"A",{href:!0});var Ght=s(sG);ALo=r(Ght,"BloomForCausalLM"),Ght.forEach(t),LLo=r(Xxe," (BLOOM model)"),Xxe.forEach(t),yLo=i(Q),P7=n(Q,"LI",{});var zxe=s(P7);ame=n(zxe,"STRONG",{});var Oht=s(ame);xLo=r(Oht,"camembert"),Oht.forEach(t),$Lo=r(zxe," \u2014 "),lG=n(zxe,"A",{href:!0});var Vht=s(lG);kLo=r(Vht,"CamembertForCausalLM"),Vht.forEach(t),SLo=r(zxe," (CamemBERT model)"),zxe.forEach(t),RLo=i(Q),B7=n(Q,"LI",{});var Qxe=s(B7);nme=n(Qxe,"STRONG",{});var Xht=s(nme);PLo=r(Xht,"ctrl"),Xht.forEach(t),BLo=r(Qxe," \u2014 "),iG=n(Qxe,"A",{href:!0});var zht=s(iG);ILo=r(zht,"CTRLLMHeadModel"),zht.forEach(t),NLo=r(Qxe," (CTRL model)"),Qxe.forEach(t),qLo=i(Q),I7=n(Q,"LI",{});var Wxe=s(I7);sme=n(Wxe,"STRONG",{});var Qht=s(sme);jLo=r(Qht,"data2vec-text"),Qht.forEach(t),DLo=r(Wxe," \u2014 "),dG=n(Wxe,"A",{href:!0});var Wht=s(dG);GLo=r(Wht,"Data2VecTextForCausalLM"),Wht.forEach(t),OLo=r(Wxe," (Data2VecText model)"),Wxe.forEach(t),VLo=i(Q),N7=n(Q,"LI",{});var Hxe=s(N7);lme=n(Hxe,"STRONG",{});var Hht=s(lme);XLo=r(Hht,"electra"),Hht.forEach(t),zLo=r(Hxe," \u2014 "),cG=n(Hxe,"A",{href:!0});var Uht=s(cG);QLo=r(Uht,"ElectraForCausalLM"),Uht.forEach(t),WLo=r(Hxe," (ELECTRA model)"),Hxe.forEach(t),HLo=i(Q),q7=n(Q,"LI",{});var Uxe=s(q7);ime=n(Uxe,"STRONG",{});var Jht=s(ime);ULo=r(Jht,"gpt2"),Jht.forEach(t),JLo=r(Uxe," \u2014 "),fG=n(Uxe,"A",{href:!0});var Yht=s(fG);YLo=r(Yht,"GPT2LMHeadModel"),Yht.forEach(t),KLo=r(Uxe," (OpenAI GPT-2 model)"),Uxe.forEach(t),ZLo=i(Q),j7=n(Q,"LI",{});var Jxe=s(j7);dme=n(Jxe,"STRONG",{});var Kht=s(dme);eyo=r(Kht,"gpt_neo"),Kht.forEach(t),oyo=r(Jxe," \u2014 "),mG=n(Jxe,"A",{href:!0});var Zht=s(mG);ryo=r(Zht,"GPTNeoForCausalLM"),Zht.forEach(t),tyo=r(Jxe," (GPT Neo model)"),Jxe.forEach(t),ayo=i(Q),D7=n(Q,"LI",{});var Yxe=s(D7);cme=n(Yxe,"STRONG",{});var ept=s(cme);nyo=r(ept,"gpt_neox"),ept.forEach(t),syo=r(Yxe," \u2014 "),gG=n(Yxe,"A",{href:!0});var opt=s(gG);lyo=r(opt,"GPTNeoXForCausalLM"),opt.forEach(t),iyo=r(Yxe," (GPT NeoX model)"),Yxe.forEach(t),dyo=i(Q),G7=n(Q,"LI",{});var Kxe=s(G7);fme=n(Kxe,"STRONG",{});var rpt=s(fme);cyo=r(rpt,"gptj"),rpt.forEach(t),fyo=r(Kxe," \u2014 "),hG=n(Kxe,"A",{href:!0});var tpt=s(hG);myo=r(tpt,"GPTJForCausalLM"),tpt.forEach(t),gyo=r(Kxe," (GPT-J model)"),Kxe.forEach(t),hyo=i(Q),O7=n(Q,"LI",{});var Zxe=s(O7);mme=n(Zxe,"STRONG",{});var apt=s(mme);pyo=r(apt,"marian"),apt.forEach(t),_yo=r(Zxe," \u2014 "),pG=n(Zxe,"A",{href:!0});var npt=s(pG);uyo=r(npt,"MarianForCausalLM"),npt.forEach(t),byo=r(Zxe," (Marian model)"),Zxe.forEach(t),vyo=i(Q),V7=n(Q,"LI",{});var e$e=s(V7);gme=n(e$e,"STRONG",{});var spt=s(gme);Fyo=r(spt,"mbart"),spt.forEach(t),Tyo=r(e$e," \u2014 "),_G=n(e$e,"A",{href:!0});var lpt=s(_G);Myo=r(lpt,"MBartForCausalLM"),lpt.forEach(t),Eyo=r(e$e," (mBART model)"),e$e.forEach(t),Cyo=i(Q),X7=n(Q,"LI",{});var o$e=s(X7);hme=n(o$e,"STRONG",{});var ipt=s(hme);wyo=r(ipt,"megatron-bert"),ipt.forEach(t),Ayo=r(o$e," \u2014 "),uG=n(o$e,"A",{href:!0});var dpt=s(uG);Lyo=r(dpt,"MegatronBertForCausalLM"),dpt.forEach(t),yyo=r(o$e," (Megatron-BERT model)"),o$e.forEach(t),xyo=i(Q),z7=n(Q,"LI",{});var r$e=s(z7);pme=n(r$e,"STRONG",{});var cpt=s(pme);$yo=r(cpt,"mvp"),cpt.forEach(t),kyo=r(r$e," \u2014 "),bG=n(r$e,"A",{href:!0});var fpt=s(bG);Syo=r(fpt,"MvpForCausalLM"),fpt.forEach(t),Ryo=r(r$e," (MVP model)"),r$e.forEach(t),Pyo=i(Q),Q7=n(Q,"LI",{});var t$e=s(Q7);_me=n(t$e,"STRONG",{});var mpt=s(_me);Byo=r(mpt,"openai-gpt"),mpt.forEach(t),Iyo=r(t$e," \u2014 "),vG=n(t$e,"A",{href:!0});var gpt=s(vG);Nyo=r(gpt,"OpenAIGPTLMHeadModel"),gpt.forEach(t),qyo=r(t$e," (OpenAI GPT model)"),t$e.forEach(t),jyo=i(Q),W7=n(Q,"LI",{});var a$e=s(W7);ume=n(a$e,"STRONG",{});var hpt=s(ume);Dyo=r(hpt,"opt"),hpt.forEach(t),Gyo=r(a$e," \u2014 "),FG=n(a$e,"A",{href:!0});var ppt=s(FG);Oyo=r(ppt,"OPTForCausalLM"),ppt.forEach(t),Vyo=r(a$e," (OPT model)"),a$e.forEach(t),Xyo=i(Q),H7=n(Q,"LI",{});var n$e=s(H7);bme=n(n$e,"STRONG",{});var _pt=s(bme);zyo=r(_pt,"pegasus"),_pt.forEach(t),Qyo=r(n$e," \u2014 "),TG=n(n$e,"A",{href:!0});var upt=s(TG);Wyo=r(upt,"PegasusForCausalLM"),upt.forEach(t),Hyo=r(n$e," (Pegasus model)"),n$e.forEach(t),Uyo=i(Q),U7=n(Q,"LI",{});var s$e=s(U7);vme=n(s$e,"STRONG",{});var bpt=s(vme);Jyo=r(bpt,"plbart"),bpt.forEach(t),Yyo=r(s$e," \u2014 "),MG=n(s$e,"A",{href:!0});var vpt=s(MG);Kyo=r(vpt,"PLBartForCausalLM"),vpt.forEach(t),Zyo=r(s$e," (PLBart model)"),s$e.forEach(t),e9o=i(Q),J7=n(Q,"LI",{});var l$e=s(J7);Fme=n(l$e,"STRONG",{});var Fpt=s(Fme);o9o=r(Fpt,"prophetnet"),Fpt.forEach(t),r9o=r(l$e," \u2014 "),EG=n(l$e,"A",{href:!0});var Tpt=s(EG);t9o=r(Tpt,"ProphetNetForCausalLM"),Tpt.forEach(t),a9o=r(l$e," (ProphetNet model)"),l$e.forEach(t),n9o=i(Q),Y7=n(Q,"LI",{});var i$e=s(Y7);Tme=n(i$e,"STRONG",{});var Mpt=s(Tme);s9o=r(Mpt,"qdqbert"),Mpt.forEach(t),l9o=r(i$e," \u2014 "),CG=n(i$e,"A",{href:!0});var Ept=s(CG);i9o=r(Ept,"QDQBertLMHeadModel"),Ept.forEach(t),d9o=r(i$e," (QDQBert model)"),i$e.forEach(t),c9o=i(Q),K7=n(Q,"LI",{});var d$e=s(K7);Mme=n(d$e,"STRONG",{});var Cpt=s(Mme);f9o=r(Cpt,"reformer"),Cpt.forEach(t),m9o=r(d$e," \u2014 "),wG=n(d$e,"A",{href:!0});var wpt=s(wG);g9o=r(wpt,"ReformerModelWithLMHead"),wpt.forEach(t),h9o=r(d$e," (Reformer model)"),d$e.forEach(t),p9o=i(Q),Z7=n(Q,"LI",{});var c$e=s(Z7);Eme=n(c$e,"STRONG",{});var Apt=s(Eme);_9o=r(Apt,"rembert"),Apt.forEach(t),u9o=r(c$e," \u2014 "),AG=n(c$e,"A",{href:!0});var Lpt=s(AG);b9o=r(Lpt,"RemBertForCausalLM"),Lpt.forEach(t),v9o=r(c$e," (RemBERT model)"),c$e.forEach(t),F9o=i(Q),e1=n(Q,"LI",{});var f$e=s(e1);Cme=n(f$e,"STRONG",{});var ypt=s(Cme);T9o=r(ypt,"roberta"),ypt.forEach(t),M9o=r(f$e," \u2014 "),LG=n(f$e,"A",{href:!0});var xpt=s(LG);E9o=r(xpt,"RobertaForCausalLM"),xpt.forEach(t),C9o=r(f$e," (RoBERTa model)"),f$e.forEach(t),w9o=i(Q),o1=n(Q,"LI",{});var m$e=s(o1);wme=n(m$e,"STRONG",{});var $pt=s(wme);A9o=r($pt,"roformer"),$pt.forEach(t),L9o=r(m$e," \u2014 "),yG=n(m$e,"A",{href:!0});var kpt=s(yG);y9o=r(kpt,"RoFormerForCausalLM"),kpt.forEach(t),x9o=r(m$e," (RoFormer model)"),m$e.forEach(t),$9o=i(Q),r1=n(Q,"LI",{});var g$e=s(r1);Ame=n(g$e,"STRONG",{});var Spt=s(Ame);k9o=r(Spt,"speech_to_text_2"),Spt.forEach(t),S9o=r(g$e," \u2014 "),xG=n(g$e,"A",{href:!0});var Rpt=s(xG);R9o=r(Rpt,"Speech2Text2ForCausalLM"),Rpt.forEach(t),P9o=r(g$e," (Speech2Text2 model)"),g$e.forEach(t),B9o=i(Q),t1=n(Q,"LI",{});var h$e=s(t1);Lme=n(h$e,"STRONG",{});var Ppt=s(Lme);I9o=r(Ppt,"transfo-xl"),Ppt.forEach(t),N9o=r(h$e," \u2014 "),$G=n(h$e,"A",{href:!0});var Bpt=s($G);q9o=r(Bpt,"TransfoXLLMHeadModel"),Bpt.forEach(t),j9o=r(h$e," (Transformer-XL model)"),h$e.forEach(t),D9o=i(Q),a1=n(Q,"LI",{});var p$e=s(a1);yme=n(p$e,"STRONG",{});var Ipt=s(yme);G9o=r(Ipt,"trocr"),Ipt.forEach(t),O9o=r(p$e," \u2014 "),kG=n(p$e,"A",{href:!0});var Npt=s(kG);V9o=r(Npt,"TrOCRForCausalLM"),Npt.forEach(t),X9o=r(p$e," (TrOCR model)"),p$e.forEach(t),z9o=i(Q),n1=n(Q,"LI",{});var _$e=s(n1);xme=n(_$e,"STRONG",{});var qpt=s(xme);Q9o=r(qpt,"xglm"),qpt.forEach(t),W9o=r(_$e," \u2014 "),SG=n(_$e,"A",{href:!0});var jpt=s(SG);H9o=r(jpt,"XGLMForCausalLM"),jpt.forEach(t),U9o=r(_$e," (XGLM model)"),_$e.forEach(t),J9o=i(Q),s1=n(Q,"LI",{});var u$e=s(s1);$me=n(u$e,"STRONG",{});var Dpt=s($me);Y9o=r(Dpt,"xlm"),Dpt.forEach(t),K9o=r(u$e," \u2014 "),RG=n(u$e,"A",{href:!0});var Gpt=s(RG);Z9o=r(Gpt,"XLMWithLMHeadModel"),Gpt.forEach(t),exo=r(u$e," (XLM model)"),u$e.forEach(t),oxo=i(Q),l1=n(Q,"LI",{});var b$e=s(l1);kme=n(b$e,"STRONG",{});var Opt=s(kme);rxo=r(Opt,"xlm-prophetnet"),Opt.forEach(t),txo=r(b$e," \u2014 "),PG=n(b$e,"A",{href:!0});var Vpt=s(PG);axo=r(Vpt,"XLMProphetNetForCausalLM"),Vpt.forEach(t),nxo=r(b$e," (XLM-ProphetNet model)"),b$e.forEach(t),sxo=i(Q),i1=n(Q,"LI",{});var v$e=s(i1);Sme=n(v$e,"STRONG",{});var Xpt=s(Sme);lxo=r(Xpt,"xlm-roberta"),Xpt.forEach(t),ixo=r(v$e," \u2014 "),BG=n(v$e,"A",{href:!0});var zpt=s(BG);dxo=r(zpt,"XLMRobertaForCausalLM"),zpt.forEach(t),cxo=r(v$e," (XLM-RoBERTa model)"),v$e.forEach(t),fxo=i(Q),d1=n(Q,"LI",{});var F$e=s(d1);Rme=n(F$e,"STRONG",{});var Qpt=s(Rme);mxo=r(Qpt,"xlm-roberta-xl"),Qpt.forEach(t),gxo=r(F$e," \u2014 "),IG=n(F$e,"A",{href:!0});var Wpt=s(IG);hxo=r(Wpt,"XLMRobertaXLForCausalLM"),Wpt.forEach(t),pxo=r(F$e," (XLM-RoBERTa-XL model)"),F$e.forEach(t),_xo=i(Q),c1=n(Q,"LI",{});var T$e=s(c1);Pme=n(T$e,"STRONG",{});var Hpt=s(Pme);uxo=r(Hpt,"xlnet"),Hpt.forEach(t),bxo=r(T$e," \u2014 "),NG=n(T$e,"A",{href:!0});var Upt=s(NG);vxo=r(Upt,"XLNetLMHeadModel"),Upt.forEach(t),Fxo=r(T$e," (XLNet model)"),T$e.forEach(t),Q.forEach(t),Txo=i(sa),f1=n(sa,"P",{});var M$e=s(f1);Mxo=r(M$e,"The model is set in evaluation mode by default using "),Bme=n(M$e,"CODE",{});var Jpt=s(Bme);Exo=r(Jpt,"model.eval()"),Jpt.forEach(t),Cxo=r(M$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ime=n(M$e,"CODE",{});var Ypt=s(Ime);wxo=r(Ypt,"model.train()"),Ypt.forEach(t),M$e.forEach(t),Axo=i(sa),T(m1.$$.fragment,sa),sa.forEach(t),Ks.forEach(t),eOe=i(f),Xi=n(f,"H2",{class:!0});var sXe=s(Xi);g1=n(sXe,"A",{id:!0,class:!0,href:!0});var Kpt=s(g1);Nme=n(Kpt,"SPAN",{});var Zpt=s(Nme);T(pL.$$.fragment,Zpt),Zpt.forEach(t),Kpt.forEach(t),Lxo=i(sXe),qme=n(sXe,"SPAN",{});var e_t=s(qme);yxo=r(e_t,"AutoModelForMaskedLM"),e_t.forEach(t),sXe.forEach(t),oOe=i(f),So=n(f,"DIV",{class:!0});var Zs=s(So);T(_L.$$.fragment,Zs),xxo=i(Zs),zi=n(Zs,"P",{});var Eoe=s(zi);$xo=r(Eoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),qG=n(Eoe,"A",{href:!0});var o_t=s(qG);kxo=r(o_t,"from_pretrained()"),o_t.forEach(t),Sxo=r(Eoe," class method or the "),jG=n(Eoe,"A",{href:!0});var r_t=s(jG);Rxo=r(r_t,"from_config()"),r_t.forEach(t),Pxo=r(Eoe,` class
method.`),Eoe.forEach(t),Bxo=i(Zs),uL=n(Zs,"P",{});var lXe=s(uL);Ixo=r(lXe,"This class cannot be instantiated directly using "),jme=n(lXe,"CODE",{});var t_t=s(jme);Nxo=r(t_t,"__init__()"),t_t.forEach(t),qxo=r(lXe," (throws an error)."),lXe.forEach(t),jxo=i(Zs),it=n(Zs,"DIV",{class:!0});var Iw=s(it);T(bL.$$.fragment,Iw),Dxo=i(Iw),Dme=n(Iw,"P",{});var a_t=s(Dme);Gxo=r(a_t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),a_t.forEach(t),Oxo=i(Iw),Qi=n(Iw,"P",{});var Coe=s(Qi);Vxo=r(Coe,`Note:
Loading a model from its configuration file does `),Gme=n(Coe,"STRONG",{});var n_t=s(Gme);Xxo=r(n_t,"not"),n_t.forEach(t),zxo=r(Coe,` load the model weights. It only affects the
model\u2019s configuration. Use `),DG=n(Coe,"A",{href:!0});var s_t=s(DG);Qxo=r(s_t,"from_pretrained()"),s_t.forEach(t),Wxo=r(Coe," to load the model weights."),Coe.forEach(t),Hxo=i(Iw),T(h1.$$.fragment,Iw),Iw.forEach(t),Uxo=i(Zs),Ze=n(Zs,"DIV",{class:!0});var la=s(Ze);T(vL.$$.fragment,la),Jxo=i(la),Ome=n(la,"P",{});var l_t=s(Ome);Yxo=r(l_t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),l_t.forEach(t),Kxo=i(la),Ba=n(la,"P",{});var Nw=s(Ba);Zxo=r(Nw,"The model class to instantiate is selected based on the "),Vme=n(Nw,"CODE",{});var i_t=s(Vme);e$o=r(i_t,"model_type"),i_t.forEach(t),o$o=r(Nw,` property of the config object (either
passed as an argument or loaded from `),Xme=n(Nw,"CODE",{});var d_t=s(Xme);r$o=r(d_t,"pretrained_model_name_or_path"),d_t.forEach(t),t$o=r(Nw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zme=n(Nw,"CODE",{});var c_t=s(zme);a$o=r(c_t,"pretrained_model_name_or_path"),c_t.forEach(t),n$o=r(Nw,":"),Nw.forEach(t),s$o=i(la),W=n(la,"UL",{});var H=s(W);p1=n(H,"LI",{});var E$e=s(p1);Qme=n(E$e,"STRONG",{});var f_t=s(Qme);l$o=r(f_t,"albert"),f_t.forEach(t),i$o=r(E$e," \u2014 "),GG=n(E$e,"A",{href:!0});var m_t=s(GG);d$o=r(m_t,"AlbertForMaskedLM"),m_t.forEach(t),c$o=r(E$e," (ALBERT model)"),E$e.forEach(t),f$o=i(H),_1=n(H,"LI",{});var C$e=s(_1);Wme=n(C$e,"STRONG",{});var g_t=s(Wme);m$o=r(g_t,"bart"),g_t.forEach(t),g$o=r(C$e," \u2014 "),OG=n(C$e,"A",{href:!0});var h_t=s(OG);h$o=r(h_t,"BartForConditionalGeneration"),h_t.forEach(t),p$o=r(C$e," (BART model)"),C$e.forEach(t),_$o=i(H),u1=n(H,"LI",{});var w$e=s(u1);Hme=n(w$e,"STRONG",{});var p_t=s(Hme);u$o=r(p_t,"bert"),p_t.forEach(t),b$o=r(w$e," \u2014 "),VG=n(w$e,"A",{href:!0});var __t=s(VG);v$o=r(__t,"BertForMaskedLM"),__t.forEach(t),F$o=r(w$e," (BERT model)"),w$e.forEach(t),T$o=i(H),b1=n(H,"LI",{});var A$e=s(b1);Ume=n(A$e,"STRONG",{});var u_t=s(Ume);M$o=r(u_t,"big_bird"),u_t.forEach(t),E$o=r(A$e," \u2014 "),XG=n(A$e,"A",{href:!0});var b_t=s(XG);C$o=r(b_t,"BigBirdForMaskedLM"),b_t.forEach(t),w$o=r(A$e," (BigBird model)"),A$e.forEach(t),A$o=i(H),v1=n(H,"LI",{});var L$e=s(v1);Jme=n(L$e,"STRONG",{});var v_t=s(Jme);L$o=r(v_t,"camembert"),v_t.forEach(t),y$o=r(L$e," \u2014 "),zG=n(L$e,"A",{href:!0});var F_t=s(zG);x$o=r(F_t,"CamembertForMaskedLM"),F_t.forEach(t),$$o=r(L$e," (CamemBERT model)"),L$e.forEach(t),k$o=i(H),F1=n(H,"LI",{});var y$e=s(F1);Yme=n(y$e,"STRONG",{});var T_t=s(Yme);S$o=r(T_t,"convbert"),T_t.forEach(t),R$o=r(y$e," \u2014 "),QG=n(y$e,"A",{href:!0});var M_t=s(QG);P$o=r(M_t,"ConvBertForMaskedLM"),M_t.forEach(t),B$o=r(y$e," (ConvBERT model)"),y$e.forEach(t),I$o=i(H),T1=n(H,"LI",{});var x$e=s(T1);Kme=n(x$e,"STRONG",{});var E_t=s(Kme);N$o=r(E_t,"data2vec-text"),E_t.forEach(t),q$o=r(x$e," \u2014 "),WG=n(x$e,"A",{href:!0});var C_t=s(WG);j$o=r(C_t,"Data2VecTextForMaskedLM"),C_t.forEach(t),D$o=r(x$e," (Data2VecText model)"),x$e.forEach(t),G$o=i(H),M1=n(H,"LI",{});var $$e=s(M1);Zme=n($$e,"STRONG",{});var w_t=s(Zme);O$o=r(w_t,"deberta"),w_t.forEach(t),V$o=r($$e," \u2014 "),HG=n($$e,"A",{href:!0});var A_t=s(HG);X$o=r(A_t,"DebertaForMaskedLM"),A_t.forEach(t),z$o=r($$e," (DeBERTa model)"),$$e.forEach(t),Q$o=i(H),E1=n(H,"LI",{});var k$e=s(E1);ege=n(k$e,"STRONG",{});var L_t=s(ege);W$o=r(L_t,"deberta-v2"),L_t.forEach(t),H$o=r(k$e," \u2014 "),UG=n(k$e,"A",{href:!0});var y_t=s(UG);U$o=r(y_t,"DebertaV2ForMaskedLM"),y_t.forEach(t),J$o=r(k$e," (DeBERTa-v2 model)"),k$e.forEach(t),Y$o=i(H),C1=n(H,"LI",{});var S$e=s(C1);oge=n(S$e,"STRONG",{});var x_t=s(oge);K$o=r(x_t,"distilbert"),x_t.forEach(t),Z$o=r(S$e," \u2014 "),JG=n(S$e,"A",{href:!0});var $_t=s(JG);eko=r($_t,"DistilBertForMaskedLM"),$_t.forEach(t),oko=r(S$e," (DistilBERT model)"),S$e.forEach(t),rko=i(H),w1=n(H,"LI",{});var R$e=s(w1);rge=n(R$e,"STRONG",{});var k_t=s(rge);tko=r(k_t,"electra"),k_t.forEach(t),ako=r(R$e," \u2014 "),YG=n(R$e,"A",{href:!0});var S_t=s(YG);nko=r(S_t,"ElectraForMaskedLM"),S_t.forEach(t),sko=r(R$e," (ELECTRA model)"),R$e.forEach(t),lko=i(H),A1=n(H,"LI",{});var P$e=s(A1);tge=n(P$e,"STRONG",{});var R_t=s(tge);iko=r(R_t,"flaubert"),R_t.forEach(t),dko=r(P$e," \u2014 "),KG=n(P$e,"A",{href:!0});var P_t=s(KG);cko=r(P_t,"FlaubertWithLMHeadModel"),P_t.forEach(t),fko=r(P$e," (FlauBERT model)"),P$e.forEach(t),mko=i(H),L1=n(H,"LI",{});var B$e=s(L1);age=n(B$e,"STRONG",{});var B_t=s(age);gko=r(B_t,"fnet"),B_t.forEach(t),hko=r(B$e," \u2014 "),ZG=n(B$e,"A",{href:!0});var I_t=s(ZG);pko=r(I_t,"FNetForMaskedLM"),I_t.forEach(t),_ko=r(B$e," (FNet model)"),B$e.forEach(t),uko=i(H),y1=n(H,"LI",{});var I$e=s(y1);nge=n(I$e,"STRONG",{});var N_t=s(nge);bko=r(N_t,"funnel"),N_t.forEach(t),vko=r(I$e," \u2014 "),eO=n(I$e,"A",{href:!0});var q_t=s(eO);Fko=r(q_t,"FunnelForMaskedLM"),q_t.forEach(t),Tko=r(I$e," (Funnel Transformer model)"),I$e.forEach(t),Mko=i(H),x1=n(H,"LI",{});var N$e=s(x1);sge=n(N$e,"STRONG",{});var j_t=s(sge);Eko=r(j_t,"ibert"),j_t.forEach(t),Cko=r(N$e," \u2014 "),oO=n(N$e,"A",{href:!0});var D_t=s(oO);wko=r(D_t,"IBertForMaskedLM"),D_t.forEach(t),Ako=r(N$e," (I-BERT model)"),N$e.forEach(t),Lko=i(H),$1=n(H,"LI",{});var q$e=s($1);lge=n(q$e,"STRONG",{});var G_t=s(lge);yko=r(G_t,"layoutlm"),G_t.forEach(t),xko=r(q$e," \u2014 "),rO=n(q$e,"A",{href:!0});var O_t=s(rO);$ko=r(O_t,"LayoutLMForMaskedLM"),O_t.forEach(t),kko=r(q$e," (LayoutLM model)"),q$e.forEach(t),Sko=i(H),k1=n(H,"LI",{});var j$e=s(k1);ige=n(j$e,"STRONG",{});var V_t=s(ige);Rko=r(V_t,"longformer"),V_t.forEach(t),Pko=r(j$e," \u2014 "),tO=n(j$e,"A",{href:!0});var X_t=s(tO);Bko=r(X_t,"LongformerForMaskedLM"),X_t.forEach(t),Iko=r(j$e," (Longformer model)"),j$e.forEach(t),Nko=i(H),S1=n(H,"LI",{});var D$e=s(S1);dge=n(D$e,"STRONG",{});var z_t=s(dge);qko=r(z_t,"luke"),z_t.forEach(t),jko=r(D$e," \u2014 "),aO=n(D$e,"A",{href:!0});var Q_t=s(aO);Dko=r(Q_t,"LukeForMaskedLM"),Q_t.forEach(t),Gko=r(D$e," (LUKE model)"),D$e.forEach(t),Oko=i(H),R1=n(H,"LI",{});var G$e=s(R1);cge=n(G$e,"STRONG",{});var W_t=s(cge);Vko=r(W_t,"mbart"),W_t.forEach(t),Xko=r(G$e," \u2014 "),nO=n(G$e,"A",{href:!0});var H_t=s(nO);zko=r(H_t,"MBartForConditionalGeneration"),H_t.forEach(t),Qko=r(G$e," (mBART model)"),G$e.forEach(t),Wko=i(H),P1=n(H,"LI",{});var O$e=s(P1);fge=n(O$e,"STRONG",{});var U_t=s(fge);Hko=r(U_t,"megatron-bert"),U_t.forEach(t),Uko=r(O$e," \u2014 "),sO=n(O$e,"A",{href:!0});var J_t=s(sO);Jko=r(J_t,"MegatronBertForMaskedLM"),J_t.forEach(t),Yko=r(O$e," (Megatron-BERT model)"),O$e.forEach(t),Kko=i(H),B1=n(H,"LI",{});var V$e=s(B1);mge=n(V$e,"STRONG",{});var Y_t=s(mge);Zko=r(Y_t,"mobilebert"),Y_t.forEach(t),eSo=r(V$e," \u2014 "),lO=n(V$e,"A",{href:!0});var K_t=s(lO);oSo=r(K_t,"MobileBertForMaskedLM"),K_t.forEach(t),rSo=r(V$e," (MobileBERT model)"),V$e.forEach(t),tSo=i(H),I1=n(H,"LI",{});var X$e=s(I1);gge=n(X$e,"STRONG",{});var Z_t=s(gge);aSo=r(Z_t,"mpnet"),Z_t.forEach(t),nSo=r(X$e," \u2014 "),iO=n(X$e,"A",{href:!0});var eut=s(iO);sSo=r(eut,"MPNetForMaskedLM"),eut.forEach(t),lSo=r(X$e," (MPNet model)"),X$e.forEach(t),iSo=i(H),N1=n(H,"LI",{});var z$e=s(N1);hge=n(z$e,"STRONG",{});var out=s(hge);dSo=r(out,"mvp"),out.forEach(t),cSo=r(z$e," \u2014 "),dO=n(z$e,"A",{href:!0});var rut=s(dO);fSo=r(rut,"MvpForConditionalGeneration"),rut.forEach(t),mSo=r(z$e," (MVP model)"),z$e.forEach(t),gSo=i(H),q1=n(H,"LI",{});var Q$e=s(q1);pge=n(Q$e,"STRONG",{});var tut=s(pge);hSo=r(tut,"nystromformer"),tut.forEach(t),pSo=r(Q$e," \u2014 "),cO=n(Q$e,"A",{href:!0});var aut=s(cO);_So=r(aut,"NystromformerForMaskedLM"),aut.forEach(t),uSo=r(Q$e," (Nystr\xF6mformer model)"),Q$e.forEach(t),bSo=i(H),j1=n(H,"LI",{});var W$e=s(j1);_ge=n(W$e,"STRONG",{});var nut=s(_ge);vSo=r(nut,"perceiver"),nut.forEach(t),FSo=r(W$e," \u2014 "),fO=n(W$e,"A",{href:!0});var sut=s(fO);TSo=r(sut,"PerceiverForMaskedLM"),sut.forEach(t),MSo=r(W$e," (Perceiver model)"),W$e.forEach(t),ESo=i(H),D1=n(H,"LI",{});var H$e=s(D1);uge=n(H$e,"STRONG",{});var lut=s(uge);CSo=r(lut,"qdqbert"),lut.forEach(t),wSo=r(H$e," \u2014 "),mO=n(H$e,"A",{href:!0});var iut=s(mO);ASo=r(iut,"QDQBertForMaskedLM"),iut.forEach(t),LSo=r(H$e," (QDQBert model)"),H$e.forEach(t),ySo=i(H),G1=n(H,"LI",{});var U$e=s(G1);bge=n(U$e,"STRONG",{});var dut=s(bge);xSo=r(dut,"reformer"),dut.forEach(t),$So=r(U$e," \u2014 "),gO=n(U$e,"A",{href:!0});var cut=s(gO);kSo=r(cut,"ReformerForMaskedLM"),cut.forEach(t),SSo=r(U$e," (Reformer model)"),U$e.forEach(t),RSo=i(H),O1=n(H,"LI",{});var J$e=s(O1);vge=n(J$e,"STRONG",{});var fut=s(vge);PSo=r(fut,"rembert"),fut.forEach(t),BSo=r(J$e," \u2014 "),hO=n(J$e,"A",{href:!0});var mut=s(hO);ISo=r(mut,"RemBertForMaskedLM"),mut.forEach(t),NSo=r(J$e," (RemBERT model)"),J$e.forEach(t),qSo=i(H),V1=n(H,"LI",{});var Y$e=s(V1);Fge=n(Y$e,"STRONG",{});var gut=s(Fge);jSo=r(gut,"roberta"),gut.forEach(t),DSo=r(Y$e," \u2014 "),pO=n(Y$e,"A",{href:!0});var hut=s(pO);GSo=r(hut,"RobertaForMaskedLM"),hut.forEach(t),OSo=r(Y$e," (RoBERTa model)"),Y$e.forEach(t),VSo=i(H),X1=n(H,"LI",{});var K$e=s(X1);Tge=n(K$e,"STRONG",{});var put=s(Tge);XSo=r(put,"roformer"),put.forEach(t),zSo=r(K$e," \u2014 "),_O=n(K$e,"A",{href:!0});var _ut=s(_O);QSo=r(_ut,"RoFormerForMaskedLM"),_ut.forEach(t),WSo=r(K$e," (RoFormer model)"),K$e.forEach(t),HSo=i(H),z1=n(H,"LI",{});var Z$e=s(z1);Mge=n(Z$e,"STRONG",{});var uut=s(Mge);USo=r(uut,"squeezebert"),uut.forEach(t),JSo=r(Z$e," \u2014 "),uO=n(Z$e,"A",{href:!0});var but=s(uO);YSo=r(but,"SqueezeBertForMaskedLM"),but.forEach(t),KSo=r(Z$e," (SqueezeBERT model)"),Z$e.forEach(t),ZSo=i(H),Q1=n(H,"LI",{});var eke=s(Q1);Ege=n(eke,"STRONG",{});var vut=s(Ege);eRo=r(vut,"tapas"),vut.forEach(t),oRo=r(eke," \u2014 "),bO=n(eke,"A",{href:!0});var Fut=s(bO);rRo=r(Fut,"TapasForMaskedLM"),Fut.forEach(t),tRo=r(eke," (TAPAS model)"),eke.forEach(t),aRo=i(H),W1=n(H,"LI",{});var oke=s(W1);Cge=n(oke,"STRONG",{});var Tut=s(Cge);nRo=r(Tut,"wav2vec2"),Tut.forEach(t),sRo=r(oke," \u2014 "),wge=n(oke,"CODE",{});var Mut=s(wge);lRo=r(Mut,"Wav2Vec2ForMaskedLM"),Mut.forEach(t),iRo=r(oke," (Wav2Vec2 model)"),oke.forEach(t),dRo=i(H),H1=n(H,"LI",{});var rke=s(H1);Age=n(rke,"STRONG",{});var Eut=s(Age);cRo=r(Eut,"xlm"),Eut.forEach(t),fRo=r(rke," \u2014 "),vO=n(rke,"A",{href:!0});var Cut=s(vO);mRo=r(Cut,"XLMWithLMHeadModel"),Cut.forEach(t),gRo=r(rke," (XLM model)"),rke.forEach(t),hRo=i(H),U1=n(H,"LI",{});var tke=s(U1);Lge=n(tke,"STRONG",{});var wut=s(Lge);pRo=r(wut,"xlm-roberta"),wut.forEach(t),_Ro=r(tke," \u2014 "),FO=n(tke,"A",{href:!0});var Aut=s(FO);uRo=r(Aut,"XLMRobertaForMaskedLM"),Aut.forEach(t),bRo=r(tke," (XLM-RoBERTa model)"),tke.forEach(t),vRo=i(H),J1=n(H,"LI",{});var ake=s(J1);yge=n(ake,"STRONG",{});var Lut=s(yge);FRo=r(Lut,"xlm-roberta-xl"),Lut.forEach(t),TRo=r(ake," \u2014 "),TO=n(ake,"A",{href:!0});var yut=s(TO);MRo=r(yut,"XLMRobertaXLForMaskedLM"),yut.forEach(t),ERo=r(ake," (XLM-RoBERTa-XL model)"),ake.forEach(t),CRo=i(H),Y1=n(H,"LI",{});var nke=s(Y1);xge=n(nke,"STRONG",{});var xut=s(xge);wRo=r(xut,"yoso"),xut.forEach(t),ARo=r(nke," \u2014 "),MO=n(nke,"A",{href:!0});var $ut=s(MO);LRo=r($ut,"YosoForMaskedLM"),$ut.forEach(t),yRo=r(nke," (YOSO model)"),nke.forEach(t),H.forEach(t),xRo=i(la),K1=n(la,"P",{});var ske=s(K1);$Ro=r(ske,"The model is set in evaluation mode by default using "),$ge=n(ske,"CODE",{});var kut=s($ge);kRo=r(kut,"model.eval()"),kut.forEach(t),SRo=r(ske,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kge=n(ske,"CODE",{});var Sut=s(kge);RRo=r(Sut,"model.train()"),Sut.forEach(t),ske.forEach(t),PRo=i(la),T(Z1.$$.fragment,la),la.forEach(t),Zs.forEach(t),rOe=i(f),Wi=n(f,"H2",{class:!0});var iXe=s(Wi);e2=n(iXe,"A",{id:!0,class:!0,href:!0});var Rut=s(e2);Sge=n(Rut,"SPAN",{});var Put=s(Sge);T(FL.$$.fragment,Put),Put.forEach(t),Rut.forEach(t),BRo=i(iXe),Rge=n(iXe,"SPAN",{});var But=s(Rge);IRo=r(But,"AutoModelForSeq2SeqLM"),But.forEach(t),iXe.forEach(t),tOe=i(f),Ro=n(f,"DIV",{class:!0});var el=s(Ro);T(TL.$$.fragment,el),NRo=i(el),Hi=n(el,"P",{});var woe=s(Hi);qRo=r(woe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),EO=n(woe,"A",{href:!0});var Iut=s(EO);jRo=r(Iut,"from_pretrained()"),Iut.forEach(t),DRo=r(woe," class method or the "),CO=n(woe,"A",{href:!0});var Nut=s(CO);GRo=r(Nut,"from_config()"),Nut.forEach(t),ORo=r(woe,` class
method.`),woe.forEach(t),VRo=i(el),ML=n(el,"P",{});var dXe=s(ML);XRo=r(dXe,"This class cannot be instantiated directly using "),Pge=n(dXe,"CODE",{});var qut=s(Pge);zRo=r(qut,"__init__()"),qut.forEach(t),QRo=r(dXe," (throws an error)."),dXe.forEach(t),WRo=i(el),dt=n(el,"DIV",{class:!0});var qw=s(dt);T(EL.$$.fragment,qw),HRo=i(qw),Bge=n(qw,"P",{});var jut=s(Bge);URo=r(jut,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),jut.forEach(t),JRo=i(qw),Ui=n(qw,"P",{});var Aoe=s(Ui);YRo=r(Aoe,`Note:
Loading a model from its configuration file does `),Ige=n(Aoe,"STRONG",{});var Dut=s(Ige);KRo=r(Dut,"not"),Dut.forEach(t),ZRo=r(Aoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),wO=n(Aoe,"A",{href:!0});var Gut=s(wO);ePo=r(Gut,"from_pretrained()"),Gut.forEach(t),oPo=r(Aoe," to load the model weights."),Aoe.forEach(t),rPo=i(qw),T(o2.$$.fragment,qw),qw.forEach(t),tPo=i(el),eo=n(el,"DIV",{class:!0});var ia=s(eo);T(CL.$$.fragment,ia),aPo=i(ia),Nge=n(ia,"P",{});var Out=s(Nge);nPo=r(Out,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Out.forEach(t),sPo=i(ia),Ia=n(ia,"P",{});var jw=s(Ia);lPo=r(jw,"The model class to instantiate is selected based on the "),qge=n(jw,"CODE",{});var Vut=s(qge);iPo=r(Vut,"model_type"),Vut.forEach(t),dPo=r(jw,` property of the config object (either
passed as an argument or loaded from `),jge=n(jw,"CODE",{});var Xut=s(jge);cPo=r(Xut,"pretrained_model_name_or_path"),Xut.forEach(t),fPo=r(jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dge=n(jw,"CODE",{});var zut=s(Dge);mPo=r(zut,"pretrained_model_name_or_path"),zut.forEach(t),gPo=r(jw,":"),jw.forEach(t),hPo=i(ia),he=n(ia,"UL",{});var ue=s(he);r2=n(ue,"LI",{});var lke=s(r2);Gge=n(lke,"STRONG",{});var Qut=s(Gge);pPo=r(Qut,"bart"),Qut.forEach(t),_Po=r(lke," \u2014 "),AO=n(lke,"A",{href:!0});var Wut=s(AO);uPo=r(Wut,"BartForConditionalGeneration"),Wut.forEach(t),bPo=r(lke," (BART model)"),lke.forEach(t),vPo=i(ue),t2=n(ue,"LI",{});var ike=s(t2);Oge=n(ike,"STRONG",{});var Hut=s(Oge);FPo=r(Hut,"bigbird_pegasus"),Hut.forEach(t),TPo=r(ike," \u2014 "),LO=n(ike,"A",{href:!0});var Uut=s(LO);MPo=r(Uut,"BigBirdPegasusForConditionalGeneration"),Uut.forEach(t),EPo=r(ike," (BigBird-Pegasus model)"),ike.forEach(t),CPo=i(ue),a2=n(ue,"LI",{});var dke=s(a2);Vge=n(dke,"STRONG",{});var Jut=s(Vge);wPo=r(Jut,"blenderbot"),Jut.forEach(t),APo=r(dke," \u2014 "),yO=n(dke,"A",{href:!0});var Yut=s(yO);LPo=r(Yut,"BlenderbotForConditionalGeneration"),Yut.forEach(t),yPo=r(dke," (Blenderbot model)"),dke.forEach(t),xPo=i(ue),n2=n(ue,"LI",{});var cke=s(n2);Xge=n(cke,"STRONG",{});var Kut=s(Xge);$Po=r(Kut,"blenderbot-small"),Kut.forEach(t),kPo=r(cke," \u2014 "),xO=n(cke,"A",{href:!0});var Zut=s(xO);SPo=r(Zut,"BlenderbotSmallForConditionalGeneration"),Zut.forEach(t),RPo=r(cke," (BlenderbotSmall model)"),cke.forEach(t),PPo=i(ue),s2=n(ue,"LI",{});var fke=s(s2);zge=n(fke,"STRONG",{});var e7t=s(zge);BPo=r(e7t,"encoder-decoder"),e7t.forEach(t),IPo=r(fke," \u2014 "),$O=n(fke,"A",{href:!0});var o7t=s($O);NPo=r(o7t,"EncoderDecoderModel"),o7t.forEach(t),qPo=r(fke," (Encoder decoder model)"),fke.forEach(t),jPo=i(ue),l2=n(ue,"LI",{});var mke=s(l2);Qge=n(mke,"STRONG",{});var r7t=s(Qge);DPo=r(r7t,"fsmt"),r7t.forEach(t),GPo=r(mke," \u2014 "),kO=n(mke,"A",{href:!0});var t7t=s(kO);OPo=r(t7t,"FSMTForConditionalGeneration"),t7t.forEach(t),VPo=r(mke," (FairSeq Machine-Translation model)"),mke.forEach(t),XPo=i(ue),i2=n(ue,"LI",{});var gke=s(i2);Wge=n(gke,"STRONG",{});var a7t=s(Wge);zPo=r(a7t,"led"),a7t.forEach(t),QPo=r(gke," \u2014 "),SO=n(gke,"A",{href:!0});var n7t=s(SO);WPo=r(n7t,"LEDForConditionalGeneration"),n7t.forEach(t),HPo=r(gke," (LED model)"),gke.forEach(t),UPo=i(ue),d2=n(ue,"LI",{});var hke=s(d2);Hge=n(hke,"STRONG",{});var s7t=s(Hge);JPo=r(s7t,"longt5"),s7t.forEach(t),YPo=r(hke," \u2014 "),RO=n(hke,"A",{href:!0});var l7t=s(RO);KPo=r(l7t,"LongT5ForConditionalGeneration"),l7t.forEach(t),ZPo=r(hke," (LongT5 model)"),hke.forEach(t),eBo=i(ue),c2=n(ue,"LI",{});var pke=s(c2);Uge=n(pke,"STRONG",{});var i7t=s(Uge);oBo=r(i7t,"m2m_100"),i7t.forEach(t),rBo=r(pke," \u2014 "),PO=n(pke,"A",{href:!0});var d7t=s(PO);tBo=r(d7t,"M2M100ForConditionalGeneration"),d7t.forEach(t),aBo=r(pke," (M2M100 model)"),pke.forEach(t),nBo=i(ue),f2=n(ue,"LI",{});var _ke=s(f2);Jge=n(_ke,"STRONG",{});var c7t=s(Jge);sBo=r(c7t,"marian"),c7t.forEach(t),lBo=r(_ke," \u2014 "),BO=n(_ke,"A",{href:!0});var f7t=s(BO);iBo=r(f7t,"MarianMTModel"),f7t.forEach(t),dBo=r(_ke," (Marian model)"),_ke.forEach(t),cBo=i(ue),m2=n(ue,"LI",{});var uke=s(m2);Yge=n(uke,"STRONG",{});var m7t=s(Yge);fBo=r(m7t,"mbart"),m7t.forEach(t),mBo=r(uke," \u2014 "),IO=n(uke,"A",{href:!0});var g7t=s(IO);gBo=r(g7t,"MBartForConditionalGeneration"),g7t.forEach(t),hBo=r(uke," (mBART model)"),uke.forEach(t),pBo=i(ue),g2=n(ue,"LI",{});var bke=s(g2);Kge=n(bke,"STRONG",{});var h7t=s(Kge);_Bo=r(h7t,"mt5"),h7t.forEach(t),uBo=r(bke," \u2014 "),NO=n(bke,"A",{href:!0});var p7t=s(NO);bBo=r(p7t,"MT5ForConditionalGeneration"),p7t.forEach(t),vBo=r(bke," (MT5 model)"),bke.forEach(t),FBo=i(ue),h2=n(ue,"LI",{});var vke=s(h2);Zge=n(vke,"STRONG",{});var _7t=s(Zge);TBo=r(_7t,"mvp"),_7t.forEach(t),MBo=r(vke," \u2014 "),qO=n(vke,"A",{href:!0});var u7t=s(qO);EBo=r(u7t,"MvpForConditionalGeneration"),u7t.forEach(t),CBo=r(vke," (MVP model)"),vke.forEach(t),wBo=i(ue),p2=n(ue,"LI",{});var Fke=s(p2);ehe=n(Fke,"STRONG",{});var b7t=s(ehe);ABo=r(b7t,"pegasus"),b7t.forEach(t),LBo=r(Fke," \u2014 "),jO=n(Fke,"A",{href:!0});var v7t=s(jO);yBo=r(v7t,"PegasusForConditionalGeneration"),v7t.forEach(t),xBo=r(Fke," (Pegasus model)"),Fke.forEach(t),$Bo=i(ue),_2=n(ue,"LI",{});var Tke=s(_2);ohe=n(Tke,"STRONG",{});var F7t=s(ohe);kBo=r(F7t,"plbart"),F7t.forEach(t),SBo=r(Tke," \u2014 "),DO=n(Tke,"A",{href:!0});var T7t=s(DO);RBo=r(T7t,"PLBartForConditionalGeneration"),T7t.forEach(t),PBo=r(Tke," (PLBart model)"),Tke.forEach(t),BBo=i(ue),u2=n(ue,"LI",{});var Mke=s(u2);rhe=n(Mke,"STRONG",{});var M7t=s(rhe);IBo=r(M7t,"prophetnet"),M7t.forEach(t),NBo=r(Mke," \u2014 "),GO=n(Mke,"A",{href:!0});var E7t=s(GO);qBo=r(E7t,"ProphetNetForConditionalGeneration"),E7t.forEach(t),jBo=r(Mke," (ProphetNet model)"),Mke.forEach(t),DBo=i(ue),b2=n(ue,"LI",{});var Eke=s(b2);the=n(Eke,"STRONG",{});var C7t=s(the);GBo=r(C7t,"t5"),C7t.forEach(t),OBo=r(Eke," \u2014 "),OO=n(Eke,"A",{href:!0});var w7t=s(OO);VBo=r(w7t,"T5ForConditionalGeneration"),w7t.forEach(t),XBo=r(Eke," (T5 model)"),Eke.forEach(t),zBo=i(ue),v2=n(ue,"LI",{});var Cke=s(v2);ahe=n(Cke,"STRONG",{});var A7t=s(ahe);QBo=r(A7t,"xlm-prophetnet"),A7t.forEach(t),WBo=r(Cke," \u2014 "),VO=n(Cke,"A",{href:!0});var L7t=s(VO);HBo=r(L7t,"XLMProphetNetForConditionalGeneration"),L7t.forEach(t),UBo=r(Cke," (XLM-ProphetNet model)"),Cke.forEach(t),ue.forEach(t),JBo=i(ia),F2=n(ia,"P",{});var wke=s(F2);YBo=r(wke,"The model is set in evaluation mode by default using "),nhe=n(wke,"CODE",{});var y7t=s(nhe);KBo=r(y7t,"model.eval()"),y7t.forEach(t),ZBo=r(wke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),she=n(wke,"CODE",{});var x7t=s(she);eIo=r(x7t,"model.train()"),x7t.forEach(t),wke.forEach(t),oIo=i(ia),T(T2.$$.fragment,ia),ia.forEach(t),el.forEach(t),aOe=i(f),Ji=n(f,"H2",{class:!0});var cXe=s(Ji);M2=n(cXe,"A",{id:!0,class:!0,href:!0});var $7t=s(M2);lhe=n($7t,"SPAN",{});var k7t=s(lhe);T(wL.$$.fragment,k7t),k7t.forEach(t),$7t.forEach(t),rIo=i(cXe),ihe=n(cXe,"SPAN",{});var S7t=s(ihe);tIo=r(S7t,"AutoModelForSequenceClassification"),S7t.forEach(t),cXe.forEach(t),nOe=i(f),Po=n(f,"DIV",{class:!0});var ol=s(Po);T(AL.$$.fragment,ol),aIo=i(ol),Yi=n(ol,"P",{});var Loe=s(Yi);nIo=r(Loe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),XO=n(Loe,"A",{href:!0});var R7t=s(XO);sIo=r(R7t,"from_pretrained()"),R7t.forEach(t),lIo=r(Loe," class method or the "),zO=n(Loe,"A",{href:!0});var P7t=s(zO);iIo=r(P7t,"from_config()"),P7t.forEach(t),dIo=r(Loe,` class
method.`),Loe.forEach(t),cIo=i(ol),LL=n(ol,"P",{});var fXe=s(LL);fIo=r(fXe,"This class cannot be instantiated directly using "),dhe=n(fXe,"CODE",{});var B7t=s(dhe);mIo=r(B7t,"__init__()"),B7t.forEach(t),gIo=r(fXe," (throws an error)."),fXe.forEach(t),hIo=i(ol),ct=n(ol,"DIV",{class:!0});var Dw=s(ct);T(yL.$$.fragment,Dw),pIo=i(Dw),che=n(Dw,"P",{});var I7t=s(che);_Io=r(I7t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),I7t.forEach(t),uIo=i(Dw),Ki=n(Dw,"P",{});var yoe=s(Ki);bIo=r(yoe,`Note:
Loading a model from its configuration file does `),fhe=n(yoe,"STRONG",{});var N7t=s(fhe);vIo=r(N7t,"not"),N7t.forEach(t),FIo=r(yoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),QO=n(yoe,"A",{href:!0});var q7t=s(QO);TIo=r(q7t,"from_pretrained()"),q7t.forEach(t),MIo=r(yoe," to load the model weights."),yoe.forEach(t),EIo=i(Dw),T(E2.$$.fragment,Dw),Dw.forEach(t),CIo=i(ol),oo=n(ol,"DIV",{class:!0});var da=s(oo);T(xL.$$.fragment,da),wIo=i(da),mhe=n(da,"P",{});var j7t=s(mhe);AIo=r(j7t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),j7t.forEach(t),LIo=i(da),Na=n(da,"P",{});var Gw=s(Na);yIo=r(Gw,"The model class to instantiate is selected based on the "),ghe=n(Gw,"CODE",{});var D7t=s(ghe);xIo=r(D7t,"model_type"),D7t.forEach(t),$Io=r(Gw,` property of the config object (either
passed as an argument or loaded from `),hhe=n(Gw,"CODE",{});var G7t=s(hhe);kIo=r(G7t,"pretrained_model_name_or_path"),G7t.forEach(t),SIo=r(Gw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),phe=n(Gw,"CODE",{});var O7t=s(phe);RIo=r(O7t,"pretrained_model_name_or_path"),O7t.forEach(t),PIo=r(Gw,":"),Gw.forEach(t),BIo=i(da),N=n(da,"UL",{});var q=s(N);C2=n(q,"LI",{});var Ake=s(C2);_he=n(Ake,"STRONG",{});var V7t=s(_he);IIo=r(V7t,"albert"),V7t.forEach(t),NIo=r(Ake," \u2014 "),WO=n(Ake,"A",{href:!0});var X7t=s(WO);qIo=r(X7t,"AlbertForSequenceClassification"),X7t.forEach(t),jIo=r(Ake," (ALBERT model)"),Ake.forEach(t),DIo=i(q),w2=n(q,"LI",{});var Lke=s(w2);uhe=n(Lke,"STRONG",{});var z7t=s(uhe);GIo=r(z7t,"bart"),z7t.forEach(t),OIo=r(Lke," \u2014 "),HO=n(Lke,"A",{href:!0});var Q7t=s(HO);VIo=r(Q7t,"BartForSequenceClassification"),Q7t.forEach(t),XIo=r(Lke," (BART model)"),Lke.forEach(t),zIo=i(q),A2=n(q,"LI",{});var yke=s(A2);bhe=n(yke,"STRONG",{});var W7t=s(bhe);QIo=r(W7t,"bert"),W7t.forEach(t),WIo=r(yke," \u2014 "),UO=n(yke,"A",{href:!0});var H7t=s(UO);HIo=r(H7t,"BertForSequenceClassification"),H7t.forEach(t),UIo=r(yke," (BERT model)"),yke.forEach(t),JIo=i(q),L2=n(q,"LI",{});var xke=s(L2);vhe=n(xke,"STRONG",{});var U7t=s(vhe);YIo=r(U7t,"big_bird"),U7t.forEach(t),KIo=r(xke," \u2014 "),JO=n(xke,"A",{href:!0});var J7t=s(JO);ZIo=r(J7t,"BigBirdForSequenceClassification"),J7t.forEach(t),eNo=r(xke," (BigBird model)"),xke.forEach(t),oNo=i(q),y2=n(q,"LI",{});var $ke=s(y2);Fhe=n($ke,"STRONG",{});var Y7t=s(Fhe);rNo=r(Y7t,"bigbird_pegasus"),Y7t.forEach(t),tNo=r($ke," \u2014 "),YO=n($ke,"A",{href:!0});var K7t=s(YO);aNo=r(K7t,"BigBirdPegasusForSequenceClassification"),K7t.forEach(t),nNo=r($ke," (BigBird-Pegasus model)"),$ke.forEach(t),sNo=i(q),x2=n(q,"LI",{});var kke=s(x2);The=n(kke,"STRONG",{});var Z7t=s(The);lNo=r(Z7t,"bloom"),Z7t.forEach(t),iNo=r(kke," \u2014 "),KO=n(kke,"A",{href:!0});var e1t=s(KO);dNo=r(e1t,"BloomForSequenceClassification"),e1t.forEach(t),cNo=r(kke," (BLOOM model)"),kke.forEach(t),fNo=i(q),$2=n(q,"LI",{});var Ske=s($2);Mhe=n(Ske,"STRONG",{});var o1t=s(Mhe);mNo=r(o1t,"camembert"),o1t.forEach(t),gNo=r(Ske," \u2014 "),ZO=n(Ske,"A",{href:!0});var r1t=s(ZO);hNo=r(r1t,"CamembertForSequenceClassification"),r1t.forEach(t),pNo=r(Ske," (CamemBERT model)"),Ske.forEach(t),_No=i(q),k2=n(q,"LI",{});var Rke=s(k2);Ehe=n(Rke,"STRONG",{});var t1t=s(Ehe);uNo=r(t1t,"canine"),t1t.forEach(t),bNo=r(Rke," \u2014 "),eV=n(Rke,"A",{href:!0});var a1t=s(eV);vNo=r(a1t,"CanineForSequenceClassification"),a1t.forEach(t),FNo=r(Rke," (CANINE model)"),Rke.forEach(t),TNo=i(q),S2=n(q,"LI",{});var Pke=s(S2);Che=n(Pke,"STRONG",{});var n1t=s(Che);MNo=r(n1t,"convbert"),n1t.forEach(t),ENo=r(Pke," \u2014 "),oV=n(Pke,"A",{href:!0});var s1t=s(oV);CNo=r(s1t,"ConvBertForSequenceClassification"),s1t.forEach(t),wNo=r(Pke," (ConvBERT model)"),Pke.forEach(t),ANo=i(q),R2=n(q,"LI",{});var Bke=s(R2);whe=n(Bke,"STRONG",{});var l1t=s(whe);LNo=r(l1t,"ctrl"),l1t.forEach(t),yNo=r(Bke," \u2014 "),rV=n(Bke,"A",{href:!0});var i1t=s(rV);xNo=r(i1t,"CTRLForSequenceClassification"),i1t.forEach(t),$No=r(Bke," (CTRL model)"),Bke.forEach(t),kNo=i(q),P2=n(q,"LI",{});var Ike=s(P2);Ahe=n(Ike,"STRONG",{});var d1t=s(Ahe);SNo=r(d1t,"data2vec-text"),d1t.forEach(t),RNo=r(Ike," \u2014 "),tV=n(Ike,"A",{href:!0});var c1t=s(tV);PNo=r(c1t,"Data2VecTextForSequenceClassification"),c1t.forEach(t),BNo=r(Ike," (Data2VecText model)"),Ike.forEach(t),INo=i(q),B2=n(q,"LI",{});var Nke=s(B2);Lhe=n(Nke,"STRONG",{});var f1t=s(Lhe);NNo=r(f1t,"deberta"),f1t.forEach(t),qNo=r(Nke," \u2014 "),aV=n(Nke,"A",{href:!0});var m1t=s(aV);jNo=r(m1t,"DebertaForSequenceClassification"),m1t.forEach(t),DNo=r(Nke," (DeBERTa model)"),Nke.forEach(t),GNo=i(q),I2=n(q,"LI",{});var qke=s(I2);yhe=n(qke,"STRONG",{});var g1t=s(yhe);ONo=r(g1t,"deberta-v2"),g1t.forEach(t),VNo=r(qke," \u2014 "),nV=n(qke,"A",{href:!0});var h1t=s(nV);XNo=r(h1t,"DebertaV2ForSequenceClassification"),h1t.forEach(t),zNo=r(qke," (DeBERTa-v2 model)"),qke.forEach(t),QNo=i(q),N2=n(q,"LI",{});var jke=s(N2);xhe=n(jke,"STRONG",{});var p1t=s(xhe);WNo=r(p1t,"distilbert"),p1t.forEach(t),HNo=r(jke," \u2014 "),sV=n(jke,"A",{href:!0});var _1t=s(sV);UNo=r(_1t,"DistilBertForSequenceClassification"),_1t.forEach(t),JNo=r(jke," (DistilBERT model)"),jke.forEach(t),YNo=i(q),q2=n(q,"LI",{});var Dke=s(q2);$he=n(Dke,"STRONG",{});var u1t=s($he);KNo=r(u1t,"electra"),u1t.forEach(t),ZNo=r(Dke," \u2014 "),lV=n(Dke,"A",{href:!0});var b1t=s(lV);eqo=r(b1t,"ElectraForSequenceClassification"),b1t.forEach(t),oqo=r(Dke," (ELECTRA model)"),Dke.forEach(t),rqo=i(q),j2=n(q,"LI",{});var Gke=s(j2);khe=n(Gke,"STRONG",{});var v1t=s(khe);tqo=r(v1t,"flaubert"),v1t.forEach(t),aqo=r(Gke," \u2014 "),iV=n(Gke,"A",{href:!0});var F1t=s(iV);nqo=r(F1t,"FlaubertForSequenceClassification"),F1t.forEach(t),sqo=r(Gke," (FlauBERT model)"),Gke.forEach(t),lqo=i(q),D2=n(q,"LI",{});var Oke=s(D2);She=n(Oke,"STRONG",{});var T1t=s(She);iqo=r(T1t,"fnet"),T1t.forEach(t),dqo=r(Oke," \u2014 "),dV=n(Oke,"A",{href:!0});var M1t=s(dV);cqo=r(M1t,"FNetForSequenceClassification"),M1t.forEach(t),fqo=r(Oke," (FNet model)"),Oke.forEach(t),mqo=i(q),G2=n(q,"LI",{});var Vke=s(G2);Rhe=n(Vke,"STRONG",{});var E1t=s(Rhe);gqo=r(E1t,"funnel"),E1t.forEach(t),hqo=r(Vke," \u2014 "),cV=n(Vke,"A",{href:!0});var C1t=s(cV);pqo=r(C1t,"FunnelForSequenceClassification"),C1t.forEach(t),_qo=r(Vke," (Funnel Transformer model)"),Vke.forEach(t),uqo=i(q),O2=n(q,"LI",{});var Xke=s(O2);Phe=n(Xke,"STRONG",{});var w1t=s(Phe);bqo=r(w1t,"gpt2"),w1t.forEach(t),vqo=r(Xke," \u2014 "),fV=n(Xke,"A",{href:!0});var A1t=s(fV);Fqo=r(A1t,"GPT2ForSequenceClassification"),A1t.forEach(t),Tqo=r(Xke," (OpenAI GPT-2 model)"),Xke.forEach(t),Mqo=i(q),V2=n(q,"LI",{});var zke=s(V2);Bhe=n(zke,"STRONG",{});var L1t=s(Bhe);Eqo=r(L1t,"gpt_neo"),L1t.forEach(t),Cqo=r(zke," \u2014 "),mV=n(zke,"A",{href:!0});var y1t=s(mV);wqo=r(y1t,"GPTNeoForSequenceClassification"),y1t.forEach(t),Aqo=r(zke," (GPT Neo model)"),zke.forEach(t),Lqo=i(q),X2=n(q,"LI",{});var Qke=s(X2);Ihe=n(Qke,"STRONG",{});var x1t=s(Ihe);yqo=r(x1t,"gptj"),x1t.forEach(t),xqo=r(Qke," \u2014 "),gV=n(Qke,"A",{href:!0});var $1t=s(gV);$qo=r($1t,"GPTJForSequenceClassification"),$1t.forEach(t),kqo=r(Qke," (GPT-J model)"),Qke.forEach(t),Sqo=i(q),z2=n(q,"LI",{});var Wke=s(z2);Nhe=n(Wke,"STRONG",{});var k1t=s(Nhe);Rqo=r(k1t,"ibert"),k1t.forEach(t),Pqo=r(Wke," \u2014 "),hV=n(Wke,"A",{href:!0});var S1t=s(hV);Bqo=r(S1t,"IBertForSequenceClassification"),S1t.forEach(t),Iqo=r(Wke," (I-BERT model)"),Wke.forEach(t),Nqo=i(q),Q2=n(q,"LI",{});var Hke=s(Q2);qhe=n(Hke,"STRONG",{});var R1t=s(qhe);qqo=r(R1t,"layoutlm"),R1t.forEach(t),jqo=r(Hke," \u2014 "),pV=n(Hke,"A",{href:!0});var P1t=s(pV);Dqo=r(P1t,"LayoutLMForSequenceClassification"),P1t.forEach(t),Gqo=r(Hke," (LayoutLM model)"),Hke.forEach(t),Oqo=i(q),W2=n(q,"LI",{});var Uke=s(W2);jhe=n(Uke,"STRONG",{});var B1t=s(jhe);Vqo=r(B1t,"layoutlmv2"),B1t.forEach(t),Xqo=r(Uke," \u2014 "),_V=n(Uke,"A",{href:!0});var I1t=s(_V);zqo=r(I1t,"LayoutLMv2ForSequenceClassification"),I1t.forEach(t),Qqo=r(Uke," (LayoutLMv2 model)"),Uke.forEach(t),Wqo=i(q),H2=n(q,"LI",{});var Jke=s(H2);Dhe=n(Jke,"STRONG",{});var N1t=s(Dhe);Hqo=r(N1t,"layoutlmv3"),N1t.forEach(t),Uqo=r(Jke," \u2014 "),uV=n(Jke,"A",{href:!0});var q1t=s(uV);Jqo=r(q1t,"LayoutLMv3ForSequenceClassification"),q1t.forEach(t),Yqo=r(Jke," (LayoutLMv3 model)"),Jke.forEach(t),Kqo=i(q),U2=n(q,"LI",{});var Yke=s(U2);Ghe=n(Yke,"STRONG",{});var j1t=s(Ghe);Zqo=r(j1t,"led"),j1t.forEach(t),ejo=r(Yke," \u2014 "),bV=n(Yke,"A",{href:!0});var D1t=s(bV);ojo=r(D1t,"LEDForSequenceClassification"),D1t.forEach(t),rjo=r(Yke," (LED model)"),Yke.forEach(t),tjo=i(q),J2=n(q,"LI",{});var Kke=s(J2);Ohe=n(Kke,"STRONG",{});var G1t=s(Ohe);ajo=r(G1t,"longformer"),G1t.forEach(t),njo=r(Kke," \u2014 "),vV=n(Kke,"A",{href:!0});var O1t=s(vV);sjo=r(O1t,"LongformerForSequenceClassification"),O1t.forEach(t),ljo=r(Kke," (Longformer model)"),Kke.forEach(t),ijo=i(q),Y2=n(q,"LI",{});var Zke=s(Y2);Vhe=n(Zke,"STRONG",{});var V1t=s(Vhe);djo=r(V1t,"mbart"),V1t.forEach(t),cjo=r(Zke," \u2014 "),FV=n(Zke,"A",{href:!0});var X1t=s(FV);fjo=r(X1t,"MBartForSequenceClassification"),X1t.forEach(t),mjo=r(Zke," (mBART model)"),Zke.forEach(t),gjo=i(q),K2=n(q,"LI",{});var eSe=s(K2);Xhe=n(eSe,"STRONG",{});var z1t=s(Xhe);hjo=r(z1t,"megatron-bert"),z1t.forEach(t),pjo=r(eSe," \u2014 "),TV=n(eSe,"A",{href:!0});var Q1t=s(TV);_jo=r(Q1t,"MegatronBertForSequenceClassification"),Q1t.forEach(t),ujo=r(eSe," (Megatron-BERT model)"),eSe.forEach(t),bjo=i(q),Z2=n(q,"LI",{});var oSe=s(Z2);zhe=n(oSe,"STRONG",{});var W1t=s(zhe);vjo=r(W1t,"mobilebert"),W1t.forEach(t),Fjo=r(oSe," \u2014 "),MV=n(oSe,"A",{href:!0});var H1t=s(MV);Tjo=r(H1t,"MobileBertForSequenceClassification"),H1t.forEach(t),Mjo=r(oSe," (MobileBERT model)"),oSe.forEach(t),Ejo=i(q),eb=n(q,"LI",{});var rSe=s(eb);Qhe=n(rSe,"STRONG",{});var U1t=s(Qhe);Cjo=r(U1t,"mpnet"),U1t.forEach(t),wjo=r(rSe," \u2014 "),EV=n(rSe,"A",{href:!0});var J1t=s(EV);Ajo=r(J1t,"MPNetForSequenceClassification"),J1t.forEach(t),Ljo=r(rSe," (MPNet model)"),rSe.forEach(t),yjo=i(q),ob=n(q,"LI",{});var tSe=s(ob);Whe=n(tSe,"STRONG",{});var Y1t=s(Whe);xjo=r(Y1t,"mvp"),Y1t.forEach(t),$jo=r(tSe," \u2014 "),CV=n(tSe,"A",{href:!0});var K1t=s(CV);kjo=r(K1t,"MvpForSequenceClassification"),K1t.forEach(t),Sjo=r(tSe," (MVP model)"),tSe.forEach(t),Rjo=i(q),rb=n(q,"LI",{});var aSe=s(rb);Hhe=n(aSe,"STRONG",{});var Z1t=s(Hhe);Pjo=r(Z1t,"nystromformer"),Z1t.forEach(t),Bjo=r(aSe," \u2014 "),wV=n(aSe,"A",{href:!0});var e2t=s(wV);Ijo=r(e2t,"NystromformerForSequenceClassification"),e2t.forEach(t),Njo=r(aSe," (Nystr\xF6mformer model)"),aSe.forEach(t),qjo=i(q),tb=n(q,"LI",{});var nSe=s(tb);Uhe=n(nSe,"STRONG",{});var o2t=s(Uhe);jjo=r(o2t,"openai-gpt"),o2t.forEach(t),Djo=r(nSe," \u2014 "),AV=n(nSe,"A",{href:!0});var r2t=s(AV);Gjo=r(r2t,"OpenAIGPTForSequenceClassification"),r2t.forEach(t),Ojo=r(nSe," (OpenAI GPT model)"),nSe.forEach(t),Vjo=i(q),ab=n(q,"LI",{});var sSe=s(ab);Jhe=n(sSe,"STRONG",{});var t2t=s(Jhe);Xjo=r(t2t,"perceiver"),t2t.forEach(t),zjo=r(sSe," \u2014 "),LV=n(sSe,"A",{href:!0});var a2t=s(LV);Qjo=r(a2t,"PerceiverForSequenceClassification"),a2t.forEach(t),Wjo=r(sSe," (Perceiver model)"),sSe.forEach(t),Hjo=i(q),nb=n(q,"LI",{});var lSe=s(nb);Yhe=n(lSe,"STRONG",{});var n2t=s(Yhe);Ujo=r(n2t,"plbart"),n2t.forEach(t),Jjo=r(lSe," \u2014 "),yV=n(lSe,"A",{href:!0});var s2t=s(yV);Yjo=r(s2t,"PLBartForSequenceClassification"),s2t.forEach(t),Kjo=r(lSe," (PLBart model)"),lSe.forEach(t),Zjo=i(q),sb=n(q,"LI",{});var iSe=s(sb);Khe=n(iSe,"STRONG",{});var l2t=s(Khe);eDo=r(l2t,"qdqbert"),l2t.forEach(t),oDo=r(iSe," \u2014 "),xV=n(iSe,"A",{href:!0});var i2t=s(xV);rDo=r(i2t,"QDQBertForSequenceClassification"),i2t.forEach(t),tDo=r(iSe," (QDQBert model)"),iSe.forEach(t),aDo=i(q),lb=n(q,"LI",{});var dSe=s(lb);Zhe=n(dSe,"STRONG",{});var d2t=s(Zhe);nDo=r(d2t,"reformer"),d2t.forEach(t),sDo=r(dSe," \u2014 "),$V=n(dSe,"A",{href:!0});var c2t=s($V);lDo=r(c2t,"ReformerForSequenceClassification"),c2t.forEach(t),iDo=r(dSe," (Reformer model)"),dSe.forEach(t),dDo=i(q),ib=n(q,"LI",{});var cSe=s(ib);epe=n(cSe,"STRONG",{});var f2t=s(epe);cDo=r(f2t,"rembert"),f2t.forEach(t),fDo=r(cSe," \u2014 "),kV=n(cSe,"A",{href:!0});var m2t=s(kV);mDo=r(m2t,"RemBertForSequenceClassification"),m2t.forEach(t),gDo=r(cSe," (RemBERT model)"),cSe.forEach(t),hDo=i(q),db=n(q,"LI",{});var fSe=s(db);ope=n(fSe,"STRONG",{});var g2t=s(ope);pDo=r(g2t,"roberta"),g2t.forEach(t),_Do=r(fSe," \u2014 "),SV=n(fSe,"A",{href:!0});var h2t=s(SV);uDo=r(h2t,"RobertaForSequenceClassification"),h2t.forEach(t),bDo=r(fSe," (RoBERTa model)"),fSe.forEach(t),vDo=i(q),cb=n(q,"LI",{});var mSe=s(cb);rpe=n(mSe,"STRONG",{});var p2t=s(rpe);FDo=r(p2t,"roformer"),p2t.forEach(t),TDo=r(mSe," \u2014 "),RV=n(mSe,"A",{href:!0});var _2t=s(RV);MDo=r(_2t,"RoFormerForSequenceClassification"),_2t.forEach(t),EDo=r(mSe," (RoFormer model)"),mSe.forEach(t),CDo=i(q),fb=n(q,"LI",{});var gSe=s(fb);tpe=n(gSe,"STRONG",{});var u2t=s(tpe);wDo=r(u2t,"squeezebert"),u2t.forEach(t),ADo=r(gSe," \u2014 "),PV=n(gSe,"A",{href:!0});var b2t=s(PV);LDo=r(b2t,"SqueezeBertForSequenceClassification"),b2t.forEach(t),yDo=r(gSe," (SqueezeBERT model)"),gSe.forEach(t),xDo=i(q),mb=n(q,"LI",{});var hSe=s(mb);ape=n(hSe,"STRONG",{});var v2t=s(ape);$Do=r(v2t,"tapas"),v2t.forEach(t),kDo=r(hSe," \u2014 "),BV=n(hSe,"A",{href:!0});var F2t=s(BV);SDo=r(F2t,"TapasForSequenceClassification"),F2t.forEach(t),RDo=r(hSe," (TAPAS model)"),hSe.forEach(t),PDo=i(q),gb=n(q,"LI",{});var pSe=s(gb);npe=n(pSe,"STRONG",{});var T2t=s(npe);BDo=r(T2t,"transfo-xl"),T2t.forEach(t),IDo=r(pSe," \u2014 "),IV=n(pSe,"A",{href:!0});var M2t=s(IV);NDo=r(M2t,"TransfoXLForSequenceClassification"),M2t.forEach(t),qDo=r(pSe," (Transformer-XL model)"),pSe.forEach(t),jDo=i(q),hb=n(q,"LI",{});var _Se=s(hb);spe=n(_Se,"STRONG",{});var E2t=s(spe);DDo=r(E2t,"xlm"),E2t.forEach(t),GDo=r(_Se," \u2014 "),NV=n(_Se,"A",{href:!0});var C2t=s(NV);ODo=r(C2t,"XLMForSequenceClassification"),C2t.forEach(t),VDo=r(_Se," (XLM model)"),_Se.forEach(t),XDo=i(q),pb=n(q,"LI",{});var uSe=s(pb);lpe=n(uSe,"STRONG",{});var w2t=s(lpe);zDo=r(w2t,"xlm-roberta"),w2t.forEach(t),QDo=r(uSe," \u2014 "),qV=n(uSe,"A",{href:!0});var A2t=s(qV);WDo=r(A2t,"XLMRobertaForSequenceClassification"),A2t.forEach(t),HDo=r(uSe," (XLM-RoBERTa model)"),uSe.forEach(t),UDo=i(q),_b=n(q,"LI",{});var bSe=s(_b);ipe=n(bSe,"STRONG",{});var L2t=s(ipe);JDo=r(L2t,"xlm-roberta-xl"),L2t.forEach(t),YDo=r(bSe," \u2014 "),jV=n(bSe,"A",{href:!0});var y2t=s(jV);KDo=r(y2t,"XLMRobertaXLForSequenceClassification"),y2t.forEach(t),ZDo=r(bSe," (XLM-RoBERTa-XL model)"),bSe.forEach(t),eGo=i(q),ub=n(q,"LI",{});var vSe=s(ub);dpe=n(vSe,"STRONG",{});var x2t=s(dpe);oGo=r(x2t,"xlnet"),x2t.forEach(t),rGo=r(vSe," \u2014 "),DV=n(vSe,"A",{href:!0});var $2t=s(DV);tGo=r($2t,"XLNetForSequenceClassification"),$2t.forEach(t),aGo=r(vSe," (XLNet model)"),vSe.forEach(t),nGo=i(q),bb=n(q,"LI",{});var FSe=s(bb);cpe=n(FSe,"STRONG",{});var k2t=s(cpe);sGo=r(k2t,"yoso"),k2t.forEach(t),lGo=r(FSe," \u2014 "),GV=n(FSe,"A",{href:!0});var S2t=s(GV);iGo=r(S2t,"YosoForSequenceClassification"),S2t.forEach(t),dGo=r(FSe," (YOSO model)"),FSe.forEach(t),q.forEach(t),cGo=i(da),vb=n(da,"P",{});var TSe=s(vb);fGo=r(TSe,"The model is set in evaluation mode by default using "),fpe=n(TSe,"CODE",{});var R2t=s(fpe);mGo=r(R2t,"model.eval()"),R2t.forEach(t),gGo=r(TSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mpe=n(TSe,"CODE",{});var P2t=s(mpe);hGo=r(P2t,"model.train()"),P2t.forEach(t),TSe.forEach(t),pGo=i(da),T(Fb.$$.fragment,da),da.forEach(t),ol.forEach(t),sOe=i(f),Zi=n(f,"H2",{class:!0});var mXe=s(Zi);Tb=n(mXe,"A",{id:!0,class:!0,href:!0});var B2t=s(Tb);gpe=n(B2t,"SPAN",{});var I2t=s(gpe);T($L.$$.fragment,I2t),I2t.forEach(t),B2t.forEach(t),_Go=i(mXe),hpe=n(mXe,"SPAN",{});var N2t=s(hpe);uGo=r(N2t,"AutoModelForMultipleChoice"),N2t.forEach(t),mXe.forEach(t),lOe=i(f),Bo=n(f,"DIV",{class:!0});var rl=s(Bo);T(kL.$$.fragment,rl),bGo=i(rl),ed=n(rl,"P",{});var xoe=s(ed);vGo=r(xoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),OV=n(xoe,"A",{href:!0});var q2t=s(OV);FGo=r(q2t,"from_pretrained()"),q2t.forEach(t),TGo=r(xoe," class method or the "),VV=n(xoe,"A",{href:!0});var j2t=s(VV);MGo=r(j2t,"from_config()"),j2t.forEach(t),EGo=r(xoe,` class
method.`),xoe.forEach(t),CGo=i(rl),SL=n(rl,"P",{});var gXe=s(SL);wGo=r(gXe,"This class cannot be instantiated directly using "),ppe=n(gXe,"CODE",{});var D2t=s(ppe);AGo=r(D2t,"__init__()"),D2t.forEach(t),LGo=r(gXe," (throws an error)."),gXe.forEach(t),yGo=i(rl),ft=n(rl,"DIV",{class:!0});var Ow=s(ft);T(RL.$$.fragment,Ow),xGo=i(Ow),_pe=n(Ow,"P",{});var G2t=s(_pe);$Go=r(G2t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),G2t.forEach(t),kGo=i(Ow),od=n(Ow,"P",{});var $oe=s(od);SGo=r($oe,`Note:
Loading a model from its configuration file does `),upe=n($oe,"STRONG",{});var O2t=s(upe);RGo=r(O2t,"not"),O2t.forEach(t),PGo=r($oe,` load the model weights. It only affects the
model\u2019s configuration. Use `),XV=n($oe,"A",{href:!0});var V2t=s(XV);BGo=r(V2t,"from_pretrained()"),V2t.forEach(t),IGo=r($oe," to load the model weights."),$oe.forEach(t),NGo=i(Ow),T(Mb.$$.fragment,Ow),Ow.forEach(t),qGo=i(rl),ro=n(rl,"DIV",{class:!0});var ca=s(ro);T(PL.$$.fragment,ca),jGo=i(ca),bpe=n(ca,"P",{});var X2t=s(bpe);DGo=r(X2t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),X2t.forEach(t),GGo=i(ca),qa=n(ca,"P",{});var Vw=s(qa);OGo=r(Vw,"The model class to instantiate is selected based on the "),vpe=n(Vw,"CODE",{});var z2t=s(vpe);VGo=r(z2t,"model_type"),z2t.forEach(t),XGo=r(Vw,` property of the config object (either
passed as an argument or loaded from `),Fpe=n(Vw,"CODE",{});var Q2t=s(Fpe);zGo=r(Q2t,"pretrained_model_name_or_path"),Q2t.forEach(t),QGo=r(Vw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tpe=n(Vw,"CODE",{});var W2t=s(Tpe);WGo=r(W2t,"pretrained_model_name_or_path"),W2t.forEach(t),HGo=r(Vw,":"),Vw.forEach(t),UGo=i(ca),Z=n(ca,"UL",{});var ee=s(Z);Eb=n(ee,"LI",{});var MSe=s(Eb);Mpe=n(MSe,"STRONG",{});var H2t=s(Mpe);JGo=r(H2t,"albert"),H2t.forEach(t),YGo=r(MSe," \u2014 "),zV=n(MSe,"A",{href:!0});var U2t=s(zV);KGo=r(U2t,"AlbertForMultipleChoice"),U2t.forEach(t),ZGo=r(MSe," (ALBERT model)"),MSe.forEach(t),eOo=i(ee),Cb=n(ee,"LI",{});var ESe=s(Cb);Epe=n(ESe,"STRONG",{});var J2t=s(Epe);oOo=r(J2t,"bert"),J2t.forEach(t),rOo=r(ESe," \u2014 "),QV=n(ESe,"A",{href:!0});var Y2t=s(QV);tOo=r(Y2t,"BertForMultipleChoice"),Y2t.forEach(t),aOo=r(ESe," (BERT model)"),ESe.forEach(t),nOo=i(ee),wb=n(ee,"LI",{});var CSe=s(wb);Cpe=n(CSe,"STRONG",{});var K2t=s(Cpe);sOo=r(K2t,"big_bird"),K2t.forEach(t),lOo=r(CSe," \u2014 "),WV=n(CSe,"A",{href:!0});var Z2t=s(WV);iOo=r(Z2t,"BigBirdForMultipleChoice"),Z2t.forEach(t),dOo=r(CSe," (BigBird model)"),CSe.forEach(t),cOo=i(ee),Ab=n(ee,"LI",{});var wSe=s(Ab);wpe=n(wSe,"STRONG",{});var ebt=s(wpe);fOo=r(ebt,"camembert"),ebt.forEach(t),mOo=r(wSe," \u2014 "),HV=n(wSe,"A",{href:!0});var obt=s(HV);gOo=r(obt,"CamembertForMultipleChoice"),obt.forEach(t),hOo=r(wSe," (CamemBERT model)"),wSe.forEach(t),pOo=i(ee),Lb=n(ee,"LI",{});var ASe=s(Lb);Ape=n(ASe,"STRONG",{});var rbt=s(Ape);_Oo=r(rbt,"canine"),rbt.forEach(t),uOo=r(ASe," \u2014 "),UV=n(ASe,"A",{href:!0});var tbt=s(UV);bOo=r(tbt,"CanineForMultipleChoice"),tbt.forEach(t),vOo=r(ASe," (CANINE model)"),ASe.forEach(t),FOo=i(ee),yb=n(ee,"LI",{});var LSe=s(yb);Lpe=n(LSe,"STRONG",{});var abt=s(Lpe);TOo=r(abt,"convbert"),abt.forEach(t),MOo=r(LSe," \u2014 "),JV=n(LSe,"A",{href:!0});var nbt=s(JV);EOo=r(nbt,"ConvBertForMultipleChoice"),nbt.forEach(t),COo=r(LSe," (ConvBERT model)"),LSe.forEach(t),wOo=i(ee),xb=n(ee,"LI",{});var ySe=s(xb);ype=n(ySe,"STRONG",{});var sbt=s(ype);AOo=r(sbt,"data2vec-text"),sbt.forEach(t),LOo=r(ySe," \u2014 "),YV=n(ySe,"A",{href:!0});var lbt=s(YV);yOo=r(lbt,"Data2VecTextForMultipleChoice"),lbt.forEach(t),xOo=r(ySe," (Data2VecText model)"),ySe.forEach(t),$Oo=i(ee),$b=n(ee,"LI",{});var xSe=s($b);xpe=n(xSe,"STRONG",{});var ibt=s(xpe);kOo=r(ibt,"deberta-v2"),ibt.forEach(t),SOo=r(xSe," \u2014 "),KV=n(xSe,"A",{href:!0});var dbt=s(KV);ROo=r(dbt,"DebertaV2ForMultipleChoice"),dbt.forEach(t),POo=r(xSe," (DeBERTa-v2 model)"),xSe.forEach(t),BOo=i(ee),kb=n(ee,"LI",{});var $Se=s(kb);$pe=n($Se,"STRONG",{});var cbt=s($pe);IOo=r(cbt,"distilbert"),cbt.forEach(t),NOo=r($Se," \u2014 "),ZV=n($Se,"A",{href:!0});var fbt=s(ZV);qOo=r(fbt,"DistilBertForMultipleChoice"),fbt.forEach(t),jOo=r($Se," (DistilBERT model)"),$Se.forEach(t),DOo=i(ee),Sb=n(ee,"LI",{});var kSe=s(Sb);kpe=n(kSe,"STRONG",{});var mbt=s(kpe);GOo=r(mbt,"electra"),mbt.forEach(t),OOo=r(kSe," \u2014 "),eX=n(kSe,"A",{href:!0});var gbt=s(eX);VOo=r(gbt,"ElectraForMultipleChoice"),gbt.forEach(t),XOo=r(kSe," (ELECTRA model)"),kSe.forEach(t),zOo=i(ee),Rb=n(ee,"LI",{});var SSe=s(Rb);Spe=n(SSe,"STRONG",{});var hbt=s(Spe);QOo=r(hbt,"flaubert"),hbt.forEach(t),WOo=r(SSe," \u2014 "),oX=n(SSe,"A",{href:!0});var pbt=s(oX);HOo=r(pbt,"FlaubertForMultipleChoice"),pbt.forEach(t),UOo=r(SSe," (FlauBERT model)"),SSe.forEach(t),JOo=i(ee),Pb=n(ee,"LI",{});var RSe=s(Pb);Rpe=n(RSe,"STRONG",{});var _bt=s(Rpe);YOo=r(_bt,"fnet"),_bt.forEach(t),KOo=r(RSe," \u2014 "),rX=n(RSe,"A",{href:!0});var ubt=s(rX);ZOo=r(ubt,"FNetForMultipleChoice"),ubt.forEach(t),eVo=r(RSe," (FNet model)"),RSe.forEach(t),oVo=i(ee),Bb=n(ee,"LI",{});var PSe=s(Bb);Ppe=n(PSe,"STRONG",{});var bbt=s(Ppe);rVo=r(bbt,"funnel"),bbt.forEach(t),tVo=r(PSe," \u2014 "),tX=n(PSe,"A",{href:!0});var vbt=s(tX);aVo=r(vbt,"FunnelForMultipleChoice"),vbt.forEach(t),nVo=r(PSe," (Funnel Transformer model)"),PSe.forEach(t),sVo=i(ee),Ib=n(ee,"LI",{});var BSe=s(Ib);Bpe=n(BSe,"STRONG",{});var Fbt=s(Bpe);lVo=r(Fbt,"ibert"),Fbt.forEach(t),iVo=r(BSe," \u2014 "),aX=n(BSe,"A",{href:!0});var Tbt=s(aX);dVo=r(Tbt,"IBertForMultipleChoice"),Tbt.forEach(t),cVo=r(BSe," (I-BERT model)"),BSe.forEach(t),fVo=i(ee),Nb=n(ee,"LI",{});var ISe=s(Nb);Ipe=n(ISe,"STRONG",{});var Mbt=s(Ipe);mVo=r(Mbt,"longformer"),Mbt.forEach(t),gVo=r(ISe," \u2014 "),nX=n(ISe,"A",{href:!0});var Ebt=s(nX);hVo=r(Ebt,"LongformerForMultipleChoice"),Ebt.forEach(t),pVo=r(ISe," (Longformer model)"),ISe.forEach(t),_Vo=i(ee),qb=n(ee,"LI",{});var NSe=s(qb);Npe=n(NSe,"STRONG",{});var Cbt=s(Npe);uVo=r(Cbt,"megatron-bert"),Cbt.forEach(t),bVo=r(NSe," \u2014 "),sX=n(NSe,"A",{href:!0});var wbt=s(sX);vVo=r(wbt,"MegatronBertForMultipleChoice"),wbt.forEach(t),FVo=r(NSe," (Megatron-BERT model)"),NSe.forEach(t),TVo=i(ee),jb=n(ee,"LI",{});var qSe=s(jb);qpe=n(qSe,"STRONG",{});var Abt=s(qpe);MVo=r(Abt,"mobilebert"),Abt.forEach(t),EVo=r(qSe," \u2014 "),lX=n(qSe,"A",{href:!0});var Lbt=s(lX);CVo=r(Lbt,"MobileBertForMultipleChoice"),Lbt.forEach(t),wVo=r(qSe," (MobileBERT model)"),qSe.forEach(t),AVo=i(ee),Db=n(ee,"LI",{});var jSe=s(Db);jpe=n(jSe,"STRONG",{});var ybt=s(jpe);LVo=r(ybt,"mpnet"),ybt.forEach(t),yVo=r(jSe," \u2014 "),iX=n(jSe,"A",{href:!0});var xbt=s(iX);xVo=r(xbt,"MPNetForMultipleChoice"),xbt.forEach(t),$Vo=r(jSe," (MPNet model)"),jSe.forEach(t),kVo=i(ee),Gb=n(ee,"LI",{});var DSe=s(Gb);Dpe=n(DSe,"STRONG",{});var $bt=s(Dpe);SVo=r($bt,"nystromformer"),$bt.forEach(t),RVo=r(DSe," \u2014 "),dX=n(DSe,"A",{href:!0});var kbt=s(dX);PVo=r(kbt,"NystromformerForMultipleChoice"),kbt.forEach(t),BVo=r(DSe," (Nystr\xF6mformer model)"),DSe.forEach(t),IVo=i(ee),Ob=n(ee,"LI",{});var GSe=s(Ob);Gpe=n(GSe,"STRONG",{});var Sbt=s(Gpe);NVo=r(Sbt,"qdqbert"),Sbt.forEach(t),qVo=r(GSe," \u2014 "),cX=n(GSe,"A",{href:!0});var Rbt=s(cX);jVo=r(Rbt,"QDQBertForMultipleChoice"),Rbt.forEach(t),DVo=r(GSe," (QDQBert model)"),GSe.forEach(t),GVo=i(ee),Vb=n(ee,"LI",{});var OSe=s(Vb);Ope=n(OSe,"STRONG",{});var Pbt=s(Ope);OVo=r(Pbt,"rembert"),Pbt.forEach(t),VVo=r(OSe," \u2014 "),fX=n(OSe,"A",{href:!0});var Bbt=s(fX);XVo=r(Bbt,"RemBertForMultipleChoice"),Bbt.forEach(t),zVo=r(OSe," (RemBERT model)"),OSe.forEach(t),QVo=i(ee),Xb=n(ee,"LI",{});var VSe=s(Xb);Vpe=n(VSe,"STRONG",{});var Ibt=s(Vpe);WVo=r(Ibt,"roberta"),Ibt.forEach(t),HVo=r(VSe," \u2014 "),mX=n(VSe,"A",{href:!0});var Nbt=s(mX);UVo=r(Nbt,"RobertaForMultipleChoice"),Nbt.forEach(t),JVo=r(VSe," (RoBERTa model)"),VSe.forEach(t),YVo=i(ee),zb=n(ee,"LI",{});var XSe=s(zb);Xpe=n(XSe,"STRONG",{});var qbt=s(Xpe);KVo=r(qbt,"roformer"),qbt.forEach(t),ZVo=r(XSe," \u2014 "),gX=n(XSe,"A",{href:!0});var jbt=s(gX);eXo=r(jbt,"RoFormerForMultipleChoice"),jbt.forEach(t),oXo=r(XSe," (RoFormer model)"),XSe.forEach(t),rXo=i(ee),Qb=n(ee,"LI",{});var zSe=s(Qb);zpe=n(zSe,"STRONG",{});var Dbt=s(zpe);tXo=r(Dbt,"squeezebert"),Dbt.forEach(t),aXo=r(zSe," \u2014 "),hX=n(zSe,"A",{href:!0});var Gbt=s(hX);nXo=r(Gbt,"SqueezeBertForMultipleChoice"),Gbt.forEach(t),sXo=r(zSe," (SqueezeBERT model)"),zSe.forEach(t),lXo=i(ee),Wb=n(ee,"LI",{});var QSe=s(Wb);Qpe=n(QSe,"STRONG",{});var Obt=s(Qpe);iXo=r(Obt,"xlm"),Obt.forEach(t),dXo=r(QSe," \u2014 "),pX=n(QSe,"A",{href:!0});var Vbt=s(pX);cXo=r(Vbt,"XLMForMultipleChoice"),Vbt.forEach(t),fXo=r(QSe," (XLM model)"),QSe.forEach(t),mXo=i(ee),Hb=n(ee,"LI",{});var WSe=s(Hb);Wpe=n(WSe,"STRONG",{});var Xbt=s(Wpe);gXo=r(Xbt,"xlm-roberta"),Xbt.forEach(t),hXo=r(WSe," \u2014 "),_X=n(WSe,"A",{href:!0});var zbt=s(_X);pXo=r(zbt,"XLMRobertaForMultipleChoice"),zbt.forEach(t),_Xo=r(WSe," (XLM-RoBERTa model)"),WSe.forEach(t),uXo=i(ee),Ub=n(ee,"LI",{});var HSe=s(Ub);Hpe=n(HSe,"STRONG",{});var Qbt=s(Hpe);bXo=r(Qbt,"xlm-roberta-xl"),Qbt.forEach(t),vXo=r(HSe," \u2014 "),uX=n(HSe,"A",{href:!0});var Wbt=s(uX);FXo=r(Wbt,"XLMRobertaXLForMultipleChoice"),Wbt.forEach(t),TXo=r(HSe," (XLM-RoBERTa-XL model)"),HSe.forEach(t),MXo=i(ee),Jb=n(ee,"LI",{});var USe=s(Jb);Upe=n(USe,"STRONG",{});var Hbt=s(Upe);EXo=r(Hbt,"xlnet"),Hbt.forEach(t),CXo=r(USe," \u2014 "),bX=n(USe,"A",{href:!0});var Ubt=s(bX);wXo=r(Ubt,"XLNetForMultipleChoice"),Ubt.forEach(t),AXo=r(USe," (XLNet model)"),USe.forEach(t),LXo=i(ee),Yb=n(ee,"LI",{});var JSe=s(Yb);Jpe=n(JSe,"STRONG",{});var Jbt=s(Jpe);yXo=r(Jbt,"yoso"),Jbt.forEach(t),xXo=r(JSe," \u2014 "),vX=n(JSe,"A",{href:!0});var Ybt=s(vX);$Xo=r(Ybt,"YosoForMultipleChoice"),Ybt.forEach(t),kXo=r(JSe," (YOSO model)"),JSe.forEach(t),ee.forEach(t),SXo=i(ca),Kb=n(ca,"P",{});var YSe=s(Kb);RXo=r(YSe,"The model is set in evaluation mode by default using "),Ype=n(YSe,"CODE",{});var Kbt=s(Ype);PXo=r(Kbt,"model.eval()"),Kbt.forEach(t),BXo=r(YSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kpe=n(YSe,"CODE",{});var Zbt=s(Kpe);IXo=r(Zbt,"model.train()"),Zbt.forEach(t),YSe.forEach(t),NXo=i(ca),T(Zb.$$.fragment,ca),ca.forEach(t),rl.forEach(t),iOe=i(f),rd=n(f,"H2",{class:!0});var hXe=s(rd);ev=n(hXe,"A",{id:!0,class:!0,href:!0});var evt=s(ev);Zpe=n(evt,"SPAN",{});var ovt=s(Zpe);T(BL.$$.fragment,ovt),ovt.forEach(t),evt.forEach(t),qXo=i(hXe),e_e=n(hXe,"SPAN",{});var rvt=s(e_e);jXo=r(rvt,"AutoModelForNextSentencePrediction"),rvt.forEach(t),hXe.forEach(t),dOe=i(f),Io=n(f,"DIV",{class:!0});var tl=s(Io);T(IL.$$.fragment,tl),DXo=i(tl),td=n(tl,"P",{});var koe=s(td);GXo=r(koe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),FX=n(koe,"A",{href:!0});var tvt=s(FX);OXo=r(tvt,"from_pretrained()"),tvt.forEach(t),VXo=r(koe," class method or the "),TX=n(koe,"A",{href:!0});var avt=s(TX);XXo=r(avt,"from_config()"),avt.forEach(t),zXo=r(koe,` class
method.`),koe.forEach(t),QXo=i(tl),NL=n(tl,"P",{});var pXe=s(NL);WXo=r(pXe,"This class cannot be instantiated directly using "),o_e=n(pXe,"CODE",{});var nvt=s(o_e);HXo=r(nvt,"__init__()"),nvt.forEach(t),UXo=r(pXe," (throws an error)."),pXe.forEach(t),JXo=i(tl),mt=n(tl,"DIV",{class:!0});var Xw=s(mt);T(qL.$$.fragment,Xw),YXo=i(Xw),r_e=n(Xw,"P",{});var svt=s(r_e);KXo=r(svt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),svt.forEach(t),ZXo=i(Xw),ad=n(Xw,"P",{});var Soe=s(ad);ezo=r(Soe,`Note:
Loading a model from its configuration file does `),t_e=n(Soe,"STRONG",{});var lvt=s(t_e);ozo=r(lvt,"not"),lvt.forEach(t),rzo=r(Soe,` load the model weights. It only affects the
model\u2019s configuration. Use `),MX=n(Soe,"A",{href:!0});var ivt=s(MX);tzo=r(ivt,"from_pretrained()"),ivt.forEach(t),azo=r(Soe," to load the model weights."),Soe.forEach(t),nzo=i(Xw),T(ov.$$.fragment,Xw),Xw.forEach(t),szo=i(tl),to=n(tl,"DIV",{class:!0});var fa=s(to);T(jL.$$.fragment,fa),lzo=i(fa),a_e=n(fa,"P",{});var dvt=s(a_e);izo=r(dvt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),dvt.forEach(t),dzo=i(fa),ja=n(fa,"P",{});var zw=s(ja);czo=r(zw,"The model class to instantiate is selected based on the "),n_e=n(zw,"CODE",{});var cvt=s(n_e);fzo=r(cvt,"model_type"),cvt.forEach(t),mzo=r(zw,` property of the config object (either
passed as an argument or loaded from `),s_e=n(zw,"CODE",{});var fvt=s(s_e);gzo=r(fvt,"pretrained_model_name_or_path"),fvt.forEach(t),hzo=r(zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l_e=n(zw,"CODE",{});var mvt=s(l_e);pzo=r(mvt,"pretrained_model_name_or_path"),mvt.forEach(t),_zo=r(zw,":"),zw.forEach(t),uzo=i(fa),Zr=n(fa,"UL",{});var al=s(Zr);rv=n(al,"LI",{});var KSe=s(rv);i_e=n(KSe,"STRONG",{});var gvt=s(i_e);bzo=r(gvt,"bert"),gvt.forEach(t),vzo=r(KSe," \u2014 "),EX=n(KSe,"A",{href:!0});var hvt=s(EX);Fzo=r(hvt,"BertForNextSentencePrediction"),hvt.forEach(t),Tzo=r(KSe," (BERT model)"),KSe.forEach(t),Mzo=i(al),tv=n(al,"LI",{});var ZSe=s(tv);d_e=n(ZSe,"STRONG",{});var pvt=s(d_e);Ezo=r(pvt,"fnet"),pvt.forEach(t),Czo=r(ZSe," \u2014 "),CX=n(ZSe,"A",{href:!0});var _vt=s(CX);wzo=r(_vt,"FNetForNextSentencePrediction"),_vt.forEach(t),Azo=r(ZSe," (FNet model)"),ZSe.forEach(t),Lzo=i(al),av=n(al,"LI",{});var eRe=s(av);c_e=n(eRe,"STRONG",{});var uvt=s(c_e);yzo=r(uvt,"megatron-bert"),uvt.forEach(t),xzo=r(eRe," \u2014 "),wX=n(eRe,"A",{href:!0});var bvt=s(wX);$zo=r(bvt,"MegatronBertForNextSentencePrediction"),bvt.forEach(t),kzo=r(eRe," (Megatron-BERT model)"),eRe.forEach(t),Szo=i(al),nv=n(al,"LI",{});var oRe=s(nv);f_e=n(oRe,"STRONG",{});var vvt=s(f_e);Rzo=r(vvt,"mobilebert"),vvt.forEach(t),Pzo=r(oRe," \u2014 "),AX=n(oRe,"A",{href:!0});var Fvt=s(AX);Bzo=r(Fvt,"MobileBertForNextSentencePrediction"),Fvt.forEach(t),Izo=r(oRe," (MobileBERT model)"),oRe.forEach(t),Nzo=i(al),sv=n(al,"LI",{});var rRe=s(sv);m_e=n(rRe,"STRONG",{});var Tvt=s(m_e);qzo=r(Tvt,"qdqbert"),Tvt.forEach(t),jzo=r(rRe," \u2014 "),LX=n(rRe,"A",{href:!0});var Mvt=s(LX);Dzo=r(Mvt,"QDQBertForNextSentencePrediction"),Mvt.forEach(t),Gzo=r(rRe," (QDQBert model)"),rRe.forEach(t),al.forEach(t),Ozo=i(fa),lv=n(fa,"P",{});var tRe=s(lv);Vzo=r(tRe,"The model is set in evaluation mode by default using "),g_e=n(tRe,"CODE",{});var Evt=s(g_e);Xzo=r(Evt,"model.eval()"),Evt.forEach(t),zzo=r(tRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),h_e=n(tRe,"CODE",{});var Cvt=s(h_e);Qzo=r(Cvt,"model.train()"),Cvt.forEach(t),tRe.forEach(t),Wzo=i(fa),T(iv.$$.fragment,fa),fa.forEach(t),tl.forEach(t),cOe=i(f),nd=n(f,"H2",{class:!0});var _Xe=s(nd);dv=n(_Xe,"A",{id:!0,class:!0,href:!0});var wvt=s(dv);p_e=n(wvt,"SPAN",{});var Avt=s(p_e);T(DL.$$.fragment,Avt),Avt.forEach(t),wvt.forEach(t),Hzo=i(_Xe),__e=n(_Xe,"SPAN",{});var Lvt=s(__e);Uzo=r(Lvt,"AutoModelForTokenClassification"),Lvt.forEach(t),_Xe.forEach(t),fOe=i(f),No=n(f,"DIV",{class:!0});var nl=s(No);T(GL.$$.fragment,nl),Jzo=i(nl),sd=n(nl,"P",{});var Roe=s(sd);Yzo=r(Roe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),yX=n(Roe,"A",{href:!0});var yvt=s(yX);Kzo=r(yvt,"from_pretrained()"),yvt.forEach(t),Zzo=r(Roe," class method or the "),xX=n(Roe,"A",{href:!0});var xvt=s(xX);eQo=r(xvt,"from_config()"),xvt.forEach(t),oQo=r(Roe,` class
method.`),Roe.forEach(t),rQo=i(nl),OL=n(nl,"P",{});var uXe=s(OL);tQo=r(uXe,"This class cannot be instantiated directly using "),u_e=n(uXe,"CODE",{});var $vt=s(u_e);aQo=r($vt,"__init__()"),$vt.forEach(t),nQo=r(uXe," (throws an error)."),uXe.forEach(t),sQo=i(nl),gt=n(nl,"DIV",{class:!0});var Qw=s(gt);T(VL.$$.fragment,Qw),lQo=i(Qw),b_e=n(Qw,"P",{});var kvt=s(b_e);iQo=r(kvt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),kvt.forEach(t),dQo=i(Qw),ld=n(Qw,"P",{});var Poe=s(ld);cQo=r(Poe,`Note:
Loading a model from its configuration file does `),v_e=n(Poe,"STRONG",{});var Svt=s(v_e);fQo=r(Svt,"not"),Svt.forEach(t),mQo=r(Poe,` load the model weights. It only affects the
model\u2019s configuration. Use `),$X=n(Poe,"A",{href:!0});var Rvt=s($X);gQo=r(Rvt,"from_pretrained()"),Rvt.forEach(t),hQo=r(Poe," to load the model weights."),Poe.forEach(t),pQo=i(Qw),T(cv.$$.fragment,Qw),Qw.forEach(t),_Qo=i(nl),ao=n(nl,"DIV",{class:!0});var ma=s(ao);T(XL.$$.fragment,ma),uQo=i(ma),F_e=n(ma,"P",{});var Pvt=s(F_e);bQo=r(Pvt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Pvt.forEach(t),vQo=i(ma),Da=n(ma,"P",{});var Ww=s(Da);FQo=r(Ww,"The model class to instantiate is selected based on the "),T_e=n(Ww,"CODE",{});var Bvt=s(T_e);TQo=r(Bvt,"model_type"),Bvt.forEach(t),MQo=r(Ww,` property of the config object (either
passed as an argument or loaded from `),M_e=n(Ww,"CODE",{});var Ivt=s(M_e);EQo=r(Ivt,"pretrained_model_name_or_path"),Ivt.forEach(t),CQo=r(Ww,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E_e=n(Ww,"CODE",{});var Nvt=s(E_e);wQo=r(Nvt,"pretrained_model_name_or_path"),Nvt.forEach(t),AQo=r(Ww,":"),Ww.forEach(t),LQo=i(ma),U=n(ma,"UL",{});var J=s(U);fv=n(J,"LI",{});var aRe=s(fv);C_e=n(aRe,"STRONG",{});var qvt=s(C_e);yQo=r(qvt,"albert"),qvt.forEach(t),xQo=r(aRe," \u2014 "),kX=n(aRe,"A",{href:!0});var jvt=s(kX);$Qo=r(jvt,"AlbertForTokenClassification"),jvt.forEach(t),kQo=r(aRe," (ALBERT model)"),aRe.forEach(t),SQo=i(J),mv=n(J,"LI",{});var nRe=s(mv);w_e=n(nRe,"STRONG",{});var Dvt=s(w_e);RQo=r(Dvt,"bert"),Dvt.forEach(t),PQo=r(nRe," \u2014 "),SX=n(nRe,"A",{href:!0});var Gvt=s(SX);BQo=r(Gvt,"BertForTokenClassification"),Gvt.forEach(t),IQo=r(nRe," (BERT model)"),nRe.forEach(t),NQo=i(J),gv=n(J,"LI",{});var sRe=s(gv);A_e=n(sRe,"STRONG",{});var Ovt=s(A_e);qQo=r(Ovt,"big_bird"),Ovt.forEach(t),jQo=r(sRe," \u2014 "),RX=n(sRe,"A",{href:!0});var Vvt=s(RX);DQo=r(Vvt,"BigBirdForTokenClassification"),Vvt.forEach(t),GQo=r(sRe," (BigBird model)"),sRe.forEach(t),OQo=i(J),hv=n(J,"LI",{});var lRe=s(hv);L_e=n(lRe,"STRONG",{});var Xvt=s(L_e);VQo=r(Xvt,"bloom"),Xvt.forEach(t),XQo=r(lRe," \u2014 "),PX=n(lRe,"A",{href:!0});var zvt=s(PX);zQo=r(zvt,"BloomForTokenClassification"),zvt.forEach(t),QQo=r(lRe," (BLOOM model)"),lRe.forEach(t),WQo=i(J),pv=n(J,"LI",{});var iRe=s(pv);y_e=n(iRe,"STRONG",{});var Qvt=s(y_e);HQo=r(Qvt,"camembert"),Qvt.forEach(t),UQo=r(iRe," \u2014 "),BX=n(iRe,"A",{href:!0});var Wvt=s(BX);JQo=r(Wvt,"CamembertForTokenClassification"),Wvt.forEach(t),YQo=r(iRe," (CamemBERT model)"),iRe.forEach(t),KQo=i(J),_v=n(J,"LI",{});var dRe=s(_v);x_e=n(dRe,"STRONG",{});var Hvt=s(x_e);ZQo=r(Hvt,"canine"),Hvt.forEach(t),eWo=r(dRe," \u2014 "),IX=n(dRe,"A",{href:!0});var Uvt=s(IX);oWo=r(Uvt,"CanineForTokenClassification"),Uvt.forEach(t),rWo=r(dRe," (CANINE model)"),dRe.forEach(t),tWo=i(J),uv=n(J,"LI",{});var cRe=s(uv);$_e=n(cRe,"STRONG",{});var Jvt=s($_e);aWo=r(Jvt,"convbert"),Jvt.forEach(t),nWo=r(cRe," \u2014 "),NX=n(cRe,"A",{href:!0});var Yvt=s(NX);sWo=r(Yvt,"ConvBertForTokenClassification"),Yvt.forEach(t),lWo=r(cRe," (ConvBERT model)"),cRe.forEach(t),iWo=i(J),bv=n(J,"LI",{});var fRe=s(bv);k_e=n(fRe,"STRONG",{});var Kvt=s(k_e);dWo=r(Kvt,"data2vec-text"),Kvt.forEach(t),cWo=r(fRe," \u2014 "),qX=n(fRe,"A",{href:!0});var Zvt=s(qX);fWo=r(Zvt,"Data2VecTextForTokenClassification"),Zvt.forEach(t),mWo=r(fRe," (Data2VecText model)"),fRe.forEach(t),gWo=i(J),vv=n(J,"LI",{});var mRe=s(vv);S_e=n(mRe,"STRONG",{});var eFt=s(S_e);hWo=r(eFt,"deberta"),eFt.forEach(t),pWo=r(mRe," \u2014 "),jX=n(mRe,"A",{href:!0});var oFt=s(jX);_Wo=r(oFt,"DebertaForTokenClassification"),oFt.forEach(t),uWo=r(mRe," (DeBERTa model)"),mRe.forEach(t),bWo=i(J),Fv=n(J,"LI",{});var gRe=s(Fv);R_e=n(gRe,"STRONG",{});var rFt=s(R_e);vWo=r(rFt,"deberta-v2"),rFt.forEach(t),FWo=r(gRe," \u2014 "),DX=n(gRe,"A",{href:!0});var tFt=s(DX);TWo=r(tFt,"DebertaV2ForTokenClassification"),tFt.forEach(t),MWo=r(gRe," (DeBERTa-v2 model)"),gRe.forEach(t),EWo=i(J),Tv=n(J,"LI",{});var hRe=s(Tv);P_e=n(hRe,"STRONG",{});var aFt=s(P_e);CWo=r(aFt,"distilbert"),aFt.forEach(t),wWo=r(hRe," \u2014 "),GX=n(hRe,"A",{href:!0});var nFt=s(GX);AWo=r(nFt,"DistilBertForTokenClassification"),nFt.forEach(t),LWo=r(hRe," (DistilBERT model)"),hRe.forEach(t),yWo=i(J),Mv=n(J,"LI",{});var pRe=s(Mv);B_e=n(pRe,"STRONG",{});var sFt=s(B_e);xWo=r(sFt,"electra"),sFt.forEach(t),$Wo=r(pRe," \u2014 "),OX=n(pRe,"A",{href:!0});var lFt=s(OX);kWo=r(lFt,"ElectraForTokenClassification"),lFt.forEach(t),SWo=r(pRe," (ELECTRA model)"),pRe.forEach(t),RWo=i(J),Ev=n(J,"LI",{});var _Re=s(Ev);I_e=n(_Re,"STRONG",{});var iFt=s(I_e);PWo=r(iFt,"flaubert"),iFt.forEach(t),BWo=r(_Re," \u2014 "),VX=n(_Re,"A",{href:!0});var dFt=s(VX);IWo=r(dFt,"FlaubertForTokenClassification"),dFt.forEach(t),NWo=r(_Re," (FlauBERT model)"),_Re.forEach(t),qWo=i(J),Cv=n(J,"LI",{});var uRe=s(Cv);N_e=n(uRe,"STRONG",{});var cFt=s(N_e);jWo=r(cFt,"fnet"),cFt.forEach(t),DWo=r(uRe," \u2014 "),XX=n(uRe,"A",{href:!0});var fFt=s(XX);GWo=r(fFt,"FNetForTokenClassification"),fFt.forEach(t),OWo=r(uRe," (FNet model)"),uRe.forEach(t),VWo=i(J),wv=n(J,"LI",{});var bRe=s(wv);q_e=n(bRe,"STRONG",{});var mFt=s(q_e);XWo=r(mFt,"funnel"),mFt.forEach(t),zWo=r(bRe," \u2014 "),zX=n(bRe,"A",{href:!0});var gFt=s(zX);QWo=r(gFt,"FunnelForTokenClassification"),gFt.forEach(t),WWo=r(bRe," (Funnel Transformer model)"),bRe.forEach(t),HWo=i(J),Av=n(J,"LI",{});var vRe=s(Av);j_e=n(vRe,"STRONG",{});var hFt=s(j_e);UWo=r(hFt,"gpt2"),hFt.forEach(t),JWo=r(vRe," \u2014 "),QX=n(vRe,"A",{href:!0});var pFt=s(QX);YWo=r(pFt,"GPT2ForTokenClassification"),pFt.forEach(t),KWo=r(vRe," (OpenAI GPT-2 model)"),vRe.forEach(t),ZWo=i(J),Lv=n(J,"LI",{});var FRe=s(Lv);D_e=n(FRe,"STRONG",{});var _Ft=s(D_e);eHo=r(_Ft,"ibert"),_Ft.forEach(t),oHo=r(FRe," \u2014 "),WX=n(FRe,"A",{href:!0});var uFt=s(WX);rHo=r(uFt,"IBertForTokenClassification"),uFt.forEach(t),tHo=r(FRe," (I-BERT model)"),FRe.forEach(t),aHo=i(J),yv=n(J,"LI",{});var TRe=s(yv);G_e=n(TRe,"STRONG",{});var bFt=s(G_e);nHo=r(bFt,"layoutlm"),bFt.forEach(t),sHo=r(TRe," \u2014 "),HX=n(TRe,"A",{href:!0});var vFt=s(HX);lHo=r(vFt,"LayoutLMForTokenClassification"),vFt.forEach(t),iHo=r(TRe," (LayoutLM model)"),TRe.forEach(t),dHo=i(J),xv=n(J,"LI",{});var MRe=s(xv);O_e=n(MRe,"STRONG",{});var FFt=s(O_e);cHo=r(FFt,"layoutlmv2"),FFt.forEach(t),fHo=r(MRe," \u2014 "),UX=n(MRe,"A",{href:!0});var TFt=s(UX);mHo=r(TFt,"LayoutLMv2ForTokenClassification"),TFt.forEach(t),gHo=r(MRe," (LayoutLMv2 model)"),MRe.forEach(t),hHo=i(J),$v=n(J,"LI",{});var ERe=s($v);V_e=n(ERe,"STRONG",{});var MFt=s(V_e);pHo=r(MFt,"layoutlmv3"),MFt.forEach(t),_Ho=r(ERe," \u2014 "),JX=n(ERe,"A",{href:!0});var EFt=s(JX);uHo=r(EFt,"LayoutLMv3ForTokenClassification"),EFt.forEach(t),bHo=r(ERe," (LayoutLMv3 model)"),ERe.forEach(t),vHo=i(J),kv=n(J,"LI",{});var CRe=s(kv);X_e=n(CRe,"STRONG",{});var CFt=s(X_e);FHo=r(CFt,"longformer"),CFt.forEach(t),THo=r(CRe," \u2014 "),YX=n(CRe,"A",{href:!0});var wFt=s(YX);MHo=r(wFt,"LongformerForTokenClassification"),wFt.forEach(t),EHo=r(CRe," (Longformer model)"),CRe.forEach(t),CHo=i(J),Sv=n(J,"LI",{});var wRe=s(Sv);z_e=n(wRe,"STRONG",{});var AFt=s(z_e);wHo=r(AFt,"megatron-bert"),AFt.forEach(t),AHo=r(wRe," \u2014 "),KX=n(wRe,"A",{href:!0});var LFt=s(KX);LHo=r(LFt,"MegatronBertForTokenClassification"),LFt.forEach(t),yHo=r(wRe," (Megatron-BERT model)"),wRe.forEach(t),xHo=i(J),Rv=n(J,"LI",{});var ARe=s(Rv);Q_e=n(ARe,"STRONG",{});var yFt=s(Q_e);$Ho=r(yFt,"mobilebert"),yFt.forEach(t),kHo=r(ARe," \u2014 "),ZX=n(ARe,"A",{href:!0});var xFt=s(ZX);SHo=r(xFt,"MobileBertForTokenClassification"),xFt.forEach(t),RHo=r(ARe," (MobileBERT model)"),ARe.forEach(t),PHo=i(J),Pv=n(J,"LI",{});var LRe=s(Pv);W_e=n(LRe,"STRONG",{});var $Ft=s(W_e);BHo=r($Ft,"mpnet"),$Ft.forEach(t),IHo=r(LRe," \u2014 "),ez=n(LRe,"A",{href:!0});var kFt=s(ez);NHo=r(kFt,"MPNetForTokenClassification"),kFt.forEach(t),qHo=r(LRe," (MPNet model)"),LRe.forEach(t),jHo=i(J),Bv=n(J,"LI",{});var yRe=s(Bv);H_e=n(yRe,"STRONG",{});var SFt=s(H_e);DHo=r(SFt,"nystromformer"),SFt.forEach(t),GHo=r(yRe," \u2014 "),oz=n(yRe,"A",{href:!0});var RFt=s(oz);OHo=r(RFt,"NystromformerForTokenClassification"),RFt.forEach(t),VHo=r(yRe," (Nystr\xF6mformer model)"),yRe.forEach(t),XHo=i(J),Iv=n(J,"LI",{});var xRe=s(Iv);U_e=n(xRe,"STRONG",{});var PFt=s(U_e);zHo=r(PFt,"qdqbert"),PFt.forEach(t),QHo=r(xRe," \u2014 "),rz=n(xRe,"A",{href:!0});var BFt=s(rz);WHo=r(BFt,"QDQBertForTokenClassification"),BFt.forEach(t),HHo=r(xRe," (QDQBert model)"),xRe.forEach(t),UHo=i(J),Nv=n(J,"LI",{});var $Re=s(Nv);J_e=n($Re,"STRONG",{});var IFt=s(J_e);JHo=r(IFt,"rembert"),IFt.forEach(t),YHo=r($Re," \u2014 "),tz=n($Re,"A",{href:!0});var NFt=s(tz);KHo=r(NFt,"RemBertForTokenClassification"),NFt.forEach(t),ZHo=r($Re," (RemBERT model)"),$Re.forEach(t),eUo=i(J),qv=n(J,"LI",{});var kRe=s(qv);Y_e=n(kRe,"STRONG",{});var qFt=s(Y_e);oUo=r(qFt,"roberta"),qFt.forEach(t),rUo=r(kRe," \u2014 "),az=n(kRe,"A",{href:!0});var jFt=s(az);tUo=r(jFt,"RobertaForTokenClassification"),jFt.forEach(t),aUo=r(kRe," (RoBERTa model)"),kRe.forEach(t),nUo=i(J),jv=n(J,"LI",{});var SRe=s(jv);K_e=n(SRe,"STRONG",{});var DFt=s(K_e);sUo=r(DFt,"roformer"),DFt.forEach(t),lUo=r(SRe," \u2014 "),nz=n(SRe,"A",{href:!0});var GFt=s(nz);iUo=r(GFt,"RoFormerForTokenClassification"),GFt.forEach(t),dUo=r(SRe," (RoFormer model)"),SRe.forEach(t),cUo=i(J),Dv=n(J,"LI",{});var RRe=s(Dv);Z_e=n(RRe,"STRONG",{});var OFt=s(Z_e);fUo=r(OFt,"squeezebert"),OFt.forEach(t),mUo=r(RRe," \u2014 "),sz=n(RRe,"A",{href:!0});var VFt=s(sz);gUo=r(VFt,"SqueezeBertForTokenClassification"),VFt.forEach(t),hUo=r(RRe," (SqueezeBERT model)"),RRe.forEach(t),pUo=i(J),Gv=n(J,"LI",{});var PRe=s(Gv);eue=n(PRe,"STRONG",{});var XFt=s(eue);_Uo=r(XFt,"xlm"),XFt.forEach(t),uUo=r(PRe," \u2014 "),lz=n(PRe,"A",{href:!0});var zFt=s(lz);bUo=r(zFt,"XLMForTokenClassification"),zFt.forEach(t),vUo=r(PRe," (XLM model)"),PRe.forEach(t),FUo=i(J),Ov=n(J,"LI",{});var BRe=s(Ov);oue=n(BRe,"STRONG",{});var QFt=s(oue);TUo=r(QFt,"xlm-roberta"),QFt.forEach(t),MUo=r(BRe," \u2014 "),iz=n(BRe,"A",{href:!0});var WFt=s(iz);EUo=r(WFt,"XLMRobertaForTokenClassification"),WFt.forEach(t),CUo=r(BRe," (XLM-RoBERTa model)"),BRe.forEach(t),wUo=i(J),Vv=n(J,"LI",{});var IRe=s(Vv);rue=n(IRe,"STRONG",{});var HFt=s(rue);AUo=r(HFt,"xlm-roberta-xl"),HFt.forEach(t),LUo=r(IRe," \u2014 "),dz=n(IRe,"A",{href:!0});var UFt=s(dz);yUo=r(UFt,"XLMRobertaXLForTokenClassification"),UFt.forEach(t),xUo=r(IRe," (XLM-RoBERTa-XL model)"),IRe.forEach(t),$Uo=i(J),Xv=n(J,"LI",{});var NRe=s(Xv);tue=n(NRe,"STRONG",{});var JFt=s(tue);kUo=r(JFt,"xlnet"),JFt.forEach(t),SUo=r(NRe," \u2014 "),cz=n(NRe,"A",{href:!0});var YFt=s(cz);RUo=r(YFt,"XLNetForTokenClassification"),YFt.forEach(t),PUo=r(NRe," (XLNet model)"),NRe.forEach(t),BUo=i(J),zv=n(J,"LI",{});var qRe=s(zv);aue=n(qRe,"STRONG",{});var KFt=s(aue);IUo=r(KFt,"yoso"),KFt.forEach(t),NUo=r(qRe," \u2014 "),fz=n(qRe,"A",{href:!0});var ZFt=s(fz);qUo=r(ZFt,"YosoForTokenClassification"),ZFt.forEach(t),jUo=r(qRe," (YOSO model)"),qRe.forEach(t),J.forEach(t),DUo=i(ma),Qv=n(ma,"P",{});var jRe=s(Qv);GUo=r(jRe,"The model is set in evaluation mode by default using "),nue=n(jRe,"CODE",{});var eTt=s(nue);OUo=r(eTt,"model.eval()"),eTt.forEach(t),VUo=r(jRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sue=n(jRe,"CODE",{});var oTt=s(sue);XUo=r(oTt,"model.train()"),oTt.forEach(t),jRe.forEach(t),zUo=i(ma),T(Wv.$$.fragment,ma),ma.forEach(t),nl.forEach(t),mOe=i(f),id=n(f,"H2",{class:!0});var bXe=s(id);Hv=n(bXe,"A",{id:!0,class:!0,href:!0});var rTt=s(Hv);lue=n(rTt,"SPAN",{});var tTt=s(lue);T(zL.$$.fragment,tTt),tTt.forEach(t),rTt.forEach(t),QUo=i(bXe),iue=n(bXe,"SPAN",{});var aTt=s(iue);WUo=r(aTt,"AutoModelForQuestionAnswering"),aTt.forEach(t),bXe.forEach(t),gOe=i(f),qo=n(f,"DIV",{class:!0});var sl=s(qo);T(QL.$$.fragment,sl),HUo=i(sl),dd=n(sl,"P",{});var Boe=s(dd);UUo=r(Boe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),mz=n(Boe,"A",{href:!0});var nTt=s(mz);JUo=r(nTt,"from_pretrained()"),nTt.forEach(t),YUo=r(Boe," class method or the "),gz=n(Boe,"A",{href:!0});var sTt=s(gz);KUo=r(sTt,"from_config()"),sTt.forEach(t),ZUo=r(Boe,` class
method.`),Boe.forEach(t),eJo=i(sl),WL=n(sl,"P",{});var vXe=s(WL);oJo=r(vXe,"This class cannot be instantiated directly using "),due=n(vXe,"CODE",{});var lTt=s(due);rJo=r(lTt,"__init__()"),lTt.forEach(t),tJo=r(vXe," (throws an error)."),vXe.forEach(t),aJo=i(sl),ht=n(sl,"DIV",{class:!0});var Hw=s(ht);T(HL.$$.fragment,Hw),nJo=i(Hw),cue=n(Hw,"P",{});var iTt=s(cue);sJo=r(iTt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),iTt.forEach(t),lJo=i(Hw),cd=n(Hw,"P",{});var Ioe=s(cd);iJo=r(Ioe,`Note:
Loading a model from its configuration file does `),fue=n(Ioe,"STRONG",{});var dTt=s(fue);dJo=r(dTt,"not"),dTt.forEach(t),cJo=r(Ioe,` load the model weights. It only affects the
model\u2019s configuration. Use `),hz=n(Ioe,"A",{href:!0});var cTt=s(hz);fJo=r(cTt,"from_pretrained()"),cTt.forEach(t),mJo=r(Ioe," to load the model weights."),Ioe.forEach(t),gJo=i(Hw),T(Uv.$$.fragment,Hw),Hw.forEach(t),hJo=i(sl),no=n(sl,"DIV",{class:!0});var ga=s(no);T(UL.$$.fragment,ga),pJo=i(ga),mue=n(ga,"P",{});var fTt=s(mue);_Jo=r(fTt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),fTt.forEach(t),uJo=i(ga),Ga=n(ga,"P",{});var Uw=s(Ga);bJo=r(Uw,"The model class to instantiate is selected based on the "),gue=n(Uw,"CODE",{});var mTt=s(gue);vJo=r(mTt,"model_type"),mTt.forEach(t),FJo=r(Uw,` property of the config object (either
passed as an argument or loaded from `),hue=n(Uw,"CODE",{});var gTt=s(hue);TJo=r(gTt,"pretrained_model_name_or_path"),gTt.forEach(t),MJo=r(Uw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pue=n(Uw,"CODE",{});var hTt=s(pue);EJo=r(hTt,"pretrained_model_name_or_path"),hTt.forEach(t),CJo=r(Uw,":"),Uw.forEach(t),wJo=i(ga),V=n(ga,"UL",{});var X=s(V);Jv=n(X,"LI",{});var DRe=s(Jv);_ue=n(DRe,"STRONG",{});var pTt=s(_ue);AJo=r(pTt,"albert"),pTt.forEach(t),LJo=r(DRe," \u2014 "),pz=n(DRe,"A",{href:!0});var _Tt=s(pz);yJo=r(_Tt,"AlbertForQuestionAnswering"),_Tt.forEach(t),xJo=r(DRe," (ALBERT model)"),DRe.forEach(t),$Jo=i(X),Yv=n(X,"LI",{});var GRe=s(Yv);uue=n(GRe,"STRONG",{});var uTt=s(uue);kJo=r(uTt,"bart"),uTt.forEach(t),SJo=r(GRe," \u2014 "),_z=n(GRe,"A",{href:!0});var bTt=s(_z);RJo=r(bTt,"BartForQuestionAnswering"),bTt.forEach(t),PJo=r(GRe," (BART model)"),GRe.forEach(t),BJo=i(X),Kv=n(X,"LI",{});var ORe=s(Kv);bue=n(ORe,"STRONG",{});var vTt=s(bue);IJo=r(vTt,"bert"),vTt.forEach(t),NJo=r(ORe," \u2014 "),uz=n(ORe,"A",{href:!0});var FTt=s(uz);qJo=r(FTt,"BertForQuestionAnswering"),FTt.forEach(t),jJo=r(ORe," (BERT model)"),ORe.forEach(t),DJo=i(X),Zv=n(X,"LI",{});var VRe=s(Zv);vue=n(VRe,"STRONG",{});var TTt=s(vue);GJo=r(TTt,"big_bird"),TTt.forEach(t),OJo=r(VRe," \u2014 "),bz=n(VRe,"A",{href:!0});var MTt=s(bz);VJo=r(MTt,"BigBirdForQuestionAnswering"),MTt.forEach(t),XJo=r(VRe," (BigBird model)"),VRe.forEach(t),zJo=i(X),eF=n(X,"LI",{});var XRe=s(eF);Fue=n(XRe,"STRONG",{});var ETt=s(Fue);QJo=r(ETt,"bigbird_pegasus"),ETt.forEach(t),WJo=r(XRe," \u2014 "),vz=n(XRe,"A",{href:!0});var CTt=s(vz);HJo=r(CTt,"BigBirdPegasusForQuestionAnswering"),CTt.forEach(t),UJo=r(XRe," (BigBird-Pegasus model)"),XRe.forEach(t),JJo=i(X),oF=n(X,"LI",{});var zRe=s(oF);Tue=n(zRe,"STRONG",{});var wTt=s(Tue);YJo=r(wTt,"camembert"),wTt.forEach(t),KJo=r(zRe," \u2014 "),Fz=n(zRe,"A",{href:!0});var ATt=s(Fz);ZJo=r(ATt,"CamembertForQuestionAnswering"),ATt.forEach(t),eYo=r(zRe," (CamemBERT model)"),zRe.forEach(t),oYo=i(X),rF=n(X,"LI",{});var QRe=s(rF);Mue=n(QRe,"STRONG",{});var LTt=s(Mue);rYo=r(LTt,"canine"),LTt.forEach(t),tYo=r(QRe," \u2014 "),Tz=n(QRe,"A",{href:!0});var yTt=s(Tz);aYo=r(yTt,"CanineForQuestionAnswering"),yTt.forEach(t),nYo=r(QRe," (CANINE model)"),QRe.forEach(t),sYo=i(X),tF=n(X,"LI",{});var WRe=s(tF);Eue=n(WRe,"STRONG",{});var xTt=s(Eue);lYo=r(xTt,"convbert"),xTt.forEach(t),iYo=r(WRe," \u2014 "),Mz=n(WRe,"A",{href:!0});var $Tt=s(Mz);dYo=r($Tt,"ConvBertForQuestionAnswering"),$Tt.forEach(t),cYo=r(WRe," (ConvBERT model)"),WRe.forEach(t),fYo=i(X),aF=n(X,"LI",{});var HRe=s(aF);Cue=n(HRe,"STRONG",{});var kTt=s(Cue);mYo=r(kTt,"data2vec-text"),kTt.forEach(t),gYo=r(HRe," \u2014 "),Ez=n(HRe,"A",{href:!0});var STt=s(Ez);hYo=r(STt,"Data2VecTextForQuestionAnswering"),STt.forEach(t),pYo=r(HRe," (Data2VecText model)"),HRe.forEach(t),_Yo=i(X),nF=n(X,"LI",{});var URe=s(nF);wue=n(URe,"STRONG",{});var RTt=s(wue);uYo=r(RTt,"deberta"),RTt.forEach(t),bYo=r(URe," \u2014 "),Cz=n(URe,"A",{href:!0});var PTt=s(Cz);vYo=r(PTt,"DebertaForQuestionAnswering"),PTt.forEach(t),FYo=r(URe," (DeBERTa model)"),URe.forEach(t),TYo=i(X),sF=n(X,"LI",{});var JRe=s(sF);Aue=n(JRe,"STRONG",{});var BTt=s(Aue);MYo=r(BTt,"deberta-v2"),BTt.forEach(t),EYo=r(JRe," \u2014 "),wz=n(JRe,"A",{href:!0});var ITt=s(wz);CYo=r(ITt,"DebertaV2ForQuestionAnswering"),ITt.forEach(t),wYo=r(JRe," (DeBERTa-v2 model)"),JRe.forEach(t),AYo=i(X),lF=n(X,"LI",{});var YRe=s(lF);Lue=n(YRe,"STRONG",{});var NTt=s(Lue);LYo=r(NTt,"distilbert"),NTt.forEach(t),yYo=r(YRe," \u2014 "),Az=n(YRe,"A",{href:!0});var qTt=s(Az);xYo=r(qTt,"DistilBertForQuestionAnswering"),qTt.forEach(t),$Yo=r(YRe," (DistilBERT model)"),YRe.forEach(t),kYo=i(X),iF=n(X,"LI",{});var KRe=s(iF);yue=n(KRe,"STRONG",{});var jTt=s(yue);SYo=r(jTt,"electra"),jTt.forEach(t),RYo=r(KRe," \u2014 "),Lz=n(KRe,"A",{href:!0});var DTt=s(Lz);PYo=r(DTt,"ElectraForQuestionAnswering"),DTt.forEach(t),BYo=r(KRe," (ELECTRA model)"),KRe.forEach(t),IYo=i(X),dF=n(X,"LI",{});var ZRe=s(dF);xue=n(ZRe,"STRONG",{});var GTt=s(xue);NYo=r(GTt,"flaubert"),GTt.forEach(t),qYo=r(ZRe," \u2014 "),yz=n(ZRe,"A",{href:!0});var OTt=s(yz);jYo=r(OTt,"FlaubertForQuestionAnsweringSimple"),OTt.forEach(t),DYo=r(ZRe," (FlauBERT model)"),ZRe.forEach(t),GYo=i(X),cF=n(X,"LI",{});var ePe=s(cF);$ue=n(ePe,"STRONG",{});var VTt=s($ue);OYo=r(VTt,"fnet"),VTt.forEach(t),VYo=r(ePe," \u2014 "),xz=n(ePe,"A",{href:!0});var XTt=s(xz);XYo=r(XTt,"FNetForQuestionAnswering"),XTt.forEach(t),zYo=r(ePe," (FNet model)"),ePe.forEach(t),QYo=i(X),fF=n(X,"LI",{});var oPe=s(fF);kue=n(oPe,"STRONG",{});var zTt=s(kue);WYo=r(zTt,"funnel"),zTt.forEach(t),HYo=r(oPe," \u2014 "),$z=n(oPe,"A",{href:!0});var QTt=s($z);UYo=r(QTt,"FunnelForQuestionAnswering"),QTt.forEach(t),JYo=r(oPe," (Funnel Transformer model)"),oPe.forEach(t),YYo=i(X),mF=n(X,"LI",{});var rPe=s(mF);Sue=n(rPe,"STRONG",{});var WTt=s(Sue);KYo=r(WTt,"gptj"),WTt.forEach(t),ZYo=r(rPe," \u2014 "),kz=n(rPe,"A",{href:!0});var HTt=s(kz);eKo=r(HTt,"GPTJForQuestionAnswering"),HTt.forEach(t),oKo=r(rPe," (GPT-J model)"),rPe.forEach(t),rKo=i(X),gF=n(X,"LI",{});var tPe=s(gF);Rue=n(tPe,"STRONG",{});var UTt=s(Rue);tKo=r(UTt,"ibert"),UTt.forEach(t),aKo=r(tPe," \u2014 "),Sz=n(tPe,"A",{href:!0});var JTt=s(Sz);nKo=r(JTt,"IBertForQuestionAnswering"),JTt.forEach(t),sKo=r(tPe," (I-BERT model)"),tPe.forEach(t),lKo=i(X),hF=n(X,"LI",{});var aPe=s(hF);Pue=n(aPe,"STRONG",{});var YTt=s(Pue);iKo=r(YTt,"layoutlmv2"),YTt.forEach(t),dKo=r(aPe," \u2014 "),Rz=n(aPe,"A",{href:!0});var KTt=s(Rz);cKo=r(KTt,"LayoutLMv2ForQuestionAnswering"),KTt.forEach(t),fKo=r(aPe," (LayoutLMv2 model)"),aPe.forEach(t),mKo=i(X),pF=n(X,"LI",{});var nPe=s(pF);Bue=n(nPe,"STRONG",{});var ZTt=s(Bue);gKo=r(ZTt,"layoutlmv3"),ZTt.forEach(t),hKo=r(nPe," \u2014 "),Pz=n(nPe,"A",{href:!0});var e8t=s(Pz);pKo=r(e8t,"LayoutLMv3ForQuestionAnswering"),e8t.forEach(t),_Ko=r(nPe," (LayoutLMv3 model)"),nPe.forEach(t),uKo=i(X),_F=n(X,"LI",{});var sPe=s(_F);Iue=n(sPe,"STRONG",{});var o8t=s(Iue);bKo=r(o8t,"led"),o8t.forEach(t),vKo=r(sPe," \u2014 "),Bz=n(sPe,"A",{href:!0});var r8t=s(Bz);FKo=r(r8t,"LEDForQuestionAnswering"),r8t.forEach(t),TKo=r(sPe," (LED model)"),sPe.forEach(t),MKo=i(X),uF=n(X,"LI",{});var lPe=s(uF);Nue=n(lPe,"STRONG",{});var t8t=s(Nue);EKo=r(t8t,"longformer"),t8t.forEach(t),CKo=r(lPe," \u2014 "),Iz=n(lPe,"A",{href:!0});var a8t=s(Iz);wKo=r(a8t,"LongformerForQuestionAnswering"),a8t.forEach(t),AKo=r(lPe," (Longformer model)"),lPe.forEach(t),LKo=i(X),bF=n(X,"LI",{});var iPe=s(bF);que=n(iPe,"STRONG",{});var n8t=s(que);yKo=r(n8t,"lxmert"),n8t.forEach(t),xKo=r(iPe," \u2014 "),Nz=n(iPe,"A",{href:!0});var s8t=s(Nz);$Ko=r(s8t,"LxmertForQuestionAnswering"),s8t.forEach(t),kKo=r(iPe," (LXMERT model)"),iPe.forEach(t),SKo=i(X),vF=n(X,"LI",{});var dPe=s(vF);jue=n(dPe,"STRONG",{});var l8t=s(jue);RKo=r(l8t,"mbart"),l8t.forEach(t),PKo=r(dPe," \u2014 "),qz=n(dPe,"A",{href:!0});var i8t=s(qz);BKo=r(i8t,"MBartForQuestionAnswering"),i8t.forEach(t),IKo=r(dPe," (mBART model)"),dPe.forEach(t),NKo=i(X),FF=n(X,"LI",{});var cPe=s(FF);Due=n(cPe,"STRONG",{});var d8t=s(Due);qKo=r(d8t,"megatron-bert"),d8t.forEach(t),jKo=r(cPe," \u2014 "),jz=n(cPe,"A",{href:!0});var c8t=s(jz);DKo=r(c8t,"MegatronBertForQuestionAnswering"),c8t.forEach(t),GKo=r(cPe," (Megatron-BERT model)"),cPe.forEach(t),OKo=i(X),TF=n(X,"LI",{});var fPe=s(TF);Gue=n(fPe,"STRONG",{});var f8t=s(Gue);VKo=r(f8t,"mobilebert"),f8t.forEach(t),XKo=r(fPe," \u2014 "),Dz=n(fPe,"A",{href:!0});var m8t=s(Dz);zKo=r(m8t,"MobileBertForQuestionAnswering"),m8t.forEach(t),QKo=r(fPe," (MobileBERT model)"),fPe.forEach(t),WKo=i(X),MF=n(X,"LI",{});var mPe=s(MF);Oue=n(mPe,"STRONG",{});var g8t=s(Oue);HKo=r(g8t,"mpnet"),g8t.forEach(t),UKo=r(mPe," \u2014 "),Gz=n(mPe,"A",{href:!0});var h8t=s(Gz);JKo=r(h8t,"MPNetForQuestionAnswering"),h8t.forEach(t),YKo=r(mPe," (MPNet model)"),mPe.forEach(t),KKo=i(X),EF=n(X,"LI",{});var gPe=s(EF);Vue=n(gPe,"STRONG",{});var p8t=s(Vue);ZKo=r(p8t,"mvp"),p8t.forEach(t),eZo=r(gPe," \u2014 "),Oz=n(gPe,"A",{href:!0});var _8t=s(Oz);oZo=r(_8t,"MvpForQuestionAnswering"),_8t.forEach(t),rZo=r(gPe," (MVP model)"),gPe.forEach(t),tZo=i(X),CF=n(X,"LI",{});var hPe=s(CF);Xue=n(hPe,"STRONG",{});var u8t=s(Xue);aZo=r(u8t,"nystromformer"),u8t.forEach(t),nZo=r(hPe," \u2014 "),Vz=n(hPe,"A",{href:!0});var b8t=s(Vz);sZo=r(b8t,"NystromformerForQuestionAnswering"),b8t.forEach(t),lZo=r(hPe," (Nystr\xF6mformer model)"),hPe.forEach(t),iZo=i(X),wF=n(X,"LI",{});var pPe=s(wF);zue=n(pPe,"STRONG",{});var v8t=s(zue);dZo=r(v8t,"qdqbert"),v8t.forEach(t),cZo=r(pPe," \u2014 "),Xz=n(pPe,"A",{href:!0});var F8t=s(Xz);fZo=r(F8t,"QDQBertForQuestionAnswering"),F8t.forEach(t),mZo=r(pPe," (QDQBert model)"),pPe.forEach(t),gZo=i(X),AF=n(X,"LI",{});var _Pe=s(AF);Que=n(_Pe,"STRONG",{});var T8t=s(Que);hZo=r(T8t,"reformer"),T8t.forEach(t),pZo=r(_Pe," \u2014 "),zz=n(_Pe,"A",{href:!0});var M8t=s(zz);_Zo=r(M8t,"ReformerForQuestionAnswering"),M8t.forEach(t),uZo=r(_Pe," (Reformer model)"),_Pe.forEach(t),bZo=i(X),LF=n(X,"LI",{});var uPe=s(LF);Wue=n(uPe,"STRONG",{});var E8t=s(Wue);vZo=r(E8t,"rembert"),E8t.forEach(t),FZo=r(uPe," \u2014 "),Qz=n(uPe,"A",{href:!0});var C8t=s(Qz);TZo=r(C8t,"RemBertForQuestionAnswering"),C8t.forEach(t),MZo=r(uPe," (RemBERT model)"),uPe.forEach(t),EZo=i(X),yF=n(X,"LI",{});var bPe=s(yF);Hue=n(bPe,"STRONG",{});var w8t=s(Hue);CZo=r(w8t,"roberta"),w8t.forEach(t),wZo=r(bPe," \u2014 "),Wz=n(bPe,"A",{href:!0});var A8t=s(Wz);AZo=r(A8t,"RobertaForQuestionAnswering"),A8t.forEach(t),LZo=r(bPe," (RoBERTa model)"),bPe.forEach(t),yZo=i(X),xF=n(X,"LI",{});var vPe=s(xF);Uue=n(vPe,"STRONG",{});var L8t=s(Uue);xZo=r(L8t,"roformer"),L8t.forEach(t),$Zo=r(vPe," \u2014 "),Hz=n(vPe,"A",{href:!0});var y8t=s(Hz);kZo=r(y8t,"RoFormerForQuestionAnswering"),y8t.forEach(t),SZo=r(vPe," (RoFormer model)"),vPe.forEach(t),RZo=i(X),$F=n(X,"LI",{});var FPe=s($F);Jue=n(FPe,"STRONG",{});var x8t=s(Jue);PZo=r(x8t,"splinter"),x8t.forEach(t),BZo=r(FPe," \u2014 "),Uz=n(FPe,"A",{href:!0});var $8t=s(Uz);IZo=r($8t,"SplinterForQuestionAnswering"),$8t.forEach(t),NZo=r(FPe," (Splinter model)"),FPe.forEach(t),qZo=i(X),kF=n(X,"LI",{});var TPe=s(kF);Yue=n(TPe,"STRONG",{});var k8t=s(Yue);jZo=r(k8t,"squeezebert"),k8t.forEach(t),DZo=r(TPe," \u2014 "),Jz=n(TPe,"A",{href:!0});var S8t=s(Jz);GZo=r(S8t,"SqueezeBertForQuestionAnswering"),S8t.forEach(t),OZo=r(TPe," (SqueezeBERT model)"),TPe.forEach(t),VZo=i(X),SF=n(X,"LI",{});var MPe=s(SF);Kue=n(MPe,"STRONG",{});var R8t=s(Kue);XZo=r(R8t,"xlm"),R8t.forEach(t),zZo=r(MPe," \u2014 "),Yz=n(MPe,"A",{href:!0});var P8t=s(Yz);QZo=r(P8t,"XLMForQuestionAnsweringSimple"),P8t.forEach(t),WZo=r(MPe," (XLM model)"),MPe.forEach(t),HZo=i(X),RF=n(X,"LI",{});var EPe=s(RF);Zue=n(EPe,"STRONG",{});var B8t=s(Zue);UZo=r(B8t,"xlm-roberta"),B8t.forEach(t),JZo=r(EPe," \u2014 "),Kz=n(EPe,"A",{href:!0});var I8t=s(Kz);YZo=r(I8t,"XLMRobertaForQuestionAnswering"),I8t.forEach(t),KZo=r(EPe," (XLM-RoBERTa model)"),EPe.forEach(t),ZZo=i(X),PF=n(X,"LI",{});var CPe=s(PF);e7e=n(CPe,"STRONG",{});var N8t=s(e7e);eer=r(N8t,"xlm-roberta-xl"),N8t.forEach(t),oer=r(CPe," \u2014 "),Zz=n(CPe,"A",{href:!0});var q8t=s(Zz);rer=r(q8t,"XLMRobertaXLForQuestionAnswering"),q8t.forEach(t),ter=r(CPe," (XLM-RoBERTa-XL model)"),CPe.forEach(t),aer=i(X),BF=n(X,"LI",{});var wPe=s(BF);o7e=n(wPe,"STRONG",{});var j8t=s(o7e);ner=r(j8t,"xlnet"),j8t.forEach(t),ser=r(wPe," \u2014 "),eQ=n(wPe,"A",{href:!0});var D8t=s(eQ);ler=r(D8t,"XLNetForQuestionAnsweringSimple"),D8t.forEach(t),ier=r(wPe," (XLNet model)"),wPe.forEach(t),der=i(X),IF=n(X,"LI",{});var APe=s(IF);r7e=n(APe,"STRONG",{});var G8t=s(r7e);cer=r(G8t,"yoso"),G8t.forEach(t),fer=r(APe," \u2014 "),oQ=n(APe,"A",{href:!0});var O8t=s(oQ);mer=r(O8t,"YosoForQuestionAnswering"),O8t.forEach(t),ger=r(APe," (YOSO model)"),APe.forEach(t),X.forEach(t),her=i(ga),NF=n(ga,"P",{});var LPe=s(NF);per=r(LPe,"The model is set in evaluation mode by default using "),t7e=n(LPe,"CODE",{});var V8t=s(t7e);_er=r(V8t,"model.eval()"),V8t.forEach(t),uer=r(LPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),a7e=n(LPe,"CODE",{});var X8t=s(a7e);ber=r(X8t,"model.train()"),X8t.forEach(t),LPe.forEach(t),ver=i(ga),T(qF.$$.fragment,ga),ga.forEach(t),sl.forEach(t),hOe=i(f),fd=n(f,"H2",{class:!0});var FXe=s(fd);jF=n(FXe,"A",{id:!0,class:!0,href:!0});var z8t=s(jF);n7e=n(z8t,"SPAN",{});var Q8t=s(n7e);T(JL.$$.fragment,Q8t),Q8t.forEach(t),z8t.forEach(t),Fer=i(FXe),s7e=n(FXe,"SPAN",{});var W8t=s(s7e);Ter=r(W8t,"AutoModelForTableQuestionAnswering"),W8t.forEach(t),FXe.forEach(t),pOe=i(f),jo=n(f,"DIV",{class:!0});var ll=s(jo);T(YL.$$.fragment,ll),Mer=i(ll),md=n(ll,"P",{});var Noe=s(md);Eer=r(Noe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),rQ=n(Noe,"A",{href:!0});var H8t=s(rQ);Cer=r(H8t,"from_pretrained()"),H8t.forEach(t),wer=r(Noe," class method or the "),tQ=n(Noe,"A",{href:!0});var U8t=s(tQ);Aer=r(U8t,"from_config()"),U8t.forEach(t),Ler=r(Noe,` class
method.`),Noe.forEach(t),yer=i(ll),KL=n(ll,"P",{});var TXe=s(KL);xer=r(TXe,"This class cannot be instantiated directly using "),l7e=n(TXe,"CODE",{});var J8t=s(l7e);$er=r(J8t,"__init__()"),J8t.forEach(t),ker=r(TXe," (throws an error)."),TXe.forEach(t),Ser=i(ll),pt=n(ll,"DIV",{class:!0});var Jw=s(pt);T(ZL.$$.fragment,Jw),Rer=i(Jw),i7e=n(Jw,"P",{});var Y8t=s(i7e);Per=r(Y8t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Y8t.forEach(t),Ber=i(Jw),gd=n(Jw,"P",{});var qoe=s(gd);Ier=r(qoe,`Note:
Loading a model from its configuration file does `),d7e=n(qoe,"STRONG",{});var K8t=s(d7e);Ner=r(K8t,"not"),K8t.forEach(t),qer=r(qoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),aQ=n(qoe,"A",{href:!0});var Z8t=s(aQ);jer=r(Z8t,"from_pretrained()"),Z8t.forEach(t),Der=r(qoe," to load the model weights."),qoe.forEach(t),Ger=i(Jw),T(DF.$$.fragment,Jw),Jw.forEach(t),Oer=i(ll),so=n(ll,"DIV",{class:!0});var ha=s(so);T(ey.$$.fragment,ha),Ver=i(ha),c7e=n(ha,"P",{});var eMt=s(c7e);Xer=r(eMt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),eMt.forEach(t),zer=i(ha),Oa=n(ha,"P",{});var Yw=s(Oa);Qer=r(Yw,"The model class to instantiate is selected based on the "),f7e=n(Yw,"CODE",{});var oMt=s(f7e);Wer=r(oMt,"model_type"),oMt.forEach(t),Her=r(Yw,` property of the config object (either
passed as an argument or loaded from `),m7e=n(Yw,"CODE",{});var rMt=s(m7e);Uer=r(rMt,"pretrained_model_name_or_path"),rMt.forEach(t),Jer=r(Yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g7e=n(Yw,"CODE",{});var tMt=s(g7e);Yer=r(tMt,"pretrained_model_name_or_path"),tMt.forEach(t),Ker=r(Yw,":"),Yw.forEach(t),Zer=i(ha),h7e=n(ha,"UL",{});var aMt=s(h7e);GF=n(aMt,"LI",{});var yPe=s(GF);p7e=n(yPe,"STRONG",{});var nMt=s(p7e);eor=r(nMt,"tapas"),nMt.forEach(t),oor=r(yPe," \u2014 "),nQ=n(yPe,"A",{href:!0});var sMt=s(nQ);ror=r(sMt,"TapasForQuestionAnswering"),sMt.forEach(t),tor=r(yPe," (TAPAS model)"),yPe.forEach(t),aMt.forEach(t),aor=i(ha),OF=n(ha,"P",{});var xPe=s(OF);nor=r(xPe,"The model is set in evaluation mode by default using "),_7e=n(xPe,"CODE",{});var lMt=s(_7e);sor=r(lMt,"model.eval()"),lMt.forEach(t),lor=r(xPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),u7e=n(xPe,"CODE",{});var iMt=s(u7e);ior=r(iMt,"model.train()"),iMt.forEach(t),xPe.forEach(t),dor=i(ha),T(VF.$$.fragment,ha),ha.forEach(t),ll.forEach(t),_Oe=i(f),hd=n(f,"H2",{class:!0});var MXe=s(hd);XF=n(MXe,"A",{id:!0,class:!0,href:!0});var dMt=s(XF);b7e=n(dMt,"SPAN",{});var cMt=s(b7e);T(oy.$$.fragment,cMt),cMt.forEach(t),dMt.forEach(t),cor=i(MXe),v7e=n(MXe,"SPAN",{});var fMt=s(v7e);mor=r(fMt,"AutoModelForImageClassification"),fMt.forEach(t),MXe.forEach(t),uOe=i(f),Do=n(f,"DIV",{class:!0});var il=s(Do);T(ry.$$.fragment,il),gor=i(il),pd=n(il,"P",{});var joe=s(pd);hor=r(joe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),sQ=n(joe,"A",{href:!0});var mMt=s(sQ);por=r(mMt,"from_pretrained()"),mMt.forEach(t),_or=r(joe," class method or the "),lQ=n(joe,"A",{href:!0});var gMt=s(lQ);uor=r(gMt,"from_config()"),gMt.forEach(t),bor=r(joe,` class
method.`),joe.forEach(t),vor=i(il),ty=n(il,"P",{});var EXe=s(ty);For=r(EXe,"This class cannot be instantiated directly using "),F7e=n(EXe,"CODE",{});var hMt=s(F7e);Tor=r(hMt,"__init__()"),hMt.forEach(t),Mor=r(EXe," (throws an error)."),EXe.forEach(t),Eor=i(il),_t=n(il,"DIV",{class:!0});var Kw=s(_t);T(ay.$$.fragment,Kw),Cor=i(Kw),T7e=n(Kw,"P",{});var pMt=s(T7e);wor=r(pMt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),pMt.forEach(t),Aor=i(Kw),_d=n(Kw,"P",{});var Doe=s(_d);Lor=r(Doe,`Note:
Loading a model from its configuration file does `),M7e=n(Doe,"STRONG",{});var _Mt=s(M7e);yor=r(_Mt,"not"),_Mt.forEach(t),xor=r(Doe,` load the model weights. It only affects the
model\u2019s configuration. Use `),iQ=n(Doe,"A",{href:!0});var uMt=s(iQ);$or=r(uMt,"from_pretrained()"),uMt.forEach(t),kor=r(Doe," to load the model weights."),Doe.forEach(t),Sor=i(Kw),T(zF.$$.fragment,Kw),Kw.forEach(t),Ror=i(il),lo=n(il,"DIV",{class:!0});var pa=s(lo);T(ny.$$.fragment,pa),Por=i(pa),E7e=n(pa,"P",{});var bMt=s(E7e);Bor=r(bMt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),bMt.forEach(t),Ior=i(pa),Va=n(pa,"P",{});var Zw=s(Va);Nor=r(Zw,"The model class to instantiate is selected based on the "),C7e=n(Zw,"CODE",{});var vMt=s(C7e);qor=r(vMt,"model_type"),vMt.forEach(t),jor=r(Zw,` property of the config object (either
passed as an argument or loaded from `),w7e=n(Zw,"CODE",{});var FMt=s(w7e);Dor=r(FMt,"pretrained_model_name_or_path"),FMt.forEach(t),Gor=r(Zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A7e=n(Zw,"CODE",{});var TMt=s(A7e);Oor=r(TMt,"pretrained_model_name_or_path"),TMt.forEach(t),Vor=r(Zw,":"),Zw.forEach(t),Xor=i(pa),Fe=n(pa,"UL",{});var Te=s(Fe);QF=n(Te,"LI",{});var $Pe=s(QF);L7e=n($Pe,"STRONG",{});var MMt=s(L7e);zor=r(MMt,"beit"),MMt.forEach(t),Qor=r($Pe," \u2014 "),dQ=n($Pe,"A",{href:!0});var EMt=s(dQ);Wor=r(EMt,"BeitForImageClassification"),EMt.forEach(t),Hor=r($Pe," (BEiT model)"),$Pe.forEach(t),Uor=i(Te),WF=n(Te,"LI",{});var kPe=s(WF);y7e=n(kPe,"STRONG",{});var CMt=s(y7e);Jor=r(CMt,"convnext"),CMt.forEach(t),Yor=r(kPe," \u2014 "),cQ=n(kPe,"A",{href:!0});var wMt=s(cQ);Kor=r(wMt,"ConvNextForImageClassification"),wMt.forEach(t),Zor=r(kPe," (ConvNeXT model)"),kPe.forEach(t),err=i(Te),HF=n(Te,"LI",{});var SPe=s(HF);x7e=n(SPe,"STRONG",{});var AMt=s(x7e);orr=r(AMt,"cvt"),AMt.forEach(t),rrr=r(SPe," \u2014 "),fQ=n(SPe,"A",{href:!0});var LMt=s(fQ);trr=r(LMt,"CvtForImageClassification"),LMt.forEach(t),arr=r(SPe," (CvT model)"),SPe.forEach(t),nrr=i(Te),UF=n(Te,"LI",{});var RPe=s(UF);$7e=n(RPe,"STRONG",{});var yMt=s($7e);srr=r(yMt,"data2vec-vision"),yMt.forEach(t),lrr=r(RPe," \u2014 "),mQ=n(RPe,"A",{href:!0});var xMt=s(mQ);irr=r(xMt,"Data2VecVisionForImageClassification"),xMt.forEach(t),drr=r(RPe," (Data2VecVision model)"),RPe.forEach(t),crr=i(Te),Vs=n(Te,"LI",{});var Kk=s(Vs);k7e=n(Kk,"STRONG",{});var $Mt=s(k7e);frr=r($Mt,"deit"),$Mt.forEach(t),mrr=r(Kk," \u2014 "),gQ=n(Kk,"A",{href:!0});var kMt=s(gQ);grr=r(kMt,"DeiTForImageClassification"),kMt.forEach(t),hrr=r(Kk," or "),hQ=n(Kk,"A",{href:!0});var SMt=s(hQ);prr=r(SMt,"DeiTForImageClassificationWithTeacher"),SMt.forEach(t),_rr=r(Kk," (DeiT model)"),Kk.forEach(t),urr=i(Te),JF=n(Te,"LI",{});var PPe=s(JF);S7e=n(PPe,"STRONG",{});var RMt=s(S7e);brr=r(RMt,"imagegpt"),RMt.forEach(t),vrr=r(PPe," \u2014 "),pQ=n(PPe,"A",{href:!0});var PMt=s(pQ);Frr=r(PMt,"ImageGPTForImageClassification"),PMt.forEach(t),Trr=r(PPe," (ImageGPT model)"),PPe.forEach(t),Mrr=i(Te),Xs=n(Te,"LI",{});var Zk=s(Xs);R7e=n(Zk,"STRONG",{});var BMt=s(R7e);Err=r(BMt,"levit"),BMt.forEach(t),Crr=r(Zk," \u2014 "),_Q=n(Zk,"A",{href:!0});var IMt=s(_Q);wrr=r(IMt,"LevitForImageClassification"),IMt.forEach(t),Arr=r(Zk," or "),uQ=n(Zk,"A",{href:!0});var NMt=s(uQ);Lrr=r(NMt,"LevitForImageClassificationWithTeacher"),NMt.forEach(t),yrr=r(Zk," (LeViT model)"),Zk.forEach(t),xrr=i(Te),ut=n(Te,"LI",{});var Lf=s(ut);P7e=n(Lf,"STRONG",{});var qMt=s(P7e);$rr=r(qMt,"perceiver"),qMt.forEach(t),krr=r(Lf," \u2014 "),bQ=n(Lf,"A",{href:!0});var jMt=s(bQ);Srr=r(jMt,"PerceiverForImageClassificationLearned"),jMt.forEach(t),Rrr=r(Lf," or "),vQ=n(Lf,"A",{href:!0});var DMt=s(vQ);Prr=r(DMt,"PerceiverForImageClassificationFourier"),DMt.forEach(t),Brr=r(Lf," or "),FQ=n(Lf,"A",{href:!0});var GMt=s(FQ);Irr=r(GMt,"PerceiverForImageClassificationConvProcessing"),GMt.forEach(t),Nrr=r(Lf," (Perceiver model)"),Lf.forEach(t),qrr=i(Te),YF=n(Te,"LI",{});var BPe=s(YF);B7e=n(BPe,"STRONG",{});var OMt=s(B7e);jrr=r(OMt,"poolformer"),OMt.forEach(t),Drr=r(BPe," \u2014 "),TQ=n(BPe,"A",{href:!0});var VMt=s(TQ);Grr=r(VMt,"PoolFormerForImageClassification"),VMt.forEach(t),Orr=r(BPe," (PoolFormer model)"),BPe.forEach(t),Vrr=i(Te),KF=n(Te,"LI",{});var IPe=s(KF);I7e=n(IPe,"STRONG",{});var XMt=s(I7e);Xrr=r(XMt,"regnet"),XMt.forEach(t),zrr=r(IPe," \u2014 "),MQ=n(IPe,"A",{href:!0});var zMt=s(MQ);Qrr=r(zMt,"RegNetForImageClassification"),zMt.forEach(t),Wrr=r(IPe," (RegNet model)"),IPe.forEach(t),Hrr=i(Te),ZF=n(Te,"LI",{});var NPe=s(ZF);N7e=n(NPe,"STRONG",{});var QMt=s(N7e);Urr=r(QMt,"resnet"),QMt.forEach(t),Jrr=r(NPe," \u2014 "),EQ=n(NPe,"A",{href:!0});var WMt=s(EQ);Yrr=r(WMt,"ResNetForImageClassification"),WMt.forEach(t),Krr=r(NPe," (ResNet model)"),NPe.forEach(t),Zrr=i(Te),eT=n(Te,"LI",{});var qPe=s(eT);q7e=n(qPe,"STRONG",{});var HMt=s(q7e);etr=r(HMt,"segformer"),HMt.forEach(t),otr=r(qPe," \u2014 "),CQ=n(qPe,"A",{href:!0});var UMt=s(CQ);rtr=r(UMt,"SegformerForImageClassification"),UMt.forEach(t),ttr=r(qPe," (SegFormer model)"),qPe.forEach(t),atr=i(Te),oT=n(Te,"LI",{});var jPe=s(oT);j7e=n(jPe,"STRONG",{});var JMt=s(j7e);ntr=r(JMt,"swin"),JMt.forEach(t),str=r(jPe," \u2014 "),wQ=n(jPe,"A",{href:!0});var YMt=s(wQ);ltr=r(YMt,"SwinForImageClassification"),YMt.forEach(t),itr=r(jPe," (Swin Transformer model)"),jPe.forEach(t),dtr=i(Te),rT=n(Te,"LI",{});var DPe=s(rT);D7e=n(DPe,"STRONG",{});var KMt=s(D7e);ctr=r(KMt,"van"),KMt.forEach(t),ftr=r(DPe," \u2014 "),AQ=n(DPe,"A",{href:!0});var ZMt=s(AQ);mtr=r(ZMt,"VanForImageClassification"),ZMt.forEach(t),gtr=r(DPe," (VAN model)"),DPe.forEach(t),htr=i(Te),tT=n(Te,"LI",{});var GPe=s(tT);G7e=n(GPe,"STRONG",{});var eEt=s(G7e);ptr=r(eEt,"vit"),eEt.forEach(t),_tr=r(GPe," \u2014 "),LQ=n(GPe,"A",{href:!0});var oEt=s(LQ);utr=r(oEt,"ViTForImageClassification"),oEt.forEach(t),btr=r(GPe," (ViT model)"),GPe.forEach(t),Te.forEach(t),vtr=i(pa),aT=n(pa,"P",{});var OPe=s(aT);Ftr=r(OPe,"The model is set in evaluation mode by default using "),O7e=n(OPe,"CODE",{});var rEt=s(O7e);Ttr=r(rEt,"model.eval()"),rEt.forEach(t),Mtr=r(OPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),V7e=n(OPe,"CODE",{});var tEt=s(V7e);Etr=r(tEt,"model.train()"),tEt.forEach(t),OPe.forEach(t),Ctr=i(pa),T(nT.$$.fragment,pa),pa.forEach(t),il.forEach(t),bOe=i(f),ud=n(f,"H2",{class:!0});var CXe=s(ud);sT=n(CXe,"A",{id:!0,class:!0,href:!0});var aEt=s(sT);X7e=n(aEt,"SPAN",{});var nEt=s(X7e);T(sy.$$.fragment,nEt),nEt.forEach(t),aEt.forEach(t),wtr=i(CXe),z7e=n(CXe,"SPAN",{});var sEt=s(z7e);Atr=r(sEt,"AutoModelForVision2Seq"),sEt.forEach(t),CXe.forEach(t),vOe=i(f),Go=n(f,"DIV",{class:!0});var dl=s(Go);T(ly.$$.fragment,dl),Ltr=i(dl),bd=n(dl,"P",{});var Goe=s(bd);ytr=r(Goe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),yQ=n(Goe,"A",{href:!0});var lEt=s(yQ);xtr=r(lEt,"from_pretrained()"),lEt.forEach(t),$tr=r(Goe," class method or the "),xQ=n(Goe,"A",{href:!0});var iEt=s(xQ);ktr=r(iEt,"from_config()"),iEt.forEach(t),Str=r(Goe,` class
method.`),Goe.forEach(t),Rtr=i(dl),iy=n(dl,"P",{});var wXe=s(iy);Ptr=r(wXe,"This class cannot be instantiated directly using "),Q7e=n(wXe,"CODE",{});var dEt=s(Q7e);Btr=r(dEt,"__init__()"),dEt.forEach(t),Itr=r(wXe," (throws an error)."),wXe.forEach(t),Ntr=i(dl),bt=n(dl,"DIV",{class:!0});var eA=s(bt);T(dy.$$.fragment,eA),qtr=i(eA),W7e=n(eA,"P",{});var cEt=s(W7e);jtr=r(cEt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),cEt.forEach(t),Dtr=i(eA),vd=n(eA,"P",{});var Ooe=s(vd);Gtr=r(Ooe,`Note:
Loading a model from its configuration file does `),H7e=n(Ooe,"STRONG",{});var fEt=s(H7e);Otr=r(fEt,"not"),fEt.forEach(t),Vtr=r(Ooe,` load the model weights. It only affects the
model\u2019s configuration. Use `),$Q=n(Ooe,"A",{href:!0});var mEt=s($Q);Xtr=r(mEt,"from_pretrained()"),mEt.forEach(t),ztr=r(Ooe," to load the model weights."),Ooe.forEach(t),Qtr=i(eA),T(lT.$$.fragment,eA),eA.forEach(t),Wtr=i(dl),io=n(dl,"DIV",{class:!0});var _a=s(io);T(cy.$$.fragment,_a),Htr=i(_a),U7e=n(_a,"P",{});var gEt=s(U7e);Utr=r(gEt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),gEt.forEach(t),Jtr=i(_a),Xa=n(_a,"P",{});var oA=s(Xa);Ytr=r(oA,"The model class to instantiate is selected based on the "),J7e=n(oA,"CODE",{});var hEt=s(J7e);Ktr=r(hEt,"model_type"),hEt.forEach(t),Ztr=r(oA,` property of the config object (either
passed as an argument or loaded from `),Y7e=n(oA,"CODE",{});var pEt=s(Y7e);ear=r(pEt,"pretrained_model_name_or_path"),pEt.forEach(t),oar=r(oA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K7e=n(oA,"CODE",{});var _Et=s(K7e);rar=r(_Et,"pretrained_model_name_or_path"),_Et.forEach(t),tar=r(oA,":"),oA.forEach(t),aar=i(_a),Z7e=n(_a,"UL",{});var uEt=s(Z7e);iT=n(uEt,"LI",{});var VPe=s(iT);e1e=n(VPe,"STRONG",{});var bEt=s(e1e);nar=r(bEt,"vision-encoder-decoder"),bEt.forEach(t),sar=r(VPe," \u2014 "),kQ=n(VPe,"A",{href:!0});var vEt=s(kQ);lar=r(vEt,"VisionEncoderDecoderModel"),vEt.forEach(t),iar=r(VPe," (Vision Encoder decoder model)"),VPe.forEach(t),uEt.forEach(t),dar=i(_a),dT=n(_a,"P",{});var XPe=s(dT);car=r(XPe,"The model is set in evaluation mode by default using "),o1e=n(XPe,"CODE",{});var FEt=s(o1e);far=r(FEt,"model.eval()"),FEt.forEach(t),mar=r(XPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),r1e=n(XPe,"CODE",{});var TEt=s(r1e);gar=r(TEt,"model.train()"),TEt.forEach(t),XPe.forEach(t),har=i(_a),T(cT.$$.fragment,_a),_a.forEach(t),dl.forEach(t),FOe=i(f),Fd=n(f,"H2",{class:!0});var AXe=s(Fd);fT=n(AXe,"A",{id:!0,class:!0,href:!0});var MEt=s(fT);t1e=n(MEt,"SPAN",{});var EEt=s(t1e);T(fy.$$.fragment,EEt),EEt.forEach(t),MEt.forEach(t),par=i(AXe),a1e=n(AXe,"SPAN",{});var CEt=s(a1e);_ar=r(CEt,"AutoModelForVisualQuestionAnswering"),CEt.forEach(t),AXe.forEach(t),TOe=i(f),Oo=n(f,"DIV",{class:!0});var cl=s(Oo);T(my.$$.fragment,cl),uar=i(cl),Td=n(cl,"P",{});var Voe=s(Td);bar=r(Voe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),SQ=n(Voe,"A",{href:!0});var wEt=s(SQ);Far=r(wEt,"from_pretrained()"),wEt.forEach(t),Tar=r(Voe," class method or the "),RQ=n(Voe,"A",{href:!0});var AEt=s(RQ);Mar=r(AEt,"from_config()"),AEt.forEach(t),Ear=r(Voe,` class
method.`),Voe.forEach(t),Car=i(cl),gy=n(cl,"P",{});var LXe=s(gy);war=r(LXe,"This class cannot be instantiated directly using "),n1e=n(LXe,"CODE",{});var LEt=s(n1e);Aar=r(LEt,"__init__()"),LEt.forEach(t),Lar=r(LXe," (throws an error)."),LXe.forEach(t),yar=i(cl),vt=n(cl,"DIV",{class:!0});var rA=s(vt);T(hy.$$.fragment,rA),xar=i(rA),s1e=n(rA,"P",{});var yEt=s(s1e);$ar=r(yEt,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),yEt.forEach(t),kar=i(rA),Md=n(rA,"P",{});var Xoe=s(Md);Sar=r(Xoe,`Note:
Loading a model from its configuration file does `),l1e=n(Xoe,"STRONG",{});var xEt=s(l1e);Rar=r(xEt,"not"),xEt.forEach(t),Par=r(Xoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),PQ=n(Xoe,"A",{href:!0});var $Et=s(PQ);Bar=r($Et,"from_pretrained()"),$Et.forEach(t),Iar=r(Xoe," to load the model weights."),Xoe.forEach(t),Nar=i(rA),T(mT.$$.fragment,rA),rA.forEach(t),qar=i(cl),co=n(cl,"DIV",{class:!0});var ua=s(co);T(py.$$.fragment,ua),jar=i(ua),i1e=n(ua,"P",{});var kEt=s(i1e);Dar=r(kEt,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),kEt.forEach(t),Gar=i(ua),za=n(ua,"P",{});var tA=s(za);Oar=r(tA,"The model class to instantiate is selected based on the "),d1e=n(tA,"CODE",{});var SEt=s(d1e);Var=r(SEt,"model_type"),SEt.forEach(t),Xar=r(tA,` property of the config object (either
passed as an argument or loaded from `),c1e=n(tA,"CODE",{});var REt=s(c1e);zar=r(REt,"pretrained_model_name_or_path"),REt.forEach(t),Qar=r(tA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f1e=n(tA,"CODE",{});var PEt=s(f1e);War=r(PEt,"pretrained_model_name_or_path"),PEt.forEach(t),Har=r(tA,":"),tA.forEach(t),Uar=i(ua),m1e=n(ua,"UL",{});var BEt=s(m1e);gT=n(BEt,"LI",{});var zPe=s(gT);g1e=n(zPe,"STRONG",{});var IEt=s(g1e);Jar=r(IEt,"vilt"),IEt.forEach(t),Yar=r(zPe," \u2014 "),BQ=n(zPe,"A",{href:!0});var NEt=s(BQ);Kar=r(NEt,"ViltForQuestionAnswering"),NEt.forEach(t),Zar=r(zPe," (ViLT model)"),zPe.forEach(t),BEt.forEach(t),enr=i(ua),hT=n(ua,"P",{});var QPe=s(hT);onr=r(QPe,"The model is set in evaluation mode by default using "),h1e=n(QPe,"CODE",{});var qEt=s(h1e);rnr=r(qEt,"model.eval()"),qEt.forEach(t),tnr=r(QPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),p1e=n(QPe,"CODE",{});var jEt=s(p1e);anr=r(jEt,"model.train()"),jEt.forEach(t),QPe.forEach(t),nnr=i(ua),T(pT.$$.fragment,ua),ua.forEach(t),cl.forEach(t),MOe=i(f),Ed=n(f,"H2",{class:!0});var yXe=s(Ed);_T=n(yXe,"A",{id:!0,class:!0,href:!0});var DEt=s(_T);_1e=n(DEt,"SPAN",{});var GEt=s(_1e);T(_y.$$.fragment,GEt),GEt.forEach(t),DEt.forEach(t),snr=i(yXe),u1e=n(yXe,"SPAN",{});var OEt=s(u1e);lnr=r(OEt,"AutoModelForAudioClassification"),OEt.forEach(t),yXe.forEach(t),EOe=i(f),Vo=n(f,"DIV",{class:!0});var fl=s(Vo);T(uy.$$.fragment,fl),inr=i(fl),Cd=n(fl,"P",{});var zoe=s(Cd);dnr=r(zoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),IQ=n(zoe,"A",{href:!0});var VEt=s(IQ);cnr=r(VEt,"from_pretrained()"),VEt.forEach(t),fnr=r(zoe," class method or the "),NQ=n(zoe,"A",{href:!0});var XEt=s(NQ);mnr=r(XEt,"from_config()"),XEt.forEach(t),gnr=r(zoe,` class
method.`),zoe.forEach(t),hnr=i(fl),by=n(fl,"P",{});var xXe=s(by);pnr=r(xXe,"This class cannot be instantiated directly using "),b1e=n(xXe,"CODE",{});var zEt=s(b1e);_nr=r(zEt,"__init__()"),zEt.forEach(t),unr=r(xXe," (throws an error)."),xXe.forEach(t),bnr=i(fl),Ft=n(fl,"DIV",{class:!0});var aA=s(Ft);T(vy.$$.fragment,aA),vnr=i(aA),v1e=n(aA,"P",{});var QEt=s(v1e);Fnr=r(QEt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),QEt.forEach(t),Tnr=i(aA),wd=n(aA,"P",{});var Qoe=s(wd);Mnr=r(Qoe,`Note:
Loading a model from its configuration file does `),F1e=n(Qoe,"STRONG",{});var WEt=s(F1e);Enr=r(WEt,"not"),WEt.forEach(t),Cnr=r(Qoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),qQ=n(Qoe,"A",{href:!0});var HEt=s(qQ);wnr=r(HEt,"from_pretrained()"),HEt.forEach(t),Anr=r(Qoe," to load the model weights."),Qoe.forEach(t),Lnr=i(aA),T(uT.$$.fragment,aA),aA.forEach(t),ynr=i(fl),fo=n(fl,"DIV",{class:!0});var ba=s(fo);T(Fy.$$.fragment,ba),xnr=i(ba),T1e=n(ba,"P",{});var UEt=s(T1e);$nr=r(UEt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),UEt.forEach(t),knr=i(ba),Qa=n(ba,"P",{});var nA=s(Qa);Snr=r(nA,"The model class to instantiate is selected based on the "),M1e=n(nA,"CODE",{});var JEt=s(M1e);Rnr=r(JEt,"model_type"),JEt.forEach(t),Pnr=r(nA,` property of the config object (either
passed as an argument or loaded from `),E1e=n(nA,"CODE",{});var YEt=s(E1e);Bnr=r(YEt,"pretrained_model_name_or_path"),YEt.forEach(t),Inr=r(nA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C1e=n(nA,"CODE",{});var KEt=s(C1e);Nnr=r(KEt,"pretrained_model_name_or_path"),KEt.forEach(t),qnr=r(nA,":"),nA.forEach(t),jnr=i(ba),Pe=n(ba,"UL",{});var ze=s(Pe);bT=n(ze,"LI",{});var WPe=s(bT);w1e=n(WPe,"STRONG",{});var ZEt=s(w1e);Dnr=r(ZEt,"data2vec-audio"),ZEt.forEach(t),Gnr=r(WPe," \u2014 "),jQ=n(WPe,"A",{href:!0});var e4t=s(jQ);Onr=r(e4t,"Data2VecAudioForSequenceClassification"),e4t.forEach(t),Vnr=r(WPe," (Data2VecAudio model)"),WPe.forEach(t),Xnr=i(ze),vT=n(ze,"LI",{});var HPe=s(vT);A1e=n(HPe,"STRONG",{});var o4t=s(A1e);znr=r(o4t,"hubert"),o4t.forEach(t),Qnr=r(HPe," \u2014 "),DQ=n(HPe,"A",{href:!0});var r4t=s(DQ);Wnr=r(r4t,"HubertForSequenceClassification"),r4t.forEach(t),Hnr=r(HPe," (Hubert model)"),HPe.forEach(t),Unr=i(ze),FT=n(ze,"LI",{});var UPe=s(FT);L1e=n(UPe,"STRONG",{});var t4t=s(L1e);Jnr=r(t4t,"sew"),t4t.forEach(t),Ynr=r(UPe," \u2014 "),GQ=n(UPe,"A",{href:!0});var a4t=s(GQ);Knr=r(a4t,"SEWForSequenceClassification"),a4t.forEach(t),Znr=r(UPe," (SEW model)"),UPe.forEach(t),esr=i(ze),TT=n(ze,"LI",{});var JPe=s(TT);y1e=n(JPe,"STRONG",{});var n4t=s(y1e);osr=r(n4t,"sew-d"),n4t.forEach(t),rsr=r(JPe," \u2014 "),OQ=n(JPe,"A",{href:!0});var s4t=s(OQ);tsr=r(s4t,"SEWDForSequenceClassification"),s4t.forEach(t),asr=r(JPe," (SEW-D model)"),JPe.forEach(t),nsr=i(ze),MT=n(ze,"LI",{});var YPe=s(MT);x1e=n(YPe,"STRONG",{});var l4t=s(x1e);ssr=r(l4t,"unispeech"),l4t.forEach(t),lsr=r(YPe," \u2014 "),VQ=n(YPe,"A",{href:!0});var i4t=s(VQ);isr=r(i4t,"UniSpeechForSequenceClassification"),i4t.forEach(t),dsr=r(YPe," (UniSpeech model)"),YPe.forEach(t),csr=i(ze),ET=n(ze,"LI",{});var KPe=s(ET);$1e=n(KPe,"STRONG",{});var d4t=s($1e);fsr=r(d4t,"unispeech-sat"),d4t.forEach(t),msr=r(KPe," \u2014 "),XQ=n(KPe,"A",{href:!0});var c4t=s(XQ);gsr=r(c4t,"UniSpeechSatForSequenceClassification"),c4t.forEach(t),hsr=r(KPe," (UniSpeechSat model)"),KPe.forEach(t),psr=i(ze),CT=n(ze,"LI",{});var ZPe=s(CT);k1e=n(ZPe,"STRONG",{});var f4t=s(k1e);_sr=r(f4t,"wav2vec2"),f4t.forEach(t),usr=r(ZPe," \u2014 "),zQ=n(ZPe,"A",{href:!0});var m4t=s(zQ);bsr=r(m4t,"Wav2Vec2ForSequenceClassification"),m4t.forEach(t),vsr=r(ZPe," (Wav2Vec2 model)"),ZPe.forEach(t),Fsr=i(ze),wT=n(ze,"LI",{});var eBe=s(wT);S1e=n(eBe,"STRONG",{});var g4t=s(S1e);Tsr=r(g4t,"wav2vec2-conformer"),g4t.forEach(t),Msr=r(eBe," \u2014 "),QQ=n(eBe,"A",{href:!0});var h4t=s(QQ);Esr=r(h4t,"Wav2Vec2ConformerForSequenceClassification"),h4t.forEach(t),Csr=r(eBe," (Wav2Vec2-Conformer model)"),eBe.forEach(t),wsr=i(ze),AT=n(ze,"LI",{});var oBe=s(AT);R1e=n(oBe,"STRONG",{});var p4t=s(R1e);Asr=r(p4t,"wavlm"),p4t.forEach(t),Lsr=r(oBe," \u2014 "),WQ=n(oBe,"A",{href:!0});var _4t=s(WQ);ysr=r(_4t,"WavLMForSequenceClassification"),_4t.forEach(t),xsr=r(oBe," (WavLM model)"),oBe.forEach(t),ze.forEach(t),$sr=i(ba),LT=n(ba,"P",{});var rBe=s(LT);ksr=r(rBe,"The model is set in evaluation mode by default using "),P1e=n(rBe,"CODE",{});var u4t=s(P1e);Ssr=r(u4t,"model.eval()"),u4t.forEach(t),Rsr=r(rBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),B1e=n(rBe,"CODE",{});var b4t=s(B1e);Psr=r(b4t,"model.train()"),b4t.forEach(t),rBe.forEach(t),Bsr=i(ba),T(yT.$$.fragment,ba),ba.forEach(t),fl.forEach(t),COe=i(f),Ad=n(f,"H2",{class:!0});var $Xe=s(Ad);xT=n($Xe,"A",{id:!0,class:!0,href:!0});var v4t=s(xT);I1e=n(v4t,"SPAN",{});var F4t=s(I1e);T(Ty.$$.fragment,F4t),F4t.forEach(t),v4t.forEach(t),Isr=i($Xe),N1e=n($Xe,"SPAN",{});var T4t=s(N1e);Nsr=r(T4t,"AutoModelForAudioFrameClassification"),T4t.forEach(t),$Xe.forEach(t),wOe=i(f),Xo=n(f,"DIV",{class:!0});var ml=s(Xo);T(My.$$.fragment,ml),qsr=i(ml),Ld=n(ml,"P",{});var Woe=s(Ld);jsr=r(Woe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),HQ=n(Woe,"A",{href:!0});var M4t=s(HQ);Dsr=r(M4t,"from_pretrained()"),M4t.forEach(t),Gsr=r(Woe," class method or the "),UQ=n(Woe,"A",{href:!0});var E4t=s(UQ);Osr=r(E4t,"from_config()"),E4t.forEach(t),Vsr=r(Woe,` class
method.`),Woe.forEach(t),Xsr=i(ml),Ey=n(ml,"P",{});var kXe=s(Ey);zsr=r(kXe,"This class cannot be instantiated directly using "),q1e=n(kXe,"CODE",{});var C4t=s(q1e);Qsr=r(C4t,"__init__()"),C4t.forEach(t),Wsr=r(kXe," (throws an error)."),kXe.forEach(t),Hsr=i(ml),Tt=n(ml,"DIV",{class:!0});var sA=s(Tt);T(Cy.$$.fragment,sA),Usr=i(sA),j1e=n(sA,"P",{});var w4t=s(j1e);Jsr=r(w4t,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),w4t.forEach(t),Ysr=i(sA),yd=n(sA,"P",{});var Hoe=s(yd);Ksr=r(Hoe,`Note:
Loading a model from its configuration file does `),D1e=n(Hoe,"STRONG",{});var A4t=s(D1e);Zsr=r(A4t,"not"),A4t.forEach(t),elr=r(Hoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),JQ=n(Hoe,"A",{href:!0});var L4t=s(JQ);olr=r(L4t,"from_pretrained()"),L4t.forEach(t),rlr=r(Hoe," to load the model weights."),Hoe.forEach(t),tlr=i(sA),T($T.$$.fragment,sA),sA.forEach(t),alr=i(ml),mo=n(ml,"DIV",{class:!0});var va=s(mo);T(wy.$$.fragment,va),nlr=i(va),G1e=n(va,"P",{});var y4t=s(G1e);slr=r(y4t,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),y4t.forEach(t),llr=i(va),Wa=n(va,"P",{});var lA=s(Wa);ilr=r(lA,"The model class to instantiate is selected based on the "),O1e=n(lA,"CODE",{});var x4t=s(O1e);dlr=r(x4t,"model_type"),x4t.forEach(t),clr=r(lA,` property of the config object (either
passed as an argument or loaded from `),V1e=n(lA,"CODE",{});var $4t=s(V1e);flr=r($4t,"pretrained_model_name_or_path"),$4t.forEach(t),mlr=r(lA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X1e=n(lA,"CODE",{});var k4t=s(X1e);glr=r(k4t,"pretrained_model_name_or_path"),k4t.forEach(t),hlr=r(lA,":"),lA.forEach(t),plr=i(va),et=n(va,"UL",{});var gl=s(et);kT=n(gl,"LI",{});var tBe=s(kT);z1e=n(tBe,"STRONG",{});var S4t=s(z1e);_lr=r(S4t,"data2vec-audio"),S4t.forEach(t),ulr=r(tBe," \u2014 "),YQ=n(tBe,"A",{href:!0});var R4t=s(YQ);blr=r(R4t,"Data2VecAudioForAudioFrameClassification"),R4t.forEach(t),vlr=r(tBe," (Data2VecAudio model)"),tBe.forEach(t),Flr=i(gl),ST=n(gl,"LI",{});var aBe=s(ST);Q1e=n(aBe,"STRONG",{});var P4t=s(Q1e);Tlr=r(P4t,"unispeech-sat"),P4t.forEach(t),Mlr=r(aBe," \u2014 "),KQ=n(aBe,"A",{href:!0});var B4t=s(KQ);Elr=r(B4t,"UniSpeechSatForAudioFrameClassification"),B4t.forEach(t),Clr=r(aBe," (UniSpeechSat model)"),aBe.forEach(t),wlr=i(gl),RT=n(gl,"LI",{});var nBe=s(RT);W1e=n(nBe,"STRONG",{});var I4t=s(W1e);Alr=r(I4t,"wav2vec2"),I4t.forEach(t),Llr=r(nBe," \u2014 "),ZQ=n(nBe,"A",{href:!0});var N4t=s(ZQ);ylr=r(N4t,"Wav2Vec2ForAudioFrameClassification"),N4t.forEach(t),xlr=r(nBe," (Wav2Vec2 model)"),nBe.forEach(t),$lr=i(gl),PT=n(gl,"LI",{});var sBe=s(PT);H1e=n(sBe,"STRONG",{});var q4t=s(H1e);klr=r(q4t,"wav2vec2-conformer"),q4t.forEach(t),Slr=r(sBe," \u2014 "),eW=n(sBe,"A",{href:!0});var j4t=s(eW);Rlr=r(j4t,"Wav2Vec2ConformerForAudioFrameClassification"),j4t.forEach(t),Plr=r(sBe," (Wav2Vec2-Conformer model)"),sBe.forEach(t),Blr=i(gl),BT=n(gl,"LI",{});var lBe=s(BT);U1e=n(lBe,"STRONG",{});var D4t=s(U1e);Ilr=r(D4t,"wavlm"),D4t.forEach(t),Nlr=r(lBe," \u2014 "),oW=n(lBe,"A",{href:!0});var G4t=s(oW);qlr=r(G4t,"WavLMForAudioFrameClassification"),G4t.forEach(t),jlr=r(lBe," (WavLM model)"),lBe.forEach(t),gl.forEach(t),Dlr=i(va),IT=n(va,"P",{});var iBe=s(IT);Glr=r(iBe,"The model is set in evaluation mode by default using "),J1e=n(iBe,"CODE",{});var O4t=s(J1e);Olr=r(O4t,"model.eval()"),O4t.forEach(t),Vlr=r(iBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Y1e=n(iBe,"CODE",{});var V4t=s(Y1e);Xlr=r(V4t,"model.train()"),V4t.forEach(t),iBe.forEach(t),zlr=i(va),T(NT.$$.fragment,va),va.forEach(t),ml.forEach(t),AOe=i(f),xd=n(f,"H2",{class:!0});var SXe=s(xd);qT=n(SXe,"A",{id:!0,class:!0,href:!0});var X4t=s(qT);K1e=n(X4t,"SPAN",{});var z4t=s(K1e);T(Ay.$$.fragment,z4t),z4t.forEach(t),X4t.forEach(t),Qlr=i(SXe),Z1e=n(SXe,"SPAN",{});var Q4t=s(Z1e);Wlr=r(Q4t,"AutoModelForCTC"),Q4t.forEach(t),SXe.forEach(t),LOe=i(f),zo=n(f,"DIV",{class:!0});var hl=s(zo);T(Ly.$$.fragment,hl),Hlr=i(hl),$d=n(hl,"P",{});var Uoe=s($d);Ulr=r(Uoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),rW=n(Uoe,"A",{href:!0});var W4t=s(rW);Jlr=r(W4t,"from_pretrained()"),W4t.forEach(t),Ylr=r(Uoe," class method or the "),tW=n(Uoe,"A",{href:!0});var H4t=s(tW);Klr=r(H4t,"from_config()"),H4t.forEach(t),Zlr=r(Uoe,` class
method.`),Uoe.forEach(t),eir=i(hl),yy=n(hl,"P",{});var RXe=s(yy);oir=r(RXe,"This class cannot be instantiated directly using "),e2e=n(RXe,"CODE",{});var U4t=s(e2e);rir=r(U4t,"__init__()"),U4t.forEach(t),tir=r(RXe," (throws an error)."),RXe.forEach(t),air=i(hl),Mt=n(hl,"DIV",{class:!0});var iA=s(Mt);T(xy.$$.fragment,iA),nir=i(iA),o2e=n(iA,"P",{});var J4t=s(o2e);sir=r(J4t,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),J4t.forEach(t),lir=i(iA),kd=n(iA,"P",{});var Joe=s(kd);iir=r(Joe,`Note:
Loading a model from its configuration file does `),r2e=n(Joe,"STRONG",{});var Y4t=s(r2e);dir=r(Y4t,"not"),Y4t.forEach(t),cir=r(Joe,` load the model weights. It only affects the
model\u2019s configuration. Use `),aW=n(Joe,"A",{href:!0});var K4t=s(aW);fir=r(K4t,"from_pretrained()"),K4t.forEach(t),mir=r(Joe," to load the model weights."),Joe.forEach(t),gir=i(iA),T(jT.$$.fragment,iA),iA.forEach(t),hir=i(hl),go=n(hl,"DIV",{class:!0});var Fa=s(go);T($y.$$.fragment,Fa),pir=i(Fa),t2e=n(Fa,"P",{});var Z4t=s(t2e);_ir=r(Z4t,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Z4t.forEach(t),uir=i(Fa),Ha=n(Fa,"P",{});var dA=s(Ha);bir=r(dA,"The model class to instantiate is selected based on the "),a2e=n(dA,"CODE",{});var eCt=s(a2e);vir=r(eCt,"model_type"),eCt.forEach(t),Fir=r(dA,` property of the config object (either
passed as an argument or loaded from `),n2e=n(dA,"CODE",{});var oCt=s(n2e);Tir=r(oCt,"pretrained_model_name_or_path"),oCt.forEach(t),Mir=r(dA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s2e=n(dA,"CODE",{});var rCt=s(s2e);Eir=r(rCt,"pretrained_model_name_or_path"),rCt.forEach(t),Cir=r(dA,":"),dA.forEach(t),wir=i(Fa),Le=n(Fa,"UL",{});var Be=s(Le);DT=n(Be,"LI",{});var dBe=s(DT);l2e=n(dBe,"STRONG",{});var tCt=s(l2e);Air=r(tCt,"data2vec-audio"),tCt.forEach(t),Lir=r(dBe," \u2014 "),nW=n(dBe,"A",{href:!0});var aCt=s(nW);yir=r(aCt,"Data2VecAudioForCTC"),aCt.forEach(t),xir=r(dBe," (Data2VecAudio model)"),dBe.forEach(t),$ir=i(Be),GT=n(Be,"LI",{});var cBe=s(GT);i2e=n(cBe,"STRONG",{});var nCt=s(i2e);kir=r(nCt,"hubert"),nCt.forEach(t),Sir=r(cBe," \u2014 "),sW=n(cBe,"A",{href:!0});var sCt=s(sW);Rir=r(sCt,"HubertForCTC"),sCt.forEach(t),Pir=r(cBe," (Hubert model)"),cBe.forEach(t),Bir=i(Be),OT=n(Be,"LI",{});var fBe=s(OT);d2e=n(fBe,"STRONG",{});var lCt=s(d2e);Iir=r(lCt,"mctct"),lCt.forEach(t),Nir=r(fBe," \u2014 "),lW=n(fBe,"A",{href:!0});var iCt=s(lW);qir=r(iCt,"MCTCTForCTC"),iCt.forEach(t),jir=r(fBe," (M-CTC-T model)"),fBe.forEach(t),Dir=i(Be),VT=n(Be,"LI",{});var mBe=s(VT);c2e=n(mBe,"STRONG",{});var dCt=s(c2e);Gir=r(dCt,"sew"),dCt.forEach(t),Oir=r(mBe," \u2014 "),iW=n(mBe,"A",{href:!0});var cCt=s(iW);Vir=r(cCt,"SEWForCTC"),cCt.forEach(t),Xir=r(mBe," (SEW model)"),mBe.forEach(t),zir=i(Be),XT=n(Be,"LI",{});var gBe=s(XT);f2e=n(gBe,"STRONG",{});var fCt=s(f2e);Qir=r(fCt,"sew-d"),fCt.forEach(t),Wir=r(gBe," \u2014 "),dW=n(gBe,"A",{href:!0});var mCt=s(dW);Hir=r(mCt,"SEWDForCTC"),mCt.forEach(t),Uir=r(gBe," (SEW-D model)"),gBe.forEach(t),Jir=i(Be),zT=n(Be,"LI",{});var hBe=s(zT);m2e=n(hBe,"STRONG",{});var gCt=s(m2e);Yir=r(gCt,"unispeech"),gCt.forEach(t),Kir=r(hBe," \u2014 "),cW=n(hBe,"A",{href:!0});var hCt=s(cW);Zir=r(hCt,"UniSpeechForCTC"),hCt.forEach(t),edr=r(hBe," (UniSpeech model)"),hBe.forEach(t),odr=i(Be),QT=n(Be,"LI",{});var pBe=s(QT);g2e=n(pBe,"STRONG",{});var pCt=s(g2e);rdr=r(pCt,"unispeech-sat"),pCt.forEach(t),tdr=r(pBe," \u2014 "),fW=n(pBe,"A",{href:!0});var _Ct=s(fW);adr=r(_Ct,"UniSpeechSatForCTC"),_Ct.forEach(t),ndr=r(pBe," (UniSpeechSat model)"),pBe.forEach(t),sdr=i(Be),WT=n(Be,"LI",{});var _Be=s(WT);h2e=n(_Be,"STRONG",{});var uCt=s(h2e);ldr=r(uCt,"wav2vec2"),uCt.forEach(t),idr=r(_Be," \u2014 "),mW=n(_Be,"A",{href:!0});var bCt=s(mW);ddr=r(bCt,"Wav2Vec2ForCTC"),bCt.forEach(t),cdr=r(_Be," (Wav2Vec2 model)"),_Be.forEach(t),fdr=i(Be),HT=n(Be,"LI",{});var uBe=s(HT);p2e=n(uBe,"STRONG",{});var vCt=s(p2e);mdr=r(vCt,"wav2vec2-conformer"),vCt.forEach(t),gdr=r(uBe," \u2014 "),gW=n(uBe,"A",{href:!0});var FCt=s(gW);hdr=r(FCt,"Wav2Vec2ConformerForCTC"),FCt.forEach(t),pdr=r(uBe," (Wav2Vec2-Conformer model)"),uBe.forEach(t),_dr=i(Be),UT=n(Be,"LI",{});var bBe=s(UT);_2e=n(bBe,"STRONG",{});var TCt=s(_2e);udr=r(TCt,"wavlm"),TCt.forEach(t),bdr=r(bBe," \u2014 "),hW=n(bBe,"A",{href:!0});var MCt=s(hW);vdr=r(MCt,"WavLMForCTC"),MCt.forEach(t),Fdr=r(bBe," (WavLM model)"),bBe.forEach(t),Be.forEach(t),Tdr=i(Fa),JT=n(Fa,"P",{});var vBe=s(JT);Mdr=r(vBe,"The model is set in evaluation mode by default using "),u2e=n(vBe,"CODE",{});var ECt=s(u2e);Edr=r(ECt,"model.eval()"),ECt.forEach(t),Cdr=r(vBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),b2e=n(vBe,"CODE",{});var CCt=s(b2e);wdr=r(CCt,"model.train()"),CCt.forEach(t),vBe.forEach(t),Adr=i(Fa),T(YT.$$.fragment,Fa),Fa.forEach(t),hl.forEach(t),yOe=i(f),Sd=n(f,"H2",{class:!0});var PXe=s(Sd);KT=n(PXe,"A",{id:!0,class:!0,href:!0});var wCt=s(KT);v2e=n(wCt,"SPAN",{});var ACt=s(v2e);T(ky.$$.fragment,ACt),ACt.forEach(t),wCt.forEach(t),Ldr=i(PXe),F2e=n(PXe,"SPAN",{});var LCt=s(F2e);ydr=r(LCt,"AutoModelForSpeechSeq2Seq"),LCt.forEach(t),PXe.forEach(t),xOe=i(f),Qo=n(f,"DIV",{class:!0});var pl=s(Qo);T(Sy.$$.fragment,pl),xdr=i(pl),Rd=n(pl,"P",{});var Yoe=s(Rd);$dr=r(Yoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),pW=n(Yoe,"A",{href:!0});var yCt=s(pW);kdr=r(yCt,"from_pretrained()"),yCt.forEach(t),Sdr=r(Yoe," class method or the "),_W=n(Yoe,"A",{href:!0});var xCt=s(_W);Rdr=r(xCt,"from_config()"),xCt.forEach(t),Pdr=r(Yoe,` class
method.`),Yoe.forEach(t),Bdr=i(pl),Ry=n(pl,"P",{});var BXe=s(Ry);Idr=r(BXe,"This class cannot be instantiated directly using "),T2e=n(BXe,"CODE",{});var $Ct=s(T2e);Ndr=r($Ct,"__init__()"),$Ct.forEach(t),qdr=r(BXe," (throws an error)."),BXe.forEach(t),jdr=i(pl),Et=n(pl,"DIV",{class:!0});var cA=s(Et);T(Py.$$.fragment,cA),Ddr=i(cA),M2e=n(cA,"P",{});var kCt=s(M2e);Gdr=r(kCt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),kCt.forEach(t),Odr=i(cA),Pd=n(cA,"P",{});var Koe=s(Pd);Vdr=r(Koe,`Note:
Loading a model from its configuration file does `),E2e=n(Koe,"STRONG",{});var SCt=s(E2e);Xdr=r(SCt,"not"),SCt.forEach(t),zdr=r(Koe,` load the model weights. It only affects the
model\u2019s configuration. Use `),uW=n(Koe,"A",{href:!0});var RCt=s(uW);Qdr=r(RCt,"from_pretrained()"),RCt.forEach(t),Wdr=r(Koe," to load the model weights."),Koe.forEach(t),Hdr=i(cA),T(ZT.$$.fragment,cA),cA.forEach(t),Udr=i(pl),ho=n(pl,"DIV",{class:!0});var Ta=s(ho);T(By.$$.fragment,Ta),Jdr=i(Ta),C2e=n(Ta,"P",{});var PCt=s(C2e);Ydr=r(PCt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),PCt.forEach(t),Kdr=i(Ta),Ua=n(Ta,"P",{});var fA=s(Ua);Zdr=r(fA,"The model class to instantiate is selected based on the "),w2e=n(fA,"CODE",{});var BCt=s(w2e);ecr=r(BCt,"model_type"),BCt.forEach(t),ocr=r(fA,` property of the config object (either
passed as an argument or loaded from `),A2e=n(fA,"CODE",{});var ICt=s(A2e);rcr=r(ICt,"pretrained_model_name_or_path"),ICt.forEach(t),tcr=r(fA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L2e=n(fA,"CODE",{});var NCt=s(L2e);acr=r(NCt,"pretrained_model_name_or_path"),NCt.forEach(t),ncr=r(fA,":"),fA.forEach(t),scr=i(Ta),Iy=n(Ta,"UL",{});var IXe=s(Iy);e8=n(IXe,"LI",{});var FBe=s(e8);y2e=n(FBe,"STRONG",{});var qCt=s(y2e);lcr=r(qCt,"speech-encoder-decoder"),qCt.forEach(t),icr=r(FBe," \u2014 "),bW=n(FBe,"A",{href:!0});var jCt=s(bW);dcr=r(jCt,"SpeechEncoderDecoderModel"),jCt.forEach(t),ccr=r(FBe," (Speech Encoder decoder model)"),FBe.forEach(t),fcr=i(IXe),o8=n(IXe,"LI",{});var TBe=s(o8);x2e=n(TBe,"STRONG",{});var DCt=s(x2e);mcr=r(DCt,"speech_to_text"),DCt.forEach(t),gcr=r(TBe," \u2014 "),vW=n(TBe,"A",{href:!0});var GCt=s(vW);hcr=r(GCt,"Speech2TextForConditionalGeneration"),GCt.forEach(t),pcr=r(TBe," (Speech2Text model)"),TBe.forEach(t),IXe.forEach(t),_cr=i(Ta),r8=n(Ta,"P",{});var MBe=s(r8);ucr=r(MBe,"The model is set in evaluation mode by default using "),$2e=n(MBe,"CODE",{});var OCt=s($2e);bcr=r(OCt,"model.eval()"),OCt.forEach(t),vcr=r(MBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),k2e=n(MBe,"CODE",{});var VCt=s(k2e);Fcr=r(VCt,"model.train()"),VCt.forEach(t),MBe.forEach(t),Tcr=i(Ta),T(t8.$$.fragment,Ta),Ta.forEach(t),pl.forEach(t),$Oe=i(f),Bd=n(f,"H2",{class:!0});var NXe=s(Bd);a8=n(NXe,"A",{id:!0,class:!0,href:!0});var XCt=s(a8);S2e=n(XCt,"SPAN",{});var zCt=s(S2e);T(Ny.$$.fragment,zCt),zCt.forEach(t),XCt.forEach(t),Mcr=i(NXe),R2e=n(NXe,"SPAN",{});var QCt=s(R2e);Ecr=r(QCt,"AutoModelForAudioXVector"),QCt.forEach(t),NXe.forEach(t),kOe=i(f),Wo=n(f,"DIV",{class:!0});var _l=s(Wo);T(qy.$$.fragment,_l),Ccr=i(_l),Id=n(_l,"P",{});var Zoe=s(Id);wcr=r(Zoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),FW=n(Zoe,"A",{href:!0});var WCt=s(FW);Acr=r(WCt,"from_pretrained()"),WCt.forEach(t),Lcr=r(Zoe," class method or the "),TW=n(Zoe,"A",{href:!0});var HCt=s(TW);ycr=r(HCt,"from_config()"),HCt.forEach(t),xcr=r(Zoe,` class
method.`),Zoe.forEach(t),$cr=i(_l),jy=n(_l,"P",{});var qXe=s(jy);kcr=r(qXe,"This class cannot be instantiated directly using "),P2e=n(qXe,"CODE",{});var UCt=s(P2e);Scr=r(UCt,"__init__()"),UCt.forEach(t),Rcr=r(qXe," (throws an error)."),qXe.forEach(t),Pcr=i(_l),Ct=n(_l,"DIV",{class:!0});var mA=s(Ct);T(Dy.$$.fragment,mA),Bcr=i(mA),B2e=n(mA,"P",{});var JCt=s(B2e);Icr=r(JCt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),JCt.forEach(t),Ncr=i(mA),Nd=n(mA,"P",{});var ere=s(Nd);qcr=r(ere,`Note:
Loading a model from its configuration file does `),I2e=n(ere,"STRONG",{});var YCt=s(I2e);jcr=r(YCt,"not"),YCt.forEach(t),Dcr=r(ere,` load the model weights. It only affects the
model\u2019s configuration. Use `),MW=n(ere,"A",{href:!0});var KCt=s(MW);Gcr=r(KCt,"from_pretrained()"),KCt.forEach(t),Ocr=r(ere," to load the model weights."),ere.forEach(t),Vcr=i(mA),T(n8.$$.fragment,mA),mA.forEach(t),Xcr=i(_l),po=n(_l,"DIV",{class:!0});var Ma=s(po);T(Gy.$$.fragment,Ma),zcr=i(Ma),N2e=n(Ma,"P",{});var ZCt=s(N2e);Qcr=r(ZCt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),ZCt.forEach(t),Wcr=i(Ma),Ja=n(Ma,"P",{});var gA=s(Ja);Hcr=r(gA,"The model class to instantiate is selected based on the "),q2e=n(gA,"CODE",{});var e5t=s(q2e);Ucr=r(e5t,"model_type"),e5t.forEach(t),Jcr=r(gA,` property of the config object (either
passed as an argument or loaded from `),j2e=n(gA,"CODE",{});var o5t=s(j2e);Ycr=r(o5t,"pretrained_model_name_or_path"),o5t.forEach(t),Kcr=r(gA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D2e=n(gA,"CODE",{});var r5t=s(D2e);Zcr=r(r5t,"pretrained_model_name_or_path"),r5t.forEach(t),efr=r(gA,":"),gA.forEach(t),ofr=i(Ma),ot=n(Ma,"UL",{});var ul=s(ot);s8=n(ul,"LI",{});var EBe=s(s8);G2e=n(EBe,"STRONG",{});var t5t=s(G2e);rfr=r(t5t,"data2vec-audio"),t5t.forEach(t),tfr=r(EBe," \u2014 "),EW=n(EBe,"A",{href:!0});var a5t=s(EW);afr=r(a5t,"Data2VecAudioForXVector"),a5t.forEach(t),nfr=r(EBe," (Data2VecAudio model)"),EBe.forEach(t),sfr=i(ul),l8=n(ul,"LI",{});var CBe=s(l8);O2e=n(CBe,"STRONG",{});var n5t=s(O2e);lfr=r(n5t,"unispeech-sat"),n5t.forEach(t),ifr=r(CBe," \u2014 "),CW=n(CBe,"A",{href:!0});var s5t=s(CW);dfr=r(s5t,"UniSpeechSatForXVector"),s5t.forEach(t),cfr=r(CBe," (UniSpeechSat model)"),CBe.forEach(t),ffr=i(ul),i8=n(ul,"LI",{});var wBe=s(i8);V2e=n(wBe,"STRONG",{});var l5t=s(V2e);mfr=r(l5t,"wav2vec2"),l5t.forEach(t),gfr=r(wBe," \u2014 "),wW=n(wBe,"A",{href:!0});var i5t=s(wW);hfr=r(i5t,"Wav2Vec2ForXVector"),i5t.forEach(t),pfr=r(wBe," (Wav2Vec2 model)"),wBe.forEach(t),_fr=i(ul),d8=n(ul,"LI",{});var ABe=s(d8);X2e=n(ABe,"STRONG",{});var d5t=s(X2e);ufr=r(d5t,"wav2vec2-conformer"),d5t.forEach(t),bfr=r(ABe," \u2014 "),AW=n(ABe,"A",{href:!0});var c5t=s(AW);vfr=r(c5t,"Wav2Vec2ConformerForXVector"),c5t.forEach(t),Ffr=r(ABe," (Wav2Vec2-Conformer model)"),ABe.forEach(t),Tfr=i(ul),c8=n(ul,"LI",{});var LBe=s(c8);z2e=n(LBe,"STRONG",{});var f5t=s(z2e);Mfr=r(f5t,"wavlm"),f5t.forEach(t),Efr=r(LBe," \u2014 "),LW=n(LBe,"A",{href:!0});var m5t=s(LW);Cfr=r(m5t,"WavLMForXVector"),m5t.forEach(t),wfr=r(LBe," (WavLM model)"),LBe.forEach(t),ul.forEach(t),Afr=i(Ma),f8=n(Ma,"P",{});var yBe=s(f8);Lfr=r(yBe,"The model is set in evaluation mode by default using "),Q2e=n(yBe,"CODE",{});var g5t=s(Q2e);yfr=r(g5t,"model.eval()"),g5t.forEach(t),xfr=r(yBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),W2e=n(yBe,"CODE",{});var h5t=s(W2e);$fr=r(h5t,"model.train()"),h5t.forEach(t),yBe.forEach(t),kfr=i(Ma),T(m8.$$.fragment,Ma),Ma.forEach(t),_l.forEach(t),SOe=i(f),qd=n(f,"H2",{class:!0});var jXe=s(qd);g8=n(jXe,"A",{id:!0,class:!0,href:!0});var p5t=s(g8);H2e=n(p5t,"SPAN",{});var _5t=s(H2e);T(Oy.$$.fragment,_5t),_5t.forEach(t),p5t.forEach(t),Sfr=i(jXe),U2e=n(jXe,"SPAN",{});var u5t=s(U2e);Rfr=r(u5t,"AutoModelForMaskedImageModeling"),u5t.forEach(t),jXe.forEach(t),ROe=i(f),Ho=n(f,"DIV",{class:!0});var bl=s(Ho);T(Vy.$$.fragment,bl),Pfr=i(bl),jd=n(bl,"P",{});var ore=s(jd);Bfr=r(ore,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),yW=n(ore,"A",{href:!0});var b5t=s(yW);Ifr=r(b5t,"from_pretrained()"),b5t.forEach(t),Nfr=r(ore," class method or the "),xW=n(ore,"A",{href:!0});var v5t=s(xW);qfr=r(v5t,"from_config()"),v5t.forEach(t),jfr=r(ore,` class
method.`),ore.forEach(t),Dfr=i(bl),Xy=n(bl,"P",{});var DXe=s(Xy);Gfr=r(DXe,"This class cannot be instantiated directly using "),J2e=n(DXe,"CODE",{});var F5t=s(J2e);Ofr=r(F5t,"__init__()"),F5t.forEach(t),Vfr=r(DXe," (throws an error)."),DXe.forEach(t),Xfr=i(bl),wt=n(bl,"DIV",{class:!0});var hA=s(wt);T(zy.$$.fragment,hA),zfr=i(hA),Y2e=n(hA,"P",{});var T5t=s(Y2e);Qfr=r(T5t,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),T5t.forEach(t),Wfr=i(hA),Dd=n(hA,"P",{});var rre=s(Dd);Hfr=r(rre,`Note:
Loading a model from its configuration file does `),K2e=n(rre,"STRONG",{});var M5t=s(K2e);Ufr=r(M5t,"not"),M5t.forEach(t),Jfr=r(rre,` load the model weights. It only affects the
model\u2019s configuration. Use `),$W=n(rre,"A",{href:!0});var E5t=s($W);Yfr=r(E5t,"from_pretrained()"),E5t.forEach(t),Kfr=r(rre," to load the model weights."),rre.forEach(t),Zfr=i(hA),T(h8.$$.fragment,hA),hA.forEach(t),emr=i(bl),_o=n(bl,"DIV",{class:!0});var Ea=s(_o);T(Qy.$$.fragment,Ea),omr=i(Ea),Z2e=n(Ea,"P",{});var C5t=s(Z2e);rmr=r(C5t,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),C5t.forEach(t),tmr=i(Ea),Ya=n(Ea,"P",{});var pA=s(Ya);amr=r(pA,"The model class to instantiate is selected based on the "),ebe=n(pA,"CODE",{});var w5t=s(ebe);nmr=r(w5t,"model_type"),w5t.forEach(t),smr=r(pA,` property of the config object (either
passed as an argument or loaded from `),obe=n(pA,"CODE",{});var A5t=s(obe);lmr=r(A5t,"pretrained_model_name_or_path"),A5t.forEach(t),imr=r(pA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rbe=n(pA,"CODE",{});var L5t=s(rbe);dmr=r(L5t,"pretrained_model_name_or_path"),L5t.forEach(t),cmr=r(pA,":"),pA.forEach(t),fmr=i(Ea),Gd=n(Ea,"UL",{});var tre=s(Gd);p8=n(tre,"LI",{});var xBe=s(p8);tbe=n(xBe,"STRONG",{});var y5t=s(tbe);mmr=r(y5t,"deit"),y5t.forEach(t),gmr=r(xBe," \u2014 "),kW=n(xBe,"A",{href:!0});var x5t=s(kW);hmr=r(x5t,"DeiTForMaskedImageModeling"),x5t.forEach(t),pmr=r(xBe," (DeiT model)"),xBe.forEach(t),_mr=i(tre),_8=n(tre,"LI",{});var $Be=s(_8);abe=n($Be,"STRONG",{});var $5t=s(abe);umr=r($5t,"swin"),$5t.forEach(t),bmr=r($Be," \u2014 "),SW=n($Be,"A",{href:!0});var k5t=s(SW);vmr=r(k5t,"SwinForMaskedImageModeling"),k5t.forEach(t),Fmr=r($Be," (Swin Transformer model)"),$Be.forEach(t),Tmr=i(tre),u8=n(tre,"LI",{});var kBe=s(u8);nbe=n(kBe,"STRONG",{});var S5t=s(nbe);Mmr=r(S5t,"vit"),S5t.forEach(t),Emr=r(kBe," \u2014 "),RW=n(kBe,"A",{href:!0});var R5t=s(RW);Cmr=r(R5t,"ViTForMaskedImageModeling"),R5t.forEach(t),wmr=r(kBe," (ViT model)"),kBe.forEach(t),tre.forEach(t),Amr=i(Ea),b8=n(Ea,"P",{});var SBe=s(b8);Lmr=r(SBe,"The model is set in evaluation mode by default using "),sbe=n(SBe,"CODE",{});var P5t=s(sbe);ymr=r(P5t,"model.eval()"),P5t.forEach(t),xmr=r(SBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lbe=n(SBe,"CODE",{});var B5t=s(lbe);$mr=r(B5t,"model.train()"),B5t.forEach(t),SBe.forEach(t),kmr=i(Ea),T(v8.$$.fragment,Ea),Ea.forEach(t),bl.forEach(t),POe=i(f),Od=n(f,"H2",{class:!0});var GXe=s(Od);F8=n(GXe,"A",{id:!0,class:!0,href:!0});var I5t=s(F8);ibe=n(I5t,"SPAN",{});var N5t=s(ibe);T(Wy.$$.fragment,N5t),N5t.forEach(t),I5t.forEach(t),Smr=i(GXe),dbe=n(GXe,"SPAN",{});var q5t=s(dbe);Rmr=r(q5t,"AutoModelForObjectDetection"),q5t.forEach(t),GXe.forEach(t),BOe=i(f),Uo=n(f,"DIV",{class:!0});var vl=s(Uo);T(Hy.$$.fragment,vl),Pmr=i(vl),Vd=n(vl,"P",{});var are=s(Vd);Bmr=r(are,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),PW=n(are,"A",{href:!0});var j5t=s(PW);Imr=r(j5t,"from_pretrained()"),j5t.forEach(t),Nmr=r(are," class method or the "),BW=n(are,"A",{href:!0});var D5t=s(BW);qmr=r(D5t,"from_config()"),D5t.forEach(t),jmr=r(are,` class
method.`),are.forEach(t),Dmr=i(vl),Uy=n(vl,"P",{});var OXe=s(Uy);Gmr=r(OXe,"This class cannot be instantiated directly using "),cbe=n(OXe,"CODE",{});var G5t=s(cbe);Omr=r(G5t,"__init__()"),G5t.forEach(t),Vmr=r(OXe," (throws an error)."),OXe.forEach(t),Xmr=i(vl),At=n(vl,"DIV",{class:!0});var _A=s(At);T(Jy.$$.fragment,_A),zmr=i(_A),fbe=n(_A,"P",{});var O5t=s(fbe);Qmr=r(O5t,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),O5t.forEach(t),Wmr=i(_A),Xd=n(_A,"P",{});var nre=s(Xd);Hmr=r(nre,`Note:
Loading a model from its configuration file does `),mbe=n(nre,"STRONG",{});var V5t=s(mbe);Umr=r(V5t,"not"),V5t.forEach(t),Jmr=r(nre,` load the model weights. It only affects the
model\u2019s configuration. Use `),IW=n(nre,"A",{href:!0});var X5t=s(IW);Ymr=r(X5t,"from_pretrained()"),X5t.forEach(t),Kmr=r(nre," to load the model weights."),nre.forEach(t),Zmr=i(_A),T(T8.$$.fragment,_A),_A.forEach(t),egr=i(vl),uo=n(vl,"DIV",{class:!0});var Ca=s(uo);T(Yy.$$.fragment,Ca),ogr=i(Ca),gbe=n(Ca,"P",{});var z5t=s(gbe);rgr=r(z5t,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),z5t.forEach(t),tgr=i(Ca),Ka=n(Ca,"P",{});var uA=s(Ka);agr=r(uA,"The model class to instantiate is selected based on the "),hbe=n(uA,"CODE",{});var Q5t=s(hbe);ngr=r(Q5t,"model_type"),Q5t.forEach(t),sgr=r(uA,` property of the config object (either
passed as an argument or loaded from `),pbe=n(uA,"CODE",{});var W5t=s(pbe);lgr=r(W5t,"pretrained_model_name_or_path"),W5t.forEach(t),igr=r(uA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_be=n(uA,"CODE",{});var H5t=s(_be);dgr=r(H5t,"pretrained_model_name_or_path"),H5t.forEach(t),cgr=r(uA,":"),uA.forEach(t),fgr=i(Ca),Ky=n(Ca,"UL",{});var VXe=s(Ky);M8=n(VXe,"LI",{});var RBe=s(M8);ube=n(RBe,"STRONG",{});var U5t=s(ube);mgr=r(U5t,"detr"),U5t.forEach(t),ggr=r(RBe," \u2014 "),NW=n(RBe,"A",{href:!0});var J5t=s(NW);hgr=r(J5t,"DetrForObjectDetection"),J5t.forEach(t),pgr=r(RBe," (DETR model)"),RBe.forEach(t),_gr=i(VXe),E8=n(VXe,"LI",{});var PBe=s(E8);bbe=n(PBe,"STRONG",{});var Y5t=s(bbe);ugr=r(Y5t,"yolos"),Y5t.forEach(t),bgr=r(PBe," \u2014 "),qW=n(PBe,"A",{href:!0});var K5t=s(qW);vgr=r(K5t,"YolosForObjectDetection"),K5t.forEach(t),Fgr=r(PBe," (YOLOS model)"),PBe.forEach(t),VXe.forEach(t),Tgr=i(Ca),C8=n(Ca,"P",{});var BBe=s(C8);Mgr=r(BBe,"The model is set in evaluation mode by default using "),vbe=n(BBe,"CODE",{});var Z5t=s(vbe);Egr=r(Z5t,"model.eval()"),Z5t.forEach(t),Cgr=r(BBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fbe=n(BBe,"CODE",{});var e3t=s(Fbe);wgr=r(e3t,"model.train()"),e3t.forEach(t),BBe.forEach(t),Agr=i(Ca),T(w8.$$.fragment,Ca),Ca.forEach(t),vl.forEach(t),IOe=i(f),zd=n(f,"H2",{class:!0});var XXe=s(zd);A8=n(XXe,"A",{id:!0,class:!0,href:!0});var o3t=s(A8);Tbe=n(o3t,"SPAN",{});var r3t=s(Tbe);T(Zy.$$.fragment,r3t),r3t.forEach(t),o3t.forEach(t),Lgr=i(XXe),Mbe=n(XXe,"SPAN",{});var t3t=s(Mbe);ygr=r(t3t,"AutoModelForImageSegmentation"),t3t.forEach(t),XXe.forEach(t),NOe=i(f),Jo=n(f,"DIV",{class:!0});var Fl=s(Jo);T(e9.$$.fragment,Fl),xgr=i(Fl),Qd=n(Fl,"P",{});var sre=s(Qd);$gr=r(sre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),jW=n(sre,"A",{href:!0});var a3t=s(jW);kgr=r(a3t,"from_pretrained()"),a3t.forEach(t),Sgr=r(sre," class method or the "),DW=n(sre,"A",{href:!0});var n3t=s(DW);Rgr=r(n3t,"from_config()"),n3t.forEach(t),Pgr=r(sre,` class
method.`),sre.forEach(t),Bgr=i(Fl),o9=n(Fl,"P",{});var zXe=s(o9);Igr=r(zXe,"This class cannot be instantiated directly using "),Ebe=n(zXe,"CODE",{});var s3t=s(Ebe);Ngr=r(s3t,"__init__()"),s3t.forEach(t),qgr=r(zXe," (throws an error)."),zXe.forEach(t),jgr=i(Fl),Lt=n(Fl,"DIV",{class:!0});var bA=s(Lt);T(r9.$$.fragment,bA),Dgr=i(bA),Cbe=n(bA,"P",{});var l3t=s(Cbe);Ggr=r(l3t,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),l3t.forEach(t),Ogr=i(bA),Wd=n(bA,"P",{});var lre=s(Wd);Vgr=r(lre,`Note:
Loading a model from its configuration file does `),wbe=n(lre,"STRONG",{});var i3t=s(wbe);Xgr=r(i3t,"not"),i3t.forEach(t),zgr=r(lre,` load the model weights. It only affects the
model\u2019s configuration. Use `),GW=n(lre,"A",{href:!0});var d3t=s(GW);Qgr=r(d3t,"from_pretrained()"),d3t.forEach(t),Wgr=r(lre," to load the model weights."),lre.forEach(t),Hgr=i(bA),T(L8.$$.fragment,bA),bA.forEach(t),Ugr=i(Fl),bo=n(Fl,"DIV",{class:!0});var wa=s(bo);T(t9.$$.fragment,wa),Jgr=i(wa),Abe=n(wa,"P",{});var c3t=s(Abe);Ygr=r(c3t,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),c3t.forEach(t),Kgr=i(wa),Za=n(wa,"P",{});var vA=s(Za);Zgr=r(vA,"The model class to instantiate is selected based on the "),Lbe=n(vA,"CODE",{});var f3t=s(Lbe);ehr=r(f3t,"model_type"),f3t.forEach(t),ohr=r(vA,` property of the config object (either
passed as an argument or loaded from `),ybe=n(vA,"CODE",{});var m3t=s(ybe);rhr=r(m3t,"pretrained_model_name_or_path"),m3t.forEach(t),thr=r(vA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xbe=n(vA,"CODE",{});var g3t=s(xbe);ahr=r(g3t,"pretrained_model_name_or_path"),g3t.forEach(t),nhr=r(vA,":"),vA.forEach(t),shr=i(wa),$be=n(wa,"UL",{});var h3t=s($be);y8=n(h3t,"LI",{});var IBe=s(y8);kbe=n(IBe,"STRONG",{});var p3t=s(kbe);lhr=r(p3t,"detr"),p3t.forEach(t),ihr=r(IBe," \u2014 "),OW=n(IBe,"A",{href:!0});var _3t=s(OW);dhr=r(_3t,"DetrForSegmentation"),_3t.forEach(t),chr=r(IBe," (DETR model)"),IBe.forEach(t),h3t.forEach(t),fhr=i(wa),x8=n(wa,"P",{});var NBe=s(x8);mhr=r(NBe,"The model is set in evaluation mode by default using "),Sbe=n(NBe,"CODE",{});var u3t=s(Sbe);ghr=r(u3t,"model.eval()"),u3t.forEach(t),hhr=r(NBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rbe=n(NBe,"CODE",{});var b3t=s(Rbe);phr=r(b3t,"model.train()"),b3t.forEach(t),NBe.forEach(t),_hr=i(wa),T($8.$$.fragment,wa),wa.forEach(t),Fl.forEach(t),qOe=i(f),Hd=n(f,"H2",{class:!0});var QXe=s(Hd);k8=n(QXe,"A",{id:!0,class:!0,href:!0});var v3t=s(k8);Pbe=n(v3t,"SPAN",{});var F3t=s(Pbe);T(a9.$$.fragment,F3t),F3t.forEach(t),v3t.forEach(t),uhr=i(QXe),Bbe=n(QXe,"SPAN",{});var T3t=s(Bbe);bhr=r(T3t,"AutoModelForSemanticSegmentation"),T3t.forEach(t),QXe.forEach(t),jOe=i(f),Yo=n(f,"DIV",{class:!0});var Tl=s(Yo);T(n9.$$.fragment,Tl),vhr=i(Tl),Ud=n(Tl,"P",{});var ire=s(Ud);Fhr=r(ire,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),VW=n(ire,"A",{href:!0});var M3t=s(VW);Thr=r(M3t,"from_pretrained()"),M3t.forEach(t),Mhr=r(ire," class method or the "),XW=n(ire,"A",{href:!0});var E3t=s(XW);Ehr=r(E3t,"from_config()"),E3t.forEach(t),Chr=r(ire,` class
method.`),ire.forEach(t),whr=i(Tl),s9=n(Tl,"P",{});var WXe=s(s9);Ahr=r(WXe,"This class cannot be instantiated directly using "),Ibe=n(WXe,"CODE",{});var C3t=s(Ibe);Lhr=r(C3t,"__init__()"),C3t.forEach(t),yhr=r(WXe," (throws an error)."),WXe.forEach(t),xhr=i(Tl),yt=n(Tl,"DIV",{class:!0});var FA=s(yt);T(l9.$$.fragment,FA),$hr=i(FA),Nbe=n(FA,"P",{});var w3t=s(Nbe);khr=r(w3t,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),w3t.forEach(t),Shr=i(FA),Jd=n(FA,"P",{});var dre=s(Jd);Rhr=r(dre,`Note:
Loading a model from its configuration file does `),qbe=n(dre,"STRONG",{});var A3t=s(qbe);Phr=r(A3t,"not"),A3t.forEach(t),Bhr=r(dre,` load the model weights. It only affects the
model\u2019s configuration. Use `),zW=n(dre,"A",{href:!0});var L3t=s(zW);Ihr=r(L3t,"from_pretrained()"),L3t.forEach(t),Nhr=r(dre," to load the model weights."),dre.forEach(t),qhr=i(FA),T(S8.$$.fragment,FA),FA.forEach(t),jhr=i(Tl),vo=n(Tl,"DIV",{class:!0});var Aa=s(vo);T(i9.$$.fragment,Aa),Dhr=i(Aa),jbe=n(Aa,"P",{});var y3t=s(jbe);Ghr=r(y3t,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),y3t.forEach(t),Ohr=i(Aa),en=n(Aa,"P",{});var TA=s(en);Vhr=r(TA,"The model class to instantiate is selected based on the "),Dbe=n(TA,"CODE",{});var x3t=s(Dbe);Xhr=r(x3t,"model_type"),x3t.forEach(t),zhr=r(TA,` property of the config object (either
passed as an argument or loaded from `),Gbe=n(TA,"CODE",{});var $3t=s(Gbe);Qhr=r($3t,"pretrained_model_name_or_path"),$3t.forEach(t),Whr=r(TA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Obe=n(TA,"CODE",{});var k3t=s(Obe);Hhr=r(k3t,"pretrained_model_name_or_path"),k3t.forEach(t),Uhr=r(TA,":"),TA.forEach(t),Jhr=i(Aa),on=n(Aa,"UL",{});var MA=s(on);R8=n(MA,"LI",{});var qBe=s(R8);Vbe=n(qBe,"STRONG",{});var S3t=s(Vbe);Yhr=r(S3t,"beit"),S3t.forEach(t),Khr=r(qBe," \u2014 "),QW=n(qBe,"A",{href:!0});var R3t=s(QW);Zhr=r(R3t,"BeitForSemanticSegmentation"),R3t.forEach(t),epr=r(qBe," (BEiT model)"),qBe.forEach(t),opr=i(MA),P8=n(MA,"LI",{});var jBe=s(P8);Xbe=n(jBe,"STRONG",{});var P3t=s(Xbe);rpr=r(P3t,"data2vec-vision"),P3t.forEach(t),tpr=r(jBe," \u2014 "),WW=n(jBe,"A",{href:!0});var B3t=s(WW);apr=r(B3t,"Data2VecVisionForSemanticSegmentation"),B3t.forEach(t),npr=r(jBe," (Data2VecVision model)"),jBe.forEach(t),spr=i(MA),B8=n(MA,"LI",{});var DBe=s(B8);zbe=n(DBe,"STRONG",{});var I3t=s(zbe);lpr=r(I3t,"dpt"),I3t.forEach(t),ipr=r(DBe," \u2014 "),HW=n(DBe,"A",{href:!0});var N3t=s(HW);dpr=r(N3t,"DPTForSemanticSegmentation"),N3t.forEach(t),cpr=r(DBe," (DPT model)"),DBe.forEach(t),fpr=i(MA),I8=n(MA,"LI",{});var GBe=s(I8);Qbe=n(GBe,"STRONG",{});var q3t=s(Qbe);mpr=r(q3t,"segformer"),q3t.forEach(t),gpr=r(GBe," \u2014 "),UW=n(GBe,"A",{href:!0});var j3t=s(UW);hpr=r(j3t,"SegformerForSemanticSegmentation"),j3t.forEach(t),ppr=r(GBe," (SegFormer model)"),GBe.forEach(t),MA.forEach(t),_pr=i(Aa),N8=n(Aa,"P",{});var OBe=s(N8);upr=r(OBe,"The model is set in evaluation mode by default using "),Wbe=n(OBe,"CODE",{});var D3t=s(Wbe);bpr=r(D3t,"model.eval()"),D3t.forEach(t),vpr=r(OBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hbe=n(OBe,"CODE",{});var G3t=s(Hbe);Fpr=r(G3t,"model.train()"),G3t.forEach(t),OBe.forEach(t),Tpr=i(Aa),T(q8.$$.fragment,Aa),Aa.forEach(t),Tl.forEach(t),DOe=i(f),Yd=n(f,"H2",{class:!0});var HXe=s(Yd);j8=n(HXe,"A",{id:!0,class:!0,href:!0});var O3t=s(j8);Ube=n(O3t,"SPAN",{});var V3t=s(Ube);T(d9.$$.fragment,V3t),V3t.forEach(t),O3t.forEach(t),Mpr=i(HXe),Jbe=n(HXe,"SPAN",{});var X3t=s(Jbe);Epr=r(X3t,"AutoModelForInstanceSegmentation"),X3t.forEach(t),HXe.forEach(t),GOe=i(f),Ko=n(f,"DIV",{class:!0});var Ml=s(Ko);T(c9.$$.fragment,Ml),Cpr=i(Ml),Kd=n(Ml,"P",{});var cre=s(Kd);wpr=r(cre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),JW=n(cre,"A",{href:!0});var z3t=s(JW);Apr=r(z3t,"from_pretrained()"),z3t.forEach(t),Lpr=r(cre," class method or the "),YW=n(cre,"A",{href:!0});var Q3t=s(YW);ypr=r(Q3t,"from_config()"),Q3t.forEach(t),xpr=r(cre,` class
method.`),cre.forEach(t),$pr=i(Ml),f9=n(Ml,"P",{});var UXe=s(f9);kpr=r(UXe,"This class cannot be instantiated directly using "),Ybe=n(UXe,"CODE",{});var W3t=s(Ybe);Spr=r(W3t,"__init__()"),W3t.forEach(t),Rpr=r(UXe," (throws an error)."),UXe.forEach(t),Ppr=i(Ml),xt=n(Ml,"DIV",{class:!0});var EA=s(xt);T(m9.$$.fragment,EA),Bpr=i(EA),Kbe=n(EA,"P",{});var H3t=s(Kbe);Ipr=r(H3t,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),H3t.forEach(t),Npr=i(EA),Zd=n(EA,"P",{});var fre=s(Zd);qpr=r(fre,`Note:
Loading a model from its configuration file does `),Zbe=n(fre,"STRONG",{});var U3t=s(Zbe);jpr=r(U3t,"not"),U3t.forEach(t),Dpr=r(fre,` load the model weights. It only affects the
model\u2019s configuration. Use `),KW=n(fre,"A",{href:!0});var J3t=s(KW);Gpr=r(J3t,"from_pretrained()"),J3t.forEach(t),Opr=r(fre," to load the model weights."),fre.forEach(t),Vpr=i(EA),T(D8.$$.fragment,EA),EA.forEach(t),Xpr=i(Ml),Fo=n(Ml,"DIV",{class:!0});var La=s(Fo);T(g9.$$.fragment,La),zpr=i(La),eve=n(La,"P",{});var Y3t=s(eve);Qpr=r(Y3t,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Y3t.forEach(t),Wpr=i(La),rn=n(La,"P",{});var CA=s(rn);Hpr=r(CA,"The model class to instantiate is selected based on the "),ove=n(CA,"CODE",{});var K3t=s(ove);Upr=r(K3t,"model_type"),K3t.forEach(t),Jpr=r(CA,` property of the config object (either
passed as an argument or loaded from `),rve=n(CA,"CODE",{});var Z3t=s(rve);Ypr=r(Z3t,"pretrained_model_name_or_path"),Z3t.forEach(t),Kpr=r(CA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tve=n(CA,"CODE",{});var e0t=s(tve);Zpr=r(e0t,"pretrained_model_name_or_path"),e0t.forEach(t),e_r=r(CA,":"),CA.forEach(t),o_r=i(La),ave=n(La,"UL",{});var o0t=s(ave);G8=n(o0t,"LI",{});var VBe=s(G8);nve=n(VBe,"STRONG",{});var r0t=s(nve);r_r=r(r0t,"maskformer"),r0t.forEach(t),t_r=r(VBe," \u2014 "),ZW=n(VBe,"A",{href:!0});var t0t=s(ZW);a_r=r(t0t,"MaskFormerForInstanceSegmentation"),t0t.forEach(t),n_r=r(VBe," (MaskFormer model)"),VBe.forEach(t),o0t.forEach(t),s_r=i(La),O8=n(La,"P",{});var XBe=s(O8);l_r=r(XBe,"The model is set in evaluation mode by default using "),sve=n(XBe,"CODE",{});var a0t=s(sve);i_r=r(a0t,"model.eval()"),a0t.forEach(t),d_r=r(XBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lve=n(XBe,"CODE",{});var n0t=s(lve);c_r=r(n0t,"model.train()"),n0t.forEach(t),XBe.forEach(t),f_r=i(La),T(V8.$$.fragment,La),La.forEach(t),Ml.forEach(t),OOe=i(f),ec=n(f,"H2",{class:!0});var JXe=s(ec);X8=n(JXe,"A",{id:!0,class:!0,href:!0});var s0t=s(X8);ive=n(s0t,"SPAN",{});var l0t=s(ive);T(h9.$$.fragment,l0t),l0t.forEach(t),s0t.forEach(t),m_r=i(JXe),dve=n(JXe,"SPAN",{});var i0t=s(dve);g_r=r(i0t,"TFAutoModel"),i0t.forEach(t),JXe.forEach(t),VOe=i(f),Zo=n(f,"DIV",{class:!0});var El=s(Zo);T(p9.$$.fragment,El),h_r=i(El),oc=n(El,"P",{});var mre=s(oc);p_r=r(mre,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),eH=n(mre,"A",{href:!0});var d0t=s(eH);__r=r(d0t,"from_pretrained()"),d0t.forEach(t),u_r=r(mre," class method or the "),oH=n(mre,"A",{href:!0});var c0t=s(oH);b_r=r(c0t,"from_config()"),c0t.forEach(t),v_r=r(mre,` class
method.`),mre.forEach(t),F_r=i(El),_9=n(El,"P",{});var YXe=s(_9);T_r=r(YXe,"This class cannot be instantiated directly using "),cve=n(YXe,"CODE",{});var f0t=s(cve);M_r=r(f0t,"__init__()"),f0t.forEach(t),E_r=r(YXe," (throws an error)."),YXe.forEach(t),C_r=i(El),$t=n(El,"DIV",{class:!0});var wA=s($t);T(u9.$$.fragment,wA),w_r=i(wA),fve=n(wA,"P",{});var m0t=s(fve);A_r=r(m0t,"Instantiates one of the base model classes of the library from a configuration."),m0t.forEach(t),L_r=i(wA),rc=n(wA,"P",{});var gre=s(rc);y_r=r(gre,`Note:
Loading a model from its configuration file does `),mve=n(gre,"STRONG",{});var g0t=s(mve);x_r=r(g0t,"not"),g0t.forEach(t),$_r=r(gre,` load the model weights. It only affects the
model\u2019s configuration. Use `),rH=n(gre,"A",{href:!0});var h0t=s(rH);k_r=r(h0t,"from_pretrained()"),h0t.forEach(t),S_r=r(gre," to load the model weights."),gre.forEach(t),R_r=i(wA),T(z8.$$.fragment,wA),wA.forEach(t),P_r=i(El),Lr=n(El,"DIV",{class:!0});var Cl=s(Lr);T(b9.$$.fragment,Cl),B_r=i(Cl),gve=n(Cl,"P",{});var p0t=s(gve);I_r=r(p0t,"Instantiate one of the base model classes of the library from a pretrained model."),p0t.forEach(t),N_r=i(Cl),tn=n(Cl,"P",{});var AA=s(tn);q_r=r(AA,"The model class to instantiate is selected based on the "),hve=n(AA,"CODE",{});var _0t=s(hve);j_r=r(_0t,"model_type"),_0t.forEach(t),D_r=r(AA,` property of the config object (either
passed as an argument or loaded from `),pve=n(AA,"CODE",{});var u0t=s(pve);G_r=r(u0t,"pretrained_model_name_or_path"),u0t.forEach(t),O_r=r(AA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ve=n(AA,"CODE",{});var b0t=s(_ve);V_r=r(b0t,"pretrained_model_name_or_path"),b0t.forEach(t),X_r=r(AA,":"),AA.forEach(t),z_r=i(Cl),j=n(Cl,"UL",{});var D=s(j);Q8=n(D,"LI",{});var zBe=s(Q8);uve=n(zBe,"STRONG",{});var v0t=s(uve);Q_r=r(v0t,"albert"),v0t.forEach(t),W_r=r(zBe," \u2014 "),tH=n(zBe,"A",{href:!0});var F0t=s(tH);H_r=r(F0t,"TFAlbertModel"),F0t.forEach(t),U_r=r(zBe," (ALBERT model)"),zBe.forEach(t),J_r=i(D),W8=n(D,"LI",{});var QBe=s(W8);bve=n(QBe,"STRONG",{});var T0t=s(bve);Y_r=r(T0t,"bart"),T0t.forEach(t),K_r=r(QBe," \u2014 "),aH=n(QBe,"A",{href:!0});var M0t=s(aH);Z_r=r(M0t,"TFBartModel"),M0t.forEach(t),eur=r(QBe," (BART model)"),QBe.forEach(t),our=i(D),H8=n(D,"LI",{});var WBe=s(H8);vve=n(WBe,"STRONG",{});var E0t=s(vve);rur=r(E0t,"bert"),E0t.forEach(t),tur=r(WBe," \u2014 "),nH=n(WBe,"A",{href:!0});var C0t=s(nH);aur=r(C0t,"TFBertModel"),C0t.forEach(t),nur=r(WBe," (BERT model)"),WBe.forEach(t),sur=i(D),U8=n(D,"LI",{});var HBe=s(U8);Fve=n(HBe,"STRONG",{});var w0t=s(Fve);lur=r(w0t,"blenderbot"),w0t.forEach(t),iur=r(HBe," \u2014 "),sH=n(HBe,"A",{href:!0});var A0t=s(sH);dur=r(A0t,"TFBlenderbotModel"),A0t.forEach(t),cur=r(HBe," (Blenderbot model)"),HBe.forEach(t),fur=i(D),J8=n(D,"LI",{});var UBe=s(J8);Tve=n(UBe,"STRONG",{});var L0t=s(Tve);mur=r(L0t,"blenderbot-small"),L0t.forEach(t),gur=r(UBe," \u2014 "),lH=n(UBe,"A",{href:!0});var y0t=s(lH);hur=r(y0t,"TFBlenderbotSmallModel"),y0t.forEach(t),pur=r(UBe," (BlenderbotSmall model)"),UBe.forEach(t),_ur=i(D),Y8=n(D,"LI",{});var JBe=s(Y8);Mve=n(JBe,"STRONG",{});var x0t=s(Mve);uur=r(x0t,"camembert"),x0t.forEach(t),bur=r(JBe," \u2014 "),iH=n(JBe,"A",{href:!0});var $0t=s(iH);vur=r($0t,"TFCamembertModel"),$0t.forEach(t),Fur=r(JBe," (CamemBERT model)"),JBe.forEach(t),Tur=i(D),K8=n(D,"LI",{});var YBe=s(K8);Eve=n(YBe,"STRONG",{});var k0t=s(Eve);Mur=r(k0t,"clip"),k0t.forEach(t),Eur=r(YBe," \u2014 "),dH=n(YBe,"A",{href:!0});var S0t=s(dH);Cur=r(S0t,"TFCLIPModel"),S0t.forEach(t),wur=r(YBe," (CLIP model)"),YBe.forEach(t),Aur=i(D),Z8=n(D,"LI",{});var KBe=s(Z8);Cve=n(KBe,"STRONG",{});var R0t=s(Cve);Lur=r(R0t,"convbert"),R0t.forEach(t),yur=r(KBe," \u2014 "),cH=n(KBe,"A",{href:!0});var P0t=s(cH);xur=r(P0t,"TFConvBertModel"),P0t.forEach(t),$ur=r(KBe," (ConvBERT model)"),KBe.forEach(t),kur=i(D),eM=n(D,"LI",{});var ZBe=s(eM);wve=n(ZBe,"STRONG",{});var B0t=s(wve);Sur=r(B0t,"convnext"),B0t.forEach(t),Rur=r(ZBe," \u2014 "),fH=n(ZBe,"A",{href:!0});var I0t=s(fH);Pur=r(I0t,"TFConvNextModel"),I0t.forEach(t),Bur=r(ZBe," (ConvNeXT model)"),ZBe.forEach(t),Iur=i(D),oM=n(D,"LI",{});var eIe=s(oM);Ave=n(eIe,"STRONG",{});var N0t=s(Ave);Nur=r(N0t,"ctrl"),N0t.forEach(t),qur=r(eIe," \u2014 "),mH=n(eIe,"A",{href:!0});var q0t=s(mH);jur=r(q0t,"TFCTRLModel"),q0t.forEach(t),Dur=r(eIe," (CTRL model)"),eIe.forEach(t),Gur=i(D),rM=n(D,"LI",{});var oIe=s(rM);Lve=n(oIe,"STRONG",{});var j0t=s(Lve);Our=r(j0t,"data2vec-vision"),j0t.forEach(t),Vur=r(oIe," \u2014 "),gH=n(oIe,"A",{href:!0});var D0t=s(gH);Xur=r(D0t,"TFData2VecVisionModel"),D0t.forEach(t),zur=r(oIe," (Data2VecVision model)"),oIe.forEach(t),Qur=i(D),tM=n(D,"LI",{});var rIe=s(tM);yve=n(rIe,"STRONG",{});var G0t=s(yve);Wur=r(G0t,"deberta"),G0t.forEach(t),Hur=r(rIe," \u2014 "),hH=n(rIe,"A",{href:!0});var O0t=s(hH);Uur=r(O0t,"TFDebertaModel"),O0t.forEach(t),Jur=r(rIe," (DeBERTa model)"),rIe.forEach(t),Yur=i(D),aM=n(D,"LI",{});var tIe=s(aM);xve=n(tIe,"STRONG",{});var V0t=s(xve);Kur=r(V0t,"deberta-v2"),V0t.forEach(t),Zur=r(tIe," \u2014 "),pH=n(tIe,"A",{href:!0});var X0t=s(pH);e7r=r(X0t,"TFDebertaV2Model"),X0t.forEach(t),o7r=r(tIe," (DeBERTa-v2 model)"),tIe.forEach(t),r7r=i(D),nM=n(D,"LI",{});var aIe=s(nM);$ve=n(aIe,"STRONG",{});var z0t=s($ve);t7r=r(z0t,"distilbert"),z0t.forEach(t),a7r=r(aIe," \u2014 "),_H=n(aIe,"A",{href:!0});var Q0t=s(_H);n7r=r(Q0t,"TFDistilBertModel"),Q0t.forEach(t),s7r=r(aIe," (DistilBERT model)"),aIe.forEach(t),l7r=i(D),sM=n(D,"LI",{});var nIe=s(sM);kve=n(nIe,"STRONG",{});var W0t=s(kve);i7r=r(W0t,"dpr"),W0t.forEach(t),d7r=r(nIe," \u2014 "),uH=n(nIe,"A",{href:!0});var H0t=s(uH);c7r=r(H0t,"TFDPRQuestionEncoder"),H0t.forEach(t),f7r=r(nIe," (DPR model)"),nIe.forEach(t),m7r=i(D),lM=n(D,"LI",{});var sIe=s(lM);Sve=n(sIe,"STRONG",{});var U0t=s(Sve);g7r=r(U0t,"electra"),U0t.forEach(t),h7r=r(sIe," \u2014 "),bH=n(sIe,"A",{href:!0});var J0t=s(bH);p7r=r(J0t,"TFElectraModel"),J0t.forEach(t),_7r=r(sIe," (ELECTRA model)"),sIe.forEach(t),u7r=i(D),iM=n(D,"LI",{});var lIe=s(iM);Rve=n(lIe,"STRONG",{});var Y0t=s(Rve);b7r=r(Y0t,"flaubert"),Y0t.forEach(t),v7r=r(lIe," \u2014 "),vH=n(lIe,"A",{href:!0});var K0t=s(vH);F7r=r(K0t,"TFFlaubertModel"),K0t.forEach(t),T7r=r(lIe," (FlauBERT model)"),lIe.forEach(t),M7r=i(D),zs=n(D,"LI",{});var eS=s(zs);Pve=n(eS,"STRONG",{});var Z0t=s(Pve);E7r=r(Z0t,"funnel"),Z0t.forEach(t),C7r=r(eS," \u2014 "),FH=n(eS,"A",{href:!0});var ewt=s(FH);w7r=r(ewt,"TFFunnelModel"),ewt.forEach(t),A7r=r(eS," or "),TH=n(eS,"A",{href:!0});var owt=s(TH);L7r=r(owt,"TFFunnelBaseModel"),owt.forEach(t),y7r=r(eS," (Funnel Transformer model)"),eS.forEach(t),x7r=i(D),dM=n(D,"LI",{});var iIe=s(dM);Bve=n(iIe,"STRONG",{});var rwt=s(Bve);$7r=r(rwt,"gpt2"),rwt.forEach(t),k7r=r(iIe," \u2014 "),MH=n(iIe,"A",{href:!0});var twt=s(MH);S7r=r(twt,"TFGPT2Model"),twt.forEach(t),R7r=r(iIe," (OpenAI GPT-2 model)"),iIe.forEach(t),P7r=i(D),cM=n(D,"LI",{});var dIe=s(cM);Ive=n(dIe,"STRONG",{});var awt=s(Ive);B7r=r(awt,"gptj"),awt.forEach(t),I7r=r(dIe," \u2014 "),EH=n(dIe,"A",{href:!0});var nwt=s(EH);N7r=r(nwt,"TFGPTJModel"),nwt.forEach(t),q7r=r(dIe," (GPT-J model)"),dIe.forEach(t),j7r=i(D),fM=n(D,"LI",{});var cIe=s(fM);Nve=n(cIe,"STRONG",{});var swt=s(Nve);D7r=r(swt,"hubert"),swt.forEach(t),G7r=r(cIe," \u2014 "),CH=n(cIe,"A",{href:!0});var lwt=s(CH);O7r=r(lwt,"TFHubertModel"),lwt.forEach(t),V7r=r(cIe," (Hubert model)"),cIe.forEach(t),X7r=i(D),mM=n(D,"LI",{});var fIe=s(mM);qve=n(fIe,"STRONG",{});var iwt=s(qve);z7r=r(iwt,"layoutlm"),iwt.forEach(t),Q7r=r(fIe," \u2014 "),wH=n(fIe,"A",{href:!0});var dwt=s(wH);W7r=r(dwt,"TFLayoutLMModel"),dwt.forEach(t),H7r=r(fIe," (LayoutLM model)"),fIe.forEach(t),U7r=i(D),gM=n(D,"LI",{});var mIe=s(gM);jve=n(mIe,"STRONG",{});var cwt=s(jve);J7r=r(cwt,"led"),cwt.forEach(t),Y7r=r(mIe," \u2014 "),AH=n(mIe,"A",{href:!0});var fwt=s(AH);K7r=r(fwt,"TFLEDModel"),fwt.forEach(t),Z7r=r(mIe," (LED model)"),mIe.forEach(t),e1r=i(D),hM=n(D,"LI",{});var gIe=s(hM);Dve=n(gIe,"STRONG",{});var mwt=s(Dve);o1r=r(mwt,"longformer"),mwt.forEach(t),r1r=r(gIe," \u2014 "),LH=n(gIe,"A",{href:!0});var gwt=s(LH);t1r=r(gwt,"TFLongformerModel"),gwt.forEach(t),a1r=r(gIe," (Longformer model)"),gIe.forEach(t),n1r=i(D),pM=n(D,"LI",{});var hIe=s(pM);Gve=n(hIe,"STRONG",{});var hwt=s(Gve);s1r=r(hwt,"lxmert"),hwt.forEach(t),l1r=r(hIe," \u2014 "),yH=n(hIe,"A",{href:!0});var pwt=s(yH);i1r=r(pwt,"TFLxmertModel"),pwt.forEach(t),d1r=r(hIe," (LXMERT model)"),hIe.forEach(t),c1r=i(D),_M=n(D,"LI",{});var pIe=s(_M);Ove=n(pIe,"STRONG",{});var _wt=s(Ove);f1r=r(_wt,"marian"),_wt.forEach(t),m1r=r(pIe," \u2014 "),xH=n(pIe,"A",{href:!0});var uwt=s(xH);g1r=r(uwt,"TFMarianModel"),uwt.forEach(t),h1r=r(pIe," (Marian model)"),pIe.forEach(t),p1r=i(D),uM=n(D,"LI",{});var _Ie=s(uM);Vve=n(_Ie,"STRONG",{});var bwt=s(Vve);_1r=r(bwt,"mbart"),bwt.forEach(t),u1r=r(_Ie," \u2014 "),$H=n(_Ie,"A",{href:!0});var vwt=s($H);b1r=r(vwt,"TFMBartModel"),vwt.forEach(t),v1r=r(_Ie," (mBART model)"),_Ie.forEach(t),F1r=i(D),bM=n(D,"LI",{});var uIe=s(bM);Xve=n(uIe,"STRONG",{});var Fwt=s(Xve);T1r=r(Fwt,"mobilebert"),Fwt.forEach(t),M1r=r(uIe," \u2014 "),kH=n(uIe,"A",{href:!0});var Twt=s(kH);E1r=r(Twt,"TFMobileBertModel"),Twt.forEach(t),C1r=r(uIe," (MobileBERT model)"),uIe.forEach(t),w1r=i(D),vM=n(D,"LI",{});var bIe=s(vM);zve=n(bIe,"STRONG",{});var Mwt=s(zve);A1r=r(Mwt,"mpnet"),Mwt.forEach(t),L1r=r(bIe," \u2014 "),SH=n(bIe,"A",{href:!0});var Ewt=s(SH);y1r=r(Ewt,"TFMPNetModel"),Ewt.forEach(t),x1r=r(bIe," (MPNet model)"),bIe.forEach(t),$1r=i(D),FM=n(D,"LI",{});var vIe=s(FM);Qve=n(vIe,"STRONG",{});var Cwt=s(Qve);k1r=r(Cwt,"mt5"),Cwt.forEach(t),S1r=r(vIe," \u2014 "),RH=n(vIe,"A",{href:!0});var wwt=s(RH);R1r=r(wwt,"TFMT5Model"),wwt.forEach(t),P1r=r(vIe," (MT5 model)"),vIe.forEach(t),B1r=i(D),TM=n(D,"LI",{});var FIe=s(TM);Wve=n(FIe,"STRONG",{});var Awt=s(Wve);I1r=r(Awt,"openai-gpt"),Awt.forEach(t),N1r=r(FIe," \u2014 "),PH=n(FIe,"A",{href:!0});var Lwt=s(PH);q1r=r(Lwt,"TFOpenAIGPTModel"),Lwt.forEach(t),j1r=r(FIe," (OpenAI GPT model)"),FIe.forEach(t),D1r=i(D),MM=n(D,"LI",{});var TIe=s(MM);Hve=n(TIe,"STRONG",{});var ywt=s(Hve);G1r=r(ywt,"opt"),ywt.forEach(t),O1r=r(TIe," \u2014 "),BH=n(TIe,"A",{href:!0});var xwt=s(BH);V1r=r(xwt,"TFOPTModel"),xwt.forEach(t),X1r=r(TIe," (OPT model)"),TIe.forEach(t),z1r=i(D),EM=n(D,"LI",{});var MIe=s(EM);Uve=n(MIe,"STRONG",{});var $wt=s(Uve);Q1r=r($wt,"pegasus"),$wt.forEach(t),W1r=r(MIe," \u2014 "),IH=n(MIe,"A",{href:!0});var kwt=s(IH);H1r=r(kwt,"TFPegasusModel"),kwt.forEach(t),U1r=r(MIe," (Pegasus model)"),MIe.forEach(t),J1r=i(D),CM=n(D,"LI",{});var EIe=s(CM);Jve=n(EIe,"STRONG",{});var Swt=s(Jve);Y1r=r(Swt,"rembert"),Swt.forEach(t),K1r=r(EIe," \u2014 "),NH=n(EIe,"A",{href:!0});var Rwt=s(NH);Z1r=r(Rwt,"TFRemBertModel"),Rwt.forEach(t),e2r=r(EIe," (RemBERT model)"),EIe.forEach(t),o2r=i(D),wM=n(D,"LI",{});var CIe=s(wM);Yve=n(CIe,"STRONG",{});var Pwt=s(Yve);r2r=r(Pwt,"roberta"),Pwt.forEach(t),t2r=r(CIe," \u2014 "),qH=n(CIe,"A",{href:!0});var Bwt=s(qH);a2r=r(Bwt,"TFRobertaModel"),Bwt.forEach(t),n2r=r(CIe," (RoBERTa model)"),CIe.forEach(t),s2r=i(D),AM=n(D,"LI",{});var wIe=s(AM);Kve=n(wIe,"STRONG",{});var Iwt=s(Kve);l2r=r(Iwt,"roformer"),Iwt.forEach(t),i2r=r(wIe," \u2014 "),jH=n(wIe,"A",{href:!0});var Nwt=s(jH);d2r=r(Nwt,"TFRoFormerModel"),Nwt.forEach(t),c2r=r(wIe," (RoFormer model)"),wIe.forEach(t),f2r=i(D),LM=n(D,"LI",{});var AIe=s(LM);Zve=n(AIe,"STRONG",{});var qwt=s(Zve);m2r=r(qwt,"speech_to_text"),qwt.forEach(t),g2r=r(AIe," \u2014 "),DH=n(AIe,"A",{href:!0});var jwt=s(DH);h2r=r(jwt,"TFSpeech2TextModel"),jwt.forEach(t),p2r=r(AIe," (Speech2Text model)"),AIe.forEach(t),_2r=i(D),yM=n(D,"LI",{});var LIe=s(yM);eFe=n(LIe,"STRONG",{});var Dwt=s(eFe);u2r=r(Dwt,"swin"),Dwt.forEach(t),b2r=r(LIe," \u2014 "),GH=n(LIe,"A",{href:!0});var Gwt=s(GH);v2r=r(Gwt,"TFSwinModel"),Gwt.forEach(t),F2r=r(LIe," (Swin Transformer model)"),LIe.forEach(t),T2r=i(D),xM=n(D,"LI",{});var yIe=s(xM);oFe=n(yIe,"STRONG",{});var Owt=s(oFe);M2r=r(Owt,"t5"),Owt.forEach(t),E2r=r(yIe," \u2014 "),OH=n(yIe,"A",{href:!0});var Vwt=s(OH);C2r=r(Vwt,"TFT5Model"),Vwt.forEach(t),w2r=r(yIe," (T5 model)"),yIe.forEach(t),A2r=i(D),$M=n(D,"LI",{});var xIe=s($M);rFe=n(xIe,"STRONG",{});var Xwt=s(rFe);L2r=r(Xwt,"tapas"),Xwt.forEach(t),y2r=r(xIe," \u2014 "),VH=n(xIe,"A",{href:!0});var zwt=s(VH);x2r=r(zwt,"TFTapasModel"),zwt.forEach(t),$2r=r(xIe," (TAPAS model)"),xIe.forEach(t),k2r=i(D),kM=n(D,"LI",{});var $Ie=s(kM);tFe=n($Ie,"STRONG",{});var Qwt=s(tFe);S2r=r(Qwt,"transfo-xl"),Qwt.forEach(t),R2r=r($Ie," \u2014 "),XH=n($Ie,"A",{href:!0});var Wwt=s(XH);P2r=r(Wwt,"TFTransfoXLModel"),Wwt.forEach(t),B2r=r($Ie," (Transformer-XL model)"),$Ie.forEach(t),I2r=i(D),SM=n(D,"LI",{});var kIe=s(SM);aFe=n(kIe,"STRONG",{});var Hwt=s(aFe);N2r=r(Hwt,"vit"),Hwt.forEach(t),q2r=r(kIe," \u2014 "),zH=n(kIe,"A",{href:!0});var Uwt=s(zH);j2r=r(Uwt,"TFViTModel"),Uwt.forEach(t),D2r=r(kIe," (ViT model)"),kIe.forEach(t),G2r=i(D),RM=n(D,"LI",{});var SIe=s(RM);nFe=n(SIe,"STRONG",{});var Jwt=s(nFe);O2r=r(Jwt,"vit_mae"),Jwt.forEach(t),V2r=r(SIe," \u2014 "),QH=n(SIe,"A",{href:!0});var Ywt=s(QH);X2r=r(Ywt,"TFViTMAEModel"),Ywt.forEach(t),z2r=r(SIe," (ViTMAE model)"),SIe.forEach(t),Q2r=i(D),PM=n(D,"LI",{});var RIe=s(PM);sFe=n(RIe,"STRONG",{});var Kwt=s(sFe);W2r=r(Kwt,"wav2vec2"),Kwt.forEach(t),H2r=r(RIe," \u2014 "),WH=n(RIe,"A",{href:!0});var Zwt=s(WH);U2r=r(Zwt,"TFWav2Vec2Model"),Zwt.forEach(t),J2r=r(RIe," (Wav2Vec2 model)"),RIe.forEach(t),Y2r=i(D),BM=n(D,"LI",{});var PIe=s(BM);lFe=n(PIe,"STRONG",{});var eAt=s(lFe);K2r=r(eAt,"xlm"),eAt.forEach(t),Z2r=r(PIe," \u2014 "),HH=n(PIe,"A",{href:!0});var oAt=s(HH);ebr=r(oAt,"TFXLMModel"),oAt.forEach(t),obr=r(PIe," (XLM model)"),PIe.forEach(t),rbr=i(D),IM=n(D,"LI",{});var BIe=s(IM);iFe=n(BIe,"STRONG",{});var rAt=s(iFe);tbr=r(rAt,"xlm-roberta"),rAt.forEach(t),abr=r(BIe," \u2014 "),UH=n(BIe,"A",{href:!0});var tAt=s(UH);nbr=r(tAt,"TFXLMRobertaModel"),tAt.forEach(t),sbr=r(BIe," (XLM-RoBERTa model)"),BIe.forEach(t),lbr=i(D),NM=n(D,"LI",{});var IIe=s(NM);dFe=n(IIe,"STRONG",{});var aAt=s(dFe);ibr=r(aAt,"xlnet"),aAt.forEach(t),dbr=r(IIe," \u2014 "),JH=n(IIe,"A",{href:!0});var nAt=s(JH);cbr=r(nAt,"TFXLNetModel"),nAt.forEach(t),fbr=r(IIe," (XLNet model)"),IIe.forEach(t),D.forEach(t),mbr=i(Cl),T(qM.$$.fragment,Cl),Cl.forEach(t),El.forEach(t),XOe=i(f),tc=n(f,"H2",{class:!0});var KXe=s(tc);jM=n(KXe,"A",{id:!0,class:!0,href:!0});var sAt=s(jM);cFe=n(sAt,"SPAN",{});var lAt=s(cFe);T(v9.$$.fragment,lAt),lAt.forEach(t),sAt.forEach(t),gbr=i(KXe),fFe=n(KXe,"SPAN",{});var iAt=s(fFe);hbr=r(iAt,"TFAutoModelForPreTraining"),iAt.forEach(t),KXe.forEach(t),zOe=i(f),er=n(f,"DIV",{class:!0});var wl=s(er);T(F9.$$.fragment,wl),pbr=i(wl),ac=n(wl,"P",{});var hre=s(ac);_br=r(hre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),YH=n(hre,"A",{href:!0});var dAt=s(YH);ubr=r(dAt,"from_pretrained()"),dAt.forEach(t),bbr=r(hre," class method or the "),KH=n(hre,"A",{href:!0});var cAt=s(KH);vbr=r(cAt,"from_config()"),cAt.forEach(t),Fbr=r(hre,` class
method.`),hre.forEach(t),Tbr=i(wl),T9=n(wl,"P",{});var ZXe=s(T9);Mbr=r(ZXe,"This class cannot be instantiated directly using "),mFe=n(ZXe,"CODE",{});var fAt=s(mFe);Ebr=r(fAt,"__init__()"),fAt.forEach(t),Cbr=r(ZXe," (throws an error)."),ZXe.forEach(t),wbr=i(wl),kt=n(wl,"DIV",{class:!0});var LA=s(kt);T(M9.$$.fragment,LA),Abr=i(LA),gFe=n(LA,"P",{});var mAt=s(gFe);Lbr=r(mAt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),mAt.forEach(t),ybr=i(LA),nc=n(LA,"P",{});var pre=s(nc);xbr=r(pre,`Note:
Loading a model from its configuration file does `),hFe=n(pre,"STRONG",{});var gAt=s(hFe);$br=r(gAt,"not"),gAt.forEach(t),kbr=r(pre,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZH=n(pre,"A",{href:!0});var hAt=s(ZH);Sbr=r(hAt,"from_pretrained()"),hAt.forEach(t),Rbr=r(pre," to load the model weights."),pre.forEach(t),Pbr=i(LA),T(DM.$$.fragment,LA),LA.forEach(t),Bbr=i(wl),yr=n(wl,"DIV",{class:!0});var Al=s(yr);T(E9.$$.fragment,Al),Ibr=i(Al),pFe=n(Al,"P",{});var pAt=s(pFe);Nbr=r(pAt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),pAt.forEach(t),qbr=i(Al),an=n(Al,"P",{});var yA=s(an);jbr=r(yA,"The model class to instantiate is selected based on the "),_Fe=n(yA,"CODE",{});var _At=s(_Fe);Dbr=r(_At,"model_type"),_At.forEach(t),Gbr=r(yA,` property of the config object (either
passed as an argument or loaded from `),uFe=n(yA,"CODE",{});var uAt=s(uFe);Obr=r(uAt,"pretrained_model_name_or_path"),uAt.forEach(t),Vbr=r(yA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bFe=n(yA,"CODE",{});var bAt=s(bFe);Xbr=r(bAt,"pretrained_model_name_or_path"),bAt.forEach(t),zbr=r(yA,":"),yA.forEach(t),Qbr=i(Al),se=n(Al,"UL",{});var le=s(se);GM=n(le,"LI",{});var NIe=s(GM);vFe=n(NIe,"STRONG",{});var vAt=s(vFe);Wbr=r(vAt,"albert"),vAt.forEach(t),Hbr=r(NIe," \u2014 "),eU=n(NIe,"A",{href:!0});var FAt=s(eU);Ubr=r(FAt,"TFAlbertForPreTraining"),FAt.forEach(t),Jbr=r(NIe," (ALBERT model)"),NIe.forEach(t),Ybr=i(le),OM=n(le,"LI",{});var qIe=s(OM);FFe=n(qIe,"STRONG",{});var TAt=s(FFe);Kbr=r(TAt,"bart"),TAt.forEach(t),Zbr=r(qIe," \u2014 "),oU=n(qIe,"A",{href:!0});var MAt=s(oU);evr=r(MAt,"TFBartForConditionalGeneration"),MAt.forEach(t),ovr=r(qIe," (BART model)"),qIe.forEach(t),rvr=i(le),VM=n(le,"LI",{});var jIe=s(VM);TFe=n(jIe,"STRONG",{});var EAt=s(TFe);tvr=r(EAt,"bert"),EAt.forEach(t),avr=r(jIe," \u2014 "),rU=n(jIe,"A",{href:!0});var CAt=s(rU);nvr=r(CAt,"TFBertForPreTraining"),CAt.forEach(t),svr=r(jIe," (BERT model)"),jIe.forEach(t),lvr=i(le),XM=n(le,"LI",{});var DIe=s(XM);MFe=n(DIe,"STRONG",{});var wAt=s(MFe);ivr=r(wAt,"camembert"),wAt.forEach(t),dvr=r(DIe," \u2014 "),tU=n(DIe,"A",{href:!0});var AAt=s(tU);cvr=r(AAt,"TFCamembertForMaskedLM"),AAt.forEach(t),fvr=r(DIe," (CamemBERT model)"),DIe.forEach(t),mvr=i(le),zM=n(le,"LI",{});var GIe=s(zM);EFe=n(GIe,"STRONG",{});var LAt=s(EFe);gvr=r(LAt,"ctrl"),LAt.forEach(t),hvr=r(GIe," \u2014 "),aU=n(GIe,"A",{href:!0});var yAt=s(aU);pvr=r(yAt,"TFCTRLLMHeadModel"),yAt.forEach(t),_vr=r(GIe," (CTRL model)"),GIe.forEach(t),uvr=i(le),QM=n(le,"LI",{});var OIe=s(QM);CFe=n(OIe,"STRONG",{});var xAt=s(CFe);bvr=r(xAt,"distilbert"),xAt.forEach(t),vvr=r(OIe," \u2014 "),nU=n(OIe,"A",{href:!0});var $At=s(nU);Fvr=r($At,"TFDistilBertForMaskedLM"),$At.forEach(t),Tvr=r(OIe," (DistilBERT model)"),OIe.forEach(t),Mvr=i(le),WM=n(le,"LI",{});var VIe=s(WM);wFe=n(VIe,"STRONG",{});var kAt=s(wFe);Evr=r(kAt,"electra"),kAt.forEach(t),Cvr=r(VIe," \u2014 "),sU=n(VIe,"A",{href:!0});var SAt=s(sU);wvr=r(SAt,"TFElectraForPreTraining"),SAt.forEach(t),Avr=r(VIe," (ELECTRA model)"),VIe.forEach(t),Lvr=i(le),HM=n(le,"LI",{});var XIe=s(HM);AFe=n(XIe,"STRONG",{});var RAt=s(AFe);yvr=r(RAt,"flaubert"),RAt.forEach(t),xvr=r(XIe," \u2014 "),lU=n(XIe,"A",{href:!0});var PAt=s(lU);$vr=r(PAt,"TFFlaubertWithLMHeadModel"),PAt.forEach(t),kvr=r(XIe," (FlauBERT model)"),XIe.forEach(t),Svr=i(le),UM=n(le,"LI",{});var zIe=s(UM);LFe=n(zIe,"STRONG",{});var BAt=s(LFe);Rvr=r(BAt,"funnel"),BAt.forEach(t),Pvr=r(zIe," \u2014 "),iU=n(zIe,"A",{href:!0});var IAt=s(iU);Bvr=r(IAt,"TFFunnelForPreTraining"),IAt.forEach(t),Ivr=r(zIe," (Funnel Transformer model)"),zIe.forEach(t),Nvr=i(le),JM=n(le,"LI",{});var QIe=s(JM);yFe=n(QIe,"STRONG",{});var NAt=s(yFe);qvr=r(NAt,"gpt2"),NAt.forEach(t),jvr=r(QIe," \u2014 "),dU=n(QIe,"A",{href:!0});var qAt=s(dU);Dvr=r(qAt,"TFGPT2LMHeadModel"),qAt.forEach(t),Gvr=r(QIe," (OpenAI GPT-2 model)"),QIe.forEach(t),Ovr=i(le),YM=n(le,"LI",{});var WIe=s(YM);xFe=n(WIe,"STRONG",{});var jAt=s(xFe);Vvr=r(jAt,"layoutlm"),jAt.forEach(t),Xvr=r(WIe," \u2014 "),cU=n(WIe,"A",{href:!0});var DAt=s(cU);zvr=r(DAt,"TFLayoutLMForMaskedLM"),DAt.forEach(t),Qvr=r(WIe," (LayoutLM model)"),WIe.forEach(t),Wvr=i(le),KM=n(le,"LI",{});var HIe=s(KM);$Fe=n(HIe,"STRONG",{});var GAt=s($Fe);Hvr=r(GAt,"lxmert"),GAt.forEach(t),Uvr=r(HIe," \u2014 "),fU=n(HIe,"A",{href:!0});var OAt=s(fU);Jvr=r(OAt,"TFLxmertForPreTraining"),OAt.forEach(t),Yvr=r(HIe," (LXMERT model)"),HIe.forEach(t),Kvr=i(le),ZM=n(le,"LI",{});var UIe=s(ZM);kFe=n(UIe,"STRONG",{});var VAt=s(kFe);Zvr=r(VAt,"mobilebert"),VAt.forEach(t),eFr=r(UIe," \u2014 "),mU=n(UIe,"A",{href:!0});var XAt=s(mU);oFr=r(XAt,"TFMobileBertForPreTraining"),XAt.forEach(t),rFr=r(UIe," (MobileBERT model)"),UIe.forEach(t),tFr=i(le),eE=n(le,"LI",{});var JIe=s(eE);SFe=n(JIe,"STRONG",{});var zAt=s(SFe);aFr=r(zAt,"mpnet"),zAt.forEach(t),nFr=r(JIe," \u2014 "),gU=n(JIe,"A",{href:!0});var QAt=s(gU);sFr=r(QAt,"TFMPNetForMaskedLM"),QAt.forEach(t),lFr=r(JIe," (MPNet model)"),JIe.forEach(t),iFr=i(le),oE=n(le,"LI",{});var YIe=s(oE);RFe=n(YIe,"STRONG",{});var WAt=s(RFe);dFr=r(WAt,"openai-gpt"),WAt.forEach(t),cFr=r(YIe," \u2014 "),hU=n(YIe,"A",{href:!0});var HAt=s(hU);fFr=r(HAt,"TFOpenAIGPTLMHeadModel"),HAt.forEach(t),mFr=r(YIe," (OpenAI GPT model)"),YIe.forEach(t),gFr=i(le),rE=n(le,"LI",{});var KIe=s(rE);PFe=n(KIe,"STRONG",{});var UAt=s(PFe);hFr=r(UAt,"roberta"),UAt.forEach(t),pFr=r(KIe," \u2014 "),pU=n(KIe,"A",{href:!0});var JAt=s(pU);_Fr=r(JAt,"TFRobertaForMaskedLM"),JAt.forEach(t),uFr=r(KIe," (RoBERTa model)"),KIe.forEach(t),bFr=i(le),tE=n(le,"LI",{});var ZIe=s(tE);BFe=n(ZIe,"STRONG",{});var YAt=s(BFe);vFr=r(YAt,"t5"),YAt.forEach(t),FFr=r(ZIe," \u2014 "),_U=n(ZIe,"A",{href:!0});var KAt=s(_U);TFr=r(KAt,"TFT5ForConditionalGeneration"),KAt.forEach(t),MFr=r(ZIe," (T5 model)"),ZIe.forEach(t),EFr=i(le),aE=n(le,"LI",{});var eNe=s(aE);IFe=n(eNe,"STRONG",{});var ZAt=s(IFe);CFr=r(ZAt,"tapas"),ZAt.forEach(t),wFr=r(eNe," \u2014 "),uU=n(eNe,"A",{href:!0});var e6t=s(uU);AFr=r(e6t,"TFTapasForMaskedLM"),e6t.forEach(t),LFr=r(eNe," (TAPAS model)"),eNe.forEach(t),yFr=i(le),nE=n(le,"LI",{});var oNe=s(nE);NFe=n(oNe,"STRONG",{});var o6t=s(NFe);xFr=r(o6t,"transfo-xl"),o6t.forEach(t),$Fr=r(oNe," \u2014 "),bU=n(oNe,"A",{href:!0});var r6t=s(bU);kFr=r(r6t,"TFTransfoXLLMHeadModel"),r6t.forEach(t),SFr=r(oNe," (Transformer-XL model)"),oNe.forEach(t),RFr=i(le),sE=n(le,"LI",{});var rNe=s(sE);qFe=n(rNe,"STRONG",{});var t6t=s(qFe);PFr=r(t6t,"vit_mae"),t6t.forEach(t),BFr=r(rNe," \u2014 "),vU=n(rNe,"A",{href:!0});var a6t=s(vU);IFr=r(a6t,"TFViTMAEForPreTraining"),a6t.forEach(t),NFr=r(rNe," (ViTMAE model)"),rNe.forEach(t),qFr=i(le),lE=n(le,"LI",{});var tNe=s(lE);jFe=n(tNe,"STRONG",{});var n6t=s(jFe);jFr=r(n6t,"xlm"),n6t.forEach(t),DFr=r(tNe," \u2014 "),FU=n(tNe,"A",{href:!0});var s6t=s(FU);GFr=r(s6t,"TFXLMWithLMHeadModel"),s6t.forEach(t),OFr=r(tNe," (XLM model)"),tNe.forEach(t),VFr=i(le),iE=n(le,"LI",{});var aNe=s(iE);DFe=n(aNe,"STRONG",{});var l6t=s(DFe);XFr=r(l6t,"xlm-roberta"),l6t.forEach(t),zFr=r(aNe," \u2014 "),TU=n(aNe,"A",{href:!0});var i6t=s(TU);QFr=r(i6t,"TFXLMRobertaForMaskedLM"),i6t.forEach(t),WFr=r(aNe," (XLM-RoBERTa model)"),aNe.forEach(t),HFr=i(le),dE=n(le,"LI",{});var nNe=s(dE);GFe=n(nNe,"STRONG",{});var d6t=s(GFe);UFr=r(d6t,"xlnet"),d6t.forEach(t),JFr=r(nNe," \u2014 "),MU=n(nNe,"A",{href:!0});var c6t=s(MU);YFr=r(c6t,"TFXLNetLMHeadModel"),c6t.forEach(t),KFr=r(nNe," (XLNet model)"),nNe.forEach(t),le.forEach(t),ZFr=i(Al),T(cE.$$.fragment,Al),Al.forEach(t),wl.forEach(t),QOe=i(f),sc=n(f,"H2",{class:!0});var eze=s(sc);fE=n(eze,"A",{id:!0,class:!0,href:!0});var f6t=s(fE);OFe=n(f6t,"SPAN",{});var m6t=s(OFe);T(C9.$$.fragment,m6t),m6t.forEach(t),f6t.forEach(t),eTr=i(eze),VFe=n(eze,"SPAN",{});var g6t=s(VFe);oTr=r(g6t,"TFAutoModelForCausalLM"),g6t.forEach(t),eze.forEach(t),WOe=i(f),or=n(f,"DIV",{class:!0});var Ll=s(or);T(w9.$$.fragment,Ll),rTr=i(Ll),lc=n(Ll,"P",{});var _re=s(lc);tTr=r(_re,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),EU=n(_re,"A",{href:!0});var h6t=s(EU);aTr=r(h6t,"from_pretrained()"),h6t.forEach(t),nTr=r(_re," class method or the "),CU=n(_re,"A",{href:!0});var p6t=s(CU);sTr=r(p6t,"from_config()"),p6t.forEach(t),lTr=r(_re,` class
method.`),_re.forEach(t),iTr=i(Ll),A9=n(Ll,"P",{});var oze=s(A9);dTr=r(oze,"This class cannot be instantiated directly using "),XFe=n(oze,"CODE",{});var _6t=s(XFe);cTr=r(_6t,"__init__()"),_6t.forEach(t),fTr=r(oze," (throws an error)."),oze.forEach(t),mTr=i(Ll),St=n(Ll,"DIV",{class:!0});var xA=s(St);T(L9.$$.fragment,xA),gTr=i(xA),zFe=n(xA,"P",{});var u6t=s(zFe);hTr=r(u6t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),u6t.forEach(t),pTr=i(xA),ic=n(xA,"P",{});var ure=s(ic);_Tr=r(ure,`Note:
Loading a model from its configuration file does `),QFe=n(ure,"STRONG",{});var b6t=s(QFe);uTr=r(b6t,"not"),b6t.forEach(t),bTr=r(ure,` load the model weights. It only affects the
model\u2019s configuration. Use `),wU=n(ure,"A",{href:!0});var v6t=s(wU);vTr=r(v6t,"from_pretrained()"),v6t.forEach(t),FTr=r(ure," to load the model weights."),ure.forEach(t),TTr=i(xA),T(mE.$$.fragment,xA),xA.forEach(t),MTr=i(Ll),xr=n(Ll,"DIV",{class:!0});var yl=s(xr);T(y9.$$.fragment,yl),ETr=i(yl),WFe=n(yl,"P",{});var F6t=s(WFe);CTr=r(F6t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),F6t.forEach(t),wTr=i(yl),nn=n(yl,"P",{});var $A=s(nn);ATr=r($A,"The model class to instantiate is selected based on the "),HFe=n($A,"CODE",{});var T6t=s(HFe);LTr=r(T6t,"model_type"),T6t.forEach(t),yTr=r($A,` property of the config object (either
passed as an argument or loaded from `),UFe=n($A,"CODE",{});var M6t=s(UFe);xTr=r(M6t,"pretrained_model_name_or_path"),M6t.forEach(t),$Tr=r($A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JFe=n($A,"CODE",{});var E6t=s(JFe);kTr=r(E6t,"pretrained_model_name_or_path"),E6t.forEach(t),STr=r($A,":"),$A.forEach(t),RTr=i(yl),Me=n(yl,"UL",{});var Ce=s(Me);gE=n(Ce,"LI",{});var sNe=s(gE);YFe=n(sNe,"STRONG",{});var C6t=s(YFe);PTr=r(C6t,"bert"),C6t.forEach(t),BTr=r(sNe," \u2014 "),AU=n(sNe,"A",{href:!0});var w6t=s(AU);ITr=r(w6t,"TFBertLMHeadModel"),w6t.forEach(t),NTr=r(sNe," (BERT model)"),sNe.forEach(t),qTr=i(Ce),hE=n(Ce,"LI",{});var lNe=s(hE);KFe=n(lNe,"STRONG",{});var A6t=s(KFe);jTr=r(A6t,"camembert"),A6t.forEach(t),DTr=r(lNe," \u2014 "),LU=n(lNe,"A",{href:!0});var L6t=s(LU);GTr=r(L6t,"TFCamembertForCausalLM"),L6t.forEach(t),OTr=r(lNe," (CamemBERT model)"),lNe.forEach(t),VTr=i(Ce),pE=n(Ce,"LI",{});var iNe=s(pE);ZFe=n(iNe,"STRONG",{});var y6t=s(ZFe);XTr=r(y6t,"ctrl"),y6t.forEach(t),zTr=r(iNe," \u2014 "),yU=n(iNe,"A",{href:!0});var x6t=s(yU);QTr=r(x6t,"TFCTRLLMHeadModel"),x6t.forEach(t),WTr=r(iNe," (CTRL model)"),iNe.forEach(t),HTr=i(Ce),_E=n(Ce,"LI",{});var dNe=s(_E);eTe=n(dNe,"STRONG",{});var $6t=s(eTe);UTr=r($6t,"gpt2"),$6t.forEach(t),JTr=r(dNe," \u2014 "),xU=n(dNe,"A",{href:!0});var k6t=s(xU);YTr=r(k6t,"TFGPT2LMHeadModel"),k6t.forEach(t),KTr=r(dNe," (OpenAI GPT-2 model)"),dNe.forEach(t),ZTr=i(Ce),uE=n(Ce,"LI",{});var cNe=s(uE);oTe=n(cNe,"STRONG",{});var S6t=s(oTe);e8r=r(S6t,"gptj"),S6t.forEach(t),o8r=r(cNe," \u2014 "),$U=n(cNe,"A",{href:!0});var R6t=s($U);r8r=r(R6t,"TFGPTJForCausalLM"),R6t.forEach(t),t8r=r(cNe," (GPT-J model)"),cNe.forEach(t),a8r=i(Ce),bE=n(Ce,"LI",{});var fNe=s(bE);rTe=n(fNe,"STRONG",{});var P6t=s(rTe);n8r=r(P6t,"openai-gpt"),P6t.forEach(t),s8r=r(fNe," \u2014 "),kU=n(fNe,"A",{href:!0});var B6t=s(kU);l8r=r(B6t,"TFOpenAIGPTLMHeadModel"),B6t.forEach(t),i8r=r(fNe," (OpenAI GPT model)"),fNe.forEach(t),d8r=i(Ce),vE=n(Ce,"LI",{});var mNe=s(vE);tTe=n(mNe,"STRONG",{});var I6t=s(tTe);c8r=r(I6t,"opt"),I6t.forEach(t),f8r=r(mNe," \u2014 "),SU=n(mNe,"A",{href:!0});var N6t=s(SU);m8r=r(N6t,"TFOPTForCausalLM"),N6t.forEach(t),g8r=r(mNe," (OPT model)"),mNe.forEach(t),h8r=i(Ce),FE=n(Ce,"LI",{});var gNe=s(FE);aTe=n(gNe,"STRONG",{});var q6t=s(aTe);p8r=r(q6t,"rembert"),q6t.forEach(t),_8r=r(gNe," \u2014 "),RU=n(gNe,"A",{href:!0});var j6t=s(RU);u8r=r(j6t,"TFRemBertForCausalLM"),j6t.forEach(t),b8r=r(gNe," (RemBERT model)"),gNe.forEach(t),v8r=i(Ce),TE=n(Ce,"LI",{});var hNe=s(TE);nTe=n(hNe,"STRONG",{});var D6t=s(nTe);F8r=r(D6t,"roberta"),D6t.forEach(t),T8r=r(hNe," \u2014 "),PU=n(hNe,"A",{href:!0});var G6t=s(PU);M8r=r(G6t,"TFRobertaForCausalLM"),G6t.forEach(t),E8r=r(hNe," (RoBERTa model)"),hNe.forEach(t),C8r=i(Ce),ME=n(Ce,"LI",{});var pNe=s(ME);sTe=n(pNe,"STRONG",{});var O6t=s(sTe);w8r=r(O6t,"roformer"),O6t.forEach(t),A8r=r(pNe," \u2014 "),BU=n(pNe,"A",{href:!0});var V6t=s(BU);L8r=r(V6t,"TFRoFormerForCausalLM"),V6t.forEach(t),y8r=r(pNe," (RoFormer model)"),pNe.forEach(t),x8r=i(Ce),EE=n(Ce,"LI",{});var _Ne=s(EE);lTe=n(_Ne,"STRONG",{});var X6t=s(lTe);$8r=r(X6t,"transfo-xl"),X6t.forEach(t),k8r=r(_Ne," \u2014 "),IU=n(_Ne,"A",{href:!0});var z6t=s(IU);S8r=r(z6t,"TFTransfoXLLMHeadModel"),z6t.forEach(t),R8r=r(_Ne," (Transformer-XL model)"),_Ne.forEach(t),P8r=i(Ce),CE=n(Ce,"LI",{});var uNe=s(CE);iTe=n(uNe,"STRONG",{});var Q6t=s(iTe);B8r=r(Q6t,"xlm"),Q6t.forEach(t),I8r=r(uNe," \u2014 "),NU=n(uNe,"A",{href:!0});var W6t=s(NU);N8r=r(W6t,"TFXLMWithLMHeadModel"),W6t.forEach(t),q8r=r(uNe," (XLM model)"),uNe.forEach(t),j8r=i(Ce),wE=n(Ce,"LI",{});var bNe=s(wE);dTe=n(bNe,"STRONG",{});var H6t=s(dTe);D8r=r(H6t,"xlnet"),H6t.forEach(t),G8r=r(bNe," \u2014 "),qU=n(bNe,"A",{href:!0});var U6t=s(qU);O8r=r(U6t,"TFXLNetLMHeadModel"),U6t.forEach(t),V8r=r(bNe," (XLNet model)"),bNe.forEach(t),Ce.forEach(t),X8r=i(yl),T(AE.$$.fragment,yl),yl.forEach(t),Ll.forEach(t),HOe=i(f),dc=n(f,"H2",{class:!0});var rze=s(dc);LE=n(rze,"A",{id:!0,class:!0,href:!0});var J6t=s(LE);cTe=n(J6t,"SPAN",{});var Y6t=s(cTe);T(x9.$$.fragment,Y6t),Y6t.forEach(t),J6t.forEach(t),z8r=i(rze),fTe=n(rze,"SPAN",{});var K6t=s(fTe);Q8r=r(K6t,"TFAutoModelForImageClassification"),K6t.forEach(t),rze.forEach(t),UOe=i(f),rr=n(f,"DIV",{class:!0});var xl=s(rr);T($9.$$.fragment,xl),W8r=i(xl),cc=n(xl,"P",{});var bre=s(cc);H8r=r(bre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),jU=n(bre,"A",{href:!0});var Z6t=s(jU);U8r=r(Z6t,"from_pretrained()"),Z6t.forEach(t),J8r=r(bre," class method or the "),DU=n(bre,"A",{href:!0});var eLt=s(DU);Y8r=r(eLt,"from_config()"),eLt.forEach(t),K8r=r(bre,` class
method.`),bre.forEach(t),Z8r=i(xl),k9=n(xl,"P",{});var tze=s(k9);eMr=r(tze,"This class cannot be instantiated directly using "),mTe=n(tze,"CODE",{});var oLt=s(mTe);oMr=r(oLt,"__init__()"),oLt.forEach(t),rMr=r(tze," (throws an error)."),tze.forEach(t),tMr=i(xl),Rt=n(xl,"DIV",{class:!0});var kA=s(Rt);T(S9.$$.fragment,kA),aMr=i(kA),gTe=n(kA,"P",{});var rLt=s(gTe);nMr=r(rLt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),rLt.forEach(t),sMr=i(kA),fc=n(kA,"P",{});var vre=s(fc);lMr=r(vre,`Note:
Loading a model from its configuration file does `),hTe=n(vre,"STRONG",{});var tLt=s(hTe);iMr=r(tLt,"not"),tLt.forEach(t),dMr=r(vre,` load the model weights. It only affects the
model\u2019s configuration. Use `),GU=n(vre,"A",{href:!0});var aLt=s(GU);cMr=r(aLt,"from_pretrained()"),aLt.forEach(t),fMr=r(vre," to load the model weights."),vre.forEach(t),mMr=i(kA),T(yE.$$.fragment,kA),kA.forEach(t),gMr=i(xl),$r=n(xl,"DIV",{class:!0});var $l=s($r);T(R9.$$.fragment,$l),hMr=i($l),pTe=n($l,"P",{});var nLt=s(pTe);pMr=r(nLt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),nLt.forEach(t),_Mr=i($l),sn=n($l,"P",{});var SA=s(sn);uMr=r(SA,"The model class to instantiate is selected based on the "),_Te=n(SA,"CODE",{});var sLt=s(_Te);bMr=r(sLt,"model_type"),sLt.forEach(t),vMr=r(SA,` property of the config object (either
passed as an argument or loaded from `),uTe=n(SA,"CODE",{});var lLt=s(uTe);FMr=r(lLt,"pretrained_model_name_or_path"),lLt.forEach(t),TMr=r(SA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bTe=n(SA,"CODE",{});var iLt=s(bTe);MMr=r(iLt,"pretrained_model_name_or_path"),iLt.forEach(t),EMr=r(SA,":"),SA.forEach(t),CMr=i($l),ln=n($l,"UL",{});var RA=s(ln);xE=n(RA,"LI",{});var vNe=s(xE);vTe=n(vNe,"STRONG",{});var dLt=s(vTe);wMr=r(dLt,"convnext"),dLt.forEach(t),AMr=r(vNe," \u2014 "),OU=n(vNe,"A",{href:!0});var cLt=s(OU);LMr=r(cLt,"TFConvNextForImageClassification"),cLt.forEach(t),yMr=r(vNe," (ConvNeXT model)"),vNe.forEach(t),xMr=i(RA),$E=n(RA,"LI",{});var FNe=s($E);FTe=n(FNe,"STRONG",{});var fLt=s(FTe);$Mr=r(fLt,"data2vec-vision"),fLt.forEach(t),kMr=r(FNe," \u2014 "),VU=n(FNe,"A",{href:!0});var mLt=s(VU);SMr=r(mLt,"TFData2VecVisionForImageClassification"),mLt.forEach(t),RMr=r(FNe," (Data2VecVision model)"),FNe.forEach(t),PMr=i(RA),kE=n(RA,"LI",{});var TNe=s(kE);TTe=n(TNe,"STRONG",{});var gLt=s(TTe);BMr=r(gLt,"swin"),gLt.forEach(t),IMr=r(TNe," \u2014 "),XU=n(TNe,"A",{href:!0});var hLt=s(XU);NMr=r(hLt,"TFSwinForImageClassification"),hLt.forEach(t),qMr=r(TNe," (Swin Transformer model)"),TNe.forEach(t),jMr=i(RA),SE=n(RA,"LI",{});var MNe=s(SE);MTe=n(MNe,"STRONG",{});var pLt=s(MTe);DMr=r(pLt,"vit"),pLt.forEach(t),GMr=r(MNe," \u2014 "),zU=n(MNe,"A",{href:!0});var _Lt=s(zU);OMr=r(_Lt,"TFViTForImageClassification"),_Lt.forEach(t),VMr=r(MNe," (ViT model)"),MNe.forEach(t),RA.forEach(t),XMr=i($l),T(RE.$$.fragment,$l),$l.forEach(t),xl.forEach(t),JOe=i(f),mc=n(f,"H2",{class:!0});var aze=s(mc);PE=n(aze,"A",{id:!0,class:!0,href:!0});var uLt=s(PE);ETe=n(uLt,"SPAN",{});var bLt=s(ETe);T(P9.$$.fragment,bLt),bLt.forEach(t),uLt.forEach(t),zMr=i(aze),CTe=n(aze,"SPAN",{});var vLt=s(CTe);QMr=r(vLt,"TFAutoModelForMaskedLM"),vLt.forEach(t),aze.forEach(t),YOe=i(f),tr=n(f,"DIV",{class:!0});var kl=s(tr);T(B9.$$.fragment,kl),WMr=i(kl),gc=n(kl,"P",{});var Fre=s(gc);HMr=r(Fre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),QU=n(Fre,"A",{href:!0});var FLt=s(QU);UMr=r(FLt,"from_pretrained()"),FLt.forEach(t),JMr=r(Fre," class method or the "),WU=n(Fre,"A",{href:!0});var TLt=s(WU);YMr=r(TLt,"from_config()"),TLt.forEach(t),KMr=r(Fre,` class
method.`),Fre.forEach(t),ZMr=i(kl),I9=n(kl,"P",{});var nze=s(I9);eEr=r(nze,"This class cannot be instantiated directly using "),wTe=n(nze,"CODE",{});var MLt=s(wTe);oEr=r(MLt,"__init__()"),MLt.forEach(t),rEr=r(nze," (throws an error)."),nze.forEach(t),tEr=i(kl),Pt=n(kl,"DIV",{class:!0});var PA=s(Pt);T(N9.$$.fragment,PA),aEr=i(PA),ATe=n(PA,"P",{});var ELt=s(ATe);nEr=r(ELt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),ELt.forEach(t),sEr=i(PA),hc=n(PA,"P",{});var Tre=s(hc);lEr=r(Tre,`Note:
Loading a model from its configuration file does `),LTe=n(Tre,"STRONG",{});var CLt=s(LTe);iEr=r(CLt,"not"),CLt.forEach(t),dEr=r(Tre,` load the model weights. It only affects the
model\u2019s configuration. Use `),HU=n(Tre,"A",{href:!0});var wLt=s(HU);cEr=r(wLt,"from_pretrained()"),wLt.forEach(t),fEr=r(Tre," to load the model weights."),Tre.forEach(t),mEr=i(PA),T(BE.$$.fragment,PA),PA.forEach(t),gEr=i(kl),kr=n(kl,"DIV",{class:!0});var Sl=s(kr);T(q9.$$.fragment,Sl),hEr=i(Sl),yTe=n(Sl,"P",{});var ALt=s(yTe);pEr=r(ALt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),ALt.forEach(t),_Er=i(Sl),dn=n(Sl,"P",{});var BA=s(dn);uEr=r(BA,"The model class to instantiate is selected based on the "),xTe=n(BA,"CODE",{});var LLt=s(xTe);bEr=r(LLt,"model_type"),LLt.forEach(t),vEr=r(BA,` property of the config object (either
passed as an argument or loaded from `),$Te=n(BA,"CODE",{});var yLt=s($Te);FEr=r(yLt,"pretrained_model_name_or_path"),yLt.forEach(t),TEr=r(BA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kTe=n(BA,"CODE",{});var xLt=s(kTe);MEr=r(xLt,"pretrained_model_name_or_path"),xLt.forEach(t),EEr=r(BA,":"),BA.forEach(t),CEr=i(Sl),ie=n(Sl,"UL",{});var fe=s(ie);IE=n(fe,"LI",{});var ENe=s(IE);STe=n(ENe,"STRONG",{});var $Lt=s(STe);wEr=r($Lt,"albert"),$Lt.forEach(t),AEr=r(ENe," \u2014 "),UU=n(ENe,"A",{href:!0});var kLt=s(UU);LEr=r(kLt,"TFAlbertForMaskedLM"),kLt.forEach(t),yEr=r(ENe," (ALBERT model)"),ENe.forEach(t),xEr=i(fe),NE=n(fe,"LI",{});var CNe=s(NE);RTe=n(CNe,"STRONG",{});var SLt=s(RTe);$Er=r(SLt,"bert"),SLt.forEach(t),kEr=r(CNe," \u2014 "),JU=n(CNe,"A",{href:!0});var RLt=s(JU);SEr=r(RLt,"TFBertForMaskedLM"),RLt.forEach(t),REr=r(CNe," (BERT model)"),CNe.forEach(t),PEr=i(fe),qE=n(fe,"LI",{});var wNe=s(qE);PTe=n(wNe,"STRONG",{});var PLt=s(PTe);BEr=r(PLt,"camembert"),PLt.forEach(t),IEr=r(wNe," \u2014 "),YU=n(wNe,"A",{href:!0});var BLt=s(YU);NEr=r(BLt,"TFCamembertForMaskedLM"),BLt.forEach(t),qEr=r(wNe," (CamemBERT model)"),wNe.forEach(t),jEr=i(fe),jE=n(fe,"LI",{});var ANe=s(jE);BTe=n(ANe,"STRONG",{});var ILt=s(BTe);DEr=r(ILt,"convbert"),ILt.forEach(t),GEr=r(ANe," \u2014 "),KU=n(ANe,"A",{href:!0});var NLt=s(KU);OEr=r(NLt,"TFConvBertForMaskedLM"),NLt.forEach(t),VEr=r(ANe," (ConvBERT model)"),ANe.forEach(t),XEr=i(fe),DE=n(fe,"LI",{});var LNe=s(DE);ITe=n(LNe,"STRONG",{});var qLt=s(ITe);zEr=r(qLt,"deberta"),qLt.forEach(t),QEr=r(LNe," \u2014 "),ZU=n(LNe,"A",{href:!0});var jLt=s(ZU);WEr=r(jLt,"TFDebertaForMaskedLM"),jLt.forEach(t),HEr=r(LNe," (DeBERTa model)"),LNe.forEach(t),UEr=i(fe),GE=n(fe,"LI",{});var yNe=s(GE);NTe=n(yNe,"STRONG",{});var DLt=s(NTe);JEr=r(DLt,"deberta-v2"),DLt.forEach(t),YEr=r(yNe," \u2014 "),eJ=n(yNe,"A",{href:!0});var GLt=s(eJ);KEr=r(GLt,"TFDebertaV2ForMaskedLM"),GLt.forEach(t),ZEr=r(yNe," (DeBERTa-v2 model)"),yNe.forEach(t),e4r=i(fe),OE=n(fe,"LI",{});var xNe=s(OE);qTe=n(xNe,"STRONG",{});var OLt=s(qTe);o4r=r(OLt,"distilbert"),OLt.forEach(t),r4r=r(xNe," \u2014 "),oJ=n(xNe,"A",{href:!0});var VLt=s(oJ);t4r=r(VLt,"TFDistilBertForMaskedLM"),VLt.forEach(t),a4r=r(xNe," (DistilBERT model)"),xNe.forEach(t),n4r=i(fe),VE=n(fe,"LI",{});var $Ne=s(VE);jTe=n($Ne,"STRONG",{});var XLt=s(jTe);s4r=r(XLt,"electra"),XLt.forEach(t),l4r=r($Ne," \u2014 "),rJ=n($Ne,"A",{href:!0});var zLt=s(rJ);i4r=r(zLt,"TFElectraForMaskedLM"),zLt.forEach(t),d4r=r($Ne," (ELECTRA model)"),$Ne.forEach(t),c4r=i(fe),XE=n(fe,"LI",{});var kNe=s(XE);DTe=n(kNe,"STRONG",{});var QLt=s(DTe);f4r=r(QLt,"flaubert"),QLt.forEach(t),m4r=r(kNe," \u2014 "),tJ=n(kNe,"A",{href:!0});var WLt=s(tJ);g4r=r(WLt,"TFFlaubertWithLMHeadModel"),WLt.forEach(t),h4r=r(kNe," (FlauBERT model)"),kNe.forEach(t),p4r=i(fe),zE=n(fe,"LI",{});var SNe=s(zE);GTe=n(SNe,"STRONG",{});var HLt=s(GTe);_4r=r(HLt,"funnel"),HLt.forEach(t),u4r=r(SNe," \u2014 "),aJ=n(SNe,"A",{href:!0});var ULt=s(aJ);b4r=r(ULt,"TFFunnelForMaskedLM"),ULt.forEach(t),v4r=r(SNe," (Funnel Transformer model)"),SNe.forEach(t),F4r=i(fe),QE=n(fe,"LI",{});var RNe=s(QE);OTe=n(RNe,"STRONG",{});var JLt=s(OTe);T4r=r(JLt,"layoutlm"),JLt.forEach(t),M4r=r(RNe," \u2014 "),nJ=n(RNe,"A",{href:!0});var YLt=s(nJ);E4r=r(YLt,"TFLayoutLMForMaskedLM"),YLt.forEach(t),C4r=r(RNe," (LayoutLM model)"),RNe.forEach(t),w4r=i(fe),WE=n(fe,"LI",{});var PNe=s(WE);VTe=n(PNe,"STRONG",{});var KLt=s(VTe);A4r=r(KLt,"longformer"),KLt.forEach(t),L4r=r(PNe," \u2014 "),sJ=n(PNe,"A",{href:!0});var ZLt=s(sJ);y4r=r(ZLt,"TFLongformerForMaskedLM"),ZLt.forEach(t),x4r=r(PNe," (Longformer model)"),PNe.forEach(t),$4r=i(fe),HE=n(fe,"LI",{});var BNe=s(HE);XTe=n(BNe,"STRONG",{});var eyt=s(XTe);k4r=r(eyt,"mobilebert"),eyt.forEach(t),S4r=r(BNe," \u2014 "),lJ=n(BNe,"A",{href:!0});var oyt=s(lJ);R4r=r(oyt,"TFMobileBertForMaskedLM"),oyt.forEach(t),P4r=r(BNe," (MobileBERT model)"),BNe.forEach(t),B4r=i(fe),UE=n(fe,"LI",{});var INe=s(UE);zTe=n(INe,"STRONG",{});var ryt=s(zTe);I4r=r(ryt,"mpnet"),ryt.forEach(t),N4r=r(INe," \u2014 "),iJ=n(INe,"A",{href:!0});var tyt=s(iJ);q4r=r(tyt,"TFMPNetForMaskedLM"),tyt.forEach(t),j4r=r(INe," (MPNet model)"),INe.forEach(t),D4r=i(fe),JE=n(fe,"LI",{});var NNe=s(JE);QTe=n(NNe,"STRONG",{});var ayt=s(QTe);G4r=r(ayt,"rembert"),ayt.forEach(t),O4r=r(NNe," \u2014 "),dJ=n(NNe,"A",{href:!0});var nyt=s(dJ);V4r=r(nyt,"TFRemBertForMaskedLM"),nyt.forEach(t),X4r=r(NNe," (RemBERT model)"),NNe.forEach(t),z4r=i(fe),YE=n(fe,"LI",{});var qNe=s(YE);WTe=n(qNe,"STRONG",{});var syt=s(WTe);Q4r=r(syt,"roberta"),syt.forEach(t),W4r=r(qNe," \u2014 "),cJ=n(qNe,"A",{href:!0});var lyt=s(cJ);H4r=r(lyt,"TFRobertaForMaskedLM"),lyt.forEach(t),U4r=r(qNe," (RoBERTa model)"),qNe.forEach(t),J4r=i(fe),KE=n(fe,"LI",{});var jNe=s(KE);HTe=n(jNe,"STRONG",{});var iyt=s(HTe);Y4r=r(iyt,"roformer"),iyt.forEach(t),K4r=r(jNe," \u2014 "),fJ=n(jNe,"A",{href:!0});var dyt=s(fJ);Z4r=r(dyt,"TFRoFormerForMaskedLM"),dyt.forEach(t),eCr=r(jNe," (RoFormer model)"),jNe.forEach(t),oCr=i(fe),ZE=n(fe,"LI",{});var DNe=s(ZE);UTe=n(DNe,"STRONG",{});var cyt=s(UTe);rCr=r(cyt,"tapas"),cyt.forEach(t),tCr=r(DNe," \u2014 "),mJ=n(DNe,"A",{href:!0});var fyt=s(mJ);aCr=r(fyt,"TFTapasForMaskedLM"),fyt.forEach(t),nCr=r(DNe," (TAPAS model)"),DNe.forEach(t),sCr=i(fe),e4=n(fe,"LI",{});var GNe=s(e4);JTe=n(GNe,"STRONG",{});var myt=s(JTe);lCr=r(myt,"xlm"),myt.forEach(t),iCr=r(GNe," \u2014 "),gJ=n(GNe,"A",{href:!0});var gyt=s(gJ);dCr=r(gyt,"TFXLMWithLMHeadModel"),gyt.forEach(t),cCr=r(GNe," (XLM model)"),GNe.forEach(t),fCr=i(fe),o4=n(fe,"LI",{});var ONe=s(o4);YTe=n(ONe,"STRONG",{});var hyt=s(YTe);mCr=r(hyt,"xlm-roberta"),hyt.forEach(t),gCr=r(ONe," \u2014 "),hJ=n(ONe,"A",{href:!0});var pyt=s(hJ);hCr=r(pyt,"TFXLMRobertaForMaskedLM"),pyt.forEach(t),pCr=r(ONe," (XLM-RoBERTa model)"),ONe.forEach(t),fe.forEach(t),_Cr=i(Sl),T(r4.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),KOe=i(f),pc=n(f,"H2",{class:!0});var sze=s(pc);t4=n(sze,"A",{id:!0,class:!0,href:!0});var _yt=s(t4);KTe=n(_yt,"SPAN",{});var uyt=s(KTe);T(j9.$$.fragment,uyt),uyt.forEach(t),_yt.forEach(t),uCr=i(sze),ZTe=n(sze,"SPAN",{});var byt=s(ZTe);bCr=r(byt,"TFAutoModelForSeq2SeqLM"),byt.forEach(t),sze.forEach(t),ZOe=i(f),ar=n(f,"DIV",{class:!0});var Rl=s(ar);T(D9.$$.fragment,Rl),vCr=i(Rl),_c=n(Rl,"P",{});var Mre=s(_c);FCr=r(Mre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),pJ=n(Mre,"A",{href:!0});var vyt=s(pJ);TCr=r(vyt,"from_pretrained()"),vyt.forEach(t),MCr=r(Mre," class method or the "),_J=n(Mre,"A",{href:!0});var Fyt=s(_J);ECr=r(Fyt,"from_config()"),Fyt.forEach(t),CCr=r(Mre,` class
method.`),Mre.forEach(t),wCr=i(Rl),G9=n(Rl,"P",{});var lze=s(G9);ACr=r(lze,"This class cannot be instantiated directly using "),e8e=n(lze,"CODE",{});var Tyt=s(e8e);LCr=r(Tyt,"__init__()"),Tyt.forEach(t),yCr=r(lze," (throws an error)."),lze.forEach(t),xCr=i(Rl),Bt=n(Rl,"DIV",{class:!0});var IA=s(Bt);T(O9.$$.fragment,IA),$Cr=i(IA),o8e=n(IA,"P",{});var Myt=s(o8e);kCr=r(Myt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Myt.forEach(t),SCr=i(IA),uc=n(IA,"P",{});var Ere=s(uc);RCr=r(Ere,`Note:
Loading a model from its configuration file does `),r8e=n(Ere,"STRONG",{});var Eyt=s(r8e);PCr=r(Eyt,"not"),Eyt.forEach(t),BCr=r(Ere,` load the model weights. It only affects the
model\u2019s configuration. Use `),uJ=n(Ere,"A",{href:!0});var Cyt=s(uJ);ICr=r(Cyt,"from_pretrained()"),Cyt.forEach(t),NCr=r(Ere," to load the model weights."),Ere.forEach(t),qCr=i(IA),T(a4.$$.fragment,IA),IA.forEach(t),jCr=i(Rl),Sr=n(Rl,"DIV",{class:!0});var Pl=s(Sr);T(V9.$$.fragment,Pl),DCr=i(Pl),t8e=n(Pl,"P",{});var wyt=s(t8e);GCr=r(wyt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),wyt.forEach(t),OCr=i(Pl),cn=n(Pl,"P",{});var NA=s(cn);VCr=r(NA,"The model class to instantiate is selected based on the "),a8e=n(NA,"CODE",{});var Ayt=s(a8e);XCr=r(Ayt,"model_type"),Ayt.forEach(t),zCr=r(NA,` property of the config object (either
passed as an argument or loaded from `),n8e=n(NA,"CODE",{});var Lyt=s(n8e);QCr=r(Lyt,"pretrained_model_name_or_path"),Lyt.forEach(t),WCr=r(NA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s8e=n(NA,"CODE",{});var yyt=s(s8e);HCr=r(yyt,"pretrained_model_name_or_path"),yyt.forEach(t),UCr=r(NA,":"),NA.forEach(t),JCr=i(Pl),ye=n(Pl,"UL",{});var Ie=s(ye);n4=n(Ie,"LI",{});var VNe=s(n4);l8e=n(VNe,"STRONG",{});var xyt=s(l8e);YCr=r(xyt,"bart"),xyt.forEach(t),KCr=r(VNe," \u2014 "),bJ=n(VNe,"A",{href:!0});var $yt=s(bJ);ZCr=r($yt,"TFBartForConditionalGeneration"),$yt.forEach(t),e5r=r(VNe," (BART model)"),VNe.forEach(t),o5r=i(Ie),s4=n(Ie,"LI",{});var XNe=s(s4);i8e=n(XNe,"STRONG",{});var kyt=s(i8e);r5r=r(kyt,"blenderbot"),kyt.forEach(t),t5r=r(XNe," \u2014 "),vJ=n(XNe,"A",{href:!0});var Syt=s(vJ);a5r=r(Syt,"TFBlenderbotForConditionalGeneration"),Syt.forEach(t),n5r=r(XNe," (Blenderbot model)"),XNe.forEach(t),s5r=i(Ie),l4=n(Ie,"LI",{});var zNe=s(l4);d8e=n(zNe,"STRONG",{});var Ryt=s(d8e);l5r=r(Ryt,"blenderbot-small"),Ryt.forEach(t),i5r=r(zNe," \u2014 "),FJ=n(zNe,"A",{href:!0});var Pyt=s(FJ);d5r=r(Pyt,"TFBlenderbotSmallForConditionalGeneration"),Pyt.forEach(t),c5r=r(zNe," (BlenderbotSmall model)"),zNe.forEach(t),f5r=i(Ie),i4=n(Ie,"LI",{});var QNe=s(i4);c8e=n(QNe,"STRONG",{});var Byt=s(c8e);m5r=r(Byt,"encoder-decoder"),Byt.forEach(t),g5r=r(QNe," \u2014 "),TJ=n(QNe,"A",{href:!0});var Iyt=s(TJ);h5r=r(Iyt,"TFEncoderDecoderModel"),Iyt.forEach(t),p5r=r(QNe," (Encoder decoder model)"),QNe.forEach(t),_5r=i(Ie),d4=n(Ie,"LI",{});var WNe=s(d4);f8e=n(WNe,"STRONG",{});var Nyt=s(f8e);u5r=r(Nyt,"led"),Nyt.forEach(t),b5r=r(WNe," \u2014 "),MJ=n(WNe,"A",{href:!0});var qyt=s(MJ);v5r=r(qyt,"TFLEDForConditionalGeneration"),qyt.forEach(t),F5r=r(WNe," (LED model)"),WNe.forEach(t),T5r=i(Ie),c4=n(Ie,"LI",{});var HNe=s(c4);m8e=n(HNe,"STRONG",{});var jyt=s(m8e);M5r=r(jyt,"marian"),jyt.forEach(t),E5r=r(HNe," \u2014 "),EJ=n(HNe,"A",{href:!0});var Dyt=s(EJ);C5r=r(Dyt,"TFMarianMTModel"),Dyt.forEach(t),w5r=r(HNe," (Marian model)"),HNe.forEach(t),A5r=i(Ie),f4=n(Ie,"LI",{});var UNe=s(f4);g8e=n(UNe,"STRONG",{});var Gyt=s(g8e);L5r=r(Gyt,"mbart"),Gyt.forEach(t),y5r=r(UNe," \u2014 "),CJ=n(UNe,"A",{href:!0});var Oyt=s(CJ);x5r=r(Oyt,"TFMBartForConditionalGeneration"),Oyt.forEach(t),$5r=r(UNe," (mBART model)"),UNe.forEach(t),k5r=i(Ie),m4=n(Ie,"LI",{});var JNe=s(m4);h8e=n(JNe,"STRONG",{});var Vyt=s(h8e);S5r=r(Vyt,"mt5"),Vyt.forEach(t),R5r=r(JNe," \u2014 "),wJ=n(JNe,"A",{href:!0});var Xyt=s(wJ);P5r=r(Xyt,"TFMT5ForConditionalGeneration"),Xyt.forEach(t),B5r=r(JNe," (MT5 model)"),JNe.forEach(t),I5r=i(Ie),g4=n(Ie,"LI",{});var YNe=s(g4);p8e=n(YNe,"STRONG",{});var zyt=s(p8e);N5r=r(zyt,"pegasus"),zyt.forEach(t),q5r=r(YNe," \u2014 "),AJ=n(YNe,"A",{href:!0});var Qyt=s(AJ);j5r=r(Qyt,"TFPegasusForConditionalGeneration"),Qyt.forEach(t),D5r=r(YNe," (Pegasus model)"),YNe.forEach(t),G5r=i(Ie),h4=n(Ie,"LI",{});var KNe=s(h4);_8e=n(KNe,"STRONG",{});var Wyt=s(_8e);O5r=r(Wyt,"t5"),Wyt.forEach(t),V5r=r(KNe," \u2014 "),LJ=n(KNe,"A",{href:!0});var Hyt=s(LJ);X5r=r(Hyt,"TFT5ForConditionalGeneration"),Hyt.forEach(t),z5r=r(KNe," (T5 model)"),KNe.forEach(t),Ie.forEach(t),Q5r=i(Pl),T(p4.$$.fragment,Pl),Pl.forEach(t),Rl.forEach(t),eVe=i(f),bc=n(f,"H2",{class:!0});var ize=s(bc);_4=n(ize,"A",{id:!0,class:!0,href:!0});var Uyt=s(_4);u8e=n(Uyt,"SPAN",{});var Jyt=s(u8e);T(X9.$$.fragment,Jyt),Jyt.forEach(t),Uyt.forEach(t),W5r=i(ize),b8e=n(ize,"SPAN",{});var Yyt=s(b8e);H5r=r(Yyt,"TFAutoModelForSequenceClassification"),Yyt.forEach(t),ize.forEach(t),oVe=i(f),nr=n(f,"DIV",{class:!0});var Bl=s(nr);T(z9.$$.fragment,Bl),U5r=i(Bl),vc=n(Bl,"P",{});var Cre=s(vc);J5r=r(Cre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),yJ=n(Cre,"A",{href:!0});var Kyt=s(yJ);Y5r=r(Kyt,"from_pretrained()"),Kyt.forEach(t),K5r=r(Cre," class method or the "),xJ=n(Cre,"A",{href:!0});var Zyt=s(xJ);Z5r=r(Zyt,"from_config()"),Zyt.forEach(t),e3r=r(Cre,` class
method.`),Cre.forEach(t),o3r=i(Bl),Q9=n(Bl,"P",{});var dze=s(Q9);r3r=r(dze,"This class cannot be instantiated directly using "),v8e=n(dze,"CODE",{});var e9t=s(v8e);t3r=r(e9t,"__init__()"),e9t.forEach(t),a3r=r(dze," (throws an error)."),dze.forEach(t),n3r=i(Bl),It=n(Bl,"DIV",{class:!0});var qA=s(It);T(W9.$$.fragment,qA),s3r=i(qA),F8e=n(qA,"P",{});var o9t=s(F8e);l3r=r(o9t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),o9t.forEach(t),i3r=i(qA),Fc=n(qA,"P",{});var wre=s(Fc);d3r=r(wre,`Note:
Loading a model from its configuration file does `),T8e=n(wre,"STRONG",{});var r9t=s(T8e);c3r=r(r9t,"not"),r9t.forEach(t),f3r=r(wre,` load the model weights. It only affects the
model\u2019s configuration. Use `),$J=n(wre,"A",{href:!0});var t9t=s($J);m3r=r(t9t,"from_pretrained()"),t9t.forEach(t),g3r=r(wre," to load the model weights."),wre.forEach(t),h3r=i(qA),T(u4.$$.fragment,qA),qA.forEach(t),p3r=i(Bl),Rr=n(Bl,"DIV",{class:!0});var Il=s(Rr);T(H9.$$.fragment,Il),_3r=i(Il),M8e=n(Il,"P",{});var a9t=s(M8e);u3r=r(a9t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),a9t.forEach(t),b3r=i(Il),fn=n(Il,"P",{});var jA=s(fn);v3r=r(jA,"The model class to instantiate is selected based on the "),E8e=n(jA,"CODE",{});var n9t=s(E8e);F3r=r(n9t,"model_type"),n9t.forEach(t),T3r=r(jA,` property of the config object (either
passed as an argument or loaded from `),C8e=n(jA,"CODE",{});var s9t=s(C8e);M3r=r(s9t,"pretrained_model_name_or_path"),s9t.forEach(t),E3r=r(jA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w8e=n(jA,"CODE",{});var l9t=s(w8e);C3r=r(l9t,"pretrained_model_name_or_path"),l9t.forEach(t),w3r=r(jA,":"),jA.forEach(t),A3r=i(Il),te=n(Il,"UL",{});var ne=s(te);b4=n(ne,"LI",{});var ZNe=s(b4);A8e=n(ZNe,"STRONG",{});var i9t=s(A8e);L3r=r(i9t,"albert"),i9t.forEach(t),y3r=r(ZNe," \u2014 "),kJ=n(ZNe,"A",{href:!0});var d9t=s(kJ);x3r=r(d9t,"TFAlbertForSequenceClassification"),d9t.forEach(t),$3r=r(ZNe," (ALBERT model)"),ZNe.forEach(t),k3r=i(ne),v4=n(ne,"LI",{});var eqe=s(v4);L8e=n(eqe,"STRONG",{});var c9t=s(L8e);S3r=r(c9t,"bert"),c9t.forEach(t),R3r=r(eqe," \u2014 "),SJ=n(eqe,"A",{href:!0});var f9t=s(SJ);P3r=r(f9t,"TFBertForSequenceClassification"),f9t.forEach(t),B3r=r(eqe," (BERT model)"),eqe.forEach(t),I3r=i(ne),F4=n(ne,"LI",{});var oqe=s(F4);y8e=n(oqe,"STRONG",{});var m9t=s(y8e);N3r=r(m9t,"camembert"),m9t.forEach(t),q3r=r(oqe," \u2014 "),RJ=n(oqe,"A",{href:!0});var g9t=s(RJ);j3r=r(g9t,"TFCamembertForSequenceClassification"),g9t.forEach(t),D3r=r(oqe," (CamemBERT model)"),oqe.forEach(t),G3r=i(ne),T4=n(ne,"LI",{});var rqe=s(T4);x8e=n(rqe,"STRONG",{});var h9t=s(x8e);O3r=r(h9t,"convbert"),h9t.forEach(t),V3r=r(rqe," \u2014 "),PJ=n(rqe,"A",{href:!0});var p9t=s(PJ);X3r=r(p9t,"TFConvBertForSequenceClassification"),p9t.forEach(t),z3r=r(rqe," (ConvBERT model)"),rqe.forEach(t),Q3r=i(ne),M4=n(ne,"LI",{});var tqe=s(M4);$8e=n(tqe,"STRONG",{});var _9t=s($8e);W3r=r(_9t,"ctrl"),_9t.forEach(t),H3r=r(tqe," \u2014 "),BJ=n(tqe,"A",{href:!0});var u9t=s(BJ);U3r=r(u9t,"TFCTRLForSequenceClassification"),u9t.forEach(t),J3r=r(tqe," (CTRL model)"),tqe.forEach(t),Y3r=i(ne),E4=n(ne,"LI",{});var aqe=s(E4);k8e=n(aqe,"STRONG",{});var b9t=s(k8e);K3r=r(b9t,"deberta"),b9t.forEach(t),Z3r=r(aqe," \u2014 "),IJ=n(aqe,"A",{href:!0});var v9t=s(IJ);e0r=r(v9t,"TFDebertaForSequenceClassification"),v9t.forEach(t),o0r=r(aqe," (DeBERTa model)"),aqe.forEach(t),r0r=i(ne),C4=n(ne,"LI",{});var nqe=s(C4);S8e=n(nqe,"STRONG",{});var F9t=s(S8e);t0r=r(F9t,"deberta-v2"),F9t.forEach(t),a0r=r(nqe," \u2014 "),NJ=n(nqe,"A",{href:!0});var T9t=s(NJ);n0r=r(T9t,"TFDebertaV2ForSequenceClassification"),T9t.forEach(t),s0r=r(nqe," (DeBERTa-v2 model)"),nqe.forEach(t),l0r=i(ne),w4=n(ne,"LI",{});var sqe=s(w4);R8e=n(sqe,"STRONG",{});var M9t=s(R8e);i0r=r(M9t,"distilbert"),M9t.forEach(t),d0r=r(sqe," \u2014 "),qJ=n(sqe,"A",{href:!0});var E9t=s(qJ);c0r=r(E9t,"TFDistilBertForSequenceClassification"),E9t.forEach(t),f0r=r(sqe," (DistilBERT model)"),sqe.forEach(t),m0r=i(ne),A4=n(ne,"LI",{});var lqe=s(A4);P8e=n(lqe,"STRONG",{});var C9t=s(P8e);g0r=r(C9t,"electra"),C9t.forEach(t),h0r=r(lqe," \u2014 "),jJ=n(lqe,"A",{href:!0});var w9t=s(jJ);p0r=r(w9t,"TFElectraForSequenceClassification"),w9t.forEach(t),_0r=r(lqe," (ELECTRA model)"),lqe.forEach(t),u0r=i(ne),L4=n(ne,"LI",{});var iqe=s(L4);B8e=n(iqe,"STRONG",{});var A9t=s(B8e);b0r=r(A9t,"flaubert"),A9t.forEach(t),v0r=r(iqe," \u2014 "),DJ=n(iqe,"A",{href:!0});var L9t=s(DJ);F0r=r(L9t,"TFFlaubertForSequenceClassification"),L9t.forEach(t),T0r=r(iqe," (FlauBERT model)"),iqe.forEach(t),M0r=i(ne),y4=n(ne,"LI",{});var dqe=s(y4);I8e=n(dqe,"STRONG",{});var y9t=s(I8e);E0r=r(y9t,"funnel"),y9t.forEach(t),C0r=r(dqe," \u2014 "),GJ=n(dqe,"A",{href:!0});var x9t=s(GJ);w0r=r(x9t,"TFFunnelForSequenceClassification"),x9t.forEach(t),A0r=r(dqe," (Funnel Transformer model)"),dqe.forEach(t),L0r=i(ne),x4=n(ne,"LI",{});var cqe=s(x4);N8e=n(cqe,"STRONG",{});var $9t=s(N8e);y0r=r($9t,"gpt2"),$9t.forEach(t),x0r=r(cqe," \u2014 "),OJ=n(cqe,"A",{href:!0});var k9t=s(OJ);$0r=r(k9t,"TFGPT2ForSequenceClassification"),k9t.forEach(t),k0r=r(cqe," (OpenAI GPT-2 model)"),cqe.forEach(t),S0r=i(ne),$4=n(ne,"LI",{});var fqe=s($4);q8e=n(fqe,"STRONG",{});var S9t=s(q8e);R0r=r(S9t,"gptj"),S9t.forEach(t),P0r=r(fqe," \u2014 "),VJ=n(fqe,"A",{href:!0});var R9t=s(VJ);B0r=r(R9t,"TFGPTJForSequenceClassification"),R9t.forEach(t),I0r=r(fqe," (GPT-J model)"),fqe.forEach(t),N0r=i(ne),k4=n(ne,"LI",{});var mqe=s(k4);j8e=n(mqe,"STRONG",{});var P9t=s(j8e);q0r=r(P9t,"layoutlm"),P9t.forEach(t),j0r=r(mqe," \u2014 "),XJ=n(mqe,"A",{href:!0});var B9t=s(XJ);D0r=r(B9t,"TFLayoutLMForSequenceClassification"),B9t.forEach(t),G0r=r(mqe," (LayoutLM model)"),mqe.forEach(t),O0r=i(ne),S4=n(ne,"LI",{});var gqe=s(S4);D8e=n(gqe,"STRONG",{});var I9t=s(D8e);V0r=r(I9t,"longformer"),I9t.forEach(t),X0r=r(gqe," \u2014 "),zJ=n(gqe,"A",{href:!0});var N9t=s(zJ);z0r=r(N9t,"TFLongformerForSequenceClassification"),N9t.forEach(t),Q0r=r(gqe," (Longformer model)"),gqe.forEach(t),W0r=i(ne),R4=n(ne,"LI",{});var hqe=s(R4);G8e=n(hqe,"STRONG",{});var q9t=s(G8e);H0r=r(q9t,"mobilebert"),q9t.forEach(t),U0r=r(hqe," \u2014 "),QJ=n(hqe,"A",{href:!0});var j9t=s(QJ);J0r=r(j9t,"TFMobileBertForSequenceClassification"),j9t.forEach(t),Y0r=r(hqe," (MobileBERT model)"),hqe.forEach(t),K0r=i(ne),P4=n(ne,"LI",{});var pqe=s(P4);O8e=n(pqe,"STRONG",{});var D9t=s(O8e);Z0r=r(D9t,"mpnet"),D9t.forEach(t),ewr=r(pqe," \u2014 "),WJ=n(pqe,"A",{href:!0});var G9t=s(WJ);owr=r(G9t,"TFMPNetForSequenceClassification"),G9t.forEach(t),rwr=r(pqe," (MPNet model)"),pqe.forEach(t),twr=i(ne),B4=n(ne,"LI",{});var _qe=s(B4);V8e=n(_qe,"STRONG",{});var O9t=s(V8e);awr=r(O9t,"openai-gpt"),O9t.forEach(t),nwr=r(_qe," \u2014 "),HJ=n(_qe,"A",{href:!0});var V9t=s(HJ);swr=r(V9t,"TFOpenAIGPTForSequenceClassification"),V9t.forEach(t),lwr=r(_qe," (OpenAI GPT model)"),_qe.forEach(t),iwr=i(ne),I4=n(ne,"LI",{});var uqe=s(I4);X8e=n(uqe,"STRONG",{});var X9t=s(X8e);dwr=r(X9t,"rembert"),X9t.forEach(t),cwr=r(uqe," \u2014 "),UJ=n(uqe,"A",{href:!0});var z9t=s(UJ);fwr=r(z9t,"TFRemBertForSequenceClassification"),z9t.forEach(t),mwr=r(uqe," (RemBERT model)"),uqe.forEach(t),gwr=i(ne),N4=n(ne,"LI",{});var bqe=s(N4);z8e=n(bqe,"STRONG",{});var Q9t=s(z8e);hwr=r(Q9t,"roberta"),Q9t.forEach(t),pwr=r(bqe," \u2014 "),JJ=n(bqe,"A",{href:!0});var W9t=s(JJ);_wr=r(W9t,"TFRobertaForSequenceClassification"),W9t.forEach(t),uwr=r(bqe," (RoBERTa model)"),bqe.forEach(t),bwr=i(ne),q4=n(ne,"LI",{});var vqe=s(q4);Q8e=n(vqe,"STRONG",{});var H9t=s(Q8e);vwr=r(H9t,"roformer"),H9t.forEach(t),Fwr=r(vqe," \u2014 "),YJ=n(vqe,"A",{href:!0});var U9t=s(YJ);Twr=r(U9t,"TFRoFormerForSequenceClassification"),U9t.forEach(t),Mwr=r(vqe," (RoFormer model)"),vqe.forEach(t),Ewr=i(ne),j4=n(ne,"LI",{});var Fqe=s(j4);W8e=n(Fqe,"STRONG",{});var J9t=s(W8e);Cwr=r(J9t,"tapas"),J9t.forEach(t),wwr=r(Fqe," \u2014 "),KJ=n(Fqe,"A",{href:!0});var Y9t=s(KJ);Awr=r(Y9t,"TFTapasForSequenceClassification"),Y9t.forEach(t),Lwr=r(Fqe," (TAPAS model)"),Fqe.forEach(t),ywr=i(ne),D4=n(ne,"LI",{});var Tqe=s(D4);H8e=n(Tqe,"STRONG",{});var K9t=s(H8e);xwr=r(K9t,"transfo-xl"),K9t.forEach(t),$wr=r(Tqe," \u2014 "),ZJ=n(Tqe,"A",{href:!0});var Z9t=s(ZJ);kwr=r(Z9t,"TFTransfoXLForSequenceClassification"),Z9t.forEach(t),Swr=r(Tqe," (Transformer-XL model)"),Tqe.forEach(t),Rwr=i(ne),G4=n(ne,"LI",{});var Mqe=s(G4);U8e=n(Mqe,"STRONG",{});var ext=s(U8e);Pwr=r(ext,"xlm"),ext.forEach(t),Bwr=r(Mqe," \u2014 "),eY=n(Mqe,"A",{href:!0});var oxt=s(eY);Iwr=r(oxt,"TFXLMForSequenceClassification"),oxt.forEach(t),Nwr=r(Mqe," (XLM model)"),Mqe.forEach(t),qwr=i(ne),O4=n(ne,"LI",{});var Eqe=s(O4);J8e=n(Eqe,"STRONG",{});var rxt=s(J8e);jwr=r(rxt,"xlm-roberta"),rxt.forEach(t),Dwr=r(Eqe," \u2014 "),oY=n(Eqe,"A",{href:!0});var txt=s(oY);Gwr=r(txt,"TFXLMRobertaForSequenceClassification"),txt.forEach(t),Owr=r(Eqe," (XLM-RoBERTa model)"),Eqe.forEach(t),Vwr=i(ne),V4=n(ne,"LI",{});var Cqe=s(V4);Y8e=n(Cqe,"STRONG",{});var axt=s(Y8e);Xwr=r(axt,"xlnet"),axt.forEach(t),zwr=r(Cqe," \u2014 "),rY=n(Cqe,"A",{href:!0});var nxt=s(rY);Qwr=r(nxt,"TFXLNetForSequenceClassification"),nxt.forEach(t),Wwr=r(Cqe," (XLNet model)"),Cqe.forEach(t),ne.forEach(t),Hwr=i(Il),T(X4.$$.fragment,Il),Il.forEach(t),Bl.forEach(t),rVe=i(f),Tc=n(f,"H2",{class:!0});var cze=s(Tc);z4=n(cze,"A",{id:!0,class:!0,href:!0});var sxt=s(z4);K8e=n(sxt,"SPAN",{});var lxt=s(K8e);T(U9.$$.fragment,lxt),lxt.forEach(t),sxt.forEach(t),Uwr=i(cze),Z8e=n(cze,"SPAN",{});var ixt=s(Z8e);Jwr=r(ixt,"TFAutoModelForMultipleChoice"),ixt.forEach(t),cze.forEach(t),tVe=i(f),sr=n(f,"DIV",{class:!0});var Nl=s(sr);T(J9.$$.fragment,Nl),Ywr=i(Nl),Mc=n(Nl,"P",{});var Are=s(Mc);Kwr=r(Are,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),tY=n(Are,"A",{href:!0});var dxt=s(tY);Zwr=r(dxt,"from_pretrained()"),dxt.forEach(t),eAr=r(Are," class method or the "),aY=n(Are,"A",{href:!0});var cxt=s(aY);oAr=r(cxt,"from_config()"),cxt.forEach(t),rAr=r(Are,` class
method.`),Are.forEach(t),tAr=i(Nl),Y9=n(Nl,"P",{});var fze=s(Y9);aAr=r(fze,"This class cannot be instantiated directly using "),eMe=n(fze,"CODE",{});var fxt=s(eMe);nAr=r(fxt,"__init__()"),fxt.forEach(t),sAr=r(fze," (throws an error)."),fze.forEach(t),lAr=i(Nl),Nt=n(Nl,"DIV",{class:!0});var DA=s(Nt);T(K9.$$.fragment,DA),iAr=i(DA),oMe=n(DA,"P",{});var mxt=s(oMe);dAr=r(mxt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),mxt.forEach(t),cAr=i(DA),Ec=n(DA,"P",{});var Lre=s(Ec);fAr=r(Lre,`Note:
Loading a model from its configuration file does `),rMe=n(Lre,"STRONG",{});var gxt=s(rMe);mAr=r(gxt,"not"),gxt.forEach(t),gAr=r(Lre,` load the model weights. It only affects the
model\u2019s configuration. Use `),nY=n(Lre,"A",{href:!0});var hxt=s(nY);hAr=r(hxt,"from_pretrained()"),hxt.forEach(t),pAr=r(Lre," to load the model weights."),Lre.forEach(t),_Ar=i(DA),T(Q4.$$.fragment,DA),DA.forEach(t),uAr=i(Nl),Pr=n(Nl,"DIV",{class:!0});var ql=s(Pr);T(Z9.$$.fragment,ql),bAr=i(ql),tMe=n(ql,"P",{});var pxt=s(tMe);vAr=r(pxt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),pxt.forEach(t),FAr=i(ql),mn=n(ql,"P",{});var GA=s(mn);TAr=r(GA,"The model class to instantiate is selected based on the "),aMe=n(GA,"CODE",{});var _xt=s(aMe);MAr=r(_xt,"model_type"),_xt.forEach(t),EAr=r(GA,` property of the config object (either
passed as an argument or loaded from `),nMe=n(GA,"CODE",{});var uxt=s(nMe);CAr=r(uxt,"pretrained_model_name_or_path"),uxt.forEach(t),wAr=r(GA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sMe=n(GA,"CODE",{});var bxt=s(sMe);AAr=r(bxt,"pretrained_model_name_or_path"),bxt.forEach(t),LAr=r(GA,":"),GA.forEach(t),yAr=i(ql),_e=n(ql,"UL",{});var ve=s(_e);W4=n(ve,"LI",{});var wqe=s(W4);lMe=n(wqe,"STRONG",{});var vxt=s(lMe);xAr=r(vxt,"albert"),vxt.forEach(t),$Ar=r(wqe," \u2014 "),sY=n(wqe,"A",{href:!0});var Fxt=s(sY);kAr=r(Fxt,"TFAlbertForMultipleChoice"),Fxt.forEach(t),SAr=r(wqe," (ALBERT model)"),wqe.forEach(t),RAr=i(ve),H4=n(ve,"LI",{});var Aqe=s(H4);iMe=n(Aqe,"STRONG",{});var Txt=s(iMe);PAr=r(Txt,"bert"),Txt.forEach(t),BAr=r(Aqe," \u2014 "),lY=n(Aqe,"A",{href:!0});var Mxt=s(lY);IAr=r(Mxt,"TFBertForMultipleChoice"),Mxt.forEach(t),NAr=r(Aqe," (BERT model)"),Aqe.forEach(t),qAr=i(ve),U4=n(ve,"LI",{});var Lqe=s(U4);dMe=n(Lqe,"STRONG",{});var Ext=s(dMe);jAr=r(Ext,"camembert"),Ext.forEach(t),DAr=r(Lqe," \u2014 "),iY=n(Lqe,"A",{href:!0});var Cxt=s(iY);GAr=r(Cxt,"TFCamembertForMultipleChoice"),Cxt.forEach(t),OAr=r(Lqe," (CamemBERT model)"),Lqe.forEach(t),VAr=i(ve),J4=n(ve,"LI",{});var yqe=s(J4);cMe=n(yqe,"STRONG",{});var wxt=s(cMe);XAr=r(wxt,"convbert"),wxt.forEach(t),zAr=r(yqe," \u2014 "),dY=n(yqe,"A",{href:!0});var Axt=s(dY);QAr=r(Axt,"TFConvBertForMultipleChoice"),Axt.forEach(t),WAr=r(yqe," (ConvBERT model)"),yqe.forEach(t),HAr=i(ve),Y4=n(ve,"LI",{});var xqe=s(Y4);fMe=n(xqe,"STRONG",{});var Lxt=s(fMe);UAr=r(Lxt,"distilbert"),Lxt.forEach(t),JAr=r(xqe," \u2014 "),cY=n(xqe,"A",{href:!0});var yxt=s(cY);YAr=r(yxt,"TFDistilBertForMultipleChoice"),yxt.forEach(t),KAr=r(xqe," (DistilBERT model)"),xqe.forEach(t),ZAr=i(ve),K4=n(ve,"LI",{});var $qe=s(K4);mMe=n($qe,"STRONG",{});var xxt=s(mMe);e6r=r(xxt,"electra"),xxt.forEach(t),o6r=r($qe," \u2014 "),fY=n($qe,"A",{href:!0});var $xt=s(fY);r6r=r($xt,"TFElectraForMultipleChoice"),$xt.forEach(t),t6r=r($qe," (ELECTRA model)"),$qe.forEach(t),a6r=i(ve),Z4=n(ve,"LI",{});var kqe=s(Z4);gMe=n(kqe,"STRONG",{});var kxt=s(gMe);n6r=r(kxt,"flaubert"),kxt.forEach(t),s6r=r(kqe," \u2014 "),mY=n(kqe,"A",{href:!0});var Sxt=s(mY);l6r=r(Sxt,"TFFlaubertForMultipleChoice"),Sxt.forEach(t),i6r=r(kqe," (FlauBERT model)"),kqe.forEach(t),d6r=i(ve),eC=n(ve,"LI",{});var Sqe=s(eC);hMe=n(Sqe,"STRONG",{});var Rxt=s(hMe);c6r=r(Rxt,"funnel"),Rxt.forEach(t),f6r=r(Sqe," \u2014 "),gY=n(Sqe,"A",{href:!0});var Pxt=s(gY);m6r=r(Pxt,"TFFunnelForMultipleChoice"),Pxt.forEach(t),g6r=r(Sqe," (Funnel Transformer model)"),Sqe.forEach(t),h6r=i(ve),oC=n(ve,"LI",{});var Rqe=s(oC);pMe=n(Rqe,"STRONG",{});var Bxt=s(pMe);p6r=r(Bxt,"longformer"),Bxt.forEach(t),_6r=r(Rqe," \u2014 "),hY=n(Rqe,"A",{href:!0});var Ixt=s(hY);u6r=r(Ixt,"TFLongformerForMultipleChoice"),Ixt.forEach(t),b6r=r(Rqe," (Longformer model)"),Rqe.forEach(t),v6r=i(ve),rC=n(ve,"LI",{});var Pqe=s(rC);_Me=n(Pqe,"STRONG",{});var Nxt=s(_Me);F6r=r(Nxt,"mobilebert"),Nxt.forEach(t),T6r=r(Pqe," \u2014 "),pY=n(Pqe,"A",{href:!0});var qxt=s(pY);M6r=r(qxt,"TFMobileBertForMultipleChoice"),qxt.forEach(t),E6r=r(Pqe," (MobileBERT model)"),Pqe.forEach(t),C6r=i(ve),tC=n(ve,"LI",{});var Bqe=s(tC);uMe=n(Bqe,"STRONG",{});var jxt=s(uMe);w6r=r(jxt,"mpnet"),jxt.forEach(t),A6r=r(Bqe," \u2014 "),_Y=n(Bqe,"A",{href:!0});var Dxt=s(_Y);L6r=r(Dxt,"TFMPNetForMultipleChoice"),Dxt.forEach(t),y6r=r(Bqe," (MPNet model)"),Bqe.forEach(t),x6r=i(ve),aC=n(ve,"LI",{});var Iqe=s(aC);bMe=n(Iqe,"STRONG",{});var Gxt=s(bMe);$6r=r(Gxt,"rembert"),Gxt.forEach(t),k6r=r(Iqe," \u2014 "),uY=n(Iqe,"A",{href:!0});var Oxt=s(uY);S6r=r(Oxt,"TFRemBertForMultipleChoice"),Oxt.forEach(t),R6r=r(Iqe," (RemBERT model)"),Iqe.forEach(t),P6r=i(ve),nC=n(ve,"LI",{});var Nqe=s(nC);vMe=n(Nqe,"STRONG",{});var Vxt=s(vMe);B6r=r(Vxt,"roberta"),Vxt.forEach(t),I6r=r(Nqe," \u2014 "),bY=n(Nqe,"A",{href:!0});var Xxt=s(bY);N6r=r(Xxt,"TFRobertaForMultipleChoice"),Xxt.forEach(t),q6r=r(Nqe," (RoBERTa model)"),Nqe.forEach(t),j6r=i(ve),sC=n(ve,"LI",{});var qqe=s(sC);FMe=n(qqe,"STRONG",{});var zxt=s(FMe);D6r=r(zxt,"roformer"),zxt.forEach(t),G6r=r(qqe," \u2014 "),vY=n(qqe,"A",{href:!0});var Qxt=s(vY);O6r=r(Qxt,"TFRoFormerForMultipleChoice"),Qxt.forEach(t),V6r=r(qqe," (RoFormer model)"),qqe.forEach(t),X6r=i(ve),lC=n(ve,"LI",{});var jqe=s(lC);TMe=n(jqe,"STRONG",{});var Wxt=s(TMe);z6r=r(Wxt,"xlm"),Wxt.forEach(t),Q6r=r(jqe," \u2014 "),FY=n(jqe,"A",{href:!0});var Hxt=s(FY);W6r=r(Hxt,"TFXLMForMultipleChoice"),Hxt.forEach(t),H6r=r(jqe," (XLM model)"),jqe.forEach(t),U6r=i(ve),iC=n(ve,"LI",{});var Dqe=s(iC);MMe=n(Dqe,"STRONG",{});var Uxt=s(MMe);J6r=r(Uxt,"xlm-roberta"),Uxt.forEach(t),Y6r=r(Dqe," \u2014 "),TY=n(Dqe,"A",{href:!0});var Jxt=s(TY);K6r=r(Jxt,"TFXLMRobertaForMultipleChoice"),Jxt.forEach(t),Z6r=r(Dqe," (XLM-RoBERTa model)"),Dqe.forEach(t),eLr=i(ve),dC=n(ve,"LI",{});var Gqe=s(dC);EMe=n(Gqe,"STRONG",{});var Yxt=s(EMe);oLr=r(Yxt,"xlnet"),Yxt.forEach(t),rLr=r(Gqe," \u2014 "),MY=n(Gqe,"A",{href:!0});var Kxt=s(MY);tLr=r(Kxt,"TFXLNetForMultipleChoice"),Kxt.forEach(t),aLr=r(Gqe," (XLNet model)"),Gqe.forEach(t),ve.forEach(t),nLr=i(ql),T(cC.$$.fragment,ql),ql.forEach(t),Nl.forEach(t),aVe=i(f),Cc=n(f,"H2",{class:!0});var mze=s(Cc);fC=n(mze,"A",{id:!0,class:!0,href:!0});var Zxt=s(fC);CMe=n(Zxt,"SPAN",{});var e$t=s(CMe);T(ex.$$.fragment,e$t),e$t.forEach(t),Zxt.forEach(t),sLr=i(mze),wMe=n(mze,"SPAN",{});var o$t=s(wMe);lLr=r(o$t,"TFAutoModelForNextSentencePrediction"),o$t.forEach(t),mze.forEach(t),nVe=i(f),lr=n(f,"DIV",{class:!0});var jl=s(lr);T(ox.$$.fragment,jl),iLr=i(jl),wc=n(jl,"P",{});var yre=s(wc);dLr=r(yre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),EY=n(yre,"A",{href:!0});var r$t=s(EY);cLr=r(r$t,"from_pretrained()"),r$t.forEach(t),fLr=r(yre," class method or the "),CY=n(yre,"A",{href:!0});var t$t=s(CY);mLr=r(t$t,"from_config()"),t$t.forEach(t),gLr=r(yre,` class
method.`),yre.forEach(t),hLr=i(jl),rx=n(jl,"P",{});var gze=s(rx);pLr=r(gze,"This class cannot be instantiated directly using "),AMe=n(gze,"CODE",{});var a$t=s(AMe);_Lr=r(a$t,"__init__()"),a$t.forEach(t),uLr=r(gze," (throws an error)."),gze.forEach(t),bLr=i(jl),qt=n(jl,"DIV",{class:!0});var OA=s(qt);T(tx.$$.fragment,OA),vLr=i(OA),LMe=n(OA,"P",{});var n$t=s(LMe);FLr=r(n$t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),n$t.forEach(t),TLr=i(OA),Ac=n(OA,"P",{});var xre=s(Ac);MLr=r(xre,`Note:
Loading a model from its configuration file does `),yMe=n(xre,"STRONG",{});var s$t=s(yMe);ELr=r(s$t,"not"),s$t.forEach(t),CLr=r(xre,` load the model weights. It only affects the
model\u2019s configuration. Use `),wY=n(xre,"A",{href:!0});var l$t=s(wY);wLr=r(l$t,"from_pretrained()"),l$t.forEach(t),ALr=r(xre," to load the model weights."),xre.forEach(t),LLr=i(OA),T(mC.$$.fragment,OA),OA.forEach(t),yLr=i(jl),Br=n(jl,"DIV",{class:!0});var Dl=s(Br);T(ax.$$.fragment,Dl),xLr=i(Dl),xMe=n(Dl,"P",{});var i$t=s(xMe);$Lr=r(i$t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),i$t.forEach(t),kLr=i(Dl),gn=n(Dl,"P",{});var VA=s(gn);SLr=r(VA,"The model class to instantiate is selected based on the "),$Me=n(VA,"CODE",{});var d$t=s($Me);RLr=r(d$t,"model_type"),d$t.forEach(t),PLr=r(VA,` property of the config object (either
passed as an argument or loaded from `),kMe=n(VA,"CODE",{});var c$t=s(kMe);BLr=r(c$t,"pretrained_model_name_or_path"),c$t.forEach(t),ILr=r(VA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SMe=n(VA,"CODE",{});var f$t=s(SMe);NLr=r(f$t,"pretrained_model_name_or_path"),f$t.forEach(t),qLr=r(VA,":"),VA.forEach(t),jLr=i(Dl),nx=n(Dl,"UL",{});var hze=s(nx);gC=n(hze,"LI",{});var Oqe=s(gC);RMe=n(Oqe,"STRONG",{});var m$t=s(RMe);DLr=r(m$t,"bert"),m$t.forEach(t),GLr=r(Oqe," \u2014 "),AY=n(Oqe,"A",{href:!0});var g$t=s(AY);OLr=r(g$t,"TFBertForNextSentencePrediction"),g$t.forEach(t),VLr=r(Oqe," (BERT model)"),Oqe.forEach(t),XLr=i(hze),hC=n(hze,"LI",{});var Vqe=s(hC);PMe=n(Vqe,"STRONG",{});var h$t=s(PMe);zLr=r(h$t,"mobilebert"),h$t.forEach(t),QLr=r(Vqe," \u2014 "),LY=n(Vqe,"A",{href:!0});var p$t=s(LY);WLr=r(p$t,"TFMobileBertForNextSentencePrediction"),p$t.forEach(t),HLr=r(Vqe," (MobileBERT model)"),Vqe.forEach(t),hze.forEach(t),ULr=i(Dl),T(pC.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),sVe=i(f),Lc=n(f,"H2",{class:!0});var pze=s(Lc);_C=n(pze,"A",{id:!0,class:!0,href:!0});var _$t=s(_C);BMe=n(_$t,"SPAN",{});var u$t=s(BMe);T(sx.$$.fragment,u$t),u$t.forEach(t),_$t.forEach(t),JLr=i(pze),IMe=n(pze,"SPAN",{});var b$t=s(IMe);YLr=r(b$t,"TFAutoModelForTableQuestionAnswering"),b$t.forEach(t),pze.forEach(t),lVe=i(f),ir=n(f,"DIV",{class:!0});var Gl=s(ir);T(lx.$$.fragment,Gl),KLr=i(Gl),yc=n(Gl,"P",{});var $re=s(yc);ZLr=r($re,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),yY=n($re,"A",{href:!0});var v$t=s(yY);eyr=r(v$t,"from_pretrained()"),v$t.forEach(t),oyr=r($re," class method or the "),xY=n($re,"A",{href:!0});var F$t=s(xY);ryr=r(F$t,"from_config()"),F$t.forEach(t),tyr=r($re,` class
method.`),$re.forEach(t),ayr=i(Gl),ix=n(Gl,"P",{});var _ze=s(ix);nyr=r(_ze,"This class cannot be instantiated directly using "),NMe=n(_ze,"CODE",{});var T$t=s(NMe);syr=r(T$t,"__init__()"),T$t.forEach(t),lyr=r(_ze," (throws an error)."),_ze.forEach(t),iyr=i(Gl),jt=n(Gl,"DIV",{class:!0});var XA=s(jt);T(dx.$$.fragment,XA),dyr=i(XA),qMe=n(XA,"P",{});var M$t=s(qMe);cyr=r(M$t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),M$t.forEach(t),fyr=i(XA),xc=n(XA,"P",{});var kre=s(xc);myr=r(kre,`Note:
Loading a model from its configuration file does `),jMe=n(kre,"STRONG",{});var E$t=s(jMe);gyr=r(E$t,"not"),E$t.forEach(t),hyr=r(kre,` load the model weights. It only affects the
model\u2019s configuration. Use `),$Y=n(kre,"A",{href:!0});var C$t=s($Y);pyr=r(C$t,"from_pretrained()"),C$t.forEach(t),_yr=r(kre," to load the model weights."),kre.forEach(t),uyr=i(XA),T(uC.$$.fragment,XA),XA.forEach(t),byr=i(Gl),Ir=n(Gl,"DIV",{class:!0});var Ol=s(Ir);T(cx.$$.fragment,Ol),vyr=i(Ol),DMe=n(Ol,"P",{});var w$t=s(DMe);Fyr=r(w$t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),w$t.forEach(t),Tyr=i(Ol),hn=n(Ol,"P",{});var zA=s(hn);Myr=r(zA,"The model class to instantiate is selected based on the "),GMe=n(zA,"CODE",{});var A$t=s(GMe);Eyr=r(A$t,"model_type"),A$t.forEach(t),Cyr=r(zA,` property of the config object (either
passed as an argument or loaded from `),OMe=n(zA,"CODE",{});var L$t=s(OMe);wyr=r(L$t,"pretrained_model_name_or_path"),L$t.forEach(t),Ayr=r(zA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VMe=n(zA,"CODE",{});var y$t=s(VMe);Lyr=r(y$t,"pretrained_model_name_or_path"),y$t.forEach(t),yyr=r(zA,":"),zA.forEach(t),xyr=i(Ol),XMe=n(Ol,"UL",{});var x$t=s(XMe);bC=n(x$t,"LI",{});var Xqe=s(bC);zMe=n(Xqe,"STRONG",{});var $$t=s(zMe);$yr=r($$t,"tapas"),$$t.forEach(t),kyr=r(Xqe," \u2014 "),kY=n(Xqe,"A",{href:!0});var k$t=s(kY);Syr=r(k$t,"TFTapasForQuestionAnswering"),k$t.forEach(t),Ryr=r(Xqe," (TAPAS model)"),Xqe.forEach(t),x$t.forEach(t),Pyr=i(Ol),T(vC.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),iVe=i(f),$c=n(f,"H2",{class:!0});var uze=s($c);FC=n(uze,"A",{id:!0,class:!0,href:!0});var S$t=s(FC);QMe=n(S$t,"SPAN",{});var R$t=s(QMe);T(fx.$$.fragment,R$t),R$t.forEach(t),S$t.forEach(t),Byr=i(uze),WMe=n(uze,"SPAN",{});var P$t=s(WMe);Iyr=r(P$t,"TFAutoModelForTokenClassification"),P$t.forEach(t),uze.forEach(t),dVe=i(f),dr=n(f,"DIV",{class:!0});var Vl=s(dr);T(mx.$$.fragment,Vl),Nyr=i(Vl),kc=n(Vl,"P",{});var Sre=s(kc);qyr=r(Sre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),SY=n(Sre,"A",{href:!0});var B$t=s(SY);jyr=r(B$t,"from_pretrained()"),B$t.forEach(t),Dyr=r(Sre," class method or the "),RY=n(Sre,"A",{href:!0});var I$t=s(RY);Gyr=r(I$t,"from_config()"),I$t.forEach(t),Oyr=r(Sre,` class
method.`),Sre.forEach(t),Vyr=i(Vl),gx=n(Vl,"P",{});var bze=s(gx);Xyr=r(bze,"This class cannot be instantiated directly using "),HMe=n(bze,"CODE",{});var N$t=s(HMe);zyr=r(N$t,"__init__()"),N$t.forEach(t),Qyr=r(bze," (throws an error)."),bze.forEach(t),Wyr=i(Vl),Dt=n(Vl,"DIV",{class:!0});var QA=s(Dt);T(hx.$$.fragment,QA),Hyr=i(QA),UMe=n(QA,"P",{});var q$t=s(UMe);Uyr=r(q$t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),q$t.forEach(t),Jyr=i(QA),Sc=n(QA,"P",{});var Rre=s(Sc);Yyr=r(Rre,`Note:
Loading a model from its configuration file does `),JMe=n(Rre,"STRONG",{});var j$t=s(JMe);Kyr=r(j$t,"not"),j$t.forEach(t),Zyr=r(Rre,` load the model weights. It only affects the
model\u2019s configuration. Use `),PY=n(Rre,"A",{href:!0});var D$t=s(PY);e9r=r(D$t,"from_pretrained()"),D$t.forEach(t),o9r=r(Rre," to load the model weights."),Rre.forEach(t),r9r=i(QA),T(TC.$$.fragment,QA),QA.forEach(t),t9r=i(Vl),Nr=n(Vl,"DIV",{class:!0});var Xl=s(Nr);T(px.$$.fragment,Xl),a9r=i(Xl),YMe=n(Xl,"P",{});var G$t=s(YMe);n9r=r(G$t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),G$t.forEach(t),s9r=i(Xl),pn=n(Xl,"P",{});var WA=s(pn);l9r=r(WA,"The model class to instantiate is selected based on the "),KMe=n(WA,"CODE",{});var O$t=s(KMe);i9r=r(O$t,"model_type"),O$t.forEach(t),d9r=r(WA,` property of the config object (either
passed as an argument or loaded from `),ZMe=n(WA,"CODE",{});var V$t=s(ZMe);c9r=r(V$t,"pretrained_model_name_or_path"),V$t.forEach(t),f9r=r(WA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eEe=n(WA,"CODE",{});var X$t=s(eEe);m9r=r(X$t,"pretrained_model_name_or_path"),X$t.forEach(t),g9r=r(WA,":"),WA.forEach(t),h9r=i(Xl),de=n(Xl,"UL",{});var me=s(de);MC=n(me,"LI",{});var zqe=s(MC);oEe=n(zqe,"STRONG",{});var z$t=s(oEe);p9r=r(z$t,"albert"),z$t.forEach(t),_9r=r(zqe," \u2014 "),BY=n(zqe,"A",{href:!0});var Q$t=s(BY);u9r=r(Q$t,"TFAlbertForTokenClassification"),Q$t.forEach(t),b9r=r(zqe," (ALBERT model)"),zqe.forEach(t),v9r=i(me),EC=n(me,"LI",{});var Qqe=s(EC);rEe=n(Qqe,"STRONG",{});var W$t=s(rEe);F9r=r(W$t,"bert"),W$t.forEach(t),T9r=r(Qqe," \u2014 "),IY=n(Qqe,"A",{href:!0});var H$t=s(IY);M9r=r(H$t,"TFBertForTokenClassification"),H$t.forEach(t),E9r=r(Qqe," (BERT model)"),Qqe.forEach(t),C9r=i(me),CC=n(me,"LI",{});var Wqe=s(CC);tEe=n(Wqe,"STRONG",{});var U$t=s(tEe);w9r=r(U$t,"camembert"),U$t.forEach(t),A9r=r(Wqe," \u2014 "),NY=n(Wqe,"A",{href:!0});var J$t=s(NY);L9r=r(J$t,"TFCamembertForTokenClassification"),J$t.forEach(t),y9r=r(Wqe," (CamemBERT model)"),Wqe.forEach(t),x9r=i(me),wC=n(me,"LI",{});var Hqe=s(wC);aEe=n(Hqe,"STRONG",{});var Y$t=s(aEe);$9r=r(Y$t,"convbert"),Y$t.forEach(t),k9r=r(Hqe," \u2014 "),qY=n(Hqe,"A",{href:!0});var K$t=s(qY);S9r=r(K$t,"TFConvBertForTokenClassification"),K$t.forEach(t),R9r=r(Hqe," (ConvBERT model)"),Hqe.forEach(t),P9r=i(me),AC=n(me,"LI",{});var Uqe=s(AC);nEe=n(Uqe,"STRONG",{});var Z$t=s(nEe);B9r=r(Z$t,"deberta"),Z$t.forEach(t),I9r=r(Uqe," \u2014 "),jY=n(Uqe,"A",{href:!0});var ekt=s(jY);N9r=r(ekt,"TFDebertaForTokenClassification"),ekt.forEach(t),q9r=r(Uqe," (DeBERTa model)"),Uqe.forEach(t),j9r=i(me),LC=n(me,"LI",{});var Jqe=s(LC);sEe=n(Jqe,"STRONG",{});var okt=s(sEe);D9r=r(okt,"deberta-v2"),okt.forEach(t),G9r=r(Jqe," \u2014 "),DY=n(Jqe,"A",{href:!0});var rkt=s(DY);O9r=r(rkt,"TFDebertaV2ForTokenClassification"),rkt.forEach(t),V9r=r(Jqe," (DeBERTa-v2 model)"),Jqe.forEach(t),X9r=i(me),yC=n(me,"LI",{});var Yqe=s(yC);lEe=n(Yqe,"STRONG",{});var tkt=s(lEe);z9r=r(tkt,"distilbert"),tkt.forEach(t),Q9r=r(Yqe," \u2014 "),GY=n(Yqe,"A",{href:!0});var akt=s(GY);W9r=r(akt,"TFDistilBertForTokenClassification"),akt.forEach(t),H9r=r(Yqe," (DistilBERT model)"),Yqe.forEach(t),U9r=i(me),xC=n(me,"LI",{});var Kqe=s(xC);iEe=n(Kqe,"STRONG",{});var nkt=s(iEe);J9r=r(nkt,"electra"),nkt.forEach(t),Y9r=r(Kqe," \u2014 "),OY=n(Kqe,"A",{href:!0});var skt=s(OY);K9r=r(skt,"TFElectraForTokenClassification"),skt.forEach(t),Z9r=r(Kqe," (ELECTRA model)"),Kqe.forEach(t),exr=i(me),$C=n(me,"LI",{});var Zqe=s($C);dEe=n(Zqe,"STRONG",{});var lkt=s(dEe);oxr=r(lkt,"flaubert"),lkt.forEach(t),rxr=r(Zqe," \u2014 "),VY=n(Zqe,"A",{href:!0});var ikt=s(VY);txr=r(ikt,"TFFlaubertForTokenClassification"),ikt.forEach(t),axr=r(Zqe," (FlauBERT model)"),Zqe.forEach(t),nxr=i(me),kC=n(me,"LI",{});var eje=s(kC);cEe=n(eje,"STRONG",{});var dkt=s(cEe);sxr=r(dkt,"funnel"),dkt.forEach(t),lxr=r(eje," \u2014 "),XY=n(eje,"A",{href:!0});var ckt=s(XY);ixr=r(ckt,"TFFunnelForTokenClassification"),ckt.forEach(t),dxr=r(eje," (Funnel Transformer model)"),eje.forEach(t),cxr=i(me),SC=n(me,"LI",{});var oje=s(SC);fEe=n(oje,"STRONG",{});var fkt=s(fEe);fxr=r(fkt,"layoutlm"),fkt.forEach(t),mxr=r(oje," \u2014 "),zY=n(oje,"A",{href:!0});var mkt=s(zY);gxr=r(mkt,"TFLayoutLMForTokenClassification"),mkt.forEach(t),hxr=r(oje," (LayoutLM model)"),oje.forEach(t),pxr=i(me),RC=n(me,"LI",{});var rje=s(RC);mEe=n(rje,"STRONG",{});var gkt=s(mEe);_xr=r(gkt,"longformer"),gkt.forEach(t),uxr=r(rje," \u2014 "),QY=n(rje,"A",{href:!0});var hkt=s(QY);bxr=r(hkt,"TFLongformerForTokenClassification"),hkt.forEach(t),vxr=r(rje," (Longformer model)"),rje.forEach(t),Fxr=i(me),PC=n(me,"LI",{});var tje=s(PC);gEe=n(tje,"STRONG",{});var pkt=s(gEe);Txr=r(pkt,"mobilebert"),pkt.forEach(t),Mxr=r(tje," \u2014 "),WY=n(tje,"A",{href:!0});var _kt=s(WY);Exr=r(_kt,"TFMobileBertForTokenClassification"),_kt.forEach(t),Cxr=r(tje," (MobileBERT model)"),tje.forEach(t),wxr=i(me),BC=n(me,"LI",{});var aje=s(BC);hEe=n(aje,"STRONG",{});var ukt=s(hEe);Axr=r(ukt,"mpnet"),ukt.forEach(t),Lxr=r(aje," \u2014 "),HY=n(aje,"A",{href:!0});var bkt=s(HY);yxr=r(bkt,"TFMPNetForTokenClassification"),bkt.forEach(t),xxr=r(aje," (MPNet model)"),aje.forEach(t),$xr=i(me),IC=n(me,"LI",{});var nje=s(IC);pEe=n(nje,"STRONG",{});var vkt=s(pEe);kxr=r(vkt,"rembert"),vkt.forEach(t),Sxr=r(nje," \u2014 "),UY=n(nje,"A",{href:!0});var Fkt=s(UY);Rxr=r(Fkt,"TFRemBertForTokenClassification"),Fkt.forEach(t),Pxr=r(nje," (RemBERT model)"),nje.forEach(t),Bxr=i(me),NC=n(me,"LI",{});var sje=s(NC);_Ee=n(sje,"STRONG",{});var Tkt=s(_Ee);Ixr=r(Tkt,"roberta"),Tkt.forEach(t),Nxr=r(sje," \u2014 "),JY=n(sje,"A",{href:!0});var Mkt=s(JY);qxr=r(Mkt,"TFRobertaForTokenClassification"),Mkt.forEach(t),jxr=r(sje," (RoBERTa model)"),sje.forEach(t),Dxr=i(me),qC=n(me,"LI",{});var lje=s(qC);uEe=n(lje,"STRONG",{});var Ekt=s(uEe);Gxr=r(Ekt,"roformer"),Ekt.forEach(t),Oxr=r(lje," \u2014 "),YY=n(lje,"A",{href:!0});var Ckt=s(YY);Vxr=r(Ckt,"TFRoFormerForTokenClassification"),Ckt.forEach(t),Xxr=r(lje," (RoFormer model)"),lje.forEach(t),zxr=i(me),jC=n(me,"LI",{});var ije=s(jC);bEe=n(ije,"STRONG",{});var wkt=s(bEe);Qxr=r(wkt,"xlm"),wkt.forEach(t),Wxr=r(ije," \u2014 "),KY=n(ije,"A",{href:!0});var Akt=s(KY);Hxr=r(Akt,"TFXLMForTokenClassification"),Akt.forEach(t),Uxr=r(ije," (XLM model)"),ije.forEach(t),Jxr=i(me),DC=n(me,"LI",{});var dje=s(DC);vEe=n(dje,"STRONG",{});var Lkt=s(vEe);Yxr=r(Lkt,"xlm-roberta"),Lkt.forEach(t),Kxr=r(dje," \u2014 "),ZY=n(dje,"A",{href:!0});var ykt=s(ZY);Zxr=r(ykt,"TFXLMRobertaForTokenClassification"),ykt.forEach(t),e$r=r(dje," (XLM-RoBERTa model)"),dje.forEach(t),o$r=i(me),GC=n(me,"LI",{});var cje=s(GC);FEe=n(cje,"STRONG",{});var xkt=s(FEe);r$r=r(xkt,"xlnet"),xkt.forEach(t),t$r=r(cje," \u2014 "),eK=n(cje,"A",{href:!0});var $kt=s(eK);a$r=r($kt,"TFXLNetForTokenClassification"),$kt.forEach(t),n$r=r(cje," (XLNet model)"),cje.forEach(t),me.forEach(t),s$r=i(Xl),T(OC.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),cVe=i(f),Rc=n(f,"H2",{class:!0});var vze=s(Rc);VC=n(vze,"A",{id:!0,class:!0,href:!0});var kkt=s(VC);TEe=n(kkt,"SPAN",{});var Skt=s(TEe);T(_x.$$.fragment,Skt),Skt.forEach(t),kkt.forEach(t),l$r=i(vze),MEe=n(vze,"SPAN",{});var Rkt=s(MEe);i$r=r(Rkt,"TFAutoModelForQuestionAnswering"),Rkt.forEach(t),vze.forEach(t),fVe=i(f),cr=n(f,"DIV",{class:!0});var zl=s(cr);T(ux.$$.fragment,zl),d$r=i(zl),Pc=n(zl,"P",{});var Pre=s(Pc);c$r=r(Pre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),oK=n(Pre,"A",{href:!0});var Pkt=s(oK);f$r=r(Pkt,"from_pretrained()"),Pkt.forEach(t),m$r=r(Pre," class method or the "),rK=n(Pre,"A",{href:!0});var Bkt=s(rK);g$r=r(Bkt,"from_config()"),Bkt.forEach(t),h$r=r(Pre,` class
method.`),Pre.forEach(t),p$r=i(zl),bx=n(zl,"P",{});var Fze=s(bx);_$r=r(Fze,"This class cannot be instantiated directly using "),EEe=n(Fze,"CODE",{});var Ikt=s(EEe);u$r=r(Ikt,"__init__()"),Ikt.forEach(t),b$r=r(Fze," (throws an error)."),Fze.forEach(t),v$r=i(zl),Gt=n(zl,"DIV",{class:!0});var HA=s(Gt);T(vx.$$.fragment,HA),F$r=i(HA),CEe=n(HA,"P",{});var Nkt=s(CEe);T$r=r(Nkt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Nkt.forEach(t),M$r=i(HA),Bc=n(HA,"P",{});var Bre=s(Bc);E$r=r(Bre,`Note:
Loading a model from its configuration file does `),wEe=n(Bre,"STRONG",{});var qkt=s(wEe);C$r=r(qkt,"not"),qkt.forEach(t),w$r=r(Bre,` load the model weights. It only affects the
model\u2019s configuration. Use `),tK=n(Bre,"A",{href:!0});var jkt=s(tK);A$r=r(jkt,"from_pretrained()"),jkt.forEach(t),L$r=r(Bre," to load the model weights."),Bre.forEach(t),y$r=i(HA),T(XC.$$.fragment,HA),HA.forEach(t),x$r=i(zl),qr=n(zl,"DIV",{class:!0});var Ql=s(qr);T(Fx.$$.fragment,Ql),$$r=i(Ql),AEe=n(Ql,"P",{});var Dkt=s(AEe);k$r=r(Dkt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Dkt.forEach(t),S$r=i(Ql),_n=n(Ql,"P",{});var UA=s(_n);R$r=r(UA,"The model class to instantiate is selected based on the "),LEe=n(UA,"CODE",{});var Gkt=s(LEe);P$r=r(Gkt,"model_type"),Gkt.forEach(t),B$r=r(UA,` property of the config object (either
passed as an argument or loaded from `),yEe=n(UA,"CODE",{});var Okt=s(yEe);I$r=r(Okt,"pretrained_model_name_or_path"),Okt.forEach(t),N$r=r(UA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xEe=n(UA,"CODE",{});var Vkt=s(xEe);q$r=r(Vkt,"pretrained_model_name_or_path"),Vkt.forEach(t),j$r=r(UA,":"),UA.forEach(t),D$r=i(Ql),ce=n(Ql,"UL",{});var ge=s(ce);zC=n(ge,"LI",{});var fje=s(zC);$Ee=n(fje,"STRONG",{});var Xkt=s($Ee);G$r=r(Xkt,"albert"),Xkt.forEach(t),O$r=r(fje," \u2014 "),aK=n(fje,"A",{href:!0});var zkt=s(aK);V$r=r(zkt,"TFAlbertForQuestionAnswering"),zkt.forEach(t),X$r=r(fje," (ALBERT model)"),fje.forEach(t),z$r=i(ge),QC=n(ge,"LI",{});var mje=s(QC);kEe=n(mje,"STRONG",{});var Qkt=s(kEe);Q$r=r(Qkt,"bert"),Qkt.forEach(t),W$r=r(mje," \u2014 "),nK=n(mje,"A",{href:!0});var Wkt=s(nK);H$r=r(Wkt,"TFBertForQuestionAnswering"),Wkt.forEach(t),U$r=r(mje," (BERT model)"),mje.forEach(t),J$r=i(ge),WC=n(ge,"LI",{});var gje=s(WC);SEe=n(gje,"STRONG",{});var Hkt=s(SEe);Y$r=r(Hkt,"camembert"),Hkt.forEach(t),K$r=r(gje," \u2014 "),sK=n(gje,"A",{href:!0});var Ukt=s(sK);Z$r=r(Ukt,"TFCamembertForQuestionAnswering"),Ukt.forEach(t),ekr=r(gje," (CamemBERT model)"),gje.forEach(t),okr=i(ge),HC=n(ge,"LI",{});var hje=s(HC);REe=n(hje,"STRONG",{});var Jkt=s(REe);rkr=r(Jkt,"convbert"),Jkt.forEach(t),tkr=r(hje," \u2014 "),lK=n(hje,"A",{href:!0});var Ykt=s(lK);akr=r(Ykt,"TFConvBertForQuestionAnswering"),Ykt.forEach(t),nkr=r(hje," (ConvBERT model)"),hje.forEach(t),skr=i(ge),UC=n(ge,"LI",{});var pje=s(UC);PEe=n(pje,"STRONG",{});var Kkt=s(PEe);lkr=r(Kkt,"deberta"),Kkt.forEach(t),ikr=r(pje," \u2014 "),iK=n(pje,"A",{href:!0});var Zkt=s(iK);dkr=r(Zkt,"TFDebertaForQuestionAnswering"),Zkt.forEach(t),ckr=r(pje," (DeBERTa model)"),pje.forEach(t),fkr=i(ge),JC=n(ge,"LI",{});var _je=s(JC);BEe=n(_je,"STRONG",{});var eSt=s(BEe);mkr=r(eSt,"deberta-v2"),eSt.forEach(t),gkr=r(_je," \u2014 "),dK=n(_je,"A",{href:!0});var oSt=s(dK);hkr=r(oSt,"TFDebertaV2ForQuestionAnswering"),oSt.forEach(t),pkr=r(_je," (DeBERTa-v2 model)"),_je.forEach(t),_kr=i(ge),YC=n(ge,"LI",{});var uje=s(YC);IEe=n(uje,"STRONG",{});var rSt=s(IEe);ukr=r(rSt,"distilbert"),rSt.forEach(t),bkr=r(uje," \u2014 "),cK=n(uje,"A",{href:!0});var tSt=s(cK);vkr=r(tSt,"TFDistilBertForQuestionAnswering"),tSt.forEach(t),Fkr=r(uje," (DistilBERT model)"),uje.forEach(t),Tkr=i(ge),KC=n(ge,"LI",{});var bje=s(KC);NEe=n(bje,"STRONG",{});var aSt=s(NEe);Mkr=r(aSt,"electra"),aSt.forEach(t),Ekr=r(bje," \u2014 "),fK=n(bje,"A",{href:!0});var nSt=s(fK);Ckr=r(nSt,"TFElectraForQuestionAnswering"),nSt.forEach(t),wkr=r(bje," (ELECTRA model)"),bje.forEach(t),Akr=i(ge),ZC=n(ge,"LI",{});var vje=s(ZC);qEe=n(vje,"STRONG",{});var sSt=s(qEe);Lkr=r(sSt,"flaubert"),sSt.forEach(t),ykr=r(vje," \u2014 "),mK=n(vje,"A",{href:!0});var lSt=s(mK);xkr=r(lSt,"TFFlaubertForQuestionAnsweringSimple"),lSt.forEach(t),$kr=r(vje," (FlauBERT model)"),vje.forEach(t),kkr=i(ge),e5=n(ge,"LI",{});var Fje=s(e5);jEe=n(Fje,"STRONG",{});var iSt=s(jEe);Skr=r(iSt,"funnel"),iSt.forEach(t),Rkr=r(Fje," \u2014 "),gK=n(Fje,"A",{href:!0});var dSt=s(gK);Pkr=r(dSt,"TFFunnelForQuestionAnswering"),dSt.forEach(t),Bkr=r(Fje," (Funnel Transformer model)"),Fje.forEach(t),Ikr=i(ge),o5=n(ge,"LI",{});var Tje=s(o5);DEe=n(Tje,"STRONG",{});var cSt=s(DEe);Nkr=r(cSt,"gptj"),cSt.forEach(t),qkr=r(Tje," \u2014 "),hK=n(Tje,"A",{href:!0});var fSt=s(hK);jkr=r(fSt,"TFGPTJForQuestionAnswering"),fSt.forEach(t),Dkr=r(Tje," (GPT-J model)"),Tje.forEach(t),Gkr=i(ge),r5=n(ge,"LI",{});var Mje=s(r5);GEe=n(Mje,"STRONG",{});var mSt=s(GEe);Okr=r(mSt,"longformer"),mSt.forEach(t),Vkr=r(Mje," \u2014 "),pK=n(Mje,"A",{href:!0});var gSt=s(pK);Xkr=r(gSt,"TFLongformerForQuestionAnswering"),gSt.forEach(t),zkr=r(Mje," (Longformer model)"),Mje.forEach(t),Qkr=i(ge),t5=n(ge,"LI",{});var Eje=s(t5);OEe=n(Eje,"STRONG",{});var hSt=s(OEe);Wkr=r(hSt,"mobilebert"),hSt.forEach(t),Hkr=r(Eje," \u2014 "),_K=n(Eje,"A",{href:!0});var pSt=s(_K);Ukr=r(pSt,"TFMobileBertForQuestionAnswering"),pSt.forEach(t),Jkr=r(Eje," (MobileBERT model)"),Eje.forEach(t),Ykr=i(ge),a5=n(ge,"LI",{});var Cje=s(a5);VEe=n(Cje,"STRONG",{});var _St=s(VEe);Kkr=r(_St,"mpnet"),_St.forEach(t),Zkr=r(Cje," \u2014 "),uK=n(Cje,"A",{href:!0});var uSt=s(uK);eSr=r(uSt,"TFMPNetForQuestionAnswering"),uSt.forEach(t),oSr=r(Cje," (MPNet model)"),Cje.forEach(t),rSr=i(ge),n5=n(ge,"LI",{});var wje=s(n5);XEe=n(wje,"STRONG",{});var bSt=s(XEe);tSr=r(bSt,"rembert"),bSt.forEach(t),aSr=r(wje," \u2014 "),bK=n(wje,"A",{href:!0});var vSt=s(bK);nSr=r(vSt,"TFRemBertForQuestionAnswering"),vSt.forEach(t),sSr=r(wje," (RemBERT model)"),wje.forEach(t),lSr=i(ge),s5=n(ge,"LI",{});var Aje=s(s5);zEe=n(Aje,"STRONG",{});var FSt=s(zEe);iSr=r(FSt,"roberta"),FSt.forEach(t),dSr=r(Aje," \u2014 "),vK=n(Aje,"A",{href:!0});var TSt=s(vK);cSr=r(TSt,"TFRobertaForQuestionAnswering"),TSt.forEach(t),fSr=r(Aje," (RoBERTa model)"),Aje.forEach(t),mSr=i(ge),l5=n(ge,"LI",{});var Lje=s(l5);QEe=n(Lje,"STRONG",{});var MSt=s(QEe);gSr=r(MSt,"roformer"),MSt.forEach(t),hSr=r(Lje," \u2014 "),FK=n(Lje,"A",{href:!0});var ESt=s(FK);pSr=r(ESt,"TFRoFormerForQuestionAnswering"),ESt.forEach(t),_Sr=r(Lje," (RoFormer model)"),Lje.forEach(t),uSr=i(ge),i5=n(ge,"LI",{});var yje=s(i5);WEe=n(yje,"STRONG",{});var CSt=s(WEe);bSr=r(CSt,"xlm"),CSt.forEach(t),vSr=r(yje," \u2014 "),TK=n(yje,"A",{href:!0});var wSt=s(TK);FSr=r(wSt,"TFXLMForQuestionAnsweringSimple"),wSt.forEach(t),TSr=r(yje," (XLM model)"),yje.forEach(t),MSr=i(ge),d5=n(ge,"LI",{});var xje=s(d5);HEe=n(xje,"STRONG",{});var ASt=s(HEe);ESr=r(ASt,"xlm-roberta"),ASt.forEach(t),CSr=r(xje," \u2014 "),MK=n(xje,"A",{href:!0});var LSt=s(MK);wSr=r(LSt,"TFXLMRobertaForQuestionAnswering"),LSt.forEach(t),ASr=r(xje," (XLM-RoBERTa model)"),xje.forEach(t),LSr=i(ge),c5=n(ge,"LI",{});var $je=s(c5);UEe=n($je,"STRONG",{});var ySt=s(UEe);ySr=r(ySt,"xlnet"),ySt.forEach(t),xSr=r($je," \u2014 "),EK=n($je,"A",{href:!0});var xSt=s(EK);$Sr=r(xSt,"TFXLNetForQuestionAnsweringSimple"),xSt.forEach(t),kSr=r($je," (XLNet model)"),$je.forEach(t),ge.forEach(t),SSr=i(Ql),T(f5.$$.fragment,Ql),Ql.forEach(t),zl.forEach(t),mVe=i(f),Ic=n(f,"H2",{class:!0});var Tze=s(Ic);m5=n(Tze,"A",{id:!0,class:!0,href:!0});var $St=s(m5);JEe=n($St,"SPAN",{});var kSt=s(JEe);T(Tx.$$.fragment,kSt),kSt.forEach(t),$St.forEach(t),RSr=i(Tze),YEe=n(Tze,"SPAN",{});var SSt=s(YEe);PSr=r(SSt,"TFAutoModelForVision2Seq"),SSt.forEach(t),Tze.forEach(t),gVe=i(f),fr=n(f,"DIV",{class:!0});var Wl=s(fr);T(Mx.$$.fragment,Wl),BSr=i(Wl),Nc=n(Wl,"P",{});var Ire=s(Nc);ISr=r(Ire,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),CK=n(Ire,"A",{href:!0});var RSt=s(CK);NSr=r(RSt,"from_pretrained()"),RSt.forEach(t),qSr=r(Ire," class method or the "),wK=n(Ire,"A",{href:!0});var PSt=s(wK);jSr=r(PSt,"from_config()"),PSt.forEach(t),DSr=r(Ire,` class
method.`),Ire.forEach(t),GSr=i(Wl),Ex=n(Wl,"P",{});var Mze=s(Ex);OSr=r(Mze,"This class cannot be instantiated directly using "),KEe=n(Mze,"CODE",{});var BSt=s(KEe);VSr=r(BSt,"__init__()"),BSt.forEach(t),XSr=r(Mze," (throws an error)."),Mze.forEach(t),zSr=i(Wl),Ot=n(Wl,"DIV",{class:!0});var JA=s(Ot);T(Cx.$$.fragment,JA),QSr=i(JA),ZEe=n(JA,"P",{});var ISt=s(ZEe);WSr=r(ISt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),ISt.forEach(t),HSr=i(JA),qc=n(JA,"P",{});var Nre=s(qc);USr=r(Nre,`Note:
Loading a model from its configuration file does `),e4e=n(Nre,"STRONG",{});var NSt=s(e4e);JSr=r(NSt,"not"),NSt.forEach(t),YSr=r(Nre,` load the model weights. It only affects the
model\u2019s configuration. Use `),AK=n(Nre,"A",{href:!0});var qSt=s(AK);KSr=r(qSt,"from_pretrained()"),qSt.forEach(t),ZSr=r(Nre," to load the model weights."),Nre.forEach(t),eRr=i(JA),T(g5.$$.fragment,JA),JA.forEach(t),oRr=i(Wl),jr=n(Wl,"DIV",{class:!0});var Hl=s(jr);T(wx.$$.fragment,Hl),rRr=i(Hl),o4e=n(Hl,"P",{});var jSt=s(o4e);tRr=r(jSt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),jSt.forEach(t),aRr=i(Hl),un=n(Hl,"P",{});var YA=s(un);nRr=r(YA,"The model class to instantiate is selected based on the "),r4e=n(YA,"CODE",{});var DSt=s(r4e);sRr=r(DSt,"model_type"),DSt.forEach(t),lRr=r(YA,` property of the config object (either
passed as an argument or loaded from `),t4e=n(YA,"CODE",{});var GSt=s(t4e);iRr=r(GSt,"pretrained_model_name_or_path"),GSt.forEach(t),dRr=r(YA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a4e=n(YA,"CODE",{});var OSt=s(a4e);cRr=r(OSt,"pretrained_model_name_or_path"),OSt.forEach(t),fRr=r(YA,":"),YA.forEach(t),mRr=i(Hl),n4e=n(Hl,"UL",{});var VSt=s(n4e);h5=n(VSt,"LI",{});var kje=s(h5);s4e=n(kje,"STRONG",{});var XSt=s(s4e);gRr=r(XSt,"vision-encoder-decoder"),XSt.forEach(t),hRr=r(kje," \u2014 "),LK=n(kje,"A",{href:!0});var zSt=s(LK);pRr=r(zSt,"TFVisionEncoderDecoderModel"),zSt.forEach(t),_Rr=r(kje," (Vision Encoder decoder model)"),kje.forEach(t),VSt.forEach(t),uRr=i(Hl),T(p5.$$.fragment,Hl),Hl.forEach(t),Wl.forEach(t),hVe=i(f),jc=n(f,"H2",{class:!0});var Eze=s(jc);_5=n(Eze,"A",{id:!0,class:!0,href:!0});var QSt=s(_5);l4e=n(QSt,"SPAN",{});var WSt=s(l4e);T(Ax.$$.fragment,WSt),WSt.forEach(t),QSt.forEach(t),bRr=i(Eze),i4e=n(Eze,"SPAN",{});var HSt=s(i4e);vRr=r(HSt,"TFAutoModelForSpeechSeq2Seq"),HSt.forEach(t),Eze.forEach(t),pVe=i(f),mr=n(f,"DIV",{class:!0});var Ul=s(mr);T(Lx.$$.fragment,Ul),FRr=i(Ul),Dc=n(Ul,"P",{});var qre=s(Dc);TRr=r(qre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),yK=n(qre,"A",{href:!0});var USt=s(yK);MRr=r(USt,"from_pretrained()"),USt.forEach(t),ERr=r(qre," class method or the "),xK=n(qre,"A",{href:!0});var JSt=s(xK);CRr=r(JSt,"from_config()"),JSt.forEach(t),wRr=r(qre,` class
method.`),qre.forEach(t),ARr=i(Ul),yx=n(Ul,"P",{});var Cze=s(yx);LRr=r(Cze,"This class cannot be instantiated directly using "),d4e=n(Cze,"CODE",{});var YSt=s(d4e);yRr=r(YSt,"__init__()"),YSt.forEach(t),xRr=r(Cze," (throws an error)."),Cze.forEach(t),$Rr=i(Ul),Vt=n(Ul,"DIV",{class:!0});var KA=s(Vt);T(xx.$$.fragment,KA),kRr=i(KA),c4e=n(KA,"P",{});var KSt=s(c4e);SRr=r(KSt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),KSt.forEach(t),RRr=i(KA),Gc=n(KA,"P",{});var jre=s(Gc);PRr=r(jre,`Note:
Loading a model from its configuration file does `),f4e=n(jre,"STRONG",{});var ZSt=s(f4e);BRr=r(ZSt,"not"),ZSt.forEach(t),IRr=r(jre,` load the model weights. It only affects the
model\u2019s configuration. Use `),$K=n(jre,"A",{href:!0});var eRt=s($K);NRr=r(eRt,"from_pretrained()"),eRt.forEach(t),qRr=r(jre," to load the model weights."),jre.forEach(t),jRr=i(KA),T(u5.$$.fragment,KA),KA.forEach(t),DRr=i(Ul),Dr=n(Ul,"DIV",{class:!0});var Jl=s(Dr);T($x.$$.fragment,Jl),GRr=i(Jl),m4e=n(Jl,"P",{});var oRt=s(m4e);ORr=r(oRt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),oRt.forEach(t),VRr=i(Jl),bn=n(Jl,"P",{});var ZA=s(bn);XRr=r(ZA,"The model class to instantiate is selected based on the "),g4e=n(ZA,"CODE",{});var rRt=s(g4e);zRr=r(rRt,"model_type"),rRt.forEach(t),QRr=r(ZA,` property of the config object (either
passed as an argument or loaded from `),h4e=n(ZA,"CODE",{});var tRt=s(h4e);WRr=r(tRt,"pretrained_model_name_or_path"),tRt.forEach(t),HRr=r(ZA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p4e=n(ZA,"CODE",{});var aRt=s(p4e);URr=r(aRt,"pretrained_model_name_or_path"),aRt.forEach(t),JRr=r(ZA,":"),ZA.forEach(t),YRr=i(Jl),_4e=n(Jl,"UL",{});var nRt=s(_4e);b5=n(nRt,"LI",{});var Sje=s(b5);u4e=n(Sje,"STRONG",{});var sRt=s(u4e);KRr=r(sRt,"speech_to_text"),sRt.forEach(t),ZRr=r(Sje," \u2014 "),kK=n(Sje,"A",{href:!0});var lRt=s(kK);ePr=r(lRt,"TFSpeech2TextForConditionalGeneration"),lRt.forEach(t),oPr=r(Sje," (Speech2Text model)"),Sje.forEach(t),nRt.forEach(t),rPr=i(Jl),T(v5.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),_Ve=i(f),Oc=n(f,"H2",{class:!0});var wze=s(Oc);F5=n(wze,"A",{id:!0,class:!0,href:!0});var iRt=s(F5);b4e=n(iRt,"SPAN",{});var dRt=s(b4e);T(kx.$$.fragment,dRt),dRt.forEach(t),iRt.forEach(t),tPr=i(wze),v4e=n(wze,"SPAN",{});var cRt=s(v4e);aPr=r(cRt,"FlaxAutoModel"),cRt.forEach(t),wze.forEach(t),uVe=i(f),gr=n(f,"DIV",{class:!0});var Yl=s(gr);T(Sx.$$.fragment,Yl),nPr=i(Yl),Vc=n(Yl,"P",{});var Dre=s(Vc);sPr=r(Dre,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),SK=n(Dre,"A",{href:!0});var fRt=s(SK);lPr=r(fRt,"from_pretrained()"),fRt.forEach(t),iPr=r(Dre," class method or the "),RK=n(Dre,"A",{href:!0});var mRt=s(RK);dPr=r(mRt,"from_config()"),mRt.forEach(t),cPr=r(Dre,` class
method.`),Dre.forEach(t),fPr=i(Yl),Rx=n(Yl,"P",{});var Aze=s(Rx);mPr=r(Aze,"This class cannot be instantiated directly using "),F4e=n(Aze,"CODE",{});var gRt=s(F4e);gPr=r(gRt,"__init__()"),gRt.forEach(t),hPr=r(Aze," (throws an error)."),Aze.forEach(t),pPr=i(Yl),Xt=n(Yl,"DIV",{class:!0});var e6=s(Xt);T(Px.$$.fragment,e6),_Pr=i(e6),T4e=n(e6,"P",{});var hRt=s(T4e);uPr=r(hRt,"Instantiates one of the base model classes of the library from a configuration."),hRt.forEach(t),bPr=i(e6),Xc=n(e6,"P",{});var Gre=s(Xc);vPr=r(Gre,`Note:
Loading a model from its configuration file does `),M4e=n(Gre,"STRONG",{});var pRt=s(M4e);FPr=r(pRt,"not"),pRt.forEach(t),TPr=r(Gre,` load the model weights. It only affects the
model\u2019s configuration. Use `),PK=n(Gre,"A",{href:!0});var _Rt=s(PK);MPr=r(_Rt,"from_pretrained()"),_Rt.forEach(t),EPr=r(Gre," to load the model weights."),Gre.forEach(t),CPr=i(e6),T(T5.$$.fragment,e6),e6.forEach(t),wPr=i(Yl),Gr=n(Yl,"DIV",{class:!0});var Kl=s(Gr);T(Bx.$$.fragment,Kl),APr=i(Kl),E4e=n(Kl,"P",{});var uRt=s(E4e);LPr=r(uRt,"Instantiate one of the base model classes of the library from a pretrained model."),uRt.forEach(t),yPr=i(Kl),vn=n(Kl,"P",{});var o6=s(vn);xPr=r(o6,"The model class to instantiate is selected based on the "),C4e=n(o6,"CODE",{});var bRt=s(C4e);$Pr=r(bRt,"model_type"),bRt.forEach(t),kPr=r(o6,` property of the config object (either
passed as an argument or loaded from `),w4e=n(o6,"CODE",{});var vRt=s(w4e);SPr=r(vRt,"pretrained_model_name_or_path"),vRt.forEach(t),RPr=r(o6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A4e=n(o6,"CODE",{});var FRt=s(A4e);PPr=r(FRt,"pretrained_model_name_or_path"),FRt.forEach(t),BPr=r(o6,":"),o6.forEach(t),IPr=i(Kl),oe=n(Kl,"UL",{});var ae=s(oe);M5=n(ae,"LI",{});var Rje=s(M5);L4e=n(Rje,"STRONG",{});var TRt=s(L4e);NPr=r(TRt,"albert"),TRt.forEach(t),qPr=r(Rje," \u2014 "),BK=n(Rje,"A",{href:!0});var MRt=s(BK);jPr=r(MRt,"FlaxAlbertModel"),MRt.forEach(t),DPr=r(Rje," (ALBERT model)"),Rje.forEach(t),GPr=i(ae),E5=n(ae,"LI",{});var Pje=s(E5);y4e=n(Pje,"STRONG",{});var ERt=s(y4e);OPr=r(ERt,"bart"),ERt.forEach(t),VPr=r(Pje," \u2014 "),IK=n(Pje,"A",{href:!0});var CRt=s(IK);XPr=r(CRt,"FlaxBartModel"),CRt.forEach(t),zPr=r(Pje," (BART model)"),Pje.forEach(t),QPr=i(ae),C5=n(ae,"LI",{});var Bje=s(C5);x4e=n(Bje,"STRONG",{});var wRt=s(x4e);WPr=r(wRt,"beit"),wRt.forEach(t),HPr=r(Bje," \u2014 "),NK=n(Bje,"A",{href:!0});var ARt=s(NK);UPr=r(ARt,"FlaxBeitModel"),ARt.forEach(t),JPr=r(Bje," (BEiT model)"),Bje.forEach(t),YPr=i(ae),w5=n(ae,"LI",{});var Ije=s(w5);$4e=n(Ije,"STRONG",{});var LRt=s($4e);KPr=r(LRt,"bert"),LRt.forEach(t),ZPr=r(Ije," \u2014 "),qK=n(Ije,"A",{href:!0});var yRt=s(qK);eBr=r(yRt,"FlaxBertModel"),yRt.forEach(t),oBr=r(Ije," (BERT model)"),Ije.forEach(t),rBr=i(ae),A5=n(ae,"LI",{});var Nje=s(A5);k4e=n(Nje,"STRONG",{});var xRt=s(k4e);tBr=r(xRt,"big_bird"),xRt.forEach(t),aBr=r(Nje," \u2014 "),jK=n(Nje,"A",{href:!0});var $Rt=s(jK);nBr=r($Rt,"FlaxBigBirdModel"),$Rt.forEach(t),sBr=r(Nje," (BigBird model)"),Nje.forEach(t),lBr=i(ae),L5=n(ae,"LI",{});var qje=s(L5);S4e=n(qje,"STRONG",{});var kRt=s(S4e);iBr=r(kRt,"blenderbot"),kRt.forEach(t),dBr=r(qje," \u2014 "),DK=n(qje,"A",{href:!0});var SRt=s(DK);cBr=r(SRt,"FlaxBlenderbotModel"),SRt.forEach(t),fBr=r(qje," (Blenderbot model)"),qje.forEach(t),mBr=i(ae),y5=n(ae,"LI",{});var jje=s(y5);R4e=n(jje,"STRONG",{});var RRt=s(R4e);gBr=r(RRt,"blenderbot-small"),RRt.forEach(t),hBr=r(jje," \u2014 "),GK=n(jje,"A",{href:!0});var PRt=s(GK);pBr=r(PRt,"FlaxBlenderbotSmallModel"),PRt.forEach(t),_Br=r(jje," (BlenderbotSmall model)"),jje.forEach(t),uBr=i(ae),x5=n(ae,"LI",{});var Dje=s(x5);P4e=n(Dje,"STRONG",{});var BRt=s(P4e);bBr=r(BRt,"clip"),BRt.forEach(t),vBr=r(Dje," \u2014 "),OK=n(Dje,"A",{href:!0});var IRt=s(OK);FBr=r(IRt,"FlaxCLIPModel"),IRt.forEach(t),TBr=r(Dje," (CLIP model)"),Dje.forEach(t),MBr=i(ae),$5=n(ae,"LI",{});var Gje=s($5);B4e=n(Gje,"STRONG",{});var NRt=s(B4e);EBr=r(NRt,"distilbert"),NRt.forEach(t),CBr=r(Gje," \u2014 "),VK=n(Gje,"A",{href:!0});var qRt=s(VK);wBr=r(qRt,"FlaxDistilBertModel"),qRt.forEach(t),ABr=r(Gje," (DistilBERT model)"),Gje.forEach(t),LBr=i(ae),k5=n(ae,"LI",{});var Oje=s(k5);I4e=n(Oje,"STRONG",{});var jRt=s(I4e);yBr=r(jRt,"electra"),jRt.forEach(t),xBr=r(Oje," \u2014 "),XK=n(Oje,"A",{href:!0});var DRt=s(XK);$Br=r(DRt,"FlaxElectraModel"),DRt.forEach(t),kBr=r(Oje," (ELECTRA model)"),Oje.forEach(t),SBr=i(ae),S5=n(ae,"LI",{});var Vje=s(S5);N4e=n(Vje,"STRONG",{});var GRt=s(N4e);RBr=r(GRt,"gpt2"),GRt.forEach(t),PBr=r(Vje," \u2014 "),zK=n(Vje,"A",{href:!0});var ORt=s(zK);BBr=r(ORt,"FlaxGPT2Model"),ORt.forEach(t),IBr=r(Vje," (OpenAI GPT-2 model)"),Vje.forEach(t),NBr=i(ae),R5=n(ae,"LI",{});var Xje=s(R5);q4e=n(Xje,"STRONG",{});var VRt=s(q4e);qBr=r(VRt,"gpt_neo"),VRt.forEach(t),jBr=r(Xje," \u2014 "),QK=n(Xje,"A",{href:!0});var XRt=s(QK);DBr=r(XRt,"FlaxGPTNeoModel"),XRt.forEach(t),GBr=r(Xje," (GPT Neo model)"),Xje.forEach(t),OBr=i(ae),P5=n(ae,"LI",{});var zje=s(P5);j4e=n(zje,"STRONG",{});var zRt=s(j4e);VBr=r(zRt,"gptj"),zRt.forEach(t),XBr=r(zje," \u2014 "),WK=n(zje,"A",{href:!0});var QRt=s(WK);zBr=r(QRt,"FlaxGPTJModel"),QRt.forEach(t),QBr=r(zje," (GPT-J model)"),zje.forEach(t),WBr=i(ae),B5=n(ae,"LI",{});var Qje=s(B5);D4e=n(Qje,"STRONG",{});var WRt=s(D4e);HBr=r(WRt,"longt5"),WRt.forEach(t),UBr=r(Qje," \u2014 "),HK=n(Qje,"A",{href:!0});var HRt=s(HK);JBr=r(HRt,"FlaxLongT5Model"),HRt.forEach(t),YBr=r(Qje," (LongT5 model)"),Qje.forEach(t),KBr=i(ae),I5=n(ae,"LI",{});var Wje=s(I5);G4e=n(Wje,"STRONG",{});var URt=s(G4e);ZBr=r(URt,"marian"),URt.forEach(t),eIr=r(Wje," \u2014 "),UK=n(Wje,"A",{href:!0});var JRt=s(UK);oIr=r(JRt,"FlaxMarianModel"),JRt.forEach(t),rIr=r(Wje," (Marian model)"),Wje.forEach(t),tIr=i(ae),N5=n(ae,"LI",{});var Hje=s(N5);O4e=n(Hje,"STRONG",{});var YRt=s(O4e);aIr=r(YRt,"mbart"),YRt.forEach(t),nIr=r(Hje," \u2014 "),JK=n(Hje,"A",{href:!0});var KRt=s(JK);sIr=r(KRt,"FlaxMBartModel"),KRt.forEach(t),lIr=r(Hje," (mBART model)"),Hje.forEach(t),iIr=i(ae),q5=n(ae,"LI",{});var Uje=s(q5);V4e=n(Uje,"STRONG",{});var ZRt=s(V4e);dIr=r(ZRt,"mt5"),ZRt.forEach(t),cIr=r(Uje," \u2014 "),YK=n(Uje,"A",{href:!0});var ePt=s(YK);fIr=r(ePt,"FlaxMT5Model"),ePt.forEach(t),mIr=r(Uje," (MT5 model)"),Uje.forEach(t),gIr=i(ae),j5=n(ae,"LI",{});var Jje=s(j5);X4e=n(Jje,"STRONG",{});var oPt=s(X4e);hIr=r(oPt,"opt"),oPt.forEach(t),pIr=r(Jje," \u2014 "),KK=n(Jje,"A",{href:!0});var rPt=s(KK);_Ir=r(rPt,"FlaxOPTModel"),rPt.forEach(t),uIr=r(Jje," (OPT model)"),Jje.forEach(t),bIr=i(ae),D5=n(ae,"LI",{});var Yje=s(D5);z4e=n(Yje,"STRONG",{});var tPt=s(z4e);vIr=r(tPt,"pegasus"),tPt.forEach(t),FIr=r(Yje," \u2014 "),ZK=n(Yje,"A",{href:!0});var aPt=s(ZK);TIr=r(aPt,"FlaxPegasusModel"),aPt.forEach(t),MIr=r(Yje," (Pegasus model)"),Yje.forEach(t),EIr=i(ae),G5=n(ae,"LI",{});var Kje=s(G5);Q4e=n(Kje,"STRONG",{});var nPt=s(Q4e);CIr=r(nPt,"roberta"),nPt.forEach(t),wIr=r(Kje," \u2014 "),eZ=n(Kje,"A",{href:!0});var sPt=s(eZ);AIr=r(sPt,"FlaxRobertaModel"),sPt.forEach(t),LIr=r(Kje," (RoBERTa model)"),Kje.forEach(t),yIr=i(ae),O5=n(ae,"LI",{});var Zje=s(O5);W4e=n(Zje,"STRONG",{});var lPt=s(W4e);xIr=r(lPt,"roformer"),lPt.forEach(t),$Ir=r(Zje," \u2014 "),oZ=n(Zje,"A",{href:!0});var iPt=s(oZ);kIr=r(iPt,"FlaxRoFormerModel"),iPt.forEach(t),SIr=r(Zje," (RoFormer model)"),Zje.forEach(t),RIr=i(ae),V5=n(ae,"LI",{});var eDe=s(V5);H4e=n(eDe,"STRONG",{});var dPt=s(H4e);PIr=r(dPt,"t5"),dPt.forEach(t),BIr=r(eDe," \u2014 "),rZ=n(eDe,"A",{href:!0});var cPt=s(rZ);IIr=r(cPt,"FlaxT5Model"),cPt.forEach(t),NIr=r(eDe," (T5 model)"),eDe.forEach(t),qIr=i(ae),X5=n(ae,"LI",{});var oDe=s(X5);U4e=n(oDe,"STRONG",{});var fPt=s(U4e);jIr=r(fPt,"vision-text-dual-encoder"),fPt.forEach(t),DIr=r(oDe," \u2014 "),tZ=n(oDe,"A",{href:!0});var mPt=s(tZ);GIr=r(mPt,"FlaxVisionTextDualEncoderModel"),mPt.forEach(t),OIr=r(oDe," (VisionTextDualEncoder model)"),oDe.forEach(t),VIr=i(ae),z5=n(ae,"LI",{});var rDe=s(z5);J4e=n(rDe,"STRONG",{});var gPt=s(J4e);XIr=r(gPt,"vit"),gPt.forEach(t),zIr=r(rDe," \u2014 "),aZ=n(rDe,"A",{href:!0});var hPt=s(aZ);QIr=r(hPt,"FlaxViTModel"),hPt.forEach(t),WIr=r(rDe," (ViT model)"),rDe.forEach(t),HIr=i(ae),Q5=n(ae,"LI",{});var tDe=s(Q5);Y4e=n(tDe,"STRONG",{});var pPt=s(Y4e);UIr=r(pPt,"wav2vec2"),pPt.forEach(t),JIr=r(tDe," \u2014 "),nZ=n(tDe,"A",{href:!0});var _Pt=s(nZ);YIr=r(_Pt,"FlaxWav2Vec2Model"),_Pt.forEach(t),KIr=r(tDe," (Wav2Vec2 model)"),tDe.forEach(t),ZIr=i(ae),W5=n(ae,"LI",{});var aDe=s(W5);K4e=n(aDe,"STRONG",{});var uPt=s(K4e);eNr=r(uPt,"xglm"),uPt.forEach(t),oNr=r(aDe," \u2014 "),sZ=n(aDe,"A",{href:!0});var bPt=s(sZ);rNr=r(bPt,"FlaxXGLMModel"),bPt.forEach(t),tNr=r(aDe," (XGLM model)"),aDe.forEach(t),aNr=i(ae),H5=n(ae,"LI",{});var nDe=s(H5);Z4e=n(nDe,"STRONG",{});var vPt=s(Z4e);nNr=r(vPt,"xlm-roberta"),vPt.forEach(t),sNr=r(nDe," \u2014 "),lZ=n(nDe,"A",{href:!0});var FPt=s(lZ);lNr=r(FPt,"FlaxXLMRobertaModel"),FPt.forEach(t),iNr=r(nDe," (XLM-RoBERTa model)"),nDe.forEach(t),ae.forEach(t),dNr=i(Kl),T(U5.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),bVe=i(f),zc=n(f,"H2",{class:!0});var Lze=s(zc);J5=n(Lze,"A",{id:!0,class:!0,href:!0});var TPt=s(J5);eCe=n(TPt,"SPAN",{});var MPt=s(eCe);T(Ix.$$.fragment,MPt),MPt.forEach(t),TPt.forEach(t),cNr=i(Lze),oCe=n(Lze,"SPAN",{});var EPt=s(oCe);fNr=r(EPt,"FlaxAutoModelForCausalLM"),EPt.forEach(t),Lze.forEach(t),vVe=i(f),hr=n(f,"DIV",{class:!0});var Zl=s(hr);T(Nx.$$.fragment,Zl),mNr=i(Zl),Qc=n(Zl,"P",{});var Ore=s(Qc);gNr=r(Ore,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),iZ=n(Ore,"A",{href:!0});var CPt=s(iZ);hNr=r(CPt,"from_pretrained()"),CPt.forEach(t),pNr=r(Ore," class method or the "),dZ=n(Ore,"A",{href:!0});var wPt=s(dZ);_Nr=r(wPt,"from_config()"),wPt.forEach(t),uNr=r(Ore,` class
method.`),Ore.forEach(t),bNr=i(Zl),qx=n(Zl,"P",{});var yze=s(qx);vNr=r(yze,"This class cannot be instantiated directly using "),rCe=n(yze,"CODE",{});var APt=s(rCe);FNr=r(APt,"__init__()"),APt.forEach(t),TNr=r(yze," (throws an error)."),yze.forEach(t),MNr=i(Zl),zt=n(Zl,"DIV",{class:!0});var r6=s(zt);T(jx.$$.fragment,r6),ENr=i(r6),tCe=n(r6,"P",{});var LPt=s(tCe);CNr=r(LPt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),LPt.forEach(t),wNr=i(r6),Wc=n(r6,"P",{});var Vre=s(Wc);ANr=r(Vre,`Note:
Loading a model from its configuration file does `),aCe=n(Vre,"STRONG",{});var yPt=s(aCe);LNr=r(yPt,"not"),yPt.forEach(t),yNr=r(Vre,` load the model weights. It only affects the
model\u2019s configuration. Use `),cZ=n(Vre,"A",{href:!0});var xPt=s(cZ);xNr=r(xPt,"from_pretrained()"),xPt.forEach(t),$Nr=r(Vre," to load the model weights."),Vre.forEach(t),kNr=i(r6),T(Y5.$$.fragment,r6),r6.forEach(t),SNr=i(Zl),Or=n(Zl,"DIV",{class:!0});var ei=s(Or);T(Dx.$$.fragment,ei),RNr=i(ei),nCe=n(ei,"P",{});var $Pt=s(nCe);PNr=r($Pt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),$Pt.forEach(t),BNr=i(ei),Fn=n(ei,"P",{});var t6=s(Fn);INr=r(t6,"The model class to instantiate is selected based on the "),sCe=n(t6,"CODE",{});var kPt=s(sCe);NNr=r(kPt,"model_type"),kPt.forEach(t),qNr=r(t6,` property of the config object (either
passed as an argument or loaded from `),lCe=n(t6,"CODE",{});var SPt=s(lCe);jNr=r(SPt,"pretrained_model_name_or_path"),SPt.forEach(t),DNr=r(t6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iCe=n(t6,"CODE",{});var RPt=s(iCe);GNr=r(RPt,"pretrained_model_name_or_path"),RPt.forEach(t),ONr=r(t6,":"),t6.forEach(t),VNr=i(ei),xe=n(ei,"UL",{});var Ne=s(xe);K5=n(Ne,"LI",{});var sDe=s(K5);dCe=n(sDe,"STRONG",{});var PPt=s(dCe);XNr=r(PPt,"bart"),PPt.forEach(t),zNr=r(sDe," \u2014 "),fZ=n(sDe,"A",{href:!0});var BPt=s(fZ);QNr=r(BPt,"FlaxBartForCausalLM"),BPt.forEach(t),WNr=r(sDe," (BART model)"),sDe.forEach(t),HNr=i(Ne),Z5=n(Ne,"LI",{});var lDe=s(Z5);cCe=n(lDe,"STRONG",{});var IPt=s(cCe);UNr=r(IPt,"bert"),IPt.forEach(t),JNr=r(lDe," \u2014 "),mZ=n(lDe,"A",{href:!0});var NPt=s(mZ);YNr=r(NPt,"FlaxBertForCausalLM"),NPt.forEach(t),KNr=r(lDe," (BERT model)"),lDe.forEach(t),ZNr=i(Ne),e3=n(Ne,"LI",{});var iDe=s(e3);fCe=n(iDe,"STRONG",{});var qPt=s(fCe);eqr=r(qPt,"big_bird"),qPt.forEach(t),oqr=r(iDe," \u2014 "),gZ=n(iDe,"A",{href:!0});var jPt=s(gZ);rqr=r(jPt,"FlaxBigBirdForCausalLM"),jPt.forEach(t),tqr=r(iDe," (BigBird model)"),iDe.forEach(t),aqr=i(Ne),o3=n(Ne,"LI",{});var dDe=s(o3);mCe=n(dDe,"STRONG",{});var DPt=s(mCe);nqr=r(DPt,"electra"),DPt.forEach(t),sqr=r(dDe," \u2014 "),hZ=n(dDe,"A",{href:!0});var GPt=s(hZ);lqr=r(GPt,"FlaxElectraForCausalLM"),GPt.forEach(t),iqr=r(dDe," (ELECTRA model)"),dDe.forEach(t),dqr=i(Ne),r3=n(Ne,"LI",{});var cDe=s(r3);gCe=n(cDe,"STRONG",{});var OPt=s(gCe);cqr=r(OPt,"gpt2"),OPt.forEach(t),fqr=r(cDe," \u2014 "),pZ=n(cDe,"A",{href:!0});var VPt=s(pZ);mqr=r(VPt,"FlaxGPT2LMHeadModel"),VPt.forEach(t),gqr=r(cDe," (OpenAI GPT-2 model)"),cDe.forEach(t),hqr=i(Ne),t3=n(Ne,"LI",{});var fDe=s(t3);hCe=n(fDe,"STRONG",{});var XPt=s(hCe);pqr=r(XPt,"gpt_neo"),XPt.forEach(t),_qr=r(fDe," \u2014 "),_Z=n(fDe,"A",{href:!0});var zPt=s(_Z);uqr=r(zPt,"FlaxGPTNeoForCausalLM"),zPt.forEach(t),bqr=r(fDe," (GPT Neo model)"),fDe.forEach(t),vqr=i(Ne),a3=n(Ne,"LI",{});var mDe=s(a3);pCe=n(mDe,"STRONG",{});var QPt=s(pCe);Fqr=r(QPt,"gptj"),QPt.forEach(t),Tqr=r(mDe," \u2014 "),uZ=n(mDe,"A",{href:!0});var WPt=s(uZ);Mqr=r(WPt,"FlaxGPTJForCausalLM"),WPt.forEach(t),Eqr=r(mDe," (GPT-J model)"),mDe.forEach(t),Cqr=i(Ne),n3=n(Ne,"LI",{});var gDe=s(n3);_Ce=n(gDe,"STRONG",{});var HPt=s(_Ce);wqr=r(HPt,"opt"),HPt.forEach(t),Aqr=r(gDe," \u2014 "),bZ=n(gDe,"A",{href:!0});var UPt=s(bZ);Lqr=r(UPt,"FlaxOPTForCausalLM"),UPt.forEach(t),yqr=r(gDe," (OPT model)"),gDe.forEach(t),xqr=i(Ne),s3=n(Ne,"LI",{});var hDe=s(s3);uCe=n(hDe,"STRONG",{});var JPt=s(uCe);$qr=r(JPt,"roberta"),JPt.forEach(t),kqr=r(hDe," \u2014 "),vZ=n(hDe,"A",{href:!0});var YPt=s(vZ);Sqr=r(YPt,"FlaxRobertaForCausalLM"),YPt.forEach(t),Rqr=r(hDe," (RoBERTa model)"),hDe.forEach(t),Pqr=i(Ne),l3=n(Ne,"LI",{});var pDe=s(l3);bCe=n(pDe,"STRONG",{});var KPt=s(bCe);Bqr=r(KPt,"xglm"),KPt.forEach(t),Iqr=r(pDe," \u2014 "),FZ=n(pDe,"A",{href:!0});var ZPt=s(FZ);Nqr=r(ZPt,"FlaxXGLMForCausalLM"),ZPt.forEach(t),qqr=r(pDe," (XGLM model)"),pDe.forEach(t),Ne.forEach(t),jqr=i(ei),T(i3.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),FVe=i(f),Hc=n(f,"H2",{class:!0});var xze=s(Hc);d3=n(xze,"A",{id:!0,class:!0,href:!0});var eBt=s(d3);vCe=n(eBt,"SPAN",{});var oBt=s(vCe);T(Gx.$$.fragment,oBt),oBt.forEach(t),eBt.forEach(t),Dqr=i(xze),FCe=n(xze,"SPAN",{});var rBt=s(FCe);Gqr=r(rBt,"FlaxAutoModelForPreTraining"),rBt.forEach(t),xze.forEach(t),TVe=i(f),pr=n(f,"DIV",{class:!0});var oi=s(pr);T(Ox.$$.fragment,oi),Oqr=i(oi),Uc=n(oi,"P",{});var Xre=s(Uc);Vqr=r(Xre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),TZ=n(Xre,"A",{href:!0});var tBt=s(TZ);Xqr=r(tBt,"from_pretrained()"),tBt.forEach(t),zqr=r(Xre," class method or the "),MZ=n(Xre,"A",{href:!0});var aBt=s(MZ);Qqr=r(aBt,"from_config()"),aBt.forEach(t),Wqr=r(Xre,` class
method.`),Xre.forEach(t),Hqr=i(oi),Vx=n(oi,"P",{});var $ze=s(Vx);Uqr=r($ze,"This class cannot be instantiated directly using "),TCe=n($ze,"CODE",{});var nBt=s(TCe);Jqr=r(nBt,"__init__()"),nBt.forEach(t),Yqr=r($ze," (throws an error)."),$ze.forEach(t),Kqr=i(oi),Qt=n(oi,"DIV",{class:!0});var a6=s(Qt);T(Xx.$$.fragment,a6),Zqr=i(a6),MCe=n(a6,"P",{});var sBt=s(MCe);ejr=r(sBt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),sBt.forEach(t),ojr=i(a6),Jc=n(a6,"P",{});var zre=s(Jc);rjr=r(zre,`Note:
Loading a model from its configuration file does `),ECe=n(zre,"STRONG",{});var lBt=s(ECe);tjr=r(lBt,"not"),lBt.forEach(t),ajr=r(zre,` load the model weights. It only affects the
model\u2019s configuration. Use `),EZ=n(zre,"A",{href:!0});var iBt=s(EZ);njr=r(iBt,"from_pretrained()"),iBt.forEach(t),sjr=r(zre," to load the model weights."),zre.forEach(t),ljr=i(a6),T(c3.$$.fragment,a6),a6.forEach(t),ijr=i(oi),Vr=n(oi,"DIV",{class:!0});var ri=s(Vr);T(zx.$$.fragment,ri),djr=i(ri),CCe=n(ri,"P",{});var dBt=s(CCe);cjr=r(dBt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),dBt.forEach(t),fjr=i(ri),Tn=n(ri,"P",{});var n6=s(Tn);mjr=r(n6,"The model class to instantiate is selected based on the "),wCe=n(n6,"CODE",{});var cBt=s(wCe);gjr=r(cBt,"model_type"),cBt.forEach(t),hjr=r(n6,` property of the config object (either
passed as an argument or loaded from `),ACe=n(n6,"CODE",{});var fBt=s(ACe);pjr=r(fBt,"pretrained_model_name_or_path"),fBt.forEach(t),_jr=r(n6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LCe=n(n6,"CODE",{});var mBt=s(LCe);ujr=r(mBt,"pretrained_model_name_or_path"),mBt.forEach(t),bjr=r(n6,":"),n6.forEach(t),vjr=i(ri),Ee=n(ri,"UL",{});var we=s(Ee);f3=n(we,"LI",{});var _De=s(f3);yCe=n(_De,"STRONG",{});var gBt=s(yCe);Fjr=r(gBt,"albert"),gBt.forEach(t),Tjr=r(_De," \u2014 "),CZ=n(_De,"A",{href:!0});var hBt=s(CZ);Mjr=r(hBt,"FlaxAlbertForPreTraining"),hBt.forEach(t),Ejr=r(_De," (ALBERT model)"),_De.forEach(t),Cjr=i(we),m3=n(we,"LI",{});var uDe=s(m3);xCe=n(uDe,"STRONG",{});var pBt=s(xCe);wjr=r(pBt,"bart"),pBt.forEach(t),Ajr=r(uDe," \u2014 "),wZ=n(uDe,"A",{href:!0});var _Bt=s(wZ);Ljr=r(_Bt,"FlaxBartForConditionalGeneration"),_Bt.forEach(t),yjr=r(uDe," (BART model)"),uDe.forEach(t),xjr=i(we),g3=n(we,"LI",{});var bDe=s(g3);$Ce=n(bDe,"STRONG",{});var uBt=s($Ce);$jr=r(uBt,"bert"),uBt.forEach(t),kjr=r(bDe," \u2014 "),AZ=n(bDe,"A",{href:!0});var bBt=s(AZ);Sjr=r(bBt,"FlaxBertForPreTraining"),bBt.forEach(t),Rjr=r(bDe," (BERT model)"),bDe.forEach(t),Pjr=i(we),h3=n(we,"LI",{});var vDe=s(h3);kCe=n(vDe,"STRONG",{});var vBt=s(kCe);Bjr=r(vBt,"big_bird"),vBt.forEach(t),Ijr=r(vDe," \u2014 "),LZ=n(vDe,"A",{href:!0});var FBt=s(LZ);Njr=r(FBt,"FlaxBigBirdForPreTraining"),FBt.forEach(t),qjr=r(vDe," (BigBird model)"),vDe.forEach(t),jjr=i(we),p3=n(we,"LI",{});var FDe=s(p3);SCe=n(FDe,"STRONG",{});var TBt=s(SCe);Djr=r(TBt,"electra"),TBt.forEach(t),Gjr=r(FDe," \u2014 "),yZ=n(FDe,"A",{href:!0});var MBt=s(yZ);Ojr=r(MBt,"FlaxElectraForPreTraining"),MBt.forEach(t),Vjr=r(FDe," (ELECTRA model)"),FDe.forEach(t),Xjr=i(we),_3=n(we,"LI",{});var TDe=s(_3);RCe=n(TDe,"STRONG",{});var EBt=s(RCe);zjr=r(EBt,"longt5"),EBt.forEach(t),Qjr=r(TDe," \u2014 "),xZ=n(TDe,"A",{href:!0});var CBt=s(xZ);Wjr=r(CBt,"FlaxLongT5ForConditionalGeneration"),CBt.forEach(t),Hjr=r(TDe," (LongT5 model)"),TDe.forEach(t),Ujr=i(we),u3=n(we,"LI",{});var MDe=s(u3);PCe=n(MDe,"STRONG",{});var wBt=s(PCe);Jjr=r(wBt,"mbart"),wBt.forEach(t),Yjr=r(MDe," \u2014 "),$Z=n(MDe,"A",{href:!0});var ABt=s($Z);Kjr=r(ABt,"FlaxMBartForConditionalGeneration"),ABt.forEach(t),Zjr=r(MDe," (mBART model)"),MDe.forEach(t),eDr=i(we),b3=n(we,"LI",{});var EDe=s(b3);BCe=n(EDe,"STRONG",{});var LBt=s(BCe);oDr=r(LBt,"mt5"),LBt.forEach(t),rDr=r(EDe," \u2014 "),kZ=n(EDe,"A",{href:!0});var yBt=s(kZ);tDr=r(yBt,"FlaxMT5ForConditionalGeneration"),yBt.forEach(t),aDr=r(EDe," (MT5 model)"),EDe.forEach(t),nDr=i(we),v3=n(we,"LI",{});var CDe=s(v3);ICe=n(CDe,"STRONG",{});var xBt=s(ICe);sDr=r(xBt,"roberta"),xBt.forEach(t),lDr=r(CDe," \u2014 "),SZ=n(CDe,"A",{href:!0});var $Bt=s(SZ);iDr=r($Bt,"FlaxRobertaForMaskedLM"),$Bt.forEach(t),dDr=r(CDe," (RoBERTa model)"),CDe.forEach(t),cDr=i(we),F3=n(we,"LI",{});var wDe=s(F3);NCe=n(wDe,"STRONG",{});var kBt=s(NCe);fDr=r(kBt,"roformer"),kBt.forEach(t),mDr=r(wDe," \u2014 "),RZ=n(wDe,"A",{href:!0});var SBt=s(RZ);gDr=r(SBt,"FlaxRoFormerForMaskedLM"),SBt.forEach(t),hDr=r(wDe," (RoFormer model)"),wDe.forEach(t),pDr=i(we),T3=n(we,"LI",{});var ADe=s(T3);qCe=n(ADe,"STRONG",{});var RBt=s(qCe);_Dr=r(RBt,"t5"),RBt.forEach(t),uDr=r(ADe," \u2014 "),PZ=n(ADe,"A",{href:!0});var PBt=s(PZ);bDr=r(PBt,"FlaxT5ForConditionalGeneration"),PBt.forEach(t),vDr=r(ADe," (T5 model)"),ADe.forEach(t),FDr=i(we),M3=n(we,"LI",{});var LDe=s(M3);jCe=n(LDe,"STRONG",{});var BBt=s(jCe);TDr=r(BBt,"wav2vec2"),BBt.forEach(t),MDr=r(LDe," \u2014 "),BZ=n(LDe,"A",{href:!0});var IBt=s(BZ);EDr=r(IBt,"FlaxWav2Vec2ForPreTraining"),IBt.forEach(t),CDr=r(LDe," (Wav2Vec2 model)"),LDe.forEach(t),wDr=i(we),E3=n(we,"LI",{});var yDe=s(E3);DCe=n(yDe,"STRONG",{});var NBt=s(DCe);ADr=r(NBt,"xlm-roberta"),NBt.forEach(t),LDr=r(yDe," \u2014 "),IZ=n(yDe,"A",{href:!0});var qBt=s(IZ);yDr=r(qBt,"FlaxXLMRobertaForMaskedLM"),qBt.forEach(t),xDr=r(yDe," (XLM-RoBERTa model)"),yDe.forEach(t),we.forEach(t),$Dr=i(ri),T(C3.$$.fragment,ri),ri.forEach(t),oi.forEach(t),MVe=i(f),Yc=n(f,"H2",{class:!0});var kze=s(Yc);w3=n(kze,"A",{id:!0,class:!0,href:!0});var jBt=s(w3);GCe=n(jBt,"SPAN",{});var DBt=s(GCe);T(Qx.$$.fragment,DBt),DBt.forEach(t),jBt.forEach(t),kDr=i(kze),OCe=n(kze,"SPAN",{});var GBt=s(OCe);SDr=r(GBt,"FlaxAutoModelForMaskedLM"),GBt.forEach(t),kze.forEach(t),EVe=i(f),_r=n(f,"DIV",{class:!0});var ti=s(_r);T(Wx.$$.fragment,ti),RDr=i(ti),Kc=n(ti,"P",{});var Qre=s(Kc);PDr=r(Qre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),NZ=n(Qre,"A",{href:!0});var OBt=s(NZ);BDr=r(OBt,"from_pretrained()"),OBt.forEach(t),IDr=r(Qre," class method or the "),qZ=n(Qre,"A",{href:!0});var VBt=s(qZ);NDr=r(VBt,"from_config()"),VBt.forEach(t),qDr=r(Qre,` class
method.`),Qre.forEach(t),jDr=i(ti),Hx=n(ti,"P",{});var Sze=s(Hx);DDr=r(Sze,"This class cannot be instantiated directly using "),VCe=n(Sze,"CODE",{});var XBt=s(VCe);GDr=r(XBt,"__init__()"),XBt.forEach(t),ODr=r(Sze," (throws an error)."),Sze.forEach(t),VDr=i(ti),Wt=n(ti,"DIV",{class:!0});var s6=s(Wt);T(Ux.$$.fragment,s6),XDr=i(s6),XCe=n(s6,"P",{});var zBt=s(XCe);zDr=r(zBt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),zBt.forEach(t),QDr=i(s6),Zc=n(s6,"P",{});var Wre=s(Zc);WDr=r(Wre,`Note:
Loading a model from its configuration file does `),zCe=n(Wre,"STRONG",{});var QBt=s(zCe);HDr=r(QBt,"not"),QBt.forEach(t),UDr=r(Wre,` load the model weights. It only affects the
model\u2019s configuration. Use `),jZ=n(Wre,"A",{href:!0});var WBt=s(jZ);JDr=r(WBt,"from_pretrained()"),WBt.forEach(t),YDr=r(Wre," to load the model weights."),Wre.forEach(t),KDr=i(s6),T(A3.$$.fragment,s6),s6.forEach(t),ZDr=i(ti),Xr=n(ti,"DIV",{class:!0});var ai=s(Xr);T(Jx.$$.fragment,ai),eGr=i(ai),QCe=n(ai,"P",{});var HBt=s(QCe);oGr=r(HBt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),HBt.forEach(t),rGr=i(ai),Mn=n(ai,"P",{});var l6=s(Mn);tGr=r(l6,"The model class to instantiate is selected based on the "),WCe=n(l6,"CODE",{});var UBt=s(WCe);aGr=r(UBt,"model_type"),UBt.forEach(t),nGr=r(l6,` property of the config object (either
passed as an argument or loaded from `),HCe=n(l6,"CODE",{});var JBt=s(HCe);sGr=r(JBt,"pretrained_model_name_or_path"),JBt.forEach(t),lGr=r(l6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UCe=n(l6,"CODE",{});var YBt=s(UCe);iGr=r(YBt,"pretrained_model_name_or_path"),YBt.forEach(t),dGr=r(l6,":"),l6.forEach(t),cGr=i(ai),$e=n(ai,"UL",{});var qe=s($e);L3=n(qe,"LI",{});var xDe=s(L3);JCe=n(xDe,"STRONG",{});var KBt=s(JCe);fGr=r(KBt,"albert"),KBt.forEach(t),mGr=r(xDe," \u2014 "),DZ=n(xDe,"A",{href:!0});var ZBt=s(DZ);gGr=r(ZBt,"FlaxAlbertForMaskedLM"),ZBt.forEach(t),hGr=r(xDe," (ALBERT model)"),xDe.forEach(t),pGr=i(qe),y3=n(qe,"LI",{});var $De=s(y3);YCe=n($De,"STRONG",{});var eIt=s(YCe);_Gr=r(eIt,"bart"),eIt.forEach(t),uGr=r($De," \u2014 "),GZ=n($De,"A",{href:!0});var oIt=s(GZ);bGr=r(oIt,"FlaxBartForConditionalGeneration"),oIt.forEach(t),vGr=r($De," (BART model)"),$De.forEach(t),FGr=i(qe),x3=n(qe,"LI",{});var kDe=s(x3);KCe=n(kDe,"STRONG",{});var rIt=s(KCe);TGr=r(rIt,"bert"),rIt.forEach(t),MGr=r(kDe," \u2014 "),OZ=n(kDe,"A",{href:!0});var tIt=s(OZ);EGr=r(tIt,"FlaxBertForMaskedLM"),tIt.forEach(t),CGr=r(kDe," (BERT model)"),kDe.forEach(t),wGr=i(qe),$3=n(qe,"LI",{});var SDe=s($3);ZCe=n(SDe,"STRONG",{});var aIt=s(ZCe);AGr=r(aIt,"big_bird"),aIt.forEach(t),LGr=r(SDe," \u2014 "),VZ=n(SDe,"A",{href:!0});var nIt=s(VZ);yGr=r(nIt,"FlaxBigBirdForMaskedLM"),nIt.forEach(t),xGr=r(SDe," (BigBird model)"),SDe.forEach(t),$Gr=i(qe),k3=n(qe,"LI",{});var RDe=s(k3);e5e=n(RDe,"STRONG",{});var sIt=s(e5e);kGr=r(sIt,"distilbert"),sIt.forEach(t),SGr=r(RDe," \u2014 "),XZ=n(RDe,"A",{href:!0});var lIt=s(XZ);RGr=r(lIt,"FlaxDistilBertForMaskedLM"),lIt.forEach(t),PGr=r(RDe," (DistilBERT model)"),RDe.forEach(t),BGr=i(qe),S3=n(qe,"LI",{});var PDe=s(S3);o5e=n(PDe,"STRONG",{});var iIt=s(o5e);IGr=r(iIt,"electra"),iIt.forEach(t),NGr=r(PDe," \u2014 "),zZ=n(PDe,"A",{href:!0});var dIt=s(zZ);qGr=r(dIt,"FlaxElectraForMaskedLM"),dIt.forEach(t),jGr=r(PDe," (ELECTRA model)"),PDe.forEach(t),DGr=i(qe),R3=n(qe,"LI",{});var BDe=s(R3);r5e=n(BDe,"STRONG",{});var cIt=s(r5e);GGr=r(cIt,"mbart"),cIt.forEach(t),OGr=r(BDe," \u2014 "),QZ=n(BDe,"A",{href:!0});var fIt=s(QZ);VGr=r(fIt,"FlaxMBartForConditionalGeneration"),fIt.forEach(t),XGr=r(BDe," (mBART model)"),BDe.forEach(t),zGr=i(qe),P3=n(qe,"LI",{});var IDe=s(P3);t5e=n(IDe,"STRONG",{});var mIt=s(t5e);QGr=r(mIt,"roberta"),mIt.forEach(t),WGr=r(IDe," \u2014 "),WZ=n(IDe,"A",{href:!0});var gIt=s(WZ);HGr=r(gIt,"FlaxRobertaForMaskedLM"),gIt.forEach(t),UGr=r(IDe," (RoBERTa model)"),IDe.forEach(t),JGr=i(qe),B3=n(qe,"LI",{});var NDe=s(B3);a5e=n(NDe,"STRONG",{});var hIt=s(a5e);YGr=r(hIt,"roformer"),hIt.forEach(t),KGr=r(NDe," \u2014 "),HZ=n(NDe,"A",{href:!0});var pIt=s(HZ);ZGr=r(pIt,"FlaxRoFormerForMaskedLM"),pIt.forEach(t),eOr=r(NDe," (RoFormer model)"),NDe.forEach(t),oOr=i(qe),I3=n(qe,"LI",{});var qDe=s(I3);n5e=n(qDe,"STRONG",{});var _It=s(n5e);rOr=r(_It,"xlm-roberta"),_It.forEach(t),tOr=r(qDe," \u2014 "),UZ=n(qDe,"A",{href:!0});var uIt=s(UZ);aOr=r(uIt,"FlaxXLMRobertaForMaskedLM"),uIt.forEach(t),nOr=r(qDe," (XLM-RoBERTa model)"),qDe.forEach(t),qe.forEach(t),sOr=i(ai),T(N3.$$.fragment,ai),ai.forEach(t),ti.forEach(t),CVe=i(f),ef=n(f,"H2",{class:!0});var Rze=s(ef);q3=n(Rze,"A",{id:!0,class:!0,href:!0});var bIt=s(q3);s5e=n(bIt,"SPAN",{});var vIt=s(s5e);T(Yx.$$.fragment,vIt),vIt.forEach(t),bIt.forEach(t),lOr=i(Rze),l5e=n(Rze,"SPAN",{});var FIt=s(l5e);iOr=r(FIt,"FlaxAutoModelForSeq2SeqLM"),FIt.forEach(t),Rze.forEach(t),wVe=i(f),ur=n(f,"DIV",{class:!0});var ni=s(ur);T(Kx.$$.fragment,ni),dOr=i(ni),of=n(ni,"P",{});var Hre=s(of);cOr=r(Hre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),JZ=n(Hre,"A",{href:!0});var TIt=s(JZ);fOr=r(TIt,"from_pretrained()"),TIt.forEach(t),mOr=r(Hre," class method or the "),YZ=n(Hre,"A",{href:!0});var MIt=s(YZ);gOr=r(MIt,"from_config()"),MIt.forEach(t),hOr=r(Hre,` class
method.`),Hre.forEach(t),pOr=i(ni),Zx=n(ni,"P",{});var Pze=s(Zx);_Or=r(Pze,"This class cannot be instantiated directly using "),i5e=n(Pze,"CODE",{});var EIt=s(i5e);uOr=r(EIt,"__init__()"),EIt.forEach(t),bOr=r(Pze," (throws an error)."),Pze.forEach(t),vOr=i(ni),Ht=n(ni,"DIV",{class:!0});var i6=s(Ht);T(e$.$$.fragment,i6),FOr=i(i6),d5e=n(i6,"P",{});var CIt=s(d5e);TOr=r(CIt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),CIt.forEach(t),MOr=i(i6),rf=n(i6,"P",{});var Ure=s(rf);EOr=r(Ure,`Note:
Loading a model from its configuration file does `),c5e=n(Ure,"STRONG",{});var wIt=s(c5e);COr=r(wIt,"not"),wIt.forEach(t),wOr=r(Ure,` load the model weights. It only affects the
model\u2019s configuration. Use `),KZ=n(Ure,"A",{href:!0});var AIt=s(KZ);AOr=r(AIt,"from_pretrained()"),AIt.forEach(t),LOr=r(Ure," to load the model weights."),Ure.forEach(t),yOr=i(i6),T(j3.$$.fragment,i6),i6.forEach(t),xOr=i(ni),zr=n(ni,"DIV",{class:!0});var si=s(zr);T(o$.$$.fragment,si),$Or=i(si),f5e=n(si,"P",{});var LIt=s(f5e);kOr=r(LIt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),LIt.forEach(t),SOr=i(si),En=n(si,"P",{});var d6=s(En);ROr=r(d6,"The model class to instantiate is selected based on the "),m5e=n(d6,"CODE",{});var yIt=s(m5e);POr=r(yIt,"model_type"),yIt.forEach(t),BOr=r(d6,` property of the config object (either
passed as an argument or loaded from `),g5e=n(d6,"CODE",{});var xIt=s(g5e);IOr=r(xIt,"pretrained_model_name_or_path"),xIt.forEach(t),NOr=r(d6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h5e=n(d6,"CODE",{});var $It=s(h5e);qOr=r($It,"pretrained_model_name_or_path"),$It.forEach(t),jOr=r(d6,":"),d6.forEach(t),DOr=i(si),ke=n(si,"UL",{});var je=s(ke);D3=n(je,"LI",{});var jDe=s(D3);p5e=n(jDe,"STRONG",{});var kIt=s(p5e);GOr=r(kIt,"bart"),kIt.forEach(t),OOr=r(jDe," \u2014 "),ZZ=n(jDe,"A",{href:!0});var SIt=s(ZZ);VOr=r(SIt,"FlaxBartForConditionalGeneration"),SIt.forEach(t),XOr=r(jDe," (BART model)"),jDe.forEach(t),zOr=i(je),G3=n(je,"LI",{});var DDe=s(G3);_5e=n(DDe,"STRONG",{});var RIt=s(_5e);QOr=r(RIt,"blenderbot"),RIt.forEach(t),WOr=r(DDe," \u2014 "),eee=n(DDe,"A",{href:!0});var PIt=s(eee);HOr=r(PIt,"FlaxBlenderbotForConditionalGeneration"),PIt.forEach(t),UOr=r(DDe," (Blenderbot model)"),DDe.forEach(t),JOr=i(je),O3=n(je,"LI",{});var GDe=s(O3);u5e=n(GDe,"STRONG",{});var BIt=s(u5e);YOr=r(BIt,"blenderbot-small"),BIt.forEach(t),KOr=r(GDe," \u2014 "),oee=n(GDe,"A",{href:!0});var IIt=s(oee);ZOr=r(IIt,"FlaxBlenderbotSmallForConditionalGeneration"),IIt.forEach(t),eVr=r(GDe," (BlenderbotSmall model)"),GDe.forEach(t),oVr=i(je),V3=n(je,"LI",{});var ODe=s(V3);b5e=n(ODe,"STRONG",{});var NIt=s(b5e);rVr=r(NIt,"encoder-decoder"),NIt.forEach(t),tVr=r(ODe," \u2014 "),ree=n(ODe,"A",{href:!0});var qIt=s(ree);aVr=r(qIt,"FlaxEncoderDecoderModel"),qIt.forEach(t),nVr=r(ODe," (Encoder decoder model)"),ODe.forEach(t),sVr=i(je),X3=n(je,"LI",{});var VDe=s(X3);v5e=n(VDe,"STRONG",{});var jIt=s(v5e);lVr=r(jIt,"longt5"),jIt.forEach(t),iVr=r(VDe," \u2014 "),tee=n(VDe,"A",{href:!0});var DIt=s(tee);dVr=r(DIt,"FlaxLongT5ForConditionalGeneration"),DIt.forEach(t),cVr=r(VDe," (LongT5 model)"),VDe.forEach(t),fVr=i(je),z3=n(je,"LI",{});var XDe=s(z3);F5e=n(XDe,"STRONG",{});var GIt=s(F5e);mVr=r(GIt,"marian"),GIt.forEach(t),gVr=r(XDe," \u2014 "),aee=n(XDe,"A",{href:!0});var OIt=s(aee);hVr=r(OIt,"FlaxMarianMTModel"),OIt.forEach(t),pVr=r(XDe," (Marian model)"),XDe.forEach(t),_Vr=i(je),Q3=n(je,"LI",{});var zDe=s(Q3);T5e=n(zDe,"STRONG",{});var VIt=s(T5e);uVr=r(VIt,"mbart"),VIt.forEach(t),bVr=r(zDe," \u2014 "),nee=n(zDe,"A",{href:!0});var XIt=s(nee);vVr=r(XIt,"FlaxMBartForConditionalGeneration"),XIt.forEach(t),FVr=r(zDe," (mBART model)"),zDe.forEach(t),TVr=i(je),W3=n(je,"LI",{});var QDe=s(W3);M5e=n(QDe,"STRONG",{});var zIt=s(M5e);MVr=r(zIt,"mt5"),zIt.forEach(t),EVr=r(QDe," \u2014 "),see=n(QDe,"A",{href:!0});var QIt=s(see);CVr=r(QIt,"FlaxMT5ForConditionalGeneration"),QIt.forEach(t),wVr=r(QDe," (MT5 model)"),QDe.forEach(t),AVr=i(je),H3=n(je,"LI",{});var WDe=s(H3);E5e=n(WDe,"STRONG",{});var WIt=s(E5e);LVr=r(WIt,"pegasus"),WIt.forEach(t),yVr=r(WDe," \u2014 "),lee=n(WDe,"A",{href:!0});var HIt=s(lee);xVr=r(HIt,"FlaxPegasusForConditionalGeneration"),HIt.forEach(t),$Vr=r(WDe," (Pegasus model)"),WDe.forEach(t),kVr=i(je),U3=n(je,"LI",{});var HDe=s(U3);C5e=n(HDe,"STRONG",{});var UIt=s(C5e);SVr=r(UIt,"t5"),UIt.forEach(t),RVr=r(HDe," \u2014 "),iee=n(HDe,"A",{href:!0});var JIt=s(iee);PVr=r(JIt,"FlaxT5ForConditionalGeneration"),JIt.forEach(t),BVr=r(HDe," (T5 model)"),HDe.forEach(t),je.forEach(t),IVr=i(si),T(J3.$$.fragment,si),si.forEach(t),ni.forEach(t),AVe=i(f),tf=n(f,"H2",{class:!0});var Bze=s(tf);Y3=n(Bze,"A",{id:!0,class:!0,href:!0});var YIt=s(Y3);w5e=n(YIt,"SPAN",{});var KIt=s(w5e);T(r$.$$.fragment,KIt),KIt.forEach(t),YIt.forEach(t),NVr=i(Bze),A5e=n(Bze,"SPAN",{});var ZIt=s(A5e);qVr=r(ZIt,"FlaxAutoModelForSequenceClassification"),ZIt.forEach(t),Bze.forEach(t),LVe=i(f),br=n(f,"DIV",{class:!0});var li=s(br);T(t$.$$.fragment,li),jVr=i(li),af=n(li,"P",{});var Jre=s(af);DVr=r(Jre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),dee=n(Jre,"A",{href:!0});var eNt=s(dee);GVr=r(eNt,"from_pretrained()"),eNt.forEach(t),OVr=r(Jre," class method or the "),cee=n(Jre,"A",{href:!0});var oNt=s(cee);VVr=r(oNt,"from_config()"),oNt.forEach(t),XVr=r(Jre,` class
method.`),Jre.forEach(t),zVr=i(li),a$=n(li,"P",{});var Ize=s(a$);QVr=r(Ize,"This class cannot be instantiated directly using "),L5e=n(Ize,"CODE",{});var rNt=s(L5e);WVr=r(rNt,"__init__()"),rNt.forEach(t),HVr=r(Ize," (throws an error)."),Ize.forEach(t),UVr=i(li),Ut=n(li,"DIV",{class:!0});var c6=s(Ut);T(n$.$$.fragment,c6),JVr=i(c6),y5e=n(c6,"P",{});var tNt=s(y5e);YVr=r(tNt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),tNt.forEach(t),KVr=i(c6),nf=n(c6,"P",{});var Yre=s(nf);ZVr=r(Yre,`Note:
Loading a model from its configuration file does `),x5e=n(Yre,"STRONG",{});var aNt=s(x5e);eXr=r(aNt,"not"),aNt.forEach(t),oXr=r(Yre,` load the model weights. It only affects the
model\u2019s configuration. Use `),fee=n(Yre,"A",{href:!0});var nNt=s(fee);rXr=r(nNt,"from_pretrained()"),nNt.forEach(t),tXr=r(Yre," to load the model weights."),Yre.forEach(t),aXr=i(c6),T(K3.$$.fragment,c6),c6.forEach(t),nXr=i(li),Qr=n(li,"DIV",{class:!0});var ii=s(Qr);T(s$.$$.fragment,ii),sXr=i(ii),$5e=n(ii,"P",{});var sNt=s($5e);lXr=r(sNt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),sNt.forEach(t),iXr=i(ii),Cn=n(ii,"P",{});var f6=s(Cn);dXr=r(f6,"The model class to instantiate is selected based on the "),k5e=n(f6,"CODE",{});var lNt=s(k5e);cXr=r(lNt,"model_type"),lNt.forEach(t),fXr=r(f6,` property of the config object (either
passed as an argument or loaded from `),S5e=n(f6,"CODE",{});var iNt=s(S5e);mXr=r(iNt,"pretrained_model_name_or_path"),iNt.forEach(t),gXr=r(f6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R5e=n(f6,"CODE",{});var dNt=s(R5e);hXr=r(dNt,"pretrained_model_name_or_path"),dNt.forEach(t),pXr=r(f6,":"),f6.forEach(t),_Xr=i(ii),Se=n(ii,"UL",{});var De=s(Se);Z3=n(De,"LI",{});var UDe=s(Z3);P5e=n(UDe,"STRONG",{});var cNt=s(P5e);uXr=r(cNt,"albert"),cNt.forEach(t),bXr=r(UDe," \u2014 "),mee=n(UDe,"A",{href:!0});var fNt=s(mee);vXr=r(fNt,"FlaxAlbertForSequenceClassification"),fNt.forEach(t),FXr=r(UDe," (ALBERT model)"),UDe.forEach(t),TXr=i(De),e0=n(De,"LI",{});var JDe=s(e0);B5e=n(JDe,"STRONG",{});var mNt=s(B5e);MXr=r(mNt,"bart"),mNt.forEach(t),EXr=r(JDe," \u2014 "),gee=n(JDe,"A",{href:!0});var gNt=s(gee);CXr=r(gNt,"FlaxBartForSequenceClassification"),gNt.forEach(t),wXr=r(JDe," (BART model)"),JDe.forEach(t),AXr=i(De),o0=n(De,"LI",{});var YDe=s(o0);I5e=n(YDe,"STRONG",{});var hNt=s(I5e);LXr=r(hNt,"bert"),hNt.forEach(t),yXr=r(YDe," \u2014 "),hee=n(YDe,"A",{href:!0});var pNt=s(hee);xXr=r(pNt,"FlaxBertForSequenceClassification"),pNt.forEach(t),$Xr=r(YDe," (BERT model)"),YDe.forEach(t),kXr=i(De),r0=n(De,"LI",{});var KDe=s(r0);N5e=n(KDe,"STRONG",{});var _Nt=s(N5e);SXr=r(_Nt,"big_bird"),_Nt.forEach(t),RXr=r(KDe," \u2014 "),pee=n(KDe,"A",{href:!0});var uNt=s(pee);PXr=r(uNt,"FlaxBigBirdForSequenceClassification"),uNt.forEach(t),BXr=r(KDe," (BigBird model)"),KDe.forEach(t),IXr=i(De),t0=n(De,"LI",{});var ZDe=s(t0);q5e=n(ZDe,"STRONG",{});var bNt=s(q5e);NXr=r(bNt,"distilbert"),bNt.forEach(t),qXr=r(ZDe," \u2014 "),_ee=n(ZDe,"A",{href:!0});var vNt=s(_ee);jXr=r(vNt,"FlaxDistilBertForSequenceClassification"),vNt.forEach(t),DXr=r(ZDe," (DistilBERT model)"),ZDe.forEach(t),GXr=i(De),a0=n(De,"LI",{});var eGe=s(a0);j5e=n(eGe,"STRONG",{});var FNt=s(j5e);OXr=r(FNt,"electra"),FNt.forEach(t),VXr=r(eGe," \u2014 "),uee=n(eGe,"A",{href:!0});var TNt=s(uee);XXr=r(TNt,"FlaxElectraForSequenceClassification"),TNt.forEach(t),zXr=r(eGe," (ELECTRA model)"),eGe.forEach(t),QXr=i(De),n0=n(De,"LI",{});var oGe=s(n0);D5e=n(oGe,"STRONG",{});var MNt=s(D5e);WXr=r(MNt,"mbart"),MNt.forEach(t),HXr=r(oGe," \u2014 "),bee=n(oGe,"A",{href:!0});var ENt=s(bee);UXr=r(ENt,"FlaxMBartForSequenceClassification"),ENt.forEach(t),JXr=r(oGe," (mBART model)"),oGe.forEach(t),YXr=i(De),s0=n(De,"LI",{});var rGe=s(s0);G5e=n(rGe,"STRONG",{});var CNt=s(G5e);KXr=r(CNt,"roberta"),CNt.forEach(t),ZXr=r(rGe," \u2014 "),vee=n(rGe,"A",{href:!0});var wNt=s(vee);ezr=r(wNt,"FlaxRobertaForSequenceClassification"),wNt.forEach(t),ozr=r(rGe," (RoBERTa model)"),rGe.forEach(t),rzr=i(De),l0=n(De,"LI",{});var tGe=s(l0);O5e=n(tGe,"STRONG",{});var ANt=s(O5e);tzr=r(ANt,"roformer"),ANt.forEach(t),azr=r(tGe," \u2014 "),Fee=n(tGe,"A",{href:!0});var LNt=s(Fee);nzr=r(LNt,"FlaxRoFormerForSequenceClassification"),LNt.forEach(t),szr=r(tGe," (RoFormer model)"),tGe.forEach(t),lzr=i(De),i0=n(De,"LI",{});var aGe=s(i0);V5e=n(aGe,"STRONG",{});var yNt=s(V5e);izr=r(yNt,"xlm-roberta"),yNt.forEach(t),dzr=r(aGe," \u2014 "),Tee=n(aGe,"A",{href:!0});var xNt=s(Tee);czr=r(xNt,"FlaxXLMRobertaForSequenceClassification"),xNt.forEach(t),fzr=r(aGe," (XLM-RoBERTa model)"),aGe.forEach(t),De.forEach(t),mzr=i(ii),T(d0.$$.fragment,ii),ii.forEach(t),li.forEach(t),yVe=i(f),sf=n(f,"H2",{class:!0});var Nze=s(sf);c0=n(Nze,"A",{id:!0,class:!0,href:!0});var $Nt=s(c0);X5e=n($Nt,"SPAN",{});var kNt=s(X5e);T(l$.$$.fragment,kNt),kNt.forEach(t),$Nt.forEach(t),gzr=i(Nze),z5e=n(Nze,"SPAN",{});var SNt=s(z5e);hzr=r(SNt,"FlaxAutoModelForQuestionAnswering"),SNt.forEach(t),Nze.forEach(t),xVe=i(f),vr=n(f,"DIV",{class:!0});var di=s(vr);T(i$.$$.fragment,di),pzr=i(di),lf=n(di,"P",{});var Kre=s(lf);_zr=r(Kre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Mee=n(Kre,"A",{href:!0});var RNt=s(Mee);uzr=r(RNt,"from_pretrained()"),RNt.forEach(t),bzr=r(Kre," class method or the "),Eee=n(Kre,"A",{href:!0});var PNt=s(Eee);vzr=r(PNt,"from_config()"),PNt.forEach(t),Fzr=r(Kre,` class
method.`),Kre.forEach(t),Tzr=i(di),d$=n(di,"P",{});var qze=s(d$);Mzr=r(qze,"This class cannot be instantiated directly using "),Q5e=n(qze,"CODE",{});var BNt=s(Q5e);Ezr=r(BNt,"__init__()"),BNt.forEach(t),Czr=r(qze," (throws an error)."),qze.forEach(t),wzr=i(di),Jt=n(di,"DIV",{class:!0});var m6=s(Jt);T(c$.$$.fragment,m6),Azr=i(m6),W5e=n(m6,"P",{});var INt=s(W5e);Lzr=r(INt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),INt.forEach(t),yzr=i(m6),df=n(m6,"P",{});var Zre=s(df);xzr=r(Zre,`Note:
Loading a model from its configuration file does `),H5e=n(Zre,"STRONG",{});var NNt=s(H5e);$zr=r(NNt,"not"),NNt.forEach(t),kzr=r(Zre,` load the model weights. It only affects the
model\u2019s configuration. Use `),Cee=n(Zre,"A",{href:!0});var qNt=s(Cee);Szr=r(qNt,"from_pretrained()"),qNt.forEach(t),Rzr=r(Zre," to load the model weights."),Zre.forEach(t),Pzr=i(m6),T(f0.$$.fragment,m6),m6.forEach(t),Bzr=i(di),Wr=n(di,"DIV",{class:!0});var ci=s(Wr);T(f$.$$.fragment,ci),Izr=i(ci),U5e=n(ci,"P",{});var jNt=s(U5e);Nzr=r(jNt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),jNt.forEach(t),qzr=i(ci),wn=n(ci,"P",{});var g6=s(wn);jzr=r(g6,"The model class to instantiate is selected based on the "),J5e=n(g6,"CODE",{});var DNt=s(J5e);Dzr=r(DNt,"model_type"),DNt.forEach(t),Gzr=r(g6,` property of the config object (either
passed as an argument or loaded from `),Y5e=n(g6,"CODE",{});var GNt=s(Y5e);Ozr=r(GNt,"pretrained_model_name_or_path"),GNt.forEach(t),Vzr=r(g6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K5e=n(g6,"CODE",{});var ONt=s(K5e);Xzr=r(ONt,"pretrained_model_name_or_path"),ONt.forEach(t),zzr=r(g6,":"),g6.forEach(t),Qzr=i(ci),Re=n(ci,"UL",{});var Ge=s(Re);m0=n(Ge,"LI",{});var nGe=s(m0);Z5e=n(nGe,"STRONG",{});var VNt=s(Z5e);Wzr=r(VNt,"albert"),VNt.forEach(t),Hzr=r(nGe," \u2014 "),wee=n(nGe,"A",{href:!0});var XNt=s(wee);Uzr=r(XNt,"FlaxAlbertForQuestionAnswering"),XNt.forEach(t),Jzr=r(nGe," (ALBERT model)"),nGe.forEach(t),Yzr=i(Ge),g0=n(Ge,"LI",{});var sGe=s(g0);e3e=n(sGe,"STRONG",{});var zNt=s(e3e);Kzr=r(zNt,"bart"),zNt.forEach(t),Zzr=r(sGe," \u2014 "),Aee=n(sGe,"A",{href:!0});var QNt=s(Aee);eQr=r(QNt,"FlaxBartForQuestionAnswering"),QNt.forEach(t),oQr=r(sGe," (BART model)"),sGe.forEach(t),rQr=i(Ge),h0=n(Ge,"LI",{});var lGe=s(h0);o3e=n(lGe,"STRONG",{});var WNt=s(o3e);tQr=r(WNt,"bert"),WNt.forEach(t),aQr=r(lGe," \u2014 "),Lee=n(lGe,"A",{href:!0});var HNt=s(Lee);nQr=r(HNt,"FlaxBertForQuestionAnswering"),HNt.forEach(t),sQr=r(lGe," (BERT model)"),lGe.forEach(t),lQr=i(Ge),p0=n(Ge,"LI",{});var iGe=s(p0);r3e=n(iGe,"STRONG",{});var UNt=s(r3e);iQr=r(UNt,"big_bird"),UNt.forEach(t),dQr=r(iGe," \u2014 "),yee=n(iGe,"A",{href:!0});var JNt=s(yee);cQr=r(JNt,"FlaxBigBirdForQuestionAnswering"),JNt.forEach(t),fQr=r(iGe," (BigBird model)"),iGe.forEach(t),mQr=i(Ge),_0=n(Ge,"LI",{});var dGe=s(_0);t3e=n(dGe,"STRONG",{});var YNt=s(t3e);gQr=r(YNt,"distilbert"),YNt.forEach(t),hQr=r(dGe," \u2014 "),xee=n(dGe,"A",{href:!0});var KNt=s(xee);pQr=r(KNt,"FlaxDistilBertForQuestionAnswering"),KNt.forEach(t),_Qr=r(dGe," (DistilBERT model)"),dGe.forEach(t),uQr=i(Ge),u0=n(Ge,"LI",{});var cGe=s(u0);a3e=n(cGe,"STRONG",{});var ZNt=s(a3e);bQr=r(ZNt,"electra"),ZNt.forEach(t),vQr=r(cGe," \u2014 "),$ee=n(cGe,"A",{href:!0});var eqt=s($ee);FQr=r(eqt,"FlaxElectraForQuestionAnswering"),eqt.forEach(t),TQr=r(cGe," (ELECTRA model)"),cGe.forEach(t),MQr=i(Ge),b0=n(Ge,"LI",{});var fGe=s(b0);n3e=n(fGe,"STRONG",{});var oqt=s(n3e);EQr=r(oqt,"mbart"),oqt.forEach(t),CQr=r(fGe," \u2014 "),kee=n(fGe,"A",{href:!0});var rqt=s(kee);wQr=r(rqt,"FlaxMBartForQuestionAnswering"),rqt.forEach(t),AQr=r(fGe," (mBART model)"),fGe.forEach(t),LQr=i(Ge),v0=n(Ge,"LI",{});var mGe=s(v0);s3e=n(mGe,"STRONG",{});var tqt=s(s3e);yQr=r(tqt,"roberta"),tqt.forEach(t),xQr=r(mGe," \u2014 "),See=n(mGe,"A",{href:!0});var aqt=s(See);$Qr=r(aqt,"FlaxRobertaForQuestionAnswering"),aqt.forEach(t),kQr=r(mGe," (RoBERTa model)"),mGe.forEach(t),SQr=i(Ge),F0=n(Ge,"LI",{});var gGe=s(F0);l3e=n(gGe,"STRONG",{});var nqt=s(l3e);RQr=r(nqt,"roformer"),nqt.forEach(t),PQr=r(gGe," \u2014 "),Ree=n(gGe,"A",{href:!0});var sqt=s(Ree);BQr=r(sqt,"FlaxRoFormerForQuestionAnswering"),sqt.forEach(t),IQr=r(gGe," (RoFormer model)"),gGe.forEach(t),NQr=i(Ge),T0=n(Ge,"LI",{});var hGe=s(T0);i3e=n(hGe,"STRONG",{});var lqt=s(i3e);qQr=r(lqt,"xlm-roberta"),lqt.forEach(t),jQr=r(hGe," \u2014 "),Pee=n(hGe,"A",{href:!0});var iqt=s(Pee);DQr=r(iqt,"FlaxXLMRobertaForQuestionAnswering"),iqt.forEach(t),GQr=r(hGe," (XLM-RoBERTa model)"),hGe.forEach(t),Ge.forEach(t),OQr=i(ci),T(M0.$$.fragment,ci),ci.forEach(t),di.forEach(t),$Ve=i(f),cf=n(f,"H2",{class:!0});var jze=s(cf);E0=n(jze,"A",{id:!0,class:!0,href:!0});var dqt=s(E0);d3e=n(dqt,"SPAN",{});var cqt=s(d3e);T(m$.$$.fragment,cqt),cqt.forEach(t),dqt.forEach(t),VQr=i(jze),c3e=n(jze,"SPAN",{});var fqt=s(c3e);XQr=r(fqt,"FlaxAutoModelForTokenClassification"),fqt.forEach(t),jze.forEach(t),kVe=i(f),Fr=n(f,"DIV",{class:!0});var fi=s(Fr);T(g$.$$.fragment,fi),zQr=i(fi),ff=n(fi,"P",{});var ete=s(ff);QQr=r(ete,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Bee=n(ete,"A",{href:!0});var mqt=s(Bee);WQr=r(mqt,"from_pretrained()"),mqt.forEach(t),HQr=r(ete," class method or the "),Iee=n(ete,"A",{href:!0});var gqt=s(Iee);UQr=r(gqt,"from_config()"),gqt.forEach(t),JQr=r(ete,` class
method.`),ete.forEach(t),YQr=i(fi),h$=n(fi,"P",{});var Dze=s(h$);KQr=r(Dze,"This class cannot be instantiated directly using "),f3e=n(Dze,"CODE",{});var hqt=s(f3e);ZQr=r(hqt,"__init__()"),hqt.forEach(t),eWr=r(Dze," (throws an error)."),Dze.forEach(t),oWr=i(fi),Yt=n(fi,"DIV",{class:!0});var h6=s(Yt);T(p$.$$.fragment,h6),rWr=i(h6),m3e=n(h6,"P",{});var pqt=s(m3e);tWr=r(pqt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),pqt.forEach(t),aWr=i(h6),mf=n(h6,"P",{});var ote=s(mf);nWr=r(ote,`Note:
Loading a model from its configuration file does `),g3e=n(ote,"STRONG",{});var _qt=s(g3e);sWr=r(_qt,"not"),_qt.forEach(t),lWr=r(ote,` load the model weights. It only affects the
model\u2019s configuration. Use `),Nee=n(ote,"A",{href:!0});var uqt=s(Nee);iWr=r(uqt,"from_pretrained()"),uqt.forEach(t),dWr=r(ote," to load the model weights."),ote.forEach(t),cWr=i(h6),T(C0.$$.fragment,h6),h6.forEach(t),fWr=i(fi),Hr=n(fi,"DIV",{class:!0});var mi=s(Hr);T(_$.$$.fragment,mi),mWr=i(mi),h3e=n(mi,"P",{});var bqt=s(h3e);gWr=r(bqt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),bqt.forEach(t),hWr=i(mi),An=n(mi,"P",{});var p6=s(An);pWr=r(p6,"The model class to instantiate is selected based on the "),p3e=n(p6,"CODE",{});var vqt=s(p3e);_Wr=r(vqt,"model_type"),vqt.forEach(t),uWr=r(p6,` property of the config object (either
passed as an argument or loaded from `),_3e=n(p6,"CODE",{});var Fqt=s(_3e);bWr=r(Fqt,"pretrained_model_name_or_path"),Fqt.forEach(t),vWr=r(p6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u3e=n(p6,"CODE",{});var Tqt=s(u3e);FWr=r(Tqt,"pretrained_model_name_or_path"),Tqt.forEach(t),TWr=r(p6,":"),p6.forEach(t),MWr=i(mi),Ve=n(mi,"UL",{});var To=s(Ve);w0=n(To,"LI",{});var pGe=s(w0);b3e=n(pGe,"STRONG",{});var Mqt=s(b3e);EWr=r(Mqt,"albert"),Mqt.forEach(t),CWr=r(pGe," \u2014 "),qee=n(pGe,"A",{href:!0});var Eqt=s(qee);wWr=r(Eqt,"FlaxAlbertForTokenClassification"),Eqt.forEach(t),AWr=r(pGe," (ALBERT model)"),pGe.forEach(t),LWr=i(To),A0=n(To,"LI",{});var _Ge=s(A0);v3e=n(_Ge,"STRONG",{});var Cqt=s(v3e);yWr=r(Cqt,"bert"),Cqt.forEach(t),xWr=r(_Ge," \u2014 "),jee=n(_Ge,"A",{href:!0});var wqt=s(jee);$Wr=r(wqt,"FlaxBertForTokenClassification"),wqt.forEach(t),kWr=r(_Ge," (BERT model)"),_Ge.forEach(t),SWr=i(To),L0=n(To,"LI",{});var uGe=s(L0);F3e=n(uGe,"STRONG",{});var Aqt=s(F3e);RWr=r(Aqt,"big_bird"),Aqt.forEach(t),PWr=r(uGe," \u2014 "),Dee=n(uGe,"A",{href:!0});var Lqt=s(Dee);BWr=r(Lqt,"FlaxBigBirdForTokenClassification"),Lqt.forEach(t),IWr=r(uGe," (BigBird model)"),uGe.forEach(t),NWr=i(To),y0=n(To,"LI",{});var bGe=s(y0);T3e=n(bGe,"STRONG",{});var yqt=s(T3e);qWr=r(yqt,"distilbert"),yqt.forEach(t),jWr=r(bGe," \u2014 "),Gee=n(bGe,"A",{href:!0});var xqt=s(Gee);DWr=r(xqt,"FlaxDistilBertForTokenClassification"),xqt.forEach(t),GWr=r(bGe," (DistilBERT model)"),bGe.forEach(t),OWr=i(To),x0=n(To,"LI",{});var vGe=s(x0);M3e=n(vGe,"STRONG",{});var $qt=s(M3e);VWr=r($qt,"electra"),$qt.forEach(t),XWr=r(vGe," \u2014 "),Oee=n(vGe,"A",{href:!0});var kqt=s(Oee);zWr=r(kqt,"FlaxElectraForTokenClassification"),kqt.forEach(t),QWr=r(vGe," (ELECTRA model)"),vGe.forEach(t),WWr=i(To),$0=n(To,"LI",{});var FGe=s($0);E3e=n(FGe,"STRONG",{});var Sqt=s(E3e);HWr=r(Sqt,"roberta"),Sqt.forEach(t),UWr=r(FGe," \u2014 "),Vee=n(FGe,"A",{href:!0});var Rqt=s(Vee);JWr=r(Rqt,"FlaxRobertaForTokenClassification"),Rqt.forEach(t),YWr=r(FGe," (RoBERTa model)"),FGe.forEach(t),KWr=i(To),k0=n(To,"LI",{});var TGe=s(k0);C3e=n(TGe,"STRONG",{});var Pqt=s(C3e);ZWr=r(Pqt,"roformer"),Pqt.forEach(t),eHr=r(TGe," \u2014 "),Xee=n(TGe,"A",{href:!0});var Bqt=s(Xee);oHr=r(Bqt,"FlaxRoFormerForTokenClassification"),Bqt.forEach(t),rHr=r(TGe," (RoFormer model)"),TGe.forEach(t),tHr=i(To),S0=n(To,"LI",{});var MGe=s(S0);w3e=n(MGe,"STRONG",{});var Iqt=s(w3e);aHr=r(Iqt,"xlm-roberta"),Iqt.forEach(t),nHr=r(MGe," \u2014 "),zee=n(MGe,"A",{href:!0});var Nqt=s(zee);sHr=r(Nqt,"FlaxXLMRobertaForTokenClassification"),Nqt.forEach(t),lHr=r(MGe," (XLM-RoBERTa model)"),MGe.forEach(t),To.forEach(t),iHr=i(mi),T(R0.$$.fragment,mi),mi.forEach(t),fi.forEach(t),SVe=i(f),gf=n(f,"H2",{class:!0});var Gze=s(gf);P0=n(Gze,"A",{id:!0,class:!0,href:!0});var qqt=s(P0);A3e=n(qqt,"SPAN",{});var jqt=s(A3e);T(u$.$$.fragment,jqt),jqt.forEach(t),qqt.forEach(t),dHr=i(Gze),L3e=n(Gze,"SPAN",{});var Dqt=s(L3e);cHr=r(Dqt,"FlaxAutoModelForMultipleChoice"),Dqt.forEach(t),Gze.forEach(t),RVe=i(f),Tr=n(f,"DIV",{class:!0});var gi=s(Tr);T(b$.$$.fragment,gi),fHr=i(gi),hf=n(gi,"P",{});var rte=s(hf);mHr=r(rte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Qee=n(rte,"A",{href:!0});var Gqt=s(Qee);gHr=r(Gqt,"from_pretrained()"),Gqt.forEach(t),hHr=r(rte," class method or the "),Wee=n(rte,"A",{href:!0});var Oqt=s(Wee);pHr=r(Oqt,"from_config()"),Oqt.forEach(t),_Hr=r(rte,` class
method.`),rte.forEach(t),uHr=i(gi),v$=n(gi,"P",{});var Oze=s(v$);bHr=r(Oze,"This class cannot be instantiated directly using "),y3e=n(Oze,"CODE",{});var Vqt=s(y3e);vHr=r(Vqt,"__init__()"),Vqt.forEach(t),FHr=r(Oze," (throws an error)."),Oze.forEach(t),THr=i(gi),Kt=n(gi,"DIV",{class:!0});var _6=s(Kt);T(F$.$$.fragment,_6),MHr=i(_6),x3e=n(_6,"P",{});var Xqt=s(x3e);EHr=r(Xqt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Xqt.forEach(t),CHr=i(_6),pf=n(_6,"P",{});var tte=s(pf);wHr=r(tte,`Note:
Loading a model from its configuration file does `),$3e=n(tte,"STRONG",{});var zqt=s($3e);AHr=r(zqt,"not"),zqt.forEach(t),LHr=r(tte,` load the model weights. It only affects the
model\u2019s configuration. Use `),Hee=n(tte,"A",{href:!0});var Qqt=s(Hee);yHr=r(Qqt,"from_pretrained()"),Qqt.forEach(t),xHr=r(tte," to load the model weights."),tte.forEach(t),$Hr=i(_6),T(B0.$$.fragment,_6),_6.forEach(t),kHr=i(gi),Ur=n(gi,"DIV",{class:!0});var hi=s(Ur);T(T$.$$.fragment,hi),SHr=i(hi),k3e=n(hi,"P",{});var Wqt=s(k3e);RHr=r(Wqt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Wqt.forEach(t),PHr=i(hi),Ln=n(hi,"P",{});var u6=s(Ln);BHr=r(u6,"The model class to instantiate is selected based on the "),S3e=n(u6,"CODE",{});var Hqt=s(S3e);IHr=r(Hqt,"model_type"),Hqt.forEach(t),NHr=r(u6,` property of the config object (either
passed as an argument or loaded from `),R3e=n(u6,"CODE",{});var Uqt=s(R3e);qHr=r(Uqt,"pretrained_model_name_or_path"),Uqt.forEach(t),jHr=r(u6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P3e=n(u6,"CODE",{});var Jqt=s(P3e);DHr=r(Jqt,"pretrained_model_name_or_path"),Jqt.forEach(t),GHr=r(u6,":"),u6.forEach(t),OHr=i(hi),Xe=n(hi,"UL",{});var Mo=s(Xe);I0=n(Mo,"LI",{});var EGe=s(I0);B3e=n(EGe,"STRONG",{});var Yqt=s(B3e);VHr=r(Yqt,"albert"),Yqt.forEach(t),XHr=r(EGe," \u2014 "),Uee=n(EGe,"A",{href:!0});var Kqt=s(Uee);zHr=r(Kqt,"FlaxAlbertForMultipleChoice"),Kqt.forEach(t),QHr=r(EGe," (ALBERT model)"),EGe.forEach(t),WHr=i(Mo),N0=n(Mo,"LI",{});var CGe=s(N0);I3e=n(CGe,"STRONG",{});var Zqt=s(I3e);HHr=r(Zqt,"bert"),Zqt.forEach(t),UHr=r(CGe," \u2014 "),Jee=n(CGe,"A",{href:!0});var ejt=s(Jee);JHr=r(ejt,"FlaxBertForMultipleChoice"),ejt.forEach(t),YHr=r(CGe," (BERT model)"),CGe.forEach(t),KHr=i(Mo),q0=n(Mo,"LI",{});var wGe=s(q0);N3e=n(wGe,"STRONG",{});var ojt=s(N3e);ZHr=r(ojt,"big_bird"),ojt.forEach(t),eUr=r(wGe," \u2014 "),Yee=n(wGe,"A",{href:!0});var rjt=s(Yee);oUr=r(rjt,"FlaxBigBirdForMultipleChoice"),rjt.forEach(t),rUr=r(wGe," (BigBird model)"),wGe.forEach(t),tUr=i(Mo),j0=n(Mo,"LI",{});var AGe=s(j0);q3e=n(AGe,"STRONG",{});var tjt=s(q3e);aUr=r(tjt,"distilbert"),tjt.forEach(t),nUr=r(AGe," \u2014 "),Kee=n(AGe,"A",{href:!0});var ajt=s(Kee);sUr=r(ajt,"FlaxDistilBertForMultipleChoice"),ajt.forEach(t),lUr=r(AGe," (DistilBERT model)"),AGe.forEach(t),iUr=i(Mo),D0=n(Mo,"LI",{});var LGe=s(D0);j3e=n(LGe,"STRONG",{});var njt=s(j3e);dUr=r(njt,"electra"),njt.forEach(t),cUr=r(LGe," \u2014 "),Zee=n(LGe,"A",{href:!0});var sjt=s(Zee);fUr=r(sjt,"FlaxElectraForMultipleChoice"),sjt.forEach(t),mUr=r(LGe," (ELECTRA model)"),LGe.forEach(t),gUr=i(Mo),G0=n(Mo,"LI",{});var yGe=s(G0);D3e=n(yGe,"STRONG",{});var ljt=s(D3e);hUr=r(ljt,"roberta"),ljt.forEach(t),pUr=r(yGe," \u2014 "),eoe=n(yGe,"A",{href:!0});var ijt=s(eoe);_Ur=r(ijt,"FlaxRobertaForMultipleChoice"),ijt.forEach(t),uUr=r(yGe," (RoBERTa model)"),yGe.forEach(t),bUr=i(Mo),O0=n(Mo,"LI",{});var xGe=s(O0);G3e=n(xGe,"STRONG",{});var djt=s(G3e);vUr=r(djt,"roformer"),djt.forEach(t),FUr=r(xGe," \u2014 "),ooe=n(xGe,"A",{href:!0});var cjt=s(ooe);TUr=r(cjt,"FlaxRoFormerForMultipleChoice"),cjt.forEach(t),MUr=r(xGe," (RoFormer model)"),xGe.forEach(t),EUr=i(Mo),V0=n(Mo,"LI",{});var $Ge=s(V0);O3e=n($Ge,"STRONG",{});var fjt=s(O3e);CUr=r(fjt,"xlm-roberta"),fjt.forEach(t),wUr=r($Ge," \u2014 "),roe=n($Ge,"A",{href:!0});var mjt=s(roe);AUr=r(mjt,"FlaxXLMRobertaForMultipleChoice"),mjt.forEach(t),LUr=r($Ge," (XLM-RoBERTa model)"),$Ge.forEach(t),Mo.forEach(t),yUr=i(hi),T(X0.$$.fragment,hi),hi.forEach(t),gi.forEach(t),PVe=i(f),_f=n(f,"H2",{class:!0});var Vze=s(_f);z0=n(Vze,"A",{id:!0,class:!0,href:!0});var gjt=s(z0);V3e=n(gjt,"SPAN",{});var hjt=s(V3e);T(M$.$$.fragment,hjt),hjt.forEach(t),gjt.forEach(t),xUr=i(Vze),X3e=n(Vze,"SPAN",{});var pjt=s(X3e);$Ur=r(pjt,"FlaxAutoModelForNextSentencePrediction"),pjt.forEach(t),Vze.forEach(t),BVe=i(f),Mr=n(f,"DIV",{class:!0});var pi=s(Mr);T(E$.$$.fragment,pi),kUr=i(pi),uf=n(pi,"P",{});var ate=s(uf);SUr=r(ate,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),toe=n(ate,"A",{href:!0});var _jt=s(toe);RUr=r(_jt,"from_pretrained()"),_jt.forEach(t),PUr=r(ate," class method or the "),aoe=n(ate,"A",{href:!0});var ujt=s(aoe);BUr=r(ujt,"from_config()"),ujt.forEach(t),IUr=r(ate,` class
method.`),ate.forEach(t),NUr=i(pi),C$=n(pi,"P",{});var Xze=s(C$);qUr=r(Xze,"This class cannot be instantiated directly using "),z3e=n(Xze,"CODE",{});var bjt=s(z3e);jUr=r(bjt,"__init__()"),bjt.forEach(t),DUr=r(Xze," (throws an error)."),Xze.forEach(t),GUr=i(pi),Zt=n(pi,"DIV",{class:!0});var b6=s(Zt);T(w$.$$.fragment,b6),OUr=i(b6),Q3e=n(b6,"P",{});var vjt=s(Q3e);VUr=r(vjt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),vjt.forEach(t),XUr=i(b6),bf=n(b6,"P",{});var nte=s(bf);zUr=r(nte,`Note:
Loading a model from its configuration file does `),W3e=n(nte,"STRONG",{});var Fjt=s(W3e);QUr=r(Fjt,"not"),Fjt.forEach(t),WUr=r(nte,` load the model weights. It only affects the
model\u2019s configuration. Use `),noe=n(nte,"A",{href:!0});var Tjt=s(noe);HUr=r(Tjt,"from_pretrained()"),Tjt.forEach(t),UUr=r(nte," to load the model weights."),nte.forEach(t),JUr=i(b6),T(Q0.$$.fragment,b6),b6.forEach(t),YUr=i(pi),Jr=n(pi,"DIV",{class:!0});var _i=s(Jr);T(A$.$$.fragment,_i),KUr=i(_i),H3e=n(_i,"P",{});var Mjt=s(H3e);ZUr=r(Mjt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Mjt.forEach(t),eJr=i(_i),yn=n(_i,"P",{});var v6=s(yn);oJr=r(v6,"The model class to instantiate is selected based on the "),U3e=n(v6,"CODE",{});var Ejt=s(U3e);rJr=r(Ejt,"model_type"),Ejt.forEach(t),tJr=r(v6,` property of the config object (either
passed as an argument or loaded from `),J3e=n(v6,"CODE",{});var Cjt=s(J3e);aJr=r(Cjt,"pretrained_model_name_or_path"),Cjt.forEach(t),nJr=r(v6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y3e=n(v6,"CODE",{});var wjt=s(Y3e);sJr=r(wjt,"pretrained_model_name_or_path"),wjt.forEach(t),lJr=r(v6,":"),v6.forEach(t),iJr=i(_i),K3e=n(_i,"UL",{});var Ajt=s(K3e);W0=n(Ajt,"LI",{});var kGe=s(W0);Z3e=n(kGe,"STRONG",{});var Ljt=s(Z3e);dJr=r(Ljt,"bert"),Ljt.forEach(t),cJr=r(kGe," \u2014 "),soe=n(kGe,"A",{href:!0});var yjt=s(soe);fJr=r(yjt,"FlaxBertForNextSentencePrediction"),yjt.forEach(t),mJr=r(kGe," (BERT model)"),kGe.forEach(t),Ajt.forEach(t),gJr=i(_i),T(H0.$$.fragment,_i),_i.forEach(t),pi.forEach(t),IVe=i(f),vf=n(f,"H2",{class:!0});var zze=s(vf);U0=n(zze,"A",{id:!0,class:!0,href:!0});var xjt=s(U0);e0e=n(xjt,"SPAN",{});var $jt=s(e0e);T(L$.$$.fragment,$jt),$jt.forEach(t),xjt.forEach(t),hJr=i(zze),o0e=n(zze,"SPAN",{});var kjt=s(o0e);pJr=r(kjt,"FlaxAutoModelForImageClassification"),kjt.forEach(t),zze.forEach(t),NVe=i(f),Er=n(f,"DIV",{class:!0});var ui=s(Er);T(y$.$$.fragment,ui),_Jr=i(ui),Ff=n(ui,"P",{});var ste=s(Ff);uJr=r(ste,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),loe=n(ste,"A",{href:!0});var Sjt=s(loe);bJr=r(Sjt,"from_pretrained()"),Sjt.forEach(t),vJr=r(ste," class method or the "),ioe=n(ste,"A",{href:!0});var Rjt=s(ioe);FJr=r(Rjt,"from_config()"),Rjt.forEach(t),TJr=r(ste,` class
method.`),ste.forEach(t),MJr=i(ui),x$=n(ui,"P",{});var Qze=s(x$);EJr=r(Qze,"This class cannot be instantiated directly using "),r0e=n(Qze,"CODE",{});var Pjt=s(r0e);CJr=r(Pjt,"__init__()"),Pjt.forEach(t),wJr=r(Qze," (throws an error)."),Qze.forEach(t),AJr=i(ui),ea=n(ui,"DIV",{class:!0});var F6=s(ea);T($$.$$.fragment,F6),LJr=i(F6),t0e=n(F6,"P",{});var Bjt=s(t0e);yJr=r(Bjt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Bjt.forEach(t),xJr=i(F6),Tf=n(F6,"P",{});var lte=s(Tf);$Jr=r(lte,`Note:
Loading a model from its configuration file does `),a0e=n(lte,"STRONG",{});var Ijt=s(a0e);kJr=r(Ijt,"not"),Ijt.forEach(t),SJr=r(lte,` load the model weights. It only affects the
model\u2019s configuration. Use `),doe=n(lte,"A",{href:!0});var Njt=s(doe);RJr=r(Njt,"from_pretrained()"),Njt.forEach(t),PJr=r(lte," to load the model weights."),lte.forEach(t),BJr=i(F6),T(J0.$$.fragment,F6),F6.forEach(t),IJr=i(ui),Yr=n(ui,"DIV",{class:!0});var bi=s(Yr);T(k$.$$.fragment,bi),NJr=i(bi),n0e=n(bi,"P",{});var qjt=s(n0e);qJr=r(qjt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),qjt.forEach(t),jJr=i(bi),xn=n(bi,"P",{});var T6=s(xn);DJr=r(T6,"The model class to instantiate is selected based on the "),s0e=n(T6,"CODE",{});var jjt=s(s0e);GJr=r(jjt,"model_type"),jjt.forEach(t),OJr=r(T6,` property of the config object (either
passed as an argument or loaded from `),l0e=n(T6,"CODE",{});var Djt=s(l0e);VJr=r(Djt,"pretrained_model_name_or_path"),Djt.forEach(t),XJr=r(T6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i0e=n(T6,"CODE",{});var Gjt=s(i0e);zJr=r(Gjt,"pretrained_model_name_or_path"),Gjt.forEach(t),QJr=r(T6,":"),T6.forEach(t),WJr=i(bi),S$=n(bi,"UL",{});var Wze=s(S$);Y0=n(Wze,"LI",{});var SGe=s(Y0);d0e=n(SGe,"STRONG",{});var Ojt=s(d0e);HJr=r(Ojt,"beit"),Ojt.forEach(t),UJr=r(SGe," \u2014 "),coe=n(SGe,"A",{href:!0});var Vjt=s(coe);JJr=r(Vjt,"FlaxBeitForImageClassification"),Vjt.forEach(t),YJr=r(SGe," (BEiT model)"),SGe.forEach(t),KJr=i(Wze),K0=n(Wze,"LI",{});var RGe=s(K0);c0e=n(RGe,"STRONG",{});var Xjt=s(c0e);ZJr=r(Xjt,"vit"),Xjt.forEach(t),eYr=r(RGe," \u2014 "),foe=n(RGe,"A",{href:!0});var zjt=s(foe);oYr=r(zjt,"FlaxViTForImageClassification"),zjt.forEach(t),rYr=r(RGe," (ViT model)"),RGe.forEach(t),Wze.forEach(t),tYr=i(bi),T(Z0.$$.fragment,bi),bi.forEach(t),ui.forEach(t),qVe=i(f),Mf=n(f,"H2",{class:!0});var Hze=s(Mf);ew=n(Hze,"A",{id:!0,class:!0,href:!0});var Qjt=s(ew);f0e=n(Qjt,"SPAN",{});var Wjt=s(f0e);T(R$.$$.fragment,Wjt),Wjt.forEach(t),Qjt.forEach(t),aYr=i(Hze),m0e=n(Hze,"SPAN",{});var Hjt=s(m0e);nYr=r(Hjt,"FlaxAutoModelForVision2Seq"),Hjt.forEach(t),Hze.forEach(t),jVe=i(f),Cr=n(f,"DIV",{class:!0});var vi=s(Cr);T(P$.$$.fragment,vi),sYr=i(vi),Ef=n(vi,"P",{});var ite=s(Ef);lYr=r(ite,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),moe=n(ite,"A",{href:!0});var Ujt=s(moe);iYr=r(Ujt,"from_pretrained()"),Ujt.forEach(t),dYr=r(ite," class method or the "),goe=n(ite,"A",{href:!0});var Jjt=s(goe);cYr=r(Jjt,"from_config()"),Jjt.forEach(t),fYr=r(ite,` class
method.`),ite.forEach(t),mYr=i(vi),B$=n(vi,"P",{});var Uze=s(B$);gYr=r(Uze,"This class cannot be instantiated directly using "),g0e=n(Uze,"CODE",{});var Yjt=s(g0e);hYr=r(Yjt,"__init__()"),Yjt.forEach(t),pYr=r(Uze," (throws an error)."),Uze.forEach(t),_Yr=i(vi),oa=n(vi,"DIV",{class:!0});var M6=s(oa);T(I$.$$.fragment,M6),uYr=i(M6),h0e=n(M6,"P",{});var Kjt=s(h0e);bYr=r(Kjt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Kjt.forEach(t),vYr=i(M6),Cf=n(M6,"P",{});var dte=s(Cf);FYr=r(dte,`Note:
Loading a model from its configuration file does `),p0e=n(dte,"STRONG",{});var Zjt=s(p0e);TYr=r(Zjt,"not"),Zjt.forEach(t),MYr=r(dte,` load the model weights. It only affects the
model\u2019s configuration. Use `),hoe=n(dte,"A",{href:!0});var eDt=s(hoe);EYr=r(eDt,"from_pretrained()"),eDt.forEach(t),CYr=r(dte," to load the model weights."),dte.forEach(t),wYr=i(M6),T(ow.$$.fragment,M6),M6.forEach(t),AYr=i(vi),Kr=n(vi,"DIV",{class:!0});var Fi=s(Kr);T(N$.$$.fragment,Fi),LYr=i(Fi),_0e=n(Fi,"P",{});var oDt=s(_0e);yYr=r(oDt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),oDt.forEach(t),xYr=i(Fi),$n=n(Fi,"P",{});var E6=s($n);$Yr=r(E6,"The model class to instantiate is selected based on the "),u0e=n(E6,"CODE",{});var rDt=s(u0e);kYr=r(rDt,"model_type"),rDt.forEach(t),SYr=r(E6,` property of the config object (either
passed as an argument or loaded from `),b0e=n(E6,"CODE",{});var tDt=s(b0e);RYr=r(tDt,"pretrained_model_name_or_path"),tDt.forEach(t),PYr=r(E6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v0e=n(E6,"CODE",{});var aDt=s(v0e);BYr=r(aDt,"pretrained_model_name_or_path"),aDt.forEach(t),IYr=r(E6,":"),E6.forEach(t),NYr=i(Fi),F0e=n(Fi,"UL",{});var nDt=s(F0e);rw=n(nDt,"LI",{});var PGe=s(rw);T0e=n(PGe,"STRONG",{});var sDt=s(T0e);qYr=r(sDt,"vision-encoder-decoder"),sDt.forEach(t),jYr=r(PGe," \u2014 "),poe=n(PGe,"A",{href:!0});var lDt=s(poe);DYr=r(lDt,"FlaxVisionEncoderDecoderModel"),lDt.forEach(t),GYr=r(PGe," (Vision Encoder decoder model)"),PGe.forEach(t),nDt.forEach(t),OYr=i(Fi),T(tw.$$.fragment,Fi),Fi.forEach(t),vi.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(gOt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Sn,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.AutoConfig"),c(Pn,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.AutoModel"),c(Bn,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.AutoTokenizer"),c(Li,"href","/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertModel"),c(Sf,"id","extending-the-auto-classes"),c(Sf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Sf,"href","#extending-the-auto-classes"),c(yi,"class","relative group"),c(Pf,"id","transformers.AutoConfig"),c(Pf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Pf,"href","#transformers.AutoConfig"),c(xi,"class","relative group"),c(lS,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(iS,"href","/docs/transformers/pr_17787/en/model_doc/albert#transformers.AlbertConfig"),c(dS,"href","/docs/transformers/pr_17787/en/model_doc/bart#transformers.BartConfig"),c(cS,"href","/docs/transformers/pr_17787/en/model_doc/beit#transformers.BeitConfig"),c(fS,"href","/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertConfig"),c(mS,"href","/docs/transformers/pr_17787/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(gS,"href","/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.BigBirdConfig"),c(hS,"href","/docs/transformers/pr_17787/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(pS,"href","/docs/transformers/pr_17787/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(_S,"href","/docs/transformers/pr_17787/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(uS,"href","/docs/transformers/pr_17787/en/model_doc/bloom#transformers.BloomConfig"),c(bS,"href","/docs/transformers/pr_17787/en/model_doc/camembert#transformers.CamembertConfig"),c(vS,"href","/docs/transformers/pr_17787/en/model_doc/canine#transformers.CanineConfig"),c(FS,"href","/docs/transformers/pr_17787/en/model_doc/clip#transformers.CLIPConfig"),c(TS,"href","/docs/transformers/pr_17787/en/model_doc/convbert#transformers.ConvBertConfig"),c(MS,"href","/docs/transformers/pr_17787/en/model_doc/convnext#transformers.ConvNextConfig"),c(ES,"href","/docs/transformers/pr_17787/en/model_doc/ctrl#transformers.CTRLConfig"),c(CS,"href","/docs/transformers/pr_17787/en/model_doc/cvt#transformers.CvtConfig"),c(wS,"href","/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(AS,"href","/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(LS,"href","/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(yS,"href","/docs/transformers/pr_17787/en/model_doc/deberta#transformers.DebertaConfig"),c(xS,"href","/docs/transformers/pr_17787/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c($S,"href","/docs/transformers/pr_17787/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(kS,"href","/docs/transformers/pr_17787/en/model_doc/deit#transformers.DeiTConfig"),c(SS,"href","/docs/transformers/pr_17787/en/model_doc/detr#transformers.DetrConfig"),c(RS,"href","/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.DistilBertConfig"),c(PS,"href","/docs/transformers/pr_17787/en/model_doc/dpr#transformers.DPRConfig"),c(BS,"href","/docs/transformers/pr_17787/en/model_doc/dpt#transformers.DPTConfig"),c(IS,"href","/docs/transformers/pr_17787/en/model_doc/electra#transformers.ElectraConfig"),c(NS,"href","/docs/transformers/pr_17787/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(qS,"href","/docs/transformers/pr_17787/en/model_doc/flaubert#transformers.FlaubertConfig"),c(jS,"href","/docs/transformers/pr_17787/en/model_doc/flava#transformers.FlavaConfig"),c(DS,"href","/docs/transformers/pr_17787/en/model_doc/fnet#transformers.FNetConfig"),c(GS,"href","/docs/transformers/pr_17787/en/model_doc/fsmt#transformers.FSMTConfig"),c(OS,"href","/docs/transformers/pr_17787/en/model_doc/funnel#transformers.FunnelConfig"),c(VS,"href","/docs/transformers/pr_17787/en/model_doc/glpn#transformers.GLPNConfig"),c(XS,"href","/docs/transformers/pr_17787/en/model_doc/gpt2#transformers.GPT2Config"),c(zS,"href","/docs/transformers/pr_17787/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(QS,"href","/docs/transformers/pr_17787/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(WS,"href","/docs/transformers/pr_17787/en/model_doc/gptj#transformers.GPTJConfig"),c(HS,"href","/docs/transformers/pr_17787/en/model_doc/hubert#transformers.HubertConfig"),c(US,"href","/docs/transformers/pr_17787/en/model_doc/ibert#transformers.IBertConfig"),c(JS,"href","/docs/transformers/pr_17787/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(YS,"href","/docs/transformers/pr_17787/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(KS,"href","/docs/transformers/pr_17787/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(ZS,"href","/docs/transformers/pr_17787/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(eR,"href","/docs/transformers/pr_17787/en/model_doc/led#transformers.LEDConfig"),c(oR,"href","/docs/transformers/pr_17787/en/model_doc/levit#transformers.LevitConfig"),c(rR,"href","/docs/transformers/pr_17787/en/model_doc/longformer#transformers.LongformerConfig"),c(tR,"href","/docs/transformers/pr_17787/en/model_doc/longt5#transformers.LongT5Config"),c(aR,"href","/docs/transformers/pr_17787/en/model_doc/luke#transformers.LukeConfig"),c(nR,"href","/docs/transformers/pr_17787/en/model_doc/lxmert#transformers.LxmertConfig"),c(sR,"href","/docs/transformers/pr_17787/en/model_doc/m2m_100#transformers.M2M100Config"),c(lR,"href","/docs/transformers/pr_17787/en/model_doc/marian#transformers.MarianConfig"),c(iR,"href","/docs/transformers/pr_17787/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(dR,"href","/docs/transformers/pr_17787/en/model_doc/mbart#transformers.MBartConfig"),c(cR,"href","/docs/transformers/pr_17787/en/model_doc/mctct#transformers.MCTCTConfig"),c(fR,"href","/docs/transformers/pr_17787/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(mR,"href","/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(gR,"href","/docs/transformers/pr_17787/en/model_doc/mpnet#transformers.MPNetConfig"),c(hR,"href","/docs/transformers/pr_17787/en/model_doc/mt5#transformers.MT5Config"),c(pR,"href","/docs/transformers/pr_17787/en/model_doc/mvp#transformers.MvpConfig"),c(_R,"href","/docs/transformers/pr_17787/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(uR,"href","/docs/transformers/pr_17787/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(bR,"href","/docs/transformers/pr_17787/en/model_doc/opt#transformers.OPTConfig"),c(vR,"href","/docs/transformers/pr_17787/en/model_doc/pegasus#transformers.PegasusConfig"),c(FR,"href","/docs/transformers/pr_17787/en/model_doc/perceiver#transformers.PerceiverConfig"),c(TR,"href","/docs/transformers/pr_17787/en/model_doc/plbart#transformers.PLBartConfig"),c(MR,"href","/docs/transformers/pr_17787/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(ER,"href","/docs/transformers/pr_17787/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(CR,"href","/docs/transformers/pr_17787/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(wR,"href","/docs/transformers/pr_17787/en/model_doc/rag#transformers.RagConfig"),c(AR,"href","/docs/transformers/pr_17787/en/model_doc/realm#transformers.RealmConfig"),c(LR,"href","/docs/transformers/pr_17787/en/model_doc/reformer#transformers.ReformerConfig"),c(yR,"href","/docs/transformers/pr_17787/en/model_doc/regnet#transformers.RegNetConfig"),c(xR,"href","/docs/transformers/pr_17787/en/model_doc/rembert#transformers.RemBertConfig"),c($R,"href","/docs/transformers/pr_17787/en/model_doc/resnet#transformers.ResNetConfig"),c(kR,"href","/docs/transformers/pr_17787/en/model_doc/retribert#transformers.RetriBertConfig"),c(SR,"href","/docs/transformers/pr_17787/en/model_doc/roberta#transformers.RobertaConfig"),c(RR,"href","/docs/transformers/pr_17787/en/model_doc/roformer#transformers.RoFormerConfig"),c(PR,"href","/docs/transformers/pr_17787/en/model_doc/segformer#transformers.SegformerConfig"),c(BR,"href","/docs/transformers/pr_17787/en/model_doc/sew#transformers.SEWConfig"),c(IR,"href","/docs/transformers/pr_17787/en/model_doc/sew-d#transformers.SEWDConfig"),c(NR,"href","/docs/transformers/pr_17787/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(qR,"href","/docs/transformers/pr_17787/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(jR,"href","/docs/transformers/pr_17787/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(DR,"href","/docs/transformers/pr_17787/en/model_doc/splinter#transformers.SplinterConfig"),c(GR,"href","/docs/transformers/pr_17787/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(OR,"href","/docs/transformers/pr_17787/en/model_doc/swin#transformers.SwinConfig"),c(VR,"href","/docs/transformers/pr_17787/en/model_doc/t5#transformers.T5Config"),c(XR,"href","/docs/transformers/pr_17787/en/model_doc/tapas#transformers.TapasConfig"),c(zR,"href","/docs/transformers/pr_17787/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(QR,"href","/docs/transformers/pr_17787/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(WR,"href","/docs/transformers/pr_17787/en/model_doc/trocr#transformers.TrOCRConfig"),c(HR,"href","/docs/transformers/pr_17787/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(UR,"href","/docs/transformers/pr_17787/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(JR,"href","/docs/transformers/pr_17787/en/model_doc/van#transformers.VanConfig"),c(YR,"href","/docs/transformers/pr_17787/en/model_doc/vilt#transformers.ViltConfig"),c(KR,"href","/docs/transformers/pr_17787/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(ZR,"href","/docs/transformers/pr_17787/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(eP,"href","/docs/transformers/pr_17787/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(oP,"href","/docs/transformers/pr_17787/en/model_doc/vit#transformers.ViTConfig"),c(rP,"href","/docs/transformers/pr_17787/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(tP,"href","/docs/transformers/pr_17787/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(aP,"href","/docs/transformers/pr_17787/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(nP,"href","/docs/transformers/pr_17787/en/model_doc/wavlm#transformers.WavLMConfig"),c(sP,"href","/docs/transformers/pr_17787/en/model_doc/xglm#transformers.XGLMConfig"),c(lP,"href","/docs/transformers/pr_17787/en/model_doc/xlm#transformers.XLMConfig"),c(iP,"href","/docs/transformers/pr_17787/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(dP,"href","/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(cP,"href","/docs/transformers/pr_17787/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(fP,"href","/docs/transformers/pr_17787/en/model_doc/xlnet#transformers.XLNetConfig"),c(mP,"href","/docs/transformers/pr_17787/en/model_doc/yolos#transformers.YolosConfig"),c(gP,"href","/docs/transformers/pr_17787/en/model_doc/yoso#transformers.YosoConfig"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Og,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vg,"id","transformers.AutoTokenizer"),c(Vg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Vg,"href","#transformers.AutoTokenizer"),c(ki,"class","relative group"),c(hP,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(pP,"href","/docs/transformers/pr_17787/en/model_doc/albert#transformers.AlbertTokenizer"),c(_P,"href","/docs/transformers/pr_17787/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(uP,"href","/docs/transformers/pr_17787/en/model_doc/bart#transformers.BartTokenizer"),c(bP,"href","/docs/transformers/pr_17787/en/model_doc/bart#transformers.BartTokenizerFast"),c(vP,"href","/docs/transformers/pr_17787/en/model_doc/barthez#transformers.BarthezTokenizer"),c(FP,"href","/docs/transformers/pr_17787/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(TP,"href","/docs/transformers/pr_17787/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(MP,"href","/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertTokenizer"),c(EP,"href","/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertTokenizerFast"),c(CP,"href","/docs/transformers/pr_17787/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(wP,"href","/docs/transformers/pr_17787/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(AP,"href","/docs/transformers/pr_17787/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(LP,"href","/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(yP,"href","/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(xP,"href","/docs/transformers/pr_17787/en/model_doc/pegasus#transformers.PegasusTokenizer"),c($P,"href","/docs/transformers/pr_17787/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(kP,"href","/docs/transformers/pr_17787/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(SP,"href","/docs/transformers/pr_17787/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(RP,"href","/docs/transformers/pr_17787/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(PP,"href","/docs/transformers/pr_17787/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(BP,"href","/docs/transformers/pr_17787/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(IP,"href","/docs/transformers/pr_17787/en/model_doc/camembert#transformers.CamembertTokenizer"),c(NP,"href","/docs/transformers/pr_17787/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(qP,"href","/docs/transformers/pr_17787/en/model_doc/canine#transformers.CanineTokenizer"),c(jP,"href","/docs/transformers/pr_17787/en/model_doc/clip#transformers.CLIPTokenizer"),c(DP,"href","/docs/transformers/pr_17787/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(GP,"href","/docs/transformers/pr_17787/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(OP,"href","/docs/transformers/pr_17787/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(VP,"href","/docs/transformers/pr_17787/en/model_doc/cpm#transformers.CpmTokenizer"),c(XP,"href","/docs/transformers/pr_17787/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(zP,"href","/docs/transformers/pr_17787/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(QP,"href","/docs/transformers/pr_17787/en/model_doc/roberta#transformers.RobertaTokenizer"),c(WP,"href","/docs/transformers/pr_17787/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(HP,"href","/docs/transformers/pr_17787/en/model_doc/deberta#transformers.DebertaTokenizer"),c(UP,"href","/docs/transformers/pr_17787/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(JP,"href","/docs/transformers/pr_17787/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(YP,"href","/docs/transformers/pr_17787/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(KP,"href","/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(ZP,"href","/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(eB,"href","/docs/transformers/pr_17787/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(oB,"href","/docs/transformers/pr_17787/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(rB,"href","/docs/transformers/pr_17787/en/model_doc/electra#transformers.ElectraTokenizer"),c(tB,"href","/docs/transformers/pr_17787/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(aB,"href","/docs/transformers/pr_17787/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(nB,"href","/docs/transformers/pr_17787/en/model_doc/fnet#transformers.FNetTokenizer"),c(sB,"href","/docs/transformers/pr_17787/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(lB,"href","/docs/transformers/pr_17787/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(iB,"href","/docs/transformers/pr_17787/en/model_doc/funnel#transformers.FunnelTokenizer"),c(dB,"href","/docs/transformers/pr_17787/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(cB,"href","/docs/transformers/pr_17787/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(fB,"href","/docs/transformers/pr_17787/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(mB,"href","/docs/transformers/pr_17787/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(gB,"href","/docs/transformers/pr_17787/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(hB,"href","/docs/transformers/pr_17787/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(pB,"href","/docs/transformers/pr_17787/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(_B,"href","/docs/transformers/pr_17787/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(uB,"href","/docs/transformers/pr_17787/en/model_doc/herbert#transformers.HerbertTokenizer"),c(bB,"href","/docs/transformers/pr_17787/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(vB,"href","/docs/transformers/pr_17787/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(FB,"href","/docs/transformers/pr_17787/en/model_doc/roberta#transformers.RobertaTokenizer"),c(TB,"href","/docs/transformers/pr_17787/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(MB,"href","/docs/transformers/pr_17787/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(EB,"href","/docs/transformers/pr_17787/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(CB,"href","/docs/transformers/pr_17787/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(wB,"href","/docs/transformers/pr_17787/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(AB,"href","/docs/transformers/pr_17787/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(LB,"href","/docs/transformers/pr_17787/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(yB,"href","/docs/transformers/pr_17787/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(xB,"href","/docs/transformers/pr_17787/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c($B,"href","/docs/transformers/pr_17787/en/model_doc/led#transformers.LEDTokenizer"),c(kB,"href","/docs/transformers/pr_17787/en/model_doc/led#transformers.LEDTokenizerFast"),c(SB,"href","/docs/transformers/pr_17787/en/model_doc/longformer#transformers.LongformerTokenizer"),c(RB,"href","/docs/transformers/pr_17787/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(PB,"href","/docs/transformers/pr_17787/en/model_doc/t5#transformers.T5Tokenizer"),c(BB,"href","/docs/transformers/pr_17787/en/model_doc/t5#transformers.T5TokenizerFast"),c(IB,"href","/docs/transformers/pr_17787/en/model_doc/luke#transformers.LukeTokenizer"),c(NB,"href","/docs/transformers/pr_17787/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(qB,"href","/docs/transformers/pr_17787/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(jB,"href","/docs/transformers/pr_17787/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(DB,"href","/docs/transformers/pr_17787/en/model_doc/marian#transformers.MarianTokenizer"),c(GB,"href","/docs/transformers/pr_17787/en/model_doc/mbart#transformers.MBartTokenizer"),c(OB,"href","/docs/transformers/pr_17787/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(VB,"href","/docs/transformers/pr_17787/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(XB,"href","/docs/transformers/pr_17787/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(zB,"href","/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertTokenizer"),c(QB,"href","/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertTokenizerFast"),c(WB,"href","/docs/transformers/pr_17787/en/model_doc/mluke#transformers.MLukeTokenizer"),c(HB,"href","/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(UB,"href","/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(JB,"href","/docs/transformers/pr_17787/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(YB,"href","/docs/transformers/pr_17787/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(KB,"href","/docs/transformers/pr_17787/en/model_doc/t5#transformers.T5Tokenizer"),c(ZB,"href","/docs/transformers/pr_17787/en/model_doc/t5#transformers.T5TokenizerFast"),c(eI,"href","/docs/transformers/pr_17787/en/model_doc/mvp#transformers.MvpTokenizer"),c(oI,"href","/docs/transformers/pr_17787/en/model_doc/mvp#transformers.MvpTokenizerFast"),c(rI,"href","/docs/transformers/pr_17787/en/model_doc/albert#transformers.AlbertTokenizer"),c(tI,"href","/docs/transformers/pr_17787/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(aI,"href","/docs/transformers/pr_17787/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(nI,"href","/docs/transformers/pr_17787/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(sI,"href","/docs/transformers/pr_17787/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(lI,"href","/docs/transformers/pr_17787/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(iI,"href","/docs/transformers/pr_17787/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(dI,"href","/docs/transformers/pr_17787/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(cI,"href","/docs/transformers/pr_17787/en/model_doc/phobert#transformers.PhobertTokenizer"),c(fI,"href","/docs/transformers/pr_17787/en/model_doc/plbart#transformers.PLBartTokenizer"),c(mI,"href","/docs/transformers/pr_17787/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(gI,"href","/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertTokenizer"),c(hI,"href","/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertTokenizerFast"),c(pI,"href","/docs/transformers/pr_17787/en/model_doc/rag#transformers.RagTokenizer"),c(_I,"href","/docs/transformers/pr_17787/en/model_doc/realm#transformers.RealmTokenizer"),c(uI,"href","/docs/transformers/pr_17787/en/model_doc/realm#transformers.RealmTokenizerFast"),c(bI,"href","/docs/transformers/pr_17787/en/model_doc/reformer#transformers.ReformerTokenizer"),c(vI,"href","/docs/transformers/pr_17787/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(FI,"href","/docs/transformers/pr_17787/en/model_doc/rembert#transformers.RemBertTokenizer"),c(TI,"href","/docs/transformers/pr_17787/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(MI,"href","/docs/transformers/pr_17787/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(EI,"href","/docs/transformers/pr_17787/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(CI,"href","/docs/transformers/pr_17787/en/model_doc/roberta#transformers.RobertaTokenizer"),c(wI,"href","/docs/transformers/pr_17787/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(AI,"href","/docs/transformers/pr_17787/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(LI,"href","/docs/transformers/pr_17787/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(yI,"href","/docs/transformers/pr_17787/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(xI,"href","/docs/transformers/pr_17787/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c($I,"href","/docs/transformers/pr_17787/en/model_doc/splinter#transformers.SplinterTokenizer"),c(kI,"href","/docs/transformers/pr_17787/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(SI,"href","/docs/transformers/pr_17787/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(RI,"href","/docs/transformers/pr_17787/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(PI,"href","/docs/transformers/pr_17787/en/model_doc/t5#transformers.T5Tokenizer"),c(BI,"href","/docs/transformers/pr_17787/en/model_doc/t5#transformers.T5TokenizerFast"),c(II,"href","/docs/transformers/pr_17787/en/model_doc/tapas#transformers.TapasTokenizer"),c(NI,"href","/docs/transformers/pr_17787/en/model_doc/tapex#transformers.TapexTokenizer"),c(qI,"href","/docs/transformers/pr_17787/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(jI,"href","/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertTokenizer"),c(DI,"href","/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertTokenizerFast"),c(GI,"href","/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertTokenizer"),c(OI,"href","/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertTokenizerFast"),c(VI,"href","/docs/transformers/pr_17787/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(XI,"href","/docs/transformers/pr_17787/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(zI,"href","/docs/transformers/pr_17787/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(QI,"href","/docs/transformers/pr_17787/en/model_doc/xglm#transformers.XGLMTokenizer"),c(WI,"href","/docs/transformers/pr_17787/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(HI,"href","/docs/transformers/pr_17787/en/model_doc/xlm#transformers.XLMTokenizer"),c(UI,"href","/docs/transformers/pr_17787/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(JI,"href","/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(YI,"href","/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(KI,"href","/docs/transformers/pr_17787/en/model_doc/roberta#transformers.RobertaTokenizer"),c(ZI,"href","/docs/transformers/pr_17787/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(eN,"href","/docs/transformers/pr_17787/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(oN,"href","/docs/transformers/pr_17787/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(rN,"href","/docs/transformers/pr_17787/en/model_doc/albert#transformers.AlbertTokenizer"),c(tN,"href","/docs/transformers/pr_17787/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ch,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wh,"id","transformers.AutoFeatureExtractor"),c(wh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wh,"href","#transformers.AutoFeatureExtractor"),c(Si,"class","relative group"),c(aN,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(nN,"href","/docs/transformers/pr_17787/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(sN,"href","/docs/transformers/pr_17787/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(lN,"href","/docs/transformers/pr_17787/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(iN,"href","/docs/transformers/pr_17787/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(dN,"href","/docs/transformers/pr_17787/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(cN,"href","/docs/transformers/pr_17787/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(fN,"href","/docs/transformers/pr_17787/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(mN,"href","/docs/transformers/pr_17787/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(gN,"href","/docs/transformers/pr_17787/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(hN,"href","/docs/transformers/pr_17787/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(pN,"href","/docs/transformers/pr_17787/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(_N,"href","/docs/transformers/pr_17787/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(uN,"href","/docs/transformers/pr_17787/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(bN,"href","/docs/transformers/pr_17787/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(vN,"href","/docs/transformers/pr_17787/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(FN,"href","/docs/transformers/pr_17787/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(TN,"href","/docs/transformers/pr_17787/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(MN,"href","/docs/transformers/pr_17787/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(EN,"href","/docs/transformers/pr_17787/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(CN,"href","/docs/transformers/pr_17787/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(wN,"href","/docs/transformers/pr_17787/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(AN,"href","/docs/transformers/pr_17787/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(LN,"href","/docs/transformers/pr_17787/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(yN,"href","/docs/transformers/pr_17787/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(xN,"href","/docs/transformers/pr_17787/en/model_doc/vit#transformers.ViTFeatureExtractor"),c($N,"href","/docs/transformers/pr_17787/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(kN,"href","/docs/transformers/pr_17787/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(SN,"href","/docs/transformers/pr_17787/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(RN,"href","/docs/transformers/pr_17787/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(PN,"href","/docs/transformers/pr_17787/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(BN,"href","/docs/transformers/pr_17787/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(IN,"href","/docs/transformers/pr_17787/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lp,"id","transformers.AutoProcessor"),c(lp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lp,"href","#transformers.AutoProcessor"),c(Ri,"class","relative group"),c(NN,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(qN,"href","/docs/transformers/pr_17787/en/model_doc/clip#transformers.CLIPProcessor"),c(jN,"href","/docs/transformers/pr_17787/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(DN,"href","/docs/transformers/pr_17787/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(GN,"href","/docs/transformers/pr_17787/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(ON,"href","/docs/transformers/pr_17787/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(VN,"href","/docs/transformers/pr_17787/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(XN,"href","/docs/transformers/pr_17787/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(zN,"href","/docs/transformers/pr_17787/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(QN,"href","/docs/transformers/pr_17787/en/model_doc/trocr#transformers.TrOCRProcessor"),c(WN,"href","/docs/transformers/pr_17787/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(HN,"href","/docs/transformers/pr_17787/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(UN,"href","/docs/transformers/pr_17787/en/model_doc/vilt#transformers.ViltProcessor"),c(JN,"href","/docs/transformers/pr_17787/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(YN,"href","/docs/transformers/pr_17787/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(KN,"href","/docs/transformers/pr_17787/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(ZN,"href","/docs/transformers/pr_17787/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yp,"id","transformers.AutoModel"),c(yp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yp,"href","#transformers.AutoModel"),c(Bi,"class","relative group"),c(eq,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oq,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rq,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tq,"href","/docs/transformers/pr_17787/en/model_doc/albert#transformers.AlbertModel"),c(aq,"href","/docs/transformers/pr_17787/en/model_doc/bart#transformers.BartModel"),c(nq,"href","/docs/transformers/pr_17787/en/model_doc/beit#transformers.BeitModel"),c(sq,"href","/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertModel"),c(lq,"href","/docs/transformers/pr_17787/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(iq,"href","/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.BigBirdModel"),c(dq,"href","/docs/transformers/pr_17787/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(cq,"href","/docs/transformers/pr_17787/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(fq,"href","/docs/transformers/pr_17787/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(mq,"href","/docs/transformers/pr_17787/en/model_doc/bloom#transformers.BloomModel"),c(gq,"href","/docs/transformers/pr_17787/en/model_doc/camembert#transformers.CamembertModel"),c(hq,"href","/docs/transformers/pr_17787/en/model_doc/canine#transformers.CanineModel"),c(pq,"href","/docs/transformers/pr_17787/en/model_doc/clip#transformers.CLIPModel"),c(_q,"href","/docs/transformers/pr_17787/en/model_doc/convbert#transformers.ConvBertModel"),c(uq,"href","/docs/transformers/pr_17787/en/model_doc/convnext#transformers.ConvNextModel"),c(bq,"href","/docs/transformers/pr_17787/en/model_doc/ctrl#transformers.CTRLModel"),c(vq,"href","/docs/transformers/pr_17787/en/model_doc/cvt#transformers.CvtModel"),c(Fq,"href","/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(Tq,"href","/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(Mq,"href","/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(Eq,"href","/docs/transformers/pr_17787/en/model_doc/deberta#transformers.DebertaModel"),c(Cq,"href","/docs/transformers/pr_17787/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(wq,"href","/docs/transformers/pr_17787/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(Aq,"href","/docs/transformers/pr_17787/en/model_doc/deit#transformers.DeiTModel"),c(Lq,"href","/docs/transformers/pr_17787/en/model_doc/detr#transformers.DetrModel"),c(yq,"href","/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.DistilBertModel"),c(xq,"href","/docs/transformers/pr_17787/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c($q,"href","/docs/transformers/pr_17787/en/model_doc/dpt#transformers.DPTModel"),c(kq,"href","/docs/transformers/pr_17787/en/model_doc/electra#transformers.ElectraModel"),c(Sq,"href","/docs/transformers/pr_17787/en/model_doc/flaubert#transformers.FlaubertModel"),c(Rq,"href","/docs/transformers/pr_17787/en/model_doc/flava#transformers.FlavaModel"),c(Pq,"href","/docs/transformers/pr_17787/en/model_doc/fnet#transformers.FNetModel"),c(Bq,"href","/docs/transformers/pr_17787/en/model_doc/fsmt#transformers.FSMTModel"),c(Iq,"href","/docs/transformers/pr_17787/en/model_doc/funnel#transformers.FunnelModel"),c(Nq,"href","/docs/transformers/pr_17787/en/model_doc/funnel#transformers.FunnelBaseModel"),c(qq,"href","/docs/transformers/pr_17787/en/model_doc/glpn#transformers.GLPNModel"),c(jq,"href","/docs/transformers/pr_17787/en/model_doc/gpt2#transformers.GPT2Model"),c(Dq,"href","/docs/transformers/pr_17787/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(Gq,"href","/docs/transformers/pr_17787/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(Oq,"href","/docs/transformers/pr_17787/en/model_doc/gptj#transformers.GPTJModel"),c(Vq,"href","/docs/transformers/pr_17787/en/model_doc/hubert#transformers.HubertModel"),c(Xq,"href","/docs/transformers/pr_17787/en/model_doc/ibert#transformers.IBertModel"),c(zq,"href","/docs/transformers/pr_17787/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(Qq,"href","/docs/transformers/pr_17787/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(Wq,"href","/docs/transformers/pr_17787/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(Hq,"href","/docs/transformers/pr_17787/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(Uq,"href","/docs/transformers/pr_17787/en/model_doc/led#transformers.LEDModel"),c(Jq,"href","/docs/transformers/pr_17787/en/model_doc/levit#transformers.LevitModel"),c(Yq,"href","/docs/transformers/pr_17787/en/model_doc/longformer#transformers.LongformerModel"),c(Kq,"href","/docs/transformers/pr_17787/en/model_doc/longt5#transformers.LongT5Model"),c(Zq,"href","/docs/transformers/pr_17787/en/model_doc/luke#transformers.LukeModel"),c(ej,"href","/docs/transformers/pr_17787/en/model_doc/lxmert#transformers.LxmertModel"),c(oj,"href","/docs/transformers/pr_17787/en/model_doc/m2m_100#transformers.M2M100Model"),c(rj,"href","/docs/transformers/pr_17787/en/model_doc/marian#transformers.MarianModel"),c(tj,"href","/docs/transformers/pr_17787/en/model_doc/maskformer#transformers.MaskFormerModel"),c(aj,"href","/docs/transformers/pr_17787/en/model_doc/mbart#transformers.MBartModel"),c(nj,"href","/docs/transformers/pr_17787/en/model_doc/mctct#transformers.MCTCTModel"),c(sj,"href","/docs/transformers/pr_17787/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(lj,"href","/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.MobileBertModel"),c(ij,"href","/docs/transformers/pr_17787/en/model_doc/mpnet#transformers.MPNetModel"),c(dj,"href","/docs/transformers/pr_17787/en/model_doc/mt5#transformers.MT5Model"),c(cj,"href","/docs/transformers/pr_17787/en/model_doc/mvp#transformers.MvpModel"),c(fj,"href","/docs/transformers/pr_17787/en/model_doc/nystromformer#transformers.NystromformerModel"),c(mj,"href","/docs/transformers/pr_17787/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(gj,"href","/docs/transformers/pr_17787/en/model_doc/opt#transformers.OPTModel"),c(hj,"href","/docs/transformers/pr_17787/en/model_doc/pegasus#transformers.PegasusModel"),c(pj,"href","/docs/transformers/pr_17787/en/model_doc/perceiver#transformers.PerceiverModel"),c(_j,"href","/docs/transformers/pr_17787/en/model_doc/plbart#transformers.PLBartModel"),c(uj,"href","/docs/transformers/pr_17787/en/model_doc/poolformer#transformers.PoolFormerModel"),c(bj,"href","/docs/transformers/pr_17787/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(vj,"href","/docs/transformers/pr_17787/en/model_doc/qdqbert#transformers.QDQBertModel"),c(Fj,"href","/docs/transformers/pr_17787/en/model_doc/reformer#transformers.ReformerModel"),c(Tj,"href","/docs/transformers/pr_17787/en/model_doc/regnet#transformers.RegNetModel"),c(Mj,"href","/docs/transformers/pr_17787/en/model_doc/rembert#transformers.RemBertModel"),c(Ej,"href","/docs/transformers/pr_17787/en/model_doc/resnet#transformers.ResNetModel"),c(Cj,"href","/docs/transformers/pr_17787/en/model_doc/retribert#transformers.RetriBertModel"),c(wj,"href","/docs/transformers/pr_17787/en/model_doc/roberta#transformers.RobertaModel"),c(Aj,"href","/docs/transformers/pr_17787/en/model_doc/roformer#transformers.RoFormerModel"),c(Lj,"href","/docs/transformers/pr_17787/en/model_doc/segformer#transformers.SegformerModel"),c(yj,"href","/docs/transformers/pr_17787/en/model_doc/sew#transformers.SEWModel"),c(xj,"href","/docs/transformers/pr_17787/en/model_doc/sew-d#transformers.SEWDModel"),c($j,"href","/docs/transformers/pr_17787/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(kj,"href","/docs/transformers/pr_17787/en/model_doc/splinter#transformers.SplinterModel"),c(Sj,"href","/docs/transformers/pr_17787/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(Rj,"href","/docs/transformers/pr_17787/en/model_doc/swin#transformers.SwinModel"),c(Pj,"href","/docs/transformers/pr_17787/en/model_doc/t5#transformers.T5Model"),c(Bj,"href","/docs/transformers/pr_17787/en/model_doc/tapas#transformers.TapasModel"),c(Ij,"href","/docs/transformers/pr_17787/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(Nj,"href","/docs/transformers/pr_17787/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(qj,"href","/docs/transformers/pr_17787/en/model_doc/unispeech#transformers.UniSpeechModel"),c(jj,"href","/docs/transformers/pr_17787/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(Dj,"href","/docs/transformers/pr_17787/en/model_doc/van#transformers.VanModel"),c(Gj,"href","/docs/transformers/pr_17787/en/model_doc/vilt#transformers.ViltModel"),c(Oj,"href","/docs/transformers/pr_17787/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(Vj,"href","/docs/transformers/pr_17787/en/model_doc/visual_bert#transformers.VisualBertModel"),c(Xj,"href","/docs/transformers/pr_17787/en/model_doc/vit#transformers.ViTModel"),c(zj,"href","/docs/transformers/pr_17787/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(Qj,"href","/docs/transformers/pr_17787/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(Wj,"href","/docs/transformers/pr_17787/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(Hj,"href","/docs/transformers/pr_17787/en/model_doc/wavlm#transformers.WavLMModel"),c(Uj,"href","/docs/transformers/pr_17787/en/model_doc/xglm#transformers.XGLMModel"),c(Jj,"href","/docs/transformers/pr_17787/en/model_doc/xlm#transformers.XLMModel"),c(Yj,"href","/docs/transformers/pr_17787/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(Kj,"href","/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(Zj,"href","/docs/transformers/pr_17787/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(eD,"href","/docs/transformers/pr_17787/en/model_doc/xlnet#transformers.XLNetModel"),c(oD,"href","/docs/transformers/pr_17787/en/model_doc/yolos#transformers.YolosModel"),c(rD,"href","/docs/transformers/pr_17787/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($u,"id","transformers.AutoModelForPreTraining"),c($u,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($u,"href","#transformers.AutoModelForPreTraining"),c(qi,"class","relative group"),c(tD,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aD,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nD,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sD,"href","/docs/transformers/pr_17787/en/model_doc/albert#transformers.AlbertForPreTraining"),c(lD,"href","/docs/transformers/pr_17787/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(iD,"href","/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertForPreTraining"),c(dD,"href","/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(cD,"href","/docs/transformers/pr_17787/en/model_doc/bloom#transformers.BloomForCausalLM"),c(fD,"href","/docs/transformers/pr_17787/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(mD,"href","/docs/transformers/pr_17787/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(gD,"href","/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(hD,"href","/docs/transformers/pr_17787/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(pD,"href","/docs/transformers/pr_17787/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(_D,"href","/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(uD,"href","/docs/transformers/pr_17787/en/model_doc/electra#transformers.ElectraForPreTraining"),c(bD,"href","/docs/transformers/pr_17787/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(vD,"href","/docs/transformers/pr_17787/en/model_doc/flava#transformers.FlavaForPreTraining"),c(FD,"href","/docs/transformers/pr_17787/en/model_doc/fnet#transformers.FNetForPreTraining"),c(TD,"href","/docs/transformers/pr_17787/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(MD,"href","/docs/transformers/pr_17787/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(ED,"href","/docs/transformers/pr_17787/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(CD,"href","/docs/transformers/pr_17787/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(wD,"href","/docs/transformers/pr_17787/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(AD,"href","/docs/transformers/pr_17787/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(LD,"href","/docs/transformers/pr_17787/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(yD,"href","/docs/transformers/pr_17787/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(xD,"href","/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c($D,"href","/docs/transformers/pr_17787/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(kD,"href","/docs/transformers/pr_17787/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(SD,"href","/docs/transformers/pr_17787/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(RD,"href","/docs/transformers/pr_17787/en/model_doc/retribert#transformers.RetriBertModel"),c(PD,"href","/docs/transformers/pr_17787/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(BD,"href","/docs/transformers/pr_17787/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(ID,"href","/docs/transformers/pr_17787/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(ND,"href","/docs/transformers/pr_17787/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(qD,"href","/docs/transformers/pr_17787/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(jD,"href","/docs/transformers/pr_17787/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(DD,"href","/docs/transformers/pr_17787/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(GD,"href","/docs/transformers/pr_17787/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(OD,"href","/docs/transformers/pr_17787/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(VD,"href","/docs/transformers/pr_17787/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(XD,"href","/docs/transformers/pr_17787/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(zD,"href","/docs/transformers/pr_17787/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(QD,"href","/docs/transformers/pr_17787/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(WD,"href","/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(HD,"href","/docs/transformers/pr_17787/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(UD,"href","/docs/transformers/pr_17787/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(C7,"id","transformers.AutoModelForCausalLM"),c(C7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C7,"href","#transformers.AutoModelForCausalLM"),c(Gi,"class","relative group"),c(JD,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YD,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KD,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZD,"href","/docs/transformers/pr_17787/en/model_doc/bart#transformers.BartForCausalLM"),c(eG,"href","/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertLMHeadModel"),c(oG,"href","/docs/transformers/pr_17787/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(rG,"href","/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(tG,"href","/docs/transformers/pr_17787/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(aG,"href","/docs/transformers/pr_17787/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(nG,"href","/docs/transformers/pr_17787/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(sG,"href","/docs/transformers/pr_17787/en/model_doc/bloom#transformers.BloomForCausalLM"),c(lG,"href","/docs/transformers/pr_17787/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(iG,"href","/docs/transformers/pr_17787/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(dG,"href","/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(cG,"href","/docs/transformers/pr_17787/en/model_doc/electra#transformers.ElectraForCausalLM"),c(fG,"href","/docs/transformers/pr_17787/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(mG,"href","/docs/transformers/pr_17787/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(gG,"href","/docs/transformers/pr_17787/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(hG,"href","/docs/transformers/pr_17787/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(pG,"href","/docs/transformers/pr_17787/en/model_doc/marian#transformers.MarianForCausalLM"),c(_G,"href","/docs/transformers/pr_17787/en/model_doc/mbart#transformers.MBartForCausalLM"),c(uG,"href","/docs/transformers/pr_17787/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(bG,"href","/docs/transformers/pr_17787/en/model_doc/mvp#transformers.MvpForCausalLM"),c(vG,"href","/docs/transformers/pr_17787/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(FG,"href","/docs/transformers/pr_17787/en/model_doc/opt#transformers.OPTForCausalLM"),c(TG,"href","/docs/transformers/pr_17787/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(MG,"href","/docs/transformers/pr_17787/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(EG,"href","/docs/transformers/pr_17787/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(CG,"href","/docs/transformers/pr_17787/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(wG,"href","/docs/transformers/pr_17787/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(AG,"href","/docs/transformers/pr_17787/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(LG,"href","/docs/transformers/pr_17787/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(yG,"href","/docs/transformers/pr_17787/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(xG,"href","/docs/transformers/pr_17787/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c($G,"href","/docs/transformers/pr_17787/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(kG,"href","/docs/transformers/pr_17787/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(SG,"href","/docs/transformers/pr_17787/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(RG,"href","/docs/transformers/pr_17787/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(PG,"href","/docs/transformers/pr_17787/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(BG,"href","/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(IG,"href","/docs/transformers/pr_17787/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(NG,"href","/docs/transformers/pr_17787/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(g1,"id","transformers.AutoModelForMaskedLM"),c(g1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(g1,"href","#transformers.AutoModelForMaskedLM"),c(Xi,"class","relative group"),c(qG,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jG,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DG,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GG,"href","/docs/transformers/pr_17787/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(OG,"href","/docs/transformers/pr_17787/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(VG,"href","/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertForMaskedLM"),c(XG,"href","/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(zG,"href","/docs/transformers/pr_17787/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(QG,"href","/docs/transformers/pr_17787/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(WG,"href","/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(HG,"href","/docs/transformers/pr_17787/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(UG,"href","/docs/transformers/pr_17787/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(JG,"href","/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(YG,"href","/docs/transformers/pr_17787/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(KG,"href","/docs/transformers/pr_17787/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(ZG,"href","/docs/transformers/pr_17787/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(eO,"href","/docs/transformers/pr_17787/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(oO,"href","/docs/transformers/pr_17787/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(rO,"href","/docs/transformers/pr_17787/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(tO,"href","/docs/transformers/pr_17787/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(aO,"href","/docs/transformers/pr_17787/en/model_doc/luke#transformers.LukeForMaskedLM"),c(nO,"href","/docs/transformers/pr_17787/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(sO,"href","/docs/transformers/pr_17787/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(lO,"href","/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(iO,"href","/docs/transformers/pr_17787/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(dO,"href","/docs/transformers/pr_17787/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(cO,"href","/docs/transformers/pr_17787/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(fO,"href","/docs/transformers/pr_17787/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(mO,"href","/docs/transformers/pr_17787/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(gO,"href","/docs/transformers/pr_17787/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(hO,"href","/docs/transformers/pr_17787/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(pO,"href","/docs/transformers/pr_17787/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(_O,"href","/docs/transformers/pr_17787/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(uO,"href","/docs/transformers/pr_17787/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(bO,"href","/docs/transformers/pr_17787/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(vO,"href","/docs/transformers/pr_17787/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(FO,"href","/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(TO,"href","/docs/transformers/pr_17787/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(MO,"href","/docs/transformers/pr_17787/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e2,"id","transformers.AutoModelForSeq2SeqLM"),c(e2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e2,"href","#transformers.AutoModelForSeq2SeqLM"),c(Wi,"class","relative group"),c(EO,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CO,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wO,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AO,"href","/docs/transformers/pr_17787/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(LO,"href","/docs/transformers/pr_17787/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(yO,"href","/docs/transformers/pr_17787/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(xO,"href","/docs/transformers/pr_17787/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c($O,"href","/docs/transformers/pr_17787/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(kO,"href","/docs/transformers/pr_17787/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(SO,"href","/docs/transformers/pr_17787/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(RO,"href","/docs/transformers/pr_17787/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(PO,"href","/docs/transformers/pr_17787/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(BO,"href","/docs/transformers/pr_17787/en/model_doc/marian#transformers.MarianMTModel"),c(IO,"href","/docs/transformers/pr_17787/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(NO,"href","/docs/transformers/pr_17787/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(qO,"href","/docs/transformers/pr_17787/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(jO,"href","/docs/transformers/pr_17787/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(DO,"href","/docs/transformers/pr_17787/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(GO,"href","/docs/transformers/pr_17787/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(OO,"href","/docs/transformers/pr_17787/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(VO,"href","/docs/transformers/pr_17787/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M2,"id","transformers.AutoModelForSequenceClassification"),c(M2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M2,"href","#transformers.AutoModelForSequenceClassification"),c(Ji,"class","relative group"),c(XO,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zO,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QO,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WO,"href","/docs/transformers/pr_17787/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(HO,"href","/docs/transformers/pr_17787/en/model_doc/bart#transformers.BartForSequenceClassification"),c(UO,"href","/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertForSequenceClassification"),c(JO,"href","/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(YO,"href","/docs/transformers/pr_17787/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(KO,"href","/docs/transformers/pr_17787/en/model_doc/bloom#transformers.BloomForSequenceClassification"),c(ZO,"href","/docs/transformers/pr_17787/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(eV,"href","/docs/transformers/pr_17787/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(oV,"href","/docs/transformers/pr_17787/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(rV,"href","/docs/transformers/pr_17787/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(tV,"href","/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(aV,"href","/docs/transformers/pr_17787/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(nV,"href","/docs/transformers/pr_17787/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(sV,"href","/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(lV,"href","/docs/transformers/pr_17787/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(iV,"href","/docs/transformers/pr_17787/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(dV,"href","/docs/transformers/pr_17787/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(cV,"href","/docs/transformers/pr_17787/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(fV,"href","/docs/transformers/pr_17787/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(mV,"href","/docs/transformers/pr_17787/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(gV,"href","/docs/transformers/pr_17787/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(hV,"href","/docs/transformers/pr_17787/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(pV,"href","/docs/transformers/pr_17787/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(_V,"href","/docs/transformers/pr_17787/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(uV,"href","/docs/transformers/pr_17787/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(bV,"href","/docs/transformers/pr_17787/en/model_doc/led#transformers.LEDForSequenceClassification"),c(vV,"href","/docs/transformers/pr_17787/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(FV,"href","/docs/transformers/pr_17787/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(TV,"href","/docs/transformers/pr_17787/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(MV,"href","/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(EV,"href","/docs/transformers/pr_17787/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(CV,"href","/docs/transformers/pr_17787/en/model_doc/mvp#transformers.MvpForSequenceClassification"),c(wV,"href","/docs/transformers/pr_17787/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(AV,"href","/docs/transformers/pr_17787/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(LV,"href","/docs/transformers/pr_17787/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(yV,"href","/docs/transformers/pr_17787/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(xV,"href","/docs/transformers/pr_17787/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c($V,"href","/docs/transformers/pr_17787/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(kV,"href","/docs/transformers/pr_17787/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(SV,"href","/docs/transformers/pr_17787/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(RV,"href","/docs/transformers/pr_17787/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(PV,"href","/docs/transformers/pr_17787/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(BV,"href","/docs/transformers/pr_17787/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(IV,"href","/docs/transformers/pr_17787/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(NV,"href","/docs/transformers/pr_17787/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(qV,"href","/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(jV,"href","/docs/transformers/pr_17787/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(DV,"href","/docs/transformers/pr_17787/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(GV,"href","/docs/transformers/pr_17787/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tb,"id","transformers.AutoModelForMultipleChoice"),c(Tb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tb,"href","#transformers.AutoModelForMultipleChoice"),c(Zi,"class","relative group"),c(OV,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VV,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XV,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zV,"href","/docs/transformers/pr_17787/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(QV,"href","/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertForMultipleChoice"),c(WV,"href","/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(HV,"href","/docs/transformers/pr_17787/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(UV,"href","/docs/transformers/pr_17787/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(JV,"href","/docs/transformers/pr_17787/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(YV,"href","/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(KV,"href","/docs/transformers/pr_17787/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(ZV,"href","/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(eX,"href","/docs/transformers/pr_17787/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(oX,"href","/docs/transformers/pr_17787/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(rX,"href","/docs/transformers/pr_17787/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(tX,"href","/docs/transformers/pr_17787/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(aX,"href","/docs/transformers/pr_17787/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(nX,"href","/docs/transformers/pr_17787/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(sX,"href","/docs/transformers/pr_17787/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(lX,"href","/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(iX,"href","/docs/transformers/pr_17787/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(dX,"href","/docs/transformers/pr_17787/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(cX,"href","/docs/transformers/pr_17787/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(fX,"href","/docs/transformers/pr_17787/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(mX,"href","/docs/transformers/pr_17787/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(gX,"href","/docs/transformers/pr_17787/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(hX,"href","/docs/transformers/pr_17787/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(pX,"href","/docs/transformers/pr_17787/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(_X,"href","/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(uX,"href","/docs/transformers/pr_17787/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(bX,"href","/docs/transformers/pr_17787/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(vX,"href","/docs/transformers/pr_17787/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ev,"id","transformers.AutoModelForNextSentencePrediction"),c(ev,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ev,"href","#transformers.AutoModelForNextSentencePrediction"),c(rd,"class","relative group"),c(FX,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TX,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MX,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EX,"href","/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(CX,"href","/docs/transformers/pr_17787/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(wX,"href","/docs/transformers/pr_17787/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(AX,"href","/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(LX,"href","/docs/transformers/pr_17787/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dv,"id","transformers.AutoModelForTokenClassification"),c(dv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dv,"href","#transformers.AutoModelForTokenClassification"),c(nd,"class","relative group"),c(yX,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xX,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($X,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kX,"href","/docs/transformers/pr_17787/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(SX,"href","/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertForTokenClassification"),c(RX,"href","/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(PX,"href","/docs/transformers/pr_17787/en/model_doc/bloom#transformers.BloomForTokenClassification"),c(BX,"href","/docs/transformers/pr_17787/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(IX,"href","/docs/transformers/pr_17787/en/model_doc/canine#transformers.CanineForTokenClassification"),c(NX,"href","/docs/transformers/pr_17787/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(qX,"href","/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(jX,"href","/docs/transformers/pr_17787/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(DX,"href","/docs/transformers/pr_17787/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(GX,"href","/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(OX,"href","/docs/transformers/pr_17787/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(VX,"href","/docs/transformers/pr_17787/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(XX,"href","/docs/transformers/pr_17787/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(zX,"href","/docs/transformers/pr_17787/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(QX,"href","/docs/transformers/pr_17787/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(WX,"href","/docs/transformers/pr_17787/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(HX,"href","/docs/transformers/pr_17787/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(UX,"href","/docs/transformers/pr_17787/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(JX,"href","/docs/transformers/pr_17787/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(YX,"href","/docs/transformers/pr_17787/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(KX,"href","/docs/transformers/pr_17787/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(ZX,"href","/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(ez,"href","/docs/transformers/pr_17787/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(oz,"href","/docs/transformers/pr_17787/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(rz,"href","/docs/transformers/pr_17787/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(tz,"href","/docs/transformers/pr_17787/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(az,"href","/docs/transformers/pr_17787/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(nz,"href","/docs/transformers/pr_17787/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(sz,"href","/docs/transformers/pr_17787/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(lz,"href","/docs/transformers/pr_17787/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(iz,"href","/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(dz,"href","/docs/transformers/pr_17787/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(cz,"href","/docs/transformers/pr_17787/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(fz,"href","/docs/transformers/pr_17787/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hv,"id","transformers.AutoModelForQuestionAnswering"),c(Hv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Hv,"href","#transformers.AutoModelForQuestionAnswering"),c(id,"class","relative group"),c(mz,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gz,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hz,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pz,"href","/docs/transformers/pr_17787/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(_z,"href","/docs/transformers/pr_17787/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(uz,"href","/docs/transformers/pr_17787/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(bz,"href","/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(vz,"href","/docs/transformers/pr_17787/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(Fz,"href","/docs/transformers/pr_17787/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(Tz,"href","/docs/transformers/pr_17787/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(Mz,"href","/docs/transformers/pr_17787/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(Ez,"href","/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(Cz,"href","/docs/transformers/pr_17787/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(wz,"href","/docs/transformers/pr_17787/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(Az,"href","/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(Lz,"href","/docs/transformers/pr_17787/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(yz,"href","/docs/transformers/pr_17787/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(xz,"href","/docs/transformers/pr_17787/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c($z,"href","/docs/transformers/pr_17787/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(kz,"href","/docs/transformers/pr_17787/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(Sz,"href","/docs/transformers/pr_17787/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(Rz,"href","/docs/transformers/pr_17787/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(Pz,"href","/docs/transformers/pr_17787/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(Bz,"href","/docs/transformers/pr_17787/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(Iz,"href","/docs/transformers/pr_17787/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(Nz,"href","/docs/transformers/pr_17787/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(qz,"href","/docs/transformers/pr_17787/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(jz,"href","/docs/transformers/pr_17787/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(Dz,"href","/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(Gz,"href","/docs/transformers/pr_17787/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(Oz,"href","/docs/transformers/pr_17787/en/model_doc/mvp#transformers.MvpForQuestionAnswering"),c(Vz,"href","/docs/transformers/pr_17787/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(Xz,"href","/docs/transformers/pr_17787/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(zz,"href","/docs/transformers/pr_17787/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(Qz,"href","/docs/transformers/pr_17787/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(Wz,"href","/docs/transformers/pr_17787/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(Hz,"href","/docs/transformers/pr_17787/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(Uz,"href","/docs/transformers/pr_17787/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(Jz,"href","/docs/transformers/pr_17787/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(Yz,"href","/docs/transformers/pr_17787/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(Kz,"href","/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(Zz,"href","/docs/transformers/pr_17787/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(eQ,"href","/docs/transformers/pr_17787/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(oQ,"href","/docs/transformers/pr_17787/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jF,"id","transformers.AutoModelForTableQuestionAnswering"),c(jF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jF,"href","#transformers.AutoModelForTableQuestionAnswering"),c(fd,"class","relative group"),c(rQ,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tQ,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aQ,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nQ,"href","/docs/transformers/pr_17787/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XF,"id","transformers.AutoModelForImageClassification"),c(XF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XF,"href","#transformers.AutoModelForImageClassification"),c(hd,"class","relative group"),c(sQ,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lQ,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iQ,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dQ,"href","/docs/transformers/pr_17787/en/model_doc/beit#transformers.BeitForImageClassification"),c(cQ,"href","/docs/transformers/pr_17787/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(fQ,"href","/docs/transformers/pr_17787/en/model_doc/cvt#transformers.CvtForImageClassification"),c(mQ,"href","/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(gQ,"href","/docs/transformers/pr_17787/en/model_doc/deit#transformers.DeiTForImageClassification"),c(hQ,"href","/docs/transformers/pr_17787/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(pQ,"href","/docs/transformers/pr_17787/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(_Q,"href","/docs/transformers/pr_17787/en/model_doc/levit#transformers.LevitForImageClassification"),c(uQ,"href","/docs/transformers/pr_17787/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(bQ,"href","/docs/transformers/pr_17787/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(vQ,"href","/docs/transformers/pr_17787/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(FQ,"href","/docs/transformers/pr_17787/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(TQ,"href","/docs/transformers/pr_17787/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(MQ,"href","/docs/transformers/pr_17787/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(EQ,"href","/docs/transformers/pr_17787/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(CQ,"href","/docs/transformers/pr_17787/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(wQ,"href","/docs/transformers/pr_17787/en/model_doc/swin#transformers.SwinForImageClassification"),c(AQ,"href","/docs/transformers/pr_17787/en/model_doc/van#transformers.VanForImageClassification"),c(LQ,"href","/docs/transformers/pr_17787/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sT,"id","transformers.AutoModelForVision2Seq"),c(sT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sT,"href","#transformers.AutoModelForVision2Seq"),c(ud,"class","relative group"),c(yQ,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xQ,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($Q,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kQ,"href","/docs/transformers/pr_17787/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fT,"id","transformers.AutoModelForVisualQuestionAnswering"),c(fT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fT,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(Fd,"class","relative group"),c(SQ,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RQ,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PQ,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BQ,"href","/docs/transformers/pr_17787/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_T,"id","transformers.AutoModelForAudioClassification"),c(_T,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_T,"href","#transformers.AutoModelForAudioClassification"),c(Ed,"class","relative group"),c(IQ,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NQ,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qQ,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jQ,"href","/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(DQ,"href","/docs/transformers/pr_17787/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(GQ,"href","/docs/transformers/pr_17787/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(OQ,"href","/docs/transformers/pr_17787/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(VQ,"href","/docs/transformers/pr_17787/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(XQ,"href","/docs/transformers/pr_17787/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(zQ,"href","/docs/transformers/pr_17787/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(QQ,"href","/docs/transformers/pr_17787/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(WQ,"href","/docs/transformers/pr_17787/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xT,"id","transformers.AutoModelForAudioFrameClassification"),c(xT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xT,"href","#transformers.AutoModelForAudioFrameClassification"),c(Ad,"class","relative group"),c(HQ,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UQ,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JQ,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YQ,"href","/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(KQ,"href","/docs/transformers/pr_17787/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(ZQ,"href","/docs/transformers/pr_17787/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(eW,"href","/docs/transformers/pr_17787/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(oW,"href","/docs/transformers/pr_17787/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qT,"id","transformers.AutoModelForCTC"),c(qT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qT,"href","#transformers.AutoModelForCTC"),c(xd,"class","relative group"),c(rW,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tW,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aW,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nW,"href","/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(sW,"href","/docs/transformers/pr_17787/en/model_doc/hubert#transformers.HubertForCTC"),c(lW,"href","/docs/transformers/pr_17787/en/model_doc/mctct#transformers.MCTCTForCTC"),c(iW,"href","/docs/transformers/pr_17787/en/model_doc/sew#transformers.SEWForCTC"),c(dW,"href","/docs/transformers/pr_17787/en/model_doc/sew-d#transformers.SEWDForCTC"),c(cW,"href","/docs/transformers/pr_17787/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(fW,"href","/docs/transformers/pr_17787/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(mW,"href","/docs/transformers/pr_17787/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(gW,"href","/docs/transformers/pr_17787/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(hW,"href","/docs/transformers/pr_17787/en/model_doc/wavlm#transformers.WavLMForCTC"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KT,"id","transformers.AutoModelForSpeechSeq2Seq"),c(KT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(KT,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(Sd,"class","relative group"),c(pW,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_W,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uW,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bW,"href","/docs/transformers/pr_17787/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(vW,"href","/docs/transformers/pr_17787/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a8,"id","transformers.AutoModelForAudioXVector"),c(a8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a8,"href","#transformers.AutoModelForAudioXVector"),c(Bd,"class","relative group"),c(FW,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TW,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MW,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EW,"href","/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(CW,"href","/docs/transformers/pr_17787/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(wW,"href","/docs/transformers/pr_17787/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(AW,"href","/docs/transformers/pr_17787/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(LW,"href","/docs/transformers/pr_17787/en/model_doc/wavlm#transformers.WavLMForXVector"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(g8,"id","transformers.AutoModelForMaskedImageModeling"),c(g8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(g8,"href","#transformers.AutoModelForMaskedImageModeling"),c(qd,"class","relative group"),c(yW,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xW,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($W,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kW,"href","/docs/transformers/pr_17787/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(SW,"href","/docs/transformers/pr_17787/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(RW,"href","/docs/transformers/pr_17787/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(F8,"id","transformers.AutoModelForObjectDetection"),c(F8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(F8,"href","#transformers.AutoModelForObjectDetection"),c(Od,"class","relative group"),c(PW,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BW,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IW,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NW,"href","/docs/transformers/pr_17787/en/model_doc/detr#transformers.DetrForObjectDetection"),c(qW,"href","/docs/transformers/pr_17787/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A8,"id","transformers.AutoModelForImageSegmentation"),c(A8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A8,"href","#transformers.AutoModelForImageSegmentation"),c(zd,"class","relative group"),c(jW,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DW,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GW,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OW,"href","/docs/transformers/pr_17787/en/model_doc/detr#transformers.DetrForSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k8,"id","transformers.AutoModelForSemanticSegmentation"),c(k8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k8,"href","#transformers.AutoModelForSemanticSegmentation"),c(Hd,"class","relative group"),c(VW,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XW,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zW,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QW,"href","/docs/transformers/pr_17787/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(WW,"href","/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(HW,"href","/docs/transformers/pr_17787/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(UW,"href","/docs/transformers/pr_17787/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(j8,"id","transformers.AutoModelForInstanceSegmentation"),c(j8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(j8,"href","#transformers.AutoModelForInstanceSegmentation"),c(Yd,"class","relative group"),c(JW,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YW,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KW,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZW,"href","/docs/transformers/pr_17787/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(X8,"id","transformers.TFAutoModel"),c(X8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X8,"href","#transformers.TFAutoModel"),c(ec,"class","relative group"),c(eH,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oH,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rH,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tH,"href","/docs/transformers/pr_17787/en/model_doc/albert#transformers.TFAlbertModel"),c(aH,"href","/docs/transformers/pr_17787/en/model_doc/bart#transformers.TFBartModel"),c(nH,"href","/docs/transformers/pr_17787/en/model_doc/bert#transformers.TFBertModel"),c(sH,"href","/docs/transformers/pr_17787/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(lH,"href","/docs/transformers/pr_17787/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(iH,"href","/docs/transformers/pr_17787/en/model_doc/camembert#transformers.TFCamembertModel"),c(dH,"href","/docs/transformers/pr_17787/en/model_doc/clip#transformers.TFCLIPModel"),c(cH,"href","/docs/transformers/pr_17787/en/model_doc/convbert#transformers.TFConvBertModel"),c(fH,"href","/docs/transformers/pr_17787/en/model_doc/convnext#transformers.TFConvNextModel"),c(mH,"href","/docs/transformers/pr_17787/en/model_doc/ctrl#transformers.TFCTRLModel"),c(gH,"href","/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(hH,"href","/docs/transformers/pr_17787/en/model_doc/deberta#transformers.TFDebertaModel"),c(pH,"href","/docs/transformers/pr_17787/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(_H,"href","/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(uH,"href","/docs/transformers/pr_17787/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(bH,"href","/docs/transformers/pr_17787/en/model_doc/electra#transformers.TFElectraModel"),c(vH,"href","/docs/transformers/pr_17787/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(FH,"href","/docs/transformers/pr_17787/en/model_doc/funnel#transformers.TFFunnelModel"),c(TH,"href","/docs/transformers/pr_17787/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(MH,"href","/docs/transformers/pr_17787/en/model_doc/gpt2#transformers.TFGPT2Model"),c(EH,"href","/docs/transformers/pr_17787/en/model_doc/gptj#transformers.TFGPTJModel"),c(CH,"href","/docs/transformers/pr_17787/en/model_doc/hubert#transformers.TFHubertModel"),c(wH,"href","/docs/transformers/pr_17787/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(AH,"href","/docs/transformers/pr_17787/en/model_doc/led#transformers.TFLEDModel"),c(LH,"href","/docs/transformers/pr_17787/en/model_doc/longformer#transformers.TFLongformerModel"),c(yH,"href","/docs/transformers/pr_17787/en/model_doc/lxmert#transformers.TFLxmertModel"),c(xH,"href","/docs/transformers/pr_17787/en/model_doc/marian#transformers.TFMarianModel"),c($H,"href","/docs/transformers/pr_17787/en/model_doc/mbart#transformers.TFMBartModel"),c(kH,"href","/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(SH,"href","/docs/transformers/pr_17787/en/model_doc/mpnet#transformers.TFMPNetModel"),c(RH,"href","/docs/transformers/pr_17787/en/model_doc/mt5#transformers.TFMT5Model"),c(PH,"href","/docs/transformers/pr_17787/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(BH,"href","/docs/transformers/pr_17787/en/model_doc/opt#transformers.TFOPTModel"),c(IH,"href","/docs/transformers/pr_17787/en/model_doc/pegasus#transformers.TFPegasusModel"),c(NH,"href","/docs/transformers/pr_17787/en/model_doc/rembert#transformers.TFRemBertModel"),c(qH,"href","/docs/transformers/pr_17787/en/model_doc/roberta#transformers.TFRobertaModel"),c(jH,"href","/docs/transformers/pr_17787/en/model_doc/roformer#transformers.TFRoFormerModel"),c(DH,"href","/docs/transformers/pr_17787/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(GH,"href","/docs/transformers/pr_17787/en/model_doc/swin#transformers.TFSwinModel"),c(OH,"href","/docs/transformers/pr_17787/en/model_doc/t5#transformers.TFT5Model"),c(VH,"href","/docs/transformers/pr_17787/en/model_doc/tapas#transformers.TFTapasModel"),c(XH,"href","/docs/transformers/pr_17787/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(zH,"href","/docs/transformers/pr_17787/en/model_doc/vit#transformers.TFViTModel"),c(QH,"href","/docs/transformers/pr_17787/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(WH,"href","/docs/transformers/pr_17787/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(HH,"href","/docs/transformers/pr_17787/en/model_doc/xlm#transformers.TFXLMModel"),c(UH,"href","/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(JH,"href","/docs/transformers/pr_17787/en/model_doc/xlnet#transformers.TFXLNetModel"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jM,"id","transformers.TFAutoModelForPreTraining"),c(jM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jM,"href","#transformers.TFAutoModelForPreTraining"),c(tc,"class","relative group"),c(YH,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KH,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZH,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eU,"href","/docs/transformers/pr_17787/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(oU,"href","/docs/transformers/pr_17787/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(rU,"href","/docs/transformers/pr_17787/en/model_doc/bert#transformers.TFBertForPreTraining"),c(tU,"href","/docs/transformers/pr_17787/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(aU,"href","/docs/transformers/pr_17787/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(nU,"href","/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(sU,"href","/docs/transformers/pr_17787/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(lU,"href","/docs/transformers/pr_17787/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(iU,"href","/docs/transformers/pr_17787/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(dU,"href","/docs/transformers/pr_17787/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(cU,"href","/docs/transformers/pr_17787/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(fU,"href","/docs/transformers/pr_17787/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(mU,"href","/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(gU,"href","/docs/transformers/pr_17787/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(hU,"href","/docs/transformers/pr_17787/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(pU,"href","/docs/transformers/pr_17787/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(_U,"href","/docs/transformers/pr_17787/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(uU,"href","/docs/transformers/pr_17787/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(bU,"href","/docs/transformers/pr_17787/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(vU,"href","/docs/transformers/pr_17787/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(FU,"href","/docs/transformers/pr_17787/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(TU,"href","/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(MU,"href","/docs/transformers/pr_17787/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fE,"id","transformers.TFAutoModelForCausalLM"),c(fE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fE,"href","#transformers.TFAutoModelForCausalLM"),c(sc,"class","relative group"),c(EU,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CU,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wU,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AU,"href","/docs/transformers/pr_17787/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(LU,"href","/docs/transformers/pr_17787/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(yU,"href","/docs/transformers/pr_17787/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(xU,"href","/docs/transformers/pr_17787/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c($U,"href","/docs/transformers/pr_17787/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(kU,"href","/docs/transformers/pr_17787/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(SU,"href","/docs/transformers/pr_17787/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(RU,"href","/docs/transformers/pr_17787/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(PU,"href","/docs/transformers/pr_17787/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(BU,"href","/docs/transformers/pr_17787/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(IU,"href","/docs/transformers/pr_17787/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(NU,"href","/docs/transformers/pr_17787/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(qU,"href","/docs/transformers/pr_17787/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LE,"id","transformers.TFAutoModelForImageClassification"),c(LE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(LE,"href","#transformers.TFAutoModelForImageClassification"),c(dc,"class","relative group"),c(jU,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DU,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GU,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OU,"href","/docs/transformers/pr_17787/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(VU,"href","/docs/transformers/pr_17787/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(XU,"href","/docs/transformers/pr_17787/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(zU,"href","/docs/transformers/pr_17787/en/model_doc/vit#transformers.TFViTForImageClassification"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PE,"id","transformers.TFAutoModelForMaskedLM"),c(PE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PE,"href","#transformers.TFAutoModelForMaskedLM"),c(mc,"class","relative group"),c(QU,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WU,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HU,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UU,"href","/docs/transformers/pr_17787/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(JU,"href","/docs/transformers/pr_17787/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(YU,"href","/docs/transformers/pr_17787/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(KU,"href","/docs/transformers/pr_17787/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(ZU,"href","/docs/transformers/pr_17787/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(eJ,"href","/docs/transformers/pr_17787/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(oJ,"href","/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(rJ,"href","/docs/transformers/pr_17787/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(tJ,"href","/docs/transformers/pr_17787/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(aJ,"href","/docs/transformers/pr_17787/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(nJ,"href","/docs/transformers/pr_17787/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(sJ,"href","/docs/transformers/pr_17787/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(lJ,"href","/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(iJ,"href","/docs/transformers/pr_17787/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(dJ,"href","/docs/transformers/pr_17787/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(cJ,"href","/docs/transformers/pr_17787/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(fJ,"href","/docs/transformers/pr_17787/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(mJ,"href","/docs/transformers/pr_17787/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(gJ,"href","/docs/transformers/pr_17787/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(hJ,"href","/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t4,"id","transformers.TFAutoModelForSeq2SeqLM"),c(t4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t4,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(pc,"class","relative group"),c(pJ,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_J,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uJ,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bJ,"href","/docs/transformers/pr_17787/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(vJ,"href","/docs/transformers/pr_17787/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(FJ,"href","/docs/transformers/pr_17787/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(TJ,"href","/docs/transformers/pr_17787/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(MJ,"href","/docs/transformers/pr_17787/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(EJ,"href","/docs/transformers/pr_17787/en/model_doc/marian#transformers.TFMarianMTModel"),c(CJ,"href","/docs/transformers/pr_17787/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(wJ,"href","/docs/transformers/pr_17787/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(AJ,"href","/docs/transformers/pr_17787/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(LJ,"href","/docs/transformers/pr_17787/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_4,"id","transformers.TFAutoModelForSequenceClassification"),c(_4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_4,"href","#transformers.TFAutoModelForSequenceClassification"),c(bc,"class","relative group"),c(yJ,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xJ,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($J,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kJ,"href","/docs/transformers/pr_17787/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(SJ,"href","/docs/transformers/pr_17787/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(RJ,"href","/docs/transformers/pr_17787/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(PJ,"href","/docs/transformers/pr_17787/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(BJ,"href","/docs/transformers/pr_17787/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(IJ,"href","/docs/transformers/pr_17787/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(NJ,"href","/docs/transformers/pr_17787/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(qJ,"href","/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(jJ,"href","/docs/transformers/pr_17787/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(DJ,"href","/docs/transformers/pr_17787/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(GJ,"href","/docs/transformers/pr_17787/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(OJ,"href","/docs/transformers/pr_17787/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(VJ,"href","/docs/transformers/pr_17787/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(XJ,"href","/docs/transformers/pr_17787/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(zJ,"href","/docs/transformers/pr_17787/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(QJ,"href","/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(WJ,"href","/docs/transformers/pr_17787/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(HJ,"href","/docs/transformers/pr_17787/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(UJ,"href","/docs/transformers/pr_17787/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(JJ,"href","/docs/transformers/pr_17787/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(YJ,"href","/docs/transformers/pr_17787/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(KJ,"href","/docs/transformers/pr_17787/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(ZJ,"href","/docs/transformers/pr_17787/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(eY,"href","/docs/transformers/pr_17787/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(oY,"href","/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(rY,"href","/docs/transformers/pr_17787/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z4,"id","transformers.TFAutoModelForMultipleChoice"),c(z4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z4,"href","#transformers.TFAutoModelForMultipleChoice"),c(Tc,"class","relative group"),c(tY,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aY,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nY,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sY,"href","/docs/transformers/pr_17787/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(lY,"href","/docs/transformers/pr_17787/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(iY,"href","/docs/transformers/pr_17787/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(dY,"href","/docs/transformers/pr_17787/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(cY,"href","/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(fY,"href","/docs/transformers/pr_17787/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(mY,"href","/docs/transformers/pr_17787/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(gY,"href","/docs/transformers/pr_17787/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(hY,"href","/docs/transformers/pr_17787/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(pY,"href","/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(_Y,"href","/docs/transformers/pr_17787/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(uY,"href","/docs/transformers/pr_17787/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(bY,"href","/docs/transformers/pr_17787/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(vY,"href","/docs/transformers/pr_17787/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(FY,"href","/docs/transformers/pr_17787/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(TY,"href","/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(MY,"href","/docs/transformers/pr_17787/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fC,"id","transformers.TFAutoModelForNextSentencePrediction"),c(fC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fC,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(Cc,"class","relative group"),c(EY,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CY,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wY,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AY,"href","/docs/transformers/pr_17787/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(LY,"href","/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_C,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(_C,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_C,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(Lc,"class","relative group"),c(yY,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xY,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($Y,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kY,"href","/docs/transformers/pr_17787/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FC,"id","transformers.TFAutoModelForTokenClassification"),c(FC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(FC,"href","#transformers.TFAutoModelForTokenClassification"),c($c,"class","relative group"),c(SY,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RY,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PY,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BY,"href","/docs/transformers/pr_17787/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(IY,"href","/docs/transformers/pr_17787/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(NY,"href","/docs/transformers/pr_17787/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(qY,"href","/docs/transformers/pr_17787/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(jY,"href","/docs/transformers/pr_17787/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(DY,"href","/docs/transformers/pr_17787/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(GY,"href","/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(OY,"href","/docs/transformers/pr_17787/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(VY,"href","/docs/transformers/pr_17787/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(XY,"href","/docs/transformers/pr_17787/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(zY,"href","/docs/transformers/pr_17787/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(QY,"href","/docs/transformers/pr_17787/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(WY,"href","/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(HY,"href","/docs/transformers/pr_17787/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(UY,"href","/docs/transformers/pr_17787/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(JY,"href","/docs/transformers/pr_17787/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(YY,"href","/docs/transformers/pr_17787/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(KY,"href","/docs/transformers/pr_17787/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(ZY,"href","/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(eK,"href","/docs/transformers/pr_17787/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VC,"id","transformers.TFAutoModelForQuestionAnswering"),c(VC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(VC,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Rc,"class","relative group"),c(oK,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rK,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tK,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aK,"href","/docs/transformers/pr_17787/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(nK,"href","/docs/transformers/pr_17787/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(sK,"href","/docs/transformers/pr_17787/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(lK,"href","/docs/transformers/pr_17787/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(iK,"href","/docs/transformers/pr_17787/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(dK,"href","/docs/transformers/pr_17787/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(cK,"href","/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(fK,"href","/docs/transformers/pr_17787/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(mK,"href","/docs/transformers/pr_17787/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(gK,"href","/docs/transformers/pr_17787/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(hK,"href","/docs/transformers/pr_17787/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(pK,"href","/docs/transformers/pr_17787/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(_K,"href","/docs/transformers/pr_17787/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(uK,"href","/docs/transformers/pr_17787/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(bK,"href","/docs/transformers/pr_17787/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(vK,"href","/docs/transformers/pr_17787/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(FK,"href","/docs/transformers/pr_17787/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(TK,"href","/docs/transformers/pr_17787/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(MK,"href","/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(EK,"href","/docs/transformers/pr_17787/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(m5,"id","transformers.TFAutoModelForVision2Seq"),c(m5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m5,"href","#transformers.TFAutoModelForVision2Seq"),c(Ic,"class","relative group"),c(CK,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wK,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AK,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LK,"href","/docs/transformers/pr_17787/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_5,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(_5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_5,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(jc,"class","relative group"),c(yK,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xK,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($K,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kK,"href","/docs/transformers/pr_17787/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(F5,"id","transformers.FlaxAutoModel"),c(F5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(F5,"href","#transformers.FlaxAutoModel"),c(Oc,"class","relative group"),c(SK,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RK,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PK,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BK,"href","/docs/transformers/pr_17787/en/model_doc/albert#transformers.FlaxAlbertModel"),c(IK,"href","/docs/transformers/pr_17787/en/model_doc/bart#transformers.FlaxBartModel"),c(NK,"href","/docs/transformers/pr_17787/en/model_doc/beit#transformers.FlaxBeitModel"),c(qK,"href","/docs/transformers/pr_17787/en/model_doc/bert#transformers.FlaxBertModel"),c(jK,"href","/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(DK,"href","/docs/transformers/pr_17787/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(GK,"href","/docs/transformers/pr_17787/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(OK,"href","/docs/transformers/pr_17787/en/model_doc/clip#transformers.FlaxCLIPModel"),c(VK,"href","/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(XK,"href","/docs/transformers/pr_17787/en/model_doc/electra#transformers.FlaxElectraModel"),c(zK,"href","/docs/transformers/pr_17787/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(QK,"href","/docs/transformers/pr_17787/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(WK,"href","/docs/transformers/pr_17787/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(HK,"href","/docs/transformers/pr_17787/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(UK,"href","/docs/transformers/pr_17787/en/model_doc/marian#transformers.FlaxMarianModel"),c(JK,"href","/docs/transformers/pr_17787/en/model_doc/mbart#transformers.FlaxMBartModel"),c(YK,"href","/docs/transformers/pr_17787/en/model_doc/mt5#transformers.FlaxMT5Model"),c(KK,"href","/docs/transformers/pr_17787/en/model_doc/opt#transformers.FlaxOPTModel"),c(ZK,"href","/docs/transformers/pr_17787/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(eZ,"href","/docs/transformers/pr_17787/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(oZ,"href","/docs/transformers/pr_17787/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(rZ,"href","/docs/transformers/pr_17787/en/model_doc/t5#transformers.FlaxT5Model"),c(tZ,"href","/docs/transformers/pr_17787/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(aZ,"href","/docs/transformers/pr_17787/en/model_doc/vit#transformers.FlaxViTModel"),c(nZ,"href","/docs/transformers/pr_17787/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(sZ,"href","/docs/transformers/pr_17787/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(lZ,"href","/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J5,"id","transformers.FlaxAutoModelForCausalLM"),c(J5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J5,"href","#transformers.FlaxAutoModelForCausalLM"),c(zc,"class","relative group"),c(iZ,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dZ,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cZ,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fZ,"href","/docs/transformers/pr_17787/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(mZ,"href","/docs/transformers/pr_17787/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(gZ,"href","/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(hZ,"href","/docs/transformers/pr_17787/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(pZ,"href","/docs/transformers/pr_17787/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(_Z,"href","/docs/transformers/pr_17787/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(uZ,"href","/docs/transformers/pr_17787/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(bZ,"href","/docs/transformers/pr_17787/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(vZ,"href","/docs/transformers/pr_17787/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(FZ,"href","/docs/transformers/pr_17787/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(d3,"id","transformers.FlaxAutoModelForPreTraining"),c(d3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d3,"href","#transformers.FlaxAutoModelForPreTraining"),c(Hc,"class","relative group"),c(TZ,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MZ,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EZ,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CZ,"href","/docs/transformers/pr_17787/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(wZ,"href","/docs/transformers/pr_17787/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(AZ,"href","/docs/transformers/pr_17787/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(LZ,"href","/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(yZ,"href","/docs/transformers/pr_17787/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(xZ,"href","/docs/transformers/pr_17787/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c($Z,"href","/docs/transformers/pr_17787/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(kZ,"href","/docs/transformers/pr_17787/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(SZ,"href","/docs/transformers/pr_17787/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(RZ,"href","/docs/transformers/pr_17787/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(PZ,"href","/docs/transformers/pr_17787/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(BZ,"href","/docs/transformers/pr_17787/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(IZ,"href","/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w3,"id","transformers.FlaxAutoModelForMaskedLM"),c(w3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w3,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Yc,"class","relative group"),c(NZ,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qZ,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jZ,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DZ,"href","/docs/transformers/pr_17787/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(GZ,"href","/docs/transformers/pr_17787/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(OZ,"href","/docs/transformers/pr_17787/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(VZ,"href","/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(XZ,"href","/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(zZ,"href","/docs/transformers/pr_17787/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(QZ,"href","/docs/transformers/pr_17787/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(WZ,"href","/docs/transformers/pr_17787/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(HZ,"href","/docs/transformers/pr_17787/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(UZ,"href","/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(q3,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(q3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q3,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(ef,"class","relative group"),c(JZ,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YZ,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KZ,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZZ,"href","/docs/transformers/pr_17787/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(eee,"href","/docs/transformers/pr_17787/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(oee,"href","/docs/transformers/pr_17787/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(ree,"href","/docs/transformers/pr_17787/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(tee,"href","/docs/transformers/pr_17787/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(aee,"href","/docs/transformers/pr_17787/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(nee,"href","/docs/transformers/pr_17787/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(see,"href","/docs/transformers/pr_17787/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(lee,"href","/docs/transformers/pr_17787/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(iee,"href","/docs/transformers/pr_17787/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y3,"id","transformers.FlaxAutoModelForSequenceClassification"),c(Y3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y3,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(tf,"class","relative group"),c(dee,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cee,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fee,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mee,"href","/docs/transformers/pr_17787/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(gee,"href","/docs/transformers/pr_17787/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(hee,"href","/docs/transformers/pr_17787/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(pee,"href","/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(_ee,"href","/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(uee,"href","/docs/transformers/pr_17787/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(bee,"href","/docs/transformers/pr_17787/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(vee,"href","/docs/transformers/pr_17787/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(Fee,"href","/docs/transformers/pr_17787/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(Tee,"href","/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(c0,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(c0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(c0,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(sf,"class","relative group"),c(Mee,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Eee,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Cee,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wee,"href","/docs/transformers/pr_17787/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(Aee,"href","/docs/transformers/pr_17787/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(Lee,"href","/docs/transformers/pr_17787/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(yee,"href","/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(xee,"href","/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c($ee,"href","/docs/transformers/pr_17787/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(kee,"href","/docs/transformers/pr_17787/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(See,"href","/docs/transformers/pr_17787/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(Ree,"href","/docs/transformers/pr_17787/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(Pee,"href","/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(E0,"id","transformers.FlaxAutoModelForTokenClassification"),c(E0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(E0,"href","#transformers.FlaxAutoModelForTokenClassification"),c(cf,"class","relative group"),c(Bee,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Iee,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Nee,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qee,"href","/docs/transformers/pr_17787/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(jee,"href","/docs/transformers/pr_17787/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(Dee,"href","/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(Gee,"href","/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(Oee,"href","/docs/transformers/pr_17787/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(Vee,"href","/docs/transformers/pr_17787/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(Xee,"href","/docs/transformers/pr_17787/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(zee,"href","/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P0,"id","transformers.FlaxAutoModelForMultipleChoice"),c(P0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P0,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(gf,"class","relative group"),c(Qee,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wee,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Hee,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uee,"href","/docs/transformers/pr_17787/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(Jee,"href","/docs/transformers/pr_17787/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(Yee,"href","/docs/transformers/pr_17787/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(Kee,"href","/docs/transformers/pr_17787/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(Zee,"href","/docs/transformers/pr_17787/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(eoe,"href","/docs/transformers/pr_17787/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(ooe,"href","/docs/transformers/pr_17787/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(roe,"href","/docs/transformers/pr_17787/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z0,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(z0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z0,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(_f,"class","relative group"),c(toe,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aoe,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(noe,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(soe,"href","/docs/transformers/pr_17787/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U0,"id","transformers.FlaxAutoModelForImageClassification"),c(U0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U0,"href","#transformers.FlaxAutoModelForImageClassification"),c(vf,"class","relative group"),c(loe,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ioe,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(doe,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(coe,"href","/docs/transformers/pr_17787/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(foe,"href","/docs/transformers/pr_17787/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ew,"id","transformers.FlaxAutoModelForVision2Seq"),c(ew,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ew,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Mf,"class","relative group"),c(moe,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(goe,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hoe,"href","/docs/transformers/pr_17787/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(poe,"href","/docs/transformers/pr_17787/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Eo),e(Eo,Ti),b(f,yf,u),b(f,at,u),e(at,Mi),e(at,Ei),e(Ei,C6),e(at,xf),b(f,Oe,u),b(f,Qe,u),e(Qe,Ci),e(Qe,Sn),e(Sn,w6),e(Qe,Rn),e(Qe,Pn),e(Pn,A6),e(Qe,wi),e(Qe,Bn),e(Bn,L6),e(Qe,Ai),b(f,$f,u),M(ya,f,u),b(f,We,u),b(f,Ae,u),e(Ae,oS),e(Ae,Li),e(Li,rS),e(Ae,tS),b(f,Co,u),b(f,xa,u),e(xa,aS),e(xa,kf),e(kf,nS),e(xa,Jze),b(f,BGe,u),b(f,yi,u),e(yi,Sf),e(Sf,cte),M(y6,cte,null),e(yi,Yze),e(yi,fte),e(fte,Kze),b(f,IGe,u),b(f,In,u),e(In,Zze),e(In,mte),e(mte,eQe),e(In,oQe),e(In,gte),e(gte,rQe),e(In,tQe),b(f,NGe,u),M(x6,f,u),b(f,qGe,u),b(f,sS,u),e(sS,aQe),b(f,jGe,u),M(Rf,f,u),b(f,DGe,u),b(f,xi,u),e(xi,Pf),e(Pf,hte),M($6,hte,null),e(xi,nQe),e(xi,pte),e(pte,sQe),b(f,GGe,u),b(f,wo,u),M(k6,wo,null),e(wo,lQe),e(wo,S6),e(S6,iQe),e(S6,lS),e(lS,dQe),e(S6,cQe),e(wo,fQe),e(wo,R6),e(R6,mQe),e(R6,_te),e(_te,gQe),e(R6,hQe),e(wo,pQe),e(wo,wr),M(P6,wr,null),e(wr,_Qe),e(wr,ute),e(ute,uQe),e(wr,bQe),e(wr,$i),e($i,vQe),e($i,bte),e(bte,FQe),e($i,TQe),e($i,vte),e(vte,MQe),e($i,EQe),e(wr,CQe),e(wr,A),e(A,Bf),e(Bf,Fte),e(Fte,wQe),e(Bf,AQe),e(Bf,iS),e(iS,LQe),e(Bf,yQe),e(A,xQe),e(A,If),e(If,Tte),e(Tte,$Qe),e(If,kQe),e(If,dS),e(dS,SQe),e(If,RQe),e(A,PQe),e(A,Nf),e(Nf,Mte),e(Mte,BQe),e(Nf,IQe),e(Nf,cS),e(cS,NQe),e(Nf,qQe),e(A,jQe),e(A,qf),e(qf,Ete),e(Ete,DQe),e(qf,GQe),e(qf,fS),e(fS,OQe),e(qf,VQe),e(A,XQe),e(A,jf),e(jf,Cte),e(Cte,zQe),e(jf,QQe),e(jf,mS),e(mS,WQe),e(jf,HQe),e(A,UQe),e(A,Df),e(Df,wte),e(wte,JQe),e(Df,YQe),e(Df,gS),e(gS,KQe),e(Df,ZQe),e(A,eWe),e(A,Gf),e(Gf,Ate),e(Ate,oWe),e(Gf,rWe),e(Gf,hS),e(hS,tWe),e(Gf,aWe),e(A,nWe),e(A,Of),e(Of,Lte),e(Lte,sWe),e(Of,lWe),e(Of,pS),e(pS,iWe),e(Of,dWe),e(A,cWe),e(A,Vf),e(Vf,yte),e(yte,fWe),e(Vf,mWe),e(Vf,_S),e(_S,gWe),e(Vf,hWe),e(A,pWe),e(A,Xf),e(Xf,xte),e(xte,_We),e(Xf,uWe),e(Xf,uS),e(uS,bWe),e(Xf,vWe),e(A,FWe),e(A,zf),e(zf,$te),e($te,TWe),e(zf,MWe),e(zf,bS),e(bS,EWe),e(zf,CWe),e(A,wWe),e(A,Qf),e(Qf,kte),e(kte,AWe),e(Qf,LWe),e(Qf,vS),e(vS,yWe),e(Qf,xWe),e(A,$We),e(A,Wf),e(Wf,Ste),e(Ste,kWe),e(Wf,SWe),e(Wf,FS),e(FS,RWe),e(Wf,PWe),e(A,BWe),e(A,Hf),e(Hf,Rte),e(Rte,IWe),e(Hf,NWe),e(Hf,TS),e(TS,qWe),e(Hf,jWe),e(A,DWe),e(A,Uf),e(Uf,Pte),e(Pte,GWe),e(Uf,OWe),e(Uf,MS),e(MS,VWe),e(Uf,XWe),e(A,zWe),e(A,Jf),e(Jf,Bte),e(Bte,QWe),e(Jf,WWe),e(Jf,ES),e(ES,HWe),e(Jf,UWe),e(A,JWe),e(A,Yf),e(Yf,Ite),e(Ite,YWe),e(Yf,KWe),e(Yf,CS),e(CS,ZWe),e(Yf,eHe),e(A,oHe),e(A,Kf),e(Kf,Nte),e(Nte,rHe),e(Kf,tHe),e(Kf,wS),e(wS,aHe),e(Kf,nHe),e(A,sHe),e(A,Zf),e(Zf,qte),e(qte,lHe),e(Zf,iHe),e(Zf,AS),e(AS,dHe),e(Zf,cHe),e(A,fHe),e(A,em),e(em,jte),e(jte,mHe),e(em,gHe),e(em,LS),e(LS,hHe),e(em,pHe),e(A,_He),e(A,om),e(om,Dte),e(Dte,uHe),e(om,bHe),e(om,yS),e(yS,vHe),e(om,FHe),e(A,THe),e(A,rm),e(rm,Gte),e(Gte,MHe),e(rm,EHe),e(rm,xS),e(xS,CHe),e(rm,wHe),e(A,AHe),e(A,tm),e(tm,Ote),e(Ote,LHe),e(tm,yHe),e(tm,$S),e($S,xHe),e(tm,$He),e(A,kHe),e(A,am),e(am,Vte),e(Vte,SHe),e(am,RHe),e(am,kS),e(kS,PHe),e(am,BHe),e(A,IHe),e(A,nm),e(nm,Xte),e(Xte,NHe),e(nm,qHe),e(nm,SS),e(SS,jHe),e(nm,DHe),e(A,GHe),e(A,sm),e(sm,zte),e(zte,OHe),e(sm,VHe),e(sm,RS),e(RS,XHe),e(sm,zHe),e(A,QHe),e(A,lm),e(lm,Qte),e(Qte,WHe),e(lm,HHe),e(lm,PS),e(PS,UHe),e(lm,JHe),e(A,YHe),e(A,im),e(im,Wte),e(Wte,KHe),e(im,ZHe),e(im,BS),e(BS,eUe),e(im,oUe),e(A,rUe),e(A,dm),e(dm,Hte),e(Hte,tUe),e(dm,aUe),e(dm,IS),e(IS,nUe),e(dm,sUe),e(A,lUe),e(A,cm),e(cm,Ute),e(Ute,iUe),e(cm,dUe),e(cm,NS),e(NS,cUe),e(cm,fUe),e(A,mUe),e(A,fm),e(fm,Jte),e(Jte,gUe),e(fm,hUe),e(fm,qS),e(qS,pUe),e(fm,_Ue),e(A,uUe),e(A,mm),e(mm,Yte),e(Yte,bUe),e(mm,vUe),e(mm,jS),e(jS,FUe),e(mm,TUe),e(A,MUe),e(A,gm),e(gm,Kte),e(Kte,EUe),e(gm,CUe),e(gm,DS),e(DS,wUe),e(gm,AUe),e(A,LUe),e(A,hm),e(hm,Zte),e(Zte,yUe),e(hm,xUe),e(hm,GS),e(GS,$Ue),e(hm,kUe),e(A,SUe),e(A,pm),e(pm,eae),e(eae,RUe),e(pm,PUe),e(pm,OS),e(OS,BUe),e(pm,IUe),e(A,NUe),e(A,_m),e(_m,oae),e(oae,qUe),e(_m,jUe),e(_m,VS),e(VS,DUe),e(_m,GUe),e(A,OUe),e(A,um),e(um,rae),e(rae,VUe),e(um,XUe),e(um,XS),e(XS,zUe),e(um,QUe),e(A,WUe),e(A,bm),e(bm,tae),e(tae,HUe),e(bm,UUe),e(bm,zS),e(zS,JUe),e(bm,YUe),e(A,KUe),e(A,vm),e(vm,aae),e(aae,ZUe),e(vm,eJe),e(vm,QS),e(QS,oJe),e(vm,rJe),e(A,tJe),e(A,Fm),e(Fm,nae),e(nae,aJe),e(Fm,nJe),e(Fm,WS),e(WS,sJe),e(Fm,lJe),e(A,iJe),e(A,Tm),e(Tm,sae),e(sae,dJe),e(Tm,cJe),e(Tm,HS),e(HS,fJe),e(Tm,mJe),e(A,gJe),e(A,Mm),e(Mm,lae),e(lae,hJe),e(Mm,pJe),e(Mm,US),e(US,_Je),e(Mm,uJe),e(A,bJe),e(A,Em),e(Em,iae),e(iae,vJe),e(Em,FJe),e(Em,JS),e(JS,TJe),e(Em,MJe),e(A,EJe),e(A,Cm),e(Cm,dae),e(dae,CJe),e(Cm,wJe),e(Cm,YS),e(YS,AJe),e(Cm,LJe),e(A,yJe),e(A,wm),e(wm,cae),e(cae,xJe),e(wm,$Je),e(wm,KS),e(KS,kJe),e(wm,SJe),e(A,RJe),e(A,Am),e(Am,fae),e(fae,PJe),e(Am,BJe),e(Am,ZS),e(ZS,IJe),e(Am,NJe),e(A,qJe),e(A,Lm),e(Lm,mae),e(mae,jJe),e(Lm,DJe),e(Lm,eR),e(eR,GJe),e(Lm,OJe),e(A,VJe),e(A,ym),e(ym,gae),e(gae,XJe),e(ym,zJe),e(ym,oR),e(oR,QJe),e(ym,WJe),e(A,HJe),e(A,xm),e(xm,hae),e(hae,UJe),e(xm,JJe),e(xm,rR),e(rR,YJe),e(xm,KJe),e(A,ZJe),e(A,$m),e($m,pae),e(pae,eYe),e($m,oYe),e($m,tR),e(tR,rYe),e($m,tYe),e(A,aYe),e(A,km),e(km,_ae),e(_ae,nYe),e(km,sYe),e(km,aR),e(aR,lYe),e(km,iYe),e(A,dYe),e(A,Sm),e(Sm,uae),e(uae,cYe),e(Sm,fYe),e(Sm,nR),e(nR,mYe),e(Sm,gYe),e(A,hYe),e(A,Rm),e(Rm,bae),e(bae,pYe),e(Rm,_Ye),e(Rm,sR),e(sR,uYe),e(Rm,bYe),e(A,vYe),e(A,Pm),e(Pm,vae),e(vae,FYe),e(Pm,TYe),e(Pm,lR),e(lR,MYe),e(Pm,EYe),e(A,CYe),e(A,Bm),e(Bm,Fae),e(Fae,wYe),e(Bm,AYe),e(Bm,iR),e(iR,LYe),e(Bm,yYe),e(A,xYe),e(A,Im),e(Im,Tae),e(Tae,$Ye),e(Im,kYe),e(Im,dR),e(dR,SYe),e(Im,RYe),e(A,PYe),e(A,Nm),e(Nm,Mae),e(Mae,BYe),e(Nm,IYe),e(Nm,cR),e(cR,NYe),e(Nm,qYe),e(A,jYe),e(A,qm),e(qm,Eae),e(Eae,DYe),e(qm,GYe),e(qm,fR),e(fR,OYe),e(qm,VYe),e(A,XYe),e(A,jm),e(jm,Cae),e(Cae,zYe),e(jm,QYe),e(jm,mR),e(mR,WYe),e(jm,HYe),e(A,UYe),e(A,Dm),e(Dm,wae),e(wae,JYe),e(Dm,YYe),e(Dm,gR),e(gR,KYe),e(Dm,ZYe),e(A,eKe),e(A,Gm),e(Gm,Aae),e(Aae,oKe),e(Gm,rKe),e(Gm,hR),e(hR,tKe),e(Gm,aKe),e(A,nKe),e(A,Om),e(Om,Lae),e(Lae,sKe),e(Om,lKe),e(Om,pR),e(pR,iKe),e(Om,dKe),e(A,cKe),e(A,Vm),e(Vm,yae),e(yae,fKe),e(Vm,mKe),e(Vm,_R),e(_R,gKe),e(Vm,hKe),e(A,pKe),e(A,Xm),e(Xm,xae),e(xae,_Ke),e(Xm,uKe),e(Xm,uR),e(uR,bKe),e(Xm,vKe),e(A,FKe),e(A,zm),e(zm,$ae),e($ae,TKe),e(zm,MKe),e(zm,bR),e(bR,EKe),e(zm,CKe),e(A,wKe),e(A,Qm),e(Qm,kae),e(kae,AKe),e(Qm,LKe),e(Qm,vR),e(vR,yKe),e(Qm,xKe),e(A,$Ke),e(A,Wm),e(Wm,Sae),e(Sae,kKe),e(Wm,SKe),e(Wm,FR),e(FR,RKe),e(Wm,PKe),e(A,BKe),e(A,Hm),e(Hm,Rae),e(Rae,IKe),e(Hm,NKe),e(Hm,TR),e(TR,qKe),e(Hm,jKe),e(A,DKe),e(A,Um),e(Um,Pae),e(Pae,GKe),e(Um,OKe),e(Um,MR),e(MR,VKe),e(Um,XKe),e(A,zKe),e(A,Jm),e(Jm,Bae),e(Bae,QKe),e(Jm,WKe),e(Jm,ER),e(ER,HKe),e(Jm,UKe),e(A,JKe),e(A,Ym),e(Ym,Iae),e(Iae,YKe),e(Ym,KKe),e(Ym,CR),e(CR,ZKe),e(Ym,eZe),e(A,oZe),e(A,Km),e(Km,Nae),e(Nae,rZe),e(Km,tZe),e(Km,wR),e(wR,aZe),e(Km,nZe),e(A,sZe),e(A,Zm),e(Zm,qae),e(qae,lZe),e(Zm,iZe),e(Zm,AR),e(AR,dZe),e(Zm,cZe),e(A,fZe),e(A,eg),e(eg,jae),e(jae,mZe),e(eg,gZe),e(eg,LR),e(LR,hZe),e(eg,pZe),e(A,_Ze),e(A,og),e(og,Dae),e(Dae,uZe),e(og,bZe),e(og,yR),e(yR,vZe),e(og,FZe),e(A,TZe),e(A,rg),e(rg,Gae),e(Gae,MZe),e(rg,EZe),e(rg,xR),e(xR,CZe),e(rg,wZe),e(A,AZe),e(A,tg),e(tg,Oae),e(Oae,LZe),e(tg,yZe),e(tg,$R),e($R,xZe),e(tg,$Ze),e(A,kZe),e(A,ag),e(ag,Vae),e(Vae,SZe),e(ag,RZe),e(ag,kR),e(kR,PZe),e(ag,BZe),e(A,IZe),e(A,ng),e(ng,Xae),e(Xae,NZe),e(ng,qZe),e(ng,SR),e(SR,jZe),e(ng,DZe),e(A,GZe),e(A,sg),e(sg,zae),e(zae,OZe),e(sg,VZe),e(sg,RR),e(RR,XZe),e(sg,zZe),e(A,QZe),e(A,lg),e(lg,Qae),e(Qae,WZe),e(lg,HZe),e(lg,PR),e(PR,UZe),e(lg,JZe),e(A,YZe),e(A,ig),e(ig,Wae),e(Wae,KZe),e(ig,ZZe),e(ig,BR),e(BR,eeo),e(ig,oeo),e(A,reo),e(A,dg),e(dg,Hae),e(Hae,teo),e(dg,aeo),e(dg,IR),e(IR,neo),e(dg,seo),e(A,leo),e(A,cg),e(cg,Uae),e(Uae,ieo),e(cg,deo),e(cg,NR),e(NR,ceo),e(cg,feo),e(A,meo),e(A,fg),e(fg,Jae),e(Jae,geo),e(fg,heo),e(fg,qR),e(qR,peo),e(fg,_eo),e(A,ueo),e(A,mg),e(mg,Yae),e(Yae,beo),e(mg,veo),e(mg,jR),e(jR,Feo),e(mg,Teo),e(A,Meo),e(A,gg),e(gg,Kae),e(Kae,Eeo),e(gg,Ceo),e(gg,DR),e(DR,weo),e(gg,Aeo),e(A,Leo),e(A,hg),e(hg,Zae),e(Zae,yeo),e(hg,xeo),e(hg,GR),e(GR,$eo),e(hg,keo),e(A,Seo),e(A,pg),e(pg,ene),e(ene,Reo),e(pg,Peo),e(pg,OR),e(OR,Beo),e(pg,Ieo),e(A,Neo),e(A,_g),e(_g,one),e(one,qeo),e(_g,jeo),e(_g,VR),e(VR,Deo),e(_g,Geo),e(A,Oeo),e(A,ug),e(ug,rne),e(rne,Veo),e(ug,Xeo),e(ug,XR),e(XR,zeo),e(ug,Qeo),e(A,Weo),e(A,bg),e(bg,tne),e(tne,Heo),e(bg,Ueo),e(bg,zR),e(zR,Jeo),e(bg,Yeo),e(A,Keo),e(A,vg),e(vg,ane),e(ane,Zeo),e(vg,eoo),e(vg,QR),e(QR,ooo),e(vg,roo),e(A,too),e(A,Fg),e(Fg,nne),e(nne,aoo),e(Fg,noo),e(Fg,WR),e(WR,soo),e(Fg,loo),e(A,ioo),e(A,Tg),e(Tg,sne),e(sne,doo),e(Tg,coo),e(Tg,HR),e(HR,foo),e(Tg,moo),e(A,goo),e(A,Mg),e(Mg,lne),e(lne,hoo),e(Mg,poo),e(Mg,UR),e(UR,_oo),e(Mg,uoo),e(A,boo),e(A,Eg),e(Eg,ine),e(ine,voo),e(Eg,Foo),e(Eg,JR),e(JR,Too),e(Eg,Moo),e(A,Eoo),e(A,Cg),e(Cg,dne),e(dne,Coo),e(Cg,woo),e(Cg,YR),e(YR,Aoo),e(Cg,Loo),e(A,yoo),e(A,wg),e(wg,cne),e(cne,xoo),e(wg,$oo),e(wg,KR),e(KR,koo),e(wg,Soo),e(A,Roo),e(A,Ag),e(Ag,fne),e(fne,Poo),e(Ag,Boo),e(Ag,ZR),e(ZR,Ioo),e(Ag,Noo),e(A,qoo),e(A,Lg),e(Lg,mne),e(mne,joo),e(Lg,Doo),e(Lg,eP),e(eP,Goo),e(Lg,Ooo),e(A,Voo),e(A,yg),e(yg,gne),e(gne,Xoo),e(yg,zoo),e(yg,oP),e(oP,Qoo),e(yg,Woo),e(A,Hoo),e(A,xg),e(xg,hne),e(hne,Uoo),e(xg,Joo),e(xg,rP),e(rP,Yoo),e(xg,Koo),e(A,Zoo),e(A,$g),e($g,pne),e(pne,ero),e($g,oro),e($g,tP),e(tP,rro),e($g,tro),e(A,aro),e(A,kg),e(kg,_ne),e(_ne,nro),e(kg,sro),e(kg,aP),e(aP,lro),e(kg,iro),e(A,dro),e(A,Sg),e(Sg,une),e(une,cro),e(Sg,fro),e(Sg,nP),e(nP,mro),e(Sg,gro),e(A,hro),e(A,Rg),e(Rg,bne),e(bne,pro),e(Rg,_ro),e(Rg,sP),e(sP,uro),e(Rg,bro),e(A,vro),e(A,Pg),e(Pg,vne),e(vne,Fro),e(Pg,Tro),e(Pg,lP),e(lP,Mro),e(Pg,Ero),e(A,Cro),e(A,Bg),e(Bg,Fne),e(Fne,wro),e(Bg,Aro),e(Bg,iP),e(iP,Lro),e(Bg,yro),e(A,xro),e(A,Ig),e(Ig,Tne),e(Tne,$ro),e(Ig,kro),e(Ig,dP),e(dP,Sro),e(Ig,Rro),e(A,Pro),e(A,Ng),e(Ng,Mne),e(Mne,Bro),e(Ng,Iro),e(Ng,cP),e(cP,Nro),e(Ng,qro),e(A,jro),e(A,qg),e(qg,Ene),e(Ene,Dro),e(qg,Gro),e(qg,fP),e(fP,Oro),e(qg,Vro),e(A,Xro),e(A,jg),e(jg,Cne),e(Cne,zro),e(jg,Qro),e(jg,mP),e(mP,Wro),e(jg,Hro),e(A,Uro),e(A,Dg),e(Dg,wne),e(wne,Jro),e(Dg,Yro),e(Dg,gP),e(gP,Kro),e(Dg,Zro),e(wr,eto),M(Gg,wr,null),e(wo,oto),e(wo,Og),M(B6,Og,null),e(Og,rto),e(Og,Ane),e(Ane,tto),b(f,OGe,u),b(f,ki,u),e(ki,Vg),e(Vg,Lne),M(I6,Lne,null),e(ki,ato),e(ki,yne),e(yne,nto),b(f,VGe,u),b(f,Ao,u),M(N6,Ao,null),e(Ao,sto),e(Ao,q6),e(q6,lto),e(q6,hP),e(hP,ito),e(q6,dto),e(Ao,cto),e(Ao,j6),e(j6,fto),e(j6,xne),e(xne,mto),e(j6,gto),e(Ao,hto),e(Ao,Ar),M(D6,Ar,null),e(Ar,pto),e(Ar,$ne),e($ne,_to),e(Ar,uto),e(Ar,$a),e($a,bto),e($a,kne),e(kne,vto),e($a,Fto),e($a,Sne),e(Sne,Tto),e($a,Mto),e($a,Rne),e(Rne,Eto),e($a,Cto),e(Ar,wto),e(Ar,k),e(k,Nn),e(Nn,Pne),e(Pne,Ato),e(Nn,Lto),e(Nn,pP),e(pP,yto),e(Nn,xto),e(Nn,_P),e(_P,$to),e(Nn,kto),e(k,Sto),e(k,qn),e(qn,Bne),e(Bne,Rto),e(qn,Pto),e(qn,uP),e(uP,Bto),e(qn,Ito),e(qn,bP),e(bP,Nto),e(qn,qto),e(k,jto),e(k,jn),e(jn,Ine),e(Ine,Dto),e(jn,Gto),e(jn,vP),e(vP,Oto),e(jn,Vto),e(jn,FP),e(FP,Xto),e(jn,zto),e(k,Qto),e(k,Xg),e(Xg,Nne),e(Nne,Wto),e(Xg,Hto),e(Xg,TP),e(TP,Uto),e(Xg,Jto),e(k,Yto),e(k,Dn),e(Dn,qne),e(qne,Kto),e(Dn,Zto),e(Dn,MP),e(MP,eao),e(Dn,oao),e(Dn,EP),e(EP,rao),e(Dn,tao),e(k,aao),e(k,zg),e(zg,jne),e(jne,nao),e(zg,sao),e(zg,CP),e(CP,lao),e(zg,iao),e(k,dao),e(k,Qg),e(Qg,Dne),e(Dne,cao),e(Qg,fao),e(Qg,wP),e(wP,mao),e(Qg,gao),e(k,hao),e(k,Wg),e(Wg,Gne),e(Gne,pao),e(Wg,_ao),e(Wg,AP),e(AP,uao),e(Wg,bao),e(k,vao),e(k,Gn),e(Gn,One),e(One,Fao),e(Gn,Tao),e(Gn,LP),e(LP,Mao),e(Gn,Eao),e(Gn,yP),e(yP,Cao),e(Gn,wao),e(k,Aao),e(k,On),e(On,Vne),e(Vne,Lao),e(On,yao),e(On,xP),e(xP,xao),e(On,$ao),e(On,$P),e($P,kao),e(On,Sao),e(k,Rao),e(k,Vn),e(Vn,Xne),e(Xne,Pao),e(Vn,Bao),e(Vn,kP),e(kP,Iao),e(Vn,Nao),e(Vn,SP),e(SP,qao),e(Vn,jao),e(k,Dao),e(k,Hg),e(Hg,zne),e(zne,Gao),e(Hg,Oao),e(Hg,RP),e(RP,Vao),e(Hg,Xao),e(k,zao),e(k,Ug),e(Ug,Qne),e(Qne,Qao),e(Ug,Wao),e(Ug,PP),e(PP,Hao),e(Ug,Uao),e(k,Jao),e(k,Jg),e(Jg,Wne),e(Wne,Yao),e(Jg,Kao),e(Jg,BP),e(BP,Zao),e(Jg,eno),e(k,ono),e(k,Xn),e(Xn,Hne),e(Hne,rno),e(Xn,tno),e(Xn,IP),e(IP,ano),e(Xn,nno),e(Xn,NP),e(NP,sno),e(Xn,lno),e(k,ino),e(k,Yg),e(Yg,Une),e(Une,dno),e(Yg,cno),e(Yg,qP),e(qP,fno),e(Yg,mno),e(k,gno),e(k,zn),e(zn,Jne),e(Jne,hno),e(zn,pno),e(zn,jP),e(jP,_no),e(zn,uno),e(zn,DP),e(DP,bno),e(zn,vno),e(k,Fno),e(k,Qn),e(Qn,Yne),e(Yne,Tno),e(Qn,Mno),e(Qn,GP),e(GP,Eno),e(Qn,Cno),e(Qn,OP),e(OP,wno),e(Qn,Ano),e(k,Lno),e(k,Wn),e(Wn,Kne),e(Kne,yno),e(Wn,xno),e(Wn,VP),e(VP,$no),e(Wn,kno),e(Wn,XP),e(XP,Sno),e(Wn,Rno),e(k,Pno),e(k,Kg),e(Kg,Zne),e(Zne,Bno),e(Kg,Ino),e(Kg,zP),e(zP,Nno),e(Kg,qno),e(k,jno),e(k,Hn),e(Hn,ese),e(ese,Dno),e(Hn,Gno),e(Hn,QP),e(QP,Ono),e(Hn,Vno),e(Hn,WP),e(WP,Xno),e(Hn,zno),e(k,Qno),e(k,Un),e(Un,ose),e(ose,Wno),e(Un,Hno),e(Un,HP),e(HP,Uno),e(Un,Jno),e(Un,UP),e(UP,Yno),e(Un,Kno),e(k,Zno),e(k,Jn),e(Jn,rse),e(rse,eso),e(Jn,oso),e(Jn,JP),e(JP,rso),e(Jn,tso),e(Jn,YP),e(YP,aso),e(Jn,nso),e(k,sso),e(k,Yn),e(Yn,tse),e(tse,lso),e(Yn,iso),e(Yn,KP),e(KP,dso),e(Yn,cso),e(Yn,ZP),e(ZP,fso),e(Yn,mso),e(k,gso),e(k,Kn),e(Kn,ase),e(ase,hso),e(Kn,pso),e(Kn,eB),e(eB,_so),e(Kn,uso),e(Kn,oB),e(oB,bso),e(Kn,vso),e(k,Fso),e(k,Zn),e(Zn,nse),e(nse,Tso),e(Zn,Mso),e(Zn,rB),e(rB,Eso),e(Zn,Cso),e(Zn,tB),e(tB,wso),e(Zn,Aso),e(k,Lso),e(k,Zg),e(Zg,sse),e(sse,yso),e(Zg,xso),e(Zg,aB),e(aB,$so),e(Zg,kso),e(k,Sso),e(k,es),e(es,lse),e(lse,Rso),e(es,Pso),e(es,nB),e(nB,Bso),e(es,Iso),e(es,sB),e(sB,Nso),e(es,qso),e(k,jso),e(k,eh),e(eh,ise),e(ise,Dso),e(eh,Gso),e(eh,lB),e(lB,Oso),e(eh,Vso),e(k,Xso),e(k,os),e(os,dse),e(dse,zso),e(os,Qso),e(os,iB),e(iB,Wso),e(os,Hso),e(os,dB),e(dB,Uso),e(os,Jso),e(k,Yso),e(k,rs),e(rs,cse),e(cse,Kso),e(rs,Zso),e(rs,cB),e(cB,elo),e(rs,olo),e(rs,fB),e(fB,rlo),e(rs,tlo),e(k,alo),e(k,ts),e(ts,fse),e(fse,nlo),e(ts,slo),e(ts,mB),e(mB,llo),e(ts,ilo),e(ts,gB),e(gB,dlo),e(ts,clo),e(k,flo),e(k,oh),e(oh,mse),e(mse,mlo),e(oh,glo),e(oh,hB),e(hB,hlo),e(oh,plo),e(k,_lo),e(k,as),e(as,gse),e(gse,ulo),e(as,blo),e(as,pB),e(pB,vlo),e(as,Flo),e(as,_B),e(_B,Tlo),e(as,Mlo),e(k,Elo),e(k,ns),e(ns,hse),e(hse,Clo),e(ns,wlo),e(ns,uB),e(uB,Alo),e(ns,Llo),e(ns,bB),e(bB,ylo),e(ns,xlo),e(k,$lo),e(k,rh),e(rh,pse),e(pse,klo),e(rh,Slo),e(rh,vB),e(vB,Rlo),e(rh,Plo),e(k,Blo),e(k,ss),e(ss,_se),e(_se,Ilo),e(ss,Nlo),e(ss,FB),e(FB,qlo),e(ss,jlo),e(ss,TB),e(TB,Dlo),e(ss,Glo),e(k,Olo),e(k,ls),e(ls,use),e(use,Vlo),e(ls,Xlo),e(ls,MB),e(MB,zlo),e(ls,Qlo),e(ls,EB),e(EB,Wlo),e(ls,Hlo),e(k,Ulo),e(k,is),e(is,bse),e(bse,Jlo),e(is,Ylo),e(is,CB),e(CB,Klo),e(is,Zlo),e(is,wB),e(wB,eio),e(is,oio),e(k,rio),e(k,ds),e(ds,vse),e(vse,tio),e(ds,aio),e(ds,AB),e(AB,nio),e(ds,sio),e(ds,LB),e(LB,lio),e(ds,iio),e(k,dio),e(k,cs),e(cs,Fse),e(Fse,cio),e(cs,fio),e(cs,yB),e(yB,mio),e(cs,gio),e(cs,xB),e(xB,hio),e(cs,pio),e(k,_io),e(k,fs),e(fs,Tse),e(Tse,uio),e(fs,bio),e(fs,$B),e($B,vio),e(fs,Fio),e(fs,kB),e(kB,Tio),e(fs,Mio),e(k,Eio),e(k,ms),e(ms,Mse),e(Mse,Cio),e(ms,wio),e(ms,SB),e(SB,Aio),e(ms,Lio),e(ms,RB),e(RB,yio),e(ms,xio),e(k,$io),e(k,gs),e(gs,Ese),e(Ese,kio),e(gs,Sio),e(gs,PB),e(PB,Rio),e(gs,Pio),e(gs,BB),e(BB,Bio),e(gs,Iio),e(k,Nio),e(k,th),e(th,Cse),e(Cse,qio),e(th,jio),e(th,IB),e(IB,Dio),e(th,Gio),e(k,Oio),e(k,hs),e(hs,wse),e(wse,Vio),e(hs,Xio),e(hs,NB),e(NB,zio),e(hs,Qio),e(hs,qB),e(qB,Wio),e(hs,Hio),e(k,Uio),e(k,ah),e(ah,Ase),e(Ase,Jio),e(ah,Yio),e(ah,jB),e(jB,Kio),e(ah,Zio),e(k,edo),e(k,nh),e(nh,Lse),e(Lse,odo),e(nh,rdo),e(nh,DB),e(DB,tdo),e(nh,ado),e(k,ndo),e(k,ps),e(ps,yse),e(yse,sdo),e(ps,ldo),e(ps,GB),e(GB,ido),e(ps,ddo),e(ps,OB),e(OB,cdo),e(ps,fdo),e(k,mdo),e(k,_s),e(_s,xse),e(xse,gdo),e(_s,hdo),e(_s,VB),e(VB,pdo),e(_s,_do),e(_s,XB),e(XB,udo),e(_s,bdo),e(k,vdo),e(k,us),e(us,$se),e($se,Fdo),e(us,Tdo),e(us,zB),e(zB,Mdo),e(us,Edo),e(us,QB),e(QB,Cdo),e(us,wdo),e(k,Ado),e(k,sh),e(sh,kse),e(kse,Ldo),e(sh,ydo),e(sh,WB),e(WB,xdo),e(sh,$do),e(k,kdo),e(k,bs),e(bs,Sse),e(Sse,Sdo),e(bs,Rdo),e(bs,HB),e(HB,Pdo),e(bs,Bdo),e(bs,UB),e(UB,Ido),e(bs,Ndo),e(k,qdo),e(k,vs),e(vs,Rse),e(Rse,jdo),e(vs,Ddo),e(vs,JB),e(JB,Gdo),e(vs,Odo),e(vs,YB),e(YB,Vdo),e(vs,Xdo),e(k,zdo),e(k,Fs),e(Fs,Pse),e(Pse,Qdo),e(Fs,Wdo),e(Fs,KB),e(KB,Hdo),e(Fs,Udo),e(Fs,ZB),e(ZB,Jdo),e(Fs,Ydo),e(k,Kdo),e(k,Ts),e(Ts,Bse),e(Bse,Zdo),e(Ts,eco),e(Ts,eI),e(eI,oco),e(Ts,rco),e(Ts,oI),e(oI,tco),e(Ts,aco),e(k,nco),e(k,Ms),e(Ms,Ise),e(Ise,sco),e(Ms,lco),e(Ms,rI),e(rI,ico),e(Ms,dco),e(Ms,tI),e(tI,cco),e(Ms,fco),e(k,mco),e(k,Es),e(Es,Nse),e(Nse,gco),e(Es,hco),e(Es,aI),e(aI,pco),e(Es,_co),e(Es,nI),e(nI,uco),e(Es,bco),e(k,vco),e(k,lh),e(lh,qse),e(qse,Fco),e(lh,Tco),e(lh,sI),e(sI,Mco),e(lh,Eco),e(k,Cco),e(k,Cs),e(Cs,jse),e(jse,wco),e(Cs,Aco),e(Cs,lI),e(lI,Lco),e(Cs,yco),e(Cs,iI),e(iI,xco),e(Cs,$co),e(k,kco),e(k,ih),e(ih,Dse),e(Dse,Sco),e(ih,Rco),e(ih,dI),e(dI,Pco),e(ih,Bco),e(k,Ico),e(k,dh),e(dh,Gse),e(Gse,Nco),e(dh,qco),e(dh,cI),e(cI,jco),e(dh,Dco),e(k,Gco),e(k,ch),e(ch,Ose),e(Ose,Oco),e(ch,Vco),e(ch,fI),e(fI,Xco),e(ch,zco),e(k,Qco),e(k,fh),e(fh,Vse),e(Vse,Wco),e(fh,Hco),e(fh,mI),e(mI,Uco),e(fh,Jco),e(k,Yco),e(k,ws),e(ws,Xse),e(Xse,Kco),e(ws,Zco),e(ws,gI),e(gI,efo),e(ws,ofo),e(ws,hI),e(hI,rfo),e(ws,tfo),e(k,afo),e(k,mh),e(mh,zse),e(zse,nfo),e(mh,sfo),e(mh,pI),e(pI,lfo),e(mh,ifo),e(k,dfo),e(k,As),e(As,Qse),e(Qse,cfo),e(As,ffo),e(As,_I),e(_I,mfo),e(As,gfo),e(As,uI),e(uI,hfo),e(As,pfo),e(k,_fo),e(k,Ls),e(Ls,Wse),e(Wse,ufo),e(Ls,bfo),e(Ls,bI),e(bI,vfo),e(Ls,Ffo),e(Ls,vI),e(vI,Tfo),e(Ls,Mfo),e(k,Efo),e(k,ys),e(ys,Hse),e(Hse,Cfo),e(ys,wfo),e(ys,FI),e(FI,Afo),e(ys,Lfo),e(ys,TI),e(TI,yfo),e(ys,xfo),e(k,$fo),e(k,xs),e(xs,Use),e(Use,kfo),e(xs,Sfo),e(xs,MI),e(MI,Rfo),e(xs,Pfo),e(xs,EI),e(EI,Bfo),e(xs,Ifo),e(k,Nfo),e(k,$s),e($s,Jse),e(Jse,qfo),e($s,jfo),e($s,CI),e(CI,Dfo),e($s,Gfo),e($s,wI),e(wI,Ofo),e($s,Vfo),e(k,Xfo),e(k,ks),e(ks,Yse),e(Yse,zfo),e(ks,Qfo),e(ks,AI),e(AI,Wfo),e(ks,Hfo),e(ks,LI),e(LI,Ufo),e(ks,Jfo),e(k,Yfo),e(k,gh),e(gh,Kse),e(Kse,Kfo),e(gh,Zfo),e(gh,yI),e(yI,emo),e(gh,omo),e(k,rmo),e(k,hh),e(hh,Zse),e(Zse,tmo),e(hh,amo),e(hh,xI),e(xI,nmo),e(hh,smo),e(k,lmo),e(k,Ss),e(Ss,ele),e(ele,imo),e(Ss,dmo),e(Ss,$I),e($I,cmo),e(Ss,fmo),e(Ss,kI),e(kI,mmo),e(Ss,gmo),e(k,hmo),e(k,Rs),e(Rs,ole),e(ole,pmo),e(Rs,_mo),e(Rs,SI),e(SI,umo),e(Rs,bmo),e(Rs,RI),e(RI,vmo),e(Rs,Fmo),e(k,Tmo),e(k,Ps),e(Ps,rle),e(rle,Mmo),e(Ps,Emo),e(Ps,PI),e(PI,Cmo),e(Ps,wmo),e(Ps,BI),e(BI,Amo),e(Ps,Lmo),e(k,ymo),e(k,ph),e(ph,tle),e(tle,xmo),e(ph,$mo),e(ph,II),e(II,kmo),e(ph,Smo),e(k,Rmo),e(k,_h),e(_h,ale),e(ale,Pmo),e(_h,Bmo),e(_h,NI),e(NI,Imo),e(_h,Nmo),e(k,qmo),e(k,uh),e(uh,nle),e(nle,jmo),e(uh,Dmo),e(uh,qI),e(qI,Gmo),e(uh,Omo),e(k,Vmo),e(k,Bs),e(Bs,sle),e(sle,Xmo),e(Bs,zmo),e(Bs,jI),e(jI,Qmo),e(Bs,Wmo),e(Bs,DI),e(DI,Hmo),e(Bs,Umo),e(k,Jmo),e(k,Is),e(Is,lle),e(lle,Ymo),e(Is,Kmo),e(Is,GI),e(GI,Zmo),e(Is,ego),e(Is,OI),e(OI,ogo),e(Is,rgo),e(k,tgo),e(k,bh),e(bh,ile),e(ile,ago),e(bh,ngo),e(bh,VI),e(VI,sgo),e(bh,lgo),e(k,igo),e(k,vh),e(vh,dle),e(dle,dgo),e(vh,cgo),e(vh,XI),e(XI,fgo),e(vh,mgo),e(k,ggo),e(k,Fh),e(Fh,cle),e(cle,hgo),e(Fh,pgo),e(Fh,zI),e(zI,_go),e(Fh,ugo),e(k,bgo),e(k,Ns),e(Ns,fle),e(fle,vgo),e(Ns,Fgo),e(Ns,QI),e(QI,Tgo),e(Ns,Mgo),e(Ns,WI),e(WI,Ego),e(Ns,Cgo),e(k,wgo),e(k,Th),e(Th,mle),e(mle,Ago),e(Th,Lgo),e(Th,HI),e(HI,ygo),e(Th,xgo),e(k,$go),e(k,Mh),e(Mh,gle),e(gle,kgo),e(Mh,Sgo),e(Mh,UI),e(UI,Rgo),e(Mh,Pgo),e(k,Bgo),e(k,qs),e(qs,hle),e(hle,Igo),e(qs,Ngo),e(qs,JI),e(JI,qgo),e(qs,jgo),e(qs,YI),e(YI,Dgo),e(qs,Ggo),e(k,Ogo),e(k,js),e(js,ple),e(ple,Vgo),e(js,Xgo),e(js,KI),e(KI,zgo),e(js,Qgo),e(js,ZI),e(ZI,Wgo),e(js,Hgo),e(k,Ugo),e(k,Ds),e(Ds,_le),e(_le,Jgo),e(Ds,Ygo),e(Ds,eN),e(eN,Kgo),e(Ds,Zgo),e(Ds,oN),e(oN,eho),e(Ds,oho),e(k,rho),e(k,Gs),e(Gs,ule),e(ule,tho),e(Gs,aho),e(Gs,rN),e(rN,nho),e(Gs,sho),e(Gs,tN),e(tN,lho),e(Gs,iho),e(Ar,dho),M(Eh,Ar,null),e(Ao,cho),e(Ao,Ch),M(G6,Ch,null),e(Ch,fho),e(Ch,ble),e(ble,mho),b(f,XGe,u),b(f,Si,u),e(Si,wh),e(wh,vle),M(O6,vle,null),e(Si,gho),e(Si,Fle),e(Fle,hho),b(f,zGe,u),b(f,Lo,u),M(V6,Lo,null),e(Lo,pho),e(Lo,X6),e(X6,_ho),e(X6,aN),e(aN,uho),e(X6,bho),e(Lo,vho),e(Lo,z6),e(z6,Fho),e(z6,Tle),e(Tle,Tho),e(z6,Mho),e(Lo,Eho),e(Lo,He),M(Q6,He,null),e(He,Cho),e(He,Mle),e(Mle,who),e(He,Aho),e(He,ka),e(ka,Lho),e(ka,Ele),e(Ele,yho),e(ka,xho),e(ka,Cle),e(Cle,$ho),e(ka,kho),e(ka,wle),e(wle,Sho),e(ka,Rho),e(He,Pho),e(He,Y),e(Y,Ah),e(Ah,Ale),e(Ale,Bho),e(Ah,Iho),e(Ah,nN),e(nN,Nho),e(Ah,qho),e(Y,jho),e(Y,Lh),e(Lh,Lle),e(Lle,Dho),e(Lh,Gho),e(Lh,sN),e(sN,Oho),e(Lh,Vho),e(Y,Xho),e(Y,yh),e(yh,yle),e(yle,zho),e(yh,Qho),e(yh,lN),e(lN,Who),e(yh,Hho),e(Y,Uho),e(Y,xh),e(xh,xle),e(xle,Jho),e(xh,Yho),e(xh,iN),e(iN,Kho),e(xh,Zho),e(Y,epo),e(Y,$h),e($h,$le),e($le,opo),e($h,rpo),e($h,dN),e(dN,tpo),e($h,apo),e(Y,npo),e(Y,kh),e(kh,kle),e(kle,spo),e(kh,lpo),e(kh,cN),e(cN,ipo),e(kh,dpo),e(Y,cpo),e(Y,Sh),e(Sh,Sle),e(Sle,fpo),e(Sh,mpo),e(Sh,fN),e(fN,gpo),e(Sh,hpo),e(Y,ppo),e(Y,Rh),e(Rh,Rle),e(Rle,_po),e(Rh,upo),e(Rh,mN),e(mN,bpo),e(Rh,vpo),e(Y,Fpo),e(Y,Ph),e(Ph,Ple),e(Ple,Tpo),e(Ph,Mpo),e(Ph,gN),e(gN,Epo),e(Ph,Cpo),e(Y,wpo),e(Y,Bh),e(Bh,Ble),e(Ble,Apo),e(Bh,Lpo),e(Bh,hN),e(hN,ypo),e(Bh,xpo),e(Y,$po),e(Y,Ih),e(Ih,Ile),e(Ile,kpo),e(Ih,Spo),e(Ih,pN),e(pN,Rpo),e(Ih,Ppo),e(Y,Bpo),e(Y,Nh),e(Nh,Nle),e(Nle,Ipo),e(Nh,Npo),e(Nh,_N),e(_N,qpo),e(Nh,jpo),e(Y,Dpo),e(Y,qh),e(qh,qle),e(qle,Gpo),e(qh,Opo),e(qh,uN),e(uN,Vpo),e(qh,Xpo),e(Y,zpo),e(Y,jh),e(jh,jle),e(jle,Qpo),e(jh,Wpo),e(jh,bN),e(bN,Hpo),e(jh,Upo),e(Y,Jpo),e(Y,Dh),e(Dh,Dle),e(Dle,Ypo),e(Dh,Kpo),e(Dh,vN),e(vN,Zpo),e(Dh,e_o),e(Y,o_o),e(Y,Gh),e(Gh,Gle),e(Gle,r_o),e(Gh,t_o),e(Gh,FN),e(FN,a_o),e(Gh,n_o),e(Y,s_o),e(Y,Oh),e(Oh,Ole),e(Ole,l_o),e(Oh,i_o),e(Oh,TN),e(TN,d_o),e(Oh,c_o),e(Y,f_o),e(Y,Vh),e(Vh,Vle),e(Vle,m_o),e(Vh,g_o),e(Vh,MN),e(MN,h_o),e(Vh,p_o),e(Y,__o),e(Y,Xh),e(Xh,Xle),e(Xle,u_o),e(Xh,b_o),e(Xh,EN),e(EN,v_o),e(Xh,F_o),e(Y,T_o),e(Y,zh),e(zh,zle),e(zle,M_o),e(zh,E_o),e(zh,CN),e(CN,C_o),e(zh,w_o),e(Y,A_o),e(Y,Qh),e(Qh,Qle),e(Qle,L_o),e(Qh,y_o),e(Qh,wN),e(wN,x_o),e(Qh,$_o),e(Y,k_o),e(Y,Wh),e(Wh,Wle),e(Wle,S_o),e(Wh,R_o),e(Wh,AN),e(AN,P_o),e(Wh,B_o),e(Y,I_o),e(Y,Hh),e(Hh,Hle),e(Hle,N_o),e(Hh,q_o),e(Hh,LN),e(LN,j_o),e(Hh,D_o),e(Y,G_o),e(Y,Uh),e(Uh,Ule),e(Ule,O_o),e(Uh,V_o),e(Uh,yN),e(yN,X_o),e(Uh,z_o),e(Y,Q_o),e(Y,Jh),e(Jh,Jle),e(Jle,W_o),e(Jh,H_o),e(Jh,xN),e(xN,U_o),e(Jh,J_o),e(Y,Y_o),e(Y,Yh),e(Yh,Yle),e(Yle,K_o),e(Yh,Z_o),e(Yh,$N),e($N,euo),e(Yh,ouo),e(Y,ruo),e(Y,Kh),e(Kh,Kle),e(Kle,tuo),e(Kh,auo),e(Kh,kN),e(kN,nuo),e(Kh,suo),e(Y,luo),e(Y,Zh),e(Zh,Zle),e(Zle,iuo),e(Zh,duo),e(Zh,SN),e(SN,cuo),e(Zh,fuo),e(Y,muo),e(Y,ep),e(ep,eie),e(eie,guo),e(ep,huo),e(ep,RN),e(RN,puo),e(ep,_uo),e(Y,uuo),e(Y,op),e(op,oie),e(oie,buo),e(op,vuo),e(op,PN),e(PN,Fuo),e(op,Tuo),e(Y,Muo),e(Y,rp),e(rp,rie),e(rie,Euo),e(rp,Cuo),e(rp,BN),e(BN,wuo),e(rp,Auo),e(Y,Luo),e(Y,tp),e(tp,tie),e(tie,yuo),e(tp,xuo),e(tp,IN),e(IN,$uo),e(tp,kuo),e(He,Suo),M(ap,He,null),e(He,Ruo),M(np,He,null),e(Lo,Puo),e(Lo,sp),M(W6,sp,null),e(sp,Buo),e(sp,aie),e(aie,Iuo),b(f,QGe,u),b(f,Ri,u),e(Ri,lp),e(lp,nie),M(H6,nie,null),e(Ri,Nuo),e(Ri,sie),e(sie,quo),b(f,WGe,u),b(f,yo,u),M(U6,yo,null),e(yo,juo),e(yo,J6),e(J6,Duo),e(J6,NN),e(NN,Guo),e(J6,Ouo),e(yo,Vuo),e(yo,Y6),e(Y6,Xuo),e(Y6,lie),e(lie,zuo),e(Y6,Quo),e(yo,Wuo),e(yo,Ue),M(K6,Ue,null),e(Ue,Huo),e(Ue,iie),e(iie,Uuo),e(Ue,Juo),e(Ue,Pi),e(Pi,Yuo),e(Pi,die),e(die,Kuo),e(Pi,Zuo),e(Pi,cie),e(cie,e7o),e(Pi,o7o),e(Ue,r7o),e(Ue,pe),e(pe,ip),e(ip,fie),e(fie,t7o),e(ip,a7o),e(ip,qN),e(qN,n7o),e(ip,s7o),e(pe,l7o),e(pe,dp),e(dp,mie),e(mie,i7o),e(dp,d7o),e(dp,gie),e(gie,c7o),e(dp,f7o),e(pe,m7o),e(pe,cp),e(cp,hie),e(hie,g7o),e(cp,h7o),e(cp,jN),e(jN,p7o),e(cp,_7o),e(pe,u7o),e(pe,fp),e(fp,pie),e(pie,b7o),e(fp,v7o),e(fp,DN),e(DN,F7o),e(fp,T7o),e(pe,M7o),e(pe,mp),e(mp,_ie),e(_ie,E7o),e(mp,C7o),e(mp,GN),e(GN,w7o),e(mp,A7o),e(pe,L7o),e(pe,gp),e(gp,uie),e(uie,y7o),e(gp,x7o),e(gp,ON),e(ON,$7o),e(gp,k7o),e(pe,S7o),e(pe,hp),e(hp,bie),e(bie,R7o),e(hp,P7o),e(hp,VN),e(VN,B7o),e(hp,I7o),e(pe,N7o),e(pe,pp),e(pp,vie),e(vie,q7o),e(pp,j7o),e(pp,XN),e(XN,D7o),e(pp,G7o),e(pe,O7o),e(pe,_p),e(_p,Fie),e(Fie,V7o),e(_p,X7o),e(_p,zN),e(zN,z7o),e(_p,Q7o),e(pe,W7o),e(pe,up),e(up,Tie),e(Tie,H7o),e(up,U7o),e(up,QN),e(QN,J7o),e(up,Y7o),e(pe,K7o),e(pe,bp),e(bp,Mie),e(Mie,Z7o),e(bp,e1o),e(bp,WN),e(WN,o1o),e(bp,r1o),e(pe,t1o),e(pe,vp),e(vp,Eie),e(Eie,a1o),e(vp,n1o),e(vp,HN),e(HN,s1o),e(vp,l1o),e(pe,i1o),e(pe,Fp),e(Fp,Cie),e(Cie,d1o),e(Fp,c1o),e(Fp,UN),e(UN,f1o),e(Fp,m1o),e(pe,g1o),e(pe,Tp),e(Tp,wie),e(wie,h1o),e(Tp,p1o),e(Tp,JN),e(JN,_1o),e(Tp,u1o),e(pe,b1o),e(pe,Mp),e(Mp,Aie),e(Aie,v1o),e(Mp,F1o),e(Mp,YN),e(YN,T1o),e(Mp,M1o),e(pe,E1o),e(pe,Ep),e(Ep,Lie),e(Lie,C1o),e(Ep,w1o),e(Ep,KN),e(KN,A1o),e(Ep,L1o),e(pe,y1o),e(pe,Cp),e(Cp,yie),e(yie,x1o),e(Cp,$1o),e(Cp,ZN),e(ZN,k1o),e(Cp,S1o),e(Ue,R1o),M(wp,Ue,null),e(Ue,P1o),M(Ap,Ue,null),e(yo,B1o),e(yo,Lp),M(Z6,Lp,null),e(Lp,I1o),e(Lp,xie),e(xie,N1o),b(f,HGe,u),b(f,Bi,u),e(Bi,yp),e(yp,$ie),M(eL,$ie,null),e(Bi,q1o),e(Bi,kie),e(kie,j1o),b(f,UGe,u),b(f,xo,u),M(oL,xo,null),e(xo,D1o),e(xo,Ii),e(Ii,G1o),e(Ii,eq),e(eq,O1o),e(Ii,V1o),e(Ii,oq),e(oq,X1o),e(Ii,z1o),e(xo,Q1o),e(xo,rL),e(rL,W1o),e(rL,Sie),e(Sie,H1o),e(rL,U1o),e(xo,J1o),e(xo,nt),M(tL,nt,null),e(nt,Y1o),e(nt,Rie),e(Rie,K1o),e(nt,Z1o),e(nt,Ni),e(Ni,e2o),e(Ni,Pie),e(Pie,o2o),e(Ni,r2o),e(Ni,rq),e(rq,t2o),e(Ni,a2o),e(nt,n2o),M(xp,nt,null),e(xo,s2o),e(xo,Je),M(aL,Je,null),e(Je,l2o),e(Je,Bie),e(Bie,i2o),e(Je,d2o),e(Je,Sa),e(Sa,c2o),e(Sa,Iie),e(Iie,f2o),e(Sa,m2o),e(Sa,Nie),e(Nie,g2o),e(Sa,h2o),e(Sa,qie),e(qie,p2o),e(Sa,_2o),e(Je,u2o),e(Je,y),e(y,$p),e($p,jie),e(jie,b2o),e($p,v2o),e($p,tq),e(tq,F2o),e($p,T2o),e(y,M2o),e(y,kp),e(kp,Die),e(Die,E2o),e(kp,C2o),e(kp,aq),e(aq,w2o),e(kp,A2o),e(y,L2o),e(y,Sp),e(Sp,Gie),e(Gie,y2o),e(Sp,x2o),e(Sp,nq),e(nq,$2o),e(Sp,k2o),e(y,S2o),e(y,Rp),e(Rp,Oie),e(Oie,R2o),e(Rp,P2o),e(Rp,sq),e(sq,B2o),e(Rp,I2o),e(y,N2o),e(y,Pp),e(Pp,Vie),e(Vie,q2o),e(Pp,j2o),e(Pp,lq),e(lq,D2o),e(Pp,G2o),e(y,O2o),e(y,Bp),e(Bp,Xie),e(Xie,V2o),e(Bp,X2o),e(Bp,iq),e(iq,z2o),e(Bp,Q2o),e(y,W2o),e(y,Ip),e(Ip,zie),e(zie,H2o),e(Ip,U2o),e(Ip,dq),e(dq,J2o),e(Ip,Y2o),e(y,K2o),e(y,Np),e(Np,Qie),e(Qie,Z2o),e(Np,ebo),e(Np,cq),e(cq,obo),e(Np,rbo),e(y,tbo),e(y,qp),e(qp,Wie),e(Wie,abo),e(qp,nbo),e(qp,fq),e(fq,sbo),e(qp,lbo),e(y,ibo),e(y,jp),e(jp,Hie),e(Hie,dbo),e(jp,cbo),e(jp,mq),e(mq,fbo),e(jp,mbo),e(y,gbo),e(y,Dp),e(Dp,Uie),e(Uie,hbo),e(Dp,pbo),e(Dp,gq),e(gq,_bo),e(Dp,ubo),e(y,bbo),e(y,Gp),e(Gp,Jie),e(Jie,vbo),e(Gp,Fbo),e(Gp,hq),e(hq,Tbo),e(Gp,Mbo),e(y,Ebo),e(y,Op),e(Op,Yie),e(Yie,Cbo),e(Op,wbo),e(Op,pq),e(pq,Abo),e(Op,Lbo),e(y,ybo),e(y,Vp),e(Vp,Kie),e(Kie,xbo),e(Vp,$bo),e(Vp,_q),e(_q,kbo),e(Vp,Sbo),e(y,Rbo),e(y,Xp),e(Xp,Zie),e(Zie,Pbo),e(Xp,Bbo),e(Xp,uq),e(uq,Ibo),e(Xp,Nbo),e(y,qbo),e(y,zp),e(zp,ede),e(ede,jbo),e(zp,Dbo),e(zp,bq),e(bq,Gbo),e(zp,Obo),e(y,Vbo),e(y,Qp),e(Qp,ode),e(ode,Xbo),e(Qp,zbo),e(Qp,vq),e(vq,Qbo),e(Qp,Wbo),e(y,Hbo),e(y,Wp),e(Wp,rde),e(rde,Ubo),e(Wp,Jbo),e(Wp,Fq),e(Fq,Ybo),e(Wp,Kbo),e(y,Zbo),e(y,Hp),e(Hp,tde),e(tde,evo),e(Hp,ovo),e(Hp,Tq),e(Tq,rvo),e(Hp,tvo),e(y,avo),e(y,Up),e(Up,ade),e(ade,nvo),e(Up,svo),e(Up,Mq),e(Mq,lvo),e(Up,ivo),e(y,dvo),e(y,Jp),e(Jp,nde),e(nde,cvo),e(Jp,fvo),e(Jp,Eq),e(Eq,mvo),e(Jp,gvo),e(y,hvo),e(y,Yp),e(Yp,sde),e(sde,pvo),e(Yp,_vo),e(Yp,Cq),e(Cq,uvo),e(Yp,bvo),e(y,vvo),e(y,Kp),e(Kp,lde),e(lde,Fvo),e(Kp,Tvo),e(Kp,wq),e(wq,Mvo),e(Kp,Evo),e(y,Cvo),e(y,Zp),e(Zp,ide),e(ide,wvo),e(Zp,Avo),e(Zp,Aq),e(Aq,Lvo),e(Zp,yvo),e(y,xvo),e(y,e_),e(e_,dde),e(dde,$vo),e(e_,kvo),e(e_,Lq),e(Lq,Svo),e(e_,Rvo),e(y,Pvo),e(y,o_),e(o_,cde),e(cde,Bvo),e(o_,Ivo),e(o_,yq),e(yq,Nvo),e(o_,qvo),e(y,jvo),e(y,r_),e(r_,fde),e(fde,Dvo),e(r_,Gvo),e(r_,xq),e(xq,Ovo),e(r_,Vvo),e(y,Xvo),e(y,t_),e(t_,mde),e(mde,zvo),e(t_,Qvo),e(t_,$q),e($q,Wvo),e(t_,Hvo),e(y,Uvo),e(y,a_),e(a_,gde),e(gde,Jvo),e(a_,Yvo),e(a_,kq),e(kq,Kvo),e(a_,Zvo),e(y,eFo),e(y,n_),e(n_,hde),e(hde,oFo),e(n_,rFo),e(n_,Sq),e(Sq,tFo),e(n_,aFo),e(y,nFo),e(y,s_),e(s_,pde),e(pde,sFo),e(s_,lFo),e(s_,Rq),e(Rq,iFo),e(s_,dFo),e(y,cFo),e(y,l_),e(l_,_de),e(_de,fFo),e(l_,mFo),e(l_,Pq),e(Pq,gFo),e(l_,hFo),e(y,pFo),e(y,i_),e(i_,ude),e(ude,_Fo),e(i_,uFo),e(i_,Bq),e(Bq,bFo),e(i_,vFo),e(y,FFo),e(y,Os),e(Os,bde),e(bde,TFo),e(Os,MFo),e(Os,Iq),e(Iq,EFo),e(Os,CFo),e(Os,Nq),e(Nq,wFo),e(Os,AFo),e(y,LFo),e(y,d_),e(d_,vde),e(vde,yFo),e(d_,xFo),e(d_,qq),e(qq,$Fo),e(d_,kFo),e(y,SFo),e(y,c_),e(c_,Fde),e(Fde,RFo),e(c_,PFo),e(c_,jq),e(jq,BFo),e(c_,IFo),e(y,NFo),e(y,f_),e(f_,Tde),e(Tde,qFo),e(f_,jFo),e(f_,Dq),e(Dq,DFo),e(f_,GFo),e(y,OFo),e(y,m_),e(m_,Mde),e(Mde,VFo),e(m_,XFo),e(m_,Gq),e(Gq,zFo),e(m_,QFo),e(y,WFo),e(y,g_),e(g_,Ede),e(Ede,HFo),e(g_,UFo),e(g_,Oq),e(Oq,JFo),e(g_,YFo),e(y,KFo),e(y,h_),e(h_,Cde),e(Cde,ZFo),e(h_,eTo),e(h_,Vq),e(Vq,oTo),e(h_,rTo),e(y,tTo),e(y,p_),e(p_,wde),e(wde,aTo),e(p_,nTo),e(p_,Xq),e(Xq,sTo),e(p_,lTo),e(y,iTo),e(y,__),e(__,Ade),e(Ade,dTo),e(__,cTo),e(__,zq),e(zq,fTo),e(__,mTo),e(y,gTo),e(y,u_),e(u_,Lde),e(Lde,hTo),e(u_,pTo),e(u_,Qq),e(Qq,_To),e(u_,uTo),e(y,bTo),e(y,b_),e(b_,yde),e(yde,vTo),e(b_,FTo),e(b_,Wq),e(Wq,TTo),e(b_,MTo),e(y,ETo),e(y,v_),e(v_,xde),e(xde,CTo),e(v_,wTo),e(v_,Hq),e(Hq,ATo),e(v_,LTo),e(y,yTo),e(y,F_),e(F_,$de),e($de,xTo),e(F_,$To),e(F_,Uq),e(Uq,kTo),e(F_,STo),e(y,RTo),e(y,T_),e(T_,kde),e(kde,PTo),e(T_,BTo),e(T_,Jq),e(Jq,ITo),e(T_,NTo),e(y,qTo),e(y,M_),e(M_,Sde),e(Sde,jTo),e(M_,DTo),e(M_,Yq),e(Yq,GTo),e(M_,OTo),e(y,VTo),e(y,E_),e(E_,Rde),e(Rde,XTo),e(E_,zTo),e(E_,Kq),e(Kq,QTo),e(E_,WTo),e(y,HTo),e(y,C_),e(C_,Pde),e(Pde,UTo),e(C_,JTo),e(C_,Zq),e(Zq,YTo),e(C_,KTo),e(y,ZTo),e(y,w_),e(w_,Bde),e(Bde,e8o),e(w_,o8o),e(w_,ej),e(ej,r8o),e(w_,t8o),e(y,a8o),e(y,A_),e(A_,Ide),e(Ide,n8o),e(A_,s8o),e(A_,oj),e(oj,l8o),e(A_,i8o),e(y,d8o),e(y,L_),e(L_,Nde),e(Nde,c8o),e(L_,f8o),e(L_,rj),e(rj,m8o),e(L_,g8o),e(y,h8o),e(y,y_),e(y_,qde),e(qde,p8o),e(y_,_8o),e(y_,tj),e(tj,u8o),e(y_,b8o),e(y,v8o),e(y,x_),e(x_,jde),e(jde,F8o),e(x_,T8o),e(x_,aj),e(aj,M8o),e(x_,E8o),e(y,C8o),e(y,$_),e($_,Dde),e(Dde,w8o),e($_,A8o),e($_,nj),e(nj,L8o),e($_,y8o),e(y,x8o),e(y,k_),e(k_,Gde),e(Gde,$8o),e(k_,k8o),e(k_,sj),e(sj,S8o),e(k_,R8o),e(y,P8o),e(y,S_),e(S_,Ode),e(Ode,B8o),e(S_,I8o),e(S_,lj),e(lj,N8o),e(S_,q8o),e(y,j8o),e(y,R_),e(R_,Vde),e(Vde,D8o),e(R_,G8o),e(R_,ij),e(ij,O8o),e(R_,V8o),e(y,X8o),e(y,P_),e(P_,Xde),e(Xde,z8o),e(P_,Q8o),e(P_,dj),e(dj,W8o),e(P_,H8o),e(y,U8o),e(y,B_),e(B_,zde),e(zde,J8o),e(B_,Y8o),e(B_,cj),e(cj,K8o),e(B_,Z8o),e(y,eMo),e(y,I_),e(I_,Qde),e(Qde,oMo),e(I_,rMo),e(I_,fj),e(fj,tMo),e(I_,aMo),e(y,nMo),e(y,N_),e(N_,Wde),e(Wde,sMo),e(N_,lMo),e(N_,mj),e(mj,iMo),e(N_,dMo),e(y,cMo),e(y,q_),e(q_,Hde),e(Hde,fMo),e(q_,mMo),e(q_,gj),e(gj,gMo),e(q_,hMo),e(y,pMo),e(y,j_),e(j_,Ude),e(Ude,_Mo),e(j_,uMo),e(j_,hj),e(hj,bMo),e(j_,vMo),e(y,FMo),e(y,D_),e(D_,Jde),e(Jde,TMo),e(D_,MMo),e(D_,pj),e(pj,EMo),e(D_,CMo),e(y,wMo),e(y,G_),e(G_,Yde),e(Yde,AMo),e(G_,LMo),e(G_,_j),e(_j,yMo),e(G_,xMo),e(y,$Mo),e(y,O_),e(O_,Kde),e(Kde,kMo),e(O_,SMo),e(O_,uj),e(uj,RMo),e(O_,PMo),e(y,BMo),e(y,V_),e(V_,Zde),e(Zde,IMo),e(V_,NMo),e(V_,bj),e(bj,qMo),e(V_,jMo),e(y,DMo),e(y,X_),e(X_,ece),e(ece,GMo),e(X_,OMo),e(X_,vj),e(vj,VMo),e(X_,XMo),e(y,zMo),e(y,z_),e(z_,oce),e(oce,QMo),e(z_,WMo),e(z_,Fj),e(Fj,HMo),e(z_,UMo),e(y,JMo),e(y,Q_),e(Q_,rce),e(rce,YMo),e(Q_,KMo),e(Q_,Tj),e(Tj,ZMo),e(Q_,eEo),e(y,oEo),e(y,W_),e(W_,tce),e(tce,rEo),e(W_,tEo),e(W_,Mj),e(Mj,aEo),e(W_,nEo),e(y,sEo),e(y,H_),e(H_,ace),e(ace,lEo),e(H_,iEo),e(H_,Ej),e(Ej,dEo),e(H_,cEo),e(y,fEo),e(y,U_),e(U_,nce),e(nce,mEo),e(U_,gEo),e(U_,Cj),e(Cj,hEo),e(U_,pEo),e(y,_Eo),e(y,J_),e(J_,sce),e(sce,uEo),e(J_,bEo),e(J_,wj),e(wj,vEo),e(J_,FEo),e(y,TEo),e(y,Y_),e(Y_,lce),e(lce,MEo),e(Y_,EEo),e(Y_,Aj),e(Aj,CEo),e(Y_,wEo),e(y,AEo),e(y,K_),e(K_,ice),e(ice,LEo),e(K_,yEo),e(K_,Lj),e(Lj,xEo),e(K_,$Eo),e(y,kEo),e(y,Z_),e(Z_,dce),e(dce,SEo),e(Z_,REo),e(Z_,yj),e(yj,PEo),e(Z_,BEo),e(y,IEo),e(y,eu),e(eu,cce),e(cce,NEo),e(eu,qEo),e(eu,xj),e(xj,jEo),e(eu,DEo),e(y,GEo),e(y,ou),e(ou,fce),e(fce,OEo),e(ou,VEo),e(ou,$j),e($j,XEo),e(ou,zEo),e(y,QEo),e(y,ru),e(ru,mce),e(mce,WEo),e(ru,HEo),e(ru,kj),e(kj,UEo),e(ru,JEo),e(y,YEo),e(y,tu),e(tu,gce),e(gce,KEo),e(tu,ZEo),e(tu,Sj),e(Sj,e4o),e(tu,o4o),e(y,r4o),e(y,au),e(au,hce),e(hce,t4o),e(au,a4o),e(au,Rj),e(Rj,n4o),e(au,s4o),e(y,l4o),e(y,nu),e(nu,pce),e(pce,i4o),e(nu,d4o),e(nu,Pj),e(Pj,c4o),e(nu,f4o),e(y,m4o),e(y,su),e(su,_ce),e(_ce,g4o),e(su,h4o),e(su,Bj),e(Bj,p4o),e(su,_4o),e(y,u4o),e(y,lu),e(lu,uce),e(uce,b4o),e(lu,v4o),e(lu,Ij),e(Ij,F4o),e(lu,T4o),e(y,M4o),e(y,iu),e(iu,bce),e(bce,E4o),e(iu,C4o),e(iu,Nj),e(Nj,w4o),e(iu,A4o),e(y,L4o),e(y,du),e(du,vce),e(vce,y4o),e(du,x4o),e(du,qj),e(qj,$4o),e(du,k4o),e(y,S4o),e(y,cu),e(cu,Fce),e(Fce,R4o),e(cu,P4o),e(cu,jj),e(jj,B4o),e(cu,I4o),e(y,N4o),e(y,fu),e(fu,Tce),e(Tce,q4o),e(fu,j4o),e(fu,Dj),e(Dj,D4o),e(fu,G4o),e(y,O4o),e(y,mu),e(mu,Mce),e(Mce,V4o),e(mu,X4o),e(mu,Gj),e(Gj,z4o),e(mu,Q4o),e(y,W4o),e(y,gu),e(gu,Ece),e(Ece,H4o),e(gu,U4o),e(gu,Oj),e(Oj,J4o),e(gu,Y4o),e(y,K4o),e(y,hu),e(hu,Cce),e(Cce,Z4o),e(hu,eCo),e(hu,Vj),e(Vj,oCo),e(hu,rCo),e(y,tCo),e(y,pu),e(pu,wce),e(wce,aCo),e(pu,nCo),e(pu,Xj),e(Xj,sCo),e(pu,lCo),e(y,iCo),e(y,_u),e(_u,Ace),e(Ace,dCo),e(_u,cCo),e(_u,zj),e(zj,fCo),e(_u,mCo),e(y,gCo),e(y,uu),e(uu,Lce),e(Lce,hCo),e(uu,pCo),e(uu,Qj),e(Qj,_Co),e(uu,uCo),e(y,bCo),e(y,bu),e(bu,yce),e(yce,vCo),e(bu,FCo),e(bu,Wj),e(Wj,TCo),e(bu,MCo),e(y,ECo),e(y,vu),e(vu,xce),e(xce,CCo),e(vu,wCo),e(vu,Hj),e(Hj,ACo),e(vu,LCo),e(y,yCo),e(y,Fu),e(Fu,$ce),e($ce,xCo),e(Fu,$Co),e(Fu,Uj),e(Uj,kCo),e(Fu,SCo),e(y,RCo),e(y,Tu),e(Tu,kce),e(kce,PCo),e(Tu,BCo),e(Tu,Jj),e(Jj,ICo),e(Tu,NCo),e(y,qCo),e(y,Mu),e(Mu,Sce),e(Sce,jCo),e(Mu,DCo),e(Mu,Yj),e(Yj,GCo),e(Mu,OCo),e(y,VCo),e(y,Eu),e(Eu,Rce),e(Rce,XCo),e(Eu,zCo),e(Eu,Kj),e(Kj,QCo),e(Eu,WCo),e(y,HCo),e(y,Cu),e(Cu,Pce),e(Pce,UCo),e(Cu,JCo),e(Cu,Zj),e(Zj,YCo),e(Cu,KCo),e(y,ZCo),e(y,wu),e(wu,Bce),e(Bce,e5o),e(wu,o5o),e(wu,eD),e(eD,r5o),e(wu,t5o),e(y,a5o),e(y,Au),e(Au,Ice),e(Ice,n5o),e(Au,s5o),e(Au,oD),e(oD,l5o),e(Au,i5o),e(y,d5o),e(y,Lu),e(Lu,Nce),e(Nce,c5o),e(Lu,f5o),e(Lu,rD),e(rD,m5o),e(Lu,g5o),e(Je,h5o),e(Je,yu),e(yu,p5o),e(yu,qce),e(qce,_5o),e(yu,u5o),e(yu,jce),e(jce,b5o),e(Je,v5o),M(xu,Je,null),b(f,JGe,u),b(f,qi,u),e(qi,$u),e($u,Dce),M(nL,Dce,null),e(qi,F5o),e(qi,Gce),e(Gce,T5o),b(f,YGe,u),b(f,$o,u),M(sL,$o,null),e($o,M5o),e($o,ji),e(ji,E5o),e(ji,tD),e(tD,C5o),e(ji,w5o),e(ji,aD),e(aD,A5o),e(ji,L5o),e($o,y5o),e($o,lL),e(lL,x5o),e(lL,Oce),e(Oce,$5o),e(lL,k5o),e($o,S5o),e($o,st),M(iL,st,null),e(st,R5o),e(st,Vce),e(Vce,P5o),e(st,B5o),e(st,Di),e(Di,I5o),e(Di,Xce),e(Xce,N5o),e(Di,q5o),e(Di,nD),e(nD,j5o),e(Di,D5o),e(st,G5o),M(ku,st,null),e($o,O5o),e($o,Ye),M(dL,Ye,null),e(Ye,V5o),e(Ye,zce),e(zce,X5o),e(Ye,z5o),e(Ye,Ra),e(Ra,Q5o),e(Ra,Qce),e(Qce,W5o),e(Ra,H5o),e(Ra,Wce),e(Wce,U5o),e(Ra,J5o),e(Ra,Hce),e(Hce,Y5o),e(Ra,K5o),e(Ye,Z5o),e(Ye,G),e(G,Su),e(Su,Uce),e(Uce,e3o),e(Su,o3o),e(Su,sD),e(sD,r3o),e(Su,t3o),e(G,a3o),e(G,Ru),e(Ru,Jce),e(Jce,n3o),e(Ru,s3o),e(Ru,lD),e(lD,l3o),e(Ru,i3o),e(G,d3o),e(G,Pu),e(Pu,Yce),e(Yce,c3o),e(Pu,f3o),e(Pu,iD),e(iD,m3o),e(Pu,g3o),e(G,h3o),e(G,Bu),e(Bu,Kce),e(Kce,p3o),e(Bu,_3o),e(Bu,dD),e(dD,u3o),e(Bu,b3o),e(G,v3o),e(G,Iu),e(Iu,Zce),e(Zce,F3o),e(Iu,T3o),e(Iu,cD),e(cD,M3o),e(Iu,E3o),e(G,C3o),e(G,Nu),e(Nu,efe),e(efe,w3o),e(Nu,A3o),e(Nu,fD),e(fD,L3o),e(Nu,y3o),e(G,x3o),e(G,qu),e(qu,ofe),e(ofe,$3o),e(qu,k3o),e(qu,mD),e(mD,S3o),e(qu,R3o),e(G,P3o),e(G,ju),e(ju,rfe),e(rfe,B3o),e(ju,I3o),e(ju,gD),e(gD,N3o),e(ju,q3o),e(G,j3o),e(G,Du),e(Du,tfe),e(tfe,D3o),e(Du,G3o),e(Du,hD),e(hD,O3o),e(Du,V3o),e(G,X3o),e(G,Gu),e(Gu,afe),e(afe,z3o),e(Gu,Q3o),e(Gu,pD),e(pD,W3o),e(Gu,H3o),e(G,U3o),e(G,Ou),e(Ou,nfe),e(nfe,J3o),e(Ou,Y3o),e(Ou,_D),e(_D,K3o),e(Ou,Z3o),e(G,e0o),e(G,Vu),e(Vu,sfe),e(sfe,o0o),e(Vu,r0o),e(Vu,uD),e(uD,t0o),e(Vu,a0o),e(G,n0o),e(G,Xu),e(Xu,lfe),e(lfe,s0o),e(Xu,l0o),e(Xu,bD),e(bD,i0o),e(Xu,d0o),e(G,c0o),e(G,zu),e(zu,ife),e(ife,f0o),e(zu,m0o),e(zu,vD),e(vD,g0o),e(zu,h0o),e(G,p0o),e(G,Qu),e(Qu,dfe),e(dfe,_0o),e(Qu,u0o),e(Qu,FD),e(FD,b0o),e(Qu,v0o),e(G,F0o),e(G,Wu),e(Wu,cfe),e(cfe,T0o),e(Wu,M0o),e(Wu,TD),e(TD,E0o),e(Wu,C0o),e(G,w0o),e(G,Hu),e(Hu,ffe),e(ffe,A0o),e(Hu,L0o),e(Hu,MD),e(MD,y0o),e(Hu,x0o),e(G,$0o),e(G,Uu),e(Uu,mfe),e(mfe,k0o),e(Uu,S0o),e(Uu,ED),e(ED,R0o),e(Uu,P0o),e(G,B0o),e(G,Ju),e(Ju,gfe),e(gfe,I0o),e(Ju,N0o),e(Ju,CD),e(CD,q0o),e(Ju,j0o),e(G,D0o),e(G,Yu),e(Yu,hfe),e(hfe,G0o),e(Yu,O0o),e(Yu,wD),e(wD,V0o),e(Yu,X0o),e(G,z0o),e(G,Ku),e(Ku,pfe),e(pfe,Q0o),e(Ku,W0o),e(Ku,AD),e(AD,H0o),e(Ku,U0o),e(G,J0o),e(G,Zu),e(Zu,_fe),e(_fe,Y0o),e(Zu,K0o),e(Zu,LD),e(LD,Z0o),e(Zu,ewo),e(G,owo),e(G,e7),e(e7,ufe),e(ufe,rwo),e(e7,two),e(e7,yD),e(yD,awo),e(e7,nwo),e(G,swo),e(G,o7),e(o7,bfe),e(bfe,lwo),e(o7,iwo),e(o7,xD),e(xD,dwo),e(o7,cwo),e(G,fwo),e(G,r7),e(r7,vfe),e(vfe,mwo),e(r7,gwo),e(r7,$D),e($D,hwo),e(r7,pwo),e(G,_wo),e(G,t7),e(t7,Ffe),e(Ffe,uwo),e(t7,bwo),e(t7,kD),e(kD,vwo),e(t7,Fwo),e(G,Two),e(G,a7),e(a7,Tfe),e(Tfe,Mwo),e(a7,Ewo),e(a7,SD),e(SD,Cwo),e(a7,wwo),e(G,Awo),e(G,n7),e(n7,Mfe),e(Mfe,Lwo),e(n7,ywo),e(n7,RD),e(RD,xwo),e(n7,$wo),e(G,kwo),e(G,s7),e(s7,Efe),e(Efe,Swo),e(s7,Rwo),e(s7,PD),e(PD,Pwo),e(s7,Bwo),e(G,Iwo),e(G,l7),e(l7,Cfe),e(Cfe,Nwo),e(l7,qwo),e(l7,BD),e(BD,jwo),e(l7,Dwo),e(G,Gwo),e(G,i7),e(i7,wfe),e(wfe,Owo),e(i7,Vwo),e(i7,ID),e(ID,Xwo),e(i7,zwo),e(G,Qwo),e(G,d7),e(d7,Afe),e(Afe,Wwo),e(d7,Hwo),e(d7,ND),e(ND,Uwo),e(d7,Jwo),e(G,Ywo),e(G,c7),e(c7,Lfe),e(Lfe,Kwo),e(c7,Zwo),e(c7,qD),e(qD,eAo),e(c7,oAo),e(G,rAo),e(G,f7),e(f7,yfe),e(yfe,tAo),e(f7,aAo),e(f7,jD),e(jD,nAo),e(f7,sAo),e(G,lAo),e(G,m7),e(m7,xfe),e(xfe,iAo),e(m7,dAo),e(m7,DD),e(DD,cAo),e(m7,fAo),e(G,mAo),e(G,g7),e(g7,$fe),e($fe,gAo),e(g7,hAo),e(g7,GD),e(GD,pAo),e(g7,_Ao),e(G,uAo),e(G,h7),e(h7,kfe),e(kfe,bAo),e(h7,vAo),e(h7,OD),e(OD,FAo),e(h7,TAo),e(G,MAo),e(G,p7),e(p7,Sfe),e(Sfe,EAo),e(p7,CAo),e(p7,VD),e(VD,wAo),e(p7,AAo),e(G,LAo),e(G,_7),e(_7,Rfe),e(Rfe,yAo),e(_7,xAo),e(_7,XD),e(XD,$Ao),e(_7,kAo),e(G,SAo),e(G,u7),e(u7,Pfe),e(Pfe,RAo),e(u7,PAo),e(u7,zD),e(zD,BAo),e(u7,IAo),e(G,NAo),e(G,b7),e(b7,Bfe),e(Bfe,qAo),e(b7,jAo),e(b7,QD),e(QD,DAo),e(b7,GAo),e(G,OAo),e(G,v7),e(v7,Ife),e(Ife,VAo),e(v7,XAo),e(v7,WD),e(WD,zAo),e(v7,QAo),e(G,WAo),e(G,F7),e(F7,Nfe),e(Nfe,HAo),e(F7,UAo),e(F7,HD),e(HD,JAo),e(F7,YAo),e(G,KAo),e(G,T7),e(T7,qfe),e(qfe,ZAo),e(T7,e6o),e(T7,UD),e(UD,o6o),e(T7,r6o),e(Ye,t6o),e(Ye,M7),e(M7,a6o),e(M7,jfe),e(jfe,n6o),e(M7,s6o),e(M7,Dfe),e(Dfe,l6o),e(Ye,i6o),M(E7,Ye,null),b(f,KGe,u),b(f,Gi,u),e(Gi,C7),e(C7,Gfe),M(cL,Gfe,null),e(Gi,d6o),e(Gi,Ofe),e(Ofe,c6o),b(f,ZGe,u),b(f,ko,u),M(fL,ko,null),e(ko,f6o),e(ko,Oi),e(Oi,m6o),e(Oi,JD),e(JD,g6o),e(Oi,h6o),e(Oi,YD),e(YD,p6o),e(Oi,_6o),e(ko,u6o),e(ko,mL),e(mL,b6o),e(mL,Vfe),e(Vfe,v6o),e(mL,F6o),e(ko,T6o),e(ko,lt),M(gL,lt,null),e(lt,M6o),e(lt,Xfe),e(Xfe,E6o),e(lt,C6o),e(lt,Vi),e(Vi,w6o),e(Vi,zfe),e(zfe,A6o),e(Vi,L6o),e(Vi,KD),e(KD,y6o),e(Vi,x6o),e(lt,$6o),M(w7,lt,null),e(ko,k6o),e(ko,Ke),M(hL,Ke,null),e(Ke,S6o),e(Ke,Qfe),e(Qfe,R6o),e(Ke,P6o),e(Ke,Pa),e(Pa,B6o),e(Pa,Wfe),e(Wfe,I6o),e(Pa,N6o),e(Pa,Hfe),e(Hfe,q6o),e(Pa,j6o),e(Pa,Ufe),e(Ufe,D6o),e(Pa,G6o),e(Ke,O6o),e(Ke,z),e(z,A7),e(A7,Jfe),e(Jfe,V6o),e(A7,X6o),e(A7,ZD),e(ZD,z6o),e(A7,Q6o),e(z,W6o),e(z,L7),e(L7,Yfe),e(Yfe,H6o),e(L7,U6o),e(L7,eG),e(eG,J6o),e(L7,Y6o),e(z,K6o),e(z,y7),e(y7,Kfe),e(Kfe,Z6o),e(y7,eLo),e(y7,oG),e(oG,oLo),e(y7,rLo),e(z,tLo),e(z,x7),e(x7,Zfe),e(Zfe,aLo),e(x7,nLo),e(x7,rG),e(rG,sLo),e(x7,lLo),e(z,iLo),e(z,$7),e($7,eme),e(eme,dLo),e($7,cLo),e($7,tG),e(tG,fLo),e($7,mLo),e(z,gLo),e(z,k7),e(k7,ome),e(ome,hLo),e(k7,pLo),e(k7,aG),e(aG,_Lo),e(k7,uLo),e(z,bLo),e(z,S7),e(S7,rme),e(rme,vLo),e(S7,FLo),e(S7,nG),e(nG,TLo),e(S7,MLo),e(z,ELo),e(z,R7),e(R7,tme),e(tme,CLo),e(R7,wLo),e(R7,sG),e(sG,ALo),e(R7,LLo),e(z,yLo),e(z,P7),e(P7,ame),e(ame,xLo),e(P7,$Lo),e(P7,lG),e(lG,kLo),e(P7,SLo),e(z,RLo),e(z,B7),e(B7,nme),e(nme,PLo),e(B7,BLo),e(B7,iG),e(iG,ILo),e(B7,NLo),e(z,qLo),e(z,I7),e(I7,sme),e(sme,jLo),e(I7,DLo),e(I7,dG),e(dG,GLo),e(I7,OLo),e(z,VLo),e(z,N7),e(N7,lme),e(lme,XLo),e(N7,zLo),e(N7,cG),e(cG,QLo),e(N7,WLo),e(z,HLo),e(z,q7),e(q7,ime),e(ime,ULo),e(q7,JLo),e(q7,fG),e(fG,YLo),e(q7,KLo),e(z,ZLo),e(z,j7),e(j7,dme),e(dme,eyo),e(j7,oyo),e(j7,mG),e(mG,ryo),e(j7,tyo),e(z,ayo),e(z,D7),e(D7,cme),e(cme,nyo),e(D7,syo),e(D7,gG),e(gG,lyo),e(D7,iyo),e(z,dyo),e(z,G7),e(G7,fme),e(fme,cyo),e(G7,fyo),e(G7,hG),e(hG,myo),e(G7,gyo),e(z,hyo),e(z,O7),e(O7,mme),e(mme,pyo),e(O7,_yo),e(O7,pG),e(pG,uyo),e(O7,byo),e(z,vyo),e(z,V7),e(V7,gme),e(gme,Fyo),e(V7,Tyo),e(V7,_G),e(_G,Myo),e(V7,Eyo),e(z,Cyo),e(z,X7),e(X7,hme),e(hme,wyo),e(X7,Ayo),e(X7,uG),e(uG,Lyo),e(X7,yyo),e(z,xyo),e(z,z7),e(z7,pme),e(pme,$yo),e(z7,kyo),e(z7,bG),e(bG,Syo),e(z7,Ryo),e(z,Pyo),e(z,Q7),e(Q7,_me),e(_me,Byo),e(Q7,Iyo),e(Q7,vG),e(vG,Nyo),e(Q7,qyo),e(z,jyo),e(z,W7),e(W7,ume),e(ume,Dyo),e(W7,Gyo),e(W7,FG),e(FG,Oyo),e(W7,Vyo),e(z,Xyo),e(z,H7),e(H7,bme),e(bme,zyo),e(H7,Qyo),e(H7,TG),e(TG,Wyo),e(H7,Hyo),e(z,Uyo),e(z,U7),e(U7,vme),e(vme,Jyo),e(U7,Yyo),e(U7,MG),e(MG,Kyo),e(U7,Zyo),e(z,e9o),e(z,J7),e(J7,Fme),e(Fme,o9o),e(J7,r9o),e(J7,EG),e(EG,t9o),e(J7,a9o),e(z,n9o),e(z,Y7),e(Y7,Tme),e(Tme,s9o),e(Y7,l9o),e(Y7,CG),e(CG,i9o),e(Y7,d9o),e(z,c9o),e(z,K7),e(K7,Mme),e(Mme,f9o),e(K7,m9o),e(K7,wG),e(wG,g9o),e(K7,h9o),e(z,p9o),e(z,Z7),e(Z7,Eme),e(Eme,_9o),e(Z7,u9o),e(Z7,AG),e(AG,b9o),e(Z7,v9o),e(z,F9o),e(z,e1),e(e1,Cme),e(Cme,T9o),e(e1,M9o),e(e1,LG),e(LG,E9o),e(e1,C9o),e(z,w9o),e(z,o1),e(o1,wme),e(wme,A9o),e(o1,L9o),e(o1,yG),e(yG,y9o),e(o1,x9o),e(z,$9o),e(z,r1),e(r1,Ame),e(Ame,k9o),e(r1,S9o),e(r1,xG),e(xG,R9o),e(r1,P9o),e(z,B9o),e(z,t1),e(t1,Lme),e(Lme,I9o),e(t1,N9o),e(t1,$G),e($G,q9o),e(t1,j9o),e(z,D9o),e(z,a1),e(a1,yme),e(yme,G9o),e(a1,O9o),e(a1,kG),e(kG,V9o),e(a1,X9o),e(z,z9o),e(z,n1),e(n1,xme),e(xme,Q9o),e(n1,W9o),e(n1,SG),e(SG,H9o),e(n1,U9o),e(z,J9o),e(z,s1),e(s1,$me),e($me,Y9o),e(s1,K9o),e(s1,RG),e(RG,Z9o),e(s1,exo),e(z,oxo),e(z,l1),e(l1,kme),e(kme,rxo),e(l1,txo),e(l1,PG),e(PG,axo),e(l1,nxo),e(z,sxo),e(z,i1),e(i1,Sme),e(Sme,lxo),e(i1,ixo),e(i1,BG),e(BG,dxo),e(i1,cxo),e(z,fxo),e(z,d1),e(d1,Rme),e(Rme,mxo),e(d1,gxo),e(d1,IG),e(IG,hxo),e(d1,pxo),e(z,_xo),e(z,c1),e(c1,Pme),e(Pme,uxo),e(c1,bxo),e(c1,NG),e(NG,vxo),e(c1,Fxo),e(Ke,Txo),e(Ke,f1),e(f1,Mxo),e(f1,Bme),e(Bme,Exo),e(f1,Cxo),e(f1,Ime),e(Ime,wxo),e(Ke,Axo),M(m1,Ke,null),b(f,eOe,u),b(f,Xi,u),e(Xi,g1),e(g1,Nme),M(pL,Nme,null),e(Xi,Lxo),e(Xi,qme),e(qme,yxo),b(f,oOe,u),b(f,So,u),M(_L,So,null),e(So,xxo),e(So,zi),e(zi,$xo),e(zi,qG),e(qG,kxo),e(zi,Sxo),e(zi,jG),e(jG,Rxo),e(zi,Pxo),e(So,Bxo),e(So,uL),e(uL,Ixo),e(uL,jme),e(jme,Nxo),e(uL,qxo),e(So,jxo),e(So,it),M(bL,it,null),e(it,Dxo),e(it,Dme),e(Dme,Gxo),e(it,Oxo),e(it,Qi),e(Qi,Vxo),e(Qi,Gme),e(Gme,Xxo),e(Qi,zxo),e(Qi,DG),e(DG,Qxo),e(Qi,Wxo),e(it,Hxo),M(h1,it,null),e(So,Uxo),e(So,Ze),M(vL,Ze,null),e(Ze,Jxo),e(Ze,Ome),e(Ome,Yxo),e(Ze,Kxo),e(Ze,Ba),e(Ba,Zxo),e(Ba,Vme),e(Vme,e$o),e(Ba,o$o),e(Ba,Xme),e(Xme,r$o),e(Ba,t$o),e(Ba,zme),e(zme,a$o),e(Ba,n$o),e(Ze,s$o),e(Ze,W),e(W,p1),e(p1,Qme),e(Qme,l$o),e(p1,i$o),e(p1,GG),e(GG,d$o),e(p1,c$o),e(W,f$o),e(W,_1),e(_1,Wme),e(Wme,m$o),e(_1,g$o),e(_1,OG),e(OG,h$o),e(_1,p$o),e(W,_$o),e(W,u1),e(u1,Hme),e(Hme,u$o),e(u1,b$o),e(u1,VG),e(VG,v$o),e(u1,F$o),e(W,T$o),e(W,b1),e(b1,Ume),e(Ume,M$o),e(b1,E$o),e(b1,XG),e(XG,C$o),e(b1,w$o),e(W,A$o),e(W,v1),e(v1,Jme),e(Jme,L$o),e(v1,y$o),e(v1,zG),e(zG,x$o),e(v1,$$o),e(W,k$o),e(W,F1),e(F1,Yme),e(Yme,S$o),e(F1,R$o),e(F1,QG),e(QG,P$o),e(F1,B$o),e(W,I$o),e(W,T1),e(T1,Kme),e(Kme,N$o),e(T1,q$o),e(T1,WG),e(WG,j$o),e(T1,D$o),e(W,G$o),e(W,M1),e(M1,Zme),e(Zme,O$o),e(M1,V$o),e(M1,HG),e(HG,X$o),e(M1,z$o),e(W,Q$o),e(W,E1),e(E1,ege),e(ege,W$o),e(E1,H$o),e(E1,UG),e(UG,U$o),e(E1,J$o),e(W,Y$o),e(W,C1),e(C1,oge),e(oge,K$o),e(C1,Z$o),e(C1,JG),e(JG,eko),e(C1,oko),e(W,rko),e(W,w1),e(w1,rge),e(rge,tko),e(w1,ako),e(w1,YG),e(YG,nko),e(w1,sko),e(W,lko),e(W,A1),e(A1,tge),e(tge,iko),e(A1,dko),e(A1,KG),e(KG,cko),e(A1,fko),e(W,mko),e(W,L1),e(L1,age),e(age,gko),e(L1,hko),e(L1,ZG),e(ZG,pko),e(L1,_ko),e(W,uko),e(W,y1),e(y1,nge),e(nge,bko),e(y1,vko),e(y1,eO),e(eO,Fko),e(y1,Tko),e(W,Mko),e(W,x1),e(x1,sge),e(sge,Eko),e(x1,Cko),e(x1,oO),e(oO,wko),e(x1,Ako),e(W,Lko),e(W,$1),e($1,lge),e(lge,yko),e($1,xko),e($1,rO),e(rO,$ko),e($1,kko),e(W,Sko),e(W,k1),e(k1,ige),e(ige,Rko),e(k1,Pko),e(k1,tO),e(tO,Bko),e(k1,Iko),e(W,Nko),e(W,S1),e(S1,dge),e(dge,qko),e(S1,jko),e(S1,aO),e(aO,Dko),e(S1,Gko),e(W,Oko),e(W,R1),e(R1,cge),e(cge,Vko),e(R1,Xko),e(R1,nO),e(nO,zko),e(R1,Qko),e(W,Wko),e(W,P1),e(P1,fge),e(fge,Hko),e(P1,Uko),e(P1,sO),e(sO,Jko),e(P1,Yko),e(W,Kko),e(W,B1),e(B1,mge),e(mge,Zko),e(B1,eSo),e(B1,lO),e(lO,oSo),e(B1,rSo),e(W,tSo),e(W,I1),e(I1,gge),e(gge,aSo),e(I1,nSo),e(I1,iO),e(iO,sSo),e(I1,lSo),e(W,iSo),e(W,N1),e(N1,hge),e(hge,dSo),e(N1,cSo),e(N1,dO),e(dO,fSo),e(N1,mSo),e(W,gSo),e(W,q1),e(q1,pge),e(pge,hSo),e(q1,pSo),e(q1,cO),e(cO,_So),e(q1,uSo),e(W,bSo),e(W,j1),e(j1,_ge),e(_ge,vSo),e(j1,FSo),e(j1,fO),e(fO,TSo),e(j1,MSo),e(W,ESo),e(W,D1),e(D1,uge),e(uge,CSo),e(D1,wSo),e(D1,mO),e(mO,ASo),e(D1,LSo),e(W,ySo),e(W,G1),e(G1,bge),e(bge,xSo),e(G1,$So),e(G1,gO),e(gO,kSo),e(G1,SSo),e(W,RSo),e(W,O1),e(O1,vge),e(vge,PSo),e(O1,BSo),e(O1,hO),e(hO,ISo),e(O1,NSo),e(W,qSo),e(W,V1),e(V1,Fge),e(Fge,jSo),e(V1,DSo),e(V1,pO),e(pO,GSo),e(V1,OSo),e(W,VSo),e(W,X1),e(X1,Tge),e(Tge,XSo),e(X1,zSo),e(X1,_O),e(_O,QSo),e(X1,WSo),e(W,HSo),e(W,z1),e(z1,Mge),e(Mge,USo),e(z1,JSo),e(z1,uO),e(uO,YSo),e(z1,KSo),e(W,ZSo),e(W,Q1),e(Q1,Ege),e(Ege,eRo),e(Q1,oRo),e(Q1,bO),e(bO,rRo),e(Q1,tRo),e(W,aRo),e(W,W1),e(W1,Cge),e(Cge,nRo),e(W1,sRo),e(W1,wge),e(wge,lRo),e(W1,iRo),e(W,dRo),e(W,H1),e(H1,Age),e(Age,cRo),e(H1,fRo),e(H1,vO),e(vO,mRo),e(H1,gRo),e(W,hRo),e(W,U1),e(U1,Lge),e(Lge,pRo),e(U1,_Ro),e(U1,FO),e(FO,uRo),e(U1,bRo),e(W,vRo),e(W,J1),e(J1,yge),e(yge,FRo),e(J1,TRo),e(J1,TO),e(TO,MRo),e(J1,ERo),e(W,CRo),e(W,Y1),e(Y1,xge),e(xge,wRo),e(Y1,ARo),e(Y1,MO),e(MO,LRo),e(Y1,yRo),e(Ze,xRo),e(Ze,K1),e(K1,$Ro),e(K1,$ge),e($ge,kRo),e(K1,SRo),e(K1,kge),e(kge,RRo),e(Ze,PRo),M(Z1,Ze,null),b(f,rOe,u),b(f,Wi,u),e(Wi,e2),e(e2,Sge),M(FL,Sge,null),e(Wi,BRo),e(Wi,Rge),e(Rge,IRo),b(f,tOe,u),b(f,Ro,u),M(TL,Ro,null),e(Ro,NRo),e(Ro,Hi),e(Hi,qRo),e(Hi,EO),e(EO,jRo),e(Hi,DRo),e(Hi,CO),e(CO,GRo),e(Hi,ORo),e(Ro,VRo),e(Ro,ML),e(ML,XRo),e(ML,Pge),e(Pge,zRo),e(ML,QRo),e(Ro,WRo),e(Ro,dt),M(EL,dt,null),e(dt,HRo),e(dt,Bge),e(Bge,URo),e(dt,JRo),e(dt,Ui),e(Ui,YRo),e(Ui,Ige),e(Ige,KRo),e(Ui,ZRo),e(Ui,wO),e(wO,ePo),e(Ui,oPo),e(dt,rPo),M(o2,dt,null),e(Ro,tPo),e(Ro,eo),M(CL,eo,null),e(eo,aPo),e(eo,Nge),e(Nge,nPo),e(eo,sPo),e(eo,Ia),e(Ia,lPo),e(Ia,qge),e(qge,iPo),e(Ia,dPo),e(Ia,jge),e(jge,cPo),e(Ia,fPo),e(Ia,Dge),e(Dge,mPo),e(Ia,gPo),e(eo,hPo),e(eo,he),e(he,r2),e(r2,Gge),e(Gge,pPo),e(r2,_Po),e(r2,AO),e(AO,uPo),e(r2,bPo),e(he,vPo),e(he,t2),e(t2,Oge),e(Oge,FPo),e(t2,TPo),e(t2,LO),e(LO,MPo),e(t2,EPo),e(he,CPo),e(he,a2),e(a2,Vge),e(Vge,wPo),e(a2,APo),e(a2,yO),e(yO,LPo),e(a2,yPo),e(he,xPo),e(he,n2),e(n2,Xge),e(Xge,$Po),e(n2,kPo),e(n2,xO),e(xO,SPo),e(n2,RPo),e(he,PPo),e(he,s2),e(s2,zge),e(zge,BPo),e(s2,IPo),e(s2,$O),e($O,NPo),e(s2,qPo),e(he,jPo),e(he,l2),e(l2,Qge),e(Qge,DPo),e(l2,GPo),e(l2,kO),e(kO,OPo),e(l2,VPo),e(he,XPo),e(he,i2),e(i2,Wge),e(Wge,zPo),e(i2,QPo),e(i2,SO),e(SO,WPo),e(i2,HPo),e(he,UPo),e(he,d2),e(d2,Hge),e(Hge,JPo),e(d2,YPo),e(d2,RO),e(RO,KPo),e(d2,ZPo),e(he,eBo),e(he,c2),e(c2,Uge),e(Uge,oBo),e(c2,rBo),e(c2,PO),e(PO,tBo),e(c2,aBo),e(he,nBo),e(he,f2),e(f2,Jge),e(Jge,sBo),e(f2,lBo),e(f2,BO),e(BO,iBo),e(f2,dBo),e(he,cBo),e(he,m2),e(m2,Yge),e(Yge,fBo),e(m2,mBo),e(m2,IO),e(IO,gBo),e(m2,hBo),e(he,pBo),e(he,g2),e(g2,Kge),e(Kge,_Bo),e(g2,uBo),e(g2,NO),e(NO,bBo),e(g2,vBo),e(he,FBo),e(he,h2),e(h2,Zge),e(Zge,TBo),e(h2,MBo),e(h2,qO),e(qO,EBo),e(h2,CBo),e(he,wBo),e(he,p2),e(p2,ehe),e(ehe,ABo),e(p2,LBo),e(p2,jO),e(jO,yBo),e(p2,xBo),e(he,$Bo),e(he,_2),e(_2,ohe),e(ohe,kBo),e(_2,SBo),e(_2,DO),e(DO,RBo),e(_2,PBo),e(he,BBo),e(he,u2),e(u2,rhe),e(rhe,IBo),e(u2,NBo),e(u2,GO),e(GO,qBo),e(u2,jBo),e(he,DBo),e(he,b2),e(b2,the),e(the,GBo),e(b2,OBo),e(b2,OO),e(OO,VBo),e(b2,XBo),e(he,zBo),e(he,v2),e(v2,ahe),e(ahe,QBo),e(v2,WBo),e(v2,VO),e(VO,HBo),e(v2,UBo),e(eo,JBo),e(eo,F2),e(F2,YBo),e(F2,nhe),e(nhe,KBo),e(F2,ZBo),e(F2,she),e(she,eIo),e(eo,oIo),M(T2,eo,null),b(f,aOe,u),b(f,Ji,u),e(Ji,M2),e(M2,lhe),M(wL,lhe,null),e(Ji,rIo),e(Ji,ihe),e(ihe,tIo),b(f,nOe,u),b(f,Po,u),M(AL,Po,null),e(Po,aIo),e(Po,Yi),e(Yi,nIo),e(Yi,XO),e(XO,sIo),e(Yi,lIo),e(Yi,zO),e(zO,iIo),e(Yi,dIo),e(Po,cIo),e(Po,LL),e(LL,fIo),e(LL,dhe),e(dhe,mIo),e(LL,gIo),e(Po,hIo),e(Po,ct),M(yL,ct,null),e(ct,pIo),e(ct,che),e(che,_Io),e(ct,uIo),e(ct,Ki),e(Ki,bIo),e(Ki,fhe),e(fhe,vIo),e(Ki,FIo),e(Ki,QO),e(QO,TIo),e(Ki,MIo),e(ct,EIo),M(E2,ct,null),e(Po,CIo),e(Po,oo),M(xL,oo,null),e(oo,wIo),e(oo,mhe),e(mhe,AIo),e(oo,LIo),e(oo,Na),e(Na,yIo),e(Na,ghe),e(ghe,xIo),e(Na,$Io),e(Na,hhe),e(hhe,kIo),e(Na,SIo),e(Na,phe),e(phe,RIo),e(Na,PIo),e(oo,BIo),e(oo,N),e(N,C2),e(C2,_he),e(_he,IIo),e(C2,NIo),e(C2,WO),e(WO,qIo),e(C2,jIo),e(N,DIo),e(N,w2),e(w2,uhe),e(uhe,GIo),e(w2,OIo),e(w2,HO),e(HO,VIo),e(w2,XIo),e(N,zIo),e(N,A2),e(A2,bhe),e(bhe,QIo),e(A2,WIo),e(A2,UO),e(UO,HIo),e(A2,UIo),e(N,JIo),e(N,L2),e(L2,vhe),e(vhe,YIo),e(L2,KIo),e(L2,JO),e(JO,ZIo),e(L2,eNo),e(N,oNo),e(N,y2),e(y2,Fhe),e(Fhe,rNo),e(y2,tNo),e(y2,YO),e(YO,aNo),e(y2,nNo),e(N,sNo),e(N,x2),e(x2,The),e(The,lNo),e(x2,iNo),e(x2,KO),e(KO,dNo),e(x2,cNo),e(N,fNo),e(N,$2),e($2,Mhe),e(Mhe,mNo),e($2,gNo),e($2,ZO),e(ZO,hNo),e($2,pNo),e(N,_No),e(N,k2),e(k2,Ehe),e(Ehe,uNo),e(k2,bNo),e(k2,eV),e(eV,vNo),e(k2,FNo),e(N,TNo),e(N,S2),e(S2,Che),e(Che,MNo),e(S2,ENo),e(S2,oV),e(oV,CNo),e(S2,wNo),e(N,ANo),e(N,R2),e(R2,whe),e(whe,LNo),e(R2,yNo),e(R2,rV),e(rV,xNo),e(R2,$No),e(N,kNo),e(N,P2),e(P2,Ahe),e(Ahe,SNo),e(P2,RNo),e(P2,tV),e(tV,PNo),e(P2,BNo),e(N,INo),e(N,B2),e(B2,Lhe),e(Lhe,NNo),e(B2,qNo),e(B2,aV),e(aV,jNo),e(B2,DNo),e(N,GNo),e(N,I2),e(I2,yhe),e(yhe,ONo),e(I2,VNo),e(I2,nV),e(nV,XNo),e(I2,zNo),e(N,QNo),e(N,N2),e(N2,xhe),e(xhe,WNo),e(N2,HNo),e(N2,sV),e(sV,UNo),e(N2,JNo),e(N,YNo),e(N,q2),e(q2,$he),e($he,KNo),e(q2,ZNo),e(q2,lV),e(lV,eqo),e(q2,oqo),e(N,rqo),e(N,j2),e(j2,khe),e(khe,tqo),e(j2,aqo),e(j2,iV),e(iV,nqo),e(j2,sqo),e(N,lqo),e(N,D2),e(D2,She),e(She,iqo),e(D2,dqo),e(D2,dV),e(dV,cqo),e(D2,fqo),e(N,mqo),e(N,G2),e(G2,Rhe),e(Rhe,gqo),e(G2,hqo),e(G2,cV),e(cV,pqo),e(G2,_qo),e(N,uqo),e(N,O2),e(O2,Phe),e(Phe,bqo),e(O2,vqo),e(O2,fV),e(fV,Fqo),e(O2,Tqo),e(N,Mqo),e(N,V2),e(V2,Bhe),e(Bhe,Eqo),e(V2,Cqo),e(V2,mV),e(mV,wqo),e(V2,Aqo),e(N,Lqo),e(N,X2),e(X2,Ihe),e(Ihe,yqo),e(X2,xqo),e(X2,gV),e(gV,$qo),e(X2,kqo),e(N,Sqo),e(N,z2),e(z2,Nhe),e(Nhe,Rqo),e(z2,Pqo),e(z2,hV),e(hV,Bqo),e(z2,Iqo),e(N,Nqo),e(N,Q2),e(Q2,qhe),e(qhe,qqo),e(Q2,jqo),e(Q2,pV),e(pV,Dqo),e(Q2,Gqo),e(N,Oqo),e(N,W2),e(W2,jhe),e(jhe,Vqo),e(W2,Xqo),e(W2,_V),e(_V,zqo),e(W2,Qqo),e(N,Wqo),e(N,H2),e(H2,Dhe),e(Dhe,Hqo),e(H2,Uqo),e(H2,uV),e(uV,Jqo),e(H2,Yqo),e(N,Kqo),e(N,U2),e(U2,Ghe),e(Ghe,Zqo),e(U2,ejo),e(U2,bV),e(bV,ojo),e(U2,rjo),e(N,tjo),e(N,J2),e(J2,Ohe),e(Ohe,ajo),e(J2,njo),e(J2,vV),e(vV,sjo),e(J2,ljo),e(N,ijo),e(N,Y2),e(Y2,Vhe),e(Vhe,djo),e(Y2,cjo),e(Y2,FV),e(FV,fjo),e(Y2,mjo),e(N,gjo),e(N,K2),e(K2,Xhe),e(Xhe,hjo),e(K2,pjo),e(K2,TV),e(TV,_jo),e(K2,ujo),e(N,bjo),e(N,Z2),e(Z2,zhe),e(zhe,vjo),e(Z2,Fjo),e(Z2,MV),e(MV,Tjo),e(Z2,Mjo),e(N,Ejo),e(N,eb),e(eb,Qhe),e(Qhe,Cjo),e(eb,wjo),e(eb,EV),e(EV,Ajo),e(eb,Ljo),e(N,yjo),e(N,ob),e(ob,Whe),e(Whe,xjo),e(ob,$jo),e(ob,CV),e(CV,kjo),e(ob,Sjo),e(N,Rjo),e(N,rb),e(rb,Hhe),e(Hhe,Pjo),e(rb,Bjo),e(rb,wV),e(wV,Ijo),e(rb,Njo),e(N,qjo),e(N,tb),e(tb,Uhe),e(Uhe,jjo),e(tb,Djo),e(tb,AV),e(AV,Gjo),e(tb,Ojo),e(N,Vjo),e(N,ab),e(ab,Jhe),e(Jhe,Xjo),e(ab,zjo),e(ab,LV),e(LV,Qjo),e(ab,Wjo),e(N,Hjo),e(N,nb),e(nb,Yhe),e(Yhe,Ujo),e(nb,Jjo),e(nb,yV),e(yV,Yjo),e(nb,Kjo),e(N,Zjo),e(N,sb),e(sb,Khe),e(Khe,eDo),e(sb,oDo),e(sb,xV),e(xV,rDo),e(sb,tDo),e(N,aDo),e(N,lb),e(lb,Zhe),e(Zhe,nDo),e(lb,sDo),e(lb,$V),e($V,lDo),e(lb,iDo),e(N,dDo),e(N,ib),e(ib,epe),e(epe,cDo),e(ib,fDo),e(ib,kV),e(kV,mDo),e(ib,gDo),e(N,hDo),e(N,db),e(db,ope),e(ope,pDo),e(db,_Do),e(db,SV),e(SV,uDo),e(db,bDo),e(N,vDo),e(N,cb),e(cb,rpe),e(rpe,FDo),e(cb,TDo),e(cb,RV),e(RV,MDo),e(cb,EDo),e(N,CDo),e(N,fb),e(fb,tpe),e(tpe,wDo),e(fb,ADo),e(fb,PV),e(PV,LDo),e(fb,yDo),e(N,xDo),e(N,mb),e(mb,ape),e(ape,$Do),e(mb,kDo),e(mb,BV),e(BV,SDo),e(mb,RDo),e(N,PDo),e(N,gb),e(gb,npe),e(npe,BDo),e(gb,IDo),e(gb,IV),e(IV,NDo),e(gb,qDo),e(N,jDo),e(N,hb),e(hb,spe),e(spe,DDo),e(hb,GDo),e(hb,NV),e(NV,ODo),e(hb,VDo),e(N,XDo),e(N,pb),e(pb,lpe),e(lpe,zDo),e(pb,QDo),e(pb,qV),e(qV,WDo),e(pb,HDo),e(N,UDo),e(N,_b),e(_b,ipe),e(ipe,JDo),e(_b,YDo),e(_b,jV),e(jV,KDo),e(_b,ZDo),e(N,eGo),e(N,ub),e(ub,dpe),e(dpe,oGo),e(ub,rGo),e(ub,DV),e(DV,tGo),e(ub,aGo),e(N,nGo),e(N,bb),e(bb,cpe),e(cpe,sGo),e(bb,lGo),e(bb,GV),e(GV,iGo),e(bb,dGo),e(oo,cGo),e(oo,vb),e(vb,fGo),e(vb,fpe),e(fpe,mGo),e(vb,gGo),e(vb,mpe),e(mpe,hGo),e(oo,pGo),M(Fb,oo,null),b(f,sOe,u),b(f,Zi,u),e(Zi,Tb),e(Tb,gpe),M($L,gpe,null),e(Zi,_Go),e(Zi,hpe),e(hpe,uGo),b(f,lOe,u),b(f,Bo,u),M(kL,Bo,null),e(Bo,bGo),e(Bo,ed),e(ed,vGo),e(ed,OV),e(OV,FGo),e(ed,TGo),e(ed,VV),e(VV,MGo),e(ed,EGo),e(Bo,CGo),e(Bo,SL),e(SL,wGo),e(SL,ppe),e(ppe,AGo),e(SL,LGo),e(Bo,yGo),e(Bo,ft),M(RL,ft,null),e(ft,xGo),e(ft,_pe),e(_pe,$Go),e(ft,kGo),e(ft,od),e(od,SGo),e(od,upe),e(upe,RGo),e(od,PGo),e(od,XV),e(XV,BGo),e(od,IGo),e(ft,NGo),M(Mb,ft,null),e(Bo,qGo),e(Bo,ro),M(PL,ro,null),e(ro,jGo),e(ro,bpe),e(bpe,DGo),e(ro,GGo),e(ro,qa),e(qa,OGo),e(qa,vpe),e(vpe,VGo),e(qa,XGo),e(qa,Fpe),e(Fpe,zGo),e(qa,QGo),e(qa,Tpe),e(Tpe,WGo),e(qa,HGo),e(ro,UGo),e(ro,Z),e(Z,Eb),e(Eb,Mpe),e(Mpe,JGo),e(Eb,YGo),e(Eb,zV),e(zV,KGo),e(Eb,ZGo),e(Z,eOo),e(Z,Cb),e(Cb,Epe),e(Epe,oOo),e(Cb,rOo),e(Cb,QV),e(QV,tOo),e(Cb,aOo),e(Z,nOo),e(Z,wb),e(wb,Cpe),e(Cpe,sOo),e(wb,lOo),e(wb,WV),e(WV,iOo),e(wb,dOo),e(Z,cOo),e(Z,Ab),e(Ab,wpe),e(wpe,fOo),e(Ab,mOo),e(Ab,HV),e(HV,gOo),e(Ab,hOo),e(Z,pOo),e(Z,Lb),e(Lb,Ape),e(Ape,_Oo),e(Lb,uOo),e(Lb,UV),e(UV,bOo),e(Lb,vOo),e(Z,FOo),e(Z,yb),e(yb,Lpe),e(Lpe,TOo),e(yb,MOo),e(yb,JV),e(JV,EOo),e(yb,COo),e(Z,wOo),e(Z,xb),e(xb,ype),e(ype,AOo),e(xb,LOo),e(xb,YV),e(YV,yOo),e(xb,xOo),e(Z,$Oo),e(Z,$b),e($b,xpe),e(xpe,kOo),e($b,SOo),e($b,KV),e(KV,ROo),e($b,POo),e(Z,BOo),e(Z,kb),e(kb,$pe),e($pe,IOo),e(kb,NOo),e(kb,ZV),e(ZV,qOo),e(kb,jOo),e(Z,DOo),e(Z,Sb),e(Sb,kpe),e(kpe,GOo),e(Sb,OOo),e(Sb,eX),e(eX,VOo),e(Sb,XOo),e(Z,zOo),e(Z,Rb),e(Rb,Spe),e(Spe,QOo),e(Rb,WOo),e(Rb,oX),e(oX,HOo),e(Rb,UOo),e(Z,JOo),e(Z,Pb),e(Pb,Rpe),e(Rpe,YOo),e(Pb,KOo),e(Pb,rX),e(rX,ZOo),e(Pb,eVo),e(Z,oVo),e(Z,Bb),e(Bb,Ppe),e(Ppe,rVo),e(Bb,tVo),e(Bb,tX),e(tX,aVo),e(Bb,nVo),e(Z,sVo),e(Z,Ib),e(Ib,Bpe),e(Bpe,lVo),e(Ib,iVo),e(Ib,aX),e(aX,dVo),e(Ib,cVo),e(Z,fVo),e(Z,Nb),e(Nb,Ipe),e(Ipe,mVo),e(Nb,gVo),e(Nb,nX),e(nX,hVo),e(Nb,pVo),e(Z,_Vo),e(Z,qb),e(qb,Npe),e(Npe,uVo),e(qb,bVo),e(qb,sX),e(sX,vVo),e(qb,FVo),e(Z,TVo),e(Z,jb),e(jb,qpe),e(qpe,MVo),e(jb,EVo),e(jb,lX),e(lX,CVo),e(jb,wVo),e(Z,AVo),e(Z,Db),e(Db,jpe),e(jpe,LVo),e(Db,yVo),e(Db,iX),e(iX,xVo),e(Db,$Vo),e(Z,kVo),e(Z,Gb),e(Gb,Dpe),e(Dpe,SVo),e(Gb,RVo),e(Gb,dX),e(dX,PVo),e(Gb,BVo),e(Z,IVo),e(Z,Ob),e(Ob,Gpe),e(Gpe,NVo),e(Ob,qVo),e(Ob,cX),e(cX,jVo),e(Ob,DVo),e(Z,GVo),e(Z,Vb),e(Vb,Ope),e(Ope,OVo),e(Vb,VVo),e(Vb,fX),e(fX,XVo),e(Vb,zVo),e(Z,QVo),e(Z,Xb),e(Xb,Vpe),e(Vpe,WVo),e(Xb,HVo),e(Xb,mX),e(mX,UVo),e(Xb,JVo),e(Z,YVo),e(Z,zb),e(zb,Xpe),e(Xpe,KVo),e(zb,ZVo),e(zb,gX),e(gX,eXo),e(zb,oXo),e(Z,rXo),e(Z,Qb),e(Qb,zpe),e(zpe,tXo),e(Qb,aXo),e(Qb,hX),e(hX,nXo),e(Qb,sXo),e(Z,lXo),e(Z,Wb),e(Wb,Qpe),e(Qpe,iXo),e(Wb,dXo),e(Wb,pX),e(pX,cXo),e(Wb,fXo),e(Z,mXo),e(Z,Hb),e(Hb,Wpe),e(Wpe,gXo),e(Hb,hXo),e(Hb,_X),e(_X,pXo),e(Hb,_Xo),e(Z,uXo),e(Z,Ub),e(Ub,Hpe),e(Hpe,bXo),e(Ub,vXo),e(Ub,uX),e(uX,FXo),e(Ub,TXo),e(Z,MXo),e(Z,Jb),e(Jb,Upe),e(Upe,EXo),e(Jb,CXo),e(Jb,bX),e(bX,wXo),e(Jb,AXo),e(Z,LXo),e(Z,Yb),e(Yb,Jpe),e(Jpe,yXo),e(Yb,xXo),e(Yb,vX),e(vX,$Xo),e(Yb,kXo),e(ro,SXo),e(ro,Kb),e(Kb,RXo),e(Kb,Ype),e(Ype,PXo),e(Kb,BXo),e(Kb,Kpe),e(Kpe,IXo),e(ro,NXo),M(Zb,ro,null),b(f,iOe,u),b(f,rd,u),e(rd,ev),e(ev,Zpe),M(BL,Zpe,null),e(rd,qXo),e(rd,e_e),e(e_e,jXo),b(f,dOe,u),b(f,Io,u),M(IL,Io,null),e(Io,DXo),e(Io,td),e(td,GXo),e(td,FX),e(FX,OXo),e(td,VXo),e(td,TX),e(TX,XXo),e(td,zXo),e(Io,QXo),e(Io,NL),e(NL,WXo),e(NL,o_e),e(o_e,HXo),e(NL,UXo),e(Io,JXo),e(Io,mt),M(qL,mt,null),e(mt,YXo),e(mt,r_e),e(r_e,KXo),e(mt,ZXo),e(mt,ad),e(ad,ezo),e(ad,t_e),e(t_e,ozo),e(ad,rzo),e(ad,MX),e(MX,tzo),e(ad,azo),e(mt,nzo),M(ov,mt,null),e(Io,szo),e(Io,to),M(jL,to,null),e(to,lzo),e(to,a_e),e(a_e,izo),e(to,dzo),e(to,ja),e(ja,czo),e(ja,n_e),e(n_e,fzo),e(ja,mzo),e(ja,s_e),e(s_e,gzo),e(ja,hzo),e(ja,l_e),e(l_e,pzo),e(ja,_zo),e(to,uzo),e(to,Zr),e(Zr,rv),e(rv,i_e),e(i_e,bzo),e(rv,vzo),e(rv,EX),e(EX,Fzo),e(rv,Tzo),e(Zr,Mzo),e(Zr,tv),e(tv,d_e),e(d_e,Ezo),e(tv,Czo),e(tv,CX),e(CX,wzo),e(tv,Azo),e(Zr,Lzo),e(Zr,av),e(av,c_e),e(c_e,yzo),e(av,xzo),e(av,wX),e(wX,$zo),e(av,kzo),e(Zr,Szo),e(Zr,nv),e(nv,f_e),e(f_e,Rzo),e(nv,Pzo),e(nv,AX),e(AX,Bzo),e(nv,Izo),e(Zr,Nzo),e(Zr,sv),e(sv,m_e),e(m_e,qzo),e(sv,jzo),e(sv,LX),e(LX,Dzo),e(sv,Gzo),e(to,Ozo),e(to,lv),e(lv,Vzo),e(lv,g_e),e(g_e,Xzo),e(lv,zzo),e(lv,h_e),e(h_e,Qzo),e(to,Wzo),M(iv,to,null),b(f,cOe,u),b(f,nd,u),e(nd,dv),e(dv,p_e),M(DL,p_e,null),e(nd,Hzo),e(nd,__e),e(__e,Uzo),b(f,fOe,u),b(f,No,u),M(GL,No,null),e(No,Jzo),e(No,sd),e(sd,Yzo),e(sd,yX),e(yX,Kzo),e(sd,Zzo),e(sd,xX),e(xX,eQo),e(sd,oQo),e(No,rQo),e(No,OL),e(OL,tQo),e(OL,u_e),e(u_e,aQo),e(OL,nQo),e(No,sQo),e(No,gt),M(VL,gt,null),e(gt,lQo),e(gt,b_e),e(b_e,iQo),e(gt,dQo),e(gt,ld),e(ld,cQo),e(ld,v_e),e(v_e,fQo),e(ld,mQo),e(ld,$X),e($X,gQo),e(ld,hQo),e(gt,pQo),M(cv,gt,null),e(No,_Qo),e(No,ao),M(XL,ao,null),e(ao,uQo),e(ao,F_e),e(F_e,bQo),e(ao,vQo),e(ao,Da),e(Da,FQo),e(Da,T_e),e(T_e,TQo),e(Da,MQo),e(Da,M_e),e(M_e,EQo),e(Da,CQo),e(Da,E_e),e(E_e,wQo),e(Da,AQo),e(ao,LQo),e(ao,U),e(U,fv),e(fv,C_e),e(C_e,yQo),e(fv,xQo),e(fv,kX),e(kX,$Qo),e(fv,kQo),e(U,SQo),e(U,mv),e(mv,w_e),e(w_e,RQo),e(mv,PQo),e(mv,SX),e(SX,BQo),e(mv,IQo),e(U,NQo),e(U,gv),e(gv,A_e),e(A_e,qQo),e(gv,jQo),e(gv,RX),e(RX,DQo),e(gv,GQo),e(U,OQo),e(U,hv),e(hv,L_e),e(L_e,VQo),e(hv,XQo),e(hv,PX),e(PX,zQo),e(hv,QQo),e(U,WQo),e(U,pv),e(pv,y_e),e(y_e,HQo),e(pv,UQo),e(pv,BX),e(BX,JQo),e(pv,YQo),e(U,KQo),e(U,_v),e(_v,x_e),e(x_e,ZQo),e(_v,eWo),e(_v,IX),e(IX,oWo),e(_v,rWo),e(U,tWo),e(U,uv),e(uv,$_e),e($_e,aWo),e(uv,nWo),e(uv,NX),e(NX,sWo),e(uv,lWo),e(U,iWo),e(U,bv),e(bv,k_e),e(k_e,dWo),e(bv,cWo),e(bv,qX),e(qX,fWo),e(bv,mWo),e(U,gWo),e(U,vv),e(vv,S_e),e(S_e,hWo),e(vv,pWo),e(vv,jX),e(jX,_Wo),e(vv,uWo),e(U,bWo),e(U,Fv),e(Fv,R_e),e(R_e,vWo),e(Fv,FWo),e(Fv,DX),e(DX,TWo),e(Fv,MWo),e(U,EWo),e(U,Tv),e(Tv,P_e),e(P_e,CWo),e(Tv,wWo),e(Tv,GX),e(GX,AWo),e(Tv,LWo),e(U,yWo),e(U,Mv),e(Mv,B_e),e(B_e,xWo),e(Mv,$Wo),e(Mv,OX),e(OX,kWo),e(Mv,SWo),e(U,RWo),e(U,Ev),e(Ev,I_e),e(I_e,PWo),e(Ev,BWo),e(Ev,VX),e(VX,IWo),e(Ev,NWo),e(U,qWo),e(U,Cv),e(Cv,N_e),e(N_e,jWo),e(Cv,DWo),e(Cv,XX),e(XX,GWo),e(Cv,OWo),e(U,VWo),e(U,wv),e(wv,q_e),e(q_e,XWo),e(wv,zWo),e(wv,zX),e(zX,QWo),e(wv,WWo),e(U,HWo),e(U,Av),e(Av,j_e),e(j_e,UWo),e(Av,JWo),e(Av,QX),e(QX,YWo),e(Av,KWo),e(U,ZWo),e(U,Lv),e(Lv,D_e),e(D_e,eHo),e(Lv,oHo),e(Lv,WX),e(WX,rHo),e(Lv,tHo),e(U,aHo),e(U,yv),e(yv,G_e),e(G_e,nHo),e(yv,sHo),e(yv,HX),e(HX,lHo),e(yv,iHo),e(U,dHo),e(U,xv),e(xv,O_e),e(O_e,cHo),e(xv,fHo),e(xv,UX),e(UX,mHo),e(xv,gHo),e(U,hHo),e(U,$v),e($v,V_e),e(V_e,pHo),e($v,_Ho),e($v,JX),e(JX,uHo),e($v,bHo),e(U,vHo),e(U,kv),e(kv,X_e),e(X_e,FHo),e(kv,THo),e(kv,YX),e(YX,MHo),e(kv,EHo),e(U,CHo),e(U,Sv),e(Sv,z_e),e(z_e,wHo),e(Sv,AHo),e(Sv,KX),e(KX,LHo),e(Sv,yHo),e(U,xHo),e(U,Rv),e(Rv,Q_e),e(Q_e,$Ho),e(Rv,kHo),e(Rv,ZX),e(ZX,SHo),e(Rv,RHo),e(U,PHo),e(U,Pv),e(Pv,W_e),e(W_e,BHo),e(Pv,IHo),e(Pv,ez),e(ez,NHo),e(Pv,qHo),e(U,jHo),e(U,Bv),e(Bv,H_e),e(H_e,DHo),e(Bv,GHo),e(Bv,oz),e(oz,OHo),e(Bv,VHo),e(U,XHo),e(U,Iv),e(Iv,U_e),e(U_e,zHo),e(Iv,QHo),e(Iv,rz),e(rz,WHo),e(Iv,HHo),e(U,UHo),e(U,Nv),e(Nv,J_e),e(J_e,JHo),e(Nv,YHo),e(Nv,tz),e(tz,KHo),e(Nv,ZHo),e(U,eUo),e(U,qv),e(qv,Y_e),e(Y_e,oUo),e(qv,rUo),e(qv,az),e(az,tUo),e(qv,aUo),e(U,nUo),e(U,jv),e(jv,K_e),e(K_e,sUo),e(jv,lUo),e(jv,nz),e(nz,iUo),e(jv,dUo),e(U,cUo),e(U,Dv),e(Dv,Z_e),e(Z_e,fUo),e(Dv,mUo),e(Dv,sz),e(sz,gUo),e(Dv,hUo),e(U,pUo),e(U,Gv),e(Gv,eue),e(eue,_Uo),e(Gv,uUo),e(Gv,lz),e(lz,bUo),e(Gv,vUo),e(U,FUo),e(U,Ov),e(Ov,oue),e(oue,TUo),e(Ov,MUo),e(Ov,iz),e(iz,EUo),e(Ov,CUo),e(U,wUo),e(U,Vv),e(Vv,rue),e(rue,AUo),e(Vv,LUo),e(Vv,dz),e(dz,yUo),e(Vv,xUo),e(U,$Uo),e(U,Xv),e(Xv,tue),e(tue,kUo),e(Xv,SUo),e(Xv,cz),e(cz,RUo),e(Xv,PUo),e(U,BUo),e(U,zv),e(zv,aue),e(aue,IUo),e(zv,NUo),e(zv,fz),e(fz,qUo),e(zv,jUo),e(ao,DUo),e(ao,Qv),e(Qv,GUo),e(Qv,nue),e(nue,OUo),e(Qv,VUo),e(Qv,sue),e(sue,XUo),e(ao,zUo),M(Wv,ao,null),b(f,mOe,u),b(f,id,u),e(id,Hv),e(Hv,lue),M(zL,lue,null),e(id,QUo),e(id,iue),e(iue,WUo),b(f,gOe,u),b(f,qo,u),M(QL,qo,null),e(qo,HUo),e(qo,dd),e(dd,UUo),e(dd,mz),e(mz,JUo),e(dd,YUo),e(dd,gz),e(gz,KUo),e(dd,ZUo),e(qo,eJo),e(qo,WL),e(WL,oJo),e(WL,due),e(due,rJo),e(WL,tJo),e(qo,aJo),e(qo,ht),M(HL,ht,null),e(ht,nJo),e(ht,cue),e(cue,sJo),e(ht,lJo),e(ht,cd),e(cd,iJo),e(cd,fue),e(fue,dJo),e(cd,cJo),e(cd,hz),e(hz,fJo),e(cd,mJo),e(ht,gJo),M(Uv,ht,null),e(qo,hJo),e(qo,no),M(UL,no,null),e(no,pJo),e(no,mue),e(mue,_Jo),e(no,uJo),e(no,Ga),e(Ga,bJo),e(Ga,gue),e(gue,vJo),e(Ga,FJo),e(Ga,hue),e(hue,TJo),e(Ga,MJo),e(Ga,pue),e(pue,EJo),e(Ga,CJo),e(no,wJo),e(no,V),e(V,Jv),e(Jv,_ue),e(_ue,AJo),e(Jv,LJo),e(Jv,pz),e(pz,yJo),e(Jv,xJo),e(V,$Jo),e(V,Yv),e(Yv,uue),e(uue,kJo),e(Yv,SJo),e(Yv,_z),e(_z,RJo),e(Yv,PJo),e(V,BJo),e(V,Kv),e(Kv,bue),e(bue,IJo),e(Kv,NJo),e(Kv,uz),e(uz,qJo),e(Kv,jJo),e(V,DJo),e(V,Zv),e(Zv,vue),e(vue,GJo),e(Zv,OJo),e(Zv,bz),e(bz,VJo),e(Zv,XJo),e(V,zJo),e(V,eF),e(eF,Fue),e(Fue,QJo),e(eF,WJo),e(eF,vz),e(vz,HJo),e(eF,UJo),e(V,JJo),e(V,oF),e(oF,Tue),e(Tue,YJo),e(oF,KJo),e(oF,Fz),e(Fz,ZJo),e(oF,eYo),e(V,oYo),e(V,rF),e(rF,Mue),e(Mue,rYo),e(rF,tYo),e(rF,Tz),e(Tz,aYo),e(rF,nYo),e(V,sYo),e(V,tF),e(tF,Eue),e(Eue,lYo),e(tF,iYo),e(tF,Mz),e(Mz,dYo),e(tF,cYo),e(V,fYo),e(V,aF),e(aF,Cue),e(Cue,mYo),e(aF,gYo),e(aF,Ez),e(Ez,hYo),e(aF,pYo),e(V,_Yo),e(V,nF),e(nF,wue),e(wue,uYo),e(nF,bYo),e(nF,Cz),e(Cz,vYo),e(nF,FYo),e(V,TYo),e(V,sF),e(sF,Aue),e(Aue,MYo),e(sF,EYo),e(sF,wz),e(wz,CYo),e(sF,wYo),e(V,AYo),e(V,lF),e(lF,Lue),e(Lue,LYo),e(lF,yYo),e(lF,Az),e(Az,xYo),e(lF,$Yo),e(V,kYo),e(V,iF),e(iF,yue),e(yue,SYo),e(iF,RYo),e(iF,Lz),e(Lz,PYo),e(iF,BYo),e(V,IYo),e(V,dF),e(dF,xue),e(xue,NYo),e(dF,qYo),e(dF,yz),e(yz,jYo),e(dF,DYo),e(V,GYo),e(V,cF),e(cF,$ue),e($ue,OYo),e(cF,VYo),e(cF,xz),e(xz,XYo),e(cF,zYo),e(V,QYo),e(V,fF),e(fF,kue),e(kue,WYo),e(fF,HYo),e(fF,$z),e($z,UYo),e(fF,JYo),e(V,YYo),e(V,mF),e(mF,Sue),e(Sue,KYo),e(mF,ZYo),e(mF,kz),e(kz,eKo),e(mF,oKo),e(V,rKo),e(V,gF),e(gF,Rue),e(Rue,tKo),e(gF,aKo),e(gF,Sz),e(Sz,nKo),e(gF,sKo),e(V,lKo),e(V,hF),e(hF,Pue),e(Pue,iKo),e(hF,dKo),e(hF,Rz),e(Rz,cKo),e(hF,fKo),e(V,mKo),e(V,pF),e(pF,Bue),e(Bue,gKo),e(pF,hKo),e(pF,Pz),e(Pz,pKo),e(pF,_Ko),e(V,uKo),e(V,_F),e(_F,Iue),e(Iue,bKo),e(_F,vKo),e(_F,Bz),e(Bz,FKo),e(_F,TKo),e(V,MKo),e(V,uF),e(uF,Nue),e(Nue,EKo),e(uF,CKo),e(uF,Iz),e(Iz,wKo),e(uF,AKo),e(V,LKo),e(V,bF),e(bF,que),e(que,yKo),e(bF,xKo),e(bF,Nz),e(Nz,$Ko),e(bF,kKo),e(V,SKo),e(V,vF),e(vF,jue),e(jue,RKo),e(vF,PKo),e(vF,qz),e(qz,BKo),e(vF,IKo),e(V,NKo),e(V,FF),e(FF,Due),e(Due,qKo),e(FF,jKo),e(FF,jz),e(jz,DKo),e(FF,GKo),e(V,OKo),e(V,TF),e(TF,Gue),e(Gue,VKo),e(TF,XKo),e(TF,Dz),e(Dz,zKo),e(TF,QKo),e(V,WKo),e(V,MF),e(MF,Oue),e(Oue,HKo),e(MF,UKo),e(MF,Gz),e(Gz,JKo),e(MF,YKo),e(V,KKo),e(V,EF),e(EF,Vue),e(Vue,ZKo),e(EF,eZo),e(EF,Oz),e(Oz,oZo),e(EF,rZo),e(V,tZo),e(V,CF),e(CF,Xue),e(Xue,aZo),e(CF,nZo),e(CF,Vz),e(Vz,sZo),e(CF,lZo),e(V,iZo),e(V,wF),e(wF,zue),e(zue,dZo),e(wF,cZo),e(wF,Xz),e(Xz,fZo),e(wF,mZo),e(V,gZo),e(V,AF),e(AF,Que),e(Que,hZo),e(AF,pZo),e(AF,zz),e(zz,_Zo),e(AF,uZo),e(V,bZo),e(V,LF),e(LF,Wue),e(Wue,vZo),e(LF,FZo),e(LF,Qz),e(Qz,TZo),e(LF,MZo),e(V,EZo),e(V,yF),e(yF,Hue),e(Hue,CZo),e(yF,wZo),e(yF,Wz),e(Wz,AZo),e(yF,LZo),e(V,yZo),e(V,xF),e(xF,Uue),e(Uue,xZo),e(xF,$Zo),e(xF,Hz),e(Hz,kZo),e(xF,SZo),e(V,RZo),e(V,$F),e($F,Jue),e(Jue,PZo),e($F,BZo),e($F,Uz),e(Uz,IZo),e($F,NZo),e(V,qZo),e(V,kF),e(kF,Yue),e(Yue,jZo),e(kF,DZo),e(kF,Jz),e(Jz,GZo),e(kF,OZo),e(V,VZo),e(V,SF),e(SF,Kue),e(Kue,XZo),e(SF,zZo),e(SF,Yz),e(Yz,QZo),e(SF,WZo),e(V,HZo),e(V,RF),e(RF,Zue),e(Zue,UZo),e(RF,JZo),e(RF,Kz),e(Kz,YZo),e(RF,KZo),e(V,ZZo),e(V,PF),e(PF,e7e),e(e7e,eer),e(PF,oer),e(PF,Zz),e(Zz,rer),e(PF,ter),e(V,aer),e(V,BF),e(BF,o7e),e(o7e,ner),e(BF,ser),e(BF,eQ),e(eQ,ler),e(BF,ier),e(V,der),e(V,IF),e(IF,r7e),e(r7e,cer),e(IF,fer),e(IF,oQ),e(oQ,mer),e(IF,ger),e(no,her),e(no,NF),e(NF,per),e(NF,t7e),e(t7e,_er),e(NF,uer),e(NF,a7e),e(a7e,ber),e(no,ver),M(qF,no,null),b(f,hOe,u),b(f,fd,u),e(fd,jF),e(jF,n7e),M(JL,n7e,null),e(fd,Fer),e(fd,s7e),e(s7e,Ter),b(f,pOe,u),b(f,jo,u),M(YL,jo,null),e(jo,Mer),e(jo,md),e(md,Eer),e(md,rQ),e(rQ,Cer),e(md,wer),e(md,tQ),e(tQ,Aer),e(md,Ler),e(jo,yer),e(jo,KL),e(KL,xer),e(KL,l7e),e(l7e,$er),e(KL,ker),e(jo,Ser),e(jo,pt),M(ZL,pt,null),e(pt,Rer),e(pt,i7e),e(i7e,Per),e(pt,Ber),e(pt,gd),e(gd,Ier),e(gd,d7e),e(d7e,Ner),e(gd,qer),e(gd,aQ),e(aQ,jer),e(gd,Der),e(pt,Ger),M(DF,pt,null),e(jo,Oer),e(jo,so),M(ey,so,null),e(so,Ver),e(so,c7e),e(c7e,Xer),e(so,zer),e(so,Oa),e(Oa,Qer),e(Oa,f7e),e(f7e,Wer),e(Oa,Her),e(Oa,m7e),e(m7e,Uer),e(Oa,Jer),e(Oa,g7e),e(g7e,Yer),e(Oa,Ker),e(so,Zer),e(so,h7e),e(h7e,GF),e(GF,p7e),e(p7e,eor),e(GF,oor),e(GF,nQ),e(nQ,ror),e(GF,tor),e(so,aor),e(so,OF),e(OF,nor),e(OF,_7e),e(_7e,sor),e(OF,lor),e(OF,u7e),e(u7e,ior),e(so,dor),M(VF,so,null),b(f,_Oe,u),b(f,hd,u),e(hd,XF),e(XF,b7e),M(oy,b7e,null),e(hd,cor),e(hd,v7e),e(v7e,mor),b(f,uOe,u),b(f,Do,u),M(ry,Do,null),e(Do,gor),e(Do,pd),e(pd,hor),e(pd,sQ),e(sQ,por),e(pd,_or),e(pd,lQ),e(lQ,uor),e(pd,bor),e(Do,vor),e(Do,ty),e(ty,For),e(ty,F7e),e(F7e,Tor),e(ty,Mor),e(Do,Eor),e(Do,_t),M(ay,_t,null),e(_t,Cor),e(_t,T7e),e(T7e,wor),e(_t,Aor),e(_t,_d),e(_d,Lor),e(_d,M7e),e(M7e,yor),e(_d,xor),e(_d,iQ),e(iQ,$or),e(_d,kor),e(_t,Sor),M(zF,_t,null),e(Do,Ror),e(Do,lo),M(ny,lo,null),e(lo,Por),e(lo,E7e),e(E7e,Bor),e(lo,Ior),e(lo,Va),e(Va,Nor),e(Va,C7e),e(C7e,qor),e(Va,jor),e(Va,w7e),e(w7e,Dor),e(Va,Gor),e(Va,A7e),e(A7e,Oor),e(Va,Vor),e(lo,Xor),e(lo,Fe),e(Fe,QF),e(QF,L7e),e(L7e,zor),e(QF,Qor),e(QF,dQ),e(dQ,Wor),e(QF,Hor),e(Fe,Uor),e(Fe,WF),e(WF,y7e),e(y7e,Jor),e(WF,Yor),e(WF,cQ),e(cQ,Kor),e(WF,Zor),e(Fe,err),e(Fe,HF),e(HF,x7e),e(x7e,orr),e(HF,rrr),e(HF,fQ),e(fQ,trr),e(HF,arr),e(Fe,nrr),e(Fe,UF),e(UF,$7e),e($7e,srr),e(UF,lrr),e(UF,mQ),e(mQ,irr),e(UF,drr),e(Fe,crr),e(Fe,Vs),e(Vs,k7e),e(k7e,frr),e(Vs,mrr),e(Vs,gQ),e(gQ,grr),e(Vs,hrr),e(Vs,hQ),e(hQ,prr),e(Vs,_rr),e(Fe,urr),e(Fe,JF),e(JF,S7e),e(S7e,brr),e(JF,vrr),e(JF,pQ),e(pQ,Frr),e(JF,Trr),e(Fe,Mrr),e(Fe,Xs),e(Xs,R7e),e(R7e,Err),e(Xs,Crr),e(Xs,_Q),e(_Q,wrr),e(Xs,Arr),e(Xs,uQ),e(uQ,Lrr),e(Xs,yrr),e(Fe,xrr),e(Fe,ut),e(ut,P7e),e(P7e,$rr),e(ut,krr),e(ut,bQ),e(bQ,Srr),e(ut,Rrr),e(ut,vQ),e(vQ,Prr),e(ut,Brr),e(ut,FQ),e(FQ,Irr),e(ut,Nrr),e(Fe,qrr),e(Fe,YF),e(YF,B7e),e(B7e,jrr),e(YF,Drr),e(YF,TQ),e(TQ,Grr),e(YF,Orr),e(Fe,Vrr),e(Fe,KF),e(KF,I7e),e(I7e,Xrr),e(KF,zrr),e(KF,MQ),e(MQ,Qrr),e(KF,Wrr),e(Fe,Hrr),e(Fe,ZF),e(ZF,N7e),e(N7e,Urr),e(ZF,Jrr),e(ZF,EQ),e(EQ,Yrr),e(ZF,Krr),e(Fe,Zrr),e(Fe,eT),e(eT,q7e),e(q7e,etr),e(eT,otr),e(eT,CQ),e(CQ,rtr),e(eT,ttr),e(Fe,atr),e(Fe,oT),e(oT,j7e),e(j7e,ntr),e(oT,str),e(oT,wQ),e(wQ,ltr),e(oT,itr),e(Fe,dtr),e(Fe,rT),e(rT,D7e),e(D7e,ctr),e(rT,ftr),e(rT,AQ),e(AQ,mtr),e(rT,gtr),e(Fe,htr),e(Fe,tT),e(tT,G7e),e(G7e,ptr),e(tT,_tr),e(tT,LQ),e(LQ,utr),e(tT,btr),e(lo,vtr),e(lo,aT),e(aT,Ftr),e(aT,O7e),e(O7e,Ttr),e(aT,Mtr),e(aT,V7e),e(V7e,Etr),e(lo,Ctr),M(nT,lo,null),b(f,bOe,u),b(f,ud,u),e(ud,sT),e(sT,X7e),M(sy,X7e,null),e(ud,wtr),e(ud,z7e),e(z7e,Atr),b(f,vOe,u),b(f,Go,u),M(ly,Go,null),e(Go,Ltr),e(Go,bd),e(bd,ytr),e(bd,yQ),e(yQ,xtr),e(bd,$tr),e(bd,xQ),e(xQ,ktr),e(bd,Str),e(Go,Rtr),e(Go,iy),e(iy,Ptr),e(iy,Q7e),e(Q7e,Btr),e(iy,Itr),e(Go,Ntr),e(Go,bt),M(dy,bt,null),e(bt,qtr),e(bt,W7e),e(W7e,jtr),e(bt,Dtr),e(bt,vd),e(vd,Gtr),e(vd,H7e),e(H7e,Otr),e(vd,Vtr),e(vd,$Q),e($Q,Xtr),e(vd,ztr),e(bt,Qtr),M(lT,bt,null),e(Go,Wtr),e(Go,io),M(cy,io,null),e(io,Htr),e(io,U7e),e(U7e,Utr),e(io,Jtr),e(io,Xa),e(Xa,Ytr),e(Xa,J7e),e(J7e,Ktr),e(Xa,Ztr),e(Xa,Y7e),e(Y7e,ear),e(Xa,oar),e(Xa,K7e),e(K7e,rar),e(Xa,tar),e(io,aar),e(io,Z7e),e(Z7e,iT),e(iT,e1e),e(e1e,nar),e(iT,sar),e(iT,kQ),e(kQ,lar),e(iT,iar),e(io,dar),e(io,dT),e(dT,car),e(dT,o1e),e(o1e,far),e(dT,mar),e(dT,r1e),e(r1e,gar),e(io,har),M(cT,io,null),b(f,FOe,u),b(f,Fd,u),e(Fd,fT),e(fT,t1e),M(fy,t1e,null),e(Fd,par),e(Fd,a1e),e(a1e,_ar),b(f,TOe,u),b(f,Oo,u),M(my,Oo,null),e(Oo,uar),e(Oo,Td),e(Td,bar),e(Td,SQ),e(SQ,Far),e(Td,Tar),e(Td,RQ),e(RQ,Mar),e(Td,Ear),e(Oo,Car),e(Oo,gy),e(gy,war),e(gy,n1e),e(n1e,Aar),e(gy,Lar),e(Oo,yar),e(Oo,vt),M(hy,vt,null),e(vt,xar),e(vt,s1e),e(s1e,$ar),e(vt,kar),e(vt,Md),e(Md,Sar),e(Md,l1e),e(l1e,Rar),e(Md,Par),e(Md,PQ),e(PQ,Bar),e(Md,Iar),e(vt,Nar),M(mT,vt,null),e(Oo,qar),e(Oo,co),M(py,co,null),e(co,jar),e(co,i1e),e(i1e,Dar),e(co,Gar),e(co,za),e(za,Oar),e(za,d1e),e(d1e,Var),e(za,Xar),e(za,c1e),e(c1e,zar),e(za,Qar),e(za,f1e),e(f1e,War),e(za,Har),e(co,Uar),e(co,m1e),e(m1e,gT),e(gT,g1e),e(g1e,Jar),e(gT,Yar),e(gT,BQ),e(BQ,Kar),e(gT,Zar),e(co,enr),e(co,hT),e(hT,onr),e(hT,h1e),e(h1e,rnr),e(hT,tnr),e(hT,p1e),e(p1e,anr),e(co,nnr),M(pT,co,null),b(f,MOe,u),b(f,Ed,u),e(Ed,_T),e(_T,_1e),M(_y,_1e,null),e(Ed,snr),e(Ed,u1e),e(u1e,lnr),b(f,EOe,u),b(f,Vo,u),M(uy,Vo,null),e(Vo,inr),e(Vo,Cd),e(Cd,dnr),e(Cd,IQ),e(IQ,cnr),e(Cd,fnr),e(Cd,NQ),e(NQ,mnr),e(Cd,gnr),e(Vo,hnr),e(Vo,by),e(by,pnr),e(by,b1e),e(b1e,_nr),e(by,unr),e(Vo,bnr),e(Vo,Ft),M(vy,Ft,null),e(Ft,vnr),e(Ft,v1e),e(v1e,Fnr),e(Ft,Tnr),e(Ft,wd),e(wd,Mnr),e(wd,F1e),e(F1e,Enr),e(wd,Cnr),e(wd,qQ),e(qQ,wnr),e(wd,Anr),e(Ft,Lnr),M(uT,Ft,null),e(Vo,ynr),e(Vo,fo),M(Fy,fo,null),e(fo,xnr),e(fo,T1e),e(T1e,$nr),e(fo,knr),e(fo,Qa),e(Qa,Snr),e(Qa,M1e),e(M1e,Rnr),e(Qa,Pnr),e(Qa,E1e),e(E1e,Bnr),e(Qa,Inr),e(Qa,C1e),e(C1e,Nnr),e(Qa,qnr),e(fo,jnr),e(fo,Pe),e(Pe,bT),e(bT,w1e),e(w1e,Dnr),e(bT,Gnr),e(bT,jQ),e(jQ,Onr),e(bT,Vnr),e(Pe,Xnr),e(Pe,vT),e(vT,A1e),e(A1e,znr),e(vT,Qnr),e(vT,DQ),e(DQ,Wnr),e(vT,Hnr),e(Pe,Unr),e(Pe,FT),e(FT,L1e),e(L1e,Jnr),e(FT,Ynr),e(FT,GQ),e(GQ,Knr),e(FT,Znr),e(Pe,esr),e(Pe,TT),e(TT,y1e),e(y1e,osr),e(TT,rsr),e(TT,OQ),e(OQ,tsr),e(TT,asr),e(Pe,nsr),e(Pe,MT),e(MT,x1e),e(x1e,ssr),e(MT,lsr),e(MT,VQ),e(VQ,isr),e(MT,dsr),e(Pe,csr),e(Pe,ET),e(ET,$1e),e($1e,fsr),e(ET,msr),e(ET,XQ),e(XQ,gsr),e(ET,hsr),e(Pe,psr),e(Pe,CT),e(CT,k1e),e(k1e,_sr),e(CT,usr),e(CT,zQ),e(zQ,bsr),e(CT,vsr),e(Pe,Fsr),e(Pe,wT),e(wT,S1e),e(S1e,Tsr),e(wT,Msr),e(wT,QQ),e(QQ,Esr),e(wT,Csr),e(Pe,wsr),e(Pe,AT),e(AT,R1e),e(R1e,Asr),e(AT,Lsr),e(AT,WQ),e(WQ,ysr),e(AT,xsr),e(fo,$sr),e(fo,LT),e(LT,ksr),e(LT,P1e),e(P1e,Ssr),e(LT,Rsr),e(LT,B1e),e(B1e,Psr),e(fo,Bsr),M(yT,fo,null),b(f,COe,u),b(f,Ad,u),e(Ad,xT),e(xT,I1e),M(Ty,I1e,null),e(Ad,Isr),e(Ad,N1e),e(N1e,Nsr),b(f,wOe,u),b(f,Xo,u),M(My,Xo,null),e(Xo,qsr),e(Xo,Ld),e(Ld,jsr),e(Ld,HQ),e(HQ,Dsr),e(Ld,Gsr),e(Ld,UQ),e(UQ,Osr),e(Ld,Vsr),e(Xo,Xsr),e(Xo,Ey),e(Ey,zsr),e(Ey,q1e),e(q1e,Qsr),e(Ey,Wsr),e(Xo,Hsr),e(Xo,Tt),M(Cy,Tt,null),e(Tt,Usr),e(Tt,j1e),e(j1e,Jsr),e(Tt,Ysr),e(Tt,yd),e(yd,Ksr),e(yd,D1e),e(D1e,Zsr),e(yd,elr),e(yd,JQ),e(JQ,olr),e(yd,rlr),e(Tt,tlr),M($T,Tt,null),e(Xo,alr),e(Xo,mo),M(wy,mo,null),e(mo,nlr),e(mo,G1e),e(G1e,slr),e(mo,llr),e(mo,Wa),e(Wa,ilr),e(Wa,O1e),e(O1e,dlr),e(Wa,clr),e(Wa,V1e),e(V1e,flr),e(Wa,mlr),e(Wa,X1e),e(X1e,glr),e(Wa,hlr),e(mo,plr),e(mo,et),e(et,kT),e(kT,z1e),e(z1e,_lr),e(kT,ulr),e(kT,YQ),e(YQ,blr),e(kT,vlr),e(et,Flr),e(et,ST),e(ST,Q1e),e(Q1e,Tlr),e(ST,Mlr),e(ST,KQ),e(KQ,Elr),e(ST,Clr),e(et,wlr),e(et,RT),e(RT,W1e),e(W1e,Alr),e(RT,Llr),e(RT,ZQ),e(ZQ,ylr),e(RT,xlr),e(et,$lr),e(et,PT),e(PT,H1e),e(H1e,klr),e(PT,Slr),e(PT,eW),e(eW,Rlr),e(PT,Plr),e(et,Blr),e(et,BT),e(BT,U1e),e(U1e,Ilr),e(BT,Nlr),e(BT,oW),e(oW,qlr),e(BT,jlr),e(mo,Dlr),e(mo,IT),e(IT,Glr),e(IT,J1e),e(J1e,Olr),e(IT,Vlr),e(IT,Y1e),e(Y1e,Xlr),e(mo,zlr),M(NT,mo,null),b(f,AOe,u),b(f,xd,u),e(xd,qT),e(qT,K1e),M(Ay,K1e,null),e(xd,Qlr),e(xd,Z1e),e(Z1e,Wlr),b(f,LOe,u),b(f,zo,u),M(Ly,zo,null),e(zo,Hlr),e(zo,$d),e($d,Ulr),e($d,rW),e(rW,Jlr),e($d,Ylr),e($d,tW),e(tW,Klr),e($d,Zlr),e(zo,eir),e(zo,yy),e(yy,oir),e(yy,e2e),e(e2e,rir),e(yy,tir),e(zo,air),e(zo,Mt),M(xy,Mt,null),e(Mt,nir),e(Mt,o2e),e(o2e,sir),e(Mt,lir),e(Mt,kd),e(kd,iir),e(kd,r2e),e(r2e,dir),e(kd,cir),e(kd,aW),e(aW,fir),e(kd,mir),e(Mt,gir),M(jT,Mt,null),e(zo,hir),e(zo,go),M($y,go,null),e(go,pir),e(go,t2e),e(t2e,_ir),e(go,uir),e(go,Ha),e(Ha,bir),e(Ha,a2e),e(a2e,vir),e(Ha,Fir),e(Ha,n2e),e(n2e,Tir),e(Ha,Mir),e(Ha,s2e),e(s2e,Eir),e(Ha,Cir),e(go,wir),e(go,Le),e(Le,DT),e(DT,l2e),e(l2e,Air),e(DT,Lir),e(DT,nW),e(nW,yir),e(DT,xir),e(Le,$ir),e(Le,GT),e(GT,i2e),e(i2e,kir),e(GT,Sir),e(GT,sW),e(sW,Rir),e(GT,Pir),e(Le,Bir),e(Le,OT),e(OT,d2e),e(d2e,Iir),e(OT,Nir),e(OT,lW),e(lW,qir),e(OT,jir),e(Le,Dir),e(Le,VT),e(VT,c2e),e(c2e,Gir),e(VT,Oir),e(VT,iW),e(iW,Vir),e(VT,Xir),e(Le,zir),e(Le,XT),e(XT,f2e),e(f2e,Qir),e(XT,Wir),e(XT,dW),e(dW,Hir),e(XT,Uir),e(Le,Jir),e(Le,zT),e(zT,m2e),e(m2e,Yir),e(zT,Kir),e(zT,cW),e(cW,Zir),e(zT,edr),e(Le,odr),e(Le,QT),e(QT,g2e),e(g2e,rdr),e(QT,tdr),e(QT,fW),e(fW,adr),e(QT,ndr),e(Le,sdr),e(Le,WT),e(WT,h2e),e(h2e,ldr),e(WT,idr),e(WT,mW),e(mW,ddr),e(WT,cdr),e(Le,fdr),e(Le,HT),e(HT,p2e),e(p2e,mdr),e(HT,gdr),e(HT,gW),e(gW,hdr),e(HT,pdr),e(Le,_dr),e(Le,UT),e(UT,_2e),e(_2e,udr),e(UT,bdr),e(UT,hW),e(hW,vdr),e(UT,Fdr),e(go,Tdr),e(go,JT),e(JT,Mdr),e(JT,u2e),e(u2e,Edr),e(JT,Cdr),e(JT,b2e),e(b2e,wdr),e(go,Adr),M(YT,go,null),b(f,yOe,u),b(f,Sd,u),e(Sd,KT),e(KT,v2e),M(ky,v2e,null),e(Sd,Ldr),e(Sd,F2e),e(F2e,ydr),b(f,xOe,u),b(f,Qo,u),M(Sy,Qo,null),e(Qo,xdr),e(Qo,Rd),e(Rd,$dr),e(Rd,pW),e(pW,kdr),e(Rd,Sdr),e(Rd,_W),e(_W,Rdr),e(Rd,Pdr),e(Qo,Bdr),e(Qo,Ry),e(Ry,Idr),e(Ry,T2e),e(T2e,Ndr),e(Ry,qdr),e(Qo,jdr),e(Qo,Et),M(Py,Et,null),e(Et,Ddr),e(Et,M2e),e(M2e,Gdr),e(Et,Odr),e(Et,Pd),e(Pd,Vdr),e(Pd,E2e),e(E2e,Xdr),e(Pd,zdr),e(Pd,uW),e(uW,Qdr),e(Pd,Wdr),e(Et,Hdr),M(ZT,Et,null),e(Qo,Udr),e(Qo,ho),M(By,ho,null),e(ho,Jdr),e(ho,C2e),e(C2e,Ydr),e(ho,Kdr),e(ho,Ua),e(Ua,Zdr),e(Ua,w2e),e(w2e,ecr),e(Ua,ocr),e(Ua,A2e),e(A2e,rcr),e(Ua,tcr),e(Ua,L2e),e(L2e,acr),e(Ua,ncr),e(ho,scr),e(ho,Iy),e(Iy,e8),e(e8,y2e),e(y2e,lcr),e(e8,icr),e(e8,bW),e(bW,dcr),e(e8,ccr),e(Iy,fcr),e(Iy,o8),e(o8,x2e),e(x2e,mcr),e(o8,gcr),e(o8,vW),e(vW,hcr),e(o8,pcr),e(ho,_cr),e(ho,r8),e(r8,ucr),e(r8,$2e),e($2e,bcr),e(r8,vcr),e(r8,k2e),e(k2e,Fcr),e(ho,Tcr),M(t8,ho,null),b(f,$Oe,u),b(f,Bd,u),e(Bd,a8),e(a8,S2e),M(Ny,S2e,null),e(Bd,Mcr),e(Bd,R2e),e(R2e,Ecr),b(f,kOe,u),b(f,Wo,u),M(qy,Wo,null),e(Wo,Ccr),e(Wo,Id),e(Id,wcr),e(Id,FW),e(FW,Acr),e(Id,Lcr),e(Id,TW),e(TW,ycr),e(Id,xcr),e(Wo,$cr),e(Wo,jy),e(jy,kcr),e(jy,P2e),e(P2e,Scr),e(jy,Rcr),e(Wo,Pcr),e(Wo,Ct),M(Dy,Ct,null),e(Ct,Bcr),e(Ct,B2e),e(B2e,Icr),e(Ct,Ncr),e(Ct,Nd),e(Nd,qcr),e(Nd,I2e),e(I2e,jcr),e(Nd,Dcr),e(Nd,MW),e(MW,Gcr),e(Nd,Ocr),e(Ct,Vcr),M(n8,Ct,null),e(Wo,Xcr),e(Wo,po),M(Gy,po,null),e(po,zcr),e(po,N2e),e(N2e,Qcr),e(po,Wcr),e(po,Ja),e(Ja,Hcr),e(Ja,q2e),e(q2e,Ucr),e(Ja,Jcr),e(Ja,j2e),e(j2e,Ycr),e(Ja,Kcr),e(Ja,D2e),e(D2e,Zcr),e(Ja,efr),e(po,ofr),e(po,ot),e(ot,s8),e(s8,G2e),e(G2e,rfr),e(s8,tfr),e(s8,EW),e(EW,afr),e(s8,nfr),e(ot,sfr),e(ot,l8),e(l8,O2e),e(O2e,lfr),e(l8,ifr),e(l8,CW),e(CW,dfr),e(l8,cfr),e(ot,ffr),e(ot,i8),e(i8,V2e),e(V2e,mfr),e(i8,gfr),e(i8,wW),e(wW,hfr),e(i8,pfr),e(ot,_fr),e(ot,d8),e(d8,X2e),e(X2e,ufr),e(d8,bfr),e(d8,AW),e(AW,vfr),e(d8,Ffr),e(ot,Tfr),e(ot,c8),e(c8,z2e),e(z2e,Mfr),e(c8,Efr),e(c8,LW),e(LW,Cfr),e(c8,wfr),e(po,Afr),e(po,f8),e(f8,Lfr),e(f8,Q2e),e(Q2e,yfr),e(f8,xfr),e(f8,W2e),e(W2e,$fr),e(po,kfr),M(m8,po,null),b(f,SOe,u),b(f,qd,u),e(qd,g8),e(g8,H2e),M(Oy,H2e,null),e(qd,Sfr),e(qd,U2e),e(U2e,Rfr),b(f,ROe,u),b(f,Ho,u),M(Vy,Ho,null),e(Ho,Pfr),e(Ho,jd),e(jd,Bfr),e(jd,yW),e(yW,Ifr),e(jd,Nfr),e(jd,xW),e(xW,qfr),e(jd,jfr),e(Ho,Dfr),e(Ho,Xy),e(Xy,Gfr),e(Xy,J2e),e(J2e,Ofr),e(Xy,Vfr),e(Ho,Xfr),e(Ho,wt),M(zy,wt,null),e(wt,zfr),e(wt,Y2e),e(Y2e,Qfr),e(wt,Wfr),e(wt,Dd),e(Dd,Hfr),e(Dd,K2e),e(K2e,Ufr),e(Dd,Jfr),e(Dd,$W),e($W,Yfr),e(Dd,Kfr),e(wt,Zfr),M(h8,wt,null),e(Ho,emr),e(Ho,_o),M(Qy,_o,null),e(_o,omr),e(_o,Z2e),e(Z2e,rmr),e(_o,tmr),e(_o,Ya),e(Ya,amr),e(Ya,ebe),e(ebe,nmr),e(Ya,smr),e(Ya,obe),e(obe,lmr),e(Ya,imr),e(Ya,rbe),e(rbe,dmr),e(Ya,cmr),e(_o,fmr),e(_o,Gd),e(Gd,p8),e(p8,tbe),e(tbe,mmr),e(p8,gmr),e(p8,kW),e(kW,hmr),e(p8,pmr),e(Gd,_mr),e(Gd,_8),e(_8,abe),e(abe,umr),e(_8,bmr),e(_8,SW),e(SW,vmr),e(_8,Fmr),e(Gd,Tmr),e(Gd,u8),e(u8,nbe),e(nbe,Mmr),e(u8,Emr),e(u8,RW),e(RW,Cmr),e(u8,wmr),e(_o,Amr),e(_o,b8),e(b8,Lmr),e(b8,sbe),e(sbe,ymr),e(b8,xmr),e(b8,lbe),e(lbe,$mr),e(_o,kmr),M(v8,_o,null),b(f,POe,u),b(f,Od,u),e(Od,F8),e(F8,ibe),M(Wy,ibe,null),e(Od,Smr),e(Od,dbe),e(dbe,Rmr),b(f,BOe,u),b(f,Uo,u),M(Hy,Uo,null),e(Uo,Pmr),e(Uo,Vd),e(Vd,Bmr),e(Vd,PW),e(PW,Imr),e(Vd,Nmr),e(Vd,BW),e(BW,qmr),e(Vd,jmr),e(Uo,Dmr),e(Uo,Uy),e(Uy,Gmr),e(Uy,cbe),e(cbe,Omr),e(Uy,Vmr),e(Uo,Xmr),e(Uo,At),M(Jy,At,null),e(At,zmr),e(At,fbe),e(fbe,Qmr),e(At,Wmr),e(At,Xd),e(Xd,Hmr),e(Xd,mbe),e(mbe,Umr),e(Xd,Jmr),e(Xd,IW),e(IW,Ymr),e(Xd,Kmr),e(At,Zmr),M(T8,At,null),e(Uo,egr),e(Uo,uo),M(Yy,uo,null),e(uo,ogr),e(uo,gbe),e(gbe,rgr),e(uo,tgr),e(uo,Ka),e(Ka,agr),e(Ka,hbe),e(hbe,ngr),e(Ka,sgr),e(Ka,pbe),e(pbe,lgr),e(Ka,igr),e(Ka,_be),e(_be,dgr),e(Ka,cgr),e(uo,fgr),e(uo,Ky),e(Ky,M8),e(M8,ube),e(ube,mgr),e(M8,ggr),e(M8,NW),e(NW,hgr),e(M8,pgr),e(Ky,_gr),e(Ky,E8),e(E8,bbe),e(bbe,ugr),e(E8,bgr),e(E8,qW),e(qW,vgr),e(E8,Fgr),e(uo,Tgr),e(uo,C8),e(C8,Mgr),e(C8,vbe),e(vbe,Egr),e(C8,Cgr),e(C8,Fbe),e(Fbe,wgr),e(uo,Agr),M(w8,uo,null),b(f,IOe,u),b(f,zd,u),e(zd,A8),e(A8,Tbe),M(Zy,Tbe,null),e(zd,Lgr),e(zd,Mbe),e(Mbe,ygr),b(f,NOe,u),b(f,Jo,u),M(e9,Jo,null),e(Jo,xgr),e(Jo,Qd),e(Qd,$gr),e(Qd,jW),e(jW,kgr),e(Qd,Sgr),e(Qd,DW),e(DW,Rgr),e(Qd,Pgr),e(Jo,Bgr),e(Jo,o9),e(o9,Igr),e(o9,Ebe),e(Ebe,Ngr),e(o9,qgr),e(Jo,jgr),e(Jo,Lt),M(r9,Lt,null),e(Lt,Dgr),e(Lt,Cbe),e(Cbe,Ggr),e(Lt,Ogr),e(Lt,Wd),e(Wd,Vgr),e(Wd,wbe),e(wbe,Xgr),e(Wd,zgr),e(Wd,GW),e(GW,Qgr),e(Wd,Wgr),e(Lt,Hgr),M(L8,Lt,null),e(Jo,Ugr),e(Jo,bo),M(t9,bo,null),e(bo,Jgr),e(bo,Abe),e(Abe,Ygr),e(bo,Kgr),e(bo,Za),e(Za,Zgr),e(Za,Lbe),e(Lbe,ehr),e(Za,ohr),e(Za,ybe),e(ybe,rhr),e(Za,thr),e(Za,xbe),e(xbe,ahr),e(Za,nhr),e(bo,shr),e(bo,$be),e($be,y8),e(y8,kbe),e(kbe,lhr),e(y8,ihr),e(y8,OW),e(OW,dhr),e(y8,chr),e(bo,fhr),e(bo,x8),e(x8,mhr),e(x8,Sbe),e(Sbe,ghr),e(x8,hhr),e(x8,Rbe),e(Rbe,phr),e(bo,_hr),M($8,bo,null),b(f,qOe,u),b(f,Hd,u),e(Hd,k8),e(k8,Pbe),M(a9,Pbe,null),e(Hd,uhr),e(Hd,Bbe),e(Bbe,bhr),b(f,jOe,u),b(f,Yo,u),M(n9,Yo,null),e(Yo,vhr),e(Yo,Ud),e(Ud,Fhr),e(Ud,VW),e(VW,Thr),e(Ud,Mhr),e(Ud,XW),e(XW,Ehr),e(Ud,Chr),e(Yo,whr),e(Yo,s9),e(s9,Ahr),e(s9,Ibe),e(Ibe,Lhr),e(s9,yhr),e(Yo,xhr),e(Yo,yt),M(l9,yt,null),e(yt,$hr),e(yt,Nbe),e(Nbe,khr),e(yt,Shr),e(yt,Jd),e(Jd,Rhr),e(Jd,qbe),e(qbe,Phr),e(Jd,Bhr),e(Jd,zW),e(zW,Ihr),e(Jd,Nhr),e(yt,qhr),M(S8,yt,null),e(Yo,jhr),e(Yo,vo),M(i9,vo,null),e(vo,Dhr),e(vo,jbe),e(jbe,Ghr),e(vo,Ohr),e(vo,en),e(en,Vhr),e(en,Dbe),e(Dbe,Xhr),e(en,zhr),e(en,Gbe),e(Gbe,Qhr),e(en,Whr),e(en,Obe),e(Obe,Hhr),e(en,Uhr),e(vo,Jhr),e(vo,on),e(on,R8),e(R8,Vbe),e(Vbe,Yhr),e(R8,Khr),e(R8,QW),e(QW,Zhr),e(R8,epr),e(on,opr),e(on,P8),e(P8,Xbe),e(Xbe,rpr),e(P8,tpr),e(P8,WW),e(WW,apr),e(P8,npr),e(on,spr),e(on,B8),e(B8,zbe),e(zbe,lpr),e(B8,ipr),e(B8,HW),e(HW,dpr),e(B8,cpr),e(on,fpr),e(on,I8),e(I8,Qbe),e(Qbe,mpr),e(I8,gpr),e(I8,UW),e(UW,hpr),e(I8,ppr),e(vo,_pr),e(vo,N8),e(N8,upr),e(N8,Wbe),e(Wbe,bpr),e(N8,vpr),e(N8,Hbe),e(Hbe,Fpr),e(vo,Tpr),M(q8,vo,null),b(f,DOe,u),b(f,Yd,u),e(Yd,j8),e(j8,Ube),M(d9,Ube,null),e(Yd,Mpr),e(Yd,Jbe),e(Jbe,Epr),b(f,GOe,u),b(f,Ko,u),M(c9,Ko,null),e(Ko,Cpr),e(Ko,Kd),e(Kd,wpr),e(Kd,JW),e(JW,Apr),e(Kd,Lpr),e(Kd,YW),e(YW,ypr),e(Kd,xpr),e(Ko,$pr),e(Ko,f9),e(f9,kpr),e(f9,Ybe),e(Ybe,Spr),e(f9,Rpr),e(Ko,Ppr),e(Ko,xt),M(m9,xt,null),e(xt,Bpr),e(xt,Kbe),e(Kbe,Ipr),e(xt,Npr),e(xt,Zd),e(Zd,qpr),e(Zd,Zbe),e(Zbe,jpr),e(Zd,Dpr),e(Zd,KW),e(KW,Gpr),e(Zd,Opr),e(xt,Vpr),M(D8,xt,null),e(Ko,Xpr),e(Ko,Fo),M(g9,Fo,null),e(Fo,zpr),e(Fo,eve),e(eve,Qpr),e(Fo,Wpr),e(Fo,rn),e(rn,Hpr),e(rn,ove),e(ove,Upr),e(rn,Jpr),e(rn,rve),e(rve,Ypr),e(rn,Kpr),e(rn,tve),e(tve,Zpr),e(rn,e_r),e(Fo,o_r),e(Fo,ave),e(ave,G8),e(G8,nve),e(nve,r_r),e(G8,t_r),e(G8,ZW),e(ZW,a_r),e(G8,n_r),e(Fo,s_r),e(Fo,O8),e(O8,l_r),e(O8,sve),e(sve,i_r),e(O8,d_r),e(O8,lve),e(lve,c_r),e(Fo,f_r),M(V8,Fo,null),b(f,OOe,u),b(f,ec,u),e(ec,X8),e(X8,ive),M(h9,ive,null),e(ec,m_r),e(ec,dve),e(dve,g_r),b(f,VOe,u),b(f,Zo,u),M(p9,Zo,null),e(Zo,h_r),e(Zo,oc),e(oc,p_r),e(oc,eH),e(eH,__r),e(oc,u_r),e(oc,oH),e(oH,b_r),e(oc,v_r),e(Zo,F_r),e(Zo,_9),e(_9,T_r),e(_9,cve),e(cve,M_r),e(_9,E_r),e(Zo,C_r),e(Zo,$t),M(u9,$t,null),e($t,w_r),e($t,fve),e(fve,A_r),e($t,L_r),e($t,rc),e(rc,y_r),e(rc,mve),e(mve,x_r),e(rc,$_r),e(rc,rH),e(rH,k_r),e(rc,S_r),e($t,R_r),M(z8,$t,null),e(Zo,P_r),e(Zo,Lr),M(b9,Lr,null),e(Lr,B_r),e(Lr,gve),e(gve,I_r),e(Lr,N_r),e(Lr,tn),e(tn,q_r),e(tn,hve),e(hve,j_r),e(tn,D_r),e(tn,pve),e(pve,G_r),e(tn,O_r),e(tn,_ve),e(_ve,V_r),e(tn,X_r),e(Lr,z_r),e(Lr,j),e(j,Q8),e(Q8,uve),e(uve,Q_r),e(Q8,W_r),e(Q8,tH),e(tH,H_r),e(Q8,U_r),e(j,J_r),e(j,W8),e(W8,bve),e(bve,Y_r),e(W8,K_r),e(W8,aH),e(aH,Z_r),e(W8,eur),e(j,our),e(j,H8),e(H8,vve),e(vve,rur),e(H8,tur),e(H8,nH),e(nH,aur),e(H8,nur),e(j,sur),e(j,U8),e(U8,Fve),e(Fve,lur),e(U8,iur),e(U8,sH),e(sH,dur),e(U8,cur),e(j,fur),e(j,J8),e(J8,Tve),e(Tve,mur),e(J8,gur),e(J8,lH),e(lH,hur),e(J8,pur),e(j,_ur),e(j,Y8),e(Y8,Mve),e(Mve,uur),e(Y8,bur),e(Y8,iH),e(iH,vur),e(Y8,Fur),e(j,Tur),e(j,K8),e(K8,Eve),e(Eve,Mur),e(K8,Eur),e(K8,dH),e(dH,Cur),e(K8,wur),e(j,Aur),e(j,Z8),e(Z8,Cve),e(Cve,Lur),e(Z8,yur),e(Z8,cH),e(cH,xur),e(Z8,$ur),e(j,kur),e(j,eM),e(eM,wve),e(wve,Sur),e(eM,Rur),e(eM,fH),e(fH,Pur),e(eM,Bur),e(j,Iur),e(j,oM),e(oM,Ave),e(Ave,Nur),e(oM,qur),e(oM,mH),e(mH,jur),e(oM,Dur),e(j,Gur),e(j,rM),e(rM,Lve),e(Lve,Our),e(rM,Vur),e(rM,gH),e(gH,Xur),e(rM,zur),e(j,Qur),e(j,tM),e(tM,yve),e(yve,Wur),e(tM,Hur),e(tM,hH),e(hH,Uur),e(tM,Jur),e(j,Yur),e(j,aM),e(aM,xve),e(xve,Kur),e(aM,Zur),e(aM,pH),e(pH,e7r),e(aM,o7r),e(j,r7r),e(j,nM),e(nM,$ve),e($ve,t7r),e(nM,a7r),e(nM,_H),e(_H,n7r),e(nM,s7r),e(j,l7r),e(j,sM),e(sM,kve),e(kve,i7r),e(sM,d7r),e(sM,uH),e(uH,c7r),e(sM,f7r),e(j,m7r),e(j,lM),e(lM,Sve),e(Sve,g7r),e(lM,h7r),e(lM,bH),e(bH,p7r),e(lM,_7r),e(j,u7r),e(j,iM),e(iM,Rve),e(Rve,b7r),e(iM,v7r),e(iM,vH),e(vH,F7r),e(iM,T7r),e(j,M7r),e(j,zs),e(zs,Pve),e(Pve,E7r),e(zs,C7r),e(zs,FH),e(FH,w7r),e(zs,A7r),e(zs,TH),e(TH,L7r),e(zs,y7r),e(j,x7r),e(j,dM),e(dM,Bve),e(Bve,$7r),e(dM,k7r),e(dM,MH),e(MH,S7r),e(dM,R7r),e(j,P7r),e(j,cM),e(cM,Ive),e(Ive,B7r),e(cM,I7r),e(cM,EH),e(EH,N7r),e(cM,q7r),e(j,j7r),e(j,fM),e(fM,Nve),e(Nve,D7r),e(fM,G7r),e(fM,CH),e(CH,O7r),e(fM,V7r),e(j,X7r),e(j,mM),e(mM,qve),e(qve,z7r),e(mM,Q7r),e(mM,wH),e(wH,W7r),e(mM,H7r),e(j,U7r),e(j,gM),e(gM,jve),e(jve,J7r),e(gM,Y7r),e(gM,AH),e(AH,K7r),e(gM,Z7r),e(j,e1r),e(j,hM),e(hM,Dve),e(Dve,o1r),e(hM,r1r),e(hM,LH),e(LH,t1r),e(hM,a1r),e(j,n1r),e(j,pM),e(pM,Gve),e(Gve,s1r),e(pM,l1r),e(pM,yH),e(yH,i1r),e(pM,d1r),e(j,c1r),e(j,_M),e(_M,Ove),e(Ove,f1r),e(_M,m1r),e(_M,xH),e(xH,g1r),e(_M,h1r),e(j,p1r),e(j,uM),e(uM,Vve),e(Vve,_1r),e(uM,u1r),e(uM,$H),e($H,b1r),e(uM,v1r),e(j,F1r),e(j,bM),e(bM,Xve),e(Xve,T1r),e(bM,M1r),e(bM,kH),e(kH,E1r),e(bM,C1r),e(j,w1r),e(j,vM),e(vM,zve),e(zve,A1r),e(vM,L1r),e(vM,SH),e(SH,y1r),e(vM,x1r),e(j,$1r),e(j,FM),e(FM,Qve),e(Qve,k1r),e(FM,S1r),e(FM,RH),e(RH,R1r),e(FM,P1r),e(j,B1r),e(j,TM),e(TM,Wve),e(Wve,I1r),e(TM,N1r),e(TM,PH),e(PH,q1r),e(TM,j1r),e(j,D1r),e(j,MM),e(MM,Hve),e(Hve,G1r),e(MM,O1r),e(MM,BH),e(BH,V1r),e(MM,X1r),e(j,z1r),e(j,EM),e(EM,Uve),e(Uve,Q1r),e(EM,W1r),e(EM,IH),e(IH,H1r),e(EM,U1r),e(j,J1r),e(j,CM),e(CM,Jve),e(Jve,Y1r),e(CM,K1r),e(CM,NH),e(NH,Z1r),e(CM,e2r),e(j,o2r),e(j,wM),e(wM,Yve),e(Yve,r2r),e(wM,t2r),e(wM,qH),e(qH,a2r),e(wM,n2r),e(j,s2r),e(j,AM),e(AM,Kve),e(Kve,l2r),e(AM,i2r),e(AM,jH),e(jH,d2r),e(AM,c2r),e(j,f2r),e(j,LM),e(LM,Zve),e(Zve,m2r),e(LM,g2r),e(LM,DH),e(DH,h2r),e(LM,p2r),e(j,_2r),e(j,yM),e(yM,eFe),e(eFe,u2r),e(yM,b2r),e(yM,GH),e(GH,v2r),e(yM,F2r),e(j,T2r),e(j,xM),e(xM,oFe),e(oFe,M2r),e(xM,E2r),e(xM,OH),e(OH,C2r),e(xM,w2r),e(j,A2r),e(j,$M),e($M,rFe),e(rFe,L2r),e($M,y2r),e($M,VH),e(VH,x2r),e($M,$2r),e(j,k2r),e(j,kM),e(kM,tFe),e(tFe,S2r),e(kM,R2r),e(kM,XH),e(XH,P2r),e(kM,B2r),e(j,I2r),e(j,SM),e(SM,aFe),e(aFe,N2r),e(SM,q2r),e(SM,zH),e(zH,j2r),e(SM,D2r),e(j,G2r),e(j,RM),e(RM,nFe),e(nFe,O2r),e(RM,V2r),e(RM,QH),e(QH,X2r),e(RM,z2r),e(j,Q2r),e(j,PM),e(PM,sFe),e(sFe,W2r),e(PM,H2r),e(PM,WH),e(WH,U2r),e(PM,J2r),e(j,Y2r),e(j,BM),e(BM,lFe),e(lFe,K2r),e(BM,Z2r),e(BM,HH),e(HH,ebr),e(BM,obr),e(j,rbr),e(j,IM),e(IM,iFe),e(iFe,tbr),e(IM,abr),e(IM,UH),e(UH,nbr),e(IM,sbr),e(j,lbr),e(j,NM),e(NM,dFe),e(dFe,ibr),e(NM,dbr),e(NM,JH),e(JH,cbr),e(NM,fbr),e(Lr,mbr),M(qM,Lr,null),b(f,XOe,u),b(f,tc,u),e(tc,jM),e(jM,cFe),M(v9,cFe,null),e(tc,gbr),e(tc,fFe),e(fFe,hbr),b(f,zOe,u),b(f,er,u),M(F9,er,null),e(er,pbr),e(er,ac),e(ac,_br),e(ac,YH),e(YH,ubr),e(ac,bbr),e(ac,KH),e(KH,vbr),e(ac,Fbr),e(er,Tbr),e(er,T9),e(T9,Mbr),e(T9,mFe),e(mFe,Ebr),e(T9,Cbr),e(er,wbr),e(er,kt),M(M9,kt,null),e(kt,Abr),e(kt,gFe),e(gFe,Lbr),e(kt,ybr),e(kt,nc),e(nc,xbr),e(nc,hFe),e(hFe,$br),e(nc,kbr),e(nc,ZH),e(ZH,Sbr),e(nc,Rbr),e(kt,Pbr),M(DM,kt,null),e(er,Bbr),e(er,yr),M(E9,yr,null),e(yr,Ibr),e(yr,pFe),e(pFe,Nbr),e(yr,qbr),e(yr,an),e(an,jbr),e(an,_Fe),e(_Fe,Dbr),e(an,Gbr),e(an,uFe),e(uFe,Obr),e(an,Vbr),e(an,bFe),e(bFe,Xbr),e(an,zbr),e(yr,Qbr),e(yr,se),e(se,GM),e(GM,vFe),e(vFe,Wbr),e(GM,Hbr),e(GM,eU),e(eU,Ubr),e(GM,Jbr),e(se,Ybr),e(se,OM),e(OM,FFe),e(FFe,Kbr),e(OM,Zbr),e(OM,oU),e(oU,evr),e(OM,ovr),e(se,rvr),e(se,VM),e(VM,TFe),e(TFe,tvr),e(VM,avr),e(VM,rU),e(rU,nvr),e(VM,svr),e(se,lvr),e(se,XM),e(XM,MFe),e(MFe,ivr),e(XM,dvr),e(XM,tU),e(tU,cvr),e(XM,fvr),e(se,mvr),e(se,zM),e(zM,EFe),e(EFe,gvr),e(zM,hvr),e(zM,aU),e(aU,pvr),e(zM,_vr),e(se,uvr),e(se,QM),e(QM,CFe),e(CFe,bvr),e(QM,vvr),e(QM,nU),e(nU,Fvr),e(QM,Tvr),e(se,Mvr),e(se,WM),e(WM,wFe),e(wFe,Evr),e(WM,Cvr),e(WM,sU),e(sU,wvr),e(WM,Avr),e(se,Lvr),e(se,HM),e(HM,AFe),e(AFe,yvr),e(HM,xvr),e(HM,lU),e(lU,$vr),e(HM,kvr),e(se,Svr),e(se,UM),e(UM,LFe),e(LFe,Rvr),e(UM,Pvr),e(UM,iU),e(iU,Bvr),e(UM,Ivr),e(se,Nvr),e(se,JM),e(JM,yFe),e(yFe,qvr),e(JM,jvr),e(JM,dU),e(dU,Dvr),e(JM,Gvr),e(se,Ovr),e(se,YM),e(YM,xFe),e(xFe,Vvr),e(YM,Xvr),e(YM,cU),e(cU,zvr),e(YM,Qvr),e(se,Wvr),e(se,KM),e(KM,$Fe),e($Fe,Hvr),e(KM,Uvr),e(KM,fU),e(fU,Jvr),e(KM,Yvr),e(se,Kvr),e(se,ZM),e(ZM,kFe),e(kFe,Zvr),e(ZM,eFr),e(ZM,mU),e(mU,oFr),e(ZM,rFr),e(se,tFr),e(se,eE),e(eE,SFe),e(SFe,aFr),e(eE,nFr),e(eE,gU),e(gU,sFr),e(eE,lFr),e(se,iFr),e(se,oE),e(oE,RFe),e(RFe,dFr),e(oE,cFr),e(oE,hU),e(hU,fFr),e(oE,mFr),e(se,gFr),e(se,rE),e(rE,PFe),e(PFe,hFr),e(rE,pFr),e(rE,pU),e(pU,_Fr),e(rE,uFr),e(se,bFr),e(se,tE),e(tE,BFe),e(BFe,vFr),e(tE,FFr),e(tE,_U),e(_U,TFr),e(tE,MFr),e(se,EFr),e(se,aE),e(aE,IFe),e(IFe,CFr),e(aE,wFr),e(aE,uU),e(uU,AFr),e(aE,LFr),e(se,yFr),e(se,nE),e(nE,NFe),e(NFe,xFr),e(nE,$Fr),e(nE,bU),e(bU,kFr),e(nE,SFr),e(se,RFr),e(se,sE),e(sE,qFe),e(qFe,PFr),e(sE,BFr),e(sE,vU),e(vU,IFr),e(sE,NFr),e(se,qFr),e(se,lE),e(lE,jFe),e(jFe,jFr),e(lE,DFr),e(lE,FU),e(FU,GFr),e(lE,OFr),e(se,VFr),e(se,iE),e(iE,DFe),e(DFe,XFr),e(iE,zFr),e(iE,TU),e(TU,QFr),e(iE,WFr),e(se,HFr),e(se,dE),e(dE,GFe),e(GFe,UFr),e(dE,JFr),e(dE,MU),e(MU,YFr),e(dE,KFr),e(yr,ZFr),M(cE,yr,null),b(f,QOe,u),b(f,sc,u),e(sc,fE),e(fE,OFe),M(C9,OFe,null),e(sc,eTr),e(sc,VFe),e(VFe,oTr),b(f,WOe,u),b(f,or,u),M(w9,or,null),e(or,rTr),e(or,lc),e(lc,tTr),e(lc,EU),e(EU,aTr),e(lc,nTr),e(lc,CU),e(CU,sTr),e(lc,lTr),e(or,iTr),e(or,A9),e(A9,dTr),e(A9,XFe),e(XFe,cTr),e(A9,fTr),e(or,mTr),e(or,St),M(L9,St,null),e(St,gTr),e(St,zFe),e(zFe,hTr),e(St,pTr),e(St,ic),e(ic,_Tr),e(ic,QFe),e(QFe,uTr),e(ic,bTr),e(ic,wU),e(wU,vTr),e(ic,FTr),e(St,TTr),M(mE,St,null),e(or,MTr),e(or,xr),M(y9,xr,null),e(xr,ETr),e(xr,WFe),e(WFe,CTr),e(xr,wTr),e(xr,nn),e(nn,ATr),e(nn,HFe),e(HFe,LTr),e(nn,yTr),e(nn,UFe),e(UFe,xTr),e(nn,$Tr),e(nn,JFe),e(JFe,kTr),e(nn,STr),e(xr,RTr),e(xr,Me),e(Me,gE),e(gE,YFe),e(YFe,PTr),e(gE,BTr),e(gE,AU),e(AU,ITr),e(gE,NTr),e(Me,qTr),e(Me,hE),e(hE,KFe),e(KFe,jTr),e(hE,DTr),e(hE,LU),e(LU,GTr),e(hE,OTr),e(Me,VTr),e(Me,pE),e(pE,ZFe),e(ZFe,XTr),e(pE,zTr),e(pE,yU),e(yU,QTr),e(pE,WTr),e(Me,HTr),e(Me,_E),e(_E,eTe),e(eTe,UTr),e(_E,JTr),e(_E,xU),e(xU,YTr),e(_E,KTr),e(Me,ZTr),e(Me,uE),e(uE,oTe),e(oTe,e8r),e(uE,o8r),e(uE,$U),e($U,r8r),e(uE,t8r),e(Me,a8r),e(Me,bE),e(bE,rTe),e(rTe,n8r),e(bE,s8r),e(bE,kU),e(kU,l8r),e(bE,i8r),e(Me,d8r),e(Me,vE),e(vE,tTe),e(tTe,c8r),e(vE,f8r),e(vE,SU),e(SU,m8r),e(vE,g8r),e(Me,h8r),e(Me,FE),e(FE,aTe),e(aTe,p8r),e(FE,_8r),e(FE,RU),e(RU,u8r),e(FE,b8r),e(Me,v8r),e(Me,TE),e(TE,nTe),e(nTe,F8r),e(TE,T8r),e(TE,PU),e(PU,M8r),e(TE,E8r),e(Me,C8r),e(Me,ME),e(ME,sTe),e(sTe,w8r),e(ME,A8r),e(ME,BU),e(BU,L8r),e(ME,y8r),e(Me,x8r),e(Me,EE),e(EE,lTe),e(lTe,$8r),e(EE,k8r),e(EE,IU),e(IU,S8r),e(EE,R8r),e(Me,P8r),e(Me,CE),e(CE,iTe),e(iTe,B8r),e(CE,I8r),e(CE,NU),e(NU,N8r),e(CE,q8r),e(Me,j8r),e(Me,wE),e(wE,dTe),e(dTe,D8r),e(wE,G8r),e(wE,qU),e(qU,O8r),e(wE,V8r),e(xr,X8r),M(AE,xr,null),b(f,HOe,u),b(f,dc,u),e(dc,LE),e(LE,cTe),M(x9,cTe,null),e(dc,z8r),e(dc,fTe),e(fTe,Q8r),b(f,UOe,u),b(f,rr,u),M($9,rr,null),e(rr,W8r),e(rr,cc),e(cc,H8r),e(cc,jU),e(jU,U8r),e(cc,J8r),e(cc,DU),e(DU,Y8r),e(cc,K8r),e(rr,Z8r),e(rr,k9),e(k9,eMr),e(k9,mTe),e(mTe,oMr),e(k9,rMr),e(rr,tMr),e(rr,Rt),M(S9,Rt,null),e(Rt,aMr),e(Rt,gTe),e(gTe,nMr),e(Rt,sMr),e(Rt,fc),e(fc,lMr),e(fc,hTe),e(hTe,iMr),e(fc,dMr),e(fc,GU),e(GU,cMr),e(fc,fMr),e(Rt,mMr),M(yE,Rt,null),e(rr,gMr),e(rr,$r),M(R9,$r,null),e($r,hMr),e($r,pTe),e(pTe,pMr),e($r,_Mr),e($r,sn),e(sn,uMr),e(sn,_Te),e(_Te,bMr),e(sn,vMr),e(sn,uTe),e(uTe,FMr),e(sn,TMr),e(sn,bTe),e(bTe,MMr),e(sn,EMr),e($r,CMr),e($r,ln),e(ln,xE),e(xE,vTe),e(vTe,wMr),e(xE,AMr),e(xE,OU),e(OU,LMr),e(xE,yMr),e(ln,xMr),e(ln,$E),e($E,FTe),e(FTe,$Mr),e($E,kMr),e($E,VU),e(VU,SMr),e($E,RMr),e(ln,PMr),e(ln,kE),e(kE,TTe),e(TTe,BMr),e(kE,IMr),e(kE,XU),e(XU,NMr),e(kE,qMr),e(ln,jMr),e(ln,SE),e(SE,MTe),e(MTe,DMr),e(SE,GMr),e(SE,zU),e(zU,OMr),e(SE,VMr),e($r,XMr),M(RE,$r,null),b(f,JOe,u),b(f,mc,u),e(mc,PE),e(PE,ETe),M(P9,ETe,null),e(mc,zMr),e(mc,CTe),e(CTe,QMr),b(f,YOe,u),b(f,tr,u),M(B9,tr,null),e(tr,WMr),e(tr,gc),e(gc,HMr),e(gc,QU),e(QU,UMr),e(gc,JMr),e(gc,WU),e(WU,YMr),e(gc,KMr),e(tr,ZMr),e(tr,I9),e(I9,eEr),e(I9,wTe),e(wTe,oEr),e(I9,rEr),e(tr,tEr),e(tr,Pt),M(N9,Pt,null),e(Pt,aEr),e(Pt,ATe),e(ATe,nEr),e(Pt,sEr),e(Pt,hc),e(hc,lEr),e(hc,LTe),e(LTe,iEr),e(hc,dEr),e(hc,HU),e(HU,cEr),e(hc,fEr),e(Pt,mEr),M(BE,Pt,null),e(tr,gEr),e(tr,kr),M(q9,kr,null),e(kr,hEr),e(kr,yTe),e(yTe,pEr),e(kr,_Er),e(kr,dn),e(dn,uEr),e(dn,xTe),e(xTe,bEr),e(dn,vEr),e(dn,$Te),e($Te,FEr),e(dn,TEr),e(dn,kTe),e(kTe,MEr),e(dn,EEr),e(kr,CEr),e(kr,ie),e(ie,IE),e(IE,STe),e(STe,wEr),e(IE,AEr),e(IE,UU),e(UU,LEr),e(IE,yEr),e(ie,xEr),e(ie,NE),e(NE,RTe),e(RTe,$Er),e(NE,kEr),e(NE,JU),e(JU,SEr),e(NE,REr),e(ie,PEr),e(ie,qE),e(qE,PTe),e(PTe,BEr),e(qE,IEr),e(qE,YU),e(YU,NEr),e(qE,qEr),e(ie,jEr),e(ie,jE),e(jE,BTe),e(BTe,DEr),e(jE,GEr),e(jE,KU),e(KU,OEr),e(jE,VEr),e(ie,XEr),e(ie,DE),e(DE,ITe),e(ITe,zEr),e(DE,QEr),e(DE,ZU),e(ZU,WEr),e(DE,HEr),e(ie,UEr),e(ie,GE),e(GE,NTe),e(NTe,JEr),e(GE,YEr),e(GE,eJ),e(eJ,KEr),e(GE,ZEr),e(ie,e4r),e(ie,OE),e(OE,qTe),e(qTe,o4r),e(OE,r4r),e(OE,oJ),e(oJ,t4r),e(OE,a4r),e(ie,n4r),e(ie,VE),e(VE,jTe),e(jTe,s4r),e(VE,l4r),e(VE,rJ),e(rJ,i4r),e(VE,d4r),e(ie,c4r),e(ie,XE),e(XE,DTe),e(DTe,f4r),e(XE,m4r),e(XE,tJ),e(tJ,g4r),e(XE,h4r),e(ie,p4r),e(ie,zE),e(zE,GTe),e(GTe,_4r),e(zE,u4r),e(zE,aJ),e(aJ,b4r),e(zE,v4r),e(ie,F4r),e(ie,QE),e(QE,OTe),e(OTe,T4r),e(QE,M4r),e(QE,nJ),e(nJ,E4r),e(QE,C4r),e(ie,w4r),e(ie,WE),e(WE,VTe),e(VTe,A4r),e(WE,L4r),e(WE,sJ),e(sJ,y4r),e(WE,x4r),e(ie,$4r),e(ie,HE),e(HE,XTe),e(XTe,k4r),e(HE,S4r),e(HE,lJ),e(lJ,R4r),e(HE,P4r),e(ie,B4r),e(ie,UE),e(UE,zTe),e(zTe,I4r),e(UE,N4r),e(UE,iJ),e(iJ,q4r),e(UE,j4r),e(ie,D4r),e(ie,JE),e(JE,QTe),e(QTe,G4r),e(JE,O4r),e(JE,dJ),e(dJ,V4r),e(JE,X4r),e(ie,z4r),e(ie,YE),e(YE,WTe),e(WTe,Q4r),e(YE,W4r),e(YE,cJ),e(cJ,H4r),e(YE,U4r),e(ie,J4r),e(ie,KE),e(KE,HTe),e(HTe,Y4r),e(KE,K4r),e(KE,fJ),e(fJ,Z4r),e(KE,eCr),e(ie,oCr),e(ie,ZE),e(ZE,UTe),e(UTe,rCr),e(ZE,tCr),e(ZE,mJ),e(mJ,aCr),e(ZE,nCr),e(ie,sCr),e(ie,e4),e(e4,JTe),e(JTe,lCr),e(e4,iCr),e(e4,gJ),e(gJ,dCr),e(e4,cCr),e(ie,fCr),e(ie,o4),e(o4,YTe),e(YTe,mCr),e(o4,gCr),e(o4,hJ),e(hJ,hCr),e(o4,pCr),e(kr,_Cr),M(r4,kr,null),b(f,KOe,u),b(f,pc,u),e(pc,t4),e(t4,KTe),M(j9,KTe,null),e(pc,uCr),e(pc,ZTe),e(ZTe,bCr),b(f,ZOe,u),b(f,ar,u),M(D9,ar,null),e(ar,vCr),e(ar,_c),e(_c,FCr),e(_c,pJ),e(pJ,TCr),e(_c,MCr),e(_c,_J),e(_J,ECr),e(_c,CCr),e(ar,wCr),e(ar,G9),e(G9,ACr),e(G9,e8e),e(e8e,LCr),e(G9,yCr),e(ar,xCr),e(ar,Bt),M(O9,Bt,null),e(Bt,$Cr),e(Bt,o8e),e(o8e,kCr),e(Bt,SCr),e(Bt,uc),e(uc,RCr),e(uc,r8e),e(r8e,PCr),e(uc,BCr),e(uc,uJ),e(uJ,ICr),e(uc,NCr),e(Bt,qCr),M(a4,Bt,null),e(ar,jCr),e(ar,Sr),M(V9,Sr,null),e(Sr,DCr),e(Sr,t8e),e(t8e,GCr),e(Sr,OCr),e(Sr,cn),e(cn,VCr),e(cn,a8e),e(a8e,XCr),e(cn,zCr),e(cn,n8e),e(n8e,QCr),e(cn,WCr),e(cn,s8e),e(s8e,HCr),e(cn,UCr),e(Sr,JCr),e(Sr,ye),e(ye,n4),e(n4,l8e),e(l8e,YCr),e(n4,KCr),e(n4,bJ),e(bJ,ZCr),e(n4,e5r),e(ye,o5r),e(ye,s4),e(s4,i8e),e(i8e,r5r),e(s4,t5r),e(s4,vJ),e(vJ,a5r),e(s4,n5r),e(ye,s5r),e(ye,l4),e(l4,d8e),e(d8e,l5r),e(l4,i5r),e(l4,FJ),e(FJ,d5r),e(l4,c5r),e(ye,f5r),e(ye,i4),e(i4,c8e),e(c8e,m5r),e(i4,g5r),e(i4,TJ),e(TJ,h5r),e(i4,p5r),e(ye,_5r),e(ye,d4),e(d4,f8e),e(f8e,u5r),e(d4,b5r),e(d4,MJ),e(MJ,v5r),e(d4,F5r),e(ye,T5r),e(ye,c4),e(c4,m8e),e(m8e,M5r),e(c4,E5r),e(c4,EJ),e(EJ,C5r),e(c4,w5r),e(ye,A5r),e(ye,f4),e(f4,g8e),e(g8e,L5r),e(f4,y5r),e(f4,CJ),e(CJ,x5r),e(f4,$5r),e(ye,k5r),e(ye,m4),e(m4,h8e),e(h8e,S5r),e(m4,R5r),e(m4,wJ),e(wJ,P5r),e(m4,B5r),e(ye,I5r),e(ye,g4),e(g4,p8e),e(p8e,N5r),e(g4,q5r),e(g4,AJ),e(AJ,j5r),e(g4,D5r),e(ye,G5r),e(ye,h4),e(h4,_8e),e(_8e,O5r),e(h4,V5r),e(h4,LJ),e(LJ,X5r),e(h4,z5r),e(Sr,Q5r),M(p4,Sr,null),b(f,eVe,u),b(f,bc,u),e(bc,_4),e(_4,u8e),M(X9,u8e,null),e(bc,W5r),e(bc,b8e),e(b8e,H5r),b(f,oVe,u),b(f,nr,u),M(z9,nr,null),e(nr,U5r),e(nr,vc),e(vc,J5r),e(vc,yJ),e(yJ,Y5r),e(vc,K5r),e(vc,xJ),e(xJ,Z5r),e(vc,e3r),e(nr,o3r),e(nr,Q9),e(Q9,r3r),e(Q9,v8e),e(v8e,t3r),e(Q9,a3r),e(nr,n3r),e(nr,It),M(W9,It,null),e(It,s3r),e(It,F8e),e(F8e,l3r),e(It,i3r),e(It,Fc),e(Fc,d3r),e(Fc,T8e),e(T8e,c3r),e(Fc,f3r),e(Fc,$J),e($J,m3r),e(Fc,g3r),e(It,h3r),M(u4,It,null),e(nr,p3r),e(nr,Rr),M(H9,Rr,null),e(Rr,_3r),e(Rr,M8e),e(M8e,u3r),e(Rr,b3r),e(Rr,fn),e(fn,v3r),e(fn,E8e),e(E8e,F3r),e(fn,T3r),e(fn,C8e),e(C8e,M3r),e(fn,E3r),e(fn,w8e),e(w8e,C3r),e(fn,w3r),e(Rr,A3r),e(Rr,te),e(te,b4),e(b4,A8e),e(A8e,L3r),e(b4,y3r),e(b4,kJ),e(kJ,x3r),e(b4,$3r),e(te,k3r),e(te,v4),e(v4,L8e),e(L8e,S3r),e(v4,R3r),e(v4,SJ),e(SJ,P3r),e(v4,B3r),e(te,I3r),e(te,F4),e(F4,y8e),e(y8e,N3r),e(F4,q3r),e(F4,RJ),e(RJ,j3r),e(F4,D3r),e(te,G3r),e(te,T4),e(T4,x8e),e(x8e,O3r),e(T4,V3r),e(T4,PJ),e(PJ,X3r),e(T4,z3r),e(te,Q3r),e(te,M4),e(M4,$8e),e($8e,W3r),e(M4,H3r),e(M4,BJ),e(BJ,U3r),e(M4,J3r),e(te,Y3r),e(te,E4),e(E4,k8e),e(k8e,K3r),e(E4,Z3r),e(E4,IJ),e(IJ,e0r),e(E4,o0r),e(te,r0r),e(te,C4),e(C4,S8e),e(S8e,t0r),e(C4,a0r),e(C4,NJ),e(NJ,n0r),e(C4,s0r),e(te,l0r),e(te,w4),e(w4,R8e),e(R8e,i0r),e(w4,d0r),e(w4,qJ),e(qJ,c0r),e(w4,f0r),e(te,m0r),e(te,A4),e(A4,P8e),e(P8e,g0r),e(A4,h0r),e(A4,jJ),e(jJ,p0r),e(A4,_0r),e(te,u0r),e(te,L4),e(L4,B8e),e(B8e,b0r),e(L4,v0r),e(L4,DJ),e(DJ,F0r),e(L4,T0r),e(te,M0r),e(te,y4),e(y4,I8e),e(I8e,E0r),e(y4,C0r),e(y4,GJ),e(GJ,w0r),e(y4,A0r),e(te,L0r),e(te,x4),e(x4,N8e),e(N8e,y0r),e(x4,x0r),e(x4,OJ),e(OJ,$0r),e(x4,k0r),e(te,S0r),e(te,$4),e($4,q8e),e(q8e,R0r),e($4,P0r),e($4,VJ),e(VJ,B0r),e($4,I0r),e(te,N0r),e(te,k4),e(k4,j8e),e(j8e,q0r),e(k4,j0r),e(k4,XJ),e(XJ,D0r),e(k4,G0r),e(te,O0r),e(te,S4),e(S4,D8e),e(D8e,V0r),e(S4,X0r),e(S4,zJ),e(zJ,z0r),e(S4,Q0r),e(te,W0r),e(te,R4),e(R4,G8e),e(G8e,H0r),e(R4,U0r),e(R4,QJ),e(QJ,J0r),e(R4,Y0r),e(te,K0r),e(te,P4),e(P4,O8e),e(O8e,Z0r),e(P4,ewr),e(P4,WJ),e(WJ,owr),e(P4,rwr),e(te,twr),e(te,B4),e(B4,V8e),e(V8e,awr),e(B4,nwr),e(B4,HJ),e(HJ,swr),e(B4,lwr),e(te,iwr),e(te,I4),e(I4,X8e),e(X8e,dwr),e(I4,cwr),e(I4,UJ),e(UJ,fwr),e(I4,mwr),e(te,gwr),e(te,N4),e(N4,z8e),e(z8e,hwr),e(N4,pwr),e(N4,JJ),e(JJ,_wr),e(N4,uwr),e(te,bwr),e(te,q4),e(q4,Q8e),e(Q8e,vwr),e(q4,Fwr),e(q4,YJ),e(YJ,Twr),e(q4,Mwr),e(te,Ewr),e(te,j4),e(j4,W8e),e(W8e,Cwr),e(j4,wwr),e(j4,KJ),e(KJ,Awr),e(j4,Lwr),e(te,ywr),e(te,D4),e(D4,H8e),e(H8e,xwr),e(D4,$wr),e(D4,ZJ),e(ZJ,kwr),e(D4,Swr),e(te,Rwr),e(te,G4),e(G4,U8e),e(U8e,Pwr),e(G4,Bwr),e(G4,eY),e(eY,Iwr),e(G4,Nwr),e(te,qwr),e(te,O4),e(O4,J8e),e(J8e,jwr),e(O4,Dwr),e(O4,oY),e(oY,Gwr),e(O4,Owr),e(te,Vwr),e(te,V4),e(V4,Y8e),e(Y8e,Xwr),e(V4,zwr),e(V4,rY),e(rY,Qwr),e(V4,Wwr),e(Rr,Hwr),M(X4,Rr,null),b(f,rVe,u),b(f,Tc,u),e(Tc,z4),e(z4,K8e),M(U9,K8e,null),e(Tc,Uwr),e(Tc,Z8e),e(Z8e,Jwr),b(f,tVe,u),b(f,sr,u),M(J9,sr,null),e(sr,Ywr),e(sr,Mc),e(Mc,Kwr),e(Mc,tY),e(tY,Zwr),e(Mc,eAr),e(Mc,aY),e(aY,oAr),e(Mc,rAr),e(sr,tAr),e(sr,Y9),e(Y9,aAr),e(Y9,eMe),e(eMe,nAr),e(Y9,sAr),e(sr,lAr),e(sr,Nt),M(K9,Nt,null),e(Nt,iAr),e(Nt,oMe),e(oMe,dAr),e(Nt,cAr),e(Nt,Ec),e(Ec,fAr),e(Ec,rMe),e(rMe,mAr),e(Ec,gAr),e(Ec,nY),e(nY,hAr),e(Ec,pAr),e(Nt,_Ar),M(Q4,Nt,null),e(sr,uAr),e(sr,Pr),M(Z9,Pr,null),e(Pr,bAr),e(Pr,tMe),e(tMe,vAr),e(Pr,FAr),e(Pr,mn),e(mn,TAr),e(mn,aMe),e(aMe,MAr),e(mn,EAr),e(mn,nMe),e(nMe,CAr),e(mn,wAr),e(mn,sMe),e(sMe,AAr),e(mn,LAr),e(Pr,yAr),e(Pr,_e),e(_e,W4),e(W4,lMe),e(lMe,xAr),e(W4,$Ar),e(W4,sY),e(sY,kAr),e(W4,SAr),e(_e,RAr),e(_e,H4),e(H4,iMe),e(iMe,PAr),e(H4,BAr),e(H4,lY),e(lY,IAr),e(H4,NAr),e(_e,qAr),e(_e,U4),e(U4,dMe),e(dMe,jAr),e(U4,DAr),e(U4,iY),e(iY,GAr),e(U4,OAr),e(_e,VAr),e(_e,J4),e(J4,cMe),e(cMe,XAr),e(J4,zAr),e(J4,dY),e(dY,QAr),e(J4,WAr),e(_e,HAr),e(_e,Y4),e(Y4,fMe),e(fMe,UAr),e(Y4,JAr),e(Y4,cY),e(cY,YAr),e(Y4,KAr),e(_e,ZAr),e(_e,K4),e(K4,mMe),e(mMe,e6r),e(K4,o6r),e(K4,fY),e(fY,r6r),e(K4,t6r),e(_e,a6r),e(_e,Z4),e(Z4,gMe),e(gMe,n6r),e(Z4,s6r),e(Z4,mY),e(mY,l6r),e(Z4,i6r),e(_e,d6r),e(_e,eC),e(eC,hMe),e(hMe,c6r),e(eC,f6r),e(eC,gY),e(gY,m6r),e(eC,g6r),e(_e,h6r),e(_e,oC),e(oC,pMe),e(pMe,p6r),e(oC,_6r),e(oC,hY),e(hY,u6r),e(oC,b6r),e(_e,v6r),e(_e,rC),e(rC,_Me),e(_Me,F6r),e(rC,T6r),e(rC,pY),e(pY,M6r),e(rC,E6r),e(_e,C6r),e(_e,tC),e(tC,uMe),e(uMe,w6r),e(tC,A6r),e(tC,_Y),e(_Y,L6r),e(tC,y6r),e(_e,x6r),e(_e,aC),e(aC,bMe),e(bMe,$6r),e(aC,k6r),e(aC,uY),e(uY,S6r),e(aC,R6r),e(_e,P6r),e(_e,nC),e(nC,vMe),e(vMe,B6r),e(nC,I6r),e(nC,bY),e(bY,N6r),e(nC,q6r),e(_e,j6r),e(_e,sC),e(sC,FMe),e(FMe,D6r),e(sC,G6r),e(sC,vY),e(vY,O6r),e(sC,V6r),e(_e,X6r),e(_e,lC),e(lC,TMe),e(TMe,z6r),e(lC,Q6r),e(lC,FY),e(FY,W6r),e(lC,H6r),e(_e,U6r),e(_e,iC),e(iC,MMe),e(MMe,J6r),e(iC,Y6r),e(iC,TY),e(TY,K6r),e(iC,Z6r),e(_e,eLr),e(_e,dC),e(dC,EMe),e(EMe,oLr),e(dC,rLr),e(dC,MY),e(MY,tLr),e(dC,aLr),e(Pr,nLr),M(cC,Pr,null),b(f,aVe,u),b(f,Cc,u),e(Cc,fC),e(fC,CMe),M(ex,CMe,null),e(Cc,sLr),e(Cc,wMe),e(wMe,lLr),b(f,nVe,u),b(f,lr,u),M(ox,lr,null),e(lr,iLr),e(lr,wc),e(wc,dLr),e(wc,EY),e(EY,cLr),e(wc,fLr),e(wc,CY),e(CY,mLr),e(wc,gLr),e(lr,hLr),e(lr,rx),e(rx,pLr),e(rx,AMe),e(AMe,_Lr),e(rx,uLr),e(lr,bLr),e(lr,qt),M(tx,qt,null),e(qt,vLr),e(qt,LMe),e(LMe,FLr),e(qt,TLr),e(qt,Ac),e(Ac,MLr),e(Ac,yMe),e(yMe,ELr),e(Ac,CLr),e(Ac,wY),e(wY,wLr),e(Ac,ALr),e(qt,LLr),M(mC,qt,null),e(lr,yLr),e(lr,Br),M(ax,Br,null),e(Br,xLr),e(Br,xMe),e(xMe,$Lr),e(Br,kLr),e(Br,gn),e(gn,SLr),e(gn,$Me),e($Me,RLr),e(gn,PLr),e(gn,kMe),e(kMe,BLr),e(gn,ILr),e(gn,SMe),e(SMe,NLr),e(gn,qLr),e(Br,jLr),e(Br,nx),e(nx,gC),e(gC,RMe),e(RMe,DLr),e(gC,GLr),e(gC,AY),e(AY,OLr),e(gC,VLr),e(nx,XLr),e(nx,hC),e(hC,PMe),e(PMe,zLr),e(hC,QLr),e(hC,LY),e(LY,WLr),e(hC,HLr),e(Br,ULr),M(pC,Br,null),b(f,sVe,u),b(f,Lc,u),e(Lc,_C),e(_C,BMe),M(sx,BMe,null),e(Lc,JLr),e(Lc,IMe),e(IMe,YLr),b(f,lVe,u),b(f,ir,u),M(lx,ir,null),e(ir,KLr),e(ir,yc),e(yc,ZLr),e(yc,yY),e(yY,eyr),e(yc,oyr),e(yc,xY),e(xY,ryr),e(yc,tyr),e(ir,ayr),e(ir,ix),e(ix,nyr),e(ix,NMe),e(NMe,syr),e(ix,lyr),e(ir,iyr),e(ir,jt),M(dx,jt,null),e(jt,dyr),e(jt,qMe),e(qMe,cyr),e(jt,fyr),e(jt,xc),e(xc,myr),e(xc,jMe),e(jMe,gyr),e(xc,hyr),e(xc,$Y),e($Y,pyr),e(xc,_yr),e(jt,uyr),M(uC,jt,null),e(ir,byr),e(ir,Ir),M(cx,Ir,null),e(Ir,vyr),e(Ir,DMe),e(DMe,Fyr),e(Ir,Tyr),e(Ir,hn),e(hn,Myr),e(hn,GMe),e(GMe,Eyr),e(hn,Cyr),e(hn,OMe),e(OMe,wyr),e(hn,Ayr),e(hn,VMe),e(VMe,Lyr),e(hn,yyr),e(Ir,xyr),e(Ir,XMe),e(XMe,bC),e(bC,zMe),e(zMe,$yr),e(bC,kyr),e(bC,kY),e(kY,Syr),e(bC,Ryr),e(Ir,Pyr),M(vC,Ir,null),b(f,iVe,u),b(f,$c,u),e($c,FC),e(FC,QMe),M(fx,QMe,null),e($c,Byr),e($c,WMe),e(WMe,Iyr),b(f,dVe,u),b(f,dr,u),M(mx,dr,null),e(dr,Nyr),e(dr,kc),e(kc,qyr),e(kc,SY),e(SY,jyr),e(kc,Dyr),e(kc,RY),e(RY,Gyr),e(kc,Oyr),e(dr,Vyr),e(dr,gx),e(gx,Xyr),e(gx,HMe),e(HMe,zyr),e(gx,Qyr),e(dr,Wyr),e(dr,Dt),M(hx,Dt,null),e(Dt,Hyr),e(Dt,UMe),e(UMe,Uyr),e(Dt,Jyr),e(Dt,Sc),e(Sc,Yyr),e(Sc,JMe),e(JMe,Kyr),e(Sc,Zyr),e(Sc,PY),e(PY,e9r),e(Sc,o9r),e(Dt,r9r),M(TC,Dt,null),e(dr,t9r),e(dr,Nr),M(px,Nr,null),e(Nr,a9r),e(Nr,YMe),e(YMe,n9r),e(Nr,s9r),e(Nr,pn),e(pn,l9r),e(pn,KMe),e(KMe,i9r),e(pn,d9r),e(pn,ZMe),e(ZMe,c9r),e(pn,f9r),e(pn,eEe),e(eEe,m9r),e(pn,g9r),e(Nr,h9r),e(Nr,de),e(de,MC),e(MC,oEe),e(oEe,p9r),e(MC,_9r),e(MC,BY),e(BY,u9r),e(MC,b9r),e(de,v9r),e(de,EC),e(EC,rEe),e(rEe,F9r),e(EC,T9r),e(EC,IY),e(IY,M9r),e(EC,E9r),e(de,C9r),e(de,CC),e(CC,tEe),e(tEe,w9r),e(CC,A9r),e(CC,NY),e(NY,L9r),e(CC,y9r),e(de,x9r),e(de,wC),e(wC,aEe),e(aEe,$9r),e(wC,k9r),e(wC,qY),e(qY,S9r),e(wC,R9r),e(de,P9r),e(de,AC),e(AC,nEe),e(nEe,B9r),e(AC,I9r),e(AC,jY),e(jY,N9r),e(AC,q9r),e(de,j9r),e(de,LC),e(LC,sEe),e(sEe,D9r),e(LC,G9r),e(LC,DY),e(DY,O9r),e(LC,V9r),e(de,X9r),e(de,yC),e(yC,lEe),e(lEe,z9r),e(yC,Q9r),e(yC,GY),e(GY,W9r),e(yC,H9r),e(de,U9r),e(de,xC),e(xC,iEe),e(iEe,J9r),e(xC,Y9r),e(xC,OY),e(OY,K9r),e(xC,Z9r),e(de,exr),e(de,$C),e($C,dEe),e(dEe,oxr),e($C,rxr),e($C,VY),e(VY,txr),e($C,axr),e(de,nxr),e(de,kC),e(kC,cEe),e(cEe,sxr),e(kC,lxr),e(kC,XY),e(XY,ixr),e(kC,dxr),e(de,cxr),e(de,SC),e(SC,fEe),e(fEe,fxr),e(SC,mxr),e(SC,zY),e(zY,gxr),e(SC,hxr),e(de,pxr),e(de,RC),e(RC,mEe),e(mEe,_xr),e(RC,uxr),e(RC,QY),e(QY,bxr),e(RC,vxr),e(de,Fxr),e(de,PC),e(PC,gEe),e(gEe,Txr),e(PC,Mxr),e(PC,WY),e(WY,Exr),e(PC,Cxr),e(de,wxr),e(de,BC),e(BC,hEe),e(hEe,Axr),e(BC,Lxr),e(BC,HY),e(HY,yxr),e(BC,xxr),e(de,$xr),e(de,IC),e(IC,pEe),e(pEe,kxr),e(IC,Sxr),e(IC,UY),e(UY,Rxr),e(IC,Pxr),e(de,Bxr),e(de,NC),e(NC,_Ee),e(_Ee,Ixr),e(NC,Nxr),e(NC,JY),e(JY,qxr),e(NC,jxr),e(de,Dxr),e(de,qC),e(qC,uEe),e(uEe,Gxr),e(qC,Oxr),e(qC,YY),e(YY,Vxr),e(qC,Xxr),e(de,zxr),e(de,jC),e(jC,bEe),e(bEe,Qxr),e(jC,Wxr),e(jC,KY),e(KY,Hxr),e(jC,Uxr),e(de,Jxr),e(de,DC),e(DC,vEe),e(vEe,Yxr),e(DC,Kxr),e(DC,ZY),e(ZY,Zxr),e(DC,e$r),e(de,o$r),e(de,GC),e(GC,FEe),e(FEe,r$r),e(GC,t$r),e(GC,eK),e(eK,a$r),e(GC,n$r),e(Nr,s$r),M(OC,Nr,null),b(f,cVe,u),b(f,Rc,u),e(Rc,VC),e(VC,TEe),M(_x,TEe,null),e(Rc,l$r),e(Rc,MEe),e(MEe,i$r),b(f,fVe,u),b(f,cr,u),M(ux,cr,null),e(cr,d$r),e(cr,Pc),e(Pc,c$r),e(Pc,oK),e(oK,f$r),e(Pc,m$r),e(Pc,rK),e(rK,g$r),e(Pc,h$r),e(cr,p$r),e(cr,bx),e(bx,_$r),e(bx,EEe),e(EEe,u$r),e(bx,b$r),e(cr,v$r),e(cr,Gt),M(vx,Gt,null),e(Gt,F$r),e(Gt,CEe),e(CEe,T$r),e(Gt,M$r),e(Gt,Bc),e(Bc,E$r),e(Bc,wEe),e(wEe,C$r),e(Bc,w$r),e(Bc,tK),e(tK,A$r),e(Bc,L$r),e(Gt,y$r),M(XC,Gt,null),e(cr,x$r),e(cr,qr),M(Fx,qr,null),e(qr,$$r),e(qr,AEe),e(AEe,k$r),e(qr,S$r),e(qr,_n),e(_n,R$r),e(_n,LEe),e(LEe,P$r),e(_n,B$r),e(_n,yEe),e(yEe,I$r),e(_n,N$r),e(_n,xEe),e(xEe,q$r),e(_n,j$r),e(qr,D$r),e(qr,ce),e(ce,zC),e(zC,$Ee),e($Ee,G$r),e(zC,O$r),e(zC,aK),e(aK,V$r),e(zC,X$r),e(ce,z$r),e(ce,QC),e(QC,kEe),e(kEe,Q$r),e(QC,W$r),e(QC,nK),e(nK,H$r),e(QC,U$r),e(ce,J$r),e(ce,WC),e(WC,SEe),e(SEe,Y$r),e(WC,K$r),e(WC,sK),e(sK,Z$r),e(WC,ekr),e(ce,okr),e(ce,HC),e(HC,REe),e(REe,rkr),e(HC,tkr),e(HC,lK),e(lK,akr),e(HC,nkr),e(ce,skr),e(ce,UC),e(UC,PEe),e(PEe,lkr),e(UC,ikr),e(UC,iK),e(iK,dkr),e(UC,ckr),e(ce,fkr),e(ce,JC),e(JC,BEe),e(BEe,mkr),e(JC,gkr),e(JC,dK),e(dK,hkr),e(JC,pkr),e(ce,_kr),e(ce,YC),e(YC,IEe),e(IEe,ukr),e(YC,bkr),e(YC,cK),e(cK,vkr),e(YC,Fkr),e(ce,Tkr),e(ce,KC),e(KC,NEe),e(NEe,Mkr),e(KC,Ekr),e(KC,fK),e(fK,Ckr),e(KC,wkr),e(ce,Akr),e(ce,ZC),e(ZC,qEe),e(qEe,Lkr),e(ZC,ykr),e(ZC,mK),e(mK,xkr),e(ZC,$kr),e(ce,kkr),e(ce,e5),e(e5,jEe),e(jEe,Skr),e(e5,Rkr),e(e5,gK),e(gK,Pkr),e(e5,Bkr),e(ce,Ikr),e(ce,o5),e(o5,DEe),e(DEe,Nkr),e(o5,qkr),e(o5,hK),e(hK,jkr),e(o5,Dkr),e(ce,Gkr),e(ce,r5),e(r5,GEe),e(GEe,Okr),e(r5,Vkr),e(r5,pK),e(pK,Xkr),e(r5,zkr),e(ce,Qkr),e(ce,t5),e(t5,OEe),e(OEe,Wkr),e(t5,Hkr),e(t5,_K),e(_K,Ukr),e(t5,Jkr),e(ce,Ykr),e(ce,a5),e(a5,VEe),e(VEe,Kkr),e(a5,Zkr),e(a5,uK),e(uK,eSr),e(a5,oSr),e(ce,rSr),e(ce,n5),e(n5,XEe),e(XEe,tSr),e(n5,aSr),e(n5,bK),e(bK,nSr),e(n5,sSr),e(ce,lSr),e(ce,s5),e(s5,zEe),e(zEe,iSr),e(s5,dSr),e(s5,vK),e(vK,cSr),e(s5,fSr),e(ce,mSr),e(ce,l5),e(l5,QEe),e(QEe,gSr),e(l5,hSr),e(l5,FK),e(FK,pSr),e(l5,_Sr),e(ce,uSr),e(ce,i5),e(i5,WEe),e(WEe,bSr),e(i5,vSr),e(i5,TK),e(TK,FSr),e(i5,TSr),e(ce,MSr),e(ce,d5),e(d5,HEe),e(HEe,ESr),e(d5,CSr),e(d5,MK),e(MK,wSr),e(d5,ASr),e(ce,LSr),e(ce,c5),e(c5,UEe),e(UEe,ySr),e(c5,xSr),e(c5,EK),e(EK,$Sr),e(c5,kSr),e(qr,SSr),M(f5,qr,null),b(f,mVe,u),b(f,Ic,u),e(Ic,m5),e(m5,JEe),M(Tx,JEe,null),e(Ic,RSr),e(Ic,YEe),e(YEe,PSr),b(f,gVe,u),b(f,fr,u),M(Mx,fr,null),e(fr,BSr),e(fr,Nc),e(Nc,ISr),e(Nc,CK),e(CK,NSr),e(Nc,qSr),e(Nc,wK),e(wK,jSr),e(Nc,DSr),e(fr,GSr),e(fr,Ex),e(Ex,OSr),e(Ex,KEe),e(KEe,VSr),e(Ex,XSr),e(fr,zSr),e(fr,Ot),M(Cx,Ot,null),e(Ot,QSr),e(Ot,ZEe),e(ZEe,WSr),e(Ot,HSr),e(Ot,qc),e(qc,USr),e(qc,e4e),e(e4e,JSr),e(qc,YSr),e(qc,AK),e(AK,KSr),e(qc,ZSr),e(Ot,eRr),M(g5,Ot,null),e(fr,oRr),e(fr,jr),M(wx,jr,null),e(jr,rRr),e(jr,o4e),e(o4e,tRr),e(jr,aRr),e(jr,un),e(un,nRr),e(un,r4e),e(r4e,sRr),e(un,lRr),e(un,t4e),e(t4e,iRr),e(un,dRr),e(un,a4e),e(a4e,cRr),e(un,fRr),e(jr,mRr),e(jr,n4e),e(n4e,h5),e(h5,s4e),e(s4e,gRr),e(h5,hRr),e(h5,LK),e(LK,pRr),e(h5,_Rr),e(jr,uRr),M(p5,jr,null),b(f,hVe,u),b(f,jc,u),e(jc,_5),e(_5,l4e),M(Ax,l4e,null),e(jc,bRr),e(jc,i4e),e(i4e,vRr),b(f,pVe,u),b(f,mr,u),M(Lx,mr,null),e(mr,FRr),e(mr,Dc),e(Dc,TRr),e(Dc,yK),e(yK,MRr),e(Dc,ERr),e(Dc,xK),e(xK,CRr),e(Dc,wRr),e(mr,ARr),e(mr,yx),e(yx,LRr),e(yx,d4e),e(d4e,yRr),e(yx,xRr),e(mr,$Rr),e(mr,Vt),M(xx,Vt,null),e(Vt,kRr),e(Vt,c4e),e(c4e,SRr),e(Vt,RRr),e(Vt,Gc),e(Gc,PRr),e(Gc,f4e),e(f4e,BRr),e(Gc,IRr),e(Gc,$K),e($K,NRr),e(Gc,qRr),e(Vt,jRr),M(u5,Vt,null),e(mr,DRr),e(mr,Dr),M($x,Dr,null),e(Dr,GRr),e(Dr,m4e),e(m4e,ORr),e(Dr,VRr),e(Dr,bn),e(bn,XRr),e(bn,g4e),e(g4e,zRr),e(bn,QRr),e(bn,h4e),e(h4e,WRr),e(bn,HRr),e(bn,p4e),e(p4e,URr),e(bn,JRr),e(Dr,YRr),e(Dr,_4e),e(_4e,b5),e(b5,u4e),e(u4e,KRr),e(b5,ZRr),e(b5,kK),e(kK,ePr),e(b5,oPr),e(Dr,rPr),M(v5,Dr,null),b(f,_Ve,u),b(f,Oc,u),e(Oc,F5),e(F5,b4e),M(kx,b4e,null),e(Oc,tPr),e(Oc,v4e),e(v4e,aPr),b(f,uVe,u),b(f,gr,u),M(Sx,gr,null),e(gr,nPr),e(gr,Vc),e(Vc,sPr),e(Vc,SK),e(SK,lPr),e(Vc,iPr),e(Vc,RK),e(RK,dPr),e(Vc,cPr),e(gr,fPr),e(gr,Rx),e(Rx,mPr),e(Rx,F4e),e(F4e,gPr),e(Rx,hPr),e(gr,pPr),e(gr,Xt),M(Px,Xt,null),e(Xt,_Pr),e(Xt,T4e),e(T4e,uPr),e(Xt,bPr),e(Xt,Xc),e(Xc,vPr),e(Xc,M4e),e(M4e,FPr),e(Xc,TPr),e(Xc,PK),e(PK,MPr),e(Xc,EPr),e(Xt,CPr),M(T5,Xt,null),e(gr,wPr),e(gr,Gr),M(Bx,Gr,null),e(Gr,APr),e(Gr,E4e),e(E4e,LPr),e(Gr,yPr),e(Gr,vn),e(vn,xPr),e(vn,C4e),e(C4e,$Pr),e(vn,kPr),e(vn,w4e),e(w4e,SPr),e(vn,RPr),e(vn,A4e),e(A4e,PPr),e(vn,BPr),e(Gr,IPr),e(Gr,oe),e(oe,M5),e(M5,L4e),e(L4e,NPr),e(M5,qPr),e(M5,BK),e(BK,jPr),e(M5,DPr),e(oe,GPr),e(oe,E5),e(E5,y4e),e(y4e,OPr),e(E5,VPr),e(E5,IK),e(IK,XPr),e(E5,zPr),e(oe,QPr),e(oe,C5),e(C5,x4e),e(x4e,WPr),e(C5,HPr),e(C5,NK),e(NK,UPr),e(C5,JPr),e(oe,YPr),e(oe,w5),e(w5,$4e),e($4e,KPr),e(w5,ZPr),e(w5,qK),e(qK,eBr),e(w5,oBr),e(oe,rBr),e(oe,A5),e(A5,k4e),e(k4e,tBr),e(A5,aBr),e(A5,jK),e(jK,nBr),e(A5,sBr),e(oe,lBr),e(oe,L5),e(L5,S4e),e(S4e,iBr),e(L5,dBr),e(L5,DK),e(DK,cBr),e(L5,fBr),e(oe,mBr),e(oe,y5),e(y5,R4e),e(R4e,gBr),e(y5,hBr),e(y5,GK),e(GK,pBr),e(y5,_Br),e(oe,uBr),e(oe,x5),e(x5,P4e),e(P4e,bBr),e(x5,vBr),e(x5,OK),e(OK,FBr),e(x5,TBr),e(oe,MBr),e(oe,$5),e($5,B4e),e(B4e,EBr),e($5,CBr),e($5,VK),e(VK,wBr),e($5,ABr),e(oe,LBr),e(oe,k5),e(k5,I4e),e(I4e,yBr),e(k5,xBr),e(k5,XK),e(XK,$Br),e(k5,kBr),e(oe,SBr),e(oe,S5),e(S5,N4e),e(N4e,RBr),e(S5,PBr),e(S5,zK),e(zK,BBr),e(S5,IBr),e(oe,NBr),e(oe,R5),e(R5,q4e),e(q4e,qBr),e(R5,jBr),e(R5,QK),e(QK,DBr),e(R5,GBr),e(oe,OBr),e(oe,P5),e(P5,j4e),e(j4e,VBr),e(P5,XBr),e(P5,WK),e(WK,zBr),e(P5,QBr),e(oe,WBr),e(oe,B5),e(B5,D4e),e(D4e,HBr),e(B5,UBr),e(B5,HK),e(HK,JBr),e(B5,YBr),e(oe,KBr),e(oe,I5),e(I5,G4e),e(G4e,ZBr),e(I5,eIr),e(I5,UK),e(UK,oIr),e(I5,rIr),e(oe,tIr),e(oe,N5),e(N5,O4e),e(O4e,aIr),e(N5,nIr),e(N5,JK),e(JK,sIr),e(N5,lIr),e(oe,iIr),e(oe,q5),e(q5,V4e),e(V4e,dIr),e(q5,cIr),e(q5,YK),e(YK,fIr),e(q5,mIr),e(oe,gIr),e(oe,j5),e(j5,X4e),e(X4e,hIr),e(j5,pIr),e(j5,KK),e(KK,_Ir),e(j5,uIr),e(oe,bIr),e(oe,D5),e(D5,z4e),e(z4e,vIr),e(D5,FIr),e(D5,ZK),e(ZK,TIr),e(D5,MIr),e(oe,EIr),e(oe,G5),e(G5,Q4e),e(Q4e,CIr),e(G5,wIr),e(G5,eZ),e(eZ,AIr),e(G5,LIr),e(oe,yIr),e(oe,O5),e(O5,W4e),e(W4e,xIr),e(O5,$Ir),e(O5,oZ),e(oZ,kIr),e(O5,SIr),e(oe,RIr),e(oe,V5),e(V5,H4e),e(H4e,PIr),e(V5,BIr),e(V5,rZ),e(rZ,IIr),e(V5,NIr),e(oe,qIr),e(oe,X5),e(X5,U4e),e(U4e,jIr),e(X5,DIr),e(X5,tZ),e(tZ,GIr),e(X5,OIr),e(oe,VIr),e(oe,z5),e(z5,J4e),e(J4e,XIr),e(z5,zIr),e(z5,aZ),e(aZ,QIr),e(z5,WIr),e(oe,HIr),e(oe,Q5),e(Q5,Y4e),e(Y4e,UIr),e(Q5,JIr),e(Q5,nZ),e(nZ,YIr),e(Q5,KIr),e(oe,ZIr),e(oe,W5),e(W5,K4e),e(K4e,eNr),e(W5,oNr),e(W5,sZ),e(sZ,rNr),e(W5,tNr),e(oe,aNr),e(oe,H5),e(H5,Z4e),e(Z4e,nNr),e(H5,sNr),e(H5,lZ),e(lZ,lNr),e(H5,iNr),e(Gr,dNr),M(U5,Gr,null),b(f,bVe,u),b(f,zc,u),e(zc,J5),e(J5,eCe),M(Ix,eCe,null),e(zc,cNr),e(zc,oCe),e(oCe,fNr),b(f,vVe,u),b(f,hr,u),M(Nx,hr,null),e(hr,mNr),e(hr,Qc),e(Qc,gNr),e(Qc,iZ),e(iZ,hNr),e(Qc,pNr),e(Qc,dZ),e(dZ,_Nr),e(Qc,uNr),e(hr,bNr),e(hr,qx),e(qx,vNr),e(qx,rCe),e(rCe,FNr),e(qx,TNr),e(hr,MNr),e(hr,zt),M(jx,zt,null),e(zt,ENr),e(zt,tCe),e(tCe,CNr),e(zt,wNr),e(zt,Wc),e(Wc,ANr),e(Wc,aCe),e(aCe,LNr),e(Wc,yNr),e(Wc,cZ),e(cZ,xNr),e(Wc,$Nr),e(zt,kNr),M(Y5,zt,null),e(hr,SNr),e(hr,Or),M(Dx,Or,null),e(Or,RNr),e(Or,nCe),e(nCe,PNr),e(Or,BNr),e(Or,Fn),e(Fn,INr),e(Fn,sCe),e(sCe,NNr),e(Fn,qNr),e(Fn,lCe),e(lCe,jNr),e(Fn,DNr),e(Fn,iCe),e(iCe,GNr),e(Fn,ONr),e(Or,VNr),e(Or,xe),e(xe,K5),e(K5,dCe),e(dCe,XNr),e(K5,zNr),e(K5,fZ),e(fZ,QNr),e(K5,WNr),e(xe,HNr),e(xe,Z5),e(Z5,cCe),e(cCe,UNr),e(Z5,JNr),e(Z5,mZ),e(mZ,YNr),e(Z5,KNr),e(xe,ZNr),e(xe,e3),e(e3,fCe),e(fCe,eqr),e(e3,oqr),e(e3,gZ),e(gZ,rqr),e(e3,tqr),e(xe,aqr),e(xe,o3),e(o3,mCe),e(mCe,nqr),e(o3,sqr),e(o3,hZ),e(hZ,lqr),e(o3,iqr),e(xe,dqr),e(xe,r3),e(r3,gCe),e(gCe,cqr),e(r3,fqr),e(r3,pZ),e(pZ,mqr),e(r3,gqr),e(xe,hqr),e(xe,t3),e(t3,hCe),e(hCe,pqr),e(t3,_qr),e(t3,_Z),e(_Z,uqr),e(t3,bqr),e(xe,vqr),e(xe,a3),e(a3,pCe),e(pCe,Fqr),e(a3,Tqr),e(a3,uZ),e(uZ,Mqr),e(a3,Eqr),e(xe,Cqr),e(xe,n3),e(n3,_Ce),e(_Ce,wqr),e(n3,Aqr),e(n3,bZ),e(bZ,Lqr),e(n3,yqr),e(xe,xqr),e(xe,s3),e(s3,uCe),e(uCe,$qr),e(s3,kqr),e(s3,vZ),e(vZ,Sqr),e(s3,Rqr),e(xe,Pqr),e(xe,l3),e(l3,bCe),e(bCe,Bqr),e(l3,Iqr),e(l3,FZ),e(FZ,Nqr),e(l3,qqr),e(Or,jqr),M(i3,Or,null),b(f,FVe,u),b(f,Hc,u),e(Hc,d3),e(d3,vCe),M(Gx,vCe,null),e(Hc,Dqr),e(Hc,FCe),e(FCe,Gqr),b(f,TVe,u),b(f,pr,u),M(Ox,pr,null),e(pr,Oqr),e(pr,Uc),e(Uc,Vqr),e(Uc,TZ),e(TZ,Xqr),e(Uc,zqr),e(Uc,MZ),e(MZ,Qqr),e(Uc,Wqr),e(pr,Hqr),e(pr,Vx),e(Vx,Uqr),e(Vx,TCe),e(TCe,Jqr),e(Vx,Yqr),e(pr,Kqr),e(pr,Qt),M(Xx,Qt,null),e(Qt,Zqr),e(Qt,MCe),e(MCe,ejr),e(Qt,ojr),e(Qt,Jc),e(Jc,rjr),e(Jc,ECe),e(ECe,tjr),e(Jc,ajr),e(Jc,EZ),e(EZ,njr),e(Jc,sjr),e(Qt,ljr),M(c3,Qt,null),e(pr,ijr),e(pr,Vr),M(zx,Vr,null),e(Vr,djr),e(Vr,CCe),e(CCe,cjr),e(Vr,fjr),e(Vr,Tn),e(Tn,mjr),e(Tn,wCe),e(wCe,gjr),e(Tn,hjr),e(Tn,ACe),e(ACe,pjr),e(Tn,_jr),e(Tn,LCe),e(LCe,ujr),e(Tn,bjr),e(Vr,vjr),e(Vr,Ee),e(Ee,f3),e(f3,yCe),e(yCe,Fjr),e(f3,Tjr),e(f3,CZ),e(CZ,Mjr),e(f3,Ejr),e(Ee,Cjr),e(Ee,m3),e(m3,xCe),e(xCe,wjr),e(m3,Ajr),e(m3,wZ),e(wZ,Ljr),e(m3,yjr),e(Ee,xjr),e(Ee,g3),e(g3,$Ce),e($Ce,$jr),e(g3,kjr),e(g3,AZ),e(AZ,Sjr),e(g3,Rjr),e(Ee,Pjr),e(Ee,h3),e(h3,kCe),e(kCe,Bjr),e(h3,Ijr),e(h3,LZ),e(LZ,Njr),e(h3,qjr),e(Ee,jjr),e(Ee,p3),e(p3,SCe),e(SCe,Djr),e(p3,Gjr),e(p3,yZ),e(yZ,Ojr),e(p3,Vjr),e(Ee,Xjr),e(Ee,_3),e(_3,RCe),e(RCe,zjr),e(_3,Qjr),e(_3,xZ),e(xZ,Wjr),e(_3,Hjr),e(Ee,Ujr),e(Ee,u3),e(u3,PCe),e(PCe,Jjr),e(u3,Yjr),e(u3,$Z),e($Z,Kjr),e(u3,Zjr),e(Ee,eDr),e(Ee,b3),e(b3,BCe),e(BCe,oDr),e(b3,rDr),e(b3,kZ),e(kZ,tDr),e(b3,aDr),e(Ee,nDr),e(Ee,v3),e(v3,ICe),e(ICe,sDr),e(v3,lDr),e(v3,SZ),e(SZ,iDr),e(v3,dDr),e(Ee,cDr),e(Ee,F3),e(F3,NCe),e(NCe,fDr),e(F3,mDr),e(F3,RZ),e(RZ,gDr),e(F3,hDr),e(Ee,pDr),e(Ee,T3),e(T3,qCe),e(qCe,_Dr),e(T3,uDr),e(T3,PZ),e(PZ,bDr),e(T3,vDr),e(Ee,FDr),e(Ee,M3),e(M3,jCe),e(jCe,TDr),e(M3,MDr),e(M3,BZ),e(BZ,EDr),e(M3,CDr),e(Ee,wDr),e(Ee,E3),e(E3,DCe),e(DCe,ADr),e(E3,LDr),e(E3,IZ),e(IZ,yDr),e(E3,xDr),e(Vr,$Dr),M(C3,Vr,null),b(f,MVe,u),b(f,Yc,u),e(Yc,w3),e(w3,GCe),M(Qx,GCe,null),e(Yc,kDr),e(Yc,OCe),e(OCe,SDr),b(f,EVe,u),b(f,_r,u),M(Wx,_r,null),e(_r,RDr),e(_r,Kc),e(Kc,PDr),e(Kc,NZ),e(NZ,BDr),e(Kc,IDr),e(Kc,qZ),e(qZ,NDr),e(Kc,qDr),e(_r,jDr),e(_r,Hx),e(Hx,DDr),e(Hx,VCe),e(VCe,GDr),e(Hx,ODr),e(_r,VDr),e(_r,Wt),M(Ux,Wt,null),e(Wt,XDr),e(Wt,XCe),e(XCe,zDr),e(Wt,QDr),e(Wt,Zc),e(Zc,WDr),e(Zc,zCe),e(zCe,HDr),e(Zc,UDr),e(Zc,jZ),e(jZ,JDr),e(Zc,YDr),e(Wt,KDr),M(A3,Wt,null),e(_r,ZDr),e(_r,Xr),M(Jx,Xr,null),e(Xr,eGr),e(Xr,QCe),e(QCe,oGr),e(Xr,rGr),e(Xr,Mn),e(Mn,tGr),e(Mn,WCe),e(WCe,aGr),e(Mn,nGr),e(Mn,HCe),e(HCe,sGr),e(Mn,lGr),e(Mn,UCe),e(UCe,iGr),e(Mn,dGr),e(Xr,cGr),e(Xr,$e),e($e,L3),e(L3,JCe),e(JCe,fGr),e(L3,mGr),e(L3,DZ),e(DZ,gGr),e(L3,hGr),e($e,pGr),e($e,y3),e(y3,YCe),e(YCe,_Gr),e(y3,uGr),e(y3,GZ),e(GZ,bGr),e(y3,vGr),e($e,FGr),e($e,x3),e(x3,KCe),e(KCe,TGr),e(x3,MGr),e(x3,OZ),e(OZ,EGr),e(x3,CGr),e($e,wGr),e($e,$3),e($3,ZCe),e(ZCe,AGr),e($3,LGr),e($3,VZ),e(VZ,yGr),e($3,xGr),e($e,$Gr),e($e,k3),e(k3,e5e),e(e5e,kGr),e(k3,SGr),e(k3,XZ),e(XZ,RGr),e(k3,PGr),e($e,BGr),e($e,S3),e(S3,o5e),e(o5e,IGr),e(S3,NGr),e(S3,zZ),e(zZ,qGr),e(S3,jGr),e($e,DGr),e($e,R3),e(R3,r5e),e(r5e,GGr),e(R3,OGr),e(R3,QZ),e(QZ,VGr),e(R3,XGr),e($e,zGr),e($e,P3),e(P3,t5e),e(t5e,QGr),e(P3,WGr),e(P3,WZ),e(WZ,HGr),e(P3,UGr),e($e,JGr),e($e,B3),e(B3,a5e),e(a5e,YGr),e(B3,KGr),e(B3,HZ),e(HZ,ZGr),e(B3,eOr),e($e,oOr),e($e,I3),e(I3,n5e),e(n5e,rOr),e(I3,tOr),e(I3,UZ),e(UZ,aOr),e(I3,nOr),e(Xr,sOr),M(N3,Xr,null),b(f,CVe,u),b(f,ef,u),e(ef,q3),e(q3,s5e),M(Yx,s5e,null),e(ef,lOr),e(ef,l5e),e(l5e,iOr),b(f,wVe,u),b(f,ur,u),M(Kx,ur,null),e(ur,dOr),e(ur,of),e(of,cOr),e(of,JZ),e(JZ,fOr),e(of,mOr),e(of,YZ),e(YZ,gOr),e(of,hOr),e(ur,pOr),e(ur,Zx),e(Zx,_Or),e(Zx,i5e),e(i5e,uOr),e(Zx,bOr),e(ur,vOr),e(ur,Ht),M(e$,Ht,null),e(Ht,FOr),e(Ht,d5e),e(d5e,TOr),e(Ht,MOr),e(Ht,rf),e(rf,EOr),e(rf,c5e),e(c5e,COr),e(rf,wOr),e(rf,KZ),e(KZ,AOr),e(rf,LOr),e(Ht,yOr),M(j3,Ht,null),e(ur,xOr),e(ur,zr),M(o$,zr,null),e(zr,$Or),e(zr,f5e),e(f5e,kOr),e(zr,SOr),e(zr,En),e(En,ROr),e(En,m5e),e(m5e,POr),e(En,BOr),e(En,g5e),e(g5e,IOr),e(En,NOr),e(En,h5e),e(h5e,qOr),e(En,jOr),e(zr,DOr),e(zr,ke),e(ke,D3),e(D3,p5e),e(p5e,GOr),e(D3,OOr),e(D3,ZZ),e(ZZ,VOr),e(D3,XOr),e(ke,zOr),e(ke,G3),e(G3,_5e),e(_5e,QOr),e(G3,WOr),e(G3,eee),e(eee,HOr),e(G3,UOr),e(ke,JOr),e(ke,O3),e(O3,u5e),e(u5e,YOr),e(O3,KOr),e(O3,oee),e(oee,ZOr),e(O3,eVr),e(ke,oVr),e(ke,V3),e(V3,b5e),e(b5e,rVr),e(V3,tVr),e(V3,ree),e(ree,aVr),e(V3,nVr),e(ke,sVr),e(ke,X3),e(X3,v5e),e(v5e,lVr),e(X3,iVr),e(X3,tee),e(tee,dVr),e(X3,cVr),e(ke,fVr),e(ke,z3),e(z3,F5e),e(F5e,mVr),e(z3,gVr),e(z3,aee),e(aee,hVr),e(z3,pVr),e(ke,_Vr),e(ke,Q3),e(Q3,T5e),e(T5e,uVr),e(Q3,bVr),e(Q3,nee),e(nee,vVr),e(Q3,FVr),e(ke,TVr),e(ke,W3),e(W3,M5e),e(M5e,MVr),e(W3,EVr),e(W3,see),e(see,CVr),e(W3,wVr),e(ke,AVr),e(ke,H3),e(H3,E5e),e(E5e,LVr),e(H3,yVr),e(H3,lee),e(lee,xVr),e(H3,$Vr),e(ke,kVr),e(ke,U3),e(U3,C5e),e(C5e,SVr),e(U3,RVr),e(U3,iee),e(iee,PVr),e(U3,BVr),e(zr,IVr),M(J3,zr,null),b(f,AVe,u),b(f,tf,u),e(tf,Y3),e(Y3,w5e),M(r$,w5e,null),e(tf,NVr),e(tf,A5e),e(A5e,qVr),b(f,LVe,u),b(f,br,u),M(t$,br,null),e(br,jVr),e(br,af),e(af,DVr),e(af,dee),e(dee,GVr),e(af,OVr),e(af,cee),e(cee,VVr),e(af,XVr),e(br,zVr),e(br,a$),e(a$,QVr),e(a$,L5e),e(L5e,WVr),e(a$,HVr),e(br,UVr),e(br,Ut),M(n$,Ut,null),e(Ut,JVr),e(Ut,y5e),e(y5e,YVr),e(Ut,KVr),e(Ut,nf),e(nf,ZVr),e(nf,x5e),e(x5e,eXr),e(nf,oXr),e(nf,fee),e(fee,rXr),e(nf,tXr),e(Ut,aXr),M(K3,Ut,null),e(br,nXr),e(br,Qr),M(s$,Qr,null),e(Qr,sXr),e(Qr,$5e),e($5e,lXr),e(Qr,iXr),e(Qr,Cn),e(Cn,dXr),e(Cn,k5e),e(k5e,cXr),e(Cn,fXr),e(Cn,S5e),e(S5e,mXr),e(Cn,gXr),e(Cn,R5e),e(R5e,hXr),e(Cn,pXr),e(Qr,_Xr),e(Qr,Se),e(Se,Z3),e(Z3,P5e),e(P5e,uXr),e(Z3,bXr),e(Z3,mee),e(mee,vXr),e(Z3,FXr),e(Se,TXr),e(Se,e0),e(e0,B5e),e(B5e,MXr),e(e0,EXr),e(e0,gee),e(gee,CXr),e(e0,wXr),e(Se,AXr),e(Se,o0),e(o0,I5e),e(I5e,LXr),e(o0,yXr),e(o0,hee),e(hee,xXr),e(o0,$Xr),e(Se,kXr),e(Se,r0),e(r0,N5e),e(N5e,SXr),e(r0,RXr),e(r0,pee),e(pee,PXr),e(r0,BXr),e(Se,IXr),e(Se,t0),e(t0,q5e),e(q5e,NXr),e(t0,qXr),e(t0,_ee),e(_ee,jXr),e(t0,DXr),e(Se,GXr),e(Se,a0),e(a0,j5e),e(j5e,OXr),e(a0,VXr),e(a0,uee),e(uee,XXr),e(a0,zXr),e(Se,QXr),e(Se,n0),e(n0,D5e),e(D5e,WXr),e(n0,HXr),e(n0,bee),e(bee,UXr),e(n0,JXr),e(Se,YXr),e(Se,s0),e(s0,G5e),e(G5e,KXr),e(s0,ZXr),e(s0,vee),e(vee,ezr),e(s0,ozr),e(Se,rzr),e(Se,l0),e(l0,O5e),e(O5e,tzr),e(l0,azr),e(l0,Fee),e(Fee,nzr),e(l0,szr),e(Se,lzr),e(Se,i0),e(i0,V5e),e(V5e,izr),e(i0,dzr),e(i0,Tee),e(Tee,czr),e(i0,fzr),e(Qr,mzr),M(d0,Qr,null),b(f,yVe,u),b(f,sf,u),e(sf,c0),e(c0,X5e),M(l$,X5e,null),e(sf,gzr),e(sf,z5e),e(z5e,hzr),b(f,xVe,u),b(f,vr,u),M(i$,vr,null),e(vr,pzr),e(vr,lf),e(lf,_zr),e(lf,Mee),e(Mee,uzr),e(lf,bzr),e(lf,Eee),e(Eee,vzr),e(lf,Fzr),e(vr,Tzr),e(vr,d$),e(d$,Mzr),e(d$,Q5e),e(Q5e,Ezr),e(d$,Czr),e(vr,wzr),e(vr,Jt),M(c$,Jt,null),e(Jt,Azr),e(Jt,W5e),e(W5e,Lzr),e(Jt,yzr),e(Jt,df),e(df,xzr),e(df,H5e),e(H5e,$zr),e(df,kzr),e(df,Cee),e(Cee,Szr),e(df,Rzr),e(Jt,Pzr),M(f0,Jt,null),e(vr,Bzr),e(vr,Wr),M(f$,Wr,null),e(Wr,Izr),e(Wr,U5e),e(U5e,Nzr),e(Wr,qzr),e(Wr,wn),e(wn,jzr),e(wn,J5e),e(J5e,Dzr),e(wn,Gzr),e(wn,Y5e),e(Y5e,Ozr),e(wn,Vzr),e(wn,K5e),e(K5e,Xzr),e(wn,zzr),e(Wr,Qzr),e(Wr,Re),e(Re,m0),e(m0,Z5e),e(Z5e,Wzr),e(m0,Hzr),e(m0,wee),e(wee,Uzr),e(m0,Jzr),e(Re,Yzr),e(Re,g0),e(g0,e3e),e(e3e,Kzr),e(g0,Zzr),e(g0,Aee),e(Aee,eQr),e(g0,oQr),e(Re,rQr),e(Re,h0),e(h0,o3e),e(o3e,tQr),e(h0,aQr),e(h0,Lee),e(Lee,nQr),e(h0,sQr),e(Re,lQr),e(Re,p0),e(p0,r3e),e(r3e,iQr),e(p0,dQr),e(p0,yee),e(yee,cQr),e(p0,fQr),e(Re,mQr),e(Re,_0),e(_0,t3e),e(t3e,gQr),e(_0,hQr),e(_0,xee),e(xee,pQr),e(_0,_Qr),e(Re,uQr),e(Re,u0),e(u0,a3e),e(a3e,bQr),e(u0,vQr),e(u0,$ee),e($ee,FQr),e(u0,TQr),e(Re,MQr),e(Re,b0),e(b0,n3e),e(n3e,EQr),e(b0,CQr),e(b0,kee),e(kee,wQr),e(b0,AQr),e(Re,LQr),e(Re,v0),e(v0,s3e),e(s3e,yQr),e(v0,xQr),e(v0,See),e(See,$Qr),e(v0,kQr),e(Re,SQr),e(Re,F0),e(F0,l3e),e(l3e,RQr),e(F0,PQr),e(F0,Ree),e(Ree,BQr),e(F0,IQr),e(Re,NQr),e(Re,T0),e(T0,i3e),e(i3e,qQr),e(T0,jQr),e(T0,Pee),e(Pee,DQr),e(T0,GQr),e(Wr,OQr),M(M0,Wr,null),b(f,$Ve,u),b(f,cf,u),e(cf,E0),e(E0,d3e),M(m$,d3e,null),e(cf,VQr),e(cf,c3e),e(c3e,XQr),b(f,kVe,u),b(f,Fr,u),M(g$,Fr,null),e(Fr,zQr),e(Fr,ff),e(ff,QQr),e(ff,Bee),e(Bee,WQr),e(ff,HQr),e(ff,Iee),e(Iee,UQr),e(ff,JQr),e(Fr,YQr),e(Fr,h$),e(h$,KQr),e(h$,f3e),e(f3e,ZQr),e(h$,eWr),e(Fr,oWr),e(Fr,Yt),M(p$,Yt,null),e(Yt,rWr),e(Yt,m3e),e(m3e,tWr),e(Yt,aWr),e(Yt,mf),e(mf,nWr),e(mf,g3e),e(g3e,sWr),e(mf,lWr),e(mf,Nee),e(Nee,iWr),e(mf,dWr),e(Yt,cWr),M(C0,Yt,null),e(Fr,fWr),e(Fr,Hr),M(_$,Hr,null),e(Hr,mWr),e(Hr,h3e),e(h3e,gWr),e(Hr,hWr),e(Hr,An),e(An,pWr),e(An,p3e),e(p3e,_Wr),e(An,uWr),e(An,_3e),e(_3e,bWr),e(An,vWr),e(An,u3e),e(u3e,FWr),e(An,TWr),e(Hr,MWr),e(Hr,Ve),e(Ve,w0),e(w0,b3e),e(b3e,EWr),e(w0,CWr),e(w0,qee),e(qee,wWr),e(w0,AWr),e(Ve,LWr),e(Ve,A0),e(A0,v3e),e(v3e,yWr),e(A0,xWr),e(A0,jee),e(jee,$Wr),e(A0,kWr),e(Ve,SWr),e(Ve,L0),e(L0,F3e),e(F3e,RWr),e(L0,PWr),e(L0,Dee),e(Dee,BWr),e(L0,IWr),e(Ve,NWr),e(Ve,y0),e(y0,T3e),e(T3e,qWr),e(y0,jWr),e(y0,Gee),e(Gee,DWr),e(y0,GWr),e(Ve,OWr),e(Ve,x0),e(x0,M3e),e(M3e,VWr),e(x0,XWr),e(x0,Oee),e(Oee,zWr),e(x0,QWr),e(Ve,WWr),e(Ve,$0),e($0,E3e),e(E3e,HWr),e($0,UWr),e($0,Vee),e(Vee,JWr),e($0,YWr),e(Ve,KWr),e(Ve,k0),e(k0,C3e),e(C3e,ZWr),e(k0,eHr),e(k0,Xee),e(Xee,oHr),e(k0,rHr),e(Ve,tHr),e(Ve,S0),e(S0,w3e),e(w3e,aHr),e(S0,nHr),e(S0,zee),e(zee,sHr),e(S0,lHr),e(Hr,iHr),M(R0,Hr,null),b(f,SVe,u),b(f,gf,u),e(gf,P0),e(P0,A3e),M(u$,A3e,null),e(gf,dHr),e(gf,L3e),e(L3e,cHr),b(f,RVe,u),b(f,Tr,u),M(b$,Tr,null),e(Tr,fHr),e(Tr,hf),e(hf,mHr),e(hf,Qee),e(Qee,gHr),e(hf,hHr),e(hf,Wee),e(Wee,pHr),e(hf,_Hr),e(Tr,uHr),e(Tr,v$),e(v$,bHr),e(v$,y3e),e(y3e,vHr),e(v$,FHr),e(Tr,THr),e(Tr,Kt),M(F$,Kt,null),e(Kt,MHr),e(Kt,x3e),e(x3e,EHr),e(Kt,CHr),e(Kt,pf),e(pf,wHr),e(pf,$3e),e($3e,AHr),e(pf,LHr),e(pf,Hee),e(Hee,yHr),e(pf,xHr),e(Kt,$Hr),M(B0,Kt,null),e(Tr,kHr),e(Tr,Ur),M(T$,Ur,null),e(Ur,SHr),e(Ur,k3e),e(k3e,RHr),e(Ur,PHr),e(Ur,Ln),e(Ln,BHr),e(Ln,S3e),e(S3e,IHr),e(Ln,NHr),e(Ln,R3e),e(R3e,qHr),e(Ln,jHr),e(Ln,P3e),e(P3e,DHr),e(Ln,GHr),e(Ur,OHr),e(Ur,Xe),e(Xe,I0),e(I0,B3e),e(B3e,VHr),e(I0,XHr),e(I0,Uee),e(Uee,zHr),e(I0,QHr),e(Xe,WHr),e(Xe,N0),e(N0,I3e),e(I3e,HHr),e(N0,UHr),e(N0,Jee),e(Jee,JHr),e(N0,YHr),e(Xe,KHr),e(Xe,q0),e(q0,N3e),e(N3e,ZHr),e(q0,eUr),e(q0,Yee),e(Yee,oUr),e(q0,rUr),e(Xe,tUr),e(Xe,j0),e(j0,q3e),e(q3e,aUr),e(j0,nUr),e(j0,Kee),e(Kee,sUr),e(j0,lUr),e(Xe,iUr),e(Xe,D0),e(D0,j3e),e(j3e,dUr),e(D0,cUr),e(D0,Zee),e(Zee,fUr),e(D0,mUr),e(Xe,gUr),e(Xe,G0),e(G0,D3e),e(D3e,hUr),e(G0,pUr),e(G0,eoe),e(eoe,_Ur),e(G0,uUr),e(Xe,bUr),e(Xe,O0),e(O0,G3e),e(G3e,vUr),e(O0,FUr),e(O0,ooe),e(ooe,TUr),e(O0,MUr),e(Xe,EUr),e(Xe,V0),e(V0,O3e),e(O3e,CUr),e(V0,wUr),e(V0,roe),e(roe,AUr),e(V0,LUr),e(Ur,yUr),M(X0,Ur,null),b(f,PVe,u),b(f,_f,u),e(_f,z0),e(z0,V3e),M(M$,V3e,null),e(_f,xUr),e(_f,X3e),e(X3e,$Ur),b(f,BVe,u),b(f,Mr,u),M(E$,Mr,null),e(Mr,kUr),e(Mr,uf),e(uf,SUr),e(uf,toe),e(toe,RUr),e(uf,PUr),e(uf,aoe),e(aoe,BUr),e(uf,IUr),e(Mr,NUr),e(Mr,C$),e(C$,qUr),e(C$,z3e),e(z3e,jUr),e(C$,DUr),e(Mr,GUr),e(Mr,Zt),M(w$,Zt,null),e(Zt,OUr),e(Zt,Q3e),e(Q3e,VUr),e(Zt,XUr),e(Zt,bf),e(bf,zUr),e(bf,W3e),e(W3e,QUr),e(bf,WUr),e(bf,noe),e(noe,HUr),e(bf,UUr),e(Zt,JUr),M(Q0,Zt,null),e(Mr,YUr),e(Mr,Jr),M(A$,Jr,null),e(Jr,KUr),e(Jr,H3e),e(H3e,ZUr),e(Jr,eJr),e(Jr,yn),e(yn,oJr),e(yn,U3e),e(U3e,rJr),e(yn,tJr),e(yn,J3e),e(J3e,aJr),e(yn,nJr),e(yn,Y3e),e(Y3e,sJr),e(yn,lJr),e(Jr,iJr),e(Jr,K3e),e(K3e,W0),e(W0,Z3e),e(Z3e,dJr),e(W0,cJr),e(W0,soe),e(soe,fJr),e(W0,mJr),e(Jr,gJr),M(H0,Jr,null),b(f,IVe,u),b(f,vf,u),e(vf,U0),e(U0,e0e),M(L$,e0e,null),e(vf,hJr),e(vf,o0e),e(o0e,pJr),b(f,NVe,u),b(f,Er,u),M(y$,Er,null),e(Er,_Jr),e(Er,Ff),e(Ff,uJr),e(Ff,loe),e(loe,bJr),e(Ff,vJr),e(Ff,ioe),e(ioe,FJr),e(Ff,TJr),e(Er,MJr),e(Er,x$),e(x$,EJr),e(x$,r0e),e(r0e,CJr),e(x$,wJr),e(Er,AJr),e(Er,ea),M($$,ea,null),e(ea,LJr),e(ea,t0e),e(t0e,yJr),e(ea,xJr),e(ea,Tf),e(Tf,$Jr),e(Tf,a0e),e(a0e,kJr),e(Tf,SJr),e(Tf,doe),e(doe,RJr),e(Tf,PJr),e(ea,BJr),M(J0,ea,null),e(Er,IJr),e(Er,Yr),M(k$,Yr,null),e(Yr,NJr),e(Yr,n0e),e(n0e,qJr),e(Yr,jJr),e(Yr,xn),e(xn,DJr),e(xn,s0e),e(s0e,GJr),e(xn,OJr),e(xn,l0e),e(l0e,VJr),e(xn,XJr),e(xn,i0e),e(i0e,zJr),e(xn,QJr),e(Yr,WJr),e(Yr,S$),e(S$,Y0),e(Y0,d0e),e(d0e,HJr),e(Y0,UJr),e(Y0,coe),e(coe,JJr),e(Y0,YJr),e(S$,KJr),e(S$,K0),e(K0,c0e),e(c0e,ZJr),e(K0,eYr),e(K0,foe),e(foe,oYr),e(K0,rYr),e(Yr,tYr),M(Z0,Yr,null),b(f,qVe,u),b(f,Mf,u),e(Mf,ew),e(ew,f0e),M(R$,f0e,null),e(Mf,aYr),e(Mf,m0e),e(m0e,nYr),b(f,jVe,u),b(f,Cr,u),M(P$,Cr,null),e(Cr,sYr),e(Cr,Ef),e(Ef,lYr),e(Ef,moe),e(moe,iYr),e(Ef,dYr),e(Ef,goe),e(goe,cYr),e(Ef,fYr),e(Cr,mYr),e(Cr,B$),e(B$,gYr),e(B$,g0e),e(g0e,hYr),e(B$,pYr),e(Cr,_Yr),e(Cr,oa),M(I$,oa,null),e(oa,uYr),e(oa,h0e),e(h0e,bYr),e(oa,vYr),e(oa,Cf),e(Cf,FYr),e(Cf,p0e),e(p0e,TYr),e(Cf,MYr),e(Cf,hoe),e(hoe,EYr),e(Cf,CYr),e(oa,wYr),M(ow,oa,null),e(Cr,AYr),e(Cr,Kr),M(N$,Kr,null),e(Kr,LYr),e(Kr,_0e),e(_0e,yYr),e(Kr,xYr),e(Kr,$n),e($n,$Yr),e($n,u0e),e(u0e,kYr),e($n,SYr),e($n,b0e),e(b0e,RYr),e($n,PYr),e($n,v0e),e(v0e,BYr),e($n,IYr),e(Kr,NYr),e(Kr,F0e),e(F0e,rw),e(rw,T0e),e(T0e,qYr),e(rw,jYr),e(rw,poe),e(poe,DYr),e(rw,GYr),e(Kr,OYr),M(tw,Kr,null),DVe=!0},p(f,[u]){const q$={};u&2&&(q$.$$scope={dirty:u,ctx:f}),Rf.$set(q$);const M0e={};u&2&&(M0e.$$scope={dirty:u,ctx:f}),Gg.$set(M0e);const E0e={};u&2&&(E0e.$$scope={dirty:u,ctx:f}),Eh.$set(E0e);const C0e={};u&2&&(C0e.$$scope={dirty:u,ctx:f}),ap.$set(C0e);const j$={};u&2&&(j$.$$scope={dirty:u,ctx:f}),np.$set(j$);const w0e={};u&2&&(w0e.$$scope={dirty:u,ctx:f}),wp.$set(w0e);const kn={};u&2&&(kn.$$scope={dirty:u,ctx:f}),Ap.$set(kn);const A0e={};u&2&&(A0e.$$scope={dirty:u,ctx:f}),xp.$set(A0e);const L0e={};u&2&&(L0e.$$scope={dirty:u,ctx:f}),xu.$set(L0e);const y0e={};u&2&&(y0e.$$scope={dirty:u,ctx:f}),ku.$set(y0e);const D$={};u&2&&(D$.$$scope={dirty:u,ctx:f}),E7.$set(D$);const x0e={};u&2&&(x0e.$$scope={dirty:u,ctx:f}),w7.$set(x0e);const G$={};u&2&&(G$.$$scope={dirty:u,ctx:f}),m1.$set(G$);const $0e={};u&2&&($0e.$$scope={dirty:u,ctx:f}),h1.$set($0e);const O$={};u&2&&(O$.$$scope={dirty:u,ctx:f}),Z1.$set(O$);const k0e={};u&2&&(k0e.$$scope={dirty:u,ctx:f}),o2.$set(k0e);const S0e={};u&2&&(S0e.$$scope={dirty:u,ctx:f}),T2.$set(S0e);const R0e={};u&2&&(R0e.$$scope={dirty:u,ctx:f}),E2.$set(R0e);const wf={};u&2&&(wf.$$scope={dirty:u,ctx:f}),Fb.$set(wf);const P0e={};u&2&&(P0e.$$scope={dirty:u,ctx:f}),Mb.$set(P0e);const B0e={};u&2&&(B0e.$$scope={dirty:u,ctx:f}),Zb.$set(B0e);const I0e={};u&2&&(I0e.$$scope={dirty:u,ctx:f}),ov.$set(I0e);const V$={};u&2&&(V$.$$scope={dirty:u,ctx:f}),iv.$set(V$);const N0e={};u&2&&(N0e.$$scope={dirty:u,ctx:f}),cv.$set(N0e);const q0e={};u&2&&(q0e.$$scope={dirty:u,ctx:f}),Wv.$set(q0e);const j0e={};u&2&&(j0e.$$scope={dirty:u,ctx:f}),Uv.$set(j0e);const rt={};u&2&&(rt.$$scope={dirty:u,ctx:f}),qF.$set(rt);const X$={};u&2&&(X$.$$scope={dirty:u,ctx:f}),DF.$set(X$);const D0e={};u&2&&(D0e.$$scope={dirty:u,ctx:f}),VF.$set(D0e);const z$={};u&2&&(z$.$$scope={dirty:u,ctx:f}),zF.$set(z$);const G0e={};u&2&&(G0e.$$scope={dirty:u,ctx:f}),nT.$set(G0e);const tt={};u&2&&(tt.$$scope={dirty:u,ctx:f}),lT.$set(tt);const O0e={};u&2&&(O0e.$$scope={dirty:u,ctx:f}),cT.$set(O0e);const Af={};u&2&&(Af.$$scope={dirty:u,ctx:f}),mT.$set(Af);const V0e={};u&2&&(V0e.$$scope={dirty:u,ctx:f}),pT.$set(V0e);const X0e={};u&2&&(X0e.$$scope={dirty:u,ctx:f}),uT.$set(X0e);const L={};u&2&&(L.$$scope={dirty:u,ctx:f}),yT.$set(L);const aw={};u&2&&(aw.$$scope={dirty:u,ctx:f}),$T.$set(aw);const z0e={};u&2&&(z0e.$$scope={dirty:u,ctx:f}),NT.$set(z0e);const Q0e={};u&2&&(Q0e.$$scope={dirty:u,ctx:f}),jT.$set(Q0e);const nw={};u&2&&(nw.$$scope={dirty:u,ctx:f}),YT.$set(nw);const W0e={};u&2&&(W0e.$$scope={dirty:u,ctx:f}),ZT.$set(W0e);const H0e={};u&2&&(H0e.$$scope={dirty:u,ctx:f}),t8.$set(H0e);const sw={};u&2&&(sw.$$scope={dirty:u,ctx:f}),n8.$set(sw);const U0e={};u&2&&(U0e.$$scope={dirty:u,ctx:f}),m8.$set(U0e);const J0e={};u&2&&(J0e.$$scope={dirty:u,ctx:f}),h8.$set(J0e);const lw={};u&2&&(lw.$$scope={dirty:u,ctx:f}),v8.$set(lw);const Y0e={};u&2&&(Y0e.$$scope={dirty:u,ctx:f}),T8.$set(Y0e);const K0e={};u&2&&(K0e.$$scope={dirty:u,ctx:f}),w8.$set(K0e);const iw={};u&2&&(iw.$$scope={dirty:u,ctx:f}),L8.$set(iw);const Z0e={};u&2&&(Z0e.$$scope={dirty:u,ctx:f}),$8.$set(Z0e);const ewe={};u&2&&(ewe.$$scope={dirty:u,ctx:f}),S8.$set(ewe);const dw={};u&2&&(dw.$$scope={dirty:u,ctx:f}),q8.$set(dw);const owe={};u&2&&(owe.$$scope={dirty:u,ctx:f}),D8.$set(owe);const rwe={};u&2&&(rwe.$$scope={dirty:u,ctx:f}),V8.$set(rwe);const cw={};u&2&&(cw.$$scope={dirty:u,ctx:f}),z8.$set(cw);const twe={};u&2&&(twe.$$scope={dirty:u,ctx:f}),qM.$set(twe);const awe={};u&2&&(awe.$$scope={dirty:u,ctx:f}),DM.$set(awe);const fw={};u&2&&(fw.$$scope={dirty:u,ctx:f}),cE.$set(fw);const nwe={};u&2&&(nwe.$$scope={dirty:u,ctx:f}),mE.$set(nwe);const swe={};u&2&&(swe.$$scope={dirty:u,ctx:f}),AE.$set(swe);const mw={};u&2&&(mw.$$scope={dirty:u,ctx:f}),yE.$set(mw);const lwe={};u&2&&(lwe.$$scope={dirty:u,ctx:f}),RE.$set(lwe);const iwe={};u&2&&(iwe.$$scope={dirty:u,ctx:f}),BE.$set(iwe);const gw={};u&2&&(gw.$$scope={dirty:u,ctx:f}),r4.$set(gw);const dwe={};u&2&&(dwe.$$scope={dirty:u,ctx:f}),a4.$set(dwe);const cwe={};u&2&&(cwe.$$scope={dirty:u,ctx:f}),p4.$set(cwe);const hw={};u&2&&(hw.$$scope={dirty:u,ctx:f}),u4.$set(hw);const fwe={};u&2&&(fwe.$$scope={dirty:u,ctx:f}),X4.$set(fwe);const mwe={};u&2&&(mwe.$$scope={dirty:u,ctx:f}),Q4.$set(mwe);const pw={};u&2&&(pw.$$scope={dirty:u,ctx:f}),cC.$set(pw);const gwe={};u&2&&(gwe.$$scope={dirty:u,ctx:f}),mC.$set(gwe);const hwe={};u&2&&(hwe.$$scope={dirty:u,ctx:f}),pC.$set(hwe);const _w={};u&2&&(_w.$$scope={dirty:u,ctx:f}),uC.$set(_w);const pwe={};u&2&&(pwe.$$scope={dirty:u,ctx:f}),vC.$set(pwe);const _we={};u&2&&(_we.$$scope={dirty:u,ctx:f}),TC.$set(_we);const uw={};u&2&&(uw.$$scope={dirty:u,ctx:f}),OC.$set(uw);const uwe={};u&2&&(uwe.$$scope={dirty:u,ctx:f}),XC.$set(uwe);const bwe={};u&2&&(bwe.$$scope={dirty:u,ctx:f}),f5.$set(bwe);const bw={};u&2&&(bw.$$scope={dirty:u,ctx:f}),g5.$set(bw);const vwe={};u&2&&(vwe.$$scope={dirty:u,ctx:f}),p5.$set(vwe);const Fwe={};u&2&&(Fwe.$$scope={dirty:u,ctx:f}),u5.$set(Fwe);const vw={};u&2&&(vw.$$scope={dirty:u,ctx:f}),v5.$set(vw);const Twe={};u&2&&(Twe.$$scope={dirty:u,ctx:f}),T5.$set(Twe);const Mwe={};u&2&&(Mwe.$$scope={dirty:u,ctx:f}),U5.$set(Mwe);const Fw={};u&2&&(Fw.$$scope={dirty:u,ctx:f}),Y5.$set(Fw);const Ewe={};u&2&&(Ewe.$$scope={dirty:u,ctx:f}),i3.$set(Ewe);const Cwe={};u&2&&(Cwe.$$scope={dirty:u,ctx:f}),c3.$set(Cwe);const Tw={};u&2&&(Tw.$$scope={dirty:u,ctx:f}),C3.$set(Tw);const wwe={};u&2&&(wwe.$$scope={dirty:u,ctx:f}),A3.$set(wwe);const Awe={};u&2&&(Awe.$$scope={dirty:u,ctx:f}),N3.$set(Awe);const Mw={};u&2&&(Mw.$$scope={dirty:u,ctx:f}),j3.$set(Mw);const Lwe={};u&2&&(Lwe.$$scope={dirty:u,ctx:f}),J3.$set(Lwe);const ywe={};u&2&&(ywe.$$scope={dirty:u,ctx:f}),K3.$set(ywe);const Ew={};u&2&&(Ew.$$scope={dirty:u,ctx:f}),d0.$set(Ew);const xwe={};u&2&&(xwe.$$scope={dirty:u,ctx:f}),f0.$set(xwe);const $we={};u&2&&($we.$$scope={dirty:u,ctx:f}),M0.$set($we);const Cw={};u&2&&(Cw.$$scope={dirty:u,ctx:f}),C0.$set(Cw);const kwe={};u&2&&(kwe.$$scope={dirty:u,ctx:f}),R0.$set(kwe);const Swe={};u&2&&(Swe.$$scope={dirty:u,ctx:f}),B0.$set(Swe);const ww={};u&2&&(ww.$$scope={dirty:u,ctx:f}),X0.$set(ww);const Rwe={};u&2&&(Rwe.$$scope={dirty:u,ctx:f}),Q0.$set(Rwe);const Pwe={};u&2&&(Pwe.$$scope={dirty:u,ctx:f}),H0.$set(Pwe);const Aw={};u&2&&(Aw.$$scope={dirty:u,ctx:f}),J0.$set(Aw);const Bwe={};u&2&&(Bwe.$$scope={dirty:u,ctx:f}),Z0.$set(Bwe);const Iwe={};u&2&&(Iwe.$$scope={dirty:u,ctx:f}),ow.$set(Iwe);const Lw={};u&2&&(Lw.$$scope={dirty:u,ctx:f}),tw.$set(Lw)},i(f){DVe||(E(d.$$.fragment,f),E(ya.$$.fragment,f),E(y6.$$.fragment,f),E(x6.$$.fragment,f),E(Rf.$$.fragment,f),E($6.$$.fragment,f),E(k6.$$.fragment,f),E(P6.$$.fragment,f),E(Gg.$$.fragment,f),E(B6.$$.fragment,f),E(I6.$$.fragment,f),E(N6.$$.fragment,f),E(D6.$$.fragment,f),E(Eh.$$.fragment,f),E(G6.$$.fragment,f),E(O6.$$.fragment,f),E(V6.$$.fragment,f),E(Q6.$$.fragment,f),E(ap.$$.fragment,f),E(np.$$.fragment,f),E(W6.$$.fragment,f),E(H6.$$.fragment,f),E(U6.$$.fragment,f),E(K6.$$.fragment,f),E(wp.$$.fragment,f),E(Ap.$$.fragment,f),E(Z6.$$.fragment,f),E(eL.$$.fragment,f),E(oL.$$.fragment,f),E(tL.$$.fragment,f),E(xp.$$.fragment,f),E(aL.$$.fragment,f),E(xu.$$.fragment,f),E(nL.$$.fragment,f),E(sL.$$.fragment,f),E(iL.$$.fragment,f),E(ku.$$.fragment,f),E(dL.$$.fragment,f),E(E7.$$.fragment,f),E(cL.$$.fragment,f),E(fL.$$.fragment,f),E(gL.$$.fragment,f),E(w7.$$.fragment,f),E(hL.$$.fragment,f),E(m1.$$.fragment,f),E(pL.$$.fragment,f),E(_L.$$.fragment,f),E(bL.$$.fragment,f),E(h1.$$.fragment,f),E(vL.$$.fragment,f),E(Z1.$$.fragment,f),E(FL.$$.fragment,f),E(TL.$$.fragment,f),E(EL.$$.fragment,f),E(o2.$$.fragment,f),E(CL.$$.fragment,f),E(T2.$$.fragment,f),E(wL.$$.fragment,f),E(AL.$$.fragment,f),E(yL.$$.fragment,f),E(E2.$$.fragment,f),E(xL.$$.fragment,f),E(Fb.$$.fragment,f),E($L.$$.fragment,f),E(kL.$$.fragment,f),E(RL.$$.fragment,f),E(Mb.$$.fragment,f),E(PL.$$.fragment,f),E(Zb.$$.fragment,f),E(BL.$$.fragment,f),E(IL.$$.fragment,f),E(qL.$$.fragment,f),E(ov.$$.fragment,f),E(jL.$$.fragment,f),E(iv.$$.fragment,f),E(DL.$$.fragment,f),E(GL.$$.fragment,f),E(VL.$$.fragment,f),E(cv.$$.fragment,f),E(XL.$$.fragment,f),E(Wv.$$.fragment,f),E(zL.$$.fragment,f),E(QL.$$.fragment,f),E(HL.$$.fragment,f),E(Uv.$$.fragment,f),E(UL.$$.fragment,f),E(qF.$$.fragment,f),E(JL.$$.fragment,f),E(YL.$$.fragment,f),E(ZL.$$.fragment,f),E(DF.$$.fragment,f),E(ey.$$.fragment,f),E(VF.$$.fragment,f),E(oy.$$.fragment,f),E(ry.$$.fragment,f),E(ay.$$.fragment,f),E(zF.$$.fragment,f),E(ny.$$.fragment,f),E(nT.$$.fragment,f),E(sy.$$.fragment,f),E(ly.$$.fragment,f),E(dy.$$.fragment,f),E(lT.$$.fragment,f),E(cy.$$.fragment,f),E(cT.$$.fragment,f),E(fy.$$.fragment,f),E(my.$$.fragment,f),E(hy.$$.fragment,f),E(mT.$$.fragment,f),E(py.$$.fragment,f),E(pT.$$.fragment,f),E(_y.$$.fragment,f),E(uy.$$.fragment,f),E(vy.$$.fragment,f),E(uT.$$.fragment,f),E(Fy.$$.fragment,f),E(yT.$$.fragment,f),E(Ty.$$.fragment,f),E(My.$$.fragment,f),E(Cy.$$.fragment,f),E($T.$$.fragment,f),E(wy.$$.fragment,f),E(NT.$$.fragment,f),E(Ay.$$.fragment,f),E(Ly.$$.fragment,f),E(xy.$$.fragment,f),E(jT.$$.fragment,f),E($y.$$.fragment,f),E(YT.$$.fragment,f),E(ky.$$.fragment,f),E(Sy.$$.fragment,f),E(Py.$$.fragment,f),E(ZT.$$.fragment,f),E(By.$$.fragment,f),E(t8.$$.fragment,f),E(Ny.$$.fragment,f),E(qy.$$.fragment,f),E(Dy.$$.fragment,f),E(n8.$$.fragment,f),E(Gy.$$.fragment,f),E(m8.$$.fragment,f),E(Oy.$$.fragment,f),E(Vy.$$.fragment,f),E(zy.$$.fragment,f),E(h8.$$.fragment,f),E(Qy.$$.fragment,f),E(v8.$$.fragment,f),E(Wy.$$.fragment,f),E(Hy.$$.fragment,f),E(Jy.$$.fragment,f),E(T8.$$.fragment,f),E(Yy.$$.fragment,f),E(w8.$$.fragment,f),E(Zy.$$.fragment,f),E(e9.$$.fragment,f),E(r9.$$.fragment,f),E(L8.$$.fragment,f),E(t9.$$.fragment,f),E($8.$$.fragment,f),E(a9.$$.fragment,f),E(n9.$$.fragment,f),E(l9.$$.fragment,f),E(S8.$$.fragment,f),E(i9.$$.fragment,f),E(q8.$$.fragment,f),E(d9.$$.fragment,f),E(c9.$$.fragment,f),E(m9.$$.fragment,f),E(D8.$$.fragment,f),E(g9.$$.fragment,f),E(V8.$$.fragment,f),E(h9.$$.fragment,f),E(p9.$$.fragment,f),E(u9.$$.fragment,f),E(z8.$$.fragment,f),E(b9.$$.fragment,f),E(qM.$$.fragment,f),E(v9.$$.fragment,f),E(F9.$$.fragment,f),E(M9.$$.fragment,f),E(DM.$$.fragment,f),E(E9.$$.fragment,f),E(cE.$$.fragment,f),E(C9.$$.fragment,f),E(w9.$$.fragment,f),E(L9.$$.fragment,f),E(mE.$$.fragment,f),E(y9.$$.fragment,f),E(AE.$$.fragment,f),E(x9.$$.fragment,f),E($9.$$.fragment,f),E(S9.$$.fragment,f),E(yE.$$.fragment,f),E(R9.$$.fragment,f),E(RE.$$.fragment,f),E(P9.$$.fragment,f),E(B9.$$.fragment,f),E(N9.$$.fragment,f),E(BE.$$.fragment,f),E(q9.$$.fragment,f),E(r4.$$.fragment,f),E(j9.$$.fragment,f),E(D9.$$.fragment,f),E(O9.$$.fragment,f),E(a4.$$.fragment,f),E(V9.$$.fragment,f),E(p4.$$.fragment,f),E(X9.$$.fragment,f),E(z9.$$.fragment,f),E(W9.$$.fragment,f),E(u4.$$.fragment,f),E(H9.$$.fragment,f),E(X4.$$.fragment,f),E(U9.$$.fragment,f),E(J9.$$.fragment,f),E(K9.$$.fragment,f),E(Q4.$$.fragment,f),E(Z9.$$.fragment,f),E(cC.$$.fragment,f),E(ex.$$.fragment,f),E(ox.$$.fragment,f),E(tx.$$.fragment,f),E(mC.$$.fragment,f),E(ax.$$.fragment,f),E(pC.$$.fragment,f),E(sx.$$.fragment,f),E(lx.$$.fragment,f),E(dx.$$.fragment,f),E(uC.$$.fragment,f),E(cx.$$.fragment,f),E(vC.$$.fragment,f),E(fx.$$.fragment,f),E(mx.$$.fragment,f),E(hx.$$.fragment,f),E(TC.$$.fragment,f),E(px.$$.fragment,f),E(OC.$$.fragment,f),E(_x.$$.fragment,f),E(ux.$$.fragment,f),E(vx.$$.fragment,f),E(XC.$$.fragment,f),E(Fx.$$.fragment,f),E(f5.$$.fragment,f),E(Tx.$$.fragment,f),E(Mx.$$.fragment,f),E(Cx.$$.fragment,f),E(g5.$$.fragment,f),E(wx.$$.fragment,f),E(p5.$$.fragment,f),E(Ax.$$.fragment,f),E(Lx.$$.fragment,f),E(xx.$$.fragment,f),E(u5.$$.fragment,f),E($x.$$.fragment,f),E(v5.$$.fragment,f),E(kx.$$.fragment,f),E(Sx.$$.fragment,f),E(Px.$$.fragment,f),E(T5.$$.fragment,f),E(Bx.$$.fragment,f),E(U5.$$.fragment,f),E(Ix.$$.fragment,f),E(Nx.$$.fragment,f),E(jx.$$.fragment,f),E(Y5.$$.fragment,f),E(Dx.$$.fragment,f),E(i3.$$.fragment,f),E(Gx.$$.fragment,f),E(Ox.$$.fragment,f),E(Xx.$$.fragment,f),E(c3.$$.fragment,f),E(zx.$$.fragment,f),E(C3.$$.fragment,f),E(Qx.$$.fragment,f),E(Wx.$$.fragment,f),E(Ux.$$.fragment,f),E(A3.$$.fragment,f),E(Jx.$$.fragment,f),E(N3.$$.fragment,f),E(Yx.$$.fragment,f),E(Kx.$$.fragment,f),E(e$.$$.fragment,f),E(j3.$$.fragment,f),E(o$.$$.fragment,f),E(J3.$$.fragment,f),E(r$.$$.fragment,f),E(t$.$$.fragment,f),E(n$.$$.fragment,f),E(K3.$$.fragment,f),E(s$.$$.fragment,f),E(d0.$$.fragment,f),E(l$.$$.fragment,f),E(i$.$$.fragment,f),E(c$.$$.fragment,f),E(f0.$$.fragment,f),E(f$.$$.fragment,f),E(M0.$$.fragment,f),E(m$.$$.fragment,f),E(g$.$$.fragment,f),E(p$.$$.fragment,f),E(C0.$$.fragment,f),E(_$.$$.fragment,f),E(R0.$$.fragment,f),E(u$.$$.fragment,f),E(b$.$$.fragment,f),E(F$.$$.fragment,f),E(B0.$$.fragment,f),E(T$.$$.fragment,f),E(X0.$$.fragment,f),E(M$.$$.fragment,f),E(E$.$$.fragment,f),E(w$.$$.fragment,f),E(Q0.$$.fragment,f),E(A$.$$.fragment,f),E(H0.$$.fragment,f),E(L$.$$.fragment,f),E(y$.$$.fragment,f),E($$.$$.fragment,f),E(J0.$$.fragment,f),E(k$.$$.fragment,f),E(Z0.$$.fragment,f),E(R$.$$.fragment,f),E(P$.$$.fragment,f),E(I$.$$.fragment,f),E(ow.$$.fragment,f),E(N$.$$.fragment,f),E(tw.$$.fragment,f),DVe=!0)},o(f){C(d.$$.fragment,f),C(ya.$$.fragment,f),C(y6.$$.fragment,f),C(x6.$$.fragment,f),C(Rf.$$.fragment,f),C($6.$$.fragment,f),C(k6.$$.fragment,f),C(P6.$$.fragment,f),C(Gg.$$.fragment,f),C(B6.$$.fragment,f),C(I6.$$.fragment,f),C(N6.$$.fragment,f),C(D6.$$.fragment,f),C(Eh.$$.fragment,f),C(G6.$$.fragment,f),C(O6.$$.fragment,f),C(V6.$$.fragment,f),C(Q6.$$.fragment,f),C(ap.$$.fragment,f),C(np.$$.fragment,f),C(W6.$$.fragment,f),C(H6.$$.fragment,f),C(U6.$$.fragment,f),C(K6.$$.fragment,f),C(wp.$$.fragment,f),C(Ap.$$.fragment,f),C(Z6.$$.fragment,f),C(eL.$$.fragment,f),C(oL.$$.fragment,f),C(tL.$$.fragment,f),C(xp.$$.fragment,f),C(aL.$$.fragment,f),C(xu.$$.fragment,f),C(nL.$$.fragment,f),C(sL.$$.fragment,f),C(iL.$$.fragment,f),C(ku.$$.fragment,f),C(dL.$$.fragment,f),C(E7.$$.fragment,f),C(cL.$$.fragment,f),C(fL.$$.fragment,f),C(gL.$$.fragment,f),C(w7.$$.fragment,f),C(hL.$$.fragment,f),C(m1.$$.fragment,f),C(pL.$$.fragment,f),C(_L.$$.fragment,f),C(bL.$$.fragment,f),C(h1.$$.fragment,f),C(vL.$$.fragment,f),C(Z1.$$.fragment,f),C(FL.$$.fragment,f),C(TL.$$.fragment,f),C(EL.$$.fragment,f),C(o2.$$.fragment,f),C(CL.$$.fragment,f),C(T2.$$.fragment,f),C(wL.$$.fragment,f),C(AL.$$.fragment,f),C(yL.$$.fragment,f),C(E2.$$.fragment,f),C(xL.$$.fragment,f),C(Fb.$$.fragment,f),C($L.$$.fragment,f),C(kL.$$.fragment,f),C(RL.$$.fragment,f),C(Mb.$$.fragment,f),C(PL.$$.fragment,f),C(Zb.$$.fragment,f),C(BL.$$.fragment,f),C(IL.$$.fragment,f),C(qL.$$.fragment,f),C(ov.$$.fragment,f),C(jL.$$.fragment,f),C(iv.$$.fragment,f),C(DL.$$.fragment,f),C(GL.$$.fragment,f),C(VL.$$.fragment,f),C(cv.$$.fragment,f),C(XL.$$.fragment,f),C(Wv.$$.fragment,f),C(zL.$$.fragment,f),C(QL.$$.fragment,f),C(HL.$$.fragment,f),C(Uv.$$.fragment,f),C(UL.$$.fragment,f),C(qF.$$.fragment,f),C(JL.$$.fragment,f),C(YL.$$.fragment,f),C(ZL.$$.fragment,f),C(DF.$$.fragment,f),C(ey.$$.fragment,f),C(VF.$$.fragment,f),C(oy.$$.fragment,f),C(ry.$$.fragment,f),C(ay.$$.fragment,f),C(zF.$$.fragment,f),C(ny.$$.fragment,f),C(nT.$$.fragment,f),C(sy.$$.fragment,f),C(ly.$$.fragment,f),C(dy.$$.fragment,f),C(lT.$$.fragment,f),C(cy.$$.fragment,f),C(cT.$$.fragment,f),C(fy.$$.fragment,f),C(my.$$.fragment,f),C(hy.$$.fragment,f),C(mT.$$.fragment,f),C(py.$$.fragment,f),C(pT.$$.fragment,f),C(_y.$$.fragment,f),C(uy.$$.fragment,f),C(vy.$$.fragment,f),C(uT.$$.fragment,f),C(Fy.$$.fragment,f),C(yT.$$.fragment,f),C(Ty.$$.fragment,f),C(My.$$.fragment,f),C(Cy.$$.fragment,f),C($T.$$.fragment,f),C(wy.$$.fragment,f),C(NT.$$.fragment,f),C(Ay.$$.fragment,f),C(Ly.$$.fragment,f),C(xy.$$.fragment,f),C(jT.$$.fragment,f),C($y.$$.fragment,f),C(YT.$$.fragment,f),C(ky.$$.fragment,f),C(Sy.$$.fragment,f),C(Py.$$.fragment,f),C(ZT.$$.fragment,f),C(By.$$.fragment,f),C(t8.$$.fragment,f),C(Ny.$$.fragment,f),C(qy.$$.fragment,f),C(Dy.$$.fragment,f),C(n8.$$.fragment,f),C(Gy.$$.fragment,f),C(m8.$$.fragment,f),C(Oy.$$.fragment,f),C(Vy.$$.fragment,f),C(zy.$$.fragment,f),C(h8.$$.fragment,f),C(Qy.$$.fragment,f),C(v8.$$.fragment,f),C(Wy.$$.fragment,f),C(Hy.$$.fragment,f),C(Jy.$$.fragment,f),C(T8.$$.fragment,f),C(Yy.$$.fragment,f),C(w8.$$.fragment,f),C(Zy.$$.fragment,f),C(e9.$$.fragment,f),C(r9.$$.fragment,f),C(L8.$$.fragment,f),C(t9.$$.fragment,f),C($8.$$.fragment,f),C(a9.$$.fragment,f),C(n9.$$.fragment,f),C(l9.$$.fragment,f),C(S8.$$.fragment,f),C(i9.$$.fragment,f),C(q8.$$.fragment,f),C(d9.$$.fragment,f),C(c9.$$.fragment,f),C(m9.$$.fragment,f),C(D8.$$.fragment,f),C(g9.$$.fragment,f),C(V8.$$.fragment,f),C(h9.$$.fragment,f),C(p9.$$.fragment,f),C(u9.$$.fragment,f),C(z8.$$.fragment,f),C(b9.$$.fragment,f),C(qM.$$.fragment,f),C(v9.$$.fragment,f),C(F9.$$.fragment,f),C(M9.$$.fragment,f),C(DM.$$.fragment,f),C(E9.$$.fragment,f),C(cE.$$.fragment,f),C(C9.$$.fragment,f),C(w9.$$.fragment,f),C(L9.$$.fragment,f),C(mE.$$.fragment,f),C(y9.$$.fragment,f),C(AE.$$.fragment,f),C(x9.$$.fragment,f),C($9.$$.fragment,f),C(S9.$$.fragment,f),C(yE.$$.fragment,f),C(R9.$$.fragment,f),C(RE.$$.fragment,f),C(P9.$$.fragment,f),C(B9.$$.fragment,f),C(N9.$$.fragment,f),C(BE.$$.fragment,f),C(q9.$$.fragment,f),C(r4.$$.fragment,f),C(j9.$$.fragment,f),C(D9.$$.fragment,f),C(O9.$$.fragment,f),C(a4.$$.fragment,f),C(V9.$$.fragment,f),C(p4.$$.fragment,f),C(X9.$$.fragment,f),C(z9.$$.fragment,f),C(W9.$$.fragment,f),C(u4.$$.fragment,f),C(H9.$$.fragment,f),C(X4.$$.fragment,f),C(U9.$$.fragment,f),C(J9.$$.fragment,f),C(K9.$$.fragment,f),C(Q4.$$.fragment,f),C(Z9.$$.fragment,f),C(cC.$$.fragment,f),C(ex.$$.fragment,f),C(ox.$$.fragment,f),C(tx.$$.fragment,f),C(mC.$$.fragment,f),C(ax.$$.fragment,f),C(pC.$$.fragment,f),C(sx.$$.fragment,f),C(lx.$$.fragment,f),C(dx.$$.fragment,f),C(uC.$$.fragment,f),C(cx.$$.fragment,f),C(vC.$$.fragment,f),C(fx.$$.fragment,f),C(mx.$$.fragment,f),C(hx.$$.fragment,f),C(TC.$$.fragment,f),C(px.$$.fragment,f),C(OC.$$.fragment,f),C(_x.$$.fragment,f),C(ux.$$.fragment,f),C(vx.$$.fragment,f),C(XC.$$.fragment,f),C(Fx.$$.fragment,f),C(f5.$$.fragment,f),C(Tx.$$.fragment,f),C(Mx.$$.fragment,f),C(Cx.$$.fragment,f),C(g5.$$.fragment,f),C(wx.$$.fragment,f),C(p5.$$.fragment,f),C(Ax.$$.fragment,f),C(Lx.$$.fragment,f),C(xx.$$.fragment,f),C(u5.$$.fragment,f),C($x.$$.fragment,f),C(v5.$$.fragment,f),C(kx.$$.fragment,f),C(Sx.$$.fragment,f),C(Px.$$.fragment,f),C(T5.$$.fragment,f),C(Bx.$$.fragment,f),C(U5.$$.fragment,f),C(Ix.$$.fragment,f),C(Nx.$$.fragment,f),C(jx.$$.fragment,f),C(Y5.$$.fragment,f),C(Dx.$$.fragment,f),C(i3.$$.fragment,f),C(Gx.$$.fragment,f),C(Ox.$$.fragment,f),C(Xx.$$.fragment,f),C(c3.$$.fragment,f),C(zx.$$.fragment,f),C(C3.$$.fragment,f),C(Qx.$$.fragment,f),C(Wx.$$.fragment,f),C(Ux.$$.fragment,f),C(A3.$$.fragment,f),C(Jx.$$.fragment,f),C(N3.$$.fragment,f),C(Yx.$$.fragment,f),C(Kx.$$.fragment,f),C(e$.$$.fragment,f),C(j3.$$.fragment,f),C(o$.$$.fragment,f),C(J3.$$.fragment,f),C(r$.$$.fragment,f),C(t$.$$.fragment,f),C(n$.$$.fragment,f),C(K3.$$.fragment,f),C(s$.$$.fragment,f),C(d0.$$.fragment,f),C(l$.$$.fragment,f),C(i$.$$.fragment,f),C(c$.$$.fragment,f),C(f0.$$.fragment,f),C(f$.$$.fragment,f),C(M0.$$.fragment,f),C(m$.$$.fragment,f),C(g$.$$.fragment,f),C(p$.$$.fragment,f),C(C0.$$.fragment,f),C(_$.$$.fragment,f),C(R0.$$.fragment,f),C(u$.$$.fragment,f),C(b$.$$.fragment,f),C(F$.$$.fragment,f),C(B0.$$.fragment,f),C(T$.$$.fragment,f),C(X0.$$.fragment,f),C(M$.$$.fragment,f),C(E$.$$.fragment,f),C(w$.$$.fragment,f),C(Q0.$$.fragment,f),C(A$.$$.fragment,f),C(H0.$$.fragment,f),C(L$.$$.fragment,f),C(y$.$$.fragment,f),C($$.$$.fragment,f),C(J0.$$.fragment,f),C(k$.$$.fragment,f),C(Z0.$$.fragment,f),C(R$.$$.fragment,f),C(P$.$$.fragment,f),C(I$.$$.fragment,f),C(ow.$$.fragment,f),C(N$.$$.fragment,f),C(tw.$$.fragment,f),DVe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(yf),f&&t(at),f&&t(Oe),f&&t(Qe),f&&t($f),w(ya,f),f&&t(We),f&&t(Ae),f&&t(Co),f&&t(xa),f&&t(BGe),f&&t(yi),w(y6),f&&t(IGe),f&&t(In),f&&t(NGe),w(x6,f),f&&t(qGe),f&&t(sS),f&&t(jGe),w(Rf,f),f&&t(DGe),f&&t(xi),w($6),f&&t(GGe),f&&t(wo),w(k6),w(P6),w(Gg),w(B6),f&&t(OGe),f&&t(ki),w(I6),f&&t(VGe),f&&t(Ao),w(N6),w(D6),w(Eh),w(G6),f&&t(XGe),f&&t(Si),w(O6),f&&t(zGe),f&&t(Lo),w(V6),w(Q6),w(ap),w(np),w(W6),f&&t(QGe),f&&t(Ri),w(H6),f&&t(WGe),f&&t(yo),w(U6),w(K6),w(wp),w(Ap),w(Z6),f&&t(HGe),f&&t(Bi),w(eL),f&&t(UGe),f&&t(xo),w(oL),w(tL),w(xp),w(aL),w(xu),f&&t(JGe),f&&t(qi),w(nL),f&&t(YGe),f&&t($o),w(sL),w(iL),w(ku),w(dL),w(E7),f&&t(KGe),f&&t(Gi),w(cL),f&&t(ZGe),f&&t(ko),w(fL),w(gL),w(w7),w(hL),w(m1),f&&t(eOe),f&&t(Xi),w(pL),f&&t(oOe),f&&t(So),w(_L),w(bL),w(h1),w(vL),w(Z1),f&&t(rOe),f&&t(Wi),w(FL),f&&t(tOe),f&&t(Ro),w(TL),w(EL),w(o2),w(CL),w(T2),f&&t(aOe),f&&t(Ji),w(wL),f&&t(nOe),f&&t(Po),w(AL),w(yL),w(E2),w(xL),w(Fb),f&&t(sOe),f&&t(Zi),w($L),f&&t(lOe),f&&t(Bo),w(kL),w(RL),w(Mb),w(PL),w(Zb),f&&t(iOe),f&&t(rd),w(BL),f&&t(dOe),f&&t(Io),w(IL),w(qL),w(ov),w(jL),w(iv),f&&t(cOe),f&&t(nd),w(DL),f&&t(fOe),f&&t(No),w(GL),w(VL),w(cv),w(XL),w(Wv),f&&t(mOe),f&&t(id),w(zL),f&&t(gOe),f&&t(qo),w(QL),w(HL),w(Uv),w(UL),w(qF),f&&t(hOe),f&&t(fd),w(JL),f&&t(pOe),f&&t(jo),w(YL),w(ZL),w(DF),w(ey),w(VF),f&&t(_Oe),f&&t(hd),w(oy),f&&t(uOe),f&&t(Do),w(ry),w(ay),w(zF),w(ny),w(nT),f&&t(bOe),f&&t(ud),w(sy),f&&t(vOe),f&&t(Go),w(ly),w(dy),w(lT),w(cy),w(cT),f&&t(FOe),f&&t(Fd),w(fy),f&&t(TOe),f&&t(Oo),w(my),w(hy),w(mT),w(py),w(pT),f&&t(MOe),f&&t(Ed),w(_y),f&&t(EOe),f&&t(Vo),w(uy),w(vy),w(uT),w(Fy),w(yT),f&&t(COe),f&&t(Ad),w(Ty),f&&t(wOe),f&&t(Xo),w(My),w(Cy),w($T),w(wy),w(NT),f&&t(AOe),f&&t(xd),w(Ay),f&&t(LOe),f&&t(zo),w(Ly),w(xy),w(jT),w($y),w(YT),f&&t(yOe),f&&t(Sd),w(ky),f&&t(xOe),f&&t(Qo),w(Sy),w(Py),w(ZT),w(By),w(t8),f&&t($Oe),f&&t(Bd),w(Ny),f&&t(kOe),f&&t(Wo),w(qy),w(Dy),w(n8),w(Gy),w(m8),f&&t(SOe),f&&t(qd),w(Oy),f&&t(ROe),f&&t(Ho),w(Vy),w(zy),w(h8),w(Qy),w(v8),f&&t(POe),f&&t(Od),w(Wy),f&&t(BOe),f&&t(Uo),w(Hy),w(Jy),w(T8),w(Yy),w(w8),f&&t(IOe),f&&t(zd),w(Zy),f&&t(NOe),f&&t(Jo),w(e9),w(r9),w(L8),w(t9),w($8),f&&t(qOe),f&&t(Hd),w(a9),f&&t(jOe),f&&t(Yo),w(n9),w(l9),w(S8),w(i9),w(q8),f&&t(DOe),f&&t(Yd),w(d9),f&&t(GOe),f&&t(Ko),w(c9),w(m9),w(D8),w(g9),w(V8),f&&t(OOe),f&&t(ec),w(h9),f&&t(VOe),f&&t(Zo),w(p9),w(u9),w(z8),w(b9),w(qM),f&&t(XOe),f&&t(tc),w(v9),f&&t(zOe),f&&t(er),w(F9),w(M9),w(DM),w(E9),w(cE),f&&t(QOe),f&&t(sc),w(C9),f&&t(WOe),f&&t(or),w(w9),w(L9),w(mE),w(y9),w(AE),f&&t(HOe),f&&t(dc),w(x9),f&&t(UOe),f&&t(rr),w($9),w(S9),w(yE),w(R9),w(RE),f&&t(JOe),f&&t(mc),w(P9),f&&t(YOe),f&&t(tr),w(B9),w(N9),w(BE),w(q9),w(r4),f&&t(KOe),f&&t(pc),w(j9),f&&t(ZOe),f&&t(ar),w(D9),w(O9),w(a4),w(V9),w(p4),f&&t(eVe),f&&t(bc),w(X9),f&&t(oVe),f&&t(nr),w(z9),w(W9),w(u4),w(H9),w(X4),f&&t(rVe),f&&t(Tc),w(U9),f&&t(tVe),f&&t(sr),w(J9),w(K9),w(Q4),w(Z9),w(cC),f&&t(aVe),f&&t(Cc),w(ex),f&&t(nVe),f&&t(lr),w(ox),w(tx),w(mC),w(ax),w(pC),f&&t(sVe),f&&t(Lc),w(sx),f&&t(lVe),f&&t(ir),w(lx),w(dx),w(uC),w(cx),w(vC),f&&t(iVe),f&&t($c),w(fx),f&&t(dVe),f&&t(dr),w(mx),w(hx),w(TC),w(px),w(OC),f&&t(cVe),f&&t(Rc),w(_x),f&&t(fVe),f&&t(cr),w(ux),w(vx),w(XC),w(Fx),w(f5),f&&t(mVe),f&&t(Ic),w(Tx),f&&t(gVe),f&&t(fr),w(Mx),w(Cx),w(g5),w(wx),w(p5),f&&t(hVe),f&&t(jc),w(Ax),f&&t(pVe),f&&t(mr),w(Lx),w(xx),w(u5),w($x),w(v5),f&&t(_Ve),f&&t(Oc),w(kx),f&&t(uVe),f&&t(gr),w(Sx),w(Px),w(T5),w(Bx),w(U5),f&&t(bVe),f&&t(zc),w(Ix),f&&t(vVe),f&&t(hr),w(Nx),w(jx),w(Y5),w(Dx),w(i3),f&&t(FVe),f&&t(Hc),w(Gx),f&&t(TVe),f&&t(pr),w(Ox),w(Xx),w(c3),w(zx),w(C3),f&&t(MVe),f&&t(Yc),w(Qx),f&&t(EVe),f&&t(_r),w(Wx),w(Ux),w(A3),w(Jx),w(N3),f&&t(CVe),f&&t(ef),w(Yx),f&&t(wVe),f&&t(ur),w(Kx),w(e$),w(j3),w(o$),w(J3),f&&t(AVe),f&&t(tf),w(r$),f&&t(LVe),f&&t(br),w(t$),w(n$),w(K3),w(s$),w(d0),f&&t(yVe),f&&t(sf),w(l$),f&&t(xVe),f&&t(vr),w(i$),w(c$),w(f0),w(f$),w(M0),f&&t($Ve),f&&t(cf),w(m$),f&&t(kVe),f&&t(Fr),w(g$),w(p$),w(C0),w(_$),w(R0),f&&t(SVe),f&&t(gf),w(u$),f&&t(RVe),f&&t(Tr),w(b$),w(F$),w(B0),w(T$),w(X0),f&&t(PVe),f&&t(_f),w(M$),f&&t(BVe),f&&t(Mr),w(E$),w(w$),w(Q0),w(A$),w(H0),f&&t(IVe),f&&t(vf),w(L$),f&&t(NVe),f&&t(Er),w(y$),w($$),w(J0),w(k$),w(Z0),f&&t(qVe),f&&t(Mf),w(R$),f&&t(jVe),f&&t(Cr),w(P$),w(I$),w(ow),w(N$),w(tw)}}}const gOt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function hOt(x){return mDt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class TOt extends iDt{constructor(g){super();dDt(this,g,hOt,mOt,cDt,{})}}export{TOt as default,gOt as metadata};
