import{S as s$t,i as l$t,s as i$t,e as a,k as l,w as F,t as o,M as d$t,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as c$t,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as $Vr}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as re}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function f$t(L){let g,v,p,m,u,d,h,Mo,fi,pf,rt,mi,gi,EA,uf,je,We,hi,yn,CA,Ln,xn,wA,pi,$n,AA,ui,_f,Ca;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),u=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),fi=a("code"),pf=o("model_type"),rt=o(" attribute is set to the same key you use when registering the config (here "),mi=a("code"),gi=o('"new-model"'),EA=o(")."),uf=l(),je=a("p"),We=o("Likewise, if your "),hi=a("code"),yn=o("NewModel"),CA=o(" is a subclass of "),Ln=a("a"),xn=o("PreTrainedModel"),wA=o(`, make sure its
`),pi=a("code"),$n=o("config_class"),AA=o(` attribute is set to the same class you use when registering the model (here
`),ui=a("code"),_f=o("NewModelConfig"),Ca=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var z$=s(p);m=r(z$,"NewModelConfig"),z$.forEach(t),u=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var _i=s(d);h=r(_i,"PretrainedConfig"),_i.forEach(t),Mo=r(Ae,`, make sure its
`),fi=n(Ae,"CODE",{});var W$=s(fi);pf=r(W$,"model_type"),W$.forEach(t),rt=r(Ae," attribute is set to the same key you use when registering the config (here "),mi=n(Ae,"CODE",{});var Q$=s(mi);gi=r(Q$,'"new-model"'),Q$.forEach(t),EA=r(Ae,")."),Ae.forEach(t),uf=i(Qe),je=n(Qe,"P",{});var Eo=s(je);We=r(Eo,"Likewise, if your "),hi=n(Eo,"CODE",{});var wa=s(hi);yn=r(wa,"NewModel"),wa.forEach(t),CA=r(Eo," is a subclass of "),Ln=n(Eo,"A",{href:!0});var H$=s(Ln);xn=r(H$,"PreTrainedModel"),H$.forEach(t),wA=r(Eo,`, make sure its
`),pi=n(Eo,"CODE",{});var bf=s(pi);$n=r(bf,"config_class"),bf.forEach(t),AA=r(Eo,` attribute is set to the same class you use when registering the model (here
`),ui=n(Eo,"CODE",{});var U$=s(ui);_f=r(U$,"NewModelConfig"),U$.forEach(t),Ca=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(Ln,"href","/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,p),e(p,m),e(g,u),e(g,d),e(d,h),e(g,Mo),e(g,fi),e(fi,pf),e(g,rt),e(g,mi),e(mi,gi),e(g,EA),b(Qe,uf,Ae),b(Qe,je,Ae),e(je,We),e(je,hi),e(hi,yn),e(je,CA),e(je,Ln),e(Ln,xn),e(je,wA),e(je,pi),e(pi,$n),e(je,AA),e(je,ui),e(ui,_f),e(je,Ca)},d(Qe){Qe&&t(g),Qe&&t(uf),Qe&&t(je)}}}function m$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function g$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function h$t(L){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function p$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function u$t(L){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function _$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function b$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function v$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function F$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function T$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function M$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function E$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function C$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function w$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function A$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function y$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function L$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function x$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function k$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function S$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function R$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function P$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function B$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function I$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function N$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function q$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function j$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function D$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function G$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function O$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function V$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function X$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function z$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function W$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Q$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function H$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function U$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function J$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Y$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function K$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Z$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ekt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function okt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function akt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function skt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ikt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ckt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ukt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _kt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Tkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Mkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ekt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ckt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Akt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ykt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Lkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $kt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Skt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Rkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Pkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Bkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ikt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Nkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Dkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Okt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ukt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ykt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iSt(L){let g,v,p,m,u,d,h,Mo,fi,pf,rt,mi,gi,EA,uf,je,We,hi,yn,CA,Ln,xn,wA,pi,$n,AA,ui,_f,Ca,Qe,Ae,z$,_i,W$,Q$,Eo,wa,H$,bf,U$,dOe,KNe,bi,vf,soe,yA,cOe,loe,fOe,ZNe,kn,mOe,ioe,gOe,hOe,doe,pOe,uOe,eqe,LA,oqe,J$,_Oe,rqe,Ff,tqe,vi,Tf,coe,xA,bOe,foe,vOe,aqe,Co,$A,FOe,kA,TOe,Y$,MOe,EOe,COe,SA,wOe,moe,AOe,yOe,LOe,Er,RA,xOe,goe,$Oe,kOe,Fi,SOe,hoe,ROe,POe,poe,BOe,IOe,NOe,A,Mf,uoe,qOe,jOe,K$,DOe,GOe,OOe,Ef,_oe,VOe,XOe,Z$,zOe,WOe,QOe,Cf,boe,HOe,UOe,ek,JOe,YOe,KOe,wf,voe,ZOe,eVe,ok,oVe,rVe,tVe,Af,Foe,aVe,nVe,rk,sVe,lVe,iVe,yf,Toe,dVe,cVe,tk,fVe,mVe,gVe,Lf,Moe,hVe,pVe,ak,uVe,_Ve,bVe,xf,Eoe,vVe,FVe,nk,TVe,MVe,EVe,$f,Coe,CVe,wVe,sk,AVe,yVe,LVe,kf,woe,xVe,$Ve,lk,kVe,SVe,RVe,Sf,Aoe,PVe,BVe,ik,IVe,NVe,qVe,Rf,yoe,jVe,DVe,dk,GVe,OVe,VVe,Pf,Loe,XVe,zVe,ck,WVe,QVe,HVe,Bf,xoe,UVe,JVe,fk,YVe,KVe,ZVe,If,$oe,eXe,oXe,mk,rXe,tXe,aXe,Nf,koe,nXe,sXe,gk,lXe,iXe,dXe,qf,Soe,cXe,fXe,hk,mXe,gXe,hXe,jf,Roe,pXe,uXe,pk,_Xe,bXe,vXe,Df,Poe,FXe,TXe,uk,MXe,EXe,CXe,Gf,Boe,wXe,AXe,_k,yXe,LXe,xXe,Of,Ioe,$Xe,kXe,bk,SXe,RXe,PXe,Vf,Noe,BXe,IXe,vk,NXe,qXe,jXe,Xf,qoe,DXe,GXe,Fk,OXe,VXe,XXe,zf,joe,zXe,WXe,Tk,QXe,HXe,UXe,Wf,Doe,JXe,YXe,Mk,KXe,ZXe,eze,Qf,Goe,oze,rze,Ek,tze,aze,nze,Hf,Ooe,sze,lze,Ck,ize,dze,cze,Uf,Voe,fze,mze,wk,gze,hze,pze,Jf,Xoe,uze,_ze,Ak,bze,vze,Fze,Yf,zoe,Tze,Mze,yk,Eze,Cze,wze,Kf,Woe,Aze,yze,Lk,Lze,xze,$ze,Zf,Qoe,kze,Sze,xk,Rze,Pze,Bze,em,Hoe,Ize,Nze,$k,qze,jze,Dze,om,Uoe,Gze,Oze,kk,Vze,Xze,zze,rm,Joe,Wze,Qze,Sk,Hze,Uze,Jze,tm,Yoe,Yze,Kze,Rk,Zze,eWe,oWe,am,Koe,rWe,tWe,Pk,aWe,nWe,sWe,nm,Zoe,lWe,iWe,Bk,dWe,cWe,fWe,sm,ere,mWe,gWe,Ik,hWe,pWe,uWe,lm,ore,_We,bWe,Nk,vWe,FWe,TWe,im,rre,MWe,EWe,qk,CWe,wWe,AWe,dm,tre,yWe,LWe,jk,xWe,$We,kWe,cm,are,SWe,RWe,Dk,PWe,BWe,IWe,fm,nre,NWe,qWe,Gk,jWe,DWe,GWe,mm,sre,OWe,VWe,Ok,XWe,zWe,WWe,gm,lre,QWe,HWe,Vk,UWe,JWe,YWe,hm,ire,KWe,ZWe,Xk,eQe,oQe,rQe,pm,dre,tQe,aQe,zk,nQe,sQe,lQe,um,cre,iQe,dQe,Wk,cQe,fQe,mQe,_m,fre,gQe,hQe,Qk,pQe,uQe,_Qe,bm,mre,bQe,vQe,Hk,FQe,TQe,MQe,vm,gre,EQe,CQe,Uk,wQe,AQe,yQe,Fm,hre,LQe,xQe,Jk,$Qe,kQe,SQe,Tm,pre,RQe,PQe,Yk,BQe,IQe,NQe,Mm,ure,qQe,jQe,Kk,DQe,GQe,OQe,Em,_re,VQe,XQe,Zk,zQe,WQe,QQe,Cm,bre,HQe,UQe,eS,JQe,YQe,KQe,wm,vre,ZQe,eHe,oS,oHe,rHe,tHe,Am,Fre,aHe,nHe,rS,sHe,lHe,iHe,ym,Tre,dHe,cHe,tS,fHe,mHe,gHe,Lm,Mre,hHe,pHe,aS,uHe,_He,bHe,xm,Ere,vHe,FHe,nS,THe,MHe,EHe,$m,Cre,CHe,wHe,sS,AHe,yHe,LHe,km,wre,xHe,$He,lS,kHe,SHe,RHe,Sm,Are,PHe,BHe,iS,IHe,NHe,qHe,Rm,yre,jHe,DHe,dS,GHe,OHe,VHe,Pm,Lre,XHe,zHe,cS,WHe,QHe,HHe,Bm,xre,UHe,JHe,fS,YHe,KHe,ZHe,Im,$re,eUe,oUe,mS,rUe,tUe,aUe,Nm,kre,nUe,sUe,gS,lUe,iUe,dUe,qm,Sre,cUe,fUe,hS,mUe,gUe,hUe,jm,Rre,pUe,uUe,pS,_Ue,bUe,vUe,Dm,Pre,FUe,TUe,uS,MUe,EUe,CUe,Gm,Bre,wUe,AUe,_S,yUe,LUe,xUe,Om,Ire,$Ue,kUe,bS,SUe,RUe,PUe,Vm,Nre,BUe,IUe,vS,NUe,qUe,jUe,Xm,qre,DUe,GUe,FS,OUe,VUe,XUe,zm,jre,zUe,WUe,TS,QUe,HUe,UUe,Wm,Dre,JUe,YUe,MS,KUe,ZUe,eJe,Qm,Gre,oJe,rJe,ES,tJe,aJe,nJe,Hm,Ore,sJe,lJe,CS,iJe,dJe,cJe,Um,Vre,fJe,mJe,wS,gJe,hJe,pJe,Jm,Xre,uJe,_Je,AS,bJe,vJe,FJe,Ym,zre,TJe,MJe,yS,EJe,CJe,wJe,Km,Wre,AJe,yJe,LS,LJe,xJe,$Je,Zm,Qre,kJe,SJe,xS,RJe,PJe,BJe,eg,Hre,IJe,NJe,$S,qJe,jJe,DJe,og,Ure,GJe,OJe,kS,VJe,XJe,zJe,rg,Jre,WJe,QJe,SS,HJe,UJe,JJe,tg,Yre,YJe,KJe,RS,ZJe,eYe,oYe,ag,Kre,rYe,tYe,PS,aYe,nYe,sYe,ng,Zre,lYe,iYe,BS,dYe,cYe,fYe,sg,ete,mYe,gYe,IS,hYe,pYe,uYe,lg,ote,_Ye,bYe,NS,vYe,FYe,TYe,ig,rte,MYe,EYe,qS,CYe,wYe,AYe,dg,tte,yYe,LYe,jS,xYe,$Ye,kYe,cg,ate,SYe,RYe,DS,PYe,BYe,IYe,fg,nte,NYe,qYe,GS,jYe,DYe,GYe,mg,ste,OYe,VYe,OS,XYe,zYe,WYe,gg,lte,QYe,HYe,VS,UYe,JYe,YYe,hg,ite,KYe,ZYe,XS,eKe,oKe,rKe,pg,dte,tKe,aKe,zS,nKe,sKe,lKe,ug,cte,iKe,dKe,WS,cKe,fKe,mKe,_g,fte,gKe,hKe,QS,pKe,uKe,_Ke,bg,mte,bKe,vKe,HS,FKe,TKe,MKe,vg,gte,EKe,CKe,US,wKe,AKe,yKe,Fg,hte,LKe,xKe,JS,$Ke,kKe,SKe,Tg,pte,RKe,PKe,YS,BKe,IKe,NKe,Mg,ute,qKe,jKe,KS,DKe,GKe,OKe,Eg,VKe,Cg,PA,XKe,_te,zKe,nqe,Ti,wg,bte,BA,WKe,vte,QKe,sqe,wo,IA,HKe,NA,UKe,ZS,JKe,YKe,KKe,qA,ZKe,Fte,eZe,oZe,rZe,Cr,jA,tZe,Tte,aZe,nZe,Aa,sZe,Mte,lZe,iZe,Ete,dZe,cZe,Cte,fZe,mZe,gZe,k,Sn,wte,hZe,pZe,eR,uZe,_Ze,oR,bZe,vZe,FZe,Rn,Ate,TZe,MZe,rR,EZe,CZe,tR,wZe,AZe,yZe,Pn,yte,LZe,xZe,aR,$Ze,kZe,nR,SZe,RZe,PZe,Ag,Lte,BZe,IZe,sR,NZe,qZe,jZe,Bn,xte,DZe,GZe,lR,OZe,VZe,iR,XZe,zZe,WZe,yg,$te,QZe,HZe,dR,UZe,JZe,YZe,Lg,kte,KZe,ZZe,cR,eeo,oeo,reo,xg,Ste,teo,aeo,fR,neo,seo,leo,In,Rte,ieo,deo,mR,ceo,feo,gR,meo,geo,heo,Nn,Pte,peo,ueo,hR,_eo,beo,pR,veo,Feo,Teo,qn,Bte,Meo,Eeo,uR,Ceo,weo,_R,Aeo,yeo,Leo,$g,Ite,xeo,$eo,bR,keo,Seo,Reo,kg,Nte,Peo,Beo,vR,Ieo,Neo,qeo,jn,qte,jeo,Deo,FR,Geo,Oeo,TR,Veo,Xeo,zeo,Sg,jte,Weo,Qeo,MR,Heo,Ueo,Jeo,Dn,Dte,Yeo,Keo,ER,Zeo,eoo,CR,ooo,roo,too,Gn,Gte,aoo,noo,wR,soo,loo,AR,ioo,doo,coo,On,Ote,foo,moo,yR,goo,hoo,LR,poo,uoo,_oo,Rg,Vte,boo,voo,xR,Foo,Too,Moo,Vn,Xte,Eoo,Coo,$R,woo,Aoo,kR,yoo,Loo,xoo,Xn,zte,$oo,koo,SR,Soo,Roo,RR,Poo,Boo,Ioo,zn,Wte,Noo,qoo,PR,joo,Doo,BR,Goo,Ooo,Voo,Wn,Qte,Xoo,zoo,IR,Woo,Qoo,NR,Hoo,Uoo,Joo,Qn,Hte,Yoo,Koo,qR,Zoo,ero,jR,oro,rro,tro,Hn,Ute,aro,nro,DR,sro,lro,GR,iro,dro,cro,Pg,Jte,fro,mro,OR,gro,hro,pro,Un,Yte,uro,_ro,VR,bro,vro,XR,Fro,Tro,Mro,Bg,Kte,Ero,Cro,zR,wro,Aro,yro,Jn,Zte,Lro,xro,WR,$ro,kro,QR,Sro,Rro,Pro,Yn,eae,Bro,Iro,HR,Nro,qro,UR,jro,Dro,Gro,Kn,oae,Oro,Vro,JR,Xro,zro,YR,Wro,Qro,Hro,Ig,rae,Uro,Jro,KR,Yro,Kro,Zro,Zn,tae,eto,oto,ZR,rto,tto,eP,ato,nto,sto,es,aae,lto,ito,oP,dto,cto,rP,fto,mto,gto,Ng,nae,hto,pto,tP,uto,_to,bto,os,sae,vto,Fto,aP,Tto,Mto,nP,Eto,Cto,wto,rs,lae,Ato,yto,sP,Lto,xto,lP,$to,kto,Sto,ts,iae,Rto,Pto,iP,Bto,Ito,dP,Nto,qto,jto,as,dae,Dto,Gto,cP,Oto,Vto,fP,Xto,zto,Wto,ns,cae,Qto,Hto,mP,Uto,Jto,gP,Yto,Kto,Zto,ss,fae,eao,oao,hP,rao,tao,pP,aao,nao,sao,ls,mae,lao,iao,uP,dao,cao,_P,fao,mao,gao,qg,gae,hao,pao,bP,uao,_ao,bao,is,hae,vao,Fao,vP,Tao,Mao,FP,Eao,Cao,wao,jg,pae,Aao,yao,TP,Lao,xao,$ao,Dg,uae,kao,Sao,MP,Rao,Pao,Bao,ds,_ae,Iao,Nao,EP,qao,jao,CP,Dao,Gao,Oao,cs,bae,Vao,Xao,wP,zao,Wao,AP,Qao,Hao,Uao,fs,vae,Jao,Yao,yP,Kao,Zao,LP,eno,ono,rno,Gg,Fae,tno,ano,xP,nno,sno,lno,ms,Tae,ino,dno,$P,cno,fno,kP,mno,gno,hno,gs,Mae,pno,uno,SP,_no,bno,RP,vno,Fno,Tno,hs,Eae,Mno,Eno,PP,Cno,wno,BP,Ano,yno,Lno,ps,Cae,xno,$no,IP,kno,Sno,NP,Rno,Pno,Bno,us,wae,Ino,Nno,qP,qno,jno,jP,Dno,Gno,Ono,Og,Aae,Vno,Xno,DP,zno,Wno,Qno,_s,yae,Hno,Uno,GP,Jno,Yno,OP,Kno,Zno,eso,Vg,Lae,oso,rso,VP,tso,aso,nso,Xg,xae,sso,lso,XP,iso,dso,cso,zg,$ae,fso,mso,zP,gso,hso,pso,Wg,kae,uso,_so,WP,bso,vso,Fso,bs,Sae,Tso,Mso,QP,Eso,Cso,HP,wso,Aso,yso,Qg,Rae,Lso,xso,UP,$so,kso,Sso,vs,Pae,Rso,Pso,JP,Bso,Iso,YP,Nso,qso,jso,Fs,Bae,Dso,Gso,KP,Oso,Vso,ZP,Xso,zso,Wso,Ts,Iae,Qso,Hso,eB,Uso,Jso,oB,Yso,Kso,Zso,Ms,Nae,elo,olo,rB,rlo,tlo,tB,alo,nlo,slo,Es,qae,llo,ilo,aB,dlo,clo,nB,flo,mlo,glo,Cs,jae,hlo,plo,sB,ulo,_lo,lB,blo,vlo,Flo,Hg,Dae,Tlo,Mlo,iB,Elo,Clo,wlo,Ug,Gae,Alo,ylo,dB,Llo,xlo,$lo,ws,Oae,klo,Slo,cB,Rlo,Plo,fB,Blo,Ilo,Nlo,As,Vae,qlo,jlo,mB,Dlo,Glo,gB,Olo,Vlo,Xlo,ys,Xae,zlo,Wlo,hB,Qlo,Hlo,pB,Ulo,Jlo,Ylo,Jg,zae,Klo,Zlo,uB,eio,oio,rio,Yg,Wae,tio,aio,_B,nio,sio,lio,Kg,Qae,iio,dio,bB,cio,fio,mio,Ls,Hae,gio,hio,vB,pio,uio,FB,_io,bio,vio,Zg,Uae,Fio,Tio,TB,Mio,Eio,Cio,eh,Jae,wio,Aio,MB,yio,Lio,xio,oh,Yae,$io,kio,EB,Sio,Rio,Pio,xs,Kae,Bio,Iio,CB,Nio,qio,wB,jio,Dio,Gio,rh,Zae,Oio,Vio,AB,Xio,zio,Wio,th,ene,Qio,Hio,yB,Uio,Jio,Yio,$s,one,Kio,Zio,LB,edo,odo,xB,rdo,tdo,ado,ks,rne,ndo,sdo,$B,ldo,ido,kB,ddo,cdo,fdo,Ss,tne,mdo,gdo,SB,hdo,pdo,RB,udo,_do,bdo,Rs,ane,vdo,Fdo,PB,Tdo,Mdo,BB,Edo,Cdo,wdo,ah,Ado,nh,DA,ydo,nne,Ldo,lqe,Mi,sh,sne,GA,xdo,lne,$do,iqe,Ao,OA,kdo,VA,Sdo,IB,Rdo,Pdo,Bdo,XA,Ido,ine,Ndo,qdo,jdo,He,zA,Ddo,dne,Gdo,Odo,ya,Vdo,cne,Xdo,zdo,fne,Wdo,Qdo,mne,Hdo,Udo,Jdo,Y,lh,gne,Ydo,Kdo,NB,Zdo,eco,oco,ih,hne,rco,tco,qB,aco,nco,sco,dh,pne,lco,ico,jB,dco,cco,fco,ch,une,mco,gco,DB,hco,pco,uco,fh,_ne,_co,bco,GB,vco,Fco,Tco,mh,bne,Mco,Eco,OB,Cco,wco,Aco,gh,vne,yco,Lco,VB,xco,$co,kco,hh,Fne,Sco,Rco,XB,Pco,Bco,Ico,ph,Tne,Nco,qco,zB,jco,Dco,Gco,uh,Mne,Oco,Vco,WB,Xco,zco,Wco,_h,Ene,Qco,Hco,QB,Uco,Jco,Yco,bh,Cne,Kco,Zco,HB,efo,ofo,rfo,vh,wne,tfo,afo,UB,nfo,sfo,lfo,Fh,Ane,ifo,dfo,JB,cfo,ffo,mfo,Th,yne,gfo,hfo,YB,pfo,ufo,_fo,Mh,Lne,bfo,vfo,KB,Ffo,Tfo,Mfo,Eh,xne,Efo,Cfo,ZB,wfo,Afo,yfo,Ch,$ne,Lfo,xfo,eI,$fo,kfo,Sfo,wh,kne,Rfo,Pfo,oI,Bfo,Ifo,Nfo,Ah,Sne,qfo,jfo,rI,Dfo,Gfo,Ofo,yh,Rne,Vfo,Xfo,tI,zfo,Wfo,Qfo,Lh,Pne,Hfo,Ufo,aI,Jfo,Yfo,Kfo,xh,Bne,Zfo,emo,nI,omo,rmo,tmo,$h,Ine,amo,nmo,sI,smo,lmo,imo,kh,Nne,dmo,cmo,lI,fmo,mmo,gmo,Sh,qne,hmo,pmo,iI,umo,_mo,bmo,Rh,jne,vmo,Fmo,dI,Tmo,Mmo,Emo,Ph,Dne,Cmo,wmo,cI,Amo,ymo,Lmo,Bh,Gne,xmo,$mo,fI,kmo,Smo,Rmo,Ih,Pmo,Nh,Bmo,qh,WA,Imo,One,Nmo,dqe,Ei,jh,Vne,QA,qmo,Xne,jmo,cqe,yo,HA,Dmo,UA,Gmo,mI,Omo,Vmo,Xmo,JA,zmo,zne,Wmo,Qmo,Hmo,Ue,YA,Umo,Wne,Jmo,Ymo,Ci,Kmo,Qne,Zmo,ego,Hne,ogo,rgo,tgo,he,Dh,Une,ago,ngo,gI,sgo,lgo,igo,Gh,Jne,dgo,cgo,Yne,fgo,mgo,ggo,Oh,Kne,hgo,pgo,hI,ugo,_go,bgo,Vh,Zne,vgo,Fgo,pI,Tgo,Mgo,Ego,Xh,ese,Cgo,wgo,uI,Ago,ygo,Lgo,zh,ose,xgo,$go,_I,kgo,Sgo,Rgo,Wh,rse,Pgo,Bgo,bI,Igo,Ngo,qgo,Qh,tse,jgo,Dgo,vI,Ggo,Ogo,Vgo,Hh,ase,Xgo,zgo,FI,Wgo,Qgo,Hgo,Uh,nse,Ugo,Jgo,TI,Ygo,Kgo,Zgo,Jh,sse,eho,oho,MI,rho,tho,aho,Yh,lse,nho,sho,EI,lho,iho,dho,Kh,ise,cho,fho,CI,mho,gho,hho,Zh,dse,pho,uho,wI,_ho,bho,vho,ep,cse,Fho,Tho,AI,Mho,Eho,Cho,op,fse,who,Aho,yI,yho,Lho,xho,rp,mse,$ho,kho,LI,Sho,Rho,Pho,tp,Bho,ap,Iho,np,KA,Nho,gse,qho,fqe,wi,sp,hse,ZA,jho,pse,Dho,mqe,Lo,ey,Gho,Ai,Oho,xI,Vho,Xho,$I,zho,Who,Qho,oy,Hho,use,Uho,Jho,Yho,tt,ry,Kho,_se,Zho,epo,yi,opo,bse,rpo,tpo,kI,apo,npo,spo,lp,lpo,Je,ty,ipo,vse,dpo,cpo,La,fpo,Fse,mpo,gpo,Tse,hpo,ppo,Mse,upo,_po,bpo,x,ip,Ese,vpo,Fpo,SI,Tpo,Mpo,Epo,dp,Cse,Cpo,wpo,RI,Apo,ypo,Lpo,cp,wse,xpo,$po,PI,kpo,Spo,Rpo,fp,Ase,Ppo,Bpo,BI,Ipo,Npo,qpo,mp,yse,jpo,Dpo,II,Gpo,Opo,Vpo,gp,Lse,Xpo,zpo,NI,Wpo,Qpo,Hpo,hp,xse,Upo,Jpo,qI,Ypo,Kpo,Zpo,pp,$se,euo,ouo,jI,ruo,tuo,auo,up,kse,nuo,suo,DI,luo,iuo,duo,_p,Sse,cuo,fuo,GI,muo,guo,huo,bp,Rse,puo,uuo,OI,_uo,buo,vuo,vp,Pse,Fuo,Tuo,VI,Muo,Euo,Cuo,Fp,Bse,wuo,Auo,XI,yuo,Luo,xuo,Tp,Ise,$uo,kuo,zI,Suo,Ruo,Puo,Mp,Nse,Buo,Iuo,WI,Nuo,quo,juo,Ep,qse,Duo,Guo,QI,Ouo,Vuo,Xuo,Cp,jse,zuo,Wuo,HI,Quo,Huo,Uuo,wp,Dse,Juo,Yuo,UI,Kuo,Zuo,e_o,Ap,Gse,o_o,r_o,JI,t_o,a_o,n_o,yp,Ose,s_o,l_o,YI,i_o,d_o,c_o,Lp,Vse,f_o,m_o,KI,g_o,h_o,p_o,xp,Xse,u_o,__o,ZI,b_o,v_o,F_o,$p,zse,T_o,M_o,eN,E_o,C_o,w_o,kp,Wse,A_o,y_o,oN,L_o,x_o,$_o,Sp,Qse,k_o,S_o,rN,R_o,P_o,B_o,Rp,Hse,I_o,N_o,tN,q_o,j_o,D_o,Pp,Use,G_o,O_o,aN,V_o,X_o,z_o,Bp,Jse,W_o,Q_o,nN,H_o,U_o,J_o,Ip,Yse,Y_o,K_o,sN,Z_o,e1o,o1o,Np,Kse,r1o,t1o,lN,a1o,n1o,s1o,qp,Zse,l1o,i1o,iN,d1o,c1o,f1o,jp,ele,m1o,g1o,dN,h1o,p1o,u1o,Ps,ole,_1o,b1o,cN,v1o,F1o,fN,T1o,M1o,E1o,Dp,rle,C1o,w1o,mN,A1o,y1o,L1o,Gp,tle,x1o,$1o,gN,k1o,S1o,R1o,Op,ale,P1o,B1o,hN,I1o,N1o,q1o,Vp,nle,j1o,D1o,pN,G1o,O1o,V1o,Xp,sle,X1o,z1o,uN,W1o,Q1o,H1o,zp,lle,U1o,J1o,_N,Y1o,K1o,Z1o,Wp,ile,e7o,o7o,bN,r7o,t7o,a7o,Qp,dle,n7o,s7o,vN,l7o,i7o,d7o,Hp,cle,c7o,f7o,FN,m7o,g7o,h7o,Up,fle,p7o,u7o,TN,_7o,b7o,v7o,Jp,mle,F7o,T7o,MN,M7o,E7o,C7o,Yp,gle,w7o,A7o,EN,y7o,L7o,x7o,Kp,hle,$7o,k7o,CN,S7o,R7o,P7o,Zp,ple,B7o,I7o,wN,N7o,q7o,j7o,eu,ule,D7o,G7o,AN,O7o,V7o,X7o,ou,_le,z7o,W7o,yN,Q7o,H7o,U7o,ru,ble,J7o,Y7o,LN,K7o,Z7o,ebo,tu,vle,obo,rbo,xN,tbo,abo,nbo,au,Fle,sbo,lbo,$N,ibo,dbo,cbo,nu,Tle,fbo,mbo,kN,gbo,hbo,pbo,su,Mle,ubo,_bo,SN,bbo,vbo,Fbo,lu,Ele,Tbo,Mbo,RN,Ebo,Cbo,wbo,iu,Cle,Abo,ybo,PN,Lbo,xbo,$bo,du,wle,kbo,Sbo,BN,Rbo,Pbo,Bbo,cu,Ale,Ibo,Nbo,IN,qbo,jbo,Dbo,fu,yle,Gbo,Obo,NN,Vbo,Xbo,zbo,mu,Lle,Wbo,Qbo,qN,Hbo,Ubo,Jbo,gu,xle,Ybo,Kbo,jN,Zbo,e2o,o2o,hu,$le,r2o,t2o,DN,a2o,n2o,s2o,pu,kle,l2o,i2o,GN,d2o,c2o,f2o,uu,Sle,m2o,g2o,ON,h2o,p2o,u2o,_u,Rle,_2o,b2o,VN,v2o,F2o,T2o,bu,Ple,M2o,E2o,XN,C2o,w2o,A2o,vu,Ble,y2o,L2o,zN,x2o,$2o,k2o,Fu,Ile,S2o,R2o,WN,P2o,B2o,I2o,Tu,Nle,N2o,q2o,QN,j2o,D2o,G2o,Mu,qle,O2o,V2o,HN,X2o,z2o,W2o,Eu,jle,Q2o,H2o,UN,U2o,J2o,Y2o,Cu,Dle,K2o,Z2o,JN,e4o,o4o,r4o,wu,Gle,t4o,a4o,YN,n4o,s4o,l4o,Au,Ole,i4o,d4o,KN,c4o,f4o,m4o,yu,Vle,g4o,h4o,ZN,p4o,u4o,_4o,Lu,Xle,b4o,v4o,eq,F4o,T4o,M4o,xu,zle,E4o,C4o,oq,w4o,A4o,y4o,$u,Wle,L4o,x4o,rq,$4o,k4o,S4o,ku,Qle,R4o,P4o,tq,B4o,I4o,N4o,Su,Hle,q4o,j4o,aq,D4o,G4o,O4o,Ru,Ule,V4o,X4o,nq,z4o,W4o,Q4o,Pu,Jle,H4o,U4o,sq,J4o,Y4o,K4o,Bu,Yle,Z4o,evo,lq,ovo,rvo,tvo,Iu,Kle,avo,nvo,iq,svo,lvo,ivo,Nu,Zle,dvo,cvo,dq,fvo,mvo,gvo,qu,eie,hvo,pvo,cq,uvo,_vo,bvo,ju,oie,vvo,Fvo,fq,Tvo,Mvo,Evo,Du,rie,Cvo,wvo,mq,Avo,yvo,Lvo,Gu,tie,xvo,$vo,gq,kvo,Svo,Rvo,Ou,aie,Pvo,Bvo,hq,Ivo,Nvo,qvo,Vu,nie,jvo,Dvo,pq,Gvo,Ovo,Vvo,Xu,sie,Xvo,zvo,uq,Wvo,Qvo,Hvo,zu,lie,Uvo,Jvo,_q,Yvo,Kvo,Zvo,Wu,iie,eFo,oFo,bq,rFo,tFo,aFo,Qu,die,nFo,sFo,vq,lFo,iFo,dFo,Hu,cie,cFo,fFo,Fq,mFo,gFo,hFo,Uu,fie,pFo,uFo,Tq,_Fo,bFo,vFo,Ju,mie,FFo,TFo,Mq,MFo,EFo,CFo,Yu,gie,wFo,AFo,Eq,yFo,LFo,xFo,Ku,hie,$Fo,kFo,Cq,SFo,RFo,PFo,Zu,pie,BFo,IFo,wq,NFo,qFo,jFo,e_,uie,DFo,GFo,Aq,OFo,VFo,XFo,o_,zFo,_ie,WFo,QFo,bie,HFo,UFo,r_,gqe,Li,t_,vie,ay,JFo,Fie,YFo,hqe,xo,ny,KFo,xi,ZFo,yq,e0o,o0o,Lq,r0o,t0o,a0o,sy,n0o,Tie,s0o,l0o,i0o,at,ly,d0o,Mie,c0o,f0o,$i,m0o,Eie,g0o,h0o,xq,p0o,u0o,_0o,a_,b0o,Ye,iy,v0o,Cie,F0o,T0o,xa,M0o,wie,E0o,C0o,Aie,w0o,A0o,yie,y0o,L0o,x0o,G,n_,Lie,$0o,k0o,$q,S0o,R0o,P0o,s_,xie,B0o,I0o,kq,N0o,q0o,j0o,l_,$ie,D0o,G0o,Sq,O0o,V0o,X0o,i_,kie,z0o,W0o,Rq,Q0o,H0o,U0o,d_,Sie,J0o,Y0o,Pq,K0o,Z0o,eTo,c_,Rie,oTo,rTo,Bq,tTo,aTo,nTo,f_,Pie,sTo,lTo,Iq,iTo,dTo,cTo,m_,Bie,fTo,mTo,Nq,gTo,hTo,pTo,g_,Iie,uTo,_To,qq,bTo,vTo,FTo,h_,Nie,TTo,MTo,jq,ETo,CTo,wTo,p_,qie,ATo,yTo,Dq,LTo,xTo,$To,u_,jie,kTo,STo,Gq,RTo,PTo,BTo,__,Die,ITo,NTo,Oq,qTo,jTo,DTo,b_,Gie,GTo,OTo,Vq,VTo,XTo,zTo,v_,Oie,WTo,QTo,Xq,HTo,UTo,JTo,F_,Vie,YTo,KTo,zq,ZTo,eMo,oMo,T_,Xie,rMo,tMo,Wq,aMo,nMo,sMo,M_,zie,lMo,iMo,Qq,dMo,cMo,fMo,E_,Wie,mMo,gMo,Hq,hMo,pMo,uMo,C_,Qie,_Mo,bMo,Uq,vMo,FMo,TMo,w_,Hie,MMo,EMo,Jq,CMo,wMo,AMo,A_,Uie,yMo,LMo,Yq,xMo,$Mo,kMo,y_,Jie,SMo,RMo,Kq,PMo,BMo,IMo,L_,Yie,NMo,qMo,Zq,jMo,DMo,GMo,x_,Kie,OMo,VMo,ej,XMo,zMo,WMo,$_,Zie,QMo,HMo,oj,UMo,JMo,YMo,k_,ede,KMo,ZMo,rj,eEo,oEo,rEo,S_,ode,tEo,aEo,tj,nEo,sEo,lEo,R_,rde,iEo,dEo,aj,cEo,fEo,mEo,P_,tde,gEo,hEo,nj,pEo,uEo,_Eo,B_,ade,bEo,vEo,sj,FEo,TEo,MEo,I_,nde,EEo,CEo,lj,wEo,AEo,yEo,N_,sde,LEo,xEo,ij,$Eo,kEo,SEo,q_,lde,REo,PEo,dj,BEo,IEo,NEo,j_,ide,qEo,jEo,cj,DEo,GEo,OEo,D_,dde,VEo,XEo,fj,zEo,WEo,QEo,G_,cde,HEo,UEo,mj,JEo,YEo,KEo,O_,fde,ZEo,eCo,gj,oCo,rCo,tCo,V_,mde,aCo,nCo,hj,sCo,lCo,iCo,X_,gde,dCo,cCo,pj,fCo,mCo,gCo,z_,hde,hCo,pCo,uj,uCo,_Co,bCo,W_,pde,vCo,FCo,_j,TCo,MCo,ECo,Q_,CCo,ude,wCo,ACo,_de,yCo,LCo,H_,pqe,ki,U_,bde,dy,xCo,vde,$Co,uqe,$o,cy,kCo,Si,SCo,bj,RCo,PCo,vj,BCo,ICo,NCo,fy,qCo,Fde,jCo,DCo,GCo,nt,my,OCo,Tde,VCo,XCo,Ri,zCo,Mde,WCo,QCo,Fj,HCo,UCo,JCo,J_,YCo,Ke,gy,KCo,Ede,ZCo,e5o,$a,o5o,Cde,r5o,t5o,wde,a5o,n5o,Ade,s5o,l5o,i5o,z,Y_,yde,d5o,c5o,Tj,f5o,m5o,g5o,K_,Lde,h5o,p5o,Mj,u5o,_5o,b5o,Z_,xde,v5o,F5o,Ej,T5o,M5o,E5o,e1,$de,C5o,w5o,Cj,A5o,y5o,L5o,o1,kde,x5o,$5o,wj,k5o,S5o,R5o,r1,Sde,P5o,B5o,Aj,I5o,N5o,q5o,t1,Rde,j5o,D5o,yj,G5o,O5o,V5o,a1,Pde,X5o,z5o,Lj,W5o,Q5o,H5o,n1,Bde,U5o,J5o,xj,Y5o,K5o,Z5o,s1,Ide,e3o,o3o,$j,r3o,t3o,a3o,l1,Nde,n3o,s3o,kj,l3o,i3o,d3o,i1,qde,c3o,f3o,Sj,m3o,g3o,h3o,d1,jde,p3o,u3o,Rj,_3o,b3o,v3o,c1,Dde,F3o,T3o,Pj,M3o,E3o,C3o,f1,Gde,w3o,A3o,Bj,y3o,L3o,x3o,m1,Ode,$3o,k3o,Ij,S3o,R3o,P3o,g1,Vde,B3o,I3o,Nj,N3o,q3o,j3o,h1,Xde,D3o,G3o,qj,O3o,V3o,X3o,p1,zde,z3o,W3o,jj,Q3o,H3o,U3o,u1,Wde,J3o,Y3o,Dj,K3o,Z3o,ewo,_1,Qde,owo,rwo,Gj,two,awo,nwo,b1,Hde,swo,lwo,Oj,iwo,dwo,cwo,v1,Ude,fwo,mwo,Vj,gwo,hwo,pwo,F1,Jde,uwo,_wo,Xj,bwo,vwo,Fwo,T1,Yde,Two,Mwo,zj,Ewo,Cwo,wwo,M1,Kde,Awo,ywo,Wj,Lwo,xwo,$wo,E1,Zde,kwo,Swo,Qj,Rwo,Pwo,Bwo,C1,ece,Iwo,Nwo,Hj,qwo,jwo,Dwo,w1,oce,Gwo,Owo,Uj,Vwo,Xwo,zwo,A1,rce,Wwo,Qwo,Jj,Hwo,Uwo,Jwo,y1,tce,Ywo,Kwo,Yj,Zwo,e6o,o6o,L1,ace,r6o,t6o,Kj,a6o,n6o,s6o,x1,nce,l6o,i6o,Zj,d6o,c6o,f6o,$1,sce,m6o,g6o,eD,h6o,p6o,u6o,k1,lce,_6o,b6o,oD,v6o,F6o,T6o,S1,ice,M6o,E6o,rD,C6o,w6o,A6o,R1,dce,y6o,L6o,tD,x6o,$6o,k6o,P1,S6o,cce,R6o,P6o,fce,B6o,I6o,B1,_qe,Pi,I1,mce,hy,N6o,gce,q6o,bqe,ko,py,j6o,Bi,D6o,aD,G6o,O6o,nD,V6o,X6o,z6o,uy,W6o,hce,Q6o,H6o,U6o,st,_y,J6o,pce,Y6o,K6o,Ii,Z6o,uce,eAo,oAo,sD,rAo,tAo,aAo,N1,nAo,Ze,by,sAo,_ce,lAo,iAo,ka,dAo,bce,cAo,fAo,vce,mAo,gAo,Fce,hAo,pAo,uAo,Q,q1,Tce,_Ao,bAo,lD,vAo,FAo,TAo,j1,Mce,MAo,EAo,iD,CAo,wAo,AAo,D1,Ece,yAo,LAo,dD,xAo,$Ao,kAo,G1,Cce,SAo,RAo,cD,PAo,BAo,IAo,O1,wce,NAo,qAo,fD,jAo,DAo,GAo,V1,Ace,OAo,VAo,mD,XAo,zAo,WAo,X1,yce,QAo,HAo,gD,UAo,JAo,YAo,z1,Lce,KAo,ZAo,hD,eyo,oyo,ryo,W1,xce,tyo,ayo,pD,nyo,syo,lyo,Q1,$ce,iyo,dyo,uD,cyo,fyo,myo,H1,kce,gyo,hyo,_D,pyo,uyo,_yo,U1,Sce,byo,vyo,bD,Fyo,Tyo,Myo,J1,Rce,Eyo,Cyo,vD,wyo,Ayo,yyo,Y1,Pce,Lyo,xyo,FD,$yo,kyo,Syo,K1,Bce,Ryo,Pyo,TD,Byo,Iyo,Nyo,Z1,Ice,qyo,jyo,MD,Dyo,Gyo,Oyo,e7,Nce,Vyo,Xyo,ED,zyo,Wyo,Qyo,o7,qce,Hyo,Uyo,CD,Jyo,Yyo,Kyo,r7,jce,Zyo,eLo,wD,oLo,rLo,tLo,t7,Dce,aLo,nLo,AD,sLo,lLo,iLo,a7,Gce,dLo,cLo,yD,fLo,mLo,gLo,n7,Oce,hLo,pLo,LD,uLo,_Lo,bLo,s7,Vce,vLo,FLo,xD,TLo,MLo,ELo,l7,Xce,CLo,wLo,$D,ALo,yLo,LLo,i7,zce,xLo,$Lo,kD,kLo,SLo,RLo,d7,Wce,PLo,BLo,SD,ILo,NLo,qLo,c7,Qce,jLo,DLo,RD,GLo,OLo,VLo,f7,Hce,XLo,zLo,PD,WLo,QLo,HLo,m7,Uce,ULo,JLo,BD,YLo,KLo,ZLo,g7,Jce,e8o,o8o,ID,r8o,t8o,a8o,h7,Yce,n8o,s8o,Kce,l8o,i8o,d8o,p7,Zce,c8o,f8o,ND,m8o,g8o,h8o,u7,efe,p8o,u8o,qD,_8o,b8o,v8o,_7,ofe,F8o,T8o,jD,M8o,E8o,C8o,b7,rfe,w8o,A8o,DD,y8o,L8o,x8o,v7,$8o,tfe,k8o,S8o,afe,R8o,P8o,F7,vqe,Ni,T7,nfe,vy,B8o,sfe,I8o,Fqe,So,Fy,N8o,qi,q8o,GD,j8o,D8o,OD,G8o,O8o,V8o,Ty,X8o,lfe,z8o,W8o,Q8o,lt,My,H8o,ife,U8o,J8o,ji,Y8o,dfe,K8o,Z8o,VD,e9o,o9o,r9o,M7,t9o,eo,Ey,a9o,cfe,n9o,s9o,Sa,l9o,ffe,i9o,d9o,mfe,c9o,f9o,gfe,m9o,g9o,h9o,ue,E7,hfe,p9o,u9o,XD,_9o,b9o,v9o,C7,pfe,F9o,T9o,zD,M9o,E9o,C9o,w7,ufe,w9o,A9o,WD,y9o,L9o,x9o,A7,_fe,$9o,k9o,QD,S9o,R9o,P9o,y7,bfe,B9o,I9o,HD,N9o,q9o,j9o,L7,vfe,D9o,G9o,UD,O9o,V9o,X9o,x7,Ffe,z9o,W9o,JD,Q9o,H9o,U9o,$7,Tfe,J9o,Y9o,YD,K9o,Z9o,exo,k7,Mfe,oxo,rxo,KD,txo,axo,nxo,S7,Efe,sxo,lxo,ZD,ixo,dxo,cxo,R7,Cfe,fxo,mxo,eG,gxo,hxo,pxo,P7,wfe,uxo,_xo,oG,bxo,vxo,Fxo,B7,Afe,Txo,Mxo,rG,Exo,Cxo,wxo,I7,yfe,Axo,yxo,tG,Lxo,xxo,$xo,N7,Lfe,kxo,Sxo,aG,Rxo,Pxo,Bxo,q7,xfe,Ixo,Nxo,nG,qxo,jxo,Dxo,j7,Gxo,$fe,Oxo,Vxo,kfe,Xxo,zxo,D7,Tqe,Di,G7,Sfe,Cy,Wxo,Rfe,Qxo,Mqe,Ro,wy,Hxo,Gi,Uxo,sG,Jxo,Yxo,lG,Kxo,Zxo,e$o,Ay,o$o,Pfe,r$o,t$o,a$o,it,yy,n$o,Bfe,s$o,l$o,Oi,i$o,Ife,d$o,c$o,iG,f$o,m$o,g$o,O7,h$o,oo,Ly,p$o,Nfe,u$o,_$o,Ra,b$o,qfe,v$o,F$o,jfe,T$o,M$o,Dfe,E$o,C$o,w$o,N,V7,Gfe,A$o,y$o,dG,L$o,x$o,$$o,X7,Ofe,k$o,S$o,cG,R$o,P$o,B$o,z7,Vfe,I$o,N$o,fG,q$o,j$o,D$o,W7,Xfe,G$o,O$o,mG,V$o,X$o,z$o,Q7,zfe,W$o,Q$o,gG,H$o,U$o,J$o,H7,Wfe,Y$o,K$o,hG,Z$o,eko,oko,U7,Qfe,rko,tko,pG,ako,nko,sko,J7,Hfe,lko,iko,uG,dko,cko,fko,Y7,Ufe,mko,gko,_G,hko,pko,uko,K7,Jfe,_ko,bko,bG,vko,Fko,Tko,Z7,Yfe,Mko,Eko,vG,Cko,wko,Ako,eb,Kfe,yko,Lko,FG,xko,$ko,kko,ob,Zfe,Sko,Rko,TG,Pko,Bko,Iko,rb,eme,Nko,qko,MG,jko,Dko,Gko,tb,ome,Oko,Vko,EG,Xko,zko,Wko,ab,rme,Qko,Hko,CG,Uko,Jko,Yko,nb,tme,Kko,Zko,wG,eSo,oSo,rSo,sb,ame,tSo,aSo,AG,nSo,sSo,lSo,lb,nme,iSo,dSo,yG,cSo,fSo,mSo,ib,sme,gSo,hSo,LG,pSo,uSo,_So,db,lme,bSo,vSo,xG,FSo,TSo,MSo,cb,ime,ESo,CSo,$G,wSo,ASo,ySo,fb,dme,LSo,xSo,kG,$So,kSo,SSo,mb,cme,RSo,PSo,SG,BSo,ISo,NSo,gb,fme,qSo,jSo,RG,DSo,GSo,OSo,hb,mme,VSo,XSo,PG,zSo,WSo,QSo,pb,gme,HSo,USo,BG,JSo,YSo,KSo,ub,hme,ZSo,eRo,IG,oRo,rRo,tRo,_b,pme,aRo,nRo,NG,sRo,lRo,iRo,bb,ume,dRo,cRo,qG,fRo,mRo,gRo,vb,_me,hRo,pRo,jG,uRo,_Ro,bRo,Fb,bme,vRo,FRo,DG,TRo,MRo,ERo,Tb,vme,CRo,wRo,GG,ARo,yRo,LRo,Mb,Fme,xRo,$Ro,OG,kRo,SRo,RRo,Eb,Tme,PRo,BRo,VG,IRo,NRo,qRo,Cb,Mme,jRo,DRo,XG,GRo,ORo,VRo,wb,Eme,XRo,zRo,zG,WRo,QRo,HRo,Ab,Cme,URo,JRo,WG,YRo,KRo,ZRo,yb,wme,ePo,oPo,QG,rPo,tPo,aPo,Lb,Ame,nPo,sPo,HG,lPo,iPo,dPo,xb,yme,cPo,fPo,UG,mPo,gPo,hPo,$b,Lme,pPo,uPo,JG,_Po,bPo,vPo,kb,xme,FPo,TPo,YG,MPo,EPo,CPo,Sb,$me,wPo,APo,KG,yPo,LPo,xPo,Rb,kme,$Po,kPo,ZG,SPo,RPo,PPo,Pb,Sme,BPo,IPo,eO,NPo,qPo,jPo,Bb,Rme,DPo,GPo,oO,OPo,VPo,XPo,Ib,zPo,Pme,WPo,QPo,Bme,HPo,UPo,Nb,Eqe,Vi,qb,Ime,xy,JPo,Nme,YPo,Cqe,Po,$y,KPo,Xi,ZPo,rO,eBo,oBo,tO,rBo,tBo,aBo,ky,nBo,qme,sBo,lBo,iBo,dt,Sy,dBo,jme,cBo,fBo,zi,mBo,Dme,gBo,hBo,aO,pBo,uBo,_Bo,jb,bBo,ro,Ry,vBo,Gme,FBo,TBo,Pa,MBo,Ome,EBo,CBo,Vme,wBo,ABo,Xme,yBo,LBo,xBo,K,Db,zme,$Bo,kBo,nO,SBo,RBo,PBo,Gb,Wme,BBo,IBo,sO,NBo,qBo,jBo,Ob,Qme,DBo,GBo,lO,OBo,VBo,XBo,Vb,Hme,zBo,WBo,iO,QBo,HBo,UBo,Xb,Ume,JBo,YBo,dO,KBo,ZBo,eIo,zb,Jme,oIo,rIo,cO,tIo,aIo,nIo,Wb,Yme,sIo,lIo,fO,iIo,dIo,cIo,Qb,Kme,fIo,mIo,mO,gIo,hIo,pIo,Hb,Zme,uIo,_Io,gO,bIo,vIo,FIo,Ub,ege,TIo,MIo,hO,EIo,CIo,wIo,Jb,oge,AIo,yIo,pO,LIo,xIo,$Io,Yb,rge,kIo,SIo,uO,RIo,PIo,BIo,Kb,tge,IIo,NIo,_O,qIo,jIo,DIo,Zb,age,GIo,OIo,bO,VIo,XIo,zIo,e2,nge,WIo,QIo,vO,HIo,UIo,JIo,o2,sge,YIo,KIo,FO,ZIo,eNo,oNo,r2,lge,rNo,tNo,TO,aNo,nNo,sNo,t2,ige,lNo,iNo,MO,dNo,cNo,fNo,a2,dge,mNo,gNo,EO,hNo,pNo,uNo,n2,cge,_No,bNo,CO,vNo,FNo,TNo,s2,fge,MNo,ENo,wO,CNo,wNo,ANo,l2,mge,yNo,LNo,AO,xNo,$No,kNo,i2,gge,SNo,RNo,yO,PNo,BNo,INo,d2,hge,NNo,qNo,LO,jNo,DNo,GNo,c2,pge,ONo,VNo,xO,XNo,zNo,WNo,f2,uge,QNo,HNo,$O,UNo,JNo,YNo,m2,_ge,KNo,ZNo,kO,eqo,oqo,rqo,g2,bge,tqo,aqo,SO,nqo,sqo,lqo,h2,vge,iqo,dqo,RO,cqo,fqo,mqo,p2,gqo,Fge,hqo,pqo,Tge,uqo,_qo,u2,wqe,Wi,_2,Mge,Py,bqo,Ege,vqo,Aqe,Bo,By,Fqo,Qi,Tqo,PO,Mqo,Eqo,BO,Cqo,wqo,Aqo,Iy,yqo,Cge,Lqo,xqo,$qo,ct,Ny,kqo,wge,Sqo,Rqo,Hi,Pqo,Age,Bqo,Iqo,IO,Nqo,qqo,jqo,b2,Dqo,to,qy,Gqo,yge,Oqo,Vqo,Ba,Xqo,Lge,zqo,Wqo,xge,Qqo,Hqo,$ge,Uqo,Jqo,Yqo,Yr,v2,kge,Kqo,Zqo,NO,ejo,ojo,rjo,F2,Sge,tjo,ajo,qO,njo,sjo,ljo,T2,Rge,ijo,djo,jO,cjo,fjo,mjo,M2,Pge,gjo,hjo,DO,pjo,ujo,_jo,E2,Bge,bjo,vjo,GO,Fjo,Tjo,Mjo,C2,Ejo,Ige,Cjo,wjo,Nge,Ajo,yjo,w2,yqe,Ui,A2,qge,jy,Ljo,jge,xjo,Lqe,Io,Dy,$jo,Ji,kjo,OO,Sjo,Rjo,VO,Pjo,Bjo,Ijo,Gy,Njo,Dge,qjo,jjo,Djo,ft,Oy,Gjo,Gge,Ojo,Vjo,Yi,Xjo,Oge,zjo,Wjo,XO,Qjo,Hjo,Ujo,y2,Jjo,ao,Vy,Yjo,Vge,Kjo,Zjo,Ia,eDo,Xge,oDo,rDo,zge,tDo,aDo,Wge,nDo,sDo,lDo,H,L2,Qge,iDo,dDo,zO,cDo,fDo,mDo,x2,Hge,gDo,hDo,WO,pDo,uDo,_Do,$2,Uge,bDo,vDo,QO,FDo,TDo,MDo,k2,Jge,EDo,CDo,HO,wDo,ADo,yDo,S2,Yge,LDo,xDo,UO,$Do,kDo,SDo,R2,Kge,RDo,PDo,JO,BDo,IDo,NDo,P2,Zge,qDo,jDo,YO,DDo,GDo,ODo,B2,ehe,VDo,XDo,KO,zDo,WDo,QDo,I2,ohe,HDo,UDo,ZO,JDo,YDo,KDo,N2,rhe,ZDo,eGo,eV,oGo,rGo,tGo,q2,the,aGo,nGo,oV,sGo,lGo,iGo,j2,ahe,dGo,cGo,rV,fGo,mGo,gGo,D2,nhe,hGo,pGo,tV,uGo,_Go,bGo,G2,she,vGo,FGo,aV,TGo,MGo,EGo,O2,lhe,CGo,wGo,nV,AGo,yGo,LGo,V2,ihe,xGo,$Go,sV,kGo,SGo,RGo,X2,dhe,PGo,BGo,lV,IGo,NGo,qGo,z2,che,jGo,DGo,iV,GGo,OGo,VGo,W2,fhe,XGo,zGo,dV,WGo,QGo,HGo,Q2,mhe,UGo,JGo,cV,YGo,KGo,ZGo,H2,ghe,eOo,oOo,fV,rOo,tOo,aOo,U2,hhe,nOo,sOo,mV,lOo,iOo,dOo,J2,phe,cOo,fOo,gV,mOo,gOo,hOo,Y2,uhe,pOo,uOo,hV,_Oo,bOo,vOo,K2,_he,FOo,TOo,pV,MOo,EOo,COo,Z2,bhe,wOo,AOo,uV,yOo,LOo,xOo,e4,vhe,$Oo,kOo,_V,SOo,ROo,POo,o4,Fhe,BOo,IOo,bV,NOo,qOo,jOo,r4,The,DOo,GOo,vV,OOo,VOo,XOo,t4,Mhe,zOo,WOo,FV,QOo,HOo,UOo,a4,Ehe,JOo,YOo,TV,KOo,ZOo,eVo,n4,Che,oVo,rVo,MV,tVo,aVo,nVo,s4,whe,sVo,lVo,EV,iVo,dVo,cVo,l4,Ahe,fVo,mVo,CV,gVo,hVo,pVo,i4,uVo,yhe,_Vo,bVo,Lhe,vVo,FVo,d4,xqe,Ki,c4,xhe,Xy,TVo,$he,MVo,$qe,No,zy,EVo,Zi,CVo,wV,wVo,AVo,AV,yVo,LVo,xVo,Wy,$Vo,khe,kVo,SVo,RVo,mt,Qy,PVo,She,BVo,IVo,ed,NVo,Rhe,qVo,jVo,yV,DVo,GVo,OVo,f4,VVo,no,Hy,XVo,Phe,zVo,WVo,Na,QVo,Bhe,HVo,UVo,Ihe,JVo,YVo,Nhe,KVo,ZVo,eXo,V,m4,qhe,oXo,rXo,LV,tXo,aXo,nXo,g4,jhe,sXo,lXo,xV,iXo,dXo,cXo,h4,Dhe,fXo,mXo,$V,gXo,hXo,pXo,p4,Ghe,uXo,_Xo,kV,bXo,vXo,FXo,u4,Ohe,TXo,MXo,SV,EXo,CXo,wXo,_4,Vhe,AXo,yXo,RV,LXo,xXo,$Xo,b4,Xhe,kXo,SXo,PV,RXo,PXo,BXo,v4,zhe,IXo,NXo,BV,qXo,jXo,DXo,F4,Whe,GXo,OXo,IV,VXo,XXo,zXo,T4,Qhe,WXo,QXo,NV,HXo,UXo,JXo,M4,Hhe,YXo,KXo,qV,ZXo,ezo,ozo,E4,Uhe,rzo,tzo,jV,azo,nzo,szo,C4,Jhe,lzo,izo,DV,dzo,czo,fzo,w4,Yhe,mzo,gzo,GV,hzo,pzo,uzo,A4,Khe,_zo,bzo,OV,vzo,Fzo,Tzo,y4,Zhe,Mzo,Ezo,VV,Czo,wzo,Azo,L4,epe,yzo,Lzo,XV,xzo,$zo,kzo,x4,ope,Szo,Rzo,zV,Pzo,Bzo,Izo,$4,rpe,Nzo,qzo,WV,jzo,Dzo,Gzo,k4,tpe,Ozo,Vzo,QV,Xzo,zzo,Wzo,S4,ape,Qzo,Hzo,HV,Uzo,Jzo,Yzo,R4,npe,Kzo,Zzo,UV,eWo,oWo,rWo,P4,spe,tWo,aWo,JV,nWo,sWo,lWo,B4,lpe,iWo,dWo,YV,cWo,fWo,mWo,I4,ipe,gWo,hWo,KV,pWo,uWo,_Wo,N4,dpe,bWo,vWo,ZV,FWo,TWo,MWo,q4,cpe,EWo,CWo,eX,wWo,AWo,yWo,j4,fpe,LWo,xWo,oX,$Wo,kWo,SWo,D4,mpe,RWo,PWo,rX,BWo,IWo,NWo,G4,gpe,qWo,jWo,tX,DWo,GWo,OWo,O4,hpe,VWo,XWo,aX,zWo,WWo,QWo,V4,ppe,HWo,UWo,nX,JWo,YWo,KWo,X4,upe,ZWo,eQo,sX,oQo,rQo,tQo,z4,_pe,aQo,nQo,lX,sQo,lQo,iQo,W4,bpe,dQo,cQo,iX,fQo,mQo,gQo,Q4,vpe,hQo,pQo,dX,uQo,_Qo,bQo,H4,Fpe,vQo,FQo,cX,TQo,MQo,EQo,U4,Tpe,CQo,wQo,fX,AQo,yQo,LQo,J4,Mpe,xQo,$Qo,mX,kQo,SQo,RQo,Y4,Epe,PQo,BQo,gX,IQo,NQo,qQo,K4,jQo,Cpe,DQo,GQo,wpe,OQo,VQo,Z4,kqe,od,ev,Ape,Uy,XQo,ype,zQo,Sqe,qo,Jy,WQo,rd,QQo,hX,HQo,UQo,pX,JQo,YQo,KQo,Yy,ZQo,Lpe,eHo,oHo,rHo,gt,Ky,tHo,xpe,aHo,nHo,td,sHo,$pe,lHo,iHo,uX,dHo,cHo,fHo,ov,mHo,so,Zy,gHo,kpe,hHo,pHo,qa,uHo,Spe,_Ho,bHo,Rpe,vHo,FHo,Ppe,THo,MHo,EHo,Bpe,rv,Ipe,CHo,wHo,_X,AHo,yHo,LHo,tv,xHo,Npe,$Ho,kHo,qpe,SHo,RHo,av,Rqe,ad,nv,jpe,eL,PHo,Dpe,BHo,Pqe,jo,oL,IHo,nd,NHo,bX,qHo,jHo,vX,DHo,GHo,OHo,rL,VHo,Gpe,XHo,zHo,WHo,ht,tL,QHo,Ope,HHo,UHo,sd,JHo,Vpe,YHo,KHo,FX,ZHo,eUo,oUo,sv,rUo,lo,aL,tUo,Xpe,aUo,nUo,ja,sUo,zpe,lUo,iUo,Wpe,dUo,cUo,Qpe,fUo,mUo,gUo,Fe,lv,Hpe,hUo,pUo,TX,uUo,_Uo,bUo,iv,Upe,vUo,FUo,MX,TUo,MUo,EUo,dv,Jpe,CUo,wUo,EX,AUo,yUo,LUo,cv,Ype,xUo,$Uo,CX,kUo,SUo,RUo,Bs,Kpe,PUo,BUo,wX,IUo,NUo,AX,qUo,jUo,DUo,fv,Zpe,GUo,OUo,yX,VUo,XUo,zUo,pt,eue,WUo,QUo,LX,HUo,UUo,xX,JUo,YUo,$X,KUo,ZUo,eJo,mv,oue,oJo,rJo,kX,tJo,aJo,nJo,gv,rue,sJo,lJo,SX,iJo,dJo,cJo,hv,tue,fJo,mJo,RX,gJo,hJo,pJo,pv,aue,uJo,_Jo,PX,bJo,vJo,FJo,uv,nue,TJo,MJo,BX,EJo,CJo,wJo,_v,sue,AJo,yJo,IX,LJo,xJo,$Jo,bv,lue,kJo,SJo,NX,RJo,PJo,BJo,vv,IJo,iue,NJo,qJo,due,jJo,DJo,Fv,Bqe,ld,Tv,cue,nL,GJo,fue,OJo,Iqe,Do,sL,VJo,id,XJo,qX,zJo,WJo,jX,QJo,HJo,UJo,lL,JJo,mue,YJo,KJo,ZJo,ut,iL,eYo,gue,oYo,rYo,dd,tYo,hue,aYo,nYo,DX,sYo,lYo,iYo,Mv,dYo,io,dL,cYo,pue,fYo,mYo,Da,gYo,uue,hYo,pYo,_ue,uYo,_Yo,bue,bYo,vYo,FYo,vue,Ev,Fue,TYo,MYo,GX,EYo,CYo,wYo,Cv,AYo,Tue,yYo,LYo,Mue,xYo,$Yo,wv,Nqe,cd,Av,Eue,cL,kYo,Cue,SYo,qqe,Go,fL,RYo,fd,PYo,OX,BYo,IYo,VX,NYo,qYo,jYo,mL,DYo,wue,GYo,OYo,VYo,_t,gL,XYo,Aue,zYo,WYo,md,QYo,yue,HYo,UYo,XX,JYo,YYo,KYo,yv,ZYo,co,hL,eKo,Lue,oKo,rKo,Ga,tKo,xue,aKo,nKo,$ue,sKo,lKo,kue,iKo,dKo,cKo,ke,Lv,Sue,fKo,mKo,zX,gKo,hKo,pKo,xv,Rue,uKo,_Ko,WX,bKo,vKo,FKo,$v,Pue,TKo,MKo,QX,EKo,CKo,wKo,kv,Bue,AKo,yKo,HX,LKo,xKo,$Ko,Sv,Iue,kKo,SKo,UX,RKo,PKo,BKo,Rv,Nue,IKo,NKo,JX,qKo,jKo,DKo,Pv,que,GKo,OKo,YX,VKo,XKo,zKo,Bv,jue,WKo,QKo,KX,HKo,UKo,JKo,Iv,Due,YKo,KKo,ZX,ZKo,eZo,oZo,Nv,rZo,Gue,tZo,aZo,Oue,nZo,sZo,qv,jqe,gd,jv,Vue,pL,lZo,Xue,iZo,Dqe,Oo,uL,dZo,hd,cZo,ez,fZo,mZo,oz,gZo,hZo,pZo,_L,uZo,zue,_Zo,bZo,vZo,bt,bL,FZo,Wue,TZo,MZo,pd,EZo,Que,CZo,wZo,rz,AZo,yZo,LZo,Dv,xZo,fo,vL,$Zo,Hue,kZo,SZo,Oa,RZo,Uue,PZo,BZo,Jue,IZo,NZo,Yue,qZo,jZo,DZo,Kr,Gv,Kue,GZo,OZo,tz,VZo,XZo,zZo,Ov,Zue,WZo,QZo,az,HZo,UZo,JZo,Vv,e_e,YZo,KZo,nz,ZZo,eer,oer,Xv,o_e,rer,ter,sz,aer,ner,ser,zv,r_e,ler,ier,lz,der,cer,fer,Wv,mer,t_e,ger,her,a_e,per,uer,Qv,Gqe,ud,Hv,n_e,FL,_er,s_e,ber,Oqe,Vo,TL,ver,_d,Fer,iz,Ter,Mer,dz,Eer,Cer,wer,ML,Aer,l_e,yer,Ler,xer,vt,EL,$er,i_e,ker,Ser,bd,Rer,d_e,Per,Ber,cz,Ier,Ner,qer,Uv,jer,mo,CL,Der,c_e,Ger,Oer,Va,Ver,f_e,Xer,zer,m_e,Wer,Qer,g_e,Her,Uer,Jer,Se,Jv,h_e,Yer,Ker,fz,Zer,eor,oor,Yv,p_e,ror,tor,mz,aor,nor,sor,Kv,u_e,lor,ior,gz,dor,cor,mor,Zv,__e,gor,hor,hz,por,uor,_or,eF,b_e,bor,vor,pz,For,Tor,Mor,oF,v_e,Eor,Cor,uz,wor,Aor,yor,rF,F_e,Lor,xor,_z,$or,kor,Sor,tF,T_e,Ror,Por,bz,Bor,Ior,Nor,aF,M_e,qor,jor,vz,Dor,Gor,Oor,nF,Vor,E_e,Xor,zor,C_e,Wor,Qor,sF,Vqe,vd,lF,w_e,wL,Hor,A_e,Uor,Xqe,Xo,AL,Jor,Fd,Yor,Fz,Kor,Zor,Tz,err,orr,rrr,yL,trr,y_e,arr,nrr,srr,Ft,LL,lrr,L_e,irr,drr,Td,crr,x_e,frr,mrr,Mz,grr,hrr,prr,iF,urr,go,xL,_rr,$_e,brr,vrr,Xa,Frr,k_e,Trr,Mrr,S_e,Err,Crr,R_e,wrr,Arr,yrr,$L,dF,P_e,Lrr,xrr,Ez,$rr,krr,Srr,cF,B_e,Rrr,Prr,Cz,Brr,Irr,Nrr,fF,qrr,I_e,jrr,Drr,N_e,Grr,Orr,mF,zqe,Md,gF,q_e,kL,Vrr,j_e,Xrr,Wqe,zo,SL,zrr,Ed,Wrr,wz,Qrr,Hrr,Az,Urr,Jrr,Yrr,RL,Krr,D_e,Zrr,etr,otr,Tt,PL,rtr,G_e,ttr,atr,Cd,ntr,O_e,str,ltr,yz,itr,dtr,ctr,hF,ftr,ho,BL,mtr,V_e,gtr,htr,za,ptr,X_e,utr,_tr,z_e,btr,vtr,W_e,Ftr,Ttr,Mtr,Zr,pF,Q_e,Etr,Ctr,Lz,wtr,Atr,ytr,uF,H_e,Ltr,xtr,xz,$tr,ktr,Str,_F,U_e,Rtr,Ptr,$z,Btr,Itr,Ntr,bF,J_e,qtr,jtr,kz,Dtr,Gtr,Otr,vF,Y_e,Vtr,Xtr,Sz,ztr,Wtr,Qtr,FF,Htr,K_e,Utr,Jtr,Z_e,Ytr,Ktr,TF,Qqe,wd,MF,e1e,IL,Ztr,o1e,ear,Hqe,Wo,NL,oar,Ad,rar,Rz,tar,aar,Pz,nar,sar,lar,qL,iar,r1e,dar,car,far,Mt,jL,mar,t1e,gar,har,yd,par,a1e,uar,_ar,Bz,bar,Far,Tar,EF,Mar,po,DL,Ear,n1e,Car,war,Wa,Aar,s1e,yar,Lar,l1e,xar,$ar,i1e,kar,Sar,Rar,Ld,CF,d1e,Par,Bar,Iz,Iar,Nar,qar,wF,c1e,jar,Dar,Nz,Gar,Oar,Var,AF,f1e,Xar,zar,qz,War,Qar,Har,yF,Uar,m1e,Jar,Yar,g1e,Kar,Zar,LF,Uqe,xd,xF,h1e,GL,enr,p1e,onr,Jqe,Qo,OL,rnr,$d,tnr,jz,anr,nnr,Dz,snr,lnr,inr,VL,dnr,u1e,cnr,fnr,mnr,Et,XL,gnr,_1e,hnr,pnr,kd,unr,b1e,_nr,bnr,Gz,vnr,Fnr,Tnr,$F,Mnr,uo,zL,Enr,v1e,Cnr,wnr,Qa,Anr,F1e,ynr,Lnr,T1e,xnr,$nr,M1e,knr,Snr,Rnr,WL,kF,E1e,Pnr,Bnr,Oz,Inr,Nnr,qnr,SF,C1e,jnr,Dnr,Vz,Gnr,Onr,Vnr,RF,Xnr,w1e,znr,Wnr,A1e,Qnr,Hnr,PF,Yqe,Sd,BF,y1e,QL,Unr,L1e,Jnr,Kqe,Ho,HL,Ynr,Rd,Knr,Xz,Znr,esr,zz,osr,rsr,tsr,UL,asr,x1e,nsr,ssr,lsr,Ct,JL,isr,$1e,dsr,csr,Pd,fsr,k1e,msr,gsr,Wz,hsr,psr,usr,IF,_sr,_o,YL,bsr,S1e,vsr,Fsr,Ha,Tsr,R1e,Msr,Esr,P1e,Csr,wsr,B1e,Asr,ysr,Lsr,I1e,NF,N1e,xsr,$sr,Qz,ksr,Ssr,Rsr,qF,Psr,q1e,Bsr,Isr,j1e,Nsr,qsr,jF,Zqe,Bd,DF,D1e,KL,jsr,G1e,Dsr,eje,Uo,ZL,Gsr,Id,Osr,Hz,Vsr,Xsr,Uz,zsr,Wsr,Qsr,e8,Hsr,O1e,Usr,Jsr,Ysr,wt,o8,Ksr,V1e,Zsr,elr,Nd,olr,X1e,rlr,tlr,Jz,alr,nlr,slr,GF,llr,bo,r8,ilr,z1e,dlr,clr,Ua,flr,W1e,mlr,glr,Q1e,hlr,plr,H1e,ulr,_lr,blr,Ja,OF,U1e,vlr,Flr,Yz,Tlr,Mlr,Elr,VF,J1e,Clr,wlr,Kz,Alr,ylr,Llr,XF,Y1e,xlr,$lr,Zz,klr,Slr,Rlr,zF,K1e,Plr,Blr,eW,Ilr,Nlr,qlr,WF,jlr,Z1e,Dlr,Glr,e7e,Olr,Vlr,QF,oje,qd,HF,o7e,t8,Xlr,r7e,zlr,rje,Jo,a8,Wlr,jd,Qlr,oW,Hlr,Ulr,rW,Jlr,Ylr,Klr,n8,Zlr,t7e,eir,oir,rir,At,s8,tir,a7e,air,nir,Dd,sir,n7e,lir,iir,tW,dir,cir,fir,UF,mir,vo,l8,gir,s7e,hir,pir,Ya,uir,l7e,_ir,bir,i7e,vir,Fir,d7e,Tir,Mir,Eir,c7e,JF,f7e,Cir,wir,aW,Air,yir,Lir,YF,xir,m7e,$ir,kir,g7e,Sir,Rir,KF,tje,Gd,ZF,h7e,i8,Pir,p7e,Bir,aje,Yo,d8,Iir,Od,Nir,nW,qir,jir,sW,Dir,Gir,Oir,c8,Vir,u7e,Xir,zir,Wir,yt,f8,Qir,_7e,Hir,Uir,Vd,Jir,b7e,Yir,Kir,lW,Zir,edr,odr,e0,rdr,wr,m8,tdr,v7e,adr,ndr,Ka,sdr,F7e,ldr,idr,T7e,ddr,cdr,M7e,fdr,mdr,gdr,q,o0,E7e,hdr,pdr,iW,udr,_dr,bdr,r0,C7e,vdr,Fdr,dW,Tdr,Mdr,Edr,t0,w7e,Cdr,wdr,cW,Adr,ydr,Ldr,a0,A7e,xdr,$dr,fW,kdr,Sdr,Rdr,n0,y7e,Pdr,Bdr,mW,Idr,Ndr,qdr,s0,L7e,jdr,Ddr,gW,Gdr,Odr,Vdr,l0,x7e,Xdr,zdr,hW,Wdr,Qdr,Hdr,i0,$7e,Udr,Jdr,pW,Ydr,Kdr,Zdr,d0,k7e,ecr,ocr,uW,rcr,tcr,acr,c0,S7e,ncr,scr,_W,lcr,icr,dcr,f0,R7e,ccr,fcr,bW,mcr,gcr,hcr,m0,P7e,pcr,ucr,vW,_cr,bcr,vcr,g0,B7e,Fcr,Tcr,FW,Mcr,Ecr,Ccr,h0,I7e,wcr,Acr,TW,ycr,Lcr,xcr,p0,N7e,$cr,kcr,MW,Scr,Rcr,Pcr,u0,q7e,Bcr,Icr,EW,Ncr,qcr,jcr,_0,j7e,Dcr,Gcr,CW,Ocr,Vcr,Xcr,Is,D7e,zcr,Wcr,wW,Qcr,Hcr,AW,Ucr,Jcr,Ycr,b0,G7e,Kcr,Zcr,yW,efr,ofr,rfr,v0,O7e,tfr,afr,LW,nfr,sfr,lfr,F0,V7e,ifr,dfr,xW,cfr,ffr,mfr,T0,X7e,gfr,hfr,$W,pfr,ufr,_fr,M0,z7e,bfr,vfr,kW,Ffr,Tfr,Mfr,E0,W7e,Efr,Cfr,SW,wfr,Afr,yfr,C0,Q7e,Lfr,xfr,RW,$fr,kfr,Sfr,w0,H7e,Rfr,Pfr,PW,Bfr,Ifr,Nfr,A0,U7e,qfr,jfr,BW,Dfr,Gfr,Ofr,y0,J7e,Vfr,Xfr,IW,zfr,Wfr,Qfr,L0,Y7e,Hfr,Ufr,NW,Jfr,Yfr,Kfr,x0,K7e,Zfr,emr,qW,omr,rmr,tmr,$0,Z7e,amr,nmr,jW,smr,lmr,imr,k0,ebe,dmr,cmr,DW,fmr,mmr,gmr,S0,obe,hmr,pmr,GW,umr,_mr,bmr,R0,rbe,vmr,Fmr,OW,Tmr,Mmr,Emr,P0,tbe,Cmr,wmr,VW,Amr,ymr,Lmr,B0,abe,xmr,$mr,XW,kmr,Smr,Rmr,I0,nbe,Pmr,Bmr,zW,Imr,Nmr,qmr,N0,sbe,jmr,Dmr,WW,Gmr,Omr,Vmr,q0,lbe,Xmr,zmr,QW,Wmr,Qmr,Hmr,j0,ibe,Umr,Jmr,HW,Ymr,Kmr,Zmr,D0,dbe,egr,ogr,UW,rgr,tgr,agr,G0,cbe,ngr,sgr,JW,lgr,igr,dgr,O0,fbe,cgr,fgr,YW,mgr,ggr,hgr,V0,mbe,pgr,ugr,KW,_gr,bgr,vgr,X0,gbe,Fgr,Tgr,ZW,Mgr,Egr,Cgr,z0,hbe,wgr,Agr,eQ,ygr,Lgr,xgr,W0,nje,Xd,Q0,pbe,g8,$gr,ube,kgr,sje,Ko,h8,Sgr,zd,Rgr,oQ,Pgr,Bgr,rQ,Igr,Ngr,qgr,p8,jgr,_be,Dgr,Ggr,Ogr,Lt,u8,Vgr,bbe,Xgr,zgr,Wd,Wgr,vbe,Qgr,Hgr,tQ,Ugr,Jgr,Ygr,H0,Kgr,Ar,_8,Zgr,Fbe,ehr,ohr,Za,rhr,Tbe,thr,ahr,Mbe,nhr,shr,Ebe,lhr,ihr,dhr,se,U0,Cbe,chr,fhr,aQ,mhr,ghr,hhr,J0,wbe,phr,uhr,nQ,_hr,bhr,vhr,Y0,Abe,Fhr,Thr,sQ,Mhr,Ehr,Chr,K0,ybe,whr,Ahr,lQ,yhr,Lhr,xhr,Z0,Lbe,$hr,khr,iQ,Shr,Rhr,Phr,eT,xbe,Bhr,Ihr,dQ,Nhr,qhr,jhr,oT,$be,Dhr,Ghr,cQ,Ohr,Vhr,Xhr,rT,kbe,zhr,Whr,fQ,Qhr,Hhr,Uhr,tT,Sbe,Jhr,Yhr,mQ,Khr,Zhr,epr,aT,Rbe,opr,rpr,gQ,tpr,apr,npr,nT,Pbe,spr,lpr,hQ,ipr,dpr,cpr,sT,Bbe,fpr,mpr,pQ,gpr,hpr,ppr,lT,Ibe,upr,_pr,uQ,bpr,vpr,Fpr,iT,Nbe,Tpr,Mpr,_Q,Epr,Cpr,wpr,dT,qbe,Apr,ypr,bQ,Lpr,xpr,$pr,cT,jbe,kpr,Spr,vQ,Rpr,Ppr,Bpr,fT,Dbe,Ipr,Npr,FQ,qpr,jpr,Dpr,mT,Gbe,Gpr,Opr,TQ,Vpr,Xpr,zpr,gT,Obe,Wpr,Qpr,MQ,Hpr,Upr,Jpr,hT,Vbe,Ypr,Kpr,EQ,Zpr,eur,our,pT,Xbe,rur,tur,CQ,aur,nur,sur,uT,zbe,lur,iur,wQ,dur,cur,fur,_T,Wbe,mur,gur,AQ,hur,pur,uur,bT,lje,Qd,vT,Qbe,b8,_ur,Hbe,bur,ije,Zo,v8,vur,Hd,Fur,yQ,Tur,Mur,LQ,Eur,Cur,wur,F8,Aur,Ube,yur,Lur,xur,xt,T8,$ur,Jbe,kur,Sur,Ud,Rur,Ybe,Pur,Bur,xQ,Iur,Nur,qur,FT,jur,yr,M8,Dur,Kbe,Gur,Our,en,Vur,Zbe,Xur,zur,e2e,Wur,Qur,o2e,Hur,Uur,Jur,Me,TT,r2e,Yur,Kur,$Q,Zur,e_r,o_r,MT,t2e,r_r,t_r,kQ,a_r,n_r,s_r,ET,a2e,l_r,i_r,SQ,d_r,c_r,f_r,CT,n2e,m_r,g_r,RQ,h_r,p_r,u_r,wT,s2e,__r,b_r,PQ,v_r,F_r,T_r,AT,l2e,M_r,E_r,BQ,C_r,w_r,A_r,yT,i2e,y_r,L_r,IQ,x_r,$_r,k_r,LT,d2e,S_r,R_r,NQ,P_r,B_r,I_r,xT,c2e,N_r,q_r,qQ,j_r,D_r,G_r,$T,f2e,O_r,V_r,jQ,X_r,z_r,W_r,kT,m2e,Q_r,H_r,DQ,U_r,J_r,Y_r,ST,g2e,K_r,Z_r,GQ,e1r,o1r,r1r,RT,dje,Jd,PT,h2e,E8,t1r,p2e,a1r,cje,er,C8,n1r,Yd,s1r,OQ,l1r,i1r,VQ,d1r,c1r,f1r,w8,m1r,u2e,g1r,h1r,p1r,$t,A8,u1r,_2e,_1r,b1r,Kd,v1r,b2e,F1r,T1r,XQ,M1r,E1r,C1r,BT,w1r,Lr,y8,A1r,v2e,y1r,L1r,on,x1r,F2e,$1r,k1r,T2e,S1r,R1r,M2e,P1r,B1r,I1r,rn,IT,E2e,N1r,q1r,zQ,j1r,D1r,G1r,NT,C2e,O1r,V1r,WQ,X1r,z1r,W1r,qT,w2e,Q1r,H1r,QQ,U1r,J1r,Y1r,jT,A2e,K1r,Z1r,HQ,e7r,o7r,r7r,DT,fje,Zd,GT,y2e,L8,t7r,L2e,a7r,mje,or,x8,n7r,ec,s7r,UQ,l7r,i7r,JQ,d7r,c7r,f7r,$8,m7r,x2e,g7r,h7r,p7r,kt,k8,u7r,$2e,_7r,b7r,oc,v7r,k2e,F7r,T7r,YQ,M7r,E7r,C7r,OT,w7r,xr,S8,A7r,S2e,y7r,L7r,tn,x7r,R2e,$7r,k7r,P2e,S7r,R7r,B2e,P7r,B7r,I7r,ie,VT,I2e,N7r,q7r,KQ,j7r,D7r,G7r,XT,N2e,O7r,V7r,ZQ,X7r,z7r,W7r,zT,q2e,Q7r,H7r,eH,U7r,J7r,Y7r,WT,j2e,K7r,Z7r,oH,ebr,obr,rbr,QT,D2e,tbr,abr,rH,nbr,sbr,lbr,HT,G2e,ibr,dbr,tH,cbr,fbr,mbr,UT,O2e,gbr,hbr,aH,pbr,ubr,_br,JT,V2e,bbr,vbr,nH,Fbr,Tbr,Mbr,YT,X2e,Ebr,Cbr,sH,wbr,Abr,ybr,KT,z2e,Lbr,xbr,lH,$br,kbr,Sbr,ZT,W2e,Rbr,Pbr,iH,Bbr,Ibr,Nbr,eM,Q2e,qbr,jbr,dH,Dbr,Gbr,Obr,oM,H2e,Vbr,Xbr,cH,zbr,Wbr,Qbr,rM,U2e,Hbr,Ubr,fH,Jbr,Ybr,Kbr,tM,J2e,Zbr,e2r,mH,o2r,r2r,t2r,aM,Y2e,a2r,n2r,gH,s2r,l2r,i2r,nM,K2e,d2r,c2r,hH,f2r,m2r,g2r,sM,Z2e,h2r,p2r,pH,u2r,_2r,b2r,lM,e4e,v2r,F2r,uH,T2r,M2r,E2r,iM,o4e,C2r,w2r,_H,A2r,y2r,L2r,dM,gje,rc,cM,r4e,R8,x2r,t4e,$2r,hje,rr,P8,k2r,tc,S2r,bH,R2r,P2r,vH,B2r,I2r,N2r,B8,q2r,a4e,j2r,D2r,G2r,St,I8,O2r,n4e,V2r,X2r,ac,z2r,s4e,W2r,Q2r,FH,H2r,U2r,J2r,fM,Y2r,$r,N8,K2r,l4e,Z2r,e4r,an,o4r,i4e,r4r,t4r,d4e,a4r,n4r,c4e,s4r,l4r,i4r,ye,mM,f4e,d4r,c4r,TH,f4r,m4r,g4r,gM,m4e,h4r,p4r,MH,u4r,_4r,b4r,hM,g4e,v4r,F4r,EH,T4r,M4r,E4r,pM,h4e,C4r,w4r,CH,A4r,y4r,L4r,uM,p4e,x4r,$4r,wH,k4r,S4r,R4r,_M,u4e,P4r,B4r,AH,I4r,N4r,q4r,bM,_4e,j4r,D4r,yH,G4r,O4r,V4r,vM,b4e,X4r,z4r,LH,W4r,Q4r,H4r,FM,v4e,U4r,J4r,xH,Y4r,K4r,Z4r,TM,F4e,evr,ovr,$H,rvr,tvr,avr,MM,pje,nc,EM,T4e,q8,nvr,M4e,svr,uje,tr,j8,lvr,sc,ivr,kH,dvr,cvr,SH,fvr,mvr,gvr,D8,hvr,E4e,pvr,uvr,_vr,Rt,G8,bvr,C4e,vvr,Fvr,lc,Tvr,w4e,Mvr,Evr,RH,Cvr,wvr,Avr,CM,yvr,kr,O8,Lvr,A4e,xvr,$vr,nn,kvr,y4e,Svr,Rvr,L4e,Pvr,Bvr,x4e,Ivr,Nvr,qvr,oe,wM,$4e,jvr,Dvr,PH,Gvr,Ovr,Vvr,AM,k4e,Xvr,zvr,BH,Wvr,Qvr,Hvr,yM,S4e,Uvr,Jvr,IH,Yvr,Kvr,Zvr,LM,R4e,eFr,oFr,NH,rFr,tFr,aFr,xM,P4e,nFr,sFr,qH,lFr,iFr,dFr,$M,B4e,cFr,fFr,jH,mFr,gFr,hFr,kM,I4e,pFr,uFr,DH,_Fr,bFr,vFr,SM,N4e,FFr,TFr,GH,MFr,EFr,CFr,RM,q4e,wFr,AFr,OH,yFr,LFr,xFr,PM,j4e,$Fr,kFr,VH,SFr,RFr,PFr,BM,D4e,BFr,IFr,XH,NFr,qFr,jFr,IM,G4e,DFr,GFr,zH,OFr,VFr,XFr,NM,O4e,zFr,WFr,WH,QFr,HFr,UFr,qM,V4e,JFr,YFr,QH,KFr,ZFr,e0r,jM,X4e,o0r,r0r,HH,t0r,a0r,n0r,DM,z4e,s0r,l0r,UH,i0r,d0r,c0r,GM,W4e,f0r,m0r,JH,g0r,h0r,p0r,OM,Q4e,u0r,_0r,YH,b0r,v0r,F0r,VM,H4e,T0r,M0r,KH,E0r,C0r,w0r,XM,U4e,A0r,y0r,ZH,L0r,x0r,$0r,zM,J4e,k0r,S0r,eU,R0r,P0r,B0r,WM,Y4e,I0r,N0r,oU,q0r,j0r,D0r,QM,K4e,G0r,O0r,rU,V0r,X0r,z0r,HM,Z4e,W0r,Q0r,tU,H0r,U0r,J0r,UM,eve,Y0r,K0r,aU,Z0r,eTr,oTr,JM,ove,rTr,tTr,nU,aTr,nTr,sTr,YM,_je,ic,KM,rve,V8,lTr,tve,iTr,bje,ar,X8,dTr,dc,cTr,sU,fTr,mTr,lU,gTr,hTr,pTr,z8,uTr,ave,_Tr,bTr,vTr,Pt,W8,FTr,nve,TTr,MTr,cc,ETr,sve,CTr,wTr,iU,ATr,yTr,LTr,ZM,xTr,Sr,Q8,$Tr,lve,kTr,STr,sn,RTr,ive,PTr,BTr,dve,ITr,NTr,cve,qTr,jTr,DTr,pe,eE,fve,GTr,OTr,dU,VTr,XTr,zTr,oE,mve,WTr,QTr,cU,HTr,UTr,JTr,rE,gve,YTr,KTr,fU,ZTr,eMr,oMr,tE,hve,rMr,tMr,mU,aMr,nMr,sMr,aE,pve,lMr,iMr,gU,dMr,cMr,fMr,nE,uve,mMr,gMr,hU,hMr,pMr,uMr,sE,_ve,_Mr,bMr,pU,vMr,FMr,TMr,lE,bve,MMr,EMr,uU,CMr,wMr,AMr,iE,vve,yMr,LMr,_U,xMr,$Mr,kMr,dE,Fve,SMr,RMr,bU,PMr,BMr,IMr,cE,Tve,NMr,qMr,vU,jMr,DMr,GMr,fE,Mve,OMr,VMr,FU,XMr,zMr,WMr,mE,Eve,QMr,HMr,TU,UMr,JMr,YMr,gE,Cve,KMr,ZMr,MU,eEr,oEr,rEr,hE,wve,tEr,aEr,EU,nEr,sEr,lEr,pE,Ave,iEr,dEr,CU,cEr,fEr,mEr,uE,yve,gEr,hEr,wU,pEr,uEr,_Er,_E,vje,fc,bE,Lve,H8,bEr,xve,vEr,Fje,nr,U8,FEr,mc,TEr,AU,MEr,EEr,yU,CEr,wEr,AEr,J8,yEr,$ve,LEr,xEr,$Er,Bt,Y8,kEr,kve,SEr,REr,gc,PEr,Sve,BEr,IEr,LU,NEr,qEr,jEr,vE,DEr,Rr,K8,GEr,Rve,OEr,VEr,ln,XEr,Pve,zEr,WEr,Bve,QEr,HEr,Ive,UEr,JEr,YEr,Z8,FE,Nve,KEr,ZEr,xU,eCr,oCr,rCr,TE,qve,tCr,aCr,$U,nCr,sCr,lCr,ME,Tje,hc,EE,jve,e9,iCr,Dve,dCr,Mje,sr,o9,cCr,pc,fCr,kU,mCr,gCr,SU,hCr,pCr,uCr,r9,_Cr,Gve,bCr,vCr,FCr,It,t9,TCr,Ove,MCr,ECr,uc,CCr,Vve,wCr,ACr,RU,yCr,LCr,xCr,CE,$Cr,Pr,a9,kCr,Xve,SCr,RCr,dn,PCr,zve,BCr,ICr,Wve,NCr,qCr,Qve,jCr,DCr,GCr,Hve,wE,Uve,OCr,VCr,PU,XCr,zCr,WCr,AE,Eje,_c,yE,Jve,n9,QCr,Yve,HCr,Cje,lr,s9,UCr,bc,JCr,BU,YCr,KCr,IU,ZCr,e5r,o5r,l9,r5r,Kve,t5r,a5r,n5r,Nt,i9,s5r,Zve,l5r,i5r,vc,d5r,eFe,c5r,f5r,NU,m5r,g5r,h5r,LE,p5r,Br,d9,u5r,oFe,_5r,b5r,cn,v5r,rFe,F5r,T5r,tFe,M5r,E5r,aFe,C5r,w5r,A5r,de,xE,nFe,y5r,L5r,qU,x5r,$5r,k5r,$E,sFe,S5r,R5r,jU,P5r,B5r,I5r,kE,lFe,N5r,q5r,DU,j5r,D5r,G5r,SE,iFe,O5r,V5r,GU,X5r,z5r,W5r,RE,dFe,Q5r,H5r,OU,U5r,J5r,Y5r,PE,cFe,K5r,Z5r,VU,e3r,o3r,r3r,BE,fFe,t3r,a3r,XU,n3r,s3r,l3r,IE,mFe,i3r,d3r,zU,c3r,f3r,m3r,NE,gFe,g3r,h3r,WU,p3r,u3r,_3r,qE,hFe,b3r,v3r,QU,F3r,T3r,M3r,jE,pFe,E3r,C3r,HU,w3r,A3r,y3r,DE,uFe,L3r,x3r,UU,$3r,k3r,S3r,GE,_Fe,R3r,P3r,JU,B3r,I3r,N3r,OE,bFe,q3r,j3r,YU,D3r,G3r,O3r,VE,vFe,V3r,X3r,KU,z3r,W3r,Q3r,XE,FFe,H3r,U3r,ZU,J3r,Y3r,K3r,zE,TFe,Z3r,ewr,eJ,owr,rwr,twr,WE,MFe,awr,nwr,oJ,swr,lwr,iwr,QE,EFe,dwr,cwr,rJ,fwr,mwr,gwr,HE,CFe,hwr,pwr,tJ,uwr,_wr,bwr,UE,wje,Fc,JE,wFe,c9,vwr,AFe,Fwr,Aje,ir,f9,Twr,Tc,Mwr,aJ,Ewr,Cwr,nJ,wwr,Awr,ywr,m9,Lwr,yFe,xwr,$wr,kwr,qt,g9,Swr,LFe,Rwr,Pwr,Mc,Bwr,xFe,Iwr,Nwr,sJ,qwr,jwr,Dwr,YE,Gwr,Ir,h9,Owr,$Fe,Vwr,Xwr,fn,zwr,kFe,Wwr,Qwr,SFe,Hwr,Uwr,RFe,Jwr,Ywr,Kwr,ce,KE,PFe,Zwr,e6r,lJ,o6r,r6r,t6r,ZE,BFe,a6r,n6r,iJ,s6r,l6r,i6r,eC,IFe,d6r,c6r,dJ,f6r,m6r,g6r,oC,NFe,h6r,p6r,cJ,u6r,_6r,b6r,rC,qFe,v6r,F6r,fJ,T6r,M6r,E6r,tC,jFe,C6r,w6r,mJ,A6r,y6r,L6r,aC,DFe,x6r,$6r,gJ,k6r,S6r,R6r,nC,GFe,P6r,B6r,hJ,I6r,N6r,q6r,sC,OFe,j6r,D6r,pJ,G6r,O6r,V6r,lC,VFe,X6r,z6r,uJ,W6r,Q6r,H6r,iC,XFe,U6r,J6r,_J,Y6r,K6r,Z6r,dC,zFe,eAr,oAr,bJ,rAr,tAr,aAr,cC,WFe,nAr,sAr,vJ,lAr,iAr,dAr,fC,QFe,cAr,fAr,FJ,mAr,gAr,hAr,mC,HFe,pAr,uAr,TJ,_Ar,bAr,vAr,gC,UFe,FAr,TAr,MJ,MAr,EAr,CAr,hC,JFe,wAr,AAr,EJ,yAr,LAr,xAr,pC,YFe,$Ar,kAr,CJ,SAr,RAr,PAr,uC,KFe,BAr,IAr,wJ,NAr,qAr,jAr,_C,ZFe,DAr,GAr,AJ,OAr,VAr,XAr,bC,yje,Ec,vC,e0e,p9,zAr,o0e,WAr,Lje,dr,u9,QAr,Cc,HAr,yJ,UAr,JAr,LJ,YAr,KAr,ZAr,_9,eyr,r0e,oyr,ryr,tyr,jt,b9,ayr,t0e,nyr,syr,wc,lyr,a0e,iyr,dyr,xJ,cyr,fyr,myr,FC,gyr,Nr,v9,hyr,n0e,pyr,uyr,mn,_yr,s0e,byr,vyr,l0e,Fyr,Tyr,i0e,Myr,Eyr,Cyr,d0e,TC,c0e,wyr,Ayr,$J,yyr,Lyr,xyr,MC,xje,Ac,EC,f0e,F9,$yr,m0e,kyr,$je,cr,T9,Syr,yc,Ryr,kJ,Pyr,Byr,SJ,Iyr,Nyr,qyr,M9,jyr,g0e,Dyr,Gyr,Oyr,Dt,E9,Vyr,h0e,Xyr,zyr,Lc,Wyr,p0e,Qyr,Hyr,RJ,Uyr,Jyr,Yyr,CC,Kyr,qr,C9,Zyr,u0e,eLr,oLr,gn,rLr,_0e,tLr,aLr,b0e,nLr,sLr,v0e,lLr,iLr,dLr,F0e,wC,T0e,cLr,fLr,PJ,mLr,gLr,hLr,AC,kje,xc,yC,M0e,w9,pLr,E0e,uLr,Sje,fr,A9,_Lr,$c,bLr,BJ,vLr,FLr,IJ,TLr,MLr,ELr,y9,CLr,C0e,wLr,ALr,yLr,Gt,L9,LLr,w0e,xLr,$Lr,kc,kLr,A0e,SLr,RLr,NJ,PLr,BLr,ILr,LC,NLr,jr,x9,qLr,y0e,jLr,DLr,hn,GLr,L0e,OLr,VLr,x0e,XLr,zLr,$0e,WLr,QLr,HLr,te,xC,k0e,ULr,JLr,qJ,YLr,KLr,ZLr,$C,S0e,e8r,o8r,jJ,r8r,t8r,a8r,kC,R0e,n8r,s8r,DJ,l8r,i8r,d8r,SC,P0e,c8r,f8r,GJ,m8r,g8r,h8r,RC,B0e,p8r,u8r,OJ,_8r,b8r,v8r,PC,I0e,F8r,T8r,VJ,M8r,E8r,C8r,BC,N0e,w8r,A8r,XJ,y8r,L8r,x8r,IC,q0e,$8r,k8r,zJ,S8r,R8r,P8r,NC,j0e,B8r,I8r,WJ,N8r,q8r,j8r,qC,D0e,D8r,G8r,QJ,O8r,V8r,X8r,jC,G0e,z8r,W8r,HJ,Q8r,H8r,U8r,DC,O0e,J8r,Y8r,UJ,K8r,Z8r,e9r,GC,V0e,o9r,r9r,JJ,t9r,a9r,n9r,OC,X0e,s9r,l9r,YJ,i9r,d9r,c9r,VC,z0e,f9r,m9r,KJ,g9r,h9r,p9r,XC,W0e,u9r,_9r,ZJ,b9r,v9r,F9r,zC,Q0e,T9r,M9r,eY,E9r,C9r,w9r,WC,H0e,A9r,y9r,oY,L9r,x9r,$9r,QC,U0e,k9r,S9r,rY,R9r,P9r,B9r,HC,J0e,I9r,N9r,tY,q9r,j9r,D9r,UC,Y0e,G9r,O9r,aY,V9r,X9r,z9r,JC,K0e,W9r,Q9r,nY,H9r,U9r,J9r,YC,Z0e,Y9r,K9r,sY,Z9r,exr,oxr,KC,eTe,rxr,txr,lY,axr,nxr,sxr,ZC,oTe,lxr,ixr,iY,dxr,cxr,fxr,e5,Rje,Sc,o5,rTe,$9,mxr,tTe,gxr,Pje,mr,k9,hxr,Rc,pxr,dY,uxr,_xr,cY,bxr,vxr,Fxr,S9,Txr,aTe,Mxr,Exr,Cxr,Ot,R9,wxr,nTe,Axr,yxr,Pc,Lxr,sTe,xxr,$xr,fY,kxr,Sxr,Rxr,r5,Pxr,Dr,P9,Bxr,lTe,Ixr,Nxr,pn,qxr,iTe,jxr,Dxr,dTe,Gxr,Oxr,cTe,Vxr,Xxr,zxr,Re,t5,fTe,Wxr,Qxr,mY,Hxr,Uxr,Jxr,a5,mTe,Yxr,Kxr,gY,Zxr,e$r,o$r,n5,gTe,r$r,t$r,hY,a$r,n$r,s$r,s5,hTe,l$r,i$r,pY,d$r,c$r,f$r,l5,pTe,m$r,g$r,uY,h$r,p$r,u$r,i5,uTe,_$r,b$r,_Y,v$r,F$r,T$r,d5,_Te,M$r,E$r,bY,C$r,w$r,A$r,c5,bTe,y$r,L$r,vY,x$r,$$r,k$r,f5,vTe,S$r,R$r,FY,P$r,B$r,I$r,m5,Bje,Bc,g5,FTe,B9,N$r,TTe,q$r,Ije,gr,I9,j$r,Ic,D$r,TY,G$r,O$r,MY,V$r,X$r,z$r,N9,W$r,MTe,Q$r,H$r,U$r,Vt,q9,J$r,ETe,Y$r,K$r,Nc,Z$r,CTe,ekr,okr,EY,rkr,tkr,akr,h5,nkr,Gr,j9,skr,wTe,lkr,ikr,un,dkr,ATe,ckr,fkr,yTe,mkr,gkr,LTe,hkr,pkr,ukr,Ee,p5,xTe,_kr,bkr,CY,vkr,Fkr,Tkr,u5,$Te,Mkr,Ekr,wY,Ckr,wkr,Akr,_5,kTe,ykr,Lkr,AY,xkr,$kr,kkr,b5,STe,Skr,Rkr,yY,Pkr,Bkr,Ikr,v5,RTe,Nkr,qkr,LY,jkr,Dkr,Gkr,F5,PTe,Okr,Vkr,xY,Xkr,zkr,Wkr,T5,BTe,Qkr,Hkr,$Y,Ukr,Jkr,Ykr,M5,ITe,Kkr,Zkr,kY,eSr,oSr,rSr,E5,NTe,tSr,aSr,SY,nSr,sSr,lSr,C5,qTe,iSr,dSr,RY,cSr,fSr,mSr,w5,jTe,gSr,hSr,PY,pSr,uSr,_Sr,A5,DTe,bSr,vSr,BY,FSr,TSr,MSr,y5,Nje,qc,L5,GTe,D9,ESr,OTe,CSr,qje,hr,G9,wSr,jc,ASr,IY,ySr,LSr,NY,xSr,$Sr,kSr,O9,SSr,VTe,RSr,PSr,BSr,Xt,V9,ISr,XTe,NSr,qSr,Dc,jSr,zTe,DSr,GSr,qY,OSr,VSr,XSr,x5,zSr,Or,X9,WSr,WTe,QSr,HSr,_n,USr,QTe,JSr,YSr,HTe,KSr,ZSr,UTe,eRr,oRr,rRr,Le,$5,JTe,tRr,aRr,jY,nRr,sRr,lRr,k5,YTe,iRr,dRr,DY,cRr,fRr,mRr,S5,KTe,gRr,hRr,GY,pRr,uRr,_Rr,R5,ZTe,bRr,vRr,OY,FRr,TRr,MRr,P5,eMe,ERr,CRr,VY,wRr,ARr,yRr,B5,oMe,LRr,xRr,XY,$Rr,kRr,SRr,I5,rMe,RRr,PRr,zY,BRr,IRr,NRr,N5,tMe,qRr,jRr,WY,DRr,GRr,ORr,q5,aMe,VRr,XRr,QY,zRr,WRr,QRr,j5,nMe,HRr,URr,HY,JRr,YRr,KRr,D5,jje,Gc,G5,sMe,z9,ZRr,lMe,ePr,Dje,pr,W9,oPr,Oc,rPr,UY,tPr,aPr,JY,nPr,sPr,lPr,Q9,iPr,iMe,dPr,cPr,fPr,zt,H9,mPr,dMe,gPr,hPr,Vc,pPr,cMe,uPr,_Pr,YY,bPr,vPr,FPr,O5,TPr,Vr,U9,MPr,fMe,EPr,CPr,bn,wPr,mMe,APr,yPr,gMe,LPr,xPr,hMe,$Pr,kPr,SPr,Pe,V5,pMe,RPr,PPr,KY,BPr,IPr,NPr,X5,uMe,qPr,jPr,ZY,DPr,GPr,OPr,z5,_Me,VPr,XPr,eK,zPr,WPr,QPr,W5,bMe,HPr,UPr,oK,JPr,YPr,KPr,Q5,vMe,ZPr,eBr,rK,oBr,rBr,tBr,H5,FMe,aBr,nBr,tK,sBr,lBr,iBr,U5,TMe,dBr,cBr,aK,fBr,mBr,gBr,J5,MMe,hBr,pBr,nK,uBr,_Br,bBr,Y5,EMe,vBr,FBr,sK,TBr,MBr,EBr,K5,Gje,Xc,Z5,CMe,J9,CBr,wMe,wBr,Oje,ur,Y9,ABr,zc,yBr,lK,LBr,xBr,iK,$Br,kBr,SBr,K9,RBr,AMe,PBr,BBr,IBr,Wt,Z9,NBr,yMe,qBr,jBr,Wc,DBr,LMe,GBr,OBr,dK,VBr,XBr,zBr,e3,WBr,Xr,ex,QBr,xMe,HBr,UBr,vn,JBr,$Me,YBr,KBr,kMe,ZBr,eIr,SMe,oIr,rIr,tIr,xe,o3,RMe,aIr,nIr,cK,sIr,lIr,iIr,r3,PMe,dIr,cIr,fK,fIr,mIr,gIr,t3,BMe,hIr,pIr,mK,uIr,_Ir,bIr,a3,IMe,vIr,FIr,gK,TIr,MIr,EIr,n3,NMe,CIr,wIr,hK,AIr,yIr,LIr,s3,qMe,xIr,$Ir,pK,kIr,SIr,RIr,l3,jMe,PIr,BIr,uK,IIr,NIr,qIr,i3,DMe,jIr,DIr,_K,GIr,OIr,VIr,d3,GMe,XIr,zIr,bK,WIr,QIr,HIr,c3,OMe,UIr,JIr,vK,YIr,KIr,ZIr,f3,Vje,Qc,m3,VMe,ox,eNr,XMe,oNr,Xje,_r,rx,rNr,Hc,tNr,FK,aNr,nNr,TK,sNr,lNr,iNr,tx,dNr,zMe,cNr,fNr,mNr,Qt,ax,gNr,WMe,hNr,pNr,Uc,uNr,QMe,_Nr,bNr,MK,vNr,FNr,TNr,g3,MNr,zr,nx,ENr,HMe,CNr,wNr,Fn,ANr,UMe,yNr,LNr,JMe,xNr,$Nr,YMe,kNr,SNr,RNr,$e,h3,KMe,PNr,BNr,EK,INr,NNr,qNr,p3,ZMe,jNr,DNr,CK,GNr,ONr,VNr,u3,eEe,XNr,zNr,wK,WNr,QNr,HNr,_3,oEe,UNr,JNr,AK,YNr,KNr,ZNr,b3,rEe,eqr,oqr,yK,rqr,tqr,aqr,v3,tEe,nqr,sqr,LK,lqr,iqr,dqr,F3,aEe,cqr,fqr,xK,mqr,gqr,hqr,T3,nEe,pqr,uqr,$K,_qr,bqr,vqr,M3,sEe,Fqr,Tqr,kK,Mqr,Eqr,Cqr,E3,lEe,wqr,Aqr,SK,yqr,Lqr,xqr,C3,zje,Jc,w3,iEe,sx,$qr,dEe,kqr,Wje,br,lx,Sqr,Yc,Rqr,RK,Pqr,Bqr,PK,Iqr,Nqr,qqr,ix,jqr,cEe,Dqr,Gqr,Oqr,Ht,dx,Vqr,fEe,Xqr,zqr,Kc,Wqr,mEe,Qqr,Hqr,BK,Uqr,Jqr,Yqr,A3,Kqr,Wr,cx,Zqr,gEe,ejr,ojr,Tn,rjr,hEe,tjr,ajr,pEe,njr,sjr,uEe,ljr,ijr,djr,De,y3,_Ee,cjr,fjr,IK,mjr,gjr,hjr,L3,bEe,pjr,ujr,NK,_jr,bjr,vjr,x3,vEe,Fjr,Tjr,qK,Mjr,Ejr,Cjr,$3,FEe,wjr,Ajr,jK,yjr,Ljr,xjr,k3,TEe,$jr,kjr,DK,Sjr,Rjr,Pjr,S3,MEe,Bjr,Ijr,GK,Njr,qjr,jjr,R3,EEe,Djr,Gjr,OK,Ojr,Vjr,Xjr,P3,CEe,zjr,Wjr,VK,Qjr,Hjr,Ujr,B3,Qje,Zc,I3,wEe,fx,Jjr,AEe,Yjr,Hje,vr,mx,Kjr,ef,Zjr,XK,eDr,oDr,zK,rDr,tDr,aDr,gx,nDr,yEe,sDr,lDr,iDr,Ut,hx,dDr,LEe,cDr,fDr,of,mDr,xEe,gDr,hDr,WK,pDr,uDr,_Dr,N3,bDr,Qr,px,vDr,$Ee,FDr,TDr,Mn,MDr,kEe,EDr,CDr,SEe,wDr,ADr,REe,yDr,LDr,xDr,Ge,q3,PEe,$Dr,kDr,QK,SDr,RDr,PDr,j3,BEe,BDr,IDr,HK,NDr,qDr,jDr,D3,IEe,DDr,GDr,UK,ODr,VDr,XDr,G3,NEe,zDr,WDr,JK,QDr,HDr,UDr,O3,qEe,JDr,YDr,YK,KDr,ZDr,eGr,V3,jEe,oGr,rGr,KK,tGr,aGr,nGr,X3,DEe,sGr,lGr,ZK,iGr,dGr,cGr,z3,GEe,fGr,mGr,eZ,gGr,hGr,pGr,W3,Uje,rf,Q3,OEe,ux,uGr,VEe,_Gr,Jje,Fr,_x,bGr,tf,vGr,oZ,FGr,TGr,rZ,MGr,EGr,CGr,bx,wGr,XEe,AGr,yGr,LGr,Jt,vx,xGr,zEe,$Gr,kGr,af,SGr,WEe,RGr,PGr,tZ,BGr,IGr,NGr,H3,qGr,Hr,Fx,jGr,QEe,DGr,GGr,En,OGr,HEe,VGr,XGr,UEe,zGr,WGr,JEe,QGr,HGr,UGr,YEe,U3,KEe,JGr,YGr,aZ,KGr,ZGr,eOr,J3,Yje,nf,Y3,ZEe,Tx,oOr,eCe,rOr,Kje,Tr,Mx,tOr,sf,aOr,nZ,nOr,sOr,sZ,lOr,iOr,dOr,Ex,cOr,oCe,fOr,mOr,gOr,Yt,Cx,hOr,rCe,pOr,uOr,lf,_Or,tCe,bOr,vOr,lZ,FOr,TOr,MOr,K3,EOr,Ur,wx,COr,aCe,wOr,AOr,Cn,yOr,nCe,LOr,xOr,sCe,$Or,kOr,lCe,SOr,ROr,POr,Ax,Z3,iCe,BOr,IOr,iZ,NOr,qOr,jOr,ew,dCe,DOr,GOr,dZ,OOr,VOr,XOr,ow,Zje,df,rw,cCe,yx,zOr,fCe,WOr,eDe,Mr,Lx,QOr,cf,HOr,cZ,UOr,JOr,fZ,YOr,KOr,ZOr,xx,eVr,mCe,oVr,rVr,tVr,Kt,$x,aVr,gCe,nVr,sVr,ff,lVr,hCe,iVr,dVr,mZ,cVr,fVr,mVr,tw,gVr,Jr,kx,hVr,pCe,pVr,uVr,wn,_Vr,uCe,bVr,vVr,_Ce,FVr,TVr,bCe,MVr,EVr,CVr,vCe,aw,FCe,wVr,AVr,gZ,yVr,LVr,xVr,nw,oDe;return d=new re({}),Ca=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),yA=new re({}),LA=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Ff=new $Vr({props:{warning:!0,$$slots:{default:[f$t]},$$scope:{ctx:L}}}),xA=new re({}),$A=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/configuration_auto.py#L584"}}),RA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/configuration_auto.py#L607"}}),Eg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[m$t]},$$scope:{ctx:L}}}),PA=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/configuration_auto.py#L730"}}),BA=new re({}),IA=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/tokenization_auto.py#L390"}}),jA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17407/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/tokenization_auto.py#L404"}}),ah=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[g$t]},$$scope:{ctx:L}}}),DA=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/tokenization_auto.py#L600"}}),GA=new re({}),OA=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/feature_extraction_auto.py#L190"}}),zA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17407/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/feature_extraction_auto.py#L204"}}),Ih=new $Vr({props:{$$slots:{default:[h$t]},$$scope:{ctx:L}}}),Nh=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[p$t]},$$scope:{ctx:L}}}),WA=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/feature_extraction_auto.py#L331"}}),QA=new re({}),HA=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/processing_auto.py#L88"}}),YA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/processing_auto.py#L102"}}),tp=new $Vr({props:{$$slots:{default:[u$t]},$$scope:{ctx:L}}}),ap=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[_$t]},$$scope:{ctx:L}}}),KA=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/processing_auto.py#L255"}}),ZA=new re({}),ey=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/modeling_auto.py#L736"}}),ry=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17407/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17407/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/auto_factory.py#L389"}}),lp=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[b$t]},$$scope:{ctx:L}}}),ty=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/auto_factory.py#L417"}}),r_=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[v$t]},$$scope:{ctx:L}}}),ay=new re({}),ny=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/modeling_auto.py#L743"}}),ly=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17407/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/auto_factory.py#L389"}}),a_=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[F$t]},$$scope:{ctx:L}}}),iy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/auto_factory.py#L417"}}),H_=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[T$t]},$$scope:{ctx:L}}}),dy=new re({}),cy=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/modeling_auto.py#L758"}}),my=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17407/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/auto_factory.py#L389"}}),J_=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[M$t]},$$scope:{ctx:L}}}),gy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/auto_factory.py#L417"}}),B1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[E$t]},$$scope:{ctx:L}}}),hy=new re({}),py=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/modeling_auto.py#L765"}}),_y=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17407/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/auto_factory.py#L389"}}),N1=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[C$t]},$$scope:{ctx:L}}}),by=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/auto_factory.py#L417"}}),F7=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[w$t]},$$scope:{ctx:L}}}),vy=new re({}),Fy=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/modeling_auto.py#L772"}}),My=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17407/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/auto_factory.py#L389"}}),M7=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[A$t]},$$scope:{ctx:L}}}),Ey=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/auto_factory.py#L417"}}),D7=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[y$t]},$$scope:{ctx:L}}}),Cy=new re({}),wy=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/modeling_auto.py#L781"}}),yy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17407/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/auto_factory.py#L389"}}),O7=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[L$t]},$$scope:{ctx:L}}}),Ly=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/auto_factory.py#L417"}}),Nb=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[x$t]},$$scope:{ctx:L}}}),xy=new re({}),$y=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/modeling_auto.py#L815"}}),Sy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17407/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/auto_factory.py#L389"}}),jb=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[$$t]},$$scope:{ctx:L}}}),Ry=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/auto_factory.py#L417"}}),u2=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[k$t]},$$scope:{ctx:L}}}),Py=new re({}),By=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/modeling_auto.py#L822"}}),Ny=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17407/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/auto_factory.py#L389"}}),b2=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[S$t]},$$scope:{ctx:L}}}),qy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/auto_factory.py#L417"}}),w2=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[R$t]},$$scope:{ctx:L}}}),jy=new re({}),Dy=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/modeling_auto.py#L808"}}),Oy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17407/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/auto_factory.py#L389"}}),y2=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[P$t]},$$scope:{ctx:L}}}),Vy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/auto_factory.py#L417"}}),d4=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[B$t]},$$scope:{ctx:L}}}),Xy=new re({}),zy=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/modeling_auto.py#L790"}}),Qy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17407/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/auto_factory.py#L389"}}),f4=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[I$t]},$$scope:{ctx:L}}}),Hy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/auto_factory.py#L417"}}),Z4=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[N$t]},$$scope:{ctx:L}}}),Uy=new re({}),Jy=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/modeling_auto.py#L797"}}),Ky=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17407/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/auto_factory.py#L389"}}),ov=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[q$t]},$$scope:{ctx:L}}}),Zy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/auto_factory.py#L417"}}),av=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[j$t]},$$scope:{ctx:L}}}),eL=new re({}),oL=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/modeling_auto.py#L831"}}),tL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17407/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17407/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17407/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17407/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/auto_factory.py#L389"}}),sv=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[D$t]},$$scope:{ctx:L}}}),aL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/auto_factory.py#L417"}}),Fv=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[G$t]},$$scope:{ctx:L}}}),nL=new re({}),sL=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/modeling_auto.py#L870"}}),iL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17407/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/auto_factory.py#L389"}}),Mv=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[O$t]},$$scope:{ctx:L}}}),dL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/auto_factory.py#L417"}}),wv=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[V$t]},$$scope:{ctx:L}}}),cL=new re({}),fL=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/modeling_auto.py#L877"}}),gL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17407/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/auto_factory.py#L389"}}),yv=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[X$t]},$$scope:{ctx:L}}}),hL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/auto_factory.py#L417"}}),qv=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[z$t]},$$scope:{ctx:L}}}),pL=new re({}),uL=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/modeling_auto.py#L900"}}),bL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17407/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/auto_factory.py#L389"}}),Dv=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[W$t]},$$scope:{ctx:L}}}),vL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/auto_factory.py#L417"}}),Qv=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[Q$t]},$$scope:{ctx:L}}}),FL=new re({}),TL=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/modeling_auto.py#L884"}}),EL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17407/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/auto_factory.py#L389"}}),Uv=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[H$t]},$$scope:{ctx:L}}}),CL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/auto_factory.py#L417"}}),sF=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[U$t]},$$scope:{ctx:L}}}),wL=new re({}),AL=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/modeling_auto.py#L891"}}),LL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17407/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/auto_factory.py#L389"}}),iF=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[J$t]},$$scope:{ctx:L}}}),xL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/auto_factory.py#L417"}}),mF=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[Y$t]},$$scope:{ctx:L}}}),kL=new re({}),SL=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/modeling_auto.py#L909"}}),PL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17407/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/auto_factory.py#L389"}}),hF=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[K$t]},$$scope:{ctx:L}}}),BL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/auto_factory.py#L417"}}),TF=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[Z$t]},$$scope:{ctx:L}}}),IL=new re({}),NL=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/modeling_auto.py#L916"}}),jL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17407/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/auto_factory.py#L389"}}),EF=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[ekt]},$$scope:{ctx:L}}}),DL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/auto_factory.py#L417"}}),LF=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[okt]},$$scope:{ctx:L}}}),GL=new re({}),OL=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/modeling_auto.py#L863"}}),XL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17407/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/auto_factory.py#L389"}}),$F=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[rkt]},$$scope:{ctx:L}}}),zL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/auto_factory.py#L417"}}),PF=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[tkt]},$$scope:{ctx:L}}}),QL=new re({}),HL=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/modeling_auto.py#L838"}}),JL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17407/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/auto_factory.py#L389"}}),IF=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[akt]},$$scope:{ctx:L}}}),YL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/auto_factory.py#L417"}}),jF=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[nkt]},$$scope:{ctx:L}}}),KL=new re({}),ZL=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/modeling_auto.py#L845"}}),o8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17407/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/auto_factory.py#L389"}}),GF=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[skt]},$$scope:{ctx:L}}}),r8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/auto_factory.py#L417"}}),QF=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[lkt]},$$scope:{ctx:L}}}),t8=new re({}),a8=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/modeling_auto.py#L854"}}),s8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17407/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/auto_factory.py#L389"}}),UF=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[ikt]},$$scope:{ctx:L}}}),l8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/auto_factory.py#L417"}}),KF=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[dkt]},$$scope:{ctx:L}}}),i8=new re({}),d8=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/modeling_tf_auto.py#L394"}}),f8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17407/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17407/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/auto_factory.py#L389"}}),e0=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[ckt]},$$scope:{ctx:L}}}),m8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/auto_factory.py#L417"}}),W0=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[fkt]},$$scope:{ctx:L}}}),g8=new re({}),h8=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/modeling_tf_auto.py#L401"}}),u8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17407/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/auto_factory.py#L389"}}),H0=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[mkt]},$$scope:{ctx:L}}}),_8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/auto_factory.py#L417"}}),bT=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[gkt]},$$scope:{ctx:L}}}),b8=new re({}),v8=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/modeling_tf_auto.py#L416"}}),T8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17407/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/auto_factory.py#L389"}}),FT=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[hkt]},$$scope:{ctx:L}}}),M8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/auto_factory.py#L417"}}),RT=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[pkt]},$$scope:{ctx:L}}}),E8=new re({}),C8=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/modeling_tf_auto.py#L432"}}),A8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17407/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/auto_factory.py#L389"}}),BT=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[ukt]},$$scope:{ctx:L}}}),y8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/auto_factory.py#L417"}}),DT=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[_kt]},$$scope:{ctx:L}}}),L8=new re({}),x8=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/modeling_tf_auto.py#L448"}}),k8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17407/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/auto_factory.py#L389"}}),OT=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[bkt]},$$scope:{ctx:L}}}),S8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/auto_factory.py#L417"}}),dM=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[vkt]},$$scope:{ctx:L}}}),R8=new re({}),P8=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/modeling_tf_auto.py#L455"}}),I8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17407/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/auto_factory.py#L389"}}),fM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Fkt]},$$scope:{ctx:L}}}),N8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/auto_factory.py#L417"}}),MM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Tkt]},$$scope:{ctx:L}}}),q8=new re({}),j8=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/modeling_tf_auto.py#L464"}}),G8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17407/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/auto_factory.py#L389"}}),CM=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[Mkt]},$$scope:{ctx:L}}}),O8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/auto_factory.py#L417"}}),YM=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Ekt]},$$scope:{ctx:L}}}),V8=new re({}),X8=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/modeling_tf_auto.py#L500"}}),W8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17407/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/auto_factory.py#L389"}}),ZM=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[Ckt]},$$scope:{ctx:L}}}),Q8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/auto_factory.py#L417"}}),_E=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[wkt]},$$scope:{ctx:L}}}),H8=new re({}),U8=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/modeling_tf_auto.py#L507"}}),Y8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17407/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/auto_factory.py#L389"}}),vE=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Akt]},$$scope:{ctx:L}}}),K8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/auto_factory.py#L417"}}),ME=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[ykt]},$$scope:{ctx:L}}}),e9=new re({}),o9=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/modeling_tf_auto.py#L480"}}),t9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17407/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/auto_factory.py#L389"}}),CE=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[Lkt]},$$scope:{ctx:L}}}),a9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/auto_factory.py#L417"}}),AE=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[xkt]},$$scope:{ctx:L}}}),n9=new re({}),s9=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/modeling_tf_auto.py#L491"}}),i9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17407/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/auto_factory.py#L389"}}),LE=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[$kt]},$$scope:{ctx:L}}}),d9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/auto_factory.py#L417"}}),UE=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[kkt]},$$scope:{ctx:L}}}),c9=new re({}),f9=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/modeling_tf_auto.py#L473"}}),g9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17407/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/auto_factory.py#L389"}}),YE=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Skt]},$$scope:{ctx:L}}}),h9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/auto_factory.py#L417"}}),bC=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Rkt]},$$scope:{ctx:L}}}),p9=new re({}),u9=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/modeling_tf_auto.py#L441"}}),b9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17407/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/auto_factory.py#L389"}}),FC=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[Pkt]},$$scope:{ctx:L}}}),v9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/auto_factory.py#L417"}}),MC=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Bkt]},$$scope:{ctx:L}}}),F9=new re({}),T9=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/modeling_tf_auto.py#L516"}}),E9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17407/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/auto_factory.py#L389"}}),CC=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[Ikt]},$$scope:{ctx:L}}}),C9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/auto_factory.py#L417"}}),AC=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[Nkt]},$$scope:{ctx:L}}}),w9=new re({}),A9=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/modeling_flax_auto.py#L241"}}),L9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17407/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/auto_factory.py#L389"}}),LC=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[qkt]},$$scope:{ctx:L}}}),x9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/auto_factory.py#L417"}}),e5=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[jkt]},$$scope:{ctx:L}}}),$9=new re({}),k9=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/modeling_flax_auto.py#L255"}}),R9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17407/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/auto_factory.py#L389"}}),r5=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[Dkt]},$$scope:{ctx:L}}}),P9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/auto_factory.py#L417"}}),m5=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Gkt]},$$scope:{ctx:L}}}),B9=new re({}),I9=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/modeling_flax_auto.py#L248"}}),q9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17407/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/auto_factory.py#L389"}}),h5=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[Okt]},$$scope:{ctx:L}}}),j9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/auto_factory.py#L417"}}),y5=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Vkt]},$$scope:{ctx:L}}}),D9=new re({}),G9=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/modeling_flax_auto.py#L262"}}),V9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17407/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/auto_factory.py#L389"}}),x5=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[Xkt]},$$scope:{ctx:L}}}),X9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/auto_factory.py#L417"}}),D5=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[zkt]},$$scope:{ctx:L}}}),z9=new re({}),W9=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/modeling_flax_auto.py#L269"}}),H9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17407/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/auto_factory.py#L389"}}),O5=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Wkt]},$$scope:{ctx:L}}}),U9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/auto_factory.py#L417"}}),K5=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Qkt]},$$scope:{ctx:L}}}),J9=new re({}),Y9=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/modeling_flax_auto.py#L278"}}),Z9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17407/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/auto_factory.py#L389"}}),e3=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[Hkt]},$$scope:{ctx:L}}}),ex=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/auto_factory.py#L417"}}),f3=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Ukt]},$$scope:{ctx:L}}}),ox=new re({}),rx=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/modeling_flax_auto.py#L287"}}),ax=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17407/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/auto_factory.py#L389"}}),g3=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Jkt]},$$scope:{ctx:L}}}),nx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/auto_factory.py#L417"}}),C3=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Ykt]},$$scope:{ctx:L}}}),sx=new re({}),lx=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/modeling_flax_auto.py#L294"}}),dx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17407/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/auto_factory.py#L389"}}),A3=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[Kkt]},$$scope:{ctx:L}}}),cx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/auto_factory.py#L417"}}),B3=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Zkt]},$$scope:{ctx:L}}}),fx=new re({}),mx=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/modeling_flax_auto.py#L303"}}),hx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17407/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/auto_factory.py#L389"}}),N3=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[eSt]},$$scope:{ctx:L}}}),px=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/auto_factory.py#L417"}}),W3=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[oSt]},$$scope:{ctx:L}}}),ux=new re({}),_x=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/modeling_flax_auto.py#L310"}}),vx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17407/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/auto_factory.py#L389"}}),H3=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[rSt]},$$scope:{ctx:L}}}),Fx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/auto_factory.py#L417"}}),J3=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[tSt]},$$scope:{ctx:L}}}),Tx=new re({}),Mx=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/modeling_flax_auto.py#L319"}}),Cx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17407/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17407/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/auto_factory.py#L389"}}),K3=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[aSt]},$$scope:{ctx:L}}}),wx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/auto_factory.py#L417"}}),ow=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[nSt]},$$scope:{ctx:L}}}),yx=new re({}),Lx=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/modeling_flax_auto.py#L328"}}),$x=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17407/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17407/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/auto_factory.py#L389"}}),tw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[sSt]},$$scope:{ctx:L}}}),kx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17407/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17407/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17407/src/transformers/models/auto/auto_factory.py#L417"}}),nw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[lSt]},$$scope:{ctx:L}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),u=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),fi=o("Auto Classes"),pf=l(),rt=a("p"),mi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),gi=a("code"),EA=o("from_pretrained()"),uf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),je=l(),We=a("p"),hi=o("Instantiating one of "),yn=a("a"),CA=o("AutoConfig"),Ln=o(", "),xn=a("a"),wA=o("AutoModel"),pi=o(`, and
`),$n=a("a"),AA=o("AutoTokenizer"),ui=o(" will directly create a class of the relevant architecture. For instance"),_f=l(),F(Ca.$$.fragment),Qe=l(),Ae=a("p"),z$=o("will create a model that is an instance of "),_i=a("a"),W$=o("BertModel"),Q$=o("."),Eo=l(),wa=a("p"),H$=o("There is one class of "),bf=a("code"),U$=o("AutoModel"),dOe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),KNe=l(),bi=a("h2"),vf=a("a"),soe=a("span"),F(yA.$$.fragment),cOe=l(),loe=a("span"),fOe=o("Extending the Auto Classes"),ZNe=l(),kn=a("p"),mOe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),ioe=a("code"),gOe=o("NewModel"),hOe=o(", make sure you have a "),doe=a("code"),pOe=o("NewModelConfig"),uOe=o(` then you can add those to the auto
classes like this:`),eqe=l(),F(LA.$$.fragment),oqe=l(),J$=a("p"),_Oe=o("You will then be able to use the auto classes like you would usually do!"),rqe=l(),F(Ff.$$.fragment),tqe=l(),vi=a("h2"),Tf=a("a"),coe=a("span"),F(xA.$$.fragment),bOe=l(),foe=a("span"),vOe=o("AutoConfig"),aqe=l(),Co=a("div"),F($A.$$.fragment),FOe=l(),kA=a("p"),TOe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),Y$=a("a"),MOe=o("from_pretrained()"),EOe=o(" class method."),COe=l(),SA=a("p"),wOe=o("This class cannot be instantiated directly using "),moe=a("code"),AOe=o("__init__()"),yOe=o(" (throws an error)."),LOe=l(),Er=a("div"),F(RA.$$.fragment),xOe=l(),goe=a("p"),$Oe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),kOe=l(),Fi=a("p"),SOe=o("The configuration class to instantiate is selected based on the "),hoe=a("code"),ROe=o("model_type"),POe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),poe=a("code"),BOe=o("pretrained_model_name_or_path"),IOe=o(":"),NOe=l(),A=a("ul"),Mf=a("li"),uoe=a("strong"),qOe=o("albert"),jOe=o(" \u2014 "),K$=a("a"),DOe=o("AlbertConfig"),GOe=o(" (ALBERT model)"),OOe=l(),Ef=a("li"),_oe=a("strong"),VOe=o("bart"),XOe=o(" \u2014 "),Z$=a("a"),zOe=o("BartConfig"),WOe=o(" (BART model)"),QOe=l(),Cf=a("li"),boe=a("strong"),HOe=o("beit"),UOe=o(" \u2014 "),ek=a("a"),JOe=o("BeitConfig"),YOe=o(" (BEiT model)"),KOe=l(),wf=a("li"),voe=a("strong"),ZOe=o("bert"),eVe=o(" \u2014 "),ok=a("a"),oVe=o("BertConfig"),rVe=o(" (BERT model)"),tVe=l(),Af=a("li"),Foe=a("strong"),aVe=o("bert-generation"),nVe=o(" \u2014 "),rk=a("a"),sVe=o("BertGenerationConfig"),lVe=o(" (Bert Generation model)"),iVe=l(),yf=a("li"),Toe=a("strong"),dVe=o("big_bird"),cVe=o(" \u2014 "),tk=a("a"),fVe=o("BigBirdConfig"),mVe=o(" (BigBird model)"),gVe=l(),Lf=a("li"),Moe=a("strong"),hVe=o("bigbird_pegasus"),pVe=o(" \u2014 "),ak=a("a"),uVe=o("BigBirdPegasusConfig"),_Ve=o(" (BigBirdPegasus model)"),bVe=l(),xf=a("li"),Eoe=a("strong"),vVe=o("blenderbot"),FVe=o(" \u2014 "),nk=a("a"),TVe=o("BlenderbotConfig"),MVe=o(" (Blenderbot model)"),EVe=l(),$f=a("li"),Coe=a("strong"),CVe=o("blenderbot-small"),wVe=o(" \u2014 "),sk=a("a"),AVe=o("BlenderbotSmallConfig"),yVe=o(" (BlenderbotSmall model)"),LVe=l(),kf=a("li"),woe=a("strong"),xVe=o("camembert"),$Ve=o(" \u2014 "),lk=a("a"),kVe=o("CamembertConfig"),SVe=o(" (CamemBERT model)"),RVe=l(),Sf=a("li"),Aoe=a("strong"),PVe=o("canine"),BVe=o(" \u2014 "),ik=a("a"),IVe=o("CanineConfig"),NVe=o(" (Canine model)"),qVe=l(),Rf=a("li"),yoe=a("strong"),jVe=o("clip"),DVe=o(" \u2014 "),dk=a("a"),GVe=o("CLIPConfig"),OVe=o(" (CLIP model)"),VVe=l(),Pf=a("li"),Loe=a("strong"),XVe=o("convbert"),zVe=o(" \u2014 "),ck=a("a"),WVe=o("ConvBertConfig"),QVe=o(" (ConvBERT model)"),HVe=l(),Bf=a("li"),xoe=a("strong"),UVe=o("convnext"),JVe=o(" \u2014 "),fk=a("a"),YVe=o("ConvNextConfig"),KVe=o(" (ConvNext model)"),ZVe=l(),If=a("li"),$oe=a("strong"),eXe=o("ctrl"),oXe=o(" \u2014 "),mk=a("a"),rXe=o("CTRLConfig"),tXe=o(" (CTRL model)"),aXe=l(),Nf=a("li"),koe=a("strong"),nXe=o("cvt"),sXe=o(" \u2014 "),gk=a("a"),lXe=o("CvtConfig"),iXe=o(" (CvT model)"),dXe=l(),qf=a("li"),Soe=a("strong"),cXe=o("data2vec-audio"),fXe=o(" \u2014 "),hk=a("a"),mXe=o("Data2VecAudioConfig"),gXe=o(" (Data2VecAudio model)"),hXe=l(),jf=a("li"),Roe=a("strong"),pXe=o("data2vec-text"),uXe=o(" \u2014 "),pk=a("a"),_Xe=o("Data2VecTextConfig"),bXe=o(" (Data2VecText model)"),vXe=l(),Df=a("li"),Poe=a("strong"),FXe=o("data2vec-vision"),TXe=o(" \u2014 "),uk=a("a"),MXe=o("Data2VecVisionConfig"),EXe=o(" (Data2VecVision model)"),CXe=l(),Gf=a("li"),Boe=a("strong"),wXe=o("deberta"),AXe=o(" \u2014 "),_k=a("a"),yXe=o("DebertaConfig"),LXe=o(" (DeBERTa model)"),xXe=l(),Of=a("li"),Ioe=a("strong"),$Xe=o("deberta-v2"),kXe=o(" \u2014 "),bk=a("a"),SXe=o("DebertaV2Config"),RXe=o(" (DeBERTa-v2 model)"),PXe=l(),Vf=a("li"),Noe=a("strong"),BXe=o("decision_transformer"),IXe=o(" \u2014 "),vk=a("a"),NXe=o("DecisionTransformerConfig"),qXe=o(" (Decision Transformer model)"),jXe=l(),Xf=a("li"),qoe=a("strong"),DXe=o("deit"),GXe=o(" \u2014 "),Fk=a("a"),OXe=o("DeiTConfig"),VXe=o(" (DeiT model)"),XXe=l(),zf=a("li"),joe=a("strong"),zXe=o("detr"),WXe=o(" \u2014 "),Tk=a("a"),QXe=o("DetrConfig"),HXe=o(" (DETR model)"),UXe=l(),Wf=a("li"),Doe=a("strong"),JXe=o("distilbert"),YXe=o(" \u2014 "),Mk=a("a"),KXe=o("DistilBertConfig"),ZXe=o(" (DistilBERT model)"),eze=l(),Qf=a("li"),Goe=a("strong"),oze=o("dpr"),rze=o(" \u2014 "),Ek=a("a"),tze=o("DPRConfig"),aze=o(" (DPR model)"),nze=l(),Hf=a("li"),Ooe=a("strong"),sze=o("dpt"),lze=o(" \u2014 "),Ck=a("a"),ize=o("DPTConfig"),dze=o(" (DPT model)"),cze=l(),Uf=a("li"),Voe=a("strong"),fze=o("electra"),mze=o(" \u2014 "),wk=a("a"),gze=o("ElectraConfig"),hze=o(" (ELECTRA model)"),pze=l(),Jf=a("li"),Xoe=a("strong"),uze=o("encoder-decoder"),_ze=o(" \u2014 "),Ak=a("a"),bze=o("EncoderDecoderConfig"),vze=o(" (Encoder decoder model)"),Fze=l(),Yf=a("li"),zoe=a("strong"),Tze=o("flaubert"),Mze=o(" \u2014 "),yk=a("a"),Eze=o("FlaubertConfig"),Cze=o(" (FlauBERT model)"),wze=l(),Kf=a("li"),Woe=a("strong"),Aze=o("flava"),yze=o(" \u2014 "),Lk=a("a"),Lze=o("FlavaConfig"),xze=o(" (Flava model)"),$ze=l(),Zf=a("li"),Qoe=a("strong"),kze=o("fnet"),Sze=o(" \u2014 "),xk=a("a"),Rze=o("FNetConfig"),Pze=o(" (FNet model)"),Bze=l(),em=a("li"),Hoe=a("strong"),Ize=o("fsmt"),Nze=o(" \u2014 "),$k=a("a"),qze=o("FSMTConfig"),jze=o(" (FairSeq Machine-Translation model)"),Dze=l(),om=a("li"),Uoe=a("strong"),Gze=o("funnel"),Oze=o(" \u2014 "),kk=a("a"),Vze=o("FunnelConfig"),Xze=o(" (Funnel Transformer model)"),zze=l(),rm=a("li"),Joe=a("strong"),Wze=o("glpn"),Qze=o(" \u2014 "),Sk=a("a"),Hze=o("GLPNConfig"),Uze=o(" (GLPN model)"),Jze=l(),tm=a("li"),Yoe=a("strong"),Yze=o("gpt2"),Kze=o(" \u2014 "),Rk=a("a"),Zze=o("GPT2Config"),eWe=o(" (OpenAI GPT-2 model)"),oWe=l(),am=a("li"),Koe=a("strong"),rWe=o("gpt_neo"),tWe=o(" \u2014 "),Pk=a("a"),aWe=o("GPTNeoConfig"),nWe=o(" (GPT Neo model)"),sWe=l(),nm=a("li"),Zoe=a("strong"),lWe=o("gpt_neox"),iWe=o(" \u2014 "),Bk=a("a"),dWe=o("GPTNeoXConfig"),cWe=o(" (GPT NeoX model)"),fWe=l(),sm=a("li"),ere=a("strong"),mWe=o("gptj"),gWe=o(" \u2014 "),Ik=a("a"),hWe=o("GPTJConfig"),pWe=o(" (GPT-J model)"),uWe=l(),lm=a("li"),ore=a("strong"),_We=o("hubert"),bWe=o(" \u2014 "),Nk=a("a"),vWe=o("HubertConfig"),FWe=o(" (Hubert model)"),TWe=l(),im=a("li"),rre=a("strong"),MWe=o("ibert"),EWe=o(" \u2014 "),qk=a("a"),CWe=o("IBertConfig"),wWe=o(" (I-BERT model)"),AWe=l(),dm=a("li"),tre=a("strong"),yWe=o("imagegpt"),LWe=o(" \u2014 "),jk=a("a"),xWe=o("ImageGPTConfig"),$We=o(" (ImageGPT model)"),kWe=l(),cm=a("li"),are=a("strong"),SWe=o("layoutlm"),RWe=o(" \u2014 "),Dk=a("a"),PWe=o("LayoutLMConfig"),BWe=o(" (LayoutLM model)"),IWe=l(),fm=a("li"),nre=a("strong"),NWe=o("layoutlmv2"),qWe=o(" \u2014 "),Gk=a("a"),jWe=o("LayoutLMv2Config"),DWe=o(" (LayoutLMv2 model)"),GWe=l(),mm=a("li"),sre=a("strong"),OWe=o("layoutlmv3"),VWe=o(" \u2014 "),Ok=a("a"),XWe=o("LayoutLMv3Config"),zWe=o(" (LayoutLMv3 model)"),WWe=l(),gm=a("li"),lre=a("strong"),QWe=o("led"),HWe=o(" \u2014 "),Vk=a("a"),UWe=o("LEDConfig"),JWe=o(" (LED model)"),YWe=l(),hm=a("li"),ire=a("strong"),KWe=o("longformer"),ZWe=o(" \u2014 "),Xk=a("a"),eQe=o("LongformerConfig"),oQe=o(" (Longformer model)"),rQe=l(),pm=a("li"),dre=a("strong"),tQe=o("luke"),aQe=o(" \u2014 "),zk=a("a"),nQe=o("LukeConfig"),sQe=o(" (LUKE model)"),lQe=l(),um=a("li"),cre=a("strong"),iQe=o("lxmert"),dQe=o(" \u2014 "),Wk=a("a"),cQe=o("LxmertConfig"),fQe=o(" (LXMERT model)"),mQe=l(),_m=a("li"),fre=a("strong"),gQe=o("m2m_100"),hQe=o(" \u2014 "),Qk=a("a"),pQe=o("M2M100Config"),uQe=o(" (M2M100 model)"),_Qe=l(),bm=a("li"),mre=a("strong"),bQe=o("marian"),vQe=o(" \u2014 "),Hk=a("a"),FQe=o("MarianConfig"),TQe=o(" (Marian model)"),MQe=l(),vm=a("li"),gre=a("strong"),EQe=o("maskformer"),CQe=o(" \u2014 "),Uk=a("a"),wQe=o("MaskFormerConfig"),AQe=o(" (MaskFormer model)"),yQe=l(),Fm=a("li"),hre=a("strong"),LQe=o("mbart"),xQe=o(" \u2014 "),Jk=a("a"),$Qe=o("MBartConfig"),kQe=o(" (mBART model)"),SQe=l(),Tm=a("li"),pre=a("strong"),RQe=o("megatron-bert"),PQe=o(" \u2014 "),Yk=a("a"),BQe=o("MegatronBertConfig"),IQe=o(" (MegatronBert model)"),NQe=l(),Mm=a("li"),ure=a("strong"),qQe=o("mobilebert"),jQe=o(" \u2014 "),Kk=a("a"),DQe=o("MobileBertConfig"),GQe=o(" (MobileBERT model)"),OQe=l(),Em=a("li"),_re=a("strong"),VQe=o("mpnet"),XQe=o(" \u2014 "),Zk=a("a"),zQe=o("MPNetConfig"),WQe=o(" (MPNet model)"),QQe=l(),Cm=a("li"),bre=a("strong"),HQe=o("mt5"),UQe=o(" \u2014 "),eS=a("a"),JQe=o("MT5Config"),YQe=o(" (mT5 model)"),KQe=l(),wm=a("li"),vre=a("strong"),ZQe=o("nystromformer"),eHe=o(" \u2014 "),oS=a("a"),oHe=o("NystromformerConfig"),rHe=o(" (Nystromformer model)"),tHe=l(),Am=a("li"),Fre=a("strong"),aHe=o("openai-gpt"),nHe=o(" \u2014 "),rS=a("a"),sHe=o("OpenAIGPTConfig"),lHe=o(" (OpenAI GPT model)"),iHe=l(),ym=a("li"),Tre=a("strong"),dHe=o("opt"),cHe=o(" \u2014 "),tS=a("a"),fHe=o("OPTConfig"),mHe=o(" (OPT model)"),gHe=l(),Lm=a("li"),Mre=a("strong"),hHe=o("pegasus"),pHe=o(" \u2014 "),aS=a("a"),uHe=o("PegasusConfig"),_He=o(" (Pegasus model)"),bHe=l(),xm=a("li"),Ere=a("strong"),vHe=o("perceiver"),FHe=o(" \u2014 "),nS=a("a"),THe=o("PerceiverConfig"),MHe=o(" (Perceiver model)"),EHe=l(),$m=a("li"),Cre=a("strong"),CHe=o("plbart"),wHe=o(" \u2014 "),sS=a("a"),AHe=o("PLBartConfig"),yHe=o(" (PLBart model)"),LHe=l(),km=a("li"),wre=a("strong"),xHe=o("poolformer"),$He=o(" \u2014 "),lS=a("a"),kHe=o("PoolFormerConfig"),SHe=o(" (PoolFormer model)"),RHe=l(),Sm=a("li"),Are=a("strong"),PHe=o("prophetnet"),BHe=o(" \u2014 "),iS=a("a"),IHe=o("ProphetNetConfig"),NHe=o(" (ProphetNet model)"),qHe=l(),Rm=a("li"),yre=a("strong"),jHe=o("qdqbert"),DHe=o(" \u2014 "),dS=a("a"),GHe=o("QDQBertConfig"),OHe=o(" (QDQBert model)"),VHe=l(),Pm=a("li"),Lre=a("strong"),XHe=o("rag"),zHe=o(" \u2014 "),cS=a("a"),WHe=o("RagConfig"),QHe=o(" (RAG model)"),HHe=l(),Bm=a("li"),xre=a("strong"),UHe=o("realm"),JHe=o(" \u2014 "),fS=a("a"),YHe=o("RealmConfig"),KHe=o(" (Realm model)"),ZHe=l(),Im=a("li"),$re=a("strong"),eUe=o("reformer"),oUe=o(" \u2014 "),mS=a("a"),rUe=o("ReformerConfig"),tUe=o(" (Reformer model)"),aUe=l(),Nm=a("li"),kre=a("strong"),nUe=o("regnet"),sUe=o(" \u2014 "),gS=a("a"),lUe=o("RegNetConfig"),iUe=o(" (RegNet model)"),dUe=l(),qm=a("li"),Sre=a("strong"),cUe=o("rembert"),fUe=o(" \u2014 "),hS=a("a"),mUe=o("RemBertConfig"),gUe=o(" (RemBERT model)"),hUe=l(),jm=a("li"),Rre=a("strong"),pUe=o("resnet"),uUe=o(" \u2014 "),pS=a("a"),_Ue=o("ResNetConfig"),bUe=o(" (ResNet model)"),vUe=l(),Dm=a("li"),Pre=a("strong"),FUe=o("retribert"),TUe=o(" \u2014 "),uS=a("a"),MUe=o("RetriBertConfig"),EUe=o(" (RetriBERT model)"),CUe=l(),Gm=a("li"),Bre=a("strong"),wUe=o("roberta"),AUe=o(" \u2014 "),_S=a("a"),yUe=o("RobertaConfig"),LUe=o(" (RoBERTa model)"),xUe=l(),Om=a("li"),Ire=a("strong"),$Ue=o("roformer"),kUe=o(" \u2014 "),bS=a("a"),SUe=o("RoFormerConfig"),RUe=o(" (RoFormer model)"),PUe=l(),Vm=a("li"),Nre=a("strong"),BUe=o("segformer"),IUe=o(" \u2014 "),vS=a("a"),NUe=o("SegformerConfig"),qUe=o(" (SegFormer model)"),jUe=l(),Xm=a("li"),qre=a("strong"),DUe=o("sew"),GUe=o(" \u2014 "),FS=a("a"),OUe=o("SEWConfig"),VUe=o(" (SEW model)"),XUe=l(),zm=a("li"),jre=a("strong"),zUe=o("sew-d"),WUe=o(" \u2014 "),TS=a("a"),QUe=o("SEWDConfig"),HUe=o(" (SEW-D model)"),UUe=l(),Wm=a("li"),Dre=a("strong"),JUe=o("speech-encoder-decoder"),YUe=o(" \u2014 "),MS=a("a"),KUe=o("SpeechEncoderDecoderConfig"),ZUe=o(" (Speech Encoder decoder model)"),eJe=l(),Qm=a("li"),Gre=a("strong"),oJe=o("speech_to_text"),rJe=o(" \u2014 "),ES=a("a"),tJe=o("Speech2TextConfig"),aJe=o(" (Speech2Text model)"),nJe=l(),Hm=a("li"),Ore=a("strong"),sJe=o("speech_to_text_2"),lJe=o(" \u2014 "),CS=a("a"),iJe=o("Speech2Text2Config"),dJe=o(" (Speech2Text2 model)"),cJe=l(),Um=a("li"),Vre=a("strong"),fJe=o("splinter"),mJe=o(" \u2014 "),wS=a("a"),gJe=o("SplinterConfig"),hJe=o(" (Splinter model)"),pJe=l(),Jm=a("li"),Xre=a("strong"),uJe=o("squeezebert"),_Je=o(" \u2014 "),AS=a("a"),bJe=o("SqueezeBertConfig"),vJe=o(" (SqueezeBERT model)"),FJe=l(),Ym=a("li"),zre=a("strong"),TJe=o("swin"),MJe=o(" \u2014 "),yS=a("a"),EJe=o("SwinConfig"),CJe=o(" (Swin model)"),wJe=l(),Km=a("li"),Wre=a("strong"),AJe=o("t5"),yJe=o(" \u2014 "),LS=a("a"),LJe=o("T5Config"),xJe=o(" (T5 model)"),$Je=l(),Zm=a("li"),Qre=a("strong"),kJe=o("tapas"),SJe=o(" \u2014 "),xS=a("a"),RJe=o("TapasConfig"),PJe=o(" (TAPAS model)"),BJe=l(),eg=a("li"),Hre=a("strong"),IJe=o("trajectory_transformer"),NJe=o(" \u2014 "),$S=a("a"),qJe=o("TrajectoryTransformerConfig"),jJe=o(" (Trajectory Transformer model)"),DJe=l(),og=a("li"),Ure=a("strong"),GJe=o("transfo-xl"),OJe=o(" \u2014 "),kS=a("a"),VJe=o("TransfoXLConfig"),XJe=o(" (Transformer-XL model)"),zJe=l(),rg=a("li"),Jre=a("strong"),WJe=o("trocr"),QJe=o(" \u2014 "),SS=a("a"),HJe=o("TrOCRConfig"),UJe=o(" (TrOCR model)"),JJe=l(),tg=a("li"),Yre=a("strong"),YJe=o("unispeech"),KJe=o(" \u2014 "),RS=a("a"),ZJe=o("UniSpeechConfig"),eYe=o(" (UniSpeech model)"),oYe=l(),ag=a("li"),Kre=a("strong"),rYe=o("unispeech-sat"),tYe=o(" \u2014 "),PS=a("a"),aYe=o("UniSpeechSatConfig"),nYe=o(" (UniSpeechSat model)"),sYe=l(),ng=a("li"),Zre=a("strong"),lYe=o("van"),iYe=o(" \u2014 "),BS=a("a"),dYe=o("VanConfig"),cYe=o(" (VAN model)"),fYe=l(),sg=a("li"),ete=a("strong"),mYe=o("vilt"),gYe=o(" \u2014 "),IS=a("a"),hYe=o("ViltConfig"),pYe=o(" (ViLT model)"),uYe=l(),lg=a("li"),ote=a("strong"),_Ye=o("vision-encoder-decoder"),bYe=o(" \u2014 "),NS=a("a"),vYe=o("VisionEncoderDecoderConfig"),FYe=o(" (Vision Encoder decoder model)"),TYe=l(),ig=a("li"),rte=a("strong"),MYe=o("vision-text-dual-encoder"),EYe=o(" \u2014 "),qS=a("a"),CYe=o("VisionTextDualEncoderConfig"),wYe=o(" (VisionTextDualEncoder model)"),AYe=l(),dg=a("li"),tte=a("strong"),yYe=o("visual_bert"),LYe=o(" \u2014 "),jS=a("a"),xYe=o("VisualBertConfig"),$Ye=o(" (VisualBert model)"),kYe=l(),cg=a("li"),ate=a("strong"),SYe=o("vit"),RYe=o(" \u2014 "),DS=a("a"),PYe=o("ViTConfig"),BYe=o(" (ViT model)"),IYe=l(),fg=a("li"),nte=a("strong"),NYe=o("vit_mae"),qYe=o(" \u2014 "),GS=a("a"),jYe=o("ViTMAEConfig"),DYe=o(" (ViTMAE model)"),GYe=l(),mg=a("li"),ste=a("strong"),OYe=o("wav2vec2"),VYe=o(" \u2014 "),OS=a("a"),XYe=o("Wav2Vec2Config"),zYe=o(" (Wav2Vec2 model)"),WYe=l(),gg=a("li"),lte=a("strong"),QYe=o("wav2vec2-conformer"),HYe=o(" \u2014 "),VS=a("a"),UYe=o("Wav2Vec2ConformerConfig"),JYe=o(" (Wav2Vec2-Conformer model)"),YYe=l(),hg=a("li"),ite=a("strong"),KYe=o("wavlm"),ZYe=o(" \u2014 "),XS=a("a"),eKe=o("WavLMConfig"),oKe=o(" (WavLM model)"),rKe=l(),pg=a("li"),dte=a("strong"),tKe=o("xglm"),aKe=o(" \u2014 "),zS=a("a"),nKe=o("XGLMConfig"),sKe=o(" (XGLM model)"),lKe=l(),ug=a("li"),cte=a("strong"),iKe=o("xlm"),dKe=o(" \u2014 "),WS=a("a"),cKe=o("XLMConfig"),fKe=o(" (XLM model)"),mKe=l(),_g=a("li"),fte=a("strong"),gKe=o("xlm-prophetnet"),hKe=o(" \u2014 "),QS=a("a"),pKe=o("XLMProphetNetConfig"),uKe=o(" (XLMProphetNet model)"),_Ke=l(),bg=a("li"),mte=a("strong"),bKe=o("xlm-roberta"),vKe=o(" \u2014 "),HS=a("a"),FKe=o("XLMRobertaConfig"),TKe=o(" (XLM-RoBERTa model)"),MKe=l(),vg=a("li"),gte=a("strong"),EKe=o("xlm-roberta-xl"),CKe=o(" \u2014 "),US=a("a"),wKe=o("XLMRobertaXLConfig"),AKe=o(" (XLM-RoBERTa-XL model)"),yKe=l(),Fg=a("li"),hte=a("strong"),LKe=o("xlnet"),xKe=o(" \u2014 "),JS=a("a"),$Ke=o("XLNetConfig"),kKe=o(" (XLNet model)"),SKe=l(),Tg=a("li"),pte=a("strong"),RKe=o("yolos"),PKe=o(" \u2014 "),YS=a("a"),BKe=o("YolosConfig"),IKe=o(" (YOLOS model)"),NKe=l(),Mg=a("li"),ute=a("strong"),qKe=o("yoso"),jKe=o(" \u2014 "),KS=a("a"),DKe=o("YosoConfig"),GKe=o(" (YOSO model)"),OKe=l(),F(Eg.$$.fragment),VKe=l(),Cg=a("div"),F(PA.$$.fragment),XKe=l(),_te=a("p"),zKe=o("Register a new configuration for this class."),nqe=l(),Ti=a("h2"),wg=a("a"),bte=a("span"),F(BA.$$.fragment),WKe=l(),vte=a("span"),QKe=o("AutoTokenizer"),sqe=l(),wo=a("div"),F(IA.$$.fragment),HKe=l(),NA=a("p"),UKe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),ZS=a("a"),JKe=o("AutoTokenizer.from_pretrained()"),YKe=o(" class method."),KKe=l(),qA=a("p"),ZKe=o("This class cannot be instantiated directly using "),Fte=a("code"),eZe=o("__init__()"),oZe=o(" (throws an error)."),rZe=l(),Cr=a("div"),F(jA.$$.fragment),tZe=l(),Tte=a("p"),aZe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),nZe=l(),Aa=a("p"),sZe=o("The tokenizer class to instantiate is selected based on the "),Mte=a("code"),lZe=o("model_type"),iZe=o(` property of the config object (either
passed as an argument or loaded from `),Ete=a("code"),dZe=o("pretrained_model_name_or_path"),cZe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cte=a("code"),fZe=o("pretrained_model_name_or_path"),mZe=o(":"),gZe=l(),k=a("ul"),Sn=a("li"),wte=a("strong"),hZe=o("albert"),pZe=o(" \u2014 "),eR=a("a"),uZe=o("AlbertTokenizer"),_Ze=o(" or "),oR=a("a"),bZe=o("AlbertTokenizerFast"),vZe=o(" (ALBERT model)"),FZe=l(),Rn=a("li"),Ate=a("strong"),TZe=o("bart"),MZe=o(" \u2014 "),rR=a("a"),EZe=o("BartTokenizer"),CZe=o(" or "),tR=a("a"),wZe=o("BartTokenizerFast"),AZe=o(" (BART model)"),yZe=l(),Pn=a("li"),yte=a("strong"),LZe=o("barthez"),xZe=o(" \u2014 "),aR=a("a"),$Ze=o("BarthezTokenizer"),kZe=o(" or "),nR=a("a"),SZe=o("BarthezTokenizerFast"),RZe=o(" (BARThez model)"),PZe=l(),Ag=a("li"),Lte=a("strong"),BZe=o("bartpho"),IZe=o(" \u2014 "),sR=a("a"),NZe=o("BartphoTokenizer"),qZe=o(" (BARTpho model)"),jZe=l(),Bn=a("li"),xte=a("strong"),DZe=o("bert"),GZe=o(" \u2014 "),lR=a("a"),OZe=o("BertTokenizer"),VZe=o(" or "),iR=a("a"),XZe=o("BertTokenizerFast"),zZe=o(" (BERT model)"),WZe=l(),yg=a("li"),$te=a("strong"),QZe=o("bert-generation"),HZe=o(" \u2014 "),dR=a("a"),UZe=o("BertGenerationTokenizer"),JZe=o(" (Bert Generation model)"),YZe=l(),Lg=a("li"),kte=a("strong"),KZe=o("bert-japanese"),ZZe=o(" \u2014 "),cR=a("a"),eeo=o("BertJapaneseTokenizer"),oeo=o(" (BertJapanese model)"),reo=l(),xg=a("li"),Ste=a("strong"),teo=o("bertweet"),aeo=o(" \u2014 "),fR=a("a"),neo=o("BertweetTokenizer"),seo=o(" (Bertweet model)"),leo=l(),In=a("li"),Rte=a("strong"),ieo=o("big_bird"),deo=o(" \u2014 "),mR=a("a"),ceo=o("BigBirdTokenizer"),feo=o(" or "),gR=a("a"),meo=o("BigBirdTokenizerFast"),geo=o(" (BigBird model)"),heo=l(),Nn=a("li"),Pte=a("strong"),peo=o("bigbird_pegasus"),ueo=o(" \u2014 "),hR=a("a"),_eo=o("PegasusTokenizer"),beo=o(" or "),pR=a("a"),veo=o("PegasusTokenizerFast"),Feo=o(" (BigBirdPegasus model)"),Teo=l(),qn=a("li"),Bte=a("strong"),Meo=o("blenderbot"),Eeo=o(" \u2014 "),uR=a("a"),Ceo=o("BlenderbotTokenizer"),weo=o(" or "),_R=a("a"),Aeo=o("BlenderbotTokenizerFast"),yeo=o(" (Blenderbot model)"),Leo=l(),$g=a("li"),Ite=a("strong"),xeo=o("blenderbot-small"),$eo=o(" \u2014 "),bR=a("a"),keo=o("BlenderbotSmallTokenizer"),Seo=o(" (BlenderbotSmall model)"),Reo=l(),kg=a("li"),Nte=a("strong"),Peo=o("byt5"),Beo=o(" \u2014 "),vR=a("a"),Ieo=o("ByT5Tokenizer"),Neo=o(" (ByT5 model)"),qeo=l(),jn=a("li"),qte=a("strong"),jeo=o("camembert"),Deo=o(" \u2014 "),FR=a("a"),Geo=o("CamembertTokenizer"),Oeo=o(" or "),TR=a("a"),Veo=o("CamembertTokenizerFast"),Xeo=o(" (CamemBERT model)"),zeo=l(),Sg=a("li"),jte=a("strong"),Weo=o("canine"),Qeo=o(" \u2014 "),MR=a("a"),Heo=o("CanineTokenizer"),Ueo=o(" (Canine model)"),Jeo=l(),Dn=a("li"),Dte=a("strong"),Yeo=o("clip"),Keo=o(" \u2014 "),ER=a("a"),Zeo=o("CLIPTokenizer"),eoo=o(" or "),CR=a("a"),ooo=o("CLIPTokenizerFast"),roo=o(" (CLIP model)"),too=l(),Gn=a("li"),Gte=a("strong"),aoo=o("convbert"),noo=o(" \u2014 "),wR=a("a"),soo=o("ConvBertTokenizer"),loo=o(" or "),AR=a("a"),ioo=o("ConvBertTokenizerFast"),doo=o(" (ConvBERT model)"),coo=l(),On=a("li"),Ote=a("strong"),foo=o("cpm"),moo=o(" \u2014 "),yR=a("a"),goo=o("CpmTokenizer"),hoo=o(" or "),LR=a("a"),poo=o("CpmTokenizerFast"),uoo=o(" (CPM model)"),_oo=l(),Rg=a("li"),Vte=a("strong"),boo=o("ctrl"),voo=o(" \u2014 "),xR=a("a"),Foo=o("CTRLTokenizer"),Too=o(" (CTRL model)"),Moo=l(),Vn=a("li"),Xte=a("strong"),Eoo=o("data2vec-text"),Coo=o(" \u2014 "),$R=a("a"),woo=o("RobertaTokenizer"),Aoo=o(" or "),kR=a("a"),yoo=o("RobertaTokenizerFast"),Loo=o(" (Data2VecText model)"),xoo=l(),Xn=a("li"),zte=a("strong"),$oo=o("deberta"),koo=o(" \u2014 "),SR=a("a"),Soo=o("DebertaTokenizer"),Roo=o(" or "),RR=a("a"),Poo=o("DebertaTokenizerFast"),Boo=o(" (DeBERTa model)"),Ioo=l(),zn=a("li"),Wte=a("strong"),Noo=o("deberta-v2"),qoo=o(" \u2014 "),PR=a("a"),joo=o("DebertaV2Tokenizer"),Doo=o(" or "),BR=a("a"),Goo=o("DebertaV2TokenizerFast"),Ooo=o(" (DeBERTa-v2 model)"),Voo=l(),Wn=a("li"),Qte=a("strong"),Xoo=o("distilbert"),zoo=o(" \u2014 "),IR=a("a"),Woo=o("DistilBertTokenizer"),Qoo=o(" or "),NR=a("a"),Hoo=o("DistilBertTokenizerFast"),Uoo=o(" (DistilBERT model)"),Joo=l(),Qn=a("li"),Hte=a("strong"),Yoo=o("dpr"),Koo=o(" \u2014 "),qR=a("a"),Zoo=o("DPRQuestionEncoderTokenizer"),ero=o(" or "),jR=a("a"),oro=o("DPRQuestionEncoderTokenizerFast"),rro=o(" (DPR model)"),tro=l(),Hn=a("li"),Ute=a("strong"),aro=o("electra"),nro=o(" \u2014 "),DR=a("a"),sro=o("ElectraTokenizer"),lro=o(" or "),GR=a("a"),iro=o("ElectraTokenizerFast"),dro=o(" (ELECTRA model)"),cro=l(),Pg=a("li"),Jte=a("strong"),fro=o("flaubert"),mro=o(" \u2014 "),OR=a("a"),gro=o("FlaubertTokenizer"),hro=o(" (FlauBERT model)"),pro=l(),Un=a("li"),Yte=a("strong"),uro=o("fnet"),_ro=o(" \u2014 "),VR=a("a"),bro=o("FNetTokenizer"),vro=o(" or "),XR=a("a"),Fro=o("FNetTokenizerFast"),Tro=o(" (FNet model)"),Mro=l(),Bg=a("li"),Kte=a("strong"),Ero=o("fsmt"),Cro=o(" \u2014 "),zR=a("a"),wro=o("FSMTTokenizer"),Aro=o(" (FairSeq Machine-Translation model)"),yro=l(),Jn=a("li"),Zte=a("strong"),Lro=o("funnel"),xro=o(" \u2014 "),WR=a("a"),$ro=o("FunnelTokenizer"),kro=o(" or "),QR=a("a"),Sro=o("FunnelTokenizerFast"),Rro=o(" (Funnel Transformer model)"),Pro=l(),Yn=a("li"),eae=a("strong"),Bro=o("gpt2"),Iro=o(" \u2014 "),HR=a("a"),Nro=o("GPT2Tokenizer"),qro=o(" or "),UR=a("a"),jro=o("GPT2TokenizerFast"),Dro=o(" (OpenAI GPT-2 model)"),Gro=l(),Kn=a("li"),oae=a("strong"),Oro=o("gpt_neo"),Vro=o(" \u2014 "),JR=a("a"),Xro=o("GPT2Tokenizer"),zro=o(" or "),YR=a("a"),Wro=o("GPT2TokenizerFast"),Qro=o(" (GPT Neo model)"),Hro=l(),Ig=a("li"),rae=a("strong"),Uro=o("gpt_neox"),Jro=o(" \u2014 "),KR=a("a"),Yro=o("GPTNeoXTokenizerFast"),Kro=o(" (GPT NeoX model)"),Zro=l(),Zn=a("li"),tae=a("strong"),eto=o("gptj"),oto=o(" \u2014 "),ZR=a("a"),rto=o("GPT2Tokenizer"),tto=o(" or "),eP=a("a"),ato=o("GPT2TokenizerFast"),nto=o(" (GPT-J model)"),sto=l(),es=a("li"),aae=a("strong"),lto=o("herbert"),ito=o(" \u2014 "),oP=a("a"),dto=o("HerbertTokenizer"),cto=o(" or "),rP=a("a"),fto=o("HerbertTokenizerFast"),mto=o(" (HerBERT model)"),gto=l(),Ng=a("li"),nae=a("strong"),hto=o("hubert"),pto=o(" \u2014 "),tP=a("a"),uto=o("Wav2Vec2CTCTokenizer"),_to=o(" (Hubert model)"),bto=l(),os=a("li"),sae=a("strong"),vto=o("ibert"),Fto=o(" \u2014 "),aP=a("a"),Tto=o("RobertaTokenizer"),Mto=o(" or "),nP=a("a"),Eto=o("RobertaTokenizerFast"),Cto=o(" (I-BERT model)"),wto=l(),rs=a("li"),lae=a("strong"),Ato=o("layoutlm"),yto=o(" \u2014 "),sP=a("a"),Lto=o("LayoutLMTokenizer"),xto=o(" or "),lP=a("a"),$to=o("LayoutLMTokenizerFast"),kto=o(" (LayoutLM model)"),Sto=l(),ts=a("li"),iae=a("strong"),Rto=o("layoutlmv2"),Pto=o(" \u2014 "),iP=a("a"),Bto=o("LayoutLMv2Tokenizer"),Ito=o(" or "),dP=a("a"),Nto=o("LayoutLMv2TokenizerFast"),qto=o(" (LayoutLMv2 model)"),jto=l(),as=a("li"),dae=a("strong"),Dto=o("layoutlmv3"),Gto=o(" \u2014 "),cP=a("a"),Oto=o("LayoutLMv3Tokenizer"),Vto=o(" or "),fP=a("a"),Xto=o("LayoutLMv3TokenizerFast"),zto=o(" (LayoutLMv3 model)"),Wto=l(),ns=a("li"),cae=a("strong"),Qto=o("layoutxlm"),Hto=o(" \u2014 "),mP=a("a"),Uto=o("LayoutXLMTokenizer"),Jto=o(" or "),gP=a("a"),Yto=o("LayoutXLMTokenizerFast"),Kto=o(" (LayoutXLM model)"),Zto=l(),ss=a("li"),fae=a("strong"),eao=o("led"),oao=o(" \u2014 "),hP=a("a"),rao=o("LEDTokenizer"),tao=o(" or "),pP=a("a"),aao=o("LEDTokenizerFast"),nao=o(" (LED model)"),sao=l(),ls=a("li"),mae=a("strong"),lao=o("longformer"),iao=o(" \u2014 "),uP=a("a"),dao=o("LongformerTokenizer"),cao=o(" or "),_P=a("a"),fao=o("LongformerTokenizerFast"),mao=o(" (Longformer model)"),gao=l(),qg=a("li"),gae=a("strong"),hao=o("luke"),pao=o(" \u2014 "),bP=a("a"),uao=o("LukeTokenizer"),_ao=o(" (LUKE model)"),bao=l(),is=a("li"),hae=a("strong"),vao=o("lxmert"),Fao=o(" \u2014 "),vP=a("a"),Tao=o("LxmertTokenizer"),Mao=o(" or "),FP=a("a"),Eao=o("LxmertTokenizerFast"),Cao=o(" (LXMERT model)"),wao=l(),jg=a("li"),pae=a("strong"),Aao=o("m2m_100"),yao=o(" \u2014 "),TP=a("a"),Lao=o("M2M100Tokenizer"),xao=o(" (M2M100 model)"),$ao=l(),Dg=a("li"),uae=a("strong"),kao=o("marian"),Sao=o(" \u2014 "),MP=a("a"),Rao=o("MarianTokenizer"),Pao=o(" (Marian model)"),Bao=l(),ds=a("li"),_ae=a("strong"),Iao=o("mbart"),Nao=o(" \u2014 "),EP=a("a"),qao=o("MBartTokenizer"),jao=o(" or "),CP=a("a"),Dao=o("MBartTokenizerFast"),Gao=o(" (mBART model)"),Oao=l(),cs=a("li"),bae=a("strong"),Vao=o("mbart50"),Xao=o(" \u2014 "),wP=a("a"),zao=o("MBart50Tokenizer"),Wao=o(" or "),AP=a("a"),Qao=o("MBart50TokenizerFast"),Hao=o(" (mBART-50 model)"),Uao=l(),fs=a("li"),vae=a("strong"),Jao=o("megatron-bert"),Yao=o(" \u2014 "),yP=a("a"),Kao=o("BertTokenizer"),Zao=o(" or "),LP=a("a"),eno=o("BertTokenizerFast"),ono=o(" (MegatronBert model)"),rno=l(),Gg=a("li"),Fae=a("strong"),tno=o("mluke"),ano=o(" \u2014 "),xP=a("a"),nno=o("MLukeTokenizer"),sno=o(" (mLUKE model)"),lno=l(),ms=a("li"),Tae=a("strong"),ino=o("mobilebert"),dno=o(" \u2014 "),$P=a("a"),cno=o("MobileBertTokenizer"),fno=o(" or "),kP=a("a"),mno=o("MobileBertTokenizerFast"),gno=o(" (MobileBERT model)"),hno=l(),gs=a("li"),Mae=a("strong"),pno=o("mpnet"),uno=o(" \u2014 "),SP=a("a"),_no=o("MPNetTokenizer"),bno=o(" or "),RP=a("a"),vno=o("MPNetTokenizerFast"),Fno=o(" (MPNet model)"),Tno=l(),hs=a("li"),Eae=a("strong"),Mno=o("mt5"),Eno=o(" \u2014 "),PP=a("a"),Cno=o("MT5Tokenizer"),wno=o(" or "),BP=a("a"),Ano=o("MT5TokenizerFast"),yno=o(" (mT5 model)"),Lno=l(),ps=a("li"),Cae=a("strong"),xno=o("nystromformer"),$no=o(" \u2014 "),IP=a("a"),kno=o("AlbertTokenizer"),Sno=o(" or "),NP=a("a"),Rno=o("AlbertTokenizerFast"),Pno=o(" (Nystromformer model)"),Bno=l(),us=a("li"),wae=a("strong"),Ino=o("openai-gpt"),Nno=o(" \u2014 "),qP=a("a"),qno=o("OpenAIGPTTokenizer"),jno=o(" or "),jP=a("a"),Dno=o("OpenAIGPTTokenizerFast"),Gno=o(" (OpenAI GPT model)"),Ono=l(),Og=a("li"),Aae=a("strong"),Vno=o("opt"),Xno=o(" \u2014 "),DP=a("a"),zno=o("GPT2Tokenizer"),Wno=o(" (OPT model)"),Qno=l(),_s=a("li"),yae=a("strong"),Hno=o("pegasus"),Uno=o(" \u2014 "),GP=a("a"),Jno=o("PegasusTokenizer"),Yno=o(" or "),OP=a("a"),Kno=o("PegasusTokenizerFast"),Zno=o(" (Pegasus model)"),eso=l(),Vg=a("li"),Lae=a("strong"),oso=o("perceiver"),rso=o(" \u2014 "),VP=a("a"),tso=o("PerceiverTokenizer"),aso=o(" (Perceiver model)"),nso=l(),Xg=a("li"),xae=a("strong"),sso=o("phobert"),lso=o(" \u2014 "),XP=a("a"),iso=o("PhobertTokenizer"),dso=o(" (PhoBERT model)"),cso=l(),zg=a("li"),$ae=a("strong"),fso=o("plbart"),mso=o(" \u2014 "),zP=a("a"),gso=o("PLBartTokenizer"),hso=o(" (PLBart model)"),pso=l(),Wg=a("li"),kae=a("strong"),uso=o("prophetnet"),_so=o(" \u2014 "),WP=a("a"),bso=o("ProphetNetTokenizer"),vso=o(" (ProphetNet model)"),Fso=l(),bs=a("li"),Sae=a("strong"),Tso=o("qdqbert"),Mso=o(" \u2014 "),QP=a("a"),Eso=o("BertTokenizer"),Cso=o(" or "),HP=a("a"),wso=o("BertTokenizerFast"),Aso=o(" (QDQBert model)"),yso=l(),Qg=a("li"),Rae=a("strong"),Lso=o("rag"),xso=o(" \u2014 "),UP=a("a"),$so=o("RagTokenizer"),kso=o(" (RAG model)"),Sso=l(),vs=a("li"),Pae=a("strong"),Rso=o("realm"),Pso=o(" \u2014 "),JP=a("a"),Bso=o("RealmTokenizer"),Iso=o(" or "),YP=a("a"),Nso=o("RealmTokenizerFast"),qso=o(" (Realm model)"),jso=l(),Fs=a("li"),Bae=a("strong"),Dso=o("reformer"),Gso=o(" \u2014 "),KP=a("a"),Oso=o("ReformerTokenizer"),Vso=o(" or "),ZP=a("a"),Xso=o("ReformerTokenizerFast"),zso=o(" (Reformer model)"),Wso=l(),Ts=a("li"),Iae=a("strong"),Qso=o("rembert"),Hso=o(" \u2014 "),eB=a("a"),Uso=o("RemBertTokenizer"),Jso=o(" or "),oB=a("a"),Yso=o("RemBertTokenizerFast"),Kso=o(" (RemBERT model)"),Zso=l(),Ms=a("li"),Nae=a("strong"),elo=o("retribert"),olo=o(" \u2014 "),rB=a("a"),rlo=o("RetriBertTokenizer"),tlo=o(" or "),tB=a("a"),alo=o("RetriBertTokenizerFast"),nlo=o(" (RetriBERT model)"),slo=l(),Es=a("li"),qae=a("strong"),llo=o("roberta"),ilo=o(" \u2014 "),aB=a("a"),dlo=o("RobertaTokenizer"),clo=o(" or "),nB=a("a"),flo=o("RobertaTokenizerFast"),mlo=o(" (RoBERTa model)"),glo=l(),Cs=a("li"),jae=a("strong"),hlo=o("roformer"),plo=o(" \u2014 "),sB=a("a"),ulo=o("RoFormerTokenizer"),_lo=o(" or "),lB=a("a"),blo=o("RoFormerTokenizerFast"),vlo=o(" (RoFormer model)"),Flo=l(),Hg=a("li"),Dae=a("strong"),Tlo=o("speech_to_text"),Mlo=o(" \u2014 "),iB=a("a"),Elo=o("Speech2TextTokenizer"),Clo=o(" (Speech2Text model)"),wlo=l(),Ug=a("li"),Gae=a("strong"),Alo=o("speech_to_text_2"),ylo=o(" \u2014 "),dB=a("a"),Llo=o("Speech2Text2Tokenizer"),xlo=o(" (Speech2Text2 model)"),$lo=l(),ws=a("li"),Oae=a("strong"),klo=o("splinter"),Slo=o(" \u2014 "),cB=a("a"),Rlo=o("SplinterTokenizer"),Plo=o(" or "),fB=a("a"),Blo=o("SplinterTokenizerFast"),Ilo=o(" (Splinter model)"),Nlo=l(),As=a("li"),Vae=a("strong"),qlo=o("squeezebert"),jlo=o(" \u2014 "),mB=a("a"),Dlo=o("SqueezeBertTokenizer"),Glo=o(" or "),gB=a("a"),Olo=o("SqueezeBertTokenizerFast"),Vlo=o(" (SqueezeBERT model)"),Xlo=l(),ys=a("li"),Xae=a("strong"),zlo=o("t5"),Wlo=o(" \u2014 "),hB=a("a"),Qlo=o("T5Tokenizer"),Hlo=o(" or "),pB=a("a"),Ulo=o("T5TokenizerFast"),Jlo=o(" (T5 model)"),Ylo=l(),Jg=a("li"),zae=a("strong"),Klo=o("tapas"),Zlo=o(" \u2014 "),uB=a("a"),eio=o("TapasTokenizer"),oio=o(" (TAPAS model)"),rio=l(),Yg=a("li"),Wae=a("strong"),tio=o("tapex"),aio=o(" \u2014 "),_B=a("a"),nio=o("TapexTokenizer"),sio=o(" (TAPEX model)"),lio=l(),Kg=a("li"),Qae=a("strong"),iio=o("transfo-xl"),dio=o(" \u2014 "),bB=a("a"),cio=o("TransfoXLTokenizer"),fio=o(" (Transformer-XL model)"),mio=l(),Ls=a("li"),Hae=a("strong"),gio=o("visual_bert"),hio=o(" \u2014 "),vB=a("a"),pio=o("BertTokenizer"),uio=o(" or "),FB=a("a"),_io=o("BertTokenizerFast"),bio=o(" (VisualBert model)"),vio=l(),Zg=a("li"),Uae=a("strong"),Fio=o("wav2vec2"),Tio=o(" \u2014 "),TB=a("a"),Mio=o("Wav2Vec2CTCTokenizer"),Eio=o(" (Wav2Vec2 model)"),Cio=l(),eh=a("li"),Jae=a("strong"),wio=o("wav2vec2-conformer"),Aio=o(" \u2014 "),MB=a("a"),yio=o("Wav2Vec2CTCTokenizer"),Lio=o(" (Wav2Vec2-Conformer model)"),xio=l(),oh=a("li"),Yae=a("strong"),$io=o("wav2vec2_phoneme"),kio=o(" \u2014 "),EB=a("a"),Sio=o("Wav2Vec2PhonemeCTCTokenizer"),Rio=o(" (Wav2Vec2Phoneme model)"),Pio=l(),xs=a("li"),Kae=a("strong"),Bio=o("xglm"),Iio=o(" \u2014 "),CB=a("a"),Nio=o("XGLMTokenizer"),qio=o(" or "),wB=a("a"),jio=o("XGLMTokenizerFast"),Dio=o(" (XGLM model)"),Gio=l(),rh=a("li"),Zae=a("strong"),Oio=o("xlm"),Vio=o(" \u2014 "),AB=a("a"),Xio=o("XLMTokenizer"),zio=o(" (XLM model)"),Wio=l(),th=a("li"),ene=a("strong"),Qio=o("xlm-prophetnet"),Hio=o(" \u2014 "),yB=a("a"),Uio=o("XLMProphetNetTokenizer"),Jio=o(" (XLMProphetNet model)"),Yio=l(),$s=a("li"),one=a("strong"),Kio=o("xlm-roberta"),Zio=o(" \u2014 "),LB=a("a"),edo=o("XLMRobertaTokenizer"),odo=o(" or "),xB=a("a"),rdo=o("XLMRobertaTokenizerFast"),tdo=o(" (XLM-RoBERTa model)"),ado=l(),ks=a("li"),rne=a("strong"),ndo=o("xlm-roberta-xl"),sdo=o(" \u2014 "),$B=a("a"),ldo=o("RobertaTokenizer"),ido=o(" or "),kB=a("a"),ddo=o("RobertaTokenizerFast"),cdo=o(" (XLM-RoBERTa-XL model)"),fdo=l(),Ss=a("li"),tne=a("strong"),mdo=o("xlnet"),gdo=o(" \u2014 "),SB=a("a"),hdo=o("XLNetTokenizer"),pdo=o(" or "),RB=a("a"),udo=o("XLNetTokenizerFast"),_do=o(" (XLNet model)"),bdo=l(),Rs=a("li"),ane=a("strong"),vdo=o("yoso"),Fdo=o(" \u2014 "),PB=a("a"),Tdo=o("AlbertTokenizer"),Mdo=o(" or "),BB=a("a"),Edo=o("AlbertTokenizerFast"),Cdo=o(" (YOSO model)"),wdo=l(),F(ah.$$.fragment),Ado=l(),nh=a("div"),F(DA.$$.fragment),ydo=l(),nne=a("p"),Ldo=o("Register a new tokenizer in this mapping."),lqe=l(),Mi=a("h2"),sh=a("a"),sne=a("span"),F(GA.$$.fragment),xdo=l(),lne=a("span"),$do=o("AutoFeatureExtractor"),iqe=l(),Ao=a("div"),F(OA.$$.fragment),kdo=l(),VA=a("p"),Sdo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),IB=a("a"),Rdo=o("AutoFeatureExtractor.from_pretrained()"),Pdo=o(" class method."),Bdo=l(),XA=a("p"),Ido=o("This class cannot be instantiated directly using "),ine=a("code"),Ndo=o("__init__()"),qdo=o(" (throws an error)."),jdo=l(),He=a("div"),F(zA.$$.fragment),Ddo=l(),dne=a("p"),Gdo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Odo=l(),ya=a("p"),Vdo=o("The feature extractor class to instantiate is selected based on the "),cne=a("code"),Xdo=o("model_type"),zdo=o(` property of the config object
(either passed as an argument or loaded from `),fne=a("code"),Wdo=o("pretrained_model_name_or_path"),Qdo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),mne=a("code"),Hdo=o("pretrained_model_name_or_path"),Udo=o(":"),Jdo=l(),Y=a("ul"),lh=a("li"),gne=a("strong"),Ydo=o("beit"),Kdo=o(" \u2014 "),NB=a("a"),Zdo=o("BeitFeatureExtractor"),eco=o(" (BEiT model)"),oco=l(),ih=a("li"),hne=a("strong"),rco=o("clip"),tco=o(" \u2014 "),qB=a("a"),aco=o("CLIPFeatureExtractor"),nco=o(" (CLIP model)"),sco=l(),dh=a("li"),pne=a("strong"),lco=o("convnext"),ico=o(" \u2014 "),jB=a("a"),dco=o("ConvNextFeatureExtractor"),cco=o(" (ConvNext model)"),fco=l(),ch=a("li"),une=a("strong"),mco=o("cvt"),gco=o(" \u2014 "),DB=a("a"),hco=o("ConvNextFeatureExtractor"),pco=o(" (CvT model)"),uco=l(),fh=a("li"),_ne=a("strong"),_co=o("data2vec-audio"),bco=o(" \u2014 "),GB=a("a"),vco=o("Wav2Vec2FeatureExtractor"),Fco=o(" (Data2VecAudio model)"),Tco=l(),mh=a("li"),bne=a("strong"),Mco=o("data2vec-vision"),Eco=o(" \u2014 "),OB=a("a"),Cco=o("BeitFeatureExtractor"),wco=o(" (Data2VecVision model)"),Aco=l(),gh=a("li"),vne=a("strong"),yco=o("deit"),Lco=o(" \u2014 "),VB=a("a"),xco=o("DeiTFeatureExtractor"),$co=o(" (DeiT model)"),kco=l(),hh=a("li"),Fne=a("strong"),Sco=o("detr"),Rco=o(" \u2014 "),XB=a("a"),Pco=o("DetrFeatureExtractor"),Bco=o(" (DETR model)"),Ico=l(),ph=a("li"),Tne=a("strong"),Nco=o("dpt"),qco=o(" \u2014 "),zB=a("a"),jco=o("DPTFeatureExtractor"),Dco=o(" (DPT model)"),Gco=l(),uh=a("li"),Mne=a("strong"),Oco=o("flava"),Vco=o(" \u2014 "),WB=a("a"),Xco=o("FlavaFeatureExtractor"),zco=o(" (Flava model)"),Wco=l(),_h=a("li"),Ene=a("strong"),Qco=o("glpn"),Hco=o(" \u2014 "),QB=a("a"),Uco=o("GLPNFeatureExtractor"),Jco=o(" (GLPN model)"),Yco=l(),bh=a("li"),Cne=a("strong"),Kco=o("hubert"),Zco=o(" \u2014 "),HB=a("a"),efo=o("Wav2Vec2FeatureExtractor"),ofo=o(" (Hubert model)"),rfo=l(),vh=a("li"),wne=a("strong"),tfo=o("imagegpt"),afo=o(" \u2014 "),UB=a("a"),nfo=o("ImageGPTFeatureExtractor"),sfo=o(" (ImageGPT model)"),lfo=l(),Fh=a("li"),Ane=a("strong"),ifo=o("layoutlmv2"),dfo=o(" \u2014 "),JB=a("a"),cfo=o("LayoutLMv2FeatureExtractor"),ffo=o(" (LayoutLMv2 model)"),mfo=l(),Th=a("li"),yne=a("strong"),gfo=o("layoutlmv3"),hfo=o(" \u2014 "),YB=a("a"),pfo=o("LayoutLMv3FeatureExtractor"),ufo=o(" (LayoutLMv3 model)"),_fo=l(),Mh=a("li"),Lne=a("strong"),bfo=o("maskformer"),vfo=o(" \u2014 "),KB=a("a"),Ffo=o("MaskFormerFeatureExtractor"),Tfo=o(" (MaskFormer model)"),Mfo=l(),Eh=a("li"),xne=a("strong"),Efo=o("perceiver"),Cfo=o(" \u2014 "),ZB=a("a"),wfo=o("PerceiverFeatureExtractor"),Afo=o(" (Perceiver model)"),yfo=l(),Ch=a("li"),$ne=a("strong"),Lfo=o("poolformer"),xfo=o(" \u2014 "),eI=a("a"),$fo=o("PoolFormerFeatureExtractor"),kfo=o(" (PoolFormer model)"),Sfo=l(),wh=a("li"),kne=a("strong"),Rfo=o("regnet"),Pfo=o(" \u2014 "),oI=a("a"),Bfo=o("ConvNextFeatureExtractor"),Ifo=o(" (RegNet model)"),Nfo=l(),Ah=a("li"),Sne=a("strong"),qfo=o("resnet"),jfo=o(" \u2014 "),rI=a("a"),Dfo=o("ConvNextFeatureExtractor"),Gfo=o(" (ResNet model)"),Ofo=l(),yh=a("li"),Rne=a("strong"),Vfo=o("segformer"),Xfo=o(" \u2014 "),tI=a("a"),zfo=o("SegformerFeatureExtractor"),Wfo=o(" (SegFormer model)"),Qfo=l(),Lh=a("li"),Pne=a("strong"),Hfo=o("speech_to_text"),Ufo=o(" \u2014 "),aI=a("a"),Jfo=o("Speech2TextFeatureExtractor"),Yfo=o(" (Speech2Text model)"),Kfo=l(),xh=a("li"),Bne=a("strong"),Zfo=o("swin"),emo=o(" \u2014 "),nI=a("a"),omo=o("ViTFeatureExtractor"),rmo=o(" (Swin model)"),tmo=l(),$h=a("li"),Ine=a("strong"),amo=o("van"),nmo=o(" \u2014 "),sI=a("a"),smo=o("ConvNextFeatureExtractor"),lmo=o(" (VAN model)"),imo=l(),kh=a("li"),Nne=a("strong"),dmo=o("vit"),cmo=o(" \u2014 "),lI=a("a"),fmo=o("ViTFeatureExtractor"),mmo=o(" (ViT model)"),gmo=l(),Sh=a("li"),qne=a("strong"),hmo=o("vit_mae"),pmo=o(" \u2014 "),iI=a("a"),umo=o("ViTFeatureExtractor"),_mo=o(" (ViTMAE model)"),bmo=l(),Rh=a("li"),jne=a("strong"),vmo=o("wav2vec2"),Fmo=o(" \u2014 "),dI=a("a"),Tmo=o("Wav2Vec2FeatureExtractor"),Mmo=o(" (Wav2Vec2 model)"),Emo=l(),Ph=a("li"),Dne=a("strong"),Cmo=o("wav2vec2-conformer"),wmo=o(" \u2014 "),cI=a("a"),Amo=o("Wav2Vec2FeatureExtractor"),ymo=o(" (Wav2Vec2-Conformer model)"),Lmo=l(),Bh=a("li"),Gne=a("strong"),xmo=o("yolos"),$mo=o(" \u2014 "),fI=a("a"),kmo=o("YolosFeatureExtractor"),Smo=o(" (YOLOS model)"),Rmo=l(),F(Ih.$$.fragment),Pmo=l(),F(Nh.$$.fragment),Bmo=l(),qh=a("div"),F(WA.$$.fragment),Imo=l(),One=a("p"),Nmo=o("Register a new feature extractor for this class."),dqe=l(),Ei=a("h2"),jh=a("a"),Vne=a("span"),F(QA.$$.fragment),qmo=l(),Xne=a("span"),jmo=o("AutoProcessor"),cqe=l(),yo=a("div"),F(HA.$$.fragment),Dmo=l(),UA=a("p"),Gmo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),mI=a("a"),Omo=o("AutoProcessor.from_pretrained()"),Vmo=o(" class method."),Xmo=l(),JA=a("p"),zmo=o("This class cannot be instantiated directly using "),zne=a("code"),Wmo=o("__init__()"),Qmo=o(" (throws an error)."),Hmo=l(),Ue=a("div"),F(YA.$$.fragment),Umo=l(),Wne=a("p"),Jmo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Ymo=l(),Ci=a("p"),Kmo=o("The processor class to instantiate is selected based on the "),Qne=a("code"),Zmo=o("model_type"),ego=o(` property of the config object (either
passed as an argument or loaded from `),Hne=a("code"),ogo=o("pretrained_model_name_or_path"),rgo=o(" if possible):"),tgo=l(),he=a("ul"),Dh=a("li"),Une=a("strong"),ago=o("clip"),ngo=o(" \u2014 "),gI=a("a"),sgo=o("CLIPProcessor"),lgo=o(" (CLIP model)"),igo=l(),Gh=a("li"),Jne=a("strong"),dgo=o("flava"),cgo=o(" \u2014 "),Yne=a("code"),fgo=o("FLAVAProcessor"),mgo=o(" (Flava model)"),ggo=l(),Oh=a("li"),Kne=a("strong"),hgo=o("layoutlmv2"),pgo=o(" \u2014 "),hI=a("a"),ugo=o("LayoutLMv2Processor"),_go=o(" (LayoutLMv2 model)"),bgo=l(),Vh=a("li"),Zne=a("strong"),vgo=o("layoutlmv3"),Fgo=o(" \u2014 "),pI=a("a"),Tgo=o("LayoutLMv3Processor"),Mgo=o(" (LayoutLMv3 model)"),Ego=l(),Xh=a("li"),ese=a("strong"),Cgo=o("layoutxlm"),wgo=o(" \u2014 "),uI=a("a"),Ago=o("LayoutXLMProcessor"),ygo=o(" (LayoutXLM model)"),Lgo=l(),zh=a("li"),ose=a("strong"),xgo=o("sew"),$go=o(" \u2014 "),_I=a("a"),kgo=o("Wav2Vec2Processor"),Sgo=o(" (SEW model)"),Rgo=l(),Wh=a("li"),rse=a("strong"),Pgo=o("sew-d"),Bgo=o(" \u2014 "),bI=a("a"),Igo=o("Wav2Vec2Processor"),Ngo=o(" (SEW-D model)"),qgo=l(),Qh=a("li"),tse=a("strong"),jgo=o("speech_to_text"),Dgo=o(" \u2014 "),vI=a("a"),Ggo=o("Speech2TextProcessor"),Ogo=o(" (Speech2Text model)"),Vgo=l(),Hh=a("li"),ase=a("strong"),Xgo=o("speech_to_text_2"),zgo=o(" \u2014 "),FI=a("a"),Wgo=o("Speech2Text2Processor"),Qgo=o(" (Speech2Text2 model)"),Hgo=l(),Uh=a("li"),nse=a("strong"),Ugo=o("trocr"),Jgo=o(" \u2014 "),TI=a("a"),Ygo=o("TrOCRProcessor"),Kgo=o(" (TrOCR model)"),Zgo=l(),Jh=a("li"),sse=a("strong"),eho=o("unispeech"),oho=o(" \u2014 "),MI=a("a"),rho=o("Wav2Vec2Processor"),tho=o(" (UniSpeech model)"),aho=l(),Yh=a("li"),lse=a("strong"),nho=o("unispeech-sat"),sho=o(" \u2014 "),EI=a("a"),lho=o("Wav2Vec2Processor"),iho=o(" (UniSpeechSat model)"),dho=l(),Kh=a("li"),ise=a("strong"),cho=o("vilt"),fho=o(" \u2014 "),CI=a("a"),mho=o("ViltProcessor"),gho=o(" (ViLT model)"),hho=l(),Zh=a("li"),dse=a("strong"),pho=o("vision-text-dual-encoder"),uho=o(" \u2014 "),wI=a("a"),_ho=o("VisionTextDualEncoderProcessor"),bho=o(" (VisionTextDualEncoder model)"),vho=l(),ep=a("li"),cse=a("strong"),Fho=o("wav2vec2"),Tho=o(" \u2014 "),AI=a("a"),Mho=o("Wav2Vec2Processor"),Eho=o(" (Wav2Vec2 model)"),Cho=l(),op=a("li"),fse=a("strong"),who=o("wav2vec2-conformer"),Aho=o(" \u2014 "),yI=a("a"),yho=o("Wav2Vec2Processor"),Lho=o(" (Wav2Vec2-Conformer model)"),xho=l(),rp=a("li"),mse=a("strong"),$ho=o("wavlm"),kho=o(" \u2014 "),LI=a("a"),Sho=o("Wav2Vec2Processor"),Rho=o(" (WavLM model)"),Pho=l(),F(tp.$$.fragment),Bho=l(),F(ap.$$.fragment),Iho=l(),np=a("div"),F(KA.$$.fragment),Nho=l(),gse=a("p"),qho=o("Register a new processor for this class."),fqe=l(),wi=a("h2"),sp=a("a"),hse=a("span"),F(ZA.$$.fragment),jho=l(),pse=a("span"),Dho=o("AutoModel"),mqe=l(),Lo=a("div"),F(ey.$$.fragment),Gho=l(),Ai=a("p"),Oho=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),xI=a("a"),Vho=o("from_pretrained()"),Xho=o(" class method or the "),$I=a("a"),zho=o("from_config()"),Who=o(` class
method.`),Qho=l(),oy=a("p"),Hho=o("This class cannot be instantiated directly using "),use=a("code"),Uho=o("__init__()"),Jho=o(" (throws an error)."),Yho=l(),tt=a("div"),F(ry.$$.fragment),Kho=l(),_se=a("p"),Zho=o("Instantiates one of the base model classes of the library from a configuration."),epo=l(),yi=a("p"),opo=o(`Note:
Loading a model from its configuration file does `),bse=a("strong"),rpo=o("not"),tpo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kI=a("a"),apo=o("from_pretrained()"),npo=o(" to load the model weights."),spo=l(),F(lp.$$.fragment),lpo=l(),Je=a("div"),F(ty.$$.fragment),ipo=l(),vse=a("p"),dpo=o("Instantiate one of the base model classes of the library from a pretrained model."),cpo=l(),La=a("p"),fpo=o("The model class to instantiate is selected based on the "),Fse=a("code"),mpo=o("model_type"),gpo=o(` property of the config object (either
passed as an argument or loaded from `),Tse=a("code"),hpo=o("pretrained_model_name_or_path"),ppo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mse=a("code"),upo=o("pretrained_model_name_or_path"),_po=o(":"),bpo=l(),x=a("ul"),ip=a("li"),Ese=a("strong"),vpo=o("albert"),Fpo=o(" \u2014 "),SI=a("a"),Tpo=o("AlbertModel"),Mpo=o(" (ALBERT model)"),Epo=l(),dp=a("li"),Cse=a("strong"),Cpo=o("bart"),wpo=o(" \u2014 "),RI=a("a"),Apo=o("BartModel"),ypo=o(" (BART model)"),Lpo=l(),cp=a("li"),wse=a("strong"),xpo=o("beit"),$po=o(" \u2014 "),PI=a("a"),kpo=o("BeitModel"),Spo=o(" (BEiT model)"),Rpo=l(),fp=a("li"),Ase=a("strong"),Ppo=o("bert"),Bpo=o(" \u2014 "),BI=a("a"),Ipo=o("BertModel"),Npo=o(" (BERT model)"),qpo=l(),mp=a("li"),yse=a("strong"),jpo=o("bert-generation"),Dpo=o(" \u2014 "),II=a("a"),Gpo=o("BertGenerationEncoder"),Opo=o(" (Bert Generation model)"),Vpo=l(),gp=a("li"),Lse=a("strong"),Xpo=o("big_bird"),zpo=o(" \u2014 "),NI=a("a"),Wpo=o("BigBirdModel"),Qpo=o(" (BigBird model)"),Hpo=l(),hp=a("li"),xse=a("strong"),Upo=o("bigbird_pegasus"),Jpo=o(" \u2014 "),qI=a("a"),Ypo=o("BigBirdPegasusModel"),Kpo=o(" (BigBirdPegasus model)"),Zpo=l(),pp=a("li"),$se=a("strong"),euo=o("blenderbot"),ouo=o(" \u2014 "),jI=a("a"),ruo=o("BlenderbotModel"),tuo=o(" (Blenderbot model)"),auo=l(),up=a("li"),kse=a("strong"),nuo=o("blenderbot-small"),suo=o(" \u2014 "),DI=a("a"),luo=o("BlenderbotSmallModel"),iuo=o(" (BlenderbotSmall model)"),duo=l(),_p=a("li"),Sse=a("strong"),cuo=o("camembert"),fuo=o(" \u2014 "),GI=a("a"),muo=o("CamembertModel"),guo=o(" (CamemBERT model)"),huo=l(),bp=a("li"),Rse=a("strong"),puo=o("canine"),uuo=o(" \u2014 "),OI=a("a"),_uo=o("CanineModel"),buo=o(" (Canine model)"),vuo=l(),vp=a("li"),Pse=a("strong"),Fuo=o("clip"),Tuo=o(" \u2014 "),VI=a("a"),Muo=o("CLIPModel"),Euo=o(" (CLIP model)"),Cuo=l(),Fp=a("li"),Bse=a("strong"),wuo=o("convbert"),Auo=o(" \u2014 "),XI=a("a"),yuo=o("ConvBertModel"),Luo=o(" (ConvBERT model)"),xuo=l(),Tp=a("li"),Ise=a("strong"),$uo=o("convnext"),kuo=o(" \u2014 "),zI=a("a"),Suo=o("ConvNextModel"),Ruo=o(" (ConvNext model)"),Puo=l(),Mp=a("li"),Nse=a("strong"),Buo=o("ctrl"),Iuo=o(" \u2014 "),WI=a("a"),Nuo=o("CTRLModel"),quo=o(" (CTRL model)"),juo=l(),Ep=a("li"),qse=a("strong"),Duo=o("cvt"),Guo=o(" \u2014 "),QI=a("a"),Ouo=o("CvtModel"),Vuo=o(" (CvT model)"),Xuo=l(),Cp=a("li"),jse=a("strong"),zuo=o("data2vec-audio"),Wuo=o(" \u2014 "),HI=a("a"),Quo=o("Data2VecAudioModel"),Huo=o(" (Data2VecAudio model)"),Uuo=l(),wp=a("li"),Dse=a("strong"),Juo=o("data2vec-text"),Yuo=o(" \u2014 "),UI=a("a"),Kuo=o("Data2VecTextModel"),Zuo=o(" (Data2VecText model)"),e_o=l(),Ap=a("li"),Gse=a("strong"),o_o=o("data2vec-vision"),r_o=o(" \u2014 "),JI=a("a"),t_o=o("Data2VecVisionModel"),a_o=o(" (Data2VecVision model)"),n_o=l(),yp=a("li"),Ose=a("strong"),s_o=o("deberta"),l_o=o(" \u2014 "),YI=a("a"),i_o=o("DebertaModel"),d_o=o(" (DeBERTa model)"),c_o=l(),Lp=a("li"),Vse=a("strong"),f_o=o("deberta-v2"),m_o=o(" \u2014 "),KI=a("a"),g_o=o("DebertaV2Model"),h_o=o(" (DeBERTa-v2 model)"),p_o=l(),xp=a("li"),Xse=a("strong"),u_o=o("decision_transformer"),__o=o(" \u2014 "),ZI=a("a"),b_o=o("DecisionTransformerModel"),v_o=o(" (Decision Transformer model)"),F_o=l(),$p=a("li"),zse=a("strong"),T_o=o("deit"),M_o=o(" \u2014 "),eN=a("a"),E_o=o("DeiTModel"),C_o=o(" (DeiT model)"),w_o=l(),kp=a("li"),Wse=a("strong"),A_o=o("detr"),y_o=o(" \u2014 "),oN=a("a"),L_o=o("DetrModel"),x_o=o(" (DETR model)"),$_o=l(),Sp=a("li"),Qse=a("strong"),k_o=o("distilbert"),S_o=o(" \u2014 "),rN=a("a"),R_o=o("DistilBertModel"),P_o=o(" (DistilBERT model)"),B_o=l(),Rp=a("li"),Hse=a("strong"),I_o=o("dpr"),N_o=o(" \u2014 "),tN=a("a"),q_o=o("DPRQuestionEncoder"),j_o=o(" (DPR model)"),D_o=l(),Pp=a("li"),Use=a("strong"),G_o=o("dpt"),O_o=o(" \u2014 "),aN=a("a"),V_o=o("DPTModel"),X_o=o(" (DPT model)"),z_o=l(),Bp=a("li"),Jse=a("strong"),W_o=o("electra"),Q_o=o(" \u2014 "),nN=a("a"),H_o=o("ElectraModel"),U_o=o(" (ELECTRA model)"),J_o=l(),Ip=a("li"),Yse=a("strong"),Y_o=o("flaubert"),K_o=o(" \u2014 "),sN=a("a"),Z_o=o("FlaubertModel"),e1o=o(" (FlauBERT model)"),o1o=l(),Np=a("li"),Kse=a("strong"),r1o=o("flava"),t1o=o(" \u2014 "),lN=a("a"),a1o=o("FlavaModel"),n1o=o(" (Flava model)"),s1o=l(),qp=a("li"),Zse=a("strong"),l1o=o("fnet"),i1o=o(" \u2014 "),iN=a("a"),d1o=o("FNetModel"),c1o=o(" (FNet model)"),f1o=l(),jp=a("li"),ele=a("strong"),m1o=o("fsmt"),g1o=o(" \u2014 "),dN=a("a"),h1o=o("FSMTModel"),p1o=o(" (FairSeq Machine-Translation model)"),u1o=l(),Ps=a("li"),ole=a("strong"),_1o=o("funnel"),b1o=o(" \u2014 "),cN=a("a"),v1o=o("FunnelModel"),F1o=o(" or "),fN=a("a"),T1o=o("FunnelBaseModel"),M1o=o(" (Funnel Transformer model)"),E1o=l(),Dp=a("li"),rle=a("strong"),C1o=o("glpn"),w1o=o(" \u2014 "),mN=a("a"),A1o=o("GLPNModel"),y1o=o(" (GLPN model)"),L1o=l(),Gp=a("li"),tle=a("strong"),x1o=o("gpt2"),$1o=o(" \u2014 "),gN=a("a"),k1o=o("GPT2Model"),S1o=o(" (OpenAI GPT-2 model)"),R1o=l(),Op=a("li"),ale=a("strong"),P1o=o("gpt_neo"),B1o=o(" \u2014 "),hN=a("a"),I1o=o("GPTNeoModel"),N1o=o(" (GPT Neo model)"),q1o=l(),Vp=a("li"),nle=a("strong"),j1o=o("gpt_neox"),D1o=o(" \u2014 "),pN=a("a"),G1o=o("GPTNeoXModel"),O1o=o(" (GPT NeoX model)"),V1o=l(),Xp=a("li"),sle=a("strong"),X1o=o("gptj"),z1o=o(" \u2014 "),uN=a("a"),W1o=o("GPTJModel"),Q1o=o(" (GPT-J model)"),H1o=l(),zp=a("li"),lle=a("strong"),U1o=o("hubert"),J1o=o(" \u2014 "),_N=a("a"),Y1o=o("HubertModel"),K1o=o(" (Hubert model)"),Z1o=l(),Wp=a("li"),ile=a("strong"),e7o=o("ibert"),o7o=o(" \u2014 "),bN=a("a"),r7o=o("IBertModel"),t7o=o(" (I-BERT model)"),a7o=l(),Qp=a("li"),dle=a("strong"),n7o=o("imagegpt"),s7o=o(" \u2014 "),vN=a("a"),l7o=o("ImageGPTModel"),i7o=o(" (ImageGPT model)"),d7o=l(),Hp=a("li"),cle=a("strong"),c7o=o("layoutlm"),f7o=o(" \u2014 "),FN=a("a"),m7o=o("LayoutLMModel"),g7o=o(" (LayoutLM model)"),h7o=l(),Up=a("li"),fle=a("strong"),p7o=o("layoutlmv2"),u7o=o(" \u2014 "),TN=a("a"),_7o=o("LayoutLMv2Model"),b7o=o(" (LayoutLMv2 model)"),v7o=l(),Jp=a("li"),mle=a("strong"),F7o=o("layoutlmv3"),T7o=o(" \u2014 "),MN=a("a"),M7o=o("LayoutLMv3Model"),E7o=o(" (LayoutLMv3 model)"),C7o=l(),Yp=a("li"),gle=a("strong"),w7o=o("led"),A7o=o(" \u2014 "),EN=a("a"),y7o=o("LEDModel"),L7o=o(" (LED model)"),x7o=l(),Kp=a("li"),hle=a("strong"),$7o=o("longformer"),k7o=o(" \u2014 "),CN=a("a"),S7o=o("LongformerModel"),R7o=o(" (Longformer model)"),P7o=l(),Zp=a("li"),ple=a("strong"),B7o=o("luke"),I7o=o(" \u2014 "),wN=a("a"),N7o=o("LukeModel"),q7o=o(" (LUKE model)"),j7o=l(),eu=a("li"),ule=a("strong"),D7o=o("lxmert"),G7o=o(" \u2014 "),AN=a("a"),O7o=o("LxmertModel"),V7o=o(" (LXMERT model)"),X7o=l(),ou=a("li"),_le=a("strong"),z7o=o("m2m_100"),W7o=o(" \u2014 "),yN=a("a"),Q7o=o("M2M100Model"),H7o=o(" (M2M100 model)"),U7o=l(),ru=a("li"),ble=a("strong"),J7o=o("marian"),Y7o=o(" \u2014 "),LN=a("a"),K7o=o("MarianModel"),Z7o=o(" (Marian model)"),ebo=l(),tu=a("li"),vle=a("strong"),obo=o("maskformer"),rbo=o(" \u2014 "),xN=a("a"),tbo=o("MaskFormerModel"),abo=o(" (MaskFormer model)"),nbo=l(),au=a("li"),Fle=a("strong"),sbo=o("mbart"),lbo=o(" \u2014 "),$N=a("a"),ibo=o("MBartModel"),dbo=o(" (mBART model)"),cbo=l(),nu=a("li"),Tle=a("strong"),fbo=o("megatron-bert"),mbo=o(" \u2014 "),kN=a("a"),gbo=o("MegatronBertModel"),hbo=o(" (MegatronBert model)"),pbo=l(),su=a("li"),Mle=a("strong"),ubo=o("mobilebert"),_bo=o(" \u2014 "),SN=a("a"),bbo=o("MobileBertModel"),vbo=o(" (MobileBERT model)"),Fbo=l(),lu=a("li"),Ele=a("strong"),Tbo=o("mpnet"),Mbo=o(" \u2014 "),RN=a("a"),Ebo=o("MPNetModel"),Cbo=o(" (MPNet model)"),wbo=l(),iu=a("li"),Cle=a("strong"),Abo=o("mt5"),ybo=o(" \u2014 "),PN=a("a"),Lbo=o("MT5Model"),xbo=o(" (mT5 model)"),$bo=l(),du=a("li"),wle=a("strong"),kbo=o("nystromformer"),Sbo=o(" \u2014 "),BN=a("a"),Rbo=o("NystromformerModel"),Pbo=o(" (Nystromformer model)"),Bbo=l(),cu=a("li"),Ale=a("strong"),Ibo=o("openai-gpt"),Nbo=o(" \u2014 "),IN=a("a"),qbo=o("OpenAIGPTModel"),jbo=o(" (OpenAI GPT model)"),Dbo=l(),fu=a("li"),yle=a("strong"),Gbo=o("opt"),Obo=o(" \u2014 "),NN=a("a"),Vbo=o("OPTModel"),Xbo=o(" (OPT model)"),zbo=l(),mu=a("li"),Lle=a("strong"),Wbo=o("pegasus"),Qbo=o(" \u2014 "),qN=a("a"),Hbo=o("PegasusModel"),Ubo=o(" (Pegasus model)"),Jbo=l(),gu=a("li"),xle=a("strong"),Ybo=o("perceiver"),Kbo=o(" \u2014 "),jN=a("a"),Zbo=o("PerceiverModel"),e2o=o(" (Perceiver model)"),o2o=l(),hu=a("li"),$le=a("strong"),r2o=o("plbart"),t2o=o(" \u2014 "),DN=a("a"),a2o=o("PLBartModel"),n2o=o(" (PLBart model)"),s2o=l(),pu=a("li"),kle=a("strong"),l2o=o("poolformer"),i2o=o(" \u2014 "),GN=a("a"),d2o=o("PoolFormerModel"),c2o=o(" (PoolFormer model)"),f2o=l(),uu=a("li"),Sle=a("strong"),m2o=o("prophetnet"),g2o=o(" \u2014 "),ON=a("a"),h2o=o("ProphetNetModel"),p2o=o(" (ProphetNet model)"),u2o=l(),_u=a("li"),Rle=a("strong"),_2o=o("qdqbert"),b2o=o(" \u2014 "),VN=a("a"),v2o=o("QDQBertModel"),F2o=o(" (QDQBert model)"),T2o=l(),bu=a("li"),Ple=a("strong"),M2o=o("reformer"),E2o=o(" \u2014 "),XN=a("a"),C2o=o("ReformerModel"),w2o=o(" (Reformer model)"),A2o=l(),vu=a("li"),Ble=a("strong"),y2o=o("regnet"),L2o=o(" \u2014 "),zN=a("a"),x2o=o("RegNetModel"),$2o=o(" (RegNet model)"),k2o=l(),Fu=a("li"),Ile=a("strong"),S2o=o("rembert"),R2o=o(" \u2014 "),WN=a("a"),P2o=o("RemBertModel"),B2o=o(" (RemBERT model)"),I2o=l(),Tu=a("li"),Nle=a("strong"),N2o=o("resnet"),q2o=o(" \u2014 "),QN=a("a"),j2o=o("ResNetModel"),D2o=o(" (ResNet model)"),G2o=l(),Mu=a("li"),qle=a("strong"),O2o=o("retribert"),V2o=o(" \u2014 "),HN=a("a"),X2o=o("RetriBertModel"),z2o=o(" (RetriBERT model)"),W2o=l(),Eu=a("li"),jle=a("strong"),Q2o=o("roberta"),H2o=o(" \u2014 "),UN=a("a"),U2o=o("RobertaModel"),J2o=o(" (RoBERTa model)"),Y2o=l(),Cu=a("li"),Dle=a("strong"),K2o=o("roformer"),Z2o=o(" \u2014 "),JN=a("a"),e4o=o("RoFormerModel"),o4o=o(" (RoFormer model)"),r4o=l(),wu=a("li"),Gle=a("strong"),t4o=o("segformer"),a4o=o(" \u2014 "),YN=a("a"),n4o=o("SegformerModel"),s4o=o(" (SegFormer model)"),l4o=l(),Au=a("li"),Ole=a("strong"),i4o=o("sew"),d4o=o(" \u2014 "),KN=a("a"),c4o=o("SEWModel"),f4o=o(" (SEW model)"),m4o=l(),yu=a("li"),Vle=a("strong"),g4o=o("sew-d"),h4o=o(" \u2014 "),ZN=a("a"),p4o=o("SEWDModel"),u4o=o(" (SEW-D model)"),_4o=l(),Lu=a("li"),Xle=a("strong"),b4o=o("speech_to_text"),v4o=o(" \u2014 "),eq=a("a"),F4o=o("Speech2TextModel"),T4o=o(" (Speech2Text model)"),M4o=l(),xu=a("li"),zle=a("strong"),E4o=o("splinter"),C4o=o(" \u2014 "),oq=a("a"),w4o=o("SplinterModel"),A4o=o(" (Splinter model)"),y4o=l(),$u=a("li"),Wle=a("strong"),L4o=o("squeezebert"),x4o=o(" \u2014 "),rq=a("a"),$4o=o("SqueezeBertModel"),k4o=o(" (SqueezeBERT model)"),S4o=l(),ku=a("li"),Qle=a("strong"),R4o=o("swin"),P4o=o(" \u2014 "),tq=a("a"),B4o=o("SwinModel"),I4o=o(" (Swin model)"),N4o=l(),Su=a("li"),Hle=a("strong"),q4o=o("t5"),j4o=o(" \u2014 "),aq=a("a"),D4o=o("T5Model"),G4o=o(" (T5 model)"),O4o=l(),Ru=a("li"),Ule=a("strong"),V4o=o("tapas"),X4o=o(" \u2014 "),nq=a("a"),z4o=o("TapasModel"),W4o=o(" (TAPAS model)"),Q4o=l(),Pu=a("li"),Jle=a("strong"),H4o=o("trajectory_transformer"),U4o=o(" \u2014 "),sq=a("a"),J4o=o("TrajectoryTransformerModel"),Y4o=o(" (Trajectory Transformer model)"),K4o=l(),Bu=a("li"),Yle=a("strong"),Z4o=o("transfo-xl"),evo=o(" \u2014 "),lq=a("a"),ovo=o("TransfoXLModel"),rvo=o(" (Transformer-XL model)"),tvo=l(),Iu=a("li"),Kle=a("strong"),avo=o("unispeech"),nvo=o(" \u2014 "),iq=a("a"),svo=o("UniSpeechModel"),lvo=o(" (UniSpeech model)"),ivo=l(),Nu=a("li"),Zle=a("strong"),dvo=o("unispeech-sat"),cvo=o(" \u2014 "),dq=a("a"),fvo=o("UniSpeechSatModel"),mvo=o(" (UniSpeechSat model)"),gvo=l(),qu=a("li"),eie=a("strong"),hvo=o("van"),pvo=o(" \u2014 "),cq=a("a"),uvo=o("VanModel"),_vo=o(" (VAN model)"),bvo=l(),ju=a("li"),oie=a("strong"),vvo=o("vilt"),Fvo=o(" \u2014 "),fq=a("a"),Tvo=o("ViltModel"),Mvo=o(" (ViLT model)"),Evo=l(),Du=a("li"),rie=a("strong"),Cvo=o("vision-text-dual-encoder"),wvo=o(" \u2014 "),mq=a("a"),Avo=o("VisionTextDualEncoderModel"),yvo=o(" (VisionTextDualEncoder model)"),Lvo=l(),Gu=a("li"),tie=a("strong"),xvo=o("visual_bert"),$vo=o(" \u2014 "),gq=a("a"),kvo=o("VisualBertModel"),Svo=o(" (VisualBert model)"),Rvo=l(),Ou=a("li"),aie=a("strong"),Pvo=o("vit"),Bvo=o(" \u2014 "),hq=a("a"),Ivo=o("ViTModel"),Nvo=o(" (ViT model)"),qvo=l(),Vu=a("li"),nie=a("strong"),jvo=o("vit_mae"),Dvo=o(" \u2014 "),pq=a("a"),Gvo=o("ViTMAEModel"),Ovo=o(" (ViTMAE model)"),Vvo=l(),Xu=a("li"),sie=a("strong"),Xvo=o("wav2vec2"),zvo=o(" \u2014 "),uq=a("a"),Wvo=o("Wav2Vec2Model"),Qvo=o(" (Wav2Vec2 model)"),Hvo=l(),zu=a("li"),lie=a("strong"),Uvo=o("wav2vec2-conformer"),Jvo=o(" \u2014 "),_q=a("a"),Yvo=o("Wav2Vec2ConformerModel"),Kvo=o(" (Wav2Vec2-Conformer model)"),Zvo=l(),Wu=a("li"),iie=a("strong"),eFo=o("wavlm"),oFo=o(" \u2014 "),bq=a("a"),rFo=o("WavLMModel"),tFo=o(" (WavLM model)"),aFo=l(),Qu=a("li"),die=a("strong"),nFo=o("xglm"),sFo=o(" \u2014 "),vq=a("a"),lFo=o("XGLMModel"),iFo=o(" (XGLM model)"),dFo=l(),Hu=a("li"),cie=a("strong"),cFo=o("xlm"),fFo=o(" \u2014 "),Fq=a("a"),mFo=o("XLMModel"),gFo=o(" (XLM model)"),hFo=l(),Uu=a("li"),fie=a("strong"),pFo=o("xlm-prophetnet"),uFo=o(" \u2014 "),Tq=a("a"),_Fo=o("XLMProphetNetModel"),bFo=o(" (XLMProphetNet model)"),vFo=l(),Ju=a("li"),mie=a("strong"),FFo=o("xlm-roberta"),TFo=o(" \u2014 "),Mq=a("a"),MFo=o("XLMRobertaModel"),EFo=o(" (XLM-RoBERTa model)"),CFo=l(),Yu=a("li"),gie=a("strong"),wFo=o("xlm-roberta-xl"),AFo=o(" \u2014 "),Eq=a("a"),yFo=o("XLMRobertaXLModel"),LFo=o(" (XLM-RoBERTa-XL model)"),xFo=l(),Ku=a("li"),hie=a("strong"),$Fo=o("xlnet"),kFo=o(" \u2014 "),Cq=a("a"),SFo=o("XLNetModel"),RFo=o(" (XLNet model)"),PFo=l(),Zu=a("li"),pie=a("strong"),BFo=o("yolos"),IFo=o(" \u2014 "),wq=a("a"),NFo=o("YolosModel"),qFo=o(" (YOLOS model)"),jFo=l(),e_=a("li"),uie=a("strong"),DFo=o("yoso"),GFo=o(" \u2014 "),Aq=a("a"),OFo=o("YosoModel"),VFo=o(" (YOSO model)"),XFo=l(),o_=a("p"),zFo=o("The model is set in evaluation mode by default using "),_ie=a("code"),WFo=o("model.eval()"),QFo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bie=a("code"),HFo=o("model.train()"),UFo=l(),F(r_.$$.fragment),gqe=l(),Li=a("h2"),t_=a("a"),vie=a("span"),F(ay.$$.fragment),JFo=l(),Fie=a("span"),YFo=o("AutoModelForPreTraining"),hqe=l(),xo=a("div"),F(ny.$$.fragment),KFo=l(),xi=a("p"),ZFo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),yq=a("a"),e0o=o("from_pretrained()"),o0o=o(" class method or the "),Lq=a("a"),r0o=o("from_config()"),t0o=o(` class
method.`),a0o=l(),sy=a("p"),n0o=o("This class cannot be instantiated directly using "),Tie=a("code"),s0o=o("__init__()"),l0o=o(" (throws an error)."),i0o=l(),at=a("div"),F(ly.$$.fragment),d0o=l(),Mie=a("p"),c0o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),f0o=l(),$i=a("p"),m0o=o(`Note:
Loading a model from its configuration file does `),Eie=a("strong"),g0o=o("not"),h0o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xq=a("a"),p0o=o("from_pretrained()"),u0o=o(" to load the model weights."),_0o=l(),F(a_.$$.fragment),b0o=l(),Ye=a("div"),F(iy.$$.fragment),v0o=l(),Cie=a("p"),F0o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),T0o=l(),xa=a("p"),M0o=o("The model class to instantiate is selected based on the "),wie=a("code"),E0o=o("model_type"),C0o=o(` property of the config object (either
passed as an argument or loaded from `),Aie=a("code"),w0o=o("pretrained_model_name_or_path"),A0o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yie=a("code"),y0o=o("pretrained_model_name_or_path"),L0o=o(":"),x0o=l(),G=a("ul"),n_=a("li"),Lie=a("strong"),$0o=o("albert"),k0o=o(" \u2014 "),$q=a("a"),S0o=o("AlbertForPreTraining"),R0o=o(" (ALBERT model)"),P0o=l(),s_=a("li"),xie=a("strong"),B0o=o("bart"),I0o=o(" \u2014 "),kq=a("a"),N0o=o("BartForConditionalGeneration"),q0o=o(" (BART model)"),j0o=l(),l_=a("li"),$ie=a("strong"),D0o=o("bert"),G0o=o(" \u2014 "),Sq=a("a"),O0o=o("BertForPreTraining"),V0o=o(" (BERT model)"),X0o=l(),i_=a("li"),kie=a("strong"),z0o=o("big_bird"),W0o=o(" \u2014 "),Rq=a("a"),Q0o=o("BigBirdForPreTraining"),H0o=o(" (BigBird model)"),U0o=l(),d_=a("li"),Sie=a("strong"),J0o=o("camembert"),Y0o=o(" \u2014 "),Pq=a("a"),K0o=o("CamembertForMaskedLM"),Z0o=o(" (CamemBERT model)"),eTo=l(),c_=a("li"),Rie=a("strong"),oTo=o("ctrl"),rTo=o(" \u2014 "),Bq=a("a"),tTo=o("CTRLLMHeadModel"),aTo=o(" (CTRL model)"),nTo=l(),f_=a("li"),Pie=a("strong"),sTo=o("data2vec-text"),lTo=o(" \u2014 "),Iq=a("a"),iTo=o("Data2VecTextForMaskedLM"),dTo=o(" (Data2VecText model)"),cTo=l(),m_=a("li"),Bie=a("strong"),fTo=o("deberta"),mTo=o(" \u2014 "),Nq=a("a"),gTo=o("DebertaForMaskedLM"),hTo=o(" (DeBERTa model)"),pTo=l(),g_=a("li"),Iie=a("strong"),uTo=o("deberta-v2"),_To=o(" \u2014 "),qq=a("a"),bTo=o("DebertaV2ForMaskedLM"),vTo=o(" (DeBERTa-v2 model)"),FTo=l(),h_=a("li"),Nie=a("strong"),TTo=o("distilbert"),MTo=o(" \u2014 "),jq=a("a"),ETo=o("DistilBertForMaskedLM"),CTo=o(" (DistilBERT model)"),wTo=l(),p_=a("li"),qie=a("strong"),ATo=o("electra"),yTo=o(" \u2014 "),Dq=a("a"),LTo=o("ElectraForPreTraining"),xTo=o(" (ELECTRA model)"),$To=l(),u_=a("li"),jie=a("strong"),kTo=o("flaubert"),STo=o(" \u2014 "),Gq=a("a"),RTo=o("FlaubertWithLMHeadModel"),PTo=o(" (FlauBERT model)"),BTo=l(),__=a("li"),Die=a("strong"),ITo=o("flava"),NTo=o(" \u2014 "),Oq=a("a"),qTo=o("FlavaForPreTraining"),jTo=o(" (Flava model)"),DTo=l(),b_=a("li"),Gie=a("strong"),GTo=o("fnet"),OTo=o(" \u2014 "),Vq=a("a"),VTo=o("FNetForPreTraining"),XTo=o(" (FNet model)"),zTo=l(),v_=a("li"),Oie=a("strong"),WTo=o("fsmt"),QTo=o(" \u2014 "),Xq=a("a"),HTo=o("FSMTForConditionalGeneration"),UTo=o(" (FairSeq Machine-Translation model)"),JTo=l(),F_=a("li"),Vie=a("strong"),YTo=o("funnel"),KTo=o(" \u2014 "),zq=a("a"),ZTo=o("FunnelForPreTraining"),eMo=o(" (Funnel Transformer model)"),oMo=l(),T_=a("li"),Xie=a("strong"),rMo=o("gpt2"),tMo=o(" \u2014 "),Wq=a("a"),aMo=o("GPT2LMHeadModel"),nMo=o(" (OpenAI GPT-2 model)"),sMo=l(),M_=a("li"),zie=a("strong"),lMo=o("ibert"),iMo=o(" \u2014 "),Qq=a("a"),dMo=o("IBertForMaskedLM"),cMo=o(" (I-BERT model)"),fMo=l(),E_=a("li"),Wie=a("strong"),mMo=o("layoutlm"),gMo=o(" \u2014 "),Hq=a("a"),hMo=o("LayoutLMForMaskedLM"),pMo=o(" (LayoutLM model)"),uMo=l(),C_=a("li"),Qie=a("strong"),_Mo=o("longformer"),bMo=o(" \u2014 "),Uq=a("a"),vMo=o("LongformerForMaskedLM"),FMo=o(" (Longformer model)"),TMo=l(),w_=a("li"),Hie=a("strong"),MMo=o("lxmert"),EMo=o(" \u2014 "),Jq=a("a"),CMo=o("LxmertForPreTraining"),wMo=o(" (LXMERT model)"),AMo=l(),A_=a("li"),Uie=a("strong"),yMo=o("megatron-bert"),LMo=o(" \u2014 "),Yq=a("a"),xMo=o("MegatronBertForPreTraining"),$Mo=o(" (MegatronBert model)"),kMo=l(),y_=a("li"),Jie=a("strong"),SMo=o("mobilebert"),RMo=o(" \u2014 "),Kq=a("a"),PMo=o("MobileBertForPreTraining"),BMo=o(" (MobileBERT model)"),IMo=l(),L_=a("li"),Yie=a("strong"),NMo=o("mpnet"),qMo=o(" \u2014 "),Zq=a("a"),jMo=o("MPNetForMaskedLM"),DMo=o(" (MPNet model)"),GMo=l(),x_=a("li"),Kie=a("strong"),OMo=o("openai-gpt"),VMo=o(" \u2014 "),ej=a("a"),XMo=o("OpenAIGPTLMHeadModel"),zMo=o(" (OpenAI GPT model)"),WMo=l(),$_=a("li"),Zie=a("strong"),QMo=o("retribert"),HMo=o(" \u2014 "),oj=a("a"),UMo=o("RetriBertModel"),JMo=o(" (RetriBERT model)"),YMo=l(),k_=a("li"),ede=a("strong"),KMo=o("roberta"),ZMo=o(" \u2014 "),rj=a("a"),eEo=o("RobertaForMaskedLM"),oEo=o(" (RoBERTa model)"),rEo=l(),S_=a("li"),ode=a("strong"),tEo=o("splinter"),aEo=o(" \u2014 "),tj=a("a"),nEo=o("SplinterForPreTraining"),sEo=o(" (Splinter model)"),lEo=l(),R_=a("li"),rde=a("strong"),iEo=o("squeezebert"),dEo=o(" \u2014 "),aj=a("a"),cEo=o("SqueezeBertForMaskedLM"),fEo=o(" (SqueezeBERT model)"),mEo=l(),P_=a("li"),tde=a("strong"),gEo=o("t5"),hEo=o(" \u2014 "),nj=a("a"),pEo=o("T5ForConditionalGeneration"),uEo=o(" (T5 model)"),_Eo=l(),B_=a("li"),ade=a("strong"),bEo=o("tapas"),vEo=o(" \u2014 "),sj=a("a"),FEo=o("TapasForMaskedLM"),TEo=o(" (TAPAS model)"),MEo=l(),I_=a("li"),nde=a("strong"),EEo=o("transfo-xl"),CEo=o(" \u2014 "),lj=a("a"),wEo=o("TransfoXLLMHeadModel"),AEo=o(" (Transformer-XL model)"),yEo=l(),N_=a("li"),sde=a("strong"),LEo=o("unispeech"),xEo=o(" \u2014 "),ij=a("a"),$Eo=o("UniSpeechForPreTraining"),kEo=o(" (UniSpeech model)"),SEo=l(),q_=a("li"),lde=a("strong"),REo=o("unispeech-sat"),PEo=o(" \u2014 "),dj=a("a"),BEo=o("UniSpeechSatForPreTraining"),IEo=o(" (UniSpeechSat model)"),NEo=l(),j_=a("li"),ide=a("strong"),qEo=o("visual_bert"),jEo=o(" \u2014 "),cj=a("a"),DEo=o("VisualBertForPreTraining"),GEo=o(" (VisualBert model)"),OEo=l(),D_=a("li"),dde=a("strong"),VEo=o("vit_mae"),XEo=o(" \u2014 "),fj=a("a"),zEo=o("ViTMAEForPreTraining"),WEo=o(" (ViTMAE model)"),QEo=l(),G_=a("li"),cde=a("strong"),HEo=o("wav2vec2"),UEo=o(" \u2014 "),mj=a("a"),JEo=o("Wav2Vec2ForPreTraining"),YEo=o(" (Wav2Vec2 model)"),KEo=l(),O_=a("li"),fde=a("strong"),ZEo=o("wav2vec2-conformer"),eCo=o(" \u2014 "),gj=a("a"),oCo=o("Wav2Vec2ConformerForPreTraining"),rCo=o(" (Wav2Vec2-Conformer model)"),tCo=l(),V_=a("li"),mde=a("strong"),aCo=o("xlm"),nCo=o(" \u2014 "),hj=a("a"),sCo=o("XLMWithLMHeadModel"),lCo=o(" (XLM model)"),iCo=l(),X_=a("li"),gde=a("strong"),dCo=o("xlm-roberta"),cCo=o(" \u2014 "),pj=a("a"),fCo=o("XLMRobertaForMaskedLM"),mCo=o(" (XLM-RoBERTa model)"),gCo=l(),z_=a("li"),hde=a("strong"),hCo=o("xlm-roberta-xl"),pCo=o(" \u2014 "),uj=a("a"),uCo=o("XLMRobertaXLForMaskedLM"),_Co=o(" (XLM-RoBERTa-XL model)"),bCo=l(),W_=a("li"),pde=a("strong"),vCo=o("xlnet"),FCo=o(" \u2014 "),_j=a("a"),TCo=o("XLNetLMHeadModel"),MCo=o(" (XLNet model)"),ECo=l(),Q_=a("p"),CCo=o("The model is set in evaluation mode by default using "),ude=a("code"),wCo=o("model.eval()"),ACo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_de=a("code"),yCo=o("model.train()"),LCo=l(),F(H_.$$.fragment),pqe=l(),ki=a("h2"),U_=a("a"),bde=a("span"),F(dy.$$.fragment),xCo=l(),vde=a("span"),$Co=o("AutoModelForCausalLM"),uqe=l(),$o=a("div"),F(cy.$$.fragment),kCo=l(),Si=a("p"),SCo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),bj=a("a"),RCo=o("from_pretrained()"),PCo=o(" class method or the "),vj=a("a"),BCo=o("from_config()"),ICo=o(` class
method.`),NCo=l(),fy=a("p"),qCo=o("This class cannot be instantiated directly using "),Fde=a("code"),jCo=o("__init__()"),DCo=o(" (throws an error)."),GCo=l(),nt=a("div"),F(my.$$.fragment),OCo=l(),Tde=a("p"),VCo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),XCo=l(),Ri=a("p"),zCo=o(`Note:
Loading a model from its configuration file does `),Mde=a("strong"),WCo=o("not"),QCo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Fj=a("a"),HCo=o("from_pretrained()"),UCo=o(" to load the model weights."),JCo=l(),F(J_.$$.fragment),YCo=l(),Ke=a("div"),F(gy.$$.fragment),KCo=l(),Ede=a("p"),ZCo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),e5o=l(),$a=a("p"),o5o=o("The model class to instantiate is selected based on the "),Cde=a("code"),r5o=o("model_type"),t5o=o(` property of the config object (either
passed as an argument or loaded from `),wde=a("code"),a5o=o("pretrained_model_name_or_path"),n5o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ade=a("code"),s5o=o("pretrained_model_name_or_path"),l5o=o(":"),i5o=l(),z=a("ul"),Y_=a("li"),yde=a("strong"),d5o=o("bart"),c5o=o(" \u2014 "),Tj=a("a"),f5o=o("BartForCausalLM"),m5o=o(" (BART model)"),g5o=l(),K_=a("li"),Lde=a("strong"),h5o=o("bert"),p5o=o(" \u2014 "),Mj=a("a"),u5o=o("BertLMHeadModel"),_5o=o(" (BERT model)"),b5o=l(),Z_=a("li"),xde=a("strong"),v5o=o("bert-generation"),F5o=o(" \u2014 "),Ej=a("a"),T5o=o("BertGenerationDecoder"),M5o=o(" (Bert Generation model)"),E5o=l(),e1=a("li"),$de=a("strong"),C5o=o("big_bird"),w5o=o(" \u2014 "),Cj=a("a"),A5o=o("BigBirdForCausalLM"),y5o=o(" (BigBird model)"),L5o=l(),o1=a("li"),kde=a("strong"),x5o=o("bigbird_pegasus"),$5o=o(" \u2014 "),wj=a("a"),k5o=o("BigBirdPegasusForCausalLM"),S5o=o(" (BigBirdPegasus model)"),R5o=l(),r1=a("li"),Sde=a("strong"),P5o=o("blenderbot"),B5o=o(" \u2014 "),Aj=a("a"),I5o=o("BlenderbotForCausalLM"),N5o=o(" (Blenderbot model)"),q5o=l(),t1=a("li"),Rde=a("strong"),j5o=o("blenderbot-small"),D5o=o(" \u2014 "),yj=a("a"),G5o=o("BlenderbotSmallForCausalLM"),O5o=o(" (BlenderbotSmall model)"),V5o=l(),a1=a("li"),Pde=a("strong"),X5o=o("camembert"),z5o=o(" \u2014 "),Lj=a("a"),W5o=o("CamembertForCausalLM"),Q5o=o(" (CamemBERT model)"),H5o=l(),n1=a("li"),Bde=a("strong"),U5o=o("ctrl"),J5o=o(" \u2014 "),xj=a("a"),Y5o=o("CTRLLMHeadModel"),K5o=o(" (CTRL model)"),Z5o=l(),s1=a("li"),Ide=a("strong"),e3o=o("data2vec-text"),o3o=o(" \u2014 "),$j=a("a"),r3o=o("Data2VecTextForCausalLM"),t3o=o(" (Data2VecText model)"),a3o=l(),l1=a("li"),Nde=a("strong"),n3o=o("electra"),s3o=o(" \u2014 "),kj=a("a"),l3o=o("ElectraForCausalLM"),i3o=o(" (ELECTRA model)"),d3o=l(),i1=a("li"),qde=a("strong"),c3o=o("gpt2"),f3o=o(" \u2014 "),Sj=a("a"),m3o=o("GPT2LMHeadModel"),g3o=o(" (OpenAI GPT-2 model)"),h3o=l(),d1=a("li"),jde=a("strong"),p3o=o("gpt_neo"),u3o=o(" \u2014 "),Rj=a("a"),_3o=o("GPTNeoForCausalLM"),b3o=o(" (GPT Neo model)"),v3o=l(),c1=a("li"),Dde=a("strong"),F3o=o("gpt_neox"),T3o=o(" \u2014 "),Pj=a("a"),M3o=o("GPTNeoXForCausalLM"),E3o=o(" (GPT NeoX model)"),C3o=l(),f1=a("li"),Gde=a("strong"),w3o=o("gptj"),A3o=o(" \u2014 "),Bj=a("a"),y3o=o("GPTJForCausalLM"),L3o=o(" (GPT-J model)"),x3o=l(),m1=a("li"),Ode=a("strong"),$3o=o("marian"),k3o=o(" \u2014 "),Ij=a("a"),S3o=o("MarianForCausalLM"),R3o=o(" (Marian model)"),P3o=l(),g1=a("li"),Vde=a("strong"),B3o=o("mbart"),I3o=o(" \u2014 "),Nj=a("a"),N3o=o("MBartForCausalLM"),q3o=o(" (mBART model)"),j3o=l(),h1=a("li"),Xde=a("strong"),D3o=o("megatron-bert"),G3o=o(" \u2014 "),qj=a("a"),O3o=o("MegatronBertForCausalLM"),V3o=o(" (MegatronBert model)"),X3o=l(),p1=a("li"),zde=a("strong"),z3o=o("openai-gpt"),W3o=o(" \u2014 "),jj=a("a"),Q3o=o("OpenAIGPTLMHeadModel"),H3o=o(" (OpenAI GPT model)"),U3o=l(),u1=a("li"),Wde=a("strong"),J3o=o("opt"),Y3o=o(" \u2014 "),Dj=a("a"),K3o=o("OPTForCausalLM"),Z3o=o(" (OPT model)"),ewo=l(),_1=a("li"),Qde=a("strong"),owo=o("pegasus"),rwo=o(" \u2014 "),Gj=a("a"),two=o("PegasusForCausalLM"),awo=o(" (Pegasus model)"),nwo=l(),b1=a("li"),Hde=a("strong"),swo=o("plbart"),lwo=o(" \u2014 "),Oj=a("a"),iwo=o("PLBartForCausalLM"),dwo=o(" (PLBart model)"),cwo=l(),v1=a("li"),Ude=a("strong"),fwo=o("prophetnet"),mwo=o(" \u2014 "),Vj=a("a"),gwo=o("ProphetNetForCausalLM"),hwo=o(" (ProphetNet model)"),pwo=l(),F1=a("li"),Jde=a("strong"),uwo=o("qdqbert"),_wo=o(" \u2014 "),Xj=a("a"),bwo=o("QDQBertLMHeadModel"),vwo=o(" (QDQBert model)"),Fwo=l(),T1=a("li"),Yde=a("strong"),Two=o("reformer"),Mwo=o(" \u2014 "),zj=a("a"),Ewo=o("ReformerModelWithLMHead"),Cwo=o(" (Reformer model)"),wwo=l(),M1=a("li"),Kde=a("strong"),Awo=o("rembert"),ywo=o(" \u2014 "),Wj=a("a"),Lwo=o("RemBertForCausalLM"),xwo=o(" (RemBERT model)"),$wo=l(),E1=a("li"),Zde=a("strong"),kwo=o("roberta"),Swo=o(" \u2014 "),Qj=a("a"),Rwo=o("RobertaForCausalLM"),Pwo=o(" (RoBERTa model)"),Bwo=l(),C1=a("li"),ece=a("strong"),Iwo=o("roformer"),Nwo=o(" \u2014 "),Hj=a("a"),qwo=o("RoFormerForCausalLM"),jwo=o(" (RoFormer model)"),Dwo=l(),w1=a("li"),oce=a("strong"),Gwo=o("speech_to_text_2"),Owo=o(" \u2014 "),Uj=a("a"),Vwo=o("Speech2Text2ForCausalLM"),Xwo=o(" (Speech2Text2 model)"),zwo=l(),A1=a("li"),rce=a("strong"),Wwo=o("transfo-xl"),Qwo=o(" \u2014 "),Jj=a("a"),Hwo=o("TransfoXLLMHeadModel"),Uwo=o(" (Transformer-XL model)"),Jwo=l(),y1=a("li"),tce=a("strong"),Ywo=o("trocr"),Kwo=o(" \u2014 "),Yj=a("a"),Zwo=o("TrOCRForCausalLM"),e6o=o(" (TrOCR model)"),o6o=l(),L1=a("li"),ace=a("strong"),r6o=o("xglm"),t6o=o(" \u2014 "),Kj=a("a"),a6o=o("XGLMForCausalLM"),n6o=o(" (XGLM model)"),s6o=l(),x1=a("li"),nce=a("strong"),l6o=o("xlm"),i6o=o(" \u2014 "),Zj=a("a"),d6o=o("XLMWithLMHeadModel"),c6o=o(" (XLM model)"),f6o=l(),$1=a("li"),sce=a("strong"),m6o=o("xlm-prophetnet"),g6o=o(" \u2014 "),eD=a("a"),h6o=o("XLMProphetNetForCausalLM"),p6o=o(" (XLMProphetNet model)"),u6o=l(),k1=a("li"),lce=a("strong"),_6o=o("xlm-roberta"),b6o=o(" \u2014 "),oD=a("a"),v6o=o("XLMRobertaForCausalLM"),F6o=o(" (XLM-RoBERTa model)"),T6o=l(),S1=a("li"),ice=a("strong"),M6o=o("xlm-roberta-xl"),E6o=o(" \u2014 "),rD=a("a"),C6o=o("XLMRobertaXLForCausalLM"),w6o=o(" (XLM-RoBERTa-XL model)"),A6o=l(),R1=a("li"),dce=a("strong"),y6o=o("xlnet"),L6o=o(" \u2014 "),tD=a("a"),x6o=o("XLNetLMHeadModel"),$6o=o(" (XLNet model)"),k6o=l(),P1=a("p"),S6o=o("The model is set in evaluation mode by default using "),cce=a("code"),R6o=o("model.eval()"),P6o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fce=a("code"),B6o=o("model.train()"),I6o=l(),F(B1.$$.fragment),_qe=l(),Pi=a("h2"),I1=a("a"),mce=a("span"),F(hy.$$.fragment),N6o=l(),gce=a("span"),q6o=o("AutoModelForMaskedLM"),bqe=l(),ko=a("div"),F(py.$$.fragment),j6o=l(),Bi=a("p"),D6o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),aD=a("a"),G6o=o("from_pretrained()"),O6o=o(" class method or the "),nD=a("a"),V6o=o("from_config()"),X6o=o(` class
method.`),z6o=l(),uy=a("p"),W6o=o("This class cannot be instantiated directly using "),hce=a("code"),Q6o=o("__init__()"),H6o=o(" (throws an error)."),U6o=l(),st=a("div"),F(_y.$$.fragment),J6o=l(),pce=a("p"),Y6o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),K6o=l(),Ii=a("p"),Z6o=o(`Note:
Loading a model from its configuration file does `),uce=a("strong"),eAo=o("not"),oAo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sD=a("a"),rAo=o("from_pretrained()"),tAo=o(" to load the model weights."),aAo=l(),F(N1.$$.fragment),nAo=l(),Ze=a("div"),F(by.$$.fragment),sAo=l(),_ce=a("p"),lAo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),iAo=l(),ka=a("p"),dAo=o("The model class to instantiate is selected based on the "),bce=a("code"),cAo=o("model_type"),fAo=o(` property of the config object (either
passed as an argument or loaded from `),vce=a("code"),mAo=o("pretrained_model_name_or_path"),gAo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fce=a("code"),hAo=o("pretrained_model_name_or_path"),pAo=o(":"),uAo=l(),Q=a("ul"),q1=a("li"),Tce=a("strong"),_Ao=o("albert"),bAo=o(" \u2014 "),lD=a("a"),vAo=o("AlbertForMaskedLM"),FAo=o(" (ALBERT model)"),TAo=l(),j1=a("li"),Mce=a("strong"),MAo=o("bart"),EAo=o(" \u2014 "),iD=a("a"),CAo=o("BartForConditionalGeneration"),wAo=o(" (BART model)"),AAo=l(),D1=a("li"),Ece=a("strong"),yAo=o("bert"),LAo=o(" \u2014 "),dD=a("a"),xAo=o("BertForMaskedLM"),$Ao=o(" (BERT model)"),kAo=l(),G1=a("li"),Cce=a("strong"),SAo=o("big_bird"),RAo=o(" \u2014 "),cD=a("a"),PAo=o("BigBirdForMaskedLM"),BAo=o(" (BigBird model)"),IAo=l(),O1=a("li"),wce=a("strong"),NAo=o("camembert"),qAo=o(" \u2014 "),fD=a("a"),jAo=o("CamembertForMaskedLM"),DAo=o(" (CamemBERT model)"),GAo=l(),V1=a("li"),Ace=a("strong"),OAo=o("convbert"),VAo=o(" \u2014 "),mD=a("a"),XAo=o("ConvBertForMaskedLM"),zAo=o(" (ConvBERT model)"),WAo=l(),X1=a("li"),yce=a("strong"),QAo=o("data2vec-text"),HAo=o(" \u2014 "),gD=a("a"),UAo=o("Data2VecTextForMaskedLM"),JAo=o(" (Data2VecText model)"),YAo=l(),z1=a("li"),Lce=a("strong"),KAo=o("deberta"),ZAo=o(" \u2014 "),hD=a("a"),eyo=o("DebertaForMaskedLM"),oyo=o(" (DeBERTa model)"),ryo=l(),W1=a("li"),xce=a("strong"),tyo=o("deberta-v2"),ayo=o(" \u2014 "),pD=a("a"),nyo=o("DebertaV2ForMaskedLM"),syo=o(" (DeBERTa-v2 model)"),lyo=l(),Q1=a("li"),$ce=a("strong"),iyo=o("distilbert"),dyo=o(" \u2014 "),uD=a("a"),cyo=o("DistilBertForMaskedLM"),fyo=o(" (DistilBERT model)"),myo=l(),H1=a("li"),kce=a("strong"),gyo=o("electra"),hyo=o(" \u2014 "),_D=a("a"),pyo=o("ElectraForMaskedLM"),uyo=o(" (ELECTRA model)"),_yo=l(),U1=a("li"),Sce=a("strong"),byo=o("flaubert"),vyo=o(" \u2014 "),bD=a("a"),Fyo=o("FlaubertWithLMHeadModel"),Tyo=o(" (FlauBERT model)"),Myo=l(),J1=a("li"),Rce=a("strong"),Eyo=o("fnet"),Cyo=o(" \u2014 "),vD=a("a"),wyo=o("FNetForMaskedLM"),Ayo=o(" (FNet model)"),yyo=l(),Y1=a("li"),Pce=a("strong"),Lyo=o("funnel"),xyo=o(" \u2014 "),FD=a("a"),$yo=o("FunnelForMaskedLM"),kyo=o(" (Funnel Transformer model)"),Syo=l(),K1=a("li"),Bce=a("strong"),Ryo=o("ibert"),Pyo=o(" \u2014 "),TD=a("a"),Byo=o("IBertForMaskedLM"),Iyo=o(" (I-BERT model)"),Nyo=l(),Z1=a("li"),Ice=a("strong"),qyo=o("layoutlm"),jyo=o(" \u2014 "),MD=a("a"),Dyo=o("LayoutLMForMaskedLM"),Gyo=o(" (LayoutLM model)"),Oyo=l(),e7=a("li"),Nce=a("strong"),Vyo=o("longformer"),Xyo=o(" \u2014 "),ED=a("a"),zyo=o("LongformerForMaskedLM"),Wyo=o(" (Longformer model)"),Qyo=l(),o7=a("li"),qce=a("strong"),Hyo=o("mbart"),Uyo=o(" \u2014 "),CD=a("a"),Jyo=o("MBartForConditionalGeneration"),Yyo=o(" (mBART model)"),Kyo=l(),r7=a("li"),jce=a("strong"),Zyo=o("megatron-bert"),eLo=o(" \u2014 "),wD=a("a"),oLo=o("MegatronBertForMaskedLM"),rLo=o(" (MegatronBert model)"),tLo=l(),t7=a("li"),Dce=a("strong"),aLo=o("mobilebert"),nLo=o(" \u2014 "),AD=a("a"),sLo=o("MobileBertForMaskedLM"),lLo=o(" (MobileBERT model)"),iLo=l(),a7=a("li"),Gce=a("strong"),dLo=o("mpnet"),cLo=o(" \u2014 "),yD=a("a"),fLo=o("MPNetForMaskedLM"),mLo=o(" (MPNet model)"),gLo=l(),n7=a("li"),Oce=a("strong"),hLo=o("nystromformer"),pLo=o(" \u2014 "),LD=a("a"),uLo=o("NystromformerForMaskedLM"),_Lo=o(" (Nystromformer model)"),bLo=l(),s7=a("li"),Vce=a("strong"),vLo=o("perceiver"),FLo=o(" \u2014 "),xD=a("a"),TLo=o("PerceiverForMaskedLM"),MLo=o(" (Perceiver model)"),ELo=l(),l7=a("li"),Xce=a("strong"),CLo=o("qdqbert"),wLo=o(" \u2014 "),$D=a("a"),ALo=o("QDQBertForMaskedLM"),yLo=o(" (QDQBert model)"),LLo=l(),i7=a("li"),zce=a("strong"),xLo=o("reformer"),$Lo=o(" \u2014 "),kD=a("a"),kLo=o("ReformerForMaskedLM"),SLo=o(" (Reformer model)"),RLo=l(),d7=a("li"),Wce=a("strong"),PLo=o("rembert"),BLo=o(" \u2014 "),SD=a("a"),ILo=o("RemBertForMaskedLM"),NLo=o(" (RemBERT model)"),qLo=l(),c7=a("li"),Qce=a("strong"),jLo=o("roberta"),DLo=o(" \u2014 "),RD=a("a"),GLo=o("RobertaForMaskedLM"),OLo=o(" (RoBERTa model)"),VLo=l(),f7=a("li"),Hce=a("strong"),XLo=o("roformer"),zLo=o(" \u2014 "),PD=a("a"),WLo=o("RoFormerForMaskedLM"),QLo=o(" (RoFormer model)"),HLo=l(),m7=a("li"),Uce=a("strong"),ULo=o("squeezebert"),JLo=o(" \u2014 "),BD=a("a"),YLo=o("SqueezeBertForMaskedLM"),KLo=o(" (SqueezeBERT model)"),ZLo=l(),g7=a("li"),Jce=a("strong"),e8o=o("tapas"),o8o=o(" \u2014 "),ID=a("a"),r8o=o("TapasForMaskedLM"),t8o=o(" (TAPAS model)"),a8o=l(),h7=a("li"),Yce=a("strong"),n8o=o("wav2vec2"),s8o=o(" \u2014 "),Kce=a("code"),l8o=o("Wav2Vec2ForMaskedLM"),i8o=o(" (Wav2Vec2 model)"),d8o=l(),p7=a("li"),Zce=a("strong"),c8o=o("xlm"),f8o=o(" \u2014 "),ND=a("a"),m8o=o("XLMWithLMHeadModel"),g8o=o(" (XLM model)"),h8o=l(),u7=a("li"),efe=a("strong"),p8o=o("xlm-roberta"),u8o=o(" \u2014 "),qD=a("a"),_8o=o("XLMRobertaForMaskedLM"),b8o=o(" (XLM-RoBERTa model)"),v8o=l(),_7=a("li"),ofe=a("strong"),F8o=o("xlm-roberta-xl"),T8o=o(" \u2014 "),jD=a("a"),M8o=o("XLMRobertaXLForMaskedLM"),E8o=o(" (XLM-RoBERTa-XL model)"),C8o=l(),b7=a("li"),rfe=a("strong"),w8o=o("yoso"),A8o=o(" \u2014 "),DD=a("a"),y8o=o("YosoForMaskedLM"),L8o=o(" (YOSO model)"),x8o=l(),v7=a("p"),$8o=o("The model is set in evaluation mode by default using "),tfe=a("code"),k8o=o("model.eval()"),S8o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),afe=a("code"),R8o=o("model.train()"),P8o=l(),F(F7.$$.fragment),vqe=l(),Ni=a("h2"),T7=a("a"),nfe=a("span"),F(vy.$$.fragment),B8o=l(),sfe=a("span"),I8o=o("AutoModelForSeq2SeqLM"),Fqe=l(),So=a("div"),F(Fy.$$.fragment),N8o=l(),qi=a("p"),q8o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),GD=a("a"),j8o=o("from_pretrained()"),D8o=o(" class method or the "),OD=a("a"),G8o=o("from_config()"),O8o=o(` class
method.`),V8o=l(),Ty=a("p"),X8o=o("This class cannot be instantiated directly using "),lfe=a("code"),z8o=o("__init__()"),W8o=o(" (throws an error)."),Q8o=l(),lt=a("div"),F(My.$$.fragment),H8o=l(),ife=a("p"),U8o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),J8o=l(),ji=a("p"),Y8o=o(`Note:
Loading a model from its configuration file does `),dfe=a("strong"),K8o=o("not"),Z8o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VD=a("a"),e9o=o("from_pretrained()"),o9o=o(" to load the model weights."),r9o=l(),F(M7.$$.fragment),t9o=l(),eo=a("div"),F(Ey.$$.fragment),a9o=l(),cfe=a("p"),n9o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),s9o=l(),Sa=a("p"),l9o=o("The model class to instantiate is selected based on the "),ffe=a("code"),i9o=o("model_type"),d9o=o(` property of the config object (either
passed as an argument or loaded from `),mfe=a("code"),c9o=o("pretrained_model_name_or_path"),f9o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gfe=a("code"),m9o=o("pretrained_model_name_or_path"),g9o=o(":"),h9o=l(),ue=a("ul"),E7=a("li"),hfe=a("strong"),p9o=o("bart"),u9o=o(" \u2014 "),XD=a("a"),_9o=o("BartForConditionalGeneration"),b9o=o(" (BART model)"),v9o=l(),C7=a("li"),pfe=a("strong"),F9o=o("bigbird_pegasus"),T9o=o(" \u2014 "),zD=a("a"),M9o=o("BigBirdPegasusForConditionalGeneration"),E9o=o(" (BigBirdPegasus model)"),C9o=l(),w7=a("li"),ufe=a("strong"),w9o=o("blenderbot"),A9o=o(" \u2014 "),WD=a("a"),y9o=o("BlenderbotForConditionalGeneration"),L9o=o(" (Blenderbot model)"),x9o=l(),A7=a("li"),_fe=a("strong"),$9o=o("blenderbot-small"),k9o=o(" \u2014 "),QD=a("a"),S9o=o("BlenderbotSmallForConditionalGeneration"),R9o=o(" (BlenderbotSmall model)"),P9o=l(),y7=a("li"),bfe=a("strong"),B9o=o("encoder-decoder"),I9o=o(" \u2014 "),HD=a("a"),N9o=o("EncoderDecoderModel"),q9o=o(" (Encoder decoder model)"),j9o=l(),L7=a("li"),vfe=a("strong"),D9o=o("fsmt"),G9o=o(" \u2014 "),UD=a("a"),O9o=o("FSMTForConditionalGeneration"),V9o=o(" (FairSeq Machine-Translation model)"),X9o=l(),x7=a("li"),Ffe=a("strong"),z9o=o("led"),W9o=o(" \u2014 "),JD=a("a"),Q9o=o("LEDForConditionalGeneration"),H9o=o(" (LED model)"),U9o=l(),$7=a("li"),Tfe=a("strong"),J9o=o("m2m_100"),Y9o=o(" \u2014 "),YD=a("a"),K9o=o("M2M100ForConditionalGeneration"),Z9o=o(" (M2M100 model)"),exo=l(),k7=a("li"),Mfe=a("strong"),oxo=o("marian"),rxo=o(" \u2014 "),KD=a("a"),txo=o("MarianMTModel"),axo=o(" (Marian model)"),nxo=l(),S7=a("li"),Efe=a("strong"),sxo=o("mbart"),lxo=o(" \u2014 "),ZD=a("a"),ixo=o("MBartForConditionalGeneration"),dxo=o(" (mBART model)"),cxo=l(),R7=a("li"),Cfe=a("strong"),fxo=o("mt5"),mxo=o(" \u2014 "),eG=a("a"),gxo=o("MT5ForConditionalGeneration"),hxo=o(" (mT5 model)"),pxo=l(),P7=a("li"),wfe=a("strong"),uxo=o("pegasus"),_xo=o(" \u2014 "),oG=a("a"),bxo=o("PegasusForConditionalGeneration"),vxo=o(" (Pegasus model)"),Fxo=l(),B7=a("li"),Afe=a("strong"),Txo=o("plbart"),Mxo=o(" \u2014 "),rG=a("a"),Exo=o("PLBartForConditionalGeneration"),Cxo=o(" (PLBart model)"),wxo=l(),I7=a("li"),yfe=a("strong"),Axo=o("prophetnet"),yxo=o(" \u2014 "),tG=a("a"),Lxo=o("ProphetNetForConditionalGeneration"),xxo=o(" (ProphetNet model)"),$xo=l(),N7=a("li"),Lfe=a("strong"),kxo=o("t5"),Sxo=o(" \u2014 "),aG=a("a"),Rxo=o("T5ForConditionalGeneration"),Pxo=o(" (T5 model)"),Bxo=l(),q7=a("li"),xfe=a("strong"),Ixo=o("xlm-prophetnet"),Nxo=o(" \u2014 "),nG=a("a"),qxo=o("XLMProphetNetForConditionalGeneration"),jxo=o(" (XLMProphetNet model)"),Dxo=l(),j7=a("p"),Gxo=o("The model is set in evaluation mode by default using "),$fe=a("code"),Oxo=o("model.eval()"),Vxo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kfe=a("code"),Xxo=o("model.train()"),zxo=l(),F(D7.$$.fragment),Tqe=l(),Di=a("h2"),G7=a("a"),Sfe=a("span"),F(Cy.$$.fragment),Wxo=l(),Rfe=a("span"),Qxo=o("AutoModelForSequenceClassification"),Mqe=l(),Ro=a("div"),F(wy.$$.fragment),Hxo=l(),Gi=a("p"),Uxo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),sG=a("a"),Jxo=o("from_pretrained()"),Yxo=o(" class method or the "),lG=a("a"),Kxo=o("from_config()"),Zxo=o(` class
method.`),e$o=l(),Ay=a("p"),o$o=o("This class cannot be instantiated directly using "),Pfe=a("code"),r$o=o("__init__()"),t$o=o(" (throws an error)."),a$o=l(),it=a("div"),F(yy.$$.fragment),n$o=l(),Bfe=a("p"),s$o=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),l$o=l(),Oi=a("p"),i$o=o(`Note:
Loading a model from its configuration file does `),Ife=a("strong"),d$o=o("not"),c$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iG=a("a"),f$o=o("from_pretrained()"),m$o=o(" to load the model weights."),g$o=l(),F(O7.$$.fragment),h$o=l(),oo=a("div"),F(Ly.$$.fragment),p$o=l(),Nfe=a("p"),u$o=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),_$o=l(),Ra=a("p"),b$o=o("The model class to instantiate is selected based on the "),qfe=a("code"),v$o=o("model_type"),F$o=o(` property of the config object (either
passed as an argument or loaded from `),jfe=a("code"),T$o=o("pretrained_model_name_or_path"),M$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dfe=a("code"),E$o=o("pretrained_model_name_or_path"),C$o=o(":"),w$o=l(),N=a("ul"),V7=a("li"),Gfe=a("strong"),A$o=o("albert"),y$o=o(" \u2014 "),dG=a("a"),L$o=o("AlbertForSequenceClassification"),x$o=o(" (ALBERT model)"),$$o=l(),X7=a("li"),Ofe=a("strong"),k$o=o("bart"),S$o=o(" \u2014 "),cG=a("a"),R$o=o("BartForSequenceClassification"),P$o=o(" (BART model)"),B$o=l(),z7=a("li"),Vfe=a("strong"),I$o=o("bert"),N$o=o(" \u2014 "),fG=a("a"),q$o=o("BertForSequenceClassification"),j$o=o(" (BERT model)"),D$o=l(),W7=a("li"),Xfe=a("strong"),G$o=o("big_bird"),O$o=o(" \u2014 "),mG=a("a"),V$o=o("BigBirdForSequenceClassification"),X$o=o(" (BigBird model)"),z$o=l(),Q7=a("li"),zfe=a("strong"),W$o=o("bigbird_pegasus"),Q$o=o(" \u2014 "),gG=a("a"),H$o=o("BigBirdPegasusForSequenceClassification"),U$o=o(" (BigBirdPegasus model)"),J$o=l(),H7=a("li"),Wfe=a("strong"),Y$o=o("camembert"),K$o=o(" \u2014 "),hG=a("a"),Z$o=o("CamembertForSequenceClassification"),eko=o(" (CamemBERT model)"),oko=l(),U7=a("li"),Qfe=a("strong"),rko=o("canine"),tko=o(" \u2014 "),pG=a("a"),ako=o("CanineForSequenceClassification"),nko=o(" (Canine model)"),sko=l(),J7=a("li"),Hfe=a("strong"),lko=o("convbert"),iko=o(" \u2014 "),uG=a("a"),dko=o("ConvBertForSequenceClassification"),cko=o(" (ConvBERT model)"),fko=l(),Y7=a("li"),Ufe=a("strong"),mko=o("ctrl"),gko=o(" \u2014 "),_G=a("a"),hko=o("CTRLForSequenceClassification"),pko=o(" (CTRL model)"),uko=l(),K7=a("li"),Jfe=a("strong"),_ko=o("data2vec-text"),bko=o(" \u2014 "),bG=a("a"),vko=o("Data2VecTextForSequenceClassification"),Fko=o(" (Data2VecText model)"),Tko=l(),Z7=a("li"),Yfe=a("strong"),Mko=o("deberta"),Eko=o(" \u2014 "),vG=a("a"),Cko=o("DebertaForSequenceClassification"),wko=o(" (DeBERTa model)"),Ako=l(),eb=a("li"),Kfe=a("strong"),yko=o("deberta-v2"),Lko=o(" \u2014 "),FG=a("a"),xko=o("DebertaV2ForSequenceClassification"),$ko=o(" (DeBERTa-v2 model)"),kko=l(),ob=a("li"),Zfe=a("strong"),Sko=o("distilbert"),Rko=o(" \u2014 "),TG=a("a"),Pko=o("DistilBertForSequenceClassification"),Bko=o(" (DistilBERT model)"),Iko=l(),rb=a("li"),eme=a("strong"),Nko=o("electra"),qko=o(" \u2014 "),MG=a("a"),jko=o("ElectraForSequenceClassification"),Dko=o(" (ELECTRA model)"),Gko=l(),tb=a("li"),ome=a("strong"),Oko=o("flaubert"),Vko=o(" \u2014 "),EG=a("a"),Xko=o("FlaubertForSequenceClassification"),zko=o(" (FlauBERT model)"),Wko=l(),ab=a("li"),rme=a("strong"),Qko=o("fnet"),Hko=o(" \u2014 "),CG=a("a"),Uko=o("FNetForSequenceClassification"),Jko=o(" (FNet model)"),Yko=l(),nb=a("li"),tme=a("strong"),Kko=o("funnel"),Zko=o(" \u2014 "),wG=a("a"),eSo=o("FunnelForSequenceClassification"),oSo=o(" (Funnel Transformer model)"),rSo=l(),sb=a("li"),ame=a("strong"),tSo=o("gpt2"),aSo=o(" \u2014 "),AG=a("a"),nSo=o("GPT2ForSequenceClassification"),sSo=o(" (OpenAI GPT-2 model)"),lSo=l(),lb=a("li"),nme=a("strong"),iSo=o("gpt_neo"),dSo=o(" \u2014 "),yG=a("a"),cSo=o("GPTNeoForSequenceClassification"),fSo=o(" (GPT Neo model)"),mSo=l(),ib=a("li"),sme=a("strong"),gSo=o("gptj"),hSo=o(" \u2014 "),LG=a("a"),pSo=o("GPTJForSequenceClassification"),uSo=o(" (GPT-J model)"),_So=l(),db=a("li"),lme=a("strong"),bSo=o("ibert"),vSo=o(" \u2014 "),xG=a("a"),FSo=o("IBertForSequenceClassification"),TSo=o(" (I-BERT model)"),MSo=l(),cb=a("li"),ime=a("strong"),ESo=o("layoutlm"),CSo=o(" \u2014 "),$G=a("a"),wSo=o("LayoutLMForSequenceClassification"),ASo=o(" (LayoutLM model)"),ySo=l(),fb=a("li"),dme=a("strong"),LSo=o("layoutlmv2"),xSo=o(" \u2014 "),kG=a("a"),$So=o("LayoutLMv2ForSequenceClassification"),kSo=o(" (LayoutLMv2 model)"),SSo=l(),mb=a("li"),cme=a("strong"),RSo=o("layoutlmv3"),PSo=o(" \u2014 "),SG=a("a"),BSo=o("LayoutLMv3ForSequenceClassification"),ISo=o(" (LayoutLMv3 model)"),NSo=l(),gb=a("li"),fme=a("strong"),qSo=o("led"),jSo=o(" \u2014 "),RG=a("a"),DSo=o("LEDForSequenceClassification"),GSo=o(" (LED model)"),OSo=l(),hb=a("li"),mme=a("strong"),VSo=o("longformer"),XSo=o(" \u2014 "),PG=a("a"),zSo=o("LongformerForSequenceClassification"),WSo=o(" (Longformer model)"),QSo=l(),pb=a("li"),gme=a("strong"),HSo=o("mbart"),USo=o(" \u2014 "),BG=a("a"),JSo=o("MBartForSequenceClassification"),YSo=o(" (mBART model)"),KSo=l(),ub=a("li"),hme=a("strong"),ZSo=o("megatron-bert"),eRo=o(" \u2014 "),IG=a("a"),oRo=o("MegatronBertForSequenceClassification"),rRo=o(" (MegatronBert model)"),tRo=l(),_b=a("li"),pme=a("strong"),aRo=o("mobilebert"),nRo=o(" \u2014 "),NG=a("a"),sRo=o("MobileBertForSequenceClassification"),lRo=o(" (MobileBERT model)"),iRo=l(),bb=a("li"),ume=a("strong"),dRo=o("mpnet"),cRo=o(" \u2014 "),qG=a("a"),fRo=o("MPNetForSequenceClassification"),mRo=o(" (MPNet model)"),gRo=l(),vb=a("li"),_me=a("strong"),hRo=o("nystromformer"),pRo=o(" \u2014 "),jG=a("a"),uRo=o("NystromformerForSequenceClassification"),_Ro=o(" (Nystromformer model)"),bRo=l(),Fb=a("li"),bme=a("strong"),vRo=o("openai-gpt"),FRo=o(" \u2014 "),DG=a("a"),TRo=o("OpenAIGPTForSequenceClassification"),MRo=o(" (OpenAI GPT model)"),ERo=l(),Tb=a("li"),vme=a("strong"),CRo=o("perceiver"),wRo=o(" \u2014 "),GG=a("a"),ARo=o("PerceiverForSequenceClassification"),yRo=o(" (Perceiver model)"),LRo=l(),Mb=a("li"),Fme=a("strong"),xRo=o("plbart"),$Ro=o(" \u2014 "),OG=a("a"),kRo=o("PLBartForSequenceClassification"),SRo=o(" (PLBart model)"),RRo=l(),Eb=a("li"),Tme=a("strong"),PRo=o("qdqbert"),BRo=o(" \u2014 "),VG=a("a"),IRo=o("QDQBertForSequenceClassification"),NRo=o(" (QDQBert model)"),qRo=l(),Cb=a("li"),Mme=a("strong"),jRo=o("reformer"),DRo=o(" \u2014 "),XG=a("a"),GRo=o("ReformerForSequenceClassification"),ORo=o(" (Reformer model)"),VRo=l(),wb=a("li"),Eme=a("strong"),XRo=o("rembert"),zRo=o(" \u2014 "),zG=a("a"),WRo=o("RemBertForSequenceClassification"),QRo=o(" (RemBERT model)"),HRo=l(),Ab=a("li"),Cme=a("strong"),URo=o("roberta"),JRo=o(" \u2014 "),WG=a("a"),YRo=o("RobertaForSequenceClassification"),KRo=o(" (RoBERTa model)"),ZRo=l(),yb=a("li"),wme=a("strong"),ePo=o("roformer"),oPo=o(" \u2014 "),QG=a("a"),rPo=o("RoFormerForSequenceClassification"),tPo=o(" (RoFormer model)"),aPo=l(),Lb=a("li"),Ame=a("strong"),nPo=o("squeezebert"),sPo=o(" \u2014 "),HG=a("a"),lPo=o("SqueezeBertForSequenceClassification"),iPo=o(" (SqueezeBERT model)"),dPo=l(),xb=a("li"),yme=a("strong"),cPo=o("tapas"),fPo=o(" \u2014 "),UG=a("a"),mPo=o("TapasForSequenceClassification"),gPo=o(" (TAPAS model)"),hPo=l(),$b=a("li"),Lme=a("strong"),pPo=o("transfo-xl"),uPo=o(" \u2014 "),JG=a("a"),_Po=o("TransfoXLForSequenceClassification"),bPo=o(" (Transformer-XL model)"),vPo=l(),kb=a("li"),xme=a("strong"),FPo=o("xlm"),TPo=o(" \u2014 "),YG=a("a"),MPo=o("XLMForSequenceClassification"),EPo=o(" (XLM model)"),CPo=l(),Sb=a("li"),$me=a("strong"),wPo=o("xlm-roberta"),APo=o(" \u2014 "),KG=a("a"),yPo=o("XLMRobertaForSequenceClassification"),LPo=o(" (XLM-RoBERTa model)"),xPo=l(),Rb=a("li"),kme=a("strong"),$Po=o("xlm-roberta-xl"),kPo=o(" \u2014 "),ZG=a("a"),SPo=o("XLMRobertaXLForSequenceClassification"),RPo=o(" (XLM-RoBERTa-XL model)"),PPo=l(),Pb=a("li"),Sme=a("strong"),BPo=o("xlnet"),IPo=o(" \u2014 "),eO=a("a"),NPo=o("XLNetForSequenceClassification"),qPo=o(" (XLNet model)"),jPo=l(),Bb=a("li"),Rme=a("strong"),DPo=o("yoso"),GPo=o(" \u2014 "),oO=a("a"),OPo=o("YosoForSequenceClassification"),VPo=o(" (YOSO model)"),XPo=l(),Ib=a("p"),zPo=o("The model is set in evaluation mode by default using "),Pme=a("code"),WPo=o("model.eval()"),QPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bme=a("code"),HPo=o("model.train()"),UPo=l(),F(Nb.$$.fragment),Eqe=l(),Vi=a("h2"),qb=a("a"),Ime=a("span"),F(xy.$$.fragment),JPo=l(),Nme=a("span"),YPo=o("AutoModelForMultipleChoice"),Cqe=l(),Po=a("div"),F($y.$$.fragment),KPo=l(),Xi=a("p"),ZPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),rO=a("a"),eBo=o("from_pretrained()"),oBo=o(" class method or the "),tO=a("a"),rBo=o("from_config()"),tBo=o(` class
method.`),aBo=l(),ky=a("p"),nBo=o("This class cannot be instantiated directly using "),qme=a("code"),sBo=o("__init__()"),lBo=o(" (throws an error)."),iBo=l(),dt=a("div"),F(Sy.$$.fragment),dBo=l(),jme=a("p"),cBo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),fBo=l(),zi=a("p"),mBo=o(`Note:
Loading a model from its configuration file does `),Dme=a("strong"),gBo=o("not"),hBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aO=a("a"),pBo=o("from_pretrained()"),uBo=o(" to load the model weights."),_Bo=l(),F(jb.$$.fragment),bBo=l(),ro=a("div"),F(Ry.$$.fragment),vBo=l(),Gme=a("p"),FBo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),TBo=l(),Pa=a("p"),MBo=o("The model class to instantiate is selected based on the "),Ome=a("code"),EBo=o("model_type"),CBo=o(` property of the config object (either
passed as an argument or loaded from `),Vme=a("code"),wBo=o("pretrained_model_name_or_path"),ABo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xme=a("code"),yBo=o("pretrained_model_name_or_path"),LBo=o(":"),xBo=l(),K=a("ul"),Db=a("li"),zme=a("strong"),$Bo=o("albert"),kBo=o(" \u2014 "),nO=a("a"),SBo=o("AlbertForMultipleChoice"),RBo=o(" (ALBERT model)"),PBo=l(),Gb=a("li"),Wme=a("strong"),BBo=o("bert"),IBo=o(" \u2014 "),sO=a("a"),NBo=o("BertForMultipleChoice"),qBo=o(" (BERT model)"),jBo=l(),Ob=a("li"),Qme=a("strong"),DBo=o("big_bird"),GBo=o(" \u2014 "),lO=a("a"),OBo=o("BigBirdForMultipleChoice"),VBo=o(" (BigBird model)"),XBo=l(),Vb=a("li"),Hme=a("strong"),zBo=o("camembert"),WBo=o(" \u2014 "),iO=a("a"),QBo=o("CamembertForMultipleChoice"),HBo=o(" (CamemBERT model)"),UBo=l(),Xb=a("li"),Ume=a("strong"),JBo=o("canine"),YBo=o(" \u2014 "),dO=a("a"),KBo=o("CanineForMultipleChoice"),ZBo=o(" (Canine model)"),eIo=l(),zb=a("li"),Jme=a("strong"),oIo=o("convbert"),rIo=o(" \u2014 "),cO=a("a"),tIo=o("ConvBertForMultipleChoice"),aIo=o(" (ConvBERT model)"),nIo=l(),Wb=a("li"),Yme=a("strong"),sIo=o("data2vec-text"),lIo=o(" \u2014 "),fO=a("a"),iIo=o("Data2VecTextForMultipleChoice"),dIo=o(" (Data2VecText model)"),cIo=l(),Qb=a("li"),Kme=a("strong"),fIo=o("deberta-v2"),mIo=o(" \u2014 "),mO=a("a"),gIo=o("DebertaV2ForMultipleChoice"),hIo=o(" (DeBERTa-v2 model)"),pIo=l(),Hb=a("li"),Zme=a("strong"),uIo=o("distilbert"),_Io=o(" \u2014 "),gO=a("a"),bIo=o("DistilBertForMultipleChoice"),vIo=o(" (DistilBERT model)"),FIo=l(),Ub=a("li"),ege=a("strong"),TIo=o("electra"),MIo=o(" \u2014 "),hO=a("a"),EIo=o("ElectraForMultipleChoice"),CIo=o(" (ELECTRA model)"),wIo=l(),Jb=a("li"),oge=a("strong"),AIo=o("flaubert"),yIo=o(" \u2014 "),pO=a("a"),LIo=o("FlaubertForMultipleChoice"),xIo=o(" (FlauBERT model)"),$Io=l(),Yb=a("li"),rge=a("strong"),kIo=o("fnet"),SIo=o(" \u2014 "),uO=a("a"),RIo=o("FNetForMultipleChoice"),PIo=o(" (FNet model)"),BIo=l(),Kb=a("li"),tge=a("strong"),IIo=o("funnel"),NIo=o(" \u2014 "),_O=a("a"),qIo=o("FunnelForMultipleChoice"),jIo=o(" (Funnel Transformer model)"),DIo=l(),Zb=a("li"),age=a("strong"),GIo=o("ibert"),OIo=o(" \u2014 "),bO=a("a"),VIo=o("IBertForMultipleChoice"),XIo=o(" (I-BERT model)"),zIo=l(),e2=a("li"),nge=a("strong"),WIo=o("longformer"),QIo=o(" \u2014 "),vO=a("a"),HIo=o("LongformerForMultipleChoice"),UIo=o(" (Longformer model)"),JIo=l(),o2=a("li"),sge=a("strong"),YIo=o("megatron-bert"),KIo=o(" \u2014 "),FO=a("a"),ZIo=o("MegatronBertForMultipleChoice"),eNo=o(" (MegatronBert model)"),oNo=l(),r2=a("li"),lge=a("strong"),rNo=o("mobilebert"),tNo=o(" \u2014 "),TO=a("a"),aNo=o("MobileBertForMultipleChoice"),nNo=o(" (MobileBERT model)"),sNo=l(),t2=a("li"),ige=a("strong"),lNo=o("mpnet"),iNo=o(" \u2014 "),MO=a("a"),dNo=o("MPNetForMultipleChoice"),cNo=o(" (MPNet model)"),fNo=l(),a2=a("li"),dge=a("strong"),mNo=o("nystromformer"),gNo=o(" \u2014 "),EO=a("a"),hNo=o("NystromformerForMultipleChoice"),pNo=o(" (Nystromformer model)"),uNo=l(),n2=a("li"),cge=a("strong"),_No=o("qdqbert"),bNo=o(" \u2014 "),CO=a("a"),vNo=o("QDQBertForMultipleChoice"),FNo=o(" (QDQBert model)"),TNo=l(),s2=a("li"),fge=a("strong"),MNo=o("rembert"),ENo=o(" \u2014 "),wO=a("a"),CNo=o("RemBertForMultipleChoice"),wNo=o(" (RemBERT model)"),ANo=l(),l2=a("li"),mge=a("strong"),yNo=o("roberta"),LNo=o(" \u2014 "),AO=a("a"),xNo=o("RobertaForMultipleChoice"),$No=o(" (RoBERTa model)"),kNo=l(),i2=a("li"),gge=a("strong"),SNo=o("roformer"),RNo=o(" \u2014 "),yO=a("a"),PNo=o("RoFormerForMultipleChoice"),BNo=o(" (RoFormer model)"),INo=l(),d2=a("li"),hge=a("strong"),NNo=o("squeezebert"),qNo=o(" \u2014 "),LO=a("a"),jNo=o("SqueezeBertForMultipleChoice"),DNo=o(" (SqueezeBERT model)"),GNo=l(),c2=a("li"),pge=a("strong"),ONo=o("xlm"),VNo=o(" \u2014 "),xO=a("a"),XNo=o("XLMForMultipleChoice"),zNo=o(" (XLM model)"),WNo=l(),f2=a("li"),uge=a("strong"),QNo=o("xlm-roberta"),HNo=o(" \u2014 "),$O=a("a"),UNo=o("XLMRobertaForMultipleChoice"),JNo=o(" (XLM-RoBERTa model)"),YNo=l(),m2=a("li"),_ge=a("strong"),KNo=o("xlm-roberta-xl"),ZNo=o(" \u2014 "),kO=a("a"),eqo=o("XLMRobertaXLForMultipleChoice"),oqo=o(" (XLM-RoBERTa-XL model)"),rqo=l(),g2=a("li"),bge=a("strong"),tqo=o("xlnet"),aqo=o(" \u2014 "),SO=a("a"),nqo=o("XLNetForMultipleChoice"),sqo=o(" (XLNet model)"),lqo=l(),h2=a("li"),vge=a("strong"),iqo=o("yoso"),dqo=o(" \u2014 "),RO=a("a"),cqo=o("YosoForMultipleChoice"),fqo=o(" (YOSO model)"),mqo=l(),p2=a("p"),gqo=o("The model is set in evaluation mode by default using "),Fge=a("code"),hqo=o("model.eval()"),pqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tge=a("code"),uqo=o("model.train()"),_qo=l(),F(u2.$$.fragment),wqe=l(),Wi=a("h2"),_2=a("a"),Mge=a("span"),F(Py.$$.fragment),bqo=l(),Ege=a("span"),vqo=o("AutoModelForNextSentencePrediction"),Aqe=l(),Bo=a("div"),F(By.$$.fragment),Fqo=l(),Qi=a("p"),Tqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),PO=a("a"),Mqo=o("from_pretrained()"),Eqo=o(" class method or the "),BO=a("a"),Cqo=o("from_config()"),wqo=o(` class
method.`),Aqo=l(),Iy=a("p"),yqo=o("This class cannot be instantiated directly using "),Cge=a("code"),Lqo=o("__init__()"),xqo=o(" (throws an error)."),$qo=l(),ct=a("div"),F(Ny.$$.fragment),kqo=l(),wge=a("p"),Sqo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Rqo=l(),Hi=a("p"),Pqo=o(`Note:
Loading a model from its configuration file does `),Age=a("strong"),Bqo=o("not"),Iqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IO=a("a"),Nqo=o("from_pretrained()"),qqo=o(" to load the model weights."),jqo=l(),F(b2.$$.fragment),Dqo=l(),to=a("div"),F(qy.$$.fragment),Gqo=l(),yge=a("p"),Oqo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Vqo=l(),Ba=a("p"),Xqo=o("The model class to instantiate is selected based on the "),Lge=a("code"),zqo=o("model_type"),Wqo=o(` property of the config object (either
passed as an argument or loaded from `),xge=a("code"),Qqo=o("pretrained_model_name_or_path"),Hqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$ge=a("code"),Uqo=o("pretrained_model_name_or_path"),Jqo=o(":"),Yqo=l(),Yr=a("ul"),v2=a("li"),kge=a("strong"),Kqo=o("bert"),Zqo=o(" \u2014 "),NO=a("a"),ejo=o("BertForNextSentencePrediction"),ojo=o(" (BERT model)"),rjo=l(),F2=a("li"),Sge=a("strong"),tjo=o("fnet"),ajo=o(" \u2014 "),qO=a("a"),njo=o("FNetForNextSentencePrediction"),sjo=o(" (FNet model)"),ljo=l(),T2=a("li"),Rge=a("strong"),ijo=o("megatron-bert"),djo=o(" \u2014 "),jO=a("a"),cjo=o("MegatronBertForNextSentencePrediction"),fjo=o(" (MegatronBert model)"),mjo=l(),M2=a("li"),Pge=a("strong"),gjo=o("mobilebert"),hjo=o(" \u2014 "),DO=a("a"),pjo=o("MobileBertForNextSentencePrediction"),ujo=o(" (MobileBERT model)"),_jo=l(),E2=a("li"),Bge=a("strong"),bjo=o("qdqbert"),vjo=o(" \u2014 "),GO=a("a"),Fjo=o("QDQBertForNextSentencePrediction"),Tjo=o(" (QDQBert model)"),Mjo=l(),C2=a("p"),Ejo=o("The model is set in evaluation mode by default using "),Ige=a("code"),Cjo=o("model.eval()"),wjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nge=a("code"),Ajo=o("model.train()"),yjo=l(),F(w2.$$.fragment),yqe=l(),Ui=a("h2"),A2=a("a"),qge=a("span"),F(jy.$$.fragment),Ljo=l(),jge=a("span"),xjo=o("AutoModelForTokenClassification"),Lqe=l(),Io=a("div"),F(Dy.$$.fragment),$jo=l(),Ji=a("p"),kjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),OO=a("a"),Sjo=o("from_pretrained()"),Rjo=o(" class method or the "),VO=a("a"),Pjo=o("from_config()"),Bjo=o(` class
method.`),Ijo=l(),Gy=a("p"),Njo=o("This class cannot be instantiated directly using "),Dge=a("code"),qjo=o("__init__()"),jjo=o(" (throws an error)."),Djo=l(),ft=a("div"),F(Oy.$$.fragment),Gjo=l(),Gge=a("p"),Ojo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Vjo=l(),Yi=a("p"),Xjo=o(`Note:
Loading a model from its configuration file does `),Oge=a("strong"),zjo=o("not"),Wjo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XO=a("a"),Qjo=o("from_pretrained()"),Hjo=o(" to load the model weights."),Ujo=l(),F(y2.$$.fragment),Jjo=l(),ao=a("div"),F(Vy.$$.fragment),Yjo=l(),Vge=a("p"),Kjo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Zjo=l(),Ia=a("p"),eDo=o("The model class to instantiate is selected based on the "),Xge=a("code"),oDo=o("model_type"),rDo=o(` property of the config object (either
passed as an argument or loaded from `),zge=a("code"),tDo=o("pretrained_model_name_or_path"),aDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wge=a("code"),nDo=o("pretrained_model_name_or_path"),sDo=o(":"),lDo=l(),H=a("ul"),L2=a("li"),Qge=a("strong"),iDo=o("albert"),dDo=o(" \u2014 "),zO=a("a"),cDo=o("AlbertForTokenClassification"),fDo=o(" (ALBERT model)"),mDo=l(),x2=a("li"),Hge=a("strong"),gDo=o("bert"),hDo=o(" \u2014 "),WO=a("a"),pDo=o("BertForTokenClassification"),uDo=o(" (BERT model)"),_Do=l(),$2=a("li"),Uge=a("strong"),bDo=o("big_bird"),vDo=o(" \u2014 "),QO=a("a"),FDo=o("BigBirdForTokenClassification"),TDo=o(" (BigBird model)"),MDo=l(),k2=a("li"),Jge=a("strong"),EDo=o("camembert"),CDo=o(" \u2014 "),HO=a("a"),wDo=o("CamembertForTokenClassification"),ADo=o(" (CamemBERT model)"),yDo=l(),S2=a("li"),Yge=a("strong"),LDo=o("canine"),xDo=o(" \u2014 "),UO=a("a"),$Do=o("CanineForTokenClassification"),kDo=o(" (Canine model)"),SDo=l(),R2=a("li"),Kge=a("strong"),RDo=o("convbert"),PDo=o(" \u2014 "),JO=a("a"),BDo=o("ConvBertForTokenClassification"),IDo=o(" (ConvBERT model)"),NDo=l(),P2=a("li"),Zge=a("strong"),qDo=o("data2vec-text"),jDo=o(" \u2014 "),YO=a("a"),DDo=o("Data2VecTextForTokenClassification"),GDo=o(" (Data2VecText model)"),ODo=l(),B2=a("li"),ehe=a("strong"),VDo=o("deberta"),XDo=o(" \u2014 "),KO=a("a"),zDo=o("DebertaForTokenClassification"),WDo=o(" (DeBERTa model)"),QDo=l(),I2=a("li"),ohe=a("strong"),HDo=o("deberta-v2"),UDo=o(" \u2014 "),ZO=a("a"),JDo=o("DebertaV2ForTokenClassification"),YDo=o(" (DeBERTa-v2 model)"),KDo=l(),N2=a("li"),rhe=a("strong"),ZDo=o("distilbert"),eGo=o(" \u2014 "),eV=a("a"),oGo=o("DistilBertForTokenClassification"),rGo=o(" (DistilBERT model)"),tGo=l(),q2=a("li"),the=a("strong"),aGo=o("electra"),nGo=o(" \u2014 "),oV=a("a"),sGo=o("ElectraForTokenClassification"),lGo=o(" (ELECTRA model)"),iGo=l(),j2=a("li"),ahe=a("strong"),dGo=o("flaubert"),cGo=o(" \u2014 "),rV=a("a"),fGo=o("FlaubertForTokenClassification"),mGo=o(" (FlauBERT model)"),gGo=l(),D2=a("li"),nhe=a("strong"),hGo=o("fnet"),pGo=o(" \u2014 "),tV=a("a"),uGo=o("FNetForTokenClassification"),_Go=o(" (FNet model)"),bGo=l(),G2=a("li"),she=a("strong"),vGo=o("funnel"),FGo=o(" \u2014 "),aV=a("a"),TGo=o("FunnelForTokenClassification"),MGo=o(" (Funnel Transformer model)"),EGo=l(),O2=a("li"),lhe=a("strong"),CGo=o("gpt2"),wGo=o(" \u2014 "),nV=a("a"),AGo=o("GPT2ForTokenClassification"),yGo=o(" (OpenAI GPT-2 model)"),LGo=l(),V2=a("li"),ihe=a("strong"),xGo=o("ibert"),$Go=o(" \u2014 "),sV=a("a"),kGo=o("IBertForTokenClassification"),SGo=o(" (I-BERT model)"),RGo=l(),X2=a("li"),dhe=a("strong"),PGo=o("layoutlm"),BGo=o(" \u2014 "),lV=a("a"),IGo=o("LayoutLMForTokenClassification"),NGo=o(" (LayoutLM model)"),qGo=l(),z2=a("li"),che=a("strong"),jGo=o("layoutlmv2"),DGo=o(" \u2014 "),iV=a("a"),GGo=o("LayoutLMv2ForTokenClassification"),OGo=o(" (LayoutLMv2 model)"),VGo=l(),W2=a("li"),fhe=a("strong"),XGo=o("layoutlmv3"),zGo=o(" \u2014 "),dV=a("a"),WGo=o("LayoutLMv3ForTokenClassification"),QGo=o(" (LayoutLMv3 model)"),HGo=l(),Q2=a("li"),mhe=a("strong"),UGo=o("longformer"),JGo=o(" \u2014 "),cV=a("a"),YGo=o("LongformerForTokenClassification"),KGo=o(" (Longformer model)"),ZGo=l(),H2=a("li"),ghe=a("strong"),eOo=o("megatron-bert"),oOo=o(" \u2014 "),fV=a("a"),rOo=o("MegatronBertForTokenClassification"),tOo=o(" (MegatronBert model)"),aOo=l(),U2=a("li"),hhe=a("strong"),nOo=o("mobilebert"),sOo=o(" \u2014 "),mV=a("a"),lOo=o("MobileBertForTokenClassification"),iOo=o(" (MobileBERT model)"),dOo=l(),J2=a("li"),phe=a("strong"),cOo=o("mpnet"),fOo=o(" \u2014 "),gV=a("a"),mOo=o("MPNetForTokenClassification"),gOo=o(" (MPNet model)"),hOo=l(),Y2=a("li"),uhe=a("strong"),pOo=o("nystromformer"),uOo=o(" \u2014 "),hV=a("a"),_Oo=o("NystromformerForTokenClassification"),bOo=o(" (Nystromformer model)"),vOo=l(),K2=a("li"),_he=a("strong"),FOo=o("qdqbert"),TOo=o(" \u2014 "),pV=a("a"),MOo=o("QDQBertForTokenClassification"),EOo=o(" (QDQBert model)"),COo=l(),Z2=a("li"),bhe=a("strong"),wOo=o("rembert"),AOo=o(" \u2014 "),uV=a("a"),yOo=o("RemBertForTokenClassification"),LOo=o(" (RemBERT model)"),xOo=l(),e4=a("li"),vhe=a("strong"),$Oo=o("roberta"),kOo=o(" \u2014 "),_V=a("a"),SOo=o("RobertaForTokenClassification"),ROo=o(" (RoBERTa model)"),POo=l(),o4=a("li"),Fhe=a("strong"),BOo=o("roformer"),IOo=o(" \u2014 "),bV=a("a"),NOo=o("RoFormerForTokenClassification"),qOo=o(" (RoFormer model)"),jOo=l(),r4=a("li"),The=a("strong"),DOo=o("squeezebert"),GOo=o(" \u2014 "),vV=a("a"),OOo=o("SqueezeBertForTokenClassification"),VOo=o(" (SqueezeBERT model)"),XOo=l(),t4=a("li"),Mhe=a("strong"),zOo=o("xlm"),WOo=o(" \u2014 "),FV=a("a"),QOo=o("XLMForTokenClassification"),HOo=o(" (XLM model)"),UOo=l(),a4=a("li"),Ehe=a("strong"),JOo=o("xlm-roberta"),YOo=o(" \u2014 "),TV=a("a"),KOo=o("XLMRobertaForTokenClassification"),ZOo=o(" (XLM-RoBERTa model)"),eVo=l(),n4=a("li"),Che=a("strong"),oVo=o("xlm-roberta-xl"),rVo=o(" \u2014 "),MV=a("a"),tVo=o("XLMRobertaXLForTokenClassification"),aVo=o(" (XLM-RoBERTa-XL model)"),nVo=l(),s4=a("li"),whe=a("strong"),sVo=o("xlnet"),lVo=o(" \u2014 "),EV=a("a"),iVo=o("XLNetForTokenClassification"),dVo=o(" (XLNet model)"),cVo=l(),l4=a("li"),Ahe=a("strong"),fVo=o("yoso"),mVo=o(" \u2014 "),CV=a("a"),gVo=o("YosoForTokenClassification"),hVo=o(" (YOSO model)"),pVo=l(),i4=a("p"),uVo=o("The model is set in evaluation mode by default using "),yhe=a("code"),_Vo=o("model.eval()"),bVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lhe=a("code"),vVo=o("model.train()"),FVo=l(),F(d4.$$.fragment),xqe=l(),Ki=a("h2"),c4=a("a"),xhe=a("span"),F(Xy.$$.fragment),TVo=l(),$he=a("span"),MVo=o("AutoModelForQuestionAnswering"),$qe=l(),No=a("div"),F(zy.$$.fragment),EVo=l(),Zi=a("p"),CVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),wV=a("a"),wVo=o("from_pretrained()"),AVo=o(" class method or the "),AV=a("a"),yVo=o("from_config()"),LVo=o(` class
method.`),xVo=l(),Wy=a("p"),$Vo=o("This class cannot be instantiated directly using "),khe=a("code"),kVo=o("__init__()"),SVo=o(" (throws an error)."),RVo=l(),mt=a("div"),F(Qy.$$.fragment),PVo=l(),She=a("p"),BVo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),IVo=l(),ed=a("p"),NVo=o(`Note:
Loading a model from its configuration file does `),Rhe=a("strong"),qVo=o("not"),jVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yV=a("a"),DVo=o("from_pretrained()"),GVo=o(" to load the model weights."),OVo=l(),F(f4.$$.fragment),VVo=l(),no=a("div"),F(Hy.$$.fragment),XVo=l(),Phe=a("p"),zVo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),WVo=l(),Na=a("p"),QVo=o("The model class to instantiate is selected based on the "),Bhe=a("code"),HVo=o("model_type"),UVo=o(` property of the config object (either
passed as an argument or loaded from `),Ihe=a("code"),JVo=o("pretrained_model_name_or_path"),YVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nhe=a("code"),KVo=o("pretrained_model_name_or_path"),ZVo=o(":"),eXo=l(),V=a("ul"),m4=a("li"),qhe=a("strong"),oXo=o("albert"),rXo=o(" \u2014 "),LV=a("a"),tXo=o("AlbertForQuestionAnswering"),aXo=o(" (ALBERT model)"),nXo=l(),g4=a("li"),jhe=a("strong"),sXo=o("bart"),lXo=o(" \u2014 "),xV=a("a"),iXo=o("BartForQuestionAnswering"),dXo=o(" (BART model)"),cXo=l(),h4=a("li"),Dhe=a("strong"),fXo=o("bert"),mXo=o(" \u2014 "),$V=a("a"),gXo=o("BertForQuestionAnswering"),hXo=o(" (BERT model)"),pXo=l(),p4=a("li"),Ghe=a("strong"),uXo=o("big_bird"),_Xo=o(" \u2014 "),kV=a("a"),bXo=o("BigBirdForQuestionAnswering"),vXo=o(" (BigBird model)"),FXo=l(),u4=a("li"),Ohe=a("strong"),TXo=o("bigbird_pegasus"),MXo=o(" \u2014 "),SV=a("a"),EXo=o("BigBirdPegasusForQuestionAnswering"),CXo=o(" (BigBirdPegasus model)"),wXo=l(),_4=a("li"),Vhe=a("strong"),AXo=o("camembert"),yXo=o(" \u2014 "),RV=a("a"),LXo=o("CamembertForQuestionAnswering"),xXo=o(" (CamemBERT model)"),$Xo=l(),b4=a("li"),Xhe=a("strong"),kXo=o("canine"),SXo=o(" \u2014 "),PV=a("a"),RXo=o("CanineForQuestionAnswering"),PXo=o(" (Canine model)"),BXo=l(),v4=a("li"),zhe=a("strong"),IXo=o("convbert"),NXo=o(" \u2014 "),BV=a("a"),qXo=o("ConvBertForQuestionAnswering"),jXo=o(" (ConvBERT model)"),DXo=l(),F4=a("li"),Whe=a("strong"),GXo=o("data2vec-text"),OXo=o(" \u2014 "),IV=a("a"),VXo=o("Data2VecTextForQuestionAnswering"),XXo=o(" (Data2VecText model)"),zXo=l(),T4=a("li"),Qhe=a("strong"),WXo=o("deberta"),QXo=o(" \u2014 "),NV=a("a"),HXo=o("DebertaForQuestionAnswering"),UXo=o(" (DeBERTa model)"),JXo=l(),M4=a("li"),Hhe=a("strong"),YXo=o("deberta-v2"),KXo=o(" \u2014 "),qV=a("a"),ZXo=o("DebertaV2ForQuestionAnswering"),ezo=o(" (DeBERTa-v2 model)"),ozo=l(),E4=a("li"),Uhe=a("strong"),rzo=o("distilbert"),tzo=o(" \u2014 "),jV=a("a"),azo=o("DistilBertForQuestionAnswering"),nzo=o(" (DistilBERT model)"),szo=l(),C4=a("li"),Jhe=a("strong"),lzo=o("electra"),izo=o(" \u2014 "),DV=a("a"),dzo=o("ElectraForQuestionAnswering"),czo=o(" (ELECTRA model)"),fzo=l(),w4=a("li"),Yhe=a("strong"),mzo=o("flaubert"),gzo=o(" \u2014 "),GV=a("a"),hzo=o("FlaubertForQuestionAnsweringSimple"),pzo=o(" (FlauBERT model)"),uzo=l(),A4=a("li"),Khe=a("strong"),_zo=o("fnet"),bzo=o(" \u2014 "),OV=a("a"),vzo=o("FNetForQuestionAnswering"),Fzo=o(" (FNet model)"),Tzo=l(),y4=a("li"),Zhe=a("strong"),Mzo=o("funnel"),Ezo=o(" \u2014 "),VV=a("a"),Czo=o("FunnelForQuestionAnswering"),wzo=o(" (Funnel Transformer model)"),Azo=l(),L4=a("li"),epe=a("strong"),yzo=o("gptj"),Lzo=o(" \u2014 "),XV=a("a"),xzo=o("GPTJForQuestionAnswering"),$zo=o(" (GPT-J model)"),kzo=l(),x4=a("li"),ope=a("strong"),Szo=o("ibert"),Rzo=o(" \u2014 "),zV=a("a"),Pzo=o("IBertForQuestionAnswering"),Bzo=o(" (I-BERT model)"),Izo=l(),$4=a("li"),rpe=a("strong"),Nzo=o("layoutlmv2"),qzo=o(" \u2014 "),WV=a("a"),jzo=o("LayoutLMv2ForQuestionAnswering"),Dzo=o(" (LayoutLMv2 model)"),Gzo=l(),k4=a("li"),tpe=a("strong"),Ozo=o("layoutlmv3"),Vzo=o(" \u2014 "),QV=a("a"),Xzo=o("LayoutLMv3ForQuestionAnswering"),zzo=o(" (LayoutLMv3 model)"),Wzo=l(),S4=a("li"),ape=a("strong"),Qzo=o("led"),Hzo=o(" \u2014 "),HV=a("a"),Uzo=o("LEDForQuestionAnswering"),Jzo=o(" (LED model)"),Yzo=l(),R4=a("li"),npe=a("strong"),Kzo=o("longformer"),Zzo=o(" \u2014 "),UV=a("a"),eWo=o("LongformerForQuestionAnswering"),oWo=o(" (Longformer model)"),rWo=l(),P4=a("li"),spe=a("strong"),tWo=o("lxmert"),aWo=o(" \u2014 "),JV=a("a"),nWo=o("LxmertForQuestionAnswering"),sWo=o(" (LXMERT model)"),lWo=l(),B4=a("li"),lpe=a("strong"),iWo=o("mbart"),dWo=o(" \u2014 "),YV=a("a"),cWo=o("MBartForQuestionAnswering"),fWo=o(" (mBART model)"),mWo=l(),I4=a("li"),ipe=a("strong"),gWo=o("megatron-bert"),hWo=o(" \u2014 "),KV=a("a"),pWo=o("MegatronBertForQuestionAnswering"),uWo=o(" (MegatronBert model)"),_Wo=l(),N4=a("li"),dpe=a("strong"),bWo=o("mobilebert"),vWo=o(" \u2014 "),ZV=a("a"),FWo=o("MobileBertForQuestionAnswering"),TWo=o(" (MobileBERT model)"),MWo=l(),q4=a("li"),cpe=a("strong"),EWo=o("mpnet"),CWo=o(" \u2014 "),eX=a("a"),wWo=o("MPNetForQuestionAnswering"),AWo=o(" (MPNet model)"),yWo=l(),j4=a("li"),fpe=a("strong"),LWo=o("nystromformer"),xWo=o(" \u2014 "),oX=a("a"),$Wo=o("NystromformerForQuestionAnswering"),kWo=o(" (Nystromformer model)"),SWo=l(),D4=a("li"),mpe=a("strong"),RWo=o("qdqbert"),PWo=o(" \u2014 "),rX=a("a"),BWo=o("QDQBertForQuestionAnswering"),IWo=o(" (QDQBert model)"),NWo=l(),G4=a("li"),gpe=a("strong"),qWo=o("reformer"),jWo=o(" \u2014 "),tX=a("a"),DWo=o("ReformerForQuestionAnswering"),GWo=o(" (Reformer model)"),OWo=l(),O4=a("li"),hpe=a("strong"),VWo=o("rembert"),XWo=o(" \u2014 "),aX=a("a"),zWo=o("RemBertForQuestionAnswering"),WWo=o(" (RemBERT model)"),QWo=l(),V4=a("li"),ppe=a("strong"),HWo=o("roberta"),UWo=o(" \u2014 "),nX=a("a"),JWo=o("RobertaForQuestionAnswering"),YWo=o(" (RoBERTa model)"),KWo=l(),X4=a("li"),upe=a("strong"),ZWo=o("roformer"),eQo=o(" \u2014 "),sX=a("a"),oQo=o("RoFormerForQuestionAnswering"),rQo=o(" (RoFormer model)"),tQo=l(),z4=a("li"),_pe=a("strong"),aQo=o("splinter"),nQo=o(" \u2014 "),lX=a("a"),sQo=o("SplinterForQuestionAnswering"),lQo=o(" (Splinter model)"),iQo=l(),W4=a("li"),bpe=a("strong"),dQo=o("squeezebert"),cQo=o(" \u2014 "),iX=a("a"),fQo=o("SqueezeBertForQuestionAnswering"),mQo=o(" (SqueezeBERT model)"),gQo=l(),Q4=a("li"),vpe=a("strong"),hQo=o("xlm"),pQo=o(" \u2014 "),dX=a("a"),uQo=o("XLMForQuestionAnsweringSimple"),_Qo=o(" (XLM model)"),bQo=l(),H4=a("li"),Fpe=a("strong"),vQo=o("xlm-roberta"),FQo=o(" \u2014 "),cX=a("a"),TQo=o("XLMRobertaForQuestionAnswering"),MQo=o(" (XLM-RoBERTa model)"),EQo=l(),U4=a("li"),Tpe=a("strong"),CQo=o("xlm-roberta-xl"),wQo=o(" \u2014 "),fX=a("a"),AQo=o("XLMRobertaXLForQuestionAnswering"),yQo=o(" (XLM-RoBERTa-XL model)"),LQo=l(),J4=a("li"),Mpe=a("strong"),xQo=o("xlnet"),$Qo=o(" \u2014 "),mX=a("a"),kQo=o("XLNetForQuestionAnsweringSimple"),SQo=o(" (XLNet model)"),RQo=l(),Y4=a("li"),Epe=a("strong"),PQo=o("yoso"),BQo=o(" \u2014 "),gX=a("a"),IQo=o("YosoForQuestionAnswering"),NQo=o(" (YOSO model)"),qQo=l(),K4=a("p"),jQo=o("The model is set in evaluation mode by default using "),Cpe=a("code"),DQo=o("model.eval()"),GQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wpe=a("code"),OQo=o("model.train()"),VQo=l(),F(Z4.$$.fragment),kqe=l(),od=a("h2"),ev=a("a"),Ape=a("span"),F(Uy.$$.fragment),XQo=l(),ype=a("span"),zQo=o("AutoModelForTableQuestionAnswering"),Sqe=l(),qo=a("div"),F(Jy.$$.fragment),WQo=l(),rd=a("p"),QQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),hX=a("a"),HQo=o("from_pretrained()"),UQo=o(" class method or the "),pX=a("a"),JQo=o("from_config()"),YQo=o(` class
method.`),KQo=l(),Yy=a("p"),ZQo=o("This class cannot be instantiated directly using "),Lpe=a("code"),eHo=o("__init__()"),oHo=o(" (throws an error)."),rHo=l(),gt=a("div"),F(Ky.$$.fragment),tHo=l(),xpe=a("p"),aHo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),nHo=l(),td=a("p"),sHo=o(`Note:
Loading a model from its configuration file does `),$pe=a("strong"),lHo=o("not"),iHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uX=a("a"),dHo=o("from_pretrained()"),cHo=o(" to load the model weights."),fHo=l(),F(ov.$$.fragment),mHo=l(),so=a("div"),F(Zy.$$.fragment),gHo=l(),kpe=a("p"),hHo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),pHo=l(),qa=a("p"),uHo=o("The model class to instantiate is selected based on the "),Spe=a("code"),_Ho=o("model_type"),bHo=o(` property of the config object (either
passed as an argument or loaded from `),Rpe=a("code"),vHo=o("pretrained_model_name_or_path"),FHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ppe=a("code"),THo=o("pretrained_model_name_or_path"),MHo=o(":"),EHo=l(),Bpe=a("ul"),rv=a("li"),Ipe=a("strong"),CHo=o("tapas"),wHo=o(" \u2014 "),_X=a("a"),AHo=o("TapasForQuestionAnswering"),yHo=o(" (TAPAS model)"),LHo=l(),tv=a("p"),xHo=o("The model is set in evaluation mode by default using "),Npe=a("code"),$Ho=o("model.eval()"),kHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qpe=a("code"),SHo=o("model.train()"),RHo=l(),F(av.$$.fragment),Rqe=l(),ad=a("h2"),nv=a("a"),jpe=a("span"),F(eL.$$.fragment),PHo=l(),Dpe=a("span"),BHo=o("AutoModelForImageClassification"),Pqe=l(),jo=a("div"),F(oL.$$.fragment),IHo=l(),nd=a("p"),NHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),bX=a("a"),qHo=o("from_pretrained()"),jHo=o(" class method or the "),vX=a("a"),DHo=o("from_config()"),GHo=o(` class
method.`),OHo=l(),rL=a("p"),VHo=o("This class cannot be instantiated directly using "),Gpe=a("code"),XHo=o("__init__()"),zHo=o(" (throws an error)."),WHo=l(),ht=a("div"),F(tL.$$.fragment),QHo=l(),Ope=a("p"),HHo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),UHo=l(),sd=a("p"),JHo=o(`Note:
Loading a model from its configuration file does `),Vpe=a("strong"),YHo=o("not"),KHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FX=a("a"),ZHo=o("from_pretrained()"),eUo=o(" to load the model weights."),oUo=l(),F(sv.$$.fragment),rUo=l(),lo=a("div"),F(aL.$$.fragment),tUo=l(),Xpe=a("p"),aUo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),nUo=l(),ja=a("p"),sUo=o("The model class to instantiate is selected based on the "),zpe=a("code"),lUo=o("model_type"),iUo=o(` property of the config object (either
passed as an argument or loaded from `),Wpe=a("code"),dUo=o("pretrained_model_name_or_path"),cUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qpe=a("code"),fUo=o("pretrained_model_name_or_path"),mUo=o(":"),gUo=l(),Fe=a("ul"),lv=a("li"),Hpe=a("strong"),hUo=o("beit"),pUo=o(" \u2014 "),TX=a("a"),uUo=o("BeitForImageClassification"),_Uo=o(" (BEiT model)"),bUo=l(),iv=a("li"),Upe=a("strong"),vUo=o("convnext"),FUo=o(" \u2014 "),MX=a("a"),TUo=o("ConvNextForImageClassification"),MUo=o(" (ConvNext model)"),EUo=l(),dv=a("li"),Jpe=a("strong"),CUo=o("cvt"),wUo=o(" \u2014 "),EX=a("a"),AUo=o("CvtForImageClassification"),yUo=o(" (CvT model)"),LUo=l(),cv=a("li"),Ype=a("strong"),xUo=o("data2vec-vision"),$Uo=o(" \u2014 "),CX=a("a"),kUo=o("Data2VecVisionForImageClassification"),SUo=o(" (Data2VecVision model)"),RUo=l(),Bs=a("li"),Kpe=a("strong"),PUo=o("deit"),BUo=o(" \u2014 "),wX=a("a"),IUo=o("DeiTForImageClassification"),NUo=o(" or "),AX=a("a"),qUo=o("DeiTForImageClassificationWithTeacher"),jUo=o(" (DeiT model)"),DUo=l(),fv=a("li"),Zpe=a("strong"),GUo=o("imagegpt"),OUo=o(" \u2014 "),yX=a("a"),VUo=o("ImageGPTForImageClassification"),XUo=o(" (ImageGPT model)"),zUo=l(),pt=a("li"),eue=a("strong"),WUo=o("perceiver"),QUo=o(" \u2014 "),LX=a("a"),HUo=o("PerceiverForImageClassificationLearned"),UUo=o(" or "),xX=a("a"),JUo=o("PerceiverForImageClassificationFourier"),YUo=o(" or "),$X=a("a"),KUo=o("PerceiverForImageClassificationConvProcessing"),ZUo=o(" (Perceiver model)"),eJo=l(),mv=a("li"),oue=a("strong"),oJo=o("poolformer"),rJo=o(" \u2014 "),kX=a("a"),tJo=o("PoolFormerForImageClassification"),aJo=o(" (PoolFormer model)"),nJo=l(),gv=a("li"),rue=a("strong"),sJo=o("regnet"),lJo=o(" \u2014 "),SX=a("a"),iJo=o("RegNetForImageClassification"),dJo=o(" (RegNet model)"),cJo=l(),hv=a("li"),tue=a("strong"),fJo=o("resnet"),mJo=o(" \u2014 "),RX=a("a"),gJo=o("ResNetForImageClassification"),hJo=o(" (ResNet model)"),pJo=l(),pv=a("li"),aue=a("strong"),uJo=o("segformer"),_Jo=o(" \u2014 "),PX=a("a"),bJo=o("SegformerForImageClassification"),vJo=o(" (SegFormer model)"),FJo=l(),uv=a("li"),nue=a("strong"),TJo=o("swin"),MJo=o(" \u2014 "),BX=a("a"),EJo=o("SwinForImageClassification"),CJo=o(" (Swin model)"),wJo=l(),_v=a("li"),sue=a("strong"),AJo=o("van"),yJo=o(" \u2014 "),IX=a("a"),LJo=o("VanForImageClassification"),xJo=o(" (VAN model)"),$Jo=l(),bv=a("li"),lue=a("strong"),kJo=o("vit"),SJo=o(" \u2014 "),NX=a("a"),RJo=o("ViTForImageClassification"),PJo=o(" (ViT model)"),BJo=l(),vv=a("p"),IJo=o("The model is set in evaluation mode by default using "),iue=a("code"),NJo=o("model.eval()"),qJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),due=a("code"),jJo=o("model.train()"),DJo=l(),F(Fv.$$.fragment),Bqe=l(),ld=a("h2"),Tv=a("a"),cue=a("span"),F(nL.$$.fragment),GJo=l(),fue=a("span"),OJo=o("AutoModelForVision2Seq"),Iqe=l(),Do=a("div"),F(sL.$$.fragment),VJo=l(),id=a("p"),XJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),qX=a("a"),zJo=o("from_pretrained()"),WJo=o(" class method or the "),jX=a("a"),QJo=o("from_config()"),HJo=o(` class
method.`),UJo=l(),lL=a("p"),JJo=o("This class cannot be instantiated directly using "),mue=a("code"),YJo=o("__init__()"),KJo=o(" (throws an error)."),ZJo=l(),ut=a("div"),F(iL.$$.fragment),eYo=l(),gue=a("p"),oYo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),rYo=l(),dd=a("p"),tYo=o(`Note:
Loading a model from its configuration file does `),hue=a("strong"),aYo=o("not"),nYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DX=a("a"),sYo=o("from_pretrained()"),lYo=o(" to load the model weights."),iYo=l(),F(Mv.$$.fragment),dYo=l(),io=a("div"),F(dL.$$.fragment),cYo=l(),pue=a("p"),fYo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),mYo=l(),Da=a("p"),gYo=o("The model class to instantiate is selected based on the "),uue=a("code"),hYo=o("model_type"),pYo=o(` property of the config object (either
passed as an argument or loaded from `),_ue=a("code"),uYo=o("pretrained_model_name_or_path"),_Yo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bue=a("code"),bYo=o("pretrained_model_name_or_path"),vYo=o(":"),FYo=l(),vue=a("ul"),Ev=a("li"),Fue=a("strong"),TYo=o("vision-encoder-decoder"),MYo=o(" \u2014 "),GX=a("a"),EYo=o("VisionEncoderDecoderModel"),CYo=o(" (Vision Encoder decoder model)"),wYo=l(),Cv=a("p"),AYo=o("The model is set in evaluation mode by default using "),Tue=a("code"),yYo=o("model.eval()"),LYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mue=a("code"),xYo=o("model.train()"),$Yo=l(),F(wv.$$.fragment),Nqe=l(),cd=a("h2"),Av=a("a"),Eue=a("span"),F(cL.$$.fragment),kYo=l(),Cue=a("span"),SYo=o("AutoModelForAudioClassification"),qqe=l(),Go=a("div"),F(fL.$$.fragment),RYo=l(),fd=a("p"),PYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),OX=a("a"),BYo=o("from_pretrained()"),IYo=o(" class method or the "),VX=a("a"),NYo=o("from_config()"),qYo=o(` class
method.`),jYo=l(),mL=a("p"),DYo=o("This class cannot be instantiated directly using "),wue=a("code"),GYo=o("__init__()"),OYo=o(" (throws an error)."),VYo=l(),_t=a("div"),F(gL.$$.fragment),XYo=l(),Aue=a("p"),zYo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),WYo=l(),md=a("p"),QYo=o(`Note:
Loading a model from its configuration file does `),yue=a("strong"),HYo=o("not"),UYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XX=a("a"),JYo=o("from_pretrained()"),YYo=o(" to load the model weights."),KYo=l(),F(yv.$$.fragment),ZYo=l(),co=a("div"),F(hL.$$.fragment),eKo=l(),Lue=a("p"),oKo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),rKo=l(),Ga=a("p"),tKo=o("The model class to instantiate is selected based on the "),xue=a("code"),aKo=o("model_type"),nKo=o(` property of the config object (either
passed as an argument or loaded from `),$ue=a("code"),sKo=o("pretrained_model_name_or_path"),lKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kue=a("code"),iKo=o("pretrained_model_name_or_path"),dKo=o(":"),cKo=l(),ke=a("ul"),Lv=a("li"),Sue=a("strong"),fKo=o("data2vec-audio"),mKo=o(" \u2014 "),zX=a("a"),gKo=o("Data2VecAudioForSequenceClassification"),hKo=o(" (Data2VecAudio model)"),pKo=l(),xv=a("li"),Rue=a("strong"),uKo=o("hubert"),_Ko=o(" \u2014 "),WX=a("a"),bKo=o("HubertForSequenceClassification"),vKo=o(" (Hubert model)"),FKo=l(),$v=a("li"),Pue=a("strong"),TKo=o("sew"),MKo=o(" \u2014 "),QX=a("a"),EKo=o("SEWForSequenceClassification"),CKo=o(" (SEW model)"),wKo=l(),kv=a("li"),Bue=a("strong"),AKo=o("sew-d"),yKo=o(" \u2014 "),HX=a("a"),LKo=o("SEWDForSequenceClassification"),xKo=o(" (SEW-D model)"),$Ko=l(),Sv=a("li"),Iue=a("strong"),kKo=o("unispeech"),SKo=o(" \u2014 "),UX=a("a"),RKo=o("UniSpeechForSequenceClassification"),PKo=o(" (UniSpeech model)"),BKo=l(),Rv=a("li"),Nue=a("strong"),IKo=o("unispeech-sat"),NKo=o(" \u2014 "),JX=a("a"),qKo=o("UniSpeechSatForSequenceClassification"),jKo=o(" (UniSpeechSat model)"),DKo=l(),Pv=a("li"),que=a("strong"),GKo=o("wav2vec2"),OKo=o(" \u2014 "),YX=a("a"),VKo=o("Wav2Vec2ForSequenceClassification"),XKo=o(" (Wav2Vec2 model)"),zKo=l(),Bv=a("li"),jue=a("strong"),WKo=o("wav2vec2-conformer"),QKo=o(" \u2014 "),KX=a("a"),HKo=o("Wav2Vec2ConformerForSequenceClassification"),UKo=o(" (Wav2Vec2-Conformer model)"),JKo=l(),Iv=a("li"),Due=a("strong"),YKo=o("wavlm"),KKo=o(" \u2014 "),ZX=a("a"),ZKo=o("WavLMForSequenceClassification"),eZo=o(" (WavLM model)"),oZo=l(),Nv=a("p"),rZo=o("The model is set in evaluation mode by default using "),Gue=a("code"),tZo=o("model.eval()"),aZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Oue=a("code"),nZo=o("model.train()"),sZo=l(),F(qv.$$.fragment),jqe=l(),gd=a("h2"),jv=a("a"),Vue=a("span"),F(pL.$$.fragment),lZo=l(),Xue=a("span"),iZo=o("AutoModelForAudioFrameClassification"),Dqe=l(),Oo=a("div"),F(uL.$$.fragment),dZo=l(),hd=a("p"),cZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),ez=a("a"),fZo=o("from_pretrained()"),mZo=o(" class method or the "),oz=a("a"),gZo=o("from_config()"),hZo=o(` class
method.`),pZo=l(),_L=a("p"),uZo=o("This class cannot be instantiated directly using "),zue=a("code"),_Zo=o("__init__()"),bZo=o(" (throws an error)."),vZo=l(),bt=a("div"),F(bL.$$.fragment),FZo=l(),Wue=a("p"),TZo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),MZo=l(),pd=a("p"),EZo=o(`Note:
Loading a model from its configuration file does `),Que=a("strong"),CZo=o("not"),wZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rz=a("a"),AZo=o("from_pretrained()"),yZo=o(" to load the model weights."),LZo=l(),F(Dv.$$.fragment),xZo=l(),fo=a("div"),F(vL.$$.fragment),$Zo=l(),Hue=a("p"),kZo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),SZo=l(),Oa=a("p"),RZo=o("The model class to instantiate is selected based on the "),Uue=a("code"),PZo=o("model_type"),BZo=o(` property of the config object (either
passed as an argument or loaded from `),Jue=a("code"),IZo=o("pretrained_model_name_or_path"),NZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yue=a("code"),qZo=o("pretrained_model_name_or_path"),jZo=o(":"),DZo=l(),Kr=a("ul"),Gv=a("li"),Kue=a("strong"),GZo=o("data2vec-audio"),OZo=o(" \u2014 "),tz=a("a"),VZo=o("Data2VecAudioForAudioFrameClassification"),XZo=o(" (Data2VecAudio model)"),zZo=l(),Ov=a("li"),Zue=a("strong"),WZo=o("unispeech-sat"),QZo=o(" \u2014 "),az=a("a"),HZo=o("UniSpeechSatForAudioFrameClassification"),UZo=o(" (UniSpeechSat model)"),JZo=l(),Vv=a("li"),e_e=a("strong"),YZo=o("wav2vec2"),KZo=o(" \u2014 "),nz=a("a"),ZZo=o("Wav2Vec2ForAudioFrameClassification"),eer=o(" (Wav2Vec2 model)"),oer=l(),Xv=a("li"),o_e=a("strong"),rer=o("wav2vec2-conformer"),ter=o(" \u2014 "),sz=a("a"),aer=o("Wav2Vec2ConformerForAudioFrameClassification"),ner=o(" (Wav2Vec2-Conformer model)"),ser=l(),zv=a("li"),r_e=a("strong"),ler=o("wavlm"),ier=o(" \u2014 "),lz=a("a"),der=o("WavLMForAudioFrameClassification"),cer=o(" (WavLM model)"),fer=l(),Wv=a("p"),mer=o("The model is set in evaluation mode by default using "),t_e=a("code"),ger=o("model.eval()"),her=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),a_e=a("code"),per=o("model.train()"),uer=l(),F(Qv.$$.fragment),Gqe=l(),ud=a("h2"),Hv=a("a"),n_e=a("span"),F(FL.$$.fragment),_er=l(),s_e=a("span"),ber=o("AutoModelForCTC"),Oqe=l(),Vo=a("div"),F(TL.$$.fragment),ver=l(),_d=a("p"),Fer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),iz=a("a"),Ter=o("from_pretrained()"),Mer=o(" class method or the "),dz=a("a"),Eer=o("from_config()"),Cer=o(` class
method.`),wer=l(),ML=a("p"),Aer=o("This class cannot be instantiated directly using "),l_e=a("code"),yer=o("__init__()"),Ler=o(" (throws an error)."),xer=l(),vt=a("div"),F(EL.$$.fragment),$er=l(),i_e=a("p"),ker=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Ser=l(),bd=a("p"),Rer=o(`Note:
Loading a model from its configuration file does `),d_e=a("strong"),Per=o("not"),Ber=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cz=a("a"),Ier=o("from_pretrained()"),Ner=o(" to load the model weights."),qer=l(),F(Uv.$$.fragment),jer=l(),mo=a("div"),F(CL.$$.fragment),Der=l(),c_e=a("p"),Ger=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Oer=l(),Va=a("p"),Ver=o("The model class to instantiate is selected based on the "),f_e=a("code"),Xer=o("model_type"),zer=o(` property of the config object (either
passed as an argument or loaded from `),m_e=a("code"),Wer=o("pretrained_model_name_or_path"),Qer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g_e=a("code"),Her=o("pretrained_model_name_or_path"),Uer=o(":"),Jer=l(),Se=a("ul"),Jv=a("li"),h_e=a("strong"),Yer=o("data2vec-audio"),Ker=o(" \u2014 "),fz=a("a"),Zer=o("Data2VecAudioForCTC"),eor=o(" (Data2VecAudio model)"),oor=l(),Yv=a("li"),p_e=a("strong"),ror=o("hubert"),tor=o(" \u2014 "),mz=a("a"),aor=o("HubertForCTC"),nor=o(" (Hubert model)"),sor=l(),Kv=a("li"),u_e=a("strong"),lor=o("sew"),ior=o(" \u2014 "),gz=a("a"),dor=o("SEWForCTC"),cor=o(" (SEW model)"),mor=l(),Zv=a("li"),__e=a("strong"),gor=o("sew-d"),hor=o(" \u2014 "),hz=a("a"),por=o("SEWDForCTC"),uor=o(" (SEW-D model)"),_or=l(),eF=a("li"),b_e=a("strong"),bor=o("unispeech"),vor=o(" \u2014 "),pz=a("a"),For=o("UniSpeechForCTC"),Tor=o(" (UniSpeech model)"),Mor=l(),oF=a("li"),v_e=a("strong"),Eor=o("unispeech-sat"),Cor=o(" \u2014 "),uz=a("a"),wor=o("UniSpeechSatForCTC"),Aor=o(" (UniSpeechSat model)"),yor=l(),rF=a("li"),F_e=a("strong"),Lor=o("wav2vec2"),xor=o(" \u2014 "),_z=a("a"),$or=o("Wav2Vec2ForCTC"),kor=o(" (Wav2Vec2 model)"),Sor=l(),tF=a("li"),T_e=a("strong"),Ror=o("wav2vec2-conformer"),Por=o(" \u2014 "),bz=a("a"),Bor=o("Wav2Vec2ConformerForCTC"),Ior=o(" (Wav2Vec2-Conformer model)"),Nor=l(),aF=a("li"),M_e=a("strong"),qor=o("wavlm"),jor=o(" \u2014 "),vz=a("a"),Dor=o("WavLMForCTC"),Gor=o(" (WavLM model)"),Oor=l(),nF=a("p"),Vor=o("The model is set in evaluation mode by default using "),E_e=a("code"),Xor=o("model.eval()"),zor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),C_e=a("code"),Wor=o("model.train()"),Qor=l(),F(sF.$$.fragment),Vqe=l(),vd=a("h2"),lF=a("a"),w_e=a("span"),F(wL.$$.fragment),Hor=l(),A_e=a("span"),Uor=o("AutoModelForSpeechSeq2Seq"),Xqe=l(),Xo=a("div"),F(AL.$$.fragment),Jor=l(),Fd=a("p"),Yor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Fz=a("a"),Kor=o("from_pretrained()"),Zor=o(" class method or the "),Tz=a("a"),err=o("from_config()"),orr=o(` class
method.`),rrr=l(),yL=a("p"),trr=o("This class cannot be instantiated directly using "),y_e=a("code"),arr=o("__init__()"),nrr=o(" (throws an error)."),srr=l(),Ft=a("div"),F(LL.$$.fragment),lrr=l(),L_e=a("p"),irr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),drr=l(),Td=a("p"),crr=o(`Note:
Loading a model from its configuration file does `),x_e=a("strong"),frr=o("not"),mrr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Mz=a("a"),grr=o("from_pretrained()"),hrr=o(" to load the model weights."),prr=l(),F(iF.$$.fragment),urr=l(),go=a("div"),F(xL.$$.fragment),_rr=l(),$_e=a("p"),brr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),vrr=l(),Xa=a("p"),Frr=o("The model class to instantiate is selected based on the "),k_e=a("code"),Trr=o("model_type"),Mrr=o(` property of the config object (either
passed as an argument or loaded from `),S_e=a("code"),Err=o("pretrained_model_name_or_path"),Crr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R_e=a("code"),wrr=o("pretrained_model_name_or_path"),Arr=o(":"),yrr=l(),$L=a("ul"),dF=a("li"),P_e=a("strong"),Lrr=o("speech-encoder-decoder"),xrr=o(" \u2014 "),Ez=a("a"),$rr=o("SpeechEncoderDecoderModel"),krr=o(" (Speech Encoder decoder model)"),Srr=l(),cF=a("li"),B_e=a("strong"),Rrr=o("speech_to_text"),Prr=o(" \u2014 "),Cz=a("a"),Brr=o("Speech2TextForConditionalGeneration"),Irr=o(" (Speech2Text model)"),Nrr=l(),fF=a("p"),qrr=o("The model is set in evaluation mode by default using "),I_e=a("code"),jrr=o("model.eval()"),Drr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),N_e=a("code"),Grr=o("model.train()"),Orr=l(),F(mF.$$.fragment),zqe=l(),Md=a("h2"),gF=a("a"),q_e=a("span"),F(kL.$$.fragment),Vrr=l(),j_e=a("span"),Xrr=o("AutoModelForAudioXVector"),Wqe=l(),zo=a("div"),F(SL.$$.fragment),zrr=l(),Ed=a("p"),Wrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),wz=a("a"),Qrr=o("from_pretrained()"),Hrr=o(" class method or the "),Az=a("a"),Urr=o("from_config()"),Jrr=o(` class
method.`),Yrr=l(),RL=a("p"),Krr=o("This class cannot be instantiated directly using "),D_e=a("code"),Zrr=o("__init__()"),etr=o(" (throws an error)."),otr=l(),Tt=a("div"),F(PL.$$.fragment),rtr=l(),G_e=a("p"),ttr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),atr=l(),Cd=a("p"),ntr=o(`Note:
Loading a model from its configuration file does `),O_e=a("strong"),str=o("not"),ltr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yz=a("a"),itr=o("from_pretrained()"),dtr=o(" to load the model weights."),ctr=l(),F(hF.$$.fragment),ftr=l(),ho=a("div"),F(BL.$$.fragment),mtr=l(),V_e=a("p"),gtr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),htr=l(),za=a("p"),ptr=o("The model class to instantiate is selected based on the "),X_e=a("code"),utr=o("model_type"),_tr=o(` property of the config object (either
passed as an argument or loaded from `),z_e=a("code"),btr=o("pretrained_model_name_or_path"),vtr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W_e=a("code"),Ftr=o("pretrained_model_name_or_path"),Ttr=o(":"),Mtr=l(),Zr=a("ul"),pF=a("li"),Q_e=a("strong"),Etr=o("data2vec-audio"),Ctr=o(" \u2014 "),Lz=a("a"),wtr=o("Data2VecAudioForXVector"),Atr=o(" (Data2VecAudio model)"),ytr=l(),uF=a("li"),H_e=a("strong"),Ltr=o("unispeech-sat"),xtr=o(" \u2014 "),xz=a("a"),$tr=o("UniSpeechSatForXVector"),ktr=o(" (UniSpeechSat model)"),Str=l(),_F=a("li"),U_e=a("strong"),Rtr=o("wav2vec2"),Ptr=o(" \u2014 "),$z=a("a"),Btr=o("Wav2Vec2ForXVector"),Itr=o(" (Wav2Vec2 model)"),Ntr=l(),bF=a("li"),J_e=a("strong"),qtr=o("wav2vec2-conformer"),jtr=o(" \u2014 "),kz=a("a"),Dtr=o("Wav2Vec2ConformerForXVector"),Gtr=o(" (Wav2Vec2-Conformer model)"),Otr=l(),vF=a("li"),Y_e=a("strong"),Vtr=o("wavlm"),Xtr=o(" \u2014 "),Sz=a("a"),ztr=o("WavLMForXVector"),Wtr=o(" (WavLM model)"),Qtr=l(),FF=a("p"),Htr=o("The model is set in evaluation mode by default using "),K_e=a("code"),Utr=o("model.eval()"),Jtr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Z_e=a("code"),Ytr=o("model.train()"),Ktr=l(),F(TF.$$.fragment),Qqe=l(),wd=a("h2"),MF=a("a"),e1e=a("span"),F(IL.$$.fragment),Ztr=l(),o1e=a("span"),ear=o("AutoModelForMaskedImageModeling"),Hqe=l(),Wo=a("div"),F(NL.$$.fragment),oar=l(),Ad=a("p"),rar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Rz=a("a"),tar=o("from_pretrained()"),aar=o(" class method or the "),Pz=a("a"),nar=o("from_config()"),sar=o(` class
method.`),lar=l(),qL=a("p"),iar=o("This class cannot be instantiated directly using "),r1e=a("code"),dar=o("__init__()"),car=o(" (throws an error)."),far=l(),Mt=a("div"),F(jL.$$.fragment),mar=l(),t1e=a("p"),gar=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),har=l(),yd=a("p"),par=o(`Note:
Loading a model from its configuration file does `),a1e=a("strong"),uar=o("not"),_ar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Bz=a("a"),bar=o("from_pretrained()"),Far=o(" to load the model weights."),Tar=l(),F(EF.$$.fragment),Mar=l(),po=a("div"),F(DL.$$.fragment),Ear=l(),n1e=a("p"),Car=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),war=l(),Wa=a("p"),Aar=o("The model class to instantiate is selected based on the "),s1e=a("code"),yar=o("model_type"),Lar=o(` property of the config object (either
passed as an argument or loaded from `),l1e=a("code"),xar=o("pretrained_model_name_or_path"),$ar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i1e=a("code"),kar=o("pretrained_model_name_or_path"),Sar=o(":"),Rar=l(),Ld=a("ul"),CF=a("li"),d1e=a("strong"),Par=o("deit"),Bar=o(" \u2014 "),Iz=a("a"),Iar=o("DeiTForMaskedImageModeling"),Nar=o(" (DeiT model)"),qar=l(),wF=a("li"),c1e=a("strong"),jar=o("swin"),Dar=o(" \u2014 "),Nz=a("a"),Gar=o("SwinForMaskedImageModeling"),Oar=o(" (Swin model)"),Var=l(),AF=a("li"),f1e=a("strong"),Xar=o("vit"),zar=o(" \u2014 "),qz=a("a"),War=o("ViTForMaskedImageModeling"),Qar=o(" (ViT model)"),Har=l(),yF=a("p"),Uar=o("The model is set in evaluation mode by default using "),m1e=a("code"),Jar=o("model.eval()"),Yar=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),g1e=a("code"),Kar=o("model.train()"),Zar=l(),F(LF.$$.fragment),Uqe=l(),xd=a("h2"),xF=a("a"),h1e=a("span"),F(GL.$$.fragment),enr=l(),p1e=a("span"),onr=o("AutoModelForObjectDetection"),Jqe=l(),Qo=a("div"),F(OL.$$.fragment),rnr=l(),$d=a("p"),tnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),jz=a("a"),anr=o("from_pretrained()"),nnr=o(" class method or the "),Dz=a("a"),snr=o("from_config()"),lnr=o(` class
method.`),inr=l(),VL=a("p"),dnr=o("This class cannot be instantiated directly using "),u1e=a("code"),cnr=o("__init__()"),fnr=o(" (throws an error)."),mnr=l(),Et=a("div"),F(XL.$$.fragment),gnr=l(),_1e=a("p"),hnr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),pnr=l(),kd=a("p"),unr=o(`Note:
Loading a model from its configuration file does `),b1e=a("strong"),_nr=o("not"),bnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Gz=a("a"),vnr=o("from_pretrained()"),Fnr=o(" to load the model weights."),Tnr=l(),F($F.$$.fragment),Mnr=l(),uo=a("div"),F(zL.$$.fragment),Enr=l(),v1e=a("p"),Cnr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),wnr=l(),Qa=a("p"),Anr=o("The model class to instantiate is selected based on the "),F1e=a("code"),ynr=o("model_type"),Lnr=o(` property of the config object (either
passed as an argument or loaded from `),T1e=a("code"),xnr=o("pretrained_model_name_or_path"),$nr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M1e=a("code"),knr=o("pretrained_model_name_or_path"),Snr=o(":"),Rnr=l(),WL=a("ul"),kF=a("li"),E1e=a("strong"),Pnr=o("detr"),Bnr=o(" \u2014 "),Oz=a("a"),Inr=o("DetrForObjectDetection"),Nnr=o(" (DETR model)"),qnr=l(),SF=a("li"),C1e=a("strong"),jnr=o("yolos"),Dnr=o(" \u2014 "),Vz=a("a"),Gnr=o("YolosForObjectDetection"),Onr=o(" (YOLOS model)"),Vnr=l(),RF=a("p"),Xnr=o("The model is set in evaluation mode by default using "),w1e=a("code"),znr=o("model.eval()"),Wnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),A1e=a("code"),Qnr=o("model.train()"),Hnr=l(),F(PF.$$.fragment),Yqe=l(),Sd=a("h2"),BF=a("a"),y1e=a("span"),F(QL.$$.fragment),Unr=l(),L1e=a("span"),Jnr=o("AutoModelForImageSegmentation"),Kqe=l(),Ho=a("div"),F(HL.$$.fragment),Ynr=l(),Rd=a("p"),Knr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Xz=a("a"),Znr=o("from_pretrained()"),esr=o(" class method or the "),zz=a("a"),osr=o("from_config()"),rsr=o(` class
method.`),tsr=l(),UL=a("p"),asr=o("This class cannot be instantiated directly using "),x1e=a("code"),nsr=o("__init__()"),ssr=o(" (throws an error)."),lsr=l(),Ct=a("div"),F(JL.$$.fragment),isr=l(),$1e=a("p"),dsr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),csr=l(),Pd=a("p"),fsr=o(`Note:
Loading a model from its configuration file does `),k1e=a("strong"),msr=o("not"),gsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Wz=a("a"),hsr=o("from_pretrained()"),psr=o(" to load the model weights."),usr=l(),F(IF.$$.fragment),_sr=l(),_o=a("div"),F(YL.$$.fragment),bsr=l(),S1e=a("p"),vsr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Fsr=l(),Ha=a("p"),Tsr=o("The model class to instantiate is selected based on the "),R1e=a("code"),Msr=o("model_type"),Esr=o(` property of the config object (either
passed as an argument or loaded from `),P1e=a("code"),Csr=o("pretrained_model_name_or_path"),wsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B1e=a("code"),Asr=o("pretrained_model_name_or_path"),ysr=o(":"),Lsr=l(),I1e=a("ul"),NF=a("li"),N1e=a("strong"),xsr=o("detr"),$sr=o(" \u2014 "),Qz=a("a"),ksr=o("DetrForSegmentation"),Ssr=o(" (DETR model)"),Rsr=l(),qF=a("p"),Psr=o("The model is set in evaluation mode by default using "),q1e=a("code"),Bsr=o("model.eval()"),Isr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),j1e=a("code"),Nsr=o("model.train()"),qsr=l(),F(jF.$$.fragment),Zqe=l(),Bd=a("h2"),DF=a("a"),D1e=a("span"),F(KL.$$.fragment),jsr=l(),G1e=a("span"),Dsr=o("AutoModelForSemanticSegmentation"),eje=l(),Uo=a("div"),F(ZL.$$.fragment),Gsr=l(),Id=a("p"),Osr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Hz=a("a"),Vsr=o("from_pretrained()"),Xsr=o(" class method or the "),Uz=a("a"),zsr=o("from_config()"),Wsr=o(` class
method.`),Qsr=l(),e8=a("p"),Hsr=o("This class cannot be instantiated directly using "),O1e=a("code"),Usr=o("__init__()"),Jsr=o(" (throws an error)."),Ysr=l(),wt=a("div"),F(o8.$$.fragment),Ksr=l(),V1e=a("p"),Zsr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),elr=l(),Nd=a("p"),olr=o(`Note:
Loading a model from its configuration file does `),X1e=a("strong"),rlr=o("not"),tlr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Jz=a("a"),alr=o("from_pretrained()"),nlr=o(" to load the model weights."),slr=l(),F(GF.$$.fragment),llr=l(),bo=a("div"),F(r8.$$.fragment),ilr=l(),z1e=a("p"),dlr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),clr=l(),Ua=a("p"),flr=o("The model class to instantiate is selected based on the "),W1e=a("code"),mlr=o("model_type"),glr=o(` property of the config object (either
passed as an argument or loaded from `),Q1e=a("code"),hlr=o("pretrained_model_name_or_path"),plr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H1e=a("code"),ulr=o("pretrained_model_name_or_path"),_lr=o(":"),blr=l(),Ja=a("ul"),OF=a("li"),U1e=a("strong"),vlr=o("beit"),Flr=o(" \u2014 "),Yz=a("a"),Tlr=o("BeitForSemanticSegmentation"),Mlr=o(" (BEiT model)"),Elr=l(),VF=a("li"),J1e=a("strong"),Clr=o("data2vec-vision"),wlr=o(" \u2014 "),Kz=a("a"),Alr=o("Data2VecVisionForSemanticSegmentation"),ylr=o(" (Data2VecVision model)"),Llr=l(),XF=a("li"),Y1e=a("strong"),xlr=o("dpt"),$lr=o(" \u2014 "),Zz=a("a"),klr=o("DPTForSemanticSegmentation"),Slr=o(" (DPT model)"),Rlr=l(),zF=a("li"),K1e=a("strong"),Plr=o("segformer"),Blr=o(" \u2014 "),eW=a("a"),Ilr=o("SegformerForSemanticSegmentation"),Nlr=o(" (SegFormer model)"),qlr=l(),WF=a("p"),jlr=o("The model is set in evaluation mode by default using "),Z1e=a("code"),Dlr=o("model.eval()"),Glr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),e7e=a("code"),Olr=o("model.train()"),Vlr=l(),F(QF.$$.fragment),oje=l(),qd=a("h2"),HF=a("a"),o7e=a("span"),F(t8.$$.fragment),Xlr=l(),r7e=a("span"),zlr=o("AutoModelForInstanceSegmentation"),rje=l(),Jo=a("div"),F(a8.$$.fragment),Wlr=l(),jd=a("p"),Qlr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),oW=a("a"),Hlr=o("from_pretrained()"),Ulr=o(" class method or the "),rW=a("a"),Jlr=o("from_config()"),Ylr=o(` class
method.`),Klr=l(),n8=a("p"),Zlr=o("This class cannot be instantiated directly using "),t7e=a("code"),eir=o("__init__()"),oir=o(" (throws an error)."),rir=l(),At=a("div"),F(s8.$$.fragment),tir=l(),a7e=a("p"),air=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),nir=l(),Dd=a("p"),sir=o(`Note:
Loading a model from its configuration file does `),n7e=a("strong"),lir=o("not"),iir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tW=a("a"),dir=o("from_pretrained()"),cir=o(" to load the model weights."),fir=l(),F(UF.$$.fragment),mir=l(),vo=a("div"),F(l8.$$.fragment),gir=l(),s7e=a("p"),hir=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),pir=l(),Ya=a("p"),uir=o("The model class to instantiate is selected based on the "),l7e=a("code"),_ir=o("model_type"),bir=o(` property of the config object (either
passed as an argument or loaded from `),i7e=a("code"),vir=o("pretrained_model_name_or_path"),Fir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d7e=a("code"),Tir=o("pretrained_model_name_or_path"),Mir=o(":"),Eir=l(),c7e=a("ul"),JF=a("li"),f7e=a("strong"),Cir=o("maskformer"),wir=o(" \u2014 "),aW=a("a"),Air=o("MaskFormerForInstanceSegmentation"),yir=o(" (MaskFormer model)"),Lir=l(),YF=a("p"),xir=o("The model is set in evaluation mode by default using "),m7e=a("code"),$ir=o("model.eval()"),kir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),g7e=a("code"),Sir=o("model.train()"),Rir=l(),F(KF.$$.fragment),tje=l(),Gd=a("h2"),ZF=a("a"),h7e=a("span"),F(i8.$$.fragment),Pir=l(),p7e=a("span"),Bir=o("TFAutoModel"),aje=l(),Yo=a("div"),F(d8.$$.fragment),Iir=l(),Od=a("p"),Nir=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),nW=a("a"),qir=o("from_pretrained()"),jir=o(" class method or the "),sW=a("a"),Dir=o("from_config()"),Gir=o(` class
method.`),Oir=l(),c8=a("p"),Vir=o("This class cannot be instantiated directly using "),u7e=a("code"),Xir=o("__init__()"),zir=o(" (throws an error)."),Wir=l(),yt=a("div"),F(f8.$$.fragment),Qir=l(),_7e=a("p"),Hir=o("Instantiates one of the base model classes of the library from a configuration."),Uir=l(),Vd=a("p"),Jir=o(`Note:
Loading a model from its configuration file does `),b7e=a("strong"),Yir=o("not"),Kir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lW=a("a"),Zir=o("from_pretrained()"),edr=o(" to load the model weights."),odr=l(),F(e0.$$.fragment),rdr=l(),wr=a("div"),F(m8.$$.fragment),tdr=l(),v7e=a("p"),adr=o("Instantiate one of the base model classes of the library from a pretrained model."),ndr=l(),Ka=a("p"),sdr=o("The model class to instantiate is selected based on the "),F7e=a("code"),ldr=o("model_type"),idr=o(` property of the config object (either
passed as an argument or loaded from `),T7e=a("code"),ddr=o("pretrained_model_name_or_path"),cdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M7e=a("code"),fdr=o("pretrained_model_name_or_path"),mdr=o(":"),gdr=l(),q=a("ul"),o0=a("li"),E7e=a("strong"),hdr=o("albert"),pdr=o(" \u2014 "),iW=a("a"),udr=o("TFAlbertModel"),_dr=o(" (ALBERT model)"),bdr=l(),r0=a("li"),C7e=a("strong"),vdr=o("bart"),Fdr=o(" \u2014 "),dW=a("a"),Tdr=o("TFBartModel"),Mdr=o(" (BART model)"),Edr=l(),t0=a("li"),w7e=a("strong"),Cdr=o("bert"),wdr=o(" \u2014 "),cW=a("a"),Adr=o("TFBertModel"),ydr=o(" (BERT model)"),Ldr=l(),a0=a("li"),A7e=a("strong"),xdr=o("blenderbot"),$dr=o(" \u2014 "),fW=a("a"),kdr=o("TFBlenderbotModel"),Sdr=o(" (Blenderbot model)"),Rdr=l(),n0=a("li"),y7e=a("strong"),Pdr=o("blenderbot-small"),Bdr=o(" \u2014 "),mW=a("a"),Idr=o("TFBlenderbotSmallModel"),Ndr=o(" (BlenderbotSmall model)"),qdr=l(),s0=a("li"),L7e=a("strong"),jdr=o("camembert"),Ddr=o(" \u2014 "),gW=a("a"),Gdr=o("TFCamembertModel"),Odr=o(" (CamemBERT model)"),Vdr=l(),l0=a("li"),x7e=a("strong"),Xdr=o("clip"),zdr=o(" \u2014 "),hW=a("a"),Wdr=o("TFCLIPModel"),Qdr=o(" (CLIP model)"),Hdr=l(),i0=a("li"),$7e=a("strong"),Udr=o("convbert"),Jdr=o(" \u2014 "),pW=a("a"),Ydr=o("TFConvBertModel"),Kdr=o(" (ConvBERT model)"),Zdr=l(),d0=a("li"),k7e=a("strong"),ecr=o("convnext"),ocr=o(" \u2014 "),uW=a("a"),rcr=o("TFConvNextModel"),tcr=o(" (ConvNext model)"),acr=l(),c0=a("li"),S7e=a("strong"),ncr=o("ctrl"),scr=o(" \u2014 "),_W=a("a"),lcr=o("TFCTRLModel"),icr=o(" (CTRL model)"),dcr=l(),f0=a("li"),R7e=a("strong"),ccr=o("data2vec-vision"),fcr=o(" \u2014 "),bW=a("a"),mcr=o("TFData2VecVisionModel"),gcr=o(" (Data2VecVision model)"),hcr=l(),m0=a("li"),P7e=a("strong"),pcr=o("deberta"),ucr=o(" \u2014 "),vW=a("a"),_cr=o("TFDebertaModel"),bcr=o(" (DeBERTa model)"),vcr=l(),g0=a("li"),B7e=a("strong"),Fcr=o("deberta-v2"),Tcr=o(" \u2014 "),FW=a("a"),Mcr=o("TFDebertaV2Model"),Ecr=o(" (DeBERTa-v2 model)"),Ccr=l(),h0=a("li"),I7e=a("strong"),wcr=o("distilbert"),Acr=o(" \u2014 "),TW=a("a"),ycr=o("TFDistilBertModel"),Lcr=o(" (DistilBERT model)"),xcr=l(),p0=a("li"),N7e=a("strong"),$cr=o("dpr"),kcr=o(" \u2014 "),MW=a("a"),Scr=o("TFDPRQuestionEncoder"),Rcr=o(" (DPR model)"),Pcr=l(),u0=a("li"),q7e=a("strong"),Bcr=o("electra"),Icr=o(" \u2014 "),EW=a("a"),Ncr=o("TFElectraModel"),qcr=o(" (ELECTRA model)"),jcr=l(),_0=a("li"),j7e=a("strong"),Dcr=o("flaubert"),Gcr=o(" \u2014 "),CW=a("a"),Ocr=o("TFFlaubertModel"),Vcr=o(" (FlauBERT model)"),Xcr=l(),Is=a("li"),D7e=a("strong"),zcr=o("funnel"),Wcr=o(" \u2014 "),wW=a("a"),Qcr=o("TFFunnelModel"),Hcr=o(" or "),AW=a("a"),Ucr=o("TFFunnelBaseModel"),Jcr=o(" (Funnel Transformer model)"),Ycr=l(),b0=a("li"),G7e=a("strong"),Kcr=o("gpt2"),Zcr=o(" \u2014 "),yW=a("a"),efr=o("TFGPT2Model"),ofr=o(" (OpenAI GPT-2 model)"),rfr=l(),v0=a("li"),O7e=a("strong"),tfr=o("gptj"),afr=o(" \u2014 "),LW=a("a"),nfr=o("TFGPTJModel"),sfr=o(" (GPT-J model)"),lfr=l(),F0=a("li"),V7e=a("strong"),ifr=o("hubert"),dfr=o(" \u2014 "),xW=a("a"),cfr=o("TFHubertModel"),ffr=o(" (Hubert model)"),mfr=l(),T0=a("li"),X7e=a("strong"),gfr=o("layoutlm"),hfr=o(" \u2014 "),$W=a("a"),pfr=o("TFLayoutLMModel"),ufr=o(" (LayoutLM model)"),_fr=l(),M0=a("li"),z7e=a("strong"),bfr=o("led"),vfr=o(" \u2014 "),kW=a("a"),Ffr=o("TFLEDModel"),Tfr=o(" (LED model)"),Mfr=l(),E0=a("li"),W7e=a("strong"),Efr=o("longformer"),Cfr=o(" \u2014 "),SW=a("a"),wfr=o("TFLongformerModel"),Afr=o(" (Longformer model)"),yfr=l(),C0=a("li"),Q7e=a("strong"),Lfr=o("lxmert"),xfr=o(" \u2014 "),RW=a("a"),$fr=o("TFLxmertModel"),kfr=o(" (LXMERT model)"),Sfr=l(),w0=a("li"),H7e=a("strong"),Rfr=o("marian"),Pfr=o(" \u2014 "),PW=a("a"),Bfr=o("TFMarianModel"),Ifr=o(" (Marian model)"),Nfr=l(),A0=a("li"),U7e=a("strong"),qfr=o("mbart"),jfr=o(" \u2014 "),BW=a("a"),Dfr=o("TFMBartModel"),Gfr=o(" (mBART model)"),Ofr=l(),y0=a("li"),J7e=a("strong"),Vfr=o("mobilebert"),Xfr=o(" \u2014 "),IW=a("a"),zfr=o("TFMobileBertModel"),Wfr=o(" (MobileBERT model)"),Qfr=l(),L0=a("li"),Y7e=a("strong"),Hfr=o("mpnet"),Ufr=o(" \u2014 "),NW=a("a"),Jfr=o("TFMPNetModel"),Yfr=o(" (MPNet model)"),Kfr=l(),x0=a("li"),K7e=a("strong"),Zfr=o("mt5"),emr=o(" \u2014 "),qW=a("a"),omr=o("TFMT5Model"),rmr=o(" (mT5 model)"),tmr=l(),$0=a("li"),Z7e=a("strong"),amr=o("openai-gpt"),nmr=o(" \u2014 "),jW=a("a"),smr=o("TFOpenAIGPTModel"),lmr=o(" (OpenAI GPT model)"),imr=l(),k0=a("li"),ebe=a("strong"),dmr=o("pegasus"),cmr=o(" \u2014 "),DW=a("a"),fmr=o("TFPegasusModel"),mmr=o(" (Pegasus model)"),gmr=l(),S0=a("li"),obe=a("strong"),hmr=o("rembert"),pmr=o(" \u2014 "),GW=a("a"),umr=o("TFRemBertModel"),_mr=o(" (RemBERT model)"),bmr=l(),R0=a("li"),rbe=a("strong"),vmr=o("roberta"),Fmr=o(" \u2014 "),OW=a("a"),Tmr=o("TFRobertaModel"),Mmr=o(" (RoBERTa model)"),Emr=l(),P0=a("li"),tbe=a("strong"),Cmr=o("roformer"),wmr=o(" \u2014 "),VW=a("a"),Amr=o("TFRoFormerModel"),ymr=o(" (RoFormer model)"),Lmr=l(),B0=a("li"),abe=a("strong"),xmr=o("speech_to_text"),$mr=o(" \u2014 "),XW=a("a"),kmr=o("TFSpeech2TextModel"),Smr=o(" (Speech2Text model)"),Rmr=l(),I0=a("li"),nbe=a("strong"),Pmr=o("swin"),Bmr=o(" \u2014 "),zW=a("a"),Imr=o("TFSwinModel"),Nmr=o(" (Swin model)"),qmr=l(),N0=a("li"),sbe=a("strong"),jmr=o("t5"),Dmr=o(" \u2014 "),WW=a("a"),Gmr=o("TFT5Model"),Omr=o(" (T5 model)"),Vmr=l(),q0=a("li"),lbe=a("strong"),Xmr=o("tapas"),zmr=o(" \u2014 "),QW=a("a"),Wmr=o("TFTapasModel"),Qmr=o(" (TAPAS model)"),Hmr=l(),j0=a("li"),ibe=a("strong"),Umr=o("transfo-xl"),Jmr=o(" \u2014 "),HW=a("a"),Ymr=o("TFTransfoXLModel"),Kmr=o(" (Transformer-XL model)"),Zmr=l(),D0=a("li"),dbe=a("strong"),egr=o("vit"),ogr=o(" \u2014 "),UW=a("a"),rgr=o("TFViTModel"),tgr=o(" (ViT model)"),agr=l(),G0=a("li"),cbe=a("strong"),ngr=o("vit_mae"),sgr=o(" \u2014 "),JW=a("a"),lgr=o("TFViTMAEModel"),igr=o(" (ViTMAE model)"),dgr=l(),O0=a("li"),fbe=a("strong"),cgr=o("wav2vec2"),fgr=o(" \u2014 "),YW=a("a"),mgr=o("TFWav2Vec2Model"),ggr=o(" (Wav2Vec2 model)"),hgr=l(),V0=a("li"),mbe=a("strong"),pgr=o("xlm"),ugr=o(" \u2014 "),KW=a("a"),_gr=o("TFXLMModel"),bgr=o(" (XLM model)"),vgr=l(),X0=a("li"),gbe=a("strong"),Fgr=o("xlm-roberta"),Tgr=o(" \u2014 "),ZW=a("a"),Mgr=o("TFXLMRobertaModel"),Egr=o(" (XLM-RoBERTa model)"),Cgr=l(),z0=a("li"),hbe=a("strong"),wgr=o("xlnet"),Agr=o(" \u2014 "),eQ=a("a"),ygr=o("TFXLNetModel"),Lgr=o(" (XLNet model)"),xgr=l(),F(W0.$$.fragment),nje=l(),Xd=a("h2"),Q0=a("a"),pbe=a("span"),F(g8.$$.fragment),$gr=l(),ube=a("span"),kgr=o("TFAutoModelForPreTraining"),sje=l(),Ko=a("div"),F(h8.$$.fragment),Sgr=l(),zd=a("p"),Rgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),oQ=a("a"),Pgr=o("from_pretrained()"),Bgr=o(" class method or the "),rQ=a("a"),Igr=o("from_config()"),Ngr=o(` class
method.`),qgr=l(),p8=a("p"),jgr=o("This class cannot be instantiated directly using "),_be=a("code"),Dgr=o("__init__()"),Ggr=o(" (throws an error)."),Ogr=l(),Lt=a("div"),F(u8.$$.fragment),Vgr=l(),bbe=a("p"),Xgr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),zgr=l(),Wd=a("p"),Wgr=o(`Note:
Loading a model from its configuration file does `),vbe=a("strong"),Qgr=o("not"),Hgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tQ=a("a"),Ugr=o("from_pretrained()"),Jgr=o(" to load the model weights."),Ygr=l(),F(H0.$$.fragment),Kgr=l(),Ar=a("div"),F(_8.$$.fragment),Zgr=l(),Fbe=a("p"),ehr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),ohr=l(),Za=a("p"),rhr=o("The model class to instantiate is selected based on the "),Tbe=a("code"),thr=o("model_type"),ahr=o(` property of the config object (either
passed as an argument or loaded from `),Mbe=a("code"),nhr=o("pretrained_model_name_or_path"),shr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ebe=a("code"),lhr=o("pretrained_model_name_or_path"),ihr=o(":"),dhr=l(),se=a("ul"),U0=a("li"),Cbe=a("strong"),chr=o("albert"),fhr=o(" \u2014 "),aQ=a("a"),mhr=o("TFAlbertForPreTraining"),ghr=o(" (ALBERT model)"),hhr=l(),J0=a("li"),wbe=a("strong"),phr=o("bart"),uhr=o(" \u2014 "),nQ=a("a"),_hr=o("TFBartForConditionalGeneration"),bhr=o(" (BART model)"),vhr=l(),Y0=a("li"),Abe=a("strong"),Fhr=o("bert"),Thr=o(" \u2014 "),sQ=a("a"),Mhr=o("TFBertForPreTraining"),Ehr=o(" (BERT model)"),Chr=l(),K0=a("li"),ybe=a("strong"),whr=o("camembert"),Ahr=o(" \u2014 "),lQ=a("a"),yhr=o("TFCamembertForMaskedLM"),Lhr=o(" (CamemBERT model)"),xhr=l(),Z0=a("li"),Lbe=a("strong"),$hr=o("ctrl"),khr=o(" \u2014 "),iQ=a("a"),Shr=o("TFCTRLLMHeadModel"),Rhr=o(" (CTRL model)"),Phr=l(),eT=a("li"),xbe=a("strong"),Bhr=o("distilbert"),Ihr=o(" \u2014 "),dQ=a("a"),Nhr=o("TFDistilBertForMaskedLM"),qhr=o(" (DistilBERT model)"),jhr=l(),oT=a("li"),$be=a("strong"),Dhr=o("electra"),Ghr=o(" \u2014 "),cQ=a("a"),Ohr=o("TFElectraForPreTraining"),Vhr=o(" (ELECTRA model)"),Xhr=l(),rT=a("li"),kbe=a("strong"),zhr=o("flaubert"),Whr=o(" \u2014 "),fQ=a("a"),Qhr=o("TFFlaubertWithLMHeadModel"),Hhr=o(" (FlauBERT model)"),Uhr=l(),tT=a("li"),Sbe=a("strong"),Jhr=o("funnel"),Yhr=o(" \u2014 "),mQ=a("a"),Khr=o("TFFunnelForPreTraining"),Zhr=o(" (Funnel Transformer model)"),epr=l(),aT=a("li"),Rbe=a("strong"),opr=o("gpt2"),rpr=o(" \u2014 "),gQ=a("a"),tpr=o("TFGPT2LMHeadModel"),apr=o(" (OpenAI GPT-2 model)"),npr=l(),nT=a("li"),Pbe=a("strong"),spr=o("layoutlm"),lpr=o(" \u2014 "),hQ=a("a"),ipr=o("TFLayoutLMForMaskedLM"),dpr=o(" (LayoutLM model)"),cpr=l(),sT=a("li"),Bbe=a("strong"),fpr=o("lxmert"),mpr=o(" \u2014 "),pQ=a("a"),gpr=o("TFLxmertForPreTraining"),hpr=o(" (LXMERT model)"),ppr=l(),lT=a("li"),Ibe=a("strong"),upr=o("mobilebert"),_pr=o(" \u2014 "),uQ=a("a"),bpr=o("TFMobileBertForPreTraining"),vpr=o(" (MobileBERT model)"),Fpr=l(),iT=a("li"),Nbe=a("strong"),Tpr=o("mpnet"),Mpr=o(" \u2014 "),_Q=a("a"),Epr=o("TFMPNetForMaskedLM"),Cpr=o(" (MPNet model)"),wpr=l(),dT=a("li"),qbe=a("strong"),Apr=o("openai-gpt"),ypr=o(" \u2014 "),bQ=a("a"),Lpr=o("TFOpenAIGPTLMHeadModel"),xpr=o(" (OpenAI GPT model)"),$pr=l(),cT=a("li"),jbe=a("strong"),kpr=o("roberta"),Spr=o(" \u2014 "),vQ=a("a"),Rpr=o("TFRobertaForMaskedLM"),Ppr=o(" (RoBERTa model)"),Bpr=l(),fT=a("li"),Dbe=a("strong"),Ipr=o("t5"),Npr=o(" \u2014 "),FQ=a("a"),qpr=o("TFT5ForConditionalGeneration"),jpr=o(" (T5 model)"),Dpr=l(),mT=a("li"),Gbe=a("strong"),Gpr=o("tapas"),Opr=o(" \u2014 "),TQ=a("a"),Vpr=o("TFTapasForMaskedLM"),Xpr=o(" (TAPAS model)"),zpr=l(),gT=a("li"),Obe=a("strong"),Wpr=o("transfo-xl"),Qpr=o(" \u2014 "),MQ=a("a"),Hpr=o("TFTransfoXLLMHeadModel"),Upr=o(" (Transformer-XL model)"),Jpr=l(),hT=a("li"),Vbe=a("strong"),Ypr=o("vit_mae"),Kpr=o(" \u2014 "),EQ=a("a"),Zpr=o("TFViTMAEForPreTraining"),eur=o(" (ViTMAE model)"),our=l(),pT=a("li"),Xbe=a("strong"),rur=o("xlm"),tur=o(" \u2014 "),CQ=a("a"),aur=o("TFXLMWithLMHeadModel"),nur=o(" (XLM model)"),sur=l(),uT=a("li"),zbe=a("strong"),lur=o("xlm-roberta"),iur=o(" \u2014 "),wQ=a("a"),dur=o("TFXLMRobertaForMaskedLM"),cur=o(" (XLM-RoBERTa model)"),fur=l(),_T=a("li"),Wbe=a("strong"),mur=o("xlnet"),gur=o(" \u2014 "),AQ=a("a"),hur=o("TFXLNetLMHeadModel"),pur=o(" (XLNet model)"),uur=l(),F(bT.$$.fragment),lje=l(),Qd=a("h2"),vT=a("a"),Qbe=a("span"),F(b8.$$.fragment),_ur=l(),Hbe=a("span"),bur=o("TFAutoModelForCausalLM"),ije=l(),Zo=a("div"),F(v8.$$.fragment),vur=l(),Hd=a("p"),Fur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),yQ=a("a"),Tur=o("from_pretrained()"),Mur=o(" class method or the "),LQ=a("a"),Eur=o("from_config()"),Cur=o(` class
method.`),wur=l(),F8=a("p"),Aur=o("This class cannot be instantiated directly using "),Ube=a("code"),yur=o("__init__()"),Lur=o(" (throws an error)."),xur=l(),xt=a("div"),F(T8.$$.fragment),$ur=l(),Jbe=a("p"),kur=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Sur=l(),Ud=a("p"),Rur=o(`Note:
Loading a model from its configuration file does `),Ybe=a("strong"),Pur=o("not"),Bur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xQ=a("a"),Iur=o("from_pretrained()"),Nur=o(" to load the model weights."),qur=l(),F(FT.$$.fragment),jur=l(),yr=a("div"),F(M8.$$.fragment),Dur=l(),Kbe=a("p"),Gur=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Our=l(),en=a("p"),Vur=o("The model class to instantiate is selected based on the "),Zbe=a("code"),Xur=o("model_type"),zur=o(` property of the config object (either
passed as an argument or loaded from `),e2e=a("code"),Wur=o("pretrained_model_name_or_path"),Qur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o2e=a("code"),Hur=o("pretrained_model_name_or_path"),Uur=o(":"),Jur=l(),Me=a("ul"),TT=a("li"),r2e=a("strong"),Yur=o("bert"),Kur=o(" \u2014 "),$Q=a("a"),Zur=o("TFBertLMHeadModel"),e_r=o(" (BERT model)"),o_r=l(),MT=a("li"),t2e=a("strong"),r_r=o("camembert"),t_r=o(" \u2014 "),kQ=a("a"),a_r=o("TFCamembertForCausalLM"),n_r=o(" (CamemBERT model)"),s_r=l(),ET=a("li"),a2e=a("strong"),l_r=o("ctrl"),i_r=o(" \u2014 "),SQ=a("a"),d_r=o("TFCTRLLMHeadModel"),c_r=o(" (CTRL model)"),f_r=l(),CT=a("li"),n2e=a("strong"),m_r=o("gpt2"),g_r=o(" \u2014 "),RQ=a("a"),h_r=o("TFGPT2LMHeadModel"),p_r=o(" (OpenAI GPT-2 model)"),u_r=l(),wT=a("li"),s2e=a("strong"),__r=o("gptj"),b_r=o(" \u2014 "),PQ=a("a"),v_r=o("TFGPTJForCausalLM"),F_r=o(" (GPT-J model)"),T_r=l(),AT=a("li"),l2e=a("strong"),M_r=o("openai-gpt"),E_r=o(" \u2014 "),BQ=a("a"),C_r=o("TFOpenAIGPTLMHeadModel"),w_r=o(" (OpenAI GPT model)"),A_r=l(),yT=a("li"),i2e=a("strong"),y_r=o("rembert"),L_r=o(" \u2014 "),IQ=a("a"),x_r=o("TFRemBertForCausalLM"),$_r=o(" (RemBERT model)"),k_r=l(),LT=a("li"),d2e=a("strong"),S_r=o("roberta"),R_r=o(" \u2014 "),NQ=a("a"),P_r=o("TFRobertaForCausalLM"),B_r=o(" (RoBERTa model)"),I_r=l(),xT=a("li"),c2e=a("strong"),N_r=o("roformer"),q_r=o(" \u2014 "),qQ=a("a"),j_r=o("TFRoFormerForCausalLM"),D_r=o(" (RoFormer model)"),G_r=l(),$T=a("li"),f2e=a("strong"),O_r=o("transfo-xl"),V_r=o(" \u2014 "),jQ=a("a"),X_r=o("TFTransfoXLLMHeadModel"),z_r=o(" (Transformer-XL model)"),W_r=l(),kT=a("li"),m2e=a("strong"),Q_r=o("xlm"),H_r=o(" \u2014 "),DQ=a("a"),U_r=o("TFXLMWithLMHeadModel"),J_r=o(" (XLM model)"),Y_r=l(),ST=a("li"),g2e=a("strong"),K_r=o("xlnet"),Z_r=o(" \u2014 "),GQ=a("a"),e1r=o("TFXLNetLMHeadModel"),o1r=o(" (XLNet model)"),r1r=l(),F(RT.$$.fragment),dje=l(),Jd=a("h2"),PT=a("a"),h2e=a("span"),F(E8.$$.fragment),t1r=l(),p2e=a("span"),a1r=o("TFAutoModelForImageClassification"),cje=l(),er=a("div"),F(C8.$$.fragment),n1r=l(),Yd=a("p"),s1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),OQ=a("a"),l1r=o("from_pretrained()"),i1r=o(" class method or the "),VQ=a("a"),d1r=o("from_config()"),c1r=o(` class
method.`),f1r=l(),w8=a("p"),m1r=o("This class cannot be instantiated directly using "),u2e=a("code"),g1r=o("__init__()"),h1r=o(" (throws an error)."),p1r=l(),$t=a("div"),F(A8.$$.fragment),u1r=l(),_2e=a("p"),_1r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),b1r=l(),Kd=a("p"),v1r=o(`Note:
Loading a model from its configuration file does `),b2e=a("strong"),F1r=o("not"),T1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XQ=a("a"),M1r=o("from_pretrained()"),E1r=o(" to load the model weights."),C1r=l(),F(BT.$$.fragment),w1r=l(),Lr=a("div"),F(y8.$$.fragment),A1r=l(),v2e=a("p"),y1r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),L1r=l(),on=a("p"),x1r=o("The model class to instantiate is selected based on the "),F2e=a("code"),$1r=o("model_type"),k1r=o(` property of the config object (either
passed as an argument or loaded from `),T2e=a("code"),S1r=o("pretrained_model_name_or_path"),R1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M2e=a("code"),P1r=o("pretrained_model_name_or_path"),B1r=o(":"),I1r=l(),rn=a("ul"),IT=a("li"),E2e=a("strong"),N1r=o("convnext"),q1r=o(" \u2014 "),zQ=a("a"),j1r=o("TFConvNextForImageClassification"),D1r=o(" (ConvNext model)"),G1r=l(),NT=a("li"),C2e=a("strong"),O1r=o("data2vec-vision"),V1r=o(" \u2014 "),WQ=a("a"),X1r=o("TFData2VecVisionForImageClassification"),z1r=o(" (Data2VecVision model)"),W1r=l(),qT=a("li"),w2e=a("strong"),Q1r=o("swin"),H1r=o(" \u2014 "),QQ=a("a"),U1r=o("TFSwinForImageClassification"),J1r=o(" (Swin model)"),Y1r=l(),jT=a("li"),A2e=a("strong"),K1r=o("vit"),Z1r=o(" \u2014 "),HQ=a("a"),e7r=o("TFViTForImageClassification"),o7r=o(" (ViT model)"),r7r=l(),F(DT.$$.fragment),fje=l(),Zd=a("h2"),GT=a("a"),y2e=a("span"),F(L8.$$.fragment),t7r=l(),L2e=a("span"),a7r=o("TFAutoModelForMaskedLM"),mje=l(),or=a("div"),F(x8.$$.fragment),n7r=l(),ec=a("p"),s7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),UQ=a("a"),l7r=o("from_pretrained()"),i7r=o(" class method or the "),JQ=a("a"),d7r=o("from_config()"),c7r=o(` class
method.`),f7r=l(),$8=a("p"),m7r=o("This class cannot be instantiated directly using "),x2e=a("code"),g7r=o("__init__()"),h7r=o(" (throws an error)."),p7r=l(),kt=a("div"),F(k8.$$.fragment),u7r=l(),$2e=a("p"),_7r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),b7r=l(),oc=a("p"),v7r=o(`Note:
Loading a model from its configuration file does `),k2e=a("strong"),F7r=o("not"),T7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YQ=a("a"),M7r=o("from_pretrained()"),E7r=o(" to load the model weights."),C7r=l(),F(OT.$$.fragment),w7r=l(),xr=a("div"),F(S8.$$.fragment),A7r=l(),S2e=a("p"),y7r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),L7r=l(),tn=a("p"),x7r=o("The model class to instantiate is selected based on the "),R2e=a("code"),$7r=o("model_type"),k7r=o(` property of the config object (either
passed as an argument or loaded from `),P2e=a("code"),S7r=o("pretrained_model_name_or_path"),R7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B2e=a("code"),P7r=o("pretrained_model_name_or_path"),B7r=o(":"),I7r=l(),ie=a("ul"),VT=a("li"),I2e=a("strong"),N7r=o("albert"),q7r=o(" \u2014 "),KQ=a("a"),j7r=o("TFAlbertForMaskedLM"),D7r=o(" (ALBERT model)"),G7r=l(),XT=a("li"),N2e=a("strong"),O7r=o("bert"),V7r=o(" \u2014 "),ZQ=a("a"),X7r=o("TFBertForMaskedLM"),z7r=o(" (BERT model)"),W7r=l(),zT=a("li"),q2e=a("strong"),Q7r=o("camembert"),H7r=o(" \u2014 "),eH=a("a"),U7r=o("TFCamembertForMaskedLM"),J7r=o(" (CamemBERT model)"),Y7r=l(),WT=a("li"),j2e=a("strong"),K7r=o("convbert"),Z7r=o(" \u2014 "),oH=a("a"),ebr=o("TFConvBertForMaskedLM"),obr=o(" (ConvBERT model)"),rbr=l(),QT=a("li"),D2e=a("strong"),tbr=o("deberta"),abr=o(" \u2014 "),rH=a("a"),nbr=o("TFDebertaForMaskedLM"),sbr=o(" (DeBERTa model)"),lbr=l(),HT=a("li"),G2e=a("strong"),ibr=o("deberta-v2"),dbr=o(" \u2014 "),tH=a("a"),cbr=o("TFDebertaV2ForMaskedLM"),fbr=o(" (DeBERTa-v2 model)"),mbr=l(),UT=a("li"),O2e=a("strong"),gbr=o("distilbert"),hbr=o(" \u2014 "),aH=a("a"),pbr=o("TFDistilBertForMaskedLM"),ubr=o(" (DistilBERT model)"),_br=l(),JT=a("li"),V2e=a("strong"),bbr=o("electra"),vbr=o(" \u2014 "),nH=a("a"),Fbr=o("TFElectraForMaskedLM"),Tbr=o(" (ELECTRA model)"),Mbr=l(),YT=a("li"),X2e=a("strong"),Ebr=o("flaubert"),Cbr=o(" \u2014 "),sH=a("a"),wbr=o("TFFlaubertWithLMHeadModel"),Abr=o(" (FlauBERT model)"),ybr=l(),KT=a("li"),z2e=a("strong"),Lbr=o("funnel"),xbr=o(" \u2014 "),lH=a("a"),$br=o("TFFunnelForMaskedLM"),kbr=o(" (Funnel Transformer model)"),Sbr=l(),ZT=a("li"),W2e=a("strong"),Rbr=o("layoutlm"),Pbr=o(" \u2014 "),iH=a("a"),Bbr=o("TFLayoutLMForMaskedLM"),Ibr=o(" (LayoutLM model)"),Nbr=l(),eM=a("li"),Q2e=a("strong"),qbr=o("longformer"),jbr=o(" \u2014 "),dH=a("a"),Dbr=o("TFLongformerForMaskedLM"),Gbr=o(" (Longformer model)"),Obr=l(),oM=a("li"),H2e=a("strong"),Vbr=o("mobilebert"),Xbr=o(" \u2014 "),cH=a("a"),zbr=o("TFMobileBertForMaskedLM"),Wbr=o(" (MobileBERT model)"),Qbr=l(),rM=a("li"),U2e=a("strong"),Hbr=o("mpnet"),Ubr=o(" \u2014 "),fH=a("a"),Jbr=o("TFMPNetForMaskedLM"),Ybr=o(" (MPNet model)"),Kbr=l(),tM=a("li"),J2e=a("strong"),Zbr=o("rembert"),e2r=o(" \u2014 "),mH=a("a"),o2r=o("TFRemBertForMaskedLM"),r2r=o(" (RemBERT model)"),t2r=l(),aM=a("li"),Y2e=a("strong"),a2r=o("roberta"),n2r=o(" \u2014 "),gH=a("a"),s2r=o("TFRobertaForMaskedLM"),l2r=o(" (RoBERTa model)"),i2r=l(),nM=a("li"),K2e=a("strong"),d2r=o("roformer"),c2r=o(" \u2014 "),hH=a("a"),f2r=o("TFRoFormerForMaskedLM"),m2r=o(" (RoFormer model)"),g2r=l(),sM=a("li"),Z2e=a("strong"),h2r=o("tapas"),p2r=o(" \u2014 "),pH=a("a"),u2r=o("TFTapasForMaskedLM"),_2r=o(" (TAPAS model)"),b2r=l(),lM=a("li"),e4e=a("strong"),v2r=o("xlm"),F2r=o(" \u2014 "),uH=a("a"),T2r=o("TFXLMWithLMHeadModel"),M2r=o(" (XLM model)"),E2r=l(),iM=a("li"),o4e=a("strong"),C2r=o("xlm-roberta"),w2r=o(" \u2014 "),_H=a("a"),A2r=o("TFXLMRobertaForMaskedLM"),y2r=o(" (XLM-RoBERTa model)"),L2r=l(),F(dM.$$.fragment),gje=l(),rc=a("h2"),cM=a("a"),r4e=a("span"),F(R8.$$.fragment),x2r=l(),t4e=a("span"),$2r=o("TFAutoModelForSeq2SeqLM"),hje=l(),rr=a("div"),F(P8.$$.fragment),k2r=l(),tc=a("p"),S2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),bH=a("a"),R2r=o("from_pretrained()"),P2r=o(" class method or the "),vH=a("a"),B2r=o("from_config()"),I2r=o(` class
method.`),N2r=l(),B8=a("p"),q2r=o("This class cannot be instantiated directly using "),a4e=a("code"),j2r=o("__init__()"),D2r=o(" (throws an error)."),G2r=l(),St=a("div"),F(I8.$$.fragment),O2r=l(),n4e=a("p"),V2r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),X2r=l(),ac=a("p"),z2r=o(`Note:
Loading a model from its configuration file does `),s4e=a("strong"),W2r=o("not"),Q2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FH=a("a"),H2r=o("from_pretrained()"),U2r=o(" to load the model weights."),J2r=l(),F(fM.$$.fragment),Y2r=l(),$r=a("div"),F(N8.$$.fragment),K2r=l(),l4e=a("p"),Z2r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),e4r=l(),an=a("p"),o4r=o("The model class to instantiate is selected based on the "),i4e=a("code"),r4r=o("model_type"),t4r=o(` property of the config object (either
passed as an argument or loaded from `),d4e=a("code"),a4r=o("pretrained_model_name_or_path"),n4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c4e=a("code"),s4r=o("pretrained_model_name_or_path"),l4r=o(":"),i4r=l(),ye=a("ul"),mM=a("li"),f4e=a("strong"),d4r=o("bart"),c4r=o(" \u2014 "),TH=a("a"),f4r=o("TFBartForConditionalGeneration"),m4r=o(" (BART model)"),g4r=l(),gM=a("li"),m4e=a("strong"),h4r=o("blenderbot"),p4r=o(" \u2014 "),MH=a("a"),u4r=o("TFBlenderbotForConditionalGeneration"),_4r=o(" (Blenderbot model)"),b4r=l(),hM=a("li"),g4e=a("strong"),v4r=o("blenderbot-small"),F4r=o(" \u2014 "),EH=a("a"),T4r=o("TFBlenderbotSmallForConditionalGeneration"),M4r=o(" (BlenderbotSmall model)"),E4r=l(),pM=a("li"),h4e=a("strong"),C4r=o("encoder-decoder"),w4r=o(" \u2014 "),CH=a("a"),A4r=o("TFEncoderDecoderModel"),y4r=o(" (Encoder decoder model)"),L4r=l(),uM=a("li"),p4e=a("strong"),x4r=o("led"),$4r=o(" \u2014 "),wH=a("a"),k4r=o("TFLEDForConditionalGeneration"),S4r=o(" (LED model)"),R4r=l(),_M=a("li"),u4e=a("strong"),P4r=o("marian"),B4r=o(" \u2014 "),AH=a("a"),I4r=o("TFMarianMTModel"),N4r=o(" (Marian model)"),q4r=l(),bM=a("li"),_4e=a("strong"),j4r=o("mbart"),D4r=o(" \u2014 "),yH=a("a"),G4r=o("TFMBartForConditionalGeneration"),O4r=o(" (mBART model)"),V4r=l(),vM=a("li"),b4e=a("strong"),X4r=o("mt5"),z4r=o(" \u2014 "),LH=a("a"),W4r=o("TFMT5ForConditionalGeneration"),Q4r=o(" (mT5 model)"),H4r=l(),FM=a("li"),v4e=a("strong"),U4r=o("pegasus"),J4r=o(" \u2014 "),xH=a("a"),Y4r=o("TFPegasusForConditionalGeneration"),K4r=o(" (Pegasus model)"),Z4r=l(),TM=a("li"),F4e=a("strong"),evr=o("t5"),ovr=o(" \u2014 "),$H=a("a"),rvr=o("TFT5ForConditionalGeneration"),tvr=o(" (T5 model)"),avr=l(),F(MM.$$.fragment),pje=l(),nc=a("h2"),EM=a("a"),T4e=a("span"),F(q8.$$.fragment),nvr=l(),M4e=a("span"),svr=o("TFAutoModelForSequenceClassification"),uje=l(),tr=a("div"),F(j8.$$.fragment),lvr=l(),sc=a("p"),ivr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),kH=a("a"),dvr=o("from_pretrained()"),cvr=o(" class method or the "),SH=a("a"),fvr=o("from_config()"),mvr=o(` class
method.`),gvr=l(),D8=a("p"),hvr=o("This class cannot be instantiated directly using "),E4e=a("code"),pvr=o("__init__()"),uvr=o(" (throws an error)."),_vr=l(),Rt=a("div"),F(G8.$$.fragment),bvr=l(),C4e=a("p"),vvr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Fvr=l(),lc=a("p"),Tvr=o(`Note:
Loading a model from its configuration file does `),w4e=a("strong"),Mvr=o("not"),Evr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RH=a("a"),Cvr=o("from_pretrained()"),wvr=o(" to load the model weights."),Avr=l(),F(CM.$$.fragment),yvr=l(),kr=a("div"),F(O8.$$.fragment),Lvr=l(),A4e=a("p"),xvr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),$vr=l(),nn=a("p"),kvr=o("The model class to instantiate is selected based on the "),y4e=a("code"),Svr=o("model_type"),Rvr=o(` property of the config object (either
passed as an argument or loaded from `),L4e=a("code"),Pvr=o("pretrained_model_name_or_path"),Bvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x4e=a("code"),Ivr=o("pretrained_model_name_or_path"),Nvr=o(":"),qvr=l(),oe=a("ul"),wM=a("li"),$4e=a("strong"),jvr=o("albert"),Dvr=o(" \u2014 "),PH=a("a"),Gvr=o("TFAlbertForSequenceClassification"),Ovr=o(" (ALBERT model)"),Vvr=l(),AM=a("li"),k4e=a("strong"),Xvr=o("bert"),zvr=o(" \u2014 "),BH=a("a"),Wvr=o("TFBertForSequenceClassification"),Qvr=o(" (BERT model)"),Hvr=l(),yM=a("li"),S4e=a("strong"),Uvr=o("camembert"),Jvr=o(" \u2014 "),IH=a("a"),Yvr=o("TFCamembertForSequenceClassification"),Kvr=o(" (CamemBERT model)"),Zvr=l(),LM=a("li"),R4e=a("strong"),eFr=o("convbert"),oFr=o(" \u2014 "),NH=a("a"),rFr=o("TFConvBertForSequenceClassification"),tFr=o(" (ConvBERT model)"),aFr=l(),xM=a("li"),P4e=a("strong"),nFr=o("ctrl"),sFr=o(" \u2014 "),qH=a("a"),lFr=o("TFCTRLForSequenceClassification"),iFr=o(" (CTRL model)"),dFr=l(),$M=a("li"),B4e=a("strong"),cFr=o("deberta"),fFr=o(" \u2014 "),jH=a("a"),mFr=o("TFDebertaForSequenceClassification"),gFr=o(" (DeBERTa model)"),hFr=l(),kM=a("li"),I4e=a("strong"),pFr=o("deberta-v2"),uFr=o(" \u2014 "),DH=a("a"),_Fr=o("TFDebertaV2ForSequenceClassification"),bFr=o(" (DeBERTa-v2 model)"),vFr=l(),SM=a("li"),N4e=a("strong"),FFr=o("distilbert"),TFr=o(" \u2014 "),GH=a("a"),MFr=o("TFDistilBertForSequenceClassification"),EFr=o(" (DistilBERT model)"),CFr=l(),RM=a("li"),q4e=a("strong"),wFr=o("electra"),AFr=o(" \u2014 "),OH=a("a"),yFr=o("TFElectraForSequenceClassification"),LFr=o(" (ELECTRA model)"),xFr=l(),PM=a("li"),j4e=a("strong"),$Fr=o("flaubert"),kFr=o(" \u2014 "),VH=a("a"),SFr=o("TFFlaubertForSequenceClassification"),RFr=o(" (FlauBERT model)"),PFr=l(),BM=a("li"),D4e=a("strong"),BFr=o("funnel"),IFr=o(" \u2014 "),XH=a("a"),NFr=o("TFFunnelForSequenceClassification"),qFr=o(" (Funnel Transformer model)"),jFr=l(),IM=a("li"),G4e=a("strong"),DFr=o("gpt2"),GFr=o(" \u2014 "),zH=a("a"),OFr=o("TFGPT2ForSequenceClassification"),VFr=o(" (OpenAI GPT-2 model)"),XFr=l(),NM=a("li"),O4e=a("strong"),zFr=o("gptj"),WFr=o(" \u2014 "),WH=a("a"),QFr=o("TFGPTJForSequenceClassification"),HFr=o(" (GPT-J model)"),UFr=l(),qM=a("li"),V4e=a("strong"),JFr=o("layoutlm"),YFr=o(" \u2014 "),QH=a("a"),KFr=o("TFLayoutLMForSequenceClassification"),ZFr=o(" (LayoutLM model)"),e0r=l(),jM=a("li"),X4e=a("strong"),o0r=o("longformer"),r0r=o(" \u2014 "),HH=a("a"),t0r=o("TFLongformerForSequenceClassification"),a0r=o(" (Longformer model)"),n0r=l(),DM=a("li"),z4e=a("strong"),s0r=o("mobilebert"),l0r=o(" \u2014 "),UH=a("a"),i0r=o("TFMobileBertForSequenceClassification"),d0r=o(" (MobileBERT model)"),c0r=l(),GM=a("li"),W4e=a("strong"),f0r=o("mpnet"),m0r=o(" \u2014 "),JH=a("a"),g0r=o("TFMPNetForSequenceClassification"),h0r=o(" (MPNet model)"),p0r=l(),OM=a("li"),Q4e=a("strong"),u0r=o("openai-gpt"),_0r=o(" \u2014 "),YH=a("a"),b0r=o("TFOpenAIGPTForSequenceClassification"),v0r=o(" (OpenAI GPT model)"),F0r=l(),VM=a("li"),H4e=a("strong"),T0r=o("rembert"),M0r=o(" \u2014 "),KH=a("a"),E0r=o("TFRemBertForSequenceClassification"),C0r=o(" (RemBERT model)"),w0r=l(),XM=a("li"),U4e=a("strong"),A0r=o("roberta"),y0r=o(" \u2014 "),ZH=a("a"),L0r=o("TFRobertaForSequenceClassification"),x0r=o(" (RoBERTa model)"),$0r=l(),zM=a("li"),J4e=a("strong"),k0r=o("roformer"),S0r=o(" \u2014 "),eU=a("a"),R0r=o("TFRoFormerForSequenceClassification"),P0r=o(" (RoFormer model)"),B0r=l(),WM=a("li"),Y4e=a("strong"),I0r=o("tapas"),N0r=o(" \u2014 "),oU=a("a"),q0r=o("TFTapasForSequenceClassification"),j0r=o(" (TAPAS model)"),D0r=l(),QM=a("li"),K4e=a("strong"),G0r=o("transfo-xl"),O0r=o(" \u2014 "),rU=a("a"),V0r=o("TFTransfoXLForSequenceClassification"),X0r=o(" (Transformer-XL model)"),z0r=l(),HM=a("li"),Z4e=a("strong"),W0r=o("xlm"),Q0r=o(" \u2014 "),tU=a("a"),H0r=o("TFXLMForSequenceClassification"),U0r=o(" (XLM model)"),J0r=l(),UM=a("li"),eve=a("strong"),Y0r=o("xlm-roberta"),K0r=o(" \u2014 "),aU=a("a"),Z0r=o("TFXLMRobertaForSequenceClassification"),eTr=o(" (XLM-RoBERTa model)"),oTr=l(),JM=a("li"),ove=a("strong"),rTr=o("xlnet"),tTr=o(" \u2014 "),nU=a("a"),aTr=o("TFXLNetForSequenceClassification"),nTr=o(" (XLNet model)"),sTr=l(),F(YM.$$.fragment),_je=l(),ic=a("h2"),KM=a("a"),rve=a("span"),F(V8.$$.fragment),lTr=l(),tve=a("span"),iTr=o("TFAutoModelForMultipleChoice"),bje=l(),ar=a("div"),F(X8.$$.fragment),dTr=l(),dc=a("p"),cTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),sU=a("a"),fTr=o("from_pretrained()"),mTr=o(" class method or the "),lU=a("a"),gTr=o("from_config()"),hTr=o(` class
method.`),pTr=l(),z8=a("p"),uTr=o("This class cannot be instantiated directly using "),ave=a("code"),_Tr=o("__init__()"),bTr=o(" (throws an error)."),vTr=l(),Pt=a("div"),F(W8.$$.fragment),FTr=l(),nve=a("p"),TTr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),MTr=l(),cc=a("p"),ETr=o(`Note:
Loading a model from its configuration file does `),sve=a("strong"),CTr=o("not"),wTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iU=a("a"),ATr=o("from_pretrained()"),yTr=o(" to load the model weights."),LTr=l(),F(ZM.$$.fragment),xTr=l(),Sr=a("div"),F(Q8.$$.fragment),$Tr=l(),lve=a("p"),kTr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),STr=l(),sn=a("p"),RTr=o("The model class to instantiate is selected based on the "),ive=a("code"),PTr=o("model_type"),BTr=o(` property of the config object (either
passed as an argument or loaded from `),dve=a("code"),ITr=o("pretrained_model_name_or_path"),NTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cve=a("code"),qTr=o("pretrained_model_name_or_path"),jTr=o(":"),DTr=l(),pe=a("ul"),eE=a("li"),fve=a("strong"),GTr=o("albert"),OTr=o(" \u2014 "),dU=a("a"),VTr=o("TFAlbertForMultipleChoice"),XTr=o(" (ALBERT model)"),zTr=l(),oE=a("li"),mve=a("strong"),WTr=o("bert"),QTr=o(" \u2014 "),cU=a("a"),HTr=o("TFBertForMultipleChoice"),UTr=o(" (BERT model)"),JTr=l(),rE=a("li"),gve=a("strong"),YTr=o("camembert"),KTr=o(" \u2014 "),fU=a("a"),ZTr=o("TFCamembertForMultipleChoice"),eMr=o(" (CamemBERT model)"),oMr=l(),tE=a("li"),hve=a("strong"),rMr=o("convbert"),tMr=o(" \u2014 "),mU=a("a"),aMr=o("TFConvBertForMultipleChoice"),nMr=o(" (ConvBERT model)"),sMr=l(),aE=a("li"),pve=a("strong"),lMr=o("distilbert"),iMr=o(" \u2014 "),gU=a("a"),dMr=o("TFDistilBertForMultipleChoice"),cMr=o(" (DistilBERT model)"),fMr=l(),nE=a("li"),uve=a("strong"),mMr=o("electra"),gMr=o(" \u2014 "),hU=a("a"),hMr=o("TFElectraForMultipleChoice"),pMr=o(" (ELECTRA model)"),uMr=l(),sE=a("li"),_ve=a("strong"),_Mr=o("flaubert"),bMr=o(" \u2014 "),pU=a("a"),vMr=o("TFFlaubertForMultipleChoice"),FMr=o(" (FlauBERT model)"),TMr=l(),lE=a("li"),bve=a("strong"),MMr=o("funnel"),EMr=o(" \u2014 "),uU=a("a"),CMr=o("TFFunnelForMultipleChoice"),wMr=o(" (Funnel Transformer model)"),AMr=l(),iE=a("li"),vve=a("strong"),yMr=o("longformer"),LMr=o(" \u2014 "),_U=a("a"),xMr=o("TFLongformerForMultipleChoice"),$Mr=o(" (Longformer model)"),kMr=l(),dE=a("li"),Fve=a("strong"),SMr=o("mobilebert"),RMr=o(" \u2014 "),bU=a("a"),PMr=o("TFMobileBertForMultipleChoice"),BMr=o(" (MobileBERT model)"),IMr=l(),cE=a("li"),Tve=a("strong"),NMr=o("mpnet"),qMr=o(" \u2014 "),vU=a("a"),jMr=o("TFMPNetForMultipleChoice"),DMr=o(" (MPNet model)"),GMr=l(),fE=a("li"),Mve=a("strong"),OMr=o("rembert"),VMr=o(" \u2014 "),FU=a("a"),XMr=o("TFRemBertForMultipleChoice"),zMr=o(" (RemBERT model)"),WMr=l(),mE=a("li"),Eve=a("strong"),QMr=o("roberta"),HMr=o(" \u2014 "),TU=a("a"),UMr=o("TFRobertaForMultipleChoice"),JMr=o(" (RoBERTa model)"),YMr=l(),gE=a("li"),Cve=a("strong"),KMr=o("roformer"),ZMr=o(" \u2014 "),MU=a("a"),eEr=o("TFRoFormerForMultipleChoice"),oEr=o(" (RoFormer model)"),rEr=l(),hE=a("li"),wve=a("strong"),tEr=o("xlm"),aEr=o(" \u2014 "),EU=a("a"),nEr=o("TFXLMForMultipleChoice"),sEr=o(" (XLM model)"),lEr=l(),pE=a("li"),Ave=a("strong"),iEr=o("xlm-roberta"),dEr=o(" \u2014 "),CU=a("a"),cEr=o("TFXLMRobertaForMultipleChoice"),fEr=o(" (XLM-RoBERTa model)"),mEr=l(),uE=a("li"),yve=a("strong"),gEr=o("xlnet"),hEr=o(" \u2014 "),wU=a("a"),pEr=o("TFXLNetForMultipleChoice"),uEr=o(" (XLNet model)"),_Er=l(),F(_E.$$.fragment),vje=l(),fc=a("h2"),bE=a("a"),Lve=a("span"),F(H8.$$.fragment),bEr=l(),xve=a("span"),vEr=o("TFAutoModelForNextSentencePrediction"),Fje=l(),nr=a("div"),F(U8.$$.fragment),FEr=l(),mc=a("p"),TEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),AU=a("a"),MEr=o("from_pretrained()"),EEr=o(" class method or the "),yU=a("a"),CEr=o("from_config()"),wEr=o(` class
method.`),AEr=l(),J8=a("p"),yEr=o("This class cannot be instantiated directly using "),$ve=a("code"),LEr=o("__init__()"),xEr=o(" (throws an error)."),$Er=l(),Bt=a("div"),F(Y8.$$.fragment),kEr=l(),kve=a("p"),SEr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),REr=l(),gc=a("p"),PEr=o(`Note:
Loading a model from its configuration file does `),Sve=a("strong"),BEr=o("not"),IEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LU=a("a"),NEr=o("from_pretrained()"),qEr=o(" to load the model weights."),jEr=l(),F(vE.$$.fragment),DEr=l(),Rr=a("div"),F(K8.$$.fragment),GEr=l(),Rve=a("p"),OEr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),VEr=l(),ln=a("p"),XEr=o("The model class to instantiate is selected based on the "),Pve=a("code"),zEr=o("model_type"),WEr=o(` property of the config object (either
passed as an argument or loaded from `),Bve=a("code"),QEr=o("pretrained_model_name_or_path"),HEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ive=a("code"),UEr=o("pretrained_model_name_or_path"),JEr=o(":"),YEr=l(),Z8=a("ul"),FE=a("li"),Nve=a("strong"),KEr=o("bert"),ZEr=o(" \u2014 "),xU=a("a"),eCr=o("TFBertForNextSentencePrediction"),oCr=o(" (BERT model)"),rCr=l(),TE=a("li"),qve=a("strong"),tCr=o("mobilebert"),aCr=o(" \u2014 "),$U=a("a"),nCr=o("TFMobileBertForNextSentencePrediction"),sCr=o(" (MobileBERT model)"),lCr=l(),F(ME.$$.fragment),Tje=l(),hc=a("h2"),EE=a("a"),jve=a("span"),F(e9.$$.fragment),iCr=l(),Dve=a("span"),dCr=o("TFAutoModelForTableQuestionAnswering"),Mje=l(),sr=a("div"),F(o9.$$.fragment),cCr=l(),pc=a("p"),fCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),kU=a("a"),mCr=o("from_pretrained()"),gCr=o(" class method or the "),SU=a("a"),hCr=o("from_config()"),pCr=o(` class
method.`),uCr=l(),r9=a("p"),_Cr=o("This class cannot be instantiated directly using "),Gve=a("code"),bCr=o("__init__()"),vCr=o(" (throws an error)."),FCr=l(),It=a("div"),F(t9.$$.fragment),TCr=l(),Ove=a("p"),MCr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),ECr=l(),uc=a("p"),CCr=o(`Note:
Loading a model from its configuration file does `),Vve=a("strong"),wCr=o("not"),ACr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RU=a("a"),yCr=o("from_pretrained()"),LCr=o(" to load the model weights."),xCr=l(),F(CE.$$.fragment),$Cr=l(),Pr=a("div"),F(a9.$$.fragment),kCr=l(),Xve=a("p"),SCr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),RCr=l(),dn=a("p"),PCr=o("The model class to instantiate is selected based on the "),zve=a("code"),BCr=o("model_type"),ICr=o(` property of the config object (either
passed as an argument or loaded from `),Wve=a("code"),NCr=o("pretrained_model_name_or_path"),qCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qve=a("code"),jCr=o("pretrained_model_name_or_path"),DCr=o(":"),GCr=l(),Hve=a("ul"),wE=a("li"),Uve=a("strong"),OCr=o("tapas"),VCr=o(" \u2014 "),PU=a("a"),XCr=o("TFTapasForQuestionAnswering"),zCr=o(" (TAPAS model)"),WCr=l(),F(AE.$$.fragment),Eje=l(),_c=a("h2"),yE=a("a"),Jve=a("span"),F(n9.$$.fragment),QCr=l(),Yve=a("span"),HCr=o("TFAutoModelForTokenClassification"),Cje=l(),lr=a("div"),F(s9.$$.fragment),UCr=l(),bc=a("p"),JCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),BU=a("a"),YCr=o("from_pretrained()"),KCr=o(" class method or the "),IU=a("a"),ZCr=o("from_config()"),e5r=o(` class
method.`),o5r=l(),l9=a("p"),r5r=o("This class cannot be instantiated directly using "),Kve=a("code"),t5r=o("__init__()"),a5r=o(" (throws an error)."),n5r=l(),Nt=a("div"),F(i9.$$.fragment),s5r=l(),Zve=a("p"),l5r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),i5r=l(),vc=a("p"),d5r=o(`Note:
Loading a model from its configuration file does `),eFe=a("strong"),c5r=o("not"),f5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NU=a("a"),m5r=o("from_pretrained()"),g5r=o(" to load the model weights."),h5r=l(),F(LE.$$.fragment),p5r=l(),Br=a("div"),F(d9.$$.fragment),u5r=l(),oFe=a("p"),_5r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),b5r=l(),cn=a("p"),v5r=o("The model class to instantiate is selected based on the "),rFe=a("code"),F5r=o("model_type"),T5r=o(` property of the config object (either
passed as an argument or loaded from `),tFe=a("code"),M5r=o("pretrained_model_name_or_path"),E5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aFe=a("code"),C5r=o("pretrained_model_name_or_path"),w5r=o(":"),A5r=l(),de=a("ul"),xE=a("li"),nFe=a("strong"),y5r=o("albert"),L5r=o(" \u2014 "),qU=a("a"),x5r=o("TFAlbertForTokenClassification"),$5r=o(" (ALBERT model)"),k5r=l(),$E=a("li"),sFe=a("strong"),S5r=o("bert"),R5r=o(" \u2014 "),jU=a("a"),P5r=o("TFBertForTokenClassification"),B5r=o(" (BERT model)"),I5r=l(),kE=a("li"),lFe=a("strong"),N5r=o("camembert"),q5r=o(" \u2014 "),DU=a("a"),j5r=o("TFCamembertForTokenClassification"),D5r=o(" (CamemBERT model)"),G5r=l(),SE=a("li"),iFe=a("strong"),O5r=o("convbert"),V5r=o(" \u2014 "),GU=a("a"),X5r=o("TFConvBertForTokenClassification"),z5r=o(" (ConvBERT model)"),W5r=l(),RE=a("li"),dFe=a("strong"),Q5r=o("deberta"),H5r=o(" \u2014 "),OU=a("a"),U5r=o("TFDebertaForTokenClassification"),J5r=o(" (DeBERTa model)"),Y5r=l(),PE=a("li"),cFe=a("strong"),K5r=o("deberta-v2"),Z5r=o(" \u2014 "),VU=a("a"),e3r=o("TFDebertaV2ForTokenClassification"),o3r=o(" (DeBERTa-v2 model)"),r3r=l(),BE=a("li"),fFe=a("strong"),t3r=o("distilbert"),a3r=o(" \u2014 "),XU=a("a"),n3r=o("TFDistilBertForTokenClassification"),s3r=o(" (DistilBERT model)"),l3r=l(),IE=a("li"),mFe=a("strong"),i3r=o("electra"),d3r=o(" \u2014 "),zU=a("a"),c3r=o("TFElectraForTokenClassification"),f3r=o(" (ELECTRA model)"),m3r=l(),NE=a("li"),gFe=a("strong"),g3r=o("flaubert"),h3r=o(" \u2014 "),WU=a("a"),p3r=o("TFFlaubertForTokenClassification"),u3r=o(" (FlauBERT model)"),_3r=l(),qE=a("li"),hFe=a("strong"),b3r=o("funnel"),v3r=o(" \u2014 "),QU=a("a"),F3r=o("TFFunnelForTokenClassification"),T3r=o(" (Funnel Transformer model)"),M3r=l(),jE=a("li"),pFe=a("strong"),E3r=o("layoutlm"),C3r=o(" \u2014 "),HU=a("a"),w3r=o("TFLayoutLMForTokenClassification"),A3r=o(" (LayoutLM model)"),y3r=l(),DE=a("li"),uFe=a("strong"),L3r=o("longformer"),x3r=o(" \u2014 "),UU=a("a"),$3r=o("TFLongformerForTokenClassification"),k3r=o(" (Longformer model)"),S3r=l(),GE=a("li"),_Fe=a("strong"),R3r=o("mobilebert"),P3r=o(" \u2014 "),JU=a("a"),B3r=o("TFMobileBertForTokenClassification"),I3r=o(" (MobileBERT model)"),N3r=l(),OE=a("li"),bFe=a("strong"),q3r=o("mpnet"),j3r=o(" \u2014 "),YU=a("a"),D3r=o("TFMPNetForTokenClassification"),G3r=o(" (MPNet model)"),O3r=l(),VE=a("li"),vFe=a("strong"),V3r=o("rembert"),X3r=o(" \u2014 "),KU=a("a"),z3r=o("TFRemBertForTokenClassification"),W3r=o(" (RemBERT model)"),Q3r=l(),XE=a("li"),FFe=a("strong"),H3r=o("roberta"),U3r=o(" \u2014 "),ZU=a("a"),J3r=o("TFRobertaForTokenClassification"),Y3r=o(" (RoBERTa model)"),K3r=l(),zE=a("li"),TFe=a("strong"),Z3r=o("roformer"),ewr=o(" \u2014 "),eJ=a("a"),owr=o("TFRoFormerForTokenClassification"),rwr=o(" (RoFormer model)"),twr=l(),WE=a("li"),MFe=a("strong"),awr=o("xlm"),nwr=o(" \u2014 "),oJ=a("a"),swr=o("TFXLMForTokenClassification"),lwr=o(" (XLM model)"),iwr=l(),QE=a("li"),EFe=a("strong"),dwr=o("xlm-roberta"),cwr=o(" \u2014 "),rJ=a("a"),fwr=o("TFXLMRobertaForTokenClassification"),mwr=o(" (XLM-RoBERTa model)"),gwr=l(),HE=a("li"),CFe=a("strong"),hwr=o("xlnet"),pwr=o(" \u2014 "),tJ=a("a"),uwr=o("TFXLNetForTokenClassification"),_wr=o(" (XLNet model)"),bwr=l(),F(UE.$$.fragment),wje=l(),Fc=a("h2"),JE=a("a"),wFe=a("span"),F(c9.$$.fragment),vwr=l(),AFe=a("span"),Fwr=o("TFAutoModelForQuestionAnswering"),Aje=l(),ir=a("div"),F(f9.$$.fragment),Twr=l(),Tc=a("p"),Mwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),aJ=a("a"),Ewr=o("from_pretrained()"),Cwr=o(" class method or the "),nJ=a("a"),wwr=o("from_config()"),Awr=o(` class
method.`),ywr=l(),m9=a("p"),Lwr=o("This class cannot be instantiated directly using "),yFe=a("code"),xwr=o("__init__()"),$wr=o(" (throws an error)."),kwr=l(),qt=a("div"),F(g9.$$.fragment),Swr=l(),LFe=a("p"),Rwr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Pwr=l(),Mc=a("p"),Bwr=o(`Note:
Loading a model from its configuration file does `),xFe=a("strong"),Iwr=o("not"),Nwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sJ=a("a"),qwr=o("from_pretrained()"),jwr=o(" to load the model weights."),Dwr=l(),F(YE.$$.fragment),Gwr=l(),Ir=a("div"),F(h9.$$.fragment),Owr=l(),$Fe=a("p"),Vwr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Xwr=l(),fn=a("p"),zwr=o("The model class to instantiate is selected based on the "),kFe=a("code"),Wwr=o("model_type"),Qwr=o(` property of the config object (either
passed as an argument or loaded from `),SFe=a("code"),Hwr=o("pretrained_model_name_or_path"),Uwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RFe=a("code"),Jwr=o("pretrained_model_name_or_path"),Ywr=o(":"),Kwr=l(),ce=a("ul"),KE=a("li"),PFe=a("strong"),Zwr=o("albert"),e6r=o(" \u2014 "),lJ=a("a"),o6r=o("TFAlbertForQuestionAnswering"),r6r=o(" (ALBERT model)"),t6r=l(),ZE=a("li"),BFe=a("strong"),a6r=o("bert"),n6r=o(" \u2014 "),iJ=a("a"),s6r=o("TFBertForQuestionAnswering"),l6r=o(" (BERT model)"),i6r=l(),eC=a("li"),IFe=a("strong"),d6r=o("camembert"),c6r=o(" \u2014 "),dJ=a("a"),f6r=o("TFCamembertForQuestionAnswering"),m6r=o(" (CamemBERT model)"),g6r=l(),oC=a("li"),NFe=a("strong"),h6r=o("convbert"),p6r=o(" \u2014 "),cJ=a("a"),u6r=o("TFConvBertForQuestionAnswering"),_6r=o(" (ConvBERT model)"),b6r=l(),rC=a("li"),qFe=a("strong"),v6r=o("deberta"),F6r=o(" \u2014 "),fJ=a("a"),T6r=o("TFDebertaForQuestionAnswering"),M6r=o(" (DeBERTa model)"),E6r=l(),tC=a("li"),jFe=a("strong"),C6r=o("deberta-v2"),w6r=o(" \u2014 "),mJ=a("a"),A6r=o("TFDebertaV2ForQuestionAnswering"),y6r=o(" (DeBERTa-v2 model)"),L6r=l(),aC=a("li"),DFe=a("strong"),x6r=o("distilbert"),$6r=o(" \u2014 "),gJ=a("a"),k6r=o("TFDistilBertForQuestionAnswering"),S6r=o(" (DistilBERT model)"),R6r=l(),nC=a("li"),GFe=a("strong"),P6r=o("electra"),B6r=o(" \u2014 "),hJ=a("a"),I6r=o("TFElectraForQuestionAnswering"),N6r=o(" (ELECTRA model)"),q6r=l(),sC=a("li"),OFe=a("strong"),j6r=o("flaubert"),D6r=o(" \u2014 "),pJ=a("a"),G6r=o("TFFlaubertForQuestionAnsweringSimple"),O6r=o(" (FlauBERT model)"),V6r=l(),lC=a("li"),VFe=a("strong"),X6r=o("funnel"),z6r=o(" \u2014 "),uJ=a("a"),W6r=o("TFFunnelForQuestionAnswering"),Q6r=o(" (Funnel Transformer model)"),H6r=l(),iC=a("li"),XFe=a("strong"),U6r=o("gptj"),J6r=o(" \u2014 "),_J=a("a"),Y6r=o("TFGPTJForQuestionAnswering"),K6r=o(" (GPT-J model)"),Z6r=l(),dC=a("li"),zFe=a("strong"),eAr=o("longformer"),oAr=o(" \u2014 "),bJ=a("a"),rAr=o("TFLongformerForQuestionAnswering"),tAr=o(" (Longformer model)"),aAr=l(),cC=a("li"),WFe=a("strong"),nAr=o("mobilebert"),sAr=o(" \u2014 "),vJ=a("a"),lAr=o("TFMobileBertForQuestionAnswering"),iAr=o(" (MobileBERT model)"),dAr=l(),fC=a("li"),QFe=a("strong"),cAr=o("mpnet"),fAr=o(" \u2014 "),FJ=a("a"),mAr=o("TFMPNetForQuestionAnswering"),gAr=o(" (MPNet model)"),hAr=l(),mC=a("li"),HFe=a("strong"),pAr=o("rembert"),uAr=o(" \u2014 "),TJ=a("a"),_Ar=o("TFRemBertForQuestionAnswering"),bAr=o(" (RemBERT model)"),vAr=l(),gC=a("li"),UFe=a("strong"),FAr=o("roberta"),TAr=o(" \u2014 "),MJ=a("a"),MAr=o("TFRobertaForQuestionAnswering"),EAr=o(" (RoBERTa model)"),CAr=l(),hC=a("li"),JFe=a("strong"),wAr=o("roformer"),AAr=o(" \u2014 "),EJ=a("a"),yAr=o("TFRoFormerForQuestionAnswering"),LAr=o(" (RoFormer model)"),xAr=l(),pC=a("li"),YFe=a("strong"),$Ar=o("xlm"),kAr=o(" \u2014 "),CJ=a("a"),SAr=o("TFXLMForQuestionAnsweringSimple"),RAr=o(" (XLM model)"),PAr=l(),uC=a("li"),KFe=a("strong"),BAr=o("xlm-roberta"),IAr=o(" \u2014 "),wJ=a("a"),NAr=o("TFXLMRobertaForQuestionAnswering"),qAr=o(" (XLM-RoBERTa model)"),jAr=l(),_C=a("li"),ZFe=a("strong"),DAr=o("xlnet"),GAr=o(" \u2014 "),AJ=a("a"),OAr=o("TFXLNetForQuestionAnsweringSimple"),VAr=o(" (XLNet model)"),XAr=l(),F(bC.$$.fragment),yje=l(),Ec=a("h2"),vC=a("a"),e0e=a("span"),F(p9.$$.fragment),zAr=l(),o0e=a("span"),WAr=o("TFAutoModelForVision2Seq"),Lje=l(),dr=a("div"),F(u9.$$.fragment),QAr=l(),Cc=a("p"),HAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),yJ=a("a"),UAr=o("from_pretrained()"),JAr=o(" class method or the "),LJ=a("a"),YAr=o("from_config()"),KAr=o(` class
method.`),ZAr=l(),_9=a("p"),eyr=o("This class cannot be instantiated directly using "),r0e=a("code"),oyr=o("__init__()"),ryr=o(" (throws an error)."),tyr=l(),jt=a("div"),F(b9.$$.fragment),ayr=l(),t0e=a("p"),nyr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),syr=l(),wc=a("p"),lyr=o(`Note:
Loading a model from its configuration file does `),a0e=a("strong"),iyr=o("not"),dyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xJ=a("a"),cyr=o("from_pretrained()"),fyr=o(" to load the model weights."),myr=l(),F(FC.$$.fragment),gyr=l(),Nr=a("div"),F(v9.$$.fragment),hyr=l(),n0e=a("p"),pyr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),uyr=l(),mn=a("p"),_yr=o("The model class to instantiate is selected based on the "),s0e=a("code"),byr=o("model_type"),vyr=o(` property of the config object (either
passed as an argument or loaded from `),l0e=a("code"),Fyr=o("pretrained_model_name_or_path"),Tyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i0e=a("code"),Myr=o("pretrained_model_name_or_path"),Eyr=o(":"),Cyr=l(),d0e=a("ul"),TC=a("li"),c0e=a("strong"),wyr=o("vision-encoder-decoder"),Ayr=o(" \u2014 "),$J=a("a"),yyr=o("TFVisionEncoderDecoderModel"),Lyr=o(" (Vision Encoder decoder model)"),xyr=l(),F(MC.$$.fragment),xje=l(),Ac=a("h2"),EC=a("a"),f0e=a("span"),F(F9.$$.fragment),$yr=l(),m0e=a("span"),kyr=o("TFAutoModelForSpeechSeq2Seq"),$je=l(),cr=a("div"),F(T9.$$.fragment),Syr=l(),yc=a("p"),Ryr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),kJ=a("a"),Pyr=o("from_pretrained()"),Byr=o(" class method or the "),SJ=a("a"),Iyr=o("from_config()"),Nyr=o(` class
method.`),qyr=l(),M9=a("p"),jyr=o("This class cannot be instantiated directly using "),g0e=a("code"),Dyr=o("__init__()"),Gyr=o(" (throws an error)."),Oyr=l(),Dt=a("div"),F(E9.$$.fragment),Vyr=l(),h0e=a("p"),Xyr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),zyr=l(),Lc=a("p"),Wyr=o(`Note:
Loading a model from its configuration file does `),p0e=a("strong"),Qyr=o("not"),Hyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RJ=a("a"),Uyr=o("from_pretrained()"),Jyr=o(" to load the model weights."),Yyr=l(),F(CC.$$.fragment),Kyr=l(),qr=a("div"),F(C9.$$.fragment),Zyr=l(),u0e=a("p"),eLr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),oLr=l(),gn=a("p"),rLr=o("The model class to instantiate is selected based on the "),_0e=a("code"),tLr=o("model_type"),aLr=o(` property of the config object (either
passed as an argument or loaded from `),b0e=a("code"),nLr=o("pretrained_model_name_or_path"),sLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v0e=a("code"),lLr=o("pretrained_model_name_or_path"),iLr=o(":"),dLr=l(),F0e=a("ul"),wC=a("li"),T0e=a("strong"),cLr=o("speech_to_text"),fLr=o(" \u2014 "),PJ=a("a"),mLr=o("TFSpeech2TextForConditionalGeneration"),gLr=o(" (Speech2Text model)"),hLr=l(),F(AC.$$.fragment),kje=l(),xc=a("h2"),yC=a("a"),M0e=a("span"),F(w9.$$.fragment),pLr=l(),E0e=a("span"),uLr=o("FlaxAutoModel"),Sje=l(),fr=a("div"),F(A9.$$.fragment),_Lr=l(),$c=a("p"),bLr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),BJ=a("a"),vLr=o("from_pretrained()"),FLr=o(" class method or the "),IJ=a("a"),TLr=o("from_config()"),MLr=o(` class
method.`),ELr=l(),y9=a("p"),CLr=o("This class cannot be instantiated directly using "),C0e=a("code"),wLr=o("__init__()"),ALr=o(" (throws an error)."),yLr=l(),Gt=a("div"),F(L9.$$.fragment),LLr=l(),w0e=a("p"),xLr=o("Instantiates one of the base model classes of the library from a configuration."),$Lr=l(),kc=a("p"),kLr=o(`Note:
Loading a model from its configuration file does `),A0e=a("strong"),SLr=o("not"),RLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NJ=a("a"),PLr=o("from_pretrained()"),BLr=o(" to load the model weights."),ILr=l(),F(LC.$$.fragment),NLr=l(),jr=a("div"),F(x9.$$.fragment),qLr=l(),y0e=a("p"),jLr=o("Instantiate one of the base model classes of the library from a pretrained model."),DLr=l(),hn=a("p"),GLr=o("The model class to instantiate is selected based on the "),L0e=a("code"),OLr=o("model_type"),VLr=o(` property of the config object (either
passed as an argument or loaded from `),x0e=a("code"),XLr=o("pretrained_model_name_or_path"),zLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$0e=a("code"),WLr=o("pretrained_model_name_or_path"),QLr=o(":"),HLr=l(),te=a("ul"),xC=a("li"),k0e=a("strong"),ULr=o("albert"),JLr=o(" \u2014 "),qJ=a("a"),YLr=o("FlaxAlbertModel"),KLr=o(" (ALBERT model)"),ZLr=l(),$C=a("li"),S0e=a("strong"),e8r=o("bart"),o8r=o(" \u2014 "),jJ=a("a"),r8r=o("FlaxBartModel"),t8r=o(" (BART model)"),a8r=l(),kC=a("li"),R0e=a("strong"),n8r=o("beit"),s8r=o(" \u2014 "),DJ=a("a"),l8r=o("FlaxBeitModel"),i8r=o(" (BEiT model)"),d8r=l(),SC=a("li"),P0e=a("strong"),c8r=o("bert"),f8r=o(" \u2014 "),GJ=a("a"),m8r=o("FlaxBertModel"),g8r=o(" (BERT model)"),h8r=l(),RC=a("li"),B0e=a("strong"),p8r=o("big_bird"),u8r=o(" \u2014 "),OJ=a("a"),_8r=o("FlaxBigBirdModel"),b8r=o(" (BigBird model)"),v8r=l(),PC=a("li"),I0e=a("strong"),F8r=o("blenderbot"),T8r=o(" \u2014 "),VJ=a("a"),M8r=o("FlaxBlenderbotModel"),E8r=o(" (Blenderbot model)"),C8r=l(),BC=a("li"),N0e=a("strong"),w8r=o("blenderbot-small"),A8r=o(" \u2014 "),XJ=a("a"),y8r=o("FlaxBlenderbotSmallModel"),L8r=o(" (BlenderbotSmall model)"),x8r=l(),IC=a("li"),q0e=a("strong"),$8r=o("clip"),k8r=o(" \u2014 "),zJ=a("a"),S8r=o("FlaxCLIPModel"),R8r=o(" (CLIP model)"),P8r=l(),NC=a("li"),j0e=a("strong"),B8r=o("distilbert"),I8r=o(" \u2014 "),WJ=a("a"),N8r=o("FlaxDistilBertModel"),q8r=o(" (DistilBERT model)"),j8r=l(),qC=a("li"),D0e=a("strong"),D8r=o("electra"),G8r=o(" \u2014 "),QJ=a("a"),O8r=o("FlaxElectraModel"),V8r=o(" (ELECTRA model)"),X8r=l(),jC=a("li"),G0e=a("strong"),z8r=o("gpt2"),W8r=o(" \u2014 "),HJ=a("a"),Q8r=o("FlaxGPT2Model"),H8r=o(" (OpenAI GPT-2 model)"),U8r=l(),DC=a("li"),O0e=a("strong"),J8r=o("gpt_neo"),Y8r=o(" \u2014 "),UJ=a("a"),K8r=o("FlaxGPTNeoModel"),Z8r=o(" (GPT Neo model)"),e9r=l(),GC=a("li"),V0e=a("strong"),o9r=o("gptj"),r9r=o(" \u2014 "),JJ=a("a"),t9r=o("FlaxGPTJModel"),a9r=o(" (GPT-J model)"),n9r=l(),OC=a("li"),X0e=a("strong"),s9r=o("marian"),l9r=o(" \u2014 "),YJ=a("a"),i9r=o("FlaxMarianModel"),d9r=o(" (Marian model)"),c9r=l(),VC=a("li"),z0e=a("strong"),f9r=o("mbart"),m9r=o(" \u2014 "),KJ=a("a"),g9r=o("FlaxMBartModel"),h9r=o(" (mBART model)"),p9r=l(),XC=a("li"),W0e=a("strong"),u9r=o("mt5"),_9r=o(" \u2014 "),ZJ=a("a"),b9r=o("FlaxMT5Model"),v9r=o(" (mT5 model)"),F9r=l(),zC=a("li"),Q0e=a("strong"),T9r=o("pegasus"),M9r=o(" \u2014 "),eY=a("a"),E9r=o("FlaxPegasusModel"),C9r=o(" (Pegasus model)"),w9r=l(),WC=a("li"),H0e=a("strong"),A9r=o("roberta"),y9r=o(" \u2014 "),oY=a("a"),L9r=o("FlaxRobertaModel"),x9r=o(" (RoBERTa model)"),$9r=l(),QC=a("li"),U0e=a("strong"),k9r=o("roformer"),S9r=o(" \u2014 "),rY=a("a"),R9r=o("FlaxRoFormerModel"),P9r=o(" (RoFormer model)"),B9r=l(),HC=a("li"),J0e=a("strong"),I9r=o("t5"),N9r=o(" \u2014 "),tY=a("a"),q9r=o("FlaxT5Model"),j9r=o(" (T5 model)"),D9r=l(),UC=a("li"),Y0e=a("strong"),G9r=o("vision-text-dual-encoder"),O9r=o(" \u2014 "),aY=a("a"),V9r=o("FlaxVisionTextDualEncoderModel"),X9r=o(" (VisionTextDualEncoder model)"),z9r=l(),JC=a("li"),K0e=a("strong"),W9r=o("vit"),Q9r=o(" \u2014 "),nY=a("a"),H9r=o("FlaxViTModel"),U9r=o(" (ViT model)"),J9r=l(),YC=a("li"),Z0e=a("strong"),Y9r=o("wav2vec2"),K9r=o(" \u2014 "),sY=a("a"),Z9r=o("FlaxWav2Vec2Model"),exr=o(" (Wav2Vec2 model)"),oxr=l(),KC=a("li"),eTe=a("strong"),rxr=o("xglm"),txr=o(" \u2014 "),lY=a("a"),axr=o("FlaxXGLMModel"),nxr=o(" (XGLM model)"),sxr=l(),ZC=a("li"),oTe=a("strong"),lxr=o("xlm-roberta"),ixr=o(" \u2014 "),iY=a("a"),dxr=o("FlaxXLMRobertaModel"),cxr=o(" (XLM-RoBERTa model)"),fxr=l(),F(e5.$$.fragment),Rje=l(),Sc=a("h2"),o5=a("a"),rTe=a("span"),F($9.$$.fragment),mxr=l(),tTe=a("span"),gxr=o("FlaxAutoModelForCausalLM"),Pje=l(),mr=a("div"),F(k9.$$.fragment),hxr=l(),Rc=a("p"),pxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),dY=a("a"),uxr=o("from_pretrained()"),_xr=o(" class method or the "),cY=a("a"),bxr=o("from_config()"),vxr=o(` class
method.`),Fxr=l(),S9=a("p"),Txr=o("This class cannot be instantiated directly using "),aTe=a("code"),Mxr=o("__init__()"),Exr=o(" (throws an error)."),Cxr=l(),Ot=a("div"),F(R9.$$.fragment),wxr=l(),nTe=a("p"),Axr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),yxr=l(),Pc=a("p"),Lxr=o(`Note:
Loading a model from its configuration file does `),sTe=a("strong"),xxr=o("not"),$xr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fY=a("a"),kxr=o("from_pretrained()"),Sxr=o(" to load the model weights."),Rxr=l(),F(r5.$$.fragment),Pxr=l(),Dr=a("div"),F(P9.$$.fragment),Bxr=l(),lTe=a("p"),Ixr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Nxr=l(),pn=a("p"),qxr=o("The model class to instantiate is selected based on the "),iTe=a("code"),jxr=o("model_type"),Dxr=o(` property of the config object (either
passed as an argument or loaded from `),dTe=a("code"),Gxr=o("pretrained_model_name_or_path"),Oxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cTe=a("code"),Vxr=o("pretrained_model_name_or_path"),Xxr=o(":"),zxr=l(),Re=a("ul"),t5=a("li"),fTe=a("strong"),Wxr=o("bart"),Qxr=o(" \u2014 "),mY=a("a"),Hxr=o("FlaxBartForCausalLM"),Uxr=o(" (BART model)"),Jxr=l(),a5=a("li"),mTe=a("strong"),Yxr=o("bert"),Kxr=o(" \u2014 "),gY=a("a"),Zxr=o("FlaxBertForCausalLM"),e$r=o(" (BERT model)"),o$r=l(),n5=a("li"),gTe=a("strong"),r$r=o("big_bird"),t$r=o(" \u2014 "),hY=a("a"),a$r=o("FlaxBigBirdForCausalLM"),n$r=o(" (BigBird model)"),s$r=l(),s5=a("li"),hTe=a("strong"),l$r=o("electra"),i$r=o(" \u2014 "),pY=a("a"),d$r=o("FlaxElectraForCausalLM"),c$r=o(" (ELECTRA model)"),f$r=l(),l5=a("li"),pTe=a("strong"),m$r=o("gpt2"),g$r=o(" \u2014 "),uY=a("a"),h$r=o("FlaxGPT2LMHeadModel"),p$r=o(" (OpenAI GPT-2 model)"),u$r=l(),i5=a("li"),uTe=a("strong"),_$r=o("gpt_neo"),b$r=o(" \u2014 "),_Y=a("a"),v$r=o("FlaxGPTNeoForCausalLM"),F$r=o(" (GPT Neo model)"),T$r=l(),d5=a("li"),_Te=a("strong"),M$r=o("gptj"),E$r=o(" \u2014 "),bY=a("a"),C$r=o("FlaxGPTJForCausalLM"),w$r=o(" (GPT-J model)"),A$r=l(),c5=a("li"),bTe=a("strong"),y$r=o("roberta"),L$r=o(" \u2014 "),vY=a("a"),x$r=o("FlaxRobertaForCausalLM"),$$r=o(" (RoBERTa model)"),k$r=l(),f5=a("li"),vTe=a("strong"),S$r=o("xglm"),R$r=o(" \u2014 "),FY=a("a"),P$r=o("FlaxXGLMForCausalLM"),B$r=o(" (XGLM model)"),I$r=l(),F(m5.$$.fragment),Bje=l(),Bc=a("h2"),g5=a("a"),FTe=a("span"),F(B9.$$.fragment),N$r=l(),TTe=a("span"),q$r=o("FlaxAutoModelForPreTraining"),Ije=l(),gr=a("div"),F(I9.$$.fragment),j$r=l(),Ic=a("p"),D$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),TY=a("a"),G$r=o("from_pretrained()"),O$r=o(" class method or the "),MY=a("a"),V$r=o("from_config()"),X$r=o(` class
method.`),z$r=l(),N9=a("p"),W$r=o("This class cannot be instantiated directly using "),MTe=a("code"),Q$r=o("__init__()"),H$r=o(" (throws an error)."),U$r=l(),Vt=a("div"),F(q9.$$.fragment),J$r=l(),ETe=a("p"),Y$r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),K$r=l(),Nc=a("p"),Z$r=o(`Note:
Loading a model from its configuration file does `),CTe=a("strong"),ekr=o("not"),okr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EY=a("a"),rkr=o("from_pretrained()"),tkr=o(" to load the model weights."),akr=l(),F(h5.$$.fragment),nkr=l(),Gr=a("div"),F(j9.$$.fragment),skr=l(),wTe=a("p"),lkr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),ikr=l(),un=a("p"),dkr=o("The model class to instantiate is selected based on the "),ATe=a("code"),ckr=o("model_type"),fkr=o(` property of the config object (either
passed as an argument or loaded from `),yTe=a("code"),mkr=o("pretrained_model_name_or_path"),gkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LTe=a("code"),hkr=o("pretrained_model_name_or_path"),pkr=o(":"),ukr=l(),Ee=a("ul"),p5=a("li"),xTe=a("strong"),_kr=o("albert"),bkr=o(" \u2014 "),CY=a("a"),vkr=o("FlaxAlbertForPreTraining"),Fkr=o(" (ALBERT model)"),Tkr=l(),u5=a("li"),$Te=a("strong"),Mkr=o("bart"),Ekr=o(" \u2014 "),wY=a("a"),Ckr=o("FlaxBartForConditionalGeneration"),wkr=o(" (BART model)"),Akr=l(),_5=a("li"),kTe=a("strong"),ykr=o("bert"),Lkr=o(" \u2014 "),AY=a("a"),xkr=o("FlaxBertForPreTraining"),$kr=o(" (BERT model)"),kkr=l(),b5=a("li"),STe=a("strong"),Skr=o("big_bird"),Rkr=o(" \u2014 "),yY=a("a"),Pkr=o("FlaxBigBirdForPreTraining"),Bkr=o(" (BigBird model)"),Ikr=l(),v5=a("li"),RTe=a("strong"),Nkr=o("electra"),qkr=o(" \u2014 "),LY=a("a"),jkr=o("FlaxElectraForPreTraining"),Dkr=o(" (ELECTRA model)"),Gkr=l(),F5=a("li"),PTe=a("strong"),Okr=o("mbart"),Vkr=o(" \u2014 "),xY=a("a"),Xkr=o("FlaxMBartForConditionalGeneration"),zkr=o(" (mBART model)"),Wkr=l(),T5=a("li"),BTe=a("strong"),Qkr=o("mt5"),Hkr=o(" \u2014 "),$Y=a("a"),Ukr=o("FlaxMT5ForConditionalGeneration"),Jkr=o(" (mT5 model)"),Ykr=l(),M5=a("li"),ITe=a("strong"),Kkr=o("roberta"),Zkr=o(" \u2014 "),kY=a("a"),eSr=o("FlaxRobertaForMaskedLM"),oSr=o(" (RoBERTa model)"),rSr=l(),E5=a("li"),NTe=a("strong"),tSr=o("roformer"),aSr=o(" \u2014 "),SY=a("a"),nSr=o("FlaxRoFormerForMaskedLM"),sSr=o(" (RoFormer model)"),lSr=l(),C5=a("li"),qTe=a("strong"),iSr=o("t5"),dSr=o(" \u2014 "),RY=a("a"),cSr=o("FlaxT5ForConditionalGeneration"),fSr=o(" (T5 model)"),mSr=l(),w5=a("li"),jTe=a("strong"),gSr=o("wav2vec2"),hSr=o(" \u2014 "),PY=a("a"),pSr=o("FlaxWav2Vec2ForPreTraining"),uSr=o(" (Wav2Vec2 model)"),_Sr=l(),A5=a("li"),DTe=a("strong"),bSr=o("xlm-roberta"),vSr=o(" \u2014 "),BY=a("a"),FSr=o("FlaxXLMRobertaForMaskedLM"),TSr=o(" (XLM-RoBERTa model)"),MSr=l(),F(y5.$$.fragment),Nje=l(),qc=a("h2"),L5=a("a"),GTe=a("span"),F(D9.$$.fragment),ESr=l(),OTe=a("span"),CSr=o("FlaxAutoModelForMaskedLM"),qje=l(),hr=a("div"),F(G9.$$.fragment),wSr=l(),jc=a("p"),ASr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),IY=a("a"),ySr=o("from_pretrained()"),LSr=o(" class method or the "),NY=a("a"),xSr=o("from_config()"),$Sr=o(` class
method.`),kSr=l(),O9=a("p"),SSr=o("This class cannot be instantiated directly using "),VTe=a("code"),RSr=o("__init__()"),PSr=o(" (throws an error)."),BSr=l(),Xt=a("div"),F(V9.$$.fragment),ISr=l(),XTe=a("p"),NSr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),qSr=l(),Dc=a("p"),jSr=o(`Note:
Loading a model from its configuration file does `),zTe=a("strong"),DSr=o("not"),GSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qY=a("a"),OSr=o("from_pretrained()"),VSr=o(" to load the model weights."),XSr=l(),F(x5.$$.fragment),zSr=l(),Or=a("div"),F(X9.$$.fragment),WSr=l(),WTe=a("p"),QSr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),HSr=l(),_n=a("p"),USr=o("The model class to instantiate is selected based on the "),QTe=a("code"),JSr=o("model_type"),YSr=o(` property of the config object (either
passed as an argument or loaded from `),HTe=a("code"),KSr=o("pretrained_model_name_or_path"),ZSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UTe=a("code"),eRr=o("pretrained_model_name_or_path"),oRr=o(":"),rRr=l(),Le=a("ul"),$5=a("li"),JTe=a("strong"),tRr=o("albert"),aRr=o(" \u2014 "),jY=a("a"),nRr=o("FlaxAlbertForMaskedLM"),sRr=o(" (ALBERT model)"),lRr=l(),k5=a("li"),YTe=a("strong"),iRr=o("bart"),dRr=o(" \u2014 "),DY=a("a"),cRr=o("FlaxBartForConditionalGeneration"),fRr=o(" (BART model)"),mRr=l(),S5=a("li"),KTe=a("strong"),gRr=o("bert"),hRr=o(" \u2014 "),GY=a("a"),pRr=o("FlaxBertForMaskedLM"),uRr=o(" (BERT model)"),_Rr=l(),R5=a("li"),ZTe=a("strong"),bRr=o("big_bird"),vRr=o(" \u2014 "),OY=a("a"),FRr=o("FlaxBigBirdForMaskedLM"),TRr=o(" (BigBird model)"),MRr=l(),P5=a("li"),eMe=a("strong"),ERr=o("distilbert"),CRr=o(" \u2014 "),VY=a("a"),wRr=o("FlaxDistilBertForMaskedLM"),ARr=o(" (DistilBERT model)"),yRr=l(),B5=a("li"),oMe=a("strong"),LRr=o("electra"),xRr=o(" \u2014 "),XY=a("a"),$Rr=o("FlaxElectraForMaskedLM"),kRr=o(" (ELECTRA model)"),SRr=l(),I5=a("li"),rMe=a("strong"),RRr=o("mbart"),PRr=o(" \u2014 "),zY=a("a"),BRr=o("FlaxMBartForConditionalGeneration"),IRr=o(" (mBART model)"),NRr=l(),N5=a("li"),tMe=a("strong"),qRr=o("roberta"),jRr=o(" \u2014 "),WY=a("a"),DRr=o("FlaxRobertaForMaskedLM"),GRr=o(" (RoBERTa model)"),ORr=l(),q5=a("li"),aMe=a("strong"),VRr=o("roformer"),XRr=o(" \u2014 "),QY=a("a"),zRr=o("FlaxRoFormerForMaskedLM"),WRr=o(" (RoFormer model)"),QRr=l(),j5=a("li"),nMe=a("strong"),HRr=o("xlm-roberta"),URr=o(" \u2014 "),HY=a("a"),JRr=o("FlaxXLMRobertaForMaskedLM"),YRr=o(" (XLM-RoBERTa model)"),KRr=l(),F(D5.$$.fragment),jje=l(),Gc=a("h2"),G5=a("a"),sMe=a("span"),F(z9.$$.fragment),ZRr=l(),lMe=a("span"),ePr=o("FlaxAutoModelForSeq2SeqLM"),Dje=l(),pr=a("div"),F(W9.$$.fragment),oPr=l(),Oc=a("p"),rPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),UY=a("a"),tPr=o("from_pretrained()"),aPr=o(" class method or the "),JY=a("a"),nPr=o("from_config()"),sPr=o(` class
method.`),lPr=l(),Q9=a("p"),iPr=o("This class cannot be instantiated directly using "),iMe=a("code"),dPr=o("__init__()"),cPr=o(" (throws an error)."),fPr=l(),zt=a("div"),F(H9.$$.fragment),mPr=l(),dMe=a("p"),gPr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),hPr=l(),Vc=a("p"),pPr=o(`Note:
Loading a model from its configuration file does `),cMe=a("strong"),uPr=o("not"),_Pr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YY=a("a"),bPr=o("from_pretrained()"),vPr=o(" to load the model weights."),FPr=l(),F(O5.$$.fragment),TPr=l(),Vr=a("div"),F(U9.$$.fragment),MPr=l(),fMe=a("p"),EPr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),CPr=l(),bn=a("p"),wPr=o("The model class to instantiate is selected based on the "),mMe=a("code"),APr=o("model_type"),yPr=o(` property of the config object (either
passed as an argument or loaded from `),gMe=a("code"),LPr=o("pretrained_model_name_or_path"),xPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hMe=a("code"),$Pr=o("pretrained_model_name_or_path"),kPr=o(":"),SPr=l(),Pe=a("ul"),V5=a("li"),pMe=a("strong"),RPr=o("bart"),PPr=o(" \u2014 "),KY=a("a"),BPr=o("FlaxBartForConditionalGeneration"),IPr=o(" (BART model)"),NPr=l(),X5=a("li"),uMe=a("strong"),qPr=o("blenderbot"),jPr=o(" \u2014 "),ZY=a("a"),DPr=o("FlaxBlenderbotForConditionalGeneration"),GPr=o(" (Blenderbot model)"),OPr=l(),z5=a("li"),_Me=a("strong"),VPr=o("blenderbot-small"),XPr=o(" \u2014 "),eK=a("a"),zPr=o("FlaxBlenderbotSmallForConditionalGeneration"),WPr=o(" (BlenderbotSmall model)"),QPr=l(),W5=a("li"),bMe=a("strong"),HPr=o("encoder-decoder"),UPr=o(" \u2014 "),oK=a("a"),JPr=o("FlaxEncoderDecoderModel"),YPr=o(" (Encoder decoder model)"),KPr=l(),Q5=a("li"),vMe=a("strong"),ZPr=o("marian"),eBr=o(" \u2014 "),rK=a("a"),oBr=o("FlaxMarianMTModel"),rBr=o(" (Marian model)"),tBr=l(),H5=a("li"),FMe=a("strong"),aBr=o("mbart"),nBr=o(" \u2014 "),tK=a("a"),sBr=o("FlaxMBartForConditionalGeneration"),lBr=o(" (mBART model)"),iBr=l(),U5=a("li"),TMe=a("strong"),dBr=o("mt5"),cBr=o(" \u2014 "),aK=a("a"),fBr=o("FlaxMT5ForConditionalGeneration"),mBr=o(" (mT5 model)"),gBr=l(),J5=a("li"),MMe=a("strong"),hBr=o("pegasus"),pBr=o(" \u2014 "),nK=a("a"),uBr=o("FlaxPegasusForConditionalGeneration"),_Br=o(" (Pegasus model)"),bBr=l(),Y5=a("li"),EMe=a("strong"),vBr=o("t5"),FBr=o(" \u2014 "),sK=a("a"),TBr=o("FlaxT5ForConditionalGeneration"),MBr=o(" (T5 model)"),EBr=l(),F(K5.$$.fragment),Gje=l(),Xc=a("h2"),Z5=a("a"),CMe=a("span"),F(J9.$$.fragment),CBr=l(),wMe=a("span"),wBr=o("FlaxAutoModelForSequenceClassification"),Oje=l(),ur=a("div"),F(Y9.$$.fragment),ABr=l(),zc=a("p"),yBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),lK=a("a"),LBr=o("from_pretrained()"),xBr=o(" class method or the "),iK=a("a"),$Br=o("from_config()"),kBr=o(` class
method.`),SBr=l(),K9=a("p"),RBr=o("This class cannot be instantiated directly using "),AMe=a("code"),PBr=o("__init__()"),BBr=o(" (throws an error)."),IBr=l(),Wt=a("div"),F(Z9.$$.fragment),NBr=l(),yMe=a("p"),qBr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),jBr=l(),Wc=a("p"),DBr=o(`Note:
Loading a model from its configuration file does `),LMe=a("strong"),GBr=o("not"),OBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dK=a("a"),VBr=o("from_pretrained()"),XBr=o(" to load the model weights."),zBr=l(),F(e3.$$.fragment),WBr=l(),Xr=a("div"),F(ex.$$.fragment),QBr=l(),xMe=a("p"),HBr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),UBr=l(),vn=a("p"),JBr=o("The model class to instantiate is selected based on the "),$Me=a("code"),YBr=o("model_type"),KBr=o(` property of the config object (either
passed as an argument or loaded from `),kMe=a("code"),ZBr=o("pretrained_model_name_or_path"),eIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SMe=a("code"),oIr=o("pretrained_model_name_or_path"),rIr=o(":"),tIr=l(),xe=a("ul"),o3=a("li"),RMe=a("strong"),aIr=o("albert"),nIr=o(" \u2014 "),cK=a("a"),sIr=o("FlaxAlbertForSequenceClassification"),lIr=o(" (ALBERT model)"),iIr=l(),r3=a("li"),PMe=a("strong"),dIr=o("bart"),cIr=o(" \u2014 "),fK=a("a"),fIr=o("FlaxBartForSequenceClassification"),mIr=o(" (BART model)"),gIr=l(),t3=a("li"),BMe=a("strong"),hIr=o("bert"),pIr=o(" \u2014 "),mK=a("a"),uIr=o("FlaxBertForSequenceClassification"),_Ir=o(" (BERT model)"),bIr=l(),a3=a("li"),IMe=a("strong"),vIr=o("big_bird"),FIr=o(" \u2014 "),gK=a("a"),TIr=o("FlaxBigBirdForSequenceClassification"),MIr=o(" (BigBird model)"),EIr=l(),n3=a("li"),NMe=a("strong"),CIr=o("distilbert"),wIr=o(" \u2014 "),hK=a("a"),AIr=o("FlaxDistilBertForSequenceClassification"),yIr=o(" (DistilBERT model)"),LIr=l(),s3=a("li"),qMe=a("strong"),xIr=o("electra"),$Ir=o(" \u2014 "),pK=a("a"),kIr=o("FlaxElectraForSequenceClassification"),SIr=o(" (ELECTRA model)"),RIr=l(),l3=a("li"),jMe=a("strong"),PIr=o("mbart"),BIr=o(" \u2014 "),uK=a("a"),IIr=o("FlaxMBartForSequenceClassification"),NIr=o(" (mBART model)"),qIr=l(),i3=a("li"),DMe=a("strong"),jIr=o("roberta"),DIr=o(" \u2014 "),_K=a("a"),GIr=o("FlaxRobertaForSequenceClassification"),OIr=o(" (RoBERTa model)"),VIr=l(),d3=a("li"),GMe=a("strong"),XIr=o("roformer"),zIr=o(" \u2014 "),bK=a("a"),WIr=o("FlaxRoFormerForSequenceClassification"),QIr=o(" (RoFormer model)"),HIr=l(),c3=a("li"),OMe=a("strong"),UIr=o("xlm-roberta"),JIr=o(" \u2014 "),vK=a("a"),YIr=o("FlaxXLMRobertaForSequenceClassification"),KIr=o(" (XLM-RoBERTa model)"),ZIr=l(),F(f3.$$.fragment),Vje=l(),Qc=a("h2"),m3=a("a"),VMe=a("span"),F(ox.$$.fragment),eNr=l(),XMe=a("span"),oNr=o("FlaxAutoModelForQuestionAnswering"),Xje=l(),_r=a("div"),F(rx.$$.fragment),rNr=l(),Hc=a("p"),tNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),FK=a("a"),aNr=o("from_pretrained()"),nNr=o(" class method or the "),TK=a("a"),sNr=o("from_config()"),lNr=o(` class
method.`),iNr=l(),tx=a("p"),dNr=o("This class cannot be instantiated directly using "),zMe=a("code"),cNr=o("__init__()"),fNr=o(" (throws an error)."),mNr=l(),Qt=a("div"),F(ax.$$.fragment),gNr=l(),WMe=a("p"),hNr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),pNr=l(),Uc=a("p"),uNr=o(`Note:
Loading a model from its configuration file does `),QMe=a("strong"),_Nr=o("not"),bNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MK=a("a"),vNr=o("from_pretrained()"),FNr=o(" to load the model weights."),TNr=l(),F(g3.$$.fragment),MNr=l(),zr=a("div"),F(nx.$$.fragment),ENr=l(),HMe=a("p"),CNr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),wNr=l(),Fn=a("p"),ANr=o("The model class to instantiate is selected based on the "),UMe=a("code"),yNr=o("model_type"),LNr=o(` property of the config object (either
passed as an argument or loaded from `),JMe=a("code"),xNr=o("pretrained_model_name_or_path"),$Nr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YMe=a("code"),kNr=o("pretrained_model_name_or_path"),SNr=o(":"),RNr=l(),$e=a("ul"),h3=a("li"),KMe=a("strong"),PNr=o("albert"),BNr=o(" \u2014 "),EK=a("a"),INr=o("FlaxAlbertForQuestionAnswering"),NNr=o(" (ALBERT model)"),qNr=l(),p3=a("li"),ZMe=a("strong"),jNr=o("bart"),DNr=o(" \u2014 "),CK=a("a"),GNr=o("FlaxBartForQuestionAnswering"),ONr=o(" (BART model)"),VNr=l(),u3=a("li"),eEe=a("strong"),XNr=o("bert"),zNr=o(" \u2014 "),wK=a("a"),WNr=o("FlaxBertForQuestionAnswering"),QNr=o(" (BERT model)"),HNr=l(),_3=a("li"),oEe=a("strong"),UNr=o("big_bird"),JNr=o(" \u2014 "),AK=a("a"),YNr=o("FlaxBigBirdForQuestionAnswering"),KNr=o(" (BigBird model)"),ZNr=l(),b3=a("li"),rEe=a("strong"),eqr=o("distilbert"),oqr=o(" \u2014 "),yK=a("a"),rqr=o("FlaxDistilBertForQuestionAnswering"),tqr=o(" (DistilBERT model)"),aqr=l(),v3=a("li"),tEe=a("strong"),nqr=o("electra"),sqr=o(" \u2014 "),LK=a("a"),lqr=o("FlaxElectraForQuestionAnswering"),iqr=o(" (ELECTRA model)"),dqr=l(),F3=a("li"),aEe=a("strong"),cqr=o("mbart"),fqr=o(" \u2014 "),xK=a("a"),mqr=o("FlaxMBartForQuestionAnswering"),gqr=o(" (mBART model)"),hqr=l(),T3=a("li"),nEe=a("strong"),pqr=o("roberta"),uqr=o(" \u2014 "),$K=a("a"),_qr=o("FlaxRobertaForQuestionAnswering"),bqr=o(" (RoBERTa model)"),vqr=l(),M3=a("li"),sEe=a("strong"),Fqr=o("roformer"),Tqr=o(" \u2014 "),kK=a("a"),Mqr=o("FlaxRoFormerForQuestionAnswering"),Eqr=o(" (RoFormer model)"),Cqr=l(),E3=a("li"),lEe=a("strong"),wqr=o("xlm-roberta"),Aqr=o(" \u2014 "),SK=a("a"),yqr=o("FlaxXLMRobertaForQuestionAnswering"),Lqr=o(" (XLM-RoBERTa model)"),xqr=l(),F(C3.$$.fragment),zje=l(),Jc=a("h2"),w3=a("a"),iEe=a("span"),F(sx.$$.fragment),$qr=l(),dEe=a("span"),kqr=o("FlaxAutoModelForTokenClassification"),Wje=l(),br=a("div"),F(lx.$$.fragment),Sqr=l(),Yc=a("p"),Rqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),RK=a("a"),Pqr=o("from_pretrained()"),Bqr=o(" class method or the "),PK=a("a"),Iqr=o("from_config()"),Nqr=o(` class
method.`),qqr=l(),ix=a("p"),jqr=o("This class cannot be instantiated directly using "),cEe=a("code"),Dqr=o("__init__()"),Gqr=o(" (throws an error)."),Oqr=l(),Ht=a("div"),F(dx.$$.fragment),Vqr=l(),fEe=a("p"),Xqr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),zqr=l(),Kc=a("p"),Wqr=o(`Note:
Loading a model from its configuration file does `),mEe=a("strong"),Qqr=o("not"),Hqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BK=a("a"),Uqr=o("from_pretrained()"),Jqr=o(" to load the model weights."),Yqr=l(),F(A3.$$.fragment),Kqr=l(),Wr=a("div"),F(cx.$$.fragment),Zqr=l(),gEe=a("p"),ejr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),ojr=l(),Tn=a("p"),rjr=o("The model class to instantiate is selected based on the "),hEe=a("code"),tjr=o("model_type"),ajr=o(` property of the config object (either
passed as an argument or loaded from `),pEe=a("code"),njr=o("pretrained_model_name_or_path"),sjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uEe=a("code"),ljr=o("pretrained_model_name_or_path"),ijr=o(":"),djr=l(),De=a("ul"),y3=a("li"),_Ee=a("strong"),cjr=o("albert"),fjr=o(" \u2014 "),IK=a("a"),mjr=o("FlaxAlbertForTokenClassification"),gjr=o(" (ALBERT model)"),hjr=l(),L3=a("li"),bEe=a("strong"),pjr=o("bert"),ujr=o(" \u2014 "),NK=a("a"),_jr=o("FlaxBertForTokenClassification"),bjr=o(" (BERT model)"),vjr=l(),x3=a("li"),vEe=a("strong"),Fjr=o("big_bird"),Tjr=o(" \u2014 "),qK=a("a"),Mjr=o("FlaxBigBirdForTokenClassification"),Ejr=o(" (BigBird model)"),Cjr=l(),$3=a("li"),FEe=a("strong"),wjr=o("distilbert"),Ajr=o(" \u2014 "),jK=a("a"),yjr=o("FlaxDistilBertForTokenClassification"),Ljr=o(" (DistilBERT model)"),xjr=l(),k3=a("li"),TEe=a("strong"),$jr=o("electra"),kjr=o(" \u2014 "),DK=a("a"),Sjr=o("FlaxElectraForTokenClassification"),Rjr=o(" (ELECTRA model)"),Pjr=l(),S3=a("li"),MEe=a("strong"),Bjr=o("roberta"),Ijr=o(" \u2014 "),GK=a("a"),Njr=o("FlaxRobertaForTokenClassification"),qjr=o(" (RoBERTa model)"),jjr=l(),R3=a("li"),EEe=a("strong"),Djr=o("roformer"),Gjr=o(" \u2014 "),OK=a("a"),Ojr=o("FlaxRoFormerForTokenClassification"),Vjr=o(" (RoFormer model)"),Xjr=l(),P3=a("li"),CEe=a("strong"),zjr=o("xlm-roberta"),Wjr=o(" \u2014 "),VK=a("a"),Qjr=o("FlaxXLMRobertaForTokenClassification"),Hjr=o(" (XLM-RoBERTa model)"),Ujr=l(),F(B3.$$.fragment),Qje=l(),Zc=a("h2"),I3=a("a"),wEe=a("span"),F(fx.$$.fragment),Jjr=l(),AEe=a("span"),Yjr=o("FlaxAutoModelForMultipleChoice"),Hje=l(),vr=a("div"),F(mx.$$.fragment),Kjr=l(),ef=a("p"),Zjr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),XK=a("a"),eDr=o("from_pretrained()"),oDr=o(" class method or the "),zK=a("a"),rDr=o("from_config()"),tDr=o(` class
method.`),aDr=l(),gx=a("p"),nDr=o("This class cannot be instantiated directly using "),yEe=a("code"),sDr=o("__init__()"),lDr=o(" (throws an error)."),iDr=l(),Ut=a("div"),F(hx.$$.fragment),dDr=l(),LEe=a("p"),cDr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),fDr=l(),of=a("p"),mDr=o(`Note:
Loading a model from its configuration file does `),xEe=a("strong"),gDr=o("not"),hDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WK=a("a"),pDr=o("from_pretrained()"),uDr=o(" to load the model weights."),_Dr=l(),F(N3.$$.fragment),bDr=l(),Qr=a("div"),F(px.$$.fragment),vDr=l(),$Ee=a("p"),FDr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),TDr=l(),Mn=a("p"),MDr=o("The model class to instantiate is selected based on the "),kEe=a("code"),EDr=o("model_type"),CDr=o(` property of the config object (either
passed as an argument or loaded from `),SEe=a("code"),wDr=o("pretrained_model_name_or_path"),ADr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),REe=a("code"),yDr=o("pretrained_model_name_or_path"),LDr=o(":"),xDr=l(),Ge=a("ul"),q3=a("li"),PEe=a("strong"),$Dr=o("albert"),kDr=o(" \u2014 "),QK=a("a"),SDr=o("FlaxAlbertForMultipleChoice"),RDr=o(" (ALBERT model)"),PDr=l(),j3=a("li"),BEe=a("strong"),BDr=o("bert"),IDr=o(" \u2014 "),HK=a("a"),NDr=o("FlaxBertForMultipleChoice"),qDr=o(" (BERT model)"),jDr=l(),D3=a("li"),IEe=a("strong"),DDr=o("big_bird"),GDr=o(" \u2014 "),UK=a("a"),ODr=o("FlaxBigBirdForMultipleChoice"),VDr=o(" (BigBird model)"),XDr=l(),G3=a("li"),NEe=a("strong"),zDr=o("distilbert"),WDr=o(" \u2014 "),JK=a("a"),QDr=o("FlaxDistilBertForMultipleChoice"),HDr=o(" (DistilBERT model)"),UDr=l(),O3=a("li"),qEe=a("strong"),JDr=o("electra"),YDr=o(" \u2014 "),YK=a("a"),KDr=o("FlaxElectraForMultipleChoice"),ZDr=o(" (ELECTRA model)"),eGr=l(),V3=a("li"),jEe=a("strong"),oGr=o("roberta"),rGr=o(" \u2014 "),KK=a("a"),tGr=o("FlaxRobertaForMultipleChoice"),aGr=o(" (RoBERTa model)"),nGr=l(),X3=a("li"),DEe=a("strong"),sGr=o("roformer"),lGr=o(" \u2014 "),ZK=a("a"),iGr=o("FlaxRoFormerForMultipleChoice"),dGr=o(" (RoFormer model)"),cGr=l(),z3=a("li"),GEe=a("strong"),fGr=o("xlm-roberta"),mGr=o(" \u2014 "),eZ=a("a"),gGr=o("FlaxXLMRobertaForMultipleChoice"),hGr=o(" (XLM-RoBERTa model)"),pGr=l(),F(W3.$$.fragment),Uje=l(),rf=a("h2"),Q3=a("a"),OEe=a("span"),F(ux.$$.fragment),uGr=l(),VEe=a("span"),_Gr=o("FlaxAutoModelForNextSentencePrediction"),Jje=l(),Fr=a("div"),F(_x.$$.fragment),bGr=l(),tf=a("p"),vGr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),oZ=a("a"),FGr=o("from_pretrained()"),TGr=o(" class method or the "),rZ=a("a"),MGr=o("from_config()"),EGr=o(` class
method.`),CGr=l(),bx=a("p"),wGr=o("This class cannot be instantiated directly using "),XEe=a("code"),AGr=o("__init__()"),yGr=o(" (throws an error)."),LGr=l(),Jt=a("div"),F(vx.$$.fragment),xGr=l(),zEe=a("p"),$Gr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),kGr=l(),af=a("p"),SGr=o(`Note:
Loading a model from its configuration file does `),WEe=a("strong"),RGr=o("not"),PGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tZ=a("a"),BGr=o("from_pretrained()"),IGr=o(" to load the model weights."),NGr=l(),F(H3.$$.fragment),qGr=l(),Hr=a("div"),F(Fx.$$.fragment),jGr=l(),QEe=a("p"),DGr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),GGr=l(),En=a("p"),OGr=o("The model class to instantiate is selected based on the "),HEe=a("code"),VGr=o("model_type"),XGr=o(` property of the config object (either
passed as an argument or loaded from `),UEe=a("code"),zGr=o("pretrained_model_name_or_path"),WGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JEe=a("code"),QGr=o("pretrained_model_name_or_path"),HGr=o(":"),UGr=l(),YEe=a("ul"),U3=a("li"),KEe=a("strong"),JGr=o("bert"),YGr=o(" \u2014 "),aZ=a("a"),KGr=o("FlaxBertForNextSentencePrediction"),ZGr=o(" (BERT model)"),eOr=l(),F(J3.$$.fragment),Yje=l(),nf=a("h2"),Y3=a("a"),ZEe=a("span"),F(Tx.$$.fragment),oOr=l(),eCe=a("span"),rOr=o("FlaxAutoModelForImageClassification"),Kje=l(),Tr=a("div"),F(Mx.$$.fragment),tOr=l(),sf=a("p"),aOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),nZ=a("a"),nOr=o("from_pretrained()"),sOr=o(" class method or the "),sZ=a("a"),lOr=o("from_config()"),iOr=o(` class
method.`),dOr=l(),Ex=a("p"),cOr=o("This class cannot be instantiated directly using "),oCe=a("code"),fOr=o("__init__()"),mOr=o(" (throws an error)."),gOr=l(),Yt=a("div"),F(Cx.$$.fragment),hOr=l(),rCe=a("p"),pOr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),uOr=l(),lf=a("p"),_Or=o(`Note:
Loading a model from its configuration file does `),tCe=a("strong"),bOr=o("not"),vOr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lZ=a("a"),FOr=o("from_pretrained()"),TOr=o(" to load the model weights."),MOr=l(),F(K3.$$.fragment),EOr=l(),Ur=a("div"),F(wx.$$.fragment),COr=l(),aCe=a("p"),wOr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),AOr=l(),Cn=a("p"),yOr=o("The model class to instantiate is selected based on the "),nCe=a("code"),LOr=o("model_type"),xOr=o(` property of the config object (either
passed as an argument or loaded from `),sCe=a("code"),$Or=o("pretrained_model_name_or_path"),kOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lCe=a("code"),SOr=o("pretrained_model_name_or_path"),ROr=o(":"),POr=l(),Ax=a("ul"),Z3=a("li"),iCe=a("strong"),BOr=o("beit"),IOr=o(" \u2014 "),iZ=a("a"),NOr=o("FlaxBeitForImageClassification"),qOr=o(" (BEiT model)"),jOr=l(),ew=a("li"),dCe=a("strong"),DOr=o("vit"),GOr=o(" \u2014 "),dZ=a("a"),OOr=o("FlaxViTForImageClassification"),VOr=o(" (ViT model)"),XOr=l(),F(ow.$$.fragment),Zje=l(),df=a("h2"),rw=a("a"),cCe=a("span"),F(yx.$$.fragment),zOr=l(),fCe=a("span"),WOr=o("FlaxAutoModelForVision2Seq"),eDe=l(),Mr=a("div"),F(Lx.$$.fragment),QOr=l(),cf=a("p"),HOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),cZ=a("a"),UOr=o("from_pretrained()"),JOr=o(" class method or the "),fZ=a("a"),YOr=o("from_config()"),KOr=o(` class
method.`),ZOr=l(),xx=a("p"),eVr=o("This class cannot be instantiated directly using "),mCe=a("code"),oVr=o("__init__()"),rVr=o(" (throws an error)."),tVr=l(),Kt=a("div"),F($x.$$.fragment),aVr=l(),gCe=a("p"),nVr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),sVr=l(),ff=a("p"),lVr=o(`Note:
Loading a model from its configuration file does `),hCe=a("strong"),iVr=o("not"),dVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mZ=a("a"),cVr=o("from_pretrained()"),fVr=o(" to load the model weights."),mVr=l(),F(tw.$$.fragment),gVr=l(),Jr=a("div"),F(kx.$$.fragment),hVr=l(),pCe=a("p"),pVr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),uVr=l(),wn=a("p"),_Vr=o("The model class to instantiate is selected based on the "),uCe=a("code"),bVr=o("model_type"),vVr=o(` property of the config object (either
passed as an argument or loaded from `),_Ce=a("code"),FVr=o("pretrained_model_name_or_path"),TVr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bCe=a("code"),MVr=o("pretrained_model_name_or_path"),EVr=o(":"),CVr=l(),vCe=a("ul"),aw=a("li"),FCe=a("strong"),wVr=o("vision-encoder-decoder"),AVr=o(" \u2014 "),gZ=a("a"),yVr=o("FlaxVisionEncoderDecoderModel"),LVr=o(" (Vision Encoder decoder model)"),xVr=l(),F(nw.$$.fragment),this.h()},l(f){const _=d$t('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var Sx=s(p);m=n(Sx,"A",{id:!0,class:!0,href:!0});var TCe=s(m);u=n(TCe,"SPAN",{});var MCe=s(u);T(d.$$.fragment,MCe),MCe.forEach(t),TCe.forEach(t),h=i(Sx),Mo=n(Sx,"SPAN",{});var ECe=s(Mo);fi=r(ECe,"Auto Classes"),ECe.forEach(t),Sx.forEach(t),pf=i(f),rt=n(f,"P",{});var Rx=s(rt);mi=r(Rx,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),gi=n(Rx,"CODE",{});var CCe=s(gi);EA=r(CCe,"from_pretrained()"),CCe.forEach(t),uf=r(Rx,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Rx.forEach(t),je=i(f),We=n(f,"P",{});var An=s(We);hi=r(An,"Instantiating one of "),yn=n(An,"A",{href:!0});var wCe=s(yn);CA=r(wCe,"AutoConfig"),wCe.forEach(t),Ln=r(An,", "),xn=n(An,"A",{href:!0});var ACe=s(xn);wA=r(ACe,"AutoModel"),ACe.forEach(t),pi=r(An,`, and
`),$n=n(An,"A",{href:!0});var yCe=s($n);AA=r(yCe,"AutoTokenizer"),yCe.forEach(t),ui=r(An," will directly create a class of the relevant architecture. For instance"),An.forEach(t),_f=i(f),T(Ca.$$.fragment,f),Qe=i(f),Ae=n(f,"P",{});var Px=s(Ae);z$=r(Px,"will create a model that is an instance of "),_i=n(Px,"A",{href:!0});var LCe=s(_i);W$=r(LCe,"BertModel"),LCe.forEach(t),Q$=r(Px,"."),Px.forEach(t),Eo=i(f),wa=n(f,"P",{});var Bx=s(wa);H$=r(Bx,"There is one class of "),bf=n(Bx,"CODE",{});var xCe=s(bf);U$=r(xCe,"AutoModel"),xCe.forEach(t),dOe=r(Bx," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Bx.forEach(t),KNe=i(f),bi=n(f,"H2",{class:!0});var Ix=s(bi);vf=n(Ix,"A",{id:!0,class:!0,href:!0});var $Ce=s(vf);soe=n($Ce,"SPAN",{});var kCe=s(soe);T(yA.$$.fragment,kCe),kCe.forEach(t),$Ce.forEach(t),cOe=i(Ix),loe=n(Ix,"SPAN",{});var SCe=s(loe);fOe=r(SCe,"Extending the Auto Classes"),SCe.forEach(t),Ix.forEach(t),ZNe=i(f),kn=n(f,"P",{});var mf=s(kn);mOe=r(mf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),ioe=n(mf,"CODE",{});var RCe=s(ioe);gOe=r(RCe,"NewModel"),RCe.forEach(t),hOe=r(mf,", make sure you have a "),doe=n(mf,"CODE",{});var PCe=s(doe);pOe=r(PCe,"NewModelConfig"),PCe.forEach(t),uOe=r(mf,` then you can add those to the auto
classes like this:`),mf.forEach(t),eqe=i(f),T(LA.$$.fragment,f),oqe=i(f),J$=n(f,"P",{});var BCe=s(J$);_Oe=r(BCe,"You will then be able to use the auto classes like you would usually do!"),BCe.forEach(t),rqe=i(f),T(Ff.$$.fragment,f),tqe=i(f),vi=n(f,"H2",{class:!0});var Nx=s(vi);Tf=n(Nx,"A",{id:!0,class:!0,href:!0});var ICe=s(Tf);coe=n(ICe,"SPAN",{});var NCe=s(coe);T(xA.$$.fragment,NCe),NCe.forEach(t),ICe.forEach(t),bOe=i(Nx),foe=n(Nx,"SPAN",{});var qCe=s(foe);vOe=r(qCe,"AutoConfig"),qCe.forEach(t),Nx.forEach(t),aqe=i(f),Co=n(f,"DIV",{class:!0});var et=s(Co);T($A.$$.fragment,et),FOe=i(et),kA=n(et,"P",{});var qx=s(kA);TOe=r(qx,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),Y$=n(qx,"A",{href:!0});var jCe=s(Y$);MOe=r(jCe,"from_pretrained()"),jCe.forEach(t),EOe=r(qx," class method."),qx.forEach(t),COe=i(et),SA=n(et,"P",{});var jx=s(SA);wOe=r(jx,"This class cannot be instantiated directly using "),moe=n(jx,"CODE",{});var DCe=s(moe);AOe=r(DCe,"__init__()"),DCe.forEach(t),yOe=r(jx," (throws an error)."),jx.forEach(t),LOe=i(et),Er=n(et,"DIV",{class:!0});var ot=s(Er);T(RA.$$.fragment,ot),xOe=i(ot),goe=n(ot,"P",{});var GCe=s(goe);$Oe=r(GCe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),GCe.forEach(t),kOe=i(ot),Fi=n(ot,"P",{});var gf=s(Fi);SOe=r(gf,"The configuration class to instantiate is selected based on the "),hoe=n(gf,"CODE",{});var OCe=s(hoe);ROe=r(OCe,"model_type"),OCe.forEach(t),POe=r(gf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),poe=n(gf,"CODE",{});var VCe=s(poe);BOe=r(VCe,"pretrained_model_name_or_path"),VCe.forEach(t),IOe=r(gf,":"),gf.forEach(t),NOe=i(ot),A=n(ot,"UL",{});var y=s(A);Mf=n(y,"LI",{});var sw=s(Mf);uoe=n(sw,"STRONG",{});var XCe=s(uoe);qOe=r(XCe,"albert"),XCe.forEach(t),jOe=r(sw," \u2014 "),K$=n(sw,"A",{href:!0});var zCe=s(K$);DOe=r(zCe,"AlbertConfig"),zCe.forEach(t),GOe=r(sw," (ALBERT model)"),sw.forEach(t),OOe=i(y),Ef=n(y,"LI",{});var lw=s(Ef);_oe=n(lw,"STRONG",{});var WCe=s(_oe);VOe=r(WCe,"bart"),WCe.forEach(t),XOe=r(lw," \u2014 "),Z$=n(lw,"A",{href:!0});var QCe=s(Z$);zOe=r(QCe,"BartConfig"),QCe.forEach(t),WOe=r(lw," (BART model)"),lw.forEach(t),QOe=i(y),Cf=n(y,"LI",{});var iw=s(Cf);boe=n(iw,"STRONG",{});var HCe=s(boe);HOe=r(HCe,"beit"),HCe.forEach(t),UOe=r(iw," \u2014 "),ek=n(iw,"A",{href:!0});var UCe=s(ek);JOe=r(UCe,"BeitConfig"),UCe.forEach(t),YOe=r(iw," (BEiT model)"),iw.forEach(t),KOe=i(y),wf=n(y,"LI",{});var dw=s(wf);voe=n(dw,"STRONG",{});var JCe=s(voe);ZOe=r(JCe,"bert"),JCe.forEach(t),eVe=r(dw," \u2014 "),ok=n(dw,"A",{href:!0});var YCe=s(ok);oVe=r(YCe,"BertConfig"),YCe.forEach(t),rVe=r(dw," (BERT model)"),dw.forEach(t),tVe=i(y),Af=n(y,"LI",{});var cw=s(Af);Foe=n(cw,"STRONG",{});var KCe=s(Foe);aVe=r(KCe,"bert-generation"),KCe.forEach(t),nVe=r(cw," \u2014 "),rk=n(cw,"A",{href:!0});var ZCe=s(rk);sVe=r(ZCe,"BertGenerationConfig"),ZCe.forEach(t),lVe=r(cw," (Bert Generation model)"),cw.forEach(t),iVe=i(y),yf=n(y,"LI",{});var fw=s(yf);Toe=n(fw,"STRONG",{});var e5e=s(Toe);dVe=r(e5e,"big_bird"),e5e.forEach(t),cVe=r(fw," \u2014 "),tk=n(fw,"A",{href:!0});var o5e=s(tk);fVe=r(o5e,"BigBirdConfig"),o5e.forEach(t),mVe=r(fw," (BigBird model)"),fw.forEach(t),gVe=i(y),Lf=n(y,"LI",{});var mw=s(Lf);Moe=n(mw,"STRONG",{});var r5e=s(Moe);hVe=r(r5e,"bigbird_pegasus"),r5e.forEach(t),pVe=r(mw," \u2014 "),ak=n(mw,"A",{href:!0});var t5e=s(ak);uVe=r(t5e,"BigBirdPegasusConfig"),t5e.forEach(t),_Ve=r(mw," (BigBirdPegasus model)"),mw.forEach(t),bVe=i(y),xf=n(y,"LI",{});var gw=s(xf);Eoe=n(gw,"STRONG",{});var a5e=s(Eoe);vVe=r(a5e,"blenderbot"),a5e.forEach(t),FVe=r(gw," \u2014 "),nk=n(gw,"A",{href:!0});var n5e=s(nk);TVe=r(n5e,"BlenderbotConfig"),n5e.forEach(t),MVe=r(gw," (Blenderbot model)"),gw.forEach(t),EVe=i(y),$f=n(y,"LI",{});var hw=s($f);Coe=n(hw,"STRONG",{});var s5e=s(Coe);CVe=r(s5e,"blenderbot-small"),s5e.forEach(t),wVe=r(hw," \u2014 "),sk=n(hw,"A",{href:!0});var l5e=s(sk);AVe=r(l5e,"BlenderbotSmallConfig"),l5e.forEach(t),yVe=r(hw," (BlenderbotSmall model)"),hw.forEach(t),LVe=i(y),kf=n(y,"LI",{});var pw=s(kf);woe=n(pw,"STRONG",{});var i5e=s(woe);xVe=r(i5e,"camembert"),i5e.forEach(t),$Ve=r(pw," \u2014 "),lk=n(pw,"A",{href:!0});var d5e=s(lk);kVe=r(d5e,"CamembertConfig"),d5e.forEach(t),SVe=r(pw," (CamemBERT model)"),pw.forEach(t),RVe=i(y),Sf=n(y,"LI",{});var uw=s(Sf);Aoe=n(uw,"STRONG",{});var c5e=s(Aoe);PVe=r(c5e,"canine"),c5e.forEach(t),BVe=r(uw," \u2014 "),ik=n(uw,"A",{href:!0});var f5e=s(ik);IVe=r(f5e,"CanineConfig"),f5e.forEach(t),NVe=r(uw," (Canine model)"),uw.forEach(t),qVe=i(y),Rf=n(y,"LI",{});var _w=s(Rf);yoe=n(_w,"STRONG",{});var m5e=s(yoe);jVe=r(m5e,"clip"),m5e.forEach(t),DVe=r(_w," \u2014 "),dk=n(_w,"A",{href:!0});var g5e=s(dk);GVe=r(g5e,"CLIPConfig"),g5e.forEach(t),OVe=r(_w," (CLIP model)"),_w.forEach(t),VVe=i(y),Pf=n(y,"LI",{});var bw=s(Pf);Loe=n(bw,"STRONG",{});var h5e=s(Loe);XVe=r(h5e,"convbert"),h5e.forEach(t),zVe=r(bw," \u2014 "),ck=n(bw,"A",{href:!0});var p5e=s(ck);WVe=r(p5e,"ConvBertConfig"),p5e.forEach(t),QVe=r(bw," (ConvBERT model)"),bw.forEach(t),HVe=i(y),Bf=n(y,"LI",{});var vw=s(Bf);xoe=n(vw,"STRONG",{});var u5e=s(xoe);UVe=r(u5e,"convnext"),u5e.forEach(t),JVe=r(vw," \u2014 "),fk=n(vw,"A",{href:!0});var _5e=s(fk);YVe=r(_5e,"ConvNextConfig"),_5e.forEach(t),KVe=r(vw," (ConvNext model)"),vw.forEach(t),ZVe=i(y),If=n(y,"LI",{});var Fw=s(If);$oe=n(Fw,"STRONG",{});var b5e=s($oe);eXe=r(b5e,"ctrl"),b5e.forEach(t),oXe=r(Fw," \u2014 "),mk=n(Fw,"A",{href:!0});var v5e=s(mk);rXe=r(v5e,"CTRLConfig"),v5e.forEach(t),tXe=r(Fw," (CTRL model)"),Fw.forEach(t),aXe=i(y),Nf=n(y,"LI",{});var Tw=s(Nf);koe=n(Tw,"STRONG",{});var F5e=s(koe);nXe=r(F5e,"cvt"),F5e.forEach(t),sXe=r(Tw," \u2014 "),gk=n(Tw,"A",{href:!0});var T5e=s(gk);lXe=r(T5e,"CvtConfig"),T5e.forEach(t),iXe=r(Tw," (CvT model)"),Tw.forEach(t),dXe=i(y),qf=n(y,"LI",{});var Mw=s(qf);Soe=n(Mw,"STRONG",{});var M5e=s(Soe);cXe=r(M5e,"data2vec-audio"),M5e.forEach(t),fXe=r(Mw," \u2014 "),hk=n(Mw,"A",{href:!0});var E5e=s(hk);mXe=r(E5e,"Data2VecAudioConfig"),E5e.forEach(t),gXe=r(Mw," (Data2VecAudio model)"),Mw.forEach(t),hXe=i(y),jf=n(y,"LI",{});var Ew=s(jf);Roe=n(Ew,"STRONG",{});var C5e=s(Roe);pXe=r(C5e,"data2vec-text"),C5e.forEach(t),uXe=r(Ew," \u2014 "),pk=n(Ew,"A",{href:!0});var w5e=s(pk);_Xe=r(w5e,"Data2VecTextConfig"),w5e.forEach(t),bXe=r(Ew," (Data2VecText model)"),Ew.forEach(t),vXe=i(y),Df=n(y,"LI",{});var Cw=s(Df);Poe=n(Cw,"STRONG",{});var A5e=s(Poe);FXe=r(A5e,"data2vec-vision"),A5e.forEach(t),TXe=r(Cw," \u2014 "),uk=n(Cw,"A",{href:!0});var y5e=s(uk);MXe=r(y5e,"Data2VecVisionConfig"),y5e.forEach(t),EXe=r(Cw," (Data2VecVision model)"),Cw.forEach(t),CXe=i(y),Gf=n(y,"LI",{});var ww=s(Gf);Boe=n(ww,"STRONG",{});var L5e=s(Boe);wXe=r(L5e,"deberta"),L5e.forEach(t),AXe=r(ww," \u2014 "),_k=n(ww,"A",{href:!0});var x5e=s(_k);yXe=r(x5e,"DebertaConfig"),x5e.forEach(t),LXe=r(ww," (DeBERTa model)"),ww.forEach(t),xXe=i(y),Of=n(y,"LI",{});var Aw=s(Of);Ioe=n(Aw,"STRONG",{});var $5e=s(Ioe);$Xe=r($5e,"deberta-v2"),$5e.forEach(t),kXe=r(Aw," \u2014 "),bk=n(Aw,"A",{href:!0});var k5e=s(bk);SXe=r(k5e,"DebertaV2Config"),k5e.forEach(t),RXe=r(Aw," (DeBERTa-v2 model)"),Aw.forEach(t),PXe=i(y),Vf=n(y,"LI",{});var yw=s(Vf);Noe=n(yw,"STRONG",{});var S5e=s(Noe);BXe=r(S5e,"decision_transformer"),S5e.forEach(t),IXe=r(yw," \u2014 "),vk=n(yw,"A",{href:!0});var R5e=s(vk);NXe=r(R5e,"DecisionTransformerConfig"),R5e.forEach(t),qXe=r(yw," (Decision Transformer model)"),yw.forEach(t),jXe=i(y),Xf=n(y,"LI",{});var Lw=s(Xf);qoe=n(Lw,"STRONG",{});var P5e=s(qoe);DXe=r(P5e,"deit"),P5e.forEach(t),GXe=r(Lw," \u2014 "),Fk=n(Lw,"A",{href:!0});var kVr=s(Fk);OXe=r(kVr,"DeiTConfig"),kVr.forEach(t),VXe=r(Lw," (DeiT model)"),Lw.forEach(t),XXe=i(y),zf=n(y,"LI",{});var B5e=s(zf);joe=n(B5e,"STRONG",{});var SVr=s(joe);zXe=r(SVr,"detr"),SVr.forEach(t),WXe=r(B5e," \u2014 "),Tk=n(B5e,"A",{href:!0});var RVr=s(Tk);QXe=r(RVr,"DetrConfig"),RVr.forEach(t),HXe=r(B5e," (DETR model)"),B5e.forEach(t),UXe=i(y),Wf=n(y,"LI",{});var I5e=s(Wf);Doe=n(I5e,"STRONG",{});var PVr=s(Doe);JXe=r(PVr,"distilbert"),PVr.forEach(t),YXe=r(I5e," \u2014 "),Mk=n(I5e,"A",{href:!0});var BVr=s(Mk);KXe=r(BVr,"DistilBertConfig"),BVr.forEach(t),ZXe=r(I5e," (DistilBERT model)"),I5e.forEach(t),eze=i(y),Qf=n(y,"LI",{});var N5e=s(Qf);Goe=n(N5e,"STRONG",{});var IVr=s(Goe);oze=r(IVr,"dpr"),IVr.forEach(t),rze=r(N5e," \u2014 "),Ek=n(N5e,"A",{href:!0});var NVr=s(Ek);tze=r(NVr,"DPRConfig"),NVr.forEach(t),aze=r(N5e," (DPR model)"),N5e.forEach(t),nze=i(y),Hf=n(y,"LI",{});var q5e=s(Hf);Ooe=n(q5e,"STRONG",{});var qVr=s(Ooe);sze=r(qVr,"dpt"),qVr.forEach(t),lze=r(q5e," \u2014 "),Ck=n(q5e,"A",{href:!0});var jVr=s(Ck);ize=r(jVr,"DPTConfig"),jVr.forEach(t),dze=r(q5e," (DPT model)"),q5e.forEach(t),cze=i(y),Uf=n(y,"LI",{});var j5e=s(Uf);Voe=n(j5e,"STRONG",{});var DVr=s(Voe);fze=r(DVr,"electra"),DVr.forEach(t),mze=r(j5e," \u2014 "),wk=n(j5e,"A",{href:!0});var GVr=s(wk);gze=r(GVr,"ElectraConfig"),GVr.forEach(t),hze=r(j5e," (ELECTRA model)"),j5e.forEach(t),pze=i(y),Jf=n(y,"LI",{});var D5e=s(Jf);Xoe=n(D5e,"STRONG",{});var OVr=s(Xoe);uze=r(OVr,"encoder-decoder"),OVr.forEach(t),_ze=r(D5e," \u2014 "),Ak=n(D5e,"A",{href:!0});var VVr=s(Ak);bze=r(VVr,"EncoderDecoderConfig"),VVr.forEach(t),vze=r(D5e," (Encoder decoder model)"),D5e.forEach(t),Fze=i(y),Yf=n(y,"LI",{});var G5e=s(Yf);zoe=n(G5e,"STRONG",{});var XVr=s(zoe);Tze=r(XVr,"flaubert"),XVr.forEach(t),Mze=r(G5e," \u2014 "),yk=n(G5e,"A",{href:!0});var zVr=s(yk);Eze=r(zVr,"FlaubertConfig"),zVr.forEach(t),Cze=r(G5e," (FlauBERT model)"),G5e.forEach(t),wze=i(y),Kf=n(y,"LI",{});var O5e=s(Kf);Woe=n(O5e,"STRONG",{});var WVr=s(Woe);Aze=r(WVr,"flava"),WVr.forEach(t),yze=r(O5e," \u2014 "),Lk=n(O5e,"A",{href:!0});var QVr=s(Lk);Lze=r(QVr,"FlavaConfig"),QVr.forEach(t),xze=r(O5e," (Flava model)"),O5e.forEach(t),$ze=i(y),Zf=n(y,"LI",{});var V5e=s(Zf);Qoe=n(V5e,"STRONG",{});var HVr=s(Qoe);kze=r(HVr,"fnet"),HVr.forEach(t),Sze=r(V5e," \u2014 "),xk=n(V5e,"A",{href:!0});var UVr=s(xk);Rze=r(UVr,"FNetConfig"),UVr.forEach(t),Pze=r(V5e," (FNet model)"),V5e.forEach(t),Bze=i(y),em=n(y,"LI",{});var X5e=s(em);Hoe=n(X5e,"STRONG",{});var JVr=s(Hoe);Ize=r(JVr,"fsmt"),JVr.forEach(t),Nze=r(X5e," \u2014 "),$k=n(X5e,"A",{href:!0});var YVr=s($k);qze=r(YVr,"FSMTConfig"),YVr.forEach(t),jze=r(X5e," (FairSeq Machine-Translation model)"),X5e.forEach(t),Dze=i(y),om=n(y,"LI",{});var z5e=s(om);Uoe=n(z5e,"STRONG",{});var KVr=s(Uoe);Gze=r(KVr,"funnel"),KVr.forEach(t),Oze=r(z5e," \u2014 "),kk=n(z5e,"A",{href:!0});var ZVr=s(kk);Vze=r(ZVr,"FunnelConfig"),ZVr.forEach(t),Xze=r(z5e," (Funnel Transformer model)"),z5e.forEach(t),zze=i(y),rm=n(y,"LI",{});var W5e=s(rm);Joe=n(W5e,"STRONG",{});var eXr=s(Joe);Wze=r(eXr,"glpn"),eXr.forEach(t),Qze=r(W5e," \u2014 "),Sk=n(W5e,"A",{href:!0});var oXr=s(Sk);Hze=r(oXr,"GLPNConfig"),oXr.forEach(t),Uze=r(W5e," (GLPN model)"),W5e.forEach(t),Jze=i(y),tm=n(y,"LI",{});var Q5e=s(tm);Yoe=n(Q5e,"STRONG",{});var rXr=s(Yoe);Yze=r(rXr,"gpt2"),rXr.forEach(t),Kze=r(Q5e," \u2014 "),Rk=n(Q5e,"A",{href:!0});var tXr=s(Rk);Zze=r(tXr,"GPT2Config"),tXr.forEach(t),eWe=r(Q5e," (OpenAI GPT-2 model)"),Q5e.forEach(t),oWe=i(y),am=n(y,"LI",{});var H5e=s(am);Koe=n(H5e,"STRONG",{});var aXr=s(Koe);rWe=r(aXr,"gpt_neo"),aXr.forEach(t),tWe=r(H5e," \u2014 "),Pk=n(H5e,"A",{href:!0});var nXr=s(Pk);aWe=r(nXr,"GPTNeoConfig"),nXr.forEach(t),nWe=r(H5e," (GPT Neo model)"),H5e.forEach(t),sWe=i(y),nm=n(y,"LI",{});var U5e=s(nm);Zoe=n(U5e,"STRONG",{});var sXr=s(Zoe);lWe=r(sXr,"gpt_neox"),sXr.forEach(t),iWe=r(U5e," \u2014 "),Bk=n(U5e,"A",{href:!0});var lXr=s(Bk);dWe=r(lXr,"GPTNeoXConfig"),lXr.forEach(t),cWe=r(U5e," (GPT NeoX model)"),U5e.forEach(t),fWe=i(y),sm=n(y,"LI",{});var J5e=s(sm);ere=n(J5e,"STRONG",{});var iXr=s(ere);mWe=r(iXr,"gptj"),iXr.forEach(t),gWe=r(J5e," \u2014 "),Ik=n(J5e,"A",{href:!0});var dXr=s(Ik);hWe=r(dXr,"GPTJConfig"),dXr.forEach(t),pWe=r(J5e," (GPT-J model)"),J5e.forEach(t),uWe=i(y),lm=n(y,"LI",{});var Y5e=s(lm);ore=n(Y5e,"STRONG",{});var cXr=s(ore);_We=r(cXr,"hubert"),cXr.forEach(t),bWe=r(Y5e," \u2014 "),Nk=n(Y5e,"A",{href:!0});var fXr=s(Nk);vWe=r(fXr,"HubertConfig"),fXr.forEach(t),FWe=r(Y5e," (Hubert model)"),Y5e.forEach(t),TWe=i(y),im=n(y,"LI",{});var K5e=s(im);rre=n(K5e,"STRONG",{});var mXr=s(rre);MWe=r(mXr,"ibert"),mXr.forEach(t),EWe=r(K5e," \u2014 "),qk=n(K5e,"A",{href:!0});var gXr=s(qk);CWe=r(gXr,"IBertConfig"),gXr.forEach(t),wWe=r(K5e," (I-BERT model)"),K5e.forEach(t),AWe=i(y),dm=n(y,"LI",{});var Z5e=s(dm);tre=n(Z5e,"STRONG",{});var hXr=s(tre);yWe=r(hXr,"imagegpt"),hXr.forEach(t),LWe=r(Z5e," \u2014 "),jk=n(Z5e,"A",{href:!0});var pXr=s(jk);xWe=r(pXr,"ImageGPTConfig"),pXr.forEach(t),$We=r(Z5e," (ImageGPT model)"),Z5e.forEach(t),kWe=i(y),cm=n(y,"LI",{});var e3e=s(cm);are=n(e3e,"STRONG",{});var uXr=s(are);SWe=r(uXr,"layoutlm"),uXr.forEach(t),RWe=r(e3e," \u2014 "),Dk=n(e3e,"A",{href:!0});var _Xr=s(Dk);PWe=r(_Xr,"LayoutLMConfig"),_Xr.forEach(t),BWe=r(e3e," (LayoutLM model)"),e3e.forEach(t),IWe=i(y),fm=n(y,"LI",{});var o3e=s(fm);nre=n(o3e,"STRONG",{});var bXr=s(nre);NWe=r(bXr,"layoutlmv2"),bXr.forEach(t),qWe=r(o3e," \u2014 "),Gk=n(o3e,"A",{href:!0});var vXr=s(Gk);jWe=r(vXr,"LayoutLMv2Config"),vXr.forEach(t),DWe=r(o3e," (LayoutLMv2 model)"),o3e.forEach(t),GWe=i(y),mm=n(y,"LI",{});var r3e=s(mm);sre=n(r3e,"STRONG",{});var FXr=s(sre);OWe=r(FXr,"layoutlmv3"),FXr.forEach(t),VWe=r(r3e," \u2014 "),Ok=n(r3e,"A",{href:!0});var TXr=s(Ok);XWe=r(TXr,"LayoutLMv3Config"),TXr.forEach(t),zWe=r(r3e," (LayoutLMv3 model)"),r3e.forEach(t),WWe=i(y),gm=n(y,"LI",{});var t3e=s(gm);lre=n(t3e,"STRONG",{});var MXr=s(lre);QWe=r(MXr,"led"),MXr.forEach(t),HWe=r(t3e," \u2014 "),Vk=n(t3e,"A",{href:!0});var EXr=s(Vk);UWe=r(EXr,"LEDConfig"),EXr.forEach(t),JWe=r(t3e," (LED model)"),t3e.forEach(t),YWe=i(y),hm=n(y,"LI",{});var a3e=s(hm);ire=n(a3e,"STRONG",{});var CXr=s(ire);KWe=r(CXr,"longformer"),CXr.forEach(t),ZWe=r(a3e," \u2014 "),Xk=n(a3e,"A",{href:!0});var wXr=s(Xk);eQe=r(wXr,"LongformerConfig"),wXr.forEach(t),oQe=r(a3e," (Longformer model)"),a3e.forEach(t),rQe=i(y),pm=n(y,"LI",{});var n3e=s(pm);dre=n(n3e,"STRONG",{});var AXr=s(dre);tQe=r(AXr,"luke"),AXr.forEach(t),aQe=r(n3e," \u2014 "),zk=n(n3e,"A",{href:!0});var yXr=s(zk);nQe=r(yXr,"LukeConfig"),yXr.forEach(t),sQe=r(n3e," (LUKE model)"),n3e.forEach(t),lQe=i(y),um=n(y,"LI",{});var s3e=s(um);cre=n(s3e,"STRONG",{});var LXr=s(cre);iQe=r(LXr,"lxmert"),LXr.forEach(t),dQe=r(s3e," \u2014 "),Wk=n(s3e,"A",{href:!0});var xXr=s(Wk);cQe=r(xXr,"LxmertConfig"),xXr.forEach(t),fQe=r(s3e," (LXMERT model)"),s3e.forEach(t),mQe=i(y),_m=n(y,"LI",{});var l3e=s(_m);fre=n(l3e,"STRONG",{});var $Xr=s(fre);gQe=r($Xr,"m2m_100"),$Xr.forEach(t),hQe=r(l3e," \u2014 "),Qk=n(l3e,"A",{href:!0});var kXr=s(Qk);pQe=r(kXr,"M2M100Config"),kXr.forEach(t),uQe=r(l3e," (M2M100 model)"),l3e.forEach(t),_Qe=i(y),bm=n(y,"LI",{});var i3e=s(bm);mre=n(i3e,"STRONG",{});var SXr=s(mre);bQe=r(SXr,"marian"),SXr.forEach(t),vQe=r(i3e," \u2014 "),Hk=n(i3e,"A",{href:!0});var RXr=s(Hk);FQe=r(RXr,"MarianConfig"),RXr.forEach(t),TQe=r(i3e," (Marian model)"),i3e.forEach(t),MQe=i(y),vm=n(y,"LI",{});var d3e=s(vm);gre=n(d3e,"STRONG",{});var PXr=s(gre);EQe=r(PXr,"maskformer"),PXr.forEach(t),CQe=r(d3e," \u2014 "),Uk=n(d3e,"A",{href:!0});var BXr=s(Uk);wQe=r(BXr,"MaskFormerConfig"),BXr.forEach(t),AQe=r(d3e," (MaskFormer model)"),d3e.forEach(t),yQe=i(y),Fm=n(y,"LI",{});var c3e=s(Fm);hre=n(c3e,"STRONG",{});var IXr=s(hre);LQe=r(IXr,"mbart"),IXr.forEach(t),xQe=r(c3e," \u2014 "),Jk=n(c3e,"A",{href:!0});var NXr=s(Jk);$Qe=r(NXr,"MBartConfig"),NXr.forEach(t),kQe=r(c3e," (mBART model)"),c3e.forEach(t),SQe=i(y),Tm=n(y,"LI",{});var f3e=s(Tm);pre=n(f3e,"STRONG",{});var qXr=s(pre);RQe=r(qXr,"megatron-bert"),qXr.forEach(t),PQe=r(f3e," \u2014 "),Yk=n(f3e,"A",{href:!0});var jXr=s(Yk);BQe=r(jXr,"MegatronBertConfig"),jXr.forEach(t),IQe=r(f3e," (MegatronBert model)"),f3e.forEach(t),NQe=i(y),Mm=n(y,"LI",{});var m3e=s(Mm);ure=n(m3e,"STRONG",{});var DXr=s(ure);qQe=r(DXr,"mobilebert"),DXr.forEach(t),jQe=r(m3e," \u2014 "),Kk=n(m3e,"A",{href:!0});var GXr=s(Kk);DQe=r(GXr,"MobileBertConfig"),GXr.forEach(t),GQe=r(m3e," (MobileBERT model)"),m3e.forEach(t),OQe=i(y),Em=n(y,"LI",{});var g3e=s(Em);_re=n(g3e,"STRONG",{});var OXr=s(_re);VQe=r(OXr,"mpnet"),OXr.forEach(t),XQe=r(g3e," \u2014 "),Zk=n(g3e,"A",{href:!0});var VXr=s(Zk);zQe=r(VXr,"MPNetConfig"),VXr.forEach(t),WQe=r(g3e," (MPNet model)"),g3e.forEach(t),QQe=i(y),Cm=n(y,"LI",{});var h3e=s(Cm);bre=n(h3e,"STRONG",{});var XXr=s(bre);HQe=r(XXr,"mt5"),XXr.forEach(t),UQe=r(h3e," \u2014 "),eS=n(h3e,"A",{href:!0});var zXr=s(eS);JQe=r(zXr,"MT5Config"),zXr.forEach(t),YQe=r(h3e," (mT5 model)"),h3e.forEach(t),KQe=i(y),wm=n(y,"LI",{});var p3e=s(wm);vre=n(p3e,"STRONG",{});var WXr=s(vre);ZQe=r(WXr,"nystromformer"),WXr.forEach(t),eHe=r(p3e," \u2014 "),oS=n(p3e,"A",{href:!0});var QXr=s(oS);oHe=r(QXr,"NystromformerConfig"),QXr.forEach(t),rHe=r(p3e," (Nystromformer model)"),p3e.forEach(t),tHe=i(y),Am=n(y,"LI",{});var u3e=s(Am);Fre=n(u3e,"STRONG",{});var HXr=s(Fre);aHe=r(HXr,"openai-gpt"),HXr.forEach(t),nHe=r(u3e," \u2014 "),rS=n(u3e,"A",{href:!0});var UXr=s(rS);sHe=r(UXr,"OpenAIGPTConfig"),UXr.forEach(t),lHe=r(u3e," (OpenAI GPT model)"),u3e.forEach(t),iHe=i(y),ym=n(y,"LI",{});var _3e=s(ym);Tre=n(_3e,"STRONG",{});var JXr=s(Tre);dHe=r(JXr,"opt"),JXr.forEach(t),cHe=r(_3e," \u2014 "),tS=n(_3e,"A",{href:!0});var YXr=s(tS);fHe=r(YXr,"OPTConfig"),YXr.forEach(t),mHe=r(_3e," (OPT model)"),_3e.forEach(t),gHe=i(y),Lm=n(y,"LI",{});var b3e=s(Lm);Mre=n(b3e,"STRONG",{});var KXr=s(Mre);hHe=r(KXr,"pegasus"),KXr.forEach(t),pHe=r(b3e," \u2014 "),aS=n(b3e,"A",{href:!0});var ZXr=s(aS);uHe=r(ZXr,"PegasusConfig"),ZXr.forEach(t),_He=r(b3e," (Pegasus model)"),b3e.forEach(t),bHe=i(y),xm=n(y,"LI",{});var v3e=s(xm);Ere=n(v3e,"STRONG",{});var ezr=s(Ere);vHe=r(ezr,"perceiver"),ezr.forEach(t),FHe=r(v3e," \u2014 "),nS=n(v3e,"A",{href:!0});var ozr=s(nS);THe=r(ozr,"PerceiverConfig"),ozr.forEach(t),MHe=r(v3e," (Perceiver model)"),v3e.forEach(t),EHe=i(y),$m=n(y,"LI",{});var F3e=s($m);Cre=n(F3e,"STRONG",{});var rzr=s(Cre);CHe=r(rzr,"plbart"),rzr.forEach(t),wHe=r(F3e," \u2014 "),sS=n(F3e,"A",{href:!0});var tzr=s(sS);AHe=r(tzr,"PLBartConfig"),tzr.forEach(t),yHe=r(F3e," (PLBart model)"),F3e.forEach(t),LHe=i(y),km=n(y,"LI",{});var T3e=s(km);wre=n(T3e,"STRONG",{});var azr=s(wre);xHe=r(azr,"poolformer"),azr.forEach(t),$He=r(T3e," \u2014 "),lS=n(T3e,"A",{href:!0});var nzr=s(lS);kHe=r(nzr,"PoolFormerConfig"),nzr.forEach(t),SHe=r(T3e," (PoolFormer model)"),T3e.forEach(t),RHe=i(y),Sm=n(y,"LI",{});var M3e=s(Sm);Are=n(M3e,"STRONG",{});var szr=s(Are);PHe=r(szr,"prophetnet"),szr.forEach(t),BHe=r(M3e," \u2014 "),iS=n(M3e,"A",{href:!0});var lzr=s(iS);IHe=r(lzr,"ProphetNetConfig"),lzr.forEach(t),NHe=r(M3e," (ProphetNet model)"),M3e.forEach(t),qHe=i(y),Rm=n(y,"LI",{});var E3e=s(Rm);yre=n(E3e,"STRONG",{});var izr=s(yre);jHe=r(izr,"qdqbert"),izr.forEach(t),DHe=r(E3e," \u2014 "),dS=n(E3e,"A",{href:!0});var dzr=s(dS);GHe=r(dzr,"QDQBertConfig"),dzr.forEach(t),OHe=r(E3e," (QDQBert model)"),E3e.forEach(t),VHe=i(y),Pm=n(y,"LI",{});var C3e=s(Pm);Lre=n(C3e,"STRONG",{});var czr=s(Lre);XHe=r(czr,"rag"),czr.forEach(t),zHe=r(C3e," \u2014 "),cS=n(C3e,"A",{href:!0});var fzr=s(cS);WHe=r(fzr,"RagConfig"),fzr.forEach(t),QHe=r(C3e," (RAG model)"),C3e.forEach(t),HHe=i(y),Bm=n(y,"LI",{});var w3e=s(Bm);xre=n(w3e,"STRONG",{});var mzr=s(xre);UHe=r(mzr,"realm"),mzr.forEach(t),JHe=r(w3e," \u2014 "),fS=n(w3e,"A",{href:!0});var gzr=s(fS);YHe=r(gzr,"RealmConfig"),gzr.forEach(t),KHe=r(w3e," (Realm model)"),w3e.forEach(t),ZHe=i(y),Im=n(y,"LI",{});var A3e=s(Im);$re=n(A3e,"STRONG",{});var hzr=s($re);eUe=r(hzr,"reformer"),hzr.forEach(t),oUe=r(A3e," \u2014 "),mS=n(A3e,"A",{href:!0});var pzr=s(mS);rUe=r(pzr,"ReformerConfig"),pzr.forEach(t),tUe=r(A3e," (Reformer model)"),A3e.forEach(t),aUe=i(y),Nm=n(y,"LI",{});var y3e=s(Nm);kre=n(y3e,"STRONG",{});var uzr=s(kre);nUe=r(uzr,"regnet"),uzr.forEach(t),sUe=r(y3e," \u2014 "),gS=n(y3e,"A",{href:!0});var _zr=s(gS);lUe=r(_zr,"RegNetConfig"),_zr.forEach(t),iUe=r(y3e," (RegNet model)"),y3e.forEach(t),dUe=i(y),qm=n(y,"LI",{});var L3e=s(qm);Sre=n(L3e,"STRONG",{});var bzr=s(Sre);cUe=r(bzr,"rembert"),bzr.forEach(t),fUe=r(L3e," \u2014 "),hS=n(L3e,"A",{href:!0});var vzr=s(hS);mUe=r(vzr,"RemBertConfig"),vzr.forEach(t),gUe=r(L3e," (RemBERT model)"),L3e.forEach(t),hUe=i(y),jm=n(y,"LI",{});var x3e=s(jm);Rre=n(x3e,"STRONG",{});var Fzr=s(Rre);pUe=r(Fzr,"resnet"),Fzr.forEach(t),uUe=r(x3e," \u2014 "),pS=n(x3e,"A",{href:!0});var Tzr=s(pS);_Ue=r(Tzr,"ResNetConfig"),Tzr.forEach(t),bUe=r(x3e," (ResNet model)"),x3e.forEach(t),vUe=i(y),Dm=n(y,"LI",{});var $3e=s(Dm);Pre=n($3e,"STRONG",{});var Mzr=s(Pre);FUe=r(Mzr,"retribert"),Mzr.forEach(t),TUe=r($3e," \u2014 "),uS=n($3e,"A",{href:!0});var Ezr=s(uS);MUe=r(Ezr,"RetriBertConfig"),Ezr.forEach(t),EUe=r($3e," (RetriBERT model)"),$3e.forEach(t),CUe=i(y),Gm=n(y,"LI",{});var k3e=s(Gm);Bre=n(k3e,"STRONG",{});var Czr=s(Bre);wUe=r(Czr,"roberta"),Czr.forEach(t),AUe=r(k3e," \u2014 "),_S=n(k3e,"A",{href:!0});var wzr=s(_S);yUe=r(wzr,"RobertaConfig"),wzr.forEach(t),LUe=r(k3e," (RoBERTa model)"),k3e.forEach(t),xUe=i(y),Om=n(y,"LI",{});var S3e=s(Om);Ire=n(S3e,"STRONG",{});var Azr=s(Ire);$Ue=r(Azr,"roformer"),Azr.forEach(t),kUe=r(S3e," \u2014 "),bS=n(S3e,"A",{href:!0});var yzr=s(bS);SUe=r(yzr,"RoFormerConfig"),yzr.forEach(t),RUe=r(S3e," (RoFormer model)"),S3e.forEach(t),PUe=i(y),Vm=n(y,"LI",{});var R3e=s(Vm);Nre=n(R3e,"STRONG",{});var Lzr=s(Nre);BUe=r(Lzr,"segformer"),Lzr.forEach(t),IUe=r(R3e," \u2014 "),vS=n(R3e,"A",{href:!0});var xzr=s(vS);NUe=r(xzr,"SegformerConfig"),xzr.forEach(t),qUe=r(R3e," (SegFormer model)"),R3e.forEach(t),jUe=i(y),Xm=n(y,"LI",{});var P3e=s(Xm);qre=n(P3e,"STRONG",{});var $zr=s(qre);DUe=r($zr,"sew"),$zr.forEach(t),GUe=r(P3e," \u2014 "),FS=n(P3e,"A",{href:!0});var kzr=s(FS);OUe=r(kzr,"SEWConfig"),kzr.forEach(t),VUe=r(P3e," (SEW model)"),P3e.forEach(t),XUe=i(y),zm=n(y,"LI",{});var B3e=s(zm);jre=n(B3e,"STRONG",{});var Szr=s(jre);zUe=r(Szr,"sew-d"),Szr.forEach(t),WUe=r(B3e," \u2014 "),TS=n(B3e,"A",{href:!0});var Rzr=s(TS);QUe=r(Rzr,"SEWDConfig"),Rzr.forEach(t),HUe=r(B3e," (SEW-D model)"),B3e.forEach(t),UUe=i(y),Wm=n(y,"LI",{});var I3e=s(Wm);Dre=n(I3e,"STRONG",{});var Pzr=s(Dre);JUe=r(Pzr,"speech-encoder-decoder"),Pzr.forEach(t),YUe=r(I3e," \u2014 "),MS=n(I3e,"A",{href:!0});var Bzr=s(MS);KUe=r(Bzr,"SpeechEncoderDecoderConfig"),Bzr.forEach(t),ZUe=r(I3e," (Speech Encoder decoder model)"),I3e.forEach(t),eJe=i(y),Qm=n(y,"LI",{});var N3e=s(Qm);Gre=n(N3e,"STRONG",{});var Izr=s(Gre);oJe=r(Izr,"speech_to_text"),Izr.forEach(t),rJe=r(N3e," \u2014 "),ES=n(N3e,"A",{href:!0});var Nzr=s(ES);tJe=r(Nzr,"Speech2TextConfig"),Nzr.forEach(t),aJe=r(N3e," (Speech2Text model)"),N3e.forEach(t),nJe=i(y),Hm=n(y,"LI",{});var q3e=s(Hm);Ore=n(q3e,"STRONG",{});var qzr=s(Ore);sJe=r(qzr,"speech_to_text_2"),qzr.forEach(t),lJe=r(q3e," \u2014 "),CS=n(q3e,"A",{href:!0});var jzr=s(CS);iJe=r(jzr,"Speech2Text2Config"),jzr.forEach(t),dJe=r(q3e," (Speech2Text2 model)"),q3e.forEach(t),cJe=i(y),Um=n(y,"LI",{});var j3e=s(Um);Vre=n(j3e,"STRONG",{});var Dzr=s(Vre);fJe=r(Dzr,"splinter"),Dzr.forEach(t),mJe=r(j3e," \u2014 "),wS=n(j3e,"A",{href:!0});var Gzr=s(wS);gJe=r(Gzr,"SplinterConfig"),Gzr.forEach(t),hJe=r(j3e," (Splinter model)"),j3e.forEach(t),pJe=i(y),Jm=n(y,"LI",{});var D3e=s(Jm);Xre=n(D3e,"STRONG",{});var Ozr=s(Xre);uJe=r(Ozr,"squeezebert"),Ozr.forEach(t),_Je=r(D3e," \u2014 "),AS=n(D3e,"A",{href:!0});var Vzr=s(AS);bJe=r(Vzr,"SqueezeBertConfig"),Vzr.forEach(t),vJe=r(D3e," (SqueezeBERT model)"),D3e.forEach(t),FJe=i(y),Ym=n(y,"LI",{});var G3e=s(Ym);zre=n(G3e,"STRONG",{});var Xzr=s(zre);TJe=r(Xzr,"swin"),Xzr.forEach(t),MJe=r(G3e," \u2014 "),yS=n(G3e,"A",{href:!0});var zzr=s(yS);EJe=r(zzr,"SwinConfig"),zzr.forEach(t),CJe=r(G3e," (Swin model)"),G3e.forEach(t),wJe=i(y),Km=n(y,"LI",{});var O3e=s(Km);Wre=n(O3e,"STRONG",{});var Wzr=s(Wre);AJe=r(Wzr,"t5"),Wzr.forEach(t),yJe=r(O3e," \u2014 "),LS=n(O3e,"A",{href:!0});var Qzr=s(LS);LJe=r(Qzr,"T5Config"),Qzr.forEach(t),xJe=r(O3e," (T5 model)"),O3e.forEach(t),$Je=i(y),Zm=n(y,"LI",{});var V3e=s(Zm);Qre=n(V3e,"STRONG",{});var Hzr=s(Qre);kJe=r(Hzr,"tapas"),Hzr.forEach(t),SJe=r(V3e," \u2014 "),xS=n(V3e,"A",{href:!0});var Uzr=s(xS);RJe=r(Uzr,"TapasConfig"),Uzr.forEach(t),PJe=r(V3e," (TAPAS model)"),V3e.forEach(t),BJe=i(y),eg=n(y,"LI",{});var X3e=s(eg);Hre=n(X3e,"STRONG",{});var Jzr=s(Hre);IJe=r(Jzr,"trajectory_transformer"),Jzr.forEach(t),NJe=r(X3e," \u2014 "),$S=n(X3e,"A",{href:!0});var Yzr=s($S);qJe=r(Yzr,"TrajectoryTransformerConfig"),Yzr.forEach(t),jJe=r(X3e," (Trajectory Transformer model)"),X3e.forEach(t),DJe=i(y),og=n(y,"LI",{});var z3e=s(og);Ure=n(z3e,"STRONG",{});var Kzr=s(Ure);GJe=r(Kzr,"transfo-xl"),Kzr.forEach(t),OJe=r(z3e," \u2014 "),kS=n(z3e,"A",{href:!0});var Zzr=s(kS);VJe=r(Zzr,"TransfoXLConfig"),Zzr.forEach(t),XJe=r(z3e," (Transformer-XL model)"),z3e.forEach(t),zJe=i(y),rg=n(y,"LI",{});var W3e=s(rg);Jre=n(W3e,"STRONG",{});var eWr=s(Jre);WJe=r(eWr,"trocr"),eWr.forEach(t),QJe=r(W3e," \u2014 "),SS=n(W3e,"A",{href:!0});var oWr=s(SS);HJe=r(oWr,"TrOCRConfig"),oWr.forEach(t),UJe=r(W3e," (TrOCR model)"),W3e.forEach(t),JJe=i(y),tg=n(y,"LI",{});var Q3e=s(tg);Yre=n(Q3e,"STRONG",{});var rWr=s(Yre);YJe=r(rWr,"unispeech"),rWr.forEach(t),KJe=r(Q3e," \u2014 "),RS=n(Q3e,"A",{href:!0});var tWr=s(RS);ZJe=r(tWr,"UniSpeechConfig"),tWr.forEach(t),eYe=r(Q3e," (UniSpeech model)"),Q3e.forEach(t),oYe=i(y),ag=n(y,"LI",{});var H3e=s(ag);Kre=n(H3e,"STRONG",{});var aWr=s(Kre);rYe=r(aWr,"unispeech-sat"),aWr.forEach(t),tYe=r(H3e," \u2014 "),PS=n(H3e,"A",{href:!0});var nWr=s(PS);aYe=r(nWr,"UniSpeechSatConfig"),nWr.forEach(t),nYe=r(H3e," (UniSpeechSat model)"),H3e.forEach(t),sYe=i(y),ng=n(y,"LI",{});var U3e=s(ng);Zre=n(U3e,"STRONG",{});var sWr=s(Zre);lYe=r(sWr,"van"),sWr.forEach(t),iYe=r(U3e," \u2014 "),BS=n(U3e,"A",{href:!0});var lWr=s(BS);dYe=r(lWr,"VanConfig"),lWr.forEach(t),cYe=r(U3e," (VAN model)"),U3e.forEach(t),fYe=i(y),sg=n(y,"LI",{});var J3e=s(sg);ete=n(J3e,"STRONG",{});var iWr=s(ete);mYe=r(iWr,"vilt"),iWr.forEach(t),gYe=r(J3e," \u2014 "),IS=n(J3e,"A",{href:!0});var dWr=s(IS);hYe=r(dWr,"ViltConfig"),dWr.forEach(t),pYe=r(J3e," (ViLT model)"),J3e.forEach(t),uYe=i(y),lg=n(y,"LI",{});var Y3e=s(lg);ote=n(Y3e,"STRONG",{});var cWr=s(ote);_Ye=r(cWr,"vision-encoder-decoder"),cWr.forEach(t),bYe=r(Y3e," \u2014 "),NS=n(Y3e,"A",{href:!0});var fWr=s(NS);vYe=r(fWr,"VisionEncoderDecoderConfig"),fWr.forEach(t),FYe=r(Y3e," (Vision Encoder decoder model)"),Y3e.forEach(t),TYe=i(y),ig=n(y,"LI",{});var K3e=s(ig);rte=n(K3e,"STRONG",{});var mWr=s(rte);MYe=r(mWr,"vision-text-dual-encoder"),mWr.forEach(t),EYe=r(K3e," \u2014 "),qS=n(K3e,"A",{href:!0});var gWr=s(qS);CYe=r(gWr,"VisionTextDualEncoderConfig"),gWr.forEach(t),wYe=r(K3e," (VisionTextDualEncoder model)"),K3e.forEach(t),AYe=i(y),dg=n(y,"LI",{});var Z3e=s(dg);tte=n(Z3e,"STRONG",{});var hWr=s(tte);yYe=r(hWr,"visual_bert"),hWr.forEach(t),LYe=r(Z3e," \u2014 "),jS=n(Z3e,"A",{href:!0});var pWr=s(jS);xYe=r(pWr,"VisualBertConfig"),pWr.forEach(t),$Ye=r(Z3e," (VisualBert model)"),Z3e.forEach(t),kYe=i(y),cg=n(y,"LI",{});var ewe=s(cg);ate=n(ewe,"STRONG",{});var uWr=s(ate);SYe=r(uWr,"vit"),uWr.forEach(t),RYe=r(ewe," \u2014 "),DS=n(ewe,"A",{href:!0});var _Wr=s(DS);PYe=r(_Wr,"ViTConfig"),_Wr.forEach(t),BYe=r(ewe," (ViT model)"),ewe.forEach(t),IYe=i(y),fg=n(y,"LI",{});var owe=s(fg);nte=n(owe,"STRONG",{});var bWr=s(nte);NYe=r(bWr,"vit_mae"),bWr.forEach(t),qYe=r(owe," \u2014 "),GS=n(owe,"A",{href:!0});var vWr=s(GS);jYe=r(vWr,"ViTMAEConfig"),vWr.forEach(t),DYe=r(owe," (ViTMAE model)"),owe.forEach(t),GYe=i(y),mg=n(y,"LI",{});var rwe=s(mg);ste=n(rwe,"STRONG",{});var FWr=s(ste);OYe=r(FWr,"wav2vec2"),FWr.forEach(t),VYe=r(rwe," \u2014 "),OS=n(rwe,"A",{href:!0});var TWr=s(OS);XYe=r(TWr,"Wav2Vec2Config"),TWr.forEach(t),zYe=r(rwe," (Wav2Vec2 model)"),rwe.forEach(t),WYe=i(y),gg=n(y,"LI",{});var twe=s(gg);lte=n(twe,"STRONG",{});var MWr=s(lte);QYe=r(MWr,"wav2vec2-conformer"),MWr.forEach(t),HYe=r(twe," \u2014 "),VS=n(twe,"A",{href:!0});var EWr=s(VS);UYe=r(EWr,"Wav2Vec2ConformerConfig"),EWr.forEach(t),JYe=r(twe," (Wav2Vec2-Conformer model)"),twe.forEach(t),YYe=i(y),hg=n(y,"LI",{});var awe=s(hg);ite=n(awe,"STRONG",{});var CWr=s(ite);KYe=r(CWr,"wavlm"),CWr.forEach(t),ZYe=r(awe," \u2014 "),XS=n(awe,"A",{href:!0});var wWr=s(XS);eKe=r(wWr,"WavLMConfig"),wWr.forEach(t),oKe=r(awe," (WavLM model)"),awe.forEach(t),rKe=i(y),pg=n(y,"LI",{});var nwe=s(pg);dte=n(nwe,"STRONG",{});var AWr=s(dte);tKe=r(AWr,"xglm"),AWr.forEach(t),aKe=r(nwe," \u2014 "),zS=n(nwe,"A",{href:!0});var yWr=s(zS);nKe=r(yWr,"XGLMConfig"),yWr.forEach(t),sKe=r(nwe," (XGLM model)"),nwe.forEach(t),lKe=i(y),ug=n(y,"LI",{});var swe=s(ug);cte=n(swe,"STRONG",{});var LWr=s(cte);iKe=r(LWr,"xlm"),LWr.forEach(t),dKe=r(swe," \u2014 "),WS=n(swe,"A",{href:!0});var xWr=s(WS);cKe=r(xWr,"XLMConfig"),xWr.forEach(t),fKe=r(swe," (XLM model)"),swe.forEach(t),mKe=i(y),_g=n(y,"LI",{});var lwe=s(_g);fte=n(lwe,"STRONG",{});var $Wr=s(fte);gKe=r($Wr,"xlm-prophetnet"),$Wr.forEach(t),hKe=r(lwe," \u2014 "),QS=n(lwe,"A",{href:!0});var kWr=s(QS);pKe=r(kWr,"XLMProphetNetConfig"),kWr.forEach(t),uKe=r(lwe," (XLMProphetNet model)"),lwe.forEach(t),_Ke=i(y),bg=n(y,"LI",{});var iwe=s(bg);mte=n(iwe,"STRONG",{});var SWr=s(mte);bKe=r(SWr,"xlm-roberta"),SWr.forEach(t),vKe=r(iwe," \u2014 "),HS=n(iwe,"A",{href:!0});var RWr=s(HS);FKe=r(RWr,"XLMRobertaConfig"),RWr.forEach(t),TKe=r(iwe," (XLM-RoBERTa model)"),iwe.forEach(t),MKe=i(y),vg=n(y,"LI",{});var dwe=s(vg);gte=n(dwe,"STRONG",{});var PWr=s(gte);EKe=r(PWr,"xlm-roberta-xl"),PWr.forEach(t),CKe=r(dwe," \u2014 "),US=n(dwe,"A",{href:!0});var BWr=s(US);wKe=r(BWr,"XLMRobertaXLConfig"),BWr.forEach(t),AKe=r(dwe," (XLM-RoBERTa-XL model)"),dwe.forEach(t),yKe=i(y),Fg=n(y,"LI",{});var cwe=s(Fg);hte=n(cwe,"STRONG",{});var IWr=s(hte);LKe=r(IWr,"xlnet"),IWr.forEach(t),xKe=r(cwe," \u2014 "),JS=n(cwe,"A",{href:!0});var NWr=s(JS);$Ke=r(NWr,"XLNetConfig"),NWr.forEach(t),kKe=r(cwe," (XLNet model)"),cwe.forEach(t),SKe=i(y),Tg=n(y,"LI",{});var fwe=s(Tg);pte=n(fwe,"STRONG",{});var qWr=s(pte);RKe=r(qWr,"yolos"),qWr.forEach(t),PKe=r(fwe," \u2014 "),YS=n(fwe,"A",{href:!0});var jWr=s(YS);BKe=r(jWr,"YolosConfig"),jWr.forEach(t),IKe=r(fwe," (YOLOS model)"),fwe.forEach(t),NKe=i(y),Mg=n(y,"LI",{});var mwe=s(Mg);ute=n(mwe,"STRONG",{});var DWr=s(ute);qKe=r(DWr,"yoso"),DWr.forEach(t),jKe=r(mwe," \u2014 "),KS=n(mwe,"A",{href:!0});var GWr=s(KS);DKe=r(GWr,"YosoConfig"),GWr.forEach(t),GKe=r(mwe," (YOSO model)"),mwe.forEach(t),y.forEach(t),OKe=i(ot),T(Eg.$$.fragment,ot),ot.forEach(t),VKe=i(et),Cg=n(et,"DIV",{class:!0});var rDe=s(Cg);T(PA.$$.fragment,rDe),XKe=i(rDe),_te=n(rDe,"P",{});var OWr=s(_te);zKe=r(OWr,"Register a new configuration for this class."),OWr.forEach(t),rDe.forEach(t),et.forEach(t),nqe=i(f),Ti=n(f,"H2",{class:!0});var tDe=s(Ti);wg=n(tDe,"A",{id:!0,class:!0,href:!0});var VWr=s(wg);bte=n(VWr,"SPAN",{});var XWr=s(bte);T(BA.$$.fragment,XWr),XWr.forEach(t),VWr.forEach(t),WKe=i(tDe),vte=n(tDe,"SPAN",{});var zWr=s(vte);QKe=r(zWr,"AutoTokenizer"),zWr.forEach(t),tDe.forEach(t),sqe=i(f),wo=n(f,"DIV",{class:!0});var Ns=s(wo);T(IA.$$.fragment,Ns),HKe=i(Ns),NA=n(Ns,"P",{});var aDe=s(NA);UKe=r(aDe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),ZS=n(aDe,"A",{href:!0});var WWr=s(ZS);JKe=r(WWr,"AutoTokenizer.from_pretrained()"),WWr.forEach(t),YKe=r(aDe," class method."),aDe.forEach(t),KKe=i(Ns),qA=n(Ns,"P",{});var nDe=s(qA);ZKe=r(nDe,"This class cannot be instantiated directly using "),Fte=n(nDe,"CODE",{});var QWr=s(Fte);eZe=r(QWr,"__init__()"),QWr.forEach(t),oZe=r(nDe," (throws an error)."),nDe.forEach(t),rZe=i(Ns),Cr=n(Ns,"DIV",{class:!0});var qs=s(Cr);T(jA.$$.fragment,qs),tZe=i(qs),Tte=n(qs,"P",{});var HWr=s(Tte);aZe=r(HWr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),HWr.forEach(t),nZe=i(qs),Aa=n(qs,"P",{});var xw=s(Aa);sZe=r(xw,"The tokenizer class to instantiate is selected based on the "),Mte=n(xw,"CODE",{});var UWr=s(Mte);lZe=r(UWr,"model_type"),UWr.forEach(t),iZe=r(xw,` property of the config object (either
passed as an argument or loaded from `),Ete=n(xw,"CODE",{});var JWr=s(Ete);dZe=r(JWr,"pretrained_model_name_or_path"),JWr.forEach(t),cZe=r(xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cte=n(xw,"CODE",{});var YWr=s(Cte);fZe=r(YWr,"pretrained_model_name_or_path"),YWr.forEach(t),mZe=r(xw,":"),xw.forEach(t),gZe=i(qs),k=n(qs,"UL",{});var S=s(k);Sn=n(S,"LI",{});var Dx=s(Sn);wte=n(Dx,"STRONG",{});var KWr=s(wte);hZe=r(KWr,"albert"),KWr.forEach(t),pZe=r(Dx," \u2014 "),eR=n(Dx,"A",{href:!0});var ZWr=s(eR);uZe=r(ZWr,"AlbertTokenizer"),ZWr.forEach(t),_Ze=r(Dx," or "),oR=n(Dx,"A",{href:!0});var eQr=s(oR);bZe=r(eQr,"AlbertTokenizerFast"),eQr.forEach(t),vZe=r(Dx," (ALBERT model)"),Dx.forEach(t),FZe=i(S),Rn=n(S,"LI",{});var Gx=s(Rn);Ate=n(Gx,"STRONG",{});var oQr=s(Ate);TZe=r(oQr,"bart"),oQr.forEach(t),MZe=r(Gx," \u2014 "),rR=n(Gx,"A",{href:!0});var rQr=s(rR);EZe=r(rQr,"BartTokenizer"),rQr.forEach(t),CZe=r(Gx," or "),tR=n(Gx,"A",{href:!0});var tQr=s(tR);wZe=r(tQr,"BartTokenizerFast"),tQr.forEach(t),AZe=r(Gx," (BART model)"),Gx.forEach(t),yZe=i(S),Pn=n(S,"LI",{});var Ox=s(Pn);yte=n(Ox,"STRONG",{});var aQr=s(yte);LZe=r(aQr,"barthez"),aQr.forEach(t),xZe=r(Ox," \u2014 "),aR=n(Ox,"A",{href:!0});var nQr=s(aR);$Ze=r(nQr,"BarthezTokenizer"),nQr.forEach(t),kZe=r(Ox," or "),nR=n(Ox,"A",{href:!0});var sQr=s(nR);SZe=r(sQr,"BarthezTokenizerFast"),sQr.forEach(t),RZe=r(Ox," (BARThez model)"),Ox.forEach(t),PZe=i(S),Ag=n(S,"LI",{});var gwe=s(Ag);Lte=n(gwe,"STRONG",{});var lQr=s(Lte);BZe=r(lQr,"bartpho"),lQr.forEach(t),IZe=r(gwe," \u2014 "),sR=n(gwe,"A",{href:!0});var iQr=s(sR);NZe=r(iQr,"BartphoTokenizer"),iQr.forEach(t),qZe=r(gwe," (BARTpho model)"),gwe.forEach(t),jZe=i(S),Bn=n(S,"LI",{});var Vx=s(Bn);xte=n(Vx,"STRONG",{});var dQr=s(xte);DZe=r(dQr,"bert"),dQr.forEach(t),GZe=r(Vx," \u2014 "),lR=n(Vx,"A",{href:!0});var cQr=s(lR);OZe=r(cQr,"BertTokenizer"),cQr.forEach(t),VZe=r(Vx," or "),iR=n(Vx,"A",{href:!0});var fQr=s(iR);XZe=r(fQr,"BertTokenizerFast"),fQr.forEach(t),zZe=r(Vx," (BERT model)"),Vx.forEach(t),WZe=i(S),yg=n(S,"LI",{});var hwe=s(yg);$te=n(hwe,"STRONG",{});var mQr=s($te);QZe=r(mQr,"bert-generation"),mQr.forEach(t),HZe=r(hwe," \u2014 "),dR=n(hwe,"A",{href:!0});var gQr=s(dR);UZe=r(gQr,"BertGenerationTokenizer"),gQr.forEach(t),JZe=r(hwe," (Bert Generation model)"),hwe.forEach(t),YZe=i(S),Lg=n(S,"LI",{});var pwe=s(Lg);kte=n(pwe,"STRONG",{});var hQr=s(kte);KZe=r(hQr,"bert-japanese"),hQr.forEach(t),ZZe=r(pwe," \u2014 "),cR=n(pwe,"A",{href:!0});var pQr=s(cR);eeo=r(pQr,"BertJapaneseTokenizer"),pQr.forEach(t),oeo=r(pwe," (BertJapanese model)"),pwe.forEach(t),reo=i(S),xg=n(S,"LI",{});var uwe=s(xg);Ste=n(uwe,"STRONG",{});var uQr=s(Ste);teo=r(uQr,"bertweet"),uQr.forEach(t),aeo=r(uwe," \u2014 "),fR=n(uwe,"A",{href:!0});var _Qr=s(fR);neo=r(_Qr,"BertweetTokenizer"),_Qr.forEach(t),seo=r(uwe," (Bertweet model)"),uwe.forEach(t),leo=i(S),In=n(S,"LI",{});var Xx=s(In);Rte=n(Xx,"STRONG",{});var bQr=s(Rte);ieo=r(bQr,"big_bird"),bQr.forEach(t),deo=r(Xx," \u2014 "),mR=n(Xx,"A",{href:!0});var vQr=s(mR);ceo=r(vQr,"BigBirdTokenizer"),vQr.forEach(t),feo=r(Xx," or "),gR=n(Xx,"A",{href:!0});var FQr=s(gR);meo=r(FQr,"BigBirdTokenizerFast"),FQr.forEach(t),geo=r(Xx," (BigBird model)"),Xx.forEach(t),heo=i(S),Nn=n(S,"LI",{});var zx=s(Nn);Pte=n(zx,"STRONG",{});var TQr=s(Pte);peo=r(TQr,"bigbird_pegasus"),TQr.forEach(t),ueo=r(zx," \u2014 "),hR=n(zx,"A",{href:!0});var MQr=s(hR);_eo=r(MQr,"PegasusTokenizer"),MQr.forEach(t),beo=r(zx," or "),pR=n(zx,"A",{href:!0});var EQr=s(pR);veo=r(EQr,"PegasusTokenizerFast"),EQr.forEach(t),Feo=r(zx," (BigBirdPegasus model)"),zx.forEach(t),Teo=i(S),qn=n(S,"LI",{});var Wx=s(qn);Bte=n(Wx,"STRONG",{});var CQr=s(Bte);Meo=r(CQr,"blenderbot"),CQr.forEach(t),Eeo=r(Wx," \u2014 "),uR=n(Wx,"A",{href:!0});var wQr=s(uR);Ceo=r(wQr,"BlenderbotTokenizer"),wQr.forEach(t),weo=r(Wx," or "),_R=n(Wx,"A",{href:!0});var AQr=s(_R);Aeo=r(AQr,"BlenderbotTokenizerFast"),AQr.forEach(t),yeo=r(Wx," (Blenderbot model)"),Wx.forEach(t),Leo=i(S),$g=n(S,"LI",{});var _we=s($g);Ite=n(_we,"STRONG",{});var yQr=s(Ite);xeo=r(yQr,"blenderbot-small"),yQr.forEach(t),$eo=r(_we," \u2014 "),bR=n(_we,"A",{href:!0});var LQr=s(bR);keo=r(LQr,"BlenderbotSmallTokenizer"),LQr.forEach(t),Seo=r(_we," (BlenderbotSmall model)"),_we.forEach(t),Reo=i(S),kg=n(S,"LI",{});var bwe=s(kg);Nte=n(bwe,"STRONG",{});var xQr=s(Nte);Peo=r(xQr,"byt5"),xQr.forEach(t),Beo=r(bwe," \u2014 "),vR=n(bwe,"A",{href:!0});var $Qr=s(vR);Ieo=r($Qr,"ByT5Tokenizer"),$Qr.forEach(t),Neo=r(bwe," (ByT5 model)"),bwe.forEach(t),qeo=i(S),jn=n(S,"LI",{});var Qx=s(jn);qte=n(Qx,"STRONG",{});var kQr=s(qte);jeo=r(kQr,"camembert"),kQr.forEach(t),Deo=r(Qx," \u2014 "),FR=n(Qx,"A",{href:!0});var SQr=s(FR);Geo=r(SQr,"CamembertTokenizer"),SQr.forEach(t),Oeo=r(Qx," or "),TR=n(Qx,"A",{href:!0});var RQr=s(TR);Veo=r(RQr,"CamembertTokenizerFast"),RQr.forEach(t),Xeo=r(Qx," (CamemBERT model)"),Qx.forEach(t),zeo=i(S),Sg=n(S,"LI",{});var vwe=s(Sg);jte=n(vwe,"STRONG",{});var PQr=s(jte);Weo=r(PQr,"canine"),PQr.forEach(t),Qeo=r(vwe," \u2014 "),MR=n(vwe,"A",{href:!0});var BQr=s(MR);Heo=r(BQr,"CanineTokenizer"),BQr.forEach(t),Ueo=r(vwe," (Canine model)"),vwe.forEach(t),Jeo=i(S),Dn=n(S,"LI",{});var Hx=s(Dn);Dte=n(Hx,"STRONG",{});var IQr=s(Dte);Yeo=r(IQr,"clip"),IQr.forEach(t),Keo=r(Hx," \u2014 "),ER=n(Hx,"A",{href:!0});var NQr=s(ER);Zeo=r(NQr,"CLIPTokenizer"),NQr.forEach(t),eoo=r(Hx," or "),CR=n(Hx,"A",{href:!0});var qQr=s(CR);ooo=r(qQr,"CLIPTokenizerFast"),qQr.forEach(t),roo=r(Hx," (CLIP model)"),Hx.forEach(t),too=i(S),Gn=n(S,"LI",{});var Ux=s(Gn);Gte=n(Ux,"STRONG",{});var jQr=s(Gte);aoo=r(jQr,"convbert"),jQr.forEach(t),noo=r(Ux," \u2014 "),wR=n(Ux,"A",{href:!0});var DQr=s(wR);soo=r(DQr,"ConvBertTokenizer"),DQr.forEach(t),loo=r(Ux," or "),AR=n(Ux,"A",{href:!0});var GQr=s(AR);ioo=r(GQr,"ConvBertTokenizerFast"),GQr.forEach(t),doo=r(Ux," (ConvBERT model)"),Ux.forEach(t),coo=i(S),On=n(S,"LI",{});var Jx=s(On);Ote=n(Jx,"STRONG",{});var OQr=s(Ote);foo=r(OQr,"cpm"),OQr.forEach(t),moo=r(Jx," \u2014 "),yR=n(Jx,"A",{href:!0});var VQr=s(yR);goo=r(VQr,"CpmTokenizer"),VQr.forEach(t),hoo=r(Jx," or "),LR=n(Jx,"A",{href:!0});var XQr=s(LR);poo=r(XQr,"CpmTokenizerFast"),XQr.forEach(t),uoo=r(Jx," (CPM model)"),Jx.forEach(t),_oo=i(S),Rg=n(S,"LI",{});var Fwe=s(Rg);Vte=n(Fwe,"STRONG",{});var zQr=s(Vte);boo=r(zQr,"ctrl"),zQr.forEach(t),voo=r(Fwe," \u2014 "),xR=n(Fwe,"A",{href:!0});var WQr=s(xR);Foo=r(WQr,"CTRLTokenizer"),WQr.forEach(t),Too=r(Fwe," (CTRL model)"),Fwe.forEach(t),Moo=i(S),Vn=n(S,"LI",{});var Yx=s(Vn);Xte=n(Yx,"STRONG",{});var QQr=s(Xte);Eoo=r(QQr,"data2vec-text"),QQr.forEach(t),Coo=r(Yx," \u2014 "),$R=n(Yx,"A",{href:!0});var HQr=s($R);woo=r(HQr,"RobertaTokenizer"),HQr.forEach(t),Aoo=r(Yx," or "),kR=n(Yx,"A",{href:!0});var UQr=s(kR);yoo=r(UQr,"RobertaTokenizerFast"),UQr.forEach(t),Loo=r(Yx," (Data2VecText model)"),Yx.forEach(t),xoo=i(S),Xn=n(S,"LI",{});var Kx=s(Xn);zte=n(Kx,"STRONG",{});var JQr=s(zte);$oo=r(JQr,"deberta"),JQr.forEach(t),koo=r(Kx," \u2014 "),SR=n(Kx,"A",{href:!0});var YQr=s(SR);Soo=r(YQr,"DebertaTokenizer"),YQr.forEach(t),Roo=r(Kx," or "),RR=n(Kx,"A",{href:!0});var KQr=s(RR);Poo=r(KQr,"DebertaTokenizerFast"),KQr.forEach(t),Boo=r(Kx," (DeBERTa model)"),Kx.forEach(t),Ioo=i(S),zn=n(S,"LI",{});var Zx=s(zn);Wte=n(Zx,"STRONG",{});var ZQr=s(Wte);Noo=r(ZQr,"deberta-v2"),ZQr.forEach(t),qoo=r(Zx," \u2014 "),PR=n(Zx,"A",{href:!0});var eHr=s(PR);joo=r(eHr,"DebertaV2Tokenizer"),eHr.forEach(t),Doo=r(Zx," or "),BR=n(Zx,"A",{href:!0});var oHr=s(BR);Goo=r(oHr,"DebertaV2TokenizerFast"),oHr.forEach(t),Ooo=r(Zx," (DeBERTa-v2 model)"),Zx.forEach(t),Voo=i(S),Wn=n(S,"LI",{});var e$=s(Wn);Qte=n(e$,"STRONG",{});var rHr=s(Qte);Xoo=r(rHr,"distilbert"),rHr.forEach(t),zoo=r(e$," \u2014 "),IR=n(e$,"A",{href:!0});var tHr=s(IR);Woo=r(tHr,"DistilBertTokenizer"),tHr.forEach(t),Qoo=r(e$," or "),NR=n(e$,"A",{href:!0});var aHr=s(NR);Hoo=r(aHr,"DistilBertTokenizerFast"),aHr.forEach(t),Uoo=r(e$," (DistilBERT model)"),e$.forEach(t),Joo=i(S),Qn=n(S,"LI",{});var o$=s(Qn);Hte=n(o$,"STRONG",{});var nHr=s(Hte);Yoo=r(nHr,"dpr"),nHr.forEach(t),Koo=r(o$," \u2014 "),qR=n(o$,"A",{href:!0});var sHr=s(qR);Zoo=r(sHr,"DPRQuestionEncoderTokenizer"),sHr.forEach(t),ero=r(o$," or "),jR=n(o$,"A",{href:!0});var lHr=s(jR);oro=r(lHr,"DPRQuestionEncoderTokenizerFast"),lHr.forEach(t),rro=r(o$," (DPR model)"),o$.forEach(t),tro=i(S),Hn=n(S,"LI",{});var r$=s(Hn);Ute=n(r$,"STRONG",{});var iHr=s(Ute);aro=r(iHr,"electra"),iHr.forEach(t),nro=r(r$," \u2014 "),DR=n(r$,"A",{href:!0});var dHr=s(DR);sro=r(dHr,"ElectraTokenizer"),dHr.forEach(t),lro=r(r$," or "),GR=n(r$,"A",{href:!0});var cHr=s(GR);iro=r(cHr,"ElectraTokenizerFast"),cHr.forEach(t),dro=r(r$," (ELECTRA model)"),r$.forEach(t),cro=i(S),Pg=n(S,"LI",{});var Twe=s(Pg);Jte=n(Twe,"STRONG",{});var fHr=s(Jte);fro=r(fHr,"flaubert"),fHr.forEach(t),mro=r(Twe," \u2014 "),OR=n(Twe,"A",{href:!0});var mHr=s(OR);gro=r(mHr,"FlaubertTokenizer"),mHr.forEach(t),hro=r(Twe," (FlauBERT model)"),Twe.forEach(t),pro=i(S),Un=n(S,"LI",{});var t$=s(Un);Yte=n(t$,"STRONG",{});var gHr=s(Yte);uro=r(gHr,"fnet"),gHr.forEach(t),_ro=r(t$," \u2014 "),VR=n(t$,"A",{href:!0});var hHr=s(VR);bro=r(hHr,"FNetTokenizer"),hHr.forEach(t),vro=r(t$," or "),XR=n(t$,"A",{href:!0});var pHr=s(XR);Fro=r(pHr,"FNetTokenizerFast"),pHr.forEach(t),Tro=r(t$," (FNet model)"),t$.forEach(t),Mro=i(S),Bg=n(S,"LI",{});var Mwe=s(Bg);Kte=n(Mwe,"STRONG",{});var uHr=s(Kte);Ero=r(uHr,"fsmt"),uHr.forEach(t),Cro=r(Mwe," \u2014 "),zR=n(Mwe,"A",{href:!0});var _Hr=s(zR);wro=r(_Hr,"FSMTTokenizer"),_Hr.forEach(t),Aro=r(Mwe," (FairSeq Machine-Translation model)"),Mwe.forEach(t),yro=i(S),Jn=n(S,"LI",{});var a$=s(Jn);Zte=n(a$,"STRONG",{});var bHr=s(Zte);Lro=r(bHr,"funnel"),bHr.forEach(t),xro=r(a$," \u2014 "),WR=n(a$,"A",{href:!0});var vHr=s(WR);$ro=r(vHr,"FunnelTokenizer"),vHr.forEach(t),kro=r(a$," or "),QR=n(a$,"A",{href:!0});var FHr=s(QR);Sro=r(FHr,"FunnelTokenizerFast"),FHr.forEach(t),Rro=r(a$," (Funnel Transformer model)"),a$.forEach(t),Pro=i(S),Yn=n(S,"LI",{});var n$=s(Yn);eae=n(n$,"STRONG",{});var THr=s(eae);Bro=r(THr,"gpt2"),THr.forEach(t),Iro=r(n$," \u2014 "),HR=n(n$,"A",{href:!0});var MHr=s(HR);Nro=r(MHr,"GPT2Tokenizer"),MHr.forEach(t),qro=r(n$," or "),UR=n(n$,"A",{href:!0});var EHr=s(UR);jro=r(EHr,"GPT2TokenizerFast"),EHr.forEach(t),Dro=r(n$," (OpenAI GPT-2 model)"),n$.forEach(t),Gro=i(S),Kn=n(S,"LI",{});var s$=s(Kn);oae=n(s$,"STRONG",{});var CHr=s(oae);Oro=r(CHr,"gpt_neo"),CHr.forEach(t),Vro=r(s$," \u2014 "),JR=n(s$,"A",{href:!0});var wHr=s(JR);Xro=r(wHr,"GPT2Tokenizer"),wHr.forEach(t),zro=r(s$," or "),YR=n(s$,"A",{href:!0});var AHr=s(YR);Wro=r(AHr,"GPT2TokenizerFast"),AHr.forEach(t),Qro=r(s$," (GPT Neo model)"),s$.forEach(t),Hro=i(S),Ig=n(S,"LI",{});var Ewe=s(Ig);rae=n(Ewe,"STRONG",{});var yHr=s(rae);Uro=r(yHr,"gpt_neox"),yHr.forEach(t),Jro=r(Ewe," \u2014 "),KR=n(Ewe,"A",{href:!0});var LHr=s(KR);Yro=r(LHr,"GPTNeoXTokenizerFast"),LHr.forEach(t),Kro=r(Ewe," (GPT NeoX model)"),Ewe.forEach(t),Zro=i(S),Zn=n(S,"LI",{});var l$=s(Zn);tae=n(l$,"STRONG",{});var xHr=s(tae);eto=r(xHr,"gptj"),xHr.forEach(t),oto=r(l$," \u2014 "),ZR=n(l$,"A",{href:!0});var $Hr=s(ZR);rto=r($Hr,"GPT2Tokenizer"),$Hr.forEach(t),tto=r(l$," or "),eP=n(l$,"A",{href:!0});var kHr=s(eP);ato=r(kHr,"GPT2TokenizerFast"),kHr.forEach(t),nto=r(l$," (GPT-J model)"),l$.forEach(t),sto=i(S),es=n(S,"LI",{});var i$=s(es);aae=n(i$,"STRONG",{});var SHr=s(aae);lto=r(SHr,"herbert"),SHr.forEach(t),ito=r(i$," \u2014 "),oP=n(i$,"A",{href:!0});var RHr=s(oP);dto=r(RHr,"HerbertTokenizer"),RHr.forEach(t),cto=r(i$," or "),rP=n(i$,"A",{href:!0});var PHr=s(rP);fto=r(PHr,"HerbertTokenizerFast"),PHr.forEach(t),mto=r(i$," (HerBERT model)"),i$.forEach(t),gto=i(S),Ng=n(S,"LI",{});var Cwe=s(Ng);nae=n(Cwe,"STRONG",{});var BHr=s(nae);hto=r(BHr,"hubert"),BHr.forEach(t),pto=r(Cwe," \u2014 "),tP=n(Cwe,"A",{href:!0});var IHr=s(tP);uto=r(IHr,"Wav2Vec2CTCTokenizer"),IHr.forEach(t),_to=r(Cwe," (Hubert model)"),Cwe.forEach(t),bto=i(S),os=n(S,"LI",{});var d$=s(os);sae=n(d$,"STRONG",{});var NHr=s(sae);vto=r(NHr,"ibert"),NHr.forEach(t),Fto=r(d$," \u2014 "),aP=n(d$,"A",{href:!0});var qHr=s(aP);Tto=r(qHr,"RobertaTokenizer"),qHr.forEach(t),Mto=r(d$," or "),nP=n(d$,"A",{href:!0});var jHr=s(nP);Eto=r(jHr,"RobertaTokenizerFast"),jHr.forEach(t),Cto=r(d$," (I-BERT model)"),d$.forEach(t),wto=i(S),rs=n(S,"LI",{});var c$=s(rs);lae=n(c$,"STRONG",{});var DHr=s(lae);Ato=r(DHr,"layoutlm"),DHr.forEach(t),yto=r(c$," \u2014 "),sP=n(c$,"A",{href:!0});var GHr=s(sP);Lto=r(GHr,"LayoutLMTokenizer"),GHr.forEach(t),xto=r(c$," or "),lP=n(c$,"A",{href:!0});var OHr=s(lP);$to=r(OHr,"LayoutLMTokenizerFast"),OHr.forEach(t),kto=r(c$," (LayoutLM model)"),c$.forEach(t),Sto=i(S),ts=n(S,"LI",{});var f$=s(ts);iae=n(f$,"STRONG",{});var VHr=s(iae);Rto=r(VHr,"layoutlmv2"),VHr.forEach(t),Pto=r(f$," \u2014 "),iP=n(f$,"A",{href:!0});var XHr=s(iP);Bto=r(XHr,"LayoutLMv2Tokenizer"),XHr.forEach(t),Ito=r(f$," or "),dP=n(f$,"A",{href:!0});var zHr=s(dP);Nto=r(zHr,"LayoutLMv2TokenizerFast"),zHr.forEach(t),qto=r(f$," (LayoutLMv2 model)"),f$.forEach(t),jto=i(S),as=n(S,"LI",{});var m$=s(as);dae=n(m$,"STRONG",{});var WHr=s(dae);Dto=r(WHr,"layoutlmv3"),WHr.forEach(t),Gto=r(m$," \u2014 "),cP=n(m$,"A",{href:!0});var QHr=s(cP);Oto=r(QHr,"LayoutLMv3Tokenizer"),QHr.forEach(t),Vto=r(m$," or "),fP=n(m$,"A",{href:!0});var HHr=s(fP);Xto=r(HHr,"LayoutLMv3TokenizerFast"),HHr.forEach(t),zto=r(m$," (LayoutLMv3 model)"),m$.forEach(t),Wto=i(S),ns=n(S,"LI",{});var g$=s(ns);cae=n(g$,"STRONG",{});var UHr=s(cae);Qto=r(UHr,"layoutxlm"),UHr.forEach(t),Hto=r(g$," \u2014 "),mP=n(g$,"A",{href:!0});var JHr=s(mP);Uto=r(JHr,"LayoutXLMTokenizer"),JHr.forEach(t),Jto=r(g$," or "),gP=n(g$,"A",{href:!0});var YHr=s(gP);Yto=r(YHr,"LayoutXLMTokenizerFast"),YHr.forEach(t),Kto=r(g$," (LayoutXLM model)"),g$.forEach(t),Zto=i(S),ss=n(S,"LI",{});var h$=s(ss);fae=n(h$,"STRONG",{});var KHr=s(fae);eao=r(KHr,"led"),KHr.forEach(t),oao=r(h$," \u2014 "),hP=n(h$,"A",{href:!0});var ZHr=s(hP);rao=r(ZHr,"LEDTokenizer"),ZHr.forEach(t),tao=r(h$," or "),pP=n(h$,"A",{href:!0});var eUr=s(pP);aao=r(eUr,"LEDTokenizerFast"),eUr.forEach(t),nao=r(h$," (LED model)"),h$.forEach(t),sao=i(S),ls=n(S,"LI",{});var p$=s(ls);mae=n(p$,"STRONG",{});var oUr=s(mae);lao=r(oUr,"longformer"),oUr.forEach(t),iao=r(p$," \u2014 "),uP=n(p$,"A",{href:!0});var rUr=s(uP);dao=r(rUr,"LongformerTokenizer"),rUr.forEach(t),cao=r(p$," or "),_P=n(p$,"A",{href:!0});var tUr=s(_P);fao=r(tUr,"LongformerTokenizerFast"),tUr.forEach(t),mao=r(p$," (Longformer model)"),p$.forEach(t),gao=i(S),qg=n(S,"LI",{});var wwe=s(qg);gae=n(wwe,"STRONG",{});var aUr=s(gae);hao=r(aUr,"luke"),aUr.forEach(t),pao=r(wwe," \u2014 "),bP=n(wwe,"A",{href:!0});var nUr=s(bP);uao=r(nUr,"LukeTokenizer"),nUr.forEach(t),_ao=r(wwe," (LUKE model)"),wwe.forEach(t),bao=i(S),is=n(S,"LI",{});var u$=s(is);hae=n(u$,"STRONG",{});var sUr=s(hae);vao=r(sUr,"lxmert"),sUr.forEach(t),Fao=r(u$," \u2014 "),vP=n(u$,"A",{href:!0});var lUr=s(vP);Tao=r(lUr,"LxmertTokenizer"),lUr.forEach(t),Mao=r(u$," or "),FP=n(u$,"A",{href:!0});var iUr=s(FP);Eao=r(iUr,"LxmertTokenizerFast"),iUr.forEach(t),Cao=r(u$," (LXMERT model)"),u$.forEach(t),wao=i(S),jg=n(S,"LI",{});var Awe=s(jg);pae=n(Awe,"STRONG",{});var dUr=s(pae);Aao=r(dUr,"m2m_100"),dUr.forEach(t),yao=r(Awe," \u2014 "),TP=n(Awe,"A",{href:!0});var cUr=s(TP);Lao=r(cUr,"M2M100Tokenizer"),cUr.forEach(t),xao=r(Awe," (M2M100 model)"),Awe.forEach(t),$ao=i(S),Dg=n(S,"LI",{});var ywe=s(Dg);uae=n(ywe,"STRONG",{});var fUr=s(uae);kao=r(fUr,"marian"),fUr.forEach(t),Sao=r(ywe," \u2014 "),MP=n(ywe,"A",{href:!0});var mUr=s(MP);Rao=r(mUr,"MarianTokenizer"),mUr.forEach(t),Pao=r(ywe," (Marian model)"),ywe.forEach(t),Bao=i(S),ds=n(S,"LI",{});var _$=s(ds);_ae=n(_$,"STRONG",{});var gUr=s(_ae);Iao=r(gUr,"mbart"),gUr.forEach(t),Nao=r(_$," \u2014 "),EP=n(_$,"A",{href:!0});var hUr=s(EP);qao=r(hUr,"MBartTokenizer"),hUr.forEach(t),jao=r(_$," or "),CP=n(_$,"A",{href:!0});var pUr=s(CP);Dao=r(pUr,"MBartTokenizerFast"),pUr.forEach(t),Gao=r(_$," (mBART model)"),_$.forEach(t),Oao=i(S),cs=n(S,"LI",{});var b$=s(cs);bae=n(b$,"STRONG",{});var uUr=s(bae);Vao=r(uUr,"mbart50"),uUr.forEach(t),Xao=r(b$," \u2014 "),wP=n(b$,"A",{href:!0});var _Ur=s(wP);zao=r(_Ur,"MBart50Tokenizer"),_Ur.forEach(t),Wao=r(b$," or "),AP=n(b$,"A",{href:!0});var bUr=s(AP);Qao=r(bUr,"MBart50TokenizerFast"),bUr.forEach(t),Hao=r(b$," (mBART-50 model)"),b$.forEach(t),Uao=i(S),fs=n(S,"LI",{});var v$=s(fs);vae=n(v$,"STRONG",{});var vUr=s(vae);Jao=r(vUr,"megatron-bert"),vUr.forEach(t),Yao=r(v$," \u2014 "),yP=n(v$,"A",{href:!0});var FUr=s(yP);Kao=r(FUr,"BertTokenizer"),FUr.forEach(t),Zao=r(v$," or "),LP=n(v$,"A",{href:!0});var TUr=s(LP);eno=r(TUr,"BertTokenizerFast"),TUr.forEach(t),ono=r(v$," (MegatronBert model)"),v$.forEach(t),rno=i(S),Gg=n(S,"LI",{});var Lwe=s(Gg);Fae=n(Lwe,"STRONG",{});var MUr=s(Fae);tno=r(MUr,"mluke"),MUr.forEach(t),ano=r(Lwe," \u2014 "),xP=n(Lwe,"A",{href:!0});var EUr=s(xP);nno=r(EUr,"MLukeTokenizer"),EUr.forEach(t),sno=r(Lwe," (mLUKE model)"),Lwe.forEach(t),lno=i(S),ms=n(S,"LI",{});var F$=s(ms);Tae=n(F$,"STRONG",{});var CUr=s(Tae);ino=r(CUr,"mobilebert"),CUr.forEach(t),dno=r(F$," \u2014 "),$P=n(F$,"A",{href:!0});var wUr=s($P);cno=r(wUr,"MobileBertTokenizer"),wUr.forEach(t),fno=r(F$," or "),kP=n(F$,"A",{href:!0});var AUr=s(kP);mno=r(AUr,"MobileBertTokenizerFast"),AUr.forEach(t),gno=r(F$," (MobileBERT model)"),F$.forEach(t),hno=i(S),gs=n(S,"LI",{});var T$=s(gs);Mae=n(T$,"STRONG",{});var yUr=s(Mae);pno=r(yUr,"mpnet"),yUr.forEach(t),uno=r(T$," \u2014 "),SP=n(T$,"A",{href:!0});var LUr=s(SP);_no=r(LUr,"MPNetTokenizer"),LUr.forEach(t),bno=r(T$," or "),RP=n(T$,"A",{href:!0});var xUr=s(RP);vno=r(xUr,"MPNetTokenizerFast"),xUr.forEach(t),Fno=r(T$," (MPNet model)"),T$.forEach(t),Tno=i(S),hs=n(S,"LI",{});var M$=s(hs);Eae=n(M$,"STRONG",{});var $Ur=s(Eae);Mno=r($Ur,"mt5"),$Ur.forEach(t),Eno=r(M$," \u2014 "),PP=n(M$,"A",{href:!0});var kUr=s(PP);Cno=r(kUr,"MT5Tokenizer"),kUr.forEach(t),wno=r(M$," or "),BP=n(M$,"A",{href:!0});var SUr=s(BP);Ano=r(SUr,"MT5TokenizerFast"),SUr.forEach(t),yno=r(M$," (mT5 model)"),M$.forEach(t),Lno=i(S),ps=n(S,"LI",{});var E$=s(ps);Cae=n(E$,"STRONG",{});var RUr=s(Cae);xno=r(RUr,"nystromformer"),RUr.forEach(t),$no=r(E$," \u2014 "),IP=n(E$,"A",{href:!0});var PUr=s(IP);kno=r(PUr,"AlbertTokenizer"),PUr.forEach(t),Sno=r(E$," or "),NP=n(E$,"A",{href:!0});var BUr=s(NP);Rno=r(BUr,"AlbertTokenizerFast"),BUr.forEach(t),Pno=r(E$," (Nystromformer model)"),E$.forEach(t),Bno=i(S),us=n(S,"LI",{});var C$=s(us);wae=n(C$,"STRONG",{});var IUr=s(wae);Ino=r(IUr,"openai-gpt"),IUr.forEach(t),Nno=r(C$," \u2014 "),qP=n(C$,"A",{href:!0});var NUr=s(qP);qno=r(NUr,"OpenAIGPTTokenizer"),NUr.forEach(t),jno=r(C$," or "),jP=n(C$,"A",{href:!0});var qUr=s(jP);Dno=r(qUr,"OpenAIGPTTokenizerFast"),qUr.forEach(t),Gno=r(C$," (OpenAI GPT model)"),C$.forEach(t),Ono=i(S),Og=n(S,"LI",{});var xwe=s(Og);Aae=n(xwe,"STRONG",{});var jUr=s(Aae);Vno=r(jUr,"opt"),jUr.forEach(t),Xno=r(xwe," \u2014 "),DP=n(xwe,"A",{href:!0});var DUr=s(DP);zno=r(DUr,"GPT2Tokenizer"),DUr.forEach(t),Wno=r(xwe," (OPT model)"),xwe.forEach(t),Qno=i(S),_s=n(S,"LI",{});var w$=s(_s);yae=n(w$,"STRONG",{});var GUr=s(yae);Hno=r(GUr,"pegasus"),GUr.forEach(t),Uno=r(w$," \u2014 "),GP=n(w$,"A",{href:!0});var OUr=s(GP);Jno=r(OUr,"PegasusTokenizer"),OUr.forEach(t),Yno=r(w$," or "),OP=n(w$,"A",{href:!0});var VUr=s(OP);Kno=r(VUr,"PegasusTokenizerFast"),VUr.forEach(t),Zno=r(w$," (Pegasus model)"),w$.forEach(t),eso=i(S),Vg=n(S,"LI",{});var $we=s(Vg);Lae=n($we,"STRONG",{});var XUr=s(Lae);oso=r(XUr,"perceiver"),XUr.forEach(t),rso=r($we," \u2014 "),VP=n($we,"A",{href:!0});var zUr=s(VP);tso=r(zUr,"PerceiverTokenizer"),zUr.forEach(t),aso=r($we," (Perceiver model)"),$we.forEach(t),nso=i(S),Xg=n(S,"LI",{});var kwe=s(Xg);xae=n(kwe,"STRONG",{});var WUr=s(xae);sso=r(WUr,"phobert"),WUr.forEach(t),lso=r(kwe," \u2014 "),XP=n(kwe,"A",{href:!0});var QUr=s(XP);iso=r(QUr,"PhobertTokenizer"),QUr.forEach(t),dso=r(kwe," (PhoBERT model)"),kwe.forEach(t),cso=i(S),zg=n(S,"LI",{});var Swe=s(zg);$ae=n(Swe,"STRONG",{});var HUr=s($ae);fso=r(HUr,"plbart"),HUr.forEach(t),mso=r(Swe," \u2014 "),zP=n(Swe,"A",{href:!0});var UUr=s(zP);gso=r(UUr,"PLBartTokenizer"),UUr.forEach(t),hso=r(Swe," (PLBart model)"),Swe.forEach(t),pso=i(S),Wg=n(S,"LI",{});var Rwe=s(Wg);kae=n(Rwe,"STRONG",{});var JUr=s(kae);uso=r(JUr,"prophetnet"),JUr.forEach(t),_so=r(Rwe," \u2014 "),WP=n(Rwe,"A",{href:!0});var YUr=s(WP);bso=r(YUr,"ProphetNetTokenizer"),YUr.forEach(t),vso=r(Rwe," (ProphetNet model)"),Rwe.forEach(t),Fso=i(S),bs=n(S,"LI",{});var A$=s(bs);Sae=n(A$,"STRONG",{});var KUr=s(Sae);Tso=r(KUr,"qdqbert"),KUr.forEach(t),Mso=r(A$," \u2014 "),QP=n(A$,"A",{href:!0});var ZUr=s(QP);Eso=r(ZUr,"BertTokenizer"),ZUr.forEach(t),Cso=r(A$," or "),HP=n(A$,"A",{href:!0});var eJr=s(HP);wso=r(eJr,"BertTokenizerFast"),eJr.forEach(t),Aso=r(A$," (QDQBert model)"),A$.forEach(t),yso=i(S),Qg=n(S,"LI",{});var Pwe=s(Qg);Rae=n(Pwe,"STRONG",{});var oJr=s(Rae);Lso=r(oJr,"rag"),oJr.forEach(t),xso=r(Pwe," \u2014 "),UP=n(Pwe,"A",{href:!0});var rJr=s(UP);$so=r(rJr,"RagTokenizer"),rJr.forEach(t),kso=r(Pwe," (RAG model)"),Pwe.forEach(t),Sso=i(S),vs=n(S,"LI",{});var y$=s(vs);Pae=n(y$,"STRONG",{});var tJr=s(Pae);Rso=r(tJr,"realm"),tJr.forEach(t),Pso=r(y$," \u2014 "),JP=n(y$,"A",{href:!0});var aJr=s(JP);Bso=r(aJr,"RealmTokenizer"),aJr.forEach(t),Iso=r(y$," or "),YP=n(y$,"A",{href:!0});var nJr=s(YP);Nso=r(nJr,"RealmTokenizerFast"),nJr.forEach(t),qso=r(y$," (Realm model)"),y$.forEach(t),jso=i(S),Fs=n(S,"LI",{});var L$=s(Fs);Bae=n(L$,"STRONG",{});var sJr=s(Bae);Dso=r(sJr,"reformer"),sJr.forEach(t),Gso=r(L$," \u2014 "),KP=n(L$,"A",{href:!0});var lJr=s(KP);Oso=r(lJr,"ReformerTokenizer"),lJr.forEach(t),Vso=r(L$," or "),ZP=n(L$,"A",{href:!0});var iJr=s(ZP);Xso=r(iJr,"ReformerTokenizerFast"),iJr.forEach(t),zso=r(L$," (Reformer model)"),L$.forEach(t),Wso=i(S),Ts=n(S,"LI",{});var x$=s(Ts);Iae=n(x$,"STRONG",{});var dJr=s(Iae);Qso=r(dJr,"rembert"),dJr.forEach(t),Hso=r(x$," \u2014 "),eB=n(x$,"A",{href:!0});var cJr=s(eB);Uso=r(cJr,"RemBertTokenizer"),cJr.forEach(t),Jso=r(x$," or "),oB=n(x$,"A",{href:!0});var fJr=s(oB);Yso=r(fJr,"RemBertTokenizerFast"),fJr.forEach(t),Kso=r(x$," (RemBERT model)"),x$.forEach(t),Zso=i(S),Ms=n(S,"LI",{});var $$=s(Ms);Nae=n($$,"STRONG",{});var mJr=s(Nae);elo=r(mJr,"retribert"),mJr.forEach(t),olo=r($$," \u2014 "),rB=n($$,"A",{href:!0});var gJr=s(rB);rlo=r(gJr,"RetriBertTokenizer"),gJr.forEach(t),tlo=r($$," or "),tB=n($$,"A",{href:!0});var hJr=s(tB);alo=r(hJr,"RetriBertTokenizerFast"),hJr.forEach(t),nlo=r($$," (RetriBERT model)"),$$.forEach(t),slo=i(S),Es=n(S,"LI",{});var k$=s(Es);qae=n(k$,"STRONG",{});var pJr=s(qae);llo=r(pJr,"roberta"),pJr.forEach(t),ilo=r(k$," \u2014 "),aB=n(k$,"A",{href:!0});var uJr=s(aB);dlo=r(uJr,"RobertaTokenizer"),uJr.forEach(t),clo=r(k$," or "),nB=n(k$,"A",{href:!0});var _Jr=s(nB);flo=r(_Jr,"RobertaTokenizerFast"),_Jr.forEach(t),mlo=r(k$," (RoBERTa model)"),k$.forEach(t),glo=i(S),Cs=n(S,"LI",{});var S$=s(Cs);jae=n(S$,"STRONG",{});var bJr=s(jae);hlo=r(bJr,"roformer"),bJr.forEach(t),plo=r(S$," \u2014 "),sB=n(S$,"A",{href:!0});var vJr=s(sB);ulo=r(vJr,"RoFormerTokenizer"),vJr.forEach(t),_lo=r(S$," or "),lB=n(S$,"A",{href:!0});var FJr=s(lB);blo=r(FJr,"RoFormerTokenizerFast"),FJr.forEach(t),vlo=r(S$," (RoFormer model)"),S$.forEach(t),Flo=i(S),Hg=n(S,"LI",{});var Bwe=s(Hg);Dae=n(Bwe,"STRONG",{});var TJr=s(Dae);Tlo=r(TJr,"speech_to_text"),TJr.forEach(t),Mlo=r(Bwe," \u2014 "),iB=n(Bwe,"A",{href:!0});var MJr=s(iB);Elo=r(MJr,"Speech2TextTokenizer"),MJr.forEach(t),Clo=r(Bwe," (Speech2Text model)"),Bwe.forEach(t),wlo=i(S),Ug=n(S,"LI",{});var Iwe=s(Ug);Gae=n(Iwe,"STRONG",{});var EJr=s(Gae);Alo=r(EJr,"speech_to_text_2"),EJr.forEach(t),ylo=r(Iwe," \u2014 "),dB=n(Iwe,"A",{href:!0});var CJr=s(dB);Llo=r(CJr,"Speech2Text2Tokenizer"),CJr.forEach(t),xlo=r(Iwe," (Speech2Text2 model)"),Iwe.forEach(t),$lo=i(S),ws=n(S,"LI",{});var R$=s(ws);Oae=n(R$,"STRONG",{});var wJr=s(Oae);klo=r(wJr,"splinter"),wJr.forEach(t),Slo=r(R$," \u2014 "),cB=n(R$,"A",{href:!0});var AJr=s(cB);Rlo=r(AJr,"SplinterTokenizer"),AJr.forEach(t),Plo=r(R$," or "),fB=n(R$,"A",{href:!0});var yJr=s(fB);Blo=r(yJr,"SplinterTokenizerFast"),yJr.forEach(t),Ilo=r(R$," (Splinter model)"),R$.forEach(t),Nlo=i(S),As=n(S,"LI",{});var P$=s(As);Vae=n(P$,"STRONG",{});var LJr=s(Vae);qlo=r(LJr,"squeezebert"),LJr.forEach(t),jlo=r(P$," \u2014 "),mB=n(P$,"A",{href:!0});var xJr=s(mB);Dlo=r(xJr,"SqueezeBertTokenizer"),xJr.forEach(t),Glo=r(P$," or "),gB=n(P$,"A",{href:!0});var $Jr=s(gB);Olo=r($Jr,"SqueezeBertTokenizerFast"),$Jr.forEach(t),Vlo=r(P$," (SqueezeBERT model)"),P$.forEach(t),Xlo=i(S),ys=n(S,"LI",{});var B$=s(ys);Xae=n(B$,"STRONG",{});var kJr=s(Xae);zlo=r(kJr,"t5"),kJr.forEach(t),Wlo=r(B$," \u2014 "),hB=n(B$,"A",{href:!0});var SJr=s(hB);Qlo=r(SJr,"T5Tokenizer"),SJr.forEach(t),Hlo=r(B$," or "),pB=n(B$,"A",{href:!0});var RJr=s(pB);Ulo=r(RJr,"T5TokenizerFast"),RJr.forEach(t),Jlo=r(B$," (T5 model)"),B$.forEach(t),Ylo=i(S),Jg=n(S,"LI",{});var Nwe=s(Jg);zae=n(Nwe,"STRONG",{});var PJr=s(zae);Klo=r(PJr,"tapas"),PJr.forEach(t),Zlo=r(Nwe," \u2014 "),uB=n(Nwe,"A",{href:!0});var BJr=s(uB);eio=r(BJr,"TapasTokenizer"),BJr.forEach(t),oio=r(Nwe," (TAPAS model)"),Nwe.forEach(t),rio=i(S),Yg=n(S,"LI",{});var qwe=s(Yg);Wae=n(qwe,"STRONG",{});var IJr=s(Wae);tio=r(IJr,"tapex"),IJr.forEach(t),aio=r(qwe," \u2014 "),_B=n(qwe,"A",{href:!0});var NJr=s(_B);nio=r(NJr,"TapexTokenizer"),NJr.forEach(t),sio=r(qwe," (TAPEX model)"),qwe.forEach(t),lio=i(S),Kg=n(S,"LI",{});var jwe=s(Kg);Qae=n(jwe,"STRONG",{});var qJr=s(Qae);iio=r(qJr,"transfo-xl"),qJr.forEach(t),dio=r(jwe," \u2014 "),bB=n(jwe,"A",{href:!0});var jJr=s(bB);cio=r(jJr,"TransfoXLTokenizer"),jJr.forEach(t),fio=r(jwe," (Transformer-XL model)"),jwe.forEach(t),mio=i(S),Ls=n(S,"LI",{});var I$=s(Ls);Hae=n(I$,"STRONG",{});var DJr=s(Hae);gio=r(DJr,"visual_bert"),DJr.forEach(t),hio=r(I$," \u2014 "),vB=n(I$,"A",{href:!0});var GJr=s(vB);pio=r(GJr,"BertTokenizer"),GJr.forEach(t),uio=r(I$," or "),FB=n(I$,"A",{href:!0});var OJr=s(FB);_io=r(OJr,"BertTokenizerFast"),OJr.forEach(t),bio=r(I$," (VisualBert model)"),I$.forEach(t),vio=i(S),Zg=n(S,"LI",{});var Dwe=s(Zg);Uae=n(Dwe,"STRONG",{});var VJr=s(Uae);Fio=r(VJr,"wav2vec2"),VJr.forEach(t),Tio=r(Dwe," \u2014 "),TB=n(Dwe,"A",{href:!0});var XJr=s(TB);Mio=r(XJr,"Wav2Vec2CTCTokenizer"),XJr.forEach(t),Eio=r(Dwe," (Wav2Vec2 model)"),Dwe.forEach(t),Cio=i(S),eh=n(S,"LI",{});var Gwe=s(eh);Jae=n(Gwe,"STRONG",{});var zJr=s(Jae);wio=r(zJr,"wav2vec2-conformer"),zJr.forEach(t),Aio=r(Gwe," \u2014 "),MB=n(Gwe,"A",{href:!0});var WJr=s(MB);yio=r(WJr,"Wav2Vec2CTCTokenizer"),WJr.forEach(t),Lio=r(Gwe," (Wav2Vec2-Conformer model)"),Gwe.forEach(t),xio=i(S),oh=n(S,"LI",{});var Owe=s(oh);Yae=n(Owe,"STRONG",{});var QJr=s(Yae);$io=r(QJr,"wav2vec2_phoneme"),QJr.forEach(t),kio=r(Owe," \u2014 "),EB=n(Owe,"A",{href:!0});var HJr=s(EB);Sio=r(HJr,"Wav2Vec2PhonemeCTCTokenizer"),HJr.forEach(t),Rio=r(Owe," (Wav2Vec2Phoneme model)"),Owe.forEach(t),Pio=i(S),xs=n(S,"LI",{});var N$=s(xs);Kae=n(N$,"STRONG",{});var UJr=s(Kae);Bio=r(UJr,"xglm"),UJr.forEach(t),Iio=r(N$," \u2014 "),CB=n(N$,"A",{href:!0});var JJr=s(CB);Nio=r(JJr,"XGLMTokenizer"),JJr.forEach(t),qio=r(N$," or "),wB=n(N$,"A",{href:!0});var YJr=s(wB);jio=r(YJr,"XGLMTokenizerFast"),YJr.forEach(t),Dio=r(N$," (XGLM model)"),N$.forEach(t),Gio=i(S),rh=n(S,"LI",{});var Vwe=s(rh);Zae=n(Vwe,"STRONG",{});var KJr=s(Zae);Oio=r(KJr,"xlm"),KJr.forEach(t),Vio=r(Vwe," \u2014 "),AB=n(Vwe,"A",{href:!0});var ZJr=s(AB);Xio=r(ZJr,"XLMTokenizer"),ZJr.forEach(t),zio=r(Vwe," (XLM model)"),Vwe.forEach(t),Wio=i(S),th=n(S,"LI",{});var Xwe=s(th);ene=n(Xwe,"STRONG",{});var eYr=s(ene);Qio=r(eYr,"xlm-prophetnet"),eYr.forEach(t),Hio=r(Xwe," \u2014 "),yB=n(Xwe,"A",{href:!0});var oYr=s(yB);Uio=r(oYr,"XLMProphetNetTokenizer"),oYr.forEach(t),Jio=r(Xwe," (XLMProphetNet model)"),Xwe.forEach(t),Yio=i(S),$s=n(S,"LI",{});var q$=s($s);one=n(q$,"STRONG",{});var rYr=s(one);Kio=r(rYr,"xlm-roberta"),rYr.forEach(t),Zio=r(q$," \u2014 "),LB=n(q$,"A",{href:!0});var tYr=s(LB);edo=r(tYr,"XLMRobertaTokenizer"),tYr.forEach(t),odo=r(q$," or "),xB=n(q$,"A",{href:!0});var aYr=s(xB);rdo=r(aYr,"XLMRobertaTokenizerFast"),aYr.forEach(t),tdo=r(q$," (XLM-RoBERTa model)"),q$.forEach(t),ado=i(S),ks=n(S,"LI",{});var j$=s(ks);rne=n(j$,"STRONG",{});var nYr=s(rne);ndo=r(nYr,"xlm-roberta-xl"),nYr.forEach(t),sdo=r(j$," \u2014 "),$B=n(j$,"A",{href:!0});var sYr=s($B);ldo=r(sYr,"RobertaTokenizer"),sYr.forEach(t),ido=r(j$," or "),kB=n(j$,"A",{href:!0});var lYr=s(kB);ddo=r(lYr,"RobertaTokenizerFast"),lYr.forEach(t),cdo=r(j$," (XLM-RoBERTa-XL model)"),j$.forEach(t),fdo=i(S),Ss=n(S,"LI",{});var D$=s(Ss);tne=n(D$,"STRONG",{});var iYr=s(tne);mdo=r(iYr,"xlnet"),iYr.forEach(t),gdo=r(D$," \u2014 "),SB=n(D$,"A",{href:!0});var dYr=s(SB);hdo=r(dYr,"XLNetTokenizer"),dYr.forEach(t),pdo=r(D$," or "),RB=n(D$,"A",{href:!0});var cYr=s(RB);udo=r(cYr,"XLNetTokenizerFast"),cYr.forEach(t),_do=r(D$," (XLNet model)"),D$.forEach(t),bdo=i(S),Rs=n(S,"LI",{});var G$=s(Rs);ane=n(G$,"STRONG",{});var fYr=s(ane);vdo=r(fYr,"yoso"),fYr.forEach(t),Fdo=r(G$," \u2014 "),PB=n(G$,"A",{href:!0});var mYr=s(PB);Tdo=r(mYr,"AlbertTokenizer"),mYr.forEach(t),Mdo=r(G$," or "),BB=n(G$,"A",{href:!0});var gYr=s(BB);Edo=r(gYr,"AlbertTokenizerFast"),gYr.forEach(t),Cdo=r(G$," (YOSO model)"),G$.forEach(t),S.forEach(t),wdo=i(qs),T(ah.$$.fragment,qs),qs.forEach(t),Ado=i(Ns),nh=n(Ns,"DIV",{class:!0});var sDe=s(nh);T(DA.$$.fragment,sDe),ydo=i(sDe),nne=n(sDe,"P",{});var hYr=s(nne);Ldo=r(hYr,"Register a new tokenizer in this mapping."),hYr.forEach(t),sDe.forEach(t),Ns.forEach(t),lqe=i(f),Mi=n(f,"H2",{class:!0});var lDe=s(Mi);sh=n(lDe,"A",{id:!0,class:!0,href:!0});var pYr=s(sh);sne=n(pYr,"SPAN",{});var uYr=s(sne);T(GA.$$.fragment,uYr),uYr.forEach(t),pYr.forEach(t),xdo=i(lDe),lne=n(lDe,"SPAN",{});var _Yr=s(lne);$do=r(_Yr,"AutoFeatureExtractor"),_Yr.forEach(t),lDe.forEach(t),iqe=i(f),Ao=n(f,"DIV",{class:!0});var js=s(Ao);T(OA.$$.fragment,js),kdo=i(js),VA=n(js,"P",{});var iDe=s(VA);Sdo=r(iDe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),IB=n(iDe,"A",{href:!0});var bYr=s(IB);Rdo=r(bYr,"AutoFeatureExtractor.from_pretrained()"),bYr.forEach(t),Pdo=r(iDe," class method."),iDe.forEach(t),Bdo=i(js),XA=n(js,"P",{});var dDe=s(XA);Ido=r(dDe,"This class cannot be instantiated directly using "),ine=n(dDe,"CODE",{});var vYr=s(ine);Ndo=r(vYr,"__init__()"),vYr.forEach(t),qdo=r(dDe," (throws an error)."),dDe.forEach(t),jdo=i(js),He=n(js,"DIV",{class:!0});var Zt=s(He);T(zA.$$.fragment,Zt),Ddo=i(Zt),dne=n(Zt,"P",{});var FYr=s(dne);Gdo=r(FYr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),FYr.forEach(t),Odo=i(Zt),ya=n(Zt,"P",{});var $w=s(ya);Vdo=r($w,"The feature extractor class to instantiate is selected based on the "),cne=n($w,"CODE",{});var TYr=s(cne);Xdo=r(TYr,"model_type"),TYr.forEach(t),zdo=r($w,` property of the config object
(either passed as an argument or loaded from `),fne=n($w,"CODE",{});var MYr=s(fne);Wdo=r(MYr,"pretrained_model_name_or_path"),MYr.forEach(t),Qdo=r($w,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),mne=n($w,"CODE",{});var EYr=s(mne);Hdo=r(EYr,"pretrained_model_name_or_path"),EYr.forEach(t),Udo=r($w,":"),$w.forEach(t),Jdo=i(Zt),Y=n(Zt,"UL",{});var Z=s(Y);lh=n(Z,"LI",{});var zwe=s(lh);gne=n(zwe,"STRONG",{});var CYr=s(gne);Ydo=r(CYr,"beit"),CYr.forEach(t),Kdo=r(zwe," \u2014 "),NB=n(zwe,"A",{href:!0});var wYr=s(NB);Zdo=r(wYr,"BeitFeatureExtractor"),wYr.forEach(t),eco=r(zwe," (BEiT model)"),zwe.forEach(t),oco=i(Z),ih=n(Z,"LI",{});var Wwe=s(ih);hne=n(Wwe,"STRONG",{});var AYr=s(hne);rco=r(AYr,"clip"),AYr.forEach(t),tco=r(Wwe," \u2014 "),qB=n(Wwe,"A",{href:!0});var yYr=s(qB);aco=r(yYr,"CLIPFeatureExtractor"),yYr.forEach(t),nco=r(Wwe," (CLIP model)"),Wwe.forEach(t),sco=i(Z),dh=n(Z,"LI",{});var Qwe=s(dh);pne=n(Qwe,"STRONG",{});var LYr=s(pne);lco=r(LYr,"convnext"),LYr.forEach(t),ico=r(Qwe," \u2014 "),jB=n(Qwe,"A",{href:!0});var xYr=s(jB);dco=r(xYr,"ConvNextFeatureExtractor"),xYr.forEach(t),cco=r(Qwe," (ConvNext model)"),Qwe.forEach(t),fco=i(Z),ch=n(Z,"LI",{});var Hwe=s(ch);une=n(Hwe,"STRONG",{});var $Yr=s(une);mco=r($Yr,"cvt"),$Yr.forEach(t),gco=r(Hwe," \u2014 "),DB=n(Hwe,"A",{href:!0});var kYr=s(DB);hco=r(kYr,"ConvNextFeatureExtractor"),kYr.forEach(t),pco=r(Hwe," (CvT model)"),Hwe.forEach(t),uco=i(Z),fh=n(Z,"LI",{});var Uwe=s(fh);_ne=n(Uwe,"STRONG",{});var SYr=s(_ne);_co=r(SYr,"data2vec-audio"),SYr.forEach(t),bco=r(Uwe," \u2014 "),GB=n(Uwe,"A",{href:!0});var RYr=s(GB);vco=r(RYr,"Wav2Vec2FeatureExtractor"),RYr.forEach(t),Fco=r(Uwe," (Data2VecAudio model)"),Uwe.forEach(t),Tco=i(Z),mh=n(Z,"LI",{});var Jwe=s(mh);bne=n(Jwe,"STRONG",{});var PYr=s(bne);Mco=r(PYr,"data2vec-vision"),PYr.forEach(t),Eco=r(Jwe," \u2014 "),OB=n(Jwe,"A",{href:!0});var BYr=s(OB);Cco=r(BYr,"BeitFeatureExtractor"),BYr.forEach(t),wco=r(Jwe," (Data2VecVision model)"),Jwe.forEach(t),Aco=i(Z),gh=n(Z,"LI",{});var Ywe=s(gh);vne=n(Ywe,"STRONG",{});var IYr=s(vne);yco=r(IYr,"deit"),IYr.forEach(t),Lco=r(Ywe," \u2014 "),VB=n(Ywe,"A",{href:!0});var NYr=s(VB);xco=r(NYr,"DeiTFeatureExtractor"),NYr.forEach(t),$co=r(Ywe," (DeiT model)"),Ywe.forEach(t),kco=i(Z),hh=n(Z,"LI",{});var Kwe=s(hh);Fne=n(Kwe,"STRONG",{});var qYr=s(Fne);Sco=r(qYr,"detr"),qYr.forEach(t),Rco=r(Kwe," \u2014 "),XB=n(Kwe,"A",{href:!0});var jYr=s(XB);Pco=r(jYr,"DetrFeatureExtractor"),jYr.forEach(t),Bco=r(Kwe," (DETR model)"),Kwe.forEach(t),Ico=i(Z),ph=n(Z,"LI",{});var Zwe=s(ph);Tne=n(Zwe,"STRONG",{});var DYr=s(Tne);Nco=r(DYr,"dpt"),DYr.forEach(t),qco=r(Zwe," \u2014 "),zB=n(Zwe,"A",{href:!0});var GYr=s(zB);jco=r(GYr,"DPTFeatureExtractor"),GYr.forEach(t),Dco=r(Zwe," (DPT model)"),Zwe.forEach(t),Gco=i(Z),uh=n(Z,"LI",{});var e6e=s(uh);Mne=n(e6e,"STRONG",{});var OYr=s(Mne);Oco=r(OYr,"flava"),OYr.forEach(t),Vco=r(e6e," \u2014 "),WB=n(e6e,"A",{href:!0});var VYr=s(WB);Xco=r(VYr,"FlavaFeatureExtractor"),VYr.forEach(t),zco=r(e6e," (Flava model)"),e6e.forEach(t),Wco=i(Z),_h=n(Z,"LI",{});var o6e=s(_h);Ene=n(o6e,"STRONG",{});var XYr=s(Ene);Qco=r(XYr,"glpn"),XYr.forEach(t),Hco=r(o6e," \u2014 "),QB=n(o6e,"A",{href:!0});var zYr=s(QB);Uco=r(zYr,"GLPNFeatureExtractor"),zYr.forEach(t),Jco=r(o6e," (GLPN model)"),o6e.forEach(t),Yco=i(Z),bh=n(Z,"LI",{});var r6e=s(bh);Cne=n(r6e,"STRONG",{});var WYr=s(Cne);Kco=r(WYr,"hubert"),WYr.forEach(t),Zco=r(r6e," \u2014 "),HB=n(r6e,"A",{href:!0});var QYr=s(HB);efo=r(QYr,"Wav2Vec2FeatureExtractor"),QYr.forEach(t),ofo=r(r6e," (Hubert model)"),r6e.forEach(t),rfo=i(Z),vh=n(Z,"LI",{});var t6e=s(vh);wne=n(t6e,"STRONG",{});var HYr=s(wne);tfo=r(HYr,"imagegpt"),HYr.forEach(t),afo=r(t6e," \u2014 "),UB=n(t6e,"A",{href:!0});var UYr=s(UB);nfo=r(UYr,"ImageGPTFeatureExtractor"),UYr.forEach(t),sfo=r(t6e," (ImageGPT model)"),t6e.forEach(t),lfo=i(Z),Fh=n(Z,"LI",{});var a6e=s(Fh);Ane=n(a6e,"STRONG",{});var JYr=s(Ane);ifo=r(JYr,"layoutlmv2"),JYr.forEach(t),dfo=r(a6e," \u2014 "),JB=n(a6e,"A",{href:!0});var YYr=s(JB);cfo=r(YYr,"LayoutLMv2FeatureExtractor"),YYr.forEach(t),ffo=r(a6e," (LayoutLMv2 model)"),a6e.forEach(t),mfo=i(Z),Th=n(Z,"LI",{});var n6e=s(Th);yne=n(n6e,"STRONG",{});var KYr=s(yne);gfo=r(KYr,"layoutlmv3"),KYr.forEach(t),hfo=r(n6e," \u2014 "),YB=n(n6e,"A",{href:!0});var ZYr=s(YB);pfo=r(ZYr,"LayoutLMv3FeatureExtractor"),ZYr.forEach(t),ufo=r(n6e," (LayoutLMv3 model)"),n6e.forEach(t),_fo=i(Z),Mh=n(Z,"LI",{});var s6e=s(Mh);Lne=n(s6e,"STRONG",{});var eKr=s(Lne);bfo=r(eKr,"maskformer"),eKr.forEach(t),vfo=r(s6e," \u2014 "),KB=n(s6e,"A",{href:!0});var oKr=s(KB);Ffo=r(oKr,"MaskFormerFeatureExtractor"),oKr.forEach(t),Tfo=r(s6e," (MaskFormer model)"),s6e.forEach(t),Mfo=i(Z),Eh=n(Z,"LI",{});var l6e=s(Eh);xne=n(l6e,"STRONG",{});var rKr=s(xne);Efo=r(rKr,"perceiver"),rKr.forEach(t),Cfo=r(l6e," \u2014 "),ZB=n(l6e,"A",{href:!0});var tKr=s(ZB);wfo=r(tKr,"PerceiverFeatureExtractor"),tKr.forEach(t),Afo=r(l6e," (Perceiver model)"),l6e.forEach(t),yfo=i(Z),Ch=n(Z,"LI",{});var i6e=s(Ch);$ne=n(i6e,"STRONG",{});var aKr=s($ne);Lfo=r(aKr,"poolformer"),aKr.forEach(t),xfo=r(i6e," \u2014 "),eI=n(i6e,"A",{href:!0});var nKr=s(eI);$fo=r(nKr,"PoolFormerFeatureExtractor"),nKr.forEach(t),kfo=r(i6e," (PoolFormer model)"),i6e.forEach(t),Sfo=i(Z),wh=n(Z,"LI",{});var d6e=s(wh);kne=n(d6e,"STRONG",{});var sKr=s(kne);Rfo=r(sKr,"regnet"),sKr.forEach(t),Pfo=r(d6e," \u2014 "),oI=n(d6e,"A",{href:!0});var lKr=s(oI);Bfo=r(lKr,"ConvNextFeatureExtractor"),lKr.forEach(t),Ifo=r(d6e," (RegNet model)"),d6e.forEach(t),Nfo=i(Z),Ah=n(Z,"LI",{});var c6e=s(Ah);Sne=n(c6e,"STRONG",{});var iKr=s(Sne);qfo=r(iKr,"resnet"),iKr.forEach(t),jfo=r(c6e," \u2014 "),rI=n(c6e,"A",{href:!0});var dKr=s(rI);Dfo=r(dKr,"ConvNextFeatureExtractor"),dKr.forEach(t),Gfo=r(c6e," (ResNet model)"),c6e.forEach(t),Ofo=i(Z),yh=n(Z,"LI",{});var f6e=s(yh);Rne=n(f6e,"STRONG",{});var cKr=s(Rne);Vfo=r(cKr,"segformer"),cKr.forEach(t),Xfo=r(f6e," \u2014 "),tI=n(f6e,"A",{href:!0});var fKr=s(tI);zfo=r(fKr,"SegformerFeatureExtractor"),fKr.forEach(t),Wfo=r(f6e," (SegFormer model)"),f6e.forEach(t),Qfo=i(Z),Lh=n(Z,"LI",{});var m6e=s(Lh);Pne=n(m6e,"STRONG",{});var mKr=s(Pne);Hfo=r(mKr,"speech_to_text"),mKr.forEach(t),Ufo=r(m6e," \u2014 "),aI=n(m6e,"A",{href:!0});var gKr=s(aI);Jfo=r(gKr,"Speech2TextFeatureExtractor"),gKr.forEach(t),Yfo=r(m6e," (Speech2Text model)"),m6e.forEach(t),Kfo=i(Z),xh=n(Z,"LI",{});var g6e=s(xh);Bne=n(g6e,"STRONG",{});var hKr=s(Bne);Zfo=r(hKr,"swin"),hKr.forEach(t),emo=r(g6e," \u2014 "),nI=n(g6e,"A",{href:!0});var pKr=s(nI);omo=r(pKr,"ViTFeatureExtractor"),pKr.forEach(t),rmo=r(g6e," (Swin model)"),g6e.forEach(t),tmo=i(Z),$h=n(Z,"LI",{});var h6e=s($h);Ine=n(h6e,"STRONG",{});var uKr=s(Ine);amo=r(uKr,"van"),uKr.forEach(t),nmo=r(h6e," \u2014 "),sI=n(h6e,"A",{href:!0});var _Kr=s(sI);smo=r(_Kr,"ConvNextFeatureExtractor"),_Kr.forEach(t),lmo=r(h6e," (VAN model)"),h6e.forEach(t),imo=i(Z),kh=n(Z,"LI",{});var p6e=s(kh);Nne=n(p6e,"STRONG",{});var bKr=s(Nne);dmo=r(bKr,"vit"),bKr.forEach(t),cmo=r(p6e," \u2014 "),lI=n(p6e,"A",{href:!0});var vKr=s(lI);fmo=r(vKr,"ViTFeatureExtractor"),vKr.forEach(t),mmo=r(p6e," (ViT model)"),p6e.forEach(t),gmo=i(Z),Sh=n(Z,"LI",{});var u6e=s(Sh);qne=n(u6e,"STRONG",{});var FKr=s(qne);hmo=r(FKr,"vit_mae"),FKr.forEach(t),pmo=r(u6e," \u2014 "),iI=n(u6e,"A",{href:!0});var TKr=s(iI);umo=r(TKr,"ViTFeatureExtractor"),TKr.forEach(t),_mo=r(u6e," (ViTMAE model)"),u6e.forEach(t),bmo=i(Z),Rh=n(Z,"LI",{});var _6e=s(Rh);jne=n(_6e,"STRONG",{});var MKr=s(jne);vmo=r(MKr,"wav2vec2"),MKr.forEach(t),Fmo=r(_6e," \u2014 "),dI=n(_6e,"A",{href:!0});var EKr=s(dI);Tmo=r(EKr,"Wav2Vec2FeatureExtractor"),EKr.forEach(t),Mmo=r(_6e," (Wav2Vec2 model)"),_6e.forEach(t),Emo=i(Z),Ph=n(Z,"LI",{});var b6e=s(Ph);Dne=n(b6e,"STRONG",{});var CKr=s(Dne);Cmo=r(CKr,"wav2vec2-conformer"),CKr.forEach(t),wmo=r(b6e," \u2014 "),cI=n(b6e,"A",{href:!0});var wKr=s(cI);Amo=r(wKr,"Wav2Vec2FeatureExtractor"),wKr.forEach(t),ymo=r(b6e," (Wav2Vec2-Conformer model)"),b6e.forEach(t),Lmo=i(Z),Bh=n(Z,"LI",{});var v6e=s(Bh);Gne=n(v6e,"STRONG",{});var AKr=s(Gne);xmo=r(AKr,"yolos"),AKr.forEach(t),$mo=r(v6e," \u2014 "),fI=n(v6e,"A",{href:!0});var yKr=s(fI);kmo=r(yKr,"YolosFeatureExtractor"),yKr.forEach(t),Smo=r(v6e," (YOLOS model)"),v6e.forEach(t),Z.forEach(t),Rmo=i(Zt),T(Ih.$$.fragment,Zt),Pmo=i(Zt),T(Nh.$$.fragment,Zt),Zt.forEach(t),Bmo=i(js),qh=n(js,"DIV",{class:!0});var cDe=s(qh);T(WA.$$.fragment,cDe),Imo=i(cDe),One=n(cDe,"P",{});var LKr=s(One);Nmo=r(LKr,"Register a new feature extractor for this class."),LKr.forEach(t),cDe.forEach(t),js.forEach(t),dqe=i(f),Ei=n(f,"H2",{class:!0});var fDe=s(Ei);jh=n(fDe,"A",{id:!0,class:!0,href:!0});var xKr=s(jh);Vne=n(xKr,"SPAN",{});var $Kr=s(Vne);T(QA.$$.fragment,$Kr),$Kr.forEach(t),xKr.forEach(t),qmo=i(fDe),Xne=n(fDe,"SPAN",{});var kKr=s(Xne);jmo=r(kKr,"AutoProcessor"),kKr.forEach(t),fDe.forEach(t),cqe=i(f),yo=n(f,"DIV",{class:!0});var Ds=s(yo);T(HA.$$.fragment,Ds),Dmo=i(Ds),UA=n(Ds,"P",{});var mDe=s(UA);Gmo=r(mDe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),mI=n(mDe,"A",{href:!0});var SKr=s(mI);Omo=r(SKr,"AutoProcessor.from_pretrained()"),SKr.forEach(t),Vmo=r(mDe," class method."),mDe.forEach(t),Xmo=i(Ds),JA=n(Ds,"P",{});var gDe=s(JA);zmo=r(gDe,"This class cannot be instantiated directly using "),zne=n(gDe,"CODE",{});var RKr=s(zne);Wmo=r(RKr,"__init__()"),RKr.forEach(t),Qmo=r(gDe," (throws an error)."),gDe.forEach(t),Hmo=i(Ds),Ue=n(Ds,"DIV",{class:!0});var ea=s(Ue);T(YA.$$.fragment,ea),Umo=i(ea),Wne=n(ea,"P",{});var PKr=s(Wne);Jmo=r(PKr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),PKr.forEach(t),Ymo=i(ea),Ci=n(ea,"P",{});var hZ=s(Ci);Kmo=r(hZ,"The processor class to instantiate is selected based on the "),Qne=n(hZ,"CODE",{});var BKr=s(Qne);Zmo=r(BKr,"model_type"),BKr.forEach(t),ego=r(hZ,` property of the config object (either
passed as an argument or loaded from `),Hne=n(hZ,"CODE",{});var IKr=s(Hne);ogo=r(IKr,"pretrained_model_name_or_path"),IKr.forEach(t),rgo=r(hZ," if possible):"),hZ.forEach(t),tgo=i(ea),he=n(ea,"UL",{});var _e=s(he);Dh=n(_e,"LI",{});var F6e=s(Dh);Une=n(F6e,"STRONG",{});var NKr=s(Une);ago=r(NKr,"clip"),NKr.forEach(t),ngo=r(F6e," \u2014 "),gI=n(F6e,"A",{href:!0});var qKr=s(gI);sgo=r(qKr,"CLIPProcessor"),qKr.forEach(t),lgo=r(F6e," (CLIP model)"),F6e.forEach(t),igo=i(_e),Gh=n(_e,"LI",{});var T6e=s(Gh);Jne=n(T6e,"STRONG",{});var jKr=s(Jne);dgo=r(jKr,"flava"),jKr.forEach(t),cgo=r(T6e," \u2014 "),Yne=n(T6e,"CODE",{});var DKr=s(Yne);fgo=r(DKr,"FLAVAProcessor"),DKr.forEach(t),mgo=r(T6e," (Flava model)"),T6e.forEach(t),ggo=i(_e),Oh=n(_e,"LI",{});var M6e=s(Oh);Kne=n(M6e,"STRONG",{});var GKr=s(Kne);hgo=r(GKr,"layoutlmv2"),GKr.forEach(t),pgo=r(M6e," \u2014 "),hI=n(M6e,"A",{href:!0});var OKr=s(hI);ugo=r(OKr,"LayoutLMv2Processor"),OKr.forEach(t),_go=r(M6e," (LayoutLMv2 model)"),M6e.forEach(t),bgo=i(_e),Vh=n(_e,"LI",{});var E6e=s(Vh);Zne=n(E6e,"STRONG",{});var VKr=s(Zne);vgo=r(VKr,"layoutlmv3"),VKr.forEach(t),Fgo=r(E6e," \u2014 "),pI=n(E6e,"A",{href:!0});var XKr=s(pI);Tgo=r(XKr,"LayoutLMv3Processor"),XKr.forEach(t),Mgo=r(E6e," (LayoutLMv3 model)"),E6e.forEach(t),Ego=i(_e),Xh=n(_e,"LI",{});var C6e=s(Xh);ese=n(C6e,"STRONG",{});var zKr=s(ese);Cgo=r(zKr,"layoutxlm"),zKr.forEach(t),wgo=r(C6e," \u2014 "),uI=n(C6e,"A",{href:!0});var WKr=s(uI);Ago=r(WKr,"LayoutXLMProcessor"),WKr.forEach(t),ygo=r(C6e," (LayoutXLM model)"),C6e.forEach(t),Lgo=i(_e),zh=n(_e,"LI",{});var w6e=s(zh);ose=n(w6e,"STRONG",{});var QKr=s(ose);xgo=r(QKr,"sew"),QKr.forEach(t),$go=r(w6e," \u2014 "),_I=n(w6e,"A",{href:!0});var HKr=s(_I);kgo=r(HKr,"Wav2Vec2Processor"),HKr.forEach(t),Sgo=r(w6e," (SEW model)"),w6e.forEach(t),Rgo=i(_e),Wh=n(_e,"LI",{});var A6e=s(Wh);rse=n(A6e,"STRONG",{});var UKr=s(rse);Pgo=r(UKr,"sew-d"),UKr.forEach(t),Bgo=r(A6e," \u2014 "),bI=n(A6e,"A",{href:!0});var JKr=s(bI);Igo=r(JKr,"Wav2Vec2Processor"),JKr.forEach(t),Ngo=r(A6e," (SEW-D model)"),A6e.forEach(t),qgo=i(_e),Qh=n(_e,"LI",{});var y6e=s(Qh);tse=n(y6e,"STRONG",{});var YKr=s(tse);jgo=r(YKr,"speech_to_text"),YKr.forEach(t),Dgo=r(y6e," \u2014 "),vI=n(y6e,"A",{href:!0});var KKr=s(vI);Ggo=r(KKr,"Speech2TextProcessor"),KKr.forEach(t),Ogo=r(y6e," (Speech2Text model)"),y6e.forEach(t),Vgo=i(_e),Hh=n(_e,"LI",{});var L6e=s(Hh);ase=n(L6e,"STRONG",{});var ZKr=s(ase);Xgo=r(ZKr,"speech_to_text_2"),ZKr.forEach(t),zgo=r(L6e," \u2014 "),FI=n(L6e,"A",{href:!0});var eZr=s(FI);Wgo=r(eZr,"Speech2Text2Processor"),eZr.forEach(t),Qgo=r(L6e," (Speech2Text2 model)"),L6e.forEach(t),Hgo=i(_e),Uh=n(_e,"LI",{});var x6e=s(Uh);nse=n(x6e,"STRONG",{});var oZr=s(nse);Ugo=r(oZr,"trocr"),oZr.forEach(t),Jgo=r(x6e," \u2014 "),TI=n(x6e,"A",{href:!0});var rZr=s(TI);Ygo=r(rZr,"TrOCRProcessor"),rZr.forEach(t),Kgo=r(x6e," (TrOCR model)"),x6e.forEach(t),Zgo=i(_e),Jh=n(_e,"LI",{});var $6e=s(Jh);sse=n($6e,"STRONG",{});var tZr=s(sse);eho=r(tZr,"unispeech"),tZr.forEach(t),oho=r($6e," \u2014 "),MI=n($6e,"A",{href:!0});var aZr=s(MI);rho=r(aZr,"Wav2Vec2Processor"),aZr.forEach(t),tho=r($6e," (UniSpeech model)"),$6e.forEach(t),aho=i(_e),Yh=n(_e,"LI",{});var k6e=s(Yh);lse=n(k6e,"STRONG",{});var nZr=s(lse);nho=r(nZr,"unispeech-sat"),nZr.forEach(t),sho=r(k6e," \u2014 "),EI=n(k6e,"A",{href:!0});var sZr=s(EI);lho=r(sZr,"Wav2Vec2Processor"),sZr.forEach(t),iho=r(k6e," (UniSpeechSat model)"),k6e.forEach(t),dho=i(_e),Kh=n(_e,"LI",{});var S6e=s(Kh);ise=n(S6e,"STRONG",{});var lZr=s(ise);cho=r(lZr,"vilt"),lZr.forEach(t),fho=r(S6e," \u2014 "),CI=n(S6e,"A",{href:!0});var iZr=s(CI);mho=r(iZr,"ViltProcessor"),iZr.forEach(t),gho=r(S6e," (ViLT model)"),S6e.forEach(t),hho=i(_e),Zh=n(_e,"LI",{});var R6e=s(Zh);dse=n(R6e,"STRONG",{});var dZr=s(dse);pho=r(dZr,"vision-text-dual-encoder"),dZr.forEach(t),uho=r(R6e," \u2014 "),wI=n(R6e,"A",{href:!0});var cZr=s(wI);_ho=r(cZr,"VisionTextDualEncoderProcessor"),cZr.forEach(t),bho=r(R6e," (VisionTextDualEncoder model)"),R6e.forEach(t),vho=i(_e),ep=n(_e,"LI",{});var P6e=s(ep);cse=n(P6e,"STRONG",{});var fZr=s(cse);Fho=r(fZr,"wav2vec2"),fZr.forEach(t),Tho=r(P6e," \u2014 "),AI=n(P6e,"A",{href:!0});var mZr=s(AI);Mho=r(mZr,"Wav2Vec2Processor"),mZr.forEach(t),Eho=r(P6e," (Wav2Vec2 model)"),P6e.forEach(t),Cho=i(_e),op=n(_e,"LI",{});var B6e=s(op);fse=n(B6e,"STRONG",{});var gZr=s(fse);who=r(gZr,"wav2vec2-conformer"),gZr.forEach(t),Aho=r(B6e," \u2014 "),yI=n(B6e,"A",{href:!0});var hZr=s(yI);yho=r(hZr,"Wav2Vec2Processor"),hZr.forEach(t),Lho=r(B6e," (Wav2Vec2-Conformer model)"),B6e.forEach(t),xho=i(_e),rp=n(_e,"LI",{});var I6e=s(rp);mse=n(I6e,"STRONG",{});var pZr=s(mse);$ho=r(pZr,"wavlm"),pZr.forEach(t),kho=r(I6e," \u2014 "),LI=n(I6e,"A",{href:!0});var uZr=s(LI);Sho=r(uZr,"Wav2Vec2Processor"),uZr.forEach(t),Rho=r(I6e," (WavLM model)"),I6e.forEach(t),_e.forEach(t),Pho=i(ea),T(tp.$$.fragment,ea),Bho=i(ea),T(ap.$$.fragment,ea),ea.forEach(t),Iho=i(Ds),np=n(Ds,"DIV",{class:!0});var hDe=s(np);T(KA.$$.fragment,hDe),Nho=i(hDe),gse=n(hDe,"P",{});var _Zr=s(gse);qho=r(_Zr,"Register a new processor for this class."),_Zr.forEach(t),hDe.forEach(t),Ds.forEach(t),fqe=i(f),wi=n(f,"H2",{class:!0});var pDe=s(wi);sp=n(pDe,"A",{id:!0,class:!0,href:!0});var bZr=s(sp);hse=n(bZr,"SPAN",{});var vZr=s(hse);T(ZA.$$.fragment,vZr),vZr.forEach(t),bZr.forEach(t),jho=i(pDe),pse=n(pDe,"SPAN",{});var FZr=s(pse);Dho=r(FZr,"AutoModel"),FZr.forEach(t),pDe.forEach(t),mqe=i(f),Lo=n(f,"DIV",{class:!0});var Gs=s(Lo);T(ey.$$.fragment,Gs),Gho=i(Gs),Ai=n(Gs,"P",{});var pZ=s(Ai);Oho=r(pZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),xI=n(pZ,"A",{href:!0});var TZr=s(xI);Vho=r(TZr,"from_pretrained()"),TZr.forEach(t),Xho=r(pZ," class method or the "),$I=n(pZ,"A",{href:!0});var MZr=s($I);zho=r(MZr,"from_config()"),MZr.forEach(t),Who=r(pZ,` class
method.`),pZ.forEach(t),Qho=i(Gs),oy=n(Gs,"P",{});var uDe=s(oy);Hho=r(uDe,"This class cannot be instantiated directly using "),use=n(uDe,"CODE",{});var EZr=s(use);Uho=r(EZr,"__init__()"),EZr.forEach(t),Jho=r(uDe," (throws an error)."),uDe.forEach(t),Yho=i(Gs),tt=n(Gs,"DIV",{class:!0});var kw=s(tt);T(ry.$$.fragment,kw),Kho=i(kw),_se=n(kw,"P",{});var CZr=s(_se);Zho=r(CZr,"Instantiates one of the base model classes of the library from a configuration."),CZr.forEach(t),epo=i(kw),yi=n(kw,"P",{});var uZ=s(yi);opo=r(uZ,`Note:
Loading a model from its configuration file does `),bse=n(uZ,"STRONG",{});var wZr=s(bse);rpo=r(wZr,"not"),wZr.forEach(t),tpo=r(uZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),kI=n(uZ,"A",{href:!0});var AZr=s(kI);apo=r(AZr,"from_pretrained()"),AZr.forEach(t),npo=r(uZ," to load the model weights."),uZ.forEach(t),spo=i(kw),T(lp.$$.fragment,kw),kw.forEach(t),lpo=i(Gs),Je=n(Gs,"DIV",{class:!0});var oa=s(Je);T(ty.$$.fragment,oa),ipo=i(oa),vse=n(oa,"P",{});var yZr=s(vse);dpo=r(yZr,"Instantiate one of the base model classes of the library from a pretrained model."),yZr.forEach(t),cpo=i(oa),La=n(oa,"P",{});var Sw=s(La);fpo=r(Sw,"The model class to instantiate is selected based on the "),Fse=n(Sw,"CODE",{});var LZr=s(Fse);mpo=r(LZr,"model_type"),LZr.forEach(t),gpo=r(Sw,` property of the config object (either
passed as an argument or loaded from `),Tse=n(Sw,"CODE",{});var xZr=s(Tse);hpo=r(xZr,"pretrained_model_name_or_path"),xZr.forEach(t),ppo=r(Sw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mse=n(Sw,"CODE",{});var $Zr=s(Mse);upo=r($Zr,"pretrained_model_name_or_path"),$Zr.forEach(t),_po=r(Sw,":"),Sw.forEach(t),bpo=i(oa),x=n(oa,"UL",{});var $=s(x);ip=n($,"LI",{});var N6e=s(ip);Ese=n(N6e,"STRONG",{});var kZr=s(Ese);vpo=r(kZr,"albert"),kZr.forEach(t),Fpo=r(N6e," \u2014 "),SI=n(N6e,"A",{href:!0});var SZr=s(SI);Tpo=r(SZr,"AlbertModel"),SZr.forEach(t),Mpo=r(N6e," (ALBERT model)"),N6e.forEach(t),Epo=i($),dp=n($,"LI",{});var q6e=s(dp);Cse=n(q6e,"STRONG",{});var RZr=s(Cse);Cpo=r(RZr,"bart"),RZr.forEach(t),wpo=r(q6e," \u2014 "),RI=n(q6e,"A",{href:!0});var PZr=s(RI);Apo=r(PZr,"BartModel"),PZr.forEach(t),ypo=r(q6e," (BART model)"),q6e.forEach(t),Lpo=i($),cp=n($,"LI",{});var j6e=s(cp);wse=n(j6e,"STRONG",{});var BZr=s(wse);xpo=r(BZr,"beit"),BZr.forEach(t),$po=r(j6e," \u2014 "),PI=n(j6e,"A",{href:!0});var IZr=s(PI);kpo=r(IZr,"BeitModel"),IZr.forEach(t),Spo=r(j6e," (BEiT model)"),j6e.forEach(t),Rpo=i($),fp=n($,"LI",{});var D6e=s(fp);Ase=n(D6e,"STRONG",{});var NZr=s(Ase);Ppo=r(NZr,"bert"),NZr.forEach(t),Bpo=r(D6e," \u2014 "),BI=n(D6e,"A",{href:!0});var qZr=s(BI);Ipo=r(qZr,"BertModel"),qZr.forEach(t),Npo=r(D6e," (BERT model)"),D6e.forEach(t),qpo=i($),mp=n($,"LI",{});var G6e=s(mp);yse=n(G6e,"STRONG",{});var jZr=s(yse);jpo=r(jZr,"bert-generation"),jZr.forEach(t),Dpo=r(G6e," \u2014 "),II=n(G6e,"A",{href:!0});var DZr=s(II);Gpo=r(DZr,"BertGenerationEncoder"),DZr.forEach(t),Opo=r(G6e," (Bert Generation model)"),G6e.forEach(t),Vpo=i($),gp=n($,"LI",{});var O6e=s(gp);Lse=n(O6e,"STRONG",{});var GZr=s(Lse);Xpo=r(GZr,"big_bird"),GZr.forEach(t),zpo=r(O6e," \u2014 "),NI=n(O6e,"A",{href:!0});var OZr=s(NI);Wpo=r(OZr,"BigBirdModel"),OZr.forEach(t),Qpo=r(O6e," (BigBird model)"),O6e.forEach(t),Hpo=i($),hp=n($,"LI",{});var V6e=s(hp);xse=n(V6e,"STRONG",{});var VZr=s(xse);Upo=r(VZr,"bigbird_pegasus"),VZr.forEach(t),Jpo=r(V6e," \u2014 "),qI=n(V6e,"A",{href:!0});var XZr=s(qI);Ypo=r(XZr,"BigBirdPegasusModel"),XZr.forEach(t),Kpo=r(V6e," (BigBirdPegasus model)"),V6e.forEach(t),Zpo=i($),pp=n($,"LI",{});var X6e=s(pp);$se=n(X6e,"STRONG",{});var zZr=s($se);euo=r(zZr,"blenderbot"),zZr.forEach(t),ouo=r(X6e," \u2014 "),jI=n(X6e,"A",{href:!0});var WZr=s(jI);ruo=r(WZr,"BlenderbotModel"),WZr.forEach(t),tuo=r(X6e," (Blenderbot model)"),X6e.forEach(t),auo=i($),up=n($,"LI",{});var z6e=s(up);kse=n(z6e,"STRONG",{});var QZr=s(kse);nuo=r(QZr,"blenderbot-small"),QZr.forEach(t),suo=r(z6e," \u2014 "),DI=n(z6e,"A",{href:!0});var HZr=s(DI);luo=r(HZr,"BlenderbotSmallModel"),HZr.forEach(t),iuo=r(z6e," (BlenderbotSmall model)"),z6e.forEach(t),duo=i($),_p=n($,"LI",{});var W6e=s(_p);Sse=n(W6e,"STRONG",{});var UZr=s(Sse);cuo=r(UZr,"camembert"),UZr.forEach(t),fuo=r(W6e," \u2014 "),GI=n(W6e,"A",{href:!0});var JZr=s(GI);muo=r(JZr,"CamembertModel"),JZr.forEach(t),guo=r(W6e," (CamemBERT model)"),W6e.forEach(t),huo=i($),bp=n($,"LI",{});var Q6e=s(bp);Rse=n(Q6e,"STRONG",{});var YZr=s(Rse);puo=r(YZr,"canine"),YZr.forEach(t),uuo=r(Q6e," \u2014 "),OI=n(Q6e,"A",{href:!0});var KZr=s(OI);_uo=r(KZr,"CanineModel"),KZr.forEach(t),buo=r(Q6e," (Canine model)"),Q6e.forEach(t),vuo=i($),vp=n($,"LI",{});var H6e=s(vp);Pse=n(H6e,"STRONG",{});var ZZr=s(Pse);Fuo=r(ZZr,"clip"),ZZr.forEach(t),Tuo=r(H6e," \u2014 "),VI=n(H6e,"A",{href:!0});var eet=s(VI);Muo=r(eet,"CLIPModel"),eet.forEach(t),Euo=r(H6e," (CLIP model)"),H6e.forEach(t),Cuo=i($),Fp=n($,"LI",{});var U6e=s(Fp);Bse=n(U6e,"STRONG",{});var oet=s(Bse);wuo=r(oet,"convbert"),oet.forEach(t),Auo=r(U6e," \u2014 "),XI=n(U6e,"A",{href:!0});var ret=s(XI);yuo=r(ret,"ConvBertModel"),ret.forEach(t),Luo=r(U6e," (ConvBERT model)"),U6e.forEach(t),xuo=i($),Tp=n($,"LI",{});var J6e=s(Tp);Ise=n(J6e,"STRONG",{});var tet=s(Ise);$uo=r(tet,"convnext"),tet.forEach(t),kuo=r(J6e," \u2014 "),zI=n(J6e,"A",{href:!0});var aet=s(zI);Suo=r(aet,"ConvNextModel"),aet.forEach(t),Ruo=r(J6e," (ConvNext model)"),J6e.forEach(t),Puo=i($),Mp=n($,"LI",{});var Y6e=s(Mp);Nse=n(Y6e,"STRONG",{});var net=s(Nse);Buo=r(net,"ctrl"),net.forEach(t),Iuo=r(Y6e," \u2014 "),WI=n(Y6e,"A",{href:!0});var set=s(WI);Nuo=r(set,"CTRLModel"),set.forEach(t),quo=r(Y6e," (CTRL model)"),Y6e.forEach(t),juo=i($),Ep=n($,"LI",{});var K6e=s(Ep);qse=n(K6e,"STRONG",{});var iet=s(qse);Duo=r(iet,"cvt"),iet.forEach(t),Guo=r(K6e," \u2014 "),QI=n(K6e,"A",{href:!0});var det=s(QI);Ouo=r(det,"CvtModel"),det.forEach(t),Vuo=r(K6e," (CvT model)"),K6e.forEach(t),Xuo=i($),Cp=n($,"LI",{});var Z6e=s(Cp);jse=n(Z6e,"STRONG",{});var cet=s(jse);zuo=r(cet,"data2vec-audio"),cet.forEach(t),Wuo=r(Z6e," \u2014 "),HI=n(Z6e,"A",{href:!0});var fet=s(HI);Quo=r(fet,"Data2VecAudioModel"),fet.forEach(t),Huo=r(Z6e," (Data2VecAudio model)"),Z6e.forEach(t),Uuo=i($),wp=n($,"LI",{});var eAe=s(wp);Dse=n(eAe,"STRONG",{});var met=s(Dse);Juo=r(met,"data2vec-text"),met.forEach(t),Yuo=r(eAe," \u2014 "),UI=n(eAe,"A",{href:!0});var get=s(UI);Kuo=r(get,"Data2VecTextModel"),get.forEach(t),Zuo=r(eAe," (Data2VecText model)"),eAe.forEach(t),e_o=i($),Ap=n($,"LI",{});var oAe=s(Ap);Gse=n(oAe,"STRONG",{});var het=s(Gse);o_o=r(het,"data2vec-vision"),het.forEach(t),r_o=r(oAe," \u2014 "),JI=n(oAe,"A",{href:!0});var pet=s(JI);t_o=r(pet,"Data2VecVisionModel"),pet.forEach(t),a_o=r(oAe," (Data2VecVision model)"),oAe.forEach(t),n_o=i($),yp=n($,"LI",{});var rAe=s(yp);Ose=n(rAe,"STRONG",{});var uet=s(Ose);s_o=r(uet,"deberta"),uet.forEach(t),l_o=r(rAe," \u2014 "),YI=n(rAe,"A",{href:!0});var _et=s(YI);i_o=r(_et,"DebertaModel"),_et.forEach(t),d_o=r(rAe," (DeBERTa model)"),rAe.forEach(t),c_o=i($),Lp=n($,"LI",{});var tAe=s(Lp);Vse=n(tAe,"STRONG",{});var bet=s(Vse);f_o=r(bet,"deberta-v2"),bet.forEach(t),m_o=r(tAe," \u2014 "),KI=n(tAe,"A",{href:!0});var vet=s(KI);g_o=r(vet,"DebertaV2Model"),vet.forEach(t),h_o=r(tAe," (DeBERTa-v2 model)"),tAe.forEach(t),p_o=i($),xp=n($,"LI",{});var aAe=s(xp);Xse=n(aAe,"STRONG",{});var Fet=s(Xse);u_o=r(Fet,"decision_transformer"),Fet.forEach(t),__o=r(aAe," \u2014 "),ZI=n(aAe,"A",{href:!0});var Tet=s(ZI);b_o=r(Tet,"DecisionTransformerModel"),Tet.forEach(t),v_o=r(aAe," (Decision Transformer model)"),aAe.forEach(t),F_o=i($),$p=n($,"LI",{});var nAe=s($p);zse=n(nAe,"STRONG",{});var Met=s(zse);T_o=r(Met,"deit"),Met.forEach(t),M_o=r(nAe," \u2014 "),eN=n(nAe,"A",{href:!0});var Eet=s(eN);E_o=r(Eet,"DeiTModel"),Eet.forEach(t),C_o=r(nAe," (DeiT model)"),nAe.forEach(t),w_o=i($),kp=n($,"LI",{});var sAe=s(kp);Wse=n(sAe,"STRONG",{});var Cet=s(Wse);A_o=r(Cet,"detr"),Cet.forEach(t),y_o=r(sAe," \u2014 "),oN=n(sAe,"A",{href:!0});var wet=s(oN);L_o=r(wet,"DetrModel"),wet.forEach(t),x_o=r(sAe," (DETR model)"),sAe.forEach(t),$_o=i($),Sp=n($,"LI",{});var lAe=s(Sp);Qse=n(lAe,"STRONG",{});var Aet=s(Qse);k_o=r(Aet,"distilbert"),Aet.forEach(t),S_o=r(lAe," \u2014 "),rN=n(lAe,"A",{href:!0});var yet=s(rN);R_o=r(yet,"DistilBertModel"),yet.forEach(t),P_o=r(lAe," (DistilBERT model)"),lAe.forEach(t),B_o=i($),Rp=n($,"LI",{});var iAe=s(Rp);Hse=n(iAe,"STRONG",{});var Let=s(Hse);I_o=r(Let,"dpr"),Let.forEach(t),N_o=r(iAe," \u2014 "),tN=n(iAe,"A",{href:!0});var xet=s(tN);q_o=r(xet,"DPRQuestionEncoder"),xet.forEach(t),j_o=r(iAe," (DPR model)"),iAe.forEach(t),D_o=i($),Pp=n($,"LI",{});var dAe=s(Pp);Use=n(dAe,"STRONG",{});var $et=s(Use);G_o=r($et,"dpt"),$et.forEach(t),O_o=r(dAe," \u2014 "),aN=n(dAe,"A",{href:!0});var ket=s(aN);V_o=r(ket,"DPTModel"),ket.forEach(t),X_o=r(dAe," (DPT model)"),dAe.forEach(t),z_o=i($),Bp=n($,"LI",{});var cAe=s(Bp);Jse=n(cAe,"STRONG",{});var Set=s(Jse);W_o=r(Set,"electra"),Set.forEach(t),Q_o=r(cAe," \u2014 "),nN=n(cAe,"A",{href:!0});var Ret=s(nN);H_o=r(Ret,"ElectraModel"),Ret.forEach(t),U_o=r(cAe," (ELECTRA model)"),cAe.forEach(t),J_o=i($),Ip=n($,"LI",{});var fAe=s(Ip);Yse=n(fAe,"STRONG",{});var Pet=s(Yse);Y_o=r(Pet,"flaubert"),Pet.forEach(t),K_o=r(fAe," \u2014 "),sN=n(fAe,"A",{href:!0});var Bet=s(sN);Z_o=r(Bet,"FlaubertModel"),Bet.forEach(t),e1o=r(fAe," (FlauBERT model)"),fAe.forEach(t),o1o=i($),Np=n($,"LI",{});var mAe=s(Np);Kse=n(mAe,"STRONG",{});var Iet=s(Kse);r1o=r(Iet,"flava"),Iet.forEach(t),t1o=r(mAe," \u2014 "),lN=n(mAe,"A",{href:!0});var Net=s(lN);a1o=r(Net,"FlavaModel"),Net.forEach(t),n1o=r(mAe," (Flava model)"),mAe.forEach(t),s1o=i($),qp=n($,"LI",{});var gAe=s(qp);Zse=n(gAe,"STRONG",{});var qet=s(Zse);l1o=r(qet,"fnet"),qet.forEach(t),i1o=r(gAe," \u2014 "),iN=n(gAe,"A",{href:!0});var jet=s(iN);d1o=r(jet,"FNetModel"),jet.forEach(t),c1o=r(gAe," (FNet model)"),gAe.forEach(t),f1o=i($),jp=n($,"LI",{});var hAe=s(jp);ele=n(hAe,"STRONG",{});var Det=s(ele);m1o=r(Det,"fsmt"),Det.forEach(t),g1o=r(hAe," \u2014 "),dN=n(hAe,"A",{href:!0});var Get=s(dN);h1o=r(Get,"FSMTModel"),Get.forEach(t),p1o=r(hAe," (FairSeq Machine-Translation model)"),hAe.forEach(t),u1o=i($),Ps=n($,"LI",{});var O$=s(Ps);ole=n(O$,"STRONG",{});var Oet=s(ole);_1o=r(Oet,"funnel"),Oet.forEach(t),b1o=r(O$," \u2014 "),cN=n(O$,"A",{href:!0});var Vet=s(cN);v1o=r(Vet,"FunnelModel"),Vet.forEach(t),F1o=r(O$," or "),fN=n(O$,"A",{href:!0});var Xet=s(fN);T1o=r(Xet,"FunnelBaseModel"),Xet.forEach(t),M1o=r(O$," (Funnel Transformer model)"),O$.forEach(t),E1o=i($),Dp=n($,"LI",{});var pAe=s(Dp);rle=n(pAe,"STRONG",{});var zet=s(rle);C1o=r(zet,"glpn"),zet.forEach(t),w1o=r(pAe," \u2014 "),mN=n(pAe,"A",{href:!0});var Wet=s(mN);A1o=r(Wet,"GLPNModel"),Wet.forEach(t),y1o=r(pAe," (GLPN model)"),pAe.forEach(t),L1o=i($),Gp=n($,"LI",{});var uAe=s(Gp);tle=n(uAe,"STRONG",{});var Qet=s(tle);x1o=r(Qet,"gpt2"),Qet.forEach(t),$1o=r(uAe," \u2014 "),gN=n(uAe,"A",{href:!0});var Het=s(gN);k1o=r(Het,"GPT2Model"),Het.forEach(t),S1o=r(uAe," (OpenAI GPT-2 model)"),uAe.forEach(t),R1o=i($),Op=n($,"LI",{});var _Ae=s(Op);ale=n(_Ae,"STRONG",{});var Uet=s(ale);P1o=r(Uet,"gpt_neo"),Uet.forEach(t),B1o=r(_Ae," \u2014 "),hN=n(_Ae,"A",{href:!0});var Jet=s(hN);I1o=r(Jet,"GPTNeoModel"),Jet.forEach(t),N1o=r(_Ae," (GPT Neo model)"),_Ae.forEach(t),q1o=i($),Vp=n($,"LI",{});var bAe=s(Vp);nle=n(bAe,"STRONG",{});var Yet=s(nle);j1o=r(Yet,"gpt_neox"),Yet.forEach(t),D1o=r(bAe," \u2014 "),pN=n(bAe,"A",{href:!0});var Ket=s(pN);G1o=r(Ket,"GPTNeoXModel"),Ket.forEach(t),O1o=r(bAe," (GPT NeoX model)"),bAe.forEach(t),V1o=i($),Xp=n($,"LI",{});var vAe=s(Xp);sle=n(vAe,"STRONG",{});var Zet=s(sle);X1o=r(Zet,"gptj"),Zet.forEach(t),z1o=r(vAe," \u2014 "),uN=n(vAe,"A",{href:!0});var eot=s(uN);W1o=r(eot,"GPTJModel"),eot.forEach(t),Q1o=r(vAe," (GPT-J model)"),vAe.forEach(t),H1o=i($),zp=n($,"LI",{});var FAe=s(zp);lle=n(FAe,"STRONG",{});var oot=s(lle);U1o=r(oot,"hubert"),oot.forEach(t),J1o=r(FAe," \u2014 "),_N=n(FAe,"A",{href:!0});var rot=s(_N);Y1o=r(rot,"HubertModel"),rot.forEach(t),K1o=r(FAe," (Hubert model)"),FAe.forEach(t),Z1o=i($),Wp=n($,"LI",{});var TAe=s(Wp);ile=n(TAe,"STRONG",{});var tot=s(ile);e7o=r(tot,"ibert"),tot.forEach(t),o7o=r(TAe," \u2014 "),bN=n(TAe,"A",{href:!0});var aot=s(bN);r7o=r(aot,"IBertModel"),aot.forEach(t),t7o=r(TAe," (I-BERT model)"),TAe.forEach(t),a7o=i($),Qp=n($,"LI",{});var MAe=s(Qp);dle=n(MAe,"STRONG",{});var not=s(dle);n7o=r(not,"imagegpt"),not.forEach(t),s7o=r(MAe," \u2014 "),vN=n(MAe,"A",{href:!0});var sot=s(vN);l7o=r(sot,"ImageGPTModel"),sot.forEach(t),i7o=r(MAe," (ImageGPT model)"),MAe.forEach(t),d7o=i($),Hp=n($,"LI",{});var EAe=s(Hp);cle=n(EAe,"STRONG",{});var lot=s(cle);c7o=r(lot,"layoutlm"),lot.forEach(t),f7o=r(EAe," \u2014 "),FN=n(EAe,"A",{href:!0});var iot=s(FN);m7o=r(iot,"LayoutLMModel"),iot.forEach(t),g7o=r(EAe," (LayoutLM model)"),EAe.forEach(t),h7o=i($),Up=n($,"LI",{});var CAe=s(Up);fle=n(CAe,"STRONG",{});var dot=s(fle);p7o=r(dot,"layoutlmv2"),dot.forEach(t),u7o=r(CAe," \u2014 "),TN=n(CAe,"A",{href:!0});var cot=s(TN);_7o=r(cot,"LayoutLMv2Model"),cot.forEach(t),b7o=r(CAe," (LayoutLMv2 model)"),CAe.forEach(t),v7o=i($),Jp=n($,"LI",{});var wAe=s(Jp);mle=n(wAe,"STRONG",{});var fot=s(mle);F7o=r(fot,"layoutlmv3"),fot.forEach(t),T7o=r(wAe," \u2014 "),MN=n(wAe,"A",{href:!0});var mot=s(MN);M7o=r(mot,"LayoutLMv3Model"),mot.forEach(t),E7o=r(wAe," (LayoutLMv3 model)"),wAe.forEach(t),C7o=i($),Yp=n($,"LI",{});var AAe=s(Yp);gle=n(AAe,"STRONG",{});var got=s(gle);w7o=r(got,"led"),got.forEach(t),A7o=r(AAe," \u2014 "),EN=n(AAe,"A",{href:!0});var hot=s(EN);y7o=r(hot,"LEDModel"),hot.forEach(t),L7o=r(AAe," (LED model)"),AAe.forEach(t),x7o=i($),Kp=n($,"LI",{});var yAe=s(Kp);hle=n(yAe,"STRONG",{});var pot=s(hle);$7o=r(pot,"longformer"),pot.forEach(t),k7o=r(yAe," \u2014 "),CN=n(yAe,"A",{href:!0});var uot=s(CN);S7o=r(uot,"LongformerModel"),uot.forEach(t),R7o=r(yAe," (Longformer model)"),yAe.forEach(t),P7o=i($),Zp=n($,"LI",{});var LAe=s(Zp);ple=n(LAe,"STRONG",{});var _ot=s(ple);B7o=r(_ot,"luke"),_ot.forEach(t),I7o=r(LAe," \u2014 "),wN=n(LAe,"A",{href:!0});var bot=s(wN);N7o=r(bot,"LukeModel"),bot.forEach(t),q7o=r(LAe," (LUKE model)"),LAe.forEach(t),j7o=i($),eu=n($,"LI",{});var xAe=s(eu);ule=n(xAe,"STRONG",{});var vot=s(ule);D7o=r(vot,"lxmert"),vot.forEach(t),G7o=r(xAe," \u2014 "),AN=n(xAe,"A",{href:!0});var Fot=s(AN);O7o=r(Fot,"LxmertModel"),Fot.forEach(t),V7o=r(xAe," (LXMERT model)"),xAe.forEach(t),X7o=i($),ou=n($,"LI",{});var $Ae=s(ou);_le=n($Ae,"STRONG",{});var Tot=s(_le);z7o=r(Tot,"m2m_100"),Tot.forEach(t),W7o=r($Ae," \u2014 "),yN=n($Ae,"A",{href:!0});var Mot=s(yN);Q7o=r(Mot,"M2M100Model"),Mot.forEach(t),H7o=r($Ae," (M2M100 model)"),$Ae.forEach(t),U7o=i($),ru=n($,"LI",{});var kAe=s(ru);ble=n(kAe,"STRONG",{});var Eot=s(ble);J7o=r(Eot,"marian"),Eot.forEach(t),Y7o=r(kAe," \u2014 "),LN=n(kAe,"A",{href:!0});var Cot=s(LN);K7o=r(Cot,"MarianModel"),Cot.forEach(t),Z7o=r(kAe," (Marian model)"),kAe.forEach(t),ebo=i($),tu=n($,"LI",{});var SAe=s(tu);vle=n(SAe,"STRONG",{});var wot=s(vle);obo=r(wot,"maskformer"),wot.forEach(t),rbo=r(SAe," \u2014 "),xN=n(SAe,"A",{href:!0});var Aot=s(xN);tbo=r(Aot,"MaskFormerModel"),Aot.forEach(t),abo=r(SAe," (MaskFormer model)"),SAe.forEach(t),nbo=i($),au=n($,"LI",{});var RAe=s(au);Fle=n(RAe,"STRONG",{});var yot=s(Fle);sbo=r(yot,"mbart"),yot.forEach(t),lbo=r(RAe," \u2014 "),$N=n(RAe,"A",{href:!0});var Lot=s($N);ibo=r(Lot,"MBartModel"),Lot.forEach(t),dbo=r(RAe," (mBART model)"),RAe.forEach(t),cbo=i($),nu=n($,"LI",{});var PAe=s(nu);Tle=n(PAe,"STRONG",{});var xot=s(Tle);fbo=r(xot,"megatron-bert"),xot.forEach(t),mbo=r(PAe," \u2014 "),kN=n(PAe,"A",{href:!0});var $ot=s(kN);gbo=r($ot,"MegatronBertModel"),$ot.forEach(t),hbo=r(PAe," (MegatronBert model)"),PAe.forEach(t),pbo=i($),su=n($,"LI",{});var BAe=s(su);Mle=n(BAe,"STRONG",{});var kot=s(Mle);ubo=r(kot,"mobilebert"),kot.forEach(t),_bo=r(BAe," \u2014 "),SN=n(BAe,"A",{href:!0});var Sot=s(SN);bbo=r(Sot,"MobileBertModel"),Sot.forEach(t),vbo=r(BAe," (MobileBERT model)"),BAe.forEach(t),Fbo=i($),lu=n($,"LI",{});var IAe=s(lu);Ele=n(IAe,"STRONG",{});var Rot=s(Ele);Tbo=r(Rot,"mpnet"),Rot.forEach(t),Mbo=r(IAe," \u2014 "),RN=n(IAe,"A",{href:!0});var Pot=s(RN);Ebo=r(Pot,"MPNetModel"),Pot.forEach(t),Cbo=r(IAe," (MPNet model)"),IAe.forEach(t),wbo=i($),iu=n($,"LI",{});var NAe=s(iu);Cle=n(NAe,"STRONG",{});var Bot=s(Cle);Abo=r(Bot,"mt5"),Bot.forEach(t),ybo=r(NAe," \u2014 "),PN=n(NAe,"A",{href:!0});var Iot=s(PN);Lbo=r(Iot,"MT5Model"),Iot.forEach(t),xbo=r(NAe," (mT5 model)"),NAe.forEach(t),$bo=i($),du=n($,"LI",{});var qAe=s(du);wle=n(qAe,"STRONG",{});var Not=s(wle);kbo=r(Not,"nystromformer"),Not.forEach(t),Sbo=r(qAe," \u2014 "),BN=n(qAe,"A",{href:!0});var qot=s(BN);Rbo=r(qot,"NystromformerModel"),qot.forEach(t),Pbo=r(qAe," (Nystromformer model)"),qAe.forEach(t),Bbo=i($),cu=n($,"LI",{});var jAe=s(cu);Ale=n(jAe,"STRONG",{});var jot=s(Ale);Ibo=r(jot,"openai-gpt"),jot.forEach(t),Nbo=r(jAe," \u2014 "),IN=n(jAe,"A",{href:!0});var Dot=s(IN);qbo=r(Dot,"OpenAIGPTModel"),Dot.forEach(t),jbo=r(jAe," (OpenAI GPT model)"),jAe.forEach(t),Dbo=i($),fu=n($,"LI",{});var DAe=s(fu);yle=n(DAe,"STRONG",{});var Got=s(yle);Gbo=r(Got,"opt"),Got.forEach(t),Obo=r(DAe," \u2014 "),NN=n(DAe,"A",{href:!0});var Oot=s(NN);Vbo=r(Oot,"OPTModel"),Oot.forEach(t),Xbo=r(DAe," (OPT model)"),DAe.forEach(t),zbo=i($),mu=n($,"LI",{});var GAe=s(mu);Lle=n(GAe,"STRONG",{});var Vot=s(Lle);Wbo=r(Vot,"pegasus"),Vot.forEach(t),Qbo=r(GAe," \u2014 "),qN=n(GAe,"A",{href:!0});var Xot=s(qN);Hbo=r(Xot,"PegasusModel"),Xot.forEach(t),Ubo=r(GAe," (Pegasus model)"),GAe.forEach(t),Jbo=i($),gu=n($,"LI",{});var OAe=s(gu);xle=n(OAe,"STRONG",{});var zot=s(xle);Ybo=r(zot,"perceiver"),zot.forEach(t),Kbo=r(OAe," \u2014 "),jN=n(OAe,"A",{href:!0});var Wot=s(jN);Zbo=r(Wot,"PerceiverModel"),Wot.forEach(t),e2o=r(OAe," (Perceiver model)"),OAe.forEach(t),o2o=i($),hu=n($,"LI",{});var VAe=s(hu);$le=n(VAe,"STRONG",{});var Qot=s($le);r2o=r(Qot,"plbart"),Qot.forEach(t),t2o=r(VAe," \u2014 "),DN=n(VAe,"A",{href:!0});var Hot=s(DN);a2o=r(Hot,"PLBartModel"),Hot.forEach(t),n2o=r(VAe," (PLBart model)"),VAe.forEach(t),s2o=i($),pu=n($,"LI",{});var XAe=s(pu);kle=n(XAe,"STRONG",{});var Uot=s(kle);l2o=r(Uot,"poolformer"),Uot.forEach(t),i2o=r(XAe," \u2014 "),GN=n(XAe,"A",{href:!0});var Jot=s(GN);d2o=r(Jot,"PoolFormerModel"),Jot.forEach(t),c2o=r(XAe," (PoolFormer model)"),XAe.forEach(t),f2o=i($),uu=n($,"LI",{});var zAe=s(uu);Sle=n(zAe,"STRONG",{});var Yot=s(Sle);m2o=r(Yot,"prophetnet"),Yot.forEach(t),g2o=r(zAe," \u2014 "),ON=n(zAe,"A",{href:!0});var Kot=s(ON);h2o=r(Kot,"ProphetNetModel"),Kot.forEach(t),p2o=r(zAe," (ProphetNet model)"),zAe.forEach(t),u2o=i($),_u=n($,"LI",{});var WAe=s(_u);Rle=n(WAe,"STRONG",{});var Zot=s(Rle);_2o=r(Zot,"qdqbert"),Zot.forEach(t),b2o=r(WAe," \u2014 "),VN=n(WAe,"A",{href:!0});var ert=s(VN);v2o=r(ert,"QDQBertModel"),ert.forEach(t),F2o=r(WAe," (QDQBert model)"),WAe.forEach(t),T2o=i($),bu=n($,"LI",{});var QAe=s(bu);Ple=n(QAe,"STRONG",{});var ort=s(Ple);M2o=r(ort,"reformer"),ort.forEach(t),E2o=r(QAe," \u2014 "),XN=n(QAe,"A",{href:!0});var rrt=s(XN);C2o=r(rrt,"ReformerModel"),rrt.forEach(t),w2o=r(QAe," (Reformer model)"),QAe.forEach(t),A2o=i($),vu=n($,"LI",{});var HAe=s(vu);Ble=n(HAe,"STRONG",{});var trt=s(Ble);y2o=r(trt,"regnet"),trt.forEach(t),L2o=r(HAe," \u2014 "),zN=n(HAe,"A",{href:!0});var art=s(zN);x2o=r(art,"RegNetModel"),art.forEach(t),$2o=r(HAe," (RegNet model)"),HAe.forEach(t),k2o=i($),Fu=n($,"LI",{});var UAe=s(Fu);Ile=n(UAe,"STRONG",{});var nrt=s(Ile);S2o=r(nrt,"rembert"),nrt.forEach(t),R2o=r(UAe," \u2014 "),WN=n(UAe,"A",{href:!0});var srt=s(WN);P2o=r(srt,"RemBertModel"),srt.forEach(t),B2o=r(UAe," (RemBERT model)"),UAe.forEach(t),I2o=i($),Tu=n($,"LI",{});var JAe=s(Tu);Nle=n(JAe,"STRONG",{});var lrt=s(Nle);N2o=r(lrt,"resnet"),lrt.forEach(t),q2o=r(JAe," \u2014 "),QN=n(JAe,"A",{href:!0});var irt=s(QN);j2o=r(irt,"ResNetModel"),irt.forEach(t),D2o=r(JAe," (ResNet model)"),JAe.forEach(t),G2o=i($),Mu=n($,"LI",{});var YAe=s(Mu);qle=n(YAe,"STRONG",{});var drt=s(qle);O2o=r(drt,"retribert"),drt.forEach(t),V2o=r(YAe," \u2014 "),HN=n(YAe,"A",{href:!0});var crt=s(HN);X2o=r(crt,"RetriBertModel"),crt.forEach(t),z2o=r(YAe," (RetriBERT model)"),YAe.forEach(t),W2o=i($),Eu=n($,"LI",{});var KAe=s(Eu);jle=n(KAe,"STRONG",{});var frt=s(jle);Q2o=r(frt,"roberta"),frt.forEach(t),H2o=r(KAe," \u2014 "),UN=n(KAe,"A",{href:!0});var mrt=s(UN);U2o=r(mrt,"RobertaModel"),mrt.forEach(t),J2o=r(KAe," (RoBERTa model)"),KAe.forEach(t),Y2o=i($),Cu=n($,"LI",{});var ZAe=s(Cu);Dle=n(ZAe,"STRONG",{});var grt=s(Dle);K2o=r(grt,"roformer"),grt.forEach(t),Z2o=r(ZAe," \u2014 "),JN=n(ZAe,"A",{href:!0});var hrt=s(JN);e4o=r(hrt,"RoFormerModel"),hrt.forEach(t),o4o=r(ZAe," (RoFormer model)"),ZAe.forEach(t),r4o=i($),wu=n($,"LI",{});var eye=s(wu);Gle=n(eye,"STRONG",{});var prt=s(Gle);t4o=r(prt,"segformer"),prt.forEach(t),a4o=r(eye," \u2014 "),YN=n(eye,"A",{href:!0});var urt=s(YN);n4o=r(urt,"SegformerModel"),urt.forEach(t),s4o=r(eye," (SegFormer model)"),eye.forEach(t),l4o=i($),Au=n($,"LI",{});var oye=s(Au);Ole=n(oye,"STRONG",{});var _rt=s(Ole);i4o=r(_rt,"sew"),_rt.forEach(t),d4o=r(oye," \u2014 "),KN=n(oye,"A",{href:!0});var brt=s(KN);c4o=r(brt,"SEWModel"),brt.forEach(t),f4o=r(oye," (SEW model)"),oye.forEach(t),m4o=i($),yu=n($,"LI",{});var rye=s(yu);Vle=n(rye,"STRONG",{});var vrt=s(Vle);g4o=r(vrt,"sew-d"),vrt.forEach(t),h4o=r(rye," \u2014 "),ZN=n(rye,"A",{href:!0});var Frt=s(ZN);p4o=r(Frt,"SEWDModel"),Frt.forEach(t),u4o=r(rye," (SEW-D model)"),rye.forEach(t),_4o=i($),Lu=n($,"LI",{});var tye=s(Lu);Xle=n(tye,"STRONG",{});var Trt=s(Xle);b4o=r(Trt,"speech_to_text"),Trt.forEach(t),v4o=r(tye," \u2014 "),eq=n(tye,"A",{href:!0});var Mrt=s(eq);F4o=r(Mrt,"Speech2TextModel"),Mrt.forEach(t),T4o=r(tye," (Speech2Text model)"),tye.forEach(t),M4o=i($),xu=n($,"LI",{});var aye=s(xu);zle=n(aye,"STRONG",{});var Ert=s(zle);E4o=r(Ert,"splinter"),Ert.forEach(t),C4o=r(aye," \u2014 "),oq=n(aye,"A",{href:!0});var Crt=s(oq);w4o=r(Crt,"SplinterModel"),Crt.forEach(t),A4o=r(aye," (Splinter model)"),aye.forEach(t),y4o=i($),$u=n($,"LI",{});var nye=s($u);Wle=n(nye,"STRONG",{});var wrt=s(Wle);L4o=r(wrt,"squeezebert"),wrt.forEach(t),x4o=r(nye," \u2014 "),rq=n(nye,"A",{href:!0});var Art=s(rq);$4o=r(Art,"SqueezeBertModel"),Art.forEach(t),k4o=r(nye," (SqueezeBERT model)"),nye.forEach(t),S4o=i($),ku=n($,"LI",{});var sye=s(ku);Qle=n(sye,"STRONG",{});var yrt=s(Qle);R4o=r(yrt,"swin"),yrt.forEach(t),P4o=r(sye," \u2014 "),tq=n(sye,"A",{href:!0});var Lrt=s(tq);B4o=r(Lrt,"SwinModel"),Lrt.forEach(t),I4o=r(sye," (Swin model)"),sye.forEach(t),N4o=i($),Su=n($,"LI",{});var lye=s(Su);Hle=n(lye,"STRONG",{});var xrt=s(Hle);q4o=r(xrt,"t5"),xrt.forEach(t),j4o=r(lye," \u2014 "),aq=n(lye,"A",{href:!0});var $rt=s(aq);D4o=r($rt,"T5Model"),$rt.forEach(t),G4o=r(lye," (T5 model)"),lye.forEach(t),O4o=i($),Ru=n($,"LI",{});var iye=s(Ru);Ule=n(iye,"STRONG",{});var krt=s(Ule);V4o=r(krt,"tapas"),krt.forEach(t),X4o=r(iye," \u2014 "),nq=n(iye,"A",{href:!0});var Srt=s(nq);z4o=r(Srt,"TapasModel"),Srt.forEach(t),W4o=r(iye," (TAPAS model)"),iye.forEach(t),Q4o=i($),Pu=n($,"LI",{});var dye=s(Pu);Jle=n(dye,"STRONG",{});var Rrt=s(Jle);H4o=r(Rrt,"trajectory_transformer"),Rrt.forEach(t),U4o=r(dye," \u2014 "),sq=n(dye,"A",{href:!0});var Prt=s(sq);J4o=r(Prt,"TrajectoryTransformerModel"),Prt.forEach(t),Y4o=r(dye," (Trajectory Transformer model)"),dye.forEach(t),K4o=i($),Bu=n($,"LI",{});var cye=s(Bu);Yle=n(cye,"STRONG",{});var Brt=s(Yle);Z4o=r(Brt,"transfo-xl"),Brt.forEach(t),evo=r(cye," \u2014 "),lq=n(cye,"A",{href:!0});var Irt=s(lq);ovo=r(Irt,"TransfoXLModel"),Irt.forEach(t),rvo=r(cye," (Transformer-XL model)"),cye.forEach(t),tvo=i($),Iu=n($,"LI",{});var fye=s(Iu);Kle=n(fye,"STRONG",{});var Nrt=s(Kle);avo=r(Nrt,"unispeech"),Nrt.forEach(t),nvo=r(fye," \u2014 "),iq=n(fye,"A",{href:!0});var qrt=s(iq);svo=r(qrt,"UniSpeechModel"),qrt.forEach(t),lvo=r(fye," (UniSpeech model)"),fye.forEach(t),ivo=i($),Nu=n($,"LI",{});var mye=s(Nu);Zle=n(mye,"STRONG",{});var jrt=s(Zle);dvo=r(jrt,"unispeech-sat"),jrt.forEach(t),cvo=r(mye," \u2014 "),dq=n(mye,"A",{href:!0});var Drt=s(dq);fvo=r(Drt,"UniSpeechSatModel"),Drt.forEach(t),mvo=r(mye," (UniSpeechSat model)"),mye.forEach(t),gvo=i($),qu=n($,"LI",{});var gye=s(qu);eie=n(gye,"STRONG",{});var Grt=s(eie);hvo=r(Grt,"van"),Grt.forEach(t),pvo=r(gye," \u2014 "),cq=n(gye,"A",{href:!0});var Ort=s(cq);uvo=r(Ort,"VanModel"),Ort.forEach(t),_vo=r(gye," (VAN model)"),gye.forEach(t),bvo=i($),ju=n($,"LI",{});var hye=s(ju);oie=n(hye,"STRONG",{});var Vrt=s(oie);vvo=r(Vrt,"vilt"),Vrt.forEach(t),Fvo=r(hye," \u2014 "),fq=n(hye,"A",{href:!0});var Xrt=s(fq);Tvo=r(Xrt,"ViltModel"),Xrt.forEach(t),Mvo=r(hye," (ViLT model)"),hye.forEach(t),Evo=i($),Du=n($,"LI",{});var pye=s(Du);rie=n(pye,"STRONG",{});var zrt=s(rie);Cvo=r(zrt,"vision-text-dual-encoder"),zrt.forEach(t),wvo=r(pye," \u2014 "),mq=n(pye,"A",{href:!0});var Wrt=s(mq);Avo=r(Wrt,"VisionTextDualEncoderModel"),Wrt.forEach(t),yvo=r(pye," (VisionTextDualEncoder model)"),pye.forEach(t),Lvo=i($),Gu=n($,"LI",{});var uye=s(Gu);tie=n(uye,"STRONG",{});var Qrt=s(tie);xvo=r(Qrt,"visual_bert"),Qrt.forEach(t),$vo=r(uye," \u2014 "),gq=n(uye,"A",{href:!0});var Hrt=s(gq);kvo=r(Hrt,"VisualBertModel"),Hrt.forEach(t),Svo=r(uye," (VisualBert model)"),uye.forEach(t),Rvo=i($),Ou=n($,"LI",{});var _ye=s(Ou);aie=n(_ye,"STRONG",{});var Urt=s(aie);Pvo=r(Urt,"vit"),Urt.forEach(t),Bvo=r(_ye," \u2014 "),hq=n(_ye,"A",{href:!0});var Jrt=s(hq);Ivo=r(Jrt,"ViTModel"),Jrt.forEach(t),Nvo=r(_ye," (ViT model)"),_ye.forEach(t),qvo=i($),Vu=n($,"LI",{});var bye=s(Vu);nie=n(bye,"STRONG",{});var Yrt=s(nie);jvo=r(Yrt,"vit_mae"),Yrt.forEach(t),Dvo=r(bye," \u2014 "),pq=n(bye,"A",{href:!0});var Krt=s(pq);Gvo=r(Krt,"ViTMAEModel"),Krt.forEach(t),Ovo=r(bye," (ViTMAE model)"),bye.forEach(t),Vvo=i($),Xu=n($,"LI",{});var vye=s(Xu);sie=n(vye,"STRONG",{});var Zrt=s(sie);Xvo=r(Zrt,"wav2vec2"),Zrt.forEach(t),zvo=r(vye," \u2014 "),uq=n(vye,"A",{href:!0});var ett=s(uq);Wvo=r(ett,"Wav2Vec2Model"),ett.forEach(t),Qvo=r(vye," (Wav2Vec2 model)"),vye.forEach(t),Hvo=i($),zu=n($,"LI",{});var Fye=s(zu);lie=n(Fye,"STRONG",{});var ott=s(lie);Uvo=r(ott,"wav2vec2-conformer"),ott.forEach(t),Jvo=r(Fye," \u2014 "),_q=n(Fye,"A",{href:!0});var rtt=s(_q);Yvo=r(rtt,"Wav2Vec2ConformerModel"),rtt.forEach(t),Kvo=r(Fye," (Wav2Vec2-Conformer model)"),Fye.forEach(t),Zvo=i($),Wu=n($,"LI",{});var Tye=s(Wu);iie=n(Tye,"STRONG",{});var ttt=s(iie);eFo=r(ttt,"wavlm"),ttt.forEach(t),oFo=r(Tye," \u2014 "),bq=n(Tye,"A",{href:!0});var att=s(bq);rFo=r(att,"WavLMModel"),att.forEach(t),tFo=r(Tye," (WavLM model)"),Tye.forEach(t),aFo=i($),Qu=n($,"LI",{});var Mye=s(Qu);die=n(Mye,"STRONG",{});var ntt=s(die);nFo=r(ntt,"xglm"),ntt.forEach(t),sFo=r(Mye," \u2014 "),vq=n(Mye,"A",{href:!0});var stt=s(vq);lFo=r(stt,"XGLMModel"),stt.forEach(t),iFo=r(Mye," (XGLM model)"),Mye.forEach(t),dFo=i($),Hu=n($,"LI",{});var Eye=s(Hu);cie=n(Eye,"STRONG",{});var ltt=s(cie);cFo=r(ltt,"xlm"),ltt.forEach(t),fFo=r(Eye," \u2014 "),Fq=n(Eye,"A",{href:!0});var itt=s(Fq);mFo=r(itt,"XLMModel"),itt.forEach(t),gFo=r(Eye," (XLM model)"),Eye.forEach(t),hFo=i($),Uu=n($,"LI",{});var Cye=s(Uu);fie=n(Cye,"STRONG",{});var dtt=s(fie);pFo=r(dtt,"xlm-prophetnet"),dtt.forEach(t),uFo=r(Cye," \u2014 "),Tq=n(Cye,"A",{href:!0});var ctt=s(Tq);_Fo=r(ctt,"XLMProphetNetModel"),ctt.forEach(t),bFo=r(Cye," (XLMProphetNet model)"),Cye.forEach(t),vFo=i($),Ju=n($,"LI",{});var wye=s(Ju);mie=n(wye,"STRONG",{});var ftt=s(mie);FFo=r(ftt,"xlm-roberta"),ftt.forEach(t),TFo=r(wye," \u2014 "),Mq=n(wye,"A",{href:!0});var mtt=s(Mq);MFo=r(mtt,"XLMRobertaModel"),mtt.forEach(t),EFo=r(wye," (XLM-RoBERTa model)"),wye.forEach(t),CFo=i($),Yu=n($,"LI",{});var Aye=s(Yu);gie=n(Aye,"STRONG",{});var gtt=s(gie);wFo=r(gtt,"xlm-roberta-xl"),gtt.forEach(t),AFo=r(Aye," \u2014 "),Eq=n(Aye,"A",{href:!0});var htt=s(Eq);yFo=r(htt,"XLMRobertaXLModel"),htt.forEach(t),LFo=r(Aye," (XLM-RoBERTa-XL model)"),Aye.forEach(t),xFo=i($),Ku=n($,"LI",{});var yye=s(Ku);hie=n(yye,"STRONG",{});var ptt=s(hie);$Fo=r(ptt,"xlnet"),ptt.forEach(t),kFo=r(yye," \u2014 "),Cq=n(yye,"A",{href:!0});var utt=s(Cq);SFo=r(utt,"XLNetModel"),utt.forEach(t),RFo=r(yye," (XLNet model)"),yye.forEach(t),PFo=i($),Zu=n($,"LI",{});var Lye=s(Zu);pie=n(Lye,"STRONG",{});var _tt=s(pie);BFo=r(_tt,"yolos"),_tt.forEach(t),IFo=r(Lye," \u2014 "),wq=n(Lye,"A",{href:!0});var btt=s(wq);NFo=r(btt,"YolosModel"),btt.forEach(t),qFo=r(Lye," (YOLOS model)"),Lye.forEach(t),jFo=i($),e_=n($,"LI",{});var xye=s(e_);uie=n(xye,"STRONG",{});var vtt=s(uie);DFo=r(vtt,"yoso"),vtt.forEach(t),GFo=r(xye," \u2014 "),Aq=n(xye,"A",{href:!0});var Ftt=s(Aq);OFo=r(Ftt,"YosoModel"),Ftt.forEach(t),VFo=r(xye," (YOSO model)"),xye.forEach(t),$.forEach(t),XFo=i(oa),o_=n(oa,"P",{});var $ye=s(o_);zFo=r($ye,"The model is set in evaluation mode by default using "),_ie=n($ye,"CODE",{});var Ttt=s(_ie);WFo=r(Ttt,"model.eval()"),Ttt.forEach(t),QFo=r($ye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bie=n($ye,"CODE",{});var Mtt=s(bie);HFo=r(Mtt,"model.train()"),Mtt.forEach(t),$ye.forEach(t),UFo=i(oa),T(r_.$$.fragment,oa),oa.forEach(t),Gs.forEach(t),gqe=i(f),Li=n(f,"H2",{class:!0});var _De=s(Li);t_=n(_De,"A",{id:!0,class:!0,href:!0});var Ett=s(t_);vie=n(Ett,"SPAN",{});var Ctt=s(vie);T(ay.$$.fragment,Ctt),Ctt.forEach(t),Ett.forEach(t),JFo=i(_De),Fie=n(_De,"SPAN",{});var wtt=s(Fie);YFo=r(wtt,"AutoModelForPreTraining"),wtt.forEach(t),_De.forEach(t),hqe=i(f),xo=n(f,"DIV",{class:!0});var Os=s(xo);T(ny.$$.fragment,Os),KFo=i(Os),xi=n(Os,"P",{});var _Z=s(xi);ZFo=r(_Z,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),yq=n(_Z,"A",{href:!0});var Att=s(yq);e0o=r(Att,"from_pretrained()"),Att.forEach(t),o0o=r(_Z," class method or the "),Lq=n(_Z,"A",{href:!0});var ytt=s(Lq);r0o=r(ytt,"from_config()"),ytt.forEach(t),t0o=r(_Z,` class
method.`),_Z.forEach(t),a0o=i(Os),sy=n(Os,"P",{});var bDe=s(sy);n0o=r(bDe,"This class cannot be instantiated directly using "),Tie=n(bDe,"CODE",{});var Ltt=s(Tie);s0o=r(Ltt,"__init__()"),Ltt.forEach(t),l0o=r(bDe," (throws an error)."),bDe.forEach(t),i0o=i(Os),at=n(Os,"DIV",{class:!0});var Rw=s(at);T(ly.$$.fragment,Rw),d0o=i(Rw),Mie=n(Rw,"P",{});var xtt=s(Mie);c0o=r(xtt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),xtt.forEach(t),f0o=i(Rw),$i=n(Rw,"P",{});var bZ=s($i);m0o=r(bZ,`Note:
Loading a model from its configuration file does `),Eie=n(bZ,"STRONG",{});var $tt=s(Eie);g0o=r($tt,"not"),$tt.forEach(t),h0o=r(bZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),xq=n(bZ,"A",{href:!0});var ktt=s(xq);p0o=r(ktt,"from_pretrained()"),ktt.forEach(t),u0o=r(bZ," to load the model weights."),bZ.forEach(t),_0o=i(Rw),T(a_.$$.fragment,Rw),Rw.forEach(t),b0o=i(Os),Ye=n(Os,"DIV",{class:!0});var ra=s(Ye);T(iy.$$.fragment,ra),v0o=i(ra),Cie=n(ra,"P",{});var Stt=s(Cie);F0o=r(Stt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Stt.forEach(t),T0o=i(ra),xa=n(ra,"P",{});var Pw=s(xa);M0o=r(Pw,"The model class to instantiate is selected based on the "),wie=n(Pw,"CODE",{});var Rtt=s(wie);E0o=r(Rtt,"model_type"),Rtt.forEach(t),C0o=r(Pw,` property of the config object (either
passed as an argument or loaded from `),Aie=n(Pw,"CODE",{});var Ptt=s(Aie);w0o=r(Ptt,"pretrained_model_name_or_path"),Ptt.forEach(t),A0o=r(Pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yie=n(Pw,"CODE",{});var Btt=s(yie);y0o=r(Btt,"pretrained_model_name_or_path"),Btt.forEach(t),L0o=r(Pw,":"),Pw.forEach(t),x0o=i(ra),G=n(ra,"UL",{});var O=s(G);n_=n(O,"LI",{});var kye=s(n_);Lie=n(kye,"STRONG",{});var Itt=s(Lie);$0o=r(Itt,"albert"),Itt.forEach(t),k0o=r(kye," \u2014 "),$q=n(kye,"A",{href:!0});var Ntt=s($q);S0o=r(Ntt,"AlbertForPreTraining"),Ntt.forEach(t),R0o=r(kye," (ALBERT model)"),kye.forEach(t),P0o=i(O),s_=n(O,"LI",{});var Sye=s(s_);xie=n(Sye,"STRONG",{});var qtt=s(xie);B0o=r(qtt,"bart"),qtt.forEach(t),I0o=r(Sye," \u2014 "),kq=n(Sye,"A",{href:!0});var jtt=s(kq);N0o=r(jtt,"BartForConditionalGeneration"),jtt.forEach(t),q0o=r(Sye," (BART model)"),Sye.forEach(t),j0o=i(O),l_=n(O,"LI",{});var Rye=s(l_);$ie=n(Rye,"STRONG",{});var Dtt=s($ie);D0o=r(Dtt,"bert"),Dtt.forEach(t),G0o=r(Rye," \u2014 "),Sq=n(Rye,"A",{href:!0});var Gtt=s(Sq);O0o=r(Gtt,"BertForPreTraining"),Gtt.forEach(t),V0o=r(Rye," (BERT model)"),Rye.forEach(t),X0o=i(O),i_=n(O,"LI",{});var Pye=s(i_);kie=n(Pye,"STRONG",{});var Ott=s(kie);z0o=r(Ott,"big_bird"),Ott.forEach(t),W0o=r(Pye," \u2014 "),Rq=n(Pye,"A",{href:!0});var Vtt=s(Rq);Q0o=r(Vtt,"BigBirdForPreTraining"),Vtt.forEach(t),H0o=r(Pye," (BigBird model)"),Pye.forEach(t),U0o=i(O),d_=n(O,"LI",{});var Bye=s(d_);Sie=n(Bye,"STRONG",{});var Xtt=s(Sie);J0o=r(Xtt,"camembert"),Xtt.forEach(t),Y0o=r(Bye," \u2014 "),Pq=n(Bye,"A",{href:!0});var ztt=s(Pq);K0o=r(ztt,"CamembertForMaskedLM"),ztt.forEach(t),Z0o=r(Bye," (CamemBERT model)"),Bye.forEach(t),eTo=i(O),c_=n(O,"LI",{});var Iye=s(c_);Rie=n(Iye,"STRONG",{});var Wtt=s(Rie);oTo=r(Wtt,"ctrl"),Wtt.forEach(t),rTo=r(Iye," \u2014 "),Bq=n(Iye,"A",{href:!0});var Qtt=s(Bq);tTo=r(Qtt,"CTRLLMHeadModel"),Qtt.forEach(t),aTo=r(Iye," (CTRL model)"),Iye.forEach(t),nTo=i(O),f_=n(O,"LI",{});var Nye=s(f_);Pie=n(Nye,"STRONG",{});var Htt=s(Pie);sTo=r(Htt,"data2vec-text"),Htt.forEach(t),lTo=r(Nye," \u2014 "),Iq=n(Nye,"A",{href:!0});var Utt=s(Iq);iTo=r(Utt,"Data2VecTextForMaskedLM"),Utt.forEach(t),dTo=r(Nye," (Data2VecText model)"),Nye.forEach(t),cTo=i(O),m_=n(O,"LI",{});var qye=s(m_);Bie=n(qye,"STRONG",{});var Jtt=s(Bie);fTo=r(Jtt,"deberta"),Jtt.forEach(t),mTo=r(qye," \u2014 "),Nq=n(qye,"A",{href:!0});var Ytt=s(Nq);gTo=r(Ytt,"DebertaForMaskedLM"),Ytt.forEach(t),hTo=r(qye," (DeBERTa model)"),qye.forEach(t),pTo=i(O),g_=n(O,"LI",{});var jye=s(g_);Iie=n(jye,"STRONG",{});var Ktt=s(Iie);uTo=r(Ktt,"deberta-v2"),Ktt.forEach(t),_To=r(jye," \u2014 "),qq=n(jye,"A",{href:!0});var Ztt=s(qq);bTo=r(Ztt,"DebertaV2ForMaskedLM"),Ztt.forEach(t),vTo=r(jye," (DeBERTa-v2 model)"),jye.forEach(t),FTo=i(O),h_=n(O,"LI",{});var Dye=s(h_);Nie=n(Dye,"STRONG",{});var eat=s(Nie);TTo=r(eat,"distilbert"),eat.forEach(t),MTo=r(Dye," \u2014 "),jq=n(Dye,"A",{href:!0});var oat=s(jq);ETo=r(oat,"DistilBertForMaskedLM"),oat.forEach(t),CTo=r(Dye," (DistilBERT model)"),Dye.forEach(t),wTo=i(O),p_=n(O,"LI",{});var Gye=s(p_);qie=n(Gye,"STRONG",{});var rat=s(qie);ATo=r(rat,"electra"),rat.forEach(t),yTo=r(Gye," \u2014 "),Dq=n(Gye,"A",{href:!0});var tat=s(Dq);LTo=r(tat,"ElectraForPreTraining"),tat.forEach(t),xTo=r(Gye," (ELECTRA model)"),Gye.forEach(t),$To=i(O),u_=n(O,"LI",{});var Oye=s(u_);jie=n(Oye,"STRONG",{});var aat=s(jie);kTo=r(aat,"flaubert"),aat.forEach(t),STo=r(Oye," \u2014 "),Gq=n(Oye,"A",{href:!0});var nat=s(Gq);RTo=r(nat,"FlaubertWithLMHeadModel"),nat.forEach(t),PTo=r(Oye," (FlauBERT model)"),Oye.forEach(t),BTo=i(O),__=n(O,"LI",{});var Vye=s(__);Die=n(Vye,"STRONG",{});var sat=s(Die);ITo=r(sat,"flava"),sat.forEach(t),NTo=r(Vye," \u2014 "),Oq=n(Vye,"A",{href:!0});var lat=s(Oq);qTo=r(lat,"FlavaForPreTraining"),lat.forEach(t),jTo=r(Vye," (Flava model)"),Vye.forEach(t),DTo=i(O),b_=n(O,"LI",{});var Xye=s(b_);Gie=n(Xye,"STRONG",{});var iat=s(Gie);GTo=r(iat,"fnet"),iat.forEach(t),OTo=r(Xye," \u2014 "),Vq=n(Xye,"A",{href:!0});var dat=s(Vq);VTo=r(dat,"FNetForPreTraining"),dat.forEach(t),XTo=r(Xye," (FNet model)"),Xye.forEach(t),zTo=i(O),v_=n(O,"LI",{});var zye=s(v_);Oie=n(zye,"STRONG",{});var cat=s(Oie);WTo=r(cat,"fsmt"),cat.forEach(t),QTo=r(zye," \u2014 "),Xq=n(zye,"A",{href:!0});var fat=s(Xq);HTo=r(fat,"FSMTForConditionalGeneration"),fat.forEach(t),UTo=r(zye," (FairSeq Machine-Translation model)"),zye.forEach(t),JTo=i(O),F_=n(O,"LI",{});var Wye=s(F_);Vie=n(Wye,"STRONG",{});var mat=s(Vie);YTo=r(mat,"funnel"),mat.forEach(t),KTo=r(Wye," \u2014 "),zq=n(Wye,"A",{href:!0});var gat=s(zq);ZTo=r(gat,"FunnelForPreTraining"),gat.forEach(t),eMo=r(Wye," (Funnel Transformer model)"),Wye.forEach(t),oMo=i(O),T_=n(O,"LI",{});var Qye=s(T_);Xie=n(Qye,"STRONG",{});var hat=s(Xie);rMo=r(hat,"gpt2"),hat.forEach(t),tMo=r(Qye," \u2014 "),Wq=n(Qye,"A",{href:!0});var pat=s(Wq);aMo=r(pat,"GPT2LMHeadModel"),pat.forEach(t),nMo=r(Qye," (OpenAI GPT-2 model)"),Qye.forEach(t),sMo=i(O),M_=n(O,"LI",{});var Hye=s(M_);zie=n(Hye,"STRONG",{});var uat=s(zie);lMo=r(uat,"ibert"),uat.forEach(t),iMo=r(Hye," \u2014 "),Qq=n(Hye,"A",{href:!0});var _at=s(Qq);dMo=r(_at,"IBertForMaskedLM"),_at.forEach(t),cMo=r(Hye," (I-BERT model)"),Hye.forEach(t),fMo=i(O),E_=n(O,"LI",{});var Uye=s(E_);Wie=n(Uye,"STRONG",{});var bat=s(Wie);mMo=r(bat,"layoutlm"),bat.forEach(t),gMo=r(Uye," \u2014 "),Hq=n(Uye,"A",{href:!0});var vat=s(Hq);hMo=r(vat,"LayoutLMForMaskedLM"),vat.forEach(t),pMo=r(Uye," (LayoutLM model)"),Uye.forEach(t),uMo=i(O),C_=n(O,"LI",{});var Jye=s(C_);Qie=n(Jye,"STRONG",{});var Fat=s(Qie);_Mo=r(Fat,"longformer"),Fat.forEach(t),bMo=r(Jye," \u2014 "),Uq=n(Jye,"A",{href:!0});var Tat=s(Uq);vMo=r(Tat,"LongformerForMaskedLM"),Tat.forEach(t),FMo=r(Jye," (Longformer model)"),Jye.forEach(t),TMo=i(O),w_=n(O,"LI",{});var Yye=s(w_);Hie=n(Yye,"STRONG",{});var Mat=s(Hie);MMo=r(Mat,"lxmert"),Mat.forEach(t),EMo=r(Yye," \u2014 "),Jq=n(Yye,"A",{href:!0});var Eat=s(Jq);CMo=r(Eat,"LxmertForPreTraining"),Eat.forEach(t),wMo=r(Yye," (LXMERT model)"),Yye.forEach(t),AMo=i(O),A_=n(O,"LI",{});var Kye=s(A_);Uie=n(Kye,"STRONG",{});var Cat=s(Uie);yMo=r(Cat,"megatron-bert"),Cat.forEach(t),LMo=r(Kye," \u2014 "),Yq=n(Kye,"A",{href:!0});var wat=s(Yq);xMo=r(wat,"MegatronBertForPreTraining"),wat.forEach(t),$Mo=r(Kye," (MegatronBert model)"),Kye.forEach(t),kMo=i(O),y_=n(O,"LI",{});var Zye=s(y_);Jie=n(Zye,"STRONG",{});var Aat=s(Jie);SMo=r(Aat,"mobilebert"),Aat.forEach(t),RMo=r(Zye," \u2014 "),Kq=n(Zye,"A",{href:!0});var yat=s(Kq);PMo=r(yat,"MobileBertForPreTraining"),yat.forEach(t),BMo=r(Zye," (MobileBERT model)"),Zye.forEach(t),IMo=i(O),L_=n(O,"LI",{});var eLe=s(L_);Yie=n(eLe,"STRONG",{});var Lat=s(Yie);NMo=r(Lat,"mpnet"),Lat.forEach(t),qMo=r(eLe," \u2014 "),Zq=n(eLe,"A",{href:!0});var xat=s(Zq);jMo=r(xat,"MPNetForMaskedLM"),xat.forEach(t),DMo=r(eLe," (MPNet model)"),eLe.forEach(t),GMo=i(O),x_=n(O,"LI",{});var oLe=s(x_);Kie=n(oLe,"STRONG",{});var $at=s(Kie);OMo=r($at,"openai-gpt"),$at.forEach(t),VMo=r(oLe," \u2014 "),ej=n(oLe,"A",{href:!0});var kat=s(ej);XMo=r(kat,"OpenAIGPTLMHeadModel"),kat.forEach(t),zMo=r(oLe," (OpenAI GPT model)"),oLe.forEach(t),WMo=i(O),$_=n(O,"LI",{});var rLe=s($_);Zie=n(rLe,"STRONG",{});var Sat=s(Zie);QMo=r(Sat,"retribert"),Sat.forEach(t),HMo=r(rLe," \u2014 "),oj=n(rLe,"A",{href:!0});var Rat=s(oj);UMo=r(Rat,"RetriBertModel"),Rat.forEach(t),JMo=r(rLe," (RetriBERT model)"),rLe.forEach(t),YMo=i(O),k_=n(O,"LI",{});var tLe=s(k_);ede=n(tLe,"STRONG",{});var Pat=s(ede);KMo=r(Pat,"roberta"),Pat.forEach(t),ZMo=r(tLe," \u2014 "),rj=n(tLe,"A",{href:!0});var Bat=s(rj);eEo=r(Bat,"RobertaForMaskedLM"),Bat.forEach(t),oEo=r(tLe," (RoBERTa model)"),tLe.forEach(t),rEo=i(O),S_=n(O,"LI",{});var aLe=s(S_);ode=n(aLe,"STRONG",{});var Iat=s(ode);tEo=r(Iat,"splinter"),Iat.forEach(t),aEo=r(aLe," \u2014 "),tj=n(aLe,"A",{href:!0});var Nat=s(tj);nEo=r(Nat,"SplinterForPreTraining"),Nat.forEach(t),sEo=r(aLe," (Splinter model)"),aLe.forEach(t),lEo=i(O),R_=n(O,"LI",{});var nLe=s(R_);rde=n(nLe,"STRONG",{});var qat=s(rde);iEo=r(qat,"squeezebert"),qat.forEach(t),dEo=r(nLe," \u2014 "),aj=n(nLe,"A",{href:!0});var jat=s(aj);cEo=r(jat,"SqueezeBertForMaskedLM"),jat.forEach(t),fEo=r(nLe," (SqueezeBERT model)"),nLe.forEach(t),mEo=i(O),P_=n(O,"LI",{});var sLe=s(P_);tde=n(sLe,"STRONG",{});var Dat=s(tde);gEo=r(Dat,"t5"),Dat.forEach(t),hEo=r(sLe," \u2014 "),nj=n(sLe,"A",{href:!0});var Gat=s(nj);pEo=r(Gat,"T5ForConditionalGeneration"),Gat.forEach(t),uEo=r(sLe," (T5 model)"),sLe.forEach(t),_Eo=i(O),B_=n(O,"LI",{});var lLe=s(B_);ade=n(lLe,"STRONG",{});var Oat=s(ade);bEo=r(Oat,"tapas"),Oat.forEach(t),vEo=r(lLe," \u2014 "),sj=n(lLe,"A",{href:!0});var Vat=s(sj);FEo=r(Vat,"TapasForMaskedLM"),Vat.forEach(t),TEo=r(lLe," (TAPAS model)"),lLe.forEach(t),MEo=i(O),I_=n(O,"LI",{});var iLe=s(I_);nde=n(iLe,"STRONG",{});var Xat=s(nde);EEo=r(Xat,"transfo-xl"),Xat.forEach(t),CEo=r(iLe," \u2014 "),lj=n(iLe,"A",{href:!0});var zat=s(lj);wEo=r(zat,"TransfoXLLMHeadModel"),zat.forEach(t),AEo=r(iLe," (Transformer-XL model)"),iLe.forEach(t),yEo=i(O),N_=n(O,"LI",{});var dLe=s(N_);sde=n(dLe,"STRONG",{});var Wat=s(sde);LEo=r(Wat,"unispeech"),Wat.forEach(t),xEo=r(dLe," \u2014 "),ij=n(dLe,"A",{href:!0});var Qat=s(ij);$Eo=r(Qat,"UniSpeechForPreTraining"),Qat.forEach(t),kEo=r(dLe," (UniSpeech model)"),dLe.forEach(t),SEo=i(O),q_=n(O,"LI",{});var cLe=s(q_);lde=n(cLe,"STRONG",{});var Hat=s(lde);REo=r(Hat,"unispeech-sat"),Hat.forEach(t),PEo=r(cLe," \u2014 "),dj=n(cLe,"A",{href:!0});var Uat=s(dj);BEo=r(Uat,"UniSpeechSatForPreTraining"),Uat.forEach(t),IEo=r(cLe," (UniSpeechSat model)"),cLe.forEach(t),NEo=i(O),j_=n(O,"LI",{});var fLe=s(j_);ide=n(fLe,"STRONG",{});var Jat=s(ide);qEo=r(Jat,"visual_bert"),Jat.forEach(t),jEo=r(fLe," \u2014 "),cj=n(fLe,"A",{href:!0});var Yat=s(cj);DEo=r(Yat,"VisualBertForPreTraining"),Yat.forEach(t),GEo=r(fLe," (VisualBert model)"),fLe.forEach(t),OEo=i(O),D_=n(O,"LI",{});var mLe=s(D_);dde=n(mLe,"STRONG",{});var Kat=s(dde);VEo=r(Kat,"vit_mae"),Kat.forEach(t),XEo=r(mLe," \u2014 "),fj=n(mLe,"A",{href:!0});var Zat=s(fj);zEo=r(Zat,"ViTMAEForPreTraining"),Zat.forEach(t),WEo=r(mLe," (ViTMAE model)"),mLe.forEach(t),QEo=i(O),G_=n(O,"LI",{});var gLe=s(G_);cde=n(gLe,"STRONG",{});var ent=s(cde);HEo=r(ent,"wav2vec2"),ent.forEach(t),UEo=r(gLe," \u2014 "),mj=n(gLe,"A",{href:!0});var ont=s(mj);JEo=r(ont,"Wav2Vec2ForPreTraining"),ont.forEach(t),YEo=r(gLe," (Wav2Vec2 model)"),gLe.forEach(t),KEo=i(O),O_=n(O,"LI",{});var hLe=s(O_);fde=n(hLe,"STRONG",{});var rnt=s(fde);ZEo=r(rnt,"wav2vec2-conformer"),rnt.forEach(t),eCo=r(hLe," \u2014 "),gj=n(hLe,"A",{href:!0});var tnt=s(gj);oCo=r(tnt,"Wav2Vec2ConformerForPreTraining"),tnt.forEach(t),rCo=r(hLe," (Wav2Vec2-Conformer model)"),hLe.forEach(t),tCo=i(O),V_=n(O,"LI",{});var pLe=s(V_);mde=n(pLe,"STRONG",{});var ant=s(mde);aCo=r(ant,"xlm"),ant.forEach(t),nCo=r(pLe," \u2014 "),hj=n(pLe,"A",{href:!0});var nnt=s(hj);sCo=r(nnt,"XLMWithLMHeadModel"),nnt.forEach(t),lCo=r(pLe," (XLM model)"),pLe.forEach(t),iCo=i(O),X_=n(O,"LI",{});var uLe=s(X_);gde=n(uLe,"STRONG",{});var snt=s(gde);dCo=r(snt,"xlm-roberta"),snt.forEach(t),cCo=r(uLe," \u2014 "),pj=n(uLe,"A",{href:!0});var lnt=s(pj);fCo=r(lnt,"XLMRobertaForMaskedLM"),lnt.forEach(t),mCo=r(uLe," (XLM-RoBERTa model)"),uLe.forEach(t),gCo=i(O),z_=n(O,"LI",{});var _Le=s(z_);hde=n(_Le,"STRONG",{});var int=s(hde);hCo=r(int,"xlm-roberta-xl"),int.forEach(t),pCo=r(_Le," \u2014 "),uj=n(_Le,"A",{href:!0});var dnt=s(uj);uCo=r(dnt,"XLMRobertaXLForMaskedLM"),dnt.forEach(t),_Co=r(_Le," (XLM-RoBERTa-XL model)"),_Le.forEach(t),bCo=i(O),W_=n(O,"LI",{});var bLe=s(W_);pde=n(bLe,"STRONG",{});var cnt=s(pde);vCo=r(cnt,"xlnet"),cnt.forEach(t),FCo=r(bLe," \u2014 "),_j=n(bLe,"A",{href:!0});var fnt=s(_j);TCo=r(fnt,"XLNetLMHeadModel"),fnt.forEach(t),MCo=r(bLe," (XLNet model)"),bLe.forEach(t),O.forEach(t),ECo=i(ra),Q_=n(ra,"P",{});var vLe=s(Q_);CCo=r(vLe,"The model is set in evaluation mode by default using "),ude=n(vLe,"CODE",{});var mnt=s(ude);wCo=r(mnt,"model.eval()"),mnt.forEach(t),ACo=r(vLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_de=n(vLe,"CODE",{});var gnt=s(_de);yCo=r(gnt,"model.train()"),gnt.forEach(t),vLe.forEach(t),LCo=i(ra),T(H_.$$.fragment,ra),ra.forEach(t),Os.forEach(t),pqe=i(f),ki=n(f,"H2",{class:!0});var vDe=s(ki);U_=n(vDe,"A",{id:!0,class:!0,href:!0});var hnt=s(U_);bde=n(hnt,"SPAN",{});var pnt=s(bde);T(dy.$$.fragment,pnt),pnt.forEach(t),hnt.forEach(t),xCo=i(vDe),vde=n(vDe,"SPAN",{});var unt=s(vde);$Co=r(unt,"AutoModelForCausalLM"),unt.forEach(t),vDe.forEach(t),uqe=i(f),$o=n(f,"DIV",{class:!0});var Vs=s($o);T(cy.$$.fragment,Vs),kCo=i(Vs),Si=n(Vs,"P",{});var vZ=s(Si);SCo=r(vZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),bj=n(vZ,"A",{href:!0});var _nt=s(bj);RCo=r(_nt,"from_pretrained()"),_nt.forEach(t),PCo=r(vZ," class method or the "),vj=n(vZ,"A",{href:!0});var bnt=s(vj);BCo=r(bnt,"from_config()"),bnt.forEach(t),ICo=r(vZ,` class
method.`),vZ.forEach(t),NCo=i(Vs),fy=n(Vs,"P",{});var FDe=s(fy);qCo=r(FDe,"This class cannot be instantiated directly using "),Fde=n(FDe,"CODE",{});var vnt=s(Fde);jCo=r(vnt,"__init__()"),vnt.forEach(t),DCo=r(FDe," (throws an error)."),FDe.forEach(t),GCo=i(Vs),nt=n(Vs,"DIV",{class:!0});var Bw=s(nt);T(my.$$.fragment,Bw),OCo=i(Bw),Tde=n(Bw,"P",{});var Fnt=s(Tde);VCo=r(Fnt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Fnt.forEach(t),XCo=i(Bw),Ri=n(Bw,"P",{});var FZ=s(Ri);zCo=r(FZ,`Note:
Loading a model from its configuration file does `),Mde=n(FZ,"STRONG",{});var Tnt=s(Mde);WCo=r(Tnt,"not"),Tnt.forEach(t),QCo=r(FZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Fj=n(FZ,"A",{href:!0});var Mnt=s(Fj);HCo=r(Mnt,"from_pretrained()"),Mnt.forEach(t),UCo=r(FZ," to load the model weights."),FZ.forEach(t),JCo=i(Bw),T(J_.$$.fragment,Bw),Bw.forEach(t),YCo=i(Vs),Ke=n(Vs,"DIV",{class:!0});var ta=s(Ke);T(gy.$$.fragment,ta),KCo=i(ta),Ede=n(ta,"P",{});var Ent=s(Ede);ZCo=r(Ent,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Ent.forEach(t),e5o=i(ta),$a=n(ta,"P",{});var Iw=s($a);o5o=r(Iw,"The model class to instantiate is selected based on the "),Cde=n(Iw,"CODE",{});var Cnt=s(Cde);r5o=r(Cnt,"model_type"),Cnt.forEach(t),t5o=r(Iw,` property of the config object (either
passed as an argument or loaded from `),wde=n(Iw,"CODE",{});var wnt=s(wde);a5o=r(wnt,"pretrained_model_name_or_path"),wnt.forEach(t),n5o=r(Iw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ade=n(Iw,"CODE",{});var Ant=s(Ade);s5o=r(Ant,"pretrained_model_name_or_path"),Ant.forEach(t),l5o=r(Iw,":"),Iw.forEach(t),i5o=i(ta),z=n(ta,"UL",{});var W=s(z);Y_=n(W,"LI",{});var FLe=s(Y_);yde=n(FLe,"STRONG",{});var ynt=s(yde);d5o=r(ynt,"bart"),ynt.forEach(t),c5o=r(FLe," \u2014 "),Tj=n(FLe,"A",{href:!0});var Lnt=s(Tj);f5o=r(Lnt,"BartForCausalLM"),Lnt.forEach(t),m5o=r(FLe," (BART model)"),FLe.forEach(t),g5o=i(W),K_=n(W,"LI",{});var TLe=s(K_);Lde=n(TLe,"STRONG",{});var xnt=s(Lde);h5o=r(xnt,"bert"),xnt.forEach(t),p5o=r(TLe," \u2014 "),Mj=n(TLe,"A",{href:!0});var $nt=s(Mj);u5o=r($nt,"BertLMHeadModel"),$nt.forEach(t),_5o=r(TLe," (BERT model)"),TLe.forEach(t),b5o=i(W),Z_=n(W,"LI",{});var MLe=s(Z_);xde=n(MLe,"STRONG",{});var knt=s(xde);v5o=r(knt,"bert-generation"),knt.forEach(t),F5o=r(MLe," \u2014 "),Ej=n(MLe,"A",{href:!0});var Snt=s(Ej);T5o=r(Snt,"BertGenerationDecoder"),Snt.forEach(t),M5o=r(MLe," (Bert Generation model)"),MLe.forEach(t),E5o=i(W),e1=n(W,"LI",{});var ELe=s(e1);$de=n(ELe,"STRONG",{});var Rnt=s($de);C5o=r(Rnt,"big_bird"),Rnt.forEach(t),w5o=r(ELe," \u2014 "),Cj=n(ELe,"A",{href:!0});var Pnt=s(Cj);A5o=r(Pnt,"BigBirdForCausalLM"),Pnt.forEach(t),y5o=r(ELe," (BigBird model)"),ELe.forEach(t),L5o=i(W),o1=n(W,"LI",{});var CLe=s(o1);kde=n(CLe,"STRONG",{});var Bnt=s(kde);x5o=r(Bnt,"bigbird_pegasus"),Bnt.forEach(t),$5o=r(CLe," \u2014 "),wj=n(CLe,"A",{href:!0});var Int=s(wj);k5o=r(Int,"BigBirdPegasusForCausalLM"),Int.forEach(t),S5o=r(CLe," (BigBirdPegasus model)"),CLe.forEach(t),R5o=i(W),r1=n(W,"LI",{});var wLe=s(r1);Sde=n(wLe,"STRONG",{});var Nnt=s(Sde);P5o=r(Nnt,"blenderbot"),Nnt.forEach(t),B5o=r(wLe," \u2014 "),Aj=n(wLe,"A",{href:!0});var qnt=s(Aj);I5o=r(qnt,"BlenderbotForCausalLM"),qnt.forEach(t),N5o=r(wLe," (Blenderbot model)"),wLe.forEach(t),q5o=i(W),t1=n(W,"LI",{});var ALe=s(t1);Rde=n(ALe,"STRONG",{});var jnt=s(Rde);j5o=r(jnt,"blenderbot-small"),jnt.forEach(t),D5o=r(ALe," \u2014 "),yj=n(ALe,"A",{href:!0});var Dnt=s(yj);G5o=r(Dnt,"BlenderbotSmallForCausalLM"),Dnt.forEach(t),O5o=r(ALe," (BlenderbotSmall model)"),ALe.forEach(t),V5o=i(W),a1=n(W,"LI",{});var yLe=s(a1);Pde=n(yLe,"STRONG",{});var Gnt=s(Pde);X5o=r(Gnt,"camembert"),Gnt.forEach(t),z5o=r(yLe," \u2014 "),Lj=n(yLe,"A",{href:!0});var Ont=s(Lj);W5o=r(Ont,"CamembertForCausalLM"),Ont.forEach(t),Q5o=r(yLe," (CamemBERT model)"),yLe.forEach(t),H5o=i(W),n1=n(W,"LI",{});var LLe=s(n1);Bde=n(LLe,"STRONG",{});var Vnt=s(Bde);U5o=r(Vnt,"ctrl"),Vnt.forEach(t),J5o=r(LLe," \u2014 "),xj=n(LLe,"A",{href:!0});var Xnt=s(xj);Y5o=r(Xnt,"CTRLLMHeadModel"),Xnt.forEach(t),K5o=r(LLe," (CTRL model)"),LLe.forEach(t),Z5o=i(W),s1=n(W,"LI",{});var xLe=s(s1);Ide=n(xLe,"STRONG",{});var znt=s(Ide);e3o=r(znt,"data2vec-text"),znt.forEach(t),o3o=r(xLe," \u2014 "),$j=n(xLe,"A",{href:!0});var Wnt=s($j);r3o=r(Wnt,"Data2VecTextForCausalLM"),Wnt.forEach(t),t3o=r(xLe," (Data2VecText model)"),xLe.forEach(t),a3o=i(W),l1=n(W,"LI",{});var $Le=s(l1);Nde=n($Le,"STRONG",{});var Qnt=s(Nde);n3o=r(Qnt,"electra"),Qnt.forEach(t),s3o=r($Le," \u2014 "),kj=n($Le,"A",{href:!0});var Hnt=s(kj);l3o=r(Hnt,"ElectraForCausalLM"),Hnt.forEach(t),i3o=r($Le," (ELECTRA model)"),$Le.forEach(t),d3o=i(W),i1=n(W,"LI",{});var kLe=s(i1);qde=n(kLe,"STRONG",{});var Unt=s(qde);c3o=r(Unt,"gpt2"),Unt.forEach(t),f3o=r(kLe," \u2014 "),Sj=n(kLe,"A",{href:!0});var Jnt=s(Sj);m3o=r(Jnt,"GPT2LMHeadModel"),Jnt.forEach(t),g3o=r(kLe," (OpenAI GPT-2 model)"),kLe.forEach(t),h3o=i(W),d1=n(W,"LI",{});var SLe=s(d1);jde=n(SLe,"STRONG",{});var Ynt=s(jde);p3o=r(Ynt,"gpt_neo"),Ynt.forEach(t),u3o=r(SLe," \u2014 "),Rj=n(SLe,"A",{href:!0});var Knt=s(Rj);_3o=r(Knt,"GPTNeoForCausalLM"),Knt.forEach(t),b3o=r(SLe," (GPT Neo model)"),SLe.forEach(t),v3o=i(W),c1=n(W,"LI",{});var RLe=s(c1);Dde=n(RLe,"STRONG",{});var Znt=s(Dde);F3o=r(Znt,"gpt_neox"),Znt.forEach(t),T3o=r(RLe," \u2014 "),Pj=n(RLe,"A",{href:!0});var est=s(Pj);M3o=r(est,"GPTNeoXForCausalLM"),est.forEach(t),E3o=r(RLe," (GPT NeoX model)"),RLe.forEach(t),C3o=i(W),f1=n(W,"LI",{});var PLe=s(f1);Gde=n(PLe,"STRONG",{});var ost=s(Gde);w3o=r(ost,"gptj"),ost.forEach(t),A3o=r(PLe," \u2014 "),Bj=n(PLe,"A",{href:!0});var rst=s(Bj);y3o=r(rst,"GPTJForCausalLM"),rst.forEach(t),L3o=r(PLe," (GPT-J model)"),PLe.forEach(t),x3o=i(W),m1=n(W,"LI",{});var BLe=s(m1);Ode=n(BLe,"STRONG",{});var tst=s(Ode);$3o=r(tst,"marian"),tst.forEach(t),k3o=r(BLe," \u2014 "),Ij=n(BLe,"A",{href:!0});var ast=s(Ij);S3o=r(ast,"MarianForCausalLM"),ast.forEach(t),R3o=r(BLe," (Marian model)"),BLe.forEach(t),P3o=i(W),g1=n(W,"LI",{});var ILe=s(g1);Vde=n(ILe,"STRONG",{});var nst=s(Vde);B3o=r(nst,"mbart"),nst.forEach(t),I3o=r(ILe," \u2014 "),Nj=n(ILe,"A",{href:!0});var sst=s(Nj);N3o=r(sst,"MBartForCausalLM"),sst.forEach(t),q3o=r(ILe," (mBART model)"),ILe.forEach(t),j3o=i(W),h1=n(W,"LI",{});var NLe=s(h1);Xde=n(NLe,"STRONG",{});var lst=s(Xde);D3o=r(lst,"megatron-bert"),lst.forEach(t),G3o=r(NLe," \u2014 "),qj=n(NLe,"A",{href:!0});var ist=s(qj);O3o=r(ist,"MegatronBertForCausalLM"),ist.forEach(t),V3o=r(NLe," (MegatronBert model)"),NLe.forEach(t),X3o=i(W),p1=n(W,"LI",{});var qLe=s(p1);zde=n(qLe,"STRONG",{});var dst=s(zde);z3o=r(dst,"openai-gpt"),dst.forEach(t),W3o=r(qLe," \u2014 "),jj=n(qLe,"A",{href:!0});var cst=s(jj);Q3o=r(cst,"OpenAIGPTLMHeadModel"),cst.forEach(t),H3o=r(qLe," (OpenAI GPT model)"),qLe.forEach(t),U3o=i(W),u1=n(W,"LI",{});var jLe=s(u1);Wde=n(jLe,"STRONG",{});var fst=s(Wde);J3o=r(fst,"opt"),fst.forEach(t),Y3o=r(jLe," \u2014 "),Dj=n(jLe,"A",{href:!0});var mst=s(Dj);K3o=r(mst,"OPTForCausalLM"),mst.forEach(t),Z3o=r(jLe," (OPT model)"),jLe.forEach(t),ewo=i(W),_1=n(W,"LI",{});var DLe=s(_1);Qde=n(DLe,"STRONG",{});var gst=s(Qde);owo=r(gst,"pegasus"),gst.forEach(t),rwo=r(DLe," \u2014 "),Gj=n(DLe,"A",{href:!0});var hst=s(Gj);two=r(hst,"PegasusForCausalLM"),hst.forEach(t),awo=r(DLe," (Pegasus model)"),DLe.forEach(t),nwo=i(W),b1=n(W,"LI",{});var GLe=s(b1);Hde=n(GLe,"STRONG",{});var pst=s(Hde);swo=r(pst,"plbart"),pst.forEach(t),lwo=r(GLe," \u2014 "),Oj=n(GLe,"A",{href:!0});var ust=s(Oj);iwo=r(ust,"PLBartForCausalLM"),ust.forEach(t),dwo=r(GLe," (PLBart model)"),GLe.forEach(t),cwo=i(W),v1=n(W,"LI",{});var OLe=s(v1);Ude=n(OLe,"STRONG",{});var _st=s(Ude);fwo=r(_st,"prophetnet"),_st.forEach(t),mwo=r(OLe," \u2014 "),Vj=n(OLe,"A",{href:!0});var bst=s(Vj);gwo=r(bst,"ProphetNetForCausalLM"),bst.forEach(t),hwo=r(OLe," (ProphetNet model)"),OLe.forEach(t),pwo=i(W),F1=n(W,"LI",{});var VLe=s(F1);Jde=n(VLe,"STRONG",{});var vst=s(Jde);uwo=r(vst,"qdqbert"),vst.forEach(t),_wo=r(VLe," \u2014 "),Xj=n(VLe,"A",{href:!0});var Fst=s(Xj);bwo=r(Fst,"QDQBertLMHeadModel"),Fst.forEach(t),vwo=r(VLe," (QDQBert model)"),VLe.forEach(t),Fwo=i(W),T1=n(W,"LI",{});var XLe=s(T1);Yde=n(XLe,"STRONG",{});var Tst=s(Yde);Two=r(Tst,"reformer"),Tst.forEach(t),Mwo=r(XLe," \u2014 "),zj=n(XLe,"A",{href:!0});var Mst=s(zj);Ewo=r(Mst,"ReformerModelWithLMHead"),Mst.forEach(t),Cwo=r(XLe," (Reformer model)"),XLe.forEach(t),wwo=i(W),M1=n(W,"LI",{});var zLe=s(M1);Kde=n(zLe,"STRONG",{});var Est=s(Kde);Awo=r(Est,"rembert"),Est.forEach(t),ywo=r(zLe," \u2014 "),Wj=n(zLe,"A",{href:!0});var Cst=s(Wj);Lwo=r(Cst,"RemBertForCausalLM"),Cst.forEach(t),xwo=r(zLe," (RemBERT model)"),zLe.forEach(t),$wo=i(W),E1=n(W,"LI",{});var WLe=s(E1);Zde=n(WLe,"STRONG",{});var wst=s(Zde);kwo=r(wst,"roberta"),wst.forEach(t),Swo=r(WLe," \u2014 "),Qj=n(WLe,"A",{href:!0});var Ast=s(Qj);Rwo=r(Ast,"RobertaForCausalLM"),Ast.forEach(t),Pwo=r(WLe," (RoBERTa model)"),WLe.forEach(t),Bwo=i(W),C1=n(W,"LI",{});var QLe=s(C1);ece=n(QLe,"STRONG",{});var yst=s(ece);Iwo=r(yst,"roformer"),yst.forEach(t),Nwo=r(QLe," \u2014 "),Hj=n(QLe,"A",{href:!0});var Lst=s(Hj);qwo=r(Lst,"RoFormerForCausalLM"),Lst.forEach(t),jwo=r(QLe," (RoFormer model)"),QLe.forEach(t),Dwo=i(W),w1=n(W,"LI",{});var HLe=s(w1);oce=n(HLe,"STRONG",{});var xst=s(oce);Gwo=r(xst,"speech_to_text_2"),xst.forEach(t),Owo=r(HLe," \u2014 "),Uj=n(HLe,"A",{href:!0});var $st=s(Uj);Vwo=r($st,"Speech2Text2ForCausalLM"),$st.forEach(t),Xwo=r(HLe," (Speech2Text2 model)"),HLe.forEach(t),zwo=i(W),A1=n(W,"LI",{});var ULe=s(A1);rce=n(ULe,"STRONG",{});var kst=s(rce);Wwo=r(kst,"transfo-xl"),kst.forEach(t),Qwo=r(ULe," \u2014 "),Jj=n(ULe,"A",{href:!0});var Sst=s(Jj);Hwo=r(Sst,"TransfoXLLMHeadModel"),Sst.forEach(t),Uwo=r(ULe," (Transformer-XL model)"),ULe.forEach(t),Jwo=i(W),y1=n(W,"LI",{});var JLe=s(y1);tce=n(JLe,"STRONG",{});var Rst=s(tce);Ywo=r(Rst,"trocr"),Rst.forEach(t),Kwo=r(JLe," \u2014 "),Yj=n(JLe,"A",{href:!0});var Pst=s(Yj);Zwo=r(Pst,"TrOCRForCausalLM"),Pst.forEach(t),e6o=r(JLe," (TrOCR model)"),JLe.forEach(t),o6o=i(W),L1=n(W,"LI",{});var YLe=s(L1);ace=n(YLe,"STRONG",{});var Bst=s(ace);r6o=r(Bst,"xglm"),Bst.forEach(t),t6o=r(YLe," \u2014 "),Kj=n(YLe,"A",{href:!0});var Ist=s(Kj);a6o=r(Ist,"XGLMForCausalLM"),Ist.forEach(t),n6o=r(YLe," (XGLM model)"),YLe.forEach(t),s6o=i(W),x1=n(W,"LI",{});var KLe=s(x1);nce=n(KLe,"STRONG",{});var Nst=s(nce);l6o=r(Nst,"xlm"),Nst.forEach(t),i6o=r(KLe," \u2014 "),Zj=n(KLe,"A",{href:!0});var qst=s(Zj);d6o=r(qst,"XLMWithLMHeadModel"),qst.forEach(t),c6o=r(KLe," (XLM model)"),KLe.forEach(t),f6o=i(W),$1=n(W,"LI",{});var ZLe=s($1);sce=n(ZLe,"STRONG",{});var jst=s(sce);m6o=r(jst,"xlm-prophetnet"),jst.forEach(t),g6o=r(ZLe," \u2014 "),eD=n(ZLe,"A",{href:!0});var Dst=s(eD);h6o=r(Dst,"XLMProphetNetForCausalLM"),Dst.forEach(t),p6o=r(ZLe," (XLMProphetNet model)"),ZLe.forEach(t),u6o=i(W),k1=n(W,"LI",{});var e8e=s(k1);lce=n(e8e,"STRONG",{});var Gst=s(lce);_6o=r(Gst,"xlm-roberta"),Gst.forEach(t),b6o=r(e8e," \u2014 "),oD=n(e8e,"A",{href:!0});var Ost=s(oD);v6o=r(Ost,"XLMRobertaForCausalLM"),Ost.forEach(t),F6o=r(e8e," (XLM-RoBERTa model)"),e8e.forEach(t),T6o=i(W),S1=n(W,"LI",{});var o8e=s(S1);ice=n(o8e,"STRONG",{});var Vst=s(ice);M6o=r(Vst,"xlm-roberta-xl"),Vst.forEach(t),E6o=r(o8e," \u2014 "),rD=n(o8e,"A",{href:!0});var Xst=s(rD);C6o=r(Xst,"XLMRobertaXLForCausalLM"),Xst.forEach(t),w6o=r(o8e," (XLM-RoBERTa-XL model)"),o8e.forEach(t),A6o=i(W),R1=n(W,"LI",{});var r8e=s(R1);dce=n(r8e,"STRONG",{});var zst=s(dce);y6o=r(zst,"xlnet"),zst.forEach(t),L6o=r(r8e," \u2014 "),tD=n(r8e,"A",{href:!0});var Wst=s(tD);x6o=r(Wst,"XLNetLMHeadModel"),Wst.forEach(t),$6o=r(r8e," (XLNet model)"),r8e.forEach(t),W.forEach(t),k6o=i(ta),P1=n(ta,"P",{});var t8e=s(P1);S6o=r(t8e,"The model is set in evaluation mode by default using "),cce=n(t8e,"CODE",{});var Qst=s(cce);R6o=r(Qst,"model.eval()"),Qst.forEach(t),P6o=r(t8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fce=n(t8e,"CODE",{});var Hst=s(fce);B6o=r(Hst,"model.train()"),Hst.forEach(t),t8e.forEach(t),I6o=i(ta),T(B1.$$.fragment,ta),ta.forEach(t),Vs.forEach(t),_qe=i(f),Pi=n(f,"H2",{class:!0});var TDe=s(Pi);I1=n(TDe,"A",{id:!0,class:!0,href:!0});var Ust=s(I1);mce=n(Ust,"SPAN",{});var Jst=s(mce);T(hy.$$.fragment,Jst),Jst.forEach(t),Ust.forEach(t),N6o=i(TDe),gce=n(TDe,"SPAN",{});var Yst=s(gce);q6o=r(Yst,"AutoModelForMaskedLM"),Yst.forEach(t),TDe.forEach(t),bqe=i(f),ko=n(f,"DIV",{class:!0});var Xs=s(ko);T(py.$$.fragment,Xs),j6o=i(Xs),Bi=n(Xs,"P",{});var TZ=s(Bi);D6o=r(TZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),aD=n(TZ,"A",{href:!0});var Kst=s(aD);G6o=r(Kst,"from_pretrained()"),Kst.forEach(t),O6o=r(TZ," class method or the "),nD=n(TZ,"A",{href:!0});var Zst=s(nD);V6o=r(Zst,"from_config()"),Zst.forEach(t),X6o=r(TZ,` class
method.`),TZ.forEach(t),z6o=i(Xs),uy=n(Xs,"P",{});var MDe=s(uy);W6o=r(MDe,"This class cannot be instantiated directly using "),hce=n(MDe,"CODE",{});var elt=s(hce);Q6o=r(elt,"__init__()"),elt.forEach(t),H6o=r(MDe," (throws an error)."),MDe.forEach(t),U6o=i(Xs),st=n(Xs,"DIV",{class:!0});var Nw=s(st);T(_y.$$.fragment,Nw),J6o=i(Nw),pce=n(Nw,"P",{});var olt=s(pce);Y6o=r(olt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),olt.forEach(t),K6o=i(Nw),Ii=n(Nw,"P",{});var MZ=s(Ii);Z6o=r(MZ,`Note:
Loading a model from its configuration file does `),uce=n(MZ,"STRONG",{});var rlt=s(uce);eAo=r(rlt,"not"),rlt.forEach(t),oAo=r(MZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),sD=n(MZ,"A",{href:!0});var tlt=s(sD);rAo=r(tlt,"from_pretrained()"),tlt.forEach(t),tAo=r(MZ," to load the model weights."),MZ.forEach(t),aAo=i(Nw),T(N1.$$.fragment,Nw),Nw.forEach(t),nAo=i(Xs),Ze=n(Xs,"DIV",{class:!0});var aa=s(Ze);T(by.$$.fragment,aa),sAo=i(aa),_ce=n(aa,"P",{});var alt=s(_ce);lAo=r(alt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),alt.forEach(t),iAo=i(aa),ka=n(aa,"P",{});var qw=s(ka);dAo=r(qw,"The model class to instantiate is selected based on the "),bce=n(qw,"CODE",{});var nlt=s(bce);cAo=r(nlt,"model_type"),nlt.forEach(t),fAo=r(qw,` property of the config object (either
passed as an argument or loaded from `),vce=n(qw,"CODE",{});var slt=s(vce);mAo=r(slt,"pretrained_model_name_or_path"),slt.forEach(t),gAo=r(qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fce=n(qw,"CODE",{});var llt=s(Fce);hAo=r(llt,"pretrained_model_name_or_path"),llt.forEach(t),pAo=r(qw,":"),qw.forEach(t),uAo=i(aa),Q=n(aa,"UL",{});var U=s(Q);q1=n(U,"LI",{});var a8e=s(q1);Tce=n(a8e,"STRONG",{});var ilt=s(Tce);_Ao=r(ilt,"albert"),ilt.forEach(t),bAo=r(a8e," \u2014 "),lD=n(a8e,"A",{href:!0});var dlt=s(lD);vAo=r(dlt,"AlbertForMaskedLM"),dlt.forEach(t),FAo=r(a8e," (ALBERT model)"),a8e.forEach(t),TAo=i(U),j1=n(U,"LI",{});var n8e=s(j1);Mce=n(n8e,"STRONG",{});var clt=s(Mce);MAo=r(clt,"bart"),clt.forEach(t),EAo=r(n8e," \u2014 "),iD=n(n8e,"A",{href:!0});var flt=s(iD);CAo=r(flt,"BartForConditionalGeneration"),flt.forEach(t),wAo=r(n8e," (BART model)"),n8e.forEach(t),AAo=i(U),D1=n(U,"LI",{});var s8e=s(D1);Ece=n(s8e,"STRONG",{});var mlt=s(Ece);yAo=r(mlt,"bert"),mlt.forEach(t),LAo=r(s8e," \u2014 "),dD=n(s8e,"A",{href:!0});var glt=s(dD);xAo=r(glt,"BertForMaskedLM"),glt.forEach(t),$Ao=r(s8e," (BERT model)"),s8e.forEach(t),kAo=i(U),G1=n(U,"LI",{});var l8e=s(G1);Cce=n(l8e,"STRONG",{});var hlt=s(Cce);SAo=r(hlt,"big_bird"),hlt.forEach(t),RAo=r(l8e," \u2014 "),cD=n(l8e,"A",{href:!0});var plt=s(cD);PAo=r(plt,"BigBirdForMaskedLM"),plt.forEach(t),BAo=r(l8e," (BigBird model)"),l8e.forEach(t),IAo=i(U),O1=n(U,"LI",{});var i8e=s(O1);wce=n(i8e,"STRONG",{});var ult=s(wce);NAo=r(ult,"camembert"),ult.forEach(t),qAo=r(i8e," \u2014 "),fD=n(i8e,"A",{href:!0});var _lt=s(fD);jAo=r(_lt,"CamembertForMaskedLM"),_lt.forEach(t),DAo=r(i8e," (CamemBERT model)"),i8e.forEach(t),GAo=i(U),V1=n(U,"LI",{});var d8e=s(V1);Ace=n(d8e,"STRONG",{});var blt=s(Ace);OAo=r(blt,"convbert"),blt.forEach(t),VAo=r(d8e," \u2014 "),mD=n(d8e,"A",{href:!0});var vlt=s(mD);XAo=r(vlt,"ConvBertForMaskedLM"),vlt.forEach(t),zAo=r(d8e," (ConvBERT model)"),d8e.forEach(t),WAo=i(U),X1=n(U,"LI",{});var c8e=s(X1);yce=n(c8e,"STRONG",{});var Flt=s(yce);QAo=r(Flt,"data2vec-text"),Flt.forEach(t),HAo=r(c8e," \u2014 "),gD=n(c8e,"A",{href:!0});var Tlt=s(gD);UAo=r(Tlt,"Data2VecTextForMaskedLM"),Tlt.forEach(t),JAo=r(c8e," (Data2VecText model)"),c8e.forEach(t),YAo=i(U),z1=n(U,"LI",{});var f8e=s(z1);Lce=n(f8e,"STRONG",{});var Mlt=s(Lce);KAo=r(Mlt,"deberta"),Mlt.forEach(t),ZAo=r(f8e," \u2014 "),hD=n(f8e,"A",{href:!0});var Elt=s(hD);eyo=r(Elt,"DebertaForMaskedLM"),Elt.forEach(t),oyo=r(f8e," (DeBERTa model)"),f8e.forEach(t),ryo=i(U),W1=n(U,"LI",{});var m8e=s(W1);xce=n(m8e,"STRONG",{});var Clt=s(xce);tyo=r(Clt,"deberta-v2"),Clt.forEach(t),ayo=r(m8e," \u2014 "),pD=n(m8e,"A",{href:!0});var wlt=s(pD);nyo=r(wlt,"DebertaV2ForMaskedLM"),wlt.forEach(t),syo=r(m8e," (DeBERTa-v2 model)"),m8e.forEach(t),lyo=i(U),Q1=n(U,"LI",{});var g8e=s(Q1);$ce=n(g8e,"STRONG",{});var Alt=s($ce);iyo=r(Alt,"distilbert"),Alt.forEach(t),dyo=r(g8e," \u2014 "),uD=n(g8e,"A",{href:!0});var ylt=s(uD);cyo=r(ylt,"DistilBertForMaskedLM"),ylt.forEach(t),fyo=r(g8e," (DistilBERT model)"),g8e.forEach(t),myo=i(U),H1=n(U,"LI",{});var h8e=s(H1);kce=n(h8e,"STRONG",{});var Llt=s(kce);gyo=r(Llt,"electra"),Llt.forEach(t),hyo=r(h8e," \u2014 "),_D=n(h8e,"A",{href:!0});var xlt=s(_D);pyo=r(xlt,"ElectraForMaskedLM"),xlt.forEach(t),uyo=r(h8e," (ELECTRA model)"),h8e.forEach(t),_yo=i(U),U1=n(U,"LI",{});var p8e=s(U1);Sce=n(p8e,"STRONG",{});var $lt=s(Sce);byo=r($lt,"flaubert"),$lt.forEach(t),vyo=r(p8e," \u2014 "),bD=n(p8e,"A",{href:!0});var klt=s(bD);Fyo=r(klt,"FlaubertWithLMHeadModel"),klt.forEach(t),Tyo=r(p8e," (FlauBERT model)"),p8e.forEach(t),Myo=i(U),J1=n(U,"LI",{});var u8e=s(J1);Rce=n(u8e,"STRONG",{});var Slt=s(Rce);Eyo=r(Slt,"fnet"),Slt.forEach(t),Cyo=r(u8e," \u2014 "),vD=n(u8e,"A",{href:!0});var Rlt=s(vD);wyo=r(Rlt,"FNetForMaskedLM"),Rlt.forEach(t),Ayo=r(u8e," (FNet model)"),u8e.forEach(t),yyo=i(U),Y1=n(U,"LI",{});var _8e=s(Y1);Pce=n(_8e,"STRONG",{});var Plt=s(Pce);Lyo=r(Plt,"funnel"),Plt.forEach(t),xyo=r(_8e," \u2014 "),FD=n(_8e,"A",{href:!0});var Blt=s(FD);$yo=r(Blt,"FunnelForMaskedLM"),Blt.forEach(t),kyo=r(_8e," (Funnel Transformer model)"),_8e.forEach(t),Syo=i(U),K1=n(U,"LI",{});var b8e=s(K1);Bce=n(b8e,"STRONG",{});var Ilt=s(Bce);Ryo=r(Ilt,"ibert"),Ilt.forEach(t),Pyo=r(b8e," \u2014 "),TD=n(b8e,"A",{href:!0});var Nlt=s(TD);Byo=r(Nlt,"IBertForMaskedLM"),Nlt.forEach(t),Iyo=r(b8e," (I-BERT model)"),b8e.forEach(t),Nyo=i(U),Z1=n(U,"LI",{});var v8e=s(Z1);Ice=n(v8e,"STRONG",{});var qlt=s(Ice);qyo=r(qlt,"layoutlm"),qlt.forEach(t),jyo=r(v8e," \u2014 "),MD=n(v8e,"A",{href:!0});var jlt=s(MD);Dyo=r(jlt,"LayoutLMForMaskedLM"),jlt.forEach(t),Gyo=r(v8e," (LayoutLM model)"),v8e.forEach(t),Oyo=i(U),e7=n(U,"LI",{});var F8e=s(e7);Nce=n(F8e,"STRONG",{});var Dlt=s(Nce);Vyo=r(Dlt,"longformer"),Dlt.forEach(t),Xyo=r(F8e," \u2014 "),ED=n(F8e,"A",{href:!0});var Glt=s(ED);zyo=r(Glt,"LongformerForMaskedLM"),Glt.forEach(t),Wyo=r(F8e," (Longformer model)"),F8e.forEach(t),Qyo=i(U),o7=n(U,"LI",{});var T8e=s(o7);qce=n(T8e,"STRONG",{});var Olt=s(qce);Hyo=r(Olt,"mbart"),Olt.forEach(t),Uyo=r(T8e," \u2014 "),CD=n(T8e,"A",{href:!0});var Vlt=s(CD);Jyo=r(Vlt,"MBartForConditionalGeneration"),Vlt.forEach(t),Yyo=r(T8e," (mBART model)"),T8e.forEach(t),Kyo=i(U),r7=n(U,"LI",{});var M8e=s(r7);jce=n(M8e,"STRONG",{});var Xlt=s(jce);Zyo=r(Xlt,"megatron-bert"),Xlt.forEach(t),eLo=r(M8e," \u2014 "),wD=n(M8e,"A",{href:!0});var zlt=s(wD);oLo=r(zlt,"MegatronBertForMaskedLM"),zlt.forEach(t),rLo=r(M8e," (MegatronBert model)"),M8e.forEach(t),tLo=i(U),t7=n(U,"LI",{});var E8e=s(t7);Dce=n(E8e,"STRONG",{});var Wlt=s(Dce);aLo=r(Wlt,"mobilebert"),Wlt.forEach(t),nLo=r(E8e," \u2014 "),AD=n(E8e,"A",{href:!0});var Qlt=s(AD);sLo=r(Qlt,"MobileBertForMaskedLM"),Qlt.forEach(t),lLo=r(E8e," (MobileBERT model)"),E8e.forEach(t),iLo=i(U),a7=n(U,"LI",{});var C8e=s(a7);Gce=n(C8e,"STRONG",{});var Hlt=s(Gce);dLo=r(Hlt,"mpnet"),Hlt.forEach(t),cLo=r(C8e," \u2014 "),yD=n(C8e,"A",{href:!0});var Ult=s(yD);fLo=r(Ult,"MPNetForMaskedLM"),Ult.forEach(t),mLo=r(C8e," (MPNet model)"),C8e.forEach(t),gLo=i(U),n7=n(U,"LI",{});var w8e=s(n7);Oce=n(w8e,"STRONG",{});var Jlt=s(Oce);hLo=r(Jlt,"nystromformer"),Jlt.forEach(t),pLo=r(w8e," \u2014 "),LD=n(w8e,"A",{href:!0});var Ylt=s(LD);uLo=r(Ylt,"NystromformerForMaskedLM"),Ylt.forEach(t),_Lo=r(w8e," (Nystromformer model)"),w8e.forEach(t),bLo=i(U),s7=n(U,"LI",{});var A8e=s(s7);Vce=n(A8e,"STRONG",{});var Klt=s(Vce);vLo=r(Klt,"perceiver"),Klt.forEach(t),FLo=r(A8e," \u2014 "),xD=n(A8e,"A",{href:!0});var Zlt=s(xD);TLo=r(Zlt,"PerceiverForMaskedLM"),Zlt.forEach(t),MLo=r(A8e," (Perceiver model)"),A8e.forEach(t),ELo=i(U),l7=n(U,"LI",{});var y8e=s(l7);Xce=n(y8e,"STRONG",{});var eit=s(Xce);CLo=r(eit,"qdqbert"),eit.forEach(t),wLo=r(y8e," \u2014 "),$D=n(y8e,"A",{href:!0});var oit=s($D);ALo=r(oit,"QDQBertForMaskedLM"),oit.forEach(t),yLo=r(y8e," (QDQBert model)"),y8e.forEach(t),LLo=i(U),i7=n(U,"LI",{});var L8e=s(i7);zce=n(L8e,"STRONG",{});var rit=s(zce);xLo=r(rit,"reformer"),rit.forEach(t),$Lo=r(L8e," \u2014 "),kD=n(L8e,"A",{href:!0});var tit=s(kD);kLo=r(tit,"ReformerForMaskedLM"),tit.forEach(t),SLo=r(L8e," (Reformer model)"),L8e.forEach(t),RLo=i(U),d7=n(U,"LI",{});var x8e=s(d7);Wce=n(x8e,"STRONG",{});var ait=s(Wce);PLo=r(ait,"rembert"),ait.forEach(t),BLo=r(x8e," \u2014 "),SD=n(x8e,"A",{href:!0});var nit=s(SD);ILo=r(nit,"RemBertForMaskedLM"),nit.forEach(t),NLo=r(x8e," (RemBERT model)"),x8e.forEach(t),qLo=i(U),c7=n(U,"LI",{});var $8e=s(c7);Qce=n($8e,"STRONG",{});var sit=s(Qce);jLo=r(sit,"roberta"),sit.forEach(t),DLo=r($8e," \u2014 "),RD=n($8e,"A",{href:!0});var lit=s(RD);GLo=r(lit,"RobertaForMaskedLM"),lit.forEach(t),OLo=r($8e," (RoBERTa model)"),$8e.forEach(t),VLo=i(U),f7=n(U,"LI",{});var k8e=s(f7);Hce=n(k8e,"STRONG",{});var iit=s(Hce);XLo=r(iit,"roformer"),iit.forEach(t),zLo=r(k8e," \u2014 "),PD=n(k8e,"A",{href:!0});var dit=s(PD);WLo=r(dit,"RoFormerForMaskedLM"),dit.forEach(t),QLo=r(k8e," (RoFormer model)"),k8e.forEach(t),HLo=i(U),m7=n(U,"LI",{});var S8e=s(m7);Uce=n(S8e,"STRONG",{});var cit=s(Uce);ULo=r(cit,"squeezebert"),cit.forEach(t),JLo=r(S8e," \u2014 "),BD=n(S8e,"A",{href:!0});var fit=s(BD);YLo=r(fit,"SqueezeBertForMaskedLM"),fit.forEach(t),KLo=r(S8e," (SqueezeBERT model)"),S8e.forEach(t),ZLo=i(U),g7=n(U,"LI",{});var R8e=s(g7);Jce=n(R8e,"STRONG",{});var mit=s(Jce);e8o=r(mit,"tapas"),mit.forEach(t),o8o=r(R8e," \u2014 "),ID=n(R8e,"A",{href:!0});var git=s(ID);r8o=r(git,"TapasForMaskedLM"),git.forEach(t),t8o=r(R8e," (TAPAS model)"),R8e.forEach(t),a8o=i(U),h7=n(U,"LI",{});var P8e=s(h7);Yce=n(P8e,"STRONG",{});var hit=s(Yce);n8o=r(hit,"wav2vec2"),hit.forEach(t),s8o=r(P8e," \u2014 "),Kce=n(P8e,"CODE",{});var pit=s(Kce);l8o=r(pit,"Wav2Vec2ForMaskedLM"),pit.forEach(t),i8o=r(P8e," (Wav2Vec2 model)"),P8e.forEach(t),d8o=i(U),p7=n(U,"LI",{});var B8e=s(p7);Zce=n(B8e,"STRONG",{});var uit=s(Zce);c8o=r(uit,"xlm"),uit.forEach(t),f8o=r(B8e," \u2014 "),ND=n(B8e,"A",{href:!0});var _it=s(ND);m8o=r(_it,"XLMWithLMHeadModel"),_it.forEach(t),g8o=r(B8e," (XLM model)"),B8e.forEach(t),h8o=i(U),u7=n(U,"LI",{});var I8e=s(u7);efe=n(I8e,"STRONG",{});var bit=s(efe);p8o=r(bit,"xlm-roberta"),bit.forEach(t),u8o=r(I8e," \u2014 "),qD=n(I8e,"A",{href:!0});var vit=s(qD);_8o=r(vit,"XLMRobertaForMaskedLM"),vit.forEach(t),b8o=r(I8e," (XLM-RoBERTa model)"),I8e.forEach(t),v8o=i(U),_7=n(U,"LI",{});var N8e=s(_7);ofe=n(N8e,"STRONG",{});var Fit=s(ofe);F8o=r(Fit,"xlm-roberta-xl"),Fit.forEach(t),T8o=r(N8e," \u2014 "),jD=n(N8e,"A",{href:!0});var Tit=s(jD);M8o=r(Tit,"XLMRobertaXLForMaskedLM"),Tit.forEach(t),E8o=r(N8e," (XLM-RoBERTa-XL model)"),N8e.forEach(t),C8o=i(U),b7=n(U,"LI",{});var q8e=s(b7);rfe=n(q8e,"STRONG",{});var Mit=s(rfe);w8o=r(Mit,"yoso"),Mit.forEach(t),A8o=r(q8e," \u2014 "),DD=n(q8e,"A",{href:!0});var Eit=s(DD);y8o=r(Eit,"YosoForMaskedLM"),Eit.forEach(t),L8o=r(q8e," (YOSO model)"),q8e.forEach(t),U.forEach(t),x8o=i(aa),v7=n(aa,"P",{});var j8e=s(v7);$8o=r(j8e,"The model is set in evaluation mode by default using "),tfe=n(j8e,"CODE",{});var Cit=s(tfe);k8o=r(Cit,"model.eval()"),Cit.forEach(t),S8o=r(j8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),afe=n(j8e,"CODE",{});var wit=s(afe);R8o=r(wit,"model.train()"),wit.forEach(t),j8e.forEach(t),P8o=i(aa),T(F7.$$.fragment,aa),aa.forEach(t),Xs.forEach(t),vqe=i(f),Ni=n(f,"H2",{class:!0});var EDe=s(Ni);T7=n(EDe,"A",{id:!0,class:!0,href:!0});var Ait=s(T7);nfe=n(Ait,"SPAN",{});var yit=s(nfe);T(vy.$$.fragment,yit),yit.forEach(t),Ait.forEach(t),B8o=i(EDe),sfe=n(EDe,"SPAN",{});var Lit=s(sfe);I8o=r(Lit,"AutoModelForSeq2SeqLM"),Lit.forEach(t),EDe.forEach(t),Fqe=i(f),So=n(f,"DIV",{class:!0});var zs=s(So);T(Fy.$$.fragment,zs),N8o=i(zs),qi=n(zs,"P",{});var EZ=s(qi);q8o=r(EZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),GD=n(EZ,"A",{href:!0});var xit=s(GD);j8o=r(xit,"from_pretrained()"),xit.forEach(t),D8o=r(EZ," class method or the "),OD=n(EZ,"A",{href:!0});var $it=s(OD);G8o=r($it,"from_config()"),$it.forEach(t),O8o=r(EZ,` class
method.`),EZ.forEach(t),V8o=i(zs),Ty=n(zs,"P",{});var CDe=s(Ty);X8o=r(CDe,"This class cannot be instantiated directly using "),lfe=n(CDe,"CODE",{});var kit=s(lfe);z8o=r(kit,"__init__()"),kit.forEach(t),W8o=r(CDe," (throws an error)."),CDe.forEach(t),Q8o=i(zs),lt=n(zs,"DIV",{class:!0});var jw=s(lt);T(My.$$.fragment,jw),H8o=i(jw),ife=n(jw,"P",{});var Sit=s(ife);U8o=r(Sit,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Sit.forEach(t),J8o=i(jw),ji=n(jw,"P",{});var CZ=s(ji);Y8o=r(CZ,`Note:
Loading a model from its configuration file does `),dfe=n(CZ,"STRONG",{});var Rit=s(dfe);K8o=r(Rit,"not"),Rit.forEach(t),Z8o=r(CZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),VD=n(CZ,"A",{href:!0});var Pit=s(VD);e9o=r(Pit,"from_pretrained()"),Pit.forEach(t),o9o=r(CZ," to load the model weights."),CZ.forEach(t),r9o=i(jw),T(M7.$$.fragment,jw),jw.forEach(t),t9o=i(zs),eo=n(zs,"DIV",{class:!0});var na=s(eo);T(Ey.$$.fragment,na),a9o=i(na),cfe=n(na,"P",{});var Bit=s(cfe);n9o=r(Bit,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Bit.forEach(t),s9o=i(na),Sa=n(na,"P",{});var Dw=s(Sa);l9o=r(Dw,"The model class to instantiate is selected based on the "),ffe=n(Dw,"CODE",{});var Iit=s(ffe);i9o=r(Iit,"model_type"),Iit.forEach(t),d9o=r(Dw,` property of the config object (either
passed as an argument or loaded from `),mfe=n(Dw,"CODE",{});var Nit=s(mfe);c9o=r(Nit,"pretrained_model_name_or_path"),Nit.forEach(t),f9o=r(Dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gfe=n(Dw,"CODE",{});var qit=s(gfe);m9o=r(qit,"pretrained_model_name_or_path"),qit.forEach(t),g9o=r(Dw,":"),Dw.forEach(t),h9o=i(na),ue=n(na,"UL",{});var ve=s(ue);E7=n(ve,"LI",{});var D8e=s(E7);hfe=n(D8e,"STRONG",{});var jit=s(hfe);p9o=r(jit,"bart"),jit.forEach(t),u9o=r(D8e," \u2014 "),XD=n(D8e,"A",{href:!0});var Dit=s(XD);_9o=r(Dit,"BartForConditionalGeneration"),Dit.forEach(t),b9o=r(D8e," (BART model)"),D8e.forEach(t),v9o=i(ve),C7=n(ve,"LI",{});var G8e=s(C7);pfe=n(G8e,"STRONG",{});var Git=s(pfe);F9o=r(Git,"bigbird_pegasus"),Git.forEach(t),T9o=r(G8e," \u2014 "),zD=n(G8e,"A",{href:!0});var Oit=s(zD);M9o=r(Oit,"BigBirdPegasusForConditionalGeneration"),Oit.forEach(t),E9o=r(G8e," (BigBirdPegasus model)"),G8e.forEach(t),C9o=i(ve),w7=n(ve,"LI",{});var O8e=s(w7);ufe=n(O8e,"STRONG",{});var Vit=s(ufe);w9o=r(Vit,"blenderbot"),Vit.forEach(t),A9o=r(O8e," \u2014 "),WD=n(O8e,"A",{href:!0});var Xit=s(WD);y9o=r(Xit,"BlenderbotForConditionalGeneration"),Xit.forEach(t),L9o=r(O8e," (Blenderbot model)"),O8e.forEach(t),x9o=i(ve),A7=n(ve,"LI",{});var V8e=s(A7);_fe=n(V8e,"STRONG",{});var zit=s(_fe);$9o=r(zit,"blenderbot-small"),zit.forEach(t),k9o=r(V8e," \u2014 "),QD=n(V8e,"A",{href:!0});var Wit=s(QD);S9o=r(Wit,"BlenderbotSmallForConditionalGeneration"),Wit.forEach(t),R9o=r(V8e," (BlenderbotSmall model)"),V8e.forEach(t),P9o=i(ve),y7=n(ve,"LI",{});var X8e=s(y7);bfe=n(X8e,"STRONG",{});var Qit=s(bfe);B9o=r(Qit,"encoder-decoder"),Qit.forEach(t),I9o=r(X8e," \u2014 "),HD=n(X8e,"A",{href:!0});var Hit=s(HD);N9o=r(Hit,"EncoderDecoderModel"),Hit.forEach(t),q9o=r(X8e," (Encoder decoder model)"),X8e.forEach(t),j9o=i(ve),L7=n(ve,"LI",{});var z8e=s(L7);vfe=n(z8e,"STRONG",{});var Uit=s(vfe);D9o=r(Uit,"fsmt"),Uit.forEach(t),G9o=r(z8e," \u2014 "),UD=n(z8e,"A",{href:!0});var Jit=s(UD);O9o=r(Jit,"FSMTForConditionalGeneration"),Jit.forEach(t),V9o=r(z8e," (FairSeq Machine-Translation model)"),z8e.forEach(t),X9o=i(ve),x7=n(ve,"LI",{});var W8e=s(x7);Ffe=n(W8e,"STRONG",{});var Yit=s(Ffe);z9o=r(Yit,"led"),Yit.forEach(t),W9o=r(W8e," \u2014 "),JD=n(W8e,"A",{href:!0});var Kit=s(JD);Q9o=r(Kit,"LEDForConditionalGeneration"),Kit.forEach(t),H9o=r(W8e," (LED model)"),W8e.forEach(t),U9o=i(ve),$7=n(ve,"LI",{});var Q8e=s($7);Tfe=n(Q8e,"STRONG",{});var Zit=s(Tfe);J9o=r(Zit,"m2m_100"),Zit.forEach(t),Y9o=r(Q8e," \u2014 "),YD=n(Q8e,"A",{href:!0});var edt=s(YD);K9o=r(edt,"M2M100ForConditionalGeneration"),edt.forEach(t),Z9o=r(Q8e," (M2M100 model)"),Q8e.forEach(t),exo=i(ve),k7=n(ve,"LI",{});var H8e=s(k7);Mfe=n(H8e,"STRONG",{});var odt=s(Mfe);oxo=r(odt,"marian"),odt.forEach(t),rxo=r(H8e," \u2014 "),KD=n(H8e,"A",{href:!0});var rdt=s(KD);txo=r(rdt,"MarianMTModel"),rdt.forEach(t),axo=r(H8e," (Marian model)"),H8e.forEach(t),nxo=i(ve),S7=n(ve,"LI",{});var U8e=s(S7);Efe=n(U8e,"STRONG",{});var tdt=s(Efe);sxo=r(tdt,"mbart"),tdt.forEach(t),lxo=r(U8e," \u2014 "),ZD=n(U8e,"A",{href:!0});var adt=s(ZD);ixo=r(adt,"MBartForConditionalGeneration"),adt.forEach(t),dxo=r(U8e," (mBART model)"),U8e.forEach(t),cxo=i(ve),R7=n(ve,"LI",{});var J8e=s(R7);Cfe=n(J8e,"STRONG",{});var ndt=s(Cfe);fxo=r(ndt,"mt5"),ndt.forEach(t),mxo=r(J8e," \u2014 "),eG=n(J8e,"A",{href:!0});var sdt=s(eG);gxo=r(sdt,"MT5ForConditionalGeneration"),sdt.forEach(t),hxo=r(J8e," (mT5 model)"),J8e.forEach(t),pxo=i(ve),P7=n(ve,"LI",{});var Y8e=s(P7);wfe=n(Y8e,"STRONG",{});var ldt=s(wfe);uxo=r(ldt,"pegasus"),ldt.forEach(t),_xo=r(Y8e," \u2014 "),oG=n(Y8e,"A",{href:!0});var idt=s(oG);bxo=r(idt,"PegasusForConditionalGeneration"),idt.forEach(t),vxo=r(Y8e," (Pegasus model)"),Y8e.forEach(t),Fxo=i(ve),B7=n(ve,"LI",{});var K8e=s(B7);Afe=n(K8e,"STRONG",{});var ddt=s(Afe);Txo=r(ddt,"plbart"),ddt.forEach(t),Mxo=r(K8e," \u2014 "),rG=n(K8e,"A",{href:!0});var cdt=s(rG);Exo=r(cdt,"PLBartForConditionalGeneration"),cdt.forEach(t),Cxo=r(K8e," (PLBart model)"),K8e.forEach(t),wxo=i(ve),I7=n(ve,"LI",{});var Z8e=s(I7);yfe=n(Z8e,"STRONG",{});var fdt=s(yfe);Axo=r(fdt,"prophetnet"),fdt.forEach(t),yxo=r(Z8e," \u2014 "),tG=n(Z8e,"A",{href:!0});var mdt=s(tG);Lxo=r(mdt,"ProphetNetForConditionalGeneration"),mdt.forEach(t),xxo=r(Z8e," (ProphetNet model)"),Z8e.forEach(t),$xo=i(ve),N7=n(ve,"LI",{});var e9e=s(N7);Lfe=n(e9e,"STRONG",{});var gdt=s(Lfe);kxo=r(gdt,"t5"),gdt.forEach(t),Sxo=r(e9e," \u2014 "),aG=n(e9e,"A",{href:!0});var hdt=s(aG);Rxo=r(hdt,"T5ForConditionalGeneration"),hdt.forEach(t),Pxo=r(e9e," (T5 model)"),e9e.forEach(t),Bxo=i(ve),q7=n(ve,"LI",{});var o9e=s(q7);xfe=n(o9e,"STRONG",{});var pdt=s(xfe);Ixo=r(pdt,"xlm-prophetnet"),pdt.forEach(t),Nxo=r(o9e," \u2014 "),nG=n(o9e,"A",{href:!0});var udt=s(nG);qxo=r(udt,"XLMProphetNetForConditionalGeneration"),udt.forEach(t),jxo=r(o9e," (XLMProphetNet model)"),o9e.forEach(t),ve.forEach(t),Dxo=i(na),j7=n(na,"P",{});var r9e=s(j7);Gxo=r(r9e,"The model is set in evaluation mode by default using "),$fe=n(r9e,"CODE",{});var _dt=s($fe);Oxo=r(_dt,"model.eval()"),_dt.forEach(t),Vxo=r(r9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kfe=n(r9e,"CODE",{});var bdt=s(kfe);Xxo=r(bdt,"model.train()"),bdt.forEach(t),r9e.forEach(t),zxo=i(na),T(D7.$$.fragment,na),na.forEach(t),zs.forEach(t),Tqe=i(f),Di=n(f,"H2",{class:!0});var wDe=s(Di);G7=n(wDe,"A",{id:!0,class:!0,href:!0});var vdt=s(G7);Sfe=n(vdt,"SPAN",{});var Fdt=s(Sfe);T(Cy.$$.fragment,Fdt),Fdt.forEach(t),vdt.forEach(t),Wxo=i(wDe),Rfe=n(wDe,"SPAN",{});var Tdt=s(Rfe);Qxo=r(Tdt,"AutoModelForSequenceClassification"),Tdt.forEach(t),wDe.forEach(t),Mqe=i(f),Ro=n(f,"DIV",{class:!0});var Ws=s(Ro);T(wy.$$.fragment,Ws),Hxo=i(Ws),Gi=n(Ws,"P",{});var wZ=s(Gi);Uxo=r(wZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),sG=n(wZ,"A",{href:!0});var Mdt=s(sG);Jxo=r(Mdt,"from_pretrained()"),Mdt.forEach(t),Yxo=r(wZ," class method or the "),lG=n(wZ,"A",{href:!0});var Edt=s(lG);Kxo=r(Edt,"from_config()"),Edt.forEach(t),Zxo=r(wZ,` class
method.`),wZ.forEach(t),e$o=i(Ws),Ay=n(Ws,"P",{});var ADe=s(Ay);o$o=r(ADe,"This class cannot be instantiated directly using "),Pfe=n(ADe,"CODE",{});var Cdt=s(Pfe);r$o=r(Cdt,"__init__()"),Cdt.forEach(t),t$o=r(ADe," (throws an error)."),ADe.forEach(t),a$o=i(Ws),it=n(Ws,"DIV",{class:!0});var Gw=s(it);T(yy.$$.fragment,Gw),n$o=i(Gw),Bfe=n(Gw,"P",{});var wdt=s(Bfe);s$o=r(wdt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),wdt.forEach(t),l$o=i(Gw),Oi=n(Gw,"P",{});var AZ=s(Oi);i$o=r(AZ,`Note:
Loading a model from its configuration file does `),Ife=n(AZ,"STRONG",{});var Adt=s(Ife);d$o=r(Adt,"not"),Adt.forEach(t),c$o=r(AZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),iG=n(AZ,"A",{href:!0});var ydt=s(iG);f$o=r(ydt,"from_pretrained()"),ydt.forEach(t),m$o=r(AZ," to load the model weights."),AZ.forEach(t),g$o=i(Gw),T(O7.$$.fragment,Gw),Gw.forEach(t),h$o=i(Ws),oo=n(Ws,"DIV",{class:!0});var sa=s(oo);T(Ly.$$.fragment,sa),p$o=i(sa),Nfe=n(sa,"P",{});var Ldt=s(Nfe);u$o=r(Ldt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Ldt.forEach(t),_$o=i(sa),Ra=n(sa,"P",{});var Ow=s(Ra);b$o=r(Ow,"The model class to instantiate is selected based on the "),qfe=n(Ow,"CODE",{});var xdt=s(qfe);v$o=r(xdt,"model_type"),xdt.forEach(t),F$o=r(Ow,` property of the config object (either
passed as an argument or loaded from `),jfe=n(Ow,"CODE",{});var $dt=s(jfe);T$o=r($dt,"pretrained_model_name_or_path"),$dt.forEach(t),M$o=r(Ow,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dfe=n(Ow,"CODE",{});var kdt=s(Dfe);E$o=r(kdt,"pretrained_model_name_or_path"),kdt.forEach(t),C$o=r(Ow,":"),Ow.forEach(t),w$o=i(sa),N=n(sa,"UL",{});var j=s(N);V7=n(j,"LI",{});var t9e=s(V7);Gfe=n(t9e,"STRONG",{});var Sdt=s(Gfe);A$o=r(Sdt,"albert"),Sdt.forEach(t),y$o=r(t9e," \u2014 "),dG=n(t9e,"A",{href:!0});var Rdt=s(dG);L$o=r(Rdt,"AlbertForSequenceClassification"),Rdt.forEach(t),x$o=r(t9e," (ALBERT model)"),t9e.forEach(t),$$o=i(j),X7=n(j,"LI",{});var a9e=s(X7);Ofe=n(a9e,"STRONG",{});var Pdt=s(Ofe);k$o=r(Pdt,"bart"),Pdt.forEach(t),S$o=r(a9e," \u2014 "),cG=n(a9e,"A",{href:!0});var Bdt=s(cG);R$o=r(Bdt,"BartForSequenceClassification"),Bdt.forEach(t),P$o=r(a9e," (BART model)"),a9e.forEach(t),B$o=i(j),z7=n(j,"LI",{});var n9e=s(z7);Vfe=n(n9e,"STRONG",{});var Idt=s(Vfe);I$o=r(Idt,"bert"),Idt.forEach(t),N$o=r(n9e," \u2014 "),fG=n(n9e,"A",{href:!0});var Ndt=s(fG);q$o=r(Ndt,"BertForSequenceClassification"),Ndt.forEach(t),j$o=r(n9e," (BERT model)"),n9e.forEach(t),D$o=i(j),W7=n(j,"LI",{});var s9e=s(W7);Xfe=n(s9e,"STRONG",{});var qdt=s(Xfe);G$o=r(qdt,"big_bird"),qdt.forEach(t),O$o=r(s9e," \u2014 "),mG=n(s9e,"A",{href:!0});var jdt=s(mG);V$o=r(jdt,"BigBirdForSequenceClassification"),jdt.forEach(t),X$o=r(s9e," (BigBird model)"),s9e.forEach(t),z$o=i(j),Q7=n(j,"LI",{});var l9e=s(Q7);zfe=n(l9e,"STRONG",{});var Ddt=s(zfe);W$o=r(Ddt,"bigbird_pegasus"),Ddt.forEach(t),Q$o=r(l9e," \u2014 "),gG=n(l9e,"A",{href:!0});var Gdt=s(gG);H$o=r(Gdt,"BigBirdPegasusForSequenceClassification"),Gdt.forEach(t),U$o=r(l9e," (BigBirdPegasus model)"),l9e.forEach(t),J$o=i(j),H7=n(j,"LI",{});var i9e=s(H7);Wfe=n(i9e,"STRONG",{});var Odt=s(Wfe);Y$o=r(Odt,"camembert"),Odt.forEach(t),K$o=r(i9e," \u2014 "),hG=n(i9e,"A",{href:!0});var Vdt=s(hG);Z$o=r(Vdt,"CamembertForSequenceClassification"),Vdt.forEach(t),eko=r(i9e," (CamemBERT model)"),i9e.forEach(t),oko=i(j),U7=n(j,"LI",{});var d9e=s(U7);Qfe=n(d9e,"STRONG",{});var Xdt=s(Qfe);rko=r(Xdt,"canine"),Xdt.forEach(t),tko=r(d9e," \u2014 "),pG=n(d9e,"A",{href:!0});var zdt=s(pG);ako=r(zdt,"CanineForSequenceClassification"),zdt.forEach(t),nko=r(d9e," (Canine model)"),d9e.forEach(t),sko=i(j),J7=n(j,"LI",{});var c9e=s(J7);Hfe=n(c9e,"STRONG",{});var Wdt=s(Hfe);lko=r(Wdt,"convbert"),Wdt.forEach(t),iko=r(c9e," \u2014 "),uG=n(c9e,"A",{href:!0});var Qdt=s(uG);dko=r(Qdt,"ConvBertForSequenceClassification"),Qdt.forEach(t),cko=r(c9e," (ConvBERT model)"),c9e.forEach(t),fko=i(j),Y7=n(j,"LI",{});var f9e=s(Y7);Ufe=n(f9e,"STRONG",{});var Hdt=s(Ufe);mko=r(Hdt,"ctrl"),Hdt.forEach(t),gko=r(f9e," \u2014 "),_G=n(f9e,"A",{href:!0});var Udt=s(_G);hko=r(Udt,"CTRLForSequenceClassification"),Udt.forEach(t),pko=r(f9e," (CTRL model)"),f9e.forEach(t),uko=i(j),K7=n(j,"LI",{});var m9e=s(K7);Jfe=n(m9e,"STRONG",{});var Jdt=s(Jfe);_ko=r(Jdt,"data2vec-text"),Jdt.forEach(t),bko=r(m9e," \u2014 "),bG=n(m9e,"A",{href:!0});var Ydt=s(bG);vko=r(Ydt,"Data2VecTextForSequenceClassification"),Ydt.forEach(t),Fko=r(m9e," (Data2VecText model)"),m9e.forEach(t),Tko=i(j),Z7=n(j,"LI",{});var g9e=s(Z7);Yfe=n(g9e,"STRONG",{});var Kdt=s(Yfe);Mko=r(Kdt,"deberta"),Kdt.forEach(t),Eko=r(g9e," \u2014 "),vG=n(g9e,"A",{href:!0});var Zdt=s(vG);Cko=r(Zdt,"DebertaForSequenceClassification"),Zdt.forEach(t),wko=r(g9e," (DeBERTa model)"),g9e.forEach(t),Ako=i(j),eb=n(j,"LI",{});var h9e=s(eb);Kfe=n(h9e,"STRONG",{});var ect=s(Kfe);yko=r(ect,"deberta-v2"),ect.forEach(t),Lko=r(h9e," \u2014 "),FG=n(h9e,"A",{href:!0});var oct=s(FG);xko=r(oct,"DebertaV2ForSequenceClassification"),oct.forEach(t),$ko=r(h9e," (DeBERTa-v2 model)"),h9e.forEach(t),kko=i(j),ob=n(j,"LI",{});var p9e=s(ob);Zfe=n(p9e,"STRONG",{});var rct=s(Zfe);Sko=r(rct,"distilbert"),rct.forEach(t),Rko=r(p9e," \u2014 "),TG=n(p9e,"A",{href:!0});var tct=s(TG);Pko=r(tct,"DistilBertForSequenceClassification"),tct.forEach(t),Bko=r(p9e," (DistilBERT model)"),p9e.forEach(t),Iko=i(j),rb=n(j,"LI",{});var u9e=s(rb);eme=n(u9e,"STRONG",{});var act=s(eme);Nko=r(act,"electra"),act.forEach(t),qko=r(u9e," \u2014 "),MG=n(u9e,"A",{href:!0});var nct=s(MG);jko=r(nct,"ElectraForSequenceClassification"),nct.forEach(t),Dko=r(u9e," (ELECTRA model)"),u9e.forEach(t),Gko=i(j),tb=n(j,"LI",{});var _9e=s(tb);ome=n(_9e,"STRONG",{});var sct=s(ome);Oko=r(sct,"flaubert"),sct.forEach(t),Vko=r(_9e," \u2014 "),EG=n(_9e,"A",{href:!0});var lct=s(EG);Xko=r(lct,"FlaubertForSequenceClassification"),lct.forEach(t),zko=r(_9e," (FlauBERT model)"),_9e.forEach(t),Wko=i(j),ab=n(j,"LI",{});var b9e=s(ab);rme=n(b9e,"STRONG",{});var ict=s(rme);Qko=r(ict,"fnet"),ict.forEach(t),Hko=r(b9e," \u2014 "),CG=n(b9e,"A",{href:!0});var dct=s(CG);Uko=r(dct,"FNetForSequenceClassification"),dct.forEach(t),Jko=r(b9e," (FNet model)"),b9e.forEach(t),Yko=i(j),nb=n(j,"LI",{});var v9e=s(nb);tme=n(v9e,"STRONG",{});var cct=s(tme);Kko=r(cct,"funnel"),cct.forEach(t),Zko=r(v9e," \u2014 "),wG=n(v9e,"A",{href:!0});var fct=s(wG);eSo=r(fct,"FunnelForSequenceClassification"),fct.forEach(t),oSo=r(v9e," (Funnel Transformer model)"),v9e.forEach(t),rSo=i(j),sb=n(j,"LI",{});var F9e=s(sb);ame=n(F9e,"STRONG",{});var mct=s(ame);tSo=r(mct,"gpt2"),mct.forEach(t),aSo=r(F9e," \u2014 "),AG=n(F9e,"A",{href:!0});var gct=s(AG);nSo=r(gct,"GPT2ForSequenceClassification"),gct.forEach(t),sSo=r(F9e," (OpenAI GPT-2 model)"),F9e.forEach(t),lSo=i(j),lb=n(j,"LI",{});var T9e=s(lb);nme=n(T9e,"STRONG",{});var hct=s(nme);iSo=r(hct,"gpt_neo"),hct.forEach(t),dSo=r(T9e," \u2014 "),yG=n(T9e,"A",{href:!0});var pct=s(yG);cSo=r(pct,"GPTNeoForSequenceClassification"),pct.forEach(t),fSo=r(T9e," (GPT Neo model)"),T9e.forEach(t),mSo=i(j),ib=n(j,"LI",{});var M9e=s(ib);sme=n(M9e,"STRONG",{});var uct=s(sme);gSo=r(uct,"gptj"),uct.forEach(t),hSo=r(M9e," \u2014 "),LG=n(M9e,"A",{href:!0});var _ct=s(LG);pSo=r(_ct,"GPTJForSequenceClassification"),_ct.forEach(t),uSo=r(M9e," (GPT-J model)"),M9e.forEach(t),_So=i(j),db=n(j,"LI",{});var E9e=s(db);lme=n(E9e,"STRONG",{});var bct=s(lme);bSo=r(bct,"ibert"),bct.forEach(t),vSo=r(E9e," \u2014 "),xG=n(E9e,"A",{href:!0});var vct=s(xG);FSo=r(vct,"IBertForSequenceClassification"),vct.forEach(t),TSo=r(E9e," (I-BERT model)"),E9e.forEach(t),MSo=i(j),cb=n(j,"LI",{});var C9e=s(cb);ime=n(C9e,"STRONG",{});var Fct=s(ime);ESo=r(Fct,"layoutlm"),Fct.forEach(t),CSo=r(C9e," \u2014 "),$G=n(C9e,"A",{href:!0});var Tct=s($G);wSo=r(Tct,"LayoutLMForSequenceClassification"),Tct.forEach(t),ASo=r(C9e," (LayoutLM model)"),C9e.forEach(t),ySo=i(j),fb=n(j,"LI",{});var w9e=s(fb);dme=n(w9e,"STRONG",{});var Mct=s(dme);LSo=r(Mct,"layoutlmv2"),Mct.forEach(t),xSo=r(w9e," \u2014 "),kG=n(w9e,"A",{href:!0});var Ect=s(kG);$So=r(Ect,"LayoutLMv2ForSequenceClassification"),Ect.forEach(t),kSo=r(w9e," (LayoutLMv2 model)"),w9e.forEach(t),SSo=i(j),mb=n(j,"LI",{});var A9e=s(mb);cme=n(A9e,"STRONG",{});var Cct=s(cme);RSo=r(Cct,"layoutlmv3"),Cct.forEach(t),PSo=r(A9e," \u2014 "),SG=n(A9e,"A",{href:!0});var wct=s(SG);BSo=r(wct,"LayoutLMv3ForSequenceClassification"),wct.forEach(t),ISo=r(A9e," (LayoutLMv3 model)"),A9e.forEach(t),NSo=i(j),gb=n(j,"LI",{});var y9e=s(gb);fme=n(y9e,"STRONG",{});var Act=s(fme);qSo=r(Act,"led"),Act.forEach(t),jSo=r(y9e," \u2014 "),RG=n(y9e,"A",{href:!0});var yct=s(RG);DSo=r(yct,"LEDForSequenceClassification"),yct.forEach(t),GSo=r(y9e," (LED model)"),y9e.forEach(t),OSo=i(j),hb=n(j,"LI",{});var L9e=s(hb);mme=n(L9e,"STRONG",{});var Lct=s(mme);VSo=r(Lct,"longformer"),Lct.forEach(t),XSo=r(L9e," \u2014 "),PG=n(L9e,"A",{href:!0});var xct=s(PG);zSo=r(xct,"LongformerForSequenceClassification"),xct.forEach(t),WSo=r(L9e," (Longformer model)"),L9e.forEach(t),QSo=i(j),pb=n(j,"LI",{});var x9e=s(pb);gme=n(x9e,"STRONG",{});var $ct=s(gme);HSo=r($ct,"mbart"),$ct.forEach(t),USo=r(x9e," \u2014 "),BG=n(x9e,"A",{href:!0});var kct=s(BG);JSo=r(kct,"MBartForSequenceClassification"),kct.forEach(t),YSo=r(x9e," (mBART model)"),x9e.forEach(t),KSo=i(j),ub=n(j,"LI",{});var $9e=s(ub);hme=n($9e,"STRONG",{});var Sct=s(hme);ZSo=r(Sct,"megatron-bert"),Sct.forEach(t),eRo=r($9e," \u2014 "),IG=n($9e,"A",{href:!0});var Rct=s(IG);oRo=r(Rct,"MegatronBertForSequenceClassification"),Rct.forEach(t),rRo=r($9e," (MegatronBert model)"),$9e.forEach(t),tRo=i(j),_b=n(j,"LI",{});var k9e=s(_b);pme=n(k9e,"STRONG",{});var Pct=s(pme);aRo=r(Pct,"mobilebert"),Pct.forEach(t),nRo=r(k9e," \u2014 "),NG=n(k9e,"A",{href:!0});var Bct=s(NG);sRo=r(Bct,"MobileBertForSequenceClassification"),Bct.forEach(t),lRo=r(k9e," (MobileBERT model)"),k9e.forEach(t),iRo=i(j),bb=n(j,"LI",{});var S9e=s(bb);ume=n(S9e,"STRONG",{});var Ict=s(ume);dRo=r(Ict,"mpnet"),Ict.forEach(t),cRo=r(S9e," \u2014 "),qG=n(S9e,"A",{href:!0});var Nct=s(qG);fRo=r(Nct,"MPNetForSequenceClassification"),Nct.forEach(t),mRo=r(S9e," (MPNet model)"),S9e.forEach(t),gRo=i(j),vb=n(j,"LI",{});var R9e=s(vb);_me=n(R9e,"STRONG",{});var qct=s(_me);hRo=r(qct,"nystromformer"),qct.forEach(t),pRo=r(R9e," \u2014 "),jG=n(R9e,"A",{href:!0});var jct=s(jG);uRo=r(jct,"NystromformerForSequenceClassification"),jct.forEach(t),_Ro=r(R9e," (Nystromformer model)"),R9e.forEach(t),bRo=i(j),Fb=n(j,"LI",{});var P9e=s(Fb);bme=n(P9e,"STRONG",{});var Dct=s(bme);vRo=r(Dct,"openai-gpt"),Dct.forEach(t),FRo=r(P9e," \u2014 "),DG=n(P9e,"A",{href:!0});var Gct=s(DG);TRo=r(Gct,"OpenAIGPTForSequenceClassification"),Gct.forEach(t),MRo=r(P9e," (OpenAI GPT model)"),P9e.forEach(t),ERo=i(j),Tb=n(j,"LI",{});var B9e=s(Tb);vme=n(B9e,"STRONG",{});var Oct=s(vme);CRo=r(Oct,"perceiver"),Oct.forEach(t),wRo=r(B9e," \u2014 "),GG=n(B9e,"A",{href:!0});var Vct=s(GG);ARo=r(Vct,"PerceiverForSequenceClassification"),Vct.forEach(t),yRo=r(B9e," (Perceiver model)"),B9e.forEach(t),LRo=i(j),Mb=n(j,"LI",{});var I9e=s(Mb);Fme=n(I9e,"STRONG",{});var Xct=s(Fme);xRo=r(Xct,"plbart"),Xct.forEach(t),$Ro=r(I9e," \u2014 "),OG=n(I9e,"A",{href:!0});var zct=s(OG);kRo=r(zct,"PLBartForSequenceClassification"),zct.forEach(t),SRo=r(I9e," (PLBart model)"),I9e.forEach(t),RRo=i(j),Eb=n(j,"LI",{});var N9e=s(Eb);Tme=n(N9e,"STRONG",{});var Wct=s(Tme);PRo=r(Wct,"qdqbert"),Wct.forEach(t),BRo=r(N9e," \u2014 "),VG=n(N9e,"A",{href:!0});var Qct=s(VG);IRo=r(Qct,"QDQBertForSequenceClassification"),Qct.forEach(t),NRo=r(N9e," (QDQBert model)"),N9e.forEach(t),qRo=i(j),Cb=n(j,"LI",{});var q9e=s(Cb);Mme=n(q9e,"STRONG",{});var Hct=s(Mme);jRo=r(Hct,"reformer"),Hct.forEach(t),DRo=r(q9e," \u2014 "),XG=n(q9e,"A",{href:!0});var Uct=s(XG);GRo=r(Uct,"ReformerForSequenceClassification"),Uct.forEach(t),ORo=r(q9e," (Reformer model)"),q9e.forEach(t),VRo=i(j),wb=n(j,"LI",{});var j9e=s(wb);Eme=n(j9e,"STRONG",{});var Jct=s(Eme);XRo=r(Jct,"rembert"),Jct.forEach(t),zRo=r(j9e," \u2014 "),zG=n(j9e,"A",{href:!0});var Yct=s(zG);WRo=r(Yct,"RemBertForSequenceClassification"),Yct.forEach(t),QRo=r(j9e," (RemBERT model)"),j9e.forEach(t),HRo=i(j),Ab=n(j,"LI",{});var D9e=s(Ab);Cme=n(D9e,"STRONG",{});var Kct=s(Cme);URo=r(Kct,"roberta"),Kct.forEach(t),JRo=r(D9e," \u2014 "),WG=n(D9e,"A",{href:!0});var Zct=s(WG);YRo=r(Zct,"RobertaForSequenceClassification"),Zct.forEach(t),KRo=r(D9e," (RoBERTa model)"),D9e.forEach(t),ZRo=i(j),yb=n(j,"LI",{});var G9e=s(yb);wme=n(G9e,"STRONG",{});var eft=s(wme);ePo=r(eft,"roformer"),eft.forEach(t),oPo=r(G9e," \u2014 "),QG=n(G9e,"A",{href:!0});var oft=s(QG);rPo=r(oft,"RoFormerForSequenceClassification"),oft.forEach(t),tPo=r(G9e," (RoFormer model)"),G9e.forEach(t),aPo=i(j),Lb=n(j,"LI",{});var O9e=s(Lb);Ame=n(O9e,"STRONG",{});var rft=s(Ame);nPo=r(rft,"squeezebert"),rft.forEach(t),sPo=r(O9e," \u2014 "),HG=n(O9e,"A",{href:!0});var tft=s(HG);lPo=r(tft,"SqueezeBertForSequenceClassification"),tft.forEach(t),iPo=r(O9e," (SqueezeBERT model)"),O9e.forEach(t),dPo=i(j),xb=n(j,"LI",{});var V9e=s(xb);yme=n(V9e,"STRONG",{});var aft=s(yme);cPo=r(aft,"tapas"),aft.forEach(t),fPo=r(V9e," \u2014 "),UG=n(V9e,"A",{href:!0});var nft=s(UG);mPo=r(nft,"TapasForSequenceClassification"),nft.forEach(t),gPo=r(V9e," (TAPAS model)"),V9e.forEach(t),hPo=i(j),$b=n(j,"LI",{});var X9e=s($b);Lme=n(X9e,"STRONG",{});var sft=s(Lme);pPo=r(sft,"transfo-xl"),sft.forEach(t),uPo=r(X9e," \u2014 "),JG=n(X9e,"A",{href:!0});var lft=s(JG);_Po=r(lft,"TransfoXLForSequenceClassification"),lft.forEach(t),bPo=r(X9e," (Transformer-XL model)"),X9e.forEach(t),vPo=i(j),kb=n(j,"LI",{});var z9e=s(kb);xme=n(z9e,"STRONG",{});var ift=s(xme);FPo=r(ift,"xlm"),ift.forEach(t),TPo=r(z9e," \u2014 "),YG=n(z9e,"A",{href:!0});var dft=s(YG);MPo=r(dft,"XLMForSequenceClassification"),dft.forEach(t),EPo=r(z9e," (XLM model)"),z9e.forEach(t),CPo=i(j),Sb=n(j,"LI",{});var W9e=s(Sb);$me=n(W9e,"STRONG",{});var cft=s($me);wPo=r(cft,"xlm-roberta"),cft.forEach(t),APo=r(W9e," \u2014 "),KG=n(W9e,"A",{href:!0});var fft=s(KG);yPo=r(fft,"XLMRobertaForSequenceClassification"),fft.forEach(t),LPo=r(W9e," (XLM-RoBERTa model)"),W9e.forEach(t),xPo=i(j),Rb=n(j,"LI",{});var Q9e=s(Rb);kme=n(Q9e,"STRONG",{});var mft=s(kme);$Po=r(mft,"xlm-roberta-xl"),mft.forEach(t),kPo=r(Q9e," \u2014 "),ZG=n(Q9e,"A",{href:!0});var gft=s(ZG);SPo=r(gft,"XLMRobertaXLForSequenceClassification"),gft.forEach(t),RPo=r(Q9e," (XLM-RoBERTa-XL model)"),Q9e.forEach(t),PPo=i(j),Pb=n(j,"LI",{});var H9e=s(Pb);Sme=n(H9e,"STRONG",{});var hft=s(Sme);BPo=r(hft,"xlnet"),hft.forEach(t),IPo=r(H9e," \u2014 "),eO=n(H9e,"A",{href:!0});var pft=s(eO);NPo=r(pft,"XLNetForSequenceClassification"),pft.forEach(t),qPo=r(H9e," (XLNet model)"),H9e.forEach(t),jPo=i(j),Bb=n(j,"LI",{});var U9e=s(Bb);Rme=n(U9e,"STRONG",{});var uft=s(Rme);DPo=r(uft,"yoso"),uft.forEach(t),GPo=r(U9e," \u2014 "),oO=n(U9e,"A",{href:!0});var _ft=s(oO);OPo=r(_ft,"YosoForSequenceClassification"),_ft.forEach(t),VPo=r(U9e," (YOSO model)"),U9e.forEach(t),j.forEach(t),XPo=i(sa),Ib=n(sa,"P",{});var J9e=s(Ib);zPo=r(J9e,"The model is set in evaluation mode by default using "),Pme=n(J9e,"CODE",{});var bft=s(Pme);WPo=r(bft,"model.eval()"),bft.forEach(t),QPo=r(J9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bme=n(J9e,"CODE",{});var vft=s(Bme);HPo=r(vft,"model.train()"),vft.forEach(t),J9e.forEach(t),UPo=i(sa),T(Nb.$$.fragment,sa),sa.forEach(t),Ws.forEach(t),Eqe=i(f),Vi=n(f,"H2",{class:!0});var yDe=s(Vi);qb=n(yDe,"A",{id:!0,class:!0,href:!0});var Fft=s(qb);Ime=n(Fft,"SPAN",{});var Tft=s(Ime);T(xy.$$.fragment,Tft),Tft.forEach(t),Fft.forEach(t),JPo=i(yDe),Nme=n(yDe,"SPAN",{});var Mft=s(Nme);YPo=r(Mft,"AutoModelForMultipleChoice"),Mft.forEach(t),yDe.forEach(t),Cqe=i(f),Po=n(f,"DIV",{class:!0});var Qs=s(Po);T($y.$$.fragment,Qs),KPo=i(Qs),Xi=n(Qs,"P",{});var yZ=s(Xi);ZPo=r(yZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),rO=n(yZ,"A",{href:!0});var Eft=s(rO);eBo=r(Eft,"from_pretrained()"),Eft.forEach(t),oBo=r(yZ," class method or the "),tO=n(yZ,"A",{href:!0});var Cft=s(tO);rBo=r(Cft,"from_config()"),Cft.forEach(t),tBo=r(yZ,` class
method.`),yZ.forEach(t),aBo=i(Qs),ky=n(Qs,"P",{});var LDe=s(ky);nBo=r(LDe,"This class cannot be instantiated directly using "),qme=n(LDe,"CODE",{});var wft=s(qme);sBo=r(wft,"__init__()"),wft.forEach(t),lBo=r(LDe," (throws an error)."),LDe.forEach(t),iBo=i(Qs),dt=n(Qs,"DIV",{class:!0});var Vw=s(dt);T(Sy.$$.fragment,Vw),dBo=i(Vw),jme=n(Vw,"P",{});var Aft=s(jme);cBo=r(Aft,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Aft.forEach(t),fBo=i(Vw),zi=n(Vw,"P",{});var LZ=s(zi);mBo=r(LZ,`Note:
Loading a model from its configuration file does `),Dme=n(LZ,"STRONG",{});var yft=s(Dme);gBo=r(yft,"not"),yft.forEach(t),hBo=r(LZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),aO=n(LZ,"A",{href:!0});var Lft=s(aO);pBo=r(Lft,"from_pretrained()"),Lft.forEach(t),uBo=r(LZ," to load the model weights."),LZ.forEach(t),_Bo=i(Vw),T(jb.$$.fragment,Vw),Vw.forEach(t),bBo=i(Qs),ro=n(Qs,"DIV",{class:!0});var la=s(ro);T(Ry.$$.fragment,la),vBo=i(la),Gme=n(la,"P",{});var xft=s(Gme);FBo=r(xft,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),xft.forEach(t),TBo=i(la),Pa=n(la,"P",{});var Xw=s(Pa);MBo=r(Xw,"The model class to instantiate is selected based on the "),Ome=n(Xw,"CODE",{});var $ft=s(Ome);EBo=r($ft,"model_type"),$ft.forEach(t),CBo=r(Xw,` property of the config object (either
passed as an argument or loaded from `),Vme=n(Xw,"CODE",{});var kft=s(Vme);wBo=r(kft,"pretrained_model_name_or_path"),kft.forEach(t),ABo=r(Xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xme=n(Xw,"CODE",{});var Sft=s(Xme);yBo=r(Sft,"pretrained_model_name_or_path"),Sft.forEach(t),LBo=r(Xw,":"),Xw.forEach(t),xBo=i(la),K=n(la,"UL",{});var ee=s(K);Db=n(ee,"LI",{});var Y9e=s(Db);zme=n(Y9e,"STRONG",{});var Rft=s(zme);$Bo=r(Rft,"albert"),Rft.forEach(t),kBo=r(Y9e," \u2014 "),nO=n(Y9e,"A",{href:!0});var Pft=s(nO);SBo=r(Pft,"AlbertForMultipleChoice"),Pft.forEach(t),RBo=r(Y9e," (ALBERT model)"),Y9e.forEach(t),PBo=i(ee),Gb=n(ee,"LI",{});var K9e=s(Gb);Wme=n(K9e,"STRONG",{});var Bft=s(Wme);BBo=r(Bft,"bert"),Bft.forEach(t),IBo=r(K9e," \u2014 "),sO=n(K9e,"A",{href:!0});var Ift=s(sO);NBo=r(Ift,"BertForMultipleChoice"),Ift.forEach(t),qBo=r(K9e," (BERT model)"),K9e.forEach(t),jBo=i(ee),Ob=n(ee,"LI",{});var Z9e=s(Ob);Qme=n(Z9e,"STRONG",{});var Nft=s(Qme);DBo=r(Nft,"big_bird"),Nft.forEach(t),GBo=r(Z9e," \u2014 "),lO=n(Z9e,"A",{href:!0});var qft=s(lO);OBo=r(qft,"BigBirdForMultipleChoice"),qft.forEach(t),VBo=r(Z9e," (BigBird model)"),Z9e.forEach(t),XBo=i(ee),Vb=n(ee,"LI",{});var exe=s(Vb);Hme=n(exe,"STRONG",{});var jft=s(Hme);zBo=r(jft,"camembert"),jft.forEach(t),WBo=r(exe," \u2014 "),iO=n(exe,"A",{href:!0});var Dft=s(iO);QBo=r(Dft,"CamembertForMultipleChoice"),Dft.forEach(t),HBo=r(exe," (CamemBERT model)"),exe.forEach(t),UBo=i(ee),Xb=n(ee,"LI",{});var oxe=s(Xb);Ume=n(oxe,"STRONG",{});var Gft=s(Ume);JBo=r(Gft,"canine"),Gft.forEach(t),YBo=r(oxe," \u2014 "),dO=n(oxe,"A",{href:!0});var Oft=s(dO);KBo=r(Oft,"CanineForMultipleChoice"),Oft.forEach(t),ZBo=r(oxe," (Canine model)"),oxe.forEach(t),eIo=i(ee),zb=n(ee,"LI",{});var rxe=s(zb);Jme=n(rxe,"STRONG",{});var Vft=s(Jme);oIo=r(Vft,"convbert"),Vft.forEach(t),rIo=r(rxe," \u2014 "),cO=n(rxe,"A",{href:!0});var Xft=s(cO);tIo=r(Xft,"ConvBertForMultipleChoice"),Xft.forEach(t),aIo=r(rxe," (ConvBERT model)"),rxe.forEach(t),nIo=i(ee),Wb=n(ee,"LI",{});var txe=s(Wb);Yme=n(txe,"STRONG",{});var zft=s(Yme);sIo=r(zft,"data2vec-text"),zft.forEach(t),lIo=r(txe," \u2014 "),fO=n(txe,"A",{href:!0});var Wft=s(fO);iIo=r(Wft,"Data2VecTextForMultipleChoice"),Wft.forEach(t),dIo=r(txe," (Data2VecText model)"),txe.forEach(t),cIo=i(ee),Qb=n(ee,"LI",{});var axe=s(Qb);Kme=n(axe,"STRONG",{});var Qft=s(Kme);fIo=r(Qft,"deberta-v2"),Qft.forEach(t),mIo=r(axe," \u2014 "),mO=n(axe,"A",{href:!0});var Hft=s(mO);gIo=r(Hft,"DebertaV2ForMultipleChoice"),Hft.forEach(t),hIo=r(axe," (DeBERTa-v2 model)"),axe.forEach(t),pIo=i(ee),Hb=n(ee,"LI",{});var nxe=s(Hb);Zme=n(nxe,"STRONG",{});var Uft=s(Zme);uIo=r(Uft,"distilbert"),Uft.forEach(t),_Io=r(nxe," \u2014 "),gO=n(nxe,"A",{href:!0});var Jft=s(gO);bIo=r(Jft,"DistilBertForMultipleChoice"),Jft.forEach(t),vIo=r(nxe," (DistilBERT model)"),nxe.forEach(t),FIo=i(ee),Ub=n(ee,"LI",{});var sxe=s(Ub);ege=n(sxe,"STRONG",{});var Yft=s(ege);TIo=r(Yft,"electra"),Yft.forEach(t),MIo=r(sxe," \u2014 "),hO=n(sxe,"A",{href:!0});var Kft=s(hO);EIo=r(Kft,"ElectraForMultipleChoice"),Kft.forEach(t),CIo=r(sxe," (ELECTRA model)"),sxe.forEach(t),wIo=i(ee),Jb=n(ee,"LI",{});var lxe=s(Jb);oge=n(lxe,"STRONG",{});var Zft=s(oge);AIo=r(Zft,"flaubert"),Zft.forEach(t),yIo=r(lxe," \u2014 "),pO=n(lxe,"A",{href:!0});var emt=s(pO);LIo=r(emt,"FlaubertForMultipleChoice"),emt.forEach(t),xIo=r(lxe," (FlauBERT model)"),lxe.forEach(t),$Io=i(ee),Yb=n(ee,"LI",{});var ixe=s(Yb);rge=n(ixe,"STRONG",{});var omt=s(rge);kIo=r(omt,"fnet"),omt.forEach(t),SIo=r(ixe," \u2014 "),uO=n(ixe,"A",{href:!0});var rmt=s(uO);RIo=r(rmt,"FNetForMultipleChoice"),rmt.forEach(t),PIo=r(ixe," (FNet model)"),ixe.forEach(t),BIo=i(ee),Kb=n(ee,"LI",{});var dxe=s(Kb);tge=n(dxe,"STRONG",{});var tmt=s(tge);IIo=r(tmt,"funnel"),tmt.forEach(t),NIo=r(dxe," \u2014 "),_O=n(dxe,"A",{href:!0});var amt=s(_O);qIo=r(amt,"FunnelForMultipleChoice"),amt.forEach(t),jIo=r(dxe," (Funnel Transformer model)"),dxe.forEach(t),DIo=i(ee),Zb=n(ee,"LI",{});var cxe=s(Zb);age=n(cxe,"STRONG",{});var nmt=s(age);GIo=r(nmt,"ibert"),nmt.forEach(t),OIo=r(cxe," \u2014 "),bO=n(cxe,"A",{href:!0});var smt=s(bO);VIo=r(smt,"IBertForMultipleChoice"),smt.forEach(t),XIo=r(cxe," (I-BERT model)"),cxe.forEach(t),zIo=i(ee),e2=n(ee,"LI",{});var fxe=s(e2);nge=n(fxe,"STRONG",{});var lmt=s(nge);WIo=r(lmt,"longformer"),lmt.forEach(t),QIo=r(fxe," \u2014 "),vO=n(fxe,"A",{href:!0});var imt=s(vO);HIo=r(imt,"LongformerForMultipleChoice"),imt.forEach(t),UIo=r(fxe," (Longformer model)"),fxe.forEach(t),JIo=i(ee),o2=n(ee,"LI",{});var mxe=s(o2);sge=n(mxe,"STRONG",{});var dmt=s(sge);YIo=r(dmt,"megatron-bert"),dmt.forEach(t),KIo=r(mxe," \u2014 "),FO=n(mxe,"A",{href:!0});var cmt=s(FO);ZIo=r(cmt,"MegatronBertForMultipleChoice"),cmt.forEach(t),eNo=r(mxe," (MegatronBert model)"),mxe.forEach(t),oNo=i(ee),r2=n(ee,"LI",{});var gxe=s(r2);lge=n(gxe,"STRONG",{});var fmt=s(lge);rNo=r(fmt,"mobilebert"),fmt.forEach(t),tNo=r(gxe," \u2014 "),TO=n(gxe,"A",{href:!0});var mmt=s(TO);aNo=r(mmt,"MobileBertForMultipleChoice"),mmt.forEach(t),nNo=r(gxe," (MobileBERT model)"),gxe.forEach(t),sNo=i(ee),t2=n(ee,"LI",{});var hxe=s(t2);ige=n(hxe,"STRONG",{});var gmt=s(ige);lNo=r(gmt,"mpnet"),gmt.forEach(t),iNo=r(hxe," \u2014 "),MO=n(hxe,"A",{href:!0});var hmt=s(MO);dNo=r(hmt,"MPNetForMultipleChoice"),hmt.forEach(t),cNo=r(hxe," (MPNet model)"),hxe.forEach(t),fNo=i(ee),a2=n(ee,"LI",{});var pxe=s(a2);dge=n(pxe,"STRONG",{});var pmt=s(dge);mNo=r(pmt,"nystromformer"),pmt.forEach(t),gNo=r(pxe," \u2014 "),EO=n(pxe,"A",{href:!0});var umt=s(EO);hNo=r(umt,"NystromformerForMultipleChoice"),umt.forEach(t),pNo=r(pxe," (Nystromformer model)"),pxe.forEach(t),uNo=i(ee),n2=n(ee,"LI",{});var uxe=s(n2);cge=n(uxe,"STRONG",{});var _mt=s(cge);_No=r(_mt,"qdqbert"),_mt.forEach(t),bNo=r(uxe," \u2014 "),CO=n(uxe,"A",{href:!0});var bmt=s(CO);vNo=r(bmt,"QDQBertForMultipleChoice"),bmt.forEach(t),FNo=r(uxe," (QDQBert model)"),uxe.forEach(t),TNo=i(ee),s2=n(ee,"LI",{});var _xe=s(s2);fge=n(_xe,"STRONG",{});var vmt=s(fge);MNo=r(vmt,"rembert"),vmt.forEach(t),ENo=r(_xe," \u2014 "),wO=n(_xe,"A",{href:!0});var Fmt=s(wO);CNo=r(Fmt,"RemBertForMultipleChoice"),Fmt.forEach(t),wNo=r(_xe," (RemBERT model)"),_xe.forEach(t),ANo=i(ee),l2=n(ee,"LI",{});var bxe=s(l2);mge=n(bxe,"STRONG",{});var Tmt=s(mge);yNo=r(Tmt,"roberta"),Tmt.forEach(t),LNo=r(bxe," \u2014 "),AO=n(bxe,"A",{href:!0});var Mmt=s(AO);xNo=r(Mmt,"RobertaForMultipleChoice"),Mmt.forEach(t),$No=r(bxe," (RoBERTa model)"),bxe.forEach(t),kNo=i(ee),i2=n(ee,"LI",{});var vxe=s(i2);gge=n(vxe,"STRONG",{});var Emt=s(gge);SNo=r(Emt,"roformer"),Emt.forEach(t),RNo=r(vxe," \u2014 "),yO=n(vxe,"A",{href:!0});var Cmt=s(yO);PNo=r(Cmt,"RoFormerForMultipleChoice"),Cmt.forEach(t),BNo=r(vxe," (RoFormer model)"),vxe.forEach(t),INo=i(ee),d2=n(ee,"LI",{});var Fxe=s(d2);hge=n(Fxe,"STRONG",{});var wmt=s(hge);NNo=r(wmt,"squeezebert"),wmt.forEach(t),qNo=r(Fxe," \u2014 "),LO=n(Fxe,"A",{href:!0});var Amt=s(LO);jNo=r(Amt,"SqueezeBertForMultipleChoice"),Amt.forEach(t),DNo=r(Fxe," (SqueezeBERT model)"),Fxe.forEach(t),GNo=i(ee),c2=n(ee,"LI",{});var Txe=s(c2);pge=n(Txe,"STRONG",{});var ymt=s(pge);ONo=r(ymt,"xlm"),ymt.forEach(t),VNo=r(Txe," \u2014 "),xO=n(Txe,"A",{href:!0});var Lmt=s(xO);XNo=r(Lmt,"XLMForMultipleChoice"),Lmt.forEach(t),zNo=r(Txe," (XLM model)"),Txe.forEach(t),WNo=i(ee),f2=n(ee,"LI",{});var Mxe=s(f2);uge=n(Mxe,"STRONG",{});var xmt=s(uge);QNo=r(xmt,"xlm-roberta"),xmt.forEach(t),HNo=r(Mxe," \u2014 "),$O=n(Mxe,"A",{href:!0});var $mt=s($O);UNo=r($mt,"XLMRobertaForMultipleChoice"),$mt.forEach(t),JNo=r(Mxe," (XLM-RoBERTa model)"),Mxe.forEach(t),YNo=i(ee),m2=n(ee,"LI",{});var Exe=s(m2);_ge=n(Exe,"STRONG",{});var kmt=s(_ge);KNo=r(kmt,"xlm-roberta-xl"),kmt.forEach(t),ZNo=r(Exe," \u2014 "),kO=n(Exe,"A",{href:!0});var Smt=s(kO);eqo=r(Smt,"XLMRobertaXLForMultipleChoice"),Smt.forEach(t),oqo=r(Exe," (XLM-RoBERTa-XL model)"),Exe.forEach(t),rqo=i(ee),g2=n(ee,"LI",{});var Cxe=s(g2);bge=n(Cxe,"STRONG",{});var Rmt=s(bge);tqo=r(Rmt,"xlnet"),Rmt.forEach(t),aqo=r(Cxe," \u2014 "),SO=n(Cxe,"A",{href:!0});var Pmt=s(SO);nqo=r(Pmt,"XLNetForMultipleChoice"),Pmt.forEach(t),sqo=r(Cxe," (XLNet model)"),Cxe.forEach(t),lqo=i(ee),h2=n(ee,"LI",{});var wxe=s(h2);vge=n(wxe,"STRONG",{});var Bmt=s(vge);iqo=r(Bmt,"yoso"),Bmt.forEach(t),dqo=r(wxe," \u2014 "),RO=n(wxe,"A",{href:!0});var Imt=s(RO);cqo=r(Imt,"YosoForMultipleChoice"),Imt.forEach(t),fqo=r(wxe," (YOSO model)"),wxe.forEach(t),ee.forEach(t),mqo=i(la),p2=n(la,"P",{});var Axe=s(p2);gqo=r(Axe,"The model is set in evaluation mode by default using "),Fge=n(Axe,"CODE",{});var Nmt=s(Fge);hqo=r(Nmt,"model.eval()"),Nmt.forEach(t),pqo=r(Axe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tge=n(Axe,"CODE",{});var qmt=s(Tge);uqo=r(qmt,"model.train()"),qmt.forEach(t),Axe.forEach(t),_qo=i(la),T(u2.$$.fragment,la),la.forEach(t),Qs.forEach(t),wqe=i(f),Wi=n(f,"H2",{class:!0});var xDe=s(Wi);_2=n(xDe,"A",{id:!0,class:!0,href:!0});var jmt=s(_2);Mge=n(jmt,"SPAN",{});var Dmt=s(Mge);T(Py.$$.fragment,Dmt),Dmt.forEach(t),jmt.forEach(t),bqo=i(xDe),Ege=n(xDe,"SPAN",{});var Gmt=s(Ege);vqo=r(Gmt,"AutoModelForNextSentencePrediction"),Gmt.forEach(t),xDe.forEach(t),Aqe=i(f),Bo=n(f,"DIV",{class:!0});var Hs=s(Bo);T(By.$$.fragment,Hs),Fqo=i(Hs),Qi=n(Hs,"P",{});var xZ=s(Qi);Tqo=r(xZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),PO=n(xZ,"A",{href:!0});var Omt=s(PO);Mqo=r(Omt,"from_pretrained()"),Omt.forEach(t),Eqo=r(xZ," class method or the "),BO=n(xZ,"A",{href:!0});var Vmt=s(BO);Cqo=r(Vmt,"from_config()"),Vmt.forEach(t),wqo=r(xZ,` class
method.`),xZ.forEach(t),Aqo=i(Hs),Iy=n(Hs,"P",{});var $De=s(Iy);yqo=r($De,"This class cannot be instantiated directly using "),Cge=n($De,"CODE",{});var Xmt=s(Cge);Lqo=r(Xmt,"__init__()"),Xmt.forEach(t),xqo=r($De," (throws an error)."),$De.forEach(t),$qo=i(Hs),ct=n(Hs,"DIV",{class:!0});var zw=s(ct);T(Ny.$$.fragment,zw),kqo=i(zw),wge=n(zw,"P",{});var zmt=s(wge);Sqo=r(zmt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),zmt.forEach(t),Rqo=i(zw),Hi=n(zw,"P",{});var $Z=s(Hi);Pqo=r($Z,`Note:
Loading a model from its configuration file does `),Age=n($Z,"STRONG",{});var Wmt=s(Age);Bqo=r(Wmt,"not"),Wmt.forEach(t),Iqo=r($Z,` load the model weights. It only affects the
model\u2019s configuration. Use `),IO=n($Z,"A",{href:!0});var Qmt=s(IO);Nqo=r(Qmt,"from_pretrained()"),Qmt.forEach(t),qqo=r($Z," to load the model weights."),$Z.forEach(t),jqo=i(zw),T(b2.$$.fragment,zw),zw.forEach(t),Dqo=i(Hs),to=n(Hs,"DIV",{class:!0});var ia=s(to);T(qy.$$.fragment,ia),Gqo=i(ia),yge=n(ia,"P",{});var Hmt=s(yge);Oqo=r(Hmt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Hmt.forEach(t),Vqo=i(ia),Ba=n(ia,"P",{});var Ww=s(Ba);Xqo=r(Ww,"The model class to instantiate is selected based on the "),Lge=n(Ww,"CODE",{});var Umt=s(Lge);zqo=r(Umt,"model_type"),Umt.forEach(t),Wqo=r(Ww,` property of the config object (either
passed as an argument or loaded from `),xge=n(Ww,"CODE",{});var Jmt=s(xge);Qqo=r(Jmt,"pretrained_model_name_or_path"),Jmt.forEach(t),Hqo=r(Ww,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$ge=n(Ww,"CODE",{});var Ymt=s($ge);Uqo=r(Ymt,"pretrained_model_name_or_path"),Ymt.forEach(t),Jqo=r(Ww,":"),Ww.forEach(t),Yqo=i(ia),Yr=n(ia,"UL",{});var Us=s(Yr);v2=n(Us,"LI",{});var yxe=s(v2);kge=n(yxe,"STRONG",{});var Kmt=s(kge);Kqo=r(Kmt,"bert"),Kmt.forEach(t),Zqo=r(yxe," \u2014 "),NO=n(yxe,"A",{href:!0});var Zmt=s(NO);ejo=r(Zmt,"BertForNextSentencePrediction"),Zmt.forEach(t),ojo=r(yxe," (BERT model)"),yxe.forEach(t),rjo=i(Us),F2=n(Us,"LI",{});var Lxe=s(F2);Sge=n(Lxe,"STRONG",{});var egt=s(Sge);tjo=r(egt,"fnet"),egt.forEach(t),ajo=r(Lxe," \u2014 "),qO=n(Lxe,"A",{href:!0});var ogt=s(qO);njo=r(ogt,"FNetForNextSentencePrediction"),ogt.forEach(t),sjo=r(Lxe," (FNet model)"),Lxe.forEach(t),ljo=i(Us),T2=n(Us,"LI",{});var xxe=s(T2);Rge=n(xxe,"STRONG",{});var rgt=s(Rge);ijo=r(rgt,"megatron-bert"),rgt.forEach(t),djo=r(xxe," \u2014 "),jO=n(xxe,"A",{href:!0});var tgt=s(jO);cjo=r(tgt,"MegatronBertForNextSentencePrediction"),tgt.forEach(t),fjo=r(xxe," (MegatronBert model)"),xxe.forEach(t),mjo=i(Us),M2=n(Us,"LI",{});var $xe=s(M2);Pge=n($xe,"STRONG",{});var agt=s(Pge);gjo=r(agt,"mobilebert"),agt.forEach(t),hjo=r($xe," \u2014 "),DO=n($xe,"A",{href:!0});var ngt=s(DO);pjo=r(ngt,"MobileBertForNextSentencePrediction"),ngt.forEach(t),ujo=r($xe," (MobileBERT model)"),$xe.forEach(t),_jo=i(Us),E2=n(Us,"LI",{});var kxe=s(E2);Bge=n(kxe,"STRONG",{});var sgt=s(Bge);bjo=r(sgt,"qdqbert"),sgt.forEach(t),vjo=r(kxe," \u2014 "),GO=n(kxe,"A",{href:!0});var lgt=s(GO);Fjo=r(lgt,"QDQBertForNextSentencePrediction"),lgt.forEach(t),Tjo=r(kxe," (QDQBert model)"),kxe.forEach(t),Us.forEach(t),Mjo=i(ia),C2=n(ia,"P",{});var Sxe=s(C2);Ejo=r(Sxe,"The model is set in evaluation mode by default using "),Ige=n(Sxe,"CODE",{});var igt=s(Ige);Cjo=r(igt,"model.eval()"),igt.forEach(t),wjo=r(Sxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nge=n(Sxe,"CODE",{});var dgt=s(Nge);Ajo=r(dgt,"model.train()"),dgt.forEach(t),Sxe.forEach(t),yjo=i(ia),T(w2.$$.fragment,ia),ia.forEach(t),Hs.forEach(t),yqe=i(f),Ui=n(f,"H2",{class:!0});var kDe=s(Ui);A2=n(kDe,"A",{id:!0,class:!0,href:!0});var cgt=s(A2);qge=n(cgt,"SPAN",{});var fgt=s(qge);T(jy.$$.fragment,fgt),fgt.forEach(t),cgt.forEach(t),Ljo=i(kDe),jge=n(kDe,"SPAN",{});var mgt=s(jge);xjo=r(mgt,"AutoModelForTokenClassification"),mgt.forEach(t),kDe.forEach(t),Lqe=i(f),Io=n(f,"DIV",{class:!0});var Js=s(Io);T(Dy.$$.fragment,Js),$jo=i(Js),Ji=n(Js,"P",{});var kZ=s(Ji);kjo=r(kZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),OO=n(kZ,"A",{href:!0});var ggt=s(OO);Sjo=r(ggt,"from_pretrained()"),ggt.forEach(t),Rjo=r(kZ," class method or the "),VO=n(kZ,"A",{href:!0});var hgt=s(VO);Pjo=r(hgt,"from_config()"),hgt.forEach(t),Bjo=r(kZ,` class
method.`),kZ.forEach(t),Ijo=i(Js),Gy=n(Js,"P",{});var SDe=s(Gy);Njo=r(SDe,"This class cannot be instantiated directly using "),Dge=n(SDe,"CODE",{});var pgt=s(Dge);qjo=r(pgt,"__init__()"),pgt.forEach(t),jjo=r(SDe," (throws an error)."),SDe.forEach(t),Djo=i(Js),ft=n(Js,"DIV",{class:!0});var Qw=s(ft);T(Oy.$$.fragment,Qw),Gjo=i(Qw),Gge=n(Qw,"P",{});var ugt=s(Gge);Ojo=r(ugt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),ugt.forEach(t),Vjo=i(Qw),Yi=n(Qw,"P",{});var SZ=s(Yi);Xjo=r(SZ,`Note:
Loading a model from its configuration file does `),Oge=n(SZ,"STRONG",{});var _gt=s(Oge);zjo=r(_gt,"not"),_gt.forEach(t),Wjo=r(SZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),XO=n(SZ,"A",{href:!0});var bgt=s(XO);Qjo=r(bgt,"from_pretrained()"),bgt.forEach(t),Hjo=r(SZ," to load the model weights."),SZ.forEach(t),Ujo=i(Qw),T(y2.$$.fragment,Qw),Qw.forEach(t),Jjo=i(Js),ao=n(Js,"DIV",{class:!0});var da=s(ao);T(Vy.$$.fragment,da),Yjo=i(da),Vge=n(da,"P",{});var vgt=s(Vge);Kjo=r(vgt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),vgt.forEach(t),Zjo=i(da),Ia=n(da,"P",{});var Hw=s(Ia);eDo=r(Hw,"The model class to instantiate is selected based on the "),Xge=n(Hw,"CODE",{});var Fgt=s(Xge);oDo=r(Fgt,"model_type"),Fgt.forEach(t),rDo=r(Hw,` property of the config object (either
passed as an argument or loaded from `),zge=n(Hw,"CODE",{});var Tgt=s(zge);tDo=r(Tgt,"pretrained_model_name_or_path"),Tgt.forEach(t),aDo=r(Hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wge=n(Hw,"CODE",{});var Mgt=s(Wge);nDo=r(Mgt,"pretrained_model_name_or_path"),Mgt.forEach(t),sDo=r(Hw,":"),Hw.forEach(t),lDo=i(da),H=n(da,"UL",{});var J=s(H);L2=n(J,"LI",{});var Rxe=s(L2);Qge=n(Rxe,"STRONG",{});var Egt=s(Qge);iDo=r(Egt,"albert"),Egt.forEach(t),dDo=r(Rxe," \u2014 "),zO=n(Rxe,"A",{href:!0});var Cgt=s(zO);cDo=r(Cgt,"AlbertForTokenClassification"),Cgt.forEach(t),fDo=r(Rxe," (ALBERT model)"),Rxe.forEach(t),mDo=i(J),x2=n(J,"LI",{});var Pxe=s(x2);Hge=n(Pxe,"STRONG",{});var wgt=s(Hge);gDo=r(wgt,"bert"),wgt.forEach(t),hDo=r(Pxe," \u2014 "),WO=n(Pxe,"A",{href:!0});var Agt=s(WO);pDo=r(Agt,"BertForTokenClassification"),Agt.forEach(t),uDo=r(Pxe," (BERT model)"),Pxe.forEach(t),_Do=i(J),$2=n(J,"LI",{});var Bxe=s($2);Uge=n(Bxe,"STRONG",{});var ygt=s(Uge);bDo=r(ygt,"big_bird"),ygt.forEach(t),vDo=r(Bxe," \u2014 "),QO=n(Bxe,"A",{href:!0});var Lgt=s(QO);FDo=r(Lgt,"BigBirdForTokenClassification"),Lgt.forEach(t),TDo=r(Bxe," (BigBird model)"),Bxe.forEach(t),MDo=i(J),k2=n(J,"LI",{});var Ixe=s(k2);Jge=n(Ixe,"STRONG",{});var xgt=s(Jge);EDo=r(xgt,"camembert"),xgt.forEach(t),CDo=r(Ixe," \u2014 "),HO=n(Ixe,"A",{href:!0});var $gt=s(HO);wDo=r($gt,"CamembertForTokenClassification"),$gt.forEach(t),ADo=r(Ixe," (CamemBERT model)"),Ixe.forEach(t),yDo=i(J),S2=n(J,"LI",{});var Nxe=s(S2);Yge=n(Nxe,"STRONG",{});var kgt=s(Yge);LDo=r(kgt,"canine"),kgt.forEach(t),xDo=r(Nxe," \u2014 "),UO=n(Nxe,"A",{href:!0});var Sgt=s(UO);$Do=r(Sgt,"CanineForTokenClassification"),Sgt.forEach(t),kDo=r(Nxe," (Canine model)"),Nxe.forEach(t),SDo=i(J),R2=n(J,"LI",{});var qxe=s(R2);Kge=n(qxe,"STRONG",{});var Rgt=s(Kge);RDo=r(Rgt,"convbert"),Rgt.forEach(t),PDo=r(qxe," \u2014 "),JO=n(qxe,"A",{href:!0});var Pgt=s(JO);BDo=r(Pgt,"ConvBertForTokenClassification"),Pgt.forEach(t),IDo=r(qxe," (ConvBERT model)"),qxe.forEach(t),NDo=i(J),P2=n(J,"LI",{});var jxe=s(P2);Zge=n(jxe,"STRONG",{});var Bgt=s(Zge);qDo=r(Bgt,"data2vec-text"),Bgt.forEach(t),jDo=r(jxe," \u2014 "),YO=n(jxe,"A",{href:!0});var Igt=s(YO);DDo=r(Igt,"Data2VecTextForTokenClassification"),Igt.forEach(t),GDo=r(jxe," (Data2VecText model)"),jxe.forEach(t),ODo=i(J),B2=n(J,"LI",{});var Dxe=s(B2);ehe=n(Dxe,"STRONG",{});var Ngt=s(ehe);VDo=r(Ngt,"deberta"),Ngt.forEach(t),XDo=r(Dxe," \u2014 "),KO=n(Dxe,"A",{href:!0});var qgt=s(KO);zDo=r(qgt,"DebertaForTokenClassification"),qgt.forEach(t),WDo=r(Dxe," (DeBERTa model)"),Dxe.forEach(t),QDo=i(J),I2=n(J,"LI",{});var Gxe=s(I2);ohe=n(Gxe,"STRONG",{});var jgt=s(ohe);HDo=r(jgt,"deberta-v2"),jgt.forEach(t),UDo=r(Gxe," \u2014 "),ZO=n(Gxe,"A",{href:!0});var Dgt=s(ZO);JDo=r(Dgt,"DebertaV2ForTokenClassification"),Dgt.forEach(t),YDo=r(Gxe," (DeBERTa-v2 model)"),Gxe.forEach(t),KDo=i(J),N2=n(J,"LI",{});var Oxe=s(N2);rhe=n(Oxe,"STRONG",{});var Ggt=s(rhe);ZDo=r(Ggt,"distilbert"),Ggt.forEach(t),eGo=r(Oxe," \u2014 "),eV=n(Oxe,"A",{href:!0});var Ogt=s(eV);oGo=r(Ogt,"DistilBertForTokenClassification"),Ogt.forEach(t),rGo=r(Oxe," (DistilBERT model)"),Oxe.forEach(t),tGo=i(J),q2=n(J,"LI",{});var Vxe=s(q2);the=n(Vxe,"STRONG",{});var Vgt=s(the);aGo=r(Vgt,"electra"),Vgt.forEach(t),nGo=r(Vxe," \u2014 "),oV=n(Vxe,"A",{href:!0});var Xgt=s(oV);sGo=r(Xgt,"ElectraForTokenClassification"),Xgt.forEach(t),lGo=r(Vxe," (ELECTRA model)"),Vxe.forEach(t),iGo=i(J),j2=n(J,"LI",{});var Xxe=s(j2);ahe=n(Xxe,"STRONG",{});var zgt=s(ahe);dGo=r(zgt,"flaubert"),zgt.forEach(t),cGo=r(Xxe," \u2014 "),rV=n(Xxe,"A",{href:!0});var Wgt=s(rV);fGo=r(Wgt,"FlaubertForTokenClassification"),Wgt.forEach(t),mGo=r(Xxe," (FlauBERT model)"),Xxe.forEach(t),gGo=i(J),D2=n(J,"LI",{});var zxe=s(D2);nhe=n(zxe,"STRONG",{});var Qgt=s(nhe);hGo=r(Qgt,"fnet"),Qgt.forEach(t),pGo=r(zxe," \u2014 "),tV=n(zxe,"A",{href:!0});var Hgt=s(tV);uGo=r(Hgt,"FNetForTokenClassification"),Hgt.forEach(t),_Go=r(zxe," (FNet model)"),zxe.forEach(t),bGo=i(J),G2=n(J,"LI",{});var Wxe=s(G2);she=n(Wxe,"STRONG",{});var Ugt=s(she);vGo=r(Ugt,"funnel"),Ugt.forEach(t),FGo=r(Wxe," \u2014 "),aV=n(Wxe,"A",{href:!0});var Jgt=s(aV);TGo=r(Jgt,"FunnelForTokenClassification"),Jgt.forEach(t),MGo=r(Wxe," (Funnel Transformer model)"),Wxe.forEach(t),EGo=i(J),O2=n(J,"LI",{});var Qxe=s(O2);lhe=n(Qxe,"STRONG",{});var Ygt=s(lhe);CGo=r(Ygt,"gpt2"),Ygt.forEach(t),wGo=r(Qxe," \u2014 "),nV=n(Qxe,"A",{href:!0});var Kgt=s(nV);AGo=r(Kgt,"GPT2ForTokenClassification"),Kgt.forEach(t),yGo=r(Qxe," (OpenAI GPT-2 model)"),Qxe.forEach(t),LGo=i(J),V2=n(J,"LI",{});var Hxe=s(V2);ihe=n(Hxe,"STRONG",{});var Zgt=s(ihe);xGo=r(Zgt,"ibert"),Zgt.forEach(t),$Go=r(Hxe," \u2014 "),sV=n(Hxe,"A",{href:!0});var eht=s(sV);kGo=r(eht,"IBertForTokenClassification"),eht.forEach(t),SGo=r(Hxe," (I-BERT model)"),Hxe.forEach(t),RGo=i(J),X2=n(J,"LI",{});var Uxe=s(X2);dhe=n(Uxe,"STRONG",{});var oht=s(dhe);PGo=r(oht,"layoutlm"),oht.forEach(t),BGo=r(Uxe," \u2014 "),lV=n(Uxe,"A",{href:!0});var rht=s(lV);IGo=r(rht,"LayoutLMForTokenClassification"),rht.forEach(t),NGo=r(Uxe," (LayoutLM model)"),Uxe.forEach(t),qGo=i(J),z2=n(J,"LI",{});var Jxe=s(z2);che=n(Jxe,"STRONG",{});var tht=s(che);jGo=r(tht,"layoutlmv2"),tht.forEach(t),DGo=r(Jxe," \u2014 "),iV=n(Jxe,"A",{href:!0});var aht=s(iV);GGo=r(aht,"LayoutLMv2ForTokenClassification"),aht.forEach(t),OGo=r(Jxe," (LayoutLMv2 model)"),Jxe.forEach(t),VGo=i(J),W2=n(J,"LI",{});var Yxe=s(W2);fhe=n(Yxe,"STRONG",{});var nht=s(fhe);XGo=r(nht,"layoutlmv3"),nht.forEach(t),zGo=r(Yxe," \u2014 "),dV=n(Yxe,"A",{href:!0});var sht=s(dV);WGo=r(sht,"LayoutLMv3ForTokenClassification"),sht.forEach(t),QGo=r(Yxe," (LayoutLMv3 model)"),Yxe.forEach(t),HGo=i(J),Q2=n(J,"LI",{});var Kxe=s(Q2);mhe=n(Kxe,"STRONG",{});var lht=s(mhe);UGo=r(lht,"longformer"),lht.forEach(t),JGo=r(Kxe," \u2014 "),cV=n(Kxe,"A",{href:!0});var iht=s(cV);YGo=r(iht,"LongformerForTokenClassification"),iht.forEach(t),KGo=r(Kxe," (Longformer model)"),Kxe.forEach(t),ZGo=i(J),H2=n(J,"LI",{});var Zxe=s(H2);ghe=n(Zxe,"STRONG",{});var dht=s(ghe);eOo=r(dht,"megatron-bert"),dht.forEach(t),oOo=r(Zxe," \u2014 "),fV=n(Zxe,"A",{href:!0});var cht=s(fV);rOo=r(cht,"MegatronBertForTokenClassification"),cht.forEach(t),tOo=r(Zxe," (MegatronBert model)"),Zxe.forEach(t),aOo=i(J),U2=n(J,"LI",{});var e$e=s(U2);hhe=n(e$e,"STRONG",{});var fht=s(hhe);nOo=r(fht,"mobilebert"),fht.forEach(t),sOo=r(e$e," \u2014 "),mV=n(e$e,"A",{href:!0});var mht=s(mV);lOo=r(mht,"MobileBertForTokenClassification"),mht.forEach(t),iOo=r(e$e," (MobileBERT model)"),e$e.forEach(t),dOo=i(J),J2=n(J,"LI",{});var o$e=s(J2);phe=n(o$e,"STRONG",{});var ght=s(phe);cOo=r(ght,"mpnet"),ght.forEach(t),fOo=r(o$e," \u2014 "),gV=n(o$e,"A",{href:!0});var hht=s(gV);mOo=r(hht,"MPNetForTokenClassification"),hht.forEach(t),gOo=r(o$e," (MPNet model)"),o$e.forEach(t),hOo=i(J),Y2=n(J,"LI",{});var r$e=s(Y2);uhe=n(r$e,"STRONG",{});var pht=s(uhe);pOo=r(pht,"nystromformer"),pht.forEach(t),uOo=r(r$e," \u2014 "),hV=n(r$e,"A",{href:!0});var uht=s(hV);_Oo=r(uht,"NystromformerForTokenClassification"),uht.forEach(t),bOo=r(r$e," (Nystromformer model)"),r$e.forEach(t),vOo=i(J),K2=n(J,"LI",{});var t$e=s(K2);_he=n(t$e,"STRONG",{});var _ht=s(_he);FOo=r(_ht,"qdqbert"),_ht.forEach(t),TOo=r(t$e," \u2014 "),pV=n(t$e,"A",{href:!0});var bht=s(pV);MOo=r(bht,"QDQBertForTokenClassification"),bht.forEach(t),EOo=r(t$e," (QDQBert model)"),t$e.forEach(t),COo=i(J),Z2=n(J,"LI",{});var a$e=s(Z2);bhe=n(a$e,"STRONG",{});var vht=s(bhe);wOo=r(vht,"rembert"),vht.forEach(t),AOo=r(a$e," \u2014 "),uV=n(a$e,"A",{href:!0});var Fht=s(uV);yOo=r(Fht,"RemBertForTokenClassification"),Fht.forEach(t),LOo=r(a$e," (RemBERT model)"),a$e.forEach(t),xOo=i(J),e4=n(J,"LI",{});var n$e=s(e4);vhe=n(n$e,"STRONG",{});var Tht=s(vhe);$Oo=r(Tht,"roberta"),Tht.forEach(t),kOo=r(n$e," \u2014 "),_V=n(n$e,"A",{href:!0});var Mht=s(_V);SOo=r(Mht,"RobertaForTokenClassification"),Mht.forEach(t),ROo=r(n$e," (RoBERTa model)"),n$e.forEach(t),POo=i(J),o4=n(J,"LI",{});var s$e=s(o4);Fhe=n(s$e,"STRONG",{});var Eht=s(Fhe);BOo=r(Eht,"roformer"),Eht.forEach(t),IOo=r(s$e," \u2014 "),bV=n(s$e,"A",{href:!0});var Cht=s(bV);NOo=r(Cht,"RoFormerForTokenClassification"),Cht.forEach(t),qOo=r(s$e," (RoFormer model)"),s$e.forEach(t),jOo=i(J),r4=n(J,"LI",{});var l$e=s(r4);The=n(l$e,"STRONG",{});var wht=s(The);DOo=r(wht,"squeezebert"),wht.forEach(t),GOo=r(l$e," \u2014 "),vV=n(l$e,"A",{href:!0});var Aht=s(vV);OOo=r(Aht,"SqueezeBertForTokenClassification"),Aht.forEach(t),VOo=r(l$e," (SqueezeBERT model)"),l$e.forEach(t),XOo=i(J),t4=n(J,"LI",{});var i$e=s(t4);Mhe=n(i$e,"STRONG",{});var yht=s(Mhe);zOo=r(yht,"xlm"),yht.forEach(t),WOo=r(i$e," \u2014 "),FV=n(i$e,"A",{href:!0});var Lht=s(FV);QOo=r(Lht,"XLMForTokenClassification"),Lht.forEach(t),HOo=r(i$e," (XLM model)"),i$e.forEach(t),UOo=i(J),a4=n(J,"LI",{});var d$e=s(a4);Ehe=n(d$e,"STRONG",{});var xht=s(Ehe);JOo=r(xht,"xlm-roberta"),xht.forEach(t),YOo=r(d$e," \u2014 "),TV=n(d$e,"A",{href:!0});var $ht=s(TV);KOo=r($ht,"XLMRobertaForTokenClassification"),$ht.forEach(t),ZOo=r(d$e," (XLM-RoBERTa model)"),d$e.forEach(t),eVo=i(J),n4=n(J,"LI",{});var c$e=s(n4);Che=n(c$e,"STRONG",{});var kht=s(Che);oVo=r(kht,"xlm-roberta-xl"),kht.forEach(t),rVo=r(c$e," \u2014 "),MV=n(c$e,"A",{href:!0});var Sht=s(MV);tVo=r(Sht,"XLMRobertaXLForTokenClassification"),Sht.forEach(t),aVo=r(c$e," (XLM-RoBERTa-XL model)"),c$e.forEach(t),nVo=i(J),s4=n(J,"LI",{});var f$e=s(s4);whe=n(f$e,"STRONG",{});var Rht=s(whe);sVo=r(Rht,"xlnet"),Rht.forEach(t),lVo=r(f$e," \u2014 "),EV=n(f$e,"A",{href:!0});var Pht=s(EV);iVo=r(Pht,"XLNetForTokenClassification"),Pht.forEach(t),dVo=r(f$e," (XLNet model)"),f$e.forEach(t),cVo=i(J),l4=n(J,"LI",{});var m$e=s(l4);Ahe=n(m$e,"STRONG",{});var Bht=s(Ahe);fVo=r(Bht,"yoso"),Bht.forEach(t),mVo=r(m$e," \u2014 "),CV=n(m$e,"A",{href:!0});var Iht=s(CV);gVo=r(Iht,"YosoForTokenClassification"),Iht.forEach(t),hVo=r(m$e," (YOSO model)"),m$e.forEach(t),J.forEach(t),pVo=i(da),i4=n(da,"P",{});var g$e=s(i4);uVo=r(g$e,"The model is set in evaluation mode by default using "),yhe=n(g$e,"CODE",{});var Nht=s(yhe);_Vo=r(Nht,"model.eval()"),Nht.forEach(t),bVo=r(g$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lhe=n(g$e,"CODE",{});var qht=s(Lhe);vVo=r(qht,"model.train()"),qht.forEach(t),g$e.forEach(t),FVo=i(da),T(d4.$$.fragment,da),da.forEach(t),Js.forEach(t),xqe=i(f),Ki=n(f,"H2",{class:!0});var RDe=s(Ki);c4=n(RDe,"A",{id:!0,class:!0,href:!0});var jht=s(c4);xhe=n(jht,"SPAN",{});var Dht=s(xhe);T(Xy.$$.fragment,Dht),Dht.forEach(t),jht.forEach(t),TVo=i(RDe),$he=n(RDe,"SPAN",{});var Ght=s($he);MVo=r(Ght,"AutoModelForQuestionAnswering"),Ght.forEach(t),RDe.forEach(t),$qe=i(f),No=n(f,"DIV",{class:!0});var Ys=s(No);T(zy.$$.fragment,Ys),EVo=i(Ys),Zi=n(Ys,"P",{});var RZ=s(Zi);CVo=r(RZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),wV=n(RZ,"A",{href:!0});var Oht=s(wV);wVo=r(Oht,"from_pretrained()"),Oht.forEach(t),AVo=r(RZ," class method or the "),AV=n(RZ,"A",{href:!0});var Vht=s(AV);yVo=r(Vht,"from_config()"),Vht.forEach(t),LVo=r(RZ,` class
method.`),RZ.forEach(t),xVo=i(Ys),Wy=n(Ys,"P",{});var PDe=s(Wy);$Vo=r(PDe,"This class cannot be instantiated directly using "),khe=n(PDe,"CODE",{});var Xht=s(khe);kVo=r(Xht,"__init__()"),Xht.forEach(t),SVo=r(PDe," (throws an error)."),PDe.forEach(t),RVo=i(Ys),mt=n(Ys,"DIV",{class:!0});var Uw=s(mt);T(Qy.$$.fragment,Uw),PVo=i(Uw),She=n(Uw,"P",{});var zht=s(She);BVo=r(zht,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),zht.forEach(t),IVo=i(Uw),ed=n(Uw,"P",{});var PZ=s(ed);NVo=r(PZ,`Note:
Loading a model from its configuration file does `),Rhe=n(PZ,"STRONG",{});var Wht=s(Rhe);qVo=r(Wht,"not"),Wht.forEach(t),jVo=r(PZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),yV=n(PZ,"A",{href:!0});var Qht=s(yV);DVo=r(Qht,"from_pretrained()"),Qht.forEach(t),GVo=r(PZ," to load the model weights."),PZ.forEach(t),OVo=i(Uw),T(f4.$$.fragment,Uw),Uw.forEach(t),VVo=i(Ys),no=n(Ys,"DIV",{class:!0});var ca=s(no);T(Hy.$$.fragment,ca),XVo=i(ca),Phe=n(ca,"P",{});var Hht=s(Phe);zVo=r(Hht,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Hht.forEach(t),WVo=i(ca),Na=n(ca,"P",{});var Jw=s(Na);QVo=r(Jw,"The model class to instantiate is selected based on the "),Bhe=n(Jw,"CODE",{});var Uht=s(Bhe);HVo=r(Uht,"model_type"),Uht.forEach(t),UVo=r(Jw,` property of the config object (either
passed as an argument or loaded from `),Ihe=n(Jw,"CODE",{});var Jht=s(Ihe);JVo=r(Jht,"pretrained_model_name_or_path"),Jht.forEach(t),YVo=r(Jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nhe=n(Jw,"CODE",{});var Yht=s(Nhe);KVo=r(Yht,"pretrained_model_name_or_path"),Yht.forEach(t),ZVo=r(Jw,":"),Jw.forEach(t),eXo=i(ca),V=n(ca,"UL",{});var X=s(V);m4=n(X,"LI",{});var h$e=s(m4);qhe=n(h$e,"STRONG",{});var Kht=s(qhe);oXo=r(Kht,"albert"),Kht.forEach(t),rXo=r(h$e," \u2014 "),LV=n(h$e,"A",{href:!0});var Zht=s(LV);tXo=r(Zht,"AlbertForQuestionAnswering"),Zht.forEach(t),aXo=r(h$e," (ALBERT model)"),h$e.forEach(t),nXo=i(X),g4=n(X,"LI",{});var p$e=s(g4);jhe=n(p$e,"STRONG",{});var ept=s(jhe);sXo=r(ept,"bart"),ept.forEach(t),lXo=r(p$e," \u2014 "),xV=n(p$e,"A",{href:!0});var opt=s(xV);iXo=r(opt,"BartForQuestionAnswering"),opt.forEach(t),dXo=r(p$e," (BART model)"),p$e.forEach(t),cXo=i(X),h4=n(X,"LI",{});var u$e=s(h4);Dhe=n(u$e,"STRONG",{});var rpt=s(Dhe);fXo=r(rpt,"bert"),rpt.forEach(t),mXo=r(u$e," \u2014 "),$V=n(u$e,"A",{href:!0});var tpt=s($V);gXo=r(tpt,"BertForQuestionAnswering"),tpt.forEach(t),hXo=r(u$e," (BERT model)"),u$e.forEach(t),pXo=i(X),p4=n(X,"LI",{});var _$e=s(p4);Ghe=n(_$e,"STRONG",{});var apt=s(Ghe);uXo=r(apt,"big_bird"),apt.forEach(t),_Xo=r(_$e," \u2014 "),kV=n(_$e,"A",{href:!0});var npt=s(kV);bXo=r(npt,"BigBirdForQuestionAnswering"),npt.forEach(t),vXo=r(_$e," (BigBird model)"),_$e.forEach(t),FXo=i(X),u4=n(X,"LI",{});var b$e=s(u4);Ohe=n(b$e,"STRONG",{});var spt=s(Ohe);TXo=r(spt,"bigbird_pegasus"),spt.forEach(t),MXo=r(b$e," \u2014 "),SV=n(b$e,"A",{href:!0});var lpt=s(SV);EXo=r(lpt,"BigBirdPegasusForQuestionAnswering"),lpt.forEach(t),CXo=r(b$e," (BigBirdPegasus model)"),b$e.forEach(t),wXo=i(X),_4=n(X,"LI",{});var v$e=s(_4);Vhe=n(v$e,"STRONG",{});var ipt=s(Vhe);AXo=r(ipt,"camembert"),ipt.forEach(t),yXo=r(v$e," \u2014 "),RV=n(v$e,"A",{href:!0});var dpt=s(RV);LXo=r(dpt,"CamembertForQuestionAnswering"),dpt.forEach(t),xXo=r(v$e," (CamemBERT model)"),v$e.forEach(t),$Xo=i(X),b4=n(X,"LI",{});var F$e=s(b4);Xhe=n(F$e,"STRONG",{});var cpt=s(Xhe);kXo=r(cpt,"canine"),cpt.forEach(t),SXo=r(F$e," \u2014 "),PV=n(F$e,"A",{href:!0});var fpt=s(PV);RXo=r(fpt,"CanineForQuestionAnswering"),fpt.forEach(t),PXo=r(F$e," (Canine model)"),F$e.forEach(t),BXo=i(X),v4=n(X,"LI",{});var T$e=s(v4);zhe=n(T$e,"STRONG",{});var mpt=s(zhe);IXo=r(mpt,"convbert"),mpt.forEach(t),NXo=r(T$e," \u2014 "),BV=n(T$e,"A",{href:!0});var gpt=s(BV);qXo=r(gpt,"ConvBertForQuestionAnswering"),gpt.forEach(t),jXo=r(T$e," (ConvBERT model)"),T$e.forEach(t),DXo=i(X),F4=n(X,"LI",{});var M$e=s(F4);Whe=n(M$e,"STRONG",{});var hpt=s(Whe);GXo=r(hpt,"data2vec-text"),hpt.forEach(t),OXo=r(M$e," \u2014 "),IV=n(M$e,"A",{href:!0});var ppt=s(IV);VXo=r(ppt,"Data2VecTextForQuestionAnswering"),ppt.forEach(t),XXo=r(M$e," (Data2VecText model)"),M$e.forEach(t),zXo=i(X),T4=n(X,"LI",{});var E$e=s(T4);Qhe=n(E$e,"STRONG",{});var upt=s(Qhe);WXo=r(upt,"deberta"),upt.forEach(t),QXo=r(E$e," \u2014 "),NV=n(E$e,"A",{href:!0});var _pt=s(NV);HXo=r(_pt,"DebertaForQuestionAnswering"),_pt.forEach(t),UXo=r(E$e," (DeBERTa model)"),E$e.forEach(t),JXo=i(X),M4=n(X,"LI",{});var C$e=s(M4);Hhe=n(C$e,"STRONG",{});var bpt=s(Hhe);YXo=r(bpt,"deberta-v2"),bpt.forEach(t),KXo=r(C$e," \u2014 "),qV=n(C$e,"A",{href:!0});var vpt=s(qV);ZXo=r(vpt,"DebertaV2ForQuestionAnswering"),vpt.forEach(t),ezo=r(C$e," (DeBERTa-v2 model)"),C$e.forEach(t),ozo=i(X),E4=n(X,"LI",{});var w$e=s(E4);Uhe=n(w$e,"STRONG",{});var Fpt=s(Uhe);rzo=r(Fpt,"distilbert"),Fpt.forEach(t),tzo=r(w$e," \u2014 "),jV=n(w$e,"A",{href:!0});var Tpt=s(jV);azo=r(Tpt,"DistilBertForQuestionAnswering"),Tpt.forEach(t),nzo=r(w$e," (DistilBERT model)"),w$e.forEach(t),szo=i(X),C4=n(X,"LI",{});var A$e=s(C4);Jhe=n(A$e,"STRONG",{});var Mpt=s(Jhe);lzo=r(Mpt,"electra"),Mpt.forEach(t),izo=r(A$e," \u2014 "),DV=n(A$e,"A",{href:!0});var Ept=s(DV);dzo=r(Ept,"ElectraForQuestionAnswering"),Ept.forEach(t),czo=r(A$e," (ELECTRA model)"),A$e.forEach(t),fzo=i(X),w4=n(X,"LI",{});var y$e=s(w4);Yhe=n(y$e,"STRONG",{});var Cpt=s(Yhe);mzo=r(Cpt,"flaubert"),Cpt.forEach(t),gzo=r(y$e," \u2014 "),GV=n(y$e,"A",{href:!0});var wpt=s(GV);hzo=r(wpt,"FlaubertForQuestionAnsweringSimple"),wpt.forEach(t),pzo=r(y$e," (FlauBERT model)"),y$e.forEach(t),uzo=i(X),A4=n(X,"LI",{});var L$e=s(A4);Khe=n(L$e,"STRONG",{});var Apt=s(Khe);_zo=r(Apt,"fnet"),Apt.forEach(t),bzo=r(L$e," \u2014 "),OV=n(L$e,"A",{href:!0});var ypt=s(OV);vzo=r(ypt,"FNetForQuestionAnswering"),ypt.forEach(t),Fzo=r(L$e," (FNet model)"),L$e.forEach(t),Tzo=i(X),y4=n(X,"LI",{});var x$e=s(y4);Zhe=n(x$e,"STRONG",{});var Lpt=s(Zhe);Mzo=r(Lpt,"funnel"),Lpt.forEach(t),Ezo=r(x$e," \u2014 "),VV=n(x$e,"A",{href:!0});var xpt=s(VV);Czo=r(xpt,"FunnelForQuestionAnswering"),xpt.forEach(t),wzo=r(x$e," (Funnel Transformer model)"),x$e.forEach(t),Azo=i(X),L4=n(X,"LI",{});var $$e=s(L4);epe=n($$e,"STRONG",{});var $pt=s(epe);yzo=r($pt,"gptj"),$pt.forEach(t),Lzo=r($$e," \u2014 "),XV=n($$e,"A",{href:!0});var kpt=s(XV);xzo=r(kpt,"GPTJForQuestionAnswering"),kpt.forEach(t),$zo=r($$e," (GPT-J model)"),$$e.forEach(t),kzo=i(X),x4=n(X,"LI",{});var k$e=s(x4);ope=n(k$e,"STRONG",{});var Spt=s(ope);Szo=r(Spt,"ibert"),Spt.forEach(t),Rzo=r(k$e," \u2014 "),zV=n(k$e,"A",{href:!0});var Rpt=s(zV);Pzo=r(Rpt,"IBertForQuestionAnswering"),Rpt.forEach(t),Bzo=r(k$e," (I-BERT model)"),k$e.forEach(t),Izo=i(X),$4=n(X,"LI",{});var S$e=s($4);rpe=n(S$e,"STRONG",{});var Ppt=s(rpe);Nzo=r(Ppt,"layoutlmv2"),Ppt.forEach(t),qzo=r(S$e," \u2014 "),WV=n(S$e,"A",{href:!0});var Bpt=s(WV);jzo=r(Bpt,"LayoutLMv2ForQuestionAnswering"),Bpt.forEach(t),Dzo=r(S$e," (LayoutLMv2 model)"),S$e.forEach(t),Gzo=i(X),k4=n(X,"LI",{});var R$e=s(k4);tpe=n(R$e,"STRONG",{});var Ipt=s(tpe);Ozo=r(Ipt,"layoutlmv3"),Ipt.forEach(t),Vzo=r(R$e," \u2014 "),QV=n(R$e,"A",{href:!0});var Npt=s(QV);Xzo=r(Npt,"LayoutLMv3ForQuestionAnswering"),Npt.forEach(t),zzo=r(R$e," (LayoutLMv3 model)"),R$e.forEach(t),Wzo=i(X),S4=n(X,"LI",{});var P$e=s(S4);ape=n(P$e,"STRONG",{});var qpt=s(ape);Qzo=r(qpt,"led"),qpt.forEach(t),Hzo=r(P$e," \u2014 "),HV=n(P$e,"A",{href:!0});var jpt=s(HV);Uzo=r(jpt,"LEDForQuestionAnswering"),jpt.forEach(t),Jzo=r(P$e," (LED model)"),P$e.forEach(t),Yzo=i(X),R4=n(X,"LI",{});var B$e=s(R4);npe=n(B$e,"STRONG",{});var Dpt=s(npe);Kzo=r(Dpt,"longformer"),Dpt.forEach(t),Zzo=r(B$e," \u2014 "),UV=n(B$e,"A",{href:!0});var Gpt=s(UV);eWo=r(Gpt,"LongformerForQuestionAnswering"),Gpt.forEach(t),oWo=r(B$e," (Longformer model)"),B$e.forEach(t),rWo=i(X),P4=n(X,"LI",{});var I$e=s(P4);spe=n(I$e,"STRONG",{});var Opt=s(spe);tWo=r(Opt,"lxmert"),Opt.forEach(t),aWo=r(I$e," \u2014 "),JV=n(I$e,"A",{href:!0});var Vpt=s(JV);nWo=r(Vpt,"LxmertForQuestionAnswering"),Vpt.forEach(t),sWo=r(I$e," (LXMERT model)"),I$e.forEach(t),lWo=i(X),B4=n(X,"LI",{});var N$e=s(B4);lpe=n(N$e,"STRONG",{});var Xpt=s(lpe);iWo=r(Xpt,"mbart"),Xpt.forEach(t),dWo=r(N$e," \u2014 "),YV=n(N$e,"A",{href:!0});var zpt=s(YV);cWo=r(zpt,"MBartForQuestionAnswering"),zpt.forEach(t),fWo=r(N$e," (mBART model)"),N$e.forEach(t),mWo=i(X),I4=n(X,"LI",{});var q$e=s(I4);ipe=n(q$e,"STRONG",{});var Wpt=s(ipe);gWo=r(Wpt,"megatron-bert"),Wpt.forEach(t),hWo=r(q$e," \u2014 "),KV=n(q$e,"A",{href:!0});var Qpt=s(KV);pWo=r(Qpt,"MegatronBertForQuestionAnswering"),Qpt.forEach(t),uWo=r(q$e," (MegatronBert model)"),q$e.forEach(t),_Wo=i(X),N4=n(X,"LI",{});var j$e=s(N4);dpe=n(j$e,"STRONG",{});var Hpt=s(dpe);bWo=r(Hpt,"mobilebert"),Hpt.forEach(t),vWo=r(j$e," \u2014 "),ZV=n(j$e,"A",{href:!0});var Upt=s(ZV);FWo=r(Upt,"MobileBertForQuestionAnswering"),Upt.forEach(t),TWo=r(j$e," (MobileBERT model)"),j$e.forEach(t),MWo=i(X),q4=n(X,"LI",{});var D$e=s(q4);cpe=n(D$e,"STRONG",{});var Jpt=s(cpe);EWo=r(Jpt,"mpnet"),Jpt.forEach(t),CWo=r(D$e," \u2014 "),eX=n(D$e,"A",{href:!0});var Ypt=s(eX);wWo=r(Ypt,"MPNetForQuestionAnswering"),Ypt.forEach(t),AWo=r(D$e," (MPNet model)"),D$e.forEach(t),yWo=i(X),j4=n(X,"LI",{});var G$e=s(j4);fpe=n(G$e,"STRONG",{});var Kpt=s(fpe);LWo=r(Kpt,"nystromformer"),Kpt.forEach(t),xWo=r(G$e," \u2014 "),oX=n(G$e,"A",{href:!0});var Zpt=s(oX);$Wo=r(Zpt,"NystromformerForQuestionAnswering"),Zpt.forEach(t),kWo=r(G$e," (Nystromformer model)"),G$e.forEach(t),SWo=i(X),D4=n(X,"LI",{});var O$e=s(D4);mpe=n(O$e,"STRONG",{});var eut=s(mpe);RWo=r(eut,"qdqbert"),eut.forEach(t),PWo=r(O$e," \u2014 "),rX=n(O$e,"A",{href:!0});var out=s(rX);BWo=r(out,"QDQBertForQuestionAnswering"),out.forEach(t),IWo=r(O$e," (QDQBert model)"),O$e.forEach(t),NWo=i(X),G4=n(X,"LI",{});var V$e=s(G4);gpe=n(V$e,"STRONG",{});var rut=s(gpe);qWo=r(rut,"reformer"),rut.forEach(t),jWo=r(V$e," \u2014 "),tX=n(V$e,"A",{href:!0});var tut=s(tX);DWo=r(tut,"ReformerForQuestionAnswering"),tut.forEach(t),GWo=r(V$e," (Reformer model)"),V$e.forEach(t),OWo=i(X),O4=n(X,"LI",{});var X$e=s(O4);hpe=n(X$e,"STRONG",{});var aut=s(hpe);VWo=r(aut,"rembert"),aut.forEach(t),XWo=r(X$e," \u2014 "),aX=n(X$e,"A",{href:!0});var nut=s(aX);zWo=r(nut,"RemBertForQuestionAnswering"),nut.forEach(t),WWo=r(X$e," (RemBERT model)"),X$e.forEach(t),QWo=i(X),V4=n(X,"LI",{});var z$e=s(V4);ppe=n(z$e,"STRONG",{});var sut=s(ppe);HWo=r(sut,"roberta"),sut.forEach(t),UWo=r(z$e," \u2014 "),nX=n(z$e,"A",{href:!0});var lut=s(nX);JWo=r(lut,"RobertaForQuestionAnswering"),lut.forEach(t),YWo=r(z$e," (RoBERTa model)"),z$e.forEach(t),KWo=i(X),X4=n(X,"LI",{});var W$e=s(X4);upe=n(W$e,"STRONG",{});var iut=s(upe);ZWo=r(iut,"roformer"),iut.forEach(t),eQo=r(W$e," \u2014 "),sX=n(W$e,"A",{href:!0});var dut=s(sX);oQo=r(dut,"RoFormerForQuestionAnswering"),dut.forEach(t),rQo=r(W$e," (RoFormer model)"),W$e.forEach(t),tQo=i(X),z4=n(X,"LI",{});var Q$e=s(z4);_pe=n(Q$e,"STRONG",{});var cut=s(_pe);aQo=r(cut,"splinter"),cut.forEach(t),nQo=r(Q$e," \u2014 "),lX=n(Q$e,"A",{href:!0});var fut=s(lX);sQo=r(fut,"SplinterForQuestionAnswering"),fut.forEach(t),lQo=r(Q$e," (Splinter model)"),Q$e.forEach(t),iQo=i(X),W4=n(X,"LI",{});var H$e=s(W4);bpe=n(H$e,"STRONG",{});var mut=s(bpe);dQo=r(mut,"squeezebert"),mut.forEach(t),cQo=r(H$e," \u2014 "),iX=n(H$e,"A",{href:!0});var gut=s(iX);fQo=r(gut,"SqueezeBertForQuestionAnswering"),gut.forEach(t),mQo=r(H$e," (SqueezeBERT model)"),H$e.forEach(t),gQo=i(X),Q4=n(X,"LI",{});var U$e=s(Q4);vpe=n(U$e,"STRONG",{});var hut=s(vpe);hQo=r(hut,"xlm"),hut.forEach(t),pQo=r(U$e," \u2014 "),dX=n(U$e,"A",{href:!0});var put=s(dX);uQo=r(put,"XLMForQuestionAnsweringSimple"),put.forEach(t),_Qo=r(U$e," (XLM model)"),U$e.forEach(t),bQo=i(X),H4=n(X,"LI",{});var J$e=s(H4);Fpe=n(J$e,"STRONG",{});var uut=s(Fpe);vQo=r(uut,"xlm-roberta"),uut.forEach(t),FQo=r(J$e," \u2014 "),cX=n(J$e,"A",{href:!0});var _ut=s(cX);TQo=r(_ut,"XLMRobertaForQuestionAnswering"),_ut.forEach(t),MQo=r(J$e," (XLM-RoBERTa model)"),J$e.forEach(t),EQo=i(X),U4=n(X,"LI",{});var Y$e=s(U4);Tpe=n(Y$e,"STRONG",{});var but=s(Tpe);CQo=r(but,"xlm-roberta-xl"),but.forEach(t),wQo=r(Y$e," \u2014 "),fX=n(Y$e,"A",{href:!0});var vut=s(fX);AQo=r(vut,"XLMRobertaXLForQuestionAnswering"),vut.forEach(t),yQo=r(Y$e," (XLM-RoBERTa-XL model)"),Y$e.forEach(t),LQo=i(X),J4=n(X,"LI",{});var K$e=s(J4);Mpe=n(K$e,"STRONG",{});var Fut=s(Mpe);xQo=r(Fut,"xlnet"),Fut.forEach(t),$Qo=r(K$e," \u2014 "),mX=n(K$e,"A",{href:!0});var Tut=s(mX);kQo=r(Tut,"XLNetForQuestionAnsweringSimple"),Tut.forEach(t),SQo=r(K$e," (XLNet model)"),K$e.forEach(t),RQo=i(X),Y4=n(X,"LI",{});var Z$e=s(Y4);Epe=n(Z$e,"STRONG",{});var Mut=s(Epe);PQo=r(Mut,"yoso"),Mut.forEach(t),BQo=r(Z$e," \u2014 "),gX=n(Z$e,"A",{href:!0});var Eut=s(gX);IQo=r(Eut,"YosoForQuestionAnswering"),Eut.forEach(t),NQo=r(Z$e," (YOSO model)"),Z$e.forEach(t),X.forEach(t),qQo=i(ca),K4=n(ca,"P",{});var eke=s(K4);jQo=r(eke,"The model is set in evaluation mode by default using "),Cpe=n(eke,"CODE",{});var Cut=s(Cpe);DQo=r(Cut,"model.eval()"),Cut.forEach(t),GQo=r(eke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wpe=n(eke,"CODE",{});var wut=s(wpe);OQo=r(wut,"model.train()"),wut.forEach(t),eke.forEach(t),VQo=i(ca),T(Z4.$$.fragment,ca),ca.forEach(t),Ys.forEach(t),kqe=i(f),od=n(f,"H2",{class:!0});var BDe=s(od);ev=n(BDe,"A",{id:!0,class:!0,href:!0});var Aut=s(ev);Ape=n(Aut,"SPAN",{});var yut=s(Ape);T(Uy.$$.fragment,yut),yut.forEach(t),Aut.forEach(t),XQo=i(BDe),ype=n(BDe,"SPAN",{});var Lut=s(ype);zQo=r(Lut,"AutoModelForTableQuestionAnswering"),Lut.forEach(t),BDe.forEach(t),Sqe=i(f),qo=n(f,"DIV",{class:!0});var Ks=s(qo);T(Jy.$$.fragment,Ks),WQo=i(Ks),rd=n(Ks,"P",{});var BZ=s(rd);QQo=r(BZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),hX=n(BZ,"A",{href:!0});var xut=s(hX);HQo=r(xut,"from_pretrained()"),xut.forEach(t),UQo=r(BZ," class method or the "),pX=n(BZ,"A",{href:!0});var $ut=s(pX);JQo=r($ut,"from_config()"),$ut.forEach(t),YQo=r(BZ,` class
method.`),BZ.forEach(t),KQo=i(Ks),Yy=n(Ks,"P",{});var IDe=s(Yy);ZQo=r(IDe,"This class cannot be instantiated directly using "),Lpe=n(IDe,"CODE",{});var kut=s(Lpe);eHo=r(kut,"__init__()"),kut.forEach(t),oHo=r(IDe," (throws an error)."),IDe.forEach(t),rHo=i(Ks),gt=n(Ks,"DIV",{class:!0});var Yw=s(gt);T(Ky.$$.fragment,Yw),tHo=i(Yw),xpe=n(Yw,"P",{});var Sut=s(xpe);aHo=r(Sut,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Sut.forEach(t),nHo=i(Yw),td=n(Yw,"P",{});var IZ=s(td);sHo=r(IZ,`Note:
Loading a model from its configuration file does `),$pe=n(IZ,"STRONG",{});var Rut=s($pe);lHo=r(Rut,"not"),Rut.forEach(t),iHo=r(IZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),uX=n(IZ,"A",{href:!0});var Put=s(uX);dHo=r(Put,"from_pretrained()"),Put.forEach(t),cHo=r(IZ," to load the model weights."),IZ.forEach(t),fHo=i(Yw),T(ov.$$.fragment,Yw),Yw.forEach(t),mHo=i(Ks),so=n(Ks,"DIV",{class:!0});var fa=s(so);T(Zy.$$.fragment,fa),gHo=i(fa),kpe=n(fa,"P",{});var But=s(kpe);hHo=r(But,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),But.forEach(t),pHo=i(fa),qa=n(fa,"P",{});var Kw=s(qa);uHo=r(Kw,"The model class to instantiate is selected based on the "),Spe=n(Kw,"CODE",{});var Iut=s(Spe);_Ho=r(Iut,"model_type"),Iut.forEach(t),bHo=r(Kw,` property of the config object (either
passed as an argument or loaded from `),Rpe=n(Kw,"CODE",{});var Nut=s(Rpe);vHo=r(Nut,"pretrained_model_name_or_path"),Nut.forEach(t),FHo=r(Kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ppe=n(Kw,"CODE",{});var qut=s(Ppe);THo=r(qut,"pretrained_model_name_or_path"),qut.forEach(t),MHo=r(Kw,":"),Kw.forEach(t),EHo=i(fa),Bpe=n(fa,"UL",{});var jut=s(Bpe);rv=n(jut,"LI",{});var oke=s(rv);Ipe=n(oke,"STRONG",{});var Dut=s(Ipe);CHo=r(Dut,"tapas"),Dut.forEach(t),wHo=r(oke," \u2014 "),_X=n(oke,"A",{href:!0});var Gut=s(_X);AHo=r(Gut,"TapasForQuestionAnswering"),Gut.forEach(t),yHo=r(oke," (TAPAS model)"),oke.forEach(t),jut.forEach(t),LHo=i(fa),tv=n(fa,"P",{});var rke=s(tv);xHo=r(rke,"The model is set in evaluation mode by default using "),Npe=n(rke,"CODE",{});var Out=s(Npe);$Ho=r(Out,"model.eval()"),Out.forEach(t),kHo=r(rke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qpe=n(rke,"CODE",{});var Vut=s(qpe);SHo=r(Vut,"model.train()"),Vut.forEach(t),rke.forEach(t),RHo=i(fa),T(av.$$.fragment,fa),fa.forEach(t),Ks.forEach(t),Rqe=i(f),ad=n(f,"H2",{class:!0});var NDe=s(ad);nv=n(NDe,"A",{id:!0,class:!0,href:!0});var Xut=s(nv);jpe=n(Xut,"SPAN",{});var zut=s(jpe);T(eL.$$.fragment,zut),zut.forEach(t),Xut.forEach(t),PHo=i(NDe),Dpe=n(NDe,"SPAN",{});var Wut=s(Dpe);BHo=r(Wut,"AutoModelForImageClassification"),Wut.forEach(t),NDe.forEach(t),Pqe=i(f),jo=n(f,"DIV",{class:!0});var Zs=s(jo);T(oL.$$.fragment,Zs),IHo=i(Zs),nd=n(Zs,"P",{});var NZ=s(nd);NHo=r(NZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),bX=n(NZ,"A",{href:!0});var Qut=s(bX);qHo=r(Qut,"from_pretrained()"),Qut.forEach(t),jHo=r(NZ," class method or the "),vX=n(NZ,"A",{href:!0});var Hut=s(vX);DHo=r(Hut,"from_config()"),Hut.forEach(t),GHo=r(NZ,` class
method.`),NZ.forEach(t),OHo=i(Zs),rL=n(Zs,"P",{});var qDe=s(rL);VHo=r(qDe,"This class cannot be instantiated directly using "),Gpe=n(qDe,"CODE",{});var Uut=s(Gpe);XHo=r(Uut,"__init__()"),Uut.forEach(t),zHo=r(qDe," (throws an error)."),qDe.forEach(t),WHo=i(Zs),ht=n(Zs,"DIV",{class:!0});var Zw=s(ht);T(tL.$$.fragment,Zw),QHo=i(Zw),Ope=n(Zw,"P",{});var Jut=s(Ope);HHo=r(Jut,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Jut.forEach(t),UHo=i(Zw),sd=n(Zw,"P",{});var qZ=s(sd);JHo=r(qZ,`Note:
Loading a model from its configuration file does `),Vpe=n(qZ,"STRONG",{});var Yut=s(Vpe);YHo=r(Yut,"not"),Yut.forEach(t),KHo=r(qZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),FX=n(qZ,"A",{href:!0});var Kut=s(FX);ZHo=r(Kut,"from_pretrained()"),Kut.forEach(t),eUo=r(qZ," to load the model weights."),qZ.forEach(t),oUo=i(Zw),T(sv.$$.fragment,Zw),Zw.forEach(t),rUo=i(Zs),lo=n(Zs,"DIV",{class:!0});var ma=s(lo);T(aL.$$.fragment,ma),tUo=i(ma),Xpe=n(ma,"P",{});var Zut=s(Xpe);aUo=r(Zut,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Zut.forEach(t),nUo=i(ma),ja=n(ma,"P",{});var e6=s(ja);sUo=r(e6,"The model class to instantiate is selected based on the "),zpe=n(e6,"CODE",{});var e_t=s(zpe);lUo=r(e_t,"model_type"),e_t.forEach(t),iUo=r(e6,` property of the config object (either
passed as an argument or loaded from `),Wpe=n(e6,"CODE",{});var o_t=s(Wpe);dUo=r(o_t,"pretrained_model_name_or_path"),o_t.forEach(t),cUo=r(e6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qpe=n(e6,"CODE",{});var r_t=s(Qpe);fUo=r(r_t,"pretrained_model_name_or_path"),r_t.forEach(t),mUo=r(e6,":"),e6.forEach(t),gUo=i(ma),Fe=n(ma,"UL",{});var Te=s(Fe);lv=n(Te,"LI",{});var tke=s(lv);Hpe=n(tke,"STRONG",{});var t_t=s(Hpe);hUo=r(t_t,"beit"),t_t.forEach(t),pUo=r(tke," \u2014 "),TX=n(tke,"A",{href:!0});var a_t=s(TX);uUo=r(a_t,"BeitForImageClassification"),a_t.forEach(t),_Uo=r(tke," (BEiT model)"),tke.forEach(t),bUo=i(Te),iv=n(Te,"LI",{});var ake=s(iv);Upe=n(ake,"STRONG",{});var n_t=s(Upe);vUo=r(n_t,"convnext"),n_t.forEach(t),FUo=r(ake," \u2014 "),MX=n(ake,"A",{href:!0});var s_t=s(MX);TUo=r(s_t,"ConvNextForImageClassification"),s_t.forEach(t),MUo=r(ake," (ConvNext model)"),ake.forEach(t),EUo=i(Te),dv=n(Te,"LI",{});var nke=s(dv);Jpe=n(nke,"STRONG",{});var l_t=s(Jpe);CUo=r(l_t,"cvt"),l_t.forEach(t),wUo=r(nke," \u2014 "),EX=n(nke,"A",{href:!0});var i_t=s(EX);AUo=r(i_t,"CvtForImageClassification"),i_t.forEach(t),yUo=r(nke," (CvT model)"),nke.forEach(t),LUo=i(Te),cv=n(Te,"LI",{});var ske=s(cv);Ype=n(ske,"STRONG",{});var d_t=s(Ype);xUo=r(d_t,"data2vec-vision"),d_t.forEach(t),$Uo=r(ske," \u2014 "),CX=n(ske,"A",{href:!0});var c_t=s(CX);kUo=r(c_t,"Data2VecVisionForImageClassification"),c_t.forEach(t),SUo=r(ske," (Data2VecVision model)"),ske.forEach(t),RUo=i(Te),Bs=n(Te,"LI",{});var V$=s(Bs);Kpe=n(V$,"STRONG",{});var f_t=s(Kpe);PUo=r(f_t,"deit"),f_t.forEach(t),BUo=r(V$," \u2014 "),wX=n(V$,"A",{href:!0});var m_t=s(wX);IUo=r(m_t,"DeiTForImageClassification"),m_t.forEach(t),NUo=r(V$," or "),AX=n(V$,"A",{href:!0});var g_t=s(AX);qUo=r(g_t,"DeiTForImageClassificationWithTeacher"),g_t.forEach(t),jUo=r(V$," (DeiT model)"),V$.forEach(t),DUo=i(Te),fv=n(Te,"LI",{});var lke=s(fv);Zpe=n(lke,"STRONG",{});var h_t=s(Zpe);GUo=r(h_t,"imagegpt"),h_t.forEach(t),OUo=r(lke," \u2014 "),yX=n(lke,"A",{href:!0});var p_t=s(yX);VUo=r(p_t,"ImageGPTForImageClassification"),p_t.forEach(t),XUo=r(lke," (ImageGPT model)"),lke.forEach(t),zUo=i(Te),pt=n(Te,"LI",{});var hf=s(pt);eue=n(hf,"STRONG",{});var u_t=s(eue);WUo=r(u_t,"perceiver"),u_t.forEach(t),QUo=r(hf," \u2014 "),LX=n(hf,"A",{href:!0});var __t=s(LX);HUo=r(__t,"PerceiverForImageClassificationLearned"),__t.forEach(t),UUo=r(hf," or "),xX=n(hf,"A",{href:!0});var b_t=s(xX);JUo=r(b_t,"PerceiverForImageClassificationFourier"),b_t.forEach(t),YUo=r(hf," or "),$X=n(hf,"A",{href:!0});var v_t=s($X);KUo=r(v_t,"PerceiverForImageClassificationConvProcessing"),v_t.forEach(t),ZUo=r(hf," (Perceiver model)"),hf.forEach(t),eJo=i(Te),mv=n(Te,"LI",{});var ike=s(mv);oue=n(ike,"STRONG",{});var F_t=s(oue);oJo=r(F_t,"poolformer"),F_t.forEach(t),rJo=r(ike," \u2014 "),kX=n(ike,"A",{href:!0});var T_t=s(kX);tJo=r(T_t,"PoolFormerForImageClassification"),T_t.forEach(t),aJo=r(ike," (PoolFormer model)"),ike.forEach(t),nJo=i(Te),gv=n(Te,"LI",{});var dke=s(gv);rue=n(dke,"STRONG",{});var M_t=s(rue);sJo=r(M_t,"regnet"),M_t.forEach(t),lJo=r(dke," \u2014 "),SX=n(dke,"A",{href:!0});var E_t=s(SX);iJo=r(E_t,"RegNetForImageClassification"),E_t.forEach(t),dJo=r(dke," (RegNet model)"),dke.forEach(t),cJo=i(Te),hv=n(Te,"LI",{});var cke=s(hv);tue=n(cke,"STRONG",{});var C_t=s(tue);fJo=r(C_t,"resnet"),C_t.forEach(t),mJo=r(cke," \u2014 "),RX=n(cke,"A",{href:!0});var w_t=s(RX);gJo=r(w_t,"ResNetForImageClassification"),w_t.forEach(t),hJo=r(cke," (ResNet model)"),cke.forEach(t),pJo=i(Te),pv=n(Te,"LI",{});var fke=s(pv);aue=n(fke,"STRONG",{});var A_t=s(aue);uJo=r(A_t,"segformer"),A_t.forEach(t),_Jo=r(fke," \u2014 "),PX=n(fke,"A",{href:!0});var y_t=s(PX);bJo=r(y_t,"SegformerForImageClassification"),y_t.forEach(t),vJo=r(fke," (SegFormer model)"),fke.forEach(t),FJo=i(Te),uv=n(Te,"LI",{});var mke=s(uv);nue=n(mke,"STRONG",{});var L_t=s(nue);TJo=r(L_t,"swin"),L_t.forEach(t),MJo=r(mke," \u2014 "),BX=n(mke,"A",{href:!0});var x_t=s(BX);EJo=r(x_t,"SwinForImageClassification"),x_t.forEach(t),CJo=r(mke," (Swin model)"),mke.forEach(t),wJo=i(Te),_v=n(Te,"LI",{});var gke=s(_v);sue=n(gke,"STRONG",{});var $_t=s(sue);AJo=r($_t,"van"),$_t.forEach(t),yJo=r(gke," \u2014 "),IX=n(gke,"A",{href:!0});var k_t=s(IX);LJo=r(k_t,"VanForImageClassification"),k_t.forEach(t),xJo=r(gke," (VAN model)"),gke.forEach(t),$Jo=i(Te),bv=n(Te,"LI",{});var hke=s(bv);lue=n(hke,"STRONG",{});var S_t=s(lue);kJo=r(S_t,"vit"),S_t.forEach(t),SJo=r(hke," \u2014 "),NX=n(hke,"A",{href:!0});var R_t=s(NX);RJo=r(R_t,"ViTForImageClassification"),R_t.forEach(t),PJo=r(hke," (ViT model)"),hke.forEach(t),Te.forEach(t),BJo=i(ma),vv=n(ma,"P",{});var pke=s(vv);IJo=r(pke,"The model is set in evaluation mode by default using "),iue=n(pke,"CODE",{});var P_t=s(iue);NJo=r(P_t,"model.eval()"),P_t.forEach(t),qJo=r(pke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),due=n(pke,"CODE",{});var B_t=s(due);jJo=r(B_t,"model.train()"),B_t.forEach(t),pke.forEach(t),DJo=i(ma),T(Fv.$$.fragment,ma),ma.forEach(t),Zs.forEach(t),Bqe=i(f),ld=n(f,"H2",{class:!0});var jDe=s(ld);Tv=n(jDe,"A",{id:!0,class:!0,href:!0});var I_t=s(Tv);cue=n(I_t,"SPAN",{});var N_t=s(cue);T(nL.$$.fragment,N_t),N_t.forEach(t),I_t.forEach(t),GJo=i(jDe),fue=n(jDe,"SPAN",{});var q_t=s(fue);OJo=r(q_t,"AutoModelForVision2Seq"),q_t.forEach(t),jDe.forEach(t),Iqe=i(f),Do=n(f,"DIV",{class:!0});var el=s(Do);T(sL.$$.fragment,el),VJo=i(el),id=n(el,"P",{});var jZ=s(id);XJo=r(jZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),qX=n(jZ,"A",{href:!0});var j_t=s(qX);zJo=r(j_t,"from_pretrained()"),j_t.forEach(t),WJo=r(jZ," class method or the "),jX=n(jZ,"A",{href:!0});var D_t=s(jX);QJo=r(D_t,"from_config()"),D_t.forEach(t),HJo=r(jZ,` class
method.`),jZ.forEach(t),UJo=i(el),lL=n(el,"P",{});var DDe=s(lL);JJo=r(DDe,"This class cannot be instantiated directly using "),mue=n(DDe,"CODE",{});var G_t=s(mue);YJo=r(G_t,"__init__()"),G_t.forEach(t),KJo=r(DDe," (throws an error)."),DDe.forEach(t),ZJo=i(el),ut=n(el,"DIV",{class:!0});var o6=s(ut);T(iL.$$.fragment,o6),eYo=i(o6),gue=n(o6,"P",{});var O_t=s(gue);oYo=r(O_t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),O_t.forEach(t),rYo=i(o6),dd=n(o6,"P",{});var DZ=s(dd);tYo=r(DZ,`Note:
Loading a model from its configuration file does `),hue=n(DZ,"STRONG",{});var V_t=s(hue);aYo=r(V_t,"not"),V_t.forEach(t),nYo=r(DZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),DX=n(DZ,"A",{href:!0});var X_t=s(DX);sYo=r(X_t,"from_pretrained()"),X_t.forEach(t),lYo=r(DZ," to load the model weights."),DZ.forEach(t),iYo=i(o6),T(Mv.$$.fragment,o6),o6.forEach(t),dYo=i(el),io=n(el,"DIV",{class:!0});var ga=s(io);T(dL.$$.fragment,ga),cYo=i(ga),pue=n(ga,"P",{});var z_t=s(pue);fYo=r(z_t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),z_t.forEach(t),mYo=i(ga),Da=n(ga,"P",{});var r6=s(Da);gYo=r(r6,"The model class to instantiate is selected based on the "),uue=n(r6,"CODE",{});var W_t=s(uue);hYo=r(W_t,"model_type"),W_t.forEach(t),pYo=r(r6,` property of the config object (either
passed as an argument or loaded from `),_ue=n(r6,"CODE",{});var Q_t=s(_ue);uYo=r(Q_t,"pretrained_model_name_or_path"),Q_t.forEach(t),_Yo=r(r6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bue=n(r6,"CODE",{});var H_t=s(bue);bYo=r(H_t,"pretrained_model_name_or_path"),H_t.forEach(t),vYo=r(r6,":"),r6.forEach(t),FYo=i(ga),vue=n(ga,"UL",{});var U_t=s(vue);Ev=n(U_t,"LI",{});var uke=s(Ev);Fue=n(uke,"STRONG",{});var J_t=s(Fue);TYo=r(J_t,"vision-encoder-decoder"),J_t.forEach(t),MYo=r(uke," \u2014 "),GX=n(uke,"A",{href:!0});var Y_t=s(GX);EYo=r(Y_t,"VisionEncoderDecoderModel"),Y_t.forEach(t),CYo=r(uke," (Vision Encoder decoder model)"),uke.forEach(t),U_t.forEach(t),wYo=i(ga),Cv=n(ga,"P",{});var _ke=s(Cv);AYo=r(_ke,"The model is set in evaluation mode by default using "),Tue=n(_ke,"CODE",{});var K_t=s(Tue);yYo=r(K_t,"model.eval()"),K_t.forEach(t),LYo=r(_ke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mue=n(_ke,"CODE",{});var Z_t=s(Mue);xYo=r(Z_t,"model.train()"),Z_t.forEach(t),_ke.forEach(t),$Yo=i(ga),T(wv.$$.fragment,ga),ga.forEach(t),el.forEach(t),Nqe=i(f),cd=n(f,"H2",{class:!0});var GDe=s(cd);Av=n(GDe,"A",{id:!0,class:!0,href:!0});var e1t=s(Av);Eue=n(e1t,"SPAN",{});var o1t=s(Eue);T(cL.$$.fragment,o1t),o1t.forEach(t),e1t.forEach(t),kYo=i(GDe),Cue=n(GDe,"SPAN",{});var r1t=s(Cue);SYo=r(r1t,"AutoModelForAudioClassification"),r1t.forEach(t),GDe.forEach(t),qqe=i(f),Go=n(f,"DIV",{class:!0});var ol=s(Go);T(fL.$$.fragment,ol),RYo=i(ol),fd=n(ol,"P",{});var GZ=s(fd);PYo=r(GZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),OX=n(GZ,"A",{href:!0});var t1t=s(OX);BYo=r(t1t,"from_pretrained()"),t1t.forEach(t),IYo=r(GZ," class method or the "),VX=n(GZ,"A",{href:!0});var a1t=s(VX);NYo=r(a1t,"from_config()"),a1t.forEach(t),qYo=r(GZ,` class
method.`),GZ.forEach(t),jYo=i(ol),mL=n(ol,"P",{});var ODe=s(mL);DYo=r(ODe,"This class cannot be instantiated directly using "),wue=n(ODe,"CODE",{});var n1t=s(wue);GYo=r(n1t,"__init__()"),n1t.forEach(t),OYo=r(ODe," (throws an error)."),ODe.forEach(t),VYo=i(ol),_t=n(ol,"DIV",{class:!0});var t6=s(_t);T(gL.$$.fragment,t6),XYo=i(t6),Aue=n(t6,"P",{});var s1t=s(Aue);zYo=r(s1t,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),s1t.forEach(t),WYo=i(t6),md=n(t6,"P",{});var OZ=s(md);QYo=r(OZ,`Note:
Loading a model from its configuration file does `),yue=n(OZ,"STRONG",{});var l1t=s(yue);HYo=r(l1t,"not"),l1t.forEach(t),UYo=r(OZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),XX=n(OZ,"A",{href:!0});var i1t=s(XX);JYo=r(i1t,"from_pretrained()"),i1t.forEach(t),YYo=r(OZ," to load the model weights."),OZ.forEach(t),KYo=i(t6),T(yv.$$.fragment,t6),t6.forEach(t),ZYo=i(ol),co=n(ol,"DIV",{class:!0});var ha=s(co);T(hL.$$.fragment,ha),eKo=i(ha),Lue=n(ha,"P",{});var d1t=s(Lue);oKo=r(d1t,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),d1t.forEach(t),rKo=i(ha),Ga=n(ha,"P",{});var a6=s(Ga);tKo=r(a6,"The model class to instantiate is selected based on the "),xue=n(a6,"CODE",{});var c1t=s(xue);aKo=r(c1t,"model_type"),c1t.forEach(t),nKo=r(a6,` property of the config object (either
passed as an argument or loaded from `),$ue=n(a6,"CODE",{});var f1t=s($ue);sKo=r(f1t,"pretrained_model_name_or_path"),f1t.forEach(t),lKo=r(a6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kue=n(a6,"CODE",{});var m1t=s(kue);iKo=r(m1t,"pretrained_model_name_or_path"),m1t.forEach(t),dKo=r(a6,":"),a6.forEach(t),cKo=i(ha),ke=n(ha,"UL",{});var Oe=s(ke);Lv=n(Oe,"LI",{});var bke=s(Lv);Sue=n(bke,"STRONG",{});var g1t=s(Sue);fKo=r(g1t,"data2vec-audio"),g1t.forEach(t),mKo=r(bke," \u2014 "),zX=n(bke,"A",{href:!0});var h1t=s(zX);gKo=r(h1t,"Data2VecAudioForSequenceClassification"),h1t.forEach(t),hKo=r(bke," (Data2VecAudio model)"),bke.forEach(t),pKo=i(Oe),xv=n(Oe,"LI",{});var vke=s(xv);Rue=n(vke,"STRONG",{});var p1t=s(Rue);uKo=r(p1t,"hubert"),p1t.forEach(t),_Ko=r(vke," \u2014 "),WX=n(vke,"A",{href:!0});var u1t=s(WX);bKo=r(u1t,"HubertForSequenceClassification"),u1t.forEach(t),vKo=r(vke," (Hubert model)"),vke.forEach(t),FKo=i(Oe),$v=n(Oe,"LI",{});var Fke=s($v);Pue=n(Fke,"STRONG",{});var _1t=s(Pue);TKo=r(_1t,"sew"),_1t.forEach(t),MKo=r(Fke," \u2014 "),QX=n(Fke,"A",{href:!0});var b1t=s(QX);EKo=r(b1t,"SEWForSequenceClassification"),b1t.forEach(t),CKo=r(Fke," (SEW model)"),Fke.forEach(t),wKo=i(Oe),kv=n(Oe,"LI",{});var Tke=s(kv);Bue=n(Tke,"STRONG",{});var v1t=s(Bue);AKo=r(v1t,"sew-d"),v1t.forEach(t),yKo=r(Tke," \u2014 "),HX=n(Tke,"A",{href:!0});var F1t=s(HX);LKo=r(F1t,"SEWDForSequenceClassification"),F1t.forEach(t),xKo=r(Tke," (SEW-D model)"),Tke.forEach(t),$Ko=i(Oe),Sv=n(Oe,"LI",{});var Mke=s(Sv);Iue=n(Mke,"STRONG",{});var T1t=s(Iue);kKo=r(T1t,"unispeech"),T1t.forEach(t),SKo=r(Mke," \u2014 "),UX=n(Mke,"A",{href:!0});var M1t=s(UX);RKo=r(M1t,"UniSpeechForSequenceClassification"),M1t.forEach(t),PKo=r(Mke," (UniSpeech model)"),Mke.forEach(t),BKo=i(Oe),Rv=n(Oe,"LI",{});var Eke=s(Rv);Nue=n(Eke,"STRONG",{});var E1t=s(Nue);IKo=r(E1t,"unispeech-sat"),E1t.forEach(t),NKo=r(Eke," \u2014 "),JX=n(Eke,"A",{href:!0});var C1t=s(JX);qKo=r(C1t,"UniSpeechSatForSequenceClassification"),C1t.forEach(t),jKo=r(Eke," (UniSpeechSat model)"),Eke.forEach(t),DKo=i(Oe),Pv=n(Oe,"LI",{});var Cke=s(Pv);que=n(Cke,"STRONG",{});var w1t=s(que);GKo=r(w1t,"wav2vec2"),w1t.forEach(t),OKo=r(Cke," \u2014 "),YX=n(Cke,"A",{href:!0});var A1t=s(YX);VKo=r(A1t,"Wav2Vec2ForSequenceClassification"),A1t.forEach(t),XKo=r(Cke," (Wav2Vec2 model)"),Cke.forEach(t),zKo=i(Oe),Bv=n(Oe,"LI",{});var wke=s(Bv);jue=n(wke,"STRONG",{});var y1t=s(jue);WKo=r(y1t,"wav2vec2-conformer"),y1t.forEach(t),QKo=r(wke," \u2014 "),KX=n(wke,"A",{href:!0});var L1t=s(KX);HKo=r(L1t,"Wav2Vec2ConformerForSequenceClassification"),L1t.forEach(t),UKo=r(wke," (Wav2Vec2-Conformer model)"),wke.forEach(t),JKo=i(Oe),Iv=n(Oe,"LI",{});var Ake=s(Iv);Due=n(Ake,"STRONG",{});var x1t=s(Due);YKo=r(x1t,"wavlm"),x1t.forEach(t),KKo=r(Ake," \u2014 "),ZX=n(Ake,"A",{href:!0});var $1t=s(ZX);ZKo=r($1t,"WavLMForSequenceClassification"),$1t.forEach(t),eZo=r(Ake," (WavLM model)"),Ake.forEach(t),Oe.forEach(t),oZo=i(ha),Nv=n(ha,"P",{});var yke=s(Nv);rZo=r(yke,"The model is set in evaluation mode by default using "),Gue=n(yke,"CODE",{});var k1t=s(Gue);tZo=r(k1t,"model.eval()"),k1t.forEach(t),aZo=r(yke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Oue=n(yke,"CODE",{});var S1t=s(Oue);nZo=r(S1t,"model.train()"),S1t.forEach(t),yke.forEach(t),sZo=i(ha),T(qv.$$.fragment,ha),ha.forEach(t),ol.forEach(t),jqe=i(f),gd=n(f,"H2",{class:!0});var VDe=s(gd);jv=n(VDe,"A",{id:!0,class:!0,href:!0});var R1t=s(jv);Vue=n(R1t,"SPAN",{});var P1t=s(Vue);T(pL.$$.fragment,P1t),P1t.forEach(t),R1t.forEach(t),lZo=i(VDe),Xue=n(VDe,"SPAN",{});var B1t=s(Xue);iZo=r(B1t,"AutoModelForAudioFrameClassification"),B1t.forEach(t),VDe.forEach(t),Dqe=i(f),Oo=n(f,"DIV",{class:!0});var rl=s(Oo);T(uL.$$.fragment,rl),dZo=i(rl),hd=n(rl,"P",{});var VZ=s(hd);cZo=r(VZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),ez=n(VZ,"A",{href:!0});var I1t=s(ez);fZo=r(I1t,"from_pretrained()"),I1t.forEach(t),mZo=r(VZ," class method or the "),oz=n(VZ,"A",{href:!0});var N1t=s(oz);gZo=r(N1t,"from_config()"),N1t.forEach(t),hZo=r(VZ,` class
method.`),VZ.forEach(t),pZo=i(rl),_L=n(rl,"P",{});var XDe=s(_L);uZo=r(XDe,"This class cannot be instantiated directly using "),zue=n(XDe,"CODE",{});var q1t=s(zue);_Zo=r(q1t,"__init__()"),q1t.forEach(t),bZo=r(XDe," (throws an error)."),XDe.forEach(t),vZo=i(rl),bt=n(rl,"DIV",{class:!0});var n6=s(bt);T(bL.$$.fragment,n6),FZo=i(n6),Wue=n(n6,"P",{});var j1t=s(Wue);TZo=r(j1t,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),j1t.forEach(t),MZo=i(n6),pd=n(n6,"P",{});var XZ=s(pd);EZo=r(XZ,`Note:
Loading a model from its configuration file does `),Que=n(XZ,"STRONG",{});var D1t=s(Que);CZo=r(D1t,"not"),D1t.forEach(t),wZo=r(XZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),rz=n(XZ,"A",{href:!0});var G1t=s(rz);AZo=r(G1t,"from_pretrained()"),G1t.forEach(t),yZo=r(XZ," to load the model weights."),XZ.forEach(t),LZo=i(n6),T(Dv.$$.fragment,n6),n6.forEach(t),xZo=i(rl),fo=n(rl,"DIV",{class:!0});var pa=s(fo);T(vL.$$.fragment,pa),$Zo=i(pa),Hue=n(pa,"P",{});var O1t=s(Hue);kZo=r(O1t,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),O1t.forEach(t),SZo=i(pa),Oa=n(pa,"P",{});var s6=s(Oa);RZo=r(s6,"The model class to instantiate is selected based on the "),Uue=n(s6,"CODE",{});var V1t=s(Uue);PZo=r(V1t,"model_type"),V1t.forEach(t),BZo=r(s6,` property of the config object (either
passed as an argument or loaded from `),Jue=n(s6,"CODE",{});var X1t=s(Jue);IZo=r(X1t,"pretrained_model_name_or_path"),X1t.forEach(t),NZo=r(s6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yue=n(s6,"CODE",{});var z1t=s(Yue);qZo=r(z1t,"pretrained_model_name_or_path"),z1t.forEach(t),jZo=r(s6,":"),s6.forEach(t),DZo=i(pa),Kr=n(pa,"UL",{});var tl=s(Kr);Gv=n(tl,"LI",{});var Lke=s(Gv);Kue=n(Lke,"STRONG",{});var W1t=s(Kue);GZo=r(W1t,"data2vec-audio"),W1t.forEach(t),OZo=r(Lke," \u2014 "),tz=n(Lke,"A",{href:!0});var Q1t=s(tz);VZo=r(Q1t,"Data2VecAudioForAudioFrameClassification"),Q1t.forEach(t),XZo=r(Lke," (Data2VecAudio model)"),Lke.forEach(t),zZo=i(tl),Ov=n(tl,"LI",{});var xke=s(Ov);Zue=n(xke,"STRONG",{});var H1t=s(Zue);WZo=r(H1t,"unispeech-sat"),H1t.forEach(t),QZo=r(xke," \u2014 "),az=n(xke,"A",{href:!0});var U1t=s(az);HZo=r(U1t,"UniSpeechSatForAudioFrameClassification"),U1t.forEach(t),UZo=r(xke," (UniSpeechSat model)"),xke.forEach(t),JZo=i(tl),Vv=n(tl,"LI",{});var $ke=s(Vv);e_e=n($ke,"STRONG",{});var J1t=s(e_e);YZo=r(J1t,"wav2vec2"),J1t.forEach(t),KZo=r($ke," \u2014 "),nz=n($ke,"A",{href:!0});var Y1t=s(nz);ZZo=r(Y1t,"Wav2Vec2ForAudioFrameClassification"),Y1t.forEach(t),eer=r($ke," (Wav2Vec2 model)"),$ke.forEach(t),oer=i(tl),Xv=n(tl,"LI",{});var kke=s(Xv);o_e=n(kke,"STRONG",{});var K1t=s(o_e);rer=r(K1t,"wav2vec2-conformer"),K1t.forEach(t),ter=r(kke," \u2014 "),sz=n(kke,"A",{href:!0});var Z1t=s(sz);aer=r(Z1t,"Wav2Vec2ConformerForAudioFrameClassification"),Z1t.forEach(t),ner=r(kke," (Wav2Vec2-Conformer model)"),kke.forEach(t),ser=i(tl),zv=n(tl,"LI",{});var Ske=s(zv);r_e=n(Ske,"STRONG",{});var e7t=s(r_e);ler=r(e7t,"wavlm"),e7t.forEach(t),ier=r(Ske," \u2014 "),lz=n(Ske,"A",{href:!0});var o7t=s(lz);der=r(o7t,"WavLMForAudioFrameClassification"),o7t.forEach(t),cer=r(Ske," (WavLM model)"),Ske.forEach(t),tl.forEach(t),fer=i(pa),Wv=n(pa,"P",{});var Rke=s(Wv);mer=r(Rke,"The model is set in evaluation mode by default using "),t_e=n(Rke,"CODE",{});var r7t=s(t_e);ger=r(r7t,"model.eval()"),r7t.forEach(t),her=r(Rke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),a_e=n(Rke,"CODE",{});var t7t=s(a_e);per=r(t7t,"model.train()"),t7t.forEach(t),Rke.forEach(t),uer=i(pa),T(Qv.$$.fragment,pa),pa.forEach(t),rl.forEach(t),Gqe=i(f),ud=n(f,"H2",{class:!0});var zDe=s(ud);Hv=n(zDe,"A",{id:!0,class:!0,href:!0});var a7t=s(Hv);n_e=n(a7t,"SPAN",{});var n7t=s(n_e);T(FL.$$.fragment,n7t),n7t.forEach(t),a7t.forEach(t),_er=i(zDe),s_e=n(zDe,"SPAN",{});var s7t=s(s_e);ber=r(s7t,"AutoModelForCTC"),s7t.forEach(t),zDe.forEach(t),Oqe=i(f),Vo=n(f,"DIV",{class:!0});var al=s(Vo);T(TL.$$.fragment,al),ver=i(al),_d=n(al,"P",{});var zZ=s(_d);Fer=r(zZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),iz=n(zZ,"A",{href:!0});var l7t=s(iz);Ter=r(l7t,"from_pretrained()"),l7t.forEach(t),Mer=r(zZ," class method or the "),dz=n(zZ,"A",{href:!0});var i7t=s(dz);Eer=r(i7t,"from_config()"),i7t.forEach(t),Cer=r(zZ,` class
method.`),zZ.forEach(t),wer=i(al),ML=n(al,"P",{});var WDe=s(ML);Aer=r(WDe,"This class cannot be instantiated directly using "),l_e=n(WDe,"CODE",{});var d7t=s(l_e);yer=r(d7t,"__init__()"),d7t.forEach(t),Ler=r(WDe," (throws an error)."),WDe.forEach(t),xer=i(al),vt=n(al,"DIV",{class:!0});var l6=s(vt);T(EL.$$.fragment,l6),$er=i(l6),i_e=n(l6,"P",{});var c7t=s(i_e);ker=r(c7t,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),c7t.forEach(t),Ser=i(l6),bd=n(l6,"P",{});var WZ=s(bd);Rer=r(WZ,`Note:
Loading a model from its configuration file does `),d_e=n(WZ,"STRONG",{});var f7t=s(d_e);Per=r(f7t,"not"),f7t.forEach(t),Ber=r(WZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),cz=n(WZ,"A",{href:!0});var m7t=s(cz);Ier=r(m7t,"from_pretrained()"),m7t.forEach(t),Ner=r(WZ," to load the model weights."),WZ.forEach(t),qer=i(l6),T(Uv.$$.fragment,l6),l6.forEach(t),jer=i(al),mo=n(al,"DIV",{class:!0});var ua=s(mo);T(CL.$$.fragment,ua),Der=i(ua),c_e=n(ua,"P",{});var g7t=s(c_e);Ger=r(g7t,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),g7t.forEach(t),Oer=i(ua),Va=n(ua,"P",{});var i6=s(Va);Ver=r(i6,"The model class to instantiate is selected based on the "),f_e=n(i6,"CODE",{});var h7t=s(f_e);Xer=r(h7t,"model_type"),h7t.forEach(t),zer=r(i6,` property of the config object (either
passed as an argument or loaded from `),m_e=n(i6,"CODE",{});var p7t=s(m_e);Wer=r(p7t,"pretrained_model_name_or_path"),p7t.forEach(t),Qer=r(i6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g_e=n(i6,"CODE",{});var u7t=s(g_e);Her=r(u7t,"pretrained_model_name_or_path"),u7t.forEach(t),Uer=r(i6,":"),i6.forEach(t),Jer=i(ua),Se=n(ua,"UL",{});var Ve=s(Se);Jv=n(Ve,"LI",{});var Pke=s(Jv);h_e=n(Pke,"STRONG",{});var _7t=s(h_e);Yer=r(_7t,"data2vec-audio"),_7t.forEach(t),Ker=r(Pke," \u2014 "),fz=n(Pke,"A",{href:!0});var b7t=s(fz);Zer=r(b7t,"Data2VecAudioForCTC"),b7t.forEach(t),eor=r(Pke," (Data2VecAudio model)"),Pke.forEach(t),oor=i(Ve),Yv=n(Ve,"LI",{});var Bke=s(Yv);p_e=n(Bke,"STRONG",{});var v7t=s(p_e);ror=r(v7t,"hubert"),v7t.forEach(t),tor=r(Bke," \u2014 "),mz=n(Bke,"A",{href:!0});var F7t=s(mz);aor=r(F7t,"HubertForCTC"),F7t.forEach(t),nor=r(Bke," (Hubert model)"),Bke.forEach(t),sor=i(Ve),Kv=n(Ve,"LI",{});var Ike=s(Kv);u_e=n(Ike,"STRONG",{});var T7t=s(u_e);lor=r(T7t,"sew"),T7t.forEach(t),ior=r(Ike," \u2014 "),gz=n(Ike,"A",{href:!0});var M7t=s(gz);dor=r(M7t,"SEWForCTC"),M7t.forEach(t),cor=r(Ike," (SEW model)"),Ike.forEach(t),mor=i(Ve),Zv=n(Ve,"LI",{});var Nke=s(Zv);__e=n(Nke,"STRONG",{});var E7t=s(__e);gor=r(E7t,"sew-d"),E7t.forEach(t),hor=r(Nke," \u2014 "),hz=n(Nke,"A",{href:!0});var C7t=s(hz);por=r(C7t,"SEWDForCTC"),C7t.forEach(t),uor=r(Nke," (SEW-D model)"),Nke.forEach(t),_or=i(Ve),eF=n(Ve,"LI",{});var qke=s(eF);b_e=n(qke,"STRONG",{});var w7t=s(b_e);bor=r(w7t,"unispeech"),w7t.forEach(t),vor=r(qke," \u2014 "),pz=n(qke,"A",{href:!0});var A7t=s(pz);For=r(A7t,"UniSpeechForCTC"),A7t.forEach(t),Tor=r(qke," (UniSpeech model)"),qke.forEach(t),Mor=i(Ve),oF=n(Ve,"LI",{});var jke=s(oF);v_e=n(jke,"STRONG",{});var y7t=s(v_e);Eor=r(y7t,"unispeech-sat"),y7t.forEach(t),Cor=r(jke," \u2014 "),uz=n(jke,"A",{href:!0});var L7t=s(uz);wor=r(L7t,"UniSpeechSatForCTC"),L7t.forEach(t),Aor=r(jke," (UniSpeechSat model)"),jke.forEach(t),yor=i(Ve),rF=n(Ve,"LI",{});var Dke=s(rF);F_e=n(Dke,"STRONG",{});var x7t=s(F_e);Lor=r(x7t,"wav2vec2"),x7t.forEach(t),xor=r(Dke," \u2014 "),_z=n(Dke,"A",{href:!0});var $7t=s(_z);$or=r($7t,"Wav2Vec2ForCTC"),$7t.forEach(t),kor=r(Dke," (Wav2Vec2 model)"),Dke.forEach(t),Sor=i(Ve),tF=n(Ve,"LI",{});var Gke=s(tF);T_e=n(Gke,"STRONG",{});var k7t=s(T_e);Ror=r(k7t,"wav2vec2-conformer"),k7t.forEach(t),Por=r(Gke," \u2014 "),bz=n(Gke,"A",{href:!0});var S7t=s(bz);Bor=r(S7t,"Wav2Vec2ConformerForCTC"),S7t.forEach(t),Ior=r(Gke," (Wav2Vec2-Conformer model)"),Gke.forEach(t),Nor=i(Ve),aF=n(Ve,"LI",{});var Oke=s(aF);M_e=n(Oke,"STRONG",{});var R7t=s(M_e);qor=r(R7t,"wavlm"),R7t.forEach(t),jor=r(Oke," \u2014 "),vz=n(Oke,"A",{href:!0});var P7t=s(vz);Dor=r(P7t,"WavLMForCTC"),P7t.forEach(t),Gor=r(Oke," (WavLM model)"),Oke.forEach(t),Ve.forEach(t),Oor=i(ua),nF=n(ua,"P",{});var Vke=s(nF);Vor=r(Vke,"The model is set in evaluation mode by default using "),E_e=n(Vke,"CODE",{});var B7t=s(E_e);Xor=r(B7t,"model.eval()"),B7t.forEach(t),zor=r(Vke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),C_e=n(Vke,"CODE",{});var I7t=s(C_e);Wor=r(I7t,"model.train()"),I7t.forEach(t),Vke.forEach(t),Qor=i(ua),T(sF.$$.fragment,ua),ua.forEach(t),al.forEach(t),Vqe=i(f),vd=n(f,"H2",{class:!0});var QDe=s(vd);lF=n(QDe,"A",{id:!0,class:!0,href:!0});var N7t=s(lF);w_e=n(N7t,"SPAN",{});var q7t=s(w_e);T(wL.$$.fragment,q7t),q7t.forEach(t),N7t.forEach(t),Hor=i(QDe),A_e=n(QDe,"SPAN",{});var j7t=s(A_e);Uor=r(j7t,"AutoModelForSpeechSeq2Seq"),j7t.forEach(t),QDe.forEach(t),Xqe=i(f),Xo=n(f,"DIV",{class:!0});var nl=s(Xo);T(AL.$$.fragment,nl),Jor=i(nl),Fd=n(nl,"P",{});var QZ=s(Fd);Yor=r(QZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Fz=n(QZ,"A",{href:!0});var D7t=s(Fz);Kor=r(D7t,"from_pretrained()"),D7t.forEach(t),Zor=r(QZ," class method or the "),Tz=n(QZ,"A",{href:!0});var G7t=s(Tz);err=r(G7t,"from_config()"),G7t.forEach(t),orr=r(QZ,` class
method.`),QZ.forEach(t),rrr=i(nl),yL=n(nl,"P",{});var HDe=s(yL);trr=r(HDe,"This class cannot be instantiated directly using "),y_e=n(HDe,"CODE",{});var O7t=s(y_e);arr=r(O7t,"__init__()"),O7t.forEach(t),nrr=r(HDe," (throws an error)."),HDe.forEach(t),srr=i(nl),Ft=n(nl,"DIV",{class:!0});var d6=s(Ft);T(LL.$$.fragment,d6),lrr=i(d6),L_e=n(d6,"P",{});var V7t=s(L_e);irr=r(V7t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),V7t.forEach(t),drr=i(d6),Td=n(d6,"P",{});var HZ=s(Td);crr=r(HZ,`Note:
Loading a model from its configuration file does `),x_e=n(HZ,"STRONG",{});var X7t=s(x_e);frr=r(X7t,"not"),X7t.forEach(t),mrr=r(HZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Mz=n(HZ,"A",{href:!0});var z7t=s(Mz);grr=r(z7t,"from_pretrained()"),z7t.forEach(t),hrr=r(HZ," to load the model weights."),HZ.forEach(t),prr=i(d6),T(iF.$$.fragment,d6),d6.forEach(t),urr=i(nl),go=n(nl,"DIV",{class:!0});var _a=s(go);T(xL.$$.fragment,_a),_rr=i(_a),$_e=n(_a,"P",{});var W7t=s($_e);brr=r(W7t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),W7t.forEach(t),vrr=i(_a),Xa=n(_a,"P",{});var c6=s(Xa);Frr=r(c6,"The model class to instantiate is selected based on the "),k_e=n(c6,"CODE",{});var Q7t=s(k_e);Trr=r(Q7t,"model_type"),Q7t.forEach(t),Mrr=r(c6,` property of the config object (either
passed as an argument or loaded from `),S_e=n(c6,"CODE",{});var H7t=s(S_e);Err=r(H7t,"pretrained_model_name_or_path"),H7t.forEach(t),Crr=r(c6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R_e=n(c6,"CODE",{});var U7t=s(R_e);wrr=r(U7t,"pretrained_model_name_or_path"),U7t.forEach(t),Arr=r(c6,":"),c6.forEach(t),yrr=i(_a),$L=n(_a,"UL",{});var UDe=s($L);dF=n(UDe,"LI",{});var Xke=s(dF);P_e=n(Xke,"STRONG",{});var J7t=s(P_e);Lrr=r(J7t,"speech-encoder-decoder"),J7t.forEach(t),xrr=r(Xke," \u2014 "),Ez=n(Xke,"A",{href:!0});var Y7t=s(Ez);$rr=r(Y7t,"SpeechEncoderDecoderModel"),Y7t.forEach(t),krr=r(Xke," (Speech Encoder decoder model)"),Xke.forEach(t),Srr=i(UDe),cF=n(UDe,"LI",{});var zke=s(cF);B_e=n(zke,"STRONG",{});var K7t=s(B_e);Rrr=r(K7t,"speech_to_text"),K7t.forEach(t),Prr=r(zke," \u2014 "),Cz=n(zke,"A",{href:!0});var Z7t=s(Cz);Brr=r(Z7t,"Speech2TextForConditionalGeneration"),Z7t.forEach(t),Irr=r(zke," (Speech2Text model)"),zke.forEach(t),UDe.forEach(t),Nrr=i(_a),fF=n(_a,"P",{});var Wke=s(fF);qrr=r(Wke,"The model is set in evaluation mode by default using "),I_e=n(Wke,"CODE",{});var ebt=s(I_e);jrr=r(ebt,"model.eval()"),ebt.forEach(t),Drr=r(Wke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),N_e=n(Wke,"CODE",{});var obt=s(N_e);Grr=r(obt,"model.train()"),obt.forEach(t),Wke.forEach(t),Orr=i(_a),T(mF.$$.fragment,_a),_a.forEach(t),nl.forEach(t),zqe=i(f),Md=n(f,"H2",{class:!0});var JDe=s(Md);gF=n(JDe,"A",{id:!0,class:!0,href:!0});var rbt=s(gF);q_e=n(rbt,"SPAN",{});var tbt=s(q_e);T(kL.$$.fragment,tbt),tbt.forEach(t),rbt.forEach(t),Vrr=i(JDe),j_e=n(JDe,"SPAN",{});var abt=s(j_e);Xrr=r(abt,"AutoModelForAudioXVector"),abt.forEach(t),JDe.forEach(t),Wqe=i(f),zo=n(f,"DIV",{class:!0});var sl=s(zo);T(SL.$$.fragment,sl),zrr=i(sl),Ed=n(sl,"P",{});var UZ=s(Ed);Wrr=r(UZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),wz=n(UZ,"A",{href:!0});var nbt=s(wz);Qrr=r(nbt,"from_pretrained()"),nbt.forEach(t),Hrr=r(UZ," class method or the "),Az=n(UZ,"A",{href:!0});var sbt=s(Az);Urr=r(sbt,"from_config()"),sbt.forEach(t),Jrr=r(UZ,` class
method.`),UZ.forEach(t),Yrr=i(sl),RL=n(sl,"P",{});var YDe=s(RL);Krr=r(YDe,"This class cannot be instantiated directly using "),D_e=n(YDe,"CODE",{});var lbt=s(D_e);Zrr=r(lbt,"__init__()"),lbt.forEach(t),etr=r(YDe," (throws an error)."),YDe.forEach(t),otr=i(sl),Tt=n(sl,"DIV",{class:!0});var f6=s(Tt);T(PL.$$.fragment,f6),rtr=i(f6),G_e=n(f6,"P",{});var ibt=s(G_e);ttr=r(ibt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),ibt.forEach(t),atr=i(f6),Cd=n(f6,"P",{});var JZ=s(Cd);ntr=r(JZ,`Note:
Loading a model from its configuration file does `),O_e=n(JZ,"STRONG",{});var dbt=s(O_e);str=r(dbt,"not"),dbt.forEach(t),ltr=r(JZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),yz=n(JZ,"A",{href:!0});var cbt=s(yz);itr=r(cbt,"from_pretrained()"),cbt.forEach(t),dtr=r(JZ," to load the model weights."),JZ.forEach(t),ctr=i(f6),T(hF.$$.fragment,f6),f6.forEach(t),ftr=i(sl),ho=n(sl,"DIV",{class:!0});var ba=s(ho);T(BL.$$.fragment,ba),mtr=i(ba),V_e=n(ba,"P",{});var fbt=s(V_e);gtr=r(fbt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),fbt.forEach(t),htr=i(ba),za=n(ba,"P",{});var m6=s(za);ptr=r(m6,"The model class to instantiate is selected based on the "),X_e=n(m6,"CODE",{});var mbt=s(X_e);utr=r(mbt,"model_type"),mbt.forEach(t),_tr=r(m6,` property of the config object (either
passed as an argument or loaded from `),z_e=n(m6,"CODE",{});var gbt=s(z_e);btr=r(gbt,"pretrained_model_name_or_path"),gbt.forEach(t),vtr=r(m6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W_e=n(m6,"CODE",{});var hbt=s(W_e);Ftr=r(hbt,"pretrained_model_name_or_path"),hbt.forEach(t),Ttr=r(m6,":"),m6.forEach(t),Mtr=i(ba),Zr=n(ba,"UL",{});var ll=s(Zr);pF=n(ll,"LI",{});var Qke=s(pF);Q_e=n(Qke,"STRONG",{});var pbt=s(Q_e);Etr=r(pbt,"data2vec-audio"),pbt.forEach(t),Ctr=r(Qke," \u2014 "),Lz=n(Qke,"A",{href:!0});var ubt=s(Lz);wtr=r(ubt,"Data2VecAudioForXVector"),ubt.forEach(t),Atr=r(Qke," (Data2VecAudio model)"),Qke.forEach(t),ytr=i(ll),uF=n(ll,"LI",{});var Hke=s(uF);H_e=n(Hke,"STRONG",{});var _bt=s(H_e);Ltr=r(_bt,"unispeech-sat"),_bt.forEach(t),xtr=r(Hke," \u2014 "),xz=n(Hke,"A",{href:!0});var bbt=s(xz);$tr=r(bbt,"UniSpeechSatForXVector"),bbt.forEach(t),ktr=r(Hke," (UniSpeechSat model)"),Hke.forEach(t),Str=i(ll),_F=n(ll,"LI",{});var Uke=s(_F);U_e=n(Uke,"STRONG",{});var vbt=s(U_e);Rtr=r(vbt,"wav2vec2"),vbt.forEach(t),Ptr=r(Uke," \u2014 "),$z=n(Uke,"A",{href:!0});var Fbt=s($z);Btr=r(Fbt,"Wav2Vec2ForXVector"),Fbt.forEach(t),Itr=r(Uke," (Wav2Vec2 model)"),Uke.forEach(t),Ntr=i(ll),bF=n(ll,"LI",{});var Jke=s(bF);J_e=n(Jke,"STRONG",{});var Tbt=s(J_e);qtr=r(Tbt,"wav2vec2-conformer"),Tbt.forEach(t),jtr=r(Jke," \u2014 "),kz=n(Jke,"A",{href:!0});var Mbt=s(kz);Dtr=r(Mbt,"Wav2Vec2ConformerForXVector"),Mbt.forEach(t),Gtr=r(Jke," (Wav2Vec2-Conformer model)"),Jke.forEach(t),Otr=i(ll),vF=n(ll,"LI",{});var Yke=s(vF);Y_e=n(Yke,"STRONG",{});var Ebt=s(Y_e);Vtr=r(Ebt,"wavlm"),Ebt.forEach(t),Xtr=r(Yke," \u2014 "),Sz=n(Yke,"A",{href:!0});var Cbt=s(Sz);ztr=r(Cbt,"WavLMForXVector"),Cbt.forEach(t),Wtr=r(Yke," (WavLM model)"),Yke.forEach(t),ll.forEach(t),Qtr=i(ba),FF=n(ba,"P",{});var Kke=s(FF);Htr=r(Kke,"The model is set in evaluation mode by default using "),K_e=n(Kke,"CODE",{});var wbt=s(K_e);Utr=r(wbt,"model.eval()"),wbt.forEach(t),Jtr=r(Kke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Z_e=n(Kke,"CODE",{});var Abt=s(Z_e);Ytr=r(Abt,"model.train()"),Abt.forEach(t),Kke.forEach(t),Ktr=i(ba),T(TF.$$.fragment,ba),ba.forEach(t),sl.forEach(t),Qqe=i(f),wd=n(f,"H2",{class:!0});var KDe=s(wd);MF=n(KDe,"A",{id:!0,class:!0,href:!0});var ybt=s(MF);e1e=n(ybt,"SPAN",{});var Lbt=s(e1e);T(IL.$$.fragment,Lbt),Lbt.forEach(t),ybt.forEach(t),Ztr=i(KDe),o1e=n(KDe,"SPAN",{});var xbt=s(o1e);ear=r(xbt,"AutoModelForMaskedImageModeling"),xbt.forEach(t),KDe.forEach(t),Hqe=i(f),Wo=n(f,"DIV",{class:!0});var il=s(Wo);T(NL.$$.fragment,il),oar=i(il),Ad=n(il,"P",{});var YZ=s(Ad);rar=r(YZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Rz=n(YZ,"A",{href:!0});var $bt=s(Rz);tar=r($bt,"from_pretrained()"),$bt.forEach(t),aar=r(YZ," class method or the "),Pz=n(YZ,"A",{href:!0});var kbt=s(Pz);nar=r(kbt,"from_config()"),kbt.forEach(t),sar=r(YZ,` class
method.`),YZ.forEach(t),lar=i(il),qL=n(il,"P",{});var ZDe=s(qL);iar=r(ZDe,"This class cannot be instantiated directly using "),r1e=n(ZDe,"CODE",{});var Sbt=s(r1e);dar=r(Sbt,"__init__()"),Sbt.forEach(t),car=r(ZDe," (throws an error)."),ZDe.forEach(t),far=i(il),Mt=n(il,"DIV",{class:!0});var g6=s(Mt);T(jL.$$.fragment,g6),mar=i(g6),t1e=n(g6,"P",{});var Rbt=s(t1e);gar=r(Rbt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Rbt.forEach(t),har=i(g6),yd=n(g6,"P",{});var KZ=s(yd);par=r(KZ,`Note:
Loading a model from its configuration file does `),a1e=n(KZ,"STRONG",{});var Pbt=s(a1e);uar=r(Pbt,"not"),Pbt.forEach(t),_ar=r(KZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Bz=n(KZ,"A",{href:!0});var Bbt=s(Bz);bar=r(Bbt,"from_pretrained()"),Bbt.forEach(t),Far=r(KZ," to load the model weights."),KZ.forEach(t),Tar=i(g6),T(EF.$$.fragment,g6),g6.forEach(t),Mar=i(il),po=n(il,"DIV",{class:!0});var va=s(po);T(DL.$$.fragment,va),Ear=i(va),n1e=n(va,"P",{});var Ibt=s(n1e);Car=r(Ibt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Ibt.forEach(t),war=i(va),Wa=n(va,"P",{});var h6=s(Wa);Aar=r(h6,"The model class to instantiate is selected based on the "),s1e=n(h6,"CODE",{});var Nbt=s(s1e);yar=r(Nbt,"model_type"),Nbt.forEach(t),Lar=r(h6,` property of the config object (either
passed as an argument or loaded from `),l1e=n(h6,"CODE",{});var qbt=s(l1e);xar=r(qbt,"pretrained_model_name_or_path"),qbt.forEach(t),$ar=r(h6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i1e=n(h6,"CODE",{});var jbt=s(i1e);kar=r(jbt,"pretrained_model_name_or_path"),jbt.forEach(t),Sar=r(h6,":"),h6.forEach(t),Rar=i(va),Ld=n(va,"UL",{});var ZZ=s(Ld);CF=n(ZZ,"LI",{});var Zke=s(CF);d1e=n(Zke,"STRONG",{});var Dbt=s(d1e);Par=r(Dbt,"deit"),Dbt.forEach(t),Bar=r(Zke," \u2014 "),Iz=n(Zke,"A",{href:!0});var Gbt=s(Iz);Iar=r(Gbt,"DeiTForMaskedImageModeling"),Gbt.forEach(t),Nar=r(Zke," (DeiT model)"),Zke.forEach(t),qar=i(ZZ),wF=n(ZZ,"LI",{});var eSe=s(wF);c1e=n(eSe,"STRONG",{});var Obt=s(c1e);jar=r(Obt,"swin"),Obt.forEach(t),Dar=r(eSe," \u2014 "),Nz=n(eSe,"A",{href:!0});var Vbt=s(Nz);Gar=r(Vbt,"SwinForMaskedImageModeling"),Vbt.forEach(t),Oar=r(eSe," (Swin model)"),eSe.forEach(t),Var=i(ZZ),AF=n(ZZ,"LI",{});var oSe=s(AF);f1e=n(oSe,"STRONG",{});var Xbt=s(f1e);Xar=r(Xbt,"vit"),Xbt.forEach(t),zar=r(oSe," \u2014 "),qz=n(oSe,"A",{href:!0});var zbt=s(qz);War=r(zbt,"ViTForMaskedImageModeling"),zbt.forEach(t),Qar=r(oSe," (ViT model)"),oSe.forEach(t),ZZ.forEach(t),Har=i(va),yF=n(va,"P",{});var rSe=s(yF);Uar=r(rSe,"The model is set in evaluation mode by default using "),m1e=n(rSe,"CODE",{});var Wbt=s(m1e);Jar=r(Wbt,"model.eval()"),Wbt.forEach(t),Yar=r(rSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),g1e=n(rSe,"CODE",{});var Qbt=s(g1e);Kar=r(Qbt,"model.train()"),Qbt.forEach(t),rSe.forEach(t),Zar=i(va),T(LF.$$.fragment,va),va.forEach(t),il.forEach(t),Uqe=i(f),xd=n(f,"H2",{class:!0});var eGe=s(xd);xF=n(eGe,"A",{id:!0,class:!0,href:!0});var Hbt=s(xF);h1e=n(Hbt,"SPAN",{});var Ubt=s(h1e);T(GL.$$.fragment,Ubt),Ubt.forEach(t),Hbt.forEach(t),enr=i(eGe),p1e=n(eGe,"SPAN",{});var Jbt=s(p1e);onr=r(Jbt,"AutoModelForObjectDetection"),Jbt.forEach(t),eGe.forEach(t),Jqe=i(f),Qo=n(f,"DIV",{class:!0});var dl=s(Qo);T(OL.$$.fragment,dl),rnr=i(dl),$d=n(dl,"P",{});var eee=s($d);tnr=r(eee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),jz=n(eee,"A",{href:!0});var Ybt=s(jz);anr=r(Ybt,"from_pretrained()"),Ybt.forEach(t),nnr=r(eee," class method or the "),Dz=n(eee,"A",{href:!0});var Kbt=s(Dz);snr=r(Kbt,"from_config()"),Kbt.forEach(t),lnr=r(eee,` class
method.`),eee.forEach(t),inr=i(dl),VL=n(dl,"P",{});var oGe=s(VL);dnr=r(oGe,"This class cannot be instantiated directly using "),u1e=n(oGe,"CODE",{});var Zbt=s(u1e);cnr=r(Zbt,"__init__()"),Zbt.forEach(t),fnr=r(oGe," (throws an error)."),oGe.forEach(t),mnr=i(dl),Et=n(dl,"DIV",{class:!0});var p6=s(Et);T(XL.$$.fragment,p6),gnr=i(p6),_1e=n(p6,"P",{});var e2t=s(_1e);hnr=r(e2t,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),e2t.forEach(t),pnr=i(p6),kd=n(p6,"P",{});var oee=s(kd);unr=r(oee,`Note:
Loading a model from its configuration file does `),b1e=n(oee,"STRONG",{});var o2t=s(b1e);_nr=r(o2t,"not"),o2t.forEach(t),bnr=r(oee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Gz=n(oee,"A",{href:!0});var r2t=s(Gz);vnr=r(r2t,"from_pretrained()"),r2t.forEach(t),Fnr=r(oee," to load the model weights."),oee.forEach(t),Tnr=i(p6),T($F.$$.fragment,p6),p6.forEach(t),Mnr=i(dl),uo=n(dl,"DIV",{class:!0});var Fa=s(uo);T(zL.$$.fragment,Fa),Enr=i(Fa),v1e=n(Fa,"P",{});var t2t=s(v1e);Cnr=r(t2t,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),t2t.forEach(t),wnr=i(Fa),Qa=n(Fa,"P",{});var u6=s(Qa);Anr=r(u6,"The model class to instantiate is selected based on the "),F1e=n(u6,"CODE",{});var a2t=s(F1e);ynr=r(a2t,"model_type"),a2t.forEach(t),Lnr=r(u6,` property of the config object (either
passed as an argument or loaded from `),T1e=n(u6,"CODE",{});var n2t=s(T1e);xnr=r(n2t,"pretrained_model_name_or_path"),n2t.forEach(t),$nr=r(u6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M1e=n(u6,"CODE",{});var s2t=s(M1e);knr=r(s2t,"pretrained_model_name_or_path"),s2t.forEach(t),Snr=r(u6,":"),u6.forEach(t),Rnr=i(Fa),WL=n(Fa,"UL",{});var rGe=s(WL);kF=n(rGe,"LI",{});var tSe=s(kF);E1e=n(tSe,"STRONG",{});var l2t=s(E1e);Pnr=r(l2t,"detr"),l2t.forEach(t),Bnr=r(tSe," \u2014 "),Oz=n(tSe,"A",{href:!0});var i2t=s(Oz);Inr=r(i2t,"DetrForObjectDetection"),i2t.forEach(t),Nnr=r(tSe," (DETR model)"),tSe.forEach(t),qnr=i(rGe),SF=n(rGe,"LI",{});var aSe=s(SF);C1e=n(aSe,"STRONG",{});var d2t=s(C1e);jnr=r(d2t,"yolos"),d2t.forEach(t),Dnr=r(aSe," \u2014 "),Vz=n(aSe,"A",{href:!0});var c2t=s(Vz);Gnr=r(c2t,"YolosForObjectDetection"),c2t.forEach(t),Onr=r(aSe," (YOLOS model)"),aSe.forEach(t),rGe.forEach(t),Vnr=i(Fa),RF=n(Fa,"P",{});var nSe=s(RF);Xnr=r(nSe,"The model is set in evaluation mode by default using "),w1e=n(nSe,"CODE",{});var f2t=s(w1e);znr=r(f2t,"model.eval()"),f2t.forEach(t),Wnr=r(nSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),A1e=n(nSe,"CODE",{});var m2t=s(A1e);Qnr=r(m2t,"model.train()"),m2t.forEach(t),nSe.forEach(t),Hnr=i(Fa),T(PF.$$.fragment,Fa),Fa.forEach(t),dl.forEach(t),Yqe=i(f),Sd=n(f,"H2",{class:!0});var tGe=s(Sd);BF=n(tGe,"A",{id:!0,class:!0,href:!0});var g2t=s(BF);y1e=n(g2t,"SPAN",{});var h2t=s(y1e);T(QL.$$.fragment,h2t),h2t.forEach(t),g2t.forEach(t),Unr=i(tGe),L1e=n(tGe,"SPAN",{});var p2t=s(L1e);Jnr=r(p2t,"AutoModelForImageSegmentation"),p2t.forEach(t),tGe.forEach(t),Kqe=i(f),Ho=n(f,"DIV",{class:!0});var cl=s(Ho);T(HL.$$.fragment,cl),Ynr=i(cl),Rd=n(cl,"P",{});var ree=s(Rd);Knr=r(ree,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Xz=n(ree,"A",{href:!0});var u2t=s(Xz);Znr=r(u2t,"from_pretrained()"),u2t.forEach(t),esr=r(ree," class method or the "),zz=n(ree,"A",{href:!0});var _2t=s(zz);osr=r(_2t,"from_config()"),_2t.forEach(t),rsr=r(ree,` class
method.`),ree.forEach(t),tsr=i(cl),UL=n(cl,"P",{});var aGe=s(UL);asr=r(aGe,"This class cannot be instantiated directly using "),x1e=n(aGe,"CODE",{});var b2t=s(x1e);nsr=r(b2t,"__init__()"),b2t.forEach(t),ssr=r(aGe," (throws an error)."),aGe.forEach(t),lsr=i(cl),Ct=n(cl,"DIV",{class:!0});var _6=s(Ct);T(JL.$$.fragment,_6),isr=i(_6),$1e=n(_6,"P",{});var v2t=s($1e);dsr=r(v2t,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),v2t.forEach(t),csr=i(_6),Pd=n(_6,"P",{});var tee=s(Pd);fsr=r(tee,`Note:
Loading a model from its configuration file does `),k1e=n(tee,"STRONG",{});var F2t=s(k1e);msr=r(F2t,"not"),F2t.forEach(t),gsr=r(tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Wz=n(tee,"A",{href:!0});var T2t=s(Wz);hsr=r(T2t,"from_pretrained()"),T2t.forEach(t),psr=r(tee," to load the model weights."),tee.forEach(t),usr=i(_6),T(IF.$$.fragment,_6),_6.forEach(t),_sr=i(cl),_o=n(cl,"DIV",{class:!0});var Ta=s(_o);T(YL.$$.fragment,Ta),bsr=i(Ta),S1e=n(Ta,"P",{});var M2t=s(S1e);vsr=r(M2t,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),M2t.forEach(t),Fsr=i(Ta),Ha=n(Ta,"P",{});var b6=s(Ha);Tsr=r(b6,"The model class to instantiate is selected based on the "),R1e=n(b6,"CODE",{});var E2t=s(R1e);Msr=r(E2t,"model_type"),E2t.forEach(t),Esr=r(b6,` property of the config object (either
passed as an argument or loaded from `),P1e=n(b6,"CODE",{});var C2t=s(P1e);Csr=r(C2t,"pretrained_model_name_or_path"),C2t.forEach(t),wsr=r(b6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B1e=n(b6,"CODE",{});var w2t=s(B1e);Asr=r(w2t,"pretrained_model_name_or_path"),w2t.forEach(t),ysr=r(b6,":"),b6.forEach(t),Lsr=i(Ta),I1e=n(Ta,"UL",{});var A2t=s(I1e);NF=n(A2t,"LI",{});var sSe=s(NF);N1e=n(sSe,"STRONG",{});var y2t=s(N1e);xsr=r(y2t,"detr"),y2t.forEach(t),$sr=r(sSe," \u2014 "),Qz=n(sSe,"A",{href:!0});var L2t=s(Qz);ksr=r(L2t,"DetrForSegmentation"),L2t.forEach(t),Ssr=r(sSe," (DETR model)"),sSe.forEach(t),A2t.forEach(t),Rsr=i(Ta),qF=n(Ta,"P",{});var lSe=s(qF);Psr=r(lSe,"The model is set in evaluation mode by default using "),q1e=n(lSe,"CODE",{});var x2t=s(q1e);Bsr=r(x2t,"model.eval()"),x2t.forEach(t),Isr=r(lSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),j1e=n(lSe,"CODE",{});var $2t=s(j1e);Nsr=r($2t,"model.train()"),$2t.forEach(t),lSe.forEach(t),qsr=i(Ta),T(jF.$$.fragment,Ta),Ta.forEach(t),cl.forEach(t),Zqe=i(f),Bd=n(f,"H2",{class:!0});var nGe=s(Bd);DF=n(nGe,"A",{id:!0,class:!0,href:!0});var k2t=s(DF);D1e=n(k2t,"SPAN",{});var S2t=s(D1e);T(KL.$$.fragment,S2t),S2t.forEach(t),k2t.forEach(t),jsr=i(nGe),G1e=n(nGe,"SPAN",{});var R2t=s(G1e);Dsr=r(R2t,"AutoModelForSemanticSegmentation"),R2t.forEach(t),nGe.forEach(t),eje=i(f),Uo=n(f,"DIV",{class:!0});var fl=s(Uo);T(ZL.$$.fragment,fl),Gsr=i(fl),Id=n(fl,"P",{});var aee=s(Id);Osr=r(aee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Hz=n(aee,"A",{href:!0});var P2t=s(Hz);Vsr=r(P2t,"from_pretrained()"),P2t.forEach(t),Xsr=r(aee," class method or the "),Uz=n(aee,"A",{href:!0});var B2t=s(Uz);zsr=r(B2t,"from_config()"),B2t.forEach(t),Wsr=r(aee,` class
method.`),aee.forEach(t),Qsr=i(fl),e8=n(fl,"P",{});var sGe=s(e8);Hsr=r(sGe,"This class cannot be instantiated directly using "),O1e=n(sGe,"CODE",{});var I2t=s(O1e);Usr=r(I2t,"__init__()"),I2t.forEach(t),Jsr=r(sGe," (throws an error)."),sGe.forEach(t),Ysr=i(fl),wt=n(fl,"DIV",{class:!0});var v6=s(wt);T(o8.$$.fragment,v6),Ksr=i(v6),V1e=n(v6,"P",{});var N2t=s(V1e);Zsr=r(N2t,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),N2t.forEach(t),elr=i(v6),Nd=n(v6,"P",{});var nee=s(Nd);olr=r(nee,`Note:
Loading a model from its configuration file does `),X1e=n(nee,"STRONG",{});var q2t=s(X1e);rlr=r(q2t,"not"),q2t.forEach(t),tlr=r(nee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Jz=n(nee,"A",{href:!0});var j2t=s(Jz);alr=r(j2t,"from_pretrained()"),j2t.forEach(t),nlr=r(nee," to load the model weights."),nee.forEach(t),slr=i(v6),T(GF.$$.fragment,v6),v6.forEach(t),llr=i(fl),bo=n(fl,"DIV",{class:!0});var Ma=s(bo);T(r8.$$.fragment,Ma),ilr=i(Ma),z1e=n(Ma,"P",{});var D2t=s(z1e);dlr=r(D2t,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),D2t.forEach(t),clr=i(Ma),Ua=n(Ma,"P",{});var F6=s(Ua);flr=r(F6,"The model class to instantiate is selected based on the "),W1e=n(F6,"CODE",{});var G2t=s(W1e);mlr=r(G2t,"model_type"),G2t.forEach(t),glr=r(F6,` property of the config object (either
passed as an argument or loaded from `),Q1e=n(F6,"CODE",{});var O2t=s(Q1e);hlr=r(O2t,"pretrained_model_name_or_path"),O2t.forEach(t),plr=r(F6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H1e=n(F6,"CODE",{});var V2t=s(H1e);ulr=r(V2t,"pretrained_model_name_or_path"),V2t.forEach(t),_lr=r(F6,":"),F6.forEach(t),blr=i(Ma),Ja=n(Ma,"UL",{});var T6=s(Ja);OF=n(T6,"LI",{});var iSe=s(OF);U1e=n(iSe,"STRONG",{});var X2t=s(U1e);vlr=r(X2t,"beit"),X2t.forEach(t),Flr=r(iSe," \u2014 "),Yz=n(iSe,"A",{href:!0});var z2t=s(Yz);Tlr=r(z2t,"BeitForSemanticSegmentation"),z2t.forEach(t),Mlr=r(iSe," (BEiT model)"),iSe.forEach(t),Elr=i(T6),VF=n(T6,"LI",{});var dSe=s(VF);J1e=n(dSe,"STRONG",{});var W2t=s(J1e);Clr=r(W2t,"data2vec-vision"),W2t.forEach(t),wlr=r(dSe," \u2014 "),Kz=n(dSe,"A",{href:!0});var Q2t=s(Kz);Alr=r(Q2t,"Data2VecVisionForSemanticSegmentation"),Q2t.forEach(t),ylr=r(dSe," (Data2VecVision model)"),dSe.forEach(t),Llr=i(T6),XF=n(T6,"LI",{});var cSe=s(XF);Y1e=n(cSe,"STRONG",{});var H2t=s(Y1e);xlr=r(H2t,"dpt"),H2t.forEach(t),$lr=r(cSe," \u2014 "),Zz=n(cSe,"A",{href:!0});var U2t=s(Zz);klr=r(U2t,"DPTForSemanticSegmentation"),U2t.forEach(t),Slr=r(cSe," (DPT model)"),cSe.forEach(t),Rlr=i(T6),zF=n(T6,"LI",{});var fSe=s(zF);K1e=n(fSe,"STRONG",{});var J2t=s(K1e);Plr=r(J2t,"segformer"),J2t.forEach(t),Blr=r(fSe," \u2014 "),eW=n(fSe,"A",{href:!0});var Y2t=s(eW);Ilr=r(Y2t,"SegformerForSemanticSegmentation"),Y2t.forEach(t),Nlr=r(fSe," (SegFormer model)"),fSe.forEach(t),T6.forEach(t),qlr=i(Ma),WF=n(Ma,"P",{});var mSe=s(WF);jlr=r(mSe,"The model is set in evaluation mode by default using "),Z1e=n(mSe,"CODE",{});var K2t=s(Z1e);Dlr=r(K2t,"model.eval()"),K2t.forEach(t),Glr=r(mSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),e7e=n(mSe,"CODE",{});var Z2t=s(e7e);Olr=r(Z2t,"model.train()"),Z2t.forEach(t),mSe.forEach(t),Vlr=i(Ma),T(QF.$$.fragment,Ma),Ma.forEach(t),fl.forEach(t),oje=i(f),qd=n(f,"H2",{class:!0});var lGe=s(qd);HF=n(lGe,"A",{id:!0,class:!0,href:!0});var e4t=s(HF);o7e=n(e4t,"SPAN",{});var o4t=s(o7e);T(t8.$$.fragment,o4t),o4t.forEach(t),e4t.forEach(t),Xlr=i(lGe),r7e=n(lGe,"SPAN",{});var r4t=s(r7e);zlr=r(r4t,"AutoModelForInstanceSegmentation"),r4t.forEach(t),lGe.forEach(t),rje=i(f),Jo=n(f,"DIV",{class:!0});var ml=s(Jo);T(a8.$$.fragment,ml),Wlr=i(ml),jd=n(ml,"P",{});var see=s(jd);Qlr=r(see,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),oW=n(see,"A",{href:!0});var t4t=s(oW);Hlr=r(t4t,"from_pretrained()"),t4t.forEach(t),Ulr=r(see," class method or the "),rW=n(see,"A",{href:!0});var a4t=s(rW);Jlr=r(a4t,"from_config()"),a4t.forEach(t),Ylr=r(see,` class
method.`),see.forEach(t),Klr=i(ml),n8=n(ml,"P",{});var iGe=s(n8);Zlr=r(iGe,"This class cannot be instantiated directly using "),t7e=n(iGe,"CODE",{});var n4t=s(t7e);eir=r(n4t,"__init__()"),n4t.forEach(t),oir=r(iGe," (throws an error)."),iGe.forEach(t),rir=i(ml),At=n(ml,"DIV",{class:!0});var M6=s(At);T(s8.$$.fragment,M6),tir=i(M6),a7e=n(M6,"P",{});var s4t=s(a7e);air=r(s4t,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),s4t.forEach(t),nir=i(M6),Dd=n(M6,"P",{});var lee=s(Dd);sir=r(lee,`Note:
Loading a model from its configuration file does `),n7e=n(lee,"STRONG",{});var l4t=s(n7e);lir=r(l4t,"not"),l4t.forEach(t),iir=r(lee,` load the model weights. It only affects the
model\u2019s configuration. Use `),tW=n(lee,"A",{href:!0});var i4t=s(tW);dir=r(i4t,"from_pretrained()"),i4t.forEach(t),cir=r(lee," to load the model weights."),lee.forEach(t),fir=i(M6),T(UF.$$.fragment,M6),M6.forEach(t),mir=i(ml),vo=n(ml,"DIV",{class:!0});var Ea=s(vo);T(l8.$$.fragment,Ea),gir=i(Ea),s7e=n(Ea,"P",{});var d4t=s(s7e);hir=r(d4t,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),d4t.forEach(t),pir=i(Ea),Ya=n(Ea,"P",{});var E6=s(Ya);uir=r(E6,"The model class to instantiate is selected based on the "),l7e=n(E6,"CODE",{});var c4t=s(l7e);_ir=r(c4t,"model_type"),c4t.forEach(t),bir=r(E6,` property of the config object (either
passed as an argument or loaded from `),i7e=n(E6,"CODE",{});var f4t=s(i7e);vir=r(f4t,"pretrained_model_name_or_path"),f4t.forEach(t),Fir=r(E6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d7e=n(E6,"CODE",{});var m4t=s(d7e);Tir=r(m4t,"pretrained_model_name_or_path"),m4t.forEach(t),Mir=r(E6,":"),E6.forEach(t),Eir=i(Ea),c7e=n(Ea,"UL",{});var g4t=s(c7e);JF=n(g4t,"LI",{});var gSe=s(JF);f7e=n(gSe,"STRONG",{});var h4t=s(f7e);Cir=r(h4t,"maskformer"),h4t.forEach(t),wir=r(gSe," \u2014 "),aW=n(gSe,"A",{href:!0});var p4t=s(aW);Air=r(p4t,"MaskFormerForInstanceSegmentation"),p4t.forEach(t),yir=r(gSe," (MaskFormer model)"),gSe.forEach(t),g4t.forEach(t),Lir=i(Ea),YF=n(Ea,"P",{});var hSe=s(YF);xir=r(hSe,"The model is set in evaluation mode by default using "),m7e=n(hSe,"CODE",{});var u4t=s(m7e);$ir=r(u4t,"model.eval()"),u4t.forEach(t),kir=r(hSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),g7e=n(hSe,"CODE",{});var _4t=s(g7e);Sir=r(_4t,"model.train()"),_4t.forEach(t),hSe.forEach(t),Rir=i(Ea),T(KF.$$.fragment,Ea),Ea.forEach(t),ml.forEach(t),tje=i(f),Gd=n(f,"H2",{class:!0});var dGe=s(Gd);ZF=n(dGe,"A",{id:!0,class:!0,href:!0});var b4t=s(ZF);h7e=n(b4t,"SPAN",{});var v4t=s(h7e);T(i8.$$.fragment,v4t),v4t.forEach(t),b4t.forEach(t),Pir=i(dGe),p7e=n(dGe,"SPAN",{});var F4t=s(p7e);Bir=r(F4t,"TFAutoModel"),F4t.forEach(t),dGe.forEach(t),aje=i(f),Yo=n(f,"DIV",{class:!0});var gl=s(Yo);T(d8.$$.fragment,gl),Iir=i(gl),Od=n(gl,"P",{});var iee=s(Od);Nir=r(iee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),nW=n(iee,"A",{href:!0});var T4t=s(nW);qir=r(T4t,"from_pretrained()"),T4t.forEach(t),jir=r(iee," class method or the "),sW=n(iee,"A",{href:!0});var M4t=s(sW);Dir=r(M4t,"from_config()"),M4t.forEach(t),Gir=r(iee,` class
method.`),iee.forEach(t),Oir=i(gl),c8=n(gl,"P",{});var cGe=s(c8);Vir=r(cGe,"This class cannot be instantiated directly using "),u7e=n(cGe,"CODE",{});var E4t=s(u7e);Xir=r(E4t,"__init__()"),E4t.forEach(t),zir=r(cGe," (throws an error)."),cGe.forEach(t),Wir=i(gl),yt=n(gl,"DIV",{class:!0});var C6=s(yt);T(f8.$$.fragment,C6),Qir=i(C6),_7e=n(C6,"P",{});var C4t=s(_7e);Hir=r(C4t,"Instantiates one of the base model classes of the library from a configuration."),C4t.forEach(t),Uir=i(C6),Vd=n(C6,"P",{});var dee=s(Vd);Jir=r(dee,`Note:
Loading a model from its configuration file does `),b7e=n(dee,"STRONG",{});var w4t=s(b7e);Yir=r(w4t,"not"),w4t.forEach(t),Kir=r(dee,` load the model weights. It only affects the
model\u2019s configuration. Use `),lW=n(dee,"A",{href:!0});var A4t=s(lW);Zir=r(A4t,"from_pretrained()"),A4t.forEach(t),edr=r(dee," to load the model weights."),dee.forEach(t),odr=i(C6),T(e0.$$.fragment,C6),C6.forEach(t),rdr=i(gl),wr=n(gl,"DIV",{class:!0});var hl=s(wr);T(m8.$$.fragment,hl),tdr=i(hl),v7e=n(hl,"P",{});var y4t=s(v7e);adr=r(y4t,"Instantiate one of the base model classes of the library from a pretrained model."),y4t.forEach(t),ndr=i(hl),Ka=n(hl,"P",{});var w6=s(Ka);sdr=r(w6,"The model class to instantiate is selected based on the "),F7e=n(w6,"CODE",{});var L4t=s(F7e);ldr=r(L4t,"model_type"),L4t.forEach(t),idr=r(w6,` property of the config object (either
passed as an argument or loaded from `),T7e=n(w6,"CODE",{});var x4t=s(T7e);ddr=r(x4t,"pretrained_model_name_or_path"),x4t.forEach(t),cdr=r(w6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M7e=n(w6,"CODE",{});var $4t=s(M7e);fdr=r($4t,"pretrained_model_name_or_path"),$4t.forEach(t),mdr=r(w6,":"),w6.forEach(t),gdr=i(hl),q=n(hl,"UL",{});var D=s(q);o0=n(D,"LI",{});var pSe=s(o0);E7e=n(pSe,"STRONG",{});var k4t=s(E7e);hdr=r(k4t,"albert"),k4t.forEach(t),pdr=r(pSe," \u2014 "),iW=n(pSe,"A",{href:!0});var S4t=s(iW);udr=r(S4t,"TFAlbertModel"),S4t.forEach(t),_dr=r(pSe," (ALBERT model)"),pSe.forEach(t),bdr=i(D),r0=n(D,"LI",{});var uSe=s(r0);C7e=n(uSe,"STRONG",{});var R4t=s(C7e);vdr=r(R4t,"bart"),R4t.forEach(t),Fdr=r(uSe," \u2014 "),dW=n(uSe,"A",{href:!0});var P4t=s(dW);Tdr=r(P4t,"TFBartModel"),P4t.forEach(t),Mdr=r(uSe," (BART model)"),uSe.forEach(t),Edr=i(D),t0=n(D,"LI",{});var _Se=s(t0);w7e=n(_Se,"STRONG",{});var B4t=s(w7e);Cdr=r(B4t,"bert"),B4t.forEach(t),wdr=r(_Se," \u2014 "),cW=n(_Se,"A",{href:!0});var I4t=s(cW);Adr=r(I4t,"TFBertModel"),I4t.forEach(t),ydr=r(_Se," (BERT model)"),_Se.forEach(t),Ldr=i(D),a0=n(D,"LI",{});var bSe=s(a0);A7e=n(bSe,"STRONG",{});var N4t=s(A7e);xdr=r(N4t,"blenderbot"),N4t.forEach(t),$dr=r(bSe," \u2014 "),fW=n(bSe,"A",{href:!0});var q4t=s(fW);kdr=r(q4t,"TFBlenderbotModel"),q4t.forEach(t),Sdr=r(bSe," (Blenderbot model)"),bSe.forEach(t),Rdr=i(D),n0=n(D,"LI",{});var vSe=s(n0);y7e=n(vSe,"STRONG",{});var j4t=s(y7e);Pdr=r(j4t,"blenderbot-small"),j4t.forEach(t),Bdr=r(vSe," \u2014 "),mW=n(vSe,"A",{href:!0});var D4t=s(mW);Idr=r(D4t,"TFBlenderbotSmallModel"),D4t.forEach(t),Ndr=r(vSe," (BlenderbotSmall model)"),vSe.forEach(t),qdr=i(D),s0=n(D,"LI",{});var FSe=s(s0);L7e=n(FSe,"STRONG",{});var G4t=s(L7e);jdr=r(G4t,"camembert"),G4t.forEach(t),Ddr=r(FSe," \u2014 "),gW=n(FSe,"A",{href:!0});var O4t=s(gW);Gdr=r(O4t,"TFCamembertModel"),O4t.forEach(t),Odr=r(FSe," (CamemBERT model)"),FSe.forEach(t),Vdr=i(D),l0=n(D,"LI",{});var TSe=s(l0);x7e=n(TSe,"STRONG",{});var V4t=s(x7e);Xdr=r(V4t,"clip"),V4t.forEach(t),zdr=r(TSe," \u2014 "),hW=n(TSe,"A",{href:!0});var X4t=s(hW);Wdr=r(X4t,"TFCLIPModel"),X4t.forEach(t),Qdr=r(TSe," (CLIP model)"),TSe.forEach(t),Hdr=i(D),i0=n(D,"LI",{});var MSe=s(i0);$7e=n(MSe,"STRONG",{});var z4t=s($7e);Udr=r(z4t,"convbert"),z4t.forEach(t),Jdr=r(MSe," \u2014 "),pW=n(MSe,"A",{href:!0});var W4t=s(pW);Ydr=r(W4t,"TFConvBertModel"),W4t.forEach(t),Kdr=r(MSe," (ConvBERT model)"),MSe.forEach(t),Zdr=i(D),d0=n(D,"LI",{});var ESe=s(d0);k7e=n(ESe,"STRONG",{});var Q4t=s(k7e);ecr=r(Q4t,"convnext"),Q4t.forEach(t),ocr=r(ESe," \u2014 "),uW=n(ESe,"A",{href:!0});var H4t=s(uW);rcr=r(H4t,"TFConvNextModel"),H4t.forEach(t),tcr=r(ESe," (ConvNext model)"),ESe.forEach(t),acr=i(D),c0=n(D,"LI",{});var CSe=s(c0);S7e=n(CSe,"STRONG",{});var U4t=s(S7e);ncr=r(U4t,"ctrl"),U4t.forEach(t),scr=r(CSe," \u2014 "),_W=n(CSe,"A",{href:!0});var J4t=s(_W);lcr=r(J4t,"TFCTRLModel"),J4t.forEach(t),icr=r(CSe," (CTRL model)"),CSe.forEach(t),dcr=i(D),f0=n(D,"LI",{});var wSe=s(f0);R7e=n(wSe,"STRONG",{});var Y4t=s(R7e);ccr=r(Y4t,"data2vec-vision"),Y4t.forEach(t),fcr=r(wSe," \u2014 "),bW=n(wSe,"A",{href:!0});var K4t=s(bW);mcr=r(K4t,"TFData2VecVisionModel"),K4t.forEach(t),gcr=r(wSe," (Data2VecVision model)"),wSe.forEach(t),hcr=i(D),m0=n(D,"LI",{});var ASe=s(m0);P7e=n(ASe,"STRONG",{});var Z4t=s(P7e);pcr=r(Z4t,"deberta"),Z4t.forEach(t),ucr=r(ASe," \u2014 "),vW=n(ASe,"A",{href:!0});var evt=s(vW);_cr=r(evt,"TFDebertaModel"),evt.forEach(t),bcr=r(ASe," (DeBERTa model)"),ASe.forEach(t),vcr=i(D),g0=n(D,"LI",{});var ySe=s(g0);B7e=n(ySe,"STRONG",{});var ovt=s(B7e);Fcr=r(ovt,"deberta-v2"),ovt.forEach(t),Tcr=r(ySe," \u2014 "),FW=n(ySe,"A",{href:!0});var rvt=s(FW);Mcr=r(rvt,"TFDebertaV2Model"),rvt.forEach(t),Ecr=r(ySe," (DeBERTa-v2 model)"),ySe.forEach(t),Ccr=i(D),h0=n(D,"LI",{});var LSe=s(h0);I7e=n(LSe,"STRONG",{});var tvt=s(I7e);wcr=r(tvt,"distilbert"),tvt.forEach(t),Acr=r(LSe," \u2014 "),TW=n(LSe,"A",{href:!0});var avt=s(TW);ycr=r(avt,"TFDistilBertModel"),avt.forEach(t),Lcr=r(LSe," (DistilBERT model)"),LSe.forEach(t),xcr=i(D),p0=n(D,"LI",{});var xSe=s(p0);N7e=n(xSe,"STRONG",{});var nvt=s(N7e);$cr=r(nvt,"dpr"),nvt.forEach(t),kcr=r(xSe," \u2014 "),MW=n(xSe,"A",{href:!0});var svt=s(MW);Scr=r(svt,"TFDPRQuestionEncoder"),svt.forEach(t),Rcr=r(xSe," (DPR model)"),xSe.forEach(t),Pcr=i(D),u0=n(D,"LI",{});var $Se=s(u0);q7e=n($Se,"STRONG",{});var lvt=s(q7e);Bcr=r(lvt,"electra"),lvt.forEach(t),Icr=r($Se," \u2014 "),EW=n($Se,"A",{href:!0});var ivt=s(EW);Ncr=r(ivt,"TFElectraModel"),ivt.forEach(t),qcr=r($Se," (ELECTRA model)"),$Se.forEach(t),jcr=i(D),_0=n(D,"LI",{});var kSe=s(_0);j7e=n(kSe,"STRONG",{});var dvt=s(j7e);Dcr=r(dvt,"flaubert"),dvt.forEach(t),Gcr=r(kSe," \u2014 "),CW=n(kSe,"A",{href:!0});var cvt=s(CW);Ocr=r(cvt,"TFFlaubertModel"),cvt.forEach(t),Vcr=r(kSe," (FlauBERT model)"),kSe.forEach(t),Xcr=i(D),Is=n(D,"LI",{});var X$=s(Is);D7e=n(X$,"STRONG",{});var fvt=s(D7e);zcr=r(fvt,"funnel"),fvt.forEach(t),Wcr=r(X$," \u2014 "),wW=n(X$,"A",{href:!0});var mvt=s(wW);Qcr=r(mvt,"TFFunnelModel"),mvt.forEach(t),Hcr=r(X$," or "),AW=n(X$,"A",{href:!0});var gvt=s(AW);Ucr=r(gvt,"TFFunnelBaseModel"),gvt.forEach(t),Jcr=r(X$," (Funnel Transformer model)"),X$.forEach(t),Ycr=i(D),b0=n(D,"LI",{});var SSe=s(b0);G7e=n(SSe,"STRONG",{});var hvt=s(G7e);Kcr=r(hvt,"gpt2"),hvt.forEach(t),Zcr=r(SSe," \u2014 "),yW=n(SSe,"A",{href:!0});var pvt=s(yW);efr=r(pvt,"TFGPT2Model"),pvt.forEach(t),ofr=r(SSe," (OpenAI GPT-2 model)"),SSe.forEach(t),rfr=i(D),v0=n(D,"LI",{});var RSe=s(v0);O7e=n(RSe,"STRONG",{});var uvt=s(O7e);tfr=r(uvt,"gptj"),uvt.forEach(t),afr=r(RSe," \u2014 "),LW=n(RSe,"A",{href:!0});var _vt=s(LW);nfr=r(_vt,"TFGPTJModel"),_vt.forEach(t),sfr=r(RSe," (GPT-J model)"),RSe.forEach(t),lfr=i(D),F0=n(D,"LI",{});var PSe=s(F0);V7e=n(PSe,"STRONG",{});var bvt=s(V7e);ifr=r(bvt,"hubert"),bvt.forEach(t),dfr=r(PSe," \u2014 "),xW=n(PSe,"A",{href:!0});var vvt=s(xW);cfr=r(vvt,"TFHubertModel"),vvt.forEach(t),ffr=r(PSe," (Hubert model)"),PSe.forEach(t),mfr=i(D),T0=n(D,"LI",{});var BSe=s(T0);X7e=n(BSe,"STRONG",{});var Fvt=s(X7e);gfr=r(Fvt,"layoutlm"),Fvt.forEach(t),hfr=r(BSe," \u2014 "),$W=n(BSe,"A",{href:!0});var Tvt=s($W);pfr=r(Tvt,"TFLayoutLMModel"),Tvt.forEach(t),ufr=r(BSe," (LayoutLM model)"),BSe.forEach(t),_fr=i(D),M0=n(D,"LI",{});var ISe=s(M0);z7e=n(ISe,"STRONG",{});var Mvt=s(z7e);bfr=r(Mvt,"led"),Mvt.forEach(t),vfr=r(ISe," \u2014 "),kW=n(ISe,"A",{href:!0});var Evt=s(kW);Ffr=r(Evt,"TFLEDModel"),Evt.forEach(t),Tfr=r(ISe," (LED model)"),ISe.forEach(t),Mfr=i(D),E0=n(D,"LI",{});var NSe=s(E0);W7e=n(NSe,"STRONG",{});var Cvt=s(W7e);Efr=r(Cvt,"longformer"),Cvt.forEach(t),Cfr=r(NSe," \u2014 "),SW=n(NSe,"A",{href:!0});var wvt=s(SW);wfr=r(wvt,"TFLongformerModel"),wvt.forEach(t),Afr=r(NSe," (Longformer model)"),NSe.forEach(t),yfr=i(D),C0=n(D,"LI",{});var qSe=s(C0);Q7e=n(qSe,"STRONG",{});var Avt=s(Q7e);Lfr=r(Avt,"lxmert"),Avt.forEach(t),xfr=r(qSe," \u2014 "),RW=n(qSe,"A",{href:!0});var yvt=s(RW);$fr=r(yvt,"TFLxmertModel"),yvt.forEach(t),kfr=r(qSe," (LXMERT model)"),qSe.forEach(t),Sfr=i(D),w0=n(D,"LI",{});var jSe=s(w0);H7e=n(jSe,"STRONG",{});var Lvt=s(H7e);Rfr=r(Lvt,"marian"),Lvt.forEach(t),Pfr=r(jSe," \u2014 "),PW=n(jSe,"A",{href:!0});var xvt=s(PW);Bfr=r(xvt,"TFMarianModel"),xvt.forEach(t),Ifr=r(jSe," (Marian model)"),jSe.forEach(t),Nfr=i(D),A0=n(D,"LI",{});var DSe=s(A0);U7e=n(DSe,"STRONG",{});var $vt=s(U7e);qfr=r($vt,"mbart"),$vt.forEach(t),jfr=r(DSe," \u2014 "),BW=n(DSe,"A",{href:!0});var kvt=s(BW);Dfr=r(kvt,"TFMBartModel"),kvt.forEach(t),Gfr=r(DSe," (mBART model)"),DSe.forEach(t),Ofr=i(D),y0=n(D,"LI",{});var GSe=s(y0);J7e=n(GSe,"STRONG",{});var Svt=s(J7e);Vfr=r(Svt,"mobilebert"),Svt.forEach(t),Xfr=r(GSe," \u2014 "),IW=n(GSe,"A",{href:!0});var Rvt=s(IW);zfr=r(Rvt,"TFMobileBertModel"),Rvt.forEach(t),Wfr=r(GSe," (MobileBERT model)"),GSe.forEach(t),Qfr=i(D),L0=n(D,"LI",{});var OSe=s(L0);Y7e=n(OSe,"STRONG",{});var Pvt=s(Y7e);Hfr=r(Pvt,"mpnet"),Pvt.forEach(t),Ufr=r(OSe," \u2014 "),NW=n(OSe,"A",{href:!0});var Bvt=s(NW);Jfr=r(Bvt,"TFMPNetModel"),Bvt.forEach(t),Yfr=r(OSe," (MPNet model)"),OSe.forEach(t),Kfr=i(D),x0=n(D,"LI",{});var VSe=s(x0);K7e=n(VSe,"STRONG",{});var Ivt=s(K7e);Zfr=r(Ivt,"mt5"),Ivt.forEach(t),emr=r(VSe," \u2014 "),qW=n(VSe,"A",{href:!0});var Nvt=s(qW);omr=r(Nvt,"TFMT5Model"),Nvt.forEach(t),rmr=r(VSe," (mT5 model)"),VSe.forEach(t),tmr=i(D),$0=n(D,"LI",{});var XSe=s($0);Z7e=n(XSe,"STRONG",{});var qvt=s(Z7e);amr=r(qvt,"openai-gpt"),qvt.forEach(t),nmr=r(XSe," \u2014 "),jW=n(XSe,"A",{href:!0});var jvt=s(jW);smr=r(jvt,"TFOpenAIGPTModel"),jvt.forEach(t),lmr=r(XSe," (OpenAI GPT model)"),XSe.forEach(t),imr=i(D),k0=n(D,"LI",{});var zSe=s(k0);ebe=n(zSe,"STRONG",{});var Dvt=s(ebe);dmr=r(Dvt,"pegasus"),Dvt.forEach(t),cmr=r(zSe," \u2014 "),DW=n(zSe,"A",{href:!0});var Gvt=s(DW);fmr=r(Gvt,"TFPegasusModel"),Gvt.forEach(t),mmr=r(zSe," (Pegasus model)"),zSe.forEach(t),gmr=i(D),S0=n(D,"LI",{});var WSe=s(S0);obe=n(WSe,"STRONG",{});var Ovt=s(obe);hmr=r(Ovt,"rembert"),Ovt.forEach(t),pmr=r(WSe," \u2014 "),GW=n(WSe,"A",{href:!0});var Vvt=s(GW);umr=r(Vvt,"TFRemBertModel"),Vvt.forEach(t),_mr=r(WSe," (RemBERT model)"),WSe.forEach(t),bmr=i(D),R0=n(D,"LI",{});var QSe=s(R0);rbe=n(QSe,"STRONG",{});var Xvt=s(rbe);vmr=r(Xvt,"roberta"),Xvt.forEach(t),Fmr=r(QSe," \u2014 "),OW=n(QSe,"A",{href:!0});var zvt=s(OW);Tmr=r(zvt,"TFRobertaModel"),zvt.forEach(t),Mmr=r(QSe," (RoBERTa model)"),QSe.forEach(t),Emr=i(D),P0=n(D,"LI",{});var HSe=s(P0);tbe=n(HSe,"STRONG",{});var Wvt=s(tbe);Cmr=r(Wvt,"roformer"),Wvt.forEach(t),wmr=r(HSe," \u2014 "),VW=n(HSe,"A",{href:!0});var Qvt=s(VW);Amr=r(Qvt,"TFRoFormerModel"),Qvt.forEach(t),ymr=r(HSe," (RoFormer model)"),HSe.forEach(t),Lmr=i(D),B0=n(D,"LI",{});var USe=s(B0);abe=n(USe,"STRONG",{});var Hvt=s(abe);xmr=r(Hvt,"speech_to_text"),Hvt.forEach(t),$mr=r(USe," \u2014 "),XW=n(USe,"A",{href:!0});var Uvt=s(XW);kmr=r(Uvt,"TFSpeech2TextModel"),Uvt.forEach(t),Smr=r(USe," (Speech2Text model)"),USe.forEach(t),Rmr=i(D),I0=n(D,"LI",{});var JSe=s(I0);nbe=n(JSe,"STRONG",{});var Jvt=s(nbe);Pmr=r(Jvt,"swin"),Jvt.forEach(t),Bmr=r(JSe," \u2014 "),zW=n(JSe,"A",{href:!0});var Yvt=s(zW);Imr=r(Yvt,"TFSwinModel"),Yvt.forEach(t),Nmr=r(JSe," (Swin model)"),JSe.forEach(t),qmr=i(D),N0=n(D,"LI",{});var YSe=s(N0);sbe=n(YSe,"STRONG",{});var Kvt=s(sbe);jmr=r(Kvt,"t5"),Kvt.forEach(t),Dmr=r(YSe," \u2014 "),WW=n(YSe,"A",{href:!0});var Zvt=s(WW);Gmr=r(Zvt,"TFT5Model"),Zvt.forEach(t),Omr=r(YSe," (T5 model)"),YSe.forEach(t),Vmr=i(D),q0=n(D,"LI",{});var KSe=s(q0);lbe=n(KSe,"STRONG",{});var eFt=s(lbe);Xmr=r(eFt,"tapas"),eFt.forEach(t),zmr=r(KSe," \u2014 "),QW=n(KSe,"A",{href:!0});var oFt=s(QW);Wmr=r(oFt,"TFTapasModel"),oFt.forEach(t),Qmr=r(KSe," (TAPAS model)"),KSe.forEach(t),Hmr=i(D),j0=n(D,"LI",{});var ZSe=s(j0);ibe=n(ZSe,"STRONG",{});var rFt=s(ibe);Umr=r(rFt,"transfo-xl"),rFt.forEach(t),Jmr=r(ZSe," \u2014 "),HW=n(ZSe,"A",{href:!0});var tFt=s(HW);Ymr=r(tFt,"TFTransfoXLModel"),tFt.forEach(t),Kmr=r(ZSe," (Transformer-XL model)"),ZSe.forEach(t),Zmr=i(D),D0=n(D,"LI",{});var eRe=s(D0);dbe=n(eRe,"STRONG",{});var aFt=s(dbe);egr=r(aFt,"vit"),aFt.forEach(t),ogr=r(eRe," \u2014 "),UW=n(eRe,"A",{href:!0});var nFt=s(UW);rgr=r(nFt,"TFViTModel"),nFt.forEach(t),tgr=r(eRe," (ViT model)"),eRe.forEach(t),agr=i(D),G0=n(D,"LI",{});var oRe=s(G0);cbe=n(oRe,"STRONG",{});var sFt=s(cbe);ngr=r(sFt,"vit_mae"),sFt.forEach(t),sgr=r(oRe," \u2014 "),JW=n(oRe,"A",{href:!0});var lFt=s(JW);lgr=r(lFt,"TFViTMAEModel"),lFt.forEach(t),igr=r(oRe," (ViTMAE model)"),oRe.forEach(t),dgr=i(D),O0=n(D,"LI",{});var rRe=s(O0);fbe=n(rRe,"STRONG",{});var iFt=s(fbe);cgr=r(iFt,"wav2vec2"),iFt.forEach(t),fgr=r(rRe," \u2014 "),YW=n(rRe,"A",{href:!0});var dFt=s(YW);mgr=r(dFt,"TFWav2Vec2Model"),dFt.forEach(t),ggr=r(rRe," (Wav2Vec2 model)"),rRe.forEach(t),hgr=i(D),V0=n(D,"LI",{});var tRe=s(V0);mbe=n(tRe,"STRONG",{});var cFt=s(mbe);pgr=r(cFt,"xlm"),cFt.forEach(t),ugr=r(tRe," \u2014 "),KW=n(tRe,"A",{href:!0});var fFt=s(KW);_gr=r(fFt,"TFXLMModel"),fFt.forEach(t),bgr=r(tRe," (XLM model)"),tRe.forEach(t),vgr=i(D),X0=n(D,"LI",{});var aRe=s(X0);gbe=n(aRe,"STRONG",{});var mFt=s(gbe);Fgr=r(mFt,"xlm-roberta"),mFt.forEach(t),Tgr=r(aRe," \u2014 "),ZW=n(aRe,"A",{href:!0});var gFt=s(ZW);Mgr=r(gFt,"TFXLMRobertaModel"),gFt.forEach(t),Egr=r(aRe," (XLM-RoBERTa model)"),aRe.forEach(t),Cgr=i(D),z0=n(D,"LI",{});var nRe=s(z0);hbe=n(nRe,"STRONG",{});var hFt=s(hbe);wgr=r(hFt,"xlnet"),hFt.forEach(t),Agr=r(nRe," \u2014 "),eQ=n(nRe,"A",{href:!0});var pFt=s(eQ);ygr=r(pFt,"TFXLNetModel"),pFt.forEach(t),Lgr=r(nRe," (XLNet model)"),nRe.forEach(t),D.forEach(t),xgr=i(hl),T(W0.$$.fragment,hl),hl.forEach(t),gl.forEach(t),nje=i(f),Xd=n(f,"H2",{class:!0});var fGe=s(Xd);Q0=n(fGe,"A",{id:!0,class:!0,href:!0});var uFt=s(Q0);pbe=n(uFt,"SPAN",{});var _Ft=s(pbe);T(g8.$$.fragment,_Ft),_Ft.forEach(t),uFt.forEach(t),$gr=i(fGe),ube=n(fGe,"SPAN",{});var bFt=s(ube);kgr=r(bFt,"TFAutoModelForPreTraining"),bFt.forEach(t),fGe.forEach(t),sje=i(f),Ko=n(f,"DIV",{class:!0});var pl=s(Ko);T(h8.$$.fragment,pl),Sgr=i(pl),zd=n(pl,"P",{});var cee=s(zd);Rgr=r(cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),oQ=n(cee,"A",{href:!0});var vFt=s(oQ);Pgr=r(vFt,"from_pretrained()"),vFt.forEach(t),Bgr=r(cee," class method or the "),rQ=n(cee,"A",{href:!0});var FFt=s(rQ);Igr=r(FFt,"from_config()"),FFt.forEach(t),Ngr=r(cee,` class
method.`),cee.forEach(t),qgr=i(pl),p8=n(pl,"P",{});var mGe=s(p8);jgr=r(mGe,"This class cannot be instantiated directly using "),_be=n(mGe,"CODE",{});var TFt=s(_be);Dgr=r(TFt,"__init__()"),TFt.forEach(t),Ggr=r(mGe," (throws an error)."),mGe.forEach(t),Ogr=i(pl),Lt=n(pl,"DIV",{class:!0});var A6=s(Lt);T(u8.$$.fragment,A6),Vgr=i(A6),bbe=n(A6,"P",{});var MFt=s(bbe);Xgr=r(MFt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),MFt.forEach(t),zgr=i(A6),Wd=n(A6,"P",{});var fee=s(Wd);Wgr=r(fee,`Note:
Loading a model from its configuration file does `),vbe=n(fee,"STRONG",{});var EFt=s(vbe);Qgr=r(EFt,"not"),EFt.forEach(t),Hgr=r(fee,` load the model weights. It only affects the
model\u2019s configuration. Use `),tQ=n(fee,"A",{href:!0});var CFt=s(tQ);Ugr=r(CFt,"from_pretrained()"),CFt.forEach(t),Jgr=r(fee," to load the model weights."),fee.forEach(t),Ygr=i(A6),T(H0.$$.fragment,A6),A6.forEach(t),Kgr=i(pl),Ar=n(pl,"DIV",{class:!0});var ul=s(Ar);T(_8.$$.fragment,ul),Zgr=i(ul),Fbe=n(ul,"P",{});var wFt=s(Fbe);ehr=r(wFt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),wFt.forEach(t),ohr=i(ul),Za=n(ul,"P",{});var y6=s(Za);rhr=r(y6,"The model class to instantiate is selected based on the "),Tbe=n(y6,"CODE",{});var AFt=s(Tbe);thr=r(AFt,"model_type"),AFt.forEach(t),ahr=r(y6,` property of the config object (either
passed as an argument or loaded from `),Mbe=n(y6,"CODE",{});var yFt=s(Mbe);nhr=r(yFt,"pretrained_model_name_or_path"),yFt.forEach(t),shr=r(y6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ebe=n(y6,"CODE",{});var LFt=s(Ebe);lhr=r(LFt,"pretrained_model_name_or_path"),LFt.forEach(t),ihr=r(y6,":"),y6.forEach(t),dhr=i(ul),se=n(ul,"UL",{});var le=s(se);U0=n(le,"LI",{});var sRe=s(U0);Cbe=n(sRe,"STRONG",{});var xFt=s(Cbe);chr=r(xFt,"albert"),xFt.forEach(t),fhr=r(sRe," \u2014 "),aQ=n(sRe,"A",{href:!0});var $Ft=s(aQ);mhr=r($Ft,"TFAlbertForPreTraining"),$Ft.forEach(t),ghr=r(sRe," (ALBERT model)"),sRe.forEach(t),hhr=i(le),J0=n(le,"LI",{});var lRe=s(J0);wbe=n(lRe,"STRONG",{});var kFt=s(wbe);phr=r(kFt,"bart"),kFt.forEach(t),uhr=r(lRe," \u2014 "),nQ=n(lRe,"A",{href:!0});var SFt=s(nQ);_hr=r(SFt,"TFBartForConditionalGeneration"),SFt.forEach(t),bhr=r(lRe," (BART model)"),lRe.forEach(t),vhr=i(le),Y0=n(le,"LI",{});var iRe=s(Y0);Abe=n(iRe,"STRONG",{});var RFt=s(Abe);Fhr=r(RFt,"bert"),RFt.forEach(t),Thr=r(iRe," \u2014 "),sQ=n(iRe,"A",{href:!0});var PFt=s(sQ);Mhr=r(PFt,"TFBertForPreTraining"),PFt.forEach(t),Ehr=r(iRe," (BERT model)"),iRe.forEach(t),Chr=i(le),K0=n(le,"LI",{});var dRe=s(K0);ybe=n(dRe,"STRONG",{});var BFt=s(ybe);whr=r(BFt,"camembert"),BFt.forEach(t),Ahr=r(dRe," \u2014 "),lQ=n(dRe,"A",{href:!0});var IFt=s(lQ);yhr=r(IFt,"TFCamembertForMaskedLM"),IFt.forEach(t),Lhr=r(dRe," (CamemBERT model)"),dRe.forEach(t),xhr=i(le),Z0=n(le,"LI",{});var cRe=s(Z0);Lbe=n(cRe,"STRONG",{});var NFt=s(Lbe);$hr=r(NFt,"ctrl"),NFt.forEach(t),khr=r(cRe," \u2014 "),iQ=n(cRe,"A",{href:!0});var qFt=s(iQ);Shr=r(qFt,"TFCTRLLMHeadModel"),qFt.forEach(t),Rhr=r(cRe," (CTRL model)"),cRe.forEach(t),Phr=i(le),eT=n(le,"LI",{});var fRe=s(eT);xbe=n(fRe,"STRONG",{});var jFt=s(xbe);Bhr=r(jFt,"distilbert"),jFt.forEach(t),Ihr=r(fRe," \u2014 "),dQ=n(fRe,"A",{href:!0});var DFt=s(dQ);Nhr=r(DFt,"TFDistilBertForMaskedLM"),DFt.forEach(t),qhr=r(fRe," (DistilBERT model)"),fRe.forEach(t),jhr=i(le),oT=n(le,"LI",{});var mRe=s(oT);$be=n(mRe,"STRONG",{});var GFt=s($be);Dhr=r(GFt,"electra"),GFt.forEach(t),Ghr=r(mRe," \u2014 "),cQ=n(mRe,"A",{href:!0});var OFt=s(cQ);Ohr=r(OFt,"TFElectraForPreTraining"),OFt.forEach(t),Vhr=r(mRe," (ELECTRA model)"),mRe.forEach(t),Xhr=i(le),rT=n(le,"LI",{});var gRe=s(rT);kbe=n(gRe,"STRONG",{});var VFt=s(kbe);zhr=r(VFt,"flaubert"),VFt.forEach(t),Whr=r(gRe," \u2014 "),fQ=n(gRe,"A",{href:!0});var XFt=s(fQ);Qhr=r(XFt,"TFFlaubertWithLMHeadModel"),XFt.forEach(t),Hhr=r(gRe," (FlauBERT model)"),gRe.forEach(t),Uhr=i(le),tT=n(le,"LI",{});var hRe=s(tT);Sbe=n(hRe,"STRONG",{});var zFt=s(Sbe);Jhr=r(zFt,"funnel"),zFt.forEach(t),Yhr=r(hRe," \u2014 "),mQ=n(hRe,"A",{href:!0});var WFt=s(mQ);Khr=r(WFt,"TFFunnelForPreTraining"),WFt.forEach(t),Zhr=r(hRe," (Funnel Transformer model)"),hRe.forEach(t),epr=i(le),aT=n(le,"LI",{});var pRe=s(aT);Rbe=n(pRe,"STRONG",{});var QFt=s(Rbe);opr=r(QFt,"gpt2"),QFt.forEach(t),rpr=r(pRe," \u2014 "),gQ=n(pRe,"A",{href:!0});var HFt=s(gQ);tpr=r(HFt,"TFGPT2LMHeadModel"),HFt.forEach(t),apr=r(pRe," (OpenAI GPT-2 model)"),pRe.forEach(t),npr=i(le),nT=n(le,"LI",{});var uRe=s(nT);Pbe=n(uRe,"STRONG",{});var UFt=s(Pbe);spr=r(UFt,"layoutlm"),UFt.forEach(t),lpr=r(uRe," \u2014 "),hQ=n(uRe,"A",{href:!0});var JFt=s(hQ);ipr=r(JFt,"TFLayoutLMForMaskedLM"),JFt.forEach(t),dpr=r(uRe," (LayoutLM model)"),uRe.forEach(t),cpr=i(le),sT=n(le,"LI",{});var _Re=s(sT);Bbe=n(_Re,"STRONG",{});var YFt=s(Bbe);fpr=r(YFt,"lxmert"),YFt.forEach(t),mpr=r(_Re," \u2014 "),pQ=n(_Re,"A",{href:!0});var KFt=s(pQ);gpr=r(KFt,"TFLxmertForPreTraining"),KFt.forEach(t),hpr=r(_Re," (LXMERT model)"),_Re.forEach(t),ppr=i(le),lT=n(le,"LI",{});var bRe=s(lT);Ibe=n(bRe,"STRONG",{});var ZFt=s(Ibe);upr=r(ZFt,"mobilebert"),ZFt.forEach(t),_pr=r(bRe," \u2014 "),uQ=n(bRe,"A",{href:!0});var e0t=s(uQ);bpr=r(e0t,"TFMobileBertForPreTraining"),e0t.forEach(t),vpr=r(bRe," (MobileBERT model)"),bRe.forEach(t),Fpr=i(le),iT=n(le,"LI",{});var vRe=s(iT);Nbe=n(vRe,"STRONG",{});var o0t=s(Nbe);Tpr=r(o0t,"mpnet"),o0t.forEach(t),Mpr=r(vRe," \u2014 "),_Q=n(vRe,"A",{href:!0});var r0t=s(_Q);Epr=r(r0t,"TFMPNetForMaskedLM"),r0t.forEach(t),Cpr=r(vRe," (MPNet model)"),vRe.forEach(t),wpr=i(le),dT=n(le,"LI",{});var FRe=s(dT);qbe=n(FRe,"STRONG",{});var t0t=s(qbe);Apr=r(t0t,"openai-gpt"),t0t.forEach(t),ypr=r(FRe," \u2014 "),bQ=n(FRe,"A",{href:!0});var a0t=s(bQ);Lpr=r(a0t,"TFOpenAIGPTLMHeadModel"),a0t.forEach(t),xpr=r(FRe," (OpenAI GPT model)"),FRe.forEach(t),$pr=i(le),cT=n(le,"LI",{});var TRe=s(cT);jbe=n(TRe,"STRONG",{});var n0t=s(jbe);kpr=r(n0t,"roberta"),n0t.forEach(t),Spr=r(TRe," \u2014 "),vQ=n(TRe,"A",{href:!0});var s0t=s(vQ);Rpr=r(s0t,"TFRobertaForMaskedLM"),s0t.forEach(t),Ppr=r(TRe," (RoBERTa model)"),TRe.forEach(t),Bpr=i(le),fT=n(le,"LI",{});var MRe=s(fT);Dbe=n(MRe,"STRONG",{});var l0t=s(Dbe);Ipr=r(l0t,"t5"),l0t.forEach(t),Npr=r(MRe," \u2014 "),FQ=n(MRe,"A",{href:!0});var i0t=s(FQ);qpr=r(i0t,"TFT5ForConditionalGeneration"),i0t.forEach(t),jpr=r(MRe," (T5 model)"),MRe.forEach(t),Dpr=i(le),mT=n(le,"LI",{});var ERe=s(mT);Gbe=n(ERe,"STRONG",{});var d0t=s(Gbe);Gpr=r(d0t,"tapas"),d0t.forEach(t),Opr=r(ERe," \u2014 "),TQ=n(ERe,"A",{href:!0});var c0t=s(TQ);Vpr=r(c0t,"TFTapasForMaskedLM"),c0t.forEach(t),Xpr=r(ERe," (TAPAS model)"),ERe.forEach(t),zpr=i(le),gT=n(le,"LI",{});var CRe=s(gT);Obe=n(CRe,"STRONG",{});var f0t=s(Obe);Wpr=r(f0t,"transfo-xl"),f0t.forEach(t),Qpr=r(CRe," \u2014 "),MQ=n(CRe,"A",{href:!0});var m0t=s(MQ);Hpr=r(m0t,"TFTransfoXLLMHeadModel"),m0t.forEach(t),Upr=r(CRe," (Transformer-XL model)"),CRe.forEach(t),Jpr=i(le),hT=n(le,"LI",{});var wRe=s(hT);Vbe=n(wRe,"STRONG",{});var g0t=s(Vbe);Ypr=r(g0t,"vit_mae"),g0t.forEach(t),Kpr=r(wRe," \u2014 "),EQ=n(wRe,"A",{href:!0});var h0t=s(EQ);Zpr=r(h0t,"TFViTMAEForPreTraining"),h0t.forEach(t),eur=r(wRe," (ViTMAE model)"),wRe.forEach(t),our=i(le),pT=n(le,"LI",{});var ARe=s(pT);Xbe=n(ARe,"STRONG",{});var p0t=s(Xbe);rur=r(p0t,"xlm"),p0t.forEach(t),tur=r(ARe," \u2014 "),CQ=n(ARe,"A",{href:!0});var u0t=s(CQ);aur=r(u0t,"TFXLMWithLMHeadModel"),u0t.forEach(t),nur=r(ARe," (XLM model)"),ARe.forEach(t),sur=i(le),uT=n(le,"LI",{});var yRe=s(uT);zbe=n(yRe,"STRONG",{});var _0t=s(zbe);lur=r(_0t,"xlm-roberta"),_0t.forEach(t),iur=r(yRe," \u2014 "),wQ=n(yRe,"A",{href:!0});var b0t=s(wQ);dur=r(b0t,"TFXLMRobertaForMaskedLM"),b0t.forEach(t),cur=r(yRe," (XLM-RoBERTa model)"),yRe.forEach(t),fur=i(le),_T=n(le,"LI",{});var LRe=s(_T);Wbe=n(LRe,"STRONG",{});var v0t=s(Wbe);mur=r(v0t,"xlnet"),v0t.forEach(t),gur=r(LRe," \u2014 "),AQ=n(LRe,"A",{href:!0});var F0t=s(AQ);hur=r(F0t,"TFXLNetLMHeadModel"),F0t.forEach(t),pur=r(LRe," (XLNet model)"),LRe.forEach(t),le.forEach(t),uur=i(ul),T(bT.$$.fragment,ul),ul.forEach(t),pl.forEach(t),lje=i(f),Qd=n(f,"H2",{class:!0});var gGe=s(Qd);vT=n(gGe,"A",{id:!0,class:!0,href:!0});var T0t=s(vT);Qbe=n(T0t,"SPAN",{});var M0t=s(Qbe);T(b8.$$.fragment,M0t),M0t.forEach(t),T0t.forEach(t),_ur=i(gGe),Hbe=n(gGe,"SPAN",{});var E0t=s(Hbe);bur=r(E0t,"TFAutoModelForCausalLM"),E0t.forEach(t),gGe.forEach(t),ije=i(f),Zo=n(f,"DIV",{class:!0});var _l=s(Zo);T(v8.$$.fragment,_l),vur=i(_l),Hd=n(_l,"P",{});var mee=s(Hd);Fur=r(mee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),yQ=n(mee,"A",{href:!0});var C0t=s(yQ);Tur=r(C0t,"from_pretrained()"),C0t.forEach(t),Mur=r(mee," class method or the "),LQ=n(mee,"A",{href:!0});var w0t=s(LQ);Eur=r(w0t,"from_config()"),w0t.forEach(t),Cur=r(mee,` class
method.`),mee.forEach(t),wur=i(_l),F8=n(_l,"P",{});var hGe=s(F8);Aur=r(hGe,"This class cannot be instantiated directly using "),Ube=n(hGe,"CODE",{});var A0t=s(Ube);yur=r(A0t,"__init__()"),A0t.forEach(t),Lur=r(hGe," (throws an error)."),hGe.forEach(t),xur=i(_l),xt=n(_l,"DIV",{class:!0});var L6=s(xt);T(T8.$$.fragment,L6),$ur=i(L6),Jbe=n(L6,"P",{});var y0t=s(Jbe);kur=r(y0t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),y0t.forEach(t),Sur=i(L6),Ud=n(L6,"P",{});var gee=s(Ud);Rur=r(gee,`Note:
Loading a model from its configuration file does `),Ybe=n(gee,"STRONG",{});var L0t=s(Ybe);Pur=r(L0t,"not"),L0t.forEach(t),Bur=r(gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),xQ=n(gee,"A",{href:!0});var x0t=s(xQ);Iur=r(x0t,"from_pretrained()"),x0t.forEach(t),Nur=r(gee," to load the model weights."),gee.forEach(t),qur=i(L6),T(FT.$$.fragment,L6),L6.forEach(t),jur=i(_l),yr=n(_l,"DIV",{class:!0});var bl=s(yr);T(M8.$$.fragment,bl),Dur=i(bl),Kbe=n(bl,"P",{});var $0t=s(Kbe);Gur=r($0t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),$0t.forEach(t),Our=i(bl),en=n(bl,"P",{});var x6=s(en);Vur=r(x6,"The model class to instantiate is selected based on the "),Zbe=n(x6,"CODE",{});var k0t=s(Zbe);Xur=r(k0t,"model_type"),k0t.forEach(t),zur=r(x6,` property of the config object (either
passed as an argument or loaded from `),e2e=n(x6,"CODE",{});var S0t=s(e2e);Wur=r(S0t,"pretrained_model_name_or_path"),S0t.forEach(t),Qur=r(x6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o2e=n(x6,"CODE",{});var R0t=s(o2e);Hur=r(R0t,"pretrained_model_name_or_path"),R0t.forEach(t),Uur=r(x6,":"),x6.forEach(t),Jur=i(bl),Me=n(bl,"UL",{});var Ce=s(Me);TT=n(Ce,"LI",{});var xRe=s(TT);r2e=n(xRe,"STRONG",{});var P0t=s(r2e);Yur=r(P0t,"bert"),P0t.forEach(t),Kur=r(xRe," \u2014 "),$Q=n(xRe,"A",{href:!0});var B0t=s($Q);Zur=r(B0t,"TFBertLMHeadModel"),B0t.forEach(t),e_r=r(xRe," (BERT model)"),xRe.forEach(t),o_r=i(Ce),MT=n(Ce,"LI",{});var $Re=s(MT);t2e=n($Re,"STRONG",{});var I0t=s(t2e);r_r=r(I0t,"camembert"),I0t.forEach(t),t_r=r($Re," \u2014 "),kQ=n($Re,"A",{href:!0});var N0t=s(kQ);a_r=r(N0t,"TFCamembertForCausalLM"),N0t.forEach(t),n_r=r($Re," (CamemBERT model)"),$Re.forEach(t),s_r=i(Ce),ET=n(Ce,"LI",{});var kRe=s(ET);a2e=n(kRe,"STRONG",{});var q0t=s(a2e);l_r=r(q0t,"ctrl"),q0t.forEach(t),i_r=r(kRe," \u2014 "),SQ=n(kRe,"A",{href:!0});var j0t=s(SQ);d_r=r(j0t,"TFCTRLLMHeadModel"),j0t.forEach(t),c_r=r(kRe," (CTRL model)"),kRe.forEach(t),f_r=i(Ce),CT=n(Ce,"LI",{});var SRe=s(CT);n2e=n(SRe,"STRONG",{});var D0t=s(n2e);m_r=r(D0t,"gpt2"),D0t.forEach(t),g_r=r(SRe," \u2014 "),RQ=n(SRe,"A",{href:!0});var G0t=s(RQ);h_r=r(G0t,"TFGPT2LMHeadModel"),G0t.forEach(t),p_r=r(SRe," (OpenAI GPT-2 model)"),SRe.forEach(t),u_r=i(Ce),wT=n(Ce,"LI",{});var RRe=s(wT);s2e=n(RRe,"STRONG",{});var O0t=s(s2e);__r=r(O0t,"gptj"),O0t.forEach(t),b_r=r(RRe," \u2014 "),PQ=n(RRe,"A",{href:!0});var V0t=s(PQ);v_r=r(V0t,"TFGPTJForCausalLM"),V0t.forEach(t),F_r=r(RRe," (GPT-J model)"),RRe.forEach(t),T_r=i(Ce),AT=n(Ce,"LI",{});var PRe=s(AT);l2e=n(PRe,"STRONG",{});var X0t=s(l2e);M_r=r(X0t,"openai-gpt"),X0t.forEach(t),E_r=r(PRe," \u2014 "),BQ=n(PRe,"A",{href:!0});var z0t=s(BQ);C_r=r(z0t,"TFOpenAIGPTLMHeadModel"),z0t.forEach(t),w_r=r(PRe," (OpenAI GPT model)"),PRe.forEach(t),A_r=i(Ce),yT=n(Ce,"LI",{});var BRe=s(yT);i2e=n(BRe,"STRONG",{});var W0t=s(i2e);y_r=r(W0t,"rembert"),W0t.forEach(t),L_r=r(BRe," \u2014 "),IQ=n(BRe,"A",{href:!0});var Q0t=s(IQ);x_r=r(Q0t,"TFRemBertForCausalLM"),Q0t.forEach(t),$_r=r(BRe," (RemBERT model)"),BRe.forEach(t),k_r=i(Ce),LT=n(Ce,"LI",{});var IRe=s(LT);d2e=n(IRe,"STRONG",{});var H0t=s(d2e);S_r=r(H0t,"roberta"),H0t.forEach(t),R_r=r(IRe," \u2014 "),NQ=n(IRe,"A",{href:!0});var U0t=s(NQ);P_r=r(U0t,"TFRobertaForCausalLM"),U0t.forEach(t),B_r=r(IRe," (RoBERTa model)"),IRe.forEach(t),I_r=i(Ce),xT=n(Ce,"LI",{});var NRe=s(xT);c2e=n(NRe,"STRONG",{});var J0t=s(c2e);N_r=r(J0t,"roformer"),J0t.forEach(t),q_r=r(NRe," \u2014 "),qQ=n(NRe,"A",{href:!0});var Y0t=s(qQ);j_r=r(Y0t,"TFRoFormerForCausalLM"),Y0t.forEach(t),D_r=r(NRe," (RoFormer model)"),NRe.forEach(t),G_r=i(Ce),$T=n(Ce,"LI",{});var qRe=s($T);f2e=n(qRe,"STRONG",{});var K0t=s(f2e);O_r=r(K0t,"transfo-xl"),K0t.forEach(t),V_r=r(qRe," \u2014 "),jQ=n(qRe,"A",{href:!0});var Z0t=s(jQ);X_r=r(Z0t,"TFTransfoXLLMHeadModel"),Z0t.forEach(t),z_r=r(qRe," (Transformer-XL model)"),qRe.forEach(t),W_r=i(Ce),kT=n(Ce,"LI",{});var jRe=s(kT);m2e=n(jRe,"STRONG",{});var eTt=s(m2e);Q_r=r(eTt,"xlm"),eTt.forEach(t),H_r=r(jRe," \u2014 "),DQ=n(jRe,"A",{href:!0});var oTt=s(DQ);U_r=r(oTt,"TFXLMWithLMHeadModel"),oTt.forEach(t),J_r=r(jRe," (XLM model)"),jRe.forEach(t),Y_r=i(Ce),ST=n(Ce,"LI",{});var DRe=s(ST);g2e=n(DRe,"STRONG",{});var rTt=s(g2e);K_r=r(rTt,"xlnet"),rTt.forEach(t),Z_r=r(DRe," \u2014 "),GQ=n(DRe,"A",{href:!0});var tTt=s(GQ);e1r=r(tTt,"TFXLNetLMHeadModel"),tTt.forEach(t),o1r=r(DRe," (XLNet model)"),DRe.forEach(t),Ce.forEach(t),r1r=i(bl),T(RT.$$.fragment,bl),bl.forEach(t),_l.forEach(t),dje=i(f),Jd=n(f,"H2",{class:!0});var pGe=s(Jd);PT=n(pGe,"A",{id:!0,class:!0,href:!0});var aTt=s(PT);h2e=n(aTt,"SPAN",{});var nTt=s(h2e);T(E8.$$.fragment,nTt),nTt.forEach(t),aTt.forEach(t),t1r=i(pGe),p2e=n(pGe,"SPAN",{});var sTt=s(p2e);a1r=r(sTt,"TFAutoModelForImageClassification"),sTt.forEach(t),pGe.forEach(t),cje=i(f),er=n(f,"DIV",{class:!0});var vl=s(er);T(C8.$$.fragment,vl),n1r=i(vl),Yd=n(vl,"P",{});var hee=s(Yd);s1r=r(hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),OQ=n(hee,"A",{href:!0});var lTt=s(OQ);l1r=r(lTt,"from_pretrained()"),lTt.forEach(t),i1r=r(hee," class method or the "),VQ=n(hee,"A",{href:!0});var iTt=s(VQ);d1r=r(iTt,"from_config()"),iTt.forEach(t),c1r=r(hee,` class
method.`),hee.forEach(t),f1r=i(vl),w8=n(vl,"P",{});var uGe=s(w8);m1r=r(uGe,"This class cannot be instantiated directly using "),u2e=n(uGe,"CODE",{});var dTt=s(u2e);g1r=r(dTt,"__init__()"),dTt.forEach(t),h1r=r(uGe," (throws an error)."),uGe.forEach(t),p1r=i(vl),$t=n(vl,"DIV",{class:!0});var $6=s($t);T(A8.$$.fragment,$6),u1r=i($6),_2e=n($6,"P",{});var cTt=s(_2e);_1r=r(cTt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),cTt.forEach(t),b1r=i($6),Kd=n($6,"P",{});var pee=s(Kd);v1r=r(pee,`Note:
Loading a model from its configuration file does `),b2e=n(pee,"STRONG",{});var fTt=s(b2e);F1r=r(fTt,"not"),fTt.forEach(t),T1r=r(pee,` load the model weights. It only affects the
model\u2019s configuration. Use `),XQ=n(pee,"A",{href:!0});var mTt=s(XQ);M1r=r(mTt,"from_pretrained()"),mTt.forEach(t),E1r=r(pee," to load the model weights."),pee.forEach(t),C1r=i($6),T(BT.$$.fragment,$6),$6.forEach(t),w1r=i(vl),Lr=n(vl,"DIV",{class:!0});var Fl=s(Lr);T(y8.$$.fragment,Fl),A1r=i(Fl),v2e=n(Fl,"P",{});var gTt=s(v2e);y1r=r(gTt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),gTt.forEach(t),L1r=i(Fl),on=n(Fl,"P",{});var k6=s(on);x1r=r(k6,"The model class to instantiate is selected based on the "),F2e=n(k6,"CODE",{});var hTt=s(F2e);$1r=r(hTt,"model_type"),hTt.forEach(t),k1r=r(k6,` property of the config object (either
passed as an argument or loaded from `),T2e=n(k6,"CODE",{});var pTt=s(T2e);S1r=r(pTt,"pretrained_model_name_or_path"),pTt.forEach(t),R1r=r(k6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M2e=n(k6,"CODE",{});var uTt=s(M2e);P1r=r(uTt,"pretrained_model_name_or_path"),uTt.forEach(t),B1r=r(k6,":"),k6.forEach(t),I1r=i(Fl),rn=n(Fl,"UL",{});var S6=s(rn);IT=n(S6,"LI",{});var GRe=s(IT);E2e=n(GRe,"STRONG",{});var _Tt=s(E2e);N1r=r(_Tt,"convnext"),_Tt.forEach(t),q1r=r(GRe," \u2014 "),zQ=n(GRe,"A",{href:!0});var bTt=s(zQ);j1r=r(bTt,"TFConvNextForImageClassification"),bTt.forEach(t),D1r=r(GRe," (ConvNext model)"),GRe.forEach(t),G1r=i(S6),NT=n(S6,"LI",{});var ORe=s(NT);C2e=n(ORe,"STRONG",{});var vTt=s(C2e);O1r=r(vTt,"data2vec-vision"),vTt.forEach(t),V1r=r(ORe," \u2014 "),WQ=n(ORe,"A",{href:!0});var FTt=s(WQ);X1r=r(FTt,"TFData2VecVisionForImageClassification"),FTt.forEach(t),z1r=r(ORe," (Data2VecVision model)"),ORe.forEach(t),W1r=i(S6),qT=n(S6,"LI",{});var VRe=s(qT);w2e=n(VRe,"STRONG",{});var TTt=s(w2e);Q1r=r(TTt,"swin"),TTt.forEach(t),H1r=r(VRe," \u2014 "),QQ=n(VRe,"A",{href:!0});var MTt=s(QQ);U1r=r(MTt,"TFSwinForImageClassification"),MTt.forEach(t),J1r=r(VRe," (Swin model)"),VRe.forEach(t),Y1r=i(S6),jT=n(S6,"LI",{});var XRe=s(jT);A2e=n(XRe,"STRONG",{});var ETt=s(A2e);K1r=r(ETt,"vit"),ETt.forEach(t),Z1r=r(XRe," \u2014 "),HQ=n(XRe,"A",{href:!0});var CTt=s(HQ);e7r=r(CTt,"TFViTForImageClassification"),CTt.forEach(t),o7r=r(XRe," (ViT model)"),XRe.forEach(t),S6.forEach(t),r7r=i(Fl),T(DT.$$.fragment,Fl),Fl.forEach(t),vl.forEach(t),fje=i(f),Zd=n(f,"H2",{class:!0});var _Ge=s(Zd);GT=n(_Ge,"A",{id:!0,class:!0,href:!0});var wTt=s(GT);y2e=n(wTt,"SPAN",{});var ATt=s(y2e);T(L8.$$.fragment,ATt),ATt.forEach(t),wTt.forEach(t),t7r=i(_Ge),L2e=n(_Ge,"SPAN",{});var yTt=s(L2e);a7r=r(yTt,"TFAutoModelForMaskedLM"),yTt.forEach(t),_Ge.forEach(t),mje=i(f),or=n(f,"DIV",{class:!0});var Tl=s(or);T(x8.$$.fragment,Tl),n7r=i(Tl),ec=n(Tl,"P",{});var uee=s(ec);s7r=r(uee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),UQ=n(uee,"A",{href:!0});var LTt=s(UQ);l7r=r(LTt,"from_pretrained()"),LTt.forEach(t),i7r=r(uee," class method or the "),JQ=n(uee,"A",{href:!0});var xTt=s(JQ);d7r=r(xTt,"from_config()"),xTt.forEach(t),c7r=r(uee,` class
method.`),uee.forEach(t),f7r=i(Tl),$8=n(Tl,"P",{});var bGe=s($8);m7r=r(bGe,"This class cannot be instantiated directly using "),x2e=n(bGe,"CODE",{});var $Tt=s(x2e);g7r=r($Tt,"__init__()"),$Tt.forEach(t),h7r=r(bGe," (throws an error)."),bGe.forEach(t),p7r=i(Tl),kt=n(Tl,"DIV",{class:!0});var R6=s(kt);T(k8.$$.fragment,R6),u7r=i(R6),$2e=n(R6,"P",{});var kTt=s($2e);_7r=r(kTt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),kTt.forEach(t),b7r=i(R6),oc=n(R6,"P",{});var _ee=s(oc);v7r=r(_ee,`Note:
Loading a model from its configuration file does `),k2e=n(_ee,"STRONG",{});var STt=s(k2e);F7r=r(STt,"not"),STt.forEach(t),T7r=r(_ee,` load the model weights. It only affects the
model\u2019s configuration. Use `),YQ=n(_ee,"A",{href:!0});var RTt=s(YQ);M7r=r(RTt,"from_pretrained()"),RTt.forEach(t),E7r=r(_ee," to load the model weights."),_ee.forEach(t),C7r=i(R6),T(OT.$$.fragment,R6),R6.forEach(t),w7r=i(Tl),xr=n(Tl,"DIV",{class:!0});var Ml=s(xr);T(S8.$$.fragment,Ml),A7r=i(Ml),S2e=n(Ml,"P",{});var PTt=s(S2e);y7r=r(PTt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),PTt.forEach(t),L7r=i(Ml),tn=n(Ml,"P",{});var P6=s(tn);x7r=r(P6,"The model class to instantiate is selected based on the "),R2e=n(P6,"CODE",{});var BTt=s(R2e);$7r=r(BTt,"model_type"),BTt.forEach(t),k7r=r(P6,` property of the config object (either
passed as an argument or loaded from `),P2e=n(P6,"CODE",{});var ITt=s(P2e);S7r=r(ITt,"pretrained_model_name_or_path"),ITt.forEach(t),R7r=r(P6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B2e=n(P6,"CODE",{});var NTt=s(B2e);P7r=r(NTt,"pretrained_model_name_or_path"),NTt.forEach(t),B7r=r(P6,":"),P6.forEach(t),I7r=i(Ml),ie=n(Ml,"UL",{});var fe=s(ie);VT=n(fe,"LI",{});var zRe=s(VT);I2e=n(zRe,"STRONG",{});var qTt=s(I2e);N7r=r(qTt,"albert"),qTt.forEach(t),q7r=r(zRe," \u2014 "),KQ=n(zRe,"A",{href:!0});var jTt=s(KQ);j7r=r(jTt,"TFAlbertForMaskedLM"),jTt.forEach(t),D7r=r(zRe," (ALBERT model)"),zRe.forEach(t),G7r=i(fe),XT=n(fe,"LI",{});var WRe=s(XT);N2e=n(WRe,"STRONG",{});var DTt=s(N2e);O7r=r(DTt,"bert"),DTt.forEach(t),V7r=r(WRe," \u2014 "),ZQ=n(WRe,"A",{href:!0});var GTt=s(ZQ);X7r=r(GTt,"TFBertForMaskedLM"),GTt.forEach(t),z7r=r(WRe," (BERT model)"),WRe.forEach(t),W7r=i(fe),zT=n(fe,"LI",{});var QRe=s(zT);q2e=n(QRe,"STRONG",{});var OTt=s(q2e);Q7r=r(OTt,"camembert"),OTt.forEach(t),H7r=r(QRe," \u2014 "),eH=n(QRe,"A",{href:!0});var VTt=s(eH);U7r=r(VTt,"TFCamembertForMaskedLM"),VTt.forEach(t),J7r=r(QRe," (CamemBERT model)"),QRe.forEach(t),Y7r=i(fe),WT=n(fe,"LI",{});var HRe=s(WT);j2e=n(HRe,"STRONG",{});var XTt=s(j2e);K7r=r(XTt,"convbert"),XTt.forEach(t),Z7r=r(HRe," \u2014 "),oH=n(HRe,"A",{href:!0});var zTt=s(oH);ebr=r(zTt,"TFConvBertForMaskedLM"),zTt.forEach(t),obr=r(HRe," (ConvBERT model)"),HRe.forEach(t),rbr=i(fe),QT=n(fe,"LI",{});var URe=s(QT);D2e=n(URe,"STRONG",{});var WTt=s(D2e);tbr=r(WTt,"deberta"),WTt.forEach(t),abr=r(URe," \u2014 "),rH=n(URe,"A",{href:!0});var QTt=s(rH);nbr=r(QTt,"TFDebertaForMaskedLM"),QTt.forEach(t),sbr=r(URe," (DeBERTa model)"),URe.forEach(t),lbr=i(fe),HT=n(fe,"LI",{});var JRe=s(HT);G2e=n(JRe,"STRONG",{});var HTt=s(G2e);ibr=r(HTt,"deberta-v2"),HTt.forEach(t),dbr=r(JRe," \u2014 "),tH=n(JRe,"A",{href:!0});var UTt=s(tH);cbr=r(UTt,"TFDebertaV2ForMaskedLM"),UTt.forEach(t),fbr=r(JRe," (DeBERTa-v2 model)"),JRe.forEach(t),mbr=i(fe),UT=n(fe,"LI",{});var YRe=s(UT);O2e=n(YRe,"STRONG",{});var JTt=s(O2e);gbr=r(JTt,"distilbert"),JTt.forEach(t),hbr=r(YRe," \u2014 "),aH=n(YRe,"A",{href:!0});var YTt=s(aH);pbr=r(YTt,"TFDistilBertForMaskedLM"),YTt.forEach(t),ubr=r(YRe," (DistilBERT model)"),YRe.forEach(t),_br=i(fe),JT=n(fe,"LI",{});var KRe=s(JT);V2e=n(KRe,"STRONG",{});var KTt=s(V2e);bbr=r(KTt,"electra"),KTt.forEach(t),vbr=r(KRe," \u2014 "),nH=n(KRe,"A",{href:!0});var ZTt=s(nH);Fbr=r(ZTt,"TFElectraForMaskedLM"),ZTt.forEach(t),Tbr=r(KRe," (ELECTRA model)"),KRe.forEach(t),Mbr=i(fe),YT=n(fe,"LI",{});var ZRe=s(YT);X2e=n(ZRe,"STRONG",{});var eMt=s(X2e);Ebr=r(eMt,"flaubert"),eMt.forEach(t),Cbr=r(ZRe," \u2014 "),sH=n(ZRe,"A",{href:!0});var oMt=s(sH);wbr=r(oMt,"TFFlaubertWithLMHeadModel"),oMt.forEach(t),Abr=r(ZRe," (FlauBERT model)"),ZRe.forEach(t),ybr=i(fe),KT=n(fe,"LI",{});var ePe=s(KT);z2e=n(ePe,"STRONG",{});var rMt=s(z2e);Lbr=r(rMt,"funnel"),rMt.forEach(t),xbr=r(ePe," \u2014 "),lH=n(ePe,"A",{href:!0});var tMt=s(lH);$br=r(tMt,"TFFunnelForMaskedLM"),tMt.forEach(t),kbr=r(ePe," (Funnel Transformer model)"),ePe.forEach(t),Sbr=i(fe),ZT=n(fe,"LI",{});var oPe=s(ZT);W2e=n(oPe,"STRONG",{});var aMt=s(W2e);Rbr=r(aMt,"layoutlm"),aMt.forEach(t),Pbr=r(oPe," \u2014 "),iH=n(oPe,"A",{href:!0});var nMt=s(iH);Bbr=r(nMt,"TFLayoutLMForMaskedLM"),nMt.forEach(t),Ibr=r(oPe," (LayoutLM model)"),oPe.forEach(t),Nbr=i(fe),eM=n(fe,"LI",{});var rPe=s(eM);Q2e=n(rPe,"STRONG",{});var sMt=s(Q2e);qbr=r(sMt,"longformer"),sMt.forEach(t),jbr=r(rPe," \u2014 "),dH=n(rPe,"A",{href:!0});var lMt=s(dH);Dbr=r(lMt,"TFLongformerForMaskedLM"),lMt.forEach(t),Gbr=r(rPe," (Longformer model)"),rPe.forEach(t),Obr=i(fe),oM=n(fe,"LI",{});var tPe=s(oM);H2e=n(tPe,"STRONG",{});var iMt=s(H2e);Vbr=r(iMt,"mobilebert"),iMt.forEach(t),Xbr=r(tPe," \u2014 "),cH=n(tPe,"A",{href:!0});var dMt=s(cH);zbr=r(dMt,"TFMobileBertForMaskedLM"),dMt.forEach(t),Wbr=r(tPe," (MobileBERT model)"),tPe.forEach(t),Qbr=i(fe),rM=n(fe,"LI",{});var aPe=s(rM);U2e=n(aPe,"STRONG",{});var cMt=s(U2e);Hbr=r(cMt,"mpnet"),cMt.forEach(t),Ubr=r(aPe," \u2014 "),fH=n(aPe,"A",{href:!0});var fMt=s(fH);Jbr=r(fMt,"TFMPNetForMaskedLM"),fMt.forEach(t),Ybr=r(aPe," (MPNet model)"),aPe.forEach(t),Kbr=i(fe),tM=n(fe,"LI",{});var nPe=s(tM);J2e=n(nPe,"STRONG",{});var mMt=s(J2e);Zbr=r(mMt,"rembert"),mMt.forEach(t),e2r=r(nPe," \u2014 "),mH=n(nPe,"A",{href:!0});var gMt=s(mH);o2r=r(gMt,"TFRemBertForMaskedLM"),gMt.forEach(t),r2r=r(nPe," (RemBERT model)"),nPe.forEach(t),t2r=i(fe),aM=n(fe,"LI",{});var sPe=s(aM);Y2e=n(sPe,"STRONG",{});var hMt=s(Y2e);a2r=r(hMt,"roberta"),hMt.forEach(t),n2r=r(sPe," \u2014 "),gH=n(sPe,"A",{href:!0});var pMt=s(gH);s2r=r(pMt,"TFRobertaForMaskedLM"),pMt.forEach(t),l2r=r(sPe," (RoBERTa model)"),sPe.forEach(t),i2r=i(fe),nM=n(fe,"LI",{});var lPe=s(nM);K2e=n(lPe,"STRONG",{});var uMt=s(K2e);d2r=r(uMt,"roformer"),uMt.forEach(t),c2r=r(lPe," \u2014 "),hH=n(lPe,"A",{href:!0});var _Mt=s(hH);f2r=r(_Mt,"TFRoFormerForMaskedLM"),_Mt.forEach(t),m2r=r(lPe," (RoFormer model)"),lPe.forEach(t),g2r=i(fe),sM=n(fe,"LI",{});var iPe=s(sM);Z2e=n(iPe,"STRONG",{});var bMt=s(Z2e);h2r=r(bMt,"tapas"),bMt.forEach(t),p2r=r(iPe," \u2014 "),pH=n(iPe,"A",{href:!0});var vMt=s(pH);u2r=r(vMt,"TFTapasForMaskedLM"),vMt.forEach(t),_2r=r(iPe," (TAPAS model)"),iPe.forEach(t),b2r=i(fe),lM=n(fe,"LI",{});var dPe=s(lM);e4e=n(dPe,"STRONG",{});var FMt=s(e4e);v2r=r(FMt,"xlm"),FMt.forEach(t),F2r=r(dPe," \u2014 "),uH=n(dPe,"A",{href:!0});var TMt=s(uH);T2r=r(TMt,"TFXLMWithLMHeadModel"),TMt.forEach(t),M2r=r(dPe," (XLM model)"),dPe.forEach(t),E2r=i(fe),iM=n(fe,"LI",{});var cPe=s(iM);o4e=n(cPe,"STRONG",{});var MMt=s(o4e);C2r=r(MMt,"xlm-roberta"),MMt.forEach(t),w2r=r(cPe," \u2014 "),_H=n(cPe,"A",{href:!0});var EMt=s(_H);A2r=r(EMt,"TFXLMRobertaForMaskedLM"),EMt.forEach(t),y2r=r(cPe," (XLM-RoBERTa model)"),cPe.forEach(t),fe.forEach(t),L2r=i(Ml),T(dM.$$.fragment,Ml),Ml.forEach(t),Tl.forEach(t),gje=i(f),rc=n(f,"H2",{class:!0});var vGe=s(rc);cM=n(vGe,"A",{id:!0,class:!0,href:!0});var CMt=s(cM);r4e=n(CMt,"SPAN",{});var wMt=s(r4e);T(R8.$$.fragment,wMt),wMt.forEach(t),CMt.forEach(t),x2r=i(vGe),t4e=n(vGe,"SPAN",{});var AMt=s(t4e);$2r=r(AMt,"TFAutoModelForSeq2SeqLM"),AMt.forEach(t),vGe.forEach(t),hje=i(f),rr=n(f,"DIV",{class:!0});var El=s(rr);T(P8.$$.fragment,El),k2r=i(El),tc=n(El,"P",{});var bee=s(tc);S2r=r(bee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),bH=n(bee,"A",{href:!0});var yMt=s(bH);R2r=r(yMt,"from_pretrained()"),yMt.forEach(t),P2r=r(bee," class method or the "),vH=n(bee,"A",{href:!0});var LMt=s(vH);B2r=r(LMt,"from_config()"),LMt.forEach(t),I2r=r(bee,` class
method.`),bee.forEach(t),N2r=i(El),B8=n(El,"P",{});var FGe=s(B8);q2r=r(FGe,"This class cannot be instantiated directly using "),a4e=n(FGe,"CODE",{});var xMt=s(a4e);j2r=r(xMt,"__init__()"),xMt.forEach(t),D2r=r(FGe," (throws an error)."),FGe.forEach(t),G2r=i(El),St=n(El,"DIV",{class:!0});var B6=s(St);T(I8.$$.fragment,B6),O2r=i(B6),n4e=n(B6,"P",{});var $Mt=s(n4e);V2r=r($Mt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),$Mt.forEach(t),X2r=i(B6),ac=n(B6,"P",{});var vee=s(ac);z2r=r(vee,`Note:
Loading a model from its configuration file does `),s4e=n(vee,"STRONG",{});var kMt=s(s4e);W2r=r(kMt,"not"),kMt.forEach(t),Q2r=r(vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),FH=n(vee,"A",{href:!0});var SMt=s(FH);H2r=r(SMt,"from_pretrained()"),SMt.forEach(t),U2r=r(vee," to load the model weights."),vee.forEach(t),J2r=i(B6),T(fM.$$.fragment,B6),B6.forEach(t),Y2r=i(El),$r=n(El,"DIV",{class:!0});var Cl=s($r);T(N8.$$.fragment,Cl),K2r=i(Cl),l4e=n(Cl,"P",{});var RMt=s(l4e);Z2r=r(RMt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),RMt.forEach(t),e4r=i(Cl),an=n(Cl,"P",{});var I6=s(an);o4r=r(I6,"The model class to instantiate is selected based on the "),i4e=n(I6,"CODE",{});var PMt=s(i4e);r4r=r(PMt,"model_type"),PMt.forEach(t),t4r=r(I6,` property of the config object (either
passed as an argument or loaded from `),d4e=n(I6,"CODE",{});var BMt=s(d4e);a4r=r(BMt,"pretrained_model_name_or_path"),BMt.forEach(t),n4r=r(I6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c4e=n(I6,"CODE",{});var IMt=s(c4e);s4r=r(IMt,"pretrained_model_name_or_path"),IMt.forEach(t),l4r=r(I6,":"),I6.forEach(t),i4r=i(Cl),ye=n(Cl,"UL",{});var Be=s(ye);mM=n(Be,"LI",{});var fPe=s(mM);f4e=n(fPe,"STRONG",{});var NMt=s(f4e);d4r=r(NMt,"bart"),NMt.forEach(t),c4r=r(fPe," \u2014 "),TH=n(fPe,"A",{href:!0});var qMt=s(TH);f4r=r(qMt,"TFBartForConditionalGeneration"),qMt.forEach(t),m4r=r(fPe," (BART model)"),fPe.forEach(t),g4r=i(Be),gM=n(Be,"LI",{});var mPe=s(gM);m4e=n(mPe,"STRONG",{});var jMt=s(m4e);h4r=r(jMt,"blenderbot"),jMt.forEach(t),p4r=r(mPe," \u2014 "),MH=n(mPe,"A",{href:!0});var DMt=s(MH);u4r=r(DMt,"TFBlenderbotForConditionalGeneration"),DMt.forEach(t),_4r=r(mPe," (Blenderbot model)"),mPe.forEach(t),b4r=i(Be),hM=n(Be,"LI",{});var gPe=s(hM);g4e=n(gPe,"STRONG",{});var GMt=s(g4e);v4r=r(GMt,"blenderbot-small"),GMt.forEach(t),F4r=r(gPe," \u2014 "),EH=n(gPe,"A",{href:!0});var OMt=s(EH);T4r=r(OMt,"TFBlenderbotSmallForConditionalGeneration"),OMt.forEach(t),M4r=r(gPe," (BlenderbotSmall model)"),gPe.forEach(t),E4r=i(Be),pM=n(Be,"LI",{});var hPe=s(pM);h4e=n(hPe,"STRONG",{});var VMt=s(h4e);C4r=r(VMt,"encoder-decoder"),VMt.forEach(t),w4r=r(hPe," \u2014 "),CH=n(hPe,"A",{href:!0});var XMt=s(CH);A4r=r(XMt,"TFEncoderDecoderModel"),XMt.forEach(t),y4r=r(hPe," (Encoder decoder model)"),hPe.forEach(t),L4r=i(Be),uM=n(Be,"LI",{});var pPe=s(uM);p4e=n(pPe,"STRONG",{});var zMt=s(p4e);x4r=r(zMt,"led"),zMt.forEach(t),$4r=r(pPe," \u2014 "),wH=n(pPe,"A",{href:!0});var WMt=s(wH);k4r=r(WMt,"TFLEDForConditionalGeneration"),WMt.forEach(t),S4r=r(pPe," (LED model)"),pPe.forEach(t),R4r=i(Be),_M=n(Be,"LI",{});var uPe=s(_M);u4e=n(uPe,"STRONG",{});var QMt=s(u4e);P4r=r(QMt,"marian"),QMt.forEach(t),B4r=r(uPe," \u2014 "),AH=n(uPe,"A",{href:!0});var HMt=s(AH);I4r=r(HMt,"TFMarianMTModel"),HMt.forEach(t),N4r=r(uPe," (Marian model)"),uPe.forEach(t),q4r=i(Be),bM=n(Be,"LI",{});var _Pe=s(bM);_4e=n(_Pe,"STRONG",{});var UMt=s(_4e);j4r=r(UMt,"mbart"),UMt.forEach(t),D4r=r(_Pe," \u2014 "),yH=n(_Pe,"A",{href:!0});var JMt=s(yH);G4r=r(JMt,"TFMBartForConditionalGeneration"),JMt.forEach(t),O4r=r(_Pe," (mBART model)"),_Pe.forEach(t),V4r=i(Be),vM=n(Be,"LI",{});var bPe=s(vM);b4e=n(bPe,"STRONG",{});var YMt=s(b4e);X4r=r(YMt,"mt5"),YMt.forEach(t),z4r=r(bPe," \u2014 "),LH=n(bPe,"A",{href:!0});var KMt=s(LH);W4r=r(KMt,"TFMT5ForConditionalGeneration"),KMt.forEach(t),Q4r=r(bPe," (mT5 model)"),bPe.forEach(t),H4r=i(Be),FM=n(Be,"LI",{});var vPe=s(FM);v4e=n(vPe,"STRONG",{});var ZMt=s(v4e);U4r=r(ZMt,"pegasus"),ZMt.forEach(t),J4r=r(vPe," \u2014 "),xH=n(vPe,"A",{href:!0});var eEt=s(xH);Y4r=r(eEt,"TFPegasusForConditionalGeneration"),eEt.forEach(t),K4r=r(vPe," (Pegasus model)"),vPe.forEach(t),Z4r=i(Be),TM=n(Be,"LI",{});var FPe=s(TM);F4e=n(FPe,"STRONG",{});var oEt=s(F4e);evr=r(oEt,"t5"),oEt.forEach(t),ovr=r(FPe," \u2014 "),$H=n(FPe,"A",{href:!0});var rEt=s($H);rvr=r(rEt,"TFT5ForConditionalGeneration"),rEt.forEach(t),tvr=r(FPe," (T5 model)"),FPe.forEach(t),Be.forEach(t),avr=i(Cl),T(MM.$$.fragment,Cl),Cl.forEach(t),El.forEach(t),pje=i(f),nc=n(f,"H2",{class:!0});var TGe=s(nc);EM=n(TGe,"A",{id:!0,class:!0,href:!0});var tEt=s(EM);T4e=n(tEt,"SPAN",{});var aEt=s(T4e);T(q8.$$.fragment,aEt),aEt.forEach(t),tEt.forEach(t),nvr=i(TGe),M4e=n(TGe,"SPAN",{});var nEt=s(M4e);svr=r(nEt,"TFAutoModelForSequenceClassification"),nEt.forEach(t),TGe.forEach(t),uje=i(f),tr=n(f,"DIV",{class:!0});var wl=s(tr);T(j8.$$.fragment,wl),lvr=i(wl),sc=n(wl,"P",{});var Fee=s(sc);ivr=r(Fee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),kH=n(Fee,"A",{href:!0});var sEt=s(kH);dvr=r(sEt,"from_pretrained()"),sEt.forEach(t),cvr=r(Fee," class method or the "),SH=n(Fee,"A",{href:!0});var lEt=s(SH);fvr=r(lEt,"from_config()"),lEt.forEach(t),mvr=r(Fee,` class
method.`),Fee.forEach(t),gvr=i(wl),D8=n(wl,"P",{});var MGe=s(D8);hvr=r(MGe,"This class cannot be instantiated directly using "),E4e=n(MGe,"CODE",{});var iEt=s(E4e);pvr=r(iEt,"__init__()"),iEt.forEach(t),uvr=r(MGe," (throws an error)."),MGe.forEach(t),_vr=i(wl),Rt=n(wl,"DIV",{class:!0});var N6=s(Rt);T(G8.$$.fragment,N6),bvr=i(N6),C4e=n(N6,"P",{});var dEt=s(C4e);vvr=r(dEt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),dEt.forEach(t),Fvr=i(N6),lc=n(N6,"P",{});var Tee=s(lc);Tvr=r(Tee,`Note:
Loading a model from its configuration file does `),w4e=n(Tee,"STRONG",{});var cEt=s(w4e);Mvr=r(cEt,"not"),cEt.forEach(t),Evr=r(Tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),RH=n(Tee,"A",{href:!0});var fEt=s(RH);Cvr=r(fEt,"from_pretrained()"),fEt.forEach(t),wvr=r(Tee," to load the model weights."),Tee.forEach(t),Avr=i(N6),T(CM.$$.fragment,N6),N6.forEach(t),yvr=i(wl),kr=n(wl,"DIV",{class:!0});var Al=s(kr);T(O8.$$.fragment,Al),Lvr=i(Al),A4e=n(Al,"P",{});var mEt=s(A4e);xvr=r(mEt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),mEt.forEach(t),$vr=i(Al),nn=n(Al,"P",{});var q6=s(nn);kvr=r(q6,"The model class to instantiate is selected based on the "),y4e=n(q6,"CODE",{});var gEt=s(y4e);Svr=r(gEt,"model_type"),gEt.forEach(t),Rvr=r(q6,` property of the config object (either
passed as an argument or loaded from `),L4e=n(q6,"CODE",{});var hEt=s(L4e);Pvr=r(hEt,"pretrained_model_name_or_path"),hEt.forEach(t),Bvr=r(q6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x4e=n(q6,"CODE",{});var pEt=s(x4e);Ivr=r(pEt,"pretrained_model_name_or_path"),pEt.forEach(t),Nvr=r(q6,":"),q6.forEach(t),qvr=i(Al),oe=n(Al,"UL",{});var ae=s(oe);wM=n(ae,"LI",{});var TPe=s(wM);$4e=n(TPe,"STRONG",{});var uEt=s($4e);jvr=r(uEt,"albert"),uEt.forEach(t),Dvr=r(TPe," \u2014 "),PH=n(TPe,"A",{href:!0});var _Et=s(PH);Gvr=r(_Et,"TFAlbertForSequenceClassification"),_Et.forEach(t),Ovr=r(TPe," (ALBERT model)"),TPe.forEach(t),Vvr=i(ae),AM=n(ae,"LI",{});var MPe=s(AM);k4e=n(MPe,"STRONG",{});var bEt=s(k4e);Xvr=r(bEt,"bert"),bEt.forEach(t),zvr=r(MPe," \u2014 "),BH=n(MPe,"A",{href:!0});var vEt=s(BH);Wvr=r(vEt,"TFBertForSequenceClassification"),vEt.forEach(t),Qvr=r(MPe," (BERT model)"),MPe.forEach(t),Hvr=i(ae),yM=n(ae,"LI",{});var EPe=s(yM);S4e=n(EPe,"STRONG",{});var FEt=s(S4e);Uvr=r(FEt,"camembert"),FEt.forEach(t),Jvr=r(EPe," \u2014 "),IH=n(EPe,"A",{href:!0});var TEt=s(IH);Yvr=r(TEt,"TFCamembertForSequenceClassification"),TEt.forEach(t),Kvr=r(EPe," (CamemBERT model)"),EPe.forEach(t),Zvr=i(ae),LM=n(ae,"LI",{});var CPe=s(LM);R4e=n(CPe,"STRONG",{});var MEt=s(R4e);eFr=r(MEt,"convbert"),MEt.forEach(t),oFr=r(CPe," \u2014 "),NH=n(CPe,"A",{href:!0});var EEt=s(NH);rFr=r(EEt,"TFConvBertForSequenceClassification"),EEt.forEach(t),tFr=r(CPe," (ConvBERT model)"),CPe.forEach(t),aFr=i(ae),xM=n(ae,"LI",{});var wPe=s(xM);P4e=n(wPe,"STRONG",{});var CEt=s(P4e);nFr=r(CEt,"ctrl"),CEt.forEach(t),sFr=r(wPe," \u2014 "),qH=n(wPe,"A",{href:!0});var wEt=s(qH);lFr=r(wEt,"TFCTRLForSequenceClassification"),wEt.forEach(t),iFr=r(wPe," (CTRL model)"),wPe.forEach(t),dFr=i(ae),$M=n(ae,"LI",{});var APe=s($M);B4e=n(APe,"STRONG",{});var AEt=s(B4e);cFr=r(AEt,"deberta"),AEt.forEach(t),fFr=r(APe," \u2014 "),jH=n(APe,"A",{href:!0});var yEt=s(jH);mFr=r(yEt,"TFDebertaForSequenceClassification"),yEt.forEach(t),gFr=r(APe," (DeBERTa model)"),APe.forEach(t),hFr=i(ae),kM=n(ae,"LI",{});var yPe=s(kM);I4e=n(yPe,"STRONG",{});var LEt=s(I4e);pFr=r(LEt,"deberta-v2"),LEt.forEach(t),uFr=r(yPe," \u2014 "),DH=n(yPe,"A",{href:!0});var xEt=s(DH);_Fr=r(xEt,"TFDebertaV2ForSequenceClassification"),xEt.forEach(t),bFr=r(yPe," (DeBERTa-v2 model)"),yPe.forEach(t),vFr=i(ae),SM=n(ae,"LI",{});var LPe=s(SM);N4e=n(LPe,"STRONG",{});var $Et=s(N4e);FFr=r($Et,"distilbert"),$Et.forEach(t),TFr=r(LPe," \u2014 "),GH=n(LPe,"A",{href:!0});var kEt=s(GH);MFr=r(kEt,"TFDistilBertForSequenceClassification"),kEt.forEach(t),EFr=r(LPe," (DistilBERT model)"),LPe.forEach(t),CFr=i(ae),RM=n(ae,"LI",{});var xPe=s(RM);q4e=n(xPe,"STRONG",{});var SEt=s(q4e);wFr=r(SEt,"electra"),SEt.forEach(t),AFr=r(xPe," \u2014 "),OH=n(xPe,"A",{href:!0});var REt=s(OH);yFr=r(REt,"TFElectraForSequenceClassification"),REt.forEach(t),LFr=r(xPe," (ELECTRA model)"),xPe.forEach(t),xFr=i(ae),PM=n(ae,"LI",{});var $Pe=s(PM);j4e=n($Pe,"STRONG",{});var PEt=s(j4e);$Fr=r(PEt,"flaubert"),PEt.forEach(t),kFr=r($Pe," \u2014 "),VH=n($Pe,"A",{href:!0});var BEt=s(VH);SFr=r(BEt,"TFFlaubertForSequenceClassification"),BEt.forEach(t),RFr=r($Pe," (FlauBERT model)"),$Pe.forEach(t),PFr=i(ae),BM=n(ae,"LI",{});var kPe=s(BM);D4e=n(kPe,"STRONG",{});var IEt=s(D4e);BFr=r(IEt,"funnel"),IEt.forEach(t),IFr=r(kPe," \u2014 "),XH=n(kPe,"A",{href:!0});var NEt=s(XH);NFr=r(NEt,"TFFunnelForSequenceClassification"),NEt.forEach(t),qFr=r(kPe," (Funnel Transformer model)"),kPe.forEach(t),jFr=i(ae),IM=n(ae,"LI",{});var SPe=s(IM);G4e=n(SPe,"STRONG",{});var qEt=s(G4e);DFr=r(qEt,"gpt2"),qEt.forEach(t),GFr=r(SPe," \u2014 "),zH=n(SPe,"A",{href:!0});var jEt=s(zH);OFr=r(jEt,"TFGPT2ForSequenceClassification"),jEt.forEach(t),VFr=r(SPe," (OpenAI GPT-2 model)"),SPe.forEach(t),XFr=i(ae),NM=n(ae,"LI",{});var RPe=s(NM);O4e=n(RPe,"STRONG",{});var DEt=s(O4e);zFr=r(DEt,"gptj"),DEt.forEach(t),WFr=r(RPe," \u2014 "),WH=n(RPe,"A",{href:!0});var GEt=s(WH);QFr=r(GEt,"TFGPTJForSequenceClassification"),GEt.forEach(t),HFr=r(RPe," (GPT-J model)"),RPe.forEach(t),UFr=i(ae),qM=n(ae,"LI",{});var PPe=s(qM);V4e=n(PPe,"STRONG",{});var OEt=s(V4e);JFr=r(OEt,"layoutlm"),OEt.forEach(t),YFr=r(PPe," \u2014 "),QH=n(PPe,"A",{href:!0});var VEt=s(QH);KFr=r(VEt,"TFLayoutLMForSequenceClassification"),VEt.forEach(t),ZFr=r(PPe," (LayoutLM model)"),PPe.forEach(t),e0r=i(ae),jM=n(ae,"LI",{});var BPe=s(jM);X4e=n(BPe,"STRONG",{});var XEt=s(X4e);o0r=r(XEt,"longformer"),XEt.forEach(t),r0r=r(BPe," \u2014 "),HH=n(BPe,"A",{href:!0});var zEt=s(HH);t0r=r(zEt,"TFLongformerForSequenceClassification"),zEt.forEach(t),a0r=r(BPe," (Longformer model)"),BPe.forEach(t),n0r=i(ae),DM=n(ae,"LI",{});var IPe=s(DM);z4e=n(IPe,"STRONG",{});var WEt=s(z4e);s0r=r(WEt,"mobilebert"),WEt.forEach(t),l0r=r(IPe," \u2014 "),UH=n(IPe,"A",{href:!0});var QEt=s(UH);i0r=r(QEt,"TFMobileBertForSequenceClassification"),QEt.forEach(t),d0r=r(IPe," (MobileBERT model)"),IPe.forEach(t),c0r=i(ae),GM=n(ae,"LI",{});var NPe=s(GM);W4e=n(NPe,"STRONG",{});var HEt=s(W4e);f0r=r(HEt,"mpnet"),HEt.forEach(t),m0r=r(NPe," \u2014 "),JH=n(NPe,"A",{href:!0});var UEt=s(JH);g0r=r(UEt,"TFMPNetForSequenceClassification"),UEt.forEach(t),h0r=r(NPe," (MPNet model)"),NPe.forEach(t),p0r=i(ae),OM=n(ae,"LI",{});var qPe=s(OM);Q4e=n(qPe,"STRONG",{});var JEt=s(Q4e);u0r=r(JEt,"openai-gpt"),JEt.forEach(t),_0r=r(qPe," \u2014 "),YH=n(qPe,"A",{href:!0});var YEt=s(YH);b0r=r(YEt,"TFOpenAIGPTForSequenceClassification"),YEt.forEach(t),v0r=r(qPe," (OpenAI GPT model)"),qPe.forEach(t),F0r=i(ae),VM=n(ae,"LI",{});var jPe=s(VM);H4e=n(jPe,"STRONG",{});var KEt=s(H4e);T0r=r(KEt,"rembert"),KEt.forEach(t),M0r=r(jPe," \u2014 "),KH=n(jPe,"A",{href:!0});var ZEt=s(KH);E0r=r(ZEt,"TFRemBertForSequenceClassification"),ZEt.forEach(t),C0r=r(jPe," (RemBERT model)"),jPe.forEach(t),w0r=i(ae),XM=n(ae,"LI",{});var DPe=s(XM);U4e=n(DPe,"STRONG",{});var eCt=s(U4e);A0r=r(eCt,"roberta"),eCt.forEach(t),y0r=r(DPe," \u2014 "),ZH=n(DPe,"A",{href:!0});var oCt=s(ZH);L0r=r(oCt,"TFRobertaForSequenceClassification"),oCt.forEach(t),x0r=r(DPe," (RoBERTa model)"),DPe.forEach(t),$0r=i(ae),zM=n(ae,"LI",{});var GPe=s(zM);J4e=n(GPe,"STRONG",{});var rCt=s(J4e);k0r=r(rCt,"roformer"),rCt.forEach(t),S0r=r(GPe," \u2014 "),eU=n(GPe,"A",{href:!0});var tCt=s(eU);R0r=r(tCt,"TFRoFormerForSequenceClassification"),tCt.forEach(t),P0r=r(GPe," (RoFormer model)"),GPe.forEach(t),B0r=i(ae),WM=n(ae,"LI",{});var OPe=s(WM);Y4e=n(OPe,"STRONG",{});var aCt=s(Y4e);I0r=r(aCt,"tapas"),aCt.forEach(t),N0r=r(OPe," \u2014 "),oU=n(OPe,"A",{href:!0});var nCt=s(oU);q0r=r(nCt,"TFTapasForSequenceClassification"),nCt.forEach(t),j0r=r(OPe," (TAPAS model)"),OPe.forEach(t),D0r=i(ae),QM=n(ae,"LI",{});var VPe=s(QM);K4e=n(VPe,"STRONG",{});var sCt=s(K4e);G0r=r(sCt,"transfo-xl"),sCt.forEach(t),O0r=r(VPe," \u2014 "),rU=n(VPe,"A",{href:!0});var lCt=s(rU);V0r=r(lCt,"TFTransfoXLForSequenceClassification"),lCt.forEach(t),X0r=r(VPe," (Transformer-XL model)"),VPe.forEach(t),z0r=i(ae),HM=n(ae,"LI",{});var XPe=s(HM);Z4e=n(XPe,"STRONG",{});var iCt=s(Z4e);W0r=r(iCt,"xlm"),iCt.forEach(t),Q0r=r(XPe," \u2014 "),tU=n(XPe,"A",{href:!0});var dCt=s(tU);H0r=r(dCt,"TFXLMForSequenceClassification"),dCt.forEach(t),U0r=r(XPe," (XLM model)"),XPe.forEach(t),J0r=i(ae),UM=n(ae,"LI",{});var zPe=s(UM);eve=n(zPe,"STRONG",{});var cCt=s(eve);Y0r=r(cCt,"xlm-roberta"),cCt.forEach(t),K0r=r(zPe," \u2014 "),aU=n(zPe,"A",{href:!0});var fCt=s(aU);Z0r=r(fCt,"TFXLMRobertaForSequenceClassification"),fCt.forEach(t),eTr=r(zPe," (XLM-RoBERTa model)"),zPe.forEach(t),oTr=i(ae),JM=n(ae,"LI",{});var WPe=s(JM);ove=n(WPe,"STRONG",{});var mCt=s(ove);rTr=r(mCt,"xlnet"),mCt.forEach(t),tTr=r(WPe," \u2014 "),nU=n(WPe,"A",{href:!0});var gCt=s(nU);aTr=r(gCt,"TFXLNetForSequenceClassification"),gCt.forEach(t),nTr=r(WPe," (XLNet model)"),WPe.forEach(t),ae.forEach(t),sTr=i(Al),T(YM.$$.fragment,Al),Al.forEach(t),wl.forEach(t),_je=i(f),ic=n(f,"H2",{class:!0});var EGe=s(ic);KM=n(EGe,"A",{id:!0,class:!0,href:!0});var hCt=s(KM);rve=n(hCt,"SPAN",{});var pCt=s(rve);T(V8.$$.fragment,pCt),pCt.forEach(t),hCt.forEach(t),lTr=i(EGe),tve=n(EGe,"SPAN",{});var uCt=s(tve);iTr=r(uCt,"TFAutoModelForMultipleChoice"),uCt.forEach(t),EGe.forEach(t),bje=i(f),ar=n(f,"DIV",{class:!0});var yl=s(ar);T(X8.$$.fragment,yl),dTr=i(yl),dc=n(yl,"P",{});var Mee=s(dc);cTr=r(Mee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),sU=n(Mee,"A",{href:!0});var _Ct=s(sU);fTr=r(_Ct,"from_pretrained()"),_Ct.forEach(t),mTr=r(Mee," class method or the "),lU=n(Mee,"A",{href:!0});var bCt=s(lU);gTr=r(bCt,"from_config()"),bCt.forEach(t),hTr=r(Mee,` class
method.`),Mee.forEach(t),pTr=i(yl),z8=n(yl,"P",{});var CGe=s(z8);uTr=r(CGe,"This class cannot be instantiated directly using "),ave=n(CGe,"CODE",{});var vCt=s(ave);_Tr=r(vCt,"__init__()"),vCt.forEach(t),bTr=r(CGe," (throws an error)."),CGe.forEach(t),vTr=i(yl),Pt=n(yl,"DIV",{class:!0});var j6=s(Pt);T(W8.$$.fragment,j6),FTr=i(j6),nve=n(j6,"P",{});var FCt=s(nve);TTr=r(FCt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),FCt.forEach(t),MTr=i(j6),cc=n(j6,"P",{});var Eee=s(cc);ETr=r(Eee,`Note:
Loading a model from its configuration file does `),sve=n(Eee,"STRONG",{});var TCt=s(sve);CTr=r(TCt,"not"),TCt.forEach(t),wTr=r(Eee,` load the model weights. It only affects the
model\u2019s configuration. Use `),iU=n(Eee,"A",{href:!0});var MCt=s(iU);ATr=r(MCt,"from_pretrained()"),MCt.forEach(t),yTr=r(Eee," to load the model weights."),Eee.forEach(t),LTr=i(j6),T(ZM.$$.fragment,j6),j6.forEach(t),xTr=i(yl),Sr=n(yl,"DIV",{class:!0});var Ll=s(Sr);T(Q8.$$.fragment,Ll),$Tr=i(Ll),lve=n(Ll,"P",{});var ECt=s(lve);kTr=r(ECt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),ECt.forEach(t),STr=i(Ll),sn=n(Ll,"P",{});var D6=s(sn);RTr=r(D6,"The model class to instantiate is selected based on the "),ive=n(D6,"CODE",{});var CCt=s(ive);PTr=r(CCt,"model_type"),CCt.forEach(t),BTr=r(D6,` property of the config object (either
passed as an argument or loaded from `),dve=n(D6,"CODE",{});var wCt=s(dve);ITr=r(wCt,"pretrained_model_name_or_path"),wCt.forEach(t),NTr=r(D6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cve=n(D6,"CODE",{});var ACt=s(cve);qTr=r(ACt,"pretrained_model_name_or_path"),ACt.forEach(t),jTr=r(D6,":"),D6.forEach(t),DTr=i(Ll),pe=n(Ll,"UL",{});var be=s(pe);eE=n(be,"LI",{});var QPe=s(eE);fve=n(QPe,"STRONG",{});var yCt=s(fve);GTr=r(yCt,"albert"),yCt.forEach(t),OTr=r(QPe," \u2014 "),dU=n(QPe,"A",{href:!0});var LCt=s(dU);VTr=r(LCt,"TFAlbertForMultipleChoice"),LCt.forEach(t),XTr=r(QPe," (ALBERT model)"),QPe.forEach(t),zTr=i(be),oE=n(be,"LI",{});var HPe=s(oE);mve=n(HPe,"STRONG",{});var xCt=s(mve);WTr=r(xCt,"bert"),xCt.forEach(t),QTr=r(HPe," \u2014 "),cU=n(HPe,"A",{href:!0});var $Ct=s(cU);HTr=r($Ct,"TFBertForMultipleChoice"),$Ct.forEach(t),UTr=r(HPe," (BERT model)"),HPe.forEach(t),JTr=i(be),rE=n(be,"LI",{});var UPe=s(rE);gve=n(UPe,"STRONG",{});var kCt=s(gve);YTr=r(kCt,"camembert"),kCt.forEach(t),KTr=r(UPe," \u2014 "),fU=n(UPe,"A",{href:!0});var SCt=s(fU);ZTr=r(SCt,"TFCamembertForMultipleChoice"),SCt.forEach(t),eMr=r(UPe," (CamemBERT model)"),UPe.forEach(t),oMr=i(be),tE=n(be,"LI",{});var JPe=s(tE);hve=n(JPe,"STRONG",{});var RCt=s(hve);rMr=r(RCt,"convbert"),RCt.forEach(t),tMr=r(JPe," \u2014 "),mU=n(JPe,"A",{href:!0});var PCt=s(mU);aMr=r(PCt,"TFConvBertForMultipleChoice"),PCt.forEach(t),nMr=r(JPe," (ConvBERT model)"),JPe.forEach(t),sMr=i(be),aE=n(be,"LI",{});var YPe=s(aE);pve=n(YPe,"STRONG",{});var BCt=s(pve);lMr=r(BCt,"distilbert"),BCt.forEach(t),iMr=r(YPe," \u2014 "),gU=n(YPe,"A",{href:!0});var ICt=s(gU);dMr=r(ICt,"TFDistilBertForMultipleChoice"),ICt.forEach(t),cMr=r(YPe," (DistilBERT model)"),YPe.forEach(t),fMr=i(be),nE=n(be,"LI",{});var KPe=s(nE);uve=n(KPe,"STRONG",{});var NCt=s(uve);mMr=r(NCt,"electra"),NCt.forEach(t),gMr=r(KPe," \u2014 "),hU=n(KPe,"A",{href:!0});var qCt=s(hU);hMr=r(qCt,"TFElectraForMultipleChoice"),qCt.forEach(t),pMr=r(KPe," (ELECTRA model)"),KPe.forEach(t),uMr=i(be),sE=n(be,"LI",{});var ZPe=s(sE);_ve=n(ZPe,"STRONG",{});var jCt=s(_ve);_Mr=r(jCt,"flaubert"),jCt.forEach(t),bMr=r(ZPe," \u2014 "),pU=n(ZPe,"A",{href:!0});var DCt=s(pU);vMr=r(DCt,"TFFlaubertForMultipleChoice"),DCt.forEach(t),FMr=r(ZPe," (FlauBERT model)"),ZPe.forEach(t),TMr=i(be),lE=n(be,"LI",{});var eBe=s(lE);bve=n(eBe,"STRONG",{});var GCt=s(bve);MMr=r(GCt,"funnel"),GCt.forEach(t),EMr=r(eBe," \u2014 "),uU=n(eBe,"A",{href:!0});var OCt=s(uU);CMr=r(OCt,"TFFunnelForMultipleChoice"),OCt.forEach(t),wMr=r(eBe," (Funnel Transformer model)"),eBe.forEach(t),AMr=i(be),iE=n(be,"LI",{});var oBe=s(iE);vve=n(oBe,"STRONG",{});var VCt=s(vve);yMr=r(VCt,"longformer"),VCt.forEach(t),LMr=r(oBe," \u2014 "),_U=n(oBe,"A",{href:!0});var XCt=s(_U);xMr=r(XCt,"TFLongformerForMultipleChoice"),XCt.forEach(t),$Mr=r(oBe," (Longformer model)"),oBe.forEach(t),kMr=i(be),dE=n(be,"LI",{});var rBe=s(dE);Fve=n(rBe,"STRONG",{});var zCt=s(Fve);SMr=r(zCt,"mobilebert"),zCt.forEach(t),RMr=r(rBe," \u2014 "),bU=n(rBe,"A",{href:!0});var WCt=s(bU);PMr=r(WCt,"TFMobileBertForMultipleChoice"),WCt.forEach(t),BMr=r(rBe," (MobileBERT model)"),rBe.forEach(t),IMr=i(be),cE=n(be,"LI",{});var tBe=s(cE);Tve=n(tBe,"STRONG",{});var QCt=s(Tve);NMr=r(QCt,"mpnet"),QCt.forEach(t),qMr=r(tBe," \u2014 "),vU=n(tBe,"A",{href:!0});var HCt=s(vU);jMr=r(HCt,"TFMPNetForMultipleChoice"),HCt.forEach(t),DMr=r(tBe," (MPNet model)"),tBe.forEach(t),GMr=i(be),fE=n(be,"LI",{});var aBe=s(fE);Mve=n(aBe,"STRONG",{});var UCt=s(Mve);OMr=r(UCt,"rembert"),UCt.forEach(t),VMr=r(aBe," \u2014 "),FU=n(aBe,"A",{href:!0});var JCt=s(FU);XMr=r(JCt,"TFRemBertForMultipleChoice"),JCt.forEach(t),zMr=r(aBe," (RemBERT model)"),aBe.forEach(t),WMr=i(be),mE=n(be,"LI",{});var nBe=s(mE);Eve=n(nBe,"STRONG",{});var YCt=s(Eve);QMr=r(YCt,"roberta"),YCt.forEach(t),HMr=r(nBe," \u2014 "),TU=n(nBe,"A",{href:!0});var KCt=s(TU);UMr=r(KCt,"TFRobertaForMultipleChoice"),KCt.forEach(t),JMr=r(nBe," (RoBERTa model)"),nBe.forEach(t),YMr=i(be),gE=n(be,"LI",{});var sBe=s(gE);Cve=n(sBe,"STRONG",{});var ZCt=s(Cve);KMr=r(ZCt,"roformer"),ZCt.forEach(t),ZMr=r(sBe," \u2014 "),MU=n(sBe,"A",{href:!0});var e5t=s(MU);eEr=r(e5t,"TFRoFormerForMultipleChoice"),e5t.forEach(t),oEr=r(sBe," (RoFormer model)"),sBe.forEach(t),rEr=i(be),hE=n(be,"LI",{});var lBe=s(hE);wve=n(lBe,"STRONG",{});var o5t=s(wve);tEr=r(o5t,"xlm"),o5t.forEach(t),aEr=r(lBe," \u2014 "),EU=n(lBe,"A",{href:!0});var r5t=s(EU);nEr=r(r5t,"TFXLMForMultipleChoice"),r5t.forEach(t),sEr=r(lBe," (XLM model)"),lBe.forEach(t),lEr=i(be),pE=n(be,"LI",{});var iBe=s(pE);Ave=n(iBe,"STRONG",{});var t5t=s(Ave);iEr=r(t5t,"xlm-roberta"),t5t.forEach(t),dEr=r(iBe," \u2014 "),CU=n(iBe,"A",{href:!0});var a5t=s(CU);cEr=r(a5t,"TFXLMRobertaForMultipleChoice"),a5t.forEach(t),fEr=r(iBe," (XLM-RoBERTa model)"),iBe.forEach(t),mEr=i(be),uE=n(be,"LI",{});var dBe=s(uE);yve=n(dBe,"STRONG",{});var n5t=s(yve);gEr=r(n5t,"xlnet"),n5t.forEach(t),hEr=r(dBe," \u2014 "),wU=n(dBe,"A",{href:!0});var s5t=s(wU);pEr=r(s5t,"TFXLNetForMultipleChoice"),s5t.forEach(t),uEr=r(dBe," (XLNet model)"),dBe.forEach(t),be.forEach(t),_Er=i(Ll),T(_E.$$.fragment,Ll),Ll.forEach(t),yl.forEach(t),vje=i(f),fc=n(f,"H2",{class:!0});var wGe=s(fc);bE=n(wGe,"A",{id:!0,class:!0,href:!0});var l5t=s(bE);Lve=n(l5t,"SPAN",{});var i5t=s(Lve);T(H8.$$.fragment,i5t),i5t.forEach(t),l5t.forEach(t),bEr=i(wGe),xve=n(wGe,"SPAN",{});var d5t=s(xve);vEr=r(d5t,"TFAutoModelForNextSentencePrediction"),d5t.forEach(t),wGe.forEach(t),Fje=i(f),nr=n(f,"DIV",{class:!0});var xl=s(nr);T(U8.$$.fragment,xl),FEr=i(xl),mc=n(xl,"P",{});var Cee=s(mc);TEr=r(Cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),AU=n(Cee,"A",{href:!0});var c5t=s(AU);MEr=r(c5t,"from_pretrained()"),c5t.forEach(t),EEr=r(Cee," class method or the "),yU=n(Cee,"A",{href:!0});var f5t=s(yU);CEr=r(f5t,"from_config()"),f5t.forEach(t),wEr=r(Cee,` class
method.`),Cee.forEach(t),AEr=i(xl),J8=n(xl,"P",{});var AGe=s(J8);yEr=r(AGe,"This class cannot be instantiated directly using "),$ve=n(AGe,"CODE",{});var m5t=s($ve);LEr=r(m5t,"__init__()"),m5t.forEach(t),xEr=r(AGe," (throws an error)."),AGe.forEach(t),$Er=i(xl),Bt=n(xl,"DIV",{class:!0});var G6=s(Bt);T(Y8.$$.fragment,G6),kEr=i(G6),kve=n(G6,"P",{});var g5t=s(kve);SEr=r(g5t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),g5t.forEach(t),REr=i(G6),gc=n(G6,"P",{});var wee=s(gc);PEr=r(wee,`Note:
Loading a model from its configuration file does `),Sve=n(wee,"STRONG",{});var h5t=s(Sve);BEr=r(h5t,"not"),h5t.forEach(t),IEr=r(wee,` load the model weights. It only affects the
model\u2019s configuration. Use `),LU=n(wee,"A",{href:!0});var p5t=s(LU);NEr=r(p5t,"from_pretrained()"),p5t.forEach(t),qEr=r(wee," to load the model weights."),wee.forEach(t),jEr=i(G6),T(vE.$$.fragment,G6),G6.forEach(t),DEr=i(xl),Rr=n(xl,"DIV",{class:!0});var $l=s(Rr);T(K8.$$.fragment,$l),GEr=i($l),Rve=n($l,"P",{});var u5t=s(Rve);OEr=r(u5t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),u5t.forEach(t),VEr=i($l),ln=n($l,"P",{});var O6=s(ln);XEr=r(O6,"The model class to instantiate is selected based on the "),Pve=n(O6,"CODE",{});var _5t=s(Pve);zEr=r(_5t,"model_type"),_5t.forEach(t),WEr=r(O6,` property of the config object (either
passed as an argument or loaded from `),Bve=n(O6,"CODE",{});var b5t=s(Bve);QEr=r(b5t,"pretrained_model_name_or_path"),b5t.forEach(t),HEr=r(O6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ive=n(O6,"CODE",{});var v5t=s(Ive);UEr=r(v5t,"pretrained_model_name_or_path"),v5t.forEach(t),JEr=r(O6,":"),O6.forEach(t),YEr=i($l),Z8=n($l,"UL",{});var yGe=s(Z8);FE=n(yGe,"LI",{});var cBe=s(FE);Nve=n(cBe,"STRONG",{});var F5t=s(Nve);KEr=r(F5t,"bert"),F5t.forEach(t),ZEr=r(cBe," \u2014 "),xU=n(cBe,"A",{href:!0});var T5t=s(xU);eCr=r(T5t,"TFBertForNextSentencePrediction"),T5t.forEach(t),oCr=r(cBe," (BERT model)"),cBe.forEach(t),rCr=i(yGe),TE=n(yGe,"LI",{});var fBe=s(TE);qve=n(fBe,"STRONG",{});var M5t=s(qve);tCr=r(M5t,"mobilebert"),M5t.forEach(t),aCr=r(fBe," \u2014 "),$U=n(fBe,"A",{href:!0});var E5t=s($U);nCr=r(E5t,"TFMobileBertForNextSentencePrediction"),E5t.forEach(t),sCr=r(fBe," (MobileBERT model)"),fBe.forEach(t),yGe.forEach(t),lCr=i($l),T(ME.$$.fragment,$l),$l.forEach(t),xl.forEach(t),Tje=i(f),hc=n(f,"H2",{class:!0});var LGe=s(hc);EE=n(LGe,"A",{id:!0,class:!0,href:!0});var C5t=s(EE);jve=n(C5t,"SPAN",{});var w5t=s(jve);T(e9.$$.fragment,w5t),w5t.forEach(t),C5t.forEach(t),iCr=i(LGe),Dve=n(LGe,"SPAN",{});var A5t=s(Dve);dCr=r(A5t,"TFAutoModelForTableQuestionAnswering"),A5t.forEach(t),LGe.forEach(t),Mje=i(f),sr=n(f,"DIV",{class:!0});var kl=s(sr);T(o9.$$.fragment,kl),cCr=i(kl),pc=n(kl,"P",{});var Aee=s(pc);fCr=r(Aee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),kU=n(Aee,"A",{href:!0});var y5t=s(kU);mCr=r(y5t,"from_pretrained()"),y5t.forEach(t),gCr=r(Aee," class method or the "),SU=n(Aee,"A",{href:!0});var L5t=s(SU);hCr=r(L5t,"from_config()"),L5t.forEach(t),pCr=r(Aee,` class
method.`),Aee.forEach(t),uCr=i(kl),r9=n(kl,"P",{});var xGe=s(r9);_Cr=r(xGe,"This class cannot be instantiated directly using "),Gve=n(xGe,"CODE",{});var x5t=s(Gve);bCr=r(x5t,"__init__()"),x5t.forEach(t),vCr=r(xGe," (throws an error)."),xGe.forEach(t),FCr=i(kl),It=n(kl,"DIV",{class:!0});var V6=s(It);T(t9.$$.fragment,V6),TCr=i(V6),Ove=n(V6,"P",{});var $5t=s(Ove);MCr=r($5t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),$5t.forEach(t),ECr=i(V6),uc=n(V6,"P",{});var yee=s(uc);CCr=r(yee,`Note:
Loading a model from its configuration file does `),Vve=n(yee,"STRONG",{});var k5t=s(Vve);wCr=r(k5t,"not"),k5t.forEach(t),ACr=r(yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),RU=n(yee,"A",{href:!0});var S5t=s(RU);yCr=r(S5t,"from_pretrained()"),S5t.forEach(t),LCr=r(yee," to load the model weights."),yee.forEach(t),xCr=i(V6),T(CE.$$.fragment,V6),V6.forEach(t),$Cr=i(kl),Pr=n(kl,"DIV",{class:!0});var Sl=s(Pr);T(a9.$$.fragment,Sl),kCr=i(Sl),Xve=n(Sl,"P",{});var R5t=s(Xve);SCr=r(R5t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),R5t.forEach(t),RCr=i(Sl),dn=n(Sl,"P",{});var X6=s(dn);PCr=r(X6,"The model class to instantiate is selected based on the "),zve=n(X6,"CODE",{});var P5t=s(zve);BCr=r(P5t,"model_type"),P5t.forEach(t),ICr=r(X6,` property of the config object (either
passed as an argument or loaded from `),Wve=n(X6,"CODE",{});var B5t=s(Wve);NCr=r(B5t,"pretrained_model_name_or_path"),B5t.forEach(t),qCr=r(X6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qve=n(X6,"CODE",{});var I5t=s(Qve);jCr=r(I5t,"pretrained_model_name_or_path"),I5t.forEach(t),DCr=r(X6,":"),X6.forEach(t),GCr=i(Sl),Hve=n(Sl,"UL",{});var N5t=s(Hve);wE=n(N5t,"LI",{});var mBe=s(wE);Uve=n(mBe,"STRONG",{});var q5t=s(Uve);OCr=r(q5t,"tapas"),q5t.forEach(t),VCr=r(mBe," \u2014 "),PU=n(mBe,"A",{href:!0});var j5t=s(PU);XCr=r(j5t,"TFTapasForQuestionAnswering"),j5t.forEach(t),zCr=r(mBe," (TAPAS model)"),mBe.forEach(t),N5t.forEach(t),WCr=i(Sl),T(AE.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),Eje=i(f),_c=n(f,"H2",{class:!0});var $Ge=s(_c);yE=n($Ge,"A",{id:!0,class:!0,href:!0});var D5t=s(yE);Jve=n(D5t,"SPAN",{});var G5t=s(Jve);T(n9.$$.fragment,G5t),G5t.forEach(t),D5t.forEach(t),QCr=i($Ge),Yve=n($Ge,"SPAN",{});var O5t=s(Yve);HCr=r(O5t,"TFAutoModelForTokenClassification"),O5t.forEach(t),$Ge.forEach(t),Cje=i(f),lr=n(f,"DIV",{class:!0});var Rl=s(lr);T(s9.$$.fragment,Rl),UCr=i(Rl),bc=n(Rl,"P",{});var Lee=s(bc);JCr=r(Lee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),BU=n(Lee,"A",{href:!0});var V5t=s(BU);YCr=r(V5t,"from_pretrained()"),V5t.forEach(t),KCr=r(Lee," class method or the "),IU=n(Lee,"A",{href:!0});var X5t=s(IU);ZCr=r(X5t,"from_config()"),X5t.forEach(t),e5r=r(Lee,` class
method.`),Lee.forEach(t),o5r=i(Rl),l9=n(Rl,"P",{});var kGe=s(l9);r5r=r(kGe,"This class cannot be instantiated directly using "),Kve=n(kGe,"CODE",{});var z5t=s(Kve);t5r=r(z5t,"__init__()"),z5t.forEach(t),a5r=r(kGe," (throws an error)."),kGe.forEach(t),n5r=i(Rl),Nt=n(Rl,"DIV",{class:!0});var z6=s(Nt);T(i9.$$.fragment,z6),s5r=i(z6),Zve=n(z6,"P",{});var W5t=s(Zve);l5r=r(W5t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),W5t.forEach(t),i5r=i(z6),vc=n(z6,"P",{});var xee=s(vc);d5r=r(xee,`Note:
Loading a model from its configuration file does `),eFe=n(xee,"STRONG",{});var Q5t=s(eFe);c5r=r(Q5t,"not"),Q5t.forEach(t),f5r=r(xee,` load the model weights. It only affects the
model\u2019s configuration. Use `),NU=n(xee,"A",{href:!0});var H5t=s(NU);m5r=r(H5t,"from_pretrained()"),H5t.forEach(t),g5r=r(xee," to load the model weights."),xee.forEach(t),h5r=i(z6),T(LE.$$.fragment,z6),z6.forEach(t),p5r=i(Rl),Br=n(Rl,"DIV",{class:!0});var Pl=s(Br);T(d9.$$.fragment,Pl),u5r=i(Pl),oFe=n(Pl,"P",{});var U5t=s(oFe);_5r=r(U5t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),U5t.forEach(t),b5r=i(Pl),cn=n(Pl,"P",{});var W6=s(cn);v5r=r(W6,"The model class to instantiate is selected based on the "),rFe=n(W6,"CODE",{});var J5t=s(rFe);F5r=r(J5t,"model_type"),J5t.forEach(t),T5r=r(W6,` property of the config object (either
passed as an argument or loaded from `),tFe=n(W6,"CODE",{});var Y5t=s(tFe);M5r=r(Y5t,"pretrained_model_name_or_path"),Y5t.forEach(t),E5r=r(W6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aFe=n(W6,"CODE",{});var K5t=s(aFe);C5r=r(K5t,"pretrained_model_name_or_path"),K5t.forEach(t),w5r=r(W6,":"),W6.forEach(t),A5r=i(Pl),de=n(Pl,"UL",{});var me=s(de);xE=n(me,"LI",{});var gBe=s(xE);nFe=n(gBe,"STRONG",{});var Z5t=s(nFe);y5r=r(Z5t,"albert"),Z5t.forEach(t),L5r=r(gBe," \u2014 "),qU=n(gBe,"A",{href:!0});var e3t=s(qU);x5r=r(e3t,"TFAlbertForTokenClassification"),e3t.forEach(t),$5r=r(gBe," (ALBERT model)"),gBe.forEach(t),k5r=i(me),$E=n(me,"LI",{});var hBe=s($E);sFe=n(hBe,"STRONG",{});var o3t=s(sFe);S5r=r(o3t,"bert"),o3t.forEach(t),R5r=r(hBe," \u2014 "),jU=n(hBe,"A",{href:!0});var r3t=s(jU);P5r=r(r3t,"TFBertForTokenClassification"),r3t.forEach(t),B5r=r(hBe," (BERT model)"),hBe.forEach(t),I5r=i(me),kE=n(me,"LI",{});var pBe=s(kE);lFe=n(pBe,"STRONG",{});var t3t=s(lFe);N5r=r(t3t,"camembert"),t3t.forEach(t),q5r=r(pBe," \u2014 "),DU=n(pBe,"A",{href:!0});var a3t=s(DU);j5r=r(a3t,"TFCamembertForTokenClassification"),a3t.forEach(t),D5r=r(pBe," (CamemBERT model)"),pBe.forEach(t),G5r=i(me),SE=n(me,"LI",{});var uBe=s(SE);iFe=n(uBe,"STRONG",{});var n3t=s(iFe);O5r=r(n3t,"convbert"),n3t.forEach(t),V5r=r(uBe," \u2014 "),GU=n(uBe,"A",{href:!0});var s3t=s(GU);X5r=r(s3t,"TFConvBertForTokenClassification"),s3t.forEach(t),z5r=r(uBe," (ConvBERT model)"),uBe.forEach(t),W5r=i(me),RE=n(me,"LI",{});var _Be=s(RE);dFe=n(_Be,"STRONG",{});var l3t=s(dFe);Q5r=r(l3t,"deberta"),l3t.forEach(t),H5r=r(_Be," \u2014 "),OU=n(_Be,"A",{href:!0});var i3t=s(OU);U5r=r(i3t,"TFDebertaForTokenClassification"),i3t.forEach(t),J5r=r(_Be," (DeBERTa model)"),_Be.forEach(t),Y5r=i(me),PE=n(me,"LI",{});var bBe=s(PE);cFe=n(bBe,"STRONG",{});var d3t=s(cFe);K5r=r(d3t,"deberta-v2"),d3t.forEach(t),Z5r=r(bBe," \u2014 "),VU=n(bBe,"A",{href:!0});var c3t=s(VU);e3r=r(c3t,"TFDebertaV2ForTokenClassification"),c3t.forEach(t),o3r=r(bBe," (DeBERTa-v2 model)"),bBe.forEach(t),r3r=i(me),BE=n(me,"LI",{});var vBe=s(BE);fFe=n(vBe,"STRONG",{});var f3t=s(fFe);t3r=r(f3t,"distilbert"),f3t.forEach(t),a3r=r(vBe," \u2014 "),XU=n(vBe,"A",{href:!0});var m3t=s(XU);n3r=r(m3t,"TFDistilBertForTokenClassification"),m3t.forEach(t),s3r=r(vBe," (DistilBERT model)"),vBe.forEach(t),l3r=i(me),IE=n(me,"LI",{});var FBe=s(IE);mFe=n(FBe,"STRONG",{});var g3t=s(mFe);i3r=r(g3t,"electra"),g3t.forEach(t),d3r=r(FBe," \u2014 "),zU=n(FBe,"A",{href:!0});var h3t=s(zU);c3r=r(h3t,"TFElectraForTokenClassification"),h3t.forEach(t),f3r=r(FBe," (ELECTRA model)"),FBe.forEach(t),m3r=i(me),NE=n(me,"LI",{});var TBe=s(NE);gFe=n(TBe,"STRONG",{});var p3t=s(gFe);g3r=r(p3t,"flaubert"),p3t.forEach(t),h3r=r(TBe," \u2014 "),WU=n(TBe,"A",{href:!0});var u3t=s(WU);p3r=r(u3t,"TFFlaubertForTokenClassification"),u3t.forEach(t),u3r=r(TBe," (FlauBERT model)"),TBe.forEach(t),_3r=i(me),qE=n(me,"LI",{});var MBe=s(qE);hFe=n(MBe,"STRONG",{});var _3t=s(hFe);b3r=r(_3t,"funnel"),_3t.forEach(t),v3r=r(MBe," \u2014 "),QU=n(MBe,"A",{href:!0});var b3t=s(QU);F3r=r(b3t,"TFFunnelForTokenClassification"),b3t.forEach(t),T3r=r(MBe," (Funnel Transformer model)"),MBe.forEach(t),M3r=i(me),jE=n(me,"LI",{});var EBe=s(jE);pFe=n(EBe,"STRONG",{});var v3t=s(pFe);E3r=r(v3t,"layoutlm"),v3t.forEach(t),C3r=r(EBe," \u2014 "),HU=n(EBe,"A",{href:!0});var F3t=s(HU);w3r=r(F3t,"TFLayoutLMForTokenClassification"),F3t.forEach(t),A3r=r(EBe," (LayoutLM model)"),EBe.forEach(t),y3r=i(me),DE=n(me,"LI",{});var CBe=s(DE);uFe=n(CBe,"STRONG",{});var T3t=s(uFe);L3r=r(T3t,"longformer"),T3t.forEach(t),x3r=r(CBe," \u2014 "),UU=n(CBe,"A",{href:!0});var M3t=s(UU);$3r=r(M3t,"TFLongformerForTokenClassification"),M3t.forEach(t),k3r=r(CBe," (Longformer model)"),CBe.forEach(t),S3r=i(me),GE=n(me,"LI",{});var wBe=s(GE);_Fe=n(wBe,"STRONG",{});var E3t=s(_Fe);R3r=r(E3t,"mobilebert"),E3t.forEach(t),P3r=r(wBe," \u2014 "),JU=n(wBe,"A",{href:!0});var C3t=s(JU);B3r=r(C3t,"TFMobileBertForTokenClassification"),C3t.forEach(t),I3r=r(wBe," (MobileBERT model)"),wBe.forEach(t),N3r=i(me),OE=n(me,"LI",{});var ABe=s(OE);bFe=n(ABe,"STRONG",{});var w3t=s(bFe);q3r=r(w3t,"mpnet"),w3t.forEach(t),j3r=r(ABe," \u2014 "),YU=n(ABe,"A",{href:!0});var A3t=s(YU);D3r=r(A3t,"TFMPNetForTokenClassification"),A3t.forEach(t),G3r=r(ABe," (MPNet model)"),ABe.forEach(t),O3r=i(me),VE=n(me,"LI",{});var yBe=s(VE);vFe=n(yBe,"STRONG",{});var y3t=s(vFe);V3r=r(y3t,"rembert"),y3t.forEach(t),X3r=r(yBe," \u2014 "),KU=n(yBe,"A",{href:!0});var L3t=s(KU);z3r=r(L3t,"TFRemBertForTokenClassification"),L3t.forEach(t),W3r=r(yBe," (RemBERT model)"),yBe.forEach(t),Q3r=i(me),XE=n(me,"LI",{});var LBe=s(XE);FFe=n(LBe,"STRONG",{});var x3t=s(FFe);H3r=r(x3t,"roberta"),x3t.forEach(t),U3r=r(LBe," \u2014 "),ZU=n(LBe,"A",{href:!0});var $3t=s(ZU);J3r=r($3t,"TFRobertaForTokenClassification"),$3t.forEach(t),Y3r=r(LBe," (RoBERTa model)"),LBe.forEach(t),K3r=i(me),zE=n(me,"LI",{});var xBe=s(zE);TFe=n(xBe,"STRONG",{});var k3t=s(TFe);Z3r=r(k3t,"roformer"),k3t.forEach(t),ewr=r(xBe," \u2014 "),eJ=n(xBe,"A",{href:!0});var S3t=s(eJ);owr=r(S3t,"TFRoFormerForTokenClassification"),S3t.forEach(t),rwr=r(xBe," (RoFormer model)"),xBe.forEach(t),twr=i(me),WE=n(me,"LI",{});var $Be=s(WE);MFe=n($Be,"STRONG",{});var R3t=s(MFe);awr=r(R3t,"xlm"),R3t.forEach(t),nwr=r($Be," \u2014 "),oJ=n($Be,"A",{href:!0});var P3t=s(oJ);swr=r(P3t,"TFXLMForTokenClassification"),P3t.forEach(t),lwr=r($Be," (XLM model)"),$Be.forEach(t),iwr=i(me),QE=n(me,"LI",{});var kBe=s(QE);EFe=n(kBe,"STRONG",{});var B3t=s(EFe);dwr=r(B3t,"xlm-roberta"),B3t.forEach(t),cwr=r(kBe," \u2014 "),rJ=n(kBe,"A",{href:!0});var I3t=s(rJ);fwr=r(I3t,"TFXLMRobertaForTokenClassification"),I3t.forEach(t),mwr=r(kBe," (XLM-RoBERTa model)"),kBe.forEach(t),gwr=i(me),HE=n(me,"LI",{});var SBe=s(HE);CFe=n(SBe,"STRONG",{});var N3t=s(CFe);hwr=r(N3t,"xlnet"),N3t.forEach(t),pwr=r(SBe," \u2014 "),tJ=n(SBe,"A",{href:!0});var q3t=s(tJ);uwr=r(q3t,"TFXLNetForTokenClassification"),q3t.forEach(t),_wr=r(SBe," (XLNet model)"),SBe.forEach(t),me.forEach(t),bwr=i(Pl),T(UE.$$.fragment,Pl),Pl.forEach(t),Rl.forEach(t),wje=i(f),Fc=n(f,"H2",{class:!0});var SGe=s(Fc);JE=n(SGe,"A",{id:!0,class:!0,href:!0});var j3t=s(JE);wFe=n(j3t,"SPAN",{});var D3t=s(wFe);T(c9.$$.fragment,D3t),D3t.forEach(t),j3t.forEach(t),vwr=i(SGe),AFe=n(SGe,"SPAN",{});var G3t=s(AFe);Fwr=r(G3t,"TFAutoModelForQuestionAnswering"),G3t.forEach(t),SGe.forEach(t),Aje=i(f),ir=n(f,"DIV",{class:!0});var Bl=s(ir);T(f9.$$.fragment,Bl),Twr=i(Bl),Tc=n(Bl,"P",{});var $ee=s(Tc);Mwr=r($ee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),aJ=n($ee,"A",{href:!0});var O3t=s(aJ);Ewr=r(O3t,"from_pretrained()"),O3t.forEach(t),Cwr=r($ee," class method or the "),nJ=n($ee,"A",{href:!0});var V3t=s(nJ);wwr=r(V3t,"from_config()"),V3t.forEach(t),Awr=r($ee,` class
method.`),$ee.forEach(t),ywr=i(Bl),m9=n(Bl,"P",{});var RGe=s(m9);Lwr=r(RGe,"This class cannot be instantiated directly using "),yFe=n(RGe,"CODE",{});var X3t=s(yFe);xwr=r(X3t,"__init__()"),X3t.forEach(t),$wr=r(RGe," (throws an error)."),RGe.forEach(t),kwr=i(Bl),qt=n(Bl,"DIV",{class:!0});var Q6=s(qt);T(g9.$$.fragment,Q6),Swr=i(Q6),LFe=n(Q6,"P",{});var z3t=s(LFe);Rwr=r(z3t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),z3t.forEach(t),Pwr=i(Q6),Mc=n(Q6,"P",{});var kee=s(Mc);Bwr=r(kee,`Note:
Loading a model from its configuration file does `),xFe=n(kee,"STRONG",{});var W3t=s(xFe);Iwr=r(W3t,"not"),W3t.forEach(t),Nwr=r(kee,` load the model weights. It only affects the
model\u2019s configuration. Use `),sJ=n(kee,"A",{href:!0});var Q3t=s(sJ);qwr=r(Q3t,"from_pretrained()"),Q3t.forEach(t),jwr=r(kee," to load the model weights."),kee.forEach(t),Dwr=i(Q6),T(YE.$$.fragment,Q6),Q6.forEach(t),Gwr=i(Bl),Ir=n(Bl,"DIV",{class:!0});var Il=s(Ir);T(h9.$$.fragment,Il),Owr=i(Il),$Fe=n(Il,"P",{});var H3t=s($Fe);Vwr=r(H3t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),H3t.forEach(t),Xwr=i(Il),fn=n(Il,"P",{});var H6=s(fn);zwr=r(H6,"The model class to instantiate is selected based on the "),kFe=n(H6,"CODE",{});var U3t=s(kFe);Wwr=r(U3t,"model_type"),U3t.forEach(t),Qwr=r(H6,` property of the config object (either
passed as an argument or loaded from `),SFe=n(H6,"CODE",{});var J3t=s(SFe);Hwr=r(J3t,"pretrained_model_name_or_path"),J3t.forEach(t),Uwr=r(H6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RFe=n(H6,"CODE",{});var Y3t=s(RFe);Jwr=r(Y3t,"pretrained_model_name_or_path"),Y3t.forEach(t),Ywr=r(H6,":"),H6.forEach(t),Kwr=i(Il),ce=n(Il,"UL",{});var ge=s(ce);KE=n(ge,"LI",{});var RBe=s(KE);PFe=n(RBe,"STRONG",{});var K3t=s(PFe);Zwr=r(K3t,"albert"),K3t.forEach(t),e6r=r(RBe," \u2014 "),lJ=n(RBe,"A",{href:!0});var Z3t=s(lJ);o6r=r(Z3t,"TFAlbertForQuestionAnswering"),Z3t.forEach(t),r6r=r(RBe," (ALBERT model)"),RBe.forEach(t),t6r=i(ge),ZE=n(ge,"LI",{});var PBe=s(ZE);BFe=n(PBe,"STRONG",{});var ewt=s(BFe);a6r=r(ewt,"bert"),ewt.forEach(t),n6r=r(PBe," \u2014 "),iJ=n(PBe,"A",{href:!0});var owt=s(iJ);s6r=r(owt,"TFBertForQuestionAnswering"),owt.forEach(t),l6r=r(PBe," (BERT model)"),PBe.forEach(t),i6r=i(ge),eC=n(ge,"LI",{});var BBe=s(eC);IFe=n(BBe,"STRONG",{});var rwt=s(IFe);d6r=r(rwt,"camembert"),rwt.forEach(t),c6r=r(BBe," \u2014 "),dJ=n(BBe,"A",{href:!0});var twt=s(dJ);f6r=r(twt,"TFCamembertForQuestionAnswering"),twt.forEach(t),m6r=r(BBe," (CamemBERT model)"),BBe.forEach(t),g6r=i(ge),oC=n(ge,"LI",{});var IBe=s(oC);NFe=n(IBe,"STRONG",{});var awt=s(NFe);h6r=r(awt,"convbert"),awt.forEach(t),p6r=r(IBe," \u2014 "),cJ=n(IBe,"A",{href:!0});var nwt=s(cJ);u6r=r(nwt,"TFConvBertForQuestionAnswering"),nwt.forEach(t),_6r=r(IBe," (ConvBERT model)"),IBe.forEach(t),b6r=i(ge),rC=n(ge,"LI",{});var NBe=s(rC);qFe=n(NBe,"STRONG",{});var swt=s(qFe);v6r=r(swt,"deberta"),swt.forEach(t),F6r=r(NBe," \u2014 "),fJ=n(NBe,"A",{href:!0});var lwt=s(fJ);T6r=r(lwt,"TFDebertaForQuestionAnswering"),lwt.forEach(t),M6r=r(NBe," (DeBERTa model)"),NBe.forEach(t),E6r=i(ge),tC=n(ge,"LI",{});var qBe=s(tC);jFe=n(qBe,"STRONG",{});var iwt=s(jFe);C6r=r(iwt,"deberta-v2"),iwt.forEach(t),w6r=r(qBe," \u2014 "),mJ=n(qBe,"A",{href:!0});var dwt=s(mJ);A6r=r(dwt,"TFDebertaV2ForQuestionAnswering"),dwt.forEach(t),y6r=r(qBe," (DeBERTa-v2 model)"),qBe.forEach(t),L6r=i(ge),aC=n(ge,"LI",{});var jBe=s(aC);DFe=n(jBe,"STRONG",{});var cwt=s(DFe);x6r=r(cwt,"distilbert"),cwt.forEach(t),$6r=r(jBe," \u2014 "),gJ=n(jBe,"A",{href:!0});var fwt=s(gJ);k6r=r(fwt,"TFDistilBertForQuestionAnswering"),fwt.forEach(t),S6r=r(jBe," (DistilBERT model)"),jBe.forEach(t),R6r=i(ge),nC=n(ge,"LI",{});var DBe=s(nC);GFe=n(DBe,"STRONG",{});var mwt=s(GFe);P6r=r(mwt,"electra"),mwt.forEach(t),B6r=r(DBe," \u2014 "),hJ=n(DBe,"A",{href:!0});var gwt=s(hJ);I6r=r(gwt,"TFElectraForQuestionAnswering"),gwt.forEach(t),N6r=r(DBe," (ELECTRA model)"),DBe.forEach(t),q6r=i(ge),sC=n(ge,"LI",{});var GBe=s(sC);OFe=n(GBe,"STRONG",{});var hwt=s(OFe);j6r=r(hwt,"flaubert"),hwt.forEach(t),D6r=r(GBe," \u2014 "),pJ=n(GBe,"A",{href:!0});var pwt=s(pJ);G6r=r(pwt,"TFFlaubertForQuestionAnsweringSimple"),pwt.forEach(t),O6r=r(GBe," (FlauBERT model)"),GBe.forEach(t),V6r=i(ge),lC=n(ge,"LI",{});var OBe=s(lC);VFe=n(OBe,"STRONG",{});var uwt=s(VFe);X6r=r(uwt,"funnel"),uwt.forEach(t),z6r=r(OBe," \u2014 "),uJ=n(OBe,"A",{href:!0});var _wt=s(uJ);W6r=r(_wt,"TFFunnelForQuestionAnswering"),_wt.forEach(t),Q6r=r(OBe," (Funnel Transformer model)"),OBe.forEach(t),H6r=i(ge),iC=n(ge,"LI",{});var VBe=s(iC);XFe=n(VBe,"STRONG",{});var bwt=s(XFe);U6r=r(bwt,"gptj"),bwt.forEach(t),J6r=r(VBe," \u2014 "),_J=n(VBe,"A",{href:!0});var vwt=s(_J);Y6r=r(vwt,"TFGPTJForQuestionAnswering"),vwt.forEach(t),K6r=r(VBe," (GPT-J model)"),VBe.forEach(t),Z6r=i(ge),dC=n(ge,"LI",{});var XBe=s(dC);zFe=n(XBe,"STRONG",{});var Fwt=s(zFe);eAr=r(Fwt,"longformer"),Fwt.forEach(t),oAr=r(XBe," \u2014 "),bJ=n(XBe,"A",{href:!0});var Twt=s(bJ);rAr=r(Twt,"TFLongformerForQuestionAnswering"),Twt.forEach(t),tAr=r(XBe," (Longformer model)"),XBe.forEach(t),aAr=i(ge),cC=n(ge,"LI",{});var zBe=s(cC);WFe=n(zBe,"STRONG",{});var Mwt=s(WFe);nAr=r(Mwt,"mobilebert"),Mwt.forEach(t),sAr=r(zBe," \u2014 "),vJ=n(zBe,"A",{href:!0});var Ewt=s(vJ);lAr=r(Ewt,"TFMobileBertForQuestionAnswering"),Ewt.forEach(t),iAr=r(zBe," (MobileBERT model)"),zBe.forEach(t),dAr=i(ge),fC=n(ge,"LI",{});var WBe=s(fC);QFe=n(WBe,"STRONG",{});var Cwt=s(QFe);cAr=r(Cwt,"mpnet"),Cwt.forEach(t),fAr=r(WBe," \u2014 "),FJ=n(WBe,"A",{href:!0});var wwt=s(FJ);mAr=r(wwt,"TFMPNetForQuestionAnswering"),wwt.forEach(t),gAr=r(WBe," (MPNet model)"),WBe.forEach(t),hAr=i(ge),mC=n(ge,"LI",{});var QBe=s(mC);HFe=n(QBe,"STRONG",{});var Awt=s(HFe);pAr=r(Awt,"rembert"),Awt.forEach(t),uAr=r(QBe," \u2014 "),TJ=n(QBe,"A",{href:!0});var ywt=s(TJ);_Ar=r(ywt,"TFRemBertForQuestionAnswering"),ywt.forEach(t),bAr=r(QBe," (RemBERT model)"),QBe.forEach(t),vAr=i(ge),gC=n(ge,"LI",{});var HBe=s(gC);UFe=n(HBe,"STRONG",{});var Lwt=s(UFe);FAr=r(Lwt,"roberta"),Lwt.forEach(t),TAr=r(HBe," \u2014 "),MJ=n(HBe,"A",{href:!0});var xwt=s(MJ);MAr=r(xwt,"TFRobertaForQuestionAnswering"),xwt.forEach(t),EAr=r(HBe," (RoBERTa model)"),HBe.forEach(t),CAr=i(ge),hC=n(ge,"LI",{});var UBe=s(hC);JFe=n(UBe,"STRONG",{});var $wt=s(JFe);wAr=r($wt,"roformer"),$wt.forEach(t),AAr=r(UBe," \u2014 "),EJ=n(UBe,"A",{href:!0});var kwt=s(EJ);yAr=r(kwt,"TFRoFormerForQuestionAnswering"),kwt.forEach(t),LAr=r(UBe," (RoFormer model)"),UBe.forEach(t),xAr=i(ge),pC=n(ge,"LI",{});var JBe=s(pC);YFe=n(JBe,"STRONG",{});var Swt=s(YFe);$Ar=r(Swt,"xlm"),Swt.forEach(t),kAr=r(JBe," \u2014 "),CJ=n(JBe,"A",{href:!0});var Rwt=s(CJ);SAr=r(Rwt,"TFXLMForQuestionAnsweringSimple"),Rwt.forEach(t),RAr=r(JBe," (XLM model)"),JBe.forEach(t),PAr=i(ge),uC=n(ge,"LI",{});var YBe=s(uC);KFe=n(YBe,"STRONG",{});var Pwt=s(KFe);BAr=r(Pwt,"xlm-roberta"),Pwt.forEach(t),IAr=r(YBe," \u2014 "),wJ=n(YBe,"A",{href:!0});var Bwt=s(wJ);NAr=r(Bwt,"TFXLMRobertaForQuestionAnswering"),Bwt.forEach(t),qAr=r(YBe," (XLM-RoBERTa model)"),YBe.forEach(t),jAr=i(ge),_C=n(ge,"LI",{});var KBe=s(_C);ZFe=n(KBe,"STRONG",{});var Iwt=s(ZFe);DAr=r(Iwt,"xlnet"),Iwt.forEach(t),GAr=r(KBe," \u2014 "),AJ=n(KBe,"A",{href:!0});var Nwt=s(AJ);OAr=r(Nwt,"TFXLNetForQuestionAnsweringSimple"),Nwt.forEach(t),VAr=r(KBe," (XLNet model)"),KBe.forEach(t),ge.forEach(t),XAr=i(Il),T(bC.$$.fragment,Il),Il.forEach(t),Bl.forEach(t),yje=i(f),Ec=n(f,"H2",{class:!0});var PGe=s(Ec);vC=n(PGe,"A",{id:!0,class:!0,href:!0});var qwt=s(vC);e0e=n(qwt,"SPAN",{});var jwt=s(e0e);T(p9.$$.fragment,jwt),jwt.forEach(t),qwt.forEach(t),zAr=i(PGe),o0e=n(PGe,"SPAN",{});var Dwt=s(o0e);WAr=r(Dwt,"TFAutoModelForVision2Seq"),Dwt.forEach(t),PGe.forEach(t),Lje=i(f),dr=n(f,"DIV",{class:!0});var Nl=s(dr);T(u9.$$.fragment,Nl),QAr=i(Nl),Cc=n(Nl,"P",{});var See=s(Cc);HAr=r(See,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),yJ=n(See,"A",{href:!0});var Gwt=s(yJ);UAr=r(Gwt,"from_pretrained()"),Gwt.forEach(t),JAr=r(See," class method or the "),LJ=n(See,"A",{href:!0});var Owt=s(LJ);YAr=r(Owt,"from_config()"),Owt.forEach(t),KAr=r(See,` class
method.`),See.forEach(t),ZAr=i(Nl),_9=n(Nl,"P",{});var BGe=s(_9);eyr=r(BGe,"This class cannot be instantiated directly using "),r0e=n(BGe,"CODE",{});var Vwt=s(r0e);oyr=r(Vwt,"__init__()"),Vwt.forEach(t),ryr=r(BGe," (throws an error)."),BGe.forEach(t),tyr=i(Nl),jt=n(Nl,"DIV",{class:!0});var U6=s(jt);T(b9.$$.fragment,U6),ayr=i(U6),t0e=n(U6,"P",{});var Xwt=s(t0e);nyr=r(Xwt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Xwt.forEach(t),syr=i(U6),wc=n(U6,"P",{});var Ree=s(wc);lyr=r(Ree,`Note:
Loading a model from its configuration file does `),a0e=n(Ree,"STRONG",{});var zwt=s(a0e);iyr=r(zwt,"not"),zwt.forEach(t),dyr=r(Ree,` load the model weights. It only affects the
model\u2019s configuration. Use `),xJ=n(Ree,"A",{href:!0});var Wwt=s(xJ);cyr=r(Wwt,"from_pretrained()"),Wwt.forEach(t),fyr=r(Ree," to load the model weights."),Ree.forEach(t),myr=i(U6),T(FC.$$.fragment,U6),U6.forEach(t),gyr=i(Nl),Nr=n(Nl,"DIV",{class:!0});var ql=s(Nr);T(v9.$$.fragment,ql),hyr=i(ql),n0e=n(ql,"P",{});var Qwt=s(n0e);pyr=r(Qwt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Qwt.forEach(t),uyr=i(ql),mn=n(ql,"P",{});var J6=s(mn);_yr=r(J6,"The model class to instantiate is selected based on the "),s0e=n(J6,"CODE",{});var Hwt=s(s0e);byr=r(Hwt,"model_type"),Hwt.forEach(t),vyr=r(J6,` property of the config object (either
passed as an argument or loaded from `),l0e=n(J6,"CODE",{});var Uwt=s(l0e);Fyr=r(Uwt,"pretrained_model_name_or_path"),Uwt.forEach(t),Tyr=r(J6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i0e=n(J6,"CODE",{});var Jwt=s(i0e);Myr=r(Jwt,"pretrained_model_name_or_path"),Jwt.forEach(t),Eyr=r(J6,":"),J6.forEach(t),Cyr=i(ql),d0e=n(ql,"UL",{});var Ywt=s(d0e);TC=n(Ywt,"LI",{});var ZBe=s(TC);c0e=n(ZBe,"STRONG",{});var Kwt=s(c0e);wyr=r(Kwt,"vision-encoder-decoder"),Kwt.forEach(t),Ayr=r(ZBe," \u2014 "),$J=n(ZBe,"A",{href:!0});var Zwt=s($J);yyr=r(Zwt,"TFVisionEncoderDecoderModel"),Zwt.forEach(t),Lyr=r(ZBe," (Vision Encoder decoder model)"),ZBe.forEach(t),Ywt.forEach(t),xyr=i(ql),T(MC.$$.fragment,ql),ql.forEach(t),Nl.forEach(t),xje=i(f),Ac=n(f,"H2",{class:!0});var IGe=s(Ac);EC=n(IGe,"A",{id:!0,class:!0,href:!0});var e6t=s(EC);f0e=n(e6t,"SPAN",{});var o6t=s(f0e);T(F9.$$.fragment,o6t),o6t.forEach(t),e6t.forEach(t),$yr=i(IGe),m0e=n(IGe,"SPAN",{});var r6t=s(m0e);kyr=r(r6t,"TFAutoModelForSpeechSeq2Seq"),r6t.forEach(t),IGe.forEach(t),$je=i(f),cr=n(f,"DIV",{class:!0});var jl=s(cr);T(T9.$$.fragment,jl),Syr=i(jl),yc=n(jl,"P",{});var Pee=s(yc);Ryr=r(Pee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),kJ=n(Pee,"A",{href:!0});var t6t=s(kJ);Pyr=r(t6t,"from_pretrained()"),t6t.forEach(t),Byr=r(Pee," class method or the "),SJ=n(Pee,"A",{href:!0});var a6t=s(SJ);Iyr=r(a6t,"from_config()"),a6t.forEach(t),Nyr=r(Pee,` class
method.`),Pee.forEach(t),qyr=i(jl),M9=n(jl,"P",{});var NGe=s(M9);jyr=r(NGe,"This class cannot be instantiated directly using "),g0e=n(NGe,"CODE",{});var n6t=s(g0e);Dyr=r(n6t,"__init__()"),n6t.forEach(t),Gyr=r(NGe," (throws an error)."),NGe.forEach(t),Oyr=i(jl),Dt=n(jl,"DIV",{class:!0});var Y6=s(Dt);T(E9.$$.fragment,Y6),Vyr=i(Y6),h0e=n(Y6,"P",{});var s6t=s(h0e);Xyr=r(s6t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),s6t.forEach(t),zyr=i(Y6),Lc=n(Y6,"P",{});var Bee=s(Lc);Wyr=r(Bee,`Note:
Loading a model from its configuration file does `),p0e=n(Bee,"STRONG",{});var l6t=s(p0e);Qyr=r(l6t,"not"),l6t.forEach(t),Hyr=r(Bee,` load the model weights. It only affects the
model\u2019s configuration. Use `),RJ=n(Bee,"A",{href:!0});var i6t=s(RJ);Uyr=r(i6t,"from_pretrained()"),i6t.forEach(t),Jyr=r(Bee," to load the model weights."),Bee.forEach(t),Yyr=i(Y6),T(CC.$$.fragment,Y6),Y6.forEach(t),Kyr=i(jl),qr=n(jl,"DIV",{class:!0});var Dl=s(qr);T(C9.$$.fragment,Dl),Zyr=i(Dl),u0e=n(Dl,"P",{});var d6t=s(u0e);eLr=r(d6t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),d6t.forEach(t),oLr=i(Dl),gn=n(Dl,"P",{});var K6=s(gn);rLr=r(K6,"The model class to instantiate is selected based on the "),_0e=n(K6,"CODE",{});var c6t=s(_0e);tLr=r(c6t,"model_type"),c6t.forEach(t),aLr=r(K6,` property of the config object (either
passed as an argument or loaded from `),b0e=n(K6,"CODE",{});var f6t=s(b0e);nLr=r(f6t,"pretrained_model_name_or_path"),f6t.forEach(t),sLr=r(K6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v0e=n(K6,"CODE",{});var m6t=s(v0e);lLr=r(m6t,"pretrained_model_name_or_path"),m6t.forEach(t),iLr=r(K6,":"),K6.forEach(t),dLr=i(Dl),F0e=n(Dl,"UL",{});var g6t=s(F0e);wC=n(g6t,"LI",{});var eIe=s(wC);T0e=n(eIe,"STRONG",{});var h6t=s(T0e);cLr=r(h6t,"speech_to_text"),h6t.forEach(t),fLr=r(eIe," \u2014 "),PJ=n(eIe,"A",{href:!0});var p6t=s(PJ);mLr=r(p6t,"TFSpeech2TextForConditionalGeneration"),p6t.forEach(t),gLr=r(eIe," (Speech2Text model)"),eIe.forEach(t),g6t.forEach(t),hLr=i(Dl),T(AC.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),kje=i(f),xc=n(f,"H2",{class:!0});var qGe=s(xc);yC=n(qGe,"A",{id:!0,class:!0,href:!0});var u6t=s(yC);M0e=n(u6t,"SPAN",{});var _6t=s(M0e);T(w9.$$.fragment,_6t),_6t.forEach(t),u6t.forEach(t),pLr=i(qGe),E0e=n(qGe,"SPAN",{});var b6t=s(E0e);uLr=r(b6t,"FlaxAutoModel"),b6t.forEach(t),qGe.forEach(t),Sje=i(f),fr=n(f,"DIV",{class:!0});var Gl=s(fr);T(A9.$$.fragment,Gl),_Lr=i(Gl),$c=n(Gl,"P",{});var Iee=s($c);bLr=r(Iee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),BJ=n(Iee,"A",{href:!0});var v6t=s(BJ);vLr=r(v6t,"from_pretrained()"),v6t.forEach(t),FLr=r(Iee," class method or the "),IJ=n(Iee,"A",{href:!0});var F6t=s(IJ);TLr=r(F6t,"from_config()"),F6t.forEach(t),MLr=r(Iee,` class
method.`),Iee.forEach(t),ELr=i(Gl),y9=n(Gl,"P",{});var jGe=s(y9);CLr=r(jGe,"This class cannot be instantiated directly using "),C0e=n(jGe,"CODE",{});var T6t=s(C0e);wLr=r(T6t,"__init__()"),T6t.forEach(t),ALr=r(jGe," (throws an error)."),jGe.forEach(t),yLr=i(Gl),Gt=n(Gl,"DIV",{class:!0});var Z6=s(Gt);T(L9.$$.fragment,Z6),LLr=i(Z6),w0e=n(Z6,"P",{});var M6t=s(w0e);xLr=r(M6t,"Instantiates one of the base model classes of the library from a configuration."),M6t.forEach(t),$Lr=i(Z6),kc=n(Z6,"P",{});var Nee=s(kc);kLr=r(Nee,`Note:
Loading a model from its configuration file does `),A0e=n(Nee,"STRONG",{});var E6t=s(A0e);SLr=r(E6t,"not"),E6t.forEach(t),RLr=r(Nee,` load the model weights. It only affects the
model\u2019s configuration. Use `),NJ=n(Nee,"A",{href:!0});var C6t=s(NJ);PLr=r(C6t,"from_pretrained()"),C6t.forEach(t),BLr=r(Nee," to load the model weights."),Nee.forEach(t),ILr=i(Z6),T(LC.$$.fragment,Z6),Z6.forEach(t),NLr=i(Gl),jr=n(Gl,"DIV",{class:!0});var Ol=s(jr);T(x9.$$.fragment,Ol),qLr=i(Ol),y0e=n(Ol,"P",{});var w6t=s(y0e);jLr=r(w6t,"Instantiate one of the base model classes of the library from a pretrained model."),w6t.forEach(t),DLr=i(Ol),hn=n(Ol,"P",{});var eA=s(hn);GLr=r(eA,"The model class to instantiate is selected based on the "),L0e=n(eA,"CODE",{});var A6t=s(L0e);OLr=r(A6t,"model_type"),A6t.forEach(t),VLr=r(eA,` property of the config object (either
passed as an argument or loaded from `),x0e=n(eA,"CODE",{});var y6t=s(x0e);XLr=r(y6t,"pretrained_model_name_or_path"),y6t.forEach(t),zLr=r(eA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$0e=n(eA,"CODE",{});var L6t=s($0e);WLr=r(L6t,"pretrained_model_name_or_path"),L6t.forEach(t),QLr=r(eA,":"),eA.forEach(t),HLr=i(Ol),te=n(Ol,"UL",{});var ne=s(te);xC=n(ne,"LI",{});var oIe=s(xC);k0e=n(oIe,"STRONG",{});var x6t=s(k0e);ULr=r(x6t,"albert"),x6t.forEach(t),JLr=r(oIe," \u2014 "),qJ=n(oIe,"A",{href:!0});var $6t=s(qJ);YLr=r($6t,"FlaxAlbertModel"),$6t.forEach(t),KLr=r(oIe," (ALBERT model)"),oIe.forEach(t),ZLr=i(ne),$C=n(ne,"LI",{});var rIe=s($C);S0e=n(rIe,"STRONG",{});var k6t=s(S0e);e8r=r(k6t,"bart"),k6t.forEach(t),o8r=r(rIe," \u2014 "),jJ=n(rIe,"A",{href:!0});var S6t=s(jJ);r8r=r(S6t,"FlaxBartModel"),S6t.forEach(t),t8r=r(rIe," (BART model)"),rIe.forEach(t),a8r=i(ne),kC=n(ne,"LI",{});var tIe=s(kC);R0e=n(tIe,"STRONG",{});var R6t=s(R0e);n8r=r(R6t,"beit"),R6t.forEach(t),s8r=r(tIe," \u2014 "),DJ=n(tIe,"A",{href:!0});var P6t=s(DJ);l8r=r(P6t,"FlaxBeitModel"),P6t.forEach(t),i8r=r(tIe," (BEiT model)"),tIe.forEach(t),d8r=i(ne),SC=n(ne,"LI",{});var aIe=s(SC);P0e=n(aIe,"STRONG",{});var B6t=s(P0e);c8r=r(B6t,"bert"),B6t.forEach(t),f8r=r(aIe," \u2014 "),GJ=n(aIe,"A",{href:!0});var I6t=s(GJ);m8r=r(I6t,"FlaxBertModel"),I6t.forEach(t),g8r=r(aIe," (BERT model)"),aIe.forEach(t),h8r=i(ne),RC=n(ne,"LI",{});var nIe=s(RC);B0e=n(nIe,"STRONG",{});var N6t=s(B0e);p8r=r(N6t,"big_bird"),N6t.forEach(t),u8r=r(nIe," \u2014 "),OJ=n(nIe,"A",{href:!0});var q6t=s(OJ);_8r=r(q6t,"FlaxBigBirdModel"),q6t.forEach(t),b8r=r(nIe," (BigBird model)"),nIe.forEach(t),v8r=i(ne),PC=n(ne,"LI",{});var sIe=s(PC);I0e=n(sIe,"STRONG",{});var j6t=s(I0e);F8r=r(j6t,"blenderbot"),j6t.forEach(t),T8r=r(sIe," \u2014 "),VJ=n(sIe,"A",{href:!0});var D6t=s(VJ);M8r=r(D6t,"FlaxBlenderbotModel"),D6t.forEach(t),E8r=r(sIe," (Blenderbot model)"),sIe.forEach(t),C8r=i(ne),BC=n(ne,"LI",{});var lIe=s(BC);N0e=n(lIe,"STRONG",{});var G6t=s(N0e);w8r=r(G6t,"blenderbot-small"),G6t.forEach(t),A8r=r(lIe," \u2014 "),XJ=n(lIe,"A",{href:!0});var O6t=s(XJ);y8r=r(O6t,"FlaxBlenderbotSmallModel"),O6t.forEach(t),L8r=r(lIe," (BlenderbotSmall model)"),lIe.forEach(t),x8r=i(ne),IC=n(ne,"LI",{});var iIe=s(IC);q0e=n(iIe,"STRONG",{});var V6t=s(q0e);$8r=r(V6t,"clip"),V6t.forEach(t),k8r=r(iIe," \u2014 "),zJ=n(iIe,"A",{href:!0});var X6t=s(zJ);S8r=r(X6t,"FlaxCLIPModel"),X6t.forEach(t),R8r=r(iIe," (CLIP model)"),iIe.forEach(t),P8r=i(ne),NC=n(ne,"LI",{});var dIe=s(NC);j0e=n(dIe,"STRONG",{});var z6t=s(j0e);B8r=r(z6t,"distilbert"),z6t.forEach(t),I8r=r(dIe," \u2014 "),WJ=n(dIe,"A",{href:!0});var W6t=s(WJ);N8r=r(W6t,"FlaxDistilBertModel"),W6t.forEach(t),q8r=r(dIe," (DistilBERT model)"),dIe.forEach(t),j8r=i(ne),qC=n(ne,"LI",{});var cIe=s(qC);D0e=n(cIe,"STRONG",{});var Q6t=s(D0e);D8r=r(Q6t,"electra"),Q6t.forEach(t),G8r=r(cIe," \u2014 "),QJ=n(cIe,"A",{href:!0});var H6t=s(QJ);O8r=r(H6t,"FlaxElectraModel"),H6t.forEach(t),V8r=r(cIe," (ELECTRA model)"),cIe.forEach(t),X8r=i(ne),jC=n(ne,"LI",{});var fIe=s(jC);G0e=n(fIe,"STRONG",{});var U6t=s(G0e);z8r=r(U6t,"gpt2"),U6t.forEach(t),W8r=r(fIe," \u2014 "),HJ=n(fIe,"A",{href:!0});var J6t=s(HJ);Q8r=r(J6t,"FlaxGPT2Model"),J6t.forEach(t),H8r=r(fIe," (OpenAI GPT-2 model)"),fIe.forEach(t),U8r=i(ne),DC=n(ne,"LI",{});var mIe=s(DC);O0e=n(mIe,"STRONG",{});var Y6t=s(O0e);J8r=r(Y6t,"gpt_neo"),Y6t.forEach(t),Y8r=r(mIe," \u2014 "),UJ=n(mIe,"A",{href:!0});var K6t=s(UJ);K8r=r(K6t,"FlaxGPTNeoModel"),K6t.forEach(t),Z8r=r(mIe," (GPT Neo model)"),mIe.forEach(t),e9r=i(ne),GC=n(ne,"LI",{});var gIe=s(GC);V0e=n(gIe,"STRONG",{});var Z6t=s(V0e);o9r=r(Z6t,"gptj"),Z6t.forEach(t),r9r=r(gIe," \u2014 "),JJ=n(gIe,"A",{href:!0});var eAt=s(JJ);t9r=r(eAt,"FlaxGPTJModel"),eAt.forEach(t),a9r=r(gIe," (GPT-J model)"),gIe.forEach(t),n9r=i(ne),OC=n(ne,"LI",{});var hIe=s(OC);X0e=n(hIe,"STRONG",{});var oAt=s(X0e);s9r=r(oAt,"marian"),oAt.forEach(t),l9r=r(hIe," \u2014 "),YJ=n(hIe,"A",{href:!0});var rAt=s(YJ);i9r=r(rAt,"FlaxMarianModel"),rAt.forEach(t),d9r=r(hIe," (Marian model)"),hIe.forEach(t),c9r=i(ne),VC=n(ne,"LI",{});var pIe=s(VC);z0e=n(pIe,"STRONG",{});var tAt=s(z0e);f9r=r(tAt,"mbart"),tAt.forEach(t),m9r=r(pIe," \u2014 "),KJ=n(pIe,"A",{href:!0});var aAt=s(KJ);g9r=r(aAt,"FlaxMBartModel"),aAt.forEach(t),h9r=r(pIe," (mBART model)"),pIe.forEach(t),p9r=i(ne),XC=n(ne,"LI",{});var uIe=s(XC);W0e=n(uIe,"STRONG",{});var nAt=s(W0e);u9r=r(nAt,"mt5"),nAt.forEach(t),_9r=r(uIe," \u2014 "),ZJ=n(uIe,"A",{href:!0});var sAt=s(ZJ);b9r=r(sAt,"FlaxMT5Model"),sAt.forEach(t),v9r=r(uIe," (mT5 model)"),uIe.forEach(t),F9r=i(ne),zC=n(ne,"LI",{});var _Ie=s(zC);Q0e=n(_Ie,"STRONG",{});var lAt=s(Q0e);T9r=r(lAt,"pegasus"),lAt.forEach(t),M9r=r(_Ie," \u2014 "),eY=n(_Ie,"A",{href:!0});var iAt=s(eY);E9r=r(iAt,"FlaxPegasusModel"),iAt.forEach(t),C9r=r(_Ie," (Pegasus model)"),_Ie.forEach(t),w9r=i(ne),WC=n(ne,"LI",{});var bIe=s(WC);H0e=n(bIe,"STRONG",{});var dAt=s(H0e);A9r=r(dAt,"roberta"),dAt.forEach(t),y9r=r(bIe," \u2014 "),oY=n(bIe,"A",{href:!0});var cAt=s(oY);L9r=r(cAt,"FlaxRobertaModel"),cAt.forEach(t),x9r=r(bIe," (RoBERTa model)"),bIe.forEach(t),$9r=i(ne),QC=n(ne,"LI",{});var vIe=s(QC);U0e=n(vIe,"STRONG",{});var fAt=s(U0e);k9r=r(fAt,"roformer"),fAt.forEach(t),S9r=r(vIe," \u2014 "),rY=n(vIe,"A",{href:!0});var mAt=s(rY);R9r=r(mAt,"FlaxRoFormerModel"),mAt.forEach(t),P9r=r(vIe," (RoFormer model)"),vIe.forEach(t),B9r=i(ne),HC=n(ne,"LI",{});var FIe=s(HC);J0e=n(FIe,"STRONG",{});var gAt=s(J0e);I9r=r(gAt,"t5"),gAt.forEach(t),N9r=r(FIe," \u2014 "),tY=n(FIe,"A",{href:!0});var hAt=s(tY);q9r=r(hAt,"FlaxT5Model"),hAt.forEach(t),j9r=r(FIe," (T5 model)"),FIe.forEach(t),D9r=i(ne),UC=n(ne,"LI",{});var TIe=s(UC);Y0e=n(TIe,"STRONG",{});var pAt=s(Y0e);G9r=r(pAt,"vision-text-dual-encoder"),pAt.forEach(t),O9r=r(TIe," \u2014 "),aY=n(TIe,"A",{href:!0});var uAt=s(aY);V9r=r(uAt,"FlaxVisionTextDualEncoderModel"),uAt.forEach(t),X9r=r(TIe," (VisionTextDualEncoder model)"),TIe.forEach(t),z9r=i(ne),JC=n(ne,"LI",{});var MIe=s(JC);K0e=n(MIe,"STRONG",{});var _At=s(K0e);W9r=r(_At,"vit"),_At.forEach(t),Q9r=r(MIe," \u2014 "),nY=n(MIe,"A",{href:!0});var bAt=s(nY);H9r=r(bAt,"FlaxViTModel"),bAt.forEach(t),U9r=r(MIe," (ViT model)"),MIe.forEach(t),J9r=i(ne),YC=n(ne,"LI",{});var EIe=s(YC);Z0e=n(EIe,"STRONG",{});var vAt=s(Z0e);Y9r=r(vAt,"wav2vec2"),vAt.forEach(t),K9r=r(EIe," \u2014 "),sY=n(EIe,"A",{href:!0});var FAt=s(sY);Z9r=r(FAt,"FlaxWav2Vec2Model"),FAt.forEach(t),exr=r(EIe," (Wav2Vec2 model)"),EIe.forEach(t),oxr=i(ne),KC=n(ne,"LI",{});var CIe=s(KC);eTe=n(CIe,"STRONG",{});var TAt=s(eTe);rxr=r(TAt,"xglm"),TAt.forEach(t),txr=r(CIe," \u2014 "),lY=n(CIe,"A",{href:!0});var MAt=s(lY);axr=r(MAt,"FlaxXGLMModel"),MAt.forEach(t),nxr=r(CIe," (XGLM model)"),CIe.forEach(t),sxr=i(ne),ZC=n(ne,"LI",{});var wIe=s(ZC);oTe=n(wIe,"STRONG",{});var EAt=s(oTe);lxr=r(EAt,"xlm-roberta"),EAt.forEach(t),ixr=r(wIe," \u2014 "),iY=n(wIe,"A",{href:!0});var CAt=s(iY);dxr=r(CAt,"FlaxXLMRobertaModel"),CAt.forEach(t),cxr=r(wIe," (XLM-RoBERTa model)"),wIe.forEach(t),ne.forEach(t),fxr=i(Ol),T(e5.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),Rje=i(f),Sc=n(f,"H2",{class:!0});var DGe=s(Sc);o5=n(DGe,"A",{id:!0,class:!0,href:!0});var wAt=s(o5);rTe=n(wAt,"SPAN",{});var AAt=s(rTe);T($9.$$.fragment,AAt),AAt.forEach(t),wAt.forEach(t),mxr=i(DGe),tTe=n(DGe,"SPAN",{});var yAt=s(tTe);gxr=r(yAt,"FlaxAutoModelForCausalLM"),yAt.forEach(t),DGe.forEach(t),Pje=i(f),mr=n(f,"DIV",{class:!0});var Vl=s(mr);T(k9.$$.fragment,Vl),hxr=i(Vl),Rc=n(Vl,"P",{});var qee=s(Rc);pxr=r(qee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),dY=n(qee,"A",{href:!0});var LAt=s(dY);uxr=r(LAt,"from_pretrained()"),LAt.forEach(t),_xr=r(qee," class method or the "),cY=n(qee,"A",{href:!0});var xAt=s(cY);bxr=r(xAt,"from_config()"),xAt.forEach(t),vxr=r(qee,` class
method.`),qee.forEach(t),Fxr=i(Vl),S9=n(Vl,"P",{});var GGe=s(S9);Txr=r(GGe,"This class cannot be instantiated directly using "),aTe=n(GGe,"CODE",{});var $At=s(aTe);Mxr=r($At,"__init__()"),$At.forEach(t),Exr=r(GGe," (throws an error)."),GGe.forEach(t),Cxr=i(Vl),Ot=n(Vl,"DIV",{class:!0});var oA=s(Ot);T(R9.$$.fragment,oA),wxr=i(oA),nTe=n(oA,"P",{});var kAt=s(nTe);Axr=r(kAt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),kAt.forEach(t),yxr=i(oA),Pc=n(oA,"P",{});var jee=s(Pc);Lxr=r(jee,`Note:
Loading a model from its configuration file does `),sTe=n(jee,"STRONG",{});var SAt=s(sTe);xxr=r(SAt,"not"),SAt.forEach(t),$xr=r(jee,` load the model weights. It only affects the
model\u2019s configuration. Use `),fY=n(jee,"A",{href:!0});var RAt=s(fY);kxr=r(RAt,"from_pretrained()"),RAt.forEach(t),Sxr=r(jee," to load the model weights."),jee.forEach(t),Rxr=i(oA),T(r5.$$.fragment,oA),oA.forEach(t),Pxr=i(Vl),Dr=n(Vl,"DIV",{class:!0});var Xl=s(Dr);T(P9.$$.fragment,Xl),Bxr=i(Xl),lTe=n(Xl,"P",{});var PAt=s(lTe);Ixr=r(PAt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),PAt.forEach(t),Nxr=i(Xl),pn=n(Xl,"P",{});var rA=s(pn);qxr=r(rA,"The model class to instantiate is selected based on the "),iTe=n(rA,"CODE",{});var BAt=s(iTe);jxr=r(BAt,"model_type"),BAt.forEach(t),Dxr=r(rA,` property of the config object (either
passed as an argument or loaded from `),dTe=n(rA,"CODE",{});var IAt=s(dTe);Gxr=r(IAt,"pretrained_model_name_or_path"),IAt.forEach(t),Oxr=r(rA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cTe=n(rA,"CODE",{});var NAt=s(cTe);Vxr=r(NAt,"pretrained_model_name_or_path"),NAt.forEach(t),Xxr=r(rA,":"),rA.forEach(t),zxr=i(Xl),Re=n(Xl,"UL",{});var Xe=s(Re);t5=n(Xe,"LI",{});var AIe=s(t5);fTe=n(AIe,"STRONG",{});var qAt=s(fTe);Wxr=r(qAt,"bart"),qAt.forEach(t),Qxr=r(AIe," \u2014 "),mY=n(AIe,"A",{href:!0});var jAt=s(mY);Hxr=r(jAt,"FlaxBartForCausalLM"),jAt.forEach(t),Uxr=r(AIe," (BART model)"),AIe.forEach(t),Jxr=i(Xe),a5=n(Xe,"LI",{});var yIe=s(a5);mTe=n(yIe,"STRONG",{});var DAt=s(mTe);Yxr=r(DAt,"bert"),DAt.forEach(t),Kxr=r(yIe," \u2014 "),gY=n(yIe,"A",{href:!0});var GAt=s(gY);Zxr=r(GAt,"FlaxBertForCausalLM"),GAt.forEach(t),e$r=r(yIe," (BERT model)"),yIe.forEach(t),o$r=i(Xe),n5=n(Xe,"LI",{});var LIe=s(n5);gTe=n(LIe,"STRONG",{});var OAt=s(gTe);r$r=r(OAt,"big_bird"),OAt.forEach(t),t$r=r(LIe," \u2014 "),hY=n(LIe,"A",{href:!0});var VAt=s(hY);a$r=r(VAt,"FlaxBigBirdForCausalLM"),VAt.forEach(t),n$r=r(LIe," (BigBird model)"),LIe.forEach(t),s$r=i(Xe),s5=n(Xe,"LI",{});var xIe=s(s5);hTe=n(xIe,"STRONG",{});var XAt=s(hTe);l$r=r(XAt,"electra"),XAt.forEach(t),i$r=r(xIe," \u2014 "),pY=n(xIe,"A",{href:!0});var zAt=s(pY);d$r=r(zAt,"FlaxElectraForCausalLM"),zAt.forEach(t),c$r=r(xIe," (ELECTRA model)"),xIe.forEach(t),f$r=i(Xe),l5=n(Xe,"LI",{});var $Ie=s(l5);pTe=n($Ie,"STRONG",{});var WAt=s(pTe);m$r=r(WAt,"gpt2"),WAt.forEach(t),g$r=r($Ie," \u2014 "),uY=n($Ie,"A",{href:!0});var QAt=s(uY);h$r=r(QAt,"FlaxGPT2LMHeadModel"),QAt.forEach(t),p$r=r($Ie," (OpenAI GPT-2 model)"),$Ie.forEach(t),u$r=i(Xe),i5=n(Xe,"LI",{});var kIe=s(i5);uTe=n(kIe,"STRONG",{});var HAt=s(uTe);_$r=r(HAt,"gpt_neo"),HAt.forEach(t),b$r=r(kIe," \u2014 "),_Y=n(kIe,"A",{href:!0});var UAt=s(_Y);v$r=r(UAt,"FlaxGPTNeoForCausalLM"),UAt.forEach(t),F$r=r(kIe," (GPT Neo model)"),kIe.forEach(t),T$r=i(Xe),d5=n(Xe,"LI",{});var SIe=s(d5);_Te=n(SIe,"STRONG",{});var JAt=s(_Te);M$r=r(JAt,"gptj"),JAt.forEach(t),E$r=r(SIe," \u2014 "),bY=n(SIe,"A",{href:!0});var YAt=s(bY);C$r=r(YAt,"FlaxGPTJForCausalLM"),YAt.forEach(t),w$r=r(SIe," (GPT-J model)"),SIe.forEach(t),A$r=i(Xe),c5=n(Xe,"LI",{});var RIe=s(c5);bTe=n(RIe,"STRONG",{});var KAt=s(bTe);y$r=r(KAt,"roberta"),KAt.forEach(t),L$r=r(RIe," \u2014 "),vY=n(RIe,"A",{href:!0});var ZAt=s(vY);x$r=r(ZAt,"FlaxRobertaForCausalLM"),ZAt.forEach(t),$$r=r(RIe," (RoBERTa model)"),RIe.forEach(t),k$r=i(Xe),f5=n(Xe,"LI",{});var PIe=s(f5);vTe=n(PIe,"STRONG",{});var eyt=s(vTe);S$r=r(eyt,"xglm"),eyt.forEach(t),R$r=r(PIe," \u2014 "),FY=n(PIe,"A",{href:!0});var oyt=s(FY);P$r=r(oyt,"FlaxXGLMForCausalLM"),oyt.forEach(t),B$r=r(PIe," (XGLM model)"),PIe.forEach(t),Xe.forEach(t),I$r=i(Xl),T(m5.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),Bje=i(f),Bc=n(f,"H2",{class:!0});var OGe=s(Bc);g5=n(OGe,"A",{id:!0,class:!0,href:!0});var ryt=s(g5);FTe=n(ryt,"SPAN",{});var tyt=s(FTe);T(B9.$$.fragment,tyt),tyt.forEach(t),ryt.forEach(t),N$r=i(OGe),TTe=n(OGe,"SPAN",{});var ayt=s(TTe);q$r=r(ayt,"FlaxAutoModelForPreTraining"),ayt.forEach(t),OGe.forEach(t),Ije=i(f),gr=n(f,"DIV",{class:!0});var zl=s(gr);T(I9.$$.fragment,zl),j$r=i(zl),Ic=n(zl,"P",{});var Dee=s(Ic);D$r=r(Dee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),TY=n(Dee,"A",{href:!0});var nyt=s(TY);G$r=r(nyt,"from_pretrained()"),nyt.forEach(t),O$r=r(Dee," class method or the "),MY=n(Dee,"A",{href:!0});var syt=s(MY);V$r=r(syt,"from_config()"),syt.forEach(t),X$r=r(Dee,` class
method.`),Dee.forEach(t),z$r=i(zl),N9=n(zl,"P",{});var VGe=s(N9);W$r=r(VGe,"This class cannot be instantiated directly using "),MTe=n(VGe,"CODE",{});var lyt=s(MTe);Q$r=r(lyt,"__init__()"),lyt.forEach(t),H$r=r(VGe," (throws an error)."),VGe.forEach(t),U$r=i(zl),Vt=n(zl,"DIV",{class:!0});var tA=s(Vt);T(q9.$$.fragment,tA),J$r=i(tA),ETe=n(tA,"P",{});var iyt=s(ETe);Y$r=r(iyt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),iyt.forEach(t),K$r=i(tA),Nc=n(tA,"P",{});var Gee=s(Nc);Z$r=r(Gee,`Note:
Loading a model from its configuration file does `),CTe=n(Gee,"STRONG",{});var dyt=s(CTe);ekr=r(dyt,"not"),dyt.forEach(t),okr=r(Gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),EY=n(Gee,"A",{href:!0});var cyt=s(EY);rkr=r(cyt,"from_pretrained()"),cyt.forEach(t),tkr=r(Gee," to load the model weights."),Gee.forEach(t),akr=i(tA),T(h5.$$.fragment,tA),tA.forEach(t),nkr=i(zl),Gr=n(zl,"DIV",{class:!0});var Wl=s(Gr);T(j9.$$.fragment,Wl),skr=i(Wl),wTe=n(Wl,"P",{});var fyt=s(wTe);lkr=r(fyt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),fyt.forEach(t),ikr=i(Wl),un=n(Wl,"P",{});var aA=s(un);dkr=r(aA,"The model class to instantiate is selected based on the "),ATe=n(aA,"CODE",{});var myt=s(ATe);ckr=r(myt,"model_type"),myt.forEach(t),fkr=r(aA,` property of the config object (either
passed as an argument or loaded from `),yTe=n(aA,"CODE",{});var gyt=s(yTe);mkr=r(gyt,"pretrained_model_name_or_path"),gyt.forEach(t),gkr=r(aA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LTe=n(aA,"CODE",{});var hyt=s(LTe);hkr=r(hyt,"pretrained_model_name_or_path"),hyt.forEach(t),pkr=r(aA,":"),aA.forEach(t),ukr=i(Wl),Ee=n(Wl,"UL",{});var we=s(Ee);p5=n(we,"LI",{});var BIe=s(p5);xTe=n(BIe,"STRONG",{});var pyt=s(xTe);_kr=r(pyt,"albert"),pyt.forEach(t),bkr=r(BIe," \u2014 "),CY=n(BIe,"A",{href:!0});var uyt=s(CY);vkr=r(uyt,"FlaxAlbertForPreTraining"),uyt.forEach(t),Fkr=r(BIe," (ALBERT model)"),BIe.forEach(t),Tkr=i(we),u5=n(we,"LI",{});var IIe=s(u5);$Te=n(IIe,"STRONG",{});var _yt=s($Te);Mkr=r(_yt,"bart"),_yt.forEach(t),Ekr=r(IIe," \u2014 "),wY=n(IIe,"A",{href:!0});var byt=s(wY);Ckr=r(byt,"FlaxBartForConditionalGeneration"),byt.forEach(t),wkr=r(IIe," (BART model)"),IIe.forEach(t),Akr=i(we),_5=n(we,"LI",{});var NIe=s(_5);kTe=n(NIe,"STRONG",{});var vyt=s(kTe);ykr=r(vyt,"bert"),vyt.forEach(t),Lkr=r(NIe," \u2014 "),AY=n(NIe,"A",{href:!0});var Fyt=s(AY);xkr=r(Fyt,"FlaxBertForPreTraining"),Fyt.forEach(t),$kr=r(NIe," (BERT model)"),NIe.forEach(t),kkr=i(we),b5=n(we,"LI",{});var qIe=s(b5);STe=n(qIe,"STRONG",{});var Tyt=s(STe);Skr=r(Tyt,"big_bird"),Tyt.forEach(t),Rkr=r(qIe," \u2014 "),yY=n(qIe,"A",{href:!0});var Myt=s(yY);Pkr=r(Myt,"FlaxBigBirdForPreTraining"),Myt.forEach(t),Bkr=r(qIe," (BigBird model)"),qIe.forEach(t),Ikr=i(we),v5=n(we,"LI",{});var jIe=s(v5);RTe=n(jIe,"STRONG",{});var Eyt=s(RTe);Nkr=r(Eyt,"electra"),Eyt.forEach(t),qkr=r(jIe," \u2014 "),LY=n(jIe,"A",{href:!0});var Cyt=s(LY);jkr=r(Cyt,"FlaxElectraForPreTraining"),Cyt.forEach(t),Dkr=r(jIe," (ELECTRA model)"),jIe.forEach(t),Gkr=i(we),F5=n(we,"LI",{});var DIe=s(F5);PTe=n(DIe,"STRONG",{});var wyt=s(PTe);Okr=r(wyt,"mbart"),wyt.forEach(t),Vkr=r(DIe," \u2014 "),xY=n(DIe,"A",{href:!0});var Ayt=s(xY);Xkr=r(Ayt,"FlaxMBartForConditionalGeneration"),Ayt.forEach(t),zkr=r(DIe," (mBART model)"),DIe.forEach(t),Wkr=i(we),T5=n(we,"LI",{});var GIe=s(T5);BTe=n(GIe,"STRONG",{});var yyt=s(BTe);Qkr=r(yyt,"mt5"),yyt.forEach(t),Hkr=r(GIe," \u2014 "),$Y=n(GIe,"A",{href:!0});var Lyt=s($Y);Ukr=r(Lyt,"FlaxMT5ForConditionalGeneration"),Lyt.forEach(t),Jkr=r(GIe," (mT5 model)"),GIe.forEach(t),Ykr=i(we),M5=n(we,"LI",{});var OIe=s(M5);ITe=n(OIe,"STRONG",{});var xyt=s(ITe);Kkr=r(xyt,"roberta"),xyt.forEach(t),Zkr=r(OIe," \u2014 "),kY=n(OIe,"A",{href:!0});var $yt=s(kY);eSr=r($yt,"FlaxRobertaForMaskedLM"),$yt.forEach(t),oSr=r(OIe," (RoBERTa model)"),OIe.forEach(t),rSr=i(we),E5=n(we,"LI",{});var VIe=s(E5);NTe=n(VIe,"STRONG",{});var kyt=s(NTe);tSr=r(kyt,"roformer"),kyt.forEach(t),aSr=r(VIe," \u2014 "),SY=n(VIe,"A",{href:!0});var Syt=s(SY);nSr=r(Syt,"FlaxRoFormerForMaskedLM"),Syt.forEach(t),sSr=r(VIe," (RoFormer model)"),VIe.forEach(t),lSr=i(we),C5=n(we,"LI",{});var XIe=s(C5);qTe=n(XIe,"STRONG",{});var Ryt=s(qTe);iSr=r(Ryt,"t5"),Ryt.forEach(t),dSr=r(XIe," \u2014 "),RY=n(XIe,"A",{href:!0});var Pyt=s(RY);cSr=r(Pyt,"FlaxT5ForConditionalGeneration"),Pyt.forEach(t),fSr=r(XIe," (T5 model)"),XIe.forEach(t),mSr=i(we),w5=n(we,"LI",{});var zIe=s(w5);jTe=n(zIe,"STRONG",{});var Byt=s(jTe);gSr=r(Byt,"wav2vec2"),Byt.forEach(t),hSr=r(zIe," \u2014 "),PY=n(zIe,"A",{href:!0});var Iyt=s(PY);pSr=r(Iyt,"FlaxWav2Vec2ForPreTraining"),Iyt.forEach(t),uSr=r(zIe," (Wav2Vec2 model)"),zIe.forEach(t),_Sr=i(we),A5=n(we,"LI",{});var WIe=s(A5);DTe=n(WIe,"STRONG",{});var Nyt=s(DTe);bSr=r(Nyt,"xlm-roberta"),Nyt.forEach(t),vSr=r(WIe," \u2014 "),BY=n(WIe,"A",{href:!0});var qyt=s(BY);FSr=r(qyt,"FlaxXLMRobertaForMaskedLM"),qyt.forEach(t),TSr=r(WIe," (XLM-RoBERTa model)"),WIe.forEach(t),we.forEach(t),MSr=i(Wl),T(y5.$$.fragment,Wl),Wl.forEach(t),zl.forEach(t),Nje=i(f),qc=n(f,"H2",{class:!0});var XGe=s(qc);L5=n(XGe,"A",{id:!0,class:!0,href:!0});var jyt=s(L5);GTe=n(jyt,"SPAN",{});var Dyt=s(GTe);T(D9.$$.fragment,Dyt),Dyt.forEach(t),jyt.forEach(t),ESr=i(XGe),OTe=n(XGe,"SPAN",{});var Gyt=s(OTe);CSr=r(Gyt,"FlaxAutoModelForMaskedLM"),Gyt.forEach(t),XGe.forEach(t),qje=i(f),hr=n(f,"DIV",{class:!0});var Ql=s(hr);T(G9.$$.fragment,Ql),wSr=i(Ql),jc=n(Ql,"P",{});var Oee=s(jc);ASr=r(Oee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),IY=n(Oee,"A",{href:!0});var Oyt=s(IY);ySr=r(Oyt,"from_pretrained()"),Oyt.forEach(t),LSr=r(Oee," class method or the "),NY=n(Oee,"A",{href:!0});var Vyt=s(NY);xSr=r(Vyt,"from_config()"),Vyt.forEach(t),$Sr=r(Oee,` class
method.`),Oee.forEach(t),kSr=i(Ql),O9=n(Ql,"P",{});var zGe=s(O9);SSr=r(zGe,"This class cannot be instantiated directly using "),VTe=n(zGe,"CODE",{});var Xyt=s(VTe);RSr=r(Xyt,"__init__()"),Xyt.forEach(t),PSr=r(zGe," (throws an error)."),zGe.forEach(t),BSr=i(Ql),Xt=n(Ql,"DIV",{class:!0});var nA=s(Xt);T(V9.$$.fragment,nA),ISr=i(nA),XTe=n(nA,"P",{});var zyt=s(XTe);NSr=r(zyt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),zyt.forEach(t),qSr=i(nA),Dc=n(nA,"P",{});var Vee=s(Dc);jSr=r(Vee,`Note:
Loading a model from its configuration file does `),zTe=n(Vee,"STRONG",{});var Wyt=s(zTe);DSr=r(Wyt,"not"),Wyt.forEach(t),GSr=r(Vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),qY=n(Vee,"A",{href:!0});var Qyt=s(qY);OSr=r(Qyt,"from_pretrained()"),Qyt.forEach(t),VSr=r(Vee," to load the model weights."),Vee.forEach(t),XSr=i(nA),T(x5.$$.fragment,nA),nA.forEach(t),zSr=i(Ql),Or=n(Ql,"DIV",{class:!0});var Hl=s(Or);T(X9.$$.fragment,Hl),WSr=i(Hl),WTe=n(Hl,"P",{});var Hyt=s(WTe);QSr=r(Hyt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Hyt.forEach(t),HSr=i(Hl),_n=n(Hl,"P",{});var sA=s(_n);USr=r(sA,"The model class to instantiate is selected based on the "),QTe=n(sA,"CODE",{});var Uyt=s(QTe);JSr=r(Uyt,"model_type"),Uyt.forEach(t),YSr=r(sA,` property of the config object (either
passed as an argument or loaded from `),HTe=n(sA,"CODE",{});var Jyt=s(HTe);KSr=r(Jyt,"pretrained_model_name_or_path"),Jyt.forEach(t),ZSr=r(sA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UTe=n(sA,"CODE",{});var Yyt=s(UTe);eRr=r(Yyt,"pretrained_model_name_or_path"),Yyt.forEach(t),oRr=r(sA,":"),sA.forEach(t),rRr=i(Hl),Le=n(Hl,"UL",{});var Ie=s(Le);$5=n(Ie,"LI",{});var QIe=s($5);JTe=n(QIe,"STRONG",{});var Kyt=s(JTe);tRr=r(Kyt,"albert"),Kyt.forEach(t),aRr=r(QIe," \u2014 "),jY=n(QIe,"A",{href:!0});var Zyt=s(jY);nRr=r(Zyt,"FlaxAlbertForMaskedLM"),Zyt.forEach(t),sRr=r(QIe," (ALBERT model)"),QIe.forEach(t),lRr=i(Ie),k5=n(Ie,"LI",{});var HIe=s(k5);YTe=n(HIe,"STRONG",{});var eLt=s(YTe);iRr=r(eLt,"bart"),eLt.forEach(t),dRr=r(HIe," \u2014 "),DY=n(HIe,"A",{href:!0});var oLt=s(DY);cRr=r(oLt,"FlaxBartForConditionalGeneration"),oLt.forEach(t),fRr=r(HIe," (BART model)"),HIe.forEach(t),mRr=i(Ie),S5=n(Ie,"LI",{});var UIe=s(S5);KTe=n(UIe,"STRONG",{});var rLt=s(KTe);gRr=r(rLt,"bert"),rLt.forEach(t),hRr=r(UIe," \u2014 "),GY=n(UIe,"A",{href:!0});var tLt=s(GY);pRr=r(tLt,"FlaxBertForMaskedLM"),tLt.forEach(t),uRr=r(UIe," (BERT model)"),UIe.forEach(t),_Rr=i(Ie),R5=n(Ie,"LI",{});var JIe=s(R5);ZTe=n(JIe,"STRONG",{});var aLt=s(ZTe);bRr=r(aLt,"big_bird"),aLt.forEach(t),vRr=r(JIe," \u2014 "),OY=n(JIe,"A",{href:!0});var nLt=s(OY);FRr=r(nLt,"FlaxBigBirdForMaskedLM"),nLt.forEach(t),TRr=r(JIe," (BigBird model)"),JIe.forEach(t),MRr=i(Ie),P5=n(Ie,"LI",{});var YIe=s(P5);eMe=n(YIe,"STRONG",{});var sLt=s(eMe);ERr=r(sLt,"distilbert"),sLt.forEach(t),CRr=r(YIe," \u2014 "),VY=n(YIe,"A",{href:!0});var lLt=s(VY);wRr=r(lLt,"FlaxDistilBertForMaskedLM"),lLt.forEach(t),ARr=r(YIe," (DistilBERT model)"),YIe.forEach(t),yRr=i(Ie),B5=n(Ie,"LI",{});var KIe=s(B5);oMe=n(KIe,"STRONG",{});var iLt=s(oMe);LRr=r(iLt,"electra"),iLt.forEach(t),xRr=r(KIe," \u2014 "),XY=n(KIe,"A",{href:!0});var dLt=s(XY);$Rr=r(dLt,"FlaxElectraForMaskedLM"),dLt.forEach(t),kRr=r(KIe," (ELECTRA model)"),KIe.forEach(t),SRr=i(Ie),I5=n(Ie,"LI",{});var ZIe=s(I5);rMe=n(ZIe,"STRONG",{});var cLt=s(rMe);RRr=r(cLt,"mbart"),cLt.forEach(t),PRr=r(ZIe," \u2014 "),zY=n(ZIe,"A",{href:!0});var fLt=s(zY);BRr=r(fLt,"FlaxMBartForConditionalGeneration"),fLt.forEach(t),IRr=r(ZIe," (mBART model)"),ZIe.forEach(t),NRr=i(Ie),N5=n(Ie,"LI",{});var eNe=s(N5);tMe=n(eNe,"STRONG",{});var mLt=s(tMe);qRr=r(mLt,"roberta"),mLt.forEach(t),jRr=r(eNe," \u2014 "),WY=n(eNe,"A",{href:!0});var gLt=s(WY);DRr=r(gLt,"FlaxRobertaForMaskedLM"),gLt.forEach(t),GRr=r(eNe," (RoBERTa model)"),eNe.forEach(t),ORr=i(Ie),q5=n(Ie,"LI",{});var oNe=s(q5);aMe=n(oNe,"STRONG",{});var hLt=s(aMe);VRr=r(hLt,"roformer"),hLt.forEach(t),XRr=r(oNe," \u2014 "),QY=n(oNe,"A",{href:!0});var pLt=s(QY);zRr=r(pLt,"FlaxRoFormerForMaskedLM"),pLt.forEach(t),WRr=r(oNe," (RoFormer model)"),oNe.forEach(t),QRr=i(Ie),j5=n(Ie,"LI",{});var rNe=s(j5);nMe=n(rNe,"STRONG",{});var uLt=s(nMe);HRr=r(uLt,"xlm-roberta"),uLt.forEach(t),URr=r(rNe," \u2014 "),HY=n(rNe,"A",{href:!0});var _Lt=s(HY);JRr=r(_Lt,"FlaxXLMRobertaForMaskedLM"),_Lt.forEach(t),YRr=r(rNe," (XLM-RoBERTa model)"),rNe.forEach(t),Ie.forEach(t),KRr=i(Hl),T(D5.$$.fragment,Hl),Hl.forEach(t),Ql.forEach(t),jje=i(f),Gc=n(f,"H2",{class:!0});var WGe=s(Gc);G5=n(WGe,"A",{id:!0,class:!0,href:!0});var bLt=s(G5);sMe=n(bLt,"SPAN",{});var vLt=s(sMe);T(z9.$$.fragment,vLt),vLt.forEach(t),bLt.forEach(t),ZRr=i(WGe),lMe=n(WGe,"SPAN",{});var FLt=s(lMe);ePr=r(FLt,"FlaxAutoModelForSeq2SeqLM"),FLt.forEach(t),WGe.forEach(t),Dje=i(f),pr=n(f,"DIV",{class:!0});var Ul=s(pr);T(W9.$$.fragment,Ul),oPr=i(Ul),Oc=n(Ul,"P",{});var Xee=s(Oc);rPr=r(Xee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),UY=n(Xee,"A",{href:!0});var TLt=s(UY);tPr=r(TLt,"from_pretrained()"),TLt.forEach(t),aPr=r(Xee," class method or the "),JY=n(Xee,"A",{href:!0});var MLt=s(JY);nPr=r(MLt,"from_config()"),MLt.forEach(t),sPr=r(Xee,` class
method.`),Xee.forEach(t),lPr=i(Ul),Q9=n(Ul,"P",{});var QGe=s(Q9);iPr=r(QGe,"This class cannot be instantiated directly using "),iMe=n(QGe,"CODE",{});var ELt=s(iMe);dPr=r(ELt,"__init__()"),ELt.forEach(t),cPr=r(QGe," (throws an error)."),QGe.forEach(t),fPr=i(Ul),zt=n(Ul,"DIV",{class:!0});var lA=s(zt);T(H9.$$.fragment,lA),mPr=i(lA),dMe=n(lA,"P",{});var CLt=s(dMe);gPr=r(CLt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),CLt.forEach(t),hPr=i(lA),Vc=n(lA,"P",{});var zee=s(Vc);pPr=r(zee,`Note:
Loading a model from its configuration file does `),cMe=n(zee,"STRONG",{});var wLt=s(cMe);uPr=r(wLt,"not"),wLt.forEach(t),_Pr=r(zee,` load the model weights. It only affects the
model\u2019s configuration. Use `),YY=n(zee,"A",{href:!0});var ALt=s(YY);bPr=r(ALt,"from_pretrained()"),ALt.forEach(t),vPr=r(zee," to load the model weights."),zee.forEach(t),FPr=i(lA),T(O5.$$.fragment,lA),lA.forEach(t),TPr=i(Ul),Vr=n(Ul,"DIV",{class:!0});var Jl=s(Vr);T(U9.$$.fragment,Jl),MPr=i(Jl),fMe=n(Jl,"P",{});var yLt=s(fMe);EPr=r(yLt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),yLt.forEach(t),CPr=i(Jl),bn=n(Jl,"P",{});var iA=s(bn);wPr=r(iA,"The model class to instantiate is selected based on the "),mMe=n(iA,"CODE",{});var LLt=s(mMe);APr=r(LLt,"model_type"),LLt.forEach(t),yPr=r(iA,` property of the config object (either
passed as an argument or loaded from `),gMe=n(iA,"CODE",{});var xLt=s(gMe);LPr=r(xLt,"pretrained_model_name_or_path"),xLt.forEach(t),xPr=r(iA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hMe=n(iA,"CODE",{});var $Lt=s(hMe);$Pr=r($Lt,"pretrained_model_name_or_path"),$Lt.forEach(t),kPr=r(iA,":"),iA.forEach(t),SPr=i(Jl),Pe=n(Jl,"UL",{});var ze=s(Pe);V5=n(ze,"LI",{});var tNe=s(V5);pMe=n(tNe,"STRONG",{});var kLt=s(pMe);RPr=r(kLt,"bart"),kLt.forEach(t),PPr=r(tNe," \u2014 "),KY=n(tNe,"A",{href:!0});var SLt=s(KY);BPr=r(SLt,"FlaxBartForConditionalGeneration"),SLt.forEach(t),IPr=r(tNe," (BART model)"),tNe.forEach(t),NPr=i(ze),X5=n(ze,"LI",{});var aNe=s(X5);uMe=n(aNe,"STRONG",{});var RLt=s(uMe);qPr=r(RLt,"blenderbot"),RLt.forEach(t),jPr=r(aNe," \u2014 "),ZY=n(aNe,"A",{href:!0});var PLt=s(ZY);DPr=r(PLt,"FlaxBlenderbotForConditionalGeneration"),PLt.forEach(t),GPr=r(aNe," (Blenderbot model)"),aNe.forEach(t),OPr=i(ze),z5=n(ze,"LI",{});var nNe=s(z5);_Me=n(nNe,"STRONG",{});var BLt=s(_Me);VPr=r(BLt,"blenderbot-small"),BLt.forEach(t),XPr=r(nNe," \u2014 "),eK=n(nNe,"A",{href:!0});var ILt=s(eK);zPr=r(ILt,"FlaxBlenderbotSmallForConditionalGeneration"),ILt.forEach(t),WPr=r(nNe," (BlenderbotSmall model)"),nNe.forEach(t),QPr=i(ze),W5=n(ze,"LI",{});var sNe=s(W5);bMe=n(sNe,"STRONG",{});var NLt=s(bMe);HPr=r(NLt,"encoder-decoder"),NLt.forEach(t),UPr=r(sNe," \u2014 "),oK=n(sNe,"A",{href:!0});var qLt=s(oK);JPr=r(qLt,"FlaxEncoderDecoderModel"),qLt.forEach(t),YPr=r(sNe," (Encoder decoder model)"),sNe.forEach(t),KPr=i(ze),Q5=n(ze,"LI",{});var lNe=s(Q5);vMe=n(lNe,"STRONG",{});var jLt=s(vMe);ZPr=r(jLt,"marian"),jLt.forEach(t),eBr=r(lNe," \u2014 "),rK=n(lNe,"A",{href:!0});var DLt=s(rK);oBr=r(DLt,"FlaxMarianMTModel"),DLt.forEach(t),rBr=r(lNe," (Marian model)"),lNe.forEach(t),tBr=i(ze),H5=n(ze,"LI",{});var iNe=s(H5);FMe=n(iNe,"STRONG",{});var GLt=s(FMe);aBr=r(GLt,"mbart"),GLt.forEach(t),nBr=r(iNe," \u2014 "),tK=n(iNe,"A",{href:!0});var OLt=s(tK);sBr=r(OLt,"FlaxMBartForConditionalGeneration"),OLt.forEach(t),lBr=r(iNe," (mBART model)"),iNe.forEach(t),iBr=i(ze),U5=n(ze,"LI",{});var dNe=s(U5);TMe=n(dNe,"STRONG",{});var VLt=s(TMe);dBr=r(VLt,"mt5"),VLt.forEach(t),cBr=r(dNe," \u2014 "),aK=n(dNe,"A",{href:!0});var XLt=s(aK);fBr=r(XLt,"FlaxMT5ForConditionalGeneration"),XLt.forEach(t),mBr=r(dNe," (mT5 model)"),dNe.forEach(t),gBr=i(ze),J5=n(ze,"LI",{});var cNe=s(J5);MMe=n(cNe,"STRONG",{});var zLt=s(MMe);hBr=r(zLt,"pegasus"),zLt.forEach(t),pBr=r(cNe," \u2014 "),nK=n(cNe,"A",{href:!0});var WLt=s(nK);uBr=r(WLt,"FlaxPegasusForConditionalGeneration"),WLt.forEach(t),_Br=r(cNe," (Pegasus model)"),cNe.forEach(t),bBr=i(ze),Y5=n(ze,"LI",{});var fNe=s(Y5);EMe=n(fNe,"STRONG",{});var QLt=s(EMe);vBr=r(QLt,"t5"),QLt.forEach(t),FBr=r(fNe," \u2014 "),sK=n(fNe,"A",{href:!0});var HLt=s(sK);TBr=r(HLt,"FlaxT5ForConditionalGeneration"),HLt.forEach(t),MBr=r(fNe," (T5 model)"),fNe.forEach(t),ze.forEach(t),EBr=i(Jl),T(K5.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),Gje=i(f),Xc=n(f,"H2",{class:!0});var HGe=s(Xc);Z5=n(HGe,"A",{id:!0,class:!0,href:!0});var ULt=s(Z5);CMe=n(ULt,"SPAN",{});var JLt=s(CMe);T(J9.$$.fragment,JLt),JLt.forEach(t),ULt.forEach(t),CBr=i(HGe),wMe=n(HGe,"SPAN",{});var YLt=s(wMe);wBr=r(YLt,"FlaxAutoModelForSequenceClassification"),YLt.forEach(t),HGe.forEach(t),Oje=i(f),ur=n(f,"DIV",{class:!0});var Yl=s(ur);T(Y9.$$.fragment,Yl),ABr=i(Yl),zc=n(Yl,"P",{});var Wee=s(zc);yBr=r(Wee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),lK=n(Wee,"A",{href:!0});var KLt=s(lK);LBr=r(KLt,"from_pretrained()"),KLt.forEach(t),xBr=r(Wee," class method or the "),iK=n(Wee,"A",{href:!0});var ZLt=s(iK);$Br=r(ZLt,"from_config()"),ZLt.forEach(t),kBr=r(Wee,` class
method.`),Wee.forEach(t),SBr=i(Yl),K9=n(Yl,"P",{});var UGe=s(K9);RBr=r(UGe,"This class cannot be instantiated directly using "),AMe=n(UGe,"CODE",{});var e8t=s(AMe);PBr=r(e8t,"__init__()"),e8t.forEach(t),BBr=r(UGe," (throws an error)."),UGe.forEach(t),IBr=i(Yl),Wt=n(Yl,"DIV",{class:!0});var dA=s(Wt);T(Z9.$$.fragment,dA),NBr=i(dA),yMe=n(dA,"P",{});var o8t=s(yMe);qBr=r(o8t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),o8t.forEach(t),jBr=i(dA),Wc=n(dA,"P",{});var Qee=s(Wc);DBr=r(Qee,`Note:
Loading a model from its configuration file does `),LMe=n(Qee,"STRONG",{});var r8t=s(LMe);GBr=r(r8t,"not"),r8t.forEach(t),OBr=r(Qee,` load the model weights. It only affects the
model\u2019s configuration. Use `),dK=n(Qee,"A",{href:!0});var t8t=s(dK);VBr=r(t8t,"from_pretrained()"),t8t.forEach(t),XBr=r(Qee," to load the model weights."),Qee.forEach(t),zBr=i(dA),T(e3.$$.fragment,dA),dA.forEach(t),WBr=i(Yl),Xr=n(Yl,"DIV",{class:!0});var Kl=s(Xr);T(ex.$$.fragment,Kl),QBr=i(Kl),xMe=n(Kl,"P",{});var a8t=s(xMe);HBr=r(a8t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),a8t.forEach(t),UBr=i(Kl),vn=n(Kl,"P",{});var cA=s(vn);JBr=r(cA,"The model class to instantiate is selected based on the "),$Me=n(cA,"CODE",{});var n8t=s($Me);YBr=r(n8t,"model_type"),n8t.forEach(t),KBr=r(cA,` property of the config object (either
passed as an argument or loaded from `),kMe=n(cA,"CODE",{});var s8t=s(kMe);ZBr=r(s8t,"pretrained_model_name_or_path"),s8t.forEach(t),eIr=r(cA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SMe=n(cA,"CODE",{});var l8t=s(SMe);oIr=r(l8t,"pretrained_model_name_or_path"),l8t.forEach(t),rIr=r(cA,":"),cA.forEach(t),tIr=i(Kl),xe=n(Kl,"UL",{});var Ne=s(xe);o3=n(Ne,"LI",{});var mNe=s(o3);RMe=n(mNe,"STRONG",{});var i8t=s(RMe);aIr=r(i8t,"albert"),i8t.forEach(t),nIr=r(mNe," \u2014 "),cK=n(mNe,"A",{href:!0});var d8t=s(cK);sIr=r(d8t,"FlaxAlbertForSequenceClassification"),d8t.forEach(t),lIr=r(mNe," (ALBERT model)"),mNe.forEach(t),iIr=i(Ne),r3=n(Ne,"LI",{});var gNe=s(r3);PMe=n(gNe,"STRONG",{});var c8t=s(PMe);dIr=r(c8t,"bart"),c8t.forEach(t),cIr=r(gNe," \u2014 "),fK=n(gNe,"A",{href:!0});var f8t=s(fK);fIr=r(f8t,"FlaxBartForSequenceClassification"),f8t.forEach(t),mIr=r(gNe," (BART model)"),gNe.forEach(t),gIr=i(Ne),t3=n(Ne,"LI",{});var hNe=s(t3);BMe=n(hNe,"STRONG",{});var m8t=s(BMe);hIr=r(m8t,"bert"),m8t.forEach(t),pIr=r(hNe," \u2014 "),mK=n(hNe,"A",{href:!0});var g8t=s(mK);uIr=r(g8t,"FlaxBertForSequenceClassification"),g8t.forEach(t),_Ir=r(hNe," (BERT model)"),hNe.forEach(t),bIr=i(Ne),a3=n(Ne,"LI",{});var pNe=s(a3);IMe=n(pNe,"STRONG",{});var h8t=s(IMe);vIr=r(h8t,"big_bird"),h8t.forEach(t),FIr=r(pNe," \u2014 "),gK=n(pNe,"A",{href:!0});var p8t=s(gK);TIr=r(p8t,"FlaxBigBirdForSequenceClassification"),p8t.forEach(t),MIr=r(pNe," (BigBird model)"),pNe.forEach(t),EIr=i(Ne),n3=n(Ne,"LI",{});var uNe=s(n3);NMe=n(uNe,"STRONG",{});var u8t=s(NMe);CIr=r(u8t,"distilbert"),u8t.forEach(t),wIr=r(uNe," \u2014 "),hK=n(uNe,"A",{href:!0});var _8t=s(hK);AIr=r(_8t,"FlaxDistilBertForSequenceClassification"),_8t.forEach(t),yIr=r(uNe," (DistilBERT model)"),uNe.forEach(t),LIr=i(Ne),s3=n(Ne,"LI",{});var _Ne=s(s3);qMe=n(_Ne,"STRONG",{});var b8t=s(qMe);xIr=r(b8t,"electra"),b8t.forEach(t),$Ir=r(_Ne," \u2014 "),pK=n(_Ne,"A",{href:!0});var v8t=s(pK);kIr=r(v8t,"FlaxElectraForSequenceClassification"),v8t.forEach(t),SIr=r(_Ne," (ELECTRA model)"),_Ne.forEach(t),RIr=i(Ne),l3=n(Ne,"LI",{});var bNe=s(l3);jMe=n(bNe,"STRONG",{});var F8t=s(jMe);PIr=r(F8t,"mbart"),F8t.forEach(t),BIr=r(bNe," \u2014 "),uK=n(bNe,"A",{href:!0});var T8t=s(uK);IIr=r(T8t,"FlaxMBartForSequenceClassification"),T8t.forEach(t),NIr=r(bNe," (mBART model)"),bNe.forEach(t),qIr=i(Ne),i3=n(Ne,"LI",{});var vNe=s(i3);DMe=n(vNe,"STRONG",{});var M8t=s(DMe);jIr=r(M8t,"roberta"),M8t.forEach(t),DIr=r(vNe," \u2014 "),_K=n(vNe,"A",{href:!0});var E8t=s(_K);GIr=r(E8t,"FlaxRobertaForSequenceClassification"),E8t.forEach(t),OIr=r(vNe," (RoBERTa model)"),vNe.forEach(t),VIr=i(Ne),d3=n(Ne,"LI",{});var FNe=s(d3);GMe=n(FNe,"STRONG",{});var C8t=s(GMe);XIr=r(C8t,"roformer"),C8t.forEach(t),zIr=r(FNe," \u2014 "),bK=n(FNe,"A",{href:!0});var w8t=s(bK);WIr=r(w8t,"FlaxRoFormerForSequenceClassification"),w8t.forEach(t),QIr=r(FNe," (RoFormer model)"),FNe.forEach(t),HIr=i(Ne),c3=n(Ne,"LI",{});var TNe=s(c3);OMe=n(TNe,"STRONG",{});var A8t=s(OMe);UIr=r(A8t,"xlm-roberta"),A8t.forEach(t),JIr=r(TNe," \u2014 "),vK=n(TNe,"A",{href:!0});var y8t=s(vK);YIr=r(y8t,"FlaxXLMRobertaForSequenceClassification"),y8t.forEach(t),KIr=r(TNe," (XLM-RoBERTa model)"),TNe.forEach(t),Ne.forEach(t),ZIr=i(Kl),T(f3.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),Vje=i(f),Qc=n(f,"H2",{class:!0});var JGe=s(Qc);m3=n(JGe,"A",{id:!0,class:!0,href:!0});var L8t=s(m3);VMe=n(L8t,"SPAN",{});var x8t=s(VMe);T(ox.$$.fragment,x8t),x8t.forEach(t),L8t.forEach(t),eNr=i(JGe),XMe=n(JGe,"SPAN",{});var $8t=s(XMe);oNr=r($8t,"FlaxAutoModelForQuestionAnswering"),$8t.forEach(t),JGe.forEach(t),Xje=i(f),_r=n(f,"DIV",{class:!0});var Zl=s(_r);T(rx.$$.fragment,Zl),rNr=i(Zl),Hc=n(Zl,"P",{});var Hee=s(Hc);tNr=r(Hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),FK=n(Hee,"A",{href:!0});var k8t=s(FK);aNr=r(k8t,"from_pretrained()"),k8t.forEach(t),nNr=r(Hee," class method or the "),TK=n(Hee,"A",{href:!0});var S8t=s(TK);sNr=r(S8t,"from_config()"),S8t.forEach(t),lNr=r(Hee,` class
method.`),Hee.forEach(t),iNr=i(Zl),tx=n(Zl,"P",{});var YGe=s(tx);dNr=r(YGe,"This class cannot be instantiated directly using "),zMe=n(YGe,"CODE",{});var R8t=s(zMe);cNr=r(R8t,"__init__()"),R8t.forEach(t),fNr=r(YGe," (throws an error)."),YGe.forEach(t),mNr=i(Zl),Qt=n(Zl,"DIV",{class:!0});var fA=s(Qt);T(ax.$$.fragment,fA),gNr=i(fA),WMe=n(fA,"P",{});var P8t=s(WMe);hNr=r(P8t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),P8t.forEach(t),pNr=i(fA),Uc=n(fA,"P",{});var Uee=s(Uc);uNr=r(Uee,`Note:
Loading a model from its configuration file does `),QMe=n(Uee,"STRONG",{});var B8t=s(QMe);_Nr=r(B8t,"not"),B8t.forEach(t),bNr=r(Uee,` load the model weights. It only affects the
model\u2019s configuration. Use `),MK=n(Uee,"A",{href:!0});var I8t=s(MK);vNr=r(I8t,"from_pretrained()"),I8t.forEach(t),FNr=r(Uee," to load the model weights."),Uee.forEach(t),TNr=i(fA),T(g3.$$.fragment,fA),fA.forEach(t),MNr=i(Zl),zr=n(Zl,"DIV",{class:!0});var ei=s(zr);T(nx.$$.fragment,ei),ENr=i(ei),HMe=n(ei,"P",{});var N8t=s(HMe);CNr=r(N8t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),N8t.forEach(t),wNr=i(ei),Fn=n(ei,"P",{});var mA=s(Fn);ANr=r(mA,"The model class to instantiate is selected based on the "),UMe=n(mA,"CODE",{});var q8t=s(UMe);yNr=r(q8t,"model_type"),q8t.forEach(t),LNr=r(mA,` property of the config object (either
passed as an argument or loaded from `),JMe=n(mA,"CODE",{});var j8t=s(JMe);xNr=r(j8t,"pretrained_model_name_or_path"),j8t.forEach(t),$Nr=r(mA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YMe=n(mA,"CODE",{});var D8t=s(YMe);kNr=r(D8t,"pretrained_model_name_or_path"),D8t.forEach(t),SNr=r(mA,":"),mA.forEach(t),RNr=i(ei),$e=n(ei,"UL",{});var qe=s($e);h3=n(qe,"LI",{});var MNe=s(h3);KMe=n(MNe,"STRONG",{});var G8t=s(KMe);PNr=r(G8t,"albert"),G8t.forEach(t),BNr=r(MNe," \u2014 "),EK=n(MNe,"A",{href:!0});var O8t=s(EK);INr=r(O8t,"FlaxAlbertForQuestionAnswering"),O8t.forEach(t),NNr=r(MNe," (ALBERT model)"),MNe.forEach(t),qNr=i(qe),p3=n(qe,"LI",{});var ENe=s(p3);ZMe=n(ENe,"STRONG",{});var V8t=s(ZMe);jNr=r(V8t,"bart"),V8t.forEach(t),DNr=r(ENe," \u2014 "),CK=n(ENe,"A",{href:!0});var X8t=s(CK);GNr=r(X8t,"FlaxBartForQuestionAnswering"),X8t.forEach(t),ONr=r(ENe," (BART model)"),ENe.forEach(t),VNr=i(qe),u3=n(qe,"LI",{});var CNe=s(u3);eEe=n(CNe,"STRONG",{});var z8t=s(eEe);XNr=r(z8t,"bert"),z8t.forEach(t),zNr=r(CNe," \u2014 "),wK=n(CNe,"A",{href:!0});var W8t=s(wK);WNr=r(W8t,"FlaxBertForQuestionAnswering"),W8t.forEach(t),QNr=r(CNe," (BERT model)"),CNe.forEach(t),HNr=i(qe),_3=n(qe,"LI",{});var wNe=s(_3);oEe=n(wNe,"STRONG",{});var Q8t=s(oEe);UNr=r(Q8t,"big_bird"),Q8t.forEach(t),JNr=r(wNe," \u2014 "),AK=n(wNe,"A",{href:!0});var H8t=s(AK);YNr=r(H8t,"FlaxBigBirdForQuestionAnswering"),H8t.forEach(t),KNr=r(wNe," (BigBird model)"),wNe.forEach(t),ZNr=i(qe),b3=n(qe,"LI",{});var ANe=s(b3);rEe=n(ANe,"STRONG",{});var U8t=s(rEe);eqr=r(U8t,"distilbert"),U8t.forEach(t),oqr=r(ANe," \u2014 "),yK=n(ANe,"A",{href:!0});var J8t=s(yK);rqr=r(J8t,"FlaxDistilBertForQuestionAnswering"),J8t.forEach(t),tqr=r(ANe," (DistilBERT model)"),ANe.forEach(t),aqr=i(qe),v3=n(qe,"LI",{});var yNe=s(v3);tEe=n(yNe,"STRONG",{});var Y8t=s(tEe);nqr=r(Y8t,"electra"),Y8t.forEach(t),sqr=r(yNe," \u2014 "),LK=n(yNe,"A",{href:!0});var K8t=s(LK);lqr=r(K8t,"FlaxElectraForQuestionAnswering"),K8t.forEach(t),iqr=r(yNe," (ELECTRA model)"),yNe.forEach(t),dqr=i(qe),F3=n(qe,"LI",{});var LNe=s(F3);aEe=n(LNe,"STRONG",{});var Z8t=s(aEe);cqr=r(Z8t,"mbart"),Z8t.forEach(t),fqr=r(LNe," \u2014 "),xK=n(LNe,"A",{href:!0});var e9t=s(xK);mqr=r(e9t,"FlaxMBartForQuestionAnswering"),e9t.forEach(t),gqr=r(LNe," (mBART model)"),LNe.forEach(t),hqr=i(qe),T3=n(qe,"LI",{});var xNe=s(T3);nEe=n(xNe,"STRONG",{});var o9t=s(nEe);pqr=r(o9t,"roberta"),o9t.forEach(t),uqr=r(xNe," \u2014 "),$K=n(xNe,"A",{href:!0});var r9t=s($K);_qr=r(r9t,"FlaxRobertaForQuestionAnswering"),r9t.forEach(t),bqr=r(xNe," (RoBERTa model)"),xNe.forEach(t),vqr=i(qe),M3=n(qe,"LI",{});var $Ne=s(M3);sEe=n($Ne,"STRONG",{});var t9t=s(sEe);Fqr=r(t9t,"roformer"),t9t.forEach(t),Tqr=r($Ne," \u2014 "),kK=n($Ne,"A",{href:!0});var a9t=s(kK);Mqr=r(a9t,"FlaxRoFormerForQuestionAnswering"),a9t.forEach(t),Eqr=r($Ne," (RoFormer model)"),$Ne.forEach(t),Cqr=i(qe),E3=n(qe,"LI",{});var kNe=s(E3);lEe=n(kNe,"STRONG",{});var n9t=s(lEe);wqr=r(n9t,"xlm-roberta"),n9t.forEach(t),Aqr=r(kNe," \u2014 "),SK=n(kNe,"A",{href:!0});var s9t=s(SK);yqr=r(s9t,"FlaxXLMRobertaForQuestionAnswering"),s9t.forEach(t),Lqr=r(kNe," (XLM-RoBERTa model)"),kNe.forEach(t),qe.forEach(t),xqr=i(ei),T(C3.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),zje=i(f),Jc=n(f,"H2",{class:!0});var KGe=s(Jc);w3=n(KGe,"A",{id:!0,class:!0,href:!0});var l9t=s(w3);iEe=n(l9t,"SPAN",{});var i9t=s(iEe);T(sx.$$.fragment,i9t),i9t.forEach(t),l9t.forEach(t),$qr=i(KGe),dEe=n(KGe,"SPAN",{});var d9t=s(dEe);kqr=r(d9t,"FlaxAutoModelForTokenClassification"),d9t.forEach(t),KGe.forEach(t),Wje=i(f),br=n(f,"DIV",{class:!0});var oi=s(br);T(lx.$$.fragment,oi),Sqr=i(oi),Yc=n(oi,"P",{});var Jee=s(Yc);Rqr=r(Jee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),RK=n(Jee,"A",{href:!0});var c9t=s(RK);Pqr=r(c9t,"from_pretrained()"),c9t.forEach(t),Bqr=r(Jee," class method or the "),PK=n(Jee,"A",{href:!0});var f9t=s(PK);Iqr=r(f9t,"from_config()"),f9t.forEach(t),Nqr=r(Jee,` class
method.`),Jee.forEach(t),qqr=i(oi),ix=n(oi,"P",{});var ZGe=s(ix);jqr=r(ZGe,"This class cannot be instantiated directly using "),cEe=n(ZGe,"CODE",{});var m9t=s(cEe);Dqr=r(m9t,"__init__()"),m9t.forEach(t),Gqr=r(ZGe," (throws an error)."),ZGe.forEach(t),Oqr=i(oi),Ht=n(oi,"DIV",{class:!0});var gA=s(Ht);T(dx.$$.fragment,gA),Vqr=i(gA),fEe=n(gA,"P",{});var g9t=s(fEe);Xqr=r(g9t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),g9t.forEach(t),zqr=i(gA),Kc=n(gA,"P",{});var Yee=s(Kc);Wqr=r(Yee,`Note:
Loading a model from its configuration file does `),mEe=n(Yee,"STRONG",{});var h9t=s(mEe);Qqr=r(h9t,"not"),h9t.forEach(t),Hqr=r(Yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),BK=n(Yee,"A",{href:!0});var p9t=s(BK);Uqr=r(p9t,"from_pretrained()"),p9t.forEach(t),Jqr=r(Yee," to load the model weights."),Yee.forEach(t),Yqr=i(gA),T(A3.$$.fragment,gA),gA.forEach(t),Kqr=i(oi),Wr=n(oi,"DIV",{class:!0});var ri=s(Wr);T(cx.$$.fragment,ri),Zqr=i(ri),gEe=n(ri,"P",{});var u9t=s(gEe);ejr=r(u9t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),u9t.forEach(t),ojr=i(ri),Tn=n(ri,"P",{});var hA=s(Tn);rjr=r(hA,"The model class to instantiate is selected based on the "),hEe=n(hA,"CODE",{});var _9t=s(hEe);tjr=r(_9t,"model_type"),_9t.forEach(t),ajr=r(hA,` property of the config object (either
passed as an argument or loaded from `),pEe=n(hA,"CODE",{});var b9t=s(pEe);njr=r(b9t,"pretrained_model_name_or_path"),b9t.forEach(t),sjr=r(hA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uEe=n(hA,"CODE",{});var v9t=s(uEe);ljr=r(v9t,"pretrained_model_name_or_path"),v9t.forEach(t),ijr=r(hA,":"),hA.forEach(t),djr=i(ri),De=n(ri,"UL",{});var Fo=s(De);y3=n(Fo,"LI",{});var SNe=s(y3);_Ee=n(SNe,"STRONG",{});var F9t=s(_Ee);cjr=r(F9t,"albert"),F9t.forEach(t),fjr=r(SNe," \u2014 "),IK=n(SNe,"A",{href:!0});var T9t=s(IK);mjr=r(T9t,"FlaxAlbertForTokenClassification"),T9t.forEach(t),gjr=r(SNe," (ALBERT model)"),SNe.forEach(t),hjr=i(Fo),L3=n(Fo,"LI",{});var RNe=s(L3);bEe=n(RNe,"STRONG",{});var M9t=s(bEe);pjr=r(M9t,"bert"),M9t.forEach(t),ujr=r(RNe," \u2014 "),NK=n(RNe,"A",{href:!0});var E9t=s(NK);_jr=r(E9t,"FlaxBertForTokenClassification"),E9t.forEach(t),bjr=r(RNe," (BERT model)"),RNe.forEach(t),vjr=i(Fo),x3=n(Fo,"LI",{});var PNe=s(x3);vEe=n(PNe,"STRONG",{});var C9t=s(vEe);Fjr=r(C9t,"big_bird"),C9t.forEach(t),Tjr=r(PNe," \u2014 "),qK=n(PNe,"A",{href:!0});var w9t=s(qK);Mjr=r(w9t,"FlaxBigBirdForTokenClassification"),w9t.forEach(t),Ejr=r(PNe," (BigBird model)"),PNe.forEach(t),Cjr=i(Fo),$3=n(Fo,"LI",{});var BNe=s($3);FEe=n(BNe,"STRONG",{});var A9t=s(FEe);wjr=r(A9t,"distilbert"),A9t.forEach(t),Ajr=r(BNe," \u2014 "),jK=n(BNe,"A",{href:!0});var y9t=s(jK);yjr=r(y9t,"FlaxDistilBertForTokenClassification"),y9t.forEach(t),Ljr=r(BNe," (DistilBERT model)"),BNe.forEach(t),xjr=i(Fo),k3=n(Fo,"LI",{});var INe=s(k3);TEe=n(INe,"STRONG",{});var L9t=s(TEe);$jr=r(L9t,"electra"),L9t.forEach(t),kjr=r(INe," \u2014 "),DK=n(INe,"A",{href:!0});var x9t=s(DK);Sjr=r(x9t,"FlaxElectraForTokenClassification"),x9t.forEach(t),Rjr=r(INe," (ELECTRA model)"),INe.forEach(t),Pjr=i(Fo),S3=n(Fo,"LI",{});var NNe=s(S3);MEe=n(NNe,"STRONG",{});var $9t=s(MEe);Bjr=r($9t,"roberta"),$9t.forEach(t),Ijr=r(NNe," \u2014 "),GK=n(NNe,"A",{href:!0});var k9t=s(GK);Njr=r(k9t,"FlaxRobertaForTokenClassification"),k9t.forEach(t),qjr=r(NNe," (RoBERTa model)"),NNe.forEach(t),jjr=i(Fo),R3=n(Fo,"LI",{});var qNe=s(R3);EEe=n(qNe,"STRONG",{});var S9t=s(EEe);Djr=r(S9t,"roformer"),S9t.forEach(t),Gjr=r(qNe," \u2014 "),OK=n(qNe,"A",{href:!0});var R9t=s(OK);Ojr=r(R9t,"FlaxRoFormerForTokenClassification"),R9t.forEach(t),Vjr=r(qNe," (RoFormer model)"),qNe.forEach(t),Xjr=i(Fo),P3=n(Fo,"LI",{});var jNe=s(P3);CEe=n(jNe,"STRONG",{});var P9t=s(CEe);zjr=r(P9t,"xlm-roberta"),P9t.forEach(t),Wjr=r(jNe," \u2014 "),VK=n(jNe,"A",{href:!0});var B9t=s(VK);Qjr=r(B9t,"FlaxXLMRobertaForTokenClassification"),B9t.forEach(t),Hjr=r(jNe," (XLM-RoBERTa model)"),jNe.forEach(t),Fo.forEach(t),Ujr=i(ri),T(B3.$$.fragment,ri),ri.forEach(t),oi.forEach(t),Qje=i(f),Zc=n(f,"H2",{class:!0});var eOe=s(Zc);I3=n(eOe,"A",{id:!0,class:!0,href:!0});var I9t=s(I3);wEe=n(I9t,"SPAN",{});var N9t=s(wEe);T(fx.$$.fragment,N9t),N9t.forEach(t),I9t.forEach(t),Jjr=i(eOe),AEe=n(eOe,"SPAN",{});var q9t=s(AEe);Yjr=r(q9t,"FlaxAutoModelForMultipleChoice"),q9t.forEach(t),eOe.forEach(t),Hje=i(f),vr=n(f,"DIV",{class:!0});var ti=s(vr);T(mx.$$.fragment,ti),Kjr=i(ti),ef=n(ti,"P",{});var Kee=s(ef);Zjr=r(Kee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),XK=n(Kee,"A",{href:!0});var j9t=s(XK);eDr=r(j9t,"from_pretrained()"),j9t.forEach(t),oDr=r(Kee," class method or the "),zK=n(Kee,"A",{href:!0});var D9t=s(zK);rDr=r(D9t,"from_config()"),D9t.forEach(t),tDr=r(Kee,` class
method.`),Kee.forEach(t),aDr=i(ti),gx=n(ti,"P",{});var oOe=s(gx);nDr=r(oOe,"This class cannot be instantiated directly using "),yEe=n(oOe,"CODE",{});var G9t=s(yEe);sDr=r(G9t,"__init__()"),G9t.forEach(t),lDr=r(oOe," (throws an error)."),oOe.forEach(t),iDr=i(ti),Ut=n(ti,"DIV",{class:!0});var pA=s(Ut);T(hx.$$.fragment,pA),dDr=i(pA),LEe=n(pA,"P",{});var O9t=s(LEe);cDr=r(O9t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),O9t.forEach(t),fDr=i(pA),of=n(pA,"P",{});var Zee=s(of);mDr=r(Zee,`Note:
Loading a model from its configuration file does `),xEe=n(Zee,"STRONG",{});var V9t=s(xEe);gDr=r(V9t,"not"),V9t.forEach(t),hDr=r(Zee,` load the model weights. It only affects the
model\u2019s configuration. Use `),WK=n(Zee,"A",{href:!0});var X9t=s(WK);pDr=r(X9t,"from_pretrained()"),X9t.forEach(t),uDr=r(Zee," to load the model weights."),Zee.forEach(t),_Dr=i(pA),T(N3.$$.fragment,pA),pA.forEach(t),bDr=i(ti),Qr=n(ti,"DIV",{class:!0});var ai=s(Qr);T(px.$$.fragment,ai),vDr=i(ai),$Ee=n(ai,"P",{});var z9t=s($Ee);FDr=r(z9t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),z9t.forEach(t),TDr=i(ai),Mn=n(ai,"P",{});var uA=s(Mn);MDr=r(uA,"The model class to instantiate is selected based on the "),kEe=n(uA,"CODE",{});var W9t=s(kEe);EDr=r(W9t,"model_type"),W9t.forEach(t),CDr=r(uA,` property of the config object (either
passed as an argument or loaded from `),SEe=n(uA,"CODE",{});var Q9t=s(SEe);wDr=r(Q9t,"pretrained_model_name_or_path"),Q9t.forEach(t),ADr=r(uA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),REe=n(uA,"CODE",{});var H9t=s(REe);yDr=r(H9t,"pretrained_model_name_or_path"),H9t.forEach(t),LDr=r(uA,":"),uA.forEach(t),xDr=i(ai),Ge=n(ai,"UL",{});var To=s(Ge);q3=n(To,"LI",{});var DNe=s(q3);PEe=n(DNe,"STRONG",{});var U9t=s(PEe);$Dr=r(U9t,"albert"),U9t.forEach(t),kDr=r(DNe," \u2014 "),QK=n(DNe,"A",{href:!0});var J9t=s(QK);SDr=r(J9t,"FlaxAlbertForMultipleChoice"),J9t.forEach(t),RDr=r(DNe," (ALBERT model)"),DNe.forEach(t),PDr=i(To),j3=n(To,"LI",{});var GNe=s(j3);BEe=n(GNe,"STRONG",{});var Y9t=s(BEe);BDr=r(Y9t,"bert"),Y9t.forEach(t),IDr=r(GNe," \u2014 "),HK=n(GNe,"A",{href:!0});var K9t=s(HK);NDr=r(K9t,"FlaxBertForMultipleChoice"),K9t.forEach(t),qDr=r(GNe," (BERT model)"),GNe.forEach(t),jDr=i(To),D3=n(To,"LI",{});var ONe=s(D3);IEe=n(ONe,"STRONG",{});var Z9t=s(IEe);DDr=r(Z9t,"big_bird"),Z9t.forEach(t),GDr=r(ONe," \u2014 "),UK=n(ONe,"A",{href:!0});var ext=s(UK);ODr=r(ext,"FlaxBigBirdForMultipleChoice"),ext.forEach(t),VDr=r(ONe," (BigBird model)"),ONe.forEach(t),XDr=i(To),G3=n(To,"LI",{});var VNe=s(G3);NEe=n(VNe,"STRONG",{});var oxt=s(NEe);zDr=r(oxt,"distilbert"),oxt.forEach(t),WDr=r(VNe," \u2014 "),JK=n(VNe,"A",{href:!0});var rxt=s(JK);QDr=r(rxt,"FlaxDistilBertForMultipleChoice"),rxt.forEach(t),HDr=r(VNe," (DistilBERT model)"),VNe.forEach(t),UDr=i(To),O3=n(To,"LI",{});var XNe=s(O3);qEe=n(XNe,"STRONG",{});var txt=s(qEe);JDr=r(txt,"electra"),txt.forEach(t),YDr=r(XNe," \u2014 "),YK=n(XNe,"A",{href:!0});var axt=s(YK);KDr=r(axt,"FlaxElectraForMultipleChoice"),axt.forEach(t),ZDr=r(XNe," (ELECTRA model)"),XNe.forEach(t),eGr=i(To),V3=n(To,"LI",{});var zNe=s(V3);jEe=n(zNe,"STRONG",{});var nxt=s(jEe);oGr=r(nxt,"roberta"),nxt.forEach(t),rGr=r(zNe," \u2014 "),KK=n(zNe,"A",{href:!0});var sxt=s(KK);tGr=r(sxt,"FlaxRobertaForMultipleChoice"),sxt.forEach(t),aGr=r(zNe," (RoBERTa model)"),zNe.forEach(t),nGr=i(To),X3=n(To,"LI",{});var WNe=s(X3);DEe=n(WNe,"STRONG",{});var lxt=s(DEe);sGr=r(lxt,"roformer"),lxt.forEach(t),lGr=r(WNe," \u2014 "),ZK=n(WNe,"A",{href:!0});var ixt=s(ZK);iGr=r(ixt,"FlaxRoFormerForMultipleChoice"),ixt.forEach(t),dGr=r(WNe," (RoFormer model)"),WNe.forEach(t),cGr=i(To),z3=n(To,"LI",{});var QNe=s(z3);GEe=n(QNe,"STRONG",{});var dxt=s(GEe);fGr=r(dxt,"xlm-roberta"),dxt.forEach(t),mGr=r(QNe," \u2014 "),eZ=n(QNe,"A",{href:!0});var cxt=s(eZ);gGr=r(cxt,"FlaxXLMRobertaForMultipleChoice"),cxt.forEach(t),hGr=r(QNe," (XLM-RoBERTa model)"),QNe.forEach(t),To.forEach(t),pGr=i(ai),T(W3.$$.fragment,ai),ai.forEach(t),ti.forEach(t),Uje=i(f),rf=n(f,"H2",{class:!0});var rOe=s(rf);Q3=n(rOe,"A",{id:!0,class:!0,href:!0});var fxt=s(Q3);OEe=n(fxt,"SPAN",{});var mxt=s(OEe);T(ux.$$.fragment,mxt),mxt.forEach(t),fxt.forEach(t),uGr=i(rOe),VEe=n(rOe,"SPAN",{});var gxt=s(VEe);_Gr=r(gxt,"FlaxAutoModelForNextSentencePrediction"),gxt.forEach(t),rOe.forEach(t),Jje=i(f),Fr=n(f,"DIV",{class:!0});var ni=s(Fr);T(_x.$$.fragment,ni),bGr=i(ni),tf=n(ni,"P",{});var eoe=s(tf);vGr=r(eoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),oZ=n(eoe,"A",{href:!0});var hxt=s(oZ);FGr=r(hxt,"from_pretrained()"),hxt.forEach(t),TGr=r(eoe," class method or the "),rZ=n(eoe,"A",{href:!0});var pxt=s(rZ);MGr=r(pxt,"from_config()"),pxt.forEach(t),EGr=r(eoe,` class
method.`),eoe.forEach(t),CGr=i(ni),bx=n(ni,"P",{});var tOe=s(bx);wGr=r(tOe,"This class cannot be instantiated directly using "),XEe=n(tOe,"CODE",{});var uxt=s(XEe);AGr=r(uxt,"__init__()"),uxt.forEach(t),yGr=r(tOe," (throws an error)."),tOe.forEach(t),LGr=i(ni),Jt=n(ni,"DIV",{class:!0});var _A=s(Jt);T(vx.$$.fragment,_A),xGr=i(_A),zEe=n(_A,"P",{});var _xt=s(zEe);$Gr=r(_xt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),_xt.forEach(t),kGr=i(_A),af=n(_A,"P",{});var ooe=s(af);SGr=r(ooe,`Note:
Loading a model from its configuration file does `),WEe=n(ooe,"STRONG",{});var bxt=s(WEe);RGr=r(bxt,"not"),bxt.forEach(t),PGr=r(ooe,` load the model weights. It only affects the
model\u2019s configuration. Use `),tZ=n(ooe,"A",{href:!0});var vxt=s(tZ);BGr=r(vxt,"from_pretrained()"),vxt.forEach(t),IGr=r(ooe," to load the model weights."),ooe.forEach(t),NGr=i(_A),T(H3.$$.fragment,_A),_A.forEach(t),qGr=i(ni),Hr=n(ni,"DIV",{class:!0});var si=s(Hr);T(Fx.$$.fragment,si),jGr=i(si),QEe=n(si,"P",{});var Fxt=s(QEe);DGr=r(Fxt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Fxt.forEach(t),GGr=i(si),En=n(si,"P",{});var bA=s(En);OGr=r(bA,"The model class to instantiate is selected based on the "),HEe=n(bA,"CODE",{});var Txt=s(HEe);VGr=r(Txt,"model_type"),Txt.forEach(t),XGr=r(bA,` property of the config object (either
passed as an argument or loaded from `),UEe=n(bA,"CODE",{});var Mxt=s(UEe);zGr=r(Mxt,"pretrained_model_name_or_path"),Mxt.forEach(t),WGr=r(bA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JEe=n(bA,"CODE",{});var Ext=s(JEe);QGr=r(Ext,"pretrained_model_name_or_path"),Ext.forEach(t),HGr=r(bA,":"),bA.forEach(t),UGr=i(si),YEe=n(si,"UL",{});var Cxt=s(YEe);U3=n(Cxt,"LI",{});var HNe=s(U3);KEe=n(HNe,"STRONG",{});var wxt=s(KEe);JGr=r(wxt,"bert"),wxt.forEach(t),YGr=r(HNe," \u2014 "),aZ=n(HNe,"A",{href:!0});var Axt=s(aZ);KGr=r(Axt,"FlaxBertForNextSentencePrediction"),Axt.forEach(t),ZGr=r(HNe," (BERT model)"),HNe.forEach(t),Cxt.forEach(t),eOr=i(si),T(J3.$$.fragment,si),si.forEach(t),ni.forEach(t),Yje=i(f),nf=n(f,"H2",{class:!0});var aOe=s(nf);Y3=n(aOe,"A",{id:!0,class:!0,href:!0});var yxt=s(Y3);ZEe=n(yxt,"SPAN",{});var Lxt=s(ZEe);T(Tx.$$.fragment,Lxt),Lxt.forEach(t),yxt.forEach(t),oOr=i(aOe),eCe=n(aOe,"SPAN",{});var xxt=s(eCe);rOr=r(xxt,"FlaxAutoModelForImageClassification"),xxt.forEach(t),aOe.forEach(t),Kje=i(f),Tr=n(f,"DIV",{class:!0});var li=s(Tr);T(Mx.$$.fragment,li),tOr=i(li),sf=n(li,"P",{});var roe=s(sf);aOr=r(roe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),nZ=n(roe,"A",{href:!0});var $xt=s(nZ);nOr=r($xt,"from_pretrained()"),$xt.forEach(t),sOr=r(roe," class method or the "),sZ=n(roe,"A",{href:!0});var kxt=s(sZ);lOr=r(kxt,"from_config()"),kxt.forEach(t),iOr=r(roe,` class
method.`),roe.forEach(t),dOr=i(li),Ex=n(li,"P",{});var nOe=s(Ex);cOr=r(nOe,"This class cannot be instantiated directly using "),oCe=n(nOe,"CODE",{});var Sxt=s(oCe);fOr=r(Sxt,"__init__()"),Sxt.forEach(t),mOr=r(nOe," (throws an error)."),nOe.forEach(t),gOr=i(li),Yt=n(li,"DIV",{class:!0});var vA=s(Yt);T(Cx.$$.fragment,vA),hOr=i(vA),rCe=n(vA,"P",{});var Rxt=s(rCe);pOr=r(Rxt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Rxt.forEach(t),uOr=i(vA),lf=n(vA,"P",{});var toe=s(lf);_Or=r(toe,`Note:
Loading a model from its configuration file does `),tCe=n(toe,"STRONG",{});var Pxt=s(tCe);bOr=r(Pxt,"not"),Pxt.forEach(t),vOr=r(toe,` load the model weights. It only affects the
model\u2019s configuration. Use `),lZ=n(toe,"A",{href:!0});var Bxt=s(lZ);FOr=r(Bxt,"from_pretrained()"),Bxt.forEach(t),TOr=r(toe," to load the model weights."),toe.forEach(t),MOr=i(vA),T(K3.$$.fragment,vA),vA.forEach(t),EOr=i(li),Ur=n(li,"DIV",{class:!0});var ii=s(Ur);T(wx.$$.fragment,ii),COr=i(ii),aCe=n(ii,"P",{});var Ixt=s(aCe);wOr=r(Ixt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Ixt.forEach(t),AOr=i(ii),Cn=n(ii,"P",{});var FA=s(Cn);yOr=r(FA,"The model class to instantiate is selected based on the "),nCe=n(FA,"CODE",{});var Nxt=s(nCe);LOr=r(Nxt,"model_type"),Nxt.forEach(t),xOr=r(FA,` property of the config object (either
passed as an argument or loaded from `),sCe=n(FA,"CODE",{});var qxt=s(sCe);$Or=r(qxt,"pretrained_model_name_or_path"),qxt.forEach(t),kOr=r(FA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lCe=n(FA,"CODE",{});var jxt=s(lCe);SOr=r(jxt,"pretrained_model_name_or_path"),jxt.forEach(t),ROr=r(FA,":"),FA.forEach(t),POr=i(ii),Ax=n(ii,"UL",{});var sOe=s(Ax);Z3=n(sOe,"LI",{});var UNe=s(Z3);iCe=n(UNe,"STRONG",{});var Dxt=s(iCe);BOr=r(Dxt,"beit"),Dxt.forEach(t),IOr=r(UNe," \u2014 "),iZ=n(UNe,"A",{href:!0});var Gxt=s(iZ);NOr=r(Gxt,"FlaxBeitForImageClassification"),Gxt.forEach(t),qOr=r(UNe," (BEiT model)"),UNe.forEach(t),jOr=i(sOe),ew=n(sOe,"LI",{});var JNe=s(ew);dCe=n(JNe,"STRONG",{});var Oxt=s(dCe);DOr=r(Oxt,"vit"),Oxt.forEach(t),GOr=r(JNe," \u2014 "),dZ=n(JNe,"A",{href:!0});var Vxt=s(dZ);OOr=r(Vxt,"FlaxViTForImageClassification"),Vxt.forEach(t),VOr=r(JNe," (ViT model)"),JNe.forEach(t),sOe.forEach(t),XOr=i(ii),T(ow.$$.fragment,ii),ii.forEach(t),li.forEach(t),Zje=i(f),df=n(f,"H2",{class:!0});var lOe=s(df);rw=n(lOe,"A",{id:!0,class:!0,href:!0});var Xxt=s(rw);cCe=n(Xxt,"SPAN",{});var zxt=s(cCe);T(yx.$$.fragment,zxt),zxt.forEach(t),Xxt.forEach(t),zOr=i(lOe),fCe=n(lOe,"SPAN",{});var Wxt=s(fCe);WOr=r(Wxt,"FlaxAutoModelForVision2Seq"),Wxt.forEach(t),lOe.forEach(t),eDe=i(f),Mr=n(f,"DIV",{class:!0});var di=s(Mr);T(Lx.$$.fragment,di),QOr=i(di),cf=n(di,"P",{});var aoe=s(cf);HOr=r(aoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),cZ=n(aoe,"A",{href:!0});var Qxt=s(cZ);UOr=r(Qxt,"from_pretrained()"),Qxt.forEach(t),JOr=r(aoe," class method or the "),fZ=n(aoe,"A",{href:!0});var Hxt=s(fZ);YOr=r(Hxt,"from_config()"),Hxt.forEach(t),KOr=r(aoe,` class
method.`),aoe.forEach(t),ZOr=i(di),xx=n(di,"P",{});var iOe=s(xx);eVr=r(iOe,"This class cannot be instantiated directly using "),mCe=n(iOe,"CODE",{});var Uxt=s(mCe);oVr=r(Uxt,"__init__()"),Uxt.forEach(t),rVr=r(iOe," (throws an error)."),iOe.forEach(t),tVr=i(di),Kt=n(di,"DIV",{class:!0});var TA=s(Kt);T($x.$$.fragment,TA),aVr=i(TA),gCe=n(TA,"P",{});var Jxt=s(gCe);nVr=r(Jxt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Jxt.forEach(t),sVr=i(TA),ff=n(TA,"P",{});var noe=s(ff);lVr=r(noe,`Note:
Loading a model from its configuration file does `),hCe=n(noe,"STRONG",{});var Yxt=s(hCe);iVr=r(Yxt,"not"),Yxt.forEach(t),dVr=r(noe,` load the model weights. It only affects the
model\u2019s configuration. Use `),mZ=n(noe,"A",{href:!0});var Kxt=s(mZ);cVr=r(Kxt,"from_pretrained()"),Kxt.forEach(t),fVr=r(noe," to load the model weights."),noe.forEach(t),mVr=i(TA),T(tw.$$.fragment,TA),TA.forEach(t),gVr=i(di),Jr=n(di,"DIV",{class:!0});var ci=s(Jr);T(kx.$$.fragment,ci),hVr=i(ci),pCe=n(ci,"P",{});var Zxt=s(pCe);pVr=r(Zxt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Zxt.forEach(t),uVr=i(ci),wn=n(ci,"P",{});var MA=s(wn);_Vr=r(MA,"The model class to instantiate is selected based on the "),uCe=n(MA,"CODE",{});var e$t=s(uCe);bVr=r(e$t,"model_type"),e$t.forEach(t),vVr=r(MA,` property of the config object (either
passed as an argument or loaded from `),_Ce=n(MA,"CODE",{});var o$t=s(_Ce);FVr=r(o$t,"pretrained_model_name_or_path"),o$t.forEach(t),TVr=r(MA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bCe=n(MA,"CODE",{});var r$t=s(bCe);MVr=r(r$t,"pretrained_model_name_or_path"),r$t.forEach(t),EVr=r(MA,":"),MA.forEach(t),CVr=i(ci),vCe=n(ci,"UL",{});var t$t=s(vCe);aw=n(t$t,"LI",{});var YNe=s(aw);FCe=n(YNe,"STRONG",{});var a$t=s(FCe);wVr=r(a$t,"vision-encoder-decoder"),a$t.forEach(t),AVr=r(YNe," \u2014 "),gZ=n(YNe,"A",{href:!0});var n$t=s(gZ);yVr=r(n$t,"FlaxVisionEncoderDecoderModel"),n$t.forEach(t),LVr=r(YNe," (Vision Encoder decoder model)"),YNe.forEach(t),t$t.forEach(t),xVr=i(ci),T(nw.$$.fragment,ci),ci.forEach(t),di.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(dSt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(yn,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.AutoConfig"),c(xn,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.AutoModel"),c($n,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.AutoTokenizer"),c(_i,"href","/docs/transformers/pr_17407/en/model_doc/bert#transformers.BertModel"),c(vf,"id","extending-the-auto-classes"),c(vf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vf,"href","#extending-the-auto-classes"),c(bi,"class","relative group"),c(Tf,"id","transformers.AutoConfig"),c(Tf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tf,"href","#transformers.AutoConfig"),c(vi,"class","relative group"),c(Y$,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(K$,"href","/docs/transformers/pr_17407/en/model_doc/albert#transformers.AlbertConfig"),c(Z$,"href","/docs/transformers/pr_17407/en/model_doc/bart#transformers.BartConfig"),c(ek,"href","/docs/transformers/pr_17407/en/model_doc/beit#transformers.BeitConfig"),c(ok,"href","/docs/transformers/pr_17407/en/model_doc/bert#transformers.BertConfig"),c(rk,"href","/docs/transformers/pr_17407/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(tk,"href","/docs/transformers/pr_17407/en/model_doc/big_bird#transformers.BigBirdConfig"),c(ak,"href","/docs/transformers/pr_17407/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(nk,"href","/docs/transformers/pr_17407/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(sk,"href","/docs/transformers/pr_17407/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(lk,"href","/docs/transformers/pr_17407/en/model_doc/camembert#transformers.CamembertConfig"),c(ik,"href","/docs/transformers/pr_17407/en/model_doc/canine#transformers.CanineConfig"),c(dk,"href","/docs/transformers/pr_17407/en/model_doc/clip#transformers.CLIPConfig"),c(ck,"href","/docs/transformers/pr_17407/en/model_doc/convbert#transformers.ConvBertConfig"),c(fk,"href","/docs/transformers/pr_17407/en/model_doc/convnext#transformers.ConvNextConfig"),c(mk,"href","/docs/transformers/pr_17407/en/model_doc/ctrl#transformers.CTRLConfig"),c(gk,"href","/docs/transformers/pr_17407/en/model_doc/cvt#transformers.CvtConfig"),c(hk,"href","/docs/transformers/pr_17407/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(pk,"href","/docs/transformers/pr_17407/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(uk,"href","/docs/transformers/pr_17407/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(_k,"href","/docs/transformers/pr_17407/en/model_doc/deberta#transformers.DebertaConfig"),c(bk,"href","/docs/transformers/pr_17407/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(vk,"href","/docs/transformers/pr_17407/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(Fk,"href","/docs/transformers/pr_17407/en/model_doc/deit#transformers.DeiTConfig"),c(Tk,"href","/docs/transformers/pr_17407/en/model_doc/detr#transformers.DetrConfig"),c(Mk,"href","/docs/transformers/pr_17407/en/model_doc/distilbert#transformers.DistilBertConfig"),c(Ek,"href","/docs/transformers/pr_17407/en/model_doc/dpr#transformers.DPRConfig"),c(Ck,"href","/docs/transformers/pr_17407/en/model_doc/dpt#transformers.DPTConfig"),c(wk,"href","/docs/transformers/pr_17407/en/model_doc/electra#transformers.ElectraConfig"),c(Ak,"href","/docs/transformers/pr_17407/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(yk,"href","/docs/transformers/pr_17407/en/model_doc/flaubert#transformers.FlaubertConfig"),c(Lk,"href","/docs/transformers/pr_17407/en/model_doc/flava#transformers.FlavaConfig"),c(xk,"href","/docs/transformers/pr_17407/en/model_doc/fnet#transformers.FNetConfig"),c($k,"href","/docs/transformers/pr_17407/en/model_doc/fsmt#transformers.FSMTConfig"),c(kk,"href","/docs/transformers/pr_17407/en/model_doc/funnel#transformers.FunnelConfig"),c(Sk,"href","/docs/transformers/pr_17407/en/model_doc/glpn#transformers.GLPNConfig"),c(Rk,"href","/docs/transformers/pr_17407/en/model_doc/gpt2#transformers.GPT2Config"),c(Pk,"href","/docs/transformers/pr_17407/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(Bk,"href","/docs/transformers/pr_17407/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(Ik,"href","/docs/transformers/pr_17407/en/model_doc/gptj#transformers.GPTJConfig"),c(Nk,"href","/docs/transformers/pr_17407/en/model_doc/hubert#transformers.HubertConfig"),c(qk,"href","/docs/transformers/pr_17407/en/model_doc/ibert#transformers.IBertConfig"),c(jk,"href","/docs/transformers/pr_17407/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(Dk,"href","/docs/transformers/pr_17407/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(Gk,"href","/docs/transformers/pr_17407/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(Ok,"href","/docs/transformers/pr_17407/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(Vk,"href","/docs/transformers/pr_17407/en/model_doc/led#transformers.LEDConfig"),c(Xk,"href","/docs/transformers/pr_17407/en/model_doc/longformer#transformers.LongformerConfig"),c(zk,"href","/docs/transformers/pr_17407/en/model_doc/luke#transformers.LukeConfig"),c(Wk,"href","/docs/transformers/pr_17407/en/model_doc/lxmert#transformers.LxmertConfig"),c(Qk,"href","/docs/transformers/pr_17407/en/model_doc/m2m_100#transformers.M2M100Config"),c(Hk,"href","/docs/transformers/pr_17407/en/model_doc/marian#transformers.MarianConfig"),c(Uk,"href","/docs/transformers/pr_17407/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(Jk,"href","/docs/transformers/pr_17407/en/model_doc/mbart#transformers.MBartConfig"),c(Yk,"href","/docs/transformers/pr_17407/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(Kk,"href","/docs/transformers/pr_17407/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(Zk,"href","/docs/transformers/pr_17407/en/model_doc/mpnet#transformers.MPNetConfig"),c(eS,"href","/docs/transformers/pr_17407/en/model_doc/mt5#transformers.MT5Config"),c(oS,"href","/docs/transformers/pr_17407/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(rS,"href","/docs/transformers/pr_17407/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(tS,"href","/docs/transformers/pr_17407/en/model_doc/opt#transformers.OPTConfig"),c(aS,"href","/docs/transformers/pr_17407/en/model_doc/pegasus#transformers.PegasusConfig"),c(nS,"href","/docs/transformers/pr_17407/en/model_doc/perceiver#transformers.PerceiverConfig"),c(sS,"href","/docs/transformers/pr_17407/en/model_doc/plbart#transformers.PLBartConfig"),c(lS,"href","/docs/transformers/pr_17407/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(iS,"href","/docs/transformers/pr_17407/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(dS,"href","/docs/transformers/pr_17407/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(cS,"href","/docs/transformers/pr_17407/en/model_doc/rag#transformers.RagConfig"),c(fS,"href","/docs/transformers/pr_17407/en/model_doc/realm#transformers.RealmConfig"),c(mS,"href","/docs/transformers/pr_17407/en/model_doc/reformer#transformers.ReformerConfig"),c(gS,"href","/docs/transformers/pr_17407/en/model_doc/regnet#transformers.RegNetConfig"),c(hS,"href","/docs/transformers/pr_17407/en/model_doc/rembert#transformers.RemBertConfig"),c(pS,"href","/docs/transformers/pr_17407/en/model_doc/resnet#transformers.ResNetConfig"),c(uS,"href","/docs/transformers/pr_17407/en/model_doc/retribert#transformers.RetriBertConfig"),c(_S,"href","/docs/transformers/pr_17407/en/model_doc/roberta#transformers.RobertaConfig"),c(bS,"href","/docs/transformers/pr_17407/en/model_doc/roformer#transformers.RoFormerConfig"),c(vS,"href","/docs/transformers/pr_17407/en/model_doc/segformer#transformers.SegformerConfig"),c(FS,"href","/docs/transformers/pr_17407/en/model_doc/sew#transformers.SEWConfig"),c(TS,"href","/docs/transformers/pr_17407/en/model_doc/sew-d#transformers.SEWDConfig"),c(MS,"href","/docs/transformers/pr_17407/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(ES,"href","/docs/transformers/pr_17407/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(CS,"href","/docs/transformers/pr_17407/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(wS,"href","/docs/transformers/pr_17407/en/model_doc/splinter#transformers.SplinterConfig"),c(AS,"href","/docs/transformers/pr_17407/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(yS,"href","/docs/transformers/pr_17407/en/model_doc/swin#transformers.SwinConfig"),c(LS,"href","/docs/transformers/pr_17407/en/model_doc/t5#transformers.T5Config"),c(xS,"href","/docs/transformers/pr_17407/en/model_doc/tapas#transformers.TapasConfig"),c($S,"href","/docs/transformers/pr_17407/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(kS,"href","/docs/transformers/pr_17407/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(SS,"href","/docs/transformers/pr_17407/en/model_doc/trocr#transformers.TrOCRConfig"),c(RS,"href","/docs/transformers/pr_17407/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(PS,"href","/docs/transformers/pr_17407/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(BS,"href","/docs/transformers/pr_17407/en/model_doc/van#transformers.VanConfig"),c(IS,"href","/docs/transformers/pr_17407/en/model_doc/vilt#transformers.ViltConfig"),c(NS,"href","/docs/transformers/pr_17407/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(qS,"href","/docs/transformers/pr_17407/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(jS,"href","/docs/transformers/pr_17407/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(DS,"href","/docs/transformers/pr_17407/en/model_doc/vit#transformers.ViTConfig"),c(GS,"href","/docs/transformers/pr_17407/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(OS,"href","/docs/transformers/pr_17407/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(VS,"href","/docs/transformers/pr_17407/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(XS,"href","/docs/transformers/pr_17407/en/model_doc/wavlm#transformers.WavLMConfig"),c(zS,"href","/docs/transformers/pr_17407/en/model_doc/xglm#transformers.XGLMConfig"),c(WS,"href","/docs/transformers/pr_17407/en/model_doc/xlm#transformers.XLMConfig"),c(QS,"href","/docs/transformers/pr_17407/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(HS,"href","/docs/transformers/pr_17407/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(US,"href","/docs/transformers/pr_17407/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(JS,"href","/docs/transformers/pr_17407/en/model_doc/xlnet#transformers.XLNetConfig"),c(YS,"href","/docs/transformers/pr_17407/en/model_doc/yolos#transformers.YolosConfig"),c(KS,"href","/docs/transformers/pr_17407/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wg,"id","transformers.AutoTokenizer"),c(wg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wg,"href","#transformers.AutoTokenizer"),c(Ti,"class","relative group"),c(ZS,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(eR,"href","/docs/transformers/pr_17407/en/model_doc/albert#transformers.AlbertTokenizer"),c(oR,"href","/docs/transformers/pr_17407/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(rR,"href","/docs/transformers/pr_17407/en/model_doc/bart#transformers.BartTokenizer"),c(tR,"href","/docs/transformers/pr_17407/en/model_doc/bart#transformers.BartTokenizerFast"),c(aR,"href","/docs/transformers/pr_17407/en/model_doc/barthez#transformers.BarthezTokenizer"),c(nR,"href","/docs/transformers/pr_17407/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(sR,"href","/docs/transformers/pr_17407/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(lR,"href","/docs/transformers/pr_17407/en/model_doc/bert#transformers.BertTokenizer"),c(iR,"href","/docs/transformers/pr_17407/en/model_doc/bert#transformers.BertTokenizerFast"),c(dR,"href","/docs/transformers/pr_17407/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(cR,"href","/docs/transformers/pr_17407/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(fR,"href","/docs/transformers/pr_17407/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(mR,"href","/docs/transformers/pr_17407/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(gR,"href","/docs/transformers/pr_17407/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(hR,"href","/docs/transformers/pr_17407/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(pR,"href","/docs/transformers/pr_17407/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(uR,"href","/docs/transformers/pr_17407/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(_R,"href","/docs/transformers/pr_17407/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(bR,"href","/docs/transformers/pr_17407/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(vR,"href","/docs/transformers/pr_17407/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(FR,"href","/docs/transformers/pr_17407/en/model_doc/camembert#transformers.CamembertTokenizer"),c(TR,"href","/docs/transformers/pr_17407/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(MR,"href","/docs/transformers/pr_17407/en/model_doc/canine#transformers.CanineTokenizer"),c(ER,"href","/docs/transformers/pr_17407/en/model_doc/clip#transformers.CLIPTokenizer"),c(CR,"href","/docs/transformers/pr_17407/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(wR,"href","/docs/transformers/pr_17407/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(AR,"href","/docs/transformers/pr_17407/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(yR,"href","/docs/transformers/pr_17407/en/model_doc/cpm#transformers.CpmTokenizer"),c(LR,"href","/docs/transformers/pr_17407/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(xR,"href","/docs/transformers/pr_17407/en/model_doc/ctrl#transformers.CTRLTokenizer"),c($R,"href","/docs/transformers/pr_17407/en/model_doc/roberta#transformers.RobertaTokenizer"),c(kR,"href","/docs/transformers/pr_17407/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(SR,"href","/docs/transformers/pr_17407/en/model_doc/deberta#transformers.DebertaTokenizer"),c(RR,"href","/docs/transformers/pr_17407/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(PR,"href","/docs/transformers/pr_17407/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(BR,"href","/docs/transformers/pr_17407/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(IR,"href","/docs/transformers/pr_17407/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(NR,"href","/docs/transformers/pr_17407/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(qR,"href","/docs/transformers/pr_17407/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(jR,"href","/docs/transformers/pr_17407/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(DR,"href","/docs/transformers/pr_17407/en/model_doc/electra#transformers.ElectraTokenizer"),c(GR,"href","/docs/transformers/pr_17407/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(OR,"href","/docs/transformers/pr_17407/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(VR,"href","/docs/transformers/pr_17407/en/model_doc/fnet#transformers.FNetTokenizer"),c(XR,"href","/docs/transformers/pr_17407/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(zR,"href","/docs/transformers/pr_17407/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(WR,"href","/docs/transformers/pr_17407/en/model_doc/funnel#transformers.FunnelTokenizer"),c(QR,"href","/docs/transformers/pr_17407/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(HR,"href","/docs/transformers/pr_17407/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(UR,"href","/docs/transformers/pr_17407/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(JR,"href","/docs/transformers/pr_17407/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(YR,"href","/docs/transformers/pr_17407/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(KR,"href","/docs/transformers/pr_17407/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(ZR,"href","/docs/transformers/pr_17407/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(eP,"href","/docs/transformers/pr_17407/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(oP,"href","/docs/transformers/pr_17407/en/model_doc/herbert#transformers.HerbertTokenizer"),c(rP,"href","/docs/transformers/pr_17407/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(tP,"href","/docs/transformers/pr_17407/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(aP,"href","/docs/transformers/pr_17407/en/model_doc/roberta#transformers.RobertaTokenizer"),c(nP,"href","/docs/transformers/pr_17407/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(sP,"href","/docs/transformers/pr_17407/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(lP,"href","/docs/transformers/pr_17407/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(iP,"href","/docs/transformers/pr_17407/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(dP,"href","/docs/transformers/pr_17407/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(cP,"href","/docs/transformers/pr_17407/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(fP,"href","/docs/transformers/pr_17407/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(mP,"href","/docs/transformers/pr_17407/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(gP,"href","/docs/transformers/pr_17407/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(hP,"href","/docs/transformers/pr_17407/en/model_doc/led#transformers.LEDTokenizer"),c(pP,"href","/docs/transformers/pr_17407/en/model_doc/led#transformers.LEDTokenizerFast"),c(uP,"href","/docs/transformers/pr_17407/en/model_doc/longformer#transformers.LongformerTokenizer"),c(_P,"href","/docs/transformers/pr_17407/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(bP,"href","/docs/transformers/pr_17407/en/model_doc/luke#transformers.LukeTokenizer"),c(vP,"href","/docs/transformers/pr_17407/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(FP,"href","/docs/transformers/pr_17407/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(TP,"href","/docs/transformers/pr_17407/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(MP,"href","/docs/transformers/pr_17407/en/model_doc/marian#transformers.MarianTokenizer"),c(EP,"href","/docs/transformers/pr_17407/en/model_doc/mbart#transformers.MBartTokenizer"),c(CP,"href","/docs/transformers/pr_17407/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(wP,"href","/docs/transformers/pr_17407/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(AP,"href","/docs/transformers/pr_17407/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(yP,"href","/docs/transformers/pr_17407/en/model_doc/bert#transformers.BertTokenizer"),c(LP,"href","/docs/transformers/pr_17407/en/model_doc/bert#transformers.BertTokenizerFast"),c(xP,"href","/docs/transformers/pr_17407/en/model_doc/mluke#transformers.MLukeTokenizer"),c($P,"href","/docs/transformers/pr_17407/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(kP,"href","/docs/transformers/pr_17407/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(SP,"href","/docs/transformers/pr_17407/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(RP,"href","/docs/transformers/pr_17407/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(PP,"href","/docs/transformers/pr_17407/en/model_doc/t5#transformers.T5Tokenizer"),c(BP,"href","/docs/transformers/pr_17407/en/model_doc/t5#transformers.T5TokenizerFast"),c(IP,"href","/docs/transformers/pr_17407/en/model_doc/albert#transformers.AlbertTokenizer"),c(NP,"href","/docs/transformers/pr_17407/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(qP,"href","/docs/transformers/pr_17407/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(jP,"href","/docs/transformers/pr_17407/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(DP,"href","/docs/transformers/pr_17407/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(GP,"href","/docs/transformers/pr_17407/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(OP,"href","/docs/transformers/pr_17407/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(VP,"href","/docs/transformers/pr_17407/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(XP,"href","/docs/transformers/pr_17407/en/model_doc/phobert#transformers.PhobertTokenizer"),c(zP,"href","/docs/transformers/pr_17407/en/model_doc/plbart#transformers.PLBartTokenizer"),c(WP,"href","/docs/transformers/pr_17407/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(QP,"href","/docs/transformers/pr_17407/en/model_doc/bert#transformers.BertTokenizer"),c(HP,"href","/docs/transformers/pr_17407/en/model_doc/bert#transformers.BertTokenizerFast"),c(UP,"href","/docs/transformers/pr_17407/en/model_doc/rag#transformers.RagTokenizer"),c(JP,"href","/docs/transformers/pr_17407/en/model_doc/realm#transformers.RealmTokenizer"),c(YP,"href","/docs/transformers/pr_17407/en/model_doc/realm#transformers.RealmTokenizerFast"),c(KP,"href","/docs/transformers/pr_17407/en/model_doc/reformer#transformers.ReformerTokenizer"),c(ZP,"href","/docs/transformers/pr_17407/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(eB,"href","/docs/transformers/pr_17407/en/model_doc/rembert#transformers.RemBertTokenizer"),c(oB,"href","/docs/transformers/pr_17407/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(rB,"href","/docs/transformers/pr_17407/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(tB,"href","/docs/transformers/pr_17407/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(aB,"href","/docs/transformers/pr_17407/en/model_doc/roberta#transformers.RobertaTokenizer"),c(nB,"href","/docs/transformers/pr_17407/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(sB,"href","/docs/transformers/pr_17407/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(lB,"href","/docs/transformers/pr_17407/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(iB,"href","/docs/transformers/pr_17407/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(dB,"href","/docs/transformers/pr_17407/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(cB,"href","/docs/transformers/pr_17407/en/model_doc/splinter#transformers.SplinterTokenizer"),c(fB,"href","/docs/transformers/pr_17407/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(mB,"href","/docs/transformers/pr_17407/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(gB,"href","/docs/transformers/pr_17407/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(hB,"href","/docs/transformers/pr_17407/en/model_doc/t5#transformers.T5Tokenizer"),c(pB,"href","/docs/transformers/pr_17407/en/model_doc/t5#transformers.T5TokenizerFast"),c(uB,"href","/docs/transformers/pr_17407/en/model_doc/tapas#transformers.TapasTokenizer"),c(_B,"href","/docs/transformers/pr_17407/en/model_doc/tapex#transformers.TapexTokenizer"),c(bB,"href","/docs/transformers/pr_17407/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(vB,"href","/docs/transformers/pr_17407/en/model_doc/bert#transformers.BertTokenizer"),c(FB,"href","/docs/transformers/pr_17407/en/model_doc/bert#transformers.BertTokenizerFast"),c(TB,"href","/docs/transformers/pr_17407/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(MB,"href","/docs/transformers/pr_17407/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(EB,"href","/docs/transformers/pr_17407/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(CB,"href","/docs/transformers/pr_17407/en/model_doc/xglm#transformers.XGLMTokenizer"),c(wB,"href","/docs/transformers/pr_17407/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(AB,"href","/docs/transformers/pr_17407/en/model_doc/xlm#transformers.XLMTokenizer"),c(yB,"href","/docs/transformers/pr_17407/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(LB,"href","/docs/transformers/pr_17407/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(xB,"href","/docs/transformers/pr_17407/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c($B,"href","/docs/transformers/pr_17407/en/model_doc/roberta#transformers.RobertaTokenizer"),c(kB,"href","/docs/transformers/pr_17407/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(SB,"href","/docs/transformers/pr_17407/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(RB,"href","/docs/transformers/pr_17407/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(PB,"href","/docs/transformers/pr_17407/en/model_doc/albert#transformers.AlbertTokenizer"),c(BB,"href","/docs/transformers/pr_17407/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sh,"id","transformers.AutoFeatureExtractor"),c(sh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sh,"href","#transformers.AutoFeatureExtractor"),c(Mi,"class","relative group"),c(IB,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(NB,"href","/docs/transformers/pr_17407/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(qB,"href","/docs/transformers/pr_17407/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(jB,"href","/docs/transformers/pr_17407/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(DB,"href","/docs/transformers/pr_17407/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(GB,"href","/docs/transformers/pr_17407/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(OB,"href","/docs/transformers/pr_17407/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(VB,"href","/docs/transformers/pr_17407/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(XB,"href","/docs/transformers/pr_17407/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(zB,"href","/docs/transformers/pr_17407/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(WB,"href","/docs/transformers/pr_17407/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(QB,"href","/docs/transformers/pr_17407/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(HB,"href","/docs/transformers/pr_17407/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(UB,"href","/docs/transformers/pr_17407/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(JB,"href","/docs/transformers/pr_17407/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(YB,"href","/docs/transformers/pr_17407/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(KB,"href","/docs/transformers/pr_17407/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(ZB,"href","/docs/transformers/pr_17407/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(eI,"href","/docs/transformers/pr_17407/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(oI,"href","/docs/transformers/pr_17407/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(rI,"href","/docs/transformers/pr_17407/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(tI,"href","/docs/transformers/pr_17407/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(aI,"href","/docs/transformers/pr_17407/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(nI,"href","/docs/transformers/pr_17407/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(sI,"href","/docs/transformers/pr_17407/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(lI,"href","/docs/transformers/pr_17407/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(iI,"href","/docs/transformers/pr_17407/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(dI,"href","/docs/transformers/pr_17407/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(cI,"href","/docs/transformers/pr_17407/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(fI,"href","/docs/transformers/pr_17407/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jh,"id","transformers.AutoProcessor"),c(jh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jh,"href","#transformers.AutoProcessor"),c(Ei,"class","relative group"),c(mI,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(gI,"href","/docs/transformers/pr_17407/en/model_doc/clip#transformers.CLIPProcessor"),c(hI,"href","/docs/transformers/pr_17407/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(pI,"href","/docs/transformers/pr_17407/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(uI,"href","/docs/transformers/pr_17407/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(_I,"href","/docs/transformers/pr_17407/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(bI,"href","/docs/transformers/pr_17407/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(vI,"href","/docs/transformers/pr_17407/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(FI,"href","/docs/transformers/pr_17407/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(TI,"href","/docs/transformers/pr_17407/en/model_doc/trocr#transformers.TrOCRProcessor"),c(MI,"href","/docs/transformers/pr_17407/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(EI,"href","/docs/transformers/pr_17407/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(CI,"href","/docs/transformers/pr_17407/en/model_doc/vilt#transformers.ViltProcessor"),c(wI,"href","/docs/transformers/pr_17407/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(AI,"href","/docs/transformers/pr_17407/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(yI,"href","/docs/transformers/pr_17407/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(LI,"href","/docs/transformers/pr_17407/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(np,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sp,"id","transformers.AutoModel"),c(sp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sp,"href","#transformers.AutoModel"),c(wi,"class","relative group"),c(xI,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($I,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kI,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SI,"href","/docs/transformers/pr_17407/en/model_doc/albert#transformers.AlbertModel"),c(RI,"href","/docs/transformers/pr_17407/en/model_doc/bart#transformers.BartModel"),c(PI,"href","/docs/transformers/pr_17407/en/model_doc/beit#transformers.BeitModel"),c(BI,"href","/docs/transformers/pr_17407/en/model_doc/bert#transformers.BertModel"),c(II,"href","/docs/transformers/pr_17407/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(NI,"href","/docs/transformers/pr_17407/en/model_doc/big_bird#transformers.BigBirdModel"),c(qI,"href","/docs/transformers/pr_17407/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(jI,"href","/docs/transformers/pr_17407/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(DI,"href","/docs/transformers/pr_17407/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(GI,"href","/docs/transformers/pr_17407/en/model_doc/camembert#transformers.CamembertModel"),c(OI,"href","/docs/transformers/pr_17407/en/model_doc/canine#transformers.CanineModel"),c(VI,"href","/docs/transformers/pr_17407/en/model_doc/clip#transformers.CLIPModel"),c(XI,"href","/docs/transformers/pr_17407/en/model_doc/convbert#transformers.ConvBertModel"),c(zI,"href","/docs/transformers/pr_17407/en/model_doc/convnext#transformers.ConvNextModel"),c(WI,"href","/docs/transformers/pr_17407/en/model_doc/ctrl#transformers.CTRLModel"),c(QI,"href","/docs/transformers/pr_17407/en/model_doc/cvt#transformers.CvtModel"),c(HI,"href","/docs/transformers/pr_17407/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(UI,"href","/docs/transformers/pr_17407/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(JI,"href","/docs/transformers/pr_17407/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(YI,"href","/docs/transformers/pr_17407/en/model_doc/deberta#transformers.DebertaModel"),c(KI,"href","/docs/transformers/pr_17407/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(ZI,"href","/docs/transformers/pr_17407/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(eN,"href","/docs/transformers/pr_17407/en/model_doc/deit#transformers.DeiTModel"),c(oN,"href","/docs/transformers/pr_17407/en/model_doc/detr#transformers.DetrModel"),c(rN,"href","/docs/transformers/pr_17407/en/model_doc/distilbert#transformers.DistilBertModel"),c(tN,"href","/docs/transformers/pr_17407/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(aN,"href","/docs/transformers/pr_17407/en/model_doc/dpt#transformers.DPTModel"),c(nN,"href","/docs/transformers/pr_17407/en/model_doc/electra#transformers.ElectraModel"),c(sN,"href","/docs/transformers/pr_17407/en/model_doc/flaubert#transformers.FlaubertModel"),c(lN,"href","/docs/transformers/pr_17407/en/model_doc/flava#transformers.FlavaModel"),c(iN,"href","/docs/transformers/pr_17407/en/model_doc/fnet#transformers.FNetModel"),c(dN,"href","/docs/transformers/pr_17407/en/model_doc/fsmt#transformers.FSMTModel"),c(cN,"href","/docs/transformers/pr_17407/en/model_doc/funnel#transformers.FunnelModel"),c(fN,"href","/docs/transformers/pr_17407/en/model_doc/funnel#transformers.FunnelBaseModel"),c(mN,"href","/docs/transformers/pr_17407/en/model_doc/glpn#transformers.GLPNModel"),c(gN,"href","/docs/transformers/pr_17407/en/model_doc/gpt2#transformers.GPT2Model"),c(hN,"href","/docs/transformers/pr_17407/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(pN,"href","/docs/transformers/pr_17407/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(uN,"href","/docs/transformers/pr_17407/en/model_doc/gptj#transformers.GPTJModel"),c(_N,"href","/docs/transformers/pr_17407/en/model_doc/hubert#transformers.HubertModel"),c(bN,"href","/docs/transformers/pr_17407/en/model_doc/ibert#transformers.IBertModel"),c(vN,"href","/docs/transformers/pr_17407/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(FN,"href","/docs/transformers/pr_17407/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(TN,"href","/docs/transformers/pr_17407/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(MN,"href","/docs/transformers/pr_17407/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(EN,"href","/docs/transformers/pr_17407/en/model_doc/led#transformers.LEDModel"),c(CN,"href","/docs/transformers/pr_17407/en/model_doc/longformer#transformers.LongformerModel"),c(wN,"href","/docs/transformers/pr_17407/en/model_doc/luke#transformers.LukeModel"),c(AN,"href","/docs/transformers/pr_17407/en/model_doc/lxmert#transformers.LxmertModel"),c(yN,"href","/docs/transformers/pr_17407/en/model_doc/m2m_100#transformers.M2M100Model"),c(LN,"href","/docs/transformers/pr_17407/en/model_doc/marian#transformers.MarianModel"),c(xN,"href","/docs/transformers/pr_17407/en/model_doc/maskformer#transformers.MaskFormerModel"),c($N,"href","/docs/transformers/pr_17407/en/model_doc/mbart#transformers.MBartModel"),c(kN,"href","/docs/transformers/pr_17407/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(SN,"href","/docs/transformers/pr_17407/en/model_doc/mobilebert#transformers.MobileBertModel"),c(RN,"href","/docs/transformers/pr_17407/en/model_doc/mpnet#transformers.MPNetModel"),c(PN,"href","/docs/transformers/pr_17407/en/model_doc/mt5#transformers.MT5Model"),c(BN,"href","/docs/transformers/pr_17407/en/model_doc/nystromformer#transformers.NystromformerModel"),c(IN,"href","/docs/transformers/pr_17407/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(NN,"href","/docs/transformers/pr_17407/en/model_doc/opt#transformers.OPTModel"),c(qN,"href","/docs/transformers/pr_17407/en/model_doc/pegasus#transformers.PegasusModel"),c(jN,"href","/docs/transformers/pr_17407/en/model_doc/perceiver#transformers.PerceiverModel"),c(DN,"href","/docs/transformers/pr_17407/en/model_doc/plbart#transformers.PLBartModel"),c(GN,"href","/docs/transformers/pr_17407/en/model_doc/poolformer#transformers.PoolFormerModel"),c(ON,"href","/docs/transformers/pr_17407/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(VN,"href","/docs/transformers/pr_17407/en/model_doc/qdqbert#transformers.QDQBertModel"),c(XN,"href","/docs/transformers/pr_17407/en/model_doc/reformer#transformers.ReformerModel"),c(zN,"href","/docs/transformers/pr_17407/en/model_doc/regnet#transformers.RegNetModel"),c(WN,"href","/docs/transformers/pr_17407/en/model_doc/rembert#transformers.RemBertModel"),c(QN,"href","/docs/transformers/pr_17407/en/model_doc/resnet#transformers.ResNetModel"),c(HN,"href","/docs/transformers/pr_17407/en/model_doc/retribert#transformers.RetriBertModel"),c(UN,"href","/docs/transformers/pr_17407/en/model_doc/roberta#transformers.RobertaModel"),c(JN,"href","/docs/transformers/pr_17407/en/model_doc/roformer#transformers.RoFormerModel"),c(YN,"href","/docs/transformers/pr_17407/en/model_doc/segformer#transformers.SegformerModel"),c(KN,"href","/docs/transformers/pr_17407/en/model_doc/sew#transformers.SEWModel"),c(ZN,"href","/docs/transformers/pr_17407/en/model_doc/sew-d#transformers.SEWDModel"),c(eq,"href","/docs/transformers/pr_17407/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(oq,"href","/docs/transformers/pr_17407/en/model_doc/splinter#transformers.SplinterModel"),c(rq,"href","/docs/transformers/pr_17407/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(tq,"href","/docs/transformers/pr_17407/en/model_doc/swin#transformers.SwinModel"),c(aq,"href","/docs/transformers/pr_17407/en/model_doc/t5#transformers.T5Model"),c(nq,"href","/docs/transformers/pr_17407/en/model_doc/tapas#transformers.TapasModel"),c(sq,"href","/docs/transformers/pr_17407/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(lq,"href","/docs/transformers/pr_17407/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(iq,"href","/docs/transformers/pr_17407/en/model_doc/unispeech#transformers.UniSpeechModel"),c(dq,"href","/docs/transformers/pr_17407/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(cq,"href","/docs/transformers/pr_17407/en/model_doc/van#transformers.VanModel"),c(fq,"href","/docs/transformers/pr_17407/en/model_doc/vilt#transformers.ViltModel"),c(mq,"href","/docs/transformers/pr_17407/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(gq,"href","/docs/transformers/pr_17407/en/model_doc/visual_bert#transformers.VisualBertModel"),c(hq,"href","/docs/transformers/pr_17407/en/model_doc/vit#transformers.ViTModel"),c(pq,"href","/docs/transformers/pr_17407/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(uq,"href","/docs/transformers/pr_17407/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(_q,"href","/docs/transformers/pr_17407/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(bq,"href","/docs/transformers/pr_17407/en/model_doc/wavlm#transformers.WavLMModel"),c(vq,"href","/docs/transformers/pr_17407/en/model_doc/xglm#transformers.XGLMModel"),c(Fq,"href","/docs/transformers/pr_17407/en/model_doc/xlm#transformers.XLMModel"),c(Tq,"href","/docs/transformers/pr_17407/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(Mq,"href","/docs/transformers/pr_17407/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(Eq,"href","/docs/transformers/pr_17407/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(Cq,"href","/docs/transformers/pr_17407/en/model_doc/xlnet#transformers.XLNetModel"),c(wq,"href","/docs/transformers/pr_17407/en/model_doc/yolos#transformers.YolosModel"),c(Aq,"href","/docs/transformers/pr_17407/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t_,"id","transformers.AutoModelForPreTraining"),c(t_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t_,"href","#transformers.AutoModelForPreTraining"),c(Li,"class","relative group"),c(yq,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lq,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xq,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($q,"href","/docs/transformers/pr_17407/en/model_doc/albert#transformers.AlbertForPreTraining"),c(kq,"href","/docs/transformers/pr_17407/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Sq,"href","/docs/transformers/pr_17407/en/model_doc/bert#transformers.BertForPreTraining"),c(Rq,"href","/docs/transformers/pr_17407/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(Pq,"href","/docs/transformers/pr_17407/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(Bq,"href","/docs/transformers/pr_17407/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Iq,"href","/docs/transformers/pr_17407/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(Nq,"href","/docs/transformers/pr_17407/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(qq,"href","/docs/transformers/pr_17407/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(jq,"href","/docs/transformers/pr_17407/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(Dq,"href","/docs/transformers/pr_17407/en/model_doc/electra#transformers.ElectraForPreTraining"),c(Gq,"href","/docs/transformers/pr_17407/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(Oq,"href","/docs/transformers/pr_17407/en/model_doc/flava#transformers.FlavaForPreTraining"),c(Vq,"href","/docs/transformers/pr_17407/en/model_doc/fnet#transformers.FNetForPreTraining"),c(Xq,"href","/docs/transformers/pr_17407/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(zq,"href","/docs/transformers/pr_17407/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(Wq,"href","/docs/transformers/pr_17407/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(Qq,"href","/docs/transformers/pr_17407/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(Hq,"href","/docs/transformers/pr_17407/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(Uq,"href","/docs/transformers/pr_17407/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(Jq,"href","/docs/transformers/pr_17407/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(Yq,"href","/docs/transformers/pr_17407/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(Kq,"href","/docs/transformers/pr_17407/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(Zq,"href","/docs/transformers/pr_17407/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(ej,"href","/docs/transformers/pr_17407/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(oj,"href","/docs/transformers/pr_17407/en/model_doc/retribert#transformers.RetriBertModel"),c(rj,"href","/docs/transformers/pr_17407/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(tj,"href","/docs/transformers/pr_17407/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(aj,"href","/docs/transformers/pr_17407/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(nj,"href","/docs/transformers/pr_17407/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(sj,"href","/docs/transformers/pr_17407/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(lj,"href","/docs/transformers/pr_17407/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(ij,"href","/docs/transformers/pr_17407/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(dj,"href","/docs/transformers/pr_17407/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(cj,"href","/docs/transformers/pr_17407/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(fj,"href","/docs/transformers/pr_17407/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(mj,"href","/docs/transformers/pr_17407/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(gj,"href","/docs/transformers/pr_17407/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(hj,"href","/docs/transformers/pr_17407/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(pj,"href","/docs/transformers/pr_17407/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(uj,"href","/docs/transformers/pr_17407/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(_j,"href","/docs/transformers/pr_17407/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U_,"id","transformers.AutoModelForCausalLM"),c(U_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U_,"href","#transformers.AutoModelForCausalLM"),c(ki,"class","relative group"),c(bj,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vj,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Fj,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tj,"href","/docs/transformers/pr_17407/en/model_doc/bart#transformers.BartForCausalLM"),c(Mj,"href","/docs/transformers/pr_17407/en/model_doc/bert#transformers.BertLMHeadModel"),c(Ej,"href","/docs/transformers/pr_17407/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(Cj,"href","/docs/transformers/pr_17407/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(wj,"href","/docs/transformers/pr_17407/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(Aj,"href","/docs/transformers/pr_17407/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(yj,"href","/docs/transformers/pr_17407/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(Lj,"href","/docs/transformers/pr_17407/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(xj,"href","/docs/transformers/pr_17407/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c($j,"href","/docs/transformers/pr_17407/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(kj,"href","/docs/transformers/pr_17407/en/model_doc/electra#transformers.ElectraForCausalLM"),c(Sj,"href","/docs/transformers/pr_17407/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(Rj,"href","/docs/transformers/pr_17407/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(Pj,"href","/docs/transformers/pr_17407/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(Bj,"href","/docs/transformers/pr_17407/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(Ij,"href","/docs/transformers/pr_17407/en/model_doc/marian#transformers.MarianForCausalLM"),c(Nj,"href","/docs/transformers/pr_17407/en/model_doc/mbart#transformers.MBartForCausalLM"),c(qj,"href","/docs/transformers/pr_17407/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(jj,"href","/docs/transformers/pr_17407/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(Dj,"href","/docs/transformers/pr_17407/en/model_doc/opt#transformers.OPTForCausalLM"),c(Gj,"href","/docs/transformers/pr_17407/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(Oj,"href","/docs/transformers/pr_17407/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(Vj,"href","/docs/transformers/pr_17407/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(Xj,"href","/docs/transformers/pr_17407/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(zj,"href","/docs/transformers/pr_17407/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(Wj,"href","/docs/transformers/pr_17407/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(Qj,"href","/docs/transformers/pr_17407/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(Hj,"href","/docs/transformers/pr_17407/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(Uj,"href","/docs/transformers/pr_17407/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(Jj,"href","/docs/transformers/pr_17407/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(Yj,"href","/docs/transformers/pr_17407/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(Kj,"href","/docs/transformers/pr_17407/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(Zj,"href","/docs/transformers/pr_17407/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(eD,"href","/docs/transformers/pr_17407/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(oD,"href","/docs/transformers/pr_17407/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(rD,"href","/docs/transformers/pr_17407/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(tD,"href","/docs/transformers/pr_17407/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(I1,"id","transformers.AutoModelForMaskedLM"),c(I1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(I1,"href","#transformers.AutoModelForMaskedLM"),c(Pi,"class","relative group"),c(aD,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nD,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sD,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lD,"href","/docs/transformers/pr_17407/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(iD,"href","/docs/transformers/pr_17407/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(dD,"href","/docs/transformers/pr_17407/en/model_doc/bert#transformers.BertForMaskedLM"),c(cD,"href","/docs/transformers/pr_17407/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(fD,"href","/docs/transformers/pr_17407/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(mD,"href","/docs/transformers/pr_17407/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(gD,"href","/docs/transformers/pr_17407/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(hD,"href","/docs/transformers/pr_17407/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(pD,"href","/docs/transformers/pr_17407/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(uD,"href","/docs/transformers/pr_17407/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(_D,"href","/docs/transformers/pr_17407/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(bD,"href","/docs/transformers/pr_17407/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(vD,"href","/docs/transformers/pr_17407/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(FD,"href","/docs/transformers/pr_17407/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(TD,"href","/docs/transformers/pr_17407/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(MD,"href","/docs/transformers/pr_17407/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(ED,"href","/docs/transformers/pr_17407/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(CD,"href","/docs/transformers/pr_17407/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(wD,"href","/docs/transformers/pr_17407/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(AD,"href","/docs/transformers/pr_17407/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(yD,"href","/docs/transformers/pr_17407/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(LD,"href","/docs/transformers/pr_17407/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(xD,"href","/docs/transformers/pr_17407/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c($D,"href","/docs/transformers/pr_17407/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(kD,"href","/docs/transformers/pr_17407/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(SD,"href","/docs/transformers/pr_17407/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(RD,"href","/docs/transformers/pr_17407/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(PD,"href","/docs/transformers/pr_17407/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(BD,"href","/docs/transformers/pr_17407/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(ID,"href","/docs/transformers/pr_17407/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(ND,"href","/docs/transformers/pr_17407/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(qD,"href","/docs/transformers/pr_17407/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(jD,"href","/docs/transformers/pr_17407/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(DD,"href","/docs/transformers/pr_17407/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T7,"id","transformers.AutoModelForSeq2SeqLM"),c(T7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T7,"href","#transformers.AutoModelForSeq2SeqLM"),c(Ni,"class","relative group"),c(GD,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OD,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VD,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XD,"href","/docs/transformers/pr_17407/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(zD,"href","/docs/transformers/pr_17407/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(WD,"href","/docs/transformers/pr_17407/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(QD,"href","/docs/transformers/pr_17407/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(HD,"href","/docs/transformers/pr_17407/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(UD,"href","/docs/transformers/pr_17407/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(JD,"href","/docs/transformers/pr_17407/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(YD,"href","/docs/transformers/pr_17407/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(KD,"href","/docs/transformers/pr_17407/en/model_doc/marian#transformers.MarianMTModel"),c(ZD,"href","/docs/transformers/pr_17407/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(eG,"href","/docs/transformers/pr_17407/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(oG,"href","/docs/transformers/pr_17407/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(rG,"href","/docs/transformers/pr_17407/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(tG,"href","/docs/transformers/pr_17407/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(aG,"href","/docs/transformers/pr_17407/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(nG,"href","/docs/transformers/pr_17407/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G7,"id","transformers.AutoModelForSequenceClassification"),c(G7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G7,"href","#transformers.AutoModelForSequenceClassification"),c(Di,"class","relative group"),c(sG,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lG,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iG,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dG,"href","/docs/transformers/pr_17407/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(cG,"href","/docs/transformers/pr_17407/en/model_doc/bart#transformers.BartForSequenceClassification"),c(fG,"href","/docs/transformers/pr_17407/en/model_doc/bert#transformers.BertForSequenceClassification"),c(mG,"href","/docs/transformers/pr_17407/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(gG,"href","/docs/transformers/pr_17407/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(hG,"href","/docs/transformers/pr_17407/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(pG,"href","/docs/transformers/pr_17407/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(uG,"href","/docs/transformers/pr_17407/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(_G,"href","/docs/transformers/pr_17407/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(bG,"href","/docs/transformers/pr_17407/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(vG,"href","/docs/transformers/pr_17407/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(FG,"href","/docs/transformers/pr_17407/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(TG,"href","/docs/transformers/pr_17407/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(MG,"href","/docs/transformers/pr_17407/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(EG,"href","/docs/transformers/pr_17407/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(CG,"href","/docs/transformers/pr_17407/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(wG,"href","/docs/transformers/pr_17407/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(AG,"href","/docs/transformers/pr_17407/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(yG,"href","/docs/transformers/pr_17407/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(LG,"href","/docs/transformers/pr_17407/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(xG,"href","/docs/transformers/pr_17407/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c($G,"href","/docs/transformers/pr_17407/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(kG,"href","/docs/transformers/pr_17407/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(SG,"href","/docs/transformers/pr_17407/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(RG,"href","/docs/transformers/pr_17407/en/model_doc/led#transformers.LEDForSequenceClassification"),c(PG,"href","/docs/transformers/pr_17407/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(BG,"href","/docs/transformers/pr_17407/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(IG,"href","/docs/transformers/pr_17407/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(NG,"href","/docs/transformers/pr_17407/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(qG,"href","/docs/transformers/pr_17407/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(jG,"href","/docs/transformers/pr_17407/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(DG,"href","/docs/transformers/pr_17407/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(GG,"href","/docs/transformers/pr_17407/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(OG,"href","/docs/transformers/pr_17407/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(VG,"href","/docs/transformers/pr_17407/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(XG,"href","/docs/transformers/pr_17407/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(zG,"href","/docs/transformers/pr_17407/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(WG,"href","/docs/transformers/pr_17407/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(QG,"href","/docs/transformers/pr_17407/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(HG,"href","/docs/transformers/pr_17407/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(UG,"href","/docs/transformers/pr_17407/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(JG,"href","/docs/transformers/pr_17407/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(YG,"href","/docs/transformers/pr_17407/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(KG,"href","/docs/transformers/pr_17407/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(ZG,"href","/docs/transformers/pr_17407/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(eO,"href","/docs/transformers/pr_17407/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(oO,"href","/docs/transformers/pr_17407/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qb,"id","transformers.AutoModelForMultipleChoice"),c(qb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qb,"href","#transformers.AutoModelForMultipleChoice"),c(Vi,"class","relative group"),c(rO,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tO,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aO,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nO,"href","/docs/transformers/pr_17407/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(sO,"href","/docs/transformers/pr_17407/en/model_doc/bert#transformers.BertForMultipleChoice"),c(lO,"href","/docs/transformers/pr_17407/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(iO,"href","/docs/transformers/pr_17407/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(dO,"href","/docs/transformers/pr_17407/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(cO,"href","/docs/transformers/pr_17407/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(fO,"href","/docs/transformers/pr_17407/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(mO,"href","/docs/transformers/pr_17407/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(gO,"href","/docs/transformers/pr_17407/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(hO,"href","/docs/transformers/pr_17407/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(pO,"href","/docs/transformers/pr_17407/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(uO,"href","/docs/transformers/pr_17407/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(_O,"href","/docs/transformers/pr_17407/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(bO,"href","/docs/transformers/pr_17407/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(vO,"href","/docs/transformers/pr_17407/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(FO,"href","/docs/transformers/pr_17407/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(TO,"href","/docs/transformers/pr_17407/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(MO,"href","/docs/transformers/pr_17407/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(EO,"href","/docs/transformers/pr_17407/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(CO,"href","/docs/transformers/pr_17407/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(wO,"href","/docs/transformers/pr_17407/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(AO,"href","/docs/transformers/pr_17407/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(yO,"href","/docs/transformers/pr_17407/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(LO,"href","/docs/transformers/pr_17407/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(xO,"href","/docs/transformers/pr_17407/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c($O,"href","/docs/transformers/pr_17407/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(kO,"href","/docs/transformers/pr_17407/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(SO,"href","/docs/transformers/pr_17407/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(RO,"href","/docs/transformers/pr_17407/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_2,"id","transformers.AutoModelForNextSentencePrediction"),c(_2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_2,"href","#transformers.AutoModelForNextSentencePrediction"),c(Wi,"class","relative group"),c(PO,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BO,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IO,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NO,"href","/docs/transformers/pr_17407/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(qO,"href","/docs/transformers/pr_17407/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(jO,"href","/docs/transformers/pr_17407/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(DO,"href","/docs/transformers/pr_17407/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(GO,"href","/docs/transformers/pr_17407/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A2,"id","transformers.AutoModelForTokenClassification"),c(A2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A2,"href","#transformers.AutoModelForTokenClassification"),c(Ui,"class","relative group"),c(OO,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VO,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XO,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zO,"href","/docs/transformers/pr_17407/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(WO,"href","/docs/transformers/pr_17407/en/model_doc/bert#transformers.BertForTokenClassification"),c(QO,"href","/docs/transformers/pr_17407/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(HO,"href","/docs/transformers/pr_17407/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(UO,"href","/docs/transformers/pr_17407/en/model_doc/canine#transformers.CanineForTokenClassification"),c(JO,"href","/docs/transformers/pr_17407/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(YO,"href","/docs/transformers/pr_17407/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(KO,"href","/docs/transformers/pr_17407/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(ZO,"href","/docs/transformers/pr_17407/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(eV,"href","/docs/transformers/pr_17407/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(oV,"href","/docs/transformers/pr_17407/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(rV,"href","/docs/transformers/pr_17407/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(tV,"href","/docs/transformers/pr_17407/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(aV,"href","/docs/transformers/pr_17407/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(nV,"href","/docs/transformers/pr_17407/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(sV,"href","/docs/transformers/pr_17407/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(lV,"href","/docs/transformers/pr_17407/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(iV,"href","/docs/transformers/pr_17407/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(dV,"href","/docs/transformers/pr_17407/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(cV,"href","/docs/transformers/pr_17407/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(fV,"href","/docs/transformers/pr_17407/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(mV,"href","/docs/transformers/pr_17407/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(gV,"href","/docs/transformers/pr_17407/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(hV,"href","/docs/transformers/pr_17407/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(pV,"href","/docs/transformers/pr_17407/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(uV,"href","/docs/transformers/pr_17407/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(_V,"href","/docs/transformers/pr_17407/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(bV,"href","/docs/transformers/pr_17407/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(vV,"href","/docs/transformers/pr_17407/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(FV,"href","/docs/transformers/pr_17407/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(TV,"href","/docs/transformers/pr_17407/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(MV,"href","/docs/transformers/pr_17407/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(EV,"href","/docs/transformers/pr_17407/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(CV,"href","/docs/transformers/pr_17407/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(c4,"id","transformers.AutoModelForQuestionAnswering"),c(c4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(c4,"href","#transformers.AutoModelForQuestionAnswering"),c(Ki,"class","relative group"),c(wV,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AV,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yV,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LV,"href","/docs/transformers/pr_17407/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(xV,"href","/docs/transformers/pr_17407/en/model_doc/bart#transformers.BartForQuestionAnswering"),c($V,"href","/docs/transformers/pr_17407/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(kV,"href","/docs/transformers/pr_17407/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(SV,"href","/docs/transformers/pr_17407/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(RV,"href","/docs/transformers/pr_17407/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(PV,"href","/docs/transformers/pr_17407/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(BV,"href","/docs/transformers/pr_17407/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(IV,"href","/docs/transformers/pr_17407/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(NV,"href","/docs/transformers/pr_17407/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(qV,"href","/docs/transformers/pr_17407/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(jV,"href","/docs/transformers/pr_17407/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(DV,"href","/docs/transformers/pr_17407/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(GV,"href","/docs/transformers/pr_17407/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(OV,"href","/docs/transformers/pr_17407/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(VV,"href","/docs/transformers/pr_17407/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(XV,"href","/docs/transformers/pr_17407/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(zV,"href","/docs/transformers/pr_17407/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(WV,"href","/docs/transformers/pr_17407/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(QV,"href","/docs/transformers/pr_17407/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(HV,"href","/docs/transformers/pr_17407/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(UV,"href","/docs/transformers/pr_17407/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(JV,"href","/docs/transformers/pr_17407/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(YV,"href","/docs/transformers/pr_17407/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(KV,"href","/docs/transformers/pr_17407/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(ZV,"href","/docs/transformers/pr_17407/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(eX,"href","/docs/transformers/pr_17407/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(oX,"href","/docs/transformers/pr_17407/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(rX,"href","/docs/transformers/pr_17407/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(tX,"href","/docs/transformers/pr_17407/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(aX,"href","/docs/transformers/pr_17407/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(nX,"href","/docs/transformers/pr_17407/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(sX,"href","/docs/transformers/pr_17407/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(lX,"href","/docs/transformers/pr_17407/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(iX,"href","/docs/transformers/pr_17407/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(dX,"href","/docs/transformers/pr_17407/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(cX,"href","/docs/transformers/pr_17407/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(fX,"href","/docs/transformers/pr_17407/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(mX,"href","/docs/transformers/pr_17407/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(gX,"href","/docs/transformers/pr_17407/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ev,"id","transformers.AutoModelForTableQuestionAnswering"),c(ev,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ev,"href","#transformers.AutoModelForTableQuestionAnswering"),c(od,"class","relative group"),c(hX,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pX,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uX,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_X,"href","/docs/transformers/pr_17407/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nv,"id","transformers.AutoModelForImageClassification"),c(nv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nv,"href","#transformers.AutoModelForImageClassification"),c(ad,"class","relative group"),c(bX,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vX,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FX,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TX,"href","/docs/transformers/pr_17407/en/model_doc/beit#transformers.BeitForImageClassification"),c(MX,"href","/docs/transformers/pr_17407/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(EX,"href","/docs/transformers/pr_17407/en/model_doc/cvt#transformers.CvtForImageClassification"),c(CX,"href","/docs/transformers/pr_17407/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(wX,"href","/docs/transformers/pr_17407/en/model_doc/deit#transformers.DeiTForImageClassification"),c(AX,"href","/docs/transformers/pr_17407/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(yX,"href","/docs/transformers/pr_17407/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(LX,"href","/docs/transformers/pr_17407/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(xX,"href","/docs/transformers/pr_17407/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c($X,"href","/docs/transformers/pr_17407/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(kX,"href","/docs/transformers/pr_17407/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(SX,"href","/docs/transformers/pr_17407/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(RX,"href","/docs/transformers/pr_17407/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(PX,"href","/docs/transformers/pr_17407/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(BX,"href","/docs/transformers/pr_17407/en/model_doc/swin#transformers.SwinForImageClassification"),c(IX,"href","/docs/transformers/pr_17407/en/model_doc/van#transformers.VanForImageClassification"),c(NX,"href","/docs/transformers/pr_17407/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tv,"id","transformers.AutoModelForVision2Seq"),c(Tv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tv,"href","#transformers.AutoModelForVision2Seq"),c(ld,"class","relative group"),c(qX,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jX,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DX,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GX,"href","/docs/transformers/pr_17407/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Av,"id","transformers.AutoModelForAudioClassification"),c(Av,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Av,"href","#transformers.AutoModelForAudioClassification"),c(cd,"class","relative group"),c(OX,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VX,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XX,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zX,"href","/docs/transformers/pr_17407/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(WX,"href","/docs/transformers/pr_17407/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(QX,"href","/docs/transformers/pr_17407/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(HX,"href","/docs/transformers/pr_17407/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(UX,"href","/docs/transformers/pr_17407/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(JX,"href","/docs/transformers/pr_17407/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(YX,"href","/docs/transformers/pr_17407/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(KX,"href","/docs/transformers/pr_17407/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(ZX,"href","/docs/transformers/pr_17407/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jv,"id","transformers.AutoModelForAudioFrameClassification"),c(jv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jv,"href","#transformers.AutoModelForAudioFrameClassification"),c(gd,"class","relative group"),c(ez,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oz,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rz,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tz,"href","/docs/transformers/pr_17407/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(az,"href","/docs/transformers/pr_17407/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(nz,"href","/docs/transformers/pr_17407/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(sz,"href","/docs/transformers/pr_17407/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(lz,"href","/docs/transformers/pr_17407/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hv,"id","transformers.AutoModelForCTC"),c(Hv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Hv,"href","#transformers.AutoModelForCTC"),c(ud,"class","relative group"),c(iz,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dz,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cz,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fz,"href","/docs/transformers/pr_17407/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(mz,"href","/docs/transformers/pr_17407/en/model_doc/hubert#transformers.HubertForCTC"),c(gz,"href","/docs/transformers/pr_17407/en/model_doc/sew#transformers.SEWForCTC"),c(hz,"href","/docs/transformers/pr_17407/en/model_doc/sew-d#transformers.SEWDForCTC"),c(pz,"href","/docs/transformers/pr_17407/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(uz,"href","/docs/transformers/pr_17407/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(_z,"href","/docs/transformers/pr_17407/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(bz,"href","/docs/transformers/pr_17407/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(vz,"href","/docs/transformers/pr_17407/en/model_doc/wavlm#transformers.WavLMForCTC"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lF,"id","transformers.AutoModelForSpeechSeq2Seq"),c(lF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lF,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(vd,"class","relative group"),c(Fz,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tz,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Mz,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ez,"href","/docs/transformers/pr_17407/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(Cz,"href","/docs/transformers/pr_17407/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gF,"id","transformers.AutoModelForAudioXVector"),c(gF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gF,"href","#transformers.AutoModelForAudioXVector"),c(Md,"class","relative group"),c(wz,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Az,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yz,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lz,"href","/docs/transformers/pr_17407/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(xz,"href","/docs/transformers/pr_17407/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c($z,"href","/docs/transformers/pr_17407/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(kz,"href","/docs/transformers/pr_17407/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(Sz,"href","/docs/transformers/pr_17407/en/model_doc/wavlm#transformers.WavLMForXVector"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MF,"id","transformers.AutoModelForMaskedImageModeling"),c(MF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(MF,"href","#transformers.AutoModelForMaskedImageModeling"),c(wd,"class","relative group"),c(Rz,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pz,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Bz,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Iz,"href","/docs/transformers/pr_17407/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(Nz,"href","/docs/transformers/pr_17407/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(qz,"href","/docs/transformers/pr_17407/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xF,"id","transformers.AutoModelForObjectDetection"),c(xF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xF,"href","#transformers.AutoModelForObjectDetection"),c(xd,"class","relative group"),c(jz,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dz,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Gz,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oz,"href","/docs/transformers/pr_17407/en/model_doc/detr#transformers.DetrForObjectDetection"),c(Vz,"href","/docs/transformers/pr_17407/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BF,"id","transformers.AutoModelForImageSegmentation"),c(BF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(BF,"href","#transformers.AutoModelForImageSegmentation"),c(Sd,"class","relative group"),c(Xz,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zz,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Wz,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qz,"href","/docs/transformers/pr_17407/en/model_doc/detr#transformers.DetrForSegmentation"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DF,"id","transformers.AutoModelForSemanticSegmentation"),c(DF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DF,"href","#transformers.AutoModelForSemanticSegmentation"),c(Bd,"class","relative group"),c(Hz,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Uz,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Jz,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yz,"href","/docs/transformers/pr_17407/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(Kz,"href","/docs/transformers/pr_17407/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(Zz,"href","/docs/transformers/pr_17407/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(eW,"href","/docs/transformers/pr_17407/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HF,"id","transformers.AutoModelForInstanceSegmentation"),c(HF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(HF,"href","#transformers.AutoModelForInstanceSegmentation"),c(qd,"class","relative group"),c(oW,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rW,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tW,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aW,"href","/docs/transformers/pr_17407/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZF,"id","transformers.TFAutoModel"),c(ZF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZF,"href","#transformers.TFAutoModel"),c(Gd,"class","relative group"),c(nW,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sW,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lW,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iW,"href","/docs/transformers/pr_17407/en/model_doc/albert#transformers.TFAlbertModel"),c(dW,"href","/docs/transformers/pr_17407/en/model_doc/bart#transformers.TFBartModel"),c(cW,"href","/docs/transformers/pr_17407/en/model_doc/bert#transformers.TFBertModel"),c(fW,"href","/docs/transformers/pr_17407/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(mW,"href","/docs/transformers/pr_17407/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(gW,"href","/docs/transformers/pr_17407/en/model_doc/camembert#transformers.TFCamembertModel"),c(hW,"href","/docs/transformers/pr_17407/en/model_doc/clip#transformers.TFCLIPModel"),c(pW,"href","/docs/transformers/pr_17407/en/model_doc/convbert#transformers.TFConvBertModel"),c(uW,"href","/docs/transformers/pr_17407/en/model_doc/convnext#transformers.TFConvNextModel"),c(_W,"href","/docs/transformers/pr_17407/en/model_doc/ctrl#transformers.TFCTRLModel"),c(bW,"href","/docs/transformers/pr_17407/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(vW,"href","/docs/transformers/pr_17407/en/model_doc/deberta#transformers.TFDebertaModel"),c(FW,"href","/docs/transformers/pr_17407/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(TW,"href","/docs/transformers/pr_17407/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(MW,"href","/docs/transformers/pr_17407/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(EW,"href","/docs/transformers/pr_17407/en/model_doc/electra#transformers.TFElectraModel"),c(CW,"href","/docs/transformers/pr_17407/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(wW,"href","/docs/transformers/pr_17407/en/model_doc/funnel#transformers.TFFunnelModel"),c(AW,"href","/docs/transformers/pr_17407/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(yW,"href","/docs/transformers/pr_17407/en/model_doc/gpt2#transformers.TFGPT2Model"),c(LW,"href","/docs/transformers/pr_17407/en/model_doc/gptj#transformers.TFGPTJModel"),c(xW,"href","/docs/transformers/pr_17407/en/model_doc/hubert#transformers.TFHubertModel"),c($W,"href","/docs/transformers/pr_17407/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(kW,"href","/docs/transformers/pr_17407/en/model_doc/led#transformers.TFLEDModel"),c(SW,"href","/docs/transformers/pr_17407/en/model_doc/longformer#transformers.TFLongformerModel"),c(RW,"href","/docs/transformers/pr_17407/en/model_doc/lxmert#transformers.TFLxmertModel"),c(PW,"href","/docs/transformers/pr_17407/en/model_doc/marian#transformers.TFMarianModel"),c(BW,"href","/docs/transformers/pr_17407/en/model_doc/mbart#transformers.TFMBartModel"),c(IW,"href","/docs/transformers/pr_17407/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(NW,"href","/docs/transformers/pr_17407/en/model_doc/mpnet#transformers.TFMPNetModel"),c(qW,"href","/docs/transformers/pr_17407/en/model_doc/mt5#transformers.TFMT5Model"),c(jW,"href","/docs/transformers/pr_17407/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(DW,"href","/docs/transformers/pr_17407/en/model_doc/pegasus#transformers.TFPegasusModel"),c(GW,"href","/docs/transformers/pr_17407/en/model_doc/rembert#transformers.TFRemBertModel"),c(OW,"href","/docs/transformers/pr_17407/en/model_doc/roberta#transformers.TFRobertaModel"),c(VW,"href","/docs/transformers/pr_17407/en/model_doc/roformer#transformers.TFRoFormerModel"),c(XW,"href","/docs/transformers/pr_17407/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(zW,"href","/docs/transformers/pr_17407/en/model_doc/swin#transformers.TFSwinModel"),c(WW,"href","/docs/transformers/pr_17407/en/model_doc/t5#transformers.TFT5Model"),c(QW,"href","/docs/transformers/pr_17407/en/model_doc/tapas#transformers.TFTapasModel"),c(HW,"href","/docs/transformers/pr_17407/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(UW,"href","/docs/transformers/pr_17407/en/model_doc/vit#transformers.TFViTModel"),c(JW,"href","/docs/transformers/pr_17407/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(YW,"href","/docs/transformers/pr_17407/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(KW,"href","/docs/transformers/pr_17407/en/model_doc/xlm#transformers.TFXLMModel"),c(ZW,"href","/docs/transformers/pr_17407/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(eQ,"href","/docs/transformers/pr_17407/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Q0,"id","transformers.TFAutoModelForPreTraining"),c(Q0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q0,"href","#transformers.TFAutoModelForPreTraining"),c(Xd,"class","relative group"),c(oQ,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rQ,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tQ,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aQ,"href","/docs/transformers/pr_17407/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(nQ,"href","/docs/transformers/pr_17407/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(sQ,"href","/docs/transformers/pr_17407/en/model_doc/bert#transformers.TFBertForPreTraining"),c(lQ,"href","/docs/transformers/pr_17407/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(iQ,"href","/docs/transformers/pr_17407/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(dQ,"href","/docs/transformers/pr_17407/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(cQ,"href","/docs/transformers/pr_17407/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(fQ,"href","/docs/transformers/pr_17407/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(mQ,"href","/docs/transformers/pr_17407/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(gQ,"href","/docs/transformers/pr_17407/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(hQ,"href","/docs/transformers/pr_17407/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(pQ,"href","/docs/transformers/pr_17407/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(uQ,"href","/docs/transformers/pr_17407/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(_Q,"href","/docs/transformers/pr_17407/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(bQ,"href","/docs/transformers/pr_17407/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(vQ,"href","/docs/transformers/pr_17407/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(FQ,"href","/docs/transformers/pr_17407/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(TQ,"href","/docs/transformers/pr_17407/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(MQ,"href","/docs/transformers/pr_17407/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(EQ,"href","/docs/transformers/pr_17407/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(CQ,"href","/docs/transformers/pr_17407/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(wQ,"href","/docs/transformers/pr_17407/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(AQ,"href","/docs/transformers/pr_17407/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vT,"id","transformers.TFAutoModelForCausalLM"),c(vT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vT,"href","#transformers.TFAutoModelForCausalLM"),c(Qd,"class","relative group"),c(yQ,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LQ,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xQ,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($Q,"href","/docs/transformers/pr_17407/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(kQ,"href","/docs/transformers/pr_17407/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(SQ,"href","/docs/transformers/pr_17407/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(RQ,"href","/docs/transformers/pr_17407/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(PQ,"href","/docs/transformers/pr_17407/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(BQ,"href","/docs/transformers/pr_17407/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(IQ,"href","/docs/transformers/pr_17407/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(NQ,"href","/docs/transformers/pr_17407/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(qQ,"href","/docs/transformers/pr_17407/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(jQ,"href","/docs/transformers/pr_17407/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(DQ,"href","/docs/transformers/pr_17407/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(GQ,"href","/docs/transformers/pr_17407/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PT,"id","transformers.TFAutoModelForImageClassification"),c(PT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PT,"href","#transformers.TFAutoModelForImageClassification"),c(Jd,"class","relative group"),c(OQ,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VQ,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XQ,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zQ,"href","/docs/transformers/pr_17407/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(WQ,"href","/docs/transformers/pr_17407/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(QQ,"href","/docs/transformers/pr_17407/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(HQ,"href","/docs/transformers/pr_17407/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GT,"id","transformers.TFAutoModelForMaskedLM"),c(GT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(GT,"href","#transformers.TFAutoModelForMaskedLM"),c(Zd,"class","relative group"),c(UQ,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JQ,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YQ,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KQ,"href","/docs/transformers/pr_17407/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(ZQ,"href","/docs/transformers/pr_17407/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(eH,"href","/docs/transformers/pr_17407/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(oH,"href","/docs/transformers/pr_17407/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(rH,"href","/docs/transformers/pr_17407/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(tH,"href","/docs/transformers/pr_17407/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(aH,"href","/docs/transformers/pr_17407/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(nH,"href","/docs/transformers/pr_17407/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(sH,"href","/docs/transformers/pr_17407/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(lH,"href","/docs/transformers/pr_17407/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(iH,"href","/docs/transformers/pr_17407/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(dH,"href","/docs/transformers/pr_17407/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(cH,"href","/docs/transformers/pr_17407/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(fH,"href","/docs/transformers/pr_17407/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(mH,"href","/docs/transformers/pr_17407/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(gH,"href","/docs/transformers/pr_17407/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(hH,"href","/docs/transformers/pr_17407/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(pH,"href","/docs/transformers/pr_17407/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(uH,"href","/docs/transformers/pr_17407/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(_H,"href","/docs/transformers/pr_17407/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cM,"id","transformers.TFAutoModelForSeq2SeqLM"),c(cM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cM,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(rc,"class","relative group"),c(bH,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vH,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FH,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TH,"href","/docs/transformers/pr_17407/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(MH,"href","/docs/transformers/pr_17407/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(EH,"href","/docs/transformers/pr_17407/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(CH,"href","/docs/transformers/pr_17407/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(wH,"href","/docs/transformers/pr_17407/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(AH,"href","/docs/transformers/pr_17407/en/model_doc/marian#transformers.TFMarianMTModel"),c(yH,"href","/docs/transformers/pr_17407/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(LH,"href","/docs/transformers/pr_17407/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(xH,"href","/docs/transformers/pr_17407/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c($H,"href","/docs/transformers/pr_17407/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EM,"id","transformers.TFAutoModelForSequenceClassification"),c(EM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(EM,"href","#transformers.TFAutoModelForSequenceClassification"),c(nc,"class","relative group"),c(kH,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SH,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RH,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PH,"href","/docs/transformers/pr_17407/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(BH,"href","/docs/transformers/pr_17407/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(IH,"href","/docs/transformers/pr_17407/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(NH,"href","/docs/transformers/pr_17407/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(qH,"href","/docs/transformers/pr_17407/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(jH,"href","/docs/transformers/pr_17407/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(DH,"href","/docs/transformers/pr_17407/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(GH,"href","/docs/transformers/pr_17407/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(OH,"href","/docs/transformers/pr_17407/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(VH,"href","/docs/transformers/pr_17407/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(XH,"href","/docs/transformers/pr_17407/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(zH,"href","/docs/transformers/pr_17407/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(WH,"href","/docs/transformers/pr_17407/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(QH,"href","/docs/transformers/pr_17407/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(HH,"href","/docs/transformers/pr_17407/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(UH,"href","/docs/transformers/pr_17407/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(JH,"href","/docs/transformers/pr_17407/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(YH,"href","/docs/transformers/pr_17407/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(KH,"href","/docs/transformers/pr_17407/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(ZH,"href","/docs/transformers/pr_17407/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(eU,"href","/docs/transformers/pr_17407/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(oU,"href","/docs/transformers/pr_17407/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(rU,"href","/docs/transformers/pr_17407/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(tU,"href","/docs/transformers/pr_17407/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(aU,"href","/docs/transformers/pr_17407/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(nU,"href","/docs/transformers/pr_17407/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KM,"id","transformers.TFAutoModelForMultipleChoice"),c(KM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(KM,"href","#transformers.TFAutoModelForMultipleChoice"),c(ic,"class","relative group"),c(sU,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lU,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iU,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dU,"href","/docs/transformers/pr_17407/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(cU,"href","/docs/transformers/pr_17407/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(fU,"href","/docs/transformers/pr_17407/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(mU,"href","/docs/transformers/pr_17407/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(gU,"href","/docs/transformers/pr_17407/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(hU,"href","/docs/transformers/pr_17407/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(pU,"href","/docs/transformers/pr_17407/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(uU,"href","/docs/transformers/pr_17407/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(_U,"href","/docs/transformers/pr_17407/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(bU,"href","/docs/transformers/pr_17407/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(vU,"href","/docs/transformers/pr_17407/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(FU,"href","/docs/transformers/pr_17407/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(TU,"href","/docs/transformers/pr_17407/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(MU,"href","/docs/transformers/pr_17407/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(EU,"href","/docs/transformers/pr_17407/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(CU,"href","/docs/transformers/pr_17407/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(wU,"href","/docs/transformers/pr_17407/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bE,"id","transformers.TFAutoModelForNextSentencePrediction"),c(bE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bE,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(fc,"class","relative group"),c(AU,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yU,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LU,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xU,"href","/docs/transformers/pr_17407/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c($U,"href","/docs/transformers/pr_17407/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EE,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(EE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(EE,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(hc,"class","relative group"),c(kU,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SU,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RU,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PU,"href","/docs/transformers/pr_17407/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yE,"id","transformers.TFAutoModelForTokenClassification"),c(yE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yE,"href","#transformers.TFAutoModelForTokenClassification"),c(_c,"class","relative group"),c(BU,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IU,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NU,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qU,"href","/docs/transformers/pr_17407/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(jU,"href","/docs/transformers/pr_17407/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(DU,"href","/docs/transformers/pr_17407/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(GU,"href","/docs/transformers/pr_17407/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(OU,"href","/docs/transformers/pr_17407/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(VU,"href","/docs/transformers/pr_17407/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(XU,"href","/docs/transformers/pr_17407/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(zU,"href","/docs/transformers/pr_17407/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(WU,"href","/docs/transformers/pr_17407/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(QU,"href","/docs/transformers/pr_17407/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(HU,"href","/docs/transformers/pr_17407/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(UU,"href","/docs/transformers/pr_17407/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(JU,"href","/docs/transformers/pr_17407/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(YU,"href","/docs/transformers/pr_17407/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(KU,"href","/docs/transformers/pr_17407/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(ZU,"href","/docs/transformers/pr_17407/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(eJ,"href","/docs/transformers/pr_17407/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(oJ,"href","/docs/transformers/pr_17407/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(rJ,"href","/docs/transformers/pr_17407/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(tJ,"href","/docs/transformers/pr_17407/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JE,"id","transformers.TFAutoModelForQuestionAnswering"),c(JE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(JE,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Fc,"class","relative group"),c(aJ,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nJ,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sJ,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lJ,"href","/docs/transformers/pr_17407/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(iJ,"href","/docs/transformers/pr_17407/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(dJ,"href","/docs/transformers/pr_17407/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(cJ,"href","/docs/transformers/pr_17407/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(fJ,"href","/docs/transformers/pr_17407/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(mJ,"href","/docs/transformers/pr_17407/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(gJ,"href","/docs/transformers/pr_17407/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(hJ,"href","/docs/transformers/pr_17407/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(pJ,"href","/docs/transformers/pr_17407/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(uJ,"href","/docs/transformers/pr_17407/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(_J,"href","/docs/transformers/pr_17407/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(bJ,"href","/docs/transformers/pr_17407/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(vJ,"href","/docs/transformers/pr_17407/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(FJ,"href","/docs/transformers/pr_17407/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(TJ,"href","/docs/transformers/pr_17407/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(MJ,"href","/docs/transformers/pr_17407/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(EJ,"href","/docs/transformers/pr_17407/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(CJ,"href","/docs/transformers/pr_17407/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(wJ,"href","/docs/transformers/pr_17407/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(AJ,"href","/docs/transformers/pr_17407/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vC,"id","transformers.TFAutoModelForVision2Seq"),c(vC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vC,"href","#transformers.TFAutoModelForVision2Seq"),c(Ec,"class","relative group"),c(yJ,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LJ,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xJ,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($J,"href","/docs/transformers/pr_17407/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EC,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(EC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(EC,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Ac,"class","relative group"),c(kJ,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SJ,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RJ,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PJ,"href","/docs/transformers/pr_17407/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yC,"id","transformers.FlaxAutoModel"),c(yC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yC,"href","#transformers.FlaxAutoModel"),c(xc,"class","relative group"),c(BJ,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IJ,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NJ,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qJ,"href","/docs/transformers/pr_17407/en/model_doc/albert#transformers.FlaxAlbertModel"),c(jJ,"href","/docs/transformers/pr_17407/en/model_doc/bart#transformers.FlaxBartModel"),c(DJ,"href","/docs/transformers/pr_17407/en/model_doc/beit#transformers.FlaxBeitModel"),c(GJ,"href","/docs/transformers/pr_17407/en/model_doc/bert#transformers.FlaxBertModel"),c(OJ,"href","/docs/transformers/pr_17407/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(VJ,"href","/docs/transformers/pr_17407/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(XJ,"href","/docs/transformers/pr_17407/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(zJ,"href","/docs/transformers/pr_17407/en/model_doc/clip#transformers.FlaxCLIPModel"),c(WJ,"href","/docs/transformers/pr_17407/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(QJ,"href","/docs/transformers/pr_17407/en/model_doc/electra#transformers.FlaxElectraModel"),c(HJ,"href","/docs/transformers/pr_17407/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(UJ,"href","/docs/transformers/pr_17407/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(JJ,"href","/docs/transformers/pr_17407/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(YJ,"href","/docs/transformers/pr_17407/en/model_doc/marian#transformers.FlaxMarianModel"),c(KJ,"href","/docs/transformers/pr_17407/en/model_doc/mbart#transformers.FlaxMBartModel"),c(ZJ,"href","/docs/transformers/pr_17407/en/model_doc/mt5#transformers.FlaxMT5Model"),c(eY,"href","/docs/transformers/pr_17407/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(oY,"href","/docs/transformers/pr_17407/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(rY,"href","/docs/transformers/pr_17407/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(tY,"href","/docs/transformers/pr_17407/en/model_doc/t5#transformers.FlaxT5Model"),c(aY,"href","/docs/transformers/pr_17407/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(nY,"href","/docs/transformers/pr_17407/en/model_doc/vit#transformers.FlaxViTModel"),c(sY,"href","/docs/transformers/pr_17407/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(lY,"href","/docs/transformers/pr_17407/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(iY,"href","/docs/transformers/pr_17407/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o5,"id","transformers.FlaxAutoModelForCausalLM"),c(o5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o5,"href","#transformers.FlaxAutoModelForCausalLM"),c(Sc,"class","relative group"),c(dY,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cY,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fY,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mY,"href","/docs/transformers/pr_17407/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(gY,"href","/docs/transformers/pr_17407/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(hY,"href","/docs/transformers/pr_17407/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(pY,"href","/docs/transformers/pr_17407/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(uY,"href","/docs/transformers/pr_17407/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(_Y,"href","/docs/transformers/pr_17407/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(bY,"href","/docs/transformers/pr_17407/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(vY,"href","/docs/transformers/pr_17407/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(FY,"href","/docs/transformers/pr_17407/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(g5,"id","transformers.FlaxAutoModelForPreTraining"),c(g5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(g5,"href","#transformers.FlaxAutoModelForPreTraining"),c(Bc,"class","relative group"),c(TY,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MY,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EY,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CY,"href","/docs/transformers/pr_17407/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(wY,"href","/docs/transformers/pr_17407/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(AY,"href","/docs/transformers/pr_17407/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(yY,"href","/docs/transformers/pr_17407/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(LY,"href","/docs/transformers/pr_17407/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(xY,"href","/docs/transformers/pr_17407/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c($Y,"href","/docs/transformers/pr_17407/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(kY,"href","/docs/transformers/pr_17407/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(SY,"href","/docs/transformers/pr_17407/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(RY,"href","/docs/transformers/pr_17407/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(PY,"href","/docs/transformers/pr_17407/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(BY,"href","/docs/transformers/pr_17407/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L5,"id","transformers.FlaxAutoModelForMaskedLM"),c(L5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L5,"href","#transformers.FlaxAutoModelForMaskedLM"),c(qc,"class","relative group"),c(IY,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NY,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qY,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jY,"href","/docs/transformers/pr_17407/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(DY,"href","/docs/transformers/pr_17407/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(GY,"href","/docs/transformers/pr_17407/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(OY,"href","/docs/transformers/pr_17407/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(VY,"href","/docs/transformers/pr_17407/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(XY,"href","/docs/transformers/pr_17407/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(zY,"href","/docs/transformers/pr_17407/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(WY,"href","/docs/transformers/pr_17407/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(QY,"href","/docs/transformers/pr_17407/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(HY,"href","/docs/transformers/pr_17407/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G5,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(G5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G5,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Gc,"class","relative group"),c(UY,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JY,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YY,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KY,"href","/docs/transformers/pr_17407/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(ZY,"href","/docs/transformers/pr_17407/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(eK,"href","/docs/transformers/pr_17407/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(oK,"href","/docs/transformers/pr_17407/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(rK,"href","/docs/transformers/pr_17407/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(tK,"href","/docs/transformers/pr_17407/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(aK,"href","/docs/transformers/pr_17407/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(nK,"href","/docs/transformers/pr_17407/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(sK,"href","/docs/transformers/pr_17407/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Z5,"id","transformers.FlaxAutoModelForSequenceClassification"),c(Z5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z5,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Xc,"class","relative group"),c(lK,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iK,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dK,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cK,"href","/docs/transformers/pr_17407/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(fK,"href","/docs/transformers/pr_17407/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(mK,"href","/docs/transformers/pr_17407/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(gK,"href","/docs/transformers/pr_17407/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(hK,"href","/docs/transformers/pr_17407/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(pK,"href","/docs/transformers/pr_17407/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(uK,"href","/docs/transformers/pr_17407/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(_K,"href","/docs/transformers/pr_17407/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(bK,"href","/docs/transformers/pr_17407/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(vK,"href","/docs/transformers/pr_17407/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(m3,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(m3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m3,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Qc,"class","relative group"),c(FK,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TK,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MK,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EK,"href","/docs/transformers/pr_17407/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(CK,"href","/docs/transformers/pr_17407/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(wK,"href","/docs/transformers/pr_17407/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(AK,"href","/docs/transformers/pr_17407/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(yK,"href","/docs/transformers/pr_17407/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(LK,"href","/docs/transformers/pr_17407/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(xK,"href","/docs/transformers/pr_17407/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c($K,"href","/docs/transformers/pr_17407/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(kK,"href","/docs/transformers/pr_17407/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(SK,"href","/docs/transformers/pr_17407/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w3,"id","transformers.FlaxAutoModelForTokenClassification"),c(w3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w3,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Jc,"class","relative group"),c(RK,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PK,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BK,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IK,"href","/docs/transformers/pr_17407/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(NK,"href","/docs/transformers/pr_17407/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(qK,"href","/docs/transformers/pr_17407/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(jK,"href","/docs/transformers/pr_17407/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(DK,"href","/docs/transformers/pr_17407/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(GK,"href","/docs/transformers/pr_17407/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(OK,"href","/docs/transformers/pr_17407/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(VK,"href","/docs/transformers/pr_17407/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(I3,"id","transformers.FlaxAutoModelForMultipleChoice"),c(I3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(I3,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Zc,"class","relative group"),c(XK,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zK,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WK,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QK,"href","/docs/transformers/pr_17407/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(HK,"href","/docs/transformers/pr_17407/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(UK,"href","/docs/transformers/pr_17407/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(JK,"href","/docs/transformers/pr_17407/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(YK,"href","/docs/transformers/pr_17407/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(KK,"href","/docs/transformers/pr_17407/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(ZK,"href","/docs/transformers/pr_17407/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(eZ,"href","/docs/transformers/pr_17407/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Q3,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(Q3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q3,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(rf,"class","relative group"),c(oZ,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rZ,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tZ,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aZ,"href","/docs/transformers/pr_17407/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y3,"id","transformers.FlaxAutoModelForImageClassification"),c(Y3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y3,"href","#transformers.FlaxAutoModelForImageClassification"),c(nf,"class","relative group"),c(nZ,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sZ,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lZ,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iZ,"href","/docs/transformers/pr_17407/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(dZ,"href","/docs/transformers/pr_17407/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rw,"id","transformers.FlaxAutoModelForVision2Seq"),c(rw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rw,"href","#transformers.FlaxAutoModelForVision2Seq"),c(df,"class","relative group"),c(cZ,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fZ,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mZ,"href","/docs/transformers/pr_17407/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gZ,"href","/docs/transformers/pr_17407/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,_){e(document.head,g),b(f,v,_),b(f,p,_),e(p,m),e(m,u),M(d,u,null),e(p,h),e(p,Mo),e(Mo,fi),b(f,pf,_),b(f,rt,_),e(rt,mi),e(rt,gi),e(gi,EA),e(rt,uf),b(f,je,_),b(f,We,_),e(We,hi),e(We,yn),e(yn,CA),e(We,Ln),e(We,xn),e(xn,wA),e(We,pi),e(We,$n),e($n,AA),e(We,ui),b(f,_f,_),M(Ca,f,_),b(f,Qe,_),b(f,Ae,_),e(Ae,z$),e(Ae,_i),e(_i,W$),e(Ae,Q$),b(f,Eo,_),b(f,wa,_),e(wa,H$),e(wa,bf),e(bf,U$),e(wa,dOe),b(f,KNe,_),b(f,bi,_),e(bi,vf),e(vf,soe),M(yA,soe,null),e(bi,cOe),e(bi,loe),e(loe,fOe),b(f,ZNe,_),b(f,kn,_),e(kn,mOe),e(kn,ioe),e(ioe,gOe),e(kn,hOe),e(kn,doe),e(doe,pOe),e(kn,uOe),b(f,eqe,_),M(LA,f,_),b(f,oqe,_),b(f,J$,_),e(J$,_Oe),b(f,rqe,_),M(Ff,f,_),b(f,tqe,_),b(f,vi,_),e(vi,Tf),e(Tf,coe),M(xA,coe,null),e(vi,bOe),e(vi,foe),e(foe,vOe),b(f,aqe,_),b(f,Co,_),M($A,Co,null),e(Co,FOe),e(Co,kA),e(kA,TOe),e(kA,Y$),e(Y$,MOe),e(kA,EOe),e(Co,COe),e(Co,SA),e(SA,wOe),e(SA,moe),e(moe,AOe),e(SA,yOe),e(Co,LOe),e(Co,Er),M(RA,Er,null),e(Er,xOe),e(Er,goe),e(goe,$Oe),e(Er,kOe),e(Er,Fi),e(Fi,SOe),e(Fi,hoe),e(hoe,ROe),e(Fi,POe),e(Fi,poe),e(poe,BOe),e(Fi,IOe),e(Er,NOe),e(Er,A),e(A,Mf),e(Mf,uoe),e(uoe,qOe),e(Mf,jOe),e(Mf,K$),e(K$,DOe),e(Mf,GOe),e(A,OOe),e(A,Ef),e(Ef,_oe),e(_oe,VOe),e(Ef,XOe),e(Ef,Z$),e(Z$,zOe),e(Ef,WOe),e(A,QOe),e(A,Cf),e(Cf,boe),e(boe,HOe),e(Cf,UOe),e(Cf,ek),e(ek,JOe),e(Cf,YOe),e(A,KOe),e(A,wf),e(wf,voe),e(voe,ZOe),e(wf,eVe),e(wf,ok),e(ok,oVe),e(wf,rVe),e(A,tVe),e(A,Af),e(Af,Foe),e(Foe,aVe),e(Af,nVe),e(Af,rk),e(rk,sVe),e(Af,lVe),e(A,iVe),e(A,yf),e(yf,Toe),e(Toe,dVe),e(yf,cVe),e(yf,tk),e(tk,fVe),e(yf,mVe),e(A,gVe),e(A,Lf),e(Lf,Moe),e(Moe,hVe),e(Lf,pVe),e(Lf,ak),e(ak,uVe),e(Lf,_Ve),e(A,bVe),e(A,xf),e(xf,Eoe),e(Eoe,vVe),e(xf,FVe),e(xf,nk),e(nk,TVe),e(xf,MVe),e(A,EVe),e(A,$f),e($f,Coe),e(Coe,CVe),e($f,wVe),e($f,sk),e(sk,AVe),e($f,yVe),e(A,LVe),e(A,kf),e(kf,woe),e(woe,xVe),e(kf,$Ve),e(kf,lk),e(lk,kVe),e(kf,SVe),e(A,RVe),e(A,Sf),e(Sf,Aoe),e(Aoe,PVe),e(Sf,BVe),e(Sf,ik),e(ik,IVe),e(Sf,NVe),e(A,qVe),e(A,Rf),e(Rf,yoe),e(yoe,jVe),e(Rf,DVe),e(Rf,dk),e(dk,GVe),e(Rf,OVe),e(A,VVe),e(A,Pf),e(Pf,Loe),e(Loe,XVe),e(Pf,zVe),e(Pf,ck),e(ck,WVe),e(Pf,QVe),e(A,HVe),e(A,Bf),e(Bf,xoe),e(xoe,UVe),e(Bf,JVe),e(Bf,fk),e(fk,YVe),e(Bf,KVe),e(A,ZVe),e(A,If),e(If,$oe),e($oe,eXe),e(If,oXe),e(If,mk),e(mk,rXe),e(If,tXe),e(A,aXe),e(A,Nf),e(Nf,koe),e(koe,nXe),e(Nf,sXe),e(Nf,gk),e(gk,lXe),e(Nf,iXe),e(A,dXe),e(A,qf),e(qf,Soe),e(Soe,cXe),e(qf,fXe),e(qf,hk),e(hk,mXe),e(qf,gXe),e(A,hXe),e(A,jf),e(jf,Roe),e(Roe,pXe),e(jf,uXe),e(jf,pk),e(pk,_Xe),e(jf,bXe),e(A,vXe),e(A,Df),e(Df,Poe),e(Poe,FXe),e(Df,TXe),e(Df,uk),e(uk,MXe),e(Df,EXe),e(A,CXe),e(A,Gf),e(Gf,Boe),e(Boe,wXe),e(Gf,AXe),e(Gf,_k),e(_k,yXe),e(Gf,LXe),e(A,xXe),e(A,Of),e(Of,Ioe),e(Ioe,$Xe),e(Of,kXe),e(Of,bk),e(bk,SXe),e(Of,RXe),e(A,PXe),e(A,Vf),e(Vf,Noe),e(Noe,BXe),e(Vf,IXe),e(Vf,vk),e(vk,NXe),e(Vf,qXe),e(A,jXe),e(A,Xf),e(Xf,qoe),e(qoe,DXe),e(Xf,GXe),e(Xf,Fk),e(Fk,OXe),e(Xf,VXe),e(A,XXe),e(A,zf),e(zf,joe),e(joe,zXe),e(zf,WXe),e(zf,Tk),e(Tk,QXe),e(zf,HXe),e(A,UXe),e(A,Wf),e(Wf,Doe),e(Doe,JXe),e(Wf,YXe),e(Wf,Mk),e(Mk,KXe),e(Wf,ZXe),e(A,eze),e(A,Qf),e(Qf,Goe),e(Goe,oze),e(Qf,rze),e(Qf,Ek),e(Ek,tze),e(Qf,aze),e(A,nze),e(A,Hf),e(Hf,Ooe),e(Ooe,sze),e(Hf,lze),e(Hf,Ck),e(Ck,ize),e(Hf,dze),e(A,cze),e(A,Uf),e(Uf,Voe),e(Voe,fze),e(Uf,mze),e(Uf,wk),e(wk,gze),e(Uf,hze),e(A,pze),e(A,Jf),e(Jf,Xoe),e(Xoe,uze),e(Jf,_ze),e(Jf,Ak),e(Ak,bze),e(Jf,vze),e(A,Fze),e(A,Yf),e(Yf,zoe),e(zoe,Tze),e(Yf,Mze),e(Yf,yk),e(yk,Eze),e(Yf,Cze),e(A,wze),e(A,Kf),e(Kf,Woe),e(Woe,Aze),e(Kf,yze),e(Kf,Lk),e(Lk,Lze),e(Kf,xze),e(A,$ze),e(A,Zf),e(Zf,Qoe),e(Qoe,kze),e(Zf,Sze),e(Zf,xk),e(xk,Rze),e(Zf,Pze),e(A,Bze),e(A,em),e(em,Hoe),e(Hoe,Ize),e(em,Nze),e(em,$k),e($k,qze),e(em,jze),e(A,Dze),e(A,om),e(om,Uoe),e(Uoe,Gze),e(om,Oze),e(om,kk),e(kk,Vze),e(om,Xze),e(A,zze),e(A,rm),e(rm,Joe),e(Joe,Wze),e(rm,Qze),e(rm,Sk),e(Sk,Hze),e(rm,Uze),e(A,Jze),e(A,tm),e(tm,Yoe),e(Yoe,Yze),e(tm,Kze),e(tm,Rk),e(Rk,Zze),e(tm,eWe),e(A,oWe),e(A,am),e(am,Koe),e(Koe,rWe),e(am,tWe),e(am,Pk),e(Pk,aWe),e(am,nWe),e(A,sWe),e(A,nm),e(nm,Zoe),e(Zoe,lWe),e(nm,iWe),e(nm,Bk),e(Bk,dWe),e(nm,cWe),e(A,fWe),e(A,sm),e(sm,ere),e(ere,mWe),e(sm,gWe),e(sm,Ik),e(Ik,hWe),e(sm,pWe),e(A,uWe),e(A,lm),e(lm,ore),e(ore,_We),e(lm,bWe),e(lm,Nk),e(Nk,vWe),e(lm,FWe),e(A,TWe),e(A,im),e(im,rre),e(rre,MWe),e(im,EWe),e(im,qk),e(qk,CWe),e(im,wWe),e(A,AWe),e(A,dm),e(dm,tre),e(tre,yWe),e(dm,LWe),e(dm,jk),e(jk,xWe),e(dm,$We),e(A,kWe),e(A,cm),e(cm,are),e(are,SWe),e(cm,RWe),e(cm,Dk),e(Dk,PWe),e(cm,BWe),e(A,IWe),e(A,fm),e(fm,nre),e(nre,NWe),e(fm,qWe),e(fm,Gk),e(Gk,jWe),e(fm,DWe),e(A,GWe),e(A,mm),e(mm,sre),e(sre,OWe),e(mm,VWe),e(mm,Ok),e(Ok,XWe),e(mm,zWe),e(A,WWe),e(A,gm),e(gm,lre),e(lre,QWe),e(gm,HWe),e(gm,Vk),e(Vk,UWe),e(gm,JWe),e(A,YWe),e(A,hm),e(hm,ire),e(ire,KWe),e(hm,ZWe),e(hm,Xk),e(Xk,eQe),e(hm,oQe),e(A,rQe),e(A,pm),e(pm,dre),e(dre,tQe),e(pm,aQe),e(pm,zk),e(zk,nQe),e(pm,sQe),e(A,lQe),e(A,um),e(um,cre),e(cre,iQe),e(um,dQe),e(um,Wk),e(Wk,cQe),e(um,fQe),e(A,mQe),e(A,_m),e(_m,fre),e(fre,gQe),e(_m,hQe),e(_m,Qk),e(Qk,pQe),e(_m,uQe),e(A,_Qe),e(A,bm),e(bm,mre),e(mre,bQe),e(bm,vQe),e(bm,Hk),e(Hk,FQe),e(bm,TQe),e(A,MQe),e(A,vm),e(vm,gre),e(gre,EQe),e(vm,CQe),e(vm,Uk),e(Uk,wQe),e(vm,AQe),e(A,yQe),e(A,Fm),e(Fm,hre),e(hre,LQe),e(Fm,xQe),e(Fm,Jk),e(Jk,$Qe),e(Fm,kQe),e(A,SQe),e(A,Tm),e(Tm,pre),e(pre,RQe),e(Tm,PQe),e(Tm,Yk),e(Yk,BQe),e(Tm,IQe),e(A,NQe),e(A,Mm),e(Mm,ure),e(ure,qQe),e(Mm,jQe),e(Mm,Kk),e(Kk,DQe),e(Mm,GQe),e(A,OQe),e(A,Em),e(Em,_re),e(_re,VQe),e(Em,XQe),e(Em,Zk),e(Zk,zQe),e(Em,WQe),e(A,QQe),e(A,Cm),e(Cm,bre),e(bre,HQe),e(Cm,UQe),e(Cm,eS),e(eS,JQe),e(Cm,YQe),e(A,KQe),e(A,wm),e(wm,vre),e(vre,ZQe),e(wm,eHe),e(wm,oS),e(oS,oHe),e(wm,rHe),e(A,tHe),e(A,Am),e(Am,Fre),e(Fre,aHe),e(Am,nHe),e(Am,rS),e(rS,sHe),e(Am,lHe),e(A,iHe),e(A,ym),e(ym,Tre),e(Tre,dHe),e(ym,cHe),e(ym,tS),e(tS,fHe),e(ym,mHe),e(A,gHe),e(A,Lm),e(Lm,Mre),e(Mre,hHe),e(Lm,pHe),e(Lm,aS),e(aS,uHe),e(Lm,_He),e(A,bHe),e(A,xm),e(xm,Ere),e(Ere,vHe),e(xm,FHe),e(xm,nS),e(nS,THe),e(xm,MHe),e(A,EHe),e(A,$m),e($m,Cre),e(Cre,CHe),e($m,wHe),e($m,sS),e(sS,AHe),e($m,yHe),e(A,LHe),e(A,km),e(km,wre),e(wre,xHe),e(km,$He),e(km,lS),e(lS,kHe),e(km,SHe),e(A,RHe),e(A,Sm),e(Sm,Are),e(Are,PHe),e(Sm,BHe),e(Sm,iS),e(iS,IHe),e(Sm,NHe),e(A,qHe),e(A,Rm),e(Rm,yre),e(yre,jHe),e(Rm,DHe),e(Rm,dS),e(dS,GHe),e(Rm,OHe),e(A,VHe),e(A,Pm),e(Pm,Lre),e(Lre,XHe),e(Pm,zHe),e(Pm,cS),e(cS,WHe),e(Pm,QHe),e(A,HHe),e(A,Bm),e(Bm,xre),e(xre,UHe),e(Bm,JHe),e(Bm,fS),e(fS,YHe),e(Bm,KHe),e(A,ZHe),e(A,Im),e(Im,$re),e($re,eUe),e(Im,oUe),e(Im,mS),e(mS,rUe),e(Im,tUe),e(A,aUe),e(A,Nm),e(Nm,kre),e(kre,nUe),e(Nm,sUe),e(Nm,gS),e(gS,lUe),e(Nm,iUe),e(A,dUe),e(A,qm),e(qm,Sre),e(Sre,cUe),e(qm,fUe),e(qm,hS),e(hS,mUe),e(qm,gUe),e(A,hUe),e(A,jm),e(jm,Rre),e(Rre,pUe),e(jm,uUe),e(jm,pS),e(pS,_Ue),e(jm,bUe),e(A,vUe),e(A,Dm),e(Dm,Pre),e(Pre,FUe),e(Dm,TUe),e(Dm,uS),e(uS,MUe),e(Dm,EUe),e(A,CUe),e(A,Gm),e(Gm,Bre),e(Bre,wUe),e(Gm,AUe),e(Gm,_S),e(_S,yUe),e(Gm,LUe),e(A,xUe),e(A,Om),e(Om,Ire),e(Ire,$Ue),e(Om,kUe),e(Om,bS),e(bS,SUe),e(Om,RUe),e(A,PUe),e(A,Vm),e(Vm,Nre),e(Nre,BUe),e(Vm,IUe),e(Vm,vS),e(vS,NUe),e(Vm,qUe),e(A,jUe),e(A,Xm),e(Xm,qre),e(qre,DUe),e(Xm,GUe),e(Xm,FS),e(FS,OUe),e(Xm,VUe),e(A,XUe),e(A,zm),e(zm,jre),e(jre,zUe),e(zm,WUe),e(zm,TS),e(TS,QUe),e(zm,HUe),e(A,UUe),e(A,Wm),e(Wm,Dre),e(Dre,JUe),e(Wm,YUe),e(Wm,MS),e(MS,KUe),e(Wm,ZUe),e(A,eJe),e(A,Qm),e(Qm,Gre),e(Gre,oJe),e(Qm,rJe),e(Qm,ES),e(ES,tJe),e(Qm,aJe),e(A,nJe),e(A,Hm),e(Hm,Ore),e(Ore,sJe),e(Hm,lJe),e(Hm,CS),e(CS,iJe),e(Hm,dJe),e(A,cJe),e(A,Um),e(Um,Vre),e(Vre,fJe),e(Um,mJe),e(Um,wS),e(wS,gJe),e(Um,hJe),e(A,pJe),e(A,Jm),e(Jm,Xre),e(Xre,uJe),e(Jm,_Je),e(Jm,AS),e(AS,bJe),e(Jm,vJe),e(A,FJe),e(A,Ym),e(Ym,zre),e(zre,TJe),e(Ym,MJe),e(Ym,yS),e(yS,EJe),e(Ym,CJe),e(A,wJe),e(A,Km),e(Km,Wre),e(Wre,AJe),e(Km,yJe),e(Km,LS),e(LS,LJe),e(Km,xJe),e(A,$Je),e(A,Zm),e(Zm,Qre),e(Qre,kJe),e(Zm,SJe),e(Zm,xS),e(xS,RJe),e(Zm,PJe),e(A,BJe),e(A,eg),e(eg,Hre),e(Hre,IJe),e(eg,NJe),e(eg,$S),e($S,qJe),e(eg,jJe),e(A,DJe),e(A,og),e(og,Ure),e(Ure,GJe),e(og,OJe),e(og,kS),e(kS,VJe),e(og,XJe),e(A,zJe),e(A,rg),e(rg,Jre),e(Jre,WJe),e(rg,QJe),e(rg,SS),e(SS,HJe),e(rg,UJe),e(A,JJe),e(A,tg),e(tg,Yre),e(Yre,YJe),e(tg,KJe),e(tg,RS),e(RS,ZJe),e(tg,eYe),e(A,oYe),e(A,ag),e(ag,Kre),e(Kre,rYe),e(ag,tYe),e(ag,PS),e(PS,aYe),e(ag,nYe),e(A,sYe),e(A,ng),e(ng,Zre),e(Zre,lYe),e(ng,iYe),e(ng,BS),e(BS,dYe),e(ng,cYe),e(A,fYe),e(A,sg),e(sg,ete),e(ete,mYe),e(sg,gYe),e(sg,IS),e(IS,hYe),e(sg,pYe),e(A,uYe),e(A,lg),e(lg,ote),e(ote,_Ye),e(lg,bYe),e(lg,NS),e(NS,vYe),e(lg,FYe),e(A,TYe),e(A,ig),e(ig,rte),e(rte,MYe),e(ig,EYe),e(ig,qS),e(qS,CYe),e(ig,wYe),e(A,AYe),e(A,dg),e(dg,tte),e(tte,yYe),e(dg,LYe),e(dg,jS),e(jS,xYe),e(dg,$Ye),e(A,kYe),e(A,cg),e(cg,ate),e(ate,SYe),e(cg,RYe),e(cg,DS),e(DS,PYe),e(cg,BYe),e(A,IYe),e(A,fg),e(fg,nte),e(nte,NYe),e(fg,qYe),e(fg,GS),e(GS,jYe),e(fg,DYe),e(A,GYe),e(A,mg),e(mg,ste),e(ste,OYe),e(mg,VYe),e(mg,OS),e(OS,XYe),e(mg,zYe),e(A,WYe),e(A,gg),e(gg,lte),e(lte,QYe),e(gg,HYe),e(gg,VS),e(VS,UYe),e(gg,JYe),e(A,YYe),e(A,hg),e(hg,ite),e(ite,KYe),e(hg,ZYe),e(hg,XS),e(XS,eKe),e(hg,oKe),e(A,rKe),e(A,pg),e(pg,dte),e(dte,tKe),e(pg,aKe),e(pg,zS),e(zS,nKe),e(pg,sKe),e(A,lKe),e(A,ug),e(ug,cte),e(cte,iKe),e(ug,dKe),e(ug,WS),e(WS,cKe),e(ug,fKe),e(A,mKe),e(A,_g),e(_g,fte),e(fte,gKe),e(_g,hKe),e(_g,QS),e(QS,pKe),e(_g,uKe),e(A,_Ke),e(A,bg),e(bg,mte),e(mte,bKe),e(bg,vKe),e(bg,HS),e(HS,FKe),e(bg,TKe),e(A,MKe),e(A,vg),e(vg,gte),e(gte,EKe),e(vg,CKe),e(vg,US),e(US,wKe),e(vg,AKe),e(A,yKe),e(A,Fg),e(Fg,hte),e(hte,LKe),e(Fg,xKe),e(Fg,JS),e(JS,$Ke),e(Fg,kKe),e(A,SKe),e(A,Tg),e(Tg,pte),e(pte,RKe),e(Tg,PKe),e(Tg,YS),e(YS,BKe),e(Tg,IKe),e(A,NKe),e(A,Mg),e(Mg,ute),e(ute,qKe),e(Mg,jKe),e(Mg,KS),e(KS,DKe),e(Mg,GKe),e(Er,OKe),M(Eg,Er,null),e(Co,VKe),e(Co,Cg),M(PA,Cg,null),e(Cg,XKe),e(Cg,_te),e(_te,zKe),b(f,nqe,_),b(f,Ti,_),e(Ti,wg),e(wg,bte),M(BA,bte,null),e(Ti,WKe),e(Ti,vte),e(vte,QKe),b(f,sqe,_),b(f,wo,_),M(IA,wo,null),e(wo,HKe),e(wo,NA),e(NA,UKe),e(NA,ZS),e(ZS,JKe),e(NA,YKe),e(wo,KKe),e(wo,qA),e(qA,ZKe),e(qA,Fte),e(Fte,eZe),e(qA,oZe),e(wo,rZe),e(wo,Cr),M(jA,Cr,null),e(Cr,tZe),e(Cr,Tte),e(Tte,aZe),e(Cr,nZe),e(Cr,Aa),e(Aa,sZe),e(Aa,Mte),e(Mte,lZe),e(Aa,iZe),e(Aa,Ete),e(Ete,dZe),e(Aa,cZe),e(Aa,Cte),e(Cte,fZe),e(Aa,mZe),e(Cr,gZe),e(Cr,k),e(k,Sn),e(Sn,wte),e(wte,hZe),e(Sn,pZe),e(Sn,eR),e(eR,uZe),e(Sn,_Ze),e(Sn,oR),e(oR,bZe),e(Sn,vZe),e(k,FZe),e(k,Rn),e(Rn,Ate),e(Ate,TZe),e(Rn,MZe),e(Rn,rR),e(rR,EZe),e(Rn,CZe),e(Rn,tR),e(tR,wZe),e(Rn,AZe),e(k,yZe),e(k,Pn),e(Pn,yte),e(yte,LZe),e(Pn,xZe),e(Pn,aR),e(aR,$Ze),e(Pn,kZe),e(Pn,nR),e(nR,SZe),e(Pn,RZe),e(k,PZe),e(k,Ag),e(Ag,Lte),e(Lte,BZe),e(Ag,IZe),e(Ag,sR),e(sR,NZe),e(Ag,qZe),e(k,jZe),e(k,Bn),e(Bn,xte),e(xte,DZe),e(Bn,GZe),e(Bn,lR),e(lR,OZe),e(Bn,VZe),e(Bn,iR),e(iR,XZe),e(Bn,zZe),e(k,WZe),e(k,yg),e(yg,$te),e($te,QZe),e(yg,HZe),e(yg,dR),e(dR,UZe),e(yg,JZe),e(k,YZe),e(k,Lg),e(Lg,kte),e(kte,KZe),e(Lg,ZZe),e(Lg,cR),e(cR,eeo),e(Lg,oeo),e(k,reo),e(k,xg),e(xg,Ste),e(Ste,teo),e(xg,aeo),e(xg,fR),e(fR,neo),e(xg,seo),e(k,leo),e(k,In),e(In,Rte),e(Rte,ieo),e(In,deo),e(In,mR),e(mR,ceo),e(In,feo),e(In,gR),e(gR,meo),e(In,geo),e(k,heo),e(k,Nn),e(Nn,Pte),e(Pte,peo),e(Nn,ueo),e(Nn,hR),e(hR,_eo),e(Nn,beo),e(Nn,pR),e(pR,veo),e(Nn,Feo),e(k,Teo),e(k,qn),e(qn,Bte),e(Bte,Meo),e(qn,Eeo),e(qn,uR),e(uR,Ceo),e(qn,weo),e(qn,_R),e(_R,Aeo),e(qn,yeo),e(k,Leo),e(k,$g),e($g,Ite),e(Ite,xeo),e($g,$eo),e($g,bR),e(bR,keo),e($g,Seo),e(k,Reo),e(k,kg),e(kg,Nte),e(Nte,Peo),e(kg,Beo),e(kg,vR),e(vR,Ieo),e(kg,Neo),e(k,qeo),e(k,jn),e(jn,qte),e(qte,jeo),e(jn,Deo),e(jn,FR),e(FR,Geo),e(jn,Oeo),e(jn,TR),e(TR,Veo),e(jn,Xeo),e(k,zeo),e(k,Sg),e(Sg,jte),e(jte,Weo),e(Sg,Qeo),e(Sg,MR),e(MR,Heo),e(Sg,Ueo),e(k,Jeo),e(k,Dn),e(Dn,Dte),e(Dte,Yeo),e(Dn,Keo),e(Dn,ER),e(ER,Zeo),e(Dn,eoo),e(Dn,CR),e(CR,ooo),e(Dn,roo),e(k,too),e(k,Gn),e(Gn,Gte),e(Gte,aoo),e(Gn,noo),e(Gn,wR),e(wR,soo),e(Gn,loo),e(Gn,AR),e(AR,ioo),e(Gn,doo),e(k,coo),e(k,On),e(On,Ote),e(Ote,foo),e(On,moo),e(On,yR),e(yR,goo),e(On,hoo),e(On,LR),e(LR,poo),e(On,uoo),e(k,_oo),e(k,Rg),e(Rg,Vte),e(Vte,boo),e(Rg,voo),e(Rg,xR),e(xR,Foo),e(Rg,Too),e(k,Moo),e(k,Vn),e(Vn,Xte),e(Xte,Eoo),e(Vn,Coo),e(Vn,$R),e($R,woo),e(Vn,Aoo),e(Vn,kR),e(kR,yoo),e(Vn,Loo),e(k,xoo),e(k,Xn),e(Xn,zte),e(zte,$oo),e(Xn,koo),e(Xn,SR),e(SR,Soo),e(Xn,Roo),e(Xn,RR),e(RR,Poo),e(Xn,Boo),e(k,Ioo),e(k,zn),e(zn,Wte),e(Wte,Noo),e(zn,qoo),e(zn,PR),e(PR,joo),e(zn,Doo),e(zn,BR),e(BR,Goo),e(zn,Ooo),e(k,Voo),e(k,Wn),e(Wn,Qte),e(Qte,Xoo),e(Wn,zoo),e(Wn,IR),e(IR,Woo),e(Wn,Qoo),e(Wn,NR),e(NR,Hoo),e(Wn,Uoo),e(k,Joo),e(k,Qn),e(Qn,Hte),e(Hte,Yoo),e(Qn,Koo),e(Qn,qR),e(qR,Zoo),e(Qn,ero),e(Qn,jR),e(jR,oro),e(Qn,rro),e(k,tro),e(k,Hn),e(Hn,Ute),e(Ute,aro),e(Hn,nro),e(Hn,DR),e(DR,sro),e(Hn,lro),e(Hn,GR),e(GR,iro),e(Hn,dro),e(k,cro),e(k,Pg),e(Pg,Jte),e(Jte,fro),e(Pg,mro),e(Pg,OR),e(OR,gro),e(Pg,hro),e(k,pro),e(k,Un),e(Un,Yte),e(Yte,uro),e(Un,_ro),e(Un,VR),e(VR,bro),e(Un,vro),e(Un,XR),e(XR,Fro),e(Un,Tro),e(k,Mro),e(k,Bg),e(Bg,Kte),e(Kte,Ero),e(Bg,Cro),e(Bg,zR),e(zR,wro),e(Bg,Aro),e(k,yro),e(k,Jn),e(Jn,Zte),e(Zte,Lro),e(Jn,xro),e(Jn,WR),e(WR,$ro),e(Jn,kro),e(Jn,QR),e(QR,Sro),e(Jn,Rro),e(k,Pro),e(k,Yn),e(Yn,eae),e(eae,Bro),e(Yn,Iro),e(Yn,HR),e(HR,Nro),e(Yn,qro),e(Yn,UR),e(UR,jro),e(Yn,Dro),e(k,Gro),e(k,Kn),e(Kn,oae),e(oae,Oro),e(Kn,Vro),e(Kn,JR),e(JR,Xro),e(Kn,zro),e(Kn,YR),e(YR,Wro),e(Kn,Qro),e(k,Hro),e(k,Ig),e(Ig,rae),e(rae,Uro),e(Ig,Jro),e(Ig,KR),e(KR,Yro),e(Ig,Kro),e(k,Zro),e(k,Zn),e(Zn,tae),e(tae,eto),e(Zn,oto),e(Zn,ZR),e(ZR,rto),e(Zn,tto),e(Zn,eP),e(eP,ato),e(Zn,nto),e(k,sto),e(k,es),e(es,aae),e(aae,lto),e(es,ito),e(es,oP),e(oP,dto),e(es,cto),e(es,rP),e(rP,fto),e(es,mto),e(k,gto),e(k,Ng),e(Ng,nae),e(nae,hto),e(Ng,pto),e(Ng,tP),e(tP,uto),e(Ng,_to),e(k,bto),e(k,os),e(os,sae),e(sae,vto),e(os,Fto),e(os,aP),e(aP,Tto),e(os,Mto),e(os,nP),e(nP,Eto),e(os,Cto),e(k,wto),e(k,rs),e(rs,lae),e(lae,Ato),e(rs,yto),e(rs,sP),e(sP,Lto),e(rs,xto),e(rs,lP),e(lP,$to),e(rs,kto),e(k,Sto),e(k,ts),e(ts,iae),e(iae,Rto),e(ts,Pto),e(ts,iP),e(iP,Bto),e(ts,Ito),e(ts,dP),e(dP,Nto),e(ts,qto),e(k,jto),e(k,as),e(as,dae),e(dae,Dto),e(as,Gto),e(as,cP),e(cP,Oto),e(as,Vto),e(as,fP),e(fP,Xto),e(as,zto),e(k,Wto),e(k,ns),e(ns,cae),e(cae,Qto),e(ns,Hto),e(ns,mP),e(mP,Uto),e(ns,Jto),e(ns,gP),e(gP,Yto),e(ns,Kto),e(k,Zto),e(k,ss),e(ss,fae),e(fae,eao),e(ss,oao),e(ss,hP),e(hP,rao),e(ss,tao),e(ss,pP),e(pP,aao),e(ss,nao),e(k,sao),e(k,ls),e(ls,mae),e(mae,lao),e(ls,iao),e(ls,uP),e(uP,dao),e(ls,cao),e(ls,_P),e(_P,fao),e(ls,mao),e(k,gao),e(k,qg),e(qg,gae),e(gae,hao),e(qg,pao),e(qg,bP),e(bP,uao),e(qg,_ao),e(k,bao),e(k,is),e(is,hae),e(hae,vao),e(is,Fao),e(is,vP),e(vP,Tao),e(is,Mao),e(is,FP),e(FP,Eao),e(is,Cao),e(k,wao),e(k,jg),e(jg,pae),e(pae,Aao),e(jg,yao),e(jg,TP),e(TP,Lao),e(jg,xao),e(k,$ao),e(k,Dg),e(Dg,uae),e(uae,kao),e(Dg,Sao),e(Dg,MP),e(MP,Rao),e(Dg,Pao),e(k,Bao),e(k,ds),e(ds,_ae),e(_ae,Iao),e(ds,Nao),e(ds,EP),e(EP,qao),e(ds,jao),e(ds,CP),e(CP,Dao),e(ds,Gao),e(k,Oao),e(k,cs),e(cs,bae),e(bae,Vao),e(cs,Xao),e(cs,wP),e(wP,zao),e(cs,Wao),e(cs,AP),e(AP,Qao),e(cs,Hao),e(k,Uao),e(k,fs),e(fs,vae),e(vae,Jao),e(fs,Yao),e(fs,yP),e(yP,Kao),e(fs,Zao),e(fs,LP),e(LP,eno),e(fs,ono),e(k,rno),e(k,Gg),e(Gg,Fae),e(Fae,tno),e(Gg,ano),e(Gg,xP),e(xP,nno),e(Gg,sno),e(k,lno),e(k,ms),e(ms,Tae),e(Tae,ino),e(ms,dno),e(ms,$P),e($P,cno),e(ms,fno),e(ms,kP),e(kP,mno),e(ms,gno),e(k,hno),e(k,gs),e(gs,Mae),e(Mae,pno),e(gs,uno),e(gs,SP),e(SP,_no),e(gs,bno),e(gs,RP),e(RP,vno),e(gs,Fno),e(k,Tno),e(k,hs),e(hs,Eae),e(Eae,Mno),e(hs,Eno),e(hs,PP),e(PP,Cno),e(hs,wno),e(hs,BP),e(BP,Ano),e(hs,yno),e(k,Lno),e(k,ps),e(ps,Cae),e(Cae,xno),e(ps,$no),e(ps,IP),e(IP,kno),e(ps,Sno),e(ps,NP),e(NP,Rno),e(ps,Pno),e(k,Bno),e(k,us),e(us,wae),e(wae,Ino),e(us,Nno),e(us,qP),e(qP,qno),e(us,jno),e(us,jP),e(jP,Dno),e(us,Gno),e(k,Ono),e(k,Og),e(Og,Aae),e(Aae,Vno),e(Og,Xno),e(Og,DP),e(DP,zno),e(Og,Wno),e(k,Qno),e(k,_s),e(_s,yae),e(yae,Hno),e(_s,Uno),e(_s,GP),e(GP,Jno),e(_s,Yno),e(_s,OP),e(OP,Kno),e(_s,Zno),e(k,eso),e(k,Vg),e(Vg,Lae),e(Lae,oso),e(Vg,rso),e(Vg,VP),e(VP,tso),e(Vg,aso),e(k,nso),e(k,Xg),e(Xg,xae),e(xae,sso),e(Xg,lso),e(Xg,XP),e(XP,iso),e(Xg,dso),e(k,cso),e(k,zg),e(zg,$ae),e($ae,fso),e(zg,mso),e(zg,zP),e(zP,gso),e(zg,hso),e(k,pso),e(k,Wg),e(Wg,kae),e(kae,uso),e(Wg,_so),e(Wg,WP),e(WP,bso),e(Wg,vso),e(k,Fso),e(k,bs),e(bs,Sae),e(Sae,Tso),e(bs,Mso),e(bs,QP),e(QP,Eso),e(bs,Cso),e(bs,HP),e(HP,wso),e(bs,Aso),e(k,yso),e(k,Qg),e(Qg,Rae),e(Rae,Lso),e(Qg,xso),e(Qg,UP),e(UP,$so),e(Qg,kso),e(k,Sso),e(k,vs),e(vs,Pae),e(Pae,Rso),e(vs,Pso),e(vs,JP),e(JP,Bso),e(vs,Iso),e(vs,YP),e(YP,Nso),e(vs,qso),e(k,jso),e(k,Fs),e(Fs,Bae),e(Bae,Dso),e(Fs,Gso),e(Fs,KP),e(KP,Oso),e(Fs,Vso),e(Fs,ZP),e(ZP,Xso),e(Fs,zso),e(k,Wso),e(k,Ts),e(Ts,Iae),e(Iae,Qso),e(Ts,Hso),e(Ts,eB),e(eB,Uso),e(Ts,Jso),e(Ts,oB),e(oB,Yso),e(Ts,Kso),e(k,Zso),e(k,Ms),e(Ms,Nae),e(Nae,elo),e(Ms,olo),e(Ms,rB),e(rB,rlo),e(Ms,tlo),e(Ms,tB),e(tB,alo),e(Ms,nlo),e(k,slo),e(k,Es),e(Es,qae),e(qae,llo),e(Es,ilo),e(Es,aB),e(aB,dlo),e(Es,clo),e(Es,nB),e(nB,flo),e(Es,mlo),e(k,glo),e(k,Cs),e(Cs,jae),e(jae,hlo),e(Cs,plo),e(Cs,sB),e(sB,ulo),e(Cs,_lo),e(Cs,lB),e(lB,blo),e(Cs,vlo),e(k,Flo),e(k,Hg),e(Hg,Dae),e(Dae,Tlo),e(Hg,Mlo),e(Hg,iB),e(iB,Elo),e(Hg,Clo),e(k,wlo),e(k,Ug),e(Ug,Gae),e(Gae,Alo),e(Ug,ylo),e(Ug,dB),e(dB,Llo),e(Ug,xlo),e(k,$lo),e(k,ws),e(ws,Oae),e(Oae,klo),e(ws,Slo),e(ws,cB),e(cB,Rlo),e(ws,Plo),e(ws,fB),e(fB,Blo),e(ws,Ilo),e(k,Nlo),e(k,As),e(As,Vae),e(Vae,qlo),e(As,jlo),e(As,mB),e(mB,Dlo),e(As,Glo),e(As,gB),e(gB,Olo),e(As,Vlo),e(k,Xlo),e(k,ys),e(ys,Xae),e(Xae,zlo),e(ys,Wlo),e(ys,hB),e(hB,Qlo),e(ys,Hlo),e(ys,pB),e(pB,Ulo),e(ys,Jlo),e(k,Ylo),e(k,Jg),e(Jg,zae),e(zae,Klo),e(Jg,Zlo),e(Jg,uB),e(uB,eio),e(Jg,oio),e(k,rio),e(k,Yg),e(Yg,Wae),e(Wae,tio),e(Yg,aio),e(Yg,_B),e(_B,nio),e(Yg,sio),e(k,lio),e(k,Kg),e(Kg,Qae),e(Qae,iio),e(Kg,dio),e(Kg,bB),e(bB,cio),e(Kg,fio),e(k,mio),e(k,Ls),e(Ls,Hae),e(Hae,gio),e(Ls,hio),e(Ls,vB),e(vB,pio),e(Ls,uio),e(Ls,FB),e(FB,_io),e(Ls,bio),e(k,vio),e(k,Zg),e(Zg,Uae),e(Uae,Fio),e(Zg,Tio),e(Zg,TB),e(TB,Mio),e(Zg,Eio),e(k,Cio),e(k,eh),e(eh,Jae),e(Jae,wio),e(eh,Aio),e(eh,MB),e(MB,yio),e(eh,Lio),e(k,xio),e(k,oh),e(oh,Yae),e(Yae,$io),e(oh,kio),e(oh,EB),e(EB,Sio),e(oh,Rio),e(k,Pio),e(k,xs),e(xs,Kae),e(Kae,Bio),e(xs,Iio),e(xs,CB),e(CB,Nio),e(xs,qio),e(xs,wB),e(wB,jio),e(xs,Dio),e(k,Gio),e(k,rh),e(rh,Zae),e(Zae,Oio),e(rh,Vio),e(rh,AB),e(AB,Xio),e(rh,zio),e(k,Wio),e(k,th),e(th,ene),e(ene,Qio),e(th,Hio),e(th,yB),e(yB,Uio),e(th,Jio),e(k,Yio),e(k,$s),e($s,one),e(one,Kio),e($s,Zio),e($s,LB),e(LB,edo),e($s,odo),e($s,xB),e(xB,rdo),e($s,tdo),e(k,ado),e(k,ks),e(ks,rne),e(rne,ndo),e(ks,sdo),e(ks,$B),e($B,ldo),e(ks,ido),e(ks,kB),e(kB,ddo),e(ks,cdo),e(k,fdo),e(k,Ss),e(Ss,tne),e(tne,mdo),e(Ss,gdo),e(Ss,SB),e(SB,hdo),e(Ss,pdo),e(Ss,RB),e(RB,udo),e(Ss,_do),e(k,bdo),e(k,Rs),e(Rs,ane),e(ane,vdo),e(Rs,Fdo),e(Rs,PB),e(PB,Tdo),e(Rs,Mdo),e(Rs,BB),e(BB,Edo),e(Rs,Cdo),e(Cr,wdo),M(ah,Cr,null),e(wo,Ado),e(wo,nh),M(DA,nh,null),e(nh,ydo),e(nh,nne),e(nne,Ldo),b(f,lqe,_),b(f,Mi,_),e(Mi,sh),e(sh,sne),M(GA,sne,null),e(Mi,xdo),e(Mi,lne),e(lne,$do),b(f,iqe,_),b(f,Ao,_),M(OA,Ao,null),e(Ao,kdo),e(Ao,VA),e(VA,Sdo),e(VA,IB),e(IB,Rdo),e(VA,Pdo),e(Ao,Bdo),e(Ao,XA),e(XA,Ido),e(XA,ine),e(ine,Ndo),e(XA,qdo),e(Ao,jdo),e(Ao,He),M(zA,He,null),e(He,Ddo),e(He,dne),e(dne,Gdo),e(He,Odo),e(He,ya),e(ya,Vdo),e(ya,cne),e(cne,Xdo),e(ya,zdo),e(ya,fne),e(fne,Wdo),e(ya,Qdo),e(ya,mne),e(mne,Hdo),e(ya,Udo),e(He,Jdo),e(He,Y),e(Y,lh),e(lh,gne),e(gne,Ydo),e(lh,Kdo),e(lh,NB),e(NB,Zdo),e(lh,eco),e(Y,oco),e(Y,ih),e(ih,hne),e(hne,rco),e(ih,tco),e(ih,qB),e(qB,aco),e(ih,nco),e(Y,sco),e(Y,dh),e(dh,pne),e(pne,lco),e(dh,ico),e(dh,jB),e(jB,dco),e(dh,cco),e(Y,fco),e(Y,ch),e(ch,une),e(une,mco),e(ch,gco),e(ch,DB),e(DB,hco),e(ch,pco),e(Y,uco),e(Y,fh),e(fh,_ne),e(_ne,_co),e(fh,bco),e(fh,GB),e(GB,vco),e(fh,Fco),e(Y,Tco),e(Y,mh),e(mh,bne),e(bne,Mco),e(mh,Eco),e(mh,OB),e(OB,Cco),e(mh,wco),e(Y,Aco),e(Y,gh),e(gh,vne),e(vne,yco),e(gh,Lco),e(gh,VB),e(VB,xco),e(gh,$co),e(Y,kco),e(Y,hh),e(hh,Fne),e(Fne,Sco),e(hh,Rco),e(hh,XB),e(XB,Pco),e(hh,Bco),e(Y,Ico),e(Y,ph),e(ph,Tne),e(Tne,Nco),e(ph,qco),e(ph,zB),e(zB,jco),e(ph,Dco),e(Y,Gco),e(Y,uh),e(uh,Mne),e(Mne,Oco),e(uh,Vco),e(uh,WB),e(WB,Xco),e(uh,zco),e(Y,Wco),e(Y,_h),e(_h,Ene),e(Ene,Qco),e(_h,Hco),e(_h,QB),e(QB,Uco),e(_h,Jco),e(Y,Yco),e(Y,bh),e(bh,Cne),e(Cne,Kco),e(bh,Zco),e(bh,HB),e(HB,efo),e(bh,ofo),e(Y,rfo),e(Y,vh),e(vh,wne),e(wne,tfo),e(vh,afo),e(vh,UB),e(UB,nfo),e(vh,sfo),e(Y,lfo),e(Y,Fh),e(Fh,Ane),e(Ane,ifo),e(Fh,dfo),e(Fh,JB),e(JB,cfo),e(Fh,ffo),e(Y,mfo),e(Y,Th),e(Th,yne),e(yne,gfo),e(Th,hfo),e(Th,YB),e(YB,pfo),e(Th,ufo),e(Y,_fo),e(Y,Mh),e(Mh,Lne),e(Lne,bfo),e(Mh,vfo),e(Mh,KB),e(KB,Ffo),e(Mh,Tfo),e(Y,Mfo),e(Y,Eh),e(Eh,xne),e(xne,Efo),e(Eh,Cfo),e(Eh,ZB),e(ZB,wfo),e(Eh,Afo),e(Y,yfo),e(Y,Ch),e(Ch,$ne),e($ne,Lfo),e(Ch,xfo),e(Ch,eI),e(eI,$fo),e(Ch,kfo),e(Y,Sfo),e(Y,wh),e(wh,kne),e(kne,Rfo),e(wh,Pfo),e(wh,oI),e(oI,Bfo),e(wh,Ifo),e(Y,Nfo),e(Y,Ah),e(Ah,Sne),e(Sne,qfo),e(Ah,jfo),e(Ah,rI),e(rI,Dfo),e(Ah,Gfo),e(Y,Ofo),e(Y,yh),e(yh,Rne),e(Rne,Vfo),e(yh,Xfo),e(yh,tI),e(tI,zfo),e(yh,Wfo),e(Y,Qfo),e(Y,Lh),e(Lh,Pne),e(Pne,Hfo),e(Lh,Ufo),e(Lh,aI),e(aI,Jfo),e(Lh,Yfo),e(Y,Kfo),e(Y,xh),e(xh,Bne),e(Bne,Zfo),e(xh,emo),e(xh,nI),e(nI,omo),e(xh,rmo),e(Y,tmo),e(Y,$h),e($h,Ine),e(Ine,amo),e($h,nmo),e($h,sI),e(sI,smo),e($h,lmo),e(Y,imo),e(Y,kh),e(kh,Nne),e(Nne,dmo),e(kh,cmo),e(kh,lI),e(lI,fmo),e(kh,mmo),e(Y,gmo),e(Y,Sh),e(Sh,qne),e(qne,hmo),e(Sh,pmo),e(Sh,iI),e(iI,umo),e(Sh,_mo),e(Y,bmo),e(Y,Rh),e(Rh,jne),e(jne,vmo),e(Rh,Fmo),e(Rh,dI),e(dI,Tmo),e(Rh,Mmo),e(Y,Emo),e(Y,Ph),e(Ph,Dne),e(Dne,Cmo),e(Ph,wmo),e(Ph,cI),e(cI,Amo),e(Ph,ymo),e(Y,Lmo),e(Y,Bh),e(Bh,Gne),e(Gne,xmo),e(Bh,$mo),e(Bh,fI),e(fI,kmo),e(Bh,Smo),e(He,Rmo),M(Ih,He,null),e(He,Pmo),M(Nh,He,null),e(Ao,Bmo),e(Ao,qh),M(WA,qh,null),e(qh,Imo),e(qh,One),e(One,Nmo),b(f,dqe,_),b(f,Ei,_),e(Ei,jh),e(jh,Vne),M(QA,Vne,null),e(Ei,qmo),e(Ei,Xne),e(Xne,jmo),b(f,cqe,_),b(f,yo,_),M(HA,yo,null),e(yo,Dmo),e(yo,UA),e(UA,Gmo),e(UA,mI),e(mI,Omo),e(UA,Vmo),e(yo,Xmo),e(yo,JA),e(JA,zmo),e(JA,zne),e(zne,Wmo),e(JA,Qmo),e(yo,Hmo),e(yo,Ue),M(YA,Ue,null),e(Ue,Umo),e(Ue,Wne),e(Wne,Jmo),e(Ue,Ymo),e(Ue,Ci),e(Ci,Kmo),e(Ci,Qne),e(Qne,Zmo),e(Ci,ego),e(Ci,Hne),e(Hne,ogo),e(Ci,rgo),e(Ue,tgo),e(Ue,he),e(he,Dh),e(Dh,Une),e(Une,ago),e(Dh,ngo),e(Dh,gI),e(gI,sgo),e(Dh,lgo),e(he,igo),e(he,Gh),e(Gh,Jne),e(Jne,dgo),e(Gh,cgo),e(Gh,Yne),e(Yne,fgo),e(Gh,mgo),e(he,ggo),e(he,Oh),e(Oh,Kne),e(Kne,hgo),e(Oh,pgo),e(Oh,hI),e(hI,ugo),e(Oh,_go),e(he,bgo),e(he,Vh),e(Vh,Zne),e(Zne,vgo),e(Vh,Fgo),e(Vh,pI),e(pI,Tgo),e(Vh,Mgo),e(he,Ego),e(he,Xh),e(Xh,ese),e(ese,Cgo),e(Xh,wgo),e(Xh,uI),e(uI,Ago),e(Xh,ygo),e(he,Lgo),e(he,zh),e(zh,ose),e(ose,xgo),e(zh,$go),e(zh,_I),e(_I,kgo),e(zh,Sgo),e(he,Rgo),e(he,Wh),e(Wh,rse),e(rse,Pgo),e(Wh,Bgo),e(Wh,bI),e(bI,Igo),e(Wh,Ngo),e(he,qgo),e(he,Qh),e(Qh,tse),e(tse,jgo),e(Qh,Dgo),e(Qh,vI),e(vI,Ggo),e(Qh,Ogo),e(he,Vgo),e(he,Hh),e(Hh,ase),e(ase,Xgo),e(Hh,zgo),e(Hh,FI),e(FI,Wgo),e(Hh,Qgo),e(he,Hgo),e(he,Uh),e(Uh,nse),e(nse,Ugo),e(Uh,Jgo),e(Uh,TI),e(TI,Ygo),e(Uh,Kgo),e(he,Zgo),e(he,Jh),e(Jh,sse),e(sse,eho),e(Jh,oho),e(Jh,MI),e(MI,rho),e(Jh,tho),e(he,aho),e(he,Yh),e(Yh,lse),e(lse,nho),e(Yh,sho),e(Yh,EI),e(EI,lho),e(Yh,iho),e(he,dho),e(he,Kh),e(Kh,ise),e(ise,cho),e(Kh,fho),e(Kh,CI),e(CI,mho),e(Kh,gho),e(he,hho),e(he,Zh),e(Zh,dse),e(dse,pho),e(Zh,uho),e(Zh,wI),e(wI,_ho),e(Zh,bho),e(he,vho),e(he,ep),e(ep,cse),e(cse,Fho),e(ep,Tho),e(ep,AI),e(AI,Mho),e(ep,Eho),e(he,Cho),e(he,op),e(op,fse),e(fse,who),e(op,Aho),e(op,yI),e(yI,yho),e(op,Lho),e(he,xho),e(he,rp),e(rp,mse),e(mse,$ho),e(rp,kho),e(rp,LI),e(LI,Sho),e(rp,Rho),e(Ue,Pho),M(tp,Ue,null),e(Ue,Bho),M(ap,Ue,null),e(yo,Iho),e(yo,np),M(KA,np,null),e(np,Nho),e(np,gse),e(gse,qho),b(f,fqe,_),b(f,wi,_),e(wi,sp),e(sp,hse),M(ZA,hse,null),e(wi,jho),e(wi,pse),e(pse,Dho),b(f,mqe,_),b(f,Lo,_),M(ey,Lo,null),e(Lo,Gho),e(Lo,Ai),e(Ai,Oho),e(Ai,xI),e(xI,Vho),e(Ai,Xho),e(Ai,$I),e($I,zho),e(Ai,Who),e(Lo,Qho),e(Lo,oy),e(oy,Hho),e(oy,use),e(use,Uho),e(oy,Jho),e(Lo,Yho),e(Lo,tt),M(ry,tt,null),e(tt,Kho),e(tt,_se),e(_se,Zho),e(tt,epo),e(tt,yi),e(yi,opo),e(yi,bse),e(bse,rpo),e(yi,tpo),e(yi,kI),e(kI,apo),e(yi,npo),e(tt,spo),M(lp,tt,null),e(Lo,lpo),e(Lo,Je),M(ty,Je,null),e(Je,ipo),e(Je,vse),e(vse,dpo),e(Je,cpo),e(Je,La),e(La,fpo),e(La,Fse),e(Fse,mpo),e(La,gpo),e(La,Tse),e(Tse,hpo),e(La,ppo),e(La,Mse),e(Mse,upo),e(La,_po),e(Je,bpo),e(Je,x),e(x,ip),e(ip,Ese),e(Ese,vpo),e(ip,Fpo),e(ip,SI),e(SI,Tpo),e(ip,Mpo),e(x,Epo),e(x,dp),e(dp,Cse),e(Cse,Cpo),e(dp,wpo),e(dp,RI),e(RI,Apo),e(dp,ypo),e(x,Lpo),e(x,cp),e(cp,wse),e(wse,xpo),e(cp,$po),e(cp,PI),e(PI,kpo),e(cp,Spo),e(x,Rpo),e(x,fp),e(fp,Ase),e(Ase,Ppo),e(fp,Bpo),e(fp,BI),e(BI,Ipo),e(fp,Npo),e(x,qpo),e(x,mp),e(mp,yse),e(yse,jpo),e(mp,Dpo),e(mp,II),e(II,Gpo),e(mp,Opo),e(x,Vpo),e(x,gp),e(gp,Lse),e(Lse,Xpo),e(gp,zpo),e(gp,NI),e(NI,Wpo),e(gp,Qpo),e(x,Hpo),e(x,hp),e(hp,xse),e(xse,Upo),e(hp,Jpo),e(hp,qI),e(qI,Ypo),e(hp,Kpo),e(x,Zpo),e(x,pp),e(pp,$se),e($se,euo),e(pp,ouo),e(pp,jI),e(jI,ruo),e(pp,tuo),e(x,auo),e(x,up),e(up,kse),e(kse,nuo),e(up,suo),e(up,DI),e(DI,luo),e(up,iuo),e(x,duo),e(x,_p),e(_p,Sse),e(Sse,cuo),e(_p,fuo),e(_p,GI),e(GI,muo),e(_p,guo),e(x,huo),e(x,bp),e(bp,Rse),e(Rse,puo),e(bp,uuo),e(bp,OI),e(OI,_uo),e(bp,buo),e(x,vuo),e(x,vp),e(vp,Pse),e(Pse,Fuo),e(vp,Tuo),e(vp,VI),e(VI,Muo),e(vp,Euo),e(x,Cuo),e(x,Fp),e(Fp,Bse),e(Bse,wuo),e(Fp,Auo),e(Fp,XI),e(XI,yuo),e(Fp,Luo),e(x,xuo),e(x,Tp),e(Tp,Ise),e(Ise,$uo),e(Tp,kuo),e(Tp,zI),e(zI,Suo),e(Tp,Ruo),e(x,Puo),e(x,Mp),e(Mp,Nse),e(Nse,Buo),e(Mp,Iuo),e(Mp,WI),e(WI,Nuo),e(Mp,quo),e(x,juo),e(x,Ep),e(Ep,qse),e(qse,Duo),e(Ep,Guo),e(Ep,QI),e(QI,Ouo),e(Ep,Vuo),e(x,Xuo),e(x,Cp),e(Cp,jse),e(jse,zuo),e(Cp,Wuo),e(Cp,HI),e(HI,Quo),e(Cp,Huo),e(x,Uuo),e(x,wp),e(wp,Dse),e(Dse,Juo),e(wp,Yuo),e(wp,UI),e(UI,Kuo),e(wp,Zuo),e(x,e_o),e(x,Ap),e(Ap,Gse),e(Gse,o_o),e(Ap,r_o),e(Ap,JI),e(JI,t_o),e(Ap,a_o),e(x,n_o),e(x,yp),e(yp,Ose),e(Ose,s_o),e(yp,l_o),e(yp,YI),e(YI,i_o),e(yp,d_o),e(x,c_o),e(x,Lp),e(Lp,Vse),e(Vse,f_o),e(Lp,m_o),e(Lp,KI),e(KI,g_o),e(Lp,h_o),e(x,p_o),e(x,xp),e(xp,Xse),e(Xse,u_o),e(xp,__o),e(xp,ZI),e(ZI,b_o),e(xp,v_o),e(x,F_o),e(x,$p),e($p,zse),e(zse,T_o),e($p,M_o),e($p,eN),e(eN,E_o),e($p,C_o),e(x,w_o),e(x,kp),e(kp,Wse),e(Wse,A_o),e(kp,y_o),e(kp,oN),e(oN,L_o),e(kp,x_o),e(x,$_o),e(x,Sp),e(Sp,Qse),e(Qse,k_o),e(Sp,S_o),e(Sp,rN),e(rN,R_o),e(Sp,P_o),e(x,B_o),e(x,Rp),e(Rp,Hse),e(Hse,I_o),e(Rp,N_o),e(Rp,tN),e(tN,q_o),e(Rp,j_o),e(x,D_o),e(x,Pp),e(Pp,Use),e(Use,G_o),e(Pp,O_o),e(Pp,aN),e(aN,V_o),e(Pp,X_o),e(x,z_o),e(x,Bp),e(Bp,Jse),e(Jse,W_o),e(Bp,Q_o),e(Bp,nN),e(nN,H_o),e(Bp,U_o),e(x,J_o),e(x,Ip),e(Ip,Yse),e(Yse,Y_o),e(Ip,K_o),e(Ip,sN),e(sN,Z_o),e(Ip,e1o),e(x,o1o),e(x,Np),e(Np,Kse),e(Kse,r1o),e(Np,t1o),e(Np,lN),e(lN,a1o),e(Np,n1o),e(x,s1o),e(x,qp),e(qp,Zse),e(Zse,l1o),e(qp,i1o),e(qp,iN),e(iN,d1o),e(qp,c1o),e(x,f1o),e(x,jp),e(jp,ele),e(ele,m1o),e(jp,g1o),e(jp,dN),e(dN,h1o),e(jp,p1o),e(x,u1o),e(x,Ps),e(Ps,ole),e(ole,_1o),e(Ps,b1o),e(Ps,cN),e(cN,v1o),e(Ps,F1o),e(Ps,fN),e(fN,T1o),e(Ps,M1o),e(x,E1o),e(x,Dp),e(Dp,rle),e(rle,C1o),e(Dp,w1o),e(Dp,mN),e(mN,A1o),e(Dp,y1o),e(x,L1o),e(x,Gp),e(Gp,tle),e(tle,x1o),e(Gp,$1o),e(Gp,gN),e(gN,k1o),e(Gp,S1o),e(x,R1o),e(x,Op),e(Op,ale),e(ale,P1o),e(Op,B1o),e(Op,hN),e(hN,I1o),e(Op,N1o),e(x,q1o),e(x,Vp),e(Vp,nle),e(nle,j1o),e(Vp,D1o),e(Vp,pN),e(pN,G1o),e(Vp,O1o),e(x,V1o),e(x,Xp),e(Xp,sle),e(sle,X1o),e(Xp,z1o),e(Xp,uN),e(uN,W1o),e(Xp,Q1o),e(x,H1o),e(x,zp),e(zp,lle),e(lle,U1o),e(zp,J1o),e(zp,_N),e(_N,Y1o),e(zp,K1o),e(x,Z1o),e(x,Wp),e(Wp,ile),e(ile,e7o),e(Wp,o7o),e(Wp,bN),e(bN,r7o),e(Wp,t7o),e(x,a7o),e(x,Qp),e(Qp,dle),e(dle,n7o),e(Qp,s7o),e(Qp,vN),e(vN,l7o),e(Qp,i7o),e(x,d7o),e(x,Hp),e(Hp,cle),e(cle,c7o),e(Hp,f7o),e(Hp,FN),e(FN,m7o),e(Hp,g7o),e(x,h7o),e(x,Up),e(Up,fle),e(fle,p7o),e(Up,u7o),e(Up,TN),e(TN,_7o),e(Up,b7o),e(x,v7o),e(x,Jp),e(Jp,mle),e(mle,F7o),e(Jp,T7o),e(Jp,MN),e(MN,M7o),e(Jp,E7o),e(x,C7o),e(x,Yp),e(Yp,gle),e(gle,w7o),e(Yp,A7o),e(Yp,EN),e(EN,y7o),e(Yp,L7o),e(x,x7o),e(x,Kp),e(Kp,hle),e(hle,$7o),e(Kp,k7o),e(Kp,CN),e(CN,S7o),e(Kp,R7o),e(x,P7o),e(x,Zp),e(Zp,ple),e(ple,B7o),e(Zp,I7o),e(Zp,wN),e(wN,N7o),e(Zp,q7o),e(x,j7o),e(x,eu),e(eu,ule),e(ule,D7o),e(eu,G7o),e(eu,AN),e(AN,O7o),e(eu,V7o),e(x,X7o),e(x,ou),e(ou,_le),e(_le,z7o),e(ou,W7o),e(ou,yN),e(yN,Q7o),e(ou,H7o),e(x,U7o),e(x,ru),e(ru,ble),e(ble,J7o),e(ru,Y7o),e(ru,LN),e(LN,K7o),e(ru,Z7o),e(x,ebo),e(x,tu),e(tu,vle),e(vle,obo),e(tu,rbo),e(tu,xN),e(xN,tbo),e(tu,abo),e(x,nbo),e(x,au),e(au,Fle),e(Fle,sbo),e(au,lbo),e(au,$N),e($N,ibo),e(au,dbo),e(x,cbo),e(x,nu),e(nu,Tle),e(Tle,fbo),e(nu,mbo),e(nu,kN),e(kN,gbo),e(nu,hbo),e(x,pbo),e(x,su),e(su,Mle),e(Mle,ubo),e(su,_bo),e(su,SN),e(SN,bbo),e(su,vbo),e(x,Fbo),e(x,lu),e(lu,Ele),e(Ele,Tbo),e(lu,Mbo),e(lu,RN),e(RN,Ebo),e(lu,Cbo),e(x,wbo),e(x,iu),e(iu,Cle),e(Cle,Abo),e(iu,ybo),e(iu,PN),e(PN,Lbo),e(iu,xbo),e(x,$bo),e(x,du),e(du,wle),e(wle,kbo),e(du,Sbo),e(du,BN),e(BN,Rbo),e(du,Pbo),e(x,Bbo),e(x,cu),e(cu,Ale),e(Ale,Ibo),e(cu,Nbo),e(cu,IN),e(IN,qbo),e(cu,jbo),e(x,Dbo),e(x,fu),e(fu,yle),e(yle,Gbo),e(fu,Obo),e(fu,NN),e(NN,Vbo),e(fu,Xbo),e(x,zbo),e(x,mu),e(mu,Lle),e(Lle,Wbo),e(mu,Qbo),e(mu,qN),e(qN,Hbo),e(mu,Ubo),e(x,Jbo),e(x,gu),e(gu,xle),e(xle,Ybo),e(gu,Kbo),e(gu,jN),e(jN,Zbo),e(gu,e2o),e(x,o2o),e(x,hu),e(hu,$le),e($le,r2o),e(hu,t2o),e(hu,DN),e(DN,a2o),e(hu,n2o),e(x,s2o),e(x,pu),e(pu,kle),e(kle,l2o),e(pu,i2o),e(pu,GN),e(GN,d2o),e(pu,c2o),e(x,f2o),e(x,uu),e(uu,Sle),e(Sle,m2o),e(uu,g2o),e(uu,ON),e(ON,h2o),e(uu,p2o),e(x,u2o),e(x,_u),e(_u,Rle),e(Rle,_2o),e(_u,b2o),e(_u,VN),e(VN,v2o),e(_u,F2o),e(x,T2o),e(x,bu),e(bu,Ple),e(Ple,M2o),e(bu,E2o),e(bu,XN),e(XN,C2o),e(bu,w2o),e(x,A2o),e(x,vu),e(vu,Ble),e(Ble,y2o),e(vu,L2o),e(vu,zN),e(zN,x2o),e(vu,$2o),e(x,k2o),e(x,Fu),e(Fu,Ile),e(Ile,S2o),e(Fu,R2o),e(Fu,WN),e(WN,P2o),e(Fu,B2o),e(x,I2o),e(x,Tu),e(Tu,Nle),e(Nle,N2o),e(Tu,q2o),e(Tu,QN),e(QN,j2o),e(Tu,D2o),e(x,G2o),e(x,Mu),e(Mu,qle),e(qle,O2o),e(Mu,V2o),e(Mu,HN),e(HN,X2o),e(Mu,z2o),e(x,W2o),e(x,Eu),e(Eu,jle),e(jle,Q2o),e(Eu,H2o),e(Eu,UN),e(UN,U2o),e(Eu,J2o),e(x,Y2o),e(x,Cu),e(Cu,Dle),e(Dle,K2o),e(Cu,Z2o),e(Cu,JN),e(JN,e4o),e(Cu,o4o),e(x,r4o),e(x,wu),e(wu,Gle),e(Gle,t4o),e(wu,a4o),e(wu,YN),e(YN,n4o),e(wu,s4o),e(x,l4o),e(x,Au),e(Au,Ole),e(Ole,i4o),e(Au,d4o),e(Au,KN),e(KN,c4o),e(Au,f4o),e(x,m4o),e(x,yu),e(yu,Vle),e(Vle,g4o),e(yu,h4o),e(yu,ZN),e(ZN,p4o),e(yu,u4o),e(x,_4o),e(x,Lu),e(Lu,Xle),e(Xle,b4o),e(Lu,v4o),e(Lu,eq),e(eq,F4o),e(Lu,T4o),e(x,M4o),e(x,xu),e(xu,zle),e(zle,E4o),e(xu,C4o),e(xu,oq),e(oq,w4o),e(xu,A4o),e(x,y4o),e(x,$u),e($u,Wle),e(Wle,L4o),e($u,x4o),e($u,rq),e(rq,$4o),e($u,k4o),e(x,S4o),e(x,ku),e(ku,Qle),e(Qle,R4o),e(ku,P4o),e(ku,tq),e(tq,B4o),e(ku,I4o),e(x,N4o),e(x,Su),e(Su,Hle),e(Hle,q4o),e(Su,j4o),e(Su,aq),e(aq,D4o),e(Su,G4o),e(x,O4o),e(x,Ru),e(Ru,Ule),e(Ule,V4o),e(Ru,X4o),e(Ru,nq),e(nq,z4o),e(Ru,W4o),e(x,Q4o),e(x,Pu),e(Pu,Jle),e(Jle,H4o),e(Pu,U4o),e(Pu,sq),e(sq,J4o),e(Pu,Y4o),e(x,K4o),e(x,Bu),e(Bu,Yle),e(Yle,Z4o),e(Bu,evo),e(Bu,lq),e(lq,ovo),e(Bu,rvo),e(x,tvo),e(x,Iu),e(Iu,Kle),e(Kle,avo),e(Iu,nvo),e(Iu,iq),e(iq,svo),e(Iu,lvo),e(x,ivo),e(x,Nu),e(Nu,Zle),e(Zle,dvo),e(Nu,cvo),e(Nu,dq),e(dq,fvo),e(Nu,mvo),e(x,gvo),e(x,qu),e(qu,eie),e(eie,hvo),e(qu,pvo),e(qu,cq),e(cq,uvo),e(qu,_vo),e(x,bvo),e(x,ju),e(ju,oie),e(oie,vvo),e(ju,Fvo),e(ju,fq),e(fq,Tvo),e(ju,Mvo),e(x,Evo),e(x,Du),e(Du,rie),e(rie,Cvo),e(Du,wvo),e(Du,mq),e(mq,Avo),e(Du,yvo),e(x,Lvo),e(x,Gu),e(Gu,tie),e(tie,xvo),e(Gu,$vo),e(Gu,gq),e(gq,kvo),e(Gu,Svo),e(x,Rvo),e(x,Ou),e(Ou,aie),e(aie,Pvo),e(Ou,Bvo),e(Ou,hq),e(hq,Ivo),e(Ou,Nvo),e(x,qvo),e(x,Vu),e(Vu,nie),e(nie,jvo),e(Vu,Dvo),e(Vu,pq),e(pq,Gvo),e(Vu,Ovo),e(x,Vvo),e(x,Xu),e(Xu,sie),e(sie,Xvo),e(Xu,zvo),e(Xu,uq),e(uq,Wvo),e(Xu,Qvo),e(x,Hvo),e(x,zu),e(zu,lie),e(lie,Uvo),e(zu,Jvo),e(zu,_q),e(_q,Yvo),e(zu,Kvo),e(x,Zvo),e(x,Wu),e(Wu,iie),e(iie,eFo),e(Wu,oFo),e(Wu,bq),e(bq,rFo),e(Wu,tFo),e(x,aFo),e(x,Qu),e(Qu,die),e(die,nFo),e(Qu,sFo),e(Qu,vq),e(vq,lFo),e(Qu,iFo),e(x,dFo),e(x,Hu),e(Hu,cie),e(cie,cFo),e(Hu,fFo),e(Hu,Fq),e(Fq,mFo),e(Hu,gFo),e(x,hFo),e(x,Uu),e(Uu,fie),e(fie,pFo),e(Uu,uFo),e(Uu,Tq),e(Tq,_Fo),e(Uu,bFo),e(x,vFo),e(x,Ju),e(Ju,mie),e(mie,FFo),e(Ju,TFo),e(Ju,Mq),e(Mq,MFo),e(Ju,EFo),e(x,CFo),e(x,Yu),e(Yu,gie),e(gie,wFo),e(Yu,AFo),e(Yu,Eq),e(Eq,yFo),e(Yu,LFo),e(x,xFo),e(x,Ku),e(Ku,hie),e(hie,$Fo),e(Ku,kFo),e(Ku,Cq),e(Cq,SFo),e(Ku,RFo),e(x,PFo),e(x,Zu),e(Zu,pie),e(pie,BFo),e(Zu,IFo),e(Zu,wq),e(wq,NFo),e(Zu,qFo),e(x,jFo),e(x,e_),e(e_,uie),e(uie,DFo),e(e_,GFo),e(e_,Aq),e(Aq,OFo),e(e_,VFo),e(Je,XFo),e(Je,o_),e(o_,zFo),e(o_,_ie),e(_ie,WFo),e(o_,QFo),e(o_,bie),e(bie,HFo),e(Je,UFo),M(r_,Je,null),b(f,gqe,_),b(f,Li,_),e(Li,t_),e(t_,vie),M(ay,vie,null),e(Li,JFo),e(Li,Fie),e(Fie,YFo),b(f,hqe,_),b(f,xo,_),M(ny,xo,null),e(xo,KFo),e(xo,xi),e(xi,ZFo),e(xi,yq),e(yq,e0o),e(xi,o0o),e(xi,Lq),e(Lq,r0o),e(xi,t0o),e(xo,a0o),e(xo,sy),e(sy,n0o),e(sy,Tie),e(Tie,s0o),e(sy,l0o),e(xo,i0o),e(xo,at),M(ly,at,null),e(at,d0o),e(at,Mie),e(Mie,c0o),e(at,f0o),e(at,$i),e($i,m0o),e($i,Eie),e(Eie,g0o),e($i,h0o),e($i,xq),e(xq,p0o),e($i,u0o),e(at,_0o),M(a_,at,null),e(xo,b0o),e(xo,Ye),M(iy,Ye,null),e(Ye,v0o),e(Ye,Cie),e(Cie,F0o),e(Ye,T0o),e(Ye,xa),e(xa,M0o),e(xa,wie),e(wie,E0o),e(xa,C0o),e(xa,Aie),e(Aie,w0o),e(xa,A0o),e(xa,yie),e(yie,y0o),e(xa,L0o),e(Ye,x0o),e(Ye,G),e(G,n_),e(n_,Lie),e(Lie,$0o),e(n_,k0o),e(n_,$q),e($q,S0o),e(n_,R0o),e(G,P0o),e(G,s_),e(s_,xie),e(xie,B0o),e(s_,I0o),e(s_,kq),e(kq,N0o),e(s_,q0o),e(G,j0o),e(G,l_),e(l_,$ie),e($ie,D0o),e(l_,G0o),e(l_,Sq),e(Sq,O0o),e(l_,V0o),e(G,X0o),e(G,i_),e(i_,kie),e(kie,z0o),e(i_,W0o),e(i_,Rq),e(Rq,Q0o),e(i_,H0o),e(G,U0o),e(G,d_),e(d_,Sie),e(Sie,J0o),e(d_,Y0o),e(d_,Pq),e(Pq,K0o),e(d_,Z0o),e(G,eTo),e(G,c_),e(c_,Rie),e(Rie,oTo),e(c_,rTo),e(c_,Bq),e(Bq,tTo),e(c_,aTo),e(G,nTo),e(G,f_),e(f_,Pie),e(Pie,sTo),e(f_,lTo),e(f_,Iq),e(Iq,iTo),e(f_,dTo),e(G,cTo),e(G,m_),e(m_,Bie),e(Bie,fTo),e(m_,mTo),e(m_,Nq),e(Nq,gTo),e(m_,hTo),e(G,pTo),e(G,g_),e(g_,Iie),e(Iie,uTo),e(g_,_To),e(g_,qq),e(qq,bTo),e(g_,vTo),e(G,FTo),e(G,h_),e(h_,Nie),e(Nie,TTo),e(h_,MTo),e(h_,jq),e(jq,ETo),e(h_,CTo),e(G,wTo),e(G,p_),e(p_,qie),e(qie,ATo),e(p_,yTo),e(p_,Dq),e(Dq,LTo),e(p_,xTo),e(G,$To),e(G,u_),e(u_,jie),e(jie,kTo),e(u_,STo),e(u_,Gq),e(Gq,RTo),e(u_,PTo),e(G,BTo),e(G,__),e(__,Die),e(Die,ITo),e(__,NTo),e(__,Oq),e(Oq,qTo),e(__,jTo),e(G,DTo),e(G,b_),e(b_,Gie),e(Gie,GTo),e(b_,OTo),e(b_,Vq),e(Vq,VTo),e(b_,XTo),e(G,zTo),e(G,v_),e(v_,Oie),e(Oie,WTo),e(v_,QTo),e(v_,Xq),e(Xq,HTo),e(v_,UTo),e(G,JTo),e(G,F_),e(F_,Vie),e(Vie,YTo),e(F_,KTo),e(F_,zq),e(zq,ZTo),e(F_,eMo),e(G,oMo),e(G,T_),e(T_,Xie),e(Xie,rMo),e(T_,tMo),e(T_,Wq),e(Wq,aMo),e(T_,nMo),e(G,sMo),e(G,M_),e(M_,zie),e(zie,lMo),e(M_,iMo),e(M_,Qq),e(Qq,dMo),e(M_,cMo),e(G,fMo),e(G,E_),e(E_,Wie),e(Wie,mMo),e(E_,gMo),e(E_,Hq),e(Hq,hMo),e(E_,pMo),e(G,uMo),e(G,C_),e(C_,Qie),e(Qie,_Mo),e(C_,bMo),e(C_,Uq),e(Uq,vMo),e(C_,FMo),e(G,TMo),e(G,w_),e(w_,Hie),e(Hie,MMo),e(w_,EMo),e(w_,Jq),e(Jq,CMo),e(w_,wMo),e(G,AMo),e(G,A_),e(A_,Uie),e(Uie,yMo),e(A_,LMo),e(A_,Yq),e(Yq,xMo),e(A_,$Mo),e(G,kMo),e(G,y_),e(y_,Jie),e(Jie,SMo),e(y_,RMo),e(y_,Kq),e(Kq,PMo),e(y_,BMo),e(G,IMo),e(G,L_),e(L_,Yie),e(Yie,NMo),e(L_,qMo),e(L_,Zq),e(Zq,jMo),e(L_,DMo),e(G,GMo),e(G,x_),e(x_,Kie),e(Kie,OMo),e(x_,VMo),e(x_,ej),e(ej,XMo),e(x_,zMo),e(G,WMo),e(G,$_),e($_,Zie),e(Zie,QMo),e($_,HMo),e($_,oj),e(oj,UMo),e($_,JMo),e(G,YMo),e(G,k_),e(k_,ede),e(ede,KMo),e(k_,ZMo),e(k_,rj),e(rj,eEo),e(k_,oEo),e(G,rEo),e(G,S_),e(S_,ode),e(ode,tEo),e(S_,aEo),e(S_,tj),e(tj,nEo),e(S_,sEo),e(G,lEo),e(G,R_),e(R_,rde),e(rde,iEo),e(R_,dEo),e(R_,aj),e(aj,cEo),e(R_,fEo),e(G,mEo),e(G,P_),e(P_,tde),e(tde,gEo),e(P_,hEo),e(P_,nj),e(nj,pEo),e(P_,uEo),e(G,_Eo),e(G,B_),e(B_,ade),e(ade,bEo),e(B_,vEo),e(B_,sj),e(sj,FEo),e(B_,TEo),e(G,MEo),e(G,I_),e(I_,nde),e(nde,EEo),e(I_,CEo),e(I_,lj),e(lj,wEo),e(I_,AEo),e(G,yEo),e(G,N_),e(N_,sde),e(sde,LEo),e(N_,xEo),e(N_,ij),e(ij,$Eo),e(N_,kEo),e(G,SEo),e(G,q_),e(q_,lde),e(lde,REo),e(q_,PEo),e(q_,dj),e(dj,BEo),e(q_,IEo),e(G,NEo),e(G,j_),e(j_,ide),e(ide,qEo),e(j_,jEo),e(j_,cj),e(cj,DEo),e(j_,GEo),e(G,OEo),e(G,D_),e(D_,dde),e(dde,VEo),e(D_,XEo),e(D_,fj),e(fj,zEo),e(D_,WEo),e(G,QEo),e(G,G_),e(G_,cde),e(cde,HEo),e(G_,UEo),e(G_,mj),e(mj,JEo),e(G_,YEo),e(G,KEo),e(G,O_),e(O_,fde),e(fde,ZEo),e(O_,eCo),e(O_,gj),e(gj,oCo),e(O_,rCo),e(G,tCo),e(G,V_),e(V_,mde),e(mde,aCo),e(V_,nCo),e(V_,hj),e(hj,sCo),e(V_,lCo),e(G,iCo),e(G,X_),e(X_,gde),e(gde,dCo),e(X_,cCo),e(X_,pj),e(pj,fCo),e(X_,mCo),e(G,gCo),e(G,z_),e(z_,hde),e(hde,hCo),e(z_,pCo),e(z_,uj),e(uj,uCo),e(z_,_Co),e(G,bCo),e(G,W_),e(W_,pde),e(pde,vCo),e(W_,FCo),e(W_,_j),e(_j,TCo),e(W_,MCo),e(Ye,ECo),e(Ye,Q_),e(Q_,CCo),e(Q_,ude),e(ude,wCo),e(Q_,ACo),e(Q_,_de),e(_de,yCo),e(Ye,LCo),M(H_,Ye,null),b(f,pqe,_),b(f,ki,_),e(ki,U_),e(U_,bde),M(dy,bde,null),e(ki,xCo),e(ki,vde),e(vde,$Co),b(f,uqe,_),b(f,$o,_),M(cy,$o,null),e($o,kCo),e($o,Si),e(Si,SCo),e(Si,bj),e(bj,RCo),e(Si,PCo),e(Si,vj),e(vj,BCo),e(Si,ICo),e($o,NCo),e($o,fy),e(fy,qCo),e(fy,Fde),e(Fde,jCo),e(fy,DCo),e($o,GCo),e($o,nt),M(my,nt,null),e(nt,OCo),e(nt,Tde),e(Tde,VCo),e(nt,XCo),e(nt,Ri),e(Ri,zCo),e(Ri,Mde),e(Mde,WCo),e(Ri,QCo),e(Ri,Fj),e(Fj,HCo),e(Ri,UCo),e(nt,JCo),M(J_,nt,null),e($o,YCo),e($o,Ke),M(gy,Ke,null),e(Ke,KCo),e(Ke,Ede),e(Ede,ZCo),e(Ke,e5o),e(Ke,$a),e($a,o5o),e($a,Cde),e(Cde,r5o),e($a,t5o),e($a,wde),e(wde,a5o),e($a,n5o),e($a,Ade),e(Ade,s5o),e($a,l5o),e(Ke,i5o),e(Ke,z),e(z,Y_),e(Y_,yde),e(yde,d5o),e(Y_,c5o),e(Y_,Tj),e(Tj,f5o),e(Y_,m5o),e(z,g5o),e(z,K_),e(K_,Lde),e(Lde,h5o),e(K_,p5o),e(K_,Mj),e(Mj,u5o),e(K_,_5o),e(z,b5o),e(z,Z_),e(Z_,xde),e(xde,v5o),e(Z_,F5o),e(Z_,Ej),e(Ej,T5o),e(Z_,M5o),e(z,E5o),e(z,e1),e(e1,$de),e($de,C5o),e(e1,w5o),e(e1,Cj),e(Cj,A5o),e(e1,y5o),e(z,L5o),e(z,o1),e(o1,kde),e(kde,x5o),e(o1,$5o),e(o1,wj),e(wj,k5o),e(o1,S5o),e(z,R5o),e(z,r1),e(r1,Sde),e(Sde,P5o),e(r1,B5o),e(r1,Aj),e(Aj,I5o),e(r1,N5o),e(z,q5o),e(z,t1),e(t1,Rde),e(Rde,j5o),e(t1,D5o),e(t1,yj),e(yj,G5o),e(t1,O5o),e(z,V5o),e(z,a1),e(a1,Pde),e(Pde,X5o),e(a1,z5o),e(a1,Lj),e(Lj,W5o),e(a1,Q5o),e(z,H5o),e(z,n1),e(n1,Bde),e(Bde,U5o),e(n1,J5o),e(n1,xj),e(xj,Y5o),e(n1,K5o),e(z,Z5o),e(z,s1),e(s1,Ide),e(Ide,e3o),e(s1,o3o),e(s1,$j),e($j,r3o),e(s1,t3o),e(z,a3o),e(z,l1),e(l1,Nde),e(Nde,n3o),e(l1,s3o),e(l1,kj),e(kj,l3o),e(l1,i3o),e(z,d3o),e(z,i1),e(i1,qde),e(qde,c3o),e(i1,f3o),e(i1,Sj),e(Sj,m3o),e(i1,g3o),e(z,h3o),e(z,d1),e(d1,jde),e(jde,p3o),e(d1,u3o),e(d1,Rj),e(Rj,_3o),e(d1,b3o),e(z,v3o),e(z,c1),e(c1,Dde),e(Dde,F3o),e(c1,T3o),e(c1,Pj),e(Pj,M3o),e(c1,E3o),e(z,C3o),e(z,f1),e(f1,Gde),e(Gde,w3o),e(f1,A3o),e(f1,Bj),e(Bj,y3o),e(f1,L3o),e(z,x3o),e(z,m1),e(m1,Ode),e(Ode,$3o),e(m1,k3o),e(m1,Ij),e(Ij,S3o),e(m1,R3o),e(z,P3o),e(z,g1),e(g1,Vde),e(Vde,B3o),e(g1,I3o),e(g1,Nj),e(Nj,N3o),e(g1,q3o),e(z,j3o),e(z,h1),e(h1,Xde),e(Xde,D3o),e(h1,G3o),e(h1,qj),e(qj,O3o),e(h1,V3o),e(z,X3o),e(z,p1),e(p1,zde),e(zde,z3o),e(p1,W3o),e(p1,jj),e(jj,Q3o),e(p1,H3o),e(z,U3o),e(z,u1),e(u1,Wde),e(Wde,J3o),e(u1,Y3o),e(u1,Dj),e(Dj,K3o),e(u1,Z3o),e(z,ewo),e(z,_1),e(_1,Qde),e(Qde,owo),e(_1,rwo),e(_1,Gj),e(Gj,two),e(_1,awo),e(z,nwo),e(z,b1),e(b1,Hde),e(Hde,swo),e(b1,lwo),e(b1,Oj),e(Oj,iwo),e(b1,dwo),e(z,cwo),e(z,v1),e(v1,Ude),e(Ude,fwo),e(v1,mwo),e(v1,Vj),e(Vj,gwo),e(v1,hwo),e(z,pwo),e(z,F1),e(F1,Jde),e(Jde,uwo),e(F1,_wo),e(F1,Xj),e(Xj,bwo),e(F1,vwo),e(z,Fwo),e(z,T1),e(T1,Yde),e(Yde,Two),e(T1,Mwo),e(T1,zj),e(zj,Ewo),e(T1,Cwo),e(z,wwo),e(z,M1),e(M1,Kde),e(Kde,Awo),e(M1,ywo),e(M1,Wj),e(Wj,Lwo),e(M1,xwo),e(z,$wo),e(z,E1),e(E1,Zde),e(Zde,kwo),e(E1,Swo),e(E1,Qj),e(Qj,Rwo),e(E1,Pwo),e(z,Bwo),e(z,C1),e(C1,ece),e(ece,Iwo),e(C1,Nwo),e(C1,Hj),e(Hj,qwo),e(C1,jwo),e(z,Dwo),e(z,w1),e(w1,oce),e(oce,Gwo),e(w1,Owo),e(w1,Uj),e(Uj,Vwo),e(w1,Xwo),e(z,zwo),e(z,A1),e(A1,rce),e(rce,Wwo),e(A1,Qwo),e(A1,Jj),e(Jj,Hwo),e(A1,Uwo),e(z,Jwo),e(z,y1),e(y1,tce),e(tce,Ywo),e(y1,Kwo),e(y1,Yj),e(Yj,Zwo),e(y1,e6o),e(z,o6o),e(z,L1),e(L1,ace),e(ace,r6o),e(L1,t6o),e(L1,Kj),e(Kj,a6o),e(L1,n6o),e(z,s6o),e(z,x1),e(x1,nce),e(nce,l6o),e(x1,i6o),e(x1,Zj),e(Zj,d6o),e(x1,c6o),e(z,f6o),e(z,$1),e($1,sce),e(sce,m6o),e($1,g6o),e($1,eD),e(eD,h6o),e($1,p6o),e(z,u6o),e(z,k1),e(k1,lce),e(lce,_6o),e(k1,b6o),e(k1,oD),e(oD,v6o),e(k1,F6o),e(z,T6o),e(z,S1),e(S1,ice),e(ice,M6o),e(S1,E6o),e(S1,rD),e(rD,C6o),e(S1,w6o),e(z,A6o),e(z,R1),e(R1,dce),e(dce,y6o),e(R1,L6o),e(R1,tD),e(tD,x6o),e(R1,$6o),e(Ke,k6o),e(Ke,P1),e(P1,S6o),e(P1,cce),e(cce,R6o),e(P1,P6o),e(P1,fce),e(fce,B6o),e(Ke,I6o),M(B1,Ke,null),b(f,_qe,_),b(f,Pi,_),e(Pi,I1),e(I1,mce),M(hy,mce,null),e(Pi,N6o),e(Pi,gce),e(gce,q6o),b(f,bqe,_),b(f,ko,_),M(py,ko,null),e(ko,j6o),e(ko,Bi),e(Bi,D6o),e(Bi,aD),e(aD,G6o),e(Bi,O6o),e(Bi,nD),e(nD,V6o),e(Bi,X6o),e(ko,z6o),e(ko,uy),e(uy,W6o),e(uy,hce),e(hce,Q6o),e(uy,H6o),e(ko,U6o),e(ko,st),M(_y,st,null),e(st,J6o),e(st,pce),e(pce,Y6o),e(st,K6o),e(st,Ii),e(Ii,Z6o),e(Ii,uce),e(uce,eAo),e(Ii,oAo),e(Ii,sD),e(sD,rAo),e(Ii,tAo),e(st,aAo),M(N1,st,null),e(ko,nAo),e(ko,Ze),M(by,Ze,null),e(Ze,sAo),e(Ze,_ce),e(_ce,lAo),e(Ze,iAo),e(Ze,ka),e(ka,dAo),e(ka,bce),e(bce,cAo),e(ka,fAo),e(ka,vce),e(vce,mAo),e(ka,gAo),e(ka,Fce),e(Fce,hAo),e(ka,pAo),e(Ze,uAo),e(Ze,Q),e(Q,q1),e(q1,Tce),e(Tce,_Ao),e(q1,bAo),e(q1,lD),e(lD,vAo),e(q1,FAo),e(Q,TAo),e(Q,j1),e(j1,Mce),e(Mce,MAo),e(j1,EAo),e(j1,iD),e(iD,CAo),e(j1,wAo),e(Q,AAo),e(Q,D1),e(D1,Ece),e(Ece,yAo),e(D1,LAo),e(D1,dD),e(dD,xAo),e(D1,$Ao),e(Q,kAo),e(Q,G1),e(G1,Cce),e(Cce,SAo),e(G1,RAo),e(G1,cD),e(cD,PAo),e(G1,BAo),e(Q,IAo),e(Q,O1),e(O1,wce),e(wce,NAo),e(O1,qAo),e(O1,fD),e(fD,jAo),e(O1,DAo),e(Q,GAo),e(Q,V1),e(V1,Ace),e(Ace,OAo),e(V1,VAo),e(V1,mD),e(mD,XAo),e(V1,zAo),e(Q,WAo),e(Q,X1),e(X1,yce),e(yce,QAo),e(X1,HAo),e(X1,gD),e(gD,UAo),e(X1,JAo),e(Q,YAo),e(Q,z1),e(z1,Lce),e(Lce,KAo),e(z1,ZAo),e(z1,hD),e(hD,eyo),e(z1,oyo),e(Q,ryo),e(Q,W1),e(W1,xce),e(xce,tyo),e(W1,ayo),e(W1,pD),e(pD,nyo),e(W1,syo),e(Q,lyo),e(Q,Q1),e(Q1,$ce),e($ce,iyo),e(Q1,dyo),e(Q1,uD),e(uD,cyo),e(Q1,fyo),e(Q,myo),e(Q,H1),e(H1,kce),e(kce,gyo),e(H1,hyo),e(H1,_D),e(_D,pyo),e(H1,uyo),e(Q,_yo),e(Q,U1),e(U1,Sce),e(Sce,byo),e(U1,vyo),e(U1,bD),e(bD,Fyo),e(U1,Tyo),e(Q,Myo),e(Q,J1),e(J1,Rce),e(Rce,Eyo),e(J1,Cyo),e(J1,vD),e(vD,wyo),e(J1,Ayo),e(Q,yyo),e(Q,Y1),e(Y1,Pce),e(Pce,Lyo),e(Y1,xyo),e(Y1,FD),e(FD,$yo),e(Y1,kyo),e(Q,Syo),e(Q,K1),e(K1,Bce),e(Bce,Ryo),e(K1,Pyo),e(K1,TD),e(TD,Byo),e(K1,Iyo),e(Q,Nyo),e(Q,Z1),e(Z1,Ice),e(Ice,qyo),e(Z1,jyo),e(Z1,MD),e(MD,Dyo),e(Z1,Gyo),e(Q,Oyo),e(Q,e7),e(e7,Nce),e(Nce,Vyo),e(e7,Xyo),e(e7,ED),e(ED,zyo),e(e7,Wyo),e(Q,Qyo),e(Q,o7),e(o7,qce),e(qce,Hyo),e(o7,Uyo),e(o7,CD),e(CD,Jyo),e(o7,Yyo),e(Q,Kyo),e(Q,r7),e(r7,jce),e(jce,Zyo),e(r7,eLo),e(r7,wD),e(wD,oLo),e(r7,rLo),e(Q,tLo),e(Q,t7),e(t7,Dce),e(Dce,aLo),e(t7,nLo),e(t7,AD),e(AD,sLo),e(t7,lLo),e(Q,iLo),e(Q,a7),e(a7,Gce),e(Gce,dLo),e(a7,cLo),e(a7,yD),e(yD,fLo),e(a7,mLo),e(Q,gLo),e(Q,n7),e(n7,Oce),e(Oce,hLo),e(n7,pLo),e(n7,LD),e(LD,uLo),e(n7,_Lo),e(Q,bLo),e(Q,s7),e(s7,Vce),e(Vce,vLo),e(s7,FLo),e(s7,xD),e(xD,TLo),e(s7,MLo),e(Q,ELo),e(Q,l7),e(l7,Xce),e(Xce,CLo),e(l7,wLo),e(l7,$D),e($D,ALo),e(l7,yLo),e(Q,LLo),e(Q,i7),e(i7,zce),e(zce,xLo),e(i7,$Lo),e(i7,kD),e(kD,kLo),e(i7,SLo),e(Q,RLo),e(Q,d7),e(d7,Wce),e(Wce,PLo),e(d7,BLo),e(d7,SD),e(SD,ILo),e(d7,NLo),e(Q,qLo),e(Q,c7),e(c7,Qce),e(Qce,jLo),e(c7,DLo),e(c7,RD),e(RD,GLo),e(c7,OLo),e(Q,VLo),e(Q,f7),e(f7,Hce),e(Hce,XLo),e(f7,zLo),e(f7,PD),e(PD,WLo),e(f7,QLo),e(Q,HLo),e(Q,m7),e(m7,Uce),e(Uce,ULo),e(m7,JLo),e(m7,BD),e(BD,YLo),e(m7,KLo),e(Q,ZLo),e(Q,g7),e(g7,Jce),e(Jce,e8o),e(g7,o8o),e(g7,ID),e(ID,r8o),e(g7,t8o),e(Q,a8o),e(Q,h7),e(h7,Yce),e(Yce,n8o),e(h7,s8o),e(h7,Kce),e(Kce,l8o),e(h7,i8o),e(Q,d8o),e(Q,p7),e(p7,Zce),e(Zce,c8o),e(p7,f8o),e(p7,ND),e(ND,m8o),e(p7,g8o),e(Q,h8o),e(Q,u7),e(u7,efe),e(efe,p8o),e(u7,u8o),e(u7,qD),e(qD,_8o),e(u7,b8o),e(Q,v8o),e(Q,_7),e(_7,ofe),e(ofe,F8o),e(_7,T8o),e(_7,jD),e(jD,M8o),e(_7,E8o),e(Q,C8o),e(Q,b7),e(b7,rfe),e(rfe,w8o),e(b7,A8o),e(b7,DD),e(DD,y8o),e(b7,L8o),e(Ze,x8o),e(Ze,v7),e(v7,$8o),e(v7,tfe),e(tfe,k8o),e(v7,S8o),e(v7,afe),e(afe,R8o),e(Ze,P8o),M(F7,Ze,null),b(f,vqe,_),b(f,Ni,_),e(Ni,T7),e(T7,nfe),M(vy,nfe,null),e(Ni,B8o),e(Ni,sfe),e(sfe,I8o),b(f,Fqe,_),b(f,So,_),M(Fy,So,null),e(So,N8o),e(So,qi),e(qi,q8o),e(qi,GD),e(GD,j8o),e(qi,D8o),e(qi,OD),e(OD,G8o),e(qi,O8o),e(So,V8o),e(So,Ty),e(Ty,X8o),e(Ty,lfe),e(lfe,z8o),e(Ty,W8o),e(So,Q8o),e(So,lt),M(My,lt,null),e(lt,H8o),e(lt,ife),e(ife,U8o),e(lt,J8o),e(lt,ji),e(ji,Y8o),e(ji,dfe),e(dfe,K8o),e(ji,Z8o),e(ji,VD),e(VD,e9o),e(ji,o9o),e(lt,r9o),M(M7,lt,null),e(So,t9o),e(So,eo),M(Ey,eo,null),e(eo,a9o),e(eo,cfe),e(cfe,n9o),e(eo,s9o),e(eo,Sa),e(Sa,l9o),e(Sa,ffe),e(ffe,i9o),e(Sa,d9o),e(Sa,mfe),e(mfe,c9o),e(Sa,f9o),e(Sa,gfe),e(gfe,m9o),e(Sa,g9o),e(eo,h9o),e(eo,ue),e(ue,E7),e(E7,hfe),e(hfe,p9o),e(E7,u9o),e(E7,XD),e(XD,_9o),e(E7,b9o),e(ue,v9o),e(ue,C7),e(C7,pfe),e(pfe,F9o),e(C7,T9o),e(C7,zD),e(zD,M9o),e(C7,E9o),e(ue,C9o),e(ue,w7),e(w7,ufe),e(ufe,w9o),e(w7,A9o),e(w7,WD),e(WD,y9o),e(w7,L9o),e(ue,x9o),e(ue,A7),e(A7,_fe),e(_fe,$9o),e(A7,k9o),e(A7,QD),e(QD,S9o),e(A7,R9o),e(ue,P9o),e(ue,y7),e(y7,bfe),e(bfe,B9o),e(y7,I9o),e(y7,HD),e(HD,N9o),e(y7,q9o),e(ue,j9o),e(ue,L7),e(L7,vfe),e(vfe,D9o),e(L7,G9o),e(L7,UD),e(UD,O9o),e(L7,V9o),e(ue,X9o),e(ue,x7),e(x7,Ffe),e(Ffe,z9o),e(x7,W9o),e(x7,JD),e(JD,Q9o),e(x7,H9o),e(ue,U9o),e(ue,$7),e($7,Tfe),e(Tfe,J9o),e($7,Y9o),e($7,YD),e(YD,K9o),e($7,Z9o),e(ue,exo),e(ue,k7),e(k7,Mfe),e(Mfe,oxo),e(k7,rxo),e(k7,KD),e(KD,txo),e(k7,axo),e(ue,nxo),e(ue,S7),e(S7,Efe),e(Efe,sxo),e(S7,lxo),e(S7,ZD),e(ZD,ixo),e(S7,dxo),e(ue,cxo),e(ue,R7),e(R7,Cfe),e(Cfe,fxo),e(R7,mxo),e(R7,eG),e(eG,gxo),e(R7,hxo),e(ue,pxo),e(ue,P7),e(P7,wfe),e(wfe,uxo),e(P7,_xo),e(P7,oG),e(oG,bxo),e(P7,vxo),e(ue,Fxo),e(ue,B7),e(B7,Afe),e(Afe,Txo),e(B7,Mxo),e(B7,rG),e(rG,Exo),e(B7,Cxo),e(ue,wxo),e(ue,I7),e(I7,yfe),e(yfe,Axo),e(I7,yxo),e(I7,tG),e(tG,Lxo),e(I7,xxo),e(ue,$xo),e(ue,N7),e(N7,Lfe),e(Lfe,kxo),e(N7,Sxo),e(N7,aG),e(aG,Rxo),e(N7,Pxo),e(ue,Bxo),e(ue,q7),e(q7,xfe),e(xfe,Ixo),e(q7,Nxo),e(q7,nG),e(nG,qxo),e(q7,jxo),e(eo,Dxo),e(eo,j7),e(j7,Gxo),e(j7,$fe),e($fe,Oxo),e(j7,Vxo),e(j7,kfe),e(kfe,Xxo),e(eo,zxo),M(D7,eo,null),b(f,Tqe,_),b(f,Di,_),e(Di,G7),e(G7,Sfe),M(Cy,Sfe,null),e(Di,Wxo),e(Di,Rfe),e(Rfe,Qxo),b(f,Mqe,_),b(f,Ro,_),M(wy,Ro,null),e(Ro,Hxo),e(Ro,Gi),e(Gi,Uxo),e(Gi,sG),e(sG,Jxo),e(Gi,Yxo),e(Gi,lG),e(lG,Kxo),e(Gi,Zxo),e(Ro,e$o),e(Ro,Ay),e(Ay,o$o),e(Ay,Pfe),e(Pfe,r$o),e(Ay,t$o),e(Ro,a$o),e(Ro,it),M(yy,it,null),e(it,n$o),e(it,Bfe),e(Bfe,s$o),e(it,l$o),e(it,Oi),e(Oi,i$o),e(Oi,Ife),e(Ife,d$o),e(Oi,c$o),e(Oi,iG),e(iG,f$o),e(Oi,m$o),e(it,g$o),M(O7,it,null),e(Ro,h$o),e(Ro,oo),M(Ly,oo,null),e(oo,p$o),e(oo,Nfe),e(Nfe,u$o),e(oo,_$o),e(oo,Ra),e(Ra,b$o),e(Ra,qfe),e(qfe,v$o),e(Ra,F$o),e(Ra,jfe),e(jfe,T$o),e(Ra,M$o),e(Ra,Dfe),e(Dfe,E$o),e(Ra,C$o),e(oo,w$o),e(oo,N),e(N,V7),e(V7,Gfe),e(Gfe,A$o),e(V7,y$o),e(V7,dG),e(dG,L$o),e(V7,x$o),e(N,$$o),e(N,X7),e(X7,Ofe),e(Ofe,k$o),e(X7,S$o),e(X7,cG),e(cG,R$o),e(X7,P$o),e(N,B$o),e(N,z7),e(z7,Vfe),e(Vfe,I$o),e(z7,N$o),e(z7,fG),e(fG,q$o),e(z7,j$o),e(N,D$o),e(N,W7),e(W7,Xfe),e(Xfe,G$o),e(W7,O$o),e(W7,mG),e(mG,V$o),e(W7,X$o),e(N,z$o),e(N,Q7),e(Q7,zfe),e(zfe,W$o),e(Q7,Q$o),e(Q7,gG),e(gG,H$o),e(Q7,U$o),e(N,J$o),e(N,H7),e(H7,Wfe),e(Wfe,Y$o),e(H7,K$o),e(H7,hG),e(hG,Z$o),e(H7,eko),e(N,oko),e(N,U7),e(U7,Qfe),e(Qfe,rko),e(U7,tko),e(U7,pG),e(pG,ako),e(U7,nko),e(N,sko),e(N,J7),e(J7,Hfe),e(Hfe,lko),e(J7,iko),e(J7,uG),e(uG,dko),e(J7,cko),e(N,fko),e(N,Y7),e(Y7,Ufe),e(Ufe,mko),e(Y7,gko),e(Y7,_G),e(_G,hko),e(Y7,pko),e(N,uko),e(N,K7),e(K7,Jfe),e(Jfe,_ko),e(K7,bko),e(K7,bG),e(bG,vko),e(K7,Fko),e(N,Tko),e(N,Z7),e(Z7,Yfe),e(Yfe,Mko),e(Z7,Eko),e(Z7,vG),e(vG,Cko),e(Z7,wko),e(N,Ako),e(N,eb),e(eb,Kfe),e(Kfe,yko),e(eb,Lko),e(eb,FG),e(FG,xko),e(eb,$ko),e(N,kko),e(N,ob),e(ob,Zfe),e(Zfe,Sko),e(ob,Rko),e(ob,TG),e(TG,Pko),e(ob,Bko),e(N,Iko),e(N,rb),e(rb,eme),e(eme,Nko),e(rb,qko),e(rb,MG),e(MG,jko),e(rb,Dko),e(N,Gko),e(N,tb),e(tb,ome),e(ome,Oko),e(tb,Vko),e(tb,EG),e(EG,Xko),e(tb,zko),e(N,Wko),e(N,ab),e(ab,rme),e(rme,Qko),e(ab,Hko),e(ab,CG),e(CG,Uko),e(ab,Jko),e(N,Yko),e(N,nb),e(nb,tme),e(tme,Kko),e(nb,Zko),e(nb,wG),e(wG,eSo),e(nb,oSo),e(N,rSo),e(N,sb),e(sb,ame),e(ame,tSo),e(sb,aSo),e(sb,AG),e(AG,nSo),e(sb,sSo),e(N,lSo),e(N,lb),e(lb,nme),e(nme,iSo),e(lb,dSo),e(lb,yG),e(yG,cSo),e(lb,fSo),e(N,mSo),e(N,ib),e(ib,sme),e(sme,gSo),e(ib,hSo),e(ib,LG),e(LG,pSo),e(ib,uSo),e(N,_So),e(N,db),e(db,lme),e(lme,bSo),e(db,vSo),e(db,xG),e(xG,FSo),e(db,TSo),e(N,MSo),e(N,cb),e(cb,ime),e(ime,ESo),e(cb,CSo),e(cb,$G),e($G,wSo),e(cb,ASo),e(N,ySo),e(N,fb),e(fb,dme),e(dme,LSo),e(fb,xSo),e(fb,kG),e(kG,$So),e(fb,kSo),e(N,SSo),e(N,mb),e(mb,cme),e(cme,RSo),e(mb,PSo),e(mb,SG),e(SG,BSo),e(mb,ISo),e(N,NSo),e(N,gb),e(gb,fme),e(fme,qSo),e(gb,jSo),e(gb,RG),e(RG,DSo),e(gb,GSo),e(N,OSo),e(N,hb),e(hb,mme),e(mme,VSo),e(hb,XSo),e(hb,PG),e(PG,zSo),e(hb,WSo),e(N,QSo),e(N,pb),e(pb,gme),e(gme,HSo),e(pb,USo),e(pb,BG),e(BG,JSo),e(pb,YSo),e(N,KSo),e(N,ub),e(ub,hme),e(hme,ZSo),e(ub,eRo),e(ub,IG),e(IG,oRo),e(ub,rRo),e(N,tRo),e(N,_b),e(_b,pme),e(pme,aRo),e(_b,nRo),e(_b,NG),e(NG,sRo),e(_b,lRo),e(N,iRo),e(N,bb),e(bb,ume),e(ume,dRo),e(bb,cRo),e(bb,qG),e(qG,fRo),e(bb,mRo),e(N,gRo),e(N,vb),e(vb,_me),e(_me,hRo),e(vb,pRo),e(vb,jG),e(jG,uRo),e(vb,_Ro),e(N,bRo),e(N,Fb),e(Fb,bme),e(bme,vRo),e(Fb,FRo),e(Fb,DG),e(DG,TRo),e(Fb,MRo),e(N,ERo),e(N,Tb),e(Tb,vme),e(vme,CRo),e(Tb,wRo),e(Tb,GG),e(GG,ARo),e(Tb,yRo),e(N,LRo),e(N,Mb),e(Mb,Fme),e(Fme,xRo),e(Mb,$Ro),e(Mb,OG),e(OG,kRo),e(Mb,SRo),e(N,RRo),e(N,Eb),e(Eb,Tme),e(Tme,PRo),e(Eb,BRo),e(Eb,VG),e(VG,IRo),e(Eb,NRo),e(N,qRo),e(N,Cb),e(Cb,Mme),e(Mme,jRo),e(Cb,DRo),e(Cb,XG),e(XG,GRo),e(Cb,ORo),e(N,VRo),e(N,wb),e(wb,Eme),e(Eme,XRo),e(wb,zRo),e(wb,zG),e(zG,WRo),e(wb,QRo),e(N,HRo),e(N,Ab),e(Ab,Cme),e(Cme,URo),e(Ab,JRo),e(Ab,WG),e(WG,YRo),e(Ab,KRo),e(N,ZRo),e(N,yb),e(yb,wme),e(wme,ePo),e(yb,oPo),e(yb,QG),e(QG,rPo),e(yb,tPo),e(N,aPo),e(N,Lb),e(Lb,Ame),e(Ame,nPo),e(Lb,sPo),e(Lb,HG),e(HG,lPo),e(Lb,iPo),e(N,dPo),e(N,xb),e(xb,yme),e(yme,cPo),e(xb,fPo),e(xb,UG),e(UG,mPo),e(xb,gPo),e(N,hPo),e(N,$b),e($b,Lme),e(Lme,pPo),e($b,uPo),e($b,JG),e(JG,_Po),e($b,bPo),e(N,vPo),e(N,kb),e(kb,xme),e(xme,FPo),e(kb,TPo),e(kb,YG),e(YG,MPo),e(kb,EPo),e(N,CPo),e(N,Sb),e(Sb,$me),e($me,wPo),e(Sb,APo),e(Sb,KG),e(KG,yPo),e(Sb,LPo),e(N,xPo),e(N,Rb),e(Rb,kme),e(kme,$Po),e(Rb,kPo),e(Rb,ZG),e(ZG,SPo),e(Rb,RPo),e(N,PPo),e(N,Pb),e(Pb,Sme),e(Sme,BPo),e(Pb,IPo),e(Pb,eO),e(eO,NPo),e(Pb,qPo),e(N,jPo),e(N,Bb),e(Bb,Rme),e(Rme,DPo),e(Bb,GPo),e(Bb,oO),e(oO,OPo),e(Bb,VPo),e(oo,XPo),e(oo,Ib),e(Ib,zPo),e(Ib,Pme),e(Pme,WPo),e(Ib,QPo),e(Ib,Bme),e(Bme,HPo),e(oo,UPo),M(Nb,oo,null),b(f,Eqe,_),b(f,Vi,_),e(Vi,qb),e(qb,Ime),M(xy,Ime,null),e(Vi,JPo),e(Vi,Nme),e(Nme,YPo),b(f,Cqe,_),b(f,Po,_),M($y,Po,null),e(Po,KPo),e(Po,Xi),e(Xi,ZPo),e(Xi,rO),e(rO,eBo),e(Xi,oBo),e(Xi,tO),e(tO,rBo),e(Xi,tBo),e(Po,aBo),e(Po,ky),e(ky,nBo),e(ky,qme),e(qme,sBo),e(ky,lBo),e(Po,iBo),e(Po,dt),M(Sy,dt,null),e(dt,dBo),e(dt,jme),e(jme,cBo),e(dt,fBo),e(dt,zi),e(zi,mBo),e(zi,Dme),e(Dme,gBo),e(zi,hBo),e(zi,aO),e(aO,pBo),e(zi,uBo),e(dt,_Bo),M(jb,dt,null),e(Po,bBo),e(Po,ro),M(Ry,ro,null),e(ro,vBo),e(ro,Gme),e(Gme,FBo),e(ro,TBo),e(ro,Pa),e(Pa,MBo),e(Pa,Ome),e(Ome,EBo),e(Pa,CBo),e(Pa,Vme),e(Vme,wBo),e(Pa,ABo),e(Pa,Xme),e(Xme,yBo),e(Pa,LBo),e(ro,xBo),e(ro,K),e(K,Db),e(Db,zme),e(zme,$Bo),e(Db,kBo),e(Db,nO),e(nO,SBo),e(Db,RBo),e(K,PBo),e(K,Gb),e(Gb,Wme),e(Wme,BBo),e(Gb,IBo),e(Gb,sO),e(sO,NBo),e(Gb,qBo),e(K,jBo),e(K,Ob),e(Ob,Qme),e(Qme,DBo),e(Ob,GBo),e(Ob,lO),e(lO,OBo),e(Ob,VBo),e(K,XBo),e(K,Vb),e(Vb,Hme),e(Hme,zBo),e(Vb,WBo),e(Vb,iO),e(iO,QBo),e(Vb,HBo),e(K,UBo),e(K,Xb),e(Xb,Ume),e(Ume,JBo),e(Xb,YBo),e(Xb,dO),e(dO,KBo),e(Xb,ZBo),e(K,eIo),e(K,zb),e(zb,Jme),e(Jme,oIo),e(zb,rIo),e(zb,cO),e(cO,tIo),e(zb,aIo),e(K,nIo),e(K,Wb),e(Wb,Yme),e(Yme,sIo),e(Wb,lIo),e(Wb,fO),e(fO,iIo),e(Wb,dIo),e(K,cIo),e(K,Qb),e(Qb,Kme),e(Kme,fIo),e(Qb,mIo),e(Qb,mO),e(mO,gIo),e(Qb,hIo),e(K,pIo),e(K,Hb),e(Hb,Zme),e(Zme,uIo),e(Hb,_Io),e(Hb,gO),e(gO,bIo),e(Hb,vIo),e(K,FIo),e(K,Ub),e(Ub,ege),e(ege,TIo),e(Ub,MIo),e(Ub,hO),e(hO,EIo),e(Ub,CIo),e(K,wIo),e(K,Jb),e(Jb,oge),e(oge,AIo),e(Jb,yIo),e(Jb,pO),e(pO,LIo),e(Jb,xIo),e(K,$Io),e(K,Yb),e(Yb,rge),e(rge,kIo),e(Yb,SIo),e(Yb,uO),e(uO,RIo),e(Yb,PIo),e(K,BIo),e(K,Kb),e(Kb,tge),e(tge,IIo),e(Kb,NIo),e(Kb,_O),e(_O,qIo),e(Kb,jIo),e(K,DIo),e(K,Zb),e(Zb,age),e(age,GIo),e(Zb,OIo),e(Zb,bO),e(bO,VIo),e(Zb,XIo),e(K,zIo),e(K,e2),e(e2,nge),e(nge,WIo),e(e2,QIo),e(e2,vO),e(vO,HIo),e(e2,UIo),e(K,JIo),e(K,o2),e(o2,sge),e(sge,YIo),e(o2,KIo),e(o2,FO),e(FO,ZIo),e(o2,eNo),e(K,oNo),e(K,r2),e(r2,lge),e(lge,rNo),e(r2,tNo),e(r2,TO),e(TO,aNo),e(r2,nNo),e(K,sNo),e(K,t2),e(t2,ige),e(ige,lNo),e(t2,iNo),e(t2,MO),e(MO,dNo),e(t2,cNo),e(K,fNo),e(K,a2),e(a2,dge),e(dge,mNo),e(a2,gNo),e(a2,EO),e(EO,hNo),e(a2,pNo),e(K,uNo),e(K,n2),e(n2,cge),e(cge,_No),e(n2,bNo),e(n2,CO),e(CO,vNo),e(n2,FNo),e(K,TNo),e(K,s2),e(s2,fge),e(fge,MNo),e(s2,ENo),e(s2,wO),e(wO,CNo),e(s2,wNo),e(K,ANo),e(K,l2),e(l2,mge),e(mge,yNo),e(l2,LNo),e(l2,AO),e(AO,xNo),e(l2,$No),e(K,kNo),e(K,i2),e(i2,gge),e(gge,SNo),e(i2,RNo),e(i2,yO),e(yO,PNo),e(i2,BNo),e(K,INo),e(K,d2),e(d2,hge),e(hge,NNo),e(d2,qNo),e(d2,LO),e(LO,jNo),e(d2,DNo),e(K,GNo),e(K,c2),e(c2,pge),e(pge,ONo),e(c2,VNo),e(c2,xO),e(xO,XNo),e(c2,zNo),e(K,WNo),e(K,f2),e(f2,uge),e(uge,QNo),e(f2,HNo),e(f2,$O),e($O,UNo),e(f2,JNo),e(K,YNo),e(K,m2),e(m2,_ge),e(_ge,KNo),e(m2,ZNo),e(m2,kO),e(kO,eqo),e(m2,oqo),e(K,rqo),e(K,g2),e(g2,bge),e(bge,tqo),e(g2,aqo),e(g2,SO),e(SO,nqo),e(g2,sqo),e(K,lqo),e(K,h2),e(h2,vge),e(vge,iqo),e(h2,dqo),e(h2,RO),e(RO,cqo),e(h2,fqo),e(ro,mqo),e(ro,p2),e(p2,gqo),e(p2,Fge),e(Fge,hqo),e(p2,pqo),e(p2,Tge),e(Tge,uqo),e(ro,_qo),M(u2,ro,null),b(f,wqe,_),b(f,Wi,_),e(Wi,_2),e(_2,Mge),M(Py,Mge,null),e(Wi,bqo),e(Wi,Ege),e(Ege,vqo),b(f,Aqe,_),b(f,Bo,_),M(By,Bo,null),e(Bo,Fqo),e(Bo,Qi),e(Qi,Tqo),e(Qi,PO),e(PO,Mqo),e(Qi,Eqo),e(Qi,BO),e(BO,Cqo),e(Qi,wqo),e(Bo,Aqo),e(Bo,Iy),e(Iy,yqo),e(Iy,Cge),e(Cge,Lqo),e(Iy,xqo),e(Bo,$qo),e(Bo,ct),M(Ny,ct,null),e(ct,kqo),e(ct,wge),e(wge,Sqo),e(ct,Rqo),e(ct,Hi),e(Hi,Pqo),e(Hi,Age),e(Age,Bqo),e(Hi,Iqo),e(Hi,IO),e(IO,Nqo),e(Hi,qqo),e(ct,jqo),M(b2,ct,null),e(Bo,Dqo),e(Bo,to),M(qy,to,null),e(to,Gqo),e(to,yge),e(yge,Oqo),e(to,Vqo),e(to,Ba),e(Ba,Xqo),e(Ba,Lge),e(Lge,zqo),e(Ba,Wqo),e(Ba,xge),e(xge,Qqo),e(Ba,Hqo),e(Ba,$ge),e($ge,Uqo),e(Ba,Jqo),e(to,Yqo),e(to,Yr),e(Yr,v2),e(v2,kge),e(kge,Kqo),e(v2,Zqo),e(v2,NO),e(NO,ejo),e(v2,ojo),e(Yr,rjo),e(Yr,F2),e(F2,Sge),e(Sge,tjo),e(F2,ajo),e(F2,qO),e(qO,njo),e(F2,sjo),e(Yr,ljo),e(Yr,T2),e(T2,Rge),e(Rge,ijo),e(T2,djo),e(T2,jO),e(jO,cjo),e(T2,fjo),e(Yr,mjo),e(Yr,M2),e(M2,Pge),e(Pge,gjo),e(M2,hjo),e(M2,DO),e(DO,pjo),e(M2,ujo),e(Yr,_jo),e(Yr,E2),e(E2,Bge),e(Bge,bjo),e(E2,vjo),e(E2,GO),e(GO,Fjo),e(E2,Tjo),e(to,Mjo),e(to,C2),e(C2,Ejo),e(C2,Ige),e(Ige,Cjo),e(C2,wjo),e(C2,Nge),e(Nge,Ajo),e(to,yjo),M(w2,to,null),b(f,yqe,_),b(f,Ui,_),e(Ui,A2),e(A2,qge),M(jy,qge,null),e(Ui,Ljo),e(Ui,jge),e(jge,xjo),b(f,Lqe,_),b(f,Io,_),M(Dy,Io,null),e(Io,$jo),e(Io,Ji),e(Ji,kjo),e(Ji,OO),e(OO,Sjo),e(Ji,Rjo),e(Ji,VO),e(VO,Pjo),e(Ji,Bjo),e(Io,Ijo),e(Io,Gy),e(Gy,Njo),e(Gy,Dge),e(Dge,qjo),e(Gy,jjo),e(Io,Djo),e(Io,ft),M(Oy,ft,null),e(ft,Gjo),e(ft,Gge),e(Gge,Ojo),e(ft,Vjo),e(ft,Yi),e(Yi,Xjo),e(Yi,Oge),e(Oge,zjo),e(Yi,Wjo),e(Yi,XO),e(XO,Qjo),e(Yi,Hjo),e(ft,Ujo),M(y2,ft,null),e(Io,Jjo),e(Io,ao),M(Vy,ao,null),e(ao,Yjo),e(ao,Vge),e(Vge,Kjo),e(ao,Zjo),e(ao,Ia),e(Ia,eDo),e(Ia,Xge),e(Xge,oDo),e(Ia,rDo),e(Ia,zge),e(zge,tDo),e(Ia,aDo),e(Ia,Wge),e(Wge,nDo),e(Ia,sDo),e(ao,lDo),e(ao,H),e(H,L2),e(L2,Qge),e(Qge,iDo),e(L2,dDo),e(L2,zO),e(zO,cDo),e(L2,fDo),e(H,mDo),e(H,x2),e(x2,Hge),e(Hge,gDo),e(x2,hDo),e(x2,WO),e(WO,pDo),e(x2,uDo),e(H,_Do),e(H,$2),e($2,Uge),e(Uge,bDo),e($2,vDo),e($2,QO),e(QO,FDo),e($2,TDo),e(H,MDo),e(H,k2),e(k2,Jge),e(Jge,EDo),e(k2,CDo),e(k2,HO),e(HO,wDo),e(k2,ADo),e(H,yDo),e(H,S2),e(S2,Yge),e(Yge,LDo),e(S2,xDo),e(S2,UO),e(UO,$Do),e(S2,kDo),e(H,SDo),e(H,R2),e(R2,Kge),e(Kge,RDo),e(R2,PDo),e(R2,JO),e(JO,BDo),e(R2,IDo),e(H,NDo),e(H,P2),e(P2,Zge),e(Zge,qDo),e(P2,jDo),e(P2,YO),e(YO,DDo),e(P2,GDo),e(H,ODo),e(H,B2),e(B2,ehe),e(ehe,VDo),e(B2,XDo),e(B2,KO),e(KO,zDo),e(B2,WDo),e(H,QDo),e(H,I2),e(I2,ohe),e(ohe,HDo),e(I2,UDo),e(I2,ZO),e(ZO,JDo),e(I2,YDo),e(H,KDo),e(H,N2),e(N2,rhe),e(rhe,ZDo),e(N2,eGo),e(N2,eV),e(eV,oGo),e(N2,rGo),e(H,tGo),e(H,q2),e(q2,the),e(the,aGo),e(q2,nGo),e(q2,oV),e(oV,sGo),e(q2,lGo),e(H,iGo),e(H,j2),e(j2,ahe),e(ahe,dGo),e(j2,cGo),e(j2,rV),e(rV,fGo),e(j2,mGo),e(H,gGo),e(H,D2),e(D2,nhe),e(nhe,hGo),e(D2,pGo),e(D2,tV),e(tV,uGo),e(D2,_Go),e(H,bGo),e(H,G2),e(G2,she),e(she,vGo),e(G2,FGo),e(G2,aV),e(aV,TGo),e(G2,MGo),e(H,EGo),e(H,O2),e(O2,lhe),e(lhe,CGo),e(O2,wGo),e(O2,nV),e(nV,AGo),e(O2,yGo),e(H,LGo),e(H,V2),e(V2,ihe),e(ihe,xGo),e(V2,$Go),e(V2,sV),e(sV,kGo),e(V2,SGo),e(H,RGo),e(H,X2),e(X2,dhe),e(dhe,PGo),e(X2,BGo),e(X2,lV),e(lV,IGo),e(X2,NGo),e(H,qGo),e(H,z2),e(z2,che),e(che,jGo),e(z2,DGo),e(z2,iV),e(iV,GGo),e(z2,OGo),e(H,VGo),e(H,W2),e(W2,fhe),e(fhe,XGo),e(W2,zGo),e(W2,dV),e(dV,WGo),e(W2,QGo),e(H,HGo),e(H,Q2),e(Q2,mhe),e(mhe,UGo),e(Q2,JGo),e(Q2,cV),e(cV,YGo),e(Q2,KGo),e(H,ZGo),e(H,H2),e(H2,ghe),e(ghe,eOo),e(H2,oOo),e(H2,fV),e(fV,rOo),e(H2,tOo),e(H,aOo),e(H,U2),e(U2,hhe),e(hhe,nOo),e(U2,sOo),e(U2,mV),e(mV,lOo),e(U2,iOo),e(H,dOo),e(H,J2),e(J2,phe),e(phe,cOo),e(J2,fOo),e(J2,gV),e(gV,mOo),e(J2,gOo),e(H,hOo),e(H,Y2),e(Y2,uhe),e(uhe,pOo),e(Y2,uOo),e(Y2,hV),e(hV,_Oo),e(Y2,bOo),e(H,vOo),e(H,K2),e(K2,_he),e(_he,FOo),e(K2,TOo),e(K2,pV),e(pV,MOo),e(K2,EOo),e(H,COo),e(H,Z2),e(Z2,bhe),e(bhe,wOo),e(Z2,AOo),e(Z2,uV),e(uV,yOo),e(Z2,LOo),e(H,xOo),e(H,e4),e(e4,vhe),e(vhe,$Oo),e(e4,kOo),e(e4,_V),e(_V,SOo),e(e4,ROo),e(H,POo),e(H,o4),e(o4,Fhe),e(Fhe,BOo),e(o4,IOo),e(o4,bV),e(bV,NOo),e(o4,qOo),e(H,jOo),e(H,r4),e(r4,The),e(The,DOo),e(r4,GOo),e(r4,vV),e(vV,OOo),e(r4,VOo),e(H,XOo),e(H,t4),e(t4,Mhe),e(Mhe,zOo),e(t4,WOo),e(t4,FV),e(FV,QOo),e(t4,HOo),e(H,UOo),e(H,a4),e(a4,Ehe),e(Ehe,JOo),e(a4,YOo),e(a4,TV),e(TV,KOo),e(a4,ZOo),e(H,eVo),e(H,n4),e(n4,Che),e(Che,oVo),e(n4,rVo),e(n4,MV),e(MV,tVo),e(n4,aVo),e(H,nVo),e(H,s4),e(s4,whe),e(whe,sVo),e(s4,lVo),e(s4,EV),e(EV,iVo),e(s4,dVo),e(H,cVo),e(H,l4),e(l4,Ahe),e(Ahe,fVo),e(l4,mVo),e(l4,CV),e(CV,gVo),e(l4,hVo),e(ao,pVo),e(ao,i4),e(i4,uVo),e(i4,yhe),e(yhe,_Vo),e(i4,bVo),e(i4,Lhe),e(Lhe,vVo),e(ao,FVo),M(d4,ao,null),b(f,xqe,_),b(f,Ki,_),e(Ki,c4),e(c4,xhe),M(Xy,xhe,null),e(Ki,TVo),e(Ki,$he),e($he,MVo),b(f,$qe,_),b(f,No,_),M(zy,No,null),e(No,EVo),e(No,Zi),e(Zi,CVo),e(Zi,wV),e(wV,wVo),e(Zi,AVo),e(Zi,AV),e(AV,yVo),e(Zi,LVo),e(No,xVo),e(No,Wy),e(Wy,$Vo),e(Wy,khe),e(khe,kVo),e(Wy,SVo),e(No,RVo),e(No,mt),M(Qy,mt,null),e(mt,PVo),e(mt,She),e(She,BVo),e(mt,IVo),e(mt,ed),e(ed,NVo),e(ed,Rhe),e(Rhe,qVo),e(ed,jVo),e(ed,yV),e(yV,DVo),e(ed,GVo),e(mt,OVo),M(f4,mt,null),e(No,VVo),e(No,no),M(Hy,no,null),e(no,XVo),e(no,Phe),e(Phe,zVo),e(no,WVo),e(no,Na),e(Na,QVo),e(Na,Bhe),e(Bhe,HVo),e(Na,UVo),e(Na,Ihe),e(Ihe,JVo),e(Na,YVo),e(Na,Nhe),e(Nhe,KVo),e(Na,ZVo),e(no,eXo),e(no,V),e(V,m4),e(m4,qhe),e(qhe,oXo),e(m4,rXo),e(m4,LV),e(LV,tXo),e(m4,aXo),e(V,nXo),e(V,g4),e(g4,jhe),e(jhe,sXo),e(g4,lXo),e(g4,xV),e(xV,iXo),e(g4,dXo),e(V,cXo),e(V,h4),e(h4,Dhe),e(Dhe,fXo),e(h4,mXo),e(h4,$V),e($V,gXo),e(h4,hXo),e(V,pXo),e(V,p4),e(p4,Ghe),e(Ghe,uXo),e(p4,_Xo),e(p4,kV),e(kV,bXo),e(p4,vXo),e(V,FXo),e(V,u4),e(u4,Ohe),e(Ohe,TXo),e(u4,MXo),e(u4,SV),e(SV,EXo),e(u4,CXo),e(V,wXo),e(V,_4),e(_4,Vhe),e(Vhe,AXo),e(_4,yXo),e(_4,RV),e(RV,LXo),e(_4,xXo),e(V,$Xo),e(V,b4),e(b4,Xhe),e(Xhe,kXo),e(b4,SXo),e(b4,PV),e(PV,RXo),e(b4,PXo),e(V,BXo),e(V,v4),e(v4,zhe),e(zhe,IXo),e(v4,NXo),e(v4,BV),e(BV,qXo),e(v4,jXo),e(V,DXo),e(V,F4),e(F4,Whe),e(Whe,GXo),e(F4,OXo),e(F4,IV),e(IV,VXo),e(F4,XXo),e(V,zXo),e(V,T4),e(T4,Qhe),e(Qhe,WXo),e(T4,QXo),e(T4,NV),e(NV,HXo),e(T4,UXo),e(V,JXo),e(V,M4),e(M4,Hhe),e(Hhe,YXo),e(M4,KXo),e(M4,qV),e(qV,ZXo),e(M4,ezo),e(V,ozo),e(V,E4),e(E4,Uhe),e(Uhe,rzo),e(E4,tzo),e(E4,jV),e(jV,azo),e(E4,nzo),e(V,szo),e(V,C4),e(C4,Jhe),e(Jhe,lzo),e(C4,izo),e(C4,DV),e(DV,dzo),e(C4,czo),e(V,fzo),e(V,w4),e(w4,Yhe),e(Yhe,mzo),e(w4,gzo),e(w4,GV),e(GV,hzo),e(w4,pzo),e(V,uzo),e(V,A4),e(A4,Khe),e(Khe,_zo),e(A4,bzo),e(A4,OV),e(OV,vzo),e(A4,Fzo),e(V,Tzo),e(V,y4),e(y4,Zhe),e(Zhe,Mzo),e(y4,Ezo),e(y4,VV),e(VV,Czo),e(y4,wzo),e(V,Azo),e(V,L4),e(L4,epe),e(epe,yzo),e(L4,Lzo),e(L4,XV),e(XV,xzo),e(L4,$zo),e(V,kzo),e(V,x4),e(x4,ope),e(ope,Szo),e(x4,Rzo),e(x4,zV),e(zV,Pzo),e(x4,Bzo),e(V,Izo),e(V,$4),e($4,rpe),e(rpe,Nzo),e($4,qzo),e($4,WV),e(WV,jzo),e($4,Dzo),e(V,Gzo),e(V,k4),e(k4,tpe),e(tpe,Ozo),e(k4,Vzo),e(k4,QV),e(QV,Xzo),e(k4,zzo),e(V,Wzo),e(V,S4),e(S4,ape),e(ape,Qzo),e(S4,Hzo),e(S4,HV),e(HV,Uzo),e(S4,Jzo),e(V,Yzo),e(V,R4),e(R4,npe),e(npe,Kzo),e(R4,Zzo),e(R4,UV),e(UV,eWo),e(R4,oWo),e(V,rWo),e(V,P4),e(P4,spe),e(spe,tWo),e(P4,aWo),e(P4,JV),e(JV,nWo),e(P4,sWo),e(V,lWo),e(V,B4),e(B4,lpe),e(lpe,iWo),e(B4,dWo),e(B4,YV),e(YV,cWo),e(B4,fWo),e(V,mWo),e(V,I4),e(I4,ipe),e(ipe,gWo),e(I4,hWo),e(I4,KV),e(KV,pWo),e(I4,uWo),e(V,_Wo),e(V,N4),e(N4,dpe),e(dpe,bWo),e(N4,vWo),e(N4,ZV),e(ZV,FWo),e(N4,TWo),e(V,MWo),e(V,q4),e(q4,cpe),e(cpe,EWo),e(q4,CWo),e(q4,eX),e(eX,wWo),e(q4,AWo),e(V,yWo),e(V,j4),e(j4,fpe),e(fpe,LWo),e(j4,xWo),e(j4,oX),e(oX,$Wo),e(j4,kWo),e(V,SWo),e(V,D4),e(D4,mpe),e(mpe,RWo),e(D4,PWo),e(D4,rX),e(rX,BWo),e(D4,IWo),e(V,NWo),e(V,G4),e(G4,gpe),e(gpe,qWo),e(G4,jWo),e(G4,tX),e(tX,DWo),e(G4,GWo),e(V,OWo),e(V,O4),e(O4,hpe),e(hpe,VWo),e(O4,XWo),e(O4,aX),e(aX,zWo),e(O4,WWo),e(V,QWo),e(V,V4),e(V4,ppe),e(ppe,HWo),e(V4,UWo),e(V4,nX),e(nX,JWo),e(V4,YWo),e(V,KWo),e(V,X4),e(X4,upe),e(upe,ZWo),e(X4,eQo),e(X4,sX),e(sX,oQo),e(X4,rQo),e(V,tQo),e(V,z4),e(z4,_pe),e(_pe,aQo),e(z4,nQo),e(z4,lX),e(lX,sQo),e(z4,lQo),e(V,iQo),e(V,W4),e(W4,bpe),e(bpe,dQo),e(W4,cQo),e(W4,iX),e(iX,fQo),e(W4,mQo),e(V,gQo),e(V,Q4),e(Q4,vpe),e(vpe,hQo),e(Q4,pQo),e(Q4,dX),e(dX,uQo),e(Q4,_Qo),e(V,bQo),e(V,H4),e(H4,Fpe),e(Fpe,vQo),e(H4,FQo),e(H4,cX),e(cX,TQo),e(H4,MQo),e(V,EQo),e(V,U4),e(U4,Tpe),e(Tpe,CQo),e(U4,wQo),e(U4,fX),e(fX,AQo),e(U4,yQo),e(V,LQo),e(V,J4),e(J4,Mpe),e(Mpe,xQo),e(J4,$Qo),e(J4,mX),e(mX,kQo),e(J4,SQo),e(V,RQo),e(V,Y4),e(Y4,Epe),e(Epe,PQo),e(Y4,BQo),e(Y4,gX),e(gX,IQo),e(Y4,NQo),e(no,qQo),e(no,K4),e(K4,jQo),e(K4,Cpe),e(Cpe,DQo),e(K4,GQo),e(K4,wpe),e(wpe,OQo),e(no,VQo),M(Z4,no,null),b(f,kqe,_),b(f,od,_),e(od,ev),e(ev,Ape),M(Uy,Ape,null),e(od,XQo),e(od,ype),e(ype,zQo),b(f,Sqe,_),b(f,qo,_),M(Jy,qo,null),e(qo,WQo),e(qo,rd),e(rd,QQo),e(rd,hX),e(hX,HQo),e(rd,UQo),e(rd,pX),e(pX,JQo),e(rd,YQo),e(qo,KQo),e(qo,Yy),e(Yy,ZQo),e(Yy,Lpe),e(Lpe,eHo),e(Yy,oHo),e(qo,rHo),e(qo,gt),M(Ky,gt,null),e(gt,tHo),e(gt,xpe),e(xpe,aHo),e(gt,nHo),e(gt,td),e(td,sHo),e(td,$pe),e($pe,lHo),e(td,iHo),e(td,uX),e(uX,dHo),e(td,cHo),e(gt,fHo),M(ov,gt,null),e(qo,mHo),e(qo,so),M(Zy,so,null),e(so,gHo),e(so,kpe),e(kpe,hHo),e(so,pHo),e(so,qa),e(qa,uHo),e(qa,Spe),e(Spe,_Ho),e(qa,bHo),e(qa,Rpe),e(Rpe,vHo),e(qa,FHo),e(qa,Ppe),e(Ppe,THo),e(qa,MHo),e(so,EHo),e(so,Bpe),e(Bpe,rv),e(rv,Ipe),e(Ipe,CHo),e(rv,wHo),e(rv,_X),e(_X,AHo),e(rv,yHo),e(so,LHo),e(so,tv),e(tv,xHo),e(tv,Npe),e(Npe,$Ho),e(tv,kHo),e(tv,qpe),e(qpe,SHo),e(so,RHo),M(av,so,null),b(f,Rqe,_),b(f,ad,_),e(ad,nv),e(nv,jpe),M(eL,jpe,null),e(ad,PHo),e(ad,Dpe),e(Dpe,BHo),b(f,Pqe,_),b(f,jo,_),M(oL,jo,null),e(jo,IHo),e(jo,nd),e(nd,NHo),e(nd,bX),e(bX,qHo),e(nd,jHo),e(nd,vX),e(vX,DHo),e(nd,GHo),e(jo,OHo),e(jo,rL),e(rL,VHo),e(rL,Gpe),e(Gpe,XHo),e(rL,zHo),e(jo,WHo),e(jo,ht),M(tL,ht,null),e(ht,QHo),e(ht,Ope),e(Ope,HHo),e(ht,UHo),e(ht,sd),e(sd,JHo),e(sd,Vpe),e(Vpe,YHo),e(sd,KHo),e(sd,FX),e(FX,ZHo),e(sd,eUo),e(ht,oUo),M(sv,ht,null),e(jo,rUo),e(jo,lo),M(aL,lo,null),e(lo,tUo),e(lo,Xpe),e(Xpe,aUo),e(lo,nUo),e(lo,ja),e(ja,sUo),e(ja,zpe),e(zpe,lUo),e(ja,iUo),e(ja,Wpe),e(Wpe,dUo),e(ja,cUo),e(ja,Qpe),e(Qpe,fUo),e(ja,mUo),e(lo,gUo),e(lo,Fe),e(Fe,lv),e(lv,Hpe),e(Hpe,hUo),e(lv,pUo),e(lv,TX),e(TX,uUo),e(lv,_Uo),e(Fe,bUo),e(Fe,iv),e(iv,Upe),e(Upe,vUo),e(iv,FUo),e(iv,MX),e(MX,TUo),e(iv,MUo),e(Fe,EUo),e(Fe,dv),e(dv,Jpe),e(Jpe,CUo),e(dv,wUo),e(dv,EX),e(EX,AUo),e(dv,yUo),e(Fe,LUo),e(Fe,cv),e(cv,Ype),e(Ype,xUo),e(cv,$Uo),e(cv,CX),e(CX,kUo),e(cv,SUo),e(Fe,RUo),e(Fe,Bs),e(Bs,Kpe),e(Kpe,PUo),e(Bs,BUo),e(Bs,wX),e(wX,IUo),e(Bs,NUo),e(Bs,AX),e(AX,qUo),e(Bs,jUo),e(Fe,DUo),e(Fe,fv),e(fv,Zpe),e(Zpe,GUo),e(fv,OUo),e(fv,yX),e(yX,VUo),e(fv,XUo),e(Fe,zUo),e(Fe,pt),e(pt,eue),e(eue,WUo),e(pt,QUo),e(pt,LX),e(LX,HUo),e(pt,UUo),e(pt,xX),e(xX,JUo),e(pt,YUo),e(pt,$X),e($X,KUo),e(pt,ZUo),e(Fe,eJo),e(Fe,mv),e(mv,oue),e(oue,oJo),e(mv,rJo),e(mv,kX),e(kX,tJo),e(mv,aJo),e(Fe,nJo),e(Fe,gv),e(gv,rue),e(rue,sJo),e(gv,lJo),e(gv,SX),e(SX,iJo),e(gv,dJo),e(Fe,cJo),e(Fe,hv),e(hv,tue),e(tue,fJo),e(hv,mJo),e(hv,RX),e(RX,gJo),e(hv,hJo),e(Fe,pJo),e(Fe,pv),e(pv,aue),e(aue,uJo),e(pv,_Jo),e(pv,PX),e(PX,bJo),e(pv,vJo),e(Fe,FJo),e(Fe,uv),e(uv,nue),e(nue,TJo),e(uv,MJo),e(uv,BX),e(BX,EJo),e(uv,CJo),e(Fe,wJo),e(Fe,_v),e(_v,sue),e(sue,AJo),e(_v,yJo),e(_v,IX),e(IX,LJo),e(_v,xJo),e(Fe,$Jo),e(Fe,bv),e(bv,lue),e(lue,kJo),e(bv,SJo),e(bv,NX),e(NX,RJo),e(bv,PJo),e(lo,BJo),e(lo,vv),e(vv,IJo),e(vv,iue),e(iue,NJo),e(vv,qJo),e(vv,due),e(due,jJo),e(lo,DJo),M(Fv,lo,null),b(f,Bqe,_),b(f,ld,_),e(ld,Tv),e(Tv,cue),M(nL,cue,null),e(ld,GJo),e(ld,fue),e(fue,OJo),b(f,Iqe,_),b(f,Do,_),M(sL,Do,null),e(Do,VJo),e(Do,id),e(id,XJo),e(id,qX),e(qX,zJo),e(id,WJo),e(id,jX),e(jX,QJo),e(id,HJo),e(Do,UJo),e(Do,lL),e(lL,JJo),e(lL,mue),e(mue,YJo),e(lL,KJo),e(Do,ZJo),e(Do,ut),M(iL,ut,null),e(ut,eYo),e(ut,gue),e(gue,oYo),e(ut,rYo),e(ut,dd),e(dd,tYo),e(dd,hue),e(hue,aYo),e(dd,nYo),e(dd,DX),e(DX,sYo),e(dd,lYo),e(ut,iYo),M(Mv,ut,null),e(Do,dYo),e(Do,io),M(dL,io,null),e(io,cYo),e(io,pue),e(pue,fYo),e(io,mYo),e(io,Da),e(Da,gYo),e(Da,uue),e(uue,hYo),e(Da,pYo),e(Da,_ue),e(_ue,uYo),e(Da,_Yo),e(Da,bue),e(bue,bYo),e(Da,vYo),e(io,FYo),e(io,vue),e(vue,Ev),e(Ev,Fue),e(Fue,TYo),e(Ev,MYo),e(Ev,GX),e(GX,EYo),e(Ev,CYo),e(io,wYo),e(io,Cv),e(Cv,AYo),e(Cv,Tue),e(Tue,yYo),e(Cv,LYo),e(Cv,Mue),e(Mue,xYo),e(io,$Yo),M(wv,io,null),b(f,Nqe,_),b(f,cd,_),e(cd,Av),e(Av,Eue),M(cL,Eue,null),e(cd,kYo),e(cd,Cue),e(Cue,SYo),b(f,qqe,_),b(f,Go,_),M(fL,Go,null),e(Go,RYo),e(Go,fd),e(fd,PYo),e(fd,OX),e(OX,BYo),e(fd,IYo),e(fd,VX),e(VX,NYo),e(fd,qYo),e(Go,jYo),e(Go,mL),e(mL,DYo),e(mL,wue),e(wue,GYo),e(mL,OYo),e(Go,VYo),e(Go,_t),M(gL,_t,null),e(_t,XYo),e(_t,Aue),e(Aue,zYo),e(_t,WYo),e(_t,md),e(md,QYo),e(md,yue),e(yue,HYo),e(md,UYo),e(md,XX),e(XX,JYo),e(md,YYo),e(_t,KYo),M(yv,_t,null),e(Go,ZYo),e(Go,co),M(hL,co,null),e(co,eKo),e(co,Lue),e(Lue,oKo),e(co,rKo),e(co,Ga),e(Ga,tKo),e(Ga,xue),e(xue,aKo),e(Ga,nKo),e(Ga,$ue),e($ue,sKo),e(Ga,lKo),e(Ga,kue),e(kue,iKo),e(Ga,dKo),e(co,cKo),e(co,ke),e(ke,Lv),e(Lv,Sue),e(Sue,fKo),e(Lv,mKo),e(Lv,zX),e(zX,gKo),e(Lv,hKo),e(ke,pKo),e(ke,xv),e(xv,Rue),e(Rue,uKo),e(xv,_Ko),e(xv,WX),e(WX,bKo),e(xv,vKo),e(ke,FKo),e(ke,$v),e($v,Pue),e(Pue,TKo),e($v,MKo),e($v,QX),e(QX,EKo),e($v,CKo),e(ke,wKo),e(ke,kv),e(kv,Bue),e(Bue,AKo),e(kv,yKo),e(kv,HX),e(HX,LKo),e(kv,xKo),e(ke,$Ko),e(ke,Sv),e(Sv,Iue),e(Iue,kKo),e(Sv,SKo),e(Sv,UX),e(UX,RKo),e(Sv,PKo),e(ke,BKo),e(ke,Rv),e(Rv,Nue),e(Nue,IKo),e(Rv,NKo),e(Rv,JX),e(JX,qKo),e(Rv,jKo),e(ke,DKo),e(ke,Pv),e(Pv,que),e(que,GKo),e(Pv,OKo),e(Pv,YX),e(YX,VKo),e(Pv,XKo),e(ke,zKo),e(ke,Bv),e(Bv,jue),e(jue,WKo),e(Bv,QKo),e(Bv,KX),e(KX,HKo),e(Bv,UKo),e(ke,JKo),e(ke,Iv),e(Iv,Due),e(Due,YKo),e(Iv,KKo),e(Iv,ZX),e(ZX,ZKo),e(Iv,eZo),e(co,oZo),e(co,Nv),e(Nv,rZo),e(Nv,Gue),e(Gue,tZo),e(Nv,aZo),e(Nv,Oue),e(Oue,nZo),e(co,sZo),M(qv,co,null),b(f,jqe,_),b(f,gd,_),e(gd,jv),e(jv,Vue),M(pL,Vue,null),e(gd,lZo),e(gd,Xue),e(Xue,iZo),b(f,Dqe,_),b(f,Oo,_),M(uL,Oo,null),e(Oo,dZo),e(Oo,hd),e(hd,cZo),e(hd,ez),e(ez,fZo),e(hd,mZo),e(hd,oz),e(oz,gZo),e(hd,hZo),e(Oo,pZo),e(Oo,_L),e(_L,uZo),e(_L,zue),e(zue,_Zo),e(_L,bZo),e(Oo,vZo),e(Oo,bt),M(bL,bt,null),e(bt,FZo),e(bt,Wue),e(Wue,TZo),e(bt,MZo),e(bt,pd),e(pd,EZo),e(pd,Que),e(Que,CZo),e(pd,wZo),e(pd,rz),e(rz,AZo),e(pd,yZo),e(bt,LZo),M(Dv,bt,null),e(Oo,xZo),e(Oo,fo),M(vL,fo,null),e(fo,$Zo),e(fo,Hue),e(Hue,kZo),e(fo,SZo),e(fo,Oa),e(Oa,RZo),e(Oa,Uue),e(Uue,PZo),e(Oa,BZo),e(Oa,Jue),e(Jue,IZo),e(Oa,NZo),e(Oa,Yue),e(Yue,qZo),e(Oa,jZo),e(fo,DZo),e(fo,Kr),e(Kr,Gv),e(Gv,Kue),e(Kue,GZo),e(Gv,OZo),e(Gv,tz),e(tz,VZo),e(Gv,XZo),e(Kr,zZo),e(Kr,Ov),e(Ov,Zue),e(Zue,WZo),e(Ov,QZo),e(Ov,az),e(az,HZo),e(Ov,UZo),e(Kr,JZo),e(Kr,Vv),e(Vv,e_e),e(e_e,YZo),e(Vv,KZo),e(Vv,nz),e(nz,ZZo),e(Vv,eer),e(Kr,oer),e(Kr,Xv),e(Xv,o_e),e(o_e,rer),e(Xv,ter),e(Xv,sz),e(sz,aer),e(Xv,ner),e(Kr,ser),e(Kr,zv),e(zv,r_e),e(r_e,ler),e(zv,ier),e(zv,lz),e(lz,der),e(zv,cer),e(fo,fer),e(fo,Wv),e(Wv,mer),e(Wv,t_e),e(t_e,ger),e(Wv,her),e(Wv,a_e),e(a_e,per),e(fo,uer),M(Qv,fo,null),b(f,Gqe,_),b(f,ud,_),e(ud,Hv),e(Hv,n_e),M(FL,n_e,null),e(ud,_er),e(ud,s_e),e(s_e,ber),b(f,Oqe,_),b(f,Vo,_),M(TL,Vo,null),e(Vo,ver),e(Vo,_d),e(_d,Fer),e(_d,iz),e(iz,Ter),e(_d,Mer),e(_d,dz),e(dz,Eer),e(_d,Cer),e(Vo,wer),e(Vo,ML),e(ML,Aer),e(ML,l_e),e(l_e,yer),e(ML,Ler),e(Vo,xer),e(Vo,vt),M(EL,vt,null),e(vt,$er),e(vt,i_e),e(i_e,ker),e(vt,Ser),e(vt,bd),e(bd,Rer),e(bd,d_e),e(d_e,Per),e(bd,Ber),e(bd,cz),e(cz,Ier),e(bd,Ner),e(vt,qer),M(Uv,vt,null),e(Vo,jer),e(Vo,mo),M(CL,mo,null),e(mo,Der),e(mo,c_e),e(c_e,Ger),e(mo,Oer),e(mo,Va),e(Va,Ver),e(Va,f_e),e(f_e,Xer),e(Va,zer),e(Va,m_e),e(m_e,Wer),e(Va,Qer),e(Va,g_e),e(g_e,Her),e(Va,Uer),e(mo,Jer),e(mo,Se),e(Se,Jv),e(Jv,h_e),e(h_e,Yer),e(Jv,Ker),e(Jv,fz),e(fz,Zer),e(Jv,eor),e(Se,oor),e(Se,Yv),e(Yv,p_e),e(p_e,ror),e(Yv,tor),e(Yv,mz),e(mz,aor),e(Yv,nor),e(Se,sor),e(Se,Kv),e(Kv,u_e),e(u_e,lor),e(Kv,ior),e(Kv,gz),e(gz,dor),e(Kv,cor),e(Se,mor),e(Se,Zv),e(Zv,__e),e(__e,gor),e(Zv,hor),e(Zv,hz),e(hz,por),e(Zv,uor),e(Se,_or),e(Se,eF),e(eF,b_e),e(b_e,bor),e(eF,vor),e(eF,pz),e(pz,For),e(eF,Tor),e(Se,Mor),e(Se,oF),e(oF,v_e),e(v_e,Eor),e(oF,Cor),e(oF,uz),e(uz,wor),e(oF,Aor),e(Se,yor),e(Se,rF),e(rF,F_e),e(F_e,Lor),e(rF,xor),e(rF,_z),e(_z,$or),e(rF,kor),e(Se,Sor),e(Se,tF),e(tF,T_e),e(T_e,Ror),e(tF,Por),e(tF,bz),e(bz,Bor),e(tF,Ior),e(Se,Nor),e(Se,aF),e(aF,M_e),e(M_e,qor),e(aF,jor),e(aF,vz),e(vz,Dor),e(aF,Gor),e(mo,Oor),e(mo,nF),e(nF,Vor),e(nF,E_e),e(E_e,Xor),e(nF,zor),e(nF,C_e),e(C_e,Wor),e(mo,Qor),M(sF,mo,null),b(f,Vqe,_),b(f,vd,_),e(vd,lF),e(lF,w_e),M(wL,w_e,null),e(vd,Hor),e(vd,A_e),e(A_e,Uor),b(f,Xqe,_),b(f,Xo,_),M(AL,Xo,null),e(Xo,Jor),e(Xo,Fd),e(Fd,Yor),e(Fd,Fz),e(Fz,Kor),e(Fd,Zor),e(Fd,Tz),e(Tz,err),e(Fd,orr),e(Xo,rrr),e(Xo,yL),e(yL,trr),e(yL,y_e),e(y_e,arr),e(yL,nrr),e(Xo,srr),e(Xo,Ft),M(LL,Ft,null),e(Ft,lrr),e(Ft,L_e),e(L_e,irr),e(Ft,drr),e(Ft,Td),e(Td,crr),e(Td,x_e),e(x_e,frr),e(Td,mrr),e(Td,Mz),e(Mz,grr),e(Td,hrr),e(Ft,prr),M(iF,Ft,null),e(Xo,urr),e(Xo,go),M(xL,go,null),e(go,_rr),e(go,$_e),e($_e,brr),e(go,vrr),e(go,Xa),e(Xa,Frr),e(Xa,k_e),e(k_e,Trr),e(Xa,Mrr),e(Xa,S_e),e(S_e,Err),e(Xa,Crr),e(Xa,R_e),e(R_e,wrr),e(Xa,Arr),e(go,yrr),e(go,$L),e($L,dF),e(dF,P_e),e(P_e,Lrr),e(dF,xrr),e(dF,Ez),e(Ez,$rr),e(dF,krr),e($L,Srr),e($L,cF),e(cF,B_e),e(B_e,Rrr),e(cF,Prr),e(cF,Cz),e(Cz,Brr),e(cF,Irr),e(go,Nrr),e(go,fF),e(fF,qrr),e(fF,I_e),e(I_e,jrr),e(fF,Drr),e(fF,N_e),e(N_e,Grr),e(go,Orr),M(mF,go,null),b(f,zqe,_),b(f,Md,_),e(Md,gF),e(gF,q_e),M(kL,q_e,null),e(Md,Vrr),e(Md,j_e),e(j_e,Xrr),b(f,Wqe,_),b(f,zo,_),M(SL,zo,null),e(zo,zrr),e(zo,Ed),e(Ed,Wrr),e(Ed,wz),e(wz,Qrr),e(Ed,Hrr),e(Ed,Az),e(Az,Urr),e(Ed,Jrr),e(zo,Yrr),e(zo,RL),e(RL,Krr),e(RL,D_e),e(D_e,Zrr),e(RL,etr),e(zo,otr),e(zo,Tt),M(PL,Tt,null),e(Tt,rtr),e(Tt,G_e),e(G_e,ttr),e(Tt,atr),e(Tt,Cd),e(Cd,ntr),e(Cd,O_e),e(O_e,str),e(Cd,ltr),e(Cd,yz),e(yz,itr),e(Cd,dtr),e(Tt,ctr),M(hF,Tt,null),e(zo,ftr),e(zo,ho),M(BL,ho,null),e(ho,mtr),e(ho,V_e),e(V_e,gtr),e(ho,htr),e(ho,za),e(za,ptr),e(za,X_e),e(X_e,utr),e(za,_tr),e(za,z_e),e(z_e,btr),e(za,vtr),e(za,W_e),e(W_e,Ftr),e(za,Ttr),e(ho,Mtr),e(ho,Zr),e(Zr,pF),e(pF,Q_e),e(Q_e,Etr),e(pF,Ctr),e(pF,Lz),e(Lz,wtr),e(pF,Atr),e(Zr,ytr),e(Zr,uF),e(uF,H_e),e(H_e,Ltr),e(uF,xtr),e(uF,xz),e(xz,$tr),e(uF,ktr),e(Zr,Str),e(Zr,_F),e(_F,U_e),e(U_e,Rtr),e(_F,Ptr),e(_F,$z),e($z,Btr),e(_F,Itr),e(Zr,Ntr),e(Zr,bF),e(bF,J_e),e(J_e,qtr),e(bF,jtr),e(bF,kz),e(kz,Dtr),e(bF,Gtr),e(Zr,Otr),e(Zr,vF),e(vF,Y_e),e(Y_e,Vtr),e(vF,Xtr),e(vF,Sz),e(Sz,ztr),e(vF,Wtr),e(ho,Qtr),e(ho,FF),e(FF,Htr),e(FF,K_e),e(K_e,Utr),e(FF,Jtr),e(FF,Z_e),e(Z_e,Ytr),e(ho,Ktr),M(TF,ho,null),b(f,Qqe,_),b(f,wd,_),e(wd,MF),e(MF,e1e),M(IL,e1e,null),e(wd,Ztr),e(wd,o1e),e(o1e,ear),b(f,Hqe,_),b(f,Wo,_),M(NL,Wo,null),e(Wo,oar),e(Wo,Ad),e(Ad,rar),e(Ad,Rz),e(Rz,tar),e(Ad,aar),e(Ad,Pz),e(Pz,nar),e(Ad,sar),e(Wo,lar),e(Wo,qL),e(qL,iar),e(qL,r1e),e(r1e,dar),e(qL,car),e(Wo,far),e(Wo,Mt),M(jL,Mt,null),e(Mt,mar),e(Mt,t1e),e(t1e,gar),e(Mt,har),e(Mt,yd),e(yd,par),e(yd,a1e),e(a1e,uar),e(yd,_ar),e(yd,Bz),e(Bz,bar),e(yd,Far),e(Mt,Tar),M(EF,Mt,null),e(Wo,Mar),e(Wo,po),M(DL,po,null),e(po,Ear),e(po,n1e),e(n1e,Car),e(po,war),e(po,Wa),e(Wa,Aar),e(Wa,s1e),e(s1e,yar),e(Wa,Lar),e(Wa,l1e),e(l1e,xar),e(Wa,$ar),e(Wa,i1e),e(i1e,kar),e(Wa,Sar),e(po,Rar),e(po,Ld),e(Ld,CF),e(CF,d1e),e(d1e,Par),e(CF,Bar),e(CF,Iz),e(Iz,Iar),e(CF,Nar),e(Ld,qar),e(Ld,wF),e(wF,c1e),e(c1e,jar),e(wF,Dar),e(wF,Nz),e(Nz,Gar),e(wF,Oar),e(Ld,Var),e(Ld,AF),e(AF,f1e),e(f1e,Xar),e(AF,zar),e(AF,qz),e(qz,War),e(AF,Qar),e(po,Har),e(po,yF),e(yF,Uar),e(yF,m1e),e(m1e,Jar),e(yF,Yar),e(yF,g1e),e(g1e,Kar),e(po,Zar),M(LF,po,null),b(f,Uqe,_),b(f,xd,_),e(xd,xF),e(xF,h1e),M(GL,h1e,null),e(xd,enr),e(xd,p1e),e(p1e,onr),b(f,Jqe,_),b(f,Qo,_),M(OL,Qo,null),e(Qo,rnr),e(Qo,$d),e($d,tnr),e($d,jz),e(jz,anr),e($d,nnr),e($d,Dz),e(Dz,snr),e($d,lnr),e(Qo,inr),e(Qo,VL),e(VL,dnr),e(VL,u1e),e(u1e,cnr),e(VL,fnr),e(Qo,mnr),e(Qo,Et),M(XL,Et,null),e(Et,gnr),e(Et,_1e),e(_1e,hnr),e(Et,pnr),e(Et,kd),e(kd,unr),e(kd,b1e),e(b1e,_nr),e(kd,bnr),e(kd,Gz),e(Gz,vnr),e(kd,Fnr),e(Et,Tnr),M($F,Et,null),e(Qo,Mnr),e(Qo,uo),M(zL,uo,null),e(uo,Enr),e(uo,v1e),e(v1e,Cnr),e(uo,wnr),e(uo,Qa),e(Qa,Anr),e(Qa,F1e),e(F1e,ynr),e(Qa,Lnr),e(Qa,T1e),e(T1e,xnr),e(Qa,$nr),e(Qa,M1e),e(M1e,knr),e(Qa,Snr),e(uo,Rnr),e(uo,WL),e(WL,kF),e(kF,E1e),e(E1e,Pnr),e(kF,Bnr),e(kF,Oz),e(Oz,Inr),e(kF,Nnr),e(WL,qnr),e(WL,SF),e(SF,C1e),e(C1e,jnr),e(SF,Dnr),e(SF,Vz),e(Vz,Gnr),e(SF,Onr),e(uo,Vnr),e(uo,RF),e(RF,Xnr),e(RF,w1e),e(w1e,znr),e(RF,Wnr),e(RF,A1e),e(A1e,Qnr),e(uo,Hnr),M(PF,uo,null),b(f,Yqe,_),b(f,Sd,_),e(Sd,BF),e(BF,y1e),M(QL,y1e,null),e(Sd,Unr),e(Sd,L1e),e(L1e,Jnr),b(f,Kqe,_),b(f,Ho,_),M(HL,Ho,null),e(Ho,Ynr),e(Ho,Rd),e(Rd,Knr),e(Rd,Xz),e(Xz,Znr),e(Rd,esr),e(Rd,zz),e(zz,osr),e(Rd,rsr),e(Ho,tsr),e(Ho,UL),e(UL,asr),e(UL,x1e),e(x1e,nsr),e(UL,ssr),e(Ho,lsr),e(Ho,Ct),M(JL,Ct,null),e(Ct,isr),e(Ct,$1e),e($1e,dsr),e(Ct,csr),e(Ct,Pd),e(Pd,fsr),e(Pd,k1e),e(k1e,msr),e(Pd,gsr),e(Pd,Wz),e(Wz,hsr),e(Pd,psr),e(Ct,usr),M(IF,Ct,null),e(Ho,_sr),e(Ho,_o),M(YL,_o,null),e(_o,bsr),e(_o,S1e),e(S1e,vsr),e(_o,Fsr),e(_o,Ha),e(Ha,Tsr),e(Ha,R1e),e(R1e,Msr),e(Ha,Esr),e(Ha,P1e),e(P1e,Csr),e(Ha,wsr),e(Ha,B1e),e(B1e,Asr),e(Ha,ysr),e(_o,Lsr),e(_o,I1e),e(I1e,NF),e(NF,N1e),e(N1e,xsr),e(NF,$sr),e(NF,Qz),e(Qz,ksr),e(NF,Ssr),e(_o,Rsr),e(_o,qF),e(qF,Psr),e(qF,q1e),e(q1e,Bsr),e(qF,Isr),e(qF,j1e),e(j1e,Nsr),e(_o,qsr),M(jF,_o,null),b(f,Zqe,_),b(f,Bd,_),e(Bd,DF),e(DF,D1e),M(KL,D1e,null),e(Bd,jsr),e(Bd,G1e),e(G1e,Dsr),b(f,eje,_),b(f,Uo,_),M(ZL,Uo,null),e(Uo,Gsr),e(Uo,Id),e(Id,Osr),e(Id,Hz),e(Hz,Vsr),e(Id,Xsr),e(Id,Uz),e(Uz,zsr),e(Id,Wsr),e(Uo,Qsr),e(Uo,e8),e(e8,Hsr),e(e8,O1e),e(O1e,Usr),e(e8,Jsr),e(Uo,Ysr),e(Uo,wt),M(o8,wt,null),e(wt,Ksr),e(wt,V1e),e(V1e,Zsr),e(wt,elr),e(wt,Nd),e(Nd,olr),e(Nd,X1e),e(X1e,rlr),e(Nd,tlr),e(Nd,Jz),e(Jz,alr),e(Nd,nlr),e(wt,slr),M(GF,wt,null),e(Uo,llr),e(Uo,bo),M(r8,bo,null),e(bo,ilr),e(bo,z1e),e(z1e,dlr),e(bo,clr),e(bo,Ua),e(Ua,flr),e(Ua,W1e),e(W1e,mlr),e(Ua,glr),e(Ua,Q1e),e(Q1e,hlr),e(Ua,plr),e(Ua,H1e),e(H1e,ulr),e(Ua,_lr),e(bo,blr),e(bo,Ja),e(Ja,OF),e(OF,U1e),e(U1e,vlr),e(OF,Flr),e(OF,Yz),e(Yz,Tlr),e(OF,Mlr),e(Ja,Elr),e(Ja,VF),e(VF,J1e),e(J1e,Clr),e(VF,wlr),e(VF,Kz),e(Kz,Alr),e(VF,ylr),e(Ja,Llr),e(Ja,XF),e(XF,Y1e),e(Y1e,xlr),e(XF,$lr),e(XF,Zz),e(Zz,klr),e(XF,Slr),e(Ja,Rlr),e(Ja,zF),e(zF,K1e),e(K1e,Plr),e(zF,Blr),e(zF,eW),e(eW,Ilr),e(zF,Nlr),e(bo,qlr),e(bo,WF),e(WF,jlr),e(WF,Z1e),e(Z1e,Dlr),e(WF,Glr),e(WF,e7e),e(e7e,Olr),e(bo,Vlr),M(QF,bo,null),b(f,oje,_),b(f,qd,_),e(qd,HF),e(HF,o7e),M(t8,o7e,null),e(qd,Xlr),e(qd,r7e),e(r7e,zlr),b(f,rje,_),b(f,Jo,_),M(a8,Jo,null),e(Jo,Wlr),e(Jo,jd),e(jd,Qlr),e(jd,oW),e(oW,Hlr),e(jd,Ulr),e(jd,rW),e(rW,Jlr),e(jd,Ylr),e(Jo,Klr),e(Jo,n8),e(n8,Zlr),e(n8,t7e),e(t7e,eir),e(n8,oir),e(Jo,rir),e(Jo,At),M(s8,At,null),e(At,tir),e(At,a7e),e(a7e,air),e(At,nir),e(At,Dd),e(Dd,sir),e(Dd,n7e),e(n7e,lir),e(Dd,iir),e(Dd,tW),e(tW,dir),e(Dd,cir),e(At,fir),M(UF,At,null),e(Jo,mir),e(Jo,vo),M(l8,vo,null),e(vo,gir),e(vo,s7e),e(s7e,hir),e(vo,pir),e(vo,Ya),e(Ya,uir),e(Ya,l7e),e(l7e,_ir),e(Ya,bir),e(Ya,i7e),e(i7e,vir),e(Ya,Fir),e(Ya,d7e),e(d7e,Tir),e(Ya,Mir),e(vo,Eir),e(vo,c7e),e(c7e,JF),e(JF,f7e),e(f7e,Cir),e(JF,wir),e(JF,aW),e(aW,Air),e(JF,yir),e(vo,Lir),e(vo,YF),e(YF,xir),e(YF,m7e),e(m7e,$ir),e(YF,kir),e(YF,g7e),e(g7e,Sir),e(vo,Rir),M(KF,vo,null),b(f,tje,_),b(f,Gd,_),e(Gd,ZF),e(ZF,h7e),M(i8,h7e,null),e(Gd,Pir),e(Gd,p7e),e(p7e,Bir),b(f,aje,_),b(f,Yo,_),M(d8,Yo,null),e(Yo,Iir),e(Yo,Od),e(Od,Nir),e(Od,nW),e(nW,qir),e(Od,jir),e(Od,sW),e(sW,Dir),e(Od,Gir),e(Yo,Oir),e(Yo,c8),e(c8,Vir),e(c8,u7e),e(u7e,Xir),e(c8,zir),e(Yo,Wir),e(Yo,yt),M(f8,yt,null),e(yt,Qir),e(yt,_7e),e(_7e,Hir),e(yt,Uir),e(yt,Vd),e(Vd,Jir),e(Vd,b7e),e(b7e,Yir),e(Vd,Kir),e(Vd,lW),e(lW,Zir),e(Vd,edr),e(yt,odr),M(e0,yt,null),e(Yo,rdr),e(Yo,wr),M(m8,wr,null),e(wr,tdr),e(wr,v7e),e(v7e,adr),e(wr,ndr),e(wr,Ka),e(Ka,sdr),e(Ka,F7e),e(F7e,ldr),e(Ka,idr),e(Ka,T7e),e(T7e,ddr),e(Ka,cdr),e(Ka,M7e),e(M7e,fdr),e(Ka,mdr),e(wr,gdr),e(wr,q),e(q,o0),e(o0,E7e),e(E7e,hdr),e(o0,pdr),e(o0,iW),e(iW,udr),e(o0,_dr),e(q,bdr),e(q,r0),e(r0,C7e),e(C7e,vdr),e(r0,Fdr),e(r0,dW),e(dW,Tdr),e(r0,Mdr),e(q,Edr),e(q,t0),e(t0,w7e),e(w7e,Cdr),e(t0,wdr),e(t0,cW),e(cW,Adr),e(t0,ydr),e(q,Ldr),e(q,a0),e(a0,A7e),e(A7e,xdr),e(a0,$dr),e(a0,fW),e(fW,kdr),e(a0,Sdr),e(q,Rdr),e(q,n0),e(n0,y7e),e(y7e,Pdr),e(n0,Bdr),e(n0,mW),e(mW,Idr),e(n0,Ndr),e(q,qdr),e(q,s0),e(s0,L7e),e(L7e,jdr),e(s0,Ddr),e(s0,gW),e(gW,Gdr),e(s0,Odr),e(q,Vdr),e(q,l0),e(l0,x7e),e(x7e,Xdr),e(l0,zdr),e(l0,hW),e(hW,Wdr),e(l0,Qdr),e(q,Hdr),e(q,i0),e(i0,$7e),e($7e,Udr),e(i0,Jdr),e(i0,pW),e(pW,Ydr),e(i0,Kdr),e(q,Zdr),e(q,d0),e(d0,k7e),e(k7e,ecr),e(d0,ocr),e(d0,uW),e(uW,rcr),e(d0,tcr),e(q,acr),e(q,c0),e(c0,S7e),e(S7e,ncr),e(c0,scr),e(c0,_W),e(_W,lcr),e(c0,icr),e(q,dcr),e(q,f0),e(f0,R7e),e(R7e,ccr),e(f0,fcr),e(f0,bW),e(bW,mcr),e(f0,gcr),e(q,hcr),e(q,m0),e(m0,P7e),e(P7e,pcr),e(m0,ucr),e(m0,vW),e(vW,_cr),e(m0,bcr),e(q,vcr),e(q,g0),e(g0,B7e),e(B7e,Fcr),e(g0,Tcr),e(g0,FW),e(FW,Mcr),e(g0,Ecr),e(q,Ccr),e(q,h0),e(h0,I7e),e(I7e,wcr),e(h0,Acr),e(h0,TW),e(TW,ycr),e(h0,Lcr),e(q,xcr),e(q,p0),e(p0,N7e),e(N7e,$cr),e(p0,kcr),e(p0,MW),e(MW,Scr),e(p0,Rcr),e(q,Pcr),e(q,u0),e(u0,q7e),e(q7e,Bcr),e(u0,Icr),e(u0,EW),e(EW,Ncr),e(u0,qcr),e(q,jcr),e(q,_0),e(_0,j7e),e(j7e,Dcr),e(_0,Gcr),e(_0,CW),e(CW,Ocr),e(_0,Vcr),e(q,Xcr),e(q,Is),e(Is,D7e),e(D7e,zcr),e(Is,Wcr),e(Is,wW),e(wW,Qcr),e(Is,Hcr),e(Is,AW),e(AW,Ucr),e(Is,Jcr),e(q,Ycr),e(q,b0),e(b0,G7e),e(G7e,Kcr),e(b0,Zcr),e(b0,yW),e(yW,efr),e(b0,ofr),e(q,rfr),e(q,v0),e(v0,O7e),e(O7e,tfr),e(v0,afr),e(v0,LW),e(LW,nfr),e(v0,sfr),e(q,lfr),e(q,F0),e(F0,V7e),e(V7e,ifr),e(F0,dfr),e(F0,xW),e(xW,cfr),e(F0,ffr),e(q,mfr),e(q,T0),e(T0,X7e),e(X7e,gfr),e(T0,hfr),e(T0,$W),e($W,pfr),e(T0,ufr),e(q,_fr),e(q,M0),e(M0,z7e),e(z7e,bfr),e(M0,vfr),e(M0,kW),e(kW,Ffr),e(M0,Tfr),e(q,Mfr),e(q,E0),e(E0,W7e),e(W7e,Efr),e(E0,Cfr),e(E0,SW),e(SW,wfr),e(E0,Afr),e(q,yfr),e(q,C0),e(C0,Q7e),e(Q7e,Lfr),e(C0,xfr),e(C0,RW),e(RW,$fr),e(C0,kfr),e(q,Sfr),e(q,w0),e(w0,H7e),e(H7e,Rfr),e(w0,Pfr),e(w0,PW),e(PW,Bfr),e(w0,Ifr),e(q,Nfr),e(q,A0),e(A0,U7e),e(U7e,qfr),e(A0,jfr),e(A0,BW),e(BW,Dfr),e(A0,Gfr),e(q,Ofr),e(q,y0),e(y0,J7e),e(J7e,Vfr),e(y0,Xfr),e(y0,IW),e(IW,zfr),e(y0,Wfr),e(q,Qfr),e(q,L0),e(L0,Y7e),e(Y7e,Hfr),e(L0,Ufr),e(L0,NW),e(NW,Jfr),e(L0,Yfr),e(q,Kfr),e(q,x0),e(x0,K7e),e(K7e,Zfr),e(x0,emr),e(x0,qW),e(qW,omr),e(x0,rmr),e(q,tmr),e(q,$0),e($0,Z7e),e(Z7e,amr),e($0,nmr),e($0,jW),e(jW,smr),e($0,lmr),e(q,imr),e(q,k0),e(k0,ebe),e(ebe,dmr),e(k0,cmr),e(k0,DW),e(DW,fmr),e(k0,mmr),e(q,gmr),e(q,S0),e(S0,obe),e(obe,hmr),e(S0,pmr),e(S0,GW),e(GW,umr),e(S0,_mr),e(q,bmr),e(q,R0),e(R0,rbe),e(rbe,vmr),e(R0,Fmr),e(R0,OW),e(OW,Tmr),e(R0,Mmr),e(q,Emr),e(q,P0),e(P0,tbe),e(tbe,Cmr),e(P0,wmr),e(P0,VW),e(VW,Amr),e(P0,ymr),e(q,Lmr),e(q,B0),e(B0,abe),e(abe,xmr),e(B0,$mr),e(B0,XW),e(XW,kmr),e(B0,Smr),e(q,Rmr),e(q,I0),e(I0,nbe),e(nbe,Pmr),e(I0,Bmr),e(I0,zW),e(zW,Imr),e(I0,Nmr),e(q,qmr),e(q,N0),e(N0,sbe),e(sbe,jmr),e(N0,Dmr),e(N0,WW),e(WW,Gmr),e(N0,Omr),e(q,Vmr),e(q,q0),e(q0,lbe),e(lbe,Xmr),e(q0,zmr),e(q0,QW),e(QW,Wmr),e(q0,Qmr),e(q,Hmr),e(q,j0),e(j0,ibe),e(ibe,Umr),e(j0,Jmr),e(j0,HW),e(HW,Ymr),e(j0,Kmr),e(q,Zmr),e(q,D0),e(D0,dbe),e(dbe,egr),e(D0,ogr),e(D0,UW),e(UW,rgr),e(D0,tgr),e(q,agr),e(q,G0),e(G0,cbe),e(cbe,ngr),e(G0,sgr),e(G0,JW),e(JW,lgr),e(G0,igr),e(q,dgr),e(q,O0),e(O0,fbe),e(fbe,cgr),e(O0,fgr),e(O0,YW),e(YW,mgr),e(O0,ggr),e(q,hgr),e(q,V0),e(V0,mbe),e(mbe,pgr),e(V0,ugr),e(V0,KW),e(KW,_gr),e(V0,bgr),e(q,vgr),e(q,X0),e(X0,gbe),e(gbe,Fgr),e(X0,Tgr),e(X0,ZW),e(ZW,Mgr),e(X0,Egr),e(q,Cgr),e(q,z0),e(z0,hbe),e(hbe,wgr),e(z0,Agr),e(z0,eQ),e(eQ,ygr),e(z0,Lgr),e(wr,xgr),M(W0,wr,null),b(f,nje,_),b(f,Xd,_),e(Xd,Q0),e(Q0,pbe),M(g8,pbe,null),e(Xd,$gr),e(Xd,ube),e(ube,kgr),b(f,sje,_),b(f,Ko,_),M(h8,Ko,null),e(Ko,Sgr),e(Ko,zd),e(zd,Rgr),e(zd,oQ),e(oQ,Pgr),e(zd,Bgr),e(zd,rQ),e(rQ,Igr),e(zd,Ngr),e(Ko,qgr),e(Ko,p8),e(p8,jgr),e(p8,_be),e(_be,Dgr),e(p8,Ggr),e(Ko,Ogr),e(Ko,Lt),M(u8,Lt,null),e(Lt,Vgr),e(Lt,bbe),e(bbe,Xgr),e(Lt,zgr),e(Lt,Wd),e(Wd,Wgr),e(Wd,vbe),e(vbe,Qgr),e(Wd,Hgr),e(Wd,tQ),e(tQ,Ugr),e(Wd,Jgr),e(Lt,Ygr),M(H0,Lt,null),e(Ko,Kgr),e(Ko,Ar),M(_8,Ar,null),e(Ar,Zgr),e(Ar,Fbe),e(Fbe,ehr),e(Ar,ohr),e(Ar,Za),e(Za,rhr),e(Za,Tbe),e(Tbe,thr),e(Za,ahr),e(Za,Mbe),e(Mbe,nhr),e(Za,shr),e(Za,Ebe),e(Ebe,lhr),e(Za,ihr),e(Ar,dhr),e(Ar,se),e(se,U0),e(U0,Cbe),e(Cbe,chr),e(U0,fhr),e(U0,aQ),e(aQ,mhr),e(U0,ghr),e(se,hhr),e(se,J0),e(J0,wbe),e(wbe,phr),e(J0,uhr),e(J0,nQ),e(nQ,_hr),e(J0,bhr),e(se,vhr),e(se,Y0),e(Y0,Abe),e(Abe,Fhr),e(Y0,Thr),e(Y0,sQ),e(sQ,Mhr),e(Y0,Ehr),e(se,Chr),e(se,K0),e(K0,ybe),e(ybe,whr),e(K0,Ahr),e(K0,lQ),e(lQ,yhr),e(K0,Lhr),e(se,xhr),e(se,Z0),e(Z0,Lbe),e(Lbe,$hr),e(Z0,khr),e(Z0,iQ),e(iQ,Shr),e(Z0,Rhr),e(se,Phr),e(se,eT),e(eT,xbe),e(xbe,Bhr),e(eT,Ihr),e(eT,dQ),e(dQ,Nhr),e(eT,qhr),e(se,jhr),e(se,oT),e(oT,$be),e($be,Dhr),e(oT,Ghr),e(oT,cQ),e(cQ,Ohr),e(oT,Vhr),e(se,Xhr),e(se,rT),e(rT,kbe),e(kbe,zhr),e(rT,Whr),e(rT,fQ),e(fQ,Qhr),e(rT,Hhr),e(se,Uhr),e(se,tT),e(tT,Sbe),e(Sbe,Jhr),e(tT,Yhr),e(tT,mQ),e(mQ,Khr),e(tT,Zhr),e(se,epr),e(se,aT),e(aT,Rbe),e(Rbe,opr),e(aT,rpr),e(aT,gQ),e(gQ,tpr),e(aT,apr),e(se,npr),e(se,nT),e(nT,Pbe),e(Pbe,spr),e(nT,lpr),e(nT,hQ),e(hQ,ipr),e(nT,dpr),e(se,cpr),e(se,sT),e(sT,Bbe),e(Bbe,fpr),e(sT,mpr),e(sT,pQ),e(pQ,gpr),e(sT,hpr),e(se,ppr),e(se,lT),e(lT,Ibe),e(Ibe,upr),e(lT,_pr),e(lT,uQ),e(uQ,bpr),e(lT,vpr),e(se,Fpr),e(se,iT),e(iT,Nbe),e(Nbe,Tpr),e(iT,Mpr),e(iT,_Q),e(_Q,Epr),e(iT,Cpr),e(se,wpr),e(se,dT),e(dT,qbe),e(qbe,Apr),e(dT,ypr),e(dT,bQ),e(bQ,Lpr),e(dT,xpr),e(se,$pr),e(se,cT),e(cT,jbe),e(jbe,kpr),e(cT,Spr),e(cT,vQ),e(vQ,Rpr),e(cT,Ppr),e(se,Bpr),e(se,fT),e(fT,Dbe),e(Dbe,Ipr),e(fT,Npr),e(fT,FQ),e(FQ,qpr),e(fT,jpr),e(se,Dpr),e(se,mT),e(mT,Gbe),e(Gbe,Gpr),e(mT,Opr),e(mT,TQ),e(TQ,Vpr),e(mT,Xpr),e(se,zpr),e(se,gT),e(gT,Obe),e(Obe,Wpr),e(gT,Qpr),e(gT,MQ),e(MQ,Hpr),e(gT,Upr),e(se,Jpr),e(se,hT),e(hT,Vbe),e(Vbe,Ypr),e(hT,Kpr),e(hT,EQ),e(EQ,Zpr),e(hT,eur),e(se,our),e(se,pT),e(pT,Xbe),e(Xbe,rur),e(pT,tur),e(pT,CQ),e(CQ,aur),e(pT,nur),e(se,sur),e(se,uT),e(uT,zbe),e(zbe,lur),e(uT,iur),e(uT,wQ),e(wQ,dur),e(uT,cur),e(se,fur),e(se,_T),e(_T,Wbe),e(Wbe,mur),e(_T,gur),e(_T,AQ),e(AQ,hur),e(_T,pur),e(Ar,uur),M(bT,Ar,null),b(f,lje,_),b(f,Qd,_),e(Qd,vT),e(vT,Qbe),M(b8,Qbe,null),e(Qd,_ur),e(Qd,Hbe),e(Hbe,bur),b(f,ije,_),b(f,Zo,_),M(v8,Zo,null),e(Zo,vur),e(Zo,Hd),e(Hd,Fur),e(Hd,yQ),e(yQ,Tur),e(Hd,Mur),e(Hd,LQ),e(LQ,Eur),e(Hd,Cur),e(Zo,wur),e(Zo,F8),e(F8,Aur),e(F8,Ube),e(Ube,yur),e(F8,Lur),e(Zo,xur),e(Zo,xt),M(T8,xt,null),e(xt,$ur),e(xt,Jbe),e(Jbe,kur),e(xt,Sur),e(xt,Ud),e(Ud,Rur),e(Ud,Ybe),e(Ybe,Pur),e(Ud,Bur),e(Ud,xQ),e(xQ,Iur),e(Ud,Nur),e(xt,qur),M(FT,xt,null),e(Zo,jur),e(Zo,yr),M(M8,yr,null),e(yr,Dur),e(yr,Kbe),e(Kbe,Gur),e(yr,Our),e(yr,en),e(en,Vur),e(en,Zbe),e(Zbe,Xur),e(en,zur),e(en,e2e),e(e2e,Wur),e(en,Qur),e(en,o2e),e(o2e,Hur),e(en,Uur),e(yr,Jur),e(yr,Me),e(Me,TT),e(TT,r2e),e(r2e,Yur),e(TT,Kur),e(TT,$Q),e($Q,Zur),e(TT,e_r),e(Me,o_r),e(Me,MT),e(MT,t2e),e(t2e,r_r),e(MT,t_r),e(MT,kQ),e(kQ,a_r),e(MT,n_r),e(Me,s_r),e(Me,ET),e(ET,a2e),e(a2e,l_r),e(ET,i_r),e(ET,SQ),e(SQ,d_r),e(ET,c_r),e(Me,f_r),e(Me,CT),e(CT,n2e),e(n2e,m_r),e(CT,g_r),e(CT,RQ),e(RQ,h_r),e(CT,p_r),e(Me,u_r),e(Me,wT),e(wT,s2e),e(s2e,__r),e(wT,b_r),e(wT,PQ),e(PQ,v_r),e(wT,F_r),e(Me,T_r),e(Me,AT),e(AT,l2e),e(l2e,M_r),e(AT,E_r),e(AT,BQ),e(BQ,C_r),e(AT,w_r),e(Me,A_r),e(Me,yT),e(yT,i2e),e(i2e,y_r),e(yT,L_r),e(yT,IQ),e(IQ,x_r),e(yT,$_r),e(Me,k_r),e(Me,LT),e(LT,d2e),e(d2e,S_r),e(LT,R_r),e(LT,NQ),e(NQ,P_r),e(LT,B_r),e(Me,I_r),e(Me,xT),e(xT,c2e),e(c2e,N_r),e(xT,q_r),e(xT,qQ),e(qQ,j_r),e(xT,D_r),e(Me,G_r),e(Me,$T),e($T,f2e),e(f2e,O_r),e($T,V_r),e($T,jQ),e(jQ,X_r),e($T,z_r),e(Me,W_r),e(Me,kT),e(kT,m2e),e(m2e,Q_r),e(kT,H_r),e(kT,DQ),e(DQ,U_r),e(kT,J_r),e(Me,Y_r),e(Me,ST),e(ST,g2e),e(g2e,K_r),e(ST,Z_r),e(ST,GQ),e(GQ,e1r),e(ST,o1r),e(yr,r1r),M(RT,yr,null),b(f,dje,_),b(f,Jd,_),e(Jd,PT),e(PT,h2e),M(E8,h2e,null),e(Jd,t1r),e(Jd,p2e),e(p2e,a1r),b(f,cje,_),b(f,er,_),M(C8,er,null),e(er,n1r),e(er,Yd),e(Yd,s1r),e(Yd,OQ),e(OQ,l1r),e(Yd,i1r),e(Yd,VQ),e(VQ,d1r),e(Yd,c1r),e(er,f1r),e(er,w8),e(w8,m1r),e(w8,u2e),e(u2e,g1r),e(w8,h1r),e(er,p1r),e(er,$t),M(A8,$t,null),e($t,u1r),e($t,_2e),e(_2e,_1r),e($t,b1r),e($t,Kd),e(Kd,v1r),e(Kd,b2e),e(b2e,F1r),e(Kd,T1r),e(Kd,XQ),e(XQ,M1r),e(Kd,E1r),e($t,C1r),M(BT,$t,null),e(er,w1r),e(er,Lr),M(y8,Lr,null),e(Lr,A1r),e(Lr,v2e),e(v2e,y1r),e(Lr,L1r),e(Lr,on),e(on,x1r),e(on,F2e),e(F2e,$1r),e(on,k1r),e(on,T2e),e(T2e,S1r),e(on,R1r),e(on,M2e),e(M2e,P1r),e(on,B1r),e(Lr,I1r),e(Lr,rn),e(rn,IT),e(IT,E2e),e(E2e,N1r),e(IT,q1r),e(IT,zQ),e(zQ,j1r),e(IT,D1r),e(rn,G1r),e(rn,NT),e(NT,C2e),e(C2e,O1r),e(NT,V1r),e(NT,WQ),e(WQ,X1r),e(NT,z1r),e(rn,W1r),e(rn,qT),e(qT,w2e),e(w2e,Q1r),e(qT,H1r),e(qT,QQ),e(QQ,U1r),e(qT,J1r),e(rn,Y1r),e(rn,jT),e(jT,A2e),e(A2e,K1r),e(jT,Z1r),e(jT,HQ),e(HQ,e7r),e(jT,o7r),e(Lr,r7r),M(DT,Lr,null),b(f,fje,_),b(f,Zd,_),e(Zd,GT),e(GT,y2e),M(L8,y2e,null),e(Zd,t7r),e(Zd,L2e),e(L2e,a7r),b(f,mje,_),b(f,or,_),M(x8,or,null),e(or,n7r),e(or,ec),e(ec,s7r),e(ec,UQ),e(UQ,l7r),e(ec,i7r),e(ec,JQ),e(JQ,d7r),e(ec,c7r),e(or,f7r),e(or,$8),e($8,m7r),e($8,x2e),e(x2e,g7r),e($8,h7r),e(or,p7r),e(or,kt),M(k8,kt,null),e(kt,u7r),e(kt,$2e),e($2e,_7r),e(kt,b7r),e(kt,oc),e(oc,v7r),e(oc,k2e),e(k2e,F7r),e(oc,T7r),e(oc,YQ),e(YQ,M7r),e(oc,E7r),e(kt,C7r),M(OT,kt,null),e(or,w7r),e(or,xr),M(S8,xr,null),e(xr,A7r),e(xr,S2e),e(S2e,y7r),e(xr,L7r),e(xr,tn),e(tn,x7r),e(tn,R2e),e(R2e,$7r),e(tn,k7r),e(tn,P2e),e(P2e,S7r),e(tn,R7r),e(tn,B2e),e(B2e,P7r),e(tn,B7r),e(xr,I7r),e(xr,ie),e(ie,VT),e(VT,I2e),e(I2e,N7r),e(VT,q7r),e(VT,KQ),e(KQ,j7r),e(VT,D7r),e(ie,G7r),e(ie,XT),e(XT,N2e),e(N2e,O7r),e(XT,V7r),e(XT,ZQ),e(ZQ,X7r),e(XT,z7r),e(ie,W7r),e(ie,zT),e(zT,q2e),e(q2e,Q7r),e(zT,H7r),e(zT,eH),e(eH,U7r),e(zT,J7r),e(ie,Y7r),e(ie,WT),e(WT,j2e),e(j2e,K7r),e(WT,Z7r),e(WT,oH),e(oH,ebr),e(WT,obr),e(ie,rbr),e(ie,QT),e(QT,D2e),e(D2e,tbr),e(QT,abr),e(QT,rH),e(rH,nbr),e(QT,sbr),e(ie,lbr),e(ie,HT),e(HT,G2e),e(G2e,ibr),e(HT,dbr),e(HT,tH),e(tH,cbr),e(HT,fbr),e(ie,mbr),e(ie,UT),e(UT,O2e),e(O2e,gbr),e(UT,hbr),e(UT,aH),e(aH,pbr),e(UT,ubr),e(ie,_br),e(ie,JT),e(JT,V2e),e(V2e,bbr),e(JT,vbr),e(JT,nH),e(nH,Fbr),e(JT,Tbr),e(ie,Mbr),e(ie,YT),e(YT,X2e),e(X2e,Ebr),e(YT,Cbr),e(YT,sH),e(sH,wbr),e(YT,Abr),e(ie,ybr),e(ie,KT),e(KT,z2e),e(z2e,Lbr),e(KT,xbr),e(KT,lH),e(lH,$br),e(KT,kbr),e(ie,Sbr),e(ie,ZT),e(ZT,W2e),e(W2e,Rbr),e(ZT,Pbr),e(ZT,iH),e(iH,Bbr),e(ZT,Ibr),e(ie,Nbr),e(ie,eM),e(eM,Q2e),e(Q2e,qbr),e(eM,jbr),e(eM,dH),e(dH,Dbr),e(eM,Gbr),e(ie,Obr),e(ie,oM),e(oM,H2e),e(H2e,Vbr),e(oM,Xbr),e(oM,cH),e(cH,zbr),e(oM,Wbr),e(ie,Qbr),e(ie,rM),e(rM,U2e),e(U2e,Hbr),e(rM,Ubr),e(rM,fH),e(fH,Jbr),e(rM,Ybr),e(ie,Kbr),e(ie,tM),e(tM,J2e),e(J2e,Zbr),e(tM,e2r),e(tM,mH),e(mH,o2r),e(tM,r2r),e(ie,t2r),e(ie,aM),e(aM,Y2e),e(Y2e,a2r),e(aM,n2r),e(aM,gH),e(gH,s2r),e(aM,l2r),e(ie,i2r),e(ie,nM),e(nM,K2e),e(K2e,d2r),e(nM,c2r),e(nM,hH),e(hH,f2r),e(nM,m2r),e(ie,g2r),e(ie,sM),e(sM,Z2e),e(Z2e,h2r),e(sM,p2r),e(sM,pH),e(pH,u2r),e(sM,_2r),e(ie,b2r),e(ie,lM),e(lM,e4e),e(e4e,v2r),e(lM,F2r),e(lM,uH),e(uH,T2r),e(lM,M2r),e(ie,E2r),e(ie,iM),e(iM,o4e),e(o4e,C2r),e(iM,w2r),e(iM,_H),e(_H,A2r),e(iM,y2r),e(xr,L2r),M(dM,xr,null),b(f,gje,_),b(f,rc,_),e(rc,cM),e(cM,r4e),M(R8,r4e,null),e(rc,x2r),e(rc,t4e),e(t4e,$2r),b(f,hje,_),b(f,rr,_),M(P8,rr,null),e(rr,k2r),e(rr,tc),e(tc,S2r),e(tc,bH),e(bH,R2r),e(tc,P2r),e(tc,vH),e(vH,B2r),e(tc,I2r),e(rr,N2r),e(rr,B8),e(B8,q2r),e(B8,a4e),e(a4e,j2r),e(B8,D2r),e(rr,G2r),e(rr,St),M(I8,St,null),e(St,O2r),e(St,n4e),e(n4e,V2r),e(St,X2r),e(St,ac),e(ac,z2r),e(ac,s4e),e(s4e,W2r),e(ac,Q2r),e(ac,FH),e(FH,H2r),e(ac,U2r),e(St,J2r),M(fM,St,null),e(rr,Y2r),e(rr,$r),M(N8,$r,null),e($r,K2r),e($r,l4e),e(l4e,Z2r),e($r,e4r),e($r,an),e(an,o4r),e(an,i4e),e(i4e,r4r),e(an,t4r),e(an,d4e),e(d4e,a4r),e(an,n4r),e(an,c4e),e(c4e,s4r),e(an,l4r),e($r,i4r),e($r,ye),e(ye,mM),e(mM,f4e),e(f4e,d4r),e(mM,c4r),e(mM,TH),e(TH,f4r),e(mM,m4r),e(ye,g4r),e(ye,gM),e(gM,m4e),e(m4e,h4r),e(gM,p4r),e(gM,MH),e(MH,u4r),e(gM,_4r),e(ye,b4r),e(ye,hM),e(hM,g4e),e(g4e,v4r),e(hM,F4r),e(hM,EH),e(EH,T4r),e(hM,M4r),e(ye,E4r),e(ye,pM),e(pM,h4e),e(h4e,C4r),e(pM,w4r),e(pM,CH),e(CH,A4r),e(pM,y4r),e(ye,L4r),e(ye,uM),e(uM,p4e),e(p4e,x4r),e(uM,$4r),e(uM,wH),e(wH,k4r),e(uM,S4r),e(ye,R4r),e(ye,_M),e(_M,u4e),e(u4e,P4r),e(_M,B4r),e(_M,AH),e(AH,I4r),e(_M,N4r),e(ye,q4r),e(ye,bM),e(bM,_4e),e(_4e,j4r),e(bM,D4r),e(bM,yH),e(yH,G4r),e(bM,O4r),e(ye,V4r),e(ye,vM),e(vM,b4e),e(b4e,X4r),e(vM,z4r),e(vM,LH),e(LH,W4r),e(vM,Q4r),e(ye,H4r),e(ye,FM),e(FM,v4e),e(v4e,U4r),e(FM,J4r),e(FM,xH),e(xH,Y4r),e(FM,K4r),e(ye,Z4r),e(ye,TM),e(TM,F4e),e(F4e,evr),e(TM,ovr),e(TM,$H),e($H,rvr),e(TM,tvr),e($r,avr),M(MM,$r,null),b(f,pje,_),b(f,nc,_),e(nc,EM),e(EM,T4e),M(q8,T4e,null),e(nc,nvr),e(nc,M4e),e(M4e,svr),b(f,uje,_),b(f,tr,_),M(j8,tr,null),e(tr,lvr),e(tr,sc),e(sc,ivr),e(sc,kH),e(kH,dvr),e(sc,cvr),e(sc,SH),e(SH,fvr),e(sc,mvr),e(tr,gvr),e(tr,D8),e(D8,hvr),e(D8,E4e),e(E4e,pvr),e(D8,uvr),e(tr,_vr),e(tr,Rt),M(G8,Rt,null),e(Rt,bvr),e(Rt,C4e),e(C4e,vvr),e(Rt,Fvr),e(Rt,lc),e(lc,Tvr),e(lc,w4e),e(w4e,Mvr),e(lc,Evr),e(lc,RH),e(RH,Cvr),e(lc,wvr),e(Rt,Avr),M(CM,Rt,null),e(tr,yvr),e(tr,kr),M(O8,kr,null),e(kr,Lvr),e(kr,A4e),e(A4e,xvr),e(kr,$vr),e(kr,nn),e(nn,kvr),e(nn,y4e),e(y4e,Svr),e(nn,Rvr),e(nn,L4e),e(L4e,Pvr),e(nn,Bvr),e(nn,x4e),e(x4e,Ivr),e(nn,Nvr),e(kr,qvr),e(kr,oe),e(oe,wM),e(wM,$4e),e($4e,jvr),e(wM,Dvr),e(wM,PH),e(PH,Gvr),e(wM,Ovr),e(oe,Vvr),e(oe,AM),e(AM,k4e),e(k4e,Xvr),e(AM,zvr),e(AM,BH),e(BH,Wvr),e(AM,Qvr),e(oe,Hvr),e(oe,yM),e(yM,S4e),e(S4e,Uvr),e(yM,Jvr),e(yM,IH),e(IH,Yvr),e(yM,Kvr),e(oe,Zvr),e(oe,LM),e(LM,R4e),e(R4e,eFr),e(LM,oFr),e(LM,NH),e(NH,rFr),e(LM,tFr),e(oe,aFr),e(oe,xM),e(xM,P4e),e(P4e,nFr),e(xM,sFr),e(xM,qH),e(qH,lFr),e(xM,iFr),e(oe,dFr),e(oe,$M),e($M,B4e),e(B4e,cFr),e($M,fFr),e($M,jH),e(jH,mFr),e($M,gFr),e(oe,hFr),e(oe,kM),e(kM,I4e),e(I4e,pFr),e(kM,uFr),e(kM,DH),e(DH,_Fr),e(kM,bFr),e(oe,vFr),e(oe,SM),e(SM,N4e),e(N4e,FFr),e(SM,TFr),e(SM,GH),e(GH,MFr),e(SM,EFr),e(oe,CFr),e(oe,RM),e(RM,q4e),e(q4e,wFr),e(RM,AFr),e(RM,OH),e(OH,yFr),e(RM,LFr),e(oe,xFr),e(oe,PM),e(PM,j4e),e(j4e,$Fr),e(PM,kFr),e(PM,VH),e(VH,SFr),e(PM,RFr),e(oe,PFr),e(oe,BM),e(BM,D4e),e(D4e,BFr),e(BM,IFr),e(BM,XH),e(XH,NFr),e(BM,qFr),e(oe,jFr),e(oe,IM),e(IM,G4e),e(G4e,DFr),e(IM,GFr),e(IM,zH),e(zH,OFr),e(IM,VFr),e(oe,XFr),e(oe,NM),e(NM,O4e),e(O4e,zFr),e(NM,WFr),e(NM,WH),e(WH,QFr),e(NM,HFr),e(oe,UFr),e(oe,qM),e(qM,V4e),e(V4e,JFr),e(qM,YFr),e(qM,QH),e(QH,KFr),e(qM,ZFr),e(oe,e0r),e(oe,jM),e(jM,X4e),e(X4e,o0r),e(jM,r0r),e(jM,HH),e(HH,t0r),e(jM,a0r),e(oe,n0r),e(oe,DM),e(DM,z4e),e(z4e,s0r),e(DM,l0r),e(DM,UH),e(UH,i0r),e(DM,d0r),e(oe,c0r),e(oe,GM),e(GM,W4e),e(W4e,f0r),e(GM,m0r),e(GM,JH),e(JH,g0r),e(GM,h0r),e(oe,p0r),e(oe,OM),e(OM,Q4e),e(Q4e,u0r),e(OM,_0r),e(OM,YH),e(YH,b0r),e(OM,v0r),e(oe,F0r),e(oe,VM),e(VM,H4e),e(H4e,T0r),e(VM,M0r),e(VM,KH),e(KH,E0r),e(VM,C0r),e(oe,w0r),e(oe,XM),e(XM,U4e),e(U4e,A0r),e(XM,y0r),e(XM,ZH),e(ZH,L0r),e(XM,x0r),e(oe,$0r),e(oe,zM),e(zM,J4e),e(J4e,k0r),e(zM,S0r),e(zM,eU),e(eU,R0r),e(zM,P0r),e(oe,B0r),e(oe,WM),e(WM,Y4e),e(Y4e,I0r),e(WM,N0r),e(WM,oU),e(oU,q0r),e(WM,j0r),e(oe,D0r),e(oe,QM),e(QM,K4e),e(K4e,G0r),e(QM,O0r),e(QM,rU),e(rU,V0r),e(QM,X0r),e(oe,z0r),e(oe,HM),e(HM,Z4e),e(Z4e,W0r),e(HM,Q0r),e(HM,tU),e(tU,H0r),e(HM,U0r),e(oe,J0r),e(oe,UM),e(UM,eve),e(eve,Y0r),e(UM,K0r),e(UM,aU),e(aU,Z0r),e(UM,eTr),e(oe,oTr),e(oe,JM),e(JM,ove),e(ove,rTr),e(JM,tTr),e(JM,nU),e(nU,aTr),e(JM,nTr),e(kr,sTr),M(YM,kr,null),b(f,_je,_),b(f,ic,_),e(ic,KM),e(KM,rve),M(V8,rve,null),e(ic,lTr),e(ic,tve),e(tve,iTr),b(f,bje,_),b(f,ar,_),M(X8,ar,null),e(ar,dTr),e(ar,dc),e(dc,cTr),e(dc,sU),e(sU,fTr),e(dc,mTr),e(dc,lU),e(lU,gTr),e(dc,hTr),e(ar,pTr),e(ar,z8),e(z8,uTr),e(z8,ave),e(ave,_Tr),e(z8,bTr),e(ar,vTr),e(ar,Pt),M(W8,Pt,null),e(Pt,FTr),e(Pt,nve),e(nve,TTr),e(Pt,MTr),e(Pt,cc),e(cc,ETr),e(cc,sve),e(sve,CTr),e(cc,wTr),e(cc,iU),e(iU,ATr),e(cc,yTr),e(Pt,LTr),M(ZM,Pt,null),e(ar,xTr),e(ar,Sr),M(Q8,Sr,null),e(Sr,$Tr),e(Sr,lve),e(lve,kTr),e(Sr,STr),e(Sr,sn),e(sn,RTr),e(sn,ive),e(ive,PTr),e(sn,BTr),e(sn,dve),e(dve,ITr),e(sn,NTr),e(sn,cve),e(cve,qTr),e(sn,jTr),e(Sr,DTr),e(Sr,pe),e(pe,eE),e(eE,fve),e(fve,GTr),e(eE,OTr),e(eE,dU),e(dU,VTr),e(eE,XTr),e(pe,zTr),e(pe,oE),e(oE,mve),e(mve,WTr),e(oE,QTr),e(oE,cU),e(cU,HTr),e(oE,UTr),e(pe,JTr),e(pe,rE),e(rE,gve),e(gve,YTr),e(rE,KTr),e(rE,fU),e(fU,ZTr),e(rE,eMr),e(pe,oMr),e(pe,tE),e(tE,hve),e(hve,rMr),e(tE,tMr),e(tE,mU),e(mU,aMr),e(tE,nMr),e(pe,sMr),e(pe,aE),e(aE,pve),e(pve,lMr),e(aE,iMr),e(aE,gU),e(gU,dMr),e(aE,cMr),e(pe,fMr),e(pe,nE),e(nE,uve),e(uve,mMr),e(nE,gMr),e(nE,hU),e(hU,hMr),e(nE,pMr),e(pe,uMr),e(pe,sE),e(sE,_ve),e(_ve,_Mr),e(sE,bMr),e(sE,pU),e(pU,vMr),e(sE,FMr),e(pe,TMr),e(pe,lE),e(lE,bve),e(bve,MMr),e(lE,EMr),e(lE,uU),e(uU,CMr),e(lE,wMr),e(pe,AMr),e(pe,iE),e(iE,vve),e(vve,yMr),e(iE,LMr),e(iE,_U),e(_U,xMr),e(iE,$Mr),e(pe,kMr),e(pe,dE),e(dE,Fve),e(Fve,SMr),e(dE,RMr),e(dE,bU),e(bU,PMr),e(dE,BMr),e(pe,IMr),e(pe,cE),e(cE,Tve),e(Tve,NMr),e(cE,qMr),e(cE,vU),e(vU,jMr),e(cE,DMr),e(pe,GMr),e(pe,fE),e(fE,Mve),e(Mve,OMr),e(fE,VMr),e(fE,FU),e(FU,XMr),e(fE,zMr),e(pe,WMr),e(pe,mE),e(mE,Eve),e(Eve,QMr),e(mE,HMr),e(mE,TU),e(TU,UMr),e(mE,JMr),e(pe,YMr),e(pe,gE),e(gE,Cve),e(Cve,KMr),e(gE,ZMr),e(gE,MU),e(MU,eEr),e(gE,oEr),e(pe,rEr),e(pe,hE),e(hE,wve),e(wve,tEr),e(hE,aEr),e(hE,EU),e(EU,nEr),e(hE,sEr),e(pe,lEr),e(pe,pE),e(pE,Ave),e(Ave,iEr),e(pE,dEr),e(pE,CU),e(CU,cEr),e(pE,fEr),e(pe,mEr),e(pe,uE),e(uE,yve),e(yve,gEr),e(uE,hEr),e(uE,wU),e(wU,pEr),e(uE,uEr),e(Sr,_Er),M(_E,Sr,null),b(f,vje,_),b(f,fc,_),e(fc,bE),e(bE,Lve),M(H8,Lve,null),e(fc,bEr),e(fc,xve),e(xve,vEr),b(f,Fje,_),b(f,nr,_),M(U8,nr,null),e(nr,FEr),e(nr,mc),e(mc,TEr),e(mc,AU),e(AU,MEr),e(mc,EEr),e(mc,yU),e(yU,CEr),e(mc,wEr),e(nr,AEr),e(nr,J8),e(J8,yEr),e(J8,$ve),e($ve,LEr),e(J8,xEr),e(nr,$Er),e(nr,Bt),M(Y8,Bt,null),e(Bt,kEr),e(Bt,kve),e(kve,SEr),e(Bt,REr),e(Bt,gc),e(gc,PEr),e(gc,Sve),e(Sve,BEr),e(gc,IEr),e(gc,LU),e(LU,NEr),e(gc,qEr),e(Bt,jEr),M(vE,Bt,null),e(nr,DEr),e(nr,Rr),M(K8,Rr,null),e(Rr,GEr),e(Rr,Rve),e(Rve,OEr),e(Rr,VEr),e(Rr,ln),e(ln,XEr),e(ln,Pve),e(Pve,zEr),e(ln,WEr),e(ln,Bve),e(Bve,QEr),e(ln,HEr),e(ln,Ive),e(Ive,UEr),e(ln,JEr),e(Rr,YEr),e(Rr,Z8),e(Z8,FE),e(FE,Nve),e(Nve,KEr),e(FE,ZEr),e(FE,xU),e(xU,eCr),e(FE,oCr),e(Z8,rCr),e(Z8,TE),e(TE,qve),e(qve,tCr),e(TE,aCr),e(TE,$U),e($U,nCr),e(TE,sCr),e(Rr,lCr),M(ME,Rr,null),b(f,Tje,_),b(f,hc,_),e(hc,EE),e(EE,jve),M(e9,jve,null),e(hc,iCr),e(hc,Dve),e(Dve,dCr),b(f,Mje,_),b(f,sr,_),M(o9,sr,null),e(sr,cCr),e(sr,pc),e(pc,fCr),e(pc,kU),e(kU,mCr),e(pc,gCr),e(pc,SU),e(SU,hCr),e(pc,pCr),e(sr,uCr),e(sr,r9),e(r9,_Cr),e(r9,Gve),e(Gve,bCr),e(r9,vCr),e(sr,FCr),e(sr,It),M(t9,It,null),e(It,TCr),e(It,Ove),e(Ove,MCr),e(It,ECr),e(It,uc),e(uc,CCr),e(uc,Vve),e(Vve,wCr),e(uc,ACr),e(uc,RU),e(RU,yCr),e(uc,LCr),e(It,xCr),M(CE,It,null),e(sr,$Cr),e(sr,Pr),M(a9,Pr,null),e(Pr,kCr),e(Pr,Xve),e(Xve,SCr),e(Pr,RCr),e(Pr,dn),e(dn,PCr),e(dn,zve),e(zve,BCr),e(dn,ICr),e(dn,Wve),e(Wve,NCr),e(dn,qCr),e(dn,Qve),e(Qve,jCr),e(dn,DCr),e(Pr,GCr),e(Pr,Hve),e(Hve,wE),e(wE,Uve),e(Uve,OCr),e(wE,VCr),e(wE,PU),e(PU,XCr),e(wE,zCr),e(Pr,WCr),M(AE,Pr,null),b(f,Eje,_),b(f,_c,_),e(_c,yE),e(yE,Jve),M(n9,Jve,null),e(_c,QCr),e(_c,Yve),e(Yve,HCr),b(f,Cje,_),b(f,lr,_),M(s9,lr,null),e(lr,UCr),e(lr,bc),e(bc,JCr),e(bc,BU),e(BU,YCr),e(bc,KCr),e(bc,IU),e(IU,ZCr),e(bc,e5r),e(lr,o5r),e(lr,l9),e(l9,r5r),e(l9,Kve),e(Kve,t5r),e(l9,a5r),e(lr,n5r),e(lr,Nt),M(i9,Nt,null),e(Nt,s5r),e(Nt,Zve),e(Zve,l5r),e(Nt,i5r),e(Nt,vc),e(vc,d5r),e(vc,eFe),e(eFe,c5r),e(vc,f5r),e(vc,NU),e(NU,m5r),e(vc,g5r),e(Nt,h5r),M(LE,Nt,null),e(lr,p5r),e(lr,Br),M(d9,Br,null),e(Br,u5r),e(Br,oFe),e(oFe,_5r),e(Br,b5r),e(Br,cn),e(cn,v5r),e(cn,rFe),e(rFe,F5r),e(cn,T5r),e(cn,tFe),e(tFe,M5r),e(cn,E5r),e(cn,aFe),e(aFe,C5r),e(cn,w5r),e(Br,A5r),e(Br,de),e(de,xE),e(xE,nFe),e(nFe,y5r),e(xE,L5r),e(xE,qU),e(qU,x5r),e(xE,$5r),e(de,k5r),e(de,$E),e($E,sFe),e(sFe,S5r),e($E,R5r),e($E,jU),e(jU,P5r),e($E,B5r),e(de,I5r),e(de,kE),e(kE,lFe),e(lFe,N5r),e(kE,q5r),e(kE,DU),e(DU,j5r),e(kE,D5r),e(de,G5r),e(de,SE),e(SE,iFe),e(iFe,O5r),e(SE,V5r),e(SE,GU),e(GU,X5r),e(SE,z5r),e(de,W5r),e(de,RE),e(RE,dFe),e(dFe,Q5r),e(RE,H5r),e(RE,OU),e(OU,U5r),e(RE,J5r),e(de,Y5r),e(de,PE),e(PE,cFe),e(cFe,K5r),e(PE,Z5r),e(PE,VU),e(VU,e3r),e(PE,o3r),e(de,r3r),e(de,BE),e(BE,fFe),e(fFe,t3r),e(BE,a3r),e(BE,XU),e(XU,n3r),e(BE,s3r),e(de,l3r),e(de,IE),e(IE,mFe),e(mFe,i3r),e(IE,d3r),e(IE,zU),e(zU,c3r),e(IE,f3r),e(de,m3r),e(de,NE),e(NE,gFe),e(gFe,g3r),e(NE,h3r),e(NE,WU),e(WU,p3r),e(NE,u3r),e(de,_3r),e(de,qE),e(qE,hFe),e(hFe,b3r),e(qE,v3r),e(qE,QU),e(QU,F3r),e(qE,T3r),e(de,M3r),e(de,jE),e(jE,pFe),e(pFe,E3r),e(jE,C3r),e(jE,HU),e(HU,w3r),e(jE,A3r),e(de,y3r),e(de,DE),e(DE,uFe),e(uFe,L3r),e(DE,x3r),e(DE,UU),e(UU,$3r),e(DE,k3r),e(de,S3r),e(de,GE),e(GE,_Fe),e(_Fe,R3r),e(GE,P3r),e(GE,JU),e(JU,B3r),e(GE,I3r),e(de,N3r),e(de,OE),e(OE,bFe),e(bFe,q3r),e(OE,j3r),e(OE,YU),e(YU,D3r),e(OE,G3r),e(de,O3r),e(de,VE),e(VE,vFe),e(vFe,V3r),e(VE,X3r),e(VE,KU),e(KU,z3r),e(VE,W3r),e(de,Q3r),e(de,XE),e(XE,FFe),e(FFe,H3r),e(XE,U3r),e(XE,ZU),e(ZU,J3r),e(XE,Y3r),e(de,K3r),e(de,zE),e(zE,TFe),e(TFe,Z3r),e(zE,ewr),e(zE,eJ),e(eJ,owr),e(zE,rwr),e(de,twr),e(de,WE),e(WE,MFe),e(MFe,awr),e(WE,nwr),e(WE,oJ),e(oJ,swr),e(WE,lwr),e(de,iwr),e(de,QE),e(QE,EFe),e(EFe,dwr),e(QE,cwr),e(QE,rJ),e(rJ,fwr),e(QE,mwr),e(de,gwr),e(de,HE),e(HE,CFe),e(CFe,hwr),e(HE,pwr),e(HE,tJ),e(tJ,uwr),e(HE,_wr),e(Br,bwr),M(UE,Br,null),b(f,wje,_),b(f,Fc,_),e(Fc,JE),e(JE,wFe),M(c9,wFe,null),e(Fc,vwr),e(Fc,AFe),e(AFe,Fwr),b(f,Aje,_),b(f,ir,_),M(f9,ir,null),e(ir,Twr),e(ir,Tc),e(Tc,Mwr),e(Tc,aJ),e(aJ,Ewr),e(Tc,Cwr),e(Tc,nJ),e(nJ,wwr),e(Tc,Awr),e(ir,ywr),e(ir,m9),e(m9,Lwr),e(m9,yFe),e(yFe,xwr),e(m9,$wr),e(ir,kwr),e(ir,qt),M(g9,qt,null),e(qt,Swr),e(qt,LFe),e(LFe,Rwr),e(qt,Pwr),e(qt,Mc),e(Mc,Bwr),e(Mc,xFe),e(xFe,Iwr),e(Mc,Nwr),e(Mc,sJ),e(sJ,qwr),e(Mc,jwr),e(qt,Dwr),M(YE,qt,null),e(ir,Gwr),e(ir,Ir),M(h9,Ir,null),e(Ir,Owr),e(Ir,$Fe),e($Fe,Vwr),e(Ir,Xwr),e(Ir,fn),e(fn,zwr),e(fn,kFe),e(kFe,Wwr),e(fn,Qwr),e(fn,SFe),e(SFe,Hwr),e(fn,Uwr),e(fn,RFe),e(RFe,Jwr),e(fn,Ywr),e(Ir,Kwr),e(Ir,ce),e(ce,KE),e(KE,PFe),e(PFe,Zwr),e(KE,e6r),e(KE,lJ),e(lJ,o6r),e(KE,r6r),e(ce,t6r),e(ce,ZE),e(ZE,BFe),e(BFe,a6r),e(ZE,n6r),e(ZE,iJ),e(iJ,s6r),e(ZE,l6r),e(ce,i6r),e(ce,eC),e(eC,IFe),e(IFe,d6r),e(eC,c6r),e(eC,dJ),e(dJ,f6r),e(eC,m6r),e(ce,g6r),e(ce,oC),e(oC,NFe),e(NFe,h6r),e(oC,p6r),e(oC,cJ),e(cJ,u6r),e(oC,_6r),e(ce,b6r),e(ce,rC),e(rC,qFe),e(qFe,v6r),e(rC,F6r),e(rC,fJ),e(fJ,T6r),e(rC,M6r),e(ce,E6r),e(ce,tC),e(tC,jFe),e(jFe,C6r),e(tC,w6r),e(tC,mJ),e(mJ,A6r),e(tC,y6r),e(ce,L6r),e(ce,aC),e(aC,DFe),e(DFe,x6r),e(aC,$6r),e(aC,gJ),e(gJ,k6r),e(aC,S6r),e(ce,R6r),e(ce,nC),e(nC,GFe),e(GFe,P6r),e(nC,B6r),e(nC,hJ),e(hJ,I6r),e(nC,N6r),e(ce,q6r),e(ce,sC),e(sC,OFe),e(OFe,j6r),e(sC,D6r),e(sC,pJ),e(pJ,G6r),e(sC,O6r),e(ce,V6r),e(ce,lC),e(lC,VFe),e(VFe,X6r),e(lC,z6r),e(lC,uJ),e(uJ,W6r),e(lC,Q6r),e(ce,H6r),e(ce,iC),e(iC,XFe),e(XFe,U6r),e(iC,J6r),e(iC,_J),e(_J,Y6r),e(iC,K6r),e(ce,Z6r),e(ce,dC),e(dC,zFe),e(zFe,eAr),e(dC,oAr),e(dC,bJ),e(bJ,rAr),e(dC,tAr),e(ce,aAr),e(ce,cC),e(cC,WFe),e(WFe,nAr),e(cC,sAr),e(cC,vJ),e(vJ,lAr),e(cC,iAr),e(ce,dAr),e(ce,fC),e(fC,QFe),e(QFe,cAr),e(fC,fAr),e(fC,FJ),e(FJ,mAr),e(fC,gAr),e(ce,hAr),e(ce,mC),e(mC,HFe),e(HFe,pAr),e(mC,uAr),e(mC,TJ),e(TJ,_Ar),e(mC,bAr),e(ce,vAr),e(ce,gC),e(gC,UFe),e(UFe,FAr),e(gC,TAr),e(gC,MJ),e(MJ,MAr),e(gC,EAr),e(ce,CAr),e(ce,hC),e(hC,JFe),e(JFe,wAr),e(hC,AAr),e(hC,EJ),e(EJ,yAr),e(hC,LAr),e(ce,xAr),e(ce,pC),e(pC,YFe),e(YFe,$Ar),e(pC,kAr),e(pC,CJ),e(CJ,SAr),e(pC,RAr),e(ce,PAr),e(ce,uC),e(uC,KFe),e(KFe,BAr),e(uC,IAr),e(uC,wJ),e(wJ,NAr),e(uC,qAr),e(ce,jAr),e(ce,_C),e(_C,ZFe),e(ZFe,DAr),e(_C,GAr),e(_C,AJ),e(AJ,OAr),e(_C,VAr),e(Ir,XAr),M(bC,Ir,null),b(f,yje,_),b(f,Ec,_),e(Ec,vC),e(vC,e0e),M(p9,e0e,null),e(Ec,zAr),e(Ec,o0e),e(o0e,WAr),b(f,Lje,_),b(f,dr,_),M(u9,dr,null),e(dr,QAr),e(dr,Cc),e(Cc,HAr),e(Cc,yJ),e(yJ,UAr),e(Cc,JAr),e(Cc,LJ),e(LJ,YAr),e(Cc,KAr),e(dr,ZAr),e(dr,_9),e(_9,eyr),e(_9,r0e),e(r0e,oyr),e(_9,ryr),e(dr,tyr),e(dr,jt),M(b9,jt,null),e(jt,ayr),e(jt,t0e),e(t0e,nyr),e(jt,syr),e(jt,wc),e(wc,lyr),e(wc,a0e),e(a0e,iyr),e(wc,dyr),e(wc,xJ),e(xJ,cyr),e(wc,fyr),e(jt,myr),M(FC,jt,null),e(dr,gyr),e(dr,Nr),M(v9,Nr,null),e(Nr,hyr),e(Nr,n0e),e(n0e,pyr),e(Nr,uyr),e(Nr,mn),e(mn,_yr),e(mn,s0e),e(s0e,byr),e(mn,vyr),e(mn,l0e),e(l0e,Fyr),e(mn,Tyr),e(mn,i0e),e(i0e,Myr),e(mn,Eyr),e(Nr,Cyr),e(Nr,d0e),e(d0e,TC),e(TC,c0e),e(c0e,wyr),e(TC,Ayr),e(TC,$J),e($J,yyr),e(TC,Lyr),e(Nr,xyr),M(MC,Nr,null),b(f,xje,_),b(f,Ac,_),e(Ac,EC),e(EC,f0e),M(F9,f0e,null),e(Ac,$yr),e(Ac,m0e),e(m0e,kyr),b(f,$je,_),b(f,cr,_),M(T9,cr,null),e(cr,Syr),e(cr,yc),e(yc,Ryr),e(yc,kJ),e(kJ,Pyr),e(yc,Byr),e(yc,SJ),e(SJ,Iyr),e(yc,Nyr),e(cr,qyr),e(cr,M9),e(M9,jyr),e(M9,g0e),e(g0e,Dyr),e(M9,Gyr),e(cr,Oyr),e(cr,Dt),M(E9,Dt,null),e(Dt,Vyr),e(Dt,h0e),e(h0e,Xyr),e(Dt,zyr),e(Dt,Lc),e(Lc,Wyr),e(Lc,p0e),e(p0e,Qyr),e(Lc,Hyr),e(Lc,RJ),e(RJ,Uyr),e(Lc,Jyr),e(Dt,Yyr),M(CC,Dt,null),e(cr,Kyr),e(cr,qr),M(C9,qr,null),e(qr,Zyr),e(qr,u0e),e(u0e,eLr),e(qr,oLr),e(qr,gn),e(gn,rLr),e(gn,_0e),e(_0e,tLr),e(gn,aLr),e(gn,b0e),e(b0e,nLr),e(gn,sLr),e(gn,v0e),e(v0e,lLr),e(gn,iLr),e(qr,dLr),e(qr,F0e),e(F0e,wC),e(wC,T0e),e(T0e,cLr),e(wC,fLr),e(wC,PJ),e(PJ,mLr),e(wC,gLr),e(qr,hLr),M(AC,qr,null),b(f,kje,_),b(f,xc,_),e(xc,yC),e(yC,M0e),M(w9,M0e,null),e(xc,pLr),e(xc,E0e),e(E0e,uLr),b(f,Sje,_),b(f,fr,_),M(A9,fr,null),e(fr,_Lr),e(fr,$c),e($c,bLr),e($c,BJ),e(BJ,vLr),e($c,FLr),e($c,IJ),e(IJ,TLr),e($c,MLr),e(fr,ELr),e(fr,y9),e(y9,CLr),e(y9,C0e),e(C0e,wLr),e(y9,ALr),e(fr,yLr),e(fr,Gt),M(L9,Gt,null),e(Gt,LLr),e(Gt,w0e),e(w0e,xLr),e(Gt,$Lr),e(Gt,kc),e(kc,kLr),e(kc,A0e),e(A0e,SLr),e(kc,RLr),e(kc,NJ),e(NJ,PLr),e(kc,BLr),e(Gt,ILr),M(LC,Gt,null),e(fr,NLr),e(fr,jr),M(x9,jr,null),e(jr,qLr),e(jr,y0e),e(y0e,jLr),e(jr,DLr),e(jr,hn),e(hn,GLr),e(hn,L0e),e(L0e,OLr),e(hn,VLr),e(hn,x0e),e(x0e,XLr),e(hn,zLr),e(hn,$0e),e($0e,WLr),e(hn,QLr),e(jr,HLr),e(jr,te),e(te,xC),e(xC,k0e),e(k0e,ULr),e(xC,JLr),e(xC,qJ),e(qJ,YLr),e(xC,KLr),e(te,ZLr),e(te,$C),e($C,S0e),e(S0e,e8r),e($C,o8r),e($C,jJ),e(jJ,r8r),e($C,t8r),e(te,a8r),e(te,kC),e(kC,R0e),e(R0e,n8r),e(kC,s8r),e(kC,DJ),e(DJ,l8r),e(kC,i8r),e(te,d8r),e(te,SC),e(SC,P0e),e(P0e,c8r),e(SC,f8r),e(SC,GJ),e(GJ,m8r),e(SC,g8r),e(te,h8r),e(te,RC),e(RC,B0e),e(B0e,p8r),e(RC,u8r),e(RC,OJ),e(OJ,_8r),e(RC,b8r),e(te,v8r),e(te,PC),e(PC,I0e),e(I0e,F8r),e(PC,T8r),e(PC,VJ),e(VJ,M8r),e(PC,E8r),e(te,C8r),e(te,BC),e(BC,N0e),e(N0e,w8r),e(BC,A8r),e(BC,XJ),e(XJ,y8r),e(BC,L8r),e(te,x8r),e(te,IC),e(IC,q0e),e(q0e,$8r),e(IC,k8r),e(IC,zJ),e(zJ,S8r),e(IC,R8r),e(te,P8r),e(te,NC),e(NC,j0e),e(j0e,B8r),e(NC,I8r),e(NC,WJ),e(WJ,N8r),e(NC,q8r),e(te,j8r),e(te,qC),e(qC,D0e),e(D0e,D8r),e(qC,G8r),e(qC,QJ),e(QJ,O8r),e(qC,V8r),e(te,X8r),e(te,jC),e(jC,G0e),e(G0e,z8r),e(jC,W8r),e(jC,HJ),e(HJ,Q8r),e(jC,H8r),e(te,U8r),e(te,DC),e(DC,O0e),e(O0e,J8r),e(DC,Y8r),e(DC,UJ),e(UJ,K8r),e(DC,Z8r),e(te,e9r),e(te,GC),e(GC,V0e),e(V0e,o9r),e(GC,r9r),e(GC,JJ),e(JJ,t9r),e(GC,a9r),e(te,n9r),e(te,OC),e(OC,X0e),e(X0e,s9r),e(OC,l9r),e(OC,YJ),e(YJ,i9r),e(OC,d9r),e(te,c9r),e(te,VC),e(VC,z0e),e(z0e,f9r),e(VC,m9r),e(VC,KJ),e(KJ,g9r),e(VC,h9r),e(te,p9r),e(te,XC),e(XC,W0e),e(W0e,u9r),e(XC,_9r),e(XC,ZJ),e(ZJ,b9r),e(XC,v9r),e(te,F9r),e(te,zC),e(zC,Q0e),e(Q0e,T9r),e(zC,M9r),e(zC,eY),e(eY,E9r),e(zC,C9r),e(te,w9r),e(te,WC),e(WC,H0e),e(H0e,A9r),e(WC,y9r),e(WC,oY),e(oY,L9r),e(WC,x9r),e(te,$9r),e(te,QC),e(QC,U0e),e(U0e,k9r),e(QC,S9r),e(QC,rY),e(rY,R9r),e(QC,P9r),e(te,B9r),e(te,HC),e(HC,J0e),e(J0e,I9r),e(HC,N9r),e(HC,tY),e(tY,q9r),e(HC,j9r),e(te,D9r),e(te,UC),e(UC,Y0e),e(Y0e,G9r),e(UC,O9r),e(UC,aY),e(aY,V9r),e(UC,X9r),e(te,z9r),e(te,JC),e(JC,K0e),e(K0e,W9r),e(JC,Q9r),e(JC,nY),e(nY,H9r),e(JC,U9r),e(te,J9r),e(te,YC),e(YC,Z0e),e(Z0e,Y9r),e(YC,K9r),e(YC,sY),e(sY,Z9r),e(YC,exr),e(te,oxr),e(te,KC),e(KC,eTe),e(eTe,rxr),e(KC,txr),e(KC,lY),e(lY,axr),e(KC,nxr),e(te,sxr),e(te,ZC),e(ZC,oTe),e(oTe,lxr),e(ZC,ixr),e(ZC,iY),e(iY,dxr),e(ZC,cxr),e(jr,fxr),M(e5,jr,null),b(f,Rje,_),b(f,Sc,_),e(Sc,o5),e(o5,rTe),M($9,rTe,null),e(Sc,mxr),e(Sc,tTe),e(tTe,gxr),b(f,Pje,_),b(f,mr,_),M(k9,mr,null),e(mr,hxr),e(mr,Rc),e(Rc,pxr),e(Rc,dY),e(dY,uxr),e(Rc,_xr),e(Rc,cY),e(cY,bxr),e(Rc,vxr),e(mr,Fxr),e(mr,S9),e(S9,Txr),e(S9,aTe),e(aTe,Mxr),e(S9,Exr),e(mr,Cxr),e(mr,Ot),M(R9,Ot,null),e(Ot,wxr),e(Ot,nTe),e(nTe,Axr),e(Ot,yxr),e(Ot,Pc),e(Pc,Lxr),e(Pc,sTe),e(sTe,xxr),e(Pc,$xr),e(Pc,fY),e(fY,kxr),e(Pc,Sxr),e(Ot,Rxr),M(r5,Ot,null),e(mr,Pxr),e(mr,Dr),M(P9,Dr,null),e(Dr,Bxr),e(Dr,lTe),e(lTe,Ixr),e(Dr,Nxr),e(Dr,pn),e(pn,qxr),e(pn,iTe),e(iTe,jxr),e(pn,Dxr),e(pn,dTe),e(dTe,Gxr),e(pn,Oxr),e(pn,cTe),e(cTe,Vxr),e(pn,Xxr),e(Dr,zxr),e(Dr,Re),e(Re,t5),e(t5,fTe),e(fTe,Wxr),e(t5,Qxr),e(t5,mY),e(mY,Hxr),e(t5,Uxr),e(Re,Jxr),e(Re,a5),e(a5,mTe),e(mTe,Yxr),e(a5,Kxr),e(a5,gY),e(gY,Zxr),e(a5,e$r),e(Re,o$r),e(Re,n5),e(n5,gTe),e(gTe,r$r),e(n5,t$r),e(n5,hY),e(hY,a$r),e(n5,n$r),e(Re,s$r),e(Re,s5),e(s5,hTe),e(hTe,l$r),e(s5,i$r),e(s5,pY),e(pY,d$r),e(s5,c$r),e(Re,f$r),e(Re,l5),e(l5,pTe),e(pTe,m$r),e(l5,g$r),e(l5,uY),e(uY,h$r),e(l5,p$r),e(Re,u$r),e(Re,i5),e(i5,uTe),e(uTe,_$r),e(i5,b$r),e(i5,_Y),e(_Y,v$r),e(i5,F$r),e(Re,T$r),e(Re,d5),e(d5,_Te),e(_Te,M$r),e(d5,E$r),e(d5,bY),e(bY,C$r),e(d5,w$r),e(Re,A$r),e(Re,c5),e(c5,bTe),e(bTe,y$r),e(c5,L$r),e(c5,vY),e(vY,x$r),e(c5,$$r),e(Re,k$r),e(Re,f5),e(f5,vTe),e(vTe,S$r),e(f5,R$r),e(f5,FY),e(FY,P$r),e(f5,B$r),e(Dr,I$r),M(m5,Dr,null),b(f,Bje,_),b(f,Bc,_),e(Bc,g5),e(g5,FTe),M(B9,FTe,null),e(Bc,N$r),e(Bc,TTe),e(TTe,q$r),b(f,Ije,_),b(f,gr,_),M(I9,gr,null),e(gr,j$r),e(gr,Ic),e(Ic,D$r),e(Ic,TY),e(TY,G$r),e(Ic,O$r),e(Ic,MY),e(MY,V$r),e(Ic,X$r),e(gr,z$r),e(gr,N9),e(N9,W$r),e(N9,MTe),e(MTe,Q$r),e(N9,H$r),e(gr,U$r),e(gr,Vt),M(q9,Vt,null),e(Vt,J$r),e(Vt,ETe),e(ETe,Y$r),e(Vt,K$r),e(Vt,Nc),e(Nc,Z$r),e(Nc,CTe),e(CTe,ekr),e(Nc,okr),e(Nc,EY),e(EY,rkr),e(Nc,tkr),e(Vt,akr),M(h5,Vt,null),e(gr,nkr),e(gr,Gr),M(j9,Gr,null),e(Gr,skr),e(Gr,wTe),e(wTe,lkr),e(Gr,ikr),e(Gr,un),e(un,dkr),e(un,ATe),e(ATe,ckr),e(un,fkr),e(un,yTe),e(yTe,mkr),e(un,gkr),e(un,LTe),e(LTe,hkr),e(un,pkr),e(Gr,ukr),e(Gr,Ee),e(Ee,p5),e(p5,xTe),e(xTe,_kr),e(p5,bkr),e(p5,CY),e(CY,vkr),e(p5,Fkr),e(Ee,Tkr),e(Ee,u5),e(u5,$Te),e($Te,Mkr),e(u5,Ekr),e(u5,wY),e(wY,Ckr),e(u5,wkr),e(Ee,Akr),e(Ee,_5),e(_5,kTe),e(kTe,ykr),e(_5,Lkr),e(_5,AY),e(AY,xkr),e(_5,$kr),e(Ee,kkr),e(Ee,b5),e(b5,STe),e(STe,Skr),e(b5,Rkr),e(b5,yY),e(yY,Pkr),e(b5,Bkr),e(Ee,Ikr),e(Ee,v5),e(v5,RTe),e(RTe,Nkr),e(v5,qkr),e(v5,LY),e(LY,jkr),e(v5,Dkr),e(Ee,Gkr),e(Ee,F5),e(F5,PTe),e(PTe,Okr),e(F5,Vkr),e(F5,xY),e(xY,Xkr),e(F5,zkr),e(Ee,Wkr),e(Ee,T5),e(T5,BTe),e(BTe,Qkr),e(T5,Hkr),e(T5,$Y),e($Y,Ukr),e(T5,Jkr),e(Ee,Ykr),e(Ee,M5),e(M5,ITe),e(ITe,Kkr),e(M5,Zkr),e(M5,kY),e(kY,eSr),e(M5,oSr),e(Ee,rSr),e(Ee,E5),e(E5,NTe),e(NTe,tSr),e(E5,aSr),e(E5,SY),e(SY,nSr),e(E5,sSr),e(Ee,lSr),e(Ee,C5),e(C5,qTe),e(qTe,iSr),e(C5,dSr),e(C5,RY),e(RY,cSr),e(C5,fSr),e(Ee,mSr),e(Ee,w5),e(w5,jTe),e(jTe,gSr),e(w5,hSr),e(w5,PY),e(PY,pSr),e(w5,uSr),e(Ee,_Sr),e(Ee,A5),e(A5,DTe),e(DTe,bSr),e(A5,vSr),e(A5,BY),e(BY,FSr),e(A5,TSr),e(Gr,MSr),M(y5,Gr,null),b(f,Nje,_),b(f,qc,_),e(qc,L5),e(L5,GTe),M(D9,GTe,null),e(qc,ESr),e(qc,OTe),e(OTe,CSr),b(f,qje,_),b(f,hr,_),M(G9,hr,null),e(hr,wSr),e(hr,jc),e(jc,ASr),e(jc,IY),e(IY,ySr),e(jc,LSr),e(jc,NY),e(NY,xSr),e(jc,$Sr),e(hr,kSr),e(hr,O9),e(O9,SSr),e(O9,VTe),e(VTe,RSr),e(O9,PSr),e(hr,BSr),e(hr,Xt),M(V9,Xt,null),e(Xt,ISr),e(Xt,XTe),e(XTe,NSr),e(Xt,qSr),e(Xt,Dc),e(Dc,jSr),e(Dc,zTe),e(zTe,DSr),e(Dc,GSr),e(Dc,qY),e(qY,OSr),e(Dc,VSr),e(Xt,XSr),M(x5,Xt,null),e(hr,zSr),e(hr,Or),M(X9,Or,null),e(Or,WSr),e(Or,WTe),e(WTe,QSr),e(Or,HSr),e(Or,_n),e(_n,USr),e(_n,QTe),e(QTe,JSr),e(_n,YSr),e(_n,HTe),e(HTe,KSr),e(_n,ZSr),e(_n,UTe),e(UTe,eRr),e(_n,oRr),e(Or,rRr),e(Or,Le),e(Le,$5),e($5,JTe),e(JTe,tRr),e($5,aRr),e($5,jY),e(jY,nRr),e($5,sRr),e(Le,lRr),e(Le,k5),e(k5,YTe),e(YTe,iRr),e(k5,dRr),e(k5,DY),e(DY,cRr),e(k5,fRr),e(Le,mRr),e(Le,S5),e(S5,KTe),e(KTe,gRr),e(S5,hRr),e(S5,GY),e(GY,pRr),e(S5,uRr),e(Le,_Rr),e(Le,R5),e(R5,ZTe),e(ZTe,bRr),e(R5,vRr),e(R5,OY),e(OY,FRr),e(R5,TRr),e(Le,MRr),e(Le,P5),e(P5,eMe),e(eMe,ERr),e(P5,CRr),e(P5,VY),e(VY,wRr),e(P5,ARr),e(Le,yRr),e(Le,B5),e(B5,oMe),e(oMe,LRr),e(B5,xRr),e(B5,XY),e(XY,$Rr),e(B5,kRr),e(Le,SRr),e(Le,I5),e(I5,rMe),e(rMe,RRr),e(I5,PRr),e(I5,zY),e(zY,BRr),e(I5,IRr),e(Le,NRr),e(Le,N5),e(N5,tMe),e(tMe,qRr),e(N5,jRr),e(N5,WY),e(WY,DRr),e(N5,GRr),e(Le,ORr),e(Le,q5),e(q5,aMe),e(aMe,VRr),e(q5,XRr),e(q5,QY),e(QY,zRr),e(q5,WRr),e(Le,QRr),e(Le,j5),e(j5,nMe),e(nMe,HRr),e(j5,URr),e(j5,HY),e(HY,JRr),e(j5,YRr),e(Or,KRr),M(D5,Or,null),b(f,jje,_),b(f,Gc,_),e(Gc,G5),e(G5,sMe),M(z9,sMe,null),e(Gc,ZRr),e(Gc,lMe),e(lMe,ePr),b(f,Dje,_),b(f,pr,_),M(W9,pr,null),e(pr,oPr),e(pr,Oc),e(Oc,rPr),e(Oc,UY),e(UY,tPr),e(Oc,aPr),e(Oc,JY),e(JY,nPr),e(Oc,sPr),e(pr,lPr),e(pr,Q9),e(Q9,iPr),e(Q9,iMe),e(iMe,dPr),e(Q9,cPr),e(pr,fPr),e(pr,zt),M(H9,zt,null),e(zt,mPr),e(zt,dMe),e(dMe,gPr),e(zt,hPr),e(zt,Vc),e(Vc,pPr),e(Vc,cMe),e(cMe,uPr),e(Vc,_Pr),e(Vc,YY),e(YY,bPr),e(Vc,vPr),e(zt,FPr),M(O5,zt,null),e(pr,TPr),e(pr,Vr),M(U9,Vr,null),e(Vr,MPr),e(Vr,fMe),e(fMe,EPr),e(Vr,CPr),e(Vr,bn),e(bn,wPr),e(bn,mMe),e(mMe,APr),e(bn,yPr),e(bn,gMe),e(gMe,LPr),e(bn,xPr),e(bn,hMe),e(hMe,$Pr),e(bn,kPr),e(Vr,SPr),e(Vr,Pe),e(Pe,V5),e(V5,pMe),e(pMe,RPr),e(V5,PPr),e(V5,KY),e(KY,BPr),e(V5,IPr),e(Pe,NPr),e(Pe,X5),e(X5,uMe),e(uMe,qPr),e(X5,jPr),e(X5,ZY),e(ZY,DPr),e(X5,GPr),e(Pe,OPr),e(Pe,z5),e(z5,_Me),e(_Me,VPr),e(z5,XPr),e(z5,eK),e(eK,zPr),e(z5,WPr),e(Pe,QPr),e(Pe,W5),e(W5,bMe),e(bMe,HPr),e(W5,UPr),e(W5,oK),e(oK,JPr),e(W5,YPr),e(Pe,KPr),e(Pe,Q5),e(Q5,vMe),e(vMe,ZPr),e(Q5,eBr),e(Q5,rK),e(rK,oBr),e(Q5,rBr),e(Pe,tBr),e(Pe,H5),e(H5,FMe),e(FMe,aBr),e(H5,nBr),e(H5,tK),e(tK,sBr),e(H5,lBr),e(Pe,iBr),e(Pe,U5),e(U5,TMe),e(TMe,dBr),e(U5,cBr),e(U5,aK),e(aK,fBr),e(U5,mBr),e(Pe,gBr),e(Pe,J5),e(J5,MMe),e(MMe,hBr),e(J5,pBr),e(J5,nK),e(nK,uBr),e(J5,_Br),e(Pe,bBr),e(Pe,Y5),e(Y5,EMe),e(EMe,vBr),e(Y5,FBr),e(Y5,sK),e(sK,TBr),e(Y5,MBr),e(Vr,EBr),M(K5,Vr,null),b(f,Gje,_),b(f,Xc,_),e(Xc,Z5),e(Z5,CMe),M(J9,CMe,null),e(Xc,CBr),e(Xc,wMe),e(wMe,wBr),b(f,Oje,_),b(f,ur,_),M(Y9,ur,null),e(ur,ABr),e(ur,zc),e(zc,yBr),e(zc,lK),e(lK,LBr),e(zc,xBr),e(zc,iK),e(iK,$Br),e(zc,kBr),e(ur,SBr),e(ur,K9),e(K9,RBr),e(K9,AMe),e(AMe,PBr),e(K9,BBr),e(ur,IBr),e(ur,Wt),M(Z9,Wt,null),e(Wt,NBr),e(Wt,yMe),e(yMe,qBr),e(Wt,jBr),e(Wt,Wc),e(Wc,DBr),e(Wc,LMe),e(LMe,GBr),e(Wc,OBr),e(Wc,dK),e(dK,VBr),e(Wc,XBr),e(Wt,zBr),M(e3,Wt,null),e(ur,WBr),e(ur,Xr),M(ex,Xr,null),e(Xr,QBr),e(Xr,xMe),e(xMe,HBr),e(Xr,UBr),e(Xr,vn),e(vn,JBr),e(vn,$Me),e($Me,YBr),e(vn,KBr),e(vn,kMe),e(kMe,ZBr),e(vn,eIr),e(vn,SMe),e(SMe,oIr),e(vn,rIr),e(Xr,tIr),e(Xr,xe),e(xe,o3),e(o3,RMe),e(RMe,aIr),e(o3,nIr),e(o3,cK),e(cK,sIr),e(o3,lIr),e(xe,iIr),e(xe,r3),e(r3,PMe),e(PMe,dIr),e(r3,cIr),e(r3,fK),e(fK,fIr),e(r3,mIr),e(xe,gIr),e(xe,t3),e(t3,BMe),e(BMe,hIr),e(t3,pIr),e(t3,mK),e(mK,uIr),e(t3,_Ir),e(xe,bIr),e(xe,a3),e(a3,IMe),e(IMe,vIr),e(a3,FIr),e(a3,gK),e(gK,TIr),e(a3,MIr),e(xe,EIr),e(xe,n3),e(n3,NMe),e(NMe,CIr),e(n3,wIr),e(n3,hK),e(hK,AIr),e(n3,yIr),e(xe,LIr),e(xe,s3),e(s3,qMe),e(qMe,xIr),e(s3,$Ir),e(s3,pK),e(pK,kIr),e(s3,SIr),e(xe,RIr),e(xe,l3),e(l3,jMe),e(jMe,PIr),e(l3,BIr),e(l3,uK),e(uK,IIr),e(l3,NIr),e(xe,qIr),e(xe,i3),e(i3,DMe),e(DMe,jIr),e(i3,DIr),e(i3,_K),e(_K,GIr),e(i3,OIr),e(xe,VIr),e(xe,d3),e(d3,GMe),e(GMe,XIr),e(d3,zIr),e(d3,bK),e(bK,WIr),e(d3,QIr),e(xe,HIr),e(xe,c3),e(c3,OMe),e(OMe,UIr),e(c3,JIr),e(c3,vK),e(vK,YIr),e(c3,KIr),e(Xr,ZIr),M(f3,Xr,null),b(f,Vje,_),b(f,Qc,_),e(Qc,m3),e(m3,VMe),M(ox,VMe,null),e(Qc,eNr),e(Qc,XMe),e(XMe,oNr),b(f,Xje,_),b(f,_r,_),M(rx,_r,null),e(_r,rNr),e(_r,Hc),e(Hc,tNr),e(Hc,FK),e(FK,aNr),e(Hc,nNr),e(Hc,TK),e(TK,sNr),e(Hc,lNr),e(_r,iNr),e(_r,tx),e(tx,dNr),e(tx,zMe),e(zMe,cNr),e(tx,fNr),e(_r,mNr),e(_r,Qt),M(ax,Qt,null),e(Qt,gNr),e(Qt,WMe),e(WMe,hNr),e(Qt,pNr),e(Qt,Uc),e(Uc,uNr),e(Uc,QMe),e(QMe,_Nr),e(Uc,bNr),e(Uc,MK),e(MK,vNr),e(Uc,FNr),e(Qt,TNr),M(g3,Qt,null),e(_r,MNr),e(_r,zr),M(nx,zr,null),e(zr,ENr),e(zr,HMe),e(HMe,CNr),e(zr,wNr),e(zr,Fn),e(Fn,ANr),e(Fn,UMe),e(UMe,yNr),e(Fn,LNr),e(Fn,JMe),e(JMe,xNr),e(Fn,$Nr),e(Fn,YMe),e(YMe,kNr),e(Fn,SNr),e(zr,RNr),e(zr,$e),e($e,h3),e(h3,KMe),e(KMe,PNr),e(h3,BNr),e(h3,EK),e(EK,INr),e(h3,NNr),e($e,qNr),e($e,p3),e(p3,ZMe),e(ZMe,jNr),e(p3,DNr),e(p3,CK),e(CK,GNr),e(p3,ONr),e($e,VNr),e($e,u3),e(u3,eEe),e(eEe,XNr),e(u3,zNr),e(u3,wK),e(wK,WNr),e(u3,QNr),e($e,HNr),e($e,_3),e(_3,oEe),e(oEe,UNr),e(_3,JNr),e(_3,AK),e(AK,YNr),e(_3,KNr),e($e,ZNr),e($e,b3),e(b3,rEe),e(rEe,eqr),e(b3,oqr),e(b3,yK),e(yK,rqr),e(b3,tqr),e($e,aqr),e($e,v3),e(v3,tEe),e(tEe,nqr),e(v3,sqr),e(v3,LK),e(LK,lqr),e(v3,iqr),e($e,dqr),e($e,F3),e(F3,aEe),e(aEe,cqr),e(F3,fqr),e(F3,xK),e(xK,mqr),e(F3,gqr),e($e,hqr),e($e,T3),e(T3,nEe),e(nEe,pqr),e(T3,uqr),e(T3,$K),e($K,_qr),e(T3,bqr),e($e,vqr),e($e,M3),e(M3,sEe),e(sEe,Fqr),e(M3,Tqr),e(M3,kK),e(kK,Mqr),e(M3,Eqr),e($e,Cqr),e($e,E3),e(E3,lEe),e(lEe,wqr),e(E3,Aqr),e(E3,SK),e(SK,yqr),e(E3,Lqr),e(zr,xqr),M(C3,zr,null),b(f,zje,_),b(f,Jc,_),e(Jc,w3),e(w3,iEe),M(sx,iEe,null),e(Jc,$qr),e(Jc,dEe),e(dEe,kqr),b(f,Wje,_),b(f,br,_),M(lx,br,null),e(br,Sqr),e(br,Yc),e(Yc,Rqr),e(Yc,RK),e(RK,Pqr),e(Yc,Bqr),e(Yc,PK),e(PK,Iqr),e(Yc,Nqr),e(br,qqr),e(br,ix),e(ix,jqr),e(ix,cEe),e(cEe,Dqr),e(ix,Gqr),e(br,Oqr),e(br,Ht),M(dx,Ht,null),e(Ht,Vqr),e(Ht,fEe),e(fEe,Xqr),e(Ht,zqr),e(Ht,Kc),e(Kc,Wqr),e(Kc,mEe),e(mEe,Qqr),e(Kc,Hqr),e(Kc,BK),e(BK,Uqr),e(Kc,Jqr),e(Ht,Yqr),M(A3,Ht,null),e(br,Kqr),e(br,Wr),M(cx,Wr,null),e(Wr,Zqr),e(Wr,gEe),e(gEe,ejr),e(Wr,ojr),e(Wr,Tn),e(Tn,rjr),e(Tn,hEe),e(hEe,tjr),e(Tn,ajr),e(Tn,pEe),e(pEe,njr),e(Tn,sjr),e(Tn,uEe),e(uEe,ljr),e(Tn,ijr),e(Wr,djr),e(Wr,De),e(De,y3),e(y3,_Ee),e(_Ee,cjr),e(y3,fjr),e(y3,IK),e(IK,mjr),e(y3,gjr),e(De,hjr),e(De,L3),e(L3,bEe),e(bEe,pjr),e(L3,ujr),e(L3,NK),e(NK,_jr),e(L3,bjr),e(De,vjr),e(De,x3),e(x3,vEe),e(vEe,Fjr),e(x3,Tjr),e(x3,qK),e(qK,Mjr),e(x3,Ejr),e(De,Cjr),e(De,$3),e($3,FEe),e(FEe,wjr),e($3,Ajr),e($3,jK),e(jK,yjr),e($3,Ljr),e(De,xjr),e(De,k3),e(k3,TEe),e(TEe,$jr),e(k3,kjr),e(k3,DK),e(DK,Sjr),e(k3,Rjr),e(De,Pjr),e(De,S3),e(S3,MEe),e(MEe,Bjr),e(S3,Ijr),e(S3,GK),e(GK,Njr),e(S3,qjr),e(De,jjr),e(De,R3),e(R3,EEe),e(EEe,Djr),e(R3,Gjr),e(R3,OK),e(OK,Ojr),e(R3,Vjr),e(De,Xjr),e(De,P3),e(P3,CEe),e(CEe,zjr),e(P3,Wjr),e(P3,VK),e(VK,Qjr),e(P3,Hjr),e(Wr,Ujr),M(B3,Wr,null),b(f,Qje,_),b(f,Zc,_),e(Zc,I3),e(I3,wEe),M(fx,wEe,null),e(Zc,Jjr),e(Zc,AEe),e(AEe,Yjr),b(f,Hje,_),b(f,vr,_),M(mx,vr,null),e(vr,Kjr),e(vr,ef),e(ef,Zjr),e(ef,XK),e(XK,eDr),e(ef,oDr),e(ef,zK),e(zK,rDr),e(ef,tDr),e(vr,aDr),e(vr,gx),e(gx,nDr),e(gx,yEe),e(yEe,sDr),e(gx,lDr),e(vr,iDr),e(vr,Ut),M(hx,Ut,null),e(Ut,dDr),e(Ut,LEe),e(LEe,cDr),e(Ut,fDr),e(Ut,of),e(of,mDr),e(of,xEe),e(xEe,gDr),e(of,hDr),e(of,WK),e(WK,pDr),e(of,uDr),e(Ut,_Dr),M(N3,Ut,null),e(vr,bDr),e(vr,Qr),M(px,Qr,null),e(Qr,vDr),e(Qr,$Ee),e($Ee,FDr),e(Qr,TDr),e(Qr,Mn),e(Mn,MDr),e(Mn,kEe),e(kEe,EDr),e(Mn,CDr),e(Mn,SEe),e(SEe,wDr),e(Mn,ADr),e(Mn,REe),e(REe,yDr),e(Mn,LDr),e(Qr,xDr),e(Qr,Ge),e(Ge,q3),e(q3,PEe),e(PEe,$Dr),e(q3,kDr),e(q3,QK),e(QK,SDr),e(q3,RDr),e(Ge,PDr),e(Ge,j3),e(j3,BEe),e(BEe,BDr),e(j3,IDr),e(j3,HK),e(HK,NDr),e(j3,qDr),e(Ge,jDr),e(Ge,D3),e(D3,IEe),e(IEe,DDr),e(D3,GDr),e(D3,UK),e(UK,ODr),e(D3,VDr),e(Ge,XDr),e(Ge,G3),e(G3,NEe),e(NEe,zDr),e(G3,WDr),e(G3,JK),e(JK,QDr),e(G3,HDr),e(Ge,UDr),e(Ge,O3),e(O3,qEe),e(qEe,JDr),e(O3,YDr),e(O3,YK),e(YK,KDr),e(O3,ZDr),e(Ge,eGr),e(Ge,V3),e(V3,jEe),e(jEe,oGr),e(V3,rGr),e(V3,KK),e(KK,tGr),e(V3,aGr),e(Ge,nGr),e(Ge,X3),e(X3,DEe),e(DEe,sGr),e(X3,lGr),e(X3,ZK),e(ZK,iGr),e(X3,dGr),e(Ge,cGr),e(Ge,z3),e(z3,GEe),e(GEe,fGr),e(z3,mGr),e(z3,eZ),e(eZ,gGr),e(z3,hGr),e(Qr,pGr),M(W3,Qr,null),b(f,Uje,_),b(f,rf,_),e(rf,Q3),e(Q3,OEe),M(ux,OEe,null),e(rf,uGr),e(rf,VEe),e(VEe,_Gr),b(f,Jje,_),b(f,Fr,_),M(_x,Fr,null),e(Fr,bGr),e(Fr,tf),e(tf,vGr),e(tf,oZ),e(oZ,FGr),e(tf,TGr),e(tf,rZ),e(rZ,MGr),e(tf,EGr),e(Fr,CGr),e(Fr,bx),e(bx,wGr),e(bx,XEe),e(XEe,AGr),e(bx,yGr),e(Fr,LGr),e(Fr,Jt),M(vx,Jt,null),e(Jt,xGr),e(Jt,zEe),e(zEe,$Gr),e(Jt,kGr),e(Jt,af),e(af,SGr),e(af,WEe),e(WEe,RGr),e(af,PGr),e(af,tZ),e(tZ,BGr),e(af,IGr),e(Jt,NGr),M(H3,Jt,null),e(Fr,qGr),e(Fr,Hr),M(Fx,Hr,null),e(Hr,jGr),e(Hr,QEe),e(QEe,DGr),e(Hr,GGr),e(Hr,En),e(En,OGr),e(En,HEe),e(HEe,VGr),e(En,XGr),e(En,UEe),e(UEe,zGr),e(En,WGr),e(En,JEe),e(JEe,QGr),e(En,HGr),e(Hr,UGr),e(Hr,YEe),e(YEe,U3),e(U3,KEe),e(KEe,JGr),e(U3,YGr),e(U3,aZ),e(aZ,KGr),e(U3,ZGr),e(Hr,eOr),M(J3,Hr,null),b(f,Yje,_),b(f,nf,_),e(nf,Y3),e(Y3,ZEe),M(Tx,ZEe,null),e(nf,oOr),e(nf,eCe),e(eCe,rOr),b(f,Kje,_),b(f,Tr,_),M(Mx,Tr,null),e(Tr,tOr),e(Tr,sf),e(sf,aOr),e(sf,nZ),e(nZ,nOr),e(sf,sOr),e(sf,sZ),e(sZ,lOr),e(sf,iOr),e(Tr,dOr),e(Tr,Ex),e(Ex,cOr),e(Ex,oCe),e(oCe,fOr),e(Ex,mOr),e(Tr,gOr),e(Tr,Yt),M(Cx,Yt,null),e(Yt,hOr),e(Yt,rCe),e(rCe,pOr),e(Yt,uOr),e(Yt,lf),e(lf,_Or),e(lf,tCe),e(tCe,bOr),e(lf,vOr),e(lf,lZ),e(lZ,FOr),e(lf,TOr),e(Yt,MOr),M(K3,Yt,null),e(Tr,EOr),e(Tr,Ur),M(wx,Ur,null),e(Ur,COr),e(Ur,aCe),e(aCe,wOr),e(Ur,AOr),e(Ur,Cn),e(Cn,yOr),e(Cn,nCe),e(nCe,LOr),e(Cn,xOr),e(Cn,sCe),e(sCe,$Or),e(Cn,kOr),e(Cn,lCe),e(lCe,SOr),e(Cn,ROr),e(Ur,POr),e(Ur,Ax),e(Ax,Z3),e(Z3,iCe),e(iCe,BOr),e(Z3,IOr),e(Z3,iZ),e(iZ,NOr),e(Z3,qOr),e(Ax,jOr),e(Ax,ew),e(ew,dCe),e(dCe,DOr),e(ew,GOr),e(ew,dZ),e(dZ,OOr),e(ew,VOr),e(Ur,XOr),M(ow,Ur,null),b(f,Zje,_),b(f,df,_),e(df,rw),e(rw,cCe),M(yx,cCe,null),e(df,zOr),e(df,fCe),e(fCe,WOr),b(f,eDe,_),b(f,Mr,_),M(Lx,Mr,null),e(Mr,QOr),e(Mr,cf),e(cf,HOr),e(cf,cZ),e(cZ,UOr),e(cf,JOr),e(cf,fZ),e(fZ,YOr),e(cf,KOr),e(Mr,ZOr),e(Mr,xx),e(xx,eVr),e(xx,mCe),e(mCe,oVr),e(xx,rVr),e(Mr,tVr),e(Mr,Kt),M($x,Kt,null),e(Kt,aVr),e(Kt,gCe),e(gCe,nVr),e(Kt,sVr),e(Kt,ff),e(ff,lVr),e(ff,hCe),e(hCe,iVr),e(ff,dVr),e(ff,mZ),e(mZ,cVr),e(ff,fVr),e(Kt,mVr),M(tw,Kt,null),e(Mr,gVr),e(Mr,Jr),M(kx,Jr,null),e(Jr,hVr),e(Jr,pCe),e(pCe,pVr),e(Jr,uVr),e(Jr,wn),e(wn,_Vr),e(wn,uCe),e(uCe,bVr),e(wn,vVr),e(wn,_Ce),e(_Ce,FVr),e(wn,TVr),e(wn,bCe),e(bCe,MVr),e(wn,EVr),e(Jr,CVr),e(Jr,vCe),e(vCe,aw),e(aw,FCe),e(FCe,wVr),e(aw,AVr),e(aw,gZ),e(gZ,yVr),e(aw,LVr),e(Jr,xVr),M(nw,Jr,null),oDe=!0},p(f,[_]){const Sx={};_&2&&(Sx.$$scope={dirty:_,ctx:f}),Ff.$set(Sx);const TCe={};_&2&&(TCe.$$scope={dirty:_,ctx:f}),Eg.$set(TCe);const MCe={};_&2&&(MCe.$$scope={dirty:_,ctx:f}),ah.$set(MCe);const ECe={};_&2&&(ECe.$$scope={dirty:_,ctx:f}),Ih.$set(ECe);const Rx={};_&2&&(Rx.$$scope={dirty:_,ctx:f}),Nh.$set(Rx);const CCe={};_&2&&(CCe.$$scope={dirty:_,ctx:f}),tp.$set(CCe);const An={};_&2&&(An.$$scope={dirty:_,ctx:f}),ap.$set(An);const wCe={};_&2&&(wCe.$$scope={dirty:_,ctx:f}),lp.$set(wCe);const ACe={};_&2&&(ACe.$$scope={dirty:_,ctx:f}),r_.$set(ACe);const yCe={};_&2&&(yCe.$$scope={dirty:_,ctx:f}),a_.$set(yCe);const Px={};_&2&&(Px.$$scope={dirty:_,ctx:f}),H_.$set(Px);const LCe={};_&2&&(LCe.$$scope={dirty:_,ctx:f}),J_.$set(LCe);const Bx={};_&2&&(Bx.$$scope={dirty:_,ctx:f}),B1.$set(Bx);const xCe={};_&2&&(xCe.$$scope={dirty:_,ctx:f}),N1.$set(xCe);const Ix={};_&2&&(Ix.$$scope={dirty:_,ctx:f}),F7.$set(Ix);const $Ce={};_&2&&($Ce.$$scope={dirty:_,ctx:f}),M7.$set($Ce);const kCe={};_&2&&(kCe.$$scope={dirty:_,ctx:f}),D7.$set(kCe);const SCe={};_&2&&(SCe.$$scope={dirty:_,ctx:f}),O7.$set(SCe);const mf={};_&2&&(mf.$$scope={dirty:_,ctx:f}),Nb.$set(mf);const RCe={};_&2&&(RCe.$$scope={dirty:_,ctx:f}),jb.$set(RCe);const PCe={};_&2&&(PCe.$$scope={dirty:_,ctx:f}),u2.$set(PCe);const BCe={};_&2&&(BCe.$$scope={dirty:_,ctx:f}),b2.$set(BCe);const Nx={};_&2&&(Nx.$$scope={dirty:_,ctx:f}),w2.$set(Nx);const ICe={};_&2&&(ICe.$$scope={dirty:_,ctx:f}),y2.$set(ICe);const NCe={};_&2&&(NCe.$$scope={dirty:_,ctx:f}),d4.$set(NCe);const qCe={};_&2&&(qCe.$$scope={dirty:_,ctx:f}),f4.$set(qCe);const et={};_&2&&(et.$$scope={dirty:_,ctx:f}),Z4.$set(et);const qx={};_&2&&(qx.$$scope={dirty:_,ctx:f}),ov.$set(qx);const jCe={};_&2&&(jCe.$$scope={dirty:_,ctx:f}),av.$set(jCe);const jx={};_&2&&(jx.$$scope={dirty:_,ctx:f}),sv.$set(jx);const DCe={};_&2&&(DCe.$$scope={dirty:_,ctx:f}),Fv.$set(DCe);const ot={};_&2&&(ot.$$scope={dirty:_,ctx:f}),Mv.$set(ot);const GCe={};_&2&&(GCe.$$scope={dirty:_,ctx:f}),wv.$set(GCe);const gf={};_&2&&(gf.$$scope={dirty:_,ctx:f}),yv.$set(gf);const OCe={};_&2&&(OCe.$$scope={dirty:_,ctx:f}),qv.$set(OCe);const VCe={};_&2&&(VCe.$$scope={dirty:_,ctx:f}),Dv.$set(VCe);const y={};_&2&&(y.$$scope={dirty:_,ctx:f}),Qv.$set(y);const sw={};_&2&&(sw.$$scope={dirty:_,ctx:f}),Uv.$set(sw);const XCe={};_&2&&(XCe.$$scope={dirty:_,ctx:f}),sF.$set(XCe);const zCe={};_&2&&(zCe.$$scope={dirty:_,ctx:f}),iF.$set(zCe);const lw={};_&2&&(lw.$$scope={dirty:_,ctx:f}),mF.$set(lw);const WCe={};_&2&&(WCe.$$scope={dirty:_,ctx:f}),hF.$set(WCe);const QCe={};_&2&&(QCe.$$scope={dirty:_,ctx:f}),TF.$set(QCe);const iw={};_&2&&(iw.$$scope={dirty:_,ctx:f}),EF.$set(iw);const HCe={};_&2&&(HCe.$$scope={dirty:_,ctx:f}),LF.$set(HCe);const UCe={};_&2&&(UCe.$$scope={dirty:_,ctx:f}),$F.$set(UCe);const dw={};_&2&&(dw.$$scope={dirty:_,ctx:f}),PF.$set(dw);const JCe={};_&2&&(JCe.$$scope={dirty:_,ctx:f}),IF.$set(JCe);const YCe={};_&2&&(YCe.$$scope={dirty:_,ctx:f}),jF.$set(YCe);const cw={};_&2&&(cw.$$scope={dirty:_,ctx:f}),GF.$set(cw);const KCe={};_&2&&(KCe.$$scope={dirty:_,ctx:f}),QF.$set(KCe);const ZCe={};_&2&&(ZCe.$$scope={dirty:_,ctx:f}),UF.$set(ZCe);const fw={};_&2&&(fw.$$scope={dirty:_,ctx:f}),KF.$set(fw);const e5e={};_&2&&(e5e.$$scope={dirty:_,ctx:f}),e0.$set(e5e);const o5e={};_&2&&(o5e.$$scope={dirty:_,ctx:f}),W0.$set(o5e);const mw={};_&2&&(mw.$$scope={dirty:_,ctx:f}),H0.$set(mw);const r5e={};_&2&&(r5e.$$scope={dirty:_,ctx:f}),bT.$set(r5e);const t5e={};_&2&&(t5e.$$scope={dirty:_,ctx:f}),FT.$set(t5e);const gw={};_&2&&(gw.$$scope={dirty:_,ctx:f}),RT.$set(gw);const a5e={};_&2&&(a5e.$$scope={dirty:_,ctx:f}),BT.$set(a5e);const n5e={};_&2&&(n5e.$$scope={dirty:_,ctx:f}),DT.$set(n5e);const hw={};_&2&&(hw.$$scope={dirty:_,ctx:f}),OT.$set(hw);const s5e={};_&2&&(s5e.$$scope={dirty:_,ctx:f}),dM.$set(s5e);const l5e={};_&2&&(l5e.$$scope={dirty:_,ctx:f}),fM.$set(l5e);const pw={};_&2&&(pw.$$scope={dirty:_,ctx:f}),MM.$set(pw);const i5e={};_&2&&(i5e.$$scope={dirty:_,ctx:f}),CM.$set(i5e);const d5e={};_&2&&(d5e.$$scope={dirty:_,ctx:f}),YM.$set(d5e);const uw={};_&2&&(uw.$$scope={dirty:_,ctx:f}),ZM.$set(uw);const c5e={};_&2&&(c5e.$$scope={dirty:_,ctx:f}),_E.$set(c5e);const f5e={};_&2&&(f5e.$$scope={dirty:_,ctx:f}),vE.$set(f5e);const _w={};_&2&&(_w.$$scope={dirty:_,ctx:f}),ME.$set(_w);const m5e={};_&2&&(m5e.$$scope={dirty:_,ctx:f}),CE.$set(m5e);const g5e={};_&2&&(g5e.$$scope={dirty:_,ctx:f}),AE.$set(g5e);const bw={};_&2&&(bw.$$scope={dirty:_,ctx:f}),LE.$set(bw);const h5e={};_&2&&(h5e.$$scope={dirty:_,ctx:f}),UE.$set(h5e);const p5e={};_&2&&(p5e.$$scope={dirty:_,ctx:f}),YE.$set(p5e);const vw={};_&2&&(vw.$$scope={dirty:_,ctx:f}),bC.$set(vw);const u5e={};_&2&&(u5e.$$scope={dirty:_,ctx:f}),FC.$set(u5e);const _5e={};_&2&&(_5e.$$scope={dirty:_,ctx:f}),MC.$set(_5e);const Fw={};_&2&&(Fw.$$scope={dirty:_,ctx:f}),CC.$set(Fw);const b5e={};_&2&&(b5e.$$scope={dirty:_,ctx:f}),AC.$set(b5e);const v5e={};_&2&&(v5e.$$scope={dirty:_,ctx:f}),LC.$set(v5e);const Tw={};_&2&&(Tw.$$scope={dirty:_,ctx:f}),e5.$set(Tw);const F5e={};_&2&&(F5e.$$scope={dirty:_,ctx:f}),r5.$set(F5e);const T5e={};_&2&&(T5e.$$scope={dirty:_,ctx:f}),m5.$set(T5e);const Mw={};_&2&&(Mw.$$scope={dirty:_,ctx:f}),h5.$set(Mw);const M5e={};_&2&&(M5e.$$scope={dirty:_,ctx:f}),y5.$set(M5e);const E5e={};_&2&&(E5e.$$scope={dirty:_,ctx:f}),x5.$set(E5e);const Ew={};_&2&&(Ew.$$scope={dirty:_,ctx:f}),D5.$set(Ew);const C5e={};_&2&&(C5e.$$scope={dirty:_,ctx:f}),O5.$set(C5e);const w5e={};_&2&&(w5e.$$scope={dirty:_,ctx:f}),K5.$set(w5e);const Cw={};_&2&&(Cw.$$scope={dirty:_,ctx:f}),e3.$set(Cw);const A5e={};_&2&&(A5e.$$scope={dirty:_,ctx:f}),f3.$set(A5e);const y5e={};_&2&&(y5e.$$scope={dirty:_,ctx:f}),g3.$set(y5e);const ww={};_&2&&(ww.$$scope={dirty:_,ctx:f}),C3.$set(ww);const L5e={};_&2&&(L5e.$$scope={dirty:_,ctx:f}),A3.$set(L5e);const x5e={};_&2&&(x5e.$$scope={dirty:_,ctx:f}),B3.$set(x5e);const Aw={};_&2&&(Aw.$$scope={dirty:_,ctx:f}),N3.$set(Aw);const $5e={};_&2&&($5e.$$scope={dirty:_,ctx:f}),W3.$set($5e);const k5e={};_&2&&(k5e.$$scope={dirty:_,ctx:f}),H3.$set(k5e);const yw={};_&2&&(yw.$$scope={dirty:_,ctx:f}),J3.$set(yw);const S5e={};_&2&&(S5e.$$scope={dirty:_,ctx:f}),K3.$set(S5e);const R5e={};_&2&&(R5e.$$scope={dirty:_,ctx:f}),ow.$set(R5e);const Lw={};_&2&&(Lw.$$scope={dirty:_,ctx:f}),tw.$set(Lw);const P5e={};_&2&&(P5e.$$scope={dirty:_,ctx:f}),nw.$set(P5e)},i(f){oDe||(E(d.$$.fragment,f),E(Ca.$$.fragment,f),E(yA.$$.fragment,f),E(LA.$$.fragment,f),E(Ff.$$.fragment,f),E(xA.$$.fragment,f),E($A.$$.fragment,f),E(RA.$$.fragment,f),E(Eg.$$.fragment,f),E(PA.$$.fragment,f),E(BA.$$.fragment,f),E(IA.$$.fragment,f),E(jA.$$.fragment,f),E(ah.$$.fragment,f),E(DA.$$.fragment,f),E(GA.$$.fragment,f),E(OA.$$.fragment,f),E(zA.$$.fragment,f),E(Ih.$$.fragment,f),E(Nh.$$.fragment,f),E(WA.$$.fragment,f),E(QA.$$.fragment,f),E(HA.$$.fragment,f),E(YA.$$.fragment,f),E(tp.$$.fragment,f),E(ap.$$.fragment,f),E(KA.$$.fragment,f),E(ZA.$$.fragment,f),E(ey.$$.fragment,f),E(ry.$$.fragment,f),E(lp.$$.fragment,f),E(ty.$$.fragment,f),E(r_.$$.fragment,f),E(ay.$$.fragment,f),E(ny.$$.fragment,f),E(ly.$$.fragment,f),E(a_.$$.fragment,f),E(iy.$$.fragment,f),E(H_.$$.fragment,f),E(dy.$$.fragment,f),E(cy.$$.fragment,f),E(my.$$.fragment,f),E(J_.$$.fragment,f),E(gy.$$.fragment,f),E(B1.$$.fragment,f),E(hy.$$.fragment,f),E(py.$$.fragment,f),E(_y.$$.fragment,f),E(N1.$$.fragment,f),E(by.$$.fragment,f),E(F7.$$.fragment,f),E(vy.$$.fragment,f),E(Fy.$$.fragment,f),E(My.$$.fragment,f),E(M7.$$.fragment,f),E(Ey.$$.fragment,f),E(D7.$$.fragment,f),E(Cy.$$.fragment,f),E(wy.$$.fragment,f),E(yy.$$.fragment,f),E(O7.$$.fragment,f),E(Ly.$$.fragment,f),E(Nb.$$.fragment,f),E(xy.$$.fragment,f),E($y.$$.fragment,f),E(Sy.$$.fragment,f),E(jb.$$.fragment,f),E(Ry.$$.fragment,f),E(u2.$$.fragment,f),E(Py.$$.fragment,f),E(By.$$.fragment,f),E(Ny.$$.fragment,f),E(b2.$$.fragment,f),E(qy.$$.fragment,f),E(w2.$$.fragment,f),E(jy.$$.fragment,f),E(Dy.$$.fragment,f),E(Oy.$$.fragment,f),E(y2.$$.fragment,f),E(Vy.$$.fragment,f),E(d4.$$.fragment,f),E(Xy.$$.fragment,f),E(zy.$$.fragment,f),E(Qy.$$.fragment,f),E(f4.$$.fragment,f),E(Hy.$$.fragment,f),E(Z4.$$.fragment,f),E(Uy.$$.fragment,f),E(Jy.$$.fragment,f),E(Ky.$$.fragment,f),E(ov.$$.fragment,f),E(Zy.$$.fragment,f),E(av.$$.fragment,f),E(eL.$$.fragment,f),E(oL.$$.fragment,f),E(tL.$$.fragment,f),E(sv.$$.fragment,f),E(aL.$$.fragment,f),E(Fv.$$.fragment,f),E(nL.$$.fragment,f),E(sL.$$.fragment,f),E(iL.$$.fragment,f),E(Mv.$$.fragment,f),E(dL.$$.fragment,f),E(wv.$$.fragment,f),E(cL.$$.fragment,f),E(fL.$$.fragment,f),E(gL.$$.fragment,f),E(yv.$$.fragment,f),E(hL.$$.fragment,f),E(qv.$$.fragment,f),E(pL.$$.fragment,f),E(uL.$$.fragment,f),E(bL.$$.fragment,f),E(Dv.$$.fragment,f),E(vL.$$.fragment,f),E(Qv.$$.fragment,f),E(FL.$$.fragment,f),E(TL.$$.fragment,f),E(EL.$$.fragment,f),E(Uv.$$.fragment,f),E(CL.$$.fragment,f),E(sF.$$.fragment,f),E(wL.$$.fragment,f),E(AL.$$.fragment,f),E(LL.$$.fragment,f),E(iF.$$.fragment,f),E(xL.$$.fragment,f),E(mF.$$.fragment,f),E(kL.$$.fragment,f),E(SL.$$.fragment,f),E(PL.$$.fragment,f),E(hF.$$.fragment,f),E(BL.$$.fragment,f),E(TF.$$.fragment,f),E(IL.$$.fragment,f),E(NL.$$.fragment,f),E(jL.$$.fragment,f),E(EF.$$.fragment,f),E(DL.$$.fragment,f),E(LF.$$.fragment,f),E(GL.$$.fragment,f),E(OL.$$.fragment,f),E(XL.$$.fragment,f),E($F.$$.fragment,f),E(zL.$$.fragment,f),E(PF.$$.fragment,f),E(QL.$$.fragment,f),E(HL.$$.fragment,f),E(JL.$$.fragment,f),E(IF.$$.fragment,f),E(YL.$$.fragment,f),E(jF.$$.fragment,f),E(KL.$$.fragment,f),E(ZL.$$.fragment,f),E(o8.$$.fragment,f),E(GF.$$.fragment,f),E(r8.$$.fragment,f),E(QF.$$.fragment,f),E(t8.$$.fragment,f),E(a8.$$.fragment,f),E(s8.$$.fragment,f),E(UF.$$.fragment,f),E(l8.$$.fragment,f),E(KF.$$.fragment,f),E(i8.$$.fragment,f),E(d8.$$.fragment,f),E(f8.$$.fragment,f),E(e0.$$.fragment,f),E(m8.$$.fragment,f),E(W0.$$.fragment,f),E(g8.$$.fragment,f),E(h8.$$.fragment,f),E(u8.$$.fragment,f),E(H0.$$.fragment,f),E(_8.$$.fragment,f),E(bT.$$.fragment,f),E(b8.$$.fragment,f),E(v8.$$.fragment,f),E(T8.$$.fragment,f),E(FT.$$.fragment,f),E(M8.$$.fragment,f),E(RT.$$.fragment,f),E(E8.$$.fragment,f),E(C8.$$.fragment,f),E(A8.$$.fragment,f),E(BT.$$.fragment,f),E(y8.$$.fragment,f),E(DT.$$.fragment,f),E(L8.$$.fragment,f),E(x8.$$.fragment,f),E(k8.$$.fragment,f),E(OT.$$.fragment,f),E(S8.$$.fragment,f),E(dM.$$.fragment,f),E(R8.$$.fragment,f),E(P8.$$.fragment,f),E(I8.$$.fragment,f),E(fM.$$.fragment,f),E(N8.$$.fragment,f),E(MM.$$.fragment,f),E(q8.$$.fragment,f),E(j8.$$.fragment,f),E(G8.$$.fragment,f),E(CM.$$.fragment,f),E(O8.$$.fragment,f),E(YM.$$.fragment,f),E(V8.$$.fragment,f),E(X8.$$.fragment,f),E(W8.$$.fragment,f),E(ZM.$$.fragment,f),E(Q8.$$.fragment,f),E(_E.$$.fragment,f),E(H8.$$.fragment,f),E(U8.$$.fragment,f),E(Y8.$$.fragment,f),E(vE.$$.fragment,f),E(K8.$$.fragment,f),E(ME.$$.fragment,f),E(e9.$$.fragment,f),E(o9.$$.fragment,f),E(t9.$$.fragment,f),E(CE.$$.fragment,f),E(a9.$$.fragment,f),E(AE.$$.fragment,f),E(n9.$$.fragment,f),E(s9.$$.fragment,f),E(i9.$$.fragment,f),E(LE.$$.fragment,f),E(d9.$$.fragment,f),E(UE.$$.fragment,f),E(c9.$$.fragment,f),E(f9.$$.fragment,f),E(g9.$$.fragment,f),E(YE.$$.fragment,f),E(h9.$$.fragment,f),E(bC.$$.fragment,f),E(p9.$$.fragment,f),E(u9.$$.fragment,f),E(b9.$$.fragment,f),E(FC.$$.fragment,f),E(v9.$$.fragment,f),E(MC.$$.fragment,f),E(F9.$$.fragment,f),E(T9.$$.fragment,f),E(E9.$$.fragment,f),E(CC.$$.fragment,f),E(C9.$$.fragment,f),E(AC.$$.fragment,f),E(w9.$$.fragment,f),E(A9.$$.fragment,f),E(L9.$$.fragment,f),E(LC.$$.fragment,f),E(x9.$$.fragment,f),E(e5.$$.fragment,f),E($9.$$.fragment,f),E(k9.$$.fragment,f),E(R9.$$.fragment,f),E(r5.$$.fragment,f),E(P9.$$.fragment,f),E(m5.$$.fragment,f),E(B9.$$.fragment,f),E(I9.$$.fragment,f),E(q9.$$.fragment,f),E(h5.$$.fragment,f),E(j9.$$.fragment,f),E(y5.$$.fragment,f),E(D9.$$.fragment,f),E(G9.$$.fragment,f),E(V9.$$.fragment,f),E(x5.$$.fragment,f),E(X9.$$.fragment,f),E(D5.$$.fragment,f),E(z9.$$.fragment,f),E(W9.$$.fragment,f),E(H9.$$.fragment,f),E(O5.$$.fragment,f),E(U9.$$.fragment,f),E(K5.$$.fragment,f),E(J9.$$.fragment,f),E(Y9.$$.fragment,f),E(Z9.$$.fragment,f),E(e3.$$.fragment,f),E(ex.$$.fragment,f),E(f3.$$.fragment,f),E(ox.$$.fragment,f),E(rx.$$.fragment,f),E(ax.$$.fragment,f),E(g3.$$.fragment,f),E(nx.$$.fragment,f),E(C3.$$.fragment,f),E(sx.$$.fragment,f),E(lx.$$.fragment,f),E(dx.$$.fragment,f),E(A3.$$.fragment,f),E(cx.$$.fragment,f),E(B3.$$.fragment,f),E(fx.$$.fragment,f),E(mx.$$.fragment,f),E(hx.$$.fragment,f),E(N3.$$.fragment,f),E(px.$$.fragment,f),E(W3.$$.fragment,f),E(ux.$$.fragment,f),E(_x.$$.fragment,f),E(vx.$$.fragment,f),E(H3.$$.fragment,f),E(Fx.$$.fragment,f),E(J3.$$.fragment,f),E(Tx.$$.fragment,f),E(Mx.$$.fragment,f),E(Cx.$$.fragment,f),E(K3.$$.fragment,f),E(wx.$$.fragment,f),E(ow.$$.fragment,f),E(yx.$$.fragment,f),E(Lx.$$.fragment,f),E($x.$$.fragment,f),E(tw.$$.fragment,f),E(kx.$$.fragment,f),E(nw.$$.fragment,f),oDe=!0)},o(f){C(d.$$.fragment,f),C(Ca.$$.fragment,f),C(yA.$$.fragment,f),C(LA.$$.fragment,f),C(Ff.$$.fragment,f),C(xA.$$.fragment,f),C($A.$$.fragment,f),C(RA.$$.fragment,f),C(Eg.$$.fragment,f),C(PA.$$.fragment,f),C(BA.$$.fragment,f),C(IA.$$.fragment,f),C(jA.$$.fragment,f),C(ah.$$.fragment,f),C(DA.$$.fragment,f),C(GA.$$.fragment,f),C(OA.$$.fragment,f),C(zA.$$.fragment,f),C(Ih.$$.fragment,f),C(Nh.$$.fragment,f),C(WA.$$.fragment,f),C(QA.$$.fragment,f),C(HA.$$.fragment,f),C(YA.$$.fragment,f),C(tp.$$.fragment,f),C(ap.$$.fragment,f),C(KA.$$.fragment,f),C(ZA.$$.fragment,f),C(ey.$$.fragment,f),C(ry.$$.fragment,f),C(lp.$$.fragment,f),C(ty.$$.fragment,f),C(r_.$$.fragment,f),C(ay.$$.fragment,f),C(ny.$$.fragment,f),C(ly.$$.fragment,f),C(a_.$$.fragment,f),C(iy.$$.fragment,f),C(H_.$$.fragment,f),C(dy.$$.fragment,f),C(cy.$$.fragment,f),C(my.$$.fragment,f),C(J_.$$.fragment,f),C(gy.$$.fragment,f),C(B1.$$.fragment,f),C(hy.$$.fragment,f),C(py.$$.fragment,f),C(_y.$$.fragment,f),C(N1.$$.fragment,f),C(by.$$.fragment,f),C(F7.$$.fragment,f),C(vy.$$.fragment,f),C(Fy.$$.fragment,f),C(My.$$.fragment,f),C(M7.$$.fragment,f),C(Ey.$$.fragment,f),C(D7.$$.fragment,f),C(Cy.$$.fragment,f),C(wy.$$.fragment,f),C(yy.$$.fragment,f),C(O7.$$.fragment,f),C(Ly.$$.fragment,f),C(Nb.$$.fragment,f),C(xy.$$.fragment,f),C($y.$$.fragment,f),C(Sy.$$.fragment,f),C(jb.$$.fragment,f),C(Ry.$$.fragment,f),C(u2.$$.fragment,f),C(Py.$$.fragment,f),C(By.$$.fragment,f),C(Ny.$$.fragment,f),C(b2.$$.fragment,f),C(qy.$$.fragment,f),C(w2.$$.fragment,f),C(jy.$$.fragment,f),C(Dy.$$.fragment,f),C(Oy.$$.fragment,f),C(y2.$$.fragment,f),C(Vy.$$.fragment,f),C(d4.$$.fragment,f),C(Xy.$$.fragment,f),C(zy.$$.fragment,f),C(Qy.$$.fragment,f),C(f4.$$.fragment,f),C(Hy.$$.fragment,f),C(Z4.$$.fragment,f),C(Uy.$$.fragment,f),C(Jy.$$.fragment,f),C(Ky.$$.fragment,f),C(ov.$$.fragment,f),C(Zy.$$.fragment,f),C(av.$$.fragment,f),C(eL.$$.fragment,f),C(oL.$$.fragment,f),C(tL.$$.fragment,f),C(sv.$$.fragment,f),C(aL.$$.fragment,f),C(Fv.$$.fragment,f),C(nL.$$.fragment,f),C(sL.$$.fragment,f),C(iL.$$.fragment,f),C(Mv.$$.fragment,f),C(dL.$$.fragment,f),C(wv.$$.fragment,f),C(cL.$$.fragment,f),C(fL.$$.fragment,f),C(gL.$$.fragment,f),C(yv.$$.fragment,f),C(hL.$$.fragment,f),C(qv.$$.fragment,f),C(pL.$$.fragment,f),C(uL.$$.fragment,f),C(bL.$$.fragment,f),C(Dv.$$.fragment,f),C(vL.$$.fragment,f),C(Qv.$$.fragment,f),C(FL.$$.fragment,f),C(TL.$$.fragment,f),C(EL.$$.fragment,f),C(Uv.$$.fragment,f),C(CL.$$.fragment,f),C(sF.$$.fragment,f),C(wL.$$.fragment,f),C(AL.$$.fragment,f),C(LL.$$.fragment,f),C(iF.$$.fragment,f),C(xL.$$.fragment,f),C(mF.$$.fragment,f),C(kL.$$.fragment,f),C(SL.$$.fragment,f),C(PL.$$.fragment,f),C(hF.$$.fragment,f),C(BL.$$.fragment,f),C(TF.$$.fragment,f),C(IL.$$.fragment,f),C(NL.$$.fragment,f),C(jL.$$.fragment,f),C(EF.$$.fragment,f),C(DL.$$.fragment,f),C(LF.$$.fragment,f),C(GL.$$.fragment,f),C(OL.$$.fragment,f),C(XL.$$.fragment,f),C($F.$$.fragment,f),C(zL.$$.fragment,f),C(PF.$$.fragment,f),C(QL.$$.fragment,f),C(HL.$$.fragment,f),C(JL.$$.fragment,f),C(IF.$$.fragment,f),C(YL.$$.fragment,f),C(jF.$$.fragment,f),C(KL.$$.fragment,f),C(ZL.$$.fragment,f),C(o8.$$.fragment,f),C(GF.$$.fragment,f),C(r8.$$.fragment,f),C(QF.$$.fragment,f),C(t8.$$.fragment,f),C(a8.$$.fragment,f),C(s8.$$.fragment,f),C(UF.$$.fragment,f),C(l8.$$.fragment,f),C(KF.$$.fragment,f),C(i8.$$.fragment,f),C(d8.$$.fragment,f),C(f8.$$.fragment,f),C(e0.$$.fragment,f),C(m8.$$.fragment,f),C(W0.$$.fragment,f),C(g8.$$.fragment,f),C(h8.$$.fragment,f),C(u8.$$.fragment,f),C(H0.$$.fragment,f),C(_8.$$.fragment,f),C(bT.$$.fragment,f),C(b8.$$.fragment,f),C(v8.$$.fragment,f),C(T8.$$.fragment,f),C(FT.$$.fragment,f),C(M8.$$.fragment,f),C(RT.$$.fragment,f),C(E8.$$.fragment,f),C(C8.$$.fragment,f),C(A8.$$.fragment,f),C(BT.$$.fragment,f),C(y8.$$.fragment,f),C(DT.$$.fragment,f),C(L8.$$.fragment,f),C(x8.$$.fragment,f),C(k8.$$.fragment,f),C(OT.$$.fragment,f),C(S8.$$.fragment,f),C(dM.$$.fragment,f),C(R8.$$.fragment,f),C(P8.$$.fragment,f),C(I8.$$.fragment,f),C(fM.$$.fragment,f),C(N8.$$.fragment,f),C(MM.$$.fragment,f),C(q8.$$.fragment,f),C(j8.$$.fragment,f),C(G8.$$.fragment,f),C(CM.$$.fragment,f),C(O8.$$.fragment,f),C(YM.$$.fragment,f),C(V8.$$.fragment,f),C(X8.$$.fragment,f),C(W8.$$.fragment,f),C(ZM.$$.fragment,f),C(Q8.$$.fragment,f),C(_E.$$.fragment,f),C(H8.$$.fragment,f),C(U8.$$.fragment,f),C(Y8.$$.fragment,f),C(vE.$$.fragment,f),C(K8.$$.fragment,f),C(ME.$$.fragment,f),C(e9.$$.fragment,f),C(o9.$$.fragment,f),C(t9.$$.fragment,f),C(CE.$$.fragment,f),C(a9.$$.fragment,f),C(AE.$$.fragment,f),C(n9.$$.fragment,f),C(s9.$$.fragment,f),C(i9.$$.fragment,f),C(LE.$$.fragment,f),C(d9.$$.fragment,f),C(UE.$$.fragment,f),C(c9.$$.fragment,f),C(f9.$$.fragment,f),C(g9.$$.fragment,f),C(YE.$$.fragment,f),C(h9.$$.fragment,f),C(bC.$$.fragment,f),C(p9.$$.fragment,f),C(u9.$$.fragment,f),C(b9.$$.fragment,f),C(FC.$$.fragment,f),C(v9.$$.fragment,f),C(MC.$$.fragment,f),C(F9.$$.fragment,f),C(T9.$$.fragment,f),C(E9.$$.fragment,f),C(CC.$$.fragment,f),C(C9.$$.fragment,f),C(AC.$$.fragment,f),C(w9.$$.fragment,f),C(A9.$$.fragment,f),C(L9.$$.fragment,f),C(LC.$$.fragment,f),C(x9.$$.fragment,f),C(e5.$$.fragment,f),C($9.$$.fragment,f),C(k9.$$.fragment,f),C(R9.$$.fragment,f),C(r5.$$.fragment,f),C(P9.$$.fragment,f),C(m5.$$.fragment,f),C(B9.$$.fragment,f),C(I9.$$.fragment,f),C(q9.$$.fragment,f),C(h5.$$.fragment,f),C(j9.$$.fragment,f),C(y5.$$.fragment,f),C(D9.$$.fragment,f),C(G9.$$.fragment,f),C(V9.$$.fragment,f),C(x5.$$.fragment,f),C(X9.$$.fragment,f),C(D5.$$.fragment,f),C(z9.$$.fragment,f),C(W9.$$.fragment,f),C(H9.$$.fragment,f),C(O5.$$.fragment,f),C(U9.$$.fragment,f),C(K5.$$.fragment,f),C(J9.$$.fragment,f),C(Y9.$$.fragment,f),C(Z9.$$.fragment,f),C(e3.$$.fragment,f),C(ex.$$.fragment,f),C(f3.$$.fragment,f),C(ox.$$.fragment,f),C(rx.$$.fragment,f),C(ax.$$.fragment,f),C(g3.$$.fragment,f),C(nx.$$.fragment,f),C(C3.$$.fragment,f),C(sx.$$.fragment,f),C(lx.$$.fragment,f),C(dx.$$.fragment,f),C(A3.$$.fragment,f),C(cx.$$.fragment,f),C(B3.$$.fragment,f),C(fx.$$.fragment,f),C(mx.$$.fragment,f),C(hx.$$.fragment,f),C(N3.$$.fragment,f),C(px.$$.fragment,f),C(W3.$$.fragment,f),C(ux.$$.fragment,f),C(_x.$$.fragment,f),C(vx.$$.fragment,f),C(H3.$$.fragment,f),C(Fx.$$.fragment,f),C(J3.$$.fragment,f),C(Tx.$$.fragment,f),C(Mx.$$.fragment,f),C(Cx.$$.fragment,f),C(K3.$$.fragment,f),C(wx.$$.fragment,f),C(ow.$$.fragment,f),C(yx.$$.fragment,f),C(Lx.$$.fragment,f),C($x.$$.fragment,f),C(tw.$$.fragment,f),C(kx.$$.fragment,f),C(nw.$$.fragment,f),oDe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(pf),f&&t(rt),f&&t(je),f&&t(We),f&&t(_f),w(Ca,f),f&&t(Qe),f&&t(Ae),f&&t(Eo),f&&t(wa),f&&t(KNe),f&&t(bi),w(yA),f&&t(ZNe),f&&t(kn),f&&t(eqe),w(LA,f),f&&t(oqe),f&&t(J$),f&&t(rqe),w(Ff,f),f&&t(tqe),f&&t(vi),w(xA),f&&t(aqe),f&&t(Co),w($A),w(RA),w(Eg),w(PA),f&&t(nqe),f&&t(Ti),w(BA),f&&t(sqe),f&&t(wo),w(IA),w(jA),w(ah),w(DA),f&&t(lqe),f&&t(Mi),w(GA),f&&t(iqe),f&&t(Ao),w(OA),w(zA),w(Ih),w(Nh),w(WA),f&&t(dqe),f&&t(Ei),w(QA),f&&t(cqe),f&&t(yo),w(HA),w(YA),w(tp),w(ap),w(KA),f&&t(fqe),f&&t(wi),w(ZA),f&&t(mqe),f&&t(Lo),w(ey),w(ry),w(lp),w(ty),w(r_),f&&t(gqe),f&&t(Li),w(ay),f&&t(hqe),f&&t(xo),w(ny),w(ly),w(a_),w(iy),w(H_),f&&t(pqe),f&&t(ki),w(dy),f&&t(uqe),f&&t($o),w(cy),w(my),w(J_),w(gy),w(B1),f&&t(_qe),f&&t(Pi),w(hy),f&&t(bqe),f&&t(ko),w(py),w(_y),w(N1),w(by),w(F7),f&&t(vqe),f&&t(Ni),w(vy),f&&t(Fqe),f&&t(So),w(Fy),w(My),w(M7),w(Ey),w(D7),f&&t(Tqe),f&&t(Di),w(Cy),f&&t(Mqe),f&&t(Ro),w(wy),w(yy),w(O7),w(Ly),w(Nb),f&&t(Eqe),f&&t(Vi),w(xy),f&&t(Cqe),f&&t(Po),w($y),w(Sy),w(jb),w(Ry),w(u2),f&&t(wqe),f&&t(Wi),w(Py),f&&t(Aqe),f&&t(Bo),w(By),w(Ny),w(b2),w(qy),w(w2),f&&t(yqe),f&&t(Ui),w(jy),f&&t(Lqe),f&&t(Io),w(Dy),w(Oy),w(y2),w(Vy),w(d4),f&&t(xqe),f&&t(Ki),w(Xy),f&&t($qe),f&&t(No),w(zy),w(Qy),w(f4),w(Hy),w(Z4),f&&t(kqe),f&&t(od),w(Uy),f&&t(Sqe),f&&t(qo),w(Jy),w(Ky),w(ov),w(Zy),w(av),f&&t(Rqe),f&&t(ad),w(eL),f&&t(Pqe),f&&t(jo),w(oL),w(tL),w(sv),w(aL),w(Fv),f&&t(Bqe),f&&t(ld),w(nL),f&&t(Iqe),f&&t(Do),w(sL),w(iL),w(Mv),w(dL),w(wv),f&&t(Nqe),f&&t(cd),w(cL),f&&t(qqe),f&&t(Go),w(fL),w(gL),w(yv),w(hL),w(qv),f&&t(jqe),f&&t(gd),w(pL),f&&t(Dqe),f&&t(Oo),w(uL),w(bL),w(Dv),w(vL),w(Qv),f&&t(Gqe),f&&t(ud),w(FL),f&&t(Oqe),f&&t(Vo),w(TL),w(EL),w(Uv),w(CL),w(sF),f&&t(Vqe),f&&t(vd),w(wL),f&&t(Xqe),f&&t(Xo),w(AL),w(LL),w(iF),w(xL),w(mF),f&&t(zqe),f&&t(Md),w(kL),f&&t(Wqe),f&&t(zo),w(SL),w(PL),w(hF),w(BL),w(TF),f&&t(Qqe),f&&t(wd),w(IL),f&&t(Hqe),f&&t(Wo),w(NL),w(jL),w(EF),w(DL),w(LF),f&&t(Uqe),f&&t(xd),w(GL),f&&t(Jqe),f&&t(Qo),w(OL),w(XL),w($F),w(zL),w(PF),f&&t(Yqe),f&&t(Sd),w(QL),f&&t(Kqe),f&&t(Ho),w(HL),w(JL),w(IF),w(YL),w(jF),f&&t(Zqe),f&&t(Bd),w(KL),f&&t(eje),f&&t(Uo),w(ZL),w(o8),w(GF),w(r8),w(QF),f&&t(oje),f&&t(qd),w(t8),f&&t(rje),f&&t(Jo),w(a8),w(s8),w(UF),w(l8),w(KF),f&&t(tje),f&&t(Gd),w(i8),f&&t(aje),f&&t(Yo),w(d8),w(f8),w(e0),w(m8),w(W0),f&&t(nje),f&&t(Xd),w(g8),f&&t(sje),f&&t(Ko),w(h8),w(u8),w(H0),w(_8),w(bT),f&&t(lje),f&&t(Qd),w(b8),f&&t(ije),f&&t(Zo),w(v8),w(T8),w(FT),w(M8),w(RT),f&&t(dje),f&&t(Jd),w(E8),f&&t(cje),f&&t(er),w(C8),w(A8),w(BT),w(y8),w(DT),f&&t(fje),f&&t(Zd),w(L8),f&&t(mje),f&&t(or),w(x8),w(k8),w(OT),w(S8),w(dM),f&&t(gje),f&&t(rc),w(R8),f&&t(hje),f&&t(rr),w(P8),w(I8),w(fM),w(N8),w(MM),f&&t(pje),f&&t(nc),w(q8),f&&t(uje),f&&t(tr),w(j8),w(G8),w(CM),w(O8),w(YM),f&&t(_je),f&&t(ic),w(V8),f&&t(bje),f&&t(ar),w(X8),w(W8),w(ZM),w(Q8),w(_E),f&&t(vje),f&&t(fc),w(H8),f&&t(Fje),f&&t(nr),w(U8),w(Y8),w(vE),w(K8),w(ME),f&&t(Tje),f&&t(hc),w(e9),f&&t(Mje),f&&t(sr),w(o9),w(t9),w(CE),w(a9),w(AE),f&&t(Eje),f&&t(_c),w(n9),f&&t(Cje),f&&t(lr),w(s9),w(i9),w(LE),w(d9),w(UE),f&&t(wje),f&&t(Fc),w(c9),f&&t(Aje),f&&t(ir),w(f9),w(g9),w(YE),w(h9),w(bC),f&&t(yje),f&&t(Ec),w(p9),f&&t(Lje),f&&t(dr),w(u9),w(b9),w(FC),w(v9),w(MC),f&&t(xje),f&&t(Ac),w(F9),f&&t($je),f&&t(cr),w(T9),w(E9),w(CC),w(C9),w(AC),f&&t(kje),f&&t(xc),w(w9),f&&t(Sje),f&&t(fr),w(A9),w(L9),w(LC),w(x9),w(e5),f&&t(Rje),f&&t(Sc),w($9),f&&t(Pje),f&&t(mr),w(k9),w(R9),w(r5),w(P9),w(m5),f&&t(Bje),f&&t(Bc),w(B9),f&&t(Ije),f&&t(gr),w(I9),w(q9),w(h5),w(j9),w(y5),f&&t(Nje),f&&t(qc),w(D9),f&&t(qje),f&&t(hr),w(G9),w(V9),w(x5),w(X9),w(D5),f&&t(jje),f&&t(Gc),w(z9),f&&t(Dje),f&&t(pr),w(W9),w(H9),w(O5),w(U9),w(K5),f&&t(Gje),f&&t(Xc),w(J9),f&&t(Oje),f&&t(ur),w(Y9),w(Z9),w(e3),w(ex),w(f3),f&&t(Vje),f&&t(Qc),w(ox),f&&t(Xje),f&&t(_r),w(rx),w(ax),w(g3),w(nx),w(C3),f&&t(zje),f&&t(Jc),w(sx),f&&t(Wje),f&&t(br),w(lx),w(dx),w(A3),w(cx),w(B3),f&&t(Qje),f&&t(Zc),w(fx),f&&t(Hje),f&&t(vr),w(mx),w(hx),w(N3),w(px),w(W3),f&&t(Uje),f&&t(rf),w(ux),f&&t(Jje),f&&t(Fr),w(_x),w(vx),w(H3),w(Fx),w(J3),f&&t(Yje),f&&t(nf),w(Tx),f&&t(Kje),f&&t(Tr),w(Mx),w(Cx),w(K3),w(wx),w(ow),f&&t(Zje),f&&t(df),w(yx),f&&t(eDe),f&&t(Mr),w(Lx),w($x),w(tw),w(kx),w(nw)}}}const dSt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function cSt(L){return c$t(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class _St extends s$t{constructor(g){super();l$t(this,g,cSt,iSt,i$t,{})}}export{_St as default,dSt as metadata};
