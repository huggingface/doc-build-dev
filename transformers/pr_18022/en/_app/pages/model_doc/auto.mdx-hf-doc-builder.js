import{S as BWt,i as NWt,s as IWt,e as a,k as l,w as F,t as o,M as qWt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as jWt,L as N}from"../../chunks/vendor-hf-doc-builder.js";import{T as Jtt}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as te}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function DWt($){let g,v,p,m,_,d,h,Co,yi,Bf,lt,xi,$i,nL,Nf,Oe,We,ki,Pn,sL,Bn,Nn,lL,Si,In,iL,Ri,If,Sa;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Co=o(`, make sure its
`),yi=a("code"),Bf=o("model_type"),lt=o(" attribute is set to the same key you use when registering the config (here "),xi=a("code"),$i=o('"new-model"'),nL=o(")."),Nf=l(),Oe=a("p"),We=o("Likewise, if your "),ki=a("code"),Pn=o("NewModel"),sL=o(" is a subclass of "),Bn=a("a"),Nn=o("PreTrainedModel"),lL=o(`, make sure its
`),Si=a("code"),In=o("config_class"),iL=o(` attribute is set to the same class you use when registering the model (here
`),Ri=a("code"),If=o("NewModelConfig"),Sa=o(")."),this.h()},l(He){g=n(He,"P",{});var Le=s(g);v=r(Le,"If your "),p=n(Le,"CODE",{});var GS=s(p);m=r(GS,"NewModelConfig"),GS.forEach(t),_=r(Le," is a subclass of "),d=n(Le,"CODE",{});var Pi=s(d);h=r(Pi,"PretrainedConfig"),Pi.forEach(t),Co=r(Le,`, make sure its
`),yi=n(Le,"CODE",{});var OS=s(yi);Bf=r(OS,"model_type"),OS.forEach(t),lt=r(Le," attribute is set to the same key you use when registering the config (here "),xi=n(Le,"CODE",{});var VS=s(xi);$i=r(VS,'"new-model"'),VS.forEach(t),nL=r(Le,")."),Le.forEach(t),Nf=i(He),Oe=n(He,"P",{});var wo=s(Oe);We=r(wo,"Likewise, if your "),ki=n(wo,"CODE",{});var Ra=s(ki);Pn=r(Ra,"NewModel"),Ra.forEach(t),sL=r(wo," is a subclass of "),Bn=n(wo,"A",{href:!0});var XS=s(Bn);Nn=r(XS,"PreTrainedModel"),XS.forEach(t),lL=r(wo,`, make sure its
`),Si=n(wo,"CODE",{});var qf=s(Si);In=r(qf,"config_class"),qf.forEach(t),iL=r(wo,` attribute is set to the same class you use when registering the model (here
`),Ri=n(wo,"CODE",{});var zS=s(Ri);If=r(zS,"NewModelConfig"),zS.forEach(t),Sa=r(wo,")."),wo.forEach(t),this.h()},h(){c(Bn,"href","/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel")},m(He,Le){b(He,g,Le),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Co),e(g,yi),e(yi,Bf),e(g,lt),e(g,xi),e(xi,$i),e(g,nL),b(He,Nf,Le),b(He,Oe,Le),e(Oe,We),e(Oe,ki),e(ki,Pn),e(Oe,sL),e(Oe,Bn),e(Bn,Nn),e(Oe,lL),e(Oe,Si),e(Si,In),e(Oe,iL),e(Oe,Ri),e(Ri,If),e(Oe,Sa)},d(He){He&&t(g),He&&t(Nf),He&&t(Oe)}}}function GWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VWt($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Co=s(p);m=r(Co,"use_auth_token=True"),Co.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function XWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zWt($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Co=s(p);m=r(Co,"use_auth_token=True"),Co.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function QWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Ht($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function THt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Ht($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Ut($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Ut($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jUt($){let g,v,p,m,_,d,h,Co,yi,Bf,lt,xi,$i,nL,Nf,Oe,We,ki,Pn,sL,Bn,Nn,lL,Si,In,iL,Ri,If,Sa,He,Le,GS,Pi,OS,VS,wo,Ra,XS,qf,zS,RHe,bXe,Bi,jf,Nae,dL,PHe,Iae,BHe,vXe,qn,NHe,qae,IHe,qHe,jae,jHe,DHe,FXe,cL,TXe,QS,GHe,MXe,Df,EXe,Ni,Gf,Dae,fL,OHe,Gae,VHe,CXe,Ao,mL,XHe,gL,zHe,WS,QHe,WHe,HHe,hL,UHe,Oae,JHe,YHe,KHe,Lr,pL,ZHe,Vae,eUe,oUe,Ii,rUe,Xae,tUe,aUe,zae,nUe,sUe,lUe,A,Of,Qae,iUe,dUe,HS,cUe,fUe,mUe,Vf,Wae,gUe,hUe,US,pUe,_Ue,uUe,Xf,Hae,bUe,vUe,JS,FUe,TUe,MUe,zf,Uae,EUe,CUe,YS,wUe,AUe,LUe,Qf,Jae,yUe,xUe,KS,$Ue,kUe,SUe,Wf,Yae,RUe,PUe,ZS,BUe,NUe,IUe,Hf,Kae,qUe,jUe,eR,DUe,GUe,OUe,Uf,Zae,VUe,XUe,oR,zUe,QUe,WUe,Jf,ene,HUe,UUe,rR,JUe,YUe,KUe,Yf,one,ZUe,eJe,tR,oJe,rJe,tJe,Kf,rne,aJe,nJe,aR,sJe,lJe,iJe,Zf,tne,dJe,cJe,nR,fJe,mJe,gJe,em,ane,hJe,pJe,sR,_Je,uJe,bJe,om,nne,vJe,FJe,lR,TJe,MJe,EJe,rm,sne,CJe,wJe,iR,AJe,LJe,yJe,tm,lne,xJe,$Je,dR,kJe,SJe,RJe,am,ine,PJe,BJe,cR,NJe,IJe,qJe,nm,dne,jJe,DJe,fR,GJe,OJe,VJe,sm,cne,XJe,zJe,mR,QJe,WJe,HJe,lm,fne,UJe,JJe,gR,YJe,KJe,ZJe,im,mne,eYe,oYe,hR,rYe,tYe,aYe,dm,gne,nYe,sYe,pR,lYe,iYe,dYe,cm,hne,cYe,fYe,_R,mYe,gYe,hYe,fm,pne,pYe,_Ye,uR,uYe,bYe,vYe,mm,_ne,FYe,TYe,bR,MYe,EYe,CYe,gm,une,wYe,AYe,vR,LYe,yYe,xYe,hm,bne,$Ye,kYe,FR,SYe,RYe,PYe,pm,vne,BYe,NYe,TR,IYe,qYe,jYe,_m,Fne,DYe,GYe,MR,OYe,VYe,XYe,um,Tne,zYe,QYe,ER,WYe,HYe,UYe,bm,Mne,JYe,YYe,CR,KYe,ZYe,eKe,vm,Ene,oKe,rKe,wR,tKe,aKe,nKe,Fm,Cne,sKe,lKe,AR,iKe,dKe,cKe,Tm,wne,fKe,mKe,LR,gKe,hKe,pKe,Mm,Ane,_Ke,uKe,yR,bKe,vKe,FKe,Em,Lne,TKe,MKe,xR,EKe,CKe,wKe,Cm,yne,AKe,LKe,$R,yKe,xKe,$Ke,wm,xne,kKe,SKe,kR,RKe,PKe,BKe,Am,$ne,NKe,IKe,SR,qKe,jKe,DKe,Lm,kne,GKe,OKe,RR,VKe,XKe,zKe,ym,Sne,QKe,WKe,PR,HKe,UKe,JKe,xm,Rne,YKe,KKe,BR,ZKe,eZe,oZe,$m,Pne,rZe,tZe,NR,aZe,nZe,sZe,km,Bne,lZe,iZe,IR,dZe,cZe,fZe,Sm,Nne,mZe,gZe,qR,hZe,pZe,_Ze,Rm,Ine,uZe,bZe,jR,vZe,FZe,TZe,Pm,qne,MZe,EZe,DR,CZe,wZe,AZe,Bm,jne,LZe,yZe,GR,xZe,$Ze,kZe,Nm,Dne,SZe,RZe,OR,PZe,BZe,NZe,Im,Gne,IZe,qZe,VR,jZe,DZe,GZe,qm,One,OZe,VZe,XR,XZe,zZe,QZe,jm,Vne,WZe,HZe,zR,UZe,JZe,YZe,Dm,Xne,KZe,ZZe,QR,eeo,oeo,reo,Gm,zne,teo,aeo,WR,neo,seo,leo,Om,Qne,ieo,deo,HR,ceo,feo,meo,Vm,Wne,geo,heo,UR,peo,_eo,ueo,Xm,Hne,beo,veo,JR,Feo,Teo,Meo,zm,Une,Eeo,Ceo,YR,weo,Aeo,Leo,Qm,Jne,yeo,xeo,KR,$eo,keo,Seo,Wm,Yne,Reo,Peo,ZR,Beo,Neo,Ieo,Hm,Kne,qeo,jeo,eP,Deo,Geo,Oeo,Um,Zne,Veo,Xeo,oP,zeo,Qeo,Weo,Jm,ese,Heo,Ueo,rP,Jeo,Yeo,Keo,Ym,ose,Zeo,eoo,tP,ooo,roo,too,Km,rse,aoo,noo,aP,soo,loo,ioo,Zm,tse,doo,coo,nP,foo,moo,goo,eg,ase,hoo,poo,sP,_oo,uoo,boo,og,nse,voo,Foo,lP,Too,Moo,Eoo,rg,sse,Coo,woo,iP,Aoo,Loo,yoo,tg,lse,xoo,$oo,dP,koo,Soo,Roo,ag,ise,Poo,Boo,cP,Noo,Ioo,qoo,ng,dse,joo,Doo,fP,Goo,Ooo,Voo,sg,cse,Xoo,zoo,mP,Qoo,Woo,Hoo,lg,fse,Uoo,Joo,gP,Yoo,Koo,Zoo,ig,mse,ero,oro,hP,rro,tro,aro,dg,gse,nro,sro,pP,lro,iro,dro,cg,hse,cro,fro,_P,mro,gro,hro,fg,pse,pro,_ro,uP,uro,bro,vro,mg,_se,Fro,Tro,bP,Mro,Ero,Cro,gg,use,wro,Aro,vP,Lro,yro,xro,hg,bse,$ro,kro,FP,Sro,Rro,Pro,pg,vse,Bro,Nro,TP,Iro,qro,jro,_g,Fse,Dro,Gro,MP,Oro,Vro,Xro,ug,Tse,zro,Qro,EP,Wro,Hro,Uro,bg,Mse,Jro,Yro,CP,Kro,Zro,eto,vg,Ese,oto,rto,wP,tto,ato,nto,Fg,Cse,sto,lto,AP,ito,dto,cto,Tg,wse,fto,mto,LP,gto,hto,pto,Mg,Ase,_to,uto,yP,bto,vto,Fto,Eg,Lse,Tto,Mto,xP,Eto,Cto,wto,Cg,yse,Ato,Lto,$P,yto,xto,$to,wg,xse,kto,Sto,kP,Rto,Pto,Bto,Ag,$se,Nto,Ito,SP,qto,jto,Dto,Lg,kse,Gto,Oto,RP,Vto,Xto,zto,yg,Sse,Qto,Wto,PP,Hto,Uto,Jto,xg,Rse,Yto,Kto,BP,Zto,eao,oao,$g,Pse,rao,tao,NP,aao,nao,sao,kg,Bse,lao,iao,IP,dao,cao,fao,Sg,Nse,mao,gao,qP,hao,pao,_ao,Rg,Ise,uao,bao,jP,vao,Fao,Tao,Pg,qse,Mao,Eao,DP,Cao,wao,Aao,Bg,jse,Lao,yao,GP,xao,$ao,kao,Ng,Dse,Sao,Rao,OP,Pao,Bao,Nao,Ig,Gse,Iao,qao,VP,jao,Dao,Gao,qg,Ose,Oao,Vao,XP,Xao,zao,Qao,jg,Vse,Wao,Hao,zP,Uao,Jao,Yao,Dg,Xse,Kao,Zao,QP,eno,ono,rno,Gg,zse,tno,ano,WP,nno,sno,lno,Og,Qse,ino,dno,HP,cno,fno,mno,Vg,Wse,gno,hno,UP,pno,_no,uno,Xg,Hse,bno,vno,JP,Fno,Tno,Mno,zg,Use,Eno,Cno,YP,wno,Ano,Lno,Qg,Jse,yno,xno,KP,$no,kno,Sno,Wg,Yse,Rno,Pno,ZP,Bno,Nno,Ino,Hg,Kse,qno,jno,eB,Dno,Gno,Ono,Ug,Zse,Vno,Xno,oB,zno,Qno,Wno,Jg,ele,Hno,Uno,rB,Jno,Yno,Kno,Yg,ole,Zno,eso,tB,oso,rso,tso,Kg,aso,Zg,_L,nso,rle,sso,wXe,qi,eh,tle,uL,lso,ale,iso,AXe,Lo,bL,dso,vL,cso,aB,fso,mso,gso,FL,hso,nle,pso,_so,uso,yr,TL,bso,sle,vso,Fso,Pa,Tso,lle,Mso,Eso,ile,Cso,wso,dle,Aso,Lso,yso,k,jn,cle,xso,$so,nB,kso,Sso,sB,Rso,Pso,Bso,Dn,fle,Nso,Iso,lB,qso,jso,iB,Dso,Gso,Oso,Gn,mle,Vso,Xso,dB,zso,Qso,cB,Wso,Hso,Uso,oh,gle,Jso,Yso,fB,Kso,Zso,elo,On,hle,olo,rlo,mB,tlo,alo,gB,nlo,slo,llo,rh,ple,ilo,dlo,hB,clo,flo,mlo,th,_le,glo,hlo,pB,plo,_lo,ulo,ah,ule,blo,vlo,_B,Flo,Tlo,Mlo,Vn,ble,Elo,Clo,uB,wlo,Alo,bB,Llo,ylo,xlo,Xn,vle,$lo,klo,vB,Slo,Rlo,FB,Plo,Blo,Nlo,zn,Fle,Ilo,qlo,TB,jlo,Dlo,MB,Glo,Olo,Vlo,nh,Tle,Xlo,zlo,EB,Qlo,Wlo,Hlo,sh,Mle,Ulo,Jlo,CB,Ylo,Klo,Zlo,lh,Ele,eio,oio,wB,rio,tio,aio,Qn,Cle,nio,sio,AB,lio,iio,LB,dio,cio,fio,ih,wle,mio,gio,yB,hio,pio,_io,Wn,Ale,uio,bio,xB,vio,Fio,$B,Tio,Mio,Eio,Hn,Lle,Cio,wio,kB,Aio,Lio,SB,yio,xio,$io,Un,yle,kio,Sio,RB,Rio,Pio,PB,Bio,Nio,Iio,Jn,xle,qio,jio,BB,Dio,Gio,NB,Oio,Vio,Xio,dh,$le,zio,Qio,IB,Wio,Hio,Uio,Yn,kle,Jio,Yio,qB,Kio,Zio,jB,edo,odo,rdo,Kn,Sle,tdo,ado,DB,ndo,sdo,GB,ldo,ido,ddo,Zn,Rle,cdo,fdo,OB,mdo,gdo,VB,hdo,pdo,_do,es,Ple,udo,bdo,XB,vdo,Fdo,zB,Tdo,Mdo,Edo,os,Ble,Cdo,wdo,QB,Ado,Ldo,WB,ydo,xdo,$do,rs,Nle,kdo,Sdo,HB,Rdo,Pdo,UB,Bdo,Ndo,Ido,ch,Ile,qdo,jdo,JB,Ddo,Gdo,Odo,ts,qle,Vdo,Xdo,YB,zdo,Qdo,KB,Wdo,Hdo,Udo,fh,jle,Jdo,Ydo,ZB,Kdo,Zdo,eco,as,Dle,oco,rco,eN,tco,aco,oN,nco,sco,lco,ns,Gle,ico,dco,rN,cco,fco,tN,mco,gco,hco,ss,Ole,pco,_co,aN,uco,bco,nN,vco,Fco,Tco,mh,Vle,Mco,Eco,sN,Cco,wco,Aco,ls,Xle,Lco,yco,lN,xco,$co,iN,kco,Sco,Rco,is,zle,Pco,Bco,dN,Nco,Ico,cN,qco,jco,Dco,ds,Qle,Gco,Oco,fN,Vco,Xco,mN,zco,Qco,Wco,gh,Wle,Hco,Uco,gN,Jco,Yco,Kco,cs,Hle,Zco,efo,hN,ofo,rfo,pN,tfo,afo,nfo,fs,Ule,sfo,lfo,_N,ifo,dfo,uN,cfo,ffo,mfo,ms,Jle,gfo,hfo,bN,pfo,_fo,vN,ufo,bfo,vfo,gs,Yle,Ffo,Tfo,FN,Mfo,Efo,TN,Cfo,wfo,Afo,hs,Kle,Lfo,yfo,MN,xfo,$fo,EN,kfo,Sfo,Rfo,ps,Zle,Pfo,Bfo,CN,Nfo,Ifo,wN,qfo,jfo,Dfo,_s,eie,Gfo,Ofo,AN,Vfo,Xfo,LN,zfo,Qfo,Wfo,us,oie,Hfo,Ufo,yN,Jfo,Yfo,xN,Kfo,Zfo,emo,hh,rie,omo,rmo,$N,tmo,amo,nmo,bs,tie,smo,lmo,kN,imo,dmo,SN,cmo,fmo,mmo,ph,aie,gmo,hmo,RN,pmo,_mo,umo,_h,nie,bmo,vmo,PN,Fmo,Tmo,Mmo,vs,sie,Emo,Cmo,BN,wmo,Amo,NN,Lmo,ymo,xmo,Fs,lie,$mo,kmo,IN,Smo,Rmo,qN,Pmo,Bmo,Nmo,Ts,iie,Imo,qmo,jN,jmo,Dmo,DN,Gmo,Omo,Vmo,uh,die,Xmo,zmo,GN,Qmo,Wmo,Hmo,Ms,cie,Umo,Jmo,ON,Ymo,Kmo,VN,Zmo,ego,ogo,Es,fie,rgo,tgo,XN,ago,ngo,zN,sgo,lgo,igo,Cs,mie,dgo,cgo,QN,fgo,mgo,WN,ggo,hgo,pgo,ws,gie,_go,ugo,HN,bgo,vgo,UN,Fgo,Tgo,Mgo,As,hie,Ego,Cgo,JN,wgo,Ago,YN,Lgo,ygo,xgo,Ls,pie,$go,kgo,KN,Sgo,Rgo,ZN,Pgo,Bgo,Ngo,ys,_ie,Igo,qgo,eI,jgo,Dgo,oI,Ggo,Ogo,Vgo,xs,uie,Xgo,zgo,rI,Qgo,Wgo,tI,Hgo,Ugo,Jgo,bh,bie,Ygo,Kgo,aI,Zgo,eho,oho,$s,vie,rho,tho,nI,aho,nho,sI,sho,lho,iho,vh,Fie,dho,cho,lI,fho,mho,gho,Fh,Tie,hho,pho,iI,_ho,uho,bho,Th,Mie,vho,Fho,dI,Tho,Mho,Eho,Mh,Eie,Cho,who,cI,Aho,Lho,yho,ks,Cie,xho,$ho,fI,kho,Sho,mI,Rho,Pho,Bho,Eh,wie,Nho,Iho,gI,qho,jho,Dho,Ss,Aie,Gho,Oho,hI,Vho,Xho,pI,zho,Qho,Who,Rs,Lie,Hho,Uho,_I,Jho,Yho,uI,Kho,Zho,epo,Ps,yie,opo,rpo,bI,tpo,apo,vI,npo,spo,lpo,Bs,xie,ipo,dpo,FI,cpo,fpo,TI,mpo,gpo,hpo,Ns,$ie,ppo,_po,MI,upo,bpo,EI,vpo,Fpo,Tpo,Is,kie,Mpo,Epo,CI,Cpo,wpo,wI,Apo,Lpo,ypo,Ch,Sie,xpo,$po,AI,kpo,Spo,Rpo,wh,Rie,Ppo,Bpo,LI,Npo,Ipo,qpo,qs,Pie,jpo,Dpo,yI,Gpo,Opo,xI,Vpo,Xpo,zpo,js,Bie,Qpo,Wpo,$I,Hpo,Upo,kI,Jpo,Ypo,Kpo,Ds,Nie,Zpo,e_o,SI,o_o,r_o,RI,t_o,a_o,n_o,Ah,Iie,s_o,l_o,PI,i_o,d_o,c_o,Lh,qie,f_o,m_o,BI,g_o,h_o,p_o,yh,jie,__o,u_o,NI,b_o,v_o,F_o,Gs,Die,T_o,M_o,II,E_o,C_o,qI,w_o,A_o,L_o,Os,Gie,y_o,x_o,jI,$_o,k_o,DI,S_o,R_o,P_o,xh,Oie,B_o,N_o,GI,I_o,q_o,j_o,$h,Vie,D_o,G_o,OI,O_o,V_o,X_o,kh,Xie,z_o,Q_o,VI,W_o,H_o,U_o,Vs,zie,J_o,Y_o,XI,K_o,Z_o,zI,euo,ouo,ruo,Sh,Qie,tuo,auo,QI,nuo,suo,luo,Rh,Wie,iuo,duo,WI,cuo,fuo,muo,Xs,Hie,guo,huo,HI,puo,_uo,UI,uuo,buo,vuo,zs,Uie,Fuo,Tuo,JI,Muo,Euo,YI,Cuo,wuo,Auo,Qs,Jie,Luo,yuo,KI,xuo,$uo,ZI,kuo,Suo,Ruo,Ws,Yie,Puo,Buo,eq,Nuo,Iuo,oq,quo,juo,Duo,Ph,Guo,Bh,ML,Ouo,Kie,Vuo,LXe,ji,Nh,Zie,EL,Xuo,ede,zuo,yXe,yo,CL,Quo,wL,Wuo,rq,Huo,Uuo,Juo,AL,Yuo,ode,Kuo,Zuo,e2o,Ue,LL,o2o,rde,r2o,t2o,Ba,a2o,tde,n2o,s2o,ade,l2o,i2o,nde,d2o,c2o,f2o,Y,Ih,sde,m2o,g2o,tq,h2o,p2o,_2o,qh,lde,u2o,b2o,aq,v2o,F2o,T2o,jh,ide,M2o,E2o,nq,C2o,w2o,A2o,Dh,dde,L2o,y2o,sq,x2o,$2o,k2o,Gh,cde,S2o,R2o,lq,P2o,B2o,N2o,Oh,fde,I2o,q2o,iq,j2o,D2o,G2o,Vh,mde,O2o,V2o,dq,X2o,z2o,Q2o,Xh,gde,W2o,H2o,cq,U2o,J2o,Y2o,zh,hde,K2o,Z2o,fq,e1o,o1o,r1o,Qh,pde,t1o,a1o,mq,n1o,s1o,l1o,Wh,_de,i1o,d1o,gq,c1o,f1o,m1o,Hh,ude,g1o,h1o,hq,p1o,_1o,u1o,Uh,bde,b1o,v1o,pq,F1o,T1o,M1o,Jh,vde,E1o,C1o,_q,w1o,A1o,L1o,Yh,Fde,y1o,x1o,uq,$1o,k1o,S1o,Kh,Tde,R1o,P1o,bq,B1o,N1o,I1o,Zh,Mde,q1o,j1o,vq,D1o,G1o,O1o,ep,Ede,V1o,X1o,Fq,z1o,Q1o,W1o,op,Cde,H1o,U1o,Tq,J1o,Y1o,K1o,rp,wde,Z1o,ebo,Mq,obo,rbo,tbo,tp,Ade,abo,nbo,Eq,sbo,lbo,ibo,ap,Lde,dbo,cbo,Cq,fbo,mbo,gbo,np,yde,hbo,pbo,wq,_bo,ubo,bbo,sp,xde,vbo,Fbo,Aq,Tbo,Mbo,Ebo,lp,$de,Cbo,wbo,Lq,Abo,Lbo,ybo,ip,kde,xbo,$bo,yq,kbo,Sbo,Rbo,dp,Sde,Pbo,Bbo,xq,Nbo,Ibo,qbo,cp,Rde,jbo,Dbo,$q,Gbo,Obo,Vbo,fp,Pde,Xbo,zbo,kq,Qbo,Wbo,Hbo,mp,Bde,Ubo,Jbo,Sq,Ybo,Kbo,Zbo,gp,Nde,evo,ovo,Rq,rvo,tvo,avo,hp,Ide,nvo,svo,Pq,lvo,ivo,dvo,pp,qde,cvo,fvo,Bq,mvo,gvo,hvo,_p,jde,pvo,_vo,Nq,uvo,bvo,vvo,up,Fvo,bp,Tvo,vp,yL,Mvo,Dde,Evo,xXe,Di,Fp,Gde,xL,Cvo,Ode,wvo,$Xe,xo,$L,Avo,kL,Lvo,Iq,yvo,xvo,$vo,SL,kvo,Vde,Svo,Rvo,Pvo,Je,RL,Bvo,Xde,Nvo,Ivo,Gi,qvo,zde,jvo,Dvo,Qde,Gvo,Ovo,Vvo,pe,Tp,Wde,Xvo,zvo,qq,Qvo,Wvo,Hvo,Mp,Hde,Uvo,Jvo,Ude,Yvo,Kvo,Zvo,Ep,Jde,e0o,o0o,jq,r0o,t0o,a0o,Cp,Yde,n0o,s0o,Dq,l0o,i0o,d0o,wp,Kde,c0o,f0o,Gq,m0o,g0o,h0o,Ap,Zde,p0o,_0o,Oq,u0o,b0o,v0o,Lp,ece,F0o,T0o,Vq,M0o,E0o,C0o,yp,oce,w0o,A0o,Xq,L0o,y0o,x0o,xp,rce,$0o,k0o,zq,S0o,R0o,P0o,$p,tce,B0o,N0o,Qq,I0o,q0o,j0o,kp,ace,D0o,G0o,Wq,O0o,V0o,X0o,Sp,nce,z0o,Q0o,Hq,W0o,H0o,U0o,Rp,sce,J0o,Y0o,Uq,K0o,Z0o,eFo,Pp,lce,oFo,rFo,Jq,tFo,aFo,nFo,Bp,ice,sFo,lFo,Yq,iFo,dFo,cFo,Np,dce,fFo,mFo,Kq,gFo,hFo,pFo,Ip,cce,_Fo,uFo,Zq,bFo,vFo,FFo,qp,fce,TFo,MFo,ej,EFo,CFo,wFo,jp,AFo,Dp,LFo,Gp,PL,yFo,mce,xFo,kXe,Oi,Op,gce,BL,$Fo,hce,kFo,SXe,$o,NL,SFo,Vi,RFo,oj,PFo,BFo,rj,NFo,IFo,qFo,IL,jFo,pce,DFo,GFo,OFo,it,qL,VFo,_ce,XFo,zFo,Xi,QFo,uce,WFo,HFo,tj,UFo,JFo,YFo,Vp,KFo,Ye,jL,ZFo,bce,eTo,oTo,Na,rTo,vce,tTo,aTo,Fce,nTo,sTo,Tce,lTo,iTo,dTo,y,Xp,Mce,cTo,fTo,aj,mTo,gTo,hTo,zp,Ece,pTo,_To,nj,uTo,bTo,vTo,Qp,Cce,FTo,TTo,sj,MTo,ETo,CTo,Wp,wce,wTo,ATo,lj,LTo,yTo,xTo,Hp,Ace,$To,kTo,ij,STo,RTo,PTo,Up,Lce,BTo,NTo,dj,ITo,qTo,jTo,Jp,yce,DTo,GTo,cj,OTo,VTo,XTo,Yp,xce,zTo,QTo,fj,WTo,HTo,UTo,Kp,$ce,JTo,YTo,mj,KTo,ZTo,e8o,Zp,kce,o8o,r8o,gj,t8o,a8o,n8o,e_,Sce,s8o,l8o,hj,i8o,d8o,c8o,o_,Rce,f8o,m8o,pj,g8o,h8o,p8o,r_,Pce,_8o,u8o,_j,b8o,v8o,F8o,t_,Bce,T8o,M8o,uj,E8o,C8o,w8o,a_,Nce,A8o,L8o,bj,y8o,x8o,$8o,n_,Ice,k8o,S8o,vj,R8o,P8o,B8o,s_,qce,N8o,I8o,Fj,q8o,j8o,D8o,l_,jce,G8o,O8o,Tj,V8o,X8o,z8o,i_,Dce,Q8o,W8o,Mj,H8o,U8o,J8o,d_,Gce,Y8o,K8o,Ej,Z8o,eMo,oMo,c_,Oce,rMo,tMo,Cj,aMo,nMo,sMo,f_,Vce,lMo,iMo,wj,dMo,cMo,fMo,m_,Xce,mMo,gMo,Aj,hMo,pMo,_Mo,g_,zce,uMo,bMo,Lj,vMo,FMo,TMo,h_,Qce,MMo,EMo,yj,CMo,wMo,AMo,p_,Wce,LMo,yMo,xj,xMo,$Mo,kMo,__,Hce,SMo,RMo,$j,PMo,BMo,NMo,u_,Uce,IMo,qMo,kj,jMo,DMo,GMo,b_,Jce,OMo,VMo,Sj,XMo,zMo,QMo,v_,Yce,WMo,HMo,Rj,UMo,JMo,YMo,F_,Kce,KMo,ZMo,Pj,e4o,o4o,r4o,T_,Zce,t4o,a4o,Bj,n4o,s4o,l4o,M_,efe,i4o,d4o,Nj,c4o,f4o,m4o,E_,ofe,g4o,h4o,Ij,p4o,_4o,u4o,Hs,rfe,b4o,v4o,qj,F4o,T4o,jj,M4o,E4o,C4o,C_,tfe,w4o,A4o,Dj,L4o,y4o,x4o,w_,afe,$4o,k4o,Gj,S4o,R4o,P4o,A_,nfe,B4o,N4o,Oj,I4o,q4o,j4o,L_,sfe,D4o,G4o,Vj,O4o,V4o,X4o,y_,lfe,z4o,Q4o,Xj,W4o,H4o,U4o,x_,ife,J4o,Y4o,zj,K4o,Z4o,eEo,$_,dfe,oEo,rEo,Qj,tEo,aEo,nEo,k_,cfe,sEo,lEo,Wj,iEo,dEo,cEo,S_,ffe,fEo,mEo,Hj,gEo,hEo,pEo,R_,mfe,_Eo,uEo,Uj,bEo,vEo,FEo,P_,gfe,TEo,MEo,Jj,EEo,CEo,wEo,B_,hfe,AEo,LEo,Yj,yEo,xEo,$Eo,N_,pfe,kEo,SEo,Kj,REo,PEo,BEo,I_,_fe,NEo,IEo,Zj,qEo,jEo,DEo,q_,ufe,GEo,OEo,eD,VEo,XEo,zEo,j_,bfe,QEo,WEo,oD,HEo,UEo,JEo,D_,vfe,YEo,KEo,rD,ZEo,eCo,oCo,G_,Ffe,rCo,tCo,tD,aCo,nCo,sCo,O_,Tfe,lCo,iCo,aD,dCo,cCo,fCo,V_,Mfe,mCo,gCo,nD,hCo,pCo,_Co,X_,Efe,uCo,bCo,sD,vCo,FCo,TCo,z_,Cfe,MCo,ECo,lD,CCo,wCo,ACo,Q_,wfe,LCo,yCo,iD,xCo,$Co,kCo,W_,Afe,SCo,RCo,dD,PCo,BCo,NCo,H_,Lfe,ICo,qCo,cD,jCo,DCo,GCo,U_,yfe,OCo,VCo,fD,XCo,zCo,QCo,J_,xfe,WCo,HCo,mD,UCo,JCo,YCo,Y_,$fe,KCo,ZCo,gD,e3o,o3o,r3o,K_,kfe,t3o,a3o,hD,n3o,s3o,l3o,Z_,Sfe,i3o,d3o,pD,c3o,f3o,m3o,eu,Rfe,g3o,h3o,_D,p3o,_3o,u3o,ou,Pfe,b3o,v3o,uD,F3o,T3o,M3o,ru,Bfe,E3o,C3o,bD,w3o,A3o,L3o,tu,Nfe,y3o,x3o,vD,$3o,k3o,S3o,au,Ife,R3o,P3o,FD,B3o,N3o,I3o,nu,qfe,q3o,j3o,TD,D3o,G3o,O3o,su,jfe,V3o,X3o,MD,z3o,Q3o,W3o,lu,Dfe,H3o,U3o,ED,J3o,Y3o,K3o,iu,Gfe,Z3o,e5o,CD,o5o,r5o,t5o,du,Ofe,a5o,n5o,wD,s5o,l5o,i5o,cu,Vfe,d5o,c5o,AD,f5o,m5o,g5o,fu,Xfe,h5o,p5o,LD,_5o,u5o,b5o,mu,zfe,v5o,F5o,yD,T5o,M5o,E5o,gu,Qfe,C5o,w5o,xD,A5o,L5o,y5o,hu,Wfe,x5o,$5o,$D,k5o,S5o,R5o,pu,Hfe,P5o,B5o,kD,N5o,I5o,q5o,_u,Ufe,j5o,D5o,SD,G5o,O5o,V5o,uu,Jfe,X5o,z5o,RD,Q5o,W5o,H5o,bu,Yfe,U5o,J5o,PD,Y5o,K5o,Z5o,vu,Kfe,ewo,owo,BD,rwo,two,awo,Fu,Zfe,nwo,swo,ND,lwo,iwo,dwo,Tu,eme,cwo,fwo,ID,mwo,gwo,hwo,Mu,ome,pwo,_wo,qD,uwo,bwo,vwo,Eu,rme,Fwo,Two,jD,Mwo,Ewo,Cwo,Cu,tme,wwo,Awo,DD,Lwo,ywo,xwo,wu,ame,$wo,kwo,GD,Swo,Rwo,Pwo,Au,nme,Bwo,Nwo,OD,Iwo,qwo,jwo,Lu,sme,Dwo,Gwo,VD,Owo,Vwo,Xwo,yu,lme,zwo,Qwo,XD,Wwo,Hwo,Uwo,xu,ime,Jwo,Ywo,zD,Kwo,Zwo,eAo,$u,dme,oAo,rAo,QD,tAo,aAo,nAo,ku,cme,sAo,lAo,WD,iAo,dAo,cAo,Su,fme,fAo,mAo,HD,gAo,hAo,pAo,Ru,mme,_Ao,uAo,UD,bAo,vAo,FAo,Pu,gme,TAo,MAo,JD,EAo,CAo,wAo,Bu,hme,AAo,LAo,YD,yAo,xAo,$Ao,Nu,pme,kAo,SAo,KD,RAo,PAo,BAo,Iu,_me,NAo,IAo,ZD,qAo,jAo,DAo,qu,ume,GAo,OAo,eG,VAo,XAo,zAo,ju,bme,QAo,WAo,oG,HAo,UAo,JAo,Du,vme,YAo,KAo,rG,ZAo,e6o,o6o,Gu,Fme,r6o,t6o,tG,a6o,n6o,s6o,Ou,Tme,l6o,i6o,aG,d6o,c6o,f6o,Vu,Mme,m6o,g6o,nG,h6o,p6o,_6o,Xu,Eme,u6o,b6o,sG,v6o,F6o,T6o,zu,Cme,M6o,E6o,lG,C6o,w6o,A6o,Qu,wme,L6o,y6o,iG,x6o,$6o,k6o,Wu,S6o,Ame,R6o,P6o,Lme,B6o,N6o,Hu,RXe,zi,Uu,yme,DL,I6o,xme,q6o,PXe,ko,GL,j6o,Qi,D6o,dG,G6o,O6o,cG,V6o,X6o,z6o,OL,Q6o,$me,W6o,H6o,U6o,dt,VL,J6o,kme,Y6o,K6o,Wi,Z6o,Sme,e7o,o7o,fG,r7o,t7o,a7o,Ju,n7o,Ke,XL,s7o,Rme,l7o,i7o,Ia,d7o,Pme,c7o,f7o,Bme,m7o,g7o,Nme,h7o,p7o,_7o,G,Yu,Ime,u7o,b7o,mG,v7o,F7o,T7o,Ku,qme,M7o,E7o,gG,C7o,w7o,A7o,Zu,jme,L7o,y7o,hG,x7o,$7o,k7o,e2,Dme,S7o,R7o,pG,P7o,B7o,N7o,o2,Gme,I7o,q7o,_G,j7o,D7o,G7o,r2,Ome,O7o,V7o,uG,X7o,z7o,Q7o,t2,Vme,W7o,H7o,bG,U7o,J7o,Y7o,a2,Xme,K7o,Z7o,vG,eLo,oLo,rLo,n2,zme,tLo,aLo,FG,nLo,sLo,lLo,s2,Qme,iLo,dLo,TG,cLo,fLo,mLo,l2,Wme,gLo,hLo,MG,pLo,_Lo,uLo,i2,Hme,bLo,vLo,EG,FLo,TLo,MLo,d2,Ume,ELo,CLo,CG,wLo,ALo,LLo,c2,Jme,yLo,xLo,wG,$Lo,kLo,SLo,f2,Yme,RLo,PLo,AG,BLo,NLo,ILo,m2,Kme,qLo,jLo,LG,DLo,GLo,OLo,g2,Zme,VLo,XLo,yG,zLo,QLo,WLo,h2,ege,HLo,ULo,xG,JLo,YLo,KLo,p2,oge,ZLo,eyo,$G,oyo,ryo,tyo,_2,rge,ayo,nyo,kG,syo,lyo,iyo,u2,tge,dyo,cyo,SG,fyo,myo,gyo,b2,age,hyo,pyo,RG,_yo,uyo,byo,v2,nge,vyo,Fyo,PG,Tyo,Myo,Eyo,F2,sge,Cyo,wyo,BG,Ayo,Lyo,yyo,T2,lge,xyo,$yo,NG,kyo,Syo,Ryo,M2,ige,Pyo,Byo,IG,Nyo,Iyo,qyo,E2,dge,jyo,Dyo,qG,Gyo,Oyo,Vyo,C2,cge,Xyo,zyo,jG,Qyo,Wyo,Hyo,w2,fge,Uyo,Jyo,DG,Yyo,Kyo,Zyo,A2,mge,e9o,o9o,GG,r9o,t9o,a9o,L2,gge,n9o,s9o,OG,l9o,i9o,d9o,y2,hge,c9o,f9o,VG,m9o,g9o,h9o,x2,pge,p9o,_9o,XG,u9o,b9o,v9o,$2,_ge,F9o,T9o,zG,M9o,E9o,C9o,k2,uge,w9o,A9o,QG,L9o,y9o,x9o,S2,bge,$9o,k9o,WG,S9o,R9o,P9o,R2,vge,B9o,N9o,HG,I9o,q9o,j9o,P2,Fge,D9o,G9o,UG,O9o,V9o,X9o,B2,Tge,z9o,Q9o,JG,W9o,H9o,U9o,N2,Mge,J9o,Y9o,YG,K9o,Z9o,exo,I2,Ege,oxo,rxo,KG,txo,axo,nxo,q2,Cge,sxo,lxo,ZG,ixo,dxo,cxo,j2,wge,fxo,mxo,eO,gxo,hxo,pxo,D2,Age,_xo,uxo,oO,bxo,vxo,Fxo,G2,Lge,Txo,Mxo,rO,Exo,Cxo,wxo,O2,Axo,yge,Lxo,yxo,xge,xxo,$xo,V2,BXe,Hi,X2,$ge,zL,kxo,kge,Sxo,NXe,So,QL,Rxo,Ui,Pxo,tO,Bxo,Nxo,aO,Ixo,qxo,jxo,WL,Dxo,Sge,Gxo,Oxo,Vxo,ct,HL,Xxo,Rge,zxo,Qxo,Ji,Wxo,Pge,Hxo,Uxo,nO,Jxo,Yxo,Kxo,z2,Zxo,Ze,UL,e$o,Bge,o$o,r$o,qa,t$o,Nge,a$o,n$o,Ige,s$o,l$o,qge,i$o,d$o,c$o,z,Q2,jge,f$o,m$o,sO,g$o,h$o,p$o,W2,Dge,_$o,u$o,lO,b$o,v$o,F$o,H2,Gge,T$o,M$o,iO,E$o,C$o,w$o,U2,Oge,A$o,L$o,dO,y$o,x$o,$$o,J2,Vge,k$o,S$o,cO,R$o,P$o,B$o,Y2,Xge,N$o,I$o,fO,q$o,j$o,D$o,K2,zge,G$o,O$o,mO,V$o,X$o,z$o,Z2,Qge,Q$o,W$o,gO,H$o,U$o,J$o,e1,Wge,Y$o,K$o,hO,Z$o,eko,oko,o1,Hge,rko,tko,pO,ako,nko,sko,r1,Uge,lko,iko,_O,dko,cko,fko,t1,Jge,mko,gko,uO,hko,pko,_ko,a1,Yge,uko,bko,bO,vko,Fko,Tko,n1,Kge,Mko,Eko,vO,Cko,wko,Ako,s1,Zge,Lko,yko,FO,xko,$ko,kko,l1,ehe,Sko,Rko,TO,Pko,Bko,Nko,i1,ohe,Iko,qko,MO,jko,Dko,Gko,d1,rhe,Oko,Vko,EO,Xko,zko,Qko,c1,the,Wko,Hko,CO,Uko,Jko,Yko,f1,ahe,Kko,Zko,wO,eSo,oSo,rSo,m1,nhe,tSo,aSo,AO,nSo,sSo,lSo,g1,she,iSo,dSo,LO,cSo,fSo,mSo,h1,lhe,gSo,hSo,yO,pSo,_So,uSo,p1,ihe,bSo,vSo,xO,FSo,TSo,MSo,_1,dhe,ESo,CSo,$O,wSo,ASo,LSo,u1,che,ySo,xSo,kO,$So,kSo,SSo,b1,fhe,RSo,PSo,SO,BSo,NSo,ISo,v1,mhe,qSo,jSo,RO,DSo,GSo,OSo,F1,ghe,VSo,XSo,PO,zSo,QSo,WSo,T1,hhe,HSo,USo,BO,JSo,YSo,KSo,M1,phe,ZSo,eRo,NO,oRo,rRo,tRo,E1,_he,aRo,nRo,IO,sRo,lRo,iRo,C1,uhe,dRo,cRo,qO,fRo,mRo,gRo,w1,bhe,hRo,pRo,jO,_Ro,uRo,bRo,A1,vhe,vRo,FRo,DO,TRo,MRo,ERo,L1,Fhe,CRo,wRo,GO,ARo,LRo,yRo,y1,The,xRo,$Ro,OO,kRo,SRo,RRo,x1,Mhe,PRo,BRo,VO,NRo,IRo,qRo,$1,Ehe,jRo,DRo,XO,GRo,ORo,VRo,k1,Che,XRo,zRo,zO,QRo,WRo,HRo,S1,URo,whe,JRo,YRo,Ahe,KRo,ZRo,R1,IXe,Yi,P1,Lhe,JL,ePo,yhe,oPo,qXe,Ro,YL,rPo,Ki,tPo,QO,aPo,nPo,WO,sPo,lPo,iPo,KL,dPo,xhe,cPo,fPo,mPo,ft,ZL,gPo,$he,hPo,pPo,Zi,_Po,khe,uPo,bPo,HO,vPo,FPo,TPo,B1,MPo,eo,ey,EPo,She,CPo,wPo,ja,APo,Rhe,LPo,yPo,Phe,xPo,$Po,Bhe,kPo,SPo,RPo,W,N1,Nhe,PPo,BPo,UO,NPo,IPo,qPo,I1,Ihe,jPo,DPo,JO,GPo,OPo,VPo,q1,qhe,XPo,zPo,YO,QPo,WPo,HPo,j1,jhe,UPo,JPo,KO,YPo,KPo,ZPo,D1,Dhe,eBo,oBo,ZO,rBo,tBo,aBo,G1,Ghe,nBo,sBo,eV,lBo,iBo,dBo,O1,Ohe,cBo,fBo,oV,mBo,gBo,hBo,V1,Vhe,pBo,_Bo,rV,uBo,bBo,vBo,X1,Xhe,FBo,TBo,tV,MBo,EBo,CBo,z1,zhe,wBo,ABo,aV,LBo,yBo,xBo,Q1,Qhe,$Bo,kBo,nV,SBo,RBo,PBo,W1,Whe,BBo,NBo,sV,IBo,qBo,jBo,H1,Hhe,DBo,GBo,lV,OBo,VBo,XBo,U1,Uhe,zBo,QBo,iV,WBo,HBo,UBo,J1,Jhe,JBo,YBo,dV,KBo,ZBo,eNo,Y1,Yhe,oNo,rNo,cV,tNo,aNo,nNo,K1,Khe,sNo,lNo,fV,iNo,dNo,cNo,Z1,Zhe,fNo,mNo,mV,gNo,hNo,pNo,eb,epe,_No,uNo,gV,bNo,vNo,FNo,ob,ope,TNo,MNo,hV,ENo,CNo,wNo,rb,rpe,ANo,LNo,pV,yNo,xNo,$No,tb,tpe,kNo,SNo,_V,RNo,PNo,BNo,ab,ape,NNo,INo,uV,qNo,jNo,DNo,nb,npe,GNo,ONo,bV,VNo,XNo,zNo,sb,spe,QNo,WNo,vV,HNo,UNo,JNo,lb,lpe,YNo,KNo,FV,ZNo,eIo,oIo,ib,ipe,rIo,tIo,TV,aIo,nIo,sIo,db,dpe,lIo,iIo,MV,dIo,cIo,fIo,cb,cpe,mIo,gIo,EV,hIo,pIo,_Io,fb,fpe,uIo,bIo,CV,vIo,FIo,TIo,mb,mpe,MIo,EIo,wV,CIo,wIo,AIo,gb,gpe,LIo,yIo,AV,xIo,$Io,kIo,hb,hpe,SIo,RIo,LV,PIo,BIo,NIo,pb,ppe,IIo,qIo,_pe,jIo,DIo,GIo,_b,upe,OIo,VIo,yV,XIo,zIo,QIo,ub,bpe,WIo,HIo,xV,UIo,JIo,YIo,bb,vpe,KIo,ZIo,$V,eqo,oqo,rqo,vb,Fpe,tqo,aqo,kV,nqo,sqo,lqo,Fb,iqo,Tpe,dqo,cqo,Mpe,fqo,mqo,Tb,jXe,ed,Mb,Epe,oy,gqo,Cpe,hqo,DXe,Po,ry,pqo,od,_qo,SV,uqo,bqo,RV,vqo,Fqo,Tqo,ty,Mqo,wpe,Eqo,Cqo,wqo,mt,ay,Aqo,Ape,Lqo,yqo,rd,xqo,Lpe,$qo,kqo,PV,Sqo,Rqo,Pqo,Eb,Bqo,oo,ny,Nqo,ype,Iqo,qqo,Da,jqo,xpe,Dqo,Gqo,$pe,Oqo,Vqo,kpe,Xqo,zqo,Qqo,fe,Cb,Spe,Wqo,Hqo,BV,Uqo,Jqo,Yqo,wb,Rpe,Kqo,Zqo,NV,ejo,ojo,rjo,Ab,Ppe,tjo,ajo,IV,njo,sjo,ljo,Lb,Bpe,ijo,djo,qV,cjo,fjo,mjo,yb,Npe,gjo,hjo,jV,pjo,_jo,ujo,xb,Ipe,bjo,vjo,DV,Fjo,Tjo,Mjo,$b,qpe,Ejo,Cjo,GV,wjo,Ajo,Ljo,kb,jpe,yjo,xjo,OV,$jo,kjo,Sjo,Sb,Dpe,Rjo,Pjo,VV,Bjo,Njo,Ijo,Rb,Gpe,qjo,jjo,XV,Djo,Gjo,Ojo,Pb,Ope,Vjo,Xjo,zV,zjo,Qjo,Wjo,Bb,Vpe,Hjo,Ujo,QV,Jjo,Yjo,Kjo,Nb,Xpe,Zjo,eDo,WV,oDo,rDo,tDo,Ib,zpe,aDo,nDo,HV,sDo,lDo,iDo,qb,Qpe,dDo,cDo,UV,fDo,mDo,gDo,jb,Wpe,hDo,pDo,JV,_Do,uDo,bDo,Db,Hpe,vDo,FDo,YV,TDo,MDo,EDo,Gb,Upe,CDo,wDo,KV,ADo,LDo,yDo,Ob,Jpe,xDo,$Do,ZV,kDo,SDo,RDo,Vb,PDo,Ype,BDo,NDo,Kpe,IDo,qDo,Xb,GXe,td,zb,Zpe,sy,jDo,e_e,DDo,OXe,Bo,ly,GDo,ad,ODo,eX,VDo,XDo,oX,zDo,QDo,WDo,iy,HDo,o_e,UDo,JDo,YDo,gt,dy,KDo,r_e,ZDo,eGo,nd,oGo,t_e,rGo,tGo,rX,aGo,nGo,sGo,Qb,lGo,ro,cy,iGo,a_e,dGo,cGo,Ga,fGo,n_e,mGo,gGo,s_e,hGo,pGo,l_e,_Go,uGo,bGo,I,Wb,i_e,vGo,FGo,tX,TGo,MGo,EGo,Hb,d_e,CGo,wGo,aX,AGo,LGo,yGo,Ub,c_e,xGo,$Go,nX,kGo,SGo,RGo,Jb,f_e,PGo,BGo,sX,NGo,IGo,qGo,Yb,m_e,jGo,DGo,lX,GGo,OGo,VGo,Kb,g_e,XGo,zGo,iX,QGo,WGo,HGo,Zb,h_e,UGo,JGo,dX,YGo,KGo,ZGo,ev,p_e,eOo,oOo,cX,rOo,tOo,aOo,ov,__e,nOo,sOo,fX,lOo,iOo,dOo,rv,u_e,cOo,fOo,mX,mOo,gOo,hOo,tv,b_e,pOo,_Oo,gX,uOo,bOo,vOo,av,v_e,FOo,TOo,hX,MOo,EOo,COo,nv,F_e,wOo,AOo,pX,LOo,yOo,xOo,sv,T_e,$Oo,kOo,_X,SOo,ROo,POo,lv,M_e,BOo,NOo,uX,IOo,qOo,jOo,iv,E_e,DOo,GOo,bX,OOo,VOo,XOo,dv,C_e,zOo,QOo,vX,WOo,HOo,UOo,cv,w_e,JOo,YOo,FX,KOo,ZOo,eVo,fv,A_e,oVo,rVo,TX,tVo,aVo,nVo,mv,L_e,sVo,lVo,MX,iVo,dVo,cVo,gv,y_e,fVo,mVo,EX,gVo,hVo,pVo,hv,x_e,_Vo,uVo,CX,bVo,vVo,FVo,pv,$_e,TVo,MVo,wX,EVo,CVo,wVo,_v,k_e,AVo,LVo,AX,yVo,xVo,$Vo,uv,S_e,kVo,SVo,LX,RVo,PVo,BVo,bv,R_e,NVo,IVo,yX,qVo,jVo,DVo,vv,P_e,GVo,OVo,xX,VVo,XVo,zVo,Fv,B_e,QVo,WVo,$X,HVo,UVo,JVo,Tv,N_e,YVo,KVo,kX,ZVo,eXo,oXo,Mv,I_e,rXo,tXo,SX,aXo,nXo,sXo,Ev,q_e,lXo,iXo,RX,dXo,cXo,fXo,Cv,j_e,mXo,gXo,PX,hXo,pXo,_Xo,wv,D_e,uXo,bXo,BX,vXo,FXo,TXo,Av,G_e,MXo,EXo,NX,CXo,wXo,AXo,Lv,O_e,LXo,yXo,IX,xXo,$Xo,kXo,yv,V_e,SXo,RXo,qX,PXo,BXo,NXo,xv,X_e,IXo,qXo,jX,jXo,DXo,GXo,$v,z_e,OXo,VXo,DX,XXo,zXo,QXo,kv,Q_e,WXo,HXo,GX,UXo,JXo,YXo,Sv,W_e,KXo,ZXo,OX,ezo,ozo,rzo,Rv,H_e,tzo,azo,VX,nzo,szo,lzo,Pv,U_e,izo,dzo,XX,czo,fzo,mzo,Bv,J_e,gzo,hzo,zX,pzo,_zo,uzo,Nv,Y_e,bzo,vzo,QX,Fzo,Tzo,Mzo,Iv,K_e,Ezo,Czo,WX,wzo,Azo,Lzo,qv,Z_e,yzo,xzo,HX,$zo,kzo,Szo,jv,eue,Rzo,Pzo,UX,Bzo,Nzo,Izo,Dv,oue,qzo,jzo,JX,Dzo,Gzo,Ozo,Gv,rue,Vzo,Xzo,YX,zzo,Qzo,Wzo,Ov,tue,Hzo,Uzo,KX,Jzo,Yzo,Kzo,Vv,Zzo,aue,eQo,oQo,nue,rQo,tQo,Xv,VXe,sd,zv,sue,fy,aQo,lue,nQo,XXe,No,my,sQo,ld,lQo,ZX,iQo,dQo,ez,cQo,fQo,mQo,gy,gQo,iue,hQo,pQo,_Qo,ht,hy,uQo,due,bQo,vQo,id,FQo,cue,TQo,MQo,oz,EQo,CQo,wQo,Qv,AQo,to,py,LQo,fue,yQo,xQo,Oa,$Qo,mue,kQo,SQo,gue,RQo,PQo,hue,BQo,NQo,IQo,Z,Wv,pue,qQo,jQo,rz,DQo,GQo,OQo,Hv,_ue,VQo,XQo,tz,zQo,QQo,WQo,Uv,uue,HQo,UQo,az,JQo,YQo,KQo,Jv,bue,ZQo,eWo,nz,oWo,rWo,tWo,Yv,vue,aWo,nWo,sz,sWo,lWo,iWo,Kv,Fue,dWo,cWo,lz,fWo,mWo,gWo,Zv,Tue,hWo,pWo,iz,_Wo,uWo,bWo,e0,Mue,vWo,FWo,dz,TWo,MWo,EWo,o0,Eue,CWo,wWo,cz,AWo,LWo,yWo,r0,Cue,xWo,$Wo,fz,kWo,SWo,RWo,t0,wue,PWo,BWo,mz,NWo,IWo,qWo,a0,Aue,jWo,DWo,gz,GWo,OWo,VWo,n0,Lue,XWo,zWo,hz,QWo,WWo,HWo,s0,yue,UWo,JWo,pz,YWo,KWo,ZWo,l0,xue,eHo,oHo,_z,rHo,tHo,aHo,i0,$ue,nHo,sHo,uz,lHo,iHo,dHo,d0,kue,cHo,fHo,bz,mHo,gHo,hHo,c0,Sue,pHo,_Ho,vz,uHo,bHo,vHo,f0,Rue,FHo,THo,Fz,MHo,EHo,CHo,m0,Pue,wHo,AHo,Tz,LHo,yHo,xHo,g0,Bue,$Ho,kHo,Mz,SHo,RHo,PHo,h0,Nue,BHo,NHo,Ez,IHo,qHo,jHo,p0,Iue,DHo,GHo,Cz,OHo,VHo,XHo,_0,que,zHo,QHo,wz,WHo,HHo,UHo,u0,jue,JHo,YHo,Az,KHo,ZHo,eUo,b0,Due,oUo,rUo,Lz,tUo,aUo,nUo,v0,Gue,sUo,lUo,yz,iUo,dUo,cUo,F0,Oue,fUo,mUo,xz,gUo,hUo,pUo,T0,Vue,_Uo,uUo,$z,bUo,vUo,FUo,M0,Xue,TUo,MUo,kz,EUo,CUo,wUo,E0,AUo,zue,LUo,yUo,Que,xUo,$Uo,C0,zXe,dd,w0,Wue,_y,kUo,Hue,SUo,QXe,Io,uy,RUo,cd,PUo,Sz,BUo,NUo,Rz,IUo,qUo,jUo,by,DUo,Uue,GUo,OUo,VUo,pt,vy,XUo,Jue,zUo,QUo,fd,WUo,Yue,HUo,UUo,Pz,JUo,YUo,KUo,A0,ZUo,ao,Fy,eJo,Kue,oJo,rJo,Va,tJo,Zue,aJo,nJo,e2e,sJo,lJo,o2e,iJo,dJo,cJo,qo,L0,r2e,fJo,mJo,Bz,gJo,hJo,pJo,y0,t2e,_Jo,uJo,Nz,bJo,vJo,FJo,x0,a2e,TJo,MJo,Iz,EJo,CJo,wJo,$0,n2e,AJo,LJo,qz,yJo,xJo,$Jo,k0,s2e,kJo,SJo,jz,RJo,PJo,BJo,S0,l2e,NJo,IJo,Dz,qJo,jJo,DJo,R0,GJo,i2e,OJo,VJo,d2e,XJo,zJo,P0,WXe,md,B0,c2e,Ty,QJo,f2e,WJo,HXe,jo,My,HJo,gd,UJo,Gz,JJo,YJo,Oz,KJo,ZJo,eYo,Ey,oYo,m2e,rYo,tYo,aYo,_t,Cy,nYo,g2e,sYo,lYo,hd,iYo,h2e,dYo,cYo,Vz,fYo,mYo,gYo,N0,hYo,no,wy,pYo,p2e,_Yo,uYo,Xa,bYo,_2e,vYo,FYo,u2e,TYo,MYo,b2e,EYo,CYo,wYo,U,I0,v2e,AYo,LYo,Xz,yYo,xYo,$Yo,q0,F2e,kYo,SYo,zz,RYo,PYo,BYo,j0,T2e,NYo,IYo,Qz,qYo,jYo,DYo,D0,M2e,GYo,OYo,Wz,VYo,XYo,zYo,G0,E2e,QYo,WYo,Hz,HYo,UYo,JYo,O0,C2e,YYo,KYo,Uz,ZYo,eKo,oKo,V0,w2e,rKo,tKo,Jz,aKo,nKo,sKo,X0,A2e,lKo,iKo,Yz,dKo,cKo,fKo,z0,L2e,mKo,gKo,Kz,hKo,pKo,_Ko,Q0,y2e,uKo,bKo,Zz,vKo,FKo,TKo,W0,x2e,MKo,EKo,eQ,CKo,wKo,AKo,H0,$2e,LKo,yKo,oQ,xKo,$Ko,kKo,U0,k2e,SKo,RKo,rQ,PKo,BKo,NKo,J0,S2e,IKo,qKo,tQ,jKo,DKo,GKo,Y0,R2e,OKo,VKo,aQ,XKo,zKo,QKo,K0,P2e,WKo,HKo,nQ,UKo,JKo,YKo,Z0,B2e,KKo,ZKo,sQ,eZo,oZo,rZo,eF,N2e,tZo,aZo,lQ,nZo,sZo,lZo,oF,I2e,iZo,dZo,iQ,cZo,fZo,mZo,rF,q2e,gZo,hZo,dQ,pZo,_Zo,uZo,tF,j2e,bZo,vZo,cQ,FZo,TZo,MZo,aF,D2e,EZo,CZo,fQ,wZo,AZo,LZo,nF,G2e,yZo,xZo,mQ,$Zo,kZo,SZo,sF,O2e,RZo,PZo,gQ,BZo,NZo,IZo,lF,V2e,qZo,jZo,hQ,DZo,GZo,OZo,iF,X2e,VZo,XZo,pQ,zZo,QZo,WZo,dF,z2e,HZo,UZo,_Q,JZo,YZo,KZo,cF,Q2e,ZZo,eer,uQ,oer,rer,ter,fF,W2e,aer,ner,bQ,ser,ler,ier,mF,H2e,der,cer,vQ,fer,mer,ger,gF,U2e,her,per,FQ,_er,uer,ber,hF,J2e,ver,Fer,TQ,Ter,Mer,Eer,pF,Y2e,Cer,wer,MQ,Aer,Ler,yer,_F,K2e,xer,$er,EQ,ker,Ser,Rer,uF,Z2e,Per,Ber,CQ,Ner,Ier,qer,bF,e1e,jer,Der,wQ,Ger,Oer,Ver,vF,Xer,o1e,zer,Qer,r1e,Wer,Her,FF,UXe,pd,TF,t1e,Ay,Uer,a1e,Jer,JXe,Do,Ly,Yer,_d,Ker,AQ,Zer,eor,LQ,oor,ror,tor,yy,aor,n1e,nor,sor,lor,ut,xy,ior,s1e,dor,cor,ud,mor,l1e,gor,hor,yQ,por,_or,uor,MF,bor,so,$y,vor,i1e,For,Tor,za,Mor,d1e,Eor,Cor,c1e,wor,Aor,f1e,Lor,yor,xor,V,EF,m1e,$or,kor,xQ,Sor,Ror,Por,CF,g1e,Bor,Nor,$Q,Ior,qor,jor,wF,h1e,Dor,Gor,kQ,Oor,Vor,Xor,AF,p1e,zor,Qor,SQ,Wor,Hor,Uor,LF,_1e,Jor,Yor,RQ,Kor,Zor,err,yF,u1e,orr,rrr,PQ,trr,arr,nrr,xF,b1e,srr,lrr,BQ,irr,drr,crr,$F,v1e,frr,mrr,NQ,grr,hrr,prr,kF,F1e,_rr,urr,IQ,brr,vrr,Frr,SF,T1e,Trr,Mrr,qQ,Err,Crr,wrr,RF,M1e,Arr,Lrr,jQ,yrr,xrr,$rr,PF,E1e,krr,Srr,DQ,Rrr,Prr,Brr,BF,C1e,Nrr,Irr,GQ,qrr,jrr,Drr,NF,w1e,Grr,Orr,OQ,Vrr,Xrr,zrr,IF,A1e,Qrr,Wrr,VQ,Hrr,Urr,Jrr,qF,L1e,Yrr,Krr,XQ,Zrr,etr,otr,jF,y1e,rtr,ttr,zQ,atr,ntr,str,DF,x1e,ltr,itr,QQ,dtr,ctr,ftr,GF,$1e,mtr,gtr,WQ,htr,ptr,_tr,OF,k1e,utr,btr,HQ,vtr,Ftr,Ttr,VF,S1e,Mtr,Etr,UQ,Ctr,wtr,Atr,XF,R1e,Ltr,ytr,JQ,xtr,$tr,ktr,zF,P1e,Str,Rtr,YQ,Ptr,Btr,Ntr,QF,B1e,Itr,qtr,KQ,jtr,Dtr,Gtr,WF,N1e,Otr,Vtr,ZQ,Xtr,ztr,Qtr,HF,I1e,Wtr,Htr,eW,Utr,Jtr,Ytr,UF,q1e,Ktr,Ztr,oW,ear,oar,rar,JF,j1e,tar,aar,rW,nar,sar,lar,YF,D1e,iar,dar,tW,car,far,mar,KF,G1e,gar,har,aW,par,_ar,uar,ZF,O1e,bar,Far,nW,Tar,Mar,Ear,eT,V1e,Car,war,sW,Aar,Lar,yar,oT,X1e,xar,$ar,lW,kar,Sar,Rar,rT,z1e,Par,Bar,iW,Nar,Iar,qar,tT,Q1e,jar,Dar,dW,Gar,Oar,Var,aT,W1e,Xar,zar,cW,Qar,War,Har,nT,H1e,Uar,Jar,fW,Yar,Kar,Zar,sT,U1e,enr,onr,mW,rnr,tnr,anr,lT,J1e,nnr,snr,gW,lnr,inr,dnr,iT,Y1e,cnr,fnr,hW,mnr,gnr,hnr,dT,K1e,pnr,_nr,pW,unr,bnr,vnr,cT,Z1e,Fnr,Tnr,_W,Mnr,Enr,Cnr,fT,wnr,ebe,Anr,Lnr,obe,ynr,xnr,mT,YXe,bd,gT,rbe,ky,$nr,tbe,knr,KXe,Go,Sy,Snr,vd,Rnr,uW,Pnr,Bnr,bW,Nnr,Inr,qnr,Ry,jnr,abe,Dnr,Gnr,Onr,bt,Py,Vnr,nbe,Xnr,znr,Fd,Qnr,sbe,Wnr,Hnr,vW,Unr,Jnr,Ynr,hT,Knr,lo,By,Znr,lbe,esr,osr,Qa,rsr,ibe,tsr,asr,dbe,nsr,ssr,cbe,lsr,isr,dsr,fbe,pT,mbe,csr,fsr,FW,msr,gsr,hsr,_T,psr,gbe,_sr,usr,hbe,bsr,vsr,uT,ZXe,Td,bT,pbe,Ny,Fsr,_be,Tsr,eze,Oo,Iy,Msr,Md,Esr,TW,Csr,wsr,MW,Asr,Lsr,ysr,qy,xsr,ube,$sr,ksr,Ssr,vt,jy,Rsr,bbe,Psr,Bsr,Ed,Nsr,vbe,Isr,qsr,EW,jsr,Dsr,Gsr,vT,Osr,io,Dy,Vsr,Fbe,Xsr,zsr,Wa,Qsr,Tbe,Wsr,Hsr,Mbe,Usr,Jsr,Ebe,Ysr,Ksr,Zsr,ve,FT,Cbe,elr,olr,CW,rlr,tlr,alr,TT,wbe,nlr,slr,wW,llr,ilr,dlr,MT,Abe,clr,flr,AW,mlr,glr,hlr,ET,Lbe,plr,_lr,LW,ulr,blr,vlr,Us,ybe,Flr,Tlr,yW,Mlr,Elr,xW,Clr,wlr,Alr,CT,xbe,Llr,ylr,$W,xlr,$lr,klr,Js,$be,Slr,Rlr,kW,Plr,Blr,SW,Nlr,Ilr,qlr,wT,kbe,jlr,Dlr,RW,Glr,Olr,Vlr,Ft,Sbe,Xlr,zlr,PW,Qlr,Wlr,BW,Hlr,Ulr,NW,Jlr,Ylr,Klr,AT,Rbe,Zlr,eir,IW,oir,rir,tir,LT,Pbe,air,nir,qW,sir,lir,iir,yT,Bbe,dir,cir,jW,fir,mir,gir,xT,Nbe,hir,pir,DW,_ir,uir,bir,$T,Ibe,vir,Fir,GW,Tir,Mir,Eir,kT,qbe,Cir,wir,OW,Air,Lir,yir,ST,jbe,xir,$ir,VW,kir,Sir,Rir,RT,Pir,Dbe,Bir,Nir,Gbe,Iir,qir,PT,oze,Cd,BT,Obe,Gy,jir,Vbe,Dir,rze,Vo,Oy,Gir,wd,Oir,XW,Vir,Xir,zW,zir,Qir,Wir,Vy,Hir,Xbe,Uir,Jir,Yir,Tt,Xy,Kir,zbe,Zir,edr,Ad,odr,Qbe,rdr,tdr,QW,adr,ndr,sdr,NT,ldr,co,zy,idr,Wbe,ddr,cdr,Ha,fdr,Hbe,mdr,gdr,Ube,hdr,pdr,Jbe,_dr,udr,bdr,Ybe,IT,Kbe,vdr,Fdr,WW,Tdr,Mdr,Edr,qT,Cdr,Zbe,wdr,Adr,eve,Ldr,ydr,jT,tze,Ld,DT,ove,Qy,xdr,rve,$dr,aze,Xo,Wy,kdr,yd,Sdr,HW,Rdr,Pdr,UW,Bdr,Ndr,Idr,Hy,qdr,tve,jdr,Ddr,Gdr,Mt,Uy,Odr,ave,Vdr,Xdr,xd,zdr,nve,Qdr,Wdr,JW,Hdr,Udr,Jdr,GT,Ydr,fo,Jy,Kdr,sve,Zdr,ecr,Ua,ocr,lve,rcr,tcr,ive,acr,ncr,dve,scr,lcr,icr,cve,OT,fve,dcr,ccr,YW,fcr,mcr,gcr,VT,hcr,mve,pcr,_cr,gve,ucr,bcr,XT,nze,$d,zT,hve,Yy,vcr,pve,Fcr,sze,zo,Ky,Tcr,kd,Mcr,KW,Ecr,Ccr,ZW,wcr,Acr,Lcr,Zy,ycr,_ve,xcr,$cr,kcr,Et,e9,Scr,uve,Rcr,Pcr,Sd,Bcr,bve,Ncr,Icr,eH,qcr,jcr,Dcr,QT,Gcr,mo,o9,Ocr,vve,Vcr,Xcr,Ja,zcr,Fve,Qcr,Wcr,Tve,Hcr,Ucr,Mve,Jcr,Ycr,Kcr,Be,WT,Eve,Zcr,efr,oH,ofr,rfr,tfr,HT,Cve,afr,nfr,rH,sfr,lfr,ifr,UT,wve,dfr,cfr,tH,ffr,mfr,gfr,JT,Ave,hfr,pfr,aH,_fr,ufr,bfr,YT,Lve,vfr,Ffr,nH,Tfr,Mfr,Efr,KT,yve,Cfr,wfr,sH,Afr,Lfr,yfr,ZT,xve,xfr,$fr,lH,kfr,Sfr,Rfr,e8,$ve,Pfr,Bfr,iH,Nfr,Ifr,qfr,o8,kve,jfr,Dfr,dH,Gfr,Ofr,Vfr,r8,Xfr,Sve,zfr,Qfr,Rve,Wfr,Hfr,t8,lze,Rd,a8,Pve,r9,Ufr,Bve,Jfr,ize,Qo,t9,Yfr,Pd,Kfr,cH,Zfr,emr,fH,omr,rmr,tmr,a9,amr,Nve,nmr,smr,lmr,Ct,n9,imr,Ive,dmr,cmr,Bd,fmr,qve,mmr,gmr,mH,hmr,pmr,_mr,n8,umr,go,s9,bmr,jve,vmr,Fmr,Ya,Tmr,Dve,Mmr,Emr,Gve,Cmr,wmr,Ove,Amr,Lmr,ymr,rt,s8,Vve,xmr,$mr,gH,kmr,Smr,Rmr,l8,Xve,Pmr,Bmr,hH,Nmr,Imr,qmr,i8,zve,jmr,Dmr,pH,Gmr,Omr,Vmr,d8,Qve,Xmr,zmr,_H,Qmr,Wmr,Hmr,c8,Wve,Umr,Jmr,uH,Ymr,Kmr,Zmr,f8,egr,Hve,ogr,rgr,Uve,tgr,agr,m8,dze,Nd,g8,Jve,l9,ngr,Yve,sgr,cze,Wo,i9,lgr,Id,igr,bH,dgr,cgr,vH,fgr,mgr,ggr,d9,hgr,Kve,pgr,_gr,ugr,wt,c9,bgr,Zve,vgr,Fgr,qd,Tgr,e0e,Mgr,Egr,FH,Cgr,wgr,Agr,h8,Lgr,ho,f9,ygr,o0e,xgr,$gr,Ka,kgr,r0e,Sgr,Rgr,t0e,Pgr,Bgr,a0e,Ngr,Igr,qgr,ye,p8,n0e,jgr,Dgr,TH,Ggr,Ogr,Vgr,_8,s0e,Xgr,zgr,MH,Qgr,Wgr,Hgr,u8,l0e,Ugr,Jgr,EH,Ygr,Kgr,Zgr,b8,i0e,ehr,ohr,CH,rhr,thr,ahr,v8,d0e,nhr,shr,wH,lhr,ihr,dhr,F8,c0e,chr,fhr,AH,mhr,ghr,hhr,T8,f0e,phr,_hr,LH,uhr,bhr,vhr,M8,m0e,Fhr,Thr,yH,Mhr,Ehr,Chr,E8,g0e,whr,Ahr,xH,Lhr,yhr,xhr,C8,h0e,$hr,khr,$H,Shr,Rhr,Phr,w8,Bhr,p0e,Nhr,Ihr,_0e,qhr,jhr,A8,fze,jd,L8,u0e,m9,Dhr,b0e,Ghr,mze,Ho,g9,Ohr,Dd,Vhr,kH,Xhr,zhr,SH,Qhr,Whr,Hhr,h9,Uhr,v0e,Jhr,Yhr,Khr,At,p9,Zhr,F0e,epr,opr,Gd,rpr,T0e,tpr,apr,RH,npr,spr,lpr,y8,ipr,po,_9,dpr,M0e,cpr,fpr,Za,mpr,E0e,gpr,hpr,C0e,ppr,_pr,w0e,upr,bpr,vpr,u9,x8,A0e,Fpr,Tpr,PH,Mpr,Epr,Cpr,$8,L0e,wpr,Apr,BH,Lpr,ypr,xpr,k8,$pr,y0e,kpr,Spr,x0e,Rpr,Ppr,S8,gze,Od,R8,$0e,b9,Bpr,k0e,Npr,hze,Uo,v9,Ipr,Vd,qpr,NH,jpr,Dpr,IH,Gpr,Opr,Vpr,F9,Xpr,S0e,zpr,Qpr,Wpr,Lt,T9,Hpr,R0e,Upr,Jpr,Xd,Ypr,P0e,Kpr,Zpr,qH,e_r,o_r,r_r,P8,t_r,_o,M9,a_r,B0e,n_r,s_r,en,l_r,N0e,i_r,d_r,I0e,c_r,f_r,q0e,m_r,g_r,h_r,tt,B8,j0e,p_r,__r,jH,u_r,b_r,v_r,N8,D0e,F_r,T_r,DH,M_r,E_r,C_r,I8,G0e,w_r,A_r,GH,L_r,y_r,x_r,q8,O0e,$_r,k_r,OH,S_r,R_r,P_r,j8,V0e,B_r,N_r,VH,I_r,q_r,j_r,D8,D_r,X0e,G_r,O_r,z0e,V_r,X_r,G8,pze,zd,O8,Q0e,E9,z_r,W0e,Q_r,_ze,Jo,C9,W_r,Qd,H_r,XH,U_r,J_r,zH,Y_r,K_r,Z_r,w9,eur,H0e,our,rur,tur,yt,A9,aur,U0e,nur,sur,Wd,lur,J0e,iur,dur,QH,cur,fur,mur,V8,gur,uo,L9,hur,Y0e,pur,_ur,on,uur,K0e,bur,vur,Z0e,Fur,Tur,eFe,Mur,Eur,Cur,Hd,X8,oFe,wur,Aur,WH,Lur,yur,xur,z8,rFe,$ur,kur,HH,Sur,Rur,Pur,Q8,tFe,Bur,Nur,UH,Iur,qur,jur,W8,Dur,aFe,Gur,Our,nFe,Vur,Xur,H8,uze,Ud,U8,sFe,y9,zur,lFe,Qur,bze,Yo,x9,Wur,Jd,Hur,JH,Uur,Jur,YH,Yur,Kur,Zur,$9,e2r,iFe,o2r,r2r,t2r,xt,k9,a2r,dFe,n2r,s2r,Yd,l2r,cFe,i2r,d2r,KH,c2r,f2r,m2r,J8,g2r,bo,S9,h2r,fFe,p2r,_2r,rn,u2r,mFe,b2r,v2r,gFe,F2r,T2r,hFe,M2r,E2r,C2r,R9,Y8,pFe,w2r,A2r,ZH,L2r,y2r,x2r,K8,_Fe,$2r,k2r,eU,S2r,R2r,P2r,Z8,B2r,uFe,N2r,I2r,bFe,q2r,j2r,eM,vze,Kd,oM,vFe,P9,D2r,FFe,G2r,Fze,Ko,B9,O2r,Zd,V2r,oU,X2r,z2r,rU,Q2r,W2r,H2r,N9,U2r,TFe,J2r,Y2r,K2r,$t,I9,Z2r,MFe,e1r,o1r,ec,r1r,EFe,t1r,a1r,tU,n1r,s1r,l1r,rM,i1r,vo,q9,d1r,CFe,c1r,f1r,tn,m1r,wFe,g1r,h1r,AFe,p1r,_1r,LFe,u1r,b1r,v1r,yFe,tM,xFe,F1r,T1r,aU,M1r,E1r,C1r,aM,w1r,$Fe,A1r,L1r,kFe,y1r,x1r,nM,Tze,oc,sM,SFe,j9,$1r,RFe,k1r,Mze,Zo,D9,S1r,rc,R1r,nU,P1r,B1r,sU,N1r,I1r,q1r,G9,j1r,PFe,D1r,G1r,O1r,kt,O9,V1r,BFe,X1r,z1r,tc,Q1r,NFe,W1r,H1r,lU,U1r,J1r,Y1r,lM,K1r,Fo,V9,Z1r,IFe,ebr,obr,an,rbr,qFe,tbr,abr,jFe,nbr,sbr,DFe,lbr,ibr,dbr,at,iM,GFe,cbr,fbr,iU,mbr,gbr,hbr,dM,OFe,pbr,_br,dU,ubr,bbr,vbr,cM,VFe,Fbr,Tbr,cU,Mbr,Ebr,Cbr,fM,XFe,wbr,Abr,fU,Lbr,ybr,xbr,mM,zFe,$br,kbr,mU,Sbr,Rbr,Pbr,gM,Bbr,QFe,Nbr,Ibr,WFe,qbr,jbr,hM,Eze,ac,pM,HFe,X9,Dbr,UFe,Gbr,Cze,er,z9,Obr,nc,Vbr,gU,Xbr,zbr,hU,Qbr,Wbr,Hbr,Q9,Ubr,JFe,Jbr,Ybr,Kbr,St,W9,Zbr,YFe,evr,ovr,sc,rvr,KFe,tvr,avr,pU,nvr,svr,lvr,_M,ivr,To,H9,dvr,ZFe,cvr,fvr,nn,mvr,eTe,gvr,hvr,oTe,pvr,_vr,rTe,uvr,bvr,vvr,tTe,uM,aTe,Fvr,Tvr,_U,Mvr,Evr,Cvr,bM,wvr,nTe,Avr,Lvr,sTe,yvr,xvr,vM,wze,lc,FM,lTe,U9,$vr,iTe,kvr,Aze,or,J9,Svr,ic,Rvr,uU,Pvr,Bvr,bU,Nvr,Ivr,qvr,Y9,jvr,dTe,Dvr,Gvr,Ovr,Rt,K9,Vvr,cTe,Xvr,zvr,dc,Qvr,fTe,Wvr,Hvr,vU,Uvr,Jvr,Yvr,TM,Kvr,xr,Z9,Zvr,mTe,e0r,o0r,sn,r0r,gTe,t0r,a0r,hTe,n0r,s0r,pTe,l0r,i0r,d0r,q,MM,_Te,c0r,f0r,FU,m0r,g0r,h0r,EM,uTe,p0r,_0r,TU,u0r,b0r,v0r,CM,bTe,F0r,T0r,MU,M0r,E0r,C0r,wM,vTe,w0r,A0r,EU,L0r,y0r,x0r,AM,FTe,$0r,k0r,CU,S0r,R0r,P0r,LM,TTe,B0r,N0r,wU,I0r,q0r,j0r,yM,MTe,D0r,G0r,AU,O0r,V0r,X0r,xM,ETe,z0r,Q0r,LU,W0r,H0r,U0r,$M,CTe,J0r,Y0r,yU,K0r,Z0r,eFr,kM,wTe,oFr,rFr,xU,tFr,aFr,nFr,SM,ATe,sFr,lFr,$U,iFr,dFr,cFr,RM,LTe,fFr,mFr,kU,gFr,hFr,pFr,PM,yTe,_Fr,uFr,SU,bFr,vFr,FFr,BM,xTe,TFr,MFr,RU,EFr,CFr,wFr,NM,$Te,AFr,LFr,PU,yFr,xFr,$Fr,IM,kTe,kFr,SFr,BU,RFr,PFr,BFr,qM,STe,NFr,IFr,NU,qFr,jFr,DFr,jM,RTe,GFr,OFr,IU,VFr,XFr,zFr,Ys,PTe,QFr,WFr,qU,HFr,UFr,jU,JFr,YFr,KFr,DM,BTe,ZFr,eTr,DU,oTr,rTr,tTr,GM,NTe,aTr,nTr,GU,sTr,lTr,iTr,OM,ITe,dTr,cTr,OU,fTr,mTr,gTr,VM,qTe,hTr,pTr,VU,_Tr,uTr,bTr,XM,jTe,vTr,FTr,XU,TTr,MTr,ETr,zM,DTe,CTr,wTr,zU,ATr,LTr,yTr,QM,GTe,xTr,$Tr,QU,kTr,STr,RTr,WM,OTe,PTr,BTr,WU,NTr,ITr,qTr,HM,VTe,jTr,DTr,HU,GTr,OTr,VTr,UM,XTe,XTr,zTr,UU,QTr,WTr,HTr,JM,zTe,UTr,JTr,JU,YTr,KTr,ZTr,YM,QTe,e8r,o8r,YU,r8r,t8r,a8r,KM,WTe,n8r,s8r,KU,l8r,i8r,d8r,ZM,HTe,c8r,f8r,ZU,m8r,g8r,h8r,e4,UTe,p8r,_8r,eJ,u8r,b8r,v8r,o4,JTe,F8r,T8r,oJ,M8r,E8r,C8r,r4,YTe,w8r,A8r,rJ,L8r,y8r,x8r,t4,KTe,$8r,k8r,tJ,S8r,R8r,P8r,a4,ZTe,B8r,N8r,aJ,I8r,q8r,j8r,n4,e8e,D8r,G8r,nJ,O8r,V8r,X8r,s4,o8e,z8r,Q8r,sJ,W8r,H8r,U8r,l4,r8e,J8r,Y8r,lJ,K8r,Z8r,eMr,i4,t8e,oMr,rMr,iJ,tMr,aMr,nMr,d4,a8e,sMr,lMr,dJ,iMr,dMr,cMr,c4,n8e,fMr,mMr,cJ,gMr,hMr,pMr,f4,s8e,_Mr,uMr,fJ,bMr,vMr,FMr,m4,l8e,TMr,MMr,mJ,EMr,CMr,wMr,g4,i8e,AMr,LMr,gJ,yMr,xMr,$Mr,h4,d8e,kMr,SMr,hJ,RMr,PMr,BMr,p4,c8e,NMr,IMr,pJ,qMr,jMr,DMr,_4,f8e,GMr,OMr,_J,VMr,XMr,zMr,u4,Lze,cc,b4,m8e,ex,QMr,g8e,WMr,yze,rr,ox,HMr,fc,UMr,uJ,JMr,YMr,bJ,KMr,ZMr,e4r,rx,o4r,h8e,r4r,t4r,a4r,Pt,tx,n4r,p8e,s4r,l4r,mc,i4r,_8e,d4r,c4r,vJ,f4r,m4r,g4r,v4,h4r,$r,ax,p4r,u8e,_4r,u4r,ln,b4r,b8e,v4r,F4r,v8e,T4r,M4r,F8e,E4r,C4r,w4r,se,F4,T8e,A4r,L4r,FJ,y4r,x4r,$4r,T4,M8e,k4r,S4r,TJ,R4r,P4r,B4r,M4,E8e,N4r,I4r,MJ,q4r,j4r,D4r,E4,C8e,G4r,O4r,EJ,V4r,X4r,z4r,C4,w8e,Q4r,W4r,CJ,H4r,U4r,J4r,w4,A8e,Y4r,K4r,wJ,Z4r,eEr,oEr,A4,L8e,rEr,tEr,AJ,aEr,nEr,sEr,L4,y8e,lEr,iEr,LJ,dEr,cEr,fEr,y4,x8e,mEr,gEr,yJ,hEr,pEr,_Er,x4,$8e,uEr,bEr,xJ,vEr,FEr,TEr,$4,k8e,MEr,EEr,$J,CEr,wEr,AEr,k4,S8e,LEr,yEr,kJ,xEr,$Er,kEr,S4,R8e,SEr,REr,SJ,PEr,BEr,NEr,R4,P8e,IEr,qEr,RJ,jEr,DEr,GEr,P4,B8e,OEr,VEr,PJ,XEr,zEr,QEr,B4,N8e,WEr,HEr,BJ,UEr,JEr,YEr,N4,I8e,KEr,ZEr,NJ,eCr,oCr,rCr,I4,q8e,tCr,aCr,IJ,nCr,sCr,lCr,q4,j8e,iCr,dCr,qJ,cCr,fCr,mCr,j4,D8e,gCr,hCr,jJ,pCr,_Cr,uCr,D4,G8e,bCr,vCr,DJ,FCr,TCr,MCr,G4,O8e,ECr,CCr,GJ,wCr,ACr,LCr,O4,V8e,yCr,xCr,OJ,$Cr,kCr,SCr,V4,xze,gc,X4,X8e,nx,RCr,z8e,PCr,$ze,tr,sx,BCr,hc,NCr,VJ,ICr,qCr,XJ,jCr,DCr,GCr,lx,OCr,Q8e,VCr,XCr,zCr,Bt,ix,QCr,W8e,WCr,HCr,pc,UCr,H8e,JCr,YCr,zJ,KCr,ZCr,e3r,z4,o3r,kr,dx,r3r,U8e,t3r,a3r,dn,n3r,J8e,s3r,l3r,Y8e,i3r,d3r,K8e,c3r,f3r,m3r,Me,Q4,Z8e,g3r,h3r,QJ,p3r,_3r,u3r,W4,eMe,b3r,v3r,WJ,F3r,T3r,M3r,H4,oMe,E3r,C3r,HJ,w3r,A3r,L3r,U4,rMe,y3r,x3r,UJ,$3r,k3r,S3r,J4,tMe,R3r,P3r,JJ,B3r,N3r,I3r,Y4,aMe,q3r,j3r,YJ,D3r,G3r,O3r,K4,nMe,V3r,X3r,KJ,z3r,Q3r,W3r,Z4,sMe,H3r,U3r,ZJ,J3r,Y3r,K3r,eE,lMe,Z3r,e5r,eY,o5r,r5r,t5r,oE,iMe,a5r,n5r,oY,s5r,l5r,i5r,rE,dMe,d5r,c5r,rY,f5r,m5r,g5r,tE,cMe,h5r,p5r,tY,_5r,u5r,b5r,aE,fMe,v5r,F5r,aY,T5r,M5r,E5r,nE,kze,_c,sE,mMe,cx,C5r,gMe,w5r,Sze,ar,fx,A5r,uc,L5r,nY,y5r,x5r,sY,$5r,k5r,S5r,mx,R5r,hMe,P5r,B5r,N5r,Nt,gx,I5r,pMe,q5r,j5r,bc,D5r,_Me,G5r,O5r,lY,V5r,X5r,z5r,lE,Q5r,Sr,hx,W5r,uMe,H5r,U5r,cn,J5r,bMe,Y5r,K5r,vMe,Z5r,ewr,FMe,owr,rwr,twr,Qe,iE,TMe,awr,nwr,iY,swr,lwr,iwr,dE,MMe,dwr,cwr,dY,fwr,mwr,gwr,Ks,EMe,hwr,pwr,cY,_wr,uwr,fY,bwr,vwr,Fwr,cE,CMe,Twr,Mwr,mY,Ewr,Cwr,wwr,fE,wMe,Awr,Lwr,gY,ywr,xwr,$wr,mE,AMe,kwr,Swr,hY,Rwr,Pwr,Bwr,gE,LMe,Nwr,Iwr,pY,qwr,jwr,Dwr,hE,Rze,vc,pE,yMe,px,Gwr,xMe,Owr,Pze,nr,_x,Vwr,Fc,Xwr,_Y,zwr,Qwr,uY,Wwr,Hwr,Uwr,ux,Jwr,$Me,Ywr,Kwr,Zwr,It,bx,eAr,kMe,oAr,rAr,Tc,tAr,SMe,aAr,nAr,bY,sAr,lAr,iAr,_E,dAr,Rr,vx,cAr,RMe,fAr,mAr,fn,gAr,PMe,hAr,pAr,BMe,_Ar,uAr,NMe,bAr,vAr,FAr,ie,uE,IMe,TAr,MAr,vY,EAr,CAr,wAr,bE,qMe,AAr,LAr,FY,yAr,xAr,$Ar,vE,jMe,kAr,SAr,TY,RAr,PAr,BAr,FE,DMe,NAr,IAr,MY,qAr,jAr,DAr,TE,GMe,GAr,OAr,EY,VAr,XAr,zAr,ME,OMe,QAr,WAr,CY,HAr,UAr,JAr,EE,VMe,YAr,KAr,wY,ZAr,e6r,o6r,CE,XMe,r6r,t6r,AY,a6r,n6r,s6r,wE,zMe,l6r,i6r,LY,d6r,c6r,f6r,AE,QMe,m6r,g6r,yY,h6r,p6r,_6r,LE,WMe,u6r,b6r,xY,v6r,F6r,T6r,yE,HMe,M6r,E6r,$Y,C6r,w6r,A6r,xE,UMe,L6r,y6r,kY,x6r,$6r,k6r,$E,JMe,S6r,R6r,SY,P6r,B6r,N6r,kE,YMe,I6r,q6r,RY,j6r,D6r,G6r,SE,KMe,O6r,V6r,PY,X6r,z6r,Q6r,RE,ZMe,W6r,H6r,BY,U6r,J6r,Y6r,PE,e4e,K6r,Z6r,NY,e7r,o7r,r7r,BE,o4e,t7r,a7r,IY,n7r,s7r,l7r,NE,r4e,i7r,d7r,qY,c7r,f7r,m7r,IE,Bze,Mc,qE,t4e,Fx,g7r,a4e,h7r,Nze,sr,Tx,p7r,Ec,_7r,jY,u7r,b7r,DY,v7r,F7r,T7r,Mx,M7r,n4e,E7r,C7r,w7r,qt,Ex,A7r,s4e,L7r,y7r,Cc,x7r,l4e,$7r,k7r,GY,S7r,R7r,P7r,jE,B7r,Pr,Cx,N7r,i4e,I7r,q7r,mn,j7r,d4e,D7r,G7r,c4e,O7r,V7r,f4e,X7r,z7r,Q7r,xe,DE,m4e,W7r,H7r,OY,U7r,J7r,Y7r,GE,g4e,K7r,Z7r,VY,eLr,oLr,rLr,OE,h4e,tLr,aLr,XY,nLr,sLr,lLr,VE,p4e,iLr,dLr,zY,cLr,fLr,mLr,XE,_4e,gLr,hLr,QY,pLr,_Lr,uLr,zE,u4e,bLr,vLr,WY,FLr,TLr,MLr,QE,b4e,ELr,CLr,HY,wLr,ALr,LLr,WE,v4e,yLr,xLr,UY,$Lr,kLr,SLr,HE,F4e,RLr,PLr,JY,BLr,NLr,ILr,UE,T4e,qLr,jLr,YY,DLr,GLr,OLr,JE,Ize,wc,YE,M4e,wx,VLr,E4e,XLr,qze,lr,Ax,zLr,Ac,QLr,KY,WLr,HLr,ZY,ULr,JLr,YLr,Lx,KLr,C4e,ZLr,eyr,oyr,jt,yx,ryr,w4e,tyr,ayr,Lc,nyr,A4e,syr,lyr,eK,iyr,dyr,cyr,KE,fyr,Br,xx,myr,L4e,gyr,hyr,gn,pyr,y4e,_yr,uyr,x4e,byr,vyr,$4e,Fyr,Tyr,Myr,ae,ZE,k4e,Eyr,Cyr,oK,wyr,Ayr,Lyr,eC,S4e,yyr,xyr,rK,$yr,kyr,Syr,oC,R4e,Ryr,Pyr,tK,Byr,Nyr,Iyr,rC,P4e,qyr,jyr,aK,Dyr,Gyr,Oyr,tC,B4e,Vyr,Xyr,nK,zyr,Qyr,Wyr,aC,N4e,Hyr,Uyr,sK,Jyr,Yyr,Kyr,nC,I4e,Zyr,e9r,lK,o9r,r9r,t9r,sC,q4e,a9r,n9r,iK,s9r,l9r,i9r,lC,j4e,d9r,c9r,dK,f9r,m9r,g9r,iC,D4e,h9r,p9r,cK,_9r,u9r,b9r,dC,G4e,v9r,F9r,fK,T9r,M9r,E9r,cC,O4e,C9r,w9r,mK,A9r,L9r,y9r,fC,V4e,x9r,$9r,gK,k9r,S9r,R9r,mC,X4e,P9r,B9r,hK,N9r,I9r,q9r,gC,z4e,j9r,D9r,pK,G9r,O9r,V9r,hC,Q4e,X9r,z9r,_K,Q9r,W9r,H9r,pC,W4e,U9r,J9r,uK,Y9r,K9r,Z9r,_C,H4e,exr,oxr,bK,rxr,txr,axr,uC,U4e,nxr,sxr,vK,lxr,ixr,dxr,bC,J4e,cxr,fxr,FK,mxr,gxr,hxr,vC,Y4e,pxr,_xr,TK,uxr,bxr,vxr,FC,K4e,Fxr,Txr,MK,Mxr,Exr,Cxr,TC,Z4e,wxr,Axr,EK,Lxr,yxr,xxr,MC,eEe,$xr,kxr,CK,Sxr,Rxr,Pxr,EC,oEe,Bxr,Nxr,wK,Ixr,qxr,jxr,CC,rEe,Dxr,Gxr,AK,Oxr,Vxr,Xxr,wC,jze,yc,AC,tEe,$x,zxr,aEe,Qxr,Dze,ir,kx,Wxr,xc,Hxr,LK,Uxr,Jxr,yK,Yxr,Kxr,Zxr,Sx,e$r,nEe,o$r,r$r,t$r,Dt,Rx,a$r,sEe,n$r,s$r,$c,l$r,lEe,i$r,d$r,xK,c$r,f$r,m$r,LC,g$r,Nr,Px,h$r,iEe,p$r,_$r,hn,u$r,dEe,b$r,v$r,cEe,F$r,T$r,fEe,M$r,E$r,C$r,ue,yC,mEe,w$r,A$r,$K,L$r,y$r,x$r,xC,gEe,$$r,k$r,kK,S$r,R$r,P$r,$C,hEe,B$r,N$r,SK,I$r,q$r,j$r,kC,pEe,D$r,G$r,RK,O$r,V$r,X$r,SC,_Ee,z$r,Q$r,PK,W$r,H$r,U$r,RC,uEe,J$r,Y$r,BK,K$r,Z$r,ekr,PC,bEe,okr,rkr,NK,tkr,akr,nkr,BC,vEe,skr,lkr,IK,ikr,dkr,ckr,NC,FEe,fkr,mkr,qK,gkr,hkr,pkr,IC,TEe,_kr,ukr,jK,bkr,vkr,Fkr,qC,MEe,Tkr,Mkr,DK,Ekr,Ckr,wkr,jC,EEe,Akr,Lkr,GK,ykr,xkr,$kr,DC,CEe,kkr,Skr,OK,Rkr,Pkr,Bkr,GC,wEe,Nkr,Ikr,VK,qkr,jkr,Dkr,OC,AEe,Gkr,Okr,XK,Vkr,Xkr,zkr,VC,LEe,Qkr,Wkr,zK,Hkr,Ukr,Jkr,XC,yEe,Ykr,Kkr,QK,Zkr,eSr,oSr,zC,Gze,kc,QC,xEe,Bx,rSr,$Ee,tSr,Oze,dr,Nx,aSr,Sc,nSr,WK,sSr,lSr,HK,iSr,dSr,cSr,Ix,fSr,kEe,mSr,gSr,hSr,Gt,qx,pSr,SEe,_Sr,uSr,Rc,bSr,REe,vSr,FSr,UK,TSr,MSr,ESr,WC,CSr,Ir,jx,wSr,PEe,ASr,LSr,pn,ySr,BEe,xSr,$Sr,NEe,kSr,SSr,IEe,RSr,PSr,BSr,Dx,HC,qEe,NSr,ISr,JK,qSr,jSr,DSr,UC,jEe,GSr,OSr,YK,VSr,XSr,zSr,JC,Vze,Pc,YC,DEe,Gx,QSr,GEe,WSr,Xze,cr,Ox,HSr,Bc,USr,KK,JSr,YSr,ZK,KSr,ZSr,eRr,Vx,oRr,OEe,rRr,tRr,aRr,Ot,Xx,nRr,VEe,sRr,lRr,Nc,iRr,XEe,dRr,cRr,eZ,fRr,mRr,gRr,KC,hRr,qr,zx,pRr,zEe,_Rr,uRr,_n,bRr,QEe,vRr,FRr,WEe,TRr,MRr,HEe,ERr,CRr,wRr,UEe,ZC,JEe,ARr,LRr,oZ,yRr,xRr,$Rr,e3,zze,Ic,o3,YEe,Qx,kRr,KEe,SRr,Qze,fr,Wx,RRr,qc,PRr,rZ,BRr,NRr,tZ,IRr,qRr,jRr,Hx,DRr,ZEe,GRr,ORr,VRr,Vt,Ux,XRr,eCe,zRr,QRr,jc,WRr,oCe,HRr,URr,aZ,JRr,YRr,KRr,r3,ZRr,jr,Jx,ePr,rCe,oPr,rPr,un,tPr,tCe,aPr,nPr,aCe,sPr,lPr,nCe,iPr,dPr,cPr,de,t3,sCe,fPr,mPr,nZ,gPr,hPr,pPr,a3,lCe,_Pr,uPr,sZ,bPr,vPr,FPr,n3,iCe,TPr,MPr,lZ,EPr,CPr,wPr,s3,dCe,APr,LPr,iZ,yPr,xPr,$Pr,l3,cCe,kPr,SPr,dZ,RPr,PPr,BPr,i3,fCe,NPr,IPr,cZ,qPr,jPr,DPr,d3,mCe,GPr,OPr,fZ,VPr,XPr,zPr,c3,gCe,QPr,WPr,mZ,HPr,UPr,JPr,f3,hCe,YPr,KPr,gZ,ZPr,eBr,oBr,m3,pCe,rBr,tBr,hZ,aBr,nBr,sBr,g3,_Ce,lBr,iBr,pZ,dBr,cBr,fBr,h3,uCe,mBr,gBr,_Z,hBr,pBr,_Br,p3,bCe,uBr,bBr,uZ,vBr,FBr,TBr,_3,vCe,MBr,EBr,bZ,CBr,wBr,ABr,u3,FCe,LBr,yBr,vZ,xBr,$Br,kBr,b3,TCe,SBr,RBr,FZ,PBr,BBr,NBr,v3,MCe,IBr,qBr,TZ,jBr,DBr,GBr,F3,ECe,OBr,VBr,MZ,XBr,zBr,QBr,T3,CCe,WBr,HBr,EZ,UBr,JBr,YBr,M3,wCe,KBr,ZBr,CZ,eNr,oNr,rNr,E3,Wze,Dc,C3,ACe,Yx,tNr,LCe,aNr,Hze,mr,Kx,nNr,Gc,sNr,wZ,lNr,iNr,AZ,dNr,cNr,fNr,Zx,mNr,yCe,gNr,hNr,pNr,Xt,e$,_Nr,xCe,uNr,bNr,Oc,vNr,$Ce,FNr,TNr,LZ,MNr,ENr,CNr,w3,wNr,Dr,o$,ANr,kCe,LNr,yNr,bn,xNr,SCe,$Nr,kNr,RCe,SNr,RNr,PCe,PNr,BNr,NNr,ce,A3,BCe,INr,qNr,yZ,jNr,DNr,GNr,L3,NCe,ONr,VNr,xZ,XNr,zNr,QNr,y3,ICe,WNr,HNr,$Z,UNr,JNr,YNr,x3,qCe,KNr,ZNr,kZ,eIr,oIr,rIr,$3,jCe,tIr,aIr,SZ,nIr,sIr,lIr,k3,DCe,iIr,dIr,RZ,cIr,fIr,mIr,S3,GCe,gIr,hIr,PZ,pIr,_Ir,uIr,R3,OCe,bIr,vIr,BZ,FIr,TIr,MIr,P3,VCe,EIr,CIr,NZ,wIr,AIr,LIr,B3,XCe,yIr,xIr,IZ,$Ir,kIr,SIr,N3,zCe,RIr,PIr,qZ,BIr,NIr,IIr,I3,QCe,qIr,jIr,jZ,DIr,GIr,OIr,q3,WCe,VIr,XIr,DZ,zIr,QIr,WIr,j3,HCe,HIr,UIr,GZ,JIr,YIr,KIr,D3,UCe,ZIr,eqr,OZ,oqr,rqr,tqr,G3,JCe,aqr,nqr,VZ,sqr,lqr,iqr,O3,YCe,dqr,cqr,XZ,fqr,mqr,gqr,V3,KCe,hqr,pqr,zZ,_qr,uqr,bqr,X3,ZCe,vqr,Fqr,QZ,Tqr,Mqr,Eqr,z3,e3e,Cqr,wqr,WZ,Aqr,Lqr,yqr,Q3,Uze,Vc,W3,o3e,r$,xqr,r3e,$qr,Jze,gr,t$,kqr,Xc,Sqr,HZ,Rqr,Pqr,UZ,Bqr,Nqr,Iqr,a$,qqr,t3e,jqr,Dqr,Gqr,zt,n$,Oqr,a3e,Vqr,Xqr,zc,zqr,n3e,Qqr,Wqr,JZ,Hqr,Uqr,Jqr,H3,Yqr,Gr,s$,Kqr,s3e,Zqr,ejr,vn,ojr,l3e,rjr,tjr,i3e,ajr,njr,d3e,sjr,ljr,ijr,c3e,U3,f3e,djr,cjr,YZ,fjr,mjr,gjr,J3,Yze,Qc,Y3,m3e,l$,hjr,g3e,pjr,Kze,hr,i$,_jr,Wc,ujr,KZ,bjr,vjr,ZZ,Fjr,Tjr,Mjr,d$,Ejr,h3e,Cjr,wjr,Ajr,Qt,c$,Ljr,p3e,yjr,xjr,Hc,$jr,_3e,kjr,Sjr,eee,Rjr,Pjr,Bjr,K3,Njr,Or,f$,Ijr,u3e,qjr,jjr,Fn,Djr,b3e,Gjr,Ojr,v3e,Vjr,Xjr,F3e,zjr,Qjr,Wjr,T3e,Z3,M3e,Hjr,Ujr,oee,Jjr,Yjr,Kjr,e5,Zze,Uc,o5,E3e,m$,Zjr,C3e,eDr,eQe,pr,g$,oDr,Jc,rDr,ree,tDr,aDr,tee,nDr,sDr,lDr,h$,iDr,w3e,dDr,cDr,fDr,Wt,p$,mDr,A3e,gDr,hDr,Yc,pDr,L3e,_Dr,uDr,aee,bDr,vDr,FDr,r5,TDr,Vr,_$,MDr,y3e,EDr,CDr,Tn,wDr,x3e,ADr,LDr,$3e,yDr,xDr,k3e,$Dr,kDr,SDr,oe,t5,S3e,RDr,PDr,nee,BDr,NDr,IDr,a5,R3e,qDr,jDr,see,DDr,GDr,ODr,n5,P3e,VDr,XDr,lee,zDr,QDr,WDr,s5,B3e,HDr,UDr,iee,JDr,YDr,KDr,l5,N3e,ZDr,eGr,dee,oGr,rGr,tGr,i5,I3e,aGr,nGr,cee,sGr,lGr,iGr,d5,q3e,dGr,cGr,fee,fGr,mGr,gGr,c5,j3e,hGr,pGr,mee,_Gr,uGr,bGr,f5,D3e,vGr,FGr,gee,TGr,MGr,EGr,m5,G3e,CGr,wGr,hee,AGr,LGr,yGr,g5,O3e,xGr,$Gr,pee,kGr,SGr,RGr,h5,V3e,PGr,BGr,_ee,NGr,IGr,qGr,p5,X3e,jGr,DGr,uee,GGr,OGr,VGr,_5,z3e,XGr,zGr,bee,QGr,WGr,HGr,u5,Q3e,UGr,JGr,vee,YGr,KGr,ZGr,b5,W3e,eOr,oOr,Fee,rOr,tOr,aOr,v5,H3e,nOr,sOr,Tee,lOr,iOr,dOr,F5,U3e,cOr,fOr,Mee,mOr,gOr,hOr,T5,J3e,pOr,_Or,Eee,uOr,bOr,vOr,M5,Y3e,FOr,TOr,Cee,MOr,EOr,COr,E5,K3e,wOr,AOr,wee,LOr,yOr,xOr,C5,Z3e,$Or,kOr,Aee,SOr,ROr,POr,w5,e5e,BOr,NOr,Lee,IOr,qOr,jOr,A5,o5e,DOr,GOr,yee,OOr,VOr,XOr,L5,r5e,zOr,QOr,xee,WOr,HOr,UOr,y5,t5e,JOr,YOr,$ee,KOr,ZOr,eVr,x5,a5e,oVr,rVr,kee,tVr,aVr,nVr,$5,n5e,sVr,lVr,See,iVr,dVr,cVr,k5,oQe,Kc,S5,s5e,u$,fVr,l5e,mVr,rQe,_r,b$,gVr,Zc,hVr,Ree,pVr,_Vr,Pee,uVr,bVr,vVr,v$,FVr,i5e,TVr,MVr,EVr,Ht,F$,CVr,d5e,wVr,AVr,ef,LVr,c5e,yVr,xVr,Bee,$Vr,kVr,SVr,R5,RVr,Xr,T$,PVr,f5e,BVr,NVr,Mn,IVr,m5e,qVr,jVr,g5e,DVr,GVr,h5e,OVr,VVr,XVr,Ae,P5,p5e,zVr,QVr,Nee,WVr,HVr,UVr,B5,_5e,JVr,YVr,Iee,KVr,ZVr,eXr,N5,u5e,oXr,rXr,qee,tXr,aXr,nXr,I5,b5e,sXr,lXr,jee,iXr,dXr,cXr,q5,v5e,fXr,mXr,Dee,gXr,hXr,pXr,j5,F5e,_Xr,uXr,Gee,bXr,vXr,FXr,D5,T5e,TXr,MXr,Oee,EXr,CXr,wXr,G5,M5e,AXr,LXr,Vee,yXr,xXr,$Xr,O5,E5e,kXr,SXr,Xee,RXr,PXr,BXr,V5,C5e,NXr,IXr,zee,qXr,jXr,DXr,X5,w5e,GXr,OXr,Qee,VXr,XXr,zXr,z5,tQe,of,Q5,A5e,M$,QXr,L5e,WXr,aQe,ur,E$,HXr,rf,UXr,Wee,JXr,YXr,Hee,KXr,ZXr,ezr,C$,ozr,y5e,rzr,tzr,azr,Ut,w$,nzr,x5e,szr,lzr,tf,izr,$5e,dzr,czr,Uee,fzr,mzr,gzr,W5,hzr,zr,A$,pzr,k5e,_zr,uzr,En,bzr,S5e,vzr,Fzr,R5e,Tzr,Mzr,P5e,Ezr,Czr,wzr,Ee,H5,B5e,Azr,Lzr,Jee,yzr,xzr,$zr,U5,N5e,kzr,Szr,Yee,Rzr,Pzr,Bzr,J5,I5e,Nzr,Izr,Kee,qzr,jzr,Dzr,Y5,q5e,Gzr,Ozr,Zee,Vzr,Xzr,zzr,K5,j5e,Qzr,Wzr,eoe,Hzr,Uzr,Jzr,Z5,D5e,Yzr,Kzr,ooe,Zzr,eQr,oQr,ew,G5e,rQr,tQr,roe,aQr,nQr,sQr,ow,O5e,lQr,iQr,toe,dQr,cQr,fQr,rw,V5e,mQr,gQr,aoe,hQr,pQr,_Qr,tw,X5e,uQr,bQr,noe,vQr,FQr,TQr,aw,z5e,MQr,EQr,soe,CQr,wQr,AQr,nw,Q5e,LQr,yQr,loe,xQr,$Qr,kQr,sw,W5e,SQr,RQr,ioe,PQr,BQr,NQr,lw,nQe,af,iw,H5e,L$,IQr,U5e,qQr,sQe,br,y$,jQr,nf,DQr,doe,GQr,OQr,coe,VQr,XQr,zQr,x$,QQr,J5e,WQr,HQr,UQr,Jt,$$,JQr,Y5e,YQr,KQr,sf,ZQr,K5e,eWr,oWr,foe,rWr,tWr,aWr,dw,nWr,Qr,k$,sWr,Z5e,lWr,iWr,Cn,dWr,ewe,cWr,fWr,owe,mWr,gWr,rwe,hWr,pWr,_Wr,$e,cw,twe,uWr,bWr,moe,vWr,FWr,TWr,fw,awe,MWr,EWr,goe,CWr,wWr,AWr,mw,nwe,LWr,yWr,hoe,xWr,$Wr,kWr,gw,swe,SWr,RWr,poe,PWr,BWr,NWr,hw,lwe,IWr,qWr,_oe,jWr,DWr,GWr,pw,iwe,OWr,VWr,uoe,XWr,zWr,QWr,_w,dwe,WWr,HWr,boe,UWr,JWr,YWr,uw,cwe,KWr,ZWr,voe,eHr,oHr,rHr,bw,fwe,tHr,aHr,Foe,nHr,sHr,lHr,vw,mwe,iHr,dHr,Toe,cHr,fHr,mHr,Fw,lQe,lf,Tw,gwe,S$,gHr,hwe,hHr,iQe,vr,R$,pHr,df,_Hr,Moe,uHr,bHr,Eoe,vHr,FHr,THr,P$,MHr,pwe,EHr,CHr,wHr,Yt,B$,AHr,_we,LHr,yHr,cf,xHr,uwe,$Hr,kHr,Coe,SHr,RHr,PHr,Mw,BHr,Wr,N$,NHr,bwe,IHr,qHr,wn,jHr,vwe,DHr,GHr,Fwe,OHr,VHr,Twe,XHr,zHr,QHr,ke,Ew,Mwe,WHr,HHr,woe,UHr,JHr,YHr,Cw,Ewe,KHr,ZHr,Aoe,eUr,oUr,rUr,ww,Cwe,tUr,aUr,Loe,nUr,sUr,lUr,Aw,wwe,iUr,dUr,yoe,cUr,fUr,mUr,Lw,Awe,gUr,hUr,xoe,pUr,_Ur,uUr,yw,Lwe,bUr,vUr,$oe,FUr,TUr,MUr,xw,ywe,EUr,CUr,koe,wUr,AUr,LUr,$w,xwe,yUr,xUr,Soe,$Ur,kUr,SUr,kw,$we,RUr,PUr,Roe,BUr,NUr,IUr,Sw,kwe,qUr,jUr,Poe,DUr,GUr,OUr,Rw,dQe,ff,Pw,Swe,I$,VUr,Rwe,XUr,cQe,Fr,q$,zUr,mf,QUr,Boe,WUr,HUr,Noe,UUr,JUr,YUr,j$,KUr,Pwe,ZUr,eJr,oJr,Kt,D$,rJr,Bwe,tJr,aJr,gf,nJr,Nwe,sJr,lJr,Ioe,iJr,dJr,cJr,Bw,fJr,Hr,G$,mJr,Iwe,gJr,hJr,An,pJr,qwe,_Jr,uJr,jwe,bJr,vJr,Dwe,FJr,TJr,MJr,Se,Nw,Gwe,EJr,CJr,qoe,wJr,AJr,LJr,Iw,Owe,yJr,xJr,joe,$Jr,kJr,SJr,qw,Vwe,RJr,PJr,Doe,BJr,NJr,IJr,jw,Xwe,qJr,jJr,Goe,DJr,GJr,OJr,Dw,zwe,VJr,XJr,Ooe,zJr,QJr,WJr,Gw,Qwe,HJr,UJr,Voe,JJr,YJr,KJr,Ow,Wwe,ZJr,eYr,Xoe,oYr,rYr,tYr,Vw,Hwe,aYr,nYr,zoe,sYr,lYr,iYr,Xw,Uwe,dYr,cYr,Qoe,fYr,mYr,gYr,zw,Jwe,hYr,pYr,Woe,_Yr,uYr,bYr,Qw,fQe,hf,Ww,Ywe,O$,vYr,Kwe,FYr,mQe,Tr,V$,TYr,pf,MYr,Hoe,EYr,CYr,Uoe,wYr,AYr,LYr,X$,yYr,Zwe,xYr,$Yr,kYr,Zt,z$,SYr,eAe,RYr,PYr,_f,BYr,oAe,NYr,IYr,Joe,qYr,jYr,DYr,Hw,GYr,Ur,Q$,OYr,rAe,VYr,XYr,Ln,zYr,tAe,QYr,WYr,aAe,HYr,UYr,nAe,JYr,YYr,KYr,Re,Uw,sAe,ZYr,eKr,Yoe,oKr,rKr,tKr,Jw,lAe,aKr,nKr,Koe,sKr,lKr,iKr,Yw,iAe,dKr,cKr,Zoe,fKr,mKr,gKr,Kw,dAe,hKr,pKr,ere,_Kr,uKr,bKr,Zw,cAe,vKr,FKr,ore,TKr,MKr,EKr,eA,fAe,CKr,wKr,rre,AKr,LKr,yKr,oA,mAe,xKr,$Kr,tre,kKr,SKr,RKr,rA,gAe,PKr,BKr,are,NKr,IKr,qKr,tA,hAe,jKr,DKr,nre,GKr,OKr,VKr,aA,pAe,XKr,zKr,sre,QKr,WKr,HKr,nA,gQe,uf,sA,_Ae,W$,UKr,uAe,JKr,hQe,Mr,H$,YKr,bf,KKr,lre,ZKr,eZr,ire,oZr,rZr,tZr,U$,aZr,bAe,nZr,sZr,lZr,ea,J$,iZr,vAe,dZr,cZr,vf,fZr,FAe,mZr,gZr,dre,hZr,pZr,_Zr,lA,uZr,Jr,Y$,bZr,TAe,vZr,FZr,yn,TZr,MAe,MZr,EZr,EAe,CZr,wZr,CAe,AZr,LZr,yZr,Ve,iA,wAe,xZr,$Zr,cre,kZr,SZr,RZr,dA,AAe,PZr,BZr,fre,NZr,IZr,qZr,cA,LAe,jZr,DZr,mre,GZr,OZr,VZr,fA,yAe,XZr,zZr,gre,QZr,WZr,HZr,mA,xAe,UZr,JZr,hre,YZr,KZr,ZZr,gA,$Ae,eet,oet,pre,ret,tet,aet,hA,kAe,net,set,_re,iet,det,cet,pA,SAe,fet,met,ure,get,het,pet,_A,pQe,Ff,uA,RAe,K$,_et,PAe,uet,_Qe,Er,Z$,bet,Tf,vet,bre,Fet,Tet,vre,Met,Eet,Cet,ek,wet,BAe,Aet,Let,yet,oa,ok,xet,NAe,$et,ket,Mf,Set,IAe,Ret,Pet,Fre,Bet,Net,Iet,bA,qet,Yr,rk,jet,qAe,Det,Get,xn,Oet,jAe,Vet,Xet,DAe,zet,Qet,GAe,Wet,Het,Uet,Xe,vA,OAe,Jet,Yet,Tre,Ket,Zet,eot,FA,VAe,oot,rot,Mre,tot,aot,not,TA,XAe,sot,lot,Ere,iot,dot,cot,MA,zAe,fot,mot,Cre,got,hot,pot,EA,QAe,_ot,uot,wre,bot,vot,Fot,CA,WAe,Tot,Mot,Are,Eot,Cot,wot,wA,HAe,Aot,Lot,Lre,yot,xot,$ot,AA,UAe,kot,Sot,yre,Rot,Pot,Bot,LA,uQe,Ef,yA,JAe,tk,Not,YAe,Iot,bQe,Cr,ak,qot,Cf,jot,xre,Dot,Got,$re,Oot,Vot,Xot,nk,zot,KAe,Qot,Wot,Hot,ra,sk,Uot,ZAe,Jot,Yot,wf,Kot,e6e,Zot,ert,kre,ort,rrt,trt,xA,art,Kr,lk,nrt,o6e,srt,lrt,$n,irt,r6e,drt,crt,t6e,frt,mrt,a6e,grt,hrt,prt,n6e,$A,s6e,_rt,urt,Sre,brt,vrt,Frt,kA,vQe,Af,SA,l6e,ik,Trt,i6e,Mrt,FQe,wr,dk,Ert,Lf,Crt,Rre,wrt,Art,Pre,Lrt,yrt,xrt,ck,$rt,d6e,krt,Srt,Rrt,ta,fk,Prt,c6e,Brt,Nrt,yf,Irt,f6e,qrt,jrt,Bre,Drt,Grt,Ort,RA,Vrt,Zr,mk,Xrt,m6e,zrt,Qrt,kn,Wrt,g6e,Hrt,Urt,h6e,Jrt,Yrt,p6e,Krt,Zrt,ett,gk,PA,_6e,ott,rtt,Nre,ttt,att,ntt,BA,u6e,stt,ltt,Ire,itt,dtt,ctt,NA,TQe,xf,IA,b6e,hk,ftt,v6e,mtt,MQe,Ar,pk,gtt,$f,htt,qre,ptt,_tt,jre,utt,btt,vtt,_k,Ftt,F6e,Ttt,Mtt,Ett,aa,uk,Ctt,T6e,wtt,Att,kf,Ltt,M6e,ytt,xtt,Dre,$tt,ktt,Stt,qA,Rtt,et,bk,Ptt,E6e,Btt,Ntt,Sn,Itt,C6e,qtt,jtt,w6e,Dtt,Gtt,A6e,Ott,Vtt,Xtt,L6e,jA,y6e,ztt,Qtt,Gre,Wtt,Htt,Utt,DA,EQe;return d=new te({}),Sa=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),dL=new te({}),cL=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Df=new Jtt({props:{warning:!0,$$slots:{default:[DWt]},$$scope:{ctx:$}}}),fL=new te({}),mL=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/configuration_auto.py#L611"}}),pL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/configuration_auto.py#L634"}}),Kg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[GWt]},$$scope:{ctx:$}}}),_L=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/configuration_auto.py#L757"}}),uL=new te({}),bL=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/tokenization_auto.py#L410"}}),TL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_18022/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/tokenization_auto.py#L424"}}),Ph=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[OWt]},$$scope:{ctx:$}}}),ML=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/tokenization_auto.py#L623"}}),EL=new te({}),CL=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/feature_extraction_auto.py#L195"}}),LL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_18022/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/feature_extraction_auto.py#L209"}}),up=new Jtt({props:{$$slots:{default:[VWt]},$$scope:{ctx:$}}}),bp=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[XWt]},$$scope:{ctx:$}}}),yL=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/feature_extraction_auto.py#L336"}}),xL=new te({}),$L=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/processing_auto.py#L89"}}),RL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/processing_auto.py#L103"}}),jp=new Jtt({props:{$$slots:{default:[zWt]},$$scope:{ctx:$}}}),Dp=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[QWt]},$$scope:{ctx:$}}}),PL=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/processing_auto.py#L256"}}),BL=new te({}),NL=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_auto.py#L785"}}),qL=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/codegen#transformers.CodeGenModel">CodeGenModel</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_18022/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/groupvit#transformers.GroupViTConfig">GroupViTConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/groupvit#transformers.GroupViTModel">GroupViTModel</a> (GroupViT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mobilevit#transformers.MobileViTModel">MobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mvp#transformers.MvpModel">MvpModel</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/nezha#transformers.NezhaModel">NezhaModel</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),Vp=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[WWt]},$$scope:{ctx:$}}}),jL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),Hu=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[HWt]},$$scope:{ctx:$}}}),DL=new te({}),GL=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_auto.py#L792"}}),VL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/nezha#transformers.NezhaForPreTraining">NezhaForPreTraining</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),Ju=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[UWt]},$$scope:{ctx:$}}}),XL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),V2=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[JWt]},$$scope:{ctx:$}}}),zL=new te({}),QL=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_auto.py#L807"}}),HL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/codegen#transformers.CodeGenForCausalLM">CodeGenForCausalLM</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mvp#transformers.MvpForCausalLM">MvpForCausalLM</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),z2=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[YWt]},$$scope:{ctx:$}}}),UL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),R1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[KWt]},$$scope:{ctx:$}}}),JL=new te({}),YL=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_auto.py#L814"}}),ZL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/nezha#transformers.NezhaForMaskedLM">NezhaForMaskedLM</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),B1=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[ZWt]},$$scope:{ctx:$}}}),ey=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),Tb=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[eHt]},$$scope:{ctx:$}}}),oy=new te({}),ry=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_auto.py#L821"}}),ay=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),Eb=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[oHt]},$$scope:{ctx:$}}}),ny=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),Xb=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[rHt]},$$scope:{ctx:$}}}),sy=new te({}),ly=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_auto.py#L830"}}),dy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mvp#transformers.MvpForSequenceClassification">MvpForSequenceClassification</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/nezha#transformers.NezhaForSequenceClassification">NezhaForSequenceClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),Qb=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[tHt]},$$scope:{ctx:$}}}),cy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),Xv=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[aHt]},$$scope:{ctx:$}}}),fy=new te({}),my=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_auto.py#L875"}}),hy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/nezha#transformers.NezhaForMultipleChoice">NezhaForMultipleChoice</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),Qv=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[nHt]},$$scope:{ctx:$}}}),py=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),C0=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[sHt]},$$scope:{ctx:$}}}),_y=new te({}),uy=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_auto.py#L882"}}),vy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction">NezhaForNextSentencePrediction</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),A0=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[lHt]},$$scope:{ctx:$}}}),Fy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),P0=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[iHt]},$$scope:{ctx:$}}}),Ty=new te({}),My=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_auto.py#L868"}}),Cy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/nezha#transformers.NezhaForTokenClassification">NezhaForTokenClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),N0=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[dHt]},$$scope:{ctx:$}}}),wy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),FF=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[cHt]},$$scope:{ctx:$}}}),Ay=new te({}),Ly=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_auto.py#L839"}}),xy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mvp#transformers.MvpForQuestionAnswering">MvpForQuestionAnswering</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/nezha#transformers.NezhaForQuestionAnswering">NezhaForQuestionAnswering</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),MF=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[fHt]},$$scope:{ctx:$}}}),$y=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),mT=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[mHt]},$$scope:{ctx:$}}}),ky=new te({}),Sy=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_auto.py#L846"}}),Py=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),hT=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[gHt]},$$scope:{ctx:$}}}),By=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),uT=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[hHt]},$$scope:{ctx:$}}}),Ny=new te({}),Iy=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_auto.py#L891"}}),jy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_18022/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/pr_18022/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mobilevit#transformers.MobileViTForImageClassification">MobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_18022/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_18022/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),vT=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[pHt]},$$scope:{ctx:$}}}),Dy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),PT=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[_Ht]},$$scope:{ctx:$}}}),Gy=new te({}),Oy=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_auto.py#L930"}}),Xy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),NT=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[uHt]},$$scope:{ctx:$}}}),zy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),jT=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[bHt]},$$scope:{ctx:$}}}),Qy=new te({}),Wy=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_auto.py#L857"}}),Uy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),GT=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[vHt]},$$scope:{ctx:$}}}),Jy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),XT=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[FHt]},$$scope:{ctx:$}}}),Yy=new te({}),Ky=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_auto.py#L937"}}),e9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),QT=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[THt]},$$scope:{ctx:$}}}),o9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),t8=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[MHt]},$$scope:{ctx:$}}}),r9=new te({}),t9=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_auto.py#L960"}}),n9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),n8=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[EHt]},$$scope:{ctx:$}}}),s9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),m8=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[CHt]},$$scope:{ctx:$}}}),l9=new te({}),i9=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_auto.py#L944"}}),c9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),h8=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[wHt]},$$scope:{ctx:$}}}),f9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),A8=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[AHt]},$$scope:{ctx:$}}}),m9=new te({}),g9=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_auto.py#L951"}}),p9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),y8=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[LHt]},$$scope:{ctx:$}}}),_9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),S8=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[yHt]},$$scope:{ctx:$}}}),b9=new te({}),v9=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_auto.py#L969"}}),T9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),P8=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[xHt]},$$scope:{ctx:$}}}),M9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),G8=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[$Ht]},$$scope:{ctx:$}}}),E9=new te({}),C9=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_auto.py#L976"}}),A9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),V8=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[kHt]},$$scope:{ctx:$}}}),L9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),H8=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[SHt]},$$scope:{ctx:$}}}),y9=new te({}),x9=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_auto.py#L923"}}),k9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),J8=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[RHt]},$$scope:{ctx:$}}}),S9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),eM=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[PHt]},$$scope:{ctx:$}}}),P9=new te({}),B9=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_auto.py#L898"}}),I9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),rM=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[BHt]},$$scope:{ctx:$}}}),q9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),nM=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[NHt]},$$scope:{ctx:$}}}),j9=new te({}),D9=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_auto.py#L905"}}),O9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation">MobileViTForSemanticSegmentation</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),lM=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[IHt]},$$scope:{ctx:$}}}),V9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),hM=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[qHt]},$$scope:{ctx:$}}}),X9=new te({}),z9=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_auto.py#L914"}}),W9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),_M=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[jHt]},$$scope:{ctx:$}}}),H9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),vM=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[DHt]},$$scope:{ctx:$}}}),U9=new te({}),J9=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_tf_auto.py#L413"}}),K9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/deit#transformers.TFDeiTModel">TFDeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_18022/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/regnet#transformers.TFRegNetModel">TFRegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/resnet#transformers.TFResNetModel">TFResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),TM=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[GHt]},$$scope:{ctx:$}}}),Z9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),u4=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[OHt]},$$scope:{ctx:$}}}),ex=new te({}),ox=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_tf_auto.py#L420"}}),tx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),v4=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[VHt]},$$scope:{ctx:$}}}),ax=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),V4=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[XHt]},$$scope:{ctx:$}}}),nx=new te({}),sx=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_tf_auto.py#L435"}}),ix=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),z4=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[zHt]},$$scope:{ctx:$}}}),dx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),nE=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[QHt]},$$scope:{ctx:$}}}),cx=new te({}),fx=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_tf_auto.py#L451"}}),gx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/deit#transformers.TFDeiTForImageClassification">TFDeiTForImageClassification</a> or <a href="/docs/transformers/pr_18022/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher">TFDeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/regnet#transformers.TFRegNetForImageClassification">TFRegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/resnet#transformers.TFResNetForImageClassification">TFResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),lE=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[WHt]},$$scope:{ctx:$}}}),hx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),hE=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[HHt]},$$scope:{ctx:$}}}),px=new te({}),_x=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_tf_auto.py#L476"}}),bx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),_E=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[UHt]},$$scope:{ctx:$}}}),vx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),IE=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[JHt]},$$scope:{ctx:$}}}),Fx=new te({}),Tx=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_tf_auto.py#L483"}}),Ex=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),jE=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[YHt]},$$scope:{ctx:$}}}),Cx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),JE=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[KHt]},$$scope:{ctx:$}}}),wx=new te({}),Ax=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_tf_auto.py#L492"}}),yx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),KE=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[ZHt]},$$scope:{ctx:$}}}),xx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),wC=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[eUt]},$$scope:{ctx:$}}}),$x=new te({}),kx=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_tf_auto.py#L528"}}),Rx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),LC=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[oUt]},$$scope:{ctx:$}}}),Px=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),zC=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[rUt]},$$scope:{ctx:$}}}),Bx=new te({}),Nx=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_tf_auto.py#L535"}}),qx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),WC=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[tUt]},$$scope:{ctx:$}}}),jx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),JC=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[aUt]},$$scope:{ctx:$}}}),Gx=new te({}),Ox=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_tf_auto.py#L508"}}),Xx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),KC=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[nUt]},$$scope:{ctx:$}}}),zx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),e3=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[sUt]},$$scope:{ctx:$}}}),Qx=new te({}),Wx=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_tf_auto.py#L519"}}),Ux=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),r3=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[lUt]},$$scope:{ctx:$}}}),Jx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),E3=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[iUt]},$$scope:{ctx:$}}}),Yx=new te({}),Kx=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_tf_auto.py#L501"}}),e$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),w3=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[dUt]},$$scope:{ctx:$}}}),o$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),Q3=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[cUt]},$$scope:{ctx:$}}}),r$=new te({}),t$=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_tf_auto.py#L469"}}),n$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),H3=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[fUt]},$$scope:{ctx:$}}}),s$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),J3=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[mUt]},$$scope:{ctx:$}}}),l$=new te({}),i$=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_tf_auto.py#L544"}}),c$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),K3=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[gUt]},$$scope:{ctx:$}}}),f$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),e5=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[hUt]},$$scope:{ctx:$}}}),m$=new te({}),g$=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_flax_auto.py#L248"}}),p$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bloom#transformers.FlaxBloomModel">FlaxBloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),r5=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[pUt]},$$scope:{ctx:$}}}),_$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),k5=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[_Ut]},$$scope:{ctx:$}}}),u$=new te({}),b$=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_flax_auto.py#L262"}}),F$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bloom#transformers.FlaxBloomForCausalLM">FlaxBloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),R5=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[uUt]},$$scope:{ctx:$}}}),T$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),z5=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[bUt]},$$scope:{ctx:$}}}),M$=new te({}),E$=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_flax_auto.py#L255"}}),w$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),W5=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[vUt]},$$scope:{ctx:$}}}),A$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),lw=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[FUt]},$$scope:{ctx:$}}}),L$=new te({}),y$=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_flax_auto.py#L269"}}),$$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),dw=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[TUt]},$$scope:{ctx:$}}}),k$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),Fw=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[MUt]},$$scope:{ctx:$}}}),S$=new te({}),R$=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_flax_auto.py#L276"}}),B$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),Mw=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[EUt]},$$scope:{ctx:$}}}),N$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),Rw=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[CUt]},$$scope:{ctx:$}}}),I$=new te({}),q$=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_flax_auto.py#L285"}}),D$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),Bw=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[wUt]},$$scope:{ctx:$}}}),G$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),Qw=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[AUt]},$$scope:{ctx:$}}}),O$=new te({}),V$=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_flax_auto.py#L294"}}),z$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),Hw=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[LUt]},$$scope:{ctx:$}}}),Q$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),nA=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[yUt]},$$scope:{ctx:$}}}),W$=new te({}),H$=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_flax_auto.py#L301"}}),J$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),lA=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[xUt]},$$scope:{ctx:$}}}),Y$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),_A=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[$Ut]},$$scope:{ctx:$}}}),K$=new te({}),Z$=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_flax_auto.py#L310"}}),ok=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),bA=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[kUt]},$$scope:{ctx:$}}}),rk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),LA=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[SUt]},$$scope:{ctx:$}}}),tk=new te({}),ak=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_flax_auto.py#L317"}}),sk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),xA=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[RUt]},$$scope:{ctx:$}}}),lk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),kA=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[PUt]},$$scope:{ctx:$}}}),ik=new te({}),dk=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_flax_auto.py#L326"}}),fk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),RA=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[BUt]},$$scope:{ctx:$}}}),mk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),NA=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[NUt]},$$scope:{ctx:$}}}),hk=new te({}),pk=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_flax_auto.py#L335"}}),uk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),qA=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[IUt]},$$scope:{ctx:$}}}),bk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),DA=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[qUt]},$$scope:{ctx:$}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Co=a("span"),yi=o("Auto Classes"),Bf=l(),lt=a("p"),xi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),$i=a("code"),nL=o("from_pretrained()"),Nf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Oe=l(),We=a("p"),ki=o("Instantiating one of "),Pn=a("a"),sL=o("AutoConfig"),Bn=o(", "),Nn=a("a"),lL=o("AutoModel"),Si=o(`, and
`),In=a("a"),iL=o("AutoTokenizer"),Ri=o(" will directly create a class of the relevant architecture. For instance"),If=l(),F(Sa.$$.fragment),He=l(),Le=a("p"),GS=o("will create a model that is an instance of "),Pi=a("a"),OS=o("BertModel"),VS=o("."),wo=l(),Ra=a("p"),XS=o("There is one class of "),qf=a("code"),zS=o("AutoModel"),RHe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),bXe=l(),Bi=a("h2"),jf=a("a"),Nae=a("span"),F(dL.$$.fragment),PHe=l(),Iae=a("span"),BHe=o("Extending the Auto Classes"),vXe=l(),qn=a("p"),NHe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),qae=a("code"),IHe=o("NewModel"),qHe=o(", make sure you have a "),jae=a("code"),jHe=o("NewModelConfig"),DHe=o(` then you can add those to the auto
classes like this:`),FXe=l(),F(cL.$$.fragment),TXe=l(),QS=a("p"),GHe=o("You will then be able to use the auto classes like you would usually do!"),MXe=l(),F(Df.$$.fragment),EXe=l(),Ni=a("h2"),Gf=a("a"),Dae=a("span"),F(fL.$$.fragment),OHe=l(),Gae=a("span"),VHe=o("AutoConfig"),CXe=l(),Ao=a("div"),F(mL.$$.fragment),XHe=l(),gL=a("p"),zHe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),WS=a("a"),QHe=o("from_pretrained()"),WHe=o(" class method."),HHe=l(),hL=a("p"),UHe=o("This class cannot be instantiated directly using "),Oae=a("code"),JHe=o("__init__()"),YHe=o(" (throws an error)."),KHe=l(),Lr=a("div"),F(pL.$$.fragment),ZHe=l(),Vae=a("p"),eUe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),oUe=l(),Ii=a("p"),rUe=o("The configuration class to instantiate is selected based on the "),Xae=a("code"),tUe=o("model_type"),aUe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),zae=a("code"),nUe=o("pretrained_model_name_or_path"),sUe=o(":"),lUe=l(),A=a("ul"),Of=a("li"),Qae=a("strong"),iUe=o("albert"),dUe=o(" \u2014 "),HS=a("a"),cUe=o("AlbertConfig"),fUe=o(" (ALBERT model)"),mUe=l(),Vf=a("li"),Wae=a("strong"),gUe=o("bart"),hUe=o(" \u2014 "),US=a("a"),pUe=o("BartConfig"),_Ue=o(" (BART model)"),uUe=l(),Xf=a("li"),Hae=a("strong"),bUe=o("beit"),vUe=o(" \u2014 "),JS=a("a"),FUe=o("BeitConfig"),TUe=o(" (BEiT model)"),MUe=l(),zf=a("li"),Uae=a("strong"),EUe=o("bert"),CUe=o(" \u2014 "),YS=a("a"),wUe=o("BertConfig"),AUe=o(" (BERT model)"),LUe=l(),Qf=a("li"),Jae=a("strong"),yUe=o("bert-generation"),xUe=o(" \u2014 "),KS=a("a"),$Ue=o("BertGenerationConfig"),kUe=o(" (Bert Generation model)"),SUe=l(),Wf=a("li"),Yae=a("strong"),RUe=o("big_bird"),PUe=o(" \u2014 "),ZS=a("a"),BUe=o("BigBirdConfig"),NUe=o(" (BigBird model)"),IUe=l(),Hf=a("li"),Kae=a("strong"),qUe=o("bigbird_pegasus"),jUe=o(" \u2014 "),eR=a("a"),DUe=o("BigBirdPegasusConfig"),GUe=o(" (BigBird-Pegasus model)"),OUe=l(),Uf=a("li"),Zae=a("strong"),VUe=o("blenderbot"),XUe=o(" \u2014 "),oR=a("a"),zUe=o("BlenderbotConfig"),QUe=o(" (Blenderbot model)"),WUe=l(),Jf=a("li"),ene=a("strong"),HUe=o("blenderbot-small"),UUe=o(" \u2014 "),rR=a("a"),JUe=o("BlenderbotSmallConfig"),YUe=o(" (BlenderbotSmall model)"),KUe=l(),Yf=a("li"),one=a("strong"),ZUe=o("bloom"),eJe=o(" \u2014 "),tR=a("a"),oJe=o("BloomConfig"),rJe=o(" (BLOOM model)"),tJe=l(),Kf=a("li"),rne=a("strong"),aJe=o("camembert"),nJe=o(" \u2014 "),aR=a("a"),sJe=o("CamembertConfig"),lJe=o(" (CamemBERT model)"),iJe=l(),Zf=a("li"),tne=a("strong"),dJe=o("canine"),cJe=o(" \u2014 "),nR=a("a"),fJe=o("CanineConfig"),mJe=o(" (CANINE model)"),gJe=l(),em=a("li"),ane=a("strong"),hJe=o("clip"),pJe=o(" \u2014 "),sR=a("a"),_Je=o("CLIPConfig"),uJe=o(" (CLIP model)"),bJe=l(),om=a("li"),nne=a("strong"),vJe=o("codegen"),FJe=o(" \u2014 "),lR=a("a"),TJe=o("CodeGenConfig"),MJe=o(" (CodeGen model)"),EJe=l(),rm=a("li"),sne=a("strong"),CJe=o("convbert"),wJe=o(" \u2014 "),iR=a("a"),AJe=o("ConvBertConfig"),LJe=o(" (ConvBERT model)"),yJe=l(),tm=a("li"),lne=a("strong"),xJe=o("convnext"),$Je=o(" \u2014 "),dR=a("a"),kJe=o("ConvNextConfig"),SJe=o(" (ConvNeXT model)"),RJe=l(),am=a("li"),ine=a("strong"),PJe=o("ctrl"),BJe=o(" \u2014 "),cR=a("a"),NJe=o("CTRLConfig"),IJe=o(" (CTRL model)"),qJe=l(),nm=a("li"),dne=a("strong"),jJe=o("cvt"),DJe=o(" \u2014 "),fR=a("a"),GJe=o("CvtConfig"),OJe=o(" (CvT model)"),VJe=l(),sm=a("li"),cne=a("strong"),XJe=o("data2vec-audio"),zJe=o(" \u2014 "),mR=a("a"),QJe=o("Data2VecAudioConfig"),WJe=o(" (Data2VecAudio model)"),HJe=l(),lm=a("li"),fne=a("strong"),UJe=o("data2vec-text"),JJe=o(" \u2014 "),gR=a("a"),YJe=o("Data2VecTextConfig"),KJe=o(" (Data2VecText model)"),ZJe=l(),im=a("li"),mne=a("strong"),eYe=o("data2vec-vision"),oYe=o(" \u2014 "),hR=a("a"),rYe=o("Data2VecVisionConfig"),tYe=o(" (Data2VecVision model)"),aYe=l(),dm=a("li"),gne=a("strong"),nYe=o("deberta"),sYe=o(" \u2014 "),pR=a("a"),lYe=o("DebertaConfig"),iYe=o(" (DeBERTa model)"),dYe=l(),cm=a("li"),hne=a("strong"),cYe=o("deberta-v2"),fYe=o(" \u2014 "),_R=a("a"),mYe=o("DebertaV2Config"),gYe=o(" (DeBERTa-v2 model)"),hYe=l(),fm=a("li"),pne=a("strong"),pYe=o("decision_transformer"),_Ye=o(" \u2014 "),uR=a("a"),uYe=o("DecisionTransformerConfig"),bYe=o(" (Decision Transformer model)"),vYe=l(),mm=a("li"),_ne=a("strong"),FYe=o("deit"),TYe=o(" \u2014 "),bR=a("a"),MYe=o("DeiTConfig"),EYe=o(" (DeiT model)"),CYe=l(),gm=a("li"),une=a("strong"),wYe=o("detr"),AYe=o(" \u2014 "),vR=a("a"),LYe=o("DetrConfig"),yYe=o(" (DETR model)"),xYe=l(),hm=a("li"),bne=a("strong"),$Ye=o("distilbert"),kYe=o(" \u2014 "),FR=a("a"),SYe=o("DistilBertConfig"),RYe=o(" (DistilBERT model)"),PYe=l(),pm=a("li"),vne=a("strong"),BYe=o("dpr"),NYe=o(" \u2014 "),TR=a("a"),IYe=o("DPRConfig"),qYe=o(" (DPR model)"),jYe=l(),_m=a("li"),Fne=a("strong"),DYe=o("dpt"),GYe=o(" \u2014 "),MR=a("a"),OYe=o("DPTConfig"),VYe=o(" (DPT model)"),XYe=l(),um=a("li"),Tne=a("strong"),zYe=o("electra"),QYe=o(" \u2014 "),ER=a("a"),WYe=o("ElectraConfig"),HYe=o(" (ELECTRA model)"),UYe=l(),bm=a("li"),Mne=a("strong"),JYe=o("encoder-decoder"),YYe=o(" \u2014 "),CR=a("a"),KYe=o("EncoderDecoderConfig"),ZYe=o(" (Encoder decoder model)"),eKe=l(),vm=a("li"),Ene=a("strong"),oKe=o("flaubert"),rKe=o(" \u2014 "),wR=a("a"),tKe=o("FlaubertConfig"),aKe=o(" (FlauBERT model)"),nKe=l(),Fm=a("li"),Cne=a("strong"),sKe=o("flava"),lKe=o(" \u2014 "),AR=a("a"),iKe=o("FlavaConfig"),dKe=o(" (FLAVA model)"),cKe=l(),Tm=a("li"),wne=a("strong"),fKe=o("fnet"),mKe=o(" \u2014 "),LR=a("a"),gKe=o("FNetConfig"),hKe=o(" (FNet model)"),pKe=l(),Mm=a("li"),Ane=a("strong"),_Ke=o("fsmt"),uKe=o(" \u2014 "),yR=a("a"),bKe=o("FSMTConfig"),vKe=o(" (FairSeq Machine-Translation model)"),FKe=l(),Em=a("li"),Lne=a("strong"),TKe=o("funnel"),MKe=o(" \u2014 "),xR=a("a"),EKe=o("FunnelConfig"),CKe=o(" (Funnel Transformer model)"),wKe=l(),Cm=a("li"),yne=a("strong"),AKe=o("glpn"),LKe=o(" \u2014 "),$R=a("a"),yKe=o("GLPNConfig"),xKe=o(" (GLPN model)"),$Ke=l(),wm=a("li"),xne=a("strong"),kKe=o("gpt2"),SKe=o(" \u2014 "),kR=a("a"),RKe=o("GPT2Config"),PKe=o(" (OpenAI GPT-2 model)"),BKe=l(),Am=a("li"),$ne=a("strong"),NKe=o("gpt_neo"),IKe=o(" \u2014 "),SR=a("a"),qKe=o("GPTNeoConfig"),jKe=o(" (GPT Neo model)"),DKe=l(),Lm=a("li"),kne=a("strong"),GKe=o("gpt_neox"),OKe=o(" \u2014 "),RR=a("a"),VKe=o("GPTNeoXConfig"),XKe=o(" (GPT NeoX model)"),zKe=l(),ym=a("li"),Sne=a("strong"),QKe=o("gptj"),WKe=o(" \u2014 "),PR=a("a"),HKe=o("GPTJConfig"),UKe=o(" (GPT-J model)"),JKe=l(),xm=a("li"),Rne=a("strong"),YKe=o("groupvit"),KKe=o(" \u2014 "),BR=a("a"),ZKe=o("GroupViTConfig"),eZe=o(" (GroupViT model)"),oZe=l(),$m=a("li"),Pne=a("strong"),rZe=o("hubert"),tZe=o(" \u2014 "),NR=a("a"),aZe=o("HubertConfig"),nZe=o(" (Hubert model)"),sZe=l(),km=a("li"),Bne=a("strong"),lZe=o("ibert"),iZe=o(" \u2014 "),IR=a("a"),dZe=o("IBertConfig"),cZe=o(" (I-BERT model)"),fZe=l(),Sm=a("li"),Nne=a("strong"),mZe=o("imagegpt"),gZe=o(" \u2014 "),qR=a("a"),hZe=o("ImageGPTConfig"),pZe=o(" (ImageGPT model)"),_Ze=l(),Rm=a("li"),Ine=a("strong"),uZe=o("layoutlm"),bZe=o(" \u2014 "),jR=a("a"),vZe=o("LayoutLMConfig"),FZe=o(" (LayoutLM model)"),TZe=l(),Pm=a("li"),qne=a("strong"),MZe=o("layoutlmv2"),EZe=o(" \u2014 "),DR=a("a"),CZe=o("LayoutLMv2Config"),wZe=o(" (LayoutLMv2 model)"),AZe=l(),Bm=a("li"),jne=a("strong"),LZe=o("layoutlmv3"),yZe=o(" \u2014 "),GR=a("a"),xZe=o("LayoutLMv3Config"),$Ze=o(" (LayoutLMv3 model)"),kZe=l(),Nm=a("li"),Dne=a("strong"),SZe=o("led"),RZe=o(" \u2014 "),OR=a("a"),PZe=o("LEDConfig"),BZe=o(" (LED model)"),NZe=l(),Im=a("li"),Gne=a("strong"),IZe=o("levit"),qZe=o(" \u2014 "),VR=a("a"),jZe=o("LevitConfig"),DZe=o(" (LeViT model)"),GZe=l(),qm=a("li"),One=a("strong"),OZe=o("longformer"),VZe=o(" \u2014 "),XR=a("a"),XZe=o("LongformerConfig"),zZe=o(" (Longformer model)"),QZe=l(),jm=a("li"),Vne=a("strong"),WZe=o("longt5"),HZe=o(" \u2014 "),zR=a("a"),UZe=o("LongT5Config"),JZe=o(" (LongT5 model)"),YZe=l(),Dm=a("li"),Xne=a("strong"),KZe=o("luke"),ZZe=o(" \u2014 "),QR=a("a"),eeo=o("LukeConfig"),oeo=o(" (LUKE model)"),reo=l(),Gm=a("li"),zne=a("strong"),teo=o("lxmert"),aeo=o(" \u2014 "),WR=a("a"),neo=o("LxmertConfig"),seo=o(" (LXMERT model)"),leo=l(),Om=a("li"),Qne=a("strong"),ieo=o("m2m_100"),deo=o(" \u2014 "),HR=a("a"),ceo=o("M2M100Config"),feo=o(" (M2M100 model)"),meo=l(),Vm=a("li"),Wne=a("strong"),geo=o("marian"),heo=o(" \u2014 "),UR=a("a"),peo=o("MarianConfig"),_eo=o(" (Marian model)"),ueo=l(),Xm=a("li"),Hne=a("strong"),beo=o("maskformer"),veo=o(" \u2014 "),JR=a("a"),Feo=o("MaskFormerConfig"),Teo=o(" (MaskFormer model)"),Meo=l(),zm=a("li"),Une=a("strong"),Eeo=o("mbart"),Ceo=o(" \u2014 "),YR=a("a"),weo=o("MBartConfig"),Aeo=o(" (mBART model)"),Leo=l(),Qm=a("li"),Jne=a("strong"),yeo=o("mctct"),xeo=o(" \u2014 "),KR=a("a"),$eo=o("MCTCTConfig"),keo=o(" (M-CTC-T model)"),Seo=l(),Wm=a("li"),Yne=a("strong"),Reo=o("megatron-bert"),Peo=o(" \u2014 "),ZR=a("a"),Beo=o("MegatronBertConfig"),Neo=o(" (Megatron-BERT model)"),Ieo=l(),Hm=a("li"),Kne=a("strong"),qeo=o("mobilebert"),jeo=o(" \u2014 "),eP=a("a"),Deo=o("MobileBertConfig"),Geo=o(" (MobileBERT model)"),Oeo=l(),Um=a("li"),Zne=a("strong"),Veo=o("mobilevit"),Xeo=o(" \u2014 "),oP=a("a"),zeo=o("MobileViTConfig"),Qeo=o(" (MobileViT model)"),Weo=l(),Jm=a("li"),ese=a("strong"),Heo=o("mpnet"),Ueo=o(" \u2014 "),rP=a("a"),Jeo=o("MPNetConfig"),Yeo=o(" (MPNet model)"),Keo=l(),Ym=a("li"),ose=a("strong"),Zeo=o("mt5"),eoo=o(" \u2014 "),tP=a("a"),ooo=o("MT5Config"),roo=o(" (MT5 model)"),too=l(),Km=a("li"),rse=a("strong"),aoo=o("mvp"),noo=o(" \u2014 "),aP=a("a"),soo=o("MvpConfig"),loo=o(" (MVP model)"),ioo=l(),Zm=a("li"),tse=a("strong"),doo=o("nezha"),coo=o(" \u2014 "),nP=a("a"),foo=o("NezhaConfig"),moo=o(" (Nezha model)"),goo=l(),eg=a("li"),ase=a("strong"),hoo=o("nystromformer"),poo=o(" \u2014 "),sP=a("a"),_oo=o("NystromformerConfig"),uoo=o(" (Nystr\xF6mformer model)"),boo=l(),og=a("li"),nse=a("strong"),voo=o("openai-gpt"),Foo=o(" \u2014 "),lP=a("a"),Too=o("OpenAIGPTConfig"),Moo=o(" (OpenAI GPT model)"),Eoo=l(),rg=a("li"),sse=a("strong"),Coo=o("opt"),woo=o(" \u2014 "),iP=a("a"),Aoo=o("OPTConfig"),Loo=o(" (OPT model)"),yoo=l(),tg=a("li"),lse=a("strong"),xoo=o("pegasus"),$oo=o(" \u2014 "),dP=a("a"),koo=o("PegasusConfig"),Soo=o(" (Pegasus model)"),Roo=l(),ag=a("li"),ise=a("strong"),Poo=o("perceiver"),Boo=o(" \u2014 "),cP=a("a"),Noo=o("PerceiverConfig"),Ioo=o(" (Perceiver model)"),qoo=l(),ng=a("li"),dse=a("strong"),joo=o("plbart"),Doo=o(" \u2014 "),fP=a("a"),Goo=o("PLBartConfig"),Ooo=o(" (PLBart model)"),Voo=l(),sg=a("li"),cse=a("strong"),Xoo=o("poolformer"),zoo=o(" \u2014 "),mP=a("a"),Qoo=o("PoolFormerConfig"),Woo=o(" (PoolFormer model)"),Hoo=l(),lg=a("li"),fse=a("strong"),Uoo=o("prophetnet"),Joo=o(" \u2014 "),gP=a("a"),Yoo=o("ProphetNetConfig"),Koo=o(" (ProphetNet model)"),Zoo=l(),ig=a("li"),mse=a("strong"),ero=o("qdqbert"),oro=o(" \u2014 "),hP=a("a"),rro=o("QDQBertConfig"),tro=o(" (QDQBert model)"),aro=l(),dg=a("li"),gse=a("strong"),nro=o("rag"),sro=o(" \u2014 "),pP=a("a"),lro=o("RagConfig"),iro=o(" (RAG model)"),dro=l(),cg=a("li"),hse=a("strong"),cro=o("realm"),fro=o(" \u2014 "),_P=a("a"),mro=o("RealmConfig"),gro=o(" (REALM model)"),hro=l(),fg=a("li"),pse=a("strong"),pro=o("reformer"),_ro=o(" \u2014 "),uP=a("a"),uro=o("ReformerConfig"),bro=o(" (Reformer model)"),vro=l(),mg=a("li"),_se=a("strong"),Fro=o("regnet"),Tro=o(" \u2014 "),bP=a("a"),Mro=o("RegNetConfig"),Ero=o(" (RegNet model)"),Cro=l(),gg=a("li"),use=a("strong"),wro=o("rembert"),Aro=o(" \u2014 "),vP=a("a"),Lro=o("RemBertConfig"),yro=o(" (RemBERT model)"),xro=l(),hg=a("li"),bse=a("strong"),$ro=o("resnet"),kro=o(" \u2014 "),FP=a("a"),Sro=o("ResNetConfig"),Rro=o(" (ResNet model)"),Pro=l(),pg=a("li"),vse=a("strong"),Bro=o("retribert"),Nro=o(" \u2014 "),TP=a("a"),Iro=o("RetriBertConfig"),qro=o(" (RetriBERT model)"),jro=l(),_g=a("li"),Fse=a("strong"),Dro=o("roberta"),Gro=o(" \u2014 "),MP=a("a"),Oro=o("RobertaConfig"),Vro=o(" (RoBERTa model)"),Xro=l(),ug=a("li"),Tse=a("strong"),zro=o("roformer"),Qro=o(" \u2014 "),EP=a("a"),Wro=o("RoFormerConfig"),Hro=o(" (RoFormer model)"),Uro=l(),bg=a("li"),Mse=a("strong"),Jro=o("segformer"),Yro=o(" \u2014 "),CP=a("a"),Kro=o("SegformerConfig"),Zro=o(" (SegFormer model)"),eto=l(),vg=a("li"),Ese=a("strong"),oto=o("sew"),rto=o(" \u2014 "),wP=a("a"),tto=o("SEWConfig"),ato=o(" (SEW model)"),nto=l(),Fg=a("li"),Cse=a("strong"),sto=o("sew-d"),lto=o(" \u2014 "),AP=a("a"),ito=o("SEWDConfig"),dto=o(" (SEW-D model)"),cto=l(),Tg=a("li"),wse=a("strong"),fto=o("speech-encoder-decoder"),mto=o(" \u2014 "),LP=a("a"),gto=o("SpeechEncoderDecoderConfig"),hto=o(" (Speech Encoder decoder model)"),pto=l(),Mg=a("li"),Ase=a("strong"),_to=o("speech_to_text"),uto=o(" \u2014 "),yP=a("a"),bto=o("Speech2TextConfig"),vto=o(" (Speech2Text model)"),Fto=l(),Eg=a("li"),Lse=a("strong"),Tto=o("speech_to_text_2"),Mto=o(" \u2014 "),xP=a("a"),Eto=o("Speech2Text2Config"),Cto=o(" (Speech2Text2 model)"),wto=l(),Cg=a("li"),yse=a("strong"),Ato=o("splinter"),Lto=o(" \u2014 "),$P=a("a"),yto=o("SplinterConfig"),xto=o(" (Splinter model)"),$to=l(),wg=a("li"),xse=a("strong"),kto=o("squeezebert"),Sto=o(" \u2014 "),kP=a("a"),Rto=o("SqueezeBertConfig"),Pto=o(" (SqueezeBERT model)"),Bto=l(),Ag=a("li"),$se=a("strong"),Nto=o("swin"),Ito=o(" \u2014 "),SP=a("a"),qto=o("SwinConfig"),jto=o(" (Swin Transformer model)"),Dto=l(),Lg=a("li"),kse=a("strong"),Gto=o("t5"),Oto=o(" \u2014 "),RP=a("a"),Vto=o("T5Config"),Xto=o(" (T5 model)"),zto=l(),yg=a("li"),Sse=a("strong"),Qto=o("tapas"),Wto=o(" \u2014 "),PP=a("a"),Hto=o("TapasConfig"),Uto=o(" (TAPAS model)"),Jto=l(),xg=a("li"),Rse=a("strong"),Yto=o("trajectory_transformer"),Kto=o(" \u2014 "),BP=a("a"),Zto=o("TrajectoryTransformerConfig"),eao=o(" (Trajectory Transformer model)"),oao=l(),$g=a("li"),Pse=a("strong"),rao=o("transfo-xl"),tao=o(" \u2014 "),NP=a("a"),aao=o("TransfoXLConfig"),nao=o(" (Transformer-XL model)"),sao=l(),kg=a("li"),Bse=a("strong"),lao=o("trocr"),iao=o(" \u2014 "),IP=a("a"),dao=o("TrOCRConfig"),cao=o(" (TrOCR model)"),fao=l(),Sg=a("li"),Nse=a("strong"),mao=o("unispeech"),gao=o(" \u2014 "),qP=a("a"),hao=o("UniSpeechConfig"),pao=o(" (UniSpeech model)"),_ao=l(),Rg=a("li"),Ise=a("strong"),uao=o("unispeech-sat"),bao=o(" \u2014 "),jP=a("a"),vao=o("UniSpeechSatConfig"),Fao=o(" (UniSpeechSat model)"),Tao=l(),Pg=a("li"),qse=a("strong"),Mao=o("van"),Eao=o(" \u2014 "),DP=a("a"),Cao=o("VanConfig"),wao=o(" (VAN model)"),Aao=l(),Bg=a("li"),jse=a("strong"),Lao=o("vilt"),yao=o(" \u2014 "),GP=a("a"),xao=o("ViltConfig"),$ao=o(" (ViLT model)"),kao=l(),Ng=a("li"),Dse=a("strong"),Sao=o("vision-encoder-decoder"),Rao=o(" \u2014 "),OP=a("a"),Pao=o("VisionEncoderDecoderConfig"),Bao=o(" (Vision Encoder decoder model)"),Nao=l(),Ig=a("li"),Gse=a("strong"),Iao=o("vision-text-dual-encoder"),qao=o(" \u2014 "),VP=a("a"),jao=o("VisionTextDualEncoderConfig"),Dao=o(" (VisionTextDualEncoder model)"),Gao=l(),qg=a("li"),Ose=a("strong"),Oao=o("visual_bert"),Vao=o(" \u2014 "),XP=a("a"),Xao=o("VisualBertConfig"),zao=o(" (VisualBERT model)"),Qao=l(),jg=a("li"),Vse=a("strong"),Wao=o("vit"),Hao=o(" \u2014 "),zP=a("a"),Uao=o("ViTConfig"),Jao=o(" (ViT model)"),Yao=l(),Dg=a("li"),Xse=a("strong"),Kao=o("vit_mae"),Zao=o(" \u2014 "),QP=a("a"),eno=o("ViTMAEConfig"),ono=o(" (ViTMAE model)"),rno=l(),Gg=a("li"),zse=a("strong"),tno=o("wav2vec2"),ano=o(" \u2014 "),WP=a("a"),nno=o("Wav2Vec2Config"),sno=o(" (Wav2Vec2 model)"),lno=l(),Og=a("li"),Qse=a("strong"),ino=o("wav2vec2-conformer"),dno=o(" \u2014 "),HP=a("a"),cno=o("Wav2Vec2ConformerConfig"),fno=o(" (Wav2Vec2-Conformer model)"),mno=l(),Vg=a("li"),Wse=a("strong"),gno=o("wavlm"),hno=o(" \u2014 "),UP=a("a"),pno=o("WavLMConfig"),_no=o(" (WavLM model)"),uno=l(),Xg=a("li"),Hse=a("strong"),bno=o("xglm"),vno=o(" \u2014 "),JP=a("a"),Fno=o("XGLMConfig"),Tno=o(" (XGLM model)"),Mno=l(),zg=a("li"),Use=a("strong"),Eno=o("xlm"),Cno=o(" \u2014 "),YP=a("a"),wno=o("XLMConfig"),Ano=o(" (XLM model)"),Lno=l(),Qg=a("li"),Jse=a("strong"),yno=o("xlm-prophetnet"),xno=o(" \u2014 "),KP=a("a"),$no=o("XLMProphetNetConfig"),kno=o(" (XLM-ProphetNet model)"),Sno=l(),Wg=a("li"),Yse=a("strong"),Rno=o("xlm-roberta"),Pno=o(" \u2014 "),ZP=a("a"),Bno=o("XLMRobertaConfig"),Nno=o(" (XLM-RoBERTa model)"),Ino=l(),Hg=a("li"),Kse=a("strong"),qno=o("xlm-roberta-xl"),jno=o(" \u2014 "),eB=a("a"),Dno=o("XLMRobertaXLConfig"),Gno=o(" (XLM-RoBERTa-XL model)"),Ono=l(),Ug=a("li"),Zse=a("strong"),Vno=o("xlnet"),Xno=o(" \u2014 "),oB=a("a"),zno=o("XLNetConfig"),Qno=o(" (XLNet model)"),Wno=l(),Jg=a("li"),ele=a("strong"),Hno=o("yolos"),Uno=o(" \u2014 "),rB=a("a"),Jno=o("YolosConfig"),Yno=o(" (YOLOS model)"),Kno=l(),Yg=a("li"),ole=a("strong"),Zno=o("yoso"),eso=o(" \u2014 "),tB=a("a"),oso=o("YosoConfig"),rso=o(" (YOSO model)"),tso=l(),F(Kg.$$.fragment),aso=l(),Zg=a("div"),F(_L.$$.fragment),nso=l(),rle=a("p"),sso=o("Register a new configuration for this class."),wXe=l(),qi=a("h2"),eh=a("a"),tle=a("span"),F(uL.$$.fragment),lso=l(),ale=a("span"),iso=o("AutoTokenizer"),AXe=l(),Lo=a("div"),F(bL.$$.fragment),dso=l(),vL=a("p"),cso=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),aB=a("a"),fso=o("AutoTokenizer.from_pretrained()"),mso=o(" class method."),gso=l(),FL=a("p"),hso=o("This class cannot be instantiated directly using "),nle=a("code"),pso=o("__init__()"),_so=o(" (throws an error)."),uso=l(),yr=a("div"),F(TL.$$.fragment),bso=l(),sle=a("p"),vso=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Fso=l(),Pa=a("p"),Tso=o("The tokenizer class to instantiate is selected based on the "),lle=a("code"),Mso=o("model_type"),Eso=o(` property of the config object (either
passed as an argument or loaded from `),ile=a("code"),Cso=o("pretrained_model_name_or_path"),wso=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dle=a("code"),Aso=o("pretrained_model_name_or_path"),Lso=o(":"),yso=l(),k=a("ul"),jn=a("li"),cle=a("strong"),xso=o("albert"),$so=o(" \u2014 "),nB=a("a"),kso=o("AlbertTokenizer"),Sso=o(" or "),sB=a("a"),Rso=o("AlbertTokenizerFast"),Pso=o(" (ALBERT model)"),Bso=l(),Dn=a("li"),fle=a("strong"),Nso=o("bart"),Iso=o(" \u2014 "),lB=a("a"),qso=o("BartTokenizer"),jso=o(" or "),iB=a("a"),Dso=o("BartTokenizerFast"),Gso=o(" (BART model)"),Oso=l(),Gn=a("li"),mle=a("strong"),Vso=o("barthez"),Xso=o(" \u2014 "),dB=a("a"),zso=o("BarthezTokenizer"),Qso=o(" or "),cB=a("a"),Wso=o("BarthezTokenizerFast"),Hso=o(" (BARThez model)"),Uso=l(),oh=a("li"),gle=a("strong"),Jso=o("bartpho"),Yso=o(" \u2014 "),fB=a("a"),Kso=o("BartphoTokenizer"),Zso=o(" (BARTpho model)"),elo=l(),On=a("li"),hle=a("strong"),olo=o("bert"),rlo=o(" \u2014 "),mB=a("a"),tlo=o("BertTokenizer"),alo=o(" or "),gB=a("a"),nlo=o("BertTokenizerFast"),slo=o(" (BERT model)"),llo=l(),rh=a("li"),ple=a("strong"),ilo=o("bert-generation"),dlo=o(" \u2014 "),hB=a("a"),clo=o("BertGenerationTokenizer"),flo=o(" (Bert Generation model)"),mlo=l(),th=a("li"),_le=a("strong"),glo=o("bert-japanese"),hlo=o(" \u2014 "),pB=a("a"),plo=o("BertJapaneseTokenizer"),_lo=o(" (BertJapanese model)"),ulo=l(),ah=a("li"),ule=a("strong"),blo=o("bertweet"),vlo=o(" \u2014 "),_B=a("a"),Flo=o("BertweetTokenizer"),Tlo=o(" (BERTweet model)"),Mlo=l(),Vn=a("li"),ble=a("strong"),Elo=o("big_bird"),Clo=o(" \u2014 "),uB=a("a"),wlo=o("BigBirdTokenizer"),Alo=o(" or "),bB=a("a"),Llo=o("BigBirdTokenizerFast"),ylo=o(" (BigBird model)"),xlo=l(),Xn=a("li"),vle=a("strong"),$lo=o("bigbird_pegasus"),klo=o(" \u2014 "),vB=a("a"),Slo=o("PegasusTokenizer"),Rlo=o(" or "),FB=a("a"),Plo=o("PegasusTokenizerFast"),Blo=o(" (BigBird-Pegasus model)"),Nlo=l(),zn=a("li"),Fle=a("strong"),Ilo=o("blenderbot"),qlo=o(" \u2014 "),TB=a("a"),jlo=o("BlenderbotTokenizer"),Dlo=o(" or "),MB=a("a"),Glo=o("BlenderbotTokenizerFast"),Olo=o(" (Blenderbot model)"),Vlo=l(),nh=a("li"),Tle=a("strong"),Xlo=o("blenderbot-small"),zlo=o(" \u2014 "),EB=a("a"),Qlo=o("BlenderbotSmallTokenizer"),Wlo=o(" (BlenderbotSmall model)"),Hlo=l(),sh=a("li"),Mle=a("strong"),Ulo=o("bloom"),Jlo=o(" \u2014 "),CB=a("a"),Ylo=o("BloomTokenizerFast"),Klo=o(" (BLOOM model)"),Zlo=l(),lh=a("li"),Ele=a("strong"),eio=o("byt5"),oio=o(" \u2014 "),wB=a("a"),rio=o("ByT5Tokenizer"),tio=o(" (ByT5 model)"),aio=l(),Qn=a("li"),Cle=a("strong"),nio=o("camembert"),sio=o(" \u2014 "),AB=a("a"),lio=o("CamembertTokenizer"),iio=o(" or "),LB=a("a"),dio=o("CamembertTokenizerFast"),cio=o(" (CamemBERT model)"),fio=l(),ih=a("li"),wle=a("strong"),mio=o("canine"),gio=o(" \u2014 "),yB=a("a"),hio=o("CanineTokenizer"),pio=o(" (CANINE model)"),_io=l(),Wn=a("li"),Ale=a("strong"),uio=o("clip"),bio=o(" \u2014 "),xB=a("a"),vio=o("CLIPTokenizer"),Fio=o(" or "),$B=a("a"),Tio=o("CLIPTokenizerFast"),Mio=o(" (CLIP model)"),Eio=l(),Hn=a("li"),Lle=a("strong"),Cio=o("codegen"),wio=o(" \u2014 "),kB=a("a"),Aio=o("CodeGenTokenizer"),Lio=o(" or "),SB=a("a"),yio=o("CodeGenTokenizerFast"),xio=o(" (CodeGen model)"),$io=l(),Un=a("li"),yle=a("strong"),kio=o("convbert"),Sio=o(" \u2014 "),RB=a("a"),Rio=o("ConvBertTokenizer"),Pio=o(" or "),PB=a("a"),Bio=o("ConvBertTokenizerFast"),Nio=o(" (ConvBERT model)"),Iio=l(),Jn=a("li"),xle=a("strong"),qio=o("cpm"),jio=o(" \u2014 "),BB=a("a"),Dio=o("CpmTokenizer"),Gio=o(" or "),NB=a("a"),Oio=o("CpmTokenizerFast"),Vio=o(" (CPM model)"),Xio=l(),dh=a("li"),$le=a("strong"),zio=o("ctrl"),Qio=o(" \u2014 "),IB=a("a"),Wio=o("CTRLTokenizer"),Hio=o(" (CTRL model)"),Uio=l(),Yn=a("li"),kle=a("strong"),Jio=o("data2vec-text"),Yio=o(" \u2014 "),qB=a("a"),Kio=o("RobertaTokenizer"),Zio=o(" or "),jB=a("a"),edo=o("RobertaTokenizerFast"),odo=o(" (Data2VecText model)"),rdo=l(),Kn=a("li"),Sle=a("strong"),tdo=o("deberta"),ado=o(" \u2014 "),DB=a("a"),ndo=o("DebertaTokenizer"),sdo=o(" or "),GB=a("a"),ldo=o("DebertaTokenizerFast"),ido=o(" (DeBERTa model)"),ddo=l(),Zn=a("li"),Rle=a("strong"),cdo=o("deberta-v2"),fdo=o(" \u2014 "),OB=a("a"),mdo=o("DebertaV2Tokenizer"),gdo=o(" or "),VB=a("a"),hdo=o("DebertaV2TokenizerFast"),pdo=o(" (DeBERTa-v2 model)"),_do=l(),es=a("li"),Ple=a("strong"),udo=o("distilbert"),bdo=o(" \u2014 "),XB=a("a"),vdo=o("DistilBertTokenizer"),Fdo=o(" or "),zB=a("a"),Tdo=o("DistilBertTokenizerFast"),Mdo=o(" (DistilBERT model)"),Edo=l(),os=a("li"),Ble=a("strong"),Cdo=o("dpr"),wdo=o(" \u2014 "),QB=a("a"),Ado=o("DPRQuestionEncoderTokenizer"),Ldo=o(" or "),WB=a("a"),ydo=o("DPRQuestionEncoderTokenizerFast"),xdo=o(" (DPR model)"),$do=l(),rs=a("li"),Nle=a("strong"),kdo=o("electra"),Sdo=o(" \u2014 "),HB=a("a"),Rdo=o("ElectraTokenizer"),Pdo=o(" or "),UB=a("a"),Bdo=o("ElectraTokenizerFast"),Ndo=o(" (ELECTRA model)"),Ido=l(),ch=a("li"),Ile=a("strong"),qdo=o("flaubert"),jdo=o(" \u2014 "),JB=a("a"),Ddo=o("FlaubertTokenizer"),Gdo=o(" (FlauBERT model)"),Odo=l(),ts=a("li"),qle=a("strong"),Vdo=o("fnet"),Xdo=o(" \u2014 "),YB=a("a"),zdo=o("FNetTokenizer"),Qdo=o(" or "),KB=a("a"),Wdo=o("FNetTokenizerFast"),Hdo=o(" (FNet model)"),Udo=l(),fh=a("li"),jle=a("strong"),Jdo=o("fsmt"),Ydo=o(" \u2014 "),ZB=a("a"),Kdo=o("FSMTTokenizer"),Zdo=o(" (FairSeq Machine-Translation model)"),eco=l(),as=a("li"),Dle=a("strong"),oco=o("funnel"),rco=o(" \u2014 "),eN=a("a"),tco=o("FunnelTokenizer"),aco=o(" or "),oN=a("a"),nco=o("FunnelTokenizerFast"),sco=o(" (Funnel Transformer model)"),lco=l(),ns=a("li"),Gle=a("strong"),ico=o("gpt2"),dco=o(" \u2014 "),rN=a("a"),cco=o("GPT2Tokenizer"),fco=o(" or "),tN=a("a"),mco=o("GPT2TokenizerFast"),gco=o(" (OpenAI GPT-2 model)"),hco=l(),ss=a("li"),Ole=a("strong"),pco=o("gpt_neo"),_co=o(" \u2014 "),aN=a("a"),uco=o("GPT2Tokenizer"),bco=o(" or "),nN=a("a"),vco=o("GPT2TokenizerFast"),Fco=o(" (GPT Neo model)"),Tco=l(),mh=a("li"),Vle=a("strong"),Mco=o("gpt_neox"),Eco=o(" \u2014 "),sN=a("a"),Cco=o("GPTNeoXTokenizerFast"),wco=o(" (GPT NeoX model)"),Aco=l(),ls=a("li"),Xle=a("strong"),Lco=o("gptj"),yco=o(" \u2014 "),lN=a("a"),xco=o("GPT2Tokenizer"),$co=o(" or "),iN=a("a"),kco=o("GPT2TokenizerFast"),Sco=o(" (GPT-J model)"),Rco=l(),is=a("li"),zle=a("strong"),Pco=o("groupvit"),Bco=o(" \u2014 "),dN=a("a"),Nco=o("CLIPTokenizer"),Ico=o(" or "),cN=a("a"),qco=o("CLIPTokenizerFast"),jco=o(" (GroupViT model)"),Dco=l(),ds=a("li"),Qle=a("strong"),Gco=o("herbert"),Oco=o(" \u2014 "),fN=a("a"),Vco=o("HerbertTokenizer"),Xco=o(" or "),mN=a("a"),zco=o("HerbertTokenizerFast"),Qco=o(" (HerBERT model)"),Wco=l(),gh=a("li"),Wle=a("strong"),Hco=o("hubert"),Uco=o(" \u2014 "),gN=a("a"),Jco=o("Wav2Vec2CTCTokenizer"),Yco=o(" (Hubert model)"),Kco=l(),cs=a("li"),Hle=a("strong"),Zco=o("ibert"),efo=o(" \u2014 "),hN=a("a"),ofo=o("RobertaTokenizer"),rfo=o(" or "),pN=a("a"),tfo=o("RobertaTokenizerFast"),afo=o(" (I-BERT model)"),nfo=l(),fs=a("li"),Ule=a("strong"),sfo=o("layoutlm"),lfo=o(" \u2014 "),_N=a("a"),ifo=o("LayoutLMTokenizer"),dfo=o(" or "),uN=a("a"),cfo=o("LayoutLMTokenizerFast"),ffo=o(" (LayoutLM model)"),mfo=l(),ms=a("li"),Jle=a("strong"),gfo=o("layoutlmv2"),hfo=o(" \u2014 "),bN=a("a"),pfo=o("LayoutLMv2Tokenizer"),_fo=o(" or "),vN=a("a"),ufo=o("LayoutLMv2TokenizerFast"),bfo=o(" (LayoutLMv2 model)"),vfo=l(),gs=a("li"),Yle=a("strong"),Ffo=o("layoutlmv3"),Tfo=o(" \u2014 "),FN=a("a"),Mfo=o("LayoutLMv3Tokenizer"),Efo=o(" or "),TN=a("a"),Cfo=o("LayoutLMv3TokenizerFast"),wfo=o(" (LayoutLMv3 model)"),Afo=l(),hs=a("li"),Kle=a("strong"),Lfo=o("layoutxlm"),yfo=o(" \u2014 "),MN=a("a"),xfo=o("LayoutXLMTokenizer"),$fo=o(" or "),EN=a("a"),kfo=o("LayoutXLMTokenizerFast"),Sfo=o(" (LayoutXLM model)"),Rfo=l(),ps=a("li"),Zle=a("strong"),Pfo=o("led"),Bfo=o(" \u2014 "),CN=a("a"),Nfo=o("LEDTokenizer"),Ifo=o(" or "),wN=a("a"),qfo=o("LEDTokenizerFast"),jfo=o(" (LED model)"),Dfo=l(),_s=a("li"),eie=a("strong"),Gfo=o("longformer"),Ofo=o(" \u2014 "),AN=a("a"),Vfo=o("LongformerTokenizer"),Xfo=o(" or "),LN=a("a"),zfo=o("LongformerTokenizerFast"),Qfo=o(" (Longformer model)"),Wfo=l(),us=a("li"),oie=a("strong"),Hfo=o("longt5"),Ufo=o(" \u2014 "),yN=a("a"),Jfo=o("T5Tokenizer"),Yfo=o(" or "),xN=a("a"),Kfo=o("T5TokenizerFast"),Zfo=o(" (LongT5 model)"),emo=l(),hh=a("li"),rie=a("strong"),omo=o("luke"),rmo=o(" \u2014 "),$N=a("a"),tmo=o("LukeTokenizer"),amo=o(" (LUKE model)"),nmo=l(),bs=a("li"),tie=a("strong"),smo=o("lxmert"),lmo=o(" \u2014 "),kN=a("a"),imo=o("LxmertTokenizer"),dmo=o(" or "),SN=a("a"),cmo=o("LxmertTokenizerFast"),fmo=o(" (LXMERT model)"),mmo=l(),ph=a("li"),aie=a("strong"),gmo=o("m2m_100"),hmo=o(" \u2014 "),RN=a("a"),pmo=o("M2M100Tokenizer"),_mo=o(" (M2M100 model)"),umo=l(),_h=a("li"),nie=a("strong"),bmo=o("marian"),vmo=o(" \u2014 "),PN=a("a"),Fmo=o("MarianTokenizer"),Tmo=o(" (Marian model)"),Mmo=l(),vs=a("li"),sie=a("strong"),Emo=o("mbart"),Cmo=o(" \u2014 "),BN=a("a"),wmo=o("MBartTokenizer"),Amo=o(" or "),NN=a("a"),Lmo=o("MBartTokenizerFast"),ymo=o(" (mBART model)"),xmo=l(),Fs=a("li"),lie=a("strong"),$mo=o("mbart50"),kmo=o(" \u2014 "),IN=a("a"),Smo=o("MBart50Tokenizer"),Rmo=o(" or "),qN=a("a"),Pmo=o("MBart50TokenizerFast"),Bmo=o(" (mBART-50 model)"),Nmo=l(),Ts=a("li"),iie=a("strong"),Imo=o("megatron-bert"),qmo=o(" \u2014 "),jN=a("a"),jmo=o("BertTokenizer"),Dmo=o(" or "),DN=a("a"),Gmo=o("BertTokenizerFast"),Omo=o(" (Megatron-BERT model)"),Vmo=l(),uh=a("li"),die=a("strong"),Xmo=o("mluke"),zmo=o(" \u2014 "),GN=a("a"),Qmo=o("MLukeTokenizer"),Wmo=o(" (mLUKE model)"),Hmo=l(),Ms=a("li"),cie=a("strong"),Umo=o("mobilebert"),Jmo=o(" \u2014 "),ON=a("a"),Ymo=o("MobileBertTokenizer"),Kmo=o(" or "),VN=a("a"),Zmo=o("MobileBertTokenizerFast"),ego=o(" (MobileBERT model)"),ogo=l(),Es=a("li"),fie=a("strong"),rgo=o("mpnet"),tgo=o(" \u2014 "),XN=a("a"),ago=o("MPNetTokenizer"),ngo=o(" or "),zN=a("a"),sgo=o("MPNetTokenizerFast"),lgo=o(" (MPNet model)"),igo=l(),Cs=a("li"),mie=a("strong"),dgo=o("mt5"),cgo=o(" \u2014 "),QN=a("a"),fgo=o("MT5Tokenizer"),mgo=o(" or "),WN=a("a"),ggo=o("MT5TokenizerFast"),hgo=o(" (MT5 model)"),pgo=l(),ws=a("li"),gie=a("strong"),_go=o("mvp"),ugo=o(" \u2014 "),HN=a("a"),bgo=o("MvpTokenizer"),vgo=o(" or "),UN=a("a"),Fgo=o("MvpTokenizerFast"),Tgo=o(" (MVP model)"),Mgo=l(),As=a("li"),hie=a("strong"),Ego=o("nezha"),Cgo=o(" \u2014 "),JN=a("a"),wgo=o("BertTokenizer"),Ago=o(" or "),YN=a("a"),Lgo=o("BertTokenizerFast"),ygo=o(" (Nezha model)"),xgo=l(),Ls=a("li"),pie=a("strong"),$go=o("nllb"),kgo=o(" \u2014 "),KN=a("a"),Sgo=o("NllbTokenizer"),Rgo=o(" or "),ZN=a("a"),Pgo=o("NllbTokenizerFast"),Bgo=o(" (NLLB model)"),Ngo=l(),ys=a("li"),_ie=a("strong"),Igo=o("nystromformer"),qgo=o(" \u2014 "),eI=a("a"),jgo=o("AlbertTokenizer"),Dgo=o(" or "),oI=a("a"),Ggo=o("AlbertTokenizerFast"),Ogo=o(" (Nystr\xF6mformer model)"),Vgo=l(),xs=a("li"),uie=a("strong"),Xgo=o("openai-gpt"),zgo=o(" \u2014 "),rI=a("a"),Qgo=o("OpenAIGPTTokenizer"),Wgo=o(" or "),tI=a("a"),Hgo=o("OpenAIGPTTokenizerFast"),Ugo=o(" (OpenAI GPT model)"),Jgo=l(),bh=a("li"),bie=a("strong"),Ygo=o("opt"),Kgo=o(" \u2014 "),aI=a("a"),Zgo=o("GPT2Tokenizer"),eho=o(" (OPT model)"),oho=l(),$s=a("li"),vie=a("strong"),rho=o("pegasus"),tho=o(" \u2014 "),nI=a("a"),aho=o("PegasusTokenizer"),nho=o(" or "),sI=a("a"),sho=o("PegasusTokenizerFast"),lho=o(" (Pegasus model)"),iho=l(),vh=a("li"),Fie=a("strong"),dho=o("perceiver"),cho=o(" \u2014 "),lI=a("a"),fho=o("PerceiverTokenizer"),mho=o(" (Perceiver model)"),gho=l(),Fh=a("li"),Tie=a("strong"),hho=o("phobert"),pho=o(" \u2014 "),iI=a("a"),_ho=o("PhobertTokenizer"),uho=o(" (PhoBERT model)"),bho=l(),Th=a("li"),Mie=a("strong"),vho=o("plbart"),Fho=o(" \u2014 "),dI=a("a"),Tho=o("PLBartTokenizer"),Mho=o(" (PLBart model)"),Eho=l(),Mh=a("li"),Eie=a("strong"),Cho=o("prophetnet"),who=o(" \u2014 "),cI=a("a"),Aho=o("ProphetNetTokenizer"),Lho=o(" (ProphetNet model)"),yho=l(),ks=a("li"),Cie=a("strong"),xho=o("qdqbert"),$ho=o(" \u2014 "),fI=a("a"),kho=o("BertTokenizer"),Sho=o(" or "),mI=a("a"),Rho=o("BertTokenizerFast"),Pho=o(" (QDQBert model)"),Bho=l(),Eh=a("li"),wie=a("strong"),Nho=o("rag"),Iho=o(" \u2014 "),gI=a("a"),qho=o("RagTokenizer"),jho=o(" (RAG model)"),Dho=l(),Ss=a("li"),Aie=a("strong"),Gho=o("realm"),Oho=o(" \u2014 "),hI=a("a"),Vho=o("RealmTokenizer"),Xho=o(" or "),pI=a("a"),zho=o("RealmTokenizerFast"),Qho=o(" (REALM model)"),Who=l(),Rs=a("li"),Lie=a("strong"),Hho=o("reformer"),Uho=o(" \u2014 "),_I=a("a"),Jho=o("ReformerTokenizer"),Yho=o(" or "),uI=a("a"),Kho=o("ReformerTokenizerFast"),Zho=o(" (Reformer model)"),epo=l(),Ps=a("li"),yie=a("strong"),opo=o("rembert"),rpo=o(" \u2014 "),bI=a("a"),tpo=o("RemBertTokenizer"),apo=o(" or "),vI=a("a"),npo=o("RemBertTokenizerFast"),spo=o(" (RemBERT model)"),lpo=l(),Bs=a("li"),xie=a("strong"),ipo=o("retribert"),dpo=o(" \u2014 "),FI=a("a"),cpo=o("RetriBertTokenizer"),fpo=o(" or "),TI=a("a"),mpo=o("RetriBertTokenizerFast"),gpo=o(" (RetriBERT model)"),hpo=l(),Ns=a("li"),$ie=a("strong"),ppo=o("roberta"),_po=o(" \u2014 "),MI=a("a"),upo=o("RobertaTokenizer"),bpo=o(" or "),EI=a("a"),vpo=o("RobertaTokenizerFast"),Fpo=o(" (RoBERTa model)"),Tpo=l(),Is=a("li"),kie=a("strong"),Mpo=o("roformer"),Epo=o(" \u2014 "),CI=a("a"),Cpo=o("RoFormerTokenizer"),wpo=o(" or "),wI=a("a"),Apo=o("RoFormerTokenizerFast"),Lpo=o(" (RoFormer model)"),ypo=l(),Ch=a("li"),Sie=a("strong"),xpo=o("speech_to_text"),$po=o(" \u2014 "),AI=a("a"),kpo=o("Speech2TextTokenizer"),Spo=o(" (Speech2Text model)"),Rpo=l(),wh=a("li"),Rie=a("strong"),Ppo=o("speech_to_text_2"),Bpo=o(" \u2014 "),LI=a("a"),Npo=o("Speech2Text2Tokenizer"),Ipo=o(" (Speech2Text2 model)"),qpo=l(),qs=a("li"),Pie=a("strong"),jpo=o("splinter"),Dpo=o(" \u2014 "),yI=a("a"),Gpo=o("SplinterTokenizer"),Opo=o(" or "),xI=a("a"),Vpo=o("SplinterTokenizerFast"),Xpo=o(" (Splinter model)"),zpo=l(),js=a("li"),Bie=a("strong"),Qpo=o("squeezebert"),Wpo=o(" \u2014 "),$I=a("a"),Hpo=o("SqueezeBertTokenizer"),Upo=o(" or "),kI=a("a"),Jpo=o("SqueezeBertTokenizerFast"),Ypo=o(" (SqueezeBERT model)"),Kpo=l(),Ds=a("li"),Nie=a("strong"),Zpo=o("t5"),e_o=o(" \u2014 "),SI=a("a"),o_o=o("T5Tokenizer"),r_o=o(" or "),RI=a("a"),t_o=o("T5TokenizerFast"),a_o=o(" (T5 model)"),n_o=l(),Ah=a("li"),Iie=a("strong"),s_o=o("tapas"),l_o=o(" \u2014 "),PI=a("a"),i_o=o("TapasTokenizer"),d_o=o(" (TAPAS model)"),c_o=l(),Lh=a("li"),qie=a("strong"),f_o=o("tapex"),m_o=o(" \u2014 "),BI=a("a"),g_o=o("TapexTokenizer"),h_o=o(" (TAPEX model)"),p_o=l(),yh=a("li"),jie=a("strong"),__o=o("transfo-xl"),u_o=o(" \u2014 "),NI=a("a"),b_o=o("TransfoXLTokenizer"),v_o=o(" (Transformer-XL model)"),F_o=l(),Gs=a("li"),Die=a("strong"),T_o=o("vilt"),M_o=o(" \u2014 "),II=a("a"),E_o=o("BertTokenizer"),C_o=o(" or "),qI=a("a"),w_o=o("BertTokenizerFast"),A_o=o(" (ViLT model)"),L_o=l(),Os=a("li"),Gie=a("strong"),y_o=o("visual_bert"),x_o=o(" \u2014 "),jI=a("a"),$_o=o("BertTokenizer"),k_o=o(" or "),DI=a("a"),S_o=o("BertTokenizerFast"),R_o=o(" (VisualBERT model)"),P_o=l(),xh=a("li"),Oie=a("strong"),B_o=o("wav2vec2"),N_o=o(" \u2014 "),GI=a("a"),I_o=o("Wav2Vec2CTCTokenizer"),q_o=o(" (Wav2Vec2 model)"),j_o=l(),$h=a("li"),Vie=a("strong"),D_o=o("wav2vec2-conformer"),G_o=o(" \u2014 "),OI=a("a"),O_o=o("Wav2Vec2CTCTokenizer"),V_o=o(" (Wav2Vec2-Conformer model)"),X_o=l(),kh=a("li"),Xie=a("strong"),z_o=o("wav2vec2_phoneme"),Q_o=o(" \u2014 "),VI=a("a"),W_o=o("Wav2Vec2PhonemeCTCTokenizer"),H_o=o(" (Wav2Vec2Phoneme model)"),U_o=l(),Vs=a("li"),zie=a("strong"),J_o=o("xglm"),Y_o=o(" \u2014 "),XI=a("a"),K_o=o("XGLMTokenizer"),Z_o=o(" or "),zI=a("a"),euo=o("XGLMTokenizerFast"),ouo=o(" (XGLM model)"),ruo=l(),Sh=a("li"),Qie=a("strong"),tuo=o("xlm"),auo=o(" \u2014 "),QI=a("a"),nuo=o("XLMTokenizer"),suo=o(" (XLM model)"),luo=l(),Rh=a("li"),Wie=a("strong"),iuo=o("xlm-prophetnet"),duo=o(" \u2014 "),WI=a("a"),cuo=o("XLMProphetNetTokenizer"),fuo=o(" (XLM-ProphetNet model)"),muo=l(),Xs=a("li"),Hie=a("strong"),guo=o("xlm-roberta"),huo=o(" \u2014 "),HI=a("a"),puo=o("XLMRobertaTokenizer"),_uo=o(" or "),UI=a("a"),uuo=o("XLMRobertaTokenizerFast"),buo=o(" (XLM-RoBERTa model)"),vuo=l(),zs=a("li"),Uie=a("strong"),Fuo=o("xlm-roberta-xl"),Tuo=o(" \u2014 "),JI=a("a"),Muo=o("RobertaTokenizer"),Euo=o(" or "),YI=a("a"),Cuo=o("RobertaTokenizerFast"),wuo=o(" (XLM-RoBERTa-XL model)"),Auo=l(),Qs=a("li"),Jie=a("strong"),Luo=o("xlnet"),yuo=o(" \u2014 "),KI=a("a"),xuo=o("XLNetTokenizer"),$uo=o(" or "),ZI=a("a"),kuo=o("XLNetTokenizerFast"),Suo=o(" (XLNet model)"),Ruo=l(),Ws=a("li"),Yie=a("strong"),Puo=o("yoso"),Buo=o(" \u2014 "),eq=a("a"),Nuo=o("AlbertTokenizer"),Iuo=o(" or "),oq=a("a"),quo=o("AlbertTokenizerFast"),juo=o(" (YOSO model)"),Duo=l(),F(Ph.$$.fragment),Guo=l(),Bh=a("div"),F(ML.$$.fragment),Ouo=l(),Kie=a("p"),Vuo=o("Register a new tokenizer in this mapping."),LXe=l(),ji=a("h2"),Nh=a("a"),Zie=a("span"),F(EL.$$.fragment),Xuo=l(),ede=a("span"),zuo=o("AutoFeatureExtractor"),yXe=l(),yo=a("div"),F(CL.$$.fragment),Quo=l(),wL=a("p"),Wuo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),rq=a("a"),Huo=o("AutoFeatureExtractor.from_pretrained()"),Uuo=o(" class method."),Juo=l(),AL=a("p"),Yuo=o("This class cannot be instantiated directly using "),ode=a("code"),Kuo=o("__init__()"),Zuo=o(" (throws an error)."),e2o=l(),Ue=a("div"),F(LL.$$.fragment),o2o=l(),rde=a("p"),r2o=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),t2o=l(),Ba=a("p"),a2o=o("The feature extractor class to instantiate is selected based on the "),tde=a("code"),n2o=o("model_type"),s2o=o(` property of the config object
(either passed as an argument or loaded from `),ade=a("code"),l2o=o("pretrained_model_name_or_path"),i2o=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),nde=a("code"),d2o=o("pretrained_model_name_or_path"),c2o=o(":"),f2o=l(),Y=a("ul"),Ih=a("li"),sde=a("strong"),m2o=o("beit"),g2o=o(" \u2014 "),tq=a("a"),h2o=o("BeitFeatureExtractor"),p2o=o(" (BEiT model)"),_2o=l(),qh=a("li"),lde=a("strong"),u2o=o("clip"),b2o=o(" \u2014 "),aq=a("a"),v2o=o("CLIPFeatureExtractor"),F2o=o(" (CLIP model)"),T2o=l(),jh=a("li"),ide=a("strong"),M2o=o("convnext"),E2o=o(" \u2014 "),nq=a("a"),C2o=o("ConvNextFeatureExtractor"),w2o=o(" (ConvNeXT model)"),A2o=l(),Dh=a("li"),dde=a("strong"),L2o=o("cvt"),y2o=o(" \u2014 "),sq=a("a"),x2o=o("ConvNextFeatureExtractor"),$2o=o(" (CvT model)"),k2o=l(),Gh=a("li"),cde=a("strong"),S2o=o("data2vec-audio"),R2o=o(" \u2014 "),lq=a("a"),P2o=o("Wav2Vec2FeatureExtractor"),B2o=o(" (Data2VecAudio model)"),N2o=l(),Oh=a("li"),fde=a("strong"),I2o=o("data2vec-vision"),q2o=o(" \u2014 "),iq=a("a"),j2o=o("BeitFeatureExtractor"),D2o=o(" (Data2VecVision model)"),G2o=l(),Vh=a("li"),mde=a("strong"),O2o=o("deit"),V2o=o(" \u2014 "),dq=a("a"),X2o=o("DeiTFeatureExtractor"),z2o=o(" (DeiT model)"),Q2o=l(),Xh=a("li"),gde=a("strong"),W2o=o("detr"),H2o=o(" \u2014 "),cq=a("a"),U2o=o("DetrFeatureExtractor"),J2o=o(" (DETR model)"),Y2o=l(),zh=a("li"),hde=a("strong"),K2o=o("dpt"),Z2o=o(" \u2014 "),fq=a("a"),e1o=o("DPTFeatureExtractor"),o1o=o(" (DPT model)"),r1o=l(),Qh=a("li"),pde=a("strong"),t1o=o("flava"),a1o=o(" \u2014 "),mq=a("a"),n1o=o("FlavaFeatureExtractor"),s1o=o(" (FLAVA model)"),l1o=l(),Wh=a("li"),_de=a("strong"),i1o=o("glpn"),d1o=o(" \u2014 "),gq=a("a"),c1o=o("GLPNFeatureExtractor"),f1o=o(" (GLPN model)"),m1o=l(),Hh=a("li"),ude=a("strong"),g1o=o("groupvit"),h1o=o(" \u2014 "),hq=a("a"),p1o=o("CLIPFeatureExtractor"),_1o=o(" (GroupViT model)"),u1o=l(),Uh=a("li"),bde=a("strong"),b1o=o("hubert"),v1o=o(" \u2014 "),pq=a("a"),F1o=o("Wav2Vec2FeatureExtractor"),T1o=o(" (Hubert model)"),M1o=l(),Jh=a("li"),vde=a("strong"),E1o=o("imagegpt"),C1o=o(" \u2014 "),_q=a("a"),w1o=o("ImageGPTFeatureExtractor"),A1o=o(" (ImageGPT model)"),L1o=l(),Yh=a("li"),Fde=a("strong"),y1o=o("layoutlmv2"),x1o=o(" \u2014 "),uq=a("a"),$1o=o("LayoutLMv2FeatureExtractor"),k1o=o(" (LayoutLMv2 model)"),S1o=l(),Kh=a("li"),Tde=a("strong"),R1o=o("layoutlmv3"),P1o=o(" \u2014 "),bq=a("a"),B1o=o("LayoutLMv3FeatureExtractor"),N1o=o(" (LayoutLMv3 model)"),I1o=l(),Zh=a("li"),Mde=a("strong"),q1o=o("levit"),j1o=o(" \u2014 "),vq=a("a"),D1o=o("LevitFeatureExtractor"),G1o=o(" (LeViT model)"),O1o=l(),ep=a("li"),Ede=a("strong"),V1o=o("maskformer"),X1o=o(" \u2014 "),Fq=a("a"),z1o=o("MaskFormerFeatureExtractor"),Q1o=o(" (MaskFormer model)"),W1o=l(),op=a("li"),Cde=a("strong"),H1o=o("mctct"),U1o=o(" \u2014 "),Tq=a("a"),J1o=o("MCTCTFeatureExtractor"),Y1o=o(" (M-CTC-T model)"),K1o=l(),rp=a("li"),wde=a("strong"),Z1o=o("mobilevit"),ebo=o(" \u2014 "),Mq=a("a"),obo=o("MobileViTFeatureExtractor"),rbo=o(" (MobileViT model)"),tbo=l(),tp=a("li"),Ade=a("strong"),abo=o("perceiver"),nbo=o(" \u2014 "),Eq=a("a"),sbo=o("PerceiverFeatureExtractor"),lbo=o(" (Perceiver model)"),ibo=l(),ap=a("li"),Lde=a("strong"),dbo=o("poolformer"),cbo=o(" \u2014 "),Cq=a("a"),fbo=o("PoolFormerFeatureExtractor"),mbo=o(" (PoolFormer model)"),gbo=l(),np=a("li"),yde=a("strong"),hbo=o("regnet"),pbo=o(" \u2014 "),wq=a("a"),_bo=o("ConvNextFeatureExtractor"),ubo=o(" (RegNet model)"),bbo=l(),sp=a("li"),xde=a("strong"),vbo=o("resnet"),Fbo=o(" \u2014 "),Aq=a("a"),Tbo=o("ConvNextFeatureExtractor"),Mbo=o(" (ResNet model)"),Ebo=l(),lp=a("li"),$de=a("strong"),Cbo=o("segformer"),wbo=o(" \u2014 "),Lq=a("a"),Abo=o("SegformerFeatureExtractor"),Lbo=o(" (SegFormer model)"),ybo=l(),ip=a("li"),kde=a("strong"),xbo=o("speech_to_text"),$bo=o(" \u2014 "),yq=a("a"),kbo=o("Speech2TextFeatureExtractor"),Sbo=o(" (Speech2Text model)"),Rbo=l(),dp=a("li"),Sde=a("strong"),Pbo=o("swin"),Bbo=o(" \u2014 "),xq=a("a"),Nbo=o("ViTFeatureExtractor"),Ibo=o(" (Swin Transformer model)"),qbo=l(),cp=a("li"),Rde=a("strong"),jbo=o("van"),Dbo=o(" \u2014 "),$q=a("a"),Gbo=o("ConvNextFeatureExtractor"),Obo=o(" (VAN model)"),Vbo=l(),fp=a("li"),Pde=a("strong"),Xbo=o("vilt"),zbo=o(" \u2014 "),kq=a("a"),Qbo=o("ViltFeatureExtractor"),Wbo=o(" (ViLT model)"),Hbo=l(),mp=a("li"),Bde=a("strong"),Ubo=o("vit"),Jbo=o(" \u2014 "),Sq=a("a"),Ybo=o("ViTFeatureExtractor"),Kbo=o(" (ViT model)"),Zbo=l(),gp=a("li"),Nde=a("strong"),evo=o("vit_mae"),ovo=o(" \u2014 "),Rq=a("a"),rvo=o("ViTFeatureExtractor"),tvo=o(" (ViTMAE model)"),avo=l(),hp=a("li"),Ide=a("strong"),nvo=o("wav2vec2"),svo=o(" \u2014 "),Pq=a("a"),lvo=o("Wav2Vec2FeatureExtractor"),ivo=o(" (Wav2Vec2 model)"),dvo=l(),pp=a("li"),qde=a("strong"),cvo=o("wav2vec2-conformer"),fvo=o(" \u2014 "),Bq=a("a"),mvo=o("Wav2Vec2FeatureExtractor"),gvo=o(" (Wav2Vec2-Conformer model)"),hvo=l(),_p=a("li"),jde=a("strong"),pvo=o("yolos"),_vo=o(" \u2014 "),Nq=a("a"),uvo=o("YolosFeatureExtractor"),bvo=o(" (YOLOS model)"),vvo=l(),F(up.$$.fragment),Fvo=l(),F(bp.$$.fragment),Tvo=l(),vp=a("div"),F(yL.$$.fragment),Mvo=l(),Dde=a("p"),Evo=o("Register a new feature extractor for this class."),xXe=l(),Di=a("h2"),Fp=a("a"),Gde=a("span"),F(xL.$$.fragment),Cvo=l(),Ode=a("span"),wvo=o("AutoProcessor"),$Xe=l(),xo=a("div"),F($L.$$.fragment),Avo=l(),kL=a("p"),Lvo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),Iq=a("a"),yvo=o("AutoProcessor.from_pretrained()"),xvo=o(" class method."),$vo=l(),SL=a("p"),kvo=o("This class cannot be instantiated directly using "),Vde=a("code"),Svo=o("__init__()"),Rvo=o(" (throws an error)."),Pvo=l(),Je=a("div"),F(RL.$$.fragment),Bvo=l(),Xde=a("p"),Nvo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Ivo=l(),Gi=a("p"),qvo=o("The processor class to instantiate is selected based on the "),zde=a("code"),jvo=o("model_type"),Dvo=o(` property of the config object (either
passed as an argument or loaded from `),Qde=a("code"),Gvo=o("pretrained_model_name_or_path"),Ovo=o(" if possible):"),Vvo=l(),pe=a("ul"),Tp=a("li"),Wde=a("strong"),Xvo=o("clip"),zvo=o(" \u2014 "),qq=a("a"),Qvo=o("CLIPProcessor"),Wvo=o(" (CLIP model)"),Hvo=l(),Mp=a("li"),Hde=a("strong"),Uvo=o("flava"),Jvo=o(" \u2014 "),Ude=a("code"),Yvo=o("FLAVAProcessor"),Kvo=o(" (FLAVA model)"),Zvo=l(),Ep=a("li"),Jde=a("strong"),e0o=o("groupvit"),o0o=o(" \u2014 "),jq=a("a"),r0o=o("CLIPProcessor"),t0o=o(" (GroupViT model)"),a0o=l(),Cp=a("li"),Yde=a("strong"),n0o=o("layoutlmv2"),s0o=o(" \u2014 "),Dq=a("a"),l0o=o("LayoutLMv2Processor"),i0o=o(" (LayoutLMv2 model)"),d0o=l(),wp=a("li"),Kde=a("strong"),c0o=o("layoutlmv3"),f0o=o(" \u2014 "),Gq=a("a"),m0o=o("LayoutLMv3Processor"),g0o=o(" (LayoutLMv3 model)"),h0o=l(),Ap=a("li"),Zde=a("strong"),p0o=o("layoutxlm"),_0o=o(" \u2014 "),Oq=a("a"),u0o=o("LayoutXLMProcessor"),b0o=o(" (LayoutXLM model)"),v0o=l(),Lp=a("li"),ece=a("strong"),F0o=o("sew"),T0o=o(" \u2014 "),Vq=a("a"),M0o=o("Wav2Vec2Processor"),E0o=o(" (SEW model)"),C0o=l(),yp=a("li"),oce=a("strong"),w0o=o("sew-d"),A0o=o(" \u2014 "),Xq=a("a"),L0o=o("Wav2Vec2Processor"),y0o=o(" (SEW-D model)"),x0o=l(),xp=a("li"),rce=a("strong"),$0o=o("speech_to_text"),k0o=o(" \u2014 "),zq=a("a"),S0o=o("Speech2TextProcessor"),R0o=o(" (Speech2Text model)"),P0o=l(),$p=a("li"),tce=a("strong"),B0o=o("speech_to_text_2"),N0o=o(" \u2014 "),Qq=a("a"),I0o=o("Speech2Text2Processor"),q0o=o(" (Speech2Text2 model)"),j0o=l(),kp=a("li"),ace=a("strong"),D0o=o("trocr"),G0o=o(" \u2014 "),Wq=a("a"),O0o=o("TrOCRProcessor"),V0o=o(" (TrOCR model)"),X0o=l(),Sp=a("li"),nce=a("strong"),z0o=o("unispeech"),Q0o=o(" \u2014 "),Hq=a("a"),W0o=o("Wav2Vec2Processor"),H0o=o(" (UniSpeech model)"),U0o=l(),Rp=a("li"),sce=a("strong"),J0o=o("unispeech-sat"),Y0o=o(" \u2014 "),Uq=a("a"),K0o=o("Wav2Vec2Processor"),Z0o=o(" (UniSpeechSat model)"),eFo=l(),Pp=a("li"),lce=a("strong"),oFo=o("vilt"),rFo=o(" \u2014 "),Jq=a("a"),tFo=o("ViltProcessor"),aFo=o(" (ViLT model)"),nFo=l(),Bp=a("li"),ice=a("strong"),sFo=o("vision-text-dual-encoder"),lFo=o(" \u2014 "),Yq=a("a"),iFo=o("VisionTextDualEncoderProcessor"),dFo=o(" (VisionTextDualEncoder model)"),cFo=l(),Np=a("li"),dce=a("strong"),fFo=o("wav2vec2"),mFo=o(" \u2014 "),Kq=a("a"),gFo=o("Wav2Vec2Processor"),hFo=o(" (Wav2Vec2 model)"),pFo=l(),Ip=a("li"),cce=a("strong"),_Fo=o("wav2vec2-conformer"),uFo=o(" \u2014 "),Zq=a("a"),bFo=o("Wav2Vec2Processor"),vFo=o(" (Wav2Vec2-Conformer model)"),FFo=l(),qp=a("li"),fce=a("strong"),TFo=o("wavlm"),MFo=o(" \u2014 "),ej=a("a"),EFo=o("Wav2Vec2Processor"),CFo=o(" (WavLM model)"),wFo=l(),F(jp.$$.fragment),AFo=l(),F(Dp.$$.fragment),LFo=l(),Gp=a("div"),F(PL.$$.fragment),yFo=l(),mce=a("p"),xFo=o("Register a new processor for this class."),kXe=l(),Oi=a("h2"),Op=a("a"),gce=a("span"),F(BL.$$.fragment),$Fo=l(),hce=a("span"),kFo=o("AutoModel"),SXe=l(),$o=a("div"),F(NL.$$.fragment),SFo=l(),Vi=a("p"),RFo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),oj=a("a"),PFo=o("from_pretrained()"),BFo=o(" class method or the "),rj=a("a"),NFo=o("from_config()"),IFo=o(` class
method.`),qFo=l(),IL=a("p"),jFo=o("This class cannot be instantiated directly using "),pce=a("code"),DFo=o("__init__()"),GFo=o(" (throws an error)."),OFo=l(),it=a("div"),F(qL.$$.fragment),VFo=l(),_ce=a("p"),XFo=o("Instantiates one of the base model classes of the library from a configuration."),zFo=l(),Xi=a("p"),QFo=o(`Note:
Loading a model from its configuration file does `),uce=a("strong"),WFo=o("not"),HFo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tj=a("a"),UFo=o("from_pretrained()"),JFo=o(" to load the model weights."),YFo=l(),F(Vp.$$.fragment),KFo=l(),Ye=a("div"),F(jL.$$.fragment),ZFo=l(),bce=a("p"),eTo=o("Instantiate one of the base model classes of the library from a pretrained model."),oTo=l(),Na=a("p"),rTo=o("The model class to instantiate is selected based on the "),vce=a("code"),tTo=o("model_type"),aTo=o(` property of the config object (either
passed as an argument or loaded from `),Fce=a("code"),nTo=o("pretrained_model_name_or_path"),sTo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tce=a("code"),lTo=o("pretrained_model_name_or_path"),iTo=o(":"),dTo=l(),y=a("ul"),Xp=a("li"),Mce=a("strong"),cTo=o("albert"),fTo=o(" \u2014 "),aj=a("a"),mTo=o("AlbertModel"),gTo=o(" (ALBERT model)"),hTo=l(),zp=a("li"),Ece=a("strong"),pTo=o("bart"),_To=o(" \u2014 "),nj=a("a"),uTo=o("BartModel"),bTo=o(" (BART model)"),vTo=l(),Qp=a("li"),Cce=a("strong"),FTo=o("beit"),TTo=o(" \u2014 "),sj=a("a"),MTo=o("BeitModel"),ETo=o(" (BEiT model)"),CTo=l(),Wp=a("li"),wce=a("strong"),wTo=o("bert"),ATo=o(" \u2014 "),lj=a("a"),LTo=o("BertModel"),yTo=o(" (BERT model)"),xTo=l(),Hp=a("li"),Ace=a("strong"),$To=o("bert-generation"),kTo=o(" \u2014 "),ij=a("a"),STo=o("BertGenerationEncoder"),RTo=o(" (Bert Generation model)"),PTo=l(),Up=a("li"),Lce=a("strong"),BTo=o("big_bird"),NTo=o(" \u2014 "),dj=a("a"),ITo=o("BigBirdModel"),qTo=o(" (BigBird model)"),jTo=l(),Jp=a("li"),yce=a("strong"),DTo=o("bigbird_pegasus"),GTo=o(" \u2014 "),cj=a("a"),OTo=o("BigBirdPegasusModel"),VTo=o(" (BigBird-Pegasus model)"),XTo=l(),Yp=a("li"),xce=a("strong"),zTo=o("blenderbot"),QTo=o(" \u2014 "),fj=a("a"),WTo=o("BlenderbotModel"),HTo=o(" (Blenderbot model)"),UTo=l(),Kp=a("li"),$ce=a("strong"),JTo=o("blenderbot-small"),YTo=o(" \u2014 "),mj=a("a"),KTo=o("BlenderbotSmallModel"),ZTo=o(" (BlenderbotSmall model)"),e8o=l(),Zp=a("li"),kce=a("strong"),o8o=o("bloom"),r8o=o(" \u2014 "),gj=a("a"),t8o=o("BloomModel"),a8o=o(" (BLOOM model)"),n8o=l(),e_=a("li"),Sce=a("strong"),s8o=o("camembert"),l8o=o(" \u2014 "),hj=a("a"),i8o=o("CamembertModel"),d8o=o(" (CamemBERT model)"),c8o=l(),o_=a("li"),Rce=a("strong"),f8o=o("canine"),m8o=o(" \u2014 "),pj=a("a"),g8o=o("CanineModel"),h8o=o(" (CANINE model)"),p8o=l(),r_=a("li"),Pce=a("strong"),_8o=o("clip"),u8o=o(" \u2014 "),_j=a("a"),b8o=o("CLIPModel"),v8o=o(" (CLIP model)"),F8o=l(),t_=a("li"),Bce=a("strong"),T8o=o("codegen"),M8o=o(" \u2014 "),uj=a("a"),E8o=o("CodeGenModel"),C8o=o(" (CodeGen model)"),w8o=l(),a_=a("li"),Nce=a("strong"),A8o=o("convbert"),L8o=o(" \u2014 "),bj=a("a"),y8o=o("ConvBertModel"),x8o=o(" (ConvBERT model)"),$8o=l(),n_=a("li"),Ice=a("strong"),k8o=o("convnext"),S8o=o(" \u2014 "),vj=a("a"),R8o=o("ConvNextModel"),P8o=o(" (ConvNeXT model)"),B8o=l(),s_=a("li"),qce=a("strong"),N8o=o("ctrl"),I8o=o(" \u2014 "),Fj=a("a"),q8o=o("CTRLModel"),j8o=o(" (CTRL model)"),D8o=l(),l_=a("li"),jce=a("strong"),G8o=o("cvt"),O8o=o(" \u2014 "),Tj=a("a"),V8o=o("CvtModel"),X8o=o(" (CvT model)"),z8o=l(),i_=a("li"),Dce=a("strong"),Q8o=o("data2vec-audio"),W8o=o(" \u2014 "),Mj=a("a"),H8o=o("Data2VecAudioModel"),U8o=o(" (Data2VecAudio model)"),J8o=l(),d_=a("li"),Gce=a("strong"),Y8o=o("data2vec-text"),K8o=o(" \u2014 "),Ej=a("a"),Z8o=o("Data2VecTextModel"),eMo=o(" (Data2VecText model)"),oMo=l(),c_=a("li"),Oce=a("strong"),rMo=o("data2vec-vision"),tMo=o(" \u2014 "),Cj=a("a"),aMo=o("Data2VecVisionModel"),nMo=o(" (Data2VecVision model)"),sMo=l(),f_=a("li"),Vce=a("strong"),lMo=o("deberta"),iMo=o(" \u2014 "),wj=a("a"),dMo=o("DebertaModel"),cMo=o(" (DeBERTa model)"),fMo=l(),m_=a("li"),Xce=a("strong"),mMo=o("deberta-v2"),gMo=o(" \u2014 "),Aj=a("a"),hMo=o("DebertaV2Model"),pMo=o(" (DeBERTa-v2 model)"),_Mo=l(),g_=a("li"),zce=a("strong"),uMo=o("decision_transformer"),bMo=o(" \u2014 "),Lj=a("a"),vMo=o("DecisionTransformerModel"),FMo=o(" (Decision Transformer model)"),TMo=l(),h_=a("li"),Qce=a("strong"),MMo=o("deit"),EMo=o(" \u2014 "),yj=a("a"),CMo=o("DeiTModel"),wMo=o(" (DeiT model)"),AMo=l(),p_=a("li"),Wce=a("strong"),LMo=o("detr"),yMo=o(" \u2014 "),xj=a("a"),xMo=o("DetrModel"),$Mo=o(" (DETR model)"),kMo=l(),__=a("li"),Hce=a("strong"),SMo=o("distilbert"),RMo=o(" \u2014 "),$j=a("a"),PMo=o("DistilBertModel"),BMo=o(" (DistilBERT model)"),NMo=l(),u_=a("li"),Uce=a("strong"),IMo=o("dpr"),qMo=o(" \u2014 "),kj=a("a"),jMo=o("DPRQuestionEncoder"),DMo=o(" (DPR model)"),GMo=l(),b_=a("li"),Jce=a("strong"),OMo=o("dpt"),VMo=o(" \u2014 "),Sj=a("a"),XMo=o("DPTModel"),zMo=o(" (DPT model)"),QMo=l(),v_=a("li"),Yce=a("strong"),WMo=o("electra"),HMo=o(" \u2014 "),Rj=a("a"),UMo=o("ElectraModel"),JMo=o(" (ELECTRA model)"),YMo=l(),F_=a("li"),Kce=a("strong"),KMo=o("flaubert"),ZMo=o(" \u2014 "),Pj=a("a"),e4o=o("FlaubertModel"),o4o=o(" (FlauBERT model)"),r4o=l(),T_=a("li"),Zce=a("strong"),t4o=o("flava"),a4o=o(" \u2014 "),Bj=a("a"),n4o=o("FlavaModel"),s4o=o(" (FLAVA model)"),l4o=l(),M_=a("li"),efe=a("strong"),i4o=o("fnet"),d4o=o(" \u2014 "),Nj=a("a"),c4o=o("FNetModel"),f4o=o(" (FNet model)"),m4o=l(),E_=a("li"),ofe=a("strong"),g4o=o("fsmt"),h4o=o(" \u2014 "),Ij=a("a"),p4o=o("FSMTModel"),_4o=o(" (FairSeq Machine-Translation model)"),u4o=l(),Hs=a("li"),rfe=a("strong"),b4o=o("funnel"),v4o=o(" \u2014 "),qj=a("a"),F4o=o("FunnelModel"),T4o=o(" or "),jj=a("a"),M4o=o("FunnelBaseModel"),E4o=o(" (Funnel Transformer model)"),C4o=l(),C_=a("li"),tfe=a("strong"),w4o=o("glpn"),A4o=o(" \u2014 "),Dj=a("a"),L4o=o("GLPNModel"),y4o=o(" (GLPN model)"),x4o=l(),w_=a("li"),afe=a("strong"),$4o=o("gpt2"),k4o=o(" \u2014 "),Gj=a("a"),S4o=o("GPT2Model"),R4o=o(" (OpenAI GPT-2 model)"),P4o=l(),A_=a("li"),nfe=a("strong"),B4o=o("gpt_neo"),N4o=o(" \u2014 "),Oj=a("a"),I4o=o("GPTNeoModel"),q4o=o(" (GPT Neo model)"),j4o=l(),L_=a("li"),sfe=a("strong"),D4o=o("gpt_neox"),G4o=o(" \u2014 "),Vj=a("a"),O4o=o("GPTNeoXModel"),V4o=o(" (GPT NeoX model)"),X4o=l(),y_=a("li"),lfe=a("strong"),z4o=o("gptj"),Q4o=o(" \u2014 "),Xj=a("a"),W4o=o("GPTJModel"),H4o=o(" (GPT-J model)"),U4o=l(),x_=a("li"),ife=a("strong"),J4o=o("groupvit"),Y4o=o(" \u2014 "),zj=a("a"),K4o=o("GroupViTModel"),Z4o=o(" (GroupViT model)"),eEo=l(),$_=a("li"),dfe=a("strong"),oEo=o("hubert"),rEo=o(" \u2014 "),Qj=a("a"),tEo=o("HubertModel"),aEo=o(" (Hubert model)"),nEo=l(),k_=a("li"),cfe=a("strong"),sEo=o("ibert"),lEo=o(" \u2014 "),Wj=a("a"),iEo=o("IBertModel"),dEo=o(" (I-BERT model)"),cEo=l(),S_=a("li"),ffe=a("strong"),fEo=o("imagegpt"),mEo=o(" \u2014 "),Hj=a("a"),gEo=o("ImageGPTModel"),hEo=o(" (ImageGPT model)"),pEo=l(),R_=a("li"),mfe=a("strong"),_Eo=o("layoutlm"),uEo=o(" \u2014 "),Uj=a("a"),bEo=o("LayoutLMModel"),vEo=o(" (LayoutLM model)"),FEo=l(),P_=a("li"),gfe=a("strong"),TEo=o("layoutlmv2"),MEo=o(" \u2014 "),Jj=a("a"),EEo=o("LayoutLMv2Model"),CEo=o(" (LayoutLMv2 model)"),wEo=l(),B_=a("li"),hfe=a("strong"),AEo=o("layoutlmv3"),LEo=o(" \u2014 "),Yj=a("a"),yEo=o("LayoutLMv3Model"),xEo=o(" (LayoutLMv3 model)"),$Eo=l(),N_=a("li"),pfe=a("strong"),kEo=o("led"),SEo=o(" \u2014 "),Kj=a("a"),REo=o("LEDModel"),PEo=o(" (LED model)"),BEo=l(),I_=a("li"),_fe=a("strong"),NEo=o("levit"),IEo=o(" \u2014 "),Zj=a("a"),qEo=o("LevitModel"),jEo=o(" (LeViT model)"),DEo=l(),q_=a("li"),ufe=a("strong"),GEo=o("longformer"),OEo=o(" \u2014 "),eD=a("a"),VEo=o("LongformerModel"),XEo=o(" (Longformer model)"),zEo=l(),j_=a("li"),bfe=a("strong"),QEo=o("longt5"),WEo=o(" \u2014 "),oD=a("a"),HEo=o("LongT5Model"),UEo=o(" (LongT5 model)"),JEo=l(),D_=a("li"),vfe=a("strong"),YEo=o("luke"),KEo=o(" \u2014 "),rD=a("a"),ZEo=o("LukeModel"),eCo=o(" (LUKE model)"),oCo=l(),G_=a("li"),Ffe=a("strong"),rCo=o("lxmert"),tCo=o(" \u2014 "),tD=a("a"),aCo=o("LxmertModel"),nCo=o(" (LXMERT model)"),sCo=l(),O_=a("li"),Tfe=a("strong"),lCo=o("m2m_100"),iCo=o(" \u2014 "),aD=a("a"),dCo=o("M2M100Model"),cCo=o(" (M2M100 model)"),fCo=l(),V_=a("li"),Mfe=a("strong"),mCo=o("marian"),gCo=o(" \u2014 "),nD=a("a"),hCo=o("MarianModel"),pCo=o(" (Marian model)"),_Co=l(),X_=a("li"),Efe=a("strong"),uCo=o("maskformer"),bCo=o(" \u2014 "),sD=a("a"),vCo=o("MaskFormerModel"),FCo=o(" (MaskFormer model)"),TCo=l(),z_=a("li"),Cfe=a("strong"),MCo=o("mbart"),ECo=o(" \u2014 "),lD=a("a"),CCo=o("MBartModel"),wCo=o(" (mBART model)"),ACo=l(),Q_=a("li"),wfe=a("strong"),LCo=o("mctct"),yCo=o(" \u2014 "),iD=a("a"),xCo=o("MCTCTModel"),$Co=o(" (M-CTC-T model)"),kCo=l(),W_=a("li"),Afe=a("strong"),SCo=o("megatron-bert"),RCo=o(" \u2014 "),dD=a("a"),PCo=o("MegatronBertModel"),BCo=o(" (Megatron-BERT model)"),NCo=l(),H_=a("li"),Lfe=a("strong"),ICo=o("mobilebert"),qCo=o(" \u2014 "),cD=a("a"),jCo=o("MobileBertModel"),DCo=o(" (MobileBERT model)"),GCo=l(),U_=a("li"),yfe=a("strong"),OCo=o("mobilevit"),VCo=o(" \u2014 "),fD=a("a"),XCo=o("MobileViTModel"),zCo=o(" (MobileViT model)"),QCo=l(),J_=a("li"),xfe=a("strong"),WCo=o("mpnet"),HCo=o(" \u2014 "),mD=a("a"),UCo=o("MPNetModel"),JCo=o(" (MPNet model)"),YCo=l(),Y_=a("li"),$fe=a("strong"),KCo=o("mt5"),ZCo=o(" \u2014 "),gD=a("a"),e3o=o("MT5Model"),o3o=o(" (MT5 model)"),r3o=l(),K_=a("li"),kfe=a("strong"),t3o=o("mvp"),a3o=o(" \u2014 "),hD=a("a"),n3o=o("MvpModel"),s3o=o(" (MVP model)"),l3o=l(),Z_=a("li"),Sfe=a("strong"),i3o=o("nezha"),d3o=o(" \u2014 "),pD=a("a"),c3o=o("NezhaModel"),f3o=o(" (Nezha model)"),m3o=l(),eu=a("li"),Rfe=a("strong"),g3o=o("nllb"),h3o=o(" \u2014 "),_D=a("a"),p3o=o("M2M100Model"),_3o=o(" (NLLB model)"),u3o=l(),ou=a("li"),Pfe=a("strong"),b3o=o("nystromformer"),v3o=o(" \u2014 "),uD=a("a"),F3o=o("NystromformerModel"),T3o=o(" (Nystr\xF6mformer model)"),M3o=l(),ru=a("li"),Bfe=a("strong"),E3o=o("openai-gpt"),C3o=o(" \u2014 "),bD=a("a"),w3o=o("OpenAIGPTModel"),A3o=o(" (OpenAI GPT model)"),L3o=l(),tu=a("li"),Nfe=a("strong"),y3o=o("opt"),x3o=o(" \u2014 "),vD=a("a"),$3o=o("OPTModel"),k3o=o(" (OPT model)"),S3o=l(),au=a("li"),Ife=a("strong"),R3o=o("pegasus"),P3o=o(" \u2014 "),FD=a("a"),B3o=o("PegasusModel"),N3o=o(" (Pegasus model)"),I3o=l(),nu=a("li"),qfe=a("strong"),q3o=o("perceiver"),j3o=o(" \u2014 "),TD=a("a"),D3o=o("PerceiverModel"),G3o=o(" (Perceiver model)"),O3o=l(),su=a("li"),jfe=a("strong"),V3o=o("plbart"),X3o=o(" \u2014 "),MD=a("a"),z3o=o("PLBartModel"),Q3o=o(" (PLBart model)"),W3o=l(),lu=a("li"),Dfe=a("strong"),H3o=o("poolformer"),U3o=o(" \u2014 "),ED=a("a"),J3o=o("PoolFormerModel"),Y3o=o(" (PoolFormer model)"),K3o=l(),iu=a("li"),Gfe=a("strong"),Z3o=o("prophetnet"),e5o=o(" \u2014 "),CD=a("a"),o5o=o("ProphetNetModel"),r5o=o(" (ProphetNet model)"),t5o=l(),du=a("li"),Ofe=a("strong"),a5o=o("qdqbert"),n5o=o(" \u2014 "),wD=a("a"),s5o=o("QDQBertModel"),l5o=o(" (QDQBert model)"),i5o=l(),cu=a("li"),Vfe=a("strong"),d5o=o("reformer"),c5o=o(" \u2014 "),AD=a("a"),f5o=o("ReformerModel"),m5o=o(" (Reformer model)"),g5o=l(),fu=a("li"),Xfe=a("strong"),h5o=o("regnet"),p5o=o(" \u2014 "),LD=a("a"),_5o=o("RegNetModel"),u5o=o(" (RegNet model)"),b5o=l(),mu=a("li"),zfe=a("strong"),v5o=o("rembert"),F5o=o(" \u2014 "),yD=a("a"),T5o=o("RemBertModel"),M5o=o(" (RemBERT model)"),E5o=l(),gu=a("li"),Qfe=a("strong"),C5o=o("resnet"),w5o=o(" \u2014 "),xD=a("a"),A5o=o("ResNetModel"),L5o=o(" (ResNet model)"),y5o=l(),hu=a("li"),Wfe=a("strong"),x5o=o("retribert"),$5o=o(" \u2014 "),$D=a("a"),k5o=o("RetriBertModel"),S5o=o(" (RetriBERT model)"),R5o=l(),pu=a("li"),Hfe=a("strong"),P5o=o("roberta"),B5o=o(" \u2014 "),kD=a("a"),N5o=o("RobertaModel"),I5o=o(" (RoBERTa model)"),q5o=l(),_u=a("li"),Ufe=a("strong"),j5o=o("roformer"),D5o=o(" \u2014 "),SD=a("a"),G5o=o("RoFormerModel"),O5o=o(" (RoFormer model)"),V5o=l(),uu=a("li"),Jfe=a("strong"),X5o=o("segformer"),z5o=o(" \u2014 "),RD=a("a"),Q5o=o("SegformerModel"),W5o=o(" (SegFormer model)"),H5o=l(),bu=a("li"),Yfe=a("strong"),U5o=o("sew"),J5o=o(" \u2014 "),PD=a("a"),Y5o=o("SEWModel"),K5o=o(" (SEW model)"),Z5o=l(),vu=a("li"),Kfe=a("strong"),ewo=o("sew-d"),owo=o(" \u2014 "),BD=a("a"),rwo=o("SEWDModel"),two=o(" (SEW-D model)"),awo=l(),Fu=a("li"),Zfe=a("strong"),nwo=o("speech_to_text"),swo=o(" \u2014 "),ND=a("a"),lwo=o("Speech2TextModel"),iwo=o(" (Speech2Text model)"),dwo=l(),Tu=a("li"),eme=a("strong"),cwo=o("splinter"),fwo=o(" \u2014 "),ID=a("a"),mwo=o("SplinterModel"),gwo=o(" (Splinter model)"),hwo=l(),Mu=a("li"),ome=a("strong"),pwo=o("squeezebert"),_wo=o(" \u2014 "),qD=a("a"),uwo=o("SqueezeBertModel"),bwo=o(" (SqueezeBERT model)"),vwo=l(),Eu=a("li"),rme=a("strong"),Fwo=o("swin"),Two=o(" \u2014 "),jD=a("a"),Mwo=o("SwinModel"),Ewo=o(" (Swin Transformer model)"),Cwo=l(),Cu=a("li"),tme=a("strong"),wwo=o("t5"),Awo=o(" \u2014 "),DD=a("a"),Lwo=o("T5Model"),ywo=o(" (T5 model)"),xwo=l(),wu=a("li"),ame=a("strong"),$wo=o("tapas"),kwo=o(" \u2014 "),GD=a("a"),Swo=o("TapasModel"),Rwo=o(" (TAPAS model)"),Pwo=l(),Au=a("li"),nme=a("strong"),Bwo=o("trajectory_transformer"),Nwo=o(" \u2014 "),OD=a("a"),Iwo=o("TrajectoryTransformerModel"),qwo=o(" (Trajectory Transformer model)"),jwo=l(),Lu=a("li"),sme=a("strong"),Dwo=o("transfo-xl"),Gwo=o(" \u2014 "),VD=a("a"),Owo=o("TransfoXLModel"),Vwo=o(" (Transformer-XL model)"),Xwo=l(),yu=a("li"),lme=a("strong"),zwo=o("unispeech"),Qwo=o(" \u2014 "),XD=a("a"),Wwo=o("UniSpeechModel"),Hwo=o(" (UniSpeech model)"),Uwo=l(),xu=a("li"),ime=a("strong"),Jwo=o("unispeech-sat"),Ywo=o(" \u2014 "),zD=a("a"),Kwo=o("UniSpeechSatModel"),Zwo=o(" (UniSpeechSat model)"),eAo=l(),$u=a("li"),dme=a("strong"),oAo=o("van"),rAo=o(" \u2014 "),QD=a("a"),tAo=o("VanModel"),aAo=o(" (VAN model)"),nAo=l(),ku=a("li"),cme=a("strong"),sAo=o("vilt"),lAo=o(" \u2014 "),WD=a("a"),iAo=o("ViltModel"),dAo=o(" (ViLT model)"),cAo=l(),Su=a("li"),fme=a("strong"),fAo=o("vision-text-dual-encoder"),mAo=o(" \u2014 "),HD=a("a"),gAo=o("VisionTextDualEncoderModel"),hAo=o(" (VisionTextDualEncoder model)"),pAo=l(),Ru=a("li"),mme=a("strong"),_Ao=o("visual_bert"),uAo=o(" \u2014 "),UD=a("a"),bAo=o("VisualBertModel"),vAo=o(" (VisualBERT model)"),FAo=l(),Pu=a("li"),gme=a("strong"),TAo=o("vit"),MAo=o(" \u2014 "),JD=a("a"),EAo=o("ViTModel"),CAo=o(" (ViT model)"),wAo=l(),Bu=a("li"),hme=a("strong"),AAo=o("vit_mae"),LAo=o(" \u2014 "),YD=a("a"),yAo=o("ViTMAEModel"),xAo=o(" (ViTMAE model)"),$Ao=l(),Nu=a("li"),pme=a("strong"),kAo=o("wav2vec2"),SAo=o(" \u2014 "),KD=a("a"),RAo=o("Wav2Vec2Model"),PAo=o(" (Wav2Vec2 model)"),BAo=l(),Iu=a("li"),_me=a("strong"),NAo=o("wav2vec2-conformer"),IAo=o(" \u2014 "),ZD=a("a"),qAo=o("Wav2Vec2ConformerModel"),jAo=o(" (Wav2Vec2-Conformer model)"),DAo=l(),qu=a("li"),ume=a("strong"),GAo=o("wavlm"),OAo=o(" \u2014 "),eG=a("a"),VAo=o("WavLMModel"),XAo=o(" (WavLM model)"),zAo=l(),ju=a("li"),bme=a("strong"),QAo=o("xglm"),WAo=o(" \u2014 "),oG=a("a"),HAo=o("XGLMModel"),UAo=o(" (XGLM model)"),JAo=l(),Du=a("li"),vme=a("strong"),YAo=o("xlm"),KAo=o(" \u2014 "),rG=a("a"),ZAo=o("XLMModel"),e6o=o(" (XLM model)"),o6o=l(),Gu=a("li"),Fme=a("strong"),r6o=o("xlm-prophetnet"),t6o=o(" \u2014 "),tG=a("a"),a6o=o("XLMProphetNetModel"),n6o=o(" (XLM-ProphetNet model)"),s6o=l(),Ou=a("li"),Tme=a("strong"),l6o=o("xlm-roberta"),i6o=o(" \u2014 "),aG=a("a"),d6o=o("XLMRobertaModel"),c6o=o(" (XLM-RoBERTa model)"),f6o=l(),Vu=a("li"),Mme=a("strong"),m6o=o("xlm-roberta-xl"),g6o=o(" \u2014 "),nG=a("a"),h6o=o("XLMRobertaXLModel"),p6o=o(" (XLM-RoBERTa-XL model)"),_6o=l(),Xu=a("li"),Eme=a("strong"),u6o=o("xlnet"),b6o=o(" \u2014 "),sG=a("a"),v6o=o("XLNetModel"),F6o=o(" (XLNet model)"),T6o=l(),zu=a("li"),Cme=a("strong"),M6o=o("yolos"),E6o=o(" \u2014 "),lG=a("a"),C6o=o("YolosModel"),w6o=o(" (YOLOS model)"),A6o=l(),Qu=a("li"),wme=a("strong"),L6o=o("yoso"),y6o=o(" \u2014 "),iG=a("a"),x6o=o("YosoModel"),$6o=o(" (YOSO model)"),k6o=l(),Wu=a("p"),S6o=o("The model is set in evaluation mode by default using "),Ame=a("code"),R6o=o("model.eval()"),P6o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lme=a("code"),B6o=o("model.train()"),N6o=l(),F(Hu.$$.fragment),RXe=l(),zi=a("h2"),Uu=a("a"),yme=a("span"),F(DL.$$.fragment),I6o=l(),xme=a("span"),q6o=o("AutoModelForPreTraining"),PXe=l(),ko=a("div"),F(GL.$$.fragment),j6o=l(),Qi=a("p"),D6o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),dG=a("a"),G6o=o("from_pretrained()"),O6o=o(" class method or the "),cG=a("a"),V6o=o("from_config()"),X6o=o(` class
method.`),z6o=l(),OL=a("p"),Q6o=o("This class cannot be instantiated directly using "),$me=a("code"),W6o=o("__init__()"),H6o=o(" (throws an error)."),U6o=l(),dt=a("div"),F(VL.$$.fragment),J6o=l(),kme=a("p"),Y6o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),K6o=l(),Wi=a("p"),Z6o=o(`Note:
Loading a model from its configuration file does `),Sme=a("strong"),e7o=o("not"),o7o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fG=a("a"),r7o=o("from_pretrained()"),t7o=o(" to load the model weights."),a7o=l(),F(Ju.$$.fragment),n7o=l(),Ke=a("div"),F(XL.$$.fragment),s7o=l(),Rme=a("p"),l7o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),i7o=l(),Ia=a("p"),d7o=o("The model class to instantiate is selected based on the "),Pme=a("code"),c7o=o("model_type"),f7o=o(` property of the config object (either
passed as an argument or loaded from `),Bme=a("code"),m7o=o("pretrained_model_name_or_path"),g7o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nme=a("code"),h7o=o("pretrained_model_name_or_path"),p7o=o(":"),_7o=l(),G=a("ul"),Yu=a("li"),Ime=a("strong"),u7o=o("albert"),b7o=o(" \u2014 "),mG=a("a"),v7o=o("AlbertForPreTraining"),F7o=o(" (ALBERT model)"),T7o=l(),Ku=a("li"),qme=a("strong"),M7o=o("bart"),E7o=o(" \u2014 "),gG=a("a"),C7o=o("BartForConditionalGeneration"),w7o=o(" (BART model)"),A7o=l(),Zu=a("li"),jme=a("strong"),L7o=o("bert"),y7o=o(" \u2014 "),hG=a("a"),x7o=o("BertForPreTraining"),$7o=o(" (BERT model)"),k7o=l(),e2=a("li"),Dme=a("strong"),S7o=o("big_bird"),R7o=o(" \u2014 "),pG=a("a"),P7o=o("BigBirdForPreTraining"),B7o=o(" (BigBird model)"),N7o=l(),o2=a("li"),Gme=a("strong"),I7o=o("bloom"),q7o=o(" \u2014 "),_G=a("a"),j7o=o("BloomForCausalLM"),D7o=o(" (BLOOM model)"),G7o=l(),r2=a("li"),Ome=a("strong"),O7o=o("camembert"),V7o=o(" \u2014 "),uG=a("a"),X7o=o("CamembertForMaskedLM"),z7o=o(" (CamemBERT model)"),Q7o=l(),t2=a("li"),Vme=a("strong"),W7o=o("ctrl"),H7o=o(" \u2014 "),bG=a("a"),U7o=o("CTRLLMHeadModel"),J7o=o(" (CTRL model)"),Y7o=l(),a2=a("li"),Xme=a("strong"),K7o=o("data2vec-text"),Z7o=o(" \u2014 "),vG=a("a"),eLo=o("Data2VecTextForMaskedLM"),oLo=o(" (Data2VecText model)"),rLo=l(),n2=a("li"),zme=a("strong"),tLo=o("deberta"),aLo=o(" \u2014 "),FG=a("a"),nLo=o("DebertaForMaskedLM"),sLo=o(" (DeBERTa model)"),lLo=l(),s2=a("li"),Qme=a("strong"),iLo=o("deberta-v2"),dLo=o(" \u2014 "),TG=a("a"),cLo=o("DebertaV2ForMaskedLM"),fLo=o(" (DeBERTa-v2 model)"),mLo=l(),l2=a("li"),Wme=a("strong"),gLo=o("distilbert"),hLo=o(" \u2014 "),MG=a("a"),pLo=o("DistilBertForMaskedLM"),_Lo=o(" (DistilBERT model)"),uLo=l(),i2=a("li"),Hme=a("strong"),bLo=o("electra"),vLo=o(" \u2014 "),EG=a("a"),FLo=o("ElectraForPreTraining"),TLo=o(" (ELECTRA model)"),MLo=l(),d2=a("li"),Ume=a("strong"),ELo=o("flaubert"),CLo=o(" \u2014 "),CG=a("a"),wLo=o("FlaubertWithLMHeadModel"),ALo=o(" (FlauBERT model)"),LLo=l(),c2=a("li"),Jme=a("strong"),yLo=o("flava"),xLo=o(" \u2014 "),wG=a("a"),$Lo=o("FlavaForPreTraining"),kLo=o(" (FLAVA model)"),SLo=l(),f2=a("li"),Yme=a("strong"),RLo=o("fnet"),PLo=o(" \u2014 "),AG=a("a"),BLo=o("FNetForPreTraining"),NLo=o(" (FNet model)"),ILo=l(),m2=a("li"),Kme=a("strong"),qLo=o("fsmt"),jLo=o(" \u2014 "),LG=a("a"),DLo=o("FSMTForConditionalGeneration"),GLo=o(" (FairSeq Machine-Translation model)"),OLo=l(),g2=a("li"),Zme=a("strong"),VLo=o("funnel"),XLo=o(" \u2014 "),yG=a("a"),zLo=o("FunnelForPreTraining"),QLo=o(" (Funnel Transformer model)"),WLo=l(),h2=a("li"),ege=a("strong"),HLo=o("gpt2"),ULo=o(" \u2014 "),xG=a("a"),JLo=o("GPT2LMHeadModel"),YLo=o(" (OpenAI GPT-2 model)"),KLo=l(),p2=a("li"),oge=a("strong"),ZLo=o("ibert"),eyo=o(" \u2014 "),$G=a("a"),oyo=o("IBertForMaskedLM"),ryo=o(" (I-BERT model)"),tyo=l(),_2=a("li"),rge=a("strong"),ayo=o("layoutlm"),nyo=o(" \u2014 "),kG=a("a"),syo=o("LayoutLMForMaskedLM"),lyo=o(" (LayoutLM model)"),iyo=l(),u2=a("li"),tge=a("strong"),dyo=o("longformer"),cyo=o(" \u2014 "),SG=a("a"),fyo=o("LongformerForMaskedLM"),myo=o(" (Longformer model)"),gyo=l(),b2=a("li"),age=a("strong"),hyo=o("lxmert"),pyo=o(" \u2014 "),RG=a("a"),_yo=o("LxmertForPreTraining"),uyo=o(" (LXMERT model)"),byo=l(),v2=a("li"),nge=a("strong"),vyo=o("megatron-bert"),Fyo=o(" \u2014 "),PG=a("a"),Tyo=o("MegatronBertForPreTraining"),Myo=o(" (Megatron-BERT model)"),Eyo=l(),F2=a("li"),sge=a("strong"),Cyo=o("mobilebert"),wyo=o(" \u2014 "),BG=a("a"),Ayo=o("MobileBertForPreTraining"),Lyo=o(" (MobileBERT model)"),yyo=l(),T2=a("li"),lge=a("strong"),xyo=o("mpnet"),$yo=o(" \u2014 "),NG=a("a"),kyo=o("MPNetForMaskedLM"),Syo=o(" (MPNet model)"),Ryo=l(),M2=a("li"),ige=a("strong"),Pyo=o("mvp"),Byo=o(" \u2014 "),IG=a("a"),Nyo=o("MvpForConditionalGeneration"),Iyo=o(" (MVP model)"),qyo=l(),E2=a("li"),dge=a("strong"),jyo=o("nezha"),Dyo=o(" \u2014 "),qG=a("a"),Gyo=o("NezhaForPreTraining"),Oyo=o(" (Nezha model)"),Vyo=l(),C2=a("li"),cge=a("strong"),Xyo=o("openai-gpt"),zyo=o(" \u2014 "),jG=a("a"),Qyo=o("OpenAIGPTLMHeadModel"),Wyo=o(" (OpenAI GPT model)"),Hyo=l(),w2=a("li"),fge=a("strong"),Uyo=o("retribert"),Jyo=o(" \u2014 "),DG=a("a"),Yyo=o("RetriBertModel"),Kyo=o(" (RetriBERT model)"),Zyo=l(),A2=a("li"),mge=a("strong"),e9o=o("roberta"),o9o=o(" \u2014 "),GG=a("a"),r9o=o("RobertaForMaskedLM"),t9o=o(" (RoBERTa model)"),a9o=l(),L2=a("li"),gge=a("strong"),n9o=o("splinter"),s9o=o(" \u2014 "),OG=a("a"),l9o=o("SplinterForPreTraining"),i9o=o(" (Splinter model)"),d9o=l(),y2=a("li"),hge=a("strong"),c9o=o("squeezebert"),f9o=o(" \u2014 "),VG=a("a"),m9o=o("SqueezeBertForMaskedLM"),g9o=o(" (SqueezeBERT model)"),h9o=l(),x2=a("li"),pge=a("strong"),p9o=o("t5"),_9o=o(" \u2014 "),XG=a("a"),u9o=o("T5ForConditionalGeneration"),b9o=o(" (T5 model)"),v9o=l(),$2=a("li"),_ge=a("strong"),F9o=o("tapas"),T9o=o(" \u2014 "),zG=a("a"),M9o=o("TapasForMaskedLM"),E9o=o(" (TAPAS model)"),C9o=l(),k2=a("li"),uge=a("strong"),w9o=o("transfo-xl"),A9o=o(" \u2014 "),QG=a("a"),L9o=o("TransfoXLLMHeadModel"),y9o=o(" (Transformer-XL model)"),x9o=l(),S2=a("li"),bge=a("strong"),$9o=o("unispeech"),k9o=o(" \u2014 "),WG=a("a"),S9o=o("UniSpeechForPreTraining"),R9o=o(" (UniSpeech model)"),P9o=l(),R2=a("li"),vge=a("strong"),B9o=o("unispeech-sat"),N9o=o(" \u2014 "),HG=a("a"),I9o=o("UniSpeechSatForPreTraining"),q9o=o(" (UniSpeechSat model)"),j9o=l(),P2=a("li"),Fge=a("strong"),D9o=o("visual_bert"),G9o=o(" \u2014 "),UG=a("a"),O9o=o("VisualBertForPreTraining"),V9o=o(" (VisualBERT model)"),X9o=l(),B2=a("li"),Tge=a("strong"),z9o=o("vit_mae"),Q9o=o(" \u2014 "),JG=a("a"),W9o=o("ViTMAEForPreTraining"),H9o=o(" (ViTMAE model)"),U9o=l(),N2=a("li"),Mge=a("strong"),J9o=o("wav2vec2"),Y9o=o(" \u2014 "),YG=a("a"),K9o=o("Wav2Vec2ForPreTraining"),Z9o=o(" (Wav2Vec2 model)"),exo=l(),I2=a("li"),Ege=a("strong"),oxo=o("wav2vec2-conformer"),rxo=o(" \u2014 "),KG=a("a"),txo=o("Wav2Vec2ConformerForPreTraining"),axo=o(" (Wav2Vec2-Conformer model)"),nxo=l(),q2=a("li"),Cge=a("strong"),sxo=o("xlm"),lxo=o(" \u2014 "),ZG=a("a"),ixo=o("XLMWithLMHeadModel"),dxo=o(" (XLM model)"),cxo=l(),j2=a("li"),wge=a("strong"),fxo=o("xlm-roberta"),mxo=o(" \u2014 "),eO=a("a"),gxo=o("XLMRobertaForMaskedLM"),hxo=o(" (XLM-RoBERTa model)"),pxo=l(),D2=a("li"),Age=a("strong"),_xo=o("xlm-roberta-xl"),uxo=o(" \u2014 "),oO=a("a"),bxo=o("XLMRobertaXLForMaskedLM"),vxo=o(" (XLM-RoBERTa-XL model)"),Fxo=l(),G2=a("li"),Lge=a("strong"),Txo=o("xlnet"),Mxo=o(" \u2014 "),rO=a("a"),Exo=o("XLNetLMHeadModel"),Cxo=o(" (XLNet model)"),wxo=l(),O2=a("p"),Axo=o("The model is set in evaluation mode by default using "),yge=a("code"),Lxo=o("model.eval()"),yxo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xge=a("code"),xxo=o("model.train()"),$xo=l(),F(V2.$$.fragment),BXe=l(),Hi=a("h2"),X2=a("a"),$ge=a("span"),F(zL.$$.fragment),kxo=l(),kge=a("span"),Sxo=o("AutoModelForCausalLM"),NXe=l(),So=a("div"),F(QL.$$.fragment),Rxo=l(),Ui=a("p"),Pxo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),tO=a("a"),Bxo=o("from_pretrained()"),Nxo=o(" class method or the "),aO=a("a"),Ixo=o("from_config()"),qxo=o(` class
method.`),jxo=l(),WL=a("p"),Dxo=o("This class cannot be instantiated directly using "),Sge=a("code"),Gxo=o("__init__()"),Oxo=o(" (throws an error)."),Vxo=l(),ct=a("div"),F(HL.$$.fragment),Xxo=l(),Rge=a("p"),zxo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Qxo=l(),Ji=a("p"),Wxo=o(`Note:
Loading a model from its configuration file does `),Pge=a("strong"),Hxo=o("not"),Uxo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nO=a("a"),Jxo=o("from_pretrained()"),Yxo=o(" to load the model weights."),Kxo=l(),F(z2.$$.fragment),Zxo=l(),Ze=a("div"),F(UL.$$.fragment),e$o=l(),Bge=a("p"),o$o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),r$o=l(),qa=a("p"),t$o=o("The model class to instantiate is selected based on the "),Nge=a("code"),a$o=o("model_type"),n$o=o(` property of the config object (either
passed as an argument or loaded from `),Ige=a("code"),s$o=o("pretrained_model_name_or_path"),l$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qge=a("code"),i$o=o("pretrained_model_name_or_path"),d$o=o(":"),c$o=l(),z=a("ul"),Q2=a("li"),jge=a("strong"),f$o=o("bart"),m$o=o(" \u2014 "),sO=a("a"),g$o=o("BartForCausalLM"),h$o=o(" (BART model)"),p$o=l(),W2=a("li"),Dge=a("strong"),_$o=o("bert"),u$o=o(" \u2014 "),lO=a("a"),b$o=o("BertLMHeadModel"),v$o=o(" (BERT model)"),F$o=l(),H2=a("li"),Gge=a("strong"),T$o=o("bert-generation"),M$o=o(" \u2014 "),iO=a("a"),E$o=o("BertGenerationDecoder"),C$o=o(" (Bert Generation model)"),w$o=l(),U2=a("li"),Oge=a("strong"),A$o=o("big_bird"),L$o=o(" \u2014 "),dO=a("a"),y$o=o("BigBirdForCausalLM"),x$o=o(" (BigBird model)"),$$o=l(),J2=a("li"),Vge=a("strong"),k$o=o("bigbird_pegasus"),S$o=o(" \u2014 "),cO=a("a"),R$o=o("BigBirdPegasusForCausalLM"),P$o=o(" (BigBird-Pegasus model)"),B$o=l(),Y2=a("li"),Xge=a("strong"),N$o=o("blenderbot"),I$o=o(" \u2014 "),fO=a("a"),q$o=o("BlenderbotForCausalLM"),j$o=o(" (Blenderbot model)"),D$o=l(),K2=a("li"),zge=a("strong"),G$o=o("blenderbot-small"),O$o=o(" \u2014 "),mO=a("a"),V$o=o("BlenderbotSmallForCausalLM"),X$o=o(" (BlenderbotSmall model)"),z$o=l(),Z2=a("li"),Qge=a("strong"),Q$o=o("bloom"),W$o=o(" \u2014 "),gO=a("a"),H$o=o("BloomForCausalLM"),U$o=o(" (BLOOM model)"),J$o=l(),e1=a("li"),Wge=a("strong"),Y$o=o("camembert"),K$o=o(" \u2014 "),hO=a("a"),Z$o=o("CamembertForCausalLM"),eko=o(" (CamemBERT model)"),oko=l(),o1=a("li"),Hge=a("strong"),rko=o("codegen"),tko=o(" \u2014 "),pO=a("a"),ako=o("CodeGenForCausalLM"),nko=o(" (CodeGen model)"),sko=l(),r1=a("li"),Uge=a("strong"),lko=o("ctrl"),iko=o(" \u2014 "),_O=a("a"),dko=o("CTRLLMHeadModel"),cko=o(" (CTRL model)"),fko=l(),t1=a("li"),Jge=a("strong"),mko=o("data2vec-text"),gko=o(" \u2014 "),uO=a("a"),hko=o("Data2VecTextForCausalLM"),pko=o(" (Data2VecText model)"),_ko=l(),a1=a("li"),Yge=a("strong"),uko=o("electra"),bko=o(" \u2014 "),bO=a("a"),vko=o("ElectraForCausalLM"),Fko=o(" (ELECTRA model)"),Tko=l(),n1=a("li"),Kge=a("strong"),Mko=o("gpt2"),Eko=o(" \u2014 "),vO=a("a"),Cko=o("GPT2LMHeadModel"),wko=o(" (OpenAI GPT-2 model)"),Ako=l(),s1=a("li"),Zge=a("strong"),Lko=o("gpt_neo"),yko=o(" \u2014 "),FO=a("a"),xko=o("GPTNeoForCausalLM"),$ko=o(" (GPT Neo model)"),kko=l(),l1=a("li"),ehe=a("strong"),Sko=o("gpt_neox"),Rko=o(" \u2014 "),TO=a("a"),Pko=o("GPTNeoXForCausalLM"),Bko=o(" (GPT NeoX model)"),Nko=l(),i1=a("li"),ohe=a("strong"),Iko=o("gptj"),qko=o(" \u2014 "),MO=a("a"),jko=o("GPTJForCausalLM"),Dko=o(" (GPT-J model)"),Gko=l(),d1=a("li"),rhe=a("strong"),Oko=o("marian"),Vko=o(" \u2014 "),EO=a("a"),Xko=o("MarianForCausalLM"),zko=o(" (Marian model)"),Qko=l(),c1=a("li"),the=a("strong"),Wko=o("mbart"),Hko=o(" \u2014 "),CO=a("a"),Uko=o("MBartForCausalLM"),Jko=o(" (mBART model)"),Yko=l(),f1=a("li"),ahe=a("strong"),Kko=o("megatron-bert"),Zko=o(" \u2014 "),wO=a("a"),eSo=o("MegatronBertForCausalLM"),oSo=o(" (Megatron-BERT model)"),rSo=l(),m1=a("li"),nhe=a("strong"),tSo=o("mvp"),aSo=o(" \u2014 "),AO=a("a"),nSo=o("MvpForCausalLM"),sSo=o(" (MVP model)"),lSo=l(),g1=a("li"),she=a("strong"),iSo=o("openai-gpt"),dSo=o(" \u2014 "),LO=a("a"),cSo=o("OpenAIGPTLMHeadModel"),fSo=o(" (OpenAI GPT model)"),mSo=l(),h1=a("li"),lhe=a("strong"),gSo=o("opt"),hSo=o(" \u2014 "),yO=a("a"),pSo=o("OPTForCausalLM"),_So=o(" (OPT model)"),uSo=l(),p1=a("li"),ihe=a("strong"),bSo=o("pegasus"),vSo=o(" \u2014 "),xO=a("a"),FSo=o("PegasusForCausalLM"),TSo=o(" (Pegasus model)"),MSo=l(),_1=a("li"),dhe=a("strong"),ESo=o("plbart"),CSo=o(" \u2014 "),$O=a("a"),wSo=o("PLBartForCausalLM"),ASo=o(" (PLBart model)"),LSo=l(),u1=a("li"),che=a("strong"),ySo=o("prophetnet"),xSo=o(" \u2014 "),kO=a("a"),$So=o("ProphetNetForCausalLM"),kSo=o(" (ProphetNet model)"),SSo=l(),b1=a("li"),fhe=a("strong"),RSo=o("qdqbert"),PSo=o(" \u2014 "),SO=a("a"),BSo=o("QDQBertLMHeadModel"),NSo=o(" (QDQBert model)"),ISo=l(),v1=a("li"),mhe=a("strong"),qSo=o("reformer"),jSo=o(" \u2014 "),RO=a("a"),DSo=o("ReformerModelWithLMHead"),GSo=o(" (Reformer model)"),OSo=l(),F1=a("li"),ghe=a("strong"),VSo=o("rembert"),XSo=o(" \u2014 "),PO=a("a"),zSo=o("RemBertForCausalLM"),QSo=o(" (RemBERT model)"),WSo=l(),T1=a("li"),hhe=a("strong"),HSo=o("roberta"),USo=o(" \u2014 "),BO=a("a"),JSo=o("RobertaForCausalLM"),YSo=o(" (RoBERTa model)"),KSo=l(),M1=a("li"),phe=a("strong"),ZSo=o("roformer"),eRo=o(" \u2014 "),NO=a("a"),oRo=o("RoFormerForCausalLM"),rRo=o(" (RoFormer model)"),tRo=l(),E1=a("li"),_he=a("strong"),aRo=o("speech_to_text_2"),nRo=o(" \u2014 "),IO=a("a"),sRo=o("Speech2Text2ForCausalLM"),lRo=o(" (Speech2Text2 model)"),iRo=l(),C1=a("li"),uhe=a("strong"),dRo=o("transfo-xl"),cRo=o(" \u2014 "),qO=a("a"),fRo=o("TransfoXLLMHeadModel"),mRo=o(" (Transformer-XL model)"),gRo=l(),w1=a("li"),bhe=a("strong"),hRo=o("trocr"),pRo=o(" \u2014 "),jO=a("a"),_Ro=o("TrOCRForCausalLM"),uRo=o(" (TrOCR model)"),bRo=l(),A1=a("li"),vhe=a("strong"),vRo=o("xglm"),FRo=o(" \u2014 "),DO=a("a"),TRo=o("XGLMForCausalLM"),MRo=o(" (XGLM model)"),ERo=l(),L1=a("li"),Fhe=a("strong"),CRo=o("xlm"),wRo=o(" \u2014 "),GO=a("a"),ARo=o("XLMWithLMHeadModel"),LRo=o(" (XLM model)"),yRo=l(),y1=a("li"),The=a("strong"),xRo=o("xlm-prophetnet"),$Ro=o(" \u2014 "),OO=a("a"),kRo=o("XLMProphetNetForCausalLM"),SRo=o(" (XLM-ProphetNet model)"),RRo=l(),x1=a("li"),Mhe=a("strong"),PRo=o("xlm-roberta"),BRo=o(" \u2014 "),VO=a("a"),NRo=o("XLMRobertaForCausalLM"),IRo=o(" (XLM-RoBERTa model)"),qRo=l(),$1=a("li"),Ehe=a("strong"),jRo=o("xlm-roberta-xl"),DRo=o(" \u2014 "),XO=a("a"),GRo=o("XLMRobertaXLForCausalLM"),ORo=o(" (XLM-RoBERTa-XL model)"),VRo=l(),k1=a("li"),Che=a("strong"),XRo=o("xlnet"),zRo=o(" \u2014 "),zO=a("a"),QRo=o("XLNetLMHeadModel"),WRo=o(" (XLNet model)"),HRo=l(),S1=a("p"),URo=o("The model is set in evaluation mode by default using "),whe=a("code"),JRo=o("model.eval()"),YRo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ahe=a("code"),KRo=o("model.train()"),ZRo=l(),F(R1.$$.fragment),IXe=l(),Yi=a("h2"),P1=a("a"),Lhe=a("span"),F(JL.$$.fragment),ePo=l(),yhe=a("span"),oPo=o("AutoModelForMaskedLM"),qXe=l(),Ro=a("div"),F(YL.$$.fragment),rPo=l(),Ki=a("p"),tPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),QO=a("a"),aPo=o("from_pretrained()"),nPo=o(" class method or the "),WO=a("a"),sPo=o("from_config()"),lPo=o(` class
method.`),iPo=l(),KL=a("p"),dPo=o("This class cannot be instantiated directly using "),xhe=a("code"),cPo=o("__init__()"),fPo=o(" (throws an error)."),mPo=l(),ft=a("div"),F(ZL.$$.fragment),gPo=l(),$he=a("p"),hPo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),pPo=l(),Zi=a("p"),_Po=o(`Note:
Loading a model from its configuration file does `),khe=a("strong"),uPo=o("not"),bPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HO=a("a"),vPo=o("from_pretrained()"),FPo=o(" to load the model weights."),TPo=l(),F(B1.$$.fragment),MPo=l(),eo=a("div"),F(ey.$$.fragment),EPo=l(),She=a("p"),CPo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),wPo=l(),ja=a("p"),APo=o("The model class to instantiate is selected based on the "),Rhe=a("code"),LPo=o("model_type"),yPo=o(` property of the config object (either
passed as an argument or loaded from `),Phe=a("code"),xPo=o("pretrained_model_name_or_path"),$Po=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bhe=a("code"),kPo=o("pretrained_model_name_or_path"),SPo=o(":"),RPo=l(),W=a("ul"),N1=a("li"),Nhe=a("strong"),PPo=o("albert"),BPo=o(" \u2014 "),UO=a("a"),NPo=o("AlbertForMaskedLM"),IPo=o(" (ALBERT model)"),qPo=l(),I1=a("li"),Ihe=a("strong"),jPo=o("bart"),DPo=o(" \u2014 "),JO=a("a"),GPo=o("BartForConditionalGeneration"),OPo=o(" (BART model)"),VPo=l(),q1=a("li"),qhe=a("strong"),XPo=o("bert"),zPo=o(" \u2014 "),YO=a("a"),QPo=o("BertForMaskedLM"),WPo=o(" (BERT model)"),HPo=l(),j1=a("li"),jhe=a("strong"),UPo=o("big_bird"),JPo=o(" \u2014 "),KO=a("a"),YPo=o("BigBirdForMaskedLM"),KPo=o(" (BigBird model)"),ZPo=l(),D1=a("li"),Dhe=a("strong"),eBo=o("camembert"),oBo=o(" \u2014 "),ZO=a("a"),rBo=o("CamembertForMaskedLM"),tBo=o(" (CamemBERT model)"),aBo=l(),G1=a("li"),Ghe=a("strong"),nBo=o("convbert"),sBo=o(" \u2014 "),eV=a("a"),lBo=o("ConvBertForMaskedLM"),iBo=o(" (ConvBERT model)"),dBo=l(),O1=a("li"),Ohe=a("strong"),cBo=o("data2vec-text"),fBo=o(" \u2014 "),oV=a("a"),mBo=o("Data2VecTextForMaskedLM"),gBo=o(" (Data2VecText model)"),hBo=l(),V1=a("li"),Vhe=a("strong"),pBo=o("deberta"),_Bo=o(" \u2014 "),rV=a("a"),uBo=o("DebertaForMaskedLM"),bBo=o(" (DeBERTa model)"),vBo=l(),X1=a("li"),Xhe=a("strong"),FBo=o("deberta-v2"),TBo=o(" \u2014 "),tV=a("a"),MBo=o("DebertaV2ForMaskedLM"),EBo=o(" (DeBERTa-v2 model)"),CBo=l(),z1=a("li"),zhe=a("strong"),wBo=o("distilbert"),ABo=o(" \u2014 "),aV=a("a"),LBo=o("DistilBertForMaskedLM"),yBo=o(" (DistilBERT model)"),xBo=l(),Q1=a("li"),Qhe=a("strong"),$Bo=o("electra"),kBo=o(" \u2014 "),nV=a("a"),SBo=o("ElectraForMaskedLM"),RBo=o(" (ELECTRA model)"),PBo=l(),W1=a("li"),Whe=a("strong"),BBo=o("flaubert"),NBo=o(" \u2014 "),sV=a("a"),IBo=o("FlaubertWithLMHeadModel"),qBo=o(" (FlauBERT model)"),jBo=l(),H1=a("li"),Hhe=a("strong"),DBo=o("fnet"),GBo=o(" \u2014 "),lV=a("a"),OBo=o("FNetForMaskedLM"),VBo=o(" (FNet model)"),XBo=l(),U1=a("li"),Uhe=a("strong"),zBo=o("funnel"),QBo=o(" \u2014 "),iV=a("a"),WBo=o("FunnelForMaskedLM"),HBo=o(" (Funnel Transformer model)"),UBo=l(),J1=a("li"),Jhe=a("strong"),JBo=o("ibert"),YBo=o(" \u2014 "),dV=a("a"),KBo=o("IBertForMaskedLM"),ZBo=o(" (I-BERT model)"),eNo=l(),Y1=a("li"),Yhe=a("strong"),oNo=o("layoutlm"),rNo=o(" \u2014 "),cV=a("a"),tNo=o("LayoutLMForMaskedLM"),aNo=o(" (LayoutLM model)"),nNo=l(),K1=a("li"),Khe=a("strong"),sNo=o("longformer"),lNo=o(" \u2014 "),fV=a("a"),iNo=o("LongformerForMaskedLM"),dNo=o(" (Longformer model)"),cNo=l(),Z1=a("li"),Zhe=a("strong"),fNo=o("luke"),mNo=o(" \u2014 "),mV=a("a"),gNo=o("LukeForMaskedLM"),hNo=o(" (LUKE model)"),pNo=l(),eb=a("li"),epe=a("strong"),_No=o("mbart"),uNo=o(" \u2014 "),gV=a("a"),bNo=o("MBartForConditionalGeneration"),vNo=o(" (mBART model)"),FNo=l(),ob=a("li"),ope=a("strong"),TNo=o("megatron-bert"),MNo=o(" \u2014 "),hV=a("a"),ENo=o("MegatronBertForMaskedLM"),CNo=o(" (Megatron-BERT model)"),wNo=l(),rb=a("li"),rpe=a("strong"),ANo=o("mobilebert"),LNo=o(" \u2014 "),pV=a("a"),yNo=o("MobileBertForMaskedLM"),xNo=o(" (MobileBERT model)"),$No=l(),tb=a("li"),tpe=a("strong"),kNo=o("mpnet"),SNo=o(" \u2014 "),_V=a("a"),RNo=o("MPNetForMaskedLM"),PNo=o(" (MPNet model)"),BNo=l(),ab=a("li"),ape=a("strong"),NNo=o("mvp"),INo=o(" \u2014 "),uV=a("a"),qNo=o("MvpForConditionalGeneration"),jNo=o(" (MVP model)"),DNo=l(),nb=a("li"),npe=a("strong"),GNo=o("nezha"),ONo=o(" \u2014 "),bV=a("a"),VNo=o("NezhaForMaskedLM"),XNo=o(" (Nezha model)"),zNo=l(),sb=a("li"),spe=a("strong"),QNo=o("nystromformer"),WNo=o(" \u2014 "),vV=a("a"),HNo=o("NystromformerForMaskedLM"),UNo=o(" (Nystr\xF6mformer model)"),JNo=l(),lb=a("li"),lpe=a("strong"),YNo=o("perceiver"),KNo=o(" \u2014 "),FV=a("a"),ZNo=o("PerceiverForMaskedLM"),eIo=o(" (Perceiver model)"),oIo=l(),ib=a("li"),ipe=a("strong"),rIo=o("qdqbert"),tIo=o(" \u2014 "),TV=a("a"),aIo=o("QDQBertForMaskedLM"),nIo=o(" (QDQBert model)"),sIo=l(),db=a("li"),dpe=a("strong"),lIo=o("reformer"),iIo=o(" \u2014 "),MV=a("a"),dIo=o("ReformerForMaskedLM"),cIo=o(" (Reformer model)"),fIo=l(),cb=a("li"),cpe=a("strong"),mIo=o("rembert"),gIo=o(" \u2014 "),EV=a("a"),hIo=o("RemBertForMaskedLM"),pIo=o(" (RemBERT model)"),_Io=l(),fb=a("li"),fpe=a("strong"),uIo=o("roberta"),bIo=o(" \u2014 "),CV=a("a"),vIo=o("RobertaForMaskedLM"),FIo=o(" (RoBERTa model)"),TIo=l(),mb=a("li"),mpe=a("strong"),MIo=o("roformer"),EIo=o(" \u2014 "),wV=a("a"),CIo=o("RoFormerForMaskedLM"),wIo=o(" (RoFormer model)"),AIo=l(),gb=a("li"),gpe=a("strong"),LIo=o("squeezebert"),yIo=o(" \u2014 "),AV=a("a"),xIo=o("SqueezeBertForMaskedLM"),$Io=o(" (SqueezeBERT model)"),kIo=l(),hb=a("li"),hpe=a("strong"),SIo=o("tapas"),RIo=o(" \u2014 "),LV=a("a"),PIo=o("TapasForMaskedLM"),BIo=o(" (TAPAS model)"),NIo=l(),pb=a("li"),ppe=a("strong"),IIo=o("wav2vec2"),qIo=o(" \u2014 "),_pe=a("code"),jIo=o("Wav2Vec2ForMaskedLM"),DIo=o(" (Wav2Vec2 model)"),GIo=l(),_b=a("li"),upe=a("strong"),OIo=o("xlm"),VIo=o(" \u2014 "),yV=a("a"),XIo=o("XLMWithLMHeadModel"),zIo=o(" (XLM model)"),QIo=l(),ub=a("li"),bpe=a("strong"),WIo=o("xlm-roberta"),HIo=o(" \u2014 "),xV=a("a"),UIo=o("XLMRobertaForMaskedLM"),JIo=o(" (XLM-RoBERTa model)"),YIo=l(),bb=a("li"),vpe=a("strong"),KIo=o("xlm-roberta-xl"),ZIo=o(" \u2014 "),$V=a("a"),eqo=o("XLMRobertaXLForMaskedLM"),oqo=o(" (XLM-RoBERTa-XL model)"),rqo=l(),vb=a("li"),Fpe=a("strong"),tqo=o("yoso"),aqo=o(" \u2014 "),kV=a("a"),nqo=o("YosoForMaskedLM"),sqo=o(" (YOSO model)"),lqo=l(),Fb=a("p"),iqo=o("The model is set in evaluation mode by default using "),Tpe=a("code"),dqo=o("model.eval()"),cqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mpe=a("code"),fqo=o("model.train()"),mqo=l(),F(Tb.$$.fragment),jXe=l(),ed=a("h2"),Mb=a("a"),Epe=a("span"),F(oy.$$.fragment),gqo=l(),Cpe=a("span"),hqo=o("AutoModelForSeq2SeqLM"),DXe=l(),Po=a("div"),F(ry.$$.fragment),pqo=l(),od=a("p"),_qo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),SV=a("a"),uqo=o("from_pretrained()"),bqo=o(" class method or the "),RV=a("a"),vqo=o("from_config()"),Fqo=o(` class
method.`),Tqo=l(),ty=a("p"),Mqo=o("This class cannot be instantiated directly using "),wpe=a("code"),Eqo=o("__init__()"),Cqo=o(" (throws an error)."),wqo=l(),mt=a("div"),F(ay.$$.fragment),Aqo=l(),Ape=a("p"),Lqo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),yqo=l(),rd=a("p"),xqo=o(`Note:
Loading a model from its configuration file does `),Lpe=a("strong"),$qo=o("not"),kqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PV=a("a"),Sqo=o("from_pretrained()"),Rqo=o(" to load the model weights."),Pqo=l(),F(Eb.$$.fragment),Bqo=l(),oo=a("div"),F(ny.$$.fragment),Nqo=l(),ype=a("p"),Iqo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),qqo=l(),Da=a("p"),jqo=o("The model class to instantiate is selected based on the "),xpe=a("code"),Dqo=o("model_type"),Gqo=o(` property of the config object (either
passed as an argument or loaded from `),$pe=a("code"),Oqo=o("pretrained_model_name_or_path"),Vqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kpe=a("code"),Xqo=o("pretrained_model_name_or_path"),zqo=o(":"),Qqo=l(),fe=a("ul"),Cb=a("li"),Spe=a("strong"),Wqo=o("bart"),Hqo=o(" \u2014 "),BV=a("a"),Uqo=o("BartForConditionalGeneration"),Jqo=o(" (BART model)"),Yqo=l(),wb=a("li"),Rpe=a("strong"),Kqo=o("bigbird_pegasus"),Zqo=o(" \u2014 "),NV=a("a"),ejo=o("BigBirdPegasusForConditionalGeneration"),ojo=o(" (BigBird-Pegasus model)"),rjo=l(),Ab=a("li"),Ppe=a("strong"),tjo=o("blenderbot"),ajo=o(" \u2014 "),IV=a("a"),njo=o("BlenderbotForConditionalGeneration"),sjo=o(" (Blenderbot model)"),ljo=l(),Lb=a("li"),Bpe=a("strong"),ijo=o("blenderbot-small"),djo=o(" \u2014 "),qV=a("a"),cjo=o("BlenderbotSmallForConditionalGeneration"),fjo=o(" (BlenderbotSmall model)"),mjo=l(),yb=a("li"),Npe=a("strong"),gjo=o("encoder-decoder"),hjo=o(" \u2014 "),jV=a("a"),pjo=o("EncoderDecoderModel"),_jo=o(" (Encoder decoder model)"),ujo=l(),xb=a("li"),Ipe=a("strong"),bjo=o("fsmt"),vjo=o(" \u2014 "),DV=a("a"),Fjo=o("FSMTForConditionalGeneration"),Tjo=o(" (FairSeq Machine-Translation model)"),Mjo=l(),$b=a("li"),qpe=a("strong"),Ejo=o("led"),Cjo=o(" \u2014 "),GV=a("a"),wjo=o("LEDForConditionalGeneration"),Ajo=o(" (LED model)"),Ljo=l(),kb=a("li"),jpe=a("strong"),yjo=o("longt5"),xjo=o(" \u2014 "),OV=a("a"),$jo=o("LongT5ForConditionalGeneration"),kjo=o(" (LongT5 model)"),Sjo=l(),Sb=a("li"),Dpe=a("strong"),Rjo=o("m2m_100"),Pjo=o(" \u2014 "),VV=a("a"),Bjo=o("M2M100ForConditionalGeneration"),Njo=o(" (M2M100 model)"),Ijo=l(),Rb=a("li"),Gpe=a("strong"),qjo=o("marian"),jjo=o(" \u2014 "),XV=a("a"),Djo=o("MarianMTModel"),Gjo=o(" (Marian model)"),Ojo=l(),Pb=a("li"),Ope=a("strong"),Vjo=o("mbart"),Xjo=o(" \u2014 "),zV=a("a"),zjo=o("MBartForConditionalGeneration"),Qjo=o(" (mBART model)"),Wjo=l(),Bb=a("li"),Vpe=a("strong"),Hjo=o("mt5"),Ujo=o(" \u2014 "),QV=a("a"),Jjo=o("MT5ForConditionalGeneration"),Yjo=o(" (MT5 model)"),Kjo=l(),Nb=a("li"),Xpe=a("strong"),Zjo=o("mvp"),eDo=o(" \u2014 "),WV=a("a"),oDo=o("MvpForConditionalGeneration"),rDo=o(" (MVP model)"),tDo=l(),Ib=a("li"),zpe=a("strong"),aDo=o("nllb"),nDo=o(" \u2014 "),HV=a("a"),sDo=o("M2M100ForConditionalGeneration"),lDo=o(" (NLLB model)"),iDo=l(),qb=a("li"),Qpe=a("strong"),dDo=o("pegasus"),cDo=o(" \u2014 "),UV=a("a"),fDo=o("PegasusForConditionalGeneration"),mDo=o(" (Pegasus model)"),gDo=l(),jb=a("li"),Wpe=a("strong"),hDo=o("plbart"),pDo=o(" \u2014 "),JV=a("a"),_Do=o("PLBartForConditionalGeneration"),uDo=o(" (PLBart model)"),bDo=l(),Db=a("li"),Hpe=a("strong"),vDo=o("prophetnet"),FDo=o(" \u2014 "),YV=a("a"),TDo=o("ProphetNetForConditionalGeneration"),MDo=o(" (ProphetNet model)"),EDo=l(),Gb=a("li"),Upe=a("strong"),CDo=o("t5"),wDo=o(" \u2014 "),KV=a("a"),ADo=o("T5ForConditionalGeneration"),LDo=o(" (T5 model)"),yDo=l(),Ob=a("li"),Jpe=a("strong"),xDo=o("xlm-prophetnet"),$Do=o(" \u2014 "),ZV=a("a"),kDo=o("XLMProphetNetForConditionalGeneration"),SDo=o(" (XLM-ProphetNet model)"),RDo=l(),Vb=a("p"),PDo=o("The model is set in evaluation mode by default using "),Ype=a("code"),BDo=o("model.eval()"),NDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kpe=a("code"),IDo=o("model.train()"),qDo=l(),F(Xb.$$.fragment),GXe=l(),td=a("h2"),zb=a("a"),Zpe=a("span"),F(sy.$$.fragment),jDo=l(),e_e=a("span"),DDo=o("AutoModelForSequenceClassification"),OXe=l(),Bo=a("div"),F(ly.$$.fragment),GDo=l(),ad=a("p"),ODo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),eX=a("a"),VDo=o("from_pretrained()"),XDo=o(" class method or the "),oX=a("a"),zDo=o("from_config()"),QDo=o(` class
method.`),WDo=l(),iy=a("p"),HDo=o("This class cannot be instantiated directly using "),o_e=a("code"),UDo=o("__init__()"),JDo=o(" (throws an error)."),YDo=l(),gt=a("div"),F(dy.$$.fragment),KDo=l(),r_e=a("p"),ZDo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),eGo=l(),nd=a("p"),oGo=o(`Note:
Loading a model from its configuration file does `),t_e=a("strong"),rGo=o("not"),tGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rX=a("a"),aGo=o("from_pretrained()"),nGo=o(" to load the model weights."),sGo=l(),F(Qb.$$.fragment),lGo=l(),ro=a("div"),F(cy.$$.fragment),iGo=l(),a_e=a("p"),dGo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),cGo=l(),Ga=a("p"),fGo=o("The model class to instantiate is selected based on the "),n_e=a("code"),mGo=o("model_type"),gGo=o(` property of the config object (either
passed as an argument or loaded from `),s_e=a("code"),hGo=o("pretrained_model_name_or_path"),pGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l_e=a("code"),_Go=o("pretrained_model_name_or_path"),uGo=o(":"),bGo=l(),I=a("ul"),Wb=a("li"),i_e=a("strong"),vGo=o("albert"),FGo=o(" \u2014 "),tX=a("a"),TGo=o("AlbertForSequenceClassification"),MGo=o(" (ALBERT model)"),EGo=l(),Hb=a("li"),d_e=a("strong"),CGo=o("bart"),wGo=o(" \u2014 "),aX=a("a"),AGo=o("BartForSequenceClassification"),LGo=o(" (BART model)"),yGo=l(),Ub=a("li"),c_e=a("strong"),xGo=o("bert"),$Go=o(" \u2014 "),nX=a("a"),kGo=o("BertForSequenceClassification"),SGo=o(" (BERT model)"),RGo=l(),Jb=a("li"),f_e=a("strong"),PGo=o("big_bird"),BGo=o(" \u2014 "),sX=a("a"),NGo=o("BigBirdForSequenceClassification"),IGo=o(" (BigBird model)"),qGo=l(),Yb=a("li"),m_e=a("strong"),jGo=o("bigbird_pegasus"),DGo=o(" \u2014 "),lX=a("a"),GGo=o("BigBirdPegasusForSequenceClassification"),OGo=o(" (BigBird-Pegasus model)"),VGo=l(),Kb=a("li"),g_e=a("strong"),XGo=o("bloom"),zGo=o(" \u2014 "),iX=a("a"),QGo=o("BloomForSequenceClassification"),WGo=o(" (BLOOM model)"),HGo=l(),Zb=a("li"),h_e=a("strong"),UGo=o("camembert"),JGo=o(" \u2014 "),dX=a("a"),YGo=o("CamembertForSequenceClassification"),KGo=o(" (CamemBERT model)"),ZGo=l(),ev=a("li"),p_e=a("strong"),eOo=o("canine"),oOo=o(" \u2014 "),cX=a("a"),rOo=o("CanineForSequenceClassification"),tOo=o(" (CANINE model)"),aOo=l(),ov=a("li"),__e=a("strong"),nOo=o("convbert"),sOo=o(" \u2014 "),fX=a("a"),lOo=o("ConvBertForSequenceClassification"),iOo=o(" (ConvBERT model)"),dOo=l(),rv=a("li"),u_e=a("strong"),cOo=o("ctrl"),fOo=o(" \u2014 "),mX=a("a"),mOo=o("CTRLForSequenceClassification"),gOo=o(" (CTRL model)"),hOo=l(),tv=a("li"),b_e=a("strong"),pOo=o("data2vec-text"),_Oo=o(" \u2014 "),gX=a("a"),uOo=o("Data2VecTextForSequenceClassification"),bOo=o(" (Data2VecText model)"),vOo=l(),av=a("li"),v_e=a("strong"),FOo=o("deberta"),TOo=o(" \u2014 "),hX=a("a"),MOo=o("DebertaForSequenceClassification"),EOo=o(" (DeBERTa model)"),COo=l(),nv=a("li"),F_e=a("strong"),wOo=o("deberta-v2"),AOo=o(" \u2014 "),pX=a("a"),LOo=o("DebertaV2ForSequenceClassification"),yOo=o(" (DeBERTa-v2 model)"),xOo=l(),sv=a("li"),T_e=a("strong"),$Oo=o("distilbert"),kOo=o(" \u2014 "),_X=a("a"),SOo=o("DistilBertForSequenceClassification"),ROo=o(" (DistilBERT model)"),POo=l(),lv=a("li"),M_e=a("strong"),BOo=o("electra"),NOo=o(" \u2014 "),uX=a("a"),IOo=o("ElectraForSequenceClassification"),qOo=o(" (ELECTRA model)"),jOo=l(),iv=a("li"),E_e=a("strong"),DOo=o("flaubert"),GOo=o(" \u2014 "),bX=a("a"),OOo=o("FlaubertForSequenceClassification"),VOo=o(" (FlauBERT model)"),XOo=l(),dv=a("li"),C_e=a("strong"),zOo=o("fnet"),QOo=o(" \u2014 "),vX=a("a"),WOo=o("FNetForSequenceClassification"),HOo=o(" (FNet model)"),UOo=l(),cv=a("li"),w_e=a("strong"),JOo=o("funnel"),YOo=o(" \u2014 "),FX=a("a"),KOo=o("FunnelForSequenceClassification"),ZOo=o(" (Funnel Transformer model)"),eVo=l(),fv=a("li"),A_e=a("strong"),oVo=o("gpt2"),rVo=o(" \u2014 "),TX=a("a"),tVo=o("GPT2ForSequenceClassification"),aVo=o(" (OpenAI GPT-2 model)"),nVo=l(),mv=a("li"),L_e=a("strong"),sVo=o("gpt_neo"),lVo=o(" \u2014 "),MX=a("a"),iVo=o("GPTNeoForSequenceClassification"),dVo=o(" (GPT Neo model)"),cVo=l(),gv=a("li"),y_e=a("strong"),fVo=o("gptj"),mVo=o(" \u2014 "),EX=a("a"),gVo=o("GPTJForSequenceClassification"),hVo=o(" (GPT-J model)"),pVo=l(),hv=a("li"),x_e=a("strong"),_Vo=o("ibert"),uVo=o(" \u2014 "),CX=a("a"),bVo=o("IBertForSequenceClassification"),vVo=o(" (I-BERT model)"),FVo=l(),pv=a("li"),$_e=a("strong"),TVo=o("layoutlm"),MVo=o(" \u2014 "),wX=a("a"),EVo=o("LayoutLMForSequenceClassification"),CVo=o(" (LayoutLM model)"),wVo=l(),_v=a("li"),k_e=a("strong"),AVo=o("layoutlmv2"),LVo=o(" \u2014 "),AX=a("a"),yVo=o("LayoutLMv2ForSequenceClassification"),xVo=o(" (LayoutLMv2 model)"),$Vo=l(),uv=a("li"),S_e=a("strong"),kVo=o("layoutlmv3"),SVo=o(" \u2014 "),LX=a("a"),RVo=o("LayoutLMv3ForSequenceClassification"),PVo=o(" (LayoutLMv3 model)"),BVo=l(),bv=a("li"),R_e=a("strong"),NVo=o("led"),IVo=o(" \u2014 "),yX=a("a"),qVo=o("LEDForSequenceClassification"),jVo=o(" (LED model)"),DVo=l(),vv=a("li"),P_e=a("strong"),GVo=o("longformer"),OVo=o(" \u2014 "),xX=a("a"),VVo=o("LongformerForSequenceClassification"),XVo=o(" (Longformer model)"),zVo=l(),Fv=a("li"),B_e=a("strong"),QVo=o("mbart"),WVo=o(" \u2014 "),$X=a("a"),HVo=o("MBartForSequenceClassification"),UVo=o(" (mBART model)"),JVo=l(),Tv=a("li"),N_e=a("strong"),YVo=o("megatron-bert"),KVo=o(" \u2014 "),kX=a("a"),ZVo=o("MegatronBertForSequenceClassification"),eXo=o(" (Megatron-BERT model)"),oXo=l(),Mv=a("li"),I_e=a("strong"),rXo=o("mobilebert"),tXo=o(" \u2014 "),SX=a("a"),aXo=o("MobileBertForSequenceClassification"),nXo=o(" (MobileBERT model)"),sXo=l(),Ev=a("li"),q_e=a("strong"),lXo=o("mpnet"),iXo=o(" \u2014 "),RX=a("a"),dXo=o("MPNetForSequenceClassification"),cXo=o(" (MPNet model)"),fXo=l(),Cv=a("li"),j_e=a("strong"),mXo=o("mvp"),gXo=o(" \u2014 "),PX=a("a"),hXo=o("MvpForSequenceClassification"),pXo=o(" (MVP model)"),_Xo=l(),wv=a("li"),D_e=a("strong"),uXo=o("nezha"),bXo=o(" \u2014 "),BX=a("a"),vXo=o("NezhaForSequenceClassification"),FXo=o(" (Nezha model)"),TXo=l(),Av=a("li"),G_e=a("strong"),MXo=o("nystromformer"),EXo=o(" \u2014 "),NX=a("a"),CXo=o("NystromformerForSequenceClassification"),wXo=o(" (Nystr\xF6mformer model)"),AXo=l(),Lv=a("li"),O_e=a("strong"),LXo=o("openai-gpt"),yXo=o(" \u2014 "),IX=a("a"),xXo=o("OpenAIGPTForSequenceClassification"),$Xo=o(" (OpenAI GPT model)"),kXo=l(),yv=a("li"),V_e=a("strong"),SXo=o("perceiver"),RXo=o(" \u2014 "),qX=a("a"),PXo=o("PerceiverForSequenceClassification"),BXo=o(" (Perceiver model)"),NXo=l(),xv=a("li"),X_e=a("strong"),IXo=o("plbart"),qXo=o(" \u2014 "),jX=a("a"),jXo=o("PLBartForSequenceClassification"),DXo=o(" (PLBart model)"),GXo=l(),$v=a("li"),z_e=a("strong"),OXo=o("qdqbert"),VXo=o(" \u2014 "),DX=a("a"),XXo=o("QDQBertForSequenceClassification"),zXo=o(" (QDQBert model)"),QXo=l(),kv=a("li"),Q_e=a("strong"),WXo=o("reformer"),HXo=o(" \u2014 "),GX=a("a"),UXo=o("ReformerForSequenceClassification"),JXo=o(" (Reformer model)"),YXo=l(),Sv=a("li"),W_e=a("strong"),KXo=o("rembert"),ZXo=o(" \u2014 "),OX=a("a"),ezo=o("RemBertForSequenceClassification"),ozo=o(" (RemBERT model)"),rzo=l(),Rv=a("li"),H_e=a("strong"),tzo=o("roberta"),azo=o(" \u2014 "),VX=a("a"),nzo=o("RobertaForSequenceClassification"),szo=o(" (RoBERTa model)"),lzo=l(),Pv=a("li"),U_e=a("strong"),izo=o("roformer"),dzo=o(" \u2014 "),XX=a("a"),czo=o("RoFormerForSequenceClassification"),fzo=o(" (RoFormer model)"),mzo=l(),Bv=a("li"),J_e=a("strong"),gzo=o("squeezebert"),hzo=o(" \u2014 "),zX=a("a"),pzo=o("SqueezeBertForSequenceClassification"),_zo=o(" (SqueezeBERT model)"),uzo=l(),Nv=a("li"),Y_e=a("strong"),bzo=o("tapas"),vzo=o(" \u2014 "),QX=a("a"),Fzo=o("TapasForSequenceClassification"),Tzo=o(" (TAPAS model)"),Mzo=l(),Iv=a("li"),K_e=a("strong"),Ezo=o("transfo-xl"),Czo=o(" \u2014 "),WX=a("a"),wzo=o("TransfoXLForSequenceClassification"),Azo=o(" (Transformer-XL model)"),Lzo=l(),qv=a("li"),Z_e=a("strong"),yzo=o("xlm"),xzo=o(" \u2014 "),HX=a("a"),$zo=o("XLMForSequenceClassification"),kzo=o(" (XLM model)"),Szo=l(),jv=a("li"),eue=a("strong"),Rzo=o("xlm-roberta"),Pzo=o(" \u2014 "),UX=a("a"),Bzo=o("XLMRobertaForSequenceClassification"),Nzo=o(" (XLM-RoBERTa model)"),Izo=l(),Dv=a("li"),oue=a("strong"),qzo=o("xlm-roberta-xl"),jzo=o(" \u2014 "),JX=a("a"),Dzo=o("XLMRobertaXLForSequenceClassification"),Gzo=o(" (XLM-RoBERTa-XL model)"),Ozo=l(),Gv=a("li"),rue=a("strong"),Vzo=o("xlnet"),Xzo=o(" \u2014 "),YX=a("a"),zzo=o("XLNetForSequenceClassification"),Qzo=o(" (XLNet model)"),Wzo=l(),Ov=a("li"),tue=a("strong"),Hzo=o("yoso"),Uzo=o(" \u2014 "),KX=a("a"),Jzo=o("YosoForSequenceClassification"),Yzo=o(" (YOSO model)"),Kzo=l(),Vv=a("p"),Zzo=o("The model is set in evaluation mode by default using "),aue=a("code"),eQo=o("model.eval()"),oQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nue=a("code"),rQo=o("model.train()"),tQo=l(),F(Xv.$$.fragment),VXe=l(),sd=a("h2"),zv=a("a"),sue=a("span"),F(fy.$$.fragment),aQo=l(),lue=a("span"),nQo=o("AutoModelForMultipleChoice"),XXe=l(),No=a("div"),F(my.$$.fragment),sQo=l(),ld=a("p"),lQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),ZX=a("a"),iQo=o("from_pretrained()"),dQo=o(" class method or the "),ez=a("a"),cQo=o("from_config()"),fQo=o(` class
method.`),mQo=l(),gy=a("p"),gQo=o("This class cannot be instantiated directly using "),iue=a("code"),hQo=o("__init__()"),pQo=o(" (throws an error)."),_Qo=l(),ht=a("div"),F(hy.$$.fragment),uQo=l(),due=a("p"),bQo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),vQo=l(),id=a("p"),FQo=o(`Note:
Loading a model from its configuration file does `),cue=a("strong"),TQo=o("not"),MQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oz=a("a"),EQo=o("from_pretrained()"),CQo=o(" to load the model weights."),wQo=l(),F(Qv.$$.fragment),AQo=l(),to=a("div"),F(py.$$.fragment),LQo=l(),fue=a("p"),yQo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),xQo=l(),Oa=a("p"),$Qo=o("The model class to instantiate is selected based on the "),mue=a("code"),kQo=o("model_type"),SQo=o(` property of the config object (either
passed as an argument or loaded from `),gue=a("code"),RQo=o("pretrained_model_name_or_path"),PQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hue=a("code"),BQo=o("pretrained_model_name_or_path"),NQo=o(":"),IQo=l(),Z=a("ul"),Wv=a("li"),pue=a("strong"),qQo=o("albert"),jQo=o(" \u2014 "),rz=a("a"),DQo=o("AlbertForMultipleChoice"),GQo=o(" (ALBERT model)"),OQo=l(),Hv=a("li"),_ue=a("strong"),VQo=o("bert"),XQo=o(" \u2014 "),tz=a("a"),zQo=o("BertForMultipleChoice"),QQo=o(" (BERT model)"),WQo=l(),Uv=a("li"),uue=a("strong"),HQo=o("big_bird"),UQo=o(" \u2014 "),az=a("a"),JQo=o("BigBirdForMultipleChoice"),YQo=o(" (BigBird model)"),KQo=l(),Jv=a("li"),bue=a("strong"),ZQo=o("camembert"),eWo=o(" \u2014 "),nz=a("a"),oWo=o("CamembertForMultipleChoice"),rWo=o(" (CamemBERT model)"),tWo=l(),Yv=a("li"),vue=a("strong"),aWo=o("canine"),nWo=o(" \u2014 "),sz=a("a"),sWo=o("CanineForMultipleChoice"),lWo=o(" (CANINE model)"),iWo=l(),Kv=a("li"),Fue=a("strong"),dWo=o("convbert"),cWo=o(" \u2014 "),lz=a("a"),fWo=o("ConvBertForMultipleChoice"),mWo=o(" (ConvBERT model)"),gWo=l(),Zv=a("li"),Tue=a("strong"),hWo=o("data2vec-text"),pWo=o(" \u2014 "),iz=a("a"),_Wo=o("Data2VecTextForMultipleChoice"),uWo=o(" (Data2VecText model)"),bWo=l(),e0=a("li"),Mue=a("strong"),vWo=o("deberta-v2"),FWo=o(" \u2014 "),dz=a("a"),TWo=o("DebertaV2ForMultipleChoice"),MWo=o(" (DeBERTa-v2 model)"),EWo=l(),o0=a("li"),Eue=a("strong"),CWo=o("distilbert"),wWo=o(" \u2014 "),cz=a("a"),AWo=o("DistilBertForMultipleChoice"),LWo=o(" (DistilBERT model)"),yWo=l(),r0=a("li"),Cue=a("strong"),xWo=o("electra"),$Wo=o(" \u2014 "),fz=a("a"),kWo=o("ElectraForMultipleChoice"),SWo=o(" (ELECTRA model)"),RWo=l(),t0=a("li"),wue=a("strong"),PWo=o("flaubert"),BWo=o(" \u2014 "),mz=a("a"),NWo=o("FlaubertForMultipleChoice"),IWo=o(" (FlauBERT model)"),qWo=l(),a0=a("li"),Aue=a("strong"),jWo=o("fnet"),DWo=o(" \u2014 "),gz=a("a"),GWo=o("FNetForMultipleChoice"),OWo=o(" (FNet model)"),VWo=l(),n0=a("li"),Lue=a("strong"),XWo=o("funnel"),zWo=o(" \u2014 "),hz=a("a"),QWo=o("FunnelForMultipleChoice"),WWo=o(" (Funnel Transformer model)"),HWo=l(),s0=a("li"),yue=a("strong"),UWo=o("ibert"),JWo=o(" \u2014 "),pz=a("a"),YWo=o("IBertForMultipleChoice"),KWo=o(" (I-BERT model)"),ZWo=l(),l0=a("li"),xue=a("strong"),eHo=o("longformer"),oHo=o(" \u2014 "),_z=a("a"),rHo=o("LongformerForMultipleChoice"),tHo=o(" (Longformer model)"),aHo=l(),i0=a("li"),$ue=a("strong"),nHo=o("megatron-bert"),sHo=o(" \u2014 "),uz=a("a"),lHo=o("MegatronBertForMultipleChoice"),iHo=o(" (Megatron-BERT model)"),dHo=l(),d0=a("li"),kue=a("strong"),cHo=o("mobilebert"),fHo=o(" \u2014 "),bz=a("a"),mHo=o("MobileBertForMultipleChoice"),gHo=o(" (MobileBERT model)"),hHo=l(),c0=a("li"),Sue=a("strong"),pHo=o("mpnet"),_Ho=o(" \u2014 "),vz=a("a"),uHo=o("MPNetForMultipleChoice"),bHo=o(" (MPNet model)"),vHo=l(),f0=a("li"),Rue=a("strong"),FHo=o("nezha"),THo=o(" \u2014 "),Fz=a("a"),MHo=o("NezhaForMultipleChoice"),EHo=o(" (Nezha model)"),CHo=l(),m0=a("li"),Pue=a("strong"),wHo=o("nystromformer"),AHo=o(" \u2014 "),Tz=a("a"),LHo=o("NystromformerForMultipleChoice"),yHo=o(" (Nystr\xF6mformer model)"),xHo=l(),g0=a("li"),Bue=a("strong"),$Ho=o("qdqbert"),kHo=o(" \u2014 "),Mz=a("a"),SHo=o("QDQBertForMultipleChoice"),RHo=o(" (QDQBert model)"),PHo=l(),h0=a("li"),Nue=a("strong"),BHo=o("rembert"),NHo=o(" \u2014 "),Ez=a("a"),IHo=o("RemBertForMultipleChoice"),qHo=o(" (RemBERT model)"),jHo=l(),p0=a("li"),Iue=a("strong"),DHo=o("roberta"),GHo=o(" \u2014 "),Cz=a("a"),OHo=o("RobertaForMultipleChoice"),VHo=o(" (RoBERTa model)"),XHo=l(),_0=a("li"),que=a("strong"),zHo=o("roformer"),QHo=o(" \u2014 "),wz=a("a"),WHo=o("RoFormerForMultipleChoice"),HHo=o(" (RoFormer model)"),UHo=l(),u0=a("li"),jue=a("strong"),JHo=o("squeezebert"),YHo=o(" \u2014 "),Az=a("a"),KHo=o("SqueezeBertForMultipleChoice"),ZHo=o(" (SqueezeBERT model)"),eUo=l(),b0=a("li"),Due=a("strong"),oUo=o("xlm"),rUo=o(" \u2014 "),Lz=a("a"),tUo=o("XLMForMultipleChoice"),aUo=o(" (XLM model)"),nUo=l(),v0=a("li"),Gue=a("strong"),sUo=o("xlm-roberta"),lUo=o(" \u2014 "),yz=a("a"),iUo=o("XLMRobertaForMultipleChoice"),dUo=o(" (XLM-RoBERTa model)"),cUo=l(),F0=a("li"),Oue=a("strong"),fUo=o("xlm-roberta-xl"),mUo=o(" \u2014 "),xz=a("a"),gUo=o("XLMRobertaXLForMultipleChoice"),hUo=o(" (XLM-RoBERTa-XL model)"),pUo=l(),T0=a("li"),Vue=a("strong"),_Uo=o("xlnet"),uUo=o(" \u2014 "),$z=a("a"),bUo=o("XLNetForMultipleChoice"),vUo=o(" (XLNet model)"),FUo=l(),M0=a("li"),Xue=a("strong"),TUo=o("yoso"),MUo=o(" \u2014 "),kz=a("a"),EUo=o("YosoForMultipleChoice"),CUo=o(" (YOSO model)"),wUo=l(),E0=a("p"),AUo=o("The model is set in evaluation mode by default using "),zue=a("code"),LUo=o("model.eval()"),yUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Que=a("code"),xUo=o("model.train()"),$Uo=l(),F(C0.$$.fragment),zXe=l(),dd=a("h2"),w0=a("a"),Wue=a("span"),F(_y.$$.fragment),kUo=l(),Hue=a("span"),SUo=o("AutoModelForNextSentencePrediction"),QXe=l(),Io=a("div"),F(uy.$$.fragment),RUo=l(),cd=a("p"),PUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Sz=a("a"),BUo=o("from_pretrained()"),NUo=o(" class method or the "),Rz=a("a"),IUo=o("from_config()"),qUo=o(` class
method.`),jUo=l(),by=a("p"),DUo=o("This class cannot be instantiated directly using "),Uue=a("code"),GUo=o("__init__()"),OUo=o(" (throws an error)."),VUo=l(),pt=a("div"),F(vy.$$.fragment),XUo=l(),Jue=a("p"),zUo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),QUo=l(),fd=a("p"),WUo=o(`Note:
Loading a model from its configuration file does `),Yue=a("strong"),HUo=o("not"),UUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Pz=a("a"),JUo=o("from_pretrained()"),YUo=o(" to load the model weights."),KUo=l(),F(A0.$$.fragment),ZUo=l(),ao=a("div"),F(Fy.$$.fragment),eJo=l(),Kue=a("p"),oJo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),rJo=l(),Va=a("p"),tJo=o("The model class to instantiate is selected based on the "),Zue=a("code"),aJo=o("model_type"),nJo=o(` property of the config object (either
passed as an argument or loaded from `),e2e=a("code"),sJo=o("pretrained_model_name_or_path"),lJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o2e=a("code"),iJo=o("pretrained_model_name_or_path"),dJo=o(":"),cJo=l(),qo=a("ul"),L0=a("li"),r2e=a("strong"),fJo=o("bert"),mJo=o(" \u2014 "),Bz=a("a"),gJo=o("BertForNextSentencePrediction"),hJo=o(" (BERT model)"),pJo=l(),y0=a("li"),t2e=a("strong"),_Jo=o("fnet"),uJo=o(" \u2014 "),Nz=a("a"),bJo=o("FNetForNextSentencePrediction"),vJo=o(" (FNet model)"),FJo=l(),x0=a("li"),a2e=a("strong"),TJo=o("megatron-bert"),MJo=o(" \u2014 "),Iz=a("a"),EJo=o("MegatronBertForNextSentencePrediction"),CJo=o(" (Megatron-BERT model)"),wJo=l(),$0=a("li"),n2e=a("strong"),AJo=o("mobilebert"),LJo=o(" \u2014 "),qz=a("a"),yJo=o("MobileBertForNextSentencePrediction"),xJo=o(" (MobileBERT model)"),$Jo=l(),k0=a("li"),s2e=a("strong"),kJo=o("nezha"),SJo=o(" \u2014 "),jz=a("a"),RJo=o("NezhaForNextSentencePrediction"),PJo=o(" (Nezha model)"),BJo=l(),S0=a("li"),l2e=a("strong"),NJo=o("qdqbert"),IJo=o(" \u2014 "),Dz=a("a"),qJo=o("QDQBertForNextSentencePrediction"),jJo=o(" (QDQBert model)"),DJo=l(),R0=a("p"),GJo=o("The model is set in evaluation mode by default using "),i2e=a("code"),OJo=o("model.eval()"),VJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),d2e=a("code"),XJo=o("model.train()"),zJo=l(),F(P0.$$.fragment),WXe=l(),md=a("h2"),B0=a("a"),c2e=a("span"),F(Ty.$$.fragment),QJo=l(),f2e=a("span"),WJo=o("AutoModelForTokenClassification"),HXe=l(),jo=a("div"),F(My.$$.fragment),HJo=l(),gd=a("p"),UJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Gz=a("a"),JJo=o("from_pretrained()"),YJo=o(" class method or the "),Oz=a("a"),KJo=o("from_config()"),ZJo=o(` class
method.`),eYo=l(),Ey=a("p"),oYo=o("This class cannot be instantiated directly using "),m2e=a("code"),rYo=o("__init__()"),tYo=o(" (throws an error)."),aYo=l(),_t=a("div"),F(Cy.$$.fragment),nYo=l(),g2e=a("p"),sYo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),lYo=l(),hd=a("p"),iYo=o(`Note:
Loading a model from its configuration file does `),h2e=a("strong"),dYo=o("not"),cYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Vz=a("a"),fYo=o("from_pretrained()"),mYo=o(" to load the model weights."),gYo=l(),F(N0.$$.fragment),hYo=l(),no=a("div"),F(wy.$$.fragment),pYo=l(),p2e=a("p"),_Yo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),uYo=l(),Xa=a("p"),bYo=o("The model class to instantiate is selected based on the "),_2e=a("code"),vYo=o("model_type"),FYo=o(` property of the config object (either
passed as an argument or loaded from `),u2e=a("code"),TYo=o("pretrained_model_name_or_path"),MYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b2e=a("code"),EYo=o("pretrained_model_name_or_path"),CYo=o(":"),wYo=l(),U=a("ul"),I0=a("li"),v2e=a("strong"),AYo=o("albert"),LYo=o(" \u2014 "),Xz=a("a"),yYo=o("AlbertForTokenClassification"),xYo=o(" (ALBERT model)"),$Yo=l(),q0=a("li"),F2e=a("strong"),kYo=o("bert"),SYo=o(" \u2014 "),zz=a("a"),RYo=o("BertForTokenClassification"),PYo=o(" (BERT model)"),BYo=l(),j0=a("li"),T2e=a("strong"),NYo=o("big_bird"),IYo=o(" \u2014 "),Qz=a("a"),qYo=o("BigBirdForTokenClassification"),jYo=o(" (BigBird model)"),DYo=l(),D0=a("li"),M2e=a("strong"),GYo=o("bloom"),OYo=o(" \u2014 "),Wz=a("a"),VYo=o("BloomForTokenClassification"),XYo=o(" (BLOOM model)"),zYo=l(),G0=a("li"),E2e=a("strong"),QYo=o("camembert"),WYo=o(" \u2014 "),Hz=a("a"),HYo=o("CamembertForTokenClassification"),UYo=o(" (CamemBERT model)"),JYo=l(),O0=a("li"),C2e=a("strong"),YYo=o("canine"),KYo=o(" \u2014 "),Uz=a("a"),ZYo=o("CanineForTokenClassification"),eKo=o(" (CANINE model)"),oKo=l(),V0=a("li"),w2e=a("strong"),rKo=o("convbert"),tKo=o(" \u2014 "),Jz=a("a"),aKo=o("ConvBertForTokenClassification"),nKo=o(" (ConvBERT model)"),sKo=l(),X0=a("li"),A2e=a("strong"),lKo=o("data2vec-text"),iKo=o(" \u2014 "),Yz=a("a"),dKo=o("Data2VecTextForTokenClassification"),cKo=o(" (Data2VecText model)"),fKo=l(),z0=a("li"),L2e=a("strong"),mKo=o("deberta"),gKo=o(" \u2014 "),Kz=a("a"),hKo=o("DebertaForTokenClassification"),pKo=o(" (DeBERTa model)"),_Ko=l(),Q0=a("li"),y2e=a("strong"),uKo=o("deberta-v2"),bKo=o(" \u2014 "),Zz=a("a"),vKo=o("DebertaV2ForTokenClassification"),FKo=o(" (DeBERTa-v2 model)"),TKo=l(),W0=a("li"),x2e=a("strong"),MKo=o("distilbert"),EKo=o(" \u2014 "),eQ=a("a"),CKo=o("DistilBertForTokenClassification"),wKo=o(" (DistilBERT model)"),AKo=l(),H0=a("li"),$2e=a("strong"),LKo=o("electra"),yKo=o(" \u2014 "),oQ=a("a"),xKo=o("ElectraForTokenClassification"),$Ko=o(" (ELECTRA model)"),kKo=l(),U0=a("li"),k2e=a("strong"),SKo=o("flaubert"),RKo=o(" \u2014 "),rQ=a("a"),PKo=o("FlaubertForTokenClassification"),BKo=o(" (FlauBERT model)"),NKo=l(),J0=a("li"),S2e=a("strong"),IKo=o("fnet"),qKo=o(" \u2014 "),tQ=a("a"),jKo=o("FNetForTokenClassification"),DKo=o(" (FNet model)"),GKo=l(),Y0=a("li"),R2e=a("strong"),OKo=o("funnel"),VKo=o(" \u2014 "),aQ=a("a"),XKo=o("FunnelForTokenClassification"),zKo=o(" (Funnel Transformer model)"),QKo=l(),K0=a("li"),P2e=a("strong"),WKo=o("gpt2"),HKo=o(" \u2014 "),nQ=a("a"),UKo=o("GPT2ForTokenClassification"),JKo=o(" (OpenAI GPT-2 model)"),YKo=l(),Z0=a("li"),B2e=a("strong"),KKo=o("ibert"),ZKo=o(" \u2014 "),sQ=a("a"),eZo=o("IBertForTokenClassification"),oZo=o(" (I-BERT model)"),rZo=l(),eF=a("li"),N2e=a("strong"),tZo=o("layoutlm"),aZo=o(" \u2014 "),lQ=a("a"),nZo=o("LayoutLMForTokenClassification"),sZo=o(" (LayoutLM model)"),lZo=l(),oF=a("li"),I2e=a("strong"),iZo=o("layoutlmv2"),dZo=o(" \u2014 "),iQ=a("a"),cZo=o("LayoutLMv2ForTokenClassification"),fZo=o(" (LayoutLMv2 model)"),mZo=l(),rF=a("li"),q2e=a("strong"),gZo=o("layoutlmv3"),hZo=o(" \u2014 "),dQ=a("a"),pZo=o("LayoutLMv3ForTokenClassification"),_Zo=o(" (LayoutLMv3 model)"),uZo=l(),tF=a("li"),j2e=a("strong"),bZo=o("longformer"),vZo=o(" \u2014 "),cQ=a("a"),FZo=o("LongformerForTokenClassification"),TZo=o(" (Longformer model)"),MZo=l(),aF=a("li"),D2e=a("strong"),EZo=o("megatron-bert"),CZo=o(" \u2014 "),fQ=a("a"),wZo=o("MegatronBertForTokenClassification"),AZo=o(" (Megatron-BERT model)"),LZo=l(),nF=a("li"),G2e=a("strong"),yZo=o("mobilebert"),xZo=o(" \u2014 "),mQ=a("a"),$Zo=o("MobileBertForTokenClassification"),kZo=o(" (MobileBERT model)"),SZo=l(),sF=a("li"),O2e=a("strong"),RZo=o("mpnet"),PZo=o(" \u2014 "),gQ=a("a"),BZo=o("MPNetForTokenClassification"),NZo=o(" (MPNet model)"),IZo=l(),lF=a("li"),V2e=a("strong"),qZo=o("nezha"),jZo=o(" \u2014 "),hQ=a("a"),DZo=o("NezhaForTokenClassification"),GZo=o(" (Nezha model)"),OZo=l(),iF=a("li"),X2e=a("strong"),VZo=o("nystromformer"),XZo=o(" \u2014 "),pQ=a("a"),zZo=o("NystromformerForTokenClassification"),QZo=o(" (Nystr\xF6mformer model)"),WZo=l(),dF=a("li"),z2e=a("strong"),HZo=o("qdqbert"),UZo=o(" \u2014 "),_Q=a("a"),JZo=o("QDQBertForTokenClassification"),YZo=o(" (QDQBert model)"),KZo=l(),cF=a("li"),Q2e=a("strong"),ZZo=o("rembert"),eer=o(" \u2014 "),uQ=a("a"),oer=o("RemBertForTokenClassification"),rer=o(" (RemBERT model)"),ter=l(),fF=a("li"),W2e=a("strong"),aer=o("roberta"),ner=o(" \u2014 "),bQ=a("a"),ser=o("RobertaForTokenClassification"),ler=o(" (RoBERTa model)"),ier=l(),mF=a("li"),H2e=a("strong"),der=o("roformer"),cer=o(" \u2014 "),vQ=a("a"),fer=o("RoFormerForTokenClassification"),mer=o(" (RoFormer model)"),ger=l(),gF=a("li"),U2e=a("strong"),her=o("squeezebert"),per=o(" \u2014 "),FQ=a("a"),_er=o("SqueezeBertForTokenClassification"),uer=o(" (SqueezeBERT model)"),ber=l(),hF=a("li"),J2e=a("strong"),ver=o("xlm"),Fer=o(" \u2014 "),TQ=a("a"),Ter=o("XLMForTokenClassification"),Mer=o(" (XLM model)"),Eer=l(),pF=a("li"),Y2e=a("strong"),Cer=o("xlm-roberta"),wer=o(" \u2014 "),MQ=a("a"),Aer=o("XLMRobertaForTokenClassification"),Ler=o(" (XLM-RoBERTa model)"),yer=l(),_F=a("li"),K2e=a("strong"),xer=o("xlm-roberta-xl"),$er=o(" \u2014 "),EQ=a("a"),ker=o("XLMRobertaXLForTokenClassification"),Ser=o(" (XLM-RoBERTa-XL model)"),Rer=l(),uF=a("li"),Z2e=a("strong"),Per=o("xlnet"),Ber=o(" \u2014 "),CQ=a("a"),Ner=o("XLNetForTokenClassification"),Ier=o(" (XLNet model)"),qer=l(),bF=a("li"),e1e=a("strong"),jer=o("yoso"),Der=o(" \u2014 "),wQ=a("a"),Ger=o("YosoForTokenClassification"),Oer=o(" (YOSO model)"),Ver=l(),vF=a("p"),Xer=o("The model is set in evaluation mode by default using "),o1e=a("code"),zer=o("model.eval()"),Qer=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),r1e=a("code"),Wer=o("model.train()"),Her=l(),F(FF.$$.fragment),UXe=l(),pd=a("h2"),TF=a("a"),t1e=a("span"),F(Ay.$$.fragment),Uer=l(),a1e=a("span"),Jer=o("AutoModelForQuestionAnswering"),JXe=l(),Do=a("div"),F(Ly.$$.fragment),Yer=l(),_d=a("p"),Ker=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),AQ=a("a"),Zer=o("from_pretrained()"),eor=o(" class method or the "),LQ=a("a"),oor=o("from_config()"),ror=o(` class
method.`),tor=l(),yy=a("p"),aor=o("This class cannot be instantiated directly using "),n1e=a("code"),nor=o("__init__()"),sor=o(" (throws an error)."),lor=l(),ut=a("div"),F(xy.$$.fragment),ior=l(),s1e=a("p"),dor=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),cor=l(),ud=a("p"),mor=o(`Note:
Loading a model from its configuration file does `),l1e=a("strong"),gor=o("not"),hor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yQ=a("a"),por=o("from_pretrained()"),_or=o(" to load the model weights."),uor=l(),F(MF.$$.fragment),bor=l(),so=a("div"),F($y.$$.fragment),vor=l(),i1e=a("p"),For=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Tor=l(),za=a("p"),Mor=o("The model class to instantiate is selected based on the "),d1e=a("code"),Eor=o("model_type"),Cor=o(` property of the config object (either
passed as an argument or loaded from `),c1e=a("code"),wor=o("pretrained_model_name_or_path"),Aor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f1e=a("code"),Lor=o("pretrained_model_name_or_path"),yor=o(":"),xor=l(),V=a("ul"),EF=a("li"),m1e=a("strong"),$or=o("albert"),kor=o(" \u2014 "),xQ=a("a"),Sor=o("AlbertForQuestionAnswering"),Ror=o(" (ALBERT model)"),Por=l(),CF=a("li"),g1e=a("strong"),Bor=o("bart"),Nor=o(" \u2014 "),$Q=a("a"),Ior=o("BartForQuestionAnswering"),qor=o(" (BART model)"),jor=l(),wF=a("li"),h1e=a("strong"),Dor=o("bert"),Gor=o(" \u2014 "),kQ=a("a"),Oor=o("BertForQuestionAnswering"),Vor=o(" (BERT model)"),Xor=l(),AF=a("li"),p1e=a("strong"),zor=o("big_bird"),Qor=o(" \u2014 "),SQ=a("a"),Wor=o("BigBirdForQuestionAnswering"),Hor=o(" (BigBird model)"),Uor=l(),LF=a("li"),_1e=a("strong"),Jor=o("bigbird_pegasus"),Yor=o(" \u2014 "),RQ=a("a"),Kor=o("BigBirdPegasusForQuestionAnswering"),Zor=o(" (BigBird-Pegasus model)"),err=l(),yF=a("li"),u1e=a("strong"),orr=o("camembert"),rrr=o(" \u2014 "),PQ=a("a"),trr=o("CamembertForQuestionAnswering"),arr=o(" (CamemBERT model)"),nrr=l(),xF=a("li"),b1e=a("strong"),srr=o("canine"),lrr=o(" \u2014 "),BQ=a("a"),irr=o("CanineForQuestionAnswering"),drr=o(" (CANINE model)"),crr=l(),$F=a("li"),v1e=a("strong"),frr=o("convbert"),mrr=o(" \u2014 "),NQ=a("a"),grr=o("ConvBertForQuestionAnswering"),hrr=o(" (ConvBERT model)"),prr=l(),kF=a("li"),F1e=a("strong"),_rr=o("data2vec-text"),urr=o(" \u2014 "),IQ=a("a"),brr=o("Data2VecTextForQuestionAnswering"),vrr=o(" (Data2VecText model)"),Frr=l(),SF=a("li"),T1e=a("strong"),Trr=o("deberta"),Mrr=o(" \u2014 "),qQ=a("a"),Err=o("DebertaForQuestionAnswering"),Crr=o(" (DeBERTa model)"),wrr=l(),RF=a("li"),M1e=a("strong"),Arr=o("deberta-v2"),Lrr=o(" \u2014 "),jQ=a("a"),yrr=o("DebertaV2ForQuestionAnswering"),xrr=o(" (DeBERTa-v2 model)"),$rr=l(),PF=a("li"),E1e=a("strong"),krr=o("distilbert"),Srr=o(" \u2014 "),DQ=a("a"),Rrr=o("DistilBertForQuestionAnswering"),Prr=o(" (DistilBERT model)"),Brr=l(),BF=a("li"),C1e=a("strong"),Nrr=o("electra"),Irr=o(" \u2014 "),GQ=a("a"),qrr=o("ElectraForQuestionAnswering"),jrr=o(" (ELECTRA model)"),Drr=l(),NF=a("li"),w1e=a("strong"),Grr=o("flaubert"),Orr=o(" \u2014 "),OQ=a("a"),Vrr=o("FlaubertForQuestionAnsweringSimple"),Xrr=o(" (FlauBERT model)"),zrr=l(),IF=a("li"),A1e=a("strong"),Qrr=o("fnet"),Wrr=o(" \u2014 "),VQ=a("a"),Hrr=o("FNetForQuestionAnswering"),Urr=o(" (FNet model)"),Jrr=l(),qF=a("li"),L1e=a("strong"),Yrr=o("funnel"),Krr=o(" \u2014 "),XQ=a("a"),Zrr=o("FunnelForQuestionAnswering"),etr=o(" (Funnel Transformer model)"),otr=l(),jF=a("li"),y1e=a("strong"),rtr=o("gptj"),ttr=o(" \u2014 "),zQ=a("a"),atr=o("GPTJForQuestionAnswering"),ntr=o(" (GPT-J model)"),str=l(),DF=a("li"),x1e=a("strong"),ltr=o("ibert"),itr=o(" \u2014 "),QQ=a("a"),dtr=o("IBertForQuestionAnswering"),ctr=o(" (I-BERT model)"),ftr=l(),GF=a("li"),$1e=a("strong"),mtr=o("layoutlmv2"),gtr=o(" \u2014 "),WQ=a("a"),htr=o("LayoutLMv2ForQuestionAnswering"),ptr=o(" (LayoutLMv2 model)"),_tr=l(),OF=a("li"),k1e=a("strong"),utr=o("layoutlmv3"),btr=o(" \u2014 "),HQ=a("a"),vtr=o("LayoutLMv3ForQuestionAnswering"),Ftr=o(" (LayoutLMv3 model)"),Ttr=l(),VF=a("li"),S1e=a("strong"),Mtr=o("led"),Etr=o(" \u2014 "),UQ=a("a"),Ctr=o("LEDForQuestionAnswering"),wtr=o(" (LED model)"),Atr=l(),XF=a("li"),R1e=a("strong"),Ltr=o("longformer"),ytr=o(" \u2014 "),JQ=a("a"),xtr=o("LongformerForQuestionAnswering"),$tr=o(" (Longformer model)"),ktr=l(),zF=a("li"),P1e=a("strong"),Str=o("lxmert"),Rtr=o(" \u2014 "),YQ=a("a"),Ptr=o("LxmertForQuestionAnswering"),Btr=o(" (LXMERT model)"),Ntr=l(),QF=a("li"),B1e=a("strong"),Itr=o("mbart"),qtr=o(" \u2014 "),KQ=a("a"),jtr=o("MBartForQuestionAnswering"),Dtr=o(" (mBART model)"),Gtr=l(),WF=a("li"),N1e=a("strong"),Otr=o("megatron-bert"),Vtr=o(" \u2014 "),ZQ=a("a"),Xtr=o("MegatronBertForQuestionAnswering"),ztr=o(" (Megatron-BERT model)"),Qtr=l(),HF=a("li"),I1e=a("strong"),Wtr=o("mobilebert"),Htr=o(" \u2014 "),eW=a("a"),Utr=o("MobileBertForQuestionAnswering"),Jtr=o(" (MobileBERT model)"),Ytr=l(),UF=a("li"),q1e=a("strong"),Ktr=o("mpnet"),Ztr=o(" \u2014 "),oW=a("a"),ear=o("MPNetForQuestionAnswering"),oar=o(" (MPNet model)"),rar=l(),JF=a("li"),j1e=a("strong"),tar=o("mvp"),aar=o(" \u2014 "),rW=a("a"),nar=o("MvpForQuestionAnswering"),sar=o(" (MVP model)"),lar=l(),YF=a("li"),D1e=a("strong"),iar=o("nezha"),dar=o(" \u2014 "),tW=a("a"),car=o("NezhaForQuestionAnswering"),far=o(" (Nezha model)"),mar=l(),KF=a("li"),G1e=a("strong"),gar=o("nystromformer"),har=o(" \u2014 "),aW=a("a"),par=o("NystromformerForQuestionAnswering"),_ar=o(" (Nystr\xF6mformer model)"),uar=l(),ZF=a("li"),O1e=a("strong"),bar=o("qdqbert"),Far=o(" \u2014 "),nW=a("a"),Tar=o("QDQBertForQuestionAnswering"),Mar=o(" (QDQBert model)"),Ear=l(),eT=a("li"),V1e=a("strong"),Car=o("reformer"),war=o(" \u2014 "),sW=a("a"),Aar=o("ReformerForQuestionAnswering"),Lar=o(" (Reformer model)"),yar=l(),oT=a("li"),X1e=a("strong"),xar=o("rembert"),$ar=o(" \u2014 "),lW=a("a"),kar=o("RemBertForQuestionAnswering"),Sar=o(" (RemBERT model)"),Rar=l(),rT=a("li"),z1e=a("strong"),Par=o("roberta"),Bar=o(" \u2014 "),iW=a("a"),Nar=o("RobertaForQuestionAnswering"),Iar=o(" (RoBERTa model)"),qar=l(),tT=a("li"),Q1e=a("strong"),jar=o("roformer"),Dar=o(" \u2014 "),dW=a("a"),Gar=o("RoFormerForQuestionAnswering"),Oar=o(" (RoFormer model)"),Var=l(),aT=a("li"),W1e=a("strong"),Xar=o("splinter"),zar=o(" \u2014 "),cW=a("a"),Qar=o("SplinterForQuestionAnswering"),War=o(" (Splinter model)"),Har=l(),nT=a("li"),H1e=a("strong"),Uar=o("squeezebert"),Jar=o(" \u2014 "),fW=a("a"),Yar=o("SqueezeBertForQuestionAnswering"),Kar=o(" (SqueezeBERT model)"),Zar=l(),sT=a("li"),U1e=a("strong"),enr=o("xlm"),onr=o(" \u2014 "),mW=a("a"),rnr=o("XLMForQuestionAnsweringSimple"),tnr=o(" (XLM model)"),anr=l(),lT=a("li"),J1e=a("strong"),nnr=o("xlm-roberta"),snr=o(" \u2014 "),gW=a("a"),lnr=o("XLMRobertaForQuestionAnswering"),inr=o(" (XLM-RoBERTa model)"),dnr=l(),iT=a("li"),Y1e=a("strong"),cnr=o("xlm-roberta-xl"),fnr=o(" \u2014 "),hW=a("a"),mnr=o("XLMRobertaXLForQuestionAnswering"),gnr=o(" (XLM-RoBERTa-XL model)"),hnr=l(),dT=a("li"),K1e=a("strong"),pnr=o("xlnet"),_nr=o(" \u2014 "),pW=a("a"),unr=o("XLNetForQuestionAnsweringSimple"),bnr=o(" (XLNet model)"),vnr=l(),cT=a("li"),Z1e=a("strong"),Fnr=o("yoso"),Tnr=o(" \u2014 "),_W=a("a"),Mnr=o("YosoForQuestionAnswering"),Enr=o(" (YOSO model)"),Cnr=l(),fT=a("p"),wnr=o("The model is set in evaluation mode by default using "),ebe=a("code"),Anr=o("model.eval()"),Lnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),obe=a("code"),ynr=o("model.train()"),xnr=l(),F(mT.$$.fragment),YXe=l(),bd=a("h2"),gT=a("a"),rbe=a("span"),F(ky.$$.fragment),$nr=l(),tbe=a("span"),knr=o("AutoModelForTableQuestionAnswering"),KXe=l(),Go=a("div"),F(Sy.$$.fragment),Snr=l(),vd=a("p"),Rnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),uW=a("a"),Pnr=o("from_pretrained()"),Bnr=o(" class method or the "),bW=a("a"),Nnr=o("from_config()"),Inr=o(` class
method.`),qnr=l(),Ry=a("p"),jnr=o("This class cannot be instantiated directly using "),abe=a("code"),Dnr=o("__init__()"),Gnr=o(" (throws an error)."),Onr=l(),bt=a("div"),F(Py.$$.fragment),Vnr=l(),nbe=a("p"),Xnr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),znr=l(),Fd=a("p"),Qnr=o(`Note:
Loading a model from its configuration file does `),sbe=a("strong"),Wnr=o("not"),Hnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vW=a("a"),Unr=o("from_pretrained()"),Jnr=o(" to load the model weights."),Ynr=l(),F(hT.$$.fragment),Knr=l(),lo=a("div"),F(By.$$.fragment),Znr=l(),lbe=a("p"),esr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),osr=l(),Qa=a("p"),rsr=o("The model class to instantiate is selected based on the "),ibe=a("code"),tsr=o("model_type"),asr=o(` property of the config object (either
passed as an argument or loaded from `),dbe=a("code"),nsr=o("pretrained_model_name_or_path"),ssr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cbe=a("code"),lsr=o("pretrained_model_name_or_path"),isr=o(":"),dsr=l(),fbe=a("ul"),pT=a("li"),mbe=a("strong"),csr=o("tapas"),fsr=o(" \u2014 "),FW=a("a"),msr=o("TapasForQuestionAnswering"),gsr=o(" (TAPAS model)"),hsr=l(),_T=a("p"),psr=o("The model is set in evaluation mode by default using "),gbe=a("code"),_sr=o("model.eval()"),usr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hbe=a("code"),bsr=o("model.train()"),vsr=l(),F(uT.$$.fragment),ZXe=l(),Td=a("h2"),bT=a("a"),pbe=a("span"),F(Ny.$$.fragment),Fsr=l(),_be=a("span"),Tsr=o("AutoModelForImageClassification"),eze=l(),Oo=a("div"),F(Iy.$$.fragment),Msr=l(),Md=a("p"),Esr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),TW=a("a"),Csr=o("from_pretrained()"),wsr=o(" class method or the "),MW=a("a"),Asr=o("from_config()"),Lsr=o(` class
method.`),ysr=l(),qy=a("p"),xsr=o("This class cannot be instantiated directly using "),ube=a("code"),$sr=o("__init__()"),ksr=o(" (throws an error)."),Ssr=l(),vt=a("div"),F(jy.$$.fragment),Rsr=l(),bbe=a("p"),Psr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Bsr=l(),Ed=a("p"),Nsr=o(`Note:
Loading a model from its configuration file does `),vbe=a("strong"),Isr=o("not"),qsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EW=a("a"),jsr=o("from_pretrained()"),Dsr=o(" to load the model weights."),Gsr=l(),F(vT.$$.fragment),Osr=l(),io=a("div"),F(Dy.$$.fragment),Vsr=l(),Fbe=a("p"),Xsr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),zsr=l(),Wa=a("p"),Qsr=o("The model class to instantiate is selected based on the "),Tbe=a("code"),Wsr=o("model_type"),Hsr=o(` property of the config object (either
passed as an argument or loaded from `),Mbe=a("code"),Usr=o("pretrained_model_name_or_path"),Jsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ebe=a("code"),Ysr=o("pretrained_model_name_or_path"),Ksr=o(":"),Zsr=l(),ve=a("ul"),FT=a("li"),Cbe=a("strong"),elr=o("beit"),olr=o(" \u2014 "),CW=a("a"),rlr=o("BeitForImageClassification"),tlr=o(" (BEiT model)"),alr=l(),TT=a("li"),wbe=a("strong"),nlr=o("convnext"),slr=o(" \u2014 "),wW=a("a"),llr=o("ConvNextForImageClassification"),ilr=o(" (ConvNeXT model)"),dlr=l(),MT=a("li"),Abe=a("strong"),clr=o("cvt"),flr=o(" \u2014 "),AW=a("a"),mlr=o("CvtForImageClassification"),glr=o(" (CvT model)"),hlr=l(),ET=a("li"),Lbe=a("strong"),plr=o("data2vec-vision"),_lr=o(" \u2014 "),LW=a("a"),ulr=o("Data2VecVisionForImageClassification"),blr=o(" (Data2VecVision model)"),vlr=l(),Us=a("li"),ybe=a("strong"),Flr=o("deit"),Tlr=o(" \u2014 "),yW=a("a"),Mlr=o("DeiTForImageClassification"),Elr=o(" or "),xW=a("a"),Clr=o("DeiTForImageClassificationWithTeacher"),wlr=o(" (DeiT model)"),Alr=l(),CT=a("li"),xbe=a("strong"),Llr=o("imagegpt"),ylr=o(" \u2014 "),$W=a("a"),xlr=o("ImageGPTForImageClassification"),$lr=o(" (ImageGPT model)"),klr=l(),Js=a("li"),$be=a("strong"),Slr=o("levit"),Rlr=o(" \u2014 "),kW=a("a"),Plr=o("LevitForImageClassification"),Blr=o(" or "),SW=a("a"),Nlr=o("LevitForImageClassificationWithTeacher"),Ilr=o(" (LeViT model)"),qlr=l(),wT=a("li"),kbe=a("strong"),jlr=o("mobilevit"),Dlr=o(" \u2014 "),RW=a("a"),Glr=o("MobileViTForImageClassification"),Olr=o(" (MobileViT model)"),Vlr=l(),Ft=a("li"),Sbe=a("strong"),Xlr=o("perceiver"),zlr=o(" \u2014 "),PW=a("a"),Qlr=o("PerceiverForImageClassificationLearned"),Wlr=o(" or "),BW=a("a"),Hlr=o("PerceiverForImageClassificationFourier"),Ulr=o(" or "),NW=a("a"),Jlr=o("PerceiverForImageClassificationConvProcessing"),Ylr=o(" (Perceiver model)"),Klr=l(),AT=a("li"),Rbe=a("strong"),Zlr=o("poolformer"),eir=o(" \u2014 "),IW=a("a"),oir=o("PoolFormerForImageClassification"),rir=o(" (PoolFormer model)"),tir=l(),LT=a("li"),Pbe=a("strong"),air=o("regnet"),nir=o(" \u2014 "),qW=a("a"),sir=o("RegNetForImageClassification"),lir=o(" (RegNet model)"),iir=l(),yT=a("li"),Bbe=a("strong"),dir=o("resnet"),cir=o(" \u2014 "),jW=a("a"),fir=o("ResNetForImageClassification"),mir=o(" (ResNet model)"),gir=l(),xT=a("li"),Nbe=a("strong"),hir=o("segformer"),pir=o(" \u2014 "),DW=a("a"),_ir=o("SegformerForImageClassification"),uir=o(" (SegFormer model)"),bir=l(),$T=a("li"),Ibe=a("strong"),vir=o("swin"),Fir=o(" \u2014 "),GW=a("a"),Tir=o("SwinForImageClassification"),Mir=o(" (Swin Transformer model)"),Eir=l(),kT=a("li"),qbe=a("strong"),Cir=o("van"),wir=o(" \u2014 "),OW=a("a"),Air=o("VanForImageClassification"),Lir=o(" (VAN model)"),yir=l(),ST=a("li"),jbe=a("strong"),xir=o("vit"),$ir=o(" \u2014 "),VW=a("a"),kir=o("ViTForImageClassification"),Sir=o(" (ViT model)"),Rir=l(),RT=a("p"),Pir=o("The model is set in evaluation mode by default using "),Dbe=a("code"),Bir=o("model.eval()"),Nir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gbe=a("code"),Iir=o("model.train()"),qir=l(),F(PT.$$.fragment),oze=l(),Cd=a("h2"),BT=a("a"),Obe=a("span"),F(Gy.$$.fragment),jir=l(),Vbe=a("span"),Dir=o("AutoModelForVision2Seq"),rze=l(),Vo=a("div"),F(Oy.$$.fragment),Gir=l(),wd=a("p"),Oir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),XW=a("a"),Vir=o("from_pretrained()"),Xir=o(" class method or the "),zW=a("a"),zir=o("from_config()"),Qir=o(` class
method.`),Wir=l(),Vy=a("p"),Hir=o("This class cannot be instantiated directly using "),Xbe=a("code"),Uir=o("__init__()"),Jir=o(" (throws an error)."),Yir=l(),Tt=a("div"),F(Xy.$$.fragment),Kir=l(),zbe=a("p"),Zir=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),edr=l(),Ad=a("p"),odr=o(`Note:
Loading a model from its configuration file does `),Qbe=a("strong"),rdr=o("not"),tdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QW=a("a"),adr=o("from_pretrained()"),ndr=o(" to load the model weights."),sdr=l(),F(NT.$$.fragment),ldr=l(),co=a("div"),F(zy.$$.fragment),idr=l(),Wbe=a("p"),ddr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),cdr=l(),Ha=a("p"),fdr=o("The model class to instantiate is selected based on the "),Hbe=a("code"),mdr=o("model_type"),gdr=o(` property of the config object (either
passed as an argument or loaded from `),Ube=a("code"),hdr=o("pretrained_model_name_or_path"),pdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jbe=a("code"),_dr=o("pretrained_model_name_or_path"),udr=o(":"),bdr=l(),Ybe=a("ul"),IT=a("li"),Kbe=a("strong"),vdr=o("vision-encoder-decoder"),Fdr=o(" \u2014 "),WW=a("a"),Tdr=o("VisionEncoderDecoderModel"),Mdr=o(" (Vision Encoder decoder model)"),Edr=l(),qT=a("p"),Cdr=o("The model is set in evaluation mode by default using "),Zbe=a("code"),wdr=o("model.eval()"),Adr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eve=a("code"),Ldr=o("model.train()"),ydr=l(),F(jT.$$.fragment),tze=l(),Ld=a("h2"),DT=a("a"),ove=a("span"),F(Qy.$$.fragment),xdr=l(),rve=a("span"),$dr=o("AutoModelForVisualQuestionAnswering"),aze=l(),Xo=a("div"),F(Wy.$$.fragment),kdr=l(),yd=a("p"),Sdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),HW=a("a"),Rdr=o("from_pretrained()"),Pdr=o(" class method or the "),UW=a("a"),Bdr=o("from_config()"),Ndr=o(` class
method.`),Idr=l(),Hy=a("p"),qdr=o("This class cannot be instantiated directly using "),tve=a("code"),jdr=o("__init__()"),Ddr=o(" (throws an error)."),Gdr=l(),Mt=a("div"),F(Uy.$$.fragment),Odr=l(),ave=a("p"),Vdr=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),Xdr=l(),xd=a("p"),zdr=o(`Note:
Loading a model from its configuration file does `),nve=a("strong"),Qdr=o("not"),Wdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JW=a("a"),Hdr=o("from_pretrained()"),Udr=o(" to load the model weights."),Jdr=l(),F(GT.$$.fragment),Ydr=l(),fo=a("div"),F(Jy.$$.fragment),Kdr=l(),sve=a("p"),Zdr=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),ecr=l(),Ua=a("p"),ocr=o("The model class to instantiate is selected based on the "),lve=a("code"),rcr=o("model_type"),tcr=o(` property of the config object (either
passed as an argument or loaded from `),ive=a("code"),acr=o("pretrained_model_name_or_path"),ncr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dve=a("code"),scr=o("pretrained_model_name_or_path"),lcr=o(":"),icr=l(),cve=a("ul"),OT=a("li"),fve=a("strong"),dcr=o("vilt"),ccr=o(" \u2014 "),YW=a("a"),fcr=o("ViltForQuestionAnswering"),mcr=o(" (ViLT model)"),gcr=l(),VT=a("p"),hcr=o("The model is set in evaluation mode by default using "),mve=a("code"),pcr=o("model.eval()"),_cr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gve=a("code"),ucr=o("model.train()"),bcr=l(),F(XT.$$.fragment),nze=l(),$d=a("h2"),zT=a("a"),hve=a("span"),F(Yy.$$.fragment),vcr=l(),pve=a("span"),Fcr=o("AutoModelForAudioClassification"),sze=l(),zo=a("div"),F(Ky.$$.fragment),Tcr=l(),kd=a("p"),Mcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),KW=a("a"),Ecr=o("from_pretrained()"),Ccr=o(" class method or the "),ZW=a("a"),wcr=o("from_config()"),Acr=o(` class
method.`),Lcr=l(),Zy=a("p"),ycr=o("This class cannot be instantiated directly using "),_ve=a("code"),xcr=o("__init__()"),$cr=o(" (throws an error)."),kcr=l(),Et=a("div"),F(e9.$$.fragment),Scr=l(),uve=a("p"),Rcr=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Pcr=l(),Sd=a("p"),Bcr=o(`Note:
Loading a model from its configuration file does `),bve=a("strong"),Ncr=o("not"),Icr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eH=a("a"),qcr=o("from_pretrained()"),jcr=o(" to load the model weights."),Dcr=l(),F(QT.$$.fragment),Gcr=l(),mo=a("div"),F(o9.$$.fragment),Ocr=l(),vve=a("p"),Vcr=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Xcr=l(),Ja=a("p"),zcr=o("The model class to instantiate is selected based on the "),Fve=a("code"),Qcr=o("model_type"),Wcr=o(` property of the config object (either
passed as an argument or loaded from `),Tve=a("code"),Hcr=o("pretrained_model_name_or_path"),Ucr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mve=a("code"),Jcr=o("pretrained_model_name_or_path"),Ycr=o(":"),Kcr=l(),Be=a("ul"),WT=a("li"),Eve=a("strong"),Zcr=o("data2vec-audio"),efr=o(" \u2014 "),oH=a("a"),ofr=o("Data2VecAudioForSequenceClassification"),rfr=o(" (Data2VecAudio model)"),tfr=l(),HT=a("li"),Cve=a("strong"),afr=o("hubert"),nfr=o(" \u2014 "),rH=a("a"),sfr=o("HubertForSequenceClassification"),lfr=o(" (Hubert model)"),ifr=l(),UT=a("li"),wve=a("strong"),dfr=o("sew"),cfr=o(" \u2014 "),tH=a("a"),ffr=o("SEWForSequenceClassification"),mfr=o(" (SEW model)"),gfr=l(),JT=a("li"),Ave=a("strong"),hfr=o("sew-d"),pfr=o(" \u2014 "),aH=a("a"),_fr=o("SEWDForSequenceClassification"),ufr=o(" (SEW-D model)"),bfr=l(),YT=a("li"),Lve=a("strong"),vfr=o("unispeech"),Ffr=o(" \u2014 "),nH=a("a"),Tfr=o("UniSpeechForSequenceClassification"),Mfr=o(" (UniSpeech model)"),Efr=l(),KT=a("li"),yve=a("strong"),Cfr=o("unispeech-sat"),wfr=o(" \u2014 "),sH=a("a"),Afr=o("UniSpeechSatForSequenceClassification"),Lfr=o(" (UniSpeechSat model)"),yfr=l(),ZT=a("li"),xve=a("strong"),xfr=o("wav2vec2"),$fr=o(" \u2014 "),lH=a("a"),kfr=o("Wav2Vec2ForSequenceClassification"),Sfr=o(" (Wav2Vec2 model)"),Rfr=l(),e8=a("li"),$ve=a("strong"),Pfr=o("wav2vec2-conformer"),Bfr=o(" \u2014 "),iH=a("a"),Nfr=o("Wav2Vec2ConformerForSequenceClassification"),Ifr=o(" (Wav2Vec2-Conformer model)"),qfr=l(),o8=a("li"),kve=a("strong"),jfr=o("wavlm"),Dfr=o(" \u2014 "),dH=a("a"),Gfr=o("WavLMForSequenceClassification"),Ofr=o(" (WavLM model)"),Vfr=l(),r8=a("p"),Xfr=o("The model is set in evaluation mode by default using "),Sve=a("code"),zfr=o("model.eval()"),Qfr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rve=a("code"),Wfr=o("model.train()"),Hfr=l(),F(t8.$$.fragment),lze=l(),Rd=a("h2"),a8=a("a"),Pve=a("span"),F(r9.$$.fragment),Ufr=l(),Bve=a("span"),Jfr=o("AutoModelForAudioFrameClassification"),ize=l(),Qo=a("div"),F(t9.$$.fragment),Yfr=l(),Pd=a("p"),Kfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),cH=a("a"),Zfr=o("from_pretrained()"),emr=o(" class method or the "),fH=a("a"),omr=o("from_config()"),rmr=o(` class
method.`),tmr=l(),a9=a("p"),amr=o("This class cannot be instantiated directly using "),Nve=a("code"),nmr=o("__init__()"),smr=o(" (throws an error)."),lmr=l(),Ct=a("div"),F(n9.$$.fragment),imr=l(),Ive=a("p"),dmr=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),cmr=l(),Bd=a("p"),fmr=o(`Note:
Loading a model from its configuration file does `),qve=a("strong"),mmr=o("not"),gmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mH=a("a"),hmr=o("from_pretrained()"),pmr=o(" to load the model weights."),_mr=l(),F(n8.$$.fragment),umr=l(),go=a("div"),F(s9.$$.fragment),bmr=l(),jve=a("p"),vmr=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Fmr=l(),Ya=a("p"),Tmr=o("The model class to instantiate is selected based on the "),Dve=a("code"),Mmr=o("model_type"),Emr=o(` property of the config object (either
passed as an argument or loaded from `),Gve=a("code"),Cmr=o("pretrained_model_name_or_path"),wmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ove=a("code"),Amr=o("pretrained_model_name_or_path"),Lmr=o(":"),ymr=l(),rt=a("ul"),s8=a("li"),Vve=a("strong"),xmr=o("data2vec-audio"),$mr=o(" \u2014 "),gH=a("a"),kmr=o("Data2VecAudioForAudioFrameClassification"),Smr=o(" (Data2VecAudio model)"),Rmr=l(),l8=a("li"),Xve=a("strong"),Pmr=o("unispeech-sat"),Bmr=o(" \u2014 "),hH=a("a"),Nmr=o("UniSpeechSatForAudioFrameClassification"),Imr=o(" (UniSpeechSat model)"),qmr=l(),i8=a("li"),zve=a("strong"),jmr=o("wav2vec2"),Dmr=o(" \u2014 "),pH=a("a"),Gmr=o("Wav2Vec2ForAudioFrameClassification"),Omr=o(" (Wav2Vec2 model)"),Vmr=l(),d8=a("li"),Qve=a("strong"),Xmr=o("wav2vec2-conformer"),zmr=o(" \u2014 "),_H=a("a"),Qmr=o("Wav2Vec2ConformerForAudioFrameClassification"),Wmr=o(" (Wav2Vec2-Conformer model)"),Hmr=l(),c8=a("li"),Wve=a("strong"),Umr=o("wavlm"),Jmr=o(" \u2014 "),uH=a("a"),Ymr=o("WavLMForAudioFrameClassification"),Kmr=o(" (WavLM model)"),Zmr=l(),f8=a("p"),egr=o("The model is set in evaluation mode by default using "),Hve=a("code"),ogr=o("model.eval()"),rgr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uve=a("code"),tgr=o("model.train()"),agr=l(),F(m8.$$.fragment),dze=l(),Nd=a("h2"),g8=a("a"),Jve=a("span"),F(l9.$$.fragment),ngr=l(),Yve=a("span"),sgr=o("AutoModelForCTC"),cze=l(),Wo=a("div"),F(i9.$$.fragment),lgr=l(),Id=a("p"),igr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),bH=a("a"),dgr=o("from_pretrained()"),cgr=o(" class method or the "),vH=a("a"),fgr=o("from_config()"),mgr=o(` class
method.`),ggr=l(),d9=a("p"),hgr=o("This class cannot be instantiated directly using "),Kve=a("code"),pgr=o("__init__()"),_gr=o(" (throws an error)."),ugr=l(),wt=a("div"),F(c9.$$.fragment),bgr=l(),Zve=a("p"),vgr=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Fgr=l(),qd=a("p"),Tgr=o(`Note:
Loading a model from its configuration file does `),e0e=a("strong"),Mgr=o("not"),Egr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FH=a("a"),Cgr=o("from_pretrained()"),wgr=o(" to load the model weights."),Agr=l(),F(h8.$$.fragment),Lgr=l(),ho=a("div"),F(f9.$$.fragment),ygr=l(),o0e=a("p"),xgr=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),$gr=l(),Ka=a("p"),kgr=o("The model class to instantiate is selected based on the "),r0e=a("code"),Sgr=o("model_type"),Rgr=o(` property of the config object (either
passed as an argument or loaded from `),t0e=a("code"),Pgr=o("pretrained_model_name_or_path"),Bgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a0e=a("code"),Ngr=o("pretrained_model_name_or_path"),Igr=o(":"),qgr=l(),ye=a("ul"),p8=a("li"),n0e=a("strong"),jgr=o("data2vec-audio"),Dgr=o(" \u2014 "),TH=a("a"),Ggr=o("Data2VecAudioForCTC"),Ogr=o(" (Data2VecAudio model)"),Vgr=l(),_8=a("li"),s0e=a("strong"),Xgr=o("hubert"),zgr=o(" \u2014 "),MH=a("a"),Qgr=o("HubertForCTC"),Wgr=o(" (Hubert model)"),Hgr=l(),u8=a("li"),l0e=a("strong"),Ugr=o("mctct"),Jgr=o(" \u2014 "),EH=a("a"),Ygr=o("MCTCTForCTC"),Kgr=o(" (M-CTC-T model)"),Zgr=l(),b8=a("li"),i0e=a("strong"),ehr=o("sew"),ohr=o(" \u2014 "),CH=a("a"),rhr=o("SEWForCTC"),thr=o(" (SEW model)"),ahr=l(),v8=a("li"),d0e=a("strong"),nhr=o("sew-d"),shr=o(" \u2014 "),wH=a("a"),lhr=o("SEWDForCTC"),ihr=o(" (SEW-D model)"),dhr=l(),F8=a("li"),c0e=a("strong"),chr=o("unispeech"),fhr=o(" \u2014 "),AH=a("a"),mhr=o("UniSpeechForCTC"),ghr=o(" (UniSpeech model)"),hhr=l(),T8=a("li"),f0e=a("strong"),phr=o("unispeech-sat"),_hr=o(" \u2014 "),LH=a("a"),uhr=o("UniSpeechSatForCTC"),bhr=o(" (UniSpeechSat model)"),vhr=l(),M8=a("li"),m0e=a("strong"),Fhr=o("wav2vec2"),Thr=o(" \u2014 "),yH=a("a"),Mhr=o("Wav2Vec2ForCTC"),Ehr=o(" (Wav2Vec2 model)"),Chr=l(),E8=a("li"),g0e=a("strong"),whr=o("wav2vec2-conformer"),Ahr=o(" \u2014 "),xH=a("a"),Lhr=o("Wav2Vec2ConformerForCTC"),yhr=o(" (Wav2Vec2-Conformer model)"),xhr=l(),C8=a("li"),h0e=a("strong"),$hr=o("wavlm"),khr=o(" \u2014 "),$H=a("a"),Shr=o("WavLMForCTC"),Rhr=o(" (WavLM model)"),Phr=l(),w8=a("p"),Bhr=o("The model is set in evaluation mode by default using "),p0e=a("code"),Nhr=o("model.eval()"),Ihr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_0e=a("code"),qhr=o("model.train()"),jhr=l(),F(A8.$$.fragment),fze=l(),jd=a("h2"),L8=a("a"),u0e=a("span"),F(m9.$$.fragment),Dhr=l(),b0e=a("span"),Ghr=o("AutoModelForSpeechSeq2Seq"),mze=l(),Ho=a("div"),F(g9.$$.fragment),Ohr=l(),Dd=a("p"),Vhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),kH=a("a"),Xhr=o("from_pretrained()"),zhr=o(" class method or the "),SH=a("a"),Qhr=o("from_config()"),Whr=o(` class
method.`),Hhr=l(),h9=a("p"),Uhr=o("This class cannot be instantiated directly using "),v0e=a("code"),Jhr=o("__init__()"),Yhr=o(" (throws an error)."),Khr=l(),At=a("div"),F(p9.$$.fragment),Zhr=l(),F0e=a("p"),epr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),opr=l(),Gd=a("p"),rpr=o(`Note:
Loading a model from its configuration file does `),T0e=a("strong"),tpr=o("not"),apr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RH=a("a"),npr=o("from_pretrained()"),spr=o(" to load the model weights."),lpr=l(),F(y8.$$.fragment),ipr=l(),po=a("div"),F(_9.$$.fragment),dpr=l(),M0e=a("p"),cpr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),fpr=l(),Za=a("p"),mpr=o("The model class to instantiate is selected based on the "),E0e=a("code"),gpr=o("model_type"),hpr=o(` property of the config object (either
passed as an argument or loaded from `),C0e=a("code"),ppr=o("pretrained_model_name_or_path"),_pr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w0e=a("code"),upr=o("pretrained_model_name_or_path"),bpr=o(":"),vpr=l(),u9=a("ul"),x8=a("li"),A0e=a("strong"),Fpr=o("speech-encoder-decoder"),Tpr=o(" \u2014 "),PH=a("a"),Mpr=o("SpeechEncoderDecoderModel"),Epr=o(" (Speech Encoder decoder model)"),Cpr=l(),$8=a("li"),L0e=a("strong"),wpr=o("speech_to_text"),Apr=o(" \u2014 "),BH=a("a"),Lpr=o("Speech2TextForConditionalGeneration"),ypr=o(" (Speech2Text model)"),xpr=l(),k8=a("p"),$pr=o("The model is set in evaluation mode by default using "),y0e=a("code"),kpr=o("model.eval()"),Spr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),x0e=a("code"),Rpr=o("model.train()"),Ppr=l(),F(S8.$$.fragment),gze=l(),Od=a("h2"),R8=a("a"),$0e=a("span"),F(b9.$$.fragment),Bpr=l(),k0e=a("span"),Npr=o("AutoModelForAudioXVector"),hze=l(),Uo=a("div"),F(v9.$$.fragment),Ipr=l(),Vd=a("p"),qpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),NH=a("a"),jpr=o("from_pretrained()"),Dpr=o(" class method or the "),IH=a("a"),Gpr=o("from_config()"),Opr=o(` class
method.`),Vpr=l(),F9=a("p"),Xpr=o("This class cannot be instantiated directly using "),S0e=a("code"),zpr=o("__init__()"),Qpr=o(" (throws an error)."),Wpr=l(),Lt=a("div"),F(T9.$$.fragment),Hpr=l(),R0e=a("p"),Upr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Jpr=l(),Xd=a("p"),Ypr=o(`Note:
Loading a model from its configuration file does `),P0e=a("strong"),Kpr=o("not"),Zpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qH=a("a"),e_r=o("from_pretrained()"),o_r=o(" to load the model weights."),r_r=l(),F(P8.$$.fragment),t_r=l(),_o=a("div"),F(M9.$$.fragment),a_r=l(),B0e=a("p"),n_r=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),s_r=l(),en=a("p"),l_r=o("The model class to instantiate is selected based on the "),N0e=a("code"),i_r=o("model_type"),d_r=o(` property of the config object (either
passed as an argument or loaded from `),I0e=a("code"),c_r=o("pretrained_model_name_or_path"),f_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q0e=a("code"),m_r=o("pretrained_model_name_or_path"),g_r=o(":"),h_r=l(),tt=a("ul"),B8=a("li"),j0e=a("strong"),p_r=o("data2vec-audio"),__r=o(" \u2014 "),jH=a("a"),u_r=o("Data2VecAudioForXVector"),b_r=o(" (Data2VecAudio model)"),v_r=l(),N8=a("li"),D0e=a("strong"),F_r=o("unispeech-sat"),T_r=o(" \u2014 "),DH=a("a"),M_r=o("UniSpeechSatForXVector"),E_r=o(" (UniSpeechSat model)"),C_r=l(),I8=a("li"),G0e=a("strong"),w_r=o("wav2vec2"),A_r=o(" \u2014 "),GH=a("a"),L_r=o("Wav2Vec2ForXVector"),y_r=o(" (Wav2Vec2 model)"),x_r=l(),q8=a("li"),O0e=a("strong"),$_r=o("wav2vec2-conformer"),k_r=o(" \u2014 "),OH=a("a"),S_r=o("Wav2Vec2ConformerForXVector"),R_r=o(" (Wav2Vec2-Conformer model)"),P_r=l(),j8=a("li"),V0e=a("strong"),B_r=o("wavlm"),N_r=o(" \u2014 "),VH=a("a"),I_r=o("WavLMForXVector"),q_r=o(" (WavLM model)"),j_r=l(),D8=a("p"),D_r=o("The model is set in evaluation mode by default using "),X0e=a("code"),G_r=o("model.eval()"),O_r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),z0e=a("code"),V_r=o("model.train()"),X_r=l(),F(G8.$$.fragment),pze=l(),zd=a("h2"),O8=a("a"),Q0e=a("span"),F(E9.$$.fragment),z_r=l(),W0e=a("span"),Q_r=o("AutoModelForMaskedImageModeling"),_ze=l(),Jo=a("div"),F(C9.$$.fragment),W_r=l(),Qd=a("p"),H_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),XH=a("a"),U_r=o("from_pretrained()"),J_r=o(" class method or the "),zH=a("a"),Y_r=o("from_config()"),K_r=o(` class
method.`),Z_r=l(),w9=a("p"),eur=o("This class cannot be instantiated directly using "),H0e=a("code"),our=o("__init__()"),rur=o(" (throws an error)."),tur=l(),yt=a("div"),F(A9.$$.fragment),aur=l(),U0e=a("p"),nur=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),sur=l(),Wd=a("p"),lur=o(`Note:
Loading a model from its configuration file does `),J0e=a("strong"),iur=o("not"),dur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QH=a("a"),cur=o("from_pretrained()"),fur=o(" to load the model weights."),mur=l(),F(V8.$$.fragment),gur=l(),uo=a("div"),F(L9.$$.fragment),hur=l(),Y0e=a("p"),pur=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),_ur=l(),on=a("p"),uur=o("The model class to instantiate is selected based on the "),K0e=a("code"),bur=o("model_type"),vur=o(` property of the config object (either
passed as an argument or loaded from `),Z0e=a("code"),Fur=o("pretrained_model_name_or_path"),Tur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eFe=a("code"),Mur=o("pretrained_model_name_or_path"),Eur=o(":"),Cur=l(),Hd=a("ul"),X8=a("li"),oFe=a("strong"),wur=o("deit"),Aur=o(" \u2014 "),WH=a("a"),Lur=o("DeiTForMaskedImageModeling"),yur=o(" (DeiT model)"),xur=l(),z8=a("li"),rFe=a("strong"),$ur=o("swin"),kur=o(" \u2014 "),HH=a("a"),Sur=o("SwinForMaskedImageModeling"),Rur=o(" (Swin Transformer model)"),Pur=l(),Q8=a("li"),tFe=a("strong"),Bur=o("vit"),Nur=o(" \u2014 "),UH=a("a"),Iur=o("ViTForMaskedImageModeling"),qur=o(" (ViT model)"),jur=l(),W8=a("p"),Dur=o("The model is set in evaluation mode by default using "),aFe=a("code"),Gur=o("model.eval()"),Our=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nFe=a("code"),Vur=o("model.train()"),Xur=l(),F(H8.$$.fragment),uze=l(),Ud=a("h2"),U8=a("a"),sFe=a("span"),F(y9.$$.fragment),zur=l(),lFe=a("span"),Qur=o("AutoModelForObjectDetection"),bze=l(),Yo=a("div"),F(x9.$$.fragment),Wur=l(),Jd=a("p"),Hur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),JH=a("a"),Uur=o("from_pretrained()"),Jur=o(" class method or the "),YH=a("a"),Yur=o("from_config()"),Kur=o(` class
method.`),Zur=l(),$9=a("p"),e2r=o("This class cannot be instantiated directly using "),iFe=a("code"),o2r=o("__init__()"),r2r=o(" (throws an error)."),t2r=l(),xt=a("div"),F(k9.$$.fragment),a2r=l(),dFe=a("p"),n2r=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),s2r=l(),Yd=a("p"),l2r=o(`Note:
Loading a model from its configuration file does `),cFe=a("strong"),i2r=o("not"),d2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KH=a("a"),c2r=o("from_pretrained()"),f2r=o(" to load the model weights."),m2r=l(),F(J8.$$.fragment),g2r=l(),bo=a("div"),F(S9.$$.fragment),h2r=l(),fFe=a("p"),p2r=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),_2r=l(),rn=a("p"),u2r=o("The model class to instantiate is selected based on the "),mFe=a("code"),b2r=o("model_type"),v2r=o(` property of the config object (either
passed as an argument or loaded from `),gFe=a("code"),F2r=o("pretrained_model_name_or_path"),T2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hFe=a("code"),M2r=o("pretrained_model_name_or_path"),E2r=o(":"),C2r=l(),R9=a("ul"),Y8=a("li"),pFe=a("strong"),w2r=o("detr"),A2r=o(" \u2014 "),ZH=a("a"),L2r=o("DetrForObjectDetection"),y2r=o(" (DETR model)"),x2r=l(),K8=a("li"),_Fe=a("strong"),$2r=o("yolos"),k2r=o(" \u2014 "),eU=a("a"),S2r=o("YolosForObjectDetection"),R2r=o(" (YOLOS model)"),P2r=l(),Z8=a("p"),B2r=o("The model is set in evaluation mode by default using "),uFe=a("code"),N2r=o("model.eval()"),I2r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bFe=a("code"),q2r=o("model.train()"),j2r=l(),F(eM.$$.fragment),vze=l(),Kd=a("h2"),oM=a("a"),vFe=a("span"),F(P9.$$.fragment),D2r=l(),FFe=a("span"),G2r=o("AutoModelForImageSegmentation"),Fze=l(),Ko=a("div"),F(B9.$$.fragment),O2r=l(),Zd=a("p"),V2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),oU=a("a"),X2r=o("from_pretrained()"),z2r=o(" class method or the "),rU=a("a"),Q2r=o("from_config()"),W2r=o(` class
method.`),H2r=l(),N9=a("p"),U2r=o("This class cannot be instantiated directly using "),TFe=a("code"),J2r=o("__init__()"),Y2r=o(" (throws an error)."),K2r=l(),$t=a("div"),F(I9.$$.fragment),Z2r=l(),MFe=a("p"),e1r=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),o1r=l(),ec=a("p"),r1r=o(`Note:
Loading a model from its configuration file does `),EFe=a("strong"),t1r=o("not"),a1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tU=a("a"),n1r=o("from_pretrained()"),s1r=o(" to load the model weights."),l1r=l(),F(rM.$$.fragment),i1r=l(),vo=a("div"),F(q9.$$.fragment),d1r=l(),CFe=a("p"),c1r=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),f1r=l(),tn=a("p"),m1r=o("The model class to instantiate is selected based on the "),wFe=a("code"),g1r=o("model_type"),h1r=o(` property of the config object (either
passed as an argument or loaded from `),AFe=a("code"),p1r=o("pretrained_model_name_or_path"),_1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LFe=a("code"),u1r=o("pretrained_model_name_or_path"),b1r=o(":"),v1r=l(),yFe=a("ul"),tM=a("li"),xFe=a("strong"),F1r=o("detr"),T1r=o(" \u2014 "),aU=a("a"),M1r=o("DetrForSegmentation"),E1r=o(" (DETR model)"),C1r=l(),aM=a("p"),w1r=o("The model is set in evaluation mode by default using "),$Fe=a("code"),A1r=o("model.eval()"),L1r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kFe=a("code"),y1r=o("model.train()"),x1r=l(),F(nM.$$.fragment),Tze=l(),oc=a("h2"),sM=a("a"),SFe=a("span"),F(j9.$$.fragment),$1r=l(),RFe=a("span"),k1r=o("AutoModelForSemanticSegmentation"),Mze=l(),Zo=a("div"),F(D9.$$.fragment),S1r=l(),rc=a("p"),R1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),nU=a("a"),P1r=o("from_pretrained()"),B1r=o(" class method or the "),sU=a("a"),N1r=o("from_config()"),I1r=o(` class
method.`),q1r=l(),G9=a("p"),j1r=o("This class cannot be instantiated directly using "),PFe=a("code"),D1r=o("__init__()"),G1r=o(" (throws an error)."),O1r=l(),kt=a("div"),F(O9.$$.fragment),V1r=l(),BFe=a("p"),X1r=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),z1r=l(),tc=a("p"),Q1r=o(`Note:
Loading a model from its configuration file does `),NFe=a("strong"),W1r=o("not"),H1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lU=a("a"),U1r=o("from_pretrained()"),J1r=o(" to load the model weights."),Y1r=l(),F(lM.$$.fragment),K1r=l(),Fo=a("div"),F(V9.$$.fragment),Z1r=l(),IFe=a("p"),ebr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),obr=l(),an=a("p"),rbr=o("The model class to instantiate is selected based on the "),qFe=a("code"),tbr=o("model_type"),abr=o(` property of the config object (either
passed as an argument or loaded from `),jFe=a("code"),nbr=o("pretrained_model_name_or_path"),sbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DFe=a("code"),lbr=o("pretrained_model_name_or_path"),ibr=o(":"),dbr=l(),at=a("ul"),iM=a("li"),GFe=a("strong"),cbr=o("beit"),fbr=o(" \u2014 "),iU=a("a"),mbr=o("BeitForSemanticSegmentation"),gbr=o(" (BEiT model)"),hbr=l(),dM=a("li"),OFe=a("strong"),pbr=o("data2vec-vision"),_br=o(" \u2014 "),dU=a("a"),ubr=o("Data2VecVisionForSemanticSegmentation"),bbr=o(" (Data2VecVision model)"),vbr=l(),cM=a("li"),VFe=a("strong"),Fbr=o("dpt"),Tbr=o(" \u2014 "),cU=a("a"),Mbr=o("DPTForSemanticSegmentation"),Ebr=o(" (DPT model)"),Cbr=l(),fM=a("li"),XFe=a("strong"),wbr=o("mobilevit"),Abr=o(" \u2014 "),fU=a("a"),Lbr=o("MobileViTForSemanticSegmentation"),ybr=o(" (MobileViT model)"),xbr=l(),mM=a("li"),zFe=a("strong"),$br=o("segformer"),kbr=o(" \u2014 "),mU=a("a"),Sbr=o("SegformerForSemanticSegmentation"),Rbr=o(" (SegFormer model)"),Pbr=l(),gM=a("p"),Bbr=o("The model is set in evaluation mode by default using "),QFe=a("code"),Nbr=o("model.eval()"),Ibr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),WFe=a("code"),qbr=o("model.train()"),jbr=l(),F(hM.$$.fragment),Eze=l(),ac=a("h2"),pM=a("a"),HFe=a("span"),F(X9.$$.fragment),Dbr=l(),UFe=a("span"),Gbr=o("AutoModelForInstanceSegmentation"),Cze=l(),er=a("div"),F(z9.$$.fragment),Obr=l(),nc=a("p"),Vbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),gU=a("a"),Xbr=o("from_pretrained()"),zbr=o(" class method or the "),hU=a("a"),Qbr=o("from_config()"),Wbr=o(` class
method.`),Hbr=l(),Q9=a("p"),Ubr=o("This class cannot be instantiated directly using "),JFe=a("code"),Jbr=o("__init__()"),Ybr=o(" (throws an error)."),Kbr=l(),St=a("div"),F(W9.$$.fragment),Zbr=l(),YFe=a("p"),evr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),ovr=l(),sc=a("p"),rvr=o(`Note:
Loading a model from its configuration file does `),KFe=a("strong"),tvr=o("not"),avr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pU=a("a"),nvr=o("from_pretrained()"),svr=o(" to load the model weights."),lvr=l(),F(_M.$$.fragment),ivr=l(),To=a("div"),F(H9.$$.fragment),dvr=l(),ZFe=a("p"),cvr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),fvr=l(),nn=a("p"),mvr=o("The model class to instantiate is selected based on the "),eTe=a("code"),gvr=o("model_type"),hvr=o(` property of the config object (either
passed as an argument or loaded from `),oTe=a("code"),pvr=o("pretrained_model_name_or_path"),_vr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rTe=a("code"),uvr=o("pretrained_model_name_or_path"),bvr=o(":"),vvr=l(),tTe=a("ul"),uM=a("li"),aTe=a("strong"),Fvr=o("maskformer"),Tvr=o(" \u2014 "),_U=a("a"),Mvr=o("MaskFormerForInstanceSegmentation"),Evr=o(" (MaskFormer model)"),Cvr=l(),bM=a("p"),wvr=o("The model is set in evaluation mode by default using "),nTe=a("code"),Avr=o("model.eval()"),Lvr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sTe=a("code"),yvr=o("model.train()"),xvr=l(),F(vM.$$.fragment),wze=l(),lc=a("h2"),FM=a("a"),lTe=a("span"),F(U9.$$.fragment),$vr=l(),iTe=a("span"),kvr=o("TFAutoModel"),Aze=l(),or=a("div"),F(J9.$$.fragment),Svr=l(),ic=a("p"),Rvr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),uU=a("a"),Pvr=o("from_pretrained()"),Bvr=o(" class method or the "),bU=a("a"),Nvr=o("from_config()"),Ivr=o(` class
method.`),qvr=l(),Y9=a("p"),jvr=o("This class cannot be instantiated directly using "),dTe=a("code"),Dvr=o("__init__()"),Gvr=o(" (throws an error)."),Ovr=l(),Rt=a("div"),F(K9.$$.fragment),Vvr=l(),cTe=a("p"),Xvr=o("Instantiates one of the base model classes of the library from a configuration."),zvr=l(),dc=a("p"),Qvr=o(`Note:
Loading a model from its configuration file does `),fTe=a("strong"),Wvr=o("not"),Hvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vU=a("a"),Uvr=o("from_pretrained()"),Jvr=o(" to load the model weights."),Yvr=l(),F(TM.$$.fragment),Kvr=l(),xr=a("div"),F(Z9.$$.fragment),Zvr=l(),mTe=a("p"),e0r=o("Instantiate one of the base model classes of the library from a pretrained model."),o0r=l(),sn=a("p"),r0r=o("The model class to instantiate is selected based on the "),gTe=a("code"),t0r=o("model_type"),a0r=o(` property of the config object (either
passed as an argument or loaded from `),hTe=a("code"),n0r=o("pretrained_model_name_or_path"),s0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pTe=a("code"),l0r=o("pretrained_model_name_or_path"),i0r=o(":"),d0r=l(),q=a("ul"),MM=a("li"),_Te=a("strong"),c0r=o("albert"),f0r=o(" \u2014 "),FU=a("a"),m0r=o("TFAlbertModel"),g0r=o(" (ALBERT model)"),h0r=l(),EM=a("li"),uTe=a("strong"),p0r=o("bart"),_0r=o(" \u2014 "),TU=a("a"),u0r=o("TFBartModel"),b0r=o(" (BART model)"),v0r=l(),CM=a("li"),bTe=a("strong"),F0r=o("bert"),T0r=o(" \u2014 "),MU=a("a"),M0r=o("TFBertModel"),E0r=o(" (BERT model)"),C0r=l(),wM=a("li"),vTe=a("strong"),w0r=o("blenderbot"),A0r=o(" \u2014 "),EU=a("a"),L0r=o("TFBlenderbotModel"),y0r=o(" (Blenderbot model)"),x0r=l(),AM=a("li"),FTe=a("strong"),$0r=o("blenderbot-small"),k0r=o(" \u2014 "),CU=a("a"),S0r=o("TFBlenderbotSmallModel"),R0r=o(" (BlenderbotSmall model)"),P0r=l(),LM=a("li"),TTe=a("strong"),B0r=o("camembert"),N0r=o(" \u2014 "),wU=a("a"),I0r=o("TFCamembertModel"),q0r=o(" (CamemBERT model)"),j0r=l(),yM=a("li"),MTe=a("strong"),D0r=o("clip"),G0r=o(" \u2014 "),AU=a("a"),O0r=o("TFCLIPModel"),V0r=o(" (CLIP model)"),X0r=l(),xM=a("li"),ETe=a("strong"),z0r=o("convbert"),Q0r=o(" \u2014 "),LU=a("a"),W0r=o("TFConvBertModel"),H0r=o(" (ConvBERT model)"),U0r=l(),$M=a("li"),CTe=a("strong"),J0r=o("convnext"),Y0r=o(" \u2014 "),yU=a("a"),K0r=o("TFConvNextModel"),Z0r=o(" (ConvNeXT model)"),eFr=l(),kM=a("li"),wTe=a("strong"),oFr=o("ctrl"),rFr=o(" \u2014 "),xU=a("a"),tFr=o("TFCTRLModel"),aFr=o(" (CTRL model)"),nFr=l(),SM=a("li"),ATe=a("strong"),sFr=o("data2vec-vision"),lFr=o(" \u2014 "),$U=a("a"),iFr=o("TFData2VecVisionModel"),dFr=o(" (Data2VecVision model)"),cFr=l(),RM=a("li"),LTe=a("strong"),fFr=o("deberta"),mFr=o(" \u2014 "),kU=a("a"),gFr=o("TFDebertaModel"),hFr=o(" (DeBERTa model)"),pFr=l(),PM=a("li"),yTe=a("strong"),_Fr=o("deberta-v2"),uFr=o(" \u2014 "),SU=a("a"),bFr=o("TFDebertaV2Model"),vFr=o(" (DeBERTa-v2 model)"),FFr=l(),BM=a("li"),xTe=a("strong"),TFr=o("deit"),MFr=o(" \u2014 "),RU=a("a"),EFr=o("TFDeiTModel"),CFr=o(" (DeiT model)"),wFr=l(),NM=a("li"),$Te=a("strong"),AFr=o("distilbert"),LFr=o(" \u2014 "),PU=a("a"),yFr=o("TFDistilBertModel"),xFr=o(" (DistilBERT model)"),$Fr=l(),IM=a("li"),kTe=a("strong"),kFr=o("dpr"),SFr=o(" \u2014 "),BU=a("a"),RFr=o("TFDPRQuestionEncoder"),PFr=o(" (DPR model)"),BFr=l(),qM=a("li"),STe=a("strong"),NFr=o("electra"),IFr=o(" \u2014 "),NU=a("a"),qFr=o("TFElectraModel"),jFr=o(" (ELECTRA model)"),DFr=l(),jM=a("li"),RTe=a("strong"),GFr=o("flaubert"),OFr=o(" \u2014 "),IU=a("a"),VFr=o("TFFlaubertModel"),XFr=o(" (FlauBERT model)"),zFr=l(),Ys=a("li"),PTe=a("strong"),QFr=o("funnel"),WFr=o(" \u2014 "),qU=a("a"),HFr=o("TFFunnelModel"),UFr=o(" or "),jU=a("a"),JFr=o("TFFunnelBaseModel"),YFr=o(" (Funnel Transformer model)"),KFr=l(),DM=a("li"),BTe=a("strong"),ZFr=o("gpt2"),eTr=o(" \u2014 "),DU=a("a"),oTr=o("TFGPT2Model"),rTr=o(" (OpenAI GPT-2 model)"),tTr=l(),GM=a("li"),NTe=a("strong"),aTr=o("gptj"),nTr=o(" \u2014 "),GU=a("a"),sTr=o("TFGPTJModel"),lTr=o(" (GPT-J model)"),iTr=l(),OM=a("li"),ITe=a("strong"),dTr=o("hubert"),cTr=o(" \u2014 "),OU=a("a"),fTr=o("TFHubertModel"),mTr=o(" (Hubert model)"),gTr=l(),VM=a("li"),qTe=a("strong"),hTr=o("layoutlm"),pTr=o(" \u2014 "),VU=a("a"),_Tr=o("TFLayoutLMModel"),uTr=o(" (LayoutLM model)"),bTr=l(),XM=a("li"),jTe=a("strong"),vTr=o("led"),FTr=o(" \u2014 "),XU=a("a"),TTr=o("TFLEDModel"),MTr=o(" (LED model)"),ETr=l(),zM=a("li"),DTe=a("strong"),CTr=o("longformer"),wTr=o(" \u2014 "),zU=a("a"),ATr=o("TFLongformerModel"),LTr=o(" (Longformer model)"),yTr=l(),QM=a("li"),GTe=a("strong"),xTr=o("lxmert"),$Tr=o(" \u2014 "),QU=a("a"),kTr=o("TFLxmertModel"),STr=o(" (LXMERT model)"),RTr=l(),WM=a("li"),OTe=a("strong"),PTr=o("marian"),BTr=o(" \u2014 "),WU=a("a"),NTr=o("TFMarianModel"),ITr=o(" (Marian model)"),qTr=l(),HM=a("li"),VTe=a("strong"),jTr=o("mbart"),DTr=o(" \u2014 "),HU=a("a"),GTr=o("TFMBartModel"),OTr=o(" (mBART model)"),VTr=l(),UM=a("li"),XTe=a("strong"),XTr=o("mobilebert"),zTr=o(" \u2014 "),UU=a("a"),QTr=o("TFMobileBertModel"),WTr=o(" (MobileBERT model)"),HTr=l(),JM=a("li"),zTe=a("strong"),UTr=o("mpnet"),JTr=o(" \u2014 "),JU=a("a"),YTr=o("TFMPNetModel"),KTr=o(" (MPNet model)"),ZTr=l(),YM=a("li"),QTe=a("strong"),e8r=o("mt5"),o8r=o(" \u2014 "),YU=a("a"),r8r=o("TFMT5Model"),t8r=o(" (MT5 model)"),a8r=l(),KM=a("li"),WTe=a("strong"),n8r=o("openai-gpt"),s8r=o(" \u2014 "),KU=a("a"),l8r=o("TFOpenAIGPTModel"),i8r=o(" (OpenAI GPT model)"),d8r=l(),ZM=a("li"),HTe=a("strong"),c8r=o("opt"),f8r=o(" \u2014 "),ZU=a("a"),m8r=o("TFOPTModel"),g8r=o(" (OPT model)"),h8r=l(),e4=a("li"),UTe=a("strong"),p8r=o("pegasus"),_8r=o(" \u2014 "),eJ=a("a"),u8r=o("TFPegasusModel"),b8r=o(" (Pegasus model)"),v8r=l(),o4=a("li"),JTe=a("strong"),F8r=o("regnet"),T8r=o(" \u2014 "),oJ=a("a"),M8r=o("TFRegNetModel"),E8r=o(" (RegNet model)"),C8r=l(),r4=a("li"),YTe=a("strong"),w8r=o("rembert"),A8r=o(" \u2014 "),rJ=a("a"),L8r=o("TFRemBertModel"),y8r=o(" (RemBERT model)"),x8r=l(),t4=a("li"),KTe=a("strong"),$8r=o("resnet"),k8r=o(" \u2014 "),tJ=a("a"),S8r=o("TFResNetModel"),R8r=o(" (ResNet model)"),P8r=l(),a4=a("li"),ZTe=a("strong"),B8r=o("roberta"),N8r=o(" \u2014 "),aJ=a("a"),I8r=o("TFRobertaModel"),q8r=o(" (RoBERTa model)"),j8r=l(),n4=a("li"),e8e=a("strong"),D8r=o("roformer"),G8r=o(" \u2014 "),nJ=a("a"),O8r=o("TFRoFormerModel"),V8r=o(" (RoFormer model)"),X8r=l(),s4=a("li"),o8e=a("strong"),z8r=o("speech_to_text"),Q8r=o(" \u2014 "),sJ=a("a"),W8r=o("TFSpeech2TextModel"),H8r=o(" (Speech2Text model)"),U8r=l(),l4=a("li"),r8e=a("strong"),J8r=o("swin"),Y8r=o(" \u2014 "),lJ=a("a"),K8r=o("TFSwinModel"),Z8r=o(" (Swin Transformer model)"),eMr=l(),i4=a("li"),t8e=a("strong"),oMr=o("t5"),rMr=o(" \u2014 "),iJ=a("a"),tMr=o("TFT5Model"),aMr=o(" (T5 model)"),nMr=l(),d4=a("li"),a8e=a("strong"),sMr=o("tapas"),lMr=o(" \u2014 "),dJ=a("a"),iMr=o("TFTapasModel"),dMr=o(" (TAPAS model)"),cMr=l(),c4=a("li"),n8e=a("strong"),fMr=o("transfo-xl"),mMr=o(" \u2014 "),cJ=a("a"),gMr=o("TFTransfoXLModel"),hMr=o(" (Transformer-XL model)"),pMr=l(),f4=a("li"),s8e=a("strong"),_Mr=o("vit"),uMr=o(" \u2014 "),fJ=a("a"),bMr=o("TFViTModel"),vMr=o(" (ViT model)"),FMr=l(),m4=a("li"),l8e=a("strong"),TMr=o("vit_mae"),MMr=o(" \u2014 "),mJ=a("a"),EMr=o("TFViTMAEModel"),CMr=o(" (ViTMAE model)"),wMr=l(),g4=a("li"),i8e=a("strong"),AMr=o("wav2vec2"),LMr=o(" \u2014 "),gJ=a("a"),yMr=o("TFWav2Vec2Model"),xMr=o(" (Wav2Vec2 model)"),$Mr=l(),h4=a("li"),d8e=a("strong"),kMr=o("xlm"),SMr=o(" \u2014 "),hJ=a("a"),RMr=o("TFXLMModel"),PMr=o(" (XLM model)"),BMr=l(),p4=a("li"),c8e=a("strong"),NMr=o("xlm-roberta"),IMr=o(" \u2014 "),pJ=a("a"),qMr=o("TFXLMRobertaModel"),jMr=o(" (XLM-RoBERTa model)"),DMr=l(),_4=a("li"),f8e=a("strong"),GMr=o("xlnet"),OMr=o(" \u2014 "),_J=a("a"),VMr=o("TFXLNetModel"),XMr=o(" (XLNet model)"),zMr=l(),F(u4.$$.fragment),Lze=l(),cc=a("h2"),b4=a("a"),m8e=a("span"),F(ex.$$.fragment),QMr=l(),g8e=a("span"),WMr=o("TFAutoModelForPreTraining"),yze=l(),rr=a("div"),F(ox.$$.fragment),HMr=l(),fc=a("p"),UMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),uJ=a("a"),JMr=o("from_pretrained()"),YMr=o(" class method or the "),bJ=a("a"),KMr=o("from_config()"),ZMr=o(` class
method.`),e4r=l(),rx=a("p"),o4r=o("This class cannot be instantiated directly using "),h8e=a("code"),r4r=o("__init__()"),t4r=o(" (throws an error)."),a4r=l(),Pt=a("div"),F(tx.$$.fragment),n4r=l(),p8e=a("p"),s4r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),l4r=l(),mc=a("p"),i4r=o(`Note:
Loading a model from its configuration file does `),_8e=a("strong"),d4r=o("not"),c4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vJ=a("a"),f4r=o("from_pretrained()"),m4r=o(" to load the model weights."),g4r=l(),F(v4.$$.fragment),h4r=l(),$r=a("div"),F(ax.$$.fragment),p4r=l(),u8e=a("p"),_4r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),u4r=l(),ln=a("p"),b4r=o("The model class to instantiate is selected based on the "),b8e=a("code"),v4r=o("model_type"),F4r=o(` property of the config object (either
passed as an argument or loaded from `),v8e=a("code"),T4r=o("pretrained_model_name_or_path"),M4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F8e=a("code"),E4r=o("pretrained_model_name_or_path"),C4r=o(":"),w4r=l(),se=a("ul"),F4=a("li"),T8e=a("strong"),A4r=o("albert"),L4r=o(" \u2014 "),FJ=a("a"),y4r=o("TFAlbertForPreTraining"),x4r=o(" (ALBERT model)"),$4r=l(),T4=a("li"),M8e=a("strong"),k4r=o("bart"),S4r=o(" \u2014 "),TJ=a("a"),R4r=o("TFBartForConditionalGeneration"),P4r=o(" (BART model)"),B4r=l(),M4=a("li"),E8e=a("strong"),N4r=o("bert"),I4r=o(" \u2014 "),MJ=a("a"),q4r=o("TFBertForPreTraining"),j4r=o(" (BERT model)"),D4r=l(),E4=a("li"),C8e=a("strong"),G4r=o("camembert"),O4r=o(" \u2014 "),EJ=a("a"),V4r=o("TFCamembertForMaskedLM"),X4r=o(" (CamemBERT model)"),z4r=l(),C4=a("li"),w8e=a("strong"),Q4r=o("ctrl"),W4r=o(" \u2014 "),CJ=a("a"),H4r=o("TFCTRLLMHeadModel"),U4r=o(" (CTRL model)"),J4r=l(),w4=a("li"),A8e=a("strong"),Y4r=o("distilbert"),K4r=o(" \u2014 "),wJ=a("a"),Z4r=o("TFDistilBertForMaskedLM"),eEr=o(" (DistilBERT model)"),oEr=l(),A4=a("li"),L8e=a("strong"),rEr=o("electra"),tEr=o(" \u2014 "),AJ=a("a"),aEr=o("TFElectraForPreTraining"),nEr=o(" (ELECTRA model)"),sEr=l(),L4=a("li"),y8e=a("strong"),lEr=o("flaubert"),iEr=o(" \u2014 "),LJ=a("a"),dEr=o("TFFlaubertWithLMHeadModel"),cEr=o(" (FlauBERT model)"),fEr=l(),y4=a("li"),x8e=a("strong"),mEr=o("funnel"),gEr=o(" \u2014 "),yJ=a("a"),hEr=o("TFFunnelForPreTraining"),pEr=o(" (Funnel Transformer model)"),_Er=l(),x4=a("li"),$8e=a("strong"),uEr=o("gpt2"),bEr=o(" \u2014 "),xJ=a("a"),vEr=o("TFGPT2LMHeadModel"),FEr=o(" (OpenAI GPT-2 model)"),TEr=l(),$4=a("li"),k8e=a("strong"),MEr=o("layoutlm"),EEr=o(" \u2014 "),$J=a("a"),CEr=o("TFLayoutLMForMaskedLM"),wEr=o(" (LayoutLM model)"),AEr=l(),k4=a("li"),S8e=a("strong"),LEr=o("lxmert"),yEr=o(" \u2014 "),kJ=a("a"),xEr=o("TFLxmertForPreTraining"),$Er=o(" (LXMERT model)"),kEr=l(),S4=a("li"),R8e=a("strong"),SEr=o("mobilebert"),REr=o(" \u2014 "),SJ=a("a"),PEr=o("TFMobileBertForPreTraining"),BEr=o(" (MobileBERT model)"),NEr=l(),R4=a("li"),P8e=a("strong"),IEr=o("mpnet"),qEr=o(" \u2014 "),RJ=a("a"),jEr=o("TFMPNetForMaskedLM"),DEr=o(" (MPNet model)"),GEr=l(),P4=a("li"),B8e=a("strong"),OEr=o("openai-gpt"),VEr=o(" \u2014 "),PJ=a("a"),XEr=o("TFOpenAIGPTLMHeadModel"),zEr=o(" (OpenAI GPT model)"),QEr=l(),B4=a("li"),N8e=a("strong"),WEr=o("roberta"),HEr=o(" \u2014 "),BJ=a("a"),UEr=o("TFRobertaForMaskedLM"),JEr=o(" (RoBERTa model)"),YEr=l(),N4=a("li"),I8e=a("strong"),KEr=o("t5"),ZEr=o(" \u2014 "),NJ=a("a"),eCr=o("TFT5ForConditionalGeneration"),oCr=o(" (T5 model)"),rCr=l(),I4=a("li"),q8e=a("strong"),tCr=o("tapas"),aCr=o(" \u2014 "),IJ=a("a"),nCr=o("TFTapasForMaskedLM"),sCr=o(" (TAPAS model)"),lCr=l(),q4=a("li"),j8e=a("strong"),iCr=o("transfo-xl"),dCr=o(" \u2014 "),qJ=a("a"),cCr=o("TFTransfoXLLMHeadModel"),fCr=o(" (Transformer-XL model)"),mCr=l(),j4=a("li"),D8e=a("strong"),gCr=o("vit_mae"),hCr=o(" \u2014 "),jJ=a("a"),pCr=o("TFViTMAEForPreTraining"),_Cr=o(" (ViTMAE model)"),uCr=l(),D4=a("li"),G8e=a("strong"),bCr=o("xlm"),vCr=o(" \u2014 "),DJ=a("a"),FCr=o("TFXLMWithLMHeadModel"),TCr=o(" (XLM model)"),MCr=l(),G4=a("li"),O8e=a("strong"),ECr=o("xlm-roberta"),CCr=o(" \u2014 "),GJ=a("a"),wCr=o("TFXLMRobertaForMaskedLM"),ACr=o(" (XLM-RoBERTa model)"),LCr=l(),O4=a("li"),V8e=a("strong"),yCr=o("xlnet"),xCr=o(" \u2014 "),OJ=a("a"),$Cr=o("TFXLNetLMHeadModel"),kCr=o(" (XLNet model)"),SCr=l(),F(V4.$$.fragment),xze=l(),gc=a("h2"),X4=a("a"),X8e=a("span"),F(nx.$$.fragment),RCr=l(),z8e=a("span"),PCr=o("TFAutoModelForCausalLM"),$ze=l(),tr=a("div"),F(sx.$$.fragment),BCr=l(),hc=a("p"),NCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),VJ=a("a"),ICr=o("from_pretrained()"),qCr=o(" class method or the "),XJ=a("a"),jCr=o("from_config()"),DCr=o(` class
method.`),GCr=l(),lx=a("p"),OCr=o("This class cannot be instantiated directly using "),Q8e=a("code"),VCr=o("__init__()"),XCr=o(" (throws an error)."),zCr=l(),Bt=a("div"),F(ix.$$.fragment),QCr=l(),W8e=a("p"),WCr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),HCr=l(),pc=a("p"),UCr=o(`Note:
Loading a model from its configuration file does `),H8e=a("strong"),JCr=o("not"),YCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zJ=a("a"),KCr=o("from_pretrained()"),ZCr=o(" to load the model weights."),e3r=l(),F(z4.$$.fragment),o3r=l(),kr=a("div"),F(dx.$$.fragment),r3r=l(),U8e=a("p"),t3r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),a3r=l(),dn=a("p"),n3r=o("The model class to instantiate is selected based on the "),J8e=a("code"),s3r=o("model_type"),l3r=o(` property of the config object (either
passed as an argument or loaded from `),Y8e=a("code"),i3r=o("pretrained_model_name_or_path"),d3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K8e=a("code"),c3r=o("pretrained_model_name_or_path"),f3r=o(":"),m3r=l(),Me=a("ul"),Q4=a("li"),Z8e=a("strong"),g3r=o("bert"),h3r=o(" \u2014 "),QJ=a("a"),p3r=o("TFBertLMHeadModel"),_3r=o(" (BERT model)"),u3r=l(),W4=a("li"),eMe=a("strong"),b3r=o("camembert"),v3r=o(" \u2014 "),WJ=a("a"),F3r=o("TFCamembertForCausalLM"),T3r=o(" (CamemBERT model)"),M3r=l(),H4=a("li"),oMe=a("strong"),E3r=o("ctrl"),C3r=o(" \u2014 "),HJ=a("a"),w3r=o("TFCTRLLMHeadModel"),A3r=o(" (CTRL model)"),L3r=l(),U4=a("li"),rMe=a("strong"),y3r=o("gpt2"),x3r=o(" \u2014 "),UJ=a("a"),$3r=o("TFGPT2LMHeadModel"),k3r=o(" (OpenAI GPT-2 model)"),S3r=l(),J4=a("li"),tMe=a("strong"),R3r=o("gptj"),P3r=o(" \u2014 "),JJ=a("a"),B3r=o("TFGPTJForCausalLM"),N3r=o(" (GPT-J model)"),I3r=l(),Y4=a("li"),aMe=a("strong"),q3r=o("openai-gpt"),j3r=o(" \u2014 "),YJ=a("a"),D3r=o("TFOpenAIGPTLMHeadModel"),G3r=o(" (OpenAI GPT model)"),O3r=l(),K4=a("li"),nMe=a("strong"),V3r=o("opt"),X3r=o(" \u2014 "),KJ=a("a"),z3r=o("TFOPTForCausalLM"),Q3r=o(" (OPT model)"),W3r=l(),Z4=a("li"),sMe=a("strong"),H3r=o("rembert"),U3r=o(" \u2014 "),ZJ=a("a"),J3r=o("TFRemBertForCausalLM"),Y3r=o(" (RemBERT model)"),K3r=l(),eE=a("li"),lMe=a("strong"),Z3r=o("roberta"),e5r=o(" \u2014 "),eY=a("a"),o5r=o("TFRobertaForCausalLM"),r5r=o(" (RoBERTa model)"),t5r=l(),oE=a("li"),iMe=a("strong"),a5r=o("roformer"),n5r=o(" \u2014 "),oY=a("a"),s5r=o("TFRoFormerForCausalLM"),l5r=o(" (RoFormer model)"),i5r=l(),rE=a("li"),dMe=a("strong"),d5r=o("transfo-xl"),c5r=o(" \u2014 "),rY=a("a"),f5r=o("TFTransfoXLLMHeadModel"),m5r=o(" (Transformer-XL model)"),g5r=l(),tE=a("li"),cMe=a("strong"),h5r=o("xlm"),p5r=o(" \u2014 "),tY=a("a"),_5r=o("TFXLMWithLMHeadModel"),u5r=o(" (XLM model)"),b5r=l(),aE=a("li"),fMe=a("strong"),v5r=o("xlnet"),F5r=o(" \u2014 "),aY=a("a"),T5r=o("TFXLNetLMHeadModel"),M5r=o(" (XLNet model)"),E5r=l(),F(nE.$$.fragment),kze=l(),_c=a("h2"),sE=a("a"),mMe=a("span"),F(cx.$$.fragment),C5r=l(),gMe=a("span"),w5r=o("TFAutoModelForImageClassification"),Sze=l(),ar=a("div"),F(fx.$$.fragment),A5r=l(),uc=a("p"),L5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),nY=a("a"),y5r=o("from_pretrained()"),x5r=o(" class method or the "),sY=a("a"),$5r=o("from_config()"),k5r=o(` class
method.`),S5r=l(),mx=a("p"),R5r=o("This class cannot be instantiated directly using "),hMe=a("code"),P5r=o("__init__()"),B5r=o(" (throws an error)."),N5r=l(),Nt=a("div"),F(gx.$$.fragment),I5r=l(),pMe=a("p"),q5r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),j5r=l(),bc=a("p"),D5r=o(`Note:
Loading a model from its configuration file does `),_Me=a("strong"),G5r=o("not"),O5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lY=a("a"),V5r=o("from_pretrained()"),X5r=o(" to load the model weights."),z5r=l(),F(lE.$$.fragment),Q5r=l(),Sr=a("div"),F(hx.$$.fragment),W5r=l(),uMe=a("p"),H5r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),U5r=l(),cn=a("p"),J5r=o("The model class to instantiate is selected based on the "),bMe=a("code"),Y5r=o("model_type"),K5r=o(` property of the config object (either
passed as an argument or loaded from `),vMe=a("code"),Z5r=o("pretrained_model_name_or_path"),ewr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FMe=a("code"),owr=o("pretrained_model_name_or_path"),rwr=o(":"),twr=l(),Qe=a("ul"),iE=a("li"),TMe=a("strong"),awr=o("convnext"),nwr=o(" \u2014 "),iY=a("a"),swr=o("TFConvNextForImageClassification"),lwr=o(" (ConvNeXT model)"),iwr=l(),dE=a("li"),MMe=a("strong"),dwr=o("data2vec-vision"),cwr=o(" \u2014 "),dY=a("a"),fwr=o("TFData2VecVisionForImageClassification"),mwr=o(" (Data2VecVision model)"),gwr=l(),Ks=a("li"),EMe=a("strong"),hwr=o("deit"),pwr=o(" \u2014 "),cY=a("a"),_wr=o("TFDeiTForImageClassification"),uwr=o(" or "),fY=a("a"),bwr=o("TFDeiTForImageClassificationWithTeacher"),vwr=o(" (DeiT model)"),Fwr=l(),cE=a("li"),CMe=a("strong"),Twr=o("regnet"),Mwr=o(" \u2014 "),mY=a("a"),Ewr=o("TFRegNetForImageClassification"),Cwr=o(" (RegNet model)"),wwr=l(),fE=a("li"),wMe=a("strong"),Awr=o("resnet"),Lwr=o(" \u2014 "),gY=a("a"),ywr=o("TFResNetForImageClassification"),xwr=o(" (ResNet model)"),$wr=l(),mE=a("li"),AMe=a("strong"),kwr=o("swin"),Swr=o(" \u2014 "),hY=a("a"),Rwr=o("TFSwinForImageClassification"),Pwr=o(" (Swin Transformer model)"),Bwr=l(),gE=a("li"),LMe=a("strong"),Nwr=o("vit"),Iwr=o(" \u2014 "),pY=a("a"),qwr=o("TFViTForImageClassification"),jwr=o(" (ViT model)"),Dwr=l(),F(hE.$$.fragment),Rze=l(),vc=a("h2"),pE=a("a"),yMe=a("span"),F(px.$$.fragment),Gwr=l(),xMe=a("span"),Owr=o("TFAutoModelForMaskedLM"),Pze=l(),nr=a("div"),F(_x.$$.fragment),Vwr=l(),Fc=a("p"),Xwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),_Y=a("a"),zwr=o("from_pretrained()"),Qwr=o(" class method or the "),uY=a("a"),Wwr=o("from_config()"),Hwr=o(` class
method.`),Uwr=l(),ux=a("p"),Jwr=o("This class cannot be instantiated directly using "),$Me=a("code"),Ywr=o("__init__()"),Kwr=o(" (throws an error)."),Zwr=l(),It=a("div"),F(bx.$$.fragment),eAr=l(),kMe=a("p"),oAr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),rAr=l(),Tc=a("p"),tAr=o(`Note:
Loading a model from its configuration file does `),SMe=a("strong"),aAr=o("not"),nAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bY=a("a"),sAr=o("from_pretrained()"),lAr=o(" to load the model weights."),iAr=l(),F(_E.$$.fragment),dAr=l(),Rr=a("div"),F(vx.$$.fragment),cAr=l(),RMe=a("p"),fAr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),mAr=l(),fn=a("p"),gAr=o("The model class to instantiate is selected based on the "),PMe=a("code"),hAr=o("model_type"),pAr=o(` property of the config object (either
passed as an argument or loaded from `),BMe=a("code"),_Ar=o("pretrained_model_name_or_path"),uAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NMe=a("code"),bAr=o("pretrained_model_name_or_path"),vAr=o(":"),FAr=l(),ie=a("ul"),uE=a("li"),IMe=a("strong"),TAr=o("albert"),MAr=o(" \u2014 "),vY=a("a"),EAr=o("TFAlbertForMaskedLM"),CAr=o(" (ALBERT model)"),wAr=l(),bE=a("li"),qMe=a("strong"),AAr=o("bert"),LAr=o(" \u2014 "),FY=a("a"),yAr=o("TFBertForMaskedLM"),xAr=o(" (BERT model)"),$Ar=l(),vE=a("li"),jMe=a("strong"),kAr=o("camembert"),SAr=o(" \u2014 "),TY=a("a"),RAr=o("TFCamembertForMaskedLM"),PAr=o(" (CamemBERT model)"),BAr=l(),FE=a("li"),DMe=a("strong"),NAr=o("convbert"),IAr=o(" \u2014 "),MY=a("a"),qAr=o("TFConvBertForMaskedLM"),jAr=o(" (ConvBERT model)"),DAr=l(),TE=a("li"),GMe=a("strong"),GAr=o("deberta"),OAr=o(" \u2014 "),EY=a("a"),VAr=o("TFDebertaForMaskedLM"),XAr=o(" (DeBERTa model)"),zAr=l(),ME=a("li"),OMe=a("strong"),QAr=o("deberta-v2"),WAr=o(" \u2014 "),CY=a("a"),HAr=o("TFDebertaV2ForMaskedLM"),UAr=o(" (DeBERTa-v2 model)"),JAr=l(),EE=a("li"),VMe=a("strong"),YAr=o("distilbert"),KAr=o(" \u2014 "),wY=a("a"),ZAr=o("TFDistilBertForMaskedLM"),e6r=o(" (DistilBERT model)"),o6r=l(),CE=a("li"),XMe=a("strong"),r6r=o("electra"),t6r=o(" \u2014 "),AY=a("a"),a6r=o("TFElectraForMaskedLM"),n6r=o(" (ELECTRA model)"),s6r=l(),wE=a("li"),zMe=a("strong"),l6r=o("flaubert"),i6r=o(" \u2014 "),LY=a("a"),d6r=o("TFFlaubertWithLMHeadModel"),c6r=o(" (FlauBERT model)"),f6r=l(),AE=a("li"),QMe=a("strong"),m6r=o("funnel"),g6r=o(" \u2014 "),yY=a("a"),h6r=o("TFFunnelForMaskedLM"),p6r=o(" (Funnel Transformer model)"),_6r=l(),LE=a("li"),WMe=a("strong"),u6r=o("layoutlm"),b6r=o(" \u2014 "),xY=a("a"),v6r=o("TFLayoutLMForMaskedLM"),F6r=o(" (LayoutLM model)"),T6r=l(),yE=a("li"),HMe=a("strong"),M6r=o("longformer"),E6r=o(" \u2014 "),$Y=a("a"),C6r=o("TFLongformerForMaskedLM"),w6r=o(" (Longformer model)"),A6r=l(),xE=a("li"),UMe=a("strong"),L6r=o("mobilebert"),y6r=o(" \u2014 "),kY=a("a"),x6r=o("TFMobileBertForMaskedLM"),$6r=o(" (MobileBERT model)"),k6r=l(),$E=a("li"),JMe=a("strong"),S6r=o("mpnet"),R6r=o(" \u2014 "),SY=a("a"),P6r=o("TFMPNetForMaskedLM"),B6r=o(" (MPNet model)"),N6r=l(),kE=a("li"),YMe=a("strong"),I6r=o("rembert"),q6r=o(" \u2014 "),RY=a("a"),j6r=o("TFRemBertForMaskedLM"),D6r=o(" (RemBERT model)"),G6r=l(),SE=a("li"),KMe=a("strong"),O6r=o("roberta"),V6r=o(" \u2014 "),PY=a("a"),X6r=o("TFRobertaForMaskedLM"),z6r=o(" (RoBERTa model)"),Q6r=l(),RE=a("li"),ZMe=a("strong"),W6r=o("roformer"),H6r=o(" \u2014 "),BY=a("a"),U6r=o("TFRoFormerForMaskedLM"),J6r=o(" (RoFormer model)"),Y6r=l(),PE=a("li"),e4e=a("strong"),K6r=o("tapas"),Z6r=o(" \u2014 "),NY=a("a"),e7r=o("TFTapasForMaskedLM"),o7r=o(" (TAPAS model)"),r7r=l(),BE=a("li"),o4e=a("strong"),t7r=o("xlm"),a7r=o(" \u2014 "),IY=a("a"),n7r=o("TFXLMWithLMHeadModel"),s7r=o(" (XLM model)"),l7r=l(),NE=a("li"),r4e=a("strong"),i7r=o("xlm-roberta"),d7r=o(" \u2014 "),qY=a("a"),c7r=o("TFXLMRobertaForMaskedLM"),f7r=o(" (XLM-RoBERTa model)"),m7r=l(),F(IE.$$.fragment),Bze=l(),Mc=a("h2"),qE=a("a"),t4e=a("span"),F(Fx.$$.fragment),g7r=l(),a4e=a("span"),h7r=o("TFAutoModelForSeq2SeqLM"),Nze=l(),sr=a("div"),F(Tx.$$.fragment),p7r=l(),Ec=a("p"),_7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),jY=a("a"),u7r=o("from_pretrained()"),b7r=o(" class method or the "),DY=a("a"),v7r=o("from_config()"),F7r=o(` class
method.`),T7r=l(),Mx=a("p"),M7r=o("This class cannot be instantiated directly using "),n4e=a("code"),E7r=o("__init__()"),C7r=o(" (throws an error)."),w7r=l(),qt=a("div"),F(Ex.$$.fragment),A7r=l(),s4e=a("p"),L7r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),y7r=l(),Cc=a("p"),x7r=o(`Note:
Loading a model from its configuration file does `),l4e=a("strong"),$7r=o("not"),k7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GY=a("a"),S7r=o("from_pretrained()"),R7r=o(" to load the model weights."),P7r=l(),F(jE.$$.fragment),B7r=l(),Pr=a("div"),F(Cx.$$.fragment),N7r=l(),i4e=a("p"),I7r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),q7r=l(),mn=a("p"),j7r=o("The model class to instantiate is selected based on the "),d4e=a("code"),D7r=o("model_type"),G7r=o(` property of the config object (either
passed as an argument or loaded from `),c4e=a("code"),O7r=o("pretrained_model_name_or_path"),V7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f4e=a("code"),X7r=o("pretrained_model_name_or_path"),z7r=o(":"),Q7r=l(),xe=a("ul"),DE=a("li"),m4e=a("strong"),W7r=o("bart"),H7r=o(" \u2014 "),OY=a("a"),U7r=o("TFBartForConditionalGeneration"),J7r=o(" (BART model)"),Y7r=l(),GE=a("li"),g4e=a("strong"),K7r=o("blenderbot"),Z7r=o(" \u2014 "),VY=a("a"),eLr=o("TFBlenderbotForConditionalGeneration"),oLr=o(" (Blenderbot model)"),rLr=l(),OE=a("li"),h4e=a("strong"),tLr=o("blenderbot-small"),aLr=o(" \u2014 "),XY=a("a"),nLr=o("TFBlenderbotSmallForConditionalGeneration"),sLr=o(" (BlenderbotSmall model)"),lLr=l(),VE=a("li"),p4e=a("strong"),iLr=o("encoder-decoder"),dLr=o(" \u2014 "),zY=a("a"),cLr=o("TFEncoderDecoderModel"),fLr=o(" (Encoder decoder model)"),mLr=l(),XE=a("li"),_4e=a("strong"),gLr=o("led"),hLr=o(" \u2014 "),QY=a("a"),pLr=o("TFLEDForConditionalGeneration"),_Lr=o(" (LED model)"),uLr=l(),zE=a("li"),u4e=a("strong"),bLr=o("marian"),vLr=o(" \u2014 "),WY=a("a"),FLr=o("TFMarianMTModel"),TLr=o(" (Marian model)"),MLr=l(),QE=a("li"),b4e=a("strong"),ELr=o("mbart"),CLr=o(" \u2014 "),HY=a("a"),wLr=o("TFMBartForConditionalGeneration"),ALr=o(" (mBART model)"),LLr=l(),WE=a("li"),v4e=a("strong"),yLr=o("mt5"),xLr=o(" \u2014 "),UY=a("a"),$Lr=o("TFMT5ForConditionalGeneration"),kLr=o(" (MT5 model)"),SLr=l(),HE=a("li"),F4e=a("strong"),RLr=o("pegasus"),PLr=o(" \u2014 "),JY=a("a"),BLr=o("TFPegasusForConditionalGeneration"),NLr=o(" (Pegasus model)"),ILr=l(),UE=a("li"),T4e=a("strong"),qLr=o("t5"),jLr=o(" \u2014 "),YY=a("a"),DLr=o("TFT5ForConditionalGeneration"),GLr=o(" (T5 model)"),OLr=l(),F(JE.$$.fragment),Ize=l(),wc=a("h2"),YE=a("a"),M4e=a("span"),F(wx.$$.fragment),VLr=l(),E4e=a("span"),XLr=o("TFAutoModelForSequenceClassification"),qze=l(),lr=a("div"),F(Ax.$$.fragment),zLr=l(),Ac=a("p"),QLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),KY=a("a"),WLr=o("from_pretrained()"),HLr=o(" class method or the "),ZY=a("a"),ULr=o("from_config()"),JLr=o(` class
method.`),YLr=l(),Lx=a("p"),KLr=o("This class cannot be instantiated directly using "),C4e=a("code"),ZLr=o("__init__()"),eyr=o(" (throws an error)."),oyr=l(),jt=a("div"),F(yx.$$.fragment),ryr=l(),w4e=a("p"),tyr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),ayr=l(),Lc=a("p"),nyr=o(`Note:
Loading a model from its configuration file does `),A4e=a("strong"),syr=o("not"),lyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eK=a("a"),iyr=o("from_pretrained()"),dyr=o(" to load the model weights."),cyr=l(),F(KE.$$.fragment),fyr=l(),Br=a("div"),F(xx.$$.fragment),myr=l(),L4e=a("p"),gyr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),hyr=l(),gn=a("p"),pyr=o("The model class to instantiate is selected based on the "),y4e=a("code"),_yr=o("model_type"),uyr=o(` property of the config object (either
passed as an argument or loaded from `),x4e=a("code"),byr=o("pretrained_model_name_or_path"),vyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$4e=a("code"),Fyr=o("pretrained_model_name_or_path"),Tyr=o(":"),Myr=l(),ae=a("ul"),ZE=a("li"),k4e=a("strong"),Eyr=o("albert"),Cyr=o(" \u2014 "),oK=a("a"),wyr=o("TFAlbertForSequenceClassification"),Ayr=o(" (ALBERT model)"),Lyr=l(),eC=a("li"),S4e=a("strong"),yyr=o("bert"),xyr=o(" \u2014 "),rK=a("a"),$yr=o("TFBertForSequenceClassification"),kyr=o(" (BERT model)"),Syr=l(),oC=a("li"),R4e=a("strong"),Ryr=o("camembert"),Pyr=o(" \u2014 "),tK=a("a"),Byr=o("TFCamembertForSequenceClassification"),Nyr=o(" (CamemBERT model)"),Iyr=l(),rC=a("li"),P4e=a("strong"),qyr=o("convbert"),jyr=o(" \u2014 "),aK=a("a"),Dyr=o("TFConvBertForSequenceClassification"),Gyr=o(" (ConvBERT model)"),Oyr=l(),tC=a("li"),B4e=a("strong"),Vyr=o("ctrl"),Xyr=o(" \u2014 "),nK=a("a"),zyr=o("TFCTRLForSequenceClassification"),Qyr=o(" (CTRL model)"),Wyr=l(),aC=a("li"),N4e=a("strong"),Hyr=o("deberta"),Uyr=o(" \u2014 "),sK=a("a"),Jyr=o("TFDebertaForSequenceClassification"),Yyr=o(" (DeBERTa model)"),Kyr=l(),nC=a("li"),I4e=a("strong"),Zyr=o("deberta-v2"),e9r=o(" \u2014 "),lK=a("a"),o9r=o("TFDebertaV2ForSequenceClassification"),r9r=o(" (DeBERTa-v2 model)"),t9r=l(),sC=a("li"),q4e=a("strong"),a9r=o("distilbert"),n9r=o(" \u2014 "),iK=a("a"),s9r=o("TFDistilBertForSequenceClassification"),l9r=o(" (DistilBERT model)"),i9r=l(),lC=a("li"),j4e=a("strong"),d9r=o("electra"),c9r=o(" \u2014 "),dK=a("a"),f9r=o("TFElectraForSequenceClassification"),m9r=o(" (ELECTRA model)"),g9r=l(),iC=a("li"),D4e=a("strong"),h9r=o("flaubert"),p9r=o(" \u2014 "),cK=a("a"),_9r=o("TFFlaubertForSequenceClassification"),u9r=o(" (FlauBERT model)"),b9r=l(),dC=a("li"),G4e=a("strong"),v9r=o("funnel"),F9r=o(" \u2014 "),fK=a("a"),T9r=o("TFFunnelForSequenceClassification"),M9r=o(" (Funnel Transformer model)"),E9r=l(),cC=a("li"),O4e=a("strong"),C9r=o("gpt2"),w9r=o(" \u2014 "),mK=a("a"),A9r=o("TFGPT2ForSequenceClassification"),L9r=o(" (OpenAI GPT-2 model)"),y9r=l(),fC=a("li"),V4e=a("strong"),x9r=o("gptj"),$9r=o(" \u2014 "),gK=a("a"),k9r=o("TFGPTJForSequenceClassification"),S9r=o(" (GPT-J model)"),R9r=l(),mC=a("li"),X4e=a("strong"),P9r=o("layoutlm"),B9r=o(" \u2014 "),hK=a("a"),N9r=o("TFLayoutLMForSequenceClassification"),I9r=o(" (LayoutLM model)"),q9r=l(),gC=a("li"),z4e=a("strong"),j9r=o("longformer"),D9r=o(" \u2014 "),pK=a("a"),G9r=o("TFLongformerForSequenceClassification"),O9r=o(" (Longformer model)"),V9r=l(),hC=a("li"),Q4e=a("strong"),X9r=o("mobilebert"),z9r=o(" \u2014 "),_K=a("a"),Q9r=o("TFMobileBertForSequenceClassification"),W9r=o(" (MobileBERT model)"),H9r=l(),pC=a("li"),W4e=a("strong"),U9r=o("mpnet"),J9r=o(" \u2014 "),uK=a("a"),Y9r=o("TFMPNetForSequenceClassification"),K9r=o(" (MPNet model)"),Z9r=l(),_C=a("li"),H4e=a("strong"),exr=o("openai-gpt"),oxr=o(" \u2014 "),bK=a("a"),rxr=o("TFOpenAIGPTForSequenceClassification"),txr=o(" (OpenAI GPT model)"),axr=l(),uC=a("li"),U4e=a("strong"),nxr=o("rembert"),sxr=o(" \u2014 "),vK=a("a"),lxr=o("TFRemBertForSequenceClassification"),ixr=o(" (RemBERT model)"),dxr=l(),bC=a("li"),J4e=a("strong"),cxr=o("roberta"),fxr=o(" \u2014 "),FK=a("a"),mxr=o("TFRobertaForSequenceClassification"),gxr=o(" (RoBERTa model)"),hxr=l(),vC=a("li"),Y4e=a("strong"),pxr=o("roformer"),_xr=o(" \u2014 "),TK=a("a"),uxr=o("TFRoFormerForSequenceClassification"),bxr=o(" (RoFormer model)"),vxr=l(),FC=a("li"),K4e=a("strong"),Fxr=o("tapas"),Txr=o(" \u2014 "),MK=a("a"),Mxr=o("TFTapasForSequenceClassification"),Exr=o(" (TAPAS model)"),Cxr=l(),TC=a("li"),Z4e=a("strong"),wxr=o("transfo-xl"),Axr=o(" \u2014 "),EK=a("a"),Lxr=o("TFTransfoXLForSequenceClassification"),yxr=o(" (Transformer-XL model)"),xxr=l(),MC=a("li"),eEe=a("strong"),$xr=o("xlm"),kxr=o(" \u2014 "),CK=a("a"),Sxr=o("TFXLMForSequenceClassification"),Rxr=o(" (XLM model)"),Pxr=l(),EC=a("li"),oEe=a("strong"),Bxr=o("xlm-roberta"),Nxr=o(" \u2014 "),wK=a("a"),Ixr=o("TFXLMRobertaForSequenceClassification"),qxr=o(" (XLM-RoBERTa model)"),jxr=l(),CC=a("li"),rEe=a("strong"),Dxr=o("xlnet"),Gxr=o(" \u2014 "),AK=a("a"),Oxr=o("TFXLNetForSequenceClassification"),Vxr=o(" (XLNet model)"),Xxr=l(),F(wC.$$.fragment),jze=l(),yc=a("h2"),AC=a("a"),tEe=a("span"),F($x.$$.fragment),zxr=l(),aEe=a("span"),Qxr=o("TFAutoModelForMultipleChoice"),Dze=l(),ir=a("div"),F(kx.$$.fragment),Wxr=l(),xc=a("p"),Hxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),LK=a("a"),Uxr=o("from_pretrained()"),Jxr=o(" class method or the "),yK=a("a"),Yxr=o("from_config()"),Kxr=o(` class
method.`),Zxr=l(),Sx=a("p"),e$r=o("This class cannot be instantiated directly using "),nEe=a("code"),o$r=o("__init__()"),r$r=o(" (throws an error)."),t$r=l(),Dt=a("div"),F(Rx.$$.fragment),a$r=l(),sEe=a("p"),n$r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),s$r=l(),$c=a("p"),l$r=o(`Note:
Loading a model from its configuration file does `),lEe=a("strong"),i$r=o("not"),d$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xK=a("a"),c$r=o("from_pretrained()"),f$r=o(" to load the model weights."),m$r=l(),F(LC.$$.fragment),g$r=l(),Nr=a("div"),F(Px.$$.fragment),h$r=l(),iEe=a("p"),p$r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),_$r=l(),hn=a("p"),u$r=o("The model class to instantiate is selected based on the "),dEe=a("code"),b$r=o("model_type"),v$r=o(` property of the config object (either
passed as an argument or loaded from `),cEe=a("code"),F$r=o("pretrained_model_name_or_path"),T$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fEe=a("code"),M$r=o("pretrained_model_name_or_path"),E$r=o(":"),C$r=l(),ue=a("ul"),yC=a("li"),mEe=a("strong"),w$r=o("albert"),A$r=o(" \u2014 "),$K=a("a"),L$r=o("TFAlbertForMultipleChoice"),y$r=o(" (ALBERT model)"),x$r=l(),xC=a("li"),gEe=a("strong"),$$r=o("bert"),k$r=o(" \u2014 "),kK=a("a"),S$r=o("TFBertForMultipleChoice"),R$r=o(" (BERT model)"),P$r=l(),$C=a("li"),hEe=a("strong"),B$r=o("camembert"),N$r=o(" \u2014 "),SK=a("a"),I$r=o("TFCamembertForMultipleChoice"),q$r=o(" (CamemBERT model)"),j$r=l(),kC=a("li"),pEe=a("strong"),D$r=o("convbert"),G$r=o(" \u2014 "),RK=a("a"),O$r=o("TFConvBertForMultipleChoice"),V$r=o(" (ConvBERT model)"),X$r=l(),SC=a("li"),_Ee=a("strong"),z$r=o("distilbert"),Q$r=o(" \u2014 "),PK=a("a"),W$r=o("TFDistilBertForMultipleChoice"),H$r=o(" (DistilBERT model)"),U$r=l(),RC=a("li"),uEe=a("strong"),J$r=o("electra"),Y$r=o(" \u2014 "),BK=a("a"),K$r=o("TFElectraForMultipleChoice"),Z$r=o(" (ELECTRA model)"),ekr=l(),PC=a("li"),bEe=a("strong"),okr=o("flaubert"),rkr=o(" \u2014 "),NK=a("a"),tkr=o("TFFlaubertForMultipleChoice"),akr=o(" (FlauBERT model)"),nkr=l(),BC=a("li"),vEe=a("strong"),skr=o("funnel"),lkr=o(" \u2014 "),IK=a("a"),ikr=o("TFFunnelForMultipleChoice"),dkr=o(" (Funnel Transformer model)"),ckr=l(),NC=a("li"),FEe=a("strong"),fkr=o("longformer"),mkr=o(" \u2014 "),qK=a("a"),gkr=o("TFLongformerForMultipleChoice"),hkr=o(" (Longformer model)"),pkr=l(),IC=a("li"),TEe=a("strong"),_kr=o("mobilebert"),ukr=o(" \u2014 "),jK=a("a"),bkr=o("TFMobileBertForMultipleChoice"),vkr=o(" (MobileBERT model)"),Fkr=l(),qC=a("li"),MEe=a("strong"),Tkr=o("mpnet"),Mkr=o(" \u2014 "),DK=a("a"),Ekr=o("TFMPNetForMultipleChoice"),Ckr=o(" (MPNet model)"),wkr=l(),jC=a("li"),EEe=a("strong"),Akr=o("rembert"),Lkr=o(" \u2014 "),GK=a("a"),ykr=o("TFRemBertForMultipleChoice"),xkr=o(" (RemBERT model)"),$kr=l(),DC=a("li"),CEe=a("strong"),kkr=o("roberta"),Skr=o(" \u2014 "),OK=a("a"),Rkr=o("TFRobertaForMultipleChoice"),Pkr=o(" (RoBERTa model)"),Bkr=l(),GC=a("li"),wEe=a("strong"),Nkr=o("roformer"),Ikr=o(" \u2014 "),VK=a("a"),qkr=o("TFRoFormerForMultipleChoice"),jkr=o(" (RoFormer model)"),Dkr=l(),OC=a("li"),AEe=a("strong"),Gkr=o("xlm"),Okr=o(" \u2014 "),XK=a("a"),Vkr=o("TFXLMForMultipleChoice"),Xkr=o(" (XLM model)"),zkr=l(),VC=a("li"),LEe=a("strong"),Qkr=o("xlm-roberta"),Wkr=o(" \u2014 "),zK=a("a"),Hkr=o("TFXLMRobertaForMultipleChoice"),Ukr=o(" (XLM-RoBERTa model)"),Jkr=l(),XC=a("li"),yEe=a("strong"),Ykr=o("xlnet"),Kkr=o(" \u2014 "),QK=a("a"),Zkr=o("TFXLNetForMultipleChoice"),eSr=o(" (XLNet model)"),oSr=l(),F(zC.$$.fragment),Gze=l(),kc=a("h2"),QC=a("a"),xEe=a("span"),F(Bx.$$.fragment),rSr=l(),$Ee=a("span"),tSr=o("TFAutoModelForNextSentencePrediction"),Oze=l(),dr=a("div"),F(Nx.$$.fragment),aSr=l(),Sc=a("p"),nSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),WK=a("a"),sSr=o("from_pretrained()"),lSr=o(" class method or the "),HK=a("a"),iSr=o("from_config()"),dSr=o(` class
method.`),cSr=l(),Ix=a("p"),fSr=o("This class cannot be instantiated directly using "),kEe=a("code"),mSr=o("__init__()"),gSr=o(" (throws an error)."),hSr=l(),Gt=a("div"),F(qx.$$.fragment),pSr=l(),SEe=a("p"),_Sr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),uSr=l(),Rc=a("p"),bSr=o(`Note:
Loading a model from its configuration file does `),REe=a("strong"),vSr=o("not"),FSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UK=a("a"),TSr=o("from_pretrained()"),MSr=o(" to load the model weights."),ESr=l(),F(WC.$$.fragment),CSr=l(),Ir=a("div"),F(jx.$$.fragment),wSr=l(),PEe=a("p"),ASr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),LSr=l(),pn=a("p"),ySr=o("The model class to instantiate is selected based on the "),BEe=a("code"),xSr=o("model_type"),$Sr=o(` property of the config object (either
passed as an argument or loaded from `),NEe=a("code"),kSr=o("pretrained_model_name_or_path"),SSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IEe=a("code"),RSr=o("pretrained_model_name_or_path"),PSr=o(":"),BSr=l(),Dx=a("ul"),HC=a("li"),qEe=a("strong"),NSr=o("bert"),ISr=o(" \u2014 "),JK=a("a"),qSr=o("TFBertForNextSentencePrediction"),jSr=o(" (BERT model)"),DSr=l(),UC=a("li"),jEe=a("strong"),GSr=o("mobilebert"),OSr=o(" \u2014 "),YK=a("a"),VSr=o("TFMobileBertForNextSentencePrediction"),XSr=o(" (MobileBERT model)"),zSr=l(),F(JC.$$.fragment),Vze=l(),Pc=a("h2"),YC=a("a"),DEe=a("span"),F(Gx.$$.fragment),QSr=l(),GEe=a("span"),WSr=o("TFAutoModelForTableQuestionAnswering"),Xze=l(),cr=a("div"),F(Ox.$$.fragment),HSr=l(),Bc=a("p"),USr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),KK=a("a"),JSr=o("from_pretrained()"),YSr=o(" class method or the "),ZK=a("a"),KSr=o("from_config()"),ZSr=o(` class
method.`),eRr=l(),Vx=a("p"),oRr=o("This class cannot be instantiated directly using "),OEe=a("code"),rRr=o("__init__()"),tRr=o(" (throws an error)."),aRr=l(),Ot=a("div"),F(Xx.$$.fragment),nRr=l(),VEe=a("p"),sRr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),lRr=l(),Nc=a("p"),iRr=o(`Note:
Loading a model from its configuration file does `),XEe=a("strong"),dRr=o("not"),cRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eZ=a("a"),fRr=o("from_pretrained()"),mRr=o(" to load the model weights."),gRr=l(),F(KC.$$.fragment),hRr=l(),qr=a("div"),F(zx.$$.fragment),pRr=l(),zEe=a("p"),_Rr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),uRr=l(),_n=a("p"),bRr=o("The model class to instantiate is selected based on the "),QEe=a("code"),vRr=o("model_type"),FRr=o(` property of the config object (either
passed as an argument or loaded from `),WEe=a("code"),TRr=o("pretrained_model_name_or_path"),MRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HEe=a("code"),ERr=o("pretrained_model_name_or_path"),CRr=o(":"),wRr=l(),UEe=a("ul"),ZC=a("li"),JEe=a("strong"),ARr=o("tapas"),LRr=o(" \u2014 "),oZ=a("a"),yRr=o("TFTapasForQuestionAnswering"),xRr=o(" (TAPAS model)"),$Rr=l(),F(e3.$$.fragment),zze=l(),Ic=a("h2"),o3=a("a"),YEe=a("span"),F(Qx.$$.fragment),kRr=l(),KEe=a("span"),SRr=o("TFAutoModelForTokenClassification"),Qze=l(),fr=a("div"),F(Wx.$$.fragment),RRr=l(),qc=a("p"),PRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),rZ=a("a"),BRr=o("from_pretrained()"),NRr=o(" class method or the "),tZ=a("a"),IRr=o("from_config()"),qRr=o(` class
method.`),jRr=l(),Hx=a("p"),DRr=o("This class cannot be instantiated directly using "),ZEe=a("code"),GRr=o("__init__()"),ORr=o(" (throws an error)."),VRr=l(),Vt=a("div"),F(Ux.$$.fragment),XRr=l(),eCe=a("p"),zRr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),QRr=l(),jc=a("p"),WRr=o(`Note:
Loading a model from its configuration file does `),oCe=a("strong"),HRr=o("not"),URr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aZ=a("a"),JRr=o("from_pretrained()"),YRr=o(" to load the model weights."),KRr=l(),F(r3.$$.fragment),ZRr=l(),jr=a("div"),F(Jx.$$.fragment),ePr=l(),rCe=a("p"),oPr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),rPr=l(),un=a("p"),tPr=o("The model class to instantiate is selected based on the "),tCe=a("code"),aPr=o("model_type"),nPr=o(` property of the config object (either
passed as an argument or loaded from `),aCe=a("code"),sPr=o("pretrained_model_name_or_path"),lPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nCe=a("code"),iPr=o("pretrained_model_name_or_path"),dPr=o(":"),cPr=l(),de=a("ul"),t3=a("li"),sCe=a("strong"),fPr=o("albert"),mPr=o(" \u2014 "),nZ=a("a"),gPr=o("TFAlbertForTokenClassification"),hPr=o(" (ALBERT model)"),pPr=l(),a3=a("li"),lCe=a("strong"),_Pr=o("bert"),uPr=o(" \u2014 "),sZ=a("a"),bPr=o("TFBertForTokenClassification"),vPr=o(" (BERT model)"),FPr=l(),n3=a("li"),iCe=a("strong"),TPr=o("camembert"),MPr=o(" \u2014 "),lZ=a("a"),EPr=o("TFCamembertForTokenClassification"),CPr=o(" (CamemBERT model)"),wPr=l(),s3=a("li"),dCe=a("strong"),APr=o("convbert"),LPr=o(" \u2014 "),iZ=a("a"),yPr=o("TFConvBertForTokenClassification"),xPr=o(" (ConvBERT model)"),$Pr=l(),l3=a("li"),cCe=a("strong"),kPr=o("deberta"),SPr=o(" \u2014 "),dZ=a("a"),RPr=o("TFDebertaForTokenClassification"),PPr=o(" (DeBERTa model)"),BPr=l(),i3=a("li"),fCe=a("strong"),NPr=o("deberta-v2"),IPr=o(" \u2014 "),cZ=a("a"),qPr=o("TFDebertaV2ForTokenClassification"),jPr=o(" (DeBERTa-v2 model)"),DPr=l(),d3=a("li"),mCe=a("strong"),GPr=o("distilbert"),OPr=o(" \u2014 "),fZ=a("a"),VPr=o("TFDistilBertForTokenClassification"),XPr=o(" (DistilBERT model)"),zPr=l(),c3=a("li"),gCe=a("strong"),QPr=o("electra"),WPr=o(" \u2014 "),mZ=a("a"),HPr=o("TFElectraForTokenClassification"),UPr=o(" (ELECTRA model)"),JPr=l(),f3=a("li"),hCe=a("strong"),YPr=o("flaubert"),KPr=o(" \u2014 "),gZ=a("a"),ZPr=o("TFFlaubertForTokenClassification"),eBr=o(" (FlauBERT model)"),oBr=l(),m3=a("li"),pCe=a("strong"),rBr=o("funnel"),tBr=o(" \u2014 "),hZ=a("a"),aBr=o("TFFunnelForTokenClassification"),nBr=o(" (Funnel Transformer model)"),sBr=l(),g3=a("li"),_Ce=a("strong"),lBr=o("layoutlm"),iBr=o(" \u2014 "),pZ=a("a"),dBr=o("TFLayoutLMForTokenClassification"),cBr=o(" (LayoutLM model)"),fBr=l(),h3=a("li"),uCe=a("strong"),mBr=o("longformer"),gBr=o(" \u2014 "),_Z=a("a"),hBr=o("TFLongformerForTokenClassification"),pBr=o(" (Longformer model)"),_Br=l(),p3=a("li"),bCe=a("strong"),uBr=o("mobilebert"),bBr=o(" \u2014 "),uZ=a("a"),vBr=o("TFMobileBertForTokenClassification"),FBr=o(" (MobileBERT model)"),TBr=l(),_3=a("li"),vCe=a("strong"),MBr=o("mpnet"),EBr=o(" \u2014 "),bZ=a("a"),CBr=o("TFMPNetForTokenClassification"),wBr=o(" (MPNet model)"),ABr=l(),u3=a("li"),FCe=a("strong"),LBr=o("rembert"),yBr=o(" \u2014 "),vZ=a("a"),xBr=o("TFRemBertForTokenClassification"),$Br=o(" (RemBERT model)"),kBr=l(),b3=a("li"),TCe=a("strong"),SBr=o("roberta"),RBr=o(" \u2014 "),FZ=a("a"),PBr=o("TFRobertaForTokenClassification"),BBr=o(" (RoBERTa model)"),NBr=l(),v3=a("li"),MCe=a("strong"),IBr=o("roformer"),qBr=o(" \u2014 "),TZ=a("a"),jBr=o("TFRoFormerForTokenClassification"),DBr=o(" (RoFormer model)"),GBr=l(),F3=a("li"),ECe=a("strong"),OBr=o("xlm"),VBr=o(" \u2014 "),MZ=a("a"),XBr=o("TFXLMForTokenClassification"),zBr=o(" (XLM model)"),QBr=l(),T3=a("li"),CCe=a("strong"),WBr=o("xlm-roberta"),HBr=o(" \u2014 "),EZ=a("a"),UBr=o("TFXLMRobertaForTokenClassification"),JBr=o(" (XLM-RoBERTa model)"),YBr=l(),M3=a("li"),wCe=a("strong"),KBr=o("xlnet"),ZBr=o(" \u2014 "),CZ=a("a"),eNr=o("TFXLNetForTokenClassification"),oNr=o(" (XLNet model)"),rNr=l(),F(E3.$$.fragment),Wze=l(),Dc=a("h2"),C3=a("a"),ACe=a("span"),F(Yx.$$.fragment),tNr=l(),LCe=a("span"),aNr=o("TFAutoModelForQuestionAnswering"),Hze=l(),mr=a("div"),F(Kx.$$.fragment),nNr=l(),Gc=a("p"),sNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),wZ=a("a"),lNr=o("from_pretrained()"),iNr=o(" class method or the "),AZ=a("a"),dNr=o("from_config()"),cNr=o(` class
method.`),fNr=l(),Zx=a("p"),mNr=o("This class cannot be instantiated directly using "),yCe=a("code"),gNr=o("__init__()"),hNr=o(" (throws an error)."),pNr=l(),Xt=a("div"),F(e$.$$.fragment),_Nr=l(),xCe=a("p"),uNr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),bNr=l(),Oc=a("p"),vNr=o(`Note:
Loading a model from its configuration file does `),$Ce=a("strong"),FNr=o("not"),TNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LZ=a("a"),MNr=o("from_pretrained()"),ENr=o(" to load the model weights."),CNr=l(),F(w3.$$.fragment),wNr=l(),Dr=a("div"),F(o$.$$.fragment),ANr=l(),kCe=a("p"),LNr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),yNr=l(),bn=a("p"),xNr=o("The model class to instantiate is selected based on the "),SCe=a("code"),$Nr=o("model_type"),kNr=o(` property of the config object (either
passed as an argument or loaded from `),RCe=a("code"),SNr=o("pretrained_model_name_or_path"),RNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PCe=a("code"),PNr=o("pretrained_model_name_or_path"),BNr=o(":"),NNr=l(),ce=a("ul"),A3=a("li"),BCe=a("strong"),INr=o("albert"),qNr=o(" \u2014 "),yZ=a("a"),jNr=o("TFAlbertForQuestionAnswering"),DNr=o(" (ALBERT model)"),GNr=l(),L3=a("li"),NCe=a("strong"),ONr=o("bert"),VNr=o(" \u2014 "),xZ=a("a"),XNr=o("TFBertForQuestionAnswering"),zNr=o(" (BERT model)"),QNr=l(),y3=a("li"),ICe=a("strong"),WNr=o("camembert"),HNr=o(" \u2014 "),$Z=a("a"),UNr=o("TFCamembertForQuestionAnswering"),JNr=o(" (CamemBERT model)"),YNr=l(),x3=a("li"),qCe=a("strong"),KNr=o("convbert"),ZNr=o(" \u2014 "),kZ=a("a"),eIr=o("TFConvBertForQuestionAnswering"),oIr=o(" (ConvBERT model)"),rIr=l(),$3=a("li"),jCe=a("strong"),tIr=o("deberta"),aIr=o(" \u2014 "),SZ=a("a"),nIr=o("TFDebertaForQuestionAnswering"),sIr=o(" (DeBERTa model)"),lIr=l(),k3=a("li"),DCe=a("strong"),iIr=o("deberta-v2"),dIr=o(" \u2014 "),RZ=a("a"),cIr=o("TFDebertaV2ForQuestionAnswering"),fIr=o(" (DeBERTa-v2 model)"),mIr=l(),S3=a("li"),GCe=a("strong"),gIr=o("distilbert"),hIr=o(" \u2014 "),PZ=a("a"),pIr=o("TFDistilBertForQuestionAnswering"),_Ir=o(" (DistilBERT model)"),uIr=l(),R3=a("li"),OCe=a("strong"),bIr=o("electra"),vIr=o(" \u2014 "),BZ=a("a"),FIr=o("TFElectraForQuestionAnswering"),TIr=o(" (ELECTRA model)"),MIr=l(),P3=a("li"),VCe=a("strong"),EIr=o("flaubert"),CIr=o(" \u2014 "),NZ=a("a"),wIr=o("TFFlaubertForQuestionAnsweringSimple"),AIr=o(" (FlauBERT model)"),LIr=l(),B3=a("li"),XCe=a("strong"),yIr=o("funnel"),xIr=o(" \u2014 "),IZ=a("a"),$Ir=o("TFFunnelForQuestionAnswering"),kIr=o(" (Funnel Transformer model)"),SIr=l(),N3=a("li"),zCe=a("strong"),RIr=o("gptj"),PIr=o(" \u2014 "),qZ=a("a"),BIr=o("TFGPTJForQuestionAnswering"),NIr=o(" (GPT-J model)"),IIr=l(),I3=a("li"),QCe=a("strong"),qIr=o("longformer"),jIr=o(" \u2014 "),jZ=a("a"),DIr=o("TFLongformerForQuestionAnswering"),GIr=o(" (Longformer model)"),OIr=l(),q3=a("li"),WCe=a("strong"),VIr=o("mobilebert"),XIr=o(" \u2014 "),DZ=a("a"),zIr=o("TFMobileBertForQuestionAnswering"),QIr=o(" (MobileBERT model)"),WIr=l(),j3=a("li"),HCe=a("strong"),HIr=o("mpnet"),UIr=o(" \u2014 "),GZ=a("a"),JIr=o("TFMPNetForQuestionAnswering"),YIr=o(" (MPNet model)"),KIr=l(),D3=a("li"),UCe=a("strong"),ZIr=o("rembert"),eqr=o(" \u2014 "),OZ=a("a"),oqr=o("TFRemBertForQuestionAnswering"),rqr=o(" (RemBERT model)"),tqr=l(),G3=a("li"),JCe=a("strong"),aqr=o("roberta"),nqr=o(" \u2014 "),VZ=a("a"),sqr=o("TFRobertaForQuestionAnswering"),lqr=o(" (RoBERTa model)"),iqr=l(),O3=a("li"),YCe=a("strong"),dqr=o("roformer"),cqr=o(" \u2014 "),XZ=a("a"),fqr=o("TFRoFormerForQuestionAnswering"),mqr=o(" (RoFormer model)"),gqr=l(),V3=a("li"),KCe=a("strong"),hqr=o("xlm"),pqr=o(" \u2014 "),zZ=a("a"),_qr=o("TFXLMForQuestionAnsweringSimple"),uqr=o(" (XLM model)"),bqr=l(),X3=a("li"),ZCe=a("strong"),vqr=o("xlm-roberta"),Fqr=o(" \u2014 "),QZ=a("a"),Tqr=o("TFXLMRobertaForQuestionAnswering"),Mqr=o(" (XLM-RoBERTa model)"),Eqr=l(),z3=a("li"),e3e=a("strong"),Cqr=o("xlnet"),wqr=o(" \u2014 "),WZ=a("a"),Aqr=o("TFXLNetForQuestionAnsweringSimple"),Lqr=o(" (XLNet model)"),yqr=l(),F(Q3.$$.fragment),Uze=l(),Vc=a("h2"),W3=a("a"),o3e=a("span"),F(r$.$$.fragment),xqr=l(),r3e=a("span"),$qr=o("TFAutoModelForVision2Seq"),Jze=l(),gr=a("div"),F(t$.$$.fragment),kqr=l(),Xc=a("p"),Sqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),HZ=a("a"),Rqr=o("from_pretrained()"),Pqr=o(" class method or the "),UZ=a("a"),Bqr=o("from_config()"),Nqr=o(` class
method.`),Iqr=l(),a$=a("p"),qqr=o("This class cannot be instantiated directly using "),t3e=a("code"),jqr=o("__init__()"),Dqr=o(" (throws an error)."),Gqr=l(),zt=a("div"),F(n$.$$.fragment),Oqr=l(),a3e=a("p"),Vqr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Xqr=l(),zc=a("p"),zqr=o(`Note:
Loading a model from its configuration file does `),n3e=a("strong"),Qqr=o("not"),Wqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JZ=a("a"),Hqr=o("from_pretrained()"),Uqr=o(" to load the model weights."),Jqr=l(),F(H3.$$.fragment),Yqr=l(),Gr=a("div"),F(s$.$$.fragment),Kqr=l(),s3e=a("p"),Zqr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),ejr=l(),vn=a("p"),ojr=o("The model class to instantiate is selected based on the "),l3e=a("code"),rjr=o("model_type"),tjr=o(` property of the config object (either
passed as an argument or loaded from `),i3e=a("code"),ajr=o("pretrained_model_name_or_path"),njr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d3e=a("code"),sjr=o("pretrained_model_name_or_path"),ljr=o(":"),ijr=l(),c3e=a("ul"),U3=a("li"),f3e=a("strong"),djr=o("vision-encoder-decoder"),cjr=o(" \u2014 "),YZ=a("a"),fjr=o("TFVisionEncoderDecoderModel"),mjr=o(" (Vision Encoder decoder model)"),gjr=l(),F(J3.$$.fragment),Yze=l(),Qc=a("h2"),Y3=a("a"),m3e=a("span"),F(l$.$$.fragment),hjr=l(),g3e=a("span"),pjr=o("TFAutoModelForSpeechSeq2Seq"),Kze=l(),hr=a("div"),F(i$.$$.fragment),_jr=l(),Wc=a("p"),ujr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),KZ=a("a"),bjr=o("from_pretrained()"),vjr=o(" class method or the "),ZZ=a("a"),Fjr=o("from_config()"),Tjr=o(` class
method.`),Mjr=l(),d$=a("p"),Ejr=o("This class cannot be instantiated directly using "),h3e=a("code"),Cjr=o("__init__()"),wjr=o(" (throws an error)."),Ajr=l(),Qt=a("div"),F(c$.$$.fragment),Ljr=l(),p3e=a("p"),yjr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),xjr=l(),Hc=a("p"),$jr=o(`Note:
Loading a model from its configuration file does `),_3e=a("strong"),kjr=o("not"),Sjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eee=a("a"),Rjr=o("from_pretrained()"),Pjr=o(" to load the model weights."),Bjr=l(),F(K3.$$.fragment),Njr=l(),Or=a("div"),F(f$.$$.fragment),Ijr=l(),u3e=a("p"),qjr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),jjr=l(),Fn=a("p"),Djr=o("The model class to instantiate is selected based on the "),b3e=a("code"),Gjr=o("model_type"),Ojr=o(` property of the config object (either
passed as an argument or loaded from `),v3e=a("code"),Vjr=o("pretrained_model_name_or_path"),Xjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F3e=a("code"),zjr=o("pretrained_model_name_or_path"),Qjr=o(":"),Wjr=l(),T3e=a("ul"),Z3=a("li"),M3e=a("strong"),Hjr=o("speech_to_text"),Ujr=o(" \u2014 "),oee=a("a"),Jjr=o("TFSpeech2TextForConditionalGeneration"),Yjr=o(" (Speech2Text model)"),Kjr=l(),F(e5.$$.fragment),Zze=l(),Uc=a("h2"),o5=a("a"),E3e=a("span"),F(m$.$$.fragment),Zjr=l(),C3e=a("span"),eDr=o("FlaxAutoModel"),eQe=l(),pr=a("div"),F(g$.$$.fragment),oDr=l(),Jc=a("p"),rDr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),ree=a("a"),tDr=o("from_pretrained()"),aDr=o(" class method or the "),tee=a("a"),nDr=o("from_config()"),sDr=o(` class
method.`),lDr=l(),h$=a("p"),iDr=o("This class cannot be instantiated directly using "),w3e=a("code"),dDr=o("__init__()"),cDr=o(" (throws an error)."),fDr=l(),Wt=a("div"),F(p$.$$.fragment),mDr=l(),A3e=a("p"),gDr=o("Instantiates one of the base model classes of the library from a configuration."),hDr=l(),Yc=a("p"),pDr=o(`Note:
Loading a model from its configuration file does `),L3e=a("strong"),_Dr=o("not"),uDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aee=a("a"),bDr=o("from_pretrained()"),vDr=o(" to load the model weights."),FDr=l(),F(r5.$$.fragment),TDr=l(),Vr=a("div"),F(_$.$$.fragment),MDr=l(),y3e=a("p"),EDr=o("Instantiate one of the base model classes of the library from a pretrained model."),CDr=l(),Tn=a("p"),wDr=o("The model class to instantiate is selected based on the "),x3e=a("code"),ADr=o("model_type"),LDr=o(` property of the config object (either
passed as an argument or loaded from `),$3e=a("code"),yDr=o("pretrained_model_name_or_path"),xDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k3e=a("code"),$Dr=o("pretrained_model_name_or_path"),kDr=o(":"),SDr=l(),oe=a("ul"),t5=a("li"),S3e=a("strong"),RDr=o("albert"),PDr=o(" \u2014 "),nee=a("a"),BDr=o("FlaxAlbertModel"),NDr=o(" (ALBERT model)"),IDr=l(),a5=a("li"),R3e=a("strong"),qDr=o("bart"),jDr=o(" \u2014 "),see=a("a"),DDr=o("FlaxBartModel"),GDr=o(" (BART model)"),ODr=l(),n5=a("li"),P3e=a("strong"),VDr=o("beit"),XDr=o(" \u2014 "),lee=a("a"),zDr=o("FlaxBeitModel"),QDr=o(" (BEiT model)"),WDr=l(),s5=a("li"),B3e=a("strong"),HDr=o("bert"),UDr=o(" \u2014 "),iee=a("a"),JDr=o("FlaxBertModel"),YDr=o(" (BERT model)"),KDr=l(),l5=a("li"),N3e=a("strong"),ZDr=o("big_bird"),eGr=o(" \u2014 "),dee=a("a"),oGr=o("FlaxBigBirdModel"),rGr=o(" (BigBird model)"),tGr=l(),i5=a("li"),I3e=a("strong"),aGr=o("blenderbot"),nGr=o(" \u2014 "),cee=a("a"),sGr=o("FlaxBlenderbotModel"),lGr=o(" (Blenderbot model)"),iGr=l(),d5=a("li"),q3e=a("strong"),dGr=o("blenderbot-small"),cGr=o(" \u2014 "),fee=a("a"),fGr=o("FlaxBlenderbotSmallModel"),mGr=o(" (BlenderbotSmall model)"),gGr=l(),c5=a("li"),j3e=a("strong"),hGr=o("bloom"),pGr=o(" \u2014 "),mee=a("a"),_Gr=o("FlaxBloomModel"),uGr=o(" (BLOOM model)"),bGr=l(),f5=a("li"),D3e=a("strong"),vGr=o("clip"),FGr=o(" \u2014 "),gee=a("a"),TGr=o("FlaxCLIPModel"),MGr=o(" (CLIP model)"),EGr=l(),m5=a("li"),G3e=a("strong"),CGr=o("distilbert"),wGr=o(" \u2014 "),hee=a("a"),AGr=o("FlaxDistilBertModel"),LGr=o(" (DistilBERT model)"),yGr=l(),g5=a("li"),O3e=a("strong"),xGr=o("electra"),$Gr=o(" \u2014 "),pee=a("a"),kGr=o("FlaxElectraModel"),SGr=o(" (ELECTRA model)"),RGr=l(),h5=a("li"),V3e=a("strong"),PGr=o("gpt2"),BGr=o(" \u2014 "),_ee=a("a"),NGr=o("FlaxGPT2Model"),IGr=o(" (OpenAI GPT-2 model)"),qGr=l(),p5=a("li"),X3e=a("strong"),jGr=o("gpt_neo"),DGr=o(" \u2014 "),uee=a("a"),GGr=o("FlaxGPTNeoModel"),OGr=o(" (GPT Neo model)"),VGr=l(),_5=a("li"),z3e=a("strong"),XGr=o("gptj"),zGr=o(" \u2014 "),bee=a("a"),QGr=o("FlaxGPTJModel"),WGr=o(" (GPT-J model)"),HGr=l(),u5=a("li"),Q3e=a("strong"),UGr=o("longt5"),JGr=o(" \u2014 "),vee=a("a"),YGr=o("FlaxLongT5Model"),KGr=o(" (LongT5 model)"),ZGr=l(),b5=a("li"),W3e=a("strong"),eOr=o("marian"),oOr=o(" \u2014 "),Fee=a("a"),rOr=o("FlaxMarianModel"),tOr=o(" (Marian model)"),aOr=l(),v5=a("li"),H3e=a("strong"),nOr=o("mbart"),sOr=o(" \u2014 "),Tee=a("a"),lOr=o("FlaxMBartModel"),iOr=o(" (mBART model)"),dOr=l(),F5=a("li"),U3e=a("strong"),cOr=o("mt5"),fOr=o(" \u2014 "),Mee=a("a"),mOr=o("FlaxMT5Model"),gOr=o(" (MT5 model)"),hOr=l(),T5=a("li"),J3e=a("strong"),pOr=o("opt"),_Or=o(" \u2014 "),Eee=a("a"),uOr=o("FlaxOPTModel"),bOr=o(" (OPT model)"),vOr=l(),M5=a("li"),Y3e=a("strong"),FOr=o("pegasus"),TOr=o(" \u2014 "),Cee=a("a"),MOr=o("FlaxPegasusModel"),EOr=o(" (Pegasus model)"),COr=l(),E5=a("li"),K3e=a("strong"),wOr=o("roberta"),AOr=o(" \u2014 "),wee=a("a"),LOr=o("FlaxRobertaModel"),yOr=o(" (RoBERTa model)"),xOr=l(),C5=a("li"),Z3e=a("strong"),$Or=o("roformer"),kOr=o(" \u2014 "),Aee=a("a"),SOr=o("FlaxRoFormerModel"),ROr=o(" (RoFormer model)"),POr=l(),w5=a("li"),e5e=a("strong"),BOr=o("t5"),NOr=o(" \u2014 "),Lee=a("a"),IOr=o("FlaxT5Model"),qOr=o(" (T5 model)"),jOr=l(),A5=a("li"),o5e=a("strong"),DOr=o("vision-text-dual-encoder"),GOr=o(" \u2014 "),yee=a("a"),OOr=o("FlaxVisionTextDualEncoderModel"),VOr=o(" (VisionTextDualEncoder model)"),XOr=l(),L5=a("li"),r5e=a("strong"),zOr=o("vit"),QOr=o(" \u2014 "),xee=a("a"),WOr=o("FlaxViTModel"),HOr=o(" (ViT model)"),UOr=l(),y5=a("li"),t5e=a("strong"),JOr=o("wav2vec2"),YOr=o(" \u2014 "),$ee=a("a"),KOr=o("FlaxWav2Vec2Model"),ZOr=o(" (Wav2Vec2 model)"),eVr=l(),x5=a("li"),a5e=a("strong"),oVr=o("xglm"),rVr=o(" \u2014 "),kee=a("a"),tVr=o("FlaxXGLMModel"),aVr=o(" (XGLM model)"),nVr=l(),$5=a("li"),n5e=a("strong"),sVr=o("xlm-roberta"),lVr=o(" \u2014 "),See=a("a"),iVr=o("FlaxXLMRobertaModel"),dVr=o(" (XLM-RoBERTa model)"),cVr=l(),F(k5.$$.fragment),oQe=l(),Kc=a("h2"),S5=a("a"),s5e=a("span"),F(u$.$$.fragment),fVr=l(),l5e=a("span"),mVr=o("FlaxAutoModelForCausalLM"),rQe=l(),_r=a("div"),F(b$.$$.fragment),gVr=l(),Zc=a("p"),hVr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Ree=a("a"),pVr=o("from_pretrained()"),_Vr=o(" class method or the "),Pee=a("a"),uVr=o("from_config()"),bVr=o(` class
method.`),vVr=l(),v$=a("p"),FVr=o("This class cannot be instantiated directly using "),i5e=a("code"),TVr=o("__init__()"),MVr=o(" (throws an error)."),EVr=l(),Ht=a("div"),F(F$.$$.fragment),CVr=l(),d5e=a("p"),wVr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),AVr=l(),ef=a("p"),LVr=o(`Note:
Loading a model from its configuration file does `),c5e=a("strong"),yVr=o("not"),xVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Bee=a("a"),$Vr=o("from_pretrained()"),kVr=o(" to load the model weights."),SVr=l(),F(R5.$$.fragment),RVr=l(),Xr=a("div"),F(T$.$$.fragment),PVr=l(),f5e=a("p"),BVr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),NVr=l(),Mn=a("p"),IVr=o("The model class to instantiate is selected based on the "),m5e=a("code"),qVr=o("model_type"),jVr=o(` property of the config object (either
passed as an argument or loaded from `),g5e=a("code"),DVr=o("pretrained_model_name_or_path"),GVr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h5e=a("code"),OVr=o("pretrained_model_name_or_path"),VVr=o(":"),XVr=l(),Ae=a("ul"),P5=a("li"),p5e=a("strong"),zVr=o("bart"),QVr=o(" \u2014 "),Nee=a("a"),WVr=o("FlaxBartForCausalLM"),HVr=o(" (BART model)"),UVr=l(),B5=a("li"),_5e=a("strong"),JVr=o("bert"),YVr=o(" \u2014 "),Iee=a("a"),KVr=o("FlaxBertForCausalLM"),ZVr=o(" (BERT model)"),eXr=l(),N5=a("li"),u5e=a("strong"),oXr=o("big_bird"),rXr=o(" \u2014 "),qee=a("a"),tXr=o("FlaxBigBirdForCausalLM"),aXr=o(" (BigBird model)"),nXr=l(),I5=a("li"),b5e=a("strong"),sXr=o("bloom"),lXr=o(" \u2014 "),jee=a("a"),iXr=o("FlaxBloomForCausalLM"),dXr=o(" (BLOOM model)"),cXr=l(),q5=a("li"),v5e=a("strong"),fXr=o("electra"),mXr=o(" \u2014 "),Dee=a("a"),gXr=o("FlaxElectraForCausalLM"),hXr=o(" (ELECTRA model)"),pXr=l(),j5=a("li"),F5e=a("strong"),_Xr=o("gpt2"),uXr=o(" \u2014 "),Gee=a("a"),bXr=o("FlaxGPT2LMHeadModel"),vXr=o(" (OpenAI GPT-2 model)"),FXr=l(),D5=a("li"),T5e=a("strong"),TXr=o("gpt_neo"),MXr=o(" \u2014 "),Oee=a("a"),EXr=o("FlaxGPTNeoForCausalLM"),CXr=o(" (GPT Neo model)"),wXr=l(),G5=a("li"),M5e=a("strong"),AXr=o("gptj"),LXr=o(" \u2014 "),Vee=a("a"),yXr=o("FlaxGPTJForCausalLM"),xXr=o(" (GPT-J model)"),$Xr=l(),O5=a("li"),E5e=a("strong"),kXr=o("opt"),SXr=o(" \u2014 "),Xee=a("a"),RXr=o("FlaxOPTForCausalLM"),PXr=o(" (OPT model)"),BXr=l(),V5=a("li"),C5e=a("strong"),NXr=o("roberta"),IXr=o(" \u2014 "),zee=a("a"),qXr=o("FlaxRobertaForCausalLM"),jXr=o(" (RoBERTa model)"),DXr=l(),X5=a("li"),w5e=a("strong"),GXr=o("xglm"),OXr=o(" \u2014 "),Qee=a("a"),VXr=o("FlaxXGLMForCausalLM"),XXr=o(" (XGLM model)"),zXr=l(),F(z5.$$.fragment),tQe=l(),of=a("h2"),Q5=a("a"),A5e=a("span"),F(M$.$$.fragment),QXr=l(),L5e=a("span"),WXr=o("FlaxAutoModelForPreTraining"),aQe=l(),ur=a("div"),F(E$.$$.fragment),HXr=l(),rf=a("p"),UXr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Wee=a("a"),JXr=o("from_pretrained()"),YXr=o(" class method or the "),Hee=a("a"),KXr=o("from_config()"),ZXr=o(` class
method.`),ezr=l(),C$=a("p"),ozr=o("This class cannot be instantiated directly using "),y5e=a("code"),rzr=o("__init__()"),tzr=o(" (throws an error)."),azr=l(),Ut=a("div"),F(w$.$$.fragment),nzr=l(),x5e=a("p"),szr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),lzr=l(),tf=a("p"),izr=o(`Note:
Loading a model from its configuration file does `),$5e=a("strong"),dzr=o("not"),czr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Uee=a("a"),fzr=o("from_pretrained()"),mzr=o(" to load the model weights."),gzr=l(),F(W5.$$.fragment),hzr=l(),zr=a("div"),F(A$.$$.fragment),pzr=l(),k5e=a("p"),_zr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),uzr=l(),En=a("p"),bzr=o("The model class to instantiate is selected based on the "),S5e=a("code"),vzr=o("model_type"),Fzr=o(` property of the config object (either
passed as an argument or loaded from `),R5e=a("code"),Tzr=o("pretrained_model_name_or_path"),Mzr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P5e=a("code"),Ezr=o("pretrained_model_name_or_path"),Czr=o(":"),wzr=l(),Ee=a("ul"),H5=a("li"),B5e=a("strong"),Azr=o("albert"),Lzr=o(" \u2014 "),Jee=a("a"),yzr=o("FlaxAlbertForPreTraining"),xzr=o(" (ALBERT model)"),$zr=l(),U5=a("li"),N5e=a("strong"),kzr=o("bart"),Szr=o(" \u2014 "),Yee=a("a"),Rzr=o("FlaxBartForConditionalGeneration"),Pzr=o(" (BART model)"),Bzr=l(),J5=a("li"),I5e=a("strong"),Nzr=o("bert"),Izr=o(" \u2014 "),Kee=a("a"),qzr=o("FlaxBertForPreTraining"),jzr=o(" (BERT model)"),Dzr=l(),Y5=a("li"),q5e=a("strong"),Gzr=o("big_bird"),Ozr=o(" \u2014 "),Zee=a("a"),Vzr=o("FlaxBigBirdForPreTraining"),Xzr=o(" (BigBird model)"),zzr=l(),K5=a("li"),j5e=a("strong"),Qzr=o("electra"),Wzr=o(" \u2014 "),eoe=a("a"),Hzr=o("FlaxElectraForPreTraining"),Uzr=o(" (ELECTRA model)"),Jzr=l(),Z5=a("li"),D5e=a("strong"),Yzr=o("longt5"),Kzr=o(" \u2014 "),ooe=a("a"),Zzr=o("FlaxLongT5ForConditionalGeneration"),eQr=o(" (LongT5 model)"),oQr=l(),ew=a("li"),G5e=a("strong"),rQr=o("mbart"),tQr=o(" \u2014 "),roe=a("a"),aQr=o("FlaxMBartForConditionalGeneration"),nQr=o(" (mBART model)"),sQr=l(),ow=a("li"),O5e=a("strong"),lQr=o("mt5"),iQr=o(" \u2014 "),toe=a("a"),dQr=o("FlaxMT5ForConditionalGeneration"),cQr=o(" (MT5 model)"),fQr=l(),rw=a("li"),V5e=a("strong"),mQr=o("roberta"),gQr=o(" \u2014 "),aoe=a("a"),hQr=o("FlaxRobertaForMaskedLM"),pQr=o(" (RoBERTa model)"),_Qr=l(),tw=a("li"),X5e=a("strong"),uQr=o("roformer"),bQr=o(" \u2014 "),noe=a("a"),vQr=o("FlaxRoFormerForMaskedLM"),FQr=o(" (RoFormer model)"),TQr=l(),aw=a("li"),z5e=a("strong"),MQr=o("t5"),EQr=o(" \u2014 "),soe=a("a"),CQr=o("FlaxT5ForConditionalGeneration"),wQr=o(" (T5 model)"),AQr=l(),nw=a("li"),Q5e=a("strong"),LQr=o("wav2vec2"),yQr=o(" \u2014 "),loe=a("a"),xQr=o("FlaxWav2Vec2ForPreTraining"),$Qr=o(" (Wav2Vec2 model)"),kQr=l(),sw=a("li"),W5e=a("strong"),SQr=o("xlm-roberta"),RQr=o(" \u2014 "),ioe=a("a"),PQr=o("FlaxXLMRobertaForMaskedLM"),BQr=o(" (XLM-RoBERTa model)"),NQr=l(),F(lw.$$.fragment),nQe=l(),af=a("h2"),iw=a("a"),H5e=a("span"),F(L$.$$.fragment),IQr=l(),U5e=a("span"),qQr=o("FlaxAutoModelForMaskedLM"),sQe=l(),br=a("div"),F(y$.$$.fragment),jQr=l(),nf=a("p"),DQr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),doe=a("a"),GQr=o("from_pretrained()"),OQr=o(" class method or the "),coe=a("a"),VQr=o("from_config()"),XQr=o(` class
method.`),zQr=l(),x$=a("p"),QQr=o("This class cannot be instantiated directly using "),J5e=a("code"),WQr=o("__init__()"),HQr=o(" (throws an error)."),UQr=l(),Jt=a("div"),F($$.$$.fragment),JQr=l(),Y5e=a("p"),YQr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),KQr=l(),sf=a("p"),ZQr=o(`Note:
Loading a model from its configuration file does `),K5e=a("strong"),eWr=o("not"),oWr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),foe=a("a"),rWr=o("from_pretrained()"),tWr=o(" to load the model weights."),aWr=l(),F(dw.$$.fragment),nWr=l(),Qr=a("div"),F(k$.$$.fragment),sWr=l(),Z5e=a("p"),lWr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),iWr=l(),Cn=a("p"),dWr=o("The model class to instantiate is selected based on the "),ewe=a("code"),cWr=o("model_type"),fWr=o(` property of the config object (either
passed as an argument or loaded from `),owe=a("code"),mWr=o("pretrained_model_name_or_path"),gWr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rwe=a("code"),hWr=o("pretrained_model_name_or_path"),pWr=o(":"),_Wr=l(),$e=a("ul"),cw=a("li"),twe=a("strong"),uWr=o("albert"),bWr=o(" \u2014 "),moe=a("a"),vWr=o("FlaxAlbertForMaskedLM"),FWr=o(" (ALBERT model)"),TWr=l(),fw=a("li"),awe=a("strong"),MWr=o("bart"),EWr=o(" \u2014 "),goe=a("a"),CWr=o("FlaxBartForConditionalGeneration"),wWr=o(" (BART model)"),AWr=l(),mw=a("li"),nwe=a("strong"),LWr=o("bert"),yWr=o(" \u2014 "),hoe=a("a"),xWr=o("FlaxBertForMaskedLM"),$Wr=o(" (BERT model)"),kWr=l(),gw=a("li"),swe=a("strong"),SWr=o("big_bird"),RWr=o(" \u2014 "),poe=a("a"),PWr=o("FlaxBigBirdForMaskedLM"),BWr=o(" (BigBird model)"),NWr=l(),hw=a("li"),lwe=a("strong"),IWr=o("distilbert"),qWr=o(" \u2014 "),_oe=a("a"),jWr=o("FlaxDistilBertForMaskedLM"),DWr=o(" (DistilBERT model)"),GWr=l(),pw=a("li"),iwe=a("strong"),OWr=o("electra"),VWr=o(" \u2014 "),uoe=a("a"),XWr=o("FlaxElectraForMaskedLM"),zWr=o(" (ELECTRA model)"),QWr=l(),_w=a("li"),dwe=a("strong"),WWr=o("mbart"),HWr=o(" \u2014 "),boe=a("a"),UWr=o("FlaxMBartForConditionalGeneration"),JWr=o(" (mBART model)"),YWr=l(),uw=a("li"),cwe=a("strong"),KWr=o("roberta"),ZWr=o(" \u2014 "),voe=a("a"),eHr=o("FlaxRobertaForMaskedLM"),oHr=o(" (RoBERTa model)"),rHr=l(),bw=a("li"),fwe=a("strong"),tHr=o("roformer"),aHr=o(" \u2014 "),Foe=a("a"),nHr=o("FlaxRoFormerForMaskedLM"),sHr=o(" (RoFormer model)"),lHr=l(),vw=a("li"),mwe=a("strong"),iHr=o("xlm-roberta"),dHr=o(" \u2014 "),Toe=a("a"),cHr=o("FlaxXLMRobertaForMaskedLM"),fHr=o(" (XLM-RoBERTa model)"),mHr=l(),F(Fw.$$.fragment),lQe=l(),lf=a("h2"),Tw=a("a"),gwe=a("span"),F(S$.$$.fragment),gHr=l(),hwe=a("span"),hHr=o("FlaxAutoModelForSeq2SeqLM"),iQe=l(),vr=a("div"),F(R$.$$.fragment),pHr=l(),df=a("p"),_Hr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Moe=a("a"),uHr=o("from_pretrained()"),bHr=o(" class method or the "),Eoe=a("a"),vHr=o("from_config()"),FHr=o(` class
method.`),THr=l(),P$=a("p"),MHr=o("This class cannot be instantiated directly using "),pwe=a("code"),EHr=o("__init__()"),CHr=o(" (throws an error)."),wHr=l(),Yt=a("div"),F(B$.$$.fragment),AHr=l(),_we=a("p"),LHr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),yHr=l(),cf=a("p"),xHr=o(`Note:
Loading a model from its configuration file does `),uwe=a("strong"),$Hr=o("not"),kHr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Coe=a("a"),SHr=o("from_pretrained()"),RHr=o(" to load the model weights."),PHr=l(),F(Mw.$$.fragment),BHr=l(),Wr=a("div"),F(N$.$$.fragment),NHr=l(),bwe=a("p"),IHr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),qHr=l(),wn=a("p"),jHr=o("The model class to instantiate is selected based on the "),vwe=a("code"),DHr=o("model_type"),GHr=o(` property of the config object (either
passed as an argument or loaded from `),Fwe=a("code"),OHr=o("pretrained_model_name_or_path"),VHr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Twe=a("code"),XHr=o("pretrained_model_name_or_path"),zHr=o(":"),QHr=l(),ke=a("ul"),Ew=a("li"),Mwe=a("strong"),WHr=o("bart"),HHr=o(" \u2014 "),woe=a("a"),UHr=o("FlaxBartForConditionalGeneration"),JHr=o(" (BART model)"),YHr=l(),Cw=a("li"),Ewe=a("strong"),KHr=o("blenderbot"),ZHr=o(" \u2014 "),Aoe=a("a"),eUr=o("FlaxBlenderbotForConditionalGeneration"),oUr=o(" (Blenderbot model)"),rUr=l(),ww=a("li"),Cwe=a("strong"),tUr=o("blenderbot-small"),aUr=o(" \u2014 "),Loe=a("a"),nUr=o("FlaxBlenderbotSmallForConditionalGeneration"),sUr=o(" (BlenderbotSmall model)"),lUr=l(),Aw=a("li"),wwe=a("strong"),iUr=o("encoder-decoder"),dUr=o(" \u2014 "),yoe=a("a"),cUr=o("FlaxEncoderDecoderModel"),fUr=o(" (Encoder decoder model)"),mUr=l(),Lw=a("li"),Awe=a("strong"),gUr=o("longt5"),hUr=o(" \u2014 "),xoe=a("a"),pUr=o("FlaxLongT5ForConditionalGeneration"),_Ur=o(" (LongT5 model)"),uUr=l(),yw=a("li"),Lwe=a("strong"),bUr=o("marian"),vUr=o(" \u2014 "),$oe=a("a"),FUr=o("FlaxMarianMTModel"),TUr=o(" (Marian model)"),MUr=l(),xw=a("li"),ywe=a("strong"),EUr=o("mbart"),CUr=o(" \u2014 "),koe=a("a"),wUr=o("FlaxMBartForConditionalGeneration"),AUr=o(" (mBART model)"),LUr=l(),$w=a("li"),xwe=a("strong"),yUr=o("mt5"),xUr=o(" \u2014 "),Soe=a("a"),$Ur=o("FlaxMT5ForConditionalGeneration"),kUr=o(" (MT5 model)"),SUr=l(),kw=a("li"),$we=a("strong"),RUr=o("pegasus"),PUr=o(" \u2014 "),Roe=a("a"),BUr=o("FlaxPegasusForConditionalGeneration"),NUr=o(" (Pegasus model)"),IUr=l(),Sw=a("li"),kwe=a("strong"),qUr=o("t5"),jUr=o(" \u2014 "),Poe=a("a"),DUr=o("FlaxT5ForConditionalGeneration"),GUr=o(" (T5 model)"),OUr=l(),F(Rw.$$.fragment),dQe=l(),ff=a("h2"),Pw=a("a"),Swe=a("span"),F(I$.$$.fragment),VUr=l(),Rwe=a("span"),XUr=o("FlaxAutoModelForSequenceClassification"),cQe=l(),Fr=a("div"),F(q$.$$.fragment),zUr=l(),mf=a("p"),QUr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Boe=a("a"),WUr=o("from_pretrained()"),HUr=o(" class method or the "),Noe=a("a"),UUr=o("from_config()"),JUr=o(` class
method.`),YUr=l(),j$=a("p"),KUr=o("This class cannot be instantiated directly using "),Pwe=a("code"),ZUr=o("__init__()"),eJr=o(" (throws an error)."),oJr=l(),Kt=a("div"),F(D$.$$.fragment),rJr=l(),Bwe=a("p"),tJr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),aJr=l(),gf=a("p"),nJr=o(`Note:
Loading a model from its configuration file does `),Nwe=a("strong"),sJr=o("not"),lJr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ioe=a("a"),iJr=o("from_pretrained()"),dJr=o(" to load the model weights."),cJr=l(),F(Bw.$$.fragment),fJr=l(),Hr=a("div"),F(G$.$$.fragment),mJr=l(),Iwe=a("p"),gJr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),hJr=l(),An=a("p"),pJr=o("The model class to instantiate is selected based on the "),qwe=a("code"),_Jr=o("model_type"),uJr=o(` property of the config object (either
passed as an argument or loaded from `),jwe=a("code"),bJr=o("pretrained_model_name_or_path"),vJr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dwe=a("code"),FJr=o("pretrained_model_name_or_path"),TJr=o(":"),MJr=l(),Se=a("ul"),Nw=a("li"),Gwe=a("strong"),EJr=o("albert"),CJr=o(" \u2014 "),qoe=a("a"),wJr=o("FlaxAlbertForSequenceClassification"),AJr=o(" (ALBERT model)"),LJr=l(),Iw=a("li"),Owe=a("strong"),yJr=o("bart"),xJr=o(" \u2014 "),joe=a("a"),$Jr=o("FlaxBartForSequenceClassification"),kJr=o(" (BART model)"),SJr=l(),qw=a("li"),Vwe=a("strong"),RJr=o("bert"),PJr=o(" \u2014 "),Doe=a("a"),BJr=o("FlaxBertForSequenceClassification"),NJr=o(" (BERT model)"),IJr=l(),jw=a("li"),Xwe=a("strong"),qJr=o("big_bird"),jJr=o(" \u2014 "),Goe=a("a"),DJr=o("FlaxBigBirdForSequenceClassification"),GJr=o(" (BigBird model)"),OJr=l(),Dw=a("li"),zwe=a("strong"),VJr=o("distilbert"),XJr=o(" \u2014 "),Ooe=a("a"),zJr=o("FlaxDistilBertForSequenceClassification"),QJr=o(" (DistilBERT model)"),WJr=l(),Gw=a("li"),Qwe=a("strong"),HJr=o("electra"),UJr=o(" \u2014 "),Voe=a("a"),JJr=o("FlaxElectraForSequenceClassification"),YJr=o(" (ELECTRA model)"),KJr=l(),Ow=a("li"),Wwe=a("strong"),ZJr=o("mbart"),eYr=o(" \u2014 "),Xoe=a("a"),oYr=o("FlaxMBartForSequenceClassification"),rYr=o(" (mBART model)"),tYr=l(),Vw=a("li"),Hwe=a("strong"),aYr=o("roberta"),nYr=o(" \u2014 "),zoe=a("a"),sYr=o("FlaxRobertaForSequenceClassification"),lYr=o(" (RoBERTa model)"),iYr=l(),Xw=a("li"),Uwe=a("strong"),dYr=o("roformer"),cYr=o(" \u2014 "),Qoe=a("a"),fYr=o("FlaxRoFormerForSequenceClassification"),mYr=o(" (RoFormer model)"),gYr=l(),zw=a("li"),Jwe=a("strong"),hYr=o("xlm-roberta"),pYr=o(" \u2014 "),Woe=a("a"),_Yr=o("FlaxXLMRobertaForSequenceClassification"),uYr=o(" (XLM-RoBERTa model)"),bYr=l(),F(Qw.$$.fragment),fQe=l(),hf=a("h2"),Ww=a("a"),Ywe=a("span"),F(O$.$$.fragment),vYr=l(),Kwe=a("span"),FYr=o("FlaxAutoModelForQuestionAnswering"),mQe=l(),Tr=a("div"),F(V$.$$.fragment),TYr=l(),pf=a("p"),MYr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Hoe=a("a"),EYr=o("from_pretrained()"),CYr=o(" class method or the "),Uoe=a("a"),wYr=o("from_config()"),AYr=o(` class
method.`),LYr=l(),X$=a("p"),yYr=o("This class cannot be instantiated directly using "),Zwe=a("code"),xYr=o("__init__()"),$Yr=o(" (throws an error)."),kYr=l(),Zt=a("div"),F(z$.$$.fragment),SYr=l(),eAe=a("p"),RYr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),PYr=l(),_f=a("p"),BYr=o(`Note:
Loading a model from its configuration file does `),oAe=a("strong"),NYr=o("not"),IYr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Joe=a("a"),qYr=o("from_pretrained()"),jYr=o(" to load the model weights."),DYr=l(),F(Hw.$$.fragment),GYr=l(),Ur=a("div"),F(Q$.$$.fragment),OYr=l(),rAe=a("p"),VYr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),XYr=l(),Ln=a("p"),zYr=o("The model class to instantiate is selected based on the "),tAe=a("code"),QYr=o("model_type"),WYr=o(` property of the config object (either
passed as an argument or loaded from `),aAe=a("code"),HYr=o("pretrained_model_name_or_path"),UYr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nAe=a("code"),JYr=o("pretrained_model_name_or_path"),YYr=o(":"),KYr=l(),Re=a("ul"),Uw=a("li"),sAe=a("strong"),ZYr=o("albert"),eKr=o(" \u2014 "),Yoe=a("a"),oKr=o("FlaxAlbertForQuestionAnswering"),rKr=o(" (ALBERT model)"),tKr=l(),Jw=a("li"),lAe=a("strong"),aKr=o("bart"),nKr=o(" \u2014 "),Koe=a("a"),sKr=o("FlaxBartForQuestionAnswering"),lKr=o(" (BART model)"),iKr=l(),Yw=a("li"),iAe=a("strong"),dKr=o("bert"),cKr=o(" \u2014 "),Zoe=a("a"),fKr=o("FlaxBertForQuestionAnswering"),mKr=o(" (BERT model)"),gKr=l(),Kw=a("li"),dAe=a("strong"),hKr=o("big_bird"),pKr=o(" \u2014 "),ere=a("a"),_Kr=o("FlaxBigBirdForQuestionAnswering"),uKr=o(" (BigBird model)"),bKr=l(),Zw=a("li"),cAe=a("strong"),vKr=o("distilbert"),FKr=o(" \u2014 "),ore=a("a"),TKr=o("FlaxDistilBertForQuestionAnswering"),MKr=o(" (DistilBERT model)"),EKr=l(),eA=a("li"),fAe=a("strong"),CKr=o("electra"),wKr=o(" \u2014 "),rre=a("a"),AKr=o("FlaxElectraForQuestionAnswering"),LKr=o(" (ELECTRA model)"),yKr=l(),oA=a("li"),mAe=a("strong"),xKr=o("mbart"),$Kr=o(" \u2014 "),tre=a("a"),kKr=o("FlaxMBartForQuestionAnswering"),SKr=o(" (mBART model)"),RKr=l(),rA=a("li"),gAe=a("strong"),PKr=o("roberta"),BKr=o(" \u2014 "),are=a("a"),NKr=o("FlaxRobertaForQuestionAnswering"),IKr=o(" (RoBERTa model)"),qKr=l(),tA=a("li"),hAe=a("strong"),jKr=o("roformer"),DKr=o(" \u2014 "),nre=a("a"),GKr=o("FlaxRoFormerForQuestionAnswering"),OKr=o(" (RoFormer model)"),VKr=l(),aA=a("li"),pAe=a("strong"),XKr=o("xlm-roberta"),zKr=o(" \u2014 "),sre=a("a"),QKr=o("FlaxXLMRobertaForQuestionAnswering"),WKr=o(" (XLM-RoBERTa model)"),HKr=l(),F(nA.$$.fragment),gQe=l(),uf=a("h2"),sA=a("a"),_Ae=a("span"),F(W$.$$.fragment),UKr=l(),uAe=a("span"),JKr=o("FlaxAutoModelForTokenClassification"),hQe=l(),Mr=a("div"),F(H$.$$.fragment),YKr=l(),bf=a("p"),KKr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),lre=a("a"),ZKr=o("from_pretrained()"),eZr=o(" class method or the "),ire=a("a"),oZr=o("from_config()"),rZr=o(` class
method.`),tZr=l(),U$=a("p"),aZr=o("This class cannot be instantiated directly using "),bAe=a("code"),nZr=o("__init__()"),sZr=o(" (throws an error)."),lZr=l(),ea=a("div"),F(J$.$$.fragment),iZr=l(),vAe=a("p"),dZr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),cZr=l(),vf=a("p"),fZr=o(`Note:
Loading a model from its configuration file does `),FAe=a("strong"),mZr=o("not"),gZr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dre=a("a"),hZr=o("from_pretrained()"),pZr=o(" to load the model weights."),_Zr=l(),F(lA.$$.fragment),uZr=l(),Jr=a("div"),F(Y$.$$.fragment),bZr=l(),TAe=a("p"),vZr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),FZr=l(),yn=a("p"),TZr=o("The model class to instantiate is selected based on the "),MAe=a("code"),MZr=o("model_type"),EZr=o(` property of the config object (either
passed as an argument or loaded from `),EAe=a("code"),CZr=o("pretrained_model_name_or_path"),wZr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CAe=a("code"),AZr=o("pretrained_model_name_or_path"),LZr=o(":"),yZr=l(),Ve=a("ul"),iA=a("li"),wAe=a("strong"),xZr=o("albert"),$Zr=o(" \u2014 "),cre=a("a"),kZr=o("FlaxAlbertForTokenClassification"),SZr=o(" (ALBERT model)"),RZr=l(),dA=a("li"),AAe=a("strong"),PZr=o("bert"),BZr=o(" \u2014 "),fre=a("a"),NZr=o("FlaxBertForTokenClassification"),IZr=o(" (BERT model)"),qZr=l(),cA=a("li"),LAe=a("strong"),jZr=o("big_bird"),DZr=o(" \u2014 "),mre=a("a"),GZr=o("FlaxBigBirdForTokenClassification"),OZr=o(" (BigBird model)"),VZr=l(),fA=a("li"),yAe=a("strong"),XZr=o("distilbert"),zZr=o(" \u2014 "),gre=a("a"),QZr=o("FlaxDistilBertForTokenClassification"),WZr=o(" (DistilBERT model)"),HZr=l(),mA=a("li"),xAe=a("strong"),UZr=o("electra"),JZr=o(" \u2014 "),hre=a("a"),YZr=o("FlaxElectraForTokenClassification"),KZr=o(" (ELECTRA model)"),ZZr=l(),gA=a("li"),$Ae=a("strong"),eet=o("roberta"),oet=o(" \u2014 "),pre=a("a"),ret=o("FlaxRobertaForTokenClassification"),tet=o(" (RoBERTa model)"),aet=l(),hA=a("li"),kAe=a("strong"),net=o("roformer"),set=o(" \u2014 "),_re=a("a"),iet=o("FlaxRoFormerForTokenClassification"),det=o(" (RoFormer model)"),cet=l(),pA=a("li"),SAe=a("strong"),fet=o("xlm-roberta"),met=o(" \u2014 "),ure=a("a"),get=o("FlaxXLMRobertaForTokenClassification"),het=o(" (XLM-RoBERTa model)"),pet=l(),F(_A.$$.fragment),pQe=l(),Ff=a("h2"),uA=a("a"),RAe=a("span"),F(K$.$$.fragment),_et=l(),PAe=a("span"),uet=o("FlaxAutoModelForMultipleChoice"),_Qe=l(),Er=a("div"),F(Z$.$$.fragment),bet=l(),Tf=a("p"),vet=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),bre=a("a"),Fet=o("from_pretrained()"),Tet=o(" class method or the "),vre=a("a"),Met=o("from_config()"),Eet=o(` class
method.`),Cet=l(),ek=a("p"),wet=o("This class cannot be instantiated directly using "),BAe=a("code"),Aet=o("__init__()"),Let=o(" (throws an error)."),yet=l(),oa=a("div"),F(ok.$$.fragment),xet=l(),NAe=a("p"),$et=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),ket=l(),Mf=a("p"),Set=o(`Note:
Loading a model from its configuration file does `),IAe=a("strong"),Ret=o("not"),Pet=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Fre=a("a"),Bet=o("from_pretrained()"),Net=o(" to load the model weights."),Iet=l(),F(bA.$$.fragment),qet=l(),Yr=a("div"),F(rk.$$.fragment),jet=l(),qAe=a("p"),Det=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Get=l(),xn=a("p"),Oet=o("The model class to instantiate is selected based on the "),jAe=a("code"),Vet=o("model_type"),Xet=o(` property of the config object (either
passed as an argument or loaded from `),DAe=a("code"),zet=o("pretrained_model_name_or_path"),Qet=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GAe=a("code"),Wet=o("pretrained_model_name_or_path"),Het=o(":"),Uet=l(),Xe=a("ul"),vA=a("li"),OAe=a("strong"),Jet=o("albert"),Yet=o(" \u2014 "),Tre=a("a"),Ket=o("FlaxAlbertForMultipleChoice"),Zet=o(" (ALBERT model)"),eot=l(),FA=a("li"),VAe=a("strong"),oot=o("bert"),rot=o(" \u2014 "),Mre=a("a"),tot=o("FlaxBertForMultipleChoice"),aot=o(" (BERT model)"),not=l(),TA=a("li"),XAe=a("strong"),sot=o("big_bird"),lot=o(" \u2014 "),Ere=a("a"),iot=o("FlaxBigBirdForMultipleChoice"),dot=o(" (BigBird model)"),cot=l(),MA=a("li"),zAe=a("strong"),fot=o("distilbert"),mot=o(" \u2014 "),Cre=a("a"),got=o("FlaxDistilBertForMultipleChoice"),hot=o(" (DistilBERT model)"),pot=l(),EA=a("li"),QAe=a("strong"),_ot=o("electra"),uot=o(" \u2014 "),wre=a("a"),bot=o("FlaxElectraForMultipleChoice"),vot=o(" (ELECTRA model)"),Fot=l(),CA=a("li"),WAe=a("strong"),Tot=o("roberta"),Mot=o(" \u2014 "),Are=a("a"),Eot=o("FlaxRobertaForMultipleChoice"),Cot=o(" (RoBERTa model)"),wot=l(),wA=a("li"),HAe=a("strong"),Aot=o("roformer"),Lot=o(" \u2014 "),Lre=a("a"),yot=o("FlaxRoFormerForMultipleChoice"),xot=o(" (RoFormer model)"),$ot=l(),AA=a("li"),UAe=a("strong"),kot=o("xlm-roberta"),Sot=o(" \u2014 "),yre=a("a"),Rot=o("FlaxXLMRobertaForMultipleChoice"),Pot=o(" (XLM-RoBERTa model)"),Bot=l(),F(LA.$$.fragment),uQe=l(),Ef=a("h2"),yA=a("a"),JAe=a("span"),F(tk.$$.fragment),Not=l(),YAe=a("span"),Iot=o("FlaxAutoModelForNextSentencePrediction"),bQe=l(),Cr=a("div"),F(ak.$$.fragment),qot=l(),Cf=a("p"),jot=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),xre=a("a"),Dot=o("from_pretrained()"),Got=o(" class method or the "),$re=a("a"),Oot=o("from_config()"),Vot=o(` class
method.`),Xot=l(),nk=a("p"),zot=o("This class cannot be instantiated directly using "),KAe=a("code"),Qot=o("__init__()"),Wot=o(" (throws an error)."),Hot=l(),ra=a("div"),F(sk.$$.fragment),Uot=l(),ZAe=a("p"),Jot=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Yot=l(),wf=a("p"),Kot=o(`Note:
Loading a model from its configuration file does `),e6e=a("strong"),Zot=o("not"),ert=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kre=a("a"),ort=o("from_pretrained()"),rrt=o(" to load the model weights."),trt=l(),F(xA.$$.fragment),art=l(),Kr=a("div"),F(lk.$$.fragment),nrt=l(),o6e=a("p"),srt=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),lrt=l(),$n=a("p"),irt=o("The model class to instantiate is selected based on the "),r6e=a("code"),drt=o("model_type"),crt=o(` property of the config object (either
passed as an argument or loaded from `),t6e=a("code"),frt=o("pretrained_model_name_or_path"),mrt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a6e=a("code"),grt=o("pretrained_model_name_or_path"),hrt=o(":"),prt=l(),n6e=a("ul"),$A=a("li"),s6e=a("strong"),_rt=o("bert"),urt=o(" \u2014 "),Sre=a("a"),brt=o("FlaxBertForNextSentencePrediction"),vrt=o(" (BERT model)"),Frt=l(),F(kA.$$.fragment),vQe=l(),Af=a("h2"),SA=a("a"),l6e=a("span"),F(ik.$$.fragment),Trt=l(),i6e=a("span"),Mrt=o("FlaxAutoModelForImageClassification"),FQe=l(),wr=a("div"),F(dk.$$.fragment),Ert=l(),Lf=a("p"),Crt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Rre=a("a"),wrt=o("from_pretrained()"),Art=o(" class method or the "),Pre=a("a"),Lrt=o("from_config()"),yrt=o(` class
method.`),xrt=l(),ck=a("p"),$rt=o("This class cannot be instantiated directly using "),d6e=a("code"),krt=o("__init__()"),Srt=o(" (throws an error)."),Rrt=l(),ta=a("div"),F(fk.$$.fragment),Prt=l(),c6e=a("p"),Brt=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Nrt=l(),yf=a("p"),Irt=o(`Note:
Loading a model from its configuration file does `),f6e=a("strong"),qrt=o("not"),jrt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Bre=a("a"),Drt=o("from_pretrained()"),Grt=o(" to load the model weights."),Ort=l(),F(RA.$$.fragment),Vrt=l(),Zr=a("div"),F(mk.$$.fragment),Xrt=l(),m6e=a("p"),zrt=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Qrt=l(),kn=a("p"),Wrt=o("The model class to instantiate is selected based on the "),g6e=a("code"),Hrt=o("model_type"),Urt=o(` property of the config object (either
passed as an argument or loaded from `),h6e=a("code"),Jrt=o("pretrained_model_name_or_path"),Yrt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p6e=a("code"),Krt=o("pretrained_model_name_or_path"),Zrt=o(":"),ett=l(),gk=a("ul"),PA=a("li"),_6e=a("strong"),ott=o("beit"),rtt=o(" \u2014 "),Nre=a("a"),ttt=o("FlaxBeitForImageClassification"),att=o(" (BEiT model)"),ntt=l(),BA=a("li"),u6e=a("strong"),stt=o("vit"),ltt=o(" \u2014 "),Ire=a("a"),itt=o("FlaxViTForImageClassification"),dtt=o(" (ViT model)"),ctt=l(),F(NA.$$.fragment),TQe=l(),xf=a("h2"),IA=a("a"),b6e=a("span"),F(hk.$$.fragment),ftt=l(),v6e=a("span"),mtt=o("FlaxAutoModelForVision2Seq"),MQe=l(),Ar=a("div"),F(pk.$$.fragment),gtt=l(),$f=a("p"),htt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),qre=a("a"),ptt=o("from_pretrained()"),_tt=o(" class method or the "),jre=a("a"),utt=o("from_config()"),btt=o(` class
method.`),vtt=l(),_k=a("p"),Ftt=o("This class cannot be instantiated directly using "),F6e=a("code"),Ttt=o("__init__()"),Mtt=o(" (throws an error)."),Ett=l(),aa=a("div"),F(uk.$$.fragment),Ctt=l(),T6e=a("p"),wtt=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Att=l(),kf=a("p"),Ltt=o(`Note:
Loading a model from its configuration file does `),M6e=a("strong"),ytt=o("not"),xtt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Dre=a("a"),$tt=o("from_pretrained()"),ktt=o(" to load the model weights."),Stt=l(),F(qA.$$.fragment),Rtt=l(),et=a("div"),F(bk.$$.fragment),Ptt=l(),E6e=a("p"),Btt=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Ntt=l(),Sn=a("p"),Itt=o("The model class to instantiate is selected based on the "),C6e=a("code"),qtt=o("model_type"),jtt=o(` property of the config object (either
passed as an argument or loaded from `),w6e=a("code"),Dtt=o("pretrained_model_name_or_path"),Gtt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A6e=a("code"),Ott=o("pretrained_model_name_or_path"),Vtt=o(":"),Xtt=l(),L6e=a("ul"),jA=a("li"),y6e=a("strong"),ztt=o("vision-encoder-decoder"),Qtt=o(" \u2014 "),Gre=a("a"),Wtt=o("FlaxVisionEncoderDecoderModel"),Htt=o(" (Vision Encoder decoder model)"),Utt=l(),F(DA.$$.fragment),this.h()},l(f){const u=qWt('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var vk=s(p);m=n(vk,"A",{id:!0,class:!0,href:!0});var x6e=s(m);_=n(x6e,"SPAN",{});var $6e=s(_);T(d.$$.fragment,$6e),$6e.forEach(t),x6e.forEach(t),h=i(vk),Co=n(vk,"SPAN",{});var k6e=s(Co);yi=r(k6e,"Auto Classes"),k6e.forEach(t),vk.forEach(t),Bf=i(f),lt=n(f,"P",{});var Fk=s(lt);xi=r(Fk,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),$i=n(Fk,"CODE",{});var S6e=s($i);nL=r(S6e,"from_pretrained()"),S6e.forEach(t),Nf=r(Fk,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Fk.forEach(t),Oe=i(f),We=n(f,"P",{});var Rn=s(We);ki=r(Rn,"Instantiating one of "),Pn=n(Rn,"A",{href:!0});var R6e=s(Pn);sL=r(R6e,"AutoConfig"),R6e.forEach(t),Bn=r(Rn,", "),Nn=n(Rn,"A",{href:!0});var P6e=s(Nn);lL=r(P6e,"AutoModel"),P6e.forEach(t),Si=r(Rn,`, and
`),In=n(Rn,"A",{href:!0});var B6e=s(In);iL=r(B6e,"AutoTokenizer"),B6e.forEach(t),Ri=r(Rn," will directly create a class of the relevant architecture. For instance"),Rn.forEach(t),If=i(f),T(Sa.$$.fragment,f),He=i(f),Le=n(f,"P",{});var Tk=s(Le);GS=r(Tk,"will create a model that is an instance of "),Pi=n(Tk,"A",{href:!0});var N6e=s(Pi);OS=r(N6e,"BertModel"),N6e.forEach(t),VS=r(Tk,"."),Tk.forEach(t),wo=i(f),Ra=n(f,"P",{});var Mk=s(Ra);XS=r(Mk,"There is one class of "),qf=n(Mk,"CODE",{});var I6e=s(qf);zS=r(I6e,"AutoModel"),I6e.forEach(t),RHe=r(Mk," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Mk.forEach(t),bXe=i(f),Bi=n(f,"H2",{class:!0});var Ek=s(Bi);jf=n(Ek,"A",{id:!0,class:!0,href:!0});var q6e=s(jf);Nae=n(q6e,"SPAN",{});var j6e=s(Nae);T(dL.$$.fragment,j6e),j6e.forEach(t),q6e.forEach(t),PHe=i(Ek),Iae=n(Ek,"SPAN",{});var D6e=s(Iae);BHe=r(D6e,"Extending the Auto Classes"),D6e.forEach(t),Ek.forEach(t),vXe=i(f),qn=n(f,"P",{});var Sf=s(qn);NHe=r(Sf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),qae=n(Sf,"CODE",{});var G6e=s(qae);IHe=r(G6e,"NewModel"),G6e.forEach(t),qHe=r(Sf,", make sure you have a "),jae=n(Sf,"CODE",{});var O6e=s(jae);jHe=r(O6e,"NewModelConfig"),O6e.forEach(t),DHe=r(Sf,` then you can add those to the auto
classes like this:`),Sf.forEach(t),FXe=i(f),T(cL.$$.fragment,f),TXe=i(f),QS=n(f,"P",{});var V6e=s(QS);GHe=r(V6e,"You will then be able to use the auto classes like you would usually do!"),V6e.forEach(t),MXe=i(f),T(Df.$$.fragment,f),EXe=i(f),Ni=n(f,"H2",{class:!0});var Ck=s(Ni);Gf=n(Ck,"A",{id:!0,class:!0,href:!0});var X6e=s(Gf);Dae=n(X6e,"SPAN",{});var z6e=s(Dae);T(fL.$$.fragment,z6e),z6e.forEach(t),X6e.forEach(t),OHe=i(Ck),Gae=n(Ck,"SPAN",{});var Q6e=s(Gae);VHe=r(Q6e,"AutoConfig"),Q6e.forEach(t),Ck.forEach(t),CXe=i(f),Ao=n(f,"DIV",{class:!0});var nt=s(Ao);T(mL.$$.fragment,nt),XHe=i(nt),gL=n(nt,"P",{});var wk=s(gL);zHe=r(wk,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),WS=n(wk,"A",{href:!0});var W6e=s(WS);QHe=r(W6e,"from_pretrained()"),W6e.forEach(t),WHe=r(wk," class method."),wk.forEach(t),HHe=i(nt),hL=n(nt,"P",{});var Ak=s(hL);UHe=r(Ak,"This class cannot be instantiated directly using "),Oae=n(Ak,"CODE",{});var H6e=s(Oae);JHe=r(H6e,"__init__()"),H6e.forEach(t),YHe=r(Ak," (throws an error)."),Ak.forEach(t),KHe=i(nt),Lr=n(nt,"DIV",{class:!0});var st=s(Lr);T(pL.$$.fragment,st),ZHe=i(st),Vae=n(st,"P",{});var U6e=s(Vae);eUe=r(U6e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),U6e.forEach(t),oUe=i(st),Ii=n(st,"P",{});var Rf=s(Ii);rUe=r(Rf,"The configuration class to instantiate is selected based on the "),Xae=n(Rf,"CODE",{});var J6e=s(Xae);tUe=r(J6e,"model_type"),J6e.forEach(t),aUe=r(Rf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),zae=n(Rf,"CODE",{});var Y6e=s(zae);nUe=r(Y6e,"pretrained_model_name_or_path"),Y6e.forEach(t),sUe=r(Rf,":"),Rf.forEach(t),lUe=i(st),A=n(st,"UL",{});var L=s(A);Of=n(L,"LI",{});var GA=s(Of);Qae=n(GA,"STRONG",{});var K6e=s(Qae);iUe=r(K6e,"albert"),K6e.forEach(t),dUe=r(GA," \u2014 "),HS=n(GA,"A",{href:!0});var Z6e=s(HS);cUe=r(Z6e,"AlbertConfig"),Z6e.forEach(t),fUe=r(GA," (ALBERT model)"),GA.forEach(t),mUe=i(L),Vf=n(L,"LI",{});var OA=s(Vf);Wae=n(OA,"STRONG",{});var e7e=s(Wae);gUe=r(e7e,"bart"),e7e.forEach(t),hUe=r(OA," \u2014 "),US=n(OA,"A",{href:!0});var o7e=s(US);pUe=r(o7e,"BartConfig"),o7e.forEach(t),_Ue=r(OA," (BART model)"),OA.forEach(t),uUe=i(L),Xf=n(L,"LI",{});var VA=s(Xf);Hae=n(VA,"STRONG",{});var r7e=s(Hae);bUe=r(r7e,"beit"),r7e.forEach(t),vUe=r(VA," \u2014 "),JS=n(VA,"A",{href:!0});var t7e=s(JS);FUe=r(t7e,"BeitConfig"),t7e.forEach(t),TUe=r(VA," (BEiT model)"),VA.forEach(t),MUe=i(L),zf=n(L,"LI",{});var XA=s(zf);Uae=n(XA,"STRONG",{});var a7e=s(Uae);EUe=r(a7e,"bert"),a7e.forEach(t),CUe=r(XA," \u2014 "),YS=n(XA,"A",{href:!0});var n7e=s(YS);wUe=r(n7e,"BertConfig"),n7e.forEach(t),AUe=r(XA," (BERT model)"),XA.forEach(t),LUe=i(L),Qf=n(L,"LI",{});var zA=s(Qf);Jae=n(zA,"STRONG",{});var s7e=s(Jae);yUe=r(s7e,"bert-generation"),s7e.forEach(t),xUe=r(zA," \u2014 "),KS=n(zA,"A",{href:!0});var l7e=s(KS);$Ue=r(l7e,"BertGenerationConfig"),l7e.forEach(t),kUe=r(zA," (Bert Generation model)"),zA.forEach(t),SUe=i(L),Wf=n(L,"LI",{});var QA=s(Wf);Yae=n(QA,"STRONG",{});var i7e=s(Yae);RUe=r(i7e,"big_bird"),i7e.forEach(t),PUe=r(QA," \u2014 "),ZS=n(QA,"A",{href:!0});var d7e=s(ZS);BUe=r(d7e,"BigBirdConfig"),d7e.forEach(t),NUe=r(QA," (BigBird model)"),QA.forEach(t),IUe=i(L),Hf=n(L,"LI",{});var WA=s(Hf);Kae=n(WA,"STRONG",{});var c7e=s(Kae);qUe=r(c7e,"bigbird_pegasus"),c7e.forEach(t),jUe=r(WA," \u2014 "),eR=n(WA,"A",{href:!0});var f7e=s(eR);DUe=r(f7e,"BigBirdPegasusConfig"),f7e.forEach(t),GUe=r(WA," (BigBird-Pegasus model)"),WA.forEach(t),OUe=i(L),Uf=n(L,"LI",{});var HA=s(Uf);Zae=n(HA,"STRONG",{});var m7e=s(Zae);VUe=r(m7e,"blenderbot"),m7e.forEach(t),XUe=r(HA," \u2014 "),oR=n(HA,"A",{href:!0});var g7e=s(oR);zUe=r(g7e,"BlenderbotConfig"),g7e.forEach(t),QUe=r(HA," (Blenderbot model)"),HA.forEach(t),WUe=i(L),Jf=n(L,"LI",{});var UA=s(Jf);ene=n(UA,"STRONG",{});var h7e=s(ene);HUe=r(h7e,"blenderbot-small"),h7e.forEach(t),UUe=r(UA," \u2014 "),rR=n(UA,"A",{href:!0});var p7e=s(rR);JUe=r(p7e,"BlenderbotSmallConfig"),p7e.forEach(t),YUe=r(UA," (BlenderbotSmall model)"),UA.forEach(t),KUe=i(L),Yf=n(L,"LI",{});var JA=s(Yf);one=n(JA,"STRONG",{});var _7e=s(one);ZUe=r(_7e,"bloom"),_7e.forEach(t),eJe=r(JA," \u2014 "),tR=n(JA,"A",{href:!0});var u7e=s(tR);oJe=r(u7e,"BloomConfig"),u7e.forEach(t),rJe=r(JA," (BLOOM model)"),JA.forEach(t),tJe=i(L),Kf=n(L,"LI",{});var YA=s(Kf);rne=n(YA,"STRONG",{});var b7e=s(rne);aJe=r(b7e,"camembert"),b7e.forEach(t),nJe=r(YA," \u2014 "),aR=n(YA,"A",{href:!0});var v7e=s(aR);sJe=r(v7e,"CamembertConfig"),v7e.forEach(t),lJe=r(YA," (CamemBERT model)"),YA.forEach(t),iJe=i(L),Zf=n(L,"LI",{});var KA=s(Zf);tne=n(KA,"STRONG",{});var F7e=s(tne);dJe=r(F7e,"canine"),F7e.forEach(t),cJe=r(KA," \u2014 "),nR=n(KA,"A",{href:!0});var T7e=s(nR);fJe=r(T7e,"CanineConfig"),T7e.forEach(t),mJe=r(KA," (CANINE model)"),KA.forEach(t),gJe=i(L),em=n(L,"LI",{});var ZA=s(em);ane=n(ZA,"STRONG",{});var M7e=s(ane);hJe=r(M7e,"clip"),M7e.forEach(t),pJe=r(ZA," \u2014 "),sR=n(ZA,"A",{href:!0});var E7e=s(sR);_Je=r(E7e,"CLIPConfig"),E7e.forEach(t),uJe=r(ZA," (CLIP model)"),ZA.forEach(t),bJe=i(L),om=n(L,"LI",{});var e6=s(om);nne=n(e6,"STRONG",{});var C7e=s(nne);vJe=r(C7e,"codegen"),C7e.forEach(t),FJe=r(e6," \u2014 "),lR=n(e6,"A",{href:!0});var w7e=s(lR);TJe=r(w7e,"CodeGenConfig"),w7e.forEach(t),MJe=r(e6," (CodeGen model)"),e6.forEach(t),EJe=i(L),rm=n(L,"LI",{});var o6=s(rm);sne=n(o6,"STRONG",{});var A7e=s(sne);CJe=r(A7e,"convbert"),A7e.forEach(t),wJe=r(o6," \u2014 "),iR=n(o6,"A",{href:!0});var L7e=s(iR);AJe=r(L7e,"ConvBertConfig"),L7e.forEach(t),LJe=r(o6," (ConvBERT model)"),o6.forEach(t),yJe=i(L),tm=n(L,"LI",{});var r6=s(tm);lne=n(r6,"STRONG",{});var y7e=s(lne);xJe=r(y7e,"convnext"),y7e.forEach(t),$Je=r(r6," \u2014 "),dR=n(r6,"A",{href:!0});var x7e=s(dR);kJe=r(x7e,"ConvNextConfig"),x7e.forEach(t),SJe=r(r6," (ConvNeXT model)"),r6.forEach(t),RJe=i(L),am=n(L,"LI",{});var t6=s(am);ine=n(t6,"STRONG",{});var $7e=s(ine);PJe=r($7e,"ctrl"),$7e.forEach(t),BJe=r(t6," \u2014 "),cR=n(t6,"A",{href:!0});var k7e=s(cR);NJe=r(k7e,"CTRLConfig"),k7e.forEach(t),IJe=r(t6," (CTRL model)"),t6.forEach(t),qJe=i(L),nm=n(L,"LI",{});var a6=s(nm);dne=n(a6,"STRONG",{});var S7e=s(dne);jJe=r(S7e,"cvt"),S7e.forEach(t),DJe=r(a6," \u2014 "),fR=n(a6,"A",{href:!0});var R7e=s(fR);GJe=r(R7e,"CvtConfig"),R7e.forEach(t),OJe=r(a6," (CvT model)"),a6.forEach(t),VJe=i(L),sm=n(L,"LI",{});var n6=s(sm);cne=n(n6,"STRONG",{});var P7e=s(cne);XJe=r(P7e,"data2vec-audio"),P7e.forEach(t),zJe=r(n6," \u2014 "),mR=n(n6,"A",{href:!0});var B7e=s(mR);QJe=r(B7e,"Data2VecAudioConfig"),B7e.forEach(t),WJe=r(n6," (Data2VecAudio model)"),n6.forEach(t),HJe=i(L),lm=n(L,"LI",{});var s6=s(lm);fne=n(s6,"STRONG",{});var N7e=s(fne);UJe=r(N7e,"data2vec-text"),N7e.forEach(t),JJe=r(s6," \u2014 "),gR=n(s6,"A",{href:!0});var I7e=s(gR);YJe=r(I7e,"Data2VecTextConfig"),I7e.forEach(t),KJe=r(s6," (Data2VecText model)"),s6.forEach(t),ZJe=i(L),im=n(L,"LI",{});var l6=s(im);mne=n(l6,"STRONG",{});var q7e=s(mne);eYe=r(q7e,"data2vec-vision"),q7e.forEach(t),oYe=r(l6," \u2014 "),hR=n(l6,"A",{href:!0});var j7e=s(hR);rYe=r(j7e,"Data2VecVisionConfig"),j7e.forEach(t),tYe=r(l6," (Data2VecVision model)"),l6.forEach(t),aYe=i(L),dm=n(L,"LI",{});var i6=s(dm);gne=n(i6,"STRONG",{});var D7e=s(gne);nYe=r(D7e,"deberta"),D7e.forEach(t),sYe=r(i6," \u2014 "),pR=n(i6,"A",{href:!0});var G7e=s(pR);lYe=r(G7e,"DebertaConfig"),G7e.forEach(t),iYe=r(i6," (DeBERTa model)"),i6.forEach(t),dYe=i(L),cm=n(L,"LI",{});var d6=s(cm);hne=n(d6,"STRONG",{});var O7e=s(hne);cYe=r(O7e,"deberta-v2"),O7e.forEach(t),fYe=r(d6," \u2014 "),_R=n(d6,"A",{href:!0});var V7e=s(_R);mYe=r(V7e,"DebertaV2Config"),V7e.forEach(t),gYe=r(d6," (DeBERTa-v2 model)"),d6.forEach(t),hYe=i(L),fm=n(L,"LI",{});var c6=s(fm);pne=n(c6,"STRONG",{});var Ytt=s(pne);pYe=r(Ytt,"decision_transformer"),Ytt.forEach(t),_Ye=r(c6," \u2014 "),uR=n(c6,"A",{href:!0});var Ktt=s(uR);uYe=r(Ktt,"DecisionTransformerConfig"),Ktt.forEach(t),bYe=r(c6," (Decision Transformer model)"),c6.forEach(t),vYe=i(L),mm=n(L,"LI",{});var X7e=s(mm);_ne=n(X7e,"STRONG",{});var Ztt=s(_ne);FYe=r(Ztt,"deit"),Ztt.forEach(t),TYe=r(X7e," \u2014 "),bR=n(X7e,"A",{href:!0});var eat=s(bR);MYe=r(eat,"DeiTConfig"),eat.forEach(t),EYe=r(X7e," (DeiT model)"),X7e.forEach(t),CYe=i(L),gm=n(L,"LI",{});var z7e=s(gm);une=n(z7e,"STRONG",{});var oat=s(une);wYe=r(oat,"detr"),oat.forEach(t),AYe=r(z7e," \u2014 "),vR=n(z7e,"A",{href:!0});var rat=s(vR);LYe=r(rat,"DetrConfig"),rat.forEach(t),yYe=r(z7e," (DETR model)"),z7e.forEach(t),xYe=i(L),hm=n(L,"LI",{});var Q7e=s(hm);bne=n(Q7e,"STRONG",{});var tat=s(bne);$Ye=r(tat,"distilbert"),tat.forEach(t),kYe=r(Q7e," \u2014 "),FR=n(Q7e,"A",{href:!0});var aat=s(FR);SYe=r(aat,"DistilBertConfig"),aat.forEach(t),RYe=r(Q7e," (DistilBERT model)"),Q7e.forEach(t),PYe=i(L),pm=n(L,"LI",{});var W7e=s(pm);vne=n(W7e,"STRONG",{});var nat=s(vne);BYe=r(nat,"dpr"),nat.forEach(t),NYe=r(W7e," \u2014 "),TR=n(W7e,"A",{href:!0});var sat=s(TR);IYe=r(sat,"DPRConfig"),sat.forEach(t),qYe=r(W7e," (DPR model)"),W7e.forEach(t),jYe=i(L),_m=n(L,"LI",{});var H7e=s(_m);Fne=n(H7e,"STRONG",{});var lat=s(Fne);DYe=r(lat,"dpt"),lat.forEach(t),GYe=r(H7e," \u2014 "),MR=n(H7e,"A",{href:!0});var iat=s(MR);OYe=r(iat,"DPTConfig"),iat.forEach(t),VYe=r(H7e," (DPT model)"),H7e.forEach(t),XYe=i(L),um=n(L,"LI",{});var U7e=s(um);Tne=n(U7e,"STRONG",{});var dat=s(Tne);zYe=r(dat,"electra"),dat.forEach(t),QYe=r(U7e," \u2014 "),ER=n(U7e,"A",{href:!0});var cat=s(ER);WYe=r(cat,"ElectraConfig"),cat.forEach(t),HYe=r(U7e," (ELECTRA model)"),U7e.forEach(t),UYe=i(L),bm=n(L,"LI",{});var J7e=s(bm);Mne=n(J7e,"STRONG",{});var fat=s(Mne);JYe=r(fat,"encoder-decoder"),fat.forEach(t),YYe=r(J7e," \u2014 "),CR=n(J7e,"A",{href:!0});var mat=s(CR);KYe=r(mat,"EncoderDecoderConfig"),mat.forEach(t),ZYe=r(J7e," (Encoder decoder model)"),J7e.forEach(t),eKe=i(L),vm=n(L,"LI",{});var Y7e=s(vm);Ene=n(Y7e,"STRONG",{});var gat=s(Ene);oKe=r(gat,"flaubert"),gat.forEach(t),rKe=r(Y7e," \u2014 "),wR=n(Y7e,"A",{href:!0});var hat=s(wR);tKe=r(hat,"FlaubertConfig"),hat.forEach(t),aKe=r(Y7e," (FlauBERT model)"),Y7e.forEach(t),nKe=i(L),Fm=n(L,"LI",{});var K7e=s(Fm);Cne=n(K7e,"STRONG",{});var pat=s(Cne);sKe=r(pat,"flava"),pat.forEach(t),lKe=r(K7e," \u2014 "),AR=n(K7e,"A",{href:!0});var _at=s(AR);iKe=r(_at,"FlavaConfig"),_at.forEach(t),dKe=r(K7e," (FLAVA model)"),K7e.forEach(t),cKe=i(L),Tm=n(L,"LI",{});var Z7e=s(Tm);wne=n(Z7e,"STRONG",{});var uat=s(wne);fKe=r(uat,"fnet"),uat.forEach(t),mKe=r(Z7e," \u2014 "),LR=n(Z7e,"A",{href:!0});var bat=s(LR);gKe=r(bat,"FNetConfig"),bat.forEach(t),hKe=r(Z7e," (FNet model)"),Z7e.forEach(t),pKe=i(L),Mm=n(L,"LI",{});var eLe=s(Mm);Ane=n(eLe,"STRONG",{});var vat=s(Ane);_Ke=r(vat,"fsmt"),vat.forEach(t),uKe=r(eLe," \u2014 "),yR=n(eLe,"A",{href:!0});var Fat=s(yR);bKe=r(Fat,"FSMTConfig"),Fat.forEach(t),vKe=r(eLe," (FairSeq Machine-Translation model)"),eLe.forEach(t),FKe=i(L),Em=n(L,"LI",{});var oLe=s(Em);Lne=n(oLe,"STRONG",{});var Tat=s(Lne);TKe=r(Tat,"funnel"),Tat.forEach(t),MKe=r(oLe," \u2014 "),xR=n(oLe,"A",{href:!0});var Mat=s(xR);EKe=r(Mat,"FunnelConfig"),Mat.forEach(t),CKe=r(oLe," (Funnel Transformer model)"),oLe.forEach(t),wKe=i(L),Cm=n(L,"LI",{});var rLe=s(Cm);yne=n(rLe,"STRONG",{});var Eat=s(yne);AKe=r(Eat,"glpn"),Eat.forEach(t),LKe=r(rLe," \u2014 "),$R=n(rLe,"A",{href:!0});var Cat=s($R);yKe=r(Cat,"GLPNConfig"),Cat.forEach(t),xKe=r(rLe," (GLPN model)"),rLe.forEach(t),$Ke=i(L),wm=n(L,"LI",{});var tLe=s(wm);xne=n(tLe,"STRONG",{});var wat=s(xne);kKe=r(wat,"gpt2"),wat.forEach(t),SKe=r(tLe," \u2014 "),kR=n(tLe,"A",{href:!0});var Aat=s(kR);RKe=r(Aat,"GPT2Config"),Aat.forEach(t),PKe=r(tLe," (OpenAI GPT-2 model)"),tLe.forEach(t),BKe=i(L),Am=n(L,"LI",{});var aLe=s(Am);$ne=n(aLe,"STRONG",{});var Lat=s($ne);NKe=r(Lat,"gpt_neo"),Lat.forEach(t),IKe=r(aLe," \u2014 "),SR=n(aLe,"A",{href:!0});var yat=s(SR);qKe=r(yat,"GPTNeoConfig"),yat.forEach(t),jKe=r(aLe," (GPT Neo model)"),aLe.forEach(t),DKe=i(L),Lm=n(L,"LI",{});var nLe=s(Lm);kne=n(nLe,"STRONG",{});var xat=s(kne);GKe=r(xat,"gpt_neox"),xat.forEach(t),OKe=r(nLe," \u2014 "),RR=n(nLe,"A",{href:!0});var $at=s(RR);VKe=r($at,"GPTNeoXConfig"),$at.forEach(t),XKe=r(nLe," (GPT NeoX model)"),nLe.forEach(t),zKe=i(L),ym=n(L,"LI",{});var sLe=s(ym);Sne=n(sLe,"STRONG",{});var kat=s(Sne);QKe=r(kat,"gptj"),kat.forEach(t),WKe=r(sLe," \u2014 "),PR=n(sLe,"A",{href:!0});var Sat=s(PR);HKe=r(Sat,"GPTJConfig"),Sat.forEach(t),UKe=r(sLe," (GPT-J model)"),sLe.forEach(t),JKe=i(L),xm=n(L,"LI",{});var lLe=s(xm);Rne=n(lLe,"STRONG",{});var Rat=s(Rne);YKe=r(Rat,"groupvit"),Rat.forEach(t),KKe=r(lLe," \u2014 "),BR=n(lLe,"A",{href:!0});var Pat=s(BR);ZKe=r(Pat,"GroupViTConfig"),Pat.forEach(t),eZe=r(lLe," (GroupViT model)"),lLe.forEach(t),oZe=i(L),$m=n(L,"LI",{});var iLe=s($m);Pne=n(iLe,"STRONG",{});var Bat=s(Pne);rZe=r(Bat,"hubert"),Bat.forEach(t),tZe=r(iLe," \u2014 "),NR=n(iLe,"A",{href:!0});var Nat=s(NR);aZe=r(Nat,"HubertConfig"),Nat.forEach(t),nZe=r(iLe," (Hubert model)"),iLe.forEach(t),sZe=i(L),km=n(L,"LI",{});var dLe=s(km);Bne=n(dLe,"STRONG",{});var Iat=s(Bne);lZe=r(Iat,"ibert"),Iat.forEach(t),iZe=r(dLe," \u2014 "),IR=n(dLe,"A",{href:!0});var qat=s(IR);dZe=r(qat,"IBertConfig"),qat.forEach(t),cZe=r(dLe," (I-BERT model)"),dLe.forEach(t),fZe=i(L),Sm=n(L,"LI",{});var cLe=s(Sm);Nne=n(cLe,"STRONG",{});var jat=s(Nne);mZe=r(jat,"imagegpt"),jat.forEach(t),gZe=r(cLe," \u2014 "),qR=n(cLe,"A",{href:!0});var Dat=s(qR);hZe=r(Dat,"ImageGPTConfig"),Dat.forEach(t),pZe=r(cLe," (ImageGPT model)"),cLe.forEach(t),_Ze=i(L),Rm=n(L,"LI",{});var fLe=s(Rm);Ine=n(fLe,"STRONG",{});var Gat=s(Ine);uZe=r(Gat,"layoutlm"),Gat.forEach(t),bZe=r(fLe," \u2014 "),jR=n(fLe,"A",{href:!0});var Oat=s(jR);vZe=r(Oat,"LayoutLMConfig"),Oat.forEach(t),FZe=r(fLe," (LayoutLM model)"),fLe.forEach(t),TZe=i(L),Pm=n(L,"LI",{});var mLe=s(Pm);qne=n(mLe,"STRONG",{});var Vat=s(qne);MZe=r(Vat,"layoutlmv2"),Vat.forEach(t),EZe=r(mLe," \u2014 "),DR=n(mLe,"A",{href:!0});var Xat=s(DR);CZe=r(Xat,"LayoutLMv2Config"),Xat.forEach(t),wZe=r(mLe," (LayoutLMv2 model)"),mLe.forEach(t),AZe=i(L),Bm=n(L,"LI",{});var gLe=s(Bm);jne=n(gLe,"STRONG",{});var zat=s(jne);LZe=r(zat,"layoutlmv3"),zat.forEach(t),yZe=r(gLe," \u2014 "),GR=n(gLe,"A",{href:!0});var Qat=s(GR);xZe=r(Qat,"LayoutLMv3Config"),Qat.forEach(t),$Ze=r(gLe," (LayoutLMv3 model)"),gLe.forEach(t),kZe=i(L),Nm=n(L,"LI",{});var hLe=s(Nm);Dne=n(hLe,"STRONG",{});var Wat=s(Dne);SZe=r(Wat,"led"),Wat.forEach(t),RZe=r(hLe," \u2014 "),OR=n(hLe,"A",{href:!0});var Hat=s(OR);PZe=r(Hat,"LEDConfig"),Hat.forEach(t),BZe=r(hLe," (LED model)"),hLe.forEach(t),NZe=i(L),Im=n(L,"LI",{});var pLe=s(Im);Gne=n(pLe,"STRONG",{});var Uat=s(Gne);IZe=r(Uat,"levit"),Uat.forEach(t),qZe=r(pLe," \u2014 "),VR=n(pLe,"A",{href:!0});var Jat=s(VR);jZe=r(Jat,"LevitConfig"),Jat.forEach(t),DZe=r(pLe," (LeViT model)"),pLe.forEach(t),GZe=i(L),qm=n(L,"LI",{});var _Le=s(qm);One=n(_Le,"STRONG",{});var Yat=s(One);OZe=r(Yat,"longformer"),Yat.forEach(t),VZe=r(_Le," \u2014 "),XR=n(_Le,"A",{href:!0});var Kat=s(XR);XZe=r(Kat,"LongformerConfig"),Kat.forEach(t),zZe=r(_Le," (Longformer model)"),_Le.forEach(t),QZe=i(L),jm=n(L,"LI",{});var uLe=s(jm);Vne=n(uLe,"STRONG",{});var Zat=s(Vne);WZe=r(Zat,"longt5"),Zat.forEach(t),HZe=r(uLe," \u2014 "),zR=n(uLe,"A",{href:!0});var ent=s(zR);UZe=r(ent,"LongT5Config"),ent.forEach(t),JZe=r(uLe," (LongT5 model)"),uLe.forEach(t),YZe=i(L),Dm=n(L,"LI",{});var bLe=s(Dm);Xne=n(bLe,"STRONG",{});var ont=s(Xne);KZe=r(ont,"luke"),ont.forEach(t),ZZe=r(bLe," \u2014 "),QR=n(bLe,"A",{href:!0});var rnt=s(QR);eeo=r(rnt,"LukeConfig"),rnt.forEach(t),oeo=r(bLe," (LUKE model)"),bLe.forEach(t),reo=i(L),Gm=n(L,"LI",{});var vLe=s(Gm);zne=n(vLe,"STRONG",{});var tnt=s(zne);teo=r(tnt,"lxmert"),tnt.forEach(t),aeo=r(vLe," \u2014 "),WR=n(vLe,"A",{href:!0});var ant=s(WR);neo=r(ant,"LxmertConfig"),ant.forEach(t),seo=r(vLe," (LXMERT model)"),vLe.forEach(t),leo=i(L),Om=n(L,"LI",{});var FLe=s(Om);Qne=n(FLe,"STRONG",{});var nnt=s(Qne);ieo=r(nnt,"m2m_100"),nnt.forEach(t),deo=r(FLe," \u2014 "),HR=n(FLe,"A",{href:!0});var snt=s(HR);ceo=r(snt,"M2M100Config"),snt.forEach(t),feo=r(FLe," (M2M100 model)"),FLe.forEach(t),meo=i(L),Vm=n(L,"LI",{});var TLe=s(Vm);Wne=n(TLe,"STRONG",{});var lnt=s(Wne);geo=r(lnt,"marian"),lnt.forEach(t),heo=r(TLe," \u2014 "),UR=n(TLe,"A",{href:!0});var int=s(UR);peo=r(int,"MarianConfig"),int.forEach(t),_eo=r(TLe," (Marian model)"),TLe.forEach(t),ueo=i(L),Xm=n(L,"LI",{});var MLe=s(Xm);Hne=n(MLe,"STRONG",{});var dnt=s(Hne);beo=r(dnt,"maskformer"),dnt.forEach(t),veo=r(MLe," \u2014 "),JR=n(MLe,"A",{href:!0});var cnt=s(JR);Feo=r(cnt,"MaskFormerConfig"),cnt.forEach(t),Teo=r(MLe," (MaskFormer model)"),MLe.forEach(t),Meo=i(L),zm=n(L,"LI",{});var ELe=s(zm);Une=n(ELe,"STRONG",{});var fnt=s(Une);Eeo=r(fnt,"mbart"),fnt.forEach(t),Ceo=r(ELe," \u2014 "),YR=n(ELe,"A",{href:!0});var mnt=s(YR);weo=r(mnt,"MBartConfig"),mnt.forEach(t),Aeo=r(ELe," (mBART model)"),ELe.forEach(t),Leo=i(L),Qm=n(L,"LI",{});var CLe=s(Qm);Jne=n(CLe,"STRONG",{});var gnt=s(Jne);yeo=r(gnt,"mctct"),gnt.forEach(t),xeo=r(CLe," \u2014 "),KR=n(CLe,"A",{href:!0});var hnt=s(KR);$eo=r(hnt,"MCTCTConfig"),hnt.forEach(t),keo=r(CLe," (M-CTC-T model)"),CLe.forEach(t),Seo=i(L),Wm=n(L,"LI",{});var wLe=s(Wm);Yne=n(wLe,"STRONG",{});var pnt=s(Yne);Reo=r(pnt,"megatron-bert"),pnt.forEach(t),Peo=r(wLe," \u2014 "),ZR=n(wLe,"A",{href:!0});var _nt=s(ZR);Beo=r(_nt,"MegatronBertConfig"),_nt.forEach(t),Neo=r(wLe," (Megatron-BERT model)"),wLe.forEach(t),Ieo=i(L),Hm=n(L,"LI",{});var ALe=s(Hm);Kne=n(ALe,"STRONG",{});var unt=s(Kne);qeo=r(unt,"mobilebert"),unt.forEach(t),jeo=r(ALe," \u2014 "),eP=n(ALe,"A",{href:!0});var bnt=s(eP);Deo=r(bnt,"MobileBertConfig"),bnt.forEach(t),Geo=r(ALe," (MobileBERT model)"),ALe.forEach(t),Oeo=i(L),Um=n(L,"LI",{});var LLe=s(Um);Zne=n(LLe,"STRONG",{});var vnt=s(Zne);Veo=r(vnt,"mobilevit"),vnt.forEach(t),Xeo=r(LLe," \u2014 "),oP=n(LLe,"A",{href:!0});var Fnt=s(oP);zeo=r(Fnt,"MobileViTConfig"),Fnt.forEach(t),Qeo=r(LLe," (MobileViT model)"),LLe.forEach(t),Weo=i(L),Jm=n(L,"LI",{});var yLe=s(Jm);ese=n(yLe,"STRONG",{});var Tnt=s(ese);Heo=r(Tnt,"mpnet"),Tnt.forEach(t),Ueo=r(yLe," \u2014 "),rP=n(yLe,"A",{href:!0});var Mnt=s(rP);Jeo=r(Mnt,"MPNetConfig"),Mnt.forEach(t),Yeo=r(yLe," (MPNet model)"),yLe.forEach(t),Keo=i(L),Ym=n(L,"LI",{});var xLe=s(Ym);ose=n(xLe,"STRONG",{});var Ent=s(ose);Zeo=r(Ent,"mt5"),Ent.forEach(t),eoo=r(xLe," \u2014 "),tP=n(xLe,"A",{href:!0});var Cnt=s(tP);ooo=r(Cnt,"MT5Config"),Cnt.forEach(t),roo=r(xLe," (MT5 model)"),xLe.forEach(t),too=i(L),Km=n(L,"LI",{});var $Le=s(Km);rse=n($Le,"STRONG",{});var wnt=s(rse);aoo=r(wnt,"mvp"),wnt.forEach(t),noo=r($Le," \u2014 "),aP=n($Le,"A",{href:!0});var Ant=s(aP);soo=r(Ant,"MvpConfig"),Ant.forEach(t),loo=r($Le," (MVP model)"),$Le.forEach(t),ioo=i(L),Zm=n(L,"LI",{});var kLe=s(Zm);tse=n(kLe,"STRONG",{});var Lnt=s(tse);doo=r(Lnt,"nezha"),Lnt.forEach(t),coo=r(kLe," \u2014 "),nP=n(kLe,"A",{href:!0});var ynt=s(nP);foo=r(ynt,"NezhaConfig"),ynt.forEach(t),moo=r(kLe," (Nezha model)"),kLe.forEach(t),goo=i(L),eg=n(L,"LI",{});var SLe=s(eg);ase=n(SLe,"STRONG",{});var xnt=s(ase);hoo=r(xnt,"nystromformer"),xnt.forEach(t),poo=r(SLe," \u2014 "),sP=n(SLe,"A",{href:!0});var $nt=s(sP);_oo=r($nt,"NystromformerConfig"),$nt.forEach(t),uoo=r(SLe," (Nystr\xF6mformer model)"),SLe.forEach(t),boo=i(L),og=n(L,"LI",{});var RLe=s(og);nse=n(RLe,"STRONG",{});var knt=s(nse);voo=r(knt,"openai-gpt"),knt.forEach(t),Foo=r(RLe," \u2014 "),lP=n(RLe,"A",{href:!0});var Snt=s(lP);Too=r(Snt,"OpenAIGPTConfig"),Snt.forEach(t),Moo=r(RLe," (OpenAI GPT model)"),RLe.forEach(t),Eoo=i(L),rg=n(L,"LI",{});var PLe=s(rg);sse=n(PLe,"STRONG",{});var Rnt=s(sse);Coo=r(Rnt,"opt"),Rnt.forEach(t),woo=r(PLe," \u2014 "),iP=n(PLe,"A",{href:!0});var Pnt=s(iP);Aoo=r(Pnt,"OPTConfig"),Pnt.forEach(t),Loo=r(PLe," (OPT model)"),PLe.forEach(t),yoo=i(L),tg=n(L,"LI",{});var BLe=s(tg);lse=n(BLe,"STRONG",{});var Bnt=s(lse);xoo=r(Bnt,"pegasus"),Bnt.forEach(t),$oo=r(BLe," \u2014 "),dP=n(BLe,"A",{href:!0});var Nnt=s(dP);koo=r(Nnt,"PegasusConfig"),Nnt.forEach(t),Soo=r(BLe," (Pegasus model)"),BLe.forEach(t),Roo=i(L),ag=n(L,"LI",{});var NLe=s(ag);ise=n(NLe,"STRONG",{});var Int=s(ise);Poo=r(Int,"perceiver"),Int.forEach(t),Boo=r(NLe," \u2014 "),cP=n(NLe,"A",{href:!0});var qnt=s(cP);Noo=r(qnt,"PerceiverConfig"),qnt.forEach(t),Ioo=r(NLe," (Perceiver model)"),NLe.forEach(t),qoo=i(L),ng=n(L,"LI",{});var ILe=s(ng);dse=n(ILe,"STRONG",{});var jnt=s(dse);joo=r(jnt,"plbart"),jnt.forEach(t),Doo=r(ILe," \u2014 "),fP=n(ILe,"A",{href:!0});var Dnt=s(fP);Goo=r(Dnt,"PLBartConfig"),Dnt.forEach(t),Ooo=r(ILe," (PLBart model)"),ILe.forEach(t),Voo=i(L),sg=n(L,"LI",{});var qLe=s(sg);cse=n(qLe,"STRONG",{});var Gnt=s(cse);Xoo=r(Gnt,"poolformer"),Gnt.forEach(t),zoo=r(qLe," \u2014 "),mP=n(qLe,"A",{href:!0});var Ont=s(mP);Qoo=r(Ont,"PoolFormerConfig"),Ont.forEach(t),Woo=r(qLe," (PoolFormer model)"),qLe.forEach(t),Hoo=i(L),lg=n(L,"LI",{});var jLe=s(lg);fse=n(jLe,"STRONG",{});var Vnt=s(fse);Uoo=r(Vnt,"prophetnet"),Vnt.forEach(t),Joo=r(jLe," \u2014 "),gP=n(jLe,"A",{href:!0});var Xnt=s(gP);Yoo=r(Xnt,"ProphetNetConfig"),Xnt.forEach(t),Koo=r(jLe," (ProphetNet model)"),jLe.forEach(t),Zoo=i(L),ig=n(L,"LI",{});var DLe=s(ig);mse=n(DLe,"STRONG",{});var znt=s(mse);ero=r(znt,"qdqbert"),znt.forEach(t),oro=r(DLe," \u2014 "),hP=n(DLe,"A",{href:!0});var Qnt=s(hP);rro=r(Qnt,"QDQBertConfig"),Qnt.forEach(t),tro=r(DLe," (QDQBert model)"),DLe.forEach(t),aro=i(L),dg=n(L,"LI",{});var GLe=s(dg);gse=n(GLe,"STRONG",{});var Wnt=s(gse);nro=r(Wnt,"rag"),Wnt.forEach(t),sro=r(GLe," \u2014 "),pP=n(GLe,"A",{href:!0});var Hnt=s(pP);lro=r(Hnt,"RagConfig"),Hnt.forEach(t),iro=r(GLe," (RAG model)"),GLe.forEach(t),dro=i(L),cg=n(L,"LI",{});var OLe=s(cg);hse=n(OLe,"STRONG",{});var Unt=s(hse);cro=r(Unt,"realm"),Unt.forEach(t),fro=r(OLe," \u2014 "),_P=n(OLe,"A",{href:!0});var Jnt=s(_P);mro=r(Jnt,"RealmConfig"),Jnt.forEach(t),gro=r(OLe," (REALM model)"),OLe.forEach(t),hro=i(L),fg=n(L,"LI",{});var VLe=s(fg);pse=n(VLe,"STRONG",{});var Ynt=s(pse);pro=r(Ynt,"reformer"),Ynt.forEach(t),_ro=r(VLe," \u2014 "),uP=n(VLe,"A",{href:!0});var Knt=s(uP);uro=r(Knt,"ReformerConfig"),Knt.forEach(t),bro=r(VLe," (Reformer model)"),VLe.forEach(t),vro=i(L),mg=n(L,"LI",{});var XLe=s(mg);_se=n(XLe,"STRONG",{});var Znt=s(_se);Fro=r(Znt,"regnet"),Znt.forEach(t),Tro=r(XLe," \u2014 "),bP=n(XLe,"A",{href:!0});var est=s(bP);Mro=r(est,"RegNetConfig"),est.forEach(t),Ero=r(XLe," (RegNet model)"),XLe.forEach(t),Cro=i(L),gg=n(L,"LI",{});var zLe=s(gg);use=n(zLe,"STRONG",{});var ost=s(use);wro=r(ost,"rembert"),ost.forEach(t),Aro=r(zLe," \u2014 "),vP=n(zLe,"A",{href:!0});var rst=s(vP);Lro=r(rst,"RemBertConfig"),rst.forEach(t),yro=r(zLe," (RemBERT model)"),zLe.forEach(t),xro=i(L),hg=n(L,"LI",{});var QLe=s(hg);bse=n(QLe,"STRONG",{});var tst=s(bse);$ro=r(tst,"resnet"),tst.forEach(t),kro=r(QLe," \u2014 "),FP=n(QLe,"A",{href:!0});var ast=s(FP);Sro=r(ast,"ResNetConfig"),ast.forEach(t),Rro=r(QLe," (ResNet model)"),QLe.forEach(t),Pro=i(L),pg=n(L,"LI",{});var WLe=s(pg);vse=n(WLe,"STRONG",{});var nst=s(vse);Bro=r(nst,"retribert"),nst.forEach(t),Nro=r(WLe," \u2014 "),TP=n(WLe,"A",{href:!0});var sst=s(TP);Iro=r(sst,"RetriBertConfig"),sst.forEach(t),qro=r(WLe," (RetriBERT model)"),WLe.forEach(t),jro=i(L),_g=n(L,"LI",{});var HLe=s(_g);Fse=n(HLe,"STRONG",{});var lst=s(Fse);Dro=r(lst,"roberta"),lst.forEach(t),Gro=r(HLe," \u2014 "),MP=n(HLe,"A",{href:!0});var ist=s(MP);Oro=r(ist,"RobertaConfig"),ist.forEach(t),Vro=r(HLe," (RoBERTa model)"),HLe.forEach(t),Xro=i(L),ug=n(L,"LI",{});var ULe=s(ug);Tse=n(ULe,"STRONG",{});var dst=s(Tse);zro=r(dst,"roformer"),dst.forEach(t),Qro=r(ULe," \u2014 "),EP=n(ULe,"A",{href:!0});var cst=s(EP);Wro=r(cst,"RoFormerConfig"),cst.forEach(t),Hro=r(ULe," (RoFormer model)"),ULe.forEach(t),Uro=i(L),bg=n(L,"LI",{});var JLe=s(bg);Mse=n(JLe,"STRONG",{});var fst=s(Mse);Jro=r(fst,"segformer"),fst.forEach(t),Yro=r(JLe," \u2014 "),CP=n(JLe,"A",{href:!0});var mst=s(CP);Kro=r(mst,"SegformerConfig"),mst.forEach(t),Zro=r(JLe," (SegFormer model)"),JLe.forEach(t),eto=i(L),vg=n(L,"LI",{});var YLe=s(vg);Ese=n(YLe,"STRONG",{});var gst=s(Ese);oto=r(gst,"sew"),gst.forEach(t),rto=r(YLe," \u2014 "),wP=n(YLe,"A",{href:!0});var hst=s(wP);tto=r(hst,"SEWConfig"),hst.forEach(t),ato=r(YLe," (SEW model)"),YLe.forEach(t),nto=i(L),Fg=n(L,"LI",{});var KLe=s(Fg);Cse=n(KLe,"STRONG",{});var pst=s(Cse);sto=r(pst,"sew-d"),pst.forEach(t),lto=r(KLe," \u2014 "),AP=n(KLe,"A",{href:!0});var _st=s(AP);ito=r(_st,"SEWDConfig"),_st.forEach(t),dto=r(KLe," (SEW-D model)"),KLe.forEach(t),cto=i(L),Tg=n(L,"LI",{});var ZLe=s(Tg);wse=n(ZLe,"STRONG",{});var ust=s(wse);fto=r(ust,"speech-encoder-decoder"),ust.forEach(t),mto=r(ZLe," \u2014 "),LP=n(ZLe,"A",{href:!0});var bst=s(LP);gto=r(bst,"SpeechEncoderDecoderConfig"),bst.forEach(t),hto=r(ZLe," (Speech Encoder decoder model)"),ZLe.forEach(t),pto=i(L),Mg=n(L,"LI",{});var eye=s(Mg);Ase=n(eye,"STRONG",{});var vst=s(Ase);_to=r(vst,"speech_to_text"),vst.forEach(t),uto=r(eye," \u2014 "),yP=n(eye,"A",{href:!0});var Fst=s(yP);bto=r(Fst,"Speech2TextConfig"),Fst.forEach(t),vto=r(eye," (Speech2Text model)"),eye.forEach(t),Fto=i(L),Eg=n(L,"LI",{});var oye=s(Eg);Lse=n(oye,"STRONG",{});var Tst=s(Lse);Tto=r(Tst,"speech_to_text_2"),Tst.forEach(t),Mto=r(oye," \u2014 "),xP=n(oye,"A",{href:!0});var Mst=s(xP);Eto=r(Mst,"Speech2Text2Config"),Mst.forEach(t),Cto=r(oye," (Speech2Text2 model)"),oye.forEach(t),wto=i(L),Cg=n(L,"LI",{});var rye=s(Cg);yse=n(rye,"STRONG",{});var Est=s(yse);Ato=r(Est,"splinter"),Est.forEach(t),Lto=r(rye," \u2014 "),$P=n(rye,"A",{href:!0});var Cst=s($P);yto=r(Cst,"SplinterConfig"),Cst.forEach(t),xto=r(rye," (Splinter model)"),rye.forEach(t),$to=i(L),wg=n(L,"LI",{});var tye=s(wg);xse=n(tye,"STRONG",{});var wst=s(xse);kto=r(wst,"squeezebert"),wst.forEach(t),Sto=r(tye," \u2014 "),kP=n(tye,"A",{href:!0});var Ast=s(kP);Rto=r(Ast,"SqueezeBertConfig"),Ast.forEach(t),Pto=r(tye," (SqueezeBERT model)"),tye.forEach(t),Bto=i(L),Ag=n(L,"LI",{});var aye=s(Ag);$se=n(aye,"STRONG",{});var Lst=s($se);Nto=r(Lst,"swin"),Lst.forEach(t),Ito=r(aye," \u2014 "),SP=n(aye,"A",{href:!0});var yst=s(SP);qto=r(yst,"SwinConfig"),yst.forEach(t),jto=r(aye," (Swin Transformer model)"),aye.forEach(t),Dto=i(L),Lg=n(L,"LI",{});var nye=s(Lg);kse=n(nye,"STRONG",{});var xst=s(kse);Gto=r(xst,"t5"),xst.forEach(t),Oto=r(nye," \u2014 "),RP=n(nye,"A",{href:!0});var $st=s(RP);Vto=r($st,"T5Config"),$st.forEach(t),Xto=r(nye," (T5 model)"),nye.forEach(t),zto=i(L),yg=n(L,"LI",{});var sye=s(yg);Sse=n(sye,"STRONG",{});var kst=s(Sse);Qto=r(kst,"tapas"),kst.forEach(t),Wto=r(sye," \u2014 "),PP=n(sye,"A",{href:!0});var Sst=s(PP);Hto=r(Sst,"TapasConfig"),Sst.forEach(t),Uto=r(sye," (TAPAS model)"),sye.forEach(t),Jto=i(L),xg=n(L,"LI",{});var lye=s(xg);Rse=n(lye,"STRONG",{});var Rst=s(Rse);Yto=r(Rst,"trajectory_transformer"),Rst.forEach(t),Kto=r(lye," \u2014 "),BP=n(lye,"A",{href:!0});var Pst=s(BP);Zto=r(Pst,"TrajectoryTransformerConfig"),Pst.forEach(t),eao=r(lye," (Trajectory Transformer model)"),lye.forEach(t),oao=i(L),$g=n(L,"LI",{});var iye=s($g);Pse=n(iye,"STRONG",{});var Bst=s(Pse);rao=r(Bst,"transfo-xl"),Bst.forEach(t),tao=r(iye," \u2014 "),NP=n(iye,"A",{href:!0});var Nst=s(NP);aao=r(Nst,"TransfoXLConfig"),Nst.forEach(t),nao=r(iye," (Transformer-XL model)"),iye.forEach(t),sao=i(L),kg=n(L,"LI",{});var dye=s(kg);Bse=n(dye,"STRONG",{});var Ist=s(Bse);lao=r(Ist,"trocr"),Ist.forEach(t),iao=r(dye," \u2014 "),IP=n(dye,"A",{href:!0});var qst=s(IP);dao=r(qst,"TrOCRConfig"),qst.forEach(t),cao=r(dye," (TrOCR model)"),dye.forEach(t),fao=i(L),Sg=n(L,"LI",{});var cye=s(Sg);Nse=n(cye,"STRONG",{});var jst=s(Nse);mao=r(jst,"unispeech"),jst.forEach(t),gao=r(cye," \u2014 "),qP=n(cye,"A",{href:!0});var Dst=s(qP);hao=r(Dst,"UniSpeechConfig"),Dst.forEach(t),pao=r(cye," (UniSpeech model)"),cye.forEach(t),_ao=i(L),Rg=n(L,"LI",{});var fye=s(Rg);Ise=n(fye,"STRONG",{});var Gst=s(Ise);uao=r(Gst,"unispeech-sat"),Gst.forEach(t),bao=r(fye," \u2014 "),jP=n(fye,"A",{href:!0});var Ost=s(jP);vao=r(Ost,"UniSpeechSatConfig"),Ost.forEach(t),Fao=r(fye," (UniSpeechSat model)"),fye.forEach(t),Tao=i(L),Pg=n(L,"LI",{});var mye=s(Pg);qse=n(mye,"STRONG",{});var Vst=s(qse);Mao=r(Vst,"van"),Vst.forEach(t),Eao=r(mye," \u2014 "),DP=n(mye,"A",{href:!0});var Xst=s(DP);Cao=r(Xst,"VanConfig"),Xst.forEach(t),wao=r(mye," (VAN model)"),mye.forEach(t),Aao=i(L),Bg=n(L,"LI",{});var gye=s(Bg);jse=n(gye,"STRONG",{});var zst=s(jse);Lao=r(zst,"vilt"),zst.forEach(t),yao=r(gye," \u2014 "),GP=n(gye,"A",{href:!0});var Qst=s(GP);xao=r(Qst,"ViltConfig"),Qst.forEach(t),$ao=r(gye," (ViLT model)"),gye.forEach(t),kao=i(L),Ng=n(L,"LI",{});var hye=s(Ng);Dse=n(hye,"STRONG",{});var Wst=s(Dse);Sao=r(Wst,"vision-encoder-decoder"),Wst.forEach(t),Rao=r(hye," \u2014 "),OP=n(hye,"A",{href:!0});var Hst=s(OP);Pao=r(Hst,"VisionEncoderDecoderConfig"),Hst.forEach(t),Bao=r(hye," (Vision Encoder decoder model)"),hye.forEach(t),Nao=i(L),Ig=n(L,"LI",{});var pye=s(Ig);Gse=n(pye,"STRONG",{});var Ust=s(Gse);Iao=r(Ust,"vision-text-dual-encoder"),Ust.forEach(t),qao=r(pye," \u2014 "),VP=n(pye,"A",{href:!0});var Jst=s(VP);jao=r(Jst,"VisionTextDualEncoderConfig"),Jst.forEach(t),Dao=r(pye," (VisionTextDualEncoder model)"),pye.forEach(t),Gao=i(L),qg=n(L,"LI",{});var _ye=s(qg);Ose=n(_ye,"STRONG",{});var Yst=s(Ose);Oao=r(Yst,"visual_bert"),Yst.forEach(t),Vao=r(_ye," \u2014 "),XP=n(_ye,"A",{href:!0});var Kst=s(XP);Xao=r(Kst,"VisualBertConfig"),Kst.forEach(t),zao=r(_ye," (VisualBERT model)"),_ye.forEach(t),Qao=i(L),jg=n(L,"LI",{});var uye=s(jg);Vse=n(uye,"STRONG",{});var Zst=s(Vse);Wao=r(Zst,"vit"),Zst.forEach(t),Hao=r(uye," \u2014 "),zP=n(uye,"A",{href:!0});var elt=s(zP);Uao=r(elt,"ViTConfig"),elt.forEach(t),Jao=r(uye," (ViT model)"),uye.forEach(t),Yao=i(L),Dg=n(L,"LI",{});var bye=s(Dg);Xse=n(bye,"STRONG",{});var olt=s(Xse);Kao=r(olt,"vit_mae"),olt.forEach(t),Zao=r(bye," \u2014 "),QP=n(bye,"A",{href:!0});var rlt=s(QP);eno=r(rlt,"ViTMAEConfig"),rlt.forEach(t),ono=r(bye," (ViTMAE model)"),bye.forEach(t),rno=i(L),Gg=n(L,"LI",{});var vye=s(Gg);zse=n(vye,"STRONG",{});var tlt=s(zse);tno=r(tlt,"wav2vec2"),tlt.forEach(t),ano=r(vye," \u2014 "),WP=n(vye,"A",{href:!0});var alt=s(WP);nno=r(alt,"Wav2Vec2Config"),alt.forEach(t),sno=r(vye," (Wav2Vec2 model)"),vye.forEach(t),lno=i(L),Og=n(L,"LI",{});var Fye=s(Og);Qse=n(Fye,"STRONG",{});var nlt=s(Qse);ino=r(nlt,"wav2vec2-conformer"),nlt.forEach(t),dno=r(Fye," \u2014 "),HP=n(Fye,"A",{href:!0});var slt=s(HP);cno=r(slt,"Wav2Vec2ConformerConfig"),slt.forEach(t),fno=r(Fye," (Wav2Vec2-Conformer model)"),Fye.forEach(t),mno=i(L),Vg=n(L,"LI",{});var Tye=s(Vg);Wse=n(Tye,"STRONG",{});var llt=s(Wse);gno=r(llt,"wavlm"),llt.forEach(t),hno=r(Tye," \u2014 "),UP=n(Tye,"A",{href:!0});var ilt=s(UP);pno=r(ilt,"WavLMConfig"),ilt.forEach(t),_no=r(Tye," (WavLM model)"),Tye.forEach(t),uno=i(L),Xg=n(L,"LI",{});var Mye=s(Xg);Hse=n(Mye,"STRONG",{});var dlt=s(Hse);bno=r(dlt,"xglm"),dlt.forEach(t),vno=r(Mye," \u2014 "),JP=n(Mye,"A",{href:!0});var clt=s(JP);Fno=r(clt,"XGLMConfig"),clt.forEach(t),Tno=r(Mye," (XGLM model)"),Mye.forEach(t),Mno=i(L),zg=n(L,"LI",{});var Eye=s(zg);Use=n(Eye,"STRONG",{});var flt=s(Use);Eno=r(flt,"xlm"),flt.forEach(t),Cno=r(Eye," \u2014 "),YP=n(Eye,"A",{href:!0});var mlt=s(YP);wno=r(mlt,"XLMConfig"),mlt.forEach(t),Ano=r(Eye," (XLM model)"),Eye.forEach(t),Lno=i(L),Qg=n(L,"LI",{});var Cye=s(Qg);Jse=n(Cye,"STRONG",{});var glt=s(Jse);yno=r(glt,"xlm-prophetnet"),glt.forEach(t),xno=r(Cye," \u2014 "),KP=n(Cye,"A",{href:!0});var hlt=s(KP);$no=r(hlt,"XLMProphetNetConfig"),hlt.forEach(t),kno=r(Cye," (XLM-ProphetNet model)"),Cye.forEach(t),Sno=i(L),Wg=n(L,"LI",{});var wye=s(Wg);Yse=n(wye,"STRONG",{});var plt=s(Yse);Rno=r(plt,"xlm-roberta"),plt.forEach(t),Pno=r(wye," \u2014 "),ZP=n(wye,"A",{href:!0});var _lt=s(ZP);Bno=r(_lt,"XLMRobertaConfig"),_lt.forEach(t),Nno=r(wye," (XLM-RoBERTa model)"),wye.forEach(t),Ino=i(L),Hg=n(L,"LI",{});var Aye=s(Hg);Kse=n(Aye,"STRONG",{});var ult=s(Kse);qno=r(ult,"xlm-roberta-xl"),ult.forEach(t),jno=r(Aye," \u2014 "),eB=n(Aye,"A",{href:!0});var blt=s(eB);Dno=r(blt,"XLMRobertaXLConfig"),blt.forEach(t),Gno=r(Aye," (XLM-RoBERTa-XL model)"),Aye.forEach(t),Ono=i(L),Ug=n(L,"LI",{});var Lye=s(Ug);Zse=n(Lye,"STRONG",{});var vlt=s(Zse);Vno=r(vlt,"xlnet"),vlt.forEach(t),Xno=r(Lye," \u2014 "),oB=n(Lye,"A",{href:!0});var Flt=s(oB);zno=r(Flt,"XLNetConfig"),Flt.forEach(t),Qno=r(Lye," (XLNet model)"),Lye.forEach(t),Wno=i(L),Jg=n(L,"LI",{});var yye=s(Jg);ele=n(yye,"STRONG",{});var Tlt=s(ele);Hno=r(Tlt,"yolos"),Tlt.forEach(t),Uno=r(yye," \u2014 "),rB=n(yye,"A",{href:!0});var Mlt=s(rB);Jno=r(Mlt,"YolosConfig"),Mlt.forEach(t),Yno=r(yye," (YOLOS model)"),yye.forEach(t),Kno=i(L),Yg=n(L,"LI",{});var xye=s(Yg);ole=n(xye,"STRONG",{});var Elt=s(ole);Zno=r(Elt,"yoso"),Elt.forEach(t),eso=r(xye," \u2014 "),tB=n(xye,"A",{href:!0});var Clt=s(tB);oso=r(Clt,"YosoConfig"),Clt.forEach(t),rso=r(xye," (YOSO model)"),xye.forEach(t),L.forEach(t),tso=i(st),T(Kg.$$.fragment,st),st.forEach(t),aso=i(nt),Zg=n(nt,"DIV",{class:!0});var CQe=s(Zg);T(_L.$$.fragment,CQe),nso=i(CQe),rle=n(CQe,"P",{});var wlt=s(rle);sso=r(wlt,"Register a new configuration for this class."),wlt.forEach(t),CQe.forEach(t),nt.forEach(t),wXe=i(f),qi=n(f,"H2",{class:!0});var wQe=s(qi);eh=n(wQe,"A",{id:!0,class:!0,href:!0});var Alt=s(eh);tle=n(Alt,"SPAN",{});var Llt=s(tle);T(uL.$$.fragment,Llt),Llt.forEach(t),Alt.forEach(t),lso=i(wQe),ale=n(wQe,"SPAN",{});var ylt=s(ale);iso=r(ylt,"AutoTokenizer"),ylt.forEach(t),wQe.forEach(t),AXe=i(f),Lo=n(f,"DIV",{class:!0});var Zs=s(Lo);T(bL.$$.fragment,Zs),dso=i(Zs),vL=n(Zs,"P",{});var AQe=s(vL);cso=r(AQe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),aB=n(AQe,"A",{href:!0});var xlt=s(aB);fso=r(xlt,"AutoTokenizer.from_pretrained()"),xlt.forEach(t),mso=r(AQe," class method."),AQe.forEach(t),gso=i(Zs),FL=n(Zs,"P",{});var LQe=s(FL);hso=r(LQe,"This class cannot be instantiated directly using "),nle=n(LQe,"CODE",{});var $lt=s(nle);pso=r($lt,"__init__()"),$lt.forEach(t),_so=r(LQe," (throws an error)."),LQe.forEach(t),uso=i(Zs),yr=n(Zs,"DIV",{class:!0});var el=s(yr);T(TL.$$.fragment,el),bso=i(el),sle=n(el,"P",{});var klt=s(sle);vso=r(klt,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),klt.forEach(t),Fso=i(el),Pa=n(el,"P",{});var f6=s(Pa);Tso=r(f6,"The tokenizer class to instantiate is selected based on the "),lle=n(f6,"CODE",{});var Slt=s(lle);Mso=r(Slt,"model_type"),Slt.forEach(t),Eso=r(f6,` property of the config object (either
passed as an argument or loaded from `),ile=n(f6,"CODE",{});var Rlt=s(ile);Cso=r(Rlt,"pretrained_model_name_or_path"),Rlt.forEach(t),wso=r(f6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dle=n(f6,"CODE",{});var Plt=s(dle);Aso=r(Plt,"pretrained_model_name_or_path"),Plt.forEach(t),Lso=r(f6,":"),f6.forEach(t),yso=i(el),k=n(el,"UL",{});var S=s(k);jn=n(S,"LI",{});var Lk=s(jn);cle=n(Lk,"STRONG",{});var Blt=s(cle);xso=r(Blt,"albert"),Blt.forEach(t),$so=r(Lk," \u2014 "),nB=n(Lk,"A",{href:!0});var Nlt=s(nB);kso=r(Nlt,"AlbertTokenizer"),Nlt.forEach(t),Sso=r(Lk," or "),sB=n(Lk,"A",{href:!0});var Ilt=s(sB);Rso=r(Ilt,"AlbertTokenizerFast"),Ilt.forEach(t),Pso=r(Lk," (ALBERT model)"),Lk.forEach(t),Bso=i(S),Dn=n(S,"LI",{});var yk=s(Dn);fle=n(yk,"STRONG",{});var qlt=s(fle);Nso=r(qlt,"bart"),qlt.forEach(t),Iso=r(yk," \u2014 "),lB=n(yk,"A",{href:!0});var jlt=s(lB);qso=r(jlt,"BartTokenizer"),jlt.forEach(t),jso=r(yk," or "),iB=n(yk,"A",{href:!0});var Dlt=s(iB);Dso=r(Dlt,"BartTokenizerFast"),Dlt.forEach(t),Gso=r(yk," (BART model)"),yk.forEach(t),Oso=i(S),Gn=n(S,"LI",{});var xk=s(Gn);mle=n(xk,"STRONG",{});var Glt=s(mle);Vso=r(Glt,"barthez"),Glt.forEach(t),Xso=r(xk," \u2014 "),dB=n(xk,"A",{href:!0});var Olt=s(dB);zso=r(Olt,"BarthezTokenizer"),Olt.forEach(t),Qso=r(xk," or "),cB=n(xk,"A",{href:!0});var Vlt=s(cB);Wso=r(Vlt,"BarthezTokenizerFast"),Vlt.forEach(t),Hso=r(xk," (BARThez model)"),xk.forEach(t),Uso=i(S),oh=n(S,"LI",{});var $ye=s(oh);gle=n($ye,"STRONG",{});var Xlt=s(gle);Jso=r(Xlt,"bartpho"),Xlt.forEach(t),Yso=r($ye," \u2014 "),fB=n($ye,"A",{href:!0});var zlt=s(fB);Kso=r(zlt,"BartphoTokenizer"),zlt.forEach(t),Zso=r($ye," (BARTpho model)"),$ye.forEach(t),elo=i(S),On=n(S,"LI",{});var $k=s(On);hle=n($k,"STRONG",{});var Qlt=s(hle);olo=r(Qlt,"bert"),Qlt.forEach(t),rlo=r($k," \u2014 "),mB=n($k,"A",{href:!0});var Wlt=s(mB);tlo=r(Wlt,"BertTokenizer"),Wlt.forEach(t),alo=r($k," or "),gB=n($k,"A",{href:!0});var Hlt=s(gB);nlo=r(Hlt,"BertTokenizerFast"),Hlt.forEach(t),slo=r($k," (BERT model)"),$k.forEach(t),llo=i(S),rh=n(S,"LI",{});var kye=s(rh);ple=n(kye,"STRONG",{});var Ult=s(ple);ilo=r(Ult,"bert-generation"),Ult.forEach(t),dlo=r(kye," \u2014 "),hB=n(kye,"A",{href:!0});var Jlt=s(hB);clo=r(Jlt,"BertGenerationTokenizer"),Jlt.forEach(t),flo=r(kye," (Bert Generation model)"),kye.forEach(t),mlo=i(S),th=n(S,"LI",{});var Sye=s(th);_le=n(Sye,"STRONG",{});var Ylt=s(_le);glo=r(Ylt,"bert-japanese"),Ylt.forEach(t),hlo=r(Sye," \u2014 "),pB=n(Sye,"A",{href:!0});var Klt=s(pB);plo=r(Klt,"BertJapaneseTokenizer"),Klt.forEach(t),_lo=r(Sye," (BertJapanese model)"),Sye.forEach(t),ulo=i(S),ah=n(S,"LI",{});var Rye=s(ah);ule=n(Rye,"STRONG",{});var Zlt=s(ule);blo=r(Zlt,"bertweet"),Zlt.forEach(t),vlo=r(Rye," \u2014 "),_B=n(Rye,"A",{href:!0});var eit=s(_B);Flo=r(eit,"BertweetTokenizer"),eit.forEach(t),Tlo=r(Rye," (BERTweet model)"),Rye.forEach(t),Mlo=i(S),Vn=n(S,"LI",{});var kk=s(Vn);ble=n(kk,"STRONG",{});var oit=s(ble);Elo=r(oit,"big_bird"),oit.forEach(t),Clo=r(kk," \u2014 "),uB=n(kk,"A",{href:!0});var rit=s(uB);wlo=r(rit,"BigBirdTokenizer"),rit.forEach(t),Alo=r(kk," or "),bB=n(kk,"A",{href:!0});var tit=s(bB);Llo=r(tit,"BigBirdTokenizerFast"),tit.forEach(t),ylo=r(kk," (BigBird model)"),kk.forEach(t),xlo=i(S),Xn=n(S,"LI",{});var Sk=s(Xn);vle=n(Sk,"STRONG",{});var ait=s(vle);$lo=r(ait,"bigbird_pegasus"),ait.forEach(t),klo=r(Sk," \u2014 "),vB=n(Sk,"A",{href:!0});var nit=s(vB);Slo=r(nit,"PegasusTokenizer"),nit.forEach(t),Rlo=r(Sk," or "),FB=n(Sk,"A",{href:!0});var sit=s(FB);Plo=r(sit,"PegasusTokenizerFast"),sit.forEach(t),Blo=r(Sk," (BigBird-Pegasus model)"),Sk.forEach(t),Nlo=i(S),zn=n(S,"LI",{});var Rk=s(zn);Fle=n(Rk,"STRONG",{});var lit=s(Fle);Ilo=r(lit,"blenderbot"),lit.forEach(t),qlo=r(Rk," \u2014 "),TB=n(Rk,"A",{href:!0});var iit=s(TB);jlo=r(iit,"BlenderbotTokenizer"),iit.forEach(t),Dlo=r(Rk," or "),MB=n(Rk,"A",{href:!0});var dit=s(MB);Glo=r(dit,"BlenderbotTokenizerFast"),dit.forEach(t),Olo=r(Rk," (Blenderbot model)"),Rk.forEach(t),Vlo=i(S),nh=n(S,"LI",{});var Pye=s(nh);Tle=n(Pye,"STRONG",{});var cit=s(Tle);Xlo=r(cit,"blenderbot-small"),cit.forEach(t),zlo=r(Pye," \u2014 "),EB=n(Pye,"A",{href:!0});var fit=s(EB);Qlo=r(fit,"BlenderbotSmallTokenizer"),fit.forEach(t),Wlo=r(Pye," (BlenderbotSmall model)"),Pye.forEach(t),Hlo=i(S),sh=n(S,"LI",{});var Bye=s(sh);Mle=n(Bye,"STRONG",{});var mit=s(Mle);Ulo=r(mit,"bloom"),mit.forEach(t),Jlo=r(Bye," \u2014 "),CB=n(Bye,"A",{href:!0});var git=s(CB);Ylo=r(git,"BloomTokenizerFast"),git.forEach(t),Klo=r(Bye," (BLOOM model)"),Bye.forEach(t),Zlo=i(S),lh=n(S,"LI",{});var Nye=s(lh);Ele=n(Nye,"STRONG",{});var hit=s(Ele);eio=r(hit,"byt5"),hit.forEach(t),oio=r(Nye," \u2014 "),wB=n(Nye,"A",{href:!0});var pit=s(wB);rio=r(pit,"ByT5Tokenizer"),pit.forEach(t),tio=r(Nye," (ByT5 model)"),Nye.forEach(t),aio=i(S),Qn=n(S,"LI",{});var Pk=s(Qn);Cle=n(Pk,"STRONG",{});var _it=s(Cle);nio=r(_it,"camembert"),_it.forEach(t),sio=r(Pk," \u2014 "),AB=n(Pk,"A",{href:!0});var uit=s(AB);lio=r(uit,"CamembertTokenizer"),uit.forEach(t),iio=r(Pk," or "),LB=n(Pk,"A",{href:!0});var bit=s(LB);dio=r(bit,"CamembertTokenizerFast"),bit.forEach(t),cio=r(Pk," (CamemBERT model)"),Pk.forEach(t),fio=i(S),ih=n(S,"LI",{});var Iye=s(ih);wle=n(Iye,"STRONG",{});var vit=s(wle);mio=r(vit,"canine"),vit.forEach(t),gio=r(Iye," \u2014 "),yB=n(Iye,"A",{href:!0});var Fit=s(yB);hio=r(Fit,"CanineTokenizer"),Fit.forEach(t),pio=r(Iye," (CANINE model)"),Iye.forEach(t),_io=i(S),Wn=n(S,"LI",{});var Bk=s(Wn);Ale=n(Bk,"STRONG",{});var Tit=s(Ale);uio=r(Tit,"clip"),Tit.forEach(t),bio=r(Bk," \u2014 "),xB=n(Bk,"A",{href:!0});var Mit=s(xB);vio=r(Mit,"CLIPTokenizer"),Mit.forEach(t),Fio=r(Bk," or "),$B=n(Bk,"A",{href:!0});var Eit=s($B);Tio=r(Eit,"CLIPTokenizerFast"),Eit.forEach(t),Mio=r(Bk," (CLIP model)"),Bk.forEach(t),Eio=i(S),Hn=n(S,"LI",{});var Nk=s(Hn);Lle=n(Nk,"STRONG",{});var Cit=s(Lle);Cio=r(Cit,"codegen"),Cit.forEach(t),wio=r(Nk," \u2014 "),kB=n(Nk,"A",{href:!0});var wit=s(kB);Aio=r(wit,"CodeGenTokenizer"),wit.forEach(t),Lio=r(Nk," or "),SB=n(Nk,"A",{href:!0});var Ait=s(SB);yio=r(Ait,"CodeGenTokenizerFast"),Ait.forEach(t),xio=r(Nk," (CodeGen model)"),Nk.forEach(t),$io=i(S),Un=n(S,"LI",{});var Ik=s(Un);yle=n(Ik,"STRONG",{});var Lit=s(yle);kio=r(Lit,"convbert"),Lit.forEach(t),Sio=r(Ik," \u2014 "),RB=n(Ik,"A",{href:!0});var yit=s(RB);Rio=r(yit,"ConvBertTokenizer"),yit.forEach(t),Pio=r(Ik," or "),PB=n(Ik,"A",{href:!0});var xit=s(PB);Bio=r(xit,"ConvBertTokenizerFast"),xit.forEach(t),Nio=r(Ik," (ConvBERT model)"),Ik.forEach(t),Iio=i(S),Jn=n(S,"LI",{});var qk=s(Jn);xle=n(qk,"STRONG",{});var $it=s(xle);qio=r($it,"cpm"),$it.forEach(t),jio=r(qk," \u2014 "),BB=n(qk,"A",{href:!0});var kit=s(BB);Dio=r(kit,"CpmTokenizer"),kit.forEach(t),Gio=r(qk," or "),NB=n(qk,"A",{href:!0});var Sit=s(NB);Oio=r(Sit,"CpmTokenizerFast"),Sit.forEach(t),Vio=r(qk," (CPM model)"),qk.forEach(t),Xio=i(S),dh=n(S,"LI",{});var qye=s(dh);$le=n(qye,"STRONG",{});var Rit=s($le);zio=r(Rit,"ctrl"),Rit.forEach(t),Qio=r(qye," \u2014 "),IB=n(qye,"A",{href:!0});var Pit=s(IB);Wio=r(Pit,"CTRLTokenizer"),Pit.forEach(t),Hio=r(qye," (CTRL model)"),qye.forEach(t),Uio=i(S),Yn=n(S,"LI",{});var jk=s(Yn);kle=n(jk,"STRONG",{});var Bit=s(kle);Jio=r(Bit,"data2vec-text"),Bit.forEach(t),Yio=r(jk," \u2014 "),qB=n(jk,"A",{href:!0});var Nit=s(qB);Kio=r(Nit,"RobertaTokenizer"),Nit.forEach(t),Zio=r(jk," or "),jB=n(jk,"A",{href:!0});var Iit=s(jB);edo=r(Iit,"RobertaTokenizerFast"),Iit.forEach(t),odo=r(jk," (Data2VecText model)"),jk.forEach(t),rdo=i(S),Kn=n(S,"LI",{});var Dk=s(Kn);Sle=n(Dk,"STRONG",{});var qit=s(Sle);tdo=r(qit,"deberta"),qit.forEach(t),ado=r(Dk," \u2014 "),DB=n(Dk,"A",{href:!0});var jit=s(DB);ndo=r(jit,"DebertaTokenizer"),jit.forEach(t),sdo=r(Dk," or "),GB=n(Dk,"A",{href:!0});var Dit=s(GB);ldo=r(Dit,"DebertaTokenizerFast"),Dit.forEach(t),ido=r(Dk," (DeBERTa model)"),Dk.forEach(t),ddo=i(S),Zn=n(S,"LI",{});var Gk=s(Zn);Rle=n(Gk,"STRONG",{});var Git=s(Rle);cdo=r(Git,"deberta-v2"),Git.forEach(t),fdo=r(Gk," \u2014 "),OB=n(Gk,"A",{href:!0});var Oit=s(OB);mdo=r(Oit,"DebertaV2Tokenizer"),Oit.forEach(t),gdo=r(Gk," or "),VB=n(Gk,"A",{href:!0});var Vit=s(VB);hdo=r(Vit,"DebertaV2TokenizerFast"),Vit.forEach(t),pdo=r(Gk," (DeBERTa-v2 model)"),Gk.forEach(t),_do=i(S),es=n(S,"LI",{});var Ok=s(es);Ple=n(Ok,"STRONG",{});var Xit=s(Ple);udo=r(Xit,"distilbert"),Xit.forEach(t),bdo=r(Ok," \u2014 "),XB=n(Ok,"A",{href:!0});var zit=s(XB);vdo=r(zit,"DistilBertTokenizer"),zit.forEach(t),Fdo=r(Ok," or "),zB=n(Ok,"A",{href:!0});var Qit=s(zB);Tdo=r(Qit,"DistilBertTokenizerFast"),Qit.forEach(t),Mdo=r(Ok," (DistilBERT model)"),Ok.forEach(t),Edo=i(S),os=n(S,"LI",{});var Vk=s(os);Ble=n(Vk,"STRONG",{});var Wit=s(Ble);Cdo=r(Wit,"dpr"),Wit.forEach(t),wdo=r(Vk," \u2014 "),QB=n(Vk,"A",{href:!0});var Hit=s(QB);Ado=r(Hit,"DPRQuestionEncoderTokenizer"),Hit.forEach(t),Ldo=r(Vk," or "),WB=n(Vk,"A",{href:!0});var Uit=s(WB);ydo=r(Uit,"DPRQuestionEncoderTokenizerFast"),Uit.forEach(t),xdo=r(Vk," (DPR model)"),Vk.forEach(t),$do=i(S),rs=n(S,"LI",{});var Xk=s(rs);Nle=n(Xk,"STRONG",{});var Jit=s(Nle);kdo=r(Jit,"electra"),Jit.forEach(t),Sdo=r(Xk," \u2014 "),HB=n(Xk,"A",{href:!0});var Yit=s(HB);Rdo=r(Yit,"ElectraTokenizer"),Yit.forEach(t),Pdo=r(Xk," or "),UB=n(Xk,"A",{href:!0});var Kit=s(UB);Bdo=r(Kit,"ElectraTokenizerFast"),Kit.forEach(t),Ndo=r(Xk," (ELECTRA model)"),Xk.forEach(t),Ido=i(S),ch=n(S,"LI",{});var jye=s(ch);Ile=n(jye,"STRONG",{});var Zit=s(Ile);qdo=r(Zit,"flaubert"),Zit.forEach(t),jdo=r(jye," \u2014 "),JB=n(jye,"A",{href:!0});var edt=s(JB);Ddo=r(edt,"FlaubertTokenizer"),edt.forEach(t),Gdo=r(jye," (FlauBERT model)"),jye.forEach(t),Odo=i(S),ts=n(S,"LI",{});var zk=s(ts);qle=n(zk,"STRONG",{});var odt=s(qle);Vdo=r(odt,"fnet"),odt.forEach(t),Xdo=r(zk," \u2014 "),YB=n(zk,"A",{href:!0});var rdt=s(YB);zdo=r(rdt,"FNetTokenizer"),rdt.forEach(t),Qdo=r(zk," or "),KB=n(zk,"A",{href:!0});var tdt=s(KB);Wdo=r(tdt,"FNetTokenizerFast"),tdt.forEach(t),Hdo=r(zk," (FNet model)"),zk.forEach(t),Udo=i(S),fh=n(S,"LI",{});var Dye=s(fh);jle=n(Dye,"STRONG",{});var adt=s(jle);Jdo=r(adt,"fsmt"),adt.forEach(t),Ydo=r(Dye," \u2014 "),ZB=n(Dye,"A",{href:!0});var ndt=s(ZB);Kdo=r(ndt,"FSMTTokenizer"),ndt.forEach(t),Zdo=r(Dye," (FairSeq Machine-Translation model)"),Dye.forEach(t),eco=i(S),as=n(S,"LI",{});var Qk=s(as);Dle=n(Qk,"STRONG",{});var sdt=s(Dle);oco=r(sdt,"funnel"),sdt.forEach(t),rco=r(Qk," \u2014 "),eN=n(Qk,"A",{href:!0});var ldt=s(eN);tco=r(ldt,"FunnelTokenizer"),ldt.forEach(t),aco=r(Qk," or "),oN=n(Qk,"A",{href:!0});var idt=s(oN);nco=r(idt,"FunnelTokenizerFast"),idt.forEach(t),sco=r(Qk," (Funnel Transformer model)"),Qk.forEach(t),lco=i(S),ns=n(S,"LI",{});var Wk=s(ns);Gle=n(Wk,"STRONG",{});var ddt=s(Gle);ico=r(ddt,"gpt2"),ddt.forEach(t),dco=r(Wk," \u2014 "),rN=n(Wk,"A",{href:!0});var cdt=s(rN);cco=r(cdt,"GPT2Tokenizer"),cdt.forEach(t),fco=r(Wk," or "),tN=n(Wk,"A",{href:!0});var fdt=s(tN);mco=r(fdt,"GPT2TokenizerFast"),fdt.forEach(t),gco=r(Wk," (OpenAI GPT-2 model)"),Wk.forEach(t),hco=i(S),ss=n(S,"LI",{});var Hk=s(ss);Ole=n(Hk,"STRONG",{});var mdt=s(Ole);pco=r(mdt,"gpt_neo"),mdt.forEach(t),_co=r(Hk," \u2014 "),aN=n(Hk,"A",{href:!0});var gdt=s(aN);uco=r(gdt,"GPT2Tokenizer"),gdt.forEach(t),bco=r(Hk," or "),nN=n(Hk,"A",{href:!0});var hdt=s(nN);vco=r(hdt,"GPT2TokenizerFast"),hdt.forEach(t),Fco=r(Hk," (GPT Neo model)"),Hk.forEach(t),Tco=i(S),mh=n(S,"LI",{});var Gye=s(mh);Vle=n(Gye,"STRONG",{});var pdt=s(Vle);Mco=r(pdt,"gpt_neox"),pdt.forEach(t),Eco=r(Gye," \u2014 "),sN=n(Gye,"A",{href:!0});var _dt=s(sN);Cco=r(_dt,"GPTNeoXTokenizerFast"),_dt.forEach(t),wco=r(Gye," (GPT NeoX model)"),Gye.forEach(t),Aco=i(S),ls=n(S,"LI",{});var Uk=s(ls);Xle=n(Uk,"STRONG",{});var udt=s(Xle);Lco=r(udt,"gptj"),udt.forEach(t),yco=r(Uk," \u2014 "),lN=n(Uk,"A",{href:!0});var bdt=s(lN);xco=r(bdt,"GPT2Tokenizer"),bdt.forEach(t),$co=r(Uk," or "),iN=n(Uk,"A",{href:!0});var vdt=s(iN);kco=r(vdt,"GPT2TokenizerFast"),vdt.forEach(t),Sco=r(Uk," (GPT-J model)"),Uk.forEach(t),Rco=i(S),is=n(S,"LI",{});var Jk=s(is);zle=n(Jk,"STRONG",{});var Fdt=s(zle);Pco=r(Fdt,"groupvit"),Fdt.forEach(t),Bco=r(Jk," \u2014 "),dN=n(Jk,"A",{href:!0});var Tdt=s(dN);Nco=r(Tdt,"CLIPTokenizer"),Tdt.forEach(t),Ico=r(Jk," or "),cN=n(Jk,"A",{href:!0});var Mdt=s(cN);qco=r(Mdt,"CLIPTokenizerFast"),Mdt.forEach(t),jco=r(Jk," (GroupViT model)"),Jk.forEach(t),Dco=i(S),ds=n(S,"LI",{});var Yk=s(ds);Qle=n(Yk,"STRONG",{});var Edt=s(Qle);Gco=r(Edt,"herbert"),Edt.forEach(t),Oco=r(Yk," \u2014 "),fN=n(Yk,"A",{href:!0});var Cdt=s(fN);Vco=r(Cdt,"HerbertTokenizer"),Cdt.forEach(t),Xco=r(Yk," or "),mN=n(Yk,"A",{href:!0});var wdt=s(mN);zco=r(wdt,"HerbertTokenizerFast"),wdt.forEach(t),Qco=r(Yk," (HerBERT model)"),Yk.forEach(t),Wco=i(S),gh=n(S,"LI",{});var Oye=s(gh);Wle=n(Oye,"STRONG",{});var Adt=s(Wle);Hco=r(Adt,"hubert"),Adt.forEach(t),Uco=r(Oye," \u2014 "),gN=n(Oye,"A",{href:!0});var Ldt=s(gN);Jco=r(Ldt,"Wav2Vec2CTCTokenizer"),Ldt.forEach(t),Yco=r(Oye," (Hubert model)"),Oye.forEach(t),Kco=i(S),cs=n(S,"LI",{});var Kk=s(cs);Hle=n(Kk,"STRONG",{});var ydt=s(Hle);Zco=r(ydt,"ibert"),ydt.forEach(t),efo=r(Kk," \u2014 "),hN=n(Kk,"A",{href:!0});var xdt=s(hN);ofo=r(xdt,"RobertaTokenizer"),xdt.forEach(t),rfo=r(Kk," or "),pN=n(Kk,"A",{href:!0});var $dt=s(pN);tfo=r($dt,"RobertaTokenizerFast"),$dt.forEach(t),afo=r(Kk," (I-BERT model)"),Kk.forEach(t),nfo=i(S),fs=n(S,"LI",{});var Zk=s(fs);Ule=n(Zk,"STRONG",{});var kdt=s(Ule);sfo=r(kdt,"layoutlm"),kdt.forEach(t),lfo=r(Zk," \u2014 "),_N=n(Zk,"A",{href:!0});var Sdt=s(_N);ifo=r(Sdt,"LayoutLMTokenizer"),Sdt.forEach(t),dfo=r(Zk," or "),uN=n(Zk,"A",{href:!0});var Rdt=s(uN);cfo=r(Rdt,"LayoutLMTokenizerFast"),Rdt.forEach(t),ffo=r(Zk," (LayoutLM model)"),Zk.forEach(t),mfo=i(S),ms=n(S,"LI",{});var eS=s(ms);Jle=n(eS,"STRONG",{});var Pdt=s(Jle);gfo=r(Pdt,"layoutlmv2"),Pdt.forEach(t),hfo=r(eS," \u2014 "),bN=n(eS,"A",{href:!0});var Bdt=s(bN);pfo=r(Bdt,"LayoutLMv2Tokenizer"),Bdt.forEach(t),_fo=r(eS," or "),vN=n(eS,"A",{href:!0});var Ndt=s(vN);ufo=r(Ndt,"LayoutLMv2TokenizerFast"),Ndt.forEach(t),bfo=r(eS," (LayoutLMv2 model)"),eS.forEach(t),vfo=i(S),gs=n(S,"LI",{});var oS=s(gs);Yle=n(oS,"STRONG",{});var Idt=s(Yle);Ffo=r(Idt,"layoutlmv3"),Idt.forEach(t),Tfo=r(oS," \u2014 "),FN=n(oS,"A",{href:!0});var qdt=s(FN);Mfo=r(qdt,"LayoutLMv3Tokenizer"),qdt.forEach(t),Efo=r(oS," or "),TN=n(oS,"A",{href:!0});var jdt=s(TN);Cfo=r(jdt,"LayoutLMv3TokenizerFast"),jdt.forEach(t),wfo=r(oS," (LayoutLMv3 model)"),oS.forEach(t),Afo=i(S),hs=n(S,"LI",{});var rS=s(hs);Kle=n(rS,"STRONG",{});var Ddt=s(Kle);Lfo=r(Ddt,"layoutxlm"),Ddt.forEach(t),yfo=r(rS," \u2014 "),MN=n(rS,"A",{href:!0});var Gdt=s(MN);xfo=r(Gdt,"LayoutXLMTokenizer"),Gdt.forEach(t),$fo=r(rS," or "),EN=n(rS,"A",{href:!0});var Odt=s(EN);kfo=r(Odt,"LayoutXLMTokenizerFast"),Odt.forEach(t),Sfo=r(rS," (LayoutXLM model)"),rS.forEach(t),Rfo=i(S),ps=n(S,"LI",{});var tS=s(ps);Zle=n(tS,"STRONG",{});var Vdt=s(Zle);Pfo=r(Vdt,"led"),Vdt.forEach(t),Bfo=r(tS," \u2014 "),CN=n(tS,"A",{href:!0});var Xdt=s(CN);Nfo=r(Xdt,"LEDTokenizer"),Xdt.forEach(t),Ifo=r(tS," or "),wN=n(tS,"A",{href:!0});var zdt=s(wN);qfo=r(zdt,"LEDTokenizerFast"),zdt.forEach(t),jfo=r(tS," (LED model)"),tS.forEach(t),Dfo=i(S),_s=n(S,"LI",{});var aS=s(_s);eie=n(aS,"STRONG",{});var Qdt=s(eie);Gfo=r(Qdt,"longformer"),Qdt.forEach(t),Ofo=r(aS," \u2014 "),AN=n(aS,"A",{href:!0});var Wdt=s(AN);Vfo=r(Wdt,"LongformerTokenizer"),Wdt.forEach(t),Xfo=r(aS," or "),LN=n(aS,"A",{href:!0});var Hdt=s(LN);zfo=r(Hdt,"LongformerTokenizerFast"),Hdt.forEach(t),Qfo=r(aS," (Longformer model)"),aS.forEach(t),Wfo=i(S),us=n(S,"LI",{});var nS=s(us);oie=n(nS,"STRONG",{});var Udt=s(oie);Hfo=r(Udt,"longt5"),Udt.forEach(t),Ufo=r(nS," \u2014 "),yN=n(nS,"A",{href:!0});var Jdt=s(yN);Jfo=r(Jdt,"T5Tokenizer"),Jdt.forEach(t),Yfo=r(nS," or "),xN=n(nS,"A",{href:!0});var Ydt=s(xN);Kfo=r(Ydt,"T5TokenizerFast"),Ydt.forEach(t),Zfo=r(nS," (LongT5 model)"),nS.forEach(t),emo=i(S),hh=n(S,"LI",{});var Vye=s(hh);rie=n(Vye,"STRONG",{});var Kdt=s(rie);omo=r(Kdt,"luke"),Kdt.forEach(t),rmo=r(Vye," \u2014 "),$N=n(Vye,"A",{href:!0});var Zdt=s($N);tmo=r(Zdt,"LukeTokenizer"),Zdt.forEach(t),amo=r(Vye," (LUKE model)"),Vye.forEach(t),nmo=i(S),bs=n(S,"LI",{});var sS=s(bs);tie=n(sS,"STRONG",{});var ect=s(tie);smo=r(ect,"lxmert"),ect.forEach(t),lmo=r(sS," \u2014 "),kN=n(sS,"A",{href:!0});var oct=s(kN);imo=r(oct,"LxmertTokenizer"),oct.forEach(t),dmo=r(sS," or "),SN=n(sS,"A",{href:!0});var rct=s(SN);cmo=r(rct,"LxmertTokenizerFast"),rct.forEach(t),fmo=r(sS," (LXMERT model)"),sS.forEach(t),mmo=i(S),ph=n(S,"LI",{});var Xye=s(ph);aie=n(Xye,"STRONG",{});var tct=s(aie);gmo=r(tct,"m2m_100"),tct.forEach(t),hmo=r(Xye," \u2014 "),RN=n(Xye,"A",{href:!0});var act=s(RN);pmo=r(act,"M2M100Tokenizer"),act.forEach(t),_mo=r(Xye," (M2M100 model)"),Xye.forEach(t),umo=i(S),_h=n(S,"LI",{});var zye=s(_h);nie=n(zye,"STRONG",{});var nct=s(nie);bmo=r(nct,"marian"),nct.forEach(t),vmo=r(zye," \u2014 "),PN=n(zye,"A",{href:!0});var sct=s(PN);Fmo=r(sct,"MarianTokenizer"),sct.forEach(t),Tmo=r(zye," (Marian model)"),zye.forEach(t),Mmo=i(S),vs=n(S,"LI",{});var lS=s(vs);sie=n(lS,"STRONG",{});var lct=s(sie);Emo=r(lct,"mbart"),lct.forEach(t),Cmo=r(lS," \u2014 "),BN=n(lS,"A",{href:!0});var ict=s(BN);wmo=r(ict,"MBartTokenizer"),ict.forEach(t),Amo=r(lS," or "),NN=n(lS,"A",{href:!0});var dct=s(NN);Lmo=r(dct,"MBartTokenizerFast"),dct.forEach(t),ymo=r(lS," (mBART model)"),lS.forEach(t),xmo=i(S),Fs=n(S,"LI",{});var iS=s(Fs);lie=n(iS,"STRONG",{});var cct=s(lie);$mo=r(cct,"mbart50"),cct.forEach(t),kmo=r(iS," \u2014 "),IN=n(iS,"A",{href:!0});var fct=s(IN);Smo=r(fct,"MBart50Tokenizer"),fct.forEach(t),Rmo=r(iS," or "),qN=n(iS,"A",{href:!0});var mct=s(qN);Pmo=r(mct,"MBart50TokenizerFast"),mct.forEach(t),Bmo=r(iS," (mBART-50 model)"),iS.forEach(t),Nmo=i(S),Ts=n(S,"LI",{});var dS=s(Ts);iie=n(dS,"STRONG",{});var gct=s(iie);Imo=r(gct,"megatron-bert"),gct.forEach(t),qmo=r(dS," \u2014 "),jN=n(dS,"A",{href:!0});var hct=s(jN);jmo=r(hct,"BertTokenizer"),hct.forEach(t),Dmo=r(dS," or "),DN=n(dS,"A",{href:!0});var pct=s(DN);Gmo=r(pct,"BertTokenizerFast"),pct.forEach(t),Omo=r(dS," (Megatron-BERT model)"),dS.forEach(t),Vmo=i(S),uh=n(S,"LI",{});var Qye=s(uh);die=n(Qye,"STRONG",{});var _ct=s(die);Xmo=r(_ct,"mluke"),_ct.forEach(t),zmo=r(Qye," \u2014 "),GN=n(Qye,"A",{href:!0});var uct=s(GN);Qmo=r(uct,"MLukeTokenizer"),uct.forEach(t),Wmo=r(Qye," (mLUKE model)"),Qye.forEach(t),Hmo=i(S),Ms=n(S,"LI",{});var cS=s(Ms);cie=n(cS,"STRONG",{});var bct=s(cie);Umo=r(bct,"mobilebert"),bct.forEach(t),Jmo=r(cS," \u2014 "),ON=n(cS,"A",{href:!0});var vct=s(ON);Ymo=r(vct,"MobileBertTokenizer"),vct.forEach(t),Kmo=r(cS," or "),VN=n(cS,"A",{href:!0});var Fct=s(VN);Zmo=r(Fct,"MobileBertTokenizerFast"),Fct.forEach(t),ego=r(cS," (MobileBERT model)"),cS.forEach(t),ogo=i(S),Es=n(S,"LI",{});var fS=s(Es);fie=n(fS,"STRONG",{});var Tct=s(fie);rgo=r(Tct,"mpnet"),Tct.forEach(t),tgo=r(fS," \u2014 "),XN=n(fS,"A",{href:!0});var Mct=s(XN);ago=r(Mct,"MPNetTokenizer"),Mct.forEach(t),ngo=r(fS," or "),zN=n(fS,"A",{href:!0});var Ect=s(zN);sgo=r(Ect,"MPNetTokenizerFast"),Ect.forEach(t),lgo=r(fS," (MPNet model)"),fS.forEach(t),igo=i(S),Cs=n(S,"LI",{});var mS=s(Cs);mie=n(mS,"STRONG",{});var Cct=s(mie);dgo=r(Cct,"mt5"),Cct.forEach(t),cgo=r(mS," \u2014 "),QN=n(mS,"A",{href:!0});var wct=s(QN);fgo=r(wct,"MT5Tokenizer"),wct.forEach(t),mgo=r(mS," or "),WN=n(mS,"A",{href:!0});var Act=s(WN);ggo=r(Act,"MT5TokenizerFast"),Act.forEach(t),hgo=r(mS," (MT5 model)"),mS.forEach(t),pgo=i(S),ws=n(S,"LI",{});var gS=s(ws);gie=n(gS,"STRONG",{});var Lct=s(gie);_go=r(Lct,"mvp"),Lct.forEach(t),ugo=r(gS," \u2014 "),HN=n(gS,"A",{href:!0});var yct=s(HN);bgo=r(yct,"MvpTokenizer"),yct.forEach(t),vgo=r(gS," or "),UN=n(gS,"A",{href:!0});var xct=s(UN);Fgo=r(xct,"MvpTokenizerFast"),xct.forEach(t),Tgo=r(gS," (MVP model)"),gS.forEach(t),Mgo=i(S),As=n(S,"LI",{});var hS=s(As);hie=n(hS,"STRONG",{});var $ct=s(hie);Ego=r($ct,"nezha"),$ct.forEach(t),Cgo=r(hS," \u2014 "),JN=n(hS,"A",{href:!0});var kct=s(JN);wgo=r(kct,"BertTokenizer"),kct.forEach(t),Ago=r(hS," or "),YN=n(hS,"A",{href:!0});var Sct=s(YN);Lgo=r(Sct,"BertTokenizerFast"),Sct.forEach(t),ygo=r(hS," (Nezha model)"),hS.forEach(t),xgo=i(S),Ls=n(S,"LI",{});var pS=s(Ls);pie=n(pS,"STRONG",{});var Rct=s(pie);$go=r(Rct,"nllb"),Rct.forEach(t),kgo=r(pS," \u2014 "),KN=n(pS,"A",{href:!0});var Pct=s(KN);Sgo=r(Pct,"NllbTokenizer"),Pct.forEach(t),Rgo=r(pS," or "),ZN=n(pS,"A",{href:!0});var Bct=s(ZN);Pgo=r(Bct,"NllbTokenizerFast"),Bct.forEach(t),Bgo=r(pS," (NLLB model)"),pS.forEach(t),Ngo=i(S),ys=n(S,"LI",{});var _S=s(ys);_ie=n(_S,"STRONG",{});var Nct=s(_ie);Igo=r(Nct,"nystromformer"),Nct.forEach(t),qgo=r(_S," \u2014 "),eI=n(_S,"A",{href:!0});var Ict=s(eI);jgo=r(Ict,"AlbertTokenizer"),Ict.forEach(t),Dgo=r(_S," or "),oI=n(_S,"A",{href:!0});var qct=s(oI);Ggo=r(qct,"AlbertTokenizerFast"),qct.forEach(t),Ogo=r(_S," (Nystr\xF6mformer model)"),_S.forEach(t),Vgo=i(S),xs=n(S,"LI",{});var uS=s(xs);uie=n(uS,"STRONG",{});var jct=s(uie);Xgo=r(jct,"openai-gpt"),jct.forEach(t),zgo=r(uS," \u2014 "),rI=n(uS,"A",{href:!0});var Dct=s(rI);Qgo=r(Dct,"OpenAIGPTTokenizer"),Dct.forEach(t),Wgo=r(uS," or "),tI=n(uS,"A",{href:!0});var Gct=s(tI);Hgo=r(Gct,"OpenAIGPTTokenizerFast"),Gct.forEach(t),Ugo=r(uS," (OpenAI GPT model)"),uS.forEach(t),Jgo=i(S),bh=n(S,"LI",{});var Wye=s(bh);bie=n(Wye,"STRONG",{});var Oct=s(bie);Ygo=r(Oct,"opt"),Oct.forEach(t),Kgo=r(Wye," \u2014 "),aI=n(Wye,"A",{href:!0});var Vct=s(aI);Zgo=r(Vct,"GPT2Tokenizer"),Vct.forEach(t),eho=r(Wye," (OPT model)"),Wye.forEach(t),oho=i(S),$s=n(S,"LI",{});var bS=s($s);vie=n(bS,"STRONG",{});var Xct=s(vie);rho=r(Xct,"pegasus"),Xct.forEach(t),tho=r(bS," \u2014 "),nI=n(bS,"A",{href:!0});var zct=s(nI);aho=r(zct,"PegasusTokenizer"),zct.forEach(t),nho=r(bS," or "),sI=n(bS,"A",{href:!0});var Qct=s(sI);sho=r(Qct,"PegasusTokenizerFast"),Qct.forEach(t),lho=r(bS," (Pegasus model)"),bS.forEach(t),iho=i(S),vh=n(S,"LI",{});var Hye=s(vh);Fie=n(Hye,"STRONG",{});var Wct=s(Fie);dho=r(Wct,"perceiver"),Wct.forEach(t),cho=r(Hye," \u2014 "),lI=n(Hye,"A",{href:!0});var Hct=s(lI);fho=r(Hct,"PerceiverTokenizer"),Hct.forEach(t),mho=r(Hye," (Perceiver model)"),Hye.forEach(t),gho=i(S),Fh=n(S,"LI",{});var Uye=s(Fh);Tie=n(Uye,"STRONG",{});var Uct=s(Tie);hho=r(Uct,"phobert"),Uct.forEach(t),pho=r(Uye," \u2014 "),iI=n(Uye,"A",{href:!0});var Jct=s(iI);_ho=r(Jct,"PhobertTokenizer"),Jct.forEach(t),uho=r(Uye," (PhoBERT model)"),Uye.forEach(t),bho=i(S),Th=n(S,"LI",{});var Jye=s(Th);Mie=n(Jye,"STRONG",{});var Yct=s(Mie);vho=r(Yct,"plbart"),Yct.forEach(t),Fho=r(Jye," \u2014 "),dI=n(Jye,"A",{href:!0});var Kct=s(dI);Tho=r(Kct,"PLBartTokenizer"),Kct.forEach(t),Mho=r(Jye," (PLBart model)"),Jye.forEach(t),Eho=i(S),Mh=n(S,"LI",{});var Yye=s(Mh);Eie=n(Yye,"STRONG",{});var Zct=s(Eie);Cho=r(Zct,"prophetnet"),Zct.forEach(t),who=r(Yye," \u2014 "),cI=n(Yye,"A",{href:!0});var eft=s(cI);Aho=r(eft,"ProphetNetTokenizer"),eft.forEach(t),Lho=r(Yye," (ProphetNet model)"),Yye.forEach(t),yho=i(S),ks=n(S,"LI",{});var vS=s(ks);Cie=n(vS,"STRONG",{});var oft=s(Cie);xho=r(oft,"qdqbert"),oft.forEach(t),$ho=r(vS," \u2014 "),fI=n(vS,"A",{href:!0});var rft=s(fI);kho=r(rft,"BertTokenizer"),rft.forEach(t),Sho=r(vS," or "),mI=n(vS,"A",{href:!0});var tft=s(mI);Rho=r(tft,"BertTokenizerFast"),tft.forEach(t),Pho=r(vS," (QDQBert model)"),vS.forEach(t),Bho=i(S),Eh=n(S,"LI",{});var Kye=s(Eh);wie=n(Kye,"STRONG",{});var aft=s(wie);Nho=r(aft,"rag"),aft.forEach(t),Iho=r(Kye," \u2014 "),gI=n(Kye,"A",{href:!0});var nft=s(gI);qho=r(nft,"RagTokenizer"),nft.forEach(t),jho=r(Kye," (RAG model)"),Kye.forEach(t),Dho=i(S),Ss=n(S,"LI",{});var FS=s(Ss);Aie=n(FS,"STRONG",{});var sft=s(Aie);Gho=r(sft,"realm"),sft.forEach(t),Oho=r(FS," \u2014 "),hI=n(FS,"A",{href:!0});var lft=s(hI);Vho=r(lft,"RealmTokenizer"),lft.forEach(t),Xho=r(FS," or "),pI=n(FS,"A",{href:!0});var ift=s(pI);zho=r(ift,"RealmTokenizerFast"),ift.forEach(t),Qho=r(FS," (REALM model)"),FS.forEach(t),Who=i(S),Rs=n(S,"LI",{});var TS=s(Rs);Lie=n(TS,"STRONG",{});var dft=s(Lie);Hho=r(dft,"reformer"),dft.forEach(t),Uho=r(TS," \u2014 "),_I=n(TS,"A",{href:!0});var cft=s(_I);Jho=r(cft,"ReformerTokenizer"),cft.forEach(t),Yho=r(TS," or "),uI=n(TS,"A",{href:!0});var fft=s(uI);Kho=r(fft,"ReformerTokenizerFast"),fft.forEach(t),Zho=r(TS," (Reformer model)"),TS.forEach(t),epo=i(S),Ps=n(S,"LI",{});var MS=s(Ps);yie=n(MS,"STRONG",{});var mft=s(yie);opo=r(mft,"rembert"),mft.forEach(t),rpo=r(MS," \u2014 "),bI=n(MS,"A",{href:!0});var gft=s(bI);tpo=r(gft,"RemBertTokenizer"),gft.forEach(t),apo=r(MS," or "),vI=n(MS,"A",{href:!0});var hft=s(vI);npo=r(hft,"RemBertTokenizerFast"),hft.forEach(t),spo=r(MS," (RemBERT model)"),MS.forEach(t),lpo=i(S),Bs=n(S,"LI",{});var ES=s(Bs);xie=n(ES,"STRONG",{});var pft=s(xie);ipo=r(pft,"retribert"),pft.forEach(t),dpo=r(ES," \u2014 "),FI=n(ES,"A",{href:!0});var _ft=s(FI);cpo=r(_ft,"RetriBertTokenizer"),_ft.forEach(t),fpo=r(ES," or "),TI=n(ES,"A",{href:!0});var uft=s(TI);mpo=r(uft,"RetriBertTokenizerFast"),uft.forEach(t),gpo=r(ES," (RetriBERT model)"),ES.forEach(t),hpo=i(S),Ns=n(S,"LI",{});var CS=s(Ns);$ie=n(CS,"STRONG",{});var bft=s($ie);ppo=r(bft,"roberta"),bft.forEach(t),_po=r(CS," \u2014 "),MI=n(CS,"A",{href:!0});var vft=s(MI);upo=r(vft,"RobertaTokenizer"),vft.forEach(t),bpo=r(CS," or "),EI=n(CS,"A",{href:!0});var Fft=s(EI);vpo=r(Fft,"RobertaTokenizerFast"),Fft.forEach(t),Fpo=r(CS," (RoBERTa model)"),CS.forEach(t),Tpo=i(S),Is=n(S,"LI",{});var wS=s(Is);kie=n(wS,"STRONG",{});var Tft=s(kie);Mpo=r(Tft,"roformer"),Tft.forEach(t),Epo=r(wS," \u2014 "),CI=n(wS,"A",{href:!0});var Mft=s(CI);Cpo=r(Mft,"RoFormerTokenizer"),Mft.forEach(t),wpo=r(wS," or "),wI=n(wS,"A",{href:!0});var Eft=s(wI);Apo=r(Eft,"RoFormerTokenizerFast"),Eft.forEach(t),Lpo=r(wS," (RoFormer model)"),wS.forEach(t),ypo=i(S),Ch=n(S,"LI",{});var Zye=s(Ch);Sie=n(Zye,"STRONG",{});var Cft=s(Sie);xpo=r(Cft,"speech_to_text"),Cft.forEach(t),$po=r(Zye," \u2014 "),AI=n(Zye,"A",{href:!0});var wft=s(AI);kpo=r(wft,"Speech2TextTokenizer"),wft.forEach(t),Spo=r(Zye," (Speech2Text model)"),Zye.forEach(t),Rpo=i(S),wh=n(S,"LI",{});var e9e=s(wh);Rie=n(e9e,"STRONG",{});var Aft=s(Rie);Ppo=r(Aft,"speech_to_text_2"),Aft.forEach(t),Bpo=r(e9e," \u2014 "),LI=n(e9e,"A",{href:!0});var Lft=s(LI);Npo=r(Lft,"Speech2Text2Tokenizer"),Lft.forEach(t),Ipo=r(e9e," (Speech2Text2 model)"),e9e.forEach(t),qpo=i(S),qs=n(S,"LI",{});var AS=s(qs);Pie=n(AS,"STRONG",{});var yft=s(Pie);jpo=r(yft,"splinter"),yft.forEach(t),Dpo=r(AS," \u2014 "),yI=n(AS,"A",{href:!0});var xft=s(yI);Gpo=r(xft,"SplinterTokenizer"),xft.forEach(t),Opo=r(AS," or "),xI=n(AS,"A",{href:!0});var $ft=s(xI);Vpo=r($ft,"SplinterTokenizerFast"),$ft.forEach(t),Xpo=r(AS," (Splinter model)"),AS.forEach(t),zpo=i(S),js=n(S,"LI",{});var LS=s(js);Bie=n(LS,"STRONG",{});var kft=s(Bie);Qpo=r(kft,"squeezebert"),kft.forEach(t),Wpo=r(LS," \u2014 "),$I=n(LS,"A",{href:!0});var Sft=s($I);Hpo=r(Sft,"SqueezeBertTokenizer"),Sft.forEach(t),Upo=r(LS," or "),kI=n(LS,"A",{href:!0});var Rft=s(kI);Jpo=r(Rft,"SqueezeBertTokenizerFast"),Rft.forEach(t),Ypo=r(LS," (SqueezeBERT model)"),LS.forEach(t),Kpo=i(S),Ds=n(S,"LI",{});var yS=s(Ds);Nie=n(yS,"STRONG",{});var Pft=s(Nie);Zpo=r(Pft,"t5"),Pft.forEach(t),e_o=r(yS," \u2014 "),SI=n(yS,"A",{href:!0});var Bft=s(SI);o_o=r(Bft,"T5Tokenizer"),Bft.forEach(t),r_o=r(yS," or "),RI=n(yS,"A",{href:!0});var Nft=s(RI);t_o=r(Nft,"T5TokenizerFast"),Nft.forEach(t),a_o=r(yS," (T5 model)"),yS.forEach(t),n_o=i(S),Ah=n(S,"LI",{});var o9e=s(Ah);Iie=n(o9e,"STRONG",{});var Ift=s(Iie);s_o=r(Ift,"tapas"),Ift.forEach(t),l_o=r(o9e," \u2014 "),PI=n(o9e,"A",{href:!0});var qft=s(PI);i_o=r(qft,"TapasTokenizer"),qft.forEach(t),d_o=r(o9e," (TAPAS model)"),o9e.forEach(t),c_o=i(S),Lh=n(S,"LI",{});var r9e=s(Lh);qie=n(r9e,"STRONG",{});var jft=s(qie);f_o=r(jft,"tapex"),jft.forEach(t),m_o=r(r9e," \u2014 "),BI=n(r9e,"A",{href:!0});var Dft=s(BI);g_o=r(Dft,"TapexTokenizer"),Dft.forEach(t),h_o=r(r9e," (TAPEX model)"),r9e.forEach(t),p_o=i(S),yh=n(S,"LI",{});var t9e=s(yh);jie=n(t9e,"STRONG",{});var Gft=s(jie);__o=r(Gft,"transfo-xl"),Gft.forEach(t),u_o=r(t9e," \u2014 "),NI=n(t9e,"A",{href:!0});var Oft=s(NI);b_o=r(Oft,"TransfoXLTokenizer"),Oft.forEach(t),v_o=r(t9e," (Transformer-XL model)"),t9e.forEach(t),F_o=i(S),Gs=n(S,"LI",{});var xS=s(Gs);Die=n(xS,"STRONG",{});var Vft=s(Die);T_o=r(Vft,"vilt"),Vft.forEach(t),M_o=r(xS," \u2014 "),II=n(xS,"A",{href:!0});var Xft=s(II);E_o=r(Xft,"BertTokenizer"),Xft.forEach(t),C_o=r(xS," or "),qI=n(xS,"A",{href:!0});var zft=s(qI);w_o=r(zft,"BertTokenizerFast"),zft.forEach(t),A_o=r(xS," (ViLT model)"),xS.forEach(t),L_o=i(S),Os=n(S,"LI",{});var $S=s(Os);Gie=n($S,"STRONG",{});var Qft=s(Gie);y_o=r(Qft,"visual_bert"),Qft.forEach(t),x_o=r($S," \u2014 "),jI=n($S,"A",{href:!0});var Wft=s(jI);$_o=r(Wft,"BertTokenizer"),Wft.forEach(t),k_o=r($S," or "),DI=n($S,"A",{href:!0});var Hft=s(DI);S_o=r(Hft,"BertTokenizerFast"),Hft.forEach(t),R_o=r($S," (VisualBERT model)"),$S.forEach(t),P_o=i(S),xh=n(S,"LI",{});var a9e=s(xh);Oie=n(a9e,"STRONG",{});var Uft=s(Oie);B_o=r(Uft,"wav2vec2"),Uft.forEach(t),N_o=r(a9e," \u2014 "),GI=n(a9e,"A",{href:!0});var Jft=s(GI);I_o=r(Jft,"Wav2Vec2CTCTokenizer"),Jft.forEach(t),q_o=r(a9e," (Wav2Vec2 model)"),a9e.forEach(t),j_o=i(S),$h=n(S,"LI",{});var n9e=s($h);Vie=n(n9e,"STRONG",{});var Yft=s(Vie);D_o=r(Yft,"wav2vec2-conformer"),Yft.forEach(t),G_o=r(n9e," \u2014 "),OI=n(n9e,"A",{href:!0});var Kft=s(OI);O_o=r(Kft,"Wav2Vec2CTCTokenizer"),Kft.forEach(t),V_o=r(n9e," (Wav2Vec2-Conformer model)"),n9e.forEach(t),X_o=i(S),kh=n(S,"LI",{});var s9e=s(kh);Xie=n(s9e,"STRONG",{});var Zft=s(Xie);z_o=r(Zft,"wav2vec2_phoneme"),Zft.forEach(t),Q_o=r(s9e," \u2014 "),VI=n(s9e,"A",{href:!0});var emt=s(VI);W_o=r(emt,"Wav2Vec2PhonemeCTCTokenizer"),emt.forEach(t),H_o=r(s9e," (Wav2Vec2Phoneme model)"),s9e.forEach(t),U_o=i(S),Vs=n(S,"LI",{});var kS=s(Vs);zie=n(kS,"STRONG",{});var omt=s(zie);J_o=r(omt,"xglm"),omt.forEach(t),Y_o=r(kS," \u2014 "),XI=n(kS,"A",{href:!0});var rmt=s(XI);K_o=r(rmt,"XGLMTokenizer"),rmt.forEach(t),Z_o=r(kS," or "),zI=n(kS,"A",{href:!0});var tmt=s(zI);euo=r(tmt,"XGLMTokenizerFast"),tmt.forEach(t),ouo=r(kS," (XGLM model)"),kS.forEach(t),ruo=i(S),Sh=n(S,"LI",{});var l9e=s(Sh);Qie=n(l9e,"STRONG",{});var amt=s(Qie);tuo=r(amt,"xlm"),amt.forEach(t),auo=r(l9e," \u2014 "),QI=n(l9e,"A",{href:!0});var nmt=s(QI);nuo=r(nmt,"XLMTokenizer"),nmt.forEach(t),suo=r(l9e," (XLM model)"),l9e.forEach(t),luo=i(S),Rh=n(S,"LI",{});var i9e=s(Rh);Wie=n(i9e,"STRONG",{});var smt=s(Wie);iuo=r(smt,"xlm-prophetnet"),smt.forEach(t),duo=r(i9e," \u2014 "),WI=n(i9e,"A",{href:!0});var lmt=s(WI);cuo=r(lmt,"XLMProphetNetTokenizer"),lmt.forEach(t),fuo=r(i9e," (XLM-ProphetNet model)"),i9e.forEach(t),muo=i(S),Xs=n(S,"LI",{});var SS=s(Xs);Hie=n(SS,"STRONG",{});var imt=s(Hie);guo=r(imt,"xlm-roberta"),imt.forEach(t),huo=r(SS," \u2014 "),HI=n(SS,"A",{href:!0});var dmt=s(HI);puo=r(dmt,"XLMRobertaTokenizer"),dmt.forEach(t),_uo=r(SS," or "),UI=n(SS,"A",{href:!0});var cmt=s(UI);uuo=r(cmt,"XLMRobertaTokenizerFast"),cmt.forEach(t),buo=r(SS," (XLM-RoBERTa model)"),SS.forEach(t),vuo=i(S),zs=n(S,"LI",{});var RS=s(zs);Uie=n(RS,"STRONG",{});var fmt=s(Uie);Fuo=r(fmt,"xlm-roberta-xl"),fmt.forEach(t),Tuo=r(RS," \u2014 "),JI=n(RS,"A",{href:!0});var mmt=s(JI);Muo=r(mmt,"RobertaTokenizer"),mmt.forEach(t),Euo=r(RS," or "),YI=n(RS,"A",{href:!0});var gmt=s(YI);Cuo=r(gmt,"RobertaTokenizerFast"),gmt.forEach(t),wuo=r(RS," (XLM-RoBERTa-XL model)"),RS.forEach(t),Auo=i(S),Qs=n(S,"LI",{});var PS=s(Qs);Jie=n(PS,"STRONG",{});var hmt=s(Jie);Luo=r(hmt,"xlnet"),hmt.forEach(t),yuo=r(PS," \u2014 "),KI=n(PS,"A",{href:!0});var pmt=s(KI);xuo=r(pmt,"XLNetTokenizer"),pmt.forEach(t),$uo=r(PS," or "),ZI=n(PS,"A",{href:!0});var _mt=s(ZI);kuo=r(_mt,"XLNetTokenizerFast"),_mt.forEach(t),Suo=r(PS," (XLNet model)"),PS.forEach(t),Ruo=i(S),Ws=n(S,"LI",{});var BS=s(Ws);Yie=n(BS,"STRONG",{});var umt=s(Yie);Puo=r(umt,"yoso"),umt.forEach(t),Buo=r(BS," \u2014 "),eq=n(BS,"A",{href:!0});var bmt=s(eq);Nuo=r(bmt,"AlbertTokenizer"),bmt.forEach(t),Iuo=r(BS," or "),oq=n(BS,"A",{href:!0});var vmt=s(oq);quo=r(vmt,"AlbertTokenizerFast"),vmt.forEach(t),juo=r(BS," (YOSO model)"),BS.forEach(t),S.forEach(t),Duo=i(el),T(Ph.$$.fragment,el),el.forEach(t),Guo=i(Zs),Bh=n(Zs,"DIV",{class:!0});var yQe=s(Bh);T(ML.$$.fragment,yQe),Ouo=i(yQe),Kie=n(yQe,"P",{});var Fmt=s(Kie);Vuo=r(Fmt,"Register a new tokenizer in this mapping."),Fmt.forEach(t),yQe.forEach(t),Zs.forEach(t),LXe=i(f),ji=n(f,"H2",{class:!0});var xQe=s(ji);Nh=n(xQe,"A",{id:!0,class:!0,href:!0});var Tmt=s(Nh);Zie=n(Tmt,"SPAN",{});var Mmt=s(Zie);T(EL.$$.fragment,Mmt),Mmt.forEach(t),Tmt.forEach(t),Xuo=i(xQe),ede=n(xQe,"SPAN",{});var Emt=s(ede);zuo=r(Emt,"AutoFeatureExtractor"),Emt.forEach(t),xQe.forEach(t),yXe=i(f),yo=n(f,"DIV",{class:!0});var ol=s(yo);T(CL.$$.fragment,ol),Quo=i(ol),wL=n(ol,"P",{});var $Qe=s(wL);Wuo=r($Qe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),rq=n($Qe,"A",{href:!0});var Cmt=s(rq);Huo=r(Cmt,"AutoFeatureExtractor.from_pretrained()"),Cmt.forEach(t),Uuo=r($Qe," class method."),$Qe.forEach(t),Juo=i(ol),AL=n(ol,"P",{});var kQe=s(AL);Yuo=r(kQe,"This class cannot be instantiated directly using "),ode=n(kQe,"CODE",{});var wmt=s(ode);Kuo=r(wmt,"__init__()"),wmt.forEach(t),Zuo=r(kQe," (throws an error)."),kQe.forEach(t),e2o=i(ol),Ue=n(ol,"DIV",{class:!0});var na=s(Ue);T(LL.$$.fragment,na),o2o=i(na),rde=n(na,"P",{});var Amt=s(rde);r2o=r(Amt,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Amt.forEach(t),t2o=i(na),Ba=n(na,"P",{});var m6=s(Ba);a2o=r(m6,"The feature extractor class to instantiate is selected based on the "),tde=n(m6,"CODE",{});var Lmt=s(tde);n2o=r(Lmt,"model_type"),Lmt.forEach(t),s2o=r(m6,` property of the config object
(either passed as an argument or loaded from `),ade=n(m6,"CODE",{});var ymt=s(ade);l2o=r(ymt,"pretrained_model_name_or_path"),ymt.forEach(t),i2o=r(m6,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),nde=n(m6,"CODE",{});var xmt=s(nde);d2o=r(xmt,"pretrained_model_name_or_path"),xmt.forEach(t),c2o=r(m6,":"),m6.forEach(t),f2o=i(na),Y=n(na,"UL",{});var K=s(Y);Ih=n(K,"LI",{});var d9e=s(Ih);sde=n(d9e,"STRONG",{});var $mt=s(sde);m2o=r($mt,"beit"),$mt.forEach(t),g2o=r(d9e," \u2014 "),tq=n(d9e,"A",{href:!0});var kmt=s(tq);h2o=r(kmt,"BeitFeatureExtractor"),kmt.forEach(t),p2o=r(d9e," (BEiT model)"),d9e.forEach(t),_2o=i(K),qh=n(K,"LI",{});var c9e=s(qh);lde=n(c9e,"STRONG",{});var Smt=s(lde);u2o=r(Smt,"clip"),Smt.forEach(t),b2o=r(c9e," \u2014 "),aq=n(c9e,"A",{href:!0});var Rmt=s(aq);v2o=r(Rmt,"CLIPFeatureExtractor"),Rmt.forEach(t),F2o=r(c9e," (CLIP model)"),c9e.forEach(t),T2o=i(K),jh=n(K,"LI",{});var f9e=s(jh);ide=n(f9e,"STRONG",{});var Pmt=s(ide);M2o=r(Pmt,"convnext"),Pmt.forEach(t),E2o=r(f9e," \u2014 "),nq=n(f9e,"A",{href:!0});var Bmt=s(nq);C2o=r(Bmt,"ConvNextFeatureExtractor"),Bmt.forEach(t),w2o=r(f9e," (ConvNeXT model)"),f9e.forEach(t),A2o=i(K),Dh=n(K,"LI",{});var m9e=s(Dh);dde=n(m9e,"STRONG",{});var Nmt=s(dde);L2o=r(Nmt,"cvt"),Nmt.forEach(t),y2o=r(m9e," \u2014 "),sq=n(m9e,"A",{href:!0});var Imt=s(sq);x2o=r(Imt,"ConvNextFeatureExtractor"),Imt.forEach(t),$2o=r(m9e," (CvT model)"),m9e.forEach(t),k2o=i(K),Gh=n(K,"LI",{});var g9e=s(Gh);cde=n(g9e,"STRONG",{});var qmt=s(cde);S2o=r(qmt,"data2vec-audio"),qmt.forEach(t),R2o=r(g9e," \u2014 "),lq=n(g9e,"A",{href:!0});var jmt=s(lq);P2o=r(jmt,"Wav2Vec2FeatureExtractor"),jmt.forEach(t),B2o=r(g9e," (Data2VecAudio model)"),g9e.forEach(t),N2o=i(K),Oh=n(K,"LI",{});var h9e=s(Oh);fde=n(h9e,"STRONG",{});var Dmt=s(fde);I2o=r(Dmt,"data2vec-vision"),Dmt.forEach(t),q2o=r(h9e," \u2014 "),iq=n(h9e,"A",{href:!0});var Gmt=s(iq);j2o=r(Gmt,"BeitFeatureExtractor"),Gmt.forEach(t),D2o=r(h9e," (Data2VecVision model)"),h9e.forEach(t),G2o=i(K),Vh=n(K,"LI",{});var p9e=s(Vh);mde=n(p9e,"STRONG",{});var Omt=s(mde);O2o=r(Omt,"deit"),Omt.forEach(t),V2o=r(p9e," \u2014 "),dq=n(p9e,"A",{href:!0});var Vmt=s(dq);X2o=r(Vmt,"DeiTFeatureExtractor"),Vmt.forEach(t),z2o=r(p9e," (DeiT model)"),p9e.forEach(t),Q2o=i(K),Xh=n(K,"LI",{});var _9e=s(Xh);gde=n(_9e,"STRONG",{});var Xmt=s(gde);W2o=r(Xmt,"detr"),Xmt.forEach(t),H2o=r(_9e," \u2014 "),cq=n(_9e,"A",{href:!0});var zmt=s(cq);U2o=r(zmt,"DetrFeatureExtractor"),zmt.forEach(t),J2o=r(_9e," (DETR model)"),_9e.forEach(t),Y2o=i(K),zh=n(K,"LI",{});var u9e=s(zh);hde=n(u9e,"STRONG",{});var Qmt=s(hde);K2o=r(Qmt,"dpt"),Qmt.forEach(t),Z2o=r(u9e," \u2014 "),fq=n(u9e,"A",{href:!0});var Wmt=s(fq);e1o=r(Wmt,"DPTFeatureExtractor"),Wmt.forEach(t),o1o=r(u9e," (DPT model)"),u9e.forEach(t),r1o=i(K),Qh=n(K,"LI",{});var b9e=s(Qh);pde=n(b9e,"STRONG",{});var Hmt=s(pde);t1o=r(Hmt,"flava"),Hmt.forEach(t),a1o=r(b9e," \u2014 "),mq=n(b9e,"A",{href:!0});var Umt=s(mq);n1o=r(Umt,"FlavaFeatureExtractor"),Umt.forEach(t),s1o=r(b9e," (FLAVA model)"),b9e.forEach(t),l1o=i(K),Wh=n(K,"LI",{});var v9e=s(Wh);_de=n(v9e,"STRONG",{});var Jmt=s(_de);i1o=r(Jmt,"glpn"),Jmt.forEach(t),d1o=r(v9e," \u2014 "),gq=n(v9e,"A",{href:!0});var Ymt=s(gq);c1o=r(Ymt,"GLPNFeatureExtractor"),Ymt.forEach(t),f1o=r(v9e," (GLPN model)"),v9e.forEach(t),m1o=i(K),Hh=n(K,"LI",{});var F9e=s(Hh);ude=n(F9e,"STRONG",{});var Kmt=s(ude);g1o=r(Kmt,"groupvit"),Kmt.forEach(t),h1o=r(F9e," \u2014 "),hq=n(F9e,"A",{href:!0});var Zmt=s(hq);p1o=r(Zmt,"CLIPFeatureExtractor"),Zmt.forEach(t),_1o=r(F9e," (GroupViT model)"),F9e.forEach(t),u1o=i(K),Uh=n(K,"LI",{});var T9e=s(Uh);bde=n(T9e,"STRONG",{});var egt=s(bde);b1o=r(egt,"hubert"),egt.forEach(t),v1o=r(T9e," \u2014 "),pq=n(T9e,"A",{href:!0});var ogt=s(pq);F1o=r(ogt,"Wav2Vec2FeatureExtractor"),ogt.forEach(t),T1o=r(T9e," (Hubert model)"),T9e.forEach(t),M1o=i(K),Jh=n(K,"LI",{});var M9e=s(Jh);vde=n(M9e,"STRONG",{});var rgt=s(vde);E1o=r(rgt,"imagegpt"),rgt.forEach(t),C1o=r(M9e," \u2014 "),_q=n(M9e,"A",{href:!0});var tgt=s(_q);w1o=r(tgt,"ImageGPTFeatureExtractor"),tgt.forEach(t),A1o=r(M9e," (ImageGPT model)"),M9e.forEach(t),L1o=i(K),Yh=n(K,"LI",{});var E9e=s(Yh);Fde=n(E9e,"STRONG",{});var agt=s(Fde);y1o=r(agt,"layoutlmv2"),agt.forEach(t),x1o=r(E9e," \u2014 "),uq=n(E9e,"A",{href:!0});var ngt=s(uq);$1o=r(ngt,"LayoutLMv2FeatureExtractor"),ngt.forEach(t),k1o=r(E9e," (LayoutLMv2 model)"),E9e.forEach(t),S1o=i(K),Kh=n(K,"LI",{});var C9e=s(Kh);Tde=n(C9e,"STRONG",{});var sgt=s(Tde);R1o=r(sgt,"layoutlmv3"),sgt.forEach(t),P1o=r(C9e," \u2014 "),bq=n(C9e,"A",{href:!0});var lgt=s(bq);B1o=r(lgt,"LayoutLMv3FeatureExtractor"),lgt.forEach(t),N1o=r(C9e," (LayoutLMv3 model)"),C9e.forEach(t),I1o=i(K),Zh=n(K,"LI",{});var w9e=s(Zh);Mde=n(w9e,"STRONG",{});var igt=s(Mde);q1o=r(igt,"levit"),igt.forEach(t),j1o=r(w9e," \u2014 "),vq=n(w9e,"A",{href:!0});var dgt=s(vq);D1o=r(dgt,"LevitFeatureExtractor"),dgt.forEach(t),G1o=r(w9e," (LeViT model)"),w9e.forEach(t),O1o=i(K),ep=n(K,"LI",{});var A9e=s(ep);Ede=n(A9e,"STRONG",{});var cgt=s(Ede);V1o=r(cgt,"maskformer"),cgt.forEach(t),X1o=r(A9e," \u2014 "),Fq=n(A9e,"A",{href:!0});var fgt=s(Fq);z1o=r(fgt,"MaskFormerFeatureExtractor"),fgt.forEach(t),Q1o=r(A9e," (MaskFormer model)"),A9e.forEach(t),W1o=i(K),op=n(K,"LI",{});var L9e=s(op);Cde=n(L9e,"STRONG",{});var mgt=s(Cde);H1o=r(mgt,"mctct"),mgt.forEach(t),U1o=r(L9e," \u2014 "),Tq=n(L9e,"A",{href:!0});var ggt=s(Tq);J1o=r(ggt,"MCTCTFeatureExtractor"),ggt.forEach(t),Y1o=r(L9e," (M-CTC-T model)"),L9e.forEach(t),K1o=i(K),rp=n(K,"LI",{});var y9e=s(rp);wde=n(y9e,"STRONG",{});var hgt=s(wde);Z1o=r(hgt,"mobilevit"),hgt.forEach(t),ebo=r(y9e," \u2014 "),Mq=n(y9e,"A",{href:!0});var pgt=s(Mq);obo=r(pgt,"MobileViTFeatureExtractor"),pgt.forEach(t),rbo=r(y9e," (MobileViT model)"),y9e.forEach(t),tbo=i(K),tp=n(K,"LI",{});var x9e=s(tp);Ade=n(x9e,"STRONG",{});var _gt=s(Ade);abo=r(_gt,"perceiver"),_gt.forEach(t),nbo=r(x9e," \u2014 "),Eq=n(x9e,"A",{href:!0});var ugt=s(Eq);sbo=r(ugt,"PerceiverFeatureExtractor"),ugt.forEach(t),lbo=r(x9e," (Perceiver model)"),x9e.forEach(t),ibo=i(K),ap=n(K,"LI",{});var $9e=s(ap);Lde=n($9e,"STRONG",{});var bgt=s(Lde);dbo=r(bgt,"poolformer"),bgt.forEach(t),cbo=r($9e," \u2014 "),Cq=n($9e,"A",{href:!0});var vgt=s(Cq);fbo=r(vgt,"PoolFormerFeatureExtractor"),vgt.forEach(t),mbo=r($9e," (PoolFormer model)"),$9e.forEach(t),gbo=i(K),np=n(K,"LI",{});var k9e=s(np);yde=n(k9e,"STRONG",{});var Fgt=s(yde);hbo=r(Fgt,"regnet"),Fgt.forEach(t),pbo=r(k9e," \u2014 "),wq=n(k9e,"A",{href:!0});var Tgt=s(wq);_bo=r(Tgt,"ConvNextFeatureExtractor"),Tgt.forEach(t),ubo=r(k9e," (RegNet model)"),k9e.forEach(t),bbo=i(K),sp=n(K,"LI",{});var S9e=s(sp);xde=n(S9e,"STRONG",{});var Mgt=s(xde);vbo=r(Mgt,"resnet"),Mgt.forEach(t),Fbo=r(S9e," \u2014 "),Aq=n(S9e,"A",{href:!0});var Egt=s(Aq);Tbo=r(Egt,"ConvNextFeatureExtractor"),Egt.forEach(t),Mbo=r(S9e," (ResNet model)"),S9e.forEach(t),Ebo=i(K),lp=n(K,"LI",{});var R9e=s(lp);$de=n(R9e,"STRONG",{});var Cgt=s($de);Cbo=r(Cgt,"segformer"),Cgt.forEach(t),wbo=r(R9e," \u2014 "),Lq=n(R9e,"A",{href:!0});var wgt=s(Lq);Abo=r(wgt,"SegformerFeatureExtractor"),wgt.forEach(t),Lbo=r(R9e," (SegFormer model)"),R9e.forEach(t),ybo=i(K),ip=n(K,"LI",{});var P9e=s(ip);kde=n(P9e,"STRONG",{});var Agt=s(kde);xbo=r(Agt,"speech_to_text"),Agt.forEach(t),$bo=r(P9e," \u2014 "),yq=n(P9e,"A",{href:!0});var Lgt=s(yq);kbo=r(Lgt,"Speech2TextFeatureExtractor"),Lgt.forEach(t),Sbo=r(P9e," (Speech2Text model)"),P9e.forEach(t),Rbo=i(K),dp=n(K,"LI",{});var B9e=s(dp);Sde=n(B9e,"STRONG",{});var ygt=s(Sde);Pbo=r(ygt,"swin"),ygt.forEach(t),Bbo=r(B9e," \u2014 "),xq=n(B9e,"A",{href:!0});var xgt=s(xq);Nbo=r(xgt,"ViTFeatureExtractor"),xgt.forEach(t),Ibo=r(B9e," (Swin Transformer model)"),B9e.forEach(t),qbo=i(K),cp=n(K,"LI",{});var N9e=s(cp);Rde=n(N9e,"STRONG",{});var $gt=s(Rde);jbo=r($gt,"van"),$gt.forEach(t),Dbo=r(N9e," \u2014 "),$q=n(N9e,"A",{href:!0});var kgt=s($q);Gbo=r(kgt,"ConvNextFeatureExtractor"),kgt.forEach(t),Obo=r(N9e," (VAN model)"),N9e.forEach(t),Vbo=i(K),fp=n(K,"LI",{});var I9e=s(fp);Pde=n(I9e,"STRONG",{});var Sgt=s(Pde);Xbo=r(Sgt,"vilt"),Sgt.forEach(t),zbo=r(I9e," \u2014 "),kq=n(I9e,"A",{href:!0});var Rgt=s(kq);Qbo=r(Rgt,"ViltFeatureExtractor"),Rgt.forEach(t),Wbo=r(I9e," (ViLT model)"),I9e.forEach(t),Hbo=i(K),mp=n(K,"LI",{});var q9e=s(mp);Bde=n(q9e,"STRONG",{});var Pgt=s(Bde);Ubo=r(Pgt,"vit"),Pgt.forEach(t),Jbo=r(q9e," \u2014 "),Sq=n(q9e,"A",{href:!0});var Bgt=s(Sq);Ybo=r(Bgt,"ViTFeatureExtractor"),Bgt.forEach(t),Kbo=r(q9e," (ViT model)"),q9e.forEach(t),Zbo=i(K),gp=n(K,"LI",{});var j9e=s(gp);Nde=n(j9e,"STRONG",{});var Ngt=s(Nde);evo=r(Ngt,"vit_mae"),Ngt.forEach(t),ovo=r(j9e," \u2014 "),Rq=n(j9e,"A",{href:!0});var Igt=s(Rq);rvo=r(Igt,"ViTFeatureExtractor"),Igt.forEach(t),tvo=r(j9e," (ViTMAE model)"),j9e.forEach(t),avo=i(K),hp=n(K,"LI",{});var D9e=s(hp);Ide=n(D9e,"STRONG",{});var qgt=s(Ide);nvo=r(qgt,"wav2vec2"),qgt.forEach(t),svo=r(D9e," \u2014 "),Pq=n(D9e,"A",{href:!0});var jgt=s(Pq);lvo=r(jgt,"Wav2Vec2FeatureExtractor"),jgt.forEach(t),ivo=r(D9e," (Wav2Vec2 model)"),D9e.forEach(t),dvo=i(K),pp=n(K,"LI",{});var G9e=s(pp);qde=n(G9e,"STRONG",{});var Dgt=s(qde);cvo=r(Dgt,"wav2vec2-conformer"),Dgt.forEach(t),fvo=r(G9e," \u2014 "),Bq=n(G9e,"A",{href:!0});var Ggt=s(Bq);mvo=r(Ggt,"Wav2Vec2FeatureExtractor"),Ggt.forEach(t),gvo=r(G9e," (Wav2Vec2-Conformer model)"),G9e.forEach(t),hvo=i(K),_p=n(K,"LI",{});var O9e=s(_p);jde=n(O9e,"STRONG",{});var Ogt=s(jde);pvo=r(Ogt,"yolos"),Ogt.forEach(t),_vo=r(O9e," \u2014 "),Nq=n(O9e,"A",{href:!0});var Vgt=s(Nq);uvo=r(Vgt,"YolosFeatureExtractor"),Vgt.forEach(t),bvo=r(O9e," (YOLOS model)"),O9e.forEach(t),K.forEach(t),vvo=i(na),T(up.$$.fragment,na),Fvo=i(na),T(bp.$$.fragment,na),na.forEach(t),Tvo=i(ol),vp=n(ol,"DIV",{class:!0});var SQe=s(vp);T(yL.$$.fragment,SQe),Mvo=i(SQe),Dde=n(SQe,"P",{});var Xgt=s(Dde);Evo=r(Xgt,"Register a new feature extractor for this class."),Xgt.forEach(t),SQe.forEach(t),ol.forEach(t),xXe=i(f),Di=n(f,"H2",{class:!0});var RQe=s(Di);Fp=n(RQe,"A",{id:!0,class:!0,href:!0});var zgt=s(Fp);Gde=n(zgt,"SPAN",{});var Qgt=s(Gde);T(xL.$$.fragment,Qgt),Qgt.forEach(t),zgt.forEach(t),Cvo=i(RQe),Ode=n(RQe,"SPAN",{});var Wgt=s(Ode);wvo=r(Wgt,"AutoProcessor"),Wgt.forEach(t),RQe.forEach(t),$Xe=i(f),xo=n(f,"DIV",{class:!0});var rl=s(xo);T($L.$$.fragment,rl),Avo=i(rl),kL=n(rl,"P",{});var PQe=s(kL);Lvo=r(PQe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),Iq=n(PQe,"A",{href:!0});var Hgt=s(Iq);yvo=r(Hgt,"AutoProcessor.from_pretrained()"),Hgt.forEach(t),xvo=r(PQe," class method."),PQe.forEach(t),$vo=i(rl),SL=n(rl,"P",{});var BQe=s(SL);kvo=r(BQe,"This class cannot be instantiated directly using "),Vde=n(BQe,"CODE",{});var Ugt=s(Vde);Svo=r(Ugt,"__init__()"),Ugt.forEach(t),Rvo=r(BQe," (throws an error)."),BQe.forEach(t),Pvo=i(rl),Je=n(rl,"DIV",{class:!0});var sa=s(Je);T(RL.$$.fragment,sa),Bvo=i(sa),Xde=n(sa,"P",{});var Jgt=s(Xde);Nvo=r(Jgt,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Jgt.forEach(t),Ivo=i(sa),Gi=n(sa,"P",{});var Ore=s(Gi);qvo=r(Ore,"The processor class to instantiate is selected based on the "),zde=n(Ore,"CODE",{});var Ygt=s(zde);jvo=r(Ygt,"model_type"),Ygt.forEach(t),Dvo=r(Ore,` property of the config object (either
passed as an argument or loaded from `),Qde=n(Ore,"CODE",{});var Kgt=s(Qde);Gvo=r(Kgt,"pretrained_model_name_or_path"),Kgt.forEach(t),Ovo=r(Ore," if possible):"),Ore.forEach(t),Vvo=i(sa),pe=n(sa,"UL",{});var be=s(pe);Tp=n(be,"LI",{});var V9e=s(Tp);Wde=n(V9e,"STRONG",{});var Zgt=s(Wde);Xvo=r(Zgt,"clip"),Zgt.forEach(t),zvo=r(V9e," \u2014 "),qq=n(V9e,"A",{href:!0});var eht=s(qq);Qvo=r(eht,"CLIPProcessor"),eht.forEach(t),Wvo=r(V9e," (CLIP model)"),V9e.forEach(t),Hvo=i(be),Mp=n(be,"LI",{});var X9e=s(Mp);Hde=n(X9e,"STRONG",{});var oht=s(Hde);Uvo=r(oht,"flava"),oht.forEach(t),Jvo=r(X9e," \u2014 "),Ude=n(X9e,"CODE",{});var rht=s(Ude);Yvo=r(rht,"FLAVAProcessor"),rht.forEach(t),Kvo=r(X9e," (FLAVA model)"),X9e.forEach(t),Zvo=i(be),Ep=n(be,"LI",{});var z9e=s(Ep);Jde=n(z9e,"STRONG",{});var tht=s(Jde);e0o=r(tht,"groupvit"),tht.forEach(t),o0o=r(z9e," \u2014 "),jq=n(z9e,"A",{href:!0});var aht=s(jq);r0o=r(aht,"CLIPProcessor"),aht.forEach(t),t0o=r(z9e," (GroupViT model)"),z9e.forEach(t),a0o=i(be),Cp=n(be,"LI",{});var Q9e=s(Cp);Yde=n(Q9e,"STRONG",{});var nht=s(Yde);n0o=r(nht,"layoutlmv2"),nht.forEach(t),s0o=r(Q9e," \u2014 "),Dq=n(Q9e,"A",{href:!0});var sht=s(Dq);l0o=r(sht,"LayoutLMv2Processor"),sht.forEach(t),i0o=r(Q9e," (LayoutLMv2 model)"),Q9e.forEach(t),d0o=i(be),wp=n(be,"LI",{});var W9e=s(wp);Kde=n(W9e,"STRONG",{});var lht=s(Kde);c0o=r(lht,"layoutlmv3"),lht.forEach(t),f0o=r(W9e," \u2014 "),Gq=n(W9e,"A",{href:!0});var iht=s(Gq);m0o=r(iht,"LayoutLMv3Processor"),iht.forEach(t),g0o=r(W9e," (LayoutLMv3 model)"),W9e.forEach(t),h0o=i(be),Ap=n(be,"LI",{});var H9e=s(Ap);Zde=n(H9e,"STRONG",{});var dht=s(Zde);p0o=r(dht,"layoutxlm"),dht.forEach(t),_0o=r(H9e," \u2014 "),Oq=n(H9e,"A",{href:!0});var cht=s(Oq);u0o=r(cht,"LayoutXLMProcessor"),cht.forEach(t),b0o=r(H9e," (LayoutXLM model)"),H9e.forEach(t),v0o=i(be),Lp=n(be,"LI",{});var U9e=s(Lp);ece=n(U9e,"STRONG",{});var fht=s(ece);F0o=r(fht,"sew"),fht.forEach(t),T0o=r(U9e," \u2014 "),Vq=n(U9e,"A",{href:!0});var mht=s(Vq);M0o=r(mht,"Wav2Vec2Processor"),mht.forEach(t),E0o=r(U9e," (SEW model)"),U9e.forEach(t),C0o=i(be),yp=n(be,"LI",{});var J9e=s(yp);oce=n(J9e,"STRONG",{});var ght=s(oce);w0o=r(ght,"sew-d"),ght.forEach(t),A0o=r(J9e," \u2014 "),Xq=n(J9e,"A",{href:!0});var hht=s(Xq);L0o=r(hht,"Wav2Vec2Processor"),hht.forEach(t),y0o=r(J9e," (SEW-D model)"),J9e.forEach(t),x0o=i(be),xp=n(be,"LI",{});var Y9e=s(xp);rce=n(Y9e,"STRONG",{});var pht=s(rce);$0o=r(pht,"speech_to_text"),pht.forEach(t),k0o=r(Y9e," \u2014 "),zq=n(Y9e,"A",{href:!0});var _ht=s(zq);S0o=r(_ht,"Speech2TextProcessor"),_ht.forEach(t),R0o=r(Y9e," (Speech2Text model)"),Y9e.forEach(t),P0o=i(be),$p=n(be,"LI",{});var K9e=s($p);tce=n(K9e,"STRONG",{});var uht=s(tce);B0o=r(uht,"speech_to_text_2"),uht.forEach(t),N0o=r(K9e," \u2014 "),Qq=n(K9e,"A",{href:!0});var bht=s(Qq);I0o=r(bht,"Speech2Text2Processor"),bht.forEach(t),q0o=r(K9e," (Speech2Text2 model)"),K9e.forEach(t),j0o=i(be),kp=n(be,"LI",{});var Z9e=s(kp);ace=n(Z9e,"STRONG",{});var vht=s(ace);D0o=r(vht,"trocr"),vht.forEach(t),G0o=r(Z9e," \u2014 "),Wq=n(Z9e,"A",{href:!0});var Fht=s(Wq);O0o=r(Fht,"TrOCRProcessor"),Fht.forEach(t),V0o=r(Z9e," (TrOCR model)"),Z9e.forEach(t),X0o=i(be),Sp=n(be,"LI",{});var exe=s(Sp);nce=n(exe,"STRONG",{});var Tht=s(nce);z0o=r(Tht,"unispeech"),Tht.forEach(t),Q0o=r(exe," \u2014 "),Hq=n(exe,"A",{href:!0});var Mht=s(Hq);W0o=r(Mht,"Wav2Vec2Processor"),Mht.forEach(t),H0o=r(exe," (UniSpeech model)"),exe.forEach(t),U0o=i(be),Rp=n(be,"LI",{});var oxe=s(Rp);sce=n(oxe,"STRONG",{});var Eht=s(sce);J0o=r(Eht,"unispeech-sat"),Eht.forEach(t),Y0o=r(oxe," \u2014 "),Uq=n(oxe,"A",{href:!0});var Cht=s(Uq);K0o=r(Cht,"Wav2Vec2Processor"),Cht.forEach(t),Z0o=r(oxe," (UniSpeechSat model)"),oxe.forEach(t),eFo=i(be),Pp=n(be,"LI",{});var rxe=s(Pp);lce=n(rxe,"STRONG",{});var wht=s(lce);oFo=r(wht,"vilt"),wht.forEach(t),rFo=r(rxe," \u2014 "),Jq=n(rxe,"A",{href:!0});var Aht=s(Jq);tFo=r(Aht,"ViltProcessor"),Aht.forEach(t),aFo=r(rxe," (ViLT model)"),rxe.forEach(t),nFo=i(be),Bp=n(be,"LI",{});var txe=s(Bp);ice=n(txe,"STRONG",{});var Lht=s(ice);sFo=r(Lht,"vision-text-dual-encoder"),Lht.forEach(t),lFo=r(txe," \u2014 "),Yq=n(txe,"A",{href:!0});var yht=s(Yq);iFo=r(yht,"VisionTextDualEncoderProcessor"),yht.forEach(t),dFo=r(txe," (VisionTextDualEncoder model)"),txe.forEach(t),cFo=i(be),Np=n(be,"LI",{});var axe=s(Np);dce=n(axe,"STRONG",{});var xht=s(dce);fFo=r(xht,"wav2vec2"),xht.forEach(t),mFo=r(axe," \u2014 "),Kq=n(axe,"A",{href:!0});var $ht=s(Kq);gFo=r($ht,"Wav2Vec2Processor"),$ht.forEach(t),hFo=r(axe," (Wav2Vec2 model)"),axe.forEach(t),pFo=i(be),Ip=n(be,"LI",{});var nxe=s(Ip);cce=n(nxe,"STRONG",{});var kht=s(cce);_Fo=r(kht,"wav2vec2-conformer"),kht.forEach(t),uFo=r(nxe," \u2014 "),Zq=n(nxe,"A",{href:!0});var Sht=s(Zq);bFo=r(Sht,"Wav2Vec2Processor"),Sht.forEach(t),vFo=r(nxe," (Wav2Vec2-Conformer model)"),nxe.forEach(t),FFo=i(be),qp=n(be,"LI",{});var sxe=s(qp);fce=n(sxe,"STRONG",{});var Rht=s(fce);TFo=r(Rht,"wavlm"),Rht.forEach(t),MFo=r(sxe," \u2014 "),ej=n(sxe,"A",{href:!0});var Pht=s(ej);EFo=r(Pht,"Wav2Vec2Processor"),Pht.forEach(t),CFo=r(sxe," (WavLM model)"),sxe.forEach(t),be.forEach(t),wFo=i(sa),T(jp.$$.fragment,sa),AFo=i(sa),T(Dp.$$.fragment,sa),sa.forEach(t),LFo=i(rl),Gp=n(rl,"DIV",{class:!0});var NQe=s(Gp);T(PL.$$.fragment,NQe),yFo=i(NQe),mce=n(NQe,"P",{});var Bht=s(mce);xFo=r(Bht,"Register a new processor for this class."),Bht.forEach(t),NQe.forEach(t),rl.forEach(t),kXe=i(f),Oi=n(f,"H2",{class:!0});var IQe=s(Oi);Op=n(IQe,"A",{id:!0,class:!0,href:!0});var Nht=s(Op);gce=n(Nht,"SPAN",{});var Iht=s(gce);T(BL.$$.fragment,Iht),Iht.forEach(t),Nht.forEach(t),$Fo=i(IQe),hce=n(IQe,"SPAN",{});var qht=s(hce);kFo=r(qht,"AutoModel"),qht.forEach(t),IQe.forEach(t),SXe=i(f),$o=n(f,"DIV",{class:!0});var tl=s($o);T(NL.$$.fragment,tl),SFo=i(tl),Vi=n(tl,"P",{});var Vre=s(Vi);RFo=r(Vre,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),oj=n(Vre,"A",{href:!0});var jht=s(oj);PFo=r(jht,"from_pretrained()"),jht.forEach(t),BFo=r(Vre," class method or the "),rj=n(Vre,"A",{href:!0});var Dht=s(rj);NFo=r(Dht,"from_config()"),Dht.forEach(t),IFo=r(Vre,` class
method.`),Vre.forEach(t),qFo=i(tl),IL=n(tl,"P",{});var qQe=s(IL);jFo=r(qQe,"This class cannot be instantiated directly using "),pce=n(qQe,"CODE",{});var Ght=s(pce);DFo=r(Ght,"__init__()"),Ght.forEach(t),GFo=r(qQe," (throws an error)."),qQe.forEach(t),OFo=i(tl),it=n(tl,"DIV",{class:!0});var g6=s(it);T(qL.$$.fragment,g6),VFo=i(g6),_ce=n(g6,"P",{});var Oht=s(_ce);XFo=r(Oht,"Instantiates one of the base model classes of the library from a configuration."),Oht.forEach(t),zFo=i(g6),Xi=n(g6,"P",{});var Xre=s(Xi);QFo=r(Xre,`Note:
Loading a model from its configuration file does `),uce=n(Xre,"STRONG",{});var Vht=s(uce);WFo=r(Vht,"not"),Vht.forEach(t),HFo=r(Xre,` load the model weights. It only affects the
model\u2019s configuration. Use `),tj=n(Xre,"A",{href:!0});var Xht=s(tj);UFo=r(Xht,"from_pretrained()"),Xht.forEach(t),JFo=r(Xre," to load the model weights."),Xre.forEach(t),YFo=i(g6),T(Vp.$$.fragment,g6),g6.forEach(t),KFo=i(tl),Ye=n(tl,"DIV",{class:!0});var la=s(Ye);T(jL.$$.fragment,la),ZFo=i(la),bce=n(la,"P",{});var zht=s(bce);eTo=r(zht,"Instantiate one of the base model classes of the library from a pretrained model."),zht.forEach(t),oTo=i(la),Na=n(la,"P",{});var h6=s(Na);rTo=r(h6,"The model class to instantiate is selected based on the "),vce=n(h6,"CODE",{});var Qht=s(vce);tTo=r(Qht,"model_type"),Qht.forEach(t),aTo=r(h6,` property of the config object (either
passed as an argument or loaded from `),Fce=n(h6,"CODE",{});var Wht=s(Fce);nTo=r(Wht,"pretrained_model_name_or_path"),Wht.forEach(t),sTo=r(h6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tce=n(h6,"CODE",{});var Hht=s(Tce);lTo=r(Hht,"pretrained_model_name_or_path"),Hht.forEach(t),iTo=r(h6,":"),h6.forEach(t),dTo=i(la),y=n(la,"UL",{});var x=s(y);Xp=n(x,"LI",{});var lxe=s(Xp);Mce=n(lxe,"STRONG",{});var Uht=s(Mce);cTo=r(Uht,"albert"),Uht.forEach(t),fTo=r(lxe," \u2014 "),aj=n(lxe,"A",{href:!0});var Jht=s(aj);mTo=r(Jht,"AlbertModel"),Jht.forEach(t),gTo=r(lxe," (ALBERT model)"),lxe.forEach(t),hTo=i(x),zp=n(x,"LI",{});var ixe=s(zp);Ece=n(ixe,"STRONG",{});var Yht=s(Ece);pTo=r(Yht,"bart"),Yht.forEach(t),_To=r(ixe," \u2014 "),nj=n(ixe,"A",{href:!0});var Kht=s(nj);uTo=r(Kht,"BartModel"),Kht.forEach(t),bTo=r(ixe," (BART model)"),ixe.forEach(t),vTo=i(x),Qp=n(x,"LI",{});var dxe=s(Qp);Cce=n(dxe,"STRONG",{});var Zht=s(Cce);FTo=r(Zht,"beit"),Zht.forEach(t),TTo=r(dxe," \u2014 "),sj=n(dxe,"A",{href:!0});var ept=s(sj);MTo=r(ept,"BeitModel"),ept.forEach(t),ETo=r(dxe," (BEiT model)"),dxe.forEach(t),CTo=i(x),Wp=n(x,"LI",{});var cxe=s(Wp);wce=n(cxe,"STRONG",{});var opt=s(wce);wTo=r(opt,"bert"),opt.forEach(t),ATo=r(cxe," \u2014 "),lj=n(cxe,"A",{href:!0});var rpt=s(lj);LTo=r(rpt,"BertModel"),rpt.forEach(t),yTo=r(cxe," (BERT model)"),cxe.forEach(t),xTo=i(x),Hp=n(x,"LI",{});var fxe=s(Hp);Ace=n(fxe,"STRONG",{});var tpt=s(Ace);$To=r(tpt,"bert-generation"),tpt.forEach(t),kTo=r(fxe," \u2014 "),ij=n(fxe,"A",{href:!0});var apt=s(ij);STo=r(apt,"BertGenerationEncoder"),apt.forEach(t),RTo=r(fxe," (Bert Generation model)"),fxe.forEach(t),PTo=i(x),Up=n(x,"LI",{});var mxe=s(Up);Lce=n(mxe,"STRONG",{});var npt=s(Lce);BTo=r(npt,"big_bird"),npt.forEach(t),NTo=r(mxe," \u2014 "),dj=n(mxe,"A",{href:!0});var spt=s(dj);ITo=r(spt,"BigBirdModel"),spt.forEach(t),qTo=r(mxe," (BigBird model)"),mxe.forEach(t),jTo=i(x),Jp=n(x,"LI",{});var gxe=s(Jp);yce=n(gxe,"STRONG",{});var lpt=s(yce);DTo=r(lpt,"bigbird_pegasus"),lpt.forEach(t),GTo=r(gxe," \u2014 "),cj=n(gxe,"A",{href:!0});var ipt=s(cj);OTo=r(ipt,"BigBirdPegasusModel"),ipt.forEach(t),VTo=r(gxe," (BigBird-Pegasus model)"),gxe.forEach(t),XTo=i(x),Yp=n(x,"LI",{});var hxe=s(Yp);xce=n(hxe,"STRONG",{});var dpt=s(xce);zTo=r(dpt,"blenderbot"),dpt.forEach(t),QTo=r(hxe," \u2014 "),fj=n(hxe,"A",{href:!0});var cpt=s(fj);WTo=r(cpt,"BlenderbotModel"),cpt.forEach(t),HTo=r(hxe," (Blenderbot model)"),hxe.forEach(t),UTo=i(x),Kp=n(x,"LI",{});var pxe=s(Kp);$ce=n(pxe,"STRONG",{});var fpt=s($ce);JTo=r(fpt,"blenderbot-small"),fpt.forEach(t),YTo=r(pxe," \u2014 "),mj=n(pxe,"A",{href:!0});var mpt=s(mj);KTo=r(mpt,"BlenderbotSmallModel"),mpt.forEach(t),ZTo=r(pxe," (BlenderbotSmall model)"),pxe.forEach(t),e8o=i(x),Zp=n(x,"LI",{});var _xe=s(Zp);kce=n(_xe,"STRONG",{});var gpt=s(kce);o8o=r(gpt,"bloom"),gpt.forEach(t),r8o=r(_xe," \u2014 "),gj=n(_xe,"A",{href:!0});var hpt=s(gj);t8o=r(hpt,"BloomModel"),hpt.forEach(t),a8o=r(_xe," (BLOOM model)"),_xe.forEach(t),n8o=i(x),e_=n(x,"LI",{});var uxe=s(e_);Sce=n(uxe,"STRONG",{});var ppt=s(Sce);s8o=r(ppt,"camembert"),ppt.forEach(t),l8o=r(uxe," \u2014 "),hj=n(uxe,"A",{href:!0});var _pt=s(hj);i8o=r(_pt,"CamembertModel"),_pt.forEach(t),d8o=r(uxe," (CamemBERT model)"),uxe.forEach(t),c8o=i(x),o_=n(x,"LI",{});var bxe=s(o_);Rce=n(bxe,"STRONG",{});var upt=s(Rce);f8o=r(upt,"canine"),upt.forEach(t),m8o=r(bxe," \u2014 "),pj=n(bxe,"A",{href:!0});var bpt=s(pj);g8o=r(bpt,"CanineModel"),bpt.forEach(t),h8o=r(bxe," (CANINE model)"),bxe.forEach(t),p8o=i(x),r_=n(x,"LI",{});var vxe=s(r_);Pce=n(vxe,"STRONG",{});var vpt=s(Pce);_8o=r(vpt,"clip"),vpt.forEach(t),u8o=r(vxe," \u2014 "),_j=n(vxe,"A",{href:!0});var Fpt=s(_j);b8o=r(Fpt,"CLIPModel"),Fpt.forEach(t),v8o=r(vxe," (CLIP model)"),vxe.forEach(t),F8o=i(x),t_=n(x,"LI",{});var Fxe=s(t_);Bce=n(Fxe,"STRONG",{});var Tpt=s(Bce);T8o=r(Tpt,"codegen"),Tpt.forEach(t),M8o=r(Fxe," \u2014 "),uj=n(Fxe,"A",{href:!0});var Mpt=s(uj);E8o=r(Mpt,"CodeGenModel"),Mpt.forEach(t),C8o=r(Fxe," (CodeGen model)"),Fxe.forEach(t),w8o=i(x),a_=n(x,"LI",{});var Txe=s(a_);Nce=n(Txe,"STRONG",{});var Ept=s(Nce);A8o=r(Ept,"convbert"),Ept.forEach(t),L8o=r(Txe," \u2014 "),bj=n(Txe,"A",{href:!0});var Cpt=s(bj);y8o=r(Cpt,"ConvBertModel"),Cpt.forEach(t),x8o=r(Txe," (ConvBERT model)"),Txe.forEach(t),$8o=i(x),n_=n(x,"LI",{});var Mxe=s(n_);Ice=n(Mxe,"STRONG",{});var wpt=s(Ice);k8o=r(wpt,"convnext"),wpt.forEach(t),S8o=r(Mxe," \u2014 "),vj=n(Mxe,"A",{href:!0});var Apt=s(vj);R8o=r(Apt,"ConvNextModel"),Apt.forEach(t),P8o=r(Mxe," (ConvNeXT model)"),Mxe.forEach(t),B8o=i(x),s_=n(x,"LI",{});var Exe=s(s_);qce=n(Exe,"STRONG",{});var Lpt=s(qce);N8o=r(Lpt,"ctrl"),Lpt.forEach(t),I8o=r(Exe," \u2014 "),Fj=n(Exe,"A",{href:!0});var ypt=s(Fj);q8o=r(ypt,"CTRLModel"),ypt.forEach(t),j8o=r(Exe," (CTRL model)"),Exe.forEach(t),D8o=i(x),l_=n(x,"LI",{});var Cxe=s(l_);jce=n(Cxe,"STRONG",{});var xpt=s(jce);G8o=r(xpt,"cvt"),xpt.forEach(t),O8o=r(Cxe," \u2014 "),Tj=n(Cxe,"A",{href:!0});var $pt=s(Tj);V8o=r($pt,"CvtModel"),$pt.forEach(t),X8o=r(Cxe," (CvT model)"),Cxe.forEach(t),z8o=i(x),i_=n(x,"LI",{});var wxe=s(i_);Dce=n(wxe,"STRONG",{});var kpt=s(Dce);Q8o=r(kpt,"data2vec-audio"),kpt.forEach(t),W8o=r(wxe," \u2014 "),Mj=n(wxe,"A",{href:!0});var Spt=s(Mj);H8o=r(Spt,"Data2VecAudioModel"),Spt.forEach(t),U8o=r(wxe," (Data2VecAudio model)"),wxe.forEach(t),J8o=i(x),d_=n(x,"LI",{});var Axe=s(d_);Gce=n(Axe,"STRONG",{});var Rpt=s(Gce);Y8o=r(Rpt,"data2vec-text"),Rpt.forEach(t),K8o=r(Axe," \u2014 "),Ej=n(Axe,"A",{href:!0});var Ppt=s(Ej);Z8o=r(Ppt,"Data2VecTextModel"),Ppt.forEach(t),eMo=r(Axe," (Data2VecText model)"),Axe.forEach(t),oMo=i(x),c_=n(x,"LI",{});var Lxe=s(c_);Oce=n(Lxe,"STRONG",{});var Bpt=s(Oce);rMo=r(Bpt,"data2vec-vision"),Bpt.forEach(t),tMo=r(Lxe," \u2014 "),Cj=n(Lxe,"A",{href:!0});var Npt=s(Cj);aMo=r(Npt,"Data2VecVisionModel"),Npt.forEach(t),nMo=r(Lxe," (Data2VecVision model)"),Lxe.forEach(t),sMo=i(x),f_=n(x,"LI",{});var yxe=s(f_);Vce=n(yxe,"STRONG",{});var Ipt=s(Vce);lMo=r(Ipt,"deberta"),Ipt.forEach(t),iMo=r(yxe," \u2014 "),wj=n(yxe,"A",{href:!0});var qpt=s(wj);dMo=r(qpt,"DebertaModel"),qpt.forEach(t),cMo=r(yxe," (DeBERTa model)"),yxe.forEach(t),fMo=i(x),m_=n(x,"LI",{});var xxe=s(m_);Xce=n(xxe,"STRONG",{});var jpt=s(Xce);mMo=r(jpt,"deberta-v2"),jpt.forEach(t),gMo=r(xxe," \u2014 "),Aj=n(xxe,"A",{href:!0});var Dpt=s(Aj);hMo=r(Dpt,"DebertaV2Model"),Dpt.forEach(t),pMo=r(xxe," (DeBERTa-v2 model)"),xxe.forEach(t),_Mo=i(x),g_=n(x,"LI",{});var $xe=s(g_);zce=n($xe,"STRONG",{});var Gpt=s(zce);uMo=r(Gpt,"decision_transformer"),Gpt.forEach(t),bMo=r($xe," \u2014 "),Lj=n($xe,"A",{href:!0});var Opt=s(Lj);vMo=r(Opt,"DecisionTransformerModel"),Opt.forEach(t),FMo=r($xe," (Decision Transformer model)"),$xe.forEach(t),TMo=i(x),h_=n(x,"LI",{});var kxe=s(h_);Qce=n(kxe,"STRONG",{});var Vpt=s(Qce);MMo=r(Vpt,"deit"),Vpt.forEach(t),EMo=r(kxe," \u2014 "),yj=n(kxe,"A",{href:!0});var Xpt=s(yj);CMo=r(Xpt,"DeiTModel"),Xpt.forEach(t),wMo=r(kxe," (DeiT model)"),kxe.forEach(t),AMo=i(x),p_=n(x,"LI",{});var Sxe=s(p_);Wce=n(Sxe,"STRONG",{});var zpt=s(Wce);LMo=r(zpt,"detr"),zpt.forEach(t),yMo=r(Sxe," \u2014 "),xj=n(Sxe,"A",{href:!0});var Qpt=s(xj);xMo=r(Qpt,"DetrModel"),Qpt.forEach(t),$Mo=r(Sxe," (DETR model)"),Sxe.forEach(t),kMo=i(x),__=n(x,"LI",{});var Rxe=s(__);Hce=n(Rxe,"STRONG",{});var Wpt=s(Hce);SMo=r(Wpt,"distilbert"),Wpt.forEach(t),RMo=r(Rxe," \u2014 "),$j=n(Rxe,"A",{href:!0});var Hpt=s($j);PMo=r(Hpt,"DistilBertModel"),Hpt.forEach(t),BMo=r(Rxe," (DistilBERT model)"),Rxe.forEach(t),NMo=i(x),u_=n(x,"LI",{});var Pxe=s(u_);Uce=n(Pxe,"STRONG",{});var Upt=s(Uce);IMo=r(Upt,"dpr"),Upt.forEach(t),qMo=r(Pxe," \u2014 "),kj=n(Pxe,"A",{href:!0});var Jpt=s(kj);jMo=r(Jpt,"DPRQuestionEncoder"),Jpt.forEach(t),DMo=r(Pxe," (DPR model)"),Pxe.forEach(t),GMo=i(x),b_=n(x,"LI",{});var Bxe=s(b_);Jce=n(Bxe,"STRONG",{});var Ypt=s(Jce);OMo=r(Ypt,"dpt"),Ypt.forEach(t),VMo=r(Bxe," \u2014 "),Sj=n(Bxe,"A",{href:!0});var Kpt=s(Sj);XMo=r(Kpt,"DPTModel"),Kpt.forEach(t),zMo=r(Bxe," (DPT model)"),Bxe.forEach(t),QMo=i(x),v_=n(x,"LI",{});var Nxe=s(v_);Yce=n(Nxe,"STRONG",{});var Zpt=s(Yce);WMo=r(Zpt,"electra"),Zpt.forEach(t),HMo=r(Nxe," \u2014 "),Rj=n(Nxe,"A",{href:!0});var e_t=s(Rj);UMo=r(e_t,"ElectraModel"),e_t.forEach(t),JMo=r(Nxe," (ELECTRA model)"),Nxe.forEach(t),YMo=i(x),F_=n(x,"LI",{});var Ixe=s(F_);Kce=n(Ixe,"STRONG",{});var o_t=s(Kce);KMo=r(o_t,"flaubert"),o_t.forEach(t),ZMo=r(Ixe," \u2014 "),Pj=n(Ixe,"A",{href:!0});var r_t=s(Pj);e4o=r(r_t,"FlaubertModel"),r_t.forEach(t),o4o=r(Ixe," (FlauBERT model)"),Ixe.forEach(t),r4o=i(x),T_=n(x,"LI",{});var qxe=s(T_);Zce=n(qxe,"STRONG",{});var t_t=s(Zce);t4o=r(t_t,"flava"),t_t.forEach(t),a4o=r(qxe," \u2014 "),Bj=n(qxe,"A",{href:!0});var a_t=s(Bj);n4o=r(a_t,"FlavaModel"),a_t.forEach(t),s4o=r(qxe," (FLAVA model)"),qxe.forEach(t),l4o=i(x),M_=n(x,"LI",{});var jxe=s(M_);efe=n(jxe,"STRONG",{});var n_t=s(efe);i4o=r(n_t,"fnet"),n_t.forEach(t),d4o=r(jxe," \u2014 "),Nj=n(jxe,"A",{href:!0});var s_t=s(Nj);c4o=r(s_t,"FNetModel"),s_t.forEach(t),f4o=r(jxe," (FNet model)"),jxe.forEach(t),m4o=i(x),E_=n(x,"LI",{});var Dxe=s(E_);ofe=n(Dxe,"STRONG",{});var l_t=s(ofe);g4o=r(l_t,"fsmt"),l_t.forEach(t),h4o=r(Dxe," \u2014 "),Ij=n(Dxe,"A",{href:!0});var i_t=s(Ij);p4o=r(i_t,"FSMTModel"),i_t.forEach(t),_4o=r(Dxe," (FairSeq Machine-Translation model)"),Dxe.forEach(t),u4o=i(x),Hs=n(x,"LI",{});var NS=s(Hs);rfe=n(NS,"STRONG",{});var d_t=s(rfe);b4o=r(d_t,"funnel"),d_t.forEach(t),v4o=r(NS," \u2014 "),qj=n(NS,"A",{href:!0});var c_t=s(qj);F4o=r(c_t,"FunnelModel"),c_t.forEach(t),T4o=r(NS," or "),jj=n(NS,"A",{href:!0});var f_t=s(jj);M4o=r(f_t,"FunnelBaseModel"),f_t.forEach(t),E4o=r(NS," (Funnel Transformer model)"),NS.forEach(t),C4o=i(x),C_=n(x,"LI",{});var Gxe=s(C_);tfe=n(Gxe,"STRONG",{});var m_t=s(tfe);w4o=r(m_t,"glpn"),m_t.forEach(t),A4o=r(Gxe," \u2014 "),Dj=n(Gxe,"A",{href:!0});var g_t=s(Dj);L4o=r(g_t,"GLPNModel"),g_t.forEach(t),y4o=r(Gxe," (GLPN model)"),Gxe.forEach(t),x4o=i(x),w_=n(x,"LI",{});var Oxe=s(w_);afe=n(Oxe,"STRONG",{});var h_t=s(afe);$4o=r(h_t,"gpt2"),h_t.forEach(t),k4o=r(Oxe," \u2014 "),Gj=n(Oxe,"A",{href:!0});var p_t=s(Gj);S4o=r(p_t,"GPT2Model"),p_t.forEach(t),R4o=r(Oxe," (OpenAI GPT-2 model)"),Oxe.forEach(t),P4o=i(x),A_=n(x,"LI",{});var Vxe=s(A_);nfe=n(Vxe,"STRONG",{});var __t=s(nfe);B4o=r(__t,"gpt_neo"),__t.forEach(t),N4o=r(Vxe," \u2014 "),Oj=n(Vxe,"A",{href:!0});var u_t=s(Oj);I4o=r(u_t,"GPTNeoModel"),u_t.forEach(t),q4o=r(Vxe," (GPT Neo model)"),Vxe.forEach(t),j4o=i(x),L_=n(x,"LI",{});var Xxe=s(L_);sfe=n(Xxe,"STRONG",{});var b_t=s(sfe);D4o=r(b_t,"gpt_neox"),b_t.forEach(t),G4o=r(Xxe," \u2014 "),Vj=n(Xxe,"A",{href:!0});var v_t=s(Vj);O4o=r(v_t,"GPTNeoXModel"),v_t.forEach(t),V4o=r(Xxe," (GPT NeoX model)"),Xxe.forEach(t),X4o=i(x),y_=n(x,"LI",{});var zxe=s(y_);lfe=n(zxe,"STRONG",{});var F_t=s(lfe);z4o=r(F_t,"gptj"),F_t.forEach(t),Q4o=r(zxe," \u2014 "),Xj=n(zxe,"A",{href:!0});var T_t=s(Xj);W4o=r(T_t,"GPTJModel"),T_t.forEach(t),H4o=r(zxe," (GPT-J model)"),zxe.forEach(t),U4o=i(x),x_=n(x,"LI",{});var Qxe=s(x_);ife=n(Qxe,"STRONG",{});var M_t=s(ife);J4o=r(M_t,"groupvit"),M_t.forEach(t),Y4o=r(Qxe," \u2014 "),zj=n(Qxe,"A",{href:!0});var E_t=s(zj);K4o=r(E_t,"GroupViTModel"),E_t.forEach(t),Z4o=r(Qxe," (GroupViT model)"),Qxe.forEach(t),eEo=i(x),$_=n(x,"LI",{});var Wxe=s($_);dfe=n(Wxe,"STRONG",{});var C_t=s(dfe);oEo=r(C_t,"hubert"),C_t.forEach(t),rEo=r(Wxe," \u2014 "),Qj=n(Wxe,"A",{href:!0});var w_t=s(Qj);tEo=r(w_t,"HubertModel"),w_t.forEach(t),aEo=r(Wxe," (Hubert model)"),Wxe.forEach(t),nEo=i(x),k_=n(x,"LI",{});var Hxe=s(k_);cfe=n(Hxe,"STRONG",{});var A_t=s(cfe);sEo=r(A_t,"ibert"),A_t.forEach(t),lEo=r(Hxe," \u2014 "),Wj=n(Hxe,"A",{href:!0});var L_t=s(Wj);iEo=r(L_t,"IBertModel"),L_t.forEach(t),dEo=r(Hxe," (I-BERT model)"),Hxe.forEach(t),cEo=i(x),S_=n(x,"LI",{});var Uxe=s(S_);ffe=n(Uxe,"STRONG",{});var y_t=s(ffe);fEo=r(y_t,"imagegpt"),y_t.forEach(t),mEo=r(Uxe," \u2014 "),Hj=n(Uxe,"A",{href:!0});var x_t=s(Hj);gEo=r(x_t,"ImageGPTModel"),x_t.forEach(t),hEo=r(Uxe," (ImageGPT model)"),Uxe.forEach(t),pEo=i(x),R_=n(x,"LI",{});var Jxe=s(R_);mfe=n(Jxe,"STRONG",{});var $_t=s(mfe);_Eo=r($_t,"layoutlm"),$_t.forEach(t),uEo=r(Jxe," \u2014 "),Uj=n(Jxe,"A",{href:!0});var k_t=s(Uj);bEo=r(k_t,"LayoutLMModel"),k_t.forEach(t),vEo=r(Jxe," (LayoutLM model)"),Jxe.forEach(t),FEo=i(x),P_=n(x,"LI",{});var Yxe=s(P_);gfe=n(Yxe,"STRONG",{});var S_t=s(gfe);TEo=r(S_t,"layoutlmv2"),S_t.forEach(t),MEo=r(Yxe," \u2014 "),Jj=n(Yxe,"A",{href:!0});var R_t=s(Jj);EEo=r(R_t,"LayoutLMv2Model"),R_t.forEach(t),CEo=r(Yxe," (LayoutLMv2 model)"),Yxe.forEach(t),wEo=i(x),B_=n(x,"LI",{});var Kxe=s(B_);hfe=n(Kxe,"STRONG",{});var P_t=s(hfe);AEo=r(P_t,"layoutlmv3"),P_t.forEach(t),LEo=r(Kxe," \u2014 "),Yj=n(Kxe,"A",{href:!0});var B_t=s(Yj);yEo=r(B_t,"LayoutLMv3Model"),B_t.forEach(t),xEo=r(Kxe," (LayoutLMv3 model)"),Kxe.forEach(t),$Eo=i(x),N_=n(x,"LI",{});var Zxe=s(N_);pfe=n(Zxe,"STRONG",{});var N_t=s(pfe);kEo=r(N_t,"led"),N_t.forEach(t),SEo=r(Zxe," \u2014 "),Kj=n(Zxe,"A",{href:!0});var I_t=s(Kj);REo=r(I_t,"LEDModel"),I_t.forEach(t),PEo=r(Zxe," (LED model)"),Zxe.forEach(t),BEo=i(x),I_=n(x,"LI",{});var e$e=s(I_);_fe=n(e$e,"STRONG",{});var q_t=s(_fe);NEo=r(q_t,"levit"),q_t.forEach(t),IEo=r(e$e," \u2014 "),Zj=n(e$e,"A",{href:!0});var j_t=s(Zj);qEo=r(j_t,"LevitModel"),j_t.forEach(t),jEo=r(e$e," (LeViT model)"),e$e.forEach(t),DEo=i(x),q_=n(x,"LI",{});var o$e=s(q_);ufe=n(o$e,"STRONG",{});var D_t=s(ufe);GEo=r(D_t,"longformer"),D_t.forEach(t),OEo=r(o$e," \u2014 "),eD=n(o$e,"A",{href:!0});var G_t=s(eD);VEo=r(G_t,"LongformerModel"),G_t.forEach(t),XEo=r(o$e," (Longformer model)"),o$e.forEach(t),zEo=i(x),j_=n(x,"LI",{});var r$e=s(j_);bfe=n(r$e,"STRONG",{});var O_t=s(bfe);QEo=r(O_t,"longt5"),O_t.forEach(t),WEo=r(r$e," \u2014 "),oD=n(r$e,"A",{href:!0});var V_t=s(oD);HEo=r(V_t,"LongT5Model"),V_t.forEach(t),UEo=r(r$e," (LongT5 model)"),r$e.forEach(t),JEo=i(x),D_=n(x,"LI",{});var t$e=s(D_);vfe=n(t$e,"STRONG",{});var X_t=s(vfe);YEo=r(X_t,"luke"),X_t.forEach(t),KEo=r(t$e," \u2014 "),rD=n(t$e,"A",{href:!0});var z_t=s(rD);ZEo=r(z_t,"LukeModel"),z_t.forEach(t),eCo=r(t$e," (LUKE model)"),t$e.forEach(t),oCo=i(x),G_=n(x,"LI",{});var a$e=s(G_);Ffe=n(a$e,"STRONG",{});var Q_t=s(Ffe);rCo=r(Q_t,"lxmert"),Q_t.forEach(t),tCo=r(a$e," \u2014 "),tD=n(a$e,"A",{href:!0});var W_t=s(tD);aCo=r(W_t,"LxmertModel"),W_t.forEach(t),nCo=r(a$e," (LXMERT model)"),a$e.forEach(t),sCo=i(x),O_=n(x,"LI",{});var n$e=s(O_);Tfe=n(n$e,"STRONG",{});var H_t=s(Tfe);lCo=r(H_t,"m2m_100"),H_t.forEach(t),iCo=r(n$e," \u2014 "),aD=n(n$e,"A",{href:!0});var U_t=s(aD);dCo=r(U_t,"M2M100Model"),U_t.forEach(t),cCo=r(n$e," (M2M100 model)"),n$e.forEach(t),fCo=i(x),V_=n(x,"LI",{});var s$e=s(V_);Mfe=n(s$e,"STRONG",{});var J_t=s(Mfe);mCo=r(J_t,"marian"),J_t.forEach(t),gCo=r(s$e," \u2014 "),nD=n(s$e,"A",{href:!0});var Y_t=s(nD);hCo=r(Y_t,"MarianModel"),Y_t.forEach(t),pCo=r(s$e," (Marian model)"),s$e.forEach(t),_Co=i(x),X_=n(x,"LI",{});var l$e=s(X_);Efe=n(l$e,"STRONG",{});var K_t=s(Efe);uCo=r(K_t,"maskformer"),K_t.forEach(t),bCo=r(l$e," \u2014 "),sD=n(l$e,"A",{href:!0});var Z_t=s(sD);vCo=r(Z_t,"MaskFormerModel"),Z_t.forEach(t),FCo=r(l$e," (MaskFormer model)"),l$e.forEach(t),TCo=i(x),z_=n(x,"LI",{});var i$e=s(z_);Cfe=n(i$e,"STRONG",{});var eut=s(Cfe);MCo=r(eut,"mbart"),eut.forEach(t),ECo=r(i$e," \u2014 "),lD=n(i$e,"A",{href:!0});var out=s(lD);CCo=r(out,"MBartModel"),out.forEach(t),wCo=r(i$e," (mBART model)"),i$e.forEach(t),ACo=i(x),Q_=n(x,"LI",{});var d$e=s(Q_);wfe=n(d$e,"STRONG",{});var rut=s(wfe);LCo=r(rut,"mctct"),rut.forEach(t),yCo=r(d$e," \u2014 "),iD=n(d$e,"A",{href:!0});var tut=s(iD);xCo=r(tut,"MCTCTModel"),tut.forEach(t),$Co=r(d$e," (M-CTC-T model)"),d$e.forEach(t),kCo=i(x),W_=n(x,"LI",{});var c$e=s(W_);Afe=n(c$e,"STRONG",{});var aut=s(Afe);SCo=r(aut,"megatron-bert"),aut.forEach(t),RCo=r(c$e," \u2014 "),dD=n(c$e,"A",{href:!0});var nut=s(dD);PCo=r(nut,"MegatronBertModel"),nut.forEach(t),BCo=r(c$e," (Megatron-BERT model)"),c$e.forEach(t),NCo=i(x),H_=n(x,"LI",{});var f$e=s(H_);Lfe=n(f$e,"STRONG",{});var sut=s(Lfe);ICo=r(sut,"mobilebert"),sut.forEach(t),qCo=r(f$e," \u2014 "),cD=n(f$e,"A",{href:!0});var lut=s(cD);jCo=r(lut,"MobileBertModel"),lut.forEach(t),DCo=r(f$e," (MobileBERT model)"),f$e.forEach(t),GCo=i(x),U_=n(x,"LI",{});var m$e=s(U_);yfe=n(m$e,"STRONG",{});var iut=s(yfe);OCo=r(iut,"mobilevit"),iut.forEach(t),VCo=r(m$e," \u2014 "),fD=n(m$e,"A",{href:!0});var dut=s(fD);XCo=r(dut,"MobileViTModel"),dut.forEach(t),zCo=r(m$e," (MobileViT model)"),m$e.forEach(t),QCo=i(x),J_=n(x,"LI",{});var g$e=s(J_);xfe=n(g$e,"STRONG",{});var cut=s(xfe);WCo=r(cut,"mpnet"),cut.forEach(t),HCo=r(g$e," \u2014 "),mD=n(g$e,"A",{href:!0});var fut=s(mD);UCo=r(fut,"MPNetModel"),fut.forEach(t),JCo=r(g$e," (MPNet model)"),g$e.forEach(t),YCo=i(x),Y_=n(x,"LI",{});var h$e=s(Y_);$fe=n(h$e,"STRONG",{});var mut=s($fe);KCo=r(mut,"mt5"),mut.forEach(t),ZCo=r(h$e," \u2014 "),gD=n(h$e,"A",{href:!0});var gut=s(gD);e3o=r(gut,"MT5Model"),gut.forEach(t),o3o=r(h$e," (MT5 model)"),h$e.forEach(t),r3o=i(x),K_=n(x,"LI",{});var p$e=s(K_);kfe=n(p$e,"STRONG",{});var hut=s(kfe);t3o=r(hut,"mvp"),hut.forEach(t),a3o=r(p$e," \u2014 "),hD=n(p$e,"A",{href:!0});var put=s(hD);n3o=r(put,"MvpModel"),put.forEach(t),s3o=r(p$e," (MVP model)"),p$e.forEach(t),l3o=i(x),Z_=n(x,"LI",{});var _$e=s(Z_);Sfe=n(_$e,"STRONG",{});var _ut=s(Sfe);i3o=r(_ut,"nezha"),_ut.forEach(t),d3o=r(_$e," \u2014 "),pD=n(_$e,"A",{href:!0});var uut=s(pD);c3o=r(uut,"NezhaModel"),uut.forEach(t),f3o=r(_$e," (Nezha model)"),_$e.forEach(t),m3o=i(x),eu=n(x,"LI",{});var u$e=s(eu);Rfe=n(u$e,"STRONG",{});var but=s(Rfe);g3o=r(but,"nllb"),but.forEach(t),h3o=r(u$e," \u2014 "),_D=n(u$e,"A",{href:!0});var vut=s(_D);p3o=r(vut,"M2M100Model"),vut.forEach(t),_3o=r(u$e," (NLLB model)"),u$e.forEach(t),u3o=i(x),ou=n(x,"LI",{});var b$e=s(ou);Pfe=n(b$e,"STRONG",{});var Fut=s(Pfe);b3o=r(Fut,"nystromformer"),Fut.forEach(t),v3o=r(b$e," \u2014 "),uD=n(b$e,"A",{href:!0});var Tut=s(uD);F3o=r(Tut,"NystromformerModel"),Tut.forEach(t),T3o=r(b$e," (Nystr\xF6mformer model)"),b$e.forEach(t),M3o=i(x),ru=n(x,"LI",{});var v$e=s(ru);Bfe=n(v$e,"STRONG",{});var Mut=s(Bfe);E3o=r(Mut,"openai-gpt"),Mut.forEach(t),C3o=r(v$e," \u2014 "),bD=n(v$e,"A",{href:!0});var Eut=s(bD);w3o=r(Eut,"OpenAIGPTModel"),Eut.forEach(t),A3o=r(v$e," (OpenAI GPT model)"),v$e.forEach(t),L3o=i(x),tu=n(x,"LI",{});var F$e=s(tu);Nfe=n(F$e,"STRONG",{});var Cut=s(Nfe);y3o=r(Cut,"opt"),Cut.forEach(t),x3o=r(F$e," \u2014 "),vD=n(F$e,"A",{href:!0});var wut=s(vD);$3o=r(wut,"OPTModel"),wut.forEach(t),k3o=r(F$e," (OPT model)"),F$e.forEach(t),S3o=i(x),au=n(x,"LI",{});var T$e=s(au);Ife=n(T$e,"STRONG",{});var Aut=s(Ife);R3o=r(Aut,"pegasus"),Aut.forEach(t),P3o=r(T$e," \u2014 "),FD=n(T$e,"A",{href:!0});var Lut=s(FD);B3o=r(Lut,"PegasusModel"),Lut.forEach(t),N3o=r(T$e," (Pegasus model)"),T$e.forEach(t),I3o=i(x),nu=n(x,"LI",{});var M$e=s(nu);qfe=n(M$e,"STRONG",{});var yut=s(qfe);q3o=r(yut,"perceiver"),yut.forEach(t),j3o=r(M$e," \u2014 "),TD=n(M$e,"A",{href:!0});var xut=s(TD);D3o=r(xut,"PerceiverModel"),xut.forEach(t),G3o=r(M$e," (Perceiver model)"),M$e.forEach(t),O3o=i(x),su=n(x,"LI",{});var E$e=s(su);jfe=n(E$e,"STRONG",{});var $ut=s(jfe);V3o=r($ut,"plbart"),$ut.forEach(t),X3o=r(E$e," \u2014 "),MD=n(E$e,"A",{href:!0});var kut=s(MD);z3o=r(kut,"PLBartModel"),kut.forEach(t),Q3o=r(E$e," (PLBart model)"),E$e.forEach(t),W3o=i(x),lu=n(x,"LI",{});var C$e=s(lu);Dfe=n(C$e,"STRONG",{});var Sut=s(Dfe);H3o=r(Sut,"poolformer"),Sut.forEach(t),U3o=r(C$e," \u2014 "),ED=n(C$e,"A",{href:!0});var Rut=s(ED);J3o=r(Rut,"PoolFormerModel"),Rut.forEach(t),Y3o=r(C$e," (PoolFormer model)"),C$e.forEach(t),K3o=i(x),iu=n(x,"LI",{});var w$e=s(iu);Gfe=n(w$e,"STRONG",{});var Put=s(Gfe);Z3o=r(Put,"prophetnet"),Put.forEach(t),e5o=r(w$e," \u2014 "),CD=n(w$e,"A",{href:!0});var But=s(CD);o5o=r(But,"ProphetNetModel"),But.forEach(t),r5o=r(w$e," (ProphetNet model)"),w$e.forEach(t),t5o=i(x),du=n(x,"LI",{});var A$e=s(du);Ofe=n(A$e,"STRONG",{});var Nut=s(Ofe);a5o=r(Nut,"qdqbert"),Nut.forEach(t),n5o=r(A$e," \u2014 "),wD=n(A$e,"A",{href:!0});var Iut=s(wD);s5o=r(Iut,"QDQBertModel"),Iut.forEach(t),l5o=r(A$e," (QDQBert model)"),A$e.forEach(t),i5o=i(x),cu=n(x,"LI",{});var L$e=s(cu);Vfe=n(L$e,"STRONG",{});var qut=s(Vfe);d5o=r(qut,"reformer"),qut.forEach(t),c5o=r(L$e," \u2014 "),AD=n(L$e,"A",{href:!0});var jut=s(AD);f5o=r(jut,"ReformerModel"),jut.forEach(t),m5o=r(L$e," (Reformer model)"),L$e.forEach(t),g5o=i(x),fu=n(x,"LI",{});var y$e=s(fu);Xfe=n(y$e,"STRONG",{});var Dut=s(Xfe);h5o=r(Dut,"regnet"),Dut.forEach(t),p5o=r(y$e," \u2014 "),LD=n(y$e,"A",{href:!0});var Gut=s(LD);_5o=r(Gut,"RegNetModel"),Gut.forEach(t),u5o=r(y$e," (RegNet model)"),y$e.forEach(t),b5o=i(x),mu=n(x,"LI",{});var x$e=s(mu);zfe=n(x$e,"STRONG",{});var Out=s(zfe);v5o=r(Out,"rembert"),Out.forEach(t),F5o=r(x$e," \u2014 "),yD=n(x$e,"A",{href:!0});var Vut=s(yD);T5o=r(Vut,"RemBertModel"),Vut.forEach(t),M5o=r(x$e," (RemBERT model)"),x$e.forEach(t),E5o=i(x),gu=n(x,"LI",{});var $$e=s(gu);Qfe=n($$e,"STRONG",{});var Xut=s(Qfe);C5o=r(Xut,"resnet"),Xut.forEach(t),w5o=r($$e," \u2014 "),xD=n($$e,"A",{href:!0});var zut=s(xD);A5o=r(zut,"ResNetModel"),zut.forEach(t),L5o=r($$e," (ResNet model)"),$$e.forEach(t),y5o=i(x),hu=n(x,"LI",{});var k$e=s(hu);Wfe=n(k$e,"STRONG",{});var Qut=s(Wfe);x5o=r(Qut,"retribert"),Qut.forEach(t),$5o=r(k$e," \u2014 "),$D=n(k$e,"A",{href:!0});var Wut=s($D);k5o=r(Wut,"RetriBertModel"),Wut.forEach(t),S5o=r(k$e," (RetriBERT model)"),k$e.forEach(t),R5o=i(x),pu=n(x,"LI",{});var S$e=s(pu);Hfe=n(S$e,"STRONG",{});var Hut=s(Hfe);P5o=r(Hut,"roberta"),Hut.forEach(t),B5o=r(S$e," \u2014 "),kD=n(S$e,"A",{href:!0});var Uut=s(kD);N5o=r(Uut,"RobertaModel"),Uut.forEach(t),I5o=r(S$e," (RoBERTa model)"),S$e.forEach(t),q5o=i(x),_u=n(x,"LI",{});var R$e=s(_u);Ufe=n(R$e,"STRONG",{});var Jut=s(Ufe);j5o=r(Jut,"roformer"),Jut.forEach(t),D5o=r(R$e," \u2014 "),SD=n(R$e,"A",{href:!0});var Yut=s(SD);G5o=r(Yut,"RoFormerModel"),Yut.forEach(t),O5o=r(R$e," (RoFormer model)"),R$e.forEach(t),V5o=i(x),uu=n(x,"LI",{});var P$e=s(uu);Jfe=n(P$e,"STRONG",{});var Kut=s(Jfe);X5o=r(Kut,"segformer"),Kut.forEach(t),z5o=r(P$e," \u2014 "),RD=n(P$e,"A",{href:!0});var Zut=s(RD);Q5o=r(Zut,"SegformerModel"),Zut.forEach(t),W5o=r(P$e," (SegFormer model)"),P$e.forEach(t),H5o=i(x),bu=n(x,"LI",{});var B$e=s(bu);Yfe=n(B$e,"STRONG",{});var e2t=s(Yfe);U5o=r(e2t,"sew"),e2t.forEach(t),J5o=r(B$e," \u2014 "),PD=n(B$e,"A",{href:!0});var o2t=s(PD);Y5o=r(o2t,"SEWModel"),o2t.forEach(t),K5o=r(B$e," (SEW model)"),B$e.forEach(t),Z5o=i(x),vu=n(x,"LI",{});var N$e=s(vu);Kfe=n(N$e,"STRONG",{});var r2t=s(Kfe);ewo=r(r2t,"sew-d"),r2t.forEach(t),owo=r(N$e," \u2014 "),BD=n(N$e,"A",{href:!0});var t2t=s(BD);rwo=r(t2t,"SEWDModel"),t2t.forEach(t),two=r(N$e," (SEW-D model)"),N$e.forEach(t),awo=i(x),Fu=n(x,"LI",{});var I$e=s(Fu);Zfe=n(I$e,"STRONG",{});var a2t=s(Zfe);nwo=r(a2t,"speech_to_text"),a2t.forEach(t),swo=r(I$e," \u2014 "),ND=n(I$e,"A",{href:!0});var n2t=s(ND);lwo=r(n2t,"Speech2TextModel"),n2t.forEach(t),iwo=r(I$e," (Speech2Text model)"),I$e.forEach(t),dwo=i(x),Tu=n(x,"LI",{});var q$e=s(Tu);eme=n(q$e,"STRONG",{});var s2t=s(eme);cwo=r(s2t,"splinter"),s2t.forEach(t),fwo=r(q$e," \u2014 "),ID=n(q$e,"A",{href:!0});var l2t=s(ID);mwo=r(l2t,"SplinterModel"),l2t.forEach(t),gwo=r(q$e," (Splinter model)"),q$e.forEach(t),hwo=i(x),Mu=n(x,"LI",{});var j$e=s(Mu);ome=n(j$e,"STRONG",{});var i2t=s(ome);pwo=r(i2t,"squeezebert"),i2t.forEach(t),_wo=r(j$e," \u2014 "),qD=n(j$e,"A",{href:!0});var d2t=s(qD);uwo=r(d2t,"SqueezeBertModel"),d2t.forEach(t),bwo=r(j$e," (SqueezeBERT model)"),j$e.forEach(t),vwo=i(x),Eu=n(x,"LI",{});var D$e=s(Eu);rme=n(D$e,"STRONG",{});var c2t=s(rme);Fwo=r(c2t,"swin"),c2t.forEach(t),Two=r(D$e," \u2014 "),jD=n(D$e,"A",{href:!0});var f2t=s(jD);Mwo=r(f2t,"SwinModel"),f2t.forEach(t),Ewo=r(D$e," (Swin Transformer model)"),D$e.forEach(t),Cwo=i(x),Cu=n(x,"LI",{});var G$e=s(Cu);tme=n(G$e,"STRONG",{});var m2t=s(tme);wwo=r(m2t,"t5"),m2t.forEach(t),Awo=r(G$e," \u2014 "),DD=n(G$e,"A",{href:!0});var g2t=s(DD);Lwo=r(g2t,"T5Model"),g2t.forEach(t),ywo=r(G$e," (T5 model)"),G$e.forEach(t),xwo=i(x),wu=n(x,"LI",{});var O$e=s(wu);ame=n(O$e,"STRONG",{});var h2t=s(ame);$wo=r(h2t,"tapas"),h2t.forEach(t),kwo=r(O$e," \u2014 "),GD=n(O$e,"A",{href:!0});var p2t=s(GD);Swo=r(p2t,"TapasModel"),p2t.forEach(t),Rwo=r(O$e," (TAPAS model)"),O$e.forEach(t),Pwo=i(x),Au=n(x,"LI",{});var V$e=s(Au);nme=n(V$e,"STRONG",{});var _2t=s(nme);Bwo=r(_2t,"trajectory_transformer"),_2t.forEach(t),Nwo=r(V$e," \u2014 "),OD=n(V$e,"A",{href:!0});var u2t=s(OD);Iwo=r(u2t,"TrajectoryTransformerModel"),u2t.forEach(t),qwo=r(V$e," (Trajectory Transformer model)"),V$e.forEach(t),jwo=i(x),Lu=n(x,"LI",{});var X$e=s(Lu);sme=n(X$e,"STRONG",{});var b2t=s(sme);Dwo=r(b2t,"transfo-xl"),b2t.forEach(t),Gwo=r(X$e," \u2014 "),VD=n(X$e,"A",{href:!0});var v2t=s(VD);Owo=r(v2t,"TransfoXLModel"),v2t.forEach(t),Vwo=r(X$e," (Transformer-XL model)"),X$e.forEach(t),Xwo=i(x),yu=n(x,"LI",{});var z$e=s(yu);lme=n(z$e,"STRONG",{});var F2t=s(lme);zwo=r(F2t,"unispeech"),F2t.forEach(t),Qwo=r(z$e," \u2014 "),XD=n(z$e,"A",{href:!0});var T2t=s(XD);Wwo=r(T2t,"UniSpeechModel"),T2t.forEach(t),Hwo=r(z$e," (UniSpeech model)"),z$e.forEach(t),Uwo=i(x),xu=n(x,"LI",{});var Q$e=s(xu);ime=n(Q$e,"STRONG",{});var M2t=s(ime);Jwo=r(M2t,"unispeech-sat"),M2t.forEach(t),Ywo=r(Q$e," \u2014 "),zD=n(Q$e,"A",{href:!0});var E2t=s(zD);Kwo=r(E2t,"UniSpeechSatModel"),E2t.forEach(t),Zwo=r(Q$e," (UniSpeechSat model)"),Q$e.forEach(t),eAo=i(x),$u=n(x,"LI",{});var W$e=s($u);dme=n(W$e,"STRONG",{});var C2t=s(dme);oAo=r(C2t,"van"),C2t.forEach(t),rAo=r(W$e," \u2014 "),QD=n(W$e,"A",{href:!0});var w2t=s(QD);tAo=r(w2t,"VanModel"),w2t.forEach(t),aAo=r(W$e," (VAN model)"),W$e.forEach(t),nAo=i(x),ku=n(x,"LI",{});var H$e=s(ku);cme=n(H$e,"STRONG",{});var A2t=s(cme);sAo=r(A2t,"vilt"),A2t.forEach(t),lAo=r(H$e," \u2014 "),WD=n(H$e,"A",{href:!0});var L2t=s(WD);iAo=r(L2t,"ViltModel"),L2t.forEach(t),dAo=r(H$e," (ViLT model)"),H$e.forEach(t),cAo=i(x),Su=n(x,"LI",{});var U$e=s(Su);fme=n(U$e,"STRONG",{});var y2t=s(fme);fAo=r(y2t,"vision-text-dual-encoder"),y2t.forEach(t),mAo=r(U$e," \u2014 "),HD=n(U$e,"A",{href:!0});var x2t=s(HD);gAo=r(x2t,"VisionTextDualEncoderModel"),x2t.forEach(t),hAo=r(U$e," (VisionTextDualEncoder model)"),U$e.forEach(t),pAo=i(x),Ru=n(x,"LI",{});var J$e=s(Ru);mme=n(J$e,"STRONG",{});var $2t=s(mme);_Ao=r($2t,"visual_bert"),$2t.forEach(t),uAo=r(J$e," \u2014 "),UD=n(J$e,"A",{href:!0});var k2t=s(UD);bAo=r(k2t,"VisualBertModel"),k2t.forEach(t),vAo=r(J$e," (VisualBERT model)"),J$e.forEach(t),FAo=i(x),Pu=n(x,"LI",{});var Y$e=s(Pu);gme=n(Y$e,"STRONG",{});var S2t=s(gme);TAo=r(S2t,"vit"),S2t.forEach(t),MAo=r(Y$e," \u2014 "),JD=n(Y$e,"A",{href:!0});var R2t=s(JD);EAo=r(R2t,"ViTModel"),R2t.forEach(t),CAo=r(Y$e," (ViT model)"),Y$e.forEach(t),wAo=i(x),Bu=n(x,"LI",{});var K$e=s(Bu);hme=n(K$e,"STRONG",{});var P2t=s(hme);AAo=r(P2t,"vit_mae"),P2t.forEach(t),LAo=r(K$e," \u2014 "),YD=n(K$e,"A",{href:!0});var B2t=s(YD);yAo=r(B2t,"ViTMAEModel"),B2t.forEach(t),xAo=r(K$e," (ViTMAE model)"),K$e.forEach(t),$Ao=i(x),Nu=n(x,"LI",{});var Z$e=s(Nu);pme=n(Z$e,"STRONG",{});var N2t=s(pme);kAo=r(N2t,"wav2vec2"),N2t.forEach(t),SAo=r(Z$e," \u2014 "),KD=n(Z$e,"A",{href:!0});var I2t=s(KD);RAo=r(I2t,"Wav2Vec2Model"),I2t.forEach(t),PAo=r(Z$e," (Wav2Vec2 model)"),Z$e.forEach(t),BAo=i(x),Iu=n(x,"LI",{});var eke=s(Iu);_me=n(eke,"STRONG",{});var q2t=s(_me);NAo=r(q2t,"wav2vec2-conformer"),q2t.forEach(t),IAo=r(eke," \u2014 "),ZD=n(eke,"A",{href:!0});var j2t=s(ZD);qAo=r(j2t,"Wav2Vec2ConformerModel"),j2t.forEach(t),jAo=r(eke," (Wav2Vec2-Conformer model)"),eke.forEach(t),DAo=i(x),qu=n(x,"LI",{});var oke=s(qu);ume=n(oke,"STRONG",{});var D2t=s(ume);GAo=r(D2t,"wavlm"),D2t.forEach(t),OAo=r(oke," \u2014 "),eG=n(oke,"A",{href:!0});var G2t=s(eG);VAo=r(G2t,"WavLMModel"),G2t.forEach(t),XAo=r(oke," (WavLM model)"),oke.forEach(t),zAo=i(x),ju=n(x,"LI",{});var rke=s(ju);bme=n(rke,"STRONG",{});var O2t=s(bme);QAo=r(O2t,"xglm"),O2t.forEach(t),WAo=r(rke," \u2014 "),oG=n(rke,"A",{href:!0});var V2t=s(oG);HAo=r(V2t,"XGLMModel"),V2t.forEach(t),UAo=r(rke," (XGLM model)"),rke.forEach(t),JAo=i(x),Du=n(x,"LI",{});var tke=s(Du);vme=n(tke,"STRONG",{});var X2t=s(vme);YAo=r(X2t,"xlm"),X2t.forEach(t),KAo=r(tke," \u2014 "),rG=n(tke,"A",{href:!0});var z2t=s(rG);ZAo=r(z2t,"XLMModel"),z2t.forEach(t),e6o=r(tke," (XLM model)"),tke.forEach(t),o6o=i(x),Gu=n(x,"LI",{});var ake=s(Gu);Fme=n(ake,"STRONG",{});var Q2t=s(Fme);r6o=r(Q2t,"xlm-prophetnet"),Q2t.forEach(t),t6o=r(ake," \u2014 "),tG=n(ake,"A",{href:!0});var W2t=s(tG);a6o=r(W2t,"XLMProphetNetModel"),W2t.forEach(t),n6o=r(ake," (XLM-ProphetNet model)"),ake.forEach(t),s6o=i(x),Ou=n(x,"LI",{});var nke=s(Ou);Tme=n(nke,"STRONG",{});var H2t=s(Tme);l6o=r(H2t,"xlm-roberta"),H2t.forEach(t),i6o=r(nke," \u2014 "),aG=n(nke,"A",{href:!0});var U2t=s(aG);d6o=r(U2t,"XLMRobertaModel"),U2t.forEach(t),c6o=r(nke," (XLM-RoBERTa model)"),nke.forEach(t),f6o=i(x),Vu=n(x,"LI",{});var ske=s(Vu);Mme=n(ske,"STRONG",{});var J2t=s(Mme);m6o=r(J2t,"xlm-roberta-xl"),J2t.forEach(t),g6o=r(ske," \u2014 "),nG=n(ske,"A",{href:!0});var Y2t=s(nG);h6o=r(Y2t,"XLMRobertaXLModel"),Y2t.forEach(t),p6o=r(ske," (XLM-RoBERTa-XL model)"),ske.forEach(t),_6o=i(x),Xu=n(x,"LI",{});var lke=s(Xu);Eme=n(lke,"STRONG",{});var K2t=s(Eme);u6o=r(K2t,"xlnet"),K2t.forEach(t),b6o=r(lke," \u2014 "),sG=n(lke,"A",{href:!0});var Z2t=s(sG);v6o=r(Z2t,"XLNetModel"),Z2t.forEach(t),F6o=r(lke," (XLNet model)"),lke.forEach(t),T6o=i(x),zu=n(x,"LI",{});var ike=s(zu);Cme=n(ike,"STRONG",{});var e1t=s(Cme);M6o=r(e1t,"yolos"),e1t.forEach(t),E6o=r(ike," \u2014 "),lG=n(ike,"A",{href:!0});var o1t=s(lG);C6o=r(o1t,"YolosModel"),o1t.forEach(t),w6o=r(ike," (YOLOS model)"),ike.forEach(t),A6o=i(x),Qu=n(x,"LI",{});var dke=s(Qu);wme=n(dke,"STRONG",{});var r1t=s(wme);L6o=r(r1t,"yoso"),r1t.forEach(t),y6o=r(dke," \u2014 "),iG=n(dke,"A",{href:!0});var t1t=s(iG);x6o=r(t1t,"YosoModel"),t1t.forEach(t),$6o=r(dke," (YOSO model)"),dke.forEach(t),x.forEach(t),k6o=i(la),Wu=n(la,"P",{});var cke=s(Wu);S6o=r(cke,"The model is set in evaluation mode by default using "),Ame=n(cke,"CODE",{});var a1t=s(Ame);R6o=r(a1t,"model.eval()"),a1t.forEach(t),P6o=r(cke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lme=n(cke,"CODE",{});var n1t=s(Lme);B6o=r(n1t,"model.train()"),n1t.forEach(t),cke.forEach(t),N6o=i(la),T(Hu.$$.fragment,la),la.forEach(t),tl.forEach(t),RXe=i(f),zi=n(f,"H2",{class:!0});var jQe=s(zi);Uu=n(jQe,"A",{id:!0,class:!0,href:!0});var s1t=s(Uu);yme=n(s1t,"SPAN",{});var l1t=s(yme);T(DL.$$.fragment,l1t),l1t.forEach(t),s1t.forEach(t),I6o=i(jQe),xme=n(jQe,"SPAN",{});var i1t=s(xme);q6o=r(i1t,"AutoModelForPreTraining"),i1t.forEach(t),jQe.forEach(t),PXe=i(f),ko=n(f,"DIV",{class:!0});var al=s(ko);T(GL.$$.fragment,al),j6o=i(al),Qi=n(al,"P",{});var zre=s(Qi);D6o=r(zre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),dG=n(zre,"A",{href:!0});var d1t=s(dG);G6o=r(d1t,"from_pretrained()"),d1t.forEach(t),O6o=r(zre," class method or the "),cG=n(zre,"A",{href:!0});var c1t=s(cG);V6o=r(c1t,"from_config()"),c1t.forEach(t),X6o=r(zre,` class
method.`),zre.forEach(t),z6o=i(al),OL=n(al,"P",{});var DQe=s(OL);Q6o=r(DQe,"This class cannot be instantiated directly using "),$me=n(DQe,"CODE",{});var f1t=s($me);W6o=r(f1t,"__init__()"),f1t.forEach(t),H6o=r(DQe," (throws an error)."),DQe.forEach(t),U6o=i(al),dt=n(al,"DIV",{class:!0});var p6=s(dt);T(VL.$$.fragment,p6),J6o=i(p6),kme=n(p6,"P",{});var m1t=s(kme);Y6o=r(m1t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),m1t.forEach(t),K6o=i(p6),Wi=n(p6,"P",{});var Qre=s(Wi);Z6o=r(Qre,`Note:
Loading a model from its configuration file does `),Sme=n(Qre,"STRONG",{});var g1t=s(Sme);e7o=r(g1t,"not"),g1t.forEach(t),o7o=r(Qre,` load the model weights. It only affects the
model\u2019s configuration. Use `),fG=n(Qre,"A",{href:!0});var h1t=s(fG);r7o=r(h1t,"from_pretrained()"),h1t.forEach(t),t7o=r(Qre," to load the model weights."),Qre.forEach(t),a7o=i(p6),T(Ju.$$.fragment,p6),p6.forEach(t),n7o=i(al),Ke=n(al,"DIV",{class:!0});var ia=s(Ke);T(XL.$$.fragment,ia),s7o=i(ia),Rme=n(ia,"P",{});var p1t=s(Rme);l7o=r(p1t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),p1t.forEach(t),i7o=i(ia),Ia=n(ia,"P",{});var _6=s(Ia);d7o=r(_6,"The model class to instantiate is selected based on the "),Pme=n(_6,"CODE",{});var _1t=s(Pme);c7o=r(_1t,"model_type"),_1t.forEach(t),f7o=r(_6,` property of the config object (either
passed as an argument or loaded from `),Bme=n(_6,"CODE",{});var u1t=s(Bme);m7o=r(u1t,"pretrained_model_name_or_path"),u1t.forEach(t),g7o=r(_6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nme=n(_6,"CODE",{});var b1t=s(Nme);h7o=r(b1t,"pretrained_model_name_or_path"),b1t.forEach(t),p7o=r(_6,":"),_6.forEach(t),_7o=i(ia),G=n(ia,"UL",{});var O=s(G);Yu=n(O,"LI",{});var fke=s(Yu);Ime=n(fke,"STRONG",{});var v1t=s(Ime);u7o=r(v1t,"albert"),v1t.forEach(t),b7o=r(fke," \u2014 "),mG=n(fke,"A",{href:!0});var F1t=s(mG);v7o=r(F1t,"AlbertForPreTraining"),F1t.forEach(t),F7o=r(fke," (ALBERT model)"),fke.forEach(t),T7o=i(O),Ku=n(O,"LI",{});var mke=s(Ku);qme=n(mke,"STRONG",{});var T1t=s(qme);M7o=r(T1t,"bart"),T1t.forEach(t),E7o=r(mke," \u2014 "),gG=n(mke,"A",{href:!0});var M1t=s(gG);C7o=r(M1t,"BartForConditionalGeneration"),M1t.forEach(t),w7o=r(mke," (BART model)"),mke.forEach(t),A7o=i(O),Zu=n(O,"LI",{});var gke=s(Zu);jme=n(gke,"STRONG",{});var E1t=s(jme);L7o=r(E1t,"bert"),E1t.forEach(t),y7o=r(gke," \u2014 "),hG=n(gke,"A",{href:!0});var C1t=s(hG);x7o=r(C1t,"BertForPreTraining"),C1t.forEach(t),$7o=r(gke," (BERT model)"),gke.forEach(t),k7o=i(O),e2=n(O,"LI",{});var hke=s(e2);Dme=n(hke,"STRONG",{});var w1t=s(Dme);S7o=r(w1t,"big_bird"),w1t.forEach(t),R7o=r(hke," \u2014 "),pG=n(hke,"A",{href:!0});var A1t=s(pG);P7o=r(A1t,"BigBirdForPreTraining"),A1t.forEach(t),B7o=r(hke," (BigBird model)"),hke.forEach(t),N7o=i(O),o2=n(O,"LI",{});var pke=s(o2);Gme=n(pke,"STRONG",{});var L1t=s(Gme);I7o=r(L1t,"bloom"),L1t.forEach(t),q7o=r(pke," \u2014 "),_G=n(pke,"A",{href:!0});var y1t=s(_G);j7o=r(y1t,"BloomForCausalLM"),y1t.forEach(t),D7o=r(pke," (BLOOM model)"),pke.forEach(t),G7o=i(O),r2=n(O,"LI",{});var _ke=s(r2);Ome=n(_ke,"STRONG",{});var x1t=s(Ome);O7o=r(x1t,"camembert"),x1t.forEach(t),V7o=r(_ke," \u2014 "),uG=n(_ke,"A",{href:!0});var $1t=s(uG);X7o=r($1t,"CamembertForMaskedLM"),$1t.forEach(t),z7o=r(_ke," (CamemBERT model)"),_ke.forEach(t),Q7o=i(O),t2=n(O,"LI",{});var uke=s(t2);Vme=n(uke,"STRONG",{});var k1t=s(Vme);W7o=r(k1t,"ctrl"),k1t.forEach(t),H7o=r(uke," \u2014 "),bG=n(uke,"A",{href:!0});var S1t=s(bG);U7o=r(S1t,"CTRLLMHeadModel"),S1t.forEach(t),J7o=r(uke," (CTRL model)"),uke.forEach(t),Y7o=i(O),a2=n(O,"LI",{});var bke=s(a2);Xme=n(bke,"STRONG",{});var R1t=s(Xme);K7o=r(R1t,"data2vec-text"),R1t.forEach(t),Z7o=r(bke," \u2014 "),vG=n(bke,"A",{href:!0});var P1t=s(vG);eLo=r(P1t,"Data2VecTextForMaskedLM"),P1t.forEach(t),oLo=r(bke," (Data2VecText model)"),bke.forEach(t),rLo=i(O),n2=n(O,"LI",{});var vke=s(n2);zme=n(vke,"STRONG",{});var B1t=s(zme);tLo=r(B1t,"deberta"),B1t.forEach(t),aLo=r(vke," \u2014 "),FG=n(vke,"A",{href:!0});var N1t=s(FG);nLo=r(N1t,"DebertaForMaskedLM"),N1t.forEach(t),sLo=r(vke," (DeBERTa model)"),vke.forEach(t),lLo=i(O),s2=n(O,"LI",{});var Fke=s(s2);Qme=n(Fke,"STRONG",{});var I1t=s(Qme);iLo=r(I1t,"deberta-v2"),I1t.forEach(t),dLo=r(Fke," \u2014 "),TG=n(Fke,"A",{href:!0});var q1t=s(TG);cLo=r(q1t,"DebertaV2ForMaskedLM"),q1t.forEach(t),fLo=r(Fke," (DeBERTa-v2 model)"),Fke.forEach(t),mLo=i(O),l2=n(O,"LI",{});var Tke=s(l2);Wme=n(Tke,"STRONG",{});var j1t=s(Wme);gLo=r(j1t,"distilbert"),j1t.forEach(t),hLo=r(Tke," \u2014 "),MG=n(Tke,"A",{href:!0});var D1t=s(MG);pLo=r(D1t,"DistilBertForMaskedLM"),D1t.forEach(t),_Lo=r(Tke," (DistilBERT model)"),Tke.forEach(t),uLo=i(O),i2=n(O,"LI",{});var Mke=s(i2);Hme=n(Mke,"STRONG",{});var G1t=s(Hme);bLo=r(G1t,"electra"),G1t.forEach(t),vLo=r(Mke," \u2014 "),EG=n(Mke,"A",{href:!0});var O1t=s(EG);FLo=r(O1t,"ElectraForPreTraining"),O1t.forEach(t),TLo=r(Mke," (ELECTRA model)"),Mke.forEach(t),MLo=i(O),d2=n(O,"LI",{});var Eke=s(d2);Ume=n(Eke,"STRONG",{});var V1t=s(Ume);ELo=r(V1t,"flaubert"),V1t.forEach(t),CLo=r(Eke," \u2014 "),CG=n(Eke,"A",{href:!0});var X1t=s(CG);wLo=r(X1t,"FlaubertWithLMHeadModel"),X1t.forEach(t),ALo=r(Eke," (FlauBERT model)"),Eke.forEach(t),LLo=i(O),c2=n(O,"LI",{});var Cke=s(c2);Jme=n(Cke,"STRONG",{});var z1t=s(Jme);yLo=r(z1t,"flava"),z1t.forEach(t),xLo=r(Cke," \u2014 "),wG=n(Cke,"A",{href:!0});var Q1t=s(wG);$Lo=r(Q1t,"FlavaForPreTraining"),Q1t.forEach(t),kLo=r(Cke," (FLAVA model)"),Cke.forEach(t),SLo=i(O),f2=n(O,"LI",{});var wke=s(f2);Yme=n(wke,"STRONG",{});var W1t=s(Yme);RLo=r(W1t,"fnet"),W1t.forEach(t),PLo=r(wke," \u2014 "),AG=n(wke,"A",{href:!0});var H1t=s(AG);BLo=r(H1t,"FNetForPreTraining"),H1t.forEach(t),NLo=r(wke," (FNet model)"),wke.forEach(t),ILo=i(O),m2=n(O,"LI",{});var Ake=s(m2);Kme=n(Ake,"STRONG",{});var U1t=s(Kme);qLo=r(U1t,"fsmt"),U1t.forEach(t),jLo=r(Ake," \u2014 "),LG=n(Ake,"A",{href:!0});var J1t=s(LG);DLo=r(J1t,"FSMTForConditionalGeneration"),J1t.forEach(t),GLo=r(Ake," (FairSeq Machine-Translation model)"),Ake.forEach(t),OLo=i(O),g2=n(O,"LI",{});var Lke=s(g2);Zme=n(Lke,"STRONG",{});var Y1t=s(Zme);VLo=r(Y1t,"funnel"),Y1t.forEach(t),XLo=r(Lke," \u2014 "),yG=n(Lke,"A",{href:!0});var K1t=s(yG);zLo=r(K1t,"FunnelForPreTraining"),K1t.forEach(t),QLo=r(Lke," (Funnel Transformer model)"),Lke.forEach(t),WLo=i(O),h2=n(O,"LI",{});var yke=s(h2);ege=n(yke,"STRONG",{});var Z1t=s(ege);HLo=r(Z1t,"gpt2"),Z1t.forEach(t),ULo=r(yke," \u2014 "),xG=n(yke,"A",{href:!0});var ebt=s(xG);JLo=r(ebt,"GPT2LMHeadModel"),ebt.forEach(t),YLo=r(yke," (OpenAI GPT-2 model)"),yke.forEach(t),KLo=i(O),p2=n(O,"LI",{});var xke=s(p2);oge=n(xke,"STRONG",{});var obt=s(oge);ZLo=r(obt,"ibert"),obt.forEach(t),eyo=r(xke," \u2014 "),$G=n(xke,"A",{href:!0});var rbt=s($G);oyo=r(rbt,"IBertForMaskedLM"),rbt.forEach(t),ryo=r(xke," (I-BERT model)"),xke.forEach(t),tyo=i(O),_2=n(O,"LI",{});var $ke=s(_2);rge=n($ke,"STRONG",{});var tbt=s(rge);ayo=r(tbt,"layoutlm"),tbt.forEach(t),nyo=r($ke," \u2014 "),kG=n($ke,"A",{href:!0});var abt=s(kG);syo=r(abt,"LayoutLMForMaskedLM"),abt.forEach(t),lyo=r($ke," (LayoutLM model)"),$ke.forEach(t),iyo=i(O),u2=n(O,"LI",{});var kke=s(u2);tge=n(kke,"STRONG",{});var nbt=s(tge);dyo=r(nbt,"longformer"),nbt.forEach(t),cyo=r(kke," \u2014 "),SG=n(kke,"A",{href:!0});var sbt=s(SG);fyo=r(sbt,"LongformerForMaskedLM"),sbt.forEach(t),myo=r(kke," (Longformer model)"),kke.forEach(t),gyo=i(O),b2=n(O,"LI",{});var Ske=s(b2);age=n(Ske,"STRONG",{});var lbt=s(age);hyo=r(lbt,"lxmert"),lbt.forEach(t),pyo=r(Ske," \u2014 "),RG=n(Ske,"A",{href:!0});var ibt=s(RG);_yo=r(ibt,"LxmertForPreTraining"),ibt.forEach(t),uyo=r(Ske," (LXMERT model)"),Ske.forEach(t),byo=i(O),v2=n(O,"LI",{});var Rke=s(v2);nge=n(Rke,"STRONG",{});var dbt=s(nge);vyo=r(dbt,"megatron-bert"),dbt.forEach(t),Fyo=r(Rke," \u2014 "),PG=n(Rke,"A",{href:!0});var cbt=s(PG);Tyo=r(cbt,"MegatronBertForPreTraining"),cbt.forEach(t),Myo=r(Rke," (Megatron-BERT model)"),Rke.forEach(t),Eyo=i(O),F2=n(O,"LI",{});var Pke=s(F2);sge=n(Pke,"STRONG",{});var fbt=s(sge);Cyo=r(fbt,"mobilebert"),fbt.forEach(t),wyo=r(Pke," \u2014 "),BG=n(Pke,"A",{href:!0});var mbt=s(BG);Ayo=r(mbt,"MobileBertForPreTraining"),mbt.forEach(t),Lyo=r(Pke," (MobileBERT model)"),Pke.forEach(t),yyo=i(O),T2=n(O,"LI",{});var Bke=s(T2);lge=n(Bke,"STRONG",{});var gbt=s(lge);xyo=r(gbt,"mpnet"),gbt.forEach(t),$yo=r(Bke," \u2014 "),NG=n(Bke,"A",{href:!0});var hbt=s(NG);kyo=r(hbt,"MPNetForMaskedLM"),hbt.forEach(t),Syo=r(Bke," (MPNet model)"),Bke.forEach(t),Ryo=i(O),M2=n(O,"LI",{});var Nke=s(M2);ige=n(Nke,"STRONG",{});var pbt=s(ige);Pyo=r(pbt,"mvp"),pbt.forEach(t),Byo=r(Nke," \u2014 "),IG=n(Nke,"A",{href:!0});var _bt=s(IG);Nyo=r(_bt,"MvpForConditionalGeneration"),_bt.forEach(t),Iyo=r(Nke," (MVP model)"),Nke.forEach(t),qyo=i(O),E2=n(O,"LI",{});var Ike=s(E2);dge=n(Ike,"STRONG",{});var ubt=s(dge);jyo=r(ubt,"nezha"),ubt.forEach(t),Dyo=r(Ike," \u2014 "),qG=n(Ike,"A",{href:!0});var bbt=s(qG);Gyo=r(bbt,"NezhaForPreTraining"),bbt.forEach(t),Oyo=r(Ike," (Nezha model)"),Ike.forEach(t),Vyo=i(O),C2=n(O,"LI",{});var qke=s(C2);cge=n(qke,"STRONG",{});var vbt=s(cge);Xyo=r(vbt,"openai-gpt"),vbt.forEach(t),zyo=r(qke," \u2014 "),jG=n(qke,"A",{href:!0});var Fbt=s(jG);Qyo=r(Fbt,"OpenAIGPTLMHeadModel"),Fbt.forEach(t),Wyo=r(qke," (OpenAI GPT model)"),qke.forEach(t),Hyo=i(O),w2=n(O,"LI",{});var jke=s(w2);fge=n(jke,"STRONG",{});var Tbt=s(fge);Uyo=r(Tbt,"retribert"),Tbt.forEach(t),Jyo=r(jke," \u2014 "),DG=n(jke,"A",{href:!0});var Mbt=s(DG);Yyo=r(Mbt,"RetriBertModel"),Mbt.forEach(t),Kyo=r(jke," (RetriBERT model)"),jke.forEach(t),Zyo=i(O),A2=n(O,"LI",{});var Dke=s(A2);mge=n(Dke,"STRONG",{});var Ebt=s(mge);e9o=r(Ebt,"roberta"),Ebt.forEach(t),o9o=r(Dke," \u2014 "),GG=n(Dke,"A",{href:!0});var Cbt=s(GG);r9o=r(Cbt,"RobertaForMaskedLM"),Cbt.forEach(t),t9o=r(Dke," (RoBERTa model)"),Dke.forEach(t),a9o=i(O),L2=n(O,"LI",{});var Gke=s(L2);gge=n(Gke,"STRONG",{});var wbt=s(gge);n9o=r(wbt,"splinter"),wbt.forEach(t),s9o=r(Gke," \u2014 "),OG=n(Gke,"A",{href:!0});var Abt=s(OG);l9o=r(Abt,"SplinterForPreTraining"),Abt.forEach(t),i9o=r(Gke," (Splinter model)"),Gke.forEach(t),d9o=i(O),y2=n(O,"LI",{});var Oke=s(y2);hge=n(Oke,"STRONG",{});var Lbt=s(hge);c9o=r(Lbt,"squeezebert"),Lbt.forEach(t),f9o=r(Oke," \u2014 "),VG=n(Oke,"A",{href:!0});var ybt=s(VG);m9o=r(ybt,"SqueezeBertForMaskedLM"),ybt.forEach(t),g9o=r(Oke," (SqueezeBERT model)"),Oke.forEach(t),h9o=i(O),x2=n(O,"LI",{});var Vke=s(x2);pge=n(Vke,"STRONG",{});var xbt=s(pge);p9o=r(xbt,"t5"),xbt.forEach(t),_9o=r(Vke," \u2014 "),XG=n(Vke,"A",{href:!0});var $bt=s(XG);u9o=r($bt,"T5ForConditionalGeneration"),$bt.forEach(t),b9o=r(Vke," (T5 model)"),Vke.forEach(t),v9o=i(O),$2=n(O,"LI",{});var Xke=s($2);_ge=n(Xke,"STRONG",{});var kbt=s(_ge);F9o=r(kbt,"tapas"),kbt.forEach(t),T9o=r(Xke," \u2014 "),zG=n(Xke,"A",{href:!0});var Sbt=s(zG);M9o=r(Sbt,"TapasForMaskedLM"),Sbt.forEach(t),E9o=r(Xke," (TAPAS model)"),Xke.forEach(t),C9o=i(O),k2=n(O,"LI",{});var zke=s(k2);uge=n(zke,"STRONG",{});var Rbt=s(uge);w9o=r(Rbt,"transfo-xl"),Rbt.forEach(t),A9o=r(zke," \u2014 "),QG=n(zke,"A",{href:!0});var Pbt=s(QG);L9o=r(Pbt,"TransfoXLLMHeadModel"),Pbt.forEach(t),y9o=r(zke," (Transformer-XL model)"),zke.forEach(t),x9o=i(O),S2=n(O,"LI",{});var Qke=s(S2);bge=n(Qke,"STRONG",{});var Bbt=s(bge);$9o=r(Bbt,"unispeech"),Bbt.forEach(t),k9o=r(Qke," \u2014 "),WG=n(Qke,"A",{href:!0});var Nbt=s(WG);S9o=r(Nbt,"UniSpeechForPreTraining"),Nbt.forEach(t),R9o=r(Qke," (UniSpeech model)"),Qke.forEach(t),P9o=i(O),R2=n(O,"LI",{});var Wke=s(R2);vge=n(Wke,"STRONG",{});var Ibt=s(vge);B9o=r(Ibt,"unispeech-sat"),Ibt.forEach(t),N9o=r(Wke," \u2014 "),HG=n(Wke,"A",{href:!0});var qbt=s(HG);I9o=r(qbt,"UniSpeechSatForPreTraining"),qbt.forEach(t),q9o=r(Wke," (UniSpeechSat model)"),Wke.forEach(t),j9o=i(O),P2=n(O,"LI",{});var Hke=s(P2);Fge=n(Hke,"STRONG",{});var jbt=s(Fge);D9o=r(jbt,"visual_bert"),jbt.forEach(t),G9o=r(Hke," \u2014 "),UG=n(Hke,"A",{href:!0});var Dbt=s(UG);O9o=r(Dbt,"VisualBertForPreTraining"),Dbt.forEach(t),V9o=r(Hke," (VisualBERT model)"),Hke.forEach(t),X9o=i(O),B2=n(O,"LI",{});var Uke=s(B2);Tge=n(Uke,"STRONG",{});var Gbt=s(Tge);z9o=r(Gbt,"vit_mae"),Gbt.forEach(t),Q9o=r(Uke," \u2014 "),JG=n(Uke,"A",{href:!0});var Obt=s(JG);W9o=r(Obt,"ViTMAEForPreTraining"),Obt.forEach(t),H9o=r(Uke," (ViTMAE model)"),Uke.forEach(t),U9o=i(O),N2=n(O,"LI",{});var Jke=s(N2);Mge=n(Jke,"STRONG",{});var Vbt=s(Mge);J9o=r(Vbt,"wav2vec2"),Vbt.forEach(t),Y9o=r(Jke," \u2014 "),YG=n(Jke,"A",{href:!0});var Xbt=s(YG);K9o=r(Xbt,"Wav2Vec2ForPreTraining"),Xbt.forEach(t),Z9o=r(Jke," (Wav2Vec2 model)"),Jke.forEach(t),exo=i(O),I2=n(O,"LI",{});var Yke=s(I2);Ege=n(Yke,"STRONG",{});var zbt=s(Ege);oxo=r(zbt,"wav2vec2-conformer"),zbt.forEach(t),rxo=r(Yke," \u2014 "),KG=n(Yke,"A",{href:!0});var Qbt=s(KG);txo=r(Qbt,"Wav2Vec2ConformerForPreTraining"),Qbt.forEach(t),axo=r(Yke," (Wav2Vec2-Conformer model)"),Yke.forEach(t),nxo=i(O),q2=n(O,"LI",{});var Kke=s(q2);Cge=n(Kke,"STRONG",{});var Wbt=s(Cge);sxo=r(Wbt,"xlm"),Wbt.forEach(t),lxo=r(Kke," \u2014 "),ZG=n(Kke,"A",{href:!0});var Hbt=s(ZG);ixo=r(Hbt,"XLMWithLMHeadModel"),Hbt.forEach(t),dxo=r(Kke," (XLM model)"),Kke.forEach(t),cxo=i(O),j2=n(O,"LI",{});var Zke=s(j2);wge=n(Zke,"STRONG",{});var Ubt=s(wge);fxo=r(Ubt,"xlm-roberta"),Ubt.forEach(t),mxo=r(Zke," \u2014 "),eO=n(Zke,"A",{href:!0});var Jbt=s(eO);gxo=r(Jbt,"XLMRobertaForMaskedLM"),Jbt.forEach(t),hxo=r(Zke," (XLM-RoBERTa model)"),Zke.forEach(t),pxo=i(O),D2=n(O,"LI",{});var eSe=s(D2);Age=n(eSe,"STRONG",{});var Ybt=s(Age);_xo=r(Ybt,"xlm-roberta-xl"),Ybt.forEach(t),uxo=r(eSe," \u2014 "),oO=n(eSe,"A",{href:!0});var Kbt=s(oO);bxo=r(Kbt,"XLMRobertaXLForMaskedLM"),Kbt.forEach(t),vxo=r(eSe," (XLM-RoBERTa-XL model)"),eSe.forEach(t),Fxo=i(O),G2=n(O,"LI",{});var oSe=s(G2);Lge=n(oSe,"STRONG",{});var Zbt=s(Lge);Txo=r(Zbt,"xlnet"),Zbt.forEach(t),Mxo=r(oSe," \u2014 "),rO=n(oSe,"A",{href:!0});var evt=s(rO);Exo=r(evt,"XLNetLMHeadModel"),evt.forEach(t),Cxo=r(oSe," (XLNet model)"),oSe.forEach(t),O.forEach(t),wxo=i(ia),O2=n(ia,"P",{});var rSe=s(O2);Axo=r(rSe,"The model is set in evaluation mode by default using "),yge=n(rSe,"CODE",{});var ovt=s(yge);Lxo=r(ovt,"model.eval()"),ovt.forEach(t),yxo=r(rSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xge=n(rSe,"CODE",{});var rvt=s(xge);xxo=r(rvt,"model.train()"),rvt.forEach(t),rSe.forEach(t),$xo=i(ia),T(V2.$$.fragment,ia),ia.forEach(t),al.forEach(t),BXe=i(f),Hi=n(f,"H2",{class:!0});var GQe=s(Hi);X2=n(GQe,"A",{id:!0,class:!0,href:!0});var tvt=s(X2);$ge=n(tvt,"SPAN",{});var avt=s($ge);T(zL.$$.fragment,avt),avt.forEach(t),tvt.forEach(t),kxo=i(GQe),kge=n(GQe,"SPAN",{});var nvt=s(kge);Sxo=r(nvt,"AutoModelForCausalLM"),nvt.forEach(t),GQe.forEach(t),NXe=i(f),So=n(f,"DIV",{class:!0});var nl=s(So);T(QL.$$.fragment,nl),Rxo=i(nl),Ui=n(nl,"P",{});var Wre=s(Ui);Pxo=r(Wre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),tO=n(Wre,"A",{href:!0});var svt=s(tO);Bxo=r(svt,"from_pretrained()"),svt.forEach(t),Nxo=r(Wre," class method or the "),aO=n(Wre,"A",{href:!0});var lvt=s(aO);Ixo=r(lvt,"from_config()"),lvt.forEach(t),qxo=r(Wre,` class
method.`),Wre.forEach(t),jxo=i(nl),WL=n(nl,"P",{});var OQe=s(WL);Dxo=r(OQe,"This class cannot be instantiated directly using "),Sge=n(OQe,"CODE",{});var ivt=s(Sge);Gxo=r(ivt,"__init__()"),ivt.forEach(t),Oxo=r(OQe," (throws an error)."),OQe.forEach(t),Vxo=i(nl),ct=n(nl,"DIV",{class:!0});var u6=s(ct);T(HL.$$.fragment,u6),Xxo=i(u6),Rge=n(u6,"P",{});var dvt=s(Rge);zxo=r(dvt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),dvt.forEach(t),Qxo=i(u6),Ji=n(u6,"P",{});var Hre=s(Ji);Wxo=r(Hre,`Note:
Loading a model from its configuration file does `),Pge=n(Hre,"STRONG",{});var cvt=s(Pge);Hxo=r(cvt,"not"),cvt.forEach(t),Uxo=r(Hre,` load the model weights. It only affects the
model\u2019s configuration. Use `),nO=n(Hre,"A",{href:!0});var fvt=s(nO);Jxo=r(fvt,"from_pretrained()"),fvt.forEach(t),Yxo=r(Hre," to load the model weights."),Hre.forEach(t),Kxo=i(u6),T(z2.$$.fragment,u6),u6.forEach(t),Zxo=i(nl),Ze=n(nl,"DIV",{class:!0});var da=s(Ze);T(UL.$$.fragment,da),e$o=i(da),Bge=n(da,"P",{});var mvt=s(Bge);o$o=r(mvt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),mvt.forEach(t),r$o=i(da),qa=n(da,"P",{});var b6=s(qa);t$o=r(b6,"The model class to instantiate is selected based on the "),Nge=n(b6,"CODE",{});var gvt=s(Nge);a$o=r(gvt,"model_type"),gvt.forEach(t),n$o=r(b6,` property of the config object (either
passed as an argument or loaded from `),Ige=n(b6,"CODE",{});var hvt=s(Ige);s$o=r(hvt,"pretrained_model_name_or_path"),hvt.forEach(t),l$o=r(b6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qge=n(b6,"CODE",{});var pvt=s(qge);i$o=r(pvt,"pretrained_model_name_or_path"),pvt.forEach(t),d$o=r(b6,":"),b6.forEach(t),c$o=i(da),z=n(da,"UL",{});var Q=s(z);Q2=n(Q,"LI",{});var tSe=s(Q2);jge=n(tSe,"STRONG",{});var _vt=s(jge);f$o=r(_vt,"bart"),_vt.forEach(t),m$o=r(tSe," \u2014 "),sO=n(tSe,"A",{href:!0});var uvt=s(sO);g$o=r(uvt,"BartForCausalLM"),uvt.forEach(t),h$o=r(tSe," (BART model)"),tSe.forEach(t),p$o=i(Q),W2=n(Q,"LI",{});var aSe=s(W2);Dge=n(aSe,"STRONG",{});var bvt=s(Dge);_$o=r(bvt,"bert"),bvt.forEach(t),u$o=r(aSe," \u2014 "),lO=n(aSe,"A",{href:!0});var vvt=s(lO);b$o=r(vvt,"BertLMHeadModel"),vvt.forEach(t),v$o=r(aSe," (BERT model)"),aSe.forEach(t),F$o=i(Q),H2=n(Q,"LI",{});var nSe=s(H2);Gge=n(nSe,"STRONG",{});var Fvt=s(Gge);T$o=r(Fvt,"bert-generation"),Fvt.forEach(t),M$o=r(nSe," \u2014 "),iO=n(nSe,"A",{href:!0});var Tvt=s(iO);E$o=r(Tvt,"BertGenerationDecoder"),Tvt.forEach(t),C$o=r(nSe," (Bert Generation model)"),nSe.forEach(t),w$o=i(Q),U2=n(Q,"LI",{});var sSe=s(U2);Oge=n(sSe,"STRONG",{});var Mvt=s(Oge);A$o=r(Mvt,"big_bird"),Mvt.forEach(t),L$o=r(sSe," \u2014 "),dO=n(sSe,"A",{href:!0});var Evt=s(dO);y$o=r(Evt,"BigBirdForCausalLM"),Evt.forEach(t),x$o=r(sSe," (BigBird model)"),sSe.forEach(t),$$o=i(Q),J2=n(Q,"LI",{});var lSe=s(J2);Vge=n(lSe,"STRONG",{});var Cvt=s(Vge);k$o=r(Cvt,"bigbird_pegasus"),Cvt.forEach(t),S$o=r(lSe," \u2014 "),cO=n(lSe,"A",{href:!0});var wvt=s(cO);R$o=r(wvt,"BigBirdPegasusForCausalLM"),wvt.forEach(t),P$o=r(lSe," (BigBird-Pegasus model)"),lSe.forEach(t),B$o=i(Q),Y2=n(Q,"LI",{});var iSe=s(Y2);Xge=n(iSe,"STRONG",{});var Avt=s(Xge);N$o=r(Avt,"blenderbot"),Avt.forEach(t),I$o=r(iSe," \u2014 "),fO=n(iSe,"A",{href:!0});var Lvt=s(fO);q$o=r(Lvt,"BlenderbotForCausalLM"),Lvt.forEach(t),j$o=r(iSe," (Blenderbot model)"),iSe.forEach(t),D$o=i(Q),K2=n(Q,"LI",{});var dSe=s(K2);zge=n(dSe,"STRONG",{});var yvt=s(zge);G$o=r(yvt,"blenderbot-small"),yvt.forEach(t),O$o=r(dSe," \u2014 "),mO=n(dSe,"A",{href:!0});var xvt=s(mO);V$o=r(xvt,"BlenderbotSmallForCausalLM"),xvt.forEach(t),X$o=r(dSe," (BlenderbotSmall model)"),dSe.forEach(t),z$o=i(Q),Z2=n(Q,"LI",{});var cSe=s(Z2);Qge=n(cSe,"STRONG",{});var $vt=s(Qge);Q$o=r($vt,"bloom"),$vt.forEach(t),W$o=r(cSe," \u2014 "),gO=n(cSe,"A",{href:!0});var kvt=s(gO);H$o=r(kvt,"BloomForCausalLM"),kvt.forEach(t),U$o=r(cSe," (BLOOM model)"),cSe.forEach(t),J$o=i(Q),e1=n(Q,"LI",{});var fSe=s(e1);Wge=n(fSe,"STRONG",{});var Svt=s(Wge);Y$o=r(Svt,"camembert"),Svt.forEach(t),K$o=r(fSe," \u2014 "),hO=n(fSe,"A",{href:!0});var Rvt=s(hO);Z$o=r(Rvt,"CamembertForCausalLM"),Rvt.forEach(t),eko=r(fSe," (CamemBERT model)"),fSe.forEach(t),oko=i(Q),o1=n(Q,"LI",{});var mSe=s(o1);Hge=n(mSe,"STRONG",{});var Pvt=s(Hge);rko=r(Pvt,"codegen"),Pvt.forEach(t),tko=r(mSe," \u2014 "),pO=n(mSe,"A",{href:!0});var Bvt=s(pO);ako=r(Bvt,"CodeGenForCausalLM"),Bvt.forEach(t),nko=r(mSe," (CodeGen model)"),mSe.forEach(t),sko=i(Q),r1=n(Q,"LI",{});var gSe=s(r1);Uge=n(gSe,"STRONG",{});var Nvt=s(Uge);lko=r(Nvt,"ctrl"),Nvt.forEach(t),iko=r(gSe," \u2014 "),_O=n(gSe,"A",{href:!0});var Ivt=s(_O);dko=r(Ivt,"CTRLLMHeadModel"),Ivt.forEach(t),cko=r(gSe," (CTRL model)"),gSe.forEach(t),fko=i(Q),t1=n(Q,"LI",{});var hSe=s(t1);Jge=n(hSe,"STRONG",{});var qvt=s(Jge);mko=r(qvt,"data2vec-text"),qvt.forEach(t),gko=r(hSe," \u2014 "),uO=n(hSe,"A",{href:!0});var jvt=s(uO);hko=r(jvt,"Data2VecTextForCausalLM"),jvt.forEach(t),pko=r(hSe," (Data2VecText model)"),hSe.forEach(t),_ko=i(Q),a1=n(Q,"LI",{});var pSe=s(a1);Yge=n(pSe,"STRONG",{});var Dvt=s(Yge);uko=r(Dvt,"electra"),Dvt.forEach(t),bko=r(pSe," \u2014 "),bO=n(pSe,"A",{href:!0});var Gvt=s(bO);vko=r(Gvt,"ElectraForCausalLM"),Gvt.forEach(t),Fko=r(pSe," (ELECTRA model)"),pSe.forEach(t),Tko=i(Q),n1=n(Q,"LI",{});var _Se=s(n1);Kge=n(_Se,"STRONG",{});var Ovt=s(Kge);Mko=r(Ovt,"gpt2"),Ovt.forEach(t),Eko=r(_Se," \u2014 "),vO=n(_Se,"A",{href:!0});var Vvt=s(vO);Cko=r(Vvt,"GPT2LMHeadModel"),Vvt.forEach(t),wko=r(_Se," (OpenAI GPT-2 model)"),_Se.forEach(t),Ako=i(Q),s1=n(Q,"LI",{});var uSe=s(s1);Zge=n(uSe,"STRONG",{});var Xvt=s(Zge);Lko=r(Xvt,"gpt_neo"),Xvt.forEach(t),yko=r(uSe," \u2014 "),FO=n(uSe,"A",{href:!0});var zvt=s(FO);xko=r(zvt,"GPTNeoForCausalLM"),zvt.forEach(t),$ko=r(uSe," (GPT Neo model)"),uSe.forEach(t),kko=i(Q),l1=n(Q,"LI",{});var bSe=s(l1);ehe=n(bSe,"STRONG",{});var Qvt=s(ehe);Sko=r(Qvt,"gpt_neox"),Qvt.forEach(t),Rko=r(bSe," \u2014 "),TO=n(bSe,"A",{href:!0});var Wvt=s(TO);Pko=r(Wvt,"GPTNeoXForCausalLM"),Wvt.forEach(t),Bko=r(bSe," (GPT NeoX model)"),bSe.forEach(t),Nko=i(Q),i1=n(Q,"LI",{});var vSe=s(i1);ohe=n(vSe,"STRONG",{});var Hvt=s(ohe);Iko=r(Hvt,"gptj"),Hvt.forEach(t),qko=r(vSe," \u2014 "),MO=n(vSe,"A",{href:!0});var Uvt=s(MO);jko=r(Uvt,"GPTJForCausalLM"),Uvt.forEach(t),Dko=r(vSe," (GPT-J model)"),vSe.forEach(t),Gko=i(Q),d1=n(Q,"LI",{});var FSe=s(d1);rhe=n(FSe,"STRONG",{});var Jvt=s(rhe);Oko=r(Jvt,"marian"),Jvt.forEach(t),Vko=r(FSe," \u2014 "),EO=n(FSe,"A",{href:!0});var Yvt=s(EO);Xko=r(Yvt,"MarianForCausalLM"),Yvt.forEach(t),zko=r(FSe," (Marian model)"),FSe.forEach(t),Qko=i(Q),c1=n(Q,"LI",{});var TSe=s(c1);the=n(TSe,"STRONG",{});var Kvt=s(the);Wko=r(Kvt,"mbart"),Kvt.forEach(t),Hko=r(TSe," \u2014 "),CO=n(TSe,"A",{href:!0});var Zvt=s(CO);Uko=r(Zvt,"MBartForCausalLM"),Zvt.forEach(t),Jko=r(TSe," (mBART model)"),TSe.forEach(t),Yko=i(Q),f1=n(Q,"LI",{});var MSe=s(f1);ahe=n(MSe,"STRONG",{});var e0t=s(ahe);Kko=r(e0t,"megatron-bert"),e0t.forEach(t),Zko=r(MSe," \u2014 "),wO=n(MSe,"A",{href:!0});var o0t=s(wO);eSo=r(o0t,"MegatronBertForCausalLM"),o0t.forEach(t),oSo=r(MSe," (Megatron-BERT model)"),MSe.forEach(t),rSo=i(Q),m1=n(Q,"LI",{});var ESe=s(m1);nhe=n(ESe,"STRONG",{});var r0t=s(nhe);tSo=r(r0t,"mvp"),r0t.forEach(t),aSo=r(ESe," \u2014 "),AO=n(ESe,"A",{href:!0});var t0t=s(AO);nSo=r(t0t,"MvpForCausalLM"),t0t.forEach(t),sSo=r(ESe," (MVP model)"),ESe.forEach(t),lSo=i(Q),g1=n(Q,"LI",{});var CSe=s(g1);she=n(CSe,"STRONG",{});var a0t=s(she);iSo=r(a0t,"openai-gpt"),a0t.forEach(t),dSo=r(CSe," \u2014 "),LO=n(CSe,"A",{href:!0});var n0t=s(LO);cSo=r(n0t,"OpenAIGPTLMHeadModel"),n0t.forEach(t),fSo=r(CSe," (OpenAI GPT model)"),CSe.forEach(t),mSo=i(Q),h1=n(Q,"LI",{});var wSe=s(h1);lhe=n(wSe,"STRONG",{});var s0t=s(lhe);gSo=r(s0t,"opt"),s0t.forEach(t),hSo=r(wSe," \u2014 "),yO=n(wSe,"A",{href:!0});var l0t=s(yO);pSo=r(l0t,"OPTForCausalLM"),l0t.forEach(t),_So=r(wSe," (OPT model)"),wSe.forEach(t),uSo=i(Q),p1=n(Q,"LI",{});var ASe=s(p1);ihe=n(ASe,"STRONG",{});var i0t=s(ihe);bSo=r(i0t,"pegasus"),i0t.forEach(t),vSo=r(ASe," \u2014 "),xO=n(ASe,"A",{href:!0});var d0t=s(xO);FSo=r(d0t,"PegasusForCausalLM"),d0t.forEach(t),TSo=r(ASe," (Pegasus model)"),ASe.forEach(t),MSo=i(Q),_1=n(Q,"LI",{});var LSe=s(_1);dhe=n(LSe,"STRONG",{});var c0t=s(dhe);ESo=r(c0t,"plbart"),c0t.forEach(t),CSo=r(LSe," \u2014 "),$O=n(LSe,"A",{href:!0});var f0t=s($O);wSo=r(f0t,"PLBartForCausalLM"),f0t.forEach(t),ASo=r(LSe," (PLBart model)"),LSe.forEach(t),LSo=i(Q),u1=n(Q,"LI",{});var ySe=s(u1);che=n(ySe,"STRONG",{});var m0t=s(che);ySo=r(m0t,"prophetnet"),m0t.forEach(t),xSo=r(ySe," \u2014 "),kO=n(ySe,"A",{href:!0});var g0t=s(kO);$So=r(g0t,"ProphetNetForCausalLM"),g0t.forEach(t),kSo=r(ySe," (ProphetNet model)"),ySe.forEach(t),SSo=i(Q),b1=n(Q,"LI",{});var xSe=s(b1);fhe=n(xSe,"STRONG",{});var h0t=s(fhe);RSo=r(h0t,"qdqbert"),h0t.forEach(t),PSo=r(xSe," \u2014 "),SO=n(xSe,"A",{href:!0});var p0t=s(SO);BSo=r(p0t,"QDQBertLMHeadModel"),p0t.forEach(t),NSo=r(xSe," (QDQBert model)"),xSe.forEach(t),ISo=i(Q),v1=n(Q,"LI",{});var $Se=s(v1);mhe=n($Se,"STRONG",{});var _0t=s(mhe);qSo=r(_0t,"reformer"),_0t.forEach(t),jSo=r($Se," \u2014 "),RO=n($Se,"A",{href:!0});var u0t=s(RO);DSo=r(u0t,"ReformerModelWithLMHead"),u0t.forEach(t),GSo=r($Se," (Reformer model)"),$Se.forEach(t),OSo=i(Q),F1=n(Q,"LI",{});var kSe=s(F1);ghe=n(kSe,"STRONG",{});var b0t=s(ghe);VSo=r(b0t,"rembert"),b0t.forEach(t),XSo=r(kSe," \u2014 "),PO=n(kSe,"A",{href:!0});var v0t=s(PO);zSo=r(v0t,"RemBertForCausalLM"),v0t.forEach(t),QSo=r(kSe," (RemBERT model)"),kSe.forEach(t),WSo=i(Q),T1=n(Q,"LI",{});var SSe=s(T1);hhe=n(SSe,"STRONG",{});var F0t=s(hhe);HSo=r(F0t,"roberta"),F0t.forEach(t),USo=r(SSe," \u2014 "),BO=n(SSe,"A",{href:!0});var T0t=s(BO);JSo=r(T0t,"RobertaForCausalLM"),T0t.forEach(t),YSo=r(SSe," (RoBERTa model)"),SSe.forEach(t),KSo=i(Q),M1=n(Q,"LI",{});var RSe=s(M1);phe=n(RSe,"STRONG",{});var M0t=s(phe);ZSo=r(M0t,"roformer"),M0t.forEach(t),eRo=r(RSe," \u2014 "),NO=n(RSe,"A",{href:!0});var E0t=s(NO);oRo=r(E0t,"RoFormerForCausalLM"),E0t.forEach(t),rRo=r(RSe," (RoFormer model)"),RSe.forEach(t),tRo=i(Q),E1=n(Q,"LI",{});var PSe=s(E1);_he=n(PSe,"STRONG",{});var C0t=s(_he);aRo=r(C0t,"speech_to_text_2"),C0t.forEach(t),nRo=r(PSe," \u2014 "),IO=n(PSe,"A",{href:!0});var w0t=s(IO);sRo=r(w0t,"Speech2Text2ForCausalLM"),w0t.forEach(t),lRo=r(PSe," (Speech2Text2 model)"),PSe.forEach(t),iRo=i(Q),C1=n(Q,"LI",{});var BSe=s(C1);uhe=n(BSe,"STRONG",{});var A0t=s(uhe);dRo=r(A0t,"transfo-xl"),A0t.forEach(t),cRo=r(BSe," \u2014 "),qO=n(BSe,"A",{href:!0});var L0t=s(qO);fRo=r(L0t,"TransfoXLLMHeadModel"),L0t.forEach(t),mRo=r(BSe," (Transformer-XL model)"),BSe.forEach(t),gRo=i(Q),w1=n(Q,"LI",{});var NSe=s(w1);bhe=n(NSe,"STRONG",{});var y0t=s(bhe);hRo=r(y0t,"trocr"),y0t.forEach(t),pRo=r(NSe," \u2014 "),jO=n(NSe,"A",{href:!0});var x0t=s(jO);_Ro=r(x0t,"TrOCRForCausalLM"),x0t.forEach(t),uRo=r(NSe," (TrOCR model)"),NSe.forEach(t),bRo=i(Q),A1=n(Q,"LI",{});var ISe=s(A1);vhe=n(ISe,"STRONG",{});var $0t=s(vhe);vRo=r($0t,"xglm"),$0t.forEach(t),FRo=r(ISe," \u2014 "),DO=n(ISe,"A",{href:!0});var k0t=s(DO);TRo=r(k0t,"XGLMForCausalLM"),k0t.forEach(t),MRo=r(ISe," (XGLM model)"),ISe.forEach(t),ERo=i(Q),L1=n(Q,"LI",{});var qSe=s(L1);Fhe=n(qSe,"STRONG",{});var S0t=s(Fhe);CRo=r(S0t,"xlm"),S0t.forEach(t),wRo=r(qSe," \u2014 "),GO=n(qSe,"A",{href:!0});var R0t=s(GO);ARo=r(R0t,"XLMWithLMHeadModel"),R0t.forEach(t),LRo=r(qSe," (XLM model)"),qSe.forEach(t),yRo=i(Q),y1=n(Q,"LI",{});var jSe=s(y1);The=n(jSe,"STRONG",{});var P0t=s(The);xRo=r(P0t,"xlm-prophetnet"),P0t.forEach(t),$Ro=r(jSe," \u2014 "),OO=n(jSe,"A",{href:!0});var B0t=s(OO);kRo=r(B0t,"XLMProphetNetForCausalLM"),B0t.forEach(t),SRo=r(jSe," (XLM-ProphetNet model)"),jSe.forEach(t),RRo=i(Q),x1=n(Q,"LI",{});var DSe=s(x1);Mhe=n(DSe,"STRONG",{});var N0t=s(Mhe);PRo=r(N0t,"xlm-roberta"),N0t.forEach(t),BRo=r(DSe," \u2014 "),VO=n(DSe,"A",{href:!0});var I0t=s(VO);NRo=r(I0t,"XLMRobertaForCausalLM"),I0t.forEach(t),IRo=r(DSe," (XLM-RoBERTa model)"),DSe.forEach(t),qRo=i(Q),$1=n(Q,"LI",{});var GSe=s($1);Ehe=n(GSe,"STRONG",{});var q0t=s(Ehe);jRo=r(q0t,"xlm-roberta-xl"),q0t.forEach(t),DRo=r(GSe," \u2014 "),XO=n(GSe,"A",{href:!0});var j0t=s(XO);GRo=r(j0t,"XLMRobertaXLForCausalLM"),j0t.forEach(t),ORo=r(GSe," (XLM-RoBERTa-XL model)"),GSe.forEach(t),VRo=i(Q),k1=n(Q,"LI",{});var OSe=s(k1);Che=n(OSe,"STRONG",{});var D0t=s(Che);XRo=r(D0t,"xlnet"),D0t.forEach(t),zRo=r(OSe," \u2014 "),zO=n(OSe,"A",{href:!0});var G0t=s(zO);QRo=r(G0t,"XLNetLMHeadModel"),G0t.forEach(t),WRo=r(OSe," (XLNet model)"),OSe.forEach(t),Q.forEach(t),HRo=i(da),S1=n(da,"P",{});var VSe=s(S1);URo=r(VSe,"The model is set in evaluation mode by default using "),whe=n(VSe,"CODE",{});var O0t=s(whe);JRo=r(O0t,"model.eval()"),O0t.forEach(t),YRo=r(VSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ahe=n(VSe,"CODE",{});var V0t=s(Ahe);KRo=r(V0t,"model.train()"),V0t.forEach(t),VSe.forEach(t),ZRo=i(da),T(R1.$$.fragment,da),da.forEach(t),nl.forEach(t),IXe=i(f),Yi=n(f,"H2",{class:!0});var VQe=s(Yi);P1=n(VQe,"A",{id:!0,class:!0,href:!0});var X0t=s(P1);Lhe=n(X0t,"SPAN",{});var z0t=s(Lhe);T(JL.$$.fragment,z0t),z0t.forEach(t),X0t.forEach(t),ePo=i(VQe),yhe=n(VQe,"SPAN",{});var Q0t=s(yhe);oPo=r(Q0t,"AutoModelForMaskedLM"),Q0t.forEach(t),VQe.forEach(t),qXe=i(f),Ro=n(f,"DIV",{class:!0});var sl=s(Ro);T(YL.$$.fragment,sl),rPo=i(sl),Ki=n(sl,"P",{});var Ure=s(Ki);tPo=r(Ure,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),QO=n(Ure,"A",{href:!0});var W0t=s(QO);aPo=r(W0t,"from_pretrained()"),W0t.forEach(t),nPo=r(Ure," class method or the "),WO=n(Ure,"A",{href:!0});var H0t=s(WO);sPo=r(H0t,"from_config()"),H0t.forEach(t),lPo=r(Ure,` class
method.`),Ure.forEach(t),iPo=i(sl),KL=n(sl,"P",{});var XQe=s(KL);dPo=r(XQe,"This class cannot be instantiated directly using "),xhe=n(XQe,"CODE",{});var U0t=s(xhe);cPo=r(U0t,"__init__()"),U0t.forEach(t),fPo=r(XQe," (throws an error)."),XQe.forEach(t),mPo=i(sl),ft=n(sl,"DIV",{class:!0});var v6=s(ft);T(ZL.$$.fragment,v6),gPo=i(v6),$he=n(v6,"P",{});var J0t=s($he);hPo=r(J0t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),J0t.forEach(t),pPo=i(v6),Zi=n(v6,"P",{});var Jre=s(Zi);_Po=r(Jre,`Note:
Loading a model from its configuration file does `),khe=n(Jre,"STRONG",{});var Y0t=s(khe);uPo=r(Y0t,"not"),Y0t.forEach(t),bPo=r(Jre,` load the model weights. It only affects the
model\u2019s configuration. Use `),HO=n(Jre,"A",{href:!0});var K0t=s(HO);vPo=r(K0t,"from_pretrained()"),K0t.forEach(t),FPo=r(Jre," to load the model weights."),Jre.forEach(t),TPo=i(v6),T(B1.$$.fragment,v6),v6.forEach(t),MPo=i(sl),eo=n(sl,"DIV",{class:!0});var ca=s(eo);T(ey.$$.fragment,ca),EPo=i(ca),She=n(ca,"P",{});var Z0t=s(She);CPo=r(Z0t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Z0t.forEach(t),wPo=i(ca),ja=n(ca,"P",{});var F6=s(ja);APo=r(F6,"The model class to instantiate is selected based on the "),Rhe=n(F6,"CODE",{});var eFt=s(Rhe);LPo=r(eFt,"model_type"),eFt.forEach(t),yPo=r(F6,` property of the config object (either
passed as an argument or loaded from `),Phe=n(F6,"CODE",{});var oFt=s(Phe);xPo=r(oFt,"pretrained_model_name_or_path"),oFt.forEach(t),$Po=r(F6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bhe=n(F6,"CODE",{});var rFt=s(Bhe);kPo=r(rFt,"pretrained_model_name_or_path"),rFt.forEach(t),SPo=r(F6,":"),F6.forEach(t),RPo=i(ca),W=n(ca,"UL",{});var H=s(W);N1=n(H,"LI",{});var XSe=s(N1);Nhe=n(XSe,"STRONG",{});var tFt=s(Nhe);PPo=r(tFt,"albert"),tFt.forEach(t),BPo=r(XSe," \u2014 "),UO=n(XSe,"A",{href:!0});var aFt=s(UO);NPo=r(aFt,"AlbertForMaskedLM"),aFt.forEach(t),IPo=r(XSe," (ALBERT model)"),XSe.forEach(t),qPo=i(H),I1=n(H,"LI",{});var zSe=s(I1);Ihe=n(zSe,"STRONG",{});var nFt=s(Ihe);jPo=r(nFt,"bart"),nFt.forEach(t),DPo=r(zSe," \u2014 "),JO=n(zSe,"A",{href:!0});var sFt=s(JO);GPo=r(sFt,"BartForConditionalGeneration"),sFt.forEach(t),OPo=r(zSe," (BART model)"),zSe.forEach(t),VPo=i(H),q1=n(H,"LI",{});var QSe=s(q1);qhe=n(QSe,"STRONG",{});var lFt=s(qhe);XPo=r(lFt,"bert"),lFt.forEach(t),zPo=r(QSe," \u2014 "),YO=n(QSe,"A",{href:!0});var iFt=s(YO);QPo=r(iFt,"BertForMaskedLM"),iFt.forEach(t),WPo=r(QSe," (BERT model)"),QSe.forEach(t),HPo=i(H),j1=n(H,"LI",{});var WSe=s(j1);jhe=n(WSe,"STRONG",{});var dFt=s(jhe);UPo=r(dFt,"big_bird"),dFt.forEach(t),JPo=r(WSe," \u2014 "),KO=n(WSe,"A",{href:!0});var cFt=s(KO);YPo=r(cFt,"BigBirdForMaskedLM"),cFt.forEach(t),KPo=r(WSe," (BigBird model)"),WSe.forEach(t),ZPo=i(H),D1=n(H,"LI",{});var HSe=s(D1);Dhe=n(HSe,"STRONG",{});var fFt=s(Dhe);eBo=r(fFt,"camembert"),fFt.forEach(t),oBo=r(HSe," \u2014 "),ZO=n(HSe,"A",{href:!0});var mFt=s(ZO);rBo=r(mFt,"CamembertForMaskedLM"),mFt.forEach(t),tBo=r(HSe," (CamemBERT model)"),HSe.forEach(t),aBo=i(H),G1=n(H,"LI",{});var USe=s(G1);Ghe=n(USe,"STRONG",{});var gFt=s(Ghe);nBo=r(gFt,"convbert"),gFt.forEach(t),sBo=r(USe," \u2014 "),eV=n(USe,"A",{href:!0});var hFt=s(eV);lBo=r(hFt,"ConvBertForMaskedLM"),hFt.forEach(t),iBo=r(USe," (ConvBERT model)"),USe.forEach(t),dBo=i(H),O1=n(H,"LI",{});var JSe=s(O1);Ohe=n(JSe,"STRONG",{});var pFt=s(Ohe);cBo=r(pFt,"data2vec-text"),pFt.forEach(t),fBo=r(JSe," \u2014 "),oV=n(JSe,"A",{href:!0});var _Ft=s(oV);mBo=r(_Ft,"Data2VecTextForMaskedLM"),_Ft.forEach(t),gBo=r(JSe," (Data2VecText model)"),JSe.forEach(t),hBo=i(H),V1=n(H,"LI",{});var YSe=s(V1);Vhe=n(YSe,"STRONG",{});var uFt=s(Vhe);pBo=r(uFt,"deberta"),uFt.forEach(t),_Bo=r(YSe," \u2014 "),rV=n(YSe,"A",{href:!0});var bFt=s(rV);uBo=r(bFt,"DebertaForMaskedLM"),bFt.forEach(t),bBo=r(YSe," (DeBERTa model)"),YSe.forEach(t),vBo=i(H),X1=n(H,"LI",{});var KSe=s(X1);Xhe=n(KSe,"STRONG",{});var vFt=s(Xhe);FBo=r(vFt,"deberta-v2"),vFt.forEach(t),TBo=r(KSe," \u2014 "),tV=n(KSe,"A",{href:!0});var FFt=s(tV);MBo=r(FFt,"DebertaV2ForMaskedLM"),FFt.forEach(t),EBo=r(KSe," (DeBERTa-v2 model)"),KSe.forEach(t),CBo=i(H),z1=n(H,"LI",{});var ZSe=s(z1);zhe=n(ZSe,"STRONG",{});var TFt=s(zhe);wBo=r(TFt,"distilbert"),TFt.forEach(t),ABo=r(ZSe," \u2014 "),aV=n(ZSe,"A",{href:!0});var MFt=s(aV);LBo=r(MFt,"DistilBertForMaskedLM"),MFt.forEach(t),yBo=r(ZSe," (DistilBERT model)"),ZSe.forEach(t),xBo=i(H),Q1=n(H,"LI",{});var eRe=s(Q1);Qhe=n(eRe,"STRONG",{});var EFt=s(Qhe);$Bo=r(EFt,"electra"),EFt.forEach(t),kBo=r(eRe," \u2014 "),nV=n(eRe,"A",{href:!0});var CFt=s(nV);SBo=r(CFt,"ElectraForMaskedLM"),CFt.forEach(t),RBo=r(eRe," (ELECTRA model)"),eRe.forEach(t),PBo=i(H),W1=n(H,"LI",{});var oRe=s(W1);Whe=n(oRe,"STRONG",{});var wFt=s(Whe);BBo=r(wFt,"flaubert"),wFt.forEach(t),NBo=r(oRe," \u2014 "),sV=n(oRe,"A",{href:!0});var AFt=s(sV);IBo=r(AFt,"FlaubertWithLMHeadModel"),AFt.forEach(t),qBo=r(oRe," (FlauBERT model)"),oRe.forEach(t),jBo=i(H),H1=n(H,"LI",{});var rRe=s(H1);Hhe=n(rRe,"STRONG",{});var LFt=s(Hhe);DBo=r(LFt,"fnet"),LFt.forEach(t),GBo=r(rRe," \u2014 "),lV=n(rRe,"A",{href:!0});var yFt=s(lV);OBo=r(yFt,"FNetForMaskedLM"),yFt.forEach(t),VBo=r(rRe," (FNet model)"),rRe.forEach(t),XBo=i(H),U1=n(H,"LI",{});var tRe=s(U1);Uhe=n(tRe,"STRONG",{});var xFt=s(Uhe);zBo=r(xFt,"funnel"),xFt.forEach(t),QBo=r(tRe," \u2014 "),iV=n(tRe,"A",{href:!0});var $Ft=s(iV);WBo=r($Ft,"FunnelForMaskedLM"),$Ft.forEach(t),HBo=r(tRe," (Funnel Transformer model)"),tRe.forEach(t),UBo=i(H),J1=n(H,"LI",{});var aRe=s(J1);Jhe=n(aRe,"STRONG",{});var kFt=s(Jhe);JBo=r(kFt,"ibert"),kFt.forEach(t),YBo=r(aRe," \u2014 "),dV=n(aRe,"A",{href:!0});var SFt=s(dV);KBo=r(SFt,"IBertForMaskedLM"),SFt.forEach(t),ZBo=r(aRe," (I-BERT model)"),aRe.forEach(t),eNo=i(H),Y1=n(H,"LI",{});var nRe=s(Y1);Yhe=n(nRe,"STRONG",{});var RFt=s(Yhe);oNo=r(RFt,"layoutlm"),RFt.forEach(t),rNo=r(nRe," \u2014 "),cV=n(nRe,"A",{href:!0});var PFt=s(cV);tNo=r(PFt,"LayoutLMForMaskedLM"),PFt.forEach(t),aNo=r(nRe," (LayoutLM model)"),nRe.forEach(t),nNo=i(H),K1=n(H,"LI",{});var sRe=s(K1);Khe=n(sRe,"STRONG",{});var BFt=s(Khe);sNo=r(BFt,"longformer"),BFt.forEach(t),lNo=r(sRe," \u2014 "),fV=n(sRe,"A",{href:!0});var NFt=s(fV);iNo=r(NFt,"LongformerForMaskedLM"),NFt.forEach(t),dNo=r(sRe," (Longformer model)"),sRe.forEach(t),cNo=i(H),Z1=n(H,"LI",{});var lRe=s(Z1);Zhe=n(lRe,"STRONG",{});var IFt=s(Zhe);fNo=r(IFt,"luke"),IFt.forEach(t),mNo=r(lRe," \u2014 "),mV=n(lRe,"A",{href:!0});var qFt=s(mV);gNo=r(qFt,"LukeForMaskedLM"),qFt.forEach(t),hNo=r(lRe," (LUKE model)"),lRe.forEach(t),pNo=i(H),eb=n(H,"LI",{});var iRe=s(eb);epe=n(iRe,"STRONG",{});var jFt=s(epe);_No=r(jFt,"mbart"),jFt.forEach(t),uNo=r(iRe," \u2014 "),gV=n(iRe,"A",{href:!0});var DFt=s(gV);bNo=r(DFt,"MBartForConditionalGeneration"),DFt.forEach(t),vNo=r(iRe," (mBART model)"),iRe.forEach(t),FNo=i(H),ob=n(H,"LI",{});var dRe=s(ob);ope=n(dRe,"STRONG",{});var GFt=s(ope);TNo=r(GFt,"megatron-bert"),GFt.forEach(t),MNo=r(dRe," \u2014 "),hV=n(dRe,"A",{href:!0});var OFt=s(hV);ENo=r(OFt,"MegatronBertForMaskedLM"),OFt.forEach(t),CNo=r(dRe," (Megatron-BERT model)"),dRe.forEach(t),wNo=i(H),rb=n(H,"LI",{});var cRe=s(rb);rpe=n(cRe,"STRONG",{});var VFt=s(rpe);ANo=r(VFt,"mobilebert"),VFt.forEach(t),LNo=r(cRe," \u2014 "),pV=n(cRe,"A",{href:!0});var XFt=s(pV);yNo=r(XFt,"MobileBertForMaskedLM"),XFt.forEach(t),xNo=r(cRe," (MobileBERT model)"),cRe.forEach(t),$No=i(H),tb=n(H,"LI",{});var fRe=s(tb);tpe=n(fRe,"STRONG",{});var zFt=s(tpe);kNo=r(zFt,"mpnet"),zFt.forEach(t),SNo=r(fRe," \u2014 "),_V=n(fRe,"A",{href:!0});var QFt=s(_V);RNo=r(QFt,"MPNetForMaskedLM"),QFt.forEach(t),PNo=r(fRe," (MPNet model)"),fRe.forEach(t),BNo=i(H),ab=n(H,"LI",{});var mRe=s(ab);ape=n(mRe,"STRONG",{});var WFt=s(ape);NNo=r(WFt,"mvp"),WFt.forEach(t),INo=r(mRe," \u2014 "),uV=n(mRe,"A",{href:!0});var HFt=s(uV);qNo=r(HFt,"MvpForConditionalGeneration"),HFt.forEach(t),jNo=r(mRe," (MVP model)"),mRe.forEach(t),DNo=i(H),nb=n(H,"LI",{});var gRe=s(nb);npe=n(gRe,"STRONG",{});var UFt=s(npe);GNo=r(UFt,"nezha"),UFt.forEach(t),ONo=r(gRe," \u2014 "),bV=n(gRe,"A",{href:!0});var JFt=s(bV);VNo=r(JFt,"NezhaForMaskedLM"),JFt.forEach(t),XNo=r(gRe," (Nezha model)"),gRe.forEach(t),zNo=i(H),sb=n(H,"LI",{});var hRe=s(sb);spe=n(hRe,"STRONG",{});var YFt=s(spe);QNo=r(YFt,"nystromformer"),YFt.forEach(t),WNo=r(hRe," \u2014 "),vV=n(hRe,"A",{href:!0});var KFt=s(vV);HNo=r(KFt,"NystromformerForMaskedLM"),KFt.forEach(t),UNo=r(hRe," (Nystr\xF6mformer model)"),hRe.forEach(t),JNo=i(H),lb=n(H,"LI",{});var pRe=s(lb);lpe=n(pRe,"STRONG",{});var ZFt=s(lpe);YNo=r(ZFt,"perceiver"),ZFt.forEach(t),KNo=r(pRe," \u2014 "),FV=n(pRe,"A",{href:!0});var eTt=s(FV);ZNo=r(eTt,"PerceiverForMaskedLM"),eTt.forEach(t),eIo=r(pRe," (Perceiver model)"),pRe.forEach(t),oIo=i(H),ib=n(H,"LI",{});var _Re=s(ib);ipe=n(_Re,"STRONG",{});var oTt=s(ipe);rIo=r(oTt,"qdqbert"),oTt.forEach(t),tIo=r(_Re," \u2014 "),TV=n(_Re,"A",{href:!0});var rTt=s(TV);aIo=r(rTt,"QDQBertForMaskedLM"),rTt.forEach(t),nIo=r(_Re," (QDQBert model)"),_Re.forEach(t),sIo=i(H),db=n(H,"LI",{});var uRe=s(db);dpe=n(uRe,"STRONG",{});var tTt=s(dpe);lIo=r(tTt,"reformer"),tTt.forEach(t),iIo=r(uRe," \u2014 "),MV=n(uRe,"A",{href:!0});var aTt=s(MV);dIo=r(aTt,"ReformerForMaskedLM"),aTt.forEach(t),cIo=r(uRe," (Reformer model)"),uRe.forEach(t),fIo=i(H),cb=n(H,"LI",{});var bRe=s(cb);cpe=n(bRe,"STRONG",{});var nTt=s(cpe);mIo=r(nTt,"rembert"),nTt.forEach(t),gIo=r(bRe," \u2014 "),EV=n(bRe,"A",{href:!0});var sTt=s(EV);hIo=r(sTt,"RemBertForMaskedLM"),sTt.forEach(t),pIo=r(bRe," (RemBERT model)"),bRe.forEach(t),_Io=i(H),fb=n(H,"LI",{});var vRe=s(fb);fpe=n(vRe,"STRONG",{});var lTt=s(fpe);uIo=r(lTt,"roberta"),lTt.forEach(t),bIo=r(vRe," \u2014 "),CV=n(vRe,"A",{href:!0});var iTt=s(CV);vIo=r(iTt,"RobertaForMaskedLM"),iTt.forEach(t),FIo=r(vRe," (RoBERTa model)"),vRe.forEach(t),TIo=i(H),mb=n(H,"LI",{});var FRe=s(mb);mpe=n(FRe,"STRONG",{});var dTt=s(mpe);MIo=r(dTt,"roformer"),dTt.forEach(t),EIo=r(FRe," \u2014 "),wV=n(FRe,"A",{href:!0});var cTt=s(wV);CIo=r(cTt,"RoFormerForMaskedLM"),cTt.forEach(t),wIo=r(FRe," (RoFormer model)"),FRe.forEach(t),AIo=i(H),gb=n(H,"LI",{});var TRe=s(gb);gpe=n(TRe,"STRONG",{});var fTt=s(gpe);LIo=r(fTt,"squeezebert"),fTt.forEach(t),yIo=r(TRe," \u2014 "),AV=n(TRe,"A",{href:!0});var mTt=s(AV);xIo=r(mTt,"SqueezeBertForMaskedLM"),mTt.forEach(t),$Io=r(TRe," (SqueezeBERT model)"),TRe.forEach(t),kIo=i(H),hb=n(H,"LI",{});var MRe=s(hb);hpe=n(MRe,"STRONG",{});var gTt=s(hpe);SIo=r(gTt,"tapas"),gTt.forEach(t),RIo=r(MRe," \u2014 "),LV=n(MRe,"A",{href:!0});var hTt=s(LV);PIo=r(hTt,"TapasForMaskedLM"),hTt.forEach(t),BIo=r(MRe," (TAPAS model)"),MRe.forEach(t),NIo=i(H),pb=n(H,"LI",{});var ERe=s(pb);ppe=n(ERe,"STRONG",{});var pTt=s(ppe);IIo=r(pTt,"wav2vec2"),pTt.forEach(t),qIo=r(ERe," \u2014 "),_pe=n(ERe,"CODE",{});var _Tt=s(_pe);jIo=r(_Tt,"Wav2Vec2ForMaskedLM"),_Tt.forEach(t),DIo=r(ERe," (Wav2Vec2 model)"),ERe.forEach(t),GIo=i(H),_b=n(H,"LI",{});var CRe=s(_b);upe=n(CRe,"STRONG",{});var uTt=s(upe);OIo=r(uTt,"xlm"),uTt.forEach(t),VIo=r(CRe," \u2014 "),yV=n(CRe,"A",{href:!0});var bTt=s(yV);XIo=r(bTt,"XLMWithLMHeadModel"),bTt.forEach(t),zIo=r(CRe," (XLM model)"),CRe.forEach(t),QIo=i(H),ub=n(H,"LI",{});var wRe=s(ub);bpe=n(wRe,"STRONG",{});var vTt=s(bpe);WIo=r(vTt,"xlm-roberta"),vTt.forEach(t),HIo=r(wRe," \u2014 "),xV=n(wRe,"A",{href:!0});var FTt=s(xV);UIo=r(FTt,"XLMRobertaForMaskedLM"),FTt.forEach(t),JIo=r(wRe," (XLM-RoBERTa model)"),wRe.forEach(t),YIo=i(H),bb=n(H,"LI",{});var ARe=s(bb);vpe=n(ARe,"STRONG",{});var TTt=s(vpe);KIo=r(TTt,"xlm-roberta-xl"),TTt.forEach(t),ZIo=r(ARe," \u2014 "),$V=n(ARe,"A",{href:!0});var MTt=s($V);eqo=r(MTt,"XLMRobertaXLForMaskedLM"),MTt.forEach(t),oqo=r(ARe," (XLM-RoBERTa-XL model)"),ARe.forEach(t),rqo=i(H),vb=n(H,"LI",{});var LRe=s(vb);Fpe=n(LRe,"STRONG",{});var ETt=s(Fpe);tqo=r(ETt,"yoso"),ETt.forEach(t),aqo=r(LRe," \u2014 "),kV=n(LRe,"A",{href:!0});var CTt=s(kV);nqo=r(CTt,"YosoForMaskedLM"),CTt.forEach(t),sqo=r(LRe," (YOSO model)"),LRe.forEach(t),H.forEach(t),lqo=i(ca),Fb=n(ca,"P",{});var yRe=s(Fb);iqo=r(yRe,"The model is set in evaluation mode by default using "),Tpe=n(yRe,"CODE",{});var wTt=s(Tpe);dqo=r(wTt,"model.eval()"),wTt.forEach(t),cqo=r(yRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mpe=n(yRe,"CODE",{});var ATt=s(Mpe);fqo=r(ATt,"model.train()"),ATt.forEach(t),yRe.forEach(t),mqo=i(ca),T(Tb.$$.fragment,ca),ca.forEach(t),sl.forEach(t),jXe=i(f),ed=n(f,"H2",{class:!0});var zQe=s(ed);Mb=n(zQe,"A",{id:!0,class:!0,href:!0});var LTt=s(Mb);Epe=n(LTt,"SPAN",{});var yTt=s(Epe);T(oy.$$.fragment,yTt),yTt.forEach(t),LTt.forEach(t),gqo=i(zQe),Cpe=n(zQe,"SPAN",{});var xTt=s(Cpe);hqo=r(xTt,"AutoModelForSeq2SeqLM"),xTt.forEach(t),zQe.forEach(t),DXe=i(f),Po=n(f,"DIV",{class:!0});var ll=s(Po);T(ry.$$.fragment,ll),pqo=i(ll),od=n(ll,"P",{});var Yre=s(od);_qo=r(Yre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),SV=n(Yre,"A",{href:!0});var $Tt=s(SV);uqo=r($Tt,"from_pretrained()"),$Tt.forEach(t),bqo=r(Yre," class method or the "),RV=n(Yre,"A",{href:!0});var kTt=s(RV);vqo=r(kTt,"from_config()"),kTt.forEach(t),Fqo=r(Yre,` class
method.`),Yre.forEach(t),Tqo=i(ll),ty=n(ll,"P",{});var QQe=s(ty);Mqo=r(QQe,"This class cannot be instantiated directly using "),wpe=n(QQe,"CODE",{});var STt=s(wpe);Eqo=r(STt,"__init__()"),STt.forEach(t),Cqo=r(QQe," (throws an error)."),QQe.forEach(t),wqo=i(ll),mt=n(ll,"DIV",{class:!0});var T6=s(mt);T(ay.$$.fragment,T6),Aqo=i(T6),Ape=n(T6,"P",{});var RTt=s(Ape);Lqo=r(RTt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),RTt.forEach(t),yqo=i(T6),rd=n(T6,"P",{});var Kre=s(rd);xqo=r(Kre,`Note:
Loading a model from its configuration file does `),Lpe=n(Kre,"STRONG",{});var PTt=s(Lpe);$qo=r(PTt,"not"),PTt.forEach(t),kqo=r(Kre,` load the model weights. It only affects the
model\u2019s configuration. Use `),PV=n(Kre,"A",{href:!0});var BTt=s(PV);Sqo=r(BTt,"from_pretrained()"),BTt.forEach(t),Rqo=r(Kre," to load the model weights."),Kre.forEach(t),Pqo=i(T6),T(Eb.$$.fragment,T6),T6.forEach(t),Bqo=i(ll),oo=n(ll,"DIV",{class:!0});var fa=s(oo);T(ny.$$.fragment,fa),Nqo=i(fa),ype=n(fa,"P",{});var NTt=s(ype);Iqo=r(NTt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),NTt.forEach(t),qqo=i(fa),Da=n(fa,"P",{});var M6=s(Da);jqo=r(M6,"The model class to instantiate is selected based on the "),xpe=n(M6,"CODE",{});var ITt=s(xpe);Dqo=r(ITt,"model_type"),ITt.forEach(t),Gqo=r(M6,` property of the config object (either
passed as an argument or loaded from `),$pe=n(M6,"CODE",{});var qTt=s($pe);Oqo=r(qTt,"pretrained_model_name_or_path"),qTt.forEach(t),Vqo=r(M6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kpe=n(M6,"CODE",{});var jTt=s(kpe);Xqo=r(jTt,"pretrained_model_name_or_path"),jTt.forEach(t),zqo=r(M6,":"),M6.forEach(t),Qqo=i(fa),fe=n(fa,"UL",{});var _e=s(fe);Cb=n(_e,"LI",{});var xRe=s(Cb);Spe=n(xRe,"STRONG",{});var DTt=s(Spe);Wqo=r(DTt,"bart"),DTt.forEach(t),Hqo=r(xRe," \u2014 "),BV=n(xRe,"A",{href:!0});var GTt=s(BV);Uqo=r(GTt,"BartForConditionalGeneration"),GTt.forEach(t),Jqo=r(xRe," (BART model)"),xRe.forEach(t),Yqo=i(_e),wb=n(_e,"LI",{});var $Re=s(wb);Rpe=n($Re,"STRONG",{});var OTt=s(Rpe);Kqo=r(OTt,"bigbird_pegasus"),OTt.forEach(t),Zqo=r($Re," \u2014 "),NV=n($Re,"A",{href:!0});var VTt=s(NV);ejo=r(VTt,"BigBirdPegasusForConditionalGeneration"),VTt.forEach(t),ojo=r($Re," (BigBird-Pegasus model)"),$Re.forEach(t),rjo=i(_e),Ab=n(_e,"LI",{});var kRe=s(Ab);Ppe=n(kRe,"STRONG",{});var XTt=s(Ppe);tjo=r(XTt,"blenderbot"),XTt.forEach(t),ajo=r(kRe," \u2014 "),IV=n(kRe,"A",{href:!0});var zTt=s(IV);njo=r(zTt,"BlenderbotForConditionalGeneration"),zTt.forEach(t),sjo=r(kRe," (Blenderbot model)"),kRe.forEach(t),ljo=i(_e),Lb=n(_e,"LI",{});var SRe=s(Lb);Bpe=n(SRe,"STRONG",{});var QTt=s(Bpe);ijo=r(QTt,"blenderbot-small"),QTt.forEach(t),djo=r(SRe," \u2014 "),qV=n(SRe,"A",{href:!0});var WTt=s(qV);cjo=r(WTt,"BlenderbotSmallForConditionalGeneration"),WTt.forEach(t),fjo=r(SRe," (BlenderbotSmall model)"),SRe.forEach(t),mjo=i(_e),yb=n(_e,"LI",{});var RRe=s(yb);Npe=n(RRe,"STRONG",{});var HTt=s(Npe);gjo=r(HTt,"encoder-decoder"),HTt.forEach(t),hjo=r(RRe," \u2014 "),jV=n(RRe,"A",{href:!0});var UTt=s(jV);pjo=r(UTt,"EncoderDecoderModel"),UTt.forEach(t),_jo=r(RRe," (Encoder decoder model)"),RRe.forEach(t),ujo=i(_e),xb=n(_e,"LI",{});var PRe=s(xb);Ipe=n(PRe,"STRONG",{});var JTt=s(Ipe);bjo=r(JTt,"fsmt"),JTt.forEach(t),vjo=r(PRe," \u2014 "),DV=n(PRe,"A",{href:!0});var YTt=s(DV);Fjo=r(YTt,"FSMTForConditionalGeneration"),YTt.forEach(t),Tjo=r(PRe," (FairSeq Machine-Translation model)"),PRe.forEach(t),Mjo=i(_e),$b=n(_e,"LI",{});var BRe=s($b);qpe=n(BRe,"STRONG",{});var KTt=s(qpe);Ejo=r(KTt,"led"),KTt.forEach(t),Cjo=r(BRe," \u2014 "),GV=n(BRe,"A",{href:!0});var ZTt=s(GV);wjo=r(ZTt,"LEDForConditionalGeneration"),ZTt.forEach(t),Ajo=r(BRe," (LED model)"),BRe.forEach(t),Ljo=i(_e),kb=n(_e,"LI",{});var NRe=s(kb);jpe=n(NRe,"STRONG",{});var e8t=s(jpe);yjo=r(e8t,"longt5"),e8t.forEach(t),xjo=r(NRe," \u2014 "),OV=n(NRe,"A",{href:!0});var o8t=s(OV);$jo=r(o8t,"LongT5ForConditionalGeneration"),o8t.forEach(t),kjo=r(NRe," (LongT5 model)"),NRe.forEach(t),Sjo=i(_e),Sb=n(_e,"LI",{});var IRe=s(Sb);Dpe=n(IRe,"STRONG",{});var r8t=s(Dpe);Rjo=r(r8t,"m2m_100"),r8t.forEach(t),Pjo=r(IRe," \u2014 "),VV=n(IRe,"A",{href:!0});var t8t=s(VV);Bjo=r(t8t,"M2M100ForConditionalGeneration"),t8t.forEach(t),Njo=r(IRe," (M2M100 model)"),IRe.forEach(t),Ijo=i(_e),Rb=n(_e,"LI",{});var qRe=s(Rb);Gpe=n(qRe,"STRONG",{});var a8t=s(Gpe);qjo=r(a8t,"marian"),a8t.forEach(t),jjo=r(qRe," \u2014 "),XV=n(qRe,"A",{href:!0});var n8t=s(XV);Djo=r(n8t,"MarianMTModel"),n8t.forEach(t),Gjo=r(qRe," (Marian model)"),qRe.forEach(t),Ojo=i(_e),Pb=n(_e,"LI",{});var jRe=s(Pb);Ope=n(jRe,"STRONG",{});var s8t=s(Ope);Vjo=r(s8t,"mbart"),s8t.forEach(t),Xjo=r(jRe," \u2014 "),zV=n(jRe,"A",{href:!0});var l8t=s(zV);zjo=r(l8t,"MBartForConditionalGeneration"),l8t.forEach(t),Qjo=r(jRe," (mBART model)"),jRe.forEach(t),Wjo=i(_e),Bb=n(_e,"LI",{});var DRe=s(Bb);Vpe=n(DRe,"STRONG",{});var i8t=s(Vpe);Hjo=r(i8t,"mt5"),i8t.forEach(t),Ujo=r(DRe," \u2014 "),QV=n(DRe,"A",{href:!0});var d8t=s(QV);Jjo=r(d8t,"MT5ForConditionalGeneration"),d8t.forEach(t),Yjo=r(DRe," (MT5 model)"),DRe.forEach(t),Kjo=i(_e),Nb=n(_e,"LI",{});var GRe=s(Nb);Xpe=n(GRe,"STRONG",{});var c8t=s(Xpe);Zjo=r(c8t,"mvp"),c8t.forEach(t),eDo=r(GRe," \u2014 "),WV=n(GRe,"A",{href:!0});var f8t=s(WV);oDo=r(f8t,"MvpForConditionalGeneration"),f8t.forEach(t),rDo=r(GRe," (MVP model)"),GRe.forEach(t),tDo=i(_e),Ib=n(_e,"LI",{});var ORe=s(Ib);zpe=n(ORe,"STRONG",{});var m8t=s(zpe);aDo=r(m8t,"nllb"),m8t.forEach(t),nDo=r(ORe," \u2014 "),HV=n(ORe,"A",{href:!0});var g8t=s(HV);sDo=r(g8t,"M2M100ForConditionalGeneration"),g8t.forEach(t),lDo=r(ORe," (NLLB model)"),ORe.forEach(t),iDo=i(_e),qb=n(_e,"LI",{});var VRe=s(qb);Qpe=n(VRe,"STRONG",{});var h8t=s(Qpe);dDo=r(h8t,"pegasus"),h8t.forEach(t),cDo=r(VRe," \u2014 "),UV=n(VRe,"A",{href:!0});var p8t=s(UV);fDo=r(p8t,"PegasusForConditionalGeneration"),p8t.forEach(t),mDo=r(VRe," (Pegasus model)"),VRe.forEach(t),gDo=i(_e),jb=n(_e,"LI",{});var XRe=s(jb);Wpe=n(XRe,"STRONG",{});var _8t=s(Wpe);hDo=r(_8t,"plbart"),_8t.forEach(t),pDo=r(XRe," \u2014 "),JV=n(XRe,"A",{href:!0});var u8t=s(JV);_Do=r(u8t,"PLBartForConditionalGeneration"),u8t.forEach(t),uDo=r(XRe," (PLBart model)"),XRe.forEach(t),bDo=i(_e),Db=n(_e,"LI",{});var zRe=s(Db);Hpe=n(zRe,"STRONG",{});var b8t=s(Hpe);vDo=r(b8t,"prophetnet"),b8t.forEach(t),FDo=r(zRe," \u2014 "),YV=n(zRe,"A",{href:!0});var v8t=s(YV);TDo=r(v8t,"ProphetNetForConditionalGeneration"),v8t.forEach(t),MDo=r(zRe," (ProphetNet model)"),zRe.forEach(t),EDo=i(_e),Gb=n(_e,"LI",{});var QRe=s(Gb);Upe=n(QRe,"STRONG",{});var F8t=s(Upe);CDo=r(F8t,"t5"),F8t.forEach(t),wDo=r(QRe," \u2014 "),KV=n(QRe,"A",{href:!0});var T8t=s(KV);ADo=r(T8t,"T5ForConditionalGeneration"),T8t.forEach(t),LDo=r(QRe," (T5 model)"),QRe.forEach(t),yDo=i(_e),Ob=n(_e,"LI",{});var WRe=s(Ob);Jpe=n(WRe,"STRONG",{});var M8t=s(Jpe);xDo=r(M8t,"xlm-prophetnet"),M8t.forEach(t),$Do=r(WRe," \u2014 "),ZV=n(WRe,"A",{href:!0});var E8t=s(ZV);kDo=r(E8t,"XLMProphetNetForConditionalGeneration"),E8t.forEach(t),SDo=r(WRe," (XLM-ProphetNet model)"),WRe.forEach(t),_e.forEach(t),RDo=i(fa),Vb=n(fa,"P",{});var HRe=s(Vb);PDo=r(HRe,"The model is set in evaluation mode by default using "),Ype=n(HRe,"CODE",{});var C8t=s(Ype);BDo=r(C8t,"model.eval()"),C8t.forEach(t),NDo=r(HRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kpe=n(HRe,"CODE",{});var w8t=s(Kpe);IDo=r(w8t,"model.train()"),w8t.forEach(t),HRe.forEach(t),qDo=i(fa),T(Xb.$$.fragment,fa),fa.forEach(t),ll.forEach(t),GXe=i(f),td=n(f,"H2",{class:!0});var WQe=s(td);zb=n(WQe,"A",{id:!0,class:!0,href:!0});var A8t=s(zb);Zpe=n(A8t,"SPAN",{});var L8t=s(Zpe);T(sy.$$.fragment,L8t),L8t.forEach(t),A8t.forEach(t),jDo=i(WQe),e_e=n(WQe,"SPAN",{});var y8t=s(e_e);DDo=r(y8t,"AutoModelForSequenceClassification"),y8t.forEach(t),WQe.forEach(t),OXe=i(f),Bo=n(f,"DIV",{class:!0});var il=s(Bo);T(ly.$$.fragment,il),GDo=i(il),ad=n(il,"P",{});var Zre=s(ad);ODo=r(Zre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),eX=n(Zre,"A",{href:!0});var x8t=s(eX);VDo=r(x8t,"from_pretrained()"),x8t.forEach(t),XDo=r(Zre," class method or the "),oX=n(Zre,"A",{href:!0});var $8t=s(oX);zDo=r($8t,"from_config()"),$8t.forEach(t),QDo=r(Zre,` class
method.`),Zre.forEach(t),WDo=i(il),iy=n(il,"P",{});var HQe=s(iy);HDo=r(HQe,"This class cannot be instantiated directly using "),o_e=n(HQe,"CODE",{});var k8t=s(o_e);UDo=r(k8t,"__init__()"),k8t.forEach(t),JDo=r(HQe," (throws an error)."),HQe.forEach(t),YDo=i(il),gt=n(il,"DIV",{class:!0});var E6=s(gt);T(dy.$$.fragment,E6),KDo=i(E6),r_e=n(E6,"P",{});var S8t=s(r_e);ZDo=r(S8t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),S8t.forEach(t),eGo=i(E6),nd=n(E6,"P",{});var ete=s(nd);oGo=r(ete,`Note:
Loading a model from its configuration file does `),t_e=n(ete,"STRONG",{});var R8t=s(t_e);rGo=r(R8t,"not"),R8t.forEach(t),tGo=r(ete,` load the model weights. It only affects the
model\u2019s configuration. Use `),rX=n(ete,"A",{href:!0});var P8t=s(rX);aGo=r(P8t,"from_pretrained()"),P8t.forEach(t),nGo=r(ete," to load the model weights."),ete.forEach(t),sGo=i(E6),T(Qb.$$.fragment,E6),E6.forEach(t),lGo=i(il),ro=n(il,"DIV",{class:!0});var ma=s(ro);T(cy.$$.fragment,ma),iGo=i(ma),a_e=n(ma,"P",{});var B8t=s(a_e);dGo=r(B8t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),B8t.forEach(t),cGo=i(ma),Ga=n(ma,"P",{});var C6=s(Ga);fGo=r(C6,"The model class to instantiate is selected based on the "),n_e=n(C6,"CODE",{});var N8t=s(n_e);mGo=r(N8t,"model_type"),N8t.forEach(t),gGo=r(C6,` property of the config object (either
passed as an argument or loaded from `),s_e=n(C6,"CODE",{});var I8t=s(s_e);hGo=r(I8t,"pretrained_model_name_or_path"),I8t.forEach(t),pGo=r(C6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l_e=n(C6,"CODE",{});var q8t=s(l_e);_Go=r(q8t,"pretrained_model_name_or_path"),q8t.forEach(t),uGo=r(C6,":"),C6.forEach(t),bGo=i(ma),I=n(ma,"UL",{});var j=s(I);Wb=n(j,"LI",{});var URe=s(Wb);i_e=n(URe,"STRONG",{});var j8t=s(i_e);vGo=r(j8t,"albert"),j8t.forEach(t),FGo=r(URe," \u2014 "),tX=n(URe,"A",{href:!0});var D8t=s(tX);TGo=r(D8t,"AlbertForSequenceClassification"),D8t.forEach(t),MGo=r(URe," (ALBERT model)"),URe.forEach(t),EGo=i(j),Hb=n(j,"LI",{});var JRe=s(Hb);d_e=n(JRe,"STRONG",{});var G8t=s(d_e);CGo=r(G8t,"bart"),G8t.forEach(t),wGo=r(JRe," \u2014 "),aX=n(JRe,"A",{href:!0});var O8t=s(aX);AGo=r(O8t,"BartForSequenceClassification"),O8t.forEach(t),LGo=r(JRe," (BART model)"),JRe.forEach(t),yGo=i(j),Ub=n(j,"LI",{});var YRe=s(Ub);c_e=n(YRe,"STRONG",{});var V8t=s(c_e);xGo=r(V8t,"bert"),V8t.forEach(t),$Go=r(YRe," \u2014 "),nX=n(YRe,"A",{href:!0});var X8t=s(nX);kGo=r(X8t,"BertForSequenceClassification"),X8t.forEach(t),SGo=r(YRe," (BERT model)"),YRe.forEach(t),RGo=i(j),Jb=n(j,"LI",{});var KRe=s(Jb);f_e=n(KRe,"STRONG",{});var z8t=s(f_e);PGo=r(z8t,"big_bird"),z8t.forEach(t),BGo=r(KRe," \u2014 "),sX=n(KRe,"A",{href:!0});var Q8t=s(sX);NGo=r(Q8t,"BigBirdForSequenceClassification"),Q8t.forEach(t),IGo=r(KRe," (BigBird model)"),KRe.forEach(t),qGo=i(j),Yb=n(j,"LI",{});var ZRe=s(Yb);m_e=n(ZRe,"STRONG",{});var W8t=s(m_e);jGo=r(W8t,"bigbird_pegasus"),W8t.forEach(t),DGo=r(ZRe," \u2014 "),lX=n(ZRe,"A",{href:!0});var H8t=s(lX);GGo=r(H8t,"BigBirdPegasusForSequenceClassification"),H8t.forEach(t),OGo=r(ZRe," (BigBird-Pegasus model)"),ZRe.forEach(t),VGo=i(j),Kb=n(j,"LI",{});var ePe=s(Kb);g_e=n(ePe,"STRONG",{});var U8t=s(g_e);XGo=r(U8t,"bloom"),U8t.forEach(t),zGo=r(ePe," \u2014 "),iX=n(ePe,"A",{href:!0});var J8t=s(iX);QGo=r(J8t,"BloomForSequenceClassification"),J8t.forEach(t),WGo=r(ePe," (BLOOM model)"),ePe.forEach(t),HGo=i(j),Zb=n(j,"LI",{});var oPe=s(Zb);h_e=n(oPe,"STRONG",{});var Y8t=s(h_e);UGo=r(Y8t,"camembert"),Y8t.forEach(t),JGo=r(oPe," \u2014 "),dX=n(oPe,"A",{href:!0});var K8t=s(dX);YGo=r(K8t,"CamembertForSequenceClassification"),K8t.forEach(t),KGo=r(oPe," (CamemBERT model)"),oPe.forEach(t),ZGo=i(j),ev=n(j,"LI",{});var rPe=s(ev);p_e=n(rPe,"STRONG",{});var Z8t=s(p_e);eOo=r(Z8t,"canine"),Z8t.forEach(t),oOo=r(rPe," \u2014 "),cX=n(rPe,"A",{href:!0});var eMt=s(cX);rOo=r(eMt,"CanineForSequenceClassification"),eMt.forEach(t),tOo=r(rPe," (CANINE model)"),rPe.forEach(t),aOo=i(j),ov=n(j,"LI",{});var tPe=s(ov);__e=n(tPe,"STRONG",{});var oMt=s(__e);nOo=r(oMt,"convbert"),oMt.forEach(t),sOo=r(tPe," \u2014 "),fX=n(tPe,"A",{href:!0});var rMt=s(fX);lOo=r(rMt,"ConvBertForSequenceClassification"),rMt.forEach(t),iOo=r(tPe," (ConvBERT model)"),tPe.forEach(t),dOo=i(j),rv=n(j,"LI",{});var aPe=s(rv);u_e=n(aPe,"STRONG",{});var tMt=s(u_e);cOo=r(tMt,"ctrl"),tMt.forEach(t),fOo=r(aPe," \u2014 "),mX=n(aPe,"A",{href:!0});var aMt=s(mX);mOo=r(aMt,"CTRLForSequenceClassification"),aMt.forEach(t),gOo=r(aPe," (CTRL model)"),aPe.forEach(t),hOo=i(j),tv=n(j,"LI",{});var nPe=s(tv);b_e=n(nPe,"STRONG",{});var nMt=s(b_e);pOo=r(nMt,"data2vec-text"),nMt.forEach(t),_Oo=r(nPe," \u2014 "),gX=n(nPe,"A",{href:!0});var sMt=s(gX);uOo=r(sMt,"Data2VecTextForSequenceClassification"),sMt.forEach(t),bOo=r(nPe," (Data2VecText model)"),nPe.forEach(t),vOo=i(j),av=n(j,"LI",{});var sPe=s(av);v_e=n(sPe,"STRONG",{});var lMt=s(v_e);FOo=r(lMt,"deberta"),lMt.forEach(t),TOo=r(sPe," \u2014 "),hX=n(sPe,"A",{href:!0});var iMt=s(hX);MOo=r(iMt,"DebertaForSequenceClassification"),iMt.forEach(t),EOo=r(sPe," (DeBERTa model)"),sPe.forEach(t),COo=i(j),nv=n(j,"LI",{});var lPe=s(nv);F_e=n(lPe,"STRONG",{});var dMt=s(F_e);wOo=r(dMt,"deberta-v2"),dMt.forEach(t),AOo=r(lPe," \u2014 "),pX=n(lPe,"A",{href:!0});var cMt=s(pX);LOo=r(cMt,"DebertaV2ForSequenceClassification"),cMt.forEach(t),yOo=r(lPe," (DeBERTa-v2 model)"),lPe.forEach(t),xOo=i(j),sv=n(j,"LI",{});var iPe=s(sv);T_e=n(iPe,"STRONG",{});var fMt=s(T_e);$Oo=r(fMt,"distilbert"),fMt.forEach(t),kOo=r(iPe," \u2014 "),_X=n(iPe,"A",{href:!0});var mMt=s(_X);SOo=r(mMt,"DistilBertForSequenceClassification"),mMt.forEach(t),ROo=r(iPe," (DistilBERT model)"),iPe.forEach(t),POo=i(j),lv=n(j,"LI",{});var dPe=s(lv);M_e=n(dPe,"STRONG",{});var gMt=s(M_e);BOo=r(gMt,"electra"),gMt.forEach(t),NOo=r(dPe," \u2014 "),uX=n(dPe,"A",{href:!0});var hMt=s(uX);IOo=r(hMt,"ElectraForSequenceClassification"),hMt.forEach(t),qOo=r(dPe," (ELECTRA model)"),dPe.forEach(t),jOo=i(j),iv=n(j,"LI",{});var cPe=s(iv);E_e=n(cPe,"STRONG",{});var pMt=s(E_e);DOo=r(pMt,"flaubert"),pMt.forEach(t),GOo=r(cPe," \u2014 "),bX=n(cPe,"A",{href:!0});var _Mt=s(bX);OOo=r(_Mt,"FlaubertForSequenceClassification"),_Mt.forEach(t),VOo=r(cPe," (FlauBERT model)"),cPe.forEach(t),XOo=i(j),dv=n(j,"LI",{});var fPe=s(dv);C_e=n(fPe,"STRONG",{});var uMt=s(C_e);zOo=r(uMt,"fnet"),uMt.forEach(t),QOo=r(fPe," \u2014 "),vX=n(fPe,"A",{href:!0});var bMt=s(vX);WOo=r(bMt,"FNetForSequenceClassification"),bMt.forEach(t),HOo=r(fPe," (FNet model)"),fPe.forEach(t),UOo=i(j),cv=n(j,"LI",{});var mPe=s(cv);w_e=n(mPe,"STRONG",{});var vMt=s(w_e);JOo=r(vMt,"funnel"),vMt.forEach(t),YOo=r(mPe," \u2014 "),FX=n(mPe,"A",{href:!0});var FMt=s(FX);KOo=r(FMt,"FunnelForSequenceClassification"),FMt.forEach(t),ZOo=r(mPe," (Funnel Transformer model)"),mPe.forEach(t),eVo=i(j),fv=n(j,"LI",{});var gPe=s(fv);A_e=n(gPe,"STRONG",{});var TMt=s(A_e);oVo=r(TMt,"gpt2"),TMt.forEach(t),rVo=r(gPe," \u2014 "),TX=n(gPe,"A",{href:!0});var MMt=s(TX);tVo=r(MMt,"GPT2ForSequenceClassification"),MMt.forEach(t),aVo=r(gPe," (OpenAI GPT-2 model)"),gPe.forEach(t),nVo=i(j),mv=n(j,"LI",{});var hPe=s(mv);L_e=n(hPe,"STRONG",{});var EMt=s(L_e);sVo=r(EMt,"gpt_neo"),EMt.forEach(t),lVo=r(hPe," \u2014 "),MX=n(hPe,"A",{href:!0});var CMt=s(MX);iVo=r(CMt,"GPTNeoForSequenceClassification"),CMt.forEach(t),dVo=r(hPe," (GPT Neo model)"),hPe.forEach(t),cVo=i(j),gv=n(j,"LI",{});var pPe=s(gv);y_e=n(pPe,"STRONG",{});var wMt=s(y_e);fVo=r(wMt,"gptj"),wMt.forEach(t),mVo=r(pPe," \u2014 "),EX=n(pPe,"A",{href:!0});var AMt=s(EX);gVo=r(AMt,"GPTJForSequenceClassification"),AMt.forEach(t),hVo=r(pPe," (GPT-J model)"),pPe.forEach(t),pVo=i(j),hv=n(j,"LI",{});var _Pe=s(hv);x_e=n(_Pe,"STRONG",{});var LMt=s(x_e);_Vo=r(LMt,"ibert"),LMt.forEach(t),uVo=r(_Pe," \u2014 "),CX=n(_Pe,"A",{href:!0});var yMt=s(CX);bVo=r(yMt,"IBertForSequenceClassification"),yMt.forEach(t),vVo=r(_Pe," (I-BERT model)"),_Pe.forEach(t),FVo=i(j),pv=n(j,"LI",{});var uPe=s(pv);$_e=n(uPe,"STRONG",{});var xMt=s($_e);TVo=r(xMt,"layoutlm"),xMt.forEach(t),MVo=r(uPe," \u2014 "),wX=n(uPe,"A",{href:!0});var $Mt=s(wX);EVo=r($Mt,"LayoutLMForSequenceClassification"),$Mt.forEach(t),CVo=r(uPe," (LayoutLM model)"),uPe.forEach(t),wVo=i(j),_v=n(j,"LI",{});var bPe=s(_v);k_e=n(bPe,"STRONG",{});var kMt=s(k_e);AVo=r(kMt,"layoutlmv2"),kMt.forEach(t),LVo=r(bPe," \u2014 "),AX=n(bPe,"A",{href:!0});var SMt=s(AX);yVo=r(SMt,"LayoutLMv2ForSequenceClassification"),SMt.forEach(t),xVo=r(bPe," (LayoutLMv2 model)"),bPe.forEach(t),$Vo=i(j),uv=n(j,"LI",{});var vPe=s(uv);S_e=n(vPe,"STRONG",{});var RMt=s(S_e);kVo=r(RMt,"layoutlmv3"),RMt.forEach(t),SVo=r(vPe," \u2014 "),LX=n(vPe,"A",{href:!0});var PMt=s(LX);RVo=r(PMt,"LayoutLMv3ForSequenceClassification"),PMt.forEach(t),PVo=r(vPe," (LayoutLMv3 model)"),vPe.forEach(t),BVo=i(j),bv=n(j,"LI",{});var FPe=s(bv);R_e=n(FPe,"STRONG",{});var BMt=s(R_e);NVo=r(BMt,"led"),BMt.forEach(t),IVo=r(FPe," \u2014 "),yX=n(FPe,"A",{href:!0});var NMt=s(yX);qVo=r(NMt,"LEDForSequenceClassification"),NMt.forEach(t),jVo=r(FPe," (LED model)"),FPe.forEach(t),DVo=i(j),vv=n(j,"LI",{});var TPe=s(vv);P_e=n(TPe,"STRONG",{});var IMt=s(P_e);GVo=r(IMt,"longformer"),IMt.forEach(t),OVo=r(TPe," \u2014 "),xX=n(TPe,"A",{href:!0});var qMt=s(xX);VVo=r(qMt,"LongformerForSequenceClassification"),qMt.forEach(t),XVo=r(TPe," (Longformer model)"),TPe.forEach(t),zVo=i(j),Fv=n(j,"LI",{});var MPe=s(Fv);B_e=n(MPe,"STRONG",{});var jMt=s(B_e);QVo=r(jMt,"mbart"),jMt.forEach(t),WVo=r(MPe," \u2014 "),$X=n(MPe,"A",{href:!0});var DMt=s($X);HVo=r(DMt,"MBartForSequenceClassification"),DMt.forEach(t),UVo=r(MPe," (mBART model)"),MPe.forEach(t),JVo=i(j),Tv=n(j,"LI",{});var EPe=s(Tv);N_e=n(EPe,"STRONG",{});var GMt=s(N_e);YVo=r(GMt,"megatron-bert"),GMt.forEach(t),KVo=r(EPe," \u2014 "),kX=n(EPe,"A",{href:!0});var OMt=s(kX);ZVo=r(OMt,"MegatronBertForSequenceClassification"),OMt.forEach(t),eXo=r(EPe," (Megatron-BERT model)"),EPe.forEach(t),oXo=i(j),Mv=n(j,"LI",{});var CPe=s(Mv);I_e=n(CPe,"STRONG",{});var VMt=s(I_e);rXo=r(VMt,"mobilebert"),VMt.forEach(t),tXo=r(CPe," \u2014 "),SX=n(CPe,"A",{href:!0});var XMt=s(SX);aXo=r(XMt,"MobileBertForSequenceClassification"),XMt.forEach(t),nXo=r(CPe," (MobileBERT model)"),CPe.forEach(t),sXo=i(j),Ev=n(j,"LI",{});var wPe=s(Ev);q_e=n(wPe,"STRONG",{});var zMt=s(q_e);lXo=r(zMt,"mpnet"),zMt.forEach(t),iXo=r(wPe," \u2014 "),RX=n(wPe,"A",{href:!0});var QMt=s(RX);dXo=r(QMt,"MPNetForSequenceClassification"),QMt.forEach(t),cXo=r(wPe," (MPNet model)"),wPe.forEach(t),fXo=i(j),Cv=n(j,"LI",{});var APe=s(Cv);j_e=n(APe,"STRONG",{});var WMt=s(j_e);mXo=r(WMt,"mvp"),WMt.forEach(t),gXo=r(APe," \u2014 "),PX=n(APe,"A",{href:!0});var HMt=s(PX);hXo=r(HMt,"MvpForSequenceClassification"),HMt.forEach(t),pXo=r(APe," (MVP model)"),APe.forEach(t),_Xo=i(j),wv=n(j,"LI",{});var LPe=s(wv);D_e=n(LPe,"STRONG",{});var UMt=s(D_e);uXo=r(UMt,"nezha"),UMt.forEach(t),bXo=r(LPe," \u2014 "),BX=n(LPe,"A",{href:!0});var JMt=s(BX);vXo=r(JMt,"NezhaForSequenceClassification"),JMt.forEach(t),FXo=r(LPe," (Nezha model)"),LPe.forEach(t),TXo=i(j),Av=n(j,"LI",{});var yPe=s(Av);G_e=n(yPe,"STRONG",{});var YMt=s(G_e);MXo=r(YMt,"nystromformer"),YMt.forEach(t),EXo=r(yPe," \u2014 "),NX=n(yPe,"A",{href:!0});var KMt=s(NX);CXo=r(KMt,"NystromformerForSequenceClassification"),KMt.forEach(t),wXo=r(yPe," (Nystr\xF6mformer model)"),yPe.forEach(t),AXo=i(j),Lv=n(j,"LI",{});var xPe=s(Lv);O_e=n(xPe,"STRONG",{});var ZMt=s(O_e);LXo=r(ZMt,"openai-gpt"),ZMt.forEach(t),yXo=r(xPe," \u2014 "),IX=n(xPe,"A",{href:!0});var e4t=s(IX);xXo=r(e4t,"OpenAIGPTForSequenceClassification"),e4t.forEach(t),$Xo=r(xPe," (OpenAI GPT model)"),xPe.forEach(t),kXo=i(j),yv=n(j,"LI",{});var $Pe=s(yv);V_e=n($Pe,"STRONG",{});var o4t=s(V_e);SXo=r(o4t,"perceiver"),o4t.forEach(t),RXo=r($Pe," \u2014 "),qX=n($Pe,"A",{href:!0});var r4t=s(qX);PXo=r(r4t,"PerceiverForSequenceClassification"),r4t.forEach(t),BXo=r($Pe," (Perceiver model)"),$Pe.forEach(t),NXo=i(j),xv=n(j,"LI",{});var kPe=s(xv);X_e=n(kPe,"STRONG",{});var t4t=s(X_e);IXo=r(t4t,"plbart"),t4t.forEach(t),qXo=r(kPe," \u2014 "),jX=n(kPe,"A",{href:!0});var a4t=s(jX);jXo=r(a4t,"PLBartForSequenceClassification"),a4t.forEach(t),DXo=r(kPe," (PLBart model)"),kPe.forEach(t),GXo=i(j),$v=n(j,"LI",{});var SPe=s($v);z_e=n(SPe,"STRONG",{});var n4t=s(z_e);OXo=r(n4t,"qdqbert"),n4t.forEach(t),VXo=r(SPe," \u2014 "),DX=n(SPe,"A",{href:!0});var s4t=s(DX);XXo=r(s4t,"QDQBertForSequenceClassification"),s4t.forEach(t),zXo=r(SPe," (QDQBert model)"),SPe.forEach(t),QXo=i(j),kv=n(j,"LI",{});var RPe=s(kv);Q_e=n(RPe,"STRONG",{});var l4t=s(Q_e);WXo=r(l4t,"reformer"),l4t.forEach(t),HXo=r(RPe," \u2014 "),GX=n(RPe,"A",{href:!0});var i4t=s(GX);UXo=r(i4t,"ReformerForSequenceClassification"),i4t.forEach(t),JXo=r(RPe," (Reformer model)"),RPe.forEach(t),YXo=i(j),Sv=n(j,"LI",{});var PPe=s(Sv);W_e=n(PPe,"STRONG",{});var d4t=s(W_e);KXo=r(d4t,"rembert"),d4t.forEach(t),ZXo=r(PPe," \u2014 "),OX=n(PPe,"A",{href:!0});var c4t=s(OX);ezo=r(c4t,"RemBertForSequenceClassification"),c4t.forEach(t),ozo=r(PPe," (RemBERT model)"),PPe.forEach(t),rzo=i(j),Rv=n(j,"LI",{});var BPe=s(Rv);H_e=n(BPe,"STRONG",{});var f4t=s(H_e);tzo=r(f4t,"roberta"),f4t.forEach(t),azo=r(BPe," \u2014 "),VX=n(BPe,"A",{href:!0});var m4t=s(VX);nzo=r(m4t,"RobertaForSequenceClassification"),m4t.forEach(t),szo=r(BPe," (RoBERTa model)"),BPe.forEach(t),lzo=i(j),Pv=n(j,"LI",{});var NPe=s(Pv);U_e=n(NPe,"STRONG",{});var g4t=s(U_e);izo=r(g4t,"roformer"),g4t.forEach(t),dzo=r(NPe," \u2014 "),XX=n(NPe,"A",{href:!0});var h4t=s(XX);czo=r(h4t,"RoFormerForSequenceClassification"),h4t.forEach(t),fzo=r(NPe," (RoFormer model)"),NPe.forEach(t),mzo=i(j),Bv=n(j,"LI",{});var IPe=s(Bv);J_e=n(IPe,"STRONG",{});var p4t=s(J_e);gzo=r(p4t,"squeezebert"),p4t.forEach(t),hzo=r(IPe," \u2014 "),zX=n(IPe,"A",{href:!0});var _4t=s(zX);pzo=r(_4t,"SqueezeBertForSequenceClassification"),_4t.forEach(t),_zo=r(IPe," (SqueezeBERT model)"),IPe.forEach(t),uzo=i(j),Nv=n(j,"LI",{});var qPe=s(Nv);Y_e=n(qPe,"STRONG",{});var u4t=s(Y_e);bzo=r(u4t,"tapas"),u4t.forEach(t),vzo=r(qPe," \u2014 "),QX=n(qPe,"A",{href:!0});var b4t=s(QX);Fzo=r(b4t,"TapasForSequenceClassification"),b4t.forEach(t),Tzo=r(qPe," (TAPAS model)"),qPe.forEach(t),Mzo=i(j),Iv=n(j,"LI",{});var jPe=s(Iv);K_e=n(jPe,"STRONG",{});var v4t=s(K_e);Ezo=r(v4t,"transfo-xl"),v4t.forEach(t),Czo=r(jPe," \u2014 "),WX=n(jPe,"A",{href:!0});var F4t=s(WX);wzo=r(F4t,"TransfoXLForSequenceClassification"),F4t.forEach(t),Azo=r(jPe," (Transformer-XL model)"),jPe.forEach(t),Lzo=i(j),qv=n(j,"LI",{});var DPe=s(qv);Z_e=n(DPe,"STRONG",{});var T4t=s(Z_e);yzo=r(T4t,"xlm"),T4t.forEach(t),xzo=r(DPe," \u2014 "),HX=n(DPe,"A",{href:!0});var M4t=s(HX);$zo=r(M4t,"XLMForSequenceClassification"),M4t.forEach(t),kzo=r(DPe," (XLM model)"),DPe.forEach(t),Szo=i(j),jv=n(j,"LI",{});var GPe=s(jv);eue=n(GPe,"STRONG",{});var E4t=s(eue);Rzo=r(E4t,"xlm-roberta"),E4t.forEach(t),Pzo=r(GPe," \u2014 "),UX=n(GPe,"A",{href:!0});var C4t=s(UX);Bzo=r(C4t,"XLMRobertaForSequenceClassification"),C4t.forEach(t),Nzo=r(GPe," (XLM-RoBERTa model)"),GPe.forEach(t),Izo=i(j),Dv=n(j,"LI",{});var OPe=s(Dv);oue=n(OPe,"STRONG",{});var w4t=s(oue);qzo=r(w4t,"xlm-roberta-xl"),w4t.forEach(t),jzo=r(OPe," \u2014 "),JX=n(OPe,"A",{href:!0});var A4t=s(JX);Dzo=r(A4t,"XLMRobertaXLForSequenceClassification"),A4t.forEach(t),Gzo=r(OPe," (XLM-RoBERTa-XL model)"),OPe.forEach(t),Ozo=i(j),Gv=n(j,"LI",{});var VPe=s(Gv);rue=n(VPe,"STRONG",{});var L4t=s(rue);Vzo=r(L4t,"xlnet"),L4t.forEach(t),Xzo=r(VPe," \u2014 "),YX=n(VPe,"A",{href:!0});var y4t=s(YX);zzo=r(y4t,"XLNetForSequenceClassification"),y4t.forEach(t),Qzo=r(VPe," (XLNet model)"),VPe.forEach(t),Wzo=i(j),Ov=n(j,"LI",{});var XPe=s(Ov);tue=n(XPe,"STRONG",{});var x4t=s(tue);Hzo=r(x4t,"yoso"),x4t.forEach(t),Uzo=r(XPe," \u2014 "),KX=n(XPe,"A",{href:!0});var $4t=s(KX);Jzo=r($4t,"YosoForSequenceClassification"),$4t.forEach(t),Yzo=r(XPe," (YOSO model)"),XPe.forEach(t),j.forEach(t),Kzo=i(ma),Vv=n(ma,"P",{});var zPe=s(Vv);Zzo=r(zPe,"The model is set in evaluation mode by default using "),aue=n(zPe,"CODE",{});var k4t=s(aue);eQo=r(k4t,"model.eval()"),k4t.forEach(t),oQo=r(zPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nue=n(zPe,"CODE",{});var S4t=s(nue);rQo=r(S4t,"model.train()"),S4t.forEach(t),zPe.forEach(t),tQo=i(ma),T(Xv.$$.fragment,ma),ma.forEach(t),il.forEach(t),VXe=i(f),sd=n(f,"H2",{class:!0});var UQe=s(sd);zv=n(UQe,"A",{id:!0,class:!0,href:!0});var R4t=s(zv);sue=n(R4t,"SPAN",{});var P4t=s(sue);T(fy.$$.fragment,P4t),P4t.forEach(t),R4t.forEach(t),aQo=i(UQe),lue=n(UQe,"SPAN",{});var B4t=s(lue);nQo=r(B4t,"AutoModelForMultipleChoice"),B4t.forEach(t),UQe.forEach(t),XXe=i(f),No=n(f,"DIV",{class:!0});var dl=s(No);T(my.$$.fragment,dl),sQo=i(dl),ld=n(dl,"P",{});var ote=s(ld);lQo=r(ote,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),ZX=n(ote,"A",{href:!0});var N4t=s(ZX);iQo=r(N4t,"from_pretrained()"),N4t.forEach(t),dQo=r(ote," class method or the "),ez=n(ote,"A",{href:!0});var I4t=s(ez);cQo=r(I4t,"from_config()"),I4t.forEach(t),fQo=r(ote,` class
method.`),ote.forEach(t),mQo=i(dl),gy=n(dl,"P",{});var JQe=s(gy);gQo=r(JQe,"This class cannot be instantiated directly using "),iue=n(JQe,"CODE",{});var q4t=s(iue);hQo=r(q4t,"__init__()"),q4t.forEach(t),pQo=r(JQe," (throws an error)."),JQe.forEach(t),_Qo=i(dl),ht=n(dl,"DIV",{class:!0});var w6=s(ht);T(hy.$$.fragment,w6),uQo=i(w6),due=n(w6,"P",{});var j4t=s(due);bQo=r(j4t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),j4t.forEach(t),vQo=i(w6),id=n(w6,"P",{});var rte=s(id);FQo=r(rte,`Note:
Loading a model from its configuration file does `),cue=n(rte,"STRONG",{});var D4t=s(cue);TQo=r(D4t,"not"),D4t.forEach(t),MQo=r(rte,` load the model weights. It only affects the
model\u2019s configuration. Use `),oz=n(rte,"A",{href:!0});var G4t=s(oz);EQo=r(G4t,"from_pretrained()"),G4t.forEach(t),CQo=r(rte," to load the model weights."),rte.forEach(t),wQo=i(w6),T(Qv.$$.fragment,w6),w6.forEach(t),AQo=i(dl),to=n(dl,"DIV",{class:!0});var ga=s(to);T(py.$$.fragment,ga),LQo=i(ga),fue=n(ga,"P",{});var O4t=s(fue);yQo=r(O4t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),O4t.forEach(t),xQo=i(ga),Oa=n(ga,"P",{});var A6=s(Oa);$Qo=r(A6,"The model class to instantiate is selected based on the "),mue=n(A6,"CODE",{});var V4t=s(mue);kQo=r(V4t,"model_type"),V4t.forEach(t),SQo=r(A6,` property of the config object (either
passed as an argument or loaded from `),gue=n(A6,"CODE",{});var X4t=s(gue);RQo=r(X4t,"pretrained_model_name_or_path"),X4t.forEach(t),PQo=r(A6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hue=n(A6,"CODE",{});var z4t=s(hue);BQo=r(z4t,"pretrained_model_name_or_path"),z4t.forEach(t),NQo=r(A6,":"),A6.forEach(t),IQo=i(ga),Z=n(ga,"UL",{});var ee=s(Z);Wv=n(ee,"LI",{});var QPe=s(Wv);pue=n(QPe,"STRONG",{});var Q4t=s(pue);qQo=r(Q4t,"albert"),Q4t.forEach(t),jQo=r(QPe," \u2014 "),rz=n(QPe,"A",{href:!0});var W4t=s(rz);DQo=r(W4t,"AlbertForMultipleChoice"),W4t.forEach(t),GQo=r(QPe," (ALBERT model)"),QPe.forEach(t),OQo=i(ee),Hv=n(ee,"LI",{});var WPe=s(Hv);_ue=n(WPe,"STRONG",{});var H4t=s(_ue);VQo=r(H4t,"bert"),H4t.forEach(t),XQo=r(WPe," \u2014 "),tz=n(WPe,"A",{href:!0});var U4t=s(tz);zQo=r(U4t,"BertForMultipleChoice"),U4t.forEach(t),QQo=r(WPe," (BERT model)"),WPe.forEach(t),WQo=i(ee),Uv=n(ee,"LI",{});var HPe=s(Uv);uue=n(HPe,"STRONG",{});var J4t=s(uue);HQo=r(J4t,"big_bird"),J4t.forEach(t),UQo=r(HPe," \u2014 "),az=n(HPe,"A",{href:!0});var Y4t=s(az);JQo=r(Y4t,"BigBirdForMultipleChoice"),Y4t.forEach(t),YQo=r(HPe," (BigBird model)"),HPe.forEach(t),KQo=i(ee),Jv=n(ee,"LI",{});var UPe=s(Jv);bue=n(UPe,"STRONG",{});var K4t=s(bue);ZQo=r(K4t,"camembert"),K4t.forEach(t),eWo=r(UPe," \u2014 "),nz=n(UPe,"A",{href:!0});var Z4t=s(nz);oWo=r(Z4t,"CamembertForMultipleChoice"),Z4t.forEach(t),rWo=r(UPe," (CamemBERT model)"),UPe.forEach(t),tWo=i(ee),Yv=n(ee,"LI",{});var JPe=s(Yv);vue=n(JPe,"STRONG",{});var eEt=s(vue);aWo=r(eEt,"canine"),eEt.forEach(t),nWo=r(JPe," \u2014 "),sz=n(JPe,"A",{href:!0});var oEt=s(sz);sWo=r(oEt,"CanineForMultipleChoice"),oEt.forEach(t),lWo=r(JPe," (CANINE model)"),JPe.forEach(t),iWo=i(ee),Kv=n(ee,"LI",{});var YPe=s(Kv);Fue=n(YPe,"STRONG",{});var rEt=s(Fue);dWo=r(rEt,"convbert"),rEt.forEach(t),cWo=r(YPe," \u2014 "),lz=n(YPe,"A",{href:!0});var tEt=s(lz);fWo=r(tEt,"ConvBertForMultipleChoice"),tEt.forEach(t),mWo=r(YPe," (ConvBERT model)"),YPe.forEach(t),gWo=i(ee),Zv=n(ee,"LI",{});var KPe=s(Zv);Tue=n(KPe,"STRONG",{});var aEt=s(Tue);hWo=r(aEt,"data2vec-text"),aEt.forEach(t),pWo=r(KPe," \u2014 "),iz=n(KPe,"A",{href:!0});var nEt=s(iz);_Wo=r(nEt,"Data2VecTextForMultipleChoice"),nEt.forEach(t),uWo=r(KPe," (Data2VecText model)"),KPe.forEach(t),bWo=i(ee),e0=n(ee,"LI",{});var ZPe=s(e0);Mue=n(ZPe,"STRONG",{});var sEt=s(Mue);vWo=r(sEt,"deberta-v2"),sEt.forEach(t),FWo=r(ZPe," \u2014 "),dz=n(ZPe,"A",{href:!0});var lEt=s(dz);TWo=r(lEt,"DebertaV2ForMultipleChoice"),lEt.forEach(t),MWo=r(ZPe," (DeBERTa-v2 model)"),ZPe.forEach(t),EWo=i(ee),o0=n(ee,"LI",{});var eBe=s(o0);Eue=n(eBe,"STRONG",{});var iEt=s(Eue);CWo=r(iEt,"distilbert"),iEt.forEach(t),wWo=r(eBe," \u2014 "),cz=n(eBe,"A",{href:!0});var dEt=s(cz);AWo=r(dEt,"DistilBertForMultipleChoice"),dEt.forEach(t),LWo=r(eBe," (DistilBERT model)"),eBe.forEach(t),yWo=i(ee),r0=n(ee,"LI",{});var oBe=s(r0);Cue=n(oBe,"STRONG",{});var cEt=s(Cue);xWo=r(cEt,"electra"),cEt.forEach(t),$Wo=r(oBe," \u2014 "),fz=n(oBe,"A",{href:!0});var fEt=s(fz);kWo=r(fEt,"ElectraForMultipleChoice"),fEt.forEach(t),SWo=r(oBe," (ELECTRA model)"),oBe.forEach(t),RWo=i(ee),t0=n(ee,"LI",{});var rBe=s(t0);wue=n(rBe,"STRONG",{});var mEt=s(wue);PWo=r(mEt,"flaubert"),mEt.forEach(t),BWo=r(rBe," \u2014 "),mz=n(rBe,"A",{href:!0});var gEt=s(mz);NWo=r(gEt,"FlaubertForMultipleChoice"),gEt.forEach(t),IWo=r(rBe," (FlauBERT model)"),rBe.forEach(t),qWo=i(ee),a0=n(ee,"LI",{});var tBe=s(a0);Aue=n(tBe,"STRONG",{});var hEt=s(Aue);jWo=r(hEt,"fnet"),hEt.forEach(t),DWo=r(tBe," \u2014 "),gz=n(tBe,"A",{href:!0});var pEt=s(gz);GWo=r(pEt,"FNetForMultipleChoice"),pEt.forEach(t),OWo=r(tBe," (FNet model)"),tBe.forEach(t),VWo=i(ee),n0=n(ee,"LI",{});var aBe=s(n0);Lue=n(aBe,"STRONG",{});var _Et=s(Lue);XWo=r(_Et,"funnel"),_Et.forEach(t),zWo=r(aBe," \u2014 "),hz=n(aBe,"A",{href:!0});var uEt=s(hz);QWo=r(uEt,"FunnelForMultipleChoice"),uEt.forEach(t),WWo=r(aBe," (Funnel Transformer model)"),aBe.forEach(t),HWo=i(ee),s0=n(ee,"LI",{});var nBe=s(s0);yue=n(nBe,"STRONG",{});var bEt=s(yue);UWo=r(bEt,"ibert"),bEt.forEach(t),JWo=r(nBe," \u2014 "),pz=n(nBe,"A",{href:!0});var vEt=s(pz);YWo=r(vEt,"IBertForMultipleChoice"),vEt.forEach(t),KWo=r(nBe," (I-BERT model)"),nBe.forEach(t),ZWo=i(ee),l0=n(ee,"LI",{});var sBe=s(l0);xue=n(sBe,"STRONG",{});var FEt=s(xue);eHo=r(FEt,"longformer"),FEt.forEach(t),oHo=r(sBe," \u2014 "),_z=n(sBe,"A",{href:!0});var TEt=s(_z);rHo=r(TEt,"LongformerForMultipleChoice"),TEt.forEach(t),tHo=r(sBe," (Longformer model)"),sBe.forEach(t),aHo=i(ee),i0=n(ee,"LI",{});var lBe=s(i0);$ue=n(lBe,"STRONG",{});var MEt=s($ue);nHo=r(MEt,"megatron-bert"),MEt.forEach(t),sHo=r(lBe," \u2014 "),uz=n(lBe,"A",{href:!0});var EEt=s(uz);lHo=r(EEt,"MegatronBertForMultipleChoice"),EEt.forEach(t),iHo=r(lBe," (Megatron-BERT model)"),lBe.forEach(t),dHo=i(ee),d0=n(ee,"LI",{});var iBe=s(d0);kue=n(iBe,"STRONG",{});var CEt=s(kue);cHo=r(CEt,"mobilebert"),CEt.forEach(t),fHo=r(iBe," \u2014 "),bz=n(iBe,"A",{href:!0});var wEt=s(bz);mHo=r(wEt,"MobileBertForMultipleChoice"),wEt.forEach(t),gHo=r(iBe," (MobileBERT model)"),iBe.forEach(t),hHo=i(ee),c0=n(ee,"LI",{});var dBe=s(c0);Sue=n(dBe,"STRONG",{});var AEt=s(Sue);pHo=r(AEt,"mpnet"),AEt.forEach(t),_Ho=r(dBe," \u2014 "),vz=n(dBe,"A",{href:!0});var LEt=s(vz);uHo=r(LEt,"MPNetForMultipleChoice"),LEt.forEach(t),bHo=r(dBe," (MPNet model)"),dBe.forEach(t),vHo=i(ee),f0=n(ee,"LI",{});var cBe=s(f0);Rue=n(cBe,"STRONG",{});var yEt=s(Rue);FHo=r(yEt,"nezha"),yEt.forEach(t),THo=r(cBe," \u2014 "),Fz=n(cBe,"A",{href:!0});var xEt=s(Fz);MHo=r(xEt,"NezhaForMultipleChoice"),xEt.forEach(t),EHo=r(cBe," (Nezha model)"),cBe.forEach(t),CHo=i(ee),m0=n(ee,"LI",{});var fBe=s(m0);Pue=n(fBe,"STRONG",{});var $Et=s(Pue);wHo=r($Et,"nystromformer"),$Et.forEach(t),AHo=r(fBe," \u2014 "),Tz=n(fBe,"A",{href:!0});var kEt=s(Tz);LHo=r(kEt,"NystromformerForMultipleChoice"),kEt.forEach(t),yHo=r(fBe," (Nystr\xF6mformer model)"),fBe.forEach(t),xHo=i(ee),g0=n(ee,"LI",{});var mBe=s(g0);Bue=n(mBe,"STRONG",{});var SEt=s(Bue);$Ho=r(SEt,"qdqbert"),SEt.forEach(t),kHo=r(mBe," \u2014 "),Mz=n(mBe,"A",{href:!0});var REt=s(Mz);SHo=r(REt,"QDQBertForMultipleChoice"),REt.forEach(t),RHo=r(mBe," (QDQBert model)"),mBe.forEach(t),PHo=i(ee),h0=n(ee,"LI",{});var gBe=s(h0);Nue=n(gBe,"STRONG",{});var PEt=s(Nue);BHo=r(PEt,"rembert"),PEt.forEach(t),NHo=r(gBe," \u2014 "),Ez=n(gBe,"A",{href:!0});var BEt=s(Ez);IHo=r(BEt,"RemBertForMultipleChoice"),BEt.forEach(t),qHo=r(gBe," (RemBERT model)"),gBe.forEach(t),jHo=i(ee),p0=n(ee,"LI",{});var hBe=s(p0);Iue=n(hBe,"STRONG",{});var NEt=s(Iue);DHo=r(NEt,"roberta"),NEt.forEach(t),GHo=r(hBe," \u2014 "),Cz=n(hBe,"A",{href:!0});var IEt=s(Cz);OHo=r(IEt,"RobertaForMultipleChoice"),IEt.forEach(t),VHo=r(hBe," (RoBERTa model)"),hBe.forEach(t),XHo=i(ee),_0=n(ee,"LI",{});var pBe=s(_0);que=n(pBe,"STRONG",{});var qEt=s(que);zHo=r(qEt,"roformer"),qEt.forEach(t),QHo=r(pBe," \u2014 "),wz=n(pBe,"A",{href:!0});var jEt=s(wz);WHo=r(jEt,"RoFormerForMultipleChoice"),jEt.forEach(t),HHo=r(pBe," (RoFormer model)"),pBe.forEach(t),UHo=i(ee),u0=n(ee,"LI",{});var _Be=s(u0);jue=n(_Be,"STRONG",{});var DEt=s(jue);JHo=r(DEt,"squeezebert"),DEt.forEach(t),YHo=r(_Be," \u2014 "),Az=n(_Be,"A",{href:!0});var GEt=s(Az);KHo=r(GEt,"SqueezeBertForMultipleChoice"),GEt.forEach(t),ZHo=r(_Be," (SqueezeBERT model)"),_Be.forEach(t),eUo=i(ee),b0=n(ee,"LI",{});var uBe=s(b0);Due=n(uBe,"STRONG",{});var OEt=s(Due);oUo=r(OEt,"xlm"),OEt.forEach(t),rUo=r(uBe," \u2014 "),Lz=n(uBe,"A",{href:!0});var VEt=s(Lz);tUo=r(VEt,"XLMForMultipleChoice"),VEt.forEach(t),aUo=r(uBe," (XLM model)"),uBe.forEach(t),nUo=i(ee),v0=n(ee,"LI",{});var bBe=s(v0);Gue=n(bBe,"STRONG",{});var XEt=s(Gue);sUo=r(XEt,"xlm-roberta"),XEt.forEach(t),lUo=r(bBe," \u2014 "),yz=n(bBe,"A",{href:!0});var zEt=s(yz);iUo=r(zEt,"XLMRobertaForMultipleChoice"),zEt.forEach(t),dUo=r(bBe," (XLM-RoBERTa model)"),bBe.forEach(t),cUo=i(ee),F0=n(ee,"LI",{});var vBe=s(F0);Oue=n(vBe,"STRONG",{});var QEt=s(Oue);fUo=r(QEt,"xlm-roberta-xl"),QEt.forEach(t),mUo=r(vBe," \u2014 "),xz=n(vBe,"A",{href:!0});var WEt=s(xz);gUo=r(WEt,"XLMRobertaXLForMultipleChoice"),WEt.forEach(t),hUo=r(vBe," (XLM-RoBERTa-XL model)"),vBe.forEach(t),pUo=i(ee),T0=n(ee,"LI",{});var FBe=s(T0);Vue=n(FBe,"STRONG",{});var HEt=s(Vue);_Uo=r(HEt,"xlnet"),HEt.forEach(t),uUo=r(FBe," \u2014 "),$z=n(FBe,"A",{href:!0});var UEt=s($z);bUo=r(UEt,"XLNetForMultipleChoice"),UEt.forEach(t),vUo=r(FBe," (XLNet model)"),FBe.forEach(t),FUo=i(ee),M0=n(ee,"LI",{});var TBe=s(M0);Xue=n(TBe,"STRONG",{});var JEt=s(Xue);TUo=r(JEt,"yoso"),JEt.forEach(t),MUo=r(TBe," \u2014 "),kz=n(TBe,"A",{href:!0});var YEt=s(kz);EUo=r(YEt,"YosoForMultipleChoice"),YEt.forEach(t),CUo=r(TBe," (YOSO model)"),TBe.forEach(t),ee.forEach(t),wUo=i(ga),E0=n(ga,"P",{});var MBe=s(E0);AUo=r(MBe,"The model is set in evaluation mode by default using "),zue=n(MBe,"CODE",{});var KEt=s(zue);LUo=r(KEt,"model.eval()"),KEt.forEach(t),yUo=r(MBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Que=n(MBe,"CODE",{});var ZEt=s(Que);xUo=r(ZEt,"model.train()"),ZEt.forEach(t),MBe.forEach(t),$Uo=i(ga),T(C0.$$.fragment,ga),ga.forEach(t),dl.forEach(t),zXe=i(f),dd=n(f,"H2",{class:!0});var YQe=s(dd);w0=n(YQe,"A",{id:!0,class:!0,href:!0});var eCt=s(w0);Wue=n(eCt,"SPAN",{});var oCt=s(Wue);T(_y.$$.fragment,oCt),oCt.forEach(t),eCt.forEach(t),kUo=i(YQe),Hue=n(YQe,"SPAN",{});var rCt=s(Hue);SUo=r(rCt,"AutoModelForNextSentencePrediction"),rCt.forEach(t),YQe.forEach(t),QXe=i(f),Io=n(f,"DIV",{class:!0});var cl=s(Io);T(uy.$$.fragment,cl),RUo=i(cl),cd=n(cl,"P",{});var tte=s(cd);PUo=r(tte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Sz=n(tte,"A",{href:!0});var tCt=s(Sz);BUo=r(tCt,"from_pretrained()"),tCt.forEach(t),NUo=r(tte," class method or the "),Rz=n(tte,"A",{href:!0});var aCt=s(Rz);IUo=r(aCt,"from_config()"),aCt.forEach(t),qUo=r(tte,` class
method.`),tte.forEach(t),jUo=i(cl),by=n(cl,"P",{});var KQe=s(by);DUo=r(KQe,"This class cannot be instantiated directly using "),Uue=n(KQe,"CODE",{});var nCt=s(Uue);GUo=r(nCt,"__init__()"),nCt.forEach(t),OUo=r(KQe," (throws an error)."),KQe.forEach(t),VUo=i(cl),pt=n(cl,"DIV",{class:!0});var L6=s(pt);T(vy.$$.fragment,L6),XUo=i(L6),Jue=n(L6,"P",{});var sCt=s(Jue);zUo=r(sCt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),sCt.forEach(t),QUo=i(L6),fd=n(L6,"P",{});var ate=s(fd);WUo=r(ate,`Note:
Loading a model from its configuration file does `),Yue=n(ate,"STRONG",{});var lCt=s(Yue);HUo=r(lCt,"not"),lCt.forEach(t),UUo=r(ate,` load the model weights. It only affects the
model\u2019s configuration. Use `),Pz=n(ate,"A",{href:!0});var iCt=s(Pz);JUo=r(iCt,"from_pretrained()"),iCt.forEach(t),YUo=r(ate," to load the model weights."),ate.forEach(t),KUo=i(L6),T(A0.$$.fragment,L6),L6.forEach(t),ZUo=i(cl),ao=n(cl,"DIV",{class:!0});var ha=s(ao);T(Fy.$$.fragment,ha),eJo=i(ha),Kue=n(ha,"P",{});var dCt=s(Kue);oJo=r(dCt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),dCt.forEach(t),rJo=i(ha),Va=n(ha,"P",{});var y6=s(Va);tJo=r(y6,"The model class to instantiate is selected based on the "),Zue=n(y6,"CODE",{});var cCt=s(Zue);aJo=r(cCt,"model_type"),cCt.forEach(t),nJo=r(y6,` property of the config object (either
passed as an argument or loaded from `),e2e=n(y6,"CODE",{});var fCt=s(e2e);sJo=r(fCt,"pretrained_model_name_or_path"),fCt.forEach(t),lJo=r(y6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o2e=n(y6,"CODE",{});var mCt=s(o2e);iJo=r(mCt,"pretrained_model_name_or_path"),mCt.forEach(t),dJo=r(y6,":"),y6.forEach(t),cJo=i(ha),qo=n(ha,"UL",{});var pa=s(qo);L0=n(pa,"LI",{});var EBe=s(L0);r2e=n(EBe,"STRONG",{});var gCt=s(r2e);fJo=r(gCt,"bert"),gCt.forEach(t),mJo=r(EBe," \u2014 "),Bz=n(EBe,"A",{href:!0});var hCt=s(Bz);gJo=r(hCt,"BertForNextSentencePrediction"),hCt.forEach(t),hJo=r(EBe," (BERT model)"),EBe.forEach(t),pJo=i(pa),y0=n(pa,"LI",{});var CBe=s(y0);t2e=n(CBe,"STRONG",{});var pCt=s(t2e);_Jo=r(pCt,"fnet"),pCt.forEach(t),uJo=r(CBe," \u2014 "),Nz=n(CBe,"A",{href:!0});var _Ct=s(Nz);bJo=r(_Ct,"FNetForNextSentencePrediction"),_Ct.forEach(t),vJo=r(CBe," (FNet model)"),CBe.forEach(t),FJo=i(pa),x0=n(pa,"LI",{});var wBe=s(x0);a2e=n(wBe,"STRONG",{});var uCt=s(a2e);TJo=r(uCt,"megatron-bert"),uCt.forEach(t),MJo=r(wBe," \u2014 "),Iz=n(wBe,"A",{href:!0});var bCt=s(Iz);EJo=r(bCt,"MegatronBertForNextSentencePrediction"),bCt.forEach(t),CJo=r(wBe," (Megatron-BERT model)"),wBe.forEach(t),wJo=i(pa),$0=n(pa,"LI",{});var ABe=s($0);n2e=n(ABe,"STRONG",{});var vCt=s(n2e);AJo=r(vCt,"mobilebert"),vCt.forEach(t),LJo=r(ABe," \u2014 "),qz=n(ABe,"A",{href:!0});var FCt=s(qz);yJo=r(FCt,"MobileBertForNextSentencePrediction"),FCt.forEach(t),xJo=r(ABe," (MobileBERT model)"),ABe.forEach(t),$Jo=i(pa),k0=n(pa,"LI",{});var LBe=s(k0);s2e=n(LBe,"STRONG",{});var TCt=s(s2e);kJo=r(TCt,"nezha"),TCt.forEach(t),SJo=r(LBe," \u2014 "),jz=n(LBe,"A",{href:!0});var MCt=s(jz);RJo=r(MCt,"NezhaForNextSentencePrediction"),MCt.forEach(t),PJo=r(LBe," (Nezha model)"),LBe.forEach(t),BJo=i(pa),S0=n(pa,"LI",{});var yBe=s(S0);l2e=n(yBe,"STRONG",{});var ECt=s(l2e);NJo=r(ECt,"qdqbert"),ECt.forEach(t),IJo=r(yBe," \u2014 "),Dz=n(yBe,"A",{href:!0});var CCt=s(Dz);qJo=r(CCt,"QDQBertForNextSentencePrediction"),CCt.forEach(t),jJo=r(yBe," (QDQBert model)"),yBe.forEach(t),pa.forEach(t),DJo=i(ha),R0=n(ha,"P",{});var xBe=s(R0);GJo=r(xBe,"The model is set in evaluation mode by default using "),i2e=n(xBe,"CODE",{});var wCt=s(i2e);OJo=r(wCt,"model.eval()"),wCt.forEach(t),VJo=r(xBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),d2e=n(xBe,"CODE",{});var ACt=s(d2e);XJo=r(ACt,"model.train()"),ACt.forEach(t),xBe.forEach(t),zJo=i(ha),T(P0.$$.fragment,ha),ha.forEach(t),cl.forEach(t),WXe=i(f),md=n(f,"H2",{class:!0});var ZQe=s(md);B0=n(ZQe,"A",{id:!0,class:!0,href:!0});var LCt=s(B0);c2e=n(LCt,"SPAN",{});var yCt=s(c2e);T(Ty.$$.fragment,yCt),yCt.forEach(t),LCt.forEach(t),QJo=i(ZQe),f2e=n(ZQe,"SPAN",{});var xCt=s(f2e);WJo=r(xCt,"AutoModelForTokenClassification"),xCt.forEach(t),ZQe.forEach(t),HXe=i(f),jo=n(f,"DIV",{class:!0});var fl=s(jo);T(My.$$.fragment,fl),HJo=i(fl),gd=n(fl,"P",{});var nte=s(gd);UJo=r(nte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Gz=n(nte,"A",{href:!0});var $Ct=s(Gz);JJo=r($Ct,"from_pretrained()"),$Ct.forEach(t),YJo=r(nte," class method or the "),Oz=n(nte,"A",{href:!0});var kCt=s(Oz);KJo=r(kCt,"from_config()"),kCt.forEach(t),ZJo=r(nte,` class
method.`),nte.forEach(t),eYo=i(fl),Ey=n(fl,"P",{});var eWe=s(Ey);oYo=r(eWe,"This class cannot be instantiated directly using "),m2e=n(eWe,"CODE",{});var SCt=s(m2e);rYo=r(SCt,"__init__()"),SCt.forEach(t),tYo=r(eWe," (throws an error)."),eWe.forEach(t),aYo=i(fl),_t=n(fl,"DIV",{class:!0});var x6=s(_t);T(Cy.$$.fragment,x6),nYo=i(x6),g2e=n(x6,"P",{});var RCt=s(g2e);sYo=r(RCt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),RCt.forEach(t),lYo=i(x6),hd=n(x6,"P",{});var ste=s(hd);iYo=r(ste,`Note:
Loading a model from its configuration file does `),h2e=n(ste,"STRONG",{});var PCt=s(h2e);dYo=r(PCt,"not"),PCt.forEach(t),cYo=r(ste,` load the model weights. It only affects the
model\u2019s configuration. Use `),Vz=n(ste,"A",{href:!0});var BCt=s(Vz);fYo=r(BCt,"from_pretrained()"),BCt.forEach(t),mYo=r(ste," to load the model weights."),ste.forEach(t),gYo=i(x6),T(N0.$$.fragment,x6),x6.forEach(t),hYo=i(fl),no=n(fl,"DIV",{class:!0});var _a=s(no);T(wy.$$.fragment,_a),pYo=i(_a),p2e=n(_a,"P",{});var NCt=s(p2e);_Yo=r(NCt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),NCt.forEach(t),uYo=i(_a),Xa=n(_a,"P",{});var $6=s(Xa);bYo=r($6,"The model class to instantiate is selected based on the "),_2e=n($6,"CODE",{});var ICt=s(_2e);vYo=r(ICt,"model_type"),ICt.forEach(t),FYo=r($6,` property of the config object (either
passed as an argument or loaded from `),u2e=n($6,"CODE",{});var qCt=s(u2e);TYo=r(qCt,"pretrained_model_name_or_path"),qCt.forEach(t),MYo=r($6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b2e=n($6,"CODE",{});var jCt=s(b2e);EYo=r(jCt,"pretrained_model_name_or_path"),jCt.forEach(t),CYo=r($6,":"),$6.forEach(t),wYo=i(_a),U=n(_a,"UL",{});var J=s(U);I0=n(J,"LI",{});var $Be=s(I0);v2e=n($Be,"STRONG",{});var DCt=s(v2e);AYo=r(DCt,"albert"),DCt.forEach(t),LYo=r($Be," \u2014 "),Xz=n($Be,"A",{href:!0});var GCt=s(Xz);yYo=r(GCt,"AlbertForTokenClassification"),GCt.forEach(t),xYo=r($Be," (ALBERT model)"),$Be.forEach(t),$Yo=i(J),q0=n(J,"LI",{});var kBe=s(q0);F2e=n(kBe,"STRONG",{});var OCt=s(F2e);kYo=r(OCt,"bert"),OCt.forEach(t),SYo=r(kBe," \u2014 "),zz=n(kBe,"A",{href:!0});var VCt=s(zz);RYo=r(VCt,"BertForTokenClassification"),VCt.forEach(t),PYo=r(kBe," (BERT model)"),kBe.forEach(t),BYo=i(J),j0=n(J,"LI",{});var SBe=s(j0);T2e=n(SBe,"STRONG",{});var XCt=s(T2e);NYo=r(XCt,"big_bird"),XCt.forEach(t),IYo=r(SBe," \u2014 "),Qz=n(SBe,"A",{href:!0});var zCt=s(Qz);qYo=r(zCt,"BigBirdForTokenClassification"),zCt.forEach(t),jYo=r(SBe," (BigBird model)"),SBe.forEach(t),DYo=i(J),D0=n(J,"LI",{});var RBe=s(D0);M2e=n(RBe,"STRONG",{});var QCt=s(M2e);GYo=r(QCt,"bloom"),QCt.forEach(t),OYo=r(RBe," \u2014 "),Wz=n(RBe,"A",{href:!0});var WCt=s(Wz);VYo=r(WCt,"BloomForTokenClassification"),WCt.forEach(t),XYo=r(RBe," (BLOOM model)"),RBe.forEach(t),zYo=i(J),G0=n(J,"LI",{});var PBe=s(G0);E2e=n(PBe,"STRONG",{});var HCt=s(E2e);QYo=r(HCt,"camembert"),HCt.forEach(t),WYo=r(PBe," \u2014 "),Hz=n(PBe,"A",{href:!0});var UCt=s(Hz);HYo=r(UCt,"CamembertForTokenClassification"),UCt.forEach(t),UYo=r(PBe," (CamemBERT model)"),PBe.forEach(t),JYo=i(J),O0=n(J,"LI",{});var BBe=s(O0);C2e=n(BBe,"STRONG",{});var JCt=s(C2e);YYo=r(JCt,"canine"),JCt.forEach(t),KYo=r(BBe," \u2014 "),Uz=n(BBe,"A",{href:!0});var YCt=s(Uz);ZYo=r(YCt,"CanineForTokenClassification"),YCt.forEach(t),eKo=r(BBe," (CANINE model)"),BBe.forEach(t),oKo=i(J),V0=n(J,"LI",{});var NBe=s(V0);w2e=n(NBe,"STRONG",{});var KCt=s(w2e);rKo=r(KCt,"convbert"),KCt.forEach(t),tKo=r(NBe," \u2014 "),Jz=n(NBe,"A",{href:!0});var ZCt=s(Jz);aKo=r(ZCt,"ConvBertForTokenClassification"),ZCt.forEach(t),nKo=r(NBe," (ConvBERT model)"),NBe.forEach(t),sKo=i(J),X0=n(J,"LI",{});var IBe=s(X0);A2e=n(IBe,"STRONG",{});var e3t=s(A2e);lKo=r(e3t,"data2vec-text"),e3t.forEach(t),iKo=r(IBe," \u2014 "),Yz=n(IBe,"A",{href:!0});var o3t=s(Yz);dKo=r(o3t,"Data2VecTextForTokenClassification"),o3t.forEach(t),cKo=r(IBe," (Data2VecText model)"),IBe.forEach(t),fKo=i(J),z0=n(J,"LI",{});var qBe=s(z0);L2e=n(qBe,"STRONG",{});var r3t=s(L2e);mKo=r(r3t,"deberta"),r3t.forEach(t),gKo=r(qBe," \u2014 "),Kz=n(qBe,"A",{href:!0});var t3t=s(Kz);hKo=r(t3t,"DebertaForTokenClassification"),t3t.forEach(t),pKo=r(qBe," (DeBERTa model)"),qBe.forEach(t),_Ko=i(J),Q0=n(J,"LI",{});var jBe=s(Q0);y2e=n(jBe,"STRONG",{});var a3t=s(y2e);uKo=r(a3t,"deberta-v2"),a3t.forEach(t),bKo=r(jBe," \u2014 "),Zz=n(jBe,"A",{href:!0});var n3t=s(Zz);vKo=r(n3t,"DebertaV2ForTokenClassification"),n3t.forEach(t),FKo=r(jBe," (DeBERTa-v2 model)"),jBe.forEach(t),TKo=i(J),W0=n(J,"LI",{});var DBe=s(W0);x2e=n(DBe,"STRONG",{});var s3t=s(x2e);MKo=r(s3t,"distilbert"),s3t.forEach(t),EKo=r(DBe," \u2014 "),eQ=n(DBe,"A",{href:!0});var l3t=s(eQ);CKo=r(l3t,"DistilBertForTokenClassification"),l3t.forEach(t),wKo=r(DBe," (DistilBERT model)"),DBe.forEach(t),AKo=i(J),H0=n(J,"LI",{});var GBe=s(H0);$2e=n(GBe,"STRONG",{});var i3t=s($2e);LKo=r(i3t,"electra"),i3t.forEach(t),yKo=r(GBe," \u2014 "),oQ=n(GBe,"A",{href:!0});var d3t=s(oQ);xKo=r(d3t,"ElectraForTokenClassification"),d3t.forEach(t),$Ko=r(GBe," (ELECTRA model)"),GBe.forEach(t),kKo=i(J),U0=n(J,"LI",{});var OBe=s(U0);k2e=n(OBe,"STRONG",{});var c3t=s(k2e);SKo=r(c3t,"flaubert"),c3t.forEach(t),RKo=r(OBe," \u2014 "),rQ=n(OBe,"A",{href:!0});var f3t=s(rQ);PKo=r(f3t,"FlaubertForTokenClassification"),f3t.forEach(t),BKo=r(OBe," (FlauBERT model)"),OBe.forEach(t),NKo=i(J),J0=n(J,"LI",{});var VBe=s(J0);S2e=n(VBe,"STRONG",{});var m3t=s(S2e);IKo=r(m3t,"fnet"),m3t.forEach(t),qKo=r(VBe," \u2014 "),tQ=n(VBe,"A",{href:!0});var g3t=s(tQ);jKo=r(g3t,"FNetForTokenClassification"),g3t.forEach(t),DKo=r(VBe," (FNet model)"),VBe.forEach(t),GKo=i(J),Y0=n(J,"LI",{});var XBe=s(Y0);R2e=n(XBe,"STRONG",{});var h3t=s(R2e);OKo=r(h3t,"funnel"),h3t.forEach(t),VKo=r(XBe," \u2014 "),aQ=n(XBe,"A",{href:!0});var p3t=s(aQ);XKo=r(p3t,"FunnelForTokenClassification"),p3t.forEach(t),zKo=r(XBe," (Funnel Transformer model)"),XBe.forEach(t),QKo=i(J),K0=n(J,"LI",{});var zBe=s(K0);P2e=n(zBe,"STRONG",{});var _3t=s(P2e);WKo=r(_3t,"gpt2"),_3t.forEach(t),HKo=r(zBe," \u2014 "),nQ=n(zBe,"A",{href:!0});var u3t=s(nQ);UKo=r(u3t,"GPT2ForTokenClassification"),u3t.forEach(t),JKo=r(zBe," (OpenAI GPT-2 model)"),zBe.forEach(t),YKo=i(J),Z0=n(J,"LI",{});var QBe=s(Z0);B2e=n(QBe,"STRONG",{});var b3t=s(B2e);KKo=r(b3t,"ibert"),b3t.forEach(t),ZKo=r(QBe," \u2014 "),sQ=n(QBe,"A",{href:!0});var v3t=s(sQ);eZo=r(v3t,"IBertForTokenClassification"),v3t.forEach(t),oZo=r(QBe," (I-BERT model)"),QBe.forEach(t),rZo=i(J),eF=n(J,"LI",{});var WBe=s(eF);N2e=n(WBe,"STRONG",{});var F3t=s(N2e);tZo=r(F3t,"layoutlm"),F3t.forEach(t),aZo=r(WBe," \u2014 "),lQ=n(WBe,"A",{href:!0});var T3t=s(lQ);nZo=r(T3t,"LayoutLMForTokenClassification"),T3t.forEach(t),sZo=r(WBe," (LayoutLM model)"),WBe.forEach(t),lZo=i(J),oF=n(J,"LI",{});var HBe=s(oF);I2e=n(HBe,"STRONG",{});var M3t=s(I2e);iZo=r(M3t,"layoutlmv2"),M3t.forEach(t),dZo=r(HBe," \u2014 "),iQ=n(HBe,"A",{href:!0});var E3t=s(iQ);cZo=r(E3t,"LayoutLMv2ForTokenClassification"),E3t.forEach(t),fZo=r(HBe," (LayoutLMv2 model)"),HBe.forEach(t),mZo=i(J),rF=n(J,"LI",{});var UBe=s(rF);q2e=n(UBe,"STRONG",{});var C3t=s(q2e);gZo=r(C3t,"layoutlmv3"),C3t.forEach(t),hZo=r(UBe," \u2014 "),dQ=n(UBe,"A",{href:!0});var w3t=s(dQ);pZo=r(w3t,"LayoutLMv3ForTokenClassification"),w3t.forEach(t),_Zo=r(UBe," (LayoutLMv3 model)"),UBe.forEach(t),uZo=i(J),tF=n(J,"LI",{});var JBe=s(tF);j2e=n(JBe,"STRONG",{});var A3t=s(j2e);bZo=r(A3t,"longformer"),A3t.forEach(t),vZo=r(JBe," \u2014 "),cQ=n(JBe,"A",{href:!0});var L3t=s(cQ);FZo=r(L3t,"LongformerForTokenClassification"),L3t.forEach(t),TZo=r(JBe," (Longformer model)"),JBe.forEach(t),MZo=i(J),aF=n(J,"LI",{});var YBe=s(aF);D2e=n(YBe,"STRONG",{});var y3t=s(D2e);EZo=r(y3t,"megatron-bert"),y3t.forEach(t),CZo=r(YBe," \u2014 "),fQ=n(YBe,"A",{href:!0});var x3t=s(fQ);wZo=r(x3t,"MegatronBertForTokenClassification"),x3t.forEach(t),AZo=r(YBe," (Megatron-BERT model)"),YBe.forEach(t),LZo=i(J),nF=n(J,"LI",{});var KBe=s(nF);G2e=n(KBe,"STRONG",{});var $3t=s(G2e);yZo=r($3t,"mobilebert"),$3t.forEach(t),xZo=r(KBe," \u2014 "),mQ=n(KBe,"A",{href:!0});var k3t=s(mQ);$Zo=r(k3t,"MobileBertForTokenClassification"),k3t.forEach(t),kZo=r(KBe," (MobileBERT model)"),KBe.forEach(t),SZo=i(J),sF=n(J,"LI",{});var ZBe=s(sF);O2e=n(ZBe,"STRONG",{});var S3t=s(O2e);RZo=r(S3t,"mpnet"),S3t.forEach(t),PZo=r(ZBe," \u2014 "),gQ=n(ZBe,"A",{href:!0});var R3t=s(gQ);BZo=r(R3t,"MPNetForTokenClassification"),R3t.forEach(t),NZo=r(ZBe," (MPNet model)"),ZBe.forEach(t),IZo=i(J),lF=n(J,"LI",{});var eNe=s(lF);V2e=n(eNe,"STRONG",{});var P3t=s(V2e);qZo=r(P3t,"nezha"),P3t.forEach(t),jZo=r(eNe," \u2014 "),hQ=n(eNe,"A",{href:!0});var B3t=s(hQ);DZo=r(B3t,"NezhaForTokenClassification"),B3t.forEach(t),GZo=r(eNe," (Nezha model)"),eNe.forEach(t),OZo=i(J),iF=n(J,"LI",{});var oNe=s(iF);X2e=n(oNe,"STRONG",{});var N3t=s(X2e);VZo=r(N3t,"nystromformer"),N3t.forEach(t),XZo=r(oNe," \u2014 "),pQ=n(oNe,"A",{href:!0});var I3t=s(pQ);zZo=r(I3t,"NystromformerForTokenClassification"),I3t.forEach(t),QZo=r(oNe," (Nystr\xF6mformer model)"),oNe.forEach(t),WZo=i(J),dF=n(J,"LI",{});var rNe=s(dF);z2e=n(rNe,"STRONG",{});var q3t=s(z2e);HZo=r(q3t,"qdqbert"),q3t.forEach(t),UZo=r(rNe," \u2014 "),_Q=n(rNe,"A",{href:!0});var j3t=s(_Q);JZo=r(j3t,"QDQBertForTokenClassification"),j3t.forEach(t),YZo=r(rNe," (QDQBert model)"),rNe.forEach(t),KZo=i(J),cF=n(J,"LI",{});var tNe=s(cF);Q2e=n(tNe,"STRONG",{});var D3t=s(Q2e);ZZo=r(D3t,"rembert"),D3t.forEach(t),eer=r(tNe," \u2014 "),uQ=n(tNe,"A",{href:!0});var G3t=s(uQ);oer=r(G3t,"RemBertForTokenClassification"),G3t.forEach(t),rer=r(tNe," (RemBERT model)"),tNe.forEach(t),ter=i(J),fF=n(J,"LI",{});var aNe=s(fF);W2e=n(aNe,"STRONG",{});var O3t=s(W2e);aer=r(O3t,"roberta"),O3t.forEach(t),ner=r(aNe," \u2014 "),bQ=n(aNe,"A",{href:!0});var V3t=s(bQ);ser=r(V3t,"RobertaForTokenClassification"),V3t.forEach(t),ler=r(aNe," (RoBERTa model)"),aNe.forEach(t),ier=i(J),mF=n(J,"LI",{});var nNe=s(mF);H2e=n(nNe,"STRONG",{});var X3t=s(H2e);der=r(X3t,"roformer"),X3t.forEach(t),cer=r(nNe," \u2014 "),vQ=n(nNe,"A",{href:!0});var z3t=s(vQ);fer=r(z3t,"RoFormerForTokenClassification"),z3t.forEach(t),mer=r(nNe," (RoFormer model)"),nNe.forEach(t),ger=i(J),gF=n(J,"LI",{});var sNe=s(gF);U2e=n(sNe,"STRONG",{});var Q3t=s(U2e);her=r(Q3t,"squeezebert"),Q3t.forEach(t),per=r(sNe," \u2014 "),FQ=n(sNe,"A",{href:!0});var W3t=s(FQ);_er=r(W3t,"SqueezeBertForTokenClassification"),W3t.forEach(t),uer=r(sNe," (SqueezeBERT model)"),sNe.forEach(t),ber=i(J),hF=n(J,"LI",{});var lNe=s(hF);J2e=n(lNe,"STRONG",{});var H3t=s(J2e);ver=r(H3t,"xlm"),H3t.forEach(t),Fer=r(lNe," \u2014 "),TQ=n(lNe,"A",{href:!0});var U3t=s(TQ);Ter=r(U3t,"XLMForTokenClassification"),U3t.forEach(t),Mer=r(lNe," (XLM model)"),lNe.forEach(t),Eer=i(J),pF=n(J,"LI",{});var iNe=s(pF);Y2e=n(iNe,"STRONG",{});var J3t=s(Y2e);Cer=r(J3t,"xlm-roberta"),J3t.forEach(t),wer=r(iNe," \u2014 "),MQ=n(iNe,"A",{href:!0});var Y3t=s(MQ);Aer=r(Y3t,"XLMRobertaForTokenClassification"),Y3t.forEach(t),Ler=r(iNe," (XLM-RoBERTa model)"),iNe.forEach(t),yer=i(J),_F=n(J,"LI",{});var dNe=s(_F);K2e=n(dNe,"STRONG",{});var K3t=s(K2e);xer=r(K3t,"xlm-roberta-xl"),K3t.forEach(t),$er=r(dNe," \u2014 "),EQ=n(dNe,"A",{href:!0});var Z3t=s(EQ);ker=r(Z3t,"XLMRobertaXLForTokenClassification"),Z3t.forEach(t),Ser=r(dNe," (XLM-RoBERTa-XL model)"),dNe.forEach(t),Rer=i(J),uF=n(J,"LI",{});var cNe=s(uF);Z2e=n(cNe,"STRONG",{});var e5t=s(Z2e);Per=r(e5t,"xlnet"),e5t.forEach(t),Ber=r(cNe," \u2014 "),CQ=n(cNe,"A",{href:!0});var o5t=s(CQ);Ner=r(o5t,"XLNetForTokenClassification"),o5t.forEach(t),Ier=r(cNe," (XLNet model)"),cNe.forEach(t),qer=i(J),bF=n(J,"LI",{});var fNe=s(bF);e1e=n(fNe,"STRONG",{});var r5t=s(e1e);jer=r(r5t,"yoso"),r5t.forEach(t),Der=r(fNe," \u2014 "),wQ=n(fNe,"A",{href:!0});var t5t=s(wQ);Ger=r(t5t,"YosoForTokenClassification"),t5t.forEach(t),Oer=r(fNe," (YOSO model)"),fNe.forEach(t),J.forEach(t),Ver=i(_a),vF=n(_a,"P",{});var mNe=s(vF);Xer=r(mNe,"The model is set in evaluation mode by default using "),o1e=n(mNe,"CODE",{});var a5t=s(o1e);zer=r(a5t,"model.eval()"),a5t.forEach(t),Qer=r(mNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),r1e=n(mNe,"CODE",{});var n5t=s(r1e);Wer=r(n5t,"model.train()"),n5t.forEach(t),mNe.forEach(t),Her=i(_a),T(FF.$$.fragment,_a),_a.forEach(t),fl.forEach(t),UXe=i(f),pd=n(f,"H2",{class:!0});var oWe=s(pd);TF=n(oWe,"A",{id:!0,class:!0,href:!0});var s5t=s(TF);t1e=n(s5t,"SPAN",{});var l5t=s(t1e);T(Ay.$$.fragment,l5t),l5t.forEach(t),s5t.forEach(t),Uer=i(oWe),a1e=n(oWe,"SPAN",{});var i5t=s(a1e);Jer=r(i5t,"AutoModelForQuestionAnswering"),i5t.forEach(t),oWe.forEach(t),JXe=i(f),Do=n(f,"DIV",{class:!0});var ml=s(Do);T(Ly.$$.fragment,ml),Yer=i(ml),_d=n(ml,"P",{});var lte=s(_d);Ker=r(lte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),AQ=n(lte,"A",{href:!0});var d5t=s(AQ);Zer=r(d5t,"from_pretrained()"),d5t.forEach(t),eor=r(lte," class method or the "),LQ=n(lte,"A",{href:!0});var c5t=s(LQ);oor=r(c5t,"from_config()"),c5t.forEach(t),ror=r(lte,` class
method.`),lte.forEach(t),tor=i(ml),yy=n(ml,"P",{});var rWe=s(yy);aor=r(rWe,"This class cannot be instantiated directly using "),n1e=n(rWe,"CODE",{});var f5t=s(n1e);nor=r(f5t,"__init__()"),f5t.forEach(t),sor=r(rWe," (throws an error)."),rWe.forEach(t),lor=i(ml),ut=n(ml,"DIV",{class:!0});var k6=s(ut);T(xy.$$.fragment,k6),ior=i(k6),s1e=n(k6,"P",{});var m5t=s(s1e);dor=r(m5t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),m5t.forEach(t),cor=i(k6),ud=n(k6,"P",{});var ite=s(ud);mor=r(ite,`Note:
Loading a model from its configuration file does `),l1e=n(ite,"STRONG",{});var g5t=s(l1e);gor=r(g5t,"not"),g5t.forEach(t),hor=r(ite,` load the model weights. It only affects the
model\u2019s configuration. Use `),yQ=n(ite,"A",{href:!0});var h5t=s(yQ);por=r(h5t,"from_pretrained()"),h5t.forEach(t),_or=r(ite," to load the model weights."),ite.forEach(t),uor=i(k6),T(MF.$$.fragment,k6),k6.forEach(t),bor=i(ml),so=n(ml,"DIV",{class:!0});var ua=s(so);T($y.$$.fragment,ua),vor=i(ua),i1e=n(ua,"P",{});var p5t=s(i1e);For=r(p5t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),p5t.forEach(t),Tor=i(ua),za=n(ua,"P",{});var S6=s(za);Mor=r(S6,"The model class to instantiate is selected based on the "),d1e=n(S6,"CODE",{});var _5t=s(d1e);Eor=r(_5t,"model_type"),_5t.forEach(t),Cor=r(S6,` property of the config object (either
passed as an argument or loaded from `),c1e=n(S6,"CODE",{});var u5t=s(c1e);wor=r(u5t,"pretrained_model_name_or_path"),u5t.forEach(t),Aor=r(S6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f1e=n(S6,"CODE",{});var b5t=s(f1e);Lor=r(b5t,"pretrained_model_name_or_path"),b5t.forEach(t),yor=r(S6,":"),S6.forEach(t),xor=i(ua),V=n(ua,"UL",{});var X=s(V);EF=n(X,"LI",{});var gNe=s(EF);m1e=n(gNe,"STRONG",{});var v5t=s(m1e);$or=r(v5t,"albert"),v5t.forEach(t),kor=r(gNe," \u2014 "),xQ=n(gNe,"A",{href:!0});var F5t=s(xQ);Sor=r(F5t,"AlbertForQuestionAnswering"),F5t.forEach(t),Ror=r(gNe," (ALBERT model)"),gNe.forEach(t),Por=i(X),CF=n(X,"LI",{});var hNe=s(CF);g1e=n(hNe,"STRONG",{});var T5t=s(g1e);Bor=r(T5t,"bart"),T5t.forEach(t),Nor=r(hNe," \u2014 "),$Q=n(hNe,"A",{href:!0});var M5t=s($Q);Ior=r(M5t,"BartForQuestionAnswering"),M5t.forEach(t),qor=r(hNe," (BART model)"),hNe.forEach(t),jor=i(X),wF=n(X,"LI",{});var pNe=s(wF);h1e=n(pNe,"STRONG",{});var E5t=s(h1e);Dor=r(E5t,"bert"),E5t.forEach(t),Gor=r(pNe," \u2014 "),kQ=n(pNe,"A",{href:!0});var C5t=s(kQ);Oor=r(C5t,"BertForQuestionAnswering"),C5t.forEach(t),Vor=r(pNe," (BERT model)"),pNe.forEach(t),Xor=i(X),AF=n(X,"LI",{});var _Ne=s(AF);p1e=n(_Ne,"STRONG",{});var w5t=s(p1e);zor=r(w5t,"big_bird"),w5t.forEach(t),Qor=r(_Ne," \u2014 "),SQ=n(_Ne,"A",{href:!0});var A5t=s(SQ);Wor=r(A5t,"BigBirdForQuestionAnswering"),A5t.forEach(t),Hor=r(_Ne," (BigBird model)"),_Ne.forEach(t),Uor=i(X),LF=n(X,"LI",{});var uNe=s(LF);_1e=n(uNe,"STRONG",{});var L5t=s(_1e);Jor=r(L5t,"bigbird_pegasus"),L5t.forEach(t),Yor=r(uNe," \u2014 "),RQ=n(uNe,"A",{href:!0});var y5t=s(RQ);Kor=r(y5t,"BigBirdPegasusForQuestionAnswering"),y5t.forEach(t),Zor=r(uNe," (BigBird-Pegasus model)"),uNe.forEach(t),err=i(X),yF=n(X,"LI",{});var bNe=s(yF);u1e=n(bNe,"STRONG",{});var x5t=s(u1e);orr=r(x5t,"camembert"),x5t.forEach(t),rrr=r(bNe," \u2014 "),PQ=n(bNe,"A",{href:!0});var $5t=s(PQ);trr=r($5t,"CamembertForQuestionAnswering"),$5t.forEach(t),arr=r(bNe," (CamemBERT model)"),bNe.forEach(t),nrr=i(X),xF=n(X,"LI",{});var vNe=s(xF);b1e=n(vNe,"STRONG",{});var k5t=s(b1e);srr=r(k5t,"canine"),k5t.forEach(t),lrr=r(vNe," \u2014 "),BQ=n(vNe,"A",{href:!0});var S5t=s(BQ);irr=r(S5t,"CanineForQuestionAnswering"),S5t.forEach(t),drr=r(vNe," (CANINE model)"),vNe.forEach(t),crr=i(X),$F=n(X,"LI",{});var FNe=s($F);v1e=n(FNe,"STRONG",{});var R5t=s(v1e);frr=r(R5t,"convbert"),R5t.forEach(t),mrr=r(FNe," \u2014 "),NQ=n(FNe,"A",{href:!0});var P5t=s(NQ);grr=r(P5t,"ConvBertForQuestionAnswering"),P5t.forEach(t),hrr=r(FNe," (ConvBERT model)"),FNe.forEach(t),prr=i(X),kF=n(X,"LI",{});var TNe=s(kF);F1e=n(TNe,"STRONG",{});var B5t=s(F1e);_rr=r(B5t,"data2vec-text"),B5t.forEach(t),urr=r(TNe," \u2014 "),IQ=n(TNe,"A",{href:!0});var N5t=s(IQ);brr=r(N5t,"Data2VecTextForQuestionAnswering"),N5t.forEach(t),vrr=r(TNe," (Data2VecText model)"),TNe.forEach(t),Frr=i(X),SF=n(X,"LI",{});var MNe=s(SF);T1e=n(MNe,"STRONG",{});var I5t=s(T1e);Trr=r(I5t,"deberta"),I5t.forEach(t),Mrr=r(MNe," \u2014 "),qQ=n(MNe,"A",{href:!0});var q5t=s(qQ);Err=r(q5t,"DebertaForQuestionAnswering"),q5t.forEach(t),Crr=r(MNe," (DeBERTa model)"),MNe.forEach(t),wrr=i(X),RF=n(X,"LI",{});var ENe=s(RF);M1e=n(ENe,"STRONG",{});var j5t=s(M1e);Arr=r(j5t,"deberta-v2"),j5t.forEach(t),Lrr=r(ENe," \u2014 "),jQ=n(ENe,"A",{href:!0});var D5t=s(jQ);yrr=r(D5t,"DebertaV2ForQuestionAnswering"),D5t.forEach(t),xrr=r(ENe," (DeBERTa-v2 model)"),ENe.forEach(t),$rr=i(X),PF=n(X,"LI",{});var CNe=s(PF);E1e=n(CNe,"STRONG",{});var G5t=s(E1e);krr=r(G5t,"distilbert"),G5t.forEach(t),Srr=r(CNe," \u2014 "),DQ=n(CNe,"A",{href:!0});var O5t=s(DQ);Rrr=r(O5t,"DistilBertForQuestionAnswering"),O5t.forEach(t),Prr=r(CNe," (DistilBERT model)"),CNe.forEach(t),Brr=i(X),BF=n(X,"LI",{});var wNe=s(BF);C1e=n(wNe,"STRONG",{});var V5t=s(C1e);Nrr=r(V5t,"electra"),V5t.forEach(t),Irr=r(wNe," \u2014 "),GQ=n(wNe,"A",{href:!0});var X5t=s(GQ);qrr=r(X5t,"ElectraForQuestionAnswering"),X5t.forEach(t),jrr=r(wNe," (ELECTRA model)"),wNe.forEach(t),Drr=i(X),NF=n(X,"LI",{});var ANe=s(NF);w1e=n(ANe,"STRONG",{});var z5t=s(w1e);Grr=r(z5t,"flaubert"),z5t.forEach(t),Orr=r(ANe," \u2014 "),OQ=n(ANe,"A",{href:!0});var Q5t=s(OQ);Vrr=r(Q5t,"FlaubertForQuestionAnsweringSimple"),Q5t.forEach(t),Xrr=r(ANe," (FlauBERT model)"),ANe.forEach(t),zrr=i(X),IF=n(X,"LI",{});var LNe=s(IF);A1e=n(LNe,"STRONG",{});var W5t=s(A1e);Qrr=r(W5t,"fnet"),W5t.forEach(t),Wrr=r(LNe," \u2014 "),VQ=n(LNe,"A",{href:!0});var H5t=s(VQ);Hrr=r(H5t,"FNetForQuestionAnswering"),H5t.forEach(t),Urr=r(LNe," (FNet model)"),LNe.forEach(t),Jrr=i(X),qF=n(X,"LI",{});var yNe=s(qF);L1e=n(yNe,"STRONG",{});var U5t=s(L1e);Yrr=r(U5t,"funnel"),U5t.forEach(t),Krr=r(yNe," \u2014 "),XQ=n(yNe,"A",{href:!0});var J5t=s(XQ);Zrr=r(J5t,"FunnelForQuestionAnswering"),J5t.forEach(t),etr=r(yNe," (Funnel Transformer model)"),yNe.forEach(t),otr=i(X),jF=n(X,"LI",{});var xNe=s(jF);y1e=n(xNe,"STRONG",{});var Y5t=s(y1e);rtr=r(Y5t,"gptj"),Y5t.forEach(t),ttr=r(xNe," \u2014 "),zQ=n(xNe,"A",{href:!0});var K5t=s(zQ);atr=r(K5t,"GPTJForQuestionAnswering"),K5t.forEach(t),ntr=r(xNe," (GPT-J model)"),xNe.forEach(t),str=i(X),DF=n(X,"LI",{});var $Ne=s(DF);x1e=n($Ne,"STRONG",{});var Z5t=s(x1e);ltr=r(Z5t,"ibert"),Z5t.forEach(t),itr=r($Ne," \u2014 "),QQ=n($Ne,"A",{href:!0});var ewt=s(QQ);dtr=r(ewt,"IBertForQuestionAnswering"),ewt.forEach(t),ctr=r($Ne," (I-BERT model)"),$Ne.forEach(t),ftr=i(X),GF=n(X,"LI",{});var kNe=s(GF);$1e=n(kNe,"STRONG",{});var owt=s($1e);mtr=r(owt,"layoutlmv2"),owt.forEach(t),gtr=r(kNe," \u2014 "),WQ=n(kNe,"A",{href:!0});var rwt=s(WQ);htr=r(rwt,"LayoutLMv2ForQuestionAnswering"),rwt.forEach(t),ptr=r(kNe," (LayoutLMv2 model)"),kNe.forEach(t),_tr=i(X),OF=n(X,"LI",{});var SNe=s(OF);k1e=n(SNe,"STRONG",{});var twt=s(k1e);utr=r(twt,"layoutlmv3"),twt.forEach(t),btr=r(SNe," \u2014 "),HQ=n(SNe,"A",{href:!0});var awt=s(HQ);vtr=r(awt,"LayoutLMv3ForQuestionAnswering"),awt.forEach(t),Ftr=r(SNe," (LayoutLMv3 model)"),SNe.forEach(t),Ttr=i(X),VF=n(X,"LI",{});var RNe=s(VF);S1e=n(RNe,"STRONG",{});var nwt=s(S1e);Mtr=r(nwt,"led"),nwt.forEach(t),Etr=r(RNe," \u2014 "),UQ=n(RNe,"A",{href:!0});var swt=s(UQ);Ctr=r(swt,"LEDForQuestionAnswering"),swt.forEach(t),wtr=r(RNe," (LED model)"),RNe.forEach(t),Atr=i(X),XF=n(X,"LI",{});var PNe=s(XF);R1e=n(PNe,"STRONG",{});var lwt=s(R1e);Ltr=r(lwt,"longformer"),lwt.forEach(t),ytr=r(PNe," \u2014 "),JQ=n(PNe,"A",{href:!0});var iwt=s(JQ);xtr=r(iwt,"LongformerForQuestionAnswering"),iwt.forEach(t),$tr=r(PNe," (Longformer model)"),PNe.forEach(t),ktr=i(X),zF=n(X,"LI",{});var BNe=s(zF);P1e=n(BNe,"STRONG",{});var dwt=s(P1e);Str=r(dwt,"lxmert"),dwt.forEach(t),Rtr=r(BNe," \u2014 "),YQ=n(BNe,"A",{href:!0});var cwt=s(YQ);Ptr=r(cwt,"LxmertForQuestionAnswering"),cwt.forEach(t),Btr=r(BNe," (LXMERT model)"),BNe.forEach(t),Ntr=i(X),QF=n(X,"LI",{});var NNe=s(QF);B1e=n(NNe,"STRONG",{});var fwt=s(B1e);Itr=r(fwt,"mbart"),fwt.forEach(t),qtr=r(NNe," \u2014 "),KQ=n(NNe,"A",{href:!0});var mwt=s(KQ);jtr=r(mwt,"MBartForQuestionAnswering"),mwt.forEach(t),Dtr=r(NNe," (mBART model)"),NNe.forEach(t),Gtr=i(X),WF=n(X,"LI",{});var INe=s(WF);N1e=n(INe,"STRONG",{});var gwt=s(N1e);Otr=r(gwt,"megatron-bert"),gwt.forEach(t),Vtr=r(INe," \u2014 "),ZQ=n(INe,"A",{href:!0});var hwt=s(ZQ);Xtr=r(hwt,"MegatronBertForQuestionAnswering"),hwt.forEach(t),ztr=r(INe," (Megatron-BERT model)"),INe.forEach(t),Qtr=i(X),HF=n(X,"LI",{});var qNe=s(HF);I1e=n(qNe,"STRONG",{});var pwt=s(I1e);Wtr=r(pwt,"mobilebert"),pwt.forEach(t),Htr=r(qNe," \u2014 "),eW=n(qNe,"A",{href:!0});var _wt=s(eW);Utr=r(_wt,"MobileBertForQuestionAnswering"),_wt.forEach(t),Jtr=r(qNe," (MobileBERT model)"),qNe.forEach(t),Ytr=i(X),UF=n(X,"LI",{});var jNe=s(UF);q1e=n(jNe,"STRONG",{});var uwt=s(q1e);Ktr=r(uwt,"mpnet"),uwt.forEach(t),Ztr=r(jNe," \u2014 "),oW=n(jNe,"A",{href:!0});var bwt=s(oW);ear=r(bwt,"MPNetForQuestionAnswering"),bwt.forEach(t),oar=r(jNe," (MPNet model)"),jNe.forEach(t),rar=i(X),JF=n(X,"LI",{});var DNe=s(JF);j1e=n(DNe,"STRONG",{});var vwt=s(j1e);tar=r(vwt,"mvp"),vwt.forEach(t),aar=r(DNe," \u2014 "),rW=n(DNe,"A",{href:!0});var Fwt=s(rW);nar=r(Fwt,"MvpForQuestionAnswering"),Fwt.forEach(t),sar=r(DNe," (MVP model)"),DNe.forEach(t),lar=i(X),YF=n(X,"LI",{});var GNe=s(YF);D1e=n(GNe,"STRONG",{});var Twt=s(D1e);iar=r(Twt,"nezha"),Twt.forEach(t),dar=r(GNe," \u2014 "),tW=n(GNe,"A",{href:!0});var Mwt=s(tW);car=r(Mwt,"NezhaForQuestionAnswering"),Mwt.forEach(t),far=r(GNe," (Nezha model)"),GNe.forEach(t),mar=i(X),KF=n(X,"LI",{});var ONe=s(KF);G1e=n(ONe,"STRONG",{});var Ewt=s(G1e);gar=r(Ewt,"nystromformer"),Ewt.forEach(t),har=r(ONe," \u2014 "),aW=n(ONe,"A",{href:!0});var Cwt=s(aW);par=r(Cwt,"NystromformerForQuestionAnswering"),Cwt.forEach(t),_ar=r(ONe," (Nystr\xF6mformer model)"),ONe.forEach(t),uar=i(X),ZF=n(X,"LI",{});var VNe=s(ZF);O1e=n(VNe,"STRONG",{});var wwt=s(O1e);bar=r(wwt,"qdqbert"),wwt.forEach(t),Far=r(VNe," \u2014 "),nW=n(VNe,"A",{href:!0});var Awt=s(nW);Tar=r(Awt,"QDQBertForQuestionAnswering"),Awt.forEach(t),Mar=r(VNe," (QDQBert model)"),VNe.forEach(t),Ear=i(X),eT=n(X,"LI",{});var XNe=s(eT);V1e=n(XNe,"STRONG",{});var Lwt=s(V1e);Car=r(Lwt,"reformer"),Lwt.forEach(t),war=r(XNe," \u2014 "),sW=n(XNe,"A",{href:!0});var ywt=s(sW);Aar=r(ywt,"ReformerForQuestionAnswering"),ywt.forEach(t),Lar=r(XNe," (Reformer model)"),XNe.forEach(t),yar=i(X),oT=n(X,"LI",{});var zNe=s(oT);X1e=n(zNe,"STRONG",{});var xwt=s(X1e);xar=r(xwt,"rembert"),xwt.forEach(t),$ar=r(zNe," \u2014 "),lW=n(zNe,"A",{href:!0});var $wt=s(lW);kar=r($wt,"RemBertForQuestionAnswering"),$wt.forEach(t),Sar=r(zNe," (RemBERT model)"),zNe.forEach(t),Rar=i(X),rT=n(X,"LI",{});var QNe=s(rT);z1e=n(QNe,"STRONG",{});var kwt=s(z1e);Par=r(kwt,"roberta"),kwt.forEach(t),Bar=r(QNe," \u2014 "),iW=n(QNe,"A",{href:!0});var Swt=s(iW);Nar=r(Swt,"RobertaForQuestionAnswering"),Swt.forEach(t),Iar=r(QNe," (RoBERTa model)"),QNe.forEach(t),qar=i(X),tT=n(X,"LI",{});var WNe=s(tT);Q1e=n(WNe,"STRONG",{});var Rwt=s(Q1e);jar=r(Rwt,"roformer"),Rwt.forEach(t),Dar=r(WNe," \u2014 "),dW=n(WNe,"A",{href:!0});var Pwt=s(dW);Gar=r(Pwt,"RoFormerForQuestionAnswering"),Pwt.forEach(t),Oar=r(WNe," (RoFormer model)"),WNe.forEach(t),Var=i(X),aT=n(X,"LI",{});var HNe=s(aT);W1e=n(HNe,"STRONG",{});var Bwt=s(W1e);Xar=r(Bwt,"splinter"),Bwt.forEach(t),zar=r(HNe," \u2014 "),cW=n(HNe,"A",{href:!0});var Nwt=s(cW);Qar=r(Nwt,"SplinterForQuestionAnswering"),Nwt.forEach(t),War=r(HNe," (Splinter model)"),HNe.forEach(t),Har=i(X),nT=n(X,"LI",{});var UNe=s(nT);H1e=n(UNe,"STRONG",{});var Iwt=s(H1e);Uar=r(Iwt,"squeezebert"),Iwt.forEach(t),Jar=r(UNe," \u2014 "),fW=n(UNe,"A",{href:!0});var qwt=s(fW);Yar=r(qwt,"SqueezeBertForQuestionAnswering"),qwt.forEach(t),Kar=r(UNe," (SqueezeBERT model)"),UNe.forEach(t),Zar=i(X),sT=n(X,"LI",{});var JNe=s(sT);U1e=n(JNe,"STRONG",{});var jwt=s(U1e);enr=r(jwt,"xlm"),jwt.forEach(t),onr=r(JNe," \u2014 "),mW=n(JNe,"A",{href:!0});var Dwt=s(mW);rnr=r(Dwt,"XLMForQuestionAnsweringSimple"),Dwt.forEach(t),tnr=r(JNe," (XLM model)"),JNe.forEach(t),anr=i(X),lT=n(X,"LI",{});var YNe=s(lT);J1e=n(YNe,"STRONG",{});var Gwt=s(J1e);nnr=r(Gwt,"xlm-roberta"),Gwt.forEach(t),snr=r(YNe," \u2014 "),gW=n(YNe,"A",{href:!0});var Owt=s(gW);lnr=r(Owt,"XLMRobertaForQuestionAnswering"),Owt.forEach(t),inr=r(YNe," (XLM-RoBERTa model)"),YNe.forEach(t),dnr=i(X),iT=n(X,"LI",{});var KNe=s(iT);Y1e=n(KNe,"STRONG",{});var Vwt=s(Y1e);cnr=r(Vwt,"xlm-roberta-xl"),Vwt.forEach(t),fnr=r(KNe," \u2014 "),hW=n(KNe,"A",{href:!0});var Xwt=s(hW);mnr=r(Xwt,"XLMRobertaXLForQuestionAnswering"),Xwt.forEach(t),gnr=r(KNe," (XLM-RoBERTa-XL model)"),KNe.forEach(t),hnr=i(X),dT=n(X,"LI",{});var ZNe=s(dT);K1e=n(ZNe,"STRONG",{});var zwt=s(K1e);pnr=r(zwt,"xlnet"),zwt.forEach(t),_nr=r(ZNe," \u2014 "),pW=n(ZNe,"A",{href:!0});var Qwt=s(pW);unr=r(Qwt,"XLNetForQuestionAnsweringSimple"),Qwt.forEach(t),bnr=r(ZNe," (XLNet model)"),ZNe.forEach(t),vnr=i(X),cT=n(X,"LI",{});var eIe=s(cT);Z1e=n(eIe,"STRONG",{});var Wwt=s(Z1e);Fnr=r(Wwt,"yoso"),Wwt.forEach(t),Tnr=r(eIe," \u2014 "),_W=n(eIe,"A",{href:!0});var Hwt=s(_W);Mnr=r(Hwt,"YosoForQuestionAnswering"),Hwt.forEach(t),Enr=r(eIe," (YOSO model)"),eIe.forEach(t),X.forEach(t),Cnr=i(ua),fT=n(ua,"P",{});var oIe=s(fT);wnr=r(oIe,"The model is set in evaluation mode by default using "),ebe=n(oIe,"CODE",{});var Uwt=s(ebe);Anr=r(Uwt,"model.eval()"),Uwt.forEach(t),Lnr=r(oIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),obe=n(oIe,"CODE",{});var Jwt=s(obe);ynr=r(Jwt,"model.train()"),Jwt.forEach(t),oIe.forEach(t),xnr=i(ua),T(mT.$$.fragment,ua),ua.forEach(t),ml.forEach(t),YXe=i(f),bd=n(f,"H2",{class:!0});var tWe=s(bd);gT=n(tWe,"A",{id:!0,class:!0,href:!0});var Ywt=s(gT);rbe=n(Ywt,"SPAN",{});var Kwt=s(rbe);T(ky.$$.fragment,Kwt),Kwt.forEach(t),Ywt.forEach(t),$nr=i(tWe),tbe=n(tWe,"SPAN",{});var Zwt=s(tbe);knr=r(Zwt,"AutoModelForTableQuestionAnswering"),Zwt.forEach(t),tWe.forEach(t),KXe=i(f),Go=n(f,"DIV",{class:!0});var gl=s(Go);T(Sy.$$.fragment,gl),Snr=i(gl),vd=n(gl,"P",{});var dte=s(vd);Rnr=r(dte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),uW=n(dte,"A",{href:!0});var eAt=s(uW);Pnr=r(eAt,"from_pretrained()"),eAt.forEach(t),Bnr=r(dte," class method or the "),bW=n(dte,"A",{href:!0});var oAt=s(bW);Nnr=r(oAt,"from_config()"),oAt.forEach(t),Inr=r(dte,` class
method.`),dte.forEach(t),qnr=i(gl),Ry=n(gl,"P",{});var aWe=s(Ry);jnr=r(aWe,"This class cannot be instantiated directly using "),abe=n(aWe,"CODE",{});var rAt=s(abe);Dnr=r(rAt,"__init__()"),rAt.forEach(t),Gnr=r(aWe," (throws an error)."),aWe.forEach(t),Onr=i(gl),bt=n(gl,"DIV",{class:!0});var R6=s(bt);T(Py.$$.fragment,R6),Vnr=i(R6),nbe=n(R6,"P",{});var tAt=s(nbe);Xnr=r(tAt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),tAt.forEach(t),znr=i(R6),Fd=n(R6,"P",{});var cte=s(Fd);Qnr=r(cte,`Note:
Loading a model from its configuration file does `),sbe=n(cte,"STRONG",{});var aAt=s(sbe);Wnr=r(aAt,"not"),aAt.forEach(t),Hnr=r(cte,` load the model weights. It only affects the
model\u2019s configuration. Use `),vW=n(cte,"A",{href:!0});var nAt=s(vW);Unr=r(nAt,"from_pretrained()"),nAt.forEach(t),Jnr=r(cte," to load the model weights."),cte.forEach(t),Ynr=i(R6),T(hT.$$.fragment,R6),R6.forEach(t),Knr=i(gl),lo=n(gl,"DIV",{class:!0});var ba=s(lo);T(By.$$.fragment,ba),Znr=i(ba),lbe=n(ba,"P",{});var sAt=s(lbe);esr=r(sAt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),sAt.forEach(t),osr=i(ba),Qa=n(ba,"P",{});var P6=s(Qa);rsr=r(P6,"The model class to instantiate is selected based on the "),ibe=n(P6,"CODE",{});var lAt=s(ibe);tsr=r(lAt,"model_type"),lAt.forEach(t),asr=r(P6,` property of the config object (either
passed as an argument or loaded from `),dbe=n(P6,"CODE",{});var iAt=s(dbe);nsr=r(iAt,"pretrained_model_name_or_path"),iAt.forEach(t),ssr=r(P6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cbe=n(P6,"CODE",{});var dAt=s(cbe);lsr=r(dAt,"pretrained_model_name_or_path"),dAt.forEach(t),isr=r(P6,":"),P6.forEach(t),dsr=i(ba),fbe=n(ba,"UL",{});var cAt=s(fbe);pT=n(cAt,"LI",{});var rIe=s(pT);mbe=n(rIe,"STRONG",{});var fAt=s(mbe);csr=r(fAt,"tapas"),fAt.forEach(t),fsr=r(rIe," \u2014 "),FW=n(rIe,"A",{href:!0});var mAt=s(FW);msr=r(mAt,"TapasForQuestionAnswering"),mAt.forEach(t),gsr=r(rIe," (TAPAS model)"),rIe.forEach(t),cAt.forEach(t),hsr=i(ba),_T=n(ba,"P",{});var tIe=s(_T);psr=r(tIe,"The model is set in evaluation mode by default using "),gbe=n(tIe,"CODE",{});var gAt=s(gbe);_sr=r(gAt,"model.eval()"),gAt.forEach(t),usr=r(tIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hbe=n(tIe,"CODE",{});var hAt=s(hbe);bsr=r(hAt,"model.train()"),hAt.forEach(t),tIe.forEach(t),vsr=i(ba),T(uT.$$.fragment,ba),ba.forEach(t),gl.forEach(t),ZXe=i(f),Td=n(f,"H2",{class:!0});var nWe=s(Td);bT=n(nWe,"A",{id:!0,class:!0,href:!0});var pAt=s(bT);pbe=n(pAt,"SPAN",{});var _At=s(pbe);T(Ny.$$.fragment,_At),_At.forEach(t),pAt.forEach(t),Fsr=i(nWe),_be=n(nWe,"SPAN",{});var uAt=s(_be);Tsr=r(uAt,"AutoModelForImageClassification"),uAt.forEach(t),nWe.forEach(t),eze=i(f),Oo=n(f,"DIV",{class:!0});var hl=s(Oo);T(Iy.$$.fragment,hl),Msr=i(hl),Md=n(hl,"P",{});var fte=s(Md);Esr=r(fte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),TW=n(fte,"A",{href:!0});var bAt=s(TW);Csr=r(bAt,"from_pretrained()"),bAt.forEach(t),wsr=r(fte," class method or the "),MW=n(fte,"A",{href:!0});var vAt=s(MW);Asr=r(vAt,"from_config()"),vAt.forEach(t),Lsr=r(fte,` class
method.`),fte.forEach(t),ysr=i(hl),qy=n(hl,"P",{});var sWe=s(qy);xsr=r(sWe,"This class cannot be instantiated directly using "),ube=n(sWe,"CODE",{});var FAt=s(ube);$sr=r(FAt,"__init__()"),FAt.forEach(t),ksr=r(sWe," (throws an error)."),sWe.forEach(t),Ssr=i(hl),vt=n(hl,"DIV",{class:!0});var B6=s(vt);T(jy.$$.fragment,B6),Rsr=i(B6),bbe=n(B6,"P",{});var TAt=s(bbe);Psr=r(TAt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),TAt.forEach(t),Bsr=i(B6),Ed=n(B6,"P",{});var mte=s(Ed);Nsr=r(mte,`Note:
Loading a model from its configuration file does `),vbe=n(mte,"STRONG",{});var MAt=s(vbe);Isr=r(MAt,"not"),MAt.forEach(t),qsr=r(mte,` load the model weights. It only affects the
model\u2019s configuration. Use `),EW=n(mte,"A",{href:!0});var EAt=s(EW);jsr=r(EAt,"from_pretrained()"),EAt.forEach(t),Dsr=r(mte," to load the model weights."),mte.forEach(t),Gsr=i(B6),T(vT.$$.fragment,B6),B6.forEach(t),Osr=i(hl),io=n(hl,"DIV",{class:!0});var va=s(io);T(Dy.$$.fragment,va),Vsr=i(va),Fbe=n(va,"P",{});var CAt=s(Fbe);Xsr=r(CAt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),CAt.forEach(t),zsr=i(va),Wa=n(va,"P",{});var N6=s(Wa);Qsr=r(N6,"The model class to instantiate is selected based on the "),Tbe=n(N6,"CODE",{});var wAt=s(Tbe);Wsr=r(wAt,"model_type"),wAt.forEach(t),Hsr=r(N6,` property of the config object (either
passed as an argument or loaded from `),Mbe=n(N6,"CODE",{});var AAt=s(Mbe);Usr=r(AAt,"pretrained_model_name_or_path"),AAt.forEach(t),Jsr=r(N6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ebe=n(N6,"CODE",{});var LAt=s(Ebe);Ysr=r(LAt,"pretrained_model_name_or_path"),LAt.forEach(t),Ksr=r(N6,":"),N6.forEach(t),Zsr=i(va),ve=n(va,"UL",{});var Te=s(ve);FT=n(Te,"LI",{});var aIe=s(FT);Cbe=n(aIe,"STRONG",{});var yAt=s(Cbe);elr=r(yAt,"beit"),yAt.forEach(t),olr=r(aIe," \u2014 "),CW=n(aIe,"A",{href:!0});var xAt=s(CW);rlr=r(xAt,"BeitForImageClassification"),xAt.forEach(t),tlr=r(aIe," (BEiT model)"),aIe.forEach(t),alr=i(Te),TT=n(Te,"LI",{});var nIe=s(TT);wbe=n(nIe,"STRONG",{});var $At=s(wbe);nlr=r($At,"convnext"),$At.forEach(t),slr=r(nIe," \u2014 "),wW=n(nIe,"A",{href:!0});var kAt=s(wW);llr=r(kAt,"ConvNextForImageClassification"),kAt.forEach(t),ilr=r(nIe," (ConvNeXT model)"),nIe.forEach(t),dlr=i(Te),MT=n(Te,"LI",{});var sIe=s(MT);Abe=n(sIe,"STRONG",{});var SAt=s(Abe);clr=r(SAt,"cvt"),SAt.forEach(t),flr=r(sIe," \u2014 "),AW=n(sIe,"A",{href:!0});var RAt=s(AW);mlr=r(RAt,"CvtForImageClassification"),RAt.forEach(t),glr=r(sIe," (CvT model)"),sIe.forEach(t),hlr=i(Te),ET=n(Te,"LI",{});var lIe=s(ET);Lbe=n(lIe,"STRONG",{});var PAt=s(Lbe);plr=r(PAt,"data2vec-vision"),PAt.forEach(t),_lr=r(lIe," \u2014 "),LW=n(lIe,"A",{href:!0});var BAt=s(LW);ulr=r(BAt,"Data2VecVisionForImageClassification"),BAt.forEach(t),blr=r(lIe," (Data2VecVision model)"),lIe.forEach(t),vlr=i(Te),Us=n(Te,"LI",{});var IS=s(Us);ybe=n(IS,"STRONG",{});var NAt=s(ybe);Flr=r(NAt,"deit"),NAt.forEach(t),Tlr=r(IS," \u2014 "),yW=n(IS,"A",{href:!0});var IAt=s(yW);Mlr=r(IAt,"DeiTForImageClassification"),IAt.forEach(t),Elr=r(IS," or "),xW=n(IS,"A",{href:!0});var qAt=s(xW);Clr=r(qAt,"DeiTForImageClassificationWithTeacher"),qAt.forEach(t),wlr=r(IS," (DeiT model)"),IS.forEach(t),Alr=i(Te),CT=n(Te,"LI",{});var iIe=s(CT);xbe=n(iIe,"STRONG",{});var jAt=s(xbe);Llr=r(jAt,"imagegpt"),jAt.forEach(t),ylr=r(iIe," \u2014 "),$W=n(iIe,"A",{href:!0});var DAt=s($W);xlr=r(DAt,"ImageGPTForImageClassification"),DAt.forEach(t),$lr=r(iIe," (ImageGPT model)"),iIe.forEach(t),klr=i(Te),Js=n(Te,"LI",{});var qS=s(Js);$be=n(qS,"STRONG",{});var GAt=s($be);Slr=r(GAt,"levit"),GAt.forEach(t),Rlr=r(qS," \u2014 "),kW=n(qS,"A",{href:!0});var OAt=s(kW);Plr=r(OAt,"LevitForImageClassification"),OAt.forEach(t),Blr=r(qS," or "),SW=n(qS,"A",{href:!0});var VAt=s(SW);Nlr=r(VAt,"LevitForImageClassificationWithTeacher"),VAt.forEach(t),Ilr=r(qS," (LeViT model)"),qS.forEach(t),qlr=i(Te),wT=n(Te,"LI",{});var dIe=s(wT);kbe=n(dIe,"STRONG",{});var XAt=s(kbe);jlr=r(XAt,"mobilevit"),XAt.forEach(t),Dlr=r(dIe," \u2014 "),RW=n(dIe,"A",{href:!0});var zAt=s(RW);Glr=r(zAt,"MobileViTForImageClassification"),zAt.forEach(t),Olr=r(dIe," (MobileViT model)"),dIe.forEach(t),Vlr=i(Te),Ft=n(Te,"LI",{});var Pf=s(Ft);Sbe=n(Pf,"STRONG",{});var QAt=s(Sbe);Xlr=r(QAt,"perceiver"),QAt.forEach(t),zlr=r(Pf," \u2014 "),PW=n(Pf,"A",{href:!0});var WAt=s(PW);Qlr=r(WAt,"PerceiverForImageClassificationLearned"),WAt.forEach(t),Wlr=r(Pf," or "),BW=n(Pf,"A",{href:!0});var HAt=s(BW);Hlr=r(HAt,"PerceiverForImageClassificationFourier"),HAt.forEach(t),Ulr=r(Pf," or "),NW=n(Pf,"A",{href:!0});var UAt=s(NW);Jlr=r(UAt,"PerceiverForImageClassificationConvProcessing"),UAt.forEach(t),Ylr=r(Pf," (Perceiver model)"),Pf.forEach(t),Klr=i(Te),AT=n(Te,"LI",{});var cIe=s(AT);Rbe=n(cIe,"STRONG",{});var JAt=s(Rbe);Zlr=r(JAt,"poolformer"),JAt.forEach(t),eir=r(cIe," \u2014 "),IW=n(cIe,"A",{href:!0});var YAt=s(IW);oir=r(YAt,"PoolFormerForImageClassification"),YAt.forEach(t),rir=r(cIe," (PoolFormer model)"),cIe.forEach(t),tir=i(Te),LT=n(Te,"LI",{});var fIe=s(LT);Pbe=n(fIe,"STRONG",{});var KAt=s(Pbe);air=r(KAt,"regnet"),KAt.forEach(t),nir=r(fIe," \u2014 "),qW=n(fIe,"A",{href:!0});var ZAt=s(qW);sir=r(ZAt,"RegNetForImageClassification"),ZAt.forEach(t),lir=r(fIe," (RegNet model)"),fIe.forEach(t),iir=i(Te),yT=n(Te,"LI",{});var mIe=s(yT);Bbe=n(mIe,"STRONG",{});var e6t=s(Bbe);dir=r(e6t,"resnet"),e6t.forEach(t),cir=r(mIe," \u2014 "),jW=n(mIe,"A",{href:!0});var o6t=s(jW);fir=r(o6t,"ResNetForImageClassification"),o6t.forEach(t),mir=r(mIe," (ResNet model)"),mIe.forEach(t),gir=i(Te),xT=n(Te,"LI",{});var gIe=s(xT);Nbe=n(gIe,"STRONG",{});var r6t=s(Nbe);hir=r(r6t,"segformer"),r6t.forEach(t),pir=r(gIe," \u2014 "),DW=n(gIe,"A",{href:!0});var t6t=s(DW);_ir=r(t6t,"SegformerForImageClassification"),t6t.forEach(t),uir=r(gIe," (SegFormer model)"),gIe.forEach(t),bir=i(Te),$T=n(Te,"LI",{});var hIe=s($T);Ibe=n(hIe,"STRONG",{});var a6t=s(Ibe);vir=r(a6t,"swin"),a6t.forEach(t),Fir=r(hIe," \u2014 "),GW=n(hIe,"A",{href:!0});var n6t=s(GW);Tir=r(n6t,"SwinForImageClassification"),n6t.forEach(t),Mir=r(hIe," (Swin Transformer model)"),hIe.forEach(t),Eir=i(Te),kT=n(Te,"LI",{});var pIe=s(kT);qbe=n(pIe,"STRONG",{});var s6t=s(qbe);Cir=r(s6t,"van"),s6t.forEach(t),wir=r(pIe," \u2014 "),OW=n(pIe,"A",{href:!0});var l6t=s(OW);Air=r(l6t,"VanForImageClassification"),l6t.forEach(t),Lir=r(pIe," (VAN model)"),pIe.forEach(t),yir=i(Te),ST=n(Te,"LI",{});var _Ie=s(ST);jbe=n(_Ie,"STRONG",{});var i6t=s(jbe);xir=r(i6t,"vit"),i6t.forEach(t),$ir=r(_Ie," \u2014 "),VW=n(_Ie,"A",{href:!0});var d6t=s(VW);kir=r(d6t,"ViTForImageClassification"),d6t.forEach(t),Sir=r(_Ie," (ViT model)"),_Ie.forEach(t),Te.forEach(t),Rir=i(va),RT=n(va,"P",{});var uIe=s(RT);Pir=r(uIe,"The model is set in evaluation mode by default using "),Dbe=n(uIe,"CODE",{});var c6t=s(Dbe);Bir=r(c6t,"model.eval()"),c6t.forEach(t),Nir=r(uIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gbe=n(uIe,"CODE",{});var f6t=s(Gbe);Iir=r(f6t,"model.train()"),f6t.forEach(t),uIe.forEach(t),qir=i(va),T(PT.$$.fragment,va),va.forEach(t),hl.forEach(t),oze=i(f),Cd=n(f,"H2",{class:!0});var lWe=s(Cd);BT=n(lWe,"A",{id:!0,class:!0,href:!0});var m6t=s(BT);Obe=n(m6t,"SPAN",{});var g6t=s(Obe);T(Gy.$$.fragment,g6t),g6t.forEach(t),m6t.forEach(t),jir=i(lWe),Vbe=n(lWe,"SPAN",{});var h6t=s(Vbe);Dir=r(h6t,"AutoModelForVision2Seq"),h6t.forEach(t),lWe.forEach(t),rze=i(f),Vo=n(f,"DIV",{class:!0});var pl=s(Vo);T(Oy.$$.fragment,pl),Gir=i(pl),wd=n(pl,"P",{});var gte=s(wd);Oir=r(gte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),XW=n(gte,"A",{href:!0});var p6t=s(XW);Vir=r(p6t,"from_pretrained()"),p6t.forEach(t),Xir=r(gte," class method or the "),zW=n(gte,"A",{href:!0});var _6t=s(zW);zir=r(_6t,"from_config()"),_6t.forEach(t),Qir=r(gte,` class
method.`),gte.forEach(t),Wir=i(pl),Vy=n(pl,"P",{});var iWe=s(Vy);Hir=r(iWe,"This class cannot be instantiated directly using "),Xbe=n(iWe,"CODE",{});var u6t=s(Xbe);Uir=r(u6t,"__init__()"),u6t.forEach(t),Jir=r(iWe," (throws an error)."),iWe.forEach(t),Yir=i(pl),Tt=n(pl,"DIV",{class:!0});var I6=s(Tt);T(Xy.$$.fragment,I6),Kir=i(I6),zbe=n(I6,"P",{});var b6t=s(zbe);Zir=r(b6t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),b6t.forEach(t),edr=i(I6),Ad=n(I6,"P",{});var hte=s(Ad);odr=r(hte,`Note:
Loading a model from its configuration file does `),Qbe=n(hte,"STRONG",{});var v6t=s(Qbe);rdr=r(v6t,"not"),v6t.forEach(t),tdr=r(hte,` load the model weights. It only affects the
model\u2019s configuration. Use `),QW=n(hte,"A",{href:!0});var F6t=s(QW);adr=r(F6t,"from_pretrained()"),F6t.forEach(t),ndr=r(hte," to load the model weights."),hte.forEach(t),sdr=i(I6),T(NT.$$.fragment,I6),I6.forEach(t),ldr=i(pl),co=n(pl,"DIV",{class:!0});var Fa=s(co);T(zy.$$.fragment,Fa),idr=i(Fa),Wbe=n(Fa,"P",{});var T6t=s(Wbe);ddr=r(T6t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),T6t.forEach(t),cdr=i(Fa),Ha=n(Fa,"P",{});var q6=s(Ha);fdr=r(q6,"The model class to instantiate is selected based on the "),Hbe=n(q6,"CODE",{});var M6t=s(Hbe);mdr=r(M6t,"model_type"),M6t.forEach(t),gdr=r(q6,` property of the config object (either
passed as an argument or loaded from `),Ube=n(q6,"CODE",{});var E6t=s(Ube);hdr=r(E6t,"pretrained_model_name_or_path"),E6t.forEach(t),pdr=r(q6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jbe=n(q6,"CODE",{});var C6t=s(Jbe);_dr=r(C6t,"pretrained_model_name_or_path"),C6t.forEach(t),udr=r(q6,":"),q6.forEach(t),bdr=i(Fa),Ybe=n(Fa,"UL",{});var w6t=s(Ybe);IT=n(w6t,"LI",{});var bIe=s(IT);Kbe=n(bIe,"STRONG",{});var A6t=s(Kbe);vdr=r(A6t,"vision-encoder-decoder"),A6t.forEach(t),Fdr=r(bIe," \u2014 "),WW=n(bIe,"A",{href:!0});var L6t=s(WW);Tdr=r(L6t,"VisionEncoderDecoderModel"),L6t.forEach(t),Mdr=r(bIe," (Vision Encoder decoder model)"),bIe.forEach(t),w6t.forEach(t),Edr=i(Fa),qT=n(Fa,"P",{});var vIe=s(qT);Cdr=r(vIe,"The model is set in evaluation mode by default using "),Zbe=n(vIe,"CODE",{});var y6t=s(Zbe);wdr=r(y6t,"model.eval()"),y6t.forEach(t),Adr=r(vIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eve=n(vIe,"CODE",{});var x6t=s(eve);Ldr=r(x6t,"model.train()"),x6t.forEach(t),vIe.forEach(t),ydr=i(Fa),T(jT.$$.fragment,Fa),Fa.forEach(t),pl.forEach(t),tze=i(f),Ld=n(f,"H2",{class:!0});var dWe=s(Ld);DT=n(dWe,"A",{id:!0,class:!0,href:!0});var $6t=s(DT);ove=n($6t,"SPAN",{});var k6t=s(ove);T(Qy.$$.fragment,k6t),k6t.forEach(t),$6t.forEach(t),xdr=i(dWe),rve=n(dWe,"SPAN",{});var S6t=s(rve);$dr=r(S6t,"AutoModelForVisualQuestionAnswering"),S6t.forEach(t),dWe.forEach(t),aze=i(f),Xo=n(f,"DIV",{class:!0});var _l=s(Xo);T(Wy.$$.fragment,_l),kdr=i(_l),yd=n(_l,"P",{});var pte=s(yd);Sdr=r(pte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),HW=n(pte,"A",{href:!0});var R6t=s(HW);Rdr=r(R6t,"from_pretrained()"),R6t.forEach(t),Pdr=r(pte," class method or the "),UW=n(pte,"A",{href:!0});var P6t=s(UW);Bdr=r(P6t,"from_config()"),P6t.forEach(t),Ndr=r(pte,` class
method.`),pte.forEach(t),Idr=i(_l),Hy=n(_l,"P",{});var cWe=s(Hy);qdr=r(cWe,"This class cannot be instantiated directly using "),tve=n(cWe,"CODE",{});var B6t=s(tve);jdr=r(B6t,"__init__()"),B6t.forEach(t),Ddr=r(cWe," (throws an error)."),cWe.forEach(t),Gdr=i(_l),Mt=n(_l,"DIV",{class:!0});var j6=s(Mt);T(Uy.$$.fragment,j6),Odr=i(j6),ave=n(j6,"P",{});var N6t=s(ave);Vdr=r(N6t,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),N6t.forEach(t),Xdr=i(j6),xd=n(j6,"P",{});var _te=s(xd);zdr=r(_te,`Note:
Loading a model from its configuration file does `),nve=n(_te,"STRONG",{});var I6t=s(nve);Qdr=r(I6t,"not"),I6t.forEach(t),Wdr=r(_te,` load the model weights. It only affects the
model\u2019s configuration. Use `),JW=n(_te,"A",{href:!0});var q6t=s(JW);Hdr=r(q6t,"from_pretrained()"),q6t.forEach(t),Udr=r(_te," to load the model weights."),_te.forEach(t),Jdr=i(j6),T(GT.$$.fragment,j6),j6.forEach(t),Ydr=i(_l),fo=n(_l,"DIV",{class:!0});var Ta=s(fo);T(Jy.$$.fragment,Ta),Kdr=i(Ta),sve=n(Ta,"P",{});var j6t=s(sve);Zdr=r(j6t,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),j6t.forEach(t),ecr=i(Ta),Ua=n(Ta,"P",{});var D6=s(Ua);ocr=r(D6,"The model class to instantiate is selected based on the "),lve=n(D6,"CODE",{});var D6t=s(lve);rcr=r(D6t,"model_type"),D6t.forEach(t),tcr=r(D6,` property of the config object (either
passed as an argument or loaded from `),ive=n(D6,"CODE",{});var G6t=s(ive);acr=r(G6t,"pretrained_model_name_or_path"),G6t.forEach(t),ncr=r(D6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dve=n(D6,"CODE",{});var O6t=s(dve);scr=r(O6t,"pretrained_model_name_or_path"),O6t.forEach(t),lcr=r(D6,":"),D6.forEach(t),icr=i(Ta),cve=n(Ta,"UL",{});var V6t=s(cve);OT=n(V6t,"LI",{});var FIe=s(OT);fve=n(FIe,"STRONG",{});var X6t=s(fve);dcr=r(X6t,"vilt"),X6t.forEach(t),ccr=r(FIe," \u2014 "),YW=n(FIe,"A",{href:!0});var z6t=s(YW);fcr=r(z6t,"ViltForQuestionAnswering"),z6t.forEach(t),mcr=r(FIe," (ViLT model)"),FIe.forEach(t),V6t.forEach(t),gcr=i(Ta),VT=n(Ta,"P",{});var TIe=s(VT);hcr=r(TIe,"The model is set in evaluation mode by default using "),mve=n(TIe,"CODE",{});var Q6t=s(mve);pcr=r(Q6t,"model.eval()"),Q6t.forEach(t),_cr=r(TIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gve=n(TIe,"CODE",{});var W6t=s(gve);ucr=r(W6t,"model.train()"),W6t.forEach(t),TIe.forEach(t),bcr=i(Ta),T(XT.$$.fragment,Ta),Ta.forEach(t),_l.forEach(t),nze=i(f),$d=n(f,"H2",{class:!0});var fWe=s($d);zT=n(fWe,"A",{id:!0,class:!0,href:!0});var H6t=s(zT);hve=n(H6t,"SPAN",{});var U6t=s(hve);T(Yy.$$.fragment,U6t),U6t.forEach(t),H6t.forEach(t),vcr=i(fWe),pve=n(fWe,"SPAN",{});var J6t=s(pve);Fcr=r(J6t,"AutoModelForAudioClassification"),J6t.forEach(t),fWe.forEach(t),sze=i(f),zo=n(f,"DIV",{class:!0});var ul=s(zo);T(Ky.$$.fragment,ul),Tcr=i(ul),kd=n(ul,"P",{});var ute=s(kd);Mcr=r(ute,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),KW=n(ute,"A",{href:!0});var Y6t=s(KW);Ecr=r(Y6t,"from_pretrained()"),Y6t.forEach(t),Ccr=r(ute," class method or the "),ZW=n(ute,"A",{href:!0});var K6t=s(ZW);wcr=r(K6t,"from_config()"),K6t.forEach(t),Acr=r(ute,` class
method.`),ute.forEach(t),Lcr=i(ul),Zy=n(ul,"P",{});var mWe=s(Zy);ycr=r(mWe,"This class cannot be instantiated directly using "),_ve=n(mWe,"CODE",{});var Z6t=s(_ve);xcr=r(Z6t,"__init__()"),Z6t.forEach(t),$cr=r(mWe," (throws an error)."),mWe.forEach(t),kcr=i(ul),Et=n(ul,"DIV",{class:!0});var G6=s(Et);T(e9.$$.fragment,G6),Scr=i(G6),uve=n(G6,"P",{});var e7t=s(uve);Rcr=r(e7t,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),e7t.forEach(t),Pcr=i(G6),Sd=n(G6,"P",{});var bte=s(Sd);Bcr=r(bte,`Note:
Loading a model from its configuration file does `),bve=n(bte,"STRONG",{});var o7t=s(bve);Ncr=r(o7t,"not"),o7t.forEach(t),Icr=r(bte,` load the model weights. It only affects the
model\u2019s configuration. Use `),eH=n(bte,"A",{href:!0});var r7t=s(eH);qcr=r(r7t,"from_pretrained()"),r7t.forEach(t),jcr=r(bte," to load the model weights."),bte.forEach(t),Dcr=i(G6),T(QT.$$.fragment,G6),G6.forEach(t),Gcr=i(ul),mo=n(ul,"DIV",{class:!0});var Ma=s(mo);T(o9.$$.fragment,Ma),Ocr=i(Ma),vve=n(Ma,"P",{});var t7t=s(vve);Vcr=r(t7t,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),t7t.forEach(t),Xcr=i(Ma),Ja=n(Ma,"P",{});var O6=s(Ja);zcr=r(O6,"The model class to instantiate is selected based on the "),Fve=n(O6,"CODE",{});var a7t=s(Fve);Qcr=r(a7t,"model_type"),a7t.forEach(t),Wcr=r(O6,` property of the config object (either
passed as an argument or loaded from `),Tve=n(O6,"CODE",{});var n7t=s(Tve);Hcr=r(n7t,"pretrained_model_name_or_path"),n7t.forEach(t),Ucr=r(O6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mve=n(O6,"CODE",{});var s7t=s(Mve);Jcr=r(s7t,"pretrained_model_name_or_path"),s7t.forEach(t),Ycr=r(O6,":"),O6.forEach(t),Kcr=i(Ma),Be=n(Ma,"UL",{});var ze=s(Be);WT=n(ze,"LI",{});var MIe=s(WT);Eve=n(MIe,"STRONG",{});var l7t=s(Eve);Zcr=r(l7t,"data2vec-audio"),l7t.forEach(t),efr=r(MIe," \u2014 "),oH=n(MIe,"A",{href:!0});var i7t=s(oH);ofr=r(i7t,"Data2VecAudioForSequenceClassification"),i7t.forEach(t),rfr=r(MIe," (Data2VecAudio model)"),MIe.forEach(t),tfr=i(ze),HT=n(ze,"LI",{});var EIe=s(HT);Cve=n(EIe,"STRONG",{});var d7t=s(Cve);afr=r(d7t,"hubert"),d7t.forEach(t),nfr=r(EIe," \u2014 "),rH=n(EIe,"A",{href:!0});var c7t=s(rH);sfr=r(c7t,"HubertForSequenceClassification"),c7t.forEach(t),lfr=r(EIe," (Hubert model)"),EIe.forEach(t),ifr=i(ze),UT=n(ze,"LI",{});var CIe=s(UT);wve=n(CIe,"STRONG",{});var f7t=s(wve);dfr=r(f7t,"sew"),f7t.forEach(t),cfr=r(CIe," \u2014 "),tH=n(CIe,"A",{href:!0});var m7t=s(tH);ffr=r(m7t,"SEWForSequenceClassification"),m7t.forEach(t),mfr=r(CIe," (SEW model)"),CIe.forEach(t),gfr=i(ze),JT=n(ze,"LI",{});var wIe=s(JT);Ave=n(wIe,"STRONG",{});var g7t=s(Ave);hfr=r(g7t,"sew-d"),g7t.forEach(t),pfr=r(wIe," \u2014 "),aH=n(wIe,"A",{href:!0});var h7t=s(aH);_fr=r(h7t,"SEWDForSequenceClassification"),h7t.forEach(t),ufr=r(wIe," (SEW-D model)"),wIe.forEach(t),bfr=i(ze),YT=n(ze,"LI",{});var AIe=s(YT);Lve=n(AIe,"STRONG",{});var p7t=s(Lve);vfr=r(p7t,"unispeech"),p7t.forEach(t),Ffr=r(AIe," \u2014 "),nH=n(AIe,"A",{href:!0});var _7t=s(nH);Tfr=r(_7t,"UniSpeechForSequenceClassification"),_7t.forEach(t),Mfr=r(AIe," (UniSpeech model)"),AIe.forEach(t),Efr=i(ze),KT=n(ze,"LI",{});var LIe=s(KT);yve=n(LIe,"STRONG",{});var u7t=s(yve);Cfr=r(u7t,"unispeech-sat"),u7t.forEach(t),wfr=r(LIe," \u2014 "),sH=n(LIe,"A",{href:!0});var b7t=s(sH);Afr=r(b7t,"UniSpeechSatForSequenceClassification"),b7t.forEach(t),Lfr=r(LIe," (UniSpeechSat model)"),LIe.forEach(t),yfr=i(ze),ZT=n(ze,"LI",{});var yIe=s(ZT);xve=n(yIe,"STRONG",{});var v7t=s(xve);xfr=r(v7t,"wav2vec2"),v7t.forEach(t),$fr=r(yIe," \u2014 "),lH=n(yIe,"A",{href:!0});var F7t=s(lH);kfr=r(F7t,"Wav2Vec2ForSequenceClassification"),F7t.forEach(t),Sfr=r(yIe," (Wav2Vec2 model)"),yIe.forEach(t),Rfr=i(ze),e8=n(ze,"LI",{});var xIe=s(e8);$ve=n(xIe,"STRONG",{});var T7t=s($ve);Pfr=r(T7t,"wav2vec2-conformer"),T7t.forEach(t),Bfr=r(xIe," \u2014 "),iH=n(xIe,"A",{href:!0});var M7t=s(iH);Nfr=r(M7t,"Wav2Vec2ConformerForSequenceClassification"),M7t.forEach(t),Ifr=r(xIe," (Wav2Vec2-Conformer model)"),xIe.forEach(t),qfr=i(ze),o8=n(ze,"LI",{});var $Ie=s(o8);kve=n($Ie,"STRONG",{});var E7t=s(kve);jfr=r(E7t,"wavlm"),E7t.forEach(t),Dfr=r($Ie," \u2014 "),dH=n($Ie,"A",{href:!0});var C7t=s(dH);Gfr=r(C7t,"WavLMForSequenceClassification"),C7t.forEach(t),Ofr=r($Ie," (WavLM model)"),$Ie.forEach(t),ze.forEach(t),Vfr=i(Ma),r8=n(Ma,"P",{});var kIe=s(r8);Xfr=r(kIe,"The model is set in evaluation mode by default using "),Sve=n(kIe,"CODE",{});var w7t=s(Sve);zfr=r(w7t,"model.eval()"),w7t.forEach(t),Qfr=r(kIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rve=n(kIe,"CODE",{});var A7t=s(Rve);Wfr=r(A7t,"model.train()"),A7t.forEach(t),kIe.forEach(t),Hfr=i(Ma),T(t8.$$.fragment,Ma),Ma.forEach(t),ul.forEach(t),lze=i(f),Rd=n(f,"H2",{class:!0});var gWe=s(Rd);a8=n(gWe,"A",{id:!0,class:!0,href:!0});var L7t=s(a8);Pve=n(L7t,"SPAN",{});var y7t=s(Pve);T(r9.$$.fragment,y7t),y7t.forEach(t),L7t.forEach(t),Ufr=i(gWe),Bve=n(gWe,"SPAN",{});var x7t=s(Bve);Jfr=r(x7t,"AutoModelForAudioFrameClassification"),x7t.forEach(t),gWe.forEach(t),ize=i(f),Qo=n(f,"DIV",{class:!0});var bl=s(Qo);T(t9.$$.fragment,bl),Yfr=i(bl),Pd=n(bl,"P",{});var vte=s(Pd);Kfr=r(vte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),cH=n(vte,"A",{href:!0});var $7t=s(cH);Zfr=r($7t,"from_pretrained()"),$7t.forEach(t),emr=r(vte," class method or the "),fH=n(vte,"A",{href:!0});var k7t=s(fH);omr=r(k7t,"from_config()"),k7t.forEach(t),rmr=r(vte,` class
method.`),vte.forEach(t),tmr=i(bl),a9=n(bl,"P",{});var hWe=s(a9);amr=r(hWe,"This class cannot be instantiated directly using "),Nve=n(hWe,"CODE",{});var S7t=s(Nve);nmr=r(S7t,"__init__()"),S7t.forEach(t),smr=r(hWe," (throws an error)."),hWe.forEach(t),lmr=i(bl),Ct=n(bl,"DIV",{class:!0});var V6=s(Ct);T(n9.$$.fragment,V6),imr=i(V6),Ive=n(V6,"P",{});var R7t=s(Ive);dmr=r(R7t,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),R7t.forEach(t),cmr=i(V6),Bd=n(V6,"P",{});var Fte=s(Bd);fmr=r(Fte,`Note:
Loading a model from its configuration file does `),qve=n(Fte,"STRONG",{});var P7t=s(qve);mmr=r(P7t,"not"),P7t.forEach(t),gmr=r(Fte,` load the model weights. It only affects the
model\u2019s configuration. Use `),mH=n(Fte,"A",{href:!0});var B7t=s(mH);hmr=r(B7t,"from_pretrained()"),B7t.forEach(t),pmr=r(Fte," to load the model weights."),Fte.forEach(t),_mr=i(V6),T(n8.$$.fragment,V6),V6.forEach(t),umr=i(bl),go=n(bl,"DIV",{class:!0});var Ea=s(go);T(s9.$$.fragment,Ea),bmr=i(Ea),jve=n(Ea,"P",{});var N7t=s(jve);vmr=r(N7t,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),N7t.forEach(t),Fmr=i(Ea),Ya=n(Ea,"P",{});var X6=s(Ya);Tmr=r(X6,"The model class to instantiate is selected based on the "),Dve=n(X6,"CODE",{});var I7t=s(Dve);Mmr=r(I7t,"model_type"),I7t.forEach(t),Emr=r(X6,` property of the config object (either
passed as an argument or loaded from `),Gve=n(X6,"CODE",{});var q7t=s(Gve);Cmr=r(q7t,"pretrained_model_name_or_path"),q7t.forEach(t),wmr=r(X6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ove=n(X6,"CODE",{});var j7t=s(Ove);Amr=r(j7t,"pretrained_model_name_or_path"),j7t.forEach(t),Lmr=r(X6,":"),X6.forEach(t),ymr=i(Ea),rt=n(Ea,"UL",{});var vl=s(rt);s8=n(vl,"LI",{});var SIe=s(s8);Vve=n(SIe,"STRONG",{});var D7t=s(Vve);xmr=r(D7t,"data2vec-audio"),D7t.forEach(t),$mr=r(SIe," \u2014 "),gH=n(SIe,"A",{href:!0});var G7t=s(gH);kmr=r(G7t,"Data2VecAudioForAudioFrameClassification"),G7t.forEach(t),Smr=r(SIe," (Data2VecAudio model)"),SIe.forEach(t),Rmr=i(vl),l8=n(vl,"LI",{});var RIe=s(l8);Xve=n(RIe,"STRONG",{});var O7t=s(Xve);Pmr=r(O7t,"unispeech-sat"),O7t.forEach(t),Bmr=r(RIe," \u2014 "),hH=n(RIe,"A",{href:!0});var V7t=s(hH);Nmr=r(V7t,"UniSpeechSatForAudioFrameClassification"),V7t.forEach(t),Imr=r(RIe," (UniSpeechSat model)"),RIe.forEach(t),qmr=i(vl),i8=n(vl,"LI",{});var PIe=s(i8);zve=n(PIe,"STRONG",{});var X7t=s(zve);jmr=r(X7t,"wav2vec2"),X7t.forEach(t),Dmr=r(PIe," \u2014 "),pH=n(PIe,"A",{href:!0});var z7t=s(pH);Gmr=r(z7t,"Wav2Vec2ForAudioFrameClassification"),z7t.forEach(t),Omr=r(PIe," (Wav2Vec2 model)"),PIe.forEach(t),Vmr=i(vl),d8=n(vl,"LI",{});var BIe=s(d8);Qve=n(BIe,"STRONG",{});var Q7t=s(Qve);Xmr=r(Q7t,"wav2vec2-conformer"),Q7t.forEach(t),zmr=r(BIe," \u2014 "),_H=n(BIe,"A",{href:!0});var W7t=s(_H);Qmr=r(W7t,"Wav2Vec2ConformerForAudioFrameClassification"),W7t.forEach(t),Wmr=r(BIe," (Wav2Vec2-Conformer model)"),BIe.forEach(t),Hmr=i(vl),c8=n(vl,"LI",{});var NIe=s(c8);Wve=n(NIe,"STRONG",{});var H7t=s(Wve);Umr=r(H7t,"wavlm"),H7t.forEach(t),Jmr=r(NIe," \u2014 "),uH=n(NIe,"A",{href:!0});var U7t=s(uH);Ymr=r(U7t,"WavLMForAudioFrameClassification"),U7t.forEach(t),Kmr=r(NIe," (WavLM model)"),NIe.forEach(t),vl.forEach(t),Zmr=i(Ea),f8=n(Ea,"P",{});var IIe=s(f8);egr=r(IIe,"The model is set in evaluation mode by default using "),Hve=n(IIe,"CODE",{});var J7t=s(Hve);ogr=r(J7t,"model.eval()"),J7t.forEach(t),rgr=r(IIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uve=n(IIe,"CODE",{});var Y7t=s(Uve);tgr=r(Y7t,"model.train()"),Y7t.forEach(t),IIe.forEach(t),agr=i(Ea),T(m8.$$.fragment,Ea),Ea.forEach(t),bl.forEach(t),dze=i(f),Nd=n(f,"H2",{class:!0});var pWe=s(Nd);g8=n(pWe,"A",{id:!0,class:!0,href:!0});var K7t=s(g8);Jve=n(K7t,"SPAN",{});var Z7t=s(Jve);T(l9.$$.fragment,Z7t),Z7t.forEach(t),K7t.forEach(t),ngr=i(pWe),Yve=n(pWe,"SPAN",{});var eLt=s(Yve);sgr=r(eLt,"AutoModelForCTC"),eLt.forEach(t),pWe.forEach(t),cze=i(f),Wo=n(f,"DIV",{class:!0});var Fl=s(Wo);T(i9.$$.fragment,Fl),lgr=i(Fl),Id=n(Fl,"P",{});var Tte=s(Id);igr=r(Tte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),bH=n(Tte,"A",{href:!0});var oLt=s(bH);dgr=r(oLt,"from_pretrained()"),oLt.forEach(t),cgr=r(Tte," class method or the "),vH=n(Tte,"A",{href:!0});var rLt=s(vH);fgr=r(rLt,"from_config()"),rLt.forEach(t),mgr=r(Tte,` class
method.`),Tte.forEach(t),ggr=i(Fl),d9=n(Fl,"P",{});var _We=s(d9);hgr=r(_We,"This class cannot be instantiated directly using "),Kve=n(_We,"CODE",{});var tLt=s(Kve);pgr=r(tLt,"__init__()"),tLt.forEach(t),_gr=r(_We," (throws an error)."),_We.forEach(t),ugr=i(Fl),wt=n(Fl,"DIV",{class:!0});var z6=s(wt);T(c9.$$.fragment,z6),bgr=i(z6),Zve=n(z6,"P",{});var aLt=s(Zve);vgr=r(aLt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),aLt.forEach(t),Fgr=i(z6),qd=n(z6,"P",{});var Mte=s(qd);Tgr=r(Mte,`Note:
Loading a model from its configuration file does `),e0e=n(Mte,"STRONG",{});var nLt=s(e0e);Mgr=r(nLt,"not"),nLt.forEach(t),Egr=r(Mte,` load the model weights. It only affects the
model\u2019s configuration. Use `),FH=n(Mte,"A",{href:!0});var sLt=s(FH);Cgr=r(sLt,"from_pretrained()"),sLt.forEach(t),wgr=r(Mte," to load the model weights."),Mte.forEach(t),Agr=i(z6),T(h8.$$.fragment,z6),z6.forEach(t),Lgr=i(Fl),ho=n(Fl,"DIV",{class:!0});var Ca=s(ho);T(f9.$$.fragment,Ca),ygr=i(Ca),o0e=n(Ca,"P",{});var lLt=s(o0e);xgr=r(lLt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),lLt.forEach(t),$gr=i(Ca),Ka=n(Ca,"P",{});var Q6=s(Ka);kgr=r(Q6,"The model class to instantiate is selected based on the "),r0e=n(Q6,"CODE",{});var iLt=s(r0e);Sgr=r(iLt,"model_type"),iLt.forEach(t),Rgr=r(Q6,` property of the config object (either
passed as an argument or loaded from `),t0e=n(Q6,"CODE",{});var dLt=s(t0e);Pgr=r(dLt,"pretrained_model_name_or_path"),dLt.forEach(t),Bgr=r(Q6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a0e=n(Q6,"CODE",{});var cLt=s(a0e);Ngr=r(cLt,"pretrained_model_name_or_path"),cLt.forEach(t),Igr=r(Q6,":"),Q6.forEach(t),qgr=i(Ca),ye=n(Ca,"UL",{});var Ne=s(ye);p8=n(Ne,"LI",{});var qIe=s(p8);n0e=n(qIe,"STRONG",{});var fLt=s(n0e);jgr=r(fLt,"data2vec-audio"),fLt.forEach(t),Dgr=r(qIe," \u2014 "),TH=n(qIe,"A",{href:!0});var mLt=s(TH);Ggr=r(mLt,"Data2VecAudioForCTC"),mLt.forEach(t),Ogr=r(qIe," (Data2VecAudio model)"),qIe.forEach(t),Vgr=i(Ne),_8=n(Ne,"LI",{});var jIe=s(_8);s0e=n(jIe,"STRONG",{});var gLt=s(s0e);Xgr=r(gLt,"hubert"),gLt.forEach(t),zgr=r(jIe," \u2014 "),MH=n(jIe,"A",{href:!0});var hLt=s(MH);Qgr=r(hLt,"HubertForCTC"),hLt.forEach(t),Wgr=r(jIe," (Hubert model)"),jIe.forEach(t),Hgr=i(Ne),u8=n(Ne,"LI",{});var DIe=s(u8);l0e=n(DIe,"STRONG",{});var pLt=s(l0e);Ugr=r(pLt,"mctct"),pLt.forEach(t),Jgr=r(DIe," \u2014 "),EH=n(DIe,"A",{href:!0});var _Lt=s(EH);Ygr=r(_Lt,"MCTCTForCTC"),_Lt.forEach(t),Kgr=r(DIe," (M-CTC-T model)"),DIe.forEach(t),Zgr=i(Ne),b8=n(Ne,"LI",{});var GIe=s(b8);i0e=n(GIe,"STRONG",{});var uLt=s(i0e);ehr=r(uLt,"sew"),uLt.forEach(t),ohr=r(GIe," \u2014 "),CH=n(GIe,"A",{href:!0});var bLt=s(CH);rhr=r(bLt,"SEWForCTC"),bLt.forEach(t),thr=r(GIe," (SEW model)"),GIe.forEach(t),ahr=i(Ne),v8=n(Ne,"LI",{});var OIe=s(v8);d0e=n(OIe,"STRONG",{});var vLt=s(d0e);nhr=r(vLt,"sew-d"),vLt.forEach(t),shr=r(OIe," \u2014 "),wH=n(OIe,"A",{href:!0});var FLt=s(wH);lhr=r(FLt,"SEWDForCTC"),FLt.forEach(t),ihr=r(OIe," (SEW-D model)"),OIe.forEach(t),dhr=i(Ne),F8=n(Ne,"LI",{});var VIe=s(F8);c0e=n(VIe,"STRONG",{});var TLt=s(c0e);chr=r(TLt,"unispeech"),TLt.forEach(t),fhr=r(VIe," \u2014 "),AH=n(VIe,"A",{href:!0});var MLt=s(AH);mhr=r(MLt,"UniSpeechForCTC"),MLt.forEach(t),ghr=r(VIe," (UniSpeech model)"),VIe.forEach(t),hhr=i(Ne),T8=n(Ne,"LI",{});var XIe=s(T8);f0e=n(XIe,"STRONG",{});var ELt=s(f0e);phr=r(ELt,"unispeech-sat"),ELt.forEach(t),_hr=r(XIe," \u2014 "),LH=n(XIe,"A",{href:!0});var CLt=s(LH);uhr=r(CLt,"UniSpeechSatForCTC"),CLt.forEach(t),bhr=r(XIe," (UniSpeechSat model)"),XIe.forEach(t),vhr=i(Ne),M8=n(Ne,"LI",{});var zIe=s(M8);m0e=n(zIe,"STRONG",{});var wLt=s(m0e);Fhr=r(wLt,"wav2vec2"),wLt.forEach(t),Thr=r(zIe," \u2014 "),yH=n(zIe,"A",{href:!0});var ALt=s(yH);Mhr=r(ALt,"Wav2Vec2ForCTC"),ALt.forEach(t),Ehr=r(zIe," (Wav2Vec2 model)"),zIe.forEach(t),Chr=i(Ne),E8=n(Ne,"LI",{});var QIe=s(E8);g0e=n(QIe,"STRONG",{});var LLt=s(g0e);whr=r(LLt,"wav2vec2-conformer"),LLt.forEach(t),Ahr=r(QIe," \u2014 "),xH=n(QIe,"A",{href:!0});var yLt=s(xH);Lhr=r(yLt,"Wav2Vec2ConformerForCTC"),yLt.forEach(t),yhr=r(QIe," (Wav2Vec2-Conformer model)"),QIe.forEach(t),xhr=i(Ne),C8=n(Ne,"LI",{});var WIe=s(C8);h0e=n(WIe,"STRONG",{});var xLt=s(h0e);$hr=r(xLt,"wavlm"),xLt.forEach(t),khr=r(WIe," \u2014 "),$H=n(WIe,"A",{href:!0});var $Lt=s($H);Shr=r($Lt,"WavLMForCTC"),$Lt.forEach(t),Rhr=r(WIe," (WavLM model)"),WIe.forEach(t),Ne.forEach(t),Phr=i(Ca),w8=n(Ca,"P",{});var HIe=s(w8);Bhr=r(HIe,"The model is set in evaluation mode by default using "),p0e=n(HIe,"CODE",{});var kLt=s(p0e);Nhr=r(kLt,"model.eval()"),kLt.forEach(t),Ihr=r(HIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_0e=n(HIe,"CODE",{});var SLt=s(_0e);qhr=r(SLt,"model.train()"),SLt.forEach(t),HIe.forEach(t),jhr=i(Ca),T(A8.$$.fragment,Ca),Ca.forEach(t),Fl.forEach(t),fze=i(f),jd=n(f,"H2",{class:!0});var uWe=s(jd);L8=n(uWe,"A",{id:!0,class:!0,href:!0});var RLt=s(L8);u0e=n(RLt,"SPAN",{});var PLt=s(u0e);T(m9.$$.fragment,PLt),PLt.forEach(t),RLt.forEach(t),Dhr=i(uWe),b0e=n(uWe,"SPAN",{});var BLt=s(b0e);Ghr=r(BLt,"AutoModelForSpeechSeq2Seq"),BLt.forEach(t),uWe.forEach(t),mze=i(f),Ho=n(f,"DIV",{class:!0});var Tl=s(Ho);T(g9.$$.fragment,Tl),Ohr=i(Tl),Dd=n(Tl,"P",{});var Ete=s(Dd);Vhr=r(Ete,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),kH=n(Ete,"A",{href:!0});var NLt=s(kH);Xhr=r(NLt,"from_pretrained()"),NLt.forEach(t),zhr=r(Ete," class method or the "),SH=n(Ete,"A",{href:!0});var ILt=s(SH);Qhr=r(ILt,"from_config()"),ILt.forEach(t),Whr=r(Ete,` class
method.`),Ete.forEach(t),Hhr=i(Tl),h9=n(Tl,"P",{});var bWe=s(h9);Uhr=r(bWe,"This class cannot be instantiated directly using "),v0e=n(bWe,"CODE",{});var qLt=s(v0e);Jhr=r(qLt,"__init__()"),qLt.forEach(t),Yhr=r(bWe," (throws an error)."),bWe.forEach(t),Khr=i(Tl),At=n(Tl,"DIV",{class:!0});var W6=s(At);T(p9.$$.fragment,W6),Zhr=i(W6),F0e=n(W6,"P",{});var jLt=s(F0e);epr=r(jLt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),jLt.forEach(t),opr=i(W6),Gd=n(W6,"P",{});var Cte=s(Gd);rpr=r(Cte,`Note:
Loading a model from its configuration file does `),T0e=n(Cte,"STRONG",{});var DLt=s(T0e);tpr=r(DLt,"not"),DLt.forEach(t),apr=r(Cte,` load the model weights. It only affects the
model\u2019s configuration. Use `),RH=n(Cte,"A",{href:!0});var GLt=s(RH);npr=r(GLt,"from_pretrained()"),GLt.forEach(t),spr=r(Cte," to load the model weights."),Cte.forEach(t),lpr=i(W6),T(y8.$$.fragment,W6),W6.forEach(t),ipr=i(Tl),po=n(Tl,"DIV",{class:!0});var wa=s(po);T(_9.$$.fragment,wa),dpr=i(wa),M0e=n(wa,"P",{});var OLt=s(M0e);cpr=r(OLt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),OLt.forEach(t),fpr=i(wa),Za=n(wa,"P",{});var H6=s(Za);mpr=r(H6,"The model class to instantiate is selected based on the "),E0e=n(H6,"CODE",{});var VLt=s(E0e);gpr=r(VLt,"model_type"),VLt.forEach(t),hpr=r(H6,` property of the config object (either
passed as an argument or loaded from `),C0e=n(H6,"CODE",{});var XLt=s(C0e);ppr=r(XLt,"pretrained_model_name_or_path"),XLt.forEach(t),_pr=r(H6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w0e=n(H6,"CODE",{});var zLt=s(w0e);upr=r(zLt,"pretrained_model_name_or_path"),zLt.forEach(t),bpr=r(H6,":"),H6.forEach(t),vpr=i(wa),u9=n(wa,"UL",{});var vWe=s(u9);x8=n(vWe,"LI",{});var UIe=s(x8);A0e=n(UIe,"STRONG",{});var QLt=s(A0e);Fpr=r(QLt,"speech-encoder-decoder"),QLt.forEach(t),Tpr=r(UIe," \u2014 "),PH=n(UIe,"A",{href:!0});var WLt=s(PH);Mpr=r(WLt,"SpeechEncoderDecoderModel"),WLt.forEach(t),Epr=r(UIe," (Speech Encoder decoder model)"),UIe.forEach(t),Cpr=i(vWe),$8=n(vWe,"LI",{});var JIe=s($8);L0e=n(JIe,"STRONG",{});var HLt=s(L0e);wpr=r(HLt,"speech_to_text"),HLt.forEach(t),Apr=r(JIe," \u2014 "),BH=n(JIe,"A",{href:!0});var ULt=s(BH);Lpr=r(ULt,"Speech2TextForConditionalGeneration"),ULt.forEach(t),ypr=r(JIe," (Speech2Text model)"),JIe.forEach(t),vWe.forEach(t),xpr=i(wa),k8=n(wa,"P",{});var YIe=s(k8);$pr=r(YIe,"The model is set in evaluation mode by default using "),y0e=n(YIe,"CODE",{});var JLt=s(y0e);kpr=r(JLt,"model.eval()"),JLt.forEach(t),Spr=r(YIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),x0e=n(YIe,"CODE",{});var YLt=s(x0e);Rpr=r(YLt,"model.train()"),YLt.forEach(t),YIe.forEach(t),Ppr=i(wa),T(S8.$$.fragment,wa),wa.forEach(t),Tl.forEach(t),gze=i(f),Od=n(f,"H2",{class:!0});var FWe=s(Od);R8=n(FWe,"A",{id:!0,class:!0,href:!0});var KLt=s(R8);$0e=n(KLt,"SPAN",{});var ZLt=s($0e);T(b9.$$.fragment,ZLt),ZLt.forEach(t),KLt.forEach(t),Bpr=i(FWe),k0e=n(FWe,"SPAN",{});var eyt=s(k0e);Npr=r(eyt,"AutoModelForAudioXVector"),eyt.forEach(t),FWe.forEach(t),hze=i(f),Uo=n(f,"DIV",{class:!0});var Ml=s(Uo);T(v9.$$.fragment,Ml),Ipr=i(Ml),Vd=n(Ml,"P",{});var wte=s(Vd);qpr=r(wte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),NH=n(wte,"A",{href:!0});var oyt=s(NH);jpr=r(oyt,"from_pretrained()"),oyt.forEach(t),Dpr=r(wte," class method or the "),IH=n(wte,"A",{href:!0});var ryt=s(IH);Gpr=r(ryt,"from_config()"),ryt.forEach(t),Opr=r(wte,` class
method.`),wte.forEach(t),Vpr=i(Ml),F9=n(Ml,"P",{});var TWe=s(F9);Xpr=r(TWe,"This class cannot be instantiated directly using "),S0e=n(TWe,"CODE",{});var tyt=s(S0e);zpr=r(tyt,"__init__()"),tyt.forEach(t),Qpr=r(TWe," (throws an error)."),TWe.forEach(t),Wpr=i(Ml),Lt=n(Ml,"DIV",{class:!0});var U6=s(Lt);T(T9.$$.fragment,U6),Hpr=i(U6),R0e=n(U6,"P",{});var ayt=s(R0e);Upr=r(ayt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),ayt.forEach(t),Jpr=i(U6),Xd=n(U6,"P",{});var Ate=s(Xd);Ypr=r(Ate,`Note:
Loading a model from its configuration file does `),P0e=n(Ate,"STRONG",{});var nyt=s(P0e);Kpr=r(nyt,"not"),nyt.forEach(t),Zpr=r(Ate,` load the model weights. It only affects the
model\u2019s configuration. Use `),qH=n(Ate,"A",{href:!0});var syt=s(qH);e_r=r(syt,"from_pretrained()"),syt.forEach(t),o_r=r(Ate," to load the model weights."),Ate.forEach(t),r_r=i(U6),T(P8.$$.fragment,U6),U6.forEach(t),t_r=i(Ml),_o=n(Ml,"DIV",{class:!0});var Aa=s(_o);T(M9.$$.fragment,Aa),a_r=i(Aa),B0e=n(Aa,"P",{});var lyt=s(B0e);n_r=r(lyt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),lyt.forEach(t),s_r=i(Aa),en=n(Aa,"P",{});var J6=s(en);l_r=r(J6,"The model class to instantiate is selected based on the "),N0e=n(J6,"CODE",{});var iyt=s(N0e);i_r=r(iyt,"model_type"),iyt.forEach(t),d_r=r(J6,` property of the config object (either
passed as an argument or loaded from `),I0e=n(J6,"CODE",{});var dyt=s(I0e);c_r=r(dyt,"pretrained_model_name_or_path"),dyt.forEach(t),f_r=r(J6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q0e=n(J6,"CODE",{});var cyt=s(q0e);m_r=r(cyt,"pretrained_model_name_or_path"),cyt.forEach(t),g_r=r(J6,":"),J6.forEach(t),h_r=i(Aa),tt=n(Aa,"UL",{});var El=s(tt);B8=n(El,"LI",{});var KIe=s(B8);j0e=n(KIe,"STRONG",{});var fyt=s(j0e);p_r=r(fyt,"data2vec-audio"),fyt.forEach(t),__r=r(KIe," \u2014 "),jH=n(KIe,"A",{href:!0});var myt=s(jH);u_r=r(myt,"Data2VecAudioForXVector"),myt.forEach(t),b_r=r(KIe," (Data2VecAudio model)"),KIe.forEach(t),v_r=i(El),N8=n(El,"LI",{});var ZIe=s(N8);D0e=n(ZIe,"STRONG",{});var gyt=s(D0e);F_r=r(gyt,"unispeech-sat"),gyt.forEach(t),T_r=r(ZIe," \u2014 "),DH=n(ZIe,"A",{href:!0});var hyt=s(DH);M_r=r(hyt,"UniSpeechSatForXVector"),hyt.forEach(t),E_r=r(ZIe," (UniSpeechSat model)"),ZIe.forEach(t),C_r=i(El),I8=n(El,"LI",{});var eqe=s(I8);G0e=n(eqe,"STRONG",{});var pyt=s(G0e);w_r=r(pyt,"wav2vec2"),pyt.forEach(t),A_r=r(eqe," \u2014 "),GH=n(eqe,"A",{href:!0});var _yt=s(GH);L_r=r(_yt,"Wav2Vec2ForXVector"),_yt.forEach(t),y_r=r(eqe," (Wav2Vec2 model)"),eqe.forEach(t),x_r=i(El),q8=n(El,"LI",{});var oqe=s(q8);O0e=n(oqe,"STRONG",{});var uyt=s(O0e);$_r=r(uyt,"wav2vec2-conformer"),uyt.forEach(t),k_r=r(oqe," \u2014 "),OH=n(oqe,"A",{href:!0});var byt=s(OH);S_r=r(byt,"Wav2Vec2ConformerForXVector"),byt.forEach(t),R_r=r(oqe," (Wav2Vec2-Conformer model)"),oqe.forEach(t),P_r=i(El),j8=n(El,"LI",{});var rqe=s(j8);V0e=n(rqe,"STRONG",{});var vyt=s(V0e);B_r=r(vyt,"wavlm"),vyt.forEach(t),N_r=r(rqe," \u2014 "),VH=n(rqe,"A",{href:!0});var Fyt=s(VH);I_r=r(Fyt,"WavLMForXVector"),Fyt.forEach(t),q_r=r(rqe," (WavLM model)"),rqe.forEach(t),El.forEach(t),j_r=i(Aa),D8=n(Aa,"P",{});var tqe=s(D8);D_r=r(tqe,"The model is set in evaluation mode by default using "),X0e=n(tqe,"CODE",{});var Tyt=s(X0e);G_r=r(Tyt,"model.eval()"),Tyt.forEach(t),O_r=r(tqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),z0e=n(tqe,"CODE",{});var Myt=s(z0e);V_r=r(Myt,"model.train()"),Myt.forEach(t),tqe.forEach(t),X_r=i(Aa),T(G8.$$.fragment,Aa),Aa.forEach(t),Ml.forEach(t),pze=i(f),zd=n(f,"H2",{class:!0});var MWe=s(zd);O8=n(MWe,"A",{id:!0,class:!0,href:!0});var Eyt=s(O8);Q0e=n(Eyt,"SPAN",{});var Cyt=s(Q0e);T(E9.$$.fragment,Cyt),Cyt.forEach(t),Eyt.forEach(t),z_r=i(MWe),W0e=n(MWe,"SPAN",{});var wyt=s(W0e);Q_r=r(wyt,"AutoModelForMaskedImageModeling"),wyt.forEach(t),MWe.forEach(t),_ze=i(f),Jo=n(f,"DIV",{class:!0});var Cl=s(Jo);T(C9.$$.fragment,Cl),W_r=i(Cl),Qd=n(Cl,"P",{});var Lte=s(Qd);H_r=r(Lte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),XH=n(Lte,"A",{href:!0});var Ayt=s(XH);U_r=r(Ayt,"from_pretrained()"),Ayt.forEach(t),J_r=r(Lte," class method or the "),zH=n(Lte,"A",{href:!0});var Lyt=s(zH);Y_r=r(Lyt,"from_config()"),Lyt.forEach(t),K_r=r(Lte,` class
method.`),Lte.forEach(t),Z_r=i(Cl),w9=n(Cl,"P",{});var EWe=s(w9);eur=r(EWe,"This class cannot be instantiated directly using "),H0e=n(EWe,"CODE",{});var yyt=s(H0e);our=r(yyt,"__init__()"),yyt.forEach(t),rur=r(EWe," (throws an error)."),EWe.forEach(t),tur=i(Cl),yt=n(Cl,"DIV",{class:!0});var Y6=s(yt);T(A9.$$.fragment,Y6),aur=i(Y6),U0e=n(Y6,"P",{});var xyt=s(U0e);nur=r(xyt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),xyt.forEach(t),sur=i(Y6),Wd=n(Y6,"P",{});var yte=s(Wd);lur=r(yte,`Note:
Loading a model from its configuration file does `),J0e=n(yte,"STRONG",{});var $yt=s(J0e);iur=r($yt,"not"),$yt.forEach(t),dur=r(yte,` load the model weights. It only affects the
model\u2019s configuration. Use `),QH=n(yte,"A",{href:!0});var kyt=s(QH);cur=r(kyt,"from_pretrained()"),kyt.forEach(t),fur=r(yte," to load the model weights."),yte.forEach(t),mur=i(Y6),T(V8.$$.fragment,Y6),Y6.forEach(t),gur=i(Cl),uo=n(Cl,"DIV",{class:!0});var La=s(uo);T(L9.$$.fragment,La),hur=i(La),Y0e=n(La,"P",{});var Syt=s(Y0e);pur=r(Syt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Syt.forEach(t),_ur=i(La),on=n(La,"P",{});var K6=s(on);uur=r(K6,"The model class to instantiate is selected based on the "),K0e=n(K6,"CODE",{});var Ryt=s(K0e);bur=r(Ryt,"model_type"),Ryt.forEach(t),vur=r(K6,` property of the config object (either
passed as an argument or loaded from `),Z0e=n(K6,"CODE",{});var Pyt=s(Z0e);Fur=r(Pyt,"pretrained_model_name_or_path"),Pyt.forEach(t),Tur=r(K6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eFe=n(K6,"CODE",{});var Byt=s(eFe);Mur=r(Byt,"pretrained_model_name_or_path"),Byt.forEach(t),Eur=r(K6,":"),K6.forEach(t),Cur=i(La),Hd=n(La,"UL",{});var xte=s(Hd);X8=n(xte,"LI",{});var aqe=s(X8);oFe=n(aqe,"STRONG",{});var Nyt=s(oFe);wur=r(Nyt,"deit"),Nyt.forEach(t),Aur=r(aqe," \u2014 "),WH=n(aqe,"A",{href:!0});var Iyt=s(WH);Lur=r(Iyt,"DeiTForMaskedImageModeling"),Iyt.forEach(t),yur=r(aqe," (DeiT model)"),aqe.forEach(t),xur=i(xte),z8=n(xte,"LI",{});var nqe=s(z8);rFe=n(nqe,"STRONG",{});var qyt=s(rFe);$ur=r(qyt,"swin"),qyt.forEach(t),kur=r(nqe," \u2014 "),HH=n(nqe,"A",{href:!0});var jyt=s(HH);Sur=r(jyt,"SwinForMaskedImageModeling"),jyt.forEach(t),Rur=r(nqe," (Swin Transformer model)"),nqe.forEach(t),Pur=i(xte),Q8=n(xte,"LI",{});var sqe=s(Q8);tFe=n(sqe,"STRONG",{});var Dyt=s(tFe);Bur=r(Dyt,"vit"),Dyt.forEach(t),Nur=r(sqe," \u2014 "),UH=n(sqe,"A",{href:!0});var Gyt=s(UH);Iur=r(Gyt,"ViTForMaskedImageModeling"),Gyt.forEach(t),qur=r(sqe," (ViT model)"),sqe.forEach(t),xte.forEach(t),jur=i(La),W8=n(La,"P",{});var lqe=s(W8);Dur=r(lqe,"The model is set in evaluation mode by default using "),aFe=n(lqe,"CODE",{});var Oyt=s(aFe);Gur=r(Oyt,"model.eval()"),Oyt.forEach(t),Our=r(lqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nFe=n(lqe,"CODE",{});var Vyt=s(nFe);Vur=r(Vyt,"model.train()"),Vyt.forEach(t),lqe.forEach(t),Xur=i(La),T(H8.$$.fragment,La),La.forEach(t),Cl.forEach(t),uze=i(f),Ud=n(f,"H2",{class:!0});var CWe=s(Ud);U8=n(CWe,"A",{id:!0,class:!0,href:!0});var Xyt=s(U8);sFe=n(Xyt,"SPAN",{});var zyt=s(sFe);T(y9.$$.fragment,zyt),zyt.forEach(t),Xyt.forEach(t),zur=i(CWe),lFe=n(CWe,"SPAN",{});var Qyt=s(lFe);Qur=r(Qyt,"AutoModelForObjectDetection"),Qyt.forEach(t),CWe.forEach(t),bze=i(f),Yo=n(f,"DIV",{class:!0});var wl=s(Yo);T(x9.$$.fragment,wl),Wur=i(wl),Jd=n(wl,"P",{});var $te=s(Jd);Hur=r($te,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),JH=n($te,"A",{href:!0});var Wyt=s(JH);Uur=r(Wyt,"from_pretrained()"),Wyt.forEach(t),Jur=r($te," class method or the "),YH=n($te,"A",{href:!0});var Hyt=s(YH);Yur=r(Hyt,"from_config()"),Hyt.forEach(t),Kur=r($te,` class
method.`),$te.forEach(t),Zur=i(wl),$9=n(wl,"P",{});var wWe=s($9);e2r=r(wWe,"This class cannot be instantiated directly using "),iFe=n(wWe,"CODE",{});var Uyt=s(iFe);o2r=r(Uyt,"__init__()"),Uyt.forEach(t),r2r=r(wWe," (throws an error)."),wWe.forEach(t),t2r=i(wl),xt=n(wl,"DIV",{class:!0});var Z6=s(xt);T(k9.$$.fragment,Z6),a2r=i(Z6),dFe=n(Z6,"P",{});var Jyt=s(dFe);n2r=r(Jyt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Jyt.forEach(t),s2r=i(Z6),Yd=n(Z6,"P",{});var kte=s(Yd);l2r=r(kte,`Note:
Loading a model from its configuration file does `),cFe=n(kte,"STRONG",{});var Yyt=s(cFe);i2r=r(Yyt,"not"),Yyt.forEach(t),d2r=r(kte,` load the model weights. It only affects the
model\u2019s configuration. Use `),KH=n(kte,"A",{href:!0});var Kyt=s(KH);c2r=r(Kyt,"from_pretrained()"),Kyt.forEach(t),f2r=r(kte," to load the model weights."),kte.forEach(t),m2r=i(Z6),T(J8.$$.fragment,Z6),Z6.forEach(t),g2r=i(wl),bo=n(wl,"DIV",{class:!0});var ya=s(bo);T(S9.$$.fragment,ya),h2r=i(ya),fFe=n(ya,"P",{});var Zyt=s(fFe);p2r=r(Zyt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Zyt.forEach(t),_2r=i(ya),rn=n(ya,"P",{});var e7=s(rn);u2r=r(e7,"The model class to instantiate is selected based on the "),mFe=n(e7,"CODE",{});var e9t=s(mFe);b2r=r(e9t,"model_type"),e9t.forEach(t),v2r=r(e7,` property of the config object (either
passed as an argument or loaded from `),gFe=n(e7,"CODE",{});var o9t=s(gFe);F2r=r(o9t,"pretrained_model_name_or_path"),o9t.forEach(t),T2r=r(e7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hFe=n(e7,"CODE",{});var r9t=s(hFe);M2r=r(r9t,"pretrained_model_name_or_path"),r9t.forEach(t),E2r=r(e7,":"),e7.forEach(t),C2r=i(ya),R9=n(ya,"UL",{});var AWe=s(R9);Y8=n(AWe,"LI",{});var iqe=s(Y8);pFe=n(iqe,"STRONG",{});var t9t=s(pFe);w2r=r(t9t,"detr"),t9t.forEach(t),A2r=r(iqe," \u2014 "),ZH=n(iqe,"A",{href:!0});var a9t=s(ZH);L2r=r(a9t,"DetrForObjectDetection"),a9t.forEach(t),y2r=r(iqe," (DETR model)"),iqe.forEach(t),x2r=i(AWe),K8=n(AWe,"LI",{});var dqe=s(K8);_Fe=n(dqe,"STRONG",{});var n9t=s(_Fe);$2r=r(n9t,"yolos"),n9t.forEach(t),k2r=r(dqe," \u2014 "),eU=n(dqe,"A",{href:!0});var s9t=s(eU);S2r=r(s9t,"YolosForObjectDetection"),s9t.forEach(t),R2r=r(dqe," (YOLOS model)"),dqe.forEach(t),AWe.forEach(t),P2r=i(ya),Z8=n(ya,"P",{});var cqe=s(Z8);B2r=r(cqe,"The model is set in evaluation mode by default using "),uFe=n(cqe,"CODE",{});var l9t=s(uFe);N2r=r(l9t,"model.eval()"),l9t.forEach(t),I2r=r(cqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bFe=n(cqe,"CODE",{});var i9t=s(bFe);q2r=r(i9t,"model.train()"),i9t.forEach(t),cqe.forEach(t),j2r=i(ya),T(eM.$$.fragment,ya),ya.forEach(t),wl.forEach(t),vze=i(f),Kd=n(f,"H2",{class:!0});var LWe=s(Kd);oM=n(LWe,"A",{id:!0,class:!0,href:!0});var d9t=s(oM);vFe=n(d9t,"SPAN",{});var c9t=s(vFe);T(P9.$$.fragment,c9t),c9t.forEach(t),d9t.forEach(t),D2r=i(LWe),FFe=n(LWe,"SPAN",{});var f9t=s(FFe);G2r=r(f9t,"AutoModelForImageSegmentation"),f9t.forEach(t),LWe.forEach(t),Fze=i(f),Ko=n(f,"DIV",{class:!0});var Al=s(Ko);T(B9.$$.fragment,Al),O2r=i(Al),Zd=n(Al,"P",{});var Ste=s(Zd);V2r=r(Ste,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),oU=n(Ste,"A",{href:!0});var m9t=s(oU);X2r=r(m9t,"from_pretrained()"),m9t.forEach(t),z2r=r(Ste," class method or the "),rU=n(Ste,"A",{href:!0});var g9t=s(rU);Q2r=r(g9t,"from_config()"),g9t.forEach(t),W2r=r(Ste,` class
method.`),Ste.forEach(t),H2r=i(Al),N9=n(Al,"P",{});var yWe=s(N9);U2r=r(yWe,"This class cannot be instantiated directly using "),TFe=n(yWe,"CODE",{});var h9t=s(TFe);J2r=r(h9t,"__init__()"),h9t.forEach(t),Y2r=r(yWe," (throws an error)."),yWe.forEach(t),K2r=i(Al),$t=n(Al,"DIV",{class:!0});var o7=s($t);T(I9.$$.fragment,o7),Z2r=i(o7),MFe=n(o7,"P",{});var p9t=s(MFe);e1r=r(p9t,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),p9t.forEach(t),o1r=i(o7),ec=n(o7,"P",{});var Rte=s(ec);r1r=r(Rte,`Note:
Loading a model from its configuration file does `),EFe=n(Rte,"STRONG",{});var _9t=s(EFe);t1r=r(_9t,"not"),_9t.forEach(t),a1r=r(Rte,` load the model weights. It only affects the
model\u2019s configuration. Use `),tU=n(Rte,"A",{href:!0});var u9t=s(tU);n1r=r(u9t,"from_pretrained()"),u9t.forEach(t),s1r=r(Rte," to load the model weights."),Rte.forEach(t),l1r=i(o7),T(rM.$$.fragment,o7),o7.forEach(t),i1r=i(Al),vo=n(Al,"DIV",{class:!0});var xa=s(vo);T(q9.$$.fragment,xa),d1r=i(xa),CFe=n(xa,"P",{});var b9t=s(CFe);c1r=r(b9t,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),b9t.forEach(t),f1r=i(xa),tn=n(xa,"P",{});var r7=s(tn);m1r=r(r7,"The model class to instantiate is selected based on the "),wFe=n(r7,"CODE",{});var v9t=s(wFe);g1r=r(v9t,"model_type"),v9t.forEach(t),h1r=r(r7,` property of the config object (either
passed as an argument or loaded from `),AFe=n(r7,"CODE",{});var F9t=s(AFe);p1r=r(F9t,"pretrained_model_name_or_path"),F9t.forEach(t),_1r=r(r7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LFe=n(r7,"CODE",{});var T9t=s(LFe);u1r=r(T9t,"pretrained_model_name_or_path"),T9t.forEach(t),b1r=r(r7,":"),r7.forEach(t),v1r=i(xa),yFe=n(xa,"UL",{});var M9t=s(yFe);tM=n(M9t,"LI",{});var fqe=s(tM);xFe=n(fqe,"STRONG",{});var E9t=s(xFe);F1r=r(E9t,"detr"),E9t.forEach(t),T1r=r(fqe," \u2014 "),aU=n(fqe,"A",{href:!0});var C9t=s(aU);M1r=r(C9t,"DetrForSegmentation"),C9t.forEach(t),E1r=r(fqe," (DETR model)"),fqe.forEach(t),M9t.forEach(t),C1r=i(xa),aM=n(xa,"P",{});var mqe=s(aM);w1r=r(mqe,"The model is set in evaluation mode by default using "),$Fe=n(mqe,"CODE",{});var w9t=s($Fe);A1r=r(w9t,"model.eval()"),w9t.forEach(t),L1r=r(mqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kFe=n(mqe,"CODE",{});var A9t=s(kFe);y1r=r(A9t,"model.train()"),A9t.forEach(t),mqe.forEach(t),x1r=i(xa),T(nM.$$.fragment,xa),xa.forEach(t),Al.forEach(t),Tze=i(f),oc=n(f,"H2",{class:!0});var xWe=s(oc);sM=n(xWe,"A",{id:!0,class:!0,href:!0});var L9t=s(sM);SFe=n(L9t,"SPAN",{});var y9t=s(SFe);T(j9.$$.fragment,y9t),y9t.forEach(t),L9t.forEach(t),$1r=i(xWe),RFe=n(xWe,"SPAN",{});var x9t=s(RFe);k1r=r(x9t,"AutoModelForSemanticSegmentation"),x9t.forEach(t),xWe.forEach(t),Mze=i(f),Zo=n(f,"DIV",{class:!0});var Ll=s(Zo);T(D9.$$.fragment,Ll),S1r=i(Ll),rc=n(Ll,"P",{});var Pte=s(rc);R1r=r(Pte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),nU=n(Pte,"A",{href:!0});var $9t=s(nU);P1r=r($9t,"from_pretrained()"),$9t.forEach(t),B1r=r(Pte," class method or the "),sU=n(Pte,"A",{href:!0});var k9t=s(sU);N1r=r(k9t,"from_config()"),k9t.forEach(t),I1r=r(Pte,` class
method.`),Pte.forEach(t),q1r=i(Ll),G9=n(Ll,"P",{});var $We=s(G9);j1r=r($We,"This class cannot be instantiated directly using "),PFe=n($We,"CODE",{});var S9t=s(PFe);D1r=r(S9t,"__init__()"),S9t.forEach(t),G1r=r($We," (throws an error)."),$We.forEach(t),O1r=i(Ll),kt=n(Ll,"DIV",{class:!0});var t7=s(kt);T(O9.$$.fragment,t7),V1r=i(t7),BFe=n(t7,"P",{});var R9t=s(BFe);X1r=r(R9t,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),R9t.forEach(t),z1r=i(t7),tc=n(t7,"P",{});var Bte=s(tc);Q1r=r(Bte,`Note:
Loading a model from its configuration file does `),NFe=n(Bte,"STRONG",{});var P9t=s(NFe);W1r=r(P9t,"not"),P9t.forEach(t),H1r=r(Bte,` load the model weights. It only affects the
model\u2019s configuration. Use `),lU=n(Bte,"A",{href:!0});var B9t=s(lU);U1r=r(B9t,"from_pretrained()"),B9t.forEach(t),J1r=r(Bte," to load the model weights."),Bte.forEach(t),Y1r=i(t7),T(lM.$$.fragment,t7),t7.forEach(t),K1r=i(Ll),Fo=n(Ll,"DIV",{class:!0});var $a=s(Fo);T(V9.$$.fragment,$a),Z1r=i($a),IFe=n($a,"P",{});var N9t=s(IFe);ebr=r(N9t,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),N9t.forEach(t),obr=i($a),an=n($a,"P",{});var a7=s(an);rbr=r(a7,"The model class to instantiate is selected based on the "),qFe=n(a7,"CODE",{});var I9t=s(qFe);tbr=r(I9t,"model_type"),I9t.forEach(t),abr=r(a7,` property of the config object (either
passed as an argument or loaded from `),jFe=n(a7,"CODE",{});var q9t=s(jFe);nbr=r(q9t,"pretrained_model_name_or_path"),q9t.forEach(t),sbr=r(a7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DFe=n(a7,"CODE",{});var j9t=s(DFe);lbr=r(j9t,"pretrained_model_name_or_path"),j9t.forEach(t),ibr=r(a7,":"),a7.forEach(t),dbr=i($a),at=n($a,"UL",{});var yl=s(at);iM=n(yl,"LI",{});var gqe=s(iM);GFe=n(gqe,"STRONG",{});var D9t=s(GFe);cbr=r(D9t,"beit"),D9t.forEach(t),fbr=r(gqe," \u2014 "),iU=n(gqe,"A",{href:!0});var G9t=s(iU);mbr=r(G9t,"BeitForSemanticSegmentation"),G9t.forEach(t),gbr=r(gqe," (BEiT model)"),gqe.forEach(t),hbr=i(yl),dM=n(yl,"LI",{});var hqe=s(dM);OFe=n(hqe,"STRONG",{});var O9t=s(OFe);pbr=r(O9t,"data2vec-vision"),O9t.forEach(t),_br=r(hqe," \u2014 "),dU=n(hqe,"A",{href:!0});var V9t=s(dU);ubr=r(V9t,"Data2VecVisionForSemanticSegmentation"),V9t.forEach(t),bbr=r(hqe," (Data2VecVision model)"),hqe.forEach(t),vbr=i(yl),cM=n(yl,"LI",{});var pqe=s(cM);VFe=n(pqe,"STRONG",{});var X9t=s(VFe);Fbr=r(X9t,"dpt"),X9t.forEach(t),Tbr=r(pqe," \u2014 "),cU=n(pqe,"A",{href:!0});var z9t=s(cU);Mbr=r(z9t,"DPTForSemanticSegmentation"),z9t.forEach(t),Ebr=r(pqe," (DPT model)"),pqe.forEach(t),Cbr=i(yl),fM=n(yl,"LI",{});var _qe=s(fM);XFe=n(_qe,"STRONG",{});var Q9t=s(XFe);wbr=r(Q9t,"mobilevit"),Q9t.forEach(t),Abr=r(_qe," \u2014 "),fU=n(_qe,"A",{href:!0});var W9t=s(fU);Lbr=r(W9t,"MobileViTForSemanticSegmentation"),W9t.forEach(t),ybr=r(_qe," (MobileViT model)"),_qe.forEach(t),xbr=i(yl),mM=n(yl,"LI",{});var uqe=s(mM);zFe=n(uqe,"STRONG",{});var H9t=s(zFe);$br=r(H9t,"segformer"),H9t.forEach(t),kbr=r(uqe," \u2014 "),mU=n(uqe,"A",{href:!0});var U9t=s(mU);Sbr=r(U9t,"SegformerForSemanticSegmentation"),U9t.forEach(t),Rbr=r(uqe," (SegFormer model)"),uqe.forEach(t),yl.forEach(t),Pbr=i($a),gM=n($a,"P",{});var bqe=s(gM);Bbr=r(bqe,"The model is set in evaluation mode by default using "),QFe=n(bqe,"CODE",{});var J9t=s(QFe);Nbr=r(J9t,"model.eval()"),J9t.forEach(t),Ibr=r(bqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),WFe=n(bqe,"CODE",{});var Y9t=s(WFe);qbr=r(Y9t,"model.train()"),Y9t.forEach(t),bqe.forEach(t),jbr=i($a),T(hM.$$.fragment,$a),$a.forEach(t),Ll.forEach(t),Eze=i(f),ac=n(f,"H2",{class:!0});var kWe=s(ac);pM=n(kWe,"A",{id:!0,class:!0,href:!0});var K9t=s(pM);HFe=n(K9t,"SPAN",{});var Z9t=s(HFe);T(X9.$$.fragment,Z9t),Z9t.forEach(t),K9t.forEach(t),Dbr=i(kWe),UFe=n(kWe,"SPAN",{});var ext=s(UFe);Gbr=r(ext,"AutoModelForInstanceSegmentation"),ext.forEach(t),kWe.forEach(t),Cze=i(f),er=n(f,"DIV",{class:!0});var xl=s(er);T(z9.$$.fragment,xl),Obr=i(xl),nc=n(xl,"P",{});var Nte=s(nc);Vbr=r(Nte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),gU=n(Nte,"A",{href:!0});var oxt=s(gU);Xbr=r(oxt,"from_pretrained()"),oxt.forEach(t),zbr=r(Nte," class method or the "),hU=n(Nte,"A",{href:!0});var rxt=s(hU);Qbr=r(rxt,"from_config()"),rxt.forEach(t),Wbr=r(Nte,` class
method.`),Nte.forEach(t),Hbr=i(xl),Q9=n(xl,"P",{});var SWe=s(Q9);Ubr=r(SWe,"This class cannot be instantiated directly using "),JFe=n(SWe,"CODE",{});var txt=s(JFe);Jbr=r(txt,"__init__()"),txt.forEach(t),Ybr=r(SWe," (throws an error)."),SWe.forEach(t),Kbr=i(xl),St=n(xl,"DIV",{class:!0});var n7=s(St);T(W9.$$.fragment,n7),Zbr=i(n7),YFe=n(n7,"P",{});var axt=s(YFe);evr=r(axt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),axt.forEach(t),ovr=i(n7),sc=n(n7,"P",{});var Ite=s(sc);rvr=r(Ite,`Note:
Loading a model from its configuration file does `),KFe=n(Ite,"STRONG",{});var nxt=s(KFe);tvr=r(nxt,"not"),nxt.forEach(t),avr=r(Ite,` load the model weights. It only affects the
model\u2019s configuration. Use `),pU=n(Ite,"A",{href:!0});var sxt=s(pU);nvr=r(sxt,"from_pretrained()"),sxt.forEach(t),svr=r(Ite," to load the model weights."),Ite.forEach(t),lvr=i(n7),T(_M.$$.fragment,n7),n7.forEach(t),ivr=i(xl),To=n(xl,"DIV",{class:!0});var ka=s(To);T(H9.$$.fragment,ka),dvr=i(ka),ZFe=n(ka,"P",{});var lxt=s(ZFe);cvr=r(lxt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),lxt.forEach(t),fvr=i(ka),nn=n(ka,"P",{});var s7=s(nn);mvr=r(s7,"The model class to instantiate is selected based on the "),eTe=n(s7,"CODE",{});var ixt=s(eTe);gvr=r(ixt,"model_type"),ixt.forEach(t),hvr=r(s7,` property of the config object (either
passed as an argument or loaded from `),oTe=n(s7,"CODE",{});var dxt=s(oTe);pvr=r(dxt,"pretrained_model_name_or_path"),dxt.forEach(t),_vr=r(s7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rTe=n(s7,"CODE",{});var cxt=s(rTe);uvr=r(cxt,"pretrained_model_name_or_path"),cxt.forEach(t),bvr=r(s7,":"),s7.forEach(t),vvr=i(ka),tTe=n(ka,"UL",{});var fxt=s(tTe);uM=n(fxt,"LI",{});var vqe=s(uM);aTe=n(vqe,"STRONG",{});var mxt=s(aTe);Fvr=r(mxt,"maskformer"),mxt.forEach(t),Tvr=r(vqe," \u2014 "),_U=n(vqe,"A",{href:!0});var gxt=s(_U);Mvr=r(gxt,"MaskFormerForInstanceSegmentation"),gxt.forEach(t),Evr=r(vqe," (MaskFormer model)"),vqe.forEach(t),fxt.forEach(t),Cvr=i(ka),bM=n(ka,"P",{});var Fqe=s(bM);wvr=r(Fqe,"The model is set in evaluation mode by default using "),nTe=n(Fqe,"CODE",{});var hxt=s(nTe);Avr=r(hxt,"model.eval()"),hxt.forEach(t),Lvr=r(Fqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sTe=n(Fqe,"CODE",{});var pxt=s(sTe);yvr=r(pxt,"model.train()"),pxt.forEach(t),Fqe.forEach(t),xvr=i(ka),T(vM.$$.fragment,ka),ka.forEach(t),xl.forEach(t),wze=i(f),lc=n(f,"H2",{class:!0});var RWe=s(lc);FM=n(RWe,"A",{id:!0,class:!0,href:!0});var _xt=s(FM);lTe=n(_xt,"SPAN",{});var uxt=s(lTe);T(U9.$$.fragment,uxt),uxt.forEach(t),_xt.forEach(t),$vr=i(RWe),iTe=n(RWe,"SPAN",{});var bxt=s(iTe);kvr=r(bxt,"TFAutoModel"),bxt.forEach(t),RWe.forEach(t),Aze=i(f),or=n(f,"DIV",{class:!0});var $l=s(or);T(J9.$$.fragment,$l),Svr=i($l),ic=n($l,"P",{});var qte=s(ic);Rvr=r(qte,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),uU=n(qte,"A",{href:!0});var vxt=s(uU);Pvr=r(vxt,"from_pretrained()"),vxt.forEach(t),Bvr=r(qte," class method or the "),bU=n(qte,"A",{href:!0});var Fxt=s(bU);Nvr=r(Fxt,"from_config()"),Fxt.forEach(t),Ivr=r(qte,` class
method.`),qte.forEach(t),qvr=i($l),Y9=n($l,"P",{});var PWe=s(Y9);jvr=r(PWe,"This class cannot be instantiated directly using "),dTe=n(PWe,"CODE",{});var Txt=s(dTe);Dvr=r(Txt,"__init__()"),Txt.forEach(t),Gvr=r(PWe," (throws an error)."),PWe.forEach(t),Ovr=i($l),Rt=n($l,"DIV",{class:!0});var l7=s(Rt);T(K9.$$.fragment,l7),Vvr=i(l7),cTe=n(l7,"P",{});var Mxt=s(cTe);Xvr=r(Mxt,"Instantiates one of the base model classes of the library from a configuration."),Mxt.forEach(t),zvr=i(l7),dc=n(l7,"P",{});var jte=s(dc);Qvr=r(jte,`Note:
Loading a model from its configuration file does `),fTe=n(jte,"STRONG",{});var Ext=s(fTe);Wvr=r(Ext,"not"),Ext.forEach(t),Hvr=r(jte,` load the model weights. It only affects the
model\u2019s configuration. Use `),vU=n(jte,"A",{href:!0});var Cxt=s(vU);Uvr=r(Cxt,"from_pretrained()"),Cxt.forEach(t),Jvr=r(jte," to load the model weights."),jte.forEach(t),Yvr=i(l7),T(TM.$$.fragment,l7),l7.forEach(t),Kvr=i($l),xr=n($l,"DIV",{class:!0});var kl=s(xr);T(Z9.$$.fragment,kl),Zvr=i(kl),mTe=n(kl,"P",{});var wxt=s(mTe);e0r=r(wxt,"Instantiate one of the base model classes of the library from a pretrained model."),wxt.forEach(t),o0r=i(kl),sn=n(kl,"P",{});var i7=s(sn);r0r=r(i7,"The model class to instantiate is selected based on the "),gTe=n(i7,"CODE",{});var Axt=s(gTe);t0r=r(Axt,"model_type"),Axt.forEach(t),a0r=r(i7,` property of the config object (either
passed as an argument or loaded from `),hTe=n(i7,"CODE",{});var Lxt=s(hTe);n0r=r(Lxt,"pretrained_model_name_or_path"),Lxt.forEach(t),s0r=r(i7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pTe=n(i7,"CODE",{});var yxt=s(pTe);l0r=r(yxt,"pretrained_model_name_or_path"),yxt.forEach(t),i0r=r(i7,":"),i7.forEach(t),d0r=i(kl),q=n(kl,"UL",{});var D=s(q);MM=n(D,"LI",{});var Tqe=s(MM);_Te=n(Tqe,"STRONG",{});var xxt=s(_Te);c0r=r(xxt,"albert"),xxt.forEach(t),f0r=r(Tqe," \u2014 "),FU=n(Tqe,"A",{href:!0});var $xt=s(FU);m0r=r($xt,"TFAlbertModel"),$xt.forEach(t),g0r=r(Tqe," (ALBERT model)"),Tqe.forEach(t),h0r=i(D),EM=n(D,"LI",{});var Mqe=s(EM);uTe=n(Mqe,"STRONG",{});var kxt=s(uTe);p0r=r(kxt,"bart"),kxt.forEach(t),_0r=r(Mqe," \u2014 "),TU=n(Mqe,"A",{href:!0});var Sxt=s(TU);u0r=r(Sxt,"TFBartModel"),Sxt.forEach(t),b0r=r(Mqe," (BART model)"),Mqe.forEach(t),v0r=i(D),CM=n(D,"LI",{});var Eqe=s(CM);bTe=n(Eqe,"STRONG",{});var Rxt=s(bTe);F0r=r(Rxt,"bert"),Rxt.forEach(t),T0r=r(Eqe," \u2014 "),MU=n(Eqe,"A",{href:!0});var Pxt=s(MU);M0r=r(Pxt,"TFBertModel"),Pxt.forEach(t),E0r=r(Eqe," (BERT model)"),Eqe.forEach(t),C0r=i(D),wM=n(D,"LI",{});var Cqe=s(wM);vTe=n(Cqe,"STRONG",{});var Bxt=s(vTe);w0r=r(Bxt,"blenderbot"),Bxt.forEach(t),A0r=r(Cqe," \u2014 "),EU=n(Cqe,"A",{href:!0});var Nxt=s(EU);L0r=r(Nxt,"TFBlenderbotModel"),Nxt.forEach(t),y0r=r(Cqe," (Blenderbot model)"),Cqe.forEach(t),x0r=i(D),AM=n(D,"LI",{});var wqe=s(AM);FTe=n(wqe,"STRONG",{});var Ixt=s(FTe);$0r=r(Ixt,"blenderbot-small"),Ixt.forEach(t),k0r=r(wqe," \u2014 "),CU=n(wqe,"A",{href:!0});var qxt=s(CU);S0r=r(qxt,"TFBlenderbotSmallModel"),qxt.forEach(t),R0r=r(wqe," (BlenderbotSmall model)"),wqe.forEach(t),P0r=i(D),LM=n(D,"LI",{});var Aqe=s(LM);TTe=n(Aqe,"STRONG",{});var jxt=s(TTe);B0r=r(jxt,"camembert"),jxt.forEach(t),N0r=r(Aqe," \u2014 "),wU=n(Aqe,"A",{href:!0});var Dxt=s(wU);I0r=r(Dxt,"TFCamembertModel"),Dxt.forEach(t),q0r=r(Aqe," (CamemBERT model)"),Aqe.forEach(t),j0r=i(D),yM=n(D,"LI",{});var Lqe=s(yM);MTe=n(Lqe,"STRONG",{});var Gxt=s(MTe);D0r=r(Gxt,"clip"),Gxt.forEach(t),G0r=r(Lqe," \u2014 "),AU=n(Lqe,"A",{href:!0});var Oxt=s(AU);O0r=r(Oxt,"TFCLIPModel"),Oxt.forEach(t),V0r=r(Lqe," (CLIP model)"),Lqe.forEach(t),X0r=i(D),xM=n(D,"LI",{});var yqe=s(xM);ETe=n(yqe,"STRONG",{});var Vxt=s(ETe);z0r=r(Vxt,"convbert"),Vxt.forEach(t),Q0r=r(yqe," \u2014 "),LU=n(yqe,"A",{href:!0});var Xxt=s(LU);W0r=r(Xxt,"TFConvBertModel"),Xxt.forEach(t),H0r=r(yqe," (ConvBERT model)"),yqe.forEach(t),U0r=i(D),$M=n(D,"LI",{});var xqe=s($M);CTe=n(xqe,"STRONG",{});var zxt=s(CTe);J0r=r(zxt,"convnext"),zxt.forEach(t),Y0r=r(xqe," \u2014 "),yU=n(xqe,"A",{href:!0});var Qxt=s(yU);K0r=r(Qxt,"TFConvNextModel"),Qxt.forEach(t),Z0r=r(xqe," (ConvNeXT model)"),xqe.forEach(t),eFr=i(D),kM=n(D,"LI",{});var $qe=s(kM);wTe=n($qe,"STRONG",{});var Wxt=s(wTe);oFr=r(Wxt,"ctrl"),Wxt.forEach(t),rFr=r($qe," \u2014 "),xU=n($qe,"A",{href:!0});var Hxt=s(xU);tFr=r(Hxt,"TFCTRLModel"),Hxt.forEach(t),aFr=r($qe," (CTRL model)"),$qe.forEach(t),nFr=i(D),SM=n(D,"LI",{});var kqe=s(SM);ATe=n(kqe,"STRONG",{});var Uxt=s(ATe);sFr=r(Uxt,"data2vec-vision"),Uxt.forEach(t),lFr=r(kqe," \u2014 "),$U=n(kqe,"A",{href:!0});var Jxt=s($U);iFr=r(Jxt,"TFData2VecVisionModel"),Jxt.forEach(t),dFr=r(kqe," (Data2VecVision model)"),kqe.forEach(t),cFr=i(D),RM=n(D,"LI",{});var Sqe=s(RM);LTe=n(Sqe,"STRONG",{});var Yxt=s(LTe);fFr=r(Yxt,"deberta"),Yxt.forEach(t),mFr=r(Sqe," \u2014 "),kU=n(Sqe,"A",{href:!0});var Kxt=s(kU);gFr=r(Kxt,"TFDebertaModel"),Kxt.forEach(t),hFr=r(Sqe," (DeBERTa model)"),Sqe.forEach(t),pFr=i(D),PM=n(D,"LI",{});var Rqe=s(PM);yTe=n(Rqe,"STRONG",{});var Zxt=s(yTe);_Fr=r(Zxt,"deberta-v2"),Zxt.forEach(t),uFr=r(Rqe," \u2014 "),SU=n(Rqe,"A",{href:!0});var e$t=s(SU);bFr=r(e$t,"TFDebertaV2Model"),e$t.forEach(t),vFr=r(Rqe," (DeBERTa-v2 model)"),Rqe.forEach(t),FFr=i(D),BM=n(D,"LI",{});var Pqe=s(BM);xTe=n(Pqe,"STRONG",{});var o$t=s(xTe);TFr=r(o$t,"deit"),o$t.forEach(t),MFr=r(Pqe," \u2014 "),RU=n(Pqe,"A",{href:!0});var r$t=s(RU);EFr=r(r$t,"TFDeiTModel"),r$t.forEach(t),CFr=r(Pqe," (DeiT model)"),Pqe.forEach(t),wFr=i(D),NM=n(D,"LI",{});var Bqe=s(NM);$Te=n(Bqe,"STRONG",{});var t$t=s($Te);AFr=r(t$t,"distilbert"),t$t.forEach(t),LFr=r(Bqe," \u2014 "),PU=n(Bqe,"A",{href:!0});var a$t=s(PU);yFr=r(a$t,"TFDistilBertModel"),a$t.forEach(t),xFr=r(Bqe," (DistilBERT model)"),Bqe.forEach(t),$Fr=i(D),IM=n(D,"LI",{});var Nqe=s(IM);kTe=n(Nqe,"STRONG",{});var n$t=s(kTe);kFr=r(n$t,"dpr"),n$t.forEach(t),SFr=r(Nqe," \u2014 "),BU=n(Nqe,"A",{href:!0});var s$t=s(BU);RFr=r(s$t,"TFDPRQuestionEncoder"),s$t.forEach(t),PFr=r(Nqe," (DPR model)"),Nqe.forEach(t),BFr=i(D),qM=n(D,"LI",{});var Iqe=s(qM);STe=n(Iqe,"STRONG",{});var l$t=s(STe);NFr=r(l$t,"electra"),l$t.forEach(t),IFr=r(Iqe," \u2014 "),NU=n(Iqe,"A",{href:!0});var i$t=s(NU);qFr=r(i$t,"TFElectraModel"),i$t.forEach(t),jFr=r(Iqe," (ELECTRA model)"),Iqe.forEach(t),DFr=i(D),jM=n(D,"LI",{});var qqe=s(jM);RTe=n(qqe,"STRONG",{});var d$t=s(RTe);GFr=r(d$t,"flaubert"),d$t.forEach(t),OFr=r(qqe," \u2014 "),IU=n(qqe,"A",{href:!0});var c$t=s(IU);VFr=r(c$t,"TFFlaubertModel"),c$t.forEach(t),XFr=r(qqe," (FlauBERT model)"),qqe.forEach(t),zFr=i(D),Ys=n(D,"LI",{});var jS=s(Ys);PTe=n(jS,"STRONG",{});var f$t=s(PTe);QFr=r(f$t,"funnel"),f$t.forEach(t),WFr=r(jS," \u2014 "),qU=n(jS,"A",{href:!0});var m$t=s(qU);HFr=r(m$t,"TFFunnelModel"),m$t.forEach(t),UFr=r(jS," or "),jU=n(jS,"A",{href:!0});var g$t=s(jU);JFr=r(g$t,"TFFunnelBaseModel"),g$t.forEach(t),YFr=r(jS," (Funnel Transformer model)"),jS.forEach(t),KFr=i(D),DM=n(D,"LI",{});var jqe=s(DM);BTe=n(jqe,"STRONG",{});var h$t=s(BTe);ZFr=r(h$t,"gpt2"),h$t.forEach(t),eTr=r(jqe," \u2014 "),DU=n(jqe,"A",{href:!0});var p$t=s(DU);oTr=r(p$t,"TFGPT2Model"),p$t.forEach(t),rTr=r(jqe," (OpenAI GPT-2 model)"),jqe.forEach(t),tTr=i(D),GM=n(D,"LI",{});var Dqe=s(GM);NTe=n(Dqe,"STRONG",{});var _$t=s(NTe);aTr=r(_$t,"gptj"),_$t.forEach(t),nTr=r(Dqe," \u2014 "),GU=n(Dqe,"A",{href:!0});var u$t=s(GU);sTr=r(u$t,"TFGPTJModel"),u$t.forEach(t),lTr=r(Dqe," (GPT-J model)"),Dqe.forEach(t),iTr=i(D),OM=n(D,"LI",{});var Gqe=s(OM);ITe=n(Gqe,"STRONG",{});var b$t=s(ITe);dTr=r(b$t,"hubert"),b$t.forEach(t),cTr=r(Gqe," \u2014 "),OU=n(Gqe,"A",{href:!0});var v$t=s(OU);fTr=r(v$t,"TFHubertModel"),v$t.forEach(t),mTr=r(Gqe," (Hubert model)"),Gqe.forEach(t),gTr=i(D),VM=n(D,"LI",{});var Oqe=s(VM);qTe=n(Oqe,"STRONG",{});var F$t=s(qTe);hTr=r(F$t,"layoutlm"),F$t.forEach(t),pTr=r(Oqe," \u2014 "),VU=n(Oqe,"A",{href:!0});var T$t=s(VU);_Tr=r(T$t,"TFLayoutLMModel"),T$t.forEach(t),uTr=r(Oqe," (LayoutLM model)"),Oqe.forEach(t),bTr=i(D),XM=n(D,"LI",{});var Vqe=s(XM);jTe=n(Vqe,"STRONG",{});var M$t=s(jTe);vTr=r(M$t,"led"),M$t.forEach(t),FTr=r(Vqe," \u2014 "),XU=n(Vqe,"A",{href:!0});var E$t=s(XU);TTr=r(E$t,"TFLEDModel"),E$t.forEach(t),MTr=r(Vqe," (LED model)"),Vqe.forEach(t),ETr=i(D),zM=n(D,"LI",{});var Xqe=s(zM);DTe=n(Xqe,"STRONG",{});var C$t=s(DTe);CTr=r(C$t,"longformer"),C$t.forEach(t),wTr=r(Xqe," \u2014 "),zU=n(Xqe,"A",{href:!0});var w$t=s(zU);ATr=r(w$t,"TFLongformerModel"),w$t.forEach(t),LTr=r(Xqe," (Longformer model)"),Xqe.forEach(t),yTr=i(D),QM=n(D,"LI",{});var zqe=s(QM);GTe=n(zqe,"STRONG",{});var A$t=s(GTe);xTr=r(A$t,"lxmert"),A$t.forEach(t),$Tr=r(zqe," \u2014 "),QU=n(zqe,"A",{href:!0});var L$t=s(QU);kTr=r(L$t,"TFLxmertModel"),L$t.forEach(t),STr=r(zqe," (LXMERT model)"),zqe.forEach(t),RTr=i(D),WM=n(D,"LI",{});var Qqe=s(WM);OTe=n(Qqe,"STRONG",{});var y$t=s(OTe);PTr=r(y$t,"marian"),y$t.forEach(t),BTr=r(Qqe," \u2014 "),WU=n(Qqe,"A",{href:!0});var x$t=s(WU);NTr=r(x$t,"TFMarianModel"),x$t.forEach(t),ITr=r(Qqe," (Marian model)"),Qqe.forEach(t),qTr=i(D),HM=n(D,"LI",{});var Wqe=s(HM);VTe=n(Wqe,"STRONG",{});var $$t=s(VTe);jTr=r($$t,"mbart"),$$t.forEach(t),DTr=r(Wqe," \u2014 "),HU=n(Wqe,"A",{href:!0});var k$t=s(HU);GTr=r(k$t,"TFMBartModel"),k$t.forEach(t),OTr=r(Wqe," (mBART model)"),Wqe.forEach(t),VTr=i(D),UM=n(D,"LI",{});var Hqe=s(UM);XTe=n(Hqe,"STRONG",{});var S$t=s(XTe);XTr=r(S$t,"mobilebert"),S$t.forEach(t),zTr=r(Hqe," \u2014 "),UU=n(Hqe,"A",{href:!0});var R$t=s(UU);QTr=r(R$t,"TFMobileBertModel"),R$t.forEach(t),WTr=r(Hqe," (MobileBERT model)"),Hqe.forEach(t),HTr=i(D),JM=n(D,"LI",{});var Uqe=s(JM);zTe=n(Uqe,"STRONG",{});var P$t=s(zTe);UTr=r(P$t,"mpnet"),P$t.forEach(t),JTr=r(Uqe," \u2014 "),JU=n(Uqe,"A",{href:!0});var B$t=s(JU);YTr=r(B$t,"TFMPNetModel"),B$t.forEach(t),KTr=r(Uqe," (MPNet model)"),Uqe.forEach(t),ZTr=i(D),YM=n(D,"LI",{});var Jqe=s(YM);QTe=n(Jqe,"STRONG",{});var N$t=s(QTe);e8r=r(N$t,"mt5"),N$t.forEach(t),o8r=r(Jqe," \u2014 "),YU=n(Jqe,"A",{href:!0});var I$t=s(YU);r8r=r(I$t,"TFMT5Model"),I$t.forEach(t),t8r=r(Jqe," (MT5 model)"),Jqe.forEach(t),a8r=i(D),KM=n(D,"LI",{});var Yqe=s(KM);WTe=n(Yqe,"STRONG",{});var q$t=s(WTe);n8r=r(q$t,"openai-gpt"),q$t.forEach(t),s8r=r(Yqe," \u2014 "),KU=n(Yqe,"A",{href:!0});var j$t=s(KU);l8r=r(j$t,"TFOpenAIGPTModel"),j$t.forEach(t),i8r=r(Yqe," (OpenAI GPT model)"),Yqe.forEach(t),d8r=i(D),ZM=n(D,"LI",{});var Kqe=s(ZM);HTe=n(Kqe,"STRONG",{});var D$t=s(HTe);c8r=r(D$t,"opt"),D$t.forEach(t),f8r=r(Kqe," \u2014 "),ZU=n(Kqe,"A",{href:!0});var G$t=s(ZU);m8r=r(G$t,"TFOPTModel"),G$t.forEach(t),g8r=r(Kqe," (OPT model)"),Kqe.forEach(t),h8r=i(D),e4=n(D,"LI",{});var Zqe=s(e4);UTe=n(Zqe,"STRONG",{});var O$t=s(UTe);p8r=r(O$t,"pegasus"),O$t.forEach(t),_8r=r(Zqe," \u2014 "),eJ=n(Zqe,"A",{href:!0});var V$t=s(eJ);u8r=r(V$t,"TFPegasusModel"),V$t.forEach(t),b8r=r(Zqe," (Pegasus model)"),Zqe.forEach(t),v8r=i(D),o4=n(D,"LI",{});var eje=s(o4);JTe=n(eje,"STRONG",{});var X$t=s(JTe);F8r=r(X$t,"regnet"),X$t.forEach(t),T8r=r(eje," \u2014 "),oJ=n(eje,"A",{href:!0});var z$t=s(oJ);M8r=r(z$t,"TFRegNetModel"),z$t.forEach(t),E8r=r(eje," (RegNet model)"),eje.forEach(t),C8r=i(D),r4=n(D,"LI",{});var oje=s(r4);YTe=n(oje,"STRONG",{});var Q$t=s(YTe);w8r=r(Q$t,"rembert"),Q$t.forEach(t),A8r=r(oje," \u2014 "),rJ=n(oje,"A",{href:!0});var W$t=s(rJ);L8r=r(W$t,"TFRemBertModel"),W$t.forEach(t),y8r=r(oje," (RemBERT model)"),oje.forEach(t),x8r=i(D),t4=n(D,"LI",{});var rje=s(t4);KTe=n(rje,"STRONG",{});var H$t=s(KTe);$8r=r(H$t,"resnet"),H$t.forEach(t),k8r=r(rje," \u2014 "),tJ=n(rje,"A",{href:!0});var U$t=s(tJ);S8r=r(U$t,"TFResNetModel"),U$t.forEach(t),R8r=r(rje," (ResNet model)"),rje.forEach(t),P8r=i(D),a4=n(D,"LI",{});var tje=s(a4);ZTe=n(tje,"STRONG",{});var J$t=s(ZTe);B8r=r(J$t,"roberta"),J$t.forEach(t),N8r=r(tje," \u2014 "),aJ=n(tje,"A",{href:!0});var Y$t=s(aJ);I8r=r(Y$t,"TFRobertaModel"),Y$t.forEach(t),q8r=r(tje," (RoBERTa model)"),tje.forEach(t),j8r=i(D),n4=n(D,"LI",{});var aje=s(n4);e8e=n(aje,"STRONG",{});var K$t=s(e8e);D8r=r(K$t,"roformer"),K$t.forEach(t),G8r=r(aje," \u2014 "),nJ=n(aje,"A",{href:!0});var Z$t=s(nJ);O8r=r(Z$t,"TFRoFormerModel"),Z$t.forEach(t),V8r=r(aje," (RoFormer model)"),aje.forEach(t),X8r=i(D),s4=n(D,"LI",{});var nje=s(s4);o8e=n(nje,"STRONG",{});var ekt=s(o8e);z8r=r(ekt,"speech_to_text"),ekt.forEach(t),Q8r=r(nje," \u2014 "),sJ=n(nje,"A",{href:!0});var okt=s(sJ);W8r=r(okt,"TFSpeech2TextModel"),okt.forEach(t),H8r=r(nje," (Speech2Text model)"),nje.forEach(t),U8r=i(D),l4=n(D,"LI",{});var sje=s(l4);r8e=n(sje,"STRONG",{});var rkt=s(r8e);J8r=r(rkt,"swin"),rkt.forEach(t),Y8r=r(sje," \u2014 "),lJ=n(sje,"A",{href:!0});var tkt=s(lJ);K8r=r(tkt,"TFSwinModel"),tkt.forEach(t),Z8r=r(sje," (Swin Transformer model)"),sje.forEach(t),eMr=i(D),i4=n(D,"LI",{});var lje=s(i4);t8e=n(lje,"STRONG",{});var akt=s(t8e);oMr=r(akt,"t5"),akt.forEach(t),rMr=r(lje," \u2014 "),iJ=n(lje,"A",{href:!0});var nkt=s(iJ);tMr=r(nkt,"TFT5Model"),nkt.forEach(t),aMr=r(lje," (T5 model)"),lje.forEach(t),nMr=i(D),d4=n(D,"LI",{});var ije=s(d4);a8e=n(ije,"STRONG",{});var skt=s(a8e);sMr=r(skt,"tapas"),skt.forEach(t),lMr=r(ije," \u2014 "),dJ=n(ije,"A",{href:!0});var lkt=s(dJ);iMr=r(lkt,"TFTapasModel"),lkt.forEach(t),dMr=r(ije," (TAPAS model)"),ije.forEach(t),cMr=i(D),c4=n(D,"LI",{});var dje=s(c4);n8e=n(dje,"STRONG",{});var ikt=s(n8e);fMr=r(ikt,"transfo-xl"),ikt.forEach(t),mMr=r(dje," \u2014 "),cJ=n(dje,"A",{href:!0});var dkt=s(cJ);gMr=r(dkt,"TFTransfoXLModel"),dkt.forEach(t),hMr=r(dje," (Transformer-XL model)"),dje.forEach(t),pMr=i(D),f4=n(D,"LI",{});var cje=s(f4);s8e=n(cje,"STRONG",{});var ckt=s(s8e);_Mr=r(ckt,"vit"),ckt.forEach(t),uMr=r(cje," \u2014 "),fJ=n(cje,"A",{href:!0});var fkt=s(fJ);bMr=r(fkt,"TFViTModel"),fkt.forEach(t),vMr=r(cje," (ViT model)"),cje.forEach(t),FMr=i(D),m4=n(D,"LI",{});var fje=s(m4);l8e=n(fje,"STRONG",{});var mkt=s(l8e);TMr=r(mkt,"vit_mae"),mkt.forEach(t),MMr=r(fje," \u2014 "),mJ=n(fje,"A",{href:!0});var gkt=s(mJ);EMr=r(gkt,"TFViTMAEModel"),gkt.forEach(t),CMr=r(fje," (ViTMAE model)"),fje.forEach(t),wMr=i(D),g4=n(D,"LI",{});var mje=s(g4);i8e=n(mje,"STRONG",{});var hkt=s(i8e);AMr=r(hkt,"wav2vec2"),hkt.forEach(t),LMr=r(mje," \u2014 "),gJ=n(mje,"A",{href:!0});var pkt=s(gJ);yMr=r(pkt,"TFWav2Vec2Model"),pkt.forEach(t),xMr=r(mje," (Wav2Vec2 model)"),mje.forEach(t),$Mr=i(D),h4=n(D,"LI",{});var gje=s(h4);d8e=n(gje,"STRONG",{});var _kt=s(d8e);kMr=r(_kt,"xlm"),_kt.forEach(t),SMr=r(gje," \u2014 "),hJ=n(gje,"A",{href:!0});var ukt=s(hJ);RMr=r(ukt,"TFXLMModel"),ukt.forEach(t),PMr=r(gje," (XLM model)"),gje.forEach(t),BMr=i(D),p4=n(D,"LI",{});var hje=s(p4);c8e=n(hje,"STRONG",{});var bkt=s(c8e);NMr=r(bkt,"xlm-roberta"),bkt.forEach(t),IMr=r(hje," \u2014 "),pJ=n(hje,"A",{href:!0});var vkt=s(pJ);qMr=r(vkt,"TFXLMRobertaModel"),vkt.forEach(t),jMr=r(hje," (XLM-RoBERTa model)"),hje.forEach(t),DMr=i(D),_4=n(D,"LI",{});var pje=s(_4);f8e=n(pje,"STRONG",{});var Fkt=s(f8e);GMr=r(Fkt,"xlnet"),Fkt.forEach(t),OMr=r(pje," \u2014 "),_J=n(pje,"A",{href:!0});var Tkt=s(_J);VMr=r(Tkt,"TFXLNetModel"),Tkt.forEach(t),XMr=r(pje," (XLNet model)"),pje.forEach(t),D.forEach(t),zMr=i(kl),T(u4.$$.fragment,kl),kl.forEach(t),$l.forEach(t),Lze=i(f),cc=n(f,"H2",{class:!0});var BWe=s(cc);b4=n(BWe,"A",{id:!0,class:!0,href:!0});var Mkt=s(b4);m8e=n(Mkt,"SPAN",{});var Ekt=s(m8e);T(ex.$$.fragment,Ekt),Ekt.forEach(t),Mkt.forEach(t),QMr=i(BWe),g8e=n(BWe,"SPAN",{});var Ckt=s(g8e);WMr=r(Ckt,"TFAutoModelForPreTraining"),Ckt.forEach(t),BWe.forEach(t),yze=i(f),rr=n(f,"DIV",{class:!0});var Sl=s(rr);T(ox.$$.fragment,Sl),HMr=i(Sl),fc=n(Sl,"P",{});var Dte=s(fc);UMr=r(Dte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),uJ=n(Dte,"A",{href:!0});var wkt=s(uJ);JMr=r(wkt,"from_pretrained()"),wkt.forEach(t),YMr=r(Dte," class method or the "),bJ=n(Dte,"A",{href:!0});var Akt=s(bJ);KMr=r(Akt,"from_config()"),Akt.forEach(t),ZMr=r(Dte,` class
method.`),Dte.forEach(t),e4r=i(Sl),rx=n(Sl,"P",{});var NWe=s(rx);o4r=r(NWe,"This class cannot be instantiated directly using "),h8e=n(NWe,"CODE",{});var Lkt=s(h8e);r4r=r(Lkt,"__init__()"),Lkt.forEach(t),t4r=r(NWe," (throws an error)."),NWe.forEach(t),a4r=i(Sl),Pt=n(Sl,"DIV",{class:!0});var d7=s(Pt);T(tx.$$.fragment,d7),n4r=i(d7),p8e=n(d7,"P",{});var ykt=s(p8e);s4r=r(ykt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),ykt.forEach(t),l4r=i(d7),mc=n(d7,"P",{});var Gte=s(mc);i4r=r(Gte,`Note:
Loading a model from its configuration file does `),_8e=n(Gte,"STRONG",{});var xkt=s(_8e);d4r=r(xkt,"not"),xkt.forEach(t),c4r=r(Gte,` load the model weights. It only affects the
model\u2019s configuration. Use `),vJ=n(Gte,"A",{href:!0});var $kt=s(vJ);f4r=r($kt,"from_pretrained()"),$kt.forEach(t),m4r=r(Gte," to load the model weights."),Gte.forEach(t),g4r=i(d7),T(v4.$$.fragment,d7),d7.forEach(t),h4r=i(Sl),$r=n(Sl,"DIV",{class:!0});var Rl=s($r);T(ax.$$.fragment,Rl),p4r=i(Rl),u8e=n(Rl,"P",{});var kkt=s(u8e);_4r=r(kkt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),kkt.forEach(t),u4r=i(Rl),ln=n(Rl,"P",{});var c7=s(ln);b4r=r(c7,"The model class to instantiate is selected based on the "),b8e=n(c7,"CODE",{});var Skt=s(b8e);v4r=r(Skt,"model_type"),Skt.forEach(t),F4r=r(c7,` property of the config object (either
passed as an argument or loaded from `),v8e=n(c7,"CODE",{});var Rkt=s(v8e);T4r=r(Rkt,"pretrained_model_name_or_path"),Rkt.forEach(t),M4r=r(c7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F8e=n(c7,"CODE",{});var Pkt=s(F8e);E4r=r(Pkt,"pretrained_model_name_or_path"),Pkt.forEach(t),C4r=r(c7,":"),c7.forEach(t),w4r=i(Rl),se=n(Rl,"UL",{});var le=s(se);F4=n(le,"LI",{});var _je=s(F4);T8e=n(_je,"STRONG",{});var Bkt=s(T8e);A4r=r(Bkt,"albert"),Bkt.forEach(t),L4r=r(_je," \u2014 "),FJ=n(_je,"A",{href:!0});var Nkt=s(FJ);y4r=r(Nkt,"TFAlbertForPreTraining"),Nkt.forEach(t),x4r=r(_je," (ALBERT model)"),_je.forEach(t),$4r=i(le),T4=n(le,"LI",{});var uje=s(T4);M8e=n(uje,"STRONG",{});var Ikt=s(M8e);k4r=r(Ikt,"bart"),Ikt.forEach(t),S4r=r(uje," \u2014 "),TJ=n(uje,"A",{href:!0});var qkt=s(TJ);R4r=r(qkt,"TFBartForConditionalGeneration"),qkt.forEach(t),P4r=r(uje," (BART model)"),uje.forEach(t),B4r=i(le),M4=n(le,"LI",{});var bje=s(M4);E8e=n(bje,"STRONG",{});var jkt=s(E8e);N4r=r(jkt,"bert"),jkt.forEach(t),I4r=r(bje," \u2014 "),MJ=n(bje,"A",{href:!0});var Dkt=s(MJ);q4r=r(Dkt,"TFBertForPreTraining"),Dkt.forEach(t),j4r=r(bje," (BERT model)"),bje.forEach(t),D4r=i(le),E4=n(le,"LI",{});var vje=s(E4);C8e=n(vje,"STRONG",{});var Gkt=s(C8e);G4r=r(Gkt,"camembert"),Gkt.forEach(t),O4r=r(vje," \u2014 "),EJ=n(vje,"A",{href:!0});var Okt=s(EJ);V4r=r(Okt,"TFCamembertForMaskedLM"),Okt.forEach(t),X4r=r(vje," (CamemBERT model)"),vje.forEach(t),z4r=i(le),C4=n(le,"LI",{});var Fje=s(C4);w8e=n(Fje,"STRONG",{});var Vkt=s(w8e);Q4r=r(Vkt,"ctrl"),Vkt.forEach(t),W4r=r(Fje," \u2014 "),CJ=n(Fje,"A",{href:!0});var Xkt=s(CJ);H4r=r(Xkt,"TFCTRLLMHeadModel"),Xkt.forEach(t),U4r=r(Fje," (CTRL model)"),Fje.forEach(t),J4r=i(le),w4=n(le,"LI",{});var Tje=s(w4);A8e=n(Tje,"STRONG",{});var zkt=s(A8e);Y4r=r(zkt,"distilbert"),zkt.forEach(t),K4r=r(Tje," \u2014 "),wJ=n(Tje,"A",{href:!0});var Qkt=s(wJ);Z4r=r(Qkt,"TFDistilBertForMaskedLM"),Qkt.forEach(t),eEr=r(Tje," (DistilBERT model)"),Tje.forEach(t),oEr=i(le),A4=n(le,"LI",{});var Mje=s(A4);L8e=n(Mje,"STRONG",{});var Wkt=s(L8e);rEr=r(Wkt,"electra"),Wkt.forEach(t),tEr=r(Mje," \u2014 "),AJ=n(Mje,"A",{href:!0});var Hkt=s(AJ);aEr=r(Hkt,"TFElectraForPreTraining"),Hkt.forEach(t),nEr=r(Mje," (ELECTRA model)"),Mje.forEach(t),sEr=i(le),L4=n(le,"LI",{});var Eje=s(L4);y8e=n(Eje,"STRONG",{});var Ukt=s(y8e);lEr=r(Ukt,"flaubert"),Ukt.forEach(t),iEr=r(Eje," \u2014 "),LJ=n(Eje,"A",{href:!0});var Jkt=s(LJ);dEr=r(Jkt,"TFFlaubertWithLMHeadModel"),Jkt.forEach(t),cEr=r(Eje," (FlauBERT model)"),Eje.forEach(t),fEr=i(le),y4=n(le,"LI",{});var Cje=s(y4);x8e=n(Cje,"STRONG",{});var Ykt=s(x8e);mEr=r(Ykt,"funnel"),Ykt.forEach(t),gEr=r(Cje," \u2014 "),yJ=n(Cje,"A",{href:!0});var Kkt=s(yJ);hEr=r(Kkt,"TFFunnelForPreTraining"),Kkt.forEach(t),pEr=r(Cje," (Funnel Transformer model)"),Cje.forEach(t),_Er=i(le),x4=n(le,"LI",{});var wje=s(x4);$8e=n(wje,"STRONG",{});var Zkt=s($8e);uEr=r(Zkt,"gpt2"),Zkt.forEach(t),bEr=r(wje," \u2014 "),xJ=n(wje,"A",{href:!0});var eSt=s(xJ);vEr=r(eSt,"TFGPT2LMHeadModel"),eSt.forEach(t),FEr=r(wje," (OpenAI GPT-2 model)"),wje.forEach(t),TEr=i(le),$4=n(le,"LI",{});var Aje=s($4);k8e=n(Aje,"STRONG",{});var oSt=s(k8e);MEr=r(oSt,"layoutlm"),oSt.forEach(t),EEr=r(Aje," \u2014 "),$J=n(Aje,"A",{href:!0});var rSt=s($J);CEr=r(rSt,"TFLayoutLMForMaskedLM"),rSt.forEach(t),wEr=r(Aje," (LayoutLM model)"),Aje.forEach(t),AEr=i(le),k4=n(le,"LI",{});var Lje=s(k4);S8e=n(Lje,"STRONG",{});var tSt=s(S8e);LEr=r(tSt,"lxmert"),tSt.forEach(t),yEr=r(Lje," \u2014 "),kJ=n(Lje,"A",{href:!0});var aSt=s(kJ);xEr=r(aSt,"TFLxmertForPreTraining"),aSt.forEach(t),$Er=r(Lje," (LXMERT model)"),Lje.forEach(t),kEr=i(le),S4=n(le,"LI",{});var yje=s(S4);R8e=n(yje,"STRONG",{});var nSt=s(R8e);SEr=r(nSt,"mobilebert"),nSt.forEach(t),REr=r(yje," \u2014 "),SJ=n(yje,"A",{href:!0});var sSt=s(SJ);PEr=r(sSt,"TFMobileBertForPreTraining"),sSt.forEach(t),BEr=r(yje," (MobileBERT model)"),yje.forEach(t),NEr=i(le),R4=n(le,"LI",{});var xje=s(R4);P8e=n(xje,"STRONG",{});var lSt=s(P8e);IEr=r(lSt,"mpnet"),lSt.forEach(t),qEr=r(xje," \u2014 "),RJ=n(xje,"A",{href:!0});var iSt=s(RJ);jEr=r(iSt,"TFMPNetForMaskedLM"),iSt.forEach(t),DEr=r(xje," (MPNet model)"),xje.forEach(t),GEr=i(le),P4=n(le,"LI",{});var $je=s(P4);B8e=n($je,"STRONG",{});var dSt=s(B8e);OEr=r(dSt,"openai-gpt"),dSt.forEach(t),VEr=r($je," \u2014 "),PJ=n($je,"A",{href:!0});var cSt=s(PJ);XEr=r(cSt,"TFOpenAIGPTLMHeadModel"),cSt.forEach(t),zEr=r($je," (OpenAI GPT model)"),$je.forEach(t),QEr=i(le),B4=n(le,"LI",{});var kje=s(B4);N8e=n(kje,"STRONG",{});var fSt=s(N8e);WEr=r(fSt,"roberta"),fSt.forEach(t),HEr=r(kje," \u2014 "),BJ=n(kje,"A",{href:!0});var mSt=s(BJ);UEr=r(mSt,"TFRobertaForMaskedLM"),mSt.forEach(t),JEr=r(kje," (RoBERTa model)"),kje.forEach(t),YEr=i(le),N4=n(le,"LI",{});var Sje=s(N4);I8e=n(Sje,"STRONG",{});var gSt=s(I8e);KEr=r(gSt,"t5"),gSt.forEach(t),ZEr=r(Sje," \u2014 "),NJ=n(Sje,"A",{href:!0});var hSt=s(NJ);eCr=r(hSt,"TFT5ForConditionalGeneration"),hSt.forEach(t),oCr=r(Sje," (T5 model)"),Sje.forEach(t),rCr=i(le),I4=n(le,"LI",{});var Rje=s(I4);q8e=n(Rje,"STRONG",{});var pSt=s(q8e);tCr=r(pSt,"tapas"),pSt.forEach(t),aCr=r(Rje," \u2014 "),IJ=n(Rje,"A",{href:!0});var _St=s(IJ);nCr=r(_St,"TFTapasForMaskedLM"),_St.forEach(t),sCr=r(Rje," (TAPAS model)"),Rje.forEach(t),lCr=i(le),q4=n(le,"LI",{});var Pje=s(q4);j8e=n(Pje,"STRONG",{});var uSt=s(j8e);iCr=r(uSt,"transfo-xl"),uSt.forEach(t),dCr=r(Pje," \u2014 "),qJ=n(Pje,"A",{href:!0});var bSt=s(qJ);cCr=r(bSt,"TFTransfoXLLMHeadModel"),bSt.forEach(t),fCr=r(Pje," (Transformer-XL model)"),Pje.forEach(t),mCr=i(le),j4=n(le,"LI",{});var Bje=s(j4);D8e=n(Bje,"STRONG",{});var vSt=s(D8e);gCr=r(vSt,"vit_mae"),vSt.forEach(t),hCr=r(Bje," \u2014 "),jJ=n(Bje,"A",{href:!0});var FSt=s(jJ);pCr=r(FSt,"TFViTMAEForPreTraining"),FSt.forEach(t),_Cr=r(Bje," (ViTMAE model)"),Bje.forEach(t),uCr=i(le),D4=n(le,"LI",{});var Nje=s(D4);G8e=n(Nje,"STRONG",{});var TSt=s(G8e);bCr=r(TSt,"xlm"),TSt.forEach(t),vCr=r(Nje," \u2014 "),DJ=n(Nje,"A",{href:!0});var MSt=s(DJ);FCr=r(MSt,"TFXLMWithLMHeadModel"),MSt.forEach(t),TCr=r(Nje," (XLM model)"),Nje.forEach(t),MCr=i(le),G4=n(le,"LI",{});var Ije=s(G4);O8e=n(Ije,"STRONG",{});var ESt=s(O8e);ECr=r(ESt,"xlm-roberta"),ESt.forEach(t),CCr=r(Ije," \u2014 "),GJ=n(Ije,"A",{href:!0});var CSt=s(GJ);wCr=r(CSt,"TFXLMRobertaForMaskedLM"),CSt.forEach(t),ACr=r(Ije," (XLM-RoBERTa model)"),Ije.forEach(t),LCr=i(le),O4=n(le,"LI",{});var qje=s(O4);V8e=n(qje,"STRONG",{});var wSt=s(V8e);yCr=r(wSt,"xlnet"),wSt.forEach(t),xCr=r(qje," \u2014 "),OJ=n(qje,"A",{href:!0});var ASt=s(OJ);$Cr=r(ASt,"TFXLNetLMHeadModel"),ASt.forEach(t),kCr=r(qje," (XLNet model)"),qje.forEach(t),le.forEach(t),SCr=i(Rl),T(V4.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),xze=i(f),gc=n(f,"H2",{class:!0});var IWe=s(gc);X4=n(IWe,"A",{id:!0,class:!0,href:!0});var LSt=s(X4);X8e=n(LSt,"SPAN",{});var ySt=s(X8e);T(nx.$$.fragment,ySt),ySt.forEach(t),LSt.forEach(t),RCr=i(IWe),z8e=n(IWe,"SPAN",{});var xSt=s(z8e);PCr=r(xSt,"TFAutoModelForCausalLM"),xSt.forEach(t),IWe.forEach(t),$ze=i(f),tr=n(f,"DIV",{class:!0});var Pl=s(tr);T(sx.$$.fragment,Pl),BCr=i(Pl),hc=n(Pl,"P",{});var Ote=s(hc);NCr=r(Ote,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),VJ=n(Ote,"A",{href:!0});var $St=s(VJ);ICr=r($St,"from_pretrained()"),$St.forEach(t),qCr=r(Ote," class method or the "),XJ=n(Ote,"A",{href:!0});var kSt=s(XJ);jCr=r(kSt,"from_config()"),kSt.forEach(t),DCr=r(Ote,` class
method.`),Ote.forEach(t),GCr=i(Pl),lx=n(Pl,"P",{});var qWe=s(lx);OCr=r(qWe,"This class cannot be instantiated directly using "),Q8e=n(qWe,"CODE",{});var SSt=s(Q8e);VCr=r(SSt,"__init__()"),SSt.forEach(t),XCr=r(qWe," (throws an error)."),qWe.forEach(t),zCr=i(Pl),Bt=n(Pl,"DIV",{class:!0});var f7=s(Bt);T(ix.$$.fragment,f7),QCr=i(f7),W8e=n(f7,"P",{});var RSt=s(W8e);WCr=r(RSt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),RSt.forEach(t),HCr=i(f7),pc=n(f7,"P",{});var Vte=s(pc);UCr=r(Vte,`Note:
Loading a model from its configuration file does `),H8e=n(Vte,"STRONG",{});var PSt=s(H8e);JCr=r(PSt,"not"),PSt.forEach(t),YCr=r(Vte,` load the model weights. It only affects the
model\u2019s configuration. Use `),zJ=n(Vte,"A",{href:!0});var BSt=s(zJ);KCr=r(BSt,"from_pretrained()"),BSt.forEach(t),ZCr=r(Vte," to load the model weights."),Vte.forEach(t),e3r=i(f7),T(z4.$$.fragment,f7),f7.forEach(t),o3r=i(Pl),kr=n(Pl,"DIV",{class:!0});var Bl=s(kr);T(dx.$$.fragment,Bl),r3r=i(Bl),U8e=n(Bl,"P",{});var NSt=s(U8e);t3r=r(NSt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),NSt.forEach(t),a3r=i(Bl),dn=n(Bl,"P",{});var m7=s(dn);n3r=r(m7,"The model class to instantiate is selected based on the "),J8e=n(m7,"CODE",{});var ISt=s(J8e);s3r=r(ISt,"model_type"),ISt.forEach(t),l3r=r(m7,` property of the config object (either
passed as an argument or loaded from `),Y8e=n(m7,"CODE",{});var qSt=s(Y8e);i3r=r(qSt,"pretrained_model_name_or_path"),qSt.forEach(t),d3r=r(m7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K8e=n(m7,"CODE",{});var jSt=s(K8e);c3r=r(jSt,"pretrained_model_name_or_path"),jSt.forEach(t),f3r=r(m7,":"),m7.forEach(t),m3r=i(Bl),Me=n(Bl,"UL",{});var Ce=s(Me);Q4=n(Ce,"LI",{});var jje=s(Q4);Z8e=n(jje,"STRONG",{});var DSt=s(Z8e);g3r=r(DSt,"bert"),DSt.forEach(t),h3r=r(jje," \u2014 "),QJ=n(jje,"A",{href:!0});var GSt=s(QJ);p3r=r(GSt,"TFBertLMHeadModel"),GSt.forEach(t),_3r=r(jje," (BERT model)"),jje.forEach(t),u3r=i(Ce),W4=n(Ce,"LI",{});var Dje=s(W4);eMe=n(Dje,"STRONG",{});var OSt=s(eMe);b3r=r(OSt,"camembert"),OSt.forEach(t),v3r=r(Dje," \u2014 "),WJ=n(Dje,"A",{href:!0});var VSt=s(WJ);F3r=r(VSt,"TFCamembertForCausalLM"),VSt.forEach(t),T3r=r(Dje," (CamemBERT model)"),Dje.forEach(t),M3r=i(Ce),H4=n(Ce,"LI",{});var Gje=s(H4);oMe=n(Gje,"STRONG",{});var XSt=s(oMe);E3r=r(XSt,"ctrl"),XSt.forEach(t),C3r=r(Gje," \u2014 "),HJ=n(Gje,"A",{href:!0});var zSt=s(HJ);w3r=r(zSt,"TFCTRLLMHeadModel"),zSt.forEach(t),A3r=r(Gje," (CTRL model)"),Gje.forEach(t),L3r=i(Ce),U4=n(Ce,"LI",{});var Oje=s(U4);rMe=n(Oje,"STRONG",{});var QSt=s(rMe);y3r=r(QSt,"gpt2"),QSt.forEach(t),x3r=r(Oje," \u2014 "),UJ=n(Oje,"A",{href:!0});var WSt=s(UJ);$3r=r(WSt,"TFGPT2LMHeadModel"),WSt.forEach(t),k3r=r(Oje," (OpenAI GPT-2 model)"),Oje.forEach(t),S3r=i(Ce),J4=n(Ce,"LI",{});var Vje=s(J4);tMe=n(Vje,"STRONG",{});var HSt=s(tMe);R3r=r(HSt,"gptj"),HSt.forEach(t),P3r=r(Vje," \u2014 "),JJ=n(Vje,"A",{href:!0});var USt=s(JJ);B3r=r(USt,"TFGPTJForCausalLM"),USt.forEach(t),N3r=r(Vje," (GPT-J model)"),Vje.forEach(t),I3r=i(Ce),Y4=n(Ce,"LI",{});var Xje=s(Y4);aMe=n(Xje,"STRONG",{});var JSt=s(aMe);q3r=r(JSt,"openai-gpt"),JSt.forEach(t),j3r=r(Xje," \u2014 "),YJ=n(Xje,"A",{href:!0});var YSt=s(YJ);D3r=r(YSt,"TFOpenAIGPTLMHeadModel"),YSt.forEach(t),G3r=r(Xje," (OpenAI GPT model)"),Xje.forEach(t),O3r=i(Ce),K4=n(Ce,"LI",{});var zje=s(K4);nMe=n(zje,"STRONG",{});var KSt=s(nMe);V3r=r(KSt,"opt"),KSt.forEach(t),X3r=r(zje," \u2014 "),KJ=n(zje,"A",{href:!0});var ZSt=s(KJ);z3r=r(ZSt,"TFOPTForCausalLM"),ZSt.forEach(t),Q3r=r(zje," (OPT model)"),zje.forEach(t),W3r=i(Ce),Z4=n(Ce,"LI",{});var Qje=s(Z4);sMe=n(Qje,"STRONG",{});var eRt=s(sMe);H3r=r(eRt,"rembert"),eRt.forEach(t),U3r=r(Qje," \u2014 "),ZJ=n(Qje,"A",{href:!0});var oRt=s(ZJ);J3r=r(oRt,"TFRemBertForCausalLM"),oRt.forEach(t),Y3r=r(Qje," (RemBERT model)"),Qje.forEach(t),K3r=i(Ce),eE=n(Ce,"LI",{});var Wje=s(eE);lMe=n(Wje,"STRONG",{});var rRt=s(lMe);Z3r=r(rRt,"roberta"),rRt.forEach(t),e5r=r(Wje," \u2014 "),eY=n(Wje,"A",{href:!0});var tRt=s(eY);o5r=r(tRt,"TFRobertaForCausalLM"),tRt.forEach(t),r5r=r(Wje," (RoBERTa model)"),Wje.forEach(t),t5r=i(Ce),oE=n(Ce,"LI",{});var Hje=s(oE);iMe=n(Hje,"STRONG",{});var aRt=s(iMe);a5r=r(aRt,"roformer"),aRt.forEach(t),n5r=r(Hje," \u2014 "),oY=n(Hje,"A",{href:!0});var nRt=s(oY);s5r=r(nRt,"TFRoFormerForCausalLM"),nRt.forEach(t),l5r=r(Hje," (RoFormer model)"),Hje.forEach(t),i5r=i(Ce),rE=n(Ce,"LI",{});var Uje=s(rE);dMe=n(Uje,"STRONG",{});var sRt=s(dMe);d5r=r(sRt,"transfo-xl"),sRt.forEach(t),c5r=r(Uje," \u2014 "),rY=n(Uje,"A",{href:!0});var lRt=s(rY);f5r=r(lRt,"TFTransfoXLLMHeadModel"),lRt.forEach(t),m5r=r(Uje," (Transformer-XL model)"),Uje.forEach(t),g5r=i(Ce),tE=n(Ce,"LI",{});var Jje=s(tE);cMe=n(Jje,"STRONG",{});var iRt=s(cMe);h5r=r(iRt,"xlm"),iRt.forEach(t),p5r=r(Jje," \u2014 "),tY=n(Jje,"A",{href:!0});var dRt=s(tY);_5r=r(dRt,"TFXLMWithLMHeadModel"),dRt.forEach(t),u5r=r(Jje," (XLM model)"),Jje.forEach(t),b5r=i(Ce),aE=n(Ce,"LI",{});var Yje=s(aE);fMe=n(Yje,"STRONG",{});var cRt=s(fMe);v5r=r(cRt,"xlnet"),cRt.forEach(t),F5r=r(Yje," \u2014 "),aY=n(Yje,"A",{href:!0});var fRt=s(aY);T5r=r(fRt,"TFXLNetLMHeadModel"),fRt.forEach(t),M5r=r(Yje," (XLNet model)"),Yje.forEach(t),Ce.forEach(t),E5r=i(Bl),T(nE.$$.fragment,Bl),Bl.forEach(t),Pl.forEach(t),kze=i(f),_c=n(f,"H2",{class:!0});var jWe=s(_c);sE=n(jWe,"A",{id:!0,class:!0,href:!0});var mRt=s(sE);mMe=n(mRt,"SPAN",{});var gRt=s(mMe);T(cx.$$.fragment,gRt),gRt.forEach(t),mRt.forEach(t),C5r=i(jWe),gMe=n(jWe,"SPAN",{});var hRt=s(gMe);w5r=r(hRt,"TFAutoModelForImageClassification"),hRt.forEach(t),jWe.forEach(t),Sze=i(f),ar=n(f,"DIV",{class:!0});var Nl=s(ar);T(fx.$$.fragment,Nl),A5r=i(Nl),uc=n(Nl,"P",{});var Xte=s(uc);L5r=r(Xte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),nY=n(Xte,"A",{href:!0});var pRt=s(nY);y5r=r(pRt,"from_pretrained()"),pRt.forEach(t),x5r=r(Xte," class method or the "),sY=n(Xte,"A",{href:!0});var _Rt=s(sY);$5r=r(_Rt,"from_config()"),_Rt.forEach(t),k5r=r(Xte,` class
method.`),Xte.forEach(t),S5r=i(Nl),mx=n(Nl,"P",{});var DWe=s(mx);R5r=r(DWe,"This class cannot be instantiated directly using "),hMe=n(DWe,"CODE",{});var uRt=s(hMe);P5r=r(uRt,"__init__()"),uRt.forEach(t),B5r=r(DWe," (throws an error)."),DWe.forEach(t),N5r=i(Nl),Nt=n(Nl,"DIV",{class:!0});var g7=s(Nt);T(gx.$$.fragment,g7),I5r=i(g7),pMe=n(g7,"P",{});var bRt=s(pMe);q5r=r(bRt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),bRt.forEach(t),j5r=i(g7),bc=n(g7,"P",{});var zte=s(bc);D5r=r(zte,`Note:
Loading a model from its configuration file does `),_Me=n(zte,"STRONG",{});var vRt=s(_Me);G5r=r(vRt,"not"),vRt.forEach(t),O5r=r(zte,` load the model weights. It only affects the
model\u2019s configuration. Use `),lY=n(zte,"A",{href:!0});var FRt=s(lY);V5r=r(FRt,"from_pretrained()"),FRt.forEach(t),X5r=r(zte," to load the model weights."),zte.forEach(t),z5r=i(g7),T(lE.$$.fragment,g7),g7.forEach(t),Q5r=i(Nl),Sr=n(Nl,"DIV",{class:!0});var Il=s(Sr);T(hx.$$.fragment,Il),W5r=i(Il),uMe=n(Il,"P",{});var TRt=s(uMe);H5r=r(TRt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),TRt.forEach(t),U5r=i(Il),cn=n(Il,"P",{});var h7=s(cn);J5r=r(h7,"The model class to instantiate is selected based on the "),bMe=n(h7,"CODE",{});var MRt=s(bMe);Y5r=r(MRt,"model_type"),MRt.forEach(t),K5r=r(h7,` property of the config object (either
passed as an argument or loaded from `),vMe=n(h7,"CODE",{});var ERt=s(vMe);Z5r=r(ERt,"pretrained_model_name_or_path"),ERt.forEach(t),ewr=r(h7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FMe=n(h7,"CODE",{});var CRt=s(FMe);owr=r(CRt,"pretrained_model_name_or_path"),CRt.forEach(t),rwr=r(h7,":"),h7.forEach(t),twr=i(Il),Qe=n(Il,"UL",{});var ot=s(Qe);iE=n(ot,"LI",{});var Kje=s(iE);TMe=n(Kje,"STRONG",{});var wRt=s(TMe);awr=r(wRt,"convnext"),wRt.forEach(t),nwr=r(Kje," \u2014 "),iY=n(Kje,"A",{href:!0});var ARt=s(iY);swr=r(ARt,"TFConvNextForImageClassification"),ARt.forEach(t),lwr=r(Kje," (ConvNeXT model)"),Kje.forEach(t),iwr=i(ot),dE=n(ot,"LI",{});var Zje=s(dE);MMe=n(Zje,"STRONG",{});var LRt=s(MMe);dwr=r(LRt,"data2vec-vision"),LRt.forEach(t),cwr=r(Zje," \u2014 "),dY=n(Zje,"A",{href:!0});var yRt=s(dY);fwr=r(yRt,"TFData2VecVisionForImageClassification"),yRt.forEach(t),mwr=r(Zje," (Data2VecVision model)"),Zje.forEach(t),gwr=i(ot),Ks=n(ot,"LI",{});var DS=s(Ks);EMe=n(DS,"STRONG",{});var xRt=s(EMe);hwr=r(xRt,"deit"),xRt.forEach(t),pwr=r(DS," \u2014 "),cY=n(DS,"A",{href:!0});var $Rt=s(cY);_wr=r($Rt,"TFDeiTForImageClassification"),$Rt.forEach(t),uwr=r(DS," or "),fY=n(DS,"A",{href:!0});var kRt=s(fY);bwr=r(kRt,"TFDeiTForImageClassificationWithTeacher"),kRt.forEach(t),vwr=r(DS," (DeiT model)"),DS.forEach(t),Fwr=i(ot),cE=n(ot,"LI",{});var eDe=s(cE);CMe=n(eDe,"STRONG",{});var SRt=s(CMe);Twr=r(SRt,"regnet"),SRt.forEach(t),Mwr=r(eDe," \u2014 "),mY=n(eDe,"A",{href:!0});var RRt=s(mY);Ewr=r(RRt,"TFRegNetForImageClassification"),RRt.forEach(t),Cwr=r(eDe," (RegNet model)"),eDe.forEach(t),wwr=i(ot),fE=n(ot,"LI",{});var oDe=s(fE);wMe=n(oDe,"STRONG",{});var PRt=s(wMe);Awr=r(PRt,"resnet"),PRt.forEach(t),Lwr=r(oDe," \u2014 "),gY=n(oDe,"A",{href:!0});var BRt=s(gY);ywr=r(BRt,"TFResNetForImageClassification"),BRt.forEach(t),xwr=r(oDe," (ResNet model)"),oDe.forEach(t),$wr=i(ot),mE=n(ot,"LI",{});var rDe=s(mE);AMe=n(rDe,"STRONG",{});var NRt=s(AMe);kwr=r(NRt,"swin"),NRt.forEach(t),Swr=r(rDe," \u2014 "),hY=n(rDe,"A",{href:!0});var IRt=s(hY);Rwr=r(IRt,"TFSwinForImageClassification"),IRt.forEach(t),Pwr=r(rDe," (Swin Transformer model)"),rDe.forEach(t),Bwr=i(ot),gE=n(ot,"LI",{});var tDe=s(gE);LMe=n(tDe,"STRONG",{});var qRt=s(LMe);Nwr=r(qRt,"vit"),qRt.forEach(t),Iwr=r(tDe," \u2014 "),pY=n(tDe,"A",{href:!0});var jRt=s(pY);qwr=r(jRt,"TFViTForImageClassification"),jRt.forEach(t),jwr=r(tDe," (ViT model)"),tDe.forEach(t),ot.forEach(t),Dwr=i(Il),T(hE.$$.fragment,Il),Il.forEach(t),Nl.forEach(t),Rze=i(f),vc=n(f,"H2",{class:!0});var GWe=s(vc);pE=n(GWe,"A",{id:!0,class:!0,href:!0});var DRt=s(pE);yMe=n(DRt,"SPAN",{});var GRt=s(yMe);T(px.$$.fragment,GRt),GRt.forEach(t),DRt.forEach(t),Gwr=i(GWe),xMe=n(GWe,"SPAN",{});var ORt=s(xMe);Owr=r(ORt,"TFAutoModelForMaskedLM"),ORt.forEach(t),GWe.forEach(t),Pze=i(f),nr=n(f,"DIV",{class:!0});var ql=s(nr);T(_x.$$.fragment,ql),Vwr=i(ql),Fc=n(ql,"P",{});var Qte=s(Fc);Xwr=r(Qte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),_Y=n(Qte,"A",{href:!0});var VRt=s(_Y);zwr=r(VRt,"from_pretrained()"),VRt.forEach(t),Qwr=r(Qte," class method or the "),uY=n(Qte,"A",{href:!0});var XRt=s(uY);Wwr=r(XRt,"from_config()"),XRt.forEach(t),Hwr=r(Qte,` class
method.`),Qte.forEach(t),Uwr=i(ql),ux=n(ql,"P",{});var OWe=s(ux);Jwr=r(OWe,"This class cannot be instantiated directly using "),$Me=n(OWe,"CODE",{});var zRt=s($Me);Ywr=r(zRt,"__init__()"),zRt.forEach(t),Kwr=r(OWe," (throws an error)."),OWe.forEach(t),Zwr=i(ql),It=n(ql,"DIV",{class:!0});var p7=s(It);T(bx.$$.fragment,p7),eAr=i(p7),kMe=n(p7,"P",{});var QRt=s(kMe);oAr=r(QRt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),QRt.forEach(t),rAr=i(p7),Tc=n(p7,"P",{});var Wte=s(Tc);tAr=r(Wte,`Note:
Loading a model from its configuration file does `),SMe=n(Wte,"STRONG",{});var WRt=s(SMe);aAr=r(WRt,"not"),WRt.forEach(t),nAr=r(Wte,` load the model weights. It only affects the
model\u2019s configuration. Use `),bY=n(Wte,"A",{href:!0});var HRt=s(bY);sAr=r(HRt,"from_pretrained()"),HRt.forEach(t),lAr=r(Wte," to load the model weights."),Wte.forEach(t),iAr=i(p7),T(_E.$$.fragment,p7),p7.forEach(t),dAr=i(ql),Rr=n(ql,"DIV",{class:!0});var jl=s(Rr);T(vx.$$.fragment,jl),cAr=i(jl),RMe=n(jl,"P",{});var URt=s(RMe);fAr=r(URt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),URt.forEach(t),mAr=i(jl),fn=n(jl,"P",{});var _7=s(fn);gAr=r(_7,"The model class to instantiate is selected based on the "),PMe=n(_7,"CODE",{});var JRt=s(PMe);hAr=r(JRt,"model_type"),JRt.forEach(t),pAr=r(_7,` property of the config object (either
passed as an argument or loaded from `),BMe=n(_7,"CODE",{});var YRt=s(BMe);_Ar=r(YRt,"pretrained_model_name_or_path"),YRt.forEach(t),uAr=r(_7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NMe=n(_7,"CODE",{});var KRt=s(NMe);bAr=r(KRt,"pretrained_model_name_or_path"),KRt.forEach(t),vAr=r(_7,":"),_7.forEach(t),FAr=i(jl),ie=n(jl,"UL",{});var me=s(ie);uE=n(me,"LI",{});var aDe=s(uE);IMe=n(aDe,"STRONG",{});var ZRt=s(IMe);TAr=r(ZRt,"albert"),ZRt.forEach(t),MAr=r(aDe," \u2014 "),vY=n(aDe,"A",{href:!0});var ePt=s(vY);EAr=r(ePt,"TFAlbertForMaskedLM"),ePt.forEach(t),CAr=r(aDe," (ALBERT model)"),aDe.forEach(t),wAr=i(me),bE=n(me,"LI",{});var nDe=s(bE);qMe=n(nDe,"STRONG",{});var oPt=s(qMe);AAr=r(oPt,"bert"),oPt.forEach(t),LAr=r(nDe," \u2014 "),FY=n(nDe,"A",{href:!0});var rPt=s(FY);yAr=r(rPt,"TFBertForMaskedLM"),rPt.forEach(t),xAr=r(nDe," (BERT model)"),nDe.forEach(t),$Ar=i(me),vE=n(me,"LI",{});var sDe=s(vE);jMe=n(sDe,"STRONG",{});var tPt=s(jMe);kAr=r(tPt,"camembert"),tPt.forEach(t),SAr=r(sDe," \u2014 "),TY=n(sDe,"A",{href:!0});var aPt=s(TY);RAr=r(aPt,"TFCamembertForMaskedLM"),aPt.forEach(t),PAr=r(sDe," (CamemBERT model)"),sDe.forEach(t),BAr=i(me),FE=n(me,"LI",{});var lDe=s(FE);DMe=n(lDe,"STRONG",{});var nPt=s(DMe);NAr=r(nPt,"convbert"),nPt.forEach(t),IAr=r(lDe," \u2014 "),MY=n(lDe,"A",{href:!0});var sPt=s(MY);qAr=r(sPt,"TFConvBertForMaskedLM"),sPt.forEach(t),jAr=r(lDe," (ConvBERT model)"),lDe.forEach(t),DAr=i(me),TE=n(me,"LI",{});var iDe=s(TE);GMe=n(iDe,"STRONG",{});var lPt=s(GMe);GAr=r(lPt,"deberta"),lPt.forEach(t),OAr=r(iDe," \u2014 "),EY=n(iDe,"A",{href:!0});var iPt=s(EY);VAr=r(iPt,"TFDebertaForMaskedLM"),iPt.forEach(t),XAr=r(iDe," (DeBERTa model)"),iDe.forEach(t),zAr=i(me),ME=n(me,"LI",{});var dDe=s(ME);OMe=n(dDe,"STRONG",{});var dPt=s(OMe);QAr=r(dPt,"deberta-v2"),dPt.forEach(t),WAr=r(dDe," \u2014 "),CY=n(dDe,"A",{href:!0});var cPt=s(CY);HAr=r(cPt,"TFDebertaV2ForMaskedLM"),cPt.forEach(t),UAr=r(dDe," (DeBERTa-v2 model)"),dDe.forEach(t),JAr=i(me),EE=n(me,"LI",{});var cDe=s(EE);VMe=n(cDe,"STRONG",{});var fPt=s(VMe);YAr=r(fPt,"distilbert"),fPt.forEach(t),KAr=r(cDe," \u2014 "),wY=n(cDe,"A",{href:!0});var mPt=s(wY);ZAr=r(mPt,"TFDistilBertForMaskedLM"),mPt.forEach(t),e6r=r(cDe," (DistilBERT model)"),cDe.forEach(t),o6r=i(me),CE=n(me,"LI",{});var fDe=s(CE);XMe=n(fDe,"STRONG",{});var gPt=s(XMe);r6r=r(gPt,"electra"),gPt.forEach(t),t6r=r(fDe," \u2014 "),AY=n(fDe,"A",{href:!0});var hPt=s(AY);a6r=r(hPt,"TFElectraForMaskedLM"),hPt.forEach(t),n6r=r(fDe," (ELECTRA model)"),fDe.forEach(t),s6r=i(me),wE=n(me,"LI",{});var mDe=s(wE);zMe=n(mDe,"STRONG",{});var pPt=s(zMe);l6r=r(pPt,"flaubert"),pPt.forEach(t),i6r=r(mDe," \u2014 "),LY=n(mDe,"A",{href:!0});var _Pt=s(LY);d6r=r(_Pt,"TFFlaubertWithLMHeadModel"),_Pt.forEach(t),c6r=r(mDe," (FlauBERT model)"),mDe.forEach(t),f6r=i(me),AE=n(me,"LI",{});var gDe=s(AE);QMe=n(gDe,"STRONG",{});var uPt=s(QMe);m6r=r(uPt,"funnel"),uPt.forEach(t),g6r=r(gDe," \u2014 "),yY=n(gDe,"A",{href:!0});var bPt=s(yY);h6r=r(bPt,"TFFunnelForMaskedLM"),bPt.forEach(t),p6r=r(gDe," (Funnel Transformer model)"),gDe.forEach(t),_6r=i(me),LE=n(me,"LI",{});var hDe=s(LE);WMe=n(hDe,"STRONG",{});var vPt=s(WMe);u6r=r(vPt,"layoutlm"),vPt.forEach(t),b6r=r(hDe," \u2014 "),xY=n(hDe,"A",{href:!0});var FPt=s(xY);v6r=r(FPt,"TFLayoutLMForMaskedLM"),FPt.forEach(t),F6r=r(hDe," (LayoutLM model)"),hDe.forEach(t),T6r=i(me),yE=n(me,"LI",{});var pDe=s(yE);HMe=n(pDe,"STRONG",{});var TPt=s(HMe);M6r=r(TPt,"longformer"),TPt.forEach(t),E6r=r(pDe," \u2014 "),$Y=n(pDe,"A",{href:!0});var MPt=s($Y);C6r=r(MPt,"TFLongformerForMaskedLM"),MPt.forEach(t),w6r=r(pDe," (Longformer model)"),pDe.forEach(t),A6r=i(me),xE=n(me,"LI",{});var _De=s(xE);UMe=n(_De,"STRONG",{});var EPt=s(UMe);L6r=r(EPt,"mobilebert"),EPt.forEach(t),y6r=r(_De," \u2014 "),kY=n(_De,"A",{href:!0});var CPt=s(kY);x6r=r(CPt,"TFMobileBertForMaskedLM"),CPt.forEach(t),$6r=r(_De," (MobileBERT model)"),_De.forEach(t),k6r=i(me),$E=n(me,"LI",{});var uDe=s($E);JMe=n(uDe,"STRONG",{});var wPt=s(JMe);S6r=r(wPt,"mpnet"),wPt.forEach(t),R6r=r(uDe," \u2014 "),SY=n(uDe,"A",{href:!0});var APt=s(SY);P6r=r(APt,"TFMPNetForMaskedLM"),APt.forEach(t),B6r=r(uDe," (MPNet model)"),uDe.forEach(t),N6r=i(me),kE=n(me,"LI",{});var bDe=s(kE);YMe=n(bDe,"STRONG",{});var LPt=s(YMe);I6r=r(LPt,"rembert"),LPt.forEach(t),q6r=r(bDe," \u2014 "),RY=n(bDe,"A",{href:!0});var yPt=s(RY);j6r=r(yPt,"TFRemBertForMaskedLM"),yPt.forEach(t),D6r=r(bDe," (RemBERT model)"),bDe.forEach(t),G6r=i(me),SE=n(me,"LI",{});var vDe=s(SE);KMe=n(vDe,"STRONG",{});var xPt=s(KMe);O6r=r(xPt,"roberta"),xPt.forEach(t),V6r=r(vDe," \u2014 "),PY=n(vDe,"A",{href:!0});var $Pt=s(PY);X6r=r($Pt,"TFRobertaForMaskedLM"),$Pt.forEach(t),z6r=r(vDe," (RoBERTa model)"),vDe.forEach(t),Q6r=i(me),RE=n(me,"LI",{});var FDe=s(RE);ZMe=n(FDe,"STRONG",{});var kPt=s(ZMe);W6r=r(kPt,"roformer"),kPt.forEach(t),H6r=r(FDe," \u2014 "),BY=n(FDe,"A",{href:!0});var SPt=s(BY);U6r=r(SPt,"TFRoFormerForMaskedLM"),SPt.forEach(t),J6r=r(FDe," (RoFormer model)"),FDe.forEach(t),Y6r=i(me),PE=n(me,"LI",{});var TDe=s(PE);e4e=n(TDe,"STRONG",{});var RPt=s(e4e);K6r=r(RPt,"tapas"),RPt.forEach(t),Z6r=r(TDe," \u2014 "),NY=n(TDe,"A",{href:!0});var PPt=s(NY);e7r=r(PPt,"TFTapasForMaskedLM"),PPt.forEach(t),o7r=r(TDe," (TAPAS model)"),TDe.forEach(t),r7r=i(me),BE=n(me,"LI",{});var MDe=s(BE);o4e=n(MDe,"STRONG",{});var BPt=s(o4e);t7r=r(BPt,"xlm"),BPt.forEach(t),a7r=r(MDe," \u2014 "),IY=n(MDe,"A",{href:!0});var NPt=s(IY);n7r=r(NPt,"TFXLMWithLMHeadModel"),NPt.forEach(t),s7r=r(MDe," (XLM model)"),MDe.forEach(t),l7r=i(me),NE=n(me,"LI",{});var EDe=s(NE);r4e=n(EDe,"STRONG",{});var IPt=s(r4e);i7r=r(IPt,"xlm-roberta"),IPt.forEach(t),d7r=r(EDe," \u2014 "),qY=n(EDe,"A",{href:!0});var qPt=s(qY);c7r=r(qPt,"TFXLMRobertaForMaskedLM"),qPt.forEach(t),f7r=r(EDe," (XLM-RoBERTa model)"),EDe.forEach(t),me.forEach(t),m7r=i(jl),T(IE.$$.fragment,jl),jl.forEach(t),ql.forEach(t),Bze=i(f),Mc=n(f,"H2",{class:!0});var VWe=s(Mc);qE=n(VWe,"A",{id:!0,class:!0,href:!0});var jPt=s(qE);t4e=n(jPt,"SPAN",{});var DPt=s(t4e);T(Fx.$$.fragment,DPt),DPt.forEach(t),jPt.forEach(t),g7r=i(VWe),a4e=n(VWe,"SPAN",{});var GPt=s(a4e);h7r=r(GPt,"TFAutoModelForSeq2SeqLM"),GPt.forEach(t),VWe.forEach(t),Nze=i(f),sr=n(f,"DIV",{class:!0});var Dl=s(sr);T(Tx.$$.fragment,Dl),p7r=i(Dl),Ec=n(Dl,"P",{});var Hte=s(Ec);_7r=r(Hte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),jY=n(Hte,"A",{href:!0});var OPt=s(jY);u7r=r(OPt,"from_pretrained()"),OPt.forEach(t),b7r=r(Hte," class method or the "),DY=n(Hte,"A",{href:!0});var VPt=s(DY);v7r=r(VPt,"from_config()"),VPt.forEach(t),F7r=r(Hte,` class
method.`),Hte.forEach(t),T7r=i(Dl),Mx=n(Dl,"P",{});var XWe=s(Mx);M7r=r(XWe,"This class cannot be instantiated directly using "),n4e=n(XWe,"CODE",{});var XPt=s(n4e);E7r=r(XPt,"__init__()"),XPt.forEach(t),C7r=r(XWe," (throws an error)."),XWe.forEach(t),w7r=i(Dl),qt=n(Dl,"DIV",{class:!0});var u7=s(qt);T(Ex.$$.fragment,u7),A7r=i(u7),s4e=n(u7,"P",{});var zPt=s(s4e);L7r=r(zPt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),zPt.forEach(t),y7r=i(u7),Cc=n(u7,"P",{});var Ute=s(Cc);x7r=r(Ute,`Note:
Loading a model from its configuration file does `),l4e=n(Ute,"STRONG",{});var QPt=s(l4e);$7r=r(QPt,"not"),QPt.forEach(t),k7r=r(Ute,` load the model weights. It only affects the
model\u2019s configuration. Use `),GY=n(Ute,"A",{href:!0});var WPt=s(GY);S7r=r(WPt,"from_pretrained()"),WPt.forEach(t),R7r=r(Ute," to load the model weights."),Ute.forEach(t),P7r=i(u7),T(jE.$$.fragment,u7),u7.forEach(t),B7r=i(Dl),Pr=n(Dl,"DIV",{class:!0});var Gl=s(Pr);T(Cx.$$.fragment,Gl),N7r=i(Gl),i4e=n(Gl,"P",{});var HPt=s(i4e);I7r=r(HPt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),HPt.forEach(t),q7r=i(Gl),mn=n(Gl,"P",{});var b7=s(mn);j7r=r(b7,"The model class to instantiate is selected based on the "),d4e=n(b7,"CODE",{});var UPt=s(d4e);D7r=r(UPt,"model_type"),UPt.forEach(t),G7r=r(b7,` property of the config object (either
passed as an argument or loaded from `),c4e=n(b7,"CODE",{});var JPt=s(c4e);O7r=r(JPt,"pretrained_model_name_or_path"),JPt.forEach(t),V7r=r(b7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f4e=n(b7,"CODE",{});var YPt=s(f4e);X7r=r(YPt,"pretrained_model_name_or_path"),YPt.forEach(t),z7r=r(b7,":"),b7.forEach(t),Q7r=i(Gl),xe=n(Gl,"UL",{});var Ie=s(xe);DE=n(Ie,"LI",{});var CDe=s(DE);m4e=n(CDe,"STRONG",{});var KPt=s(m4e);W7r=r(KPt,"bart"),KPt.forEach(t),H7r=r(CDe," \u2014 "),OY=n(CDe,"A",{href:!0});var ZPt=s(OY);U7r=r(ZPt,"TFBartForConditionalGeneration"),ZPt.forEach(t),J7r=r(CDe," (BART model)"),CDe.forEach(t),Y7r=i(Ie),GE=n(Ie,"LI",{});var wDe=s(GE);g4e=n(wDe,"STRONG",{});var eBt=s(g4e);K7r=r(eBt,"blenderbot"),eBt.forEach(t),Z7r=r(wDe," \u2014 "),VY=n(wDe,"A",{href:!0});var oBt=s(VY);eLr=r(oBt,"TFBlenderbotForConditionalGeneration"),oBt.forEach(t),oLr=r(wDe," (Blenderbot model)"),wDe.forEach(t),rLr=i(Ie),OE=n(Ie,"LI",{});var ADe=s(OE);h4e=n(ADe,"STRONG",{});var rBt=s(h4e);tLr=r(rBt,"blenderbot-small"),rBt.forEach(t),aLr=r(ADe," \u2014 "),XY=n(ADe,"A",{href:!0});var tBt=s(XY);nLr=r(tBt,"TFBlenderbotSmallForConditionalGeneration"),tBt.forEach(t),sLr=r(ADe," (BlenderbotSmall model)"),ADe.forEach(t),lLr=i(Ie),VE=n(Ie,"LI",{});var LDe=s(VE);p4e=n(LDe,"STRONG",{});var aBt=s(p4e);iLr=r(aBt,"encoder-decoder"),aBt.forEach(t),dLr=r(LDe," \u2014 "),zY=n(LDe,"A",{href:!0});var nBt=s(zY);cLr=r(nBt,"TFEncoderDecoderModel"),nBt.forEach(t),fLr=r(LDe," (Encoder decoder model)"),LDe.forEach(t),mLr=i(Ie),XE=n(Ie,"LI",{});var yDe=s(XE);_4e=n(yDe,"STRONG",{});var sBt=s(_4e);gLr=r(sBt,"led"),sBt.forEach(t),hLr=r(yDe," \u2014 "),QY=n(yDe,"A",{href:!0});var lBt=s(QY);pLr=r(lBt,"TFLEDForConditionalGeneration"),lBt.forEach(t),_Lr=r(yDe," (LED model)"),yDe.forEach(t),uLr=i(Ie),zE=n(Ie,"LI",{});var xDe=s(zE);u4e=n(xDe,"STRONG",{});var iBt=s(u4e);bLr=r(iBt,"marian"),iBt.forEach(t),vLr=r(xDe," \u2014 "),WY=n(xDe,"A",{href:!0});var dBt=s(WY);FLr=r(dBt,"TFMarianMTModel"),dBt.forEach(t),TLr=r(xDe," (Marian model)"),xDe.forEach(t),MLr=i(Ie),QE=n(Ie,"LI",{});var $De=s(QE);b4e=n($De,"STRONG",{});var cBt=s(b4e);ELr=r(cBt,"mbart"),cBt.forEach(t),CLr=r($De," \u2014 "),HY=n($De,"A",{href:!0});var fBt=s(HY);wLr=r(fBt,"TFMBartForConditionalGeneration"),fBt.forEach(t),ALr=r($De," (mBART model)"),$De.forEach(t),LLr=i(Ie),WE=n(Ie,"LI",{});var kDe=s(WE);v4e=n(kDe,"STRONG",{});var mBt=s(v4e);yLr=r(mBt,"mt5"),mBt.forEach(t),xLr=r(kDe," \u2014 "),UY=n(kDe,"A",{href:!0});var gBt=s(UY);$Lr=r(gBt,"TFMT5ForConditionalGeneration"),gBt.forEach(t),kLr=r(kDe," (MT5 model)"),kDe.forEach(t),SLr=i(Ie),HE=n(Ie,"LI",{});var SDe=s(HE);F4e=n(SDe,"STRONG",{});var hBt=s(F4e);RLr=r(hBt,"pegasus"),hBt.forEach(t),PLr=r(SDe," \u2014 "),JY=n(SDe,"A",{href:!0});var pBt=s(JY);BLr=r(pBt,"TFPegasusForConditionalGeneration"),pBt.forEach(t),NLr=r(SDe," (Pegasus model)"),SDe.forEach(t),ILr=i(Ie),UE=n(Ie,"LI",{});var RDe=s(UE);T4e=n(RDe,"STRONG",{});var _Bt=s(T4e);qLr=r(_Bt,"t5"),_Bt.forEach(t),jLr=r(RDe," \u2014 "),YY=n(RDe,"A",{href:!0});var uBt=s(YY);DLr=r(uBt,"TFT5ForConditionalGeneration"),uBt.forEach(t),GLr=r(RDe," (T5 model)"),RDe.forEach(t),Ie.forEach(t),OLr=i(Gl),T(JE.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),Ize=i(f),wc=n(f,"H2",{class:!0});var zWe=s(wc);YE=n(zWe,"A",{id:!0,class:!0,href:!0});var bBt=s(YE);M4e=n(bBt,"SPAN",{});var vBt=s(M4e);T(wx.$$.fragment,vBt),vBt.forEach(t),bBt.forEach(t),VLr=i(zWe),E4e=n(zWe,"SPAN",{});var FBt=s(E4e);XLr=r(FBt,"TFAutoModelForSequenceClassification"),FBt.forEach(t),zWe.forEach(t),qze=i(f),lr=n(f,"DIV",{class:!0});var Ol=s(lr);T(Ax.$$.fragment,Ol),zLr=i(Ol),Ac=n(Ol,"P",{});var Jte=s(Ac);QLr=r(Jte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),KY=n(Jte,"A",{href:!0});var TBt=s(KY);WLr=r(TBt,"from_pretrained()"),TBt.forEach(t),HLr=r(Jte," class method or the "),ZY=n(Jte,"A",{href:!0});var MBt=s(ZY);ULr=r(MBt,"from_config()"),MBt.forEach(t),JLr=r(Jte,` class
method.`),Jte.forEach(t),YLr=i(Ol),Lx=n(Ol,"P",{});var QWe=s(Lx);KLr=r(QWe,"This class cannot be instantiated directly using "),C4e=n(QWe,"CODE",{});var EBt=s(C4e);ZLr=r(EBt,"__init__()"),EBt.forEach(t),eyr=r(QWe," (throws an error)."),QWe.forEach(t),oyr=i(Ol),jt=n(Ol,"DIV",{class:!0});var v7=s(jt);T(yx.$$.fragment,v7),ryr=i(v7),w4e=n(v7,"P",{});var CBt=s(w4e);tyr=r(CBt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),CBt.forEach(t),ayr=i(v7),Lc=n(v7,"P",{});var Yte=s(Lc);nyr=r(Yte,`Note:
Loading a model from its configuration file does `),A4e=n(Yte,"STRONG",{});var wBt=s(A4e);syr=r(wBt,"not"),wBt.forEach(t),lyr=r(Yte,` load the model weights. It only affects the
model\u2019s configuration. Use `),eK=n(Yte,"A",{href:!0});var ABt=s(eK);iyr=r(ABt,"from_pretrained()"),ABt.forEach(t),dyr=r(Yte," to load the model weights."),Yte.forEach(t),cyr=i(v7),T(KE.$$.fragment,v7),v7.forEach(t),fyr=i(Ol),Br=n(Ol,"DIV",{class:!0});var Vl=s(Br);T(xx.$$.fragment,Vl),myr=i(Vl),L4e=n(Vl,"P",{});var LBt=s(L4e);gyr=r(LBt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),LBt.forEach(t),hyr=i(Vl),gn=n(Vl,"P",{});var F7=s(gn);pyr=r(F7,"The model class to instantiate is selected based on the "),y4e=n(F7,"CODE",{});var yBt=s(y4e);_yr=r(yBt,"model_type"),yBt.forEach(t),uyr=r(F7,` property of the config object (either
passed as an argument or loaded from `),x4e=n(F7,"CODE",{});var xBt=s(x4e);byr=r(xBt,"pretrained_model_name_or_path"),xBt.forEach(t),vyr=r(F7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$4e=n(F7,"CODE",{});var $Bt=s($4e);Fyr=r($Bt,"pretrained_model_name_or_path"),$Bt.forEach(t),Tyr=r(F7,":"),F7.forEach(t),Myr=i(Vl),ae=n(Vl,"UL",{});var ne=s(ae);ZE=n(ne,"LI",{});var PDe=s(ZE);k4e=n(PDe,"STRONG",{});var kBt=s(k4e);Eyr=r(kBt,"albert"),kBt.forEach(t),Cyr=r(PDe," \u2014 "),oK=n(PDe,"A",{href:!0});var SBt=s(oK);wyr=r(SBt,"TFAlbertForSequenceClassification"),SBt.forEach(t),Ayr=r(PDe," (ALBERT model)"),PDe.forEach(t),Lyr=i(ne),eC=n(ne,"LI",{});var BDe=s(eC);S4e=n(BDe,"STRONG",{});var RBt=s(S4e);yyr=r(RBt,"bert"),RBt.forEach(t),xyr=r(BDe," \u2014 "),rK=n(BDe,"A",{href:!0});var PBt=s(rK);$yr=r(PBt,"TFBertForSequenceClassification"),PBt.forEach(t),kyr=r(BDe," (BERT model)"),BDe.forEach(t),Syr=i(ne),oC=n(ne,"LI",{});var NDe=s(oC);R4e=n(NDe,"STRONG",{});var BBt=s(R4e);Ryr=r(BBt,"camembert"),BBt.forEach(t),Pyr=r(NDe," \u2014 "),tK=n(NDe,"A",{href:!0});var NBt=s(tK);Byr=r(NBt,"TFCamembertForSequenceClassification"),NBt.forEach(t),Nyr=r(NDe," (CamemBERT model)"),NDe.forEach(t),Iyr=i(ne),rC=n(ne,"LI",{});var IDe=s(rC);P4e=n(IDe,"STRONG",{});var IBt=s(P4e);qyr=r(IBt,"convbert"),IBt.forEach(t),jyr=r(IDe," \u2014 "),aK=n(IDe,"A",{href:!0});var qBt=s(aK);Dyr=r(qBt,"TFConvBertForSequenceClassification"),qBt.forEach(t),Gyr=r(IDe," (ConvBERT model)"),IDe.forEach(t),Oyr=i(ne),tC=n(ne,"LI",{});var qDe=s(tC);B4e=n(qDe,"STRONG",{});var jBt=s(B4e);Vyr=r(jBt,"ctrl"),jBt.forEach(t),Xyr=r(qDe," \u2014 "),nK=n(qDe,"A",{href:!0});var DBt=s(nK);zyr=r(DBt,"TFCTRLForSequenceClassification"),DBt.forEach(t),Qyr=r(qDe," (CTRL model)"),qDe.forEach(t),Wyr=i(ne),aC=n(ne,"LI",{});var jDe=s(aC);N4e=n(jDe,"STRONG",{});var GBt=s(N4e);Hyr=r(GBt,"deberta"),GBt.forEach(t),Uyr=r(jDe," \u2014 "),sK=n(jDe,"A",{href:!0});var OBt=s(sK);Jyr=r(OBt,"TFDebertaForSequenceClassification"),OBt.forEach(t),Yyr=r(jDe," (DeBERTa model)"),jDe.forEach(t),Kyr=i(ne),nC=n(ne,"LI",{});var DDe=s(nC);I4e=n(DDe,"STRONG",{});var VBt=s(I4e);Zyr=r(VBt,"deberta-v2"),VBt.forEach(t),e9r=r(DDe," \u2014 "),lK=n(DDe,"A",{href:!0});var XBt=s(lK);o9r=r(XBt,"TFDebertaV2ForSequenceClassification"),XBt.forEach(t),r9r=r(DDe," (DeBERTa-v2 model)"),DDe.forEach(t),t9r=i(ne),sC=n(ne,"LI",{});var GDe=s(sC);q4e=n(GDe,"STRONG",{});var zBt=s(q4e);a9r=r(zBt,"distilbert"),zBt.forEach(t),n9r=r(GDe," \u2014 "),iK=n(GDe,"A",{href:!0});var QBt=s(iK);s9r=r(QBt,"TFDistilBertForSequenceClassification"),QBt.forEach(t),l9r=r(GDe," (DistilBERT model)"),GDe.forEach(t),i9r=i(ne),lC=n(ne,"LI",{});var ODe=s(lC);j4e=n(ODe,"STRONG",{});var WBt=s(j4e);d9r=r(WBt,"electra"),WBt.forEach(t),c9r=r(ODe," \u2014 "),dK=n(ODe,"A",{href:!0});var HBt=s(dK);f9r=r(HBt,"TFElectraForSequenceClassification"),HBt.forEach(t),m9r=r(ODe," (ELECTRA model)"),ODe.forEach(t),g9r=i(ne),iC=n(ne,"LI",{});var VDe=s(iC);D4e=n(VDe,"STRONG",{});var UBt=s(D4e);h9r=r(UBt,"flaubert"),UBt.forEach(t),p9r=r(VDe," \u2014 "),cK=n(VDe,"A",{href:!0});var JBt=s(cK);_9r=r(JBt,"TFFlaubertForSequenceClassification"),JBt.forEach(t),u9r=r(VDe," (FlauBERT model)"),VDe.forEach(t),b9r=i(ne),dC=n(ne,"LI",{});var XDe=s(dC);G4e=n(XDe,"STRONG",{});var YBt=s(G4e);v9r=r(YBt,"funnel"),YBt.forEach(t),F9r=r(XDe," \u2014 "),fK=n(XDe,"A",{href:!0});var KBt=s(fK);T9r=r(KBt,"TFFunnelForSequenceClassification"),KBt.forEach(t),M9r=r(XDe," (Funnel Transformer model)"),XDe.forEach(t),E9r=i(ne),cC=n(ne,"LI",{});var zDe=s(cC);O4e=n(zDe,"STRONG",{});var ZBt=s(O4e);C9r=r(ZBt,"gpt2"),ZBt.forEach(t),w9r=r(zDe," \u2014 "),mK=n(zDe,"A",{href:!0});var eNt=s(mK);A9r=r(eNt,"TFGPT2ForSequenceClassification"),eNt.forEach(t),L9r=r(zDe," (OpenAI GPT-2 model)"),zDe.forEach(t),y9r=i(ne),fC=n(ne,"LI",{});var QDe=s(fC);V4e=n(QDe,"STRONG",{});var oNt=s(V4e);x9r=r(oNt,"gptj"),oNt.forEach(t),$9r=r(QDe," \u2014 "),gK=n(QDe,"A",{href:!0});var rNt=s(gK);k9r=r(rNt,"TFGPTJForSequenceClassification"),rNt.forEach(t),S9r=r(QDe," (GPT-J model)"),QDe.forEach(t),R9r=i(ne),mC=n(ne,"LI",{});var WDe=s(mC);X4e=n(WDe,"STRONG",{});var tNt=s(X4e);P9r=r(tNt,"layoutlm"),tNt.forEach(t),B9r=r(WDe," \u2014 "),hK=n(WDe,"A",{href:!0});var aNt=s(hK);N9r=r(aNt,"TFLayoutLMForSequenceClassification"),aNt.forEach(t),I9r=r(WDe," (LayoutLM model)"),WDe.forEach(t),q9r=i(ne),gC=n(ne,"LI",{});var HDe=s(gC);z4e=n(HDe,"STRONG",{});var nNt=s(z4e);j9r=r(nNt,"longformer"),nNt.forEach(t),D9r=r(HDe," \u2014 "),pK=n(HDe,"A",{href:!0});var sNt=s(pK);G9r=r(sNt,"TFLongformerForSequenceClassification"),sNt.forEach(t),O9r=r(HDe," (Longformer model)"),HDe.forEach(t),V9r=i(ne),hC=n(ne,"LI",{});var UDe=s(hC);Q4e=n(UDe,"STRONG",{});var lNt=s(Q4e);X9r=r(lNt,"mobilebert"),lNt.forEach(t),z9r=r(UDe," \u2014 "),_K=n(UDe,"A",{href:!0});var iNt=s(_K);Q9r=r(iNt,"TFMobileBertForSequenceClassification"),iNt.forEach(t),W9r=r(UDe," (MobileBERT model)"),UDe.forEach(t),H9r=i(ne),pC=n(ne,"LI",{});var JDe=s(pC);W4e=n(JDe,"STRONG",{});var dNt=s(W4e);U9r=r(dNt,"mpnet"),dNt.forEach(t),J9r=r(JDe," \u2014 "),uK=n(JDe,"A",{href:!0});var cNt=s(uK);Y9r=r(cNt,"TFMPNetForSequenceClassification"),cNt.forEach(t),K9r=r(JDe," (MPNet model)"),JDe.forEach(t),Z9r=i(ne),_C=n(ne,"LI",{});var YDe=s(_C);H4e=n(YDe,"STRONG",{});var fNt=s(H4e);exr=r(fNt,"openai-gpt"),fNt.forEach(t),oxr=r(YDe," \u2014 "),bK=n(YDe,"A",{href:!0});var mNt=s(bK);rxr=r(mNt,"TFOpenAIGPTForSequenceClassification"),mNt.forEach(t),txr=r(YDe," (OpenAI GPT model)"),YDe.forEach(t),axr=i(ne),uC=n(ne,"LI",{});var KDe=s(uC);U4e=n(KDe,"STRONG",{});var gNt=s(U4e);nxr=r(gNt,"rembert"),gNt.forEach(t),sxr=r(KDe," \u2014 "),vK=n(KDe,"A",{href:!0});var hNt=s(vK);lxr=r(hNt,"TFRemBertForSequenceClassification"),hNt.forEach(t),ixr=r(KDe," (RemBERT model)"),KDe.forEach(t),dxr=i(ne),bC=n(ne,"LI",{});var ZDe=s(bC);J4e=n(ZDe,"STRONG",{});var pNt=s(J4e);cxr=r(pNt,"roberta"),pNt.forEach(t),fxr=r(ZDe," \u2014 "),FK=n(ZDe,"A",{href:!0});var _Nt=s(FK);mxr=r(_Nt,"TFRobertaForSequenceClassification"),_Nt.forEach(t),gxr=r(ZDe," (RoBERTa model)"),ZDe.forEach(t),hxr=i(ne),vC=n(ne,"LI",{});var eGe=s(vC);Y4e=n(eGe,"STRONG",{});var uNt=s(Y4e);pxr=r(uNt,"roformer"),uNt.forEach(t),_xr=r(eGe," \u2014 "),TK=n(eGe,"A",{href:!0});var bNt=s(TK);uxr=r(bNt,"TFRoFormerForSequenceClassification"),bNt.forEach(t),bxr=r(eGe," (RoFormer model)"),eGe.forEach(t),vxr=i(ne),FC=n(ne,"LI",{});var oGe=s(FC);K4e=n(oGe,"STRONG",{});var vNt=s(K4e);Fxr=r(vNt,"tapas"),vNt.forEach(t),Txr=r(oGe," \u2014 "),MK=n(oGe,"A",{href:!0});var FNt=s(MK);Mxr=r(FNt,"TFTapasForSequenceClassification"),FNt.forEach(t),Exr=r(oGe," (TAPAS model)"),oGe.forEach(t),Cxr=i(ne),TC=n(ne,"LI",{});var rGe=s(TC);Z4e=n(rGe,"STRONG",{});var TNt=s(Z4e);wxr=r(TNt,"transfo-xl"),TNt.forEach(t),Axr=r(rGe," \u2014 "),EK=n(rGe,"A",{href:!0});var MNt=s(EK);Lxr=r(MNt,"TFTransfoXLForSequenceClassification"),MNt.forEach(t),yxr=r(rGe," (Transformer-XL model)"),rGe.forEach(t),xxr=i(ne),MC=n(ne,"LI",{});var tGe=s(MC);eEe=n(tGe,"STRONG",{});var ENt=s(eEe);$xr=r(ENt,"xlm"),ENt.forEach(t),kxr=r(tGe," \u2014 "),CK=n(tGe,"A",{href:!0});var CNt=s(CK);Sxr=r(CNt,"TFXLMForSequenceClassification"),CNt.forEach(t),Rxr=r(tGe," (XLM model)"),tGe.forEach(t),Pxr=i(ne),EC=n(ne,"LI",{});var aGe=s(EC);oEe=n(aGe,"STRONG",{});var wNt=s(oEe);Bxr=r(wNt,"xlm-roberta"),wNt.forEach(t),Nxr=r(aGe," \u2014 "),wK=n(aGe,"A",{href:!0});var ANt=s(wK);Ixr=r(ANt,"TFXLMRobertaForSequenceClassification"),ANt.forEach(t),qxr=r(aGe," (XLM-RoBERTa model)"),aGe.forEach(t),jxr=i(ne),CC=n(ne,"LI",{});var nGe=s(CC);rEe=n(nGe,"STRONG",{});var LNt=s(rEe);Dxr=r(LNt,"xlnet"),LNt.forEach(t),Gxr=r(nGe," \u2014 "),AK=n(nGe,"A",{href:!0});var yNt=s(AK);Oxr=r(yNt,"TFXLNetForSequenceClassification"),yNt.forEach(t),Vxr=r(nGe," (XLNet model)"),nGe.forEach(t),ne.forEach(t),Xxr=i(Vl),T(wC.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),jze=i(f),yc=n(f,"H2",{class:!0});var WWe=s(yc);AC=n(WWe,"A",{id:!0,class:!0,href:!0});var xNt=s(AC);tEe=n(xNt,"SPAN",{});var $Nt=s(tEe);T($x.$$.fragment,$Nt),$Nt.forEach(t),xNt.forEach(t),zxr=i(WWe),aEe=n(WWe,"SPAN",{});var kNt=s(aEe);Qxr=r(kNt,"TFAutoModelForMultipleChoice"),kNt.forEach(t),WWe.forEach(t),Dze=i(f),ir=n(f,"DIV",{class:!0});var Xl=s(ir);T(kx.$$.fragment,Xl),Wxr=i(Xl),xc=n(Xl,"P",{});var Kte=s(xc);Hxr=r(Kte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),LK=n(Kte,"A",{href:!0});var SNt=s(LK);Uxr=r(SNt,"from_pretrained()"),SNt.forEach(t),Jxr=r(Kte," class method or the "),yK=n(Kte,"A",{href:!0});var RNt=s(yK);Yxr=r(RNt,"from_config()"),RNt.forEach(t),Kxr=r(Kte,` class
method.`),Kte.forEach(t),Zxr=i(Xl),Sx=n(Xl,"P",{});var HWe=s(Sx);e$r=r(HWe,"This class cannot be instantiated directly using "),nEe=n(HWe,"CODE",{});var PNt=s(nEe);o$r=r(PNt,"__init__()"),PNt.forEach(t),r$r=r(HWe," (throws an error)."),HWe.forEach(t),t$r=i(Xl),Dt=n(Xl,"DIV",{class:!0});var T7=s(Dt);T(Rx.$$.fragment,T7),a$r=i(T7),sEe=n(T7,"P",{});var BNt=s(sEe);n$r=r(BNt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),BNt.forEach(t),s$r=i(T7),$c=n(T7,"P",{});var Zte=s($c);l$r=r(Zte,`Note:
Loading a model from its configuration file does `),lEe=n(Zte,"STRONG",{});var NNt=s(lEe);i$r=r(NNt,"not"),NNt.forEach(t),d$r=r(Zte,` load the model weights. It only affects the
model\u2019s configuration. Use `),xK=n(Zte,"A",{href:!0});var INt=s(xK);c$r=r(INt,"from_pretrained()"),INt.forEach(t),f$r=r(Zte," to load the model weights."),Zte.forEach(t),m$r=i(T7),T(LC.$$.fragment,T7),T7.forEach(t),g$r=i(Xl),Nr=n(Xl,"DIV",{class:!0});var zl=s(Nr);T(Px.$$.fragment,zl),h$r=i(zl),iEe=n(zl,"P",{});var qNt=s(iEe);p$r=r(qNt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),qNt.forEach(t),_$r=i(zl),hn=n(zl,"P",{});var M7=s(hn);u$r=r(M7,"The model class to instantiate is selected based on the "),dEe=n(M7,"CODE",{});var jNt=s(dEe);b$r=r(jNt,"model_type"),jNt.forEach(t),v$r=r(M7,` property of the config object (either
passed as an argument or loaded from `),cEe=n(M7,"CODE",{});var DNt=s(cEe);F$r=r(DNt,"pretrained_model_name_or_path"),DNt.forEach(t),T$r=r(M7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fEe=n(M7,"CODE",{});var GNt=s(fEe);M$r=r(GNt,"pretrained_model_name_or_path"),GNt.forEach(t),E$r=r(M7,":"),M7.forEach(t),C$r=i(zl),ue=n(zl,"UL",{});var Fe=s(ue);yC=n(Fe,"LI",{});var sGe=s(yC);mEe=n(sGe,"STRONG",{});var ONt=s(mEe);w$r=r(ONt,"albert"),ONt.forEach(t),A$r=r(sGe," \u2014 "),$K=n(sGe,"A",{href:!0});var VNt=s($K);L$r=r(VNt,"TFAlbertForMultipleChoice"),VNt.forEach(t),y$r=r(sGe," (ALBERT model)"),sGe.forEach(t),x$r=i(Fe),xC=n(Fe,"LI",{});var lGe=s(xC);gEe=n(lGe,"STRONG",{});var XNt=s(gEe);$$r=r(XNt,"bert"),XNt.forEach(t),k$r=r(lGe," \u2014 "),kK=n(lGe,"A",{href:!0});var zNt=s(kK);S$r=r(zNt,"TFBertForMultipleChoice"),zNt.forEach(t),R$r=r(lGe," (BERT model)"),lGe.forEach(t),P$r=i(Fe),$C=n(Fe,"LI",{});var iGe=s($C);hEe=n(iGe,"STRONG",{});var QNt=s(hEe);B$r=r(QNt,"camembert"),QNt.forEach(t),N$r=r(iGe," \u2014 "),SK=n(iGe,"A",{href:!0});var WNt=s(SK);I$r=r(WNt,"TFCamembertForMultipleChoice"),WNt.forEach(t),q$r=r(iGe," (CamemBERT model)"),iGe.forEach(t),j$r=i(Fe),kC=n(Fe,"LI",{});var dGe=s(kC);pEe=n(dGe,"STRONG",{});var HNt=s(pEe);D$r=r(HNt,"convbert"),HNt.forEach(t),G$r=r(dGe," \u2014 "),RK=n(dGe,"A",{href:!0});var UNt=s(RK);O$r=r(UNt,"TFConvBertForMultipleChoice"),UNt.forEach(t),V$r=r(dGe," (ConvBERT model)"),dGe.forEach(t),X$r=i(Fe),SC=n(Fe,"LI",{});var cGe=s(SC);_Ee=n(cGe,"STRONG",{});var JNt=s(_Ee);z$r=r(JNt,"distilbert"),JNt.forEach(t),Q$r=r(cGe," \u2014 "),PK=n(cGe,"A",{href:!0});var YNt=s(PK);W$r=r(YNt,"TFDistilBertForMultipleChoice"),YNt.forEach(t),H$r=r(cGe," (DistilBERT model)"),cGe.forEach(t),U$r=i(Fe),RC=n(Fe,"LI",{});var fGe=s(RC);uEe=n(fGe,"STRONG",{});var KNt=s(uEe);J$r=r(KNt,"electra"),KNt.forEach(t),Y$r=r(fGe," \u2014 "),BK=n(fGe,"A",{href:!0});var ZNt=s(BK);K$r=r(ZNt,"TFElectraForMultipleChoice"),ZNt.forEach(t),Z$r=r(fGe," (ELECTRA model)"),fGe.forEach(t),ekr=i(Fe),PC=n(Fe,"LI",{});var mGe=s(PC);bEe=n(mGe,"STRONG",{});var eIt=s(bEe);okr=r(eIt,"flaubert"),eIt.forEach(t),rkr=r(mGe," \u2014 "),NK=n(mGe,"A",{href:!0});var oIt=s(NK);tkr=r(oIt,"TFFlaubertForMultipleChoice"),oIt.forEach(t),akr=r(mGe," (FlauBERT model)"),mGe.forEach(t),nkr=i(Fe),BC=n(Fe,"LI",{});var gGe=s(BC);vEe=n(gGe,"STRONG",{});var rIt=s(vEe);skr=r(rIt,"funnel"),rIt.forEach(t),lkr=r(gGe," \u2014 "),IK=n(gGe,"A",{href:!0});var tIt=s(IK);ikr=r(tIt,"TFFunnelForMultipleChoice"),tIt.forEach(t),dkr=r(gGe," (Funnel Transformer model)"),gGe.forEach(t),ckr=i(Fe),NC=n(Fe,"LI",{});var hGe=s(NC);FEe=n(hGe,"STRONG",{});var aIt=s(FEe);fkr=r(aIt,"longformer"),aIt.forEach(t),mkr=r(hGe," \u2014 "),qK=n(hGe,"A",{href:!0});var nIt=s(qK);gkr=r(nIt,"TFLongformerForMultipleChoice"),nIt.forEach(t),hkr=r(hGe," (Longformer model)"),hGe.forEach(t),pkr=i(Fe),IC=n(Fe,"LI",{});var pGe=s(IC);TEe=n(pGe,"STRONG",{});var sIt=s(TEe);_kr=r(sIt,"mobilebert"),sIt.forEach(t),ukr=r(pGe," \u2014 "),jK=n(pGe,"A",{href:!0});var lIt=s(jK);bkr=r(lIt,"TFMobileBertForMultipleChoice"),lIt.forEach(t),vkr=r(pGe," (MobileBERT model)"),pGe.forEach(t),Fkr=i(Fe),qC=n(Fe,"LI",{});var _Ge=s(qC);MEe=n(_Ge,"STRONG",{});var iIt=s(MEe);Tkr=r(iIt,"mpnet"),iIt.forEach(t),Mkr=r(_Ge," \u2014 "),DK=n(_Ge,"A",{href:!0});var dIt=s(DK);Ekr=r(dIt,"TFMPNetForMultipleChoice"),dIt.forEach(t),Ckr=r(_Ge," (MPNet model)"),_Ge.forEach(t),wkr=i(Fe),jC=n(Fe,"LI",{});var uGe=s(jC);EEe=n(uGe,"STRONG",{});var cIt=s(EEe);Akr=r(cIt,"rembert"),cIt.forEach(t),Lkr=r(uGe," \u2014 "),GK=n(uGe,"A",{href:!0});var fIt=s(GK);ykr=r(fIt,"TFRemBertForMultipleChoice"),fIt.forEach(t),xkr=r(uGe," (RemBERT model)"),uGe.forEach(t),$kr=i(Fe),DC=n(Fe,"LI",{});var bGe=s(DC);CEe=n(bGe,"STRONG",{});var mIt=s(CEe);kkr=r(mIt,"roberta"),mIt.forEach(t),Skr=r(bGe," \u2014 "),OK=n(bGe,"A",{href:!0});var gIt=s(OK);Rkr=r(gIt,"TFRobertaForMultipleChoice"),gIt.forEach(t),Pkr=r(bGe," (RoBERTa model)"),bGe.forEach(t),Bkr=i(Fe),GC=n(Fe,"LI",{});var vGe=s(GC);wEe=n(vGe,"STRONG",{});var hIt=s(wEe);Nkr=r(hIt,"roformer"),hIt.forEach(t),Ikr=r(vGe," \u2014 "),VK=n(vGe,"A",{href:!0});var pIt=s(VK);qkr=r(pIt,"TFRoFormerForMultipleChoice"),pIt.forEach(t),jkr=r(vGe," (RoFormer model)"),vGe.forEach(t),Dkr=i(Fe),OC=n(Fe,"LI",{});var FGe=s(OC);AEe=n(FGe,"STRONG",{});var _It=s(AEe);Gkr=r(_It,"xlm"),_It.forEach(t),Okr=r(FGe," \u2014 "),XK=n(FGe,"A",{href:!0});var uIt=s(XK);Vkr=r(uIt,"TFXLMForMultipleChoice"),uIt.forEach(t),Xkr=r(FGe," (XLM model)"),FGe.forEach(t),zkr=i(Fe),VC=n(Fe,"LI",{});var TGe=s(VC);LEe=n(TGe,"STRONG",{});var bIt=s(LEe);Qkr=r(bIt,"xlm-roberta"),bIt.forEach(t),Wkr=r(TGe," \u2014 "),zK=n(TGe,"A",{href:!0});var vIt=s(zK);Hkr=r(vIt,"TFXLMRobertaForMultipleChoice"),vIt.forEach(t),Ukr=r(TGe," (XLM-RoBERTa model)"),TGe.forEach(t),Jkr=i(Fe),XC=n(Fe,"LI",{});var MGe=s(XC);yEe=n(MGe,"STRONG",{});var FIt=s(yEe);Ykr=r(FIt,"xlnet"),FIt.forEach(t),Kkr=r(MGe," \u2014 "),QK=n(MGe,"A",{href:!0});var TIt=s(QK);Zkr=r(TIt,"TFXLNetForMultipleChoice"),TIt.forEach(t),eSr=r(MGe," (XLNet model)"),MGe.forEach(t),Fe.forEach(t),oSr=i(zl),T(zC.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),Gze=i(f),kc=n(f,"H2",{class:!0});var UWe=s(kc);QC=n(UWe,"A",{id:!0,class:!0,href:!0});var MIt=s(QC);xEe=n(MIt,"SPAN",{});var EIt=s(xEe);T(Bx.$$.fragment,EIt),EIt.forEach(t),MIt.forEach(t),rSr=i(UWe),$Ee=n(UWe,"SPAN",{});var CIt=s($Ee);tSr=r(CIt,"TFAutoModelForNextSentencePrediction"),CIt.forEach(t),UWe.forEach(t),Oze=i(f),dr=n(f,"DIV",{class:!0});var Ql=s(dr);T(Nx.$$.fragment,Ql),aSr=i(Ql),Sc=n(Ql,"P",{});var eae=s(Sc);nSr=r(eae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),WK=n(eae,"A",{href:!0});var wIt=s(WK);sSr=r(wIt,"from_pretrained()"),wIt.forEach(t),lSr=r(eae," class method or the "),HK=n(eae,"A",{href:!0});var AIt=s(HK);iSr=r(AIt,"from_config()"),AIt.forEach(t),dSr=r(eae,` class
method.`),eae.forEach(t),cSr=i(Ql),Ix=n(Ql,"P",{});var JWe=s(Ix);fSr=r(JWe,"This class cannot be instantiated directly using "),kEe=n(JWe,"CODE",{});var LIt=s(kEe);mSr=r(LIt,"__init__()"),LIt.forEach(t),gSr=r(JWe," (throws an error)."),JWe.forEach(t),hSr=i(Ql),Gt=n(Ql,"DIV",{class:!0});var E7=s(Gt);T(qx.$$.fragment,E7),pSr=i(E7),SEe=n(E7,"P",{});var yIt=s(SEe);_Sr=r(yIt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),yIt.forEach(t),uSr=i(E7),Rc=n(E7,"P",{});var oae=s(Rc);bSr=r(oae,`Note:
Loading a model from its configuration file does `),REe=n(oae,"STRONG",{});var xIt=s(REe);vSr=r(xIt,"not"),xIt.forEach(t),FSr=r(oae,` load the model weights. It only affects the
model\u2019s configuration. Use `),UK=n(oae,"A",{href:!0});var $It=s(UK);TSr=r($It,"from_pretrained()"),$It.forEach(t),MSr=r(oae," to load the model weights."),oae.forEach(t),ESr=i(E7),T(WC.$$.fragment,E7),E7.forEach(t),CSr=i(Ql),Ir=n(Ql,"DIV",{class:!0});var Wl=s(Ir);T(jx.$$.fragment,Wl),wSr=i(Wl),PEe=n(Wl,"P",{});var kIt=s(PEe);ASr=r(kIt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),kIt.forEach(t),LSr=i(Wl),pn=n(Wl,"P",{});var C7=s(pn);ySr=r(C7,"The model class to instantiate is selected based on the "),BEe=n(C7,"CODE",{});var SIt=s(BEe);xSr=r(SIt,"model_type"),SIt.forEach(t),$Sr=r(C7,` property of the config object (either
passed as an argument or loaded from `),NEe=n(C7,"CODE",{});var RIt=s(NEe);kSr=r(RIt,"pretrained_model_name_or_path"),RIt.forEach(t),SSr=r(C7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IEe=n(C7,"CODE",{});var PIt=s(IEe);RSr=r(PIt,"pretrained_model_name_or_path"),PIt.forEach(t),PSr=r(C7,":"),C7.forEach(t),BSr=i(Wl),Dx=n(Wl,"UL",{});var YWe=s(Dx);HC=n(YWe,"LI",{});var EGe=s(HC);qEe=n(EGe,"STRONG",{});var BIt=s(qEe);NSr=r(BIt,"bert"),BIt.forEach(t),ISr=r(EGe," \u2014 "),JK=n(EGe,"A",{href:!0});var NIt=s(JK);qSr=r(NIt,"TFBertForNextSentencePrediction"),NIt.forEach(t),jSr=r(EGe," (BERT model)"),EGe.forEach(t),DSr=i(YWe),UC=n(YWe,"LI",{});var CGe=s(UC);jEe=n(CGe,"STRONG",{});var IIt=s(jEe);GSr=r(IIt,"mobilebert"),IIt.forEach(t),OSr=r(CGe," \u2014 "),YK=n(CGe,"A",{href:!0});var qIt=s(YK);VSr=r(qIt,"TFMobileBertForNextSentencePrediction"),qIt.forEach(t),XSr=r(CGe," (MobileBERT model)"),CGe.forEach(t),YWe.forEach(t),zSr=i(Wl),T(JC.$$.fragment,Wl),Wl.forEach(t),Ql.forEach(t),Vze=i(f),Pc=n(f,"H2",{class:!0});var KWe=s(Pc);YC=n(KWe,"A",{id:!0,class:!0,href:!0});var jIt=s(YC);DEe=n(jIt,"SPAN",{});var DIt=s(DEe);T(Gx.$$.fragment,DIt),DIt.forEach(t),jIt.forEach(t),QSr=i(KWe),GEe=n(KWe,"SPAN",{});var GIt=s(GEe);WSr=r(GIt,"TFAutoModelForTableQuestionAnswering"),GIt.forEach(t),KWe.forEach(t),Xze=i(f),cr=n(f,"DIV",{class:!0});var Hl=s(cr);T(Ox.$$.fragment,Hl),HSr=i(Hl),Bc=n(Hl,"P",{});var rae=s(Bc);USr=r(rae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),KK=n(rae,"A",{href:!0});var OIt=s(KK);JSr=r(OIt,"from_pretrained()"),OIt.forEach(t),YSr=r(rae," class method or the "),ZK=n(rae,"A",{href:!0});var VIt=s(ZK);KSr=r(VIt,"from_config()"),VIt.forEach(t),ZSr=r(rae,` class
method.`),rae.forEach(t),eRr=i(Hl),Vx=n(Hl,"P",{});var ZWe=s(Vx);oRr=r(ZWe,"This class cannot be instantiated directly using "),OEe=n(ZWe,"CODE",{});var XIt=s(OEe);rRr=r(XIt,"__init__()"),XIt.forEach(t),tRr=r(ZWe," (throws an error)."),ZWe.forEach(t),aRr=i(Hl),Ot=n(Hl,"DIV",{class:!0});var w7=s(Ot);T(Xx.$$.fragment,w7),nRr=i(w7),VEe=n(w7,"P",{});var zIt=s(VEe);sRr=r(zIt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),zIt.forEach(t),lRr=i(w7),Nc=n(w7,"P",{});var tae=s(Nc);iRr=r(tae,`Note:
Loading a model from its configuration file does `),XEe=n(tae,"STRONG",{});var QIt=s(XEe);dRr=r(QIt,"not"),QIt.forEach(t),cRr=r(tae,` load the model weights. It only affects the
model\u2019s configuration. Use `),eZ=n(tae,"A",{href:!0});var WIt=s(eZ);fRr=r(WIt,"from_pretrained()"),WIt.forEach(t),mRr=r(tae," to load the model weights."),tae.forEach(t),gRr=i(w7),T(KC.$$.fragment,w7),w7.forEach(t),hRr=i(Hl),qr=n(Hl,"DIV",{class:!0});var Ul=s(qr);T(zx.$$.fragment,Ul),pRr=i(Ul),zEe=n(Ul,"P",{});var HIt=s(zEe);_Rr=r(HIt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),HIt.forEach(t),uRr=i(Ul),_n=n(Ul,"P",{});var A7=s(_n);bRr=r(A7,"The model class to instantiate is selected based on the "),QEe=n(A7,"CODE",{});var UIt=s(QEe);vRr=r(UIt,"model_type"),UIt.forEach(t),FRr=r(A7,` property of the config object (either
passed as an argument or loaded from `),WEe=n(A7,"CODE",{});var JIt=s(WEe);TRr=r(JIt,"pretrained_model_name_or_path"),JIt.forEach(t),MRr=r(A7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HEe=n(A7,"CODE",{});var YIt=s(HEe);ERr=r(YIt,"pretrained_model_name_or_path"),YIt.forEach(t),CRr=r(A7,":"),A7.forEach(t),wRr=i(Ul),UEe=n(Ul,"UL",{});var KIt=s(UEe);ZC=n(KIt,"LI",{});var wGe=s(ZC);JEe=n(wGe,"STRONG",{});var ZIt=s(JEe);ARr=r(ZIt,"tapas"),ZIt.forEach(t),LRr=r(wGe," \u2014 "),oZ=n(wGe,"A",{href:!0});var eqt=s(oZ);yRr=r(eqt,"TFTapasForQuestionAnswering"),eqt.forEach(t),xRr=r(wGe," (TAPAS model)"),wGe.forEach(t),KIt.forEach(t),$Rr=i(Ul),T(e3.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),zze=i(f),Ic=n(f,"H2",{class:!0});var eHe=s(Ic);o3=n(eHe,"A",{id:!0,class:!0,href:!0});var oqt=s(o3);YEe=n(oqt,"SPAN",{});var rqt=s(YEe);T(Qx.$$.fragment,rqt),rqt.forEach(t),oqt.forEach(t),kRr=i(eHe),KEe=n(eHe,"SPAN",{});var tqt=s(KEe);SRr=r(tqt,"TFAutoModelForTokenClassification"),tqt.forEach(t),eHe.forEach(t),Qze=i(f),fr=n(f,"DIV",{class:!0});var Jl=s(fr);T(Wx.$$.fragment,Jl),RRr=i(Jl),qc=n(Jl,"P",{});var aae=s(qc);PRr=r(aae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),rZ=n(aae,"A",{href:!0});var aqt=s(rZ);BRr=r(aqt,"from_pretrained()"),aqt.forEach(t),NRr=r(aae," class method or the "),tZ=n(aae,"A",{href:!0});var nqt=s(tZ);IRr=r(nqt,"from_config()"),nqt.forEach(t),qRr=r(aae,` class
method.`),aae.forEach(t),jRr=i(Jl),Hx=n(Jl,"P",{});var oHe=s(Hx);DRr=r(oHe,"This class cannot be instantiated directly using "),ZEe=n(oHe,"CODE",{});var sqt=s(ZEe);GRr=r(sqt,"__init__()"),sqt.forEach(t),ORr=r(oHe," (throws an error)."),oHe.forEach(t),VRr=i(Jl),Vt=n(Jl,"DIV",{class:!0});var L7=s(Vt);T(Ux.$$.fragment,L7),XRr=i(L7),eCe=n(L7,"P",{});var lqt=s(eCe);zRr=r(lqt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),lqt.forEach(t),QRr=i(L7),jc=n(L7,"P",{});var nae=s(jc);WRr=r(nae,`Note:
Loading a model from its configuration file does `),oCe=n(nae,"STRONG",{});var iqt=s(oCe);HRr=r(iqt,"not"),iqt.forEach(t),URr=r(nae,` load the model weights. It only affects the
model\u2019s configuration. Use `),aZ=n(nae,"A",{href:!0});var dqt=s(aZ);JRr=r(dqt,"from_pretrained()"),dqt.forEach(t),YRr=r(nae," to load the model weights."),nae.forEach(t),KRr=i(L7),T(r3.$$.fragment,L7),L7.forEach(t),ZRr=i(Jl),jr=n(Jl,"DIV",{class:!0});var Yl=s(jr);T(Jx.$$.fragment,Yl),ePr=i(Yl),rCe=n(Yl,"P",{});var cqt=s(rCe);oPr=r(cqt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),cqt.forEach(t),rPr=i(Yl),un=n(Yl,"P",{});var y7=s(un);tPr=r(y7,"The model class to instantiate is selected based on the "),tCe=n(y7,"CODE",{});var fqt=s(tCe);aPr=r(fqt,"model_type"),fqt.forEach(t),nPr=r(y7,` property of the config object (either
passed as an argument or loaded from `),aCe=n(y7,"CODE",{});var mqt=s(aCe);sPr=r(mqt,"pretrained_model_name_or_path"),mqt.forEach(t),lPr=r(y7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nCe=n(y7,"CODE",{});var gqt=s(nCe);iPr=r(gqt,"pretrained_model_name_or_path"),gqt.forEach(t),dPr=r(y7,":"),y7.forEach(t),cPr=i(Yl),de=n(Yl,"UL",{});var ge=s(de);t3=n(ge,"LI",{});var AGe=s(t3);sCe=n(AGe,"STRONG",{});var hqt=s(sCe);fPr=r(hqt,"albert"),hqt.forEach(t),mPr=r(AGe," \u2014 "),nZ=n(AGe,"A",{href:!0});var pqt=s(nZ);gPr=r(pqt,"TFAlbertForTokenClassification"),pqt.forEach(t),hPr=r(AGe," (ALBERT model)"),AGe.forEach(t),pPr=i(ge),a3=n(ge,"LI",{});var LGe=s(a3);lCe=n(LGe,"STRONG",{});var _qt=s(lCe);_Pr=r(_qt,"bert"),_qt.forEach(t),uPr=r(LGe," \u2014 "),sZ=n(LGe,"A",{href:!0});var uqt=s(sZ);bPr=r(uqt,"TFBertForTokenClassification"),uqt.forEach(t),vPr=r(LGe," (BERT model)"),LGe.forEach(t),FPr=i(ge),n3=n(ge,"LI",{});var yGe=s(n3);iCe=n(yGe,"STRONG",{});var bqt=s(iCe);TPr=r(bqt,"camembert"),bqt.forEach(t),MPr=r(yGe," \u2014 "),lZ=n(yGe,"A",{href:!0});var vqt=s(lZ);EPr=r(vqt,"TFCamembertForTokenClassification"),vqt.forEach(t),CPr=r(yGe," (CamemBERT model)"),yGe.forEach(t),wPr=i(ge),s3=n(ge,"LI",{});var xGe=s(s3);dCe=n(xGe,"STRONG",{});var Fqt=s(dCe);APr=r(Fqt,"convbert"),Fqt.forEach(t),LPr=r(xGe," \u2014 "),iZ=n(xGe,"A",{href:!0});var Tqt=s(iZ);yPr=r(Tqt,"TFConvBertForTokenClassification"),Tqt.forEach(t),xPr=r(xGe," (ConvBERT model)"),xGe.forEach(t),$Pr=i(ge),l3=n(ge,"LI",{});var $Ge=s(l3);cCe=n($Ge,"STRONG",{});var Mqt=s(cCe);kPr=r(Mqt,"deberta"),Mqt.forEach(t),SPr=r($Ge," \u2014 "),dZ=n($Ge,"A",{href:!0});var Eqt=s(dZ);RPr=r(Eqt,"TFDebertaForTokenClassification"),Eqt.forEach(t),PPr=r($Ge," (DeBERTa model)"),$Ge.forEach(t),BPr=i(ge),i3=n(ge,"LI",{});var kGe=s(i3);fCe=n(kGe,"STRONG",{});var Cqt=s(fCe);NPr=r(Cqt,"deberta-v2"),Cqt.forEach(t),IPr=r(kGe," \u2014 "),cZ=n(kGe,"A",{href:!0});var wqt=s(cZ);qPr=r(wqt,"TFDebertaV2ForTokenClassification"),wqt.forEach(t),jPr=r(kGe," (DeBERTa-v2 model)"),kGe.forEach(t),DPr=i(ge),d3=n(ge,"LI",{});var SGe=s(d3);mCe=n(SGe,"STRONG",{});var Aqt=s(mCe);GPr=r(Aqt,"distilbert"),Aqt.forEach(t),OPr=r(SGe," \u2014 "),fZ=n(SGe,"A",{href:!0});var Lqt=s(fZ);VPr=r(Lqt,"TFDistilBertForTokenClassification"),Lqt.forEach(t),XPr=r(SGe," (DistilBERT model)"),SGe.forEach(t),zPr=i(ge),c3=n(ge,"LI",{});var RGe=s(c3);gCe=n(RGe,"STRONG",{});var yqt=s(gCe);QPr=r(yqt,"electra"),yqt.forEach(t),WPr=r(RGe," \u2014 "),mZ=n(RGe,"A",{href:!0});var xqt=s(mZ);HPr=r(xqt,"TFElectraForTokenClassification"),xqt.forEach(t),UPr=r(RGe," (ELECTRA model)"),RGe.forEach(t),JPr=i(ge),f3=n(ge,"LI",{});var PGe=s(f3);hCe=n(PGe,"STRONG",{});var $qt=s(hCe);YPr=r($qt,"flaubert"),$qt.forEach(t),KPr=r(PGe," \u2014 "),gZ=n(PGe,"A",{href:!0});var kqt=s(gZ);ZPr=r(kqt,"TFFlaubertForTokenClassification"),kqt.forEach(t),eBr=r(PGe," (FlauBERT model)"),PGe.forEach(t),oBr=i(ge),m3=n(ge,"LI",{});var BGe=s(m3);pCe=n(BGe,"STRONG",{});var Sqt=s(pCe);rBr=r(Sqt,"funnel"),Sqt.forEach(t),tBr=r(BGe," \u2014 "),hZ=n(BGe,"A",{href:!0});var Rqt=s(hZ);aBr=r(Rqt,"TFFunnelForTokenClassification"),Rqt.forEach(t),nBr=r(BGe," (Funnel Transformer model)"),BGe.forEach(t),sBr=i(ge),g3=n(ge,"LI",{});var NGe=s(g3);_Ce=n(NGe,"STRONG",{});var Pqt=s(_Ce);lBr=r(Pqt,"layoutlm"),Pqt.forEach(t),iBr=r(NGe," \u2014 "),pZ=n(NGe,"A",{href:!0});var Bqt=s(pZ);dBr=r(Bqt,"TFLayoutLMForTokenClassification"),Bqt.forEach(t),cBr=r(NGe," (LayoutLM model)"),NGe.forEach(t),fBr=i(ge),h3=n(ge,"LI",{});var IGe=s(h3);uCe=n(IGe,"STRONG",{});var Nqt=s(uCe);mBr=r(Nqt,"longformer"),Nqt.forEach(t),gBr=r(IGe," \u2014 "),_Z=n(IGe,"A",{href:!0});var Iqt=s(_Z);hBr=r(Iqt,"TFLongformerForTokenClassification"),Iqt.forEach(t),pBr=r(IGe," (Longformer model)"),IGe.forEach(t),_Br=i(ge),p3=n(ge,"LI",{});var qGe=s(p3);bCe=n(qGe,"STRONG",{});var qqt=s(bCe);uBr=r(qqt,"mobilebert"),qqt.forEach(t),bBr=r(qGe," \u2014 "),uZ=n(qGe,"A",{href:!0});var jqt=s(uZ);vBr=r(jqt,"TFMobileBertForTokenClassification"),jqt.forEach(t),FBr=r(qGe," (MobileBERT model)"),qGe.forEach(t),TBr=i(ge),_3=n(ge,"LI",{});var jGe=s(_3);vCe=n(jGe,"STRONG",{});var Dqt=s(vCe);MBr=r(Dqt,"mpnet"),Dqt.forEach(t),EBr=r(jGe," \u2014 "),bZ=n(jGe,"A",{href:!0});var Gqt=s(bZ);CBr=r(Gqt,"TFMPNetForTokenClassification"),Gqt.forEach(t),wBr=r(jGe," (MPNet model)"),jGe.forEach(t),ABr=i(ge),u3=n(ge,"LI",{});var DGe=s(u3);FCe=n(DGe,"STRONG",{});var Oqt=s(FCe);LBr=r(Oqt,"rembert"),Oqt.forEach(t),yBr=r(DGe," \u2014 "),vZ=n(DGe,"A",{href:!0});var Vqt=s(vZ);xBr=r(Vqt,"TFRemBertForTokenClassification"),Vqt.forEach(t),$Br=r(DGe," (RemBERT model)"),DGe.forEach(t),kBr=i(ge),b3=n(ge,"LI",{});var GGe=s(b3);TCe=n(GGe,"STRONG",{});var Xqt=s(TCe);SBr=r(Xqt,"roberta"),Xqt.forEach(t),RBr=r(GGe," \u2014 "),FZ=n(GGe,"A",{href:!0});var zqt=s(FZ);PBr=r(zqt,"TFRobertaForTokenClassification"),zqt.forEach(t),BBr=r(GGe," (RoBERTa model)"),GGe.forEach(t),NBr=i(ge),v3=n(ge,"LI",{});var OGe=s(v3);MCe=n(OGe,"STRONG",{});var Qqt=s(MCe);IBr=r(Qqt,"roformer"),Qqt.forEach(t),qBr=r(OGe," \u2014 "),TZ=n(OGe,"A",{href:!0});var Wqt=s(TZ);jBr=r(Wqt,"TFRoFormerForTokenClassification"),Wqt.forEach(t),DBr=r(OGe," (RoFormer model)"),OGe.forEach(t),GBr=i(ge),F3=n(ge,"LI",{});var VGe=s(F3);ECe=n(VGe,"STRONG",{});var Hqt=s(ECe);OBr=r(Hqt,"xlm"),Hqt.forEach(t),VBr=r(VGe," \u2014 "),MZ=n(VGe,"A",{href:!0});var Uqt=s(MZ);XBr=r(Uqt,"TFXLMForTokenClassification"),Uqt.forEach(t),zBr=r(VGe," (XLM model)"),VGe.forEach(t),QBr=i(ge),T3=n(ge,"LI",{});var XGe=s(T3);CCe=n(XGe,"STRONG",{});var Jqt=s(CCe);WBr=r(Jqt,"xlm-roberta"),Jqt.forEach(t),HBr=r(XGe," \u2014 "),EZ=n(XGe,"A",{href:!0});var Yqt=s(EZ);UBr=r(Yqt,"TFXLMRobertaForTokenClassification"),Yqt.forEach(t),JBr=r(XGe," (XLM-RoBERTa model)"),XGe.forEach(t),YBr=i(ge),M3=n(ge,"LI",{});var zGe=s(M3);wCe=n(zGe,"STRONG",{});var Kqt=s(wCe);KBr=r(Kqt,"xlnet"),Kqt.forEach(t),ZBr=r(zGe," \u2014 "),CZ=n(zGe,"A",{href:!0});var Zqt=s(CZ);eNr=r(Zqt,"TFXLNetForTokenClassification"),Zqt.forEach(t),oNr=r(zGe," (XLNet model)"),zGe.forEach(t),ge.forEach(t),rNr=i(Yl),T(E3.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),Wze=i(f),Dc=n(f,"H2",{class:!0});var rHe=s(Dc);C3=n(rHe,"A",{id:!0,class:!0,href:!0});var ejt=s(C3);ACe=n(ejt,"SPAN",{});var ojt=s(ACe);T(Yx.$$.fragment,ojt),ojt.forEach(t),ejt.forEach(t),tNr=i(rHe),LCe=n(rHe,"SPAN",{});var rjt=s(LCe);aNr=r(rjt,"TFAutoModelForQuestionAnswering"),rjt.forEach(t),rHe.forEach(t),Hze=i(f),mr=n(f,"DIV",{class:!0});var Kl=s(mr);T(Kx.$$.fragment,Kl),nNr=i(Kl),Gc=n(Kl,"P",{});var sae=s(Gc);sNr=r(sae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),wZ=n(sae,"A",{href:!0});var tjt=s(wZ);lNr=r(tjt,"from_pretrained()"),tjt.forEach(t),iNr=r(sae," class method or the "),AZ=n(sae,"A",{href:!0});var ajt=s(AZ);dNr=r(ajt,"from_config()"),ajt.forEach(t),cNr=r(sae,` class
method.`),sae.forEach(t),fNr=i(Kl),Zx=n(Kl,"P",{});var tHe=s(Zx);mNr=r(tHe,"This class cannot be instantiated directly using "),yCe=n(tHe,"CODE",{});var njt=s(yCe);gNr=r(njt,"__init__()"),njt.forEach(t),hNr=r(tHe," (throws an error)."),tHe.forEach(t),pNr=i(Kl),Xt=n(Kl,"DIV",{class:!0});var x7=s(Xt);T(e$.$$.fragment,x7),_Nr=i(x7),xCe=n(x7,"P",{});var sjt=s(xCe);uNr=r(sjt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),sjt.forEach(t),bNr=i(x7),Oc=n(x7,"P",{});var lae=s(Oc);vNr=r(lae,`Note:
Loading a model from its configuration file does `),$Ce=n(lae,"STRONG",{});var ljt=s($Ce);FNr=r(ljt,"not"),ljt.forEach(t),TNr=r(lae,` load the model weights. It only affects the
model\u2019s configuration. Use `),LZ=n(lae,"A",{href:!0});var ijt=s(LZ);MNr=r(ijt,"from_pretrained()"),ijt.forEach(t),ENr=r(lae," to load the model weights."),lae.forEach(t),CNr=i(x7),T(w3.$$.fragment,x7),x7.forEach(t),wNr=i(Kl),Dr=n(Kl,"DIV",{class:!0});var Zl=s(Dr);T(o$.$$.fragment,Zl),ANr=i(Zl),kCe=n(Zl,"P",{});var djt=s(kCe);LNr=r(djt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),djt.forEach(t),yNr=i(Zl),bn=n(Zl,"P",{});var $7=s(bn);xNr=r($7,"The model class to instantiate is selected based on the "),SCe=n($7,"CODE",{});var cjt=s(SCe);$Nr=r(cjt,"model_type"),cjt.forEach(t),kNr=r($7,` property of the config object (either
passed as an argument or loaded from `),RCe=n($7,"CODE",{});var fjt=s(RCe);SNr=r(fjt,"pretrained_model_name_or_path"),fjt.forEach(t),RNr=r($7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PCe=n($7,"CODE",{});var mjt=s(PCe);PNr=r(mjt,"pretrained_model_name_or_path"),mjt.forEach(t),BNr=r($7,":"),$7.forEach(t),NNr=i(Zl),ce=n(Zl,"UL",{});var he=s(ce);A3=n(he,"LI",{});var QGe=s(A3);BCe=n(QGe,"STRONG",{});var gjt=s(BCe);INr=r(gjt,"albert"),gjt.forEach(t),qNr=r(QGe," \u2014 "),yZ=n(QGe,"A",{href:!0});var hjt=s(yZ);jNr=r(hjt,"TFAlbertForQuestionAnswering"),hjt.forEach(t),DNr=r(QGe," (ALBERT model)"),QGe.forEach(t),GNr=i(he),L3=n(he,"LI",{});var WGe=s(L3);NCe=n(WGe,"STRONG",{});var pjt=s(NCe);ONr=r(pjt,"bert"),pjt.forEach(t),VNr=r(WGe," \u2014 "),xZ=n(WGe,"A",{href:!0});var _jt=s(xZ);XNr=r(_jt,"TFBertForQuestionAnswering"),_jt.forEach(t),zNr=r(WGe," (BERT model)"),WGe.forEach(t),QNr=i(he),y3=n(he,"LI",{});var HGe=s(y3);ICe=n(HGe,"STRONG",{});var ujt=s(ICe);WNr=r(ujt,"camembert"),ujt.forEach(t),HNr=r(HGe," \u2014 "),$Z=n(HGe,"A",{href:!0});var bjt=s($Z);UNr=r(bjt,"TFCamembertForQuestionAnswering"),bjt.forEach(t),JNr=r(HGe," (CamemBERT model)"),HGe.forEach(t),YNr=i(he),x3=n(he,"LI",{});var UGe=s(x3);qCe=n(UGe,"STRONG",{});var vjt=s(qCe);KNr=r(vjt,"convbert"),vjt.forEach(t),ZNr=r(UGe," \u2014 "),kZ=n(UGe,"A",{href:!0});var Fjt=s(kZ);eIr=r(Fjt,"TFConvBertForQuestionAnswering"),Fjt.forEach(t),oIr=r(UGe," (ConvBERT model)"),UGe.forEach(t),rIr=i(he),$3=n(he,"LI",{});var JGe=s($3);jCe=n(JGe,"STRONG",{});var Tjt=s(jCe);tIr=r(Tjt,"deberta"),Tjt.forEach(t),aIr=r(JGe," \u2014 "),SZ=n(JGe,"A",{href:!0});var Mjt=s(SZ);nIr=r(Mjt,"TFDebertaForQuestionAnswering"),Mjt.forEach(t),sIr=r(JGe," (DeBERTa model)"),JGe.forEach(t),lIr=i(he),k3=n(he,"LI",{});var YGe=s(k3);DCe=n(YGe,"STRONG",{});var Ejt=s(DCe);iIr=r(Ejt,"deberta-v2"),Ejt.forEach(t),dIr=r(YGe," \u2014 "),RZ=n(YGe,"A",{href:!0});var Cjt=s(RZ);cIr=r(Cjt,"TFDebertaV2ForQuestionAnswering"),Cjt.forEach(t),fIr=r(YGe," (DeBERTa-v2 model)"),YGe.forEach(t),mIr=i(he),S3=n(he,"LI",{});var KGe=s(S3);GCe=n(KGe,"STRONG",{});var wjt=s(GCe);gIr=r(wjt,"distilbert"),wjt.forEach(t),hIr=r(KGe," \u2014 "),PZ=n(KGe,"A",{href:!0});var Ajt=s(PZ);pIr=r(Ajt,"TFDistilBertForQuestionAnswering"),Ajt.forEach(t),_Ir=r(KGe," (DistilBERT model)"),KGe.forEach(t),uIr=i(he),R3=n(he,"LI",{});var ZGe=s(R3);OCe=n(ZGe,"STRONG",{});var Ljt=s(OCe);bIr=r(Ljt,"electra"),Ljt.forEach(t),vIr=r(ZGe," \u2014 "),BZ=n(ZGe,"A",{href:!0});var yjt=s(BZ);FIr=r(yjt,"TFElectraForQuestionAnswering"),yjt.forEach(t),TIr=r(ZGe," (ELECTRA model)"),ZGe.forEach(t),MIr=i(he),P3=n(he,"LI",{});var eOe=s(P3);VCe=n(eOe,"STRONG",{});var xjt=s(VCe);EIr=r(xjt,"flaubert"),xjt.forEach(t),CIr=r(eOe," \u2014 "),NZ=n(eOe,"A",{href:!0});var $jt=s(NZ);wIr=r($jt,"TFFlaubertForQuestionAnsweringSimple"),$jt.forEach(t),AIr=r(eOe," (FlauBERT model)"),eOe.forEach(t),LIr=i(he),B3=n(he,"LI",{});var oOe=s(B3);XCe=n(oOe,"STRONG",{});var kjt=s(XCe);yIr=r(kjt,"funnel"),kjt.forEach(t),xIr=r(oOe," \u2014 "),IZ=n(oOe,"A",{href:!0});var Sjt=s(IZ);$Ir=r(Sjt,"TFFunnelForQuestionAnswering"),Sjt.forEach(t),kIr=r(oOe," (Funnel Transformer model)"),oOe.forEach(t),SIr=i(he),N3=n(he,"LI",{});var rOe=s(N3);zCe=n(rOe,"STRONG",{});var Rjt=s(zCe);RIr=r(Rjt,"gptj"),Rjt.forEach(t),PIr=r(rOe," \u2014 "),qZ=n(rOe,"A",{href:!0});var Pjt=s(qZ);BIr=r(Pjt,"TFGPTJForQuestionAnswering"),Pjt.forEach(t),NIr=r(rOe," (GPT-J model)"),rOe.forEach(t),IIr=i(he),I3=n(he,"LI",{});var tOe=s(I3);QCe=n(tOe,"STRONG",{});var Bjt=s(QCe);qIr=r(Bjt,"longformer"),Bjt.forEach(t),jIr=r(tOe," \u2014 "),jZ=n(tOe,"A",{href:!0});var Njt=s(jZ);DIr=r(Njt,"TFLongformerForQuestionAnswering"),Njt.forEach(t),GIr=r(tOe," (Longformer model)"),tOe.forEach(t),OIr=i(he),q3=n(he,"LI",{});var aOe=s(q3);WCe=n(aOe,"STRONG",{});var Ijt=s(WCe);VIr=r(Ijt,"mobilebert"),Ijt.forEach(t),XIr=r(aOe," \u2014 "),DZ=n(aOe,"A",{href:!0});var qjt=s(DZ);zIr=r(qjt,"TFMobileBertForQuestionAnswering"),qjt.forEach(t),QIr=r(aOe," (MobileBERT model)"),aOe.forEach(t),WIr=i(he),j3=n(he,"LI",{});var nOe=s(j3);HCe=n(nOe,"STRONG",{});var jjt=s(HCe);HIr=r(jjt,"mpnet"),jjt.forEach(t),UIr=r(nOe," \u2014 "),GZ=n(nOe,"A",{href:!0});var Djt=s(GZ);JIr=r(Djt,"TFMPNetForQuestionAnswering"),Djt.forEach(t),YIr=r(nOe," (MPNet model)"),nOe.forEach(t),KIr=i(he),D3=n(he,"LI",{});var sOe=s(D3);UCe=n(sOe,"STRONG",{});var Gjt=s(UCe);ZIr=r(Gjt,"rembert"),Gjt.forEach(t),eqr=r(sOe," \u2014 "),OZ=n(sOe,"A",{href:!0});var Ojt=s(OZ);oqr=r(Ojt,"TFRemBertForQuestionAnswering"),Ojt.forEach(t),rqr=r(sOe," (RemBERT model)"),sOe.forEach(t),tqr=i(he),G3=n(he,"LI",{});var lOe=s(G3);JCe=n(lOe,"STRONG",{});var Vjt=s(JCe);aqr=r(Vjt,"roberta"),Vjt.forEach(t),nqr=r(lOe," \u2014 "),VZ=n(lOe,"A",{href:!0});var Xjt=s(VZ);sqr=r(Xjt,"TFRobertaForQuestionAnswering"),Xjt.forEach(t),lqr=r(lOe," (RoBERTa model)"),lOe.forEach(t),iqr=i(he),O3=n(he,"LI",{});var iOe=s(O3);YCe=n(iOe,"STRONG",{});var zjt=s(YCe);dqr=r(zjt,"roformer"),zjt.forEach(t),cqr=r(iOe," \u2014 "),XZ=n(iOe,"A",{href:!0});var Qjt=s(XZ);fqr=r(Qjt,"TFRoFormerForQuestionAnswering"),Qjt.forEach(t),mqr=r(iOe," (RoFormer model)"),iOe.forEach(t),gqr=i(he),V3=n(he,"LI",{});var dOe=s(V3);KCe=n(dOe,"STRONG",{});var Wjt=s(KCe);hqr=r(Wjt,"xlm"),Wjt.forEach(t),pqr=r(dOe," \u2014 "),zZ=n(dOe,"A",{href:!0});var Hjt=s(zZ);_qr=r(Hjt,"TFXLMForQuestionAnsweringSimple"),Hjt.forEach(t),uqr=r(dOe," (XLM model)"),dOe.forEach(t),bqr=i(he),X3=n(he,"LI",{});var cOe=s(X3);ZCe=n(cOe,"STRONG",{});var Ujt=s(ZCe);vqr=r(Ujt,"xlm-roberta"),Ujt.forEach(t),Fqr=r(cOe," \u2014 "),QZ=n(cOe,"A",{href:!0});var Jjt=s(QZ);Tqr=r(Jjt,"TFXLMRobertaForQuestionAnswering"),Jjt.forEach(t),Mqr=r(cOe," (XLM-RoBERTa model)"),cOe.forEach(t),Eqr=i(he),z3=n(he,"LI",{});var fOe=s(z3);e3e=n(fOe,"STRONG",{});var Yjt=s(e3e);Cqr=r(Yjt,"xlnet"),Yjt.forEach(t),wqr=r(fOe," \u2014 "),WZ=n(fOe,"A",{href:!0});var Kjt=s(WZ);Aqr=r(Kjt,"TFXLNetForQuestionAnsweringSimple"),Kjt.forEach(t),Lqr=r(fOe," (XLNet model)"),fOe.forEach(t),he.forEach(t),yqr=i(Zl),T(Q3.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),Uze=i(f),Vc=n(f,"H2",{class:!0});var aHe=s(Vc);W3=n(aHe,"A",{id:!0,class:!0,href:!0});var Zjt=s(W3);o3e=n(Zjt,"SPAN",{});var eDt=s(o3e);T(r$.$$.fragment,eDt),eDt.forEach(t),Zjt.forEach(t),xqr=i(aHe),r3e=n(aHe,"SPAN",{});var oDt=s(r3e);$qr=r(oDt,"TFAutoModelForVision2Seq"),oDt.forEach(t),aHe.forEach(t),Jze=i(f),gr=n(f,"DIV",{class:!0});var ei=s(gr);T(t$.$$.fragment,ei),kqr=i(ei),Xc=n(ei,"P",{});var iae=s(Xc);Sqr=r(iae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),HZ=n(iae,"A",{href:!0});var rDt=s(HZ);Rqr=r(rDt,"from_pretrained()"),rDt.forEach(t),Pqr=r(iae," class method or the "),UZ=n(iae,"A",{href:!0});var tDt=s(UZ);Bqr=r(tDt,"from_config()"),tDt.forEach(t),Nqr=r(iae,` class
method.`),iae.forEach(t),Iqr=i(ei),a$=n(ei,"P",{});var nHe=s(a$);qqr=r(nHe,"This class cannot be instantiated directly using "),t3e=n(nHe,"CODE",{});var aDt=s(t3e);jqr=r(aDt,"__init__()"),aDt.forEach(t),Dqr=r(nHe," (throws an error)."),nHe.forEach(t),Gqr=i(ei),zt=n(ei,"DIV",{class:!0});var k7=s(zt);T(n$.$$.fragment,k7),Oqr=i(k7),a3e=n(k7,"P",{});var nDt=s(a3e);Vqr=r(nDt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),nDt.forEach(t),Xqr=i(k7),zc=n(k7,"P",{});var dae=s(zc);zqr=r(dae,`Note:
Loading a model from its configuration file does `),n3e=n(dae,"STRONG",{});var sDt=s(n3e);Qqr=r(sDt,"not"),sDt.forEach(t),Wqr=r(dae,` load the model weights. It only affects the
model\u2019s configuration. Use `),JZ=n(dae,"A",{href:!0});var lDt=s(JZ);Hqr=r(lDt,"from_pretrained()"),lDt.forEach(t),Uqr=r(dae," to load the model weights."),dae.forEach(t),Jqr=i(k7),T(H3.$$.fragment,k7),k7.forEach(t),Yqr=i(ei),Gr=n(ei,"DIV",{class:!0});var oi=s(Gr);T(s$.$$.fragment,oi),Kqr=i(oi),s3e=n(oi,"P",{});var iDt=s(s3e);Zqr=r(iDt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),iDt.forEach(t),ejr=i(oi),vn=n(oi,"P",{});var S7=s(vn);ojr=r(S7,"The model class to instantiate is selected based on the "),l3e=n(S7,"CODE",{});var dDt=s(l3e);rjr=r(dDt,"model_type"),dDt.forEach(t),tjr=r(S7,` property of the config object (either
passed as an argument or loaded from `),i3e=n(S7,"CODE",{});var cDt=s(i3e);ajr=r(cDt,"pretrained_model_name_or_path"),cDt.forEach(t),njr=r(S7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d3e=n(S7,"CODE",{});var fDt=s(d3e);sjr=r(fDt,"pretrained_model_name_or_path"),fDt.forEach(t),ljr=r(S7,":"),S7.forEach(t),ijr=i(oi),c3e=n(oi,"UL",{});var mDt=s(c3e);U3=n(mDt,"LI",{});var mOe=s(U3);f3e=n(mOe,"STRONG",{});var gDt=s(f3e);djr=r(gDt,"vision-encoder-decoder"),gDt.forEach(t),cjr=r(mOe," \u2014 "),YZ=n(mOe,"A",{href:!0});var hDt=s(YZ);fjr=r(hDt,"TFVisionEncoderDecoderModel"),hDt.forEach(t),mjr=r(mOe," (Vision Encoder decoder model)"),mOe.forEach(t),mDt.forEach(t),gjr=i(oi),T(J3.$$.fragment,oi),oi.forEach(t),ei.forEach(t),Yze=i(f),Qc=n(f,"H2",{class:!0});var sHe=s(Qc);Y3=n(sHe,"A",{id:!0,class:!0,href:!0});var pDt=s(Y3);m3e=n(pDt,"SPAN",{});var _Dt=s(m3e);T(l$.$$.fragment,_Dt),_Dt.forEach(t),pDt.forEach(t),hjr=i(sHe),g3e=n(sHe,"SPAN",{});var uDt=s(g3e);pjr=r(uDt,"TFAutoModelForSpeechSeq2Seq"),uDt.forEach(t),sHe.forEach(t),Kze=i(f),hr=n(f,"DIV",{class:!0});var ri=s(hr);T(i$.$$.fragment,ri),_jr=i(ri),Wc=n(ri,"P",{});var cae=s(Wc);ujr=r(cae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),KZ=n(cae,"A",{href:!0});var bDt=s(KZ);bjr=r(bDt,"from_pretrained()"),bDt.forEach(t),vjr=r(cae," class method or the "),ZZ=n(cae,"A",{href:!0});var vDt=s(ZZ);Fjr=r(vDt,"from_config()"),vDt.forEach(t),Tjr=r(cae,` class
method.`),cae.forEach(t),Mjr=i(ri),d$=n(ri,"P",{});var lHe=s(d$);Ejr=r(lHe,"This class cannot be instantiated directly using "),h3e=n(lHe,"CODE",{});var FDt=s(h3e);Cjr=r(FDt,"__init__()"),FDt.forEach(t),wjr=r(lHe," (throws an error)."),lHe.forEach(t),Ajr=i(ri),Qt=n(ri,"DIV",{class:!0});var R7=s(Qt);T(c$.$$.fragment,R7),Ljr=i(R7),p3e=n(R7,"P",{});var TDt=s(p3e);yjr=r(TDt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),TDt.forEach(t),xjr=i(R7),Hc=n(R7,"P",{});var fae=s(Hc);$jr=r(fae,`Note:
Loading a model from its configuration file does `),_3e=n(fae,"STRONG",{});var MDt=s(_3e);kjr=r(MDt,"not"),MDt.forEach(t),Sjr=r(fae,` load the model weights. It only affects the
model\u2019s configuration. Use `),eee=n(fae,"A",{href:!0});var EDt=s(eee);Rjr=r(EDt,"from_pretrained()"),EDt.forEach(t),Pjr=r(fae," to load the model weights."),fae.forEach(t),Bjr=i(R7),T(K3.$$.fragment,R7),R7.forEach(t),Njr=i(ri),Or=n(ri,"DIV",{class:!0});var ti=s(Or);T(f$.$$.fragment,ti),Ijr=i(ti),u3e=n(ti,"P",{});var CDt=s(u3e);qjr=r(CDt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),CDt.forEach(t),jjr=i(ti),Fn=n(ti,"P",{});var P7=s(Fn);Djr=r(P7,"The model class to instantiate is selected based on the "),b3e=n(P7,"CODE",{});var wDt=s(b3e);Gjr=r(wDt,"model_type"),wDt.forEach(t),Ojr=r(P7,` property of the config object (either
passed as an argument or loaded from `),v3e=n(P7,"CODE",{});var ADt=s(v3e);Vjr=r(ADt,"pretrained_model_name_or_path"),ADt.forEach(t),Xjr=r(P7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F3e=n(P7,"CODE",{});var LDt=s(F3e);zjr=r(LDt,"pretrained_model_name_or_path"),LDt.forEach(t),Qjr=r(P7,":"),P7.forEach(t),Wjr=i(ti),T3e=n(ti,"UL",{});var yDt=s(T3e);Z3=n(yDt,"LI",{});var gOe=s(Z3);M3e=n(gOe,"STRONG",{});var xDt=s(M3e);Hjr=r(xDt,"speech_to_text"),xDt.forEach(t),Ujr=r(gOe," \u2014 "),oee=n(gOe,"A",{href:!0});var $Dt=s(oee);Jjr=r($Dt,"TFSpeech2TextForConditionalGeneration"),$Dt.forEach(t),Yjr=r(gOe," (Speech2Text model)"),gOe.forEach(t),yDt.forEach(t),Kjr=i(ti),T(e5.$$.fragment,ti),ti.forEach(t),ri.forEach(t),Zze=i(f),Uc=n(f,"H2",{class:!0});var iHe=s(Uc);o5=n(iHe,"A",{id:!0,class:!0,href:!0});var kDt=s(o5);E3e=n(kDt,"SPAN",{});var SDt=s(E3e);T(m$.$$.fragment,SDt),SDt.forEach(t),kDt.forEach(t),Zjr=i(iHe),C3e=n(iHe,"SPAN",{});var RDt=s(C3e);eDr=r(RDt,"FlaxAutoModel"),RDt.forEach(t),iHe.forEach(t),eQe=i(f),pr=n(f,"DIV",{class:!0});var ai=s(pr);T(g$.$$.fragment,ai),oDr=i(ai),Jc=n(ai,"P",{});var mae=s(Jc);rDr=r(mae,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),ree=n(mae,"A",{href:!0});var PDt=s(ree);tDr=r(PDt,"from_pretrained()"),PDt.forEach(t),aDr=r(mae," class method or the "),tee=n(mae,"A",{href:!0});var BDt=s(tee);nDr=r(BDt,"from_config()"),BDt.forEach(t),sDr=r(mae,` class
method.`),mae.forEach(t),lDr=i(ai),h$=n(ai,"P",{});var dHe=s(h$);iDr=r(dHe,"This class cannot be instantiated directly using "),w3e=n(dHe,"CODE",{});var NDt=s(w3e);dDr=r(NDt,"__init__()"),NDt.forEach(t),cDr=r(dHe," (throws an error)."),dHe.forEach(t),fDr=i(ai),Wt=n(ai,"DIV",{class:!0});var B7=s(Wt);T(p$.$$.fragment,B7),mDr=i(B7),A3e=n(B7,"P",{});var IDt=s(A3e);gDr=r(IDt,"Instantiates one of the base model classes of the library from a configuration."),IDt.forEach(t),hDr=i(B7),Yc=n(B7,"P",{});var gae=s(Yc);pDr=r(gae,`Note:
Loading a model from its configuration file does `),L3e=n(gae,"STRONG",{});var qDt=s(L3e);_Dr=r(qDt,"not"),qDt.forEach(t),uDr=r(gae,` load the model weights. It only affects the
model\u2019s configuration. Use `),aee=n(gae,"A",{href:!0});var jDt=s(aee);bDr=r(jDt,"from_pretrained()"),jDt.forEach(t),vDr=r(gae," to load the model weights."),gae.forEach(t),FDr=i(B7),T(r5.$$.fragment,B7),B7.forEach(t),TDr=i(ai),Vr=n(ai,"DIV",{class:!0});var ni=s(Vr);T(_$.$$.fragment,ni),MDr=i(ni),y3e=n(ni,"P",{});var DDt=s(y3e);EDr=r(DDt,"Instantiate one of the base model classes of the library from a pretrained model."),DDt.forEach(t),CDr=i(ni),Tn=n(ni,"P",{});var N7=s(Tn);wDr=r(N7,"The model class to instantiate is selected based on the "),x3e=n(N7,"CODE",{});var GDt=s(x3e);ADr=r(GDt,"model_type"),GDt.forEach(t),LDr=r(N7,` property of the config object (either
passed as an argument or loaded from `),$3e=n(N7,"CODE",{});var ODt=s($3e);yDr=r(ODt,"pretrained_model_name_or_path"),ODt.forEach(t),xDr=r(N7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k3e=n(N7,"CODE",{});var VDt=s(k3e);$Dr=r(VDt,"pretrained_model_name_or_path"),VDt.forEach(t),kDr=r(N7,":"),N7.forEach(t),SDr=i(ni),oe=n(ni,"UL",{});var re=s(oe);t5=n(re,"LI",{});var hOe=s(t5);S3e=n(hOe,"STRONG",{});var XDt=s(S3e);RDr=r(XDt,"albert"),XDt.forEach(t),PDr=r(hOe," \u2014 "),nee=n(hOe,"A",{href:!0});var zDt=s(nee);BDr=r(zDt,"FlaxAlbertModel"),zDt.forEach(t),NDr=r(hOe," (ALBERT model)"),hOe.forEach(t),IDr=i(re),a5=n(re,"LI",{});var pOe=s(a5);R3e=n(pOe,"STRONG",{});var QDt=s(R3e);qDr=r(QDt,"bart"),QDt.forEach(t),jDr=r(pOe," \u2014 "),see=n(pOe,"A",{href:!0});var WDt=s(see);DDr=r(WDt,"FlaxBartModel"),WDt.forEach(t),GDr=r(pOe," (BART model)"),pOe.forEach(t),ODr=i(re),n5=n(re,"LI",{});var _Oe=s(n5);P3e=n(_Oe,"STRONG",{});var HDt=s(P3e);VDr=r(HDt,"beit"),HDt.forEach(t),XDr=r(_Oe," \u2014 "),lee=n(_Oe,"A",{href:!0});var UDt=s(lee);zDr=r(UDt,"FlaxBeitModel"),UDt.forEach(t),QDr=r(_Oe," (BEiT model)"),_Oe.forEach(t),WDr=i(re),s5=n(re,"LI",{});var uOe=s(s5);B3e=n(uOe,"STRONG",{});var JDt=s(B3e);HDr=r(JDt,"bert"),JDt.forEach(t),UDr=r(uOe," \u2014 "),iee=n(uOe,"A",{href:!0});var YDt=s(iee);JDr=r(YDt,"FlaxBertModel"),YDt.forEach(t),YDr=r(uOe," (BERT model)"),uOe.forEach(t),KDr=i(re),l5=n(re,"LI",{});var bOe=s(l5);N3e=n(bOe,"STRONG",{});var KDt=s(N3e);ZDr=r(KDt,"big_bird"),KDt.forEach(t),eGr=r(bOe," \u2014 "),dee=n(bOe,"A",{href:!0});var ZDt=s(dee);oGr=r(ZDt,"FlaxBigBirdModel"),ZDt.forEach(t),rGr=r(bOe," (BigBird model)"),bOe.forEach(t),tGr=i(re),i5=n(re,"LI",{});var vOe=s(i5);I3e=n(vOe,"STRONG",{});var eGt=s(I3e);aGr=r(eGt,"blenderbot"),eGt.forEach(t),nGr=r(vOe," \u2014 "),cee=n(vOe,"A",{href:!0});var oGt=s(cee);sGr=r(oGt,"FlaxBlenderbotModel"),oGt.forEach(t),lGr=r(vOe," (Blenderbot model)"),vOe.forEach(t),iGr=i(re),d5=n(re,"LI",{});var FOe=s(d5);q3e=n(FOe,"STRONG",{});var rGt=s(q3e);dGr=r(rGt,"blenderbot-small"),rGt.forEach(t),cGr=r(FOe," \u2014 "),fee=n(FOe,"A",{href:!0});var tGt=s(fee);fGr=r(tGt,"FlaxBlenderbotSmallModel"),tGt.forEach(t),mGr=r(FOe," (BlenderbotSmall model)"),FOe.forEach(t),gGr=i(re),c5=n(re,"LI",{});var TOe=s(c5);j3e=n(TOe,"STRONG",{});var aGt=s(j3e);hGr=r(aGt,"bloom"),aGt.forEach(t),pGr=r(TOe," \u2014 "),mee=n(TOe,"A",{href:!0});var nGt=s(mee);_Gr=r(nGt,"FlaxBloomModel"),nGt.forEach(t),uGr=r(TOe," (BLOOM model)"),TOe.forEach(t),bGr=i(re),f5=n(re,"LI",{});var MOe=s(f5);D3e=n(MOe,"STRONG",{});var sGt=s(D3e);vGr=r(sGt,"clip"),sGt.forEach(t),FGr=r(MOe," \u2014 "),gee=n(MOe,"A",{href:!0});var lGt=s(gee);TGr=r(lGt,"FlaxCLIPModel"),lGt.forEach(t),MGr=r(MOe," (CLIP model)"),MOe.forEach(t),EGr=i(re),m5=n(re,"LI",{});var EOe=s(m5);G3e=n(EOe,"STRONG",{});var iGt=s(G3e);CGr=r(iGt,"distilbert"),iGt.forEach(t),wGr=r(EOe," \u2014 "),hee=n(EOe,"A",{href:!0});var dGt=s(hee);AGr=r(dGt,"FlaxDistilBertModel"),dGt.forEach(t),LGr=r(EOe," (DistilBERT model)"),EOe.forEach(t),yGr=i(re),g5=n(re,"LI",{});var COe=s(g5);O3e=n(COe,"STRONG",{});var cGt=s(O3e);xGr=r(cGt,"electra"),cGt.forEach(t),$Gr=r(COe," \u2014 "),pee=n(COe,"A",{href:!0});var fGt=s(pee);kGr=r(fGt,"FlaxElectraModel"),fGt.forEach(t),SGr=r(COe," (ELECTRA model)"),COe.forEach(t),RGr=i(re),h5=n(re,"LI",{});var wOe=s(h5);V3e=n(wOe,"STRONG",{});var mGt=s(V3e);PGr=r(mGt,"gpt2"),mGt.forEach(t),BGr=r(wOe," \u2014 "),_ee=n(wOe,"A",{href:!0});var gGt=s(_ee);NGr=r(gGt,"FlaxGPT2Model"),gGt.forEach(t),IGr=r(wOe," (OpenAI GPT-2 model)"),wOe.forEach(t),qGr=i(re),p5=n(re,"LI",{});var AOe=s(p5);X3e=n(AOe,"STRONG",{});var hGt=s(X3e);jGr=r(hGt,"gpt_neo"),hGt.forEach(t),DGr=r(AOe," \u2014 "),uee=n(AOe,"A",{href:!0});var pGt=s(uee);GGr=r(pGt,"FlaxGPTNeoModel"),pGt.forEach(t),OGr=r(AOe," (GPT Neo model)"),AOe.forEach(t),VGr=i(re),_5=n(re,"LI",{});var LOe=s(_5);z3e=n(LOe,"STRONG",{});var _Gt=s(z3e);XGr=r(_Gt,"gptj"),_Gt.forEach(t),zGr=r(LOe," \u2014 "),bee=n(LOe,"A",{href:!0});var uGt=s(bee);QGr=r(uGt,"FlaxGPTJModel"),uGt.forEach(t),WGr=r(LOe," (GPT-J model)"),LOe.forEach(t),HGr=i(re),u5=n(re,"LI",{});var yOe=s(u5);Q3e=n(yOe,"STRONG",{});var bGt=s(Q3e);UGr=r(bGt,"longt5"),bGt.forEach(t),JGr=r(yOe," \u2014 "),vee=n(yOe,"A",{href:!0});var vGt=s(vee);YGr=r(vGt,"FlaxLongT5Model"),vGt.forEach(t),KGr=r(yOe," (LongT5 model)"),yOe.forEach(t),ZGr=i(re),b5=n(re,"LI",{});var xOe=s(b5);W3e=n(xOe,"STRONG",{});var FGt=s(W3e);eOr=r(FGt,"marian"),FGt.forEach(t),oOr=r(xOe," \u2014 "),Fee=n(xOe,"A",{href:!0});var TGt=s(Fee);rOr=r(TGt,"FlaxMarianModel"),TGt.forEach(t),tOr=r(xOe," (Marian model)"),xOe.forEach(t),aOr=i(re),v5=n(re,"LI",{});var $Oe=s(v5);H3e=n($Oe,"STRONG",{});var MGt=s(H3e);nOr=r(MGt,"mbart"),MGt.forEach(t),sOr=r($Oe," \u2014 "),Tee=n($Oe,"A",{href:!0});var EGt=s(Tee);lOr=r(EGt,"FlaxMBartModel"),EGt.forEach(t),iOr=r($Oe," (mBART model)"),$Oe.forEach(t),dOr=i(re),F5=n(re,"LI",{});var kOe=s(F5);U3e=n(kOe,"STRONG",{});var CGt=s(U3e);cOr=r(CGt,"mt5"),CGt.forEach(t),fOr=r(kOe," \u2014 "),Mee=n(kOe,"A",{href:!0});var wGt=s(Mee);mOr=r(wGt,"FlaxMT5Model"),wGt.forEach(t),gOr=r(kOe," (MT5 model)"),kOe.forEach(t),hOr=i(re),T5=n(re,"LI",{});var SOe=s(T5);J3e=n(SOe,"STRONG",{});var AGt=s(J3e);pOr=r(AGt,"opt"),AGt.forEach(t),_Or=r(SOe," \u2014 "),Eee=n(SOe,"A",{href:!0});var LGt=s(Eee);uOr=r(LGt,"FlaxOPTModel"),LGt.forEach(t),bOr=r(SOe," (OPT model)"),SOe.forEach(t),vOr=i(re),M5=n(re,"LI",{});var ROe=s(M5);Y3e=n(ROe,"STRONG",{});var yGt=s(Y3e);FOr=r(yGt,"pegasus"),yGt.forEach(t),TOr=r(ROe," \u2014 "),Cee=n(ROe,"A",{href:!0});var xGt=s(Cee);MOr=r(xGt,"FlaxPegasusModel"),xGt.forEach(t),EOr=r(ROe," (Pegasus model)"),ROe.forEach(t),COr=i(re),E5=n(re,"LI",{});var POe=s(E5);K3e=n(POe,"STRONG",{});var $Gt=s(K3e);wOr=r($Gt,"roberta"),$Gt.forEach(t),AOr=r(POe," \u2014 "),wee=n(POe,"A",{href:!0});var kGt=s(wee);LOr=r(kGt,"FlaxRobertaModel"),kGt.forEach(t),yOr=r(POe," (RoBERTa model)"),POe.forEach(t),xOr=i(re),C5=n(re,"LI",{});var BOe=s(C5);Z3e=n(BOe,"STRONG",{});var SGt=s(Z3e);$Or=r(SGt,"roformer"),SGt.forEach(t),kOr=r(BOe," \u2014 "),Aee=n(BOe,"A",{href:!0});var RGt=s(Aee);SOr=r(RGt,"FlaxRoFormerModel"),RGt.forEach(t),ROr=r(BOe," (RoFormer model)"),BOe.forEach(t),POr=i(re),w5=n(re,"LI",{});var NOe=s(w5);e5e=n(NOe,"STRONG",{});var PGt=s(e5e);BOr=r(PGt,"t5"),PGt.forEach(t),NOr=r(NOe," \u2014 "),Lee=n(NOe,"A",{href:!0});var BGt=s(Lee);IOr=r(BGt,"FlaxT5Model"),BGt.forEach(t),qOr=r(NOe," (T5 model)"),NOe.forEach(t),jOr=i(re),A5=n(re,"LI",{});var IOe=s(A5);o5e=n(IOe,"STRONG",{});var NGt=s(o5e);DOr=r(NGt,"vision-text-dual-encoder"),NGt.forEach(t),GOr=r(IOe," \u2014 "),yee=n(IOe,"A",{href:!0});var IGt=s(yee);OOr=r(IGt,"FlaxVisionTextDualEncoderModel"),IGt.forEach(t),VOr=r(IOe," (VisionTextDualEncoder model)"),IOe.forEach(t),XOr=i(re),L5=n(re,"LI",{});var qOe=s(L5);r5e=n(qOe,"STRONG",{});var qGt=s(r5e);zOr=r(qGt,"vit"),qGt.forEach(t),QOr=r(qOe," \u2014 "),xee=n(qOe,"A",{href:!0});var jGt=s(xee);WOr=r(jGt,"FlaxViTModel"),jGt.forEach(t),HOr=r(qOe," (ViT model)"),qOe.forEach(t),UOr=i(re),y5=n(re,"LI",{});var jOe=s(y5);t5e=n(jOe,"STRONG",{});var DGt=s(t5e);JOr=r(DGt,"wav2vec2"),DGt.forEach(t),YOr=r(jOe," \u2014 "),$ee=n(jOe,"A",{href:!0});var GGt=s($ee);KOr=r(GGt,"FlaxWav2Vec2Model"),GGt.forEach(t),ZOr=r(jOe," (Wav2Vec2 model)"),jOe.forEach(t),eVr=i(re),x5=n(re,"LI",{});var DOe=s(x5);a5e=n(DOe,"STRONG",{});var OGt=s(a5e);oVr=r(OGt,"xglm"),OGt.forEach(t),rVr=r(DOe," \u2014 "),kee=n(DOe,"A",{href:!0});var VGt=s(kee);tVr=r(VGt,"FlaxXGLMModel"),VGt.forEach(t),aVr=r(DOe," (XGLM model)"),DOe.forEach(t),nVr=i(re),$5=n(re,"LI",{});var GOe=s($5);n5e=n(GOe,"STRONG",{});var XGt=s(n5e);sVr=r(XGt,"xlm-roberta"),XGt.forEach(t),lVr=r(GOe," \u2014 "),See=n(GOe,"A",{href:!0});var zGt=s(See);iVr=r(zGt,"FlaxXLMRobertaModel"),zGt.forEach(t),dVr=r(GOe," (XLM-RoBERTa model)"),GOe.forEach(t),re.forEach(t),cVr=i(ni),T(k5.$$.fragment,ni),ni.forEach(t),ai.forEach(t),oQe=i(f),Kc=n(f,"H2",{class:!0});var cHe=s(Kc);S5=n(cHe,"A",{id:!0,class:!0,href:!0});var QGt=s(S5);s5e=n(QGt,"SPAN",{});var WGt=s(s5e);T(u$.$$.fragment,WGt),WGt.forEach(t),QGt.forEach(t),fVr=i(cHe),l5e=n(cHe,"SPAN",{});var HGt=s(l5e);mVr=r(HGt,"FlaxAutoModelForCausalLM"),HGt.forEach(t),cHe.forEach(t),rQe=i(f),_r=n(f,"DIV",{class:!0});var si=s(_r);T(b$.$$.fragment,si),gVr=i(si),Zc=n(si,"P",{});var hae=s(Zc);hVr=r(hae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Ree=n(hae,"A",{href:!0});var UGt=s(Ree);pVr=r(UGt,"from_pretrained()"),UGt.forEach(t),_Vr=r(hae," class method or the "),Pee=n(hae,"A",{href:!0});var JGt=s(Pee);uVr=r(JGt,"from_config()"),JGt.forEach(t),bVr=r(hae,` class
method.`),hae.forEach(t),vVr=i(si),v$=n(si,"P",{});var fHe=s(v$);FVr=r(fHe,"This class cannot be instantiated directly using "),i5e=n(fHe,"CODE",{});var YGt=s(i5e);TVr=r(YGt,"__init__()"),YGt.forEach(t),MVr=r(fHe," (throws an error)."),fHe.forEach(t),EVr=i(si),Ht=n(si,"DIV",{class:!0});var I7=s(Ht);T(F$.$$.fragment,I7),CVr=i(I7),d5e=n(I7,"P",{});var KGt=s(d5e);wVr=r(KGt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),KGt.forEach(t),AVr=i(I7),ef=n(I7,"P",{});var pae=s(ef);LVr=r(pae,`Note:
Loading a model from its configuration file does `),c5e=n(pae,"STRONG",{});var ZGt=s(c5e);yVr=r(ZGt,"not"),ZGt.forEach(t),xVr=r(pae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Bee=n(pae,"A",{href:!0});var eOt=s(Bee);$Vr=r(eOt,"from_pretrained()"),eOt.forEach(t),kVr=r(pae," to load the model weights."),pae.forEach(t),SVr=i(I7),T(R5.$$.fragment,I7),I7.forEach(t),RVr=i(si),Xr=n(si,"DIV",{class:!0});var li=s(Xr);T(T$.$$.fragment,li),PVr=i(li),f5e=n(li,"P",{});var oOt=s(f5e);BVr=r(oOt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),oOt.forEach(t),NVr=i(li),Mn=n(li,"P",{});var q7=s(Mn);IVr=r(q7,"The model class to instantiate is selected based on the "),m5e=n(q7,"CODE",{});var rOt=s(m5e);qVr=r(rOt,"model_type"),rOt.forEach(t),jVr=r(q7,` property of the config object (either
passed as an argument or loaded from `),g5e=n(q7,"CODE",{});var tOt=s(g5e);DVr=r(tOt,"pretrained_model_name_or_path"),tOt.forEach(t),GVr=r(q7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h5e=n(q7,"CODE",{});var aOt=s(h5e);OVr=r(aOt,"pretrained_model_name_or_path"),aOt.forEach(t),VVr=r(q7,":"),q7.forEach(t),XVr=i(li),Ae=n(li,"UL",{});var Pe=s(Ae);P5=n(Pe,"LI",{});var OOe=s(P5);p5e=n(OOe,"STRONG",{});var nOt=s(p5e);zVr=r(nOt,"bart"),nOt.forEach(t),QVr=r(OOe," \u2014 "),Nee=n(OOe,"A",{href:!0});var sOt=s(Nee);WVr=r(sOt,"FlaxBartForCausalLM"),sOt.forEach(t),HVr=r(OOe," (BART model)"),OOe.forEach(t),UVr=i(Pe),B5=n(Pe,"LI",{});var VOe=s(B5);_5e=n(VOe,"STRONG",{});var lOt=s(_5e);JVr=r(lOt,"bert"),lOt.forEach(t),YVr=r(VOe," \u2014 "),Iee=n(VOe,"A",{href:!0});var iOt=s(Iee);KVr=r(iOt,"FlaxBertForCausalLM"),iOt.forEach(t),ZVr=r(VOe," (BERT model)"),VOe.forEach(t),eXr=i(Pe),N5=n(Pe,"LI",{});var XOe=s(N5);u5e=n(XOe,"STRONG",{});var dOt=s(u5e);oXr=r(dOt,"big_bird"),dOt.forEach(t),rXr=r(XOe," \u2014 "),qee=n(XOe,"A",{href:!0});var cOt=s(qee);tXr=r(cOt,"FlaxBigBirdForCausalLM"),cOt.forEach(t),aXr=r(XOe," (BigBird model)"),XOe.forEach(t),nXr=i(Pe),I5=n(Pe,"LI",{});var zOe=s(I5);b5e=n(zOe,"STRONG",{});var fOt=s(b5e);sXr=r(fOt,"bloom"),fOt.forEach(t),lXr=r(zOe," \u2014 "),jee=n(zOe,"A",{href:!0});var mOt=s(jee);iXr=r(mOt,"FlaxBloomForCausalLM"),mOt.forEach(t),dXr=r(zOe," (BLOOM model)"),zOe.forEach(t),cXr=i(Pe),q5=n(Pe,"LI",{});var QOe=s(q5);v5e=n(QOe,"STRONG",{});var gOt=s(v5e);fXr=r(gOt,"electra"),gOt.forEach(t),mXr=r(QOe," \u2014 "),Dee=n(QOe,"A",{href:!0});var hOt=s(Dee);gXr=r(hOt,"FlaxElectraForCausalLM"),hOt.forEach(t),hXr=r(QOe," (ELECTRA model)"),QOe.forEach(t),pXr=i(Pe),j5=n(Pe,"LI",{});var WOe=s(j5);F5e=n(WOe,"STRONG",{});var pOt=s(F5e);_Xr=r(pOt,"gpt2"),pOt.forEach(t),uXr=r(WOe," \u2014 "),Gee=n(WOe,"A",{href:!0});var _Ot=s(Gee);bXr=r(_Ot,"FlaxGPT2LMHeadModel"),_Ot.forEach(t),vXr=r(WOe," (OpenAI GPT-2 model)"),WOe.forEach(t),FXr=i(Pe),D5=n(Pe,"LI",{});var HOe=s(D5);T5e=n(HOe,"STRONG",{});var uOt=s(T5e);TXr=r(uOt,"gpt_neo"),uOt.forEach(t),MXr=r(HOe," \u2014 "),Oee=n(HOe,"A",{href:!0});var bOt=s(Oee);EXr=r(bOt,"FlaxGPTNeoForCausalLM"),bOt.forEach(t),CXr=r(HOe," (GPT Neo model)"),HOe.forEach(t),wXr=i(Pe),G5=n(Pe,"LI",{});var UOe=s(G5);M5e=n(UOe,"STRONG",{});var vOt=s(M5e);AXr=r(vOt,"gptj"),vOt.forEach(t),LXr=r(UOe," \u2014 "),Vee=n(UOe,"A",{href:!0});var FOt=s(Vee);yXr=r(FOt,"FlaxGPTJForCausalLM"),FOt.forEach(t),xXr=r(UOe," (GPT-J model)"),UOe.forEach(t),$Xr=i(Pe),O5=n(Pe,"LI",{});var JOe=s(O5);E5e=n(JOe,"STRONG",{});var TOt=s(E5e);kXr=r(TOt,"opt"),TOt.forEach(t),SXr=r(JOe," \u2014 "),Xee=n(JOe,"A",{href:!0});var MOt=s(Xee);RXr=r(MOt,"FlaxOPTForCausalLM"),MOt.forEach(t),PXr=r(JOe," (OPT model)"),JOe.forEach(t),BXr=i(Pe),V5=n(Pe,"LI",{});var YOe=s(V5);C5e=n(YOe,"STRONG",{});var EOt=s(C5e);NXr=r(EOt,"roberta"),EOt.forEach(t),IXr=r(YOe," \u2014 "),zee=n(YOe,"A",{href:!0});var COt=s(zee);qXr=r(COt,"FlaxRobertaForCausalLM"),COt.forEach(t),jXr=r(YOe," (RoBERTa model)"),YOe.forEach(t),DXr=i(Pe),X5=n(Pe,"LI",{});var KOe=s(X5);w5e=n(KOe,"STRONG",{});var wOt=s(w5e);GXr=r(wOt,"xglm"),wOt.forEach(t),OXr=r(KOe," \u2014 "),Qee=n(KOe,"A",{href:!0});var AOt=s(Qee);VXr=r(AOt,"FlaxXGLMForCausalLM"),AOt.forEach(t),XXr=r(KOe," (XGLM model)"),KOe.forEach(t),Pe.forEach(t),zXr=i(li),T(z5.$$.fragment,li),li.forEach(t),si.forEach(t),tQe=i(f),of=n(f,"H2",{class:!0});var mHe=s(of);Q5=n(mHe,"A",{id:!0,class:!0,href:!0});var LOt=s(Q5);A5e=n(LOt,"SPAN",{});var yOt=s(A5e);T(M$.$$.fragment,yOt),yOt.forEach(t),LOt.forEach(t),QXr=i(mHe),L5e=n(mHe,"SPAN",{});var xOt=s(L5e);WXr=r(xOt,"FlaxAutoModelForPreTraining"),xOt.forEach(t),mHe.forEach(t),aQe=i(f),ur=n(f,"DIV",{class:!0});var ii=s(ur);T(E$.$$.fragment,ii),HXr=i(ii),rf=n(ii,"P",{});var _ae=s(rf);UXr=r(_ae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Wee=n(_ae,"A",{href:!0});var $Ot=s(Wee);JXr=r($Ot,"from_pretrained()"),$Ot.forEach(t),YXr=r(_ae," class method or the "),Hee=n(_ae,"A",{href:!0});var kOt=s(Hee);KXr=r(kOt,"from_config()"),kOt.forEach(t),ZXr=r(_ae,` class
method.`),_ae.forEach(t),ezr=i(ii),C$=n(ii,"P",{});var gHe=s(C$);ozr=r(gHe,"This class cannot be instantiated directly using "),y5e=n(gHe,"CODE",{});var SOt=s(y5e);rzr=r(SOt,"__init__()"),SOt.forEach(t),tzr=r(gHe," (throws an error)."),gHe.forEach(t),azr=i(ii),Ut=n(ii,"DIV",{class:!0});var j7=s(Ut);T(w$.$$.fragment,j7),nzr=i(j7),x5e=n(j7,"P",{});var ROt=s(x5e);szr=r(ROt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),ROt.forEach(t),lzr=i(j7),tf=n(j7,"P",{});var uae=s(tf);izr=r(uae,`Note:
Loading a model from its configuration file does `),$5e=n(uae,"STRONG",{});var POt=s($5e);dzr=r(POt,"not"),POt.forEach(t),czr=r(uae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Uee=n(uae,"A",{href:!0});var BOt=s(Uee);fzr=r(BOt,"from_pretrained()"),BOt.forEach(t),mzr=r(uae," to load the model weights."),uae.forEach(t),gzr=i(j7),T(W5.$$.fragment,j7),j7.forEach(t),hzr=i(ii),zr=n(ii,"DIV",{class:!0});var di=s(zr);T(A$.$$.fragment,di),pzr=i(di),k5e=n(di,"P",{});var NOt=s(k5e);_zr=r(NOt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),NOt.forEach(t),uzr=i(di),En=n(di,"P",{});var D7=s(En);bzr=r(D7,"The model class to instantiate is selected based on the "),S5e=n(D7,"CODE",{});var IOt=s(S5e);vzr=r(IOt,"model_type"),IOt.forEach(t),Fzr=r(D7,` property of the config object (either
passed as an argument or loaded from `),R5e=n(D7,"CODE",{});var qOt=s(R5e);Tzr=r(qOt,"pretrained_model_name_or_path"),qOt.forEach(t),Mzr=r(D7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P5e=n(D7,"CODE",{});var jOt=s(P5e);Ezr=r(jOt,"pretrained_model_name_or_path"),jOt.forEach(t),Czr=r(D7,":"),D7.forEach(t),wzr=i(di),Ee=n(di,"UL",{});var we=s(Ee);H5=n(we,"LI",{});var ZOe=s(H5);B5e=n(ZOe,"STRONG",{});var DOt=s(B5e);Azr=r(DOt,"albert"),DOt.forEach(t),Lzr=r(ZOe," \u2014 "),Jee=n(ZOe,"A",{href:!0});var GOt=s(Jee);yzr=r(GOt,"FlaxAlbertForPreTraining"),GOt.forEach(t),xzr=r(ZOe," (ALBERT model)"),ZOe.forEach(t),$zr=i(we),U5=n(we,"LI",{});var eVe=s(U5);N5e=n(eVe,"STRONG",{});var OOt=s(N5e);kzr=r(OOt,"bart"),OOt.forEach(t),Szr=r(eVe," \u2014 "),Yee=n(eVe,"A",{href:!0});var VOt=s(Yee);Rzr=r(VOt,"FlaxBartForConditionalGeneration"),VOt.forEach(t),Pzr=r(eVe," (BART model)"),eVe.forEach(t),Bzr=i(we),J5=n(we,"LI",{});var oVe=s(J5);I5e=n(oVe,"STRONG",{});var XOt=s(I5e);Nzr=r(XOt,"bert"),XOt.forEach(t),Izr=r(oVe," \u2014 "),Kee=n(oVe,"A",{href:!0});var zOt=s(Kee);qzr=r(zOt,"FlaxBertForPreTraining"),zOt.forEach(t),jzr=r(oVe," (BERT model)"),oVe.forEach(t),Dzr=i(we),Y5=n(we,"LI",{});var rVe=s(Y5);q5e=n(rVe,"STRONG",{});var QOt=s(q5e);Gzr=r(QOt,"big_bird"),QOt.forEach(t),Ozr=r(rVe," \u2014 "),Zee=n(rVe,"A",{href:!0});var WOt=s(Zee);Vzr=r(WOt,"FlaxBigBirdForPreTraining"),WOt.forEach(t),Xzr=r(rVe," (BigBird model)"),rVe.forEach(t),zzr=i(we),K5=n(we,"LI",{});var tVe=s(K5);j5e=n(tVe,"STRONG",{});var HOt=s(j5e);Qzr=r(HOt,"electra"),HOt.forEach(t),Wzr=r(tVe," \u2014 "),eoe=n(tVe,"A",{href:!0});var UOt=s(eoe);Hzr=r(UOt,"FlaxElectraForPreTraining"),UOt.forEach(t),Uzr=r(tVe," (ELECTRA model)"),tVe.forEach(t),Jzr=i(we),Z5=n(we,"LI",{});var aVe=s(Z5);D5e=n(aVe,"STRONG",{});var JOt=s(D5e);Yzr=r(JOt,"longt5"),JOt.forEach(t),Kzr=r(aVe," \u2014 "),ooe=n(aVe,"A",{href:!0});var YOt=s(ooe);Zzr=r(YOt,"FlaxLongT5ForConditionalGeneration"),YOt.forEach(t),eQr=r(aVe," (LongT5 model)"),aVe.forEach(t),oQr=i(we),ew=n(we,"LI",{});var nVe=s(ew);G5e=n(nVe,"STRONG",{});var KOt=s(G5e);rQr=r(KOt,"mbart"),KOt.forEach(t),tQr=r(nVe," \u2014 "),roe=n(nVe,"A",{href:!0});var ZOt=s(roe);aQr=r(ZOt,"FlaxMBartForConditionalGeneration"),ZOt.forEach(t),nQr=r(nVe," (mBART model)"),nVe.forEach(t),sQr=i(we),ow=n(we,"LI",{});var sVe=s(ow);O5e=n(sVe,"STRONG",{});var eVt=s(O5e);lQr=r(eVt,"mt5"),eVt.forEach(t),iQr=r(sVe," \u2014 "),toe=n(sVe,"A",{href:!0});var oVt=s(toe);dQr=r(oVt,"FlaxMT5ForConditionalGeneration"),oVt.forEach(t),cQr=r(sVe," (MT5 model)"),sVe.forEach(t),fQr=i(we),rw=n(we,"LI",{});var lVe=s(rw);V5e=n(lVe,"STRONG",{});var rVt=s(V5e);mQr=r(rVt,"roberta"),rVt.forEach(t),gQr=r(lVe," \u2014 "),aoe=n(lVe,"A",{href:!0});var tVt=s(aoe);hQr=r(tVt,"FlaxRobertaForMaskedLM"),tVt.forEach(t),pQr=r(lVe," (RoBERTa model)"),lVe.forEach(t),_Qr=i(we),tw=n(we,"LI",{});var iVe=s(tw);X5e=n(iVe,"STRONG",{});var aVt=s(X5e);uQr=r(aVt,"roformer"),aVt.forEach(t),bQr=r(iVe," \u2014 "),noe=n(iVe,"A",{href:!0});var nVt=s(noe);vQr=r(nVt,"FlaxRoFormerForMaskedLM"),nVt.forEach(t),FQr=r(iVe," (RoFormer model)"),iVe.forEach(t),TQr=i(we),aw=n(we,"LI",{});var dVe=s(aw);z5e=n(dVe,"STRONG",{});var sVt=s(z5e);MQr=r(sVt,"t5"),sVt.forEach(t),EQr=r(dVe," \u2014 "),soe=n(dVe,"A",{href:!0});var lVt=s(soe);CQr=r(lVt,"FlaxT5ForConditionalGeneration"),lVt.forEach(t),wQr=r(dVe," (T5 model)"),dVe.forEach(t),AQr=i(we),nw=n(we,"LI",{});var cVe=s(nw);Q5e=n(cVe,"STRONG",{});var iVt=s(Q5e);LQr=r(iVt,"wav2vec2"),iVt.forEach(t),yQr=r(cVe," \u2014 "),loe=n(cVe,"A",{href:!0});var dVt=s(loe);xQr=r(dVt,"FlaxWav2Vec2ForPreTraining"),dVt.forEach(t),$Qr=r(cVe," (Wav2Vec2 model)"),cVe.forEach(t),kQr=i(we),sw=n(we,"LI",{});var fVe=s(sw);W5e=n(fVe,"STRONG",{});var cVt=s(W5e);SQr=r(cVt,"xlm-roberta"),cVt.forEach(t),RQr=r(fVe," \u2014 "),ioe=n(fVe,"A",{href:!0});var fVt=s(ioe);PQr=r(fVt,"FlaxXLMRobertaForMaskedLM"),fVt.forEach(t),BQr=r(fVe," (XLM-RoBERTa model)"),fVe.forEach(t),we.forEach(t),NQr=i(di),T(lw.$$.fragment,di),di.forEach(t),ii.forEach(t),nQe=i(f),af=n(f,"H2",{class:!0});var hHe=s(af);iw=n(hHe,"A",{id:!0,class:!0,href:!0});var mVt=s(iw);H5e=n(mVt,"SPAN",{});var gVt=s(H5e);T(L$.$$.fragment,gVt),gVt.forEach(t),mVt.forEach(t),IQr=i(hHe),U5e=n(hHe,"SPAN",{});var hVt=s(U5e);qQr=r(hVt,"FlaxAutoModelForMaskedLM"),hVt.forEach(t),hHe.forEach(t),sQe=i(f),br=n(f,"DIV",{class:!0});var ci=s(br);T(y$.$$.fragment,ci),jQr=i(ci),nf=n(ci,"P",{});var bae=s(nf);DQr=r(bae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),doe=n(bae,"A",{href:!0});var pVt=s(doe);GQr=r(pVt,"from_pretrained()"),pVt.forEach(t),OQr=r(bae," class method or the "),coe=n(bae,"A",{href:!0});var _Vt=s(coe);VQr=r(_Vt,"from_config()"),_Vt.forEach(t),XQr=r(bae,` class
method.`),bae.forEach(t),zQr=i(ci),x$=n(ci,"P",{});var pHe=s(x$);QQr=r(pHe,"This class cannot be instantiated directly using "),J5e=n(pHe,"CODE",{});var uVt=s(J5e);WQr=r(uVt,"__init__()"),uVt.forEach(t),HQr=r(pHe," (throws an error)."),pHe.forEach(t),UQr=i(ci),Jt=n(ci,"DIV",{class:!0});var G7=s(Jt);T($$.$$.fragment,G7),JQr=i(G7),Y5e=n(G7,"P",{});var bVt=s(Y5e);YQr=r(bVt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),bVt.forEach(t),KQr=i(G7),sf=n(G7,"P",{});var vae=s(sf);ZQr=r(vae,`Note:
Loading a model from its configuration file does `),K5e=n(vae,"STRONG",{});var vVt=s(K5e);eWr=r(vVt,"not"),vVt.forEach(t),oWr=r(vae,` load the model weights. It only affects the
model\u2019s configuration. Use `),foe=n(vae,"A",{href:!0});var FVt=s(foe);rWr=r(FVt,"from_pretrained()"),FVt.forEach(t),tWr=r(vae," to load the model weights."),vae.forEach(t),aWr=i(G7),T(dw.$$.fragment,G7),G7.forEach(t),nWr=i(ci),Qr=n(ci,"DIV",{class:!0});var fi=s(Qr);T(k$.$$.fragment,fi),sWr=i(fi),Z5e=n(fi,"P",{});var TVt=s(Z5e);lWr=r(TVt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),TVt.forEach(t),iWr=i(fi),Cn=n(fi,"P",{});var O7=s(Cn);dWr=r(O7,"The model class to instantiate is selected based on the "),ewe=n(O7,"CODE",{});var MVt=s(ewe);cWr=r(MVt,"model_type"),MVt.forEach(t),fWr=r(O7,` property of the config object (either
passed as an argument or loaded from `),owe=n(O7,"CODE",{});var EVt=s(owe);mWr=r(EVt,"pretrained_model_name_or_path"),EVt.forEach(t),gWr=r(O7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rwe=n(O7,"CODE",{});var CVt=s(rwe);hWr=r(CVt,"pretrained_model_name_or_path"),CVt.forEach(t),pWr=r(O7,":"),O7.forEach(t),_Wr=i(fi),$e=n(fi,"UL",{});var qe=s($e);cw=n(qe,"LI",{});var mVe=s(cw);twe=n(mVe,"STRONG",{});var wVt=s(twe);uWr=r(wVt,"albert"),wVt.forEach(t),bWr=r(mVe," \u2014 "),moe=n(mVe,"A",{href:!0});var AVt=s(moe);vWr=r(AVt,"FlaxAlbertForMaskedLM"),AVt.forEach(t),FWr=r(mVe," (ALBERT model)"),mVe.forEach(t),TWr=i(qe),fw=n(qe,"LI",{});var gVe=s(fw);awe=n(gVe,"STRONG",{});var LVt=s(awe);MWr=r(LVt,"bart"),LVt.forEach(t),EWr=r(gVe," \u2014 "),goe=n(gVe,"A",{href:!0});var yVt=s(goe);CWr=r(yVt,"FlaxBartForConditionalGeneration"),yVt.forEach(t),wWr=r(gVe," (BART model)"),gVe.forEach(t),AWr=i(qe),mw=n(qe,"LI",{});var hVe=s(mw);nwe=n(hVe,"STRONG",{});var xVt=s(nwe);LWr=r(xVt,"bert"),xVt.forEach(t),yWr=r(hVe," \u2014 "),hoe=n(hVe,"A",{href:!0});var $Vt=s(hoe);xWr=r($Vt,"FlaxBertForMaskedLM"),$Vt.forEach(t),$Wr=r(hVe," (BERT model)"),hVe.forEach(t),kWr=i(qe),gw=n(qe,"LI",{});var pVe=s(gw);swe=n(pVe,"STRONG",{});var kVt=s(swe);SWr=r(kVt,"big_bird"),kVt.forEach(t),RWr=r(pVe," \u2014 "),poe=n(pVe,"A",{href:!0});var SVt=s(poe);PWr=r(SVt,"FlaxBigBirdForMaskedLM"),SVt.forEach(t),BWr=r(pVe," (BigBird model)"),pVe.forEach(t),NWr=i(qe),hw=n(qe,"LI",{});var _Ve=s(hw);lwe=n(_Ve,"STRONG",{});var RVt=s(lwe);IWr=r(RVt,"distilbert"),RVt.forEach(t),qWr=r(_Ve," \u2014 "),_oe=n(_Ve,"A",{href:!0});var PVt=s(_oe);jWr=r(PVt,"FlaxDistilBertForMaskedLM"),PVt.forEach(t),DWr=r(_Ve," (DistilBERT model)"),_Ve.forEach(t),GWr=i(qe),pw=n(qe,"LI",{});var uVe=s(pw);iwe=n(uVe,"STRONG",{});var BVt=s(iwe);OWr=r(BVt,"electra"),BVt.forEach(t),VWr=r(uVe," \u2014 "),uoe=n(uVe,"A",{href:!0});var NVt=s(uoe);XWr=r(NVt,"FlaxElectraForMaskedLM"),NVt.forEach(t),zWr=r(uVe," (ELECTRA model)"),uVe.forEach(t),QWr=i(qe),_w=n(qe,"LI",{});var bVe=s(_w);dwe=n(bVe,"STRONG",{});var IVt=s(dwe);WWr=r(IVt,"mbart"),IVt.forEach(t),HWr=r(bVe," \u2014 "),boe=n(bVe,"A",{href:!0});var qVt=s(boe);UWr=r(qVt,"FlaxMBartForConditionalGeneration"),qVt.forEach(t),JWr=r(bVe," (mBART model)"),bVe.forEach(t),YWr=i(qe),uw=n(qe,"LI",{});var vVe=s(uw);cwe=n(vVe,"STRONG",{});var jVt=s(cwe);KWr=r(jVt,"roberta"),jVt.forEach(t),ZWr=r(vVe," \u2014 "),voe=n(vVe,"A",{href:!0});var DVt=s(voe);eHr=r(DVt,"FlaxRobertaForMaskedLM"),DVt.forEach(t),oHr=r(vVe," (RoBERTa model)"),vVe.forEach(t),rHr=i(qe),bw=n(qe,"LI",{});var FVe=s(bw);fwe=n(FVe,"STRONG",{});var GVt=s(fwe);tHr=r(GVt,"roformer"),GVt.forEach(t),aHr=r(FVe," \u2014 "),Foe=n(FVe,"A",{href:!0});var OVt=s(Foe);nHr=r(OVt,"FlaxRoFormerForMaskedLM"),OVt.forEach(t),sHr=r(FVe," (RoFormer model)"),FVe.forEach(t),lHr=i(qe),vw=n(qe,"LI",{});var TVe=s(vw);mwe=n(TVe,"STRONG",{});var VVt=s(mwe);iHr=r(VVt,"xlm-roberta"),VVt.forEach(t),dHr=r(TVe," \u2014 "),Toe=n(TVe,"A",{href:!0});var XVt=s(Toe);cHr=r(XVt,"FlaxXLMRobertaForMaskedLM"),XVt.forEach(t),fHr=r(TVe," (XLM-RoBERTa model)"),TVe.forEach(t),qe.forEach(t),mHr=i(fi),T(Fw.$$.fragment,fi),fi.forEach(t),ci.forEach(t),lQe=i(f),lf=n(f,"H2",{class:!0});var _He=s(lf);Tw=n(_He,"A",{id:!0,class:!0,href:!0});var zVt=s(Tw);gwe=n(zVt,"SPAN",{});var QVt=s(gwe);T(S$.$$.fragment,QVt),QVt.forEach(t),zVt.forEach(t),gHr=i(_He),hwe=n(_He,"SPAN",{});var WVt=s(hwe);hHr=r(WVt,"FlaxAutoModelForSeq2SeqLM"),WVt.forEach(t),_He.forEach(t),iQe=i(f),vr=n(f,"DIV",{class:!0});var mi=s(vr);T(R$.$$.fragment,mi),pHr=i(mi),df=n(mi,"P",{});var Fae=s(df);_Hr=r(Fae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Moe=n(Fae,"A",{href:!0});var HVt=s(Moe);uHr=r(HVt,"from_pretrained()"),HVt.forEach(t),bHr=r(Fae," class method or the "),Eoe=n(Fae,"A",{href:!0});var UVt=s(Eoe);vHr=r(UVt,"from_config()"),UVt.forEach(t),FHr=r(Fae,` class
method.`),Fae.forEach(t),THr=i(mi),P$=n(mi,"P",{});var uHe=s(P$);MHr=r(uHe,"This class cannot be instantiated directly using "),pwe=n(uHe,"CODE",{});var JVt=s(pwe);EHr=r(JVt,"__init__()"),JVt.forEach(t),CHr=r(uHe," (throws an error)."),uHe.forEach(t),wHr=i(mi),Yt=n(mi,"DIV",{class:!0});var V7=s(Yt);T(B$.$$.fragment,V7),AHr=i(V7),_we=n(V7,"P",{});var YVt=s(_we);LHr=r(YVt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),YVt.forEach(t),yHr=i(V7),cf=n(V7,"P",{});var Tae=s(cf);xHr=r(Tae,`Note:
Loading a model from its configuration file does `),uwe=n(Tae,"STRONG",{});var KVt=s(uwe);$Hr=r(KVt,"not"),KVt.forEach(t),kHr=r(Tae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Coe=n(Tae,"A",{href:!0});var ZVt=s(Coe);SHr=r(ZVt,"from_pretrained()"),ZVt.forEach(t),RHr=r(Tae," to load the model weights."),Tae.forEach(t),PHr=i(V7),T(Mw.$$.fragment,V7),V7.forEach(t),BHr=i(mi),Wr=n(mi,"DIV",{class:!0});var gi=s(Wr);T(N$.$$.fragment,gi),NHr=i(gi),bwe=n(gi,"P",{});var eXt=s(bwe);IHr=r(eXt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),eXt.forEach(t),qHr=i(gi),wn=n(gi,"P",{});var X7=s(wn);jHr=r(X7,"The model class to instantiate is selected based on the "),vwe=n(X7,"CODE",{});var oXt=s(vwe);DHr=r(oXt,"model_type"),oXt.forEach(t),GHr=r(X7,` property of the config object (either
passed as an argument or loaded from `),Fwe=n(X7,"CODE",{});var rXt=s(Fwe);OHr=r(rXt,"pretrained_model_name_or_path"),rXt.forEach(t),VHr=r(X7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Twe=n(X7,"CODE",{});var tXt=s(Twe);XHr=r(tXt,"pretrained_model_name_or_path"),tXt.forEach(t),zHr=r(X7,":"),X7.forEach(t),QHr=i(gi),ke=n(gi,"UL",{});var je=s(ke);Ew=n(je,"LI",{});var MVe=s(Ew);Mwe=n(MVe,"STRONG",{});var aXt=s(Mwe);WHr=r(aXt,"bart"),aXt.forEach(t),HHr=r(MVe," \u2014 "),woe=n(MVe,"A",{href:!0});var nXt=s(woe);UHr=r(nXt,"FlaxBartForConditionalGeneration"),nXt.forEach(t),JHr=r(MVe," (BART model)"),MVe.forEach(t),YHr=i(je),Cw=n(je,"LI",{});var EVe=s(Cw);Ewe=n(EVe,"STRONG",{});var sXt=s(Ewe);KHr=r(sXt,"blenderbot"),sXt.forEach(t),ZHr=r(EVe," \u2014 "),Aoe=n(EVe,"A",{href:!0});var lXt=s(Aoe);eUr=r(lXt,"FlaxBlenderbotForConditionalGeneration"),lXt.forEach(t),oUr=r(EVe," (Blenderbot model)"),EVe.forEach(t),rUr=i(je),ww=n(je,"LI",{});var CVe=s(ww);Cwe=n(CVe,"STRONG",{});var iXt=s(Cwe);tUr=r(iXt,"blenderbot-small"),iXt.forEach(t),aUr=r(CVe," \u2014 "),Loe=n(CVe,"A",{href:!0});var dXt=s(Loe);nUr=r(dXt,"FlaxBlenderbotSmallForConditionalGeneration"),dXt.forEach(t),sUr=r(CVe," (BlenderbotSmall model)"),CVe.forEach(t),lUr=i(je),Aw=n(je,"LI",{});var wVe=s(Aw);wwe=n(wVe,"STRONG",{});var cXt=s(wwe);iUr=r(cXt,"encoder-decoder"),cXt.forEach(t),dUr=r(wVe," \u2014 "),yoe=n(wVe,"A",{href:!0});var fXt=s(yoe);cUr=r(fXt,"FlaxEncoderDecoderModel"),fXt.forEach(t),fUr=r(wVe," (Encoder decoder model)"),wVe.forEach(t),mUr=i(je),Lw=n(je,"LI",{});var AVe=s(Lw);Awe=n(AVe,"STRONG",{});var mXt=s(Awe);gUr=r(mXt,"longt5"),mXt.forEach(t),hUr=r(AVe," \u2014 "),xoe=n(AVe,"A",{href:!0});var gXt=s(xoe);pUr=r(gXt,"FlaxLongT5ForConditionalGeneration"),gXt.forEach(t),_Ur=r(AVe," (LongT5 model)"),AVe.forEach(t),uUr=i(je),yw=n(je,"LI",{});var LVe=s(yw);Lwe=n(LVe,"STRONG",{});var hXt=s(Lwe);bUr=r(hXt,"marian"),hXt.forEach(t),vUr=r(LVe," \u2014 "),$oe=n(LVe,"A",{href:!0});var pXt=s($oe);FUr=r(pXt,"FlaxMarianMTModel"),pXt.forEach(t),TUr=r(LVe," (Marian model)"),LVe.forEach(t),MUr=i(je),xw=n(je,"LI",{});var yVe=s(xw);ywe=n(yVe,"STRONG",{});var _Xt=s(ywe);EUr=r(_Xt,"mbart"),_Xt.forEach(t),CUr=r(yVe," \u2014 "),koe=n(yVe,"A",{href:!0});var uXt=s(koe);wUr=r(uXt,"FlaxMBartForConditionalGeneration"),uXt.forEach(t),AUr=r(yVe," (mBART model)"),yVe.forEach(t),LUr=i(je),$w=n(je,"LI",{});var xVe=s($w);xwe=n(xVe,"STRONG",{});var bXt=s(xwe);yUr=r(bXt,"mt5"),bXt.forEach(t),xUr=r(xVe," \u2014 "),Soe=n(xVe,"A",{href:!0});var vXt=s(Soe);$Ur=r(vXt,"FlaxMT5ForConditionalGeneration"),vXt.forEach(t),kUr=r(xVe," (MT5 model)"),xVe.forEach(t),SUr=i(je),kw=n(je,"LI",{});var $Ve=s(kw);$we=n($Ve,"STRONG",{});var FXt=s($we);RUr=r(FXt,"pegasus"),FXt.forEach(t),PUr=r($Ve," \u2014 "),Roe=n($Ve,"A",{href:!0});var TXt=s(Roe);BUr=r(TXt,"FlaxPegasusForConditionalGeneration"),TXt.forEach(t),NUr=r($Ve," (Pegasus model)"),$Ve.forEach(t),IUr=i(je),Sw=n(je,"LI",{});var kVe=s(Sw);kwe=n(kVe,"STRONG",{});var MXt=s(kwe);qUr=r(MXt,"t5"),MXt.forEach(t),jUr=r(kVe," \u2014 "),Poe=n(kVe,"A",{href:!0});var EXt=s(Poe);DUr=r(EXt,"FlaxT5ForConditionalGeneration"),EXt.forEach(t),GUr=r(kVe," (T5 model)"),kVe.forEach(t),je.forEach(t),OUr=i(gi),T(Rw.$$.fragment,gi),gi.forEach(t),mi.forEach(t),dQe=i(f),ff=n(f,"H2",{class:!0});var bHe=s(ff);Pw=n(bHe,"A",{id:!0,class:!0,href:!0});var CXt=s(Pw);Swe=n(CXt,"SPAN",{});var wXt=s(Swe);T(I$.$$.fragment,wXt),wXt.forEach(t),CXt.forEach(t),VUr=i(bHe),Rwe=n(bHe,"SPAN",{});var AXt=s(Rwe);XUr=r(AXt,"FlaxAutoModelForSequenceClassification"),AXt.forEach(t),bHe.forEach(t),cQe=i(f),Fr=n(f,"DIV",{class:!0});var hi=s(Fr);T(q$.$$.fragment,hi),zUr=i(hi),mf=n(hi,"P",{});var Mae=s(mf);QUr=r(Mae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Boe=n(Mae,"A",{href:!0});var LXt=s(Boe);WUr=r(LXt,"from_pretrained()"),LXt.forEach(t),HUr=r(Mae," class method or the "),Noe=n(Mae,"A",{href:!0});var yXt=s(Noe);UUr=r(yXt,"from_config()"),yXt.forEach(t),JUr=r(Mae,` class
method.`),Mae.forEach(t),YUr=i(hi),j$=n(hi,"P",{});var vHe=s(j$);KUr=r(vHe,"This class cannot be instantiated directly using "),Pwe=n(vHe,"CODE",{});var xXt=s(Pwe);ZUr=r(xXt,"__init__()"),xXt.forEach(t),eJr=r(vHe," (throws an error)."),vHe.forEach(t),oJr=i(hi),Kt=n(hi,"DIV",{class:!0});var z7=s(Kt);T(D$.$$.fragment,z7),rJr=i(z7),Bwe=n(z7,"P",{});var $Xt=s(Bwe);tJr=r($Xt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),$Xt.forEach(t),aJr=i(z7),gf=n(z7,"P",{});var Eae=s(gf);nJr=r(Eae,`Note:
Loading a model from its configuration file does `),Nwe=n(Eae,"STRONG",{});var kXt=s(Nwe);sJr=r(kXt,"not"),kXt.forEach(t),lJr=r(Eae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ioe=n(Eae,"A",{href:!0});var SXt=s(Ioe);iJr=r(SXt,"from_pretrained()"),SXt.forEach(t),dJr=r(Eae," to load the model weights."),Eae.forEach(t),cJr=i(z7),T(Bw.$$.fragment,z7),z7.forEach(t),fJr=i(hi),Hr=n(hi,"DIV",{class:!0});var pi=s(Hr);T(G$.$$.fragment,pi),mJr=i(pi),Iwe=n(pi,"P",{});var RXt=s(Iwe);gJr=r(RXt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),RXt.forEach(t),hJr=i(pi),An=n(pi,"P",{});var Q7=s(An);pJr=r(Q7,"The model class to instantiate is selected based on the "),qwe=n(Q7,"CODE",{});var PXt=s(qwe);_Jr=r(PXt,"model_type"),PXt.forEach(t),uJr=r(Q7,` property of the config object (either
passed as an argument or loaded from `),jwe=n(Q7,"CODE",{});var BXt=s(jwe);bJr=r(BXt,"pretrained_model_name_or_path"),BXt.forEach(t),vJr=r(Q7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dwe=n(Q7,"CODE",{});var NXt=s(Dwe);FJr=r(NXt,"pretrained_model_name_or_path"),NXt.forEach(t),TJr=r(Q7,":"),Q7.forEach(t),MJr=i(pi),Se=n(pi,"UL",{});var De=s(Se);Nw=n(De,"LI",{});var SVe=s(Nw);Gwe=n(SVe,"STRONG",{});var IXt=s(Gwe);EJr=r(IXt,"albert"),IXt.forEach(t),CJr=r(SVe," \u2014 "),qoe=n(SVe,"A",{href:!0});var qXt=s(qoe);wJr=r(qXt,"FlaxAlbertForSequenceClassification"),qXt.forEach(t),AJr=r(SVe," (ALBERT model)"),SVe.forEach(t),LJr=i(De),Iw=n(De,"LI",{});var RVe=s(Iw);Owe=n(RVe,"STRONG",{});var jXt=s(Owe);yJr=r(jXt,"bart"),jXt.forEach(t),xJr=r(RVe," \u2014 "),joe=n(RVe,"A",{href:!0});var DXt=s(joe);$Jr=r(DXt,"FlaxBartForSequenceClassification"),DXt.forEach(t),kJr=r(RVe," (BART model)"),RVe.forEach(t),SJr=i(De),qw=n(De,"LI",{});var PVe=s(qw);Vwe=n(PVe,"STRONG",{});var GXt=s(Vwe);RJr=r(GXt,"bert"),GXt.forEach(t),PJr=r(PVe," \u2014 "),Doe=n(PVe,"A",{href:!0});var OXt=s(Doe);BJr=r(OXt,"FlaxBertForSequenceClassification"),OXt.forEach(t),NJr=r(PVe," (BERT model)"),PVe.forEach(t),IJr=i(De),jw=n(De,"LI",{});var BVe=s(jw);Xwe=n(BVe,"STRONG",{});var VXt=s(Xwe);qJr=r(VXt,"big_bird"),VXt.forEach(t),jJr=r(BVe," \u2014 "),Goe=n(BVe,"A",{href:!0});var XXt=s(Goe);DJr=r(XXt,"FlaxBigBirdForSequenceClassification"),XXt.forEach(t),GJr=r(BVe," (BigBird model)"),BVe.forEach(t),OJr=i(De),Dw=n(De,"LI",{});var NVe=s(Dw);zwe=n(NVe,"STRONG",{});var zXt=s(zwe);VJr=r(zXt,"distilbert"),zXt.forEach(t),XJr=r(NVe," \u2014 "),Ooe=n(NVe,"A",{href:!0});var QXt=s(Ooe);zJr=r(QXt,"FlaxDistilBertForSequenceClassification"),QXt.forEach(t),QJr=r(NVe," (DistilBERT model)"),NVe.forEach(t),WJr=i(De),Gw=n(De,"LI",{});var IVe=s(Gw);Qwe=n(IVe,"STRONG",{});var WXt=s(Qwe);HJr=r(WXt,"electra"),WXt.forEach(t),UJr=r(IVe," \u2014 "),Voe=n(IVe,"A",{href:!0});var HXt=s(Voe);JJr=r(HXt,"FlaxElectraForSequenceClassification"),HXt.forEach(t),YJr=r(IVe," (ELECTRA model)"),IVe.forEach(t),KJr=i(De),Ow=n(De,"LI",{});var qVe=s(Ow);Wwe=n(qVe,"STRONG",{});var UXt=s(Wwe);ZJr=r(UXt,"mbart"),UXt.forEach(t),eYr=r(qVe," \u2014 "),Xoe=n(qVe,"A",{href:!0});var JXt=s(Xoe);oYr=r(JXt,"FlaxMBartForSequenceClassification"),JXt.forEach(t),rYr=r(qVe," (mBART model)"),qVe.forEach(t),tYr=i(De),Vw=n(De,"LI",{});var jVe=s(Vw);Hwe=n(jVe,"STRONG",{});var YXt=s(Hwe);aYr=r(YXt,"roberta"),YXt.forEach(t),nYr=r(jVe," \u2014 "),zoe=n(jVe,"A",{href:!0});var KXt=s(zoe);sYr=r(KXt,"FlaxRobertaForSequenceClassification"),KXt.forEach(t),lYr=r(jVe," (RoBERTa model)"),jVe.forEach(t),iYr=i(De),Xw=n(De,"LI",{});var DVe=s(Xw);Uwe=n(DVe,"STRONG",{});var ZXt=s(Uwe);dYr=r(ZXt,"roformer"),ZXt.forEach(t),cYr=r(DVe," \u2014 "),Qoe=n(DVe,"A",{href:!0});var ezt=s(Qoe);fYr=r(ezt,"FlaxRoFormerForSequenceClassification"),ezt.forEach(t),mYr=r(DVe," (RoFormer model)"),DVe.forEach(t),gYr=i(De),zw=n(De,"LI",{});var GVe=s(zw);Jwe=n(GVe,"STRONG",{});var ozt=s(Jwe);hYr=r(ozt,"xlm-roberta"),ozt.forEach(t),pYr=r(GVe," \u2014 "),Woe=n(GVe,"A",{href:!0});var rzt=s(Woe);_Yr=r(rzt,"FlaxXLMRobertaForSequenceClassification"),rzt.forEach(t),uYr=r(GVe," (XLM-RoBERTa model)"),GVe.forEach(t),De.forEach(t),bYr=i(pi),T(Qw.$$.fragment,pi),pi.forEach(t),hi.forEach(t),fQe=i(f),hf=n(f,"H2",{class:!0});var FHe=s(hf);Ww=n(FHe,"A",{id:!0,class:!0,href:!0});var tzt=s(Ww);Ywe=n(tzt,"SPAN",{});var azt=s(Ywe);T(O$.$$.fragment,azt),azt.forEach(t),tzt.forEach(t),vYr=i(FHe),Kwe=n(FHe,"SPAN",{});var nzt=s(Kwe);FYr=r(nzt,"FlaxAutoModelForQuestionAnswering"),nzt.forEach(t),FHe.forEach(t),mQe=i(f),Tr=n(f,"DIV",{class:!0});var _i=s(Tr);T(V$.$$.fragment,_i),TYr=i(_i),pf=n(_i,"P",{});var Cae=s(pf);MYr=r(Cae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Hoe=n(Cae,"A",{href:!0});var szt=s(Hoe);EYr=r(szt,"from_pretrained()"),szt.forEach(t),CYr=r(Cae," class method or the "),Uoe=n(Cae,"A",{href:!0});var lzt=s(Uoe);wYr=r(lzt,"from_config()"),lzt.forEach(t),AYr=r(Cae,` class
method.`),Cae.forEach(t),LYr=i(_i),X$=n(_i,"P",{});var THe=s(X$);yYr=r(THe,"This class cannot be instantiated directly using "),Zwe=n(THe,"CODE",{});var izt=s(Zwe);xYr=r(izt,"__init__()"),izt.forEach(t),$Yr=r(THe," (throws an error)."),THe.forEach(t),kYr=i(_i),Zt=n(_i,"DIV",{class:!0});var W7=s(Zt);T(z$.$$.fragment,W7),SYr=i(W7),eAe=n(W7,"P",{});var dzt=s(eAe);RYr=r(dzt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),dzt.forEach(t),PYr=i(W7),_f=n(W7,"P",{});var wae=s(_f);BYr=r(wae,`Note:
Loading a model from its configuration file does `),oAe=n(wae,"STRONG",{});var czt=s(oAe);NYr=r(czt,"not"),czt.forEach(t),IYr=r(wae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Joe=n(wae,"A",{href:!0});var fzt=s(Joe);qYr=r(fzt,"from_pretrained()"),fzt.forEach(t),jYr=r(wae," to load the model weights."),wae.forEach(t),DYr=i(W7),T(Hw.$$.fragment,W7),W7.forEach(t),GYr=i(_i),Ur=n(_i,"DIV",{class:!0});var ui=s(Ur);T(Q$.$$.fragment,ui),OYr=i(ui),rAe=n(ui,"P",{});var mzt=s(rAe);VYr=r(mzt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),mzt.forEach(t),XYr=i(ui),Ln=n(ui,"P",{});var H7=s(Ln);zYr=r(H7,"The model class to instantiate is selected based on the "),tAe=n(H7,"CODE",{});var gzt=s(tAe);QYr=r(gzt,"model_type"),gzt.forEach(t),WYr=r(H7,` property of the config object (either
passed as an argument or loaded from `),aAe=n(H7,"CODE",{});var hzt=s(aAe);HYr=r(hzt,"pretrained_model_name_or_path"),hzt.forEach(t),UYr=r(H7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nAe=n(H7,"CODE",{});var pzt=s(nAe);JYr=r(pzt,"pretrained_model_name_or_path"),pzt.forEach(t),YYr=r(H7,":"),H7.forEach(t),KYr=i(ui),Re=n(ui,"UL",{});var Ge=s(Re);Uw=n(Ge,"LI",{});var OVe=s(Uw);sAe=n(OVe,"STRONG",{});var _zt=s(sAe);ZYr=r(_zt,"albert"),_zt.forEach(t),eKr=r(OVe," \u2014 "),Yoe=n(OVe,"A",{href:!0});var uzt=s(Yoe);oKr=r(uzt,"FlaxAlbertForQuestionAnswering"),uzt.forEach(t),rKr=r(OVe," (ALBERT model)"),OVe.forEach(t),tKr=i(Ge),Jw=n(Ge,"LI",{});var VVe=s(Jw);lAe=n(VVe,"STRONG",{});var bzt=s(lAe);aKr=r(bzt,"bart"),bzt.forEach(t),nKr=r(VVe," \u2014 "),Koe=n(VVe,"A",{href:!0});var vzt=s(Koe);sKr=r(vzt,"FlaxBartForQuestionAnswering"),vzt.forEach(t),lKr=r(VVe," (BART model)"),VVe.forEach(t),iKr=i(Ge),Yw=n(Ge,"LI",{});var XVe=s(Yw);iAe=n(XVe,"STRONG",{});var Fzt=s(iAe);dKr=r(Fzt,"bert"),Fzt.forEach(t),cKr=r(XVe," \u2014 "),Zoe=n(XVe,"A",{href:!0});var Tzt=s(Zoe);fKr=r(Tzt,"FlaxBertForQuestionAnswering"),Tzt.forEach(t),mKr=r(XVe," (BERT model)"),XVe.forEach(t),gKr=i(Ge),Kw=n(Ge,"LI",{});var zVe=s(Kw);dAe=n(zVe,"STRONG",{});var Mzt=s(dAe);hKr=r(Mzt,"big_bird"),Mzt.forEach(t),pKr=r(zVe," \u2014 "),ere=n(zVe,"A",{href:!0});var Ezt=s(ere);_Kr=r(Ezt,"FlaxBigBirdForQuestionAnswering"),Ezt.forEach(t),uKr=r(zVe," (BigBird model)"),zVe.forEach(t),bKr=i(Ge),Zw=n(Ge,"LI",{});var QVe=s(Zw);cAe=n(QVe,"STRONG",{});var Czt=s(cAe);vKr=r(Czt,"distilbert"),Czt.forEach(t),FKr=r(QVe," \u2014 "),ore=n(QVe,"A",{href:!0});var wzt=s(ore);TKr=r(wzt,"FlaxDistilBertForQuestionAnswering"),wzt.forEach(t),MKr=r(QVe," (DistilBERT model)"),QVe.forEach(t),EKr=i(Ge),eA=n(Ge,"LI",{});var WVe=s(eA);fAe=n(WVe,"STRONG",{});var Azt=s(fAe);CKr=r(Azt,"electra"),Azt.forEach(t),wKr=r(WVe," \u2014 "),rre=n(WVe,"A",{href:!0});var Lzt=s(rre);AKr=r(Lzt,"FlaxElectraForQuestionAnswering"),Lzt.forEach(t),LKr=r(WVe," (ELECTRA model)"),WVe.forEach(t),yKr=i(Ge),oA=n(Ge,"LI",{});var HVe=s(oA);mAe=n(HVe,"STRONG",{});var yzt=s(mAe);xKr=r(yzt,"mbart"),yzt.forEach(t),$Kr=r(HVe," \u2014 "),tre=n(HVe,"A",{href:!0});var xzt=s(tre);kKr=r(xzt,"FlaxMBartForQuestionAnswering"),xzt.forEach(t),SKr=r(HVe," (mBART model)"),HVe.forEach(t),RKr=i(Ge),rA=n(Ge,"LI",{});var UVe=s(rA);gAe=n(UVe,"STRONG",{});var $zt=s(gAe);PKr=r($zt,"roberta"),$zt.forEach(t),BKr=r(UVe," \u2014 "),are=n(UVe,"A",{href:!0});var kzt=s(are);NKr=r(kzt,"FlaxRobertaForQuestionAnswering"),kzt.forEach(t),IKr=r(UVe," (RoBERTa model)"),UVe.forEach(t),qKr=i(Ge),tA=n(Ge,"LI",{});var JVe=s(tA);hAe=n(JVe,"STRONG",{});var Szt=s(hAe);jKr=r(Szt,"roformer"),Szt.forEach(t),DKr=r(JVe," \u2014 "),nre=n(JVe,"A",{href:!0});var Rzt=s(nre);GKr=r(Rzt,"FlaxRoFormerForQuestionAnswering"),Rzt.forEach(t),OKr=r(JVe," (RoFormer model)"),JVe.forEach(t),VKr=i(Ge),aA=n(Ge,"LI",{});var YVe=s(aA);pAe=n(YVe,"STRONG",{});var Pzt=s(pAe);XKr=r(Pzt,"xlm-roberta"),Pzt.forEach(t),zKr=r(YVe," \u2014 "),sre=n(YVe,"A",{href:!0});var Bzt=s(sre);QKr=r(Bzt,"FlaxXLMRobertaForQuestionAnswering"),Bzt.forEach(t),WKr=r(YVe," (XLM-RoBERTa model)"),YVe.forEach(t),Ge.forEach(t),HKr=i(ui),T(nA.$$.fragment,ui),ui.forEach(t),_i.forEach(t),gQe=i(f),uf=n(f,"H2",{class:!0});var MHe=s(uf);sA=n(MHe,"A",{id:!0,class:!0,href:!0});var Nzt=s(sA);_Ae=n(Nzt,"SPAN",{});var Izt=s(_Ae);T(W$.$$.fragment,Izt),Izt.forEach(t),Nzt.forEach(t),UKr=i(MHe),uAe=n(MHe,"SPAN",{});var qzt=s(uAe);JKr=r(qzt,"FlaxAutoModelForTokenClassification"),qzt.forEach(t),MHe.forEach(t),hQe=i(f),Mr=n(f,"DIV",{class:!0});var bi=s(Mr);T(H$.$$.fragment,bi),YKr=i(bi),bf=n(bi,"P",{});var Aae=s(bf);KKr=r(Aae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),lre=n(Aae,"A",{href:!0});var jzt=s(lre);ZKr=r(jzt,"from_pretrained()"),jzt.forEach(t),eZr=r(Aae," class method or the "),ire=n(Aae,"A",{href:!0});var Dzt=s(ire);oZr=r(Dzt,"from_config()"),Dzt.forEach(t),rZr=r(Aae,` class
method.`),Aae.forEach(t),tZr=i(bi),U$=n(bi,"P",{});var EHe=s(U$);aZr=r(EHe,"This class cannot be instantiated directly using "),bAe=n(EHe,"CODE",{});var Gzt=s(bAe);nZr=r(Gzt,"__init__()"),Gzt.forEach(t),sZr=r(EHe," (throws an error)."),EHe.forEach(t),lZr=i(bi),ea=n(bi,"DIV",{class:!0});var U7=s(ea);T(J$.$$.fragment,U7),iZr=i(U7),vAe=n(U7,"P",{});var Ozt=s(vAe);dZr=r(Ozt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Ozt.forEach(t),cZr=i(U7),vf=n(U7,"P",{});var Lae=s(vf);fZr=r(Lae,`Note:
Loading a model from its configuration file does `),FAe=n(Lae,"STRONG",{});var Vzt=s(FAe);mZr=r(Vzt,"not"),Vzt.forEach(t),gZr=r(Lae,` load the model weights. It only affects the
model\u2019s configuration. Use `),dre=n(Lae,"A",{href:!0});var Xzt=s(dre);hZr=r(Xzt,"from_pretrained()"),Xzt.forEach(t),pZr=r(Lae," to load the model weights."),Lae.forEach(t),_Zr=i(U7),T(lA.$$.fragment,U7),U7.forEach(t),uZr=i(bi),Jr=n(bi,"DIV",{class:!0});var vi=s(Jr);T(Y$.$$.fragment,vi),bZr=i(vi),TAe=n(vi,"P",{});var zzt=s(TAe);vZr=r(zzt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),zzt.forEach(t),FZr=i(vi),yn=n(vi,"P",{});var J7=s(yn);TZr=r(J7,"The model class to instantiate is selected based on the "),MAe=n(J7,"CODE",{});var Qzt=s(MAe);MZr=r(Qzt,"model_type"),Qzt.forEach(t),EZr=r(J7,` property of the config object (either
passed as an argument or loaded from `),EAe=n(J7,"CODE",{});var Wzt=s(EAe);CZr=r(Wzt,"pretrained_model_name_or_path"),Wzt.forEach(t),wZr=r(J7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CAe=n(J7,"CODE",{});var Hzt=s(CAe);AZr=r(Hzt,"pretrained_model_name_or_path"),Hzt.forEach(t),LZr=r(J7,":"),J7.forEach(t),yZr=i(vi),Ve=n(vi,"UL",{});var Mo=s(Ve);iA=n(Mo,"LI",{});var KVe=s(iA);wAe=n(KVe,"STRONG",{});var Uzt=s(wAe);xZr=r(Uzt,"albert"),Uzt.forEach(t),$Zr=r(KVe," \u2014 "),cre=n(KVe,"A",{href:!0});var Jzt=s(cre);kZr=r(Jzt,"FlaxAlbertForTokenClassification"),Jzt.forEach(t),SZr=r(KVe," (ALBERT model)"),KVe.forEach(t),RZr=i(Mo),dA=n(Mo,"LI",{});var ZVe=s(dA);AAe=n(ZVe,"STRONG",{});var Yzt=s(AAe);PZr=r(Yzt,"bert"),Yzt.forEach(t),BZr=r(ZVe," \u2014 "),fre=n(ZVe,"A",{href:!0});var Kzt=s(fre);NZr=r(Kzt,"FlaxBertForTokenClassification"),Kzt.forEach(t),IZr=r(ZVe," (BERT model)"),ZVe.forEach(t),qZr=i(Mo),cA=n(Mo,"LI",{});var eXe=s(cA);LAe=n(eXe,"STRONG",{});var Zzt=s(LAe);jZr=r(Zzt,"big_bird"),Zzt.forEach(t),DZr=r(eXe," \u2014 "),mre=n(eXe,"A",{href:!0});var eQt=s(mre);GZr=r(eQt,"FlaxBigBirdForTokenClassification"),eQt.forEach(t),OZr=r(eXe," (BigBird model)"),eXe.forEach(t),VZr=i(Mo),fA=n(Mo,"LI",{});var oXe=s(fA);yAe=n(oXe,"STRONG",{});var oQt=s(yAe);XZr=r(oQt,"distilbert"),oQt.forEach(t),zZr=r(oXe," \u2014 "),gre=n(oXe,"A",{href:!0});var rQt=s(gre);QZr=r(rQt,"FlaxDistilBertForTokenClassification"),rQt.forEach(t),WZr=r(oXe," (DistilBERT model)"),oXe.forEach(t),HZr=i(Mo),mA=n(Mo,"LI",{});var rXe=s(mA);xAe=n(rXe,"STRONG",{});var tQt=s(xAe);UZr=r(tQt,"electra"),tQt.forEach(t),JZr=r(rXe," \u2014 "),hre=n(rXe,"A",{href:!0});var aQt=s(hre);YZr=r(aQt,"FlaxElectraForTokenClassification"),aQt.forEach(t),KZr=r(rXe," (ELECTRA model)"),rXe.forEach(t),ZZr=i(Mo),gA=n(Mo,"LI",{});var tXe=s(gA);$Ae=n(tXe,"STRONG",{});var nQt=s($Ae);eet=r(nQt,"roberta"),nQt.forEach(t),oet=r(tXe," \u2014 "),pre=n(tXe,"A",{href:!0});var sQt=s(pre);ret=r(sQt,"FlaxRobertaForTokenClassification"),sQt.forEach(t),tet=r(tXe," (RoBERTa model)"),tXe.forEach(t),aet=i(Mo),hA=n(Mo,"LI",{});var aXe=s(hA);kAe=n(aXe,"STRONG",{});var lQt=s(kAe);net=r(lQt,"roformer"),lQt.forEach(t),set=r(aXe," \u2014 "),_re=n(aXe,"A",{href:!0});var iQt=s(_re);iet=r(iQt,"FlaxRoFormerForTokenClassification"),iQt.forEach(t),det=r(aXe," (RoFormer model)"),aXe.forEach(t),cet=i(Mo),pA=n(Mo,"LI",{});var nXe=s(pA);SAe=n(nXe,"STRONG",{});var dQt=s(SAe);fet=r(dQt,"xlm-roberta"),dQt.forEach(t),met=r(nXe," \u2014 "),ure=n(nXe,"A",{href:!0});var cQt=s(ure);get=r(cQt,"FlaxXLMRobertaForTokenClassification"),cQt.forEach(t),het=r(nXe," (XLM-RoBERTa model)"),nXe.forEach(t),Mo.forEach(t),pet=i(vi),T(_A.$$.fragment,vi),vi.forEach(t),bi.forEach(t),pQe=i(f),Ff=n(f,"H2",{class:!0});var CHe=s(Ff);uA=n(CHe,"A",{id:!0,class:!0,href:!0});var fQt=s(uA);RAe=n(fQt,"SPAN",{});var mQt=s(RAe);T(K$.$$.fragment,mQt),mQt.forEach(t),fQt.forEach(t),_et=i(CHe),PAe=n(CHe,"SPAN",{});var gQt=s(PAe);uet=r(gQt,"FlaxAutoModelForMultipleChoice"),gQt.forEach(t),CHe.forEach(t),_Qe=i(f),Er=n(f,"DIV",{class:!0});var Fi=s(Er);T(Z$.$$.fragment,Fi),bet=i(Fi),Tf=n(Fi,"P",{});var yae=s(Tf);vet=r(yae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),bre=n(yae,"A",{href:!0});var hQt=s(bre);Fet=r(hQt,"from_pretrained()"),hQt.forEach(t),Tet=r(yae," class method or the "),vre=n(yae,"A",{href:!0});var pQt=s(vre);Met=r(pQt,"from_config()"),pQt.forEach(t),Eet=r(yae,` class
method.`),yae.forEach(t),Cet=i(Fi),ek=n(Fi,"P",{});var wHe=s(ek);wet=r(wHe,"This class cannot be instantiated directly using "),BAe=n(wHe,"CODE",{});var _Qt=s(BAe);Aet=r(_Qt,"__init__()"),_Qt.forEach(t),Let=r(wHe," (throws an error)."),wHe.forEach(t),yet=i(Fi),oa=n(Fi,"DIV",{class:!0});var Y7=s(oa);T(ok.$$.fragment,Y7),xet=i(Y7),NAe=n(Y7,"P",{});var uQt=s(NAe);$et=r(uQt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),uQt.forEach(t),ket=i(Y7),Mf=n(Y7,"P",{});var xae=s(Mf);Set=r(xae,`Note:
Loading a model from its configuration file does `),IAe=n(xae,"STRONG",{});var bQt=s(IAe);Ret=r(bQt,"not"),bQt.forEach(t),Pet=r(xae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Fre=n(xae,"A",{href:!0});var vQt=s(Fre);Bet=r(vQt,"from_pretrained()"),vQt.forEach(t),Net=r(xae," to load the model weights."),xae.forEach(t),Iet=i(Y7),T(bA.$$.fragment,Y7),Y7.forEach(t),qet=i(Fi),Yr=n(Fi,"DIV",{class:!0});var Ti=s(Yr);T(rk.$$.fragment,Ti),jet=i(Ti),qAe=n(Ti,"P",{});var FQt=s(qAe);Det=r(FQt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),FQt.forEach(t),Get=i(Ti),xn=n(Ti,"P",{});var K7=s(xn);Oet=r(K7,"The model class to instantiate is selected based on the "),jAe=n(K7,"CODE",{});var TQt=s(jAe);Vet=r(TQt,"model_type"),TQt.forEach(t),Xet=r(K7,` property of the config object (either
passed as an argument or loaded from `),DAe=n(K7,"CODE",{});var MQt=s(DAe);zet=r(MQt,"pretrained_model_name_or_path"),MQt.forEach(t),Qet=r(K7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GAe=n(K7,"CODE",{});var EQt=s(GAe);Wet=r(EQt,"pretrained_model_name_or_path"),EQt.forEach(t),Het=r(K7,":"),K7.forEach(t),Uet=i(Ti),Xe=n(Ti,"UL",{});var Eo=s(Xe);vA=n(Eo,"LI",{});var sXe=s(vA);OAe=n(sXe,"STRONG",{});var CQt=s(OAe);Jet=r(CQt,"albert"),CQt.forEach(t),Yet=r(sXe," \u2014 "),Tre=n(sXe,"A",{href:!0});var wQt=s(Tre);Ket=r(wQt,"FlaxAlbertForMultipleChoice"),wQt.forEach(t),Zet=r(sXe," (ALBERT model)"),sXe.forEach(t),eot=i(Eo),FA=n(Eo,"LI",{});var lXe=s(FA);VAe=n(lXe,"STRONG",{});var AQt=s(VAe);oot=r(AQt,"bert"),AQt.forEach(t),rot=r(lXe," \u2014 "),Mre=n(lXe,"A",{href:!0});var LQt=s(Mre);tot=r(LQt,"FlaxBertForMultipleChoice"),LQt.forEach(t),aot=r(lXe," (BERT model)"),lXe.forEach(t),not=i(Eo),TA=n(Eo,"LI",{});var iXe=s(TA);XAe=n(iXe,"STRONG",{});var yQt=s(XAe);sot=r(yQt,"big_bird"),yQt.forEach(t),lot=r(iXe," \u2014 "),Ere=n(iXe,"A",{href:!0});var xQt=s(Ere);iot=r(xQt,"FlaxBigBirdForMultipleChoice"),xQt.forEach(t),dot=r(iXe," (BigBird model)"),iXe.forEach(t),cot=i(Eo),MA=n(Eo,"LI",{});var dXe=s(MA);zAe=n(dXe,"STRONG",{});var $Qt=s(zAe);fot=r($Qt,"distilbert"),$Qt.forEach(t),mot=r(dXe," \u2014 "),Cre=n(dXe,"A",{href:!0});var kQt=s(Cre);got=r(kQt,"FlaxDistilBertForMultipleChoice"),kQt.forEach(t),hot=r(dXe," (DistilBERT model)"),dXe.forEach(t),pot=i(Eo),EA=n(Eo,"LI",{});var cXe=s(EA);QAe=n(cXe,"STRONG",{});var SQt=s(QAe);_ot=r(SQt,"electra"),SQt.forEach(t),uot=r(cXe," \u2014 "),wre=n(cXe,"A",{href:!0});var RQt=s(wre);bot=r(RQt,"FlaxElectraForMultipleChoice"),RQt.forEach(t),vot=r(cXe," (ELECTRA model)"),cXe.forEach(t),Fot=i(Eo),CA=n(Eo,"LI",{});var fXe=s(CA);WAe=n(fXe,"STRONG",{});var PQt=s(WAe);Tot=r(PQt,"roberta"),PQt.forEach(t),Mot=r(fXe," \u2014 "),Are=n(fXe,"A",{href:!0});var BQt=s(Are);Eot=r(BQt,"FlaxRobertaForMultipleChoice"),BQt.forEach(t),Cot=r(fXe," (RoBERTa model)"),fXe.forEach(t),wot=i(Eo),wA=n(Eo,"LI",{});var mXe=s(wA);HAe=n(mXe,"STRONG",{});var NQt=s(HAe);Aot=r(NQt,"roformer"),NQt.forEach(t),Lot=r(mXe," \u2014 "),Lre=n(mXe,"A",{href:!0});var IQt=s(Lre);yot=r(IQt,"FlaxRoFormerForMultipleChoice"),IQt.forEach(t),xot=r(mXe," (RoFormer model)"),mXe.forEach(t),$ot=i(Eo),AA=n(Eo,"LI",{});var gXe=s(AA);UAe=n(gXe,"STRONG",{});var qQt=s(UAe);kot=r(qQt,"xlm-roberta"),qQt.forEach(t),Sot=r(gXe," \u2014 "),yre=n(gXe,"A",{href:!0});var jQt=s(yre);Rot=r(jQt,"FlaxXLMRobertaForMultipleChoice"),jQt.forEach(t),Pot=r(gXe," (XLM-RoBERTa model)"),gXe.forEach(t),Eo.forEach(t),Bot=i(Ti),T(LA.$$.fragment,Ti),Ti.forEach(t),Fi.forEach(t),uQe=i(f),Ef=n(f,"H2",{class:!0});var AHe=s(Ef);yA=n(AHe,"A",{id:!0,class:!0,href:!0});var DQt=s(yA);JAe=n(DQt,"SPAN",{});var GQt=s(JAe);T(tk.$$.fragment,GQt),GQt.forEach(t),DQt.forEach(t),Not=i(AHe),YAe=n(AHe,"SPAN",{});var OQt=s(YAe);Iot=r(OQt,"FlaxAutoModelForNextSentencePrediction"),OQt.forEach(t),AHe.forEach(t),bQe=i(f),Cr=n(f,"DIV",{class:!0});var Mi=s(Cr);T(ak.$$.fragment,Mi),qot=i(Mi),Cf=n(Mi,"P",{});var $ae=s(Cf);jot=r($ae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),xre=n($ae,"A",{href:!0});var VQt=s(xre);Dot=r(VQt,"from_pretrained()"),VQt.forEach(t),Got=r($ae," class method or the "),$re=n($ae,"A",{href:!0});var XQt=s($re);Oot=r(XQt,"from_config()"),XQt.forEach(t),Vot=r($ae,` class
method.`),$ae.forEach(t),Xot=i(Mi),nk=n(Mi,"P",{});var LHe=s(nk);zot=r(LHe,"This class cannot be instantiated directly using "),KAe=n(LHe,"CODE",{});var zQt=s(KAe);Qot=r(zQt,"__init__()"),zQt.forEach(t),Wot=r(LHe," (throws an error)."),LHe.forEach(t),Hot=i(Mi),ra=n(Mi,"DIV",{class:!0});var Z7=s(ra);T(sk.$$.fragment,Z7),Uot=i(Z7),ZAe=n(Z7,"P",{});var QQt=s(ZAe);Jot=r(QQt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),QQt.forEach(t),Yot=i(Z7),wf=n(Z7,"P",{});var kae=s(wf);Kot=r(kae,`Note:
Loading a model from its configuration file does `),e6e=n(kae,"STRONG",{});var WQt=s(e6e);Zot=r(WQt,"not"),WQt.forEach(t),ert=r(kae,` load the model weights. It only affects the
model\u2019s configuration. Use `),kre=n(kae,"A",{href:!0});var HQt=s(kre);ort=r(HQt,"from_pretrained()"),HQt.forEach(t),rrt=r(kae," to load the model weights."),kae.forEach(t),trt=i(Z7),T(xA.$$.fragment,Z7),Z7.forEach(t),art=i(Mi),Kr=n(Mi,"DIV",{class:!0});var Ei=s(Kr);T(lk.$$.fragment,Ei),nrt=i(Ei),o6e=n(Ei,"P",{});var UQt=s(o6e);srt=r(UQt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),UQt.forEach(t),lrt=i(Ei),$n=n(Ei,"P",{});var eL=s($n);irt=r(eL,"The model class to instantiate is selected based on the "),r6e=n(eL,"CODE",{});var JQt=s(r6e);drt=r(JQt,"model_type"),JQt.forEach(t),crt=r(eL,` property of the config object (either
passed as an argument or loaded from `),t6e=n(eL,"CODE",{});var YQt=s(t6e);frt=r(YQt,"pretrained_model_name_or_path"),YQt.forEach(t),mrt=r(eL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a6e=n(eL,"CODE",{});var KQt=s(a6e);grt=r(KQt,"pretrained_model_name_or_path"),KQt.forEach(t),hrt=r(eL,":"),eL.forEach(t),prt=i(Ei),n6e=n(Ei,"UL",{});var ZQt=s(n6e);$A=n(ZQt,"LI",{});var hXe=s($A);s6e=n(hXe,"STRONG",{});var eWt=s(s6e);_rt=r(eWt,"bert"),eWt.forEach(t),urt=r(hXe," \u2014 "),Sre=n(hXe,"A",{href:!0});var oWt=s(Sre);brt=r(oWt,"FlaxBertForNextSentencePrediction"),oWt.forEach(t),vrt=r(hXe," (BERT model)"),hXe.forEach(t),ZQt.forEach(t),Frt=i(Ei),T(kA.$$.fragment,Ei),Ei.forEach(t),Mi.forEach(t),vQe=i(f),Af=n(f,"H2",{class:!0});var yHe=s(Af);SA=n(yHe,"A",{id:!0,class:!0,href:!0});var rWt=s(SA);l6e=n(rWt,"SPAN",{});var tWt=s(l6e);T(ik.$$.fragment,tWt),tWt.forEach(t),rWt.forEach(t),Trt=i(yHe),i6e=n(yHe,"SPAN",{});var aWt=s(i6e);Mrt=r(aWt,"FlaxAutoModelForImageClassification"),aWt.forEach(t),yHe.forEach(t),FQe=i(f),wr=n(f,"DIV",{class:!0});var Ci=s(wr);T(dk.$$.fragment,Ci),Ert=i(Ci),Lf=n(Ci,"P",{});var Sae=s(Lf);Crt=r(Sae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Rre=n(Sae,"A",{href:!0});var nWt=s(Rre);wrt=r(nWt,"from_pretrained()"),nWt.forEach(t),Art=r(Sae," class method or the "),Pre=n(Sae,"A",{href:!0});var sWt=s(Pre);Lrt=r(sWt,"from_config()"),sWt.forEach(t),yrt=r(Sae,` class
method.`),Sae.forEach(t),xrt=i(Ci),ck=n(Ci,"P",{});var xHe=s(ck);$rt=r(xHe,"This class cannot be instantiated directly using "),d6e=n(xHe,"CODE",{});var lWt=s(d6e);krt=r(lWt,"__init__()"),lWt.forEach(t),Srt=r(xHe," (throws an error)."),xHe.forEach(t),Rrt=i(Ci),ta=n(Ci,"DIV",{class:!0});var oL=s(ta);T(fk.$$.fragment,oL),Prt=i(oL),c6e=n(oL,"P",{});var iWt=s(c6e);Brt=r(iWt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),iWt.forEach(t),Nrt=i(oL),yf=n(oL,"P",{});var Rae=s(yf);Irt=r(Rae,`Note:
Loading a model from its configuration file does `),f6e=n(Rae,"STRONG",{});var dWt=s(f6e);qrt=r(dWt,"not"),dWt.forEach(t),jrt=r(Rae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Bre=n(Rae,"A",{href:!0});var cWt=s(Bre);Drt=r(cWt,"from_pretrained()"),cWt.forEach(t),Grt=r(Rae," to load the model weights."),Rae.forEach(t),Ort=i(oL),T(RA.$$.fragment,oL),oL.forEach(t),Vrt=i(Ci),Zr=n(Ci,"DIV",{class:!0});var wi=s(Zr);T(mk.$$.fragment,wi),Xrt=i(wi),m6e=n(wi,"P",{});var fWt=s(m6e);zrt=r(fWt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),fWt.forEach(t),Qrt=i(wi),kn=n(wi,"P",{});var rL=s(kn);Wrt=r(rL,"The model class to instantiate is selected based on the "),g6e=n(rL,"CODE",{});var mWt=s(g6e);Hrt=r(mWt,"model_type"),mWt.forEach(t),Urt=r(rL,` property of the config object (either
passed as an argument or loaded from `),h6e=n(rL,"CODE",{});var gWt=s(h6e);Jrt=r(gWt,"pretrained_model_name_or_path"),gWt.forEach(t),Yrt=r(rL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p6e=n(rL,"CODE",{});var hWt=s(p6e);Krt=r(hWt,"pretrained_model_name_or_path"),hWt.forEach(t),Zrt=r(rL,":"),rL.forEach(t),ett=i(wi),gk=n(wi,"UL",{});var $He=s(gk);PA=n($He,"LI",{});var pXe=s(PA);_6e=n(pXe,"STRONG",{});var pWt=s(_6e);ott=r(pWt,"beit"),pWt.forEach(t),rtt=r(pXe," \u2014 "),Nre=n(pXe,"A",{href:!0});var _Wt=s(Nre);ttt=r(_Wt,"FlaxBeitForImageClassification"),_Wt.forEach(t),att=r(pXe," (BEiT model)"),pXe.forEach(t),ntt=i($He),BA=n($He,"LI",{});var _Xe=s(BA);u6e=n(_Xe,"STRONG",{});var uWt=s(u6e);stt=r(uWt,"vit"),uWt.forEach(t),ltt=r(_Xe," \u2014 "),Ire=n(_Xe,"A",{href:!0});var bWt=s(Ire);itt=r(bWt,"FlaxViTForImageClassification"),bWt.forEach(t),dtt=r(_Xe," (ViT model)"),_Xe.forEach(t),$He.forEach(t),ctt=i(wi),T(NA.$$.fragment,wi),wi.forEach(t),Ci.forEach(t),TQe=i(f),xf=n(f,"H2",{class:!0});var kHe=s(xf);IA=n(kHe,"A",{id:!0,class:!0,href:!0});var vWt=s(IA);b6e=n(vWt,"SPAN",{});var FWt=s(b6e);T(hk.$$.fragment,FWt),FWt.forEach(t),vWt.forEach(t),ftt=i(kHe),v6e=n(kHe,"SPAN",{});var TWt=s(v6e);mtt=r(TWt,"FlaxAutoModelForVision2Seq"),TWt.forEach(t),kHe.forEach(t),MQe=i(f),Ar=n(f,"DIV",{class:!0});var Ai=s(Ar);T(pk.$$.fragment,Ai),gtt=i(Ai),$f=n(Ai,"P",{});var Pae=s($f);htt=r(Pae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),qre=n(Pae,"A",{href:!0});var MWt=s(qre);ptt=r(MWt,"from_pretrained()"),MWt.forEach(t),_tt=r(Pae," class method or the "),jre=n(Pae,"A",{href:!0});var EWt=s(jre);utt=r(EWt,"from_config()"),EWt.forEach(t),btt=r(Pae,` class
method.`),Pae.forEach(t),vtt=i(Ai),_k=n(Ai,"P",{});var SHe=s(_k);Ftt=r(SHe,"This class cannot be instantiated directly using "),F6e=n(SHe,"CODE",{});var CWt=s(F6e);Ttt=r(CWt,"__init__()"),CWt.forEach(t),Mtt=r(SHe," (throws an error)."),SHe.forEach(t),Ett=i(Ai),aa=n(Ai,"DIV",{class:!0});var tL=s(aa);T(uk.$$.fragment,tL),Ctt=i(tL),T6e=n(tL,"P",{});var wWt=s(T6e);wtt=r(wWt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),wWt.forEach(t),Att=i(tL),kf=n(tL,"P",{});var Bae=s(kf);Ltt=r(Bae,`Note:
Loading a model from its configuration file does `),M6e=n(Bae,"STRONG",{});var AWt=s(M6e);ytt=r(AWt,"not"),AWt.forEach(t),xtt=r(Bae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Dre=n(Bae,"A",{href:!0});var LWt=s(Dre);$tt=r(LWt,"from_pretrained()"),LWt.forEach(t),ktt=r(Bae," to load the model weights."),Bae.forEach(t),Stt=i(tL),T(qA.$$.fragment,tL),tL.forEach(t),Rtt=i(Ai),et=n(Ai,"DIV",{class:!0});var Li=s(et);T(bk.$$.fragment,Li),Ptt=i(Li),E6e=n(Li,"P",{});var yWt=s(E6e);Btt=r(yWt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),yWt.forEach(t),Ntt=i(Li),Sn=n(Li,"P",{});var aL=s(Sn);Itt=r(aL,"The model class to instantiate is selected based on the "),C6e=n(aL,"CODE",{});var xWt=s(C6e);qtt=r(xWt,"model_type"),xWt.forEach(t),jtt=r(aL,` property of the config object (either
passed as an argument or loaded from `),w6e=n(aL,"CODE",{});var $Wt=s(w6e);Dtt=r($Wt,"pretrained_model_name_or_path"),$Wt.forEach(t),Gtt=r(aL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A6e=n(aL,"CODE",{});var kWt=s(A6e);Ott=r(kWt,"pretrained_model_name_or_path"),kWt.forEach(t),Vtt=r(aL,":"),aL.forEach(t),Xtt=i(Li),L6e=n(Li,"UL",{});var SWt=s(L6e);jA=n(SWt,"LI",{});var uXe=s(jA);y6e=n(uXe,"STRONG",{});var RWt=s(y6e);ztt=r(RWt,"vision-encoder-decoder"),RWt.forEach(t),Qtt=r(uXe," \u2014 "),Gre=n(uXe,"A",{href:!0});var PWt=s(Gre);Wtt=r(PWt,"FlaxVisionEncoderDecoderModel"),PWt.forEach(t),Htt=r(uXe," (Vision Encoder decoder model)"),uXe.forEach(t),SWt.forEach(t),Utt=i(Li),T(DA.$$.fragment,Li),Li.forEach(t),Ai.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(DUt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Pn,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.AutoConfig"),c(Nn,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.AutoModel"),c(In,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.AutoTokenizer"),c(Pi,"href","/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertModel"),c(jf,"id","extending-the-auto-classes"),c(jf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jf,"href","#extending-the-auto-classes"),c(Bi,"class","relative group"),c(Gf,"id","transformers.AutoConfig"),c(Gf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Gf,"href","#transformers.AutoConfig"),c(Ni,"class","relative group"),c(WS,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(HS,"href","/docs/transformers/pr_18022/en/model_doc/albert#transformers.AlbertConfig"),c(US,"href","/docs/transformers/pr_18022/en/model_doc/bart#transformers.BartConfig"),c(JS,"href","/docs/transformers/pr_18022/en/model_doc/beit#transformers.BeitConfig"),c(YS,"href","/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertConfig"),c(KS,"href","/docs/transformers/pr_18022/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(ZS,"href","/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.BigBirdConfig"),c(eR,"href","/docs/transformers/pr_18022/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(oR,"href","/docs/transformers/pr_18022/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(rR,"href","/docs/transformers/pr_18022/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(tR,"href","/docs/transformers/pr_18022/en/model_doc/bloom#transformers.BloomConfig"),c(aR,"href","/docs/transformers/pr_18022/en/model_doc/camembert#transformers.CamembertConfig"),c(nR,"href","/docs/transformers/pr_18022/en/model_doc/canine#transformers.CanineConfig"),c(sR,"href","/docs/transformers/pr_18022/en/model_doc/clip#transformers.CLIPConfig"),c(lR,"href","/docs/transformers/pr_18022/en/model_doc/codegen#transformers.CodeGenConfig"),c(iR,"href","/docs/transformers/pr_18022/en/model_doc/convbert#transformers.ConvBertConfig"),c(dR,"href","/docs/transformers/pr_18022/en/model_doc/convnext#transformers.ConvNextConfig"),c(cR,"href","/docs/transformers/pr_18022/en/model_doc/ctrl#transformers.CTRLConfig"),c(fR,"href","/docs/transformers/pr_18022/en/model_doc/cvt#transformers.CvtConfig"),c(mR,"href","/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(gR,"href","/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(hR,"href","/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(pR,"href","/docs/transformers/pr_18022/en/model_doc/deberta#transformers.DebertaConfig"),c(_R,"href","/docs/transformers/pr_18022/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(uR,"href","/docs/transformers/pr_18022/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(bR,"href","/docs/transformers/pr_18022/en/model_doc/deit#transformers.DeiTConfig"),c(vR,"href","/docs/transformers/pr_18022/en/model_doc/detr#transformers.DetrConfig"),c(FR,"href","/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.DistilBertConfig"),c(TR,"href","/docs/transformers/pr_18022/en/model_doc/dpr#transformers.DPRConfig"),c(MR,"href","/docs/transformers/pr_18022/en/model_doc/dpt#transformers.DPTConfig"),c(ER,"href","/docs/transformers/pr_18022/en/model_doc/electra#transformers.ElectraConfig"),c(CR,"href","/docs/transformers/pr_18022/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(wR,"href","/docs/transformers/pr_18022/en/model_doc/flaubert#transformers.FlaubertConfig"),c(AR,"href","/docs/transformers/pr_18022/en/model_doc/flava#transformers.FlavaConfig"),c(LR,"href","/docs/transformers/pr_18022/en/model_doc/fnet#transformers.FNetConfig"),c(yR,"href","/docs/transformers/pr_18022/en/model_doc/fsmt#transformers.FSMTConfig"),c(xR,"href","/docs/transformers/pr_18022/en/model_doc/funnel#transformers.FunnelConfig"),c($R,"href","/docs/transformers/pr_18022/en/model_doc/glpn#transformers.GLPNConfig"),c(kR,"href","/docs/transformers/pr_18022/en/model_doc/gpt2#transformers.GPT2Config"),c(SR,"href","/docs/transformers/pr_18022/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(RR,"href","/docs/transformers/pr_18022/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(PR,"href","/docs/transformers/pr_18022/en/model_doc/gptj#transformers.GPTJConfig"),c(BR,"href","/docs/transformers/pr_18022/en/model_doc/groupvit#transformers.GroupViTConfig"),c(NR,"href","/docs/transformers/pr_18022/en/model_doc/hubert#transformers.HubertConfig"),c(IR,"href","/docs/transformers/pr_18022/en/model_doc/ibert#transformers.IBertConfig"),c(qR,"href","/docs/transformers/pr_18022/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(jR,"href","/docs/transformers/pr_18022/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(DR,"href","/docs/transformers/pr_18022/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(GR,"href","/docs/transformers/pr_18022/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(OR,"href","/docs/transformers/pr_18022/en/model_doc/led#transformers.LEDConfig"),c(VR,"href","/docs/transformers/pr_18022/en/model_doc/levit#transformers.LevitConfig"),c(XR,"href","/docs/transformers/pr_18022/en/model_doc/longformer#transformers.LongformerConfig"),c(zR,"href","/docs/transformers/pr_18022/en/model_doc/longt5#transformers.LongT5Config"),c(QR,"href","/docs/transformers/pr_18022/en/model_doc/luke#transformers.LukeConfig"),c(WR,"href","/docs/transformers/pr_18022/en/model_doc/lxmert#transformers.LxmertConfig"),c(HR,"href","/docs/transformers/pr_18022/en/model_doc/m2m_100#transformers.M2M100Config"),c(UR,"href","/docs/transformers/pr_18022/en/model_doc/marian#transformers.MarianConfig"),c(JR,"href","/docs/transformers/pr_18022/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(YR,"href","/docs/transformers/pr_18022/en/model_doc/mbart#transformers.MBartConfig"),c(KR,"href","/docs/transformers/pr_18022/en/model_doc/mctct#transformers.MCTCTConfig"),c(ZR,"href","/docs/transformers/pr_18022/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(eP,"href","/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(oP,"href","/docs/transformers/pr_18022/en/model_doc/mobilevit#transformers.MobileViTConfig"),c(rP,"href","/docs/transformers/pr_18022/en/model_doc/mpnet#transformers.MPNetConfig"),c(tP,"href","/docs/transformers/pr_18022/en/model_doc/mt5#transformers.MT5Config"),c(aP,"href","/docs/transformers/pr_18022/en/model_doc/mvp#transformers.MvpConfig"),c(nP,"href","/docs/transformers/pr_18022/en/model_doc/nezha#transformers.NezhaConfig"),c(sP,"href","/docs/transformers/pr_18022/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(lP,"href","/docs/transformers/pr_18022/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(iP,"href","/docs/transformers/pr_18022/en/model_doc/opt#transformers.OPTConfig"),c(dP,"href","/docs/transformers/pr_18022/en/model_doc/pegasus#transformers.PegasusConfig"),c(cP,"href","/docs/transformers/pr_18022/en/model_doc/perceiver#transformers.PerceiverConfig"),c(fP,"href","/docs/transformers/pr_18022/en/model_doc/plbart#transformers.PLBartConfig"),c(mP,"href","/docs/transformers/pr_18022/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(gP,"href","/docs/transformers/pr_18022/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(hP,"href","/docs/transformers/pr_18022/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(pP,"href","/docs/transformers/pr_18022/en/model_doc/rag#transformers.RagConfig"),c(_P,"href","/docs/transformers/pr_18022/en/model_doc/realm#transformers.RealmConfig"),c(uP,"href","/docs/transformers/pr_18022/en/model_doc/reformer#transformers.ReformerConfig"),c(bP,"href","/docs/transformers/pr_18022/en/model_doc/regnet#transformers.RegNetConfig"),c(vP,"href","/docs/transformers/pr_18022/en/model_doc/rembert#transformers.RemBertConfig"),c(FP,"href","/docs/transformers/pr_18022/en/model_doc/resnet#transformers.ResNetConfig"),c(TP,"href","/docs/transformers/pr_18022/en/model_doc/retribert#transformers.RetriBertConfig"),c(MP,"href","/docs/transformers/pr_18022/en/model_doc/roberta#transformers.RobertaConfig"),c(EP,"href","/docs/transformers/pr_18022/en/model_doc/roformer#transformers.RoFormerConfig"),c(CP,"href","/docs/transformers/pr_18022/en/model_doc/segformer#transformers.SegformerConfig"),c(wP,"href","/docs/transformers/pr_18022/en/model_doc/sew#transformers.SEWConfig"),c(AP,"href","/docs/transformers/pr_18022/en/model_doc/sew-d#transformers.SEWDConfig"),c(LP,"href","/docs/transformers/pr_18022/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(yP,"href","/docs/transformers/pr_18022/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(xP,"href","/docs/transformers/pr_18022/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c($P,"href","/docs/transformers/pr_18022/en/model_doc/splinter#transformers.SplinterConfig"),c(kP,"href","/docs/transformers/pr_18022/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(SP,"href","/docs/transformers/pr_18022/en/model_doc/swin#transformers.SwinConfig"),c(RP,"href","/docs/transformers/pr_18022/en/model_doc/t5#transformers.T5Config"),c(PP,"href","/docs/transformers/pr_18022/en/model_doc/tapas#transformers.TapasConfig"),c(BP,"href","/docs/transformers/pr_18022/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(NP,"href","/docs/transformers/pr_18022/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(IP,"href","/docs/transformers/pr_18022/en/model_doc/trocr#transformers.TrOCRConfig"),c(qP,"href","/docs/transformers/pr_18022/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(jP,"href","/docs/transformers/pr_18022/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(DP,"href","/docs/transformers/pr_18022/en/model_doc/van#transformers.VanConfig"),c(GP,"href","/docs/transformers/pr_18022/en/model_doc/vilt#transformers.ViltConfig"),c(OP,"href","/docs/transformers/pr_18022/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(VP,"href","/docs/transformers/pr_18022/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(XP,"href","/docs/transformers/pr_18022/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(zP,"href","/docs/transformers/pr_18022/en/model_doc/vit#transformers.ViTConfig"),c(QP,"href","/docs/transformers/pr_18022/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(WP,"href","/docs/transformers/pr_18022/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(HP,"href","/docs/transformers/pr_18022/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(UP,"href","/docs/transformers/pr_18022/en/model_doc/wavlm#transformers.WavLMConfig"),c(JP,"href","/docs/transformers/pr_18022/en/model_doc/xglm#transformers.XGLMConfig"),c(YP,"href","/docs/transformers/pr_18022/en/model_doc/xlm#transformers.XLMConfig"),c(KP,"href","/docs/transformers/pr_18022/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(ZP,"href","/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(eB,"href","/docs/transformers/pr_18022/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(oB,"href","/docs/transformers/pr_18022/en/model_doc/xlnet#transformers.XLNetConfig"),c(rB,"href","/docs/transformers/pr_18022/en/model_doc/yolos#transformers.YolosConfig"),c(tB,"href","/docs/transformers/pr_18022/en/model_doc/yoso#transformers.YosoConfig"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eh,"id","transformers.AutoTokenizer"),c(eh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eh,"href","#transformers.AutoTokenizer"),c(qi,"class","relative group"),c(aB,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(nB,"href","/docs/transformers/pr_18022/en/model_doc/albert#transformers.AlbertTokenizer"),c(sB,"href","/docs/transformers/pr_18022/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(lB,"href","/docs/transformers/pr_18022/en/model_doc/bart#transformers.BartTokenizer"),c(iB,"href","/docs/transformers/pr_18022/en/model_doc/bart#transformers.BartTokenizerFast"),c(dB,"href","/docs/transformers/pr_18022/en/model_doc/barthez#transformers.BarthezTokenizer"),c(cB,"href","/docs/transformers/pr_18022/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(fB,"href","/docs/transformers/pr_18022/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(mB,"href","/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertTokenizer"),c(gB,"href","/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertTokenizerFast"),c(hB,"href","/docs/transformers/pr_18022/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(pB,"href","/docs/transformers/pr_18022/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(_B,"href","/docs/transformers/pr_18022/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(uB,"href","/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(bB,"href","/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(vB,"href","/docs/transformers/pr_18022/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(FB,"href","/docs/transformers/pr_18022/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(TB,"href","/docs/transformers/pr_18022/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(MB,"href","/docs/transformers/pr_18022/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(EB,"href","/docs/transformers/pr_18022/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(CB,"href","/docs/transformers/pr_18022/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(wB,"href","/docs/transformers/pr_18022/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(AB,"href","/docs/transformers/pr_18022/en/model_doc/camembert#transformers.CamembertTokenizer"),c(LB,"href","/docs/transformers/pr_18022/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(yB,"href","/docs/transformers/pr_18022/en/model_doc/canine#transformers.CanineTokenizer"),c(xB,"href","/docs/transformers/pr_18022/en/model_doc/clip#transformers.CLIPTokenizer"),c($B,"href","/docs/transformers/pr_18022/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(kB,"href","/docs/transformers/pr_18022/en/model_doc/codegen#transformers.CodeGenTokenizer"),c(SB,"href","/docs/transformers/pr_18022/en/model_doc/codegen#transformers.CodeGenTokenizerFast"),c(RB,"href","/docs/transformers/pr_18022/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(PB,"href","/docs/transformers/pr_18022/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(BB,"href","/docs/transformers/pr_18022/en/model_doc/cpm#transformers.CpmTokenizer"),c(NB,"href","/docs/transformers/pr_18022/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(IB,"href","/docs/transformers/pr_18022/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(qB,"href","/docs/transformers/pr_18022/en/model_doc/roberta#transformers.RobertaTokenizer"),c(jB,"href","/docs/transformers/pr_18022/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(DB,"href","/docs/transformers/pr_18022/en/model_doc/deberta#transformers.DebertaTokenizer"),c(GB,"href","/docs/transformers/pr_18022/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(OB,"href","/docs/transformers/pr_18022/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(VB,"href","/docs/transformers/pr_18022/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(XB,"href","/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(zB,"href","/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(QB,"href","/docs/transformers/pr_18022/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(WB,"href","/docs/transformers/pr_18022/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(HB,"href","/docs/transformers/pr_18022/en/model_doc/electra#transformers.ElectraTokenizer"),c(UB,"href","/docs/transformers/pr_18022/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(JB,"href","/docs/transformers/pr_18022/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(YB,"href","/docs/transformers/pr_18022/en/model_doc/fnet#transformers.FNetTokenizer"),c(KB,"href","/docs/transformers/pr_18022/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(ZB,"href","/docs/transformers/pr_18022/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(eN,"href","/docs/transformers/pr_18022/en/model_doc/funnel#transformers.FunnelTokenizer"),c(oN,"href","/docs/transformers/pr_18022/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(rN,"href","/docs/transformers/pr_18022/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(tN,"href","/docs/transformers/pr_18022/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(aN,"href","/docs/transformers/pr_18022/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(nN,"href","/docs/transformers/pr_18022/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(sN,"href","/docs/transformers/pr_18022/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(lN,"href","/docs/transformers/pr_18022/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(iN,"href","/docs/transformers/pr_18022/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(dN,"href","/docs/transformers/pr_18022/en/model_doc/clip#transformers.CLIPTokenizer"),c(cN,"href","/docs/transformers/pr_18022/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(fN,"href","/docs/transformers/pr_18022/en/model_doc/herbert#transformers.HerbertTokenizer"),c(mN,"href","/docs/transformers/pr_18022/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(gN,"href","/docs/transformers/pr_18022/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(hN,"href","/docs/transformers/pr_18022/en/model_doc/roberta#transformers.RobertaTokenizer"),c(pN,"href","/docs/transformers/pr_18022/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(_N,"href","/docs/transformers/pr_18022/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(uN,"href","/docs/transformers/pr_18022/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(bN,"href","/docs/transformers/pr_18022/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(vN,"href","/docs/transformers/pr_18022/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(FN,"href","/docs/transformers/pr_18022/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(TN,"href","/docs/transformers/pr_18022/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(MN,"href","/docs/transformers/pr_18022/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(EN,"href","/docs/transformers/pr_18022/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(CN,"href","/docs/transformers/pr_18022/en/model_doc/led#transformers.LEDTokenizer"),c(wN,"href","/docs/transformers/pr_18022/en/model_doc/led#transformers.LEDTokenizerFast"),c(AN,"href","/docs/transformers/pr_18022/en/model_doc/longformer#transformers.LongformerTokenizer"),c(LN,"href","/docs/transformers/pr_18022/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(yN,"href","/docs/transformers/pr_18022/en/model_doc/t5#transformers.T5Tokenizer"),c(xN,"href","/docs/transformers/pr_18022/en/model_doc/t5#transformers.T5TokenizerFast"),c($N,"href","/docs/transformers/pr_18022/en/model_doc/luke#transformers.LukeTokenizer"),c(kN,"href","/docs/transformers/pr_18022/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(SN,"href","/docs/transformers/pr_18022/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(RN,"href","/docs/transformers/pr_18022/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(PN,"href","/docs/transformers/pr_18022/en/model_doc/marian#transformers.MarianTokenizer"),c(BN,"href","/docs/transformers/pr_18022/en/model_doc/mbart#transformers.MBartTokenizer"),c(NN,"href","/docs/transformers/pr_18022/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(IN,"href","/docs/transformers/pr_18022/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(qN,"href","/docs/transformers/pr_18022/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(jN,"href","/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertTokenizer"),c(DN,"href","/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertTokenizerFast"),c(GN,"href","/docs/transformers/pr_18022/en/model_doc/mluke#transformers.MLukeTokenizer"),c(ON,"href","/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(VN,"href","/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(XN,"href","/docs/transformers/pr_18022/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(zN,"href","/docs/transformers/pr_18022/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(QN,"href","/docs/transformers/pr_18022/en/model_doc/t5#transformers.T5Tokenizer"),c(WN,"href","/docs/transformers/pr_18022/en/model_doc/t5#transformers.T5TokenizerFast"),c(HN,"href","/docs/transformers/pr_18022/en/model_doc/mvp#transformers.MvpTokenizer"),c(UN,"href","/docs/transformers/pr_18022/en/model_doc/mvp#transformers.MvpTokenizerFast"),c(JN,"href","/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertTokenizer"),c(YN,"href","/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertTokenizerFast"),c(KN,"href","/docs/transformers/pr_18022/en/model_doc/nllb#transformers.NllbTokenizer"),c(ZN,"href","/docs/transformers/pr_18022/en/model_doc/nllb#transformers.NllbTokenizerFast"),c(eI,"href","/docs/transformers/pr_18022/en/model_doc/albert#transformers.AlbertTokenizer"),c(oI,"href","/docs/transformers/pr_18022/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(rI,"href","/docs/transformers/pr_18022/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(tI,"href","/docs/transformers/pr_18022/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(aI,"href","/docs/transformers/pr_18022/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(nI,"href","/docs/transformers/pr_18022/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(sI,"href","/docs/transformers/pr_18022/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(lI,"href","/docs/transformers/pr_18022/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(iI,"href","/docs/transformers/pr_18022/en/model_doc/phobert#transformers.PhobertTokenizer"),c(dI,"href","/docs/transformers/pr_18022/en/model_doc/plbart#transformers.PLBartTokenizer"),c(cI,"href","/docs/transformers/pr_18022/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(fI,"href","/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertTokenizer"),c(mI,"href","/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertTokenizerFast"),c(gI,"href","/docs/transformers/pr_18022/en/model_doc/rag#transformers.RagTokenizer"),c(hI,"href","/docs/transformers/pr_18022/en/model_doc/realm#transformers.RealmTokenizer"),c(pI,"href","/docs/transformers/pr_18022/en/model_doc/realm#transformers.RealmTokenizerFast"),c(_I,"href","/docs/transformers/pr_18022/en/model_doc/reformer#transformers.ReformerTokenizer"),c(uI,"href","/docs/transformers/pr_18022/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(bI,"href","/docs/transformers/pr_18022/en/model_doc/rembert#transformers.RemBertTokenizer"),c(vI,"href","/docs/transformers/pr_18022/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(FI,"href","/docs/transformers/pr_18022/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(TI,"href","/docs/transformers/pr_18022/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(MI,"href","/docs/transformers/pr_18022/en/model_doc/roberta#transformers.RobertaTokenizer"),c(EI,"href","/docs/transformers/pr_18022/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(CI,"href","/docs/transformers/pr_18022/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(wI,"href","/docs/transformers/pr_18022/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(AI,"href","/docs/transformers/pr_18022/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(LI,"href","/docs/transformers/pr_18022/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(yI,"href","/docs/transformers/pr_18022/en/model_doc/splinter#transformers.SplinterTokenizer"),c(xI,"href","/docs/transformers/pr_18022/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c($I,"href","/docs/transformers/pr_18022/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(kI,"href","/docs/transformers/pr_18022/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(SI,"href","/docs/transformers/pr_18022/en/model_doc/t5#transformers.T5Tokenizer"),c(RI,"href","/docs/transformers/pr_18022/en/model_doc/t5#transformers.T5TokenizerFast"),c(PI,"href","/docs/transformers/pr_18022/en/model_doc/tapas#transformers.TapasTokenizer"),c(BI,"href","/docs/transformers/pr_18022/en/model_doc/tapex#transformers.TapexTokenizer"),c(NI,"href","/docs/transformers/pr_18022/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(II,"href","/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertTokenizer"),c(qI,"href","/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertTokenizerFast"),c(jI,"href","/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertTokenizer"),c(DI,"href","/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertTokenizerFast"),c(GI,"href","/docs/transformers/pr_18022/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(OI,"href","/docs/transformers/pr_18022/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(VI,"href","/docs/transformers/pr_18022/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(XI,"href","/docs/transformers/pr_18022/en/model_doc/xglm#transformers.XGLMTokenizer"),c(zI,"href","/docs/transformers/pr_18022/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(QI,"href","/docs/transformers/pr_18022/en/model_doc/xlm#transformers.XLMTokenizer"),c(WI,"href","/docs/transformers/pr_18022/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(HI,"href","/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(UI,"href","/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(JI,"href","/docs/transformers/pr_18022/en/model_doc/roberta#transformers.RobertaTokenizer"),c(YI,"href","/docs/transformers/pr_18022/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(KI,"href","/docs/transformers/pr_18022/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(ZI,"href","/docs/transformers/pr_18022/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(eq,"href","/docs/transformers/pr_18022/en/model_doc/albert#transformers.AlbertTokenizer"),c(oq,"href","/docs/transformers/pr_18022/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Nh,"id","transformers.AutoFeatureExtractor"),c(Nh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Nh,"href","#transformers.AutoFeatureExtractor"),c(ji,"class","relative group"),c(rq,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(tq,"href","/docs/transformers/pr_18022/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(aq,"href","/docs/transformers/pr_18022/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(nq,"href","/docs/transformers/pr_18022/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(sq,"href","/docs/transformers/pr_18022/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(lq,"href","/docs/transformers/pr_18022/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(iq,"href","/docs/transformers/pr_18022/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(dq,"href","/docs/transformers/pr_18022/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(cq,"href","/docs/transformers/pr_18022/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(fq,"href","/docs/transformers/pr_18022/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(mq,"href","/docs/transformers/pr_18022/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(gq,"href","/docs/transformers/pr_18022/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(hq,"href","/docs/transformers/pr_18022/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(pq,"href","/docs/transformers/pr_18022/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(_q,"href","/docs/transformers/pr_18022/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(uq,"href","/docs/transformers/pr_18022/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(bq,"href","/docs/transformers/pr_18022/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(vq,"href","/docs/transformers/pr_18022/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(Fq,"href","/docs/transformers/pr_18022/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(Tq,"href","/docs/transformers/pr_18022/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(Mq,"href","/docs/transformers/pr_18022/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor"),c(Eq,"href","/docs/transformers/pr_18022/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(Cq,"href","/docs/transformers/pr_18022/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(wq,"href","/docs/transformers/pr_18022/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Aq,"href","/docs/transformers/pr_18022/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Lq,"href","/docs/transformers/pr_18022/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(yq,"href","/docs/transformers/pr_18022/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(xq,"href","/docs/transformers/pr_18022/en/model_doc/vit#transformers.ViTFeatureExtractor"),c($q,"href","/docs/transformers/pr_18022/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(kq,"href","/docs/transformers/pr_18022/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(Sq,"href","/docs/transformers/pr_18022/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(Rq,"href","/docs/transformers/pr_18022/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(Pq,"href","/docs/transformers/pr_18022/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(Bq,"href","/docs/transformers/pr_18022/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(Nq,"href","/docs/transformers/pr_18022/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fp,"id","transformers.AutoProcessor"),c(Fp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Fp,"href","#transformers.AutoProcessor"),c(Di,"class","relative group"),c(Iq,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(qq,"href","/docs/transformers/pr_18022/en/model_doc/clip#transformers.CLIPProcessor"),c(jq,"href","/docs/transformers/pr_18022/en/model_doc/clip#transformers.CLIPProcessor"),c(Dq,"href","/docs/transformers/pr_18022/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(Gq,"href","/docs/transformers/pr_18022/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(Oq,"href","/docs/transformers/pr_18022/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(Vq,"href","/docs/transformers/pr_18022/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Xq,"href","/docs/transformers/pr_18022/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(zq,"href","/docs/transformers/pr_18022/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(Qq,"href","/docs/transformers/pr_18022/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(Wq,"href","/docs/transformers/pr_18022/en/model_doc/trocr#transformers.TrOCRProcessor"),c(Hq,"href","/docs/transformers/pr_18022/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Uq,"href","/docs/transformers/pr_18022/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Jq,"href","/docs/transformers/pr_18022/en/model_doc/vilt#transformers.ViltProcessor"),c(Yq,"href","/docs/transformers/pr_18022/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(Kq,"href","/docs/transformers/pr_18022/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Zq,"href","/docs/transformers/pr_18022/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(ej,"href","/docs/transformers/pr_18022/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Op,"id","transformers.AutoModel"),c(Op,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Op,"href","#transformers.AutoModel"),c(Oi,"class","relative group"),c(oj,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rj,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tj,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aj,"href","/docs/transformers/pr_18022/en/model_doc/albert#transformers.AlbertModel"),c(nj,"href","/docs/transformers/pr_18022/en/model_doc/bart#transformers.BartModel"),c(sj,"href","/docs/transformers/pr_18022/en/model_doc/beit#transformers.BeitModel"),c(lj,"href","/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertModel"),c(ij,"href","/docs/transformers/pr_18022/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(dj,"href","/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.BigBirdModel"),c(cj,"href","/docs/transformers/pr_18022/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(fj,"href","/docs/transformers/pr_18022/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(mj,"href","/docs/transformers/pr_18022/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(gj,"href","/docs/transformers/pr_18022/en/model_doc/bloom#transformers.BloomModel"),c(hj,"href","/docs/transformers/pr_18022/en/model_doc/camembert#transformers.CamembertModel"),c(pj,"href","/docs/transformers/pr_18022/en/model_doc/canine#transformers.CanineModel"),c(_j,"href","/docs/transformers/pr_18022/en/model_doc/clip#transformers.CLIPModel"),c(uj,"href","/docs/transformers/pr_18022/en/model_doc/codegen#transformers.CodeGenModel"),c(bj,"href","/docs/transformers/pr_18022/en/model_doc/convbert#transformers.ConvBertModel"),c(vj,"href","/docs/transformers/pr_18022/en/model_doc/convnext#transformers.ConvNextModel"),c(Fj,"href","/docs/transformers/pr_18022/en/model_doc/ctrl#transformers.CTRLModel"),c(Tj,"href","/docs/transformers/pr_18022/en/model_doc/cvt#transformers.CvtModel"),c(Mj,"href","/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(Ej,"href","/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(Cj,"href","/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(wj,"href","/docs/transformers/pr_18022/en/model_doc/deberta#transformers.DebertaModel"),c(Aj,"href","/docs/transformers/pr_18022/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(Lj,"href","/docs/transformers/pr_18022/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(yj,"href","/docs/transformers/pr_18022/en/model_doc/deit#transformers.DeiTModel"),c(xj,"href","/docs/transformers/pr_18022/en/model_doc/detr#transformers.DetrModel"),c($j,"href","/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.DistilBertModel"),c(kj,"href","/docs/transformers/pr_18022/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(Sj,"href","/docs/transformers/pr_18022/en/model_doc/dpt#transformers.DPTModel"),c(Rj,"href","/docs/transformers/pr_18022/en/model_doc/electra#transformers.ElectraModel"),c(Pj,"href","/docs/transformers/pr_18022/en/model_doc/flaubert#transformers.FlaubertModel"),c(Bj,"href","/docs/transformers/pr_18022/en/model_doc/flava#transformers.FlavaModel"),c(Nj,"href","/docs/transformers/pr_18022/en/model_doc/fnet#transformers.FNetModel"),c(Ij,"href","/docs/transformers/pr_18022/en/model_doc/fsmt#transformers.FSMTModel"),c(qj,"href","/docs/transformers/pr_18022/en/model_doc/funnel#transformers.FunnelModel"),c(jj,"href","/docs/transformers/pr_18022/en/model_doc/funnel#transformers.FunnelBaseModel"),c(Dj,"href","/docs/transformers/pr_18022/en/model_doc/glpn#transformers.GLPNModel"),c(Gj,"href","/docs/transformers/pr_18022/en/model_doc/gpt2#transformers.GPT2Model"),c(Oj,"href","/docs/transformers/pr_18022/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(Vj,"href","/docs/transformers/pr_18022/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(Xj,"href","/docs/transformers/pr_18022/en/model_doc/gptj#transformers.GPTJModel"),c(zj,"href","/docs/transformers/pr_18022/en/model_doc/groupvit#transformers.GroupViTModel"),c(Qj,"href","/docs/transformers/pr_18022/en/model_doc/hubert#transformers.HubertModel"),c(Wj,"href","/docs/transformers/pr_18022/en/model_doc/ibert#transformers.IBertModel"),c(Hj,"href","/docs/transformers/pr_18022/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(Uj,"href","/docs/transformers/pr_18022/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(Jj,"href","/docs/transformers/pr_18022/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(Yj,"href","/docs/transformers/pr_18022/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(Kj,"href","/docs/transformers/pr_18022/en/model_doc/led#transformers.LEDModel"),c(Zj,"href","/docs/transformers/pr_18022/en/model_doc/levit#transformers.LevitModel"),c(eD,"href","/docs/transformers/pr_18022/en/model_doc/longformer#transformers.LongformerModel"),c(oD,"href","/docs/transformers/pr_18022/en/model_doc/longt5#transformers.LongT5Model"),c(rD,"href","/docs/transformers/pr_18022/en/model_doc/luke#transformers.LukeModel"),c(tD,"href","/docs/transformers/pr_18022/en/model_doc/lxmert#transformers.LxmertModel"),c(aD,"href","/docs/transformers/pr_18022/en/model_doc/m2m_100#transformers.M2M100Model"),c(nD,"href","/docs/transformers/pr_18022/en/model_doc/marian#transformers.MarianModel"),c(sD,"href","/docs/transformers/pr_18022/en/model_doc/maskformer#transformers.MaskFormerModel"),c(lD,"href","/docs/transformers/pr_18022/en/model_doc/mbart#transformers.MBartModel"),c(iD,"href","/docs/transformers/pr_18022/en/model_doc/mctct#transformers.MCTCTModel"),c(dD,"href","/docs/transformers/pr_18022/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(cD,"href","/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.MobileBertModel"),c(fD,"href","/docs/transformers/pr_18022/en/model_doc/mobilevit#transformers.MobileViTModel"),c(mD,"href","/docs/transformers/pr_18022/en/model_doc/mpnet#transformers.MPNetModel"),c(gD,"href","/docs/transformers/pr_18022/en/model_doc/mt5#transformers.MT5Model"),c(hD,"href","/docs/transformers/pr_18022/en/model_doc/mvp#transformers.MvpModel"),c(pD,"href","/docs/transformers/pr_18022/en/model_doc/nezha#transformers.NezhaModel"),c(_D,"href","/docs/transformers/pr_18022/en/model_doc/m2m_100#transformers.M2M100Model"),c(uD,"href","/docs/transformers/pr_18022/en/model_doc/nystromformer#transformers.NystromformerModel"),c(bD,"href","/docs/transformers/pr_18022/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(vD,"href","/docs/transformers/pr_18022/en/model_doc/opt#transformers.OPTModel"),c(FD,"href","/docs/transformers/pr_18022/en/model_doc/pegasus#transformers.PegasusModel"),c(TD,"href","/docs/transformers/pr_18022/en/model_doc/perceiver#transformers.PerceiverModel"),c(MD,"href","/docs/transformers/pr_18022/en/model_doc/plbart#transformers.PLBartModel"),c(ED,"href","/docs/transformers/pr_18022/en/model_doc/poolformer#transformers.PoolFormerModel"),c(CD,"href","/docs/transformers/pr_18022/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(wD,"href","/docs/transformers/pr_18022/en/model_doc/qdqbert#transformers.QDQBertModel"),c(AD,"href","/docs/transformers/pr_18022/en/model_doc/reformer#transformers.ReformerModel"),c(LD,"href","/docs/transformers/pr_18022/en/model_doc/regnet#transformers.RegNetModel"),c(yD,"href","/docs/transformers/pr_18022/en/model_doc/rembert#transformers.RemBertModel"),c(xD,"href","/docs/transformers/pr_18022/en/model_doc/resnet#transformers.ResNetModel"),c($D,"href","/docs/transformers/pr_18022/en/model_doc/retribert#transformers.RetriBertModel"),c(kD,"href","/docs/transformers/pr_18022/en/model_doc/roberta#transformers.RobertaModel"),c(SD,"href","/docs/transformers/pr_18022/en/model_doc/roformer#transformers.RoFormerModel"),c(RD,"href","/docs/transformers/pr_18022/en/model_doc/segformer#transformers.SegformerModel"),c(PD,"href","/docs/transformers/pr_18022/en/model_doc/sew#transformers.SEWModel"),c(BD,"href","/docs/transformers/pr_18022/en/model_doc/sew-d#transformers.SEWDModel"),c(ND,"href","/docs/transformers/pr_18022/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(ID,"href","/docs/transformers/pr_18022/en/model_doc/splinter#transformers.SplinterModel"),c(qD,"href","/docs/transformers/pr_18022/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(jD,"href","/docs/transformers/pr_18022/en/model_doc/swin#transformers.SwinModel"),c(DD,"href","/docs/transformers/pr_18022/en/model_doc/t5#transformers.T5Model"),c(GD,"href","/docs/transformers/pr_18022/en/model_doc/tapas#transformers.TapasModel"),c(OD,"href","/docs/transformers/pr_18022/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(VD,"href","/docs/transformers/pr_18022/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(XD,"href","/docs/transformers/pr_18022/en/model_doc/unispeech#transformers.UniSpeechModel"),c(zD,"href","/docs/transformers/pr_18022/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(QD,"href","/docs/transformers/pr_18022/en/model_doc/van#transformers.VanModel"),c(WD,"href","/docs/transformers/pr_18022/en/model_doc/vilt#transformers.ViltModel"),c(HD,"href","/docs/transformers/pr_18022/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(UD,"href","/docs/transformers/pr_18022/en/model_doc/visual_bert#transformers.VisualBertModel"),c(JD,"href","/docs/transformers/pr_18022/en/model_doc/vit#transformers.ViTModel"),c(YD,"href","/docs/transformers/pr_18022/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(KD,"href","/docs/transformers/pr_18022/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(ZD,"href","/docs/transformers/pr_18022/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(eG,"href","/docs/transformers/pr_18022/en/model_doc/wavlm#transformers.WavLMModel"),c(oG,"href","/docs/transformers/pr_18022/en/model_doc/xglm#transformers.XGLMModel"),c(rG,"href","/docs/transformers/pr_18022/en/model_doc/xlm#transformers.XLMModel"),c(tG,"href","/docs/transformers/pr_18022/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(aG,"href","/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(nG,"href","/docs/transformers/pr_18022/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(sG,"href","/docs/transformers/pr_18022/en/model_doc/xlnet#transformers.XLNetModel"),c(lG,"href","/docs/transformers/pr_18022/en/model_doc/yolos#transformers.YolosModel"),c(iG,"href","/docs/transformers/pr_18022/en/model_doc/yoso#transformers.YosoModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uu,"id","transformers.AutoModelForPreTraining"),c(Uu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Uu,"href","#transformers.AutoModelForPreTraining"),c(zi,"class","relative group"),c(dG,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cG,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fG,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mG,"href","/docs/transformers/pr_18022/en/model_doc/albert#transformers.AlbertForPreTraining"),c(gG,"href","/docs/transformers/pr_18022/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(hG,"href","/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertForPreTraining"),c(pG,"href","/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(_G,"href","/docs/transformers/pr_18022/en/model_doc/bloom#transformers.BloomForCausalLM"),c(uG,"href","/docs/transformers/pr_18022/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(bG,"href","/docs/transformers/pr_18022/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(vG,"href","/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(FG,"href","/docs/transformers/pr_18022/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(TG,"href","/docs/transformers/pr_18022/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(MG,"href","/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(EG,"href","/docs/transformers/pr_18022/en/model_doc/electra#transformers.ElectraForPreTraining"),c(CG,"href","/docs/transformers/pr_18022/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(wG,"href","/docs/transformers/pr_18022/en/model_doc/flava#transformers.FlavaForPreTraining"),c(AG,"href","/docs/transformers/pr_18022/en/model_doc/fnet#transformers.FNetForPreTraining"),c(LG,"href","/docs/transformers/pr_18022/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(yG,"href","/docs/transformers/pr_18022/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(xG,"href","/docs/transformers/pr_18022/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c($G,"href","/docs/transformers/pr_18022/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(kG,"href","/docs/transformers/pr_18022/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(SG,"href","/docs/transformers/pr_18022/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(RG,"href","/docs/transformers/pr_18022/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(PG,"href","/docs/transformers/pr_18022/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(BG,"href","/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(NG,"href","/docs/transformers/pr_18022/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(IG,"href","/docs/transformers/pr_18022/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(qG,"href","/docs/transformers/pr_18022/en/model_doc/nezha#transformers.NezhaForPreTraining"),c(jG,"href","/docs/transformers/pr_18022/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(DG,"href","/docs/transformers/pr_18022/en/model_doc/retribert#transformers.RetriBertModel"),c(GG,"href","/docs/transformers/pr_18022/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(OG,"href","/docs/transformers/pr_18022/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(VG,"href","/docs/transformers/pr_18022/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(XG,"href","/docs/transformers/pr_18022/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(zG,"href","/docs/transformers/pr_18022/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(QG,"href","/docs/transformers/pr_18022/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(WG,"href","/docs/transformers/pr_18022/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(HG,"href","/docs/transformers/pr_18022/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(UG,"href","/docs/transformers/pr_18022/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(JG,"href","/docs/transformers/pr_18022/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(YG,"href","/docs/transformers/pr_18022/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(KG,"href","/docs/transformers/pr_18022/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(ZG,"href","/docs/transformers/pr_18022/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(eO,"href","/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(oO,"href","/docs/transformers/pr_18022/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(rO,"href","/docs/transformers/pr_18022/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(X2,"id","transformers.AutoModelForCausalLM"),c(X2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X2,"href","#transformers.AutoModelForCausalLM"),c(Hi,"class","relative group"),c(tO,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aO,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nO,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sO,"href","/docs/transformers/pr_18022/en/model_doc/bart#transformers.BartForCausalLM"),c(lO,"href","/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertLMHeadModel"),c(iO,"href","/docs/transformers/pr_18022/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(dO,"href","/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(cO,"href","/docs/transformers/pr_18022/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(fO,"href","/docs/transformers/pr_18022/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(mO,"href","/docs/transformers/pr_18022/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(gO,"href","/docs/transformers/pr_18022/en/model_doc/bloom#transformers.BloomForCausalLM"),c(hO,"href","/docs/transformers/pr_18022/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(pO,"href","/docs/transformers/pr_18022/en/model_doc/codegen#transformers.CodeGenForCausalLM"),c(_O,"href","/docs/transformers/pr_18022/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(uO,"href","/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(bO,"href","/docs/transformers/pr_18022/en/model_doc/electra#transformers.ElectraForCausalLM"),c(vO,"href","/docs/transformers/pr_18022/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(FO,"href","/docs/transformers/pr_18022/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(TO,"href","/docs/transformers/pr_18022/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(MO,"href","/docs/transformers/pr_18022/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(EO,"href","/docs/transformers/pr_18022/en/model_doc/marian#transformers.MarianForCausalLM"),c(CO,"href","/docs/transformers/pr_18022/en/model_doc/mbart#transformers.MBartForCausalLM"),c(wO,"href","/docs/transformers/pr_18022/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(AO,"href","/docs/transformers/pr_18022/en/model_doc/mvp#transformers.MvpForCausalLM"),c(LO,"href","/docs/transformers/pr_18022/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(yO,"href","/docs/transformers/pr_18022/en/model_doc/opt#transformers.OPTForCausalLM"),c(xO,"href","/docs/transformers/pr_18022/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c($O,"href","/docs/transformers/pr_18022/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(kO,"href","/docs/transformers/pr_18022/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(SO,"href","/docs/transformers/pr_18022/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(RO,"href","/docs/transformers/pr_18022/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(PO,"href","/docs/transformers/pr_18022/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(BO,"href","/docs/transformers/pr_18022/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(NO,"href","/docs/transformers/pr_18022/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(IO,"href","/docs/transformers/pr_18022/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(qO,"href","/docs/transformers/pr_18022/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(jO,"href","/docs/transformers/pr_18022/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(DO,"href","/docs/transformers/pr_18022/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(GO,"href","/docs/transformers/pr_18022/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(OO,"href","/docs/transformers/pr_18022/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(VO,"href","/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(XO,"href","/docs/transformers/pr_18022/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(zO,"href","/docs/transformers/pr_18022/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P1,"id","transformers.AutoModelForMaskedLM"),c(P1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P1,"href","#transformers.AutoModelForMaskedLM"),c(Yi,"class","relative group"),c(QO,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WO,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HO,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UO,"href","/docs/transformers/pr_18022/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(JO,"href","/docs/transformers/pr_18022/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(YO,"href","/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertForMaskedLM"),c(KO,"href","/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(ZO,"href","/docs/transformers/pr_18022/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(eV,"href","/docs/transformers/pr_18022/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(oV,"href","/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(rV,"href","/docs/transformers/pr_18022/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(tV,"href","/docs/transformers/pr_18022/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(aV,"href","/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(nV,"href","/docs/transformers/pr_18022/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(sV,"href","/docs/transformers/pr_18022/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(lV,"href","/docs/transformers/pr_18022/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(iV,"href","/docs/transformers/pr_18022/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(dV,"href","/docs/transformers/pr_18022/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(cV,"href","/docs/transformers/pr_18022/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(fV,"href","/docs/transformers/pr_18022/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(mV,"href","/docs/transformers/pr_18022/en/model_doc/luke#transformers.LukeForMaskedLM"),c(gV,"href","/docs/transformers/pr_18022/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(hV,"href","/docs/transformers/pr_18022/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(pV,"href","/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(_V,"href","/docs/transformers/pr_18022/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(uV,"href","/docs/transformers/pr_18022/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(bV,"href","/docs/transformers/pr_18022/en/model_doc/nezha#transformers.NezhaForMaskedLM"),c(vV,"href","/docs/transformers/pr_18022/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(FV,"href","/docs/transformers/pr_18022/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(TV,"href","/docs/transformers/pr_18022/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(MV,"href","/docs/transformers/pr_18022/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(EV,"href","/docs/transformers/pr_18022/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(CV,"href","/docs/transformers/pr_18022/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(wV,"href","/docs/transformers/pr_18022/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(AV,"href","/docs/transformers/pr_18022/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(LV,"href","/docs/transformers/pr_18022/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(yV,"href","/docs/transformers/pr_18022/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(xV,"href","/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c($V,"href","/docs/transformers/pr_18022/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(kV,"href","/docs/transformers/pr_18022/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mb,"id","transformers.AutoModelForSeq2SeqLM"),c(Mb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Mb,"href","#transformers.AutoModelForSeq2SeqLM"),c(ed,"class","relative group"),c(SV,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RV,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PV,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BV,"href","/docs/transformers/pr_18022/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(NV,"href","/docs/transformers/pr_18022/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(IV,"href","/docs/transformers/pr_18022/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(qV,"href","/docs/transformers/pr_18022/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(jV,"href","/docs/transformers/pr_18022/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(DV,"href","/docs/transformers/pr_18022/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(GV,"href","/docs/transformers/pr_18022/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(OV,"href","/docs/transformers/pr_18022/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(VV,"href","/docs/transformers/pr_18022/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(XV,"href","/docs/transformers/pr_18022/en/model_doc/marian#transformers.MarianMTModel"),c(zV,"href","/docs/transformers/pr_18022/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(QV,"href","/docs/transformers/pr_18022/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(WV,"href","/docs/transformers/pr_18022/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(HV,"href","/docs/transformers/pr_18022/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(UV,"href","/docs/transformers/pr_18022/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(JV,"href","/docs/transformers/pr_18022/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(YV,"href","/docs/transformers/pr_18022/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(KV,"href","/docs/transformers/pr_18022/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(ZV,"href","/docs/transformers/pr_18022/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zb,"id","transformers.AutoModelForSequenceClassification"),c(zb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zb,"href","#transformers.AutoModelForSequenceClassification"),c(td,"class","relative group"),c(eX,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oX,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rX,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tX,"href","/docs/transformers/pr_18022/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(aX,"href","/docs/transformers/pr_18022/en/model_doc/bart#transformers.BartForSequenceClassification"),c(nX,"href","/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertForSequenceClassification"),c(sX,"href","/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(lX,"href","/docs/transformers/pr_18022/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(iX,"href","/docs/transformers/pr_18022/en/model_doc/bloom#transformers.BloomForSequenceClassification"),c(dX,"href","/docs/transformers/pr_18022/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(cX,"href","/docs/transformers/pr_18022/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(fX,"href","/docs/transformers/pr_18022/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(mX,"href","/docs/transformers/pr_18022/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(gX,"href","/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(hX,"href","/docs/transformers/pr_18022/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(pX,"href","/docs/transformers/pr_18022/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(_X,"href","/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(uX,"href","/docs/transformers/pr_18022/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(bX,"href","/docs/transformers/pr_18022/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(vX,"href","/docs/transformers/pr_18022/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(FX,"href","/docs/transformers/pr_18022/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(TX,"href","/docs/transformers/pr_18022/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(MX,"href","/docs/transformers/pr_18022/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(EX,"href","/docs/transformers/pr_18022/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(CX,"href","/docs/transformers/pr_18022/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(wX,"href","/docs/transformers/pr_18022/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(AX,"href","/docs/transformers/pr_18022/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(LX,"href","/docs/transformers/pr_18022/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(yX,"href","/docs/transformers/pr_18022/en/model_doc/led#transformers.LEDForSequenceClassification"),c(xX,"href","/docs/transformers/pr_18022/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c($X,"href","/docs/transformers/pr_18022/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(kX,"href","/docs/transformers/pr_18022/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(SX,"href","/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(RX,"href","/docs/transformers/pr_18022/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(PX,"href","/docs/transformers/pr_18022/en/model_doc/mvp#transformers.MvpForSequenceClassification"),c(BX,"href","/docs/transformers/pr_18022/en/model_doc/nezha#transformers.NezhaForSequenceClassification"),c(NX,"href","/docs/transformers/pr_18022/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(IX,"href","/docs/transformers/pr_18022/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(qX,"href","/docs/transformers/pr_18022/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(jX,"href","/docs/transformers/pr_18022/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(DX,"href","/docs/transformers/pr_18022/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(GX,"href","/docs/transformers/pr_18022/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(OX,"href","/docs/transformers/pr_18022/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(VX,"href","/docs/transformers/pr_18022/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(XX,"href","/docs/transformers/pr_18022/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(zX,"href","/docs/transformers/pr_18022/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(QX,"href","/docs/transformers/pr_18022/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(WX,"href","/docs/transformers/pr_18022/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(HX,"href","/docs/transformers/pr_18022/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(UX,"href","/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(JX,"href","/docs/transformers/pr_18022/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(YX,"href","/docs/transformers/pr_18022/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(KX,"href","/docs/transformers/pr_18022/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zv,"id","transformers.AutoModelForMultipleChoice"),c(zv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zv,"href","#transformers.AutoModelForMultipleChoice"),c(sd,"class","relative group"),c(ZX,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ez,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oz,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rz,"href","/docs/transformers/pr_18022/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(tz,"href","/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertForMultipleChoice"),c(az,"href","/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(nz,"href","/docs/transformers/pr_18022/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(sz,"href","/docs/transformers/pr_18022/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(lz,"href","/docs/transformers/pr_18022/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(iz,"href","/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(dz,"href","/docs/transformers/pr_18022/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(cz,"href","/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(fz,"href","/docs/transformers/pr_18022/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(mz,"href","/docs/transformers/pr_18022/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(gz,"href","/docs/transformers/pr_18022/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(hz,"href","/docs/transformers/pr_18022/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(pz,"href","/docs/transformers/pr_18022/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(_z,"href","/docs/transformers/pr_18022/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(uz,"href","/docs/transformers/pr_18022/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(bz,"href","/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(vz,"href","/docs/transformers/pr_18022/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(Fz,"href","/docs/transformers/pr_18022/en/model_doc/nezha#transformers.NezhaForMultipleChoice"),c(Tz,"href","/docs/transformers/pr_18022/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(Mz,"href","/docs/transformers/pr_18022/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(Ez,"href","/docs/transformers/pr_18022/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(Cz,"href","/docs/transformers/pr_18022/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(wz,"href","/docs/transformers/pr_18022/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(Az,"href","/docs/transformers/pr_18022/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(Lz,"href","/docs/transformers/pr_18022/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(yz,"href","/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(xz,"href","/docs/transformers/pr_18022/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c($z,"href","/docs/transformers/pr_18022/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(kz,"href","/docs/transformers/pr_18022/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w0,"id","transformers.AutoModelForNextSentencePrediction"),c(w0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w0,"href","#transformers.AutoModelForNextSentencePrediction"),c(dd,"class","relative group"),c(Sz,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rz,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Pz,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bz,"href","/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(Nz,"href","/docs/transformers/pr_18022/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(Iz,"href","/docs/transformers/pr_18022/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(qz,"href","/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(jz,"href","/docs/transformers/pr_18022/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction"),c(Dz,"href","/docs/transformers/pr_18022/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(B0,"id","transformers.AutoModelForTokenClassification"),c(B0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(B0,"href","#transformers.AutoModelForTokenClassification"),c(md,"class","relative group"),c(Gz,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Oz,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Vz,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xz,"href","/docs/transformers/pr_18022/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(zz,"href","/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertForTokenClassification"),c(Qz,"href","/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(Wz,"href","/docs/transformers/pr_18022/en/model_doc/bloom#transformers.BloomForTokenClassification"),c(Hz,"href","/docs/transformers/pr_18022/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(Uz,"href","/docs/transformers/pr_18022/en/model_doc/canine#transformers.CanineForTokenClassification"),c(Jz,"href","/docs/transformers/pr_18022/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(Yz,"href","/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(Kz,"href","/docs/transformers/pr_18022/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(Zz,"href","/docs/transformers/pr_18022/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(eQ,"href","/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(oQ,"href","/docs/transformers/pr_18022/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(rQ,"href","/docs/transformers/pr_18022/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(tQ,"href","/docs/transformers/pr_18022/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(aQ,"href","/docs/transformers/pr_18022/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(nQ,"href","/docs/transformers/pr_18022/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(sQ,"href","/docs/transformers/pr_18022/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(lQ,"href","/docs/transformers/pr_18022/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(iQ,"href","/docs/transformers/pr_18022/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(dQ,"href","/docs/transformers/pr_18022/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(cQ,"href","/docs/transformers/pr_18022/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(fQ,"href","/docs/transformers/pr_18022/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(mQ,"href","/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(gQ,"href","/docs/transformers/pr_18022/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(hQ,"href","/docs/transformers/pr_18022/en/model_doc/nezha#transformers.NezhaForTokenClassification"),c(pQ,"href","/docs/transformers/pr_18022/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(_Q,"href","/docs/transformers/pr_18022/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(uQ,"href","/docs/transformers/pr_18022/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(bQ,"href","/docs/transformers/pr_18022/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(vQ,"href","/docs/transformers/pr_18022/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(FQ,"href","/docs/transformers/pr_18022/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(TQ,"href","/docs/transformers/pr_18022/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(MQ,"href","/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(EQ,"href","/docs/transformers/pr_18022/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(CQ,"href","/docs/transformers/pr_18022/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(wQ,"href","/docs/transformers/pr_18022/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TF,"id","transformers.AutoModelForQuestionAnswering"),c(TF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(TF,"href","#transformers.AutoModelForQuestionAnswering"),c(pd,"class","relative group"),c(AQ,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LQ,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yQ,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xQ,"href","/docs/transformers/pr_18022/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c($Q,"href","/docs/transformers/pr_18022/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(kQ,"href","/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(SQ,"href","/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(RQ,"href","/docs/transformers/pr_18022/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(PQ,"href","/docs/transformers/pr_18022/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(BQ,"href","/docs/transformers/pr_18022/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(NQ,"href","/docs/transformers/pr_18022/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(IQ,"href","/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(qQ,"href","/docs/transformers/pr_18022/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(jQ,"href","/docs/transformers/pr_18022/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(DQ,"href","/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(GQ,"href","/docs/transformers/pr_18022/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(OQ,"href","/docs/transformers/pr_18022/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(VQ,"href","/docs/transformers/pr_18022/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(XQ,"href","/docs/transformers/pr_18022/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(zQ,"href","/docs/transformers/pr_18022/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(QQ,"href","/docs/transformers/pr_18022/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(WQ,"href","/docs/transformers/pr_18022/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(HQ,"href","/docs/transformers/pr_18022/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(UQ,"href","/docs/transformers/pr_18022/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(JQ,"href","/docs/transformers/pr_18022/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(YQ,"href","/docs/transformers/pr_18022/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(KQ,"href","/docs/transformers/pr_18022/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(ZQ,"href","/docs/transformers/pr_18022/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(eW,"href","/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(oW,"href","/docs/transformers/pr_18022/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(rW,"href","/docs/transformers/pr_18022/en/model_doc/mvp#transformers.MvpForQuestionAnswering"),c(tW,"href","/docs/transformers/pr_18022/en/model_doc/nezha#transformers.NezhaForQuestionAnswering"),c(aW,"href","/docs/transformers/pr_18022/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(nW,"href","/docs/transformers/pr_18022/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(sW,"href","/docs/transformers/pr_18022/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(lW,"href","/docs/transformers/pr_18022/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(iW,"href","/docs/transformers/pr_18022/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(dW,"href","/docs/transformers/pr_18022/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(cW,"href","/docs/transformers/pr_18022/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(fW,"href","/docs/transformers/pr_18022/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(mW,"href","/docs/transformers/pr_18022/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(gW,"href","/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(hW,"href","/docs/transformers/pr_18022/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(pW,"href","/docs/transformers/pr_18022/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(_W,"href","/docs/transformers/pr_18022/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gT,"id","transformers.AutoModelForTableQuestionAnswering"),c(gT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gT,"href","#transformers.AutoModelForTableQuestionAnswering"),c(bd,"class","relative group"),c(uW,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bW,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vW,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FW,"href","/docs/transformers/pr_18022/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bT,"id","transformers.AutoModelForImageClassification"),c(bT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bT,"href","#transformers.AutoModelForImageClassification"),c(Td,"class","relative group"),c(TW,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MW,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EW,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CW,"href","/docs/transformers/pr_18022/en/model_doc/beit#transformers.BeitForImageClassification"),c(wW,"href","/docs/transformers/pr_18022/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(AW,"href","/docs/transformers/pr_18022/en/model_doc/cvt#transformers.CvtForImageClassification"),c(LW,"href","/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(yW,"href","/docs/transformers/pr_18022/en/model_doc/deit#transformers.DeiTForImageClassification"),c(xW,"href","/docs/transformers/pr_18022/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c($W,"href","/docs/transformers/pr_18022/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(kW,"href","/docs/transformers/pr_18022/en/model_doc/levit#transformers.LevitForImageClassification"),c(SW,"href","/docs/transformers/pr_18022/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(RW,"href","/docs/transformers/pr_18022/en/model_doc/mobilevit#transformers.MobileViTForImageClassification"),c(PW,"href","/docs/transformers/pr_18022/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(BW,"href","/docs/transformers/pr_18022/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(NW,"href","/docs/transformers/pr_18022/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(IW,"href","/docs/transformers/pr_18022/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(qW,"href","/docs/transformers/pr_18022/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(jW,"href","/docs/transformers/pr_18022/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(DW,"href","/docs/transformers/pr_18022/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(GW,"href","/docs/transformers/pr_18022/en/model_doc/swin#transformers.SwinForImageClassification"),c(OW,"href","/docs/transformers/pr_18022/en/model_doc/van#transformers.VanForImageClassification"),c(VW,"href","/docs/transformers/pr_18022/en/model_doc/vit#transformers.ViTForImageClassification"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BT,"id","transformers.AutoModelForVision2Seq"),c(BT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(BT,"href","#transformers.AutoModelForVision2Seq"),c(Cd,"class","relative group"),c(XW,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zW,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QW,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WW,"href","/docs/transformers/pr_18022/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DT,"id","transformers.AutoModelForVisualQuestionAnswering"),c(DT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DT,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(Ld,"class","relative group"),c(HW,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UW,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JW,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YW,"href","/docs/transformers/pr_18022/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zT,"id","transformers.AutoModelForAudioClassification"),c(zT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zT,"href","#transformers.AutoModelForAudioClassification"),c($d,"class","relative group"),c(KW,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZW,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eH,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oH,"href","/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(rH,"href","/docs/transformers/pr_18022/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(tH,"href","/docs/transformers/pr_18022/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(aH,"href","/docs/transformers/pr_18022/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(nH,"href","/docs/transformers/pr_18022/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(sH,"href","/docs/transformers/pr_18022/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(lH,"href","/docs/transformers/pr_18022/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(iH,"href","/docs/transformers/pr_18022/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(dH,"href","/docs/transformers/pr_18022/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a8,"id","transformers.AutoModelForAudioFrameClassification"),c(a8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a8,"href","#transformers.AutoModelForAudioFrameClassification"),c(Rd,"class","relative group"),c(cH,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fH,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mH,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gH,"href","/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(hH,"href","/docs/transformers/pr_18022/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(pH,"href","/docs/transformers/pr_18022/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(_H,"href","/docs/transformers/pr_18022/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(uH,"href","/docs/transformers/pr_18022/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(g8,"id","transformers.AutoModelForCTC"),c(g8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(g8,"href","#transformers.AutoModelForCTC"),c(Nd,"class","relative group"),c(bH,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vH,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FH,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TH,"href","/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(MH,"href","/docs/transformers/pr_18022/en/model_doc/hubert#transformers.HubertForCTC"),c(EH,"href","/docs/transformers/pr_18022/en/model_doc/mctct#transformers.MCTCTForCTC"),c(CH,"href","/docs/transformers/pr_18022/en/model_doc/sew#transformers.SEWForCTC"),c(wH,"href","/docs/transformers/pr_18022/en/model_doc/sew-d#transformers.SEWDForCTC"),c(AH,"href","/docs/transformers/pr_18022/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(LH,"href","/docs/transformers/pr_18022/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(yH,"href","/docs/transformers/pr_18022/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(xH,"href","/docs/transformers/pr_18022/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c($H,"href","/docs/transformers/pr_18022/en/model_doc/wavlm#transformers.WavLMForCTC"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L8,"id","transformers.AutoModelForSpeechSeq2Seq"),c(L8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L8,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(jd,"class","relative group"),c(kH,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SH,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RH,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PH,"href","/docs/transformers/pr_18022/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(BH,"href","/docs/transformers/pr_18022/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(R8,"id","transformers.AutoModelForAudioXVector"),c(R8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(R8,"href","#transformers.AutoModelForAudioXVector"),c(Od,"class","relative group"),c(NH,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IH,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qH,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jH,"href","/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(DH,"href","/docs/transformers/pr_18022/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(GH,"href","/docs/transformers/pr_18022/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(OH,"href","/docs/transformers/pr_18022/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(VH,"href","/docs/transformers/pr_18022/en/model_doc/wavlm#transformers.WavLMForXVector"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(O8,"id","transformers.AutoModelForMaskedImageModeling"),c(O8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O8,"href","#transformers.AutoModelForMaskedImageModeling"),c(zd,"class","relative group"),c(XH,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zH,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QH,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WH,"href","/docs/transformers/pr_18022/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(HH,"href","/docs/transformers/pr_18022/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(UH,"href","/docs/transformers/pr_18022/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U8,"id","transformers.AutoModelForObjectDetection"),c(U8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U8,"href","#transformers.AutoModelForObjectDetection"),c(Ud,"class","relative group"),c(JH,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YH,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KH,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZH,"href","/docs/transformers/pr_18022/en/model_doc/detr#transformers.DetrForObjectDetection"),c(eU,"href","/docs/transformers/pr_18022/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oM,"id","transformers.AutoModelForImageSegmentation"),c(oM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oM,"href","#transformers.AutoModelForImageSegmentation"),c(Kd,"class","relative group"),c(oU,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rU,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tU,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aU,"href","/docs/transformers/pr_18022/en/model_doc/detr#transformers.DetrForSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sM,"id","transformers.AutoModelForSemanticSegmentation"),c(sM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sM,"href","#transformers.AutoModelForSemanticSegmentation"),c(oc,"class","relative group"),c(nU,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sU,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lU,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iU,"href","/docs/transformers/pr_18022/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(dU,"href","/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(cU,"href","/docs/transformers/pr_18022/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(fU,"href","/docs/transformers/pr_18022/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation"),c(mU,"href","/docs/transformers/pr_18022/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pM,"id","transformers.AutoModelForInstanceSegmentation"),c(pM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pM,"href","#transformers.AutoModelForInstanceSegmentation"),c(ac,"class","relative group"),c(gU,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hU,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pU,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_U,"href","/docs/transformers/pr_18022/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(To,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FM,"id","transformers.TFAutoModel"),c(FM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(FM,"href","#transformers.TFAutoModel"),c(lc,"class","relative group"),c(uU,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bU,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vU,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FU,"href","/docs/transformers/pr_18022/en/model_doc/albert#transformers.TFAlbertModel"),c(TU,"href","/docs/transformers/pr_18022/en/model_doc/bart#transformers.TFBartModel"),c(MU,"href","/docs/transformers/pr_18022/en/model_doc/bert#transformers.TFBertModel"),c(EU,"href","/docs/transformers/pr_18022/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(CU,"href","/docs/transformers/pr_18022/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(wU,"href","/docs/transformers/pr_18022/en/model_doc/camembert#transformers.TFCamembertModel"),c(AU,"href","/docs/transformers/pr_18022/en/model_doc/clip#transformers.TFCLIPModel"),c(LU,"href","/docs/transformers/pr_18022/en/model_doc/convbert#transformers.TFConvBertModel"),c(yU,"href","/docs/transformers/pr_18022/en/model_doc/convnext#transformers.TFConvNextModel"),c(xU,"href","/docs/transformers/pr_18022/en/model_doc/ctrl#transformers.TFCTRLModel"),c($U,"href","/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(kU,"href","/docs/transformers/pr_18022/en/model_doc/deberta#transformers.TFDebertaModel"),c(SU,"href","/docs/transformers/pr_18022/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(RU,"href","/docs/transformers/pr_18022/en/model_doc/deit#transformers.TFDeiTModel"),c(PU,"href","/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(BU,"href","/docs/transformers/pr_18022/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(NU,"href","/docs/transformers/pr_18022/en/model_doc/electra#transformers.TFElectraModel"),c(IU,"href","/docs/transformers/pr_18022/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(qU,"href","/docs/transformers/pr_18022/en/model_doc/funnel#transformers.TFFunnelModel"),c(jU,"href","/docs/transformers/pr_18022/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(DU,"href","/docs/transformers/pr_18022/en/model_doc/gpt2#transformers.TFGPT2Model"),c(GU,"href","/docs/transformers/pr_18022/en/model_doc/gptj#transformers.TFGPTJModel"),c(OU,"href","/docs/transformers/pr_18022/en/model_doc/hubert#transformers.TFHubertModel"),c(VU,"href","/docs/transformers/pr_18022/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(XU,"href","/docs/transformers/pr_18022/en/model_doc/led#transformers.TFLEDModel"),c(zU,"href","/docs/transformers/pr_18022/en/model_doc/longformer#transformers.TFLongformerModel"),c(QU,"href","/docs/transformers/pr_18022/en/model_doc/lxmert#transformers.TFLxmertModel"),c(WU,"href","/docs/transformers/pr_18022/en/model_doc/marian#transformers.TFMarianModel"),c(HU,"href","/docs/transformers/pr_18022/en/model_doc/mbart#transformers.TFMBartModel"),c(UU,"href","/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(JU,"href","/docs/transformers/pr_18022/en/model_doc/mpnet#transformers.TFMPNetModel"),c(YU,"href","/docs/transformers/pr_18022/en/model_doc/mt5#transformers.TFMT5Model"),c(KU,"href","/docs/transformers/pr_18022/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(ZU,"href","/docs/transformers/pr_18022/en/model_doc/opt#transformers.TFOPTModel"),c(eJ,"href","/docs/transformers/pr_18022/en/model_doc/pegasus#transformers.TFPegasusModel"),c(oJ,"href","/docs/transformers/pr_18022/en/model_doc/regnet#transformers.TFRegNetModel"),c(rJ,"href","/docs/transformers/pr_18022/en/model_doc/rembert#transformers.TFRemBertModel"),c(tJ,"href","/docs/transformers/pr_18022/en/model_doc/resnet#transformers.TFResNetModel"),c(aJ,"href","/docs/transformers/pr_18022/en/model_doc/roberta#transformers.TFRobertaModel"),c(nJ,"href","/docs/transformers/pr_18022/en/model_doc/roformer#transformers.TFRoFormerModel"),c(sJ,"href","/docs/transformers/pr_18022/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(lJ,"href","/docs/transformers/pr_18022/en/model_doc/swin#transformers.TFSwinModel"),c(iJ,"href","/docs/transformers/pr_18022/en/model_doc/t5#transformers.TFT5Model"),c(dJ,"href","/docs/transformers/pr_18022/en/model_doc/tapas#transformers.TFTapasModel"),c(cJ,"href","/docs/transformers/pr_18022/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(fJ,"href","/docs/transformers/pr_18022/en/model_doc/vit#transformers.TFViTModel"),c(mJ,"href","/docs/transformers/pr_18022/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(gJ,"href","/docs/transformers/pr_18022/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(hJ,"href","/docs/transformers/pr_18022/en/model_doc/xlm#transformers.TFXLMModel"),c(pJ,"href","/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(_J,"href","/docs/transformers/pr_18022/en/model_doc/xlnet#transformers.TFXLNetModel"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(b4,"id","transformers.TFAutoModelForPreTraining"),c(b4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b4,"href","#transformers.TFAutoModelForPreTraining"),c(cc,"class","relative group"),c(uJ,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bJ,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vJ,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FJ,"href","/docs/transformers/pr_18022/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(TJ,"href","/docs/transformers/pr_18022/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(MJ,"href","/docs/transformers/pr_18022/en/model_doc/bert#transformers.TFBertForPreTraining"),c(EJ,"href","/docs/transformers/pr_18022/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(CJ,"href","/docs/transformers/pr_18022/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(wJ,"href","/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(AJ,"href","/docs/transformers/pr_18022/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(LJ,"href","/docs/transformers/pr_18022/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(yJ,"href","/docs/transformers/pr_18022/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(xJ,"href","/docs/transformers/pr_18022/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c($J,"href","/docs/transformers/pr_18022/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(kJ,"href","/docs/transformers/pr_18022/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(SJ,"href","/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(RJ,"href","/docs/transformers/pr_18022/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(PJ,"href","/docs/transformers/pr_18022/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(BJ,"href","/docs/transformers/pr_18022/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(NJ,"href","/docs/transformers/pr_18022/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(IJ,"href","/docs/transformers/pr_18022/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(qJ,"href","/docs/transformers/pr_18022/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(jJ,"href","/docs/transformers/pr_18022/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(DJ,"href","/docs/transformers/pr_18022/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(GJ,"href","/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(OJ,"href","/docs/transformers/pr_18022/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(X4,"id","transformers.TFAutoModelForCausalLM"),c(X4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X4,"href","#transformers.TFAutoModelForCausalLM"),c(gc,"class","relative group"),c(VJ,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XJ,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zJ,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QJ,"href","/docs/transformers/pr_18022/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(WJ,"href","/docs/transformers/pr_18022/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(HJ,"href","/docs/transformers/pr_18022/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(UJ,"href","/docs/transformers/pr_18022/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(JJ,"href","/docs/transformers/pr_18022/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(YJ,"href","/docs/transformers/pr_18022/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(KJ,"href","/docs/transformers/pr_18022/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(ZJ,"href","/docs/transformers/pr_18022/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(eY,"href","/docs/transformers/pr_18022/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(oY,"href","/docs/transformers/pr_18022/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(rY,"href","/docs/transformers/pr_18022/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(tY,"href","/docs/transformers/pr_18022/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(aY,"href","/docs/transformers/pr_18022/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sE,"id","transformers.TFAutoModelForImageClassification"),c(sE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sE,"href","#transformers.TFAutoModelForImageClassification"),c(_c,"class","relative group"),c(nY,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sY,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lY,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iY,"href","/docs/transformers/pr_18022/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(dY,"href","/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(cY,"href","/docs/transformers/pr_18022/en/model_doc/deit#transformers.TFDeiTForImageClassification"),c(fY,"href","/docs/transformers/pr_18022/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher"),c(mY,"href","/docs/transformers/pr_18022/en/model_doc/regnet#transformers.TFRegNetForImageClassification"),c(gY,"href","/docs/transformers/pr_18022/en/model_doc/resnet#transformers.TFResNetForImageClassification"),c(hY,"href","/docs/transformers/pr_18022/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(pY,"href","/docs/transformers/pr_18022/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pE,"id","transformers.TFAutoModelForMaskedLM"),c(pE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pE,"href","#transformers.TFAutoModelForMaskedLM"),c(vc,"class","relative group"),c(_Y,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uY,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bY,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vY,"href","/docs/transformers/pr_18022/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(FY,"href","/docs/transformers/pr_18022/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(TY,"href","/docs/transformers/pr_18022/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(MY,"href","/docs/transformers/pr_18022/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(EY,"href","/docs/transformers/pr_18022/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(CY,"href","/docs/transformers/pr_18022/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(wY,"href","/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(AY,"href","/docs/transformers/pr_18022/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(LY,"href","/docs/transformers/pr_18022/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(yY,"href","/docs/transformers/pr_18022/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(xY,"href","/docs/transformers/pr_18022/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c($Y,"href","/docs/transformers/pr_18022/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(kY,"href","/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(SY,"href","/docs/transformers/pr_18022/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(RY,"href","/docs/transformers/pr_18022/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(PY,"href","/docs/transformers/pr_18022/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(BY,"href","/docs/transformers/pr_18022/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(NY,"href","/docs/transformers/pr_18022/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(IY,"href","/docs/transformers/pr_18022/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(qY,"href","/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qE,"id","transformers.TFAutoModelForSeq2SeqLM"),c(qE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qE,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Mc,"class","relative group"),c(jY,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DY,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GY,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OY,"href","/docs/transformers/pr_18022/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(VY,"href","/docs/transformers/pr_18022/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(XY,"href","/docs/transformers/pr_18022/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(zY,"href","/docs/transformers/pr_18022/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(QY,"href","/docs/transformers/pr_18022/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(WY,"href","/docs/transformers/pr_18022/en/model_doc/marian#transformers.TFMarianMTModel"),c(HY,"href","/docs/transformers/pr_18022/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(UY,"href","/docs/transformers/pr_18022/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(JY,"href","/docs/transformers/pr_18022/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(YY,"href","/docs/transformers/pr_18022/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YE,"id","transformers.TFAutoModelForSequenceClassification"),c(YE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(YE,"href","#transformers.TFAutoModelForSequenceClassification"),c(wc,"class","relative group"),c(KY,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZY,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eK,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oK,"href","/docs/transformers/pr_18022/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(rK,"href","/docs/transformers/pr_18022/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(tK,"href","/docs/transformers/pr_18022/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(aK,"href","/docs/transformers/pr_18022/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(nK,"href","/docs/transformers/pr_18022/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(sK,"href","/docs/transformers/pr_18022/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(lK,"href","/docs/transformers/pr_18022/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(iK,"href","/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(dK,"href","/docs/transformers/pr_18022/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(cK,"href","/docs/transformers/pr_18022/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(fK,"href","/docs/transformers/pr_18022/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(mK,"href","/docs/transformers/pr_18022/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(gK,"href","/docs/transformers/pr_18022/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(hK,"href","/docs/transformers/pr_18022/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(pK,"href","/docs/transformers/pr_18022/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(_K,"href","/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(uK,"href","/docs/transformers/pr_18022/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(bK,"href","/docs/transformers/pr_18022/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(vK,"href","/docs/transformers/pr_18022/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(FK,"href","/docs/transformers/pr_18022/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(TK,"href","/docs/transformers/pr_18022/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(MK,"href","/docs/transformers/pr_18022/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(EK,"href","/docs/transformers/pr_18022/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(CK,"href","/docs/transformers/pr_18022/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(wK,"href","/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(AK,"href","/docs/transformers/pr_18022/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AC,"id","transformers.TFAutoModelForMultipleChoice"),c(AC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(AC,"href","#transformers.TFAutoModelForMultipleChoice"),c(yc,"class","relative group"),c(LK,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yK,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xK,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($K,"href","/docs/transformers/pr_18022/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(kK,"href","/docs/transformers/pr_18022/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(SK,"href","/docs/transformers/pr_18022/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(RK,"href","/docs/transformers/pr_18022/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(PK,"href","/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(BK,"href","/docs/transformers/pr_18022/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(NK,"href","/docs/transformers/pr_18022/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(IK,"href","/docs/transformers/pr_18022/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(qK,"href","/docs/transformers/pr_18022/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(jK,"href","/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(DK,"href","/docs/transformers/pr_18022/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(GK,"href","/docs/transformers/pr_18022/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(OK,"href","/docs/transformers/pr_18022/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(VK,"href","/docs/transformers/pr_18022/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(XK,"href","/docs/transformers/pr_18022/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(zK,"href","/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(QK,"href","/docs/transformers/pr_18022/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QC,"id","transformers.TFAutoModelForNextSentencePrediction"),c(QC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(QC,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(kc,"class","relative group"),c(WK,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HK,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UK,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JK,"href","/docs/transformers/pr_18022/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(YK,"href","/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YC,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(YC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(YC,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(Pc,"class","relative group"),c(KK,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZK,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eZ,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oZ,"href","/docs/transformers/pr_18022/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o3,"id","transformers.TFAutoModelForTokenClassification"),c(o3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o3,"href","#transformers.TFAutoModelForTokenClassification"),c(Ic,"class","relative group"),c(rZ,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tZ,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aZ,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nZ,"href","/docs/transformers/pr_18022/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(sZ,"href","/docs/transformers/pr_18022/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(lZ,"href","/docs/transformers/pr_18022/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(iZ,"href","/docs/transformers/pr_18022/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(dZ,"href","/docs/transformers/pr_18022/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(cZ,"href","/docs/transformers/pr_18022/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(fZ,"href","/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(mZ,"href","/docs/transformers/pr_18022/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(gZ,"href","/docs/transformers/pr_18022/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(hZ,"href","/docs/transformers/pr_18022/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(pZ,"href","/docs/transformers/pr_18022/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(_Z,"href","/docs/transformers/pr_18022/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(uZ,"href","/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(bZ,"href","/docs/transformers/pr_18022/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(vZ,"href","/docs/transformers/pr_18022/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(FZ,"href","/docs/transformers/pr_18022/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(TZ,"href","/docs/transformers/pr_18022/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(MZ,"href","/docs/transformers/pr_18022/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(EZ,"href","/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(CZ,"href","/docs/transformers/pr_18022/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(C3,"id","transformers.TFAutoModelForQuestionAnswering"),c(C3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C3,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Dc,"class","relative group"),c(wZ,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AZ,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LZ,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yZ,"href","/docs/transformers/pr_18022/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(xZ,"href","/docs/transformers/pr_18022/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c($Z,"href","/docs/transformers/pr_18022/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(kZ,"href","/docs/transformers/pr_18022/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(SZ,"href","/docs/transformers/pr_18022/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(RZ,"href","/docs/transformers/pr_18022/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(PZ,"href","/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(BZ,"href","/docs/transformers/pr_18022/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(NZ,"href","/docs/transformers/pr_18022/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(IZ,"href","/docs/transformers/pr_18022/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(qZ,"href","/docs/transformers/pr_18022/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(jZ,"href","/docs/transformers/pr_18022/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(DZ,"href","/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(GZ,"href","/docs/transformers/pr_18022/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(OZ,"href","/docs/transformers/pr_18022/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(VZ,"href","/docs/transformers/pr_18022/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(XZ,"href","/docs/transformers/pr_18022/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(zZ,"href","/docs/transformers/pr_18022/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(QZ,"href","/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(WZ,"href","/docs/transformers/pr_18022/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W3,"id","transformers.TFAutoModelForVision2Seq"),c(W3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W3,"href","#transformers.TFAutoModelForVision2Seq"),c(Vc,"class","relative group"),c(HZ,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UZ,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JZ,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YZ,"href","/docs/transformers/pr_18022/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y3,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(Y3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y3,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Qc,"class","relative group"),c(KZ,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZZ,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eee,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oee,"href","/docs/transformers/pr_18022/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o5,"id","transformers.FlaxAutoModel"),c(o5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o5,"href","#transformers.FlaxAutoModel"),c(Uc,"class","relative group"),c(ree,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tee,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aee,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nee,"href","/docs/transformers/pr_18022/en/model_doc/albert#transformers.FlaxAlbertModel"),c(see,"href","/docs/transformers/pr_18022/en/model_doc/bart#transformers.FlaxBartModel"),c(lee,"href","/docs/transformers/pr_18022/en/model_doc/beit#transformers.FlaxBeitModel"),c(iee,"href","/docs/transformers/pr_18022/en/model_doc/bert#transformers.FlaxBertModel"),c(dee,"href","/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(cee,"href","/docs/transformers/pr_18022/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(fee,"href","/docs/transformers/pr_18022/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(mee,"href","/docs/transformers/pr_18022/en/model_doc/bloom#transformers.FlaxBloomModel"),c(gee,"href","/docs/transformers/pr_18022/en/model_doc/clip#transformers.FlaxCLIPModel"),c(hee,"href","/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(pee,"href","/docs/transformers/pr_18022/en/model_doc/electra#transformers.FlaxElectraModel"),c(_ee,"href","/docs/transformers/pr_18022/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(uee,"href","/docs/transformers/pr_18022/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(bee,"href","/docs/transformers/pr_18022/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(vee,"href","/docs/transformers/pr_18022/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(Fee,"href","/docs/transformers/pr_18022/en/model_doc/marian#transformers.FlaxMarianModel"),c(Tee,"href","/docs/transformers/pr_18022/en/model_doc/mbart#transformers.FlaxMBartModel"),c(Mee,"href","/docs/transformers/pr_18022/en/model_doc/mt5#transformers.FlaxMT5Model"),c(Eee,"href","/docs/transformers/pr_18022/en/model_doc/opt#transformers.FlaxOPTModel"),c(Cee,"href","/docs/transformers/pr_18022/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(wee,"href","/docs/transformers/pr_18022/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(Aee,"href","/docs/transformers/pr_18022/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(Lee,"href","/docs/transformers/pr_18022/en/model_doc/t5#transformers.FlaxT5Model"),c(yee,"href","/docs/transformers/pr_18022/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(xee,"href","/docs/transformers/pr_18022/en/model_doc/vit#transformers.FlaxViTModel"),c($ee,"href","/docs/transformers/pr_18022/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(kee,"href","/docs/transformers/pr_18022/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(See,"href","/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S5,"id","transformers.FlaxAutoModelForCausalLM"),c(S5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S5,"href","#transformers.FlaxAutoModelForCausalLM"),c(Kc,"class","relative group"),c(Ree,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pee,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Bee,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Nee,"href","/docs/transformers/pr_18022/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(Iee,"href","/docs/transformers/pr_18022/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(qee,"href","/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(jee,"href","/docs/transformers/pr_18022/en/model_doc/bloom#transformers.FlaxBloomForCausalLM"),c(Dee,"href","/docs/transformers/pr_18022/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(Gee,"href","/docs/transformers/pr_18022/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(Oee,"href","/docs/transformers/pr_18022/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(Vee,"href","/docs/transformers/pr_18022/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(Xee,"href","/docs/transformers/pr_18022/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(zee,"href","/docs/transformers/pr_18022/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(Qee,"href","/docs/transformers/pr_18022/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Q5,"id","transformers.FlaxAutoModelForPreTraining"),c(Q5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q5,"href","#transformers.FlaxAutoModelForPreTraining"),c(of,"class","relative group"),c(Wee,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Hee,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Uee,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jee,"href","/docs/transformers/pr_18022/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(Yee,"href","/docs/transformers/pr_18022/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(Kee,"href","/docs/transformers/pr_18022/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(Zee,"href","/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(eoe,"href","/docs/transformers/pr_18022/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(ooe,"href","/docs/transformers/pr_18022/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(roe,"href","/docs/transformers/pr_18022/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(toe,"href","/docs/transformers/pr_18022/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(aoe,"href","/docs/transformers/pr_18022/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(noe,"href","/docs/transformers/pr_18022/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(soe,"href","/docs/transformers/pr_18022/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(loe,"href","/docs/transformers/pr_18022/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(ioe,"href","/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iw,"id","transformers.FlaxAutoModelForMaskedLM"),c(iw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iw,"href","#transformers.FlaxAutoModelForMaskedLM"),c(af,"class","relative group"),c(doe,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(coe,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(foe,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(moe,"href","/docs/transformers/pr_18022/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(goe,"href","/docs/transformers/pr_18022/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(hoe,"href","/docs/transformers/pr_18022/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(poe,"href","/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(_oe,"href","/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(uoe,"href","/docs/transformers/pr_18022/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(boe,"href","/docs/transformers/pr_18022/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(voe,"href","/docs/transformers/pr_18022/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(Foe,"href","/docs/transformers/pr_18022/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(Toe,"href","/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tw,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(Tw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tw,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(lf,"class","relative group"),c(Moe,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Eoe,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Coe,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(woe,"href","/docs/transformers/pr_18022/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(Aoe,"href","/docs/transformers/pr_18022/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(Loe,"href","/docs/transformers/pr_18022/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(yoe,"href","/docs/transformers/pr_18022/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(xoe,"href","/docs/transformers/pr_18022/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c($oe,"href","/docs/transformers/pr_18022/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(koe,"href","/docs/transformers/pr_18022/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(Soe,"href","/docs/transformers/pr_18022/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(Roe,"href","/docs/transformers/pr_18022/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(Poe,"href","/docs/transformers/pr_18022/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pw,"id","transformers.FlaxAutoModelForSequenceClassification"),c(Pw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Pw,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(ff,"class","relative group"),c(Boe,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Noe,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Ioe,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qoe,"href","/docs/transformers/pr_18022/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(joe,"href","/docs/transformers/pr_18022/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(Doe,"href","/docs/transformers/pr_18022/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(Goe,"href","/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(Ooe,"href","/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(Voe,"href","/docs/transformers/pr_18022/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(Xoe,"href","/docs/transformers/pr_18022/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(zoe,"href","/docs/transformers/pr_18022/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(Qoe,"href","/docs/transformers/pr_18022/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(Woe,"href","/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ww,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(Ww,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ww,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(hf,"class","relative group"),c(Hoe,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Uoe,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Joe,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yoe,"href","/docs/transformers/pr_18022/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(Koe,"href","/docs/transformers/pr_18022/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(Zoe,"href","/docs/transformers/pr_18022/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(ere,"href","/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(ore,"href","/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(rre,"href","/docs/transformers/pr_18022/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(tre,"href","/docs/transformers/pr_18022/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(are,"href","/docs/transformers/pr_18022/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(nre,"href","/docs/transformers/pr_18022/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(sre,"href","/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sA,"id","transformers.FlaxAutoModelForTokenClassification"),c(sA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sA,"href","#transformers.FlaxAutoModelForTokenClassification"),c(uf,"class","relative group"),c(lre,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ire,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dre,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cre,"href","/docs/transformers/pr_18022/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(fre,"href","/docs/transformers/pr_18022/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(mre,"href","/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(gre,"href","/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(hre,"href","/docs/transformers/pr_18022/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(pre,"href","/docs/transformers/pr_18022/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(_re,"href","/docs/transformers/pr_18022/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(ure,"href","/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uA,"id","transformers.FlaxAutoModelForMultipleChoice"),c(uA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uA,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Ff,"class","relative group"),c(bre,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vre,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Fre,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tre,"href","/docs/transformers/pr_18022/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(Mre,"href","/docs/transformers/pr_18022/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(Ere,"href","/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(Cre,"href","/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(wre,"href","/docs/transformers/pr_18022/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(Are,"href","/docs/transformers/pr_18022/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(Lre,"href","/docs/transformers/pr_18022/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(yre,"href","/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yA,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(yA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yA,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Ef,"class","relative group"),c(xre,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($re,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kre,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Sre,"href","/docs/transformers/pr_18022/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SA,"id","transformers.FlaxAutoModelForImageClassification"),c(SA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(SA,"href","#transformers.FlaxAutoModelForImageClassification"),c(Af,"class","relative group"),c(Rre,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pre,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Bre,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ta,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Nre,"href","/docs/transformers/pr_18022/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(Ire,"href","/docs/transformers/pr_18022/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IA,"id","transformers.FlaxAutoModelForVision2Seq"),c(IA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(IA,"href","#transformers.FlaxAutoModelForVision2Seq"),c(xf,"class","relative group"),c(qre,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jre,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Dre,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gre,"href","/docs/transformers/pr_18022/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Co),e(Co,yi),b(f,Bf,u),b(f,lt,u),e(lt,xi),e(lt,$i),e($i,nL),e(lt,Nf),b(f,Oe,u),b(f,We,u),e(We,ki),e(We,Pn),e(Pn,sL),e(We,Bn),e(We,Nn),e(Nn,lL),e(We,Si),e(We,In),e(In,iL),e(We,Ri),b(f,If,u),M(Sa,f,u),b(f,He,u),b(f,Le,u),e(Le,GS),e(Le,Pi),e(Pi,OS),e(Le,VS),b(f,wo,u),b(f,Ra,u),e(Ra,XS),e(Ra,qf),e(qf,zS),e(Ra,RHe),b(f,bXe,u),b(f,Bi,u),e(Bi,jf),e(jf,Nae),M(dL,Nae,null),e(Bi,PHe),e(Bi,Iae),e(Iae,BHe),b(f,vXe,u),b(f,qn,u),e(qn,NHe),e(qn,qae),e(qae,IHe),e(qn,qHe),e(qn,jae),e(jae,jHe),e(qn,DHe),b(f,FXe,u),M(cL,f,u),b(f,TXe,u),b(f,QS,u),e(QS,GHe),b(f,MXe,u),M(Df,f,u),b(f,EXe,u),b(f,Ni,u),e(Ni,Gf),e(Gf,Dae),M(fL,Dae,null),e(Ni,OHe),e(Ni,Gae),e(Gae,VHe),b(f,CXe,u),b(f,Ao,u),M(mL,Ao,null),e(Ao,XHe),e(Ao,gL),e(gL,zHe),e(gL,WS),e(WS,QHe),e(gL,WHe),e(Ao,HHe),e(Ao,hL),e(hL,UHe),e(hL,Oae),e(Oae,JHe),e(hL,YHe),e(Ao,KHe),e(Ao,Lr),M(pL,Lr,null),e(Lr,ZHe),e(Lr,Vae),e(Vae,eUe),e(Lr,oUe),e(Lr,Ii),e(Ii,rUe),e(Ii,Xae),e(Xae,tUe),e(Ii,aUe),e(Ii,zae),e(zae,nUe),e(Ii,sUe),e(Lr,lUe),e(Lr,A),e(A,Of),e(Of,Qae),e(Qae,iUe),e(Of,dUe),e(Of,HS),e(HS,cUe),e(Of,fUe),e(A,mUe),e(A,Vf),e(Vf,Wae),e(Wae,gUe),e(Vf,hUe),e(Vf,US),e(US,pUe),e(Vf,_Ue),e(A,uUe),e(A,Xf),e(Xf,Hae),e(Hae,bUe),e(Xf,vUe),e(Xf,JS),e(JS,FUe),e(Xf,TUe),e(A,MUe),e(A,zf),e(zf,Uae),e(Uae,EUe),e(zf,CUe),e(zf,YS),e(YS,wUe),e(zf,AUe),e(A,LUe),e(A,Qf),e(Qf,Jae),e(Jae,yUe),e(Qf,xUe),e(Qf,KS),e(KS,$Ue),e(Qf,kUe),e(A,SUe),e(A,Wf),e(Wf,Yae),e(Yae,RUe),e(Wf,PUe),e(Wf,ZS),e(ZS,BUe),e(Wf,NUe),e(A,IUe),e(A,Hf),e(Hf,Kae),e(Kae,qUe),e(Hf,jUe),e(Hf,eR),e(eR,DUe),e(Hf,GUe),e(A,OUe),e(A,Uf),e(Uf,Zae),e(Zae,VUe),e(Uf,XUe),e(Uf,oR),e(oR,zUe),e(Uf,QUe),e(A,WUe),e(A,Jf),e(Jf,ene),e(ene,HUe),e(Jf,UUe),e(Jf,rR),e(rR,JUe),e(Jf,YUe),e(A,KUe),e(A,Yf),e(Yf,one),e(one,ZUe),e(Yf,eJe),e(Yf,tR),e(tR,oJe),e(Yf,rJe),e(A,tJe),e(A,Kf),e(Kf,rne),e(rne,aJe),e(Kf,nJe),e(Kf,aR),e(aR,sJe),e(Kf,lJe),e(A,iJe),e(A,Zf),e(Zf,tne),e(tne,dJe),e(Zf,cJe),e(Zf,nR),e(nR,fJe),e(Zf,mJe),e(A,gJe),e(A,em),e(em,ane),e(ane,hJe),e(em,pJe),e(em,sR),e(sR,_Je),e(em,uJe),e(A,bJe),e(A,om),e(om,nne),e(nne,vJe),e(om,FJe),e(om,lR),e(lR,TJe),e(om,MJe),e(A,EJe),e(A,rm),e(rm,sne),e(sne,CJe),e(rm,wJe),e(rm,iR),e(iR,AJe),e(rm,LJe),e(A,yJe),e(A,tm),e(tm,lne),e(lne,xJe),e(tm,$Je),e(tm,dR),e(dR,kJe),e(tm,SJe),e(A,RJe),e(A,am),e(am,ine),e(ine,PJe),e(am,BJe),e(am,cR),e(cR,NJe),e(am,IJe),e(A,qJe),e(A,nm),e(nm,dne),e(dne,jJe),e(nm,DJe),e(nm,fR),e(fR,GJe),e(nm,OJe),e(A,VJe),e(A,sm),e(sm,cne),e(cne,XJe),e(sm,zJe),e(sm,mR),e(mR,QJe),e(sm,WJe),e(A,HJe),e(A,lm),e(lm,fne),e(fne,UJe),e(lm,JJe),e(lm,gR),e(gR,YJe),e(lm,KJe),e(A,ZJe),e(A,im),e(im,mne),e(mne,eYe),e(im,oYe),e(im,hR),e(hR,rYe),e(im,tYe),e(A,aYe),e(A,dm),e(dm,gne),e(gne,nYe),e(dm,sYe),e(dm,pR),e(pR,lYe),e(dm,iYe),e(A,dYe),e(A,cm),e(cm,hne),e(hne,cYe),e(cm,fYe),e(cm,_R),e(_R,mYe),e(cm,gYe),e(A,hYe),e(A,fm),e(fm,pne),e(pne,pYe),e(fm,_Ye),e(fm,uR),e(uR,uYe),e(fm,bYe),e(A,vYe),e(A,mm),e(mm,_ne),e(_ne,FYe),e(mm,TYe),e(mm,bR),e(bR,MYe),e(mm,EYe),e(A,CYe),e(A,gm),e(gm,une),e(une,wYe),e(gm,AYe),e(gm,vR),e(vR,LYe),e(gm,yYe),e(A,xYe),e(A,hm),e(hm,bne),e(bne,$Ye),e(hm,kYe),e(hm,FR),e(FR,SYe),e(hm,RYe),e(A,PYe),e(A,pm),e(pm,vne),e(vne,BYe),e(pm,NYe),e(pm,TR),e(TR,IYe),e(pm,qYe),e(A,jYe),e(A,_m),e(_m,Fne),e(Fne,DYe),e(_m,GYe),e(_m,MR),e(MR,OYe),e(_m,VYe),e(A,XYe),e(A,um),e(um,Tne),e(Tne,zYe),e(um,QYe),e(um,ER),e(ER,WYe),e(um,HYe),e(A,UYe),e(A,bm),e(bm,Mne),e(Mne,JYe),e(bm,YYe),e(bm,CR),e(CR,KYe),e(bm,ZYe),e(A,eKe),e(A,vm),e(vm,Ene),e(Ene,oKe),e(vm,rKe),e(vm,wR),e(wR,tKe),e(vm,aKe),e(A,nKe),e(A,Fm),e(Fm,Cne),e(Cne,sKe),e(Fm,lKe),e(Fm,AR),e(AR,iKe),e(Fm,dKe),e(A,cKe),e(A,Tm),e(Tm,wne),e(wne,fKe),e(Tm,mKe),e(Tm,LR),e(LR,gKe),e(Tm,hKe),e(A,pKe),e(A,Mm),e(Mm,Ane),e(Ane,_Ke),e(Mm,uKe),e(Mm,yR),e(yR,bKe),e(Mm,vKe),e(A,FKe),e(A,Em),e(Em,Lne),e(Lne,TKe),e(Em,MKe),e(Em,xR),e(xR,EKe),e(Em,CKe),e(A,wKe),e(A,Cm),e(Cm,yne),e(yne,AKe),e(Cm,LKe),e(Cm,$R),e($R,yKe),e(Cm,xKe),e(A,$Ke),e(A,wm),e(wm,xne),e(xne,kKe),e(wm,SKe),e(wm,kR),e(kR,RKe),e(wm,PKe),e(A,BKe),e(A,Am),e(Am,$ne),e($ne,NKe),e(Am,IKe),e(Am,SR),e(SR,qKe),e(Am,jKe),e(A,DKe),e(A,Lm),e(Lm,kne),e(kne,GKe),e(Lm,OKe),e(Lm,RR),e(RR,VKe),e(Lm,XKe),e(A,zKe),e(A,ym),e(ym,Sne),e(Sne,QKe),e(ym,WKe),e(ym,PR),e(PR,HKe),e(ym,UKe),e(A,JKe),e(A,xm),e(xm,Rne),e(Rne,YKe),e(xm,KKe),e(xm,BR),e(BR,ZKe),e(xm,eZe),e(A,oZe),e(A,$m),e($m,Pne),e(Pne,rZe),e($m,tZe),e($m,NR),e(NR,aZe),e($m,nZe),e(A,sZe),e(A,km),e(km,Bne),e(Bne,lZe),e(km,iZe),e(km,IR),e(IR,dZe),e(km,cZe),e(A,fZe),e(A,Sm),e(Sm,Nne),e(Nne,mZe),e(Sm,gZe),e(Sm,qR),e(qR,hZe),e(Sm,pZe),e(A,_Ze),e(A,Rm),e(Rm,Ine),e(Ine,uZe),e(Rm,bZe),e(Rm,jR),e(jR,vZe),e(Rm,FZe),e(A,TZe),e(A,Pm),e(Pm,qne),e(qne,MZe),e(Pm,EZe),e(Pm,DR),e(DR,CZe),e(Pm,wZe),e(A,AZe),e(A,Bm),e(Bm,jne),e(jne,LZe),e(Bm,yZe),e(Bm,GR),e(GR,xZe),e(Bm,$Ze),e(A,kZe),e(A,Nm),e(Nm,Dne),e(Dne,SZe),e(Nm,RZe),e(Nm,OR),e(OR,PZe),e(Nm,BZe),e(A,NZe),e(A,Im),e(Im,Gne),e(Gne,IZe),e(Im,qZe),e(Im,VR),e(VR,jZe),e(Im,DZe),e(A,GZe),e(A,qm),e(qm,One),e(One,OZe),e(qm,VZe),e(qm,XR),e(XR,XZe),e(qm,zZe),e(A,QZe),e(A,jm),e(jm,Vne),e(Vne,WZe),e(jm,HZe),e(jm,zR),e(zR,UZe),e(jm,JZe),e(A,YZe),e(A,Dm),e(Dm,Xne),e(Xne,KZe),e(Dm,ZZe),e(Dm,QR),e(QR,eeo),e(Dm,oeo),e(A,reo),e(A,Gm),e(Gm,zne),e(zne,teo),e(Gm,aeo),e(Gm,WR),e(WR,neo),e(Gm,seo),e(A,leo),e(A,Om),e(Om,Qne),e(Qne,ieo),e(Om,deo),e(Om,HR),e(HR,ceo),e(Om,feo),e(A,meo),e(A,Vm),e(Vm,Wne),e(Wne,geo),e(Vm,heo),e(Vm,UR),e(UR,peo),e(Vm,_eo),e(A,ueo),e(A,Xm),e(Xm,Hne),e(Hne,beo),e(Xm,veo),e(Xm,JR),e(JR,Feo),e(Xm,Teo),e(A,Meo),e(A,zm),e(zm,Une),e(Une,Eeo),e(zm,Ceo),e(zm,YR),e(YR,weo),e(zm,Aeo),e(A,Leo),e(A,Qm),e(Qm,Jne),e(Jne,yeo),e(Qm,xeo),e(Qm,KR),e(KR,$eo),e(Qm,keo),e(A,Seo),e(A,Wm),e(Wm,Yne),e(Yne,Reo),e(Wm,Peo),e(Wm,ZR),e(ZR,Beo),e(Wm,Neo),e(A,Ieo),e(A,Hm),e(Hm,Kne),e(Kne,qeo),e(Hm,jeo),e(Hm,eP),e(eP,Deo),e(Hm,Geo),e(A,Oeo),e(A,Um),e(Um,Zne),e(Zne,Veo),e(Um,Xeo),e(Um,oP),e(oP,zeo),e(Um,Qeo),e(A,Weo),e(A,Jm),e(Jm,ese),e(ese,Heo),e(Jm,Ueo),e(Jm,rP),e(rP,Jeo),e(Jm,Yeo),e(A,Keo),e(A,Ym),e(Ym,ose),e(ose,Zeo),e(Ym,eoo),e(Ym,tP),e(tP,ooo),e(Ym,roo),e(A,too),e(A,Km),e(Km,rse),e(rse,aoo),e(Km,noo),e(Km,aP),e(aP,soo),e(Km,loo),e(A,ioo),e(A,Zm),e(Zm,tse),e(tse,doo),e(Zm,coo),e(Zm,nP),e(nP,foo),e(Zm,moo),e(A,goo),e(A,eg),e(eg,ase),e(ase,hoo),e(eg,poo),e(eg,sP),e(sP,_oo),e(eg,uoo),e(A,boo),e(A,og),e(og,nse),e(nse,voo),e(og,Foo),e(og,lP),e(lP,Too),e(og,Moo),e(A,Eoo),e(A,rg),e(rg,sse),e(sse,Coo),e(rg,woo),e(rg,iP),e(iP,Aoo),e(rg,Loo),e(A,yoo),e(A,tg),e(tg,lse),e(lse,xoo),e(tg,$oo),e(tg,dP),e(dP,koo),e(tg,Soo),e(A,Roo),e(A,ag),e(ag,ise),e(ise,Poo),e(ag,Boo),e(ag,cP),e(cP,Noo),e(ag,Ioo),e(A,qoo),e(A,ng),e(ng,dse),e(dse,joo),e(ng,Doo),e(ng,fP),e(fP,Goo),e(ng,Ooo),e(A,Voo),e(A,sg),e(sg,cse),e(cse,Xoo),e(sg,zoo),e(sg,mP),e(mP,Qoo),e(sg,Woo),e(A,Hoo),e(A,lg),e(lg,fse),e(fse,Uoo),e(lg,Joo),e(lg,gP),e(gP,Yoo),e(lg,Koo),e(A,Zoo),e(A,ig),e(ig,mse),e(mse,ero),e(ig,oro),e(ig,hP),e(hP,rro),e(ig,tro),e(A,aro),e(A,dg),e(dg,gse),e(gse,nro),e(dg,sro),e(dg,pP),e(pP,lro),e(dg,iro),e(A,dro),e(A,cg),e(cg,hse),e(hse,cro),e(cg,fro),e(cg,_P),e(_P,mro),e(cg,gro),e(A,hro),e(A,fg),e(fg,pse),e(pse,pro),e(fg,_ro),e(fg,uP),e(uP,uro),e(fg,bro),e(A,vro),e(A,mg),e(mg,_se),e(_se,Fro),e(mg,Tro),e(mg,bP),e(bP,Mro),e(mg,Ero),e(A,Cro),e(A,gg),e(gg,use),e(use,wro),e(gg,Aro),e(gg,vP),e(vP,Lro),e(gg,yro),e(A,xro),e(A,hg),e(hg,bse),e(bse,$ro),e(hg,kro),e(hg,FP),e(FP,Sro),e(hg,Rro),e(A,Pro),e(A,pg),e(pg,vse),e(vse,Bro),e(pg,Nro),e(pg,TP),e(TP,Iro),e(pg,qro),e(A,jro),e(A,_g),e(_g,Fse),e(Fse,Dro),e(_g,Gro),e(_g,MP),e(MP,Oro),e(_g,Vro),e(A,Xro),e(A,ug),e(ug,Tse),e(Tse,zro),e(ug,Qro),e(ug,EP),e(EP,Wro),e(ug,Hro),e(A,Uro),e(A,bg),e(bg,Mse),e(Mse,Jro),e(bg,Yro),e(bg,CP),e(CP,Kro),e(bg,Zro),e(A,eto),e(A,vg),e(vg,Ese),e(Ese,oto),e(vg,rto),e(vg,wP),e(wP,tto),e(vg,ato),e(A,nto),e(A,Fg),e(Fg,Cse),e(Cse,sto),e(Fg,lto),e(Fg,AP),e(AP,ito),e(Fg,dto),e(A,cto),e(A,Tg),e(Tg,wse),e(wse,fto),e(Tg,mto),e(Tg,LP),e(LP,gto),e(Tg,hto),e(A,pto),e(A,Mg),e(Mg,Ase),e(Ase,_to),e(Mg,uto),e(Mg,yP),e(yP,bto),e(Mg,vto),e(A,Fto),e(A,Eg),e(Eg,Lse),e(Lse,Tto),e(Eg,Mto),e(Eg,xP),e(xP,Eto),e(Eg,Cto),e(A,wto),e(A,Cg),e(Cg,yse),e(yse,Ato),e(Cg,Lto),e(Cg,$P),e($P,yto),e(Cg,xto),e(A,$to),e(A,wg),e(wg,xse),e(xse,kto),e(wg,Sto),e(wg,kP),e(kP,Rto),e(wg,Pto),e(A,Bto),e(A,Ag),e(Ag,$se),e($se,Nto),e(Ag,Ito),e(Ag,SP),e(SP,qto),e(Ag,jto),e(A,Dto),e(A,Lg),e(Lg,kse),e(kse,Gto),e(Lg,Oto),e(Lg,RP),e(RP,Vto),e(Lg,Xto),e(A,zto),e(A,yg),e(yg,Sse),e(Sse,Qto),e(yg,Wto),e(yg,PP),e(PP,Hto),e(yg,Uto),e(A,Jto),e(A,xg),e(xg,Rse),e(Rse,Yto),e(xg,Kto),e(xg,BP),e(BP,Zto),e(xg,eao),e(A,oao),e(A,$g),e($g,Pse),e(Pse,rao),e($g,tao),e($g,NP),e(NP,aao),e($g,nao),e(A,sao),e(A,kg),e(kg,Bse),e(Bse,lao),e(kg,iao),e(kg,IP),e(IP,dao),e(kg,cao),e(A,fao),e(A,Sg),e(Sg,Nse),e(Nse,mao),e(Sg,gao),e(Sg,qP),e(qP,hao),e(Sg,pao),e(A,_ao),e(A,Rg),e(Rg,Ise),e(Ise,uao),e(Rg,bao),e(Rg,jP),e(jP,vao),e(Rg,Fao),e(A,Tao),e(A,Pg),e(Pg,qse),e(qse,Mao),e(Pg,Eao),e(Pg,DP),e(DP,Cao),e(Pg,wao),e(A,Aao),e(A,Bg),e(Bg,jse),e(jse,Lao),e(Bg,yao),e(Bg,GP),e(GP,xao),e(Bg,$ao),e(A,kao),e(A,Ng),e(Ng,Dse),e(Dse,Sao),e(Ng,Rao),e(Ng,OP),e(OP,Pao),e(Ng,Bao),e(A,Nao),e(A,Ig),e(Ig,Gse),e(Gse,Iao),e(Ig,qao),e(Ig,VP),e(VP,jao),e(Ig,Dao),e(A,Gao),e(A,qg),e(qg,Ose),e(Ose,Oao),e(qg,Vao),e(qg,XP),e(XP,Xao),e(qg,zao),e(A,Qao),e(A,jg),e(jg,Vse),e(Vse,Wao),e(jg,Hao),e(jg,zP),e(zP,Uao),e(jg,Jao),e(A,Yao),e(A,Dg),e(Dg,Xse),e(Xse,Kao),e(Dg,Zao),e(Dg,QP),e(QP,eno),e(Dg,ono),e(A,rno),e(A,Gg),e(Gg,zse),e(zse,tno),e(Gg,ano),e(Gg,WP),e(WP,nno),e(Gg,sno),e(A,lno),e(A,Og),e(Og,Qse),e(Qse,ino),e(Og,dno),e(Og,HP),e(HP,cno),e(Og,fno),e(A,mno),e(A,Vg),e(Vg,Wse),e(Wse,gno),e(Vg,hno),e(Vg,UP),e(UP,pno),e(Vg,_no),e(A,uno),e(A,Xg),e(Xg,Hse),e(Hse,bno),e(Xg,vno),e(Xg,JP),e(JP,Fno),e(Xg,Tno),e(A,Mno),e(A,zg),e(zg,Use),e(Use,Eno),e(zg,Cno),e(zg,YP),e(YP,wno),e(zg,Ano),e(A,Lno),e(A,Qg),e(Qg,Jse),e(Jse,yno),e(Qg,xno),e(Qg,KP),e(KP,$no),e(Qg,kno),e(A,Sno),e(A,Wg),e(Wg,Yse),e(Yse,Rno),e(Wg,Pno),e(Wg,ZP),e(ZP,Bno),e(Wg,Nno),e(A,Ino),e(A,Hg),e(Hg,Kse),e(Kse,qno),e(Hg,jno),e(Hg,eB),e(eB,Dno),e(Hg,Gno),e(A,Ono),e(A,Ug),e(Ug,Zse),e(Zse,Vno),e(Ug,Xno),e(Ug,oB),e(oB,zno),e(Ug,Qno),e(A,Wno),e(A,Jg),e(Jg,ele),e(ele,Hno),e(Jg,Uno),e(Jg,rB),e(rB,Jno),e(Jg,Yno),e(A,Kno),e(A,Yg),e(Yg,ole),e(ole,Zno),e(Yg,eso),e(Yg,tB),e(tB,oso),e(Yg,rso),e(Lr,tso),M(Kg,Lr,null),e(Ao,aso),e(Ao,Zg),M(_L,Zg,null),e(Zg,nso),e(Zg,rle),e(rle,sso),b(f,wXe,u),b(f,qi,u),e(qi,eh),e(eh,tle),M(uL,tle,null),e(qi,lso),e(qi,ale),e(ale,iso),b(f,AXe,u),b(f,Lo,u),M(bL,Lo,null),e(Lo,dso),e(Lo,vL),e(vL,cso),e(vL,aB),e(aB,fso),e(vL,mso),e(Lo,gso),e(Lo,FL),e(FL,hso),e(FL,nle),e(nle,pso),e(FL,_so),e(Lo,uso),e(Lo,yr),M(TL,yr,null),e(yr,bso),e(yr,sle),e(sle,vso),e(yr,Fso),e(yr,Pa),e(Pa,Tso),e(Pa,lle),e(lle,Mso),e(Pa,Eso),e(Pa,ile),e(ile,Cso),e(Pa,wso),e(Pa,dle),e(dle,Aso),e(Pa,Lso),e(yr,yso),e(yr,k),e(k,jn),e(jn,cle),e(cle,xso),e(jn,$so),e(jn,nB),e(nB,kso),e(jn,Sso),e(jn,sB),e(sB,Rso),e(jn,Pso),e(k,Bso),e(k,Dn),e(Dn,fle),e(fle,Nso),e(Dn,Iso),e(Dn,lB),e(lB,qso),e(Dn,jso),e(Dn,iB),e(iB,Dso),e(Dn,Gso),e(k,Oso),e(k,Gn),e(Gn,mle),e(mle,Vso),e(Gn,Xso),e(Gn,dB),e(dB,zso),e(Gn,Qso),e(Gn,cB),e(cB,Wso),e(Gn,Hso),e(k,Uso),e(k,oh),e(oh,gle),e(gle,Jso),e(oh,Yso),e(oh,fB),e(fB,Kso),e(oh,Zso),e(k,elo),e(k,On),e(On,hle),e(hle,olo),e(On,rlo),e(On,mB),e(mB,tlo),e(On,alo),e(On,gB),e(gB,nlo),e(On,slo),e(k,llo),e(k,rh),e(rh,ple),e(ple,ilo),e(rh,dlo),e(rh,hB),e(hB,clo),e(rh,flo),e(k,mlo),e(k,th),e(th,_le),e(_le,glo),e(th,hlo),e(th,pB),e(pB,plo),e(th,_lo),e(k,ulo),e(k,ah),e(ah,ule),e(ule,blo),e(ah,vlo),e(ah,_B),e(_B,Flo),e(ah,Tlo),e(k,Mlo),e(k,Vn),e(Vn,ble),e(ble,Elo),e(Vn,Clo),e(Vn,uB),e(uB,wlo),e(Vn,Alo),e(Vn,bB),e(bB,Llo),e(Vn,ylo),e(k,xlo),e(k,Xn),e(Xn,vle),e(vle,$lo),e(Xn,klo),e(Xn,vB),e(vB,Slo),e(Xn,Rlo),e(Xn,FB),e(FB,Plo),e(Xn,Blo),e(k,Nlo),e(k,zn),e(zn,Fle),e(Fle,Ilo),e(zn,qlo),e(zn,TB),e(TB,jlo),e(zn,Dlo),e(zn,MB),e(MB,Glo),e(zn,Olo),e(k,Vlo),e(k,nh),e(nh,Tle),e(Tle,Xlo),e(nh,zlo),e(nh,EB),e(EB,Qlo),e(nh,Wlo),e(k,Hlo),e(k,sh),e(sh,Mle),e(Mle,Ulo),e(sh,Jlo),e(sh,CB),e(CB,Ylo),e(sh,Klo),e(k,Zlo),e(k,lh),e(lh,Ele),e(Ele,eio),e(lh,oio),e(lh,wB),e(wB,rio),e(lh,tio),e(k,aio),e(k,Qn),e(Qn,Cle),e(Cle,nio),e(Qn,sio),e(Qn,AB),e(AB,lio),e(Qn,iio),e(Qn,LB),e(LB,dio),e(Qn,cio),e(k,fio),e(k,ih),e(ih,wle),e(wle,mio),e(ih,gio),e(ih,yB),e(yB,hio),e(ih,pio),e(k,_io),e(k,Wn),e(Wn,Ale),e(Ale,uio),e(Wn,bio),e(Wn,xB),e(xB,vio),e(Wn,Fio),e(Wn,$B),e($B,Tio),e(Wn,Mio),e(k,Eio),e(k,Hn),e(Hn,Lle),e(Lle,Cio),e(Hn,wio),e(Hn,kB),e(kB,Aio),e(Hn,Lio),e(Hn,SB),e(SB,yio),e(Hn,xio),e(k,$io),e(k,Un),e(Un,yle),e(yle,kio),e(Un,Sio),e(Un,RB),e(RB,Rio),e(Un,Pio),e(Un,PB),e(PB,Bio),e(Un,Nio),e(k,Iio),e(k,Jn),e(Jn,xle),e(xle,qio),e(Jn,jio),e(Jn,BB),e(BB,Dio),e(Jn,Gio),e(Jn,NB),e(NB,Oio),e(Jn,Vio),e(k,Xio),e(k,dh),e(dh,$le),e($le,zio),e(dh,Qio),e(dh,IB),e(IB,Wio),e(dh,Hio),e(k,Uio),e(k,Yn),e(Yn,kle),e(kle,Jio),e(Yn,Yio),e(Yn,qB),e(qB,Kio),e(Yn,Zio),e(Yn,jB),e(jB,edo),e(Yn,odo),e(k,rdo),e(k,Kn),e(Kn,Sle),e(Sle,tdo),e(Kn,ado),e(Kn,DB),e(DB,ndo),e(Kn,sdo),e(Kn,GB),e(GB,ldo),e(Kn,ido),e(k,ddo),e(k,Zn),e(Zn,Rle),e(Rle,cdo),e(Zn,fdo),e(Zn,OB),e(OB,mdo),e(Zn,gdo),e(Zn,VB),e(VB,hdo),e(Zn,pdo),e(k,_do),e(k,es),e(es,Ple),e(Ple,udo),e(es,bdo),e(es,XB),e(XB,vdo),e(es,Fdo),e(es,zB),e(zB,Tdo),e(es,Mdo),e(k,Edo),e(k,os),e(os,Ble),e(Ble,Cdo),e(os,wdo),e(os,QB),e(QB,Ado),e(os,Ldo),e(os,WB),e(WB,ydo),e(os,xdo),e(k,$do),e(k,rs),e(rs,Nle),e(Nle,kdo),e(rs,Sdo),e(rs,HB),e(HB,Rdo),e(rs,Pdo),e(rs,UB),e(UB,Bdo),e(rs,Ndo),e(k,Ido),e(k,ch),e(ch,Ile),e(Ile,qdo),e(ch,jdo),e(ch,JB),e(JB,Ddo),e(ch,Gdo),e(k,Odo),e(k,ts),e(ts,qle),e(qle,Vdo),e(ts,Xdo),e(ts,YB),e(YB,zdo),e(ts,Qdo),e(ts,KB),e(KB,Wdo),e(ts,Hdo),e(k,Udo),e(k,fh),e(fh,jle),e(jle,Jdo),e(fh,Ydo),e(fh,ZB),e(ZB,Kdo),e(fh,Zdo),e(k,eco),e(k,as),e(as,Dle),e(Dle,oco),e(as,rco),e(as,eN),e(eN,tco),e(as,aco),e(as,oN),e(oN,nco),e(as,sco),e(k,lco),e(k,ns),e(ns,Gle),e(Gle,ico),e(ns,dco),e(ns,rN),e(rN,cco),e(ns,fco),e(ns,tN),e(tN,mco),e(ns,gco),e(k,hco),e(k,ss),e(ss,Ole),e(Ole,pco),e(ss,_co),e(ss,aN),e(aN,uco),e(ss,bco),e(ss,nN),e(nN,vco),e(ss,Fco),e(k,Tco),e(k,mh),e(mh,Vle),e(Vle,Mco),e(mh,Eco),e(mh,sN),e(sN,Cco),e(mh,wco),e(k,Aco),e(k,ls),e(ls,Xle),e(Xle,Lco),e(ls,yco),e(ls,lN),e(lN,xco),e(ls,$co),e(ls,iN),e(iN,kco),e(ls,Sco),e(k,Rco),e(k,is),e(is,zle),e(zle,Pco),e(is,Bco),e(is,dN),e(dN,Nco),e(is,Ico),e(is,cN),e(cN,qco),e(is,jco),e(k,Dco),e(k,ds),e(ds,Qle),e(Qle,Gco),e(ds,Oco),e(ds,fN),e(fN,Vco),e(ds,Xco),e(ds,mN),e(mN,zco),e(ds,Qco),e(k,Wco),e(k,gh),e(gh,Wle),e(Wle,Hco),e(gh,Uco),e(gh,gN),e(gN,Jco),e(gh,Yco),e(k,Kco),e(k,cs),e(cs,Hle),e(Hle,Zco),e(cs,efo),e(cs,hN),e(hN,ofo),e(cs,rfo),e(cs,pN),e(pN,tfo),e(cs,afo),e(k,nfo),e(k,fs),e(fs,Ule),e(Ule,sfo),e(fs,lfo),e(fs,_N),e(_N,ifo),e(fs,dfo),e(fs,uN),e(uN,cfo),e(fs,ffo),e(k,mfo),e(k,ms),e(ms,Jle),e(Jle,gfo),e(ms,hfo),e(ms,bN),e(bN,pfo),e(ms,_fo),e(ms,vN),e(vN,ufo),e(ms,bfo),e(k,vfo),e(k,gs),e(gs,Yle),e(Yle,Ffo),e(gs,Tfo),e(gs,FN),e(FN,Mfo),e(gs,Efo),e(gs,TN),e(TN,Cfo),e(gs,wfo),e(k,Afo),e(k,hs),e(hs,Kle),e(Kle,Lfo),e(hs,yfo),e(hs,MN),e(MN,xfo),e(hs,$fo),e(hs,EN),e(EN,kfo),e(hs,Sfo),e(k,Rfo),e(k,ps),e(ps,Zle),e(Zle,Pfo),e(ps,Bfo),e(ps,CN),e(CN,Nfo),e(ps,Ifo),e(ps,wN),e(wN,qfo),e(ps,jfo),e(k,Dfo),e(k,_s),e(_s,eie),e(eie,Gfo),e(_s,Ofo),e(_s,AN),e(AN,Vfo),e(_s,Xfo),e(_s,LN),e(LN,zfo),e(_s,Qfo),e(k,Wfo),e(k,us),e(us,oie),e(oie,Hfo),e(us,Ufo),e(us,yN),e(yN,Jfo),e(us,Yfo),e(us,xN),e(xN,Kfo),e(us,Zfo),e(k,emo),e(k,hh),e(hh,rie),e(rie,omo),e(hh,rmo),e(hh,$N),e($N,tmo),e(hh,amo),e(k,nmo),e(k,bs),e(bs,tie),e(tie,smo),e(bs,lmo),e(bs,kN),e(kN,imo),e(bs,dmo),e(bs,SN),e(SN,cmo),e(bs,fmo),e(k,mmo),e(k,ph),e(ph,aie),e(aie,gmo),e(ph,hmo),e(ph,RN),e(RN,pmo),e(ph,_mo),e(k,umo),e(k,_h),e(_h,nie),e(nie,bmo),e(_h,vmo),e(_h,PN),e(PN,Fmo),e(_h,Tmo),e(k,Mmo),e(k,vs),e(vs,sie),e(sie,Emo),e(vs,Cmo),e(vs,BN),e(BN,wmo),e(vs,Amo),e(vs,NN),e(NN,Lmo),e(vs,ymo),e(k,xmo),e(k,Fs),e(Fs,lie),e(lie,$mo),e(Fs,kmo),e(Fs,IN),e(IN,Smo),e(Fs,Rmo),e(Fs,qN),e(qN,Pmo),e(Fs,Bmo),e(k,Nmo),e(k,Ts),e(Ts,iie),e(iie,Imo),e(Ts,qmo),e(Ts,jN),e(jN,jmo),e(Ts,Dmo),e(Ts,DN),e(DN,Gmo),e(Ts,Omo),e(k,Vmo),e(k,uh),e(uh,die),e(die,Xmo),e(uh,zmo),e(uh,GN),e(GN,Qmo),e(uh,Wmo),e(k,Hmo),e(k,Ms),e(Ms,cie),e(cie,Umo),e(Ms,Jmo),e(Ms,ON),e(ON,Ymo),e(Ms,Kmo),e(Ms,VN),e(VN,Zmo),e(Ms,ego),e(k,ogo),e(k,Es),e(Es,fie),e(fie,rgo),e(Es,tgo),e(Es,XN),e(XN,ago),e(Es,ngo),e(Es,zN),e(zN,sgo),e(Es,lgo),e(k,igo),e(k,Cs),e(Cs,mie),e(mie,dgo),e(Cs,cgo),e(Cs,QN),e(QN,fgo),e(Cs,mgo),e(Cs,WN),e(WN,ggo),e(Cs,hgo),e(k,pgo),e(k,ws),e(ws,gie),e(gie,_go),e(ws,ugo),e(ws,HN),e(HN,bgo),e(ws,vgo),e(ws,UN),e(UN,Fgo),e(ws,Tgo),e(k,Mgo),e(k,As),e(As,hie),e(hie,Ego),e(As,Cgo),e(As,JN),e(JN,wgo),e(As,Ago),e(As,YN),e(YN,Lgo),e(As,ygo),e(k,xgo),e(k,Ls),e(Ls,pie),e(pie,$go),e(Ls,kgo),e(Ls,KN),e(KN,Sgo),e(Ls,Rgo),e(Ls,ZN),e(ZN,Pgo),e(Ls,Bgo),e(k,Ngo),e(k,ys),e(ys,_ie),e(_ie,Igo),e(ys,qgo),e(ys,eI),e(eI,jgo),e(ys,Dgo),e(ys,oI),e(oI,Ggo),e(ys,Ogo),e(k,Vgo),e(k,xs),e(xs,uie),e(uie,Xgo),e(xs,zgo),e(xs,rI),e(rI,Qgo),e(xs,Wgo),e(xs,tI),e(tI,Hgo),e(xs,Ugo),e(k,Jgo),e(k,bh),e(bh,bie),e(bie,Ygo),e(bh,Kgo),e(bh,aI),e(aI,Zgo),e(bh,eho),e(k,oho),e(k,$s),e($s,vie),e(vie,rho),e($s,tho),e($s,nI),e(nI,aho),e($s,nho),e($s,sI),e(sI,sho),e($s,lho),e(k,iho),e(k,vh),e(vh,Fie),e(Fie,dho),e(vh,cho),e(vh,lI),e(lI,fho),e(vh,mho),e(k,gho),e(k,Fh),e(Fh,Tie),e(Tie,hho),e(Fh,pho),e(Fh,iI),e(iI,_ho),e(Fh,uho),e(k,bho),e(k,Th),e(Th,Mie),e(Mie,vho),e(Th,Fho),e(Th,dI),e(dI,Tho),e(Th,Mho),e(k,Eho),e(k,Mh),e(Mh,Eie),e(Eie,Cho),e(Mh,who),e(Mh,cI),e(cI,Aho),e(Mh,Lho),e(k,yho),e(k,ks),e(ks,Cie),e(Cie,xho),e(ks,$ho),e(ks,fI),e(fI,kho),e(ks,Sho),e(ks,mI),e(mI,Rho),e(ks,Pho),e(k,Bho),e(k,Eh),e(Eh,wie),e(wie,Nho),e(Eh,Iho),e(Eh,gI),e(gI,qho),e(Eh,jho),e(k,Dho),e(k,Ss),e(Ss,Aie),e(Aie,Gho),e(Ss,Oho),e(Ss,hI),e(hI,Vho),e(Ss,Xho),e(Ss,pI),e(pI,zho),e(Ss,Qho),e(k,Who),e(k,Rs),e(Rs,Lie),e(Lie,Hho),e(Rs,Uho),e(Rs,_I),e(_I,Jho),e(Rs,Yho),e(Rs,uI),e(uI,Kho),e(Rs,Zho),e(k,epo),e(k,Ps),e(Ps,yie),e(yie,opo),e(Ps,rpo),e(Ps,bI),e(bI,tpo),e(Ps,apo),e(Ps,vI),e(vI,npo),e(Ps,spo),e(k,lpo),e(k,Bs),e(Bs,xie),e(xie,ipo),e(Bs,dpo),e(Bs,FI),e(FI,cpo),e(Bs,fpo),e(Bs,TI),e(TI,mpo),e(Bs,gpo),e(k,hpo),e(k,Ns),e(Ns,$ie),e($ie,ppo),e(Ns,_po),e(Ns,MI),e(MI,upo),e(Ns,bpo),e(Ns,EI),e(EI,vpo),e(Ns,Fpo),e(k,Tpo),e(k,Is),e(Is,kie),e(kie,Mpo),e(Is,Epo),e(Is,CI),e(CI,Cpo),e(Is,wpo),e(Is,wI),e(wI,Apo),e(Is,Lpo),e(k,ypo),e(k,Ch),e(Ch,Sie),e(Sie,xpo),e(Ch,$po),e(Ch,AI),e(AI,kpo),e(Ch,Spo),e(k,Rpo),e(k,wh),e(wh,Rie),e(Rie,Ppo),e(wh,Bpo),e(wh,LI),e(LI,Npo),e(wh,Ipo),e(k,qpo),e(k,qs),e(qs,Pie),e(Pie,jpo),e(qs,Dpo),e(qs,yI),e(yI,Gpo),e(qs,Opo),e(qs,xI),e(xI,Vpo),e(qs,Xpo),e(k,zpo),e(k,js),e(js,Bie),e(Bie,Qpo),e(js,Wpo),e(js,$I),e($I,Hpo),e(js,Upo),e(js,kI),e(kI,Jpo),e(js,Ypo),e(k,Kpo),e(k,Ds),e(Ds,Nie),e(Nie,Zpo),e(Ds,e_o),e(Ds,SI),e(SI,o_o),e(Ds,r_o),e(Ds,RI),e(RI,t_o),e(Ds,a_o),e(k,n_o),e(k,Ah),e(Ah,Iie),e(Iie,s_o),e(Ah,l_o),e(Ah,PI),e(PI,i_o),e(Ah,d_o),e(k,c_o),e(k,Lh),e(Lh,qie),e(qie,f_o),e(Lh,m_o),e(Lh,BI),e(BI,g_o),e(Lh,h_o),e(k,p_o),e(k,yh),e(yh,jie),e(jie,__o),e(yh,u_o),e(yh,NI),e(NI,b_o),e(yh,v_o),e(k,F_o),e(k,Gs),e(Gs,Die),e(Die,T_o),e(Gs,M_o),e(Gs,II),e(II,E_o),e(Gs,C_o),e(Gs,qI),e(qI,w_o),e(Gs,A_o),e(k,L_o),e(k,Os),e(Os,Gie),e(Gie,y_o),e(Os,x_o),e(Os,jI),e(jI,$_o),e(Os,k_o),e(Os,DI),e(DI,S_o),e(Os,R_o),e(k,P_o),e(k,xh),e(xh,Oie),e(Oie,B_o),e(xh,N_o),e(xh,GI),e(GI,I_o),e(xh,q_o),e(k,j_o),e(k,$h),e($h,Vie),e(Vie,D_o),e($h,G_o),e($h,OI),e(OI,O_o),e($h,V_o),e(k,X_o),e(k,kh),e(kh,Xie),e(Xie,z_o),e(kh,Q_o),e(kh,VI),e(VI,W_o),e(kh,H_o),e(k,U_o),e(k,Vs),e(Vs,zie),e(zie,J_o),e(Vs,Y_o),e(Vs,XI),e(XI,K_o),e(Vs,Z_o),e(Vs,zI),e(zI,euo),e(Vs,ouo),e(k,ruo),e(k,Sh),e(Sh,Qie),e(Qie,tuo),e(Sh,auo),e(Sh,QI),e(QI,nuo),e(Sh,suo),e(k,luo),e(k,Rh),e(Rh,Wie),e(Wie,iuo),e(Rh,duo),e(Rh,WI),e(WI,cuo),e(Rh,fuo),e(k,muo),e(k,Xs),e(Xs,Hie),e(Hie,guo),e(Xs,huo),e(Xs,HI),e(HI,puo),e(Xs,_uo),e(Xs,UI),e(UI,uuo),e(Xs,buo),e(k,vuo),e(k,zs),e(zs,Uie),e(Uie,Fuo),e(zs,Tuo),e(zs,JI),e(JI,Muo),e(zs,Euo),e(zs,YI),e(YI,Cuo),e(zs,wuo),e(k,Auo),e(k,Qs),e(Qs,Jie),e(Jie,Luo),e(Qs,yuo),e(Qs,KI),e(KI,xuo),e(Qs,$uo),e(Qs,ZI),e(ZI,kuo),e(Qs,Suo),e(k,Ruo),e(k,Ws),e(Ws,Yie),e(Yie,Puo),e(Ws,Buo),e(Ws,eq),e(eq,Nuo),e(Ws,Iuo),e(Ws,oq),e(oq,quo),e(Ws,juo),e(yr,Duo),M(Ph,yr,null),e(Lo,Guo),e(Lo,Bh),M(ML,Bh,null),e(Bh,Ouo),e(Bh,Kie),e(Kie,Vuo),b(f,LXe,u),b(f,ji,u),e(ji,Nh),e(Nh,Zie),M(EL,Zie,null),e(ji,Xuo),e(ji,ede),e(ede,zuo),b(f,yXe,u),b(f,yo,u),M(CL,yo,null),e(yo,Quo),e(yo,wL),e(wL,Wuo),e(wL,rq),e(rq,Huo),e(wL,Uuo),e(yo,Juo),e(yo,AL),e(AL,Yuo),e(AL,ode),e(ode,Kuo),e(AL,Zuo),e(yo,e2o),e(yo,Ue),M(LL,Ue,null),e(Ue,o2o),e(Ue,rde),e(rde,r2o),e(Ue,t2o),e(Ue,Ba),e(Ba,a2o),e(Ba,tde),e(tde,n2o),e(Ba,s2o),e(Ba,ade),e(ade,l2o),e(Ba,i2o),e(Ba,nde),e(nde,d2o),e(Ba,c2o),e(Ue,f2o),e(Ue,Y),e(Y,Ih),e(Ih,sde),e(sde,m2o),e(Ih,g2o),e(Ih,tq),e(tq,h2o),e(Ih,p2o),e(Y,_2o),e(Y,qh),e(qh,lde),e(lde,u2o),e(qh,b2o),e(qh,aq),e(aq,v2o),e(qh,F2o),e(Y,T2o),e(Y,jh),e(jh,ide),e(ide,M2o),e(jh,E2o),e(jh,nq),e(nq,C2o),e(jh,w2o),e(Y,A2o),e(Y,Dh),e(Dh,dde),e(dde,L2o),e(Dh,y2o),e(Dh,sq),e(sq,x2o),e(Dh,$2o),e(Y,k2o),e(Y,Gh),e(Gh,cde),e(cde,S2o),e(Gh,R2o),e(Gh,lq),e(lq,P2o),e(Gh,B2o),e(Y,N2o),e(Y,Oh),e(Oh,fde),e(fde,I2o),e(Oh,q2o),e(Oh,iq),e(iq,j2o),e(Oh,D2o),e(Y,G2o),e(Y,Vh),e(Vh,mde),e(mde,O2o),e(Vh,V2o),e(Vh,dq),e(dq,X2o),e(Vh,z2o),e(Y,Q2o),e(Y,Xh),e(Xh,gde),e(gde,W2o),e(Xh,H2o),e(Xh,cq),e(cq,U2o),e(Xh,J2o),e(Y,Y2o),e(Y,zh),e(zh,hde),e(hde,K2o),e(zh,Z2o),e(zh,fq),e(fq,e1o),e(zh,o1o),e(Y,r1o),e(Y,Qh),e(Qh,pde),e(pde,t1o),e(Qh,a1o),e(Qh,mq),e(mq,n1o),e(Qh,s1o),e(Y,l1o),e(Y,Wh),e(Wh,_de),e(_de,i1o),e(Wh,d1o),e(Wh,gq),e(gq,c1o),e(Wh,f1o),e(Y,m1o),e(Y,Hh),e(Hh,ude),e(ude,g1o),e(Hh,h1o),e(Hh,hq),e(hq,p1o),e(Hh,_1o),e(Y,u1o),e(Y,Uh),e(Uh,bde),e(bde,b1o),e(Uh,v1o),e(Uh,pq),e(pq,F1o),e(Uh,T1o),e(Y,M1o),e(Y,Jh),e(Jh,vde),e(vde,E1o),e(Jh,C1o),e(Jh,_q),e(_q,w1o),e(Jh,A1o),e(Y,L1o),e(Y,Yh),e(Yh,Fde),e(Fde,y1o),e(Yh,x1o),e(Yh,uq),e(uq,$1o),e(Yh,k1o),e(Y,S1o),e(Y,Kh),e(Kh,Tde),e(Tde,R1o),e(Kh,P1o),e(Kh,bq),e(bq,B1o),e(Kh,N1o),e(Y,I1o),e(Y,Zh),e(Zh,Mde),e(Mde,q1o),e(Zh,j1o),e(Zh,vq),e(vq,D1o),e(Zh,G1o),e(Y,O1o),e(Y,ep),e(ep,Ede),e(Ede,V1o),e(ep,X1o),e(ep,Fq),e(Fq,z1o),e(ep,Q1o),e(Y,W1o),e(Y,op),e(op,Cde),e(Cde,H1o),e(op,U1o),e(op,Tq),e(Tq,J1o),e(op,Y1o),e(Y,K1o),e(Y,rp),e(rp,wde),e(wde,Z1o),e(rp,ebo),e(rp,Mq),e(Mq,obo),e(rp,rbo),e(Y,tbo),e(Y,tp),e(tp,Ade),e(Ade,abo),e(tp,nbo),e(tp,Eq),e(Eq,sbo),e(tp,lbo),e(Y,ibo),e(Y,ap),e(ap,Lde),e(Lde,dbo),e(ap,cbo),e(ap,Cq),e(Cq,fbo),e(ap,mbo),e(Y,gbo),e(Y,np),e(np,yde),e(yde,hbo),e(np,pbo),e(np,wq),e(wq,_bo),e(np,ubo),e(Y,bbo),e(Y,sp),e(sp,xde),e(xde,vbo),e(sp,Fbo),e(sp,Aq),e(Aq,Tbo),e(sp,Mbo),e(Y,Ebo),e(Y,lp),e(lp,$de),e($de,Cbo),e(lp,wbo),e(lp,Lq),e(Lq,Abo),e(lp,Lbo),e(Y,ybo),e(Y,ip),e(ip,kde),e(kde,xbo),e(ip,$bo),e(ip,yq),e(yq,kbo),e(ip,Sbo),e(Y,Rbo),e(Y,dp),e(dp,Sde),e(Sde,Pbo),e(dp,Bbo),e(dp,xq),e(xq,Nbo),e(dp,Ibo),e(Y,qbo),e(Y,cp),e(cp,Rde),e(Rde,jbo),e(cp,Dbo),e(cp,$q),e($q,Gbo),e(cp,Obo),e(Y,Vbo),e(Y,fp),e(fp,Pde),e(Pde,Xbo),e(fp,zbo),e(fp,kq),e(kq,Qbo),e(fp,Wbo),e(Y,Hbo),e(Y,mp),e(mp,Bde),e(Bde,Ubo),e(mp,Jbo),e(mp,Sq),e(Sq,Ybo),e(mp,Kbo),e(Y,Zbo),e(Y,gp),e(gp,Nde),e(Nde,evo),e(gp,ovo),e(gp,Rq),e(Rq,rvo),e(gp,tvo),e(Y,avo),e(Y,hp),e(hp,Ide),e(Ide,nvo),e(hp,svo),e(hp,Pq),e(Pq,lvo),e(hp,ivo),e(Y,dvo),e(Y,pp),e(pp,qde),e(qde,cvo),e(pp,fvo),e(pp,Bq),e(Bq,mvo),e(pp,gvo),e(Y,hvo),e(Y,_p),e(_p,jde),e(jde,pvo),e(_p,_vo),e(_p,Nq),e(Nq,uvo),e(_p,bvo),e(Ue,vvo),M(up,Ue,null),e(Ue,Fvo),M(bp,Ue,null),e(yo,Tvo),e(yo,vp),M(yL,vp,null),e(vp,Mvo),e(vp,Dde),e(Dde,Evo),b(f,xXe,u),b(f,Di,u),e(Di,Fp),e(Fp,Gde),M(xL,Gde,null),e(Di,Cvo),e(Di,Ode),e(Ode,wvo),b(f,$Xe,u),b(f,xo,u),M($L,xo,null),e(xo,Avo),e(xo,kL),e(kL,Lvo),e(kL,Iq),e(Iq,yvo),e(kL,xvo),e(xo,$vo),e(xo,SL),e(SL,kvo),e(SL,Vde),e(Vde,Svo),e(SL,Rvo),e(xo,Pvo),e(xo,Je),M(RL,Je,null),e(Je,Bvo),e(Je,Xde),e(Xde,Nvo),e(Je,Ivo),e(Je,Gi),e(Gi,qvo),e(Gi,zde),e(zde,jvo),e(Gi,Dvo),e(Gi,Qde),e(Qde,Gvo),e(Gi,Ovo),e(Je,Vvo),e(Je,pe),e(pe,Tp),e(Tp,Wde),e(Wde,Xvo),e(Tp,zvo),e(Tp,qq),e(qq,Qvo),e(Tp,Wvo),e(pe,Hvo),e(pe,Mp),e(Mp,Hde),e(Hde,Uvo),e(Mp,Jvo),e(Mp,Ude),e(Ude,Yvo),e(Mp,Kvo),e(pe,Zvo),e(pe,Ep),e(Ep,Jde),e(Jde,e0o),e(Ep,o0o),e(Ep,jq),e(jq,r0o),e(Ep,t0o),e(pe,a0o),e(pe,Cp),e(Cp,Yde),e(Yde,n0o),e(Cp,s0o),e(Cp,Dq),e(Dq,l0o),e(Cp,i0o),e(pe,d0o),e(pe,wp),e(wp,Kde),e(Kde,c0o),e(wp,f0o),e(wp,Gq),e(Gq,m0o),e(wp,g0o),e(pe,h0o),e(pe,Ap),e(Ap,Zde),e(Zde,p0o),e(Ap,_0o),e(Ap,Oq),e(Oq,u0o),e(Ap,b0o),e(pe,v0o),e(pe,Lp),e(Lp,ece),e(ece,F0o),e(Lp,T0o),e(Lp,Vq),e(Vq,M0o),e(Lp,E0o),e(pe,C0o),e(pe,yp),e(yp,oce),e(oce,w0o),e(yp,A0o),e(yp,Xq),e(Xq,L0o),e(yp,y0o),e(pe,x0o),e(pe,xp),e(xp,rce),e(rce,$0o),e(xp,k0o),e(xp,zq),e(zq,S0o),e(xp,R0o),e(pe,P0o),e(pe,$p),e($p,tce),e(tce,B0o),e($p,N0o),e($p,Qq),e(Qq,I0o),e($p,q0o),e(pe,j0o),e(pe,kp),e(kp,ace),e(ace,D0o),e(kp,G0o),e(kp,Wq),e(Wq,O0o),e(kp,V0o),e(pe,X0o),e(pe,Sp),e(Sp,nce),e(nce,z0o),e(Sp,Q0o),e(Sp,Hq),e(Hq,W0o),e(Sp,H0o),e(pe,U0o),e(pe,Rp),e(Rp,sce),e(sce,J0o),e(Rp,Y0o),e(Rp,Uq),e(Uq,K0o),e(Rp,Z0o),e(pe,eFo),e(pe,Pp),e(Pp,lce),e(lce,oFo),e(Pp,rFo),e(Pp,Jq),e(Jq,tFo),e(Pp,aFo),e(pe,nFo),e(pe,Bp),e(Bp,ice),e(ice,sFo),e(Bp,lFo),e(Bp,Yq),e(Yq,iFo),e(Bp,dFo),e(pe,cFo),e(pe,Np),e(Np,dce),e(dce,fFo),e(Np,mFo),e(Np,Kq),e(Kq,gFo),e(Np,hFo),e(pe,pFo),e(pe,Ip),e(Ip,cce),e(cce,_Fo),e(Ip,uFo),e(Ip,Zq),e(Zq,bFo),e(Ip,vFo),e(pe,FFo),e(pe,qp),e(qp,fce),e(fce,TFo),e(qp,MFo),e(qp,ej),e(ej,EFo),e(qp,CFo),e(Je,wFo),M(jp,Je,null),e(Je,AFo),M(Dp,Je,null),e(xo,LFo),e(xo,Gp),M(PL,Gp,null),e(Gp,yFo),e(Gp,mce),e(mce,xFo),b(f,kXe,u),b(f,Oi,u),e(Oi,Op),e(Op,gce),M(BL,gce,null),e(Oi,$Fo),e(Oi,hce),e(hce,kFo),b(f,SXe,u),b(f,$o,u),M(NL,$o,null),e($o,SFo),e($o,Vi),e(Vi,RFo),e(Vi,oj),e(oj,PFo),e(Vi,BFo),e(Vi,rj),e(rj,NFo),e(Vi,IFo),e($o,qFo),e($o,IL),e(IL,jFo),e(IL,pce),e(pce,DFo),e(IL,GFo),e($o,OFo),e($o,it),M(qL,it,null),e(it,VFo),e(it,_ce),e(_ce,XFo),e(it,zFo),e(it,Xi),e(Xi,QFo),e(Xi,uce),e(uce,WFo),e(Xi,HFo),e(Xi,tj),e(tj,UFo),e(Xi,JFo),e(it,YFo),M(Vp,it,null),e($o,KFo),e($o,Ye),M(jL,Ye,null),e(Ye,ZFo),e(Ye,bce),e(bce,eTo),e(Ye,oTo),e(Ye,Na),e(Na,rTo),e(Na,vce),e(vce,tTo),e(Na,aTo),e(Na,Fce),e(Fce,nTo),e(Na,sTo),e(Na,Tce),e(Tce,lTo),e(Na,iTo),e(Ye,dTo),e(Ye,y),e(y,Xp),e(Xp,Mce),e(Mce,cTo),e(Xp,fTo),e(Xp,aj),e(aj,mTo),e(Xp,gTo),e(y,hTo),e(y,zp),e(zp,Ece),e(Ece,pTo),e(zp,_To),e(zp,nj),e(nj,uTo),e(zp,bTo),e(y,vTo),e(y,Qp),e(Qp,Cce),e(Cce,FTo),e(Qp,TTo),e(Qp,sj),e(sj,MTo),e(Qp,ETo),e(y,CTo),e(y,Wp),e(Wp,wce),e(wce,wTo),e(Wp,ATo),e(Wp,lj),e(lj,LTo),e(Wp,yTo),e(y,xTo),e(y,Hp),e(Hp,Ace),e(Ace,$To),e(Hp,kTo),e(Hp,ij),e(ij,STo),e(Hp,RTo),e(y,PTo),e(y,Up),e(Up,Lce),e(Lce,BTo),e(Up,NTo),e(Up,dj),e(dj,ITo),e(Up,qTo),e(y,jTo),e(y,Jp),e(Jp,yce),e(yce,DTo),e(Jp,GTo),e(Jp,cj),e(cj,OTo),e(Jp,VTo),e(y,XTo),e(y,Yp),e(Yp,xce),e(xce,zTo),e(Yp,QTo),e(Yp,fj),e(fj,WTo),e(Yp,HTo),e(y,UTo),e(y,Kp),e(Kp,$ce),e($ce,JTo),e(Kp,YTo),e(Kp,mj),e(mj,KTo),e(Kp,ZTo),e(y,e8o),e(y,Zp),e(Zp,kce),e(kce,o8o),e(Zp,r8o),e(Zp,gj),e(gj,t8o),e(Zp,a8o),e(y,n8o),e(y,e_),e(e_,Sce),e(Sce,s8o),e(e_,l8o),e(e_,hj),e(hj,i8o),e(e_,d8o),e(y,c8o),e(y,o_),e(o_,Rce),e(Rce,f8o),e(o_,m8o),e(o_,pj),e(pj,g8o),e(o_,h8o),e(y,p8o),e(y,r_),e(r_,Pce),e(Pce,_8o),e(r_,u8o),e(r_,_j),e(_j,b8o),e(r_,v8o),e(y,F8o),e(y,t_),e(t_,Bce),e(Bce,T8o),e(t_,M8o),e(t_,uj),e(uj,E8o),e(t_,C8o),e(y,w8o),e(y,a_),e(a_,Nce),e(Nce,A8o),e(a_,L8o),e(a_,bj),e(bj,y8o),e(a_,x8o),e(y,$8o),e(y,n_),e(n_,Ice),e(Ice,k8o),e(n_,S8o),e(n_,vj),e(vj,R8o),e(n_,P8o),e(y,B8o),e(y,s_),e(s_,qce),e(qce,N8o),e(s_,I8o),e(s_,Fj),e(Fj,q8o),e(s_,j8o),e(y,D8o),e(y,l_),e(l_,jce),e(jce,G8o),e(l_,O8o),e(l_,Tj),e(Tj,V8o),e(l_,X8o),e(y,z8o),e(y,i_),e(i_,Dce),e(Dce,Q8o),e(i_,W8o),e(i_,Mj),e(Mj,H8o),e(i_,U8o),e(y,J8o),e(y,d_),e(d_,Gce),e(Gce,Y8o),e(d_,K8o),e(d_,Ej),e(Ej,Z8o),e(d_,eMo),e(y,oMo),e(y,c_),e(c_,Oce),e(Oce,rMo),e(c_,tMo),e(c_,Cj),e(Cj,aMo),e(c_,nMo),e(y,sMo),e(y,f_),e(f_,Vce),e(Vce,lMo),e(f_,iMo),e(f_,wj),e(wj,dMo),e(f_,cMo),e(y,fMo),e(y,m_),e(m_,Xce),e(Xce,mMo),e(m_,gMo),e(m_,Aj),e(Aj,hMo),e(m_,pMo),e(y,_Mo),e(y,g_),e(g_,zce),e(zce,uMo),e(g_,bMo),e(g_,Lj),e(Lj,vMo),e(g_,FMo),e(y,TMo),e(y,h_),e(h_,Qce),e(Qce,MMo),e(h_,EMo),e(h_,yj),e(yj,CMo),e(h_,wMo),e(y,AMo),e(y,p_),e(p_,Wce),e(Wce,LMo),e(p_,yMo),e(p_,xj),e(xj,xMo),e(p_,$Mo),e(y,kMo),e(y,__),e(__,Hce),e(Hce,SMo),e(__,RMo),e(__,$j),e($j,PMo),e(__,BMo),e(y,NMo),e(y,u_),e(u_,Uce),e(Uce,IMo),e(u_,qMo),e(u_,kj),e(kj,jMo),e(u_,DMo),e(y,GMo),e(y,b_),e(b_,Jce),e(Jce,OMo),e(b_,VMo),e(b_,Sj),e(Sj,XMo),e(b_,zMo),e(y,QMo),e(y,v_),e(v_,Yce),e(Yce,WMo),e(v_,HMo),e(v_,Rj),e(Rj,UMo),e(v_,JMo),e(y,YMo),e(y,F_),e(F_,Kce),e(Kce,KMo),e(F_,ZMo),e(F_,Pj),e(Pj,e4o),e(F_,o4o),e(y,r4o),e(y,T_),e(T_,Zce),e(Zce,t4o),e(T_,a4o),e(T_,Bj),e(Bj,n4o),e(T_,s4o),e(y,l4o),e(y,M_),e(M_,efe),e(efe,i4o),e(M_,d4o),e(M_,Nj),e(Nj,c4o),e(M_,f4o),e(y,m4o),e(y,E_),e(E_,ofe),e(ofe,g4o),e(E_,h4o),e(E_,Ij),e(Ij,p4o),e(E_,_4o),e(y,u4o),e(y,Hs),e(Hs,rfe),e(rfe,b4o),e(Hs,v4o),e(Hs,qj),e(qj,F4o),e(Hs,T4o),e(Hs,jj),e(jj,M4o),e(Hs,E4o),e(y,C4o),e(y,C_),e(C_,tfe),e(tfe,w4o),e(C_,A4o),e(C_,Dj),e(Dj,L4o),e(C_,y4o),e(y,x4o),e(y,w_),e(w_,afe),e(afe,$4o),e(w_,k4o),e(w_,Gj),e(Gj,S4o),e(w_,R4o),e(y,P4o),e(y,A_),e(A_,nfe),e(nfe,B4o),e(A_,N4o),e(A_,Oj),e(Oj,I4o),e(A_,q4o),e(y,j4o),e(y,L_),e(L_,sfe),e(sfe,D4o),e(L_,G4o),e(L_,Vj),e(Vj,O4o),e(L_,V4o),e(y,X4o),e(y,y_),e(y_,lfe),e(lfe,z4o),e(y_,Q4o),e(y_,Xj),e(Xj,W4o),e(y_,H4o),e(y,U4o),e(y,x_),e(x_,ife),e(ife,J4o),e(x_,Y4o),e(x_,zj),e(zj,K4o),e(x_,Z4o),e(y,eEo),e(y,$_),e($_,dfe),e(dfe,oEo),e($_,rEo),e($_,Qj),e(Qj,tEo),e($_,aEo),e(y,nEo),e(y,k_),e(k_,cfe),e(cfe,sEo),e(k_,lEo),e(k_,Wj),e(Wj,iEo),e(k_,dEo),e(y,cEo),e(y,S_),e(S_,ffe),e(ffe,fEo),e(S_,mEo),e(S_,Hj),e(Hj,gEo),e(S_,hEo),e(y,pEo),e(y,R_),e(R_,mfe),e(mfe,_Eo),e(R_,uEo),e(R_,Uj),e(Uj,bEo),e(R_,vEo),e(y,FEo),e(y,P_),e(P_,gfe),e(gfe,TEo),e(P_,MEo),e(P_,Jj),e(Jj,EEo),e(P_,CEo),e(y,wEo),e(y,B_),e(B_,hfe),e(hfe,AEo),e(B_,LEo),e(B_,Yj),e(Yj,yEo),e(B_,xEo),e(y,$Eo),e(y,N_),e(N_,pfe),e(pfe,kEo),e(N_,SEo),e(N_,Kj),e(Kj,REo),e(N_,PEo),e(y,BEo),e(y,I_),e(I_,_fe),e(_fe,NEo),e(I_,IEo),e(I_,Zj),e(Zj,qEo),e(I_,jEo),e(y,DEo),e(y,q_),e(q_,ufe),e(ufe,GEo),e(q_,OEo),e(q_,eD),e(eD,VEo),e(q_,XEo),e(y,zEo),e(y,j_),e(j_,bfe),e(bfe,QEo),e(j_,WEo),e(j_,oD),e(oD,HEo),e(j_,UEo),e(y,JEo),e(y,D_),e(D_,vfe),e(vfe,YEo),e(D_,KEo),e(D_,rD),e(rD,ZEo),e(D_,eCo),e(y,oCo),e(y,G_),e(G_,Ffe),e(Ffe,rCo),e(G_,tCo),e(G_,tD),e(tD,aCo),e(G_,nCo),e(y,sCo),e(y,O_),e(O_,Tfe),e(Tfe,lCo),e(O_,iCo),e(O_,aD),e(aD,dCo),e(O_,cCo),e(y,fCo),e(y,V_),e(V_,Mfe),e(Mfe,mCo),e(V_,gCo),e(V_,nD),e(nD,hCo),e(V_,pCo),e(y,_Co),e(y,X_),e(X_,Efe),e(Efe,uCo),e(X_,bCo),e(X_,sD),e(sD,vCo),e(X_,FCo),e(y,TCo),e(y,z_),e(z_,Cfe),e(Cfe,MCo),e(z_,ECo),e(z_,lD),e(lD,CCo),e(z_,wCo),e(y,ACo),e(y,Q_),e(Q_,wfe),e(wfe,LCo),e(Q_,yCo),e(Q_,iD),e(iD,xCo),e(Q_,$Co),e(y,kCo),e(y,W_),e(W_,Afe),e(Afe,SCo),e(W_,RCo),e(W_,dD),e(dD,PCo),e(W_,BCo),e(y,NCo),e(y,H_),e(H_,Lfe),e(Lfe,ICo),e(H_,qCo),e(H_,cD),e(cD,jCo),e(H_,DCo),e(y,GCo),e(y,U_),e(U_,yfe),e(yfe,OCo),e(U_,VCo),e(U_,fD),e(fD,XCo),e(U_,zCo),e(y,QCo),e(y,J_),e(J_,xfe),e(xfe,WCo),e(J_,HCo),e(J_,mD),e(mD,UCo),e(J_,JCo),e(y,YCo),e(y,Y_),e(Y_,$fe),e($fe,KCo),e(Y_,ZCo),e(Y_,gD),e(gD,e3o),e(Y_,o3o),e(y,r3o),e(y,K_),e(K_,kfe),e(kfe,t3o),e(K_,a3o),e(K_,hD),e(hD,n3o),e(K_,s3o),e(y,l3o),e(y,Z_),e(Z_,Sfe),e(Sfe,i3o),e(Z_,d3o),e(Z_,pD),e(pD,c3o),e(Z_,f3o),e(y,m3o),e(y,eu),e(eu,Rfe),e(Rfe,g3o),e(eu,h3o),e(eu,_D),e(_D,p3o),e(eu,_3o),e(y,u3o),e(y,ou),e(ou,Pfe),e(Pfe,b3o),e(ou,v3o),e(ou,uD),e(uD,F3o),e(ou,T3o),e(y,M3o),e(y,ru),e(ru,Bfe),e(Bfe,E3o),e(ru,C3o),e(ru,bD),e(bD,w3o),e(ru,A3o),e(y,L3o),e(y,tu),e(tu,Nfe),e(Nfe,y3o),e(tu,x3o),e(tu,vD),e(vD,$3o),e(tu,k3o),e(y,S3o),e(y,au),e(au,Ife),e(Ife,R3o),e(au,P3o),e(au,FD),e(FD,B3o),e(au,N3o),e(y,I3o),e(y,nu),e(nu,qfe),e(qfe,q3o),e(nu,j3o),e(nu,TD),e(TD,D3o),e(nu,G3o),e(y,O3o),e(y,su),e(su,jfe),e(jfe,V3o),e(su,X3o),e(su,MD),e(MD,z3o),e(su,Q3o),e(y,W3o),e(y,lu),e(lu,Dfe),e(Dfe,H3o),e(lu,U3o),e(lu,ED),e(ED,J3o),e(lu,Y3o),e(y,K3o),e(y,iu),e(iu,Gfe),e(Gfe,Z3o),e(iu,e5o),e(iu,CD),e(CD,o5o),e(iu,r5o),e(y,t5o),e(y,du),e(du,Ofe),e(Ofe,a5o),e(du,n5o),e(du,wD),e(wD,s5o),e(du,l5o),e(y,i5o),e(y,cu),e(cu,Vfe),e(Vfe,d5o),e(cu,c5o),e(cu,AD),e(AD,f5o),e(cu,m5o),e(y,g5o),e(y,fu),e(fu,Xfe),e(Xfe,h5o),e(fu,p5o),e(fu,LD),e(LD,_5o),e(fu,u5o),e(y,b5o),e(y,mu),e(mu,zfe),e(zfe,v5o),e(mu,F5o),e(mu,yD),e(yD,T5o),e(mu,M5o),e(y,E5o),e(y,gu),e(gu,Qfe),e(Qfe,C5o),e(gu,w5o),e(gu,xD),e(xD,A5o),e(gu,L5o),e(y,y5o),e(y,hu),e(hu,Wfe),e(Wfe,x5o),e(hu,$5o),e(hu,$D),e($D,k5o),e(hu,S5o),e(y,R5o),e(y,pu),e(pu,Hfe),e(Hfe,P5o),e(pu,B5o),e(pu,kD),e(kD,N5o),e(pu,I5o),e(y,q5o),e(y,_u),e(_u,Ufe),e(Ufe,j5o),e(_u,D5o),e(_u,SD),e(SD,G5o),e(_u,O5o),e(y,V5o),e(y,uu),e(uu,Jfe),e(Jfe,X5o),e(uu,z5o),e(uu,RD),e(RD,Q5o),e(uu,W5o),e(y,H5o),e(y,bu),e(bu,Yfe),e(Yfe,U5o),e(bu,J5o),e(bu,PD),e(PD,Y5o),e(bu,K5o),e(y,Z5o),e(y,vu),e(vu,Kfe),e(Kfe,ewo),e(vu,owo),e(vu,BD),e(BD,rwo),e(vu,two),e(y,awo),e(y,Fu),e(Fu,Zfe),e(Zfe,nwo),e(Fu,swo),e(Fu,ND),e(ND,lwo),e(Fu,iwo),e(y,dwo),e(y,Tu),e(Tu,eme),e(eme,cwo),e(Tu,fwo),e(Tu,ID),e(ID,mwo),e(Tu,gwo),e(y,hwo),e(y,Mu),e(Mu,ome),e(ome,pwo),e(Mu,_wo),e(Mu,qD),e(qD,uwo),e(Mu,bwo),e(y,vwo),e(y,Eu),e(Eu,rme),e(rme,Fwo),e(Eu,Two),e(Eu,jD),e(jD,Mwo),e(Eu,Ewo),e(y,Cwo),e(y,Cu),e(Cu,tme),e(tme,wwo),e(Cu,Awo),e(Cu,DD),e(DD,Lwo),e(Cu,ywo),e(y,xwo),e(y,wu),e(wu,ame),e(ame,$wo),e(wu,kwo),e(wu,GD),e(GD,Swo),e(wu,Rwo),e(y,Pwo),e(y,Au),e(Au,nme),e(nme,Bwo),e(Au,Nwo),e(Au,OD),e(OD,Iwo),e(Au,qwo),e(y,jwo),e(y,Lu),e(Lu,sme),e(sme,Dwo),e(Lu,Gwo),e(Lu,VD),e(VD,Owo),e(Lu,Vwo),e(y,Xwo),e(y,yu),e(yu,lme),e(lme,zwo),e(yu,Qwo),e(yu,XD),e(XD,Wwo),e(yu,Hwo),e(y,Uwo),e(y,xu),e(xu,ime),e(ime,Jwo),e(xu,Ywo),e(xu,zD),e(zD,Kwo),e(xu,Zwo),e(y,eAo),e(y,$u),e($u,dme),e(dme,oAo),e($u,rAo),e($u,QD),e(QD,tAo),e($u,aAo),e(y,nAo),e(y,ku),e(ku,cme),e(cme,sAo),e(ku,lAo),e(ku,WD),e(WD,iAo),e(ku,dAo),e(y,cAo),e(y,Su),e(Su,fme),e(fme,fAo),e(Su,mAo),e(Su,HD),e(HD,gAo),e(Su,hAo),e(y,pAo),e(y,Ru),e(Ru,mme),e(mme,_Ao),e(Ru,uAo),e(Ru,UD),e(UD,bAo),e(Ru,vAo),e(y,FAo),e(y,Pu),e(Pu,gme),e(gme,TAo),e(Pu,MAo),e(Pu,JD),e(JD,EAo),e(Pu,CAo),e(y,wAo),e(y,Bu),e(Bu,hme),e(hme,AAo),e(Bu,LAo),e(Bu,YD),e(YD,yAo),e(Bu,xAo),e(y,$Ao),e(y,Nu),e(Nu,pme),e(pme,kAo),e(Nu,SAo),e(Nu,KD),e(KD,RAo),e(Nu,PAo),e(y,BAo),e(y,Iu),e(Iu,_me),e(_me,NAo),e(Iu,IAo),e(Iu,ZD),e(ZD,qAo),e(Iu,jAo),e(y,DAo),e(y,qu),e(qu,ume),e(ume,GAo),e(qu,OAo),e(qu,eG),e(eG,VAo),e(qu,XAo),e(y,zAo),e(y,ju),e(ju,bme),e(bme,QAo),e(ju,WAo),e(ju,oG),e(oG,HAo),e(ju,UAo),e(y,JAo),e(y,Du),e(Du,vme),e(vme,YAo),e(Du,KAo),e(Du,rG),e(rG,ZAo),e(Du,e6o),e(y,o6o),e(y,Gu),e(Gu,Fme),e(Fme,r6o),e(Gu,t6o),e(Gu,tG),e(tG,a6o),e(Gu,n6o),e(y,s6o),e(y,Ou),e(Ou,Tme),e(Tme,l6o),e(Ou,i6o),e(Ou,aG),e(aG,d6o),e(Ou,c6o),e(y,f6o),e(y,Vu),e(Vu,Mme),e(Mme,m6o),e(Vu,g6o),e(Vu,nG),e(nG,h6o),e(Vu,p6o),e(y,_6o),e(y,Xu),e(Xu,Eme),e(Eme,u6o),e(Xu,b6o),e(Xu,sG),e(sG,v6o),e(Xu,F6o),e(y,T6o),e(y,zu),e(zu,Cme),e(Cme,M6o),e(zu,E6o),e(zu,lG),e(lG,C6o),e(zu,w6o),e(y,A6o),e(y,Qu),e(Qu,wme),e(wme,L6o),e(Qu,y6o),e(Qu,iG),e(iG,x6o),e(Qu,$6o),e(Ye,k6o),e(Ye,Wu),e(Wu,S6o),e(Wu,Ame),e(Ame,R6o),e(Wu,P6o),e(Wu,Lme),e(Lme,B6o),e(Ye,N6o),M(Hu,Ye,null),b(f,RXe,u),b(f,zi,u),e(zi,Uu),e(Uu,yme),M(DL,yme,null),e(zi,I6o),e(zi,xme),e(xme,q6o),b(f,PXe,u),b(f,ko,u),M(GL,ko,null),e(ko,j6o),e(ko,Qi),e(Qi,D6o),e(Qi,dG),e(dG,G6o),e(Qi,O6o),e(Qi,cG),e(cG,V6o),e(Qi,X6o),e(ko,z6o),e(ko,OL),e(OL,Q6o),e(OL,$me),e($me,W6o),e(OL,H6o),e(ko,U6o),e(ko,dt),M(VL,dt,null),e(dt,J6o),e(dt,kme),e(kme,Y6o),e(dt,K6o),e(dt,Wi),e(Wi,Z6o),e(Wi,Sme),e(Sme,e7o),e(Wi,o7o),e(Wi,fG),e(fG,r7o),e(Wi,t7o),e(dt,a7o),M(Ju,dt,null),e(ko,n7o),e(ko,Ke),M(XL,Ke,null),e(Ke,s7o),e(Ke,Rme),e(Rme,l7o),e(Ke,i7o),e(Ke,Ia),e(Ia,d7o),e(Ia,Pme),e(Pme,c7o),e(Ia,f7o),e(Ia,Bme),e(Bme,m7o),e(Ia,g7o),e(Ia,Nme),e(Nme,h7o),e(Ia,p7o),e(Ke,_7o),e(Ke,G),e(G,Yu),e(Yu,Ime),e(Ime,u7o),e(Yu,b7o),e(Yu,mG),e(mG,v7o),e(Yu,F7o),e(G,T7o),e(G,Ku),e(Ku,qme),e(qme,M7o),e(Ku,E7o),e(Ku,gG),e(gG,C7o),e(Ku,w7o),e(G,A7o),e(G,Zu),e(Zu,jme),e(jme,L7o),e(Zu,y7o),e(Zu,hG),e(hG,x7o),e(Zu,$7o),e(G,k7o),e(G,e2),e(e2,Dme),e(Dme,S7o),e(e2,R7o),e(e2,pG),e(pG,P7o),e(e2,B7o),e(G,N7o),e(G,o2),e(o2,Gme),e(Gme,I7o),e(o2,q7o),e(o2,_G),e(_G,j7o),e(o2,D7o),e(G,G7o),e(G,r2),e(r2,Ome),e(Ome,O7o),e(r2,V7o),e(r2,uG),e(uG,X7o),e(r2,z7o),e(G,Q7o),e(G,t2),e(t2,Vme),e(Vme,W7o),e(t2,H7o),e(t2,bG),e(bG,U7o),e(t2,J7o),e(G,Y7o),e(G,a2),e(a2,Xme),e(Xme,K7o),e(a2,Z7o),e(a2,vG),e(vG,eLo),e(a2,oLo),e(G,rLo),e(G,n2),e(n2,zme),e(zme,tLo),e(n2,aLo),e(n2,FG),e(FG,nLo),e(n2,sLo),e(G,lLo),e(G,s2),e(s2,Qme),e(Qme,iLo),e(s2,dLo),e(s2,TG),e(TG,cLo),e(s2,fLo),e(G,mLo),e(G,l2),e(l2,Wme),e(Wme,gLo),e(l2,hLo),e(l2,MG),e(MG,pLo),e(l2,_Lo),e(G,uLo),e(G,i2),e(i2,Hme),e(Hme,bLo),e(i2,vLo),e(i2,EG),e(EG,FLo),e(i2,TLo),e(G,MLo),e(G,d2),e(d2,Ume),e(Ume,ELo),e(d2,CLo),e(d2,CG),e(CG,wLo),e(d2,ALo),e(G,LLo),e(G,c2),e(c2,Jme),e(Jme,yLo),e(c2,xLo),e(c2,wG),e(wG,$Lo),e(c2,kLo),e(G,SLo),e(G,f2),e(f2,Yme),e(Yme,RLo),e(f2,PLo),e(f2,AG),e(AG,BLo),e(f2,NLo),e(G,ILo),e(G,m2),e(m2,Kme),e(Kme,qLo),e(m2,jLo),e(m2,LG),e(LG,DLo),e(m2,GLo),e(G,OLo),e(G,g2),e(g2,Zme),e(Zme,VLo),e(g2,XLo),e(g2,yG),e(yG,zLo),e(g2,QLo),e(G,WLo),e(G,h2),e(h2,ege),e(ege,HLo),e(h2,ULo),e(h2,xG),e(xG,JLo),e(h2,YLo),e(G,KLo),e(G,p2),e(p2,oge),e(oge,ZLo),e(p2,eyo),e(p2,$G),e($G,oyo),e(p2,ryo),e(G,tyo),e(G,_2),e(_2,rge),e(rge,ayo),e(_2,nyo),e(_2,kG),e(kG,syo),e(_2,lyo),e(G,iyo),e(G,u2),e(u2,tge),e(tge,dyo),e(u2,cyo),e(u2,SG),e(SG,fyo),e(u2,myo),e(G,gyo),e(G,b2),e(b2,age),e(age,hyo),e(b2,pyo),e(b2,RG),e(RG,_yo),e(b2,uyo),e(G,byo),e(G,v2),e(v2,nge),e(nge,vyo),e(v2,Fyo),e(v2,PG),e(PG,Tyo),e(v2,Myo),e(G,Eyo),e(G,F2),e(F2,sge),e(sge,Cyo),e(F2,wyo),e(F2,BG),e(BG,Ayo),e(F2,Lyo),e(G,yyo),e(G,T2),e(T2,lge),e(lge,xyo),e(T2,$yo),e(T2,NG),e(NG,kyo),e(T2,Syo),e(G,Ryo),e(G,M2),e(M2,ige),e(ige,Pyo),e(M2,Byo),e(M2,IG),e(IG,Nyo),e(M2,Iyo),e(G,qyo),e(G,E2),e(E2,dge),e(dge,jyo),e(E2,Dyo),e(E2,qG),e(qG,Gyo),e(E2,Oyo),e(G,Vyo),e(G,C2),e(C2,cge),e(cge,Xyo),e(C2,zyo),e(C2,jG),e(jG,Qyo),e(C2,Wyo),e(G,Hyo),e(G,w2),e(w2,fge),e(fge,Uyo),e(w2,Jyo),e(w2,DG),e(DG,Yyo),e(w2,Kyo),e(G,Zyo),e(G,A2),e(A2,mge),e(mge,e9o),e(A2,o9o),e(A2,GG),e(GG,r9o),e(A2,t9o),e(G,a9o),e(G,L2),e(L2,gge),e(gge,n9o),e(L2,s9o),e(L2,OG),e(OG,l9o),e(L2,i9o),e(G,d9o),e(G,y2),e(y2,hge),e(hge,c9o),e(y2,f9o),e(y2,VG),e(VG,m9o),e(y2,g9o),e(G,h9o),e(G,x2),e(x2,pge),e(pge,p9o),e(x2,_9o),e(x2,XG),e(XG,u9o),e(x2,b9o),e(G,v9o),e(G,$2),e($2,_ge),e(_ge,F9o),e($2,T9o),e($2,zG),e(zG,M9o),e($2,E9o),e(G,C9o),e(G,k2),e(k2,uge),e(uge,w9o),e(k2,A9o),e(k2,QG),e(QG,L9o),e(k2,y9o),e(G,x9o),e(G,S2),e(S2,bge),e(bge,$9o),e(S2,k9o),e(S2,WG),e(WG,S9o),e(S2,R9o),e(G,P9o),e(G,R2),e(R2,vge),e(vge,B9o),e(R2,N9o),e(R2,HG),e(HG,I9o),e(R2,q9o),e(G,j9o),e(G,P2),e(P2,Fge),e(Fge,D9o),e(P2,G9o),e(P2,UG),e(UG,O9o),e(P2,V9o),e(G,X9o),e(G,B2),e(B2,Tge),e(Tge,z9o),e(B2,Q9o),e(B2,JG),e(JG,W9o),e(B2,H9o),e(G,U9o),e(G,N2),e(N2,Mge),e(Mge,J9o),e(N2,Y9o),e(N2,YG),e(YG,K9o),e(N2,Z9o),e(G,exo),e(G,I2),e(I2,Ege),e(Ege,oxo),e(I2,rxo),e(I2,KG),e(KG,txo),e(I2,axo),e(G,nxo),e(G,q2),e(q2,Cge),e(Cge,sxo),e(q2,lxo),e(q2,ZG),e(ZG,ixo),e(q2,dxo),e(G,cxo),e(G,j2),e(j2,wge),e(wge,fxo),e(j2,mxo),e(j2,eO),e(eO,gxo),e(j2,hxo),e(G,pxo),e(G,D2),e(D2,Age),e(Age,_xo),e(D2,uxo),e(D2,oO),e(oO,bxo),e(D2,vxo),e(G,Fxo),e(G,G2),e(G2,Lge),e(Lge,Txo),e(G2,Mxo),e(G2,rO),e(rO,Exo),e(G2,Cxo),e(Ke,wxo),e(Ke,O2),e(O2,Axo),e(O2,yge),e(yge,Lxo),e(O2,yxo),e(O2,xge),e(xge,xxo),e(Ke,$xo),M(V2,Ke,null),b(f,BXe,u),b(f,Hi,u),e(Hi,X2),e(X2,$ge),M(zL,$ge,null),e(Hi,kxo),e(Hi,kge),e(kge,Sxo),b(f,NXe,u),b(f,So,u),M(QL,So,null),e(So,Rxo),e(So,Ui),e(Ui,Pxo),e(Ui,tO),e(tO,Bxo),e(Ui,Nxo),e(Ui,aO),e(aO,Ixo),e(Ui,qxo),e(So,jxo),e(So,WL),e(WL,Dxo),e(WL,Sge),e(Sge,Gxo),e(WL,Oxo),e(So,Vxo),e(So,ct),M(HL,ct,null),e(ct,Xxo),e(ct,Rge),e(Rge,zxo),e(ct,Qxo),e(ct,Ji),e(Ji,Wxo),e(Ji,Pge),e(Pge,Hxo),e(Ji,Uxo),e(Ji,nO),e(nO,Jxo),e(Ji,Yxo),e(ct,Kxo),M(z2,ct,null),e(So,Zxo),e(So,Ze),M(UL,Ze,null),e(Ze,e$o),e(Ze,Bge),e(Bge,o$o),e(Ze,r$o),e(Ze,qa),e(qa,t$o),e(qa,Nge),e(Nge,a$o),e(qa,n$o),e(qa,Ige),e(Ige,s$o),e(qa,l$o),e(qa,qge),e(qge,i$o),e(qa,d$o),e(Ze,c$o),e(Ze,z),e(z,Q2),e(Q2,jge),e(jge,f$o),e(Q2,m$o),e(Q2,sO),e(sO,g$o),e(Q2,h$o),e(z,p$o),e(z,W2),e(W2,Dge),e(Dge,_$o),e(W2,u$o),e(W2,lO),e(lO,b$o),e(W2,v$o),e(z,F$o),e(z,H2),e(H2,Gge),e(Gge,T$o),e(H2,M$o),e(H2,iO),e(iO,E$o),e(H2,C$o),e(z,w$o),e(z,U2),e(U2,Oge),e(Oge,A$o),e(U2,L$o),e(U2,dO),e(dO,y$o),e(U2,x$o),e(z,$$o),e(z,J2),e(J2,Vge),e(Vge,k$o),e(J2,S$o),e(J2,cO),e(cO,R$o),e(J2,P$o),e(z,B$o),e(z,Y2),e(Y2,Xge),e(Xge,N$o),e(Y2,I$o),e(Y2,fO),e(fO,q$o),e(Y2,j$o),e(z,D$o),e(z,K2),e(K2,zge),e(zge,G$o),e(K2,O$o),e(K2,mO),e(mO,V$o),e(K2,X$o),e(z,z$o),e(z,Z2),e(Z2,Qge),e(Qge,Q$o),e(Z2,W$o),e(Z2,gO),e(gO,H$o),e(Z2,U$o),e(z,J$o),e(z,e1),e(e1,Wge),e(Wge,Y$o),e(e1,K$o),e(e1,hO),e(hO,Z$o),e(e1,eko),e(z,oko),e(z,o1),e(o1,Hge),e(Hge,rko),e(o1,tko),e(o1,pO),e(pO,ako),e(o1,nko),e(z,sko),e(z,r1),e(r1,Uge),e(Uge,lko),e(r1,iko),e(r1,_O),e(_O,dko),e(r1,cko),e(z,fko),e(z,t1),e(t1,Jge),e(Jge,mko),e(t1,gko),e(t1,uO),e(uO,hko),e(t1,pko),e(z,_ko),e(z,a1),e(a1,Yge),e(Yge,uko),e(a1,bko),e(a1,bO),e(bO,vko),e(a1,Fko),e(z,Tko),e(z,n1),e(n1,Kge),e(Kge,Mko),e(n1,Eko),e(n1,vO),e(vO,Cko),e(n1,wko),e(z,Ako),e(z,s1),e(s1,Zge),e(Zge,Lko),e(s1,yko),e(s1,FO),e(FO,xko),e(s1,$ko),e(z,kko),e(z,l1),e(l1,ehe),e(ehe,Sko),e(l1,Rko),e(l1,TO),e(TO,Pko),e(l1,Bko),e(z,Nko),e(z,i1),e(i1,ohe),e(ohe,Iko),e(i1,qko),e(i1,MO),e(MO,jko),e(i1,Dko),e(z,Gko),e(z,d1),e(d1,rhe),e(rhe,Oko),e(d1,Vko),e(d1,EO),e(EO,Xko),e(d1,zko),e(z,Qko),e(z,c1),e(c1,the),e(the,Wko),e(c1,Hko),e(c1,CO),e(CO,Uko),e(c1,Jko),e(z,Yko),e(z,f1),e(f1,ahe),e(ahe,Kko),e(f1,Zko),e(f1,wO),e(wO,eSo),e(f1,oSo),e(z,rSo),e(z,m1),e(m1,nhe),e(nhe,tSo),e(m1,aSo),e(m1,AO),e(AO,nSo),e(m1,sSo),e(z,lSo),e(z,g1),e(g1,she),e(she,iSo),e(g1,dSo),e(g1,LO),e(LO,cSo),e(g1,fSo),e(z,mSo),e(z,h1),e(h1,lhe),e(lhe,gSo),e(h1,hSo),e(h1,yO),e(yO,pSo),e(h1,_So),e(z,uSo),e(z,p1),e(p1,ihe),e(ihe,bSo),e(p1,vSo),e(p1,xO),e(xO,FSo),e(p1,TSo),e(z,MSo),e(z,_1),e(_1,dhe),e(dhe,ESo),e(_1,CSo),e(_1,$O),e($O,wSo),e(_1,ASo),e(z,LSo),e(z,u1),e(u1,che),e(che,ySo),e(u1,xSo),e(u1,kO),e(kO,$So),e(u1,kSo),e(z,SSo),e(z,b1),e(b1,fhe),e(fhe,RSo),e(b1,PSo),e(b1,SO),e(SO,BSo),e(b1,NSo),e(z,ISo),e(z,v1),e(v1,mhe),e(mhe,qSo),e(v1,jSo),e(v1,RO),e(RO,DSo),e(v1,GSo),e(z,OSo),e(z,F1),e(F1,ghe),e(ghe,VSo),e(F1,XSo),e(F1,PO),e(PO,zSo),e(F1,QSo),e(z,WSo),e(z,T1),e(T1,hhe),e(hhe,HSo),e(T1,USo),e(T1,BO),e(BO,JSo),e(T1,YSo),e(z,KSo),e(z,M1),e(M1,phe),e(phe,ZSo),e(M1,eRo),e(M1,NO),e(NO,oRo),e(M1,rRo),e(z,tRo),e(z,E1),e(E1,_he),e(_he,aRo),e(E1,nRo),e(E1,IO),e(IO,sRo),e(E1,lRo),e(z,iRo),e(z,C1),e(C1,uhe),e(uhe,dRo),e(C1,cRo),e(C1,qO),e(qO,fRo),e(C1,mRo),e(z,gRo),e(z,w1),e(w1,bhe),e(bhe,hRo),e(w1,pRo),e(w1,jO),e(jO,_Ro),e(w1,uRo),e(z,bRo),e(z,A1),e(A1,vhe),e(vhe,vRo),e(A1,FRo),e(A1,DO),e(DO,TRo),e(A1,MRo),e(z,ERo),e(z,L1),e(L1,Fhe),e(Fhe,CRo),e(L1,wRo),e(L1,GO),e(GO,ARo),e(L1,LRo),e(z,yRo),e(z,y1),e(y1,The),e(The,xRo),e(y1,$Ro),e(y1,OO),e(OO,kRo),e(y1,SRo),e(z,RRo),e(z,x1),e(x1,Mhe),e(Mhe,PRo),e(x1,BRo),e(x1,VO),e(VO,NRo),e(x1,IRo),e(z,qRo),e(z,$1),e($1,Ehe),e(Ehe,jRo),e($1,DRo),e($1,XO),e(XO,GRo),e($1,ORo),e(z,VRo),e(z,k1),e(k1,Che),e(Che,XRo),e(k1,zRo),e(k1,zO),e(zO,QRo),e(k1,WRo),e(Ze,HRo),e(Ze,S1),e(S1,URo),e(S1,whe),e(whe,JRo),e(S1,YRo),e(S1,Ahe),e(Ahe,KRo),e(Ze,ZRo),M(R1,Ze,null),b(f,IXe,u),b(f,Yi,u),e(Yi,P1),e(P1,Lhe),M(JL,Lhe,null),e(Yi,ePo),e(Yi,yhe),e(yhe,oPo),b(f,qXe,u),b(f,Ro,u),M(YL,Ro,null),e(Ro,rPo),e(Ro,Ki),e(Ki,tPo),e(Ki,QO),e(QO,aPo),e(Ki,nPo),e(Ki,WO),e(WO,sPo),e(Ki,lPo),e(Ro,iPo),e(Ro,KL),e(KL,dPo),e(KL,xhe),e(xhe,cPo),e(KL,fPo),e(Ro,mPo),e(Ro,ft),M(ZL,ft,null),e(ft,gPo),e(ft,$he),e($he,hPo),e(ft,pPo),e(ft,Zi),e(Zi,_Po),e(Zi,khe),e(khe,uPo),e(Zi,bPo),e(Zi,HO),e(HO,vPo),e(Zi,FPo),e(ft,TPo),M(B1,ft,null),e(Ro,MPo),e(Ro,eo),M(ey,eo,null),e(eo,EPo),e(eo,She),e(She,CPo),e(eo,wPo),e(eo,ja),e(ja,APo),e(ja,Rhe),e(Rhe,LPo),e(ja,yPo),e(ja,Phe),e(Phe,xPo),e(ja,$Po),e(ja,Bhe),e(Bhe,kPo),e(ja,SPo),e(eo,RPo),e(eo,W),e(W,N1),e(N1,Nhe),e(Nhe,PPo),e(N1,BPo),e(N1,UO),e(UO,NPo),e(N1,IPo),e(W,qPo),e(W,I1),e(I1,Ihe),e(Ihe,jPo),e(I1,DPo),e(I1,JO),e(JO,GPo),e(I1,OPo),e(W,VPo),e(W,q1),e(q1,qhe),e(qhe,XPo),e(q1,zPo),e(q1,YO),e(YO,QPo),e(q1,WPo),e(W,HPo),e(W,j1),e(j1,jhe),e(jhe,UPo),e(j1,JPo),e(j1,KO),e(KO,YPo),e(j1,KPo),e(W,ZPo),e(W,D1),e(D1,Dhe),e(Dhe,eBo),e(D1,oBo),e(D1,ZO),e(ZO,rBo),e(D1,tBo),e(W,aBo),e(W,G1),e(G1,Ghe),e(Ghe,nBo),e(G1,sBo),e(G1,eV),e(eV,lBo),e(G1,iBo),e(W,dBo),e(W,O1),e(O1,Ohe),e(Ohe,cBo),e(O1,fBo),e(O1,oV),e(oV,mBo),e(O1,gBo),e(W,hBo),e(W,V1),e(V1,Vhe),e(Vhe,pBo),e(V1,_Bo),e(V1,rV),e(rV,uBo),e(V1,bBo),e(W,vBo),e(W,X1),e(X1,Xhe),e(Xhe,FBo),e(X1,TBo),e(X1,tV),e(tV,MBo),e(X1,EBo),e(W,CBo),e(W,z1),e(z1,zhe),e(zhe,wBo),e(z1,ABo),e(z1,aV),e(aV,LBo),e(z1,yBo),e(W,xBo),e(W,Q1),e(Q1,Qhe),e(Qhe,$Bo),e(Q1,kBo),e(Q1,nV),e(nV,SBo),e(Q1,RBo),e(W,PBo),e(W,W1),e(W1,Whe),e(Whe,BBo),e(W1,NBo),e(W1,sV),e(sV,IBo),e(W1,qBo),e(W,jBo),e(W,H1),e(H1,Hhe),e(Hhe,DBo),e(H1,GBo),e(H1,lV),e(lV,OBo),e(H1,VBo),e(W,XBo),e(W,U1),e(U1,Uhe),e(Uhe,zBo),e(U1,QBo),e(U1,iV),e(iV,WBo),e(U1,HBo),e(W,UBo),e(W,J1),e(J1,Jhe),e(Jhe,JBo),e(J1,YBo),e(J1,dV),e(dV,KBo),e(J1,ZBo),e(W,eNo),e(W,Y1),e(Y1,Yhe),e(Yhe,oNo),e(Y1,rNo),e(Y1,cV),e(cV,tNo),e(Y1,aNo),e(W,nNo),e(W,K1),e(K1,Khe),e(Khe,sNo),e(K1,lNo),e(K1,fV),e(fV,iNo),e(K1,dNo),e(W,cNo),e(W,Z1),e(Z1,Zhe),e(Zhe,fNo),e(Z1,mNo),e(Z1,mV),e(mV,gNo),e(Z1,hNo),e(W,pNo),e(W,eb),e(eb,epe),e(epe,_No),e(eb,uNo),e(eb,gV),e(gV,bNo),e(eb,vNo),e(W,FNo),e(W,ob),e(ob,ope),e(ope,TNo),e(ob,MNo),e(ob,hV),e(hV,ENo),e(ob,CNo),e(W,wNo),e(W,rb),e(rb,rpe),e(rpe,ANo),e(rb,LNo),e(rb,pV),e(pV,yNo),e(rb,xNo),e(W,$No),e(W,tb),e(tb,tpe),e(tpe,kNo),e(tb,SNo),e(tb,_V),e(_V,RNo),e(tb,PNo),e(W,BNo),e(W,ab),e(ab,ape),e(ape,NNo),e(ab,INo),e(ab,uV),e(uV,qNo),e(ab,jNo),e(W,DNo),e(W,nb),e(nb,npe),e(npe,GNo),e(nb,ONo),e(nb,bV),e(bV,VNo),e(nb,XNo),e(W,zNo),e(W,sb),e(sb,spe),e(spe,QNo),e(sb,WNo),e(sb,vV),e(vV,HNo),e(sb,UNo),e(W,JNo),e(W,lb),e(lb,lpe),e(lpe,YNo),e(lb,KNo),e(lb,FV),e(FV,ZNo),e(lb,eIo),e(W,oIo),e(W,ib),e(ib,ipe),e(ipe,rIo),e(ib,tIo),e(ib,TV),e(TV,aIo),e(ib,nIo),e(W,sIo),e(W,db),e(db,dpe),e(dpe,lIo),e(db,iIo),e(db,MV),e(MV,dIo),e(db,cIo),e(W,fIo),e(W,cb),e(cb,cpe),e(cpe,mIo),e(cb,gIo),e(cb,EV),e(EV,hIo),e(cb,pIo),e(W,_Io),e(W,fb),e(fb,fpe),e(fpe,uIo),e(fb,bIo),e(fb,CV),e(CV,vIo),e(fb,FIo),e(W,TIo),e(W,mb),e(mb,mpe),e(mpe,MIo),e(mb,EIo),e(mb,wV),e(wV,CIo),e(mb,wIo),e(W,AIo),e(W,gb),e(gb,gpe),e(gpe,LIo),e(gb,yIo),e(gb,AV),e(AV,xIo),e(gb,$Io),e(W,kIo),e(W,hb),e(hb,hpe),e(hpe,SIo),e(hb,RIo),e(hb,LV),e(LV,PIo),e(hb,BIo),e(W,NIo),e(W,pb),e(pb,ppe),e(ppe,IIo),e(pb,qIo),e(pb,_pe),e(_pe,jIo),e(pb,DIo),e(W,GIo),e(W,_b),e(_b,upe),e(upe,OIo),e(_b,VIo),e(_b,yV),e(yV,XIo),e(_b,zIo),e(W,QIo),e(W,ub),e(ub,bpe),e(bpe,WIo),e(ub,HIo),e(ub,xV),e(xV,UIo),e(ub,JIo),e(W,YIo),e(W,bb),e(bb,vpe),e(vpe,KIo),e(bb,ZIo),e(bb,$V),e($V,eqo),e(bb,oqo),e(W,rqo),e(W,vb),e(vb,Fpe),e(Fpe,tqo),e(vb,aqo),e(vb,kV),e(kV,nqo),e(vb,sqo),e(eo,lqo),e(eo,Fb),e(Fb,iqo),e(Fb,Tpe),e(Tpe,dqo),e(Fb,cqo),e(Fb,Mpe),e(Mpe,fqo),e(eo,mqo),M(Tb,eo,null),b(f,jXe,u),b(f,ed,u),e(ed,Mb),e(Mb,Epe),M(oy,Epe,null),e(ed,gqo),e(ed,Cpe),e(Cpe,hqo),b(f,DXe,u),b(f,Po,u),M(ry,Po,null),e(Po,pqo),e(Po,od),e(od,_qo),e(od,SV),e(SV,uqo),e(od,bqo),e(od,RV),e(RV,vqo),e(od,Fqo),e(Po,Tqo),e(Po,ty),e(ty,Mqo),e(ty,wpe),e(wpe,Eqo),e(ty,Cqo),e(Po,wqo),e(Po,mt),M(ay,mt,null),e(mt,Aqo),e(mt,Ape),e(Ape,Lqo),e(mt,yqo),e(mt,rd),e(rd,xqo),e(rd,Lpe),e(Lpe,$qo),e(rd,kqo),e(rd,PV),e(PV,Sqo),e(rd,Rqo),e(mt,Pqo),M(Eb,mt,null),e(Po,Bqo),e(Po,oo),M(ny,oo,null),e(oo,Nqo),e(oo,ype),e(ype,Iqo),e(oo,qqo),e(oo,Da),e(Da,jqo),e(Da,xpe),e(xpe,Dqo),e(Da,Gqo),e(Da,$pe),e($pe,Oqo),e(Da,Vqo),e(Da,kpe),e(kpe,Xqo),e(Da,zqo),e(oo,Qqo),e(oo,fe),e(fe,Cb),e(Cb,Spe),e(Spe,Wqo),e(Cb,Hqo),e(Cb,BV),e(BV,Uqo),e(Cb,Jqo),e(fe,Yqo),e(fe,wb),e(wb,Rpe),e(Rpe,Kqo),e(wb,Zqo),e(wb,NV),e(NV,ejo),e(wb,ojo),e(fe,rjo),e(fe,Ab),e(Ab,Ppe),e(Ppe,tjo),e(Ab,ajo),e(Ab,IV),e(IV,njo),e(Ab,sjo),e(fe,ljo),e(fe,Lb),e(Lb,Bpe),e(Bpe,ijo),e(Lb,djo),e(Lb,qV),e(qV,cjo),e(Lb,fjo),e(fe,mjo),e(fe,yb),e(yb,Npe),e(Npe,gjo),e(yb,hjo),e(yb,jV),e(jV,pjo),e(yb,_jo),e(fe,ujo),e(fe,xb),e(xb,Ipe),e(Ipe,bjo),e(xb,vjo),e(xb,DV),e(DV,Fjo),e(xb,Tjo),e(fe,Mjo),e(fe,$b),e($b,qpe),e(qpe,Ejo),e($b,Cjo),e($b,GV),e(GV,wjo),e($b,Ajo),e(fe,Ljo),e(fe,kb),e(kb,jpe),e(jpe,yjo),e(kb,xjo),e(kb,OV),e(OV,$jo),e(kb,kjo),e(fe,Sjo),e(fe,Sb),e(Sb,Dpe),e(Dpe,Rjo),e(Sb,Pjo),e(Sb,VV),e(VV,Bjo),e(Sb,Njo),e(fe,Ijo),e(fe,Rb),e(Rb,Gpe),e(Gpe,qjo),e(Rb,jjo),e(Rb,XV),e(XV,Djo),e(Rb,Gjo),e(fe,Ojo),e(fe,Pb),e(Pb,Ope),e(Ope,Vjo),e(Pb,Xjo),e(Pb,zV),e(zV,zjo),e(Pb,Qjo),e(fe,Wjo),e(fe,Bb),e(Bb,Vpe),e(Vpe,Hjo),e(Bb,Ujo),e(Bb,QV),e(QV,Jjo),e(Bb,Yjo),e(fe,Kjo),e(fe,Nb),e(Nb,Xpe),e(Xpe,Zjo),e(Nb,eDo),e(Nb,WV),e(WV,oDo),e(Nb,rDo),e(fe,tDo),e(fe,Ib),e(Ib,zpe),e(zpe,aDo),e(Ib,nDo),e(Ib,HV),e(HV,sDo),e(Ib,lDo),e(fe,iDo),e(fe,qb),e(qb,Qpe),e(Qpe,dDo),e(qb,cDo),e(qb,UV),e(UV,fDo),e(qb,mDo),e(fe,gDo),e(fe,jb),e(jb,Wpe),e(Wpe,hDo),e(jb,pDo),e(jb,JV),e(JV,_Do),e(jb,uDo),e(fe,bDo),e(fe,Db),e(Db,Hpe),e(Hpe,vDo),e(Db,FDo),e(Db,YV),e(YV,TDo),e(Db,MDo),e(fe,EDo),e(fe,Gb),e(Gb,Upe),e(Upe,CDo),e(Gb,wDo),e(Gb,KV),e(KV,ADo),e(Gb,LDo),e(fe,yDo),e(fe,Ob),e(Ob,Jpe),e(Jpe,xDo),e(Ob,$Do),e(Ob,ZV),e(ZV,kDo),e(Ob,SDo),e(oo,RDo),e(oo,Vb),e(Vb,PDo),e(Vb,Ype),e(Ype,BDo),e(Vb,NDo),e(Vb,Kpe),e(Kpe,IDo),e(oo,qDo),M(Xb,oo,null),b(f,GXe,u),b(f,td,u),e(td,zb),e(zb,Zpe),M(sy,Zpe,null),e(td,jDo),e(td,e_e),e(e_e,DDo),b(f,OXe,u),b(f,Bo,u),M(ly,Bo,null),e(Bo,GDo),e(Bo,ad),e(ad,ODo),e(ad,eX),e(eX,VDo),e(ad,XDo),e(ad,oX),e(oX,zDo),e(ad,QDo),e(Bo,WDo),e(Bo,iy),e(iy,HDo),e(iy,o_e),e(o_e,UDo),e(iy,JDo),e(Bo,YDo),e(Bo,gt),M(dy,gt,null),e(gt,KDo),e(gt,r_e),e(r_e,ZDo),e(gt,eGo),e(gt,nd),e(nd,oGo),e(nd,t_e),e(t_e,rGo),e(nd,tGo),e(nd,rX),e(rX,aGo),e(nd,nGo),e(gt,sGo),M(Qb,gt,null),e(Bo,lGo),e(Bo,ro),M(cy,ro,null),e(ro,iGo),e(ro,a_e),e(a_e,dGo),e(ro,cGo),e(ro,Ga),e(Ga,fGo),e(Ga,n_e),e(n_e,mGo),e(Ga,gGo),e(Ga,s_e),e(s_e,hGo),e(Ga,pGo),e(Ga,l_e),e(l_e,_Go),e(Ga,uGo),e(ro,bGo),e(ro,I),e(I,Wb),e(Wb,i_e),e(i_e,vGo),e(Wb,FGo),e(Wb,tX),e(tX,TGo),e(Wb,MGo),e(I,EGo),e(I,Hb),e(Hb,d_e),e(d_e,CGo),e(Hb,wGo),e(Hb,aX),e(aX,AGo),e(Hb,LGo),e(I,yGo),e(I,Ub),e(Ub,c_e),e(c_e,xGo),e(Ub,$Go),e(Ub,nX),e(nX,kGo),e(Ub,SGo),e(I,RGo),e(I,Jb),e(Jb,f_e),e(f_e,PGo),e(Jb,BGo),e(Jb,sX),e(sX,NGo),e(Jb,IGo),e(I,qGo),e(I,Yb),e(Yb,m_e),e(m_e,jGo),e(Yb,DGo),e(Yb,lX),e(lX,GGo),e(Yb,OGo),e(I,VGo),e(I,Kb),e(Kb,g_e),e(g_e,XGo),e(Kb,zGo),e(Kb,iX),e(iX,QGo),e(Kb,WGo),e(I,HGo),e(I,Zb),e(Zb,h_e),e(h_e,UGo),e(Zb,JGo),e(Zb,dX),e(dX,YGo),e(Zb,KGo),e(I,ZGo),e(I,ev),e(ev,p_e),e(p_e,eOo),e(ev,oOo),e(ev,cX),e(cX,rOo),e(ev,tOo),e(I,aOo),e(I,ov),e(ov,__e),e(__e,nOo),e(ov,sOo),e(ov,fX),e(fX,lOo),e(ov,iOo),e(I,dOo),e(I,rv),e(rv,u_e),e(u_e,cOo),e(rv,fOo),e(rv,mX),e(mX,mOo),e(rv,gOo),e(I,hOo),e(I,tv),e(tv,b_e),e(b_e,pOo),e(tv,_Oo),e(tv,gX),e(gX,uOo),e(tv,bOo),e(I,vOo),e(I,av),e(av,v_e),e(v_e,FOo),e(av,TOo),e(av,hX),e(hX,MOo),e(av,EOo),e(I,COo),e(I,nv),e(nv,F_e),e(F_e,wOo),e(nv,AOo),e(nv,pX),e(pX,LOo),e(nv,yOo),e(I,xOo),e(I,sv),e(sv,T_e),e(T_e,$Oo),e(sv,kOo),e(sv,_X),e(_X,SOo),e(sv,ROo),e(I,POo),e(I,lv),e(lv,M_e),e(M_e,BOo),e(lv,NOo),e(lv,uX),e(uX,IOo),e(lv,qOo),e(I,jOo),e(I,iv),e(iv,E_e),e(E_e,DOo),e(iv,GOo),e(iv,bX),e(bX,OOo),e(iv,VOo),e(I,XOo),e(I,dv),e(dv,C_e),e(C_e,zOo),e(dv,QOo),e(dv,vX),e(vX,WOo),e(dv,HOo),e(I,UOo),e(I,cv),e(cv,w_e),e(w_e,JOo),e(cv,YOo),e(cv,FX),e(FX,KOo),e(cv,ZOo),e(I,eVo),e(I,fv),e(fv,A_e),e(A_e,oVo),e(fv,rVo),e(fv,TX),e(TX,tVo),e(fv,aVo),e(I,nVo),e(I,mv),e(mv,L_e),e(L_e,sVo),e(mv,lVo),e(mv,MX),e(MX,iVo),e(mv,dVo),e(I,cVo),e(I,gv),e(gv,y_e),e(y_e,fVo),e(gv,mVo),e(gv,EX),e(EX,gVo),e(gv,hVo),e(I,pVo),e(I,hv),e(hv,x_e),e(x_e,_Vo),e(hv,uVo),e(hv,CX),e(CX,bVo),e(hv,vVo),e(I,FVo),e(I,pv),e(pv,$_e),e($_e,TVo),e(pv,MVo),e(pv,wX),e(wX,EVo),e(pv,CVo),e(I,wVo),e(I,_v),e(_v,k_e),e(k_e,AVo),e(_v,LVo),e(_v,AX),e(AX,yVo),e(_v,xVo),e(I,$Vo),e(I,uv),e(uv,S_e),e(S_e,kVo),e(uv,SVo),e(uv,LX),e(LX,RVo),e(uv,PVo),e(I,BVo),e(I,bv),e(bv,R_e),e(R_e,NVo),e(bv,IVo),e(bv,yX),e(yX,qVo),e(bv,jVo),e(I,DVo),e(I,vv),e(vv,P_e),e(P_e,GVo),e(vv,OVo),e(vv,xX),e(xX,VVo),e(vv,XVo),e(I,zVo),e(I,Fv),e(Fv,B_e),e(B_e,QVo),e(Fv,WVo),e(Fv,$X),e($X,HVo),e(Fv,UVo),e(I,JVo),e(I,Tv),e(Tv,N_e),e(N_e,YVo),e(Tv,KVo),e(Tv,kX),e(kX,ZVo),e(Tv,eXo),e(I,oXo),e(I,Mv),e(Mv,I_e),e(I_e,rXo),e(Mv,tXo),e(Mv,SX),e(SX,aXo),e(Mv,nXo),e(I,sXo),e(I,Ev),e(Ev,q_e),e(q_e,lXo),e(Ev,iXo),e(Ev,RX),e(RX,dXo),e(Ev,cXo),e(I,fXo),e(I,Cv),e(Cv,j_e),e(j_e,mXo),e(Cv,gXo),e(Cv,PX),e(PX,hXo),e(Cv,pXo),e(I,_Xo),e(I,wv),e(wv,D_e),e(D_e,uXo),e(wv,bXo),e(wv,BX),e(BX,vXo),e(wv,FXo),e(I,TXo),e(I,Av),e(Av,G_e),e(G_e,MXo),e(Av,EXo),e(Av,NX),e(NX,CXo),e(Av,wXo),e(I,AXo),e(I,Lv),e(Lv,O_e),e(O_e,LXo),e(Lv,yXo),e(Lv,IX),e(IX,xXo),e(Lv,$Xo),e(I,kXo),e(I,yv),e(yv,V_e),e(V_e,SXo),e(yv,RXo),e(yv,qX),e(qX,PXo),e(yv,BXo),e(I,NXo),e(I,xv),e(xv,X_e),e(X_e,IXo),e(xv,qXo),e(xv,jX),e(jX,jXo),e(xv,DXo),e(I,GXo),e(I,$v),e($v,z_e),e(z_e,OXo),e($v,VXo),e($v,DX),e(DX,XXo),e($v,zXo),e(I,QXo),e(I,kv),e(kv,Q_e),e(Q_e,WXo),e(kv,HXo),e(kv,GX),e(GX,UXo),e(kv,JXo),e(I,YXo),e(I,Sv),e(Sv,W_e),e(W_e,KXo),e(Sv,ZXo),e(Sv,OX),e(OX,ezo),e(Sv,ozo),e(I,rzo),e(I,Rv),e(Rv,H_e),e(H_e,tzo),e(Rv,azo),e(Rv,VX),e(VX,nzo),e(Rv,szo),e(I,lzo),e(I,Pv),e(Pv,U_e),e(U_e,izo),e(Pv,dzo),e(Pv,XX),e(XX,czo),e(Pv,fzo),e(I,mzo),e(I,Bv),e(Bv,J_e),e(J_e,gzo),e(Bv,hzo),e(Bv,zX),e(zX,pzo),e(Bv,_zo),e(I,uzo),e(I,Nv),e(Nv,Y_e),e(Y_e,bzo),e(Nv,vzo),e(Nv,QX),e(QX,Fzo),e(Nv,Tzo),e(I,Mzo),e(I,Iv),e(Iv,K_e),e(K_e,Ezo),e(Iv,Czo),e(Iv,WX),e(WX,wzo),e(Iv,Azo),e(I,Lzo),e(I,qv),e(qv,Z_e),e(Z_e,yzo),e(qv,xzo),e(qv,HX),e(HX,$zo),e(qv,kzo),e(I,Szo),e(I,jv),e(jv,eue),e(eue,Rzo),e(jv,Pzo),e(jv,UX),e(UX,Bzo),e(jv,Nzo),e(I,Izo),e(I,Dv),e(Dv,oue),e(oue,qzo),e(Dv,jzo),e(Dv,JX),e(JX,Dzo),e(Dv,Gzo),e(I,Ozo),e(I,Gv),e(Gv,rue),e(rue,Vzo),e(Gv,Xzo),e(Gv,YX),e(YX,zzo),e(Gv,Qzo),e(I,Wzo),e(I,Ov),e(Ov,tue),e(tue,Hzo),e(Ov,Uzo),e(Ov,KX),e(KX,Jzo),e(Ov,Yzo),e(ro,Kzo),e(ro,Vv),e(Vv,Zzo),e(Vv,aue),e(aue,eQo),e(Vv,oQo),e(Vv,nue),e(nue,rQo),e(ro,tQo),M(Xv,ro,null),b(f,VXe,u),b(f,sd,u),e(sd,zv),e(zv,sue),M(fy,sue,null),e(sd,aQo),e(sd,lue),e(lue,nQo),b(f,XXe,u),b(f,No,u),M(my,No,null),e(No,sQo),e(No,ld),e(ld,lQo),e(ld,ZX),e(ZX,iQo),e(ld,dQo),e(ld,ez),e(ez,cQo),e(ld,fQo),e(No,mQo),e(No,gy),e(gy,gQo),e(gy,iue),e(iue,hQo),e(gy,pQo),e(No,_Qo),e(No,ht),M(hy,ht,null),e(ht,uQo),e(ht,due),e(due,bQo),e(ht,vQo),e(ht,id),e(id,FQo),e(id,cue),e(cue,TQo),e(id,MQo),e(id,oz),e(oz,EQo),e(id,CQo),e(ht,wQo),M(Qv,ht,null),e(No,AQo),e(No,to),M(py,to,null),e(to,LQo),e(to,fue),e(fue,yQo),e(to,xQo),e(to,Oa),e(Oa,$Qo),e(Oa,mue),e(mue,kQo),e(Oa,SQo),e(Oa,gue),e(gue,RQo),e(Oa,PQo),e(Oa,hue),e(hue,BQo),e(Oa,NQo),e(to,IQo),e(to,Z),e(Z,Wv),e(Wv,pue),e(pue,qQo),e(Wv,jQo),e(Wv,rz),e(rz,DQo),e(Wv,GQo),e(Z,OQo),e(Z,Hv),e(Hv,_ue),e(_ue,VQo),e(Hv,XQo),e(Hv,tz),e(tz,zQo),e(Hv,QQo),e(Z,WQo),e(Z,Uv),e(Uv,uue),e(uue,HQo),e(Uv,UQo),e(Uv,az),e(az,JQo),e(Uv,YQo),e(Z,KQo),e(Z,Jv),e(Jv,bue),e(bue,ZQo),e(Jv,eWo),e(Jv,nz),e(nz,oWo),e(Jv,rWo),e(Z,tWo),e(Z,Yv),e(Yv,vue),e(vue,aWo),e(Yv,nWo),e(Yv,sz),e(sz,sWo),e(Yv,lWo),e(Z,iWo),e(Z,Kv),e(Kv,Fue),e(Fue,dWo),e(Kv,cWo),e(Kv,lz),e(lz,fWo),e(Kv,mWo),e(Z,gWo),e(Z,Zv),e(Zv,Tue),e(Tue,hWo),e(Zv,pWo),e(Zv,iz),e(iz,_Wo),e(Zv,uWo),e(Z,bWo),e(Z,e0),e(e0,Mue),e(Mue,vWo),e(e0,FWo),e(e0,dz),e(dz,TWo),e(e0,MWo),e(Z,EWo),e(Z,o0),e(o0,Eue),e(Eue,CWo),e(o0,wWo),e(o0,cz),e(cz,AWo),e(o0,LWo),e(Z,yWo),e(Z,r0),e(r0,Cue),e(Cue,xWo),e(r0,$Wo),e(r0,fz),e(fz,kWo),e(r0,SWo),e(Z,RWo),e(Z,t0),e(t0,wue),e(wue,PWo),e(t0,BWo),e(t0,mz),e(mz,NWo),e(t0,IWo),e(Z,qWo),e(Z,a0),e(a0,Aue),e(Aue,jWo),e(a0,DWo),e(a0,gz),e(gz,GWo),e(a0,OWo),e(Z,VWo),e(Z,n0),e(n0,Lue),e(Lue,XWo),e(n0,zWo),e(n0,hz),e(hz,QWo),e(n0,WWo),e(Z,HWo),e(Z,s0),e(s0,yue),e(yue,UWo),e(s0,JWo),e(s0,pz),e(pz,YWo),e(s0,KWo),e(Z,ZWo),e(Z,l0),e(l0,xue),e(xue,eHo),e(l0,oHo),e(l0,_z),e(_z,rHo),e(l0,tHo),e(Z,aHo),e(Z,i0),e(i0,$ue),e($ue,nHo),e(i0,sHo),e(i0,uz),e(uz,lHo),e(i0,iHo),e(Z,dHo),e(Z,d0),e(d0,kue),e(kue,cHo),e(d0,fHo),e(d0,bz),e(bz,mHo),e(d0,gHo),e(Z,hHo),e(Z,c0),e(c0,Sue),e(Sue,pHo),e(c0,_Ho),e(c0,vz),e(vz,uHo),e(c0,bHo),e(Z,vHo),e(Z,f0),e(f0,Rue),e(Rue,FHo),e(f0,THo),e(f0,Fz),e(Fz,MHo),e(f0,EHo),e(Z,CHo),e(Z,m0),e(m0,Pue),e(Pue,wHo),e(m0,AHo),e(m0,Tz),e(Tz,LHo),e(m0,yHo),e(Z,xHo),e(Z,g0),e(g0,Bue),e(Bue,$Ho),e(g0,kHo),e(g0,Mz),e(Mz,SHo),e(g0,RHo),e(Z,PHo),e(Z,h0),e(h0,Nue),e(Nue,BHo),e(h0,NHo),e(h0,Ez),e(Ez,IHo),e(h0,qHo),e(Z,jHo),e(Z,p0),e(p0,Iue),e(Iue,DHo),e(p0,GHo),e(p0,Cz),e(Cz,OHo),e(p0,VHo),e(Z,XHo),e(Z,_0),e(_0,que),e(que,zHo),e(_0,QHo),e(_0,wz),e(wz,WHo),e(_0,HHo),e(Z,UHo),e(Z,u0),e(u0,jue),e(jue,JHo),e(u0,YHo),e(u0,Az),e(Az,KHo),e(u0,ZHo),e(Z,eUo),e(Z,b0),e(b0,Due),e(Due,oUo),e(b0,rUo),e(b0,Lz),e(Lz,tUo),e(b0,aUo),e(Z,nUo),e(Z,v0),e(v0,Gue),e(Gue,sUo),e(v0,lUo),e(v0,yz),e(yz,iUo),e(v0,dUo),e(Z,cUo),e(Z,F0),e(F0,Oue),e(Oue,fUo),e(F0,mUo),e(F0,xz),e(xz,gUo),e(F0,hUo),e(Z,pUo),e(Z,T0),e(T0,Vue),e(Vue,_Uo),e(T0,uUo),e(T0,$z),e($z,bUo),e(T0,vUo),e(Z,FUo),e(Z,M0),e(M0,Xue),e(Xue,TUo),e(M0,MUo),e(M0,kz),e(kz,EUo),e(M0,CUo),e(to,wUo),e(to,E0),e(E0,AUo),e(E0,zue),e(zue,LUo),e(E0,yUo),e(E0,Que),e(Que,xUo),e(to,$Uo),M(C0,to,null),b(f,zXe,u),b(f,dd,u),e(dd,w0),e(w0,Wue),M(_y,Wue,null),e(dd,kUo),e(dd,Hue),e(Hue,SUo),b(f,QXe,u),b(f,Io,u),M(uy,Io,null),e(Io,RUo),e(Io,cd),e(cd,PUo),e(cd,Sz),e(Sz,BUo),e(cd,NUo),e(cd,Rz),e(Rz,IUo),e(cd,qUo),e(Io,jUo),e(Io,by),e(by,DUo),e(by,Uue),e(Uue,GUo),e(by,OUo),e(Io,VUo),e(Io,pt),M(vy,pt,null),e(pt,XUo),e(pt,Jue),e(Jue,zUo),e(pt,QUo),e(pt,fd),e(fd,WUo),e(fd,Yue),e(Yue,HUo),e(fd,UUo),e(fd,Pz),e(Pz,JUo),e(fd,YUo),e(pt,KUo),M(A0,pt,null),e(Io,ZUo),e(Io,ao),M(Fy,ao,null),e(ao,eJo),e(ao,Kue),e(Kue,oJo),e(ao,rJo),e(ao,Va),e(Va,tJo),e(Va,Zue),e(Zue,aJo),e(Va,nJo),e(Va,e2e),e(e2e,sJo),e(Va,lJo),e(Va,o2e),e(o2e,iJo),e(Va,dJo),e(ao,cJo),e(ao,qo),e(qo,L0),e(L0,r2e),e(r2e,fJo),e(L0,mJo),e(L0,Bz),e(Bz,gJo),e(L0,hJo),e(qo,pJo),e(qo,y0),e(y0,t2e),e(t2e,_Jo),e(y0,uJo),e(y0,Nz),e(Nz,bJo),e(y0,vJo),e(qo,FJo),e(qo,x0),e(x0,a2e),e(a2e,TJo),e(x0,MJo),e(x0,Iz),e(Iz,EJo),e(x0,CJo),e(qo,wJo),e(qo,$0),e($0,n2e),e(n2e,AJo),e($0,LJo),e($0,qz),e(qz,yJo),e($0,xJo),e(qo,$Jo),e(qo,k0),e(k0,s2e),e(s2e,kJo),e(k0,SJo),e(k0,jz),e(jz,RJo),e(k0,PJo),e(qo,BJo),e(qo,S0),e(S0,l2e),e(l2e,NJo),e(S0,IJo),e(S0,Dz),e(Dz,qJo),e(S0,jJo),e(ao,DJo),e(ao,R0),e(R0,GJo),e(R0,i2e),e(i2e,OJo),e(R0,VJo),e(R0,d2e),e(d2e,XJo),e(ao,zJo),M(P0,ao,null),b(f,WXe,u),b(f,md,u),e(md,B0),e(B0,c2e),M(Ty,c2e,null),e(md,QJo),e(md,f2e),e(f2e,WJo),b(f,HXe,u),b(f,jo,u),M(My,jo,null),e(jo,HJo),e(jo,gd),e(gd,UJo),e(gd,Gz),e(Gz,JJo),e(gd,YJo),e(gd,Oz),e(Oz,KJo),e(gd,ZJo),e(jo,eYo),e(jo,Ey),e(Ey,oYo),e(Ey,m2e),e(m2e,rYo),e(Ey,tYo),e(jo,aYo),e(jo,_t),M(Cy,_t,null),e(_t,nYo),e(_t,g2e),e(g2e,sYo),e(_t,lYo),e(_t,hd),e(hd,iYo),e(hd,h2e),e(h2e,dYo),e(hd,cYo),e(hd,Vz),e(Vz,fYo),e(hd,mYo),e(_t,gYo),M(N0,_t,null),e(jo,hYo),e(jo,no),M(wy,no,null),e(no,pYo),e(no,p2e),e(p2e,_Yo),e(no,uYo),e(no,Xa),e(Xa,bYo),e(Xa,_2e),e(_2e,vYo),e(Xa,FYo),e(Xa,u2e),e(u2e,TYo),e(Xa,MYo),e(Xa,b2e),e(b2e,EYo),e(Xa,CYo),e(no,wYo),e(no,U),e(U,I0),e(I0,v2e),e(v2e,AYo),e(I0,LYo),e(I0,Xz),e(Xz,yYo),e(I0,xYo),e(U,$Yo),e(U,q0),e(q0,F2e),e(F2e,kYo),e(q0,SYo),e(q0,zz),e(zz,RYo),e(q0,PYo),e(U,BYo),e(U,j0),e(j0,T2e),e(T2e,NYo),e(j0,IYo),e(j0,Qz),e(Qz,qYo),e(j0,jYo),e(U,DYo),e(U,D0),e(D0,M2e),e(M2e,GYo),e(D0,OYo),e(D0,Wz),e(Wz,VYo),e(D0,XYo),e(U,zYo),e(U,G0),e(G0,E2e),e(E2e,QYo),e(G0,WYo),e(G0,Hz),e(Hz,HYo),e(G0,UYo),e(U,JYo),e(U,O0),e(O0,C2e),e(C2e,YYo),e(O0,KYo),e(O0,Uz),e(Uz,ZYo),e(O0,eKo),e(U,oKo),e(U,V0),e(V0,w2e),e(w2e,rKo),e(V0,tKo),e(V0,Jz),e(Jz,aKo),e(V0,nKo),e(U,sKo),e(U,X0),e(X0,A2e),e(A2e,lKo),e(X0,iKo),e(X0,Yz),e(Yz,dKo),e(X0,cKo),e(U,fKo),e(U,z0),e(z0,L2e),e(L2e,mKo),e(z0,gKo),e(z0,Kz),e(Kz,hKo),e(z0,pKo),e(U,_Ko),e(U,Q0),e(Q0,y2e),e(y2e,uKo),e(Q0,bKo),e(Q0,Zz),e(Zz,vKo),e(Q0,FKo),e(U,TKo),e(U,W0),e(W0,x2e),e(x2e,MKo),e(W0,EKo),e(W0,eQ),e(eQ,CKo),e(W0,wKo),e(U,AKo),e(U,H0),e(H0,$2e),e($2e,LKo),e(H0,yKo),e(H0,oQ),e(oQ,xKo),e(H0,$Ko),e(U,kKo),e(U,U0),e(U0,k2e),e(k2e,SKo),e(U0,RKo),e(U0,rQ),e(rQ,PKo),e(U0,BKo),e(U,NKo),e(U,J0),e(J0,S2e),e(S2e,IKo),e(J0,qKo),e(J0,tQ),e(tQ,jKo),e(J0,DKo),e(U,GKo),e(U,Y0),e(Y0,R2e),e(R2e,OKo),e(Y0,VKo),e(Y0,aQ),e(aQ,XKo),e(Y0,zKo),e(U,QKo),e(U,K0),e(K0,P2e),e(P2e,WKo),e(K0,HKo),e(K0,nQ),e(nQ,UKo),e(K0,JKo),e(U,YKo),e(U,Z0),e(Z0,B2e),e(B2e,KKo),e(Z0,ZKo),e(Z0,sQ),e(sQ,eZo),e(Z0,oZo),e(U,rZo),e(U,eF),e(eF,N2e),e(N2e,tZo),e(eF,aZo),e(eF,lQ),e(lQ,nZo),e(eF,sZo),e(U,lZo),e(U,oF),e(oF,I2e),e(I2e,iZo),e(oF,dZo),e(oF,iQ),e(iQ,cZo),e(oF,fZo),e(U,mZo),e(U,rF),e(rF,q2e),e(q2e,gZo),e(rF,hZo),e(rF,dQ),e(dQ,pZo),e(rF,_Zo),e(U,uZo),e(U,tF),e(tF,j2e),e(j2e,bZo),e(tF,vZo),e(tF,cQ),e(cQ,FZo),e(tF,TZo),e(U,MZo),e(U,aF),e(aF,D2e),e(D2e,EZo),e(aF,CZo),e(aF,fQ),e(fQ,wZo),e(aF,AZo),e(U,LZo),e(U,nF),e(nF,G2e),e(G2e,yZo),e(nF,xZo),e(nF,mQ),e(mQ,$Zo),e(nF,kZo),e(U,SZo),e(U,sF),e(sF,O2e),e(O2e,RZo),e(sF,PZo),e(sF,gQ),e(gQ,BZo),e(sF,NZo),e(U,IZo),e(U,lF),e(lF,V2e),e(V2e,qZo),e(lF,jZo),e(lF,hQ),e(hQ,DZo),e(lF,GZo),e(U,OZo),e(U,iF),e(iF,X2e),e(X2e,VZo),e(iF,XZo),e(iF,pQ),e(pQ,zZo),e(iF,QZo),e(U,WZo),e(U,dF),e(dF,z2e),e(z2e,HZo),e(dF,UZo),e(dF,_Q),e(_Q,JZo),e(dF,YZo),e(U,KZo),e(U,cF),e(cF,Q2e),e(Q2e,ZZo),e(cF,eer),e(cF,uQ),e(uQ,oer),e(cF,rer),e(U,ter),e(U,fF),e(fF,W2e),e(W2e,aer),e(fF,ner),e(fF,bQ),e(bQ,ser),e(fF,ler),e(U,ier),e(U,mF),e(mF,H2e),e(H2e,der),e(mF,cer),e(mF,vQ),e(vQ,fer),e(mF,mer),e(U,ger),e(U,gF),e(gF,U2e),e(U2e,her),e(gF,per),e(gF,FQ),e(FQ,_er),e(gF,uer),e(U,ber),e(U,hF),e(hF,J2e),e(J2e,ver),e(hF,Fer),e(hF,TQ),e(TQ,Ter),e(hF,Mer),e(U,Eer),e(U,pF),e(pF,Y2e),e(Y2e,Cer),e(pF,wer),e(pF,MQ),e(MQ,Aer),e(pF,Ler),e(U,yer),e(U,_F),e(_F,K2e),e(K2e,xer),e(_F,$er),e(_F,EQ),e(EQ,ker),e(_F,Ser),e(U,Rer),e(U,uF),e(uF,Z2e),e(Z2e,Per),e(uF,Ber),e(uF,CQ),e(CQ,Ner),e(uF,Ier),e(U,qer),e(U,bF),e(bF,e1e),e(e1e,jer),e(bF,Der),e(bF,wQ),e(wQ,Ger),e(bF,Oer),e(no,Ver),e(no,vF),e(vF,Xer),e(vF,o1e),e(o1e,zer),e(vF,Qer),e(vF,r1e),e(r1e,Wer),e(no,Her),M(FF,no,null),b(f,UXe,u),b(f,pd,u),e(pd,TF),e(TF,t1e),M(Ay,t1e,null),e(pd,Uer),e(pd,a1e),e(a1e,Jer),b(f,JXe,u),b(f,Do,u),M(Ly,Do,null),e(Do,Yer),e(Do,_d),e(_d,Ker),e(_d,AQ),e(AQ,Zer),e(_d,eor),e(_d,LQ),e(LQ,oor),e(_d,ror),e(Do,tor),e(Do,yy),e(yy,aor),e(yy,n1e),e(n1e,nor),e(yy,sor),e(Do,lor),e(Do,ut),M(xy,ut,null),e(ut,ior),e(ut,s1e),e(s1e,dor),e(ut,cor),e(ut,ud),e(ud,mor),e(ud,l1e),e(l1e,gor),e(ud,hor),e(ud,yQ),e(yQ,por),e(ud,_or),e(ut,uor),M(MF,ut,null),e(Do,bor),e(Do,so),M($y,so,null),e(so,vor),e(so,i1e),e(i1e,For),e(so,Tor),e(so,za),e(za,Mor),e(za,d1e),e(d1e,Eor),e(za,Cor),e(za,c1e),e(c1e,wor),e(za,Aor),e(za,f1e),e(f1e,Lor),e(za,yor),e(so,xor),e(so,V),e(V,EF),e(EF,m1e),e(m1e,$or),e(EF,kor),e(EF,xQ),e(xQ,Sor),e(EF,Ror),e(V,Por),e(V,CF),e(CF,g1e),e(g1e,Bor),e(CF,Nor),e(CF,$Q),e($Q,Ior),e(CF,qor),e(V,jor),e(V,wF),e(wF,h1e),e(h1e,Dor),e(wF,Gor),e(wF,kQ),e(kQ,Oor),e(wF,Vor),e(V,Xor),e(V,AF),e(AF,p1e),e(p1e,zor),e(AF,Qor),e(AF,SQ),e(SQ,Wor),e(AF,Hor),e(V,Uor),e(V,LF),e(LF,_1e),e(_1e,Jor),e(LF,Yor),e(LF,RQ),e(RQ,Kor),e(LF,Zor),e(V,err),e(V,yF),e(yF,u1e),e(u1e,orr),e(yF,rrr),e(yF,PQ),e(PQ,trr),e(yF,arr),e(V,nrr),e(V,xF),e(xF,b1e),e(b1e,srr),e(xF,lrr),e(xF,BQ),e(BQ,irr),e(xF,drr),e(V,crr),e(V,$F),e($F,v1e),e(v1e,frr),e($F,mrr),e($F,NQ),e(NQ,grr),e($F,hrr),e(V,prr),e(V,kF),e(kF,F1e),e(F1e,_rr),e(kF,urr),e(kF,IQ),e(IQ,brr),e(kF,vrr),e(V,Frr),e(V,SF),e(SF,T1e),e(T1e,Trr),e(SF,Mrr),e(SF,qQ),e(qQ,Err),e(SF,Crr),e(V,wrr),e(V,RF),e(RF,M1e),e(M1e,Arr),e(RF,Lrr),e(RF,jQ),e(jQ,yrr),e(RF,xrr),e(V,$rr),e(V,PF),e(PF,E1e),e(E1e,krr),e(PF,Srr),e(PF,DQ),e(DQ,Rrr),e(PF,Prr),e(V,Brr),e(V,BF),e(BF,C1e),e(C1e,Nrr),e(BF,Irr),e(BF,GQ),e(GQ,qrr),e(BF,jrr),e(V,Drr),e(V,NF),e(NF,w1e),e(w1e,Grr),e(NF,Orr),e(NF,OQ),e(OQ,Vrr),e(NF,Xrr),e(V,zrr),e(V,IF),e(IF,A1e),e(A1e,Qrr),e(IF,Wrr),e(IF,VQ),e(VQ,Hrr),e(IF,Urr),e(V,Jrr),e(V,qF),e(qF,L1e),e(L1e,Yrr),e(qF,Krr),e(qF,XQ),e(XQ,Zrr),e(qF,etr),e(V,otr),e(V,jF),e(jF,y1e),e(y1e,rtr),e(jF,ttr),e(jF,zQ),e(zQ,atr),e(jF,ntr),e(V,str),e(V,DF),e(DF,x1e),e(x1e,ltr),e(DF,itr),e(DF,QQ),e(QQ,dtr),e(DF,ctr),e(V,ftr),e(V,GF),e(GF,$1e),e($1e,mtr),e(GF,gtr),e(GF,WQ),e(WQ,htr),e(GF,ptr),e(V,_tr),e(V,OF),e(OF,k1e),e(k1e,utr),e(OF,btr),e(OF,HQ),e(HQ,vtr),e(OF,Ftr),e(V,Ttr),e(V,VF),e(VF,S1e),e(S1e,Mtr),e(VF,Etr),e(VF,UQ),e(UQ,Ctr),e(VF,wtr),e(V,Atr),e(V,XF),e(XF,R1e),e(R1e,Ltr),e(XF,ytr),e(XF,JQ),e(JQ,xtr),e(XF,$tr),e(V,ktr),e(V,zF),e(zF,P1e),e(P1e,Str),e(zF,Rtr),e(zF,YQ),e(YQ,Ptr),e(zF,Btr),e(V,Ntr),e(V,QF),e(QF,B1e),e(B1e,Itr),e(QF,qtr),e(QF,KQ),e(KQ,jtr),e(QF,Dtr),e(V,Gtr),e(V,WF),e(WF,N1e),e(N1e,Otr),e(WF,Vtr),e(WF,ZQ),e(ZQ,Xtr),e(WF,ztr),e(V,Qtr),e(V,HF),e(HF,I1e),e(I1e,Wtr),e(HF,Htr),e(HF,eW),e(eW,Utr),e(HF,Jtr),e(V,Ytr),e(V,UF),e(UF,q1e),e(q1e,Ktr),e(UF,Ztr),e(UF,oW),e(oW,ear),e(UF,oar),e(V,rar),e(V,JF),e(JF,j1e),e(j1e,tar),e(JF,aar),e(JF,rW),e(rW,nar),e(JF,sar),e(V,lar),e(V,YF),e(YF,D1e),e(D1e,iar),e(YF,dar),e(YF,tW),e(tW,car),e(YF,far),e(V,mar),e(V,KF),e(KF,G1e),e(G1e,gar),e(KF,har),e(KF,aW),e(aW,par),e(KF,_ar),e(V,uar),e(V,ZF),e(ZF,O1e),e(O1e,bar),e(ZF,Far),e(ZF,nW),e(nW,Tar),e(ZF,Mar),e(V,Ear),e(V,eT),e(eT,V1e),e(V1e,Car),e(eT,war),e(eT,sW),e(sW,Aar),e(eT,Lar),e(V,yar),e(V,oT),e(oT,X1e),e(X1e,xar),e(oT,$ar),e(oT,lW),e(lW,kar),e(oT,Sar),e(V,Rar),e(V,rT),e(rT,z1e),e(z1e,Par),e(rT,Bar),e(rT,iW),e(iW,Nar),e(rT,Iar),e(V,qar),e(V,tT),e(tT,Q1e),e(Q1e,jar),e(tT,Dar),e(tT,dW),e(dW,Gar),e(tT,Oar),e(V,Var),e(V,aT),e(aT,W1e),e(W1e,Xar),e(aT,zar),e(aT,cW),e(cW,Qar),e(aT,War),e(V,Har),e(V,nT),e(nT,H1e),e(H1e,Uar),e(nT,Jar),e(nT,fW),e(fW,Yar),e(nT,Kar),e(V,Zar),e(V,sT),e(sT,U1e),e(U1e,enr),e(sT,onr),e(sT,mW),e(mW,rnr),e(sT,tnr),e(V,anr),e(V,lT),e(lT,J1e),e(J1e,nnr),e(lT,snr),e(lT,gW),e(gW,lnr),e(lT,inr),e(V,dnr),e(V,iT),e(iT,Y1e),e(Y1e,cnr),e(iT,fnr),e(iT,hW),e(hW,mnr),e(iT,gnr),e(V,hnr),e(V,dT),e(dT,K1e),e(K1e,pnr),e(dT,_nr),e(dT,pW),e(pW,unr),e(dT,bnr),e(V,vnr),e(V,cT),e(cT,Z1e),e(Z1e,Fnr),e(cT,Tnr),e(cT,_W),e(_W,Mnr),e(cT,Enr),e(so,Cnr),e(so,fT),e(fT,wnr),e(fT,ebe),e(ebe,Anr),e(fT,Lnr),e(fT,obe),e(obe,ynr),e(so,xnr),M(mT,so,null),b(f,YXe,u),b(f,bd,u),e(bd,gT),e(gT,rbe),M(ky,rbe,null),e(bd,$nr),e(bd,tbe),e(tbe,knr),b(f,KXe,u),b(f,Go,u),M(Sy,Go,null),e(Go,Snr),e(Go,vd),e(vd,Rnr),e(vd,uW),e(uW,Pnr),e(vd,Bnr),e(vd,bW),e(bW,Nnr),e(vd,Inr),e(Go,qnr),e(Go,Ry),e(Ry,jnr),e(Ry,abe),e(abe,Dnr),e(Ry,Gnr),e(Go,Onr),e(Go,bt),M(Py,bt,null),e(bt,Vnr),e(bt,nbe),e(nbe,Xnr),e(bt,znr),e(bt,Fd),e(Fd,Qnr),e(Fd,sbe),e(sbe,Wnr),e(Fd,Hnr),e(Fd,vW),e(vW,Unr),e(Fd,Jnr),e(bt,Ynr),M(hT,bt,null),e(Go,Knr),e(Go,lo),M(By,lo,null),e(lo,Znr),e(lo,lbe),e(lbe,esr),e(lo,osr),e(lo,Qa),e(Qa,rsr),e(Qa,ibe),e(ibe,tsr),e(Qa,asr),e(Qa,dbe),e(dbe,nsr),e(Qa,ssr),e(Qa,cbe),e(cbe,lsr),e(Qa,isr),e(lo,dsr),e(lo,fbe),e(fbe,pT),e(pT,mbe),e(mbe,csr),e(pT,fsr),e(pT,FW),e(FW,msr),e(pT,gsr),e(lo,hsr),e(lo,_T),e(_T,psr),e(_T,gbe),e(gbe,_sr),e(_T,usr),e(_T,hbe),e(hbe,bsr),e(lo,vsr),M(uT,lo,null),b(f,ZXe,u),b(f,Td,u),e(Td,bT),e(bT,pbe),M(Ny,pbe,null),e(Td,Fsr),e(Td,_be),e(_be,Tsr),b(f,eze,u),b(f,Oo,u),M(Iy,Oo,null),e(Oo,Msr),e(Oo,Md),e(Md,Esr),e(Md,TW),e(TW,Csr),e(Md,wsr),e(Md,MW),e(MW,Asr),e(Md,Lsr),e(Oo,ysr),e(Oo,qy),e(qy,xsr),e(qy,ube),e(ube,$sr),e(qy,ksr),e(Oo,Ssr),e(Oo,vt),M(jy,vt,null),e(vt,Rsr),e(vt,bbe),e(bbe,Psr),e(vt,Bsr),e(vt,Ed),e(Ed,Nsr),e(Ed,vbe),e(vbe,Isr),e(Ed,qsr),e(Ed,EW),e(EW,jsr),e(Ed,Dsr),e(vt,Gsr),M(vT,vt,null),e(Oo,Osr),e(Oo,io),M(Dy,io,null),e(io,Vsr),e(io,Fbe),e(Fbe,Xsr),e(io,zsr),e(io,Wa),e(Wa,Qsr),e(Wa,Tbe),e(Tbe,Wsr),e(Wa,Hsr),e(Wa,Mbe),e(Mbe,Usr),e(Wa,Jsr),e(Wa,Ebe),e(Ebe,Ysr),e(Wa,Ksr),e(io,Zsr),e(io,ve),e(ve,FT),e(FT,Cbe),e(Cbe,elr),e(FT,olr),e(FT,CW),e(CW,rlr),e(FT,tlr),e(ve,alr),e(ve,TT),e(TT,wbe),e(wbe,nlr),e(TT,slr),e(TT,wW),e(wW,llr),e(TT,ilr),e(ve,dlr),e(ve,MT),e(MT,Abe),e(Abe,clr),e(MT,flr),e(MT,AW),e(AW,mlr),e(MT,glr),e(ve,hlr),e(ve,ET),e(ET,Lbe),e(Lbe,plr),e(ET,_lr),e(ET,LW),e(LW,ulr),e(ET,blr),e(ve,vlr),e(ve,Us),e(Us,ybe),e(ybe,Flr),e(Us,Tlr),e(Us,yW),e(yW,Mlr),e(Us,Elr),e(Us,xW),e(xW,Clr),e(Us,wlr),e(ve,Alr),e(ve,CT),e(CT,xbe),e(xbe,Llr),e(CT,ylr),e(CT,$W),e($W,xlr),e(CT,$lr),e(ve,klr),e(ve,Js),e(Js,$be),e($be,Slr),e(Js,Rlr),e(Js,kW),e(kW,Plr),e(Js,Blr),e(Js,SW),e(SW,Nlr),e(Js,Ilr),e(ve,qlr),e(ve,wT),e(wT,kbe),e(kbe,jlr),e(wT,Dlr),e(wT,RW),e(RW,Glr),e(wT,Olr),e(ve,Vlr),e(ve,Ft),e(Ft,Sbe),e(Sbe,Xlr),e(Ft,zlr),e(Ft,PW),e(PW,Qlr),e(Ft,Wlr),e(Ft,BW),e(BW,Hlr),e(Ft,Ulr),e(Ft,NW),e(NW,Jlr),e(Ft,Ylr),e(ve,Klr),e(ve,AT),e(AT,Rbe),e(Rbe,Zlr),e(AT,eir),e(AT,IW),e(IW,oir),e(AT,rir),e(ve,tir),e(ve,LT),e(LT,Pbe),e(Pbe,air),e(LT,nir),e(LT,qW),e(qW,sir),e(LT,lir),e(ve,iir),e(ve,yT),e(yT,Bbe),e(Bbe,dir),e(yT,cir),e(yT,jW),e(jW,fir),e(yT,mir),e(ve,gir),e(ve,xT),e(xT,Nbe),e(Nbe,hir),e(xT,pir),e(xT,DW),e(DW,_ir),e(xT,uir),e(ve,bir),e(ve,$T),e($T,Ibe),e(Ibe,vir),e($T,Fir),e($T,GW),e(GW,Tir),e($T,Mir),e(ve,Eir),e(ve,kT),e(kT,qbe),e(qbe,Cir),e(kT,wir),e(kT,OW),e(OW,Air),e(kT,Lir),e(ve,yir),e(ve,ST),e(ST,jbe),e(jbe,xir),e(ST,$ir),e(ST,VW),e(VW,kir),e(ST,Sir),e(io,Rir),e(io,RT),e(RT,Pir),e(RT,Dbe),e(Dbe,Bir),e(RT,Nir),e(RT,Gbe),e(Gbe,Iir),e(io,qir),M(PT,io,null),b(f,oze,u),b(f,Cd,u),e(Cd,BT),e(BT,Obe),M(Gy,Obe,null),e(Cd,jir),e(Cd,Vbe),e(Vbe,Dir),b(f,rze,u),b(f,Vo,u),M(Oy,Vo,null),e(Vo,Gir),e(Vo,wd),e(wd,Oir),e(wd,XW),e(XW,Vir),e(wd,Xir),e(wd,zW),e(zW,zir),e(wd,Qir),e(Vo,Wir),e(Vo,Vy),e(Vy,Hir),e(Vy,Xbe),e(Xbe,Uir),e(Vy,Jir),e(Vo,Yir),e(Vo,Tt),M(Xy,Tt,null),e(Tt,Kir),e(Tt,zbe),e(zbe,Zir),e(Tt,edr),e(Tt,Ad),e(Ad,odr),e(Ad,Qbe),e(Qbe,rdr),e(Ad,tdr),e(Ad,QW),e(QW,adr),e(Ad,ndr),e(Tt,sdr),M(NT,Tt,null),e(Vo,ldr),e(Vo,co),M(zy,co,null),e(co,idr),e(co,Wbe),e(Wbe,ddr),e(co,cdr),e(co,Ha),e(Ha,fdr),e(Ha,Hbe),e(Hbe,mdr),e(Ha,gdr),e(Ha,Ube),e(Ube,hdr),e(Ha,pdr),e(Ha,Jbe),e(Jbe,_dr),e(Ha,udr),e(co,bdr),e(co,Ybe),e(Ybe,IT),e(IT,Kbe),e(Kbe,vdr),e(IT,Fdr),e(IT,WW),e(WW,Tdr),e(IT,Mdr),e(co,Edr),e(co,qT),e(qT,Cdr),e(qT,Zbe),e(Zbe,wdr),e(qT,Adr),e(qT,eve),e(eve,Ldr),e(co,ydr),M(jT,co,null),b(f,tze,u),b(f,Ld,u),e(Ld,DT),e(DT,ove),M(Qy,ove,null),e(Ld,xdr),e(Ld,rve),e(rve,$dr),b(f,aze,u),b(f,Xo,u),M(Wy,Xo,null),e(Xo,kdr),e(Xo,yd),e(yd,Sdr),e(yd,HW),e(HW,Rdr),e(yd,Pdr),e(yd,UW),e(UW,Bdr),e(yd,Ndr),e(Xo,Idr),e(Xo,Hy),e(Hy,qdr),e(Hy,tve),e(tve,jdr),e(Hy,Ddr),e(Xo,Gdr),e(Xo,Mt),M(Uy,Mt,null),e(Mt,Odr),e(Mt,ave),e(ave,Vdr),e(Mt,Xdr),e(Mt,xd),e(xd,zdr),e(xd,nve),e(nve,Qdr),e(xd,Wdr),e(xd,JW),e(JW,Hdr),e(xd,Udr),e(Mt,Jdr),M(GT,Mt,null),e(Xo,Ydr),e(Xo,fo),M(Jy,fo,null),e(fo,Kdr),e(fo,sve),e(sve,Zdr),e(fo,ecr),e(fo,Ua),e(Ua,ocr),e(Ua,lve),e(lve,rcr),e(Ua,tcr),e(Ua,ive),e(ive,acr),e(Ua,ncr),e(Ua,dve),e(dve,scr),e(Ua,lcr),e(fo,icr),e(fo,cve),e(cve,OT),e(OT,fve),e(fve,dcr),e(OT,ccr),e(OT,YW),e(YW,fcr),e(OT,mcr),e(fo,gcr),e(fo,VT),e(VT,hcr),e(VT,mve),e(mve,pcr),e(VT,_cr),e(VT,gve),e(gve,ucr),e(fo,bcr),M(XT,fo,null),b(f,nze,u),b(f,$d,u),e($d,zT),e(zT,hve),M(Yy,hve,null),e($d,vcr),e($d,pve),e(pve,Fcr),b(f,sze,u),b(f,zo,u),M(Ky,zo,null),e(zo,Tcr),e(zo,kd),e(kd,Mcr),e(kd,KW),e(KW,Ecr),e(kd,Ccr),e(kd,ZW),e(ZW,wcr),e(kd,Acr),e(zo,Lcr),e(zo,Zy),e(Zy,ycr),e(Zy,_ve),e(_ve,xcr),e(Zy,$cr),e(zo,kcr),e(zo,Et),M(e9,Et,null),e(Et,Scr),e(Et,uve),e(uve,Rcr),e(Et,Pcr),e(Et,Sd),e(Sd,Bcr),e(Sd,bve),e(bve,Ncr),e(Sd,Icr),e(Sd,eH),e(eH,qcr),e(Sd,jcr),e(Et,Dcr),M(QT,Et,null),e(zo,Gcr),e(zo,mo),M(o9,mo,null),e(mo,Ocr),e(mo,vve),e(vve,Vcr),e(mo,Xcr),e(mo,Ja),e(Ja,zcr),e(Ja,Fve),e(Fve,Qcr),e(Ja,Wcr),e(Ja,Tve),e(Tve,Hcr),e(Ja,Ucr),e(Ja,Mve),e(Mve,Jcr),e(Ja,Ycr),e(mo,Kcr),e(mo,Be),e(Be,WT),e(WT,Eve),e(Eve,Zcr),e(WT,efr),e(WT,oH),e(oH,ofr),e(WT,rfr),e(Be,tfr),e(Be,HT),e(HT,Cve),e(Cve,afr),e(HT,nfr),e(HT,rH),e(rH,sfr),e(HT,lfr),e(Be,ifr),e(Be,UT),e(UT,wve),e(wve,dfr),e(UT,cfr),e(UT,tH),e(tH,ffr),e(UT,mfr),e(Be,gfr),e(Be,JT),e(JT,Ave),e(Ave,hfr),e(JT,pfr),e(JT,aH),e(aH,_fr),e(JT,ufr),e(Be,bfr),e(Be,YT),e(YT,Lve),e(Lve,vfr),e(YT,Ffr),e(YT,nH),e(nH,Tfr),e(YT,Mfr),e(Be,Efr),e(Be,KT),e(KT,yve),e(yve,Cfr),e(KT,wfr),e(KT,sH),e(sH,Afr),e(KT,Lfr),e(Be,yfr),e(Be,ZT),e(ZT,xve),e(xve,xfr),e(ZT,$fr),e(ZT,lH),e(lH,kfr),e(ZT,Sfr),e(Be,Rfr),e(Be,e8),e(e8,$ve),e($ve,Pfr),e(e8,Bfr),e(e8,iH),e(iH,Nfr),e(e8,Ifr),e(Be,qfr),e(Be,o8),e(o8,kve),e(kve,jfr),e(o8,Dfr),e(o8,dH),e(dH,Gfr),e(o8,Ofr),e(mo,Vfr),e(mo,r8),e(r8,Xfr),e(r8,Sve),e(Sve,zfr),e(r8,Qfr),e(r8,Rve),e(Rve,Wfr),e(mo,Hfr),M(t8,mo,null),b(f,lze,u),b(f,Rd,u),e(Rd,a8),e(a8,Pve),M(r9,Pve,null),e(Rd,Ufr),e(Rd,Bve),e(Bve,Jfr),b(f,ize,u),b(f,Qo,u),M(t9,Qo,null),e(Qo,Yfr),e(Qo,Pd),e(Pd,Kfr),e(Pd,cH),e(cH,Zfr),e(Pd,emr),e(Pd,fH),e(fH,omr),e(Pd,rmr),e(Qo,tmr),e(Qo,a9),e(a9,amr),e(a9,Nve),e(Nve,nmr),e(a9,smr),e(Qo,lmr),e(Qo,Ct),M(n9,Ct,null),e(Ct,imr),e(Ct,Ive),e(Ive,dmr),e(Ct,cmr),e(Ct,Bd),e(Bd,fmr),e(Bd,qve),e(qve,mmr),e(Bd,gmr),e(Bd,mH),e(mH,hmr),e(Bd,pmr),e(Ct,_mr),M(n8,Ct,null),e(Qo,umr),e(Qo,go),M(s9,go,null),e(go,bmr),e(go,jve),e(jve,vmr),e(go,Fmr),e(go,Ya),e(Ya,Tmr),e(Ya,Dve),e(Dve,Mmr),e(Ya,Emr),e(Ya,Gve),e(Gve,Cmr),e(Ya,wmr),e(Ya,Ove),e(Ove,Amr),e(Ya,Lmr),e(go,ymr),e(go,rt),e(rt,s8),e(s8,Vve),e(Vve,xmr),e(s8,$mr),e(s8,gH),e(gH,kmr),e(s8,Smr),e(rt,Rmr),e(rt,l8),e(l8,Xve),e(Xve,Pmr),e(l8,Bmr),e(l8,hH),e(hH,Nmr),e(l8,Imr),e(rt,qmr),e(rt,i8),e(i8,zve),e(zve,jmr),e(i8,Dmr),e(i8,pH),e(pH,Gmr),e(i8,Omr),e(rt,Vmr),e(rt,d8),e(d8,Qve),e(Qve,Xmr),e(d8,zmr),e(d8,_H),e(_H,Qmr),e(d8,Wmr),e(rt,Hmr),e(rt,c8),e(c8,Wve),e(Wve,Umr),e(c8,Jmr),e(c8,uH),e(uH,Ymr),e(c8,Kmr),e(go,Zmr),e(go,f8),e(f8,egr),e(f8,Hve),e(Hve,ogr),e(f8,rgr),e(f8,Uve),e(Uve,tgr),e(go,agr),M(m8,go,null),b(f,dze,u),b(f,Nd,u),e(Nd,g8),e(g8,Jve),M(l9,Jve,null),e(Nd,ngr),e(Nd,Yve),e(Yve,sgr),b(f,cze,u),b(f,Wo,u),M(i9,Wo,null),e(Wo,lgr),e(Wo,Id),e(Id,igr),e(Id,bH),e(bH,dgr),e(Id,cgr),e(Id,vH),e(vH,fgr),e(Id,mgr),e(Wo,ggr),e(Wo,d9),e(d9,hgr),e(d9,Kve),e(Kve,pgr),e(d9,_gr),e(Wo,ugr),e(Wo,wt),M(c9,wt,null),e(wt,bgr),e(wt,Zve),e(Zve,vgr),e(wt,Fgr),e(wt,qd),e(qd,Tgr),e(qd,e0e),e(e0e,Mgr),e(qd,Egr),e(qd,FH),e(FH,Cgr),e(qd,wgr),e(wt,Agr),M(h8,wt,null),e(Wo,Lgr),e(Wo,ho),M(f9,ho,null),e(ho,ygr),e(ho,o0e),e(o0e,xgr),e(ho,$gr),e(ho,Ka),e(Ka,kgr),e(Ka,r0e),e(r0e,Sgr),e(Ka,Rgr),e(Ka,t0e),e(t0e,Pgr),e(Ka,Bgr),e(Ka,a0e),e(a0e,Ngr),e(Ka,Igr),e(ho,qgr),e(ho,ye),e(ye,p8),e(p8,n0e),e(n0e,jgr),e(p8,Dgr),e(p8,TH),e(TH,Ggr),e(p8,Ogr),e(ye,Vgr),e(ye,_8),e(_8,s0e),e(s0e,Xgr),e(_8,zgr),e(_8,MH),e(MH,Qgr),e(_8,Wgr),e(ye,Hgr),e(ye,u8),e(u8,l0e),e(l0e,Ugr),e(u8,Jgr),e(u8,EH),e(EH,Ygr),e(u8,Kgr),e(ye,Zgr),e(ye,b8),e(b8,i0e),e(i0e,ehr),e(b8,ohr),e(b8,CH),e(CH,rhr),e(b8,thr),e(ye,ahr),e(ye,v8),e(v8,d0e),e(d0e,nhr),e(v8,shr),e(v8,wH),e(wH,lhr),e(v8,ihr),e(ye,dhr),e(ye,F8),e(F8,c0e),e(c0e,chr),e(F8,fhr),e(F8,AH),e(AH,mhr),e(F8,ghr),e(ye,hhr),e(ye,T8),e(T8,f0e),e(f0e,phr),e(T8,_hr),e(T8,LH),e(LH,uhr),e(T8,bhr),e(ye,vhr),e(ye,M8),e(M8,m0e),e(m0e,Fhr),e(M8,Thr),e(M8,yH),e(yH,Mhr),e(M8,Ehr),e(ye,Chr),e(ye,E8),e(E8,g0e),e(g0e,whr),e(E8,Ahr),e(E8,xH),e(xH,Lhr),e(E8,yhr),e(ye,xhr),e(ye,C8),e(C8,h0e),e(h0e,$hr),e(C8,khr),e(C8,$H),e($H,Shr),e(C8,Rhr),e(ho,Phr),e(ho,w8),e(w8,Bhr),e(w8,p0e),e(p0e,Nhr),e(w8,Ihr),e(w8,_0e),e(_0e,qhr),e(ho,jhr),M(A8,ho,null),b(f,fze,u),b(f,jd,u),e(jd,L8),e(L8,u0e),M(m9,u0e,null),e(jd,Dhr),e(jd,b0e),e(b0e,Ghr),b(f,mze,u),b(f,Ho,u),M(g9,Ho,null),e(Ho,Ohr),e(Ho,Dd),e(Dd,Vhr),e(Dd,kH),e(kH,Xhr),e(Dd,zhr),e(Dd,SH),e(SH,Qhr),e(Dd,Whr),e(Ho,Hhr),e(Ho,h9),e(h9,Uhr),e(h9,v0e),e(v0e,Jhr),e(h9,Yhr),e(Ho,Khr),e(Ho,At),M(p9,At,null),e(At,Zhr),e(At,F0e),e(F0e,epr),e(At,opr),e(At,Gd),e(Gd,rpr),e(Gd,T0e),e(T0e,tpr),e(Gd,apr),e(Gd,RH),e(RH,npr),e(Gd,spr),e(At,lpr),M(y8,At,null),e(Ho,ipr),e(Ho,po),M(_9,po,null),e(po,dpr),e(po,M0e),e(M0e,cpr),e(po,fpr),e(po,Za),e(Za,mpr),e(Za,E0e),e(E0e,gpr),e(Za,hpr),e(Za,C0e),e(C0e,ppr),e(Za,_pr),e(Za,w0e),e(w0e,upr),e(Za,bpr),e(po,vpr),e(po,u9),e(u9,x8),e(x8,A0e),e(A0e,Fpr),e(x8,Tpr),e(x8,PH),e(PH,Mpr),e(x8,Epr),e(u9,Cpr),e(u9,$8),e($8,L0e),e(L0e,wpr),e($8,Apr),e($8,BH),e(BH,Lpr),e($8,ypr),e(po,xpr),e(po,k8),e(k8,$pr),e(k8,y0e),e(y0e,kpr),e(k8,Spr),e(k8,x0e),e(x0e,Rpr),e(po,Ppr),M(S8,po,null),b(f,gze,u),b(f,Od,u),e(Od,R8),e(R8,$0e),M(b9,$0e,null),e(Od,Bpr),e(Od,k0e),e(k0e,Npr),b(f,hze,u),b(f,Uo,u),M(v9,Uo,null),e(Uo,Ipr),e(Uo,Vd),e(Vd,qpr),e(Vd,NH),e(NH,jpr),e(Vd,Dpr),e(Vd,IH),e(IH,Gpr),e(Vd,Opr),e(Uo,Vpr),e(Uo,F9),e(F9,Xpr),e(F9,S0e),e(S0e,zpr),e(F9,Qpr),e(Uo,Wpr),e(Uo,Lt),M(T9,Lt,null),e(Lt,Hpr),e(Lt,R0e),e(R0e,Upr),e(Lt,Jpr),e(Lt,Xd),e(Xd,Ypr),e(Xd,P0e),e(P0e,Kpr),e(Xd,Zpr),e(Xd,qH),e(qH,e_r),e(Xd,o_r),e(Lt,r_r),M(P8,Lt,null),e(Uo,t_r),e(Uo,_o),M(M9,_o,null),e(_o,a_r),e(_o,B0e),e(B0e,n_r),e(_o,s_r),e(_o,en),e(en,l_r),e(en,N0e),e(N0e,i_r),e(en,d_r),e(en,I0e),e(I0e,c_r),e(en,f_r),e(en,q0e),e(q0e,m_r),e(en,g_r),e(_o,h_r),e(_o,tt),e(tt,B8),e(B8,j0e),e(j0e,p_r),e(B8,__r),e(B8,jH),e(jH,u_r),e(B8,b_r),e(tt,v_r),e(tt,N8),e(N8,D0e),e(D0e,F_r),e(N8,T_r),e(N8,DH),e(DH,M_r),e(N8,E_r),e(tt,C_r),e(tt,I8),e(I8,G0e),e(G0e,w_r),e(I8,A_r),e(I8,GH),e(GH,L_r),e(I8,y_r),e(tt,x_r),e(tt,q8),e(q8,O0e),e(O0e,$_r),e(q8,k_r),e(q8,OH),e(OH,S_r),e(q8,R_r),e(tt,P_r),e(tt,j8),e(j8,V0e),e(V0e,B_r),e(j8,N_r),e(j8,VH),e(VH,I_r),e(j8,q_r),e(_o,j_r),e(_o,D8),e(D8,D_r),e(D8,X0e),e(X0e,G_r),e(D8,O_r),e(D8,z0e),e(z0e,V_r),e(_o,X_r),M(G8,_o,null),b(f,pze,u),b(f,zd,u),e(zd,O8),e(O8,Q0e),M(E9,Q0e,null),e(zd,z_r),e(zd,W0e),e(W0e,Q_r),b(f,_ze,u),b(f,Jo,u),M(C9,Jo,null),e(Jo,W_r),e(Jo,Qd),e(Qd,H_r),e(Qd,XH),e(XH,U_r),e(Qd,J_r),e(Qd,zH),e(zH,Y_r),e(Qd,K_r),e(Jo,Z_r),e(Jo,w9),e(w9,eur),e(w9,H0e),e(H0e,our),e(w9,rur),e(Jo,tur),e(Jo,yt),M(A9,yt,null),e(yt,aur),e(yt,U0e),e(U0e,nur),e(yt,sur),e(yt,Wd),e(Wd,lur),e(Wd,J0e),e(J0e,iur),e(Wd,dur),e(Wd,QH),e(QH,cur),e(Wd,fur),e(yt,mur),M(V8,yt,null),e(Jo,gur),e(Jo,uo),M(L9,uo,null),e(uo,hur),e(uo,Y0e),e(Y0e,pur),e(uo,_ur),e(uo,on),e(on,uur),e(on,K0e),e(K0e,bur),e(on,vur),e(on,Z0e),e(Z0e,Fur),e(on,Tur),e(on,eFe),e(eFe,Mur),e(on,Eur),e(uo,Cur),e(uo,Hd),e(Hd,X8),e(X8,oFe),e(oFe,wur),e(X8,Aur),e(X8,WH),e(WH,Lur),e(X8,yur),e(Hd,xur),e(Hd,z8),e(z8,rFe),e(rFe,$ur),e(z8,kur),e(z8,HH),e(HH,Sur),e(z8,Rur),e(Hd,Pur),e(Hd,Q8),e(Q8,tFe),e(tFe,Bur),e(Q8,Nur),e(Q8,UH),e(UH,Iur),e(Q8,qur),e(uo,jur),e(uo,W8),e(W8,Dur),e(W8,aFe),e(aFe,Gur),e(W8,Our),e(W8,nFe),e(nFe,Vur),e(uo,Xur),M(H8,uo,null),b(f,uze,u),b(f,Ud,u),e(Ud,U8),e(U8,sFe),M(y9,sFe,null),e(Ud,zur),e(Ud,lFe),e(lFe,Qur),b(f,bze,u),b(f,Yo,u),M(x9,Yo,null),e(Yo,Wur),e(Yo,Jd),e(Jd,Hur),e(Jd,JH),e(JH,Uur),e(Jd,Jur),e(Jd,YH),e(YH,Yur),e(Jd,Kur),e(Yo,Zur),e(Yo,$9),e($9,e2r),e($9,iFe),e(iFe,o2r),e($9,r2r),e(Yo,t2r),e(Yo,xt),M(k9,xt,null),e(xt,a2r),e(xt,dFe),e(dFe,n2r),e(xt,s2r),e(xt,Yd),e(Yd,l2r),e(Yd,cFe),e(cFe,i2r),e(Yd,d2r),e(Yd,KH),e(KH,c2r),e(Yd,f2r),e(xt,m2r),M(J8,xt,null),e(Yo,g2r),e(Yo,bo),M(S9,bo,null),e(bo,h2r),e(bo,fFe),e(fFe,p2r),e(bo,_2r),e(bo,rn),e(rn,u2r),e(rn,mFe),e(mFe,b2r),e(rn,v2r),e(rn,gFe),e(gFe,F2r),e(rn,T2r),e(rn,hFe),e(hFe,M2r),e(rn,E2r),e(bo,C2r),e(bo,R9),e(R9,Y8),e(Y8,pFe),e(pFe,w2r),e(Y8,A2r),e(Y8,ZH),e(ZH,L2r),e(Y8,y2r),e(R9,x2r),e(R9,K8),e(K8,_Fe),e(_Fe,$2r),e(K8,k2r),e(K8,eU),e(eU,S2r),e(K8,R2r),e(bo,P2r),e(bo,Z8),e(Z8,B2r),e(Z8,uFe),e(uFe,N2r),e(Z8,I2r),e(Z8,bFe),e(bFe,q2r),e(bo,j2r),M(eM,bo,null),b(f,vze,u),b(f,Kd,u),e(Kd,oM),e(oM,vFe),M(P9,vFe,null),e(Kd,D2r),e(Kd,FFe),e(FFe,G2r),b(f,Fze,u),b(f,Ko,u),M(B9,Ko,null),e(Ko,O2r),e(Ko,Zd),e(Zd,V2r),e(Zd,oU),e(oU,X2r),e(Zd,z2r),e(Zd,rU),e(rU,Q2r),e(Zd,W2r),e(Ko,H2r),e(Ko,N9),e(N9,U2r),e(N9,TFe),e(TFe,J2r),e(N9,Y2r),e(Ko,K2r),e(Ko,$t),M(I9,$t,null),e($t,Z2r),e($t,MFe),e(MFe,e1r),e($t,o1r),e($t,ec),e(ec,r1r),e(ec,EFe),e(EFe,t1r),e(ec,a1r),e(ec,tU),e(tU,n1r),e(ec,s1r),e($t,l1r),M(rM,$t,null),e(Ko,i1r),e(Ko,vo),M(q9,vo,null),e(vo,d1r),e(vo,CFe),e(CFe,c1r),e(vo,f1r),e(vo,tn),e(tn,m1r),e(tn,wFe),e(wFe,g1r),e(tn,h1r),e(tn,AFe),e(AFe,p1r),e(tn,_1r),e(tn,LFe),e(LFe,u1r),e(tn,b1r),e(vo,v1r),e(vo,yFe),e(yFe,tM),e(tM,xFe),e(xFe,F1r),e(tM,T1r),e(tM,aU),e(aU,M1r),e(tM,E1r),e(vo,C1r),e(vo,aM),e(aM,w1r),e(aM,$Fe),e($Fe,A1r),e(aM,L1r),e(aM,kFe),e(kFe,y1r),e(vo,x1r),M(nM,vo,null),b(f,Tze,u),b(f,oc,u),e(oc,sM),e(sM,SFe),M(j9,SFe,null),e(oc,$1r),e(oc,RFe),e(RFe,k1r),b(f,Mze,u),b(f,Zo,u),M(D9,Zo,null),e(Zo,S1r),e(Zo,rc),e(rc,R1r),e(rc,nU),e(nU,P1r),e(rc,B1r),e(rc,sU),e(sU,N1r),e(rc,I1r),e(Zo,q1r),e(Zo,G9),e(G9,j1r),e(G9,PFe),e(PFe,D1r),e(G9,G1r),e(Zo,O1r),e(Zo,kt),M(O9,kt,null),e(kt,V1r),e(kt,BFe),e(BFe,X1r),e(kt,z1r),e(kt,tc),e(tc,Q1r),e(tc,NFe),e(NFe,W1r),e(tc,H1r),e(tc,lU),e(lU,U1r),e(tc,J1r),e(kt,Y1r),M(lM,kt,null),e(Zo,K1r),e(Zo,Fo),M(V9,Fo,null),e(Fo,Z1r),e(Fo,IFe),e(IFe,ebr),e(Fo,obr),e(Fo,an),e(an,rbr),e(an,qFe),e(qFe,tbr),e(an,abr),e(an,jFe),e(jFe,nbr),e(an,sbr),e(an,DFe),e(DFe,lbr),e(an,ibr),e(Fo,dbr),e(Fo,at),e(at,iM),e(iM,GFe),e(GFe,cbr),e(iM,fbr),e(iM,iU),e(iU,mbr),e(iM,gbr),e(at,hbr),e(at,dM),e(dM,OFe),e(OFe,pbr),e(dM,_br),e(dM,dU),e(dU,ubr),e(dM,bbr),e(at,vbr),e(at,cM),e(cM,VFe),e(VFe,Fbr),e(cM,Tbr),e(cM,cU),e(cU,Mbr),e(cM,Ebr),e(at,Cbr),e(at,fM),e(fM,XFe),e(XFe,wbr),e(fM,Abr),e(fM,fU),e(fU,Lbr),e(fM,ybr),e(at,xbr),e(at,mM),e(mM,zFe),e(zFe,$br),e(mM,kbr),e(mM,mU),e(mU,Sbr),e(mM,Rbr),e(Fo,Pbr),e(Fo,gM),e(gM,Bbr),e(gM,QFe),e(QFe,Nbr),e(gM,Ibr),e(gM,WFe),e(WFe,qbr),e(Fo,jbr),M(hM,Fo,null),b(f,Eze,u),b(f,ac,u),e(ac,pM),e(pM,HFe),M(X9,HFe,null),e(ac,Dbr),e(ac,UFe),e(UFe,Gbr),b(f,Cze,u),b(f,er,u),M(z9,er,null),e(er,Obr),e(er,nc),e(nc,Vbr),e(nc,gU),e(gU,Xbr),e(nc,zbr),e(nc,hU),e(hU,Qbr),e(nc,Wbr),e(er,Hbr),e(er,Q9),e(Q9,Ubr),e(Q9,JFe),e(JFe,Jbr),e(Q9,Ybr),e(er,Kbr),e(er,St),M(W9,St,null),e(St,Zbr),e(St,YFe),e(YFe,evr),e(St,ovr),e(St,sc),e(sc,rvr),e(sc,KFe),e(KFe,tvr),e(sc,avr),e(sc,pU),e(pU,nvr),e(sc,svr),e(St,lvr),M(_M,St,null),e(er,ivr),e(er,To),M(H9,To,null),e(To,dvr),e(To,ZFe),e(ZFe,cvr),e(To,fvr),e(To,nn),e(nn,mvr),e(nn,eTe),e(eTe,gvr),e(nn,hvr),e(nn,oTe),e(oTe,pvr),e(nn,_vr),e(nn,rTe),e(rTe,uvr),e(nn,bvr),e(To,vvr),e(To,tTe),e(tTe,uM),e(uM,aTe),e(aTe,Fvr),e(uM,Tvr),e(uM,_U),e(_U,Mvr),e(uM,Evr),e(To,Cvr),e(To,bM),e(bM,wvr),e(bM,nTe),e(nTe,Avr),e(bM,Lvr),e(bM,sTe),e(sTe,yvr),e(To,xvr),M(vM,To,null),b(f,wze,u),b(f,lc,u),e(lc,FM),e(FM,lTe),M(U9,lTe,null),e(lc,$vr),e(lc,iTe),e(iTe,kvr),b(f,Aze,u),b(f,or,u),M(J9,or,null),e(or,Svr),e(or,ic),e(ic,Rvr),e(ic,uU),e(uU,Pvr),e(ic,Bvr),e(ic,bU),e(bU,Nvr),e(ic,Ivr),e(or,qvr),e(or,Y9),e(Y9,jvr),e(Y9,dTe),e(dTe,Dvr),e(Y9,Gvr),e(or,Ovr),e(or,Rt),M(K9,Rt,null),e(Rt,Vvr),e(Rt,cTe),e(cTe,Xvr),e(Rt,zvr),e(Rt,dc),e(dc,Qvr),e(dc,fTe),e(fTe,Wvr),e(dc,Hvr),e(dc,vU),e(vU,Uvr),e(dc,Jvr),e(Rt,Yvr),M(TM,Rt,null),e(or,Kvr),e(or,xr),M(Z9,xr,null),e(xr,Zvr),e(xr,mTe),e(mTe,e0r),e(xr,o0r),e(xr,sn),e(sn,r0r),e(sn,gTe),e(gTe,t0r),e(sn,a0r),e(sn,hTe),e(hTe,n0r),e(sn,s0r),e(sn,pTe),e(pTe,l0r),e(sn,i0r),e(xr,d0r),e(xr,q),e(q,MM),e(MM,_Te),e(_Te,c0r),e(MM,f0r),e(MM,FU),e(FU,m0r),e(MM,g0r),e(q,h0r),e(q,EM),e(EM,uTe),e(uTe,p0r),e(EM,_0r),e(EM,TU),e(TU,u0r),e(EM,b0r),e(q,v0r),e(q,CM),e(CM,bTe),e(bTe,F0r),e(CM,T0r),e(CM,MU),e(MU,M0r),e(CM,E0r),e(q,C0r),e(q,wM),e(wM,vTe),e(vTe,w0r),e(wM,A0r),e(wM,EU),e(EU,L0r),e(wM,y0r),e(q,x0r),e(q,AM),e(AM,FTe),e(FTe,$0r),e(AM,k0r),e(AM,CU),e(CU,S0r),e(AM,R0r),e(q,P0r),e(q,LM),e(LM,TTe),e(TTe,B0r),e(LM,N0r),e(LM,wU),e(wU,I0r),e(LM,q0r),e(q,j0r),e(q,yM),e(yM,MTe),e(MTe,D0r),e(yM,G0r),e(yM,AU),e(AU,O0r),e(yM,V0r),e(q,X0r),e(q,xM),e(xM,ETe),e(ETe,z0r),e(xM,Q0r),e(xM,LU),e(LU,W0r),e(xM,H0r),e(q,U0r),e(q,$M),e($M,CTe),e(CTe,J0r),e($M,Y0r),e($M,yU),e(yU,K0r),e($M,Z0r),e(q,eFr),e(q,kM),e(kM,wTe),e(wTe,oFr),e(kM,rFr),e(kM,xU),e(xU,tFr),e(kM,aFr),e(q,nFr),e(q,SM),e(SM,ATe),e(ATe,sFr),e(SM,lFr),e(SM,$U),e($U,iFr),e(SM,dFr),e(q,cFr),e(q,RM),e(RM,LTe),e(LTe,fFr),e(RM,mFr),e(RM,kU),e(kU,gFr),e(RM,hFr),e(q,pFr),e(q,PM),e(PM,yTe),e(yTe,_Fr),e(PM,uFr),e(PM,SU),e(SU,bFr),e(PM,vFr),e(q,FFr),e(q,BM),e(BM,xTe),e(xTe,TFr),e(BM,MFr),e(BM,RU),e(RU,EFr),e(BM,CFr),e(q,wFr),e(q,NM),e(NM,$Te),e($Te,AFr),e(NM,LFr),e(NM,PU),e(PU,yFr),e(NM,xFr),e(q,$Fr),e(q,IM),e(IM,kTe),e(kTe,kFr),e(IM,SFr),e(IM,BU),e(BU,RFr),e(IM,PFr),e(q,BFr),e(q,qM),e(qM,STe),e(STe,NFr),e(qM,IFr),e(qM,NU),e(NU,qFr),e(qM,jFr),e(q,DFr),e(q,jM),e(jM,RTe),e(RTe,GFr),e(jM,OFr),e(jM,IU),e(IU,VFr),e(jM,XFr),e(q,zFr),e(q,Ys),e(Ys,PTe),e(PTe,QFr),e(Ys,WFr),e(Ys,qU),e(qU,HFr),e(Ys,UFr),e(Ys,jU),e(jU,JFr),e(Ys,YFr),e(q,KFr),e(q,DM),e(DM,BTe),e(BTe,ZFr),e(DM,eTr),e(DM,DU),e(DU,oTr),e(DM,rTr),e(q,tTr),e(q,GM),e(GM,NTe),e(NTe,aTr),e(GM,nTr),e(GM,GU),e(GU,sTr),e(GM,lTr),e(q,iTr),e(q,OM),e(OM,ITe),e(ITe,dTr),e(OM,cTr),e(OM,OU),e(OU,fTr),e(OM,mTr),e(q,gTr),e(q,VM),e(VM,qTe),e(qTe,hTr),e(VM,pTr),e(VM,VU),e(VU,_Tr),e(VM,uTr),e(q,bTr),e(q,XM),e(XM,jTe),e(jTe,vTr),e(XM,FTr),e(XM,XU),e(XU,TTr),e(XM,MTr),e(q,ETr),e(q,zM),e(zM,DTe),e(DTe,CTr),e(zM,wTr),e(zM,zU),e(zU,ATr),e(zM,LTr),e(q,yTr),e(q,QM),e(QM,GTe),e(GTe,xTr),e(QM,$Tr),e(QM,QU),e(QU,kTr),e(QM,STr),e(q,RTr),e(q,WM),e(WM,OTe),e(OTe,PTr),e(WM,BTr),e(WM,WU),e(WU,NTr),e(WM,ITr),e(q,qTr),e(q,HM),e(HM,VTe),e(VTe,jTr),e(HM,DTr),e(HM,HU),e(HU,GTr),e(HM,OTr),e(q,VTr),e(q,UM),e(UM,XTe),e(XTe,XTr),e(UM,zTr),e(UM,UU),e(UU,QTr),e(UM,WTr),e(q,HTr),e(q,JM),e(JM,zTe),e(zTe,UTr),e(JM,JTr),e(JM,JU),e(JU,YTr),e(JM,KTr),e(q,ZTr),e(q,YM),e(YM,QTe),e(QTe,e8r),e(YM,o8r),e(YM,YU),e(YU,r8r),e(YM,t8r),e(q,a8r),e(q,KM),e(KM,WTe),e(WTe,n8r),e(KM,s8r),e(KM,KU),e(KU,l8r),e(KM,i8r),e(q,d8r),e(q,ZM),e(ZM,HTe),e(HTe,c8r),e(ZM,f8r),e(ZM,ZU),e(ZU,m8r),e(ZM,g8r),e(q,h8r),e(q,e4),e(e4,UTe),e(UTe,p8r),e(e4,_8r),e(e4,eJ),e(eJ,u8r),e(e4,b8r),e(q,v8r),e(q,o4),e(o4,JTe),e(JTe,F8r),e(o4,T8r),e(o4,oJ),e(oJ,M8r),e(o4,E8r),e(q,C8r),e(q,r4),e(r4,YTe),e(YTe,w8r),e(r4,A8r),e(r4,rJ),e(rJ,L8r),e(r4,y8r),e(q,x8r),e(q,t4),e(t4,KTe),e(KTe,$8r),e(t4,k8r),e(t4,tJ),e(tJ,S8r),e(t4,R8r),e(q,P8r),e(q,a4),e(a4,ZTe),e(ZTe,B8r),e(a4,N8r),e(a4,aJ),e(aJ,I8r),e(a4,q8r),e(q,j8r),e(q,n4),e(n4,e8e),e(e8e,D8r),e(n4,G8r),e(n4,nJ),e(nJ,O8r),e(n4,V8r),e(q,X8r),e(q,s4),e(s4,o8e),e(o8e,z8r),e(s4,Q8r),e(s4,sJ),e(sJ,W8r),e(s4,H8r),e(q,U8r),e(q,l4),e(l4,r8e),e(r8e,J8r),e(l4,Y8r),e(l4,lJ),e(lJ,K8r),e(l4,Z8r),e(q,eMr),e(q,i4),e(i4,t8e),e(t8e,oMr),e(i4,rMr),e(i4,iJ),e(iJ,tMr),e(i4,aMr),e(q,nMr),e(q,d4),e(d4,a8e),e(a8e,sMr),e(d4,lMr),e(d4,dJ),e(dJ,iMr),e(d4,dMr),e(q,cMr),e(q,c4),e(c4,n8e),e(n8e,fMr),e(c4,mMr),e(c4,cJ),e(cJ,gMr),e(c4,hMr),e(q,pMr),e(q,f4),e(f4,s8e),e(s8e,_Mr),e(f4,uMr),e(f4,fJ),e(fJ,bMr),e(f4,vMr),e(q,FMr),e(q,m4),e(m4,l8e),e(l8e,TMr),e(m4,MMr),e(m4,mJ),e(mJ,EMr),e(m4,CMr),e(q,wMr),e(q,g4),e(g4,i8e),e(i8e,AMr),e(g4,LMr),e(g4,gJ),e(gJ,yMr),e(g4,xMr),e(q,$Mr),e(q,h4),e(h4,d8e),e(d8e,kMr),e(h4,SMr),e(h4,hJ),e(hJ,RMr),e(h4,PMr),e(q,BMr),e(q,p4),e(p4,c8e),e(c8e,NMr),e(p4,IMr),e(p4,pJ),e(pJ,qMr),e(p4,jMr),e(q,DMr),e(q,_4),e(_4,f8e),e(f8e,GMr),e(_4,OMr),e(_4,_J),e(_J,VMr),e(_4,XMr),e(xr,zMr),M(u4,xr,null),b(f,Lze,u),b(f,cc,u),e(cc,b4),e(b4,m8e),M(ex,m8e,null),e(cc,QMr),e(cc,g8e),e(g8e,WMr),b(f,yze,u),b(f,rr,u),M(ox,rr,null),e(rr,HMr),e(rr,fc),e(fc,UMr),e(fc,uJ),e(uJ,JMr),e(fc,YMr),e(fc,bJ),e(bJ,KMr),e(fc,ZMr),e(rr,e4r),e(rr,rx),e(rx,o4r),e(rx,h8e),e(h8e,r4r),e(rx,t4r),e(rr,a4r),e(rr,Pt),M(tx,Pt,null),e(Pt,n4r),e(Pt,p8e),e(p8e,s4r),e(Pt,l4r),e(Pt,mc),e(mc,i4r),e(mc,_8e),e(_8e,d4r),e(mc,c4r),e(mc,vJ),e(vJ,f4r),e(mc,m4r),e(Pt,g4r),M(v4,Pt,null),e(rr,h4r),e(rr,$r),M(ax,$r,null),e($r,p4r),e($r,u8e),e(u8e,_4r),e($r,u4r),e($r,ln),e(ln,b4r),e(ln,b8e),e(b8e,v4r),e(ln,F4r),e(ln,v8e),e(v8e,T4r),e(ln,M4r),e(ln,F8e),e(F8e,E4r),e(ln,C4r),e($r,w4r),e($r,se),e(se,F4),e(F4,T8e),e(T8e,A4r),e(F4,L4r),e(F4,FJ),e(FJ,y4r),e(F4,x4r),e(se,$4r),e(se,T4),e(T4,M8e),e(M8e,k4r),e(T4,S4r),e(T4,TJ),e(TJ,R4r),e(T4,P4r),e(se,B4r),e(se,M4),e(M4,E8e),e(E8e,N4r),e(M4,I4r),e(M4,MJ),e(MJ,q4r),e(M4,j4r),e(se,D4r),e(se,E4),e(E4,C8e),e(C8e,G4r),e(E4,O4r),e(E4,EJ),e(EJ,V4r),e(E4,X4r),e(se,z4r),e(se,C4),e(C4,w8e),e(w8e,Q4r),e(C4,W4r),e(C4,CJ),e(CJ,H4r),e(C4,U4r),e(se,J4r),e(se,w4),e(w4,A8e),e(A8e,Y4r),e(w4,K4r),e(w4,wJ),e(wJ,Z4r),e(w4,eEr),e(se,oEr),e(se,A4),e(A4,L8e),e(L8e,rEr),e(A4,tEr),e(A4,AJ),e(AJ,aEr),e(A4,nEr),e(se,sEr),e(se,L4),e(L4,y8e),e(y8e,lEr),e(L4,iEr),e(L4,LJ),e(LJ,dEr),e(L4,cEr),e(se,fEr),e(se,y4),e(y4,x8e),e(x8e,mEr),e(y4,gEr),e(y4,yJ),e(yJ,hEr),e(y4,pEr),e(se,_Er),e(se,x4),e(x4,$8e),e($8e,uEr),e(x4,bEr),e(x4,xJ),e(xJ,vEr),e(x4,FEr),e(se,TEr),e(se,$4),e($4,k8e),e(k8e,MEr),e($4,EEr),e($4,$J),e($J,CEr),e($4,wEr),e(se,AEr),e(se,k4),e(k4,S8e),e(S8e,LEr),e(k4,yEr),e(k4,kJ),e(kJ,xEr),e(k4,$Er),e(se,kEr),e(se,S4),e(S4,R8e),e(R8e,SEr),e(S4,REr),e(S4,SJ),e(SJ,PEr),e(S4,BEr),e(se,NEr),e(se,R4),e(R4,P8e),e(P8e,IEr),e(R4,qEr),e(R4,RJ),e(RJ,jEr),e(R4,DEr),e(se,GEr),e(se,P4),e(P4,B8e),e(B8e,OEr),e(P4,VEr),e(P4,PJ),e(PJ,XEr),e(P4,zEr),e(se,QEr),e(se,B4),e(B4,N8e),e(N8e,WEr),e(B4,HEr),e(B4,BJ),e(BJ,UEr),e(B4,JEr),e(se,YEr),e(se,N4),e(N4,I8e),e(I8e,KEr),e(N4,ZEr),e(N4,NJ),e(NJ,eCr),e(N4,oCr),e(se,rCr),e(se,I4),e(I4,q8e),e(q8e,tCr),e(I4,aCr),e(I4,IJ),e(IJ,nCr),e(I4,sCr),e(se,lCr),e(se,q4),e(q4,j8e),e(j8e,iCr),e(q4,dCr),e(q4,qJ),e(qJ,cCr),e(q4,fCr),e(se,mCr),e(se,j4),e(j4,D8e),e(D8e,gCr),e(j4,hCr),e(j4,jJ),e(jJ,pCr),e(j4,_Cr),e(se,uCr),e(se,D4),e(D4,G8e),e(G8e,bCr),e(D4,vCr),e(D4,DJ),e(DJ,FCr),e(D4,TCr),e(se,MCr),e(se,G4),e(G4,O8e),e(O8e,ECr),e(G4,CCr),e(G4,GJ),e(GJ,wCr),e(G4,ACr),e(se,LCr),e(se,O4),e(O4,V8e),e(V8e,yCr),e(O4,xCr),e(O4,OJ),e(OJ,$Cr),e(O4,kCr),e($r,SCr),M(V4,$r,null),b(f,xze,u),b(f,gc,u),e(gc,X4),e(X4,X8e),M(nx,X8e,null),e(gc,RCr),e(gc,z8e),e(z8e,PCr),b(f,$ze,u),b(f,tr,u),M(sx,tr,null),e(tr,BCr),e(tr,hc),e(hc,NCr),e(hc,VJ),e(VJ,ICr),e(hc,qCr),e(hc,XJ),e(XJ,jCr),e(hc,DCr),e(tr,GCr),e(tr,lx),e(lx,OCr),e(lx,Q8e),e(Q8e,VCr),e(lx,XCr),e(tr,zCr),e(tr,Bt),M(ix,Bt,null),e(Bt,QCr),e(Bt,W8e),e(W8e,WCr),e(Bt,HCr),e(Bt,pc),e(pc,UCr),e(pc,H8e),e(H8e,JCr),e(pc,YCr),e(pc,zJ),e(zJ,KCr),e(pc,ZCr),e(Bt,e3r),M(z4,Bt,null),e(tr,o3r),e(tr,kr),M(dx,kr,null),e(kr,r3r),e(kr,U8e),e(U8e,t3r),e(kr,a3r),e(kr,dn),e(dn,n3r),e(dn,J8e),e(J8e,s3r),e(dn,l3r),e(dn,Y8e),e(Y8e,i3r),e(dn,d3r),e(dn,K8e),e(K8e,c3r),e(dn,f3r),e(kr,m3r),e(kr,Me),e(Me,Q4),e(Q4,Z8e),e(Z8e,g3r),e(Q4,h3r),e(Q4,QJ),e(QJ,p3r),e(Q4,_3r),e(Me,u3r),e(Me,W4),e(W4,eMe),e(eMe,b3r),e(W4,v3r),e(W4,WJ),e(WJ,F3r),e(W4,T3r),e(Me,M3r),e(Me,H4),e(H4,oMe),e(oMe,E3r),e(H4,C3r),e(H4,HJ),e(HJ,w3r),e(H4,A3r),e(Me,L3r),e(Me,U4),e(U4,rMe),e(rMe,y3r),e(U4,x3r),e(U4,UJ),e(UJ,$3r),e(U4,k3r),e(Me,S3r),e(Me,J4),e(J4,tMe),e(tMe,R3r),e(J4,P3r),e(J4,JJ),e(JJ,B3r),e(J4,N3r),e(Me,I3r),e(Me,Y4),e(Y4,aMe),e(aMe,q3r),e(Y4,j3r),e(Y4,YJ),e(YJ,D3r),e(Y4,G3r),e(Me,O3r),e(Me,K4),e(K4,nMe),e(nMe,V3r),e(K4,X3r),e(K4,KJ),e(KJ,z3r),e(K4,Q3r),e(Me,W3r),e(Me,Z4),e(Z4,sMe),e(sMe,H3r),e(Z4,U3r),e(Z4,ZJ),e(ZJ,J3r),e(Z4,Y3r),e(Me,K3r),e(Me,eE),e(eE,lMe),e(lMe,Z3r),e(eE,e5r),e(eE,eY),e(eY,o5r),e(eE,r5r),e(Me,t5r),e(Me,oE),e(oE,iMe),e(iMe,a5r),e(oE,n5r),e(oE,oY),e(oY,s5r),e(oE,l5r),e(Me,i5r),e(Me,rE),e(rE,dMe),e(dMe,d5r),e(rE,c5r),e(rE,rY),e(rY,f5r),e(rE,m5r),e(Me,g5r),e(Me,tE),e(tE,cMe),e(cMe,h5r),e(tE,p5r),e(tE,tY),e(tY,_5r),e(tE,u5r),e(Me,b5r),e(Me,aE),e(aE,fMe),e(fMe,v5r),e(aE,F5r),e(aE,aY),e(aY,T5r),e(aE,M5r),e(kr,E5r),M(nE,kr,null),b(f,kze,u),b(f,_c,u),e(_c,sE),e(sE,mMe),M(cx,mMe,null),e(_c,C5r),e(_c,gMe),e(gMe,w5r),b(f,Sze,u),b(f,ar,u),M(fx,ar,null),e(ar,A5r),e(ar,uc),e(uc,L5r),e(uc,nY),e(nY,y5r),e(uc,x5r),e(uc,sY),e(sY,$5r),e(uc,k5r),e(ar,S5r),e(ar,mx),e(mx,R5r),e(mx,hMe),e(hMe,P5r),e(mx,B5r),e(ar,N5r),e(ar,Nt),M(gx,Nt,null),e(Nt,I5r),e(Nt,pMe),e(pMe,q5r),e(Nt,j5r),e(Nt,bc),e(bc,D5r),e(bc,_Me),e(_Me,G5r),e(bc,O5r),e(bc,lY),e(lY,V5r),e(bc,X5r),e(Nt,z5r),M(lE,Nt,null),e(ar,Q5r),e(ar,Sr),M(hx,Sr,null),e(Sr,W5r),e(Sr,uMe),e(uMe,H5r),e(Sr,U5r),e(Sr,cn),e(cn,J5r),e(cn,bMe),e(bMe,Y5r),e(cn,K5r),e(cn,vMe),e(vMe,Z5r),e(cn,ewr),e(cn,FMe),e(FMe,owr),e(cn,rwr),e(Sr,twr),e(Sr,Qe),e(Qe,iE),e(iE,TMe),e(TMe,awr),e(iE,nwr),e(iE,iY),e(iY,swr),e(iE,lwr),e(Qe,iwr),e(Qe,dE),e(dE,MMe),e(MMe,dwr),e(dE,cwr),e(dE,dY),e(dY,fwr),e(dE,mwr),e(Qe,gwr),e(Qe,Ks),e(Ks,EMe),e(EMe,hwr),e(Ks,pwr),e(Ks,cY),e(cY,_wr),e(Ks,uwr),e(Ks,fY),e(fY,bwr),e(Ks,vwr),e(Qe,Fwr),e(Qe,cE),e(cE,CMe),e(CMe,Twr),e(cE,Mwr),e(cE,mY),e(mY,Ewr),e(cE,Cwr),e(Qe,wwr),e(Qe,fE),e(fE,wMe),e(wMe,Awr),e(fE,Lwr),e(fE,gY),e(gY,ywr),e(fE,xwr),e(Qe,$wr),e(Qe,mE),e(mE,AMe),e(AMe,kwr),e(mE,Swr),e(mE,hY),e(hY,Rwr),e(mE,Pwr),e(Qe,Bwr),e(Qe,gE),e(gE,LMe),e(LMe,Nwr),e(gE,Iwr),e(gE,pY),e(pY,qwr),e(gE,jwr),e(Sr,Dwr),M(hE,Sr,null),b(f,Rze,u),b(f,vc,u),e(vc,pE),e(pE,yMe),M(px,yMe,null),e(vc,Gwr),e(vc,xMe),e(xMe,Owr),b(f,Pze,u),b(f,nr,u),M(_x,nr,null),e(nr,Vwr),e(nr,Fc),e(Fc,Xwr),e(Fc,_Y),e(_Y,zwr),e(Fc,Qwr),e(Fc,uY),e(uY,Wwr),e(Fc,Hwr),e(nr,Uwr),e(nr,ux),e(ux,Jwr),e(ux,$Me),e($Me,Ywr),e(ux,Kwr),e(nr,Zwr),e(nr,It),M(bx,It,null),e(It,eAr),e(It,kMe),e(kMe,oAr),e(It,rAr),e(It,Tc),e(Tc,tAr),e(Tc,SMe),e(SMe,aAr),e(Tc,nAr),e(Tc,bY),e(bY,sAr),e(Tc,lAr),e(It,iAr),M(_E,It,null),e(nr,dAr),e(nr,Rr),M(vx,Rr,null),e(Rr,cAr),e(Rr,RMe),e(RMe,fAr),e(Rr,mAr),e(Rr,fn),e(fn,gAr),e(fn,PMe),e(PMe,hAr),e(fn,pAr),e(fn,BMe),e(BMe,_Ar),e(fn,uAr),e(fn,NMe),e(NMe,bAr),e(fn,vAr),e(Rr,FAr),e(Rr,ie),e(ie,uE),e(uE,IMe),e(IMe,TAr),e(uE,MAr),e(uE,vY),e(vY,EAr),e(uE,CAr),e(ie,wAr),e(ie,bE),e(bE,qMe),e(qMe,AAr),e(bE,LAr),e(bE,FY),e(FY,yAr),e(bE,xAr),e(ie,$Ar),e(ie,vE),e(vE,jMe),e(jMe,kAr),e(vE,SAr),e(vE,TY),e(TY,RAr),e(vE,PAr),e(ie,BAr),e(ie,FE),e(FE,DMe),e(DMe,NAr),e(FE,IAr),e(FE,MY),e(MY,qAr),e(FE,jAr),e(ie,DAr),e(ie,TE),e(TE,GMe),e(GMe,GAr),e(TE,OAr),e(TE,EY),e(EY,VAr),e(TE,XAr),e(ie,zAr),e(ie,ME),e(ME,OMe),e(OMe,QAr),e(ME,WAr),e(ME,CY),e(CY,HAr),e(ME,UAr),e(ie,JAr),e(ie,EE),e(EE,VMe),e(VMe,YAr),e(EE,KAr),e(EE,wY),e(wY,ZAr),e(EE,e6r),e(ie,o6r),e(ie,CE),e(CE,XMe),e(XMe,r6r),e(CE,t6r),e(CE,AY),e(AY,a6r),e(CE,n6r),e(ie,s6r),e(ie,wE),e(wE,zMe),e(zMe,l6r),e(wE,i6r),e(wE,LY),e(LY,d6r),e(wE,c6r),e(ie,f6r),e(ie,AE),e(AE,QMe),e(QMe,m6r),e(AE,g6r),e(AE,yY),e(yY,h6r),e(AE,p6r),e(ie,_6r),e(ie,LE),e(LE,WMe),e(WMe,u6r),e(LE,b6r),e(LE,xY),e(xY,v6r),e(LE,F6r),e(ie,T6r),e(ie,yE),e(yE,HMe),e(HMe,M6r),e(yE,E6r),e(yE,$Y),e($Y,C6r),e(yE,w6r),e(ie,A6r),e(ie,xE),e(xE,UMe),e(UMe,L6r),e(xE,y6r),e(xE,kY),e(kY,x6r),e(xE,$6r),e(ie,k6r),e(ie,$E),e($E,JMe),e(JMe,S6r),e($E,R6r),e($E,SY),e(SY,P6r),e($E,B6r),e(ie,N6r),e(ie,kE),e(kE,YMe),e(YMe,I6r),e(kE,q6r),e(kE,RY),e(RY,j6r),e(kE,D6r),e(ie,G6r),e(ie,SE),e(SE,KMe),e(KMe,O6r),e(SE,V6r),e(SE,PY),e(PY,X6r),e(SE,z6r),e(ie,Q6r),e(ie,RE),e(RE,ZMe),e(ZMe,W6r),e(RE,H6r),e(RE,BY),e(BY,U6r),e(RE,J6r),e(ie,Y6r),e(ie,PE),e(PE,e4e),e(e4e,K6r),e(PE,Z6r),e(PE,NY),e(NY,e7r),e(PE,o7r),e(ie,r7r),e(ie,BE),e(BE,o4e),e(o4e,t7r),e(BE,a7r),e(BE,IY),e(IY,n7r),e(BE,s7r),e(ie,l7r),e(ie,NE),e(NE,r4e),e(r4e,i7r),e(NE,d7r),e(NE,qY),e(qY,c7r),e(NE,f7r),e(Rr,m7r),M(IE,Rr,null),b(f,Bze,u),b(f,Mc,u),e(Mc,qE),e(qE,t4e),M(Fx,t4e,null),e(Mc,g7r),e(Mc,a4e),e(a4e,h7r),b(f,Nze,u),b(f,sr,u),M(Tx,sr,null),e(sr,p7r),e(sr,Ec),e(Ec,_7r),e(Ec,jY),e(jY,u7r),e(Ec,b7r),e(Ec,DY),e(DY,v7r),e(Ec,F7r),e(sr,T7r),e(sr,Mx),e(Mx,M7r),e(Mx,n4e),e(n4e,E7r),e(Mx,C7r),e(sr,w7r),e(sr,qt),M(Ex,qt,null),e(qt,A7r),e(qt,s4e),e(s4e,L7r),e(qt,y7r),e(qt,Cc),e(Cc,x7r),e(Cc,l4e),e(l4e,$7r),e(Cc,k7r),e(Cc,GY),e(GY,S7r),e(Cc,R7r),e(qt,P7r),M(jE,qt,null),e(sr,B7r),e(sr,Pr),M(Cx,Pr,null),e(Pr,N7r),e(Pr,i4e),e(i4e,I7r),e(Pr,q7r),e(Pr,mn),e(mn,j7r),e(mn,d4e),e(d4e,D7r),e(mn,G7r),e(mn,c4e),e(c4e,O7r),e(mn,V7r),e(mn,f4e),e(f4e,X7r),e(mn,z7r),e(Pr,Q7r),e(Pr,xe),e(xe,DE),e(DE,m4e),e(m4e,W7r),e(DE,H7r),e(DE,OY),e(OY,U7r),e(DE,J7r),e(xe,Y7r),e(xe,GE),e(GE,g4e),e(g4e,K7r),e(GE,Z7r),e(GE,VY),e(VY,eLr),e(GE,oLr),e(xe,rLr),e(xe,OE),e(OE,h4e),e(h4e,tLr),e(OE,aLr),e(OE,XY),e(XY,nLr),e(OE,sLr),e(xe,lLr),e(xe,VE),e(VE,p4e),e(p4e,iLr),e(VE,dLr),e(VE,zY),e(zY,cLr),e(VE,fLr),e(xe,mLr),e(xe,XE),e(XE,_4e),e(_4e,gLr),e(XE,hLr),e(XE,QY),e(QY,pLr),e(XE,_Lr),e(xe,uLr),e(xe,zE),e(zE,u4e),e(u4e,bLr),e(zE,vLr),e(zE,WY),e(WY,FLr),e(zE,TLr),e(xe,MLr),e(xe,QE),e(QE,b4e),e(b4e,ELr),e(QE,CLr),e(QE,HY),e(HY,wLr),e(QE,ALr),e(xe,LLr),e(xe,WE),e(WE,v4e),e(v4e,yLr),e(WE,xLr),e(WE,UY),e(UY,$Lr),e(WE,kLr),e(xe,SLr),e(xe,HE),e(HE,F4e),e(F4e,RLr),e(HE,PLr),e(HE,JY),e(JY,BLr),e(HE,NLr),e(xe,ILr),e(xe,UE),e(UE,T4e),e(T4e,qLr),e(UE,jLr),e(UE,YY),e(YY,DLr),e(UE,GLr),e(Pr,OLr),M(JE,Pr,null),b(f,Ize,u),b(f,wc,u),e(wc,YE),e(YE,M4e),M(wx,M4e,null),e(wc,VLr),e(wc,E4e),e(E4e,XLr),b(f,qze,u),b(f,lr,u),M(Ax,lr,null),e(lr,zLr),e(lr,Ac),e(Ac,QLr),e(Ac,KY),e(KY,WLr),e(Ac,HLr),e(Ac,ZY),e(ZY,ULr),e(Ac,JLr),e(lr,YLr),e(lr,Lx),e(Lx,KLr),e(Lx,C4e),e(C4e,ZLr),e(Lx,eyr),e(lr,oyr),e(lr,jt),M(yx,jt,null),e(jt,ryr),e(jt,w4e),e(w4e,tyr),e(jt,ayr),e(jt,Lc),e(Lc,nyr),e(Lc,A4e),e(A4e,syr),e(Lc,lyr),e(Lc,eK),e(eK,iyr),e(Lc,dyr),e(jt,cyr),M(KE,jt,null),e(lr,fyr),e(lr,Br),M(xx,Br,null),e(Br,myr),e(Br,L4e),e(L4e,gyr),e(Br,hyr),e(Br,gn),e(gn,pyr),e(gn,y4e),e(y4e,_yr),e(gn,uyr),e(gn,x4e),e(x4e,byr),e(gn,vyr),e(gn,$4e),e($4e,Fyr),e(gn,Tyr),e(Br,Myr),e(Br,ae),e(ae,ZE),e(ZE,k4e),e(k4e,Eyr),e(ZE,Cyr),e(ZE,oK),e(oK,wyr),e(ZE,Ayr),e(ae,Lyr),e(ae,eC),e(eC,S4e),e(S4e,yyr),e(eC,xyr),e(eC,rK),e(rK,$yr),e(eC,kyr),e(ae,Syr),e(ae,oC),e(oC,R4e),e(R4e,Ryr),e(oC,Pyr),e(oC,tK),e(tK,Byr),e(oC,Nyr),e(ae,Iyr),e(ae,rC),e(rC,P4e),e(P4e,qyr),e(rC,jyr),e(rC,aK),e(aK,Dyr),e(rC,Gyr),e(ae,Oyr),e(ae,tC),e(tC,B4e),e(B4e,Vyr),e(tC,Xyr),e(tC,nK),e(nK,zyr),e(tC,Qyr),e(ae,Wyr),e(ae,aC),e(aC,N4e),e(N4e,Hyr),e(aC,Uyr),e(aC,sK),e(sK,Jyr),e(aC,Yyr),e(ae,Kyr),e(ae,nC),e(nC,I4e),e(I4e,Zyr),e(nC,e9r),e(nC,lK),e(lK,o9r),e(nC,r9r),e(ae,t9r),e(ae,sC),e(sC,q4e),e(q4e,a9r),e(sC,n9r),e(sC,iK),e(iK,s9r),e(sC,l9r),e(ae,i9r),e(ae,lC),e(lC,j4e),e(j4e,d9r),e(lC,c9r),e(lC,dK),e(dK,f9r),e(lC,m9r),e(ae,g9r),e(ae,iC),e(iC,D4e),e(D4e,h9r),e(iC,p9r),e(iC,cK),e(cK,_9r),e(iC,u9r),e(ae,b9r),e(ae,dC),e(dC,G4e),e(G4e,v9r),e(dC,F9r),e(dC,fK),e(fK,T9r),e(dC,M9r),e(ae,E9r),e(ae,cC),e(cC,O4e),e(O4e,C9r),e(cC,w9r),e(cC,mK),e(mK,A9r),e(cC,L9r),e(ae,y9r),e(ae,fC),e(fC,V4e),e(V4e,x9r),e(fC,$9r),e(fC,gK),e(gK,k9r),e(fC,S9r),e(ae,R9r),e(ae,mC),e(mC,X4e),e(X4e,P9r),e(mC,B9r),e(mC,hK),e(hK,N9r),e(mC,I9r),e(ae,q9r),e(ae,gC),e(gC,z4e),e(z4e,j9r),e(gC,D9r),e(gC,pK),e(pK,G9r),e(gC,O9r),e(ae,V9r),e(ae,hC),e(hC,Q4e),e(Q4e,X9r),e(hC,z9r),e(hC,_K),e(_K,Q9r),e(hC,W9r),e(ae,H9r),e(ae,pC),e(pC,W4e),e(W4e,U9r),e(pC,J9r),e(pC,uK),e(uK,Y9r),e(pC,K9r),e(ae,Z9r),e(ae,_C),e(_C,H4e),e(H4e,exr),e(_C,oxr),e(_C,bK),e(bK,rxr),e(_C,txr),e(ae,axr),e(ae,uC),e(uC,U4e),e(U4e,nxr),e(uC,sxr),e(uC,vK),e(vK,lxr),e(uC,ixr),e(ae,dxr),e(ae,bC),e(bC,J4e),e(J4e,cxr),e(bC,fxr),e(bC,FK),e(FK,mxr),e(bC,gxr),e(ae,hxr),e(ae,vC),e(vC,Y4e),e(Y4e,pxr),e(vC,_xr),e(vC,TK),e(TK,uxr),e(vC,bxr),e(ae,vxr),e(ae,FC),e(FC,K4e),e(K4e,Fxr),e(FC,Txr),e(FC,MK),e(MK,Mxr),e(FC,Exr),e(ae,Cxr),e(ae,TC),e(TC,Z4e),e(Z4e,wxr),e(TC,Axr),e(TC,EK),e(EK,Lxr),e(TC,yxr),e(ae,xxr),e(ae,MC),e(MC,eEe),e(eEe,$xr),e(MC,kxr),e(MC,CK),e(CK,Sxr),e(MC,Rxr),e(ae,Pxr),e(ae,EC),e(EC,oEe),e(oEe,Bxr),e(EC,Nxr),e(EC,wK),e(wK,Ixr),e(EC,qxr),e(ae,jxr),e(ae,CC),e(CC,rEe),e(rEe,Dxr),e(CC,Gxr),e(CC,AK),e(AK,Oxr),e(CC,Vxr),e(Br,Xxr),M(wC,Br,null),b(f,jze,u),b(f,yc,u),e(yc,AC),e(AC,tEe),M($x,tEe,null),e(yc,zxr),e(yc,aEe),e(aEe,Qxr),b(f,Dze,u),b(f,ir,u),M(kx,ir,null),e(ir,Wxr),e(ir,xc),e(xc,Hxr),e(xc,LK),e(LK,Uxr),e(xc,Jxr),e(xc,yK),e(yK,Yxr),e(xc,Kxr),e(ir,Zxr),e(ir,Sx),e(Sx,e$r),e(Sx,nEe),e(nEe,o$r),e(Sx,r$r),e(ir,t$r),e(ir,Dt),M(Rx,Dt,null),e(Dt,a$r),e(Dt,sEe),e(sEe,n$r),e(Dt,s$r),e(Dt,$c),e($c,l$r),e($c,lEe),e(lEe,i$r),e($c,d$r),e($c,xK),e(xK,c$r),e($c,f$r),e(Dt,m$r),M(LC,Dt,null),e(ir,g$r),e(ir,Nr),M(Px,Nr,null),e(Nr,h$r),e(Nr,iEe),e(iEe,p$r),e(Nr,_$r),e(Nr,hn),e(hn,u$r),e(hn,dEe),e(dEe,b$r),e(hn,v$r),e(hn,cEe),e(cEe,F$r),e(hn,T$r),e(hn,fEe),e(fEe,M$r),e(hn,E$r),e(Nr,C$r),e(Nr,ue),e(ue,yC),e(yC,mEe),e(mEe,w$r),e(yC,A$r),e(yC,$K),e($K,L$r),e(yC,y$r),e(ue,x$r),e(ue,xC),e(xC,gEe),e(gEe,$$r),e(xC,k$r),e(xC,kK),e(kK,S$r),e(xC,R$r),e(ue,P$r),e(ue,$C),e($C,hEe),e(hEe,B$r),e($C,N$r),e($C,SK),e(SK,I$r),e($C,q$r),e(ue,j$r),e(ue,kC),e(kC,pEe),e(pEe,D$r),e(kC,G$r),e(kC,RK),e(RK,O$r),e(kC,V$r),e(ue,X$r),e(ue,SC),e(SC,_Ee),e(_Ee,z$r),e(SC,Q$r),e(SC,PK),e(PK,W$r),e(SC,H$r),e(ue,U$r),e(ue,RC),e(RC,uEe),e(uEe,J$r),e(RC,Y$r),e(RC,BK),e(BK,K$r),e(RC,Z$r),e(ue,ekr),e(ue,PC),e(PC,bEe),e(bEe,okr),e(PC,rkr),e(PC,NK),e(NK,tkr),e(PC,akr),e(ue,nkr),e(ue,BC),e(BC,vEe),e(vEe,skr),e(BC,lkr),e(BC,IK),e(IK,ikr),e(BC,dkr),e(ue,ckr),e(ue,NC),e(NC,FEe),e(FEe,fkr),e(NC,mkr),e(NC,qK),e(qK,gkr),e(NC,hkr),e(ue,pkr),e(ue,IC),e(IC,TEe),e(TEe,_kr),e(IC,ukr),e(IC,jK),e(jK,bkr),e(IC,vkr),e(ue,Fkr),e(ue,qC),e(qC,MEe),e(MEe,Tkr),e(qC,Mkr),e(qC,DK),e(DK,Ekr),e(qC,Ckr),e(ue,wkr),e(ue,jC),e(jC,EEe),e(EEe,Akr),e(jC,Lkr),e(jC,GK),e(GK,ykr),e(jC,xkr),e(ue,$kr),e(ue,DC),e(DC,CEe),e(CEe,kkr),e(DC,Skr),e(DC,OK),e(OK,Rkr),e(DC,Pkr),e(ue,Bkr),e(ue,GC),e(GC,wEe),e(wEe,Nkr),e(GC,Ikr),e(GC,VK),e(VK,qkr),e(GC,jkr),e(ue,Dkr),e(ue,OC),e(OC,AEe),e(AEe,Gkr),e(OC,Okr),e(OC,XK),e(XK,Vkr),e(OC,Xkr),e(ue,zkr),e(ue,VC),e(VC,LEe),e(LEe,Qkr),e(VC,Wkr),e(VC,zK),e(zK,Hkr),e(VC,Ukr),e(ue,Jkr),e(ue,XC),e(XC,yEe),e(yEe,Ykr),e(XC,Kkr),e(XC,QK),e(QK,Zkr),e(XC,eSr),e(Nr,oSr),M(zC,Nr,null),b(f,Gze,u),b(f,kc,u),e(kc,QC),e(QC,xEe),M(Bx,xEe,null),e(kc,rSr),e(kc,$Ee),e($Ee,tSr),b(f,Oze,u),b(f,dr,u),M(Nx,dr,null),e(dr,aSr),e(dr,Sc),e(Sc,nSr),e(Sc,WK),e(WK,sSr),e(Sc,lSr),e(Sc,HK),e(HK,iSr),e(Sc,dSr),e(dr,cSr),e(dr,Ix),e(Ix,fSr),e(Ix,kEe),e(kEe,mSr),e(Ix,gSr),e(dr,hSr),e(dr,Gt),M(qx,Gt,null),e(Gt,pSr),e(Gt,SEe),e(SEe,_Sr),e(Gt,uSr),e(Gt,Rc),e(Rc,bSr),e(Rc,REe),e(REe,vSr),e(Rc,FSr),e(Rc,UK),e(UK,TSr),e(Rc,MSr),e(Gt,ESr),M(WC,Gt,null),e(dr,CSr),e(dr,Ir),M(jx,Ir,null),e(Ir,wSr),e(Ir,PEe),e(PEe,ASr),e(Ir,LSr),e(Ir,pn),e(pn,ySr),e(pn,BEe),e(BEe,xSr),e(pn,$Sr),e(pn,NEe),e(NEe,kSr),e(pn,SSr),e(pn,IEe),e(IEe,RSr),e(pn,PSr),e(Ir,BSr),e(Ir,Dx),e(Dx,HC),e(HC,qEe),e(qEe,NSr),e(HC,ISr),e(HC,JK),e(JK,qSr),e(HC,jSr),e(Dx,DSr),e(Dx,UC),e(UC,jEe),e(jEe,GSr),e(UC,OSr),e(UC,YK),e(YK,VSr),e(UC,XSr),e(Ir,zSr),M(JC,Ir,null),b(f,Vze,u),b(f,Pc,u),e(Pc,YC),e(YC,DEe),M(Gx,DEe,null),e(Pc,QSr),e(Pc,GEe),e(GEe,WSr),b(f,Xze,u),b(f,cr,u),M(Ox,cr,null),e(cr,HSr),e(cr,Bc),e(Bc,USr),e(Bc,KK),e(KK,JSr),e(Bc,YSr),e(Bc,ZK),e(ZK,KSr),e(Bc,ZSr),e(cr,eRr),e(cr,Vx),e(Vx,oRr),e(Vx,OEe),e(OEe,rRr),e(Vx,tRr),e(cr,aRr),e(cr,Ot),M(Xx,Ot,null),e(Ot,nRr),e(Ot,VEe),e(VEe,sRr),e(Ot,lRr),e(Ot,Nc),e(Nc,iRr),e(Nc,XEe),e(XEe,dRr),e(Nc,cRr),e(Nc,eZ),e(eZ,fRr),e(Nc,mRr),e(Ot,gRr),M(KC,Ot,null),e(cr,hRr),e(cr,qr),M(zx,qr,null),e(qr,pRr),e(qr,zEe),e(zEe,_Rr),e(qr,uRr),e(qr,_n),e(_n,bRr),e(_n,QEe),e(QEe,vRr),e(_n,FRr),e(_n,WEe),e(WEe,TRr),e(_n,MRr),e(_n,HEe),e(HEe,ERr),e(_n,CRr),e(qr,wRr),e(qr,UEe),e(UEe,ZC),e(ZC,JEe),e(JEe,ARr),e(ZC,LRr),e(ZC,oZ),e(oZ,yRr),e(ZC,xRr),e(qr,$Rr),M(e3,qr,null),b(f,zze,u),b(f,Ic,u),e(Ic,o3),e(o3,YEe),M(Qx,YEe,null),e(Ic,kRr),e(Ic,KEe),e(KEe,SRr),b(f,Qze,u),b(f,fr,u),M(Wx,fr,null),e(fr,RRr),e(fr,qc),e(qc,PRr),e(qc,rZ),e(rZ,BRr),e(qc,NRr),e(qc,tZ),e(tZ,IRr),e(qc,qRr),e(fr,jRr),e(fr,Hx),e(Hx,DRr),e(Hx,ZEe),e(ZEe,GRr),e(Hx,ORr),e(fr,VRr),e(fr,Vt),M(Ux,Vt,null),e(Vt,XRr),e(Vt,eCe),e(eCe,zRr),e(Vt,QRr),e(Vt,jc),e(jc,WRr),e(jc,oCe),e(oCe,HRr),e(jc,URr),e(jc,aZ),e(aZ,JRr),e(jc,YRr),e(Vt,KRr),M(r3,Vt,null),e(fr,ZRr),e(fr,jr),M(Jx,jr,null),e(jr,ePr),e(jr,rCe),e(rCe,oPr),e(jr,rPr),e(jr,un),e(un,tPr),e(un,tCe),e(tCe,aPr),e(un,nPr),e(un,aCe),e(aCe,sPr),e(un,lPr),e(un,nCe),e(nCe,iPr),e(un,dPr),e(jr,cPr),e(jr,de),e(de,t3),e(t3,sCe),e(sCe,fPr),e(t3,mPr),e(t3,nZ),e(nZ,gPr),e(t3,hPr),e(de,pPr),e(de,a3),e(a3,lCe),e(lCe,_Pr),e(a3,uPr),e(a3,sZ),e(sZ,bPr),e(a3,vPr),e(de,FPr),e(de,n3),e(n3,iCe),e(iCe,TPr),e(n3,MPr),e(n3,lZ),e(lZ,EPr),e(n3,CPr),e(de,wPr),e(de,s3),e(s3,dCe),e(dCe,APr),e(s3,LPr),e(s3,iZ),e(iZ,yPr),e(s3,xPr),e(de,$Pr),e(de,l3),e(l3,cCe),e(cCe,kPr),e(l3,SPr),e(l3,dZ),e(dZ,RPr),e(l3,PPr),e(de,BPr),e(de,i3),e(i3,fCe),e(fCe,NPr),e(i3,IPr),e(i3,cZ),e(cZ,qPr),e(i3,jPr),e(de,DPr),e(de,d3),e(d3,mCe),e(mCe,GPr),e(d3,OPr),e(d3,fZ),e(fZ,VPr),e(d3,XPr),e(de,zPr),e(de,c3),e(c3,gCe),e(gCe,QPr),e(c3,WPr),e(c3,mZ),e(mZ,HPr),e(c3,UPr),e(de,JPr),e(de,f3),e(f3,hCe),e(hCe,YPr),e(f3,KPr),e(f3,gZ),e(gZ,ZPr),e(f3,eBr),e(de,oBr),e(de,m3),e(m3,pCe),e(pCe,rBr),e(m3,tBr),e(m3,hZ),e(hZ,aBr),e(m3,nBr),e(de,sBr),e(de,g3),e(g3,_Ce),e(_Ce,lBr),e(g3,iBr),e(g3,pZ),e(pZ,dBr),e(g3,cBr),e(de,fBr),e(de,h3),e(h3,uCe),e(uCe,mBr),e(h3,gBr),e(h3,_Z),e(_Z,hBr),e(h3,pBr),e(de,_Br),e(de,p3),e(p3,bCe),e(bCe,uBr),e(p3,bBr),e(p3,uZ),e(uZ,vBr),e(p3,FBr),e(de,TBr),e(de,_3),e(_3,vCe),e(vCe,MBr),e(_3,EBr),e(_3,bZ),e(bZ,CBr),e(_3,wBr),e(de,ABr),e(de,u3),e(u3,FCe),e(FCe,LBr),e(u3,yBr),e(u3,vZ),e(vZ,xBr),e(u3,$Br),e(de,kBr),e(de,b3),e(b3,TCe),e(TCe,SBr),e(b3,RBr),e(b3,FZ),e(FZ,PBr),e(b3,BBr),e(de,NBr),e(de,v3),e(v3,MCe),e(MCe,IBr),e(v3,qBr),e(v3,TZ),e(TZ,jBr),e(v3,DBr),e(de,GBr),e(de,F3),e(F3,ECe),e(ECe,OBr),e(F3,VBr),e(F3,MZ),e(MZ,XBr),e(F3,zBr),e(de,QBr),e(de,T3),e(T3,CCe),e(CCe,WBr),e(T3,HBr),e(T3,EZ),e(EZ,UBr),e(T3,JBr),e(de,YBr),e(de,M3),e(M3,wCe),e(wCe,KBr),e(M3,ZBr),e(M3,CZ),e(CZ,eNr),e(M3,oNr),e(jr,rNr),M(E3,jr,null),b(f,Wze,u),b(f,Dc,u),e(Dc,C3),e(C3,ACe),M(Yx,ACe,null),e(Dc,tNr),e(Dc,LCe),e(LCe,aNr),b(f,Hze,u),b(f,mr,u),M(Kx,mr,null),e(mr,nNr),e(mr,Gc),e(Gc,sNr),e(Gc,wZ),e(wZ,lNr),e(Gc,iNr),e(Gc,AZ),e(AZ,dNr),e(Gc,cNr),e(mr,fNr),e(mr,Zx),e(Zx,mNr),e(Zx,yCe),e(yCe,gNr),e(Zx,hNr),e(mr,pNr),e(mr,Xt),M(e$,Xt,null),e(Xt,_Nr),e(Xt,xCe),e(xCe,uNr),e(Xt,bNr),e(Xt,Oc),e(Oc,vNr),e(Oc,$Ce),e($Ce,FNr),e(Oc,TNr),e(Oc,LZ),e(LZ,MNr),e(Oc,ENr),e(Xt,CNr),M(w3,Xt,null),e(mr,wNr),e(mr,Dr),M(o$,Dr,null),e(Dr,ANr),e(Dr,kCe),e(kCe,LNr),e(Dr,yNr),e(Dr,bn),e(bn,xNr),e(bn,SCe),e(SCe,$Nr),e(bn,kNr),e(bn,RCe),e(RCe,SNr),e(bn,RNr),e(bn,PCe),e(PCe,PNr),e(bn,BNr),e(Dr,NNr),e(Dr,ce),e(ce,A3),e(A3,BCe),e(BCe,INr),e(A3,qNr),e(A3,yZ),e(yZ,jNr),e(A3,DNr),e(ce,GNr),e(ce,L3),e(L3,NCe),e(NCe,ONr),e(L3,VNr),e(L3,xZ),e(xZ,XNr),e(L3,zNr),e(ce,QNr),e(ce,y3),e(y3,ICe),e(ICe,WNr),e(y3,HNr),e(y3,$Z),e($Z,UNr),e(y3,JNr),e(ce,YNr),e(ce,x3),e(x3,qCe),e(qCe,KNr),e(x3,ZNr),e(x3,kZ),e(kZ,eIr),e(x3,oIr),e(ce,rIr),e(ce,$3),e($3,jCe),e(jCe,tIr),e($3,aIr),e($3,SZ),e(SZ,nIr),e($3,sIr),e(ce,lIr),e(ce,k3),e(k3,DCe),e(DCe,iIr),e(k3,dIr),e(k3,RZ),e(RZ,cIr),e(k3,fIr),e(ce,mIr),e(ce,S3),e(S3,GCe),e(GCe,gIr),e(S3,hIr),e(S3,PZ),e(PZ,pIr),e(S3,_Ir),e(ce,uIr),e(ce,R3),e(R3,OCe),e(OCe,bIr),e(R3,vIr),e(R3,BZ),e(BZ,FIr),e(R3,TIr),e(ce,MIr),e(ce,P3),e(P3,VCe),e(VCe,EIr),e(P3,CIr),e(P3,NZ),e(NZ,wIr),e(P3,AIr),e(ce,LIr),e(ce,B3),e(B3,XCe),e(XCe,yIr),e(B3,xIr),e(B3,IZ),e(IZ,$Ir),e(B3,kIr),e(ce,SIr),e(ce,N3),e(N3,zCe),e(zCe,RIr),e(N3,PIr),e(N3,qZ),e(qZ,BIr),e(N3,NIr),e(ce,IIr),e(ce,I3),e(I3,QCe),e(QCe,qIr),e(I3,jIr),e(I3,jZ),e(jZ,DIr),e(I3,GIr),e(ce,OIr),e(ce,q3),e(q3,WCe),e(WCe,VIr),e(q3,XIr),e(q3,DZ),e(DZ,zIr),e(q3,QIr),e(ce,WIr),e(ce,j3),e(j3,HCe),e(HCe,HIr),e(j3,UIr),e(j3,GZ),e(GZ,JIr),e(j3,YIr),e(ce,KIr),e(ce,D3),e(D3,UCe),e(UCe,ZIr),e(D3,eqr),e(D3,OZ),e(OZ,oqr),e(D3,rqr),e(ce,tqr),e(ce,G3),e(G3,JCe),e(JCe,aqr),e(G3,nqr),e(G3,VZ),e(VZ,sqr),e(G3,lqr),e(ce,iqr),e(ce,O3),e(O3,YCe),e(YCe,dqr),e(O3,cqr),e(O3,XZ),e(XZ,fqr),e(O3,mqr),e(ce,gqr),e(ce,V3),e(V3,KCe),e(KCe,hqr),e(V3,pqr),e(V3,zZ),e(zZ,_qr),e(V3,uqr),e(ce,bqr),e(ce,X3),e(X3,ZCe),e(ZCe,vqr),e(X3,Fqr),e(X3,QZ),e(QZ,Tqr),e(X3,Mqr),e(ce,Eqr),e(ce,z3),e(z3,e3e),e(e3e,Cqr),e(z3,wqr),e(z3,WZ),e(WZ,Aqr),e(z3,Lqr),e(Dr,yqr),M(Q3,Dr,null),b(f,Uze,u),b(f,Vc,u),e(Vc,W3),e(W3,o3e),M(r$,o3e,null),e(Vc,xqr),e(Vc,r3e),e(r3e,$qr),b(f,Jze,u),b(f,gr,u),M(t$,gr,null),e(gr,kqr),e(gr,Xc),e(Xc,Sqr),e(Xc,HZ),e(HZ,Rqr),e(Xc,Pqr),e(Xc,UZ),e(UZ,Bqr),e(Xc,Nqr),e(gr,Iqr),e(gr,a$),e(a$,qqr),e(a$,t3e),e(t3e,jqr),e(a$,Dqr),e(gr,Gqr),e(gr,zt),M(n$,zt,null),e(zt,Oqr),e(zt,a3e),e(a3e,Vqr),e(zt,Xqr),e(zt,zc),e(zc,zqr),e(zc,n3e),e(n3e,Qqr),e(zc,Wqr),e(zc,JZ),e(JZ,Hqr),e(zc,Uqr),e(zt,Jqr),M(H3,zt,null),e(gr,Yqr),e(gr,Gr),M(s$,Gr,null),e(Gr,Kqr),e(Gr,s3e),e(s3e,Zqr),e(Gr,ejr),e(Gr,vn),e(vn,ojr),e(vn,l3e),e(l3e,rjr),e(vn,tjr),e(vn,i3e),e(i3e,ajr),e(vn,njr),e(vn,d3e),e(d3e,sjr),e(vn,ljr),e(Gr,ijr),e(Gr,c3e),e(c3e,U3),e(U3,f3e),e(f3e,djr),e(U3,cjr),e(U3,YZ),e(YZ,fjr),e(U3,mjr),e(Gr,gjr),M(J3,Gr,null),b(f,Yze,u),b(f,Qc,u),e(Qc,Y3),e(Y3,m3e),M(l$,m3e,null),e(Qc,hjr),e(Qc,g3e),e(g3e,pjr),b(f,Kze,u),b(f,hr,u),M(i$,hr,null),e(hr,_jr),e(hr,Wc),e(Wc,ujr),e(Wc,KZ),e(KZ,bjr),e(Wc,vjr),e(Wc,ZZ),e(ZZ,Fjr),e(Wc,Tjr),e(hr,Mjr),e(hr,d$),e(d$,Ejr),e(d$,h3e),e(h3e,Cjr),e(d$,wjr),e(hr,Ajr),e(hr,Qt),M(c$,Qt,null),e(Qt,Ljr),e(Qt,p3e),e(p3e,yjr),e(Qt,xjr),e(Qt,Hc),e(Hc,$jr),e(Hc,_3e),e(_3e,kjr),e(Hc,Sjr),e(Hc,eee),e(eee,Rjr),e(Hc,Pjr),e(Qt,Bjr),M(K3,Qt,null),e(hr,Njr),e(hr,Or),M(f$,Or,null),e(Or,Ijr),e(Or,u3e),e(u3e,qjr),e(Or,jjr),e(Or,Fn),e(Fn,Djr),e(Fn,b3e),e(b3e,Gjr),e(Fn,Ojr),e(Fn,v3e),e(v3e,Vjr),e(Fn,Xjr),e(Fn,F3e),e(F3e,zjr),e(Fn,Qjr),e(Or,Wjr),e(Or,T3e),e(T3e,Z3),e(Z3,M3e),e(M3e,Hjr),e(Z3,Ujr),e(Z3,oee),e(oee,Jjr),e(Z3,Yjr),e(Or,Kjr),M(e5,Or,null),b(f,Zze,u),b(f,Uc,u),e(Uc,o5),e(o5,E3e),M(m$,E3e,null),e(Uc,Zjr),e(Uc,C3e),e(C3e,eDr),b(f,eQe,u),b(f,pr,u),M(g$,pr,null),e(pr,oDr),e(pr,Jc),e(Jc,rDr),e(Jc,ree),e(ree,tDr),e(Jc,aDr),e(Jc,tee),e(tee,nDr),e(Jc,sDr),e(pr,lDr),e(pr,h$),e(h$,iDr),e(h$,w3e),e(w3e,dDr),e(h$,cDr),e(pr,fDr),e(pr,Wt),M(p$,Wt,null),e(Wt,mDr),e(Wt,A3e),e(A3e,gDr),e(Wt,hDr),e(Wt,Yc),e(Yc,pDr),e(Yc,L3e),e(L3e,_Dr),e(Yc,uDr),e(Yc,aee),e(aee,bDr),e(Yc,vDr),e(Wt,FDr),M(r5,Wt,null),e(pr,TDr),e(pr,Vr),M(_$,Vr,null),e(Vr,MDr),e(Vr,y3e),e(y3e,EDr),e(Vr,CDr),e(Vr,Tn),e(Tn,wDr),e(Tn,x3e),e(x3e,ADr),e(Tn,LDr),e(Tn,$3e),e($3e,yDr),e(Tn,xDr),e(Tn,k3e),e(k3e,$Dr),e(Tn,kDr),e(Vr,SDr),e(Vr,oe),e(oe,t5),e(t5,S3e),e(S3e,RDr),e(t5,PDr),e(t5,nee),e(nee,BDr),e(t5,NDr),e(oe,IDr),e(oe,a5),e(a5,R3e),e(R3e,qDr),e(a5,jDr),e(a5,see),e(see,DDr),e(a5,GDr),e(oe,ODr),e(oe,n5),e(n5,P3e),e(P3e,VDr),e(n5,XDr),e(n5,lee),e(lee,zDr),e(n5,QDr),e(oe,WDr),e(oe,s5),e(s5,B3e),e(B3e,HDr),e(s5,UDr),e(s5,iee),e(iee,JDr),e(s5,YDr),e(oe,KDr),e(oe,l5),e(l5,N3e),e(N3e,ZDr),e(l5,eGr),e(l5,dee),e(dee,oGr),e(l5,rGr),e(oe,tGr),e(oe,i5),e(i5,I3e),e(I3e,aGr),e(i5,nGr),e(i5,cee),e(cee,sGr),e(i5,lGr),e(oe,iGr),e(oe,d5),e(d5,q3e),e(q3e,dGr),e(d5,cGr),e(d5,fee),e(fee,fGr),e(d5,mGr),e(oe,gGr),e(oe,c5),e(c5,j3e),e(j3e,hGr),e(c5,pGr),e(c5,mee),e(mee,_Gr),e(c5,uGr),e(oe,bGr),e(oe,f5),e(f5,D3e),e(D3e,vGr),e(f5,FGr),e(f5,gee),e(gee,TGr),e(f5,MGr),e(oe,EGr),e(oe,m5),e(m5,G3e),e(G3e,CGr),e(m5,wGr),e(m5,hee),e(hee,AGr),e(m5,LGr),e(oe,yGr),e(oe,g5),e(g5,O3e),e(O3e,xGr),e(g5,$Gr),e(g5,pee),e(pee,kGr),e(g5,SGr),e(oe,RGr),e(oe,h5),e(h5,V3e),e(V3e,PGr),e(h5,BGr),e(h5,_ee),e(_ee,NGr),e(h5,IGr),e(oe,qGr),e(oe,p5),e(p5,X3e),e(X3e,jGr),e(p5,DGr),e(p5,uee),e(uee,GGr),e(p5,OGr),e(oe,VGr),e(oe,_5),e(_5,z3e),e(z3e,XGr),e(_5,zGr),e(_5,bee),e(bee,QGr),e(_5,WGr),e(oe,HGr),e(oe,u5),e(u5,Q3e),e(Q3e,UGr),e(u5,JGr),e(u5,vee),e(vee,YGr),e(u5,KGr),e(oe,ZGr),e(oe,b5),e(b5,W3e),e(W3e,eOr),e(b5,oOr),e(b5,Fee),e(Fee,rOr),e(b5,tOr),e(oe,aOr),e(oe,v5),e(v5,H3e),e(H3e,nOr),e(v5,sOr),e(v5,Tee),e(Tee,lOr),e(v5,iOr),e(oe,dOr),e(oe,F5),e(F5,U3e),e(U3e,cOr),e(F5,fOr),e(F5,Mee),e(Mee,mOr),e(F5,gOr),e(oe,hOr),e(oe,T5),e(T5,J3e),e(J3e,pOr),e(T5,_Or),e(T5,Eee),e(Eee,uOr),e(T5,bOr),e(oe,vOr),e(oe,M5),e(M5,Y3e),e(Y3e,FOr),e(M5,TOr),e(M5,Cee),e(Cee,MOr),e(M5,EOr),e(oe,COr),e(oe,E5),e(E5,K3e),e(K3e,wOr),e(E5,AOr),e(E5,wee),e(wee,LOr),e(E5,yOr),e(oe,xOr),e(oe,C5),e(C5,Z3e),e(Z3e,$Or),e(C5,kOr),e(C5,Aee),e(Aee,SOr),e(C5,ROr),e(oe,POr),e(oe,w5),e(w5,e5e),e(e5e,BOr),e(w5,NOr),e(w5,Lee),e(Lee,IOr),e(w5,qOr),e(oe,jOr),e(oe,A5),e(A5,o5e),e(o5e,DOr),e(A5,GOr),e(A5,yee),e(yee,OOr),e(A5,VOr),e(oe,XOr),e(oe,L5),e(L5,r5e),e(r5e,zOr),e(L5,QOr),e(L5,xee),e(xee,WOr),e(L5,HOr),e(oe,UOr),e(oe,y5),e(y5,t5e),e(t5e,JOr),e(y5,YOr),e(y5,$ee),e($ee,KOr),e(y5,ZOr),e(oe,eVr),e(oe,x5),e(x5,a5e),e(a5e,oVr),e(x5,rVr),e(x5,kee),e(kee,tVr),e(x5,aVr),e(oe,nVr),e(oe,$5),e($5,n5e),e(n5e,sVr),e($5,lVr),e($5,See),e(See,iVr),e($5,dVr),e(Vr,cVr),M(k5,Vr,null),b(f,oQe,u),b(f,Kc,u),e(Kc,S5),e(S5,s5e),M(u$,s5e,null),e(Kc,fVr),e(Kc,l5e),e(l5e,mVr),b(f,rQe,u),b(f,_r,u),M(b$,_r,null),e(_r,gVr),e(_r,Zc),e(Zc,hVr),e(Zc,Ree),e(Ree,pVr),e(Zc,_Vr),e(Zc,Pee),e(Pee,uVr),e(Zc,bVr),e(_r,vVr),e(_r,v$),e(v$,FVr),e(v$,i5e),e(i5e,TVr),e(v$,MVr),e(_r,EVr),e(_r,Ht),M(F$,Ht,null),e(Ht,CVr),e(Ht,d5e),e(d5e,wVr),e(Ht,AVr),e(Ht,ef),e(ef,LVr),e(ef,c5e),e(c5e,yVr),e(ef,xVr),e(ef,Bee),e(Bee,$Vr),e(ef,kVr),e(Ht,SVr),M(R5,Ht,null),e(_r,RVr),e(_r,Xr),M(T$,Xr,null),e(Xr,PVr),e(Xr,f5e),e(f5e,BVr),e(Xr,NVr),e(Xr,Mn),e(Mn,IVr),e(Mn,m5e),e(m5e,qVr),e(Mn,jVr),e(Mn,g5e),e(g5e,DVr),e(Mn,GVr),e(Mn,h5e),e(h5e,OVr),e(Mn,VVr),e(Xr,XVr),e(Xr,Ae),e(Ae,P5),e(P5,p5e),e(p5e,zVr),e(P5,QVr),e(P5,Nee),e(Nee,WVr),e(P5,HVr),e(Ae,UVr),e(Ae,B5),e(B5,_5e),e(_5e,JVr),e(B5,YVr),e(B5,Iee),e(Iee,KVr),e(B5,ZVr),e(Ae,eXr),e(Ae,N5),e(N5,u5e),e(u5e,oXr),e(N5,rXr),e(N5,qee),e(qee,tXr),e(N5,aXr),e(Ae,nXr),e(Ae,I5),e(I5,b5e),e(b5e,sXr),e(I5,lXr),e(I5,jee),e(jee,iXr),e(I5,dXr),e(Ae,cXr),e(Ae,q5),e(q5,v5e),e(v5e,fXr),e(q5,mXr),e(q5,Dee),e(Dee,gXr),e(q5,hXr),e(Ae,pXr),e(Ae,j5),e(j5,F5e),e(F5e,_Xr),e(j5,uXr),e(j5,Gee),e(Gee,bXr),e(j5,vXr),e(Ae,FXr),e(Ae,D5),e(D5,T5e),e(T5e,TXr),e(D5,MXr),e(D5,Oee),e(Oee,EXr),e(D5,CXr),e(Ae,wXr),e(Ae,G5),e(G5,M5e),e(M5e,AXr),e(G5,LXr),e(G5,Vee),e(Vee,yXr),e(G5,xXr),e(Ae,$Xr),e(Ae,O5),e(O5,E5e),e(E5e,kXr),e(O5,SXr),e(O5,Xee),e(Xee,RXr),e(O5,PXr),e(Ae,BXr),e(Ae,V5),e(V5,C5e),e(C5e,NXr),e(V5,IXr),e(V5,zee),e(zee,qXr),e(V5,jXr),e(Ae,DXr),e(Ae,X5),e(X5,w5e),e(w5e,GXr),e(X5,OXr),e(X5,Qee),e(Qee,VXr),e(X5,XXr),e(Xr,zXr),M(z5,Xr,null),b(f,tQe,u),b(f,of,u),e(of,Q5),e(Q5,A5e),M(M$,A5e,null),e(of,QXr),e(of,L5e),e(L5e,WXr),b(f,aQe,u),b(f,ur,u),M(E$,ur,null),e(ur,HXr),e(ur,rf),e(rf,UXr),e(rf,Wee),e(Wee,JXr),e(rf,YXr),e(rf,Hee),e(Hee,KXr),e(rf,ZXr),e(ur,ezr),e(ur,C$),e(C$,ozr),e(C$,y5e),e(y5e,rzr),e(C$,tzr),e(ur,azr),e(ur,Ut),M(w$,Ut,null),e(Ut,nzr),e(Ut,x5e),e(x5e,szr),e(Ut,lzr),e(Ut,tf),e(tf,izr),e(tf,$5e),e($5e,dzr),e(tf,czr),e(tf,Uee),e(Uee,fzr),e(tf,mzr),e(Ut,gzr),M(W5,Ut,null),e(ur,hzr),e(ur,zr),M(A$,zr,null),e(zr,pzr),e(zr,k5e),e(k5e,_zr),e(zr,uzr),e(zr,En),e(En,bzr),e(En,S5e),e(S5e,vzr),e(En,Fzr),e(En,R5e),e(R5e,Tzr),e(En,Mzr),e(En,P5e),e(P5e,Ezr),e(En,Czr),e(zr,wzr),e(zr,Ee),e(Ee,H5),e(H5,B5e),e(B5e,Azr),e(H5,Lzr),e(H5,Jee),e(Jee,yzr),e(H5,xzr),e(Ee,$zr),e(Ee,U5),e(U5,N5e),e(N5e,kzr),e(U5,Szr),e(U5,Yee),e(Yee,Rzr),e(U5,Pzr),e(Ee,Bzr),e(Ee,J5),e(J5,I5e),e(I5e,Nzr),e(J5,Izr),e(J5,Kee),e(Kee,qzr),e(J5,jzr),e(Ee,Dzr),e(Ee,Y5),e(Y5,q5e),e(q5e,Gzr),e(Y5,Ozr),e(Y5,Zee),e(Zee,Vzr),e(Y5,Xzr),e(Ee,zzr),e(Ee,K5),e(K5,j5e),e(j5e,Qzr),e(K5,Wzr),e(K5,eoe),e(eoe,Hzr),e(K5,Uzr),e(Ee,Jzr),e(Ee,Z5),e(Z5,D5e),e(D5e,Yzr),e(Z5,Kzr),e(Z5,ooe),e(ooe,Zzr),e(Z5,eQr),e(Ee,oQr),e(Ee,ew),e(ew,G5e),e(G5e,rQr),e(ew,tQr),e(ew,roe),e(roe,aQr),e(ew,nQr),e(Ee,sQr),e(Ee,ow),e(ow,O5e),e(O5e,lQr),e(ow,iQr),e(ow,toe),e(toe,dQr),e(ow,cQr),e(Ee,fQr),e(Ee,rw),e(rw,V5e),e(V5e,mQr),e(rw,gQr),e(rw,aoe),e(aoe,hQr),e(rw,pQr),e(Ee,_Qr),e(Ee,tw),e(tw,X5e),e(X5e,uQr),e(tw,bQr),e(tw,noe),e(noe,vQr),e(tw,FQr),e(Ee,TQr),e(Ee,aw),e(aw,z5e),e(z5e,MQr),e(aw,EQr),e(aw,soe),e(soe,CQr),e(aw,wQr),e(Ee,AQr),e(Ee,nw),e(nw,Q5e),e(Q5e,LQr),e(nw,yQr),e(nw,loe),e(loe,xQr),e(nw,$Qr),e(Ee,kQr),e(Ee,sw),e(sw,W5e),e(W5e,SQr),e(sw,RQr),e(sw,ioe),e(ioe,PQr),e(sw,BQr),e(zr,NQr),M(lw,zr,null),b(f,nQe,u),b(f,af,u),e(af,iw),e(iw,H5e),M(L$,H5e,null),e(af,IQr),e(af,U5e),e(U5e,qQr),b(f,sQe,u),b(f,br,u),M(y$,br,null),e(br,jQr),e(br,nf),e(nf,DQr),e(nf,doe),e(doe,GQr),e(nf,OQr),e(nf,coe),e(coe,VQr),e(nf,XQr),e(br,zQr),e(br,x$),e(x$,QQr),e(x$,J5e),e(J5e,WQr),e(x$,HQr),e(br,UQr),e(br,Jt),M($$,Jt,null),e(Jt,JQr),e(Jt,Y5e),e(Y5e,YQr),e(Jt,KQr),e(Jt,sf),e(sf,ZQr),e(sf,K5e),e(K5e,eWr),e(sf,oWr),e(sf,foe),e(foe,rWr),e(sf,tWr),e(Jt,aWr),M(dw,Jt,null),e(br,nWr),e(br,Qr),M(k$,Qr,null),e(Qr,sWr),e(Qr,Z5e),e(Z5e,lWr),e(Qr,iWr),e(Qr,Cn),e(Cn,dWr),e(Cn,ewe),e(ewe,cWr),e(Cn,fWr),e(Cn,owe),e(owe,mWr),e(Cn,gWr),e(Cn,rwe),e(rwe,hWr),e(Cn,pWr),e(Qr,_Wr),e(Qr,$e),e($e,cw),e(cw,twe),e(twe,uWr),e(cw,bWr),e(cw,moe),e(moe,vWr),e(cw,FWr),e($e,TWr),e($e,fw),e(fw,awe),e(awe,MWr),e(fw,EWr),e(fw,goe),e(goe,CWr),e(fw,wWr),e($e,AWr),e($e,mw),e(mw,nwe),e(nwe,LWr),e(mw,yWr),e(mw,hoe),e(hoe,xWr),e(mw,$Wr),e($e,kWr),e($e,gw),e(gw,swe),e(swe,SWr),e(gw,RWr),e(gw,poe),e(poe,PWr),e(gw,BWr),e($e,NWr),e($e,hw),e(hw,lwe),e(lwe,IWr),e(hw,qWr),e(hw,_oe),e(_oe,jWr),e(hw,DWr),e($e,GWr),e($e,pw),e(pw,iwe),e(iwe,OWr),e(pw,VWr),e(pw,uoe),e(uoe,XWr),e(pw,zWr),e($e,QWr),e($e,_w),e(_w,dwe),e(dwe,WWr),e(_w,HWr),e(_w,boe),e(boe,UWr),e(_w,JWr),e($e,YWr),e($e,uw),e(uw,cwe),e(cwe,KWr),e(uw,ZWr),e(uw,voe),e(voe,eHr),e(uw,oHr),e($e,rHr),e($e,bw),e(bw,fwe),e(fwe,tHr),e(bw,aHr),e(bw,Foe),e(Foe,nHr),e(bw,sHr),e($e,lHr),e($e,vw),e(vw,mwe),e(mwe,iHr),e(vw,dHr),e(vw,Toe),e(Toe,cHr),e(vw,fHr),e(Qr,mHr),M(Fw,Qr,null),b(f,lQe,u),b(f,lf,u),e(lf,Tw),e(Tw,gwe),M(S$,gwe,null),e(lf,gHr),e(lf,hwe),e(hwe,hHr),b(f,iQe,u),b(f,vr,u),M(R$,vr,null),e(vr,pHr),e(vr,df),e(df,_Hr),e(df,Moe),e(Moe,uHr),e(df,bHr),e(df,Eoe),e(Eoe,vHr),e(df,FHr),e(vr,THr),e(vr,P$),e(P$,MHr),e(P$,pwe),e(pwe,EHr),e(P$,CHr),e(vr,wHr),e(vr,Yt),M(B$,Yt,null),e(Yt,AHr),e(Yt,_we),e(_we,LHr),e(Yt,yHr),e(Yt,cf),e(cf,xHr),e(cf,uwe),e(uwe,$Hr),e(cf,kHr),e(cf,Coe),e(Coe,SHr),e(cf,RHr),e(Yt,PHr),M(Mw,Yt,null),e(vr,BHr),e(vr,Wr),M(N$,Wr,null),e(Wr,NHr),e(Wr,bwe),e(bwe,IHr),e(Wr,qHr),e(Wr,wn),e(wn,jHr),e(wn,vwe),e(vwe,DHr),e(wn,GHr),e(wn,Fwe),e(Fwe,OHr),e(wn,VHr),e(wn,Twe),e(Twe,XHr),e(wn,zHr),e(Wr,QHr),e(Wr,ke),e(ke,Ew),e(Ew,Mwe),e(Mwe,WHr),e(Ew,HHr),e(Ew,woe),e(woe,UHr),e(Ew,JHr),e(ke,YHr),e(ke,Cw),e(Cw,Ewe),e(Ewe,KHr),e(Cw,ZHr),e(Cw,Aoe),e(Aoe,eUr),e(Cw,oUr),e(ke,rUr),e(ke,ww),e(ww,Cwe),e(Cwe,tUr),e(ww,aUr),e(ww,Loe),e(Loe,nUr),e(ww,sUr),e(ke,lUr),e(ke,Aw),e(Aw,wwe),e(wwe,iUr),e(Aw,dUr),e(Aw,yoe),e(yoe,cUr),e(Aw,fUr),e(ke,mUr),e(ke,Lw),e(Lw,Awe),e(Awe,gUr),e(Lw,hUr),e(Lw,xoe),e(xoe,pUr),e(Lw,_Ur),e(ke,uUr),e(ke,yw),e(yw,Lwe),e(Lwe,bUr),e(yw,vUr),e(yw,$oe),e($oe,FUr),e(yw,TUr),e(ke,MUr),e(ke,xw),e(xw,ywe),e(ywe,EUr),e(xw,CUr),e(xw,koe),e(koe,wUr),e(xw,AUr),e(ke,LUr),e(ke,$w),e($w,xwe),e(xwe,yUr),e($w,xUr),e($w,Soe),e(Soe,$Ur),e($w,kUr),e(ke,SUr),e(ke,kw),e(kw,$we),e($we,RUr),e(kw,PUr),e(kw,Roe),e(Roe,BUr),e(kw,NUr),e(ke,IUr),e(ke,Sw),e(Sw,kwe),e(kwe,qUr),e(Sw,jUr),e(Sw,Poe),e(Poe,DUr),e(Sw,GUr),e(Wr,OUr),M(Rw,Wr,null),b(f,dQe,u),b(f,ff,u),e(ff,Pw),e(Pw,Swe),M(I$,Swe,null),e(ff,VUr),e(ff,Rwe),e(Rwe,XUr),b(f,cQe,u),b(f,Fr,u),M(q$,Fr,null),e(Fr,zUr),e(Fr,mf),e(mf,QUr),e(mf,Boe),e(Boe,WUr),e(mf,HUr),e(mf,Noe),e(Noe,UUr),e(mf,JUr),e(Fr,YUr),e(Fr,j$),e(j$,KUr),e(j$,Pwe),e(Pwe,ZUr),e(j$,eJr),e(Fr,oJr),e(Fr,Kt),M(D$,Kt,null),e(Kt,rJr),e(Kt,Bwe),e(Bwe,tJr),e(Kt,aJr),e(Kt,gf),e(gf,nJr),e(gf,Nwe),e(Nwe,sJr),e(gf,lJr),e(gf,Ioe),e(Ioe,iJr),e(gf,dJr),e(Kt,cJr),M(Bw,Kt,null),e(Fr,fJr),e(Fr,Hr),M(G$,Hr,null),e(Hr,mJr),e(Hr,Iwe),e(Iwe,gJr),e(Hr,hJr),e(Hr,An),e(An,pJr),e(An,qwe),e(qwe,_Jr),e(An,uJr),e(An,jwe),e(jwe,bJr),e(An,vJr),e(An,Dwe),e(Dwe,FJr),e(An,TJr),e(Hr,MJr),e(Hr,Se),e(Se,Nw),e(Nw,Gwe),e(Gwe,EJr),e(Nw,CJr),e(Nw,qoe),e(qoe,wJr),e(Nw,AJr),e(Se,LJr),e(Se,Iw),e(Iw,Owe),e(Owe,yJr),e(Iw,xJr),e(Iw,joe),e(joe,$Jr),e(Iw,kJr),e(Se,SJr),e(Se,qw),e(qw,Vwe),e(Vwe,RJr),e(qw,PJr),e(qw,Doe),e(Doe,BJr),e(qw,NJr),e(Se,IJr),e(Se,jw),e(jw,Xwe),e(Xwe,qJr),e(jw,jJr),e(jw,Goe),e(Goe,DJr),e(jw,GJr),e(Se,OJr),e(Se,Dw),e(Dw,zwe),e(zwe,VJr),e(Dw,XJr),e(Dw,Ooe),e(Ooe,zJr),e(Dw,QJr),e(Se,WJr),e(Se,Gw),e(Gw,Qwe),e(Qwe,HJr),e(Gw,UJr),e(Gw,Voe),e(Voe,JJr),e(Gw,YJr),e(Se,KJr),e(Se,Ow),e(Ow,Wwe),e(Wwe,ZJr),e(Ow,eYr),e(Ow,Xoe),e(Xoe,oYr),e(Ow,rYr),e(Se,tYr),e(Se,Vw),e(Vw,Hwe),e(Hwe,aYr),e(Vw,nYr),e(Vw,zoe),e(zoe,sYr),e(Vw,lYr),e(Se,iYr),e(Se,Xw),e(Xw,Uwe),e(Uwe,dYr),e(Xw,cYr),e(Xw,Qoe),e(Qoe,fYr),e(Xw,mYr),e(Se,gYr),e(Se,zw),e(zw,Jwe),e(Jwe,hYr),e(zw,pYr),e(zw,Woe),e(Woe,_Yr),e(zw,uYr),e(Hr,bYr),M(Qw,Hr,null),b(f,fQe,u),b(f,hf,u),e(hf,Ww),e(Ww,Ywe),M(O$,Ywe,null),e(hf,vYr),e(hf,Kwe),e(Kwe,FYr),b(f,mQe,u),b(f,Tr,u),M(V$,Tr,null),e(Tr,TYr),e(Tr,pf),e(pf,MYr),e(pf,Hoe),e(Hoe,EYr),e(pf,CYr),e(pf,Uoe),e(Uoe,wYr),e(pf,AYr),e(Tr,LYr),e(Tr,X$),e(X$,yYr),e(X$,Zwe),e(Zwe,xYr),e(X$,$Yr),e(Tr,kYr),e(Tr,Zt),M(z$,Zt,null),e(Zt,SYr),e(Zt,eAe),e(eAe,RYr),e(Zt,PYr),e(Zt,_f),e(_f,BYr),e(_f,oAe),e(oAe,NYr),e(_f,IYr),e(_f,Joe),e(Joe,qYr),e(_f,jYr),e(Zt,DYr),M(Hw,Zt,null),e(Tr,GYr),e(Tr,Ur),M(Q$,Ur,null),e(Ur,OYr),e(Ur,rAe),e(rAe,VYr),e(Ur,XYr),e(Ur,Ln),e(Ln,zYr),e(Ln,tAe),e(tAe,QYr),e(Ln,WYr),e(Ln,aAe),e(aAe,HYr),e(Ln,UYr),e(Ln,nAe),e(nAe,JYr),e(Ln,YYr),e(Ur,KYr),e(Ur,Re),e(Re,Uw),e(Uw,sAe),e(sAe,ZYr),e(Uw,eKr),e(Uw,Yoe),e(Yoe,oKr),e(Uw,rKr),e(Re,tKr),e(Re,Jw),e(Jw,lAe),e(lAe,aKr),e(Jw,nKr),e(Jw,Koe),e(Koe,sKr),e(Jw,lKr),e(Re,iKr),e(Re,Yw),e(Yw,iAe),e(iAe,dKr),e(Yw,cKr),e(Yw,Zoe),e(Zoe,fKr),e(Yw,mKr),e(Re,gKr),e(Re,Kw),e(Kw,dAe),e(dAe,hKr),e(Kw,pKr),e(Kw,ere),e(ere,_Kr),e(Kw,uKr),e(Re,bKr),e(Re,Zw),e(Zw,cAe),e(cAe,vKr),e(Zw,FKr),e(Zw,ore),e(ore,TKr),e(Zw,MKr),e(Re,EKr),e(Re,eA),e(eA,fAe),e(fAe,CKr),e(eA,wKr),e(eA,rre),e(rre,AKr),e(eA,LKr),e(Re,yKr),e(Re,oA),e(oA,mAe),e(mAe,xKr),e(oA,$Kr),e(oA,tre),e(tre,kKr),e(oA,SKr),e(Re,RKr),e(Re,rA),e(rA,gAe),e(gAe,PKr),e(rA,BKr),e(rA,are),e(are,NKr),e(rA,IKr),e(Re,qKr),e(Re,tA),e(tA,hAe),e(hAe,jKr),e(tA,DKr),e(tA,nre),e(nre,GKr),e(tA,OKr),e(Re,VKr),e(Re,aA),e(aA,pAe),e(pAe,XKr),e(aA,zKr),e(aA,sre),e(sre,QKr),e(aA,WKr),e(Ur,HKr),M(nA,Ur,null),b(f,gQe,u),b(f,uf,u),e(uf,sA),e(sA,_Ae),M(W$,_Ae,null),e(uf,UKr),e(uf,uAe),e(uAe,JKr),b(f,hQe,u),b(f,Mr,u),M(H$,Mr,null),e(Mr,YKr),e(Mr,bf),e(bf,KKr),e(bf,lre),e(lre,ZKr),e(bf,eZr),e(bf,ire),e(ire,oZr),e(bf,rZr),e(Mr,tZr),e(Mr,U$),e(U$,aZr),e(U$,bAe),e(bAe,nZr),e(U$,sZr),e(Mr,lZr),e(Mr,ea),M(J$,ea,null),e(ea,iZr),e(ea,vAe),e(vAe,dZr),e(ea,cZr),e(ea,vf),e(vf,fZr),e(vf,FAe),e(FAe,mZr),e(vf,gZr),e(vf,dre),e(dre,hZr),e(vf,pZr),e(ea,_Zr),M(lA,ea,null),e(Mr,uZr),e(Mr,Jr),M(Y$,Jr,null),e(Jr,bZr),e(Jr,TAe),e(TAe,vZr),e(Jr,FZr),e(Jr,yn),e(yn,TZr),e(yn,MAe),e(MAe,MZr),e(yn,EZr),e(yn,EAe),e(EAe,CZr),e(yn,wZr),e(yn,CAe),e(CAe,AZr),e(yn,LZr),e(Jr,yZr),e(Jr,Ve),e(Ve,iA),e(iA,wAe),e(wAe,xZr),e(iA,$Zr),e(iA,cre),e(cre,kZr),e(iA,SZr),e(Ve,RZr),e(Ve,dA),e(dA,AAe),e(AAe,PZr),e(dA,BZr),e(dA,fre),e(fre,NZr),e(dA,IZr),e(Ve,qZr),e(Ve,cA),e(cA,LAe),e(LAe,jZr),e(cA,DZr),e(cA,mre),e(mre,GZr),e(cA,OZr),e(Ve,VZr),e(Ve,fA),e(fA,yAe),e(yAe,XZr),e(fA,zZr),e(fA,gre),e(gre,QZr),e(fA,WZr),e(Ve,HZr),e(Ve,mA),e(mA,xAe),e(xAe,UZr),e(mA,JZr),e(mA,hre),e(hre,YZr),e(mA,KZr),e(Ve,ZZr),e(Ve,gA),e(gA,$Ae),e($Ae,eet),e(gA,oet),e(gA,pre),e(pre,ret),e(gA,tet),e(Ve,aet),e(Ve,hA),e(hA,kAe),e(kAe,net),e(hA,set),e(hA,_re),e(_re,iet),e(hA,det),e(Ve,cet),e(Ve,pA),e(pA,SAe),e(SAe,fet),e(pA,met),e(pA,ure),e(ure,get),e(pA,het),e(Jr,pet),M(_A,Jr,null),b(f,pQe,u),b(f,Ff,u),e(Ff,uA),e(uA,RAe),M(K$,RAe,null),e(Ff,_et),e(Ff,PAe),e(PAe,uet),b(f,_Qe,u),b(f,Er,u),M(Z$,Er,null),e(Er,bet),e(Er,Tf),e(Tf,vet),e(Tf,bre),e(bre,Fet),e(Tf,Tet),e(Tf,vre),e(vre,Met),e(Tf,Eet),e(Er,Cet),e(Er,ek),e(ek,wet),e(ek,BAe),e(BAe,Aet),e(ek,Let),e(Er,yet),e(Er,oa),M(ok,oa,null),e(oa,xet),e(oa,NAe),e(NAe,$et),e(oa,ket),e(oa,Mf),e(Mf,Set),e(Mf,IAe),e(IAe,Ret),e(Mf,Pet),e(Mf,Fre),e(Fre,Bet),e(Mf,Net),e(oa,Iet),M(bA,oa,null),e(Er,qet),e(Er,Yr),M(rk,Yr,null),e(Yr,jet),e(Yr,qAe),e(qAe,Det),e(Yr,Get),e(Yr,xn),e(xn,Oet),e(xn,jAe),e(jAe,Vet),e(xn,Xet),e(xn,DAe),e(DAe,zet),e(xn,Qet),e(xn,GAe),e(GAe,Wet),e(xn,Het),e(Yr,Uet),e(Yr,Xe),e(Xe,vA),e(vA,OAe),e(OAe,Jet),e(vA,Yet),e(vA,Tre),e(Tre,Ket),e(vA,Zet),e(Xe,eot),e(Xe,FA),e(FA,VAe),e(VAe,oot),e(FA,rot),e(FA,Mre),e(Mre,tot),e(FA,aot),e(Xe,not),e(Xe,TA),e(TA,XAe),e(XAe,sot),e(TA,lot),e(TA,Ere),e(Ere,iot),e(TA,dot),e(Xe,cot),e(Xe,MA),e(MA,zAe),e(zAe,fot),e(MA,mot),e(MA,Cre),e(Cre,got),e(MA,hot),e(Xe,pot),e(Xe,EA),e(EA,QAe),e(QAe,_ot),e(EA,uot),e(EA,wre),e(wre,bot),e(EA,vot),e(Xe,Fot),e(Xe,CA),e(CA,WAe),e(WAe,Tot),e(CA,Mot),e(CA,Are),e(Are,Eot),e(CA,Cot),e(Xe,wot),e(Xe,wA),e(wA,HAe),e(HAe,Aot),e(wA,Lot),e(wA,Lre),e(Lre,yot),e(wA,xot),e(Xe,$ot),e(Xe,AA),e(AA,UAe),e(UAe,kot),e(AA,Sot),e(AA,yre),e(yre,Rot),e(AA,Pot),e(Yr,Bot),M(LA,Yr,null),b(f,uQe,u),b(f,Ef,u),e(Ef,yA),e(yA,JAe),M(tk,JAe,null),e(Ef,Not),e(Ef,YAe),e(YAe,Iot),b(f,bQe,u),b(f,Cr,u),M(ak,Cr,null),e(Cr,qot),e(Cr,Cf),e(Cf,jot),e(Cf,xre),e(xre,Dot),e(Cf,Got),e(Cf,$re),e($re,Oot),e(Cf,Vot),e(Cr,Xot),e(Cr,nk),e(nk,zot),e(nk,KAe),e(KAe,Qot),e(nk,Wot),e(Cr,Hot),e(Cr,ra),M(sk,ra,null),e(ra,Uot),e(ra,ZAe),e(ZAe,Jot),e(ra,Yot),e(ra,wf),e(wf,Kot),e(wf,e6e),e(e6e,Zot),e(wf,ert),e(wf,kre),e(kre,ort),e(wf,rrt),e(ra,trt),M(xA,ra,null),e(Cr,art),e(Cr,Kr),M(lk,Kr,null),e(Kr,nrt),e(Kr,o6e),e(o6e,srt),e(Kr,lrt),e(Kr,$n),e($n,irt),e($n,r6e),e(r6e,drt),e($n,crt),e($n,t6e),e(t6e,frt),e($n,mrt),e($n,a6e),e(a6e,grt),e($n,hrt),e(Kr,prt),e(Kr,n6e),e(n6e,$A),e($A,s6e),e(s6e,_rt),e($A,urt),e($A,Sre),e(Sre,brt),e($A,vrt),e(Kr,Frt),M(kA,Kr,null),b(f,vQe,u),b(f,Af,u),e(Af,SA),e(SA,l6e),M(ik,l6e,null),e(Af,Trt),e(Af,i6e),e(i6e,Mrt),b(f,FQe,u),b(f,wr,u),M(dk,wr,null),e(wr,Ert),e(wr,Lf),e(Lf,Crt),e(Lf,Rre),e(Rre,wrt),e(Lf,Art),e(Lf,Pre),e(Pre,Lrt),e(Lf,yrt),e(wr,xrt),e(wr,ck),e(ck,$rt),e(ck,d6e),e(d6e,krt),e(ck,Srt),e(wr,Rrt),e(wr,ta),M(fk,ta,null),e(ta,Prt),e(ta,c6e),e(c6e,Brt),e(ta,Nrt),e(ta,yf),e(yf,Irt),e(yf,f6e),e(f6e,qrt),e(yf,jrt),e(yf,Bre),e(Bre,Drt),e(yf,Grt),e(ta,Ort),M(RA,ta,null),e(wr,Vrt),e(wr,Zr),M(mk,Zr,null),e(Zr,Xrt),e(Zr,m6e),e(m6e,zrt),e(Zr,Qrt),e(Zr,kn),e(kn,Wrt),e(kn,g6e),e(g6e,Hrt),e(kn,Urt),e(kn,h6e),e(h6e,Jrt),e(kn,Yrt),e(kn,p6e),e(p6e,Krt),e(kn,Zrt),e(Zr,ett),e(Zr,gk),e(gk,PA),e(PA,_6e),e(_6e,ott),e(PA,rtt),e(PA,Nre),e(Nre,ttt),e(PA,att),e(gk,ntt),e(gk,BA),e(BA,u6e),e(u6e,stt),e(BA,ltt),e(BA,Ire),e(Ire,itt),e(BA,dtt),e(Zr,ctt),M(NA,Zr,null),b(f,TQe,u),b(f,xf,u),e(xf,IA),e(IA,b6e),M(hk,b6e,null),e(xf,ftt),e(xf,v6e),e(v6e,mtt),b(f,MQe,u),b(f,Ar,u),M(pk,Ar,null),e(Ar,gtt),e(Ar,$f),e($f,htt),e($f,qre),e(qre,ptt),e($f,_tt),e($f,jre),e(jre,utt),e($f,btt),e(Ar,vtt),e(Ar,_k),e(_k,Ftt),e(_k,F6e),e(F6e,Ttt),e(_k,Mtt),e(Ar,Ett),e(Ar,aa),M(uk,aa,null),e(aa,Ctt),e(aa,T6e),e(T6e,wtt),e(aa,Att),e(aa,kf),e(kf,Ltt),e(kf,M6e),e(M6e,ytt),e(kf,xtt),e(kf,Dre),e(Dre,$tt),e(kf,ktt),e(aa,Stt),M(qA,aa,null),e(Ar,Rtt),e(Ar,et),M(bk,et,null),e(et,Ptt),e(et,E6e),e(E6e,Btt),e(et,Ntt),e(et,Sn),e(Sn,Itt),e(Sn,C6e),e(C6e,qtt),e(Sn,jtt),e(Sn,w6e),e(w6e,Dtt),e(Sn,Gtt),e(Sn,A6e),e(A6e,Ott),e(Sn,Vtt),e(et,Xtt),e(et,L6e),e(L6e,jA),e(jA,y6e),e(y6e,ztt),e(jA,Qtt),e(jA,Gre),e(Gre,Wtt),e(jA,Htt),e(et,Utt),M(DA,et,null),EQe=!0},p(f,[u]){const vk={};u&2&&(vk.$$scope={dirty:u,ctx:f}),Df.$set(vk);const x6e={};u&2&&(x6e.$$scope={dirty:u,ctx:f}),Kg.$set(x6e);const $6e={};u&2&&($6e.$$scope={dirty:u,ctx:f}),Ph.$set($6e);const k6e={};u&2&&(k6e.$$scope={dirty:u,ctx:f}),up.$set(k6e);const Fk={};u&2&&(Fk.$$scope={dirty:u,ctx:f}),bp.$set(Fk);const S6e={};u&2&&(S6e.$$scope={dirty:u,ctx:f}),jp.$set(S6e);const Rn={};u&2&&(Rn.$$scope={dirty:u,ctx:f}),Dp.$set(Rn);const R6e={};u&2&&(R6e.$$scope={dirty:u,ctx:f}),Vp.$set(R6e);const P6e={};u&2&&(P6e.$$scope={dirty:u,ctx:f}),Hu.$set(P6e);const B6e={};u&2&&(B6e.$$scope={dirty:u,ctx:f}),Ju.$set(B6e);const Tk={};u&2&&(Tk.$$scope={dirty:u,ctx:f}),V2.$set(Tk);const N6e={};u&2&&(N6e.$$scope={dirty:u,ctx:f}),z2.$set(N6e);const Mk={};u&2&&(Mk.$$scope={dirty:u,ctx:f}),R1.$set(Mk);const I6e={};u&2&&(I6e.$$scope={dirty:u,ctx:f}),B1.$set(I6e);const Ek={};u&2&&(Ek.$$scope={dirty:u,ctx:f}),Tb.$set(Ek);const q6e={};u&2&&(q6e.$$scope={dirty:u,ctx:f}),Eb.$set(q6e);const j6e={};u&2&&(j6e.$$scope={dirty:u,ctx:f}),Xb.$set(j6e);const D6e={};u&2&&(D6e.$$scope={dirty:u,ctx:f}),Qb.$set(D6e);const Sf={};u&2&&(Sf.$$scope={dirty:u,ctx:f}),Xv.$set(Sf);const G6e={};u&2&&(G6e.$$scope={dirty:u,ctx:f}),Qv.$set(G6e);const O6e={};u&2&&(O6e.$$scope={dirty:u,ctx:f}),C0.$set(O6e);const V6e={};u&2&&(V6e.$$scope={dirty:u,ctx:f}),A0.$set(V6e);const Ck={};u&2&&(Ck.$$scope={dirty:u,ctx:f}),P0.$set(Ck);const X6e={};u&2&&(X6e.$$scope={dirty:u,ctx:f}),N0.$set(X6e);const z6e={};u&2&&(z6e.$$scope={dirty:u,ctx:f}),FF.$set(z6e);const Q6e={};u&2&&(Q6e.$$scope={dirty:u,ctx:f}),MF.$set(Q6e);const nt={};u&2&&(nt.$$scope={dirty:u,ctx:f}),mT.$set(nt);const wk={};u&2&&(wk.$$scope={dirty:u,ctx:f}),hT.$set(wk);const W6e={};u&2&&(W6e.$$scope={dirty:u,ctx:f}),uT.$set(W6e);const Ak={};u&2&&(Ak.$$scope={dirty:u,ctx:f}),vT.$set(Ak);const H6e={};u&2&&(H6e.$$scope={dirty:u,ctx:f}),PT.$set(H6e);const st={};u&2&&(st.$$scope={dirty:u,ctx:f}),NT.$set(st);const U6e={};u&2&&(U6e.$$scope={dirty:u,ctx:f}),jT.$set(U6e);const Rf={};u&2&&(Rf.$$scope={dirty:u,ctx:f}),GT.$set(Rf);const J6e={};u&2&&(J6e.$$scope={dirty:u,ctx:f}),XT.$set(J6e);const Y6e={};u&2&&(Y6e.$$scope={dirty:u,ctx:f}),QT.$set(Y6e);const L={};u&2&&(L.$$scope={dirty:u,ctx:f}),t8.$set(L);const GA={};u&2&&(GA.$$scope={dirty:u,ctx:f}),n8.$set(GA);const K6e={};u&2&&(K6e.$$scope={dirty:u,ctx:f}),m8.$set(K6e);const Z6e={};u&2&&(Z6e.$$scope={dirty:u,ctx:f}),h8.$set(Z6e);const OA={};u&2&&(OA.$$scope={dirty:u,ctx:f}),A8.$set(OA);const e7e={};u&2&&(e7e.$$scope={dirty:u,ctx:f}),y8.$set(e7e);const o7e={};u&2&&(o7e.$$scope={dirty:u,ctx:f}),S8.$set(o7e);const VA={};u&2&&(VA.$$scope={dirty:u,ctx:f}),P8.$set(VA);const r7e={};u&2&&(r7e.$$scope={dirty:u,ctx:f}),G8.$set(r7e);const t7e={};u&2&&(t7e.$$scope={dirty:u,ctx:f}),V8.$set(t7e);const XA={};u&2&&(XA.$$scope={dirty:u,ctx:f}),H8.$set(XA);const a7e={};u&2&&(a7e.$$scope={dirty:u,ctx:f}),J8.$set(a7e);const n7e={};u&2&&(n7e.$$scope={dirty:u,ctx:f}),eM.$set(n7e);const zA={};u&2&&(zA.$$scope={dirty:u,ctx:f}),rM.$set(zA);const s7e={};u&2&&(s7e.$$scope={dirty:u,ctx:f}),nM.$set(s7e);const l7e={};u&2&&(l7e.$$scope={dirty:u,ctx:f}),lM.$set(l7e);const QA={};u&2&&(QA.$$scope={dirty:u,ctx:f}),hM.$set(QA);const i7e={};u&2&&(i7e.$$scope={dirty:u,ctx:f}),_M.$set(i7e);const d7e={};u&2&&(d7e.$$scope={dirty:u,ctx:f}),vM.$set(d7e);const WA={};u&2&&(WA.$$scope={dirty:u,ctx:f}),TM.$set(WA);const c7e={};u&2&&(c7e.$$scope={dirty:u,ctx:f}),u4.$set(c7e);const f7e={};u&2&&(f7e.$$scope={dirty:u,ctx:f}),v4.$set(f7e);const HA={};u&2&&(HA.$$scope={dirty:u,ctx:f}),V4.$set(HA);const m7e={};u&2&&(m7e.$$scope={dirty:u,ctx:f}),z4.$set(m7e);const g7e={};u&2&&(g7e.$$scope={dirty:u,ctx:f}),nE.$set(g7e);const UA={};u&2&&(UA.$$scope={dirty:u,ctx:f}),lE.$set(UA);const h7e={};u&2&&(h7e.$$scope={dirty:u,ctx:f}),hE.$set(h7e);const p7e={};u&2&&(p7e.$$scope={dirty:u,ctx:f}),_E.$set(p7e);const JA={};u&2&&(JA.$$scope={dirty:u,ctx:f}),IE.$set(JA);const _7e={};u&2&&(_7e.$$scope={dirty:u,ctx:f}),jE.$set(_7e);const u7e={};u&2&&(u7e.$$scope={dirty:u,ctx:f}),JE.$set(u7e);const YA={};u&2&&(YA.$$scope={dirty:u,ctx:f}),KE.$set(YA);const b7e={};u&2&&(b7e.$$scope={dirty:u,ctx:f}),wC.$set(b7e);const v7e={};u&2&&(v7e.$$scope={dirty:u,ctx:f}),LC.$set(v7e);const KA={};u&2&&(KA.$$scope={dirty:u,ctx:f}),zC.$set(KA);const F7e={};u&2&&(F7e.$$scope={dirty:u,ctx:f}),WC.$set(F7e);const T7e={};u&2&&(T7e.$$scope={dirty:u,ctx:f}),JC.$set(T7e);const ZA={};u&2&&(ZA.$$scope={dirty:u,ctx:f}),KC.$set(ZA);const M7e={};u&2&&(M7e.$$scope={dirty:u,ctx:f}),e3.$set(M7e);const E7e={};u&2&&(E7e.$$scope={dirty:u,ctx:f}),r3.$set(E7e);const e6={};u&2&&(e6.$$scope={dirty:u,ctx:f}),E3.$set(e6);const C7e={};u&2&&(C7e.$$scope={dirty:u,ctx:f}),w3.$set(C7e);const w7e={};u&2&&(w7e.$$scope={dirty:u,ctx:f}),Q3.$set(w7e);const o6={};u&2&&(o6.$$scope={dirty:u,ctx:f}),H3.$set(o6);const A7e={};u&2&&(A7e.$$scope={dirty:u,ctx:f}),J3.$set(A7e);const L7e={};u&2&&(L7e.$$scope={dirty:u,ctx:f}),K3.$set(L7e);const r6={};u&2&&(r6.$$scope={dirty:u,ctx:f}),e5.$set(r6);const y7e={};u&2&&(y7e.$$scope={dirty:u,ctx:f}),r5.$set(y7e);const x7e={};u&2&&(x7e.$$scope={dirty:u,ctx:f}),k5.$set(x7e);const t6={};u&2&&(t6.$$scope={dirty:u,ctx:f}),R5.$set(t6);const $7e={};u&2&&($7e.$$scope={dirty:u,ctx:f}),z5.$set($7e);const k7e={};u&2&&(k7e.$$scope={dirty:u,ctx:f}),W5.$set(k7e);const a6={};u&2&&(a6.$$scope={dirty:u,ctx:f}),lw.$set(a6);const S7e={};u&2&&(S7e.$$scope={dirty:u,ctx:f}),dw.$set(S7e);const R7e={};u&2&&(R7e.$$scope={dirty:u,ctx:f}),Fw.$set(R7e);const n6={};u&2&&(n6.$$scope={dirty:u,ctx:f}),Mw.$set(n6);const P7e={};u&2&&(P7e.$$scope={dirty:u,ctx:f}),Rw.$set(P7e);const B7e={};u&2&&(B7e.$$scope={dirty:u,ctx:f}),Bw.$set(B7e);const s6={};u&2&&(s6.$$scope={dirty:u,ctx:f}),Qw.$set(s6);const N7e={};u&2&&(N7e.$$scope={dirty:u,ctx:f}),Hw.$set(N7e);const I7e={};u&2&&(I7e.$$scope={dirty:u,ctx:f}),nA.$set(I7e);const l6={};u&2&&(l6.$$scope={dirty:u,ctx:f}),lA.$set(l6);const q7e={};u&2&&(q7e.$$scope={dirty:u,ctx:f}),_A.$set(q7e);const j7e={};u&2&&(j7e.$$scope={dirty:u,ctx:f}),bA.$set(j7e);const i6={};u&2&&(i6.$$scope={dirty:u,ctx:f}),LA.$set(i6);const D7e={};u&2&&(D7e.$$scope={dirty:u,ctx:f}),xA.$set(D7e);const G7e={};u&2&&(G7e.$$scope={dirty:u,ctx:f}),kA.$set(G7e);const d6={};u&2&&(d6.$$scope={dirty:u,ctx:f}),RA.$set(d6);const O7e={};u&2&&(O7e.$$scope={dirty:u,ctx:f}),NA.$set(O7e);const V7e={};u&2&&(V7e.$$scope={dirty:u,ctx:f}),qA.$set(V7e);const c6={};u&2&&(c6.$$scope={dirty:u,ctx:f}),DA.$set(c6)},i(f){EQe||(E(d.$$.fragment,f),E(Sa.$$.fragment,f),E(dL.$$.fragment,f),E(cL.$$.fragment,f),E(Df.$$.fragment,f),E(fL.$$.fragment,f),E(mL.$$.fragment,f),E(pL.$$.fragment,f),E(Kg.$$.fragment,f),E(_L.$$.fragment,f),E(uL.$$.fragment,f),E(bL.$$.fragment,f),E(TL.$$.fragment,f),E(Ph.$$.fragment,f),E(ML.$$.fragment,f),E(EL.$$.fragment,f),E(CL.$$.fragment,f),E(LL.$$.fragment,f),E(up.$$.fragment,f),E(bp.$$.fragment,f),E(yL.$$.fragment,f),E(xL.$$.fragment,f),E($L.$$.fragment,f),E(RL.$$.fragment,f),E(jp.$$.fragment,f),E(Dp.$$.fragment,f),E(PL.$$.fragment,f),E(BL.$$.fragment,f),E(NL.$$.fragment,f),E(qL.$$.fragment,f),E(Vp.$$.fragment,f),E(jL.$$.fragment,f),E(Hu.$$.fragment,f),E(DL.$$.fragment,f),E(GL.$$.fragment,f),E(VL.$$.fragment,f),E(Ju.$$.fragment,f),E(XL.$$.fragment,f),E(V2.$$.fragment,f),E(zL.$$.fragment,f),E(QL.$$.fragment,f),E(HL.$$.fragment,f),E(z2.$$.fragment,f),E(UL.$$.fragment,f),E(R1.$$.fragment,f),E(JL.$$.fragment,f),E(YL.$$.fragment,f),E(ZL.$$.fragment,f),E(B1.$$.fragment,f),E(ey.$$.fragment,f),E(Tb.$$.fragment,f),E(oy.$$.fragment,f),E(ry.$$.fragment,f),E(ay.$$.fragment,f),E(Eb.$$.fragment,f),E(ny.$$.fragment,f),E(Xb.$$.fragment,f),E(sy.$$.fragment,f),E(ly.$$.fragment,f),E(dy.$$.fragment,f),E(Qb.$$.fragment,f),E(cy.$$.fragment,f),E(Xv.$$.fragment,f),E(fy.$$.fragment,f),E(my.$$.fragment,f),E(hy.$$.fragment,f),E(Qv.$$.fragment,f),E(py.$$.fragment,f),E(C0.$$.fragment,f),E(_y.$$.fragment,f),E(uy.$$.fragment,f),E(vy.$$.fragment,f),E(A0.$$.fragment,f),E(Fy.$$.fragment,f),E(P0.$$.fragment,f),E(Ty.$$.fragment,f),E(My.$$.fragment,f),E(Cy.$$.fragment,f),E(N0.$$.fragment,f),E(wy.$$.fragment,f),E(FF.$$.fragment,f),E(Ay.$$.fragment,f),E(Ly.$$.fragment,f),E(xy.$$.fragment,f),E(MF.$$.fragment,f),E($y.$$.fragment,f),E(mT.$$.fragment,f),E(ky.$$.fragment,f),E(Sy.$$.fragment,f),E(Py.$$.fragment,f),E(hT.$$.fragment,f),E(By.$$.fragment,f),E(uT.$$.fragment,f),E(Ny.$$.fragment,f),E(Iy.$$.fragment,f),E(jy.$$.fragment,f),E(vT.$$.fragment,f),E(Dy.$$.fragment,f),E(PT.$$.fragment,f),E(Gy.$$.fragment,f),E(Oy.$$.fragment,f),E(Xy.$$.fragment,f),E(NT.$$.fragment,f),E(zy.$$.fragment,f),E(jT.$$.fragment,f),E(Qy.$$.fragment,f),E(Wy.$$.fragment,f),E(Uy.$$.fragment,f),E(GT.$$.fragment,f),E(Jy.$$.fragment,f),E(XT.$$.fragment,f),E(Yy.$$.fragment,f),E(Ky.$$.fragment,f),E(e9.$$.fragment,f),E(QT.$$.fragment,f),E(o9.$$.fragment,f),E(t8.$$.fragment,f),E(r9.$$.fragment,f),E(t9.$$.fragment,f),E(n9.$$.fragment,f),E(n8.$$.fragment,f),E(s9.$$.fragment,f),E(m8.$$.fragment,f),E(l9.$$.fragment,f),E(i9.$$.fragment,f),E(c9.$$.fragment,f),E(h8.$$.fragment,f),E(f9.$$.fragment,f),E(A8.$$.fragment,f),E(m9.$$.fragment,f),E(g9.$$.fragment,f),E(p9.$$.fragment,f),E(y8.$$.fragment,f),E(_9.$$.fragment,f),E(S8.$$.fragment,f),E(b9.$$.fragment,f),E(v9.$$.fragment,f),E(T9.$$.fragment,f),E(P8.$$.fragment,f),E(M9.$$.fragment,f),E(G8.$$.fragment,f),E(E9.$$.fragment,f),E(C9.$$.fragment,f),E(A9.$$.fragment,f),E(V8.$$.fragment,f),E(L9.$$.fragment,f),E(H8.$$.fragment,f),E(y9.$$.fragment,f),E(x9.$$.fragment,f),E(k9.$$.fragment,f),E(J8.$$.fragment,f),E(S9.$$.fragment,f),E(eM.$$.fragment,f),E(P9.$$.fragment,f),E(B9.$$.fragment,f),E(I9.$$.fragment,f),E(rM.$$.fragment,f),E(q9.$$.fragment,f),E(nM.$$.fragment,f),E(j9.$$.fragment,f),E(D9.$$.fragment,f),E(O9.$$.fragment,f),E(lM.$$.fragment,f),E(V9.$$.fragment,f),E(hM.$$.fragment,f),E(X9.$$.fragment,f),E(z9.$$.fragment,f),E(W9.$$.fragment,f),E(_M.$$.fragment,f),E(H9.$$.fragment,f),E(vM.$$.fragment,f),E(U9.$$.fragment,f),E(J9.$$.fragment,f),E(K9.$$.fragment,f),E(TM.$$.fragment,f),E(Z9.$$.fragment,f),E(u4.$$.fragment,f),E(ex.$$.fragment,f),E(ox.$$.fragment,f),E(tx.$$.fragment,f),E(v4.$$.fragment,f),E(ax.$$.fragment,f),E(V4.$$.fragment,f),E(nx.$$.fragment,f),E(sx.$$.fragment,f),E(ix.$$.fragment,f),E(z4.$$.fragment,f),E(dx.$$.fragment,f),E(nE.$$.fragment,f),E(cx.$$.fragment,f),E(fx.$$.fragment,f),E(gx.$$.fragment,f),E(lE.$$.fragment,f),E(hx.$$.fragment,f),E(hE.$$.fragment,f),E(px.$$.fragment,f),E(_x.$$.fragment,f),E(bx.$$.fragment,f),E(_E.$$.fragment,f),E(vx.$$.fragment,f),E(IE.$$.fragment,f),E(Fx.$$.fragment,f),E(Tx.$$.fragment,f),E(Ex.$$.fragment,f),E(jE.$$.fragment,f),E(Cx.$$.fragment,f),E(JE.$$.fragment,f),E(wx.$$.fragment,f),E(Ax.$$.fragment,f),E(yx.$$.fragment,f),E(KE.$$.fragment,f),E(xx.$$.fragment,f),E(wC.$$.fragment,f),E($x.$$.fragment,f),E(kx.$$.fragment,f),E(Rx.$$.fragment,f),E(LC.$$.fragment,f),E(Px.$$.fragment,f),E(zC.$$.fragment,f),E(Bx.$$.fragment,f),E(Nx.$$.fragment,f),E(qx.$$.fragment,f),E(WC.$$.fragment,f),E(jx.$$.fragment,f),E(JC.$$.fragment,f),E(Gx.$$.fragment,f),E(Ox.$$.fragment,f),E(Xx.$$.fragment,f),E(KC.$$.fragment,f),E(zx.$$.fragment,f),E(e3.$$.fragment,f),E(Qx.$$.fragment,f),E(Wx.$$.fragment,f),E(Ux.$$.fragment,f),E(r3.$$.fragment,f),E(Jx.$$.fragment,f),E(E3.$$.fragment,f),E(Yx.$$.fragment,f),E(Kx.$$.fragment,f),E(e$.$$.fragment,f),E(w3.$$.fragment,f),E(o$.$$.fragment,f),E(Q3.$$.fragment,f),E(r$.$$.fragment,f),E(t$.$$.fragment,f),E(n$.$$.fragment,f),E(H3.$$.fragment,f),E(s$.$$.fragment,f),E(J3.$$.fragment,f),E(l$.$$.fragment,f),E(i$.$$.fragment,f),E(c$.$$.fragment,f),E(K3.$$.fragment,f),E(f$.$$.fragment,f),E(e5.$$.fragment,f),E(m$.$$.fragment,f),E(g$.$$.fragment,f),E(p$.$$.fragment,f),E(r5.$$.fragment,f),E(_$.$$.fragment,f),E(k5.$$.fragment,f),E(u$.$$.fragment,f),E(b$.$$.fragment,f),E(F$.$$.fragment,f),E(R5.$$.fragment,f),E(T$.$$.fragment,f),E(z5.$$.fragment,f),E(M$.$$.fragment,f),E(E$.$$.fragment,f),E(w$.$$.fragment,f),E(W5.$$.fragment,f),E(A$.$$.fragment,f),E(lw.$$.fragment,f),E(L$.$$.fragment,f),E(y$.$$.fragment,f),E($$.$$.fragment,f),E(dw.$$.fragment,f),E(k$.$$.fragment,f),E(Fw.$$.fragment,f),E(S$.$$.fragment,f),E(R$.$$.fragment,f),E(B$.$$.fragment,f),E(Mw.$$.fragment,f),E(N$.$$.fragment,f),E(Rw.$$.fragment,f),E(I$.$$.fragment,f),E(q$.$$.fragment,f),E(D$.$$.fragment,f),E(Bw.$$.fragment,f),E(G$.$$.fragment,f),E(Qw.$$.fragment,f),E(O$.$$.fragment,f),E(V$.$$.fragment,f),E(z$.$$.fragment,f),E(Hw.$$.fragment,f),E(Q$.$$.fragment,f),E(nA.$$.fragment,f),E(W$.$$.fragment,f),E(H$.$$.fragment,f),E(J$.$$.fragment,f),E(lA.$$.fragment,f),E(Y$.$$.fragment,f),E(_A.$$.fragment,f),E(K$.$$.fragment,f),E(Z$.$$.fragment,f),E(ok.$$.fragment,f),E(bA.$$.fragment,f),E(rk.$$.fragment,f),E(LA.$$.fragment,f),E(tk.$$.fragment,f),E(ak.$$.fragment,f),E(sk.$$.fragment,f),E(xA.$$.fragment,f),E(lk.$$.fragment,f),E(kA.$$.fragment,f),E(ik.$$.fragment,f),E(dk.$$.fragment,f),E(fk.$$.fragment,f),E(RA.$$.fragment,f),E(mk.$$.fragment,f),E(NA.$$.fragment,f),E(hk.$$.fragment,f),E(pk.$$.fragment,f),E(uk.$$.fragment,f),E(qA.$$.fragment,f),E(bk.$$.fragment,f),E(DA.$$.fragment,f),EQe=!0)},o(f){C(d.$$.fragment,f),C(Sa.$$.fragment,f),C(dL.$$.fragment,f),C(cL.$$.fragment,f),C(Df.$$.fragment,f),C(fL.$$.fragment,f),C(mL.$$.fragment,f),C(pL.$$.fragment,f),C(Kg.$$.fragment,f),C(_L.$$.fragment,f),C(uL.$$.fragment,f),C(bL.$$.fragment,f),C(TL.$$.fragment,f),C(Ph.$$.fragment,f),C(ML.$$.fragment,f),C(EL.$$.fragment,f),C(CL.$$.fragment,f),C(LL.$$.fragment,f),C(up.$$.fragment,f),C(bp.$$.fragment,f),C(yL.$$.fragment,f),C(xL.$$.fragment,f),C($L.$$.fragment,f),C(RL.$$.fragment,f),C(jp.$$.fragment,f),C(Dp.$$.fragment,f),C(PL.$$.fragment,f),C(BL.$$.fragment,f),C(NL.$$.fragment,f),C(qL.$$.fragment,f),C(Vp.$$.fragment,f),C(jL.$$.fragment,f),C(Hu.$$.fragment,f),C(DL.$$.fragment,f),C(GL.$$.fragment,f),C(VL.$$.fragment,f),C(Ju.$$.fragment,f),C(XL.$$.fragment,f),C(V2.$$.fragment,f),C(zL.$$.fragment,f),C(QL.$$.fragment,f),C(HL.$$.fragment,f),C(z2.$$.fragment,f),C(UL.$$.fragment,f),C(R1.$$.fragment,f),C(JL.$$.fragment,f),C(YL.$$.fragment,f),C(ZL.$$.fragment,f),C(B1.$$.fragment,f),C(ey.$$.fragment,f),C(Tb.$$.fragment,f),C(oy.$$.fragment,f),C(ry.$$.fragment,f),C(ay.$$.fragment,f),C(Eb.$$.fragment,f),C(ny.$$.fragment,f),C(Xb.$$.fragment,f),C(sy.$$.fragment,f),C(ly.$$.fragment,f),C(dy.$$.fragment,f),C(Qb.$$.fragment,f),C(cy.$$.fragment,f),C(Xv.$$.fragment,f),C(fy.$$.fragment,f),C(my.$$.fragment,f),C(hy.$$.fragment,f),C(Qv.$$.fragment,f),C(py.$$.fragment,f),C(C0.$$.fragment,f),C(_y.$$.fragment,f),C(uy.$$.fragment,f),C(vy.$$.fragment,f),C(A0.$$.fragment,f),C(Fy.$$.fragment,f),C(P0.$$.fragment,f),C(Ty.$$.fragment,f),C(My.$$.fragment,f),C(Cy.$$.fragment,f),C(N0.$$.fragment,f),C(wy.$$.fragment,f),C(FF.$$.fragment,f),C(Ay.$$.fragment,f),C(Ly.$$.fragment,f),C(xy.$$.fragment,f),C(MF.$$.fragment,f),C($y.$$.fragment,f),C(mT.$$.fragment,f),C(ky.$$.fragment,f),C(Sy.$$.fragment,f),C(Py.$$.fragment,f),C(hT.$$.fragment,f),C(By.$$.fragment,f),C(uT.$$.fragment,f),C(Ny.$$.fragment,f),C(Iy.$$.fragment,f),C(jy.$$.fragment,f),C(vT.$$.fragment,f),C(Dy.$$.fragment,f),C(PT.$$.fragment,f),C(Gy.$$.fragment,f),C(Oy.$$.fragment,f),C(Xy.$$.fragment,f),C(NT.$$.fragment,f),C(zy.$$.fragment,f),C(jT.$$.fragment,f),C(Qy.$$.fragment,f),C(Wy.$$.fragment,f),C(Uy.$$.fragment,f),C(GT.$$.fragment,f),C(Jy.$$.fragment,f),C(XT.$$.fragment,f),C(Yy.$$.fragment,f),C(Ky.$$.fragment,f),C(e9.$$.fragment,f),C(QT.$$.fragment,f),C(o9.$$.fragment,f),C(t8.$$.fragment,f),C(r9.$$.fragment,f),C(t9.$$.fragment,f),C(n9.$$.fragment,f),C(n8.$$.fragment,f),C(s9.$$.fragment,f),C(m8.$$.fragment,f),C(l9.$$.fragment,f),C(i9.$$.fragment,f),C(c9.$$.fragment,f),C(h8.$$.fragment,f),C(f9.$$.fragment,f),C(A8.$$.fragment,f),C(m9.$$.fragment,f),C(g9.$$.fragment,f),C(p9.$$.fragment,f),C(y8.$$.fragment,f),C(_9.$$.fragment,f),C(S8.$$.fragment,f),C(b9.$$.fragment,f),C(v9.$$.fragment,f),C(T9.$$.fragment,f),C(P8.$$.fragment,f),C(M9.$$.fragment,f),C(G8.$$.fragment,f),C(E9.$$.fragment,f),C(C9.$$.fragment,f),C(A9.$$.fragment,f),C(V8.$$.fragment,f),C(L9.$$.fragment,f),C(H8.$$.fragment,f),C(y9.$$.fragment,f),C(x9.$$.fragment,f),C(k9.$$.fragment,f),C(J8.$$.fragment,f),C(S9.$$.fragment,f),C(eM.$$.fragment,f),C(P9.$$.fragment,f),C(B9.$$.fragment,f),C(I9.$$.fragment,f),C(rM.$$.fragment,f),C(q9.$$.fragment,f),C(nM.$$.fragment,f),C(j9.$$.fragment,f),C(D9.$$.fragment,f),C(O9.$$.fragment,f),C(lM.$$.fragment,f),C(V9.$$.fragment,f),C(hM.$$.fragment,f),C(X9.$$.fragment,f),C(z9.$$.fragment,f),C(W9.$$.fragment,f),C(_M.$$.fragment,f),C(H9.$$.fragment,f),C(vM.$$.fragment,f),C(U9.$$.fragment,f),C(J9.$$.fragment,f),C(K9.$$.fragment,f),C(TM.$$.fragment,f),C(Z9.$$.fragment,f),C(u4.$$.fragment,f),C(ex.$$.fragment,f),C(ox.$$.fragment,f),C(tx.$$.fragment,f),C(v4.$$.fragment,f),C(ax.$$.fragment,f),C(V4.$$.fragment,f),C(nx.$$.fragment,f),C(sx.$$.fragment,f),C(ix.$$.fragment,f),C(z4.$$.fragment,f),C(dx.$$.fragment,f),C(nE.$$.fragment,f),C(cx.$$.fragment,f),C(fx.$$.fragment,f),C(gx.$$.fragment,f),C(lE.$$.fragment,f),C(hx.$$.fragment,f),C(hE.$$.fragment,f),C(px.$$.fragment,f),C(_x.$$.fragment,f),C(bx.$$.fragment,f),C(_E.$$.fragment,f),C(vx.$$.fragment,f),C(IE.$$.fragment,f),C(Fx.$$.fragment,f),C(Tx.$$.fragment,f),C(Ex.$$.fragment,f),C(jE.$$.fragment,f),C(Cx.$$.fragment,f),C(JE.$$.fragment,f),C(wx.$$.fragment,f),C(Ax.$$.fragment,f),C(yx.$$.fragment,f),C(KE.$$.fragment,f),C(xx.$$.fragment,f),C(wC.$$.fragment,f),C($x.$$.fragment,f),C(kx.$$.fragment,f),C(Rx.$$.fragment,f),C(LC.$$.fragment,f),C(Px.$$.fragment,f),C(zC.$$.fragment,f),C(Bx.$$.fragment,f),C(Nx.$$.fragment,f),C(qx.$$.fragment,f),C(WC.$$.fragment,f),C(jx.$$.fragment,f),C(JC.$$.fragment,f),C(Gx.$$.fragment,f),C(Ox.$$.fragment,f),C(Xx.$$.fragment,f),C(KC.$$.fragment,f),C(zx.$$.fragment,f),C(e3.$$.fragment,f),C(Qx.$$.fragment,f),C(Wx.$$.fragment,f),C(Ux.$$.fragment,f),C(r3.$$.fragment,f),C(Jx.$$.fragment,f),C(E3.$$.fragment,f),C(Yx.$$.fragment,f),C(Kx.$$.fragment,f),C(e$.$$.fragment,f),C(w3.$$.fragment,f),C(o$.$$.fragment,f),C(Q3.$$.fragment,f),C(r$.$$.fragment,f),C(t$.$$.fragment,f),C(n$.$$.fragment,f),C(H3.$$.fragment,f),C(s$.$$.fragment,f),C(J3.$$.fragment,f),C(l$.$$.fragment,f),C(i$.$$.fragment,f),C(c$.$$.fragment,f),C(K3.$$.fragment,f),C(f$.$$.fragment,f),C(e5.$$.fragment,f),C(m$.$$.fragment,f),C(g$.$$.fragment,f),C(p$.$$.fragment,f),C(r5.$$.fragment,f),C(_$.$$.fragment,f),C(k5.$$.fragment,f),C(u$.$$.fragment,f),C(b$.$$.fragment,f),C(F$.$$.fragment,f),C(R5.$$.fragment,f),C(T$.$$.fragment,f),C(z5.$$.fragment,f),C(M$.$$.fragment,f),C(E$.$$.fragment,f),C(w$.$$.fragment,f),C(W5.$$.fragment,f),C(A$.$$.fragment,f),C(lw.$$.fragment,f),C(L$.$$.fragment,f),C(y$.$$.fragment,f),C($$.$$.fragment,f),C(dw.$$.fragment,f),C(k$.$$.fragment,f),C(Fw.$$.fragment,f),C(S$.$$.fragment,f),C(R$.$$.fragment,f),C(B$.$$.fragment,f),C(Mw.$$.fragment,f),C(N$.$$.fragment,f),C(Rw.$$.fragment,f),C(I$.$$.fragment,f),C(q$.$$.fragment,f),C(D$.$$.fragment,f),C(Bw.$$.fragment,f),C(G$.$$.fragment,f),C(Qw.$$.fragment,f),C(O$.$$.fragment,f),C(V$.$$.fragment,f),C(z$.$$.fragment,f),C(Hw.$$.fragment,f),C(Q$.$$.fragment,f),C(nA.$$.fragment,f),C(W$.$$.fragment,f),C(H$.$$.fragment,f),C(J$.$$.fragment,f),C(lA.$$.fragment,f),C(Y$.$$.fragment,f),C(_A.$$.fragment,f),C(K$.$$.fragment,f),C(Z$.$$.fragment,f),C(ok.$$.fragment,f),C(bA.$$.fragment,f),C(rk.$$.fragment,f),C(LA.$$.fragment,f),C(tk.$$.fragment,f),C(ak.$$.fragment,f),C(sk.$$.fragment,f),C(xA.$$.fragment,f),C(lk.$$.fragment,f),C(kA.$$.fragment,f),C(ik.$$.fragment,f),C(dk.$$.fragment,f),C(fk.$$.fragment,f),C(RA.$$.fragment,f),C(mk.$$.fragment,f),C(NA.$$.fragment,f),C(hk.$$.fragment,f),C(pk.$$.fragment,f),C(uk.$$.fragment,f),C(qA.$$.fragment,f),C(bk.$$.fragment,f),C(DA.$$.fragment,f),EQe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(Bf),f&&t(lt),f&&t(Oe),f&&t(We),f&&t(If),w(Sa,f),f&&t(He),f&&t(Le),f&&t(wo),f&&t(Ra),f&&t(bXe),f&&t(Bi),w(dL),f&&t(vXe),f&&t(qn),f&&t(FXe),w(cL,f),f&&t(TXe),f&&t(QS),f&&t(MXe),w(Df,f),f&&t(EXe),f&&t(Ni),w(fL),f&&t(CXe),f&&t(Ao),w(mL),w(pL),w(Kg),w(_L),f&&t(wXe),f&&t(qi),w(uL),f&&t(AXe),f&&t(Lo),w(bL),w(TL),w(Ph),w(ML),f&&t(LXe),f&&t(ji),w(EL),f&&t(yXe),f&&t(yo),w(CL),w(LL),w(up),w(bp),w(yL),f&&t(xXe),f&&t(Di),w(xL),f&&t($Xe),f&&t(xo),w($L),w(RL),w(jp),w(Dp),w(PL),f&&t(kXe),f&&t(Oi),w(BL),f&&t(SXe),f&&t($o),w(NL),w(qL),w(Vp),w(jL),w(Hu),f&&t(RXe),f&&t(zi),w(DL),f&&t(PXe),f&&t(ko),w(GL),w(VL),w(Ju),w(XL),w(V2),f&&t(BXe),f&&t(Hi),w(zL),f&&t(NXe),f&&t(So),w(QL),w(HL),w(z2),w(UL),w(R1),f&&t(IXe),f&&t(Yi),w(JL),f&&t(qXe),f&&t(Ro),w(YL),w(ZL),w(B1),w(ey),w(Tb),f&&t(jXe),f&&t(ed),w(oy),f&&t(DXe),f&&t(Po),w(ry),w(ay),w(Eb),w(ny),w(Xb),f&&t(GXe),f&&t(td),w(sy),f&&t(OXe),f&&t(Bo),w(ly),w(dy),w(Qb),w(cy),w(Xv),f&&t(VXe),f&&t(sd),w(fy),f&&t(XXe),f&&t(No),w(my),w(hy),w(Qv),w(py),w(C0),f&&t(zXe),f&&t(dd),w(_y),f&&t(QXe),f&&t(Io),w(uy),w(vy),w(A0),w(Fy),w(P0),f&&t(WXe),f&&t(md),w(Ty),f&&t(HXe),f&&t(jo),w(My),w(Cy),w(N0),w(wy),w(FF),f&&t(UXe),f&&t(pd),w(Ay),f&&t(JXe),f&&t(Do),w(Ly),w(xy),w(MF),w($y),w(mT),f&&t(YXe),f&&t(bd),w(ky),f&&t(KXe),f&&t(Go),w(Sy),w(Py),w(hT),w(By),w(uT),f&&t(ZXe),f&&t(Td),w(Ny),f&&t(eze),f&&t(Oo),w(Iy),w(jy),w(vT),w(Dy),w(PT),f&&t(oze),f&&t(Cd),w(Gy),f&&t(rze),f&&t(Vo),w(Oy),w(Xy),w(NT),w(zy),w(jT),f&&t(tze),f&&t(Ld),w(Qy),f&&t(aze),f&&t(Xo),w(Wy),w(Uy),w(GT),w(Jy),w(XT),f&&t(nze),f&&t($d),w(Yy),f&&t(sze),f&&t(zo),w(Ky),w(e9),w(QT),w(o9),w(t8),f&&t(lze),f&&t(Rd),w(r9),f&&t(ize),f&&t(Qo),w(t9),w(n9),w(n8),w(s9),w(m8),f&&t(dze),f&&t(Nd),w(l9),f&&t(cze),f&&t(Wo),w(i9),w(c9),w(h8),w(f9),w(A8),f&&t(fze),f&&t(jd),w(m9),f&&t(mze),f&&t(Ho),w(g9),w(p9),w(y8),w(_9),w(S8),f&&t(gze),f&&t(Od),w(b9),f&&t(hze),f&&t(Uo),w(v9),w(T9),w(P8),w(M9),w(G8),f&&t(pze),f&&t(zd),w(E9),f&&t(_ze),f&&t(Jo),w(C9),w(A9),w(V8),w(L9),w(H8),f&&t(uze),f&&t(Ud),w(y9),f&&t(bze),f&&t(Yo),w(x9),w(k9),w(J8),w(S9),w(eM),f&&t(vze),f&&t(Kd),w(P9),f&&t(Fze),f&&t(Ko),w(B9),w(I9),w(rM),w(q9),w(nM),f&&t(Tze),f&&t(oc),w(j9),f&&t(Mze),f&&t(Zo),w(D9),w(O9),w(lM),w(V9),w(hM),f&&t(Eze),f&&t(ac),w(X9),f&&t(Cze),f&&t(er),w(z9),w(W9),w(_M),w(H9),w(vM),f&&t(wze),f&&t(lc),w(U9),f&&t(Aze),f&&t(or),w(J9),w(K9),w(TM),w(Z9),w(u4),f&&t(Lze),f&&t(cc),w(ex),f&&t(yze),f&&t(rr),w(ox),w(tx),w(v4),w(ax),w(V4),f&&t(xze),f&&t(gc),w(nx),f&&t($ze),f&&t(tr),w(sx),w(ix),w(z4),w(dx),w(nE),f&&t(kze),f&&t(_c),w(cx),f&&t(Sze),f&&t(ar),w(fx),w(gx),w(lE),w(hx),w(hE),f&&t(Rze),f&&t(vc),w(px),f&&t(Pze),f&&t(nr),w(_x),w(bx),w(_E),w(vx),w(IE),f&&t(Bze),f&&t(Mc),w(Fx),f&&t(Nze),f&&t(sr),w(Tx),w(Ex),w(jE),w(Cx),w(JE),f&&t(Ize),f&&t(wc),w(wx),f&&t(qze),f&&t(lr),w(Ax),w(yx),w(KE),w(xx),w(wC),f&&t(jze),f&&t(yc),w($x),f&&t(Dze),f&&t(ir),w(kx),w(Rx),w(LC),w(Px),w(zC),f&&t(Gze),f&&t(kc),w(Bx),f&&t(Oze),f&&t(dr),w(Nx),w(qx),w(WC),w(jx),w(JC),f&&t(Vze),f&&t(Pc),w(Gx),f&&t(Xze),f&&t(cr),w(Ox),w(Xx),w(KC),w(zx),w(e3),f&&t(zze),f&&t(Ic),w(Qx),f&&t(Qze),f&&t(fr),w(Wx),w(Ux),w(r3),w(Jx),w(E3),f&&t(Wze),f&&t(Dc),w(Yx),f&&t(Hze),f&&t(mr),w(Kx),w(e$),w(w3),w(o$),w(Q3),f&&t(Uze),f&&t(Vc),w(r$),f&&t(Jze),f&&t(gr),w(t$),w(n$),w(H3),w(s$),w(J3),f&&t(Yze),f&&t(Qc),w(l$),f&&t(Kze),f&&t(hr),w(i$),w(c$),w(K3),w(f$),w(e5),f&&t(Zze),f&&t(Uc),w(m$),f&&t(eQe),f&&t(pr),w(g$),w(p$),w(r5),w(_$),w(k5),f&&t(oQe),f&&t(Kc),w(u$),f&&t(rQe),f&&t(_r),w(b$),w(F$),w(R5),w(T$),w(z5),f&&t(tQe),f&&t(of),w(M$),f&&t(aQe),f&&t(ur),w(E$),w(w$),w(W5),w(A$),w(lw),f&&t(nQe),f&&t(af),w(L$),f&&t(sQe),f&&t(br),w(y$),w($$),w(dw),w(k$),w(Fw),f&&t(lQe),f&&t(lf),w(S$),f&&t(iQe),f&&t(vr),w(R$),w(B$),w(Mw),w(N$),w(Rw),f&&t(dQe),f&&t(ff),w(I$),f&&t(cQe),f&&t(Fr),w(q$),w(D$),w(Bw),w(G$),w(Qw),f&&t(fQe),f&&t(hf),w(O$),f&&t(mQe),f&&t(Tr),w(V$),w(z$),w(Hw),w(Q$),w(nA),f&&t(gQe),f&&t(uf),w(W$),f&&t(hQe),f&&t(Mr),w(H$),w(J$),w(lA),w(Y$),w(_A),f&&t(pQe),f&&t(Ff),w(K$),f&&t(_Qe),f&&t(Er),w(Z$),w(ok),w(bA),w(rk),w(LA),f&&t(uQe),f&&t(Ef),w(tk),f&&t(bQe),f&&t(Cr),w(ak),w(sk),w(xA),w(lk),w(kA),f&&t(vQe),f&&t(Af),w(ik),f&&t(FQe),f&&t(wr),w(dk),w(fk),w(RA),w(mk),w(NA),f&&t(TQe),f&&t(xf),w(hk),f&&t(MQe),f&&t(Ar),w(pk),w(uk),w(qA),w(bk),w(DA)}}}const DUt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function GUt($){return jWt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class HUt extends BWt{constructor(g){super();NWt(this,g,GUt,jUt,IWt,{})}}export{HUt as default,DUt as metadata};
